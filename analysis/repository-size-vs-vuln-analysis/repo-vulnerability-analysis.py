import json
from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import defaultdict


def analyze_repo_vulnerabilities(nvd_data_dir: str = "nvd_data"):
    # Dictionary to store repository data
    repo_data = defaultdict(lambda: {"size": 0, "vuln_count": 0, "cvss_scores": []})

    # Process all vulnerability files
    nvd_path = Path(nvd_data_dir)
    for file_path in nvd_path.glob("*.json"):
        try:
            with open(file_path) as f:
                vuln_data = json.load(f)

            # Get repository info and CVSS score
            repo_context = vuln_data.get("repository_context", {})
            repo_name = vuln_data["github_data"]["repository"]
            cvss_score = vuln_data["vulnerability_details"].get("cvss_score")

            if (
                repo_name
                and repo_context.get("size") is not None
                and cvss_score is not None
            ):
                repo_data[repo_name]["size"] = repo_context["size"]
                repo_data[repo_name]["vuln_count"] += 1
                repo_data[repo_name]["cvss_scores"].append(cvss_score)

        except Exception as e:
            print(f"Error processing {file_path}: {e}")

    # Convert to DataFrame
    df_data = []
    for repo, data in repo_data.items():
        if data["vuln_count"] > 0:  # Only include repos with vulnerabilities
            df_data.append(
                {
                    "repository": repo,
                    "size_kb": data["size"],
                    "vuln_count": data["vuln_count"],
                    "avg_cvss": sum(data["cvss_scores"]) / len(data["cvss_scores"]),
                }
            )

    df = pd.DataFrame(df_data)

    # Convert size to MB for better readability
    df["size_mb"] = df["size_kb"] / 1024

    # Create the scatter plot
    plt.figure(figsize=(12, 8))

    # Create scatter plot with color based on CVSS score
    scatter = plt.scatter(
        df["size_mb"],
        df["vuln_count"],
        c=df["avg_cvss"],
        cmap="YlOrRd",
        alpha=0.6,
        s=100,
    )

    # Add colorbar
    cbar = plt.colorbar(scatter)
    cbar.set_label("Average CVSS Score", rotation=270, labelpad=15)

    # Set labels and title
    plt.xlabel("Repository Size (MB)")
    plt.ylabel("Number of Vulnerabilities")
    plt.title(
        "Repository Size vs. Number of Vulnerabilities\nColored by Average CVSS Score"
    )

    # Use log scale for x-axis due to wide range of repository sizes
    plt.xscale("log")

    # Add grid
    plt.grid(True, alpha=0.3)

    # Print some statistics
    print("\nAnalysis Statistics:")
    print(f"Total repositories analyzed: {len(df)}")
    print(
        f"\nCorrelation between repository size and vulnerability count: {df['size_mb'].corr(df['vuln_count']):.3f}"
    )
    print(
        f"Correlation between repository size and average CVSS score: {df['size_mb'].corr(df['avg_cvss']):.3f}"
    )
    print(
        f"Correlation between vulnerability count and average CVSS score: {df['vuln_count'].corr(df['avg_cvss']):.3f}"
    )

    # Find and print notable repositories
    print("\nTop 5 repositories by number of vulnerabilities:")
    print(
        df.nlargest(5, "vuln_count")[
            ["repository", "vuln_count", "size_mb", "avg_cvss"]
        ]
    )

    # Save the plot
    plt.tight_layout()
    plt.savefig("repo_size_vs_vulnerabilities.png", dpi=300, bbox_inches="tight")
    plt.close()


if __name__ == "__main__":
    analyze_repo_vulnerabilities()
