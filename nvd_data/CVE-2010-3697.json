{
  "cve_id": "CVE-2010-3697",
  "github_data": {
    "repository": "alandekok/freeradius-server",
    "fix_commit": "ff94dd35673bba1476594299d31ce8293b8bd223",
    "related_commits": [
      "ff94dd35673bba1476594299d31ce8293b8bd223",
      "ff94dd35673bba1476594299d31ce8293b8bd223"
    ],
    "patch_url": "https://github.com/alandekok/freeradius-server/commit/ff94dd35673bba1476594299d31ce8293b8bd223.patch",
    "fix_commit_details": {
      "sha": "ff94dd35673bba1476594299d31ce8293b8bd223",
      "commit_date": "2010-06-30T19:58:27Z",
      "author": {
        "login": "alandekok",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Do not delete \"old\" requests until they are free.",
        "length": 366,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 66,
        "additions": 34,
        "deletions": 32
      },
      "files": [
        {
          "filename": "src/main/event.c",
          "status": "modified",
          "additions": 34,
          "deletions": 32,
          "patch": "@@ -479,6 +479,7 @@ static void wait_for_child_to_die(void *ctx)\n \tREQUEST *request = ctx;\n \n \trad_assert(request->magic == REQUEST_MAGIC);\n+\tremove_from_request_hash(request);\n \n \t/*\n \t *\tIf it's still queued (waiting for a thread to pick it\n@@ -490,14 +491,15 @@ static void wait_for_child_to_die(void *ctx)\n \t     (pthread_equal(request->child_pid, NO_SUCH_CHILD_PID) == 0))) {\n \n \t\t/*\n-\t\t *\tCap delay at five minutes.\n+\t\t *\tCap delay at max_request_time\n \t\t */\n-\t\tif (request->delay < (USEC * 60 * 5)) {\n+\t\tif (request->delay < (USEC * request->root->max_request_time)) {\n \t\t\trequest->delay += (request->delay >> 1);\n \t\t\tradlog(L_INFO, \"WARNING: Child is hung for request %u in component %s module %s.\",\n \t\t\t       request->number, request->component, request->module);\n \t\t} else {\n-\t\t\tRDEBUG2(\"Child is still stuck for request %u\",\n+\t\t\trequest->delay = USEC * request->root->max_request_time;\n+\t\t\tRDEBUG2(\"WARNING: Child is still stuck for request %u\",\n \t\t\t\trequest->number);\n \t\t}\n \t\ttv_add(&request->when, request->delay);\n@@ -507,7 +509,6 @@ static void wait_for_child_to_die(void *ctx)\n \t}\n \n \tRDEBUG2(\"Child is finally responsive for request %u\", request->number);\n-\tremove_from_request_hash(request);\n \n #ifdef WITH_PROXY\n \tif (request->proxy) {\n@@ -1140,6 +1141,25 @@ static void wait_a_bit(void *ctx)\n \tswitch (request->child_state) {\n \tcase REQUEST_QUEUED:\n \tcase REQUEST_RUNNING:\n+\t\t/*\n+\t\t *\tIf we're not thread-capable, OR we're capable,\n+\t\t *\tbut have been told to run without threads,\n+\t\t *\tcomplain when the requests is queued for a\n+\t\t *\tthread, or running in a child thread.\n+\t\t */\n+#ifdef HAVE_PTHREAD_H\n+\t\tif (!have_children)\n+#endif\n+\t\t{\n+\t\t\trad_assert(\"We do not have threads, but the request is marked as queued or running in a child thread\" == NULL);\n+\t\t\tbreak;\n+\t\t}\n+\n+#ifdef HAVE_PTHREAD_H\n+\t\t/*\n+\t\t *\tIf we have threads, wait for the child thread\n+\t\t *\tto stop.\n+\t\t */\n \t\twhen = request->received;\n \t\twhen.tv_sec += request->root->max_request_time;\n \n@@ -1156,64 +1176,46 @@ static void wait_a_bit(void *ctx)\n \t\t *\tRequest still has more time.  Continue\n \t\t *\twaiting.\n \t\t */\n-\t\tif (timercmp(&now, &when, <) ||\n-\t\t    ((request->listener->type == RAD_LISTEN_DETAIL) &&\n-\t\t     (request->child_state == REQUEST_QUEUED))) {\n+\t\tif (timercmp(&now, &when, <)) {\n \t\t\tif (request->delay < (USEC / 10)) {\n \t\t\t\trequest->delay = USEC / 10;\n \t\t\t}\n \t\t\trequest->delay += request->delay >> 1;\n \n-#ifdef WITH_DETAIL\n \t\t\t/*\n-\t\t\t *\tCap wait at some sane value for detail\n-\t\t\t *\tfiles.\n+\t\t\t *\tCap delays at something reasonable.\n \t\t\t */\n-\t\t\tif ((request->listener->type == RAD_LISTEN_DETAIL) &&\n-\t\t\t    (request->delay > (request->root->max_request_time * USEC))) {\n+\t\t\tif (request->delay > (request->root->max_request_time * USEC)) {\n \t\t\t\trequest->delay = request->root->max_request_time * USEC;\n \t\t\t}\n-#endif\n \n \t\t\trequest->when = now;\n \t\t\ttv_add(&request->when, request->delay);\n \t\t\tcallback = wait_a_bit;\n \t\t\tbreak;\n \t\t}\n \n-#if defined(HAVE_PTHREAD_H)\n+\t\trequest->master_state = REQUEST_STOP_PROCESSING;\n+\n \t\t/*\n \t\t *\tA child thread MAY still be running on the\n \t\t *\trequest.  Ask the thread to stop working on\n \t\t *\tthe request.\n \t\t */\n \t\tif (have_children &&\n \t\t    (pthread_equal(request->child_pid, NO_SUCH_CHILD_PID) == 0)) {\n-\t\t\trequest->master_state = REQUEST_STOP_PROCESSING;\n-\n \t\t\tradlog(L_ERR, \"WARNING: Unresponsive child for request %u, in module %s component %s\",\n \t\t\t       request->number,\n \t\t\t       request->module ? request->module : \"<server core>\",\n \t\t\t       request->component ? request->component : \"<server core>\");\n-\t\t\t\n-\t\t\trequest->delay = USEC / 4;\n-\t\t\ttv_add(&request->when, request->delay);\n-\t\t\tcallback = wait_for_child_to_die;\n-\t\t\tbreak;\n \t\t}\n+\t\t\t\n+\t\trequest->delay = USEC;\n+\t\ttv_add(&request->when, request->delay);\n+\t\tcallback = wait_for_child_to_die;\n+\t\tbreak;\n #endif\n \n-\t\t/*\n-\t\t *\tElse no child thread is processing the\n-\t\t *\trequest.  We probably should have just marked\n-\t\t *\tthe request as 'done' elsewhere, like in the\n-\t\t *\tpost-proxy-fail handler.  But doing that would\n-\t\t *\tinvolve checking for max_request_time in\n-\t\t *\tmultiple places, so this may be simplest.\n-\t\t */\n-\t\trequest->child_state = REQUEST_DONE;\n-\t\t/* FALL-THROUGH */\n-\n \t\t/*\n \t\t *\tMark the request as no longer running,\n \t\t *\tand clean it up."
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c3d6470ab0880255504a11040fee0aff391ea372",
            "date": "2023-02-10T22:32:54Z",
            "author_login": "alandekok"
          },
          {
            "sha": "2291d036a6b8ea9e4e7c8537db33e14ed61947f0",
            "date": "2023-02-10T20:34:00Z",
            "author_login": "alandekok"
          },
          {
            "sha": "b9ea38b8726000a024b2737612c599874cdfbfe1",
            "date": "2023-02-10T13:07:08Z",
            "author_login": "alandekok"
          },
          {
            "sha": "bdc3fd8dc15a7ac259311150cbfb363cc2748220",
            "date": "2023-02-10T11:23:26Z",
            "author_login": "alandekok"
          },
          {
            "sha": "51d11e7cc6fb8341771b8aede58af41f810f2e51",
            "date": "2023-02-09T22:14:35Z",
            "author_login": "alandekok"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-399",
    "description": "The wait_for_child_to_die function in main/event.c in FreeRADIUS 2.1.x before 2.1.10, in certain circumstances involving long-term database outages, does not properly handle long queue times for requests, which allows remote attackers to cause a denial of service (daemon crash) by sending many requests.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2010-10-07T21:00:03.500",
    "last_modified": "2024-11-21T01:19:25.093",
    "fix_date": "2010-06-30T19:58:27Z"
  },
  "references": [
    {
      "url": "http://freeradius.org/press/index.html#2.1.10",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://github.com/alandekok/freeradius-server/commit/ff94dd35673bba1476594299d31ce8293b8bd223",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://secunia.com/advisories/41621",
      "source": "secalert@redhat.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2010/10/01/3",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2010/10/01/8",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://bugs.freeradius.org/bugzilla/show_bug.cgi?id=35",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=639397",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://freeradius.org/press/index.html#2.1.10",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://github.com/alandekok/freeradius-server/commit/ff94dd35673bba1476594299d31ce8293b8bd223",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://secunia.com/advisories/41621",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2010/10/01/3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2010/10/01/8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugs.freeradius.org/bugzilla/show_bug.cgi?id=35",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=639397",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:57:54.498349",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "freeradius-server",
    "owner": "alandekok",
    "created_at": "2012-09-27T13:04:58Z",
    "updated_at": "2022-09-05T12:29:29Z",
    "pushed_at": "2024-01-15T20:50:25Z",
    "size": 141136,
    "stars": 9,
    "forks": 15,
    "open_issues": 0,
    "watchers": 9,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 12294324,
      "M4": 244556,
      "Makefile": 237271,
      "Perl": 199855,
      "Shell": 162219,
      "SCSS": 38184,
      "Python": 37929,
      "PLpgSQL": 28297,
      "TSQL": 15419,
      "Lua": 8988,
      "Dockerfile": 8095,
      "PLSQL": 7042,
      "SaltStack": 6315,
      "Roff": 6232,
      "C++": 3305,
      "Ruby": 1023,
      "SmPL": 1002,
      "GDB": 223
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:04:16.769631"
  }
}