{
  "cve_id": "CVE-2011-1021",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "526b4af47f44148c9d665e57723ed9f86634c6e3",
    "related_commits": [
      "526b4af47f44148c9d665e57723ed9f86634c6e3",
      "526b4af47f44148c9d665e57723ed9f86634c6e3"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "526b4af47f44148c9d665e57723ed9f86634c6e3",
      "commit_date": "2011-05-26T10:26:24Z",
      "author": {
        "login": "watologo1",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "ACPI: Split out custom_method functionality into an own driver",
        "length": 612,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 201,
        "additions": 122,
        "deletions": 79
      },
      "files": [
        {
          "filename": "Documentation/acpi/method-customizing.txt",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -66,3 +66,8 @@ Note: We can use a kernel with multiple custom ACPI method running,\n       But each individual write to debugfs can implement a SINGLE\n       method override. i.e. if we want to insert/override multiple\n       ACPI methods, we need to redo step c) ~ g) for multiple times.\n+\n+Note: Be aware that root can mis-use this driver to modify arbitrary\n+      memory and gain additional rights, if root's privileges got\n+      restricted (for example if root is not allowed to load additional\n+      modules after boot)."
        },
        {
          "filename": "drivers/acpi/Kconfig",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -380,6 +380,21 @@ config ACPI_HED\n \t  which is used to report some hardware errors notified via\n \t  SCI, mainly the corrected errors.\n \n+config ACPI_CUSTOM_METHOD\n+\ttristate \"Allow ACPI methods to be inserted/replaced at run time\"\n+\tdepends on DEBUG_FS\n+\tdefault n\n+\thelp\n+\t  This debug facility allows ACPI AML methods to me inserted and/or\n+\t  replaced without rebooting the system. For details refer to:\n+\t  Documentation/acpi/method-customizing.txt.\n+\n+\t  NOTE: This option is security sensitive, because it allows arbitrary\n+\t  kernel memory to be written to by root (uid=0) users, allowing them\n+\t  to bypass certain security measures (e.g. if root is not allowed to\n+\t  load additional kernel modules after boot, this feature may be used\n+\t  to override that restriction).\n+\n source \"drivers/acpi/apei/Kconfig\"\n \n endif\t# ACPI"
        },
        {
          "filename": "drivers/acpi/Makefile",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -62,6 +62,7 @@ obj-$(CONFIG_ACPI_SBS)\t\t+= sbs.o\n obj-$(CONFIG_ACPI_POWER_METER)\t+= power_meter.o\n obj-$(CONFIG_ACPI_HED)\t\t+= hed.o\n obj-$(CONFIG_ACPI_EC_DEBUGFS)\t+= ec_sys.o\n+obj-$(CONFIG_ACPI_CUSTOM_METHOD)+= custom_method.o\n \n # processor has its own \"processor.\" module_param namespace\n processor-y\t\t\t:= processor_driver.o processor_throttling.o"
        },
        {
          "filename": "drivers/acpi/custom_method.c",
          "status": "added",
          "additions": 100,
          "deletions": 0,
          "patch": "@@ -0,0 +1,100 @@\n+/*\n+ * debugfs.c - ACPI debugfs interface to userspace.\n+ */\n+\n+#include <linux/init.h>\n+#include <linux/module.h>\n+#include <linux/kernel.h>\n+#include <linux/uaccess.h>\n+#include <linux/debugfs.h>\n+#include <acpi/acpi_drivers.h>\n+\n+#include \"internal.h\"\n+\n+#define _COMPONENT\t\tACPI_SYSTEM_COMPONENT\n+ACPI_MODULE_NAME(\"custom_method\");\n+MODULE_LICENSE(\"GPL\");\n+\n+static struct dentry *cm_dentry;\n+\n+/* /sys/kernel/debug/acpi/custom_method */\n+\n+static ssize_t cm_write(struct file *file, const char __user * user_buf,\n+\t\t\tsize_t count, loff_t *ppos)\n+{\n+\tstatic char *buf;\n+\tstatic u32 max_size;\n+\tstatic u32 uncopied_bytes;\n+\n+\tstruct acpi_table_header table;\n+\tacpi_status status;\n+\n+\tif (!(*ppos)) {\n+\t\t/* parse the table header to get the table length */\n+\t\tif (count <= sizeof(struct acpi_table_header))\n+\t\t\treturn -EINVAL;\n+\t\tif (copy_from_user(&table, user_buf,\n+\t\t\t\t   sizeof(struct acpi_table_header)))\n+\t\t\treturn -EFAULT;\n+\t\tuncopied_bytes = max_size = table.length;\n+\t\tbuf = kzalloc(max_size, GFP_KERNEL);\n+\t\tif (!buf)\n+\t\t\treturn -ENOMEM;\n+\t}\n+\n+\tif (buf == NULL)\n+\t\treturn -EINVAL;\n+\n+\tif ((*ppos > max_size) ||\n+\t    (*ppos + count > max_size) ||\n+\t    (*ppos + count < count) ||\n+\t    (count > uncopied_bytes))\n+\t\treturn -EINVAL;\n+\n+\tif (copy_from_user(buf + (*ppos), user_buf, count)) {\n+\t\tkfree(buf);\n+\t\tbuf = NULL;\n+\t\treturn -EFAULT;\n+\t}\n+\n+\tuncopied_bytes -= count;\n+\t*ppos += count;\n+\n+\tif (!uncopied_bytes) {\n+\t\tstatus = acpi_install_method(buf);\n+\t\tkfree(buf);\n+\t\tbuf = NULL;\n+\t\tif (ACPI_FAILURE(status))\n+\t\t\treturn -EINVAL;\n+\t\tadd_taint(TAINT_OVERRIDDEN_ACPI_TABLE);\n+\t}\n+\n+\treturn count;\n+}\n+\n+static const struct file_operations cm_fops = {\n+\t.write = cm_write,\n+\t.llseek = default_llseek,\n+};\n+\n+static int __init acpi_custom_method_init(void)\n+{\n+\tif (acpi_debugfs_dir == NULL)\n+\t\treturn -ENOENT;\n+\n+\tcm_dentry = debugfs_create_file(\"custom_method\", S_IWUSR,\n+\t\t\t\t\tacpi_debugfs_dir, NULL, &cm_fops);\n+\tif (cm_dentry == NULL)\n+\t\treturn -ENODEV;\n+\n+\treturn 0;\n+}\n+\n+static void __exit acpi_custom_method_exit(void)\n+{\n+\tif (cm_dentry)\n+\t\tdebugfs_remove(cm_dentry);\n+ }\n+\n+module_init(acpi_custom_method_init);\n+module_exit(acpi_custom_method_exit);"
        },
        {
          "filename": "drivers/acpi/debugfs.c",
          "status": "modified",
          "additions": 1,
          "deletions": 79,
          "patch": "@@ -3,94 +3,16 @@\n  */\n \n #include <linux/init.h>\n-#include <linux/module.h>\n-#include <linux/kernel.h>\n-#include <linux/uaccess.h>\n #include <linux/debugfs.h>\n #include <acpi/acpi_drivers.h>\n \n #define _COMPONENT\t\tACPI_SYSTEM_COMPONENT\n ACPI_MODULE_NAME(\"debugfs\");\n \n struct dentry *acpi_debugfs_dir;\n-static struct dentry *cm_dentry;\n-\n-/* /sys/kernel/debug/acpi/custom_method */\n-\n-static ssize_t cm_write(struct file *file, const char __user * user_buf,\n-\t\t\tsize_t count, loff_t *ppos)\n-{\n-\tstatic char *buf;\n-\tstatic u32 max_size;\n-\tstatic u32 uncopied_bytes;\n-\n-\tstruct acpi_table_header table;\n-\tacpi_status status;\n-\n-\tif (!(*ppos)) {\n-\t\t/* parse the table header to get the table length */\n-\t\tif (count <= sizeof(struct acpi_table_header))\n-\t\t\treturn -EINVAL;\n-\t\tif (copy_from_user(&table, user_buf,\n-\t\t\t\t   sizeof(struct acpi_table_header)))\n-\t\t\treturn -EFAULT;\n-\t\tuncopied_bytes = max_size = table.length;\n-\t\tbuf = kzalloc(max_size, GFP_KERNEL);\n-\t\tif (!buf)\n-\t\t\treturn -ENOMEM;\n-\t}\n-\n-\tif (buf == NULL)\n-\t\treturn -EINVAL;\n-\n-\tif ((*ppos > max_size) ||\n-\t    (*ppos + count > max_size) ||\n-\t    (*ppos + count < count) ||\n-\t    (count > uncopied_bytes))\n-\t\treturn -EINVAL;\n-\n-\tif (copy_from_user(buf + (*ppos), user_buf, count)) {\n-\t\tkfree(buf);\n-\t\tbuf = NULL;\n-\t\treturn -EFAULT;\n-\t}\n-\n-\tuncopied_bytes -= count;\n-\t*ppos += count;\n-\n-\tif (!uncopied_bytes) {\n-\t\tstatus = acpi_install_method(buf);\n-\t\tkfree(buf);\n-\t\tbuf = NULL;\n-\t\tif (ACPI_FAILURE(status))\n-\t\t\treturn -EINVAL;\n-\t\tadd_taint(TAINT_OVERRIDDEN_ACPI_TABLE);\n-\t}\n-\n-\treturn count;\n-}\n-\n-static const struct file_operations cm_fops = {\n-\t.write = cm_write,\n-\t.llseek = default_llseek,\n-};\n-\n-static int __init acpi_custom_method_init(void)\n-{\n-\tif (!acpi_debugfs_dir)\n-\t\treturn -ENOENT;\n-\n-\tcm_dentry = debugfs_create_file(\"custom_method\", S_IWUSR,\n-\t\t\t\t\tacpi_debugfs_dir, NULL, &cm_fops);\n-\tif (!cm_dentry)\n-\t\treturn -ENODEV;\n-\n-\treturn 0;\n-}\n+EXPORT_SYMBOL_GPL(acpi_debugfs_dir);\n \n void __init acpi_debugfs_init(void)\n {\n \tacpi_debugfs_dir = debugfs_create_dir(\"acpi\", NULL);\n-\n-\tacpi_custom_method_init();\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-264",
    "description": "drivers/acpi/debugfs.c in the Linux kernel before 3.0 allows local users to modify arbitrary kernel memory locations by leveraging root privileges to write to the /sys/kernel/debug/acpi/custom_method file. NOTE: this vulnerability exists because of an incomplete fix for CVE-2010-4347.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2012-06-21T23:55:01.897",
    "last_modified": "2024-11-21T01:25:20.790",
    "fix_date": "2011-05-26T10:26:24Z"
  },
  "references": [
    {
      "url": "http://ftp.osuosl.org/pub/linux/kernel/v3.0/ChangeLog-3.0",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=526b4af47f44148c9d665e57723ed9f86634c6e3",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2011/02/25/5",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=680841",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://github.com/torvalds/linux/commit/526b4af47f44148c9d665e57723ed9f86634c6e3",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "http://ftp.osuosl.org/pub/linux/kernel/v3.0/ChangeLog-3.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=526b4af47f44148c9d665e57723ed9f86634c6e3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2011/02/25/5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=680841",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/torvalds/linux/commit/526b4af47f44148c9d665e57723ed9f86634c6e3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:07.278432",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}