{
  "cve_id": "CVE-2012-0045",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "c2226fc9e87ba3da060e47333657cd6616652b84",
    "related_commits": [
      "c2226fc9e87ba3da060e47333657cd6616652b84",
      "c2226fc9e87ba3da060e47333657cd6616652b84"
    ],
    "patch_url": "https://github.com/torvalds/linux/commit/c2226fc9e87ba3da060e47333657cd6616652b84.patch",
    "fix_commit_details": {
      "sha": "c2226fc9e87ba3da060e47333657cd6616652b84",
      "commit_date": "2012-01-12T15:43:04Z",
      "author": {
        "login": "baerwolf",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "KVM: x86: fix missing checks in syscall emulation",
        "length": 1253,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 64,
        "additions": 64,
        "deletions": 0
      },
      "files": [
        {
          "filename": "arch/x86/include/asm/kvm_emulate.h",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -301,6 +301,19 @@ struct x86_emulate_ctxt {\n #define X86EMUL_MODE_PROT     (X86EMUL_MODE_PROT16|X86EMUL_MODE_PROT32| \\\n \t\t\t       X86EMUL_MODE_PROT64)\n \n+/* CPUID vendors */\n+#define X86EMUL_CPUID_VENDOR_AuthenticAMD_ebx 0x68747541\n+#define X86EMUL_CPUID_VENDOR_AuthenticAMD_ecx 0x444d4163\n+#define X86EMUL_CPUID_VENDOR_AuthenticAMD_edx 0x69746e65\n+\n+#define X86EMUL_CPUID_VENDOR_AMDisbetterI_ebx 0x69444d41\n+#define X86EMUL_CPUID_VENDOR_AMDisbetterI_ecx 0x21726574\n+#define X86EMUL_CPUID_VENDOR_AMDisbetterI_edx 0x74656273\n+\n+#define X86EMUL_CPUID_VENDOR_GenuineIntel_ebx 0x756e6547\n+#define X86EMUL_CPUID_VENDOR_GenuineIntel_ecx 0x6c65746e\n+#define X86EMUL_CPUID_VENDOR_GenuineIntel_edx 0x49656e69\n+\n enum x86_intercept_stage {\n \tX86_ICTP_NONE = 0,   /* Allow zero-init to not match anything */\n \tX86_ICPT_PRE_EXCEPT,"
        },
        {
          "filename": "arch/x86/kvm/emulate.c",
          "status": "modified",
          "additions": 51,
          "deletions": 0,
          "patch": "@@ -1891,6 +1891,51 @@ setup_syscalls_segments(struct x86_emulate_ctxt *ctxt,\n \tss->p = 1;\n }\n \n+static bool em_syscall_is_enabled(struct x86_emulate_ctxt *ctxt)\n+{\n+\tstruct x86_emulate_ops *ops = ctxt->ops;\n+\tu32 eax, ebx, ecx, edx;\n+\n+\t/*\n+\t * syscall should always be enabled in longmode - so only become\n+\t * vendor specific (cpuid) if other modes are active...\n+\t */\n+\tif (ctxt->mode == X86EMUL_MODE_PROT64)\n+\t\treturn true;\n+\n+\teax = 0x00000000;\n+\tecx = 0x00000000;\n+\tif (ops->get_cpuid(ctxt, &eax, &ebx, &ecx, &edx)) {\n+\t\t/*\n+\t\t * Intel (\"GenuineIntel\")\n+\t\t * remark: Intel CPUs only support \"syscall\" in 64bit\n+\t\t * longmode. Also an 64bit guest with a\n+\t\t * 32bit compat-app running will #UD !! While this\n+\t\t * behaviour can be fixed (by emulating) into AMD\n+\t\t * response - CPUs of AMD can't behave like Intel.\n+\t\t */\n+\t\tif (ebx == X86EMUL_CPUID_VENDOR_GenuineIntel_ebx &&\n+\t\t    ecx == X86EMUL_CPUID_VENDOR_GenuineIntel_ecx &&\n+\t\t    edx == X86EMUL_CPUID_VENDOR_GenuineIntel_edx)\n+\t\t\treturn false;\n+\n+\t\t/* AMD (\"AuthenticAMD\") */\n+\t\tif (ebx == X86EMUL_CPUID_VENDOR_AuthenticAMD_ebx &&\n+\t\t    ecx == X86EMUL_CPUID_VENDOR_AuthenticAMD_ecx &&\n+\t\t    edx == X86EMUL_CPUID_VENDOR_AuthenticAMD_edx)\n+\t\t\treturn true;\n+\n+\t\t/* AMD (\"AMDisbetter!\") */\n+\t\tif (ebx == X86EMUL_CPUID_VENDOR_AMDisbetterI_ebx &&\n+\t\t    ecx == X86EMUL_CPUID_VENDOR_AMDisbetterI_ecx &&\n+\t\t    edx == X86EMUL_CPUID_VENDOR_AMDisbetterI_edx)\n+\t\t\treturn true;\n+\t}\n+\n+\t/* default: (not Intel, not AMD), apply Intel's stricter rules... */\n+\treturn false;\n+}\n+\n static int em_syscall(struct x86_emulate_ctxt *ctxt)\n {\n \tstruct x86_emulate_ops *ops = ctxt->ops;\n@@ -1904,9 +1949,15 @@ static int em_syscall(struct x86_emulate_ctxt *ctxt)\n \t    ctxt->mode == X86EMUL_MODE_VM86)\n \t\treturn emulate_ud(ctxt);\n \n+\tif (!(em_syscall_is_enabled(ctxt)))\n+\t\treturn emulate_ud(ctxt);\n+\n \tops->get_msr(ctxt, MSR_EFER, &efer);\n \tsetup_syscalls_segments(ctxt, &cs, &ss);\n \n+\tif (!(efer & EFER_SCE))\n+\t\treturn emulate_ud(ctxt);\n+\n \tops->get_msr(ctxt, MSR_STAR, &msr_data);\n \tmsr_data >>= 32;\n \tcs_sel = (u16)(msr_data & 0xfffc);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7f5b6a8ec18e3add4c74682f60b90c31bdf849f2",
            "date": "2025-01-14T19:32:14Z",
            "author_login": "torvalds"
          },
          {
            "sha": "c3812b15000cc5b7b17c7238f8b12f6a22df0b1d",
            "date": "2025-01-14T18:07:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "79a1d390f879563119bf2848b621bc7eed228c7d",
            "date": "2025-01-14T17:54:57Z",
            "author_login": "torvalds"
          },
          {
            "sha": "c45323b7560ec87c37c729b703c86ee65f136d75",
            "date": "2025-01-13T17:03:18Z",
            "author_login": "torvalds"
          },
          {
            "sha": "34c8e74cd6667ef5da90d448a1af702c4b873bd3",
            "date": "2025-01-13T08:52:08Z",
            "author_login": "YageGeng"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": null,
    "description": "The em_syscall function in arch/x86/kvm/emulate.c in the KVM implementation in the Linux kernel before 3.2.14 does not properly handle the 0f05 (aka syscall) opcode, which allows guest OS users to cause a denial of service (guest OS crash) via a crafted application, as demonstrated by an NASM file.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2012-07-03T16:40:31.397",
    "last_modified": "2024-11-21T01:34:16.793",
    "fix_date": "2012-01-12T15:43:04Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=c2226fc9e87ba3da060e47333657cd6616652b84",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2012-05/msg00013.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.2.14",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/01/12/2",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=773370",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/c2226fc9e87ba3da060e47333657cd6616652b84",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=c2226fc9e87ba3da060e47333657cd6616652b84",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2012-05/msg00013.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.2.14",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/01/12/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=773370",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/c2226fc9e87ba3da060e47333657cd6616652b84",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:07.284445",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}