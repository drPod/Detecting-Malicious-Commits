{
  "cve_id": "CVE-2012-2373",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "26c191788f18129af0eb32a358cdaea0c7479626",
    "related_commits": [
      "26c191788f18129af0eb32a358cdaea0c7479626",
      "26c191788f18129af0eb32a358cdaea0c7479626"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "26c191788f18129af0eb32a358cdaea0c7479626",
      "commit_date": "2012-05-29T22:06:49Z",
      "author": {
        "login": "aagit",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "mm: pmd_read_atomic: fix 32bit PAE pmd walk vs pmd_populate SMP race condition",
        "length": 4173,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 72,
        "additions": 70,
        "deletions": 2
      },
      "files": [
        {
          "filename": "arch/x86/include/asm/pgtable-3level.h",
          "status": "modified",
          "additions": 50,
          "deletions": 0,
          "patch": "@@ -31,6 +31,56 @@ static inline void native_set_pte(pte_t *ptep, pte_t pte)\n \tptep->pte_low = pte.pte_low;\n }\n \n+#define pmd_read_atomic pmd_read_atomic\n+/*\n+ * pte_offset_map_lock on 32bit PAE kernels was reading the pmd_t with\n+ * a \"*pmdp\" dereference done by gcc. Problem is, in certain places\n+ * where pte_offset_map_lock is called, concurrent page faults are\n+ * allowed, if the mmap_sem is hold for reading. An example is mincore\n+ * vs page faults vs MADV_DONTNEED. On the page fault side\n+ * pmd_populate rightfully does a set_64bit, but if we're reading the\n+ * pmd_t with a \"*pmdp\" on the mincore side, a SMP race can happen\n+ * because gcc will not read the 64bit of the pmd atomically. To fix\n+ * this all places running pmd_offset_map_lock() while holding the\n+ * mmap_sem in read mode, shall read the pmdp pointer using this\n+ * function to know if the pmd is null nor not, and in turn to know if\n+ * they can run pmd_offset_map_lock or pmd_trans_huge or other pmd\n+ * operations.\n+ *\n+ * Without THP if the mmap_sem is hold for reading, the\n+ * pmd can only transition from null to not null while pmd_read_atomic runs.\n+ * So there's no need of literally reading it atomically.\n+ *\n+ * With THP if the mmap_sem is hold for reading, the pmd can become\n+ * THP or null or point to a pte (and in turn become \"stable\") at any\n+ * time under pmd_read_atomic, so it's mandatory to read it atomically\n+ * with cmpxchg8b.\n+ */\n+#ifndef CONFIG_TRANSPARENT_HUGEPAGE\n+static inline pmd_t pmd_read_atomic(pmd_t *pmdp)\n+{\n+\tpmdval_t ret;\n+\tu32 *tmp = (u32 *)pmdp;\n+\n+\tret = (pmdval_t) (*tmp);\n+\tif (ret) {\n+\t\t/*\n+\t\t * If the low part is null, we must not read the high part\n+\t\t * or we can end up with a partial pmd.\n+\t\t */\n+\t\tsmp_rmb();\n+\t\tret |= ((pmdval_t)*(tmp + 1)) << 32;\n+\t}\n+\n+\treturn (pmd_t) { ret };\n+}\n+#else /* CONFIG_TRANSPARENT_HUGEPAGE */\n+static inline pmd_t pmd_read_atomic(pmd_t *pmdp)\n+{\n+\treturn (pmd_t) { atomic64_read((atomic64_t *)pmdp) };\n+}\n+#endif /* CONFIG_TRANSPARENT_HUGEPAGE */\n+\n static inline void native_set_pte_atomic(pte_t *ptep, pte_t pte)\n {\n \tset_64bit((unsigned long long *)(ptep), native_pte_val(pte));"
        },
        {
          "filename": "include/asm-generic/pgtable.h",
          "status": "modified",
          "additions": 20,
          "deletions": 2,
          "patch": "@@ -445,6 +445,18 @@ static inline int pmd_write(pmd_t pmd)\n #endif /* __HAVE_ARCH_PMD_WRITE */\n #endif /* CONFIG_TRANSPARENT_HUGEPAGE */\n \n+#ifndef pmd_read_atomic\n+static inline pmd_t pmd_read_atomic(pmd_t *pmdp)\n+{\n+\t/*\n+\t * Depend on compiler for an atomic pmd read. NOTE: this is\n+\t * only going to work, if the pmdval_t isn't larger than\n+\t * an unsigned long.\n+\t */\n+\treturn *pmdp;\n+}\n+#endif\n+\n /*\n  * This function is meant to be used by sites walking pagetables with\n  * the mmap_sem hold in read mode to protect against MADV_DONTNEED and\n@@ -458,11 +470,17 @@ static inline int pmd_write(pmd_t pmd)\n  * undefined so behaving like if the pmd was none is safe (because it\n  * can return none anyway). The compiler level barrier() is critically\n  * important to compute the two checks atomically on the same pmdval.\n+ *\n+ * For 32bit kernels with a 64bit large pmd_t this automatically takes\n+ * care of reading the pmd atomically to avoid SMP race conditions\n+ * against pmd_populate() when the mmap_sem is hold for reading by the\n+ * caller (a special atomic read not done by \"gcc\" as in the generic\n+ * version above, is also needed when THP is disabled because the page\n+ * fault can populate the pmd from under us).\n  */\n static inline int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)\n {\n-\t/* depend on compiler for an atomic pmd read */\n-\tpmd_t pmdval = *pmd;\n+\tpmd_t pmdval = pmd_read_atomic(pmd);\n \t/*\n \t * The barrier will stabilize the pmdval in a register or on\n \t * the stack so that it will stop changing under the code."
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-362",
    "description": "The Linux kernel before 3.4.5 on the x86 platform, when Physical Address Extension (PAE) is enabled, does not properly use the Page Middle Directory (PMD), which allows local users to cause a denial of service (panic) via a crafted application that triggers a race condition.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2012-08-09T10:29:46.917",
    "last_modified": "2024-11-21T01:38:58.390",
    "fix_date": "2012-05-29T22:06:49Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=26c191788f18129af0eb32a358cdaea0c7479626",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://marc.info/?l=bugtraq&m=139447903326211&w=2",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://rhn.redhat.com/errata/RHSA-2012-0743.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://ubuntu.com/usn/usn-1529-1",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.4.5",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/05/18/11",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=822821",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://github.com/torvalds/linux/commit/26c191788f18129af0eb32a358cdaea0c7479626",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=26c191788f18129af0eb32a358cdaea0c7479626",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://marc.info/?l=bugtraq&m=139447903326211&w=2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://rhn.redhat.com/errata/RHSA-2012-0743.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://ubuntu.com/usn/usn-1529-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.4.5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/05/18/11",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=822821",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/torvalds/linux/commit/26c191788f18129af0eb32a358cdaea0c7479626",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:07.295074",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}