{
  "cve_id": "CVE-2012-2395",
  "github_data": {
    "repository": "cobbler/cobbler",
    "fix_commit": "6d9167e5da44eca56bdf42b5776097a6779aaadf",
    "related_commits": [
      "6d9167e5da44eca56bdf42b5776097a6779aaadf",
      "6d9167e5da44eca56bdf42b5776097a6779aaadf"
    ],
    "patch_url": "https://github.com/cobbler/cobbler/commit/6d9167e5da44eca56bdf42b5776097a6779aaadf.patch",
    "fix_commit_details": {
      "sha": "6d9167e5da44eca56bdf42b5776097a6779aaadf",
      "commit_date": "2012-05-07T04:15:27Z",
      "author": {
        "login": "jimi-c",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #164 from jimi1283/powerpipe",
        "length": 89,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 93,
        "additions": 44,
        "deletions": 49
      },
      "files": [
        {
          "filename": "cobbler/action_power.py",
          "status": "modified",
          "additions": 9,
          "deletions": 33,
          "patch": "@@ -69,8 +69,9 @@ def power(self, desired_state):\n         interested in maximum security should take that route.\n         \"\"\"\n \n-        template = self.get_command_template()\n-        template_file = open(template, \"r\")\n+        power_command = utils.get_power(self.system.power_type)\n+        if not power_command:\n+            utils.die(self.logger,\"no power type set for system\")\n \n         meta = utils.blender(self.api, False, self.system)\n         meta[\"power_mode\"] = desired_state\n@@ -81,43 +82,34 @@ def power(self, desired_state):\n         if self.force_pass is not None:\n            meta[\"power_pass\"] = self.force_pass\n \n-        tmp = templar.Templar(self.api._config)\n-        cmd = tmp.render(template_file, meta, None, self.system)\n-        template_file.close()\n-\n-        cmd = cmd.strip()\n-\n         self.logger.info(\"cobbler power configuration is:\")\n-\n         self.logger.info(\"      type   : %s\" % self.system.power_type)\n         self.logger.info(\"      address: %s\" % self.system.power_address)\n         self.logger.info(\"      user   : %s\" % self.system.power_user)\n         self.logger.info(\"      id     : %s\" % self.system.power_id)\n \n         # if no username/password data, check the environment\n-\n         if meta.get(\"power_user\",\"\") == \"\":\n             meta[\"power_user\"] = os.environ.get(\"COBBLER_POWER_USER\",\"\")\n         if meta.get(\"power_pass\",\"\") == \"\":\n             meta[\"power_pass\"] = os.environ.get(\"COBBLER_POWER_PASS\",\"\")\n \n-        self.logger.info(\"- %s\" % cmd)\n-\n-        # use shell so we can have mutliple power commands chained together\n-        cmd = ['/bin/sh','-c', cmd]\n+        template = utils.get_power_template(self.system.power_type)\n+        tmp = templar.Templar(self.api._config)\n+        template_data = tmp.render(template, meta, None, self.system)\n \n         # Try the power command 5 times before giving up.\n         # Some power switches are flakey\n         for x in range(0,5):\n-            output, rc = utils.subprocess_sp(self.logger, cmd, shell=False)\n+            output, rc = utils.subprocess_sp(self.logger, power_command, shell=False, input=template_data)\n             if rc == 0:\n                 # If the desired state is actually a query for the status\n                 # return different information than command return code\n                 if desired_state == 'status':\n-                    match = re.match('(^Status:\\s)(ON|OFF)', output)\n+                    match = re.match('(^Status:\\s)(on|off)', output, re.IGNORECASE)\n                     if match:\n                         power_status = match.groups()[1]\n-                        if power_status == 'ON':\n+                        if power_status.lower() == 'on':\n                             return True\n                         else:\n                             return False\n@@ -132,19 +124,3 @@ def power(self, desired_state):\n \n         return rc\n \n-    def get_command_template(self):\n-\n-        \"\"\"\n-        In case the user wants to customize the power management commands, \n-        we source the code for each command from /etc/cobbler and run\n-        them through Cheetah.\n-        \"\"\"\n-\n-        if self.system.power_type in [ \"\", \"none\" ]:\n-            utils.die(self.logger,\"Power management is not enabled for this system\")\n-\n-        result = utils.get_power(self.system.power_type)\n-        if not result:\n-            utils.die(self.logger, \"Invalid power management type for this system (%s, %s)\" % (self.system.power_type, self.system.name))\n-        return result\n-"
        },
        {
          "filename": "cobbler/item_system.py",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -54,11 +54,11 @@\n   [\"virt_auto_boot\",\"<<inherit>>\",0,\"Virt Auto Boot\",True,\"Auto boot this VM?\",0,\"bool\"],\n   [\"ctime\",0,0,\"\",False,\"\",0,\"float\"],\n   [\"mtime\",0,0,\"\",False,\"\",0,\"float\"],\n-  [\"power_type\",\"SETTINGS:power_management_default_type\",0,\"Type\",True,\"Power management script to use\",utils.get_power_types(),\"str\"],\n-  [\"power_address\",\"\",0,\"Address\",True,\"Ex: power-device.example.org\",0,\"str\"],\n-  [\"power_user\",\"\",0,\"Username \",True,\"\",0,\"str\"],\n-  [\"power_pass\",\"\",0,\"Password\",True,\"\",0,\"str\"],\n-  [\"power_id\",\"\",0,\"ID\",True,\"Usually a plug number or blade name, if power type requires it\",0,\"str\"],\n+  [\"power_type\",\"SETTINGS:power_management_default_type\",0,\"Power Management Type\",True,\"Power management script to use\",utils.get_power_types(),\"str\"],\n+  [\"power_address\",\"\",0,\"Power Management Address\",True,\"Ex: power-device.example.org\",0,\"str\"],\n+  [\"power_user\",\"\",0,\"Power Management Username \",True,\"\",0,\"str\"],\n+  [\"power_pass\",\"\",0,\"Power Management Password\",True,\"\",0,\"str\"],\n+  [\"power_id\",\"\",0,\"Power Management ID\",True,\"Usually a plug number or blade name, if power type requires it\",0,\"str\"],\n   [\"hostname\",\"\",0,\"Hostname\",True,\"\",0,\"str\"],\n   [\"gateway\",\"\",0,\"Gateway\",True,\"\",0,\"str\"],\n   [\"name_servers\",[],0,\"Name Servers\",True,\"space delimited\",0,\"list\"],"
        },
        {
          "filename": "cobbler/utils.py",
          "status": "modified",
          "additions": 30,
          "deletions": 11,
          "patch": "@@ -1680,29 +1680,34 @@ def is_remote_file(file):\n     else:\n        return False\n \n-def subprocess_sp(logger, cmd, shell=True):\n+def subprocess_sp(logger, cmd, shell=True, input=None):\n     if logger is not None:\n         logger.info(\"running: %s\" % cmd)\n+\n+    stdin = None\n+    if input:\n+        stdin = sub_process.PIPE\n+\n     try:\n-        sp = sub_process.Popen(cmd, shell=shell, stdout=sub_process.PIPE, stderr=sub_process.PIPE, close_fds=True)\n+        sp = sub_process.Popen(cmd, shell=shell, stdin=stdin, stdout=sub_process.PIPE, stderr=sub_process.PIPE, close_fds=True)\n     except OSError:\n         if logger is not None:\n             log_exc(logger)\n         die(logger, \"OS Error, command not found?  While running: %s\" % cmd)\n \n-    (out,err) = sp.communicate()\n+    (out,err) = sp.communicate(input)\n     rc = sp.returncode\n     if logger is not None:\n         logger.info(\"received on stdout: %s\" % out)\n         logger.debug(\"received on stderr: %s\" % err)\n     return out, rc\n \n-def subprocess_call(logger, cmd, shell=True):\n-    data, rc = subprocess_sp(logger, cmd, shell=shell)\n+def subprocess_call(logger, cmd, shell=True, input=None):\n+    data, rc = subprocess_sp(logger, cmd, shell=shell, input=input)\n     return rc\n \n-def subprocess_get(logger, cmd, shell=True):\n-    data, rc = subprocess_sp(logger, cmd, shell=shell)\n+def subprocess_get(logger, cmd, shell=True, input=None):\n+    data, rc = subprocess_sp(logger, cmd, shell=shell, input=input)\n     return data\n \n def popen2(args, **kwargs):\n@@ -1964,8 +1969,8 @@ def get_power_types():\n     Return all possible power types\n     \"\"\"\n     power_types = []\n-    power_template = re.compile(r'power_(.*).template')\n-    for x in glob.glob(\"/etc/cobbler/power/power_*.template\"):\n+    power_template = re.compile(r'fence_(.*)')\n+    for x in glob.glob(\"/usr/sbin/fence_*\"):\n         power_types.append(power_template.search(x).group(1))\n     power_types.sort()\n     return power_types\n@@ -1975,11 +1980,25 @@ def get_power(powertype=None):\n     Return power command for type\n     \"\"\"\n     if powertype:\n-        powerpath = \"/etc/cobbler/power/power_%s.template\" % powertype\n-        if os.path.isfile(powerpath):\n+        powerpath = \"/usr/sbin/fence_%s\" % powertype\n+        if os.path.isfile(powerpath) and os.access(powerpath, os.X_OK):\n             return powerpath\n     return None\n \n+def get_power_template(powertype=None):\n+    \"\"\"\n+    Return power template for type\n+    \"\"\"\n+    if powertype:\n+        powertemplate = \"/etc/cobbler/power/fence_%s.template\" % powertype\n+        if os.path.isfile(powertemplate):\n+            f = open(powertemplate)\n+            template = f.read()\n+            f.close()\n+            return template\n+    # return a generic template if a specific one wasn't found\n+    return \"action=$power_mode\\nlogin=$power_user\\npasswd=$power_pass\\nipaddr=$power_address\\nport=$power_id\"\n+\n def get_shared_secret():\n     \"\"\"\n     The 'web.ss' file is regenerated each time cobblerd restarts and is"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f114bfeb366b3348cbb1578e96892d11dd12c55d",
            "date": "2024-11-17T20:42:06Z",
            "author_login": "SchoolGuy"
          },
          {
            "sha": "3bc372f934b4e2ba02fb392791604c0f243ffe4f",
            "date": "2024-11-17T20:37:12Z",
            "author_login": "SchoolGuy"
          },
          {
            "sha": "c31b8e6f171ac10c673fe62d61f020d53fa570c4",
            "date": "2024-11-17T20:33:57Z",
            "author_login": "SchoolGuy"
          },
          {
            "sha": "2b091f1f0c1b432f6325cc2f4986403671e311c2",
            "date": "2024-11-17T20:23:45Z",
            "author_login": "SchoolGuy"
          },
          {
            "sha": "0173b3d3e075e7a199a5624877e83f13c2414185",
            "date": "2024-11-17T20:13:23Z",
            "author_login": "SchoolGuy"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": null,
    "description": "Incomplete blacklist vulnerability in action_power.py in Cobbler 2.2.0 allows remote attackers to execute arbitrary commands via shell metacharacters in the (1) username or (2) password fields to the power_system method in the xmlrpc API.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2012-06-16T00:55:07.310",
    "last_modified": "2024-11-21T01:39:00.770",
    "fix_date": "2012-05-07T04:15:27Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2012-05/msg00016.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2012-07/msg00000.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/05/23/18",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/05/23/4",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.osvdb.org/82458",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.securityfocus.com/bid/53666",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://bugs.launchpad.net/ubuntu/+source/cobbler/+bug/978999",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://github.com/cobbler/cobbler/commit/6d9167e5da44eca56bdf42b5776097a6779aaadf",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cobbler/cobbler/issues/141",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2012-05/msg00016.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2012-07/msg00000.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/05/23/18",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/05/23/4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.osvdb.org/82458",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securityfocus.com/bid/53666",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugs.launchpad.net/ubuntu/+source/cobbler/+bug/978999",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/cobbler/cobbler/commit/6d9167e5da44eca56bdf42b5776097a6779aaadf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/cobbler/cobbler/issues/141",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:07.274346",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cobbler",
    "owner": "cobbler",
    "created_at": "2011-11-08T15:01:00Z",
    "updated_at": "2025-01-02T11:34:45Z",
    "pushed_at": "2024-11-22T17:55:57Z",
    "size": 64084,
    "stars": 2645,
    "forks": 651,
    "open_issues": 327,
    "watchers": 2645,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "master",
      "release20",
      "release22",
      "release24",
      "release26",
      "release28",
      "release30",
      "release32",
      "release33"
    ],
    "languages": {
      "Python": 2369730,
      "Shell": 96866,
      "Dockerfile": 22878,
      "Makefile": 6742,
      "Jinja": 307
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T15:48:31.808174"
  }
}