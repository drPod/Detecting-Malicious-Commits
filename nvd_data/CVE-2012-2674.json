{
  "cve_id": "CVE-2012-2674",
  "github_data": {
    "repository": "android/platform_bionic",
    "fix_commit": "7f5aa4f35e23fd37425b3a5041737cdf58f87385",
    "related_commits": [
      "7f5aa4f35e23fd37425b3a5041737cdf58f87385",
      "7f5aa4f35e23fd37425b3a5041737cdf58f87385"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "7f5aa4f35e23fd37425b3a5041737cdf58f87385",
      "commit_date": "2012-03-14T06:48:39Z",
      "author": {
        "login": "xiw",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "bionic: fix integer overflows in chk_malloc(), leak_malloc(), and leak_memalign()",
        "length": 421,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 37,
        "additions": 25,
        "deletions": 12
      },
      "files": [
        {
          "filename": "libc/bionic/malloc_debug_leak.c",
          "status": "modified",
          "additions": 25,
          "deletions": 12,
          "patch": "@@ -25,26 +25,26 @@\n  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n  * SUCH DAMAGE.\n  */\n+\n+#include <dlfcn.h>\n #include <errno.h>\n+#include <fcntl.h>\n #include <pthread.h>\n+#include <stdarg.h>\n+#include <stddef.h>\n+#include <stdint.h>\n #include <stdio.h>\n-#include <arpa/inet.h>\n-#include <sys/socket.h>\n #include <stdlib.h>\n #include <string.h>\n #include <unistd.h>\n-#include <errno.h>\n-#include <stddef.h>\n-#include <stdarg.h>\n-#include <fcntl.h>\n #include <unwind.h>\n-#include <dlfcn.h>\n \n-#include <sys/socket.h>\n-#include <sys/un.h>\n+#include <arpa/inet.h>\n #include <sys/select.h>\n-#include <sys/types.h>\n+#include <sys/socket.h>\n #include <sys/system_properties.h>\n+#include <sys/types.h>\n+#include <sys/un.h>\n \n #include \"dlmalloc.h\"\n #include \"logd.h\"\n@@ -372,7 +372,11 @@ static int chk_mem_check(void*       mem,\n \n void* chk_malloc(size_t bytes)\n {\n-    char* buffer = (char*)dlmalloc(bytes + CHK_OVERHEAD_SIZE);\n+    size_t size = bytes + CHK_OVERHEAD_SIZE;\n+    if (size < bytes) { // Overflow.\n+        return NULL;\n+    }\n+    uint8_t* buffer = (uint8_t*) dlmalloc(size);\n     if (buffer) {\n         memset(buffer, CHK_SENTINEL_VALUE, bytes + CHK_OVERHEAD_SIZE);\n         size_t offset = dlmalloc_usable_size(buffer) - sizeof(size_t);\n@@ -505,7 +509,12 @@ void* leak_malloc(size_t bytes)\n     // 1. allocate enough memory and include our header\n     // 2. set the base pointer to be right after our header\n \n-    void* base = dlmalloc(bytes + sizeof(AllocationEntry));\n+    size_t size = bytes + sizeof(AllocationEntry);\n+    if (size < bytes) { // Overflow.\n+        return NULL;\n+    }\n+\n+    void* base = dlmalloc(size);\n     if (base != NULL) {\n         pthread_mutex_lock(&gAllocationsMutex);\n \n@@ -615,6 +624,10 @@ void* leak_memalign(size_t alignment, size_t bytes)\n     // we will align by at least MALLOC_ALIGNMENT bytes\n     // and at most alignment-MALLOC_ALIGNMENT bytes\n     size_t size = (alignment-MALLOC_ALIGNMENT) + bytes;\n+    if (size < bytes) { // Overflow.\n+        return NULL;\n+    }\n+\n     void* base = leak_malloc(size);\n     if (base != NULL) {\n         intptr_t ptr = (intptr_t)base;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d597a90b4bf8441b779b1500bed7c7d0dc66a97a",
            "date": "2025-01-22T14:14:56Z",
            "author_login": "enh-google"
          },
          {
            "sha": "21869a5cc6f92bdd01f736f17f16a4a39bc28b2c",
            "date": "2025-01-21T16:44:52Z",
            "author_login": "enh-google"
          },
          {
            "sha": "296bd992b7918dcf27a1d67d16edeccececa0887",
            "date": "2025-01-18T13:40:45Z",
            "author_login": "enh-google"
          },
          {
            "sha": "d5e064d698f10f6419e30fc5f3b162f0b4a6cdce",
            "date": "2025-01-17T17:19:54Z",
            "author_login": "fmayer"
          },
          {
            "sha": "ec79de0907aeecfe4cb94cc1fb0510ba148eb8c5",
            "date": "2025-01-17T15:20:37Z",
            "author_login": "enh-google"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-189",
    "description": "Multiple integer overflows in the (1) chk_malloc, (2) leak_malloc, and (3) leak_memalign functions in libc/bionic/malloc_debug_leak.c in Bionic (libc) for Android, when libc.debug.malloc is set, make it easier for context-dependent attackers to perform memory-related attacks such as buffer overflows via a large size value, which causes less memory to be allocated than expected.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2012-07-25T19:55:02.820",
    "last_modified": "2024-11-21T01:39:25.270",
    "fix_date": "2012-03-14T06:48:39Z"
  },
  "references": [
    {
      "url": "http://kqueue.org/blog/2012/03/05/memory-allocator-security-revisited/",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/06/05/1",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/06/07/13",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://github.com/android/platform_bionic/commit/7f5aa4f35e23fd37425b3a5041737cdf58f87385",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "http://kqueue.org/blog/2012/03/05/memory-allocator-security-revisited/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/06/05/1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2012/06/07/13",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/android/platform_bionic/commit/7f5aa4f35e23fd37425b3a5041737cdf58f87385",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:07.290155",
    "processing_status": "enhanced"
  }
}