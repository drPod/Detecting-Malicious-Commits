{
  "cve_id": "CVE-2012-3867",
  "github_data": {
    "repository": "puppetlabs/puppet",
    "fix_commit": "dfedaa5fa841ccf335245a748b347b7c7c236640",
    "related_commits": [
      "dfedaa5fa841ccf335245a748b347b7c7c236640",
      "f3419620b42080dad3b0be14470b20a972f13c50",
      "dfedaa5fa841ccf335245a748b347b7c7c236640",
      "f3419620b42080dad3b0be14470b20a972f13c50"
    ],
    "patch_url": "https://github.com/puppetlabs/puppet/commit/dfedaa5fa841ccf335245a748b347b7c7c236640.patch",
    "fix_commit_details": {
      "sha": "dfedaa5fa841ccf335245a748b347b7c7c236640",
      "commit_date": "2012-06-20T20:27:21Z",
      "author": {
        "login": "pcarlisle",
        "type": "User",
        "stats": {
          "total_commits": 636,
          "average_weekly_commits": 0.6162790697674418,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 119
        }
      },
      "commit_message": {
        "title": "Validate CSR CN and provided certname before signing",
        "length": 644,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 98,
        "additions": 87,
        "deletions": 11
      },
      "files": [
        {
          "filename": "lib/puppet/ssl/certificate_authority.rb",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -300,6 +300,17 @@ def check_internal_signing_policies(hostname, csr, allow_dns_alt_names)\n       raise CertificateSigningError.new(hostname), \"CSR has request extensions that are not permitted: #{names}\"\n     end\n \n+    # Do not sign misleading CSRs\n+    cn = csr.content.subject.to_a.assoc(\"CN\")[1]\n+    if hostname != cn\n+      raise CertificateSigningError.new(hostname), \"CSR subject common name #{cn.inspect} does not match expected certname #{hostname.inspect}\"\n+    end\n+\n+    # Only allow printing ascii characters, excluding /\n+    if hostname !~ /\\A[ -.0-~]+\\Z/\n+      raise CertificateSigningError.new(hostname), \"CSR #{hostname.inspect} subject contains unprintable or non-ASCII characters\"\n+    end\n+\n     # Wildcards: we don't allow 'em at any point.\n     #\n     # The stringification here makes the content visible, and saves us having"
        },
        {
          "filename": "spec/unit/ssl/certificate_authority_spec.rb",
          "status": "modified",
          "additions": 76,
          "deletions": 11,
          "patch": "@@ -246,7 +246,7 @@ def stub_ca_host\n       # Stub out the factory\n       Puppet::SSL::CertificateFactory.stubs(:build).returns \"my real cert\"\n \n-      @request_content = stub \"request content stub\", :subject => @name\n+      @request_content = stub \"request content stub\", :subject => OpenSSL::X509::Name.new([['CN', @name]])\n       @request = stub 'request', :name => @name, :request_extensions => [], :subject_alt_names => [], :content => @request_content\n \n       # And the inventory\n@@ -303,28 +303,28 @@ def stub_ca_host\n \n       it \"should use a certificate type of :ca\" do\n         Puppet::SSL::CertificateFactory.expects(:build).with do |*args|\n-          args[0] == :ca\n+          args[0].should == :ca\n         end.returns \"my real cert\"\n         @ca.sign(@name, :ca, @request)\n       end\n \n       it \"should pass the provided CSR as the CSR\" do\n         Puppet::SSL::CertificateFactory.expects(:build).with do |*args|\n-          args[1] == @request\n+          args[1].should == @request\n         end.returns \"my real cert\"\n         @ca.sign(@name, :ca, @request)\n       end\n \n       it \"should use the provided CSR's content as the issuer\" do\n         Puppet::SSL::CertificateFactory.expects(:build).with do |*args|\n-          args[2].subject == \"myhost\"\n+          args[2].subject.to_s.should == \"/CN=myhost\"\n         end.returns \"my real cert\"\n         @ca.sign(@name, :ca, @request)\n       end\n \n       it \"should pass the next serial as the serial number\" do\n         Puppet::SSL::CertificateFactory.expects(:build).with do |*args|\n-          args[3] == @serial\n+          args[3].should == @serial\n         end.returns \"my real cert\"\n         @ca.sign(@name, :ca, @request)\n       end\n@@ -452,11 +452,76 @@ def stub_ca_host\n         @cert.stubs :save\n       end\n \n+      it \"should reject CSRs whose CN doesn't match the name for which we're signing them\" do\n+        # Shorten this so the test doesn't take too long\n+        Puppet[:keylength] = 1024\n+        key = Puppet::SSL::Key.new('the_certname')\n+        key.generate\n+\n+        csr = Puppet::SSL::CertificateRequest.new('the_certname')\n+        csr.generate(key)\n+\n+        expect do\n+          @ca.check_internal_signing_policies('not_the_certname', csr, false)\n+        end.to raise_error(\n+          Puppet::SSL::CertificateAuthority::CertificateSigningError,\n+          /common name \"the_certname\" does not match expected certname \"not_the_certname\"/\n+        )\n+      end\n+\n+      describe \"when validating the CN\" do\n+        before :all do\n+          Puppet[:keylength] = 1024\n+          @signing_key = Puppet::SSL::Key.new('my_signing_key')\n+          @signing_key.generate\n+        end\n+\n+        [\n+         'completely_okay',\n+         'sure, why not? :)',\n+         'so+many(things)-are=allowed.',\n+         'this\"is#just&madness%you[see]',\n+         'and even a (an?) \\\\!',\n+         'waltz, nymph, for quick jigs vex bud.',\n+         '{552c04ca-bb1b-11e1-874b-60334b04494e}'\n+        ].each do |name|\n+          it \"should accept #{name.inspect}\" do\n+            csr = Puppet::SSL::CertificateRequest.new(name)\n+            csr.generate(@signing_key)\n+\n+            @ca.check_internal_signing_policies(name, csr, false)\n+          end\n+        end\n+\n+        [\n+         'super/bad',\n+         \"not\\neven\\tkind\\rof\",\n+         \"ding\\adong\\a\",\n+         \"hidden\\b\\b\\b\\b\\b\\bmessage\",\n+         \"\u2603 :(\"\n+        ].each do |name|\n+          it \"should reject #{name.inspect}\" do\n+            # We aren't even allowed to make objects with these names, so let's\n+            # stub that to simulate an invalid one coming from outside Puppet\n+            Puppet::SSL::CertificateRequest.stubs(:validate_certname)\n+            csr = Puppet::SSL::CertificateRequest.new(name)\n+            csr.generate(@signing_key)\n+\n+            expect do\n+              @ca.check_internal_signing_policies(name, csr, false)\n+            end.to raise_error(\n+              Puppet::SSL::CertificateAuthority::CertificateSigningError,\n+              /subject contains unprintable or non-ASCII characters/\n+            )\n+          end\n+        end\n+      end\n+\n       it \"should reject a critical extension that isn't on the whitelist\" do\n         @request.stubs(:request_extensions).returns [{ \"oid\" => \"banana\",\n                                                        \"value\" => \"yumm\",\n                                                        \"critical\" => true }]\n-        expect { @ca.sign(@name) }.to raise_error(\n+        expect { @ca.check_internal_signing_policies(@name, @request, false) }.to raise_error(\n           Puppet::SSL::CertificateAuthority::CertificateSigningError,\n           /request extensions that are not permitted/\n         )\n@@ -466,7 +531,7 @@ def stub_ca_host\n         @request.stubs(:request_extensions).returns [{ \"oid\" => \"peach\",\n                                                        \"value\" => \"meh\",\n                                                        \"critical\" => false }]\n-        expect { @ca.sign(@name) }.to raise_error(\n+        expect { @ca.check_internal_signing_policies(@name, @request, false) }.to raise_error(\n           Puppet::SSL::CertificateAuthority::CertificateSigningError,\n           /request extensions that are not permitted/\n         )\n@@ -479,15 +544,15 @@ def stub_ca_host\n                                                      { \"oid\" => \"subjectAltName\",\n                                                        \"value\" => \"DNS:foo\",\n                                                        \"critical\" => true }]\n-        expect { @ca.sign(@name) }.to raise_error(\n+        expect { @ca.check_internal_signing_policies(@name, @request, false) }.to raise_error(\n           Puppet::SSL::CertificateAuthority::CertificateSigningError,\n           /request extensions that are not permitted/\n         )\n       end\n \n       it \"should reject a subjectAltName for a non-DNS value\" do\n         @request.stubs(:subject_alt_names).returns ['DNS:foo', 'email:bar@example.com']\n-        expect { @ca.sign(@name, true) }.to raise_error(\n+        expect { @ca.check_internal_signing_policies(@name, @request, true) }.to raise_error(\n           Puppet::SSL::CertificateAuthority::CertificateSigningError,\n           /subjectAltName outside the DNS label space/\n         )\n@@ -497,15 +562,15 @@ def stub_ca_host\n         @request.content.stubs(:subject).\n           returns(OpenSSL::X509::Name.new([[\"CN\", \"*.local\"]]))\n \n-        expect { @ca.sign(@name) }.to raise_error(\n+        expect { @ca.check_internal_signing_policies('*.local', @request, false) }.to raise_error(\n           Puppet::SSL::CertificateAuthority::CertificateSigningError,\n           /subject contains a wildcard/\n         )\n       end\n \n       it \"should reject a wildcard subjectAltName\" do\n         @request.stubs(:subject_alt_names).returns ['DNS:foo', 'DNS:*.bar']\n-        expect { @ca.sign(@name, true) }.to raise_error(\n+        expect { @ca.check_internal_signing_policies(@name, @request, true) }.to raise_error(\n           Puppet::SSL::CertificateAuthority::CertificateSigningError,\n           /subjectAltName contains a wildcard/\n         )"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e227c27540975c25aa22d533a52424a9d2fc886a",
            "date": "2024-12-11T04:01:36Z",
            "author_login": "joshcooper"
          },
          {
            "sha": "68f8b7da048c9f0275c36e3551a749b97023be33",
            "date": "2024-12-10T23:25:31Z",
            "author_login": "mhashizume"
          },
          {
            "sha": "603c0d4cea997f3680fb5d51fa3a7e41e4426038",
            "date": "2024-12-10T23:21:26Z",
            "author_login": "puppetlabs-jenkins"
          },
          {
            "sha": "e9671155fea02a3ec18d336cf57b3c057711ca32",
            "date": "2024-11-26T00:39:13Z",
            "author_login": "cthorn42"
          },
          {
            "sha": "295d2f9071a46d82f73947963f761471bd011d88",
            "date": "2024-11-25T23:41:34Z",
            "author_login": "mhashizume"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-264",
    "description": "lib/puppet/ssl/certificate_authority.rb in Puppet before 2.6.17 and 2.7.x before 2.7.18, and Puppet Enterprise before 2.5.2, does not properly restrict the characters in the Common Name field of a Certificate Signing Request (CSR), which makes it easier for user-assisted remote attackers to trick administrators into signing a crafted agent certificate via ANSI control sequences.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2012-08-06T16:55:06.680",
    "last_modified": "2024-11-21T01:41:46.083",
    "fix_date": "2012-06-20T20:27:21Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00006.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2012-07/msg00036.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://puppetlabs.com/security/cve/cve-2012-3867/",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://secunia.com/advisories/50014",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2012/dsa-2511",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-1506-1",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=839158",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/puppetlabs/puppet/commit/dfedaa5fa841ccf335245a748b347b7c7c236640",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/puppetlabs/puppet/commit/f3419620b42080dad3b0be14470b20a972f13c50",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2012-08/msg00006.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2012-07/msg00036.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://puppetlabs.com/security/cve/cve-2012-3867/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://secunia.com/advisories/50014",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2012/dsa-2511",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-1506-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=839158",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/puppetlabs/puppet/commit/dfedaa5fa841ccf335245a748b347b7c7c236640",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/puppetlabs/puppet/commit/f3419620b42080dad3b0be14470b20a972f13c50",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:07.293809",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "puppet",
    "owner": "puppetlabs",
    "created_at": "2010-09-14T19:26:44Z",
    "updated_at": "2025-01-13T14:35:03Z",
    "pushed_at": "2024-12-11T04:01:36Z",
    "size": 90565,
    "stars": 7496,
    "forks": 2192,
    "open_issues": 73,
    "watchers": 7496,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "6.x",
      "7.x",
      "main"
    ],
    "languages": {
      "Ruby": 12928684,
      "HTML": 48622,
      "Puppet": 20259,
      "Shell": 12321,
      "C#": 5195,
      "Pascal": 858,
      "Batchfile": 594
    },
    "commit_activity": {
      "total_commits_last_year": 506,
      "avg_commits_per_week": 9.73076923076923,
      "days_active_last_year": 146
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:10:48.445221"
  }
}