{
  "cve_id": "CVE-2012-4451",
  "github_data": {
    "repository": "zendframework/zf2",
    "fix_commit": "27131ca9520bdf1d4c774c71459eba32f2b10733",
    "related_commits": [
      "27131ca9520bdf1d4c774c71459eba32f2b10733",
      "27131ca9520bdf1d4c774c71459eba32f2b10733"
    ],
    "patch_url": "https://github.com/zendframework/zf2/commit/27131ca9520bdf1d4c774c71459eba32f2b10733.patch",
    "fix_commit_details": {
      "sha": "27131ca9520bdf1d4c774c71459eba32f2b10733",
      "commit_date": "2012-09-20T20:22:57Z",
      "author": {
        "login": "weierophinney",
        "type": "User",
        "stats": {
          "total_commits": 8209,
          "average_weekly_commits": 10.605943152454781,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 204
        }
      },
      "commit_message": {
        "title": "Merge branch 'security/escaper-usage'",
        "length": 146,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 854,
        "additions": 579,
        "deletions": 275
      },
      "files": [
        {
          "filename": "library/Zend/Debug/Debug.php",
          "status": "modified",
          "additions": 32,
          "deletions": 1,
          "patch": "@@ -10,6 +10,8 @@\n \n namespace Zend\\Debug;\n \n+use Zend\\Escaper\\Escaper;\n+\n /**\n  * Concrete class for generating debug dumps related to the output source.\n  *\n@@ -18,6 +20,10 @@\n  */\n class Debug\n {\n+    /**\n+     * @var Escaper\n+     */\n+    protected static $escaper = null;\n \n     /**\n      * @var string\n@@ -50,6 +56,31 @@ public static function setSapi($sapi)\n         self::$sapi = $sapi;\n     }\n \n+    /**\n+     * Set Escaper instance\n+     *\n+     * @param  Escaper $escaper\n+     */\n+    public static function setEscaper(Escaper $escaper)\n+    {\n+        static::$escaper = $escaper;\n+    }\n+    \n+    /**\n+     * Get Escaper instance\n+     *\n+     * Lazy loads an instance if none provided.\n+     *\n+     * @return Escaper\n+     */\n+    public static function getEscaper()\n+    {\n+        if (null === static::$escaper) {\n+            static::setEscaper(new Escaper());\n+        }\n+        return static::$escaper;\n+    }\n+\n     /**\n      * Debug helper function.  This is a wrapper for var_dump() that adds\n      * the <pre /> tags, cleans up newlines and indents, and runs\n@@ -78,7 +109,7 @@ public static function dump($var, $label=null, $echo=true)\n                     . PHP_EOL;\n         } else {\n             if (!extension_loaded('xdebug')) {\n-                $output = htmlspecialchars($output, ENT_QUOTES);\n+                $output = static::getEscaper()->escapeHtml($output);\n             }\n \n             $output = '<pre>'"
        },
        {
          "filename": "library/Zend/Debug/composer.json",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -13,6 +13,10 @@\n     },\n     \"target-dir\": \"Zend/Debug\",\n     \"require\": {\n-        \"php\": \">=5.3.3\"\n+        \"php\": \">=5.3.3\",\n+        \"zendframework/zend-escaper\": \"self.version\"\n+    },\n+    \"suggest\": {\n+        \"ext/xdebug\": \"XDebug, for better backtrace output\"\n     }\n-}\n\\ No newline at end of file\n+}"
        },
        {
          "filename": "library/Zend/Feed/PubSubHubbub/PubSubHubbub.php",
          "status": "modified",
          "additions": 41,
          "deletions": 7,
          "patch": "@@ -10,6 +10,7 @@\n \n namespace Zend\\Feed\\PubSubHubbub;\n \n+use Zend\\Escaper\\Escaper;\n use Zend\\Feed\\Reader;\n use Zend\\Http;\n \n@@ -32,10 +33,15 @@ class PubSubHubbub\n     const SUBSCRIPTION_NOTVERIFIED = 'not_verified';\n     const SUBSCRIPTION_TODELETE    = 'to_delete';\n \n+    /**\n+     * @var Escaper\n+     */\n+    protected static $escaper;\n+\n     /**\n      * Singleton instance if required of the HTTP client\n      *\n-     * @var \\Zend\\Http\\Client\n+     * @var Http\\Client\n      */\n     protected static $httpClient = null;\n \n@@ -67,7 +73,7 @@ public static function detectHubs($source)\n      * Allows the external environment to make Zend_Oauth use a specific\n      * Client instance.\n      *\n-     * @param  \\Zend\\Http\\Client $httpClient\n+     * @param  Http\\Client $httpClient\n      * @return void\n      */\n     public static function setHttpClient(Http\\Client $httpClient)\n@@ -80,15 +86,15 @@ public static function setHttpClient(Http\\Client $httpClient)\n      * the instance is reset and cleared of previous parameters GET/POST.\n      * Headers are NOT reset but handled by this component if applicable.\n      *\n-     * @return \\Zend\\Http\\Client\n+     * @return Http\\Client\n      */\n     public static function getHttpClient()\n     {\n-        if (!isset(self::$httpClient)):\n+        if (!isset(self::$httpClient)) {\n             self::$httpClient = new Http\\Client;\n-        else:\n+        } else {\n             self::$httpClient->resetParameters();\n-        endif;\n+        }\n         return self::$httpClient;\n     }\n \n@@ -103,6 +109,33 @@ public static function clearHttpClient()\n         self::$httpClient = null;\n     }\n \n+    /**\n+     * Set the Escaper instance\n+     *\n+     * If null, resets the instance\n+     * \n+     * @param  null|Escaper $escaper \n+     */\n+    public static function setEscaper(Escaper $escaper = null)\n+    {\n+        static::$escaper = $escaper;\n+    }\n+\n+    /**\n+     * Get the Escaper instance\n+     *\n+     * If none registered, lazy-loads an instance.\n+     * \n+     * @return Escaper\n+     */\n+    public static function getEscaper()\n+    {\n+        if (null === static::$escaper) {\n+            static::setEscaper(new Escaper());\n+        }\n+        return static::$escaper;\n+    }\n+\n     /**\n      * RFC 3986 safe url encoding method\n      *\n@@ -111,7 +144,8 @@ public static function clearHttpClient()\n      */\n     public static function urlencode($string)\n     {\n-        $rawencoded = rawurlencode($string);\n+        $escaper    = static::getEscaper();\n+        $rawencoded = $escaper->escapeUrl($string);\n         $rfcencoded = str_replace('%7E', '~', $rawencoded);\n         return $rfcencoded;\n     }"
        },
        {
          "filename": "library/Zend/Feed/composer.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -14,6 +14,7 @@\n     \"target-dir\": \"Zend/Feed\",\n     \"require\": {\n         \"php\": \">=5.3.3\",\n+        \"zendframework/zend-escaper\": \"self.version\",\n         \"zendframework/zend-stdlib\": \"self.version\"\n     },\n     \"suggest\": {"
        },
        {
          "filename": "library/Zend/Log/Formatter/Xml.php",
          "status": "modified",
          "additions": 38,
          "deletions": 4,
          "patch": "@@ -14,6 +14,7 @@\n use DOMDocument;\n use DOMElement;\n use Traversable;\n+use Zend\\Escaper\\Escaper;\n use Zend\\Stdlib\\ArrayUtils;\n \n /**\n@@ -38,6 +39,11 @@ class Xml implements FormatterInterface\n      */\n     protected $encoding;\n \n+    /**\n+     * @var Escaper instance\n+     */\n+    protected $escaper;\n+\n     /**\n      * Format specifier for DateTime objects in event data (default: ISO 8601)\n      *\n@@ -121,6 +127,33 @@ public function setEncoding($value)\n         return $this;\n     }\n \n+    /**\n+     * Set Escaper instance\n+     *\n+     * @param  Escaper $escaper\n+     * @return Xml\n+     */\n+    public function setEscaper(Escaper $escaper)\n+    {\n+        $this->escaper = $escaper;\n+        return $this;\n+    }\n+    \n+    /**\n+     * Get Escaper instance\n+     *\n+     * Lazy-loads an instance with the current encoding if none registered.\n+     *\n+     * @return Escaper\n+     */\n+    public function getEscaper()\n+    {\n+        if (null === $this->escaper) {\n+            $this->setEscaper(new Escaper($this->getEncoding()));\n+        }\n+        return $this->escaper;\n+    }\n+\n     /**\n      * Formats data into a single line to be written by the writer.\n      *\n@@ -142,17 +175,18 @@ public function format($event)\n             }\n         }\n \n-        $enc = $this->getEncoding();\n-        $dom = new DOMDocument('1.0', $enc);\n-        $elt = $dom->appendChild(new DOMElement($this->rootElement));\n+        $enc     = $this->getEncoding();\n+        $escaper = $this->getEscaper();\n+        $dom     = new DOMDocument('1.0', $enc);\n+        $elt     = $dom->appendChild(new DOMElement($this->rootElement));\n \n         foreach ($dataToInsert as $key => $value) {\n             if (empty($value)\n                 || is_scalar($value)\n                 || (is_object($value) && method_exists($value,'__toString'))\n             ) {\n                 if ($key == \"message\") {\n-                    $value = htmlspecialchars($value, ENT_COMPAT, $enc);\n+                    $value = $escaper->escapeHtml($value);\n                 } elseif ($key == \"extra\" && empty($value)) {\n                     continue;\n                 }"
        },
        {
          "filename": "library/Zend/Log/composer.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -20,6 +20,7 @@\n     \"suggest\": {\n         \"ext-mongo\": \"*\",\n         \"zendframework/zend-db\": \"Zend\\\\Db component\",\n+        \"zendframework/zend-escaper\": \"Zend\\\\Escaper component, for use in the XML formatter\",\n         \"zendframework/zend-mail\": \"Zend\\\\Mail component\",\n         \"zendframework/zend-validator\": \"Zend\\\\Validator component\"\n     }"
        },
        {
          "filename": "library/Zend/Tag/Cloud/Decorator/AbstractCloud.php",
          "status": "modified",
          "additions": 1,
          "deletions": 51,
          "patch": "@@ -10,62 +10,12 @@\n \n namespace Zend\\Tag\\Cloud\\Decorator;\n \n-use Traversable;\n-use Zend\\Stdlib\\ArrayUtils;\n-use Zend\\Tag\\Cloud\\Decorator\\DecoratorInterface as Decorator;\n-\n /**\n  * Abstract class for cloud decorators\n  *\n  * @category  Zend\n  * @package   Zend_Tag\n  */\n-abstract class AbstractCloud implements Decorator\n+abstract class AbstractCloud extends AbstractDecorator\n {\n-    /**\n-     * Option keys to skip when calling setOptions()\n-     *\n-     * @var array\n-     */\n-    protected $skipOptions = array(\n-        'options',\n-        'config',\n-    );\n-\n-    /**\n-     * Create a new cloud decorator with options\n-     *\n-     * @param  array|Traversable $options\n-     */\n-    public function __construct($options = null)\n-    {\n-        if ($options instanceof Traversable) {\n-            $options = ArrayUtils::iteratorToArray($options);\n-        }\n-        if (is_array($options)) {\n-            $this->setOptions($options);\n-        }\n-    }\n-\n-    /**\n-     * Set options from array\n-     *\n-     * @param  array $options Configuration for the decorator\n-     * @return AbstractCloud\n-     */\n-    public function setOptions(array $options)\n-    {\n-        foreach ($options as $key => $value) {\n-            if (in_array(strtolower($key), $this->skipOptions)) {\n-                continue;\n-            }\n-\n-            $method = 'set' . $key;\n-            if (method_exists($this, $method)) {\n-                $this->$method($value);\n-            }\n-        }\n-\n-        return $this;\n-    }\n }"
        },
        {
          "filename": "library/Zend/Tag/Cloud/Decorator/AbstractDecorator.php",
          "status": "added",
          "additions": 190,
          "deletions": 0,
          "patch": "@@ -0,0 +1,190 @@\n+<?php\n+/**\n+ * Zend Framework (http://framework.zend.com/)\n+ *\n+ * @link      http://github.com/zendframework/zf2 for the canonical source repository\n+ * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)\n+ * @license   http://framework.zend.com/license/new-bsd New BSD License\n+ * @package   Zend_Tag\n+ */\n+\n+namespace Zend\\Tag\\Cloud\\Decorator;\n+\n+use Traversable;\n+use Zend\\Escaper\\Escaper;\n+use Zend\\Stdlib\\ArrayUtils;\n+use Zend\\Tag\\Cloud\\Decorator\\DecoratorInterface as Decorator;\n+use Zend\\Tag\\Exception;\n+\n+/**\n+ * Abstract class for decorators\n+ *\n+ * @category  Zend\n+ * @package   Zend_Tag\n+ */\n+abstract class AbstractDecorator implements Decorator\n+{\n+    /**\n+     * @var string Encoding to use\n+     */\n+    protected $encoding = 'UTF-8';\n+\n+    /**\n+     * @var Escaper\n+     */\n+    protected $escaper;\n+\n+    /**\n+     * Option keys to skip when calling setOptions()\n+     *\n+     * @var array\n+     */\n+    protected $skipOptions = array(\n+        'options',\n+        'config',\n+    );\n+\n+    /**\n+     * Create a new decorator with options\n+     *\n+     * @param  array|Traversable $options\n+     */\n+    public function __construct($options = null)\n+    {\n+        if ($options instanceof Traversable) {\n+            $options = ArrayUtils::iteratorToArray($options);\n+        }\n+        if (is_array($options)) {\n+            $this->setOptions($options);\n+        }\n+    }\n+\n+    /**\n+     * Set options from array\n+     *\n+     * @param  array $options Configuration for the decorator\n+     * @return AbstractTag\n+     */\n+    public function setOptions(array $options)\n+    {\n+        foreach ($options as $key => $value) {\n+            if (in_array(strtolower($key), $this->skipOptions)) {\n+                continue;\n+            }\n+\n+            $method = 'set' . $key;\n+            if (method_exists($this, $method)) {\n+                $this->$method($value);\n+            }\n+        }\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * Get encoding\n+     *\n+     * @return string\n+     */\n+    public function getEncoding()\n+    {\n+        return $this->encoding;\n+    }\n+\n+    /**\n+     * Set encoding\n+     *\n+     * @param string\n+     * @return HTMLCloud\n+     */\n+    public function setEncoding($value)\n+    {\n+        $this->encoding = (string) $value;\n+        return $this;\n+    }\n+\n+    /**\n+     * Set Escaper instance\n+     *\n+     * @param  Escaper $escaper\n+     * @return HtmlCloud\n+     */\n+    public function setEscaper($escaper)\n+    {\n+        $this->escaper = $escaper;\n+        return $this;\n+    }\n+    \n+    /**\n+     * Retrieve Escaper instance\n+     *\n+     * If none registered, instantiates and registers one using current encoding.\n+     *\n+     * @return Escaper\n+     */\n+    public function getEscaper()\n+    {\n+        if (null === $this->escaper) {\n+            $this->setEscaper(new Escaper($this->getEncoding()));\n+        }\n+        return $this->escaper;\n+    }\n+\n+    /**\n+     * Validate an HTML element name\n+     * \n+     * @param  string $name \n+     * @throws Exception\\InvalidElementNameException\n+     */\n+    protected function validateElementName($name)\n+    {\n+        if (!preg_match('/^[a-z0-9]+$/i', $name)) {\n+            throw new Exception\\InvalidElementNameException(sprintf(\n+                '%s: Invalid element name \"%s\" provided; please provide valid HTML element names',\n+                __METHOD__,\n+                $this->getEscaper()->escapeHtml($name)\n+            ));\n+        }\n+    }\n+\n+    /**\n+     * Validate an HTML attribute name\n+     * \n+     * @param  string $name \n+     * @throws Exception\\InvalidAttributeNameException\n+     */\n+    protected function validateAttributeName($name)\n+    {\n+        if (!preg_match('/^[a-z_:][-a-z0-9_:.]*$/i', $name)) {\n+            throw new Exception\\InvalidAttributeNameException(sprintf(\n+                '%s: Invalid HTML attribute name \"%s\" provided; please provide valid HTML attribute names',\n+                __METHOD__,\n+                $this->getEscaper()->escapeHtml($name)\n+            ));\n+        }\n+    }\n+\n+    protected function wrapTag($html)\n+    {\n+        $escaper = $this->getEscaper();\n+        foreach ($this->getHTMLTags() as $key => $data) {\n+            if (is_array($data)) {\n+                $attributes = '';\n+                $htmlTag    = $key;\n+                $this->validateElementName($htmlTag);\n+\n+                foreach ($data as $param => $value) {\n+                    $this->validateAttributeName($param);\n+                    $attributes .= ' ' . $param . '=\"' . $escaper->escapeHtmlAttr($value) . '\"';\n+                }\n+            } else {\n+                $attributes = '';\n+                $htmlTag    = $data;\n+                $this->validateElementName($htmlTag);\n+            }\n+\n+            $html = sprintf('<%1$s%3$s>%2$s</%1$s>', $htmlTag, $html, $attributes);\n+        }\n+        return $html;\n+    }\n+}"
        },
        {
          "filename": "library/Zend/Tag/Cloud/Decorator/AbstractTag.php",
          "status": "modified",
          "additions": 1,
          "deletions": 51,
          "patch": "@@ -10,62 +10,12 @@\n \n namespace Zend\\Tag\\Cloud\\Decorator;\n \n-use Traversable;\n-use Zend\\Stdlib\\ArrayUtils;\n-use Zend\\Tag\\Cloud\\Decorator\\DecoratorInterface as Decorator;\n-\n /**\n  * Abstract class for tag decorators\n  *\n  * @category  Zend\n  * @package   Zend_Tag\n  */\n-abstract class AbstractTag implements Decorator\n+abstract class AbstractTag extends AbstractDecorator\n {\n-    /**\n-     * Option keys to skip when calling setOptions()\n-     *\n-     * @var array\n-     */\n-    protected $skipOptions = array(\n-        'options',\n-        'config',\n-    );\n-\n-    /**\n-     * Create a new cloud decorator with options\n-     *\n-     * @param  array|Traversable $options\n-     */\n-    public function __construct($options = null)\n-    {\n-        if ($options instanceof Traversable) {\n-            $options = ArrayUtils::iteratorToArray($options);\n-        }\n-        if (is_array($options)) {\n-            $this->setOptions($options);\n-        }\n-    }\n-\n-    /**\n-     * Set options from array\n-     *\n-     * @param  array $options Configuration for the decorator\n-     * @return AbstractTag\n-     */\n-    public function setOptions(array $options)\n-    {\n-        foreach ($options as $key => $value) {\n-            if (in_array(strtolower($key), $this->skipOptions)) {\n-                continue;\n-            }\n-\n-            $method = 'set' . $key;\n-            if (method_exists($this, $method)) {\n-                $this->$method($value);\n-            }\n-        }\n-\n-        return $this;\n-    }\n }"
        },
        {
          "filename": "library/Zend/Tag/Cloud/Decorator/HtmlCloud.php",
          "status": "modified",
          "additions": 1,
          "deletions": 45,
          "patch": "@@ -18,11 +18,6 @@\n  */\n class HtmlCloud extends AbstractCloud\n {\n-    /**\n-     * @var string Encoding to use\n-     */\n-    protected $encoding = 'UTF-8';\n-\n     /**\n      * List of HTML tags\n      *\n@@ -39,28 +34,6 @@ class HtmlCloud extends AbstractCloud\n      */\n     protected $separator = ' ';\n \n-    /**\n-     * Get encoding\n-     *\n-     * @return string\n-     */\n-    public function getEncoding()\n-    {\n-        return $this->encoding;\n-    }\n-\n-    /**\n-     * Set encoding\n-     *\n-     * @param string\n-     * @return HTMLCloud\n-     */\n-    public function setEncoding($value)\n-    {\n-        $this->encoding = (string) $value;\n-        return $this;\n-    }\n-\n     /**\n      * Set the HTML tags surrounding all tags\n      *\n@@ -121,24 +94,7 @@ public function render($tags)\n             ));\n         }\n         $cloudHTML = implode($this->getSeparator(), $tags);\n-\n-        $enc = $this->getEncoding();\n-        foreach ($this->getHTMLTags() as $key => $data) {\n-            if (is_array($data)) {\n-                $htmlTag    = $key;\n-                $attributes = '';\n-\n-                foreach ($data as $param => $value) {\n-                    $attributes .= ' ' . $param . '=\"' . htmlspecialchars($value, ENT_COMPAT, $enc) . '\"';\n-                }\n-            } else {\n-                $htmlTag    = $data;\n-                $attributes = '';\n-            }\n-\n-            $cloudHTML = sprintf('<%1$s%3$s>%2$s</%1$s>', $htmlTag, $cloudHTML, $attributes);\n-        }\n-\n+        $cloudHTML = $this->wrapTag($cloudHTML);\n         return $cloudHTML;\n     }\n }"
        },
        {
          "filename": "library/Zend/Tag/Cloud/Decorator/HtmlTag.php",
          "status": "modified",
          "additions": 4,
          "deletions": 47,
          "patch": "@@ -29,11 +29,6 @@ class HtmlTag extends AbstractTag\n      */\n     protected $classList = null;\n \n-    /**\n-     * @var string Encoding to utilize\n-     */\n-    protected $encoding = 'UTF-8';\n-\n     /**\n      * Unit for the fontsize\n      *\n@@ -107,28 +102,6 @@ public function getClassList()\n         return $this->classList;\n     }\n \n-    /**\n-     * Get encoding\n-     *\n-     * @return string\n-     */\n-    public function getEncoding()\n-    {\n-         return $this->encoding;\n-    }\n-\n-    /**\n-     * Set encoding\n-     *\n-     * @param  string $value\n-     * @return HTMLTag\n-     */\n-    public function setEncoding($value)\n-    {\n-        $this->encoding = (string) $value;\n-        return $this;\n-    }\n-\n     /**\n      * Set the font size unit\n      *\n@@ -259,32 +232,16 @@ public function render($tags)\n \n         $result = array();\n \n-        $enc = $this->getEncoding();\n+        $escaper = $this->getEscaper();\n         foreach ($tags as $tag) {\n             if (null === ($classList = $this->getClassList())) {\n                 $attribute = sprintf('style=\"font-size: %d%s;\"', $tag->getParam('weightValue'), $this->getFontSizeUnit());\n             } else {\n-                $attribute = sprintf('class=\"%s\"', htmlspecialchars($tag->getParam('weightValue'), ENT_COMPAT, $enc));\n-            }\n-\n-            $tagHTML = sprintf('<a href=\"%s\" %s>%s</a>', htmlSpecialChars($tag->getParam('url'), ENT_COMPAT, $enc), $attribute, $tag->getTitle());\n-\n-            foreach ($this->getHTMLTags() as $key => $data) {\n-                if (is_array($data)) {\n-                    $htmlTag    = $key;\n-                    $attributes = '';\n-\n-                    foreach ($data as $param => $value) {\n-                        $attributes .= ' ' . $param . '=\"' . htmlspecialchars($value, ENT_COMPAT, $enc) . '\"';\n-                    }\n-                } else {\n-                    $htmlTag    = $data;\n-                    $attributes = '';\n-                }\n-\n-                $tagHTML = sprintf('<%1$s%3$s>%2$s</%1$s>', $htmlTag, $tagHTML, $attributes);\n+                $attribute = sprintf('class=\"%s\"', $escaper->escapeHtmlAttr($tag->getParam('weightValue')));\n             }\n \n+            $tagHTML  = sprintf('<a href=\"%s\" %s>%s</a>', $escaper->escapeHtml($tag->getParam('url')), $attribute, $escaper->escapeHtml($tag->getTitle()));\n+            $tagHTML  = $this->wrapTag($tagHTML);\n             $result[] = $tagHTML;\n         }\n "
        },
        {
          "filename": "library/Zend/Tag/Exception/InvalidAttributeNameException.php",
          "status": "added",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -0,0 +1,16 @@\n+<?php\n+/**\n+ * Zend Framework (http://framework.zend.com/)\n+ *\n+ * @link      http://github.com/zendframework/zf2 for the canonical source repository\n+ * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)\n+ * @license   http://framework.zend.com/license/new-bsd New BSD License\n+ * @package   Zend_Tag\n+ */\n+\n+namespace Zend\\Tag\\Exception;\n+\n+use DomainException;\n+\n+class InvalidAttributeNameException extends DomainException implements ExceptionInterface\n+{}"
        },
        {
          "filename": "library/Zend/Tag/Exception/InvalidElementNameException.php",
          "status": "added",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -0,0 +1,16 @@\n+<?php\n+/**\n+ * Zend Framework (http://framework.zend.com/)\n+ *\n+ * @link      http://github.com/zendframework/zf2 for the canonical source repository\n+ * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)\n+ * @license   http://framework.zend.com/license/new-bsd New BSD License\n+ * @package   Zend_Tag\n+ */\n+\n+namespace Zend\\Tag\\Exception;\n+\n+use DomainException;\n+\n+class InvalidElementNameException extends DomainException implements ExceptionInterface\n+{}"
        },
        {
          "filename": "library/Zend/Tag/composer.json",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -13,6 +13,7 @@\n     },\n     \"target-dir\": \"Zend/Tag\",\n     \"require\": {\n-        \"php\": \">=5.3.3\"\n+        \"php\": \">=5.3.3\",\n+        \"zendframework/zend-escaper\": \"self.version\"\n     }\n-}\n\\ No newline at end of file\n+}"
        },
        {
          "filename": "library/Zend/Uri/Uri.php",
          "status": "modified",
          "additions": 40,
          "deletions": 6,
          "patch": "@@ -10,6 +10,7 @@\n \n namespace Zend\\Uri;\n \n+use Zend\\Escaper\\Escaper;\n use Zend\\Validator;\n \n /**\n@@ -125,6 +126,11 @@ class Uri implements UriInterface\n      */\n     protected static $defaultPorts = array();\n \n+    /**\n+     * @var Escaper\n+     */\n+    protected static $escaper;\n+\n     /**\n      * Create a new URI object\n      *\n@@ -152,6 +158,31 @@ public function __construct($uri = null)\n         }\n     }\n \n+    /**\n+     * Set Escaper instance\n+     * \n+     * @param  Escaper $escaper \n+     */\n+    public static function setEscaper(Escaper $escaper)\n+    {\n+        static::$escaper = $escaper;\n+    }\n+\n+    /**\n+     * Retrieve Escaper instance\n+     *\n+     * Lazy-loads one if none provided\n+     * \n+     * @return Escaper\n+     */\n+    public static function getEscaper()\n+    {\n+        if (null === static::$escaper) {\n+            static::setEscaper(new Escaper());\n+        }\n+        return static::$escaper;\n+    }\n+\n     /**\n      * Check if the URI is valid\n      *\n@@ -935,8 +966,9 @@ public static function encodeUserInfo($userInfo)\n         }\n \n         $regex   = '/(?:[^' . self::CHAR_UNRESERVED . self::CHAR_SUB_DELIMS . '%:]|%(?![A-Fa-f0-9]{2}))/';\n-        $replace = function($match) {\n-            return rawurlencode($match[0]);\n+        $escaper = static::getEscaper();\n+        $replace = function ($match) use ($escaper) {\n+            return $escaper->escapeUrl($match[0]);\n         };\n \n         return preg_replace_callback($regex, $replace, $userInfo);\n@@ -962,8 +994,9 @@ public static function encodePath($path)\n         }\n \n         $regex   = '/(?:[^' . self::CHAR_UNRESERVED . ':@&=\\+\\$,\\/;%]+|%(?![A-Fa-f0-9]{2}))/';\n-        $replace = function($match) {\n-            return rawurlencode($match[0]);\n+        $escaper = static::getEscaper();\n+        $replace = function ($match) use ($escaper) {\n+            return $escaper->escapeUrl($match[0]);\n         };\n \n         return preg_replace_callback($regex, $replace, $path);\n@@ -990,8 +1023,9 @@ public static function encodeQueryFragment($input)\n         }\n \n         $regex   = '/(?:[^' . self::CHAR_UNRESERVED . self::CHAR_SUB_DELIMS . '%:@\\/\\?]+|%(?![A-Fa-f0-9]{2}))/';\n-        $replace = function($match) {\n-            return rawurlencode($match[0]);\n+        $escaper = static::getEscaper();\n+        $replace = function ($match) use ($escaper) {\n+            return $escaper->escapeUrl($match[0]);\n         };\n \n         return preg_replace_callback($regex, $replace, $input);"
        },
        {
          "filename": "library/Zend/Uri/composer.json",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -14,6 +14,7 @@\n     \"target-dir\": \"Zend/Uri\",\n     \"require\": {\n         \"php\": \">=5.3.3\",\n+        \"zendframework/zend-escaper\": \"self.version\",\n         \"zendframework/zend-validator\": \"self.version\"\n     }\n-}\n\\ No newline at end of file\n+}"
        },
        {
          "filename": "library/Zend/View/Helper/HeadStyle.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -311,6 +311,7 @@ public function itemToString(stdClass $item, $indent)\n             ) {\n                 $enc = $this->view->getEncoding();\n             }\n+            $escaper = $this->getEscaper($enc);\n             foreach ($item->attributes as $key => $value) {\n                 if (!in_array($key, $this->optionalAttributes)) {\n                     continue;\n@@ -333,7 +334,7 @@ public function itemToString(stdClass $item, $indent)\n                         $value = substr($value, 0, -1);\n                     }\n                 }\n-                $attrString .= sprintf(' %s=\"%s\"', $key, htmlspecialchars($value, ENT_COMPAT, $enc));\n+                $attrString .= sprintf(' %s=\"%s\"', $key, $escaper->escapeHtmlAttr($value));\n             }\n         }\n "
        },
        {
          "filename": "library/Zend/View/Helper/Navigation/Sitemap.php",
          "status": "modified",
          "additions": 2,
          "deletions": 8,
          "patch": "@@ -242,14 +242,8 @@ public function getServerUrl()\n      */\n     protected function xmlEscape($string)\n     {\n-        $enc = 'UTF-8';\n-        if ($this->view instanceof View\\Renderer\\RendererInterface\n-            && method_exists($this->view, 'getEncoding')\n-        ) {\n-            $enc = $this->view->getEncoding();\n-        }\n-\n-        return htmlspecialchars($string, ENT_QUOTES, $enc, false);\n+        $escaper = $this->view->plugin('escapeHtml');\n+        return $escaper($string);\n     }\n \n     // Public methods:"
        },
        {
          "filename": "library/Zend/View/Helper/Placeholder/Container/AbstractStandalone.php",
          "status": "modified",
          "additions": 40,
          "deletions": 11,
          "patch": "@@ -10,8 +10,10 @@\n \n namespace Zend\\View\\Helper\\Placeholder\\Container;\n \n+use Zend\\Escaper\\Escaper;\n use Zend\\View\\Exception;\n use Zend\\View\\Helper\\Placeholder\\Registry;\n+use Zend\\View\\Renderer\\RendererInterface;\n \n /**\n  * Base class for targeted placeholder helpers\n@@ -28,6 +30,11 @@ abstract class AbstractStandalone\n      */\n     protected $container;\n \n+    /**\n+     * @var Escaper[]\n+     */\n+    protected $escapers = array();\n+\n     /**\n      * @var \\Zend\\View\\Helper\\Placeholder\\Registry\n      */\n@@ -78,6 +85,35 @@ public function setRegistry(Registry $registry)\n         return $this;\n     }\n \n+    /**\n+     * Set Escaper instance\n+     *\n+     * @param  Escaper $escaper\n+     * @return AbstractStandalone\n+     */\n+    public function setEscaper(Escaper $escaper)\n+    {\n+        $encoding = $escaper->getEncoding();\n+        $this->escapers[$encoding] = $escaper;\n+        return $this;\n+    }\n+    \n+    /**\n+     * Get Escaper instance\n+     *\n+     * Lazy-loads one if none available\n+     *\n+     * @return mixed\n+     */\n+    public function getEscaper($enc = 'UTF-8')\n+    {\n+        $enc = strtolower($enc);\n+        if (!isset($this->escapers[$enc])) {\n+            $this->setEscaper(new Escaper($enc));\n+        }\n+        return $this->escapers[$enc];\n+    }\n+\n     /**\n      * Set whether or not auto escaping should be used\n      *\n@@ -108,23 +144,16 @@ public function getAutoEscape()\n      */\n     protected function escape($string)\n     {\n-        $enc = 'UTF-8';\n-        if ($this->view instanceof \\Zend\\View\\Renderer\\RendererInterface\n+        if ($this->view instanceof RendererInterface\n             && method_exists($this->view, 'getEncoding')\n         ) {\n-            $enc = $this->view->getEncoding();\n+            $enc     = $this->view->getEncoding();\n             $escaper = $this->view->plugin('escapeHtml');\n             return $escaper((string) $string);\n         }\n-        /**\n-         * bump this out to a protected method to kill the instance penalty!\n-         */\n-        $escaper = new \\Zend\\Escaper\\Escaper($enc);\n+\n+        $escaper = $this->getEscaper();\n         return $escaper->escapeHtml((string) $string);\n-        /**\n-         * Replaced to ensure consistent escaping\n-         */\n-        //return htmlspecialchars((string) $string, ENT_COMPAT, $enc);\n     }\n \n     /**"
        },
        {
          "filename": "tests/ZendTest/Tag/Cloud/CloudTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -208,7 +208,7 @@ public function testSkipOptions()\n     public function testRender()\n     {\n         $cloud    = $this->_getCloud(array('tags' => array(array('title' => 'foo', 'weight' => 1), array('title' => 'bar', 'weight' => 3))));\n-        $expected = '<ul class=\"Zend\\Tag\\Cloud\">'\n+        $expected = '<ul class=\"Zend&#x5C;Tag&#x5C;Cloud\">'\n                   . '<li><a href=\"\" style=\"font-size: 10px;\">foo</a></li> '\n                   . '<li><a href=\"\" style=\"font-size: 20px;\">bar</a></li>'\n                   . '</ul>';\n@@ -224,7 +224,7 @@ public function testRenderEmptyCloud()\n     public function testRenderViaToString()\n     {\n         $cloud = $this->_getCloud(array('tags' => array(array('title' => 'foo', 'weight' => 1), array('title' => 'bar', 'weight' => 3))));\n-        $expected = '<ul class=\"Zend\\Tag\\Cloud\">'\n+        $expected = '<ul class=\"Zend&#x5C;Tag&#x5C;Cloud\">'\n                   . '<li><a href=\"\" style=\"font-size: 10px;\">foo</a></li> '\n                   . '<li><a href=\"\" style=\"font-size: 20px;\">bar</a></li>'\n                   . '</ul>';"
        },
        {
          "filename": "tests/ZendTest/Tag/Cloud/Decorator/HtmlCloudTest.php",
          "status": "modified",
          "additions": 58,
          "deletions": 3,
          "patch": "@@ -25,7 +25,7 @@ public function testDefaultOutput()\n     {\n         $decorator = new Decorator\\HtmlCloud();\n \n-        $this->assertEquals('<ul class=\"Zend\\Tag\\Cloud\">foo bar</ul>', $decorator->render(array('foo', 'bar')));\n+        $this->assertEquals('<ul class=\"Zend&#x5C;Tag&#x5C;Cloud\">foo bar</ul>', $decorator->render(array('foo', 'bar')));\n     }\n \n     public function testNestedTags()\n@@ -41,7 +41,7 @@ public function testSeparator()\n         $decorator = new Decorator\\HtmlCloud();\n         $decorator->setSeparator('-');\n \n-        $this->assertEquals('<ul class=\"Zend\\Tag\\Cloud\">foo-bar</ul>', $decorator->render(array('foo', 'bar')));\n+        $this->assertEquals('<ul class=\"Zend&#x5C;Tag&#x5C;Cloud\">foo-bar</ul>', $decorator->render(array('foo', 'bar')));\n     }\n \n     public function testConstructorWithArray()\n@@ -71,5 +71,60 @@ public function testSkipOptions()\n         $decorator = new Decorator\\HtmlCloud(array('options' => 'foobar'));\n         // In case would fail due to an error\n     }\n-}\n \n+    public function invalidHtmlTagProvider()\n+    {\n+        return array(\n+            array(array('_foo')),\n+            array(array('&foo')),\n+            array(array(' foo')),\n+            array(array(' foo')),\n+            array(array(\n+                '_foo' => array(),\n+            )),\n+        );\n+    }\n+\n+    /**\n+     * @dataProvider invalidHtmlTagProvider\n+     */\n+    public function testInvalidHtmlTagsRaiseAnException($tags)\n+    {\n+        $decorator = new Decorator\\HtmlCloud();\n+        $decorator->setHTMLTags($tags);\n+        $this->setExpectedException('Zend\\Tag\\Exception\\InvalidElementNameException');\n+        $decorator->render(array());\n+    }\n+\n+    public function invalidAttributeProvider()\n+    {\n+        return array(\n+            array(array(\n+                'foo' => array(\n+                    '&bar' => 'baz',\n+                ),\n+            )),\n+            array(array(\n+                'foo' => array(\n+                    ':bar&baz' => 'bat',\n+                ),\n+            )),\n+            array(array(\n+                'foo' => array(\n+                    'bar/baz' => 'bat',\n+                ),\n+            )),\n+        );\n+    }\n+\n+    /**\n+     * @dataProvider invalidAttributeProvider\n+     */\n+    public function testInvalidAttributeNamesRaiseAnException($tags)\n+    {\n+        $decorator = new Decorator\\HtmlCloud();\n+        $decorator->setHTMLTags($tags);\n+        $this->setExpectedException('Zend\\Tag\\Exception\\InvalidAttributeNameException');\n+        $decorator->render(array());\n+    }\n+}"
        },
        {
          "filename": "tests/ZendTest/Tag/Cloud/Decorator/HtmlTagTest.php",
          "status": "modified",
          "additions": 82,
          "deletions": 33,
          "patch": "@@ -10,9 +10,9 @@\n \n namespace ZendTest\\Tag\\Cloud\\Decorator;\n \n-use\tZend\\Tag,\n-    Zend\\Tag\\Cloud\\Decorator,\n-    Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException;\n+use\tZend\\Tag;\n+use Zend\\Tag\\Cloud\\Decorator;\n+use Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException;\n \n /**\n  * @category   Zend\n@@ -74,60 +74,40 @@ public function testEmptyClassList()\n     {\n         $decorator = new Decorator\\HtmlTag();\n \n-        try {\n-            $decorator->setClassList(array());\n-            $this->fail('An expected Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException was not raised');\n-        } catch (InvalidArgumentException $e) {\n-            $this->assertEquals($e->getMessage(), 'Classlist is empty');\n-        }\n+        $this->setExpectedException('Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException', 'Classlist is empty');\n+        $decorator->setClassList(array());\n     }\n \n     public function testInvalidClassList()\n     {\n         $decorator = new Decorator\\HtmlTag();\n \n-        try {\n-            $decorator->setClassList(array(array()));\n-            $this->fail('An expected Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException was not raised');\n-        } catch (InvalidArgumentException $e) {\n-            $this->assertEquals($e->getMessage(), 'Classlist contains an invalid classname');\n-        }\n+        $this->setExpectedException('Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException', 'Classlist contains an invalid classname');\n+        $decorator->setClassList(array(array()));\n     }\n \n     public function testInvalidFontSizeUnit()\n     {\n         $decorator = new Decorator\\HtmlTag();\n \n-        try {\n-            $decorator->setFontSizeUnit('foo');\n-            $this->fail('An expected Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException was not raised');\n-        } catch (InvalidArgumentException $e) {\n-            $this->assertEquals($e->getMessage(), 'Invalid fontsize unit specified');\n-        }\n+        $this->setExpectedException('Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException', 'Invalid fontsize unit specified');\n+        $decorator->setFontSizeUnit('foo');\n     }\n \n     public function testInvalidMinFontSize()\n     {\n         $decorator = new Decorator\\HtmlTag();\n \n-        try {\n-            $decorator->setMinFontSize('foo');\n-            $this->fail('An expected Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException was not raised');\n-        } catch (InvalidArgumentException $e) {\n-            $this->assertEquals($e->getMessage(), 'Fontsize must be numeric');\n-        }\n+        $this->setExpectedException('Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException', 'Fontsize must be numeric');\n+        $decorator->setMinFontSize('foo');\n     }\n \n     public function testInvalidMaxFontSize()\n     {\n         $decorator = new Decorator\\HtmlTag();\n \n-        try {\n-            $decorator->setMaxFontSize('foo');\n-            $this->fail('An expected Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException was not raised');\n-        } catch (InvalidArgumentException $e) {\n-            $this->assertEquals($e->getMessage(), 'Fontsize must be numeric');\n-        }\n+        $this->setExpectedException('Zend\\Tag\\Cloud\\Decorator\\Exception\\InvalidArgumentException', 'Fontsize must be numeric');\n+        $decorator->setMaxFontSize('foo');\n     }\n \n     public function testConstructorWithArray()\n@@ -173,4 +153,73 @@ protected function _getTagList()\n \n         return $list;\n     }\n+\n+    public function getTags()\n+    {\n+        $tags = new Tag\\ItemList();\n+        $tags[] = new Tag\\Item(array(\n+            'title' => 'tag',\n+            'weight' => 1,\n+            'params' => array(\n+                'url' => 'http://testing',\n+            ),\n+        ));\n+        return $tags;\n+    }\n+\n+    public function invalidHtmlElementProvider()\n+    {\n+        return array(\n+            array(array('_foo')),\n+            array(array('&foo')),\n+            array(array(' foo')),\n+            array(array(' foo')),\n+            array(array(\n+                '_foo' => array(),\n+            )),\n+        );\n+    }\n+\n+    /**\n+     * @dataProvider invalidHtmlElementProvider\n+     */\n+    public function testInvalidElementNamesRaiseAnException($tags)\n+    {\n+        $decorator = new Decorator\\HtmlTag();\n+        $decorator->setHTMLTags($tags);\n+        $this->setExpectedException('Zend\\Tag\\Exception\\InvalidElementNameException');\n+        $decorator->render($this->getTags());\n+    }\n+\n+    public function invalidAttributeProvider()\n+    {\n+        return array(\n+            array(array(\n+                'foo' => array(\n+                    '&bar' => 'baz',\n+                ),\n+            )),\n+            array(array(\n+                'foo' => array(\n+                    ':bar&baz' => 'bat',\n+                ),\n+            )),\n+            array(array(\n+                'foo' => array(\n+                    'bar/baz' => 'bat',\n+                ),\n+            )),\n+        );\n+    }\n+\n+    /**\n+     * @dataProvider invalidAttributeProvider\n+     */\n+    public function testInvalidAttributesRaiseAnException($tags)\n+    {\n+        $decorator = new Decorator\\HtmlTag();\n+        $decorator->setHTMLTags($tags);\n+        $this->setExpectedException('Zend\\Tag\\Exception\\InvalidAttributeNameException');\n+        $decorator->render($this->getTags());\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 5,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 14,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8cc99f76ccdcbe1b2a2b0df4ce55515f3dbac9e1",
            "date": "2019-05-22T18:32:49Z",
            "author_login": "Xerkus"
          },
          {
            "sha": "9fc097b4345a260f40032f4de12b49295c6af78a",
            "date": "2019-03-15T14:07:45Z",
            "author_login": "weierophinney"
          },
          {
            "sha": "1ca9f36698b5e9e5ffb1af3898e69d94fc4ebf33",
            "date": "2016-06-28T12:48:58Z",
            "author_login": "weierophinney"
          },
          {
            "sha": "4f1dfd6ac7ee32c4d5a7874064b45ad69924795f",
            "date": "2016-06-28T12:48:47Z",
            "author_login": "weierophinney"
          },
          {
            "sha": "7fb89c778508c3969b04d478c6f02a5a54e3bbd2",
            "date": "2016-06-28T12:44:22Z",
            "author_login": "weierophinney"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Multiple cross-site scripting (XSS) vulnerabilities in Zend Framework 2.0.x before 2.0.1 allow remote attackers to inject arbitrary web script or HTML via unspecified input to (1) Debug, (2) Feed\\PubSubHubbub, (3) Log\\Formatter\\Xml, (4) Tag\\Cloud\\Decorator, (5) Uri, (6) View\\Helper\\HeadStyle, (7) View\\Helper\\Navigation\\Sitemap, or (8) View\\Helper\\Placeholder\\Container\\AbstractStandalone, related to Escaper.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-01-03T17:15:11.053",
    "last_modified": "2024-11-21T01:42:55.480",
    "fix_date": "2012-09-20T20:22:57Z"
  },
  "references": [
    {
      "url": "http://framework.zend.com/security/advisory/ZF2012-03",
      "source": "secalert@redhat.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2012/q3/571",
      "source": "secalert@redhat.com",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2012/q3/573",
      "source": "secalert@redhat.com",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/55636",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=688946#10",
      "source": "secalert@redhat.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.gentoo.org/show_bug.cgi?id=436210",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=860738",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zendframework/zf2/commit/27131ca9520bdf1d4c774c71459eba32f2b10733",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://framework.zend.com/security/advisory/ZF2012-03",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2012/q3/571",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2012/q3/573",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/55636",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=688946#10",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.gentoo.org/show_bug.cgi?id=436210",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=860738",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zendframework/zf2/commit/27131ca9520bdf1d4c774c71459eba32f2b10733",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:37.456521",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "zendframework",
    "owner": "zendframework",
    "created_at": "2010-06-04T02:42:05Z",
    "updated_at": "2025-01-09T20:32:52Z",
    "pushed_at": "2019-05-22T18:35:44Z",
    "size": 98962,
    "stars": 5493,
    "forks": 2535,
    "open_issues": 19,
    "watchers": 5493,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {},
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T17:59:30.608190"
  }
}