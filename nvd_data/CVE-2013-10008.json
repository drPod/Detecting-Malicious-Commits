{
  "cve_id": "CVE-2013-10008",
  "github_data": {
    "repository": "sheilazpy/eShop",
    "fix_commit": "e096c5849c4dc09e1074104531014a62a5413884",
    "related_commits": [
      "e096c5849c4dc09e1074104531014a62a5413884",
      "e096c5849c4dc09e1074104531014a62a5413884"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "e096c5849c4dc09e1074104531014a62a5413884",
      "commit_date": "2013-01-13T19:31:02Z",
      "author": {
        "login": "zhgzhg",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "some sql injection vulnerabilities fixes",
        "length": 134,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 33638,
        "additions": 29606,
        "deletions": 4032
      },
      "files": [
        {
          "filename": "eShop/.metadata/.log",
          "status": "modified",
          "additions": 233,
          "deletions": 0,
          "patch": "@@ -3650,3 +3650,236 @@ java.lang.NullPointerException: Cannot set a null prefix table\n \tat org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:549)\n \tat org.eclipse.equinox.launcher.Main.basicRun(Main.java:504)\n \tat org.eclipse.equinox.launcher.Main.run(Main.java:1236)\n+!SESSION 2013-01-13 17:51:13.371 -----------------------------------------------\n+eclipse.buildId=unknown\n+java.version=1.5.0_12\n+java.vendor=Sun Microsystems Inc.\n+BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=bg_BG\n+Command-line arguments:  -os win32 -ws win32 -arch x86\n+\n+!ENTRY org.eclipse.ui.workbench 2 0 2013-01-13 17:56:29.885\n+!MESSAGE A handler conflict occurred.  This may disable some commands.\n+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 17:56:29.885\n+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6':\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForEmail),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForEmail),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)\n+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 17:56:29.885\n+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2':\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForBlogger),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForBlogger),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)\n+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 17:56:29.885\n+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4':\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForWiki),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForWiki),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)\n+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 17:56:29.885\n+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5':\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScript),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScript),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@180e7a4),sourcePriority=16384)\n+\n+!ENTRY org.eclipse.ui.workbench 4 0 2013-01-13 20:22:29.167\n+!MESSAGE Cannot set a null prefix table\n+!STACK 0\n+java.lang.NullPointerException: Cannot set a null prefix table\n+\tat org.eclipse.jface.bindings.CachedBindingSet.setPrefixTable(CachedBindingSet.java:346)\n+\tat org.eclipse.jface.bindings.BindingManager.recomputeBindings(BindingManager.java:1765)\n+\tat org.eclipse.jface.bindings.BindingManager.contextManagerChanged(BindingManager.java:689)\n+\tat org.eclipse.core.commands.contexts.ContextManager.fireContextManagerChanged(ContextManager.java:152)\n+\tat org.eclipse.core.commands.contexts.ContextManager.removeActiveContext(ContextManager.java:232)\n+\tat org.eclipse.ui.internal.contexts.ContextAuthority.updateContext(ContextAuthority.java:767)\n+\tat org.eclipse.ui.internal.contexts.ContextAuthority.deactivateContext(ContextAuthority.java:362)\n+\tat org.eclipse.ui.internal.contexts.ContextService.deactivateContext(ContextService.java:140)\n+\tat org.eclipse.ui.internal.contexts.ContextService.deactivateContexts(ContextService.java:154)\n+\tat org.eclipse.ui.internal.contexts.SlaveContextService.dispose(SlaveContextService.java:240)\n+\tat org.eclipse.ui.internal.services.ServiceLocator.dispose(ServiceLocator.java:142)\n+\tat org.eclipse.ui.internal.WorkbenchWindow.hardClose(WorkbenchWindow.java:1627)\n+\tat org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:722)\n+\tat org.eclipse.ui.internal.WorkbenchWindow.access$0(WorkbenchWindow.java:698)\n+\tat org.eclipse.ui.internal.WorkbenchWindow$3.run(WorkbenchWindow.java:814)\n+\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)\n+\tat org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:812)\n+\tat org.eclipse.jface.window.WindowManager.close(WindowManager.java:109)\n+\tat org.eclipse.ui.internal.Workbench$16.run(Workbench.java:912)\n+\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n+\tat org.eclipse.ui.internal.Workbench.busyClose(Workbench.java:909)\n+\tat org.eclipse.ui.internal.Workbench.access$15(Workbench.java:838)\n+\tat org.eclipse.ui.internal.Workbench$23.run(Workbench.java:1082)\n+\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)\n+\tat org.eclipse.ui.internal.Workbench.close(Workbench.java:1080)\n+\tat org.eclipse.ui.internal.Workbench.restart(Workbench.java:2054)\n+\tat org.eclipse.ui.internal.ide.actions.OpenWorkspaceAction.restart(OpenWorkspaceAction.java:237)\n+\tat org.eclipse.ui.internal.ide.actions.OpenWorkspaceAction.access$0(OpenWorkspaceAction.java:229)\n+\tat org.eclipse.ui.internal.ide.actions.OpenWorkspaceAction$WorkspaceMRUAction.run(OpenWorkspaceAction.java:94)\n+\tat org.eclipse.jface.action.Action.runWithEvent(Action.java:498)\n+\tat org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:583)\n+\tat org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:500)\n+\tat org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:411)\n+\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)\n+\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1003)\n+\tat org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:3823)\n+\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3422)\n+\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2382)\n+\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2346)\n+\tat org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2198)\n+\tat org.eclipse.ui.internal.Workbench$5.run(Workbench.java:493)\n+\tat org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:288)\n+\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:488)\n+\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)\n+\tat org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)\n+\tat org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:193)\n+\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)\n+\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)\n+\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:386)\n+\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)\n+\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n+\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n+\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n+\tat java.lang.reflect.Method.invoke(Method.java:585)\n+\tat org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:549)\n+\tat org.eclipse.equinox.launcher.Main.basicRun(Main.java:504)\n+\tat org.eclipse.equinox.launcher.Main.run(Main.java:1236)\n+!SESSION 2013-01-13 20:54:10.803 -----------------------------------------------\n+eclipse.buildId=unknown\n+java.version=1.5.0_12\n+java.vendor=Sun Microsystems Inc.\n+BootLoader constants: OS=win32, ARCH=x86, WS=win32, NL=bg_BG\n+Command-line arguments:  -os win32 -ws win32 -arch x86 -data D:\\Drugi\\Docs\\PU\\3 kurs\\2 trimestur\\Kursov Proekt 2\\eShop\\\n+\n+!ENTRY org.eclipse.ui.workbench 2 0 2013-01-13 20:56:01.828\n+!MESSAGE A handler conflict occurred.  This may disable some commands.\n+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 20:56:01.828\n+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6':\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForEmail),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action6,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForEmail),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)\n+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 20:56:01.828\n+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2':\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForBlogger),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action2,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForBlogger),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)\n+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 20:56:01.828\n+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4':\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForWiki),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action4,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScriptForWiki),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)\n+!SUBENTRY 1 org.eclipse.ui.workbench 2 0 2013-01-13 20:56:01.828\n+!MESSAGE Conflict for 'AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5':\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScript),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)\n+HandlerActivation(commandId=AUTOGEN:::org.eclipse.eclipsemonkey.emFileContextMenu/org.eclipse.eclipsemonkey.action5,\n+\thandler=ActionDelegateHandlerProxy(null,org.eclipse.eclipsemonkey.actions.PublishScript),\n+\texpression=WorkbenchWindowExpression(org.eclipse.ui.internal.WorkbenchWindow@88a970),sourcePriority=16384)\n+\n+!ENTRY org.eclipse.ui.workbench 4 0 2013-01-13 21:27:29.686\n+!MESSAGE Cannot set a null prefix table\n+!STACK 0\n+java.lang.NullPointerException: Cannot set a null prefix table\n+\tat org.eclipse.jface.bindings.CachedBindingSet.setPrefixTable(CachedBindingSet.java:346)\n+\tat org.eclipse.jface.bindings.BindingManager.recomputeBindings(BindingManager.java:1765)\n+\tat org.eclipse.jface.bindings.BindingManager.contextManagerChanged(BindingManager.java:689)\n+\tat org.eclipse.core.commands.contexts.ContextManager.fireContextManagerChanged(ContextManager.java:152)\n+\tat org.eclipse.core.commands.contexts.ContextManager.removeActiveContext(ContextManager.java:232)\n+\tat org.eclipse.ui.internal.contexts.ContextAuthority.updateContext(ContextAuthority.java:767)\n+\tat org.eclipse.ui.internal.contexts.ContextAuthority.deactivateContext(ContextAuthority.java:362)\n+\tat org.eclipse.ui.internal.contexts.ContextService.deactivateContext(ContextService.java:140)\n+\tat org.eclipse.ui.internal.contexts.ContextService.deactivateContexts(ContextService.java:154)\n+\tat org.eclipse.ui.internal.contexts.SlaveContextService.dispose(SlaveContextService.java:240)\n+\tat org.eclipse.ui.internal.services.ServiceLocator.dispose(ServiceLocator.java:142)\n+\tat org.eclipse.ui.internal.WorkbenchWindow.hardClose(WorkbenchWindow.java:1627)\n+\tat org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:722)\n+\tat org.eclipse.ui.internal.WorkbenchWindow.access$0(WorkbenchWindow.java:698)\n+\tat org.eclipse.ui.internal.WorkbenchWindow$3.run(WorkbenchWindow.java:814)\n+\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)\n+\tat org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:812)\n+\tat org.eclipse.jface.window.WindowManager.close(WindowManager.java:109)\n+\tat org.eclipse.ui.internal.Workbench$16.run(Workbench.java:912)\n+\tat org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:37)\n+\tat org.eclipse.ui.internal.Workbench.busyClose(Workbench.java:909)\n+\tat org.eclipse.ui.internal.Workbench.access$15(Workbench.java:838)\n+\tat org.eclipse.ui.internal.Workbench$23.run(Workbench.java:1082)\n+\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)\n+\tat org.eclipse.ui.internal.Workbench.close(Workbench.java:1080)\n+\tat org.eclipse.ui.internal.Workbench.close(Workbench.java:1052)\n+\tat org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:719)\n+\tat org.eclipse.ui.internal.WorkbenchWindow.access$0(WorkbenchWindow.java:698)\n+\tat org.eclipse.ui.internal.WorkbenchWindow$3.run(WorkbenchWindow.java:814)\n+\tat org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)\n+\tat org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:812)\n+\tat org.eclipse.jface.window.Window.handleShellCloseEvent(Window.java:741)\n+\tat org.eclipse.jface.window.Window$3.shellClosed(Window.java:687)\n+\tat org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:92)\n+\tat org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)\n+\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1003)\n+\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1027)\n+\tat org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1012)\n+\tat org.eclipse.swt.widgets.Decorations.closeWidget(Decorations.java:307)\n+\tat org.eclipse.swt.widgets.Decorations.WM_CLOSE(Decorations.java:1643)\n+\tat org.eclipse.swt.widgets.Control.windowProc(Control.java:3789)\n+\tat org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:337)\n+\tat org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1576)\n+\tat org.eclipse.swt.widgets.Shell.windowProc(Shell.java:1937)\n+\tat org.eclipse.swt.widgets.Display.windowProc(Display.java:4528)\n+\tat org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)\n+\tat org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2366)\n+\tat org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:477)\n+\tat org.eclipse.swt.widgets.Control.windowProc(Control.java:3877)\n+\tat org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:337)\n+\tat org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1576)\n+\tat org.eclipse.swt.widgets.Shell.windowProc(Shell.java:1937)\n+\tat org.eclipse.swt.widgets.Display.windowProc(Display.java:4528)\n+\tat org.eclipse.swt.internal.win32.OS.DefWindowProcW(Native Method)\n+\tat org.eclipse.swt.internal.win32.OS.DefWindowProc(OS.java:2366)\n+\tat org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:477)\n+\tat org.eclipse.swt.widgets.Control.windowProc(Control.java:3877)\n+\tat org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:337)\n+\tat org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1576)\n+\tat org.eclipse.swt.widgets.Shell.windowProc(Shell.java:1937)\n+\tat org.eclipse.swt.widgets.Display.windowProc(Display.java:4528)\n+\tat org.eclipse.swt.internal.win32.OS.DispatchMessageW(Native Method)\n+\tat org.eclipse.swt.internal.win32.OS.DispatchMessage(OS.java:2371)\n+\tat org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3420)\n+\tat org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2382)\n+\tat org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2346)\n+\tat org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2198)\n+\tat org.eclipse.ui.internal.Workbench$5.run(Workbench.java:493)\n+\tat org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:288)\n+\tat org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:488)\n+\tat org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)\n+\tat org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:113)\n+\tat org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:193)\n+\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)\n+\tat org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)\n+\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:386)\n+\tat org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)\n+\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n+\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n+\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n+\tat java.lang.reflect.Method.invoke(Method.java:585)\n+\tat org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:549)\n+\tat org.eclipse.equinox.launcher.Main.basicRun(Main.java:504)\n+\tat org.eclipse.equinox.launcher.Main.run(Main.java:1236)"
        },
        {
          "filename": "eShop/.metadata/.mylyn/.tasks.xml.zip",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.mylyn/monitor-log.xml",
          "status": "modified",
          "additions": 10010,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.mylyn/tasks.xml.zip",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/net.sourceforge.eclipseccase/statecache16",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/0/00732ff1a25d00121890bdcc27f78f62",
          "status": "added",
          "additions": 524,
          "deletions": 0,
          "patch": "@@ -0,0 +1,524 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+import java.lang.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeParameterizedQuery(String query, Object[] parameters) {\n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\t//TODO...\n+\t\t// boolean - ok\n+\t\t// String  - ok\n+\t\t// char    - \n+\t\t// byte    -\n+\t\t// short   -\n+\t\t// int     -\n+\t\t// long    -\n+\t\t// double  -\n+\t\t// float   -\n+\t\t// Date    -\n+\t\t// null ???\n+\t\t\n+\t\ttry {\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i, parameters[i]);\n+\t\t\t\t\n+\t\t\t\t/*if (parameters[i] instanceof Boolean) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof String) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setString(i, ((String)parameters[i].toString()));\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof Character) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.set\n+\t\t\t\t}*/\n+\t\t\t}\n+\t\t\t\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/12/f0aff560a45d00121890bdcc27f78f62",
          "status": "renamed",
          "additions": 137,
          "deletions": 10,
          "patch": "@@ -4,6 +4,7 @@ import java.awt.Dimension;\n import java.awt.EventQueue;\n import java.awt.FlowLayout;\n import java.awt.GridLayout;\n+import java.awt.Insets;\n import java.awt.event.WindowAdapter;\n import java.awt.event.WindowEvent;\n import java.awt.event.WindowListener;\n@@ -32,6 +33,7 @@ import com.jgoodies.forms.layout.ColumnSpec;\n import com.jgoodies.forms.layout.FormLayout;\n import com.jgoodies.forms.layout.RowSpec;\n \n+\n public class mainWindow extends JFrame {\n \n \tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n@@ -45,9 +47,17 @@ public class mainWindow extends JFrame {\n \t\n \tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n \tprivate final JPanel mainWindowStatusPanel = new JPanel();\n-\tprivate final JPanel panel = new JPanel();\n \tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n \tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n \t/**\n \t * Launch the application\n \t * @param args\n@@ -110,17 +120,36 @@ public class mainWindow extends JFrame {\n \t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\tOperations.setEnabled(false);\n \t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n \t\tmainWindowMenu.add(Help);\n \t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\t\n \t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n \t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\t\n \t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n \t\tmainWindowStatusPanel.setLayout(new FormLayout(\n \t\t\tnew ColumnSpec[] {\n \t\t\t\tColumnSpec.decode(\"149dlu\"),\n \t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n \t\t\t\tFormFactory.DEFAULT_COLSPEC},\n \t\t\tnew RowSpec[] {\n \t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n@@ -132,9 +161,24 @@ public class mainWindow extends JFrame {\n \t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n \t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n \t\t\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n \t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n-\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\tmainWindowStatusPanelSetEnabled(false);\n \t}\n \t\n@@ -170,11 +214,41 @@ public class mainWindow extends JFrame {\n \t\t\tfileDisconnectFromDb_actionPerformed(e);\n \t\t}\n \t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n \tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n \t\tpublic void actionPerformed(ActionEvent e) {\n \t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n \t\t}\n \t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n \n \tprotected void this_windowClosing(WindowEvent e) {\n \t\t\n@@ -184,8 +258,7 @@ public class mainWindow extends JFrame {\n \t\t\t\n \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n \t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n \t\t\t}\n \t\t}\n \t\tthis.dispose();\n@@ -194,14 +267,13 @@ public class mainWindow extends JFrame {\n \t\n \tprotected void fileExit_actionPerformed(ActionEvent e) {\n \n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n \t}\n \t\n \t////////////////////////////////////////////////////////////////////////\n \t\n \tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n \t\t\n-\t\t//databaseConnectWindow.main(null);\n \t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n \t\tdcw.setVisible(true);\n \t\tdcw.addWindowListener(databaseConnectWindowClosing);\n@@ -234,18 +306,20 @@ public class mainWindow extends JFrame {\n \t\t\n \t\tif (databaseConnectWindow.dbPortal != null) {\n \t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n \t\t\t\n \t\t\tthis.FileConnectToDb.setEnabled(true);\n \t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n \t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\t\t\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n \t\t}\n \t}\n \t\n \t////////////////////////////////////////////////////////////////////////\n \t\n-\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n \t\t\n \t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n \t\toul.setVisible(true);\n@@ -266,7 +340,60 @@ public class mainWindow extends JFrame {\n \t\t\t}\n \t\t}\n \t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n+\t}\n+\t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n \t\n \t////////////////////////////////////////////////////////////////////////\n \t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n+\t\n }"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/18/10bfa35fa55d00121890bdcc27f78f62",
          "status": "added",
          "additions": 523,
          "deletions": 0,
          "patch": "@@ -0,0 +1,523 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeParameterizedNonQuery(String query, Object[] parameters) {\n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\t//TODO...\n+\t\t// boolean - ok\n+\t\t// String  - ok\n+\t\t// char    - \n+\t\t// byte    -\n+\t\t// short   -\n+\t\t// int     -\n+\t\t// long    -\n+\t\t// double  -\n+\t\t// float   -\n+\t\t// Date    -\n+\t\t// null ???\n+\t\t\n+\t\ttry {\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i, parameters[i]);\n+\t\t\t\t\n+\t\t\t\t/*if (parameters[i] instanceof Boolean) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof String) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setString(i, ((String)parameters[i].toString()));\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof Character) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.set\n+\t\t\t\t}*/\n+\t\t\t}\n+\t\t\t\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/1b/10ee494fb45c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 62,
          "patch": "@@ -1,62 +0,0 @@\n-import java.awt.EventQueue;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPanel;\n-import javax.swing.WindowConstants;\n-import javax.swing.border.EtchedBorder;\n-import javax.swing.border.TitledBorder;\n-\n-\n-public class operatorUserLogin extends JFrame {\n-\n-\tprivate final JPanel groupLoginPanel = new JPanel();\n-\tprivate final JPanel groupCreateNewUserPanel = new JPanel();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\toperatorUserLogin frame = new operatorUserLogin();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic operatorUserLogin() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 518, 269);\n-\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\tgetContentPane().setLayout(null);\n-\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"operatorLogin\");\n-\t\tsetResizable(false);\n-\t\tsetAlwaysOnTop(true);\n-\t\t\n-\t\tgetContentPane().add(groupLoginPanel);\n-\t\tgroupLoginPanel.setBorder(new TitledBorder(null, \"\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n-\t\tgroupLoginPanel.setBounds(10, 10, 243, 213);\n-\t\t\n-\t\tgetContentPane().add(groupCreateNewUserPanel);\n-\t\tgroupCreateNewUserPanel.setBorder(new TitledBorder(null, \"\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n-\t\tgroupCreateNewUserPanel.setBounds(263, 10, 243, 213);\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/1c/b065388fff5c00121f22d5fb8a5d79d9",
          "status": "removed",
          "additions": 0,
          "deletions": 109,
          "patch": "@@ -1,109 +0,0 @@\n-import java.awt.EventQueue;\n-import javax.swing.JButton;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPasswordField;\n-import javax.swing.JTextField;\n-\n-import database_management.MySQLdbManager;\n-import md5_calculator.Md5hashcalc;\n-\n-public class operatorUserSettingsWindow extends JFrame {\n-\n-\tprivate final JLabel usernameLabel = new JLabel();\n-\tprivate final JLabel passwordLabel = new JLabel();\n-\tprivate final JLabel passwordAgainLabel = new JLabel();\n-\tprivate final JLabel nameLabel = new JLabel();\n-\tprivate final JLabel lastNameLabel = new JLabel();\n-\tprivate final JButton updateButton = new JButton();\n-\tprivate final JTextField firstNameTextField = new JTextField();\n-\tprivate final JTextField lastNameTextField = new JTextField();\n-\tprivate final JPasswordField passwordPasswordField = new JPasswordField();\n-\tprivate final JPasswordField passwordAgainPasswordField = new JPasswordField();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\toperatorUserSettingsWindow frame = new operatorUserSettingsWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic operatorUserSettingsWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 314, 214);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\tgetContentPane().setLayout(null);\n-\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"operatorUserSettings\");\n-\t\t\n-\t\tgetContentPane().add(usernameLabel);\n-\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tusernameLabel.setBounds(10, 0, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordLabel);\n-\t\tpasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordLabel.setBounds(10, 76, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordAgainLabel);\n-\t\tpasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordAgainLabel.setBounds(10, 95, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(nameLabel);\n-\t\tnameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n-\t\tnameLabel.setBounds(10, 32, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(lastNameLabel);\n-\t\tlastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlastNameLabel.setBounds(10, 54, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(updateButton);\n-\t\tupdateButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tupdateButton.setBounds(93, 140, 106, 26);\n-\t\t\n-\t\tgetContentPane().add(firstNameTextField);\n-\t\tfirstNameTextField.setBounds(113, 30, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(lastNameTextField);\n-\t\tlastNameTextField.setBounds(113, 52, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordPasswordField);\n-\t\tpasswordPasswordField.setBounds(113, 74, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordAgainPasswordField);\n-\t\tpasswordAgainPasswordField.setBounds(113, 97, 175, 20);\n-\t\t\n-\t\tgetCurrentUserData();\n-\t}\n-\t\n-\tprivate void getCurrentUserData() {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (databaseConnectWindow.dbPortal.isConnected() == false) {\n-\t\t\treturn;\n-\t\t}\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/1f/200b7592a45d00121890bdcc27f78f62",
          "status": "renamed",
          "additions": 60,
          "deletions": 51,
          "patch": "@@ -3,15 +3,16 @@ import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n import java.awt.event.WindowEvent;\n \n-import javax.swing.JButton;\n-\n import javax.swing.JFrame;\n import javax.swing.JLabel;\n import javax.swing.JPasswordField;\n import javax.swing.JTextField;\n+import javax.swing.WindowConstants;\n+import javax.swing.JButton;\n import javax.swing.JOptionPane;\n \n import database_management.MySQLdbManager;\n+import md5_calculator.Md5hashcalc;\n \n public class databaseConnectWindow extends JFrame {\n \n@@ -33,7 +34,7 @@ public class databaseConnectWindow extends JFrame {\n \t * @param args\n \t */\n \tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n+\t\tEventQueue.invokeLater(new Runnable() { \n \t\t\tpublic void run() {\n \t\t\t\ttry {\n \t\t\t\t\tdatabaseConnectWindow frame = new databaseConnectWindow();\n@@ -42,7 +43,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\t\t\te.printStackTrace();\n \t\t\t\t}\n \t\t\t}\n-\t\t});\n+\t\t});\t\t\n \t}\n \n \t/**\n@@ -51,7 +52,7 @@ public class databaseConnectWindow extends JFrame {\n \tpublic databaseConnectWindow() {\n \t\tsuper();\n \t\tsetBounds(100, 100, 384, 203);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n \t\ttry {\n \t\t\tjbInit();\n \t\t} catch (Throwable e) {\n@@ -115,6 +116,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\tconnectToDatabaseButton_actionPerformed(e);\n \t\t}\n \t}\n+\n \tprotected void connectToDatabaseButton_actionPerformed(ActionEvent e) {\n \t\t\n \t\tString password = \"\";\n@@ -136,7 +138,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\tdbPortal.disconnect(); //just in case\n \t\t\t\n \t\t\tif (dbPortal.connect() == false) { //connection settings problem or not running MySQL server\n-\t\t\t\tdbPortal.finallize();\n+\t\t\t\tdbPortal.finalize();\n \t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n \t\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n \t\t\t\t\n@@ -152,11 +154,11 @@ public class databaseConnectWindow extends JFrame {\n \t\t\t\t\tif (createNewDatabaseAndTables() == false) { //in case of fail do not close this window\n \t\t\t\t\t\t\n \t\t\t\t\t\treturn;\n-\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\n-\t\t\t\t\tdbPortal.finallize();\n+\t\t\t\t\tdbPortal.finalize();\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t\t\n@@ -171,72 +173,79 @@ public class databaseConnectWindow extends JFrame {\n \t\t\n \t\tif (dbPortal.connect() == false) {\n \t\t\t\n-\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (1)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n \t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n-\t\t\tdbPortal.finallize();\n+\t\t\tdbPortal.finalize();\n \t\t\treturn false;\n \t\t}\n \t\t\n-\t\tif (dbPortal.executeNonQuery(\"CREATE DATABASE \" + mysqlDatabaseNameTextField.getText()) != 1) {\n+\t\t//FIXME prone??? to sql injection maybe??\n+\t\t\n+\t\tif (dbPortal.executeNonQuery(\"CREATE DATABASE \" + mysqlDatabaseNameTextField.getText() + \" COLLATE utf8_general_ci\") != 1) {\n \t\t\t\n \t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n-\t\t\tdbPortal.disconnect();\n-\t\t\tdbPortal.finallize();\n+\t\t\tdbPortal.finalize();\n \t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\", \n \t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n \t\t\treturn false;\n \t\t}\n \t\t\n-\t\tif (dbPortal.executeNonQuery(\"CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key,\" + \n-\t\t\t\t\"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(20) NOT NULL,\" + \n-\t\t\t\t\"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)\") != 1) {\n+\t\tdbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());\n+\t\tdbPortal.disconnect();\n+\t\t\n+\t\tif (dbPortal.connect() == false) { //false positive for database creation\n \t\t\t\n-\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n \t\t\tdbPortal.disconnect();\n-\t\t\tdbPortal.finallize();\n-\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\",\n-\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\n+\t\t\tif (dbPortal.connect()) {\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t}\t\t\t\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (2)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n \t\t\treturn false;\n \t\t}\n \t\t\n-\t\tif (dbPortal.executeNonQuery(\"CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL,\" + \n+\t\t\t\t\"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)\");\n+\t\t\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key,\" + \n \t\t\t\t\"order_time datetime NOT NULL, order_operator_id int NOT NULL,\" +\n-\t\t\t\t\"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)\") != 1) {\n-\t\t\t\n-\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n-\t\t\tdbPortal.disconnect();\n-\t\t\tdbPortal.finallize();\n-\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\",\n-\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n-\t\t\treturn false;\n-\t\t}\n+\t\t\t\t\"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n \n-\t\tif (dbPortal.executeNonQuery(\"CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key,\" + \n-\t\t\t\t\"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,\tproduct_price decimal(10,2) NOT NULL)\") != 1) {\n-\t\t\t\n-\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n-\t\t\tdbPortal.disconnect();\n-\t\t\tdbPortal.finallize();\n-\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\",\n-\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n-\t\t\treturn false;\n-\t\t}\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,\tproduct_price decimal(10,2) NOT NULL)\");\n \n-\t\tif (dbPortal.executeNonQuery(\"CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key,\" + \n \t\t\t\t\"order_detail_order_id int NOT NULL, order_detail_product_id int NOT NULL, \" +\n \t\t\t\t\"order_detail_product_quantity int NOT NULL,\" +\n \t\t\t\t\"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE,\" +\n-\t\t\t\t\"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)\") != 1) {\n-\t\t\t\n-\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n-\t\t\tdbPortal.disconnect();\n-\t\t\tdbPortal.finallize();\n-\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\",\n-\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n-\t\t\treturn false;\n+\t\t\t\t\"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n+\t\t\n+\t\t/* for testing only; not needed any more\n+\t\ttry {\n+\t\t\tif (dbPortal.executeNonQuery(\"INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)\" + \n+\t\t\t\t\t\" VALUES ('operator1', '\" + Md5hashcalc.calculateMD5hash(\"operator1\")  + \"', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd')\") != 1) {\n+\t\t\t\t\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t\tdbPortal.finallize();\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\n+\t\t\t\treturn false;\n+\t\t\t}\n \t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd MD5!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\tSystem.exit(-1);\n+\t\t}*/\n \t\t\n \t\treturn true;\n-\t}\n-\n+\t}\t\n }"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/1f/70700e07a55d00121890bdcc27f78f62",
          "status": "added",
          "additions": 326,
          "deletions": 0,
          "patch": "@@ -0,0 +1,326 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.JButton;\n+import javax.swing.WindowConstants;\n+import javax.swing.border.TitledBorder;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserLoginWindow extends JFrame {\n+\n+\tprivate final JPanel groupLoginPanel = new JPanel();\n+\tprivate final JPanel groupCreateNewUserPanel = new JPanel();\n+\tprivate final JLabel loginUsernameLabel = new JLabel();\n+\tprivate final JLabel loginPasswordLabel = new JLabel();\n+\tprivate final JButton loginButton = new JButton();\n+\tprivate final JTextField loginUsernameTextField = new JTextField();\n+\tprivate final JPasswordField loginPasswordPasswordField = new JPasswordField();\n+\tprivate final JLabel newUsernameLabel = new JLabel();\n+\tprivate final JLabel newPasswordLabel = new JLabel();\n+\tprivate final JLabel newUserFirstNameLabel = new JLabel();\n+\tprivate final JLabel newUserLastNameLabel = new JLabel();\n+\tprivate final JButton createNewOperatorButton = new JButton();\n+\tprivate final JTextField newUsernameTextField = new JTextField();\n+\tprivate final JTextField newFirstNameTextField = new JTextField();\n+\tprivate final JPasswordField newPasswordPasswordField = new JPasswordField();\n+\tprivate final JTextField newLastNameTextField = new JTextField();\n+\t\n+\tpublic static int loggedUserId = -1;\n+\tpublic static String loggedUserNames = \"\";\n+\t\n+\tprivate final JLabel newPasswordAgainLabel = new JLabel();\n+\tprivate final JPasswordField newPasswordPasswordAgainField = new JPasswordField();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserLoginWindow frame = new operatorUserLoginWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserLoginWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 518, 242);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorLoginWindow\");\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\t\n+\t\tgetContentPane().add(groupLoginPanel);\n+\t\tgroupLoginPanel.setLayout(null);\n+\t\tgroupLoginPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupLoginPanel.setBounds(10, 10, 243, 133);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameLabel);\n+\t\tloginUsernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginUsernameLabel.setBounds(10, 31, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordLabel);\n+\t\tloginPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginPasswordLabel.setBounds(10, 53, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginButton);\n+\t\tloginButton.addActionListener(new LoginButtonActionListener());\n+\t\tloginButton.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tloginButton.setBounds(127, 93, 106, 26);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameTextField);\n+\t\tloginUsernameTextField.setBounds(96, 29, 137, 20);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordPasswordField);\n+\t\tloginPasswordPasswordField.setBounds(96, 51, 137, 20);\n+\t\t\n+\t\tgetContentPane().add(groupCreateNewUserPanel);\n+\t\tgroupCreateNewUserPanel.setLayout(null);\n+\t\tgroupCreateNewUserPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupCreateNewUserPanel.setBounds(259, 10, 243, 194);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameLabel);\n+\t\tnewUsernameLabel.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUsernameLabel.setBounds(10, 32, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordLabel);\n+\t\tnewPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordLabel.setBounds(10, 54, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserFirstNameLabel);\n+\t\tnewUserFirstNameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnewUserFirstNameLabel.setBounds(10, 98, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserLastNameLabel);\n+\t\tnewUserLastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUserLastNameLabel.setBounds(10, 120, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(createNewOperatorButton);\n+\t\tcreateNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());\n+\t\tcreateNewOperatorButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tcreateNewOperatorButton.setBounds(127, 158, 106, 26);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameTextField);\n+\t\tnewUsernameTextField.setBounds(111, 30, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newFirstNameTextField);\n+\t\tnewFirstNameTextField.setBounds(111, 96, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordField);\n+\t\tnewPasswordPasswordField.setBounds(111, 52, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newLastNameTextField);\n+\t\tnewLastNameTextField.setBounds(111, 118, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordAgainLabel);\n+\t\tnewPasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordAgainLabel.setBounds(10, 76, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordAgainField);\n+\t\tnewPasswordPasswordAgainField.setBounds(111, 75, 122, 20);\n+\t}\n+\tprivate class LoginButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tloginButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class CreateNewOperatorButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tcreateNewOperatorButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\t\n+\tprotected void loginButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tString password = \"\";\n+\t\t\t\t\n+\t\t\t\tchar[] pass = loginPasswordPasswordField.getPassword();\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\n+\t\t\t\tResultSet rs = null;\n+\t\t\t\t\n+\t\t\t\ttry {\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\trs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE\" + \n+\t\t\t\t\t\t\" operator_username='\" + loginUsernameTextField.getText() + \"' AND operator_password='\" +\n+\t\t\t\t\t\tMd5hashcalc.calculateMD5hash(password) + \"'\");\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (rs != null) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tloggedUserId = rs.getInt(1);\n+\t\t\t\t\t\tloggedUserNames = rs.getString(2) + \" \" + rs.getString(3);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\t\t\n+\t}\n+\t\n+\tprotected void createNewOperatorButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tchar[] pass = newPasswordPasswordField.getPassword();\n+\t\t\t\tString password = \"\";\n+\t\t\t\tString encryptedPassword = \"\";\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tchar[] pass2 = newPasswordPasswordAgainField.getPassword();\n+\t\t\t\t\n+\t\t\t\tif (pass.length == pass2.length) {\n+\t\t\t\t\n+\t\t\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tif (pass[i] != pass2[i]) {\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\t\t\t\t\n+\t\t\t\tif ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && \n+\t\t\t\t\t\t(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tencryptedPassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT COUNT(*) FROM operators WHERE operator_username='\" +\n+\t\t\t\t\t\t\tnewUsernameTextField.getText() + \"'\");\n+\t\t\t\t\t\n+\t\t\t\t\tint usersCount = 0;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tusersCount = rs.getInt(1);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\t\t\t\t\t\t\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\tif ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {\t\t\t\t\t\t\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t//no such existing username so now we create it\n+\t\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"INSERT INTO operators(operator_username, operator_password, \" +\n+\t\t\t\t\t\t\t\t\"operator_first_name, operator_last_name) VALUES('\" + newUsernameTextField.getText() + \"', '\" +\n+\t\t\t\t\t\t\t\tencryptedPassword + \"', '\" + newFirstNameTextField.getText() + \"', '\" + newLastNameTextField.getText() + \"')\") != 1) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse { //everything ok so login now\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tloginUsernameTextField.setText(newUsernameTextField.getText());\n+\t\t\t\t\t\t\tloginPasswordPasswordField.setText(password);\n+\t\t\t\t\t\t\tloginButton_actionPerformed(null);\n+\t\t\t\t\t\t}\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.getLastError() != null) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t}\t\t\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/20/40886ce5fe5c00121f22d5fb8a5d79d9",
          "status": "removed",
          "additions": 0,
          "deletions": 103,
          "patch": "@@ -1,103 +0,0 @@\n-import java.awt.EventQueue;\n-import javax.swing.JButton;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPasswordField;\n-import javax.swing.JTextField;\n-\n-import database_management.MySQLdbManager;\n-import md5_calculator.Md5hashcalc;\n-\n-public class operatorUserSettingsWindow extends JFrame {\n-\n-\tprivate final JLabel usernameLabel = new JLabel();\n-\tprivate final JLabel passwordLabel = new JLabel();\n-\tprivate final JLabel passwordAgainLabel = new JLabel();\n-\tprivate final JLabel nameLabel = new JLabel();\n-\tprivate final JLabel lastNameLabel = new JLabel();\n-\tprivate final JButton updateButton = new JButton();\n-\tprivate final JTextField firstNameTextField = new JTextField();\n-\tprivate final JTextField lastNameTextField = new JTextField();\n-\tprivate final JPasswordField passwordPasswordField = new JPasswordField();\n-\tprivate final JPasswordField passwordAgainPasswordField = new JPasswordField();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\toperatorUserSettingsWindow frame = new operatorUserSettingsWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic operatorUserSettingsWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 314, 214);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\tgetContentPane().setLayout(null);\n-\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"operatorUserSettings\");\n-\t\t\n-\t\tgetContentPane().add(usernameLabel);\n-\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tusernameLabel.setBounds(10, 0, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordLabel);\n-\t\tpasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordLabel.setBounds(10, 76, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordAgainLabel);\n-\t\tpasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordAgainLabel.setBounds(10, 95, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(nameLabel);\n-\t\tnameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n-\t\tnameLabel.setBounds(10, 32, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(lastNameLabel);\n-\t\tlastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlastNameLabel.setBounds(10, 54, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(updateButton);\n-\t\tupdateButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tupdateButton.setBounds(93, 140, 106, 26);\n-\t\t\n-\t\tgetContentPane().add(firstNameTextField);\n-\t\tfirstNameTextField.setBounds(113, 30, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(lastNameTextField);\n-\t\tlastNameTextField.setBounds(113, 52, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordPasswordField);\n-\t\tpasswordPasswordField.setBounds(113, 74, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordAgainPasswordField);\n-\t\tpasswordAgainPasswordField.setBounds(113, 97, 175, 20);\n-\t\t\n-\t\tgetCurrentUserData();\n-\t}\n-\t\n-\tprivate void getCurrentUserData() {\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/25/50c3d407585b0012179f93dc572b551d",
          "status": "removed",
          "additions": 0,
          "deletions": 171,
          "patch": "@@ -1,171 +0,0 @@\n-import java.awt.EventQueue;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.WindowEvent;\n-\n-import javax.swing.JButton;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPasswordField;\n-import javax.swing.JTextField;\n-import javax.swing.JOptionPane;\n-\n-import database_management.MySQLdbManager;\n-\n-public class databaseConnectWindow extends JFrame {\n-\n-\tprivate final JLabel label = new JLabel();\n-\tprivate final JLabel label_1 = new JLabel();\n-\tprivate final JLabel label_2 = new JLabel();\n-\tprivate final JLabel label_3 = new JLabel();\n-\tprivate final JLabel label_4 = new JLabel();\n-\tprivate final JButton connectToDatabaseButton = new JButton();\n-\tprivate final JTextField mysqlServerAddressTextField = new JTextField();\n-\tprivate final JTextField mysqlPortTextField = new JTextField();\n-\tprivate final JTextField mysqlDatabaseNameTextField = new JTextField();\n-\tprivate final JTextField mysqlUsernameTextField = new JTextField();\n-\tprivate final JPasswordField mysqlPasswordPasswordField = new JPasswordField();\n-\tpublic static MySQLdbManager dbPortal = null;\n-\t\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tdatabaseConnectWindow frame = new databaseConnectWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic databaseConnectWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 384, 203);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\tgetContentPane().setLayout(null);\n-\t\tsetAlwaysOnTop(true);\n-\t\tsetResizable(false);\n-\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"databaseConnectWindowFrame\");\n-\t\t\n-\t\tgetContentPane().add(label);\n-\t\tlabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel.setBounds(10, 10, 165, 16);\n-\t\t\n-\t\tgetContentPane().add(label_1);\n-\t\tlabel_1.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel_1.setBounds(10, 54, 165, 16);\n-\t\t\n-\t\tgetContentPane().add(label_2);\n-\t\tlabel_2.setText(\"\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel_2.setBounds(10, 32, 156, 16);\n-\t\t\n-\t\tgetContentPane().add(label_3);\n-\t\tlabel_3.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd:\");\n-\t\tlabel_3.setBounds(10, 76, 165, 16);\n-\t\t\n-\t\tgetContentPane().add(label_4);\n-\t\tlabel_4.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel_4.setBounds(10, 98, 156, 16);\n-\t\t\n-\t\tgetContentPane().add(connectToDatabaseButton);\n-\t\tconnectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());\n-\t\tconnectToDatabaseButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\");\n-\t\tconnectToDatabaseButton.setBounds(132, 135, 106, 26);\n-\t\t\n-\t\tgetContentPane().add(mysqlServerAddressTextField);\n-\t\tmysqlServerAddressTextField.setText(\"127.0.0.1\");\n-\t\tmysqlServerAddressTextField.setBounds(181, 8, 185, 20);\n-\t\t\n-\t\tgetContentPane().add(mysqlPortTextField);\n-\t\tmysqlPortTextField.setText(\"3306\");\n-\t\tmysqlPortTextField.setBounds(181, 30, 91, 20);\n-\t\t\n-\t\tgetContentPane().add(mysqlDatabaseNameTextField);\n-\t\tmysqlDatabaseNameTextField.setText(\"shop\");\n-\t\tmysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);\n-\t\t\n-\t\tgetContentPane().add(mysqlUsernameTextField);\n-\t\tmysqlUsernameTextField.setText(\"root\");\n-\t\tmysqlUsernameTextField.setBounds(181, 76, 180, 18);\n-\t\t\n-\t\tgetContentPane().add(mysqlPasswordPasswordField);\n-\t\tmysqlPasswordPasswordField.setBounds(181, 96, 181, 20);\n-\t}\n-\tprivate class ConnectToDatabaseButtonActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tconnectToDatabaseButton_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprotected void connectToDatabaseButton_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\tString password = \"\";\n-\t\t\n-\t\tchar [] pass = mysqlPasswordPasswordField.getPassword();\n-\t\tfor (int i = 0; i < pass.length; i++) {\n-\t\t\t\n-\t\t\tpassword += pass[i];\n-\t\t}\n-\t\t\n-\t\tdbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),\n-\t\t\t\tmysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),\n-\t\t\t\tmysqlUsernameTextField.getText(), password);\t\t\n-\t\t\n-\t\t\n-\t\tif (dbPortal.connect() == false) { //now check for database name that is not existing\n-\t\t\t\n-\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n-\t\t\tdbPortal.disconnect(); //just in case\n-\t\t\t\n-\t\t\tif (dbPortal.connect() == false) { //connection settings problem or not running MySQL server\n-\t\t\t\tdbPortal.finallize();\n-\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n-\t\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n-\t\t\t\t\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\telse { //will have to create new database\n-\t\t\t\t\n-\t\t\t\tif (JOptionPane.showConfirmDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd: \" + mysqlDatabaseNameTextField.getText() +\n-\t\t\t\t\t\t\".\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd?\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd?\", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\n-\t\t\t\t\tdbPortal.disconnect();\n-\t\t\t\t\tdbPortal.finallize();\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n-\t\t\t}\t\t\t\n-\t\t}\n-\t\t\n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n-\t}\n-\t\n-\tprivate void createNewDatabaseAndTables() {\n-\t\t\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/25/b05af020b65d001211398853d386ea7d",
          "status": "added",
          "additions": 248,
          "deletions": 0,
          "patch": "@@ -0,0 +1,248 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JButton;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserSettingsWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3004L;\n+\n+\tprivate final JLabel usernameLabel = new JLabel();\n+\tprivate final JLabel passwordLabel = new JLabel();\n+\tprivate final JLabel passwordAgainLabel = new JLabel();\n+\tprivate final JLabel nameLabel = new JLabel();\n+\tprivate final JLabel lastNameLabel = new JLabel();\n+\tprivate final JButton updateButton = new JButton();\n+\tprivate final JButton deleteOperator = new JButton();\n+\tprivate final JTextField firstNameTextField = new JTextField();\n+\tprivate final JTextField lastNameTextField = new JTextField();\n+\tprivate final JPasswordField passwordPasswordField = new JPasswordField();\n+\tprivate final JPasswordField passwordAgainPasswordField = new JPasswordField();\t\n+\t\n+\tprivate String currentOperatorPassword = \"\";\n+\tpublic static String operatorFirstNameLastNameCombination = \"\";\t\n+\t\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserSettingsWindow frame = new operatorUserSettingsWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserSettingsWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 314, 255);\n+\t\tsetDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorUserSettings\");\n+\t\t\n+\t\tgetContentPane().add(usernameLabel);\n+\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tusernameLabel.setBounds(10, 0, 278, 16);\n+\t\t\n+\t\tgetContentPane().add(passwordLabel);\n+\t\tpasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tpasswordLabel.setBounds(10, 76, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(passwordAgainLabel);\n+\t\tpasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tpasswordAgainLabel.setBounds(10, 95, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(nameLabel);\n+\t\tnameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnameLabel.setBounds(10, 32, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(lastNameLabel);\n+\t\tlastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlastNameLabel.setBounds(10, 54, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(updateButton);\n+\t\tupdateButton.addActionListener(new UpdateButtonActionListener());\n+\t\tupdateButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tupdateButton.setBounds(90, 130, 137, 26);\n+\t\t\n+\t\tgetContentPane().add(firstNameTextField);\n+\t\tfirstNameTextField.setBounds(113, 30, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(lastNameTextField);\n+\t\tlastNameTextField.setBounds(113, 52, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(passwordPasswordField);\n+\t\tpasswordPasswordField.setBounds(113, 74, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(passwordAgainPasswordField);\n+\t\tpasswordAgainPasswordField.setBounds(113, 97, 175, 20);\n+\t\t\n+\t\tgetCurrentUserData();\n+\t\t\n+\t\tgetContentPane().add(deleteOperator);\n+\t\tdeleteOperator.addActionListener(new DeleteOperatorActionListener());\n+\t\tdeleteOperator.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tdeleteOperator.setBounds(90, 189, 137, 26);\n+\t}\n+\t\n+\tprivate void getCurrentUserData() {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tif (databaseConnectWindow.dbPortal.isConnected() == false) {\n+\t\t\treturn;\n+\t\t}\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_username, operator_password, \" + \n+\t\t\t\t\"operator_first_name, operator_last_name FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId);\n+\t\t\n+\t\tif ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + rs.getString(1));\n+\t\t\tcurrentOperatorPassword = rs.getString(2);\n+\t\t\tfirstNameTextField.setText(rs.getString(3));\n+\t\t\tlastNameTextField.setText(rs.getString(4));\n+\t\t}\n+\t\tcatch (Exception ex) {\t\t\t\n+\t\t}\n+\t\t\n+\t\toperatorFirstNameLastNameCombination = firstNameTextField.getText() + \" \" + lastNameTextField.getText();\n+\t}\n+\t\n+\tprivate class UpdateButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tupdateButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class DeleteOperatorActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tdeleteOperator_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprotected void updateButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tchar[] pass = passwordPasswordField.getPassword();\n+\t\tString password = \"\";\n+\t\t\n+\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\n+\t\t\tpassword += pass[i];\n+\t\t}\n+\t\t\n+\t\tchar[] pass2 = passwordAgainPasswordField.getPassword();\n+\t\tString password2 = \"\";\n+\t\t\n+\t\tfor (int j = 0; j < pass2.length; j++) {\n+\t\t\t\n+\t\t\tpassword2 += pass2[j];\n+\t\t}\n+\t\t\n+\t\tif (password.compareTo(password2) != 0) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (password.length() > 3) { //password update will be performed too\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tpassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\tcurrentOperatorPassword = password;\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\\n\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\t\t\t\n+\t\t}\n+\t\telse {\n+\t\t\tif (password.length() > 0) {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd 4 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tif ((firstNameTextField.getText().length() <= 3) || (lastNameTextField.getText().length() <= 3)) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal.executeParameterizedNonQuery(\"UPDATE operators SET operator_password=? \" +\n+\t\t\t\t\"operator_first_name=? operator_last_name=? WHERE operator_id=?\", currentOperatorPassword, \n+\t\t\t\tfirstNameTextField.getText(), lastNameTextField.getText(), operatorUserLoginWindow.loggedUserId) != 1) {\n+\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorFirstNameLastNameCombination = firstNameTextField.getText() + \" \" + lastNameTextField.getText();\n+\t\toperatorUserLoginWindow.loggedUserNames = operatorFirstNameLastNameCombination; //in case\n+\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t}\n+\t\n+\tprotected void deleteOperator_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\t//we can not delete not existing operator\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (JOptionPane.showConfirmDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\\n\" + \n+\t\t\t\t\"\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd, \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\\n\\n\\t\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd?\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\tJOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"DELETE FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId) != 1) {\n+\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t}\n+\t\t\n+\t\treturn;\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/2d/10122d7aa45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 396,
          "deletions": 0,
          "patch": "@@ -0,0 +1,396 @@\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Insets;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JComponent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JSeparator;\n+import javax.swing.SpringLayout;\n+import javax.swing.border.EtchedBorder;\n+import org.jdesktop.layout.GroupLayout;\n+import org.jdesktop.layout.LayoutStyle;\n+import com.jgoodies.forms.factories.FormFactory;\n+import com.jgoodies.forms.layout.CellConstraints;\n+import com.jgoodies.forms.layout.ColumnSpec;\n+import com.jgoodies.forms.layout.FormLayout;\n+import com.jgoodies.forms.layout.RowSpec;\n+\n+\n+public class mainWindow extends JFrame {\n+\n+\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n+\tprivate final JMenu File = new JMenu();\n+\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n+\tprivate final JMenu Operations = new JMenu();\n+\tprivate final JMenu Help = new JMenu();\n+\tprivate final JMenuItem HelpAbout = new JMenuItem();\n+\tprivate final JMenuItem FileExit = new JMenuItem();\n+\tprivate static mainWindow mainWindowPointer;\n+\t\n+\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n+\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n+\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tmainWindow frame = new mainWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic mainWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 682, 438);\n+\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tmainWindowPointer = this;\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\t\t\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\taddWindowListener(new ThisWindowListener());\n+\t\tgetContentPane().setLayout(new BorderLayout());\n+\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"mainWindow\");\n+\t\t\n+\t\tsetJMenuBar(mainWindowMenu);\n+\t\t\n+\t\tmainWindowMenu.add(File);\n+\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileConnectToDb);\n+\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n+\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileDisconnectFromDb);\n+\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n+\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\tFileDisconnectFromDb.setEnabled(false);\n+\n+\t\tFile.addSeparator();\n+\t\t\n+\t\tFile.add(FileExit);\n+\t\tFileExit.addActionListener(new FileExitActionListener());\n+\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Operations);\n+\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tOperations.setEnabled(false);\n+\t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Help);\n+\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n+\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n+\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n+\t\t\tnew ColumnSpec[] {\n+\t\t\t\tColumnSpec.decode(\"149dlu\"),\n+\t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n+\t\t\tnew RowSpec[] {\n+\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n+\t\t\t\tRowSpec.decode(\"16px\")}));\n+\t\tmainWindowStatusPanel.setSize(666, 25);\n+\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n+\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n+\t\t\n+\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n+\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelSetEnabled(false);\n+\t}\n+\t\n+\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n+\t\t\n+\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n+\t\t\n+\t\tfor (int i = 0; i < comps.length; i++) {\n+\t\t\n+\t\t\tcomps[i].setEnabled(enable);\t\n+\t\t}\n+\t\t\n+\t\tmainWindowStatusPanel.setEnabled(enable);\n+\t}\n+\t\n+\tprivate class ThisWindowListener extends WindowAdapter {\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tthis_windowClosing(e);\n+\t\t}\n+\t}\n+\tprivate class FileExitActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileExit_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileConnectToDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileConnectToDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileDisconnectFromDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\n+\tprotected void this_windowClosing(WindowEvent e) {\n+\t\t\n+\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t}\n+\t\t}\n+\t\tthis.dispose();\n+\t\t//System.exit(0);\n+\t}\n+\t\n+\tprotected void fileExit_actionPerformed(ActionEvent e) {\n+\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n+\t\tdcw.setVisible(true);\n+\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n+\t}\n+\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n+\t\t\n+        public void windowClosing(WindowEvent e) {\n+            \n+        \te.getWindow().dispose(); \n+        \t\n+        \tif (databaseConnectWindow.dbPortal != null) {\n+    \t\t\t\n+    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n+    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n+    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n+    \t\t\t}\n+    \t\t\telse {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n+    \t\t\t}\n+    \t\t}            \n+        }\n+    };\n+    \n+    ////////////////////////////////////////////////////////////////////////\n+    \n+\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t\n+\t\t\tthis.FileConnectToDb.setEnabled(true);\n+\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n+\t\t\tthis.Operations.setEnabled(false);\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t}\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n+\t\toul.setVisible(true);\n+\t\toul.addWindowListener(operatorUserLoginWindowClosing);\n+\t}\n+\tprivate static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {\n+\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserLoginWindow.loggedUserNames);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n+\t}\n+\t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n+\t\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/2e/40e3e55f575b0012179f93dc572b551d",
          "status": "removed",
          "additions": 0,
          "deletions": 166,
          "patch": "@@ -1,166 +0,0 @@\n-import java.awt.EventQueue;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.WindowEvent;\n-\n-import javax.swing.JButton;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPasswordField;\n-import javax.swing.JTextField;\n-import javax.swing.JOptionPane;\n-\n-import database_management.MySQLdbManager;\n-\n-public class databaseConnectWindow extends JFrame {\n-\n-\tprivate final JLabel label = new JLabel();\n-\tprivate final JLabel label_1 = new JLabel();\n-\tprivate final JLabel label_2 = new JLabel();\n-\tprivate final JLabel label_3 = new JLabel();\n-\tprivate final JLabel label_4 = new JLabel();\n-\tprivate final JButton connectToDatabaseButton = new JButton();\n-\tprivate final JTextField mysqlServerAddressTextField = new JTextField();\n-\tprivate final JTextField mysqlPortTextField = new JTextField();\n-\tprivate final JTextField mysqlDatabaseNameTextField = new JTextField();\n-\tprivate final JTextField mysqlUsernameTextField = new JTextField();\n-\tprivate final JPasswordField mysqlPasswordPasswordField = new JPasswordField();\n-\tpublic static MySQLdbManager dbPortal = null;\n-\t\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tdatabaseConnectWindow frame = new databaseConnectWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic databaseConnectWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 384, 203);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\tgetContentPane().setLayout(null);\n-\t\tsetAlwaysOnTop(true);\n-\t\tsetResizable(false);\n-\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"databaseConnectWindowFrame\");\n-\t\t\n-\t\tgetContentPane().add(label);\n-\t\tlabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel.setBounds(10, 10, 165, 16);\n-\t\t\n-\t\tgetContentPane().add(label_1);\n-\t\tlabel_1.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel_1.setBounds(10, 54, 165, 16);\n-\t\t\n-\t\tgetContentPane().add(label_2);\n-\t\tlabel_2.setText(\"\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel_2.setBounds(10, 32, 156, 16);\n-\t\t\n-\t\tgetContentPane().add(label_3);\n-\t\tlabel_3.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd:\");\n-\t\tlabel_3.setBounds(10, 76, 165, 16);\n-\t\t\n-\t\tgetContentPane().add(label_4);\n-\t\tlabel_4.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel_4.setBounds(10, 98, 156, 16);\n-\t\t\n-\t\tgetContentPane().add(connectToDatabaseButton);\n-\t\tconnectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());\n-\t\tconnectToDatabaseButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\");\n-\t\tconnectToDatabaseButton.setBounds(132, 135, 106, 26);\n-\t\t\n-\t\tgetContentPane().add(mysqlServerAddressTextField);\n-\t\tmysqlServerAddressTextField.setText(\"127.0.0.1\");\n-\t\tmysqlServerAddressTextField.setBounds(181, 8, 185, 20);\n-\t\t\n-\t\tgetContentPane().add(mysqlPortTextField);\n-\t\tmysqlPortTextField.setText(\"3306\");\n-\t\tmysqlPortTextField.setBounds(181, 30, 91, 20);\n-\t\t\n-\t\tgetContentPane().add(mysqlDatabaseNameTextField);\n-\t\tmysqlDatabaseNameTextField.setText(\"shop\");\n-\t\tmysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);\n-\t\t\n-\t\tgetContentPane().add(mysqlUsernameTextField);\n-\t\tmysqlUsernameTextField.setText(\"root\");\n-\t\tmysqlUsernameTextField.setBounds(181, 76, 180, 18);\n-\t\t\n-\t\tgetContentPane().add(mysqlPasswordPasswordField);\n-\t\tmysqlPasswordPasswordField.setBounds(181, 96, 181, 20);\n-\t}\n-\tprivate class ConnectToDatabaseButtonActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tconnectToDatabaseButton_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprotected void connectToDatabaseButton_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\tString password = \"\";\n-\t\t\n-\t\tchar [] pass = mysqlPasswordPasswordField.getPassword();\n-\t\tfor (int i = 0; i < pass.length; i++) {\n-\t\t\t\n-\t\t\tpassword += pass[i];\n-\t\t}\n-\t\t\n-\t\tdbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),\n-\t\t\t\tmysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),\n-\t\t\t\tmysqlUsernameTextField.getText(), password);\t\t\n-\t\t\n-\t\t\n-\t\tif (dbPortal.connect() == false) { //now check for database name that is not existing\n-\t\t\t\n-\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n-\t\t\tdbPortal.disconnect(); //just in case\n-\t\t\t\n-\t\t\tif (dbPortal.connect() == false) { //connection settings problem or not running MySQL server\n-\t\t\t\tdbPortal.finallize();\n-\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n-\t\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n-\t\t\t\t\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\telse { //will have to create new database\n-\t\t\t\t\n-\t\t\t\tif (JOptionPane.showConfirmDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd: \" + mysqlDatabaseNameTextField.getText() +\n-\t\t\t\t\t\t\".\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd?\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd?\", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\n-\t\t\t\t\tdbPortal.disconnect();\n-\t\t\t\t\tdbPortal.finallize();\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n-\t\t\t}\t\t\t\n-\t\t}\n-\t\t\n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/30/b092ea0ab45c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 35,
          "patch": "@@ -1,35 +0,0 @@\n-import java.awt.EventQueue;\n-\n-import javax.swing.JFrame;\n-\n-\n-public class operatorUserLogin extends JFrame {\n-\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\toperatorUserLogin frame = new operatorUserLogin();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic operatorUserLogin() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 500, 375);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\t//\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/32/1047046ea45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 524,
          "deletions": 0,
          "patch": "@@ -0,0 +1,524 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+import java.lang.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeParameterizedNonQuery(String query, Object[] parameters) {\n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\t//TODO...\n+\t\t// boolean - ok\n+\t\t// String  - ok\n+\t\t// char    - \n+\t\t// byte    -\n+\t\t// short   -\n+\t\t// int     -\n+\t\t// long    -\n+\t\t// double  -\n+\t\t// float   -\n+\t\t// Date    -\n+\t\t// null ???\n+\t\t\n+\t\ttry {\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i, parameters[i]);\n+\t\t\t\t\n+\t\t\t\t/*if (parameters[i] instanceof Boolean) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof String) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setString(i, ((String)parameters[i].toString()));\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof Character) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.set\n+\t\t\t\t}*/\n+\t\t\t}\n+\t\t\t\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/33/b0a2eb76a45d00121890bdcc27f78f62",
          "status": "renamed",
          "additions": 143,
          "deletions": 12,
          "patch": "@@ -2,8 +2,7 @@ import java.awt.BorderLayout;\n import java.awt.Component;\n import java.awt.Dimension;\n import java.awt.EventQueue;\n-import java.awt.FlowLayout;\n-import java.awt.GridLayout;\n+import java.awt.Insets;\n import java.awt.event.WindowAdapter;\n import java.awt.event.WindowEvent;\n import java.awt.event.WindowListener;\n@@ -32,6 +31,7 @@ import com.jgoodies.forms.layout.ColumnSpec;\n import com.jgoodies.forms.layout.FormLayout;\n import com.jgoodies.forms.layout.RowSpec;\n \n+\n public class mainWindow extends JFrame {\n \n \tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n@@ -45,9 +45,17 @@ public class mainWindow extends JFrame {\n \t\n \tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n \tprivate final JPanel mainWindowStatusPanel = new JPanel();\n-\tprivate final JPanel panel = new JPanel();\n \tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n \tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n \t/**\n \t * Launch the application\n \t * @param args\n@@ -110,17 +118,36 @@ public class mainWindow extends JFrame {\n \t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\tOperations.setEnabled(false);\n \t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n \t\tmainWindowMenu.add(Help);\n \t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\t\n \t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n \t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\t\n \t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n \t\tmainWindowStatusPanel.setLayout(new FormLayout(\n \t\t\tnew ColumnSpec[] {\n \t\t\t\tColumnSpec.decode(\"149dlu\"),\n \t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n \t\t\t\tFormFactory.DEFAULT_COLSPEC},\n \t\t\tnew RowSpec[] {\n \t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n@@ -132,9 +159,24 @@ public class mainWindow extends JFrame {\n \t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n \t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n \t\t\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n \t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n-\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\tmainWindowStatusPanelSetEnabled(false);\n \t}\n \t\n@@ -170,11 +212,41 @@ public class mainWindow extends JFrame {\n \t\t\tfileDisconnectFromDb_actionPerformed(e);\n \t\t}\n \t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n \tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n \t\tpublic void actionPerformed(ActionEvent e) {\n \t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n \t\t}\n \t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n \n \tprotected void this_windowClosing(WindowEvent e) {\n \t\t\n@@ -184,8 +256,7 @@ public class mainWindow extends JFrame {\n \t\t\t\n \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n \t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n \t\t\t}\n \t\t}\n \t\tthis.dispose();\n@@ -194,14 +265,13 @@ public class mainWindow extends JFrame {\n \t\n \tprotected void fileExit_actionPerformed(ActionEvent e) {\n \n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n \t}\n \t\n \t////////////////////////////////////////////////////////////////////////\n \t\n \tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n \t\t\n-\t\t//databaseConnectWindow.main(null);\n \t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n \t\tdcw.setVisible(true);\n \t\tdcw.addWindowListener(databaseConnectWindowClosing);\n@@ -234,16 +304,20 @@ public class mainWindow extends JFrame {\n \t\t\n \t\tif (databaseConnectWindow.dbPortal != null) {\n \t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n \t\t\t\n \t\t\tthis.FileConnectToDb.setEnabled(true);\n \t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n \t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\t\t\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n \t\t}\n \t}\n \t\n-\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n \t\t\n \t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n \t\toul.setVisible(true);\n@@ -255,12 +329,69 @@ public class mainWindow extends JFrame {\n \t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n \t\t\t\t\n \t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserLoginWindow.loggedUserNames);\n \t\t\t}\n \t\t\telse {\n \t\t\t\t\n \t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n \t\t\t}\n \t\t}\n+\t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n+\t}\n+\t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n \t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n \t\n }"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/34/b0d63c8da55c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 223,
          "patch": "@@ -1,223 +0,0 @@\n-import java.awt.BorderLayout;\n-import java.awt.Dimension;\n-import java.awt.EventQueue;\n-import java.awt.FlowLayout;\n-import java.awt.GridLayout;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.event.WindowListener;\n-import javax.swing.BoxLayout;\n-import javax.swing.JButton;\n-import javax.swing.JComponent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.ActionEvent;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JMenu;\n-import javax.swing.JMenuBar;\n-import javax.swing.JMenuItem;\n-import javax.swing.JOptionPane;\n-import javax.swing.JPanel;\n-import javax.swing.JSeparator;\n-import javax.swing.SpringLayout;\n-import javax.swing.border.BevelBorder;\n-import javax.swing.border.EtchedBorder;\n-import org.jdesktop.layout.GroupLayout;\n-import org.jdesktop.layout.LayoutStyle;\n-import com.jgoodies.forms.factories.FormFactory;\n-import com.jgoodies.forms.layout.CellConstraints;\n-import com.jgoodies.forms.layout.ColumnSpec;\n-import com.jgoodies.forms.layout.FormLayout;\n-import com.jgoodies.forms.layout.RowSpec;\n-\n-public class mainWindow extends JFrame {\n-\n-\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n-\tprivate final JMenu File = new JMenu();\n-\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n-\tprivate final JMenu Operations = new JMenu();\n-\tprivate final JMenu Help = new JMenu();\n-\tprivate final JMenuItem HelpAbout = new JMenuItem();\n-\tprivate final JMenuItem FileExit = new JMenuItem();\n-\tprivate static mainWindow mainWindowPointer;\n-\t\n-\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n-\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n-\tprivate final JPanel panel = new JPanel();\n-\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n-\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tmainWindow frame = new mainWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic mainWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 682, 438);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\tmainWindowPointer = this;\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\t\t\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\taddWindowListener(new ThisWindowListener());\n-\t\tgetContentPane().setLayout(new BorderLayout());\n-\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"mainWindow\");\n-\t\t\n-\t\tsetJMenuBar(mainWindowMenu);\n-\t\t\n-\t\tmainWindowMenu.add(File);\n-\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileConnectToDb);\n-\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n-\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileDisconnectFromDb);\n-\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n-\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\tFileDisconnectFromDb.setEnabled(false);\n-\n-\t\tFile.addSeparator();\n-\t\t\n-\t\tFile.add(FileExit);\n-\t\tFileExit.addActionListener(new FileExitActionListener());\n-\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tmainWindowMenu.add(Operations);\n-\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tOperations.setEnabled(false);\n-\t\t\n-\t\tmainWindowMenu.add(Help);\n-\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tHelp.add(HelpAbout);\n-\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n-\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n-\t\t\tnew ColumnSpec[] {\n-\t\t\t\tColumnSpec.decode(\"149dlu\"),\n-\t\t\t\tColumnSpec.decode(\"72px\"),\n-\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n-\t\t\tnew RowSpec[] {\n-\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n-\t\t\t\tRowSpec.decode(\"16px\")}));\n-\t\tmainWindowStatusPanel.setSize(666, 25);\n-\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n-\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n-\t\t\n-\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n-\t\t\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));\n-\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\tmainWindowStatusPanel.setEnabled(false);\n-\t}\n-\t\n-\tprivate class ThisWindowListener extends WindowAdapter {\n-\t\tpublic void windowClosing(WindowEvent e) {\n-\t\t\tthis_windowClosing(e);\n-\t\t}\n-\t}\n-\tprivate class FileExitActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileExit_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileConnectToDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileConnectToDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileDisconnectFromDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\n-\tprotected void this_windowClosing(WindowEvent e) {\n-\t\t\n-\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-\t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t}\n-\t\t}\n-\t\tthis.dispose();\n-\t\t//System.exit(0);\n-\t}\n-\t\n-\tprotected void fileExit_actionPerformed(ActionEvent e) {\n-\n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n-\t}\n-\t\n-\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\t//databaseConnectWindow.main(null);\n-\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n-\t\tdcw.setVisible(true);\n-\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n-\t}\n-\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n-\t\t\n-        public void windowClosing(WindowEvent e) {\n-            \n-        \te.getWindow().dispose(); \n-        \t\n-        \tif (databaseConnectWindow.dbPortal != null) {\n-    \t\t\t\n-    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-    \t\t\t\t\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(true);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanel.setEnabled(true);\n-    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n-    \t\t\t}\n-    \t\t\telse {\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanel.setEnabled(false);\n-    \t\t\t}\n-    \t\t}            \n-        }\n-    };\n-\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t\n-\t\t\tthis.FileConnectToDb.setEnabled(true);\n-\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n-\t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.mainWindowStatusPanel.setEnabled(false);\t\t\t\n-\t\t}\n-\t}\n-\t\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/39/3051c538b75d001211398853d386ea7d",
          "status": "added",
          "additions": 260,
          "deletions": 0,
          "patch": "@@ -0,0 +1,260 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.WindowConstants;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+\n+import database_management.MySQLdbManager;\n+\n+public class databaseConnectWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3002L;\n+\n+\tprivate final JLabel label = new JLabel();\n+\tprivate final JLabel label_1 = new JLabel();\n+\tprivate final JLabel label_2 = new JLabel();\n+\tprivate final JLabel label_3 = new JLabel();\n+\tprivate final JLabel label_4 = new JLabel();\n+\tprivate final JButton connectToDatabaseButton = new JButton();\n+\tprivate final JTextField mysqlServerAddressTextField = new JTextField();\n+\tprivate final JTextField mysqlPortTextField = new JTextField();\n+\tprivate final JTextField mysqlDatabaseNameTextField = new JTextField();\n+\tprivate final JTextField mysqlUsernameTextField = new JTextField();\n+\tprivate final JPasswordField mysqlPasswordPasswordField = new JPasswordField();\n+\tpublic static MySQLdbManager dbPortal = null;\n+\t\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() { \n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tdatabaseConnectWindow frame = new databaseConnectWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\t\t\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic databaseConnectWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 384, 203);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetAlwaysOnTop(true);\n+\t\tsetResizable(false);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"databaseConnectWindowFrame\");\n+\t\t\n+\t\tgetContentPane().add(label);\n+\t\tlabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel.setBounds(10, 10, 165, 16);\n+\t\t\n+\t\tgetContentPane().add(label_1);\n+\t\tlabel_1.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel_1.setBounds(10, 54, 165, 16);\n+\t\t\n+\t\tgetContentPane().add(label_2);\n+\t\tlabel_2.setText(\"\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel_2.setBounds(10, 32, 156, 16);\n+\t\t\n+\t\tgetContentPane().add(label_3);\n+\t\tlabel_3.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd:\");\n+\t\tlabel_3.setBounds(10, 76, 165, 16);\n+\t\t\n+\t\tgetContentPane().add(label_4);\n+\t\tlabel_4.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel_4.setBounds(10, 98, 156, 16);\n+\t\t\n+\t\tgetContentPane().add(connectToDatabaseButton);\n+\t\tconnectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());\n+\t\tconnectToDatabaseButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\");\n+\t\tconnectToDatabaseButton.setBounds(132, 135, 106, 26);\n+\t\t\n+\t\tgetContentPane().add(mysqlServerAddressTextField);\n+\t\tmysqlServerAddressTextField.setText(\"127.0.0.1\");\n+\t\tmysqlServerAddressTextField.setBounds(181, 8, 185, 20);\n+\t\t\n+\t\tgetContentPane().add(mysqlPortTextField);\n+\t\tmysqlPortTextField.setText(\"3306\");\n+\t\tmysqlPortTextField.setBounds(181, 30, 91, 20);\n+\t\t\n+\t\tgetContentPane().add(mysqlDatabaseNameTextField);\n+\t\tmysqlDatabaseNameTextField.setText(\"shop\");\n+\t\tmysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);\n+\t\t\n+\t\tgetContentPane().add(mysqlUsernameTextField);\n+\t\tmysqlUsernameTextField.setText(\"root\");\n+\t\tmysqlUsernameTextField.setBounds(181, 76, 180, 18);\n+\t\t\n+\t\tgetContentPane().add(mysqlPasswordPasswordField);\n+\t\tmysqlPasswordPasswordField.setBounds(181, 96, 181, 20);\n+\t}\n+\tprivate class ConnectToDatabaseButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tconnectToDatabaseButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\n+\tprotected void connectToDatabaseButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tString password = \"\";\n+\t\t\n+\t\tchar [] pass = mysqlPasswordPasswordField.getPassword();\n+\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\n+\t\t\tpassword += pass[i];\n+\t\t}\n+\t\t\n+\t\tdbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),\n+\t\t\t\tmysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),\n+\t\t\t\tmysqlUsernameTextField.getText(), password);\t\t\n+\t\t\n+\t\t\n+\t\tif (dbPortal.connect() == false) { //now check for database name that is not existing\n+\t\t\t\n+\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n+\t\t\tdbPortal.disconnect(); //just in case\n+\t\t\t\n+\t\t\tif (dbPortal.connect() == false) { //connection settings problem or not running MySQL server\n+\t\t\t\tdbPortal.finalize();\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\telse { //will have to create new database\n+\t\t\t\t\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t\t\n+\t\t\t\tif (JOptionPane.showConfirmDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd: \" + mysqlDatabaseNameTextField.getText() +\n+\t\t\t\t\t\t\".\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd?\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd?\", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n+\t\t\t\t\t\n+\t\t\t\t\tif (createNewDatabaseAndTables() == false) { //in case of fail do not close this window\n+\t\t\t\t\t\t\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tdbPortal.finalize();\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t}\t\t\t\n+\t\t}\n+\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t}\n+\t\n+\tprivate boolean createNewDatabaseAndTables() {\n+\t\t\n+\t\tif (dbPortal.connect() == false) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (1)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\t//FIXME prone??? to sql injection maybe??\n+\t\t\n+\t\tif (dbPortal.executeParameterizedNonQuery(\"CREATE DATABASE ? COLLATE utf8_general_ci\", mysqlDatabaseNameTextField.getText()) != 1) {\n+\t\t\t\n+\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\tdbPortal.finalize();\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\t/*if (dbPortal.executeNonQuery(\"CREATE DATABASE \" + mysqlDatabaseNameTextField.getText() + \" COLLATE utf8_general_ci\") != 1) {\n+\t\t\t\n+\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\tdbPortal.finalize();\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn false;\n+\t\t}/*\n+\t\t\n+\t\tdbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());\n+\t\tdbPortal.disconnect();\n+\t\t\n+\t\tif (dbPortal.connect() == false) { //false positive for database creation\n+\t\t\t\n+\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n+\t\t\tdbPortal.disconnect();\n+\t\t\t\n+\t\t\tif (dbPortal.connect()) {\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t}\t\t\t\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (2)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL,\" + \n+\t\t\t\t\"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)\");\n+\t\t\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"order_time datetime NOT NULL, order_operator_id int NOT NULL,\" +\n+\t\t\t\t\"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n+\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,\tproduct_price decimal(10,2) NOT NULL)\");\n+\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"order_detail_order_id int NOT NULL, order_detail_product_id int NOT NULL, \" +\n+\t\t\t\t\"order_detail_product_quantity int NOT NULL,\" +\n+\t\t\t\t\"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE,\" +\n+\t\t\t\t\"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n+\t\t\n+\t\t/* for testing only; not needed any more\n+\t\ttry {\n+\t\t\tif (dbPortal.executeNonQuery(\"INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)\" + \n+\t\t\t\t\t\" VALUES ('operator1', '\" + Md5hashcalc.calculateMD5hash(\"operator1\")  + \"', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd')\") != 1) {\n+\t\t\t\t\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t\tdbPortal.finallize();\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd MD5!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\tSystem.exit(-1);\n+\t\t}*/\n+\t\t\n+\t\treturn true;\n+\t}\t\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/3b/a0275544a35d00121890bdcc27f78f62",
          "status": "renamed",
          "additions": 62,
          "deletions": 14,
          "patch": "@@ -3,15 +3,16 @@ import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n import java.awt.event.WindowEvent;\n \n-import javax.swing.JButton;\n-\n import javax.swing.JFrame;\n import javax.swing.JLabel;\n import javax.swing.JPasswordField;\n import javax.swing.JTextField;\n+import javax.swing.WindowConstants;\n+import javax.swing.JButton;\n import javax.swing.JOptionPane;\n \n import database_management.MySQLdbManager;\n+import md5_calculator.Md5hashcalc;\n \n public class databaseConnectWindow extends JFrame {\n \n@@ -33,7 +34,7 @@ public class databaseConnectWindow extends JFrame {\n \t * @param args\n \t */\n \tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n+\t\tEventQueue.invokeLater(new Runnable() { \n \t\t\tpublic void run() {\n \t\t\t\ttry {\n \t\t\t\t\tdatabaseConnectWindow frame = new databaseConnectWindow();\n@@ -42,7 +43,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\t\t\te.printStackTrace();\n \t\t\t\t}\n \t\t\t}\n-\t\t});\n+\t\t});\t\t\n \t}\n \n \t/**\n@@ -51,7 +52,7 @@ public class databaseConnectWindow extends JFrame {\n \tpublic databaseConnectWindow() {\n \t\tsuper();\n \t\tsetBounds(100, 100, 384, 203);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n \t\ttry {\n \t\t\tjbInit();\n \t\t} catch (Throwable e) {\n@@ -115,6 +116,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\tconnectToDatabaseButton_actionPerformed(e);\n \t\t}\n \t}\n+\n \tprotected void connectToDatabaseButton_actionPerformed(ActionEvent e) {\n \t\t\n \t\tString password = \"\";\n@@ -136,7 +138,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\tdbPortal.disconnect(); //just in case\n \t\t\t\n \t\t\tif (dbPortal.connect() == false) { //connection settings problem or not running MySQL server\n-\t\t\t\tdbPortal.finallize();\n+\t\t\t\tdbPortal.finalize();\n \t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n \t\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n \t\t\t\t\n@@ -153,11 +155,10 @@ public class databaseConnectWindow extends JFrame {\n \t\t\t\t\t\t\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n-\t\t\t\t\t\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\n-\t\t\t\t\tdbPortal.finallize();\n+\t\t\t\t\tdbPortal.finalize();\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t\t\n@@ -170,16 +171,44 @@ public class databaseConnectWindow extends JFrame {\n \t\n \tprivate boolean createNewDatabaseAndTables() {\n \t\t\n-\t\tdbPortal.setMySqlActiveDatabase(\"\");\n-\t\t\n \t\tif (dbPortal.connect() == false) {\n \t\t\t\n-\t\t\tdbPortal.finallize();\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (1)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\tif (dbPortal.executeNonQuery(\"CREATE DATABASE \" + mysqlDatabaseNameTextField.getText() + \" COLLATE utf8_general_ci\") != 1) {\n+\t\t\t\n+\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\tdbPortal.finalize();\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\tdbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());\n+\t\tdbPortal.disconnect();\n+\t\t\n+\t\tif (dbPortal.connect() == false) { //false positive for database creation\n+\t\t\t\n+\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n+\t\t\tdbPortal.disconnect();\n+\t\t\t\n+\t\t\tif (dbPortal.connect()) {\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t}\t\t\t\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (2)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n \t\t\treturn false;\n \t\t}\n \t\t\n \t\tdbPortal.executeNonQuery(\"CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key,\" + \n-\t\t\t\t\"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(20) NOT NULL,\" + \n+\t\t\t\t\"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL,\" + \n \t\t\t\t\"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)\");\n \t\t\n \t\tdbPortal.executeNonQuery(\"CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key,\" + \n@@ -195,7 +224,26 @@ public class databaseConnectWindow extends JFrame {\n \t\t\t\t\"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE,\" +\n \t\t\t\t\"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n \t\t\n+\t\t/* for testing only; not needed any more\n+\t\ttry {\n+\t\t\tif (dbPortal.executeNonQuery(\"INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)\" + \n+\t\t\t\t\t\" VALUES ('operator1', '\" + Md5hashcalc.calculateMD5hash(\"operator1\")  + \"', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd')\") != 1) {\n+\t\t\t\t\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t\tdbPortal.finallize();\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd MD5!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\tSystem.exit(-1);\n+\t\t}*/\n+\t\t\n \t\treturn true;\n-\t}\n-\n+\t}\t\n }"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/3d/c05fc1fca35d00121890bdcc27f78f62",
          "status": "renamed",
          "additions": 140,
          "deletions": 9,
          "patch": "@@ -4,6 +4,7 @@ import java.awt.Dimension;\n import java.awt.EventQueue;\n import java.awt.FlowLayout;\n import java.awt.GridLayout;\n+import java.awt.Insets;\n import java.awt.event.WindowAdapter;\n import java.awt.event.WindowEvent;\n import java.awt.event.WindowListener;\n@@ -32,6 +33,8 @@ import com.jgoodies.forms.layout.ColumnSpec;\n import com.jgoodies.forms.layout.FormLayout;\n import com.jgoodies.forms.layout.RowSpec;\n \n+import database_management.MySQLdbManager;\n+\n public class mainWindow extends JFrame {\n \n \tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n@@ -47,7 +50,16 @@ public class mainWindow extends JFrame {\n \tprivate final JPanel mainWindowStatusPanel = new JPanel();\n \tprivate final JPanel panel = new JPanel();\n \tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n \tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n \t/**\n \t * Launch the application\n \t * @param args\n@@ -110,17 +122,36 @@ public class mainWindow extends JFrame {\n \t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\tOperations.setEnabled(false);\n \t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n \t\tmainWindowMenu.add(Help);\n \t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\t\n \t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n \t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\t\n \t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n \t\tmainWindowStatusPanel.setLayout(new FormLayout(\n \t\t\tnew ColumnSpec[] {\n \t\t\t\tColumnSpec.decode(\"149dlu\"),\n \t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n \t\t\t\tFormFactory.DEFAULT_COLSPEC},\n \t\t\tnew RowSpec[] {\n \t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n@@ -132,9 +163,24 @@ public class mainWindow extends JFrame {\n \t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n \t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n \t\t\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n \t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n-\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\tmainWindowStatusPanelSetEnabled(false);\n \t}\n \t\n@@ -170,11 +216,41 @@ public class mainWindow extends JFrame {\n \t\t\tfileDisconnectFromDb_actionPerformed(e);\n \t\t}\n \t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n \tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n \t\tpublic void actionPerformed(ActionEvent e) {\n \t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n \t\t}\n \t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n \n \tprotected void this_windowClosing(WindowEvent e) {\n \t\t\n@@ -184,8 +260,7 @@ public class mainWindow extends JFrame {\n \t\t\t\n \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n \t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n \t\t\t}\n \t\t}\n \t\tthis.dispose();\n@@ -194,14 +269,13 @@ public class mainWindow extends JFrame {\n \t\n \tprotected void fileExit_actionPerformed(ActionEvent e) {\n \n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n \t}\n \t\n \t////////////////////////////////////////////////////////////////////////\n \t\n \tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n \t\t\n-\t\t//databaseConnectWindow.main(null);\n \t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n \t\tdcw.setVisible(true);\n \t\tdcw.addWindowListener(databaseConnectWindowClosing);\n@@ -234,18 +308,20 @@ public class mainWindow extends JFrame {\n \t\t\n \t\tif (databaseConnectWindow.dbPortal != null) {\n \t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n \t\t\t\n \t\t\tthis.FileConnectToDb.setEnabled(true);\n \t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n \t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\t\t\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n \t\t}\n \t}\n \t\n \t////////////////////////////////////////////////////////////////////////\n \t\n-\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n \t\t\n \t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n \t\toul.setVisible(true);\n@@ -257,14 +333,69 @@ public class mainWindow extends JFrame {\n \t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n \t\t\t\t\n \t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserLoginWindow.loggedUserNames);\n \t\t\t}\n \t\t\telse {\n \t\t\t\t\n \t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n+\t}\n+\t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n \t\t\t}\n \t\t}\n \t};\n \t\n \t////////////////////////////////////////////////////////////////////////\n \t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n+\t\n }"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/3f/404dcf53b35d001211398853d386ea7d",
          "status": "added",
          "additions": 544,
          "deletions": 0,
          "patch": "@@ -0,0 +1,544 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeParameterizedNonQuery(String query, Object... parameters) {\n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i + 1, parameters[i]);\n+\t\t\t}\n+\t\t\t\n+\t\t\tsqlStatement.execute();\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns ResultSet with data. For SELECT...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeParameterizedQuery(String query, Object... parameters) { //executes query and returns ResultSet \n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i + 1, parameters[i]);\n+\t\t\t}\n+\t\t\t\n+\t\t\tresult = sqlStatement.executeQuery();\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/3f/a0c32771a35d00121890bdcc27f78f62",
          "status": "added",
          "additions": 260,
          "deletions": 0,
          "patch": "@@ -0,0 +1,260 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.WindowConstants;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+\n+import database_management.MySQLdbManager;\n+import md5_calculator.Md5hashcalc;\n+\n+public class databaseConnectWindow extends JFrame {\n+\n+\tprivate final JLabel label = new JLabel();\n+\tprivate final JLabel label_1 = new JLabel();\n+\tprivate final JLabel label_2 = new JLabel();\n+\tprivate final JLabel label_3 = new JLabel();\n+\tprivate final JLabel label_4 = new JLabel();\n+\tprivate final JButton connectToDatabaseButton = new JButton();\n+\tprivate final JTextField mysqlServerAddressTextField = new JTextField();\n+\tprivate final JTextField mysqlPortTextField = new JTextField();\n+\tprivate final JTextField mysqlDatabaseNameTextField = new JTextField();\n+\tprivate final JTextField mysqlUsernameTextField = new JTextField();\n+\tprivate final JPasswordField mysqlPasswordPasswordField = new JPasswordField();\n+\tpublic static MySQLdbManager dbPortal = null;\n+\t\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() { \n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tdatabaseConnectWindow frame = new databaseConnectWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\t\t\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic databaseConnectWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 384, 203);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetAlwaysOnTop(true);\n+\t\tsetResizable(false);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"databaseConnectWindowFrame\");\n+\t\t\n+\t\tgetContentPane().add(label);\n+\t\tlabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel.setBounds(10, 10, 165, 16);\n+\t\t\n+\t\tgetContentPane().add(label_1);\n+\t\tlabel_1.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel_1.setBounds(10, 54, 165, 16);\n+\t\t\n+\t\tgetContentPane().add(label_2);\n+\t\tlabel_2.setText(\"\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel_2.setBounds(10, 32, 156, 16);\n+\t\t\n+\t\tgetContentPane().add(label_3);\n+\t\tlabel_3.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd:\");\n+\t\tlabel_3.setBounds(10, 76, 165, 16);\n+\t\t\n+\t\tgetContentPane().add(label_4);\n+\t\tlabel_4.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel_4.setBounds(10, 98, 156, 16);\n+\t\t\n+\t\tgetContentPane().add(connectToDatabaseButton);\n+\t\tconnectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());\n+\t\tconnectToDatabaseButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\");\n+\t\tconnectToDatabaseButton.setBounds(132, 135, 106, 26);\n+\t\t\n+\t\tgetContentPane().add(mysqlServerAddressTextField);\n+\t\tmysqlServerAddressTextField.setText(\"127.0.0.1\");\n+\t\tmysqlServerAddressTextField.setBounds(181, 8, 185, 20);\n+\t\t\n+\t\tgetContentPane().add(mysqlPortTextField);\n+\t\tmysqlPortTextField.setText(\"3306\");\n+\t\tmysqlPortTextField.setBounds(181, 30, 91, 20);\n+\t\t\n+\t\tgetContentPane().add(mysqlDatabaseNameTextField);\n+\t\tmysqlDatabaseNameTextField.setText(\"shop\");\n+\t\tmysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);\n+\t\t\n+\t\tgetContentPane().add(mysqlUsernameTextField);\n+\t\tmysqlUsernameTextField.setText(\"root\");\n+\t\tmysqlUsernameTextField.setBounds(181, 76, 180, 18);\n+\t\t\n+\t\tgetContentPane().add(mysqlPasswordPasswordField);\n+\t\tmysqlPasswordPasswordField.setBounds(181, 96, 181, 20);\n+\t}\n+\tprivate class ConnectToDatabaseButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tconnectToDatabaseButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\n+\tprotected void connectToDatabaseButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tString password = \"\";\n+\t\t\n+\t\tchar [] pass = mysqlPasswordPasswordField.getPassword();\n+\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\n+\t\t\tpassword += pass[i];\n+\t\t}\n+\t\t\n+\t\tdbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),\n+\t\t\t\tmysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),\n+\t\t\t\tmysqlUsernameTextField.getText(), password);\t\t\n+\t\t\n+\t\t\n+\t\tif (dbPortal.connect() == false) { //now check for database name that is not existing\n+\t\t\t\n+\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n+\t\t\tdbPortal.disconnect(); //just in case\n+\t\t\t\n+\t\t\tif (dbPortal.connect() == false) { //connection settings problem or not running MySQL server\n+\t\t\t\tdbPortal.finalize();\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\telse { //will have to create new database\n+\t\t\t\t\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t\t\n+\t\t\t\tif (JOptionPane.showConfirmDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd: \" + mysqlDatabaseNameTextField.getText() +\n+\t\t\t\t\t\t\".\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd?\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd?\", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n+\t\t\t\t\t\n+\t\t\t\t\tif (createNewDatabaseAndTables() == false) { //in case of fail do not close this window\n+\t\t\t\t\t\t\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tdbPortal.finalize();\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t}\t\t\t\n+\t\t}\n+\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t}\n+\t\n+\tprivate boolean createNewDatabaseAndTables() {\n+\t\t\n+\t\tif (dbPortal.connect() == false) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (1)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\t//FIXME prone to sql injection\n+\t\t\n+\t\tif (dbPortal.executeParameterizedNonQuery(\"CREATE DATABASE ? COLLATE utf8_general_ci\", mysqlDatabaseNameTextField.getText()) != 1) {\n+\t\t\t\n+\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\tdbPortal.finalize();\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\t/*if (dbPortal.executeNonQuery(\"CREATE DATABASE \" + mysqlDatabaseNameTextField.getText() + \" COLLATE utf8_general_ci\") != 1) {\n+\t\t\t\n+\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\tdbPortal.finalize();\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn false;\n+\t\t}*/\n+\t\t\n+\t\tdbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());\n+\t\tdbPortal.disconnect();\n+\t\t\n+\t\tif (dbPortal.connect() == false) { //false positive for database creation\n+\t\t\t\n+\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n+\t\t\tdbPortal.disconnect();\n+\t\t\t\n+\t\t\tif (dbPortal.connect()) {\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t}\t\t\t\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (2)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL,\" + \n+\t\t\t\t\"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)\");\n+\t\t\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"order_time datetime NOT NULL, order_operator_id int NOT NULL,\" +\n+\t\t\t\t\"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n+\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,\tproduct_price decimal(10,2) NOT NULL)\");\n+\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"order_detail_order_id int NOT NULL, order_detail_product_id int NOT NULL, \" +\n+\t\t\t\t\"order_detail_product_quantity int NOT NULL,\" +\n+\t\t\t\t\"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE,\" +\n+\t\t\t\t\"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n+\t\t\n+\t\t/* for testing only; not needed any more\n+\t\ttry {\n+\t\t\tif (dbPortal.executeNonQuery(\"INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)\" + \n+\t\t\t\t\t\" VALUES ('operator1', '\" + Md5hashcalc.calculateMD5hash(\"operator1\")  + \"', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd')\") != 1) {\n+\t\t\t\t\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t\tdbPortal.finallize();\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd MD5!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\tSystem.exit(-1);\n+\t\t}*/\n+\t\t\n+\t\treturn true;\n+\t}\t\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/41/d0500513b75d001211398853d386ea7d",
          "status": "renamed",
          "additions": 62,
          "deletions": 40,
          "patch": "@@ -3,17 +3,18 @@ import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n import java.awt.event.WindowEvent;\n \n-import javax.swing.JButton;\n-\n import javax.swing.JFrame;\n import javax.swing.JLabel;\n import javax.swing.JPasswordField;\n import javax.swing.JTextField;\n+import javax.swing.WindowConstants;\n+import javax.swing.JButton;\n import javax.swing.JOptionPane;\n \n import database_management.MySQLdbManager;\n \n public class databaseConnectWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3002L;\n \n \tprivate final JLabel label = new JLabel();\n \tprivate final JLabel label_1 = new JLabel();\n@@ -33,7 +34,7 @@ public class databaseConnectWindow extends JFrame {\n \t * @param args\n \t */\n \tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n+\t\tEventQueue.invokeLater(new Runnable() { \n \t\t\tpublic void run() {\n \t\t\t\ttry {\n \t\t\t\t\tdatabaseConnectWindow frame = new databaseConnectWindow();\n@@ -42,7 +43,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\t\t\te.printStackTrace();\n \t\t\t\t}\n \t\t\t}\n-\t\t});\n+\t\t});\t\t\n \t}\n \n \t/**\n@@ -51,7 +52,7 @@ public class databaseConnectWindow extends JFrame {\n \tpublic databaseConnectWindow() {\n \t\tsuper();\n \t\tsetBounds(100, 100, 384, 203);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n \t\ttry {\n \t\t\tjbInit();\n \t\t} catch (Throwable e) {\n@@ -115,6 +116,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\tconnectToDatabaseButton_actionPerformed(e);\n \t\t}\n \t}\n+\n \tprotected void connectToDatabaseButton_actionPerformed(ActionEvent e) {\n \t\t\n \t\tString password = \"\";\n@@ -136,7 +138,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\tdbPortal.disconnect(); //just in case\n \t\t\t\n \t\t\tif (dbPortal.connect() == false) { //connection settings problem or not running MySQL server\n-\t\t\t\tdbPortal.finallize();\n+\t\t\t\tdbPortal.finalize();\n \t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n \t\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n \t\t\t\t\n@@ -152,11 +154,11 @@ public class databaseConnectWindow extends JFrame {\n \t\t\t\t\tif (createNewDatabaseAndTables() == false) { //in case of fail do not close this window\n \t\t\t\t\t\t\n \t\t\t\t\t\treturn;\n-\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\n-\t\t\t\t\tdbPortal.finallize();\n+\t\t\t\t\tdbPortal.finalize();\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t\t\n@@ -171,59 +173,79 @@ public class databaseConnectWindow extends JFrame {\n \t\t\n \t\tif (dbPortal.connect() == false) {\n \t\t\t\n-\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (1)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n \t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n-\t\t\tdbPortal.finallize();\n+\t\t\tdbPortal.finalize();\n \t\t\treturn false;\n \t\t}\n \t\t\n-\t\tif (dbPortal.executeNonQuery(\"CREATE DATABASE \" + mysqlDatabaseNameTextField.getText()) != 1) {\n+\t\t//FIXME prone??? to sql injection maybe??\n+\t\t\n+\t\tif (dbPortal.executeNonQuery(\"CREATE DATABASE \" + mysqlDatabaseNameTextField.getText() + \" COLLATE utf8_general_ci\") != 1) {\n \t\t\t\n+\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\tdbPortal.finalize();\n \t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\", \n-\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n-\t\t\tdbPortal.disconnect();\n-\t\t\tdbPortal.finallize();\n+\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n \t\t\treturn false;\n \t\t}\n \t\t\n-\t\tif (dbPortal.executeNonQuery(\"CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key,\" + \n-\t\t\t\t\"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(20) NOT NULL,\" + \n-\t\t\t\t\"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)\") == 0) {\n+\t\tdbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());\n+\t\tdbPortal.disconnect();\n+\t\t\n+\t\tif (dbPortal.connect() == false) { //false positive for database creation\n \t\t\t\n+\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n \t\t\tdbPortal.disconnect();\n-\t\t\tdbPortal.finallize();\n+\t\t\t\n+\t\t\tif (dbPortal.connect()) {\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t}\t\t\t\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (2)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n \t\t\treturn false;\n \t\t}\n \t\t\n-\t\tif (dbPortal.executeNonQuery(\"CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL,\" + \n+\t\t\t\t\"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)\");\n+\t\t\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key,\" + \n \t\t\t\t\"order_time datetime NOT NULL, order_operator_id int NOT NULL,\" +\n-\t\t\t\t\"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)\") == 0) {\n-\t\t\t\n-\t\t\tdbPortal.disconnect();\n-\t\t\tdbPortal.finallize();\n-\t\t\treturn false;\n-\t\t}\n+\t\t\t\t\"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n \n-\t\tif (dbPortal.executeNonQuery(\"CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key,\" + \n-\t\t\t\t\"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,\tproduct_price decimal(10,2) NOT NULL)\") == 0) {\n-\t\t\t\n-\t\t\tdbPortal.disconnect();\n-\t\t\tdbPortal.finallize();\n-\t\t\treturn false;\n-\t\t}\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,\tproduct_price decimal(10,2) NOT NULL)\");\n \n-\t\tif (dbPortal.executeNonQuery(\"CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key,\" + \n \t\t\t\t\"order_detail_order_id int NOT NULL, order_detail_product_id int NOT NULL, \" +\n \t\t\t\t\"order_detail_product_quantity int NOT NULL,\" +\n \t\t\t\t\"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE,\" +\n-\t\t\t\t\"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)\") == 0) {\n-\t\t\t\n-\t\t\tdbPortal.disconnect();\n-\t\t\tdbPortal.finallize();\n-\t\t\treturn false;\n+\t\t\t\t\"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n+\t\t\n+\t\t/* for testing only; not needed any more\n+\t\ttry {\n+\t\t\tif (dbPortal.executeNonQuery(\"INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)\" + \n+\t\t\t\t\t\" VALUES ('operator1', '\" + Md5hashcalc.calculateMD5hash(\"operator1\")  + \"', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd')\") != 1) {\n+\t\t\t\t\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t\tdbPortal.finallize();\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\n+\t\t\t\treturn false;\n+\t\t\t}\n \t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd MD5!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\tSystem.exit(-1);\n+\t\t}*/\n \t\t\n \t\treturn true;\n-\t}\n-\n+\t}\t\n }"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/42/203efae3ff5c00121f22d5fb8a5d79d9",
          "status": "removed",
          "additions": 0,
          "deletions": 127,
          "patch": "@@ -1,127 +0,0 @@\n-import java.awt.EventQueue;\n-import javax.swing.JButton;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPasswordField;\n-import javax.swing.JTextField;\n-\n-import java.sql.ResultSet;\n-import database_management.MySQLdbManager;\n-import md5_calculator.Md5hashcalc;\n-\n-public class operatorUserSettingsWindow extends JFrame {\n-\n-\tprivate final JLabel usernameLabel = new JLabel();\n-\tprivate final JLabel passwordLabel = new JLabel();\n-\tprivate final JLabel passwordAgainLabel = new JLabel();\n-\tprivate final JLabel nameLabel = new JLabel();\n-\tprivate final JLabel lastNameLabel = new JLabel();\n-\tprivate final JButton updateButton = new JButton();\n-\tprivate final JTextField firstNameTextField = new JTextField();\n-\tprivate final JTextField lastNameTextField = new JTextField();\n-\tprivate final JPasswordField passwordPasswordField = new JPasswordField();\n-\tprivate final JPasswordField passwordAgainPasswordField = new JPasswordField();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\toperatorUserSettingsWindow frame = new operatorUserSettingsWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic operatorUserSettingsWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 314, 214);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\tgetContentPane().setLayout(null);\n-\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"operatorUserSettings\");\n-\t\t\n-\t\tgetContentPane().add(usernameLabel);\n-\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tusernameLabel.setBounds(10, 0, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordLabel);\n-\t\tpasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordLabel.setBounds(10, 76, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordAgainLabel);\n-\t\tpasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordAgainLabel.setBounds(10, 95, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(nameLabel);\n-\t\tnameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n-\t\tnameLabel.setBounds(10, 32, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(lastNameLabel);\n-\t\tlastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlastNameLabel.setBounds(10, 54, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(updateButton);\n-\t\tupdateButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tupdateButton.setBounds(93, 140, 106, 26);\n-\t\t\n-\t\tgetContentPane().add(firstNameTextField);\n-\t\tfirstNameTextField.setBounds(113, 30, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(lastNameTextField);\n-\t\tlastNameTextField.setBounds(113, 52, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordPasswordField);\n-\t\tpasswordPasswordField.setBounds(113, 74, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordAgainPasswordField);\n-\t\tpasswordAgainPasswordField.setBounds(113, 97, 175, 20);\n-\t\t\n-\t\tgetCurrentUserData();\n-\t}\n-\t\n-\tprivate void getCurrentUserData() {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (databaseConnectWindow.dbPortal.isConnected() == false) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_username, operator_password, \" + \n-\t\t\t\t\"operator_first_name, operator_last_name FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId);\n-\t\t\n-\t\tif ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t\n-\t\t}\n-\t\tcatch (Exception ex) {\t\t\t\n-\t\t}\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/46/008349d2ab5d00121890bdcc27f78f62",
          "status": "added",
          "additions": 334,
          "deletions": 0,
          "patch": "@@ -0,0 +1,334 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.JButton;\n+import javax.swing.WindowConstants;\n+import javax.swing.border.TitledBorder;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserLoginWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3003L;\n+\n+\tprivate final JPanel groupLoginPanel = new JPanel();\n+\tprivate final JPanel groupCreateNewUserPanel = new JPanel();\n+\tprivate final JLabel loginUsernameLabel = new JLabel();\n+\tprivate final JLabel loginPasswordLabel = new JLabel();\n+\tprivate final JButton loginButton = new JButton();\n+\tprivate final JTextField loginUsernameTextField = new JTextField();\n+\tprivate final JPasswordField loginPasswordPasswordField = new JPasswordField();\n+\tprivate final JLabel newUsernameLabel = new JLabel();\n+\tprivate final JLabel newPasswordLabel = new JLabel();\n+\tprivate final JLabel newUserFirstNameLabel = new JLabel();\n+\tprivate final JLabel newUserLastNameLabel = new JLabel();\n+\tprivate final JButton createNewOperatorButton = new JButton();\n+\tprivate final JTextField newUsernameTextField = new JTextField();\n+\tprivate final JTextField newFirstNameTextField = new JTextField();\n+\tprivate final JPasswordField newPasswordPasswordField = new JPasswordField();\n+\tprivate final JTextField newLastNameTextField = new JTextField();\n+\t\n+\tpublic static int loggedUserId = -1;\n+\tpublic static String loggedUserNames = \"\";\n+\t\n+\tprivate final JLabel newPasswordAgainLabel = new JLabel();\n+\tprivate final JPasswordField newPasswordPasswordAgainField = new JPasswordField();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserLoginWindow frame = new operatorUserLoginWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserLoginWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 518, 242);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorLoginWindow\");\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\t\n+\t\tgetContentPane().add(groupLoginPanel);\n+\t\tgroupLoginPanel.setLayout(null);\n+\t\tgroupLoginPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupLoginPanel.setBounds(10, 10, 243, 133);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameLabel);\n+\t\tloginUsernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginUsernameLabel.setBounds(10, 31, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordLabel);\n+\t\tloginPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginPasswordLabel.setBounds(10, 53, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginButton);\n+\t\tloginButton.addActionListener(new LoginButtonActionListener());\n+\t\tloginButton.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tloginButton.setBounds(127, 93, 106, 26);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameTextField);\n+\t\tloginUsernameTextField.setBounds(96, 29, 137, 20);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordPasswordField);\n+\t\tloginPasswordPasswordField.setBounds(96, 51, 137, 20);\n+\t\t\n+\t\tgetContentPane().add(groupCreateNewUserPanel);\n+\t\tgroupCreateNewUserPanel.setLayout(null);\n+\t\tgroupCreateNewUserPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupCreateNewUserPanel.setBounds(259, 10, 243, 194);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameLabel);\n+\t\tnewUsernameLabel.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUsernameLabel.setBounds(10, 32, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordLabel);\n+\t\tnewPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordLabel.setBounds(10, 54, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserFirstNameLabel);\n+\t\tnewUserFirstNameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnewUserFirstNameLabel.setBounds(10, 98, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserLastNameLabel);\n+\t\tnewUserLastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUserLastNameLabel.setBounds(10, 120, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(createNewOperatorButton);\n+\t\tcreateNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());\n+\t\tcreateNewOperatorButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tcreateNewOperatorButton.setBounds(127, 158, 106, 26);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameTextField);\n+\t\tnewUsernameTextField.setBounds(111, 30, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newFirstNameTextField);\n+\t\tnewFirstNameTextField.setBounds(111, 96, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordField);\n+\t\tnewPasswordPasswordField.setBounds(111, 52, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newLastNameTextField);\n+\t\tnewLastNameTextField.setBounds(111, 118, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordAgainLabel);\n+\t\tnewPasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordAgainLabel.setBounds(10, 76, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordAgainField);\n+\t\tnewPasswordPasswordAgainField.setBounds(111, 75, 122, 20);\n+\t}\n+\tprivate class LoginButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tloginButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class CreateNewOperatorButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tcreateNewOperatorButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\t\n+\tprotected void loginButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tString password = \"\";\n+\t\t\t\t\n+\t\t\t\tchar[] pass = loginPasswordPasswordField.getPassword();\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\n+\t\t\t\tResultSet rs = null;\n+\t\t\t\t\n+\t\t\t\ttry {\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\t/*rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE\" + \n+\t\t\t\t\t\t\" operator_username='\" + loginUsernameTextField.getText() + \"' AND operator_password='\" +\n+\t\t\t\t\t\tMd5hashcalc.calculateMD5hash(password) + \"'\");*/\n+\t\t\t\t\tObject[] params = new Object[2];\n+\t\t\t\t\tparams[0] = loginUsernameTextField.getText();\n+\t\t\t\t\tparams[1] = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t\n+\t\t\t\t\trs = databaseConnectWindow.dbPortal.executeParameterizedQuery(\"SELECT operator_id, operator_first_name, \" + \"\" +\n+\t\t\t\t\t\t\t\"operator_last_name FROM operators WHERE operator_username=? AND operator_password=?\", params);\n+\t\t\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (rs != null) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tloggedUserId = rs.getInt(1);\n+\t\t\t\t\t\tloggedUserNames = rs.getString(2) + \" \" + rs.getString(3);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\t\t\n+\t}\n+\t\n+\tprotected void createNewOperatorButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tchar[] pass = newPasswordPasswordField.getPassword();\n+\t\t\t\tString password = \"\";\n+\t\t\t\tString encryptedPassword = \"\";\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tchar[] pass2 = newPasswordPasswordAgainField.getPassword();\n+\t\t\t\t\n+\t\t\t\tif (pass.length == pass2.length) {\n+\t\t\t\t\n+\t\t\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tif (pass[i] != pass2[i]) {\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\t\t\t\t\n+\t\t\t\tif ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && \n+\t\t\t\t\t\t(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tencryptedPassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT COUNT(*) FROM operators WHERE operator_username='\" +\n+\t\t\t\t\t\t\tnewUsernameTextField.getText() + \"'\");\n+\t\t\t\t\t\n+\t\t\t\t\tint usersCount = 0;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tusersCount = rs.getInt(1);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\t\t\t\t\t\t\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\tif ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {\t\t\t\t\t\t\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t//no such existing username so now we create it\n+\t\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"INSERT INTO operators(operator_username, operator_password, \" +\n+\t\t\t\t\t\t\t\t\"operator_first_name, operator_last_name) VALUES('\" + newUsernameTextField.getText() + \"', '\" +\n+\t\t\t\t\t\t\t\tencryptedPassword + \"', '\" + newFirstNameTextField.getText() + \"', '\" + newLastNameTextField.getText() + \"')\") != 1) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse { //everything ok so login now\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tloginUsernameTextField.setText(newUsernameTextField.getText());\n+\t\t\t\t\t\t\tloginPasswordPasswordField.setText(password);\n+\t\t\t\t\t\t\tloginButton_actionPerformed(null);\n+\t\t\t\t\t\t}\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.getLastError() != null) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t}\t\t\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/47/a0f5259eb55c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 254,
          "patch": "@@ -1,254 +0,0 @@\n-import java.awt.BorderLayout;\n-import java.awt.Component;\n-import java.awt.Dimension;\n-import java.awt.EventQueue;\n-import java.awt.FlowLayout;\n-import java.awt.GridLayout;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.event.WindowListener;\n-import javax.swing.BoxLayout;\n-import javax.swing.JButton;\n-import javax.swing.JComponent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.ActionEvent;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JMenu;\n-import javax.swing.JMenuBar;\n-import javax.swing.JMenuItem;\n-import javax.swing.JOptionPane;\n-import javax.swing.JPanel;\n-import javax.swing.JSeparator;\n-import javax.swing.SpringLayout;\n-import javax.swing.border.BevelBorder;\n-import javax.swing.border.EtchedBorder;\n-import org.jdesktop.layout.GroupLayout;\n-import org.jdesktop.layout.LayoutStyle;\n-import com.jgoodies.forms.factories.FormFactory;\n-import com.jgoodies.forms.layout.CellConstraints;\n-import com.jgoodies.forms.layout.ColumnSpec;\n-import com.jgoodies.forms.layout.FormLayout;\n-import com.jgoodies.forms.layout.RowSpec;\n-\n-public class mainWindow extends JFrame {\n-\n-\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n-\tprivate final JMenu File = new JMenu();\n-\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n-\tprivate final JMenu Operations = new JMenu();\n-\tprivate final JMenu Help = new JMenu();\n-\tprivate final JMenuItem HelpAbout = new JMenuItem();\n-\tprivate final JMenuItem FileExit = new JMenuItem();\n-\tprivate static mainWindow mainWindowPointer;\n-\t\n-\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n-\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n-\tprivate final JPanel panel = new JPanel();\n-\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n-\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tmainWindow frame = new mainWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic mainWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 682, 438);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\tmainWindowPointer = this;\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\t\t\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\taddWindowListener(new ThisWindowListener());\n-\t\tgetContentPane().setLayout(new BorderLayout());\n-\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"mainWindow\");\n-\t\t\n-\t\tsetJMenuBar(mainWindowMenu);\n-\t\t\n-\t\tmainWindowMenu.add(File);\n-\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileConnectToDb);\n-\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n-\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileDisconnectFromDb);\n-\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n-\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\tFileDisconnectFromDb.setEnabled(false);\n-\n-\t\tFile.addSeparator();\n-\t\t\n-\t\tFile.add(FileExit);\n-\t\tFileExit.addActionListener(new FileExitActionListener());\n-\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tmainWindowMenu.add(Operations);\n-\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tOperations.setEnabled(false);\n-\t\t\n-\t\tmainWindowMenu.add(Help);\n-\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tHelp.add(HelpAbout);\n-\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n-\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n-\t\t\tnew ColumnSpec[] {\n-\t\t\t\tColumnSpec.decode(\"149dlu\"),\n-\t\t\t\tColumnSpec.decode(\"72px\"),\n-\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n-\t\t\tnew RowSpec[] {\n-\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n-\t\t\t\tRowSpec.decode(\"16px\")}));\n-\t\tmainWindowStatusPanel.setSize(666, 25);\n-\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n-\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n-\t\t\n-\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n-\t\t\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));\n-\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n-\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\tmainWindowStatusPanelSetEnabled(false);\n-\t}\n-\t\n-\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n-\t\t\n-\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n-\t\t\n-\t\tfor (int i = 0; i < comps.length; i++) {\n-\t\t\n-\t\t\tcomps[i].setEnabled(enable);\t\n-\t\t}\n-\t\t\n-\t\tmainWindowStatusPanel.setEnabled(enable);\n-\t}\n-\t\n-\tprivate class ThisWindowListener extends WindowAdapter {\n-\t\tpublic void windowClosing(WindowEvent e) {\n-\t\t\tthis_windowClosing(e);\n-\t\t}\n-\t}\n-\tprivate class FileExitActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileExit_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileConnectToDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileConnectToDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileDisconnectFromDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n-\t\t}\n-\t}\n-\n-\tprotected void this_windowClosing(WindowEvent e) {\n-\t\t\n-\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-\t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t}\n-\t\t}\n-\t\tthis.dispose();\n-\t\t//System.exit(0);\n-\t}\n-\t\n-\tprotected void fileExit_actionPerformed(ActionEvent e) {\n-\n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n-\t}\n-\t\n-\t////////////////////////////////////////////////////////////////////////\n-\t\n-\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\t//databaseConnectWindow.main(null);\n-\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n-\t\tdcw.setVisible(true);\n-\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n-\t}\n-\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n-\t\t\n-        public void windowClosing(WindowEvent e) {\n-            \n-        \te.getWindow().dispose(); \n-        \t\n-        \tif (databaseConnectWindow.dbPortal != null) {\n-    \t\t\t\n-    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-    \t\t\t\t\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(true);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n-    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n-    \t\t\t}\n-    \t\t\telse {\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n-    \t\t\t}\n-    \t\t}            \n-        }\n-    };\n-    \n-    ////////////////////////////////////////////////////////////////////////\n-    \n-\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t\n-\t\t\tthis.FileConnectToDb.setEnabled(true);\n-\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n-\t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\t\t\n-\t\t}\n-\t}\n-\t\n-\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\toperatorUserLogin oul = new operatorUserLogin();\n-\t\toul.setVisible(true);\n-//\t\toul.addWindowListener(l)\n-\t}\n-\t\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/49/40fed919a55d00121890bdcc27f78f62",
          "status": "added",
          "additions": 391,
          "deletions": 0,
          "patch": "@@ -0,0 +1,391 @@\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Insets;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import javax.swing.JButton;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.border.EtchedBorder;\n+import com.jgoodies.forms.factories.FormFactory;\n+import com.jgoodies.forms.layout.CellConstraints;\n+import com.jgoodies.forms.layout.ColumnSpec;\n+import com.jgoodies.forms.layout.FormLayout;\n+import com.jgoodies.forms.layout.RowSpec;\n+\n+\n+public class mainWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3001L;\n+\n+\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n+\tprivate final JMenu File = new JMenu();\n+\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n+\tprivate final JMenu Operations = new JMenu();\n+\tprivate final JMenu Help = new JMenu();\n+\tprivate final JMenuItem HelpAbout = new JMenuItem();\n+\tprivate final JMenuItem FileExit = new JMenuItem();\n+\tprivate static mainWindow mainWindowPointer;\n+\t\n+\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n+\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n+\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tmainWindow frame = new mainWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic mainWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 682, 438);\n+\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tmainWindowPointer = this;\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\t\t\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\taddWindowListener(new ThisWindowListener());\n+\t\tgetContentPane().setLayout(new BorderLayout());\n+\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"mainWindow\");\n+\t\t\n+\t\tsetJMenuBar(mainWindowMenu);\n+\t\t\n+\t\tmainWindowMenu.add(File);\n+\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileConnectToDb);\n+\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n+\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileDisconnectFromDb);\n+\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n+\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\tFileDisconnectFromDb.setEnabled(false);\n+\n+\t\tFile.addSeparator();\n+\t\t\n+\t\tFile.add(FileExit);\n+\t\tFileExit.addActionListener(new FileExitActionListener());\n+\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Operations);\n+\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tOperations.setEnabled(false);\n+\t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Help);\n+\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n+\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n+\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n+\t\t\tnew ColumnSpec[] {\n+\t\t\t\tColumnSpec.decode(\"149dlu\"),\n+\t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n+\t\t\tnew RowSpec[] {\n+\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n+\t\t\t\tRowSpec.decode(\"16px\")}));\n+\t\tmainWindowStatusPanel.setSize(666, 25);\n+\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n+\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n+\t\t\n+\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n+\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelSetEnabled(false);\n+\t}\n+\t\n+\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n+\t\t\n+\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n+\t\t\n+\t\tfor (int i = 0; i < comps.length; i++) {\n+\t\t\n+\t\t\tcomps[i].setEnabled(enable);\t\n+\t\t}\n+\t\t\n+\t\tmainWindowStatusPanel.setEnabled(enable);\n+\t}\n+\t\n+\tprivate class ThisWindowListener extends WindowAdapter {\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tthis_windowClosing(e);\n+\t\t}\n+\t}\n+\tprivate class FileExitActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileExit_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileConnectToDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileConnectToDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileDisconnectFromDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\n+\tprotected void this_windowClosing(WindowEvent e) {\n+\t\t\n+\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t}\n+\t\t}\n+\t\tthis.dispose();\n+\t\t//System.exit(0);\n+\t}\n+\t\n+\tprotected void fileExit_actionPerformed(ActionEvent e) {\n+\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n+\t\tdcw.setVisible(true);\n+\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n+\t}\n+\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n+\t\t\n+        public void windowClosing(WindowEvent e) {\n+            \n+        \te.getWindow().dispose(); \n+        \t\n+        \tif (databaseConnectWindow.dbPortal != null) {\n+    \t\t\t\n+    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n+    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n+    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n+    \t\t\t}\n+    \t\t\telse {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n+    \t\t\t}\n+    \t\t}            \n+        }\n+    };\n+    \n+    ////////////////////////////////////////////////////////////////////////\n+    \n+\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t\n+\t\t\tthis.FileConnectToDb.setEnabled(true);\n+\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n+\t\t\tthis.Operations.setEnabled(false);\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t}\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n+\t\toul.setVisible(true);\n+\t\toul.addWindowListener(operatorUserLoginWindowClosing);\n+\t}\n+\tprivate static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {\n+\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserLoginWindow.loggedUserNames);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n+\t}\n+\t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n+\t\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/4f/50d63551b65d001211398853d386ea7d",
          "status": "added",
          "additions": 248,
          "deletions": 0,
          "patch": "@@ -0,0 +1,248 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JButton;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserSettingsWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3004L;\n+\n+\tprivate final JLabel usernameLabel = new JLabel();\n+\tprivate final JLabel passwordLabel = new JLabel();\n+\tprivate final JLabel passwordAgainLabel = new JLabel();\n+\tprivate final JLabel nameLabel = new JLabel();\n+\tprivate final JLabel lastNameLabel = new JLabel();\n+\tprivate final JButton updateButton = new JButton();\n+\tprivate final JButton deleteOperator = new JButton();\n+\tprivate final JTextField firstNameTextField = new JTextField();\n+\tprivate final JTextField lastNameTextField = new JTextField();\n+\tprivate final JPasswordField passwordPasswordField = new JPasswordField();\n+\tprivate final JPasswordField passwordAgainPasswordField = new JPasswordField();\t\n+\t\n+\tprivate String currentOperatorPassword = \"\";\n+\tpublic static String operatorFirstNameLastNameCombination = \"\";\t\n+\t\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserSettingsWindow frame = new operatorUserSettingsWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserSettingsWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 314, 255);\n+\t\tsetDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorUserSettings\");\n+\t\t\n+\t\tgetContentPane().add(usernameLabel);\n+\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tusernameLabel.setBounds(10, 0, 278, 16);\n+\t\t\n+\t\tgetContentPane().add(passwordLabel);\n+\t\tpasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tpasswordLabel.setBounds(10, 76, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(passwordAgainLabel);\n+\t\tpasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tpasswordAgainLabel.setBounds(10, 95, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(nameLabel);\n+\t\tnameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnameLabel.setBounds(10, 32, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(lastNameLabel);\n+\t\tlastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlastNameLabel.setBounds(10, 54, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(updateButton);\n+\t\tupdateButton.addActionListener(new UpdateButtonActionListener());\n+\t\tupdateButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tupdateButton.setBounds(90, 130, 137, 26);\n+\t\t\n+\t\tgetContentPane().add(firstNameTextField);\n+\t\tfirstNameTextField.setBounds(113, 30, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(lastNameTextField);\n+\t\tlastNameTextField.setBounds(113, 52, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(passwordPasswordField);\n+\t\tpasswordPasswordField.setBounds(113, 74, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(passwordAgainPasswordField);\n+\t\tpasswordAgainPasswordField.setBounds(113, 97, 175, 20);\n+\t\t\n+\t\tgetCurrentUserData();\n+\t\t\n+\t\tgetContentPane().add(deleteOperator);\n+\t\tdeleteOperator.addActionListener(new DeleteOperatorActionListener());\n+\t\tdeleteOperator.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tdeleteOperator.setBounds(90, 189, 137, 26);\n+\t}\n+\t\n+\tprivate void getCurrentUserData() {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tif (databaseConnectWindow.dbPortal.isConnected() == false) {\n+\t\t\treturn;\n+\t\t}\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_username, operator_password, \" + \n+\t\t\t\t\"operator_first_name, operator_last_name FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId);\n+\t\t\n+\t\tif ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + rs.getString(1));\n+\t\t\tcurrentOperatorPassword = rs.getString(2);\n+\t\t\tfirstNameTextField.setText(rs.getString(3));\n+\t\t\tlastNameTextField.setText(rs.getString(4));\n+\t\t}\n+\t\tcatch (Exception ex) {\t\t\t\n+\t\t}\n+\t\t\n+\t\toperatorFirstNameLastNameCombination = firstNameTextField.getText() + \" \" + lastNameTextField.getText();\n+\t}\n+\t\n+\tprivate class UpdateButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tupdateButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class DeleteOperatorActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tdeleteOperator_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprotected void updateButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tchar[] pass = passwordPasswordField.getPassword();\n+\t\tString password = \"\";\n+\t\t\n+\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\n+\t\t\tpassword += pass[i];\n+\t\t}\n+\t\t\n+\t\tchar[] pass2 = passwordAgainPasswordField.getPassword();\n+\t\tString password2 = \"\";\n+\t\t\n+\t\tfor (int j = 0; j < pass2.length; j++) {\n+\t\t\t\n+\t\t\tpassword2 += pass2[j];\n+\t\t}\n+\t\t\n+\t\tif (password.compareTo(password2) != 0) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (password.length() > 3) { //password update will be performed too\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tpassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\tcurrentOperatorPassword = password;\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\\n\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\t\t\t\n+\t\t}\n+\t\telse {\n+\t\t\tif (password.length() > 0) {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd 4 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tif ((firstNameTextField.getText().length() <= 3) || (lastNameTextField.getText().length() <= 3)) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal.executeParameterizedNonQuery(\"UPDATE operators SET operator_password=? \" +\n+\t\t\t\t\"operator_first_name=? operator_last_name=? WHERE operator_id=?\", currentOperatorPassword, \n+\t\t\t\tfirstNameTextField.getText(), lastNameTextField.getText(), operatorUserLoginWindow.loggedUserId) != 1) {\n+\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\" + databaseConnectWindow.dbPortal.getLastError(), \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorFirstNameLastNameCombination = firstNameTextField.getText() + \" \" + lastNameTextField.getText();\n+\t\toperatorUserLoginWindow.loggedUserNames = operatorFirstNameLastNameCombination; //in case\n+\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t}\n+\t\n+\tprotected void deleteOperator_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\t//we can not delete not existing operator\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (JOptionPane.showConfirmDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\\n\" + \n+\t\t\t\t\"\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd, \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\\n\\n\\t\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd?\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\tJOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"DELETE FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId) != 1) {\n+\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t}\n+\t\t\n+\t\treturn;\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/4f/f0d96297ff5c00121f22d5fb8a5d79d9",
          "status": "removed",
          "additions": 0,
          "deletions": 127,
          "patch": "@@ -1,127 +0,0 @@\n-import java.awt.EventQueue;\n-import javax.swing.JButton;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPasswordField;\n-import javax.swing.JTextField;\n-\n-import java.sql.ResultSet;\n-import database_management.MySQLdbManager;\n-import md5_calculator.Md5hashcalc;\n-\n-public class operatorUserSettingsWindow extends JFrame {\n-\n-\tprivate final JLabel usernameLabel = new JLabel();\n-\tprivate final JLabel passwordLabel = new JLabel();\n-\tprivate final JLabel passwordAgainLabel = new JLabel();\n-\tprivate final JLabel nameLabel = new JLabel();\n-\tprivate final JLabel lastNameLabel = new JLabel();\n-\tprivate final JButton updateButton = new JButton();\n-\tprivate final JTextField firstNameTextField = new JTextField();\n-\tprivate final JTextField lastNameTextField = new JTextField();\n-\tprivate final JPasswordField passwordPasswordField = new JPasswordField();\n-\tprivate final JPasswordField passwordAgainPasswordField = new JPasswordField();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\toperatorUserSettingsWindow frame = new operatorUserSettingsWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic operatorUserSettingsWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 314, 214);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\tgetContentPane().setLayout(null);\n-\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"operatorUserSettings\");\n-\t\t\n-\t\tgetContentPane().add(usernameLabel);\n-\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tusernameLabel.setBounds(10, 0, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordLabel);\n-\t\tpasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordLabel.setBounds(10, 76, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordAgainLabel);\n-\t\tpasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordAgainLabel.setBounds(10, 95, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(nameLabel);\n-\t\tnameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n-\t\tnameLabel.setBounds(10, 32, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(lastNameLabel);\n-\t\tlastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlastNameLabel.setBounds(10, 54, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(updateButton);\n-\t\tupdateButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tupdateButton.setBounds(93, 140, 106, 26);\n-\t\t\n-\t\tgetContentPane().add(firstNameTextField);\n-\t\tfirstNameTextField.setBounds(113, 30, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(lastNameTextField);\n-\t\tlastNameTextField.setBounds(113, 52, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordPasswordField);\n-\t\tpasswordPasswordField.setBounds(113, 74, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordAgainPasswordField);\n-\t\tpasswordAgainPasswordField.setBounds(113, 97, 175, 20);\n-\t\t\n-\t\tgetCurrentUserData();\n-\t}\n-\t\n-\tprivate void getCurrentUserData() {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (databaseConnectWindow.dbPortal.isConnected() == false) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_username, operator_password, \" + \n-\t\t\t\t\"operator_first_name, operator_last_name FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId);\n-\t\t\n-\t\tif ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t}\n-\t\tcatch (Exception ex) {\n-\t\t\t\n-\t\t}\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/54/50455296a45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 392,
          "deletions": 0,
          "patch": "@@ -0,0 +1,392 @@\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Insets;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import javax.swing.JButton;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.border.EtchedBorder;\n+import org.jdesktop.layout.GroupLayout;\n+import org.jdesktop.layout.LayoutStyle;\n+import com.jgoodies.forms.factories.FormFactory;\n+import com.jgoodies.forms.layout.CellConstraints;\n+import com.jgoodies.forms.layout.ColumnSpec;\n+import com.jgoodies.forms.layout.FormLayout;\n+import com.jgoodies.forms.layout.RowSpec;\n+\n+\n+public class mainWindow extends JFrame {\n+\n+\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n+\tprivate final JMenu File = new JMenu();\n+\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n+\tprivate final JMenu Operations = new JMenu();\n+\tprivate final JMenu Help = new JMenu();\n+\tprivate final JMenuItem HelpAbout = new JMenuItem();\n+\tprivate final JMenuItem FileExit = new JMenuItem();\n+\tprivate static mainWindow mainWindowPointer;\n+\t\n+\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n+\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n+\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tmainWindow frame = new mainWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic mainWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 682, 438);\n+\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tmainWindowPointer = this;\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\t\t\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\taddWindowListener(new ThisWindowListener());\n+\t\tgetContentPane().setLayout(new BorderLayout());\n+\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"mainWindow\");\n+\t\t\n+\t\tsetJMenuBar(mainWindowMenu);\n+\t\t\n+\t\tmainWindowMenu.add(File);\n+\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileConnectToDb);\n+\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n+\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileDisconnectFromDb);\n+\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n+\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\tFileDisconnectFromDb.setEnabled(false);\n+\n+\t\tFile.addSeparator();\n+\t\t\n+\t\tFile.add(FileExit);\n+\t\tFileExit.addActionListener(new FileExitActionListener());\n+\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Operations);\n+\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tOperations.setEnabled(false);\n+\t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Help);\n+\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n+\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n+\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n+\t\t\tnew ColumnSpec[] {\n+\t\t\t\tColumnSpec.decode(\"149dlu\"),\n+\t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n+\t\t\tnew RowSpec[] {\n+\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n+\t\t\t\tRowSpec.decode(\"16px\")}));\n+\t\tmainWindowStatusPanel.setSize(666, 25);\n+\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n+\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n+\t\t\n+\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n+\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelSetEnabled(false);\n+\t}\n+\t\n+\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n+\t\t\n+\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n+\t\t\n+\t\tfor (int i = 0; i < comps.length; i++) {\n+\t\t\n+\t\t\tcomps[i].setEnabled(enable);\t\n+\t\t}\n+\t\t\n+\t\tmainWindowStatusPanel.setEnabled(enable);\n+\t}\n+\t\n+\tprivate class ThisWindowListener extends WindowAdapter {\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tthis_windowClosing(e);\n+\t\t}\n+\t}\n+\tprivate class FileExitActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileExit_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileConnectToDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileConnectToDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileDisconnectFromDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\n+\tprotected void this_windowClosing(WindowEvent e) {\n+\t\t\n+\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t}\n+\t\t}\n+\t\tthis.dispose();\n+\t\t//System.exit(0);\n+\t}\n+\t\n+\tprotected void fileExit_actionPerformed(ActionEvent e) {\n+\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n+\t\tdcw.setVisible(true);\n+\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n+\t}\n+\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n+\t\t\n+        public void windowClosing(WindowEvent e) {\n+            \n+        \te.getWindow().dispose(); \n+        \t\n+        \tif (databaseConnectWindow.dbPortal != null) {\n+    \t\t\t\n+    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n+    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n+    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n+    \t\t\t}\n+    \t\t\telse {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n+    \t\t\t}\n+    \t\t}            \n+        }\n+    };\n+    \n+    ////////////////////////////////////////////////////////////////////////\n+    \n+\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t\n+\t\t\tthis.FileConnectToDb.setEnabled(true);\n+\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n+\t\t\tthis.Operations.setEnabled(false);\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t}\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n+\t\toul.setVisible(true);\n+\t\toul.addWindowListener(operatorUserLoginWindowClosing);\n+\t}\n+\tprivate static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {\n+\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserLoginWindow.loggedUserNames);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n+\t}\n+\t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n+\t\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/57/200bcdeeb45c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 65,
          "patch": "@@ -1,65 +0,0 @@\n-import java.awt.EventQueue;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPanel;\n-import javax.swing.WindowConstants;\n-import javax.swing.border.EtchedBorder;\n-import javax.swing.border.TitledBorder;\n-\n-\n-public class operatorUserLogin extends JFrame {\n-\n-\tprivate final JPanel groupLoginPanel = new JPanel();\n-\tprivate final JPanel groupCreateNewUserPanel = new JPanel();\n-\t\n-\tpublic static int loggedUserId = -1;\n-\t\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\toperatorUserLogin frame = new operatorUserLogin();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic operatorUserLogin() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 518, 269);\n-\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\tgetContentPane().setLayout(null);\n-\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"operatorLogin\");\n-\t\tsetResizable(false);\n-\t\tsetAlwaysOnTop(true);\n-\t\t\n-\t\tgetContentPane().add(groupLoginPanel);\n-\t\tgroupLoginPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n-\t\tgroupLoginPanel.setBounds(10, 10, 243, 213);\n-\t\t\n-\t\tgetContentPane().add(groupCreateNewUserPanel);\n-\t\tgroupCreateNewUserPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n-\t\tgroupCreateNewUserPanel.setBounds(263, 10, 243, 213);\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/57/900cbfa3a55d00121890bdcc27f78f62",
          "status": "added",
          "additions": 571,
          "deletions": 0,
          "patch": "@@ -0,0 +1,571 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeParameterizedNonQuery(String query, Object[] parameters) {\n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\t//TODO...\n+\t\t// boolean - ok\n+\t\t// String  - ok\n+\t\t// char    - \n+\t\t// byte    -\n+\t\t// short   -\n+\t\t// int     -\n+\t\t// long    -\n+\t\t// double  -\n+\t\t// float   -\n+\t\t// Date    -\n+\t\t// null ???\n+\t\t\n+\t\ttry {\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i, parameters[i]);\n+\t\t\t\t\n+\t\t\t\t/*if (parameters[i] instanceof Boolean) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof String) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setString(i, ((String)parameters[i].toString()));\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof Character) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.set\n+\t\t\t\t}*/\n+\t\t\t}\n+\t\t\t\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns ResultSet with data. For SELECT...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeParameterizedQuery(String query, Object[] parameters) { //executes query and returns ResultSet \n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i, parameters[i]);\n+\t\t\t}\n+\t\t\t\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/6/f02d9590ac5d00121890bdcc27f78f62",
          "status": "added",
          "additions": 572,
          "deletions": 0,
          "patch": "@@ -0,0 +1,572 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeParameterizedNonQuery(String query, Object[] parameters) {\n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\t//TODO...\n+\t\t// boolean - ok\n+\t\t// String  - ok\n+\t\t// char    - \n+\t\t// byte    -\n+\t\t// short   -\n+\t\t// int     -\n+\t\t// long    -\n+\t\t// double  -\n+\t\t// float   -\n+\t\t// Date    -\n+\t\t// null ???\n+\t\t\n+\t\ttry {\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i + 1, parameters[i]);\n+\t\t\t\t\n+\t\t\t\t/*if (parameters[i] instanceof Boolean) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof String) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setString(i, ((String)parameters[i].toString()));\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof Character) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.set\n+\t\t\t\t}*/\n+\t\t\t}\n+\t\t\t\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns ResultSet with data. For SELECT...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeParameterizedQuery(String query, Object[] parameters) { //executes query and returns ResultSet \n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i + 1, parameters[i]);\n+\t\t\t}\n+\t\t\t\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/61/2068ed71a45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 36,
          "deletions": 0,
          "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * MD5 hash calculator wrapper\n+ * ver.-1.00\n+ * (C) 12.01.2013 zhgzhg\n+ */\n+\n+package md5_calculator;\n+\n+import java.security.MessageDigest;\n+import javax.crypto.*;\n+\n+public class Md5hashcalc {\n+\t\n+\tpublic static String calculateMD5hash(String word) throws Exception {\n+\t\t\n+\t\tMessageDigest md5;\n+\t\tString result = \"D41D8CD98F00B204E9800998ECF8427E\"; //empty string\n+\t\t\n+\t\tmd5 = MessageDigest.getInstance(\"MD5\");\n+\t\tmd5.update(word.getBytes(), 0, word.getBytes().length);\n+\t\t\n+\t\tbyte [] wordBytesHash = new byte[16];\n+\t\twordBytesHash = md5.digest();\n+\t\t\n+\t\tif (wordBytesHash.length != 0) {\n+\t\t\tresult = \"\";\n+\t\t\n+\t\t\tfor (int i = 0; i < 16; i++) {\n+\t\t\t\t\n+\t\t\t\tresult += Integer.toString((wordBytesHash[i] & 0xff) + 0x100, 16).substring(1);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/63/f0911911ad5d00121890bdcc27f78f62",
          "status": "added",
          "additions": 334,
          "deletions": 0,
          "patch": "@@ -0,0 +1,334 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.JButton;\n+import javax.swing.WindowConstants;\n+import javax.swing.border.TitledBorder;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserLoginWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3003L;\n+\n+\tprivate final JPanel groupLoginPanel = new JPanel();\n+\tprivate final JPanel groupCreateNewUserPanel = new JPanel();\n+\tprivate final JLabel loginUsernameLabel = new JLabel();\n+\tprivate final JLabel loginPasswordLabel = new JLabel();\n+\tprivate final JButton loginButton = new JButton();\n+\tprivate final JTextField loginUsernameTextField = new JTextField();\n+\tprivate final JPasswordField loginPasswordPasswordField = new JPasswordField();\n+\tprivate final JLabel newUsernameLabel = new JLabel();\n+\tprivate final JLabel newPasswordLabel = new JLabel();\n+\tprivate final JLabel newUserFirstNameLabel = new JLabel();\n+\tprivate final JLabel newUserLastNameLabel = new JLabel();\n+\tprivate final JButton createNewOperatorButton = new JButton();\n+\tprivate final JTextField newUsernameTextField = new JTextField();\n+\tprivate final JTextField newFirstNameTextField = new JTextField();\n+\tprivate final JPasswordField newPasswordPasswordField = new JPasswordField();\n+\tprivate final JTextField newLastNameTextField = new JTextField();\n+\t\n+\tpublic static int loggedUserId = -1;\n+\tpublic static String loggedUserNames = \"\";\n+\t\n+\tprivate final JLabel newPasswordAgainLabel = new JLabel();\n+\tprivate final JPasswordField newPasswordPasswordAgainField = new JPasswordField();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserLoginWindow frame = new operatorUserLoginWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserLoginWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 518, 242);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorLoginWindow\");\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\t\n+\t\tgetContentPane().add(groupLoginPanel);\n+\t\tgroupLoginPanel.setLayout(null);\n+\t\tgroupLoginPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupLoginPanel.setBounds(10, 10, 243, 133);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameLabel);\n+\t\tloginUsernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginUsernameLabel.setBounds(10, 31, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordLabel);\n+\t\tloginPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginPasswordLabel.setBounds(10, 53, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginButton);\n+\t\tloginButton.addActionListener(new LoginButtonActionListener());\n+\t\tloginButton.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tloginButton.setBounds(127, 93, 106, 26);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameTextField);\n+\t\tloginUsernameTextField.setBounds(96, 29, 137, 20);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordPasswordField);\n+\t\tloginPasswordPasswordField.setBounds(96, 51, 137, 20);\n+\t\t\n+\t\tgetContentPane().add(groupCreateNewUserPanel);\n+\t\tgroupCreateNewUserPanel.setLayout(null);\n+\t\tgroupCreateNewUserPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupCreateNewUserPanel.setBounds(259, 10, 243, 194);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameLabel);\n+\t\tnewUsernameLabel.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUsernameLabel.setBounds(10, 32, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordLabel);\n+\t\tnewPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordLabel.setBounds(10, 54, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserFirstNameLabel);\n+\t\tnewUserFirstNameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnewUserFirstNameLabel.setBounds(10, 98, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserLastNameLabel);\n+\t\tnewUserLastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUserLastNameLabel.setBounds(10, 120, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(createNewOperatorButton);\n+\t\tcreateNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());\n+\t\tcreateNewOperatorButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tcreateNewOperatorButton.setBounds(127, 158, 106, 26);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameTextField);\n+\t\tnewUsernameTextField.setBounds(111, 30, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newFirstNameTextField);\n+\t\tnewFirstNameTextField.setBounds(111, 96, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordField);\n+\t\tnewPasswordPasswordField.setBounds(111, 52, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newLastNameTextField);\n+\t\tnewLastNameTextField.setBounds(111, 118, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordAgainLabel);\n+\t\tnewPasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordAgainLabel.setBounds(10, 76, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordAgainField);\n+\t\tnewPasswordPasswordAgainField.setBounds(111, 75, 122, 20);\n+\t}\n+\tprivate class LoginButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tloginButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class CreateNewOperatorButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tcreateNewOperatorButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\t\n+\tprotected void loginButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tString password = \"\";\n+\t\t\t\t\n+\t\t\t\tchar[] pass = loginPasswordPasswordField.getPassword();\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\n+\t\t\t\tResultSet rs = null;\n+\t\t\t\t\n+\t\t\t\ttry {\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\t/*rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE\" + \n+\t\t\t\t\t\t\" operator_username='\" + loginUsernameTextField.getText() + \"' AND operator_password='\" +\n+\t\t\t\t\t\tMd5hashcalc.calculateMD5hash(password) + \"'\");*/\n+\t\t\t\t\tObject[] params = new Object[2];\n+\t\t\t\t\tparams[0] = loginUsernameTextField.getText();\n+\t\t\t\t\tparams[1] = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t\n+\t\t\t\t\trs = databaseConnectWindow.dbPortal.executeParameterizedQuery(\"SELECT operator_id, operator_first_name, \" + \"\" +\n+\t\t\t\t\t\t\t\"operator_last_name FROM operators WHERE operator_username = ? AND operator_password = ?\", params);\n+\t\t\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (rs != null) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tloggedUserId = rs.getInt(1);\n+\t\t\t\t\t\tloggedUserNames = rs.getString(2) + \" \" + rs.getString(3);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\t\t\n+\t}\n+\t\n+\tprotected void createNewOperatorButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tchar[] pass = newPasswordPasswordField.getPassword();\n+\t\t\t\tString password = \"\";\n+\t\t\t\tString encryptedPassword = \"\";\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tchar[] pass2 = newPasswordPasswordAgainField.getPassword();\n+\t\t\t\t\n+\t\t\t\tif (pass.length == pass2.length) {\n+\t\t\t\t\n+\t\t\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tif (pass[i] != pass2[i]) {\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\t\t\t\t\n+\t\t\t\tif ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && \n+\t\t\t\t\t\t(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tencryptedPassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT COUNT(*) FROM operators WHERE operator_username='\" +\n+\t\t\t\t\t\t\tnewUsernameTextField.getText() + \"'\");\n+\t\t\t\t\t\n+\t\t\t\t\tint usersCount = 0;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tusersCount = rs.getInt(1);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\t\t\t\t\t\t\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\tif ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {\t\t\t\t\t\t\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t//no such existing username so now we create it\n+\t\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"INSERT INTO operators(operator_username, operator_password, \" +\n+\t\t\t\t\t\t\t\t\"operator_first_name, operator_last_name) VALUES('\" + newUsernameTextField.getText() + \"', '\" +\n+\t\t\t\t\t\t\t\tencryptedPassword + \"', '\" + newFirstNameTextField.getText() + \"', '\" + newLastNameTextField.getText() + \"')\") != 1) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse { //everything ok so login now\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tloginUsernameTextField.setText(newUsernameTextField.getText());\n+\t\t\t\t\t\t\tloginPasswordPasswordField.setText(password);\n+\t\t\t\t\t\t\tloginButton_actionPerformed(null);\n+\t\t\t\t\t\t}\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.getLastError() != null) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t}\t\t\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/69/20e7fe1cb45d001211398853d386ea7d",
          "status": "added",
          "additions": 324,
          "deletions": 0,
          "patch": "@@ -0,0 +1,324 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.JButton;\n+import javax.swing.WindowConstants;\n+import javax.swing.border.TitledBorder;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserLoginWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3003L;\n+\n+\tprivate final JPanel groupLoginPanel = new JPanel();\n+\tprivate final JPanel groupCreateNewUserPanel = new JPanel();\n+\tprivate final JLabel loginUsernameLabel = new JLabel();\n+\tprivate final JLabel loginPasswordLabel = new JLabel();\n+\tprivate final JButton loginButton = new JButton();\n+\tprivate final JTextField loginUsernameTextField = new JTextField();\n+\tprivate final JPasswordField loginPasswordPasswordField = new JPasswordField();\n+\tprivate final JLabel newUsernameLabel = new JLabel();\n+\tprivate final JLabel newPasswordLabel = new JLabel();\n+\tprivate final JLabel newUserFirstNameLabel = new JLabel();\n+\tprivate final JLabel newUserLastNameLabel = new JLabel();\n+\tprivate final JButton createNewOperatorButton = new JButton();\n+\tprivate final JTextField newUsernameTextField = new JTextField();\n+\tprivate final JTextField newFirstNameTextField = new JTextField();\n+\tprivate final JPasswordField newPasswordPasswordField = new JPasswordField();\n+\tprivate final JTextField newLastNameTextField = new JTextField();\n+\t\n+\tpublic static int loggedUserId = -1;\n+\tpublic static String loggedUserNames = \"\";\n+\t\n+\tprivate final JLabel newPasswordAgainLabel = new JLabel();\n+\tprivate final JPasswordField newPasswordPasswordAgainField = new JPasswordField();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserLoginWindow frame = new operatorUserLoginWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserLoginWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 518, 242);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorLoginWindow\");\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\t\n+\t\tgetContentPane().add(groupLoginPanel);\n+\t\tgroupLoginPanel.setLayout(null);\n+\t\tgroupLoginPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupLoginPanel.setBounds(10, 10, 243, 133);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameLabel);\n+\t\tloginUsernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginUsernameLabel.setBounds(10, 31, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordLabel);\n+\t\tloginPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginPasswordLabel.setBounds(10, 53, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginButton);\n+\t\tloginButton.addActionListener(new LoginButtonActionListener());\n+\t\tloginButton.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tloginButton.setBounds(127, 93, 106, 26);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameTextField);\n+\t\tloginUsernameTextField.setBounds(96, 29, 137, 20);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordPasswordField);\n+\t\tloginPasswordPasswordField.setBounds(96, 51, 137, 20);\n+\t\t\n+\t\tgetContentPane().add(groupCreateNewUserPanel);\n+\t\tgroupCreateNewUserPanel.setLayout(null);\n+\t\tgroupCreateNewUserPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupCreateNewUserPanel.setBounds(259, 10, 243, 194);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameLabel);\n+\t\tnewUsernameLabel.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUsernameLabel.setBounds(10, 32, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordLabel);\n+\t\tnewPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordLabel.setBounds(10, 54, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserFirstNameLabel);\n+\t\tnewUserFirstNameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnewUserFirstNameLabel.setBounds(10, 98, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserLastNameLabel);\n+\t\tnewUserLastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUserLastNameLabel.setBounds(10, 120, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(createNewOperatorButton);\n+\t\tcreateNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());\n+\t\tcreateNewOperatorButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tcreateNewOperatorButton.setBounds(127, 158, 106, 26);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameTextField);\n+\t\tnewUsernameTextField.setBounds(111, 30, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newFirstNameTextField);\n+\t\tnewFirstNameTextField.setBounds(111, 96, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordField);\n+\t\tnewPasswordPasswordField.setBounds(111, 52, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newLastNameTextField);\n+\t\tnewLastNameTextField.setBounds(111, 118, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordAgainLabel);\n+\t\tnewPasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordAgainLabel.setBounds(10, 76, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordAgainField);\n+\t\tnewPasswordPasswordAgainField.setBounds(111, 75, 122, 20);\n+\t}\n+\tprivate class LoginButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tloginButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class CreateNewOperatorButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tcreateNewOperatorButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\t\n+\tprotected void loginButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tString password = \"\";\n+\t\t\t\t\n+\t\t\t\tchar[] pass = loginPasswordPasswordField.getPassword();\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tResultSet rs = null;\n+\t\t\t\t\n+\t\t\t\ttry {\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\trs = databaseConnectWindow.dbPortal.executeParameterizedQuery(\"SELECT operator_id, operator_first_name, \" + \"\" +\n+\t\t\t\t\t\t\t\"operator_last_name FROM operators WHERE operator_username = ? AND operator_password = ?\", \n+\t\t\t\t\t\t\tloginUsernameTextField.getText(), Md5hashcalc.calculateMD5hash(password));\t\t\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (rs != null) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tloggedUserId = rs.getInt(1);\n+\t\t\t\t\t\tloggedUserNames = rs.getString(2) + \" \" + rs.getString(3);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\t\t\n+\t}\n+\t\n+\tprotected void createNewOperatorButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tchar[] pass = newPasswordPasswordField.getPassword();\n+\t\t\t\tString password = \"\";\n+\t\t\t\tString encryptedPassword = \"\";\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tchar[] pass2 = newPasswordPasswordAgainField.getPassword();\n+\t\t\t\t\n+\t\t\t\tif (pass.length == pass2.length) {\n+\t\t\t\t\n+\t\t\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tif (pass[i] != pass2[i]) {\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\t\t\t\t\n+\t\t\t\tif ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && \n+\t\t\t\t\t\t(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tencryptedPassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tResultSet rs = databaseConnectWindow.dbPortal.executeParameterizedQuery(\n+\t\t\t\t\t\t\t\"SELECT COUNT(*) FROM operators WHERE operator_username=?\",\tnewUsernameTextField.getText());\n+\t\t\t\t\t\n+\t\t\t\t\tint usersCount = 0;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tusersCount = rs.getInt(1);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\t\t\t\t\t\t\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\tif ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {\t\t\t\t\t\t\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t//no such existing username so now we create it\n+\t\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"INSERT INTO operators(operator_username, operator_password, \" +\n+\t\t\t\t\t\t\t\t\"operator_first_name, operator_last_name) VALUES('\" + newUsernameTextField.getText() + \"', '\" +\n+\t\t\t\t\t\t\t\tencryptedPassword + \"', '\" + newFirstNameTextField.getText() + \"', '\" + newLastNameTextField.getText() + \"')\") != 1) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse { //everything ok so login now\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tloginUsernameTextField.setText(newUsernameTextField.getText());\n+\t\t\t\t\t\t\tloginPasswordPasswordField.setText(password);\n+\t\t\t\t\t\t\tloginButton_actionPerformed(null);\n+\t\t\t\t\t\t}\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.getLastError() != null) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t}\t\t\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/6d/500d2f6eb45d001211398853d386ea7d",
          "status": "added",
          "additions": 251,
          "deletions": 0,
          "patch": "@@ -0,0 +1,251 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JButton;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserSettingsWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3004L;\n+\n+\tprivate final JLabel usernameLabel = new JLabel();\n+\tprivate final JLabel passwordLabel = new JLabel();\n+\tprivate final JLabel passwordAgainLabel = new JLabel();\n+\tprivate final JLabel nameLabel = new JLabel();\n+\tprivate final JLabel lastNameLabel = new JLabel();\n+\tprivate final JButton updateButton = new JButton();\n+\tprivate final JTextField firstNameTextField = new JTextField();\n+\tprivate final JTextField lastNameTextField = new JTextField();\n+\tprivate final JPasswordField passwordPasswordField = new JPasswordField();\n+\tprivate final JPasswordField passwordAgainPasswordField = new JPasswordField();\n+\t\n+\tprivate String currentOperatorPassword = \"\";\n+\tpublic static String operatorFirstNameLastNameCombination = \"\";\n+\t\n+\tprivate final JButton deleteOperator = new JButton();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserSettingsWindow frame = new operatorUserSettingsWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserSettingsWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 314, 255);\n+\t\tsetDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorUserSettings\");\n+\t\t\n+\t\tgetContentPane().add(usernameLabel);\n+\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tusernameLabel.setBounds(10, 0, 278, 16);\n+\t\t\n+\t\tgetContentPane().add(passwordLabel);\n+\t\tpasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tpasswordLabel.setBounds(10, 76, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(passwordAgainLabel);\n+\t\tpasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tpasswordAgainLabel.setBounds(10, 95, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(nameLabel);\n+\t\tnameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnameLabel.setBounds(10, 32, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(lastNameLabel);\n+\t\tlastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlastNameLabel.setBounds(10, 54, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(updateButton);\n+\t\tupdateButton.addActionListener(new UpdateButtonActionListener());\n+\t\tupdateButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tupdateButton.setBounds(90, 130, 137, 26);\n+\t\t\n+\t\tgetContentPane().add(firstNameTextField);\n+\t\tfirstNameTextField.setBounds(113, 30, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(lastNameTextField);\n+\t\tlastNameTextField.setBounds(113, 52, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(passwordPasswordField);\n+\t\tpasswordPasswordField.setBounds(113, 74, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(passwordAgainPasswordField);\n+\t\tpasswordAgainPasswordField.setBounds(113, 97, 175, 20);\n+\t\t\n+\t\tgetCurrentUserData();\n+\t\t\n+\t\tgetContentPane().add(deleteOperator);\n+\t\tdeleteOperator.addActionListener(new DeleteOperatorActionListener());\n+\t\tdeleteOperator.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tdeleteOperator.setBounds(90, 189, 137, 26);\n+\t}\n+\t\n+\tprivate void getCurrentUserData() {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tif (databaseConnectWindow.dbPortal.isConnected() == false) {\n+\t\t\treturn;\n+\t\t}\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_username, operator_password, \" + \n+\t\t\t\t\"operator_first_name, operator_last_name FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId);\n+\t\t\n+\t\tif ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + rs.getString(1));\n+\t\t\tcurrentOperatorPassword = rs.getString(2);\n+\t\t\tfirstNameTextField.setText(rs.getString(3));\n+\t\t\tlastNameTextField.setText(rs.getString(4));\n+\t\t}\n+\t\tcatch (Exception ex) {\t\t\t\n+\t\t}\n+\t\t\n+\t\toperatorFirstNameLastNameCombination = firstNameTextField.getText() + \" \" + lastNameTextField.getText();\n+\t}\n+\t\n+\tprivate class UpdateButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tupdateButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class DeleteOperatorActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tdeleteOperator_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprotected void updateButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tchar[] pass = passwordPasswordField.getPassword();\n+\t\tString password = \"\";\n+\t\t\n+\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\n+\t\t\tpassword += pass[i];\n+\t\t}\n+\t\t\n+\t\tchar[] pass2 = passwordAgainPasswordField.getPassword();\n+\t\tString password2 = \"\";\n+\t\t\n+\t\tfor (int j = 0; j < pass2.length; j++) {\n+\t\t\t\n+\t\t\tpassword2 += pass2[j];\n+\t\t}\n+\t\t\n+\t\tif (password.compareTo(password2) != 0) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (password.length() > 3) { //password update will be performed too\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tpassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\tcurrentOperatorPassword = password;\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\\n\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\t\t\t\n+\t\t}\n+\t\telse {\n+\t\t\tif (password.length() > 0) {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd 4 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tif ((firstNameTextField.getText().length() <= 3) || (lastNameTextField.getText().length() <= 3)) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\t//FIXME prone to sql injection\n+\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"UPDATE operators SET operator_password='\" + currentOperatorPassword +\n+\t\t\t\t\"', operator_first_name='\" + firstNameTextField.getText() + \"', operator_last_name='\" + \n+\t\t\t\tlastNameTextField.getText() + \"' WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId) != 1) {\n+\t\t\n+\t\t//if (databaseConnectWindow.dbPortal.getLastError() != null) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorFirstNameLastNameCombination = firstNameTextField.getText() + \" \" + lastNameTextField.getText();\n+\t\toperatorUserLoginWindow.loggedUserNames = operatorFirstNameLastNameCombination; //in case\n+\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t}\n+\t\n+\tprotected void deleteOperator_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\t//we can not delete not existing operator\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (JOptionPane.showConfirmDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\\n\" + \n+\t\t\t\t\"\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd, \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\\n\\n\\t\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd?\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\tJOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"DELETE FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId) != 1) {\n+\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t}\n+\t\t\n+\t\treturn;\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/6d/c08119b3a05d00121890bdcc27f78f62",
          "status": "added",
          "additions": 455,
          "deletions": 0,
          "patch": "@@ -0,0 +1,455 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address ot HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/70/d0bf4040fe5c00121f22d5fb8a5d79d9",
          "status": "removed",
          "additions": 0,
          "deletions": 95,
          "patch": "@@ -1,95 +0,0 @@\n-import java.awt.EventQueue;\n-import javax.swing.JButton;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPasswordField;\n-import javax.swing.JTextField;\n-\n-\n-public class operatorUserSettingsWindow extends JFrame {\n-\n-\tprivate final JLabel usernameLabel = new JLabel();\n-\tprivate final JLabel passwordLabel = new JLabel();\n-\tprivate final JLabel passwordAgainLabel = new JLabel();\n-\tprivate final JLabel nameLabel = new JLabel();\n-\tprivate final JLabel lastNameLabel = new JLabel();\n-\tprivate final JButton updateButton = new JButton();\n-\tprivate final JTextField textField = new JTextField();\n-\tprivate final JTextField textField_1 = new JTextField();\n-\tprivate final JPasswordField passwordField = new JPasswordField();\n-\tprivate final JPasswordField passwordField_1 = new JPasswordField();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\toperatorUserSettingsWindow frame = new operatorUserSettingsWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic operatorUserSettingsWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 314, 214);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\tgetContentPane().setLayout(null);\n-\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"operatorUserSettings\");\n-\t\t\n-\t\tgetContentPane().add(usernameLabel);\n-\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tusernameLabel.setBounds(10, 0, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordLabel);\n-\t\tpasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordLabel.setBounds(10, 76, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordAgainLabel);\n-\t\tpasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordAgainLabel.setBounds(10, 95, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(nameLabel);\n-\t\tnameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n-\t\tnameLabel.setBounds(10, 32, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(lastNameLabel);\n-\t\tlastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlastNameLabel.setBounds(10, 54, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(updateButton);\n-\t\tupdateButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tupdateButton.setBounds(93, 140, 106, 26);\n-\t\t\n-\t\tgetContentPane().add(textField);\n-\t\ttextField.setBounds(113, 30, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(textField_1);\n-\t\ttextField_1.setBounds(113, 52, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordField);\n-\t\tpasswordField.setBounds(113, 74, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordField_1);\n-\t\tpasswordField_1.setBounds(113, 97, 175, 20);\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/7a/d0479e0ea45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 400,
          "deletions": 0,
          "patch": "@@ -0,0 +1,400 @@\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.GridLayout;\n+import java.awt.Insets;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JComponent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JSeparator;\n+import javax.swing.SpringLayout;\n+import javax.swing.border.BevelBorder;\n+import javax.swing.border.EtchedBorder;\n+import org.jdesktop.layout.GroupLayout;\n+import org.jdesktop.layout.LayoutStyle;\n+import com.jgoodies.forms.factories.FormFactory;\n+import com.jgoodies.forms.layout.CellConstraints;\n+import com.jgoodies.forms.layout.ColumnSpec;\n+import com.jgoodies.forms.layout.FormLayout;\n+import com.jgoodies.forms.layout.RowSpec;\n+\n+import database_management.MySQLdbManager;\n+\n+public class mainWindow extends JFrame {\n+\n+\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n+\tprivate final JMenu File = new JMenu();\n+\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n+\tprivate final JMenu Operations = new JMenu();\n+\tprivate final JMenu Help = new JMenu();\n+\tprivate final JMenuItem HelpAbout = new JMenuItem();\n+\tprivate final JMenuItem FileExit = new JMenuItem();\n+\tprivate static mainWindow mainWindowPointer;\n+\t\n+\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n+\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n+\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tmainWindow frame = new mainWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic mainWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 682, 438);\n+\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tmainWindowPointer = this;\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\t\t\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\taddWindowListener(new ThisWindowListener());\n+\t\tgetContentPane().setLayout(new BorderLayout());\n+\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"mainWindow\");\n+\t\t\n+\t\tsetJMenuBar(mainWindowMenu);\n+\t\t\n+\t\tmainWindowMenu.add(File);\n+\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileConnectToDb);\n+\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n+\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileDisconnectFromDb);\n+\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n+\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\tFileDisconnectFromDb.setEnabled(false);\n+\n+\t\tFile.addSeparator();\n+\t\t\n+\t\tFile.add(FileExit);\n+\t\tFileExit.addActionListener(new FileExitActionListener());\n+\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Operations);\n+\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tOperations.setEnabled(false);\n+\t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Help);\n+\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n+\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n+\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n+\t\t\tnew ColumnSpec[] {\n+\t\t\t\tColumnSpec.decode(\"149dlu\"),\n+\t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n+\t\t\tnew RowSpec[] {\n+\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n+\t\t\t\tRowSpec.decode(\"16px\")}));\n+\t\tmainWindowStatusPanel.setSize(666, 25);\n+\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n+\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n+\t\t\n+\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n+\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelSetEnabled(false);\n+\t}\n+\t\n+\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n+\t\t\n+\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n+\t\t\n+\t\tfor (int i = 0; i < comps.length; i++) {\n+\t\t\n+\t\t\tcomps[i].setEnabled(enable);\t\n+\t\t}\n+\t\t\n+\t\tmainWindowStatusPanel.setEnabled(enable);\n+\t}\n+\t\n+\tprivate class ThisWindowListener extends WindowAdapter {\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tthis_windowClosing(e);\n+\t\t}\n+\t}\n+\tprivate class FileExitActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileExit_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileConnectToDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileConnectToDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileDisconnectFromDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\n+\tprotected void this_windowClosing(WindowEvent e) {\n+\t\t\n+\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t}\n+\t\t}\n+\t\tthis.dispose();\n+\t\t//System.exit(0);\n+\t}\n+\t\n+\tprotected void fileExit_actionPerformed(ActionEvent e) {\n+\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n+\t\tdcw.setVisible(true);\n+\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n+\t}\n+\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n+\t\t\n+        public void windowClosing(WindowEvent e) {\n+            \n+        \te.getWindow().dispose(); \n+        \t\n+        \tif (databaseConnectWindow.dbPortal != null) {\n+    \t\t\t\n+    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n+    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n+    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n+    \t\t\t}\n+    \t\t\telse {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n+    \t\t\t}\n+    \t\t}            \n+        }\n+    };\n+    \n+    ////////////////////////////////////////////////////////////////////////\n+    \n+\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t\n+\t\t\tthis.FileConnectToDb.setEnabled(true);\n+\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n+\t\t\tthis.Operations.setEnabled(false);\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t}\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n+\t\toul.setVisible(true);\n+\t\toul.addWindowListener(operatorUserLoginWindowClosing);\n+\t}\n+\tprivate static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {\n+\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserLoginWindow.loggedUserNames);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n+\t}\n+\t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n+\t\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/7e/f03e2183a45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 394,
          "deletions": 0,
          "patch": "@@ -0,0 +1,394 @@\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Insets;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import javax.swing.JButton;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JSeparator;\n+import javax.swing.SpringLayout;\n+import javax.swing.border.EtchedBorder;\n+import org.jdesktop.layout.GroupLayout;\n+import org.jdesktop.layout.LayoutStyle;\n+import com.jgoodies.forms.factories.FormFactory;\n+import com.jgoodies.forms.layout.CellConstraints;\n+import com.jgoodies.forms.layout.ColumnSpec;\n+import com.jgoodies.forms.layout.FormLayout;\n+import com.jgoodies.forms.layout.RowSpec;\n+\n+\n+public class mainWindow extends JFrame {\n+\n+\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n+\tprivate final JMenu File = new JMenu();\n+\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n+\tprivate final JMenu Operations = new JMenu();\n+\tprivate final JMenu Help = new JMenu();\n+\tprivate final JMenuItem HelpAbout = new JMenuItem();\n+\tprivate final JMenuItem FileExit = new JMenuItem();\n+\tprivate static mainWindow mainWindowPointer;\n+\t\n+\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n+\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n+\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tmainWindow frame = new mainWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic mainWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 682, 438);\n+\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tmainWindowPointer = this;\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\t\t\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\taddWindowListener(new ThisWindowListener());\n+\t\tgetContentPane().setLayout(new BorderLayout());\n+\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"mainWindow\");\n+\t\t\n+\t\tsetJMenuBar(mainWindowMenu);\n+\t\t\n+\t\tmainWindowMenu.add(File);\n+\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileConnectToDb);\n+\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n+\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileDisconnectFromDb);\n+\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n+\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\tFileDisconnectFromDb.setEnabled(false);\n+\n+\t\tFile.addSeparator();\n+\t\t\n+\t\tFile.add(FileExit);\n+\t\tFileExit.addActionListener(new FileExitActionListener());\n+\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Operations);\n+\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tOperations.setEnabled(false);\n+\t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Help);\n+\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n+\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n+\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n+\t\t\tnew ColumnSpec[] {\n+\t\t\t\tColumnSpec.decode(\"149dlu\"),\n+\t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n+\t\t\tnew RowSpec[] {\n+\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n+\t\t\t\tRowSpec.decode(\"16px\")}));\n+\t\tmainWindowStatusPanel.setSize(666, 25);\n+\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n+\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n+\t\t\n+\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n+\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelSetEnabled(false);\n+\t}\n+\t\n+\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n+\t\t\n+\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n+\t\t\n+\t\tfor (int i = 0; i < comps.length; i++) {\n+\t\t\n+\t\t\tcomps[i].setEnabled(enable);\t\n+\t\t}\n+\t\t\n+\t\tmainWindowStatusPanel.setEnabled(enable);\n+\t}\n+\t\n+\tprivate class ThisWindowListener extends WindowAdapter {\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tthis_windowClosing(e);\n+\t\t}\n+\t}\n+\tprivate class FileExitActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileExit_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileConnectToDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileConnectToDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileDisconnectFromDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\n+\tprotected void this_windowClosing(WindowEvent e) {\n+\t\t\n+\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t}\n+\t\t}\n+\t\tthis.dispose();\n+\t\t//System.exit(0);\n+\t}\n+\t\n+\tprotected void fileExit_actionPerformed(ActionEvent e) {\n+\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n+\t\tdcw.setVisible(true);\n+\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n+\t}\n+\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n+\t\t\n+        public void windowClosing(WindowEvent e) {\n+            \n+        \te.getWindow().dispose(); \n+        \t\n+        \tif (databaseConnectWindow.dbPortal != null) {\n+    \t\t\t\n+    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n+    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n+    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n+    \t\t\t}\n+    \t\t\telse {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n+    \t\t\t}\n+    \t\t}            \n+        }\n+    };\n+    \n+    ////////////////////////////////////////////////////////////////////////\n+    \n+\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t\n+\t\t\tthis.FileConnectToDb.setEnabled(true);\n+\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n+\t\t\tthis.Operations.setEnabled(false);\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t}\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n+\t\toul.setVisible(true);\n+\t\toul.addWindowListener(operatorUserLoginWindowClosing);\n+\t}\n+\tprivate static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {\n+\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserLoginWindow.loggedUserNames);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n+\t}\n+\t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n+\t\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/81/e0b4aac9b55c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 254,
          "patch": "@@ -1,254 +0,0 @@\n-import java.awt.BorderLayout;\n-import java.awt.Component;\n-import java.awt.Dimension;\n-import java.awt.EventQueue;\n-import java.awt.FlowLayout;\n-import java.awt.GridLayout;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.event.WindowListener;\n-import javax.swing.BoxLayout;\n-import javax.swing.JButton;\n-import javax.swing.JComponent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.ActionEvent;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JMenu;\n-import javax.swing.JMenuBar;\n-import javax.swing.JMenuItem;\n-import javax.swing.JOptionPane;\n-import javax.swing.JPanel;\n-import javax.swing.JSeparator;\n-import javax.swing.SpringLayout;\n-import javax.swing.border.BevelBorder;\n-import javax.swing.border.EtchedBorder;\n-import org.jdesktop.layout.GroupLayout;\n-import org.jdesktop.layout.LayoutStyle;\n-import com.jgoodies.forms.factories.FormFactory;\n-import com.jgoodies.forms.layout.CellConstraints;\n-import com.jgoodies.forms.layout.ColumnSpec;\n-import com.jgoodies.forms.layout.FormLayout;\n-import com.jgoodies.forms.layout.RowSpec;\n-\n-public class mainWindow extends JFrame {\n-\n-\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n-\tprivate final JMenu File = new JMenu();\n-\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n-\tprivate final JMenu Operations = new JMenu();\n-\tprivate final JMenu Help = new JMenu();\n-\tprivate final JMenuItem HelpAbout = new JMenuItem();\n-\tprivate final JMenuItem FileExit = new JMenuItem();\n-\tprivate static mainWindow mainWindowPointer;\n-\t\n-\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n-\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n-\tprivate final JPanel panel = new JPanel();\n-\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n-\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tmainWindow frame = new mainWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic mainWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 682, 438);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\tmainWindowPointer = this;\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\t\t\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\taddWindowListener(new ThisWindowListener());\n-\t\tgetContentPane().setLayout(new BorderLayout());\n-\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"mainWindow\");\n-\t\t\n-\t\tsetJMenuBar(mainWindowMenu);\n-\t\t\n-\t\tmainWindowMenu.add(File);\n-\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileConnectToDb);\n-\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n-\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileDisconnectFromDb);\n-\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n-\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\tFileDisconnectFromDb.setEnabled(false);\n-\n-\t\tFile.addSeparator();\n-\t\t\n-\t\tFile.add(FileExit);\n-\t\tFileExit.addActionListener(new FileExitActionListener());\n-\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tmainWindowMenu.add(Operations);\n-\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tOperations.setEnabled(false);\n-\t\t\n-\t\tmainWindowMenu.add(Help);\n-\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tHelp.add(HelpAbout);\n-\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n-\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n-\t\t\tnew ColumnSpec[] {\n-\t\t\t\tColumnSpec.decode(\"149dlu\"),\n-\t\t\t\tColumnSpec.decode(\"72px\"),\n-\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n-\t\t\tnew RowSpec[] {\n-\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n-\t\t\t\tRowSpec.decode(\"16px\")}));\n-\t\tmainWindowStatusPanel.setSize(666, 25);\n-\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n-\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n-\t\t\n-\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n-\t\t\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));\n-\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n-\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\tmainWindowStatusPanelSetEnabled(false);\n-\t}\n-\t\n-\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n-\t\t\n-\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n-\t\t\n-\t\tfor (int i = 0; i < comps.length; i++) {\n-\t\t\n-\t\t\tcomps[i].setEnabled(enable);\t\n-\t\t}\n-\t\t\n-\t\tmainWindowStatusPanel.setEnabled(enable);\n-\t}\n-\t\n-\tprivate class ThisWindowListener extends WindowAdapter {\n-\t\tpublic void windowClosing(WindowEvent e) {\n-\t\t\tthis_windowClosing(e);\n-\t\t}\n-\t}\n-\tprivate class FileExitActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileExit_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileConnectToDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileConnectToDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileDisconnectFromDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n-\t\t}\n-\t}\n-\n-\tprotected void this_windowClosing(WindowEvent e) {\n-\t\t\n-\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-\t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t}\n-\t\t}\n-\t\tthis.dispose();\n-\t\t//System.exit(0);\n-\t}\n-\t\n-\tprotected void fileExit_actionPerformed(ActionEvent e) {\n-\n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n-\t}\n-\t\n-\t////////////////////////////////////////////////////////////////////////\n-\t\n-\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\t//databaseConnectWindow.main(null);\n-\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n-\t\tdcw.setVisible(true);\n-\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n-\t}\n-\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n-\t\t\n-        public void windowClosing(WindowEvent e) {\n-            \n-        \te.getWindow().dispose(); \n-        \t\n-        \tif (databaseConnectWindow.dbPortal != null) {\n-    \t\t\t\n-    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-    \t\t\t\t\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(true);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n-    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n-    \t\t\t}\n-    \t\t\telse {\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n-    \t\t\t}\n-    \t\t}            \n-        }\n-    };\n-    \n-    ////////////////////////////////////////////////////////////////////////\n-    \n-\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t\n-\t\t\tthis.FileConnectToDb.setEnabled(true);\n-\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n-\t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\t\t\n-\t\t}\n-\t}\n-\t\n-\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n-\t\toul.setVisible(true);\n-//\t\toul.addWindowListener(l)\n-\t}\n-\t\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/82/50bb024db35d001211398853d386ea7d",
          "status": "added",
          "additions": 572,
          "deletions": 0,
          "patch": "@@ -0,0 +1,572 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeParameterizedNonQuery(String query, Object... parameters) {\n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\t//TODO...\n+\t\t// boolean - ok\n+\t\t// String  - ok\n+\t\t// char    - \n+\t\t// byte    -\n+\t\t// short   -\n+\t\t// int     -\n+\t\t// long    -\n+\t\t// double  -\n+\t\t// float   -\n+\t\t// Date    -\n+\t\t// null ???\n+\t\t\n+\t\ttry {\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i + 1, parameters[i]);\n+\t\t\t\t\n+\t\t\t\t/*if (parameters[i] instanceof Boolean) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof String) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setString(i, ((String)parameters[i].toString()));\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof Character) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.set\n+\t\t\t\t}*/\n+\t\t\t}\n+\t\t\t\n+\t\t\tsqlStatement.execute();\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns ResultSet with data. For SELECT...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeParameterizedQuery(String query, Object... parameters) { //executes query and returns ResultSet \n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i + 1, parameters[i]);\n+\t\t\t}\n+\t\t\t\n+\t\t\tresult = sqlStatement.executeQuery();\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/83/c097dbfea45d00121890bdcc27f78f62",
          "status": "renamed",
          "additions": 62,
          "deletions": 14,
          "patch": "@@ -3,12 +3,12 @@ import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n import java.awt.event.WindowEvent;\n \n-import javax.swing.JButton;\n-\n import javax.swing.JFrame;\n import javax.swing.JLabel;\n import javax.swing.JPasswordField;\n import javax.swing.JTextField;\n+import javax.swing.WindowConstants;\n+import javax.swing.JButton;\n import javax.swing.JOptionPane;\n \n import database_management.MySQLdbManager;\n@@ -33,7 +33,7 @@ public class databaseConnectWindow extends JFrame {\n \t * @param args\n \t */\n \tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n+\t\tEventQueue.invokeLater(new Runnable() { \n \t\t\tpublic void run() {\n \t\t\t\ttry {\n \t\t\t\t\tdatabaseConnectWindow frame = new databaseConnectWindow();\n@@ -42,7 +42,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\t\t\te.printStackTrace();\n \t\t\t\t}\n \t\t\t}\n-\t\t});\n+\t\t});\t\t\n \t}\n \n \t/**\n@@ -51,7 +51,7 @@ public class databaseConnectWindow extends JFrame {\n \tpublic databaseConnectWindow() {\n \t\tsuper();\n \t\tsetBounds(100, 100, 384, 203);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n \t\ttry {\n \t\t\tjbInit();\n \t\t} catch (Throwable e) {\n@@ -115,6 +115,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\tconnectToDatabaseButton_actionPerformed(e);\n \t\t}\n \t}\n+\n \tprotected void connectToDatabaseButton_actionPerformed(ActionEvent e) {\n \t\t\n \t\tString password = \"\";\n@@ -136,7 +137,7 @@ public class databaseConnectWindow extends JFrame {\n \t\t\tdbPortal.disconnect(); //just in case\n \t\t\t\n \t\t\tif (dbPortal.connect() == false) { //connection settings problem or not running MySQL server\n-\t\t\t\tdbPortal.finallize();\n+\t\t\t\tdbPortal.finalize();\n \t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n \t\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n \t\t\t\t\n@@ -152,11 +153,11 @@ public class databaseConnectWindow extends JFrame {\n \t\t\t\t\tif (createNewDatabaseAndTables() == false) { //in case of fail do not close this window\n \t\t\t\t\t\t\n \t\t\t\t\t\treturn;\n-\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\n-\t\t\t\t\tdbPortal.finallize();\n+\t\t\t\t\tdbPortal.finalize();\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t\t\n@@ -169,18 +170,46 @@ public class databaseConnectWindow extends JFrame {\n \t\n \tprivate boolean createNewDatabaseAndTables() {\n \t\t\n-\t\tdbPortal.setMySqlActiveDatabase(\"\");\n-\t\t\n \t\tif (dbPortal.connect() == false) {\n \t\t\t\n-\t\t\tdbPortal.finallize();\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (1)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n \t\t\treturn false;\n \t\t}\n \t\t\n+\t\t//FIXME prone??? to sql injection maybe??\n \t\t\n+\t\tif (dbPortal.executeNonQuery(\"CREATE DATABASE \" + mysqlDatabaseNameTextField.getText() + \" COLLATE utf8_general_ci\") != 1) {\n+\t\t\t\n+\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\tdbPortal.finalize();\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\tdbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());\n+\t\tdbPortal.disconnect();\n+\t\t\n+\t\tif (dbPortal.connect() == false) { //false positive for database creation\n+\t\t\t\n+\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n+\t\t\tdbPortal.disconnect();\n+\t\t\t\n+\t\t\tif (dbPortal.connect()) {\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t}\t\t\t\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (2)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n+\t\t\treturn false;\n+\t\t}\n \t\t\n \t\tdbPortal.executeNonQuery(\"CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key,\" + \n-\t\t\t\t\"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(20) NOT NULL,\" + \n+\t\t\t\t\"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL,\" + \n \t\t\t\t\"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)\");\n \t\t\n \t\tdbPortal.executeNonQuery(\"CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key,\" + \n@@ -196,7 +225,26 @@ public class databaseConnectWindow extends JFrame {\n \t\t\t\t\"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE,\" +\n \t\t\t\t\"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n \t\t\n+\t\t/* for testing only; not needed any more\n+\t\ttry {\n+\t\t\tif (dbPortal.executeNonQuery(\"INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)\" + \n+\t\t\t\t\t\" VALUES ('operator1', '\" + Md5hashcalc.calculateMD5hash(\"operator1\")  + \"', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd')\") != 1) {\n+\t\t\t\t\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t\tdbPortal.finallize();\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd MD5!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\tSystem.exit(-1);\n+\t\t}*/\n+\t\t\n \t\treturn true;\n-\t}\n-\n+\t}\t\n }"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/8b/20041debb45d001211398853d386ea7d",
          "status": "added",
          "additions": 251,
          "deletions": 0,
          "patch": "@@ -0,0 +1,251 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JButton;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserSettingsWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3004L;\n+\n+\tprivate final JLabel usernameLabel = new JLabel();\n+\tprivate final JLabel passwordLabel = new JLabel();\n+\tprivate final JLabel passwordAgainLabel = new JLabel();\n+\tprivate final JLabel nameLabel = new JLabel();\n+\tprivate final JLabel lastNameLabel = new JLabel();\n+\tprivate final JButton updateButton = new JButton();\n+\tprivate final JButton deleteOperator = new JButton();\n+\tprivate final JTextField firstNameTextField = new JTextField();\n+\tprivate final JTextField lastNameTextField = new JTextField();\n+\tprivate final JPasswordField passwordPasswordField = new JPasswordField();\n+\tprivate final JPasswordField passwordAgainPasswordField = new JPasswordField();\t\n+\t\n+\tprivate String currentOperatorPassword = \"\";\n+\tpublic static String operatorFirstNameLastNameCombination = \"\";\t\n+\t\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserSettingsWindow frame = new operatorUserSettingsWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserSettingsWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 314, 255);\n+\t\tsetDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorUserSettings\");\n+\t\t\n+\t\tgetContentPane().add(usernameLabel);\n+\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tusernameLabel.setBounds(10, 0, 278, 16);\n+\t\t\n+\t\tgetContentPane().add(passwordLabel);\n+\t\tpasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tpasswordLabel.setBounds(10, 76, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(passwordAgainLabel);\n+\t\tpasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tpasswordAgainLabel.setBounds(10, 95, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(nameLabel);\n+\t\tnameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnameLabel.setBounds(10, 32, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(lastNameLabel);\n+\t\tlastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlastNameLabel.setBounds(10, 54, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(updateButton);\n+\t\tupdateButton.addActionListener(new UpdateButtonActionListener());\n+\t\tupdateButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tupdateButton.setBounds(90, 130, 137, 26);\n+\t\t\n+\t\tgetContentPane().add(firstNameTextField);\n+\t\tfirstNameTextField.setBounds(113, 30, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(lastNameTextField);\n+\t\tlastNameTextField.setBounds(113, 52, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(passwordPasswordField);\n+\t\tpasswordPasswordField.setBounds(113, 74, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(passwordAgainPasswordField);\n+\t\tpasswordAgainPasswordField.setBounds(113, 97, 175, 20);\n+\t\t\n+\t\tgetCurrentUserData();\n+\t\t\n+\t\tgetContentPane().add(deleteOperator);\n+\t\tdeleteOperator.addActionListener(new DeleteOperatorActionListener());\n+\t\tdeleteOperator.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tdeleteOperator.setBounds(90, 189, 137, 26);\n+\t}\n+\t\n+\tprivate void getCurrentUserData() {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tif (databaseConnectWindow.dbPortal.isConnected() == false) {\n+\t\t\treturn;\n+\t\t}\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_username, operator_password, \" + \n+\t\t\t\t\"operator_first_name, operator_last_name FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId);\n+\t\t\n+\t\tif ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + rs.getString(1));\n+\t\t\tcurrentOperatorPassword = rs.getString(2);\n+\t\t\tfirstNameTextField.setText(rs.getString(3));\n+\t\t\tlastNameTextField.setText(rs.getString(4));\n+\t\t}\n+\t\tcatch (Exception ex) {\t\t\t\n+\t\t}\n+\t\t\n+\t\toperatorFirstNameLastNameCombination = firstNameTextField.getText() + \" \" + lastNameTextField.getText();\n+\t}\n+\t\n+\tprivate class UpdateButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tupdateButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class DeleteOperatorActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tdeleteOperator_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprotected void updateButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tchar[] pass = passwordPasswordField.getPassword();\n+\t\tString password = \"\";\n+\t\t\n+\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\n+\t\t\tpassword += pass[i];\n+\t\t}\n+\t\t\n+\t\tchar[] pass2 = passwordAgainPasswordField.getPassword();\n+\t\tString password2 = \"\";\n+\t\t\n+\t\tfor (int j = 0; j < pass2.length; j++) {\n+\t\t\t\n+\t\t\tpassword2 += pass2[j];\n+\t\t}\n+\t\t\n+\t\tif (password.compareTo(password2) != 0) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (password.length() > 3) { //password update will be performed too\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tpassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\tcurrentOperatorPassword = password;\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\\n\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\t\t\t\n+\t\t}\n+\t\telse {\n+\t\t\tif (password.length() > 0) {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd 4 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tif ((firstNameTextField.getText().length() <= 3) || (lastNameTextField.getText().length() <= 3)) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\t//FIXME prone to sql injection\n+\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"UPDATE operators SET operator_password='\" + currentOperatorPassword +\n+\t\t\t\t\"', operator_first_name='\" + firstNameTextField.getText() + \"', operator_last_name='\" + \n+\t\t\t\tlastNameTextField.getText() + \"' WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId) != 1) {\n+\t\t\n+\t\t//if (databaseConnectWindow.dbPortal.getLastError() != null) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorFirstNameLastNameCombination = firstNameTextField.getText() + \" \" + lastNameTextField.getText();\n+\t\toperatorUserLoginWindow.loggedUserNames = operatorFirstNameLastNameCombination; //in case\n+\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t}\n+\t\n+\tprotected void deleteOperator_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\t//we can not delete not existing operator\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (JOptionPane.showConfirmDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\\n\" + \n+\t\t\t\t\"\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd, \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\\n\\n\\t\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd?\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\tJOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"DELETE FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId) != 1) {\n+\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t}\n+\t\t\n+\t\treturn;\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/9a/40de69c5b25c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 241,
          "patch": "@@ -1,241 +0,0 @@\n-import java.awt.BorderLayout;\n-import java.awt.Component;\n-import java.awt.Dimension;\n-import java.awt.EventQueue;\n-import java.awt.FlowLayout;\n-import java.awt.GridLayout;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.event.WindowListener;\n-import javax.swing.BoxLayout;\n-import javax.swing.JButton;\n-import javax.swing.JComponent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.ActionEvent;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JMenu;\n-import javax.swing.JMenuBar;\n-import javax.swing.JMenuItem;\n-import javax.swing.JOptionPane;\n-import javax.swing.JPanel;\n-import javax.swing.JSeparator;\n-import javax.swing.SpringLayout;\n-import javax.swing.border.BevelBorder;\n-import javax.swing.border.EtchedBorder;\n-import org.jdesktop.layout.GroupLayout;\n-import org.jdesktop.layout.LayoutStyle;\n-import com.jgoodies.forms.factories.FormFactory;\n-import com.jgoodies.forms.layout.CellConstraints;\n-import com.jgoodies.forms.layout.ColumnSpec;\n-import com.jgoodies.forms.layout.FormLayout;\n-import com.jgoodies.forms.layout.RowSpec;\n-\n-public class mainWindow extends JFrame {\n-\n-\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n-\tprivate final JMenu File = new JMenu();\n-\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n-\tprivate final JMenu Operations = new JMenu();\n-\tprivate final JMenu Help = new JMenu();\n-\tprivate final JMenuItem HelpAbout = new JMenuItem();\n-\tprivate final JMenuItem FileExit = new JMenuItem();\n-\tprivate static mainWindow mainWindowPointer;\n-\t\n-\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n-\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n-\tprivate final JPanel panel = new JPanel();\n-\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n-\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tmainWindow frame = new mainWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic mainWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 682, 438);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\tmainWindowPointer = this;\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\t\t\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\taddWindowListener(new ThisWindowListener());\n-\t\tgetContentPane().setLayout(new BorderLayout());\n-\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"mainWindow\");\n-\t\t\n-\t\tsetJMenuBar(mainWindowMenu);\n-\t\t\n-\t\tmainWindowMenu.add(File);\n-\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileConnectToDb);\n-\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n-\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileDisconnectFromDb);\n-\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n-\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\tFileDisconnectFromDb.setEnabled(false);\n-\n-\t\tFile.addSeparator();\n-\t\t\n-\t\tFile.add(FileExit);\n-\t\tFileExit.addActionListener(new FileExitActionListener());\n-\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tmainWindowMenu.add(Operations);\n-\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tOperations.setEnabled(false);\n-\t\t\n-\t\tmainWindowMenu.add(Help);\n-\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tHelp.add(HelpAbout);\n-\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n-\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n-\t\t\tnew ColumnSpec[] {\n-\t\t\t\tColumnSpec.decode(\"149dlu\"),\n-\t\t\t\tColumnSpec.decode(\"72px\"),\n-\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n-\t\t\tnew RowSpec[] {\n-\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n-\t\t\t\tRowSpec.decode(\"16px\")}));\n-\t\tmainWindowStatusPanel.setSize(666, 25);\n-\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n-\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n-\t\t\n-\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n-\t\t\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));\n-\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\tmainWindowStatusPanelSetEnabled(false);\n-\t}\n-\t\n-\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n-\t\t\n-\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n-\t\t\n-\t\tfor (int i = 0; i < comps.length; i++) {\n-\t\t\n-\t\t\tcomps[i].setEnabled(enable);\t\n-\t\t}\n-\t\t\n-\t\tmainWindowStatusPanel.setEnabled(enable);\n-\t}\n-\t\n-\tprivate class ThisWindowListener extends WindowAdapter {\n-\t\tpublic void windowClosing(WindowEvent e) {\n-\t\t\tthis_windowClosing(e);\n-\t\t}\n-\t}\n-\tprivate class FileExitActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileExit_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileConnectToDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileConnectToDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileDisconnectFromDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\n-\tprotected void this_windowClosing(WindowEvent e) {\n-\t\t\n-\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-\t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t}\n-\t\t}\n-\t\tthis.dispose();\n-\t\t//System.exit(0);\n-\t}\n-\t\n-\tprotected void fileExit_actionPerformed(ActionEvent e) {\n-\n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n-\t}\n-\t\n-\t////////////////////////////////////////////////////////////////////////\n-\t\n-\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\t//databaseConnectWindow.main(null);\n-\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n-\t\tdcw.setVisible(true);\n-\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n-\t}\n-\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n-\t\t\n-        public void windowClosing(WindowEvent e) {\n-            \n-        \te.getWindow().dispose(); \n-        \t\n-        \tif (databaseConnectWindow.dbPortal != null) {\n-    \t\t\t\n-    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-    \t\t\t\t\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(true);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n-    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n-    \t\t\t}\n-    \t\t\telse {\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n-    \t\t\t}\n-    \t\t}            \n-        }\n-    };\n-    \n-    ////////////////////////////////////////////////////////////////////////\n-    \n-\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t\n-\t\t\tthis.FileConnectToDb.setEnabled(true);\n-\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n-\t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\t\t\n-\t\t}\n-\t}\n-\t\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/9a/f086c342aa5d00121890bdcc27f78f62",
          "status": "added",
          "additions": 327,
          "deletions": 0,
          "patch": "@@ -0,0 +1,327 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.JButton;\n+import javax.swing.WindowConstants;\n+import javax.swing.border.TitledBorder;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserLoginWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3003L;\n+\n+\tprivate final JPanel groupLoginPanel = new JPanel();\n+\tprivate final JPanel groupCreateNewUserPanel = new JPanel();\n+\tprivate final JLabel loginUsernameLabel = new JLabel();\n+\tprivate final JLabel loginPasswordLabel = new JLabel();\n+\tprivate final JButton loginButton = new JButton();\n+\tprivate final JTextField loginUsernameTextField = new JTextField();\n+\tprivate final JPasswordField loginPasswordPasswordField = new JPasswordField();\n+\tprivate final JLabel newUsernameLabel = new JLabel();\n+\tprivate final JLabel newPasswordLabel = new JLabel();\n+\tprivate final JLabel newUserFirstNameLabel = new JLabel();\n+\tprivate final JLabel newUserLastNameLabel = new JLabel();\n+\tprivate final JButton createNewOperatorButton = new JButton();\n+\tprivate final JTextField newUsernameTextField = new JTextField();\n+\tprivate final JTextField newFirstNameTextField = new JTextField();\n+\tprivate final JPasswordField newPasswordPasswordField = new JPasswordField();\n+\tprivate final JTextField newLastNameTextField = new JTextField();\n+\t\n+\tpublic static int loggedUserId = -1;\n+\tpublic static String loggedUserNames = \"\";\n+\t\n+\tprivate final JLabel newPasswordAgainLabel = new JLabel();\n+\tprivate final JPasswordField newPasswordPasswordAgainField = new JPasswordField();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserLoginWindow frame = new operatorUserLoginWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserLoginWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 518, 242);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorLoginWindow\");\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\t\n+\t\tgetContentPane().add(groupLoginPanel);\n+\t\tgroupLoginPanel.setLayout(null);\n+\t\tgroupLoginPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupLoginPanel.setBounds(10, 10, 243, 133);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameLabel);\n+\t\tloginUsernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginUsernameLabel.setBounds(10, 31, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordLabel);\n+\t\tloginPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginPasswordLabel.setBounds(10, 53, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginButton);\n+\t\tloginButton.addActionListener(new LoginButtonActionListener());\n+\t\tloginButton.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tloginButton.setBounds(127, 93, 106, 26);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameTextField);\n+\t\tloginUsernameTextField.setBounds(96, 29, 137, 20);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordPasswordField);\n+\t\tloginPasswordPasswordField.setBounds(96, 51, 137, 20);\n+\t\t\n+\t\tgetContentPane().add(groupCreateNewUserPanel);\n+\t\tgroupCreateNewUserPanel.setLayout(null);\n+\t\tgroupCreateNewUserPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupCreateNewUserPanel.setBounds(259, 10, 243, 194);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameLabel);\n+\t\tnewUsernameLabel.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUsernameLabel.setBounds(10, 32, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordLabel);\n+\t\tnewPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordLabel.setBounds(10, 54, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserFirstNameLabel);\n+\t\tnewUserFirstNameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnewUserFirstNameLabel.setBounds(10, 98, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserLastNameLabel);\n+\t\tnewUserLastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUserLastNameLabel.setBounds(10, 120, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(createNewOperatorButton);\n+\t\tcreateNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());\n+\t\tcreateNewOperatorButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tcreateNewOperatorButton.setBounds(127, 158, 106, 26);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameTextField);\n+\t\tnewUsernameTextField.setBounds(111, 30, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newFirstNameTextField);\n+\t\tnewFirstNameTextField.setBounds(111, 96, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordField);\n+\t\tnewPasswordPasswordField.setBounds(111, 52, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newLastNameTextField);\n+\t\tnewLastNameTextField.setBounds(111, 118, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordAgainLabel);\n+\t\tnewPasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordAgainLabel.setBounds(10, 76, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordAgainField);\n+\t\tnewPasswordPasswordAgainField.setBounds(111, 75, 122, 20);\n+\t}\n+\tprivate class LoginButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tloginButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class CreateNewOperatorButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tcreateNewOperatorButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\t\n+\tprotected void loginButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tString password = \"\";\n+\t\t\t\t\n+\t\t\t\tchar[] pass = loginPasswordPasswordField.getPassword();\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\n+\t\t\t\tResultSet rs = null;\n+\t\t\t\t\n+\t\t\t\ttry {\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\trs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE\" + \n+\t\t\t\t\t\t\" operator_username='\" + loginUsernameTextField.getText() + \"' AND operator_password='\" +\n+\t\t\t\t\t\tMd5hashcalc.calculateMD5hash(password) + \"'\");\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (rs != null) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tloggedUserId = rs.getInt(1);\n+\t\t\t\t\t\tloggedUserNames = rs.getString(2) + \" \" + rs.getString(3);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\t\t\n+\t}\n+\t\n+\tprotected void createNewOperatorButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tchar[] pass = newPasswordPasswordField.getPassword();\n+\t\t\t\tString password = \"\";\n+\t\t\t\tString encryptedPassword = \"\";\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tchar[] pass2 = newPasswordPasswordAgainField.getPassword();\n+\t\t\t\t\n+\t\t\t\tif (pass.length == pass2.length) {\n+\t\t\t\t\n+\t\t\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tif (pass[i] != pass2[i]) {\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\t\t\t\t\n+\t\t\t\tif ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && \n+\t\t\t\t\t\t(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tencryptedPassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT COUNT(*) FROM operators WHERE operator_username='\" +\n+\t\t\t\t\t\t\tnewUsernameTextField.getText() + \"'\");\n+\t\t\t\t\t\n+\t\t\t\t\tint usersCount = 0;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tusersCount = rs.getInt(1);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\t\t\t\t\t\t\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\tif ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {\t\t\t\t\t\t\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t//no such existing username so now we create it\n+\t\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"INSERT INTO operators(operator_username, operator_password, \" +\n+\t\t\t\t\t\t\t\t\"operator_first_name, operator_last_name) VALUES('\" + newUsernameTextField.getText() + \"', '\" +\n+\t\t\t\t\t\t\t\tencryptedPassword + \"', '\" + newFirstNameTextField.getText() + \"', '\" + newLastNameTextField.getText() + \"')\") != 1) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse { //everything ok so login now\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tloginUsernameTextField.setText(newUsernameTextField.getText());\n+\t\t\t\t\t\t\tloginPasswordPasswordField.setText(password);\n+\t\t\t\t\t\t\tloginButton_actionPerformed(null);\n+\t\t\t\t\t\t}\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.getLastError() != null) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t}\t\t\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/9c/80cc88dcb65d001211398853d386ea7d",
          "status": "added",
          "additions": 248,
          "deletions": 0,
          "patch": "@@ -0,0 +1,248 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JButton;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserSettingsWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3004L;\n+\n+\tprivate final JLabel usernameLabel = new JLabel();\n+\tprivate final JLabel passwordLabel = new JLabel();\n+\tprivate final JLabel passwordAgainLabel = new JLabel();\n+\tprivate final JLabel nameLabel = new JLabel();\n+\tprivate final JLabel lastNameLabel = new JLabel();\n+\tprivate final JButton updateButton = new JButton();\n+\tprivate final JButton deleteOperator = new JButton();\n+\tprivate final JTextField firstNameTextField = new JTextField();\n+\tprivate final JTextField lastNameTextField = new JTextField();\n+\tprivate final JPasswordField passwordPasswordField = new JPasswordField();\n+\tprivate final JPasswordField passwordAgainPasswordField = new JPasswordField();\t\n+\t\n+\tprivate String currentOperatorPassword = \"\";\n+\tpublic static String operatorFirstNameLastNameCombination = \"\";\t\n+\t\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserSettingsWindow frame = new operatorUserSettingsWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserSettingsWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 314, 255);\n+\t\tsetDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorUserSettings\");\n+\t\t\n+\t\tgetContentPane().add(usernameLabel);\n+\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tusernameLabel.setBounds(10, 0, 278, 16);\n+\t\t\n+\t\tgetContentPane().add(passwordLabel);\n+\t\tpasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tpasswordLabel.setBounds(10, 76, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(passwordAgainLabel);\n+\t\tpasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tpasswordAgainLabel.setBounds(10, 95, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(nameLabel);\n+\t\tnameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnameLabel.setBounds(10, 32, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(lastNameLabel);\n+\t\tlastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlastNameLabel.setBounds(10, 54, 97, 16);\n+\t\t\n+\t\tgetContentPane().add(updateButton);\n+\t\tupdateButton.addActionListener(new UpdateButtonActionListener());\n+\t\tupdateButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tupdateButton.setBounds(90, 130, 137, 26);\n+\t\t\n+\t\tgetContentPane().add(firstNameTextField);\n+\t\tfirstNameTextField.setBounds(113, 30, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(lastNameTextField);\n+\t\tlastNameTextField.setBounds(113, 52, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(passwordPasswordField);\n+\t\tpasswordPasswordField.setBounds(113, 74, 175, 20);\n+\t\t\n+\t\tgetContentPane().add(passwordAgainPasswordField);\n+\t\tpasswordAgainPasswordField.setBounds(113, 97, 175, 20);\n+\t\t\n+\t\tgetCurrentUserData();\n+\t\t\n+\t\tgetContentPane().add(deleteOperator);\n+\t\tdeleteOperator.addActionListener(new DeleteOperatorActionListener());\n+\t\tdeleteOperator.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tdeleteOperator.setBounds(90, 189, 137, 26);\n+\t}\n+\t\n+\tprivate void getCurrentUserData() {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tif (databaseConnectWindow.dbPortal.isConnected() == false) {\n+\t\t\treturn;\n+\t\t}\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_username, operator_password, \" + \n+\t\t\t\t\"operator_first_name, operator_last_name FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId);\n+\t\t\n+\t\tif ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + rs.getString(1));\n+\t\t\tcurrentOperatorPassword = rs.getString(2);\n+\t\t\tfirstNameTextField.setText(rs.getString(3));\n+\t\t\tlastNameTextField.setText(rs.getString(4));\n+\t\t}\n+\t\tcatch (Exception ex) {\t\t\t\n+\t\t}\n+\t\t\n+\t\toperatorFirstNameLastNameCombination = firstNameTextField.getText() + \" \" + lastNameTextField.getText();\n+\t}\n+\t\n+\tprivate class UpdateButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tupdateButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class DeleteOperatorActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tdeleteOperator_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprotected void updateButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tchar[] pass = passwordPasswordField.getPassword();\n+\t\tString password = \"\";\n+\t\t\n+\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\n+\t\t\tpassword += pass[i];\n+\t\t}\n+\t\t\n+\t\tchar[] pass2 = passwordAgainPasswordField.getPassword();\n+\t\tString password2 = \"\";\n+\t\t\n+\t\tfor (int j = 0; j < pass2.length; j++) {\n+\t\t\t\n+\t\t\tpassword2 += pass2[j];\n+\t\t}\n+\t\t\n+\t\tif (password.compareTo(password2) != 0) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (password.length() > 3) { //password update will be performed too\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tpassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\tcurrentOperatorPassword = password;\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\\n\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\t\t\t\n+\t\t}\n+\t\telse {\n+\t\t\tif (password.length() > 0) {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd 4 \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tif ((firstNameTextField.getText().length() <= 3) || (lastNameTextField.getText().length() <= 3)) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal.executeParameterizedNonQuery(\"UPDATE operators SET operator_password=?, \" +\n+\t\t\t\t\"operator_first_name=?, operator_last_name=? WHERE operator_id=?\", currentOperatorPassword, \n+\t\t\t\tfirstNameTextField.getText(), lastNameTextField.getText(), new Integer(operatorUserLoginWindow.loggedUserId)) != 1) {\n+\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\" + databaseConnectWindow.dbPortal.getLastError(), \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorFirstNameLastNameCombination = firstNameTextField.getText() + \" \" + lastNameTextField.getText();\n+\t\toperatorUserLoginWindow.loggedUserNames = operatorFirstNameLastNameCombination; //in case\n+\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t}\n+\t\n+\tprotected void deleteOperator_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\t//we can not delete not existing operator\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tif (JOptionPane.showConfirmDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\\n\" + \n+\t\t\t\t\"\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd, \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\\n\\n\\t\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd?\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\tJOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"DELETE FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId) != 1) {\n+\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t}\n+\t\t\n+\t\treturn;\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/9c/f096a4cba35d00121890bdcc27f78f62",
          "status": "added",
          "additions": 263,
          "deletions": 0,
          "patch": "@@ -0,0 +1,263 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.WindowConstants;\n+import javax.swing.JButton;\n+import javax.swing.JOptionPane;\n+\n+import database_management.MySQLdbManager;\n+import md5_calculator.Md5hashcalc;\n+\n+public class databaseConnectWindow extends JFrame {\n+\n+\tprivate final JLabel label = new JLabel();\n+\tprivate final JLabel label_1 = new JLabel();\n+\tprivate final JLabel label_2 = new JLabel();\n+\tprivate final JLabel label_3 = new JLabel();\n+\tprivate final JLabel label_4 = new JLabel();\n+\tprivate final JButton connectToDatabaseButton = new JButton();\n+\tprivate final JTextField mysqlServerAddressTextField = new JTextField();\n+\tprivate final JTextField mysqlPortTextField = new JTextField();\n+\tprivate final JTextField mysqlDatabaseNameTextField = new JTextField();\n+\tprivate final JTextField mysqlUsernameTextField = new JTextField();\n+\tprivate final JPasswordField mysqlPasswordPasswordField = new JPasswordField();\n+\tpublic static MySQLdbManager dbPortal = null;\n+\t\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() { \n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tdatabaseConnectWindow frame = new databaseConnectWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\t\t\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic databaseConnectWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 384, 203);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetAlwaysOnTop(true);\n+\t\tsetResizable(false);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"databaseConnectWindowFrame\");\n+\t\t\n+\t\tgetContentPane().add(label);\n+\t\tlabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel.setBounds(10, 10, 165, 16);\n+\t\t\n+\t\tgetContentPane().add(label_1);\n+\t\tlabel_1.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel_1.setBounds(10, 54, 165, 16);\n+\t\t\n+\t\tgetContentPane().add(label_2);\n+\t\tlabel_2.setText(\"\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel_2.setBounds(10, 32, 156, 16);\n+\t\t\n+\t\tgetContentPane().add(label_3);\n+\t\tlabel_3.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd:\");\n+\t\tlabel_3.setBounds(10, 76, 165, 16);\n+\t\t\n+\t\tgetContentPane().add(label_4);\n+\t\tlabel_4.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tlabel_4.setBounds(10, 98, 156, 16);\n+\t\t\n+\t\tgetContentPane().add(connectToDatabaseButton);\n+\t\tconnectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());\n+\t\tconnectToDatabaseButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\");\n+\t\tconnectToDatabaseButton.setBounds(132, 135, 106, 26);\n+\t\t\n+\t\tgetContentPane().add(mysqlServerAddressTextField);\n+\t\tmysqlServerAddressTextField.setText(\"127.0.0.1\");\n+\t\tmysqlServerAddressTextField.setBounds(181, 8, 185, 20);\n+\t\t\n+\t\tgetContentPane().add(mysqlPortTextField);\n+\t\tmysqlPortTextField.setText(\"3306\");\n+\t\tmysqlPortTextField.setBounds(181, 30, 91, 20);\n+\t\t\n+\t\tgetContentPane().add(mysqlDatabaseNameTextField);\n+\t\tmysqlDatabaseNameTextField.setText(\"shop\");\n+\t\tmysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);\n+\t\t\n+\t\tgetContentPane().add(mysqlUsernameTextField);\n+\t\tmysqlUsernameTextField.setText(\"root\");\n+\t\tmysqlUsernameTextField.setBounds(181, 76, 180, 18);\n+\t\t\n+\t\tgetContentPane().add(mysqlPasswordPasswordField);\n+\t\tmysqlPasswordPasswordField.setBounds(181, 96, 181, 20);\n+\t}\n+\tprivate class ConnectToDatabaseButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tconnectToDatabaseButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\n+\tprotected void connectToDatabaseButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tString password = \"\";\n+\t\t\n+\t\tchar [] pass = mysqlPasswordPasswordField.getPassword();\n+\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\n+\t\t\tpassword += pass[i];\n+\t\t}\n+\t\t\n+\t\tdbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),\n+\t\t\t\tmysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),\n+\t\t\t\tmysqlUsernameTextField.getText(), password);\t\t\n+\t\t\n+\t\t\n+\t\tif (dbPortal.connect() == false) { //now check for database name that is not existing\n+\t\t\t\n+\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n+\t\t\tdbPortal.disconnect(); //just in case\n+\t\t\t\n+\t\t\tif (dbPortal.connect() == false) { //connection settings problem or not running MySQL server\n+\t\t\t\tdbPortal.finalize();\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\telse { //will have to create new database\n+\t\t\t\t\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t\t\n+\t\t\t\tif (JOptionPane.showConfirmDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd: \" + mysqlDatabaseNameTextField.getText() +\n+\t\t\t\t\t\t\".\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd?\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd?\", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n+\t\t\t\t\t\n+\t\t\t\t\tif (createNewDatabaseAndTables() == false) { //in case of fail do not close this window\n+\t\t\t\t\t\t\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tdbPortal.finalize();\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t}\t\t\t\n+\t\t}\n+\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t}\n+\t\n+\tprivate boolean createNewDatabaseAndTables() {\n+\t\t\n+\t\tif (dbPortal.connect() == false) {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (1)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\t//FIXME prone to sql injection\n+\t\t\n+\t\tObject[] dbName = new String[1];\n+\t\tdbName[0] = mysqlDatabaseNameTextField.getText(); \n+\t\t\n+\t\tif (dbPortal.executeParameterizedNonQuery(\"CREATE DATABASE ? COLLATE utf8_general_ci\", dbName) != 1) {\n+\t\t\t\n+\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\tdbPortal.finalize();\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\t/*if (dbPortal.executeNonQuery(\"CREATE DATABASE \" + mysqlDatabaseNameTextField.getText() + \" COLLATE utf8_general_ci\") != 1) {\n+\t\t\t\n+\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\tdbPortal.finalize();\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn false;\n+\t\t}*/\n+\t\t\n+\t\tdbPortal.setMySqlActiveDatabase(mysqlDatabaseNameTextField.getText());\n+\t\tdbPortal.disconnect();\n+\t\t\n+\t\tif (dbPortal.connect() == false) { //false positive for database creation\n+\t\t\t\n+\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n+\t\t\tdbPortal.disconnect();\n+\t\t\t\n+\t\t\tif (dbPortal.connect()) {\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t}\t\t\t\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd (2)! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n+\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\t\t\t\n+\t\t\tdbPortal.finalize();\n+\t\t\treturn false;\n+\t\t}\n+\t\t\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE operators (operator_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"operator_username nvarchar(20) NOT NULL, operator_password nvarchar(64) NOT NULL,\" + \n+\t\t\t\t\"operator_first_name nvarchar(20) NOT NULL, operator_last_name nvarchar(20) NOT NULL)\");\n+\t\t\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE orders (order_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"order_time datetime NOT NULL, order_operator_id int NOT NULL,\" +\n+\t\t\t\t\"CONSTRAINT FK_OPERATORS FOREIGN KEY (order_operator_id) REFERENCES operators(operator_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n+\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE products (product_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"product_name nvarchar(30) NOT NULL, product_quantity int NOT NULL,\tproduct_price decimal(10,2) NOT NULL)\");\n+\n+\t\tdbPortal.executeNonQuery(\"CREATE TABLE order_details (order_detail_id int NOT NULL AUTO_INCREMENT primary key,\" + \n+\t\t\t\t\"order_detail_order_id int NOT NULL, order_detail_product_id int NOT NULL, \" +\n+\t\t\t\t\"order_detail_product_quantity int NOT NULL,\" +\n+\t\t\t\t\"CONSTRAINT FK_ORDERS FOREIGN KEY (order_detail_order_id) REFERENCES orders(order_id) ON DELETE CASCADE ON UPDATE CASCADE,\" +\n+\t\t\t\t\"CONSTRAINT FK_PRODUCTS FOREIGN KEY (order_detail_product_id) REFERENCES products(product_id) ON DELETE CASCADE ON UPDATE CASCADE)\");\n+\t\t\n+\t\t/* for testing only; not needed any more\n+\t\ttry {\n+\t\t\tif (dbPortal.executeNonQuery(\"INSERT INTO operators (operator_username, operator_password, operator_first_name, operator_last_name)\" + \n+\t\t\t\t\t\" VALUES ('operator1', '\" + Md5hashcalc.calculateMD5hash(\"operator1\")  + \"', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd1', '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd')\") != 1) {\n+\t\t\t\t\n+\t\t\t\tdbPortal.executeNonQuery(\"DROP DATABASE \" + mysqlDatabaseNameTextField.getText());\n+\t\t\t\tdbPortal.disconnect();\n+\t\t\t\tdbPortal.finallize();\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd MD5!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\tSystem.exit(-1);\n+\t\t}*/\n+\t\t\n+\t\treturn true;\n+\t}\t\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/9f/808cfa98a55d00121890bdcc27f78f62",
          "status": "added",
          "additions": 571,
          "deletions": 0,
          "patch": "@@ -0,0 +1,571 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeParameterizedNonQuery(String query, Object[] parameters) {\n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\t//TODO...\n+\t\t// boolean - ok\n+\t\t// String  - ok\n+\t\t// char    - \n+\t\t// byte    -\n+\t\t// short   -\n+\t\t// int     -\n+\t\t// long    -\n+\t\t// double  -\n+\t\t// float   -\n+\t\t// Date    -\n+\t\t// null ???\n+\t\t\n+\t\ttry {\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i, parameters[i]);\n+\t\t\t\t\n+\t\t\t\t/*if (parameters[i] instanceof Boolean) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof String) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setString(i, ((String)parameters[i].toString()));\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof Character) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.set\n+\t\t\t\t}*/\n+\t\t\t}\n+\t\t\t\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns ResultSet with data. For SELECT...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeParameterizedQuery(String query, Object[] parameters) { //executes query and returns ResultSet \n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i, parameters[i]);\n+\t\t\t}\n+\t\t\t\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/a1/a03b43f5a45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 390,
          "deletions": 0,
          "patch": "@@ -0,0 +1,390 @@\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Insets;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import javax.swing.JButton;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.border.EtchedBorder;\n+import com.jgoodies.forms.factories.FormFactory;\n+import com.jgoodies.forms.layout.CellConstraints;\n+import com.jgoodies.forms.layout.ColumnSpec;\n+import com.jgoodies.forms.layout.FormLayout;\n+import com.jgoodies.forms.layout.RowSpec;\n+\n+\n+public class mainWindow extends JFrame {\n+\n+\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n+\tprivate final JMenu File = new JMenu();\n+\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n+\tprivate final JMenu Operations = new JMenu();\n+\tprivate final JMenu Help = new JMenu();\n+\tprivate final JMenuItem HelpAbout = new JMenuItem();\n+\tprivate final JMenuItem FileExit = new JMenuItem();\n+\tprivate static mainWindow mainWindowPointer;\n+\t\n+\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n+\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n+\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tmainWindow frame = new mainWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic mainWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 682, 438);\n+\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tmainWindowPointer = this;\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\t\t\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\taddWindowListener(new ThisWindowListener());\n+\t\tgetContentPane().setLayout(new BorderLayout());\n+\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"mainWindow\");\n+\t\t\n+\t\tsetJMenuBar(mainWindowMenu);\n+\t\t\n+\t\tmainWindowMenu.add(File);\n+\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileConnectToDb);\n+\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n+\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileDisconnectFromDb);\n+\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n+\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\tFileDisconnectFromDb.setEnabled(false);\n+\n+\t\tFile.addSeparator();\n+\t\t\n+\t\tFile.add(FileExit);\n+\t\tFileExit.addActionListener(new FileExitActionListener());\n+\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Operations);\n+\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tOperations.setEnabled(false);\n+\t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Help);\n+\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n+\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n+\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n+\t\t\tnew ColumnSpec[] {\n+\t\t\t\tColumnSpec.decode(\"149dlu\"),\n+\t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n+\t\t\tnew RowSpec[] {\n+\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n+\t\t\t\tRowSpec.decode(\"16px\")}));\n+\t\tmainWindowStatusPanel.setSize(666, 25);\n+\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n+\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n+\t\t\n+\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n+\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelSetEnabled(false);\n+\t}\n+\t\n+\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n+\t\t\n+\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n+\t\t\n+\t\tfor (int i = 0; i < comps.length; i++) {\n+\t\t\n+\t\t\tcomps[i].setEnabled(enable);\t\n+\t\t}\n+\t\t\n+\t\tmainWindowStatusPanel.setEnabled(enable);\n+\t}\n+\t\n+\tprivate class ThisWindowListener extends WindowAdapter {\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tthis_windowClosing(e);\n+\t\t}\n+\t}\n+\tprivate class FileExitActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileExit_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileConnectToDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileConnectToDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileDisconnectFromDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\n+\tprotected void this_windowClosing(WindowEvent e) {\n+\t\t\n+\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t}\n+\t\t}\n+\t\tthis.dispose();\n+\t\t//System.exit(0);\n+\t}\n+\t\n+\tprotected void fileExit_actionPerformed(ActionEvent e) {\n+\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n+\t\tdcw.setVisible(true);\n+\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n+\t}\n+\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n+\t\t\n+        public void windowClosing(WindowEvent e) {\n+            \n+        \te.getWindow().dispose(); \n+        \t\n+        \tif (databaseConnectWindow.dbPortal != null) {\n+    \t\t\t\n+    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n+    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n+    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n+    \t\t\t}\n+    \t\t\telse {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n+    \t\t\t}\n+    \t\t}            \n+        }\n+    };\n+    \n+    ////////////////////////////////////////////////////////////////////////\n+    \n+\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t\n+\t\t\tthis.FileConnectToDb.setEnabled(true);\n+\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n+\t\t\tthis.Operations.setEnabled(false);\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t}\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n+\t\toul.setVisible(true);\n+\t\toul.addWindowListener(operatorUserLoginWindowClosing);\n+\t}\n+\tprivate static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {\n+\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserLoginWindow.loggedUserNames);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n+\t}\n+\t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n+\t\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/a5/90b2a96db55c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 250,
          "patch": "@@ -1,250 +0,0 @@\n-import java.awt.BorderLayout;\n-import java.awt.Component;\n-import java.awt.Dimension;\n-import java.awt.EventQueue;\n-import java.awt.FlowLayout;\n-import java.awt.GridLayout;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.event.WindowListener;\n-import javax.swing.BoxLayout;\n-import javax.swing.JButton;\n-import javax.swing.JComponent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.ActionEvent;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JMenu;\n-import javax.swing.JMenuBar;\n-import javax.swing.JMenuItem;\n-import javax.swing.JOptionPane;\n-import javax.swing.JPanel;\n-import javax.swing.JSeparator;\n-import javax.swing.SpringLayout;\n-import javax.swing.border.BevelBorder;\n-import javax.swing.border.EtchedBorder;\n-import org.jdesktop.layout.GroupLayout;\n-import org.jdesktop.layout.LayoutStyle;\n-import com.jgoodies.forms.factories.FormFactory;\n-import com.jgoodies.forms.layout.CellConstraints;\n-import com.jgoodies.forms.layout.ColumnSpec;\n-import com.jgoodies.forms.layout.FormLayout;\n-import com.jgoodies.forms.layout.RowSpec;\n-\n-public class mainWindow extends JFrame {\n-\n-\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n-\tprivate final JMenu File = new JMenu();\n-\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n-\tprivate final JMenu Operations = new JMenu();\n-\tprivate final JMenu Help = new JMenu();\n-\tprivate final JMenuItem HelpAbout = new JMenuItem();\n-\tprivate final JMenuItem FileExit = new JMenuItem();\n-\tprivate static mainWindow mainWindowPointer;\n-\t\n-\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n-\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n-\tprivate final JPanel panel = new JPanel();\n-\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n-\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tmainWindow frame = new mainWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic mainWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 682, 438);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\tmainWindowPointer = this;\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\t\t\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\taddWindowListener(new ThisWindowListener());\n-\t\tgetContentPane().setLayout(new BorderLayout());\n-\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"mainWindow\");\n-\t\t\n-\t\tsetJMenuBar(mainWindowMenu);\n-\t\t\n-\t\tmainWindowMenu.add(File);\n-\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileConnectToDb);\n-\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n-\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileDisconnectFromDb);\n-\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n-\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\tFileDisconnectFromDb.setEnabled(false);\n-\n-\t\tFile.addSeparator();\n-\t\t\n-\t\tFile.add(FileExit);\n-\t\tFileExit.addActionListener(new FileExitActionListener());\n-\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tmainWindowMenu.add(Operations);\n-\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tOperations.setEnabled(false);\n-\t\t\n-\t\tmainWindowMenu.add(Help);\n-\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tHelp.add(HelpAbout);\n-\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n-\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n-\t\t\tnew ColumnSpec[] {\n-\t\t\t\tColumnSpec.decode(\"149dlu\"),\n-\t\t\t\tColumnSpec.decode(\"72px\"),\n-\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n-\t\t\tnew RowSpec[] {\n-\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n-\t\t\t\tRowSpec.decode(\"16px\")}));\n-\t\tmainWindowStatusPanel.setSize(666, 25);\n-\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n-\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n-\t\t\n-\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n-\t\t\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));\n-\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n-\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\tmainWindowStatusPanelSetEnabled(false);\n-\t}\n-\t\n-\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n-\t\t\n-\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n-\t\t\n-\t\tfor (int i = 0; i < comps.length; i++) {\n-\t\t\n-\t\t\tcomps[i].setEnabled(enable);\t\n-\t\t}\n-\t\t\n-\t\tmainWindowStatusPanel.setEnabled(enable);\n-\t}\n-\t\n-\tprivate class ThisWindowListener extends WindowAdapter {\n-\t\tpublic void windowClosing(WindowEvent e) {\n-\t\t\tthis_windowClosing(e);\n-\t\t}\n-\t}\n-\tprivate class FileExitActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileExit_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileConnectToDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileConnectToDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileDisconnectFromDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n-\t\t}\n-\t}\n-\n-\tprotected void this_windowClosing(WindowEvent e) {\n-\t\t\n-\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-\t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t}\n-\t\t}\n-\t\tthis.dispose();\n-\t\t//System.exit(0);\n-\t}\n-\t\n-\tprotected void fileExit_actionPerformed(ActionEvent e) {\n-\n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n-\t}\n-\t\n-\t////////////////////////////////////////////////////////////////////////\n-\t\n-\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\t//databaseConnectWindow.main(null);\n-\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n-\t\tdcw.setVisible(true);\n-\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n-\t}\n-\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n-\t\t\n-        public void windowClosing(WindowEvent e) {\n-            \n-        \te.getWindow().dispose(); \n-        \t\n-        \tif (databaseConnectWindow.dbPortal != null) {\n-    \t\t\t\n-    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-    \t\t\t\t\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(true);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n-    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n-    \t\t\t}\n-    \t\t\telse {\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n-    \t\t\t}\n-    \t\t}            \n-        }\n-    };\n-    \n-    ////////////////////////////////////////////////////////////////////////\n-    \n-\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t\n-\t\t\tthis.FileConnectToDb.setEnabled(true);\n-\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n-\t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\t\t\n-\t\t}\n-\t}\n-\t\n-\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n-\t}\n-\t\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/a8/40b444ccb35d001211398853d386ea7d",
          "status": "added",
          "additions": 325,
          "deletions": 0,
          "patch": "@@ -0,0 +1,325 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.JButton;\n+import javax.swing.WindowConstants;\n+import javax.swing.border.TitledBorder;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserLoginWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3003L;\n+\n+\tprivate final JPanel groupLoginPanel = new JPanel();\n+\tprivate final JPanel groupCreateNewUserPanel = new JPanel();\n+\tprivate final JLabel loginUsernameLabel = new JLabel();\n+\tprivate final JLabel loginPasswordLabel = new JLabel();\n+\tprivate final JButton loginButton = new JButton();\n+\tprivate final JTextField loginUsernameTextField = new JTextField();\n+\tprivate final JPasswordField loginPasswordPasswordField = new JPasswordField();\n+\tprivate final JLabel newUsernameLabel = new JLabel();\n+\tprivate final JLabel newPasswordLabel = new JLabel();\n+\tprivate final JLabel newUserFirstNameLabel = new JLabel();\n+\tprivate final JLabel newUserLastNameLabel = new JLabel();\n+\tprivate final JButton createNewOperatorButton = new JButton();\n+\tprivate final JTextField newUsernameTextField = new JTextField();\n+\tprivate final JTextField newFirstNameTextField = new JTextField();\n+\tprivate final JPasswordField newPasswordPasswordField = new JPasswordField();\n+\tprivate final JTextField newLastNameTextField = new JTextField();\n+\t\n+\tpublic static int loggedUserId = -1;\n+\tpublic static String loggedUserNames = \"\";\n+\t\n+\tprivate final JLabel newPasswordAgainLabel = new JLabel();\n+\tprivate final JPasswordField newPasswordPasswordAgainField = new JPasswordField();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserLoginWindow frame = new operatorUserLoginWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserLoginWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 518, 242);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorLoginWindow\");\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\t\n+\t\tgetContentPane().add(groupLoginPanel);\n+\t\tgroupLoginPanel.setLayout(null);\n+\t\tgroupLoginPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupLoginPanel.setBounds(10, 10, 243, 133);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameLabel);\n+\t\tloginUsernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginUsernameLabel.setBounds(10, 31, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordLabel);\n+\t\tloginPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginPasswordLabel.setBounds(10, 53, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginButton);\n+\t\tloginButton.addActionListener(new LoginButtonActionListener());\n+\t\tloginButton.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tloginButton.setBounds(127, 93, 106, 26);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameTextField);\n+\t\tloginUsernameTextField.setBounds(96, 29, 137, 20);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordPasswordField);\n+\t\tloginPasswordPasswordField.setBounds(96, 51, 137, 20);\n+\t\t\n+\t\tgetContentPane().add(groupCreateNewUserPanel);\n+\t\tgroupCreateNewUserPanel.setLayout(null);\n+\t\tgroupCreateNewUserPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupCreateNewUserPanel.setBounds(259, 10, 243, 194);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameLabel);\n+\t\tnewUsernameLabel.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUsernameLabel.setBounds(10, 32, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordLabel);\n+\t\tnewPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordLabel.setBounds(10, 54, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserFirstNameLabel);\n+\t\tnewUserFirstNameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnewUserFirstNameLabel.setBounds(10, 98, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserLastNameLabel);\n+\t\tnewUserLastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUserLastNameLabel.setBounds(10, 120, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(createNewOperatorButton);\n+\t\tcreateNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());\n+\t\tcreateNewOperatorButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tcreateNewOperatorButton.setBounds(127, 158, 106, 26);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameTextField);\n+\t\tnewUsernameTextField.setBounds(111, 30, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newFirstNameTextField);\n+\t\tnewFirstNameTextField.setBounds(111, 96, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordField);\n+\t\tnewPasswordPasswordField.setBounds(111, 52, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newLastNameTextField);\n+\t\tnewLastNameTextField.setBounds(111, 118, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordAgainLabel);\n+\t\tnewPasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordAgainLabel.setBounds(10, 76, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordAgainField);\n+\t\tnewPasswordPasswordAgainField.setBounds(111, 75, 122, 20);\n+\t}\n+\tprivate class LoginButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tloginButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class CreateNewOperatorButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tcreateNewOperatorButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\t\n+\tprotected void loginButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tString password = \"\";\n+\t\t\t\t\n+\t\t\t\tchar[] pass = loginPasswordPasswordField.getPassword();\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tResultSet rs = null;\n+\t\t\t\t\n+\t\t\t\ttry {\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\trs = databaseConnectWindow.dbPortal.executeParameterizedQuery(\"SELECT operator_id, operator_first_name, \" + \"\" +\n+\t\t\t\t\t\t\t\"operator_last_name FROM operators WHERE operator_username = ? AND operator_password = ?\", \n+\t\t\t\t\t\t\tloginUsernameTextField.getText(), Md5hashcalc.calculateMD5hash(password));\t\t\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (rs != null) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tloggedUserId = rs.getInt(1);\n+\t\t\t\t\t\tloggedUserNames = rs.getString(2) + \" \" + rs.getString(3);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\t\t\n+\t}\n+\t\n+\tprotected void createNewOperatorButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tchar[] pass = newPasswordPasswordField.getPassword();\n+\t\t\t\tString password = \"\";\n+\t\t\t\tString encryptedPassword = \"\";\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tchar[] pass2 = newPasswordPasswordAgainField.getPassword();\n+\t\t\t\t\n+\t\t\t\tif (pass.length == pass2.length) {\n+\t\t\t\t\n+\t\t\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tif (pass[i] != pass2[i]) {\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\t\t\t\t\n+\t\t\t\tif ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && \n+\t\t\t\t\t\t(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tencryptedPassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT COUNT(*) FROM operators WHERE operator_username='\" +\n+\t\t\t\t\t\t\tnewUsernameTextField.getText() + \"'\");\n+\t\t\t\t\t\n+\t\t\t\t\tint usersCount = 0;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tusersCount = rs.getInt(1);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\t\t\t\t\t\t\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\tif ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {\t\t\t\t\t\t\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t//no such existing username so now we create it\n+\t\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"INSERT INTO operators(operator_username, operator_password, \" +\n+\t\t\t\t\t\t\t\t\"operator_first_name, operator_last_name) VALUES('\" + newUsernameTextField.getText() + \"', '\" +\n+\t\t\t\t\t\t\t\tencryptedPassword + \"', '\" + newFirstNameTextField.getText() + \"', '\" + newLastNameTextField.getText() + \"')\") != 1) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse { //everything ok so login now\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tloginUsernameTextField.setText(newUsernameTextField.getText());\n+\t\t\t\t\t\t\tloginPasswordPasswordField.setText(password);\n+\t\t\t\t\t\t\tloginButton_actionPerformed(null);\n+\t\t\t\t\t\t}\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.getLastError() != null) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t}\t\t\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/b8/60ea091bb35d001211398853d386ea7d",
          "status": "added",
          "additions": 572,
          "deletions": 0,
          "patch": "@@ -0,0 +1,572 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeParameterizedNonQuery(String query, Object... parameters) {\n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\t//TODO...\n+\t\t// boolean - ok\n+\t\t// String  - ok\n+\t\t// char    - \n+\t\t// byte    -\n+\t\t// short   -\n+\t\t// int     -\n+\t\t// long    -\n+\t\t// double  -\n+\t\t// float   -\n+\t\t// Date    -\n+\t\t// null ???\n+\t\t\n+\t\ttry {\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i + 1, parameters[i]);\n+\t\t\t\t\n+\t\t\t\t/*if (parameters[i] instanceof Boolean) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof String) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setString(i, ((String)parameters[i].toString()));\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof Character) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.set\n+\t\t\t\t}*/\n+\t\t\t}\n+\t\t\t\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns ResultSet with data. For SELECT...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeParameterizedQuery(String query, Object... parameters) { //executes query and returns ResultSet \n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i + 1, parameters[i]);\n+\t\t\t}\n+\t\t\t\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/b9/8001c7c3a35c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 218,
          "patch": "@@ -1,218 +0,0 @@\n-import java.awt.BorderLayout;\n-import java.awt.Dimension;\n-import java.awt.EventQueue;\n-import java.awt.FlowLayout;\n-import java.awt.GridLayout;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.event.WindowListener;\n-import javax.swing.BoxLayout;\n-import javax.swing.JButton;\n-import javax.swing.JComponent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.ActionEvent;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JMenu;\n-import javax.swing.JMenuBar;\n-import javax.swing.JMenuItem;\n-import javax.swing.JOptionPane;\n-import javax.swing.JPanel;\n-import javax.swing.JSeparator;\n-import javax.swing.SpringLayout;\n-import javax.swing.border.BevelBorder;\n-import javax.swing.border.EtchedBorder;\n-import org.jdesktop.layout.GroupLayout;\n-import org.jdesktop.layout.LayoutStyle;\n-import com.jgoodies.forms.factories.FormFactory;\n-import com.jgoodies.forms.layout.CellConstraints;\n-import com.jgoodies.forms.layout.ColumnSpec;\n-import com.jgoodies.forms.layout.FormLayout;\n-import com.jgoodies.forms.layout.RowSpec;\n-\n-public class mainWindow extends JFrame {\n-\n-\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n-\tprivate final JMenu File = new JMenu();\n-\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n-\tprivate final JMenu Operations = new JMenu();\n-\tprivate final JMenu Help = new JMenu();\n-\tprivate final JMenuItem HelpAbout = new JMenuItem();\n-\tprivate final JMenuItem FileExit = new JMenuItem();\n-\tprivate static mainWindow mainWindowPointer;\n-\t\n-\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n-\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n-\tprivate final JPanel panel = new JPanel();\n-\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n-\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tmainWindow frame = new mainWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic mainWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 682, 438);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\tmainWindowPointer = this;\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\t\t\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\taddWindowListener(new ThisWindowListener());\n-\t\tgetContentPane().setLayout(new BorderLayout());\n-\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"mainWindow\");\n-\t\t\n-\t\tsetJMenuBar(mainWindowMenu);\n-\t\t\n-\t\tmainWindowMenu.add(File);\n-\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileConnectToDb);\n-\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n-\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileDisconnectFromDb);\n-\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n-\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\tFileDisconnectFromDb.setEnabled(false);\n-\n-\t\tFile.addSeparator();\n-\t\t\n-\t\tFile.add(FileExit);\n-\t\tFileExit.addActionListener(new FileExitActionListener());\n-\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tmainWindowMenu.add(Operations);\n-\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tOperations.setEnabled(false);\n-\t\t\n-\t\tmainWindowMenu.add(Help);\n-\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tHelp.add(HelpAbout);\n-\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n-\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n-\t\t\tnew ColumnSpec[] {\n-\t\t\t\tColumnSpec.decode(\"149dlu\"),\n-\t\t\t\tColumnSpec.decode(\"72px\"),\n-\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n-\t\t\tnew RowSpec[] {\n-\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n-\t\t\t\tRowSpec.decode(\"16px\")}));\n-\t\tmainWindowStatusPanel.setSize(666, 25);\n-\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n-\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n-\t\t\n-\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n-\t\t\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));\n-\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t}\n-\t\n-\tprivate class ThisWindowListener extends WindowAdapter {\n-\t\tpublic void windowClosing(WindowEvent e) {\n-\t\t\tthis_windowClosing(e);\n-\t\t}\n-\t}\n-\tprivate class FileExitActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileExit_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileConnectToDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileConnectToDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileDisconnectFromDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\n-\tprotected void this_windowClosing(WindowEvent e) {\n-\t\t\n-\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-\t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t}\n-\t\t}\n-\t\tthis.dispose();\n-\t\t//System.exit(0);\n-\t}\n-\t\n-\tprotected void fileExit_actionPerformed(ActionEvent e) {\n-\n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n-\t}\n-\t\n-\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\t//databaseConnectWindow.main(null);\n-\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n-\t\tdcw.setVisible(true);\n-\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n-\t}\n-\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n-\t\t\n-        public void windowClosing(WindowEvent e) {\n-            \n-        \te.getWindow().dispose(); \n-        \t\n-        \tif (databaseConnectWindow.dbPortal != null) {\n-    \t\t\t\n-    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-    \t\t\t\t\n-    \t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n-    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n-    \t\t\t}\n-    \t\t\telse {\n-    \t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n-    \t\t\t}\n-    \t\t}            \n-        }\n-    };\n-\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\n-\t\t\tthis.FileConnectToDb.setEnabled(true);\n-\t\t}\n-\t}\n-\t\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/bd/30f22be6b25c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/c2/9020359db35d001211398853d386ea7d",
          "status": "added",
          "additions": 332,
          "deletions": 0,
          "patch": "@@ -0,0 +1,332 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.JButton;\n+import javax.swing.WindowConstants;\n+import javax.swing.border.TitledBorder;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserLoginWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3003L;\n+\n+\tprivate final JPanel groupLoginPanel = new JPanel();\n+\tprivate final JPanel groupCreateNewUserPanel = new JPanel();\n+\tprivate final JLabel loginUsernameLabel = new JLabel();\n+\tprivate final JLabel loginPasswordLabel = new JLabel();\n+\tprivate final JButton loginButton = new JButton();\n+\tprivate final JTextField loginUsernameTextField = new JTextField();\n+\tprivate final JPasswordField loginPasswordPasswordField = new JPasswordField();\n+\tprivate final JLabel newUsernameLabel = new JLabel();\n+\tprivate final JLabel newPasswordLabel = new JLabel();\n+\tprivate final JLabel newUserFirstNameLabel = new JLabel();\n+\tprivate final JLabel newUserLastNameLabel = new JLabel();\n+\tprivate final JButton createNewOperatorButton = new JButton();\n+\tprivate final JTextField newUsernameTextField = new JTextField();\n+\tprivate final JTextField newFirstNameTextField = new JTextField();\n+\tprivate final JPasswordField newPasswordPasswordField = new JPasswordField();\n+\tprivate final JTextField newLastNameTextField = new JTextField();\n+\t\n+\tpublic static int loggedUserId = -1;\n+\tpublic static String loggedUserNames = \"\";\n+\t\n+\tprivate final JLabel newPasswordAgainLabel = new JLabel();\n+\tprivate final JPasswordField newPasswordPasswordAgainField = new JPasswordField();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserLoginWindow frame = new operatorUserLoginWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserLoginWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 518, 242);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorLoginWindow\");\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\t\n+\t\tgetContentPane().add(groupLoginPanel);\n+\t\tgroupLoginPanel.setLayout(null);\n+\t\tgroupLoginPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupLoginPanel.setBounds(10, 10, 243, 133);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameLabel);\n+\t\tloginUsernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginUsernameLabel.setBounds(10, 31, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordLabel);\n+\t\tloginPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginPasswordLabel.setBounds(10, 53, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginButton);\n+\t\tloginButton.addActionListener(new LoginButtonActionListener());\n+\t\tloginButton.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tloginButton.setBounds(127, 93, 106, 26);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameTextField);\n+\t\tloginUsernameTextField.setBounds(96, 29, 137, 20);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordPasswordField);\n+\t\tloginPasswordPasswordField.setBounds(96, 51, 137, 20);\n+\t\t\n+\t\tgetContentPane().add(groupCreateNewUserPanel);\n+\t\tgroupCreateNewUserPanel.setLayout(null);\n+\t\tgroupCreateNewUserPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupCreateNewUserPanel.setBounds(259, 10, 243, 194);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameLabel);\n+\t\tnewUsernameLabel.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUsernameLabel.setBounds(10, 32, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordLabel);\n+\t\tnewPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordLabel.setBounds(10, 54, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserFirstNameLabel);\n+\t\tnewUserFirstNameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnewUserFirstNameLabel.setBounds(10, 98, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserLastNameLabel);\n+\t\tnewUserLastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUserLastNameLabel.setBounds(10, 120, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(createNewOperatorButton);\n+\t\tcreateNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());\n+\t\tcreateNewOperatorButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tcreateNewOperatorButton.setBounds(127, 158, 106, 26);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameTextField);\n+\t\tnewUsernameTextField.setBounds(111, 30, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newFirstNameTextField);\n+\t\tnewFirstNameTextField.setBounds(111, 96, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordField);\n+\t\tnewPasswordPasswordField.setBounds(111, 52, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newLastNameTextField);\n+\t\tnewLastNameTextField.setBounds(111, 118, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordAgainLabel);\n+\t\tnewPasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordAgainLabel.setBounds(10, 76, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordAgainField);\n+\t\tnewPasswordPasswordAgainField.setBounds(111, 75, 122, 20);\n+\t}\n+\tprivate class LoginButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tloginButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class CreateNewOperatorButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tcreateNewOperatorButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\t\n+\tprotected void loginButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tString password = \"\";\n+\t\t\t\t\n+\t\t\t\tchar[] pass = loginPasswordPasswordField.getPassword();\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\n+\t\t\t\tResultSet rs = null;\n+\t\t\t\t\n+\t\t\t\ttry {\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\t/*rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE\" + \n+\t\t\t\t\t\t\" operator_username='\" + loginUsernameTextField.getText() + \"' AND operator_password='\" +\n+\t\t\t\t\t\tMd5hashcalc.calculateMD5hash(password) + \"'\");*/\n+\t\t\t\t\t\n+\t\t\t\t\trs = databaseConnectWindow.dbPortal.executeParameterizedQuery(\"SELECT operator_id, operator_first_name, \" + \"\" +\n+\t\t\t\t\t\t\t\"operator_last_name FROM operators WHERE operator_username = ? AND operator_password = ?\", \n+\t\t\t\t\t\t\tloginUsernameTextField.getText(), Md5hashcalc.calculateMD5hash(password));\n+\t\t\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (rs != null) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tloggedUserId = rs.getInt(1);\n+\t\t\t\t\t\tloggedUserNames = rs.getString(2) + \" \" + rs.getString(3);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\t\t\n+\t}\n+\t\n+\tprotected void createNewOperatorButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tchar[] pass = newPasswordPasswordField.getPassword();\n+\t\t\t\tString password = \"\";\n+\t\t\t\tString encryptedPassword = \"\";\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tchar[] pass2 = newPasswordPasswordAgainField.getPassword();\n+\t\t\t\t\n+\t\t\t\tif (pass.length == pass2.length) {\n+\t\t\t\t\n+\t\t\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tif (pass[i] != pass2[i]) {\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\t\t\t\t\n+\t\t\t\tif ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && \n+\t\t\t\t\t\t(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tencryptedPassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT COUNT(*) FROM operators WHERE operator_username='\" +\n+\t\t\t\t\t\t\tnewUsernameTextField.getText() + \"'\");\n+\t\t\t\t\t\n+\t\t\t\t\tint usersCount = 0;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tusersCount = rs.getInt(1);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\t\t\t\t\t\t\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\tif ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {\t\t\t\t\t\t\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t//no such existing username so now we create it\n+\t\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"INSERT INTO operators(operator_username, operator_password, \" +\n+\t\t\t\t\t\t\t\t\"operator_first_name, operator_last_name) VALUES('\" + newUsernameTextField.getText() + \"', '\" +\n+\t\t\t\t\t\t\t\tencryptedPassword + \"', '\" + newFirstNameTextField.getText() + \"', '\" + newLastNameTextField.getText() + \"')\") != 1) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse { //everything ok so login now\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tloginUsernameTextField.setText(newUsernameTextField.getText());\n+\t\t\t\t\t\t\tloginPasswordPasswordField.setText(password);\n+\t\t\t\t\t\t\tloginButton_actionPerformed(null);\n+\t\t\t\t\t\t}\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.getLastError() != null) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t}\t\t\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/c4/e0b4ec30a35c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 194,
          "patch": "@@ -1,194 +0,0 @@\n-import java.awt.BorderLayout;\n-import java.awt.Dimension;\n-import java.awt.EventQueue;\n-import java.awt.FlowLayout;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.event.WindowListener;\n-import javax.swing.BoxLayout;\n-import java.awt.event.ActionListener;\n-import java.awt.event.ActionEvent;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JMenu;\n-import javax.swing.JMenuBar;\n-import javax.swing.JMenuItem;\n-import javax.swing.JOptionPane;\n-import javax.swing.JPanel;\n-import javax.swing.JSeparator;\n-import javax.swing.border.BevelBorder;\n-import javax.swing.border.EtchedBorder;\n-import com.jgoodies.forms.factories.FormFactory;\n-import com.jgoodies.forms.layout.ColumnSpec;\n-import com.jgoodies.forms.layout.FormLayout;\n-import com.jgoodies.forms.layout.RowSpec;\n-\n-public class mainWindow extends JFrame {\n-\n-\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n-\tprivate final JMenu File = new JMenu();\n-\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n-\tprivate final JMenu Operations = new JMenu();\n-\tprivate final JMenu Help = new JMenu();\n-\tprivate final JMenuItem HelpAbout = new JMenuItem();\n-\tprivate final JMenuItem FileExit = new JMenuItem();\n-\tprivate static mainWindow mainWindowPointer;\n-\t\n-\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n-\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n-\tprivate final JPanel panel = new JPanel();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tmainWindow frame = new mainWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic mainWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 682, 438);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\tmainWindowPointer = this;\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\t\t\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\taddWindowListener(new ThisWindowListener());\n-\t\tgetContentPane().setLayout(new BorderLayout());\n-\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"mainWindow\");\n-\t\t\n-\t\tsetJMenuBar(mainWindowMenu);\n-\t\t\n-\t\tmainWindowMenu.add(File);\n-\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileConnectToDb);\n-\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n-\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileDisconnectFromDb);\n-\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n-\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\tFileDisconnectFromDb.setEnabled(false);\n-\n-\t\tFile.addSeparator();\n-\t\t\n-\t\tFile.add(FileExit);\n-\t\tFileExit.addActionListener(new FileExitActionListener());\n-\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tmainWindowMenu.add(Operations);\n-\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tOperations.setEnabled(false);\n-\t\t\n-\t\tmainWindowMenu.add(Help);\n-\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tHelp.add(HelpAbout);\n-\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n-\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n-\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(0, 20));\n-\t\tmainWindowStatusPanel.setBounds(0, 357, 666, 40);\t\t\n-\t}\n-\t\n-\tprivate class ThisWindowListener extends WindowAdapter {\n-\t\tpublic void windowClosing(WindowEvent e) {\n-\t\t\tthis_windowClosing(e);\n-\t\t}\n-\t}\n-\tprivate class FileExitActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileExit_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileConnectToDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileConnectToDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileDisconnectFromDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\n-\tprotected void this_windowClosing(WindowEvent e) {\n-\t\t\n-\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-\t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t}\n-\t\t}\n-\t\tthis.dispose();\n-\t\t//System.exit(0);\n-\t}\n-\t\n-\tprotected void fileExit_actionPerformed(ActionEvent e) {\n-\n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n-\t}\n-\t\n-\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\t//databaseConnectWindow.main(null);\n-\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n-\t\tdcw.setVisible(true);\n-\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n-\t}\n-\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n-\t\t\n-        public void windowClosing(WindowEvent e) {\n-            \n-        \te.getWindow().dispose(); \n-        \t\n-        \tif (databaseConnectWindow.dbPortal != null) {\n-    \t\t\t\n-    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-    \t\t\t\t\n-    \t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n-    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n-    \t\t\t}\n-    \t\t\telse {\n-    \t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n-    \t\t\t}\n-    \t\t}            \n-        }\n-    };\n-\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\n-\t\t\tthis.FileConnectToDb.setEnabled(true);\n-\t\t}\n-\t}\n-\t\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/c5/a02137b1aa5d00121890bdcc27f78f62",
          "status": "added",
          "additions": 334,
          "deletions": 0,
          "patch": "@@ -0,0 +1,334 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.JButton;\n+import javax.swing.WindowConstants;\n+import javax.swing.border.TitledBorder;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserLoginWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3003L;\n+\n+\tprivate final JPanel groupLoginPanel = new JPanel();\n+\tprivate final JPanel groupCreateNewUserPanel = new JPanel();\n+\tprivate final JLabel loginUsernameLabel = new JLabel();\n+\tprivate final JLabel loginPasswordLabel = new JLabel();\n+\tprivate final JButton loginButton = new JButton();\n+\tprivate final JTextField loginUsernameTextField = new JTextField();\n+\tprivate final JPasswordField loginPasswordPasswordField = new JPasswordField();\n+\tprivate final JLabel newUsernameLabel = new JLabel();\n+\tprivate final JLabel newPasswordLabel = new JLabel();\n+\tprivate final JLabel newUserFirstNameLabel = new JLabel();\n+\tprivate final JLabel newUserLastNameLabel = new JLabel();\n+\tprivate final JButton createNewOperatorButton = new JButton();\n+\tprivate final JTextField newUsernameTextField = new JTextField();\n+\tprivate final JTextField newFirstNameTextField = new JTextField();\n+\tprivate final JPasswordField newPasswordPasswordField = new JPasswordField();\n+\tprivate final JTextField newLastNameTextField = new JTextField();\n+\t\n+\tpublic static int loggedUserId = -1;\n+\tpublic static String loggedUserNames = \"\";\n+\t\n+\tprivate final JLabel newPasswordAgainLabel = new JLabel();\n+\tprivate final JPasswordField newPasswordPasswordAgainField = new JPasswordField();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserLoginWindow frame = new operatorUserLoginWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserLoginWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 518, 242);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorLoginWindow\");\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\t\n+\t\tgetContentPane().add(groupLoginPanel);\n+\t\tgroupLoginPanel.setLayout(null);\n+\t\tgroupLoginPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupLoginPanel.setBounds(10, 10, 243, 133);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameLabel);\n+\t\tloginUsernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginUsernameLabel.setBounds(10, 31, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordLabel);\n+\t\tloginPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginPasswordLabel.setBounds(10, 53, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginButton);\n+\t\tloginButton.addActionListener(new LoginButtonActionListener());\n+\t\tloginButton.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tloginButton.setBounds(127, 93, 106, 26);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameTextField);\n+\t\tloginUsernameTextField.setBounds(96, 29, 137, 20);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordPasswordField);\n+\t\tloginPasswordPasswordField.setBounds(96, 51, 137, 20);\n+\t\t\n+\t\tgetContentPane().add(groupCreateNewUserPanel);\n+\t\tgroupCreateNewUserPanel.setLayout(null);\n+\t\tgroupCreateNewUserPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupCreateNewUserPanel.setBounds(259, 10, 243, 194);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameLabel);\n+\t\tnewUsernameLabel.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUsernameLabel.setBounds(10, 32, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordLabel);\n+\t\tnewPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordLabel.setBounds(10, 54, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserFirstNameLabel);\n+\t\tnewUserFirstNameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnewUserFirstNameLabel.setBounds(10, 98, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserLastNameLabel);\n+\t\tnewUserLastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUserLastNameLabel.setBounds(10, 120, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(createNewOperatorButton);\n+\t\tcreateNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());\n+\t\tcreateNewOperatorButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tcreateNewOperatorButton.setBounds(127, 158, 106, 26);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameTextField);\n+\t\tnewUsernameTextField.setBounds(111, 30, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newFirstNameTextField);\n+\t\tnewFirstNameTextField.setBounds(111, 96, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordField);\n+\t\tnewPasswordPasswordField.setBounds(111, 52, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newLastNameTextField);\n+\t\tnewLastNameTextField.setBounds(111, 118, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordAgainLabel);\n+\t\tnewPasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordAgainLabel.setBounds(10, 76, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordAgainField);\n+\t\tnewPasswordPasswordAgainField.setBounds(111, 75, 122, 20);\n+\t}\n+\tprivate class LoginButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tloginButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class CreateNewOperatorButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tcreateNewOperatorButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\t\n+\tprotected void loginButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tString password = \"\";\n+\t\t\t\t\n+\t\t\t\tchar[] pass = loginPasswordPasswordField.getPassword();\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\n+\t\t\t\tResultSet rs = null;\n+\t\t\t\t\n+\t\t\t\ttry {\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\t/*rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_id, operator_first_name, operator_last_name FROM operators WHERE\" + \n+\t\t\t\t\t\t\" operator_username='\" + loginUsernameTextField.getText() + \"' AND operator_password='\" +\n+\t\t\t\t\t\tMd5hashcalc.calculateMD5hash(password) + \"'\");*/\n+\t\t\t\t\tObject[] params = new String[2];\n+\t\t\t\t\tparams[0] = loginUsernameTextField.getText();\n+\t\t\t\t\tparams[1] = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t\n+\t\t\t\t\trs = databaseConnectWindow.dbPortal.executeParameterizedQuery(\"SELECT operator_id, operator_first_name, \" + \"\" +\n+\t\t\t\t\t\t\t\"operator_last_name FROM operators WHERE operator_username=? AND operator_password=?\", params);\n+\t\t\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (rs != null) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tloggedUserId = rs.getInt(1);\n+\t\t\t\t\t\tloggedUserNames = rs.getString(2) + \" \" + rs.getString(3);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\t\t\n+\t}\n+\t\n+\tprotected void createNewOperatorButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tchar[] pass = newPasswordPasswordField.getPassword();\n+\t\t\t\tString password = \"\";\n+\t\t\t\tString encryptedPassword = \"\";\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tchar[] pass2 = newPasswordPasswordAgainField.getPassword();\n+\t\t\t\t\n+\t\t\t\tif (pass.length == pass2.length) {\n+\t\t\t\t\n+\t\t\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tif (pass[i] != pass2[i]) {\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\t\t\t\t\n+\t\t\t\tif ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && \n+\t\t\t\t\t\t(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tencryptedPassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT COUNT(*) FROM operators WHERE operator_username='\" +\n+\t\t\t\t\t\t\tnewUsernameTextField.getText() + \"'\");\n+\t\t\t\t\t\n+\t\t\t\t\tint usersCount = 0;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tusersCount = rs.getInt(1);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\t\t\t\t\t\t\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\tif ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {\t\t\t\t\t\t\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t//no such existing username so now we create it\n+\t\t\t\t\t\t//FIXME prone to sql injection\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.executeNonQuery(\"INSERT INTO operators(operator_username, operator_password, \" +\n+\t\t\t\t\t\t\t\t\"operator_first_name, operator_last_name) VALUES('\" + newUsernameTextField.getText() + \"', '\" +\n+\t\t\t\t\t\t\t\tencryptedPassword + \"', '\" + newFirstNameTextField.getText() + \"', '\" + newLastNameTextField.getText() + \"')\") != 1) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse { //everything ok so login now\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tloginUsernameTextField.setText(newUsernameTextField.getText());\n+\t\t\t\t\t\t\tloginPasswordPasswordField.setText(password);\n+\t\t\t\t\t\t\tloginButton_actionPerformed(null);\n+\t\t\t\t\t\t}\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.getLastError() != null) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t}\t\t\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/c8/3006c73e005d00121f22d5fb8a5d79d9",
          "status": "removed",
          "additions": 0,
          "deletions": 133,
          "patch": "@@ -1,133 +0,0 @@\n-import java.awt.EventQueue;\n-import javax.swing.JButton;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPasswordField;\n-import javax.swing.JTextField;\n-\n-import java.sql.ResultSet;\n-import database_management.MySQLdbManager;\n-import md5_calculator.Md5hashcalc;\n-\n-public class operatorUserSettingsWindow extends JFrame {\n-\n-\tprivate final JLabel usernameLabel = new JLabel();\n-\tprivate final JLabel passwordLabel = new JLabel();\n-\tprivate final JLabel passwordAgainLabel = new JLabel();\n-\tprivate final JLabel nameLabel = new JLabel();\n-\tprivate final JLabel lastNameLabel = new JLabel();\n-\tprivate final JButton updateButton = new JButton();\n-\tprivate final JTextField firstNameTextField = new JTextField();\n-\tprivate final JTextField lastNameTextField = new JTextField();\n-\tprivate final JPasswordField passwordPasswordField = new JPasswordField();\n-\tprivate final JPasswordField passwordAgainPasswordField = new JPasswordField();\n-\t\n-\tprivate String currentOperatorPassword;\n-\t\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\toperatorUserSettingsWindow frame = new operatorUserSettingsWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic operatorUserSettingsWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 314, 214);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\tgetContentPane().setLayout(null);\n-\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"operatorUserSettings\");\n-\t\t\n-\t\tgetContentPane().add(usernameLabel);\n-\t\tusernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tusernameLabel.setBounds(10, 0, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordLabel);\n-\t\tpasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordLabel.setBounds(10, 76, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(passwordAgainLabel);\n-\t\tpasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tpasswordAgainLabel.setBounds(10, 95, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(nameLabel);\n-\t\tnameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n-\t\tnameLabel.setBounds(10, 32, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(lastNameLabel);\n-\t\tlastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlastNameLabel.setBounds(10, 54, 97, 16);\n-\t\t\n-\t\tgetContentPane().add(updateButton);\n-\t\tupdateButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tupdateButton.setBounds(93, 140, 106, 26);\n-\t\t\n-\t\tgetContentPane().add(firstNameTextField);\n-\t\tfirstNameTextField.setBounds(113, 30, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(lastNameTextField);\n-\t\tlastNameTextField.setBounds(113, 52, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordPasswordField);\n-\t\tpasswordPasswordField.setBounds(113, 74, 175, 20);\n-\t\t\n-\t\tgetContentPane().add(passwordAgainPasswordField);\n-\t\tpasswordAgainPasswordField.setBounds(113, 97, 175, 20);\n-\t\t\n-\t\tgetCurrentUserData();\n-\t}\n-\t\n-\tprivate void getCurrentUserData() {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (databaseConnectWindow.dbPortal.isConnected() == false) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tResultSet rs = databaseConnectWindow.dbPortal.executeQuery(\"SELECT operator_username, operator_password, \" + \n-\t\t\t\t\"operator_first_name, operator_last_name FROM operators WHERE operator_id=\" + operatorUserLoginWindow.loggedUserId);\n-\t\t\n-\t\tif ((rs == null) || (databaseConnectWindow.dbPortal.getLastError() != null)) {\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\trs.getString(1);\n-\t\t\tcurrentOperatorPassword = rs.getString(2);\n-\t\t\trs.getString(3);\n-\t\t\trs.getString(4);\n-\t\t}\n-\t\tcatch (Exception ex) {\t\t\t\n-\t\t}\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/c9/00c97468a45d00121890bdcc27f78f62",
          "status": "renamed",
          "additions": 139,
          "deletions": 11,
          "patch": "@@ -2,8 +2,8 @@ import java.awt.BorderLayout;\n import java.awt.Component;\n import java.awt.Dimension;\n import java.awt.EventQueue;\n-import java.awt.FlowLayout;\n import java.awt.GridLayout;\n+import java.awt.Insets;\n import java.awt.event.WindowAdapter;\n import java.awt.event.WindowEvent;\n import java.awt.event.WindowListener;\n@@ -32,6 +32,7 @@ import com.jgoodies.forms.layout.ColumnSpec;\n import com.jgoodies.forms.layout.FormLayout;\n import com.jgoodies.forms.layout.RowSpec;\n \n+\n public class mainWindow extends JFrame {\n \n \tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n@@ -45,9 +46,17 @@ public class mainWindow extends JFrame {\n \t\n \tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n \tprivate final JPanel mainWindowStatusPanel = new JPanel();\n-\tprivate final JPanel panel = new JPanel();\n \tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n \tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n \t/**\n \t * Launch the application\n \t * @param args\n@@ -110,17 +119,36 @@ public class mainWindow extends JFrame {\n \t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\tOperations.setEnabled(false);\n \t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n \t\tmainWindowMenu.add(Help);\n \t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\t\n \t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n \t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\t\n \t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n \t\tmainWindowStatusPanel.setLayout(new FormLayout(\n \t\t\tnew ColumnSpec[] {\n \t\t\t\tColumnSpec.decode(\"149dlu\"),\n \t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n \t\t\t\tFormFactory.DEFAULT_COLSPEC},\n \t\t\tnew RowSpec[] {\n \t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n@@ -132,9 +160,24 @@ public class mainWindow extends JFrame {\n \t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n \t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n \t\t\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n \t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n-\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n \t\tmainWindowStatusPanelSetEnabled(false);\n \t}\n \t\n@@ -170,11 +213,41 @@ public class mainWindow extends JFrame {\n \t\t\tfileDisconnectFromDb_actionPerformed(e);\n \t\t}\n \t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n \tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n \t\tpublic void actionPerformed(ActionEvent e) {\n \t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n \t\t}\n \t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n \n \tprotected void this_windowClosing(WindowEvent e) {\n \t\t\n@@ -184,8 +257,7 @@ public class mainWindow extends JFrame {\n \t\t\t\n \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n \t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n \t\t\t}\n \t\t}\n \t\tthis.dispose();\n@@ -194,14 +266,13 @@ public class mainWindow extends JFrame {\n \t\n \tprotected void fileExit_actionPerformed(ActionEvent e) {\n \n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n \t}\n \t\n \t////////////////////////////////////////////////////////////////////////\n \t\n \tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n \t\t\n-\t\t//databaseConnectWindow.main(null);\n \t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n \t\tdcw.setVisible(true);\n \t\tdcw.addWindowListener(databaseConnectWindowClosing);\n@@ -234,18 +305,20 @@ public class mainWindow extends JFrame {\n \t\t\n \t\tif (databaseConnectWindow.dbPortal != null) {\n \t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n \t\t\t\n \t\t\tthis.FileConnectToDb.setEnabled(true);\n \t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n \t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\t\t\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n \t\t}\n \t}\n \t\n \t////////////////////////////////////////////////////////////////////////\n \t\n-\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n \t\t\n \t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n \t\toul.setVisible(true);\n@@ -257,14 +330,69 @@ public class mainWindow extends JFrame {\n \t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n \t\t\t\t\n \t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserLoginWindow.loggedUserNames);\n \t\t\t}\n \t\t\telse {\n \t\t\t\t\n \t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n \t\t\t}\n \t\t}\n+\t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n \t}\n \t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\n \t////////////////////////////////////////////////////////////////////////\n \t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n+\t\n }"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/ca/50c4b340ab5d00121890bdcc27f78f62",
          "status": "added",
          "additions": 572,
          "deletions": 0,
          "patch": "@@ -0,0 +1,572 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeParameterizedNonQuery(String query, Object[] parameters) {\n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\t//TODO...\n+\t\t// boolean - ok\n+\t\t// String  - ok\n+\t\t// char    - \n+\t\t// byte    -\n+\t\t// short   -\n+\t\t// int     -\n+\t\t// long    -\n+\t\t// double  -\n+\t\t// float   -\n+\t\t// Date    -\n+\t\t// null ???\n+\t\t\n+\t\ttry {\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i, parameters[i]);\n+\t\t\t\t\n+\t\t\t\t/*if (parameters[i] instanceof Boolean) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setBoolean(i, ((Boolean)parameters[i]).booleanValue());\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof String) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.setString(i, ((String)parameters[i].toString()));\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tif (parameters[i] instanceof Character) {\n+\t\t\t\t\t\n+\t\t\t\t\tsqlStatement.set\n+\t\t\t\t}*/\n+\t\t\t}\n+\t\t\t\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns ResultSet with data. For SELECT...\n+\t * @param query String\n+\t * @param parameters Object (for class variable wrappers like String, Integer, etc. only from java.lang !!!!)\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeParameterizedQuery(String query, Object[] parameters) { //executes query and returns ResultSet \n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tsqlStatement.setObject(i, parameters[i]);\n+\t\t\t}\n+\t\t\t\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d/a085d459b55d001211398853d386ea7d",
          "status": "added",
          "additions": 324,
          "deletions": 0,
          "patch": "@@ -0,0 +1,324 @@\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JPasswordField;\n+import javax.swing.JTextField;\n+import javax.swing.JButton;\n+import javax.swing.WindowConstants;\n+import javax.swing.border.TitledBorder;\n+\n+import java.sql.ResultSet;\n+import md5_calculator.Md5hashcalc;\n+\n+public class operatorUserLoginWindow extends JFrame {\n+\tprivate static final long serialVersionUID = 3003L;\n+\n+\tprivate final JPanel groupLoginPanel = new JPanel();\n+\tprivate final JPanel groupCreateNewUserPanel = new JPanel();\n+\tprivate final JLabel loginUsernameLabel = new JLabel();\n+\tprivate final JLabel loginPasswordLabel = new JLabel();\n+\tprivate final JButton loginButton = new JButton();\n+\tprivate final JTextField loginUsernameTextField = new JTextField();\n+\tprivate final JPasswordField loginPasswordPasswordField = new JPasswordField();\n+\tprivate final JLabel newUsernameLabel = new JLabel();\n+\tprivate final JLabel newPasswordLabel = new JLabel();\n+\tprivate final JLabel newUserFirstNameLabel = new JLabel();\n+\tprivate final JLabel newUserLastNameLabel = new JLabel();\n+\tprivate final JButton createNewOperatorButton = new JButton();\n+\tprivate final JTextField newUsernameTextField = new JTextField();\n+\tprivate final JTextField newFirstNameTextField = new JTextField();\n+\tprivate final JPasswordField newPasswordPasswordField = new JPasswordField();\n+\tprivate final JTextField newLastNameTextField = new JTextField();\n+\t\n+\tpublic static int loggedUserId = -1;\n+\tpublic static String loggedUserNames = \"\";\n+\t\n+\tprivate final JLabel newPasswordAgainLabel = new JLabel();\n+\tprivate final JPasswordField newPasswordPasswordAgainField = new JPasswordField();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\toperatorUserLoginWindow frame = new operatorUserLoginWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic operatorUserLoginWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 518, 242);\n+\t\tsetDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\tgetContentPane().setLayout(null);\n+\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"operatorLoginWindow\");\n+\t\tsetResizable(false);\n+\t\tsetAlwaysOnTop(true);\n+\t\t\n+\t\tgetContentPane().add(groupLoginPanel);\n+\t\tgroupLoginPanel.setLayout(null);\n+\t\tgroupLoginPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupLoginPanel.setBounds(10, 10, 243, 133);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameLabel);\n+\t\tloginUsernameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginUsernameLabel.setBounds(10, 31, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordLabel);\n+\t\tloginPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tloginPasswordLabel.setBounds(10, 53, 80, 16);\n+\t\t\n+\t\tgroupLoginPanel.add(loginButton);\n+\t\tloginButton.addActionListener(new LoginButtonActionListener());\n+\t\tloginButton.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\tloginButton.setBounds(127, 93, 106, 26);\n+\t\t\n+\t\tgroupLoginPanel.add(loginUsernameTextField);\n+\t\tloginUsernameTextField.setBounds(96, 29, 137, 20);\n+\t\t\n+\t\tgroupLoginPanel.add(loginPasswordPasswordField);\n+\t\tloginPasswordPasswordField.setBounds(96, 51, 137, 20);\n+\t\t\n+\t\tgetContentPane().add(groupCreateNewUserPanel);\n+\t\tgroupCreateNewUserPanel.setLayout(null);\n+\t\tgroupCreateNewUserPanel.setBorder(new TitledBorder(null, \"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));\n+\t\tgroupCreateNewUserPanel.setBounds(259, 10, 243, 194);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameLabel);\n+\t\tnewUsernameLabel.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUsernameLabel.setBounds(10, 32, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordLabel);\n+\t\tnewPasswordLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordLabel.setBounds(10, 54, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserFirstNameLabel);\n+\t\tnewUserFirstNameLabel.setText(\"\ufffd\ufffd\ufffd:\");\n+\t\tnewUserFirstNameLabel.setBounds(10, 98, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUserLastNameLabel);\n+\t\tnewUserLastNameLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewUserLastNameLabel.setBounds(10, 120, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(createNewOperatorButton);\n+\t\tcreateNewOperatorButton.addActionListener(new CreateNewOperatorButtonActionListener());\n+\t\tcreateNewOperatorButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tcreateNewOperatorButton.setBounds(127, 158, 106, 26);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newUsernameTextField);\n+\t\tnewUsernameTextField.setBounds(111, 30, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newFirstNameTextField);\n+\t\tnewFirstNameTextField.setBounds(111, 96, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordField);\n+\t\tnewPasswordPasswordField.setBounds(111, 52, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newLastNameTextField);\n+\t\tnewLastNameTextField.setBounds(111, 118, 122, 20);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordAgainLabel);\n+\t\tnewPasswordAgainLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tnewPasswordAgainLabel.setBounds(10, 76, 95, 16);\n+\t\t\n+\t\tgroupCreateNewUserPanel.add(newPasswordPasswordAgainField);\n+\t\tnewPasswordPasswordAgainField.setBounds(111, 75, 122, 20);\n+\t}\n+\tprivate class LoginButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tloginButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class CreateNewOperatorButtonActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tcreateNewOperatorButton_actionPerformed(e);\n+\t\t}\n+\t}\n+\t\n+\tprotected void loginButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tString password = \"\";\n+\t\t\t\t\n+\t\t\t\tchar[] pass = loginPasswordPasswordField.getPassword();\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tResultSet rs = null;\n+\t\t\t\t\n+\t\t\t\ttry {\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\trs = databaseConnectWindow.dbPortal.executeParameterizedQuery(\"SELECT operator_id, operator_first_name, \" + \"\" +\n+\t\t\t\t\t\t\t\"operator_last_name FROM operators WHERE operator_username = ? AND operator_password = ?\", \n+\t\t\t\t\t\t\tloginUsernameTextField.getText(), Md5hashcalc.calculateMD5hash(password));\t\t\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tif (rs != null) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tloggedUserId = rs.getInt(1);\n+\t\t\t\t\t\tloggedUserNames = rs.getString(2) + \" \" + rs.getString(3);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\", \n+\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\treturn;\n+\t\t}\t\t\n+\t}\n+\t\n+\tprotected void createNewOperatorButton_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tchar[] pass = newPasswordPasswordField.getPassword();\n+\t\t\t\tString password = \"\";\n+\t\t\t\tString encryptedPassword = \"\";\n+\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\n+\t\t\t\t\tpassword += pass[i];\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tchar[] pass2 = newPasswordPasswordAgainField.getPassword();\n+\t\t\t\t\n+\t\t\t\tif (pass.length == pass2.length) {\n+\t\t\t\t\n+\t\t\t\t\t\tfor (int i = 0; i < pass.length; i++) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tif (pass[i] != pass2[i]) {\n+\t\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\t\t\t\t\t\n+\t\t\t\tif ((newUsernameTextField.getText().length() > 3) && (password.length() > 3) && \n+\t\t\t\t\t\t(newFirstNameTextField.getText().length() > 3) && (newLastNameTextField.getText().length() > 3)) {\n+\t\t\t\t\t\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tencryptedPassword = Md5hashcalc.calculateMD5hash(password);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\tSystem.exit(-1);\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tResultSet rs = databaseConnectWindow.dbPortal.executeParameterizedQuery(\n+\t\t\t\t\t\t\t\"SELECT COUNT(*) FROM operators WHERE operator_username=?\",\tnewUsernameTextField.getText());\n+\t\t\t\t\t\n+\t\t\t\t\tint usersCount = 0;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tusersCount = rs.getInt(1);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (Exception ex) {\t\t\t\t\t\t\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t\t\n+\t\t\t\t\tif ((databaseConnectWindow.dbPortal.getLastError() == null) && (usersCount == 0)) {\t\t\t\t\t\t\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t//no such existing username so now we create it\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.executeParameterizedNonQuery(\n+\t\t\t\t\t\t\t\t\"INSERT INTO operators(operator_username, operator_password, operator_first_name, \" + \n+\t\t\t\t\t\t\t\t\"operator_last_name) VALUES(?, ?, ?, ?)\", newUsernameTextField.getText(), encryptedPassword,\n+\t\t\t\t\t\t\t\tnewFirstNameTextField.getText(), newLastNameTextField.getText()) != 1) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse { //everything ok so login now\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tloginUsernameTextField.setText(newUsernameTextField.getText());\n+\t\t\t\t\t\t\tloginPasswordPasswordField.setText(password);\n+\t\t\t\t\t\t\tloginButton_actionPerformed(null);\n+\t\t\t\t\t\t}\t\t\t\t\t\t\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tif (databaseConnectWindow.dbPortal.getLastError() != null) {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse {\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\t\t\t\t\t\t\t\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\t\t\t\t\t\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t\n+\t\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd-\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t\t}\n+\t\t}\n+\t\telse {\n+\t\t\t\n+\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.ERROR_MESSAGE);\n+\t\t}\t\t\n+\t}\n+\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d1/f0b87e7ea45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 395,
          "deletions": 0,
          "patch": "@@ -0,0 +1,395 @@\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Insets;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import javax.swing.JButton;\n+import javax.swing.JComponent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JSeparator;\n+import javax.swing.SpringLayout;\n+import javax.swing.border.EtchedBorder;\n+import org.jdesktop.layout.GroupLayout;\n+import org.jdesktop.layout.LayoutStyle;\n+import com.jgoodies.forms.factories.FormFactory;\n+import com.jgoodies.forms.layout.CellConstraints;\n+import com.jgoodies.forms.layout.ColumnSpec;\n+import com.jgoodies.forms.layout.FormLayout;\n+import com.jgoodies.forms.layout.RowSpec;\n+\n+\n+public class mainWindow extends JFrame {\n+\n+\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n+\tprivate final JMenu File = new JMenu();\n+\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n+\tprivate final JMenu Operations = new JMenu();\n+\tprivate final JMenu Help = new JMenu();\n+\tprivate final JMenuItem HelpAbout = new JMenuItem();\n+\tprivate final JMenuItem FileExit = new JMenuItem();\n+\tprivate static mainWindow mainWindowPointer;\n+\t\n+\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n+\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n+\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tmainWindow frame = new mainWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic mainWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 682, 438);\n+\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tmainWindowPointer = this;\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\t\t\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\taddWindowListener(new ThisWindowListener());\n+\t\tgetContentPane().setLayout(new BorderLayout());\n+\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"mainWindow\");\n+\t\t\n+\t\tsetJMenuBar(mainWindowMenu);\n+\t\t\n+\t\tmainWindowMenu.add(File);\n+\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileConnectToDb);\n+\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n+\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileDisconnectFromDb);\n+\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n+\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\tFileDisconnectFromDb.setEnabled(false);\n+\n+\t\tFile.addSeparator();\n+\t\t\n+\t\tFile.add(FileExit);\n+\t\tFileExit.addActionListener(new FileExitActionListener());\n+\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Operations);\n+\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tOperations.setEnabled(false);\n+\t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Help);\n+\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n+\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n+\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n+\t\t\tnew ColumnSpec[] {\n+\t\t\t\tColumnSpec.decode(\"149dlu\"),\n+\t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n+\t\t\tnew RowSpec[] {\n+\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n+\t\t\t\tRowSpec.decode(\"16px\")}));\n+\t\tmainWindowStatusPanel.setSize(666, 25);\n+\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n+\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n+\t\t\n+\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n+\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelSetEnabled(false);\n+\t}\n+\t\n+\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n+\t\t\n+\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n+\t\t\n+\t\tfor (int i = 0; i < comps.length; i++) {\n+\t\t\n+\t\t\tcomps[i].setEnabled(enable);\t\n+\t\t}\n+\t\t\n+\t\tmainWindowStatusPanel.setEnabled(enable);\n+\t}\n+\t\n+\tprivate class ThisWindowListener extends WindowAdapter {\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tthis_windowClosing(e);\n+\t\t}\n+\t}\n+\tprivate class FileExitActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileExit_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileConnectToDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileConnectToDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileDisconnectFromDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\n+\tprotected void this_windowClosing(WindowEvent e) {\n+\t\t\n+\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t}\n+\t\t}\n+\t\tthis.dispose();\n+\t\t//System.exit(0);\n+\t}\n+\t\n+\tprotected void fileExit_actionPerformed(ActionEvent e) {\n+\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n+\t\tdcw.setVisible(true);\n+\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n+\t}\n+\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n+\t\t\n+        public void windowClosing(WindowEvent e) {\n+            \n+        \te.getWindow().dispose(); \n+        \t\n+        \tif (databaseConnectWindow.dbPortal != null) {\n+    \t\t\t\n+    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n+    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n+    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n+    \t\t\t}\n+    \t\t\telse {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n+    \t\t\t}\n+    \t\t}            \n+        }\n+    };\n+    \n+    ////////////////////////////////////////////////////////////////////////\n+    \n+\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t\n+\t\t\tthis.FileConnectToDb.setEnabled(true);\n+\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n+\t\t\tthis.Operations.setEnabled(false);\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t}\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n+\t\toul.setVisible(true);\n+\t\toul.addWindowListener(operatorUserLoginWindowClosing);\n+\t}\n+\tprivate static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {\n+\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserLoginWindow.loggedUserNames);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n+\t}\n+\t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n+\t\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d2/10685414a15d00121890bdcc27f78f62",
          "status": "added",
          "additions": 511,
          "deletions": 0,
          "patch": "@@ -0,0 +1,511 @@\n+/**\n+ * <p> Title: MySQLdbManager </p>\n+ * <p> Description: MySQL java database manager wrapper </p>\n+ * @version 1.00\n+ * @author (C) 09.01.2013 - 13.01.2013 zhgzhg\n+ */\n+\n+package database_management;\n+\n+import java.sql.*;\n+\n+public class MySQLdbManager {\n+\t\n+\tprivate final String JDBCDRIVER = \"com.mysql.jdbc.Driver\";\n+\tprivate int mySqlServerPort = 3306;\n+\tprivate String mySqlServerAddress = null;\t\n+\tprivate String mySqlDatabaseName = null;\n+\tprivate String mySqlUsername = null;\n+\tprivate String mySqlPassword = null;\n+\tprivate boolean useUTF8Encoding = true;\n+\tprivate Connection dbConnection = null;\n+\t\t\n+\tprivate String lastError = null;\n+\t\n+\t/**\n+\t * Empty Constructor \n+\t */\n+\t\n+\tpublic MySQLdbManager() {\n+\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server ip address or hostname\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlServerPort int MySQL server running port between 1 and 65535. The default one is 3306.\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName, int mySqlServerPort, String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.setMySqlServerPort(mySqlServerPort);\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Constructor\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t * @param mySqlDatabaseName String MySQL database name (leave empty \"\" if you want to assign with no one)\n+\t * @param mySqlUsername String MySQL database username\n+\t * @param mySqlPassword String MySQL database username password. The default one is empty string.\n+\t */\n+\t\n+\tpublic MySQLdbManager(String mySqlServerAddress, String mySqlDatabaseName,  String mySqlUsername, String mySqlPassword) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server address. After done you need to call disconnect() and connect() again.\n+\t * @param mySqlServerAddress String MySQL server IP address or HOSTNAME\n+\t */\n+\t\n+\tpublic void setMySqlServerAddress(String mySqlServerAddress) {\n+\t\tthis.mySqlServerAddress = mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server address.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlServerAddress() {\n+\t\treturn mySqlServerAddress;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database [name] to use. Leave empty \"\" if you want to assign with no one.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlDatabaseName String\n+\t */\n+\t\n+\tpublic void setMySqlActiveDatabase(String mySqlDatabaseName) {\n+\t\tthis.mySqlDatabaseName = mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Returns current active MySQL database name.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlActiveDatabase() {\n+\t\treturn mySqlDatabaseName;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL server port. Must be between [1 and 65535].\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlServerPort int\n+\t */\n+\t\n+\tpublic void setMySqlServerPort(int mySqlServerPort) {\n+\t\t\n+\t\tif (mySqlServerPort <= 0 || mySqlServerPort > 65535)\n+\t\t{ lastError = \"Invalid mysql server port range! Must be between [1 and 65535].\"; return; }\n+\t\t\n+\t\tthis.mySqlServerPort = mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL server port.\n+\t * @return int ([between 1 and 65535])\n+\t */\n+\t\n+\tpublic int getMySqlServerPort() {\n+\t\t\n+\t\treturn this.mySqlServerPort;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlUsername String\n+\t */\n+\t\n+\tpublic void setMySqlUsername(String mySqlUsername) {\n+\t\t\n+\t\tthis.mySqlUsername = mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Returns MySQL database username.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlUsername() {\n+\t\t\n+\t\treturn mySqlUsername;\n+\t}\n+\t\n+\t/**\n+\t * Sets MySQL database username password.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param mySqlPassword String\n+\t */\n+\t\n+\tpublic void setMySqlPassword(String mySqlPassword) {\n+\t\t\n+\t\tthis.mySqlPassword = mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Returns current MySQL database username password.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getMySqlPassword() {\n+\t\t\n+\t\treturn this.mySqlPassword;\n+\t}\n+\t\n+\t/**\n+\t * Sets database input/output UTF8 data encoding on or off.\n+\t * You need to call disconnect() and connect() after that.\n+\t * @param on boolean\n+\t */\n+\t\n+\tpublic void setUtf8EncodingOn(boolean on) {\n+\t\t\n+\t\tthis.useUTF8Encoding = on;\n+\t}\n+\t\n+\t/**\n+\t * Returns database input/output UTF8 is on or off.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isUtf8EncodingUsed() {\n+\t\t\n+\t\treturn this.useUTF8Encoding;\n+\t}\n+\t\n+\t/**\n+\t * Checks for active database connection and returns true if it is presented.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean isConnected() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tlastError = null;\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult = (!dbConnection.isClosed());\n+\t\t\t}\t\t\t\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t\tresult = false;\n+\t\t\t}\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = \"Uninitialized database connection!\";\n+\t\t\tresult = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Tries to connect to MySQL database and returns true in case of success.\n+\t * @return boolean\n+\t */\n+\t\n+\tpublic boolean connect() {\n+\t\t\n+\t\tboolean result = true;\n+\t\t\n+\t\tif (mySqlServerAddress == null || mySqlDatabaseName == null || mySqlUsername == null) { \n+\t\t\tlastError = \"Uninitialized server address, database name or database username!\"; return false; }\n+\t\telse {\n+\t\t\tlastError = null; //new connect always clears the last error\n+\t\t}\t\t\t\n+\t\t\n+\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\tdbConnection.close();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (SQLException ex) {\n+\t\t\t\tlastError = ex.getMessage();\n+\t\t\t}\n+\t\t}\t\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tClass.forName(JDBCDRIVER).newInstance();\n+\t\t\tdbConnection = DriverManager.getConnection(\"jdbc:mysql://\" + mySqlServerAddress + \":\" + mySqlServerPort + \"/\" + mySqlDatabaseName + \n+\t\t\t\t\t\"?user=\" + mySqlUsername + (mySqlPassword != null ? \"&password=\" + mySqlPassword : \"\") + \n+\t\t\t\t\t(useUTF8Encoding == true ? \"&useUnicode=TRUE&characterEncoding=UTF-8\" : \"\"));\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\t\n+\t\t\tif (lastError == null) { \n+\t\t\t\tlastError = ex.getMessage(); \n+\t\t\t}\n+\t\t\telse { \n+\t\t\t\tlastError += ex.getMessage(); \n+\t\t\t}\n+\t\t\t\n+\t\t    result = false;\n+\t\t}\n+\t\t\n+\t\treturn result;\n+\t}\n+\t\n+\t/**\n+\t * Close the active database connection if presented.\n+\t */\n+\t\n+\tpublic void disconnect() {\n+\t\t\n+\t\t\tif (dbConnection != null) {\n+\t\t\t\n+\t\t\t\ttry {\n+\t\t\t\t\t\n+\t\t\t\t\tif (!dbConnection.isClosed()) {\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tdbConnection.close();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcatch (SQLException ex) {\n+\t\t\t\t\t\n+\t\t\t\t\tlastError = ex.getMessage();\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\tdbConnection = null;\n+\t\t}\t\t\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeNonQuery(String query) {\n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes parameterized query and returns the number of affected things. For INSERT, UPDATE, DELETE ...\n+\t * @param query String\n+\t * @param parameters Object (for variables like String, int, double ...)\n+\t * @return int the number of affected things\n+\t */\n+\t\n+\tpublic int executeParameterizedQuery(String query, Object[] parameters) {\n+\t\t\n+\t\tPreparedStatement sqlStatement;\n+\t\tint affectedCount = 0;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn affectedCount;\t\t\t\n+\t\t}\n+\t\telse {\t\t\t\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\t//TODO...\n+\t\t// boolean\n+\t\t// String\n+\t\t// char[]\n+\t\t// byte\n+\t\t// short\n+\t\t// int\n+\t\t// long\n+\t\t// double\n+\t\t// float\n+\t\t// Date\n+\t\t// null ???\n+\t\t\n+\t\ttry {\n+\t\t\tsqlStatement = dbConnection.prepareStatement(query);\n+\t\t\t\n+\t\t\tfor (int i = 0; i < parameters.length; i++) {\n+\t\t\t\t\n+\t\t\t\tif (parameters[i] instanceof String) {\n+\t\t\t\t\tsqlStatement.set\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t\tsqlStatement.\n+\t\t\tsqlStatement.execute(query);\n+\t\t\taffectedCount = sqlStatement.getUpdateCount();\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\t\t\t\n+\t\t}\n+\t\t\n+\t\treturn affectedCount;\n+\t}\n+\t\n+\t/**\n+\t * Executes query and returns ResultSet with data. For SELECT...\n+\t * Warning! Prone to SQL injection!!!\n+\t * @param query String\n+\t * @return ResultSet\n+\t */\n+\t\n+\tpublic ResultSet executeQuery(String query) { //executes query and returns ResultSet \n+\t\t\n+\t\tStatement sqlStatement;\n+\t\tResultSet result;\n+\t\t\n+\t\tif (!isConnected()) {\n+\t\t\t\n+\t\t\tlastError = \"No connection!\";\n+\t\t\treturn null;\n+\t\t}\n+\t\telse {\n+\t\t\tlastError = null;\n+\t\t}\n+\t\t\n+\t\ttry {\n+\t\t\t\n+\t\t\tsqlStatement = dbConnection.createStatement();\n+\t\t\tresult = sqlStatement.executeQuery(query);\n+\t\t\ttry {\n+\t\t\t\t\n+\t\t\t\tresult.first();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t\n+\t\t\t}\n+\t\t}\n+\t\tcatch (SQLException ex) {\n+\t\t\t\n+\t\t\tlastError = ex.getMessage();\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn result;\t\t\n+\t}\n+\t\n+\t/**\n+\t * Returns the text message exception error of the last called method. Returns null if no error.\n+\t * @return String\n+\t */\n+\t\n+\tpublic String getLastError() {\n+\t\t\n+\t\treturn lastError;\n+\t}\n+\t\n+\t/**\n+\t * Finalization method if you don't want to use specific MySQLdbManager instance object anymore.\n+\t */\n+\t\n+\tpublic void finalize() {\n+\t\t\n+\t\tdisconnect();\n+\t\tmySqlServerAddress = null;\t\n+\t\tmySqlDatabaseName = null;\n+\t\tmySqlUsername = null;\n+\t\tmySqlPassword = null;\n+\t\tlastError = null;\n+\t}\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d4/00fa639bb65c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 260,
          "patch": "@@ -1,260 +0,0 @@\n-import java.awt.BorderLayout;\n-import java.awt.Component;\n-import java.awt.Dimension;\n-import java.awt.EventQueue;\n-import java.awt.FlowLayout;\n-import java.awt.GridLayout;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.awt.event.WindowListener;\n-import javax.swing.BoxLayout;\n-import javax.swing.JButton;\n-import javax.swing.JComponent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.ActionEvent;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JMenu;\n-import javax.swing.JMenuBar;\n-import javax.swing.JMenuItem;\n-import javax.swing.JOptionPane;\n-import javax.swing.JPanel;\n-import javax.swing.JSeparator;\n-import javax.swing.SpringLayout;\n-import javax.swing.border.BevelBorder;\n-import javax.swing.border.EtchedBorder;\n-import org.jdesktop.layout.GroupLayout;\n-import org.jdesktop.layout.LayoutStyle;\n-import com.jgoodies.forms.factories.FormFactory;\n-import com.jgoodies.forms.layout.CellConstraints;\n-import com.jgoodies.forms.layout.ColumnSpec;\n-import com.jgoodies.forms.layout.FormLayout;\n-import com.jgoodies.forms.layout.RowSpec;\n-\n-public class mainWindow extends JFrame {\n-\n-\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n-\tprivate final JMenu File = new JMenu();\n-\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n-\tprivate final JMenu Operations = new JMenu();\n-\tprivate final JMenu Help = new JMenu();\n-\tprivate final JMenuItem HelpAbout = new JMenuItem();\n-\tprivate final JMenuItem FileExit = new JMenuItem();\n-\tprivate static mainWindow mainWindowPointer;\n-\t\n-\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n-\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n-\tprivate final JPanel panel = new JPanel();\n-\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n-\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tmainWindow frame = new mainWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic mainWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 682, 438);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\tmainWindowPointer = this;\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\t\t\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\taddWindowListener(new ThisWindowListener());\n-\t\tgetContentPane().setLayout(new BorderLayout());\n-\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"mainWindow\");\n-\t\t\n-\t\tsetJMenuBar(mainWindowMenu);\n-\t\t\n-\t\tmainWindowMenu.add(File);\n-\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileConnectToDb);\n-\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n-\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\t\n-\t\tFile.add(FileDisconnectFromDb);\n-\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n-\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n-\t\tFileDisconnectFromDb.setEnabled(false);\n-\n-\t\tFile.addSeparator();\n-\t\t\n-\t\tFile.add(FileExit);\n-\t\tFileExit.addActionListener(new FileExitActionListener());\n-\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tmainWindowMenu.add(Operations);\n-\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tOperations.setEnabled(false);\n-\t\t\n-\t\tmainWindowMenu.add(Help);\n-\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tHelp.add(HelpAbout);\n-\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\t\n-\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n-\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n-\t\t\tnew ColumnSpec[] {\n-\t\t\t\tColumnSpec.decode(\"149dlu\"),\n-\t\t\t\tColumnSpec.decode(\"72px\"),\n-\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n-\t\t\tnew RowSpec[] {\n-\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n-\t\t\t\tRowSpec.decode(\"16px\")}));\n-\t\tmainWindowStatusPanel.setSize(666, 25);\n-\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n-\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n-\t\t\n-\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n-\t\t\n-\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(2, 1, 1, 2));\n-\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n-\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n-\t\tmainWindowStatusPanelSetEnabled(false);\n-\t}\n-\t\n-\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n-\t\t\n-\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n-\t\t\n-\t\tfor (int i = 0; i < comps.length; i++) {\n-\t\t\n-\t\t\tcomps[i].setEnabled(enable);\t\n-\t\t}\n-\t\t\n-\t\tmainWindowStatusPanel.setEnabled(enable);\n-\t}\n-\t\n-\tprivate class ThisWindowListener extends WindowAdapter {\n-\t\tpublic void windowClosing(WindowEvent e) {\n-\t\t\tthis_windowClosing(e);\n-\t\t}\n-\t}\n-\tprivate class FileExitActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileExit_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileConnectToDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileConnectToDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tfileDisconnectFromDb_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n-\t\t}\n-\t}\n-\n-\tprotected void this_windowClosing(WindowEvent e) {\n-\t\t\n-\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-\t\t\t\t\n-\t\t\t\tdatabaseConnectWindow.dbPortal.disconnect();\n-\t\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t}\n-\t\t}\n-\t\tthis.dispose();\n-\t\t//System.exit(0);\n-\t}\n-\t\n-\tprotected void fileExit_actionPerformed(ActionEvent e) {\n-\n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n-\t}\n-\t\n-\t////////////////////////////////////////////////////////////////////////\n-\t\n-\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\t//databaseConnectWindow.main(null);\n-\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n-\t\tdcw.setVisible(true);\n-\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n-\t}\n-\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n-\t\t\n-        public void windowClosing(WindowEvent e) {\n-            \n-        \te.getWindow().dispose(); \n-        \t\n-        \tif (databaseConnectWindow.dbPortal != null) {\n-    \t\t\t\n-    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n-    \t\t\t\t\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(true);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n-    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n-    \t\t\t}\n-    \t\t\telse {\n-    \t\t\t\t//FIXME mainWindowPointer.Operations.setEnabled(false);\n-    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n-    \t\t\t}\n-    \t\t}            \n-        }\n-    };\n-    \n-    ////////////////////////////////////////////////////////////////////////\n-    \n-\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\tif (databaseConnectWindow.dbPortal != null) {\n-\t\t\t\n-\t\t\tdatabaseConnectWindow.dbPortal.finallize();\n-\t\t\t\n-\t\t\tthis.FileConnectToDb.setEnabled(true);\n-\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n-\t\t\tthis.Operations.setEnabled(false);\n-\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\t\t\n-\t\t}\n-\t}\n-\t\n-\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n-\t\toul.setVisible(true);\n-\t\toul.addWindowListener(operatorUserLoginWindowClosing);\n-\t}\n-\tprivate static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {\n-\n-\t\tpublic void windowClosing(WindowEvent e) {\n-\t\t\t\n-\t\t}\n-\t}\n-\t\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d5/10e72249585b0012179f93dc572b551d",
          "status": "removed",
          "additions": 0,
          "deletions": 178,
          "patch": "@@ -1,178 +0,0 @@\n-import java.awt.EventQueue;\n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n-import java.awt.event.WindowEvent;\n-\n-import javax.swing.JButton;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JLabel;\n-import javax.swing.JPasswordField;\n-import javax.swing.JTextField;\n-import javax.swing.JOptionPane;\n-\n-import database_management.MySQLdbManager;\n-\n-public class databaseConnectWindow extends JFrame {\n-\n-\tprivate final JLabel label = new JLabel();\n-\tprivate final JLabel label_1 = new JLabel();\n-\tprivate final JLabel label_2 = new JLabel();\n-\tprivate final JLabel label_3 = new JLabel();\n-\tprivate final JLabel label_4 = new JLabel();\n-\tprivate final JButton connectToDatabaseButton = new JButton();\n-\tprivate final JTextField mysqlServerAddressTextField = new JTextField();\n-\tprivate final JTextField mysqlPortTextField = new JTextField();\n-\tprivate final JTextField mysqlDatabaseNameTextField = new JTextField();\n-\tprivate final JTextField mysqlUsernameTextField = new JTextField();\n-\tprivate final JPasswordField mysqlPasswordPasswordField = new JPasswordField();\n-\tpublic static MySQLdbManager dbPortal = null;\n-\t\n-\t/**\n-\t * Launch the application\n-\t * @param args\n-\t */\n-\tpublic static void main(String args[]) {\n-\t\tEventQueue.invokeLater(new Runnable() {\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tdatabaseConnectWindow frame = new databaseConnectWindow();\n-\t\t\t\t\tframe.setVisible(true);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\t/**\n-\t * Create the frame\n-\t */\n-\tpublic databaseConnectWindow() {\n-\t\tsuper();\n-\t\tsetBounds(100, 100, 384, 203);\n-\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-\t\ttry {\n-\t\t\tjbInit();\n-\t\t} catch (Throwable e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\t//\n-\t}\n-\tprivate void jbInit() throws Exception {\n-\t\tgetContentPane().setLayout(null);\n-\t\tsetAlwaysOnTop(true);\n-\t\tsetResizable(false);\n-\t\tsetTitle(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\");\n-\t\tsetName(\"databaseConnectWindowFrame\");\n-\t\t\n-\t\tgetContentPane().add(label);\n-\t\tlabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel.setBounds(10, 10, 165, 16);\n-\t\t\n-\t\tgetContentPane().add(label_1);\n-\t\tlabel_1.setText(\"\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel_1.setBounds(10, 54, 165, 16);\n-\t\t\n-\t\tgetContentPane().add(label_2);\n-\t\tlabel_2.setText(\"\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel_2.setBounds(10, 32, 156, 16);\n-\t\t\n-\t\tgetContentPane().add(label_3);\n-\t\tlabel_3.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd:\");\n-\t\tlabel_3.setBounds(10, 76, 165, 16);\n-\t\t\n-\t\tgetContentPane().add(label_4);\n-\t\tlabel_4.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n-\t\tlabel_4.setBounds(10, 98, 156, 16);\n-\t\t\n-\t\tgetContentPane().add(connectToDatabaseButton);\n-\t\tconnectToDatabaseButton.addActionListener(new ConnectToDatabaseButtonActionListener());\n-\t\tconnectToDatabaseButton.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd!\");\n-\t\tconnectToDatabaseButton.setBounds(132, 135, 106, 26);\n-\t\t\n-\t\tgetContentPane().add(mysqlServerAddressTextField);\n-\t\tmysqlServerAddressTextField.setText(\"127.0.0.1\");\n-\t\tmysqlServerAddressTextField.setBounds(181, 8, 185, 20);\n-\t\t\n-\t\tgetContentPane().add(mysqlPortTextField);\n-\t\tmysqlPortTextField.setText(\"3306\");\n-\t\tmysqlPortTextField.setBounds(181, 30, 91, 20);\n-\t\t\n-\t\tgetContentPane().add(mysqlDatabaseNameTextField);\n-\t\tmysqlDatabaseNameTextField.setText(\"shop\");\n-\t\tmysqlDatabaseNameTextField.setBounds(181, 52, 181, 20);\n-\t\t\n-\t\tgetContentPane().add(mysqlUsernameTextField);\n-\t\tmysqlUsernameTextField.setText(\"root\");\n-\t\tmysqlUsernameTextField.setBounds(181, 76, 180, 18);\n-\t\t\n-\t\tgetContentPane().add(mysqlPasswordPasswordField);\n-\t\tmysqlPasswordPasswordField.setBounds(181, 96, 181, 20);\n-\t}\n-\tprivate class ConnectToDatabaseButtonActionListener implements ActionListener {\n-\t\tpublic void actionPerformed(ActionEvent e) {\n-\t\t\tconnectToDatabaseButton_actionPerformed(e);\n-\t\t}\n-\t}\n-\tprotected void connectToDatabaseButton_actionPerformed(ActionEvent e) {\n-\t\t\n-\t\tString password = \"\";\n-\t\t\n-\t\tchar [] pass = mysqlPasswordPasswordField.getPassword();\n-\t\tfor (int i = 0; i < pass.length; i++) {\n-\t\t\t\n-\t\t\tpassword += pass[i];\n-\t\t}\n-\t\t\n-\t\tdbPortal = new MySQLdbManager(mysqlServerAddressTextField.getText(),\n-\t\t\t\tmysqlDatabaseNameTextField.getText(), Integer.parseInt(mysqlPortTextField.getText()),\n-\t\t\t\tmysqlUsernameTextField.getText(), password);\t\t\n-\t\t\n-\t\t\n-\t\tif (dbPortal.connect() == false) { //now check for database name that is not existing\n-\t\t\t\n-\t\t\tdbPortal.setMySqlActiveDatabase(\"\");\n-\t\t\tdbPortal.disconnect(); //just in case\n-\t\t\t\n-\t\t\tif (dbPortal.connect() == false) { //connection settings problem or not running MySQL server\n-\t\t\t\tdbPortal.finallize();\n-\t\t\t\tJOptionPane.showMessageDialog(this, \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd! \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd MySQL \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", \n-\t\t\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd!\", JOptionPane.ERROR_MESSAGE);\n-\t\t\t\t\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\telse { //will have to create new database\n-\t\t\t\t\n-\t\t\t\tdbPortal.disconnect();\n-\t\t\t\t\n-\t\t\t\tif (JOptionPane.showConfirmDialog(this, \"\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\ufffd: \" + mysqlDatabaseNameTextField.getText() +\n-\t\t\t\t\t\t\".\\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd?\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd?\", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {\n-\t\t\t\t\t\n-\t\t\t\t\tcreateNewDatabaseAndTables();\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\n-\t\t\t\t\tdbPortal.finallize();\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n-\t\t\t}\t\t\t\n-\t\t}\n-\t\t\n-\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\t\t\n-\t}\n-\t\n-\tprivate void createNewDatabaseAndTables() {\n-\t\t\n-\t\tdbPortal.setMySqlActiveDatabase(\"\");\n-\t\t\n-\t\tif (dbPortal.connect() == false) {\n-\t\t\t\n-\t\t\tdbPortal.finallize();\n-\t\t}\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d5/d0782d99a45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 391,
          "deletions": 0,
          "patch": "@@ -0,0 +1,391 @@\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Insets;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import javax.swing.JButton;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ActionEvent;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.border.EtchedBorder;\n+import org.jdesktop.layout.LayoutStyle;\n+import com.jgoodies.forms.factories.FormFactory;\n+import com.jgoodies.forms.layout.CellConstraints;\n+import com.jgoodies.forms.layout.ColumnSpec;\n+import com.jgoodies.forms.layout.FormLayout;\n+import com.jgoodies.forms.layout.RowSpec;\n+\n+\n+public class mainWindow extends JFrame {\n+\n+\tprivate final JMenuBar mainWindowMenu = new JMenuBar();\n+\tprivate final JMenu File = new JMenu();\n+\tprivate final JMenuItem FileConnectToDb = new JMenuItem();\n+\tprivate final JMenu Operations = new JMenu();\n+\tprivate final JMenu Help = new JMenu();\n+\tprivate final JMenuItem HelpAbout = new JMenuItem();\n+\tprivate final JMenuItem FileExit = new JMenuItem();\n+\tprivate static mainWindow mainWindowPointer;\n+\t\n+\tprivate final JMenuItem FileDisconnectFromDb = new JMenuItem();\n+\tprivate final JPanel mainWindowStatusPanel = new JPanel();\n+\tprivate final JLabel mainWindowStatusPanelLoggedUserLabel = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogin = new JButton();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserSettings = new JButton();\n+\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel = new JLabel();\n+\tprivate final JLabel mainWindowStatusPanelSeparatorLabel2 = new JLabel();\n+\tprivate final JButton mainWindowStatusPanelLoggedUserLogout = new JButton();\n+\t\n+\tprivate final JMenuItem operationsProductsManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsOrdersManagement = new JMenuItem();\n+\tprivate final JMenuItem operationsNewOrder = new JMenuItem();\n+\t/**\n+\t * Launch the application\n+\t * @param args\n+\t */\n+\tpublic static void main(String args[]) {\n+\t\tEventQueue.invokeLater(new Runnable() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tmainWindow frame = new mainWindow();\n+\t\t\t\t\tframe.setVisible(true);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * Create the frame\n+\t */\n+\tpublic mainWindow() {\n+\t\tsuper();\n+\t\tsetBounds(100, 100, 682, 438);\n+\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+\t\tmainWindowPointer = this;\n+\t\ttry {\n+\t\t\tjbInit();\n+\t\t} catch (Throwable e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\t//\t\t\n+\t}\n+\tprivate void jbInit() throws Exception {\n+\t\taddWindowListener(new ThisWindowListener());\n+\t\tgetContentPane().setLayout(new BorderLayout());\n+\t\tsetTitle(\"eShop 1.00 (C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tsetName(\"mainWindow\");\n+\t\t\n+\t\tsetJMenuBar(mainWindowMenu);\n+\t\t\n+\t\tmainWindowMenu.add(File);\n+\t\tFile.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileConnectToDb);\n+\t\tFileConnectToDb.addActionListener(new FileConnectToDbActionListener());\n+\t\tFileConnectToDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\t\n+\t\tFile.add(FileDisconnectFromDb);\n+\t\tFileDisconnectFromDb.addActionListener(new FileDisconnectFromDbActionListener());\n+\t\tFileDisconnectFromDb.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd \ufffd\ufffd\");\n+\t\tFileDisconnectFromDb.setEnabled(false);\n+\n+\t\tFile.addSeparator();\n+\t\t\n+\t\tFile.add(FileExit);\n+\t\tFileExit.addActionListener(new FileExitActionListener());\n+\t\tFileExit.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Operations);\n+\t\tOperations.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tOperations.setEnabled(false);\n+\t\t\n+\t\tOperations.add(operationsNewOrder);\n+\t\toperationsNewOrder.addActionListener(new OperationsNewOrderActionListener());\n+\t\toperationsNewOrder.setText(\"\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\n+\t\tOperations.addSeparator();\n+\t\t\n+\t\tOperations.add(operationsProductsManagement);\n+\t\toperationsProductsManagement.addActionListener(new OperationsProductsManagementActionListener());\n+\t\toperationsProductsManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tOperations.add(operationsOrdersManagement);\n+\t\toperationsOrdersManagement.addActionListener(new OperationsOrdersManagementActionListener());\n+\t\toperationsOrdersManagement.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowMenu.add(Help);\n+\t\tHelp.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tHelp.add(HelpAbout);\n+\t\tHelpAbout.addActionListener(new HelpAboutActionListener());\n+\t\tHelpAbout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tgetContentPane().add(mainWindowStatusPanel, BorderLayout.SOUTH);\n+\t\tmainWindowStatusPanel.setLayout(new FormLayout(\n+\t\t\tnew ColumnSpec[] {\n+\t\t\t\tColumnSpec.decode(\"149dlu\"),\n+\t\t\t\tColumnSpec.decode(\"72px\"),\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC,\n+\t\t\t\tFormFactory.DEFAULT_COLSPEC},\n+\t\t\tnew RowSpec[] {\n+\t\t\t\tFormFactory.RELATED_GAP_ROWSPEC,\n+\t\t\t\tRowSpec.decode(\"16px\")}));\n+\t\tmainWindowStatusPanel.setSize(666, 25);\n+\t\tmainWindowStatusPanel.setBorder(new EtchedBorder(EtchedBorder.LOWERED));\n+\t\tmainWindowStatusPanel.setMinimumSize(new Dimension(666, 20));\n+\t\t\n+\t\tmainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd:\");\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLabel, new CellConstraints(\"1, 1, 1, 2, fill, fill\"));\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogin, new CellConstraints(2, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogin.addActionListener(new MainWindowStatusPanelLoggedUserLoginActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogin.setText(\"\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserSettings, new CellConstraints(4, 1, 1, 2, CellConstraints.CENTER, CellConstraints.DEFAULT));\n+\t\tmainWindowStatusPanelLoggedUserSettings.addActionListener(new MainWindowStatusPanelLoggedUserSettingsActionListener());\n+\t\tmainWindowStatusPanelLoggedUserSettings.setMargin(new Insets(2, 14, 2, 14));\n+\t\tmainWindowStatusPanelLoggedUserSettings.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel, new CellConstraints(3, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelSeparatorLabel2, new CellConstraints(5, 1, 1, 2));\n+\t\tmainWindowStatusPanelSeparatorLabel2.setText(\"   \");\n+\t\t\n+\t\tmainWindowStatusPanel.add(mainWindowStatusPanelLoggedUserLogout, new CellConstraints(6, 1, 1, 2));\n+\t\tmainWindowStatusPanelLoggedUserLogout.addActionListener(new MainWindowStatusPanelLoggedUserLogoutActionListener());\n+\t\tmainWindowStatusPanelLoggedUserLogout.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\");\n+\t\tmainWindowStatusPanelSetEnabled(false);\n+\t}\n+\t\n+\tprotected void mainWindowStatusPanelSetEnabled(boolean enable) {\n+\t\t\n+\t\tComponent[] comps = mainWindowStatusPanel.getComponents();\n+\t\t\n+\t\tfor (int i = 0; i < comps.length; i++) {\n+\t\t\n+\t\t\tcomps[i].setEnabled(enable);\t\n+\t\t}\n+\t\t\n+\t\tmainWindowStatusPanel.setEnabled(enable);\n+\t}\n+\t\n+\tprivate class ThisWindowListener extends WindowAdapter {\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tthis_windowClosing(e);\n+\t\t}\n+\t}\n+\tprivate class FileExitActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileExit_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileConnectToDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileConnectToDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class FileDisconnectFromDbActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tfileDisconnectFromDb_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLoginActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogin_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserSettingsActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserSettings_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class MainWindowStatusPanelLoggedUserLogoutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\tmainWindowStatusPanelLoggedUserLogout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class HelpAboutActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\thelpAbout_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsProductsManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsProductsManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsNewOrderActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsNewOrder_actionPerformed(e);\n+\t\t}\n+\t}\n+\tprivate class OperationsOrdersManagementActionListener implements ActionListener {\n+\t\tpublic void actionPerformed(ActionEvent e) {\n+\t\t\toperationsOrdersManagement_actionPerformed(e);\n+\t\t}\n+\t}\n+\n+\tprotected void this_windowClosing(WindowEvent e) {\n+\t\t\n+\t\t//JOptionPane.showMessageDialog(null, \"aa\", \"aa\", JOptionPane.INFORMATION_MESSAGE);\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+\t\t\t\t\n+\t\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t}\n+\t\t}\n+\t\tthis.dispose();\n+\t\t//System.exit(0);\n+\t}\n+\t\n+\tprotected void fileExit_actionPerformed(ActionEvent e) {\n+\n+\t\tthis.getToolkit().getSystemEventQueue().postEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void fileConnectToDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tdatabaseConnectWindow dcw = new databaseConnectWindow();\n+\t\tdcw.setVisible(true);\n+\t\tdcw.addWindowListener(databaseConnectWindowClosing);\n+\t}\n+\tprivate static WindowListener databaseConnectWindowClosing = new WindowAdapter() {\n+\t\t\n+        public void windowClosing(WindowEvent e) {\n+            \n+        \te.getWindow().dispose(); \n+        \t\n+        \tif (databaseConnectWindow.dbPortal != null) {\n+    \t\t\t\n+    \t\t\tif (databaseConnectWindow.dbPortal.isConnected()) {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(true);\n+    \t\t\t\tmainWindowPointer.FileConnectToDb.setEnabled(false);\n+    \t\t\t\tmainWindowPointer.FileDisconnectFromDb.setEnabled(true);\n+    \t\t\t}\n+    \t\t\telse {\n+    \t\t\t\t\n+    \t\t\t\tmainWindowPointer.mainWindowStatusPanelSetEnabled(false);\n+    \t\t\t}\n+    \t\t}            \n+        }\n+    };\n+    \n+    ////////////////////////////////////////////////////////////////////////\n+    \n+\tprotected void fileDisconnectFromDb_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (databaseConnectWindow.dbPortal != null) {\n+\t\t\t\n+\t\t\tdatabaseConnectWindow.dbPortal.finalize();\n+\t\t\t\n+\t\t\tthis.FileConnectToDb.setEnabled(true);\n+\t\t\tthis.FileDisconnectFromDb.setEnabled(false);\t\t\t\n+\t\t\tthis.Operations.setEnabled(false);\n+\t\t\tthis.mainWindowStatusPanelSetEnabled(false);\t\n+\t\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t\t}\n+\t}\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogin_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\toperatorUserLoginWindow oul = new operatorUserLoginWindow();\n+\t\toul.setVisible(true);\n+\t\toul.addWindowListener(operatorUserLoginWindowClosing);\n+\t}\n+\tprivate static WindowListener operatorUserLoginWindowClosing = new WindowAdapter() {\n+\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(true);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserLoginWindow.loggedUserNames);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserSettings_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tif (operatorUserLoginWindow.loggedUserId == -1) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\toperatorUserSettingsWindow ousw = new operatorUserSettingsWindow();\n+\t\tousw.setVisible(true);\n+\t\tousw.addWindowListener(operatorUserSettingsWindowClosing);\n+\t}\n+\t\n+\tprivate static WindowListener operatorUserSettingsWindowClosing = new WindowAdapter() {\n+\t\t\n+\t\tpublic void windowClosing(WindowEvent e) {\n+\t\t\tif (operatorUserLoginWindow.loggedUserId != -1) {\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \" + operatorUserSettingsWindow.operatorFirstNameLastNameCombination);\n+\t\t\t}\n+\t\t\telse { //if operator was deleted\n+\t\t\t\t\n+\t\t\t\tmainWindowPointer.Operations.setEnabled(false);\n+\t\t\t\tmainWindowPointer.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\t\t}\n+\t\t}\n+\t};\n+\t\n+\t////////////////////////////////////////////////////////////////////////\n+\t\n+\tprotected void mainWindowStatusPanelLoggedUserLogout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tthis.Operations.setEnabled(false);\n+\t\tthis.mainWindowStatusPanelLoggedUserLabel.setText(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd: \");\n+\t\toperatorUserLoginWindow.loggedUserId = -1;\n+\t}\n+\t\n+\tprotected void helpAbout_actionPerformed(ActionEvent e) {\n+\t\t\n+\t\tJOptionPane.showMessageDialog(this, \"eShop ver.-1.00\\n(C) 2013 \ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd & \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", JOptionPane.INFORMATION_MESSAGE);\n+\t}\n+\t\n+\tprotected void operationsProductsManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\t\t\n+\t}\n+\tprotected void operationsNewOrder_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\tprotected void operationsOrdersManagement_actionPerformed(ActionEvent e) {\n+\t\t//TODO...\n+\t}\n+\t\n+\t\n+\t\n+\t\n+}"
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/d9/c08d3857a45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/da/b0a19e69a15c00121e34961e0ace9d22",
          "status": "removed",
          "additions": 0,
          "deletions": 194,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/df/10d6230fa55d00121890bdcc27f78f62",
          "status": "added",
          "additions": 250,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/df/603e699bac5d00121890bdcc27f78f62",
          "status": "added",
          "additions": 572,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/df/704ad386a45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 393,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/e/b0eb4bb1b65d001211398853d386ea7d",
          "status": "added",
          "additions": 248,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/e1/4031c38ea55d00121890bdcc27f78f62",
          "status": "added",
          "additions": 565,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/e6/204f8283fe5c00121f22d5fb8a5d79d9",
          "status": "removed",
          "additions": 0,
          "deletions": 97,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/e8/20b5d438a45d00121890bdcc27f78f62",
          "status": "added",
          "additions": 328,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/f1/e00edf7aa25d00121890bdcc27f78f62",
          "status": "added",
          "additions": 525,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/f8/502d6e21a25d00121890bdcc27f78f62",
          "status": "added",
          "additions": 514,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.history/fc/303f33aafe5c00121f22d5fb8a5d79d9",
          "status": "removed",
          "additions": 0,
          "deletions": 97,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.projects/eShop/.indexes/e4/79/history.index",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.projects/eShop/.indexes/e4/9d/history.index",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.projects/eShop/.indexes/e4/history.index",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.projects/eShop/.markers",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.projects/eShop/org.eclipse.jdt.core/state.dat",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.root/14.tree",
          "status": "removed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.root/16.tree",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.safetable/net.sourceforge.eclipseccase.14",
          "status": "removed",
          "additions": 0,
          "deletions": 3,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.safetable/net.sourceforge.eclipseccase.16",
          "status": "added",
          "additions": 3,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.resources/.safetable/org.eclipse.core.resources",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.mylyn.monitor.usage.prefs",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.debug.ui/launchConfigurationHistory.xml",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.jdt.core/3057692050.index",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.jdt.core/savedIndexNames.txt",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.jdt.ui/QualifiedTypeNameHistory.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "eShop/.metadata/.plugins/org.eclipse.ui.workbench/workbench.xml",
          "status": "modified",
          "additions": 99,
          "deletions": 166,
          "patch": null
        },
        {
          "filename": "eShop/eShop/src/databaseConnectWindow.java",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": null
        },
        {
          "filename": "eShop/eShop/src/database_management/MySQLdbManager.java",
          "status": "modified",
          "additions": 91,
          "deletions": 1,
          "patch": null
        },
        {
          "filename": "eShop/eShop/src/mainWindow.java",
          "status": "modified",
          "additions": 2,
          "deletions": 11,
          "patch": null
        },
        {
          "filename": "eShop/eShop/src/md5_calculator/Md5hashcalc.java",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": null
        },
        {
          "filename": "eShop/eShop/src/operatorUserLoginWindow.java",
          "status": "modified",
          "additions": 13,
          "deletions": 17,
          "patch": null
        },
        {
          "filename": "eShop/eShop/src/operatorUserSettingsWindow.java",
          "status": "modified",
          "additions": 7,
          "deletions": 10,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 86,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6b98a81965357c0858880451a387a718191a0d59",
            "date": "2013-03-03T21:43:42Z",
            "author_login": "zhgzhg"
          },
          {
            "sha": "8ca897786610465b426724ef6ffa2da5708c85d8",
            "date": "2013-02-26T17:17:49Z",
            "author_login": "zhgzhg"
          },
          {
            "sha": "5fb881bb9855b1b4ff3a2787c58c49818dfccb30",
            "date": "2013-02-03T14:26:31Z",
            "author_login": "zhgzhg"
          },
          {
            "sha": "40e5095b7fce6f2783c316ba20c414058c64fad5",
            "date": "2013-02-03T12:07:43Z",
            "author_login": "zhgzhg"
          },
          {
            "sha": "12a4e195eee3de9c8ef361db543b422f267f3f48",
            "date": "2013-01-31T21:50:51Z",
            "author_login": "zhgzhg"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-89",
    "description": "A vulnerability was found in sheilazpy eShop. It has been classified as critical. Affected is an unknown function. The manipulation leads to sql injection. The name of the patch is e096c5849c4dc09e1074104531014a62a5413884. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217572.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-06T22:15:08.900",
    "last_modified": "2024-11-21T01:48:39.183",
    "fix_date": "2013-01-13T19:31:02Z"
  },
  "references": [
    {
      "url": "https://github.com/sheilazpy/eShop/commit/e096c5849c4dc09e1074104531014a62a5413884",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217572",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217572",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sheilazpy/eShop/commit/e096c5849c4dc09e1074104531014a62a5413884",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217572",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217572",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.522133",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "eShop",
    "owner": "sheilazpy",
    "created_at": "2014-11-20T04:10:42Z",
    "updated_at": "2020-01-15T20:54:42Z",
    "pushed_at": "2013-03-04T08:47:48Z",
    "size": 17072,
    "stars": 0,
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 193342
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:50:00.116962"
  }
}