{
  "cve_id": "CVE-2013-3300",
  "github_data": {
    "repository": "lift/framework",
    "fix_commit": "099d9c86cf6d81f4953957add478ab699946e601",
    "related_commits": [
      "099d9c86cf6d81f4953957add478ab699946e601",
      "099d9c86cf6d81f4953957add478ab699946e601"
    ],
    "patch_url": "https://github.com/lift/framework/commit/099d9c86cf6d81f4953957add478ab699946e601.patch",
    "fix_commit_details": {
      "sha": "099d9c86cf6d81f4953957add478ab699946e601",
      "commit_date": "2013-04-05T20:32:18Z",
      "author": {
        "login": "dpp",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Addresses a data bleeding issue with lift-json",
        "length": 46,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 24,
        "additions": 23,
        "deletions": 1
      },
      "files": [
        {
          "filename": "core/json/src/main/scala/net/liftweb/json/JsonParser.scala",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -384,7 +384,11 @@ object JsonParser {\n       }\n     }\n \n-    def near = new String(segment, (cur-20) max 0, (cur + 1) min Segments.segmentSize)\n+    def near = {\n+      val start = (cur - 20) max 0\n+      val len = ((cur + 1) min Segments.segmentSize) - start\n+      new String(segment, start, len)\n+    }\n \n     def release = segments.foreach(Segments.release)\n "
        },
        {
          "filename": "core/json/src/test/scala/net/liftweb/json/JsonParserSpec.scala",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -27,6 +27,15 @@ import org.scalacheck.Prop._\n  * System under specification for JSON Parser.\n  */\n object JsonParserSpec extends Specification with JValueGen with ScalaCheck {\n+\n+  private def parseBadThing(): String =     try {\n+    parse(\"\"\"{\"user\":\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"<}\"\"\")\n+    \"x\" * 1000\n+  } catch {\n+    case e: Throwable => e.getMessage\n+  }\n+\n+\n   \"JSON Parser Specification\".title\n \n   \"Any valid json can be parsed\" in {\n@@ -54,6 +63,15 @@ object JsonParserSpec extends Specification with JValueGen with ScalaCheck {\n     parse(\"[\\\"abc\\\\\\\"\\\\\\\\\\\\/\\\\b\\\\f\\\\n\\\\r\\\\t\\\\u00a0\\\"]\") must_== JArray(JString(\"abc\\\"\\\\/\\b\\f\\n\\r\\t\\u00a0\")::Nil)\n   }\n \n+\n+  \"Parser does not bleed prior results\" in {\n+    parse(\"\"\"{\"a\": \"now is the time for all good men to come to the aid of their dog and eat dog food with other dogs and bark and woof and do dog things. now is the time for all good men to come to the aid of their dog and eat dog food with other dogs and bark and woof and do dog things. now is the time for all good men to come to the aid of their dog and eat dog food with other dogs and bark and woof and do dog things. now is the time for all good men to come to the aid of their dog and eat dog food with other dogs and bark and woof and do dog things. now is the time for all good men to come to the aid of their dog and eat dog food with other dogs and bark and woof and do dog things. now is the time for all good men to come to the aid of their dog and eat dog food with other dogs and bark and woof and do dog things. now is the time for all good men to come to the aid of their dog and eat dog food with other dogs and bark and woof and do dog things.now is the time for all good men to come to the aid of their dog and eat dog food with other dogs and bark and woof and do dog things\"}\"\"\")\n+\n+    val msg = parseBadThing()\n+\n+    msg.length must be_<=(50)\n+  }\n+\n   \"Unclosed string literal fails parsing\" in {\n     parseOpt(\"{\\\"foo\\\":\\\"sd\") mustEqual None\n     parseOpt(\"{\\\"foo\\\":\\\"sd}\") mustEqual None"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d4a10909ccdeae1fa53b0bcd82f51cb0093e237a",
            "date": "2024-11-18T01:50:31Z",
            "author_login": "farmdawgnation"
          },
          {
            "sha": "3eaa7940b8a0f87ce70159804ee551020255183a",
            "date": "2024-11-14T21:06:46Z",
            "author_login": "aredridel"
          },
          {
            "sha": "8b4263d6480a2cafcc394b805320e20b45b0e763",
            "date": "2024-08-25T22:18:45Z",
            "author_login": "farmdawgnation"
          },
          {
            "sha": "aee038c78a4f54cd50162e8ef7a099117cc1ea0c",
            "date": "2024-08-25T19:30:32Z",
            "author_login": "pdale"
          },
          {
            "sha": "24f67c2e4be9d14d233bd6be5d372f53c002350f",
            "date": "2023-04-11T14:56:45Z",
            "author_login": "dpp"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-119",
    "description": "The JsonParser class in json/JsonParser.scala in Lift before 2.5 interprets a certain end-index value as a length value, which allows remote authenticated users to obtain sensitive information from other users' sessions via invalid input data containing a < (less than) character.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2013-07-29T13:59:05.480",
    "last_modified": "2024-11-21T01:53:20.680",
    "fix_date": "2013-04-05T20:32:18Z"
  },
  "references": [
    {
      "url": "http://blog.addepar.com/2013/07/an-atypical-web-vulnerability.html",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/lift/framework/commit/099d9c86cf6d81f4953957add478ab699946e601",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "http://blog.addepar.com/2013/07/an-atypical-web-vulnerability.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/lift/framework/commit/099d9c86cf6d81f4953957add478ab699946e601",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:16.778311",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "framework",
    "owner": "lift",
    "created_at": "2011-01-26T13:25:28Z",
    "updated_at": "2025-01-10T14:59:32Z",
    "pushed_at": "2024-11-21T03:39:28Z",
    "size": 16482,
    "stars": 1264,
    "forks": 279,
    "open_issues": 135,
    "watchers": 1264,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "lift-4.0",
      "lift-5.0",
      "main"
    ],
    "languages": {
      "Scala": 3877055,
      "JavaScript": 428721,
      "CSS": 48107,
      "Java": 21862,
      "HTML": 21138,
      "Shell": 10507,
      "Batchfile": 1119
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T20:26:06.686398"
  }
}