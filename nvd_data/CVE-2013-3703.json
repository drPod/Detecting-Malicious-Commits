{
  "cve_id": "CVE-2013-3703",
  "github_data": {
    "repository": "openSUSE/open-build-service",
    "fix_commit": "06ad7fdbdd7eb2fef8947d14c4cdd00d8f6387b1",
    "related_commits": [
      "06ad7fdbdd7eb2fef8947d14c4cdd00d8f6387b1",
      "06ad7fdbdd7eb2fef8947d14c4cdd00d8f6387b1"
    ],
    "patch_url": "https://github.com/openSUSE/open-build-service/commit/06ad7fdbdd7eb2fef8947d14c4cdd00d8f6387b1.patch",
    "fix_commit_details": {
      "sha": "06ad7fdbdd7eb2fef8947d14c4cdd00d8f6387b1",
      "commit_date": "2013-07-05T15:07:29Z",
      "author": {
        "login": "adrianschroeter",
        "type": "User",
        "stats": {
          "total_commits": 5557,
          "average_weekly_commits": 5.630192502532928,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 689
        }
      },
      "commit_message": {
        "title": "[api] move write permission checks from controller to package and project model",
        "length": 165,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 82,
        "additions": 79,
        "deletions": 3
      },
      "files": [
        {
          "filename": "src/api/app/controllers/application_controller.rb",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -442,6 +442,14 @@ def pass_to_backend( path = nil )\n     render :text => xml_text, :status => http_status\n   end\n \n+  rescue_from Project::WritePermissionError do |exception|\n+    render_error :status => 403, :errorcode => \"modify_project_no_permission\", :message => exception.message\n+  end\n+\n+  rescue_from Package::WritePermissionError do |exception|\n+    render_error :status => 403, :errorcode => \"modify_package_no_permission\", :message => exception.message\n+  end\n+\n   rescue_from Suse::Backend::NotFoundError, ActiveRecord::RecordNotFound do |exception|\n     render_error message: exception.message, status: 404, errorcode: 'not_found'\n   end"
        },
        {
          "filename": "src/api/app/models/package.rb",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -15,6 +15,9 @@ class DeleteError < APIException\n   class SaveError < APIException\n     setup \"package_save_error\"\n   end\n+  class WritePermissionError < APIException\n+    setup \"package_write_permission_error\"\n+  end\n   class ReadAccessError < APIException\n     setup 'unknown_package', 404, \"Unknown package\"\n   end\n@@ -239,6 +242,14 @@ def is_locked?\n     return self.project.is_locked?\n   end\n \n+  def check_write_access!\n+    return if Rails.env.test? and User.current.nil? # for unit tests\n+\n+    unless User.current.can_modify_package? self\n+      raise WritePermissionError, \"No permission to modify package '#{self.name}' for user '#{User.current.login}'\"\n+    end\n+  end\n+\n   # NOTE: this is no permission check, should it be added ?\n   def can_be_deleted?\n     # check if other packages have me as devel package\n@@ -285,14 +296,17 @@ def sources_changed\n   end\n \n   def add_package_kind( kinds )\n+    check_write_access!\n     private_set_package_kind( kinds, nil, true )\n   end\n \n   def set_package_kind( kinds = nil )\n+    check_write_access!\n     private_set_package_kind( kinds )\n   end\n \n   def set_package_kind_from_commit( commit )\n+    check_write_access!\n     private_set_package_kind( nil, commit )\n   end\n \n@@ -419,6 +433,7 @@ def resolve_devel_package\n   end\n \n   def update_from_xml( xmlhash )\n+    check_write_access!\n     self.title = xmlhash.value('title')\n     self.description = xmlhash.value('description')\n     self.bcntsynctag = nil\n@@ -616,6 +631,7 @@ def write_attributes(comment=nil)\n   end\n \n   def store(opts = {})\n+    # no write access check here, since this operation may will disable this permission ...\n     @commit_opts = opts\n     save!\n   end\n@@ -649,6 +665,7 @@ def find_attribute( namespace, name, binary=nil )\n   end\n \n   def add_user( user, role )\n+    check_write_access!\n     unless role.kind_of? Role\n       role = Role.get_by_title(role)\n     end\n@@ -669,6 +686,7 @@ def add_user( user, role )\n   end\n \n   def add_group( group, role )\n+    check_write_access!\n     unless role.kind_of? Role\n       role = Role.get_by_title(role)\n     end\n@@ -933,14 +951,17 @@ def expand_flags\n   end\n \n   def remove_all_persons\n+    check_write_access!\n     self.package_user_role_relationships.delete_all\n   end\n \n   def remove_all_groups\n+    check_write_access!\n     self.package_group_role_relationships.delete_all\n   end\n \n   def remove_role(what, role)\n+    check_write_access!\n     if what.kind_of? Group\n       rel = self.package_group_role_relationships.where(bs_group_id: what.id)\n     else\n@@ -954,6 +975,7 @@ def remove_role(what, role)\n   end\n \n   def add_role(what, role)\n+    check_write_access!\n     self.transaction do\n       if what.kind_of? Group\n         self.package_group_role_relationships.create!(role: role, group: what)"
        },
        {
          "filename": "src/api/app/models/project.rb",
          "status": "modified",
          "additions": 38,
          "deletions": 3,
          "patch": "@@ -19,6 +19,9 @@ class UnknownObjectError < APIException\n   class SaveError < APIException\n     setup \"project_save_error\"\n   end\n+  class WritePermissionError < APIException\n+    setup \"project_write_permission_error\"\n+  end\n   class ForbiddenError < APIException\n     setup(\"change_project_protection_level\", 403,\n           \"admin rights are required to raise the protection level of a project (it won't be safe anyway)\")\n@@ -247,6 +250,15 @@ def find_remote_project(name, skip_access=false)\n     end\n   end\n \n+  def check_write_access!\n+    return if Rails.env.test? and User.current.nil? # for unit tests\n+\n+    # the can_create_check is inconsistent with package class check_write_access! check\n+    unless User.current.can_modify_project?(self) || User.current.can_create_project?(self.name)\n+      raise WritePermissionError, \"No permission to modify project '#{self.name}' for user '#{User.current.login}'\"\n+    end\n+  end\n+\n   def find_linking_projects\n       sql =<<-END_SQL\n       SELECT prj.*\n@@ -289,6 +301,8 @@ def can_be_deleted?\n   end\n \n   def update_from_xml(xmlhash, force=nil)\n+    check_write_access!\n+\n     # check for raising read access permissions, which can't get ensured atm\n     unless self.new_record? || self.disabled_for?('access', nil, nil)\n       if FlagHelper.xml_disabled_for?(xmlhash, 'access')\n@@ -892,6 +906,8 @@ def find_parent\n   end\n \n   def add_user( user, role )\n+    check_write_access!\n+\n     unless role.kind_of? Role\n       role = Role.get_by_title(role)\n     end\n@@ -912,6 +928,8 @@ def add_user( user, role )\n   end\n \n   def add_group( group, role )\n+    check_write_access!\n+\n     unless role.kind_of? Role\n       role = Role.get_by_title(role)\n     end\n@@ -1523,6 +1541,8 @@ def project_type\n   end\n \n   def set_project_type(project_type_name)\n+    check_write_access!\n+\n     mytype = DbProjectType.find_by_name(project_type_name)\n     return false unless mytype\n     self.type_id = mytype.id\n@@ -1535,6 +1555,8 @@ def maintenance_project\n   end\n \n   def set_maintenance_project(project)\n+    check_write_access!\n+\n     if project.class == Project\n       self.maintenance_project_id = project.id\n       self.save!\n@@ -1583,6 +1605,11 @@ def repositories_linking_project(tproj, backend)\n \n   # called either directly or from delayed job\n   def do_project_copy( params )\n+    # set user if nil, needed for delayed job in Package model\n+    User.current ||= User.find_by_login(params[:user])\n+\n+    check_write_access!\n+\n     # copy entire project in the backend\n     begin\n       path = \"/source/#{URI.escape(self.name)}\"\n@@ -1593,9 +1620,6 @@ def do_project_copy( params )\n       # we need to check results of backend in any case (also timeout error eg)\n     end\n \n-    # set user if nil, needed for delayed job in Package model\n-    User.current ||= User.find_by_login(params[:user])\n-\n     # restore all package meta data objects in DB\n     backend_pkgs = Collection.find :package, :match => \"@project='#{self.name}'\"\n     backend_pkgs.each_package do |package|\n@@ -1611,6 +1635,8 @@ def do_project_copy( params )\n   def do_project_release( params )\n     User.current ||= User.find_by_login(params[:user])\n \n+    check_write_access!\n+\n     packages.each do |pkg|\n       pkg.project.repositories.each do |repo|\n         next if params[:repository] and params[:repository] != repo.name\n@@ -1647,6 +1673,8 @@ def user_has_role?(user, role)\n   end\n \n   def remove_role(what, role)\n+    check_write_access!\n+\n     if what.kind_of? Group\n       rel = self.project_group_role_relationships.where(bs_group_id: what.id)\n     else\n@@ -1660,6 +1688,8 @@ def remove_role(what, role)\n   end\n  \n   def add_role(what, role)\n+    check_write_access!\n+\n     self.transaction do\n       if what.kind_of? Group\n         self.project_group_role_relationships.create!(role: role, group: what)\n@@ -1684,6 +1714,8 @@ def valid_name\n   end\n \n   def update_patchinfo(patchinfo, opts = {})\n+    check_write_access!\n+\n     opts[:enfore_issue_update] ||= false\n \n     # collect bugnumbers from diff\n@@ -1721,6 +1753,8 @@ def update_patchinfo(patchinfo, opts = {})\n   end\n \n   def create_patchinfo_from_request(req)\n+    check_write_access!\n+\n     patchinfo = Package.new(:name => \"patchinfo\", :title => \"Patchinfo\", :description => \"Collected packages for update\")\n     self.packages << patchinfo\n     patchinfo.add_flag(\"build\", \"enable\", nil, nil)\n@@ -1755,6 +1789,7 @@ def create_patchinfo_from_request(req)\n \n   # updates packages automatically generated in the backend after submitting a product file\n   def update_product_autopackages\n+    check_write_access!\n \n     backend_pkgs = Collection.find :id, :what => 'package', :match => \"@project='#{self.name}' and starts-with(@name,'_product:')\"\n     b_pkg_index = backend_pkgs.each_package.inject(Hash.new) {|hash,elem| hash[elem.name] = elem; hash}"
        },
        {
          "filename": "src/api/test/unit/project_test.rb",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@ def test_flags_to_axml\n   \n   \n   def test_add_new_flags_from_xml\n+    User.current = users( :Iggy )\n     \n     #precondition check\n     @project.flags.delete_all\n@@ -88,6 +89,8 @@ def test_add_new_flags_from_xml\n   \n   \n   def test_delete_flags_through_xml\n+    User.current = users( :Iggy )\n+\n     #check precondition\n     assert_equal 2, @project.type_flags('build').size\n     assert_equal 2, @project.type_flags('publish').size\n@@ -107,6 +110,8 @@ def test_delete_flags_through_xml\n \n     \n   def test_store_axml\n+    User.current = users( :Iggy )\n+\n     original = @project.to_axml\n \n     #project is given as axml\n@@ -131,6 +136,8 @@ def test_store_axml\n   end  \n \n   def test_ordering\n+    User.current = users( :Iggy )\n+\n     #project is given as axml\n     axml = Xmlhash.parse(\n       \"<project name='home:Iggy'>\n@@ -175,6 +182,7 @@ def test_ordering\n   end\n     \n   test \"duplicated repos\" do\n+     User.current = users( :king )\n      orig = @project.render_axml\n \n      axml = Xmlhash.parse(\n@@ -199,6 +207,7 @@ def test_ordering\n   end\n \n   test \"duplicated repos with remote\" do\n+     User.current = users( :Iggy )\n      orig = @project.render_axml\n \n      xml = <<END\n@@ -225,6 +234,7 @@ def test_ordering\n      assert_equal orig, @project.render_axml\n   end\n   test \"not duplicated repos with remote\" do\n+     User.current = users( :Iggy )\n      xml = <<END\n <project name=\"home:Iggy\">\n   <title>Iggy\"s Home Project</title>\n@@ -250,6 +260,7 @@ def test_ordering\n   end\n \n   def test_create_maintenance_project_and_maintained_project\n+    User.current = users( :king )\n     maintenance_project = Project.new(:name => 'Maintenance:Project')\n     assert_equal true, maintenance_project.set_project_type('maintenance')\n     assert_equal 'maintenance', maintenance_project.project_type()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "816373c999d0bc535e9b3bb6c7489b9467e62810",
            "date": "2025-01-14T10:54:21Z",
            "author_login": "hennevogel"
          },
          {
            "sha": "7ab074111d3df5cabe258c222b6f733a1a4b0488",
            "date": "2025-01-14T08:40:25Z",
            "author_login": "eduardoj"
          },
          {
            "sha": "2955e8a1f6fded6a36c8f007f19fdc0ddb193e32",
            "date": "2025-01-14T08:22:35Z",
            "author_login": "hellcp-work"
          },
          {
            "sha": "7b58f7d3833d357f06d1a20c4fa8f9ba3e03bf17",
            "date": "2025-01-14T05:34:48Z",
            "author_login": "srbaker"
          },
          {
            "sha": "916c92c4ae47eff17338365e5754b76b45b781bc",
            "date": "2025-01-12T11:50:02Z",
            "author_login": "eduardoj"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-862",
    "description": "The controller of the Open Build Service API prior to version 2.4.4 is missing a write permission check, allowing an authenticated attacker to add or remove user roles from packages and/or project meta data.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-06-08T17:29:00.333",
    "last_modified": "2024-11-21T01:54:08.993",
    "fix_date": "2013-07-05T15:07:29Z"
  },
  "references": [
    {
      "url": "https://bugzilla.suse.com/show_bug.cgi?id=828256",
      "source": "security@opentext.com",
      "tags": []
    },
    {
      "url": "https://github.com/openSUSE/open-build-service/commit/06ad7fdbdd7eb2fef8947d14c4cdd00d8f6387b1",
      "source": "security@opentext.com",
      "tags": []
    },
    {
      "url": "https://bugzilla.suse.com/show_bug.cgi?id=828256",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/openSUSE/open-build-service/commit/06ad7fdbdd7eb2fef8947d14c4cdd00d8f6387b1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:25.921051",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "open-build-service",
    "owner": "openSUSE",
    "created_at": "2011-07-14T06:52:57Z",
    "updated_at": "2025-01-14T10:54:26Z",
    "pushed_at": "2025-01-14T10:54:22Z",
    "size": 551825,
    "stars": 944,
    "forks": 441,
    "open_issues": 1121,
    "watchers": 944,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "2.7",
      "2.8",
      "2.9",
      "2.10",
      "master"
    ],
    "languages": {
      "Ruby": 5431441,
      "Perl": 3023099,
      "Haml": 653750,
      "JavaScript": 141631,
      "SCSS": 54326,
      "HTML": 45832,
      "Shell": 19866,
      "Makefile": 6567,
      "Dockerfile": 1671,
      "C++": 1507,
      "Hare": 1427,
      "CSS": 202,
      "Procfile": 193
    },
    "commit_activity": {
      "total_commits_last_year": 3325,
      "avg_commits_per_week": 63.94230769230769,
      "days_active_last_year": 286
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T15:33:34.930741"
  }
}