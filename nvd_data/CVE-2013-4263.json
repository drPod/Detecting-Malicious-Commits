{
  "cve_id": "CVE-2013-4263",
  "github_data": {
    "repository": "FFmpeg/FFmpeg",
    "fix_commit": "e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
    "related_commits": [
      "e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
      "e43a0a232dbf6d3c161823c2e07c52e76227a1bc"
    ],
    "patch_url": "https://github.com/FFmpeg/FFmpeg/commit/e43a0a232dbf6d3c161823c2e07c52e76227a1bc.patch",
    "fix_commit_details": {
      "sha": "e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
      "commit_date": "2013-08-03T16:54:43Z",
      "author": {
        "login": "michaelni",
        "type": "User",
        "stats": {
          "total_commits": 30563,
          "average_weekly_commits": 24.352988047808765,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 1151
        }
      },
      "commit_message": {
        "title": "avfilter: fix plane validity checks",
        "length": 119,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 28,
        "additions": 14,
        "deletions": 14
      },
      "files": [
        {
          "filename": "libavfilter/vf_boxblur.c",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -313,13 +313,13 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *in)\n     }\n     av_frame_copy_props(out, in);\n \n-    for (plane = 0; in->data[plane] && plane < 4; plane++)\n+    for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)\n         hblur(out->data[plane], out->linesize[plane],\n               in ->data[plane], in ->linesize[plane],\n               w[plane], h[plane], s->radius[plane], s->power[plane],\n               s->temp);\n \n-    for (plane = 0; in->data[plane] && plane < 4; plane++)\n+    for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)\n         vblur(out->data[plane], out->linesize[plane],\n               out->data[plane], out->linesize[plane],\n               w[plane], h[plane], s->radius[plane], s->power[plane],"
        },
        {
          "filename": "libavfilter/vf_delogo.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -237,7 +237,7 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *in)\n     if (!sar.num)\n         sar.num = sar.den = 1;\n \n-    for (plane = 0; plane < 4 && in->data[plane]; plane++) {\n+    for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {\n         int hsub = plane == 1 || plane == 2 ? hsub0 : 0;\n         int vsub = plane == 1 || plane == 2 ? vsub0 : 0;\n "
        },
        {
          "filename": "libavfilter/vf_fieldmatch.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -608,7 +608,7 @@ static void copy_fields(const FieldMatchContext *fm, AVFrame *dst,\n                         const AVFrame *src, int field)\n {\n     int plane;\n-    for (plane = 0; plane < 4 && src->data[plane]; plane++)\n+    for (plane = 0; plane < 4 && src->data[plane] && src->linesize[plane]; plane++)\n         av_image_copy_plane(dst->data[plane] + field*dst->linesize[plane], dst->linesize[plane] << 1,\n                             src->data[plane] + field*src->linesize[plane], src->linesize[plane] << 1,\n                             get_width(fm, src, plane), get_height(fm, src, plane) / 2);"
        },
        {
          "filename": "libavfilter/vf_fieldorder.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -106,7 +106,7 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *frame)\n             \"picture will move %s one line\\n\",\n             s->dst_tff ? \"up\" : \"down\");\n     h = frame->height;\n-    for (plane = 0; plane < 4 && frame->data[plane]; plane++) {\n+    for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {\n         line_step = frame->linesize[plane];\n         line_size = s->line_size[plane];\n         data = frame->data[plane];"
        },
        {
          "filename": "libavfilter/vf_gradfun.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -199,7 +199,7 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *in)\n         av_frame_copy_props(out, in);\n     }\n \n-    for (p = 0; p < 4 && in->data[p]; p++) {\n+    for (p = 0; p < 4 && in->data[p] && in->linesize[p]; p++) {\n         int w = inlink->w;\n         int h = inlink->h;\n         int r = s->radius;"
        },
        {
          "filename": "libavfilter/vf_hflip.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -90,7 +90,7 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *in)\n     if (av_pix_fmt_desc_get(inlink->format)->flags & AV_PIX_FMT_FLAG_PAL)\n         memcpy(out->data[1], in->data[1], AVPALETTE_SIZE);\n \n-    for (plane = 0; plane < 4 && in->data[plane]; plane++) {\n+    for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {\n         const int width  = (plane == 1 || plane == 2) ? FF_CEIL_RSHIFT(inlink->w, s->hsub) : inlink->w;\n         const int height = (plane == 1 || plane == 2) ? FF_CEIL_RSHIFT(inlink->h, s->vsub) : inlink->h;\n         step = s->max_step[plane];"
        },
        {
          "filename": "libavfilter/vf_kerndeint.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -150,7 +150,7 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *inpic)\n     av_frame_copy_props(outpic, inpic);\n     outpic->interlaced_frame = 0;\n \n-    for (plane = 0; inpic->data[plane] && plane < 4; plane++) {\n+    for (plane = 0; plane < 4 && inpic->data[plane] && inpic->linesize[plane]; plane++) {\n         h = plane == 0 ? inlink->h : FF_CEIL_RSHIFT(inlink->h, kerndeint->vsub);\n         bwidth = kerndeint->tmp_bwidth[plane];\n "
        },
        {
          "filename": "libavfilter/vf_lut.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -304,7 +304,7 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *in)\n         }\n     } else {\n         /* planar */\n-        for (plane = 0; plane < 4 && in->data[plane]; plane++) {\n+        for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {\n             int vsub = plane == 1 || plane == 2 ? s->vsub : 0;\n             int hsub = plane == 1 || plane == 2 ? s->hsub : 0;\n             int h = FF_CEIL_RSHIFT(inlink->h, vsub);"
        },
        {
          "filename": "libavfilter/vf_pad.c",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -214,7 +214,7 @@ static AVFrame *get_video_buffer(AVFilterLink *inlink, int w, int h)\n     frame->width  = w;\n     frame->height = h;\n \n-    for (plane = 0; plane < 4 && frame->data[plane]; plane++) {\n+    for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {\n         int hsub = s->draw.hsub[plane];\n         int vsub = s->draw.vsub[plane];\n         frame->data[plane] += (s->x >> hsub) * s->draw.pixelstep[plane] +\n@@ -311,7 +311,7 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *in)\n         int i;\n \n         out = in;\n-        for (i = 0; i < 4 && out->data[i]; i++) {\n+        for (i = 0; i < 4 && out->data[i] && out->linesize[i]; i++) {\n             int hsub = s->draw.hsub[i];\n             int vsub = s->draw.vsub[i];\n             out->data[i] -= (s->x >> hsub) * s->draw.pixelstep[i] +"
        },
        {
          "filename": "libavfilter/vf_showinfo.c",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -38,7 +38,7 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *frame)\n     uint32_t plane_checksum[4] = {0}, checksum = 0;\n     int i, plane, vsub = desc->log2_chroma_h;\n \n-    for (plane = 0; plane < 4 && frame->data[plane]; plane++) {\n+    for (plane = 0; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++) {\n         int64_t linesize = av_image_get_linesize(frame->format, frame->width, plane);\n         uint8_t *data = frame->data[plane];\n         int h = plane == 1 || plane == 2 ? FF_CEIL_RSHIFT(inlink->h, vsub) : inlink->h;\n@@ -68,7 +68,7 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *frame)\n            av_get_picture_type_char(frame->pict_type),\n            checksum, plane_checksum[0]);\n \n-    for (plane = 1; plane < 4 && frame->data[plane]; plane++)\n+    for (plane = 1; plane < 4 && frame->data[plane] && frame->linesize[plane]; plane++)\n         av_log(ctx, AV_LOG_INFO, \" %08X\", plane_checksum[plane]);\n     av_log(ctx, AV_LOG_INFO, \"]\\n\");\n "
        },
        {
          "filename": "libavfilter/vf_vignette.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -239,7 +239,7 @@ static int filter_frame(AVFilterLink *inlink, AVFrame *in)\n     } else {\n         int plane;\n \n-        for (plane = 0; plane < 4 && in->data[plane]; plane++) {\n+        for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++) {\n             uint8_t       *dst = out->data[plane];\n             const uint8_t *src = in ->data[plane];\n             const float *fmap = s->fmap;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fd1772b7475d0d5673a5dd314ee78443d0be4cf1",
            "date": "2025-01-13T21:17:06Z",
            "author_login": "jamrial"
          },
          {
            "sha": "8eb1d76e146a0e557d596a4039efebac746b4d83",
            "date": "2025-01-12T03:34:17Z",
            "author_login": "nuomi2021"
          },
          {
            "sha": "d5873be583ada9e1fb887e2fe8dcfd4b12e0efcd",
            "date": "2025-01-13T20:28:02Z",
            "author_login": "jamrial"
          },
          {
            "sha": "b88fc4e098607bed98c74e6d13ed77b907776685",
            "date": "2025-01-08T11:06:30Z",
            "author_login": "mypopydev"
          },
          {
            "sha": "8ded602edad43227aa5b84ac8041d4b174ec9431",
            "date": "2025-01-08T11:04:12Z",
            "author_login": "mypopydev"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-119",
    "description": "libavfilter in FFmpeg before 2.0.1 has unspecified impact and remote vectors related to a crafted \"plane,\" which triggers an out-of-bounds heap write.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2013-11-23T17:55:03.477",
    "last_modified": "2024-11-21T01:55:14.317",
    "fix_date": "2013-08-03T16:54:43Z"
  },
  "references": [
    {
      "url": "http://www.ffmpeg.org/security.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2013/08/21/11",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://github.com/FFmpeg/FFmpeg/commit/e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/201603-06",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.ffmpeg.org/security.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2013/08/21/11",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/FFmpeg/FFmpeg/commit/e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/201603-06",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:20.042944",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "FFmpeg",
    "owner": "FFmpeg",
    "created_at": "2011-04-14T14:12:38Z",
    "updated_at": "2025-01-14T12:22:35Z",
    "pushed_at": "2025-01-13T21:15:03Z",
    "size": 431834,
    "stars": 47243,
    "forks": 12316,
    "open_issues": 3,
    "watchers": 47243,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "release/0.5",
      "release/0.6",
      "release/0.7",
      "release/0.8",
      "release/0.9",
      "release/0.10",
      "release/0.11",
      "release/1.0",
      "release/1.1",
      "release/1.2",
      "release/2.0",
      "release/2.1",
      "release/2.2",
      "release/2.3",
      "release/2.4",
      "release/2.5",
      "release/2.6",
      "release/2.7",
      "release/2.8",
      "release/3.0",
      "release/3.1",
      "release/3.2",
      "release/3.3",
      "release/3.4",
      "release/4.0",
      "release/4.1",
      "release/4.2",
      "release/4.3"
    ],
    "languages": {
      "C": 65826781,
      "Assembly": 5688727,
      "Makefile": 948271,
      "C++": 141194,
      "Objective-C": 108023,
      "Cuda": 85420,
      "Shell": 59093,
      "Perl": 29093,
      "Metal": 7961,
      "Python": 5992,
      "Awk": 1912,
      "HTML": 1631,
      "Ruby": 1462,
      "Verilog": 729,
      "Roff": 132
    },
    "commit_activity": {
      "total_commits_last_year": 4412,
      "avg_commits_per_week": 84.84615384615384,
      "days_active_last_year": 353
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:03:32.126548"
  }
}