{
  "cve_id": "CVE-2013-4521",
  "github_data": {
    "repository": "nuxeo/richfaces",
    "fix_commit": "6cbad2a6dcb70d3e33a6ce5879b1a3ad79eb1aec",
    "related_commits": [
      "6cbad2a6dcb70d3e33a6ce5879b1a3ad79eb1aec",
      "6cbad2a6dcb70d3e33a6ce5879b1a3ad79eb1aec"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "6cbad2a6dcb70d3e33a6ce5879b1a3ad79eb1aec",
      "commit_date": "2013-11-07T10:46:52Z",
      "author": {
        "login": "guirenard",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "NXBT-661: apply patch for CVE-2013-4521 flaw",
        "length": 44,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 198,
        "additions": 189,
        "deletions": 9
      },
      "files": [
        {
          "filename": "framework/impl/src/main/java/org/ajax4jsf/resource/LookAheadObjectInputStream.java",
          "status": "added",
          "additions": 148,
          "deletions": 0,
          "patch": "@@ -0,0 +1,148 @@\n+/**\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2010, Red Hat, Inc. and individual contributors\n+ * by the @authors tag. See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ **/\n+package org.ajax4jsf.resource;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InvalidClassException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectStreamClass;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * When deserializing objects, first check that the class being deserialized is in the allowed whitelist.\n+ *\n+ * @author <a href=\"http://community.jboss.org/people/bleathem\">Brian Leathem</a>\n+ */\n+public class LookAheadObjectInputStream extends ObjectInputStream {\n+    private static final Map<String, Class<?>> PRIMITIVE_TYPES = new HashMap<String, Class<?>>(9, 1.0F);\n+    private static Set<Class> whitelistBaseClasses = new HashSet<Class>();\n+    private static Set<String> whitelistClassNameCache = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\n+\n+    static {\n+        PRIMITIVE_TYPES.put(\"bool\", Boolean.TYPE);\n+        PRIMITIVE_TYPES.put(\"byte\", Byte.TYPE);\n+        PRIMITIVE_TYPES.put(\"char\", Character.TYPE);\n+        PRIMITIVE_TYPES.put(\"short\", Short.TYPE);\n+        PRIMITIVE_TYPES.put(\"int\", Integer.TYPE);\n+        PRIMITIVE_TYPES.put(\"long\", Long.TYPE);\n+        PRIMITIVE_TYPES.put(\"float\", Float.TYPE);\n+        PRIMITIVE_TYPES.put(\"double\", Double.TYPE);\n+        PRIMITIVE_TYPES.put(\"void\", Void.TYPE);\n+\n+        whitelistClassNameCache.add(new Object[0].getClass().getName());\n+        whitelistClassNameCache.add(new String[0].getClass().getName());\n+        whitelistClassNameCache.add(new Boolean[0].getClass().getName());\n+        whitelistClassNameCache.add(new Byte[0].getClass().getName());\n+        whitelistClassNameCache.add(new Character[0].getClass().getName());\n+        whitelistClassNameCache.add(new Short[0].getClass().getName());\n+        whitelistClassNameCache.add(new Integer[0].getClass().getName());\n+        whitelistClassNameCache.add(new Long[0].getClass().getName());\n+        whitelistClassNameCache.add(new Float[0].getClass().getName());\n+        whitelistClassNameCache.add(new Double[0].getClass().getName());\n+        whitelistClassNameCache.add(new Void[0].getClass().getName());\n+\n+        whitelistBaseClasses.add(String.class);\n+        whitelistBaseClasses.add(Boolean.class);\n+        whitelistBaseClasses.add(Byte.class);\n+        whitelistBaseClasses.add(Character.class);\n+        whitelistBaseClasses.add(Number.class);\n+\n+        loadWhitelist();\n+    }\n+\n+    public LookAheadObjectInputStream(InputStream in) throws IOException {\n+        super(in);\n+    }\n+\n+    /**\n+     * Only deserialize primitive or whitelisted classes\n+     */\n+    @Override\n+    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n+        Class<?> primitiveType = PRIMITIVE_TYPES.get(desc.getName());\n+        if (primitiveType != null) {\n+            return primitiveType;\n+        }\n+        if (!isClassValid(desc.getName())) {\n+            throw new InvalidClassException(\"Unauthorized deserialization attempt\", desc.getName());\n+        }\n+        return super.resolveClass(desc);\n+    }\n+\n+    /**\n+     * Determine if the given requestedClassName is allowed by the whitelist\n+     */\n+    boolean isClassValid(String requestedClassName) {\n+        if (whitelistClassNameCache.contains(requestedClassName)) {\n+            return true;\n+        }\n+        try {\n+            Class<?> requestedClass = Class.forName(requestedClassName);\n+            for (Class baseClass : whitelistBaseClasses ) {\n+                if (baseClass.isAssignableFrom(requestedClass)) {\n+                    whitelistClassNameCache.add(requestedClassName);\n+                    return true;\n+                }\n+            }\n+        } catch (ClassNotFoundException e) {\n+            return false;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Load the whitelist from the properties file\n+     */\n+    static void loadWhitelist() {\n+        Properties whitelistProperties = new Properties();\n+        InputStream stream = null;\n+        try {\n+            stream =  LookAheadObjectInputStream.class.getResourceAsStream(\"resource-serialization.properties\");\n+            whitelistProperties.load(stream);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Error loading the ResourceBuilder.properties file\", e);\n+        } finally {\n+            if (stream != null) {\n+                try {\n+                    stream.close();\n+                } catch (IOException e) {\n+                    throw new RuntimeException(\"Error closing the ResourceBuilder.properties file\", e);\n+                }\n+            }\n+        }\n+        for (String baseClassName : whitelistProperties.getProperty(\"whitelist\").split(\",\")) {\n+            try {\n+                Class<?> baseClass = Class.forName(baseClassName);\n+                whitelistBaseClasses.add(baseClass);\n+            } catch (ClassNotFoundException e) {\n+                throw new RuntimeException(\"Unable to load whiteList class \" + baseClassName, e);\n+            }\n+        }\n+    }\n+}"
        },
        {
          "filename": "framework/impl/src/main/java/org/ajax4jsf/resource/ResourceBuilderImpl.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -374,8 +374,7 @@ public Object getResourceDataForKey(String key) {\n \t\t\t\tdata = objectArray;\r\n \t\t\t} else {\r\n \t\t\t\ttry {\r\n-\t\t\t\t\tObjectInputStream in = new ObjectInputStream(\r\n-\t\t\t\t\t\t\tnew ByteArrayInputStream(objectArray));\r\n+\t\t\t\t\tObjectInputStream in = new LookAheadObjectInputStream(new ByteArrayInputStream(objectArray));\r\n \t\t\t\t\tdata = in.readObject();\r\n \t\t\t\t} catch (StreamCorruptedException e) {\r\n \t\t\t\t\tlog.error(Messages\r"
        },
        {
          "filename": "framework/impl/src/main/java/org/ajax4jsf/resource/SerializableResource.java",
          "status": "added",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -0,0 +1,31 @@\n+/**\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2010, Red Hat, Inc. and individual contributors\n+ * by the @authors tag. See the copyright.txt in the distribution for a\n+ * full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ **/\n+package org.ajax4jsf.resource;\n+\n+/**\n+ * A marker interface, used to indicate that the class implementing this interfaces is cleared for deserialisation by\n+ * the LookAheadObjectInputStream\n+ *\n+ * @author <a href=\"http://community.jboss.org/people/bleathem\">Brian Leathem</a>\n+ */\n+public interface SerializableResource extends java.io.Serializable {\n+}"
        },
        {
          "filename": "framework/impl/src/main/java/org/ajax4jsf/resource/UserResource.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -156,7 +156,7 @@ public boolean requireFacesContext() {\n \t\treturn true;\r\n \t}\r\n \t\r\n-\tpublic static class UriData implements Serializable {\r\n+\tpublic static class UriData implements SerializableResource {\r\n \r\n \t\t/**\r\n \t\t * \r"
        },
        {
          "filename": "framework/impl/src/main/resources/org/ajax4jsf/resource/resource-serialization.properties",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+whitelist = org.ajax4jsf.resource.InternetResource,org.ajax4jsf.resource.SerializableResource,javax.el.Expression,javax.faces.el.MethodBinding,javax.faces.component.StateHolderSaver,java.awt.Color\n\\ No newline at end of file"
        },
        {
          "filename": "samples/richfaces-demo/src/main/java/org/richfaces/demo/media/MediaData.java",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -1,9 +1,10 @@\n package org.richfaces.demo.media;\r\n \r\n import java.awt.Color;\r\n-import java.io.Serializable;\r\n \r\n-public class MediaData implements Serializable{\r\n+import org.ajax4jsf.resource.SerializableResource;\r\n+\r\n+public class MediaData implements SerializableResource {\r\n \r\n \tprivate static final long serialVersionUID = 1L;\r\n \tInteger Width=110;\r"
        },
        {
          "filename": "samples/richfaces-demo/src/main/java/org/richfaces/demo/paint2d/PaintData.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,8 +1,8 @@\n package org.richfaces.demo.paint2d;\r\n \r\n-import java.io.Serializable;\r\n+import org.ajax4jsf.resource.SerializableResource;\r\n \r\n-public class PaintData implements Serializable{\r\n+public class PaintData implements SerializableResource {\r\n \t/**\r\n \t * \r\n \t */\r"
        },
        {
          "filename": "ui/paint2D/src/main/java/org/richfaces/renderkit/html/Paint2DResource.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -27,7 +27,6 @@\n import java.awt.Graphics2D;\r\n import java.awt.image.BufferedImage;\r\n import java.io.IOException;\r\n-import java.io.Serializable;\r\n \r\n import javax.faces.FacesException;\r\n import javax.faces.component.UIComponentBase;\r\n@@ -41,6 +40,7 @@\n import org.ajax4jsf.resource.PngRenderer;\r\n import org.ajax4jsf.resource.ResourceContext;\r\n import org.ajax4jsf.resource.ResourceRenderer;\r\n+import org.ajax4jsf.resource.SerializableResource;\r\n import org.ajax4jsf.util.HtmlColor;\r\n import org.richfaces.component.UIPaint2D;\r\n \r\n@@ -126,7 +126,7 @@ protected Object getDataToStore(FacesContext context, Object data) {\n \t\t}\r\n \t}\r\n \r\n-\tprivate static final class ImageData implements Serializable {\r\n+\tprivate static final class ImageData implements SerializableResource {\r\n \r\n \t\tprivate static final long serialVersionUID = 4452040100045367728L;\r\n \t\t\r"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "485749c5f49ac6169d9187cc448110d477acab3b",
            "date": "2015-01-05T10:42:11Z",
            "author_login": "guirenard"
          },
          {
            "sha": "18aeefd449a71ad1ef5730786b60803d4a131f31",
            "date": "2015-01-02T08:37:52Z",
            "author_login": "guirenard"
          },
          {
            "sha": "8ee3dd4321f3cd1cd14da1fed318c1f6e5794ad9",
            "date": "2014-08-04T16:53:02Z",
            "author_login": "guirenard"
          },
          {
            "sha": "9137509ae17736920d423d1081ba21f5e41df466",
            "date": "2014-06-05T18:50:50Z",
            "author_login": "jcarsique"
          },
          {
            "sha": "91a614881572bb7cd113f058fa3cf4e07ee3ec68",
            "date": "2014-06-05T18:40:43Z",
            "author_login": "jcarsique"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-502",
    "description": "RichFaces implementation in Nuxeo Platform 5.6.0 before HF27 and 5.8.0 before HF-01 does not restrict the classes for which deserialization methods can be called, which allows remote attackers to execute arbitrary code via crafted serialized data. NOTE: this vulnerability may overlap CVE-2013-2165.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-02-06T16:15:11.087",
    "last_modified": "2024-11-21T01:55:43.977",
    "fix_date": "2013-11-07T10:46:52Z"
  },
  "references": [
    {
      "url": "http://doc.nuxeo.com/display/public/ADMINDOC58/Nuxeo+Security+Hotfixes",
      "source": "secalert@redhat.com",
      "tags": [
        "Broken Link",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1027052",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nuxeo/richfaces/commit/6cbad2a6dcb70d3e33a6ce5879b1a3ad79eb1aec",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://doc.nuxeo.com/display/public/ADMINDOC58/Nuxeo+Security+Hotfixes",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1027052",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nuxeo/richfaces/commit/6cbad2a6dcb70d3e33a6ce5879b1a3ad79eb1aec",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:39.835497",
    "processing_status": "enhanced"
  }
}