{
  "cve_id": "CVE-2013-4532",
  "github_data": {
    "repository": "qemu/qemu",
    "fix_commit": "2e1198672759eda6e122ff38fcf6df06f27e0fe2",
    "related_commits": [
      "2e1198672759eda6e122ff38fcf6df06f27e0fe2",
      "2e1198672759eda6e122ff38fcf6df06f27e0fe2"
    ],
    "patch_url": "https://github.com/qemu/qemu/commit/2e1198672759eda6e122ff38fcf6df06f27e0fe2.patch",
    "fix_commit_details": {
      "sha": "2e1198672759eda6e122ff38fcf6df06f27e0fe2",
      "commit_date": "2014-05-13T15:09:38Z",
      "author": {
        "login": "pm215",
        "type": "User",
        "stats": {
          "total_commits": 10570,
          "average_weekly_commits": 12.6890756302521,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 663
        }
      },
      "commit_message": {
        "title": "hw/net/stellaris_enet: Convert to vmstate",
        "length": 622,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 148,
        "additions": 80,
        "deletions": 68
      },
      "files": [
        {
          "filename": "hw/net/stellaris_enet.c",
          "status": "modified",
          "additions": 80,
          "deletions": 68,
          "patch": "@@ -46,6 +46,11 @@ do { fprintf(stderr, \"stellaris_enet: error: \" fmt , ## __VA_ARGS__);} while (0)\n #define STELLARIS_ENET(obj) \\\n     OBJECT_CHECK(stellaris_enet_state, (obj), TYPE_STELLARIS_ENET)\n \n+typedef struct {\n+    uint8_t data[2048];\n+    uint32_t len;\n+} StellarisEnetRxFrame;\n+\n typedef struct {\n     SysBusDevice parent_obj;\n \n@@ -59,22 +64,89 @@ typedef struct {\n     uint32_t mtxd;\n     uint32_t mrxd;\n     uint32_t np;\n-    int tx_fifo_len;\n+    uint32_t tx_fifo_len;\n     uint8_t tx_fifo[2048];\n     /* Real hardware has a 2k fifo, which works out to be at most 31 packets.\n        We implement a full 31 packet fifo.  */\n-    struct {\n-        uint8_t data[2048];\n-        int len;\n-    } rx[31];\n-    int rx_fifo_offset;\n-    int next_packet;\n+    StellarisEnetRxFrame rx[31];\n+    uint32_t rx_fifo_offset;\n+    uint32_t next_packet;\n     NICState *nic;\n     NICConf conf;\n     qemu_irq irq;\n     MemoryRegion mmio;\n } stellaris_enet_state;\n \n+static const VMStateDescription vmstate_rx_frame = {\n+    .name = \"stellaris_enet/rx_frame\",\n+    .version_id = 1,\n+    .minimum_version_id = 1,\n+    .fields = (VMStateField[]) {\n+        VMSTATE_UINT8_ARRAY(data, StellarisEnetRxFrame, 2048),\n+        VMSTATE_UINT32(len, StellarisEnetRxFrame),\n+        VMSTATE_END_OF_LIST()\n+    }\n+};\n+\n+static int stellaris_enet_post_load(void *opaque, int version_id)\n+{\n+    stellaris_enet_state *s = opaque;\n+    int i;\n+\n+    /* Sanitize inbound state. Note that next_packet is an index but\n+     * np is a size; hence their valid upper bounds differ.\n+     */\n+    if (s->next_packet >= ARRAY_SIZE(s->rx)) {\n+        return -1;\n+    }\n+\n+    if (s->np > ARRAY_SIZE(s->rx)) {\n+        return -1;\n+    }\n+\n+    for (i = 0; i < ARRAY_SIZE(s->rx); i++) {\n+        if (s->rx[i].len > ARRAY_SIZE(s->rx[i].data)) {\n+            return -1;\n+        }\n+    }\n+\n+    if (s->rx_fifo_offset > ARRAY_SIZE(s->rx[0].data) - 4) {\n+        return -1;\n+    }\n+\n+    if (s->tx_fifo_len > ARRAY_SIZE(s->tx_fifo)) {\n+        return -1;\n+    }\n+\n+    return 0;\n+}\n+\n+static const VMStateDescription vmstate_stellaris_enet = {\n+    .name = \"stellaris_enet\",\n+    .version_id = 2,\n+    .minimum_version_id = 2,\n+    .post_load = stellaris_enet_post_load,\n+    .fields = (VMStateField[]) {\n+        VMSTATE_UINT32(ris, stellaris_enet_state),\n+        VMSTATE_UINT32(im, stellaris_enet_state),\n+        VMSTATE_UINT32(rctl, stellaris_enet_state),\n+        VMSTATE_UINT32(tctl, stellaris_enet_state),\n+        VMSTATE_UINT32(thr, stellaris_enet_state),\n+        VMSTATE_UINT32(mctl, stellaris_enet_state),\n+        VMSTATE_UINT32(mdv, stellaris_enet_state),\n+        VMSTATE_UINT32(mtxd, stellaris_enet_state),\n+        VMSTATE_UINT32(mrxd, stellaris_enet_state),\n+        VMSTATE_UINT32(np, stellaris_enet_state),\n+        VMSTATE_UINT32(tx_fifo_len, stellaris_enet_state),\n+        VMSTATE_UINT8_ARRAY(tx_fifo, stellaris_enet_state, 2048),\n+        VMSTATE_STRUCT_ARRAY(rx, stellaris_enet_state, 31, 1,\n+                             vmstate_rx_frame, StellarisEnetRxFrame),\n+        VMSTATE_UINT32(rx_fifo_offset, stellaris_enet_state),\n+        VMSTATE_UINT32(next_packet, stellaris_enet_state),\n+        VMSTATE_END_OF_LIST()\n+    }\n+};\n+\n static void stellaris_enet_update(stellaris_enet_state *s)\n {\n     qemu_set_irq(s->irq, (s->ris & s->im) != 0);\n@@ -379,63 +451,6 @@ static void stellaris_enet_reset(stellaris_enet_state *s)\n     s->tx_fifo_len = 0;\n }\n \n-static void stellaris_enet_save(QEMUFile *f, void *opaque)\n-{\n-    stellaris_enet_state *s = (stellaris_enet_state *)opaque;\n-    int i;\n-\n-    qemu_put_be32(f, s->ris);\n-    qemu_put_be32(f, s->im);\n-    qemu_put_be32(f, s->rctl);\n-    qemu_put_be32(f, s->tctl);\n-    qemu_put_be32(f, s->thr);\n-    qemu_put_be32(f, s->mctl);\n-    qemu_put_be32(f, s->mdv);\n-    qemu_put_be32(f, s->mtxd);\n-    qemu_put_be32(f, s->mrxd);\n-    qemu_put_be32(f, s->np);\n-    qemu_put_be32(f, s->tx_fifo_len);\n-    qemu_put_buffer(f, s->tx_fifo, sizeof(s->tx_fifo));\n-    for (i = 0; i < 31; i++) {\n-        qemu_put_be32(f, s->rx[i].len);\n-        qemu_put_buffer(f, s->rx[i].data, sizeof(s->rx[i].data));\n-\n-    }\n-    qemu_put_be32(f, s->next_packet);\n-    qemu_put_be32(f, s->rx_fifo_offset);\n-}\n-\n-static int stellaris_enet_load(QEMUFile *f, void *opaque, int version_id)\n-{\n-    stellaris_enet_state *s = (stellaris_enet_state *)opaque;\n-    int i;\n-\n-    if (version_id != 1)\n-        return -EINVAL;\n-\n-    s->ris = qemu_get_be32(f);\n-    s->im = qemu_get_be32(f);\n-    s->rctl = qemu_get_be32(f);\n-    s->tctl = qemu_get_be32(f);\n-    s->thr = qemu_get_be32(f);\n-    s->mctl = qemu_get_be32(f);\n-    s->mdv = qemu_get_be32(f);\n-    s->mtxd = qemu_get_be32(f);\n-    s->mrxd = qemu_get_be32(f);\n-    s->np = qemu_get_be32(f);\n-    s->tx_fifo_len = qemu_get_be32(f);\n-    qemu_get_buffer(f, s->tx_fifo, sizeof(s->tx_fifo));\n-    for (i = 0; i < 31; i++) {\n-        s->rx[i].len = qemu_get_be32(f);\n-        qemu_get_buffer(f, s->rx[i].data, sizeof(s->rx[i].data));\n-\n-    }\n-    s->next_packet = qemu_get_be32(f);\n-    s->rx_fifo_offset = qemu_get_be32(f);\n-\n-    return 0;\n-}\n-\n static void stellaris_enet_cleanup(NetClientState *nc)\n {\n     stellaris_enet_state *s = qemu_get_nic_opaque(nc);\n@@ -467,17 +482,13 @@ static int stellaris_enet_init(SysBusDevice *sbd)\n     qemu_format_nic_info_str(qemu_get_queue(s->nic), s->conf.macaddr.a);\n \n     stellaris_enet_reset(s);\n-    register_savevm(dev, \"stellaris_enet\", -1, 1,\n-                    stellaris_enet_save, stellaris_enet_load, s);\n     return 0;\n }\n \n static void stellaris_enet_unrealize(DeviceState *dev, Error **errp)\n {\n     stellaris_enet_state *s = STELLARIS_ENET(dev);\n \n-    unregister_savevm(DEVICE(s), \"stellaris_enet\", s);\n-\n     memory_region_destroy(&s->mmio);\n }\n \n@@ -494,6 +505,7 @@ static void stellaris_enet_class_init(ObjectClass *klass, void *data)\n     k->init = stellaris_enet_init;\n     dc->unrealize = stellaris_enet_unrealize;\n     dc->props = stellaris_enet_properties;\n+    dc->vmsd = &vmstate_stellaris_enet;\n }\n \n static const TypeInfo stellaris_enet_info = {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e8aa7fdcddfc8589bdc7c973a052e76e8f999455",
            "date": "2025-01-13T14:43:48Z",
            "author_login": "stefanhaRH"
          },
          {
            "sha": "435d260e7ec5ff9c79e3e62f1d66ec82d2d691ae",
            "date": "2025-01-13T12:35:35Z",
            "author_login": "pbo-linaro"
          },
          {
            "sha": "132f8ec799cea261ad6b60ac8ae86f17cc98b9a1",
            "date": "2025-01-13T12:35:34Z",
            "author_login": "pbo-linaro"
          },
          {
            "sha": "39d70016d9abe15967f7051741dd5621c659b1f4",
            "date": "2025-01-13T12:35:34Z",
            "author_login": "pm215"
          },
          {
            "sha": "86a00f2046f5f5b613bdf18d6c972b495a907c37",
            "date": "2025-01-13T12:35:34Z",
            "author_login": "pbo-linaro"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-119",
    "description": "Qemu 1.1.2+dfsg to 2.1+dfsg suffers from a buffer overrun which could potentially result in arbitrary code execution on the host with the privileges of the QEMU process.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-01-02T16:15:11.560",
    "last_modified": "2024-11-21T01:55:45.203",
    "fix_date": "2014-05-13T15:09:38Z"
  },
  "references": [
    {
      "url": "http://www.ubuntu.com/usn/USN-2342-1",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/security/cve/cve-2013-4532",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=739589",
      "source": "secalert@redhat.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4532",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.suse.com/show_bug.cgi?id=CVE-2013-4532",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/qemu/qemu/commit/2e1198672759eda6e122ff38fcf6df06f27e0fe2",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security-tracker.debian.org/tracker/CVE-2013-4532",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2342-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/security/cve/cve-2013-4532",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=739589",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4532",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.suse.com/show_bug.cgi?id=CVE-2013-4532",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/qemu/qemu/commit/2e1198672759eda6e122ff38fcf6df06f27e0fe2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security-tracker.debian.org/tracker/CVE-2013-4532",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:37.453802",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "qemu",
    "owner": "qemu",
    "created_at": "2012-08-11T21:48:37Z",
    "updated_at": "2025-01-14T15:30:43Z",
    "pushed_at": "2025-01-13T16:01:34Z",
    "size": 597325,
    "stars": 10728,
    "forks": 5703,
    "open_issues": 0,
    "watchers": 10728,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 72752071,
      "C++": 10865548,
      "Python": 3771166,
      "Shell": 1394621,
      "Assembly": 661208,
      "Meson": 485678,
      "Haxe": 351509,
      "Perl": 223220,
      "Rust": 153760,
      "Objective-C": 153251,
      "Makefile": 107378,
      "Pawn": 50592,
      "SmPL": 33510,
      "Yacc": 29612,
      "Lex": 23760,
      "NSIS": 6939,
      "DenizenScript": 2931,
      "Dockerfile": 1012,
      "GLSL": 585,
      "GDB": 326,
      "Vim Script": 220,
      "Emacs Lisp": 75
    },
    "commit_activity": {
      "total_commits_last_year": 6588,
      "avg_commits_per_week": 126.6923076923077,
      "days_active_last_year": 335
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:49:13.645950"
  }
}