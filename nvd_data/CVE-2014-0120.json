{
  "cve_id": "CVE-2014-0120",
  "github_data": {
    "repository": "hawtio/hawtio",
    "fix_commit": "b4e23e002639c274a2f687ada980118512f06113",
    "related_commits": [
      "b4e23e002639c274a2f687ada980118512f06113",
      "b4e23e002639c274a2f687ada980118512f06113"
    ],
    "patch_url": "https://github.com/hawtio/hawtio/commit/b4e23e002639c274a2f687ada980118512f06113.patch",
    "fix_commit_details": {
      "sha": "b4e23e002639c274a2f687ada980118512f06113",
      "commit_date": "2014-03-06T17:11:42Z",
      "author": {
        "login": "gashcrumb",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add a LoginTokenServlet that plugins can use to fetch a token, and let's use it in hawtio-karaf-terminal.  Also handle cases where the terminal scope gets created a couple times.",
        "length": 178,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 197,
        "additions": 149,
        "deletions": 48
      },
      "files": [
        {
          "filename": "hawtio-karaf-terminal/src/main/java/io/hawt/web/plugin/karaf/terminal/TerminalServlet.java",
          "status": "modified",
          "additions": 8,
          "deletions": 15,
          "patch": "@@ -1,23 +1,21 @@\n package io.hawt.web.plugin.karaf.terminal;\n \n import io.hawt.system.Helpers;\n+import io.hawt.web.LoginTokenServlet;\n import org.apache.felix.service.command.CommandProcessor;\n import org.apache.felix.service.command.CommandSession;\n import org.apache.felix.service.threadio.ThreadIO;\n import org.apache.karaf.shell.console.jline.Console;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import javax.security.auth.Subject;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpSession;\n import java.io.*;\n import java.lang.reflect.Constructor;\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n import java.util.zip.GZIPOutputStream;\n \n /**\n@@ -45,22 +43,17 @@ public ThreadIO getThreadIO() {\n     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n \n         HttpSession session = request.getSession(false);\n-        if (session == null) {\n-          AccessControlContext acc = AccessController.getContext();\n-          Subject subject = Subject.getSubject(acc);\n-          if (subject == null) {\n+        String token = request.getHeader(LoginTokenServlet.LOGIN_TOKEN);\n+\n+        if (token == null || session == null) {\n             Helpers.doForbidden(response);\n             return;\n-          }\n-          session = request.getSession(true);\n-          session.setAttribute(\"subject\", subject);\n-        } else {\n-          Subject subject = (Subject) session.getAttribute(\"subject\");\n-          if (subject == null) {\n-            session.invalidate();\n+        }\n+\n+        String sessionToken = (String) session.getAttribute(LoginTokenServlet.LOGIN_TOKEN);\n+        if (!token.equals(sessionToken)) {\n             Helpers.doForbidden(response);\n             return;\n-          }\n         }\n \n         String encoding = request.getHeader(\"Accept-Encoding\");"
        },
        {
          "filename": "hawtio-karaf-terminal/src/main/webapp/WEB-INF/web.xml",
          "status": "modified",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -16,7 +16,28 @@\n     <filter-name>AuthenticationFilter</filter-name>\n     <url-pattern>/term/*</url-pattern>\n   </filter-mapping>\n+  <filter-mapping>\n+    <filter-name>AuthenticationFilter</filter-name>\n+    <url-pattern>/auth/*</url-pattern>\n+  </filter-mapping>\n+\n+  <servlet>\n+    <servlet-name>login</servlet-name>\n+    <servlet-class>io.hawt.web.LoginTokenServlet</servlet-class>\n+  </servlet>\n+  <servlet-mapping>\n+    <servlet-name>login</servlet-name>\n+    <url-pattern>/auth/login/*</url-pattern>\n+  </servlet-mapping>\n \n+  <servlet>\n+    <servlet-name>logout</servlet-name>\n+    <servlet-class>io.hawt.web.LogoutServlet</servlet-class>\n+  </servlet>\n+  <servlet-mapping>\n+    <servlet-name>logout</servlet-name>\n+    <url-pattern>/auth/logout/*</url-pattern>\n+  </servlet-mapping>\n \n   <servlet>\n     <servlet-name>TerminalServlet</servlet-name>"
        },
        {
          "filename": "hawtio-karaf-terminal/src/main/webapp/app/js/gogo.js",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -6,7 +6,7 @@\n \n gogo = { };\n \n-gogo.Terminal_ctor = function(div, width, height, authHeader) {\n+gogo.Terminal_ctor = function(div, width, height, token) {\n \n    var query0 = \"w=\" + width + \"&h=\" + height;\n    var query1 = query0 + \"&k=\";\n@@ -47,7 +47,7 @@ gogo.Terminal_ctor = function(div, width, height, authHeader) {\n                force = 0;\n            }\n            r.open(\"POST\", \"hawtio-karaf-terminal/term\", true);\n-           r.setRequestHeader('Authorization', authHeader);\n+           r.setRequestHeader('LoginToken', token);\n            r.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n            r.onreadystatechange = function () {\n                if (r.readyState == 4) {\n@@ -224,7 +224,7 @@ gogo.Terminal_ctor = function(div, width, height, authHeader) {\n \n }\n \n-gogo.Terminal = function(div, width, height, authHeader) {\n-   return new this.Terminal_ctor(div, width, height, authHeader);\n+gogo.Terminal = function(div, width, height, token) {\n+   return new this.Terminal_ctor(div, width, height, token);\n }\n "
        },
        {
          "filename": "hawtio-karaf-terminal/src/main/webapp/app/js/gogoPlugin.js",
          "status": "modified",
          "additions": 54,
          "deletions": 5,
          "patch": "@@ -16,6 +16,34 @@ var Gogo = (function() {\n         restrict: 'A',\n         link: function(scope, element, attrs) {\n \n+          scope.$on(\"$destroy\", function(e) {\n+            scope.destroyed = true;\n+            document.onkeypress = null;\n+            document.onkeydown = null;\n+            if (!('term' in scope)) {\n+              return;\n+            }\n+            var url = \"hawtio-karaf-terminal/auth/logout/\";\n+            delete scope.term;\n+            $.ajax(url, {\n+              type: \"POST\",\n+              success: function (response) {\n+                log.debug(\"logged out of terminal\");\n+                Core.$apply(scope);\n+              },\n+              error: function (xhr, textStatus, error) {\n+                log.info(\"Failed to log out of terminal: \", error);\n+              },\n+              beforeSend: function (xhr) {\n+                xhr.setRequestHeader('Authorization', authHeader);\n+              }\n+            })\n+          });\n+\n+          if (scope.destroyed) {\n+            return;\n+          }\n+\n           var width = 120;\n           var height = 39;\n \n@@ -52,11 +80,32 @@ var Gogo = (function() {\n \n           var authHeader = Core.getBasicAuthHeader(userDetails.username, userDetails.password);\n \n-          gogo.Terminal(element.get(0), width, height, authHeader);\n-\n-          scope.$on(\"$destroy\", function(e) {\n-            document.onkeypress = null;\n-            document.onkeydown = null;\n+          var url = \"hawtio-karaf-terminal/auth/login/\";\n+\n+          $.ajax(url, {\n+            type: \"POST\",\n+            success: function (response) {\n+              if (scope.destroyed) {\n+                log.debug(\"Scope's been destroyed since we made our request, let's not create a terminal instance\");\n+                return;\n+              }\n+              log.debug(\"got back response: \", response);\n+              if ('term' in scope) {\n+                log.debug(\"Previous terminal created, let's clean it up\");\n+                document.onkeypress = null;\n+                document.onkeydown = null;\n+                delete scope.term;\n+              }\n+              scope.term = gogo.Terminal(element.get(0), width, height, response['token']);\n+              Core.$apply(scope);\n+\n+            },\n+            error: function (xhr, textStatus, error) {\n+              log.warn(\"Failed to log into terminal: \", error);\n+            },\n+            beforeSend: function (xhr) {\n+              xhr.setRequestHeader('Authorization', authHeader);\n+            }\n           });\n \n         }"
        },
        {
          "filename": "hawtio-system/src/main/java/io/hawt/web/LoginServlet.java",
          "status": "modified",
          "additions": 20,
          "deletions": 24,
          "patch": "@@ -1,30 +1,25 @@\n package io.hawt.web;\n \n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.Principal;\n-import java.util.ArrayList;\n-import java.util.GregorianCalendar;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import io.hawt.system.ConfigManager;\n+import io.hawt.system.Helpers;\n+import org.jolokia.converter.Converters;\n+import org.jolokia.converter.json.JsonConvertOptions;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n import javax.security.auth.Subject;\n import javax.servlet.ServletConfig;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import javax.servlet.http.HttpSession;\n-\n-import io.hawt.system.ConfigManager;\n-import io.hawt.system.Helpers;\n-import org.jolokia.converter.Converters;\n-import org.jolokia.converter.json.JsonConvertOptions;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.security.AccessControlContext;\n+import java.security.AccessController;\n+import java.security.Principal;\n+import java.util.*;\n \n /**\n  *\n@@ -34,9 +29,9 @@ public class LoginServlet extends HttpServlet {\n     private static final long serialVersionUID = 1L;\n     private static final transient Logger LOG = LoggerFactory.getLogger(LoginServlet.class);\n \n-    Converters converters = new Converters();\n-    JsonConvertOptions options = JsonConvertOptions.DEFAULT;\n-    ConfigManager config;\n+    protected Converters converters = new Converters();\n+    protected JsonConvertOptions options = JsonConvertOptions.DEFAULT;\n+    protected ConfigManager config;\n     private Integer timeout;\n \n     @Override\n@@ -74,8 +69,9 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws S\n                 LOG.warn(\"No security subject stored in existing session, invalidating\");\n                 session.invalidate();\n                 Helpers.doForbidden(resp);\n+                return;\n             }\n-            returnPrincipals(subject, out);\n+            sendResponse(session, subject, out);\n             return;\n         }\n \n@@ -112,10 +108,10 @@ protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws S\n             LOG.debug(\"Http session timeout for user {} is {} sec.\", username, session.getMaxInactiveInterval());\n         }\n \n-        returnPrincipals(subject, out);\n+        sendResponse(session, subject, out);\n     }\n \n-    private void returnPrincipals(Subject subject, PrintWriter out) {\n+    protected void sendResponse(HttpSession session, Subject subject, PrintWriter out) {\n \n         Map<String, Object> answer = new HashMap<String, Object>();\n "
        },
        {
          "filename": "hawtio-system/src/main/java/io/hawt/web/LoginTokenServlet.java",
          "status": "added",
          "additions": 42,
          "deletions": 0,
          "patch": "@@ -0,0 +1,42 @@\n+package io.hawt.web;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import javax.security.auth.Subject;\n+import javax.servlet.http.HttpSession;\n+import java.io.PrintWriter;\n+import java.security.SecureRandom;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+/**\n+ * @author Stan Lewis\n+ */\n+public class LoginTokenServlet extends LoginServlet {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String LOGIN_TOKEN = \"LoginToken\";\n+\n+    @Override\n+    protected void sendResponse(HttpSession session, Subject subject, PrintWriter out) {\n+\n+        String token = (String) session.getAttribute(LOGIN_TOKEN);\n+\n+        if ( token == null) {\n+            byte[] seed = (subject.toString() + new Long(System.currentTimeMillis()).toString()).getBytes();\n+            SecureRandom random = new SecureRandom(seed);\n+            byte[] tokenBytes = new byte[128];\n+            random.nextBytes(tokenBytes);\n+            token = Base64.encodeBase64String(tokenBytes);\n+            session.setAttribute(LOGIN_TOKEN, token);\n+        }\n+\n+        Map<String, String> answer = new HashMap<String, String>();\n+        answer.put(\"token\", token);\n+\n+        ServletHelpers.writeObject(converters, options, out, answer);\n+    }\n+\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7e0c6303a3fa75e14cae02a280e7d375e3495057",
            "date": "2025-01-09T07:30:44Z",
            "author_login": "tadayosi"
          },
          {
            "sha": "c9ba311a24e70e88f87c9b21a666a30efcce8195",
            "date": "2025-01-09T07:28:47Z",
            "author_login": "tadayosi"
          },
          {
            "sha": "cba5b80f5eabf8d98a4fa4b85d5387b27795fa84",
            "date": "2025-01-06T02:29:21Z",
            "author_login": "tadayosi"
          },
          {
            "sha": "ae33f6d874b4b437aca7259e6e8934bc4de480a2",
            "date": "2025-01-06T03:55:06Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "96b4e888b925a6ac7834685597d576f9303ff177",
            "date": "2025-01-06T03:54:47Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-352",
    "description": "Cross-site request forgery (CSRF) vulnerability in the admin terminal in Hawt.io allows remote attackers to hijack the authentication of arbitrary users for requests that run commands on the Karaf server, as demonstrated by running \"shutdown -f.\"",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-12-29T22:29:00.270",
    "last_modified": "2024-11-21T02:01:25.367",
    "fix_date": "2014-03-06T17:11:42Z"
  },
  "references": [
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1072681",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hawtio/hawtio/commit/b4e23e002639c274a2f687ada980118512f06113",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://infocon.org/cons/SyScan/SyScan%202015%20Singapore/SyScan%202015%20Singapore%20presentations/SyScan15%20David%20Jorm%20-%20Finding%20and%20exploiting%20novel%20flaws%20in%20Java%20software.pdf",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1072681",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hawtio/hawtio/commit/b4e23e002639c274a2f687ada980118512f06113",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://infocon.org/cons/SyScan/SyScan%202015%20Singapore/SyScan%202015%20Singapore%20presentations/SyScan15%20David%20Jorm%20-%20Finding%20and%20exploiting%20novel%20flaws%20in%20Java%20software.pdf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:12.800873",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "hawtio",
    "owner": "hawtio",
    "created_at": "2012-12-02T11:58:08Z",
    "updated_at": "2025-01-14T08:15:51Z",
    "pushed_at": "2025-01-09T14:16:47Z",
    "size": 107072,
    "stars": 1420,
    "forks": 543,
    "open_issues": 32,
    "watchers": 1420,
    "has_security_policy": false,
    "default_branch": "4.x",
    "protected_branches": [
      "2.x",
      "3.x",
      "4.x",
      "4.x-redhat"
    ],
    "languages": {
      "Java": 970291,
      "Gherkin": 20921,
      "JavaScript": 15240,
      "Shell": 7015,
      "TypeScript": 2186,
      "HTML": 1713,
      "Dockerfile": 1017,
      "CSS": 580,
      "XSLT": 564,
      "Groovy": 362
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:56:25.166676"
  }
}