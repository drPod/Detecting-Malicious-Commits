{
  "cve_id": "CVE-2014-0121",
  "github_data": {
    "repository": "hawtio/hawtio",
    "fix_commit": "5289715e4f2657562fdddcbad830a30969b96e1e",
    "related_commits": [
      "5289715e4f2657562fdddcbad830a30969b96e1e",
      "5289715e4f2657562fdddcbad830a30969b96e1e"
    ],
    "patch_url": "https://github.com/hawtio/hawtio/commit/5289715e4f2657562fdddcbad830a30969b96e1e.patch",
    "fix_commit_details": {
      "sha": "5289715e4f2657562fdddcbad830a30969b96e1e",
      "commit_date": "2014-03-05T15:48:13Z",
      "author": {
        "login": "gashcrumb",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Ensure we secure hawtio-karaf-terminal's /term context",
        "length": 54,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 134,
        "additions": 123,
        "deletions": 11
      },
      "files": [
        {
          "filename": "hawtio-karaf-terminal/pom.xml",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -30,6 +30,12 @@\n       <version>${project.version}</version>\n     </dependency>\n \n+    <dependency>\n+      <groupId>io.hawt</groupId>\n+      <artifactId>hawtio-system</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n     <dependency>\n       <groupId>javax.servlet</groupId>\n       <artifactId>servlet-api</artifactId>"
        },
        {
          "filename": "hawtio-karaf-terminal/src/main/java/io/hawt/web/plugin/karaf/terminal/KarafTerminalContextListener.java",
          "status": "added",
          "additions": 38,
          "deletions": 0,
          "patch": "@@ -0,0 +1,38 @@\n+package io.hawt.web.plugin.karaf.terminal;\n+\n+import io.hawt.system.ConfigManager;\n+\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+\n+/**\n+ * @author Stan Lewis\n+ */\n+public class KarafTerminalContextListener implements ServletContextListener {\n+\n+  private ConfigManager configManager = new ConfigManager();\n+\n+  @Override\n+  public void contextInitialized(ServletContextEvent sce) {\n+    try {\n+      configManager.init();\n+    } catch (Exception e) {\n+      throw createServletException(e);\n+    }\n+    sce.getServletContext().setAttribute(\"ConfigManager\", configManager);\n+  }\n+\n+  @Override\n+  public void contextDestroyed(ServletContextEvent sce) {\n+    try {\n+      configManager.destroy();\n+    } catch (Exception e) {\n+      throw createServletException(e);\n+    }\n+\n+  }\n+  protected RuntimeException createServletException(Exception e) {\n+    return new RuntimeException(e);\n+  }\n+\n+}"
        },
        {
          "filename": "hawtio-karaf-terminal/src/main/java/io/hawt/web/plugin/karaf/terminal/TerminalServlet.java",
          "status": "modified",
          "additions": 27,
          "deletions": 2,
          "patch": "@@ -1,18 +1,23 @@\n package io.hawt.web.plugin.karaf.terminal;\n \n+import io.hawt.system.Helpers;\n import org.apache.felix.service.command.CommandProcessor;\n import org.apache.felix.service.command.CommandSession;\n import org.apache.felix.service.threadio.ThreadIO;\n import org.apache.karaf.shell.console.jline.Console;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.security.auth.Subject;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServlet;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n import java.io.*;\n import java.lang.reflect.Constructor;\n+import java.security.AccessControlContext;\n+import java.security.AccessController;\n import java.util.zip.GZIPOutputStream;\n \n /**\n@@ -38,12 +43,32 @@ public ThreadIO getThreadIO() {\n \n     @Override\n     protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+\n+        HttpSession session = request.getSession(false);\n+        if (session == null) {\n+          AccessControlContext acc = AccessController.getContext();\n+          Subject subject = Subject.getSubject(acc);\n+          if (subject == null) {\n+            Helpers.doForbidden(response);\n+            return;\n+          }\n+          session = request.getSession(true);\n+          session.setAttribute(\"subject\", subject);\n+        } else {\n+          Subject subject = (Subject) session.getAttribute(\"subject\");\n+          if (subject == null) {\n+            session.invalidate();\n+            Helpers.doForbidden(response);\n+            return;\n+          }\n+        }\n+\n         String encoding = request.getHeader(\"Accept-Encoding\");\n         boolean supportsGzip = (encoding != null && encoding.toLowerCase().indexOf(\"gzip\") > -1);\n-        SessionTerminal st = (SessionTerminal) request.getSession(true).getAttribute(\"terminal\");\n+        SessionTerminal st = (SessionTerminal) session.getAttribute(\"terminal\");\n         if (st == null || st.isClosed()) {\n             st = new SessionTerminal(getCommandProcessor(), getThreadIO());\n-            request.getSession().setAttribute(\"terminal\", st);\n+            session.setAttribute(\"terminal\", st);\n         }\n         String str = request.getParameter(\"k\");\n         String f = request.getParameter(\"f\");"
        },
        {
          "filename": "hawtio-karaf-terminal/src/main/webapp/WEB-INF/web.xml",
          "status": "modified",
          "additions": 42,
          "deletions": 0,
          "patch": "@@ -8,6 +8,44 @@\n   <description>hawtio</description>\n   <display-name>hawtio Karaf terminal plugin</display-name>\n \n+  <env-entry>\n+    <description>Enable/disable hawtio's authentication filter, value is really a boolean</description>\n+    <env-entry-name>hawtio/authenticationEnabled</env-entry-name>\n+    <env-entry-type>java.lang.String</env-entry-type>\n+    <env-entry-value>false</env-entry-value>\n+  </env-entry>\n+\n+  <env-entry>\n+    <description>Authorized user role, empty string disables authorization</description>\n+    <env-entry-name>hawtio/role</env-entry-name>\n+    <env-entry-type>java.lang.String</env-entry-type>\n+    <env-entry-value></env-entry-value>\n+  </env-entry>\n+\n+  <env-entry>\n+    <description>JAAS classname that would contain the role principal, empty string disables authorization</description>\n+    <env-entry-name>hawtio/rolePrincipalClasses</env-entry-name>\n+    <env-entry-type>java.lang.String</env-entry-type>\n+    <env-entry-value></env-entry-value>\n+  </env-entry>\n+\n+  <env-entry>\n+    <description>JAAS realm used to authenticate users</description>\n+    <env-entry-name>hawtio/realm</env-entry-name>\n+    <env-entry-type>java.lang.String</env-entry-type>\n+    <env-entry-value>*</env-entry-value>\n+  </env-entry>\n+\n+  <filter>\n+    <filter-name>AuthenticationFilter</filter-name>\n+    <filter-class>io.hawt.web.AuthenticationFilter</filter-class>\n+  </filter>\n+  <filter-mapping>\n+    <filter-name>AuthenticationFilter</filter-name>\n+    <url-pattern>/term/*</url-pattern>\n+  </filter-mapping>\n+\n+\n   <servlet>\n     <servlet-name>TerminalServlet</servlet-name>\n     <servlet-class>io.hawt.web.plugin.karaf.terminal.TerminalServlet</servlet-class>\n@@ -18,5 +56,9 @@\n     <url-pattern>/term/*</url-pattern>\n   </servlet-mapping>\n \n+  <listener>\n+    <listener-class>io.hawt.web.plugin.karaf.terminal.KarafTerminalContextListener</listener-class>\n+  </listener>\n+\n </web-app>\n "
        },
        {
          "filename": "hawtio-karaf-terminal/src/main/webapp/app/js/gogo.js",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -6,7 +6,7 @@\n \n gogo = { };\n \n-gogo.Terminal_ctor = function(div, width, height) {\n+gogo.Terminal_ctor = function(div, width, height, authHeader) {\n \n    var query0 = \"w=\" + width + \"&h=\" + height;\n    var query1 = query0 + \"&k=\";\n@@ -47,6 +47,7 @@ gogo.Terminal_ctor = function(div, width, height) {\n                force = 0;\n            }\n            r.open(\"POST\", \"hawtio-karaf-terminal/term\", true);\n+           r.setRequestHeader('Authorization', authHeader);\n            r.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n            r.onreadystatechange = function () {\n                if (r.readyState == 4) {\n@@ -223,7 +224,7 @@ gogo.Terminal_ctor = function(div, width, height) {\n \n }\n \n-gogo.Terminal = function(div, width, height) {\n-   return new this.Terminal_ctor(div, width, height);\n+gogo.Terminal = function(div, width, height, authHeader) {\n+   return new this.Terminal_ctor(div, width, height, authHeader);\n }\n "
        },
        {
          "filename": "hawtio-karaf-terminal/src/main/webapp/app/js/gogoPlugin.js",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -11,7 +11,7 @@ var Gogo = (function() {\n         when('/gogo', {\n             templateUrl: 'hawtio-karaf-terminal/app/html/gogo.html'\n           });\n-    }).directive('gogoTerminal', function(log) {\n+    }).directive('gogoTerminal', function(log, userDetails) {\n       return {\n         restrict: 'A',\n         link: function(scope, element, attrs) {\n@@ -50,7 +50,9 @@ var Gogo = (function() {\n             'min-height': cssHeight\n           });\n \n-          gogo.Terminal(element.get(0), width, height);\n+          var authHeader = Core.getBasicAuthHeader(userDetails.username, userDetails.password);\n+\n+          gogo.Terminal(element.get(0), width, height, authHeader);\n \n           scope.$on(\"$destroy\", function(e) {\n             document.onkeypress = null;"
        },
        {
          "filename": "hawtio-system/src/main/java/io/hawt/web/AuthenticationFilter.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -105,9 +105,7 @@ public void doFilter(final ServletRequest request, final ServletResponse respons\n             }\n         }\n \n-        boolean doAuthenticate = path.startsWith(\"/auth\") ||\n-                path.startsWith(\"/jolokia\") ||\n-                path.startsWith(\"/upload\");\n+        boolean doAuthenticate = true;\n \n         if (doAuthenticate) {\n             LOG.debug(\"Doing authentication and authorization for path {}\", path);\n@@ -129,7 +127,7 @@ public void execute(Subject subject) throws Exception {\n                     break;\n             }\n         } else {\n-            LOG.debug(\"No authentication needed for path {}\", path);\n+            LOG.warn(\"No authentication needed for path {}\", path);\n             chain.doFilter(request, response);\n         }\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7e0c6303a3fa75e14cae02a280e7d375e3495057",
            "date": "2025-01-09T07:30:44Z",
            "author_login": "tadayosi"
          },
          {
            "sha": "c9ba311a24e70e88f87c9b21a666a30efcce8195",
            "date": "2025-01-09T07:28:47Z",
            "author_login": "tadayosi"
          },
          {
            "sha": "cba5b80f5eabf8d98a4fa4b85d5387b27795fa84",
            "date": "2025-01-06T02:29:21Z",
            "author_login": "tadayosi"
          },
          {
            "sha": "ae33f6d874b4b437aca7259e6e8934bc4de480a2",
            "date": "2025-01-06T03:55:06Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "96b4e888b925a6ac7834685597d576f9303ff177",
            "date": "2025-01-06T03:54:47Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-287",
    "description": "The admin terminal in Hawt.io does not require authentication, which allows remote attackers to execute arbitrary commands via the k parameter.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-12-29T22:29:00.317",
    "last_modified": "2024-11-21T02:01:25.490",
    "fix_date": "2014-03-05T15:48:13Z"
  },
  "references": [
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1072716",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hawtio/hawtio/commit/5289715e4f2657562fdddcbad830a30969b96e1e",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://infocon.org/cons/SyScan/SyScan%202015%20Singapore/SyScan%202015%20Singapore%20presentations/SyScan15%20David%20Jorm%20-%20Finding%20and%20exploiting%20novel%20flaws%20in%20Java%20software.pdf",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1072716",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hawtio/hawtio/commit/5289715e4f2657562fdddcbad830a30969b96e1e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://infocon.org/cons/SyScan/SyScan%202015%20Singapore/SyScan%202015%20Singapore%20presentations/SyScan15%20David%20Jorm%20-%20Finding%20and%20exploiting%20novel%20flaws%20in%20Java%20software.pdf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:12.801031",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "hawtio",
    "owner": "hawtio",
    "created_at": "2012-12-02T11:58:08Z",
    "updated_at": "2025-01-14T08:15:51Z",
    "pushed_at": "2025-01-09T14:16:47Z",
    "size": 107072,
    "stars": 1420,
    "forks": 543,
    "open_issues": 32,
    "watchers": 1420,
    "has_security_policy": false,
    "default_branch": "4.x",
    "protected_branches": [
      "2.x",
      "3.x",
      "4.x",
      "4.x-redhat"
    ],
    "languages": {
      "Java": 970291,
      "Gherkin": 20921,
      "JavaScript": 15240,
      "Shell": 7015,
      "TypeScript": 2186,
      "HTML": 1713,
      "Dockerfile": 1017,
      "CSS": 580,
      "XSLT": 564,
      "Groovy": 362
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:56:25.166676"
  }
}