{
  "cve_id": "CVE-2014-0156",
  "github_data": {
    "repository": "ManageIQ/awesome_spawn",
    "fix_commit": "e524f85f1c6e292ef7d117d7818521307ac269ff",
    "related_commits": [
      "e524f85f1c6e292ef7d117d7818521307ac269ff",
      "e524f85f1c6e292ef7d117d7818521307ac269ff"
    ],
    "patch_url": "https://github.com/ManageIQ/awesome_spawn/commit/e524f85f1c6e292ef7d117d7818521307ac269ff.patch",
    "fix_commit_details": {
      "sha": "e524f85f1c6e292ef7d117d7818521307ac269ff",
      "commit_date": "2014-06-07T21:01:21Z",
      "author": {
        "login": "Fryguy",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Separate command line building and sanitizing into its own class.",
        "length": 65,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 267,
        "additions": 150,
        "deletions": 117
      },
      "files": [
        {
          "filename": "lib/awesome_spawn.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 50,
          "patch": "@@ -1,9 +1,9 @@\n require \"awesome_spawn/version\"\n+require \"awesome_spawn/command_line_builder\"\n require \"awesome_spawn/command_result\"\n require \"awesome_spawn/command_result_error\"\n require \"awesome_spawn/no_such_file_error\"\n \n-require \"shellwords\"\n require \"open3\"\n \n module AwesomeSpawn\n@@ -100,60 +100,13 @@ def run!(command, options = {})\n     command_result\n   end\n \n-  # Build the full command line.\n-  #\n-  # @param [String] command The command to run\n-  # @param [Hash,Array] params Optional command line parameters. They can\n-  #   be passed as a Hash or associative Array. The values are sanitized to\n-  #   prevent command line injection.  Keys as symbols are prefixed with `--`,\n-  #   and `_` is replaced with `-`.\n-  #\n-  #   - `{:key => \"value\"}`            generates `--key value`\n-  #   - `{\"--key\" => \"value\"}`         generates `--key value`\n-  #   - `{:key= => \"value\"}`           generates `--key=value`\n-  #   - `{\"--key=\" => \"value\"}`        generates `--key=value`\n-  #   - `{:key_name => \"value\"}`       generates `--key-name value`\n-  #   - `{:key => nil}`                generates `--key`\n-  #   - `{\"-f\" => [\"file1\", \"file2\"]}` generates `-f file1 file2`\n-  #   - `{nil => [\"file1\", \"file2\"]}`  generates `file1 file2`\n-  #\n-  # @return [String] The full command line\n+  # (see CommandLineBuilder#build)\n   def build_command_line(command, params = nil)\n-    return command.to_s if params.nil? || params.empty?\n-    \"#{command} #{assemble_params(sanitize(params))}\"\n+    CommandLineBuilder.new.build(command, params)\n   end\n \n   private\n \n-  def sanitize(params)\n-    return [] if params.nil? || params.empty?\n-    params.collect do |k, v|\n-      [sanitize_key(k), sanitize_value(v)]\n-    end\n-  end\n-\n-  def sanitize_key(key)\n-    case key\n-    when Symbol then \"--#{key.to_s.tr(\"_\", \"-\")}\"\n-    else             key\n-    end\n-  end\n-\n-  def sanitize_value(value)\n-    case value\n-    when Array    then value.collect { |i| i.to_s.shellescape }\n-    when NilClass then value\n-    else               value.to_s.shellescape\n-    end\n-  end\n-\n-  def assemble_params(sanitized_params)\n-    sanitized_params.collect do |pair|\n-      pair_joiner = pair.first.to_s.end_with?(\"=\") ? \"\" : \" \"\n-      pair.flatten.compact.join(pair_joiner)\n-    end.join(\" \")\n-  end\n-\n   def launch(command, in_data, spawn_options = {})\n     spawn_options = spawn_options.merge(:stdin_data => in_data) if in_data\n     output, error, status = Open3.capture3(command, spawn_options)"
        },
        {
          "filename": "lib/awesome_spawn/command_line_builder.rb",
          "status": "added",
          "additions": 59,
          "deletions": 0,
          "patch": "@@ -0,0 +1,59 @@\n+require \"shellwords\"\n+\n+module AwesomeSpawn\n+  class CommandLineBuilder\n+    # Build the full command line.\n+    #\n+    # @param [String] command The command to run\n+    # @param [Hash,Array] params Optional command line parameters. They can\n+    #   be passed as a Hash or associative Array. The values are sanitized to\n+    #   prevent command line injection.  Keys as symbols are prefixed with `--`,\n+    #   and `_` is replaced with `-`.\n+    #\n+    #   - `{:key => \"value\"}`            generates `--key value`\n+    #   - `{\"--key\" => \"value\"}`         generates `--key value`\n+    #   - `{:key= => \"value\"}`           generates `--key=value`\n+    #   - `{\"--key=\" => \"value\"}`        generates `--key=value`\n+    #   - `{:key_name => \"value\"}`       generates `--key-name value`\n+    #   - `{:key => nil}`                generates `--key`\n+    #   - `{\"-f\" => [\"file1\", \"file2\"]}` generates `-f file1 file2`\n+    #   - `{nil => [\"file1\", \"file2\"]}`  generates `file1 file2`\n+    #\n+    # @return [String] The full command line\n+    def build(command, params = nil)\n+      return command.to_s if params.nil? || params.empty?\n+      \"#{command} #{assemble_params(sanitize(params))}\"\n+    end\n+\n+    private\n+\n+    def sanitize(params)\n+      return [] if params.nil? || params.empty?\n+      params.collect do |k, v|\n+        [sanitize_key(k), sanitize_value(v)]\n+      end\n+    end\n+\n+    def sanitize_key(key)\n+      case key\n+      when Symbol then \"--#{key.to_s.tr(\"_\", \"-\")}\"\n+      else             key\n+      end\n+    end\n+\n+    def sanitize_value(value)\n+      case value\n+      when Array    then value.collect { |i| i.to_s.shellescape }\n+      when NilClass then value\n+      else               value.to_s.shellescape\n+      end\n+    end\n+\n+    def assemble_params(sanitized_params)\n+      sanitized_params.collect do |pair|\n+        pair_joiner = pair.first.to_s.end_with?(\"=\") ? \"\" : \" \"\n+        pair.flatten.compact.join(pair_joiner)\n+      end.join(\" \")\n+    end\n+  end\n+end"
        },
        {
          "filename": "spec/awesome_spawn_spec.rb",
          "status": "modified",
          "additions": 0,
          "deletions": 67,
          "patch": "@@ -128,71 +128,4 @@\n       let(:run_method) {\"run!\"}\n     end\n   end\n-\n-  context \".build_command_line\" do\n-    it \"sanitizes crazy params\" do\n-      cl = subject.build_command_line(\"true\", modified_params)\n-      expect(cl).to eq \"true --user bob --pass P@\\\\$sw0\\\\^\\\\&\\\\ \\\\|\\\\<\\\\>/-\\\\+\\\\*d\\\\% --db --desc=Some\\\\ Description --symkey --symkey-dash pkg1 some\\\\ pkg --pool 123 --pool 456\"\n-    end\n-\n-    it \"handles Symbol keys\" do\n-      cl = subject.build_command_line(\"true\", :abc => \"def\")\n-      expect(cl).to eq \"true --abc def\"\n-    end\n-\n-    it \"handles Symbol keys with tailing '='\" do\n-      cl = subject.build_command_line(\"true\", :abc= => \"def\")\n-      expect(cl).to eq \"true --abc=def\"\n-    end\n-\n-    it \"handles Symbol keys with underscore\" do\n-      cl = subject.build_command_line(\"true\", :abc_def => \"ghi\")\n-      expect(cl).to eq \"true --abc-def ghi\"\n-    end\n-\n-    it \"handles Symbol keys with underscore and tailing '='\" do\n-      cl = subject.build_command_line(\"true\", :abc_def= => \"ghi\")\n-      expect(cl).to eq \"true --abc-def=ghi\"\n-    end\n-\n-    it \"sanitizes Fixnum array param value\" do\n-      cl = subject.build_command_line(\"true\", nil => [1])\n-      expect(cl).to eq \"true 1\"\n-    end\n-\n-    it \"sanitizes Pathname param value\" do\n-      cl = subject.build_command_line(\"true\", nil => [Pathname.new(\"/usr/bin/ruby\")])\n-      expect(cl).to eq \"true /usr/bin/ruby\"\n-    end\n-\n-    it \"sanitizes Pathname param key\" do\n-      cl = subject.build_command_line(\"true\", Pathname.new(\"/usr/bin/ruby\") => nil)\n-      expect(cl).to eq \"true /usr/bin/ruby\"\n-    end\n-\n-    it \"with params as empty Hash\" do\n-      cl = subject.build_command_line(\"true\", {})\n-      expect(cl).to eq \"true\"\n-    end\n-\n-    it \"with params as nil\" do\n-      cl = subject.build_command_line(\"true\", nil)\n-      expect(cl).to eq \"true\"\n-    end\n-\n-    it \"without params\" do\n-      cl = subject.build_command_line(\"true\")\n-      expect(cl).to eq \"true\"\n-    end\n-\n-    it \"with Pathname command\" do\n-      cl = subject.build_command_line(Pathname.new(\"/usr/bin/ruby\"))\n-      expect(cl).to eq \"/usr/bin/ruby\"\n-    end\n-\n-    it \"with Pathname command and params\" do\n-      cl = subject.build_command_line(Pathname.new(\"/usr/bin/ruby\"), \"-v\" => nil)\n-      expect(cl).to eq \"/usr/bin/ruby -v\"\n-    end\n-  end\n end"
        },
        {
          "filename": "spec/command_line_builder_spec.rb",
          "status": "added",
          "additions": 88,
          "deletions": 0,
          "patch": "@@ -0,0 +1,88 @@\n+require 'spec_helper'\n+\n+describe AwesomeSpawn::CommandLineBuilder do\n+  subject { described_class.new }\n+\n+  let(:params) do\n+    {\n+      \"--user\"     => \"bob\",\n+      \"--pass\"     => \"P@$sw0^& |<>/-+*d%\",\n+      \"--db\"       => nil,\n+      \"--desc=\"    => \"Some Description\",\n+      :symkey      => nil,\n+      :symkey_dash => nil,\n+      nil          => [\"pkg1\", \"some pkg\"]\n+    }\n+  end\n+\n+  let (:modified_params) do\n+    params.to_a + [123, 456].collect {|pool| [\"--pool\", pool]}\n+  end\n+\n+  context \"#build\" do\n+    it \"sanitizes crazy params\" do\n+      cl = subject.build(\"true\", modified_params)\n+      expect(cl).to eq \"true --user bob --pass P@\\\\$sw0\\\\^\\\\&\\\\ \\\\|\\\\<\\\\>/-\\\\+\\\\*d\\\\% --db --desc=Some\\\\ Description --symkey --symkey-dash pkg1 some\\\\ pkg --pool 123 --pool 456\"\n+    end\n+\n+    it \"handles Symbol keys\" do\n+      cl = subject.build(\"true\", :abc => \"def\")\n+      expect(cl).to eq \"true --abc def\"\n+    end\n+\n+    it \"handles Symbol keys with tailing '='\" do\n+      cl = subject.build(\"true\", :abc= => \"def\")\n+      expect(cl).to eq \"true --abc=def\"\n+    end\n+\n+    it \"handles Symbol keys with underscore\" do\n+      cl = subject.build(\"true\", :abc_def => \"ghi\")\n+      expect(cl).to eq \"true --abc-def ghi\"\n+    end\n+\n+    it \"handles Symbol keys with underscore and tailing '='\" do\n+      cl = subject.build(\"true\", :abc_def= => \"ghi\")\n+      expect(cl).to eq \"true --abc-def=ghi\"\n+    end\n+\n+    it \"sanitizes Fixnum array param value\" do\n+      cl = subject.build(\"true\", nil => [1])\n+      expect(cl).to eq \"true 1\"\n+    end\n+\n+    it \"sanitizes Pathname param value\" do\n+      cl = subject.build(\"true\", nil => [Pathname.new(\"/usr/bin/ruby\")])\n+      expect(cl).to eq \"true /usr/bin/ruby\"\n+    end\n+\n+    it \"sanitizes Pathname param key\" do\n+      cl = subject.build(\"true\", Pathname.new(\"/usr/bin/ruby\") => nil)\n+      expect(cl).to eq \"true /usr/bin/ruby\"\n+    end\n+\n+    it \"with params as empty Hash\" do\n+      cl = subject.build(\"true\", {})\n+      expect(cl).to eq \"true\"\n+    end\n+\n+    it \"with params as nil\" do\n+      cl = subject.build(\"true\", nil)\n+      expect(cl).to eq \"true\"\n+    end\n+\n+    it \"without params\" do\n+      cl = subject.build(\"true\")\n+      expect(cl).to eq \"true\"\n+    end\n+\n+    it \"with Pathname command\" do\n+      cl = subject.build(Pathname.new(\"/usr/bin/ruby\"))\n+      expect(cl).to eq \"/usr/bin/ruby\"\n+    end\n+\n+    it \"with Pathname command and params\" do\n+      cl = subject.build(Pathname.new(\"/usr/bin/ruby\"), \"-v\" => nil)\n+      expect(cl).to eq \"/usr/bin/ruby -v\"\n+    end\n+  end\n+end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "92c17baab7b669448a66185b3ce73490d3197676",
            "date": "2024-08-21T20:44:40Z",
            "author_login": "bdunne"
          },
          {
            "sha": "704605b35e9f9d2e861cd365192d3302b67a4b99",
            "date": "2024-08-21T13:40:50Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "e8909cef9d259e61aa962f2e4dd933c4e21af7dd",
            "date": "2024-08-06T19:20:21Z",
            "author_login": "Fryguy"
          },
          {
            "sha": "50bda6b88d7fb992d63538f75c4548ffaf9073f1",
            "date": "2024-08-02T17:37:22Z",
            "author_login": "jrafanie"
          },
          {
            "sha": "adb7794fe82e4c7e3391639eb67d3e92726dfa6d",
            "date": "2024-06-12T15:48:08Z",
            "author_login": "Fryguy"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "Awesome spawn contains OS command injection vulnerability, which allows execution of additional commands passed to Awesome spawn as arguments. If untrusted input was included in command arguments, attacker could use this flaw to execute arbitrary command.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-30T21:15:10.373",
    "last_modified": "2024-11-21T02:01:29.823",
    "fix_date": "2014-06-07T21:01:21Z"
  },
  "references": [
    {
      "url": "https://github.com/ManageIQ/awesome_spawn/commit/e524f85f1c6e292ef7d117d7818521307ac269ff",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://rubysec.com/advisories/CVE-2014-0156/",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ManageIQ/awesome_spawn/commit/e524f85f1c6e292ef7d117d7818521307ac269ff",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://rubysec.com/advisories/CVE-2014-0156/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.503027",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "awesome_spawn",
    "owner": "ManageIQ",
    "created_at": "2014-01-04T22:13:40Z",
    "updated_at": "2024-12-13T16:27:49Z",
    "pushed_at": "2024-08-21T20:44:44Z",
    "size": 113,
    "stars": 9,
    "forks": 16,
    "open_issues": 4,
    "watchers": 9,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Ruby": 36205
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T22:27:36.930335"
  }
}