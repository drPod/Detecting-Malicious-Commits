{
  "cve_id": "CVE-2014-0483",
  "github_data": {
    "repository": "django/django",
    "fix_commit": "2b31342cdf14fc20e07c43d258f1e7334ad664a6",
    "related_commits": [
      "2b31342cdf14fc20e07c43d258f1e7334ad664a6",
      "2b31342cdf14fc20e07c43d258f1e7334ad664a6"
    ],
    "patch_url": "https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6.patch",
    "fix_commit_details": {
      "sha": "2b31342cdf14fc20e07c43d258f1e7334ad664a6",
      "commit_date": "2014-08-07T04:18:10Z",
      "author": {
        "login": "charettes",
        "type": "User",
        "stats": {
          "total_commits": 713,
          "average_weekly_commits": 0.6997055937193327,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 312
        }
      },
      "commit_message": {
        "title": "[1.7.x] Prevented data leakage in contrib.admin via query string manipulation.",
        "length": 133,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 122,
        "additions": 115,
        "deletions": 7
      },
      "files": [
        {
          "filename": "django/contrib/admin/exceptions.py",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -4,3 +4,8 @@\n class DisallowedModelAdminLookup(SuspiciousOperation):\n     \"\"\"Invalid filter was passed to admin view via URL querystring\"\"\"\n     pass\n+\n+\n+class DisallowedModelAdminToField(SuspiciousOperation):\n+    \"\"\"Invalid to_field was passed to admin view via URL query string\"\"\"\n+    pass"
        },
        {
          "filename": "django/contrib/admin/options.py",
          "status": "modified",
          "additions": 24,
          "deletions": 2,
          "patch": "@@ -11,6 +11,7 @@\n from django.contrib.admin import validation\n from django.contrib.admin.checks import (BaseModelAdminChecks, ModelAdminChecks,\n     InlineModelAdminChecks)\n+from django.contrib.admin.exceptions import DisallowedModelAdminToField\n from django.contrib.admin.utils import (quote, unquote, flatten_fieldsets,\n     get_deleted_objects, model_format_dict, NestedObjects,\n     lookup_needs_distinct)\n@@ -434,6 +435,24 @@ def lookup_allowed(self, lookup, value):\n                 valid_lookups.append(filter_item)\n         return clean_lookup in valid_lookups\n \n+    def to_field_allowed(self, request, to_field):\n+        opts = self.model._meta\n+\n+        try:\n+            field = opts.get_field(to_field)\n+        except FieldDoesNotExist:\n+            return False\n+\n+        # Make sure at least one of the models registered for this site\n+        # references this field.\n+        registered_models = self.admin_site._registry\n+        for related_object in opts.get_all_related_objects():\n+            if (related_object.model in registered_models and\n+                    field in related_object.field.foreign_related_fields):\n+                return True\n+\n+        return False\n+\n     def has_add_permission(self, request):\n         \"\"\"\n         Returns True if the given request has permission to add an object.\n@@ -1325,6 +1344,10 @@ def get_changeform_initial_data(self, request):\n     @transaction.atomic\n     def changeform_view(self, request, object_id=None, form_url='', extra_context=None):\n \n+        to_field = request.POST.get(TO_FIELD_VAR, request.GET.get(TO_FIELD_VAR))\n+        if to_field and not self.to_field_allowed(request, to_field):\n+            raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)\n+\n         model = self.model\n         opts = model._meta\n         add = object_id is None\n@@ -1397,8 +1420,7 @@ def changeform_view(self, request, object_id=None, form_url='', extra_context=No\n             original=obj,\n             is_popup=(IS_POPUP_VAR in request.POST or\n                       IS_POPUP_VAR in request.GET),\n-            to_field=request.POST.get(TO_FIELD_VAR,\n-                                      request.GET.get(TO_FIELD_VAR)),\n+            to_field=to_field,\n             media=media,\n             inline_admin_formsets=inline_formsets,\n             errors=helpers.AdminErrorList(form, formsets),"
        },
        {
          "filename": "django/contrib/admin/views/main.py",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -14,7 +14,9 @@\n from django.utils.http import urlencode\n \n from django.contrib.admin import FieldListFilter\n-from django.contrib.admin.exceptions import DisallowedModelAdminLookup\n+from django.contrib.admin.exceptions import (\n+    DisallowedModelAdminLookup, DisallowedModelAdminToField,\n+)\n from django.contrib.admin.options import IncorrectLookupParameters, IS_POPUP_VAR, TO_FIELD_VAR\n from django.contrib.admin.utils import (quote, get_fields_from_path,\n     lookup_needs_distinct, prepare_lookup_value)\n@@ -89,7 +91,10 @@ def __init__(self, request, model, list_display, list_display_links,\n             self.page_num = 0\n         self.show_all = ALL_VAR in request.GET\n         self.is_popup = _is_changelist_popup(request)\n-        self.to_field = request.GET.get(TO_FIELD_VAR)\n+        to_field = request.GET.get(TO_FIELD_VAR)\n+        if to_field and not model_admin.to_field_allowed(request, to_field):\n+            raise DisallowedModelAdminToField(\"The field %s cannot be referenced.\" % to_field)\n+        self.to_field = to_field\n         self.params = dict(request.GET.items())\n         if PAGE_VAR in self.params:\n             del self.params[PAGE_VAR]"
        },
        {
          "filename": "docs/ref/exceptions.txt",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -56,6 +56,7 @@ SuspiciousOperation\n \n     * DisallowedHost\n     * DisallowedModelAdminLookup\n+    * DisallowedModelAdminToField\n     * DisallowedRedirect\n     * InvalidSessionKey\n     * SuspiciousFileOperation"
        },
        {
          "filename": "docs/releases/1.4.14.txt",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -47,3 +47,18 @@ and the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header between\n requests without an intervening logout could result in the prior user's session\n being co-opted by the subsequent user. The middleware now logs the user out on\n a failed login attempt.\n+\n+Data leakage via query string manipulation in ``contrib.admin``\n+===============================================================\n+\n+In older versions of Django it was possible to reveal any field's data by\n+modifying the \"popup\" and \"to_field\" parameters of the query string on an admin\n+change form page. For example, requesting a URL like\n+``/admin/auth/user/?pop=1&t=password`` and viewing the page's HTML allowed\n+viewing the password hash of each user. While the admin requires users to have\n+permissions to view the change form pages in the first place, this could leak\n+data if you rely on users having access to view only certain fields on a model.\n+\n+To address the issue, an exception will now be raised if a ``to_field`` value\n+that isn't a related field to a model that has been registered with the admin\n+is specified."
        },
        {
          "filename": "docs/releases/1.5.9.txt",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -47,3 +47,18 @@ and the ``RemoteUserBackend``, a change to the ``REMOTE_USER`` header between\n requests without an intervening logout could result in the prior user's session\n being co-opted by the subsequent user. The middleware now logs the user out on\n a failed login attempt.\n+\n+Data leakage via query string manipulation in ``contrib.admin``\n+===============================================================\n+\n+In older versions of Django it was possible to reveal any field's data by\n+modifying the \"popup\" and \"to_field\" parameters of the query string on an admin\n+change form page. For example, requesting a URL like\n+``/admin/auth/user/?pop=1&t=password`` and viewing the page's HTML allowed\n+viewing the password hash of each user. While the admin requires users to have\n+permissions to view the change form pages in the first place, this could leak\n+data if you rely on users having access to view only certain fields on a model.\n+\n+To address the issue, an exception will now be raised if a ``to_field`` value\n+that isn't a related field to a model that has been registered with the admin\n+is specified."
        },
        {
          "filename": "docs/releases/1.6.6.txt",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -48,6 +48,21 @@ requests without an intervening logout could result in the prior user's session\n being co-opted by the subsequent user. The middleware now logs the user out on\n a failed login attempt.\n \n+Data leakage via query string manipulation in ``contrib.admin``\n+===============================================================\n+\n+In older versions of Django it was possible to reveal any field's data by\n+modifying the \"popup\" and \"to_field\" parameters of the query string on an admin\n+change form page. For example, requesting a URL like\n+``/admin/auth/user/?_popup=1&t=password`` and viewing the page's HTML allowed\n+viewing the password hash of each user. While the admin requires users to have\n+permissions to view the change form pages in the first place, this could leak\n+data if you rely on users having access to view only certain fields on a model.\n+\n+To address the issue, an exception will now be raised if a ``to_field`` value\n+that isn't a related field to a model that has been registered with the admin\n+is specified.\n+\n Bugfixes\n ========\n "
        },
        {
          "filename": "tests/admin_views/tests.py",
          "status": "modified",
          "additions": 33,
          "deletions": 3,
          "patch": "@@ -18,6 +18,7 @@\n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.helpers import ACTION_CHECKBOX_NAME\n from django.contrib.admin.models import LogEntry, DELETION\n+from django.contrib.admin.options import TO_FIELD_VAR\n from django.contrib.admin.templatetags.admin_static import static\n from django.contrib.admin.templatetags.admin_urls import add_preserved_filters\n from django.contrib.admin.tests import AdminSeleniumWebDriverTestCase\n@@ -599,6 +600,36 @@ def test_disallowed_filtering(self):\n         response = self.client.get(\"/test_admin/admin/admin_views/workhour/?employee__person_ptr__exact=%d\" % e1.pk)\n         self.assertEqual(response.status_code, 200)\n \n+    def test_disallowed_to_field(self):\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'missing_field'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        # Specifying a field that is not refered by any other model registered\n+        # to this admin site should raise an exception.\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        # Specifying a field referenced by another model should be allowed.\n+        response = self.client.get(\"/test_admin/admin/admin_views/section/\", {TO_FIELD_VAR: 'id'})\n+        self.assertEqual(response.status_code, 200)\n+\n+        # We also want to prevent the add and change view from leaking a\n+        # disallowed field value.\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.post(\"/test_admin/admin/admin_views/section/add/\", {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n+        section = Section.objects.create()\n+        with patch_logger('django.security.DisallowedModelAdminToField', 'error') as calls:\n+            response = self.client.post(\"/test_admin/admin/admin_views/section/%d/\" % section.pk, {TO_FIELD_VAR: 'name'})\n+            self.assertEqual(response.status_code, 400)\n+            self.assertEqual(len(calls), 1)\n+\n     def test_allowed_filtering_15103(self):\n         \"\"\"\n         Regressions test for ticket 15103 - filtering on fields defined in a\n@@ -2310,10 +2341,9 @@ def test_with_fk_to_field(self):\n         \"\"\"Ensure that the to_field GET parameter is preserved when a search\n         is performed. Refs #10918.\n         \"\"\"\n-        from django.contrib.admin.views.main import TO_FIELD_VAR\n-        response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=username' % TO_FIELD_VAR)\n+        response = self.client.get('/test_admin/admin/auth/user/?q=joe&%s=id' % TO_FIELD_VAR)\n         self.assertContains(response, \"\\n1 user\\n\")\n-        self.assertContains(response, '<input type=\"hidden\" name=\"_to_field\" value=\"username\"/>', html=True)\n+        self.assertContains(response, '<input type=\"hidden\" name=\"%s\" value=\"id\"/>' % TO_FIELD_VAR, html=True)\n \n     def test_exact_matches(self):\n         response = self.client.get('/test_admin/admin/admin_views/recommendation/?q=bar')"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9a2dd9789a2edeed7344a8ec0d17142ad27443a1",
            "date": "2025-01-14T11:33:03Z",
            "author_login": "nessita"
          },
          {
            "sha": "0a341125d1f6ea8e5e80522a98725f906fb08350",
            "date": "2025-01-13T15:53:48Z",
            "author_login": "felixxm"
          },
          {
            "sha": "23c6effac0c39669e17904165c9762f24b010cc5",
            "date": "2025-01-13T11:01:49Z",
            "author_login": "sarahboyce"
          },
          {
            "sha": "d83fb782d33aa7aaa1b2c995c648a59eddb46047",
            "date": "2025-01-13T11:33:47Z",
            "author_login": "csirmazbendeguz"
          },
          {
            "sha": "bf7b17d16d3978b2e1cee4a0f7ce8840bd1a8dc4",
            "date": "2025-01-09T12:37:08Z",
            "author_login": "sarahboyce"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-264",
    "description": "The administrative interface (contrib.admin) in Django before 1.4.14, 1.5.x before 1.5.9, 1.6.x before 1.6.6, and 1.7 before release candidate 3 does not check if a field represents a relationship between models, which allows remote authenticated users to obtain sensitive information via a to_field parameter in a popup action to an admin change form page, as demonstrated by a /admin/auth/user/?pop=1&t=password URI.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2014-08-26T14:55:05.347",
    "last_modified": "2024-11-21T02:02:13.800",
    "fix_date": "2014-08-07T04:18:10Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2014-09/msg00023.html",
      "source": "security@debian.org",
      "tags": []
    },
    {
      "url": "http://secunia.com/advisories/59782",
      "source": "security@debian.org",
      "tags": []
    },
    {
      "url": "http://secunia.com/advisories/61276",
      "source": "security@debian.org",
      "tags": []
    },
    {
      "url": "http://secunia.com/advisories/61281",
      "source": "security@debian.org",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2014/dsa-3010",
      "source": "security@debian.org",
      "tags": []
    },
    {
      "url": "https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6",
      "source": "security@debian.org",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://www.djangoproject.com/weblog/2014/aug/20/security/",
      "source": "security@debian.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2014-09/msg00023.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://secunia.com/advisories/59782",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://secunia.com/advisories/61276",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://secunia.com/advisories/61281",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2014/dsa-3010",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://www.djangoproject.com/weblog/2014/aug/20/security/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:25.524792",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "django",
    "owner": "django",
    "created_at": "2012-04-28T02:47:18Z",
    "updated_at": "2025-01-14T13:27:58Z",
    "pushed_at": "2025-01-14T11:34:55Z",
    "size": 264981,
    "stars": 81851,
    "forks": 32045,
    "open_issues": 301,
    "watchers": 81851,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "stable/0.90.x",
      "stable/0.91.x",
      "stable/0.95.x",
      "stable/0.96.x",
      "stable/1.0.x",
      "stable/1.1.x",
      "stable/1.2.x",
      "stable/1.3.x",
      "stable/1.4.x",
      "stable/1.5.x",
      "stable/1.6.x",
      "stable/1.7.x",
      "stable/1.8.x",
      "stable/1.9.x",
      "stable/1.10.x",
      "stable/1.11.x",
      "stable/2.0.x",
      "stable/2.1.x",
      "stable/2.2.x",
      "stable/3.0.x",
      "stable/3.1.x",
      "stable/3.2.x",
      "stable/4.0.x",
      "stable/4.1.x",
      "stable/4.2.x",
      "stable/5.0.x",
      "stable/5.1.x"
    ],
    "languages": {
      "Python": 17607947,
      "HTML": 250858,
      "JavaScript": 158876,
      "CSS": 92030,
      "Smarty": 392,
      "Procfile": 47
    },
    "commit_activity": {
      "total_commits_last_year": 938,
      "avg_commits_per_week": 18.03846153846154,
      "days_active_last_year": 299
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:28:27.491590"
  }
}