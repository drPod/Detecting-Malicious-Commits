{
  "cve_id": "CVE-2014-125028",
  "github_data": {
    "repository": "valtech/valtech-idp-test-clients",
    "fix_commit": "f1e7b3d431c8681ec46445557125890c14fa295f",
    "related_commits": [
      "f1e7b3d431c8681ec46445557125890c14fa295f",
      "f1e7b3d431c8681ec46445557125890c14fa295f"
    ],
    "patch_url": "https://github.com/valtech/valtech-idp-test-clients/commit/f1e7b3d431c8681ec46445557125890c14fa295f.patch",
    "fix_commit_details": {
      "sha": "f1e7b3d431c8681ec46445557125890c14fa295f",
      "commit_date": "2014-09-25T13:52:10Z",
      "author": {
        "login": "joscarsson",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add CSRF protection using state to python-flask",
        "length": 47,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 28,
        "additions": 23,
        "deletions": 5
      },
      "files": [
        {
          "filename": "python-flask/main.py",
          "status": "modified",
          "additions": 23,
          "deletions": 5,
          "patch": "@@ -1,7 +1,8 @@\n-from flask import Flask, render_template, request, session, redirect\n+from flask import Flask, render_template, request, session, redirect, make_response\n import os, sys\n import requests\n import jwt\n+import uuid\n \n CLIENT_ID = 'valtech.idp.testclient.local'\n CLIENT_SECRET = os.environ.get('CLIENT_SECRET')\n@@ -27,12 +28,27 @@ def index():\n @app.route('/sign-in')\n def sign_in():\n   if session.get('signed_in') != None: return redirect('/')\n-  authorize_url = 'https://stage-id.valtech.com/oauth2/authorize?response_type=%s&client_id=%s&scope=%s' % ('code', CLIENT_ID, 'email openid')\n-  return redirect(authorize_url)\n+\n+  # state is used for CSRF protection. the client generates a value and stores it\n+  # for the user somewhere (in a cookie or in a session). it then passes the same value\n+  # in the state parameter in the authorize request. IDP will mirror the state value\n+  # to the redirect URI. the client should then make sure the state value it has stored\n+  # matches what it receives in the callback\n+  state = str(uuid.uuid4())\n+\n+  authorize_url = 'https://stage-id.valtech.com/oauth2/authorize?response_type=%s&client_id=%s&scope=%s&state=%s' % ('code', CLIENT_ID, 'email openid', state)\n+\n+  resp = make_response(redirect(authorize_url))\n+  resp.set_cookie('python-flask-csrf', state)\n+  return resp\n \n @app.route('/sign-in/callback')\n def sign_in_callback():\n   code = request.args.get('code')\n+  state = request.args.get('state')\n+\n+  if state != request.cookies.get('python-flask-csrf'):\n+    raise Exception(\"Possible CSRF detected (state does not match stored state)\")\n \n   # as both scope openid and email was requested on authorize request above, the client\n   # will receive both an access_token (according to OAuth 2) AND an id_token (according to OpenID Connect)\n@@ -49,8 +65,10 @@ def sign_in_callback():\n \n   session['signed_in'] = True\n   session['email'] = user_info['email']\n-  \n-  return redirect('/')\n+\n+  resp = make_response(redirect('/'))\n+  resp.set_cookie('python-flask-csrf', '', expires=0)\n+  return resp\n \n @app.route('/sign-out')\n def sign_out():"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ee619d887fc51055b072f5477b8cee97f03a1bc6",
            "date": "2020-07-28T12:05:24Z",
            "author_login": "jonekdahl"
          },
          {
            "sha": "5c39d17d197ae0dda2f6f6ecb17967f9aa64a5ab",
            "date": "2020-07-28T12:04:28Z",
            "author_login": "jonekdahl"
          },
          {
            "sha": "eb99095e0809fe1d29a933d874cb79a446719cf0",
            "date": "2016-01-23T19:27:55Z",
            "author_login": "jonekdahl"
          },
          {
            "sha": "1cd1618afcf60fcb9ca8e6e731b0d9b23492f15a",
            "date": "2014-09-25T15:12:38Z",
            "author_login": "tgwizard"
          },
          {
            "sha": "343e725ce7badbe619fc6796397353b87b5deaa9",
            "date": "2014-09-25T14:25:12Z",
            "author_login": "joscarsson"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-352",
    "description": "A vulnerability was found in valtech IDP Test Client and classified as problematic. Affected by this issue is some unknown functionality of the file python-flask/main.py. The manipulation leads to cross-site request forgery. The attack may be launched remotely. The name of the patch is f1e7b3d431c8681ec46445557125890c14fa295f. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217148.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-31T20:15:08.507",
    "last_modified": "2024-11-21T02:03:37.917",
    "fix_date": "2014-09-25T13:52:10Z"
  },
  "references": [
    {
      "url": "https://github.com/valtech/valtech-idp-test-clients/commit/f1e7b3d431c8681ec46445557125890c14fa295f",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217148",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217148",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/valtech/valtech-idp-test-clients/commit/f1e7b3d431c8681ec46445557125890c14fa295f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217148",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217148",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.240800",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "valtech-idp-test-clients",
    "owner": "valtech",
    "created_at": "2014-09-08T11:48:34Z",
    "updated_at": "2022-07-11T20:58:32Z",
    "pushed_at": "2023-01-18T23:58:16Z",
    "size": 181,
    "stars": 1,
    "forks": 0,
    "open_issues": 12,
    "watchers": 1,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C#": 13667,
      "CSS": 10512,
      "HTML": 7887,
      "Java": 5867,
      "Python": 4284,
      "JavaScript": 3634,
      "Shell": 3487,
      "Ruby": 3190,
      "Scala": 3079,
      "ASP": 102
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T22:59:41.170931"
  }
}