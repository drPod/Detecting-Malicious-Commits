{
  "cve_id": "CVE-2014-125047",
  "github_data": {
    "repository": "tbezman/school-store",
    "fix_commit": "2957fc97054216d3a393f1775efd01ae2b072001",
    "related_commits": [
      "2957fc97054216d3a393f1775efd01ae2b072001",
      "2957fc97054216d3a393f1775efd01ae2b072001"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "2957fc97054216d3a393f1775efd01ae2b072001",
      "commit_date": "2014-11-24T00:18:29Z",
      "author": {
        "login": "tbezman",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "SQL Injection",
        "length": 76,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 464,
        "additions": 250,
        "deletions": 214
      },
      "files": [
        {
          "filename": "src/com/bezman/background/DailySubmission.java",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -4,6 +4,7 @@\n import org.json.simple.JSONArray;\n import org.json.simple.JSONObject;\n \n+import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Timestamp;\n@@ -116,7 +117,11 @@ public static DailySubmission submissionFromRow(ResultSet resultSet) throws SQLE\n \n         String sales = \"\";\n \n-        ResultSet salesSet = IndexServlet.execQuery(\"select * from sales where date='\" + date + \"'\");\n+        PreparedStatement statement = IndexServlet.connection.prepareStatement(\"select * from sales where date=?\");\n+        statement.setTimestamp(1, date);\n+\n+        ResultSet salesSet = statement.executeQuery();\n+\n         while(salesSet.next()){\n             sales += salesSet.getString(\"sale\") + \",\";\n         }"
        },
        {
          "filename": "src/com/bezman/servlet/Attendance.java",
          "status": "modified",
          "additions": 8,
          "deletions": 23,
          "patch": "@@ -8,8 +8,8 @@\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n-import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n+import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n@@ -45,7 +45,12 @@ public String getAttendanceJSON(Model model, HttpServletRequest request, @Reques\n         System.out.println(month + \"/ \" + day + \"/ \" + year);\n \n         try {\n-            ResultSet resultSet = IndexServlet.execQuery(\"select * from daily where MONTH(date)='\" + month + \"' and DAY(date)='\" + day + \"' and YEAR(date)='\" + year + \"' order by period\");\n+            PreparedStatement statement = IndexServlet.connection.prepareStatement(\"select * from daily where MONTH(date)=? and DAY(date)=? and YEAR(date)=? order by period\");\n+            statement.setString(1, month);\n+            statement.setString(2, day);\n+            statement.setString(3, year);\n+\n+            ResultSet resultSet = statement.executeQuery();\n \n             while(resultSet.next()){\n                 jsonArray.add(resultSet.getString(\"names\") + \";\" + resultSet.getString(\"period\"));\n@@ -61,27 +66,7 @@ public String getAttendanceJSON(Model model, HttpServletRequest request, @Reques\n     @RequestMapping(value = \"/attendance\", method = {RequestMethod.GET})\n     public String getAttendance(Model model, HttpServletRequest request, @RequestParam(value = \"month\", required = false) String month, @RequestParam(value = \"day\", required = false) String day, @RequestParam(value = \"year\", required = false) String year) {\n \n-        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n-        if (cookie != null){\n-            try {\n-                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n-                String username = null;\n-\n-                while(resultSet.next()){\n-                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n-                    username = resultSet.getString(\"username\");\n-                }\n-\n-                System.out.println(\"Username : \" + username);\n-                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n-\n-                while(accountSet.next()){\n-                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n-                }\n-            } catch (SQLException e) {\n-                e.printStackTrace();\n-            }\n-        }\n+        IndexServlet.servletLoginCheck(model, request);\n \n         model.addAttribute(\"namesJSON\", getAttendanceJSON(model, request, month, day, year));\n "
        },
        {
          "filename": "src/com/bezman/servlet/DailyServlet.java",
          "status": "modified",
          "additions": 24,
          "deletions": 32,
          "patch": "@@ -10,8 +10,8 @@\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n-import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n+import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.Comparator;\n@@ -26,40 +26,24 @@ public class DailyServlet {\n     @RequestMapping(value = \"/daily\", method = RequestMethod.GET)\n     public String getDaily(Model model, HttpServletRequest request){\n \n-        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n-        if (cookie != null){\n-            try {\n-                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n-                String username = null;\n+        IndexServlet.servletLoginCheck(model, request);\n \n-                while(resultSet.next()){\n-                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n-                    username = resultSet.getString(\"username\");\n-                }\n-\n-                System.out.println(\"Username : \" + username);\n-                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n-\n-                while(accountSet.next()){\n-                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n-                }\n-\n-                ResultSet itemSet = IndexServlet.execQuery(\"select * from items\");\n-                JSONArray jsonArray = new JSONArray();\n+        try {\n+            ResultSet itemSet = IndexServlet.execQuery(\"select * from items\");\n+            JSONArray jsonArray = new JSONArray();\n \n-                while(itemSet.next()){\n-                    JSONObject jsonObject = new JSONObject();\n+            while (itemSet.next()) {\n+                JSONObject jsonObject = new JSONObject();\n \n-                    jsonObject.put(\"itemName\", itemSet.getString(\"name\"));\n-                    jsonObject.put(\"priceOfItem\", itemSet.getDouble(\"price\"));\n+                jsonObject.put(\"itemName\", itemSet.getString(\"name\"));\n+                jsonObject.put(\"priceOfItem\", itemSet.getDouble(\"price\"));\n \n-                    jsonArray.add(jsonObject);\n-                }\n-\n-                model.addAttribute(\"itemNames\", StringEscapeUtils.escapeJavaScript(jsonArray.toJSONString()));\n-            } catch (SQLException e) {\n-                e.printStackTrace();\n+                jsonArray.add(jsonObject);\n             }\n+\n+            model.addAttribute(\"itemNames\", StringEscapeUtils.escapeJavaScript(jsonArray.toJSONString()));\n+        }catch (SQLException e){\n+            e.printStackTrace();\n         }\n \n         return \"daily\";\n@@ -72,8 +56,16 @@ public String getStudents(Model model, @RequestParam(value = \"period\", required\n         JSONArray jsonArray = new JSONArray();\n \n         try {\n-            String query = period == null ? \"select * from students\" : \"select * from students where period='\" + period + \"' ORDER BY period ASC\";\n-            ResultSet resultSet = IndexServlet.execQuery(query);\n+            PreparedStatement statement;\n+\n+            if (period == null){\n+                statement = IndexServlet.connection.prepareStatement(\"SELECT * FROM students\");\n+            }else{\n+                statement = IndexServlet.connection.prepareStatement(\"SELECT * FROM students WHERE period=? ORDER BY period ASC\");\n+                statement.setString(1, period);\n+            }\n+\n+            ResultSet resultSet = statement.executeQuery();\n \n             while(resultSet.next()){\n                 JSONObject jsonObject = new JSONObject();"
        },
        {
          "filename": "src/com/bezman/servlet/IndexServlet.java",
          "status": "modified",
          "additions": 38,
          "deletions": 22,
          "patch": "@@ -28,26 +28,7 @@ public class IndexServlet {\n     @RequestMapping(value = \"/\",method = RequestMethod.GET)\n     public String processWelcome(Model model, HttpServletRequest request){\n \n-        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n-        if (cookie != null){\n-            try {\n-                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n-                String username = null;\n-\n-                while(resultSet.next()){\n-                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n-                    username = resultSet.getString(\"username\");\n-                }\n-\n-                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n-\n-                while(accountSet.next()){\n-                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n-                }\n-            } catch (SQLException e) {\n-                e.printStackTrace();\n-            }\n-        }\n+        IndexServlet.servletLoginCheck(model, request);\n \n         model.addAttribute(\"motd\", StringEscapeUtils.escapeHtml(Reference.motd).replace(\"\\n\", \"<br/>\"));\n \n@@ -74,7 +55,10 @@ public boolean queryDoesReturn(String query) throws SQLException {\n \n     public static boolean isSessionAdmin(String sessionID){\n         try {\n-            ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + sessionID + \"'\");\n+            PreparedStatement sessionStatement = IndexServlet.connection.prepareStatement(\"SELECT * from sessions WHERE sessionID=?\");\n+            sessionStatement.setString(1, sessionID);\n+\n+            ResultSet resultSet = sessionStatement.executeQuery();\n \n             String username = null;\n \n@@ -85,7 +69,10 @@ public static boolean isSessionAdmin(String sessionID){\n             if(username == null)\n                 return false;\n \n-            ResultSet accountsSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n+            PreparedStatement roleStatement = IndexServlet.connection.prepareStatement(\"SELECT  * from accounts where username=?\");\n+            roleStatement.setString(1, username);\n+\n+            ResultSet accountsSet = roleStatement.executeQuery();\n \n             while(accountsSet.next()){\n                 if (accountsSet.getString(\"role\").equals(\"admin\"))\n@@ -148,4 +135,33 @@ public static Cookie getCookie(Cookie[] cookies, String name){\n \n         return new Cookie(\"12\", \"12\");\n     }\n+\n+    public static void servletLoginCheck(Model model, HttpServletRequest request){\n+        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n+        if (cookie != null){\n+            try {\n+                PreparedStatement statement = IndexServlet.connection.prepareStatement(\"SELECT  * from sessions where sessionID=?\");\n+                statement.setString(1, cookie.getValue());\n+\n+                ResultSet resultSet = statement.executeQuery();\n+                String username = null;\n+\n+                while(resultSet.next()){\n+                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n+                    username = resultSet.getString(\"username\");\n+                }\n+\n+                PreparedStatement roleStatement = IndexServlet.connection.prepareStatement(\"SELECT * from accounts where username=?\");\n+                roleStatement.setString(1, username);\n+\n+                ResultSet accountSet = roleStatement.executeQuery();\n+\n+                while(accountSet.next()){\n+                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n+                }\n+            } catch (SQLException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n }"
        },
        {
          "filename": "src/com/bezman/servlet/ItemRecapServlet.java",
          "status": "modified",
          "additions": 50,
          "deletions": 36,
          "patch": "@@ -10,14 +10,12 @@\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n-import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n+import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Timestamp;\n-import java.util.ArrayList;\n-import java.util.Comparator;\n-import java.util.stream.Collectors;\n+import java.util.*;\n \n /**\n  * Created by Terence on 11/16/2014.\n@@ -29,26 +27,7 @@ public class ItemRecapServlet {\n     @RequestMapping(value = \"/itemrecap\", method = {RequestMethod.GET, RequestMethod.POST})\n     public String getItemRecap(Model model, HttpServletRequest request){\n \n-        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n-        if (cookie != null){\n-            try {\n-                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n-                String username = null;\n-\n-                while(resultSet.next()){\n-                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n-                    username = resultSet.getString(\"username\");\n-                }\n-\n-                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n-\n-                while(accountSet.next()){\n-                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n-                }\n-            } catch (SQLException e) {\n-                e.printStackTrace();\n-            }\n-        }\n+        IndexServlet.servletLoginCheck(model, request);\n \n         return \"itemrecap\";\n     }\n@@ -63,26 +42,61 @@ public String itemRecapJSON(@RequestParam(value = \"month\", required = false) Str\n         ArrayList params = new ArrayList();\n         ArrayList<ItemSale> items = new ArrayList<>();\n \n-        if (month != null)\n-            params.add(\"MONTH(date)='\" + month + \"' \");\n+        HashMap<Integer, String> valueMap = new HashMap<>();\n \n-        if (day != null)\n-            params.add(\"DAY(date)='\" + day + \"' \");\n+        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"America/New_York\"));\n \n-        if (year != null)\n-            params.add(\"YEAR(date)='\" + year + \"' \");\n+        int predCount = 1;\n \n-        if (month == null && day == null && year == null)\n-            query = \"select * from sales\";\n-        else query += params.stream().collect(Collectors.joining(\" and \"));\n+        if (month != null) {\n+            query += \"MONTH(date)=?\";\n+\n+            valueMap.put(predCount, month);\n+\n+            predCount++;\n+        }\n+\n+        if (day != null) {\n+\n+            if (predCount > 1)\n+                query += \" and \";\n+\n+            query += \"DAY(date)=?\";\n+\n+            valueMap.put(predCount, day);\n \n-        if (order == null)\n-            order = \"\";\n+            predCount++;\n+        }\n+\n+        if (year != null) {\n+\n+            if (predCount > 1)\n+                query += \" and \";\n+\n+            query += \"YEAR(date)=?\";\n+\n+            valueMap.put(predCount, year);\n+\n+            predCount++;\n+        }\n+\n+        if (month == null && day == null && year == null)\n+            query = \"SELECT * from sales\";\n \n         System.out.println(query);\n \n         try {\n-            ResultSet resultSet = IndexServlet.execQuery(query);\n+\n+            PreparedStatement statement = IndexServlet.connection.prepareStatement(query);\n+\n+            for(Integer integer : valueMap.keySet()){\n+                statement.setString(integer, valueMap.get(integer));\n+            }\n+\n+            System.out.println(statement.toString());\n+\n+\n+            ResultSet resultSet = statement.executeQuery();\n \n             while(resultSet.next()){\n                 String sale = resultSet.getString(\"sale\");"
        },
        {
          "filename": "src/com/bezman/servlet/ItemSettings.java",
          "status": "modified",
          "additions": 1,
          "deletions": 22,
          "patch": "@@ -10,7 +10,6 @@\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n-import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n@@ -26,27 +25,7 @@ public class ItemSettings {\n     @RequestMapping(value = \"/itemsettings\", method = {RequestMethod.GET})\n     public String ItemSettings(Model model, HttpServletRequest request){\n \n-        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n-        if (cookie != null){\n-            try {\n-                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n-                String username = null;\n-\n-                while(resultSet.next()){\n-                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n-                    username = resultSet.getString(\"username\");\n-                }\n-\n-                System.out.println(\"Username : \" + username);\n-                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n-\n-                while(accountSet.next()){\n-                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n-                }\n-            } catch (SQLException e) {\n-                e.printStackTrace();\n-            }\n-        }\n+        IndexServlet.servletLoginCheck(model, request);\n \n         JSONArray jsonArray = new JSONArray();\n "
        },
        {
          "filename": "src/com/bezman/servlet/Login.java",
          "status": "modified",
          "additions": 16,
          "deletions": 3,
          "patch": "@@ -9,6 +9,7 @@\n \n import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletResponse;\n+import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.Random;\n@@ -27,7 +28,11 @@ public String login(@RequestParam(\"username\") String username, @RequestParam(\"pa\n         JSONObject jsonObject = new JSONObject();\n \n         try {\n-            ResultSet resultSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"' and password='\" + password + \"'\");\n+            PreparedStatement statement = IndexServlet.connection.prepareStatement(\"select * from accounts where username=? and password=?\");\n+            statement.setString(1, username);\n+            statement.setString(2, password);\n+\n+            ResultSet resultSet = statement.executeQuery();\n \n             boolean foundAccount = false;\n \n@@ -38,8 +43,16 @@ public String login(@RequestParam(\"username\") String username, @RequestParam(\"pa\n             if (foundAccount){\n                 String sessionID = getRandomSessionID();\n \n-                IndexServlet.execUpdate(\"delete from sessions where username='\" + username + \"'\");\n-                IndexServlet.execUpdate(\"insert into sessions values('\" + username + \"', '\" + sessionID + \"')\");\n+                PreparedStatement deleteSessions = IndexServlet.connection.prepareStatement(\"DELETE from sessions WHERE username=?\");\n+                deleteSessions.setString(1, username);\n+\n+                deleteSessions.executeUpdate();\n+\n+                PreparedStatement insertSession = IndexServlet.connection.prepareStatement(\"insert into sessions VALUES(?, ?)\");\n+                insertSession.setString(1, username);\n+                insertSession.setString(2, sessionID);\n+\n+                insertSession.executeUpdate();\n \n                 jsonObject.put(\"success\", sessionID);\n                 response.addCookie(new Cookie(\"sessionID\", sessionID));"
        },
        {
          "filename": "src/com/bezman/servlet/MonthlyRecapServlet.java",
          "status": "modified",
          "additions": 54,
          "deletions": 37,
          "patch": "@@ -12,11 +12,13 @@\n \n import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n+import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n+import java.util.HashMap;\n import java.util.stream.Collectors;\n \n /**\n@@ -28,27 +30,7 @@ public class MonthlyRecapServlet {\n \n     @RequestMapping(value = \"/monthlyrecap\", method = {RequestMethod.GET})\n     public String getMonthlyPage(Model model, HttpServletRequest request){\n-        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n-        if (cookie != null){\n-            try {\n-                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n-                String username = null;\n-\n-                while(resultSet.next()){\n-                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n-                    username = resultSet.getString(\"username\");\n-                }\n-\n-                System.out.println(\"Username : \" + username);\n-                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n-\n-                while(accountSet.next()){\n-                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n-                }\n-            } catch (SQLException e) {\n-                e.printStackTrace();\n-            }\n-        }\n+        IndexServlet.servletLoginCheck(model, request);\n \n         return \"monthlyrecap\";\n     }\n@@ -61,18 +43,45 @@ public String getMonthly(@RequestParam(value = \"month\", required = false) String\n         Calendar calendar = Calendar.getInstance();\n         calendar.setTime(new Date());\n \n+        HashMap<Integer, String> valueMap = new HashMap<>();\n+\n         String query = \"select * from daily where \";\n \n         ArrayList params = new ArrayList();\n \n-        if(month != null)\n-            params.add(\"MONTH(date)='\" + month + \"' \");\n+        int predCount = 1;\n+\n+        if (month != null) {\n+            query += \"MONTH(date)=?\";\n+\n+            valueMap.put(predCount, month);\n+\n+            predCount++;\n+        }\n+\n+        if (day != null) {\n+\n+            if (predCount > 1)\n+                query += \" and \";\n+\n+            query += \"DAY(date)=?\";\n+\n+            valueMap.put(predCount, day);\n+\n+            predCount++;\n+        }\n+\n+        if (year != null) {\n+\n+            if (predCount > 1)\n+                query += \" and \";\n \n-        if(day != null)\n-            params.add(\"DAY(date)='\" + day + \"' \");\n+            query += \"YEAR(date)=?\";\n \n-        if(year != null)\n-           params.add(\"YEAR(date)='\" + year +\"' \");\n+            valueMap.put(predCount, year);\n+\n+            predCount++;\n+        }\n \n         if (month == null && day == null && year == null)\n             query = \"select * from daily\";\n@@ -83,17 +92,18 @@ public String getMonthly(@RequestParam(value = \"month\", required = false) String\n \n         query += (\" order by date \" + order);\n \n-        System.out.println(query);\n+        try {\n \n-        ResultSet resultSet = null;\n+            PreparedStatement statement = IndexServlet.connection.prepareStatement(query);\n \n-        try {\n-            resultSet = IndexServlet.execQuery(query);\n-        } catch (SQLException e) {\n-            e.printStackTrace();\n-        }\n+            for(Integer integer : valueMap.keySet()){\n+                statement.setString(integer, valueMap.get(integer));\n+            }\n+\n+            System.out.println(statement);\n+\n+            ResultSet resultSet = statement.executeQuery();\n \n-        try {\n             while(resultSet.next()){\n                 DailySubmission submission = DailySubmission.submissionFromRow(resultSet);\n \n@@ -111,8 +121,15 @@ public String getMonthly(@RequestParam(value = \"month\", required = false) String\n     public String deletePeriodFromDate(@RequestParam(\"date\") String date){\n         JSONObject returnJSON = new JSONObject();\n         try {\n-            IndexServlet.execUpdate(\"delete from daily where date='\" + date + \"'\");\n-            IndexServlet.execUpdate(\"delete from sales where date='\" + date + \"'\");\n+            PreparedStatement deleteDaily = IndexServlet.connection.prepareStatement(\"DELETE from daily where date=?\");\n+            deleteDaily.setString(1, date);\n+\n+            deleteDaily.executeUpdate();\n+\n+            PreparedStatement deleteSales = IndexServlet.connection.prepareStatement(\"DELETE from sales where date=?\");\n+            deleteSales.setString(1, date);\n+\n+            deleteSales.executeUpdate();\n             returnJSON.put(\"success\", \"true\");\n         } catch (SQLException e) {\n             e.printStackTrace();"
        },
        {
          "filename": "src/com/bezman/servlet/StudentSettingsServlet.java",
          "status": "modified",
          "additions": 18,
          "deletions": 26,
          "patch": "@@ -9,9 +9,8 @@\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n-import javax.servlet.http.Cookie;\n import javax.servlet.http.HttpServletRequest;\n-import java.sql.ResultSet;\n+import java.sql.PreparedStatement;\n import java.sql.SQLException;\n \n /**\n@@ -24,27 +23,7 @@ public class StudentSettingsServlet {\n     @RequestMapping(value = \"/studentsettings\", method = {RequestMethod.GET, RequestMethod.POST})\n     public String studentSettings(Model model, HttpServletRequest request){\n \n-        Cookie cookie = IndexServlet.getCookie(request.getCookies(), \"sessionID\");\n-        if (cookie != null){\n-            try {\n-                ResultSet resultSet = IndexServlet.execQuery(\"select * from sessions where sessionID='\" + cookie.getValue() + \"'\");\n-                String username = null;\n-\n-                while(resultSet.next()){\n-                    model.addAttribute(\"username\", resultSet.getString(\"username\"));\n-                    username = resultSet.getString(\"username\");\n-                }\n-\n-                System.out.println(\"Username : \" + username);\n-                ResultSet accountSet = IndexServlet.execQuery(\"select * from accounts where username='\" + username + \"'\");\n-\n-                while(accountSet.next()){\n-                    model.addAttribute(\"role\", accountSet.getString(\"role\"));\n-                }\n-            } catch (SQLException e) {\n-                e.printStackTrace();\n-            }\n-        }\n+        IndexServlet.servletLoginCheck(model, request);\n \n         return \"studentsettings\";\n     }\n@@ -56,7 +35,10 @@ public String removeStudent(@RequestParam(\"name\") String name){\n         JSONObject jsonObject = new JSONObject();\n \n         try {\n-            IndexServlet.execUpdate(\"delete from students where name='\" + name + \"'\");\n+            PreparedStatement statement = IndexServlet.connection.prepareStatement(\"DELETE  from students where name=?\");\n+            statement.setString(1, name);\n+\n+            statement.executeUpdate();\n             jsonObject.put(\"success\", \"true\");\n         } catch (SQLException e) {\n             e.printStackTrace();\n@@ -73,7 +55,11 @@ public String addStudent(@RequestParam(\"name\") String name, @RequestParam(\"perio\n         JSONObject jsonObject = new JSONObject();\n \n         try {\n-            IndexServlet.execUpdate(\"insert into students values('\" + StringEscapeUtils.escapeHtml(name) + \"', '\" + StringEscapeUtils.escapeHtml(period) + \"')\");\n+            PreparedStatement statement = IndexServlet.connection.prepareStatement(\"insert into students VALUES(?, ?)\");\n+            statement.setString(1, StringEscapeUtils.escapeHtml(name));\n+            statement.setString(2, StringEscapeUtils.escapeHtml(period));\n+\n+            statement.executeUpdate();\n             jsonObject.put(\"success\", \"true\");\n         } catch (SQLException e) {\n             e.printStackTrace();\n@@ -90,7 +76,13 @@ public String editStudent(@RequestParam(\"oldName\") String oldName, @RequestParam\n         JSONObject jsonObject = new JSONObject();\n \n         try {\n-            IndexServlet.execUpdate(\"update students set name='\" + StringEscapeUtils.escapeHtml(newName) + \"',period='\" + StringEscapeUtils.escapeHtml(newPeriod) + \"' where name='\" + oldName + \"' and period='\" + oldPeriod + \"'\");\n+            PreparedStatement statement = IndexServlet.connection.prepareStatement(\"update students set name=?, period=? where name=? and period=?\");\n+            statement.setString(1, newName);\n+            statement.setString(2, newPeriod);\n+            statement.setString(3, oldName);\n+            statement.setString(4, oldPeriod);\n+\n+            statement.executeUpdate();\n             jsonObject.put(\"success\", \"true\");\n         } catch (SQLException e) {\n             e.printStackTrace();"
        },
        {
          "filename": "src/com/bezman/servlet/SubmitDaily.java",
          "status": "modified",
          "additions": 35,
          "deletions": 12,
          "patch": "@@ -8,12 +8,12 @@\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n+import java.sql.PreparedStatement;\n import java.sql.SQLException;\n import java.sql.Timestamp;\n-import java.util.Calendar;\n-import java.util.Map;\n-import java.util.TimeZone;\n+import java.util.*;\n import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n \n /**\n  * Created by Terence on 11/9/2014.\n@@ -25,30 +25,53 @@ public class SubmitDaily {\n     @RequestMapping(value = \"/dailysubmit\", method = {RequestMethod.GET, RequestMethod.POST})\n     @ResponseBody\n     public String submit(@RequestParam Map allParams, Model model){\n-        String query = \"insert into daily (date, \";\n-\n         JSONObject jsonObject = new JSONObject();\n \n         String sales = (String) allParams.get(\"sale\");\n         allParams.remove(\"sale\");\n \n+        HashMap<Integer, String> keyMap = new HashMap<>();\n+        HashMap<Integer, String> valueMap = new HashMap<>();\n+\n+        int i = 1;\n+        for(Object obj : allParams.keySet()){\n+            keyMap.put(i, (String) obj);\n+            valueMap.put(i, (String) allParams.get(obj));\n+            i++;\n+        }\n+\n         Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone(\"America/New_York\"));\n         Timestamp timestamp = new Timestamp(calendar.getTime().getTime());\n \n-        String columnsNames = (String) allParams.keySet().stream().collect(Collectors.joining(\", \"));\n-        query += columnsNames;\n-        query += \") values('\" + timestamp + \"', \" + (String) allParams.keySet().stream().map(a -> allParams.get(a)).collect(Collectors.joining(\"', '\", \"'\", \"'\")) + \")\";\n+        String columnNames = (String) keyMap.values().stream().collect(Collectors.joining(\", \"));\n+\n+        ArrayList questionMarks = new ArrayList();\n+        IntStream.range(0, allParams.size()).forEach(a -> questionMarks.add(\"?\"));\n+\n+        String query = \"insert into daily (date, \" + columnNames + \") VALUES('\" + timestamp + \"', \" + questionMarks.stream().collect(Collectors.joining(\", \")) + \")\";\n \n         System.out.println(\"query : \" + query);\n \n         try {\n-            IndexServlet.execUpdate(query);\n+            PreparedStatement statement = IndexServlet.connection.prepareStatement(query);\n+\n+            for(Integer integer: valueMap.keySet()){\n+                statement.setString(integer, valueMap.get(integer));\n+            }\n+\n+            System.out.println(statement);\n+\n+            statement.executeUpdate();\n \n             System.out.println(sales);\n             for(String currentSale : sales.split(\",\")) {\n-                query = \"insert into sales values('\" + timestamp + \"', '\" + currentSale + \"')\";\n-                System.out.println(query);\n-                IndexServlet.execUpdate(query);\n+                query = \"insert into sales values(?, ?)\";\n+\n+                PreparedStatement salesStatement = IndexServlet.connection.prepareStatement(query);\n+                salesStatement.setTimestamp(1, timestamp);\n+                salesStatement.setString(2, currentSale);\n+\n+                salesStatement.executeUpdate();\n             }\n \n             jsonObject.put(\"success\", \"true\");"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "808fcd7275006118eb0d8a3217b8587279a22dad",
            "date": "2014-11-26T22:48:47Z",
            "author_login": "tbezman"
          },
          {
            "sha": "dfab18b82b44f646b42520029e0ffd14f18c62c4",
            "date": "2014-11-26T20:25:12Z",
            "author_login": "tbezman"
          },
          {
            "sha": "bb4583b9a829162c659edc7668439c3b4b8ae029",
            "date": "2014-11-25T20:56:21Z",
            "author_login": "tbezman"
          },
          {
            "sha": "84b743fffa9d6b352a84d85cc1cf2d2c8c5d40fb",
            "date": "2014-11-25T02:54:22Z",
            "author_login": "tbezman"
          },
          {
            "sha": "77c53ca3a9be0a36b844aba32689e66a073af044",
            "date": "2014-11-24T04:29:12Z",
            "author_login": "tbezman"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-89",
    "description": "A vulnerability classified as critical has been found in tbezman school-store. This affects an unknown part. The manipulation leads to sql injection. The identifier of the patch is 2957fc97054216d3a393f1775efd01ae2b072001. It is recommended to apply a patch to fix this issue. The identifier VDB-217557 was assigned to this vulnerability.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-06T12:15:08.657",
    "last_modified": "2024-11-21T02:03:40.430",
    "fix_date": "2014-11-24T00:18:29Z"
  },
  "references": [
    {
      "url": "https://github.com/tbezman/school-store/commit/2957fc97054216d3a393f1775efd01ae2b072001",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217557",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217557",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tbezman/school-store/commit/2957fc97054216d3a393f1775efd01ae2b072001",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217557",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217557",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.520281",
    "processing_status": "enhanced"
  }
}