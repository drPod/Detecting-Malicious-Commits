{
  "cve_id": "CVE-2014-4014",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "23adbe12ef7d3d4195e80800ab36b37bee28cd03",
    "related_commits": [
      "23adbe12ef7d3d4195e80800ab36b37bee28cd03",
      "23adbe12ef7d3d4195e80800ab36b37bee28cd03"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "23adbe12ef7d3d4195e80800ab36b37bee28cd03",
      "commit_date": "2014-06-10T19:45:42Z",
      "author": {
        "login": "amluto",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fs,userns: Change inode_capable to capable_wrt_inode_uidgid",
        "length": 732,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 53,
        "additions": 27,
        "deletions": 26
      },
      "files": [
        {
          "filename": "fs/attr.c",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -50,14 +50,14 @@ int inode_change_ok(const struct inode *inode, struct iattr *attr)\n \tif ((ia_valid & ATTR_UID) &&\n \t    (!uid_eq(current_fsuid(), inode->i_uid) ||\n \t     !uid_eq(attr->ia_uid, inode->i_uid)) &&\n-\t    !inode_capable(inode, CAP_CHOWN))\n+\t    !capable_wrt_inode_uidgid(inode, CAP_CHOWN))\n \t\treturn -EPERM;\n \n \t/* Make sure caller can chgrp. */\n \tif ((ia_valid & ATTR_GID) &&\n \t    (!uid_eq(current_fsuid(), inode->i_uid) ||\n \t    (!in_group_p(attr->ia_gid) && !gid_eq(attr->ia_gid, inode->i_gid))) &&\n-\t    !inode_capable(inode, CAP_CHOWN))\n+\t    !capable_wrt_inode_uidgid(inode, CAP_CHOWN))\n \t\treturn -EPERM;\n \n \t/* Make sure a caller can chmod. */\n@@ -67,7 +67,7 @@ int inode_change_ok(const struct inode *inode, struct iattr *attr)\n \t\t/* Also check the setgid bit! */\n \t\tif (!in_group_p((ia_valid & ATTR_GID) ? attr->ia_gid :\n \t\t\t\tinode->i_gid) &&\n-\t\t    !inode_capable(inode, CAP_FSETID))\n+\t\t    !capable_wrt_inode_uidgid(inode, CAP_FSETID))\n \t\t\tattr->ia_mode &= ~S_ISGID;\n \t}\n \n@@ -160,7 +160,7 @@ void setattr_copy(struct inode *inode, const struct iattr *attr)\n \t\tumode_t mode = attr->ia_mode;\n \n \t\tif (!in_group_p(inode->i_gid) &&\n-\t\t    !inode_capable(inode, CAP_FSETID))\n+\t\t    !capable_wrt_inode_uidgid(inode, CAP_FSETID))\n \t\t\tmode &= ~S_ISGID;\n \t\tinode->i_mode = mode;\n \t}"
        },
        {
          "filename": "fs/inode.c",
          "status": "modified",
          "additions": 7,
          "deletions": 3,
          "patch": "@@ -1839,14 +1839,18 @@ EXPORT_SYMBOL(inode_init_owner);\n  * inode_owner_or_capable - check current task permissions to inode\n  * @inode: inode being checked\n  *\n- * Return true if current either has CAP_FOWNER to the inode, or\n- * owns the file.\n+ * Return true if current either has CAP_FOWNER in a namespace with the\n+ * inode owner uid mapped, or owns the file.\n  */\n bool inode_owner_or_capable(const struct inode *inode)\n {\n+\tstruct user_namespace *ns;\n+\n \tif (uid_eq(current_fsuid(), inode->i_uid))\n \t\treturn true;\n-\tif (inode_capable(inode, CAP_FOWNER))\n+\n+\tns = current_user_ns();\n+\tif (ns_capable(ns, CAP_FOWNER) && kuid_has_mapping(ns, inode->i_uid))\n \t\treturn true;\n \treturn false;\n }"
        },
        {
          "filename": "fs/namei.c",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -332,10 +332,11 @@ int generic_permission(struct inode *inode, int mask)\n \n \tif (S_ISDIR(inode->i_mode)) {\n \t\t/* DACs are overridable for directories */\n-\t\tif (inode_capable(inode, CAP_DAC_OVERRIDE))\n+\t\tif (capable_wrt_inode_uidgid(inode, CAP_DAC_OVERRIDE))\n \t\t\treturn 0;\n \t\tif (!(mask & MAY_WRITE))\n-\t\t\tif (inode_capable(inode, CAP_DAC_READ_SEARCH))\n+\t\t\tif (capable_wrt_inode_uidgid(inode,\n+\t\t\t\t\t\t     CAP_DAC_READ_SEARCH))\n \t\t\t\treturn 0;\n \t\treturn -EACCES;\n \t}\n@@ -345,15 +346,15 @@ int generic_permission(struct inode *inode, int mask)\n \t * at least one exec bit set.\n \t */\n \tif (!(mask & MAY_EXEC) || (inode->i_mode & S_IXUGO))\n-\t\tif (inode_capable(inode, CAP_DAC_OVERRIDE))\n+\t\tif (capable_wrt_inode_uidgid(inode, CAP_DAC_OVERRIDE))\n \t\t\treturn 0;\n \n \t/*\n \t * Searching includes executable on directories, else just read.\n \t */\n \tmask &= MAY_READ | MAY_WRITE | MAY_EXEC;\n \tif (mask == MAY_READ)\n-\t\tif (inode_capable(inode, CAP_DAC_READ_SEARCH))\n+\t\tif (capable_wrt_inode_uidgid(inode, CAP_DAC_READ_SEARCH))\n \t\t\treturn 0;\n \n \treturn -EACCES;\n@@ -2379,7 +2380,7 @@ static inline int check_sticky(struct inode *dir, struct inode *inode)\n \t\treturn 0;\n \tif (uid_eq(dir->i_uid, fsuid))\n \t\treturn 0;\n-\treturn !inode_capable(inode, CAP_FOWNER);\n+\treturn !capable_wrt_inode_uidgid(inode, CAP_FOWNER);\n }\n \n /*"
        },
        {
          "filename": "fs/xfs/xfs_ioctl.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1215,7 +1215,7 @@ xfs_ioctl_setattr(\n \t\t * cleared upon successful return from chown()\n \t\t */\n \t\tif ((ip->i_d.di_mode & (S_ISUID|S_ISGID)) &&\n-\t\t    !inode_capable(VFS_I(ip), CAP_FSETID))\n+\t\t    !capable_wrt_inode_uidgid(VFS_I(ip), CAP_FSETID))\n \t\t\tip->i_d.di_mode &= ~(S_ISUID|S_ISGID);\n \n \t\t/*"
        },
        {
          "filename": "include/linux/capability.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -210,7 +210,7 @@ extern bool has_ns_capability_noaudit(struct task_struct *t,\n \t\t\t\t      struct user_namespace *ns, int cap);\n extern bool capable(int cap);\n extern bool ns_capable(struct user_namespace *ns, int cap);\n-extern bool inode_capable(const struct inode *inode, int cap);\n+extern bool capable_wrt_inode_uidgid(const struct inode *inode, int cap);\n extern bool file_ns_capable(const struct file *file, struct user_namespace *ns, int cap);\n \n /* audit system wants to get cap info from files as well */"
        },
        {
          "filename": "kernel/capability.c",
          "status": "modified",
          "additions": 8,
          "deletions": 12,
          "patch": "@@ -424,23 +424,19 @@ bool capable(int cap)\n EXPORT_SYMBOL(capable);\n \n /**\n- * inode_capable - Check superior capability over inode\n+ * capable_wrt_inode_uidgid - Check nsown_capable and uid and gid mapped\n  * @inode: The inode in question\n  * @cap: The capability in question\n  *\n- * Return true if the current task has the given superior capability\n- * targeted at it's own user namespace and that the given inode is owned\n- * by the current user namespace or a child namespace.\n- *\n- * Currently we check to see if an inode is owned by the current\n- * user namespace by seeing if the inode's owner maps into the\n- * current user namespace.\n- *\n+ * Return true if the current task has the given capability targeted at\n+ * its own user namespace and that the given inode's uid and gid are\n+ * mapped into the current user namespace.\n  */\n-bool inode_capable(const struct inode *inode, int cap)\n+bool capable_wrt_inode_uidgid(const struct inode *inode, int cap)\n {\n \tstruct user_namespace *ns = current_user_ns();\n \n-\treturn ns_capable(ns, cap) && kuid_has_mapping(ns, inode->i_uid);\n+\treturn ns_capable(ns, cap) && kuid_has_mapping(ns, inode->i_uid) &&\n+\t\tkgid_has_mapping(ns, inode->i_gid);\n }\n-EXPORT_SYMBOL(inode_capable);\n+EXPORT_SYMBOL(capable_wrt_inode_uidgid);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-264",
    "description": "The capabilities implementation in the Linux kernel before 3.14.8 does not properly consider that namespaces are inapplicable to inodes, which allows local users to bypass intended chmod restrictions by first creating a user namespace, as demonstrated by setting the setgid bit on a file with group ownership of root.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2014-06-23T11:21:17.793",
    "last_modified": "2024-11-21T02:09:20.410",
    "fix_date": "2014-06-10T19:45:42Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=23adbe12ef7d3d4195e80800ab36b37bee28cd03",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://secunia.com/advisories/59220",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.exploit-db.com/exploits/33824",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.14.8",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2014/06/10/4",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/67988",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.securitytracker.com/id/1030394",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1107966",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/23adbe12ef7d3d4195e80800ab36b37bee28cd03",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://source.android.com/security/bulletin/2016-12-01.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=23adbe12ef7d3d4195e80800ab36b37bee28cd03",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://secunia.com/advisories/59220",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.exploit-db.com/exploits/33824",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.14.8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2014/06/10/4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/67988",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.securitytracker.com/id/1030394",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1107966",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/23adbe12ef7d3d4195e80800ab36b37bee28cd03",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://source.android.com/security/bulletin/2016-12-01.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:25.504390",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}