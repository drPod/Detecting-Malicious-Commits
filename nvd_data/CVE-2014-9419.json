{
  "cve_id": "CVE-2014-9419",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "f647d7c155f069c1a068030255c300663516420e",
    "related_commits": [
      "f647d7c155f069c1a068030255c300663516420e",
      "f647d7c155f069c1a068030255c300663516420e"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f647d7c155f069c1a068030255c300663516420e",
      "commit_date": "2014-12-08T21:55:20Z",
      "author": {
        "login": "amluto",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "x86_64, switch_to(): Load TLS descriptors before switching DS and ES",
        "length": 3469,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 101,
        "additions": 73,
        "deletions": 28
      },
      "files": [
        {
          "filename": "arch/x86/kernel/process_64.c",
          "status": "modified",
          "additions": 73,
          "deletions": 28,
          "patch": "@@ -283,24 +283,9 @@ __switch_to(struct task_struct *prev_p, struct task_struct *next_p)\n \n \tfpu = switch_fpu_prepare(prev_p, next_p, cpu);\n \n-\t/*\n-\t * Reload esp0, LDT and the page table pointer:\n-\t */\n+\t/* Reload esp0 and ss1. */\n \tload_sp0(tss, next);\n \n-\t/*\n-\t * Switch DS and ES.\n-\t * This won't pick up thread selector changes, but I guess that is ok.\n-\t */\n-\tsavesegment(es, prev->es);\n-\tif (unlikely(next->es | prev->es))\n-\t\tloadsegment(es, next->es);\n-\n-\tsavesegment(ds, prev->ds);\n-\tif (unlikely(next->ds | prev->ds))\n-\t\tloadsegment(ds, next->ds);\n-\n-\n \t/* We must save %fs and %gs before load_TLS() because\n \t * %fs and %gs may be cleared by load_TLS().\n \t *\n@@ -309,41 +294,101 @@ __switch_to(struct task_struct *prev_p, struct task_struct *next_p)\n \tsavesegment(fs, fsindex);\n \tsavesegment(gs, gsindex);\n \n+\t/*\n+\t * Load TLS before restoring any segments so that segment loads\n+\t * reference the correct GDT entries.\n+\t */\n \tload_TLS(next, cpu);\n \n \t/*\n-\t * Leave lazy mode, flushing any hypercalls made here.\n-\t * This must be done before restoring TLS segments so\n-\t * the GDT and LDT are properly updated, and must be\n-\t * done before math_state_restore, so the TS bit is up\n-\t * to date.\n+\t * Leave lazy mode, flushing any hypercalls made here.  This\n+\t * must be done after loading TLS entries in the GDT but before\n+\t * loading segments that might reference them, and and it must\n+\t * be done before math_state_restore, so the TS bit is up to\n+\t * date.\n \t */\n \tarch_end_context_switch(next_p);\n \n+\t/* Switch DS and ES.\n+\t *\n+\t * Reading them only returns the selectors, but writing them (if\n+\t * nonzero) loads the full descriptor from the GDT or LDT.  The\n+\t * LDT for next is loaded in switch_mm, and the GDT is loaded\n+\t * above.\n+\t *\n+\t * We therefore need to write new values to the segment\n+\t * registers on every context switch unless both the new and old\n+\t * values are zero.\n+\t *\n+\t * Note that we don't need to do anything for CS and SS, as\n+\t * those are saved and restored as part of pt_regs.\n+\t */\n+\tsavesegment(es, prev->es);\n+\tif (unlikely(next->es | prev->es))\n+\t\tloadsegment(es, next->es);\n+\n+\tsavesegment(ds, prev->ds);\n+\tif (unlikely(next->ds | prev->ds))\n+\t\tloadsegment(ds, next->ds);\n+\n \t/*\n \t * Switch FS and GS.\n \t *\n-\t * Segment register != 0 always requires a reload.  Also\n-\t * reload when it has changed.  When prev process used 64bit\n-\t * base always reload to avoid an information leak.\n+\t * These are even more complicated than FS and GS: they have\n+\t * 64-bit bases are that controlled by arch_prctl.  Those bases\n+\t * only differ from the values in the GDT or LDT if the selector\n+\t * is 0.\n+\t *\n+\t * Loading the segment register resets the hidden base part of\n+\t * the register to 0 or the value from the GDT / LDT.  If the\n+\t * next base address zero, writing 0 to the segment register is\n+\t * much faster than using wrmsr to explicitly zero the base.\n+\t *\n+\t * The thread_struct.fs and thread_struct.gs values are 0\n+\t * if the fs and gs bases respectively are not overridden\n+\t * from the values implied by fsindex and gsindex.  They\n+\t * are nonzero, and store the nonzero base addresses, if\n+\t * the bases are overridden.\n+\t *\n+\t * (fs != 0 && fsindex != 0) || (gs != 0 && gsindex != 0) should\n+\t * be impossible.\n+\t *\n+\t * Therefore we need to reload the segment registers if either\n+\t * the old or new selector is nonzero, and we need to override\n+\t * the base address if next thread expects it to be overridden.\n+\t *\n+\t * This code is unnecessarily slow in the case where the old and\n+\t * new indexes are zero and the new base is nonzero -- it will\n+\t * unnecessarily write 0 to the selector before writing the new\n+\t * base address.\n+\t *\n+\t * Note: This all depends on arch_prctl being the only way that\n+\t * user code can override the segment base.  Once wrfsbase and\n+\t * wrgsbase are enabled, most of this code will need to change.\n \t */\n \tif (unlikely(fsindex | next->fsindex | prev->fs)) {\n \t\tloadsegment(fs, next->fsindex);\n+\n \t\t/*\n-\t\t * Check if the user used a selector != 0; if yes\n-\t\t *  clear 64bit base, since overloaded base is always\n-\t\t *  mapped to the Null selector\n+\t\t * If user code wrote a nonzero value to FS, then it also\n+\t\t * cleared the overridden base address.\n+\t\t *\n+\t\t * XXX: if user code wrote 0 to FS and cleared the base\n+\t\t * address itself, we won't notice and we'll incorrectly\n+\t\t * restore the prior base address next time we reschdule\n+\t\t * the process.\n \t\t */\n \t\tif (fsindex)\n \t\t\tprev->fs = 0;\n \t}\n-\t/* when next process has a 64bit base use it */\n \tif (next->fs)\n \t\twrmsrl(MSR_FS_BASE, next->fs);\n \tprev->fsindex = fsindex;\n \n \tif (unlikely(gsindex | next->gsindex | prev->gs)) {\n \t\tload_gs_index(next->gsindex);\n+\n+\t\t/* This works (and fails) the same way as fsindex above. */\n \t\tif (gsindex)\n \t\t\tprev->gs = 0;\n \t}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-200",
    "description": "The __switch_to function in arch/x86/kernel/process_64.c in the Linux kernel through 3.18.1 does not ensure that Thread Local Storage (TLS) descriptors are loaded before proceeding with other steps, which makes it easier for local users to bypass the ASLR protection mechanism via a crafted application that reads a TLS base address.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2014-12-26T00:59:00.053",
    "last_modified": "2024-11-21T02:20:49.720",
    "fix_date": "2014-12-08T21:55:20Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=f647d7c155f069c1a068030255c300663516420e",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2015-January/147864.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2015-January/147973.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-03/msg00020.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-04/msg00009.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-04/msg00015.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://rhn.redhat.com/errata/RHSA-2015-1081.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2015/dsa-3128",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.mandriva.com/security/advisories?name=MDVSA-2015:058",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2014/12/25/1",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.securityfocus.com/bid/71794",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2515-1",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2516-1",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2517-1",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2518-1",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2541-1",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2542-1",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1177260",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/f647d7c155f069c1a068030255c300663516420e",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git%3Ba=commit%3Bh=f647d7c155f069c1a068030255c300663516420e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2015-January/147864.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2015-January/147973.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-03/msg00020.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-04/msg00009.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-04/msg00015.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://rhn.redhat.com/errata/RHSA-2015-1081.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2015/dsa-3128",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.mandriva.com/security/advisories?name=MDVSA-2015:058",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2014/12/25/1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securityfocus.com/bid/71794",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2515-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2516-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2517-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2518-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2541-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2542-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1177260",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/f647d7c155f069c1a068030255c300663516420e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:30.058474",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}