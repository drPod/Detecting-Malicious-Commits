{
  "cve_id": "CVE-2014-9731",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "0e5cc9a40ada6046e6bc3bdfcd0c0d7e4b706b14",
    "related_commits": [
      "0e5cc9a40ada6046e6bc3bdfcd0c0d7e4b706b14",
      "0e5cc9a40ada6046e6bc3bdfcd0c0d7e4b706b14"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "0e5cc9a40ada6046e6bc3bdfcd0c0d7e4b706b14",
      "commit_date": "2014-12-18T21:37:50Z",
      "author": {
        "login": "jankara",
        "type": "User",
        "stats": {
          "total_commits": 2059,
          "average_weekly_commits": 1.72879932829555,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 548
        }
      },
      "commit_message": {
        "title": "udf: Check path length when reading symlink",
        "length": 471,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 68,
        "additions": 48,
        "deletions": 20
      },
      "files": [
        {
          "filename": "fs/udf/dir.c",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -167,7 +167,8 @@ static int udf_readdir(struct file *file, struct dir_context *ctx)\n \t\t\tcontinue;\n \t\t}\n \n-\t\tflen = udf_get_filename(dir->i_sb, nameptr, fname, lfi);\n+\t\tflen = udf_get_filename(dir->i_sb, nameptr, lfi, fname,\n+\t\t\t\t\tUDF_NAME_LEN);\n \t\tif (!flen)\n \t\t\tcontinue;\n "
        },
        {
          "filename": "fs/udf/namei.c",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -233,7 +233,8 @@ static struct fileIdentDesc *udf_find_entry(struct inode *dir,\n \t\tif (!lfi)\n \t\t\tcontinue;\n \n-\t\tflen = udf_get_filename(dir->i_sb, nameptr, fname, lfi);\n+\t\tflen = udf_get_filename(dir->i_sb, nameptr, lfi, fname,\n+\t\t\t\t\tUDF_NAME_LEN);\n \t\tif (flen && udf_match(flen, fname, child->len, child->name))\n \t\t\tgoto out_ok;\n \t}"
        },
        {
          "filename": "fs/udf/symlink.c",
          "status": "modified",
          "additions": 26,
          "deletions": 5,
          "patch": "@@ -30,13 +30,16 @@\n #include <linux/buffer_head.h>\n #include \"udf_i.h\"\n \n-static void udf_pc_to_char(struct super_block *sb, unsigned char *from,\n-\t\t\t   int fromlen, unsigned char *to)\n+static int udf_pc_to_char(struct super_block *sb, unsigned char *from,\n+\t\t\t  int fromlen, unsigned char *to, int tolen)\n {\n \tstruct pathComponent *pc;\n \tint elen = 0;\n+\tint comp_len;\n \tunsigned char *p = to;\n \n+\t/* Reserve one byte for terminating \\0 */\n+\ttolen--;\n \twhile (elen < fromlen) {\n \t\tpc = (struct pathComponent *)(from + elen);\n \t\tswitch (pc->componentType) {\n@@ -49,22 +52,37 @@ static void udf_pc_to_char(struct super_block *sb, unsigned char *from,\n \t\t\t\tbreak;\n \t\t\t/* Fall through */\n \t\tcase 2:\n+\t\t\tif (tolen == 0)\n+\t\t\t\treturn -ENAMETOOLONG;\n \t\t\tp = to;\n \t\t\t*p++ = '/';\n+\t\t\ttolen--;\n \t\t\tbreak;\n \t\tcase 3:\n+\t\t\tif (tolen < 3)\n+\t\t\t\treturn -ENAMETOOLONG;\n \t\t\tmemcpy(p, \"../\", 3);\n \t\t\tp += 3;\n+\t\t\ttolen -= 3;\n \t\t\tbreak;\n \t\tcase 4:\n+\t\t\tif (tolen < 2)\n+\t\t\t\treturn -ENAMETOOLONG;\n \t\t\tmemcpy(p, \"./\", 2);\n \t\t\tp += 2;\n+\t\t\ttolen -= 2;\n \t\t\t/* that would be . - just ignore */\n \t\t\tbreak;\n \t\tcase 5:\n-\t\t\tp += udf_get_filename(sb, pc->componentIdent, p,\n-\t\t\t\t\t      pc->lengthComponentIdent);\n+\t\t\tcomp_len = udf_get_filename(sb, pc->componentIdent,\n+\t\t\t\t\t\t    pc->lengthComponentIdent,\n+\t\t\t\t\t\t    p, tolen);\n+\t\t\tp += comp_len;\n+\t\t\ttolen -= comp_len;\n+\t\t\tif (tolen == 0)\n+\t\t\t\treturn -ENAMETOOLONG;\n \t\t\t*p++ = '/';\n+\t\t\ttolen--;\n \t\t\tbreak;\n \t\t}\n \t\telen += sizeof(struct pathComponent) + pc->lengthComponentIdent;\n@@ -73,6 +91,7 @@ static void udf_pc_to_char(struct super_block *sb, unsigned char *from,\n \t\tp[-1] = '\\0';\n \telse\n \t\tp[0] = '\\0';\n+\treturn 0;\n }\n \n static int udf_symlink_filler(struct file *file, struct page *page)\n@@ -108,8 +127,10 @@ static int udf_symlink_filler(struct file *file, struct page *page)\n \t\tsymlink = bh->b_data;\n \t}\n \n-\tudf_pc_to_char(inode->i_sb, symlink, inode->i_size, p);\n+\terr = udf_pc_to_char(inode->i_sb, symlink, inode->i_size, p, PAGE_SIZE);\n \tbrelse(bh);\n+\tif (err)\n+\t\tgoto out_unlock_inode;\n \n \tup_read(&iinfo->i_data_sem);\n \tSetPageUptodate(page);"
        },
        {
          "filename": "fs/udf/udfdecl.h",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -211,7 +211,8 @@ udf_get_lb_pblock(struct super_block *sb, struct kernel_lb_addr *loc,\n }\n \n /* unicode.c */\n-extern int udf_get_filename(struct super_block *, uint8_t *, uint8_t *, int);\n+extern int udf_get_filename(struct super_block *, uint8_t *, int, uint8_t *,\n+\t\t\t    int);\n extern int udf_put_filename(struct super_block *, const uint8_t *, uint8_t *,\n \t\t\t    int);\n extern int udf_build_ustr(struct ustr *, dstring *, int);"
        },
        {
          "filename": "fs/udf/unicode.c",
          "status": "modified",
          "additions": 16,
          "deletions": 12,
          "patch": "@@ -28,7 +28,8 @@\n \n #include \"udf_sb.h\"\n \n-static int udf_translate_to_linux(uint8_t *, uint8_t *, int, uint8_t *, int);\n+static int udf_translate_to_linux(uint8_t *, int, uint8_t *, int, uint8_t *,\n+\t\t\t\t  int);\n \n static int udf_char_to_ustr(struct ustr *dest, const uint8_t *src, int strlen)\n {\n@@ -333,8 +334,8 @@ static int udf_NLStoCS0(struct nls_table *nls, dstring *ocu, struct ustr *uni,\n \treturn u_len + 1;\n }\n \n-int udf_get_filename(struct super_block *sb, uint8_t *sname, uint8_t *dname,\n-\t\t     int flen)\n+int udf_get_filename(struct super_block *sb, uint8_t *sname, int slen,\n+\t\t     uint8_t *dname, int dlen)\n {\n \tstruct ustr *filename, *unifilename;\n \tint len = 0;\n@@ -347,7 +348,7 @@ int udf_get_filename(struct super_block *sb, uint8_t *sname, uint8_t *dname,\n \tif (!unifilename)\n \t\tgoto out1;\n \n-\tif (udf_build_ustr_exact(unifilename, sname, flen))\n+\tif (udf_build_ustr_exact(unifilename, sname, slen))\n \t\tgoto out2;\n \n \tif (UDF_QUERY_FLAG(sb, UDF_FLAG_UTF8)) {\n@@ -366,7 +367,8 @@ int udf_get_filename(struct super_block *sb, uint8_t *sname, uint8_t *dname,\n \t} else\n \t\tgoto out2;\n \n-\tlen = udf_translate_to_linux(dname, filename->u_name, filename->u_len,\n+\tlen = udf_translate_to_linux(dname, dlen,\n+\t\t\t\t     filename->u_name, filename->u_len,\n \t\t\t\t     unifilename->u_name, unifilename->u_len);\n out2:\n \tkfree(unifilename);\n@@ -403,10 +405,12 @@ int udf_put_filename(struct super_block *sb, const uint8_t *sname,\n #define EXT_MARK\t\t'.'\n #define CRC_MARK\t\t'#'\n #define EXT_SIZE \t\t5\n+/* Number of chars we need to store generated CRC to make filename unique */\n+#define CRC_LEN\t\t\t5\n \n-static int udf_translate_to_linux(uint8_t *newName, uint8_t *udfName,\n-\t\t\t\t  int udfLen, uint8_t *fidName,\n-\t\t\t\t  int fidNameLen)\n+static int udf_translate_to_linux(uint8_t *newName, int newLen,\n+\t\t\t\t  uint8_t *udfName, int udfLen,\n+\t\t\t\t  uint8_t *fidName, int fidNameLen)\n {\n \tint index, newIndex = 0, needsCRC = 0;\n \tint extIndex = 0, newExtIndex = 0, hasExt = 0;\n@@ -439,7 +443,7 @@ static int udf_translate_to_linux(uint8_t *newName, uint8_t *udfName,\n \t\t\t\t\tnewExtIndex = newIndex;\n \t\t\t\t}\n \t\t\t}\n-\t\t\tif (newIndex < 256)\n+\t\t\tif (newIndex < newLen)\n \t\t\t\tnewName[newIndex++] = curr;\n \t\t\telse\n \t\t\t\tneedsCRC = 1;\n@@ -467,13 +471,13 @@ static int udf_translate_to_linux(uint8_t *newName, uint8_t *udfName,\n \t\t\t\t}\n \t\t\t\text[localExtIndex++] = curr;\n \t\t\t}\n-\t\t\tmaxFilenameLen = 250 - localExtIndex;\n+\t\t\tmaxFilenameLen = newLen - CRC_LEN - localExtIndex;\n \t\t\tif (newIndex > maxFilenameLen)\n \t\t\t\tnewIndex = maxFilenameLen;\n \t\t\telse\n \t\t\t\tnewIndex = newExtIndex;\n-\t\t} else if (newIndex > 250)\n-\t\t\tnewIndex = 250;\n+\t\t} else if (newIndex > newLen - CRC_LEN)\n+\t\t\tnewIndex = newLen - CRC_LEN;\n \t\tnewName[newIndex++] = CRC_MARK;\n \t\tvalueCRC = crc_itu_t(0, fidName, fidNameLen);\n \t\tnewName[newIndex++] = hex_asc_upper_hi(valueCRC >> 8);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-17",
    "description": "The UDF filesystem implementation in the Linux kernel before 3.18.2 does not ensure that space is available for storing a symlink target's name along with a trailing \\0 character, which allows local users to obtain sensitive information via a crafted filesystem image, related to fs/udf/symlink.c and fs/udf/unicode.c.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2015-08-31T10:59:04.457",
    "last_modified": "2024-11-21T02:21:32.307",
    "fix_date": "2014-12-18T21:37:50Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=0e5cc9a40ada6046e6bc3bdfcd0c0d7e4b706b14",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-07/msg00023.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-07/msg00049.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-08/msg00011.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-09/msg00018.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-09/msg00021.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.18.2",
      "source": "secalert@redhat.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/06/03/4",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.securityfocus.com/bid/75001",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1228220",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://github.com/torvalds/linux/commit/0e5cc9a40ada6046e6bc3bdfcd0c0d7e4b706b14",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://source.android.com/security/bulletin/2017-07-01",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=0e5cc9a40ada6046e6bc3bdfcd0c0d7e4b706b14",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-07/msg00023.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-07/msg00049.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-08/msg00011.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-09/msg00018.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2015-09/msg00021.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v3.x/ChangeLog-3.18.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/06/03/4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securityfocus.com/bid/75001",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1228220",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/torvalds/linux/commit/0e5cc9a40ada6046e6bc3bdfcd0c0d7e4b706b14",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://source.android.com/security/bulletin/2017-07-01",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:37.886142",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}