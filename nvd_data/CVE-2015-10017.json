{
  "cve_id": "CVE-2015-10017",
  "github_data": {
    "repository": "HPI-Information-Systems/ProLOD",
    "fix_commit": "3f710905458d49c77530bd3cbcd8960457566b73",
    "related_commits": [
      "3f710905458d49c77530bd3cbcd8960457566b73",
      "3f710905458d49c77530bd3cbcd8960457566b73"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "3f710905458d49c77530bd3cbcd8960457566b73",
      "commit_date": "2015-07-06T10:57:42Z",
      "author": {
        "login": "xchrdw",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "validate dataset name to prevent sql injection from this parameter",
        "length": 66,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 49,
        "additions": 33,
        "deletions": 16
      },
      "files": [
        {
          "filename": "prolod-common/src/main/scala/prolod/common/config/DatabaseConnection.scala",
          "status": "modified",
          "additions": 29,
          "deletions": 14,
          "patch": "@@ -224,8 +224,14 @@ class DatabaseConnection(config : Configuration) {\n \t\tresult                */\n \t}\n \n-\tdef getClusters(s: String, ontologyNamespace : String): Seq[Group] = {\n-\t\tval table = s\n+\tdef validateDatasetString(table: String) = {\n+\t\tif(!table.matches(\"[A-Za-z]+\")) {\n+\t\t\tthrow new RuntimeException(\"illegal table name: \" + table)\n+\t\t}\n+\t}\n+\n+\tdef getClusters(table: String, ontologyNamespace : String): Seq[Group] = {\n+\t\tvalidateDatasetString(table)\n \t\tval sql = sql\"SELECT label, cluster_size FROM #${table}.CLUSTERS WHERE username = 'ontology' ORDER BY label\".as[(String, Int)]\n \t\tvar id : Int = -1\n \t\ttry {\n@@ -235,7 +241,7 @@ class DatabaseConnection(config : Configuration) {\n \t\t\t\tnew Group(id, removeOntologyNamespace(label, ontologyNamespace), cluster_size)\n \t\t\t})\n \t\t} catch {\n-\t\t\tcase e : SqlSyntaxErrorException => println(\"This dataset has no clusters: \" + s)\n+\t\t\tcase e : SqlSyntaxErrorException => println(\"This dataset has no clusters: \" + table)\n \t\t\tNil\n \t\t}\n \t}\n@@ -271,6 +277,7 @@ class DatabaseConnection(config : Configuration) {\n \n \n \tdef getStatistics(dataset: String) : mutable.Map[String, String] = {\n+\t\tvalidateDatasetString(dataset)\n \t\tval statistics = mutable.Map[String, String]()\n \t\tval sql = sql\"SELECT nodedegreedistribution, averagelinks, edges, connectedcomponents, stronglyconnectedcomponents FROM #$dataset.graphstatistics\".as[(String, Float, Int, Int, Int)]\n \t\ttry {\n@@ -297,7 +304,7 @@ class DatabaseConnection(config : Configuration) {\n \t\t\t\tval result2 = execute(sql2) map ((gcnodes) => {\n \t\t\t\t\tstatistics += (\"gcnodes\" -> gcnodes.toString)\n \t\t\t\t})\n-\t\t\t\tprintln(e.getMessage + System.lineSeparator() + sql.toString)\n+\t\t\t\tprintln(\"error getting stats: \" + e.getMessage + System.lineSeparator() + sql.toString)\n \t\t\t}\n \t\t}\n \t\tstatistics\n@@ -355,6 +362,7 @@ class DatabaseConnection(config : Configuration) {\n \t}\n \n \tdef getPatternDiameter(dataset: String, patternId: Int) : Int = {\n+\t\tvalidateDatasetString(dataset)\n \t\tvar diameter : Int = 0\n \t\ttry {\n \t\t\tval sql = sql\"SELECT diameter FROM #${dataset}.patterns WHERE id = #${patternId}\".as[(Int)]\n@@ -363,12 +371,13 @@ class DatabaseConnection(config : Configuration) {\n \t\t\t\tdiameter = diameterSql\n \t\t\t})\n \t\t} catch {\n-\t\t\tcase e : SqlSyntaxErrorException => println(e.getMessage)\n+\t\t\tcase e : SqlSyntaxErrorException => println(\"error getting diameter\" + e.getMessage)\n \t\t}\n \t\tdiameter\n \t}\n \n \tdef getEntityDetails(dataset: String, subjectId: Int): Entity = {\n+\t\tvalidateDatasetString(dataset)\n \t\tvar triples : List[Triple] = Nil\n \t\tvar label : String = \"\"\n \t\tvar subjectUri = \"\"\n@@ -409,7 +418,7 @@ class DatabaseConnection(config : Configuration) {\n \t\t\t}\n \t\t\tstatement.close\n \t\t} catch {\n-\t\t\tcase e : SqlSyntaxErrorException => println(e.getMessage)\n+\t\t\tcase e : SqlSyntaxErrorException => println(\"error getting entity details\" + e.getMessage)\n \t\t}\n \n \t\tval entityDetails = new Entity(subjectId, subjectUri, label, triples)\n@@ -434,6 +443,7 @@ class DatabaseConnection(config : Configuration) {\n \t}\n \n \tdef insertPatterns(name: String, patterns: util.HashMap[Integer, util.HashMap[String, Integer]], coloredPatterns: util.HashMap[Integer, util.List[String]], diameter: util.HashMap[Integer, lang.Double]) {\n+\t\tvalidateDatasetString(name)\n \t\tval coloredPatternsMap = coloredPatterns.asScala.toMap\n \t\tval diameterMap = diameter.asScala.toMap\n \t\tval patternsMap = patterns.asScala.toMap\n@@ -450,7 +460,7 @@ class DatabaseConnection(config : Configuration) {\n \t\t\t\t\t\t\tval resultSet = statement.execute(\"INSERT INTO \" + name + \".PATTERNS (ID, NAME, PATTERN, OCCURENCES, DIAMETER) VALUES (\" + id + \", '\" + patternName + \"',  '\" + pattern + \"',\" + occurences + \",\" + patternDiameter + \")\")\n \t\t\t\t\t\t} catch {\n \t\t\t\t\t\t\tcase e: SqlIntegrityConstraintViolationException => println(\"Pattern already exists\")\n-\t\t\t\t\t\t\tcase e: SqlException => println(e.getMessage)\n+\t\t\t\t\t\t\tcase e: SqlException => println(\"error inserting pattern: \" + e.getMessage)\n \t\t\t\t\t\t\tcase e: SqlSyntaxErrorException => println(e.getMessage + System.lineSeparator() + \"INSERT INTO \" + name + \".PATTERNS (ID, PATTERN, OCCURENCES, DIAMETER) VALUES (\" + id + \", '\" + pattern + \"',\" + occurences + \", \" + patternDiameter + \")\")\n \t\t\t\t\t\t}\n \t\t\t\t\t\tval cPattern = coloredPatternsMap.get(id).get.asScala.toList\n@@ -460,7 +470,7 @@ class DatabaseConnection(config : Configuration) {\n \t\t\t\t\t\t\t\tval resultSet = statement.execute(\"INSERT INTO \" + name + \".coloredpatterns (ID, PATTERN) VALUES (\" + id + \", '\" + coloredpattern + \"')\")\n \t\t\t\t\t\t\t} catch {\n \t\t\t\t\t\t\t\tcase e: SqlException => {\n-\t\t\t\t\t\t\t\t\tprintln(e.getMessage)\n+\t\t\t\t\t\t\t\t\tprintln(\"error inserting pattern (2)\" + e.getMessage)\n \t\t\t\t\t\t\t\t\tprintln(coloredpattern)\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t\tcase e: SqlSyntaxErrorException => println(e.getMessage + System.lineSeparator() + \"INSERT INTO \" + name + \".coloredpatterns (ID, PATTERN) VALUES (\" + id + \", '\" + coloredpattern + \"')\")\n@@ -478,6 +488,7 @@ class DatabaseConnection(config : Configuration) {\n \t}\n \n \tdef performInsert(table: String, names: Seq[Any], values: Seq[Any]): Option[Int] = {\n+\t\tvalidateDatasetString(table)\n \t\tval query = String.format(\"insert into %s (%s) values (%s)\",\n \t\t\ttable,\n \t\t\tcommaize(names.map(n => n.toString).toList),\n@@ -513,6 +524,7 @@ class DatabaseConnection(config : Configuration) {\n \t}\n \n \tdef getSubjectId(dataset: String, s: String): Int = {\n+\t\tvalidateDatasetString(dataset)\n \t\tvar result : Int = -1\n \t\tval statement = connection.createStatement()\n \t\ttry {\n@@ -544,6 +556,7 @@ class DatabaseConnection(config : Configuration) {\n \t}\n \n \tdef getObjectId(name: String, s: String): Int = {\n+\t\tvalidateDatasetString(name)\n \t\tvar result : Int = -1\n \t\tval statement = connection.createStatement()\n \t\tval resultSet = statement.executeQuery(\"SELECT tuple_id FROM \" + name + \".objecttable WHERE object='\" + s.replace(\"'\", \"\") + \"'\")\n@@ -556,28 +569,28 @@ class DatabaseConnection(config : Configuration) {\n \tdef getOntologyNamespace(s: String): String = {\n \t\tvar namespace :String = null\n \t\ttry {\n-\t\t\tval sql = sql\"\"\"SELECT ONTOLOGY_NAMESPACE FROM PROLOD_MAIN.SCHEMATA WHERE SCHEMA_NAME = '#${s}'\"\"\".as[String]\n+\t\t\tval sql = sql\"\"\"SELECT ONTOLOGY_NAMESPACE FROM PROLOD_MAIN.SCHEMATA WHERE SCHEMA_NAME = ${s}\"\"\".as[String]\n \t\t\tval result = execute(sql)\n \t\t\tresult map ((ns) => {\n \t\t\t\tnamespace = ns\n \t\t\t})\n \t\t} catch {\n-\t\t\tcase e: SqlException => println(e.getMessage + System.lineSeparator())\n-\t\t\tcase e: SqlSyntaxErrorException   => println(e.getMessage + System.lineSeparator())\n+\t\t\tcase e: SqlException => println(\"error getting ontology namespace: \" + e.getMessage + System.lineSeparator())\n+\t\t\tcase e: SqlSyntaxErrorException   => println(\"syntax in ontology namespace: \" + e.getMessage + System.lineSeparator())\n \t\t}\n \t\tnamespace\n \t}\n \n \tdef getNamespace(s: String): String = {\n \t\tvar namespace :String = null\n \t\ttry {\n-\t\t\tval sql = sql\"\"\"SELECT NAMESPACE FROM PROLOD_MAIN.SCHEMATA WHERE SCHEMA_NAME = '#${s}'\"\"\".as[String]\n+\t\t\tval sql = sql\"\"\"SELECT NAMESPACE FROM PROLOD_MAIN.SCHEMATA WHERE SCHEMA_NAME = ${s}\"\"\".as[String]\n \t\t\tval result = execute(sql)\n \t\t\tresult map ((ns) => {\n \t\t\t\tnamespace = ns\n \t\t\t})\n \t\t} catch {\n-\t\t\tcase e: SqlException => println(e.getMessage + System.lineSeparator())\n+\t\t\tcase e: SqlException => println(\"error getting namespace: \" + e.getMessage + System.lineSeparator())\n \t\t\tcase e: SqlSyntaxErrorException   => println(e.getMessage + System.lineSeparator())\n \t\t}\n \t\tnamespace\n@@ -591,6 +604,7 @@ class DatabaseConnection(config : Configuration) {\n \t}\n \n \tdef getPredicateId(name: String, s: String): Int = {\n+\t\tvalidateDatasetString(name)\n \t\tvar result : Int = -1\n \t\tval statement = connection.createStatement()\n \t\tval resultSet = statement.executeQuery(\"SELECT id FROM \" + name + \".predicatetable WHERE predicate='\" + s + \"'\")\n@@ -641,9 +655,10 @@ class DatabaseConnection(config : Configuration) {\n \t}\n \n \tdef updateClusterSizes(dataset : String, ontologyNamespace : String) = {\n+\t\tvalidateDatasetString(dataset)\n \t\tfor (cluster : Group <- getClusters(dataset, ontologyNamespace)) {\n \t\t\ttry {\n-\t\t\t\tval sql = sql\"\"\"SELECT COUNT(*) FROM #${dataset}.MAINTABLE as m, #${dataset}.predicatetable as p, #${dataset}.objecttable as o WHERE m.predicate_id = p.id  AND o.tuple_id = m.tuple_id  AND p.predicate = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' AND o.object = '#${ontologyNamespace}#${cluster.name}'\"\"\".as[(Int)]\n+\t\t\t\tval sql = sql\"\"\"SELECT COUNT(*) FROM #${dataset}.MAINTABLE as m, #${dataset}.predicatetable as p, #${dataset}.objecttable as o WHERE m.predicate_id = p.id  AND o.tuple_id = m.tuple_id  AND p.predicate = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' AND o.object = ${ontologyNamespace + cluster.name}\"\"\".as[(Int)]\n \t\t\t\tval result = execute(sql)\n \t\t\t\tvar clusterSize = 0\n \t\t\t\tresult map ((cluster_size) => {"
        },
        {
          "filename": "prolod-server/app/controllers/prolod/server/GraphLod.scala",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -153,8 +153,10 @@ object GraphLod extends Controller {\n       data.classDistribution =  classDistribution\n     }\n \n-    val patternDiameter = db.getPatternDiameter(datasetId, data.patterns.last.id)\n-    data.diameter = patternDiameter\n+    if(data.patterns.nonEmpty) {\n+      val patternDiameter = db.getPatternDiameter(datasetId, data.patterns.last.id)\n+      data.diameter = patternDiameter\n+    }\n \n     val json = Json.obj(\"statistics\" -> data)\n     Ok(json)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6b2e898835016e6133a5e36fe0ad249aaaae7566",
            "date": "2016-05-04T09:49:36Z",
            "author_login": "anjeve"
          },
          {
            "sha": "43c3d12b4d12d67fff4a8eb5ba9ee9cdecd78fef",
            "date": "2016-02-10T13:02:05Z",
            "author_login": "xchrdw"
          },
          {
            "sha": "39556e70f55534695e50f9d68297cc7a1ac0bc38",
            "date": "2016-02-10T10:14:43Z",
            "author_login": "xchrdw"
          },
          {
            "sha": "9db7badb3b32807abced4ba8bd4136b52e70afec",
            "date": "2016-02-06T16:32:09Z",
            "author_login": "xchrdw"
          },
          {
            "sha": "f37d2a45198d964823bc519c43888b65d53995a9",
            "date": "2016-02-06T08:56:47Z",
            "author_login": "xchrdw"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-89",
    "description": "A vulnerability has been found in HPI-Information-Systems ProLOD and classified as critical. This vulnerability affects unknown code. The manipulation of the argument this leads to sql injection. The name of the patch is 3f710905458d49c77530bd3cbcd8960457566b73. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217552.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-06T11:15:09.213",
    "last_modified": "2024-11-21T02:24:11.050",
    "fix_date": "2015-07-06T10:57:42Z"
  },
  "references": [
    {
      "url": "https://github.com/HPI-Information-Systems/ProLOD/commit/3f710905458d49c77530bd3cbcd8960457566b73",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217552",
      "source": "cna@vuldb.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217552",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/HPI-Information-Systems/ProLOD/commit/3f710905458d49c77530bd3cbcd8960457566b73",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217552",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217552",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.519600",
    "processing_status": "enhanced"
  }
}