{
  "cve_id": "CVE-2015-10021",
  "github_data": {
    "repository": "ritterim/definely",
    "fix_commit": "b31a022ba4d8d17148445a13ebb5a42ad593dbaa",
    "related_commits": [
      "b31a022ba4d8d17148445a13ebb5a42ad593dbaa",
      "b31a022ba4d8d17148445a13ebb5a42ad593dbaa"
    ],
    "patch_url": "https://github.com/ritterim/definely/commit/b31a022ba4d8d17148445a13ebb5a42ad593dbaa.patch",
    "fix_commit_details": {
      "sha": "b31a022ba4d8d17148445a13ebb5a42ad593dbaa",
      "commit_date": "2015-01-24T06:06:06Z",
      "author": {
        "login": "billbogaiv",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix XSS on term-detailed web client view.",
        "length": 541,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 60,
        "additions": 46,
        "deletions": 14
      },
      "files": [
        {
          "filename": "gulpfile.js",
          "status": "modified",
          "additions": 9,
          "deletions": 11,
          "patch": "@@ -4,18 +4,8 @@ var $ = require('gulp-load-plugins')({\n     lazy: true\n });\n \n-\n gulp.task('default', ['serve-dev'])\n \n-gulp.task('test', ['build'], function () {\n-    return gulp.src('build/**/*Spec.js', {\n-            read: false\n-        })\n-        .pipe($.mocha({\n-            reporter: 'nyan'\n-        }))\n-})\n-\n gulp.task('serve-dev', ['build'], function () {\n     serve(true)\n })\n@@ -42,13 +32,21 @@ gulp.task('build', ['clean'], function () {\n         .pipe(gulp.dest('build'))\n })\n \n-gulp.task('test', ['build'], function () {\n+gulp.task('test', ['build', 'tdd-tests'], function () {\n     return gulp.src('build/**/*Spec.js', {\n             read: false\n         })\n         .pipe($.mocha())\n })\n \n+gulp.task('tdd-tests', ['build'], function() {\n+    return gulp.src('build/**/*Tests.js', {\n+        read: false\n+    }).pipe($.mocha({\n+        ui: 'tdd'\n+    }));\n+})\n+\n function serve(isDev) {\n     require('./build')\n "
        },
        {
          "filename": "src/database.js",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -1,10 +1,12 @@\n import pg from 'pg';\n import Term from './models/Term'\n+import Sanitize from './sanitize'\n \n export\n default class Database {\n     constructor(connectionUri) {\n         this.connectionUri = connectionUri;\n+        this.sanitize = new Sanitize();\n     };\n \n     add(term, callback) {\n@@ -27,6 +29,8 @@ default class Database {\n     };\n \n     find(id, callback) {\n+        var self = this;\n+\n         pg.connect(this.connectionUri, function (err, client, done) {\n             if (err) {\n                 return console.error('Could not connect to postgres', err);\n@@ -44,14 +48,16 @@ default class Database {\n                     var term = null\n                     if (result.rows.length > 0) {\n                         var row = result.rows[0]\n-                        term = new Term(row.id, row.term, row.definition, row.tags || undefined)\n+                        term = new Term(row.id, row.term, self.sanitize.htmlSanitize(row.definition), row.tags || undefined)\n                     }\n                     callback(term);\n                 });\n         });\n     };\n \n     search(searchTerm, callback) {\n+        var self = this;\n+\n         pg.connect(this.connectionUri, function (err, client, done) {\n             if (err) {\n                 return console.error('Could not connect to postgres', err);\n@@ -64,7 +70,7 @@ default class Database {\n             if (!searchTerm) {\n                 client.query('select id, term, tags, definition from terms', function (err, result) {\n \n-                    var terms = result.rows.map(row => new Term(row.id, row.term, row.definition, row.tags || undefined))\n+                    var terms = result.rows.map(row => new Term(row.id, row.term, self.sanitize.htmlSanitize(row.definition), row.tags || undefined))\n                     callback(terms)\n                 })\n             } else {\n@@ -76,7 +82,7 @@ default class Database {\n                         }\n \n                         done();\n-                        var terms = result.rows.map(row => new Term(row.id, row.term, row.definition, row.tags || undefined))\n+                        var terms = result.rows.map(row => new Term(row.id, row.term, self.sanitize.htmlSanitize(row.definition), row.tags || undefined))\n                         callback(terms);\n                     })\n             }"
        },
        {
          "filename": "src/sanitize.js",
          "status": "added",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -0,0 +1,15 @@\n+export default class Sanitize {\n+    constructor() {\n+    }\n+\n+    /**\n+     * This function replaces all instances of lt and gt with their\n+     * HTML entity.\n+     */\n+    htmlSanitize(html) {\n+        html = html.replace(/</g, '&lt;');\n+        html = html.replace(/>/g, '&gt;');\n+\n+        return html;\n+    }\n+}"
        },
        {
          "filename": "src/sanitizeTests.js",
          "status": "added",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -0,0 +1,13 @@\n+import assert from 'assert'\n+import sut from './sanitize'\n+\n+suite('Sanitize', function() {\n+    suite('#htmlSanitize()', function() {\n+        test('should encode all lt and gt-symbols', function() {\n+            var result = new sut()\n+                .htmlSanitize('<test></test>');\n+\n+            assert.equal('&lt;test&gt;&lt;/test&gt;', result);\n+        });\n+    });\n+});"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "23cdb21ce2d34e8d95050b35d7e1051bb36e220f",
            "date": "2018-11-05T17:25:48Z",
            "author_login": "khalidabuhakmeh"
          },
          {
            "sha": "952f5ba30c809ebe3c9d43711c78abee51b72d14",
            "date": "2018-11-05T16:49:40Z",
            "author_login": "kendaleiv"
          },
          {
            "sha": "0c573cbbaf08ebfd68c9a8d19d85b89e69eb4e08",
            "date": "2015-03-05T13:27:45Z",
            "author_login": "jrusbatch"
          },
          {
            "sha": "f9a97a288ceef4a36fcc93bf7485f6ae68a86ea7",
            "date": "2015-03-05T03:09:52Z",
            "author_login": "billbogaiv"
          },
          {
            "sha": "ad781c68d15ae974da6dc63bb1a1b800fda51075",
            "date": "2015-02-17T13:52:46Z",
            "author_login": "billbogaiv"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "A vulnerability was found in ritterim definely. It has been classified as problematic. Affected is an unknown function of the file src/database.js. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is b31a022ba4d8d17148445a13ebb5a42ad593dbaa. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217608.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-07T12:15:08.647",
    "last_modified": "2024-11-21T02:24:11.633",
    "fix_date": "2015-01-24T06:06:06Z"
  },
  "references": [
    {
      "url": "https://github.com/ritterim/definely/commit/b31a022ba4d8d17148445a13ebb5a42ad593dbaa",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ritterim/definely/pull/51",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217608",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217608",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ritterim/definely/commit/b31a022ba4d8d17148445a13ebb5a42ad593dbaa",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ritterim/definely/pull/51",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217608",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217608",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.524668",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "definely",
    "owner": "ritterim",
    "created_at": "2015-01-13T18:31:37Z",
    "updated_at": "2023-01-28T02:11:29Z",
    "pushed_at": "2018-11-05T17:25:49Z",
    "size": 141,
    "stars": 0,
    "forks": 5,
    "open_issues": 0,
    "watchers": 0,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 72498,
      "HTML": 8170,
      "PLpgSQL": 998
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T22:51:42.128583"
  }
}