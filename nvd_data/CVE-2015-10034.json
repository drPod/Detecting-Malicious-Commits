{
  "cve_id": "CVE-2015-10034",
  "github_data": {
    "repository": "j-nowak/workout-organizer",
    "fix_commit": "13cd6c3d1210640bfdb39872b2bb3597aa991279",
    "related_commits": [
      "13cd6c3d1210640bfdb39872b2bb3597aa991279",
      "13cd6c3d1210640bfdb39872b2bb3597aa991279"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "13cd6c3d1210640bfdb39872b2bb3597aa991279",
      "commit_date": "2015-02-03T20:22:56Z",
      "author": {
        "login": "krukon",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fixed building queries - preventing SQL-injection",
        "length": 49,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 292,
        "additions": 180,
        "deletions": 112
      },
      "files": [
        {
          "filename": "src/app/controllers/AccountController.java",
          "status": "modified",
          "additions": 33,
          "deletions": 23,
          "patch": "@@ -1,7 +1,6 @@\n package controllers;\n \n-import java.util.HashMap;\n-import java.util.Map;\n+import java.sql.Date;\n \n import models.Secured;\n import play.data.DynamicForm;\n@@ -19,10 +18,17 @@ public static Result changePassword() {\n \t\tString oldPassword = requestData.get(\"oldPassword\");\n \t\tString newPassword = requestData.get(\"newPassword\");\n \t\tString repeatedPassword = requestData.get(\"repeatedPassword\");\n+\t\tint userId;\n+\t\ttry {\n+\t\t\tuserId = Integer.parseInt(session(Application.USER_ID));\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+\t\t\treturn badRequest();\n+\t\t}\n \t\t\n \t\tif (newPassword.equals(repeatedPassword)) {\n-\t\t\tif (UsersDao.get().checkPasswordForUser(session().get(Application.USER_ID), oldPassword)) {\n-\t\t\t\tUsersDao.get().changePassword(session().get(Application.USER_ID), newPassword);\n+\t\t\tif (UsersDao.get().checkPasswordForUser(userId, oldPassword)) {\n+\t\t\t\tUsersDao.get().changePassword(userId, newPassword);\n \t\t\t\treturn ok();\n \t\t\t}\n \t\t\telse {\n@@ -35,28 +41,32 @@ public static Result changePassword() {\n \t}\n \t\n \tpublic static Result changeUserInfo() {\n-\t\tString userId = session(Application.USER_ID);\n \t\tDynamicForm requestData = Form.form().bindFromRequest();\n-\t\tString weight = requestData.get(\"weight\");\n-\t\tString height = requestData.get(\"height\");\n-\t\tString dateOfBirth = requestData.get(\"dateOfBirth\");\n-\n-\t\tMap<String, String> toUpdate = new HashMap<String, String>();\n-\t\tif (!weight.equals(\"\")) {\n-\t\t\ttoUpdate.put(\"weight\", weight);\n-\t\t}\n-\t\tif (!height.equals(\"\")) {\n-\t\t\ttoUpdate.put(\"height\", height);\n-\t\t}\n-\t\tif (!dateOfBirth.equals(\"\")) {\n-\t\t\ttoUpdate.put(\"date_of_birth\", dateOfBirth);\n+\t\tDouble weight = null;\n+\t\tDouble height = null;\n+\t\tDate dateOfBirth = null;\n+\t\tint userId;\n+\t\ttry {\n+\t\t\tuserId = Integer.parseInt(session(Application.USER_ID));\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n+\t\t\treturn badRequest();\n \t\t}\n-\t\t\n \n-\t\tif (toUpdate.size() > 0 && UsersDao.get().update(userId, toUpdate)) {\n-\t\t\treturn ok();\n-\t\t}\n-\t\telse {\n+\t\tif (!requestData.get(\"weight\").equals(\"\"))\n+\t\t\tweight = Double.valueOf(requestData.get(\"weight\"));\n+\t\tif (!requestData.get(\"height\").equals(\"\"))\n+\t\t\theight = Double.valueOf(requestData.get(\"height\"));\n+\t\tif (!requestData.get(\"dateOfBirth\").equals(\"\"))\n+\t\t\tdateOfBirth = Date.valueOf(requestData.get(\"dateOfBirth\"));\n+\n+\t\ttry {\n+\t\t\tif (UsersDao.get().update(userId, weight, height, dateOfBirth))\n+\t\t\t\treturn ok();\n+\t\t\telse\n+\t\t\t\treturn badRequest();\n+\t\t} catch (Exception e) {\n+\t\t\te.printStackTrace();\n \t\t\treturn badRequest();\n \t\t}\n \t}"
        },
        {
          "filename": "src/app/controllers/Application.java",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -36,8 +36,13 @@ public static Result home() {\n     }\n     \n     public static Result editAccountSettings() {\n-    \tUser user = UsersDao.get().getById(session(USER_ID)); //TODO change session to userId\n-    \treturn ok(account.render(user));\n+    \ttry {\n+\t    \tUser user = UsersDao.get().getById(Integer.parseInt(session(USER_ID))); //TODO change session to userId\n+\t    \treturn ok(account.render(user));\n+    \t} catch (Exception e) {\n+    \t\te.printStackTrace();\n+    \t\treturn badRequest();\n+    \t}\n     }\n \n }"
        },
        {
          "filename": "src/app/controllers/UsersController.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -30,7 +30,7 @@ public static Result decline(int requesingUserId) {\n \t\n \tpublic static Result showUser(int foreignerId) {\n \t\tint userId = Integer.parseInt(session(\"user_id\"));\n-\t\tUser user = UsersDao.get().getById(foreignerId + \"\");\n+\t\tUser user = UsersDao.get().getById(foreignerId);\n \t\tboolean isYourFriend = UsersDao.get().areFriends(userId, foreignerId);\n \t\tif (user != null) {\n \t\t\treturn ok(user_info.render(user, isYourFriend));\t\t\t"
        },
        {
          "filename": "src/app/database/ExerciseDao.java",
          "status": "modified",
          "additions": 17,
          "deletions": 12,
          "patch": "@@ -1,6 +1,7 @@\n package database;\n \n import java.sql.Connection;\n+import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n@@ -98,10 +99,13 @@ public void rateExercise(int userId, int exerciseId, int rating) {\n \t\tConnection connection = null;\n \t\ttry {\n \t\t\tconnection = DB.getConnection();\n-\t\t\tString sql = connection.nativeSQL(\"INSERT INTO exercise_ratings(user_id, exercise_id, rating) VALUES\" + \n-\t\t\t\t\t\"  (\" + userId + \", \" + exerciseId + \", \" + rating + \");\");\n-\t\t\tplay.Logger.info(\"Insert exercise_rating: \" + sql);\n-\t\t\tconnection.createStatement().execute(sql);\n+\t\t\tPreparedStatement p = connection.prepareStatement(\"INSERT INTO exercise_ratings(user_id, exercise_id, rating) VALUES (?, ?, ?);\");\n+\t\t\tp.setInt(1, userId);\n+\t\t\tp.setInt(2, exerciseId);\n+\t\t\tp.setInt(3, rating);\n+\t\t\t\n+\t\t\tp.executeQuery();\n+\t\t\tp.close();\n \t\t} catch (SQLException e) {\n \t\t\te.printStackTrace();\n \t\t} finally {\n@@ -123,13 +127,13 @@ public ExerciseResult getBestForUser(String userId, int exerciseId) {\n \t\tConnection connection = null;\n \t\ttry {\n \t\t\tconnection = DB.getConnection();\n-\t\t\tStatement statement = connection.createStatement();\n-\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT weight, set_count, reps_per_set\" + \n-\t\t\t\t\t\"\t\tFROM workout_entries\" + \n-\t\t\t\t\t\"\t\tJOIN workouts USING (workout_id)\" + \n-\t\t\t\t\t\"\t\tWHERE user_id = \" + userId + \" AND exercise_id = \" + exerciseId + \n-\t\t\t\t\t\"\t\tORDER BY weight\" + \n-\t\t\t\t\t\"\t\tLIMIT 1;\");\n+\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT weight, set_count, reps_per_set\"\n+\t\t\t\t\t+ \"FROM workout_entries \"\n+\t\t\t\t\t+ \"JOIN workouts USING (workout_id) \"\n+\t\t\t\t\t+ \"WHERE user_id = ? AND exercise_id = ? \"\n+\t\t\t\t\t+ \"ORDER BY weight\"\n+\t\t\t\t\t+ \"LIMIT 1;\");\n+\t\t\tResultSet resultSet = p.executeQuery();\n \t\t\tExerciseResult result = null;\n \t\t\tif (resultSet.next()) {\n \t\t\t\tresult = new ExerciseResult();\n@@ -138,7 +142,8 @@ public ExerciseResult getBestForUser(String userId, int exerciseId) {\n \t\t\t\tresult.setWeight(resultSet.getInt(\"weight\"));\n \t\t\t\t\n \t\t\t}\n-\t\t\t\n+\t\t\tresultSet.close();\n+\t\t\tp.close();\n \t\t\treturn result;\n \t\t} catch (SQLException e) {\n \t\t\te.printStackTrace();"
        },
        {
          "filename": "src/app/database/GymsDao.java",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -1,6 +1,7 @@\n package database;\n \n import java.sql.Connection;\n+import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n@@ -67,10 +68,12 @@ public void rateGym(int userId, int gymId, int rating) {\n \t\tConnection connection = null;\n \t\ttry {\n \t\t\tconnection = DB.getConnection();\n-\t\t\tString sql = connection.nativeSQL(\"INSERT INTO gym_ratings(user_id, gym_id, rating) VALUES\" + \n-\t\t\t\t\t\"  (\" + userId + \", \" + gymId + \", \" + rating + \");\");\n-\t\t\tplay.Logger.info(\"Insert gym_rating: \" + sql);\n-\t\t\tconnection.createStatement().execute(sql);\n+\t\t\tPreparedStatement p = connection.prepareStatement(\"INSERT INTO gym_ratings(user_id, gym_id, rating) VALUES (?, ?, ?)\");\n+\t\t\tp.setInt(1, userId);\n+\t\t\tp.setInt(2, gymId);\n+\t\t\tp.setInt(3, rating);\n+\t\t\tp.executeQuery();\n+\t\t\tp.close();\n \t\t} catch (SQLException e) {\n \t\t\te.printStackTrace();\n \t\t} finally {"
        },
        {
          "filename": "src/app/database/UsersDao.java",
          "status": "modified",
          "additions": 67,
          "deletions": 43,
          "patch": "@@ -3,14 +3,12 @@\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n import java.sql.Connection;\n+import java.sql.Date;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n-import java.sql.Statement;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n \n import models.Stranger;\n import models.User;\n@@ -34,21 +32,26 @@ public boolean insert(User user) {\n \t\t\tconnection = DB.getConnection();\n \t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n \t\t\t\t\t.getInstance(\"SHA-1\").digest(user.getPassword().getBytes()));\n-\t\t\tString sql = connection.nativeSQL(\"INSERT INTO users(login, email, password_digest, first_name, last_name) VALUES\" + \n-\t\t\t\t\t\"  ('\" + user.getLogin() + \"','\" + user.getEmail() + \"','\" + passwordDigest + \"','\" + user.getFirstName() + \"','\" + user.getLastName() + \"')\");\n-\t\t\t\n-\t\t\tplay.Logger.info(\"Insert user: \" + sql);\n-\t\t\tconnection.createStatement().execute(sql);\n+\t\t\tPreparedStatement p = connection.prepareStatement(\"INSERT INTO users(login, email, password_digest, first_name, last_name) VALUES (?, ?, ?, ?, ?)\");\n+\t\t\tp.setString(1, user.getLogin());\n+\t\t\tp.setString(2, user.getEmail());\n+\t\t\tp.setString(3, passwordDigest);\n+\t\t\tp.setString(4, user.getFirstName());\n+\t\t\tp.setString(5, user.getLastName());\n+\t\t\tp.executeQuery();\n+\t\t\tp.close();\n \t\t\t\n-\t\t\tStatement statement = connection.createStatement();\n-\t\t\tResultSet result = statement.executeQuery(\"SELECT * FROM users WHERE login = '\" + user.getLogin() +\"'\");\n+\t\t\tp = connection.prepareStatement(\"SELECT * FROM users WHERE login = ?\");\n+\t\t\tp.setString(1, user.getLogin());\n+\t\t\tResultSet result = p.executeQuery();\n \t\t\tif (result.next()){\n \t\t\t\tuser.setId(result.getInt(\"user_id\"));\t\t\t\t\n \t\t\t}\n \t\t\telse {\n \t\t\t\tthrow new SQLException(\"Insert error\");\n \t\t\t}\n-\t\t\t\n+\t\t\tresult.close();\n+\t\t\tp.close();\n \t\t\treturn true;\n \t\t} catch (SQLException e) {\n \t\t\te.printStackTrace();\n@@ -71,11 +74,13 @@ public User login(String login, String password) {\n \t\tConnection connection = null;\n \t\ttry {\n \t\t\tconnection = DB.getConnection();\n-\t\t\tStatement getuserStatement = connection.createStatement();\n \t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n \t\t\t\t\t.getInstance(\"SHA-1\").digest(password.getBytes()));\n-\t\t\tResultSet resultUser = getuserStatement.executeQuery(\"SELECT * FROM users \"\n-\t\t\t\t\t+ \"WHERE (login = '\" + login + \"' OR email = '\" + login + \"') AND password_digest = '\" + passwordDigest + \"'\");\n+\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT * FROM users WHERE (login = ? OR email = ?) AND password_digest = ?\");\n+\t\t\tp.setString(1, login);\n+\t\t\tp.setString(2, login);\n+\t\t\tp.setString(3, passwordDigest);\n+\t\t\tResultSet resultUser = p.executeQuery();\n \t\t\t\n \t\t\tUser user = null;\n \t\t\tif (resultUser.next()) {\n@@ -87,7 +92,7 @@ public User login(String login, String password) {\n \t\t\t}\n \t\t\t\n \t\t\tresultUser.close();\n-\t\t\tgetuserStatement.close();\n+\t\t\tp.close();\n \t\t\t\n \t\t\treturn user;\n \t\t} catch (SQLException e) {\n@@ -115,13 +120,14 @@ private static String byteArrayToHexString(byte[] b) {\n \t\treturn result;\n \t}\n \n-\tpublic User getById(String userId) { //TODO change to userId\n+\tpublic User getById(int userId) {\n \t\tConnection connection = null;\n \t\ttry {\n \t\t\tconnection = DB.getConnection();\n-\t\t\tStatement getuserStatement = connection.createStatement();\n-\t\t\tResultSet resultUser = getuserStatement.executeQuery(\"SELECT * FROM users \"\n-\t\t\t\t\t+ \"WHERE user_id = '\" + userId + \"'\");\n+\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT * FROM users WHERE user_id = ?\");\n+\t\t\tp.setInt(1, userId);\n+\t\t\t\n+\t\t\tResultSet resultUser = p.executeQuery();\n \t\t\t\n \t\t\tUser user = null;\n \t\t\tif (resultUser.next()) {\n@@ -137,7 +143,7 @@ public User getById(String userId) { //TODO change to userId\n \t\t\t}\n \t\t\t\n \t\t\tresultUser.close();\n-\t\t\tgetuserStatement.close();\n+\t\t\tp.close();\n \t\t\t\n \t\t\treturn user;\n \t\t} catch (SQLException e) {\n@@ -154,16 +160,17 @@ public User getById(String userId) { //TODO change to userId\n \t\t}\n \t}\n \n-\tpublic boolean checkPasswordForUser(String userId, String password) {\n+\tpublic boolean checkPasswordForUser(int userId, String password) {\n \t\tConnection connection = null;\n \t\ttry {\n \t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n \t\t\t\t\t.getInstance(\"SHA-1\").digest(password.getBytes()));\n \t\t\t\n \t\t\tconnection = DB.getConnection();\n-\t\t\tStatement getuserStatement = connection.createStatement();\n-\t\t\tResultSet resultUser = getuserStatement.executeQuery(\"SELECT * FROM users \"\n-\t\t\t\t\t+ \"WHERE user_id = '\" + userId + \"' AND password_digest = '\" + passwordDigest + \"'\");\n+\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT * FROM users WHERE user_id = ? AND password_digest = ?\");\n+\t\t\tp.setInt(1, userId);\n+\t\t\tp.setString(2, passwordDigest);\n+\t\t\tResultSet resultUser = p.executeQuery();\n \t\t\t\n \t\t\tboolean result;\n \t\t\tif (resultUser.next()) {\n@@ -174,7 +181,7 @@ public boolean checkPasswordForUser(String userId, String password) {\n \t\t\t}\n \t\t\t\n \t\t\tresultUser.close();\n-\t\t\tgetuserStatement.close();\n+\t\t\tp.close();\n \t\t\treturn result;\n \t\t} catch (SQLException e) {\n \t\t\te.printStackTrace();\n@@ -193,19 +200,20 @@ public boolean checkPasswordForUser(String userId, String password) {\n \t\t}\n \t}\n \n-\tpublic void changePassword(String userId, String password) {\n+\tpublic void changePassword(int userId, String password) {\n \t\tConnection connection = null;\n \t\ttry {\n \t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n \t\t\t\t\t.getInstance(\"SHA-1\").digest(password.getBytes()));\n \t\t\t\n \t\t\tconnection = DB.getConnection();\n-\t\t\tStatement statement = connection.createStatement();\n-\t\t\tString sql = \"UPDATE users SET password_digest = '\"+ passwordDigest + \"' where user_id = '\" + userId + \"';\";\n-\t\t\tstatement.executeUpdate(sql);\n+\t\t\tPreparedStatement p = connection.prepareStatement(\"UPDATE users SET password_digest = ? where user_id = ?\");\n+\t\t\tp.setString(1, passwordDigest);;\n+\t\t\tp.setInt(2, userId);\n+\t\t\tp.executeQuery();\n+\t\t\tp.close();\n \t\t\tplay.Logger.info(\"Password changed!\");\n \t\t\t\n-\t\t\tstatement.close();\n \t\t} catch (SQLException e) {\n \t\t\te.printStackTrace();\n \t\t} catch (NoSuchAlgorithmException e) {\n@@ -221,23 +229,38 @@ public void changePassword(String userId, String password) {\n \t\t}\n \t}\n \n-\tpublic boolean update(String userId, Map<String, String> toUpdate) {\n+\tpublic boolean update(int userId, Double weight, Double height, Date dateOfBirth) {\n \t\tConnection connection = null;\n \t\ttry {\t\n \t\t\tconnection = DB.getConnection();\n-\t\t\tStatement statement = connection.createStatement();\n-\t\t\tString sql = \"UPDATE users SET \";\n-\t\t\tfor (Entry<String, String> entry : toUpdate.entrySet()) {\n-\t\t\t\tsql += entry.getKey() + \" = '\" + entry.getValue() + \"', \";\n-\t\t\t}\n+\t\t\tString sql = \"UPDATE users SET   \";\n+\t\t\tif (weight != null)\n+\t\t\t\tsql += \"weight = ?, \";\n+\t\t\tif (height != null)\n+\t\t\t\tsql += \"height = ?, \";\n+\t\t\tif (dateOfBirth != null)\n+\t\t\t\tsql += \"date_of_birth = ?, \";\n \t\t\tsql = sql.substring(0, sql.length() - 2);\n-\t\t\tsql += \" where user_id = '\" + userId + \"';\";\n+\t\t\tsql += \" WHERE user_id = ?\";\n \t\t\t\n-\t\t\tplay.Logger.info(sql);\n-\t\t\tstatement.executeUpdate(sql);\n+\t\t\tPreparedStatement p = connection.prepareStatement(sql);\n+\n+\t\t\tint i = 1;\n+\t\t\tif (weight != null)\n+\t\t\t\tp.setDouble(i++, weight);\n+\t\t\tif (height != null)\n+\t\t\t\tp.setDouble(i++, height);\n+\t\t\tif (dateOfBirth != null)\n+\t\t\t\tp.setDate(i++, dateOfBirth);\n \t\t\t\n+\t\t\tp.setInt(i, userId);\n+\n+\t\t\tplay.Logger.info(sql);\n+\n+\t\t\tif (i > 1)\n+\t\t\t\tp.executeUpdate();\n \t\t\t\n-\t\t\tstatement.close();\n+\t\t\tp.close();\n \t\t\treturn true;\n \t\t} catch (SQLException e) {\n \t\t\te.printStackTrace();\n@@ -259,8 +282,9 @@ public List<Stranger> getStrangersForUser(int userId) {\n \t\tConnection connection = null;\n \t\ttry {\t\n \t\t\tconnection = DB.getConnection();\n-\t\t\tStatement statement = connection.createStatement();\n-\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT * FROM random_strangers_of_user(\" + userId + \")\");\n+\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT * FROM random_strangers_of_user(?)\");\n+\t\t\tp.setInt(1, userId);\n+\t\t\tResultSet resultSet = p.executeQuery();\n \t\t\t\n \t\t\tStranger stranger = null;\n \t\t\twhile (resultSet.next()) {\n@@ -272,7 +296,7 @@ public List<Stranger> getStrangersForUser(int userId) {\n \t\t\t}\n \t\t\t\n \t\t\tresultSet.close();\n-\t\t\tstatement.close();\n+\t\t\tp.close();\n \t\t} catch (SQLException e) {\n \t\t\te.printStackTrace();\n \t\t} finally {"
        },
        {
          "filename": "src/app/database/WorkoutDao.java",
          "status": "modified",
          "additions": 48,
          "deletions": 27,
          "patch": "@@ -4,7 +4,6 @@\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n-import java.sql.Statement;\n import java.sql.Timestamp;\n import java.sql.Types;\n import java.util.ArrayList;\n@@ -25,18 +24,55 @@ public static WorkoutDao get() {\n \tprivate WorkoutDao() {}\n \t\n \tpublic List<Workout> getAll() {\n-\t\treturn getWorkouts(\"SELECT workouts.*, gyms.gym_name \"\n-\t\t\t\t+ \"FROM workouts \"\n-\t\t\t\t+ \"LEFT JOIN gyms using (gym_id) \"\n-\t\t\t\t+ \"ORDER BY workouts.finished_at DESC\");\n+\t\tList<Workout> workouts = new ArrayList<Workout>();\n+\t\tConnection connection = null;\n+\t\ttry {\n+\t\t\tconnection = DB.getConnection();\n+\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT workouts.*, gyms.gym_name \"\n+\t\t\t\t\t+ \"FROM workouts \"\n+\t\t\t\t\t+ \"LEFT JOIN gyms using (gym_id) \"\n+\t\t\t\t\t+ \"ORDER BY workouts.finished_at DESC\");\n+\t\t\tworkouts = buildWorkouts(p.executeQuery());\n+\t\t\tp.close();\n+\t\t} catch (SQLException e) {\n+\t\t\te.printStackTrace();\n+\t\t} finally {\n+\t\t\tif (connection != null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tconnection.close();\n+\t\t\t\t} catch (SQLException e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn workouts;\n \t}\n \t\n \tpublic List<Workout> getUserWorkouts(int userId) {\n-\t\treturn getWorkouts(\"SELECT workouts.*, gyms.gym_name \"\n-\t\t\t\t+ \"FROM workouts \"\n-\t\t\t\t+ \"LEFT JOIN gyms using (gym_id) \"\n-\t\t\t\t+ \"WHERE user_id = \" + userId + \" \"\n-\t\t\t\t+ \"ORDER BY workouts.finished_at DESC\");\n+\t\tList<Workout> workouts = new ArrayList<Workout>();\n+\t\tConnection connection = null;\n+\t\ttry {\n+\t\t\tconnection = DB.getConnection();\n+\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT workouts.*, gyms.gym_name \"\n+\t\t\t\t\t+ \"FROM workouts \"\n+\t\t\t\t\t+ \"LEFT JOIN gyms using (gym_id) \"\n+\t\t\t\t\t+ \"WHERE user_id = ? \"\n+\t\t\t\t\t+ \"ORDER BY workouts.finished_at DESC\");\n+\t\t\tp.setInt(1, userId);\n+\t\t\tworkouts = buildWorkouts(p.executeQuery());\n+\t\t\tp.close();\n+\t\t} catch (SQLException e) {\n+\t\t\te.printStackTrace();\n+\t\t} finally {\n+\t\t\tif (connection != null) {\n+\t\t\t\ttry {\n+\t\t\t\t\tconnection.close();\n+\t\t\t\t} catch (SQLException e) {\n+\t\t\t\t\te.printStackTrace();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn workouts;\n \t}\n \t\n \tpublic boolean create(Workout workout) {\n@@ -116,15 +152,10 @@ public boolean create(Workout workout) {\n \t\t}\n \t}\n \t\n-\tprivate List<Workout> getWorkouts(String sql) {\n+\tprivate List<Workout> buildWorkouts(ResultSet resultSet) {\n \t\tList<Workout> workouts = new ArrayList<Workout>();\n-\t\t\n-\t\tConnection connection = null;\n+\n \t\ttry {\n-\t\t\tconnection = DB.getConnection();\n-\t\t\tStatement statement = connection.createStatement();\n-\t\t\tResultSet resultSet = statement.executeQuery(sql);\n-\t\t\t\n \t\t\twhile (resultSet.next()) {\n \t\t\t\tint id = resultSet.getInt(\"workout_id\");\n \t\t\t\tint userId = resultSet.getInt(\"user_id\");\n@@ -138,19 +169,9 @@ private List<Workout> getWorkouts(String sql) {\n \t\t\t\tw.setNote(note);\n \t\t\t\tworkouts.add(w);\n \t\t\t}\n-\t\t\t\n \t\t\tresultSet.close();\n-\t\t\tstatement.close();\n \t\t} catch (SQLException e) {\n \t\t\te.printStackTrace();\n-\t\t} finally {\n-\t\t\tif (connection != null) {\n-\t\t\t\ttry {\n-\t\t\t\t\tconnection.close();\n-\t\t\t\t} catch (SQLException e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t}\n \t\t}\n \n \t\treturn workouts;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c11e5ee9712e5dead378bf39ce63e005ab0ce1b4",
            "date": "2018-06-12T03:26:37Z",
            "author_login": "j-nowak"
          },
          {
            "sha": "642b6e0df3352a5af31cb0dc69b830710c7d8c07",
            "date": "2018-06-10T20:33:14Z",
            "author_login": "krukon"
          },
          {
            "sha": "3ab71b93986a7082d7218c5ed4b67218c09eae4c",
            "date": "2018-06-10T19:34:48Z",
            "author_login": "krukon"
          },
          {
            "sha": "5ca87d148322f2fb0df01440ad40d30c762f7e02",
            "date": "2018-05-09T04:42:10Z",
            "author_login": "j-nowak"
          },
          {
            "sha": "9f9f027d99d1ac53df7aecbab8da6b4b6609ca57",
            "date": "2018-05-09T04:36:34Z",
            "author_login": "j-nowak"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-89",
    "description": "A vulnerability has been found in j-nowak workout-organizer and classified as critical. This vulnerability affects unknown code. The manipulation leads to sql injection. The patch is identified as 13cd6c3d1210640bfdb39872b2bb3597aa991279. It is recommended to apply a patch to fix this issue. VDB-217714 is the identifier assigned to this vulnerability.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-09T21:15:10.300",
    "last_modified": "2024-11-21T02:24:13.393",
    "fix_date": "2015-02-03T20:22:56Z"
  },
  "references": [
    {
      "url": "https://github.com/j-nowak/workout-organizer/commit/13cd6c3d1210640bfdb39872b2bb3597aa991279",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217714",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217714",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/j-nowak/workout-organizer/commit/13cd6c3d1210640bfdb39872b2bb3597aa991279",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217714",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217714",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.534811",
    "processing_status": "enhanced"
  }
}