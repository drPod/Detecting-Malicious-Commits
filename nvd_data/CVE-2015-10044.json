{
  "cve_id": "CVE-2015-10044",
  "github_data": {
    "repository": "gophergala/sqldump",
    "fix_commit": "76db54e9073b5248b8863e71a63d66a32d567d21",
    "related_commits": [
      "76db54e9073b5248b8863e71a63d66a32d567d21",
      "76db54e9073b5248b8863e71a63d66a32d567d21"
    ],
    "patch_url": "https://github.com/gophergala/sqldump/commit/76db54e9073b5248b8863e71a63d66a32d567d21.patch",
    "fix_commit_details": {
      "sha": "76db54e9073b5248b8863e71a63d66a32d567d21",
      "commit_date": "2015-01-25T01:26:19Z",
      "author": {
        "login": "octopusinvitro",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Protection against sql injection doesnt work with ? for table. Using HTMLEscapeString instead",
        "length": 93,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 86,
        "additions": 47,
        "deletions": 39
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 9,
          "deletions": 8,
          "patch": "@@ -7,13 +7,13 @@ Use your fantasy for best UX and choose high levels of abstraction and imaginati\n \n ## prepare\n \n-    sudo mysqladmin --defaults-file=/etc/mysql/debian.cnf create gotestdb\n-    sudo mysql --defaults-file=/etc/mysql/debian.cnf -e \"GRANT ALL PRIVILEGES  ON gotestdb.*  TO 'go_user'@'localhost' IDENTIFIED BY 'mypassword'  WITH GRANT OPTION;\"\n-    mysql -p\"mypassword\" -u go_user gotestdb -e 'create table posts (title varchar(64) default null, start date default null);'\n-    mysql -p\"mypassword\" -u go_user gotestdb -e 'insert into posts values(\"hello\",\"2015-01-01\");'\n-    mysql -p\"mypassword\" -u go_user gotestdb -e 'insert into posts values(\"more\",\"2015-01-03\");'\n-    mysql -p\"mypassword\" -u go_user gotestdb -e 'insert into posts values(\"end\",\"2015-01-23\");'\n-    mysql -p\"mypassword\" -u go_user gotestdb -B -e 'select * from posts;'\n+    sudo mysqladmin --defaults-file=/etc/mysql/debian.cnf create galadb\n+    sudo mysql --defaults-file=/etc/mysql/debian.cnf -e \"GRANT ALL PRIVILEGES  ON galadb.*  TO 'galagopher'@'localhost' IDENTIFIED BY 'mypassword'  WITH GRANT OPTION;\"\n+    mysql -p\"mypassword\" -u galagopher galadb -e 'create table posts (title varchar(64) default null, start date default null);'\n+    mysql -p\"mypassword\" -u galagopher galadb -e 'insert into posts values(\"hello\",\"2015-01-01\");'\n+    mysql -p\"mypassword\" -u galagopher galadb -e 'insert into posts values(\"more\",\"2015-01-03\");'\n+    mysql -p\"mypassword\" -u galagopher galadb -e 'insert into posts values(\"end\",\"2015-01-23\");'\n+    mysql -p\"mypassword\" -u galagopher galadb -B -e 'select * from posts;'\n \n ## install\n \n@@ -38,7 +38,8 @@ Use your fantasy for best UX and choose high levels of abstraction and imaginati\n \n ## perspectives\n \n-. output in tables\n+- output in tables\n+- menu line\n - choice for different database drivers\n - insert and edit records\n "
        },
        {
          "filename": "auth.go",
          "status": "modified",
          "additions": 20,
          "deletions": 12,
          "patch": "@@ -1,4 +1,4 @@\n-/* no Credentials management needed\n+/* no session management needed\n  * Credentials are stored at user side using secure cookies\n  *\n  * credits:\n@@ -16,25 +16,29 @@ var cookieHandler = securecookie.New(\n \tsecurecookie.GenerateRandomKey(64),\n \tsecurecookie.GenerateRandomKey(32))\n \n-func getCredentials(request *http.Request) (userName string, password string) {\n-\tif cookie, err := request.Cookie(\"Credentials\"); err == nil {\n+func getCredentials(request *http.Request) (userName string, password string, host string, port string) {\n+\tif cookie, err := request.Cookie(\"Datasource\"); err == nil {\n \t\tcookieValue := make(map[string]string)\n-\t\tif err = cookieHandler.Decode(\"Credentials\", cookie.Value, &cookieValue); err == nil {\n+\t\tif err = cookieHandler.Decode(\"Datasource\", cookie.Value, &cookieValue); err == nil {\n \t\t\tuserName = cookieValue[\"user\"]\n \t\t\tpassword = cookieValue[\"passwd\"]\n+\t\t\thost = cookieValue[\"host\"]\n+\t\t\tport = cookieValue[\"port\"]\n \t\t}\n \t}\n-\treturn userName, password\n+\treturn userName, password, host, port\n }\n \n-func setCredentials(userName string, pw string, w http.ResponseWriter) {\n+func setCredentials( w http.ResponseWriter, userName string, pw string, host string, port string) {\n \tvalue := map[string]string{\n \t\t\"user\":   userName,\n \t\t\"passwd\": pw,\n+\t\t\"host\": host,\n+\t\t\"port\": port,\n \t}\n-\tif encoded, err := cookieHandler.Encode(\"Credentials\", value); err == nil {\n+\tif encoded, err := cookieHandler.Encode(\"Datasource\", value); err == nil {\n \t\tcookie := &http.Cookie{\n-\t\t\tName:  \"Credentials\",\n+\t\t\tName:  \"Datasource\",\n \t\t\tValue: encoded,\n \t\t\tPath:  \"/\",\n \t\t}\n@@ -44,7 +48,7 @@ func setCredentials(userName string, pw string, w http.ResponseWriter) {\n \n func clearCredentials(w http.ResponseWriter) {\n \tcookie := &http.Cookie{\n-\t\tName:   \"Credentials\",\n+\t\tName:   \"Datasource\",\n \t\tValue:  \"\",\n \t\tPath:   \"/\",\n \t\tMaxAge: -1,\n@@ -55,8 +59,10 @@ func clearCredentials(w http.ResponseWriter) {\n func loginHandler(w http.ResponseWriter, request *http.Request) {\n \tuser := request.FormValue(\"user\")\n \tpass := request.FormValue(\"password\")\n+\thost := request.FormValue(\"host\")\n+\tport := request.FormValue(\"port\")\n \tif user != \"\" && pass != \"\" {\n-\t\tsetCredentials(user, pass, w)\n+\t\tsetCredentials(w, user, pass, host, port)\n \t}\n \thttp.Redirect(w, request, \"/\", 302)\n }\n@@ -69,8 +75,10 @@ func logoutHandler(w http.ResponseWriter, request *http.Request) {\n const loginPage = `\n <h1>Login</h1>\n <form method=\"post\" action=\"/login\">\n-   <label for=\"user\">User name</label><input type=\"text\" id=\"user\" name=\"user\">\n-   <label for=\"password\">Password</label><input type=\"password\" id=\"password\" name=\"password\">\n+   <label for=\"user\">User name</label><input type=\"text\" id=\"user\" name=\"user\"><br>\n+   <label for=\"password\">Password</label><input type=\"password\" id=\"password\" name=\"password\"><br>\n+   <label for=\"host\">Host</label><input type=\"text\" id=\"host\" name=\"host\" value=\"localhost\"><br>\n+   <label for=\"port\">Port</label><input type=\"text\" id=\"port\" name=\"port\" value=\"3306\"><br>\n    <button type=\"submit\">Login</button>\n </form>\n `"
        },
        {
          "filename": "aux.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -21,7 +21,7 @@ func linkDeeper(cwd string, link string, name string) string {\n }\n \n // Compose dataSourceName from components and globals\n-func dsn(user string, pw string, db string) string {\n+func dsn(user string, pw string, host string, port string, db string) string {\n \treturn user + \":\" + pw + \"@tcp(\" + host + \":\" + port + \")/\" + db\n }\n "
        },
        {
          "filename": "dump.go",
          "status": "modified",
          "additions": 14,
          "deletions": 13,
          "patch": "@@ -1,7 +1,7 @@\n package main\n \n /* TODO\n- * turn into generic functions\n+ * turn into more generic functions for printing into tables\n  */\n \n import (\n@@ -11,13 +11,14 @@ import (\n \t\"net/http\"\n \t\"strconv\"\n \t\"strings\"\n+\t\"text/template\"\n )\n \n // Shows selection of databases at top level\n func home(w http.ResponseWriter, r *http.Request) {\n \n-\tuser, pw := getCredentials(r)\n-\tconn, err := sql.Open(\"mysql\", dsn(user, pw, database))\n+\tuser, pw, h , p := getCredentials(r)\n+\tconn, err := sql.Open(\"mysql\", dsn(user, pw, h, p, database))\n \tcheckY(err)\n \tdefer conn.Close()\n \n@@ -41,9 +42,9 @@ func home(w http.ResponseWriter, r *http.Request) {\n //  Dump all tables of a database\n func dumpdb(w http.ResponseWriter, r *http.Request, parray []string) {\n \n-\tuser, pw := getCredentials(r)\n+\tuser, pw, h, p := getCredentials(r)\n \tdatabase := parray[0]\n-\tconn, err := sql.Open(\"mysql\", dsn(user, pw, database))\n+\tconn, err := sql.Open(\"mysql\", dsn(user, pw, h, p, database))\n \tcheckY(err)\n \tdefer conn.Close()\n \n@@ -67,18 +68,18 @@ func dumpdb(w http.ResponseWriter, r *http.Request, parray []string) {\n //  Dump all records of a table, one per line\n func dumptable(w http.ResponseWriter, r *http.Request, parray []string) {\n \n-\tuser, pw := getCredentials(r)\n+\tuser, pw, h, p := getCredentials(r)\n \tdatabase := parray[0]\n \ttable := parray[1]\n \n-\tconn, err := sql.Open(\"mysql\", dsn(user, pw, database))\n+\tconn, err := sql.Open(\"mysql\", dsn(user, pw, h, p, database))\n \tcheckY(err)\n \tdefer conn.Close()\n \n-\tstatement, err := conn.Prepare(\"select * from ?\")\n+\tstatement, err := conn.Prepare(\"select * from \" + template.HTMLEscapeString(table))\n \tcheckY(err)\n \n-\trows, err := statement.Query(table)\n+\trows, err := statement.Query()\n \tcheckY(err)\n \tdefer rows.Close()\n \n@@ -123,15 +124,15 @@ func dumprecord(w http.ResponseWriter, r *http.Request, parray []string) {\n \trec, err := strconv.Atoi(parray[2])\n \tcheckY(err)\n \n-\tuser, pw := getCredentials(r)\n-\tconn, err := sql.Open(\"mysql\", dsn(user, pw, database))\n+\tuser, pw, h, p := getCredentials(r)\n+\tconn, err := sql.Open(\"mysql\", dsn(user, pw, h, p, database))\n \tcheckY(err)\n \tdefer conn.Close()\n \n-\tstatement, err := conn.Prepare(\"select * from ?\")\n+\tstatement, err := conn.Prepare(\"select * from \" + template.HTMLEscapeString(table))\n \tcheckY(err)\n \n-\trows, err := statement.Query(table)\n+\trows, err := statement.Query()\n \tcheckY(err)\n \tdefer rows.Close()\n "
        },
        {
          "filename": "sqldump.go",
          "status": "modified",
          "additions": 3,
          "deletions": 5,
          "patch": "@@ -7,8 +7,6 @@ import (\n )\n \n var base_url = \"http://localhost\"\n-var host = \"localhost\"\n-var port = \"3306\"\n var database = \"information_schema\"\n \n func faviconHandler(w http.ResponseWriter, r *http.Request) {\n@@ -38,10 +36,10 @@ func pathHandler(w http.ResponseWriter, r *http.Request) {\n }\n \n func indexHandler(w http.ResponseWriter, r *http.Request) {\n-\tu, _ := getCredentials(r)\n+\tuser , _ , host , port := getCredentials(r)\n \n-\tif u != \"\" {\n-\t\tfmt.Fprintln(w, \"<h1>\", u, \"</h1>\")\n+\tif user != \"\" {\n+\t\tfmt.Fprintln(w, \"<p>\", user + \"@\" + host + \":\" + port, \"</p>\")\n \t\tpathHandler(w, r)\n \t} else {\n \t\tloginPageHandler(w, r)"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b79635d3c2750a0b9cfa3f120aa8b2ef184c8bb8",
            "date": "2015-01-26T00:55:03Z",
            "author_login": "octopusinvitro"
          },
          {
            "sha": "4afa6fd98f965b086409e4c7ff370726b490fdce",
            "date": "2015-01-26T00:54:39Z",
            "author_login": "octopusinvitro"
          },
          {
            "sha": "de683d95a805faa66e8f51bfcd8d2a49f1b27184",
            "date": "2015-01-26T00:05:17Z",
            "author_login": "octopusinvitro"
          },
          {
            "sha": "56607cc740891d2f80b66b529e834122df706933",
            "date": "2015-01-25T23:29:15Z",
            "author_login": "octopusinvitro"
          },
          {
            "sha": "a61b5ebd6a1ad55a0a28321990f6c4737a1082d2",
            "date": "2015-01-25T22:04:33Z",
            "author_login": "octopusinvitro"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-89",
    "description": "A vulnerability classified as critical was found in gophergala sqldump. This vulnerability affects unknown code. The manipulation leads to sql injection. The patch is identified as 76db54e9073b5248b8863e71a63d66a32d567d21. It is recommended to apply a patch to fix this issue. VDB-218350 is the identifier assigned to this vulnerability.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-15T10:15:08.913",
    "last_modified": "2024-11-21T02:24:14.803",
    "fix_date": "2015-01-25T01:26:19Z"
  },
  "references": [
    {
      "url": "https://github.com/gophergala/sqldump/commit/76db54e9073b5248b8863e71a63d66a32d567d21",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.218350",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.218350",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gophergala/sqldump/commit/76db54e9073b5248b8863e71a63d66a32d567d21",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.218350",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.218350",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.557105",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sqldump",
    "owner": "gophergala",
    "created_at": "2015-01-24T01:22:59Z",
    "updated_at": "2015-07-06T14:45:04Z",
    "pushed_at": "2015-01-26T00:55:29Z",
    "size": 211,
    "stars": 3,
    "forks": 2,
    "open_issues": 0,
    "watchers": 3,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 13817
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:37:47.087810"
  }
}