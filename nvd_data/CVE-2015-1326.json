{
  "cve_id": "CVE-2015-1326",
  "github_data": {
    "repository": "martinpitt/python-dbusmock",
    "fix_commit": "4e7d0df9093",
    "related_commits": [
      "4e7d0df9093",
      "4e7d0df9093"
    ],
    "patch_url": "https://github.com/martinpitt/python-dbusmock/commit/4e7d0df9093.patch",
    "fix_commit_details": {
      "sha": "4e7d0df9093",
      "commit_date": "2015-05-11T14:00:10Z",
      "author": {
        "login": "martinpitt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "SECURITY FIX: Prevent code execution through crafted pyc files",
        "length": 718,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 36,
        "additions": 28,
        "deletions": 8
      },
      "files": [
        {
          "filename": "NEWS",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -1,3 +1,16 @@\n+0.15.1 (UNRELEASED)\n+-------------------\n+ - SECURITY FIX: When loading a template from an arbitrary file through the\n+   AddTemplate() D-Bus method call or DBusTestCase.spawn_server_template()\n+   Python method, don't create or use Python's *.pyc cached files. By tricking\n+   a user into loading a template from a world-writable directory like /tmp, an\n+   attacker could run arbitrary code with the user's privileges by putting a\n+   crafted .pyc file into that directory. Note that this is highly unlikely to\n+   actually appear in practice as custom dbusmock templates are usually shipped\n+   in project directories, not directly in world-writable directories.\n+   Thanks to Simon McVittie for discovering this!\n+   (LP: #1453815, CVE-2015-1326)\n+\n 0.15 (2015-05-08)\n -------------------\n  - NetworkManager template: Restore nm-specific PropertiesChanged signal"
        },
        {
          "filename": "dbusmock/mockobject.py",
          "status": "modified",
          "additions": 5,
          "deletions": 8,
          "patch": "@@ -17,6 +17,7 @@\n import sys\n import types\n import importlib\n+import imp\n from xml.etree import ElementTree\n \n # we do not use this ourselves, but mock methods often want to use this\n@@ -40,14 +41,10 @@\n \n def load_module(name):\n     if os.path.exists(name) and os.path.splitext(name)[1] == '.py':\n-        sys.path.insert(0, os.path.dirname(os.path.abspath(name)))\n-        try:\n-            m = os.path.splitext(os.path.basename(name))[0]\n-            module = importlib.import_module(m)\n-        finally:\n-            sys.path.pop(0)\n-\n-        return module\n+        mod = imp.new_module(os.path.splitext(os.path.basename(name))[0])\n+        with open(name) as f:\n+            exec(f.read(), mod.__dict__, mod.__dict__)\n+        return mod\n \n     return importlib.import_module('dbusmock.templates.' + name)\n "
        },
        {
          "filename": "tests/test_api.py",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -592,6 +592,16 @@ def load(mock, parameters):\n             self.addCleanup(p_mock.terminate)\n             self.addCleanup(p_mock.stdout.close)\n \n+            # ensure that we don't use/write any .pyc files, they are dangerous\n+            # in a world-writable directory like /tmp\n+            self.assertFalse(os.path.exists(my_template.name + 'c'))\n+            try:\n+                from importlib.util import cache_from_source\n+                self.assertFalse(os.path.exists(cache_from_source(my_template.name)))\n+            except ImportError:\n+                # python < 3.4\n+                pass\n+\n         self.assertEqual(dbus_ultimate.Answer(), 42)\n \n         # should appear in introspection"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "12af54ceaa56ba5e4aa353078c2c0b1083405eeb",
            "date": "2024-12-27T20:17:57Z",
            "author_login": "martinpitt"
          },
          {
            "sha": "bd8a3553f0253c6714a3b0c5469825bb9c21c704",
            "date": "2024-12-21T08:20:16Z",
            "author_login": "martinpitt"
          },
          {
            "sha": "e49dfe5cfcd351c8ff869d1c7205d6ae944f12f3",
            "date": "2024-12-21T07:30:09Z",
            "author_login": "martinpitt"
          },
          {
            "sha": "11e97db188e0ad36c19425c911167dfa0c61f596",
            "date": "2024-12-18T10:54:13Z",
            "author_login": "agx"
          },
          {
            "sha": "a2a4f6444841b04b09c183b9602f96ba8e7d648f",
            "date": "2024-12-18T15:12:03Z",
            "author_login": "agx"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-20",
    "description": "python-dbusmock before version 0.15.1 AddTemplate() D-Bus method call or DBusTestCase.spawn_server_template() method could be tricked into executing malicious code if an attacker supplies a .pyc file.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2019-04-22T16:29:00.770",
    "last_modified": "2024-11-21T02:25:10.453",
    "fix_date": "2015-05-11T14:00:10Z"
  },
  "references": [
    {
      "url": "https://github.com/martinpitt/python-dbusmock/commit/4e7d0df9093",
      "source": "security@ubuntu.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/martinpitt/python-dbusmock/commit/4e7d0df9093",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:50.445144",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "python-dbusmock",
    "owner": "martinpitt",
    "created_at": "2015-03-04T15:45:38Z",
    "updated_at": "2024-12-27T20:18:36Z",
    "pushed_at": "2024-12-27T20:24:37Z",
    "size": 1402,
    "stars": 62,
    "forks": 51,
    "open_issues": 14,
    "watchers": 62,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 405777,
      "Shell": 2802
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-14T17:15:31.246255"
  }
}