{
  "cve_id": "CVE-2015-1340",
  "github_data": {
    "repository": "lxc/lxd",
    "fix_commit": "19c6961cc1012c8a529f20807328a9357f5034f4",
    "related_commits": [
      "19c6961cc1012c8a529f20807328a9357f5034f4",
      "19c6961cc1012c8a529f20807328a9357f5034f4"
    ],
    "patch_url": "https://github.com/lxc/lxd/commit/19c6961cc1012c8a529f20807328a9357f5034f4.patch",
    "fix_commit_details": {
      "sha": "19c6961cc1012c8a529f20807328a9357f5034f4",
      "commit_date": "2015-10-02T23:08:52Z",
      "author": {
        "login": "stgraber",
        "type": "User",
        "stats": {
          "total_commits": 12300,
          "average_weekly_commits": 23.076923076923077,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 520
        }
      },
      "commit_message": {
        "title": "CVE-2015-1340: Fix race condition between fchown and chmod in idmapset",
        "length": 671,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 98,
        "additions": 88,
        "deletions": 10
      },
      "files": [
        {
          "filename": "shared/idmapset_linux.go",
          "status": "renamed",
          "additions": 5,
          "deletions": 9,
          "patch": "@@ -223,6 +223,8 @@ func GetOwner(path string) (int, int, error) {\n }\n \n func (set *IdmapSet) doUidshiftIntoContainer(dir string, testmode bool, how string) error {\n+\tdir = strings.TrimRight(dir, \"/\")\n+\n \tconvert := func(path string, fi os.FileInfo, err error) (e error) {\n \t\tuid, gid, err := GetOwner(path)\n \t\tif err != nil {\n@@ -238,15 +240,9 @@ func (set *IdmapSet) doUidshiftIntoContainer(dir string, testmode bool, how stri\n \t\tif testmode {\n \t\t\tfmt.Printf(\"I would shift %q to %d %d\\n\", path, newuid, newgid)\n \t\t} else {\n-\t\t\terr = os.Lchown(path, int(newuid), int(newgid))\n-\t\t\tif err == nil {\n-\t\t\t\tm := fi.Mode()\n-\t\t\t\tif m&os.ModeSymlink == 0 {\n-\t\t\t\t\terr = os.Chmod(path, m)\n-\t\t\t\t\tif err != nil {\n-\t\t\t\t\t\tfmt.Printf(\"Error resetting mode on %q, continuing\\n\", path)\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\terr = ShiftOwner(dir, path, int(newuid), int(newgid))\n+\t\t\tif err != nil {\n+\t\t\t\treturn err\n \t\t\t}\n \t\t}\n \t\treturn nil"
        },
        {
          "filename": "shared/util_linux.go",
          "status": "modified",
          "additions": 83,
          "deletions": 1,
          "patch": "@@ -17,15 +17,24 @@ import (\n /*\n #define _GNU_SOURCE\n #include <sys/types.h>\n+#include <sys/stat.h>\n #include <unistd.h>\n #include <stdlib.h>\n #include <grp.h>\n #include <pty.h>\n #include <errno.h>\n #include <fcntl.h>\n+#include <limits.h>\n #include <string.h>\n #include <stdio.h>\n-#include <stdio.h>\n+\n+#ifndef AT_SYMLINK_FOLLOW\n+#define AT_SYMLINK_FOLLOW    0x400\n+#endif\n+\n+#ifndef AT_EMPTY_PATH\n+#define AT_EMPTY_PATH       0x1000\n+#endif\n \n // This is an adaption from https://codereview.appspot.com/4589049, to be\n // included in the stdlib with the stdlib's license.\n@@ -107,9 +116,82 @@ void create_pipe(int *master, int *slave) {\n \t*master = pipefd[0];\n \t*slave = pipefd[1];\n }\n+\n+int shiftowner(char *basepath, char *path, int uid, int gid) {\n+\tstruct stat sb;\n+\tint fd, r;\n+\tchar fdpath[PATH_MAX];\n+\tchar realpath[PATH_MAX];\n+\n+\tfd = open(path, O_PATH|O_NOFOLLOW);\n+\tif (fd < 0 ) {\n+\t\tperror(\"Failed open\");\n+\t\treturn 1;\n+\t}\n+\n+\tr = sprintf(fdpath, \"/proc/self/fd/%d\", fd);\n+\tif (r < 0) {\n+\t\tperror(\"Failed sprintf\");\n+\t\tclose(fd);\n+\t\treturn 1;\n+\t}\n+\n+\tr = readlink(fdpath, realpath, PATH_MAX);\n+\tif (r < 0) {\n+\t\tperror(\"Failed readlink\");\n+\t\tclose(fd);\n+\t\treturn 1;\n+\t}\n+\n+\tif (strlen(realpath) < strlen(basepath)) {\n+\t\tprintf(\"Invalid path, source is outside of basepath.\\n\");\n+\t\tclose(fd);\n+\t\treturn 1;\n+\t}\n+\n+\tif (strncmp(realpath, basepath, strlen(basepath))) {\n+\t\tprintf(\"Invalid path, source is outside of basepath.\\n\");\n+\t\tclose(fd);\n+\t\treturn 1;\n+\t}\n+\n+\tr = fstat(fd, &sb);\n+\tif (r < 0) {\n+\t\tperror(\"Failed fstat\");\n+\t\tclose(fd);\n+\t\treturn 1;\n+\t}\n+\n+\tr = fchownat(fd, \"\", uid, gid, AT_EMPTY_PATH|AT_SYMLINK_NOFOLLOW);\n+\tif (r < 0) {\n+\t\tperror(\"Failed chown\");\n+\t\tclose(fd);\n+\t\treturn 1;\n+\t}\n+\n+\tif (!S_ISLNK(sb.st_mode)) {\n+\t\tr = chmod(fdpath, sb.st_mode);\n+\t\tif (r < 0) {\n+\t\t\tperror(\"Failed chmod\");\n+\t\t\tclose(fd);\n+\t\t\treturn 1;\n+\t\t}\n+\t}\n+\n+\tclose(fd);\n+\treturn 0;\n+}\n */\n import \"C\"\n \n+func ShiftOwner(basepath string, path string, uid int, gid int) error {\n+\tr := C.shiftowner(C.CString(basepath), C.CString(path), C.int(uid), C.int(gid))\n+\tif r != 0 {\n+\t\treturn fmt.Errorf(\"Failed to change ownership of: %s\", path)\n+\t}\n+\treturn nil\n+}\n+\n func OpenPty(uid, gid int) (master *os.File, slave *os.File, err error) {\n \tfd_master := C.int(-1)\n \tfd_slave := C.int(-1)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e35b3540c052049aaa7202272ba693be9d0f8383",
            "date": "2025-01-10T21:37:37Z",
            "author_login": "hallyn"
          },
          {
            "sha": "d7d79eb5029169b639ffb6cb5bc6390249975ada",
            "date": "2025-01-10T21:35:48Z",
            "author_login": "hallyn"
          },
          {
            "sha": "66117ce562e357f3798472e8e5b91c8693405a69",
            "date": "2025-01-10T12:37:43Z",
            "author_login": "stgraber"
          },
          {
            "sha": "eb751deb68cbf1b916a7667e68f5832ef2b6dc4e",
            "date": "2025-01-10T12:31:26Z",
            "author_login": "stgraber"
          },
          {
            "sha": "1591c1d37ad42089395679a783460fa7dda03309",
            "date": "2025-01-10T03:51:32Z",
            "author_login": "stgraber"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-362",
    "description": "LXD before version 0.19-0ubuntu5 doUidshiftIntoContainer() has an unsafe Chmod() call that races against the stat in the Filepath.Walk() function. A symbolic link created in that window could cause any file on the system to have any mode of the attacker's choice.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2019-04-22T16:29:00.897",
    "last_modified": "2024-11-21T02:25:12.383",
    "fix_date": "2015-10-02T23:08:52Z"
  },
  "references": [
    {
      "url": "https://github.com/lxc/lxd/commit/19c6961cc1012c8a529f20807328a9357f5034f4",
      "source": "security@ubuntu.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lxc/lxd/commit/19c6961cc1012c8a529f20807328a9357f5034f4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:50.445279",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "incus",
    "owner": "lxc",
    "created_at": "2023-07-22T12:43:13Z",
    "updated_at": "2025-01-14T11:54:05Z",
    "pushed_at": "2025-01-10T21:37:38Z",
    "size": 132323,
    "stars": 2982,
    "forks": 234,
    "open_issues": 40,
    "watchers": 2982,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 9824412,
      "Shell": 937140,
      "C": 228286,
      "Python": 13944,
      "Makefile": 12262,
      "Dockerfile": 2951,
      "Nix": 967,
      "Emacs Lisp": 256
    },
    "commit_activity": {
      "total_commits_last_year": 2782,
      "avg_commits_per_week": 53.5,
      "days_active_last_year": 309
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T19:21:22.444696"
  }
}