{
  "cve_id": "CVE-2015-1522",
  "github_data": {
    "repository": "bro/bro",
    "fix_commit": "6cedd67c381ff22fde653adf02ee31caf66c81a0",
    "related_commits": [
      "6cedd67c381ff22fde653adf02ee31caf66c81a0",
      "6cedd67c381ff22fde653adf02ee31caf66c81a0"
    ],
    "patch_url": "https://github.com/bro/bro/commit/6cedd67c381ff22fde653adf02ee31caf66c81a0.patch",
    "fix_commit_details": {
      "sha": "6cedd67c381ff22fde653adf02ee31caf66c81a0",
      "commit_date": "2015-01-23T16:49:15Z",
      "author": {
        "login": "jsiwek",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "DNP3: fix reachable assertion and buffer over-read/overflow.",
        "length": 701,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 87,
        "additions": 78,
        "deletions": 9
      },
      "files": [
        {
          "filename": "CHANGES",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -1,4 +1,15 @@\n \n+2.3-396 | 2015-01-23 10:49:15 -0600\n+\n+  * DNP3: fix reachable assertion and buffer over-read/overflow.\n+    CVE number pending. (Travis Emmert, Jon Siwek)\n+\n+  * Update binpac: Fix potential out-of-bounds memory reads in generated\n+    code. CVE-2014-9586. (John Villamil and Chris Rohlf - Yahoo\n+    Paranoids, Jon Siwek)\n+\n+  * Fixing (harmless) Coverity warning. (Robin Sommer)\n+\n 2.3-392 | 2015-01-15 09:44:15 -0800\n \n   * Small changes to EC curve names in a newer draft. (Johanna Amann)"
        },
        {
          "filename": "VERSION",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1 +1 @@\n-2.3-392\n+2.3-396"
        },
        {
          "filename": "src/analyzer/protocol/dnp3/DNP3.cc",
          "status": "modified",
          "additions": 51,
          "deletions": 7,
          "patch": "@@ -138,9 +138,14 @@ bool DNP3_Base::ProcessData(int len, const u_char* data, bool orig)\n \t\tif ( endp->in_hdr )\n \t\t\t{\n \t\t\t// We're parsing the DNP3 header and link layer, get that in full.\n-\t\t\tif ( ! AddToBuffer(endp, PSEUDO_APP_LAYER_INDEX, &data, &len) )\n+\t\t\tint res = AddToBuffer(endp, PSEUDO_APP_LAYER_INDEX, &data, &len);\n+\n+\t\t\tif ( res == 0 )\n \t\t\t\treturn true;\n \n+\t\t\tif ( res < 0 )\n+\t\t\t\treturn false;\n+\n \t\t\t// The first two bytes must always be 0x0564.\n \t\t\tif( endp->buffer[0] != 0x05 || endp->buffer[1] != 0x64 )\n \t\t\t\t{\n@@ -186,7 +191,11 @@ bool DNP3_Base::ProcessData(int len, const u_char* data, bool orig)\n \n \t\tif ( ! endp->in_hdr )\n \t\t\t{\n-\t\t\tassert(endp->pkt_length);\n+\t\t\tif ( endp->pkt_length <= 0 )\n+\t\t\t\t{\n+\t\t\t\tanalyzer->Weird(\"dnp3_negative_or_zero_length_link_layer\");\n+\t\t\t\treturn false;\n+\t\t\t\t}\n \n \t\t\t// We're parsing the DNP3 application layer, get that\n \t\t\t// in full now as well. We calculate the number of\n@@ -197,9 +206,14 @@ bool DNP3_Base::ProcessData(int len, const u_char* data, bool orig)\n \t\t\tint n = PSEUDO_APP_LAYER_INDEX + (endp->pkt_length - 5) + ((endp->pkt_length - 5) / 16) * 2\n \t\t\t\t\t+ 2 * ( ((endp->pkt_length - 5) % 16 == 0) ? 0 : 1) - 1 ;\n \n-\t\t\tif ( ! AddToBuffer(endp, n, &data, &len) )\n+\t\t\tint res = AddToBuffer(endp, n, &data, &len);\n+\n+\t\t\tif ( res == 0 )\n \t\t\t\treturn true;\n \n+\t\t\tif ( res < 0 )\n+\t\t\t\treturn false;\n+\n \t\t\t// Parse the the application layer data.\n \t\t\tif ( ! ParseAppLayer(endp) )\n \t\t\t\treturn false;\n@@ -213,19 +227,42 @@ bool DNP3_Base::ProcessData(int len, const u_char* data, bool orig)\n \treturn true;\n \t}\n \n-bool DNP3_Base::AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len)\n+int DNP3_Base::AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len)\n \t{\n \tif ( ! target_len )\n-\t\treturn true;\n+\t\treturn 1;\n+\n+\tif ( *len < 0 )\n+\t\t{\n+\t\treporter->AnalyzerError(analyzer, \"dnp3 negative input length: %d\", *len);\n+\t\treturn -1;\n+\t\t}\n+\n+\tif ( target_len < endp->buffer_len )\n+\t\t{\n+\t\treporter->AnalyzerError(analyzer, \"dnp3 invalid target length: %d - %d\",\n+\t\t                        target_len, endp->buffer_len);\n+\t\treturn -1;\n+\t\t}\n \n \tint to_copy = min(*len, target_len - endp->buffer_len);\n \n+\tif ( endp->buffer_len + to_copy > MAX_BUFFER_SIZE )\n+\t\t{\n+\t\treporter->AnalyzerError(analyzer, \"dnp3 buffer length exceeded: %d + %d\",\n+\t\t                        endp->buffer_len, to_copy);\n+\t\treturn -1;\n+\t\t}\n+\n \tmemcpy(endp->buffer + endp->buffer_len, *data, to_copy);\n \t*data += to_copy;\n \t*len -= to_copy;\n \tendp->buffer_len += to_copy;\n \n-\treturn endp->buffer_len == target_len;\n+\tif ( endp->buffer_len == target_len )\n+\t\treturn 1;\n+\n+\treturn 0;\n \t}\n \n bool DNP3_Base::ParseAppLayer(Endpoint* endp)\n@@ -256,8 +293,15 @@ bool DNP3_Base::ParseAppLayer(Endpoint* endp)\n \t\tif ( ! CheckCRC(n, data, data + n, \"app_chunk\") )\n \t\t\treturn false;\n \n+\t\tif ( data + n >= endp->buffer + endp->buffer_len )\n+\t\t\t{\n+\t\t\treporter->AnalyzerError(analyzer,\n+\t\t\t                        \"dnp3 app layer parsing overflow %d - %d\",\n+\t\t\t                        endp->buffer_len, n);\n+\t\t\treturn false;\n+\t\t\t}\n+\n \t\t// Pass on to BinPAC.\n-\t\tassert(data + n < endp->buffer + endp->buffer_len);\n \t\tflow->flow_buffer()->BufferData(data + transport, data + n);\n \t\ttransport = 0;\n "
        },
        {
          "filename": "src/analyzer/protocol/dnp3/DNP3.h",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -31,7 +31,21 @@ class DNP3_Base {\n \n \tbool ProcessData(int len, const u_char* data, bool orig);\n \tvoid ClearEndpointState(bool orig);\n-\tbool AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len);\n+\n+\t/**\n+\t * Buffers packet data until it reaches a specified length.\n+\t * @param endp an endpoint speaking DNP3 to which data will be buffered.\n+\t * @param target_len the required length of the buffer\n+\t * @param data source buffer to copy bytes from.  Will be incremented\n+\t * by the number of bytes copied by this function.\n+\t * @param len the number of bytes available in \\a data.  Will be decremented\n+\t * by the number of bytes copied by this function.\n+\t * @return -1 if invalid input parameters were supplied, 0 if the endpoint's\n+\t * buffer is not yet \\a target_len bytes in size, or 1 the buffer is the\n+\t * required size.\n+\t */\n+\tint AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len);\n+\n \tbool ParseAppLayer(Endpoint* endp);\n \tbool CheckCRC(int len, const u_char* data, const u_char* crc16, const char* where);\n \tunsigned int CalcCRC(int len, const u_char* data);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0478c45f811f4a3e0efacf3cd30d2604413a1bd3",
            "date": "2023-03-24T00:29:58Z",
            "author_login": "zeek-bot"
          },
          {
            "sha": "71f487bd209bf88d5c271ae4f3be69c0a0874ef1",
            "date": "2023-03-23T12:40:26Z",
            "author_login": "awelzel"
          },
          {
            "sha": "890d2b5e07e3ab96a12d0deafd5864fbcf741f77",
            "date": "2023-03-23T12:35:28Z",
            "author_login": "awelzel"
          },
          {
            "sha": "fd15a33f8c57e9fd16cd2dec1fb817cf890dc892",
            "date": "2023-03-23T11:35:30Z",
            "author_login": "awelzel"
          },
          {
            "sha": "833dd158de56948ecfec98c7749c00e8254d7a6a",
            "date": "2023-03-20T13:24:48Z",
            "author_login": "awelzel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-119",
    "description": "analyzer/protocol/dnp3/DNP3.cc in Bro before 2.3.2 does not reject certain non-zero values of a packet length, which allows remote attackers to cause a denial of service (buffer overflow or buffer over-read) via a crafted DNP3 packet.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-04-24T06:59:00.477",
    "last_modified": "2024-11-21T02:25:35.767",
    "fix_date": "2015-01-23T16:49:15Z"
  },
  "references": [
    {
      "url": "https://github.com/bro/bro/commit/6cedd67c381ff22fde653adf02ee31caf66c81a0",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/bro/bro/commit/6cedd67c381ff22fde653adf02ee31caf66c81a0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:54.873372",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bro",
    "owner": "bro",
    "created_at": "2018-12-05T15:30:12Z",
    "updated_at": "2025-01-08T22:44:55Z",
    "pushed_at": "2023-03-24T00:40:41Z",
    "size": 137794,
    "stars": 168,
    "forks": 48,
    "open_issues": 0,
    "watchers": 168,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 5744981,
      "Zeek": 4631033,
      "CMake": 110742,
      "Yacc": 68545,
      "Shell": 59447,
      "Lex": 42201,
      "Dockerfile": 15777,
      "Python": 14618,
      "Makefile": 6130,
      "C": 4087,
      "Batchfile": 1008
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:23:31.807878"
  }
}