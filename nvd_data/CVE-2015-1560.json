{
  "cve_id": "CVE-2015-1560",
  "github_data": {
    "repository": "centreon/centreon",
    "fix_commit": "668a928f34dc0f67723d3db138c042eb7f979f28",
    "related_commits": [
      "668a928f34dc0f67723d3db138c042eb7f979f28",
      "668a928f34dc0f67723d3db138c042eb7f979f28"
    ],
    "patch_url": "https://github.com/centreon/centreon/commit/668a928f34dc0f67723d3db138c042eb7f979f28.patch",
    "fix_commit_details": {
      "sha": "668a928f34dc0f67723d3db138c042eb7f979f28",
      "commit_date": "2014-01-10T14:52:10Z",
      "author": {
        "login": "julienmathis",
        "type": "User",
        "stats": {
          "total_commits": 7348,
          "average_weekly_commits": 7.59875904860393,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 444
        }
      },
      "commit_message": {
        "title": "remove old treeview (files not used)",
        "length": 36,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 490,
        "additions": 0,
        "deletions": 490
      },
      "files": [
        {
          "filename": "www/include/common/XmlTree/GetXmlTree.php",
          "status": "removed",
          "additions": 0,
          "deletions": 490,
          "patch": "@@ -1,490 +0,0 @@\n-<?php\n-/*\n- * Copyright 2005-2011 MERETHIS\n- * Centreon is developped by : Julien Mathis and Romain Le Merlus under\n- * GPL Licence 2.0.\n- *\n- * This program is free software; you can redistribute it and/or modify it under\n- * the terms of the GNU General Public License as published by the Free Software\n- * Foundation ; either version 2 of the License.\n- *\n- * This program is distributed in the hope that it will be useful, but WITHOUT ANY\n- * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n- * PARTICULAR PURPOSE. See the GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License along with\n- * this program; if not, see <http://www.gnu.org/licenses>.\n- *\n- * Linking this program statically or dynamically with other modules is making a\n- * combined work based on this program. Thus, the terms and conditions of the GNU\n- * General Public License cover the whole combination.\n- *\n- * As a special exception, the copyright holders of this program give MERETHIS\n- * permission to link this program with independent modules to produce an executable,\n- * regardless of the license terms of these independent modules, and to copy and\n- * distribute the resulting executable under terms of MERETHIS choice, provided that\n- * MERETHIS also meet, for each linked independent module, the terms  and conditions\n- * of the license of that module. An independent module is a module which is not\n- * derived from this program. If you modify this program, you may extend this\n- * exception to your version of the program, but you are not obliged to do so. If you\n- * do not wish to do so, delete this exception statement from your version.\n- *\n- * For more information : contact@centreon.com\n- *\n- * SVN : $URL$\n- * SVN : $Id$\n- *\n- */\n-\n-\t$debugXML = 0;\n-\t$buffer = '';\n-\n-\t/*\n-\t * pearDB init\n-\t */\n-\tinclude_once \"@CENTREON_ETC@/centreon.conf.php\";\n-\tinclude_once $centreon_path . \"www/class/centreonDB.class.php\";\n-\n-\t$pearDB \t= new CentreonDB();\n-\t$pearDBO \t= new CentreonDB(\"centstorage\");\n-\t$pearDBndo \t= new CentreonDB(\"ndo\");\n-\n-\t/*\n-\t * PHP functions\n-\t */\n-\tinclude_once $centreon_path . \"www/include/common/common-Func.php\";\n-\n-\t/*\n-\t * Include Access Class\n-\t */\n-\tinclude_once $centreon_path . \"www/class/centreonACL.class.php\";\n-\tinclude_once $centreon_path . \"www/class/centreonXML.class.php\";\n-\n-\n-\tif (stristr($_SERVER[\"HTTP_ACCEPT\"],\"application/xhtml+xml\")) {\n-\t\theader(\"Content-type: application/xhtml+xml\");\n-\t} else {\n-\t\theader(\"Content-type: text/xml\");\n-\t}\n-\n-\n-\tfunction getServiceGroupCount()\t{\n-\t\tglobal $pearDB;\n-\n-\t\t$DBRESULT = $pearDB->query(\"SELECT count(sg_id) FROM `servicegroup`\");\n-\t\t$num_row = $DBRESULT->fetchRow();\n-\t\t$DBRESULT->free();\n-\t\treturn $num_row[\"count(sg_id)\"];\n-\t}\n-\n-\n-\t/*\n-\t * if debug == 0 => Normal,\n-\t * debug == 1 => get use,\n-\t * debug == 2 => log in file (log.xml)\n-\t */\n-\n-\tglobal $is_admin, $user_id;\n-\n-\t$is_admin = isUserAdmin($_GET[\"sid\"]);\n-\tif (isset($_GET[\"sid\"]) && $_GET[\"sid\"]){\n-\t\t$DBRESULT = $pearDB->query(\"SELECT user_id FROM session where session_id = '\".$_GET[\"sid\"].\"'\");\n-\t\t$session = $DBRESULT->fetchRow();\n-\t\t$access = new CentreonAcl($session[\"user_id\"], $is_admin);\n-\t\t$lca = array(\"LcaHost\" => $access->getHostServices($pearDBndo), \"LcaHostGroup\" => $access->getHostGroups(), \"LcaSG\" => $access->getServiceGroups());\n-\t\t$hoststr = $access->getHostsString(\"ID\", $pearDBndo);\n-\t\t$servicestr = $access->getServicesString(\"ID\", $pearDBndo);\n-\n-\t} else\n-\t\texit();\n-\n-\t$normal_mode = 1;\n-\t(isset($_GET[\"mode\"])) ? $normal_mode = $_GET[\"mode\"] : $normal_mode = 1;\n-\t(isset($_GET[\"id\"])) ? $url_var = $_GET[\"id\"] : $url_var = 0;\n-\n-\t$type = \"root\";\n-\t$id = \"0\";\n-\tif (strlen($url_var) > 1){\n-\t\t$id = \"42\";\n-\t\t$type = substr($url_var, 0, 2);\n-\t\t$id = substr($url_var, 3, strlen($url_var));\n-\t}\n-\t$buffer = new CentreonXML();\n-\tif ($normal_mode){\n-\t\t$i = 0;\n-\t\t$buffer->startElement(\"tree\");\n-\t\t$buffer->writeAttribute(\"id\", $url_var);\n-\t\tif ($type == \"HG\") {\n-\t\t\t/*\n-\t\t\t * Get Hosts\n-\t\t\t */\n-\t\t\t$hosts = getMyHostGroupHosts($id);\n-\t\t\tforeach ($hosts as $host){\n-\t\t\t\tif ($is_admin || ((isset($lca[\"LcaHost\"]) && isset($lca[\"LcaHost\"][$host])))){\n-\t\t\t\t\t$buffer->startElement(\"item\");\n-\t\t\t\t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t\t\t\t$buffer->writeAttribute(\"id\", \"HH_\".$host.\"_\".$id);\n-\t\t\t\t\t$buffer->writeAttribute(\"text\", getMyHostName($host));\n-\t\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/server_network.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/server_network.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/server_network.gif\");\n-\t\t\t\t\t$buffer->endElement();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if ($type == \"ST\") {\n-\n-\t\t\t/*\n-\t\t\t * Send Service/host list for a SG\n-\t\t\t */\n-\t\t\t$data = getMyServiceGroupActivateServices($id);\n-\t\t\tforeach ($data as $key => $value){\n-\t\t\t\t$tab_value = preg_split(\"/\\_/\", $key);\n-\t\t\t\t$host_name = getMyHostName($tab_value[0]);\n-\t\t\t\t$service_description = getMyServiceName($tab_value[1], $tab_value[0]);\n-\t\t\t\t$buffer->startElement(\"item\");\n-\t\t\t\t$buffer->writeAttribute(\"child\", \"0\");\n-\t\t\t\t$buffer->writeAttribute(\"id\", \"HS_\".$tab_value[1].\"_\".$tab_value[0]);\n-\t\t\t\t$buffer->writeAttribute(\"text\", $host_name.\" - \".$service_description);\n-\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/gear.gif\");\n-\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/gear.gif\");\n-\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/gear.gif\");\n-\t\t\t\t$buffer->endElement();\n-\t\t\t}\n-\t\t} else if ($type == \"HH\") {\n-\t\t\t/*\n-\t\t\t * get services for host\n-\t\t\t */\n-\t\t\t$tab_id = preg_split('/\\_/', $id);\n-\t\t\t$id = $tab_id[0];\n-\t\t\t$services = getMyHostActiveServices($id);\n-\t\t\tforeach ($services as $svc_id => $svc_name) {\n-\t\t\t\tif ($is_admin || (isset($lca[\"LcaHost\"][$id]) && isset($lca[\"LcaHost\"][$id][$svc_id]))) {\n-\t\t\t    \t$buffer->startElement(\"item\");\n-\t\t\t\t\t$buffer->writeAttribute(\"child\", \"0\");\n-\t\t\t\t\t$buffer->writeAttribute(\"id\", \"HS_\".$svc_id.\"_\".$id);\n-\t\t\t\t\t$buffer->writeAttribute(\"text\", $svc_name);\n-\t\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/gear.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/gear.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/gear.gif\");\n-\t\t\t\t\t$buffer->endElement();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if ($type == \"HS\") {\n-\t\t\t;\n-\t\t} else if ($type == \"HO\") {\n-\t\t\t$DBRESULT2 = $pearDB->query(\"SELECT DISTINCT * FROM host WHERE host_id NOT IN (select host_host_id from hostgroup_relation) AND host_register = '1' order by host_name\");\n-\t\t\twhile ($host = $DBRESULT2->fetchRow()){\n-\t\t\t\t$i++;\n-\t\t\t\tif ($is_admin || ((isset($lca[\"LcaHost\"]) && isset($lca[\"LcaHost\"][$host[\"host_name\"]])))){\n-\t\t\t\t\t$buffer->startElement(\"item\");\n-\t\t\t\t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t\t\t\t$buffer->writeAttribute(\"id\", \"HO_0\");\n-\t\t\t\t\t$buffer->writeAttribute(\"text\", _(\"Orphan hosts\"));\n-\t\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/clients.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/clients.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/clients.gif\");\n-\t\t\t\t\t$buffer->startElement(\"item\");\n-\t\t\t\t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t\t\t\t$buffer->writeAttribute(\"id\", \"HH_\".$host[\"host_id\"]);\n-\t\t\t\t\t$buffer->writeAttribute(\"text\", $host[\"host_name\"]);\n-\t\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/server_network.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/server_network.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/server_network.gif\");\n-\t\t\t\t\t$buffer->endElement();\n-\t\t\t\t\t$buffer->endElement();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if ($type == \"RS\") {\n-\t\t\t/*\n-\t\t\t * Send Service Group list\n-\t\t\t */\n-\t\t\t$lcaSG = $access->getServiceGroups();\n-\t\t\t$DBRESULT = $pearDB->query(\"SELECT DISTINCT * FROM servicegroup ORDER BY `sg_name`\");\n-\t\t\twhile ($SG = $DBRESULT->fetchRow()){\n-\t\t\t    $i++;\n-\t\t\t\tif ($is_admin || (isset($lca[\"LcaSG\"]) && isset($lca[\"LcaSG\"][$SG[\"sg_id\"]]))){\n-\t\t\t\t\t$buffer->startElement(\"item\");\n-\t\t\t\t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t\t\t\t$buffer->writeAttribute(\"text\", $SG[\"sg_name\"]);\n-\t\t\t\t\t$buffer->writeAttribute(\"id\", \"ST_\".$SG[\"sg_id\"]);\n-\t\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/clients.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/clients.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/clients.gif\");\n-\t\t\t\t\t$buffer->endElement();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t$DBRESULT->free();\n-\t\t} else if ($type == \"RR\") {\n-\t\t\t$DBRESULT = $pearDB->query(\"SELECT hg_id, hg_name FROM hostgroup WHERE hg_id IN (SELECT hostgroup_hg_id FROM hostgroup_relation \".$access->queryBuilder(\"WHERE\", \"host_host_id\", $hoststr).\") ORDER BY `hg_name`\");\n-\t\t\twhile ($HG = $DBRESULT->fetchRow()){\n-\t\t\t    $i++;\n-\t\t\t\tif ($is_admin || (isset($lca[\"LcaHostGroup\"]) && isset($lca[\"LcaHostGroup\"][$HG[\"hg_id\"]]))){\n-\t\t\t\t\t$buffer->startElement(\"item\");\n-\t\t\t\t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t\t\t\t$buffer->writeAttribute(\"test\", $is_admin);\n-\t\t\t\t\t$buffer->writeAttribute(\"text\", $HG[\"hg_name\"]);\n-\t\t\t\t\t$buffer->writeAttribute(\"id\", \"HG_\".$HG[\"hg_id\"]);\n-\t\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/clients.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/clients.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/clients.gif\");\n-\t\t\t\t\t$buffer->endElement();\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t/*\n-\t\t\t * Hosts Alone\n-\t\t\t */\n-\n-\t\t\t$DBRESULT2 = $pearDB->query(\"SELECT DISTINCT * FROM host WHERE host_id NOT IN (SELECT host_host_id FROM hostgroup_relation) AND host_register = '1' order by host_name\");\n-\t\t\t$cpt = 0;\n-\t\t\t$hostaloneSTR2 = \"\";\n-\t\t\twhile ($host = $DBRESULT2->fetchRow()){\n-\t\t\t\t$i++;\n-\t\t\t\tif ($is_admin || (isset($lca[\"LcaHost\"]) && isset($lca[\"LcaHost\"][$host[\"host_id\"]]))){\n-\t\t           \tif (!$cpt) {\n-\t\t           \t\t$buffer->startElement(\"item\");\n-\t\t\t\t\t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t\t\t\t\t$buffer->writeAttribute(\"id\", \"HO_0\");\n-\t\t\t\t\t\t$buffer->writeAttribute(\"text\", _(\"Orphan hosts\"));\n-\t\t\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/clients.gif\");\n-\t\t\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/clients.gif\");\n-\t\t\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/clients.gif\");\n-\t\t           \t}\n-\t\t           \t$buffer->startElement(\"item\");\n-\t\t\t\t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t\t\t\t$buffer->writeAttribute(\"id\", \"HH_\".$host[\"host_id\"]);\n-\t\t\t\t\t$buffer->writeAttribute(\"text\", $host[\"host_name\"]);\n-\t\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/server_network.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/server_network.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/server_network.gif\");\n-\t\t\t\t\t$buffer->endElement();\n-\t\t\t\t\t$cpt++;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif ($cpt)\n-\t\t\t\t$buffer->endElement();\n-\n-\t\t\t/*\n-\t\t\t * Meta Services\n-\t\t\t */\n-\t\t\t$str = \"\";\n-\t\t\t$cpt = 0;\n-\t\t\t$DBRESULT = $pearDB->query(\"SELECT DISTINCT * FROM meta_service ORDER BY `meta_name`\");\n-\t\t\twhile ($MS = $DBRESULT->fetchRow()){\n-\t\t\t\tif (!$cpt) {\n-\t\t\t\t\t$buffer->startElement(\"item\");\n-\t\t\t\t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t\t\t\t$buffer->writeAttribute(\"id\", \"MT_0\");\n-\t\t\t\t\t$buffer->writeAttribute(\"text\", _(\"Meta services\"));\n-\t\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/server_network.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/server_network.gif\");\n-\t\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/server_network.gif\");\n-\t\t\t\t}\n-\t\t\t\t$i++;\n-\t\t        $buffer->startElement(\"item\");\n-\t\t\t\t$buffer->writeAttribute(\"child\", \"0\");\n-\t\t\t\t$buffer->writeAttribute(\"id\", \"MS_\".$MS[\"meta_id\"]);\n-\t\t\t\t$buffer->writeAttribute(\"text\", $MS[\"meta_name\"]);\n-\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/server_network.gif\");\n-\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/server_network.gif\");\n-\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/server_network.gif\");\n-\t\t        $buffer->endElement();\n-\t\t       \tif (!$cpt)\n-\t\t       \t\t$buffer->endElement();\n-\t\t       \t$cpt++;\n-\t\t\t}\n-\t\t} else {\n-\t\t\t/*\n-\t\t\t * Display HG\n-\t\t\t */\n-\t\t\t$buffer->startElement(\"item\");\n-\t\t\t$buffer->writeAttribute(\"nocheckbox\", \"1\");\n-\t\t\t$buffer->writeAttribute(\"open\", \"1\");\n-\t\t\t$buffer->writeAttribute(\"call\", \"1\");\n-\t\t\t$buffer->writeAttribute(\"select\", \"1\");\n-\t\t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t\t$buffer->writeAttribute(\"id\", \"RR_0\");\n-\t\t\t$buffer->writeAttribute(\"text\", \"HostGroups\");\n-\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/clients.gif\");\n-\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/clients.gif\");\n-\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/clients.gif\");\n-\t\t\t$buffer->writeElement(\"itemtext\", \"label\");\n-\t\t\t$buffer->endElement();\n-\n-\t\t\t/*\n-\t\t\t * Display SG\n-\t\t\t */\n-\t\t\tif (getServiceGroupCount()) {\n-\t\t\t\t$buffer->startElement(\"item\");\n-\t\t\t\t$buffer->writeAttribute(\"nocheckbox\", \"1\");\n-\t\t\t\t$buffer->writeAttribute(\"open\", \"1\");\n-\t\t\t\t$buffer->writeAttribute(\"call\", \"1\");\n-\t\t\t\t$buffer->writeAttribute(\"select\", \"1\");\n-\t\t\t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t\t\t$buffer->writeAttribute(\"id\", \"RS_0\");\n-\t\t\t\t$buffer->writeAttribute(\"text\", _(\"ServiceGroups\"));\n-\t\t\t\t$buffer->writeAttribute(\"im0\", \"../16x16/clients.gif\");\n-\t\t\t\t$buffer->writeAttribute(\"im1\", \"../16x16/clients.gif\");\n-\t\t\t\t$buffer->writeAttribute(\"im2\", \"../16x16/clients.gif\");\n-\t\t\t\t$buffer->writeElement(\"itemtext\", \"label\");\n-\t\t\t\t$buffer->endElement();\n-\t\t\t\t$buffer->writeElement(\"itemtext\", \"label\");\n-\t\t\t\t$buffer->endElement();\n-\t\t\t}\n-\t\t}\n-\t} else {\n-\t\t/*\n-\t\t * direct to ressource (ex: pre-selected by GET)\n-\t\t */\n-\n-\t\t$hgs_selected = array();\n-\t\t$hosts_selected = array();\n-\t\t$svcs_selected = array();\n-\n-\t\t$hgs_open = array();\n-\t\t$hosts_open = array();\n-\n-\t\t$buffer->startElement(\"tree\");\n-\t\t$buffer->writeAttribute(\"id\", \"1\");\n-\n-\t\t$tab_id = preg_split(\"/\\,/\",$url_var);\n-\t\tforeach ($tab_id as $openid) {\n-\t\t\t$type = substr($openid, 0, 2);\n-\t\t\t$id = substr($openid, 3, strlen($openid));\n-\n-\t\t\t$buffer->writeElement(\"id\", $id);\n-\n-\t\t\t$id_full = preg_split('/\\_/', $id);\n-\t\t\t$id = $id_full[0];\n-\n-\t\t\tif ($type == \"HH\") {\n-\t\t\t\t/*\n-\t\t\t\t * host + hg_parent\n-\t\t\t\t */\n-\t\t\t\t$hosts_selected[$id] = getMyHostName($id);\n-\t\t\t\t$hosts_open[$id] = getMyHostName($id);\n-\t\t\t\t/* + all svc*/\n-\t\t\t\t$services = getMyHostActiveServices($id);\n-\t\t\t\tforeach($services as $svc_id => $svc_name)\n-\t\t\t\t\t$svcs_selected[$svc_id] = $svc_name;\n-\t\t\t\t// \thg_parent\n-\t\t\t\tif (isset($id_full[2]))\n-\t\t\t\t\t$hgs_open[$id_full[2]] = getMyHostGroupName($id_full[2]);\n-\t\t\t\telse {\n-\t\t\t\t\t$hgs = getMyHostGroups($id);\n-\t\t\t\t\tforeach($hgs as $hg_id => $hg_name)\n-\t\t\t\t\t\t$hgs_open[$hg_id] = $hg_name;\n-\t\t\t\t}\n-\t\t\t} else if($type == \"HS\"){ // svc + host_parent + hg_parent\n-\t\t\t\t// svc\n-\t\t\t\t$svcs_selected[$id] = getMyServiceName($id);\n-\t\t\t\t$svcs_selected[$id] = getMyServiceName($id);\n-\n-\t\t\t\t//host_parent\n-\t\t\t\tif (isset($id_full[1])) {\n-\t\t\t\t\t$host_id = $id_full[1];\n-\t\t\t\t\t$hosts_open[$host_id] = getMyHostName($host_id);\n-\t\t\t\t} else {\n-\t\t\t\t\t$host_id = getMyHostServiceID($id);\n-\t\t\t\t\t$hosts_open[$host_id] = getMyHostName($host_id);\n-\t\t\t\t}\n-\n-\t\t\t\t// \thg_parent\n-\t\t\t\tif (isset($id_full[2]))\n-\t\t\t\t\t$hgs_open[$id_full[2]] = getMyHostGroupName($id_full[2]);\n-\t\t\t\telse {\n-\t\t\t\t\t$hgs = getMyHostGroups($host_id);\n-\t\t\t\t\tforeach($hgs as $hg_id => $hg_name)\n-\t\t\t\t\t\t$hgs_open[$hg_id] = $hg_name;\n-\t\t\t\t}\n-\t\t\t} else if($type == \"HG\"){ // HG + hostS_child + svcS_child\n-\n-\t\t\t\t$hgs_selected[$id] = getMyHostGroupName($id);\n-\t\t\t\t$hgs_open[$id] = getMyHostGroupName($id);\n-\n-\t\t\t\t$hosts = getMyHostGroupHosts($id);\n-\t\t\t\tforeach($hosts as $host_id) {\n-\t\t\t\t\t$host_name = getMyHostName($host_id);\n-\t\t\t\t\t$hosts_open[$host_id] = $host_name;\n-\t\t\t\t\t$hosts_selected[$host_id] = $host_name;\n-\n-\t\t\t\t\t/* + all svc*/\n-\t\t\t\t\t$services = getMyHostActiveServices($host_id);\n-\t\t\t\t\tforeach($services as $svc_id => $svc_name)\n-\t\t\t\t\t\t$svcs_selected[$svc_id] = $svc_name;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t$hostgroups = getAllHostgroups();\n-\t\tforeach($hostgroups as $hg_id => $hg_name){\n-\t\t\t/*\n-\t\t\t * Hostgroups\n-\t\t\t */\n-\t\t\tif (HG_has_one_or_more_host($hg_id)){\n-\t    \t\t$buffer->startElement(\"item\");\n-\t    \t\tif (isset($hgs_open[$hg_id]))\n-\t    \t\t\t$buffer->writeAttribute(\"open\", \"1\");\n-\t    \t\tif (isset($hgs_selected[$hg_id]))\n-\t    \t\t\t$buffer->writeAttribute(\"checked\", \"1\");\n-\t    \t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t    \t\t$buffer->writeAtrtibute(\"id\", \"HG_\".$hg_id);\n-\t    \t\t$buffer->writeAttribute(\"text\", $hg_name);\n-\t    \t\t$buffer->writeAttribute(\"im0\", \"../16x16/clients.gif\");\n-\t    \t\t$buffer->writeAttribute(\"im1\", \"../16x16/clients.gif\");\n-\t    \t\t$buffer->writeAttribute(\"im2\", \"../16x16/clients.gif\");\n-\n-\t\t\t\t/*\n-\t\t\t\t * Hosts\n-\t\t\t\t */\n-\t\t\t\tif ($hg_open){\n-\t\t\t\t\t$hosts = getMyHostGroupHosts($hg_id);\n-\t\t\t\t\tforeach ($hosts as $host_id => $host_name){\n-\t\t\t\t\t\t$buffer->startElement(\"item\");\n-\t\t\t    \t\tif (isset($hosts_open[$host_id]))\n-\t\t\t    \t\t\t$buffer->writeAttribute(\"open\", \"1\");\n-\t\t\t    \t\tif (isset($hosts_selected[$host_id]))\n-\t\t\t    \t\t\t$buffer->writeAttribute(\"checked\", \"1\");\n-\t\t\t    \t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t\t    \t\t$buffer->writeAtrtibute(\"id\", \"HH_\".$host_id.\"_\".$hg_id);\n-\t\t\t    \t\t$buffer->writeAttribute(\"text\", getMyHostName($host_id));\n-\t\t\t    \t\t$buffer->writeAttribute(\"im0\", \"../16x16/server_network.gif\");\n-\t\t\t    \t\t$buffer->writeAttribute(\"im1\", \"../16x16/server_network.gif\");\n-\t\t\t    \t\t$buffer->writeAttribute(\"im2\", \"../16x16/server_network.gif\");\n-\n-\t\t\t\t\t\t/*\n-\t\t\t\t\t\t * Services\n-\t\t\t\t\t\t */\n-\t\t\t\t\t\tif($host_open){\n-\t\t\t\t\t\t\t$services = getMyHostServices($host_id);\n-\t\t\t\t\t\t\tforeach($services as $svc_id => $svc_name)\t{//$tab_id = preg_split(\"/\\,/\",$openid);\n-\t\t\t\t\t           \t$buffer->startElement(\"item\");\n-\t\t\t\t\t    \t\tif (isset($svcs_selected[$svc_id]))\n-\t\t\t\t\t    \t\t\t$buffer->writeAttribute(\"checked\", \"1\");\n-\t\t\t\t\t    \t\t$buffer->writeAttribute(\"child\", \"0\");\n-\t\t\t\t\t    \t\t$buffer->writeAtrtibute(\"id\", \"HS_\".$svc_id.\"_\".$host_id.\"_\".$hg_id);\n-\t\t\t\t\t    \t\t$buffer->writeAttribute(\"text\", $svc_name);\n-\t\t\t\t\t    \t\t$buffer->writeAttribute(\"im0\", \"../16x16/gear.gif\");\n-\t\t\t\t\t    \t\t$buffer->writeAttribute(\"im1\", \"../16x16/gear.gif\");\n-\t\t\t\t\t    \t\t$buffer->writeAttribute(\"im2\", \"../16x16/gear.gif\");\n-\t\t\t\t\t        \t$buffer->endElement();\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t$buffer->endElement();\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t$buffer->endElement();\n-\t\t\t}\n-\t\t}\n-\t\t$buffer->startElement(\"item\");\n-\t\t$buffer->writeAttribute(\"child\", \"1\");\n-\t\t$buffer->writeAttribute(\"id\", \"HO_0\");\n-\t\t$buffer->writeAttribute(\"text\", _(\"Orphan hosts\"));\n-\t\t$buffer->writeAttribute(\"im0\", \"../16x16/server_network.gif\");\n-\t\t$buffer->writeAttribute(\"im1\", \"../16x16/server_network.gif\");\n-\t\t$buffer->writeAttribute(\"im2\", \"../16x16/server_network.gif\");\n-\t\t$buffer->endElement();\n-\t}\n-\t$buffer->endElement();\n-\t$buffer->output();\n-?>\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6041851eb8b8f9bf586618f9de9e3f23cfee7e4c",
            "date": "2025-01-14T14:16:27Z",
            "author_login": "kduret"
          },
          {
            "sha": "518e31f1f2749e61b72d1f26aed82f37d675a57a",
            "date": "2025-01-14T14:02:24Z",
            "author_login": "adr-mo"
          },
          {
            "sha": "02a93a796db7263ef554f1dee1f55f1e6e1d5a9a",
            "date": "2025-01-13T17:18:37Z",
            "author_login": "selfakiri"
          },
          {
            "sha": "2224f6423ee522a4e81719e12c70f7cb8563f480",
            "date": "2025-01-13T13:44:35Z",
            "author_login": "Noha-ElAbrouki"
          },
          {
            "sha": "70ab68fc8be574a61ba02778a807a7942b47cbf9",
            "date": "2025-01-13T10:22:16Z",
            "author_login": "kduret"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-89",
    "description": "SQL injection vulnerability in the isUserAdmin function in include/common/common-Func.php in Centreon (formerly Merethis Centreon) 2.5.4 and earlier (fixed in Centreon web 2.7.0) allows remote attackers to execute arbitrary SQL commands via the sid parameter to include/common/XmlTree/GetXmlTree.php.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2015-07-14T16:59:00.077",
    "last_modified": "2024-11-21T02:25:39.250",
    "fix_date": "2014-01-10T14:52:10Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/132607/Merethis-Centreon-2.5.4-SQL-Injection-Remote-Command-Execution.html",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://www.securityfocus.com/archive/1/535961/100/0/threaded",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://forge.centreon.com/projects/centreon/repository/revisions/d14f213b9c60de1bad0b464fd6403c828cf12582",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/centreon/centreon/commit/668a928f34dc0f67723d3db138c042eb7f979f28#diff-f69d4a3d3d177d024c22419357c1f4f4",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://packetstormsecurity.com/files/132607/Merethis-Centreon-2.5.4-SQL-Injection-Remote-Command-Execution.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://www.securityfocus.com/archive/1/535961/100/0/threaded",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://forge.centreon.com/projects/centreon/repository/revisions/d14f213b9c60de1bad0b464fd6403c828cf12582",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/centreon/centreon/commit/668a928f34dc0f67723d3db138c042eb7f979f28#diff-f69d4a3d3d177d024c22419357c1f4f4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:35.790895",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "centreon",
    "owner": "centreon",
    "created_at": "2022-05-25T08:21:12Z",
    "updated_at": "2025-01-13T17:18:42Z",
    "pushed_at": "2025-01-14T13:20:00Z",
    "size": 635046,
    "stars": 108,
    "forks": 41,
    "open_issues": 209,
    "watchers": 108,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "22.04.x",
      "22.10.x",
      "23.04.x",
      "23.10.x",
      "24.04.x",
      "24.10.x"
    ],
    "languages": {
      "PHP": 22266098,
      "TypeScript": 5869839,
      "JavaScript": 889717,
      "Shell": 423983,
      "CSS": 212783,
      "Gherkin": 211415,
      "Perl": 174900,
      "XSLT": 124723,
      "HTML": 122838,
      "Smarty": 46951,
      "Python": 32748,
      "Makefile": 22579,
      "Lua": 21249,
      "MDX": 3220,
      "NewLisp": 621
    },
    "commit_activity": {
      "total_commits_last_year": 1688,
      "avg_commits_per_week": 32.46153846153846,
      "days_active_last_year": 231
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:22:24.210755"
  }
}