{
  "cve_id": "CVE-2015-2304",
  "github_data": {
    "repository": "libarchive/libarchive",
    "fix_commit": "59357157706d47c365b2227739e17daba3607526",
    "related_commits": [
      "59357157706d47c365b2227739e17daba3607526",
      "59357157706d47c365b2227739e17daba3607526"
    ],
    "patch_url": "https://github.com/libarchive/libarchive/commit/59357157706d47c365b2227739e17daba3607526.patch",
    "fix_commit_details": {
      "sha": "59357157706d47c365b2227739e17daba3607526",
      "commit_date": "2015-03-01T11:07:45Z",
      "author": {
        "login": "ghedo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS option",
        "length": 101,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 47,
        "additions": 43,
        "deletions": 4
      },
      "files": [
        {
          "filename": "cpio/bsdcpio.1",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -156,7 +156,8 @@ See above for description.\n .It Fl Fl insecure\n (i and p mode only)\n Disable security checks during extraction or copying.\n-This allows extraction via symbolic links and path names containing\n+This allows extraction via symbolic links, absolute paths,\n+and path names containing\n .Sq ..\n in the name.\n .It Fl J , Fl Fl xz"
        },
        {
          "filename": "cpio/cpio.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -171,6 +171,7 @@ main(int argc, char *argv[])\n \tcpio->extract_flags |= ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER;\n \tcpio->extract_flags |= ARCHIVE_EXTRACT_SECURE_SYMLINKS;\n \tcpio->extract_flags |= ARCHIVE_EXTRACT_SECURE_NODOTDOT;\n+\tcpio->extract_flags |= ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS;\n \tcpio->extract_flags |= ARCHIVE_EXTRACT_PERM;\n \tcpio->extract_flags |= ARCHIVE_EXTRACT_FFLAGS;\n \tcpio->extract_flags |= ARCHIVE_EXTRACT_ACL;\n@@ -256,6 +257,7 @@ main(int argc, char *argv[])\n \t\tcase OPTION_INSECURE:\n \t\t\tcpio->extract_flags &= ~ARCHIVE_EXTRACT_SECURE_SYMLINKS;\n \t\t\tcpio->extract_flags &= ~ARCHIVE_EXTRACT_SECURE_NODOTDOT;\n+\t\t\tcpio->extract_flags &= ~ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS;\n \t\t\tbreak;\n \t\tcase 'L': /* GNU cpio */\n \t\t\tcpio->option_follow_links = 1;"
        },
        {
          "filename": "libarchive/archive.h",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -649,6 +649,8 @@ __LA_DECL int archive_read_set_passphrase_callback(struct archive *,\n /* Default: Do not use HFS+ compression if it was not compressed. */\n /* This has no effect except on Mac OS v10.6 or later. */\n #define\tARCHIVE_EXTRACT_HFS_COMPRESSION_FORCED\t(0x8000)\n+/* Default: Do not reject entries with absolute paths */\n+#define ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS (0x10000)\n \n __LA_DECL int archive_read_extract(struct archive *, struct archive_entry *,\n \t\t     int flags);"
        },
        {
          "filename": "libarchive/archive_write_disk.3",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -177,6 +177,9 @@ The default is to not refuse such paths.\n Note that paths ending in\n .Pa ..\n always cause an error, regardless of this flag.\n+.It Cm ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS\n+Refuse to extract an absolute path.\n+The default is to not refuse such paths.\n .It Cm ARCHIVE_EXTRACT_SPARSE\n Scan data for blocks of NUL bytes and try to recreate them with holes.\n This results in sparse files, independent of whether the archive format"
        },
        {
          "filename": "libarchive/archive_write_disk_posix.c",
          "status": "modified",
          "additions": 11,
          "deletions": 3,
          "patch": "@@ -2509,8 +2509,9 @@ cleanup_pathname_win(struct archive_write_disk *a)\n /*\n  * Canonicalize the pathname.  In particular, this strips duplicate\n  * '/' characters, '.' elements, and trailing '/'.  It also raises an\n- * error for an empty path, a trailing '..' or (if _SECURE_NODOTDOT is\n- * set) any '..' in the path.\n+ * error for an empty path, a trailing '..', (if _SECURE_NODOTDOT is\n+ * set) any '..' in the path or (if ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS\n+ * is set) if the path is absolute.\n  */\n static int\n cleanup_pathname(struct archive_write_disk *a)\n@@ -2529,8 +2530,15 @@ cleanup_pathname(struct archive_write_disk *a)\n \tcleanup_pathname_win(a);\n #endif\n \t/* Skip leading '/'. */\n-\tif (*src == '/')\n+\tif (*src == '/') {\n+\t\tif (a->flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS) {\n+\t\t\tarchive_set_error(&a->archive, ARCHIVE_ERRNO_MISC,\n+\t\t\t                  \"Path is absolute\");\n+\t\t\treturn (ARCHIVE_FAILED);\n+\t\t}\n+\n \t\tseparator = *src++;\n+\t}\n \n \t/* Scan the pathname one element at a time. */\n \tfor (;;) {"
        },
        {
          "filename": "libarchive/test/test_write_disk_secure.c",
          "status": "modified",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -178,6 +178,29 @@ DEFINE_TEST(test_write_disk_secure)\n \tassert(S_ISDIR(st.st_mode));\n \tarchive_entry_free(ae);\n \n+\t/*\n+\t * Without security checks, we should be able to\n+\t * extract an absolute path.\n+\t */\n+\tassert((ae = archive_entry_new()) != NULL);\n+\tarchive_entry_copy_pathname(ae, \"/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp\");\n+\tarchive_entry_set_mode(ae, S_IFREG | 0777);\n+\tassert(0 == archive_write_header(a, ae));\n+\tassert(0 == archive_write_finish_entry(a));\n+\tassertFileExists(\"/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp\");\n+\tassert(0 == unlink(\"/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp\"));\n+\n+\t/* But with security checks enabled, this should fail. */\n+\tassert(archive_entry_clear(ae) != NULL);\n+\tarchive_entry_copy_pathname(ae, \"/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp\");\n+\tarchive_entry_set_mode(ae, S_IFREG | 0777);\n+\tarchive_write_disk_set_options(a, ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS);\n+\tfailure(\"Extracting an absolute path should fail here.\");\n+\tassertEqualInt(ARCHIVE_FAILED, archive_write_header(a, ae));\n+\tarchive_entry_free(ae);\n+\tassert(0 == archive_write_finish_entry(a));\n+\tassertFileNotExists(\"/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp\");\n+\n \tassertEqualInt(ARCHIVE_OK, archive_write_free(a));\n \n \t/* Test the entries on disk. */"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "42565b88b5cc7441239269902a9d1735fd9ca0e2",
            "date": "2025-01-07T00:44:40Z",
            "author_login": "gperciva"
          },
          {
            "sha": "743bbe97693f648e05dc428a770fefed5f1a7d3f",
            "date": "2025-01-01T23:36:17Z",
            "author_login": "mostynb"
          },
          {
            "sha": "7708713b634eb2f72ffe484b565a5a87f58e8cb3",
            "date": "2025-01-01T23:30:37Z",
            "author_login": "mostynb"
          },
          {
            "sha": "a186d9662b4e3bc2e0f39d3248f9c1244c4346cb",
            "date": "2025-01-01T18:56:51Z",
            "author_login": "thesamesam"
          },
          {
            "sha": "14b8803c40d36fe1f0c8b3bb2846d865e3adcfce",
            "date": "2025-01-01T16:31:35Z",
            "author_login": "CookiePLMonster"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-22",
    "description": "Absolute path traversal vulnerability in bsdcpio in libarchive 3.1.2 and earlier allows remote attackers to write to arbitrary files via a full pathname in an archive.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2015-03-15T19:59:00.070",
    "last_modified": "2024-11-21T02:27:10.810",
    "fix_date": "2015-03-01T11:07:45Z"
  },
  "references": [
    {
      "url": "http://advisories.mageia.org/MGASA-2015-0106.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2015-03/msg00065.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2015/dsa-3180",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.mandriva.com/security/advisories?name=MDVSA-2015:157",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/01/07/5",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/01/16/7",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1035996",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2549-1",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/libarchive/libarchive/commit/59357157706d47c365b2227739e17daba3607526",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/libarchive/libarchive/pull/110",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://groups.google.com/forum/#%21msg/libarchive-discuss/dN9y1VvE1Qk/Z9uerigjQn0J",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/201701-03",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.freebsd.org/security/advisories/FreeBSD-SA-16:22.libarchive.asc",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://advisories.mageia.org/MGASA-2015-0106.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2015-03/msg00065.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2015/dsa-3180",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.mandriva.com/security/advisories?name=MDVSA-2015:157",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/01/07/5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/01/16/7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1035996",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2549-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/libarchive/libarchive/commit/59357157706d47c365b2227739e17daba3607526",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/libarchive/libarchive/pull/110",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://groups.google.com/forum/#%21msg/libarchive-discuss/dN9y1VvE1Qk/Z9uerigjQn0J",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/201701-03",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.freebsd.org/security/advisories/FreeBSD-SA-16:22.libarchive.asc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:32.425826",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "libarchive",
    "owner": "libarchive",
    "created_at": "2012-01-19T18:16:02Z",
    "updated_at": "2025-01-13T10:21:51Z",
    "pushed_at": "2025-01-07T00:44:40Z",
    "size": 27999,
    "stars": 3098,
    "forks": 776,
    "open_issues": 485,
    "watchers": 3098,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "patch/3.5",
      "patch/3.7"
    ],
    "languages": {
      "C": 7080834,
      "Roff": 378587,
      "CMake": 140517,
      "M4": 123454,
      "Makefile": 75578,
      "Shell": 52106,
      "C++": 28869,
      "Batchfile": 12189,
      "Dockerfile": 792
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:03:25.247306"
  }
}