{
  "cve_id": "CVE-2015-2313",
  "github_data": {
    "repository": "capnproto/capnproto",
    "fix_commit": "80149744bdafa3ad4eedc83f8ab675e27baee868",
    "related_commits": [
      "80149744bdafa3ad4eedc83f8ab675e27baee868",
      "80149744bdafa3ad4eedc83f8ab675e27baee868"
    ],
    "patch_url": "https://github.com/capnproto/capnproto/commit/80149744bdafa3ad4eedc83f8ab675e27baee868.patch",
    "fix_commit_details": {
      "sha": "80149744bdafa3ad4eedc83f8ab675e27baee868",
      "commit_date": "2015-03-05T18:27:29Z",
      "author": {
        "login": "kentonv",
        "type": "User",
        "stats": {
          "total_commits": 2416,
          "average_weekly_commits": 3.8780096308186196,
          "total_additions": 411413,
          "total_deletions": 210874,
          "weeks_active": 393
        }
      },
      "commit_message": {
        "title": "SECURITY: Additional CPU amplification case.",
        "length": 318,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 63,
        "additions": 38,
        "deletions": 25
      },
      "files": [
        {
          "filename": "c++/src/capnp/encoding-test.c++",
          "status": "modified",
          "additions": 14,
          "deletions": 7,
          "patch": "@@ -1427,17 +1427,24 @@ TEST(Encoding, VoidListAmplification) {\n }\n \n TEST(Encoding, EmptyStructListAmplification) {\n-  MallocMessageBuilder builder;\n-  builder.initRoot<test::TestAnyPointer>().getAnyPointerField()\n-      .initAs<List<test::TestEmptyStruct>>(1u << 28);\n+  MallocMessageBuilder builder(1024);\n+  auto listList = builder.initRoot<test::TestAnyPointer>().getAnyPointerField()\n+      .initAs<List<List<test::TestEmptyStruct>>>(500);\n+\n+  for (uint i = 0; i < listList.size(); i++) {\n+    listList.init(i, 1u << 28);\n+  }\n \n   auto segments = builder.getSegmentsForOutput();\n-  EXPECT_EQ(1, segments.size());\n-  EXPECT_LT(segments[0].size(), 16);  // quite small for such a big list!\n+  ASSERT_EQ(1, segments.size());\n \n   SegmentArrayMessageReader reader(builder.getSegmentsForOutput());\n-  auto root = reader.getRoot<test::TestAnyPointer>().getAnyPointerField();\n-  EXPECT_NONFATAL_FAILURE(root.getAs<List<TestAllTypes>>());\n+  auto root = reader.getRoot<test::TestAnyPointer>();\n+  auto listListReader = root.getAnyPointerField().getAs<List<List<TestAllTypes>>>();\n+  EXPECT_NONFATAL_FAILURE(listListReader[0]);\n+  EXPECT_NONFATAL_FAILURE(listListReader[10]);\n+\n+  EXPECT_EQ(segments[0].size() - 1, root.totalSize().wordCount);\n }\n \n TEST(Encoding, Constants) {"
        },
        {
          "filename": "c++/src/capnp/layout.c++",
          "status": "modified",
          "additions": 24,
          "deletions": 18,
          "patch": "@@ -555,14 +555,16 @@ struct WireHelpers {\n             WordCount dataSize = elementTag->structRef.dataSize.get();\n             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();\n \n-            word* pos = ptr + POINTER_SIZE_IN_WORDS;\n             uint count = elementTag->inlineCompositeListElementCount() / ELEMENTS;\n-            for (uint i = 0; i < count; i++) {\n-              pos += dataSize;\n-\n-              for (uint j = 0; j < pointerCount / POINTERS; j++) {\n-                zeroObject(segment, reinterpret_cast<WirePointer*>(pos));\n-                pos += POINTER_SIZE_IN_WORDS;\n+            if (pointerCount > 0 * POINTERS) {\n+              word* pos = ptr + POINTER_SIZE_IN_WORDS;\n+              for (uint i = 0; i < count; i++) {\n+                pos += dataSize;\n+\n+                for (uint j = 0; j < pointerCount / POINTERS; j++) {\n+                  zeroObject(segment, reinterpret_cast<WirePointer*>(pos));\n+                  pos += POINTER_SIZE_IN_WORDS;\n+                }\n               }\n             }\n \n@@ -680,8 +682,6 @@ struct WireHelpers {\n               return result;\n             }\n \n-            result.wordCount += wordCount + POINTER_SIZE_IN_WORDS;\n-\n             const WirePointer* elementTag = reinterpret_cast<const WirePointer*>(ptr);\n             ElementCount count = elementTag->inlineCompositeListElementCount();\n \n@@ -690,23 +690,29 @@ struct WireHelpers {\n               return result;\n             }\n \n-            KJ_REQUIRE(elementTag->structRef.wordSize() / ELEMENTS *\n-                       ElementCount64(count) <= wordCount,\n+            auto actualSize = elementTag->structRef.wordSize() / ELEMENTS * ElementCount64(count);\n+            KJ_REQUIRE(actualSize <= wordCount,\n                        \"Struct list pointer's elements overran size.\") {\n               return result;\n             }\n \n+            // We count the actual size rather than the claimed word count because that's what\n+            // we'll end up with if we make a copy.\n+            result.wordCount += actualSize + POINTER_SIZE_IN_WORDS;\n+\n             WordCount dataSize = elementTag->structRef.dataSize.get();\n             WirePointerCount pointerCount = elementTag->structRef.ptrCount.get();\n \n-            const word* pos = ptr + POINTER_SIZE_IN_WORDS;\n-            for (uint i = 0; i < count / ELEMENTS; i++) {\n-              pos += dataSize;\n+            if (pointerCount > 0 * POINTERS) {\n+              const word* pos = ptr + POINTER_SIZE_IN_WORDS;\n+              for (uint i = 0; i < count / ELEMENTS; i++) {\n+                pos += dataSize;\n \n-              for (uint j = 0; j < pointerCount / POINTERS; j++) {\n-                result += totalSize(segment, reinterpret_cast<const WirePointer*>(pos),\n-                                    nestingLimit);\n-                pos += POINTER_SIZE_IN_WORDS;\n+                for (uint j = 0; j < pointerCount / POINTERS; j++) {\n+                  result += totalSize(segment, reinterpret_cast<const WirePointer*>(pos),\n+                                      nestingLimit);\n+                  pos += POINTER_SIZE_IN_WORDS;\n+                }\n               }\n             }\n             break;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f600d249496c55289fa07fd6a21cadeeb340edb9",
            "date": "2024-12-28T00:22:29Z",
            "author_login": "fhanau"
          },
          {
            "sha": "4c2071bf467cb81622c1d86e083e957027dee5bd",
            "date": "2024-12-27T17:07:32Z",
            "author_login": "kentonv"
          },
          {
            "sha": "1c676b2df7f97220607591a38c28ce7e4a968ad4",
            "date": "2024-12-24T17:12:47Z",
            "author_login": "kentonv"
          },
          {
            "sha": "d18ee6f53dfdb3244a5af7bd270b28246ede380a",
            "date": "2024-12-24T16:57:44Z",
            "author_login": "kentonv"
          },
          {
            "sha": "dd0d2ed0fae0e3556523205f07d14fabd024c516",
            "date": "2024-12-24T16:55:13Z",
            "author_login": "kentonv"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-400",
    "description": "Sandstorm Cap'n Proto before 0.4.1.1 and 0.5.x before 0.5.1.2, when an application invokes the totalSize method on an object reader, allows remote peers to cause a denial of service (CPU consumption) via a crafted small message, which triggers a \"tight\" for loop.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2015-2312.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-08-09T18:29:01.107",
    "last_modified": "2024-11-21T02:27:11.617",
    "fix_date": "2015-03-05T18:27:29Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/03/17/3",
      "source": "security@debian.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=780568",
      "source": "security@debian.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/capnproto/capnproto/blob/master/security-advisories/2015-03-05-0-c%2B%2B-addl-cpu-amplification.md",
      "source": "security@debian.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/capnproto/capnproto/commit/80149744bdafa3ad4eedc83f8ab675e27baee868",
      "source": "security@debian.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/03/17/3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=780568",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/capnproto/capnproto/blob/master/security-advisories/2015-03-05-0-c%2B%2B-addl-cpu-amplification.md",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/capnproto/capnproto/commit/80149744bdafa3ad4eedc83f8ab675e27baee868",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:05.101856",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "capnproto",
    "owner": "capnproto",
    "created_at": "2013-03-29T02:38:48Z",
    "updated_at": "2025-01-14T11:35:17Z",
    "pushed_at": "2025-01-09T11:43:20Z",
    "size": 22925,
    "stars": 11858,
    "forks": 933,
    "open_issues": 251,
    "watchers": 11858,
    "has_security_policy": false,
    "default_branch": "v2",
    "protected_branches": [],
    "languages": {
      "C++": 7786711,
      "Cap'n Proto": 215131,
      "Shell": 60601,
      "CMake": 52207,
      "Starlark": 32975,
      "Makefile": 31296,
      "M4": 30787,
      "Python": 3926,
      "Emacs Lisp": 2197,
      "C": 1631
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:18:38.447836"
  }
}