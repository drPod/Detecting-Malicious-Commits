{
  "cve_id": "CVE-2015-2319",
  "github_data": {
    "repository": "mono/mono",
    "fix_commit": "9c38772f094168d8bfd5bc73bf8925cd04faad10",
    "related_commits": [
      "9c38772f094168d8bfd5bc73bf8925cd04faad10",
      "9c38772f094168d8bfd5bc73bf8925cd04faad10"
    ],
    "patch_url": "https://github.com/mono/mono/commit/9c38772f094168d8bfd5bc73bf8925cd04faad10.patch",
    "fix_commit_details": {
      "sha": "9c38772f094168d8bfd5bc73bf8925cd04faad10",
      "commit_date": "2015-03-06T15:35:27Z",
      "author": {
        "login": "spouliot",
        "type": "User",
        "stats": {
          "total_commits": 393,
          "average_weekly_commits": 0.31873479318734793,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 143
        }
      },
      "commit_message": {
        "title": "    Remove the EXPORT ciphers and related code path",
        "length": 287,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 141,
        "additions": 26,
        "deletions": 115
      },
      "files": [
        {
          "filename": "mcs/class/Mono.Security/Mono.Security.Protocol.Tls/CipherSuiteFactory.cs",
          "status": "modified",
          "additions": 14,
          "deletions": 14,
          "patch": "@@ -116,14 +116,14 @@ private static CipherSuiteCollection GetTls1SupportedCiphers()\n \t\t\tscs.Add((0x00 << 0x08) | 0x09, \"TLS_RSA_WITH_DES_CBC_SHA\", CipherAlgorithmType.Des, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, false, true, 8, 8, 56, 8, 8);\n \t\t\t\n \t\t\t// Supported exportable ciphers\n-\t\t\tscs.Add((0x00 << 0x08) | 0x03, \"TLS_RSA_EXPORT_WITH_RC4_40_MD5\", CipherAlgorithmType.Rc4, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, false, 5, 16, 40, 0, 0);\n-\t\t\tscs.Add((0x00 << 0x08) | 0x06, \"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5\", CipherAlgorithmType.Rc2, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, true, 5, 16, 40, 8, 8);\n-\t\t\tscs.Add((0x00 << 0x08) | 0x08, \"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA\", CipherAlgorithmType.Des, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, true, 5, 8, 40, 8, 8);\n-\t\t\tscs.Add((0x00 << 0x08) | 0x60, \"TLS_RSA_EXPORT_WITH_RC4_56_MD5\", CipherAlgorithmType.Rc4, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, false, 7, 16, 56, 0, 0);\n-\t\t\tscs.Add((0x00 << 0x08) | 0x61, \"TLS_RSA_EXPORT_WITH_RC2_CBC_56_MD5\", CipherAlgorithmType.Rc2, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, true, 7, 16, 56, 8, 8);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x03, \"TLS_RSA_EXPORT_WITH_RC4_40_MD5\", CipherAlgorithmType.Rc4, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, false, 5, 16, 40, 0, 0);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x06, \"TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5\", CipherAlgorithmType.Rc2, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, true, 5, 16, 40, 8, 8);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x08, \"TLS_RSA_EXPORT_WITH_DES40_CBC_SHA\", CipherAlgorithmType.Des, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, true, 5, 8, 40, 8, 8);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x60, \"TLS_RSA_EXPORT_WITH_RC4_56_MD5\", CipherAlgorithmType.Rc4, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, false, 7, 16, 56, 0, 0);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x61, \"TLS_RSA_EXPORT_WITH_RC2_CBC_56_MD5\", CipherAlgorithmType.Rc2, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, true, 7, 16, 56, 8, 8);\n \t\t\t// 56 bits but we use 64 bits because of parity (DES is really 56 bits)\n-\t\t\tscs.Add((0x00 << 0x08) | 0x62, \"TLS_RSA_EXPORT_WITH_DES_CBC_56_SHA\", CipherAlgorithmType.Des, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, true, 8, 8, 64, 8, 8); \n-\t\t\tscs.Add((0x00 << 0x08) | 0x64, \"TLS_RSA_EXPORT_WITH_RC4_56_SHA\", CipherAlgorithmType.Rc4, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, false, 7, 16, 56, 0, 0);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x62, \"TLS_RSA_EXPORT_WITH_DES_CBC_56_SHA\", CipherAlgorithmType.Des, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, true, 8, 8, 64, 8, 8);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x64, \"TLS_RSA_EXPORT_WITH_RC4_56_SHA\", CipherAlgorithmType.Rc4, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, false, 7, 16, 56, 0, 0);\n \t\t\t\n \t\t\t// Default CipherSuite\n \t\t\t// scs.Add(0, \"TLS_NULL_WITH_NULL_NULL\", CipherAlgorithmType.None, HashAlgorithmType.None, ExchangeAlgorithmType.None, true, false, 0, 0, 0, 0, 0);\n@@ -195,14 +195,14 @@ private static CipherSuiteCollection GetSsl3SupportedCiphers()\n \t\t\tscs.Add((0x00 << 0x08) | 0x09, \"SSL_RSA_WITH_DES_CBC_SHA\", CipherAlgorithmType.Des, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, false, true, 8, 8, 56, 8, 8);\n \n \t\t\t// Supported exportable ciphers\n-\t\t\tscs.Add((0x00 << 0x08) | 0x03, \"SSL_RSA_EXPORT_WITH_RC4_40_MD5\", CipherAlgorithmType.Rc4, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, false, 5, 16, 40, 0, 0);\n-\t\t\tscs.Add((0x00 << 0x08) | 0x06, \"SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5\", CipherAlgorithmType.Rc2, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, true, 5, 16, 40, 8, 8);\n-\t\t\tscs.Add((0x00 << 0x08) | 0x08, \"SSL_RSA_EXPORT_WITH_DES40_CBC_SHA\", CipherAlgorithmType.Des, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, true, 5, 8, 40, 8, 8);\n-\t\t\tscs.Add((0x00 << 0x08) | 0x60, \"SSL_RSA_EXPORT_WITH_RC4_56_MD5\", CipherAlgorithmType.Rc4, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, false, 7, 16, 56, 0, 0);\n-\t\t\tscs.Add((0x00 << 0x08) | 0x61, \"SSL_RSA_EXPORT_WITH_RC2_CBC_56_MD5\", CipherAlgorithmType.Rc2, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, true, 7, 16, 56, 8, 8);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x03, \"SSL_RSA_EXPORT_WITH_RC4_40_MD5\", CipherAlgorithmType.Rc4, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, false, 5, 16, 40, 0, 0);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x06, \"SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5\", CipherAlgorithmType.Rc2, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, true, 5, 16, 40, 8, 8);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x08, \"SSL_RSA_EXPORT_WITH_DES40_CBC_SHA\", CipherAlgorithmType.Des, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, true, 5, 8, 40, 8, 8);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x60, \"SSL_RSA_EXPORT_WITH_RC4_56_MD5\", CipherAlgorithmType.Rc4, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, false, 7, 16, 56, 0, 0);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x61, \"SSL_RSA_EXPORT_WITH_RC2_CBC_56_MD5\", CipherAlgorithmType.Rc2, HashAlgorithmType.Md5, ExchangeAlgorithmType.RsaKeyX, true, true, 7, 16, 56, 8, 8);\n \t\t\t// 56 bits but we use 64 bits because of parity (DES is really 56 bits)\n-\t\t\tscs.Add((0x00 << 0x08) | 0x62, \"SSL_RSA_EXPORT_WITH_DES_CBC_56_SHA\", CipherAlgorithmType.Des, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, true, 8, 8, 64, 8, 8); \n-\t\t\tscs.Add((0x00 << 0x08) | 0x64, \"SSL_RSA_EXPORT_WITH_RC4_56_SHA\", CipherAlgorithmType.Rc4, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, false, 7, 16, 56, 0, 0);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x62, \"SSL_RSA_EXPORT_WITH_DES_CBC_56_SHA\", CipherAlgorithmType.Des, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, true, 8, 8, 64, 8, 8);\n+\t\t\t// scs.Add((0x00 << 0x08) | 0x64, \"SSL_RSA_EXPORT_WITH_RC4_56_SHA\", CipherAlgorithmType.Rc4, HashAlgorithmType.Sha1, ExchangeAlgorithmType.RsaKeyX, true, false, 7, 16, 56, 0, 0);\n \n \t\t\t// Default CipherSuite\n \t\t\t// scs.Add(0, \"SSL_NULL_WITH_NULL_NULL\", CipherAlgorithmType.None, HashAlgorithmType.None, true, false, 0, 0, 0, 0, 0);"
        },
        {
          "filename": "mcs/class/Mono.Security/Mono.Security.Protocol.Tls/ClientRecordProtocol.cs",
          "status": "modified",
          "additions": 0,
          "deletions": 7,
          "patch": "@@ -159,13 +159,6 @@ private HandshakeMessage createServerHandshakeMessage(\n \t\t\t\t\t\tbreak;\n \t\t\t\t\treturn new TlsServerCertificate(this.context, buffer);\n \n-\t\t\t\t\t// Optional\n-\t\t\t\tcase HandshakeType.ServerKeyExchange:\n-\t\t\t\t\t// only for RSA_EXPORT\n-\t\t\t\t\tif (last == HandshakeType.Certificate && context.Current.Cipher.IsExportable)\n-\t\t\t\t\t\treturn new TlsServerKeyExchange(this.context, buffer);\n-\t\t\t\t\tbreak;\n-\n \t\t\t\t\t// Optional\n \t\t\t\tcase HandshakeType.CertificateRequest:\n \t\t\t\t\tif (last == HandshakeType.ServerKeyExchange || last == HandshakeType.Certificate)"
        },
        {
          "filename": "mcs/class/Mono.Security/Mono.Security.Protocol.Tls/SslCipherSuite.cs",
          "status": "modified",
          "additions": 5,
          "deletions": 49,
          "patch": "@@ -190,59 +190,15 @@ public override void ComputeKeys()\n \t\t\tthis.Context.ClientWriteKey = keyBlock.ReadBytes(this.KeyMaterialSize);\n \t\t\tthis.Context.ServerWriteKey = keyBlock.ReadBytes(this.KeyMaterialSize);\n \n-\t\t\tif (!this.IsExportable)\n+\t\t\tif (this.IvSize != 0)\n \t\t\t{\n-\t\t\t\tif (this.IvSize != 0)\n-\t\t\t\t{\n-\t\t\t\t\tthis.Context.ClientWriteIV = keyBlock.ReadBytes(this.IvSize);\n-\t\t\t\t\tthis.Context.ServerWriteIV = keyBlock.ReadBytes(this.IvSize);\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tthis.Context.ClientWriteIV = CipherSuite.EmptyArray;\n-\t\t\t\t\tthis.Context.ServerWriteIV = CipherSuite.EmptyArray;\n-\t\t\t\t}\n+\t\t\t\tthis.Context.ClientWriteIV = keyBlock.ReadBytes(this.IvSize);\n+\t\t\t\tthis.Context.ServerWriteIV = keyBlock.ReadBytes(this.IvSize);\n \t\t\t}\n \t\t\telse\n \t\t\t{\n-\t\t\t\tHashAlgorithm md5 = MD5.Create();\n-\n-\t\t\t\tint keySize = (md5.HashSize >> 3); //in bytes not bits\n-\t\t\t\tbyte[] temp = new byte [keySize];\n-\n-\t\t\t\t// Generate final write keys\n-\t\t\t\tmd5.TransformBlock(this.Context.ClientWriteKey, 0, this.Context.ClientWriteKey.Length, temp, 0);\n-\t\t\t\tmd5.TransformFinalBlock(this.Context.RandomCS, 0, this.Context.RandomCS.Length);\n-\t\t\t\tbyte[] finalClientWriteKey = new byte[this.ExpandedKeyMaterialSize];\n-\t\t\t\tBuffer.BlockCopy(md5.Hash, 0, finalClientWriteKey, 0, this.ExpandedKeyMaterialSize);\n-\n-\t\t\t\tmd5.Initialize();\n-\t\t\t\tmd5.TransformBlock(this.Context.ServerWriteKey, 0, this.Context.ServerWriteKey.Length, temp, 0);\n-\t\t\t\tmd5.TransformFinalBlock(this.Context.RandomSC, 0, this.Context.RandomSC.Length);\n-\t\t\t\tbyte[] finalServerWriteKey = new byte[this.ExpandedKeyMaterialSize];\n-\t\t\t\tBuffer.BlockCopy(md5.Hash, 0, finalServerWriteKey, 0, this.ExpandedKeyMaterialSize);\n-\t\t\t\t\n-\t\t\t\tthis.Context.ClientWriteKey = finalClientWriteKey;\n-\t\t\t\tthis.Context.ServerWriteKey = finalServerWriteKey;\n-\n-\t\t\t\t// Generate IV keys\n-\t\t\t\tif (this.IvSize > 0) \n-\t\t\t\t{\n-\t\t\t\t\tmd5.Initialize();\n-\t\t\t\t\ttemp = md5.ComputeHash(this.Context.RandomCS, 0, this.Context.RandomCS.Length);\n-\t\t\t\t\tthis.Context.ClientWriteIV = new byte[this.IvSize];\n-\t\t\t\t\tBuffer.BlockCopy(temp, 0, this.Context.ClientWriteIV, 0, this.IvSize);\n-\n-\t\t\t\t\tmd5.Initialize();\n-\t\t\t\t\ttemp = md5.ComputeHash(this.Context.RandomSC, 0, this.Context.RandomSC.Length);\n-\t\t\t\t\tthis.Context.ServerWriteIV = new byte[this.IvSize];\n-\t\t\t\t\tBuffer.BlockCopy(temp, 0, this.Context.ServerWriteIV, 0, this.IvSize);\n-\t\t\t\t}\n-\t\t\t\telse \n-\t\t\t\t{\n-\t\t\t\t\tthis.Context.ClientWriteIV = CipherSuite.EmptyArray;\n-\t\t\t\t\tthis.Context.ServerWriteIV = CipherSuite.EmptyArray;\n-\t\t\t\t}\n+\t\t\t\tthis.Context.ClientWriteIV = CipherSuite.EmptyArray;\n+\t\t\t\tthis.Context.ServerWriteIV = CipherSuite.EmptyArray;\n \t\t\t}\n \n \t\t\tDebugHelper.WriteLine(\">>>> KeyBlock\", keyBlock.ToArray());"
        },
        {
          "filename": "mcs/class/Mono.Security/Mono.Security.Protocol.Tls/SslServerStream.cs",
          "status": "modified",
          "additions": 2,
          "deletions": 10,
          "patch": "@@ -233,16 +233,8 @@ internal override void EndNegotiateHandshake(IAsyncResult asyncResult)\n \t\t\t// Send ServerCertificate message\n \t\t\tthis.protocol.SendRecord(HandshakeType.Certificate);\n \n-\t\t\t// If the negotiated cipher is a KeyEx cipher send ServerKeyExchange\n-\t\t\tif (this.context.Negotiating.Cipher.IsExportable)\n-\t\t\t{\n-\t\t\t\tthis.protocol.SendRecord(HandshakeType.ServerKeyExchange);\n-\t\t\t}\n-\n-\t\t\t// If the negotiated cipher is a KeyEx cipher or\n-\t\t\t// the client certificate is required send the CertificateRequest message\n-\t\t\tif (this.context.Negotiating.Cipher.IsExportable ||\n-\t\t\t\t((ServerContext)this.context).ClientCertificateRequired ||\n+\t\t\t// If the client certificate is required send the CertificateRequest message\n+\t\t\tif (((ServerContext)this.context).ClientCertificateRequired ||\n \t\t\t\t((ServerContext)this.context).RequestClientCertificate)\n \t\t\t{\n \t\t\t\tthis.protocol.SendRecord(HandshakeType.CertificateRequest);"
        },
        {
          "filename": "mcs/class/Mono.Security/Mono.Security.Protocol.Tls/TlsCipherSuite.cs",
          "status": "modified",
          "additions": 5,
          "deletions": 35,
          "patch": "@@ -123,45 +123,15 @@ public override void ComputeKeys()\n \t\t\tthis.Context.ClientWriteKey = keyBlock.ReadBytes(this.KeyMaterialSize);\n \t\t\tthis.Context.ServerWriteKey = keyBlock.ReadBytes(this.KeyMaterialSize);\n \n-\t\t\tif (!this.IsExportable)\n+\t\t\tif (this.IvSize != 0)\n \t\t\t{\n-\t\t\t\tif (this.IvSize != 0)\n-\t\t\t\t{\n-\t\t\t\t\tthis.Context.ClientWriteIV = keyBlock.ReadBytes(this.IvSize);\n-\t\t\t\t\tthis.Context.ServerWriteIV = keyBlock.ReadBytes(this.IvSize);\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tthis.Context.ClientWriteIV = CipherSuite.EmptyArray;\n-\t\t\t\t\tthis.Context.ServerWriteIV = CipherSuite.EmptyArray;\n-\t\t\t\t}\n+\t\t\t\tthis.Context.ClientWriteIV = keyBlock.ReadBytes(this.IvSize);\n+\t\t\t\tthis.Context.ServerWriteIV = keyBlock.ReadBytes(this.IvSize);\n \t\t\t}\n \t\t\telse\n \t\t\t{\n-\t\t\t\t// Generate final write keys\n-\t\t\t\tbyte[] finalClientWriteKey\t= PRF(this.Context.ClientWriteKey, \"client write key\", this.Context.RandomCS, this.ExpandedKeyMaterialSize);\n-\t\t\t\tbyte[] finalServerWriteKey\t= PRF(this.Context.ServerWriteKey, \"server write key\", this.Context.RandomCS, this.ExpandedKeyMaterialSize);\n-\t\t\t\t\n-\t\t\t\tthis.Context.ClientWriteKey\t= finalClientWriteKey;\n-\t\t\t\tthis.Context.ServerWriteKey\t= finalServerWriteKey;\n-\n-\t\t\t\tif (this.IvSize > 0) \n-\t\t\t\t{\n-\t\t\t\t\t// Generate IV block\n-\t\t\t\t\tbyte[] ivBlock = PRF(CipherSuite.EmptyArray, \"IV block\", this.Context.RandomCS, this.IvSize*2);\n-\n-\t\t\t\t\t// Generate IV keys\n-\t\t\t\t\tthis.Context.ClientWriteIV = new byte[this.IvSize];\t\t\t\t\n-\t\t\t\t\tBuffer.BlockCopy(ivBlock, 0, this.Context.ClientWriteIV, 0, this.Context.ClientWriteIV.Length);\n-\n-\t\t\t\t\tthis.Context.ServerWriteIV = new byte[this.IvSize];\n-\t\t\t\t\tBuffer.BlockCopy(ivBlock, this.IvSize, this.Context.ServerWriteIV, 0, this.Context.ServerWriteIV.Length);\n-\t\t\t\t}\n-\t\t\t\telse \n-\t\t\t\t{\n-\t\t\t\t\tthis.Context.ClientWriteIV = CipherSuite.EmptyArray;\n-\t\t\t\t\tthis.Context.ServerWriteIV = CipherSuite.EmptyArray;\n-\t\t\t\t}\n+\t\t\t\tthis.Context.ClientWriteIV = CipherSuite.EmptyArray;\n+\t\t\t\tthis.Context.ServerWriteIV = CipherSuite.EmptyArray;\n \t\t\t}\n \n \t\t\tDebugHelper.WriteLine(\">>>> KeyBlock\", keyBlock.ToArray());"
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0f53e9e151d92944cacab3e24ac359410c606df6",
            "date": "2024-08-27T16:49:28Z",
            "author_login": "jeffschwMSFT"
          },
          {
            "sha": "c6cdaadb54a1173484f1ada524306ddbf8c2e7d5",
            "date": "2024-05-13T16:28:40Z",
            "author_login": "lawn123"
          },
          {
            "sha": "8013edfca08633610b4da4b651fc2ac92370633d",
            "date": "2024-05-13T16:28:26Z",
            "author_login": "lawn123"
          },
          {
            "sha": "9da2bc275417c5a138316a4f8a48fabf47276c53",
            "date": "2024-05-13T16:28:13Z",
            "author_login": "lawn123"
          },
          {
            "sha": "c23c6370dcd6dcd614fafea5393aa10c8e3e5ad2",
            "date": "2024-05-13T16:28:01Z",
            "author_login": "lawn123"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-295",
    "description": "The TLS stack in Mono before 3.12.1 makes it easier for remote attackers to conduct cipher-downgrade attacks to EXPORT_RSA ciphers via crafted TLS traffic, related to the \"FREAK\" issue, a different vulnerability than CVE-2015-0204.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-01-08T19:29:00.860",
    "last_modified": "2024-11-21T02:27:12.450",
    "fix_date": "2015-03-06T15:35:27Z"
  },
  "references": [
    {
      "url": "http://www.mono-project.com/news/2015/03/07/mono-tls-vulnerability/",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/03/17/9",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/73250",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2547-1",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1202869",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mono/mono/commit/9c38772f094168d8bfd5bc73bf8925cd04faad10",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://mitls.org/pages/attacks/SMACK#freak",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2015/dsa-3202",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.mono-project.com/news/2015/03/07/mono-tls-vulnerability/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/03/17/9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/73250",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-2547-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1202869",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mono/mono/commit/9c38772f094168d8bfd5bc73bf8925cd04faad10",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://mitls.org/pages/attacks/SMACK#freak",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2015/dsa-3202",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:12.824081",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mono",
    "owner": "mono",
    "created_at": "2010-07-22T18:06:36Z",
    "updated_at": "2025-01-13T15:03:30Z",
    "pushed_at": "2024-08-27T16:49:28Z",
    "size": 579418,
    "stars": 11189,
    "forks": 3832,
    "open_issues": 2268,
    "watchers": 11189,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "2017-02",
      "2017-04",
      "2017-06",
      "2017-08",
      "2017-10",
      "2017-12",
      "2018-02",
      "2018-04",
      "2018-06",
      "2018-08",
      "2018-10",
      "2018-12",
      "2019-02",
      "2019-04",
      "2019-06"
    ],
    "languages": {
      "C#": 277490592,
      "C": 20940123,
      "TSQL": 3587831,
      "PLpgSQL": 2626770,
      "ASP.NET": 2264375,
      "JavaScript": 1343261,
      "Makefile": 1258321,
      "Shell": 655414,
      "HTML": 617748,
      "M4": 318026,
      "Python": 277555,
      "C++": 252116,
      "Batchfile": 84271,
      "PLSQL": 70204,
      "Perl": 61255,
      "XSLT": 37762,
      "Ruby": 15052,
      "Groovy": 10705,
      "CSS": 10166,
      "Roff": 9064,
      "Assembly": 4183,
      "CMake": 3118,
      "DTrace": 2862,
      "Rich Text Format": 1720,
      "Visual Basic .NET": 1413,
      "Java": 738,
      "sed": 634,
      "Lua": 529,
      "RPC": 512,
      "PHP": 152,
      "Smalltalk": 14
    },
    "commit_activity": {
      "total_commits_last_year": 11,
      "avg_commits_per_week": 0.21153846153846154,
      "days_active_last_year": 5
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:55:49.486218"
  }
}