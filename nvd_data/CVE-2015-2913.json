{
  "cve_id": "CVE-2015-2913",
  "github_data": {
    "repository": "orientechnologies/orientdb",
    "fix_commit": "668ece96be210e742a4e2820a3085b215cf55104",
    "related_commits": [
      "668ece96be210e742a4e2820a3085b215cf55104",
      "668ece96be210e742a4e2820a3085b215cf55104"
    ],
    "patch_url": "https://github.com/orientechnologies/orientdb/commit/668ece96be210e742a4e2820a3085b215cf55104.patch",
    "fix_commit_details": {
      "sha": "668ece96be210e742a4e2820a3085b215cf55104",
      "commit_date": "2015-04-04T14:45:12Z",
      "author": {
        "login": "lvca",
        "type": "User",
        "stats": {
          "total_commits": 4480,
          "average_weekly_commits": 6.381766381766382,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 251
        }
      },
      "commit_message": {
        "title": "Adopted SecureRandom to avoid predicable random numbers in session",
        "length": 66,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 271,
        "additions": 136,
        "deletions": 135
      },
      "files": [
        {
          "filename": "server/src/main/java/com/orientechnologies/orient/server/network/protocol/http/OHttpSessionManager.java",
          "status": "modified",
          "additions": 136,
          "deletions": 135,
          "patch": "@@ -1,141 +1,142 @@\n /*\r\n-    *\r\n-    *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\r\n-    *  *\r\n-    *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n-    *  *  you may not use this file except in compliance with the License.\r\n-    *  *  You may obtain a copy of the License at\r\n-    *  *\r\n-    *  *       http://www.apache.org/licenses/LICENSE-2.0\r\n-    *  *\r\n-    *  *  Unless required by applicable law or agreed to in writing, software\r\n-    *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n-    *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n-    *  *  See the License for the specific language governing permissions and\r\n-    *  *  limitations under the License.\r\n-    *  *\r\n-    *  * For more information: http://www.orientechnologies.com\r\n-    *\r\n-    */\r\n+ *\r\n+ *  *  Copyright 2014 Orient Technologies LTD (info(at)orientechnologies.com)\r\n+ *  *\r\n+ *  *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  *  you may not use this file except in compliance with the License.\r\n+ *  *  You may obtain a copy of the License at\r\n+ *  *\r\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\r\n+ *  *\r\n+ *  *  Unless required by applicable law or agreed to in writing, software\r\n+ *  *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  *  See the License for the specific language governing permissions and\r\n+ *  *  limitations under the License.\r\n+ *  *\r\n+ *  * For more information: http://www.orientechnologies.com\r\n+ *\r\n+ */\r\n package com.orientechnologies.orient.server.network.protocol.http;\r\n \r\n import com.orientechnologies.common.concur.resource.OSharedResourceAbstract;\r\n- import com.orientechnologies.common.log.OLogManager;\r\n- import com.orientechnologies.orient.core.Orient;\r\n- import com.orientechnologies.orient.core.config.OGlobalConfiguration;\r\n-\r\n- import java.util.HashMap;\r\n- import java.util.Iterator;\r\n- import java.util.Map;\r\n- import java.util.Map.Entry;\r\n- import java.util.Random;\r\n- import java.util.TimerTask;\r\n+import com.orientechnologies.common.log.OLogManager;\r\n+import com.orientechnologies.orient.core.Orient;\r\n+import com.orientechnologies.orient.core.config.OGlobalConfiguration;\r\n+\r\n+import java.security.SecureRandom;\r\n+import java.util.HashMap;\r\n+import java.util.Iterator;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Random;\r\n+import java.util.TimerTask;\r\n \r\n /**\r\n-  * Handles the HTTP sessions such as a real HTTP Server.\r\n-  *\r\n-  * @author Luca Garulli\r\n-  */\r\n- public class OHttpSessionManager extends OSharedResourceAbstract {\r\n-   private static final OHttpSessionManager instance = new OHttpSessionManager();\r\n-   private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\r\n-   private int                              expirationTime;\r\n-   private Random                           random   = new Random();\r\n-\r\n-   protected OHttpSessionManager() {\r\n-     expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\r\n-\r\n-     Orient.instance().scheduleTask(new TimerTask() {\r\n-       @Override\r\n-       public void run() {\r\n-         final int expired = checkSessionsValidity();\r\n-         if (expired > 0)\r\n-           OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\r\n-       }\r\n-     }, expirationTime, expirationTime);\r\n-   }\r\n-\r\n-   public int checkSessionsValidity() {\r\n-     int expired = 0;\r\n-\r\n-     acquireExclusiveLock();\r\n-     try {\r\n-       final long now = System.currentTimeMillis();\r\n-\r\n-       Entry<String, OHttpSession> s;\r\n-       for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\r\n-         s = it.next();\r\n-\r\n-         if (now - s.getValue().getUpdatedOn() > expirationTime) {\r\n-           // REMOVE THE SESSION\r\n-           it.remove();\r\n-           expired++;\r\n-         }\r\n-       }\r\n-\r\n-     } finally {\r\n-       releaseExclusiveLock();\r\n-     }\r\n-\r\n-     return expired;\r\n-   }\r\n-\r\n-   public OHttpSession[] getSessions() {\r\n-     acquireSharedLock();\r\n-     try {\r\n-\r\n-       return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\r\n-\r\n-     } finally {\r\n-       releaseSharedLock();\r\n-     }\r\n-   }\r\n-\r\n-   public OHttpSession getSession(final String iId) {\r\n-     acquireSharedLock();\r\n-     try {\r\n-\r\n-       final OHttpSession sess = sessions.get(iId);\r\n-       if (sess != null)\r\n-         sess.updateLastUpdatedOn();\r\n-       return sess;\r\n-\r\n-     } finally {\r\n-       releaseSharedLock();\r\n-     }\r\n-   }\r\n-\r\n-   public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\r\n-     acquireExclusiveLock();\r\n-     try {\r\n-       final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\r\n-       sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\r\n-       return id;\r\n-\r\n-     } finally {\r\n-       releaseExclusiveLock();\r\n-     }\r\n-   }\r\n-\r\n-   public OHttpSession removeSession(final String iSessionId) {\r\n-     acquireExclusiveLock();\r\n-     try {\r\n-       return sessions.remove(iSessionId);\r\n-\r\n-     } finally {\r\n-       releaseExclusiveLock();\r\n-     }\r\n-   }\r\n-\r\n-   public int getExpirationTime() {\r\n-     return expirationTime;\r\n-   }\r\n-\r\n-   public void setExpirationTime(int expirationTime) {\r\n-     this.expirationTime = expirationTime;\r\n-   }\r\n-\r\n-   public static OHttpSessionManager getInstance() {\r\n-     return instance;\r\n-   }\r\n- }\r\n+ * Handles the HTTP sessions such as a real HTTP Server.\r\n+ *\r\n+ * @author Luca Garulli\r\n+ */\r\n+public class OHttpSessionManager extends OSharedResourceAbstract {\r\n+  private static final OHttpSessionManager instance = new OHttpSessionManager();\r\n+  private Map<String, OHttpSession>        sessions = new HashMap<String, OHttpSession>();\r\n+  private int                              expirationTime;\r\n+  private Random                           random   = new SecureRandom();\r\n+\r\n+  protected OHttpSessionManager() {\r\n+    expirationTime = OGlobalConfiguration.NETWORK_HTTP_SESSION_EXPIRE_TIMEOUT.getValueAsInteger() * 1000;\r\n+\r\n+    Orient.instance().scheduleTask(new TimerTask() {\r\n+      @Override\r\n+      public void run() {\r\n+        final int expired = checkSessionsValidity();\r\n+        if (expired > 0)\r\n+          OLogManager.instance().debug(this, \"Removed %d session because expired\", expired);\r\n+      }\r\n+    }, expirationTime, expirationTime);\r\n+  }\r\n+\r\n+  public int checkSessionsValidity() {\r\n+    int expired = 0;\r\n+\r\n+    acquireExclusiveLock();\r\n+    try {\r\n+      final long now = System.currentTimeMillis();\r\n+\r\n+      Entry<String, OHttpSession> s;\r\n+      for (Iterator<Map.Entry<String, OHttpSession>> it = sessions.entrySet().iterator(); it.hasNext();) {\r\n+        s = it.next();\r\n+\r\n+        if (now - s.getValue().getUpdatedOn() > expirationTime) {\r\n+          // REMOVE THE SESSION\r\n+          it.remove();\r\n+          expired++;\r\n+        }\r\n+      }\r\n+\r\n+    } finally {\r\n+      releaseExclusiveLock();\r\n+    }\r\n+\r\n+    return expired;\r\n+  }\r\n+\r\n+  public OHttpSession[] getSessions() {\r\n+    acquireSharedLock();\r\n+    try {\r\n+\r\n+      return (OHttpSession[]) sessions.values().toArray(new OHttpSession[sessions.size()]);\r\n+\r\n+    } finally {\r\n+      releaseSharedLock();\r\n+    }\r\n+  }\r\n+\r\n+  public OHttpSession getSession(final String iId) {\r\n+    acquireSharedLock();\r\n+    try {\r\n+\r\n+      final OHttpSession sess = sessions.get(iId);\r\n+      if (sess != null)\r\n+        sess.updateLastUpdatedOn();\r\n+      return sess;\r\n+\r\n+    } finally {\r\n+      releaseSharedLock();\r\n+    }\r\n+  }\r\n+\r\n+  public String createSession(final String iDatabaseName, final String iUserName, final String iUserPassword) {\r\n+    acquireExclusiveLock();\r\n+    try {\r\n+      final String id = \"OS\" + System.currentTimeMillis() + random.nextLong();\r\n+      sessions.put(id, new OHttpSession(id, iDatabaseName, iUserName, iUserPassword));\r\n+      return id;\r\n+\r\n+    } finally {\r\n+      releaseExclusiveLock();\r\n+    }\r\n+  }\r\n+\r\n+  public OHttpSession removeSession(final String iSessionId) {\r\n+    acquireExclusiveLock();\r\n+    try {\r\n+      return sessions.remove(iSessionId);\r\n+\r\n+    } finally {\r\n+      releaseExclusiveLock();\r\n+    }\r\n+  }\r\n+\r\n+  public int getExpirationTime() {\r\n+    return expirationTime;\r\n+  }\r\n+\r\n+  public void setExpirationTime(int expirationTime) {\r\n+    this.expirationTime = expirationTime;\r\n+  }\r\n+\r\n+  public static OHttpSessionManager getInstance() {\r\n+    return instance;\r\n+  }\r\n+}\r"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "261ebe620d70dfa6d8a9b764c8788260bb8c4451",
            "date": "2025-01-13T20:32:30Z",
            "author_login": "tglman"
          },
          {
            "sha": "0ae7918baa8e9586ee2b7c67bb317baca13f529a",
            "date": "2025-01-13T20:03:22Z",
            "author_login": "tglman"
          },
          {
            "sha": "23d2e156dbf6c2c872ea9f1b07f1e25671a0f7f7",
            "date": "2025-01-13T14:48:54Z",
            "author_login": "tglman"
          },
          {
            "sha": "682b53ab96dde0aa7755031a338fce188024ad66",
            "date": "2025-01-13T14:47:36Z",
            "author_login": "tglman"
          },
          {
            "sha": "750402cdc34209a23931e1b9abc249f79f853ef5",
            "date": "2025-01-13T14:47:19Z",
            "author_login": "tglman"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-200",
    "description": "server/network/protocol/http/OHttpSessionManager.java in the Studio component in OrientDB Server Community Edition before 2.0.15 and 2.1.x before 2.1.1 improperly relies on the java.util.Random class for generation of random Session ID values, which makes it easier for remote attackers to predict a value by determining the internal state of the PRNG in this class.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2015-12-31T05:59:09.470",
    "last_modified": "2024-11-21T02:28:18.503",
    "fix_date": "2015-04-04T14:45:12Z"
  },
  "references": [
    {
      "url": "https://github.com/orientechnologies/orientdb/commit/668ece96be210e742a4e2820a3085b215cf55104",
      "source": "cret@cert.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.kb.cert.org/vuls/id/845332",
      "source": "cret@cert.org",
      "tags": [
        "Third Party Advisory",
        "US Government Resource"
      ]
    },
    {
      "url": "https://github.com/orientechnologies/orientdb/commit/668ece96be210e742a4e2820a3085b215cf55104",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.kb.cert.org/vuls/id/845332",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "US Government Resource"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:40.192366",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "orientdb",
    "owner": "orientechnologies",
    "created_at": "2012-12-09T20:33:47Z",
    "updated_at": "2025-01-13T20:33:40Z",
    "pushed_at": "2025-01-13T23:21:42Z",
    "size": 293800,
    "stars": 4760,
    "forks": 871,
    "open_issues": 308,
    "watchers": 4760,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "Java": 23733081,
      "HTML": 637100,
      "JavaScript": 526128,
      "TypeScript": 309406,
      "CSS": 56453,
      "PLpgSQL": 54881,
      "Shell": 24627,
      "Batchfile": 13771,
      "Scala": 11361,
      "Groovy": 1712,
      "Dockerfile": 1484,
      "Gnuplot": 1245,
      "SCSS": 1116
    },
    "commit_activity": {
      "total_commits_last_year": 921,
      "avg_commits_per_week": 17.71153846153846,
      "days_active_last_year": 164
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:34:52.926125"
  }
}