{
  "cve_id": "CVE-2015-3406",
  "github_data": {
    "repository": "audreyt/module-signature",
    "fix_commit": "8a9164596fa5952d4fbcde5aa1c7d1c7bc85372f",
    "related_commits": [
      "8a9164596fa5952d4fbcde5aa1c7d1c7bc85372f",
      "8a9164596fa5952d4fbcde5aa1c7d1c7bc85372f"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "8a9164596fa5952d4fbcde5aa1c7d1c7bc85372f",
      "commit_date": "2015-04-05T08:05:20Z",
      "author": {
        "login": "audreyt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "* Fix issues reported by John Lightsey",
        "length": 38,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 51,
        "additions": 34,
        "deletions": 17
      },
      "files": [
        {
          "filename": "Makefile.PL",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -10,6 +10,7 @@ readme_from     'lib/Module/Signature.pm';\n repository      'http://github.com/audreyt/module-signature';\n install_script  'script/cpansign';\n build_requires  'Test::More', 0, 'IPC::Run', 0;\n+requires        'File::Temp';\n \n # On Win32 (excluding cygwin) we know that IO::Socket::INET,\n # which is needed for keyserver stuff, doesn't work. In fact"
        },
        {
          "filename": "README",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -248,7 +248,7 @@ SEE ALSO\n     Dist::Zilla::Plugin::Signature\n \n AUTHORS\n-    \u5510\u9cf3 <cpan@audreyt.org>\n+    Audrey Tang <cpan@audreyt.org>\n \n CC0 1.0 Universal\n     To the extent possible under law, \u5510\u9cf3 has waived all copyright and"
        },
        {
          "filename": "lib/Module/Signature.pm",
          "status": "modified",
          "additions": 32,
          "deletions": 16,
          "patch": "@@ -1,5 +1,5 @@\n package Module::Signature;\n-$Module::Signature::VERSION = '0.73_01';\n+$Module::Signature::VERSION = '0.74';\n \n use 5.005;\n use strict;\n@@ -58,6 +58,8 @@ sub _cipher_map {\n     my @lines = split /\\015?\\012/, $sigtext;\n     my %map;\n     for my $line (@lines) {\n+        last if $line eq '-----BEGIN PGP SIGNATURE-----';\n+        next if $line =~ /^---/ .. $line eq '';\n         my($cipher,$digest,$file) = split \" \", $line, 3;\n         return unless defined $file;\n         $map{$file} = [$cipher, $digest];\n@@ -66,7 +68,7 @@ sub _cipher_map {\n }\n \n sub verify {\n-    my %args = ( skip => 1, @_ );\n+    my %args = ( @_ );\n     my $rv;\n \n     (-r $SIGNATURE) or do {\n@@ -179,6 +181,11 @@ sub _fullcheck {\n         ($mani, $file) = ExtUtils::Manifest::fullcheck();\n     }\n     else {\n+        my $_maniskip = &ExtUtils::Manifest::maniskip;\n+        local *ExtUtils::Manifest::maniskip = sub { sub {\n+            return unless $skip;\n+            return $_maniskip->(@_);\n+        } };\n         ($mani, $file) = ExtUtils::Manifest::fullcheck();\n     }\n \n@@ -238,6 +245,11 @@ sub _verify_gpg {\n \n     my $keyserver = _keyserver($version);\n \n+    require File::Temp;\n+    my $fh = File::Temp->new();\n+    print $fh $sigtext;\n+    close $fh;\n+\n     my $gpg = _which_gpg();\n     my @quiet = $Verbose ? () : qw(-q --logger-fd=1);\n     my @cmd = (\n@@ -246,7 +258,7 @@ sub _verify_gpg {\n             ($AutoKeyRetrieve and $version ge '1.0.7')\n                 ? '--keyserver-options=auto-key-retrieve'\n                 : ()\n-        ) : ()), $SIGNATURE\n+        ) : ()), $fh->filename\n     );\n \n     my $output = '';\n@@ -258,6 +270,7 @@ sub _verify_gpg {\n         my $cmd = join ' ', @cmd;\n         $output = `$cmd`;\n     }\n+    unlink $fh->filename;\n \n     if( $? ) {\n         print STDERR $output;\n@@ -286,7 +299,7 @@ sub _verify_crypt_openpgp {\n     my $pgp = Crypt::OpenPGP->new(\n         ($KeyServer) ? ( KeyServer => $KeyServer, AutoKeyRetrieve => $AutoKeyRetrieve ) : (),\n     );\n-    my $rv = $pgp->handle( Filename => $SIGNATURE )\n+    my $rv = $pgp->handle( Data => $sigtext )\n         or die $pgp->errstr;\n \n     return SIGNATURE_BAD if (!$rv->{Validity} and $AutoKeyRetrieve);\n@@ -309,32 +322,35 @@ sub _read_sigfile {\n     my $well_formed;\n \n     local *D;\n-    open D, $sigfile or die \"Could not open $sigfile: $!\";\n+    open D, \"< $sigfile\" or die \"Could not open $sigfile: $!\";\n \n     if ($] >= 5.006 and <D> =~ /\\r/) {\n         close D;\n-        open D, $sigfile or die \"Could not open $sigfile: $!\";\n+        open D, '<', $sigfile or die \"Could not open $sigfile: $!\";\n         binmode D, ':crlf';\n     } else {\n         close D;\n-        open D, $sigfile or die \"Could not open $sigfile: $!\";\n+        open D, \"< $sigfile\" or die \"Could not open $sigfile: $!\";\n     }\n \n+    my $begin = \"-----BEGIN PGP SIGNED MESSAGE-----\\n\";\n+    my $end = \"-----END PGP SIGNATURE-----\\n\";\n     while (<D>) {\n-        next if (1 .. /^-----BEGIN PGP SIGNED MESSAGE-----/);\n-        last if /^-----BEGIN PGP SIGNATURE/;\n-\n+        next if (1 .. ($_ eq $begin));\n         $signature .= $_;\n+        return \"$begin$signature\" if $_ eq $end;\n     }\n \n-    return ((split(/\\n+/, $signature, 2))[1]);\n+    return;\n }\n \n sub _compare {\n     my ($str1, $str2, $ok) = @_;\n \n     # normalize all linebreaks\n+    $str1 =~ s/^-----BEGIN PGP SIGNED MESSAGE-----\\n(?:.+\\n)*\\n//;\n     $str1 =~ s/[^\\S ]+/\\n/g; $str2 =~ s/[^\\S ]+/\\n/g;\n+    $str1 =~ s/-----BEGIN PGP SIGNATURE-----\\n(?:.+\\n)*$//;\n \n     return $ok if $str1 eq $str2;\n \n@@ -345,7 +361,7 @@ sub _compare {\n     }\n     else {\n         local (*D, *S);\n-        open S, $SIGNATURE or die \"Could not open $SIGNATURE: $!\";\n+        open S, \"< $SIGNATURE\" or die \"Could not open $SIGNATURE: $!\";\n         open D, \"| diff -u $SIGNATURE -\" or (warn \"Could not call diff: $!\", return SIGNATURE_MISMATCH);\n         while (<S>) {\n             print D $_ if (1 .. /^-----BEGIN PGP SIGNED MESSAGE-----/);\n@@ -412,9 +428,9 @@ sub _sign_gpg {\n         die \"Cannot find $sigfile.tmp, signing aborted.\\n\";\n     };\n \n-    open D, \"$sigfile.tmp\" or die \"Cannot open $sigfile.tmp: $!\";\n+    open D, \"< $sigfile.tmp\" or die \"Cannot open $sigfile.tmp: $!\";\n \n-    open S, \">$sigfile\" or do {\n+    open S, \"> $sigfile\" or do {\n         unlink \"$sigfile.tmp\";\n         die \"Could not write to $sigfile: $!\";\n     };\n@@ -597,7 +613,7 @@ sub _mkdigest_files {\n         }\n         else {\n             local *F;\n-            open F, $file or die \"Cannot open $file for reading: $!\";\n+            open F, \"< $file\" or die \"Cannot open $file for reading: $!\";\n             if (-B $file) {\n                 binmode(F);\n                 $obj->addfile(*F);\n@@ -949,7 +965,7 @@ L<Dist::Zilla::Plugin::Signature>\n \n =head1 AUTHORS\n \n-\u5510\u9cf3 E<lt>cpan@audreyt.orgE<gt>\n+Audrey Tang E<lt>cpan@audreyt.orgE<gt>\n \n =head1 CC0 1.0 Universal\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b6b0b964065ac42cb7513f5304a512470194c8a8",
            "date": "2024-09-10T01:48:35Z",
            "author_login": "timlegge"
          },
          {
            "sha": "1ad921f32762caca5fb076a2906f3a72769bf2a0",
            "date": "2024-09-10T20:38:54Z",
            "author_login": "timlegge"
          },
          {
            "sha": "455eca20a7a4be0b04450a849c098c47b6d7e357",
            "date": "2024-09-10T01:51:19Z",
            "author_login": "timlegge"
          },
          {
            "sha": "08c45edfcdf3be29ec10ef83854e8f4440002a1b",
            "date": "2024-09-09T23:47:02Z",
            "author_login": "timlegge"
          },
          {
            "sha": "2e741bfd078f4bb7d2d52deeeb9beeb1d2f40c93",
            "date": "2024-09-09T00:19:37Z",
            "author_login": "timlegge"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-681",
    "description": "The PGP signature parsing in Module::Signature before 0.74 allows remote attackers to cause the unsigned portion of a SIGNATURE file to be treated as the signed portion via unspecified vectors.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-11-29T21:15:10.980",
    "last_modified": "2024-11-21T02:29:21.807",
    "fix_date": "2015-04-05T08:05:20Z"
  },
  "references": [
    {
      "url": "http://ubuntu.com/usn/usn-2607-1",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/04/07/1",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/04/23/17",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/audreyt/module-signature/commit/8a9164596fa5952d4fbcde5aa1c7d1c7bc85372f",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://metacpan.org/changes/distribution/Module-Signature",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://ubuntu.com/usn/usn-2607-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/04/07/1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/04/23/17",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/audreyt/module-signature/commit/8a9164596fa5952d4fbcde5aa1c7d1c7bc85372f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://metacpan.org/changes/distribution/Module-Signature",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:24.240782",
    "processing_status": "enhanced"
  }
}