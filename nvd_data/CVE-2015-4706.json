{
  "cve_id": "CVE-2015-4706",
  "github_data": {
    "repository": "ipython/ipython",
    "fix_commit": "7222bd53ad089a65fd610fab4626f9d0ab47dfce",
    "related_commits": [
      "7222bd53ad089a65fd610fab4626f9d0ab47dfce",
      "c2078a53543ed502efd968649fee1125e0eb549c",
      "7222bd53ad089a65fd610fab4626f9d0ab47dfce",
      "c2078a53543ed502efd968649fee1125e0eb549c"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "7222bd53ad089a65fd610fab4626f9d0ab47dfce",
      "commit_date": "2015-06-21T23:51:44Z",
      "author": {
        "login": "minrk",
        "type": "User",
        "stats": {
          "total_commits": 5632,
          "average_weekly_commits": 6.363841807909605,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 359
        }
      },
      "commit_message": {
        "title": "Merge branch csp into 3.x",
        "length": 41,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 103,
        "additions": 65,
        "deletions": 38
      },
      "files": [
        {
          "filename": "IPython/html/base/handlers.py",
          "status": "modified",
          "additions": 34,
          "deletions": 9,
          "patch": "@@ -42,16 +42,24 @@\n \n class AuthenticatedHandler(web.RequestHandler):\n     \"\"\"A RequestHandler with an authenticated user.\"\"\"\n+    \n+    @property\n+    def content_security_policy(self):\n+        \"\"\"The default Content-Security-Policy header\n+        \n+        Can be overridden by defining Content-Security-Policy in settings['headers']\n+        \"\"\"\n+        return '; '.join([\n+            \"frame-ancestors 'self'\",\n+            # Make sure the report-uri is relative to the base_url\n+            \"report-uri \" + url_path_join(self.base_url, csp_report_uri),\n+        ])\n \n     def set_default_headers(self):\n         headers = self.settings.get('headers', {})\n \n         if \"Content-Security-Policy\" not in headers:\n-            headers[\"Content-Security-Policy\"] = (\n-                    \"frame-ancestors 'self'; \"\n-                    # Make sure the report-uri is relative to the base_url\n-                    \"report-uri \" + url_path_join(self.base_url, csp_report_uri) + \";\"\n-            )\n+            headers[\"Content-Security-Policy\"] = self.content_security_policy\n \n         # Allow for overriding headers\n         for header_name,value in headers.items() :\n@@ -307,7 +315,22 @@ def write_error(self, status_code, **kwargs):\n             html = self.render_template('error.html', **ns)\n         \n         self.write(html)\n-        \n+\n+\n+class APIHandler(IPythonHandler):\n+    \"\"\"Base class for API handlers\"\"\"\n+    \n+    @property\n+    def content_security_policy(self):\n+        csp = '; '.join([\n+                super(APIHandler, self).content_security_policy,\n+                \"default-src 'none'\",\n+            ])\n+        return csp\n+    \n+    def finish(self, *args, **kwargs):\n+        self.set_header('Content-Type', 'application/json')\n+        return super(APIHandler, self).finish(*args, **kwargs)\n \n \n class Template404(IPythonHandler):\n@@ -370,13 +393,15 @@ def wrapper(self, *args, **kwargs):\n         try:\n             result = yield gen.maybe_future(method(self, *args, **kwargs))\n         except web.HTTPError as e:\n+            self.set_header('Content-Type', 'application/json')\n             status = e.status_code\n             message = e.log_message\n             self.log.warn(message)\n             self.set_status(e.status_code)\n             reply = dict(message=message, reason=e.reason)\n             self.finish(json.dumps(reply))\n         except Exception:\n+            self.set_header('Content-Type', 'application/json')\n             self.log.error(\"Unhandled error in API request\", exc_info=True)\n             status = 500\n             message = \"Unknown server error\"\n@@ -399,7 +424,7 @@ def wrapper(self, *args, **kwargs):\n # to minimize subclass changes:\n HTTPError = web.HTTPError\n \n-class FileFindHandler(web.StaticFileHandler):\n+class FileFindHandler(IPythonHandler, web.StaticFileHandler):\n     \"\"\"subclass of StaticFileHandler for serving files from a search path\"\"\"\n     \n     # cache search results, don't search for files more than once\n@@ -453,7 +478,7 @@ def validate_absolute_path(self, root, absolute_path):\n         return super(FileFindHandler, self).validate_absolute_path(root, absolute_path)\n \n \n-class ApiVersionHandler(IPythonHandler):\n+class APIVersionHandler(APIHandler):\n \n     @json_errors\n     def get(self):\n@@ -524,5 +549,5 @@ def get(self, path=''):\n \n default_handlers = [\n     (r\".*/\", TrailingSlashHandler),\n-    (r\"api\", ApiVersionHandler)\n+    (r\"api\", APIVersionHandler)\n ]"
        },
        {
          "filename": "IPython/html/services/clusters/handlers.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -7,28 +7,28 @@\n \n from tornado import web\n \n-from ...base.handlers import IPythonHandler\n+from ...base.handlers import APIHandler\n \n #-----------------------------------------------------------------------------\n # Cluster handlers\n #-----------------------------------------------------------------------------\n \n \n-class MainClusterHandler(IPythonHandler):\n+class MainClusterHandler(APIHandler):\n \n     @web.authenticated\n     def get(self):\n         self.finish(json.dumps(self.cluster_manager.list_profiles()))\n \n \n-class ClusterProfileHandler(IPythonHandler):\n+class ClusterProfileHandler(APIHandler):\n \n     @web.authenticated\n     def get(self, profile):\n         self.finish(json.dumps(self.cluster_manager.profile_info(profile)))\n \n \n-class ClusterActionHandler(IPythonHandler):\n+class ClusterActionHandler(APIHandler):\n \n     @web.authenticated\n     def post(self, profile, action):"
        },
        {
          "filename": "IPython/html/services/config/handlers.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -9,9 +9,9 @@\n from tornado import web\n \n from IPython.utils.py3compat import PY3\n-from ...base.handlers import IPythonHandler, json_errors\n+from ...base.handlers import APIHandler, json_errors\n \n-class ConfigHandler(IPythonHandler):\n+class ConfigHandler(APIHandler):\n     SUPPORTED_METHODS = ('GET', 'PUT', 'PATCH')\n \n     @web.authenticated"
        },
        {
          "filename": "IPython/html/services/contents/handlers.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -11,7 +11,7 @@\n from IPython.utils.jsonutil import date_default\n \n from IPython.html.base.handlers import (\n-    IPythonHandler, json_errors, path_regex,\n+    IPythonHandler, APIHandler, json_errors, path_regex,\n )\n \n \n@@ -75,7 +75,7 @@ def validate_model(model, expect_content):\n             )\n \n \n-class ContentsHandler(IPythonHandler):\n+class ContentsHandler(APIHandler):\n \n     SUPPORTED_METHODS = (u'GET', u'PUT', u'PATCH', u'POST', u'DELETE')\n \n@@ -257,7 +257,7 @@ def delete(self, path=''):\n         self.finish()\n \n \n-class CheckpointsHandler(IPythonHandler):\n+class CheckpointsHandler(APIHandler):\n \n     SUPPORTED_METHODS = ('GET', 'POST')\n \n@@ -286,7 +286,7 @@ def post(self, path=''):\n         self.finish(data)\n \n \n-class ModifyCheckpointsHandler(IPythonHandler):\n+class ModifyCheckpointsHandler(APIHandler):\n \n     SUPPORTED_METHODS = ('POST', 'DELETE')\n "
        },
        {
          "filename": "IPython/html/services/kernels/handlers.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -13,12 +13,12 @@\n from IPython.utils.py3compat import cast_unicode\n from IPython.html.utils import url_path_join, url_escape\n \n-from ...base.handlers import IPythonHandler, json_errors\n+from ...base.handlers import IPythonHandler, APIHandler, json_errors\n from ...base.zmqhandlers import AuthenticatedZMQStreamHandler, deserialize_binary_message\n \n from IPython.core.release import kernel_protocol_version\n \n-class MainKernelHandler(IPythonHandler):\n+class MainKernelHandler(APIHandler):\n \n     @web.authenticated\n     @json_errors\n@@ -46,7 +46,7 @@ def post(self):\n         self.finish(json.dumps(model))\n \n \n-class KernelHandler(IPythonHandler):\n+class KernelHandler(APIHandler):\n \n     SUPPORTED_METHODS = ('DELETE', 'GET')\n \n@@ -67,7 +67,7 @@ def delete(self, kernel_id):\n         self.finish()\n \n \n-class KernelActionHandler(IPythonHandler):\n+class KernelActionHandler(APIHandler):\n \n     @web.authenticated\n     @json_errors"
        },
        {
          "filename": "IPython/html/services/kernels/tests/test_kernels_api.py",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -67,7 +67,8 @@ def test_default_kernel(self):\n \n         self.assertEqual(r.headers['Content-Security-Policy'], (\n                             \"frame-ancestors 'self'; \"\n-                            \"report-uri /api/security/csp-report;\"\n+                            \"report-uri /api/security/csp-report; \"\n+                            \"default-src 'none'\"\n         ))\n \n     def test_main_kernel_handler(self):\n@@ -80,7 +81,8 @@ def test_main_kernel_handler(self):\n \n         self.assertEqual(r.headers['Content-Security-Policy'], (\n                             \"frame-ancestors 'self'; \"\n-                            \"report-uri /api/security/csp-report;\"\n+                            \"report-uri /api/security/csp-report; \"\n+                            \"default-src 'none'\"\n         ))\n \n         # GET request"
        },
        {
          "filename": "IPython/html/services/kernelspecs/handlers.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -10,7 +10,7 @@\n \n from tornado import web\n \n-from ...base.handlers import IPythonHandler, json_errors\n+from ...base.handlers import APIHandler, json_errors\n from ...utils import url_path_join\n \n def kernelspec_model(handler, name):\n@@ -40,7 +40,7 @@ def kernelspec_model(handler, name):\n         )\n     return d\n \n-class MainKernelSpecHandler(IPythonHandler):\n+class MainKernelSpecHandler(APIHandler):\n     SUPPORTED_METHODS = ('GET',)\n \n     @web.authenticated\n@@ -62,7 +62,7 @@ def get(self):\n         self.finish(json.dumps(model))\n \n \n-class KernelSpecHandler(IPythonHandler):\n+class KernelSpecHandler(APIHandler):\n     SUPPORTED_METHODS = ('GET',)\n \n     @web.authenticated"
        },
        {
          "filename": "IPython/html/services/nbconvert/handlers.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -2,9 +2,9 @@\n \n from tornado import web\n \n-from ...base.handlers import IPythonHandler, json_errors\n+from ...base.handlers import APIHandler, json_errors\n \n-class NbconvertRootHandler(IPythonHandler):\n+class NbconvertRootHandler(APIHandler):\n     SUPPORTED_METHODS = ('GET',)\n \n     @web.authenticated"
        },
        {
          "filename": "IPython/html/services/security/handlers.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -5,10 +5,10 @@\n \n from tornado import gen, web\n \n-from ...base.handlers import IPythonHandler, json_errors\n+from ...base.handlers import APIHandler, json_errors\n from . import csp_report_uri\n \n-class CSPReportHandler(IPythonHandler):\n+class CSPReportHandler(APIHandler):\n     '''Accepts a content security policy violation report'''\n     @web.authenticated\n     @json_errors"
        },
        {
          "filename": "IPython/html/services/sessions/handlers.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -7,13 +7,13 @@\n \n from tornado import web\n \n-from ...base.handlers import IPythonHandler, json_errors\n+from ...base.handlers import APIHandler, json_errors\n from IPython.utils.jsonutil import date_default\n from IPython.html.utils import url_path_join, url_escape\n from IPython.kernel.kernelspec import NoSuchKernel\n \n \n-class SessionRootHandler(IPythonHandler):\n+class SessionRootHandler(APIHandler):\n \n     @web.authenticated\n     @json_errors\n@@ -65,7 +65,7 @@ def post(self):\n         self.set_status(201)\n         self.finish(json.dumps(model, default=date_default))\n \n-class SessionHandler(IPythonHandler):\n+class SessionHandler(APIHandler):\n \n     SUPPORTED_METHODS = ('GET', 'PATCH', 'DELETE')\n "
        },
        {
          "filename": "IPython/html/terminal/api_handlers.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1,9 +1,9 @@\n import json\n from tornado import web, gen\n-from ..base.handlers import IPythonHandler, json_errors\n+from ..base.handlers import APIHandler, json_errors\n from ..utils import url_path_join\n \n-class TerminalRootHandler(IPythonHandler):\n+class TerminalRootHandler(APIHandler):\n     @web.authenticated\n     @json_errors\n     def get(self):\n@@ -19,7 +19,7 @@ def post(self):\n         self.finish(json.dumps({'name': name}))\n \n \n-class TerminalHandler(IPythonHandler):\n+class TerminalHandler(APIHandler):\n     SUPPORTED_METHODS = ('GET', 'DELETE')\n \n     @web.authenticated"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 11,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3723220cb0de301477ea947000d039dbd3af6026",
            "date": "2025-01-24T15:05:38Z",
            "author_login": "Carreau"
          },
          {
            "sha": "bbcb8f0e14ea576c9aff056aa25c94fdf0f36662",
            "date": "2025-01-24T13:56:04Z",
            "author_login": "Carreau"
          },
          {
            "sha": "ab6d2c6c2503529ef16007750a7b77247001903c",
            "date": "2025-01-24T13:55:46Z",
            "author_login": "Carreau"
          },
          {
            "sha": "a2f3c5b68db22027b843792146902b98aefc3727",
            "date": "2025-01-24T13:50:09Z",
            "author_login": "Carreau"
          },
          {
            "sha": "4db65fce8d99064a82b8346892c99b67e254b296",
            "date": "2025-01-24T13:27:08Z",
            "author_login": "Carreau"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "Cross-site scripting (XSS) vulnerability in IPython 3.x before 3.2 allows remote attackers to inject arbitrary web script or HTML via vectors involving JSON error messages and the /api/contents path.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-09-21T14:29:00.230",
    "last_modified": "2024-11-21T02:31:35.840",
    "fix_date": "2015-06-21T23:51:44Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/06/22/7",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/75328",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1235688",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/ipython/ipython/commit/7222bd53ad089a65fd610fab4626f9d0ab47dfce",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ipython/ipython/commit/c2078a53543ed502efd968649fee1125e0eb549c",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://ipython.org/ipython-doc/3/whatsnew/version3.html",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/06/22/7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/75328",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1235688",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/ipython/ipython/commit/7222bd53ad089a65fd610fab4626f9d0ab47dfce",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ipython/ipython/commit/c2078a53543ed502efd968649fee1125e0eb549c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://ipython.org/ipython-doc/3/whatsnew/version3.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:07.391396",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "ipython",
    "owner": "ipython",
    "created_at": "2010-05-10T04:46:06Z",
    "updated_at": "2025-01-25T13:18:17Z",
    "pushed_at": "2025-01-24T15:05:38Z",
    "size": 79409,
    "stars": 16350,
    "forks": 4449,
    "open_issues": 1561,
    "watchers": 16350,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "7.x",
      "main"
    ],
    "languages": {
      "Python": 2380011,
      "Shell": 11771,
      "Makefile": 4675,
      "Batchfile": 425
    },
    "commit_activity": {
      "total_commits_last_year": 500,
      "avg_commits_per_week": 9.615384615384615,
      "days_active_last_year": 136
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T07:44:03.103752"
  }
}