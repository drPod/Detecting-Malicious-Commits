{
  "cve_id": "CVE-2015-5263",
  "github_data": {
    "repository": "pulp/pulp",
    "fix_commit": "b542d7465f7e6e02e1ea1aec059ac607a65cefe7",
    "related_commits": [
      "b542d7465f7e6e02e1ea1aec059ac607a65cefe7",
      "b542d7465f7e6e02e1ea1aec059ac607a65cefe7"
    ],
    "patch_url": "https://github.com/pulp/pulp/commit/b542d7465f7e6e02e1ea1aec059ac607a65cefe7.patch",
    "fix_commit_details": {
      "sha": "b542d7465f7e6e02e1ea1aec059ac607a65cefe7",
      "commit_date": "2015-09-04T19:29:00Z",
      "author": {
        "login": "asmacdo",
        "type": "User",
        "stats": {
          "total_commits": 450,
          "average_weekly_commits": 0.5610972568578554,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 78
        }
      },
      "commit_message": {
        "title": "convert consumer register to bindings",
        "length": 37,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 267,
        "additions": 209,
        "deletions": 58
      },
      "files": [
        {
          "filename": "bindings/pulp/bindings/bindings.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -19,6 +19,7 @@\n from pulp.bindings.consumer_groups import *\n from pulp.bindings.consumer import *\n from pulp.bindings.server_info import ServerInfoAPI\n+from pulp.bindings.static import StaticRequest\n from pulp.bindings.tasks import TasksAPI, TaskSearchAPI\n from pulp.bindings.upload import UploadAPI\n from pulp.bindings.auth import *\n@@ -67,6 +68,7 @@ def __init__(self, pulp_connection):\n         self.repo_unit = RepositoryUnitAPI(pulp_connection)\n         self.role = RoleAPI(pulp_connection)\n         self.server_info = ServerInfoAPI(pulp_connection)\n+        self.static = StaticRequest(pulp_connection)\n         self.tasks = TasksAPI(pulp_connection)\n         self.tasks_search = TaskSearchAPI(pulp_connection)\n         self.uploads = UploadAPI(pulp_connection)"
        },
        {
          "filename": "bindings/pulp/bindings/consumer.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -111,7 +111,7 @@ def list_schedules(self, action, consumer_id):\n     def get_schedule(self, action, consumer_id, schedule_id):\n         url = self.base_path % consumer_id + action + '/%s/' % schedule_id\n         return self.server.GET(url)\n-    \n+\n     def add_schedule(self, action, consumer_id, schedule, units, failure_threshold=UNSPECIFIED,\n                      enabled=UNSPECIFIED, options=UNSPECIFIED):\n         url = self.base_path % consumer_id + action + '/'\n@@ -125,7 +125,7 @@ def add_schedule(self, action, consumer_id, schedule, units, failure_threshold=U\n         # Strip out anything that wasn't specified by the caller\n         body = dict([(k, v) for k, v in body.items() if v is not UNSPECIFIED])\n         return self.server.POST(url, body)\n- \n+\n     def delete_schedule(self, action, consumer_id, schedule_id):\n         url = self.base_path % consumer_id + action + '/%s/' % schedule_id\n         return self.server.DELETE(url)\n@@ -156,7 +156,7 @@ def find_by_id(self, consumer_id, repo_id=None):\n         if repo_id:\n             path += '%s/' % repo_id\n         return self.server.GET(path)\n-    \n+\n     def bind(self, consumer_id, repo_id, distributor_id, notify_agent=True, binding_config=None):\n         path = self.BASE_PATH % consumer_id\n         data = {\n@@ -166,7 +166,7 @@ def bind(self, consumer_id, repo_id, distributor_id, notify_agent=True, binding_\n             'binding_config': binding_config or {}\n         }\n         return self.server.POST(path, data)\n-    \n+\n     def unbind(self, consumer_id, repo_id, distributor_id, force=False):\n         path = self.BASE_PATH % consumer_id + \"%s/\" % repo_id + \"%s/\" % distributor_id\n         body = dict(force=force)"
        },
        {
          "filename": "bindings/pulp/bindings/server.py",
          "status": "modified",
          "additions": 21,
          "deletions": 14,
          "patch": "@@ -84,27 +84,29 @@ def __init__(self,\n         self.verify_ssl = verify_ssl\n         self.ca_path = ca_path\n \n-    def DELETE(self, path, body=None, log_request_body=True):\n-        return self._request('DELETE', path, body=body, log_request_body=log_request_body)\n+    def DELETE(self, path, body=None, log_request_body=True, ignore_prefix=False):\n+        return self._request('DELETE', path, body=body, log_request_body=log_request_body,\n+                             ignore_prefix=ignore_prefix)\n \n-    def GET(self, path, queries=()):\n-        return self._request('GET', path, queries)\n+    def GET(self, path, queries=(), ignore_prefix=False):\n+        return self._request('GET', path, queries, ignore_prefix=ignore_prefix)\n \n-    def HEAD(self, path):\n-        return self._request('HEAD', path)\n+    def HEAD(self, path, ignore_prefix=False):\n+        return self._request('HEAD', path, ignore_prefix=ignore_prefix)\n \n-    def POST(self, path, body=None, ensure_encoding=True, log_request_body=True):\n+    def POST(self, path, body=None, ensure_encoding=True, log_request_body=True,\n+             ignore_prefix=False):\n         return self._request('POST', path, body=body, ensure_encoding=ensure_encoding,\n-                             log_request_body=log_request_body)\n+                             log_request_body=log_request_body, ignore_prefix=ignore_prefix)\n \n-    def PUT(self, path, body, ensure_encoding=True, log_request_body=True):\n+    def PUT(self, path, body, ensure_encoding=True, log_request_body=True, ignore_prefix=False):\n         return self._request('PUT', path, body=body, ensure_encoding=ensure_encoding,\n-                             log_request_body=log_request_body)\n+                             log_request_body=log_request_body, ignore_prefix=ignore_prefix)\n \n     # protected request utilities ---------------------------------------------\n \n     def _request(self, method, path, queries=(), body=None, ensure_encoding=True,\n-                 log_request_body=True):\n+                 log_request_body=True, ignore_prefix=False):\n         \"\"\"\n         make a HTTP request to the pulp server and return the response\n \n@@ -130,14 +132,17 @@ def _request(self, method, path, queries=(), body=None, ensure_encoding=True,\n         :param log_request_body: Toggle logging of the request body, defaults to true\n         :type log_request_body: bool\n \n+        :param ignore_prefix: when building the url, disregard the self.path_prefix\n+        :type  ignore_prefix: bool\n+\n         :return:    Response object\n         :rtype:     pulp.bindings.responses.Response\n \n         :raises:    ConnectionException or one of the RequestExceptions\n                     (depending on response codes) in case of unsuccessful\n                     request\n         \"\"\"\n-        url = self._build_url(path, queries)\n+        url = self._build_url(path, queries, ignore_prefix)\n         if ensure_encoding:\n             body = self._process_body(body)\n         if not isinstance(body, (NoneType, basestring)):\n@@ -201,7 +206,7 @@ def _handle_exceptions(self, response_code, response_body):\n         else:\n             raise code_class_mappings[response_code](response_body)\n \n-    def _build_url(self, path, queries=()):\n+    def _build_url(self, path, queries, ignore_prefix):\n         \"\"\"\n         Takes a relative path and query parameters, combines them with the\n         base path, and returns the result. Handles utf-8 encoding as necessary.\n@@ -217,13 +222,15 @@ def _build_url(self, path, queries=()):\n                         in either case representing key-value pairs to be used\n                         as query parameters on the URL.\n         :type  queries: mapping object or sequence of 2-element tuples\n+        :param ignore_prefix: when building the url, disregard the self.path_prefix\n+        :type  ignore_prefix: bool\n \n         :return:    path that is a composite of self.path_prefix, path, and\n                     queries. May be relative or absolute depending on the nature\n                     of self.path_prefix\n         \"\"\"\n         # build the request url from the path and queries dict or tuple\n-        if not path.startswith(self.path_prefix):\n+        if not path.startswith(self.path_prefix) and not ignore_prefix:\n             if path.startswith('/'):\n                 path = path[1:]\n             path = '/'.join((self.path_prefix, path))"
        },
        {
          "filename": "bindings/pulp/bindings/static.py",
          "status": "added",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -0,0 +1,16 @@\n+from pulp.bindings.base import PulpAPI\n+\n+\n+class StaticRequest(PulpAPI):\n+    \"\"\"\n+    Connection class to access static calls\n+    \"\"\"\n+\n+    def get_server_key(self):\n+        \"\"\"\n+        Retrieve the server's public key.\n+\n+        :return: rsa public key\n+        :rtype:  str\n+        \"\"\"\n+        return self.server.GET('/pulp/static/rsa_pub.key', ignore_prefix=True)"
        },
        {
          "filename": "bindings/test/unit/test_static.py",
          "status": "added",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -0,0 +1,22 @@\n+import unittest\n+\n+import mock\n+\n+from pulp.bindings.server import PulpConnection\n+from pulp.bindings.static import StaticRequest\n+\n+\n+class TestStaticRequest(unittest.TestCase):\n+    \"\"\"\n+    Tests for static file requests.\n+    \"\"\"\n+\n+    def test_get_server_key(self):\n+        \"\"\"\n+        Test that the correct path is given to the binding.\n+        \"\"\"\n+        static_request = StaticRequest(mock.MagicMock(spec=PulpConnection))\n+        response = static_request.get_server_key()\n+        static_request.server.GET.assert_called_once_with('/pulp/static/rsa_pub.key',\n+                                                          ignore_prefix=True)\n+        self.assertTrue(response is static_request.server.GET.return_value)"
        },
        {
          "filename": "client_consumer/pulp/client/consumer/cli.py",
          "status": "modified",
          "additions": 28,
          "deletions": 40,
          "patch": "@@ -91,43 +91,42 @@ def initialize(context):\n     context.cli.add_command(StatusCommand(context, 'status', _(d)))\n \n \n-def download(url, location):\n+def write_to_location(location, content):\n     \"\"\"\n-    Download files to the specified location.\n-    :param url: The file URL.\n-    :type url: str\n-    :param location: The absolute path to where the downloaded\n-        file is to be stored.\n-    :type location: str\n+    Write content to a path. Ensures that the entire path exists, creating directories if necessary.\n+\n+    :param location: path that should exist\n+    :type  location: str\n+    :param content: bits to be written to file\n+    :type  content: str\n     \"\"\"\n-    request = urllib2.urlopen(url)\n     try:\n-        content = request.read()\n+        os.makedirs(os.path.dirname(location))\n+    except OSError, e:\n+        if e.errno != errno.EEXIST:\n+            raise\n+    try:\n         fp = open(location, 'w+')\n-        try:\n-            fp.write(content)\n-        finally:\n-            fp.close()\n+        fp.write(content)\n     finally:\n-        request.close()\n+        fp.close()\n \n \n-def update_server_key(conf):\n+def update_server_key(command_inst):\n     \"\"\"\n-    Download the server's RSA key and store in the location\n-    specified in the configuration.\n-    :param conf: The consumer configuration object.\n-    :type conf: dict\n+    Ensure that the server's public key stored on the consumer is up to date.\n+\n+    :param command_inst: instance of a CLI command\n+    :type  command_inst: pulp.client.extensions.extensions.PulpCliCommand\n     \"\"\"\n-    host = conf['server']['host']\n-    location = conf['server']['rsa_pub']\n-    url = 'https://%s/pulp/static/rsa_pub.key' % host\n     try:\n-        os.makedirs(os.path.dirname(location))\n-    except OSError, e:\n-        if e.errno != errno.EEXIST:\n-            raise\n-    download(url, location)\n+        key_reply = command_inst.context.server.static.get_server_key()\n+    except Exception, e:\n+        msg = _('Download server RSA key failed [%(e)s]' % {'e': e})\n+        command_inst.prompt.render_failure_message(msg)\n+    else:\n+        key_location = command_inst.context.config['server']['rsa_pub']\n+        write_to_location(key_location, key_reply.response_body)\n \n \n # -- common exceptions --------------------------------------------------------\n@@ -201,14 +200,7 @@ def register(self, **kwargs):\n         finally:\n             fp.close()\n \n-        # download server public key\n-\n-        try:\n-            update_server_key(self.context.config)\n-        except Exception, e:\n-            msg = _('Download server RSA key failed [%(e)s]' % {'e': e})\n-            self.prompt.render_failure_message(msg)\n-\n+        update_server_key(self)\n         self.prompt.render_success_message('Consumer [%s] successfully registered' % consumer_id)\n \n \n@@ -250,11 +242,7 @@ def update(self, **kwargs):\n             self.prompt.render_success_message('Consumer [%s] successfully updated' % consumer_id)\n             if not kwargs.get(OPTION_EXCHANGE_KEYS.keyword):\n                 return\n-            try:\n-                update_server_key(self.context.config)\n-            except Exception, e:\n-                msg = _('Download server RSA key failed [%(e)s]' % {'e': e})\n-                self.prompt.render_failure_message(msg)\n+            update_server_key(self)\n         except NotFoundException:\n             self.prompt.write('Consumer [%s] does not exist on the server' % consumer_id, tag='not-found')\n "
        },
        {
          "filename": "client_consumer/test/unit/test_cli.py",
          "status": "added",
          "additions": 116,
          "deletions": 0,
          "patch": "@@ -0,0 +1,116 @@\n+import unittest\n+\n+import mock\n+\n+from pulp.client.consumer import cli\n+\n+\n+class TestWriteToLocation(unittest.TestCase):\n+    \"\"\"\n+    Tests for writing content to a file.\n+    \"\"\"\n+\n+    @mock.patch('pulp.client.consumer.cli.os')\n+    @mock.patch('__builtin__.open', new_callable=mock.MagicMock())\n+    def test_dir_struct_exists(self, mopen, mock_os):\n+        \"\"\"\n+        Test that when the directory structure already exists, the write still happens.\n+        \"\"\"\n+\n+        class MockException(OSError):\n+            pass\n+\n+        mock_e = MockException()\n+        mock_e.errno = 17\n+        mock_os.makedirs.side_effect = mock_e\n+        mock_fp = open.return_value\n+\n+        cli.write_to_location('test/loc', 'content')\n+        mock_os.path.dirname.assert_called_once_with('test/loc')\n+        mock_os.makedirs.assert_called_once_with(mock_os.path.dirname.return_value)\n+        open.assert_called_once_with('test/loc', 'w+')\n+        mock_fp.write.assert_called_once_with('content')\n+        mock_fp.close.assert_called_once_with()\n+\n+    @mock.patch('pulp.client.consumer.cli.os')\n+    @mock.patch('__builtin__.open', new_callable=mock.MagicMock())\n+    def test_misc_os_err(self, mopen, mock_os):\n+        \"\"\"\n+        Test that misc errors are reraised and the write does not happen.\n+        \"\"\"\n+\n+        class MockException(OSError):\n+            pass\n+\n+        mock_e = MockException()\n+        mock_e.errno = 16\n+        mock_os.makedirs.side_effect = mock_e\n+        mock_fp = open.return_value\n+\n+        self.assertRaises(MockException, cli.write_to_location, 'test/loc', 'content')\n+        self.assertEqual(mock_fp.write.call_count, 0)\n+\n+    @mock.patch('pulp.client.consumer.cli.os')\n+    @mock.patch('__builtin__.open', new_callable=mock.MagicMock())\n+    def test_write_err(self, *_):\n+        \"\"\"\n+        If there is a problem with the write, the file is still closed.\n+        \"\"\"\n+\n+        class MockException(Exception):\n+            pass\n+\n+        mock_fp = open.return_value\n+        mock_fp.write.side_effect = MockException\n+        self.assertRaises(MockException, cli.write_to_location, 'test/loc', 'content')\n+        mock_fp.write.assert_called_once_with('content')\n+        mock_fp.close.assert_called_once_with()\n+\n+    @mock.patch('pulp.client.consumer.cli.os')\n+    @mock.patch('__builtin__.open', new_callable=mock.MagicMock())\n+    def test_as_expected(self, mopen, mock_os):\n+        \"\"\"\n+        When everything works as expected, ensure that the file is closed.\n+        \"\"\"\n+        mock_fp = open.return_value\n+        cli.write_to_location('test/loc', 'content')\n+        mock_os.path.dirname.assert_called_once_with('test/loc')\n+        mock_os.makedirs.assert_called_once_with(mock_os.path.dirname.return_value)\n+        open.assert_called_once_with('test/loc', 'w+')\n+        mock_fp.write.assert_called_once_with('content')\n+        mock_fp.close.assert_called_once_with()\n+\n+\n+class TestUpdateServerKey(unittest.TestCase):\n+    \"\"\"\n+    Tests for updating the server key.\n+    \"\"\"\n+\n+    @mock.patch('pulp.client.consumer.cli.write_to_location')\n+    def test_as_expected(self, mock_write):\n+        \"\"\"\n+        Everything is as expected, content is written to the location in the config file.\n+        \"\"\"\n+        mock_cmd = mock.MagicMock()\n+        key_response = mock_cmd.context.server.static.get_server_key.return_value\n+        key_loc = mock_cmd.context.config['getter']['getter']\n+        cli.update_server_key(mock_cmd)\n+        mock_write.assert_called_once_with(key_loc, key_response.response_body)\n+\n+    @mock.patch('pulp.client.consumer.cli.write_to_location')\n+    def test_binding_exception(self, mock_write):\n+        \"\"\"\n+        If there is a problem getting the key, do not attempt to write the file.\n+        \"\"\"\n+\n+        class MockException(Exception):\n+\n+            def __str__(self):\n+                return \"Mock Exception str\"\n+\n+        mock_cmd = mock.MagicMock()\n+        mock_cmd.context.server.static.get_server_key.side_effect = MockException()\n+        cli.update_server_key(mock_cmd)\n+        msg = 'Download server RSA key failed [Mock Exception str]'\n+        mock_cmd.prompt.render_failure_message.assert_called_once_with(msg)\n+        self.assertEqual(mock_write.call_count, 0)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c3b2dd512c68bff929a401c91b2d2c13639c238c",
            "date": "2022-12-07T13:14:00Z",
            "author_login": "ipanova"
          },
          {
            "sha": "7d65382ce597ad6549306beaa5f63dee91776265",
            "date": "2022-12-07T13:13:29Z",
            "author_login": "ipanova"
          },
          {
            "sha": "6e1abc0a3ed63805758f26b1e91041ce8f729add",
            "date": "2022-12-07T13:03:24Z",
            "author_login": "ipanova"
          },
          {
            "sha": "dd44f8dc038683e96b6eac91dfeca954a61c03e3",
            "date": "2022-12-07T12:56:16Z",
            "author_login": "ipanova"
          },
          {
            "sha": "755d6498acee741855c34965012a340184b5d848",
            "date": "2022-12-07T12:55:05Z",
            "author_login": "ipanova"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-295",
    "description": "pulp-consumer-client 2.4.0 through 2.6.3 does not check the server's TLS certificate signatures when retrieving the server's public key upon registration.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-09-25T21:29:00.477",
    "last_modified": "2024-11-21T02:32:40.520",
    "fix_date": "2015-09-04T19:29:00Z"
  },
  "references": [
    {
      "url": "http://cve.killedkenny.io/cve/CVE-2015-5263",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/09/24/4",
      "source": "secalert@redhat.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pulp/pulp/blob/aa432bf58497b5e3682333b1d5f5ae4f45788a61/client_consumer/pulp/client/consumer/cli.py#L103",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pulp/pulp/commit/b542d7465f7e6e02e1ea1aec059ac607a65cefe7#diff-17110211f89c042a9267e2167dedd754",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://cve.killedkenny.io/cve/CVE-2015-5263",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/09/24/4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pulp/pulp/blob/aa432bf58497b5e3682333b1d5f5ae4f45788a61/client_consumer/pulp/client/consumer/cli.py#L103",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pulp/pulp/commit/b542d7465f7e6e02e1ea1aec059ac607a65cefe7#diff-17110211f89c042a9267e2167dedd754",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:07.397777",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pulp",
    "owner": "pulp",
    "created_at": "2012-08-06T13:49:20Z",
    "updated_at": "2024-12-24T01:13:31Z",
    "pushed_at": "2022-12-07T13:14:00Z",
    "size": 98460,
    "stars": 508,
    "forks": 168,
    "open_issues": 6,
    "watchers": 508,
    "has_security_policy": false,
    "default_branch": "2-master",
    "protected_branches": [
      "2.4-dev",
      "2.4-release",
      "2.5-dev",
      "2.5-release",
      "2.6-dev",
      "2.6-release",
      "2.7-dev",
      "2.7-release",
      "2.8-dev",
      "2.8-release",
      "2.9-dev",
      "2.9-release",
      "2.10-dev"
    ],
    "languages": {
      "Python": 5789329,
      "Shell": 80583,
      "C": 8882,
      "Puppet": 4473,
      "HTML": 2469,
      "JavaScript": 1571,
      "Dockerfile": 1057,
      "Makefile": 563,
      "Ruby": 286
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:57:44.131905"
  }
}