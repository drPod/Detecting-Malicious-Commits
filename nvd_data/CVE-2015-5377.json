{
  "cve_id": "CVE-2015-5377",
  "github_data": {
    "repository": "elastic/elasticsearch",
    "fix_commit": "bf3052d14c874aead7da8855c5fcadf5428a43f2",
    "related_commits": [
      "bf3052d14c874aead7da8855c5fcadf5428a43f2",
      "bf3052d14c874aead7da8855c5fcadf5428a43f2"
    ],
    "patch_url": "https://github.com/elastic/elasticsearch/commit/bf3052d14c874aead7da8855c5fcadf5428a43f2.patch",
    "fix_commit_details": {
      "sha": "bf3052d14c874aead7da8855c5fcadf5428a43f2",
      "commit_date": "2015-07-06T14:11:37Z",
      "author": {
        "login": "s1monw",
        "type": "User",
        "stats": {
          "total_commits": 3184,
          "average_weekly_commits": 4.082051282051282,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 279
        }
      },
      "commit_message": {
        "title": "Restrict Exception deserialization to Core and JDK classes",
        "length": 390,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 183,
        "additions": 177,
        "deletions": 6
      },
      "files": [
        {
          "filename": "src/main/java/org/elasticsearch/common/io/ThrowableObjectInputStream.java",
          "status": "modified",
          "additions": 44,
          "deletions": 2,
          "patch": "@@ -19,9 +19,15 @@\n \n package org.elasticsearch.common.io;\n \n+import com.fasterxml.jackson.core.JsonLocation;\n+import com.google.common.collect.ImmutableMap;\n import org.elasticsearch.common.Classes;\n+import org.elasticsearch.common.collect.IdentityHashSet;\n+import org.joda.time.DateTimeFieldType;\n \n import java.io.*;\n+import java.net.*;\n+import java.util.*;\n \n /**\n  *\n@@ -61,11 +67,11 @@ protected ObjectStreamClass readClassDescriptor()\n             case ThrowableObjectOutputStream.TYPE_STACKTRACEELEMENT:\n                 return ObjectStreamClass.lookup(StackTraceElement.class);\n             case ThrowableObjectOutputStream.TYPE_FAT_DESCRIPTOR:\n-                return super.readClassDescriptor();\n+                return verify(super.readClassDescriptor());\n             case ThrowableObjectOutputStream.TYPE_THIN_DESCRIPTOR:\n                 String className = readUTF();\n                 Class<?> clazz = loadClass(className);\n-                return ObjectStreamClass.lookup(clazz);\n+                return verify(ObjectStreamClass.lookup(clazz));\n             default:\n                 throw new StreamCorruptedException(\n                         \"Unexpected class descriptor type: \" + type);\n@@ -96,4 +102,40 @@ protected Class<?> loadClass(String className) throws ClassNotFoundException {\n         }\n         return clazz;\n     }\n+\n+    private static final Set<Class<?>> CLASS_WHITELIST;\n+    private static final Set<Package> PKG_WHITELIST;\n+    static {\n+        IdentityHashSet<Class<?>> classes = new IdentityHashSet<>();\n+        classes.add(String.class);\n+        // inet stuff is needed for DiscoveryNode\n+        classes.add(Inet6Address.class);\n+        classes.add(Inet4Address.class);\n+        classes.add(InetAddress.class);\n+        classes.add(InetSocketAddress.class);\n+        classes.add(SocketAddress.class);\n+        classes.add(StackTraceElement.class);\n+        classes.add(JsonLocation.class); // JsonParseException uses this\n+        IdentityHashSet<Package> packages = new IdentityHashSet<>();\n+        packages.add(Integer.class.getPackage()); // java.lang\n+        packages.add(List.class.getPackage()); // java.util\n+        packages.add(ImmutableMap.class.getPackage()); // com.google.common.collect\n+        packages.add(DateTimeFieldType.class.getPackage()); // org.joda.time\n+        CLASS_WHITELIST = Collections.unmodifiableSet(classes);\n+        PKG_WHITELIST = Collections.unmodifiableSet(packages);\n+    }\n+\n+    private ObjectStreamClass verify(ObjectStreamClass streamClass) throws IOException, ClassNotFoundException {\n+        Class<?> aClass = resolveClass(streamClass);\n+        Package pkg = aClass.getPackage();\n+        if (aClass.isPrimitive() // primitives are fine\n+                || aClass.isArray() // arrays are ok too\n+                || Throwable.class.isAssignableFrom(aClass)// exceptions are fine\n+                || CLASS_WHITELIST.contains(aClass) // whitelist JDK stuff we need\n+                || PKG_WHITELIST.contains(aClass.getPackage())\n+                || pkg.getName().startsWith(\"org.elasticsearch\")) { // es classes are ok\n+            return streamClass;\n+        }\n+        throw new NotSerializableException(aClass.getName());\n+    }\n }"
        },
        {
          "filename": "src/main/java/org/elasticsearch/common/io/ThrowableObjectOutputStream.java",
          "status": "modified",
          "additions": 27,
          "deletions": 4,
          "patch": "@@ -19,10 +19,7 @@\n \n package org.elasticsearch.common.io;\n \n-import java.io.IOException;\n-import java.io.ObjectOutputStream;\n-import java.io.ObjectStreamClass;\n-import java.io.OutputStream;\n+import java.io.*;\n \n /**\n  *\n@@ -65,4 +62,30 @@ protected void writeClassDescriptor(ObjectStreamClass desc) throws IOException {\n             }\n         }\n     }\n+\n+    /**\n+     * Simple helper method to roundtrip a serializable object within the ThrowableObjectInput/Output stream\n+     */\n+    public static <T extends Serializable> T serialize(T t) throws IOException, ClassNotFoundException {\n+        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n+        try (ThrowableObjectOutputStream outputStream = new ThrowableObjectOutputStream(stream)) {\n+            outputStream.writeObject(t);\n+        }\n+        try (ThrowableObjectInputStream in = new ThrowableObjectInputStream(new ByteArrayInputStream(stream.toByteArray()))) {\n+            return (T) in.readObject();\n+        }\n+    }\n+\n+    /**\n+     * Returns <code>true</code> iff the exception can be serialized and deserialized using\n+     * {@link ThrowableObjectOutputStream} and {@link ThrowableObjectInputStream}. Otherwise <code>false</code>\n+     */\n+    public static boolean canSerialize(Throwable t) {\n+        try {\n+            serialize(t);\n+            return true;\n+        } catch (Throwable throwable) {\n+            return false;\n+        }\n+    }\n }"
        },
        {
          "filename": "src/main/java/org/elasticsearch/transport/local/LocalTransportChannel.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -86,6 +86,10 @@ public void run() {\n     @Override\n     public void sendResponse(Throwable error) throws IOException {\n         BytesStreamOutput stream = new BytesStreamOutput();\n+        if (ThrowableObjectOutputStream.canSerialize(error) == false) {\n+            assert false : \"Can not serialize exception: \" + error; // make sure tests fail\n+            error = new NotSerializableTransportException(error);\n+        }\n         try {\n             writeResponseExceptionHeader(stream);\n             RemoteTransportException tx = new RemoteTransportException(targetTransport.nodeName(), targetTransport.boundAddress().boundAddress(), action, error);"
        },
        {
          "filename": "src/main/java/org/elasticsearch/transport/netty/NettyTransportChannel.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -117,6 +117,10 @@ public void sendResponse(TransportResponse response, TransportResponseOptions op\n     @Override\n     public void sendResponse(Throwable error) throws IOException {\n         BytesStreamOutput stream = new BytesStreamOutput();\n+        if (ThrowableObjectOutputStream.canSerialize(error) == false) {\n+            assert false : \"Can not serialize exception: \" + error; // make sure tests fail\n+            error = new NotSerializableTransportException(error);\n+        }\n         try {\n             stream.skip(NettyHeader.HEADER_SIZE);\n             RemoteTransportException tx = new RemoteTransportException(transport.nodeName(), transport.wrapAddress(channel.getLocalAddress()), action, error);"
        },
        {
          "filename": "src/test/java/org/elasticsearch/ExceptionsSerializationTests.java",
          "status": "added",
          "additions": 98,
          "deletions": 0,
          "patch": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to Elasticsearch under one or more contributor\n+ * license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright\n+ * ownership. Elasticsearch licenses this file to you under\n+ * the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.elasticsearch;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.reflect.TypeToken;\n+import org.apache.lucene.store.AlreadyClosedException;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.collect.Tuple;\n+import org.elasticsearch.common.io.ThrowableObjectInputStream;\n+import org.elasticsearch.common.transport.InetSocketTransportAddress;\n+import org.elasticsearch.index.shard.IndexShard;\n+import org.elasticsearch.index.shard.IndexShardState;\n+import org.elasticsearch.index.shard.ShardId;\n+import org.elasticsearch.indices.recovery.RecoveryFailedException;\n+import org.elasticsearch.test.ElasticsearchTestCase;\n+import org.elasticsearch.transport.ConnectTransportException;\n+import org.junit.Test;\n+\n+import java.io.*;\n+import java.net.InetAddress;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static org.elasticsearch.common.io.ThrowableObjectOutputStream.serialize;\n+\n+public class ExceptionsSerializationTests extends ElasticsearchTestCase {\n+\n+    public void testBasicExceptions() throws IOException, ClassNotFoundException {\n+        ShardId id = new ShardId(\"foo\", 1);\n+        DiscoveryNode src = new DiscoveryNode(\"someNode\", new InetSocketTransportAddress(\"127.0.0.1\", 6666), Version.CURRENT);\n+        DiscoveryNode target = new DiscoveryNode(\"otherNode\", new InetSocketTransportAddress(\"127.0.0.1\", 8888), Version.CURRENT);\n+\n+        RecoveryFailedException ex = new RecoveryFailedException(id, src, target, new AlreadyClosedException(\"closed\", new SecurityException(\"booom booom boom\", new FileNotFoundException(\"no such file\"))));\n+        RecoveryFailedException serialize = serialize(ex);\n+        assertEquals(ex.getMessage(), serialize.getMessage());\n+        assertEquals(AlreadyClosedException.class, serialize.getCause().getClass());\n+        assertEquals(SecurityException.class, serialize.getCause().getCause().getClass());\n+        assertEquals(FileNotFoundException.class, serialize.getCause().getCause().getCause().getClass());\n+        ConnectTransportException tpEx = new ConnectTransportException(src, \"foo\", new IllegalArgumentException(\"boom\"));\n+        ConnectTransportException serializeTpEx = serialize(tpEx);\n+        assertEquals(tpEx.getMessage(), serializeTpEx.getMessage());\n+        assertEquals(src, tpEx.node());\n+\n+        TestException testException = new TestException(Arrays.asList(\"foo\"), EnumSet.allOf(IndexShardState.class), ImmutableMap.<String,String>builder().put(\"foo\", \"bar\").build(), InetAddress.getByName(\"localhost\"), new Number[] {new Integer(1)});\n+        assertEquals(serialize(testException).list.get(0), \"foo\");\n+        assertTrue(serialize(testException).set.containsAll(Arrays.asList(IndexShardState.values())));\n+        assertEquals(serialize(testException).map.get(\"foo\"), \"bar\");\n+    }\n+\n+    public void testPreventBogusFromSerializing() throws IOException, ClassNotFoundException {\n+        Serializable[] serializables = new Serializable[] {\n+                new AtomicBoolean(false),\n+                TypeToken.of(String.class),\n+        };\n+        for (Serializable s : serializables) {\n+            try {\n+                serialize(s);\n+                fail(s.getClass() + \" should fail\");\n+            } catch (NotSerializableException e) {\n+                // all is well\n+            }\n+        }\n+    }\n+\n+    public static class TestException extends Throwable {\n+        final List<String> list;\n+        final EnumSet<IndexShardState> set;\n+        final Map<String, String> map;\n+        final InetAddress address;\n+        final Object[] someArray;\n+\n+        public TestException(List<String> list, EnumSet<IndexShardState> set, Map<String, String> map, InetAddress address, Object[] someArray) {\n+            super(\"foo\", null);\n+            this.list = list;\n+            this.set = set;\n+            this.map = map;\n+            this.address = address;\n+            this.someArray = someArray;\n+        }\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0a98bf8e68e678a159c904203c040b848ce92a3c",
            "date": "2025-01-14T21:58:58Z",
            "author_login": "nicktindall"
          },
          {
            "sha": "fc0a1e10eccc89c7efe09a01ba550a99834dd7a3",
            "date": "2025-01-14T21:55:32Z",
            "author_login": "elasticsearchmachine"
          },
          {
            "sha": "35cb6a7e1bb271570cc5fb23ae1d53cb7fad970a",
            "date": "2025-01-14T21:54:58Z",
            "author_login": "elasticsearchmachine"
          },
          {
            "sha": "2482f06f3cdc83270a783b87f3bca48d6a477454",
            "date": "2025-01-14T21:31:24Z",
            "author_login": "not-napoleon"
          },
          {
            "sha": "77392c31a85febbd41170c9d904a402f8aab6d23",
            "date": "2025-01-14T20:43:03Z",
            "author_login": "jimczi"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-74",
    "description": "Elasticsearch before 1.6.1 allows remote attackers to execute arbitrary code via unspecified vectors involving the transport protocol.  NOTE: ZDI appears to claim that CVE-2015-3253 and CVE-2015-5377 are the same vulnerability",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-03-06T20:29:00.390",
    "last_modified": "2024-11-21T02:32:54.863",
    "fix_date": "2015-07-06T14:11:37Z"
  },
  "references": [
    {
      "url": "http://www.securityfocus.com/bid/75938",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.zerodayinitiative.com/advisories/ZDI-15-365/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://discuss.elastic.co/t/elasticsearch-remote-code-execution-cve-2015-5377/25736",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/elastic/elasticsearch/commit/bf3052d14c874aead7da8855c5fcadf5428a43f2",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/75938",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.zerodayinitiative.com/advisories/ZDI-15-365/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://discuss.elastic.co/t/elasticsearch-remote-code-execution-cve-2015-5377/25736",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/elastic/elasticsearch/commit/bf3052d14c874aead7da8855c5fcadf5428a43f2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:17.543638",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "elasticsearch",
    "owner": "elastic",
    "created_at": "2010-02-08T13:20:56Z",
    "updated_at": "2025-01-14T21:59:04Z",
    "pushed_at": "2025-01-14T21:58:58Z",
    "size": 1313666,
    "stars": 71293,
    "forks": 24974,
    "open_issues": 4814,
    "watchers": 71293,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0.12",
      "0.13",
      "0.14",
      "0.15",
      "0.16",
      "0.17",
      "0.18",
      "0.19",
      "0.20",
      "0.90",
      "1.0",
      "1.1",
      "1.2",
      "1.3",
      "1.4",
      "1.5",
      "1.6",
      "1.7",
      "2.0",
      "2.1",
      "2.2",
      "2.3",
      "2.4",
      "5.0",
      "5.1",
      "5.2",
      "5.3",
      "5.4",
      "5.5"
    ],
    "languages": {
      "Java": 177020086,
      "Groovy": 394223,
      "StringTemplate": 221184,
      "Shell": 90751,
      "ANTLR": 63284,
      "Python": 21726,
      "Dockerfile": 18176,
      "Batchfile": 12469,
      "TypeScript": 11051,
      "C": 10147,
      "PowerShell": 7780,
      "C++": 6986,
      "CSS": 5424,
      "MDX": 3362,
      "Emacs Lisp": 3341,
      "AMPL": 3121,
      "HTML": 2186,
      "JavaScript": 1268,
      "Mustache": 58,
      "FreeMarker": 45
    },
    "commit_activity": {
      "total_commits_last_year": 8296,
      "avg_commits_per_week": 159.53846153846155,
      "days_active_last_year": 348
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T22:12:01.246994"
  }
}