{
  "cve_id": "CVE-2015-5739",
  "github_data": {
    "repository": "golang/go",
    "fix_commit": "117ddcb83d7f42d6aa72241240af99ded81118e9",
    "related_commits": [
      "117ddcb83d7f42d6aa72241240af99ded81118e9",
      "117ddcb83d7f42d6aa72241240af99ded81118e9"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "117ddcb83d7f42d6aa72241240af99ded81118e9",
      "commit_date": "2015-06-30T16:22:41Z",
      "author": {
        "login": "bradfitz",
        "type": "User",
        "stats": {
          "total_commits": 2382,
          "average_weekly_commits": 2.69762174405436,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 440
        }
      },
      "commit_message": {
        "title": "net/textproto: don't treat spaces as hyphens in header keys",
        "length": 700,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 49,
        "additions": 42,
        "deletions": 7
      },
      "files": [
        {
          "filename": "src/net/http/header.go",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -168,6 +168,8 @@ func (h Header) WriteSubset(w io.Writer, exclude map[string]bool) error {\n // letter and any letter following a hyphen to upper case;\n // the rest are converted to lowercase.  For example, the\n // canonical key for \"accept-encoding\" is \"Accept-Encoding\".\n+// If s contains a space or invalid header field bytes, it is\n+// returned without modifications.\n func CanonicalHeaderKey(s string) string { return textproto.CanonicalMIMEHeaderKey(s) }\n \n // hasToken reports whether token appears with v, ASCII"
        },
        {
          "filename": "src/net/textproto/reader.go",
          "status": "modified",
          "additions": 33,
          "deletions": 3,
          "patch": "@@ -547,11 +547,16 @@ func (r *Reader) upcomingHeaderNewlines() (n int) {\n // the rest are converted to lowercase.  For example, the\n // canonical key for \"accept-encoding\" is \"Accept-Encoding\".\n // MIME header keys are assumed to be ASCII only.\n+// If s contains a space or invalid header field bytes, it is\n+// returned without modifications.\n func CanonicalMIMEHeaderKey(s string) string {\n \t// Quick check for canonical encoding.\n \tupper := true\n \tfor i := 0; i < len(s); i++ {\n \t\tc := s[i]\n+\t\tif !validHeaderFieldByte(c) {\n+\t\t\treturn s\n+\t\t}\n \t\tif upper && 'a' <= c && c <= 'z' {\n \t\t\treturn canonicalMIMEHeaderKey([]byte(s))\n \t\t}\n@@ -565,19 +570,44 @@ func CanonicalMIMEHeaderKey(s string) string {\n \n const toLower = 'a' - 'A'\n \n+// validHeaderFieldByte reports whether b is a valid byte in a header\n+// field key. This is actually stricter than RFC 7230, which says:\n+//   tchar = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\" / \"+\" / \"-\" / \".\" /\n+//           \"^\" / \"_\" / \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n+//   token = 1*tchar\n+// TODO: revisit in Go 1.6+ and possibly expand this. But note that many\n+// servers have historically dropped '_' to prevent ambiguities when mapping\n+// to CGI environment variables.\n+func validHeaderFieldByte(b byte) bool {\n+\treturn ('A' <= b && b <= 'Z') ||\n+\t\t('a' <= b && b <= 'z') ||\n+\t\t('0' <= b && b <= '9') ||\n+\t\tb == '-'\n+}\n+\n // canonicalMIMEHeaderKey is like CanonicalMIMEHeaderKey but is\n // allowed to mutate the provided byte slice before returning the\n // string.\n+//\n+// For invalid inputs (if a contains spaces or non-token bytes), a\n+// is unchanged and a string copy is returned.\n func canonicalMIMEHeaderKey(a []byte) string {\n+\t// See if a looks like a header key. If not, return it unchanged.\n+\tfor _, c := range a {\n+\t\tif validHeaderFieldByte(c) {\n+\t\t\tcontinue\n+\t\t}\n+\t\t// Don't canonicalize.\n+\t\treturn string(a)\n+\t}\n+\n \tupper := true\n \tfor i, c := range a {\n \t\t// Canonicalize: first letter upper case\n \t\t// and upper case after each dash.\n \t\t// (Host, User-Agent, If-Modified-Since).\n \t\t// MIME headers are ASCII only, so no Unicode issues.\n-\t\tif c == ' ' {\n-\t\t\tc = '-'\n-\t\t} else if upper && 'a' <= c && c <= 'z' {\n+\t\tif upper && 'a' <= c && c <= 'z' {\n \t\t\tc -= toLower\n \t\t} else if !upper && 'A' <= c && c <= 'Z' {\n \t\t\tc += toLower"
        },
        {
          "filename": "src/net/textproto/reader_test.go",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -24,11 +24,14 @@ var canonicalHeaderKeyTests = []canonicalHeaderKeyTest{\n \t{\"uSER-aGENT\", \"User-Agent\"},\n \t{\"user-agent\", \"User-Agent\"},\n \t{\"USER-AGENT\", \"User-Agent\"},\n-\t{\"\u00fcser-agenT\", \"\u00fcser-Agent\"}, // non-ASCII unchanged\n+\n+\t// Non-ASCII or anything with spaces or non-token chars is unchanged:\n+\t{\"\u00fcser-agenT\", \"\u00fcser-agenT\"},\n+\t{\"a B\", \"a B\"},\n \n \t// This caused a panic due to mishandling of a space:\n-\t{\"C Ontent-Transfer-Encoding\", \"C-Ontent-Transfer-Encoding\"},\n-\t{\"foo bar\", \"Foo-Bar\"},\n+\t{\"C Ontent-Transfer-Encoding\", \"C Ontent-Transfer-Encoding\"},\n+\t{\"foo bar\", \"foo bar\"},\n }\n \n func TestCanonicalMIMEHeaderKey(t *testing.T) {\n@@ -194,7 +197,7 @@ func TestReadMIMEHeaderNonCompliant(t *testing.T) {\n \t\t\"Foo\":              {\"bar\"},\n \t\t\"Content-Language\": {\"en\"},\n \t\t\"Sid\":              {\"0\"},\n-\t\t\"Audio-Mode\":       {\"None\"},\n+\t\t\"Audio Mode\":       {\"None\"},\n \t\t\"Privilege\":        {\"127\"},\n \t}\n \tif !reflect.DeepEqual(m, want) || err != nil {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "608acff8479640b00c85371d91280b64f5ec9594",
            "date": "2025-01-22T15:43:44Z",
            "author_login": "adonovan"
          },
          {
            "sha": "9d21ef3bd43acedfe5317184e63cc6b3dd19cbdf",
            "date": "2025-01-21T16:52:41Z",
            "author_login": "cagedmantis"
          },
          {
            "sha": "5a46b17b5f62616bdbc973bbd6a221edc02a0619",
            "date": "2025-01-03T21:53:32Z",
            "author_login": "cagedmantis"
          },
          {
            "sha": "6fc23a3cff5e38ff72923fee50f51254dcdc6e93",
            "date": "2025-01-22T00:03:14Z",
            "author_login": "rolandshoemaker"
          },
          {
            "sha": "70b603f4d295573197b43ad090d7cad21895144e",
            "date": "2025-01-22T15:24:11Z",
            "author_login": "adonovan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-444",
    "description": "The net/http library in net/textproto/reader.go in Go before 1.4.3 does not properly parse HTTP header keys, which allows remote attackers to conduct HTTP request smuggling attacks via a space instead of a hyphen, as demonstrated by \"Content Length\" instead of \"Content-Length.\"",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-10-18T20:29:00.277",
    "last_modified": "2024-11-21T02:33:44.953",
    "fix_date": "2015-06-30T16:22:41Z"
  },
  "references": [
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2015-October/167997.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2015-October/168029.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://rhn.redhat.com/errata/RHSA-2016-1538.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2015/q3/237",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2015/q3/292",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2015/q3/294",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/76281",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1250352",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/golang/go/commit/117ddcb83d7f42d6aa72241240af99ded81118e9",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2015-October/167997.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2015-October/168029.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://rhn.redhat.com/errata/RHSA-2016-1538.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2015/q3/237",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2015/q3/292",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2015/q3/294",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/76281",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1250352",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/golang/go/commit/117ddcb83d7f42d6aa72241240af99ded81118e9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:09.703864",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "go",
    "owner": "golang",
    "created_at": "2014-08-19T04:33:40Z",
    "updated_at": "2025-01-26T06:35:56Z",
    "pushed_at": "2025-01-22T18:13:33Z",
    "size": 385825,
    "stars": 125273,
    "forks": 17803,
    "open_issues": 9630,
    "watchers": 125273,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "dev.boringcrypto.go1.8",
      "dev.boringcrypto.go1.9",
      "dev.boringcrypto.go1.10",
      "dev.boringcrypto.go1.11",
      "dev.boringcrypto.go1.12",
      "dev.boringcrypto.go1.13",
      "dev.boringcrypto.go1.14",
      "dev.boringcrypto.go1.15",
      "dev.boringcrypto.go1.16",
      "dev.boringcrypto.go1.17",
      "dev.boringcrypto.go1.18",
      "dev.boringcrypto",
      "dev.cc",
      "dev.cmdgo",
      "dev.coretypes",
      "dev.debug",
      "dev.fuzz",
      "dev.garbage",
      "dev.gcfe",
      "dev.go2go",
      "dev.inline",
      "dev.link",
      "dev.power64",
      "dev.regabi",
      "dev.ssa",
      "dev.tls",
      "dev.typealias",
      "dev.typeparams",
      "dev.types",
      "dev.unified"
    ],
    "languages": {
      "Go": 47830810,
      "Assembly": 3216731,
      "HTML": 2621355,
      "C": 122435,
      "Shell": 64551,
      "Perl": 32036,
      "JavaScript": 20759,
      "Python": 19317,
      "Batchfile": 9485,
      "Dockerfile": 3563,
      "Makefile": 1868,
      "Awk": 450
    },
    "commit_activity": {
      "total_commits_last_year": 2799,
      "avg_commits_per_week": 53.82692307692308,
      "days_active_last_year": 334
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T07:46:08.009617"
  }
}