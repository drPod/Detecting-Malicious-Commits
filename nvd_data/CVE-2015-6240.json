{
  "cve_id": "CVE-2015-6240",
  "github_data": {
    "repository": "ansible/ansible",
    "fix_commit": "952166f48eb0f5797b75b160fd156bbe1e8fc647",
    "related_commits": [
      "952166f48eb0f5797b75b160fd156bbe1e8fc647",
      "ca2f2c4ebd7b5e097eab0a710f79c1f63badf95b",
      "952166f48eb0f5797b75b160fd156bbe1e8fc647",
      "ca2f2c4ebd7b5e097eab0a710f79c1f63badf95b"
    ],
    "patch_url": "https://github.com/ansible/ansible/commit/952166f48eb0f5797b75b160fd156bbe1e8fc647.patch",
    "fix_commit_details": {
      "sha": "952166f48eb0f5797b75b160fd156bbe1e8fc647",
      "commit_date": "2015-06-23T03:07:29Z",
      "author": {
        "login": "abadger",
        "type": "User",
        "stats": {
          "total_commits": 2715,
          "average_weekly_commits": 4.016272189349112,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 293
        }
      },
      "commit_message": {
        "title": "Fix problem with chroot connection plugins and symlinks from within the chroot.",
        "length": 79,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 92,
        "additions": 56,
        "deletions": 36
      },
      "files": [
        {
          "filename": "lib/ansible/plugins/connections/chroot.py",
          "status": "modified",
          "additions": 56,
          "deletions": 36,
          "patch": "@@ -1,5 +1,6 @@\n # Based on local.py (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>\n # (c) 2013, Maykel Moya <mmoya@speedyrails.com>\n+# (c) 2015, Toshio Kuratomi <tkuratomi@ansible.com>\n #\n # This file is part of Ansible\n #\n@@ -21,13 +22,14 @@\n import distutils.spawn\n import traceback\n import os\n-import shutil\n import subprocess\n from ansible import errors\n from ansible import utils\n from ansible.callbacks import vvv\n import ansible.constants as C\n \n+BUFSIZE = 65536\n+\n class Connection(object):\n     ''' Local chroot based connections '''\n \n@@ -64,8 +66,21 @@ def connect(self, port=None):\n \n         return self\n \n-    def exec_command(self, cmd, tmp_path, become_user=None, sudoable=False, executable='/bin/sh', in_data=None):\n-        ''' run a command on the chroot '''\n+    def _generate_cmd(self, executable, cmd):\n+        if executable:\n+            local_cmd = [self.chroot_cmd, self.chroot, executable, '-c', cmd]\n+        else:\n+            local_cmd = '%s \"%s\" %s' % (self.chroot_cmd, self.chroot, cmd)\n+        return local_cmd\n+\n+    def _buffered_exec_command(self, cmd, tmp_path, become_user=None, sudoable=False, executable='/bin/sh', in_data=None, stdin=subprocess.PIPE):\n+        ''' run a command on the chroot.  This is only needed for implementing\n+        put_file() get_file() so that we don't have to read the whole file\n+        into memory.\n+\n+        compared to exec_command() it looses some niceties like being able to\n+        return the process's exit code immediately.\n+        '''\n \n         if sudoable and self.runner.become and self.runner.become_method not in self.become_methods_supported:\n             raise errors.AnsibleError(\"Internal Error: this module does not support running commands via %s\" % self.runner.become_method)\n@@ -74,60 +89,65 @@ def exec_command(self, cmd, tmp_path, become_user=None, sudoable=False, executab\n             raise errors.AnsibleError(\"Internal Error: this module does not support optimized module pipelining\")\n \n         # We enter chroot as root so we ignore privlege escalation?\n-\n-        if executable:\n-            local_cmd = [self.chroot_cmd, self.chroot, executable, '-c', cmd]\n-        else:\n-            local_cmd = '%s \"%s\" %s' % (self.chroot_cmd, self.chroot, cmd)\n+        local_cmd = self._generate_cmd(executable, cmd)\n \n         vvv(\"EXEC %s\" % (local_cmd), host=self.chroot)\n         p = subprocess.Popen(local_cmd, shell=isinstance(local_cmd, basestring),\n                              cwd=self.runner.basedir,\n-                             stdin=subprocess.PIPE,\n+                             stdin=stdin,\n                              stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n \n+        return p\n+\n+    def exec_command(self, cmd, tmp_path, become_user=None, sudoable=False, executable='/bin/sh', in_data=None):\n+        ''' run a command on the chroot '''\n+\n+        p = self._buffered_exec_command(cmd, tmp_path, become_user, sudoable, executable, in_data)\n+\n         stdout, stderr = p.communicate()\n         return (p.returncode, '', stdout, stderr)\n \n     def put_file(self, in_path, out_path):\n         ''' transfer a file from local to chroot '''\n \n-        if not out_path.startswith(os.path.sep):\n-            out_path = os.path.join(os.path.sep, out_path)\n-        normpath = os.path.normpath(out_path)\n-        out_path = os.path.join(self.chroot, normpath[1:])\n-\n         vvv(\"PUT %s TO %s\" % (in_path, out_path), host=self.chroot)\n-        if not os.path.exists(in_path):\n-            raise errors.AnsibleFileNotFound(\"file or module does not exist: %s\" % in_path)\n+\n         try:\n-            shutil.copyfile(in_path, out_path)\n-        except shutil.Error:\n-            traceback.print_exc()\n-            raise errors.AnsibleError(\"failed to copy: %s and %s are the same\" % (in_path, out_path))\n+            with open(in_path, 'rb') as in_file:\n+                try:\n+                    p = self._buffered_exec_command('dd of=%s' % out_path, None, stdin=in_file)\n+                except OSError:\n+                    raise errors.AnsibleError(\"chroot connection requires dd command in the chroot\")\n+                try:\n+                    stdout, stderr = p.communicate()\n+                except:\n+                    traceback.print_exc()\n+                    raise errors.AnsibleError(\"failed to transfer file %s to %s\" % (in_path, out_path))\n+                if p.returncode != 0:\n+                    raise errors.AnsibleError(\"failed to transfer file %s to %s:\\n%s\\n%s\" % (in_path, out_path, stdout, stderr))\n         except IOError:\n-            traceback.print_exc()\n-            raise errors.AnsibleError(\"failed to transfer file to %s\" % out_path)\n+            raise errors.AnsibleError(\"file or module does not exist at: %s\" % in_path)\n \n     def fetch_file(self, in_path, out_path):\n         ''' fetch a file from chroot to local '''\n \n-        if not in_path.startswith(os.path.sep):\n-            in_path = os.path.join(os.path.sep, in_path)\n-        normpath = os.path.normpath(in_path)\n-        in_path = os.path.join(self.chroot, normpath[1:])\n-\n         vvv(\"FETCH %s TO %s\" % (in_path, out_path), host=self.chroot)\n-        if not os.path.exists(in_path):\n-            raise errors.AnsibleFileNotFound(\"file or module does not exist: %s\" % in_path)\n+\n         try:\n-            shutil.copyfile(in_path, out_path)\n-        except shutil.Error:\n-            traceback.print_exc()\n-            raise errors.AnsibleError(\"failed to copy: %s and %s are the same\" % (in_path, out_path))\n-        except IOError:\n-            traceback.print_exc()\n-            raise errors.AnsibleError(\"failed to transfer file to %s\" % out_path)\n+            p = self._buffered_exec_command('dd if=%s bs=%s' % (in_path, BUFSIZE), None)\n+        except OSError:\n+            raise errors.AnsibleError(\"chroot connection requires dd command in the jail\")\n+\n+        with open(out_path, 'wb+') as out_file:\n+            try:\n+                for chunk in p.stdout.read(BUFSIZE):\n+                    out_file.write(chunk)\n+            except:\n+                traceback.print_exc()\n+                raise errors.AnsibleError(\"failed to transfer file %s to %s\" % (in_path, out_path))\n+            stdout, stderr = p.communicate()\n+            if p.returncode != 0:\n+                raise errors.AnsibleError(\"failed to transfer file %s to %s:\\n%s\\n%s\" % (in_path, out_path, stdout, stderr))\n \n     def close(self):\n         ''' terminate the connection; nothing to do here '''"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ad93b96750fa04e8e14c0a0ea5fd3b2162a312b7",
            "date": "2025-01-14T19:55:33Z",
            "author_login": "s-hertel"
          },
          {
            "sha": "3030c793311ab8a8bcb47c04bf73d3e754aa8de1",
            "date": "2025-01-14T19:44:16Z",
            "author_login": "leegarrett"
          },
          {
            "sha": "5623a386c1073f172d24b45f1b4582b092895e68",
            "date": "2025-01-14T17:27:39Z",
            "author_login": "mattclay"
          },
          {
            "sha": "7677bf1c9b20ea2a4d575211179e76a51ed10668",
            "date": "2025-01-14T16:59:42Z",
            "author_login": "mattclay"
          },
          {
            "sha": "a046ef5a95b3011bff097c0c709680324ab27c2c",
            "date": "2025-01-14T15:46:52Z",
            "author_login": "bcoca"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-59",
    "description": "The chroot, jail, and zone connection plugins in ansible before 1.9.2 allow local users to escape a restricted environment via a symlink attack.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-06-07T20:29:00.287",
    "last_modified": "2024-11-21T02:34:36.677",
    "fix_date": "2015-06-23T03:07:29Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/08/17/10",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1243468",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ansible/ansible/commit/952166f48eb0f5797b75b160fd156bbe1e8fc647",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ansible/ansible/commit/ca2f2c4ebd7b5e097eab0a710f79c1f63badf95b",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2019/09/msg00016.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2015/08/17/10",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1243468",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ansible/ansible/commit/952166f48eb0f5797b75b160fd156bbe1e8fc647",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ansible/ansible/commit/ca2f2c4ebd7b5e097eab0a710f79c1f63badf95b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2019/09/msg00016.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:01.651761",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ansible",
    "owner": "ansible",
    "created_at": "2012-03-06T14:58:02Z",
    "updated_at": "2025-01-14T10:49:14Z",
    "pushed_at": "2025-01-13T22:24:09Z",
    "size": 256540,
    "stars": 63659,
    "forks": 23941,
    "open_issues": 910,
    "watchers": 63659,
    "has_security_policy": false,
    "default_branch": "devel",
    "protected_branches": [
      "devel",
      "mazer_role_loader",
      "milestone",
      "release1.5.0",
      "release1.5.1",
      "release1.5.2",
      "release1.5.3",
      "release1.5.4",
      "release1.5.5",
      "release1.6.0",
      "release1.6.1",
      "release1.6.2",
      "release1.6.3",
      "release1.6.4",
      "release1.6.5",
      "release1.6.6",
      "release1.6.7",
      "release1.6.8",
      "release1.6.9",
      "release1.6.10",
      "release1.7.0",
      "release1.7.1",
      "release1.7.2",
      "release1.8.0",
      "release1.8.1",
      "release1.8.2",
      "release1.8.3",
      "release1.8.4",
      "stable-1.9",
      "stable-2.0-network"
    ],
    "languages": {
      "Python": 8959137,
      "PowerShell": 728026,
      "Shell": 293660,
      "C#": 221744,
      "Jinja": 45945,
      "Go": 2010,
      "Roff": 555,
      "Batchfile": 144
    },
    "commit_activity": {
      "total_commits_last_year": 609,
      "avg_commits_per_week": 11.711538461538462,
      "days_active_last_year": 201
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:02:42.286063"
  }
}