{
  "cve_id": "CVE-2015-7578",
  "github_data": {
    "repository": "rails/rails-html-sanitizer",
    "fix_commit": "297161e29a3e11186ce4c02bf7defc088bf544d4",
    "related_commits": [
      "297161e29a3e11186ce4c02bf7defc088bf544d4",
      "297161e29a3e11186ce4c02bf7defc088bf544d4"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "297161e29a3e11186ce4c02bf7defc088bf544d4",
      "commit_date": "2015-11-25T17:23:22Z",
      "author": {
        "login": "rafaelfranca",
        "type": "User",
        "stats": {
          "total_commits": 6,
          "average_weekly_commits": 0.01011804384485666,
          "total_additions": 146,
          "total_deletions": 27,
          "weeks_active": 4
        }
      },
      "commit_message": {
        "title": "Define a less permissive list of tags and attributes",
        "length": 339,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 65,
        "additions": 55,
        "deletions": 10
      },
      "files": [
        {
          "filename": "lib/rails/html/sanitizer.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -97,6 +97,10 @@ class << self\n         attr_accessor :allowed_tags\n         attr_accessor :allowed_attributes\n       end\n+      self.allowed_tags = Set.new(%w(strong em b i p code pre tt samp kbd var sub\n+        sup dfn cite big small address hr br div span h1 h2 h3 h4 h5 h6 ul ol li dl dt dd abbr\n+        acronym a img blockquote del ins))\n+      self.allowed_attributes = Set.new(%w(href src width height alt cite datetime title class name xml:lang abbr))\n \n       def initialize\n         @permit_scrubber = PermitScrubber.new"
        },
        {
          "filename": "lib/rails/html/scrubbers.rb",
          "status": "modified",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -100,6 +100,7 @@ def scrub_attributes(node)\n         if @attributes\n           node.attribute_nodes.each do |attr|\n             attr.remove if scrub_attribute?(attr.name)\n+            scrub_attribute(node, attr)\n           end\n \n           scrub_css_attribute(node)\n@@ -123,6 +124,30 @@ def validate!(var, name)\n         end\n         var\n       end\n+\n+      def scrub_attribute(node, attr_node)\n+        attr_name = if attr_node.namespace\n+                      \"#{attr_node.namespace.prefix}:#{attr_node.node_name}\"\n+                    else\n+                      attr_node.node_name\n+                    end\n+\n+        if Loofah::HTML5::WhiteList::ATTR_VAL_IS_URI.include?(attr_name)\n+          # this block lifted nearly verbatim from HTML5 sanitization\n+          val_unescaped = CGI.unescapeHTML(attr_node.value).gsub(Loofah::HTML5::Scrub::CONTROL_CHARACTERS,'').downcase\n+          if val_unescaped =~ /^[a-z0-9][-+.a-z0-9]*:/ && ! Loofah::HTML5::WhiteList::ALLOWED_PROTOCOLS.include?(val_unescaped.split(Loofah::HTML5::WhiteList::PROTOCOL_SEPARATOR)[0])\n+            attr_node.remove\n+          end\n+        end\n+        if Loofah::HTML5::WhiteList::SVG_ATTR_VAL_ALLOWS_REF.include?(attr_name)\n+          attr_node.value = attr_node.value.gsub(/url\\s*\\(\\s*[^#\\s][^)]+?\\)/m, ' ') if attr_node.value\n+        end\n+        if Loofah::HTML5::WhiteList::SVG_ALLOW_LOCAL_HREF.include?(node.name) && attr_name == 'xlink:href' && attr_node.value =~ /^\\s*[^#\\s].*/m\n+          attr_node.remove\n+        end\n+\n+        node.remove_attribute(attr_node.name) if attr_name == 'src' && attr_node.value !~ /[^[:space:]]/\n+      end\n     end\n \n     # === Rails::Html::TargetScrubber"
        },
        {
          "filename": "test/sanitizer_test.rb",
          "status": "modified",
          "additions": 26,
          "deletions": 10,
          "patch": "@@ -152,7 +152,7 @@ def test_sanitize_plaintext\n   end\n \n   def test_sanitize_script\n-    assert_sanitized \"a b c<script language=\\\"Javascript\\\">blah blah blah</script>d e f\", \"a b cd e f\"\n+    assert_sanitized \"a b c<script language=\\\"Javascript\\\">blah blah blah</script>d e f\", \"a b cblah blah blahd e f\"\n   end\n \n   def test_sanitize_js_handlers\n@@ -173,17 +173,23 @@ def test_sanitize_image_src\n   tags = Loofah::HTML5::WhiteList::ALLOWED_ELEMENTS - %w(script form)\n   tags.each do |tag_name|\n     define_method \"test_should_allow_#{tag_name}_tag\" do\n-      assert_sanitized \"start <#{tag_name} title=\\\"1\\\" onclick=\\\"foo\\\">foo <bad>bar</bad> baz</#{tag_name}> end\", %(start <#{tag_name} title=\"1\">foo bar baz</#{tag_name}> end)\n+      scope_allowed_tags(tags) do\n+        assert_sanitized \"start <#{tag_name} title=\\\"1\\\" onclick=\\\"foo\\\">foo <bad>bar</bad> baz</#{tag_name}> end\", %(start <#{tag_name} title=\"1\">foo bar baz</#{tag_name}> end)\n+      end\n     end\n   end\n \n   def test_should_allow_anchors\n-    assert_sanitized %(<a href=\"foo\" onclick=\"bar\"><script>baz</script></a>), %(<a href=\\\"foo\\\"></a>)\n+    assert_sanitized %(<a href=\"foo\" onclick=\"bar\"><script>baz</script></a>), %(<a href=\\\"foo\\\">baz</a>)\n   end\n \n   def test_video_poster_sanitization\n-    assert_sanitized %(<video src=\"videofile.ogg\" autoplay  poster=\"posterimage.jpg\"></video>), %(<video src=\"videofile.ogg\" poster=\"posterimage.jpg\"></video>)\n-    assert_sanitized %(<video src=\"videofile.ogg\" poster=javascript:alert(1)></video>), %(<video src=\"videofile.ogg\"></video>)\n+    scope_allowed_tags(%w(video)) do\n+      scope_allowed_attributes %w(src poster) do\n+        assert_sanitized %(<video src=\"videofile.ogg\" autoplay  poster=\"posterimage.jpg\"></video>), %(<video src=\"videofile.ogg\" poster=\"posterimage.jpg\"></video>)\n+        assert_sanitized %(<video src=\"videofile.ogg\" poster=javascript:alert(1)></video>), %(<video src=\"videofile.ogg\"></video>)\n+      end\n+    end\n   end\n \n   # RFC 3986, sec 4.2\n@@ -309,7 +315,7 @@ def test_should_block_script_tag\n   end\n \n   def test_should_not_fall_for_xss_image_hack_with_uppercase_tags\n-    assert_sanitized %(<IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">), \"<img>\\\"&gt;\"\n+    assert_sanitized %(<IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">), %(<img>alert(\"XSS\")\"&gt;)\n   end\n \n   [%(<IMG SRC=\"javascript:alert('XSS');\">),\n@@ -453,6 +459,16 @@ def test_sanitize_ascii_8bit_string\n     end\n   end\n \n+  def test_sanitize_data_attributes\n+    assert_sanitized %(<a href=\"/blah\" data-method=\"post\">foo</a>), %(<a href=\"/blah\">foo</a>)\n+    assert_sanitized %(<a data-remote=\"true\" data-type=\"script\" data-method=\"get\" data-cross-domain=\"true\" href=\"attack.js\">Launch the missiles</a>), %(<a href=\"attack.js\">Launch the missiles</a>)\n+  end\n+\n+  def test_allow_data_attribute_if_requested\n+    text = %(<a data-foo=\"foo\">foo</a>)\n+    assert_equal %(<a data-foo=\"foo\">foo</a>), white_list_sanitize(text, attributes: ['data-foo'])\n+  end\n+\n protected\n \n   def xpath_sanitize(input, options = {})\n@@ -484,18 +500,18 @@ def sanitize_css(input)\n   end\n \n   def scope_allowed_tags(tags)\n+    old_tags = Rails::Html::WhiteListSanitizer.allowed_tags\n     Rails::Html::WhiteListSanitizer.allowed_tags = tags\n     yield Rails::Html::WhiteListSanitizer.new\n-\n   ensure\n-    Rails::Html::WhiteListSanitizer.allowed_tags = nil\n+    Rails::Html::WhiteListSanitizer.allowed_tags = old_tags\n   end\n \n   def scope_allowed_attributes(attributes)\n+    old_attributes = Rails::Html::WhiteListSanitizer.allowed_attributes\n     Rails::Html::WhiteListSanitizer.allowed_attributes = attributes\n     yield Rails::Html::WhiteListSanitizer.new\n-\n   ensure\n-    Rails::Html::WhiteListSanitizer.allowed_attributes = nil\n+    Rails::Html::WhiteListSanitizer.allowed_attributes = old_attributes\n   end\n end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "08e39d99059c1179efd5e50fdb3bc60a262973f8",
            "date": "2024-12-12T21:05:18Z",
            "author_login": "flavorjones"
          },
          {
            "sha": "694d98195b90ba29e57ed650dac43e2b026582b2",
            "date": "2024-12-12T20:54:53Z",
            "author_login": "flavorjones"
          },
          {
            "sha": "9a1e3761b42f0f7f49021a185df480dc4aabf423",
            "date": "2024-12-12T20:45:59Z",
            "author_login": "flavorjones"
          },
          {
            "sha": "9d5b3989a661b82c3407bb38594345b5f363da2b",
            "date": "2024-12-04T13:36:24Z",
            "author_login": "flavorjones"
          },
          {
            "sha": "5e96b19bbb934284e675109851bd82429622bb6e",
            "date": "2024-12-02T20:50:58Z",
            "author_login": "flavorjones"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "Cross-site scripting (XSS) vulnerability in the rails-html-sanitizer gem before 1.0.3 for Ruby on Rails 4.2.x and 5.x allows remote attackers to inject arbitrary web script or HTML via crafted tag attributes.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2016-02-16T02:59:02.047",
    "last_modified": "2024-11-21T02:37:01.113",
    "fix_date": "2015-11-25T17:23:22Z"
  },
  "references": [
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/178046.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/178064.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2016-02/msg00014.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2016-02/msg00024.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2016-04/msg00053.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/01/25/11",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1034816",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://github.com/rails/rails-html-sanitizer/commit/297161e29a3e11186ce4c02bf7defc088bf544d4",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://groups.google.com/forum/message/raw?msg=ruby-security-ann/uh--W4TDwmI/ygHE7hlZEgAJ",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/178046.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/178064.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2016-02/msg00014.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2016-02/msg00024.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2016-04/msg00053.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/01/25/11",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1034816",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/rails/rails-html-sanitizer/commit/297161e29a3e11186ce4c02bf7defc088bf544d4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://groups.google.com/forum/message/raw?msg=ruby-security-ann/uh--W4TDwmI/ygHE7hlZEgAJ",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:40.208849",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "rails-html-sanitizer",
    "owner": "rails",
    "created_at": "2013-09-25T00:54:20Z",
    "updated_at": "2024-12-17T07:47:06Z",
    "pushed_at": "2024-12-12T21:05:43Z",
    "size": 367,
    "stars": 310,
    "forks": 83,
    "open_issues": 8,
    "watchers": 310,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Ruby": 84358
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:56:10.297713"
  }
}