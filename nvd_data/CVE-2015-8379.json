{
  "cve_id": "CVE-2015-8379",
  "github_data": {
    "repository": "cakephp/cakephp",
    "fix_commit": "0f818a23a876c01429196bf7623e1e94a50230f0",
    "related_commits": [
      "0f818a23a876c01429196bf7623e1e94a50230f0",
      "0f818a23a876c01429196bf7623e1e94a50230f0"
    ],
    "patch_url": "https://github.com/cakephp/cakephp/commit/0f818a23a876c01429196bf7623e1e94a50230f0.patch",
    "fix_commit_details": {
      "sha": "0f818a23a876c01429196bf7623e1e94a50230f0",
      "commit_date": "2015-11-26T03:11:16Z",
      "author": {
        "login": "markstory",
        "type": "User",
        "stats": {
          "total_commits": 17594,
          "average_weekly_commits": 17.13145082765336,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 860
        }
      },
      "commit_message": {
        "title": "Only allow GET, HEAD, OPTIONS to not have CSRF tokens.",
        "length": 194,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 62,
        "additions": 35,
        "deletions": 27
      },
      "files": [
        {
          "filename": "src/Controller/Component/CsrfComponent.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -94,7 +94,7 @@ public function startup(Event $event)\n         if ($request->is('get') && $cookieData === null) {\n             $this->_setCookie($request, $response);\n         }\n-        if ($request->is(['patch', 'put', 'post', 'delete'])) {\n+        if (!$request->is(['head', 'get', 'options'])) {\n             $this->_validateToken($request);\n             unset($request->data[$this->_config['field']]);\n         }"
        },
        {
          "filename": "tests/TestCase/Controller/Component/CsrfComponentTest.php",
          "status": "modified",
          "additions": 34,
          "deletions": 26,
          "patch": "@@ -61,10 +61,11 @@ public function tearDown()\n      */\n     public function testSettingCookie()\n     {\n-        $_SERVER['REQUEST_METHOD'] = 'GET';\n-\n         $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n-        $controller->request = new Request(['webroot' => '/dir/']);\n+        $controller->request = new Request([\n+            'environment' => ['REQUEST_METHOD' => 'GET'],\n+            'webroot' => '/dir/',\n+        ]);\n         $controller->response = new Response();\n \n         $event = new Event('Controller.startup', $controller);\n@@ -87,7 +88,7 @@ public function testSettingCookie()\n     public static function httpMethodProvider()\n     {\n         return [\n-            ['PATCH'], ['PUT'], ['POST'], ['DELETE']\n+            ['PATCH'], ['PUT'], ['POST'], ['DELETE'], ['PURGE'], ['INVALIDMETHOD']\n         ];\n     }\n \n@@ -100,11 +101,14 @@ public static function httpMethodProvider()\n      */\n     public function testValidTokenInHeader($method)\n     {\n-        $_SERVER['REQUEST_METHOD'] = $method;\n-        $_SERVER['HTTP_X_CSRF_TOKEN'] = 'testing123';\n-\n         $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n-        $controller->request = new Request(['cookies' => ['csrfToken' => 'testing123']]);\n+        $controller->request = new Request([\n+            'environment' => [\n+                'REQUEST_METHOD' => $method,\n+                'HTTP_X_CSRF_TOKEN' => 'testing123',\n+            ],\n+            'cookies' => ['csrfToken' => 'testing123']\n+        ]);\n         $controller->response = new Response();\n \n         $event = new Event('Controller.startup', $controller);\n@@ -122,11 +126,12 @@ public function testValidTokenInHeader($method)\n      */\n     public function testInvalidTokenInHeader($method)\n     {\n-        $_SERVER['REQUEST_METHOD'] = $method;\n-        $_SERVER['HTTP_X_CSRF_TOKEN'] = 'nope';\n-\n         $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n         $controller->request = new Request([\n+            'environment' => [\n+                'REQUEST_METHOD' => $method,\n+                'HTTP_X_CSRF_TOKEN' => 'nope',\n+            ],\n             'cookies' => ['csrfToken' => 'testing123']\n         ]);\n         $controller->response = new Response();\n@@ -144,10 +149,11 @@ public function testInvalidTokenInHeader($method)\n      */\n     public function testValidTokenRequestData($method)\n     {\n-        $_SERVER['REQUEST_METHOD'] = $method;\n-\n         $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n         $controller->request = new Request([\n+            'environment' => [\n+                'REQUEST_METHOD' => $method,\n+            ],\n             'post' => ['_csrfToken' => 'testing123'],\n             'cookies' => ['csrfToken' => 'testing123']\n         ]);\n@@ -168,10 +174,11 @@ public function testValidTokenRequestData($method)\n      */\n     public function testInvalidTokenRequestData($method)\n     {\n-        $_SERVER['REQUEST_METHOD'] = $method;\n-\n         $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n         $controller->request = new Request([\n+            'environment' => [\n+                'REQUEST_METHOD' => $method,\n+            ],\n             'post' => ['_csrfToken' => 'nope'],\n             'cookies' => ['csrfToken' => 'testing123']\n         ]);\n@@ -189,10 +196,11 @@ public function testInvalidTokenRequestData($method)\n      */\n     public function testInvalidTokenRequestDataMissing()\n     {\n-        $_SERVER['REQUEST_METHOD'] = 'POST';\n-\n         $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n         $controller->request = new Request([\n+            'environment' => [\n+                'REQUEST_METHOD' => 'POST',\n+            ],\n             'post' => [],\n             'cookies' => ['csrfToken' => 'testing123']\n         ]);\n@@ -211,10 +219,11 @@ public function testInvalidTokenRequestDataMissing()\n      */\n     public function testInvalidTokenMissingCookie($method)\n     {\n-        $_SERVER['REQUEST_METHOD'] = $method;\n-\n         $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n         $controller->request = new Request([\n+            'environment' => [\n+                'REQUEST_METHOD' => $method\n+            ],\n             'post' => ['_csrfToken' => 'could-be-valid'],\n             'cookies' => []\n         ]);\n@@ -232,10 +241,9 @@ public function testInvalidTokenMissingCookie($method)\n      */\n     public function testCsrfValidationSkipsRequestAction()\n     {\n-        $_SERVER['REQUEST_METHOD'] = 'POST';\n-\n         $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n         $controller->request = new Request([\n+            'environment' => ['REQUEST_METHOD' => 'POST'],\n             'params' => ['requested' => 1],\n             'post' => ['_csrfToken' => 'nope'],\n             'cookies' => ['csrfToken' => 'testing123']\n@@ -256,10 +264,11 @@ public function testCsrfValidationSkipsRequestAction()\n      */\n     public function testConfigurationCookieCreate()\n     {\n-        $_SERVER['REQUEST_METHOD'] = 'GET';\n-\n         $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n-        $controller->request = new Request(['webroot' => '/dir/']);\n+        $controller->request = new Request([\n+            'environment' => ['REQUEST_METHOD' => 'GET'],\n+            'webroot' => '/dir/'\n+        ]);\n         $controller->response = new Response();\n \n         $component = new CsrfComponent($this->registry, [\n@@ -290,10 +299,9 @@ public function testConfigurationCookieCreate()\n      */\n     public function testConfigurationValidate()\n     {\n-        $_SERVER['REQUEST_METHOD'] = 'POST';\n-\n         $controller = $this->getMock('Cake\\Controller\\Controller', ['redirect']);\n         $controller->request = new Request([\n+            'environment' => ['REQUEST_METHOD' => 'POST'],\n             'cookies' => ['csrfToken' => 'nope', 'token' => 'yes'],\n             'post' => ['_csrfToken' => 'no match', 'token' => 'yes'],\n         ]);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "13a88f4db6e78871909c57d6a4377dd31b7c6a72",
            "date": "2025-01-14T02:18:15Z",
            "author_login": "markstory"
          },
          {
            "sha": "c5c341f05e8f3cfb1f6e58fee2b16cbd0ac4937f",
            "date": "2025-01-13T21:53:54Z",
            "author_login": "markstory"
          },
          {
            "sha": "61c96650a84461a2357068a4c973bde28a3971f0",
            "date": "2025-01-13T06:59:47Z",
            "author_login": "ADmad"
          },
          {
            "sha": "d1fe951e448bad93c8a9f28a3a4d6f63f820363f",
            "date": "2025-01-12T14:49:09Z",
            "author_login": "ADmad"
          },
          {
            "sha": "9854c6dd4295f6d503d4bf1a8d7f2eaeb0be0240",
            "date": "2025-01-12T14:27:39Z",
            "author_login": "ADmad"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-352",
    "description": "CakePHP 2.x and 3.x before 3.1.5 might allow remote attackers to bypass the CSRF protection mechanism via the _method parameter.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2016-01-26T19:59:01.140",
    "last_modified": "2024-11-21T02:38:24.607",
    "fix_date": "2015-11-26T03:11:16Z"
  },
  "references": [
    {
      "url": "http://bakery.cakephp.org/2015/11/29/cakephp_315_released.html",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://blog.mindedsecurity.com/2016/01/request-parameter-method-may-lead-to.html",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://karmainsecurity.com/KIS-2016-01",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/135301/CakePHP-3.2.0-CSRF-Bypass.html",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2016/Jan/42",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://www.securityfocus.com/archive/1/537317/100/0/threaded",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/cakephp/cakephp/commit/0f818a23a876c01429196bf7623e1e94a50230f0",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://bakery.cakephp.org/2015/11/29/cakephp_315_released.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://blog.mindedsecurity.com/2016/01/request-parameter-method-may-lead-to.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://karmainsecurity.com/KIS-2016-01",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/135301/CakePHP-3.2.0-CSRF-Bypass.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2016/Jan/42",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "http://www.securityfocus.com/archive/1/537317/100/0/threaded",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/cakephp/cakephp/commit/0f818a23a876c01429196bf7623e1e94a50230f0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:40.199791",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cakephp",
    "owner": "cakephp",
    "created_at": "2010-05-08T14:38:22Z",
    "updated_at": "2025-01-14T09:08:20Z",
    "pushed_at": "2025-01-14T02:18:17Z",
    "size": 110833,
    "stars": 8706,
    "forks": 3413,
    "open_issues": 74,
    "watchers": 8706,
    "has_security_policy": false,
    "default_branch": "5.x",
    "protected_branches": [
      "3.x",
      "4.next",
      "4.x",
      "5.x",
      "6.x"
    ],
    "languages": {
      "PHP": 11124806,
      "CSS": 15730,
      "HTML": 9673,
      "Makefile": 6869,
      "Shell": 723,
      "Hack": 486,
      "JavaScript": 173
    },
    "commit_activity": {
      "total_commits_last_year": 766,
      "avg_commits_per_week": 14.73076923076923,
      "days_active_last_year": 228
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:00:21.649061"
  }
}