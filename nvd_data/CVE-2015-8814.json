{
  "cve_id": "CVE-2015-8814",
  "github_data": {
    "repository": "umbraco/Umbraco-CMS",
    "fix_commit": "18c3345e47663a358a042652e697b988d6a380eb",
    "related_commits": [
      "18c3345e47663a358a042652e697b988d6a380eb",
      "18c3345e47663a358a042652e697b988d6a380eb"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "18c3345e47663a358a042652e697b988d6a380eb",
      "commit_date": "2015-11-25T18:39:24Z",
      "author": {
        "login": "Shazwazza",
        "type": "User",
        "stats": {
          "total_commits": 11017,
          "average_weekly_commits": 15.133241758241759,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 440
        }
      },
      "commit_message": {
        "title": "Fixes U4-7459 XSRF protection bypass  - ensures tokens are checked for the non-editor api controllers",
        "length": 101,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 132,
        "additions": 116,
        "deletions": 16
      },
      "files": [
        {
          "filename": "src/Umbraco.Web.UI/umbraco_client/Application/Extensions.js",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -357,4 +357,20 @@\n \r\n     });\r\n \r\n+    //This sets the default jquery ajax headers to include our csrf token, we\r\n+    // need to user the beforeSend method because our token changes per user/login so\r\n+    // it cannot be static\r\n+    $.ajaxSetup({\r\n+        beforeSend: function (xhr) {\r\n+\r\n+            function getCookie(name) {\r\n+                var value = \"; \" + document.cookie;\r\n+                var parts = value.split(\"; \" + name + \"=\");\r\n+                if (parts.length === 2) return parts.pop().split(\";\").shift();\r\n+            }\r\n+\r\n+            xhr.setRequestHeader(\"X-XSRF-TOKEN\", getCookie(\"XSRF-TOKEN\"));\r\n+        }\r\n+    });\r\n+\r\n })(jQuery);\n\\ No newline at end of file"
        },
        {
          "filename": "src/Umbraco.Web/Mvc/ValidateMvcAngularAntiForgeryTokenAttribute.cs",
          "status": "added",
          "additions": 61,
          "deletions": 0,
          "patch": "@@ -0,0 +1,61 @@\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Net;\n+using System.Security.Claims;\n+using System.Web.Mvc;\n+using Umbraco.Web.WebApi.Filters;\n+\n+namespace Umbraco.Web.Mvc\n+{\n+    /// <summary>\n+    /// A filter to check for the csrf token based on Angular's standard approach\n+    /// </summary>\n+    /// <remarks>\n+    /// Code derived from http://ericpanorel.net/2013/07/28/spa-authentication-and-csrf-mvc4-antiforgery-implementation/\n+    /// \n+    /// If the authentication type is cookie based, then this filter will execute, otherwise it will be disabled\n+    /// </remarks>\n+    public sealed class ValidateMvcAngularAntiForgeryTokenAttribute : ActionFilterAttribute\n+    {\n+        public override void OnActionExecuting(ActionExecutingContext filterContext)\n+        {\n+            var userIdentity = filterContext.HttpContext.User.Identity as ClaimsIdentity;\n+            if (userIdentity != null)\n+            {\n+                //if there is not CookiePath claim, then exist\n+                if (userIdentity.HasClaim(x => x.Type == ClaimTypes.CookiePath) == false)\n+                {\n+                    base.OnActionExecuting(filterContext);\n+                    return;\n+                }\n+            }\n+\n+            string failedReason;\n+            var headers = new List<KeyValuePair<string, List<string>>>();\n+            foreach (var key in filterContext.HttpContext.Request.Headers.AllKeys)\n+            {\n+                if (headers.Any(x => x.Key == key))\n+                {\n+                    var found = headers.First(x => x.Key == key);\n+                    found.Value.Add(filterContext.HttpContext.Request.Headers[key]);\n+                }\n+                else\n+                {\n+                    headers.Add(new KeyValuePair<string, List<string>>(key, new List<string> { filterContext.HttpContext.Request.Headers[key] }));\n+                }\n+            }\n+            var cookie = filterContext.HttpContext.Request.Cookies[AngularAntiForgeryHelper.CsrfValidationCookieName];\n+            if (AngularAntiForgeryHelper.ValidateHeaders(\n+                headers.Select(x => new KeyValuePair<string, IEnumerable<string>>(x.Key, x.Value)).ToArray(),\n+                cookie == null ? \"\" : cookie.Value,\n+                out failedReason) == false)\n+            {\n+                var result = new HttpStatusCodeResult(HttpStatusCode.ExpectationFailed);\n+                filterContext.Result = result;\n+                return;\n+            }\n+\n+            base.OnActionExecuting(filterContext);\n+        }\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "src/Umbraco.Web/Umbraco.Web.csproj",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -306,6 +306,7 @@\n     <Compile Include=\"Models\\PublishedContentWithKeyBase.cs\" />\r\n     <Compile Include=\"Mvc\\IRenderController.cs\" />\r\n     <Compile Include=\"Mvc\\RenderIndexActionSelectorAttribute.cs\" />\r\n+    <Compile Include=\"Mvc\\ValidateMvcAngularAntiForgeryTokenAttribute.cs\" />\r\n     <Compile Include=\"PropertyEditors\\DatePreValueEditor.cs\" />\r\n     <Compile Include=\"RequestLifespanMessagesFactory.cs\" />\r\n     <Compile Include=\"Scheduling\\LatchedBackgroundTaskBase.cs\" />\r"
        },
        {
          "filename": "src/Umbraco.Web/WebApi/Filters/AngularAntiForgeryHelper.cs",
          "status": "modified",
          "additions": 30,
          "deletions": 15,
          "patch": "@@ -1,4 +1,6 @@\n \ufeffusing System;\n+using System.Collections.Generic;\n+using System.Collections.Specialized;\n using System.Linq;\n using System.Net.Http;\n using System.Net.Http.Headers;\n@@ -28,6 +30,8 @@ public static class AngularAntiForgeryHelper\n         /// </summary>\n         public const string AngularHeadername = \"X-XSRF-TOKEN\";\n \n+        \n+\n         /// <summary>\n         /// Returns 2 tokens - one for the cookie value and one that angular should set as the header value\n         /// </summary>\n@@ -64,13 +68,10 @@ public static bool ValidateTokens(string cookieToken, string headerToken)\n             return true;\n         }\n \n-        /// <summary>\n-        /// Validates the headers/cookies passed in for the request\n-        /// </summary>\n-        /// <param name=\"requestHeaders\"></param>\n-        /// <param name=\"failedReason\"></param>\n-        /// <returns></returns>\n-        public static bool ValidateHeaders(HttpRequestHeaders requestHeaders, out string failedReason)\n+        internal static bool ValidateHeaders(            \n+            KeyValuePair<string, IEnumerable<string>>[] requestHeaders, \n+            string cookieToken,\n+            out string failedReason)\n         {\n             failedReason = \"\";\n \n@@ -85,26 +86,40 @@ public static bool ValidateHeaders(HttpRequestHeaders requestHeaders, out string\n                 .Select(z => z.Value)\n                 .SelectMany(z => z)\n                 .FirstOrDefault();\n-\n-            var cookieToken = requestHeaders\n-                .GetCookies()\n-                .Select(c => c[CsrfValidationCookieName])\n-                .FirstOrDefault();\n-\n+            \n             // both header and cookie must be there\n             if (cookieToken == null || headerToken == null)\n             {\n                 failedReason = \"Missing token null\";\n                 return false;\n             }\n \n-            if (ValidateTokens(cookieToken.Value, headerToken) == false)\n+            if (ValidateTokens(cookieToken, headerToken) == false)\n             {\n                 failedReason = \"Invalid token\";\n                 return false;\n             }\n-            \n+\n             return true;\n         }\n+\n+        /// <summary>\n+        /// Validates the headers/cookies passed in for the request\n+        /// </summary>\n+        /// <param name=\"requestHeaders\"></param>\n+        /// <param name=\"failedReason\"></param>\n+        /// <returns></returns>\n+        public static bool ValidateHeaders(HttpRequestHeaders requestHeaders, out string failedReason)\n+        {\n+            var cookieToken = requestHeaders\n+                .GetCookies()\n+                .Select(c => c[CsrfValidationCookieName])\n+                .FirstOrDefault();\n+\n+            return ValidateHeaders(\n+                requestHeaders.ToDictionary(x => x.Key, x => x.Value).ToArray(),\n+                cookieToken == null ? null : cookieToken.Value,\n+                out failedReason);\n+        }\n     }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "src/Umbraco.Web/WebServices/BulkPublishController.cs",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -15,6 +15,7 @@ namespace Umbraco.Web.WebServices\n     /// <summary>\r\n     /// A REST controller used for the publish dialog in order to publish bulk items at once\r\n     /// </summary>\r\n+    [ValidateMvcAngularAntiForgeryToken]\r\n     public class BulkPublishController : UmbracoAuthorizedController\r\n     {\r\n         /// <summary>\r"
        },
        {
          "filename": "src/Umbraco.Web/WebServices/DomainsApiController.cs",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -13,13 +13,15 @@\n //using umbraco.cms.businesslogic.language;\r\n using umbraco.BusinessLogic.Actions;\r\n using umbraco.cms.businesslogic.web;\r\n+using Umbraco.Web.WebApi.Filters;\r\n \r\n namespace Umbraco.Web.WebServices\r\n {\r\n     /// <summary>\r\n     /// A REST controller used for managing domains.\r\n     /// </summary>\r\n     /// <remarks>Nothing to do with Active Directory.</remarks>\r\n+    [ValidateAngularAntiForgeryToken]\r\n     public class DomainsApiController : UmbracoAuthorizedApiController\r\n     {\r\n         [HttpPost]\r"
        },
        {
          "filename": "src/Umbraco.Web/WebServices/ExamineManagementApiController.cs",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -13,9 +13,11 @@\n using Umbraco.Core.Logging;\r\n using Umbraco.Web.Search;\r\n using Umbraco.Web.WebApi;\r\n+using Umbraco.Web.WebApi.Filters;\r\n \r\n namespace Umbraco.Web.WebServices\r\n {\r\n+    [ValidateAngularAntiForgeryToken]\r\n     public class ExamineManagementApiController : UmbracoAuthorizedApiController\r\n     {\r\n         /// <summary>\r"
        },
        {
          "filename": "src/Umbraco.Web/WebServices/SaveFileController.cs",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -26,6 +26,7 @@ namespace Umbraco.Web.WebServices\n     /// This isn't fully implemented yet but we should migrate all of the logic in the umbraco.presentation.webservices.codeEditorSave\r\n     /// over to this controller.\r\n     /// </remarks>\r\n+    [ValidateMvcAngularAntiForgeryToken]\r\n     public class SaveFileController : UmbracoAuthorizedController\r\n     {\r\n         /// <summary>\r"
        },
        {
          "filename": "src/Umbraco.Web/WebServices/XmlDataIntegrityController.cs",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -4,10 +4,11 @@\n using Umbraco.Core.Models.Rdbms;\n using Umbraco.Core.Persistence;\n using Umbraco.Web.WebApi;\n+using Umbraco.Web.WebApi.Filters;\n \n namespace Umbraco.Web.WebServices\n {\n-\n+    [ValidateAngularAntiForgeryToken]\n     public class XmlDataIntegrityController : UmbracoAuthorizedApiController\n     {\n         [HttpPost]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ff44cf3a14beef1c8e0a9dd130d8bf2b701af0f0",
            "date": "2025-01-22T08:16:40Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3eca03a7355694485559fd2b3ef0055760fbeb07",
            "date": "2025-01-21T20:00:37Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "5c0cdf5e58d57b717cf737a0ecd882fa3845b971",
            "date": "2025-01-21T06:30:07Z",
            "author_login": "matthewcare"
          },
          {
            "sha": "839b6816f2ae3e5f54459a0f09dad6b17e2d1e07",
            "date": "2025-01-20T13:54:14Z",
            "author_login": "ronaldbarendse"
          },
          {
            "sha": "72cae416531de0eefe2cb1476142c7b0bf0c5539",
            "date": "2025-01-20T10:47:52Z",
            "author_login": "AndyButland"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-352",
    "description": "Umbraco before 7.4.0 allows remote attackers to bypass anti-forgery security measures and conduct cross-site request forgery (CSRF) attacks as demonstrated by editing user account information in the templates.asmx.cs file.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-03-03T16:59:00.217",
    "last_modified": "2024-11-21T02:39:14.983",
    "fix_date": "2015-11-25T18:39:24Z"
  },
  "references": [
    {
      "url": "http://issues.umbraco.org/issue/U4-7459",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/02/16/10",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://github.com/umbraco/Umbraco-CMS/commit/18c3345e47663a358a042652e697b988d6a380eb",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://issues.umbraco.org/issue/U4-7459",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/02/16/10",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://github.com/umbraco/Umbraco-CMS/commit/18c3345e47663a358a042652e697b988d6a380eb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:52.246268",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "Umbraco-CMS",
    "owner": "umbraco",
    "created_at": "2013-06-10T13:50:46Z",
    "updated_at": "2025-01-26T03:49:45Z",
    "pushed_at": "2025-01-25T11:50:45Z",
    "size": 413099,
    "stars": 4680,
    "forks": 2734,
    "open_issues": 560,
    "watchers": 4680,
    "has_security_policy": false,
    "default_branch": "contrib",
    "protected_branches": [
      "contrib",
      "dev-v7-package-migrations",
      "dev-v8-umb-code-snippet",
      "main",
      "main-v6",
      "main-v7"
    ],
    "languages": {
      "C#": 19169132,
      "TypeScript": 11032237,
      "JavaScript": 100734,
      "HTML": 62911,
      "CSS": 19833,
      "MDX": 12163,
      "Dockerfile": 2714,
      "Shell": 1652,
      "TSQL": 159
    },
    "commit_activity": {
      "total_commits_last_year": 2945,
      "avg_commits_per_week": 56.63461538461539,
      "days_active_last_year": 247
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:45:06.808428"
  }
}