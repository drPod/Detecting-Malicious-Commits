{
  "cve_id": "CVE-2015-9252",
  "github_data": {
    "repository": "qpdf/qpdf",
    "fix_commit": "701b518d5c56a1449825a3a37a716c58e05e1c3e",
    "related_commits": [
      "701b518d5c56a1449825a3a37a716c58e05e1c3e",
      "701b518d5c56a1449825a3a37a716c58e05e1c3e"
    ],
    "patch_url": "https://github.com/qpdf/qpdf/commit/701b518d5c56a1449825a3a37a716c58e05e1c3e.patch",
    "fix_commit_details": {
      "sha": "701b518d5c56a1449825a3a37a716c58e05e1c3e",
      "commit_date": "2017-07-26T09:03:38Z",
      "author": {
        "login": "jberkenbilt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Detect recursion loops resolving objects (fixes #51)",
        "length": 331,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 50,
        "additions": 49,
        "deletions": 1
      },
      "files": [
        {
          "filename": "ChangeLog",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -1,5 +1,10 @@\n 2017-07-26  Jay Berkenbilt  <ejb@ql.org>\n \n+\t* Detect infinite loops while resolving objects. This could happen\n+\tif something inside an object that had to be resolved during\n+\tparsing, such as a stream length, recursively referenced the\n+\tobject being resolved.\n+\n \t* CVE-2017-9208: Handle references to and appearance of object 0\n \tas a special case. Object 0 is not allowed, and qpdf was using it\n \tinternally to represent direct objects."
        },
        {
          "filename": "include/qpdf/QPDF.hh",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -603,6 +603,25 @@ class QPDF\n         int gen;\n     };\n \n+    class ResolveRecorder\n+    {\n+      public:\n+        ResolveRecorder(QPDF* qpdf, QPDFObjGen const& og) :\n+            qpdf(qpdf),\n+            og(og)\n+        {\n+            qpdf->resolving.insert(og);\n+        }\n+        virtual ~ResolveRecorder()\n+        {\n+            this->qpdf->resolving.erase(og);\n+        }\n+      private:\n+        QPDF* qpdf;\n+        QPDFObjGen og;\n+    };\n+    friend class ResolveRecorder;\n+\n     void parse(char const* password);\n     void warn(QPDFExc const& e);\n     void setTrailer(QPDFObjectHandle obj);\n@@ -1065,6 +1084,7 @@ class QPDF\n     std::map<QPDFObjGen, QPDFXRefEntry> xref_table;\n     std::set<int> deleted_objects;\n     std::map<QPDFObjGen, ObjCache> obj_cache;\n+    std::set<QPDFObjGen> resolving;\n     QPDFObjectHandle trailer;\n     std::vector<QPDFObjectHandle> all_pages;\n     std::map<QPDFObjGen, int> pageobj_to_pages_pos;"
        },
        {
          "filename": "libqpdf/QPDF.cc",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -1471,6 +1471,21 @@ QPDF::resolve(int objid, int generation)\n     // to insert things into the object cache that don't actually\n     // exist in the file.\n     QPDFObjGen og(objid, generation);\n+    if (this->resolving.count(og))\n+    {\n+        // This can happen if an object references itself directly or\n+        // indirectly in some key that has to be resolved during\n+        // object parsing, such as stream length.\n+\tQTC::TC(\"qpdf\", \"QPDF recursion loop in resolve\");\n+\twarn(QPDFExc(qpdf_e_damaged_pdf, this->file->getName(),\n+\t\t     \"\", this->file->getLastOffset(),\n+\t\t     \"loop detected resolving object \" +\n+\t\t     QUtil::int_to_string(objid) + \" \" +\n+\t\t     QUtil::int_to_string(generation)));\n+        return new QPDF_Null;\n+    }\n+    ResolveRecorder rr(this, og);\n+\n     if (! this->obj_cache.count(og))\n     {\n \tif (! this->xref_table.count(og))"
        },
        {
          "filename": "qpdf/qpdf.testcov",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -276,3 +276,4 @@ qpdf-c called qpdf_set_deterministic_ID 0\n QPDFObjectHandle indirect with 0 objid 0\n QPDF object id 0 0\n QPDF caught recursive xref reconstruction 0\n+QPDF recursion loop in resolve 0"
        },
        {
          "filename": "qpdf/qtest/qpdf.test",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -206,7 +206,7 @@ $td->runtest(\"remove page we don't have\",\n show_ntests();\n # ----------\n $td->notify(\"--- Miscellaneous Tests ---\");\n-$n_tests += 81;\n+$n_tests += 82;\n \n $td->runtest(\"qpdf version\",\n \t     {$td->COMMAND => \"qpdf --version\"},\n@@ -220,6 +220,7 @@ $td->runtest(\"C API: qpdf version\",\n \n # Files to reproduce various bugs\n foreach my $d (\n+    [\"51\", \"resolve loop\"],\n     [\"99\", \"object 0\"],\n     [\"99b\", \"object 0\"],\n     [\"100\",\"xref reconstruction loop\"],"
        },
        {
          "filename": "qpdf/qtest/qpdf/issue-51.out",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+WARNING: issue-51.pdf: reported number of objects (0) inconsistent with actual number of objects (9)\n+WARNING: issue-51.pdf (object 7 0, file position 553): expected endobj\n+WARNING: issue-51.pdf (object 1 0, file position 359): expected endobj\n+WARNING: issue-51.pdf (file position 70): loop detected resolving object 2 0\n+WARNING: issue-51.pdf (object 2 0, file position 71): attempting to recover stream length\n+issue-51.pdf (object 2 0, file position 71): unable to recover stream data"
        },
        {
          "filename": "qpdf/qtest/qpdf/issue-51.pdf",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "531f6877a847fbfe7373f94b7652ea269a223a02",
            "date": "2025-01-05T22:08:40Z",
            "author_login": "jberkenbilt"
          },
          {
            "sha": "ef9616775e33ce8ba43fc441e15034b587ede16e",
            "date": "2024-12-13T13:09:38Z",
            "author_login": "jberkenbilt"
          },
          {
            "sha": "0e65d9c2461c3d583a48630f0c1901439bbb9bad",
            "date": "2024-12-13T12:52:43Z",
            "author_login": "jberkenbilt"
          },
          {
            "sha": "3ea83e9993801b002b4db8abaaa08dec31989ec7",
            "date": "2024-11-08T22:29:36Z",
            "author_login": "m-holger"
          },
          {
            "sha": "64e98397104f3fff759c27eb40092085e287755e",
            "date": "2024-11-08T12:44:36Z",
            "author_login": "m-holger"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-399",
    "description": "An issue was discovered in QPDF before 7.0.0. Endless recursion causes stack exhaustion in QPDFTokenizer::resolveLiteral() in QPDFTokenizer.cc, related to the QPDF::resolve function in QPDF.cc.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-02-13T19:29:00.197",
    "last_modified": "2024-11-21T02:40:09.323",
    "fix_date": "2017-07-26T09:03:38Z"
  },
  "references": [
    {
      "url": "https://github.com/qpdf/qpdf/commit/701b518d5c56a1449825a3a37a716c58e05e1c3e",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/qpdf/qpdf/issues/51",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/3638-1/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/qpdf/qpdf/commit/701b518d5c56a1449825a3a37a716c58e05e1c3e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/qpdf/qpdf/issues/51",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/3638-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:15.411911",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "qpdf",
    "owner": "qpdf",
    "created_at": "2012-06-03T17:40:19Z",
    "updated_at": "2025-01-11T04:14:35Z",
    "pushed_at": "2025-01-05T23:25:11Z",
    "size": 39286,
    "stars": 3636,
    "forks": 287,
    "open_issues": 141,
    "watchers": 3636,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "C++": 2455745,
      "Perl": 440367,
      "C": 218958,
      "Python": 57186,
      "Shell": 53174,
      "Roff": 46904,
      "CMake": 46886,
      "PostScript": 2997,
      "Emacs Lisp": 1236,
      "Dockerfile": 839,
      "Raku": 773,
      "Batchfile": 567,
      "CSS": 128
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:32:57.409259"
  }
}