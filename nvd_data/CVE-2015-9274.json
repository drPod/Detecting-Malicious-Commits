{
  "cve_id": "CVE-2015-9274",
  "github_data": {
    "repository": "harfbuzz/harfbuzz",
    "fix_commit": "c917965b9e6fe2b21ed6c51559673288fa3af4b7",
    "related_commits": [
      "c917965b9e6fe2b21ed6c51559673288fa3af4b7",
      "c917965b9e6fe2b21ed6c51559673288fa3af4b7"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "c917965b9e6fe2b21ed6c51559673288fa3af4b7",
      "commit_date": "2015-09-29T13:45:35Z",
      "author": {
        "login": "behdad",
        "type": "User",
        "stats": {
          "total_commits": 11996,
          "average_weekly_commits": 9.528196981731533,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 658
        }
      },
      "commit_message": {
        "title": "Add missing returns",
        "length": 120,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 34,
        "additions": 17,
        "deletions": 17
      },
      "files": [
        {
          "filename": "src/hb-ot-layout-gpos-table.hh",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -548,7 +548,7 @@ struct SinglePos\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     case 2: return TRACE_RETURN (c->dispatch (u.format2));\n@@ -843,7 +843,7 @@ struct PairPos\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     case 2: return TRACE_RETURN (c->dispatch (u.format2));\n@@ -1024,7 +1024,7 @@ struct CursivePos\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     default:return TRACE_RETURN (c->default_return_value ());\n@@ -1117,7 +1117,7 @@ struct MarkBasePos\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     default:return TRACE_RETURN (c->default_return_value ());\n@@ -1232,7 +1232,7 @@ struct MarkLigPos\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     default:return TRACE_RETURN (c->default_return_value ());\n@@ -1345,7 +1345,7 @@ struct MarkMarkPos\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     default:return TRACE_RETURN (c->default_return_value ());\n@@ -1397,7 +1397,7 @@ struct PosLookupSubTable\n   {\n     TRACE_DISPATCH (this, lookup_type);\n     /* The sub_format passed to may_dispatch is unnecessary but harmless. */\n-    if (unlikely (!c->may_dispatch (this, &u.sub_format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.sub_format))) return TRACE_RETURN (c->default_return_value ());\n     switch (lookup_type) {\n     case Single:\t\treturn TRACE_RETURN (u.single.dispatch (c));\n     case Pair:\t\t\treturn TRACE_RETURN (u.pair.dispatch (c));"
        },
        {
          "filename": "src/hb-ot-layout-gsub-table.hh",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -225,7 +225,7 @@ struct SingleSubst\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     case 2: return TRACE_RETURN (c->dispatch (u.format2));\n@@ -418,7 +418,7 @@ struct MultipleSubst\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     default:return TRACE_RETURN (c->default_return_value ());\n@@ -562,7 +562,7 @@ struct AlternateSubst\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     default:return TRACE_RETURN (c->default_return_value ());\n@@ -873,7 +873,7 @@ struct LigatureSubst\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     default:return TRACE_RETURN (c->default_return_value ());\n@@ -1030,7 +1030,7 @@ struct ReverseChainSingleSubst\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     default:return TRACE_RETURN (c->default_return_value ());\n@@ -1070,7 +1070,7 @@ struct SubstLookupSubTable\n   {\n     TRACE_DISPATCH (this, lookup_type);\n     /* The sub_format passed to may_dispatch is unnecessary but harmless. */\n-    if (unlikely (!c->may_dispatch (this, &u.sub_format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.sub_format))) return TRACE_RETURN (c->default_return_value ());\n     switch (lookup_type) {\n     case Single:\t\treturn TRACE_RETURN (u.single.dispatch (c));\n     case Multiple:\t\treturn TRACE_RETURN (u.multiple.dispatch (c));"
        },
        {
          "filename": "src/hb-ot-layout-gsubgpos-private.hh",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -1517,7 +1517,7 @@ struct Context\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     case 2: return TRACE_RETURN (c->dispatch (u.format2));\n@@ -2130,7 +2130,7 @@ struct ChainContext\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (c->dispatch (u.format1));\n     case 2: return TRACE_RETURN (c->dispatch (u.format2));\n@@ -2166,7 +2166,7 @@ struct ExtensionFormat1\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, format);\n-    if (unlikely (!c->may_dispatch (this, this))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, this))) return TRACE_RETURN (c->default_return_value ());\n     return TRACE_RETURN (get_subtable<typename T::LookupSubTable> ().dispatch (c, get_type ()));\n   }\n \n@@ -2211,7 +2211,7 @@ struct Extension\n   inline typename context_t::return_t dispatch (context_t *c) const\n   {\n     TRACE_DISPATCH (this, u.format);\n-    if (unlikely (!c->may_dispatch (this, &u.format))) TRACE_RETURN (c->default_return_value ());\n+    if (unlikely (!c->may_dispatch (this, &u.format))) return TRACE_RETURN (c->default_return_value ());\n     switch (u.format) {\n     case 1: return TRACE_RETURN (u.format1.dispatch (c));\n     default:return TRACE_RETURN (c->default_return_value ());"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9ef009f597d2d2b0c43a38cbe58485c85cb87f9f",
            "date": "2025-01-24T23:37:12Z",
            "author_login": "behdad"
          },
          {
            "sha": "6be66b0ef21890a700f264047709a48e14a4a7ee",
            "date": "2025-01-24T23:26:54Z",
            "author_login": "behdad"
          },
          {
            "sha": "4df11621cecf6cf855e9e13f6f5c9432748f9b3a",
            "date": "2025-01-24T12:00:05Z",
            "author_login": "behdad"
          },
          {
            "sha": "2fa9ccee61785603d05a5dff0c5e127f22d36803",
            "date": "2025-01-24T06:13:49Z",
            "author_login": "behdad"
          },
          {
            "sha": "2d2418ebacb36eeead50e26e8e4e94befde0ddb9",
            "date": "2025-01-24T06:13:11Z",
            "author_login": "behdad"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-125",
    "description": "HarfBuzz before 1.0.4 allows remote attackers to cause a denial of service (invalid read of two bytes and application crash) because of GPOS and GSUB table mishandling, related to hb-ot-layout-gpos-table.hh, hb-ot-layout-gsub-table.hh, and hb-ot-layout-gsubgpos-private.hh.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-11-15T06:29:00.230",
    "last_modified": "2024-11-21T02:40:13.607",
    "fix_date": "2015-09-29T13:45:35Z"
  },
  "references": [
    {
      "url": "https://github.com/harfbuzz/harfbuzz/commit/c917965b9e6fe2b21ed6c51559673288fa3af4b7",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/harfbuzz/harfbuzz/commit/c917965b9e6fe2b21ed6c51559673288fa3af4b7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:38.559747",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "harfbuzz",
    "owner": "harfbuzz",
    "created_at": "2012-07-14T19:50:26Z",
    "updated_at": "2025-01-25T15:20:06Z",
    "pushed_at": "2025-01-24T23:37:31Z",
    "size": 103609,
    "stars": 4284,
    "forks": 636,
    "open_issues": 108,
    "watchers": 4284,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "C++": 5201785,
      "C": 963095,
      "Python": 170943,
      "Meson": 77360,
      "CMake": 38748,
      "Ragel": 35478,
      "Rust": 15869,
      "Shell": 6447,
      "Makefile": 3727,
      "Roff": 3375
    },
    "commit_activity": {
      "total_commits_last_year": 574,
      "avg_commits_per_week": 11.038461538461538,
      "days_active_last_year": 171
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:08:35.750730"
  }
}