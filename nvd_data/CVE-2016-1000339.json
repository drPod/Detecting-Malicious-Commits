{
  "cve_id": "CVE-2016-1000339",
  "github_data": {
    "repository": "bcgit/bc-java",
    "fix_commit": "413b42f4d770456508585c830cfcde95f9b0e93b",
    "related_commits": [
      "413b42f4d770456508585c830cfcde95f9b0e93b",
      "8a73f08931450c17c749af067b6a8185abdfd2c0",
      "413b42f4d770456508585c830cfcde95f9b0e93b",
      "8a73f08931450c17c749af067b6a8185abdfd2c0"
    ],
    "patch_url": "https://github.com/bcgit/bc-java/commit/413b42f4d770456508585c830cfcde95f9b0e93b.patch",
    "fix_commit_details": {
      "sha": "413b42f4d770456508585c830cfcde95f9b0e93b",
      "commit_date": "2016-10-31T22:51:30Z",
      "author": {
        "login": "dghgit",
        "type": "User",
        "stats": {
          "total_commits": 5139,
          "average_weekly_commits": 8.235576923076923,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 467
        }
      },
      "commit_message": {
        "title": "added better support for DH domain parameters",
        "length": 111,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 424,
        "additions": 288,
        "deletions": 136
      },
      "files": [
        {
          "filename": "core/src/main/java/org/bouncycastle/crypto/engines/AESEngine.java",
          "status": "modified",
          "additions": 19,
          "deletions": 8,
          "patch": "@@ -5,6 +5,7 @@\n import org.bouncycastle.crypto.DataLengthException;\n import org.bouncycastle.crypto.OutputLengthException;\n import org.bouncycastle.crypto.params.KeyParameter;\n+import org.bouncycastle.util.Arrays;\n import org.bouncycastle.util.Pack;\n \n /**\n@@ -415,6 +416,8 @@ private int[][] generateWorkingKey(byte[] key, boolean forEncryption)\n     private int         C0, C1, C2, C3;\n     private boolean     forEncryption;\n \n+    private byte[]      s;\n+\n     private static final int BLOCK_SIZE = 16;\n \n     /**\n@@ -440,6 +443,14 @@ public void init(\n         {\n             WorkingKey = generateWorkingKey(((KeyParameter)params).getKey(), forEncryption);\n             this.forEncryption = forEncryption;\n+            if (forEncryption)\n+            {\n+                s = Arrays.clone(S);\n+            }\n+            else\n+            {\n+                s = Arrays.clone(Si);\n+            }\n             return;\n         }\n \n@@ -578,10 +589,10 @@ private void encryptBlock(int[][] KW)\n \n         // the final round's table is a simple function of S so we don't use a whole other four tables for it\n \n-        this.C0 = (S[r0&255]&255) ^ ((S[(r1>>8)&255]&255)<<8) ^ ((S[(r2>>16)&255]&255)<<16) ^ (S[(r3>>24)&255]<<24) ^ KW[r][0];\n-        this.C1 = (S[r1&255]&255) ^ ((S[(r2>>8)&255]&255)<<8) ^ ((S[(r3>>16)&255]&255)<<16) ^ (S[(r0>>24)&255]<<24) ^ KW[r][1];\n-        this.C2 = (S[r2&255]&255) ^ ((S[(r3>>8)&255]&255)<<8) ^ ((S[(r0>>16)&255]&255)<<16) ^ (S[(r1>>24)&255]<<24) ^ KW[r][2];\n-        this.C3 = (S[r3&255]&255) ^ ((S[(r0>>8)&255]&255)<<8) ^ ((S[(r1>>16)&255]&255)<<16) ^ (S[(r2>>24)&255]<<24) ^ KW[r][3];\n+        this.C0 = (S[r0&255]&255) ^ ((S[(r1>>8)&255]&255)<<8) ^ ((s[(r2>>16)&255]&255)<<16) ^ (s[(r3>>24)&255]<<24) ^ KW[r][0];\n+        this.C1 = (s[r1&255]&255) ^ ((S[(r2>>8)&255]&255)<<8) ^ ((S[(r3>>16)&255]&255)<<16) ^ (s[(r0>>24)&255]<<24) ^ KW[r][1];\n+        this.C2 = (s[r2&255]&255) ^ ((S[(r3>>8)&255]&255)<<8) ^ ((S[(r0>>16)&255]&255)<<16) ^ (S[(r1>>24)&255]<<24) ^ KW[r][2];\n+        this.C3 = (s[r3&255]&255) ^ ((s[(r0>>8)&255]&255)<<8) ^ ((s[(r1>>16)&255]&255)<<16) ^ (S[(r2>>24)&255]<<24) ^ KW[r][3];\n     }\n \n     private void decryptBlock(int[][] KW)\n@@ -610,9 +621,9 @@ private void decryptBlock(int[][] KW)\n         \n         // the final round's table is a simple function of Si so we don't use a whole other four tables for it\n \n-        this.C0 = (Si[r0&255]&255) ^ ((Si[(r3>>8)&255]&255)<<8) ^ ((Si[(r2>>16)&255]&255)<<16) ^ (Si[(r1>>24)&255]<<24) ^ KW[0][0];\n-        this.C1 = (Si[r1&255]&255) ^ ((Si[(r0>>8)&255]&255)<<8) ^ ((Si[(r3>>16)&255]&255)<<16) ^ (Si[(r2>>24)&255]<<24) ^ KW[0][1];\n-        this.C2 = (Si[r2&255]&255) ^ ((Si[(r1>>8)&255]&255)<<8) ^ ((Si[(r0>>16)&255]&255)<<16) ^ (Si[(r3>>24)&255]<<24) ^ KW[0][2];\n-        this.C3 = (Si[r3&255]&255) ^ ((Si[(r2>>8)&255]&255)<<8) ^ ((Si[(r1>>16)&255]&255)<<16) ^ (Si[(r0>>24)&255]<<24) ^ KW[0][3];\n+        this.C0 = (Si[r0&255]&255) ^ ((s[(r3>>8)&255]&255)<<8) ^ ((s[(r2>>16)&255]&255)<<16) ^ (Si[(r1>>24)&255]<<24) ^ KW[0][0];\n+        this.C1 = (s[r1&255]&255) ^ ((s[(r0>>8)&255]&255)<<8) ^ ((Si[(r3>>16)&255]&255)<<16) ^ (s[(r2>>24)&255]<<24) ^ KW[0][1];\n+        this.C2 = (s[r2&255]&255) ^ ((Si[(r1>>8)&255]&255)<<8) ^ ((Si[(r0>>16)&255]&255)<<16) ^ (s[(r3>>24)&255]<<24) ^ KW[0][2];\n+        this.C3 = (Si[r3&255]&255) ^ ((s[(r2>>8)&255]&255)<<8) ^ ((s[(r1>>16)&255]&255)<<16) ^ (s[(r0>>24)&255]<<24) ^ KW[0][3];\n     }\n }"
        },
        {
          "filename": "core/src/main/java/org/bouncycastle/crypto/params/DHPublicKeyParameters.java",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -26,6 +26,12 @@ private BigInteger validate(BigInteger y, DHParameters dhParams)\n             throw new NullPointerException(\"y value cannot be null\");\n         }\n \n+        // TLS check\n+        if (y.compareTo(TWO) < 0 || y.compareTo(dhParams.getP().subtract(TWO)) > 0)\n+        {\n+            throw new IllegalArgumentException(\"invalid DH public key\");\n+        }\n+\n         if (dhParams.getQ() != null)\n         {\n             if (ONE.equals(y.modPow(dhParams.getQ(), dhParams.getP())))\n@@ -37,12 +43,6 @@ private BigInteger validate(BigInteger y, DHParameters dhParams)\n         }\n         else\n         {\n-            // TLS check\n-            if (y.compareTo(TWO) < 0 || y.compareTo(dhParams.getP().subtract(TWO)) > 0)\n-            {\n-                throw new IllegalArgumentException(\"invalid DH public key\");\n-            }\n-\n             return y;         // we can't validate without Q.\n         }\n     }"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dh/BCDHPublicKey.java",
          "status": "modified",
          "additions": 24,
          "deletions": 1,
          "patch": "@@ -16,10 +16,12 @@\n import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;\n import org.bouncycastle.asn1.x509.AlgorithmIdentifier;\n import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;\n-import org.bouncycastle.asn1.x9.DHDomainParameters;\n import org.bouncycastle.asn1.x9.DomainParameters;\n+import org.bouncycastle.asn1.x9.ValidationParams;\n import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;\n+import org.bouncycastle.crypto.params.DHParameters;\n import org.bouncycastle.crypto.params.DHPublicKeyParameters;\n+import org.bouncycastle.crypto.params.DHValidationParameters;\n import org.bouncycastle.jcajce.provider.asymmetric.util.KeyUtil;\n \n public class BCDHPublicKey\n@@ -29,6 +31,7 @@ public class BCDHPublicKey\n     \n     private BigInteger              y;\n \n+    private transient DHPublicKeyParameters   dhPublicKey;\n     private transient DHParameterSpec         dhSpec;\n     private transient SubjectPublicKeyInfo    info;\n     \n@@ -37,20 +40,23 @@ public class BCDHPublicKey\n     {\n         this.y = spec.getY();\n         this.dhSpec = new DHParameterSpec(spec.getP(), spec.getG());\n+        this.dhPublicKey = new DHPublicKeyParameters(y, new DHParameters(spec.getP(), spec.getG()));\n     }\n \n     BCDHPublicKey(\n         DHPublicKey key)\n     {\n         this.y = key.getY();\n         this.dhSpec = key.getParams();\n+        this.dhPublicKey = new DHPublicKeyParameters(y, new DHParameters(dhSpec.getP(), dhSpec.getG()));\n     }\n \n     BCDHPublicKey(\n         DHPublicKeyParameters params)\n     {\n         this.y = params.getY();\n         this.dhSpec = new DHParameterSpec(params.getParameters().getP(), params.getParameters().getG(), params.getParameters().getL());\n+        this.dhPublicKey = params;\n     }\n \n     BCDHPublicKey(\n@@ -59,6 +65,7 @@ public class BCDHPublicKey\n     {\n         this.y = y;\n         this.dhSpec = dhSpec;\n+        this.dhPublicKey = new DHPublicKeyParameters(y, new DHParameters(dhSpec.getP(), dhSpec.getG()));\n     }\n \n     public BCDHPublicKey(\n@@ -94,12 +101,23 @@ public BCDHPublicKey(\n             {\n                 this.dhSpec = new DHParameterSpec(params.getP(), params.getG());\n             }\n+            this.dhPublicKey = new DHPublicKeyParameters(y, new DHParameters(dhSpec.getP(), dhSpec.getG()));\n         }\n         else if (id.equals(X9ObjectIdentifiers.dhpublicnumber))\n         {\n             DomainParameters params = DomainParameters.getInstance(seq);\n \n             this.dhSpec = new DHParameterSpec(params.getP(), params.getG());\n+            ValidationParams validationParams = params.getValidationParams();\n+            if (validationParams != null)\n+            {\n+                this.dhPublicKey = new DHPublicKeyParameters(y, new DHParameters(params.getP(), params.getG(), params.getQ(), params.getJ(),\n+                                            new DHValidationParameters(validationParams.getSeed(), validationParams.getPgenCounter().intValue())));\n+            }\n+            else\n+            {\n+                this.dhPublicKey = new DHPublicKeyParameters(y, new DHParameters(params.getP(), params.getG(), params.getQ(), params.getJ(), null));\n+            }\n         }\n         else\n         {\n@@ -137,6 +155,11 @@ public BigInteger getY()\n         return y;\n     }\n \n+    public DHPublicKeyParameters engineGetKeyParameters()\n+    {\n+        return dhPublicKey;\n+    }\n+\n     private boolean isPKCSParam(ASN1Sequence seq)\n     {\n         if (seq.size() == 2)"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dh/KeyFactorySpi.java",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -82,7 +82,14 @@ protected PublicKey engineGeneratePublic(\n     {\n         if (keySpec instanceof DHPublicKeySpec)\n         {\n-            return new BCDHPublicKey((DHPublicKeySpec)keySpec);\n+            try\n+            {\n+                return new BCDHPublicKey((DHPublicKeySpec)keySpec);\n+            }\n+            catch (IllegalArgumentException e)\n+            {\n+                throw new InvalidKeySpecException(e.getMessage(), e);\n+            }\n         }\n \n         return super.engineGeneratePublic(keySpec);"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/IESCipher.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -24,7 +24,7 @@\n import org.bouncycastle.crypto.KeyEncoder;\n import org.bouncycastle.crypto.agreement.ECDHBasicAgreement;\n import org.bouncycastle.crypto.digests.SHA1Digest;\n-import org.bouncycastle.crypto.engines.AESFastEngine;\n+import org.bouncycastle.crypto.engines.AESEngine;\n import org.bouncycastle.crypto.engines.DESedeEngine;\n import org.bouncycastle.crypto.engines.IESEngine;\n import org.bouncycastle.crypto.generators.ECKeyPairGenerator;\n@@ -538,7 +538,7 @@ static public class ECIESwithAESCBC\n     {\n         public ECIESwithAESCBC()\n         {\n-            super(new CBCBlockCipher(new AESFastEngine()), 16);\n+            super(new CBCBlockCipher(new AESEngine()), 16);\n         }\n     }\n }"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/util/DHUtil.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@\n import org.bouncycastle.crypto.params.DHParameters;\n import org.bouncycastle.crypto.params.DHPrivateKeyParameters;\n import org.bouncycastle.crypto.params.DHPublicKeyParameters;\n+import org.bouncycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey;\n \n /**\n  * utility class for converting jce/jca DH objects\n@@ -22,6 +23,10 @@ static public AsymmetricKeyParameter generatePublicKeyParameter(\n         PublicKey    key)\n         throws InvalidKeyException\n     {\n+        if (key instanceof BCDHPublicKey)\n+        {\n+            return ((BCDHPublicKey)key).engineGetKeyParameters();\n+        }\n         if (key instanceof DHPublicKey)\n         {\n             DHPublicKey    k = (DHPublicKey)key;"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/symmetric/AES.java",
          "status": "modified",
          "additions": 20,
          "deletions": 20,
          "patch": "@@ -20,7 +20,7 @@\n import org.bouncycastle.crypto.DataLengthException;\n import org.bouncycastle.crypto.InvalidCipherTextException;\n import org.bouncycastle.crypto.Mac;\n-import org.bouncycastle.crypto.engines.AESFastEngine;\n+import org.bouncycastle.crypto.engines.AESEngine;\n import org.bouncycastle.crypto.engines.AESWrapEngine;\n import org.bouncycastle.crypto.engines.RFC3211WrapEngine;\n import org.bouncycastle.crypto.engines.RFC5649WrapEngine;\n@@ -61,7 +61,7 @@ public ECB()\n             {\n                 public BlockCipher get()\n                 {\n-                    return new AESFastEngine();\n+                    return new AESEngine();\n                 }\n             });\n         }\n@@ -72,7 +72,7 @@ public static class CBC\n     {\n         public CBC()\n         {\n-            super(new CBCBlockCipher(new AESFastEngine()), 128);\n+            super(new CBCBlockCipher(new AESEngine()), 128);\n         }\n     }\n \n@@ -81,7 +81,7 @@ static public class CFB\n     {\n         public CFB()\n         {\n-            super(new BufferedBlockCipher(new CFBBlockCipher(new AESFastEngine(), 128)), 128);\n+            super(new BufferedBlockCipher(new CFBBlockCipher(new AESEngine(), 128)), 128);\n         }\n     }\n \n@@ -90,7 +90,7 @@ static public class OFB\n     {\n         public OFB()\n         {\n-            super(new BufferedBlockCipher(new OFBBlockCipher(new AESFastEngine(), 128)), 128);\n+            super(new BufferedBlockCipher(new OFBBlockCipher(new AESEngine(), 128)), 128);\n         }\n     }\n \n@@ -99,7 +99,7 @@ static public class GCM\n     {\n         public GCM()\n         {\n-            super(new GCMBlockCipher(new AESFastEngine()));\n+            super(new GCMBlockCipher(new AESEngine()));\n         }\n     }\n \n@@ -108,7 +108,7 @@ static public class CCM\n     {\n         public CCM()\n         {\n-            super(new CCMBlockCipher(new AESFastEngine()), false, 16);\n+            super(new CCMBlockCipher(new AESEngine()), false, 16);\n         }\n     }\n \n@@ -117,7 +117,7 @@ public static class AESCMAC\n     {\n         public AESCMAC()\n         {\n-            super(new CMac(new AESFastEngine()));\n+            super(new CMac(new AESEngine()));\n         }\n     }\n \n@@ -126,7 +126,7 @@ public static class AESGMAC\n     {\n         public AESGMAC()\n         {\n-            super(new GMac(new GCMBlockCipher(new AESFastEngine())));\n+            super(new GMac(new GCMBlockCipher(new AESEngine())));\n         }\n     }\n \n@@ -141,7 +141,7 @@ public AESCCMMAC()\n         private static class CCMMac\n             implements Mac\n         {\n-            private final CCMBlockCipher ccm = new CCMBlockCipher(new AESFastEngine());\n+            private final CCMBlockCipher ccm = new CCMBlockCipher(new AESEngine());\n \n             private int macLength = 8;\n \n@@ -200,7 +200,7 @@ public static class Poly1305\n     {\n         public Poly1305()\n         {\n-            super(new org.bouncycastle.crypto.macs.Poly1305(new AESFastEngine()));\n+            super(new org.bouncycastle.crypto.macs.Poly1305(new AESEngine()));\n         }\n     }\n \n@@ -227,7 +227,7 @@ public static class RFC3211Wrap\n     {\n         public RFC3211Wrap()\n         {\n-            super(new RFC3211WrapEngine(new AESFastEngine()), 16);\n+            super(new RFC3211WrapEngine(new AESEngine()), 16);\n         }\n     }\n \n@@ -236,7 +236,7 @@ public static class RFC5649Wrap\n     {\n         public RFC5649Wrap()\n         {\n-            super(new RFC5649WrapEngine(new AESFastEngine()));\n+            super(new RFC5649WrapEngine(new AESEngine()));\n         }\n     }\n \n@@ -248,7 +248,7 @@ static public class PBEWithAESCBC\n     {\n         public PBEWithAESCBC()\n         {\n-            super(new CBCBlockCipher(new AESFastEngine()));\n+            super(new CBCBlockCipher(new AESEngine()));\n         }\n     }\n \n@@ -260,7 +260,7 @@ static public class PBEWithSHA1AESCBC128\n     {\n         public PBEWithSHA1AESCBC128()\n         {\n-            super(new CBCBlockCipher(new AESFastEngine()), PKCS12, SHA1, 128, 16);\n+            super(new CBCBlockCipher(new AESEngine()), PKCS12, SHA1, 128, 16);\n         }\n     }\n \n@@ -269,7 +269,7 @@ static public class PBEWithSHA1AESCBC192\n     {\n         public PBEWithSHA1AESCBC192()\n         {\n-            super(new CBCBlockCipher(new AESFastEngine()), PKCS12, SHA1, 192, 16);\n+            super(new CBCBlockCipher(new AESEngine()), PKCS12, SHA1, 192, 16);\n         }\n     }\n \n@@ -278,7 +278,7 @@ static public class PBEWithSHA1AESCBC256\n     {\n         public PBEWithSHA1AESCBC256()\n         {\n-            super(new CBCBlockCipher(new AESFastEngine()), PKCS12, SHA1, 256, 16);\n+            super(new CBCBlockCipher(new AESEngine()), PKCS12, SHA1, 256, 16);\n         }\n     }\n \n@@ -290,7 +290,7 @@ static public class PBEWithSHA256AESCBC128\n     {\n         public PBEWithSHA256AESCBC128()\n         {\n-            super(new CBCBlockCipher(new AESFastEngine()), PKCS12, SHA256, 128, 16);\n+            super(new CBCBlockCipher(new AESEngine()), PKCS12, SHA256, 128, 16);\n         }\n     }\n \n@@ -299,7 +299,7 @@ static public class PBEWithSHA256AESCBC192\n     {\n         public PBEWithSHA256AESCBC192()\n         {\n-            super(new CBCBlockCipher(new AESFastEngine()), PKCS12, SHA256, 192, 16);\n+            super(new CBCBlockCipher(new AESEngine()), PKCS12, SHA256, 192, 16);\n         }\n     }\n \n@@ -308,7 +308,7 @@ static public class PBEWithSHA256AESCBC256\n     {\n         public PBEWithSHA256AESCBC256()\n         {\n-            super(new CBCBlockCipher(new AESFastEngine()), PKCS12, SHA256, 256, 16);\n+            super(new CBCBlockCipher(new AESEngine()), PKCS12, SHA256, 256, 16);\n         }\n     }\n "
        },
        {
          "filename": "prov/src/test/java/org/bouncycastle/jce/provider/test/DHTest.java",
          "status": "modified",
          "additions": 204,
          "deletions": 98,
          "patch": "@@ -7,10 +7,12 @@\n import java.math.BigInteger;\n import java.security.AlgorithmParameterGenerator;\n import java.security.AlgorithmParameters;\n+import java.security.GeneralSecurityException;\n import java.security.Key;\n import java.security.KeyFactory;\n import java.security.KeyPair;\n import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n import java.security.PublicKey;\n import java.security.SecureRandom;\n import java.security.Security;\n@@ -55,66 +57,66 @@ public class DHTest\n     private BigInteger g768 = new BigInteger(\"7c240073c1316c621df461b71ebb0cdcc90a6e5527e5e126633d131f87461c4dc4afc60c2cb0f053b6758871489a69613e2a8b4c8acde23954c08c81cbd36132cfd64d69e4ed9f8e51ed6e516297206672d5c0a69135df0a5dcf010d289a9ca1\", 16);\n     private BigInteger p768 = new BigInteger(\"8c9dd223debed1b80103b8b309715be009d48860ed5ae9b9d5d8159508efd802e3ad4501a7f7e1cfec78844489148cd72da24b21eddd01aa624291c48393e277cfc529e37075eccef957f3616f962d15b44aeab4039d01b817fde9eaa12fd73f\", 16);\n \n-    private BigInteger  g1024 = new BigInteger(\"1db17639cdf96bc4eabba19454f0b7e5bd4e14862889a725c96eb61048dcd676ceb303d586e30f060dbafd8a571a39c4d823982117da5cc4e0f89c77388b7a08896362429b94a18a327604eb7ff227bffbc83459ade299e57b5f77b50fb045250934938efa145511166e3197373e1b5b1e52de713eb49792bedde722c6717abf\", 16);\n-    private BigInteger  p1024 = new BigInteger(\"a00e283b3c624e5b2b4d9fbc2653b5185d99499b00fd1bf244c6f0bb817b4d1c451b2958d62a0f8a38caef059fb5ecd25d75ed9af403f5b5bdab97a642902f824e3c13789fed95fa106ddfe0ff4a707c85e2eb77d49e68f2808bcea18ce128b178cd287c6bc00efa9a1ad2a673fe0dceace53166f75b81d6709d5f8af7c66bb7\", 16);\n+    private BigInteger g1024 = new BigInteger(\"1db17639cdf96bc4eabba19454f0b7e5bd4e14862889a725c96eb61048dcd676ceb303d586e30f060dbafd8a571a39c4d823982117da5cc4e0f89c77388b7a08896362429b94a18a327604eb7ff227bffbc83459ade299e57b5f77b50fb045250934938efa145511166e3197373e1b5b1e52de713eb49792bedde722c6717abf\", 16);\n+    private BigInteger p1024 = new BigInteger(\"a00e283b3c624e5b2b4d9fbc2653b5185d99499b00fd1bf244c6f0bb817b4d1c451b2958d62a0f8a38caef059fb5ecd25d75ed9af403f5b5bdab97a642902f824e3c13789fed95fa106ddfe0ff4a707c85e2eb77d49e68f2808bcea18ce128b178cd287c6bc00efa9a1ad2a673fe0dceace53166f75b81d6709d5f8af7c66bb7\", 16);\n \n     // public key with mismatched oid/parameters\n     private byte[] oldPubEnc = Base64.decode(\n         \"MIIBnzCCARQGByqGSM4+AgEwggEHAoGBAPxSrN417g43VAM9sZRf1dt6AocAf7D6\" +\n-        \"WVCtqEDcBJrMzt63+g+BNJzhXVtbZ9kp9vw8L/0PHgzv0Ot/kOLX7Khn+JalOECW\" +\n-        \"YlkyBhmOVbjR79TY5u2GAlvG6pqpizieQNBCEMlUuYuK1Iwseil6VoRuA13Zm7uw\" +\n-        \"WO1eZmaJtY7LAoGAQaPRCFKM5rEdkMrV9FNzeSsYRs8m3DqPnnJHpuySpyO9wUcX\" +\n-        \"OOJcJY5qvHbDO5SxHXu/+bMgXmVT6dXI5o0UeYqJR7fj6pR4E6T0FwG55RFr5Ok4\" +\n-        \"3C4cpXmaOu176SyWuoDqGs1RDGmYQjwbZUi23DjaaTFUly9LCYXMliKrQfEDgYQA\" +\n-        \"AoGAQUGCBN4TaBw1BpdBXdTvTfCU69XDB3eyU2FOBE3UWhpx9D8XJlx4f5DpA4Y6\" +\n-        \"6sQMuCbhfmjEph8W7/sbMurM/awR+PSR8tTY7jeQV0OkmAYdGK2nzh0ZSifMO1oE\" +\n-        \"NNhN2O62TLs67msxT28S4/S89+LMtc98mevQ2SX+JF3wEVU=\");\n+            \"WVCtqEDcBJrMzt63+g+BNJzhXVtbZ9kp9vw8L/0PHgzv0Ot/kOLX7Khn+JalOECW\" +\n+            \"YlkyBhmOVbjR79TY5u2GAlvG6pqpizieQNBCEMlUuYuK1Iwseil6VoRuA13Zm7uw\" +\n+            \"WO1eZmaJtY7LAoGAQaPRCFKM5rEdkMrV9FNzeSsYRs8m3DqPnnJHpuySpyO9wUcX\" +\n+            \"OOJcJY5qvHbDO5SxHXu/+bMgXmVT6dXI5o0UeYqJR7fj6pR4E6T0FwG55RFr5Ok4\" +\n+            \"3C4cpXmaOu176SyWuoDqGs1RDGmYQjwbZUi23DjaaTFUly9LCYXMliKrQfEDgYQA\" +\n+            \"AoGAQUGCBN4TaBw1BpdBXdTvTfCU69XDB3eyU2FOBE3UWhpx9D8XJlx4f5DpA4Y6\" +\n+            \"6sQMuCbhfmjEph8W7/sbMurM/awR+PSR8tTY7jeQV0OkmAYdGK2nzh0ZSifMO1oE\" +\n+            \"NNhN2O62TLs67msxT28S4/S89+LMtc98mevQ2SX+JF3wEVU=\");\n \n     // bogus key with full PKCS parameter set\n     private byte[] oldFullParams = Base64.decode(\n         \"MIIBIzCCARgGByqGSM4+AgEwggELAoGBAP1/U4EddRIpUt9KnC7s5Of2EbdSPO9E\" +\n-        \"AMMeP4C2USZpRV1AIlH7WT2NWPq/xfW6MPbLm1Vs14E7gB00b/JmYLdrmVClpJ+f\" +\n-        \"6AR7ECLCT7up1/63xhv4O1fnxqimFQ8E+4P208UewwI1VBNaFpEy9nXzrith1yrv\" +\n-        \"8iIDGZ3RSAHHAoGBAPfhoIXWmz3ey7yrXDa4V7l5lK+7+jrqgvlXTAs9B4JnUVlX\" +\n-        \"jrrUWU/mcQcQgYC0SRZxI+hMKBYTt88JMozIpuE8FnqLVHyNKOCjrh4rs6Z1kW6j\" +\n-        \"fwv6ITVi8ftiegEkO8yk8b6oUZCJqIPf4VrlnwaSi2ZegHtVJWQBTDv+z0kqAgFk\" +\n-        \"AwUAAgIH0A==\");\n+            \"AMMeP4C2USZpRV1AIlH7WT2NWPq/xfW6MPbLm1Vs14E7gB00b/JmYLdrmVClpJ+f\" +\n+            \"6AR7ECLCT7up1/63xhv4O1fnxqimFQ8E+4P208UewwI1VBNaFpEy9nXzrith1yrv\" +\n+            \"8iIDGZ3RSAHHAoGBAPfhoIXWmz3ey7yrXDa4V7l5lK+7+jrqgvlXTAs9B4JnUVlX\" +\n+            \"jrrUWU/mcQcQgYC0SRZxI+hMKBYTt88JMozIpuE8FnqLVHyNKOCjrh4rs6Z1kW6j\" +\n+            \"fwv6ITVi8ftiegEkO8yk8b6oUZCJqIPf4VrlnwaSi2ZegHtVJWQBTDv+z0kqAgFk\" +\n+            \"AwUAAgIH0A==\");\n \n     private byte[] samplePubEnc = Base64.decode(\n-       \"MIIBpjCCARsGCSqGSIb3DQEDATCCAQwCgYEA/X9TgR11EilS30qcLuzk5/YRt1I8\" +\n-       \"70QAwx4/gLZRJmlFXUAiUftZPY1Y+r/F9bow9subVWzXgTuAHTRv8mZgt2uZUKWk\" +\n-       \"n5/oBHsQIsJPu6nX/rfGG/g7V+fGqKYVDwT7g/bTxR7DAjVUE1oWkTL2dfOuK2HX\" +\n-       \"Ku/yIgMZndFIAccCgYEA9+GghdabPd7LvKtcNrhXuXmUr7v6OuqC+VdMCz0HgmdR\" +\n-       \"WVeOutRZT+ZxBxCBgLRJFnEj6EwoFhO3zwkyjMim4TwWeotUfI0o4KOuHiuzpnWR\" +\n-       \"bqN/C/ohNWLx+2J6ASQ7zKTxvqhRkImog9/hWuWfBpKLZl6Ae1UlZAFMO/7PSSoC\" +\n-       \"AgIAA4GEAAKBgEIiqxoUW6E6GChoOgcfNbVFclW91ITf5MFSUGQwt2R0RHoOhxvO\" +\n-       \"lZhNs++d0VPATLAyXovjfgENT9SGCbuZttYcqqLdKTbMXBWPek+rfnAl9E4iEMED\" +\n-       \"IDd83FJTKs9hQcPAm7zmp0Xm1bGF9CbUFjP5G02265z7eBmHDaT0SNlB\");\n+        \"MIIBpjCCARsGCSqGSIb3DQEDATCCAQwCgYEA/X9TgR11EilS30qcLuzk5/YRt1I8\" +\n+            \"70QAwx4/gLZRJmlFXUAiUftZPY1Y+r/F9bow9subVWzXgTuAHTRv8mZgt2uZUKWk\" +\n+            \"n5/oBHsQIsJPu6nX/rfGG/g7V+fGqKYVDwT7g/bTxR7DAjVUE1oWkTL2dfOuK2HX\" +\n+            \"Ku/yIgMZndFIAccCgYEA9+GghdabPd7LvKtcNrhXuXmUr7v6OuqC+VdMCz0HgmdR\" +\n+            \"WVeOutRZT+ZxBxCBgLRJFnEj6EwoFhO3zwkyjMim4TwWeotUfI0o4KOuHiuzpnWR\" +\n+            \"bqN/C/ohNWLx+2J6ASQ7zKTxvqhRkImog9/hWuWfBpKLZl6Ae1UlZAFMO/7PSSoC\" +\n+            \"AgIAA4GEAAKBgEIiqxoUW6E6GChoOgcfNbVFclW91ITf5MFSUGQwt2R0RHoOhxvO\" +\n+            \"lZhNs++d0VPATLAyXovjfgENT9SGCbuZttYcqqLdKTbMXBWPek+rfnAl9E4iEMED\" +\n+            \"IDd83FJTKs9hQcPAm7zmp0Xm1bGF9CbUFjP5G02265z7eBmHDaT0SNlB\");\n \n     private byte[] samplePrivEnc = Base64.decode(\n-       \"MIIBZgIBADCCARsGCSqGSIb3DQEDATCCAQwCgYEA/X9TgR11EilS30qcLuzk5/YR\" +\n-       \"t1I870QAwx4/gLZRJmlFXUAiUftZPY1Y+r/F9bow9subVWzXgTuAHTRv8mZgt2uZ\" +\n-       \"UKWkn5/oBHsQIsJPu6nX/rfGG/g7V+fGqKYVDwT7g/bTxR7DAjVUE1oWkTL2dfOu\" +\n-       \"K2HXKu/yIgMZndFIAccCgYEA9+GghdabPd7LvKtcNrhXuXmUr7v6OuqC+VdMCz0H\" +\n-       \"gmdRWVeOutRZT+ZxBxCBgLRJFnEj6EwoFhO3zwkyjMim4TwWeotUfI0o4KOuHiuz\" +\n-       \"pnWRbqN/C/ohNWLx+2J6ASQ7zKTxvqhRkImog9/hWuWfBpKLZl6Ae1UlZAFMO/7P\" +\n-       \"SSoCAgIABEICQAZYXnBHazxXUUdFP4NIf2Ipu7du0suJPZQKKff81wymi2zfCfHh\" +\n-       \"uhe9gQ9xdm4GpzeNtrQ8/MzpTy+ZVrtd29Q=\");\n+        \"MIIBZgIBADCCARsGCSqGSIb3DQEDATCCAQwCgYEA/X9TgR11EilS30qcLuzk5/YR\" +\n+            \"t1I870QAwx4/gLZRJmlFXUAiUftZPY1Y+r/F9bow9subVWzXgTuAHTRv8mZgt2uZ\" +\n+            \"UKWkn5/oBHsQIsJPu6nX/rfGG/g7V+fGqKYVDwT7g/bTxR7DAjVUE1oWkTL2dfOu\" +\n+            \"K2HXKu/yIgMZndFIAccCgYEA9+GghdabPd7LvKtcNrhXuXmUr7v6OuqC+VdMCz0H\" +\n+            \"gmdRWVeOutRZT+ZxBxCBgLRJFnEj6EwoFhO3zwkyjMim4TwWeotUfI0o4KOuHiuz\" +\n+            \"pnWRbqN/C/ohNWLx+2J6ASQ7zKTxvqhRkImog9/hWuWfBpKLZl6Ae1UlZAFMO/7P\" +\n+            \"SSoCAgIABEICQAZYXnBHazxXUUdFP4NIf2Ipu7du0suJPZQKKff81wymi2zfCfHh\" +\n+            \"uhe9gQ9xdm4GpzeNtrQ8/MzpTy+ZVrtd29Q=\");\n \n     public String getName()\n     {\n         return \"DH\";\n     }\n \n     private void testGP(\n-        String      algName,\n-        int         size,\n-        int         privateValueSize,\n-        BigInteger  g,\n-        BigInteger  p)\n+        String algName,\n+        int size,\n+        int privateValueSize,\n+        BigInteger g,\n+        BigInteger p)\n         throws Exception\n     {\n-        DHParameterSpec             dhParams = new DHParameterSpec(p, g, privateValueSize);\n+        DHParameterSpec dhParams = new DHParameterSpec(p, g, privateValueSize);\n \n         KeyPairGenerator keyGen = KeyPairGenerator.getInstance(algName, \"BC\");\n \n@@ -127,11 +129,11 @@ private void testGP(\n         //\n         // public key encoding test\n         //\n-        byte[]              pubEnc = aKeyPair.getPublic().getEncoded();\n-        KeyFactory          keyFac = KeyFactory.getInstance(algName, \"BC\");\n-        X509EncodedKeySpec  pubX509 = new X509EncodedKeySpec(pubEnc);\n-        DHPublicKey         pubKey = (DHPublicKey)keyFac.generatePublic(pubX509);\n-        DHParameterSpec     spec = pubKey.getParams();\n+        byte[] pubEnc = aKeyPair.getPublic().getEncoded();\n+        KeyFactory keyFac = KeyFactory.getInstance(algName, \"BC\");\n+        X509EncodedKeySpec pubX509 = new X509EncodedKeySpec(pubEnc);\n+        DHPublicKey pubKey = (DHPublicKey)keyFac.generatePublic(pubX509);\n+        DHParameterSpec spec = pubKey.getParams();\n \n         if (!spec.getG().equals(dhParams.getG()) || !spec.getP().equals(dhParams.getP()))\n         {\n@@ -172,9 +174,9 @@ private void testGP(\n         //\n         // private key encoding test\n         //\n-        byte[]              privEnc = aKeyPair.getPrivate().getEncoded();\n+        byte[] privEnc = aKeyPair.getPrivate().getEncoded();\n         PKCS8EncodedKeySpec privPKCS8 = new PKCS8EncodedKeySpec(privEnc);\n-        DHPrivateKey        privKey = (DHPrivateKey)keyFac.generatePrivate(privPKCS8);\n+        DHPrivateKey privKey = (DHPrivateKey)keyFac.generatePrivate(privPKCS8);\n \n         spec = privKey.getParams();\n \n@@ -271,7 +273,7 @@ private void testGP(\n     }\n \n     private void testTwoParty(String algName, int size, int privateValueSize, KeyPairGenerator keyGen)\n-            throws Exception\n+        throws Exception\n     {\n         testTwoParty(algName, size, privateValueSize, keyGen.generateKeyPair(), keyGen.generateKeyPair());\n     }\n@@ -315,13 +317,13 @@ private byte[] testTwoParty(String algName, int size, int privateValueSize, KeyP\n     }\n \n     private void testExplicitWrapping(\n-        int         size,\n-        int         privateValueSize,\n-        BigInteger  g,\n-        BigInteger  p)\n+        int size,\n+        int privateValueSize,\n+        BigInteger g,\n+        BigInteger p)\n         throws Exception\n     {\n-        DHParameterSpec             dhParams = new DHParameterSpec(p, g, privateValueSize);\n+        DHParameterSpec dhParams = new DHParameterSpec(p, g, privateValueSize);\n \n         KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"DH\", \"BC\");\n \n@@ -357,7 +359,7 @@ private void testExplicitWrapping(\n \n         SecretKey k1 = aKeyAgree.generateSecret(PKCSObjectIdentifiers.id_alg_CMS3DESwrap.getId());\n         SecretKey k2 = bKeyAgree.generateSecret(PKCSObjectIdentifiers.id_alg_CMS3DESwrap.getId());\n-        \n+\n         // TODO Compare k1 and k2?\n     }\n \n@@ -389,7 +391,7 @@ private void checkKeySize(int privateValueSize, KeyPair aKeyPair)\n     }\n \n     private void testRandom(\n-        int         size)\n+        int size)\n         throws Exception\n     {\n         AlgorithmParameterGenerator a = AlgorithmParameterGenerator.getInstance(\"DH\", \"BC\");\n@@ -415,14 +417,14 @@ private void testRandom(\n     }\n \n     private void testDefault(\n-        int         privateValueSize,\n-        BigInteger  g,\n-        BigInteger  p)\n+        int privateValueSize,\n+        BigInteger g,\n+        BigInteger p)\n         throws Exception\n     {\n-        DHParameterSpec             dhParams = new DHParameterSpec(p, g, privateValueSize);\n-        String                      algName = \"DH\";\n-        int                         size = p.bitLength();\n+        DHParameterSpec dhParams = new DHParameterSpec(p, g, privateValueSize);\n+        String algName = \"DH\";\n+        int size = p.bitLength();\n \n         new BouncyCastleProvider().setParameter(ConfigurableProvider.DH_DEFAULT_PARAMS, dhParams);\n \n@@ -439,11 +441,11 @@ private void testDefault(\n         //\n         // public key encoding test\n         //\n-        byte[]              pubEnc = aKeyPair.getPublic().getEncoded();\n-        KeyFactory          keyFac = KeyFactory.getInstance(algName, \"BC\");\n-        X509EncodedKeySpec  pubX509 = new X509EncodedKeySpec(pubEnc);\n-        DHPublicKey         pubKey = (DHPublicKey)keyFac.generatePublic(pubX509);\n-        DHParameterSpec     spec = pubKey.getParams();\n+        byte[] pubEnc = aKeyPair.getPublic().getEncoded();\n+        KeyFactory keyFac = KeyFactory.getInstance(algName, \"BC\");\n+        X509EncodedKeySpec pubX509 = new X509EncodedKeySpec(pubEnc);\n+        DHPublicKey pubKey = (DHPublicKey)keyFac.generatePublic(pubX509);\n+        DHParameterSpec spec = pubKey.getParams();\n \n         if (!spec.getG().equals(dhParams.getG()) || !spec.getP().equals(dhParams.getP()))\n         {\n@@ -458,13 +460,13 @@ private void testDefault(\n         //\n         // public key serialisation test\n         //\n-        ByteArrayOutputStream   bOut = new ByteArrayOutputStream();\n-        ObjectOutputStream      oOut = new ObjectOutputStream(bOut);\n+        ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n+        ObjectOutputStream oOut = new ObjectOutputStream(bOut);\n \n         oOut.writeObject(aKeyPair.getPublic());\n \n-        ByteArrayInputStream   bIn = new ByteArrayInputStream(bOut.toByteArray());\n-        ObjectInputStream      oIn = new ObjectInputStream(bIn);\n+        ByteArrayInputStream bIn = new ByteArrayInputStream(bOut.toByteArray());\n+        ObjectInputStream oIn = new ObjectInputStream(bIn);\n \n         pubKey = (DHPublicKey)oIn.readObject();\n         spec = pubKey.getParams();\n@@ -482,9 +484,9 @@ private void testDefault(\n         //\n         // private key encoding test\n         //\n-        byte[]              privEnc = aKeyPair.getPrivate().getEncoded();\n+        byte[] privEnc = aKeyPair.getPrivate().getEncoded();\n         PKCS8EncodedKeySpec privPKCS8 = new PKCS8EncodedKeySpec(privEnc);\n-        DHPrivateKey        privKey = (DHPrivateKey)keyFac.generatePrivate(privPKCS8);\n+        DHPrivateKey privKey = (DHPrivateKey)keyFac.generatePrivate(privPKCS8);\n \n         spec = privKey.getParams();\n \n@@ -622,18 +624,18 @@ private void testECDH(String algorithm, String curveName, String cipher, int key\n     private void testECDH(String algorithm)\n         throws Exception\n     {\n-        KeyPairGenerator    g = KeyPairGenerator.getInstance(algorithm, \"BC\");\n+        KeyPairGenerator g = KeyPairGenerator.getInstance(algorithm, \"BC\");\n \n         EllipticCurve curve = new EllipticCurve(\n-                new ECFieldFp(new BigInteger(\"883423532389192164791648750360308885314476597252960362792450860609699839\")), // q\n-                new BigInteger(\"7fffffffffffffffffffffff7fffffffffff8000000000007ffffffffffc\", 16), // a\n-                new BigInteger(\"6b016c3bdcf18941d0d654921475ca71a9db2fb27d1d37796185c2942c0a\", 16)); // b\n+            new ECFieldFp(new BigInteger(\"883423532389192164791648750360308885314476597252960362792450860609699839\")), // q\n+            new BigInteger(\"7fffffffffffffffffffffff7fffffffffff8000000000007ffffffffffc\", 16), // a\n+            new BigInteger(\"6b016c3bdcf18941d0d654921475ca71a9db2fb27d1d37796185c2942c0a\", 16)); // b\n \n         ECParameterSpec ecSpec = new ECParameterSpec(\n-                curve,\n-                ECPointUtil.decodePoint(curve, Hex.decode(\"020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf\")), // G\n-                new BigInteger(\"883423532389192164791648750360308884807550341691627752275345424702807307\"), // n\n-                1); // h\n+            curve,\n+            ECPointUtil.decodePoint(curve, Hex.decode(\"020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf\")), // G\n+            new BigInteger(\"883423532389192164791648750360308884807550341691627752275345424702807307\"), // n\n+            1); // h\n \n         g.initialize(ecSpec, new SecureRandom());\n \n@@ -661,8 +663,8 @@ private void testECDH(String algorithm)\n         aKeyAgree.doPhase(bKeyPair.getPublic(), true);\n         bKeyAgree.doPhase(aKeyPair.getPublic(), true);\n \n-        BigInteger  k1 = new BigInteger(aKeyAgree.generateSecret());\n-        BigInteger  k2 = new BigInteger(bKeyAgree.generateSecret());\n+        BigInteger k1 = new BigInteger(aKeyAgree.generateSecret());\n+        BigInteger k2 = new BigInteger(bKeyAgree.generateSecret());\n \n         if (!k1.equals(k2))\n         {\n@@ -672,10 +674,10 @@ private void testECDH(String algorithm)\n         //\n         // public key encoding test\n         //\n-        byte[]              pubEnc = aKeyPair.getPublic().getEncoded();\n-        KeyFactory          keyFac = KeyFactory.getInstance(algorithm, \"BC\");\n-        X509EncodedKeySpec  pubX509 = new X509EncodedKeySpec(pubEnc);\n-        ECPublicKey         pubKey = (ECPublicKey)keyFac.generatePublic(pubX509);\n+        byte[] pubEnc = aKeyPair.getPublic().getEncoded();\n+        KeyFactory keyFac = KeyFactory.getInstance(algorithm, \"BC\");\n+        X509EncodedKeySpec pubX509 = new X509EncodedKeySpec(pubEnc);\n+        ECPublicKey pubKey = (ECPublicKey)keyFac.generatePublic(pubX509);\n \n         if (!pubKey.getW().equals(((ECPublicKey)aKeyPair.getPublic()).getW()))\n         {\n@@ -692,9 +694,9 @@ private void testECDH(String algorithm)\n         //\n         // private key encoding test\n         //\n-        byte[]              privEnc = aKeyPair.getPrivate().getEncoded();\n+        byte[] privEnc = aKeyPair.getPrivate().getEncoded();\n         PKCS8EncodedKeySpec privPKCS8 = new PKCS8EncodedKeySpec(privEnc);\n-        ECPrivateKey        privKey = (ECPrivateKey)keyFac.generatePrivate(privPKCS8);\n+        ECPrivateKey privKey = (ECPrivateKey)keyFac.generatePrivate(privPKCS8);\n \n         if (!privKey.getS().equals(((ECPrivateKey)aKeyPair.getPrivate()).getS()))\n         {\n@@ -756,7 +758,7 @@ private void testExceptions()\n     private void testDESAndDESede(BigInteger g, BigInteger p)\n         throws Exception\n     {\n-        DHParameterSpec             dhParams = new DHParameterSpec(p, g, 256);\n+        DHParameterSpec dhParams = new DHParameterSpec(p, g, 256);\n \n         KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"DH\", \"BC\");\n \n@@ -822,13 +824,13 @@ private void testSmallSecret()\n         DHPrivateKeySpec aPrivSpec = new DHPrivateKeySpec(\n             new BigInteger(\"30a6ea4e2240a42867ad98bd3adbfd5b81aba48bd930f20a595983d807566f7cba4e766951efef2c6c0c1be3823f63d66e12c2a091d5ff3bbeb1ea6e335d072d\", 16), p, g);\n         DHPublicKeySpec aPubSpec = new DHPublicKeySpec(\n-                    new BigInteger(\"694dfea1bfc8897e2fcbfd88033ab34f4581892d7d5cc362dc056e3d43955accda12222bd651ca31c85f008a05dea914de68828dfd83a54a340fa84f3bbe6caf\", 16), p, g);\n+            new BigInteger(\"694dfea1bfc8897e2fcbfd88033ab34f4581892d7d5cc362dc056e3d43955accda12222bd651ca31c85f008a05dea914de68828dfd83a54a340fa84f3bbe6caf\", 16), p, g);\n \n         DHPrivateKeySpec bPrivSpec = new DHPrivateKeySpec(\n-                    new BigInteger(\"775b1e7e162190700e2212dd8e4aaacf8a2af92c9c108b81d5bf9a14548f494eaa86a6c4844b9512eb3e3f2f22ffec44c795c813edfea13f075b99bbdebb34bd\", 16), p, g);\n+            new BigInteger(\"775b1e7e162190700e2212dd8e4aaacf8a2af92c9c108b81d5bf9a14548f494eaa86a6c4844b9512eb3e3f2f22ffec44c795c813edfea13f075b99bbdebb34bd\", 16), p, g);\n \n         DHPublicKeySpec bPubSpec = new DHPublicKeySpec(\n-                    new BigInteger(\"d8ddd4ff9246635eadbfa0bc2ef06d98a329b6e8cd2d1435d7b4921467570e697c9a9d3c172c684626a9d2b6b2fa0fc725d5b91f9a9625b717a4169bc714b064\", 16), p, g);\n+            new BigInteger(\"d8ddd4ff9246635eadbfa0bc2ef06d98a329b6e8cd2d1435d7b4921467570e697c9a9d3c172c684626a9d2b6b2fa0fc725d5b91f9a9625b717a4169bc714b064\", 16), p, g);\n \n         KeyFactory kFact = KeyFactory.getInstance(\"DH\", \"BC\");\n \n@@ -848,7 +850,7 @@ private void testSmallSecret()\n     private void testEnc()\n         throws Exception\n     {\n-        KeyFactory  kFact = KeyFactory.getInstance(\"DH\", \"BC\");\n+        KeyFactory kFact = KeyFactory.getInstance(\"DH\", \"BC\");\n \n         Key k = kFact.generatePrivate(new PKCS8EncodedKeySpec(samplePrivEnc));\n \n@@ -889,9 +891,9 @@ private void testConfig()\n             384);\n \n         DHParameterSpec dhSpec768 = new DHParameterSpec(\n-             new BigInteger(\"e9e642599d355f37c97ffd3567120b8e25c9cd43e927b3a9670fbec5d890141922d2c3b3ad2480093799869d1e846aab49fab0ad26d2ce6a22219d470bce7d777d4a21fbe9c270b57f607002f3cef8393694cf45ee3688c11a8c56ab127a3daf\", 16),\n-             new BigInteger(\"30470ad5a005fb14ce2d9dcd87e38bc7d1b1c5facbaecbe95f190aa7a31d23c4dbbcbe06174544401a5b2c020965d8c2bd2171d3668445771f74ba084d2029d83c1c158547f3a9f1a2715be23d51ae4d3e5a1f6a7064f316933a346d3f529252\", 16),\n-             384);\n+            new BigInteger(\"e9e642599d355f37c97ffd3567120b8e25c9cd43e927b3a9670fbec5d890141922d2c3b3ad2480093799869d1e846aab49fab0ad26d2ce6a22219d470bce7d777d4a21fbe9c270b57f607002f3cef8393694cf45ee3688c11a8c56ab127a3daf\", 16),\n+            new BigInteger(\"30470ad5a005fb14ce2d9dcd87e38bc7d1b1c5facbaecbe95f190aa7a31d23c4dbbcbe06174544401a5b2c020965d8c2bd2171d3668445771f74ba084d2029d83c1c158547f3a9f1a2715be23d51ae4d3e5a1f6a7064f316933a346d3f529252\", 16),\n+            384);\n \n         DHParameterSpec dhSpec1024 = new DHParameterSpec(\n             new BigInteger(\"fd7f53811d75122952df4a9c2eece4e7f611b7523cef4400c31e3f80b6512669455d402251fb593d8d58fabfc5f5ba30f6cb9b556cd7813b801d346ff26660b76b9950a5a49f9fe8047b1022c24fbba9d7feb7c61bf83b57e7c6a8a6150f04fb83f6d3c51ec3023554135a169132f675f3ae2b61d72aeff22203199dd14801c7\", 16),\n@@ -910,7 +912,7 @@ private void testConfig()\n             fail(\"config found when none expected\");\n         }\n \n-        prov.setParameter(ConfigurableProvider.DH_DEFAULT_PARAMS, new DHParameterSpec[] { dhSpec512, dhSpec768, dhSpec1024 });\n+        prov.setParameter(ConfigurableProvider.DH_DEFAULT_PARAMS, new DHParameterSpec[]{dhSpec512, dhSpec768, dhSpec1024});\n \n         if (!dhSpec512.equals(BouncyCastleProvider.CONFIGURATION.getDHDefaultParameters(512)))\n         {\n@@ -951,7 +953,7 @@ private void testConfig()\n             fail(\"config found when none expected\");\n         }\n \n-        prov.setParameter(ConfigurableProvider.THREAD_LOCAL_DH_DEFAULT_PARAMS, new DHParameterSpec[] { dhSpec512, dhSpec768, dhSpec1024 });\n+        prov.setParameter(ConfigurableProvider.THREAD_LOCAL_DH_DEFAULT_PARAMS, new DHParameterSpec[]{dhSpec512, dhSpec768, dhSpec1024});\n \n         if (!dhSpec512.equals(BouncyCastleProvider.CONFIGURATION.getDHDefaultParameters(512)))\n         {\n@@ -981,6 +983,109 @@ private void testConfig()\n         }\n     }\n \n+    static final String MESSAGE = \"Hello\";\n+\n+    static final String PROVIDER_NAME = \"BC\";\n+    static final SecureRandom rand = new SecureRandom();\n+\n+    public void setUp()\n+    {\n+        // Add BouncyCastle for testing.\n+        Security.insertProviderAt(new BouncyCastleProvider(), 1);\n+        System.out.println(\"WARNING: Using BouncyCastleProvider\");\n+    }\n+\n+    public DHParameterSpec ike2048()\n+    {\n+        final BigInteger p = new BigInteger(\n+            \"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74\"\n+                + \"020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f1437\"\n+                + \"4fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7ed\"\n+                + \"ee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf05\"\n+                + \"98da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb\"\n+                + \"9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3b\"\n+                + \"e39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf695581718\"\n+                + \"3995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\", 16);\n+        final BigInteger g = new BigInteger(\"2\");\n+        return new DHParameterSpec(p, g);\n+    }\n+\n+    /**\n+     * Tests whether a provider accepts invalid public keys that result in predictable shared secrets.\n+     * This test is based on RFC 2785, Section 4 and NIST SP 800-56A,\n+     * If an attacker can modify both public keys in an ephemeral-ephemeral key agreement scheme then\n+     * it may be possible to coerce both parties into computing the same predictable shared key.\n+     * <p/>\n+     * Note: the test is quite whimsical. If the prime p is not a safe prime then the provider itself\n+     * cannot prevent all small-subgroup attacks because of the missing parameter q in the\n+     * Diffie-Hellman parameters. Implementations must add additional countermeasures such as the ones\n+     * proposed in RFC 2785.\n+     */\n+    private void testSubgroupConfinement()\n+        throws Exception\n+    {\n+        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"DH\", \"BC\");\n+        DHParameterSpec params = ike2048();\n+        final BigInteger p = params.getP();\n+        final BigInteger g = params.getG();\n+        keyGen.initialize(params);\n+        PrivateKey priv = keyGen.generateKeyPair().getPrivate();\n+        KeyAgreement ka = KeyAgreement.getInstance(\"DH\", \"BC\");\n+        BigInteger[] weakPublicKeys = {\n+            BigInteger.ZERO, BigInteger.ONE, p.subtract(BigInteger.ONE), p,\n+            p.add(BigInteger.ONE), BigInteger.ONE.negate()};\n+        for (final BigInteger weakKey : weakPublicKeys)\n+        {\n+            DHPublicKeySpec weakSpec = new DHPublicKeySpec(weakKey, p, g);\n+            KeyFactory kf = KeyFactory.getInstance(\"DH\", \"BC\");\n+            try\n+            {\n+                kf.generatePublic(weakSpec);\n+                fail(\"Generated weak public key\");\n+            }\n+            catch (GeneralSecurityException ex)\n+            {\n+                isTrue(\"wrong message\", \"invalid DH public key\".equals(ex.getMessage()));\n+            }\n+            ka.init(priv);\n+            try\n+            {\n+                ka.doPhase(new DHPublicKey()\n+                {\n+                    public BigInteger getY()\n+                    {\n+                        return weakKey;\n+                    }\n+\n+                    public DHParameterSpec getParams()\n+                    {\n+                        return new DHParameterSpec(p, g);\n+                    }\n+\n+                    public String getAlgorithm()\n+                    {\n+                        return null;\n+                    }\n+\n+                    public String getFormat()\n+                    {\n+                        return null;\n+                    }\n+\n+                    public byte[] getEncoded()\n+                    {\n+                        return new byte[0];\n+                    }\n+                }, true);\n+                fail(\"Generated secrets with weak public key\");\n+            }\n+            catch (GeneralSecurityException ex)\n+            {\n+                isTrue(\"wrong message\", \"Invalid DH PublicKey\".equals(ex.getMessage()));\n+            }\n+        }\n+    }\n+\n     public void performTest()\n         throws Exception\n     {\n@@ -1014,10 +1119,11 @@ public void performTest()\n         testInitialise();\n         testSmallSecret();\n         testConfig();\n+        testSubgroupConfinement();\n     }\n \n     public static void main(\n-        String[]    args)\n+        String[] args)\n     {\n         Security.addProvider(new BouncyCastleProvider());\n "
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 7,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5ce0d4d4536bcb622c1077a6b9157b02ad8adcc5",
            "date": "2025-01-14T16:09:19Z",
            "author_login": "dghgit"
          },
          {
            "sha": "29f141ac3217f48db3a65920c4971ffaddeb4a72",
            "date": "2025-01-14T16:08:32Z",
            "author_login": "dghgit"
          },
          {
            "sha": "8a81f6cdd89b798ecfc132b37c15331e7c5df2b4",
            "date": "2025-01-14T15:01:54Z",
            "author_login": "dghgit"
          },
          {
            "sha": "c9d83fbadb9a1ce7c12dca99833c6b42de088697",
            "date": "2025-01-14T14:10:20Z",
            "author_login": "dghgit"
          },
          {
            "sha": "9a36e56b93e361dbc065f5bd920574f96f99102f",
            "date": "2025-01-14T14:10:04Z",
            "author_login": "dghgit"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-310",
    "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the primary engine class used for AES was AESFastEngine. Due to the highly table driven approach used in the algorithm it turns out that if the data channel on the CPU can be monitored the lookup table accesses are sufficient to leak information on the AES key being used. There was also a leak in AESEngine although it was substantially less. AESEngine has been modified to remove any signs of leakage (testing carried out on Intel X86-64) and is now the primary AES class for the BC JCE provider from 1.56. Use of AESFastEngine is now only recommended where otherwise deemed appropriate.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-06-04T13:29:00.233",
    "last_modified": "2024-11-21T02:43:02.630",
    "fix_date": "2016-10-31T22:51:30Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2669",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2927",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/413b42f4d770456508585c830cfcde95f9b0e93b#diff-54656f860db94b867ba7542430cd2ef0",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/8a73f08931450c17c749af067b6a8185abdfd2c0#diff-494fb066bed02aeb76b6c005632943f2",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2018/07/msg00009.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20181127-0004/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/3727-1/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuoct2020.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2669",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2927",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/413b42f4d770456508585c830cfcde95f9b0e93b#diff-54656f860db94b867ba7542430cd2ef0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/8a73f08931450c17c749af067b6a8185abdfd2c0#diff-494fb066bed02aeb76b6c005632943f2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2018/07/msg00009.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20181127-0004/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/3727-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuoct2020.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:25.878085",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bc-java",
    "owner": "bcgit",
    "created_at": "2013-06-01T02:38:42Z",
    "updated_at": "2025-01-13T21:13:46Z",
    "pushed_at": "2025-01-13T21:13:42Z",
    "size": 115936,
    "stars": 2364,
    "forks": 1146,
    "open_issues": 290,
    "watchers": 2364,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Java": 50883690,
      "Shell": 153252,
      "HTML": 81181,
      "Batchfile": 12956
    },
    "commit_activity": {
      "total_commits_last_year": 902,
      "avg_commits_per_week": 17.346153846153847,
      "days_active_last_year": 210
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:21:20.845974"
  }
}