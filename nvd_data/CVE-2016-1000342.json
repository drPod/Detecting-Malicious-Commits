{
  "cve_id": "CVE-2016-1000342",
  "github_data": {
    "repository": "bcgit/bc-java",
    "fix_commit": "843c2e60f67d71faf81d236f448ebbe56c62c647",
    "related_commits": [
      "843c2e60f67d71faf81d236f448ebbe56c62c647",
      "843c2e60f67d71faf81d236f448ebbe56c62c647"
    ],
    "patch_url": "https://github.com/bcgit/bc-java/commit/843c2e60f67d71faf81d236f448ebbe56c62c647.patch",
    "fix_commit_details": {
      "sha": "843c2e60f67d71faf81d236f448ebbe56c62c647",
      "commit_date": "2016-10-15T00:21:05Z",
      "author": {
        "login": "dghgit",
        "type": "User",
        "stats": {
          "total_commits": 5131,
          "average_weekly_commits": 8.22275641025641,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 467
        }
      },
      "commit_message": {
        "title": "Added header validation for INTEGER/ENUMERATED",
        "length": 108,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 365,
        "additions": 268,
        "deletions": 97
      },
      "files": [
        {
          "filename": "core/src/main/java/org/bouncycastle/asn1/ASN1Enumerated.java",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -99,6 +99,17 @@ public ASN1Enumerated(\n     public ASN1Enumerated(\n         byte[]   bytes)\n     {\n+        if (bytes.length > 1)\n+        {\n+            if (bytes[0] == 0 && (bytes[1] & 0x80) == 0)\n+            {\n+                throw new IllegalArgumentException(\"malformed enumerated\");\n+            }\n+            if (bytes[0] == (byte)0xff && (bytes[1] & 0x80) != 0)\n+            {\n+                throw new IllegalArgumentException(\"malformed enumerated\");\n+            }\n+        }\n         this.bytes = Arrays.clone(bytes);\n     }\n "
        },
        {
          "filename": "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -89,6 +89,17 @@ public ASN1Integer(\n \n     ASN1Integer(byte[] bytes, boolean clone)\n     {\n+        if (bytes.length > 1)\n+        {\n+            if (bytes[0] == 0 && (bytes[1] & 0x80) == 0)\n+            {\n+                throw new IllegalArgumentException(\"malformed integer\");\n+            }\n+            if (bytes[0] == (byte)0xff && (bytes[1] & 0x80) != 0)\n+            {\n+                throw new IllegalArgumentException(\"malformed integer\");\n+            }\n+        }\n         this.bytes = (clone) ? Arrays.clone(bytes) : bytes;\n     }\n "
        },
        {
          "filename": "core/src/test/java/org/bouncycastle/asn1/test/MiscTest.java",
          "status": "modified",
          "additions": 43,
          "deletions": 0,
          "patch": "@@ -5,7 +5,9 @@\n import java.io.IOException;\n \n import org.bouncycastle.asn1.ASN1Encodable;\n+import org.bouncycastle.asn1.ASN1Enumerated;\n import org.bouncycastle.asn1.ASN1InputStream;\n+import org.bouncycastle.asn1.ASN1Integer;\n import org.bouncycastle.asn1.ASN1OutputStream;\n import org.bouncycastle.asn1.ASN1Primitive;\n import org.bouncycastle.asn1.BERSequence;\n@@ -67,6 +69,46 @@ public void shouldFailOnExtraData()\n         }\n     }\n \n+    public void derIntegerTest()\n+        throws Exception\n+    {\n+        try\n+        {\n+            new ASN1Integer(new byte[] { 0, 0, 0, 1});\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            isTrue(\"wrong exc\", \"malformed integer\".equals(e.getMessage()));\n+        }\n+\n+        try\n+        {\n+            new ASN1Integer(new byte[] {(byte)0xff, (byte)0x80, 0, 1});\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            isTrue(\"wrong exc\", \"malformed integer\".equals(e.getMessage()));\n+        }\n+\n+        try\n+        {\n+            new ASN1Enumerated(new byte[] { 0, 0, 0, 1});\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            isTrue(\"wrong exc\", \"malformed enumerated\".equals(e.getMessage()));\n+        }\n+\n+        try\n+        {\n+            new ASN1Enumerated(new byte[] {(byte)0xff, (byte)0x80, 0, 1});\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            isTrue(\"wrong exc\", \"malformed enumerated\".equals(e.getMessage()));\n+        }\n+    }\n+\n     public void performTest()\n         throws Exception\n     {\n@@ -115,6 +157,7 @@ public void performTest()\n         }\n \n         shouldFailOnExtraData();\n+        derIntegerTest();\n     }\n \n     public String getName()"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -29,6 +29,7 @@\n import org.bouncycastle.crypto.digests.SHA512Digest;\n import org.bouncycastle.crypto.params.ParametersWithRandom;\n import org.bouncycastle.crypto.signers.HMacDSAKCalculator;\n+import org.bouncycastle.util.Arrays;\n \n public class DSASigner\n     extends SignatureSpi\n@@ -180,6 +181,10 @@ private BigInteger[] derDecode(\n         {\n             throw new IOException(\"malformed signature\");\n         }\n+        if (!Arrays.areEqual(encoding, s.getEncoded(ASN1Encoding.DER)))\n+        {\n+            throw new IOException(\"malformed signature\");\n+        }\n \n         return new BigInteger[]{\n             ((ASN1Integer)s.getObjectAt(0)).getValue(),"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/SignatureSpi.java",
          "status": "modified",
          "additions": 10,
          "deletions": 1,
          "patch": "@@ -23,14 +23,14 @@\n import org.bouncycastle.crypto.digests.SHA384Digest;\n import org.bouncycastle.crypto.digests.SHA3Digest;\n import org.bouncycastle.crypto.digests.SHA512Digest;\n-import org.bouncycastle.crypto.params.ECPublicKeyParameters;\n import org.bouncycastle.crypto.params.ParametersWithRandom;\n import org.bouncycastle.crypto.signers.ECDSASigner;\n import org.bouncycastle.crypto.signers.ECNRSigner;\n import org.bouncycastle.crypto.signers.HMacDSAKCalculator;\n import org.bouncycastle.jcajce.provider.asymmetric.util.DSABase;\n import org.bouncycastle.jcajce.provider.asymmetric.util.DSAEncoder;\n import org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil;\n+import org.bouncycastle.util.Arrays;\n \n public class SignatureSpi\n     extends DSABase\n@@ -367,6 +367,15 @@ public BigInteger[] decode(\n             throws IOException\n         {\n             ASN1Sequence s = (ASN1Sequence)ASN1Primitive.fromByteArray(encoding);\n+            if (s.size() != 2)\n+            {\n+                throw new IOException(\"malformed signature\");\n+            }\n+            if (!Arrays.areEqual(encoding, s.getEncoded(ASN1Encoding.DER)))\n+            {\n+                throw new IOException(\"malformed signature\");\n+            }\n+\n             BigInteger[] sig = new BigInteger[2];\n \n             sig[0] = ASN1Integer.getInstance(s.getObjectAt(0)).getValue();"
        },
        {
          "filename": "prov/src/test/java/org/bouncycastle/jce/provider/test/DSATest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -143,7 +143,8 @@ public class DSATest\n         + \"9ef41dd424a4e1c8f16967cf3365813fe8786236\",\n         \"303d021c1e41b479ad576905b960fe14eadb91b0ccf34843dab916173bb8c9cd021d00ade65988d237d30f9ef4\"\n         + \"1dd424a4e1c8f16967cf3365813fe87862360000\",\n-        \"3040021c57b10411b54ab248af03d8f2456676ebc6d3db5f1081492ac87e9ca8021d00942b117051d7d9d107fc42cac9c5a36a1fd7f0f8916ccca86cec4ed3040100\"\n+        \"3040021c57b10411b54ab248af03d8f2456676ebc6d3db5f1081492ac87e9ca8021d00942b117051d7d9d107fc42cac9c5a36a1fd7f0f8916ccca86cec4ed3040100\",\n+        \"303e021c57b10411b54ab248af03d8f2456676ebc6d3db5f1081492ac87e9ca802811d00942b117051d7d9d107fc42cac9c5a36a1fd7f0f8916ccca86cec4ed3\"\n     };\n \n     private void testModified()"
        },
        {
          "filename": "prov/src/test/java/org/bouncycastle/jce/provider/test/ECDSA5Test.java",
          "status": "modified",
          "additions": 186,
          "deletions": 95,
          "patch": "@@ -48,6 +48,7 @@\n import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;\n import org.bouncycastle.asn1.sec.SECObjectIdentifiers;\n import org.bouncycastle.asn1.teletrust.TeleTrusTObjectIdentifiers;\n+import org.bouncycastle.asn1.util.ASN1Dump;\n import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;\n import org.bouncycastle.asn1.x9.X962Parameters;\n import org.bouncycastle.asn1.x9.X9ECParameters;\n@@ -58,6 +59,7 @@\n import org.bouncycastle.jce.ECNamedCurveTable;\n import org.bouncycastle.jce.ECPointUtil;\n import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.jce.spec.ECNamedCurveParameterSpec;\n import org.bouncycastle.math.ec.ECCurve;\n import org.bouncycastle.util.Arrays;\n import org.bouncycastle.util.BigIntegers;\n@@ -73,15 +75,103 @@ public class ECDSA5Test\n     byte[] k1 = Hex.decode(\"d5014e4b60ef2ba8b6211b4062ba3224e0427dd3\");\n     byte[] k2 = Hex.decode(\"345e8d05c075c3a508df729a1685690e68fcfb8c8117847e89063bca1f85d968fd281540b6e13bd1af989a1fbf17e06462bf511f9d0b140fb48ac1b1baa5bded\");\n \n-    SecureRandom    random = new FixedSecureRandom(\n-        new FixedSecureRandom.Source[] { new FixedSecureRandom.Data(k1), new FixedSecureRandom.Data(k2) });\n-    \n+    SecureRandom random = new FixedSecureRandom(\n+        new FixedSecureRandom.Source[]{new FixedSecureRandom.Data(k1), new FixedSecureRandom.Data(k2)});\n+    static final BigInteger PubX =\n+        new BigInteger(\"3390396496586153202365024500890309020181905168626402195853036609\"\n+            + \"0984128098564\");\n+    static final BigInteger PubY =\n+        new BigInteger(\"1135421298983937257390683162600855221890652900790509030911087400\"\n+            + \"65052129055287\");\n+    static final String[] VALID_SIGNATURES = {\n+        \"3045022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d49\"\n+            + \"1b39fd2c3f0220747291dd2f3f44af7ace68ea33431d6f94e418c106a6e76285\"\n+            + \"cd59f43260ecce\",\n+    };\n+\n+    // The following test vectors check for signature malleability and bugs. That means the test\n+    // vectors are derived from a valid signature by modifying the ASN encoding. A correct\n+    // implementation of ECDSA should only accept correct DER encoding and properly handle the\n+    // others (e.g. integer overflow, infinity, redundant parameters, etc). Allowing alternative BER\n+    // encodings is in many cases benign. An example where this kind of signature malleability was a\n+    // problem: https://en.bitcoin.it/wiki/Transaction_Malleability\n+    static final String[] MODIFIED_SIGNATURES = {\n+        \"304602812100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f\"\n+            + \"3f44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce\",\n+        \"30470282002100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd\"\n+            + \"2f3f44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce\",\n+        \"304602220000b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f\"\n+            + \"3f44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce\",\n+        \"3046022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f028120747291dd2f\"\n+            + \"3f44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce\",\n+        \"3047022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f02820020747291dd\"\n+            + \"2f3f44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce\",\n+        \"3046022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f022100747291dd2f\"\n+            + \"3f44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce\",\n+        \"308145022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f\"\n+            + \"3f44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce\",\n+        \"30820045022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd\"\n+            + \"2f3f44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce\",\n+        \"3047022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f3f\"\n+            + \"44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce3000\",\n+        \"3047022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f3f\"\n+            + \"44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce1000\",\n+        \"3047022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f3f\"\n+            + \"44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce0000\",\n+        \"3045022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f3f\"\n+            + \"44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce0000\",\n+        \"3048022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f3f\"\n+            + \"44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce058100\",\n+        \"3049022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f3f\"\n+            + \"44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce05820000\",\n+        \"3047022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f3f\"\n+            + \"44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce1100\",\n+        \"3047022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f3f\"\n+            + \"44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce0500\",\n+        \"3047022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f3f\"\n+            + \"44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce2500\",\n+        \"3067022100b7babae9332b54b8a3a05b7004579821a887a1b21465f7db8a3d491b39fd2c3f0220747291dd2f3f\"\n+            + \"44af7ace68ea33431d6f94e418c106a6e76285cd59f43260ecce0220747291dd2f3f44af7ace68ea33431d6f\"\n+            + \"94e418c106a6e76285cd59f43260ecce\"\n+    };\n+\n+    private void testModified()\n+        throws Exception\n+    {\n+        ECNamedCurveParameterSpec namedCurve = ECNamedCurveTable.getParameterSpec(\"P-256\");\n+        org.bouncycastle.jce.spec.ECPublicKeySpec pubSpec = new org.bouncycastle.jce.spec.ECPublicKeySpec(namedCurve.getCurve().createPoint(PubX, PubY), namedCurve);\n+        KeyFactory kFact = KeyFactory.getInstance(\"EC\", \"BC\");\n+        PublicKey pubKey = kFact.generatePublic(pubSpec);\n+        Signature sig = Signature.getInstance(\"SHA256WithECDSA\", \"BC\");\n+\n+        for (int i = 0; i != MODIFIED_SIGNATURES.length; i++)\n+        {\n+            sig.initVerify(pubKey);\n+\n+            sig.update(Strings.toByteArray(\"Hello\"));\n+\n+            boolean failed;\n+\n+            try\n+            {\n+                failed = !sig.verify(Hex.decode(MODIFIED_SIGNATURES[i]));\n+                System.err.println(ASN1Dump.dumpAsString(ASN1Primitive.fromByteArray(Hex.decode(MODIFIED_SIGNATURES[i]))));\n+            }\n+            catch (SignatureException e)\n+            {\n+                failed = true;\n+            }\n+\n+            isTrue(\"sig verified when shouldn't: \" + i, failed);\n+        }\n+    }\n+\n     private void decodeTest()\n     {\n         EllipticCurve curve = new EllipticCurve(\n-                new ECFieldFp(new BigInteger(\"6277101735386680763835789423207666416083908700390324961279\")), // q\n-                new BigInteger(\"fffffffffffffffffffffffffffffffefffffffffffffffc\", 16), // a\n-                new BigInteger(\"64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1\", 16)); // b\n+            new ECFieldFp(new BigInteger(\"6277101735386680763835789423207666416083908700390324961279\")), // q\n+            new BigInteger(\"fffffffffffffffffffffffffffffffefffffffffffffffc\", 16), // a\n+            new BigInteger(\"64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1\", 16)); // b\n \n         ECPoint p = ECPointUtil.decodePoint(curve, Hex.decode(\"03188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012\"));\n \n@@ -109,7 +199,7 @@ private void testECDSA239bitPrime()\n \n         byte[] kData = BigIntegers.asUnsignedByteArray(new BigInteger(\"700000017569056646655505781757157107570501575775705779575555657156756655\"));\n \n-        SecureRandom    k = new TestRandomBigInteger(kData);\n+        SecureRandom k = new TestRandomBigInteger(kData);\n \n         EllipticCurve curve = new EllipticCurve(\n             new ECFieldFp(new BigInteger(\"883423532389192164791648750360308885314476597252960362792450860609699839\")), // q\n@@ -121,7 +211,7 @@ private void testECDSA239bitPrime()\n             ECPointUtil.decodePoint(curve, Hex.decode(\"020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf\")), // G\n             new BigInteger(\"883423532389192164791648750360308884807550341691627752275345424702807307\"), // n\n             1); // h\n-        \n+\n \n         ECPrivateKeySpec priKey = new ECPrivateKeySpec(\n             new BigInteger(\"876300101507107567501066130761671078357010671067781776716671676178726717\"), // d\n@@ -131,18 +221,18 @@ private void testECDSA239bitPrime()\n             ECPointUtil.decodePoint(curve, Hex.decode(\"025b6dc53bc61a2548ffb0f671472de6c9521a9d2d2534e65abfcbd5fe0c70\")), // Q\n             spec);\n \n-        Signature           sgr = Signature.getInstance(\"ECDSA\", \"BC\");\n-        KeyFactory          f = KeyFactory.getInstance(\"ECDSA\", \"BC\");\n-        PrivateKey          sKey = f.generatePrivate(priKey);\n-        PublicKey           vKey = f.generatePublic(pubKey);\n+        Signature sgr = Signature.getInstance(\"ECDSA\", \"BC\");\n+        KeyFactory f = KeyFactory.getInstance(\"ECDSA\", \"BC\");\n+        PrivateKey sKey = f.generatePrivate(priKey);\n+        PublicKey vKey = f.generatePublic(pubKey);\n \n         sgr.initSign(sKey, k);\n \n-        byte[] message = new byte[] { (byte)'a', (byte)'b', (byte)'c' };\n+        byte[] message = new byte[]{(byte)'a', (byte)'b', (byte)'c'};\n \n         sgr.update(message);\n \n-        byte[]  sigBytes = sgr.sign();\n+        byte[] sigBytes = sgr.sign();\n \n         sgr.initVerify(vKey);\n \n@@ -153,7 +243,7 @@ private void testECDSA239bitPrime()\n             fail(\"239 Bit EC verification failed\");\n         }\n \n-        BigInteger[]  sig = derDecode(sigBytes);\n+        BigInteger[] sig = derDecode(sigBytes);\n \n         if (!r.equals(sig[0]))\n         {\n@@ -181,21 +271,21 @@ private void testBSI()\n         KeyPair kp = kpGen.generateKeyPair();\n \n         byte[] data = \"Hello World!!!\".getBytes();\n-        String[] cvcAlgs = { \"SHA1WITHCVC-ECDSA\", \"SHA224WITHCVC-ECDSA\",\n-                             \"SHA256WITHCVC-ECDSA\", \"SHA384WITHCVC-ECDSA\",\n-                             \"SHA512WITHCVC-ECDSA\" };\n-        String[] cvcOids = { EACObjectIdentifiers.id_TA_ECDSA_SHA_1.getId(), EACObjectIdentifiers.id_TA_ECDSA_SHA_224.getId(),\n-                             EACObjectIdentifiers.id_TA_ECDSA_SHA_256.getId(), EACObjectIdentifiers.id_TA_ECDSA_SHA_384.getId(),\n-                             EACObjectIdentifiers.id_TA_ECDSA_SHA_512.getId() };\n+        String[] cvcAlgs = {\"SHA1WITHCVC-ECDSA\", \"SHA224WITHCVC-ECDSA\",\n+            \"SHA256WITHCVC-ECDSA\", \"SHA384WITHCVC-ECDSA\",\n+            \"SHA512WITHCVC-ECDSA\"};\n+        String[] cvcOids = {EACObjectIdentifiers.id_TA_ECDSA_SHA_1.getId(), EACObjectIdentifiers.id_TA_ECDSA_SHA_224.getId(),\n+            EACObjectIdentifiers.id_TA_ECDSA_SHA_256.getId(), EACObjectIdentifiers.id_TA_ECDSA_SHA_384.getId(),\n+            EACObjectIdentifiers.id_TA_ECDSA_SHA_512.getId()};\n \n         testBsiAlgorithms(kp, data, cvcAlgs, cvcOids);\n \n-        String[] plainAlgs = { \"SHA1WITHPLAIN-ECDSA\", \"SHA224WITHPLAIN-ECDSA\",\n-                             \"SHA256WITHPLAIN-ECDSA\", \"SHA384WITHPLAIN-ECDSA\",\n-                             \"SHA512WITHPLAIN-ECDSA\", \"RIPEMD160WITHPLAIN-ECDSA\" };\n-        String[] plainOids = { BSIObjectIdentifiers.ecdsa_plain_SHA1.getId(), BSIObjectIdentifiers.ecdsa_plain_SHA224.getId(),\n-                                BSIObjectIdentifiers.ecdsa_plain_SHA256.getId(), BSIObjectIdentifiers.ecdsa_plain_SHA384.getId(),\n-                                BSIObjectIdentifiers.ecdsa_plain_SHA512.getId(), BSIObjectIdentifiers.ecdsa_plain_RIPEMD160.getId() };\n+        String[] plainAlgs = {\"SHA1WITHPLAIN-ECDSA\", \"SHA224WITHPLAIN-ECDSA\",\n+            \"SHA256WITHPLAIN-ECDSA\", \"SHA384WITHPLAIN-ECDSA\",\n+            \"SHA512WITHPLAIN-ECDSA\", \"RIPEMD160WITHPLAIN-ECDSA\"};\n+        String[] plainOids = {BSIObjectIdentifiers.ecdsa_plain_SHA1.getId(), BSIObjectIdentifiers.ecdsa_plain_SHA224.getId(),\n+            BSIObjectIdentifiers.ecdsa_plain_SHA256.getId(), BSIObjectIdentifiers.ecdsa_plain_SHA384.getId(),\n+            BSIObjectIdentifiers.ecdsa_plain_SHA512.getId(), BSIObjectIdentifiers.ecdsa_plain_RIPEMD160.getId()};\n \n         testBsiAlgorithms(kp, data, plainAlgs, plainOids);\n     }\n@@ -235,42 +325,42 @@ private void testECDSA239bitBinary()\n     {\n         BigInteger r = new BigInteger(\"21596333210419611985018340039034612628818151486841789642455876922391552\");\n         BigInteger s = new BigInteger(\"197030374000731686738334997654997227052849804072198819102649413465737174\");\n-    \n+\n         byte[] kData = BigIntegers.asUnsignedByteArray(new BigInteger(\"171278725565216523967285789236956265265265235675811949404040041670216363\"));\n \n-        SecureRandom    k = new TestRandomBigInteger(kData);\n+        SecureRandom k = new TestRandomBigInteger(kData);\n \n         EllipticCurve curve = new EllipticCurve(\n             new ECFieldF2m(239, // m\n-                           new int[] { 36 }), // k\n+                new int[]{36}), // k\n             new BigInteger(\"32010857077C5431123A46B808906756F543423E8D27877578125778AC76\", 16), // a\n             new BigInteger(\"790408F2EEDAF392B012EDEFB3392F30F4327C0CA3F31FC383C422AA8C16\", 16)); // b\n-    \n+\n         ECParameterSpec params = new ECParameterSpec(\n             curve,\n             ECPointUtil.decodePoint(curve, Hex.decode(\"0457927098FA932E7C0A96D3FD5B706EF7E5F5C156E16B7E7C86038552E91D61D8EE5077C33FECF6F1A16B268DE469C3C7744EA9A971649FC7A9616305\")), // G\n             new BigInteger(\"220855883097298041197912187592864814557886993776713230936715041207411783\"), // n\n             4); // h\n-    \n+\n         ECPrivateKeySpec priKeySpec = new ECPrivateKeySpec(\n             new BigInteger(\"145642755521911534651321230007534120304391871461646461466464667494947990\"), // d\n             params);\n-        \n+\n         ECPublicKeySpec pubKeySpec = new ECPublicKeySpec(\n             ECPointUtil.decodePoint(curve, Hex.decode(\"045894609CCECF9A92533F630DE713A958E96C97CCB8F5ABB5A688A238DEED6DC2D9D0C94EBFB7D526BA6A61764175B99CB6011E2047F9F067293F57F5\")), // Q\n             params);\n-    \n-        Signature   sgr = Signature.getInstance(\"ECDSA\", \"BC\");\n-        KeyFactory  f = KeyFactory.getInstance(\"ECDSA\", \"BC\");\n-        PrivateKey  sKey = f.generatePrivate(priKeySpec);\n-        PublicKey   vKey = f.generatePublic(pubKeySpec);\n-        byte[]      message = new byte[] { (byte)'a', (byte)'b', (byte)'c' };\n-       \n+\n+        Signature sgr = Signature.getInstance(\"ECDSA\", \"BC\");\n+        KeyFactory f = KeyFactory.getInstance(\"ECDSA\", \"BC\");\n+        PrivateKey sKey = f.generatePrivate(priKeySpec);\n+        PublicKey vKey = f.generatePublic(pubKeySpec);\n+        byte[] message = new byte[]{(byte)'a', (byte)'b', (byte)'c'};\n+\n         sgr.initSign(sKey, k);\n \n         sgr.update(message);\n-        \n-        byte[]  sigBytes = sgr.sign();\n+\n+        byte[] sigBytes = sgr.sign();\n \n         sgr.initVerify(vKey);\n \n@@ -281,7 +371,7 @@ private void testECDSA239bitBinary()\n             fail(\"239 Bit EC verification failed\");\n         }\n \n-        BigInteger[]  sig = derDecode(sigBytes);\n+        BigInteger[] sig = derDecode(sigBytes);\n \n         if (!r.equals(sig[0]))\n         {\n@@ -297,14 +387,14 @@ private void testECDSA239bitBinary()\n                 + \" got      : \" + sig[1]);\n         }\n     }\n-    \n+\n     private void testGeneration()\n         throws Exception\n     {\n         //\n         // ECDSA generation test\n         //\n-        byte[]              data = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };\n+        byte[] data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 0};\n         Signature s = Signature.getInstance(\"ECDSA\", \"BC\");\n         KeyPairGenerator g = KeyPairGenerator.getInstance(\"ECDSA\", \"BC\");\n \n@@ -324,7 +414,7 @@ private void testGeneration()\n         KeyPair p = g.generateKeyPair();\n \n         PrivateKey sKey = p.getPrivate();\n-        PublicKey  vKey = p.getPublic();\n+        PublicKey vKey = p.getPublic();\n \n         s.initSign(sKey);\n \n@@ -378,8 +468,8 @@ private void testKeyFactory(ECPublicKey pub, ECPrivateKey priv)\n     {\n         KeyFactory ecFact = KeyFactory.getInstance(\"ECDSA\");\n \n-        ECPublicKeySpec  pubSpec = (ECPublicKeySpec)ecFact.getKeySpec(pub, ECPublicKeySpec.class);\n-        ECPrivateKeySpec  privSpec = (ECPrivateKeySpec)ecFact.getKeySpec(priv, ECPrivateKeySpec.class);\n+        ECPublicKeySpec pubSpec = (ECPublicKeySpec)ecFact.getKeySpec(pub, ECPublicKeySpec.class);\n+        ECPrivateKeySpec privSpec = (ECPrivateKeySpec)ecFact.getKeySpec(priv, ECPrivateKeySpec.class);\n \n         if (!pubSpec.getW().equals(pub.getW()) || !pubSpec.getParams().getCurve().equals(pub.getParams().getCurve()))\n         {\n@@ -391,8 +481,8 @@ private void testKeyFactory(ECPublicKey pub, ECPrivateKey priv)\n             fail(\"privSpec not correct\");\n         }\n \n-        ECPublicKey  pubKey = (ECPublicKey)ecFact.translateKey(pub);\n-        ECPrivateKey  privKey = (ECPrivateKey)ecFact.translateKey(priv);\n+        ECPublicKey pubKey = (ECPublicKey)ecFact.translateKey(pub);\n+        ECPrivateKey privKey = (ECPrivateKey)ecFact.translateKey(priv);\n \n         if (!pubKey.getW().equals(pub.getW()) || !pubKey.getParams().getCurve().equals(pub.getParams().getCurve()))\n         {\n@@ -454,7 +544,7 @@ private void testAdaptiveKeyConversion()\n         KeyPair pair = kpGen.generateKeyPair();\n \n         final PrivateKey privKey = pair.getPrivate();\n-        final PublicKey  pubKey = pair.getPublic();\n+        final PublicKey pubKey = pair.getPublic();\n \n         Signature s = Signature.getInstance(\"ECDSA\", \"BC\");\n \n@@ -669,7 +759,7 @@ public byte[] getEncoded()\n         pair = kpGen.generateKeyPair();\n \n         final PrivateKey privRsa = pair.getPrivate();\n-        final PublicKey  pubRsa = pair.getPublic();\n+        final PublicKey pubRsa = pair.getPublic();\n \n         try\n         {\n@@ -927,24 +1017,24 @@ private void testCustomNamedCurveSigning(String name)\n     }\n \n     /**\n-    COUNT = 1\n-    dsCAVS = 00000179557decd75b797bea9db656ce99c03a6e0ab13804b5b589644f7db41ceba05c3940c300361061074ca72a828428d9198267fa0b75e1e3e785a0ff20e839414be0\n-    QsCAVSx = 000001ce7da31681d5f176f3618f205969b9142520363dd26a596866c89988c932e3ce01904d12d1e9b105462e56163dbe7658ba3c472bf1f3c8165813295393ae346764\n-    QsCAVSy = 000000e70d6e55b76ebd362ff071ab819315593cec650276209a9fdc2c1c48e03c35945f04e74d958cabd3f5e4d1f096a991e807a8f9d217de306a6b561038ca15aea4b9\n-    NonceEphemCAVS = 4214a1a0a1d11679ae22f98d7ae483c1a74008a9cd7f7cf71b1f373a4226f5c58eb621ec56e2537797c01750dcbff07f613b9c58774f9af32aebeadd2226140dc7d56b1aa95c93ab1ec4412e2d0e42cdaac7bf9da3ddbf19fbb1edd0556d9c5a339808905fe8defd8b57ff8f34788192cc0cf7df17d1f351d69ac979a3a495931c287fb8\n-    dsIUT = 000000c14895dfcc5a6b24994828cfd0a0cc0a881a70173a3eb05c57b098046c8e60a868f6176284aa346eff1fd1b8b879052c5a6d5fd0ae146b35ed7ecee32e294103cd\n-    QsIUTx = 00000174a658695049db59f6bbe2ad23e1753bf58384a56fc9b3dec13eb873b33e1f4dbd24b6b4ca05a9a11ad531f6d99e9430a774980e8a8d9fd2d1e2a0d76fe3dd36c7\n-    QsIUTy = 00000030639849e1df341973db44e7bbba5bb597884a439f9ce54620c3ca73a9804cc26fcda3aaf73ae5a11d5b325cae0e95cfafe1985c6c2fdb892722e7dd2c5d744cf3\n-    deIUT = 00000138f54e986c7b44f49da389fa9f61bb7265f0cebdeddf09d47c72e55186e2520965fc2c31bb9c0a557e3c28e02a751f097e413c4252c7b0d22452d89f9ac314bc6e\n-    QeIUTx = 000001b9fbce9c9ebb31070a4a4ac7af54ec9189c1f98948cd24ca0a5029217e4784d3c8692da08a6a512d1c9875d20d8e03664c148fa5d34bbac6d42e499ee5dbf01120\n-    QeIUTy = 000000994a714b6d09afa896dbba9b4f436ab3cdb0d11dcd2aad28b7ba35d6fa6be537b6ffb0f9bf5fe1d594b8f8b8829687c9395c3d938c873f26c7100888c3aca2d59a\n-    OI = a1b2c3d4e54341565369646dbb63a273c81e0aad02f92699bf7baa28fd4509145b0096746894e98e209a85ecb415b8\n-    CAVSTag = 4ade5dc983cc1cf61c90fdbf726fa6a88e9bf411bbaf0015db06ff4348560e4d\n-    Z = 019a19a0a99f60221ee23323b3317292e8c10d57ba04e0b33f6241979ec3895945eed0bdcbc59ab576e7047061f0d63d1aaf78b1d442028605aa1c0f963a3bc9d61a\n-    MacData = 4b435f315f55a1b2c3d4e543415653696401b9fbce9c9ebb31070a4a4ac7af54ec9189c1f98948cd24ca0a5029217e4784d3c8692da08a6a512d1c9875d20d8e03664c148fa5d34bbac6d42e499ee5dbf0112000994a714b6d09afa896dbba9b4f436ab3cdb0d11dcd2aad28b7ba35d6fa6be537b6ffb0f9bf5fe1d594b8f8b8829687c9395c3d938c873f26c7100888c3aca2d59a4214a1a0a1d11679ae22f98d7ae483c1a74008a9cd7f7cf71b1f373a4226f5c58eb621ec56e2537797c01750dcbff07f613b9c58774f9af32aebeadd2226140dc7d56b1aa95c93ab1ec4412e2d0e42cdaac7bf9da3ddbf19fbb1edd0556d9c5a339808905fe8defd8b57ff8f34788192cc0cf7df17d1f351d69ac979a3a495931c287fb8\n-    DKM = 0744e1774149a8b8f88d3a1e20ac1517efd2f54ba4b5f178de99f33b68eea426\n-    Result = P (14 - DKM value should have leading 0 nibble )\n-    */\n+     * COUNT = 1\n+     * dsCAVS = 00000179557decd75b797bea9db656ce99c03a6e0ab13804b5b589644f7db41ceba05c3940c300361061074ca72a828428d9198267fa0b75e1e3e785a0ff20e839414be0\n+     * QsCAVSx = 000001ce7da31681d5f176f3618f205969b9142520363dd26a596866c89988c932e3ce01904d12d1e9b105462e56163dbe7658ba3c472bf1f3c8165813295393ae346764\n+     * QsCAVSy = 000000e70d6e55b76ebd362ff071ab819315593cec650276209a9fdc2c1c48e03c35945f04e74d958cabd3f5e4d1f096a991e807a8f9d217de306a6b561038ca15aea4b9\n+     * NonceEphemCAVS = 4214a1a0a1d11679ae22f98d7ae483c1a74008a9cd7f7cf71b1f373a4226f5c58eb621ec56e2537797c01750dcbff07f613b9c58774f9af32aebeadd2226140dc7d56b1aa95c93ab1ec4412e2d0e42cdaac7bf9da3ddbf19fbb1edd0556d9c5a339808905fe8defd8b57ff8f34788192cc0cf7df17d1f351d69ac979a3a495931c287fb8\n+     * dsIUT = 000000c14895dfcc5a6b24994828cfd0a0cc0a881a70173a3eb05c57b098046c8e60a868f6176284aa346eff1fd1b8b879052c5a6d5fd0ae146b35ed7ecee32e294103cd\n+     * QsIUTx = 00000174a658695049db59f6bbe2ad23e1753bf58384a56fc9b3dec13eb873b33e1f4dbd24b6b4ca05a9a11ad531f6d99e9430a774980e8a8d9fd2d1e2a0d76fe3dd36c7\n+     * QsIUTy = 00000030639849e1df341973db44e7bbba5bb597884a439f9ce54620c3ca73a9804cc26fcda3aaf73ae5a11d5b325cae0e95cfafe1985c6c2fdb892722e7dd2c5d744cf3\n+     * deIUT = 00000138f54e986c7b44f49da389fa9f61bb7265f0cebdeddf09d47c72e55186e2520965fc2c31bb9c0a557e3c28e02a751f097e413c4252c7b0d22452d89f9ac314bc6e\n+     * QeIUTx = 000001b9fbce9c9ebb31070a4a4ac7af54ec9189c1f98948cd24ca0a5029217e4784d3c8692da08a6a512d1c9875d20d8e03664c148fa5d34bbac6d42e499ee5dbf01120\n+     * QeIUTy = 000000994a714b6d09afa896dbba9b4f436ab3cdb0d11dcd2aad28b7ba35d6fa6be537b6ffb0f9bf5fe1d594b8f8b8829687c9395c3d938c873f26c7100888c3aca2d59a\n+     * OI = a1b2c3d4e54341565369646dbb63a273c81e0aad02f92699bf7baa28fd4509145b0096746894e98e209a85ecb415b8\n+     * CAVSTag = 4ade5dc983cc1cf61c90fdbf726fa6a88e9bf411bbaf0015db06ff4348560e4d\n+     * Z = 019a19a0a99f60221ee23323b3317292e8c10d57ba04e0b33f6241979ec3895945eed0bdcbc59ab576e7047061f0d63d1aaf78b1d442028605aa1c0f963a3bc9d61a\n+     * MacData = 4b435f315f55a1b2c3d4e543415653696401b9fbce9c9ebb31070a4a4ac7af54ec9189c1f98948cd24ca0a5029217e4784d3c8692da08a6a512d1c9875d20d8e03664c148fa5d34bbac6d42e499ee5dbf0112000994a714b6d09afa896dbba9b4f436ab3cdb0d11dcd2aad28b7ba35d6fa6be537b6ffb0f9bf5fe1d594b8f8b8829687c9395c3d938c873f26c7100888c3aca2d59a4214a1a0a1d11679ae22f98d7ae483c1a74008a9cd7f7cf71b1f373a4226f5c58eb621ec56e2537797c01750dcbff07f613b9c58774f9af32aebeadd2226140dc7d56b1aa95c93ab1ec4412e2d0e42cdaac7bf9da3ddbf19fbb1edd0556d9c5a339808905fe8defd8b57ff8f34788192cc0cf7df17d1f351d69ac979a3a495931c287fb8\n+     * DKM = 0744e1774149a8b8f88d3a1e20ac1517efd2f54ba4b5f178de99f33b68eea426\n+     * Result = P (14 - DKM value should have leading 0 nibble )\n+     */\n     public void testMQVwithHMACOnePass()\n         throws Exception\n     {\n@@ -956,17 +1046,17 @@ public void testMQVwithHMACOnePass()\n         KeyFactory keyFact = KeyFactory.getInstance(\"EC\", \"BC\");\n \n         ECPrivateKey dsCAVS = (ECPrivateKey)keyFact.generatePrivate(new ECPrivateKeySpec(new BigInteger(\"00000179557decd75b797bea9db656ce99c03a6e0ab13804b5b589644f7db41ceba05c3940c300361061074ca72a828428d9198267fa0b75e1e3e785a0ff20e839414be0\", 16), ecSpec));\n-        ECPublicKey  qsCAVS = (ECPublicKey)keyFact.generatePublic(new ECPublicKeySpec(new ECPoint(\n-                            new BigInteger(\"000001ce7da31681d5f176f3618f205969b9142520363dd26a596866c89988c932e3ce01904d12d1e9b105462e56163dbe7658ba3c472bf1f3c8165813295393ae346764\", 16),\n-                            new BigInteger(\"000000e70d6e55b76ebd362ff071ab819315593cec650276209a9fdc2c1c48e03c35945f04e74d958cabd3f5e4d1f096a991e807a8f9d217de306a6b561038ca15aea4b9\", 16)), ecSpec));\n+        ECPublicKey qsCAVS = (ECPublicKey)keyFact.generatePublic(new ECPublicKeySpec(new ECPoint(\n+            new BigInteger(\"000001ce7da31681d5f176f3618f205969b9142520363dd26a596866c89988c932e3ce01904d12d1e9b105462e56163dbe7658ba3c472bf1f3c8165813295393ae346764\", 16),\n+            new BigInteger(\"000000e70d6e55b76ebd362ff071ab819315593cec650276209a9fdc2c1c48e03c35945f04e74d958cabd3f5e4d1f096a991e807a8f9d217de306a6b561038ca15aea4b9\", 16)), ecSpec));\n \n         ECPrivateKey dsIUT = (ECPrivateKey)keyFact.generatePrivate(new ECPrivateKeySpec(new BigInteger(\"000000c14895dfcc5a6b24994828cfd0a0cc0a881a70173a3eb05c57b098046c8e60a868f6176284aa346eff1fd1b8b879052c5a6d5fd0ae146b35ed7ecee32e294103cd\", 16), ecSpec));\n-        ECPublicKey  qsIUT = (ECPublicKey)keyFact.generatePublic(new ECPublicKeySpec(new ECPoint(\n-                            new BigInteger(\"00000174a658695049db59f6bbe2ad23e1753bf58384a56fc9b3dec13eb873b33e1f4dbd24b6b4ca05a9a11ad531f6d99e9430a774980e8a8d9fd2d1e2a0d76fe3dd36c7\", 16),\n-                            new BigInteger(\"00000030639849e1df341973db44e7bbba5bb597884a439f9ce54620c3ca73a9804cc26fcda3aaf73ae5a11d5b325cae0e95cfafe1985c6c2fdb892722e7dd2c5d744cf3\", 16)), ecSpec));\n+        ECPublicKey qsIUT = (ECPublicKey)keyFact.generatePublic(new ECPublicKeySpec(new ECPoint(\n+            new BigInteger(\"00000174a658695049db59f6bbe2ad23e1753bf58384a56fc9b3dec13eb873b33e1f4dbd24b6b4ca05a9a11ad531f6d99e9430a774980e8a8d9fd2d1e2a0d76fe3dd36c7\", 16),\n+            new BigInteger(\"00000030639849e1df341973db44e7bbba5bb597884a439f9ce54620c3ca73a9804cc26fcda3aaf73ae5a11d5b325cae0e95cfafe1985c6c2fdb892722e7dd2c5d744cf3\", 16)), ecSpec));\n \n         ECPrivateKey deIUT = (ECPrivateKey)keyFact.generatePrivate(new ECPrivateKeySpec(new BigInteger(\"00000138f54e986c7b44f49da389fa9f61bb7265f0cebdeddf09d47c72e55186e2520965fc2c31bb9c0a557e3c28e02a751f097e413c4252c7b0d22452d89f9ac314bc6e\", 16), ecSpec));\n-        ECPublicKey  qeIUT = (ECPublicKey)keyFact.generatePublic(new ECPublicKeySpec(new ECPoint(\n+        ECPublicKey qeIUT = (ECPublicKey)keyFact.generatePublic(new ECPublicKeySpec(new ECPoint(\n             new BigInteger(\"000001b9fbce9c9ebb31070a4a4ac7af54ec9189c1f98948cd24ca0a5029217e4784d3c8692da08a6a512d1c9875d20d8e03664c148fa5d34bbac6d42e499ee5dbf01120\", 16),\n             new BigInteger(\"000000994a714b6d09afa896dbba9b4f436ab3cdb0d11dcd2aad28b7ba35d6fa6be537b6ffb0f9bf5fe1d594b8f8b8829687c9395c3d938c873f26c7100888c3aca2d59a\", 16)), ecSpec));\n \n@@ -999,14 +1089,14 @@ public void testMQVwithHMACOnePass()\n     }\n \n     protected BigInteger[] derDecode(\n-        byte[]  encoding)\n+        byte[] encoding)\n         throws IOException\n     {\n-        ByteArrayInputStream    bIn = new ByteArrayInputStream(encoding);\n-        ASN1InputStream         aIn = new ASN1InputStream(bIn);\n-        ASN1Sequence            s = (ASN1Sequence)aIn.readObject();\n+        ByteArrayInputStream bIn = new ByteArrayInputStream(encoding);\n+        ASN1InputStream aIn = new ASN1InputStream(bIn);\n+        ASN1Sequence s = (ASN1Sequence)aIn.readObject();\n \n-        BigInteger[]            sig = new BigInteger[2];\n+        BigInteger[] sig = new BigInteger[2];\n \n         sig[0] = ((ASN1Integer)s.getObjectAt(0)).getValue();\n         sig[1] = ((ASN1Integer)s.getObjectAt(1)).getValue();\n@@ -1022,22 +1112,23 @@ public String getName()\n     public void performTest()\n         throws Exception\n     {\n-        testKeyConversion();\n-        testAdaptiveKeyConversion();\n-        decodeTest();\n-        testECDSA239bitPrime();\n-        testECDSA239bitBinary();\n-        testGeneration();\n-        testKeyPairGenerationWithOIDs();\n-        testNamedCurveParameterPreservation();\n-        testNamedCurveSigning();\n-        testBSI();\n-        testMQVwithHMACOnePass();\n-        testAlgorithmParameters();\n+//        testKeyConversion();\n+//        testAdaptiveKeyConversion();\n+//        decodeTest();\n+//        testECDSA239bitPrime();\n+//        testECDSA239bitBinary();\n+//        testGeneration();\n+//        testKeyPairGenerationWithOIDs();\n+//        testNamedCurveParameterPreservation();\n+//        testNamedCurveSigning();\n+//        testBSI();\n+//        testMQVwithHMACOnePass();\n+//        testAlgorithmParameters();\n+        testModified();\n     }\n \n     public static void main(\n-        String[]    args)\n+        String[] args)\n     {\n         Security.addProvider(new BouncyCastleProvider());\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 5,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7cc8bf618fc7881f2566fc436d65da8fea688a32",
            "date": "2025-01-13T21:11:54Z",
            "author_login": "dghgit"
          },
          {
            "sha": "f31f690db47a4c1564fcce6219135a885d1c20dd",
            "date": "2025-01-13T21:08:51Z",
            "author_login": "dghgit"
          },
          {
            "sha": "daaf1f74f89747ef160ab1c75b9ece85aedc10c2",
            "date": "2025-01-13T18:51:23Z",
            "author_login": "dghgit"
          },
          {
            "sha": "7ca0f3017f42fbf204e55e526b0ab8369efcf167",
            "date": "2025-01-13T08:36:39Z",
            "author_login": "peterdettman"
          },
          {
            "sha": "fe144d15b6d43913fc37835728c34b72408245cb",
            "date": "2025-01-13T06:18:14Z",
            "author_login": "peterdettman"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-347",
    "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier ECDSA does not fully validate ASN.1 encoding of signature on verification. It is possible to inject extra elements in the sequence making up the signature and still have it validate, which in some cases may allow the introduction of 'invisible' data into a signed structure.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-06-04T13:29:00.387",
    "last_modified": "2024-11-21T02:43:03.110",
    "fix_date": "2016-10-15T00:21:05Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2669",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2927",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/843c2e60f67d71faf81d236f448ebbe56c62c647#diff-25c3c78db788365f36839b3f2d3016b9",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2018/07/msg00009.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20181127-0004/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/3727-1/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuoct2020.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2669",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2927",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/843c2e60f67d71faf81d236f448ebbe56c62c647#diff-25c3c78db788365f36839b3f2d3016b9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2018/07/msg00009.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20181127-0004/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/3727-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuoct2020.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:25.878588",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bc-java",
    "owner": "bcgit",
    "created_at": "2013-06-01T02:38:42Z",
    "updated_at": "2025-01-13T21:13:46Z",
    "pushed_at": "2025-01-13T21:13:42Z",
    "size": 115936,
    "stars": 2364,
    "forks": 1146,
    "open_issues": 290,
    "watchers": 2364,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Java": 50883690,
      "Shell": 153252,
      "HTML": 81181,
      "Batchfile": 12956
    },
    "commit_activity": {
      "total_commits_last_year": 902,
      "avg_commits_per_week": 17.346153846153847,
      "days_active_last_year": 210
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:21:20.845974"
  }
}