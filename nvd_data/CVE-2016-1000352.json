{
  "cve_id": "CVE-2016-1000352",
  "github_data": {
    "repository": "bcgit/bc-java",
    "fix_commit": "9385b0ebd277724b167fe1d1456e3c112112be1f",
    "related_commits": [
      "9385b0ebd277724b167fe1d1456e3c112112be1f",
      "9385b0ebd277724b167fe1d1456e3c112112be1f"
    ],
    "patch_url": "https://github.com/bcgit/bc-java/commit/9385b0ebd277724b167fe1d1456e3c112112be1f.patch",
    "fix_commit_details": {
      "sha": "9385b0ebd277724b167fe1d1456e3c112112be1f",
      "commit_date": "2016-08-27T01:41:27Z",
      "author": {
        "login": "dghgit",
        "type": "User",
        "stats": {
          "total_commits": 5139,
          "average_weekly_commits": 8.235576923076923,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 467
        }
      },
      "commit_message": {
        "title": "removed support for non-cbc mode ciphers in IES/ECIES",
        "length": 53,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 496,
        "additions": 214,
        "deletions": 282
      },
      "files": [
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/DH.java",
          "status": "modified",
          "additions": 6,
          "deletions": 11,
          "patch": "@@ -38,19 +38,14 @@ public void configure(ConfigurableProvider provider)\n             provider.addAlgorithm(\"AlgorithmParameterGenerator.DH\", PREFIX + \"AlgorithmParameterGeneratorSpi\");\n \n             provider.addAlgorithm(\"Cipher.IES\", PREFIX + \"IESCipher$IES\");\n-            provider.addAlgorithm(\"Cipher.IESwithAES\", PREFIX + \"IESCipher$IESwithAES\");\n-            provider.addAlgorithm(\"Cipher.IESWITHAES\", PREFIX + \"IESCipher$IESwithAES\");\n-            provider.addAlgorithm(\"Cipher.IESWITHDESEDE\", PREFIX + \"IESCipher$IESwithDESede\");\n+            provider.addAlgorithm(\"Cipher.IESwithAES-CBC\", PREFIX + \"IESCipher$IESwithAESCBC\");\n+            provider.addAlgorithm(\"Cipher.IESWITHAES-CBC\", PREFIX + \"IESCipher$IESwithAESCBC\");\n+            provider.addAlgorithm(\"Cipher.IESWITHDESEDE-CBC\", PREFIX + \"IESCipher$IESwithDESedeCBC\");\n \n             provider.addAlgorithm(\"Cipher.DHIES\", PREFIX + \"IESCipher$IES\");\n-            provider.addAlgorithm(\"Cipher.DHIESwithAES\", PREFIX + \"IESCipher$IESwithAES\");\n-            provider.addAlgorithm(\"Cipher.DHIESWITHAES\", PREFIX + \"IESCipher$IESwithAES\");\n-            provider.addAlgorithm(\"Cipher.DHIESWITHDESEDE\", PREFIX + \"IESCipher$IESwithDESede\");\n-\n-            provider.addAlgorithm(\"Cipher.OLDDHIES\", PREFIX + \"IESCipher$OldIES\");\n-            provider.addAlgorithm(\"Cipher.OLDDHIESwithAES\", PREFIX + \"IESCipher$OldIESwithAES\");\n-            provider.addAlgorithm(\"Cipher.OLDDHIESWITHAES\", PREFIX + \"IESCipher$OldIESwithAES\");\n-            provider.addAlgorithm(\"Cipher.OLDDHIESWITHDESEDE\", PREFIX + \"IESCipher$OldIESwithDESede\");\n+            provider.addAlgorithm(\"Cipher.DHIESwithAES-CBC\", PREFIX + \"IESCipher$IESwithAESCBC\");\n+            provider.addAlgorithm(\"Cipher.DHIESWITHAES-CBC\", PREFIX + \"IESCipher$IESwithAESCBC\");\n+            provider.addAlgorithm(\"Cipher.DHIESWITHDESEDE-CBC\", PREFIX + \"IESCipher$IESwithDESedeCBC\");\n \n             registerOid(provider, PKCSObjectIdentifiers.dhKeyAgreement, \"DH\", new KeyFactorySpi());\n             registerOid(provider, X9ObjectIdentifiers.dhpublicnumber, \"DH\", new KeyFactorySpi());"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/EC.java",
          "status": "modified",
          "additions": 1,
          "deletions": 14,
          "patch": "@@ -134,25 +134,12 @@ public void configure(ConfigurableProvider provider)\n             provider.addAlgorithm(\"KeyPairGenerator.ECIES\", PREFIX + \"KeyPairGeneratorSpi$ECDH\");\n \n             provider.addAlgorithm(\"Cipher.ECIES\", PREFIX + \"IESCipher$ECIES\");\n-            provider.addAlgorithm(\"Cipher.ECIESwithAES\", PREFIX + \"IESCipher$ECIESwithAES\");\n-            provider.addAlgorithm(\"Cipher.ECIESWITHAES\", PREFIX + \"IESCipher$ECIESwithAES\");\n-            provider.addAlgorithm(\"Cipher.ECIESwithDESEDE\", PREFIX + \"IESCipher$ECIESwithDESede\");\n-            provider.addAlgorithm(\"Cipher.ECIESWITHDESEDE\", PREFIX + \"IESCipher$ECIESwithDESede\");\n+\n             provider.addAlgorithm(\"Cipher.ECIESwithAES-CBC\", PREFIX + \"IESCipher$ECIESwithAESCBC\");\n             provider.addAlgorithm(\"Cipher.ECIESWITHAES-CBC\", PREFIX + \"IESCipher$ECIESwithAESCBC\");\n             provider.addAlgorithm(\"Cipher.ECIESwithDESEDE-CBC\", PREFIX + \"IESCipher$ECIESwithDESedeCBC\");\n             provider.addAlgorithm(\"Cipher.ECIESWITHDESEDE-CBC\", PREFIX + \"IESCipher$ECIESwithDESedeCBC\");\n \n-            provider.addAlgorithm(\"Cipher.OldECIES\", PREFIX + \"IESCipher$OldECIES\");\n-            provider.addAlgorithm(\"Cipher.OldECIESwithAES\", PREFIX + \"IESCipher$OldECIESwithAES\");\n-            provider.addAlgorithm(\"Cipher.OldECIESWITHAES\", PREFIX + \"IESCipher$OldECIESwithAES\");\n-            provider.addAlgorithm(\"Cipher.OldECIESwithDESEDE\", PREFIX + \"IESCipher$OldECIESwithDESede\");\n-            provider.addAlgorithm(\"Cipher.OldECIESWITHDESEDE\", PREFIX + \"IESCipher$OldECIESwithDESede\");\n-            provider.addAlgorithm(\"Cipher.OldECIESwithAES-CBC\", PREFIX + \"IESCipher$OldECIESwithAESCBC\");\n-            provider.addAlgorithm(\"Cipher.OldECIESWITHAES-CBC\", PREFIX + \"IESCipher$OldECIESwithAESCBC\");\n-            provider.addAlgorithm(\"Cipher.OldECIESwithDESEDE-CBC\", PREFIX + \"IESCipher$OldECIESwithDESedeCBC\");\n-            provider.addAlgorithm(\"Cipher.OldECIESWITHDESEDE-CBC\", PREFIX + \"IESCipher$OldECIESwithDESedeCBC\");\n-\n             provider.addAlgorithm(\"Signature.ECDSA\", PREFIX + \"SignatureSpi$ecDSA\");\n             provider.addAlgorithm(\"Signature.NONEwithECDSA\", PREFIX + \"SignatureSpi$ecDSAnone\");\n "
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dh/IESCipher.java",
          "status": "modified",
          "additions": 39,
          "deletions": 58,
          "patch": "@@ -21,27 +21,27 @@\n import javax.crypto.interfaces.DHPrivateKey;\n import javax.crypto.interfaces.DHPublicKey;\n \n-import org.bouncycastle.crypto.BlockCipher;\n+import org.bouncycastle.crypto.CipherParameters;\n import org.bouncycastle.crypto.InvalidCipherTextException;\n import org.bouncycastle.crypto.KeyEncoder;\n import org.bouncycastle.crypto.agreement.DHBasicAgreement;\n import org.bouncycastle.crypto.digests.SHA1Digest;\n-import org.bouncycastle.crypto.engines.AESEngine;\n+import org.bouncycastle.crypto.engines.AESFastEngine;\n import org.bouncycastle.crypto.engines.DESedeEngine;\n import org.bouncycastle.crypto.engines.IESEngine;\n-import org.bouncycastle.crypto.engines.OldIESEngine;\n import org.bouncycastle.crypto.generators.DHKeyPairGenerator;\n import org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator;\n import org.bouncycastle.crypto.generators.KDF2BytesGenerator;\n import org.bouncycastle.crypto.macs.HMac;\n+import org.bouncycastle.crypto.modes.CBCBlockCipher;\n import org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;\n import org.bouncycastle.crypto.params.AsymmetricKeyParameter;\n import org.bouncycastle.crypto.params.DHKeyGenerationParameters;\n import org.bouncycastle.crypto.params.DHKeyParameters;\n import org.bouncycastle.crypto.params.DHParameters;\n import org.bouncycastle.crypto.params.DHPublicKeyParameters;\n-import org.bouncycastle.crypto.params.IESParameters;\n import org.bouncycastle.crypto.params.IESWithCipherParameters;\n+import org.bouncycastle.crypto.params.ParametersWithIV;\n import org.bouncycastle.crypto.parsers.DHIESPublicKeyParser;\n import org.bouncycastle.jcajce.provider.asymmetric.util.DHUtil;\n import org.bouncycastle.jcajce.provider.asymmetric.util.IESUtil;\n@@ -57,6 +57,7 @@ public class IESCipher\n     extends CipherSpi\n {\n     private final JcaJceHelper helper = new BCJcaJceHelper();\n+    private final int ivLength;\n \n     private IESEngine engine;\n     private int state = -1;\n@@ -71,11 +72,13 @@ public class IESCipher\n     public IESCipher(IESEngine engine)\n     {\n         this.engine = engine;\n+        this.ivLength = 0;\n     }\n \n-    public IESCipher(OldIESEngine engine)\n+    public IESCipher(IESEngine engine, int ivLength)\n     {\n         this.engine = engine;\n+        this.ivLength = ivLength;\n     }\n \n     public int engineGetBlockSize()\n@@ -106,6 +109,10 @@ public int engineGetKeySize(Key key)\n \n     public byte[] engineGetIV()\n     {\n+        if (engineSpec != null)\n+        {\n+            return engineSpec.getNonce();\n+        }\n         return null;\n     }\n \n@@ -257,7 +264,13 @@ public void engineInit(\n         // Use default parameters (including cipher key size) if none are specified\n         if (engineSpec == null)\n         {\n-            this.engineSpec = IESUtil.guessParameterSpec(engine.getCipher());\n+            byte[] nonce = null;\n+            if (ivLength != 0 && opmode == Cipher.ENCRYPT_MODE)\n+            {\n+                nonce = new byte[ivLength];\n+                random.nextBytes(nonce);\n+            }\n+            this.engineSpec = IESUtil.guessParameterSpec(engine.getCipher(), nonce);\n         }\n         else if (engineSpec instanceof IESParameterSpec)\n         {\n@@ -268,6 +281,13 @@ else if (engineSpec instanceof IESParameterSpec)\n             throw new InvalidAlgorithmParameterException(\"must be passed IES parameters\");\n         }\n \n+        byte[] nonce = this.engineSpec.getNonce();\n+\n+        if (ivLength != 0 && (nonce == null || nonce.length != ivLength))\n+        {\n+            throw new InvalidAlgorithmParameterException(\"NONCE in IES Parameters needs to be \" + ivLength + \" bytes long\");\n+        }\n+\n         // Parse the recipient's key\n         if (opmode == Cipher.ENCRYPT_MODE || opmode == Cipher.WRAP_MODE)\n         {\n@@ -329,7 +349,7 @@ public void engineInit(\n         }\n         catch (InvalidAlgorithmParameterException e)\n         {\n-            throw new IllegalArgumentException(\"can't handle supplied parameter spec\");\n+            throw new IllegalArgumentException(\"cannot handle supplied parameter spec: \" + e.getMessage());\n         }\n \n     }\n@@ -376,11 +396,16 @@ public byte[] engineDoFinal(\n         buffer.reset();\n \n         // Convert parameters for use in IESEngine\n-        IESParameters params = new IESWithCipherParameters(engineSpec.getDerivationV(),\n+        CipherParameters params = new IESWithCipherParameters(engineSpec.getDerivationV(),\n             engineSpec.getEncodingV(),\n             engineSpec.getMacKeySize(),\n             engineSpec.getCipherKeySize());\n \n+        if (engineSpec.getNonce() != null)\n+        {\n+            params = new ParametersWithIV(params, engineSpec.getNonce());\n+        }\n+\n         DHParameters dhParams = ((DHKeyParameters)key).getParameters();\n \n         byte[] V;\n@@ -494,71 +519,27 @@ public IES()\n         }\n     }\n \n-    static public class IESwithDESede\n+    static public class IESwithDESedeCBC\n         extends IESCipher\n     {\n-        public IESwithDESede()\n+        public IESwithDESedeCBC()\n         {\n             super(new IESEngine(new DHBasicAgreement(),\n                 new KDF2BytesGenerator(new SHA1Digest()),\n                 new HMac(new SHA1Digest()),\n-                new PaddedBufferedBlockCipher(new DESedeEngine())));\n+                new PaddedBufferedBlockCipher(new CBCBlockCipher(new DESedeEngine()))), 8);\n         }\n     }\n \n-    static public class IESwithAES\n+    static public class IESwithAESCBC\n         extends IESCipher\n     {\n-        public IESwithAES()\n+        public IESwithAESCBC()\n         {\n             super(new IESEngine(new DHBasicAgreement(),\n                 new KDF2BytesGenerator(new SHA1Digest()),\n                 new HMac(new SHA1Digest()),\n-                new PaddedBufferedBlockCipher(new AESEngine())));\n-        }\n-    }\n-\n-    /**\n-     * Backwards compatibility.\n-     */\n-    static public class OldIESwithCipher\n-        extends IESCipher\n-    {\n-        public OldIESwithCipher(BlockCipher baseCipher)\n-        {\n-            super(new OldIESEngine(new DHBasicAgreement(),\n-                new KDF2BytesGenerator(new SHA1Digest()),\n-                new HMac(new SHA1Digest()),\n-                new PaddedBufferedBlockCipher(baseCipher)));\n-        }\n-    }\n-\n-    static public class OldIES\n-        extends IESCipher\n-    {\n-        public OldIES()\n-        {\n-            super(new OldIESEngine(new DHBasicAgreement(),\n-                new KDF2BytesGenerator(new SHA1Digest()),\n-                new HMac(new SHA1Digest())));\n-        }\n-    }\n-\n-    static public class OldIESwithDESede\n-        extends OldIESwithCipher\n-    {\n-        public OldIESwithDESede()\n-        {\n-            super(new DESedeEngine());\n-        }\n-    }\n-\n-    static public class OldIESwithAES\n-        extends OldIESwithCipher\n-    {\n-        public OldIESwithAES()\n-        {\n-            super(new AESEngine());\n+                new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()))), 16);\n         }\n     }\n }"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/IESCipher.java",
          "status": "modified",
          "additions": 16,
          "deletions": 110,
          "patch": "@@ -24,10 +24,9 @@\n import org.bouncycastle.crypto.KeyEncoder;\n import org.bouncycastle.crypto.agreement.ECDHBasicAgreement;\n import org.bouncycastle.crypto.digests.SHA1Digest;\n-import org.bouncycastle.crypto.engines.AESEngine;\n+import org.bouncycastle.crypto.engines.AESFastEngine;\n import org.bouncycastle.crypto.engines.DESedeEngine;\n import org.bouncycastle.crypto.engines.IESEngine;\n-import org.bouncycastle.crypto.engines.OldIESEngine;\n import org.bouncycastle.crypto.generators.ECKeyPairGenerator;\n import org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator;\n import org.bouncycastle.crypto.generators.KDF2BytesGenerator;\n@@ -108,6 +107,10 @@ public int engineGetKeySize(Key key)\n \n     public byte[] engineGetIV()\n     {\n+        if (engineSpec != null)\n+        {\n+            return engineSpec.getNonce();\n+        }\n         return null;\n     }\n \n@@ -264,7 +267,13 @@ public void engineInit(\n         // Use default parameters (including cipher key size) if none are specified\n         if (engineSpec == null)\n         {\n-            this.engineSpec = IESUtil.guessParameterSpec(engine.getCipher());\n+            byte[] nonce = null;\n+            if (ivLength != 0 && opmode == Cipher.ENCRYPT_MODE)\n+            {\n+                nonce = new byte[ivLength];\n+                random.nextBytes(nonce);\n+            }\n+            this.engineSpec = IESUtil.guessParameterSpec(engine.getCipher(), nonce);\n         }\n         else if (engineSpec instanceof IESParameterSpec)\n         {\n@@ -277,16 +286,9 @@ else if (engineSpec instanceof IESParameterSpec)\n \n         byte[] nonce = this.engineSpec.getNonce();\n \n-        if (nonce != null)\n+        if (ivLength != 0 && (nonce == null || nonce.length != ivLength))\n         {\n-            if (ivLength == 0)\n-            {\n-                throw new InvalidAlgorithmParameterException(\"NONCE present in IES Parameters when none required\");\n-            }\n-            else if (nonce.length != ivLength)\n-            {\n-                throw new InvalidAlgorithmParameterException(\"NONCE in IES Parameters needs to be \" + ivLength + \" bytes long\");\n-            }\n+            throw new InvalidAlgorithmParameterException(\"NONCE in IES Parameters needs to be \" + ivLength + \" bytes long\");\n         }\n \n         // Parse the recipient's key\n@@ -351,7 +353,7 @@ public void engineInit(\n         }\n         catch (InvalidAlgorithmParameterException e)\n         {\n-            throw new IllegalArgumentException(\"can't handle supplied parameter spec\");\n+            throw new IllegalArgumentException(\"cannot handle supplied parameter spec: \" + e.getMessage());\n         }\n \n     }\n@@ -513,14 +515,6 @@ public ECIES()\n     static public class ECIESwithCipher\n         extends IESCipher\n     {\n-        public ECIESwithCipher(BlockCipher cipher)\n-        {\n-            super(new IESEngine(new ECDHBasicAgreement(),\n-                            new KDF2BytesGenerator(new SHA1Digest()),\n-                            new HMac(new SHA1Digest()),\n-                            new PaddedBufferedBlockCipher(cipher)));\n-        }\n-\n         public ECIESwithCipher(BlockCipher cipher, int ivLength)\n         {\n             super(new IESEngine(new ECDHBasicAgreement(),\n@@ -530,24 +524,6 @@ public ECIESwithCipher(BlockCipher cipher, int ivLength)\n         }\n     }\n \n-    static public class ECIESwithDESede\n-        extends ECIESwithCipher\n-    {\n-        public ECIESwithDESede()\n-        {\n-            super(new DESedeEngine());\n-        }\n-    }\n-\n-    static public class ECIESwithAES\n-        extends ECIESwithCipher\n-    {\n-        public ECIESwithAES()\n-        {\n-            super(new AESEngine());\n-        }\n-    }\n-\n     static public class ECIESwithDESedeCBC\n         extends ECIESwithCipher\n     {\n@@ -562,77 +538,7 @@ static public class ECIESwithAESCBC\n     {\n         public ECIESwithAESCBC()\n         {\n-            super(new CBCBlockCipher(new AESEngine()), 16);\n-        }\n-    }\n-\n-    /**\n-     * Backwards compatibility\n-     */\n-    static public class OldECIES\n-        extends IESCipher\n-    {\n-        public OldECIES()\n-        {\n-            super(new OldIESEngine(new ECDHBasicAgreement(),\n-                new KDF2BytesGenerator(new SHA1Digest()),\n-                new HMac(new SHA1Digest())));\n-        }\n-    }\n-\n-    static public class OldECIESwithCipher\n-        extends IESCipher\n-    {\n-        public OldECIESwithCipher(BlockCipher baseCipher)\n-        {\n-            super(new OldIESEngine(new ECDHBasicAgreement(),\n-                new KDF2BytesGenerator(new SHA1Digest()),\n-                new HMac(new SHA1Digest()),\n-                new PaddedBufferedBlockCipher(baseCipher)));\n-        }\n-\n-        public OldECIESwithCipher(BlockCipher baseCipher, int ivLength)\n-        {\n-            super(new OldIESEngine(new ECDHBasicAgreement(),\n-                new KDF2BytesGenerator(new SHA1Digest()),\n-                new HMac(new SHA1Digest()),\n-                new PaddedBufferedBlockCipher(baseCipher)), ivLength);\n-        }\n-    }\n-\n-    static public class OldECIESwithDESede\n-        extends OldECIESwithCipher\n-    {\n-        public OldECIESwithDESede()\n-        {\n-            super(new DESedeEngine());\n-        }\n-    }\n-\n-    static public class OldECIESwithAES\n-        extends OldECIESwithCipher\n-    {\n-        public OldECIESwithAES()\n-        {\n-            super(new AESEngine());\n-        }\n-    }\n-\n-    static public class OldECIESwithDESedeCBC\n-        extends OldECIESwithCipher\n-    {\n-        public OldECIESwithDESedeCBC()\n-        {\n-            super(new CBCBlockCipher(new DESedeEngine()), 8);\n-        }\n-    }\n-\n-    static public class OldECIESwithAESCBC\n-        extends OldECIESwithCipher\n-    {\n-        public OldECIESwithAESCBC()\n-        {\n-            super(new CBCBlockCipher(new AESEngine()), 16);\n+            super(new CBCBlockCipher(new AESFastEngine()), 16);\n         }\n     }\n }"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ies/AlgorithmParametersSpi.java",
          "status": "modified",
          "additions": 19,
          "deletions": 1,
          "patch": "@@ -57,7 +57,15 @@ protected byte[] engineGetEncoded()\n                 v.add(new DERTaggedObject(false, 1, new DEROctetString(currentSpec.getEncodingV())));\n             }\n             v.add(new ASN1Integer(currentSpec.getMacKeySize()));\n+            if (currentSpec.getNonce() != null)\n+            {\n+                ASN1EncodableVector cV = new ASN1EncodableVector();\n+\n+                cV.add(new ASN1Integer(currentSpec.getCipherKeySize()));\n+                cV.add(new ASN1Integer(currentSpec.getNonce()));\n \n+                v.add(new DERSequence(cV));\n+            }\n             return new DERSequence(v).getEncoded(ASN1Encoding.DER);\n         }\n         catch (IOException e)\n@@ -126,13 +134,23 @@ else if (s.size() == 2)\n                     this.currentSpec = new IESParameterSpec(null, ASN1OctetString.getInstance(tagged, false).getOctets(), ASN1Integer.getInstance(s.getObjectAt(1)).getValue().intValue());\n                 }\n             }\n-            else\n+            else if (s.size() == 3)\n             {\n                 ASN1TaggedObject tagged1 = ASN1TaggedObject.getInstance(s.getObjectAt(0));\n                 ASN1TaggedObject tagged2 = ASN1TaggedObject.getInstance(s.getObjectAt(1));\n \n                 this.currentSpec = new IESParameterSpec(ASN1OctetString.getInstance(tagged1, false).getOctets(), ASN1OctetString.getInstance(tagged2, false).getOctets(), ASN1Integer.getInstance(s.getObjectAt(2)).getValue().intValue());\n             }\n+            else if (s.size() == 4)\n+            {\n+                ASN1TaggedObject tagged1 = ASN1TaggedObject.getInstance(s.getObjectAt(0));\n+                ASN1TaggedObject tagged2 = ASN1TaggedObject.getInstance(s.getObjectAt(1));\n+                ASN1Sequence     cipherDet = ASN1Sequence.getInstance(s.getObjectAt(3));\n+\n+                this.currentSpec = new IESParameterSpec(ASN1OctetString.getInstance(tagged1, false).getOctets(), ASN1OctetString.getInstance(tagged2, false).getOctets(), ASN1Integer.getInstance(s.getObjectAt(2)).getValue().intValue(),\n+                    ASN1Integer.getInstance(cipherDet.getObjectAt(0)).getValue().intValue(),\n+                    ASN1OctetString.getInstance(cipherDet.getObjectAt(1)).getOctets());\n+            }\n         }\n         catch (ClassCastException e)\n         {"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/util/IESUtil.java",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -6,7 +6,7 @@\n \n public class IESUtil\n {\n-    public static IESParameterSpec guessParameterSpec(BufferedBlockCipher iesBlockCipher)\n+    public static IESParameterSpec guessParameterSpec(BufferedBlockCipher iesBlockCipher, byte[] nonce)\n     {\n         if (iesBlockCipher == null)\n         {\n@@ -21,18 +21,18 @@ public static IESParameterSpec guessParameterSpec(BufferedBlockCipher iesBlockCi\n                 underlyingCipher.getAlgorithmName().equals(\"RC5-32\") ||\n                 underlyingCipher.getAlgorithmName().equals(\"RC5-64\"))\n             {\n-                return new IESParameterSpec(null, null, 64, 64);\n+                return new IESParameterSpec(null, null, 64, 64, nonce);\n             }\n             else if (underlyingCipher.getAlgorithmName().equals(\"SKIPJACK\"))\n             {\n-                return new IESParameterSpec(null, null, 80, 80);\n+                return new IESParameterSpec(null, null, 80, 80, nonce);\n             }\n             else if (underlyingCipher.getAlgorithmName().equals(\"GOST28147\"))\n             {\n-                return new IESParameterSpec(null, null, 256, 256);\n+                return new IESParameterSpec(null, null, 256, 256, nonce);\n             }\n \n-            return new IESParameterSpec(null, null, 128, 128);\n+            return new IESParameterSpec(null, null, 128, 128, nonce);\n         }\n     }\n }"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/jce/spec/IESParameterSpec.java",
          "status": "modified",
          "additions": 0,
          "deletions": 18,
          "patch": "@@ -33,24 +33,6 @@ public IESParameterSpec(\n         this(derivation, encoding, macKeySize, -1, null, false);\n     }\n \n-\n-    /**\n-     * Set the IES engine parameters.\n-     *\n-     * @param derivation    the optional derivation vector for the KDF.\n-     * @param encoding      the optional encoding vector for the KDF.\n-     * @param macKeySize    the key size (in bits) for the MAC.\n-     * @param cipherKeySize the key size (in bits) for the block cipher.\n-     */\n-    public IESParameterSpec(\n-        byte[] derivation,\n-        byte[] encoding,\n-        int macKeySize,\n-        int cipherKeySize)\n-    {\n-        this(derivation, encoding, macKeySize, cipherKeySize, null, false);\n-    }\n-\n     /**\n      * Set the IES engine parameters.\n      *"
        },
        {
          "filename": "prov/src/test/java/org/bouncycastle/jce/provider/test/DHIESTest.java",
          "status": "modified",
          "additions": 71,
          "deletions": 31,
          "patch": "@@ -1,6 +1,7 @@\n package org.bouncycastle.jce.provider.test;\n \n import java.math.BigInteger;\n+import java.security.InvalidAlgorithmParameterException;\n import java.security.KeyPair;\n import java.security.KeyPairGenerator;\n import java.security.SecureRandom;\n@@ -18,9 +19,10 @@\n import org.bouncycastle.crypto.generators.KDF2BytesGenerator;\n import org.bouncycastle.crypto.macs.HMac;\n import org.bouncycastle.crypto.paddings.PaddedBufferedBlockCipher;\n-import org.bouncycastle.jce.provider.BouncyCastleProvider;\n import org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n import org.bouncycastle.jce.spec.IESParameterSpec;\n+import org.bouncycastle.util.Arrays;\n import org.bouncycastle.util.encoders.Hex;\n import org.bouncycastle.util.test.SimpleTest;\n \n@@ -65,17 +67,18 @@ public void performTest()\n \n         // Testing DHIES with default prime in streaming mode\n         KeyPairGenerator    g = KeyPairGenerator.getInstance(\"DH\", \"BC\");\n+        KeyPairGenerator    g512 = KeyPairGenerator.getInstance(\"DH\", \"BC\");\n \n         g.initialize(param);\n \n         doTest(\"DHIES with default\", g, \"DHIES\", params);\n         \n         // Testing DHIES with 512-bit prime in streaming mode\n-        g.initialize(512, new SecureRandom());\n-        doTest(\"DHIES with 512-bit\", g, \"DHIES\", params);\n+        g512.initialize(512, new SecureRandom());\n+        doTest(\"DHIES with 512-bit\", g512, \"DHIES\", params);\n \n         // Testing ECIES with 1024-bit prime in streaming mode \n-        g.initialize(1024, new SecureRandom());\n+        g.initialize(param, new SecureRandom());\n         doTest(\"DHIES with 1024-bit\", g, \"DHIES\", params);\n \n         c1 = new IESCipher(new IESEngine(new DHBasicAgreement(), \n@@ -88,43 +91,79 @@ public void performTest()\n                 new HMac(new SHA1Digest()),\n                 new PaddedBufferedBlockCipher(new DESEngine())));  \n     \n-        params = new IESParameterSpec(derivation, encoding, 128, 192);\n+        params = new IESParameterSpec(derivation, encoding, 128, 192, Hex.decode(\"0001020304050607\"));\n       \n         // Testing DHIES with default prime using DESEDE\n         g = KeyPairGenerator.getInstance(\"DH\", \"BC\");\n-        doTest(\"DHIESwithDES default\", g, \"DHIESwithDESEDE\", params);\n+        doTest(\"DHIESwithDES default\", g, \"DHIESwithDESEDE-CBC\", params);\n         \n         // Testing DHIES with 512-bit prime using DESEDE\n-        g.initialize(512, new SecureRandom());\n-        doTest(\"DHIESwithDES 512-bit\", g, \"DHIESwithDESEDE\", params);\n+        doTest(\"DHIESwithDES 512-bit\", g512, \"DHIESwithDESEDE-CBC\", params);\n         \n         // Testing DHIES with 1024-bit prime using DESEDE\n-        g.initialize(1024, new SecureRandom());\n-        doTest(\"DHIESwithDES 1024-bit\", g, \"DHIESwithDESEDE\", params);\n+        g.initialize(param, new SecureRandom());\n+        doTest(\"DHIESwithDES 1024-bit\", g, \"DHIESwithDESEDE-CBC\", params);\n \n         g = KeyPairGenerator.getInstance(\"DH\", \"BC\");\n         g.initialize(param);\n \n-        c1 = new IESCipher.IESwithAES();\n-        c2 = new IESCipher.IESwithAES();\n-        params = new IESParameterSpec(derivation, encoding, 128, 128);\n+        c1 = new IESCipher.IESwithAESCBC();\n+        c2 = new IESCipher.IESwithAESCBC();\n+        params = new IESParameterSpec(derivation, encoding, 128, 128, Hex.decode(\"00010203040506070001020304050607\"));\n         \n-        // Testing DHIES with default curve using AES\n-        doTest(\"DHIESwithAES default\", g, \"DHIESwithAES\", params);\n+        // Testing DHIES with default prime using AES\n+        doTest(\"DHIESwithAES default\", g, \"DHIESwithAES-CBC\", params);\n         \n-        // Testing DHIES with 512-bit curve using AES\n-        g.initialize(512, new SecureRandom());\n-        doTest(\"DHIESwithAES 512-bit\", g, \"DHIESwithAES\", params);\n-        \n-        // Testing DHIES with 1024-bit curve using AES\n-        g.initialize(1024, new SecureRandom());\n-        doTest(\"DHIESwithAES 1024-bit\", g, \"DHIESwithAES\", params);\n+        // Testing DHIES with 512-bit prime using AES\n+        doTest(\"DHIESwithAES 512-bit\", g512, \"DHIESwithAES-CBC\", params);\n         \n+        // Testing DHIES with 1024-bit prime using AES\n+        g.initialize(param, new SecureRandom());\n+        doTest(\"DHIESwithAES 1024-bit\", g, \"DHIESwithAES-CBC\", params);\n+\n+        KeyPair       keyPair = g.generateKeyPair();\n+        DHPublicKey   pub = (DHPublicKey)keyPair.getPublic();\n+        DHPrivateKey  priv = (DHPrivateKey)keyPair.getPrivate();\n+\n+        Cipher c = Cipher.getInstance(\"DHIESwithAES-CBC\", \"BC\");\n+\n+        try\n+        {\n+            c.init(Cipher.ENCRYPT_MODE, pub, new IESParameterSpec(derivation, encoding, 128, 128, null));\n+\n+            fail(\"no exception\");\n+        }\n+        catch (InvalidAlgorithmParameterException e)\n+        {\n+            isTrue(\"message \", \"NONCE in IES Parameters needs to be 16 bytes long\".equals(e.getMessage()));\n+        }\n+\n+        try\n+        {\n+            c.init(Cipher.DECRYPT_MODE, priv);\n+\n+            fail(\"no exception\");\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            isTrue(\"message \", \"cannot handle supplied parameter spec: NONCE in IES Parameters needs to be 16 bytes long\".equals(e.getMessage()));\n+        }\n+\n+        try\n+        {\n+            c.init(Cipher.DECRYPT_MODE, priv, new IESParameterSpec(derivation, encoding, 128, 128, null));\n+\n+            fail(\"no exception\");\n+        }\n+        catch (InvalidAlgorithmParameterException e)\n+        {\n+            isTrue(\"message \", \"NONCE in IES Parameters needs to be 16 bytes long\".equals(e.getMessage()));\n+        }\n     }\n \n     public void doTest(\n-        String                testname,\n-        KeyPairGenerator     g,\n+        String              testname,\n+        KeyPairGenerator    g,\n         String              cipher,\n         IESParameterSpec    p)\n         throws Exception\n@@ -139,22 +178,23 @@ public void doTest(\n         KeyPair       keyPair = g.generateKeyPair();\n         DHPublicKey   pub = (DHPublicKey)keyPair.getPublic();\n         DHPrivateKey  priv = (DHPrivateKey)keyPair.getPrivate();\n-       \n \n-        // Testing with null parameters and DHAES mode off\n+        // Testing with default parameters and DHAES mode off\n         c1.init(Cipher.ENCRYPT_MODE, pub, new SecureRandom());\n-        c2.init(Cipher.DECRYPT_MODE, priv, new SecureRandom());\n+        c2.init(Cipher.DECRYPT_MODE, priv, c1.getParameters());\n+\n+        isTrue(\"nonce mismatch\", Arrays.areEqual(c1.getIV(), c2.getIV()));\n+\n         out1 = c1.doFinal(message, 0, message.length);\n         out2 = c2.doFinal(out1, 0, out1.length);\n         if (!areEqual(out2, message))\n         {\n-            fail(testname + \" test failed with null parameters, DHAES mode false.\");\n+            fail(testname + \" test failed with default parameters, DHAES mode false.\");\n         }\n-    \n         \n         // Testing with given parameters and DHAES mode off\n         c1.init(Cipher.ENCRYPT_MODE, pub, p, new SecureRandom());\n-        c2.init(Cipher.DECRYPT_MODE, priv, p, new SecureRandom());\n+        c2.init(Cipher.DECRYPT_MODE, priv, p);\n         out1 = c1.doFinal(message, 0, message.length);\n         out2 = c2.doFinal(out1, 0, out1.length);\n         if (!areEqual(out2, message))\n@@ -164,7 +204,7 @@ public void doTest(\n         c1 = Cipher.getInstance(cipher + \"/DHAES/PKCS7Padding\",\"BC\");\n         c2 = Cipher.getInstance(cipher + \"/DHAES/PKCS7Padding\",\"BC\");\n         c1.init(Cipher.ENCRYPT_MODE, pub, new SecureRandom());\n-        c2.init(Cipher.DECRYPT_MODE, priv, new SecureRandom());\n+        c2.init(Cipher.DECRYPT_MODE, priv, c1.getParameters(), new SecureRandom());\n         out1 = c1.doFinal(message, 0, message.length);\n         out2 = c2.doFinal(out1, 0, out1.length);\n         if (!areEqual(out2, message))"
        },
        {
          "filename": "prov/src/test/java/org/bouncycastle/jce/provider/test/ECIESTest.java",
          "status": "modified",
          "additions": 49,
          "deletions": 27,
          "patch": "@@ -22,6 +22,7 @@\n import org.bouncycastle.jce.interfaces.ECPublicKey;\n import org.bouncycastle.jce.provider.BouncyCastleProvider;\n import org.bouncycastle.jce.spec.IESParameterSpec;\n+import org.bouncycastle.util.Arrays;\n import org.bouncycastle.util.encoders.Hex;\n import org.bouncycastle.util.test.SimpleTest;\n \n@@ -75,19 +76,10 @@ public void performTest()\n                 new HMac(new SHA1Digest()),\n                 new PaddedBufferedBlockCipher(new DESEngine())));  \n     \n-        params = new IESParameterSpec(derivation, encoding, 128, 128);\n+        params = new IESParameterSpec(derivation, encoding, 128, 128, Hex.decode(\"0001020304050607\"));\n       \n         // Testing ECIES with default curve using DES\n         g = KeyPairGenerator.getInstance(\"EC\", \"BC\");\n-        doTest(\"default\", g, \"ECIESwithDESEDE\", params);\n-        \n-        // Testing ECIES with 192-bit curve using DES\n-        g.initialize(192, new SecureRandom());\n-        doTest(\"192-bit\", g, \"ECIESwithDESEDE\", params);\n-        \n-        // Testing ECIES with 256-bit curve using DES\n-        g.initialize(256, new SecureRandom());\n-        doTest(\"256-bit\", g, \"ECIESwithDESEDE\", params);\n \n         // Testing ECIES with 256-bit curve using DES-CBC\n         g.initialize(256, new SecureRandom());\n@@ -112,21 +104,9 @@ public void performTest()\n             }\n         }\n \n-        c1 = new org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher.ECIESwithAES();\n-        c2 = new org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher.ECIESwithAES();\n-        params = new IESParameterSpec(derivation, encoding, 128, 128);\n-        \n-        // Testing ECIES with default curve using AES \n-        g = KeyPairGenerator.getInstance(\"EC\", \"BC\");\n-        doTest(\"default\", g, \"ECIESwithAES\", params);\n-        \n-        // Testing ECIES with 192-bit curve using AES\n-        g.initialize(192, new SecureRandom());\n-        doTest(\"192-bit\", g, \"ECIESwithAES\", params);\n-        \n-        // Testing ECIES with 256-bit curve using AES\n-        g.initialize(256, new SecureRandom());\n-        doTest(\"256-bit\", g, \"ECIESwithAES\", params);\n+        c1 = new org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher.ECIESwithAESCBC();\n+        c2 = new org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher.ECIESwithAESCBC();\n+        params = new IESParameterSpec(derivation, encoding, 128, 128, Hex.decode(\"000102030405060708090a0b0c0d0e0f\"));\n \n         // Testing ECIES with 256-bit curve using AES-CBC\n         g.initialize(256, new SecureRandom());\n@@ -151,6 +131,45 @@ public void performTest()\n             }\n         }\n \n+        KeyPair       keyPair = g.generateKeyPair();\n+        ECPublicKey pub = (ECPublicKey)keyPair.getPublic();\n+        ECPrivateKey priv = (ECPrivateKey)keyPair.getPrivate();\n+\n+        Cipher c = Cipher.getInstance(\"ECIESwithAES-CBC\", \"BC\");\n+\n+        try\n+        {\n+            c.init(Cipher.ENCRYPT_MODE, pub, new IESParameterSpec(derivation, encoding, 128, 128, null));\n+\n+            fail(\"no exception\");\n+        }\n+        catch (InvalidAlgorithmParameterException e)\n+        {\n+            isTrue(\"message \", \"NONCE in IES Parameters needs to be 16 bytes long\".equals(e.getMessage()));\n+        }\n+\n+        try\n+        {\n+            c.init(Cipher.DECRYPT_MODE, priv);\n+\n+            fail(\"no exception\");\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            isTrue(\"message \", \"cannot handle supplied parameter spec: NONCE in IES Parameters needs to be 16 bytes long\".equals(e.getMessage()));\n+        }\n+\n+        try\n+        {\n+            c.init(Cipher.DECRYPT_MODE, priv, new IESParameterSpec(derivation, encoding, 128, 128, null));\n+\n+            fail(\"no exception\");\n+        }\n+        catch (InvalidAlgorithmParameterException e)\n+        {\n+            isTrue(\"message \", \"NONCE in IES Parameters needs to be 16 bytes long\".equals(e.getMessage()));\n+        }\n+\n         sealedObjectTest();\n     }\n \n@@ -204,7 +223,10 @@ public void doTest(\n \n         // Testing with null parameters and DHAES mode off\n         c1.init(Cipher.ENCRYPT_MODE, Pub, new SecureRandom());\n-        c2.init(Cipher.DECRYPT_MODE, Priv, new SecureRandom());\n+        c2.init(Cipher.DECRYPT_MODE, Priv, c1.getParameters());\n+\n+        isTrue(\"nonce mismatch\", Arrays.areEqual(c1.getIV(), c2.getIV()));\n+\n         out1 = c1.doFinal(message, 0, message.length);\n         out2 = c2.doFinal(out1, 0, out1.length);\n         if (!areEqual(out2, message))\n@@ -213,7 +235,7 @@ public void doTest(\n         \n         // Testing with given parameters and DHAES mode off\n         c1.init(Cipher.ENCRYPT_MODE, Pub, p, new SecureRandom());\n-        c2.init(Cipher.DECRYPT_MODE, Priv, p, new SecureRandom());\n+        c2.init(Cipher.DECRYPT_MODE, Priv, p);\n         out1 = c1.doFinal(message, 0, message.length);\n         out2 = c2.doFinal(out1, 0, out1.length);\n         if (!areEqual(out2, message))"
        },
        {
          "filename": "prov/src/test/java/org/bouncycastle/jce/provider/test/ECIESVectorTest.java",
          "status": "modified",
          "additions": 8,
          "deletions": 7,
          "patch": "@@ -117,13 +117,14 @@ public void performTest()\n         doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"ECIES\", p256_1_eph, new IESParameterSpec(derivation2, encoding2, 128), p256_1_with_params22);\n         doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"ECIES\", p256_1_eph, new IESParameterSpec(derivation2, encoding3, 128), p256_1_with_params23);\n \n-        doTestNoParams(\"ECIES with P-256 None\", keyPair, \"OldECIES\", p256_1_eph, old_p256_1_no_params);\n-        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation1, encoding1, 128), old_p256_1_with_params11);\n-        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation1, encoding2, 128), old_p256_1_with_params12);\n-        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation1, encoding3, 128), old_p256_1_with_params13);\n-        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation2, encoding1, 128), old_p256_1_with_params21);\n-        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation2, encoding2, 128), old_p256_1_with_params22);\n-        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation2, encoding3, 128), old_p256_1_with_params23);\n+        // no longer supported\n+//        doTestNoParams(\"ECIES with P-256 None\", keyPair, \"OldECIES\", p256_1_eph, old_p256_1_no_params);\n+//        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation1, encoding1, 128), old_p256_1_with_params11);\n+//        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation1, encoding2, 128), old_p256_1_with_params12);\n+//        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation1, encoding3, 128), old_p256_1_with_params13);\n+//        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation2, encoding1, 128), old_p256_1_with_params21);\n+//        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation2, encoding2, 128), old_p256_1_with_params22);\n+//        doTestWithParams(\"ECIES with P-256 KP1 P11\", keyPair, \"OldECIES\", p256_1_eph, new IESParameterSpec(derivation2, encoding3, 128), old_p256_1_with_params23);\n \n         keyPair = new KeyPair(ecFact.generatePublic(new X509EncodedKeySpec(p256_2_pub)), ecFact.generatePrivate(new PKCS8EncodedKeySpec(p256_2_pri)));\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 7,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5ce0d4d4536bcb622c1077a6b9157b02ad8adcc5",
            "date": "2025-01-14T16:09:19Z",
            "author_login": "dghgit"
          },
          {
            "sha": "29f141ac3217f48db3a65920c4971ffaddeb4a72",
            "date": "2025-01-14T16:08:32Z",
            "author_login": "dghgit"
          },
          {
            "sha": "8a81f6cdd89b798ecfc132b37c15331e7c5df2b4",
            "date": "2025-01-14T15:01:54Z",
            "author_login": "dghgit"
          },
          {
            "sha": "c9d83fbadb9a1ce7c12dca99833c6b42de088697",
            "date": "2025-01-14T14:10:20Z",
            "author_login": "dghgit"
          },
          {
            "sha": "9a36e56b93e361dbc065f5bd920574f96f99102f",
            "date": "2025-01-14T14:10:04Z",
            "author_login": "dghgit"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-310",
    "description": "In the Bouncy Castle JCE Provider version 1.55 and earlier the ECIES implementation allowed the use of ECB mode. This mode is regarded as unsafe and support for it has been removed from the provider.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-06-04T21:29:00.350",
    "last_modified": "2024-11-21T02:43:03.933",
    "fix_date": "2016-08-27T01:41:27Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2669",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2927",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/9385b0ebd277724b167fe1d1456e3c112112be1f",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20181127-0004/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuoct2020.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2669",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2927",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/9385b0ebd277724b167fe1d1456e3c112112be1f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20181127-0004/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuoct2020.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:25.884490",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bc-java",
    "owner": "bcgit",
    "created_at": "2013-06-01T02:38:42Z",
    "updated_at": "2025-01-13T21:13:46Z",
    "pushed_at": "2025-01-13T21:13:42Z",
    "size": 115936,
    "stars": 2364,
    "forks": 1146,
    "open_issues": 290,
    "watchers": 2364,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Java": 50883690,
      "Shell": 153252,
      "HTML": 81181,
      "Batchfile": 12956
    },
    "commit_activity": {
      "total_commits_last_year": 902,
      "avg_commits_per_week": 17.346153846153847,
      "days_active_last_year": 210
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:21:20.845974"
  }
}