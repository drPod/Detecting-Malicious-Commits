{
  "cve_id": "CVE-2016-10127",
  "github_data": {
    "repository": "rohe/pysaml2",
    "fix_commit": "6e09a25d9b4b7aa7a506853210a9a14100b8bc9b",
    "related_commits": [
      "6e09a25d9b4b7aa7a506853210a9a14100b8bc9b",
      "6e09a25d9b4b7aa7a506853210a9a14100b8bc9b"
    ],
    "patch_url": "https://github.com/rohe/pysaml2/commit/6e09a25d9b4b7aa7a506853210a9a14100b8bc9b.patch",
    "fix_commit_details": {
      "sha": "6e09a25d9b4b7aa7a506853210a9a14100b8bc9b",
      "commit_date": "2016-10-31T00:56:48Z",
      "author": {
        "login": "fruechel",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix XXE in XML parsing (related to #366)",
        "length": 286,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 101,
        "additions": 95,
        "deletions": 6
      },
      "files": [
        {
          "filename": "setup.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -18,6 +18,7 @@\n     'pytz',\n     'pyOpenSSL',\n     'python-dateutil',\n+    'defusedxml',\n     'six'\n ]\n "
        },
        {
          "filename": "src/saml2/__init__.py",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -36,6 +36,7 @@\n         import cElementTree as ElementTree\n     except ImportError:\n         from elementtree import ElementTree\n+import defusedxml.ElementTree\n \n root_logger = logging.getLogger(__name__)\n root_logger.level = logging.NOTSET\n@@ -87,7 +88,7 @@ def create_class_from_xml_string(target_class, xml_string):\n     \"\"\"\n     if not isinstance(xml_string, six.binary_type):\n         xml_string = xml_string.encode('utf-8')\n-    tree = ElementTree.fromstring(xml_string)\n+    tree = defusedxml.ElementTree.fromstring(xml_string)\n     return create_class_from_element_tree(target_class, tree)\n \n \n@@ -269,7 +270,7 @@ def loadd(self, ava):\n \n \n def extension_element_from_string(xml_string):\n-    element_tree = ElementTree.fromstring(xml_string)\n+    element_tree = defusedxml.ElementTree.fromstring(xml_string)\n     return _extension_element_from_element_tree(element_tree)\n \n "
        },
        {
          "filename": "src/saml2/pack.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -37,6 +37,7 @@\n         import cElementTree as ElementTree\n     except ImportError:\n         from elementtree import ElementTree\n+import defusedxml.ElementTree\n \n NAMESPACE = \"http://schemas.xmlsoap.org/soap/envelope/\"\n FORM_SPEC = \"\"\"<form method=\"post\" action=\"%s\">\n@@ -235,7 +236,7 @@ def parse_soap_enveloped_saml(text, body_class, header_class=None):\n     :param text: The SOAP object as XML\n     :return: header parts and body as saml.samlbase instances\n     \"\"\"\n-    envelope = ElementTree.fromstring(text)\n+    envelope = defusedxml.ElementTree.fromstring(text)\n     assert envelope.tag == '{%s}Envelope' % NAMESPACE\n \n     # print(len(envelope))"
        },
        {
          "filename": "src/saml2/soap.py",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -19,6 +19,7 @@\n     except ImportError:\n         #noinspection PyUnresolvedReferences\n         from elementtree import ElementTree\n+import defusedxml.ElementTree\n \n \n logger = logging.getLogger(__name__)\n@@ -133,7 +134,7 @@ def parse_soap_enveloped_saml_thingy(text, expected_tags):\n     :param expected_tags: What the tag of the SAML thingy is expected to be.\n     :return: SAML thingy as a string\n     \"\"\"\n-    envelope = ElementTree.fromstring(text)\n+    envelope = defusedxml.ElementTree.fromstring(text)\n \n     # Make sure it's a SOAP message\n     assert envelope.tag == '{%s}Envelope' % soapenv.NAMESPACE\n@@ -183,7 +184,7 @@ def class_instances_from_soap_enveloped_saml_thingies(text, modules):\n     :return: The body and headers as class instances\n     \"\"\"\n     try:\n-        envelope = ElementTree.fromstring(text)\n+        envelope = defusedxml.ElementTree.fromstring(text)\n     except Exception as exc:\n         raise XmlParseError(\"%s\" % exc)\n \n@@ -209,7 +210,7 @@ def open_soap_envelope(text):\n     :return: dictionary with two keys \"body\"/\"header\"\n     \"\"\"\n     try:\n-        envelope = ElementTree.fromstring(text)\n+        envelope = defusedxml.ElementTree.fromstring(text)\n     except Exception as exc:\n         raise XmlParseError(\"%s\" % exc)\n "
        },
        {
          "filename": "tests/test_03_saml2.py",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -17,6 +17,7 @@\n         import cElementTree as ElementTree\n     except ImportError:\n         from elementtree import ElementTree\n+from defusedxml.common import EntitiesForbidden\n \n ITEMS = {\n     NameID: [\"\"\"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n@@ -166,6 +167,19 @@ def test_create_class_from_xml_string_wrong_class_spec():\n     assert kl == None\n \n \n+def test_create_class_from_xml_string_xxe():\n+    xml = \"\"\"<?xml version=\"1.0\"?>\n+    <!DOCTYPE lolz [\n+    <!ENTITY lol \"lol\">\n+    <!ELEMENT lolz (#PCDATA)>\n+    <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\n+    ]>\n+    <lolz>&lol1;</lolz>\n+    \"\"\"\n+    with raises(EntitiesForbidden) as err:\n+        create_class_from_xml_string(NameID, xml)\n+\n+\n def test_ee_1():\n     ee = saml2.extension_element_from_string(\n         \"\"\"<?xml version='1.0' encoding='UTF-8'?><foo>bar</foo>\"\"\")\n@@ -454,6 +468,19 @@ def test_ee_7():\n     assert nid.text.strip() == \"http://federationX.org\"\n \n \n+def test_ee_xxe():\n+    xml = \"\"\"<?xml version=\"1.0\"?>\n+    <!DOCTYPE lolz [\n+    <!ENTITY lol \"lol\">\n+    <!ELEMENT lolz (#PCDATA)>\n+    <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\n+    ]>\n+    <lolz>&lol1;</lolz>\n+    \"\"\"\n+    with raises(EntitiesForbidden):\n+        saml2.extension_element_from_string(xml)\n+\n+\n def test_extension_element_loadd():\n     ava = {'attributes': {},\n            'tag': 'ExternalEntityAttributeAuthority',"
        },
        {
          "filename": "tests/test_43_soap.py",
          "status": "modified",
          "additions": 43,
          "deletions": 0,
          "patch": "@@ -12,9 +12,13 @@\n         import cElementTree as ElementTree\n     except ImportError:\n         from elementtree import ElementTree\n+from defusedxml.common import EntitiesForbidden\n+\n+from pytest import raises\n \n import saml2.samlp as samlp\n from saml2.samlp import NAMESPACE as SAMLP_NAMESPACE\n+from saml2 import soap\n \n NAMESPACE = \"http://schemas.xmlsoap.org/soap/envelope/\"\n \n@@ -66,3 +70,42 @@ def test_make_soap_envelope():\n     assert len(body) == 1\n     saml_part = body[0]\n     assert saml_part.tag == '{%s}AuthnRequest' % SAMLP_NAMESPACE\n+\n+\n+def test_parse_soap_enveloped_saml_thingy_xxe():\n+    xml = \"\"\"<?xml version=\"1.0\"?>\n+    <!DOCTYPE lolz [\n+    <!ENTITY lol \"lol\">\n+    <!ELEMENT lolz (#PCDATA)>\n+    <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\n+    ]>\n+    <lolz>&lol1;</lolz>\n+    \"\"\"\n+    with raises(EntitiesForbidden):\n+        soap.parse_soap_enveloped_saml_thingy(xml, None)\n+\n+\n+def test_class_instances_from_soap_enveloped_saml_thingies_xxe():\n+    xml = \"\"\"<?xml version=\"1.0\"?>\n+    <!DOCTYPE lolz [\n+    <!ENTITY lol \"lol\">\n+    <!ELEMENT lolz (#PCDATA)>\n+    <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\n+    ]>\n+    <lolz>&lol1;</lolz>\n+    \"\"\"\n+    with raises(soap.XmlParseError):\n+        soap.class_instances_from_soap_enveloped_saml_thingies(xml, None)\n+\n+\n+def test_open_soap_envelope_xxe():\n+    xml = \"\"\"<?xml version=\"1.0\"?>\n+    <!DOCTYPE lolz [\n+    <!ENTITY lol \"lol\">\n+    <!ELEMENT lolz (#PCDATA)>\n+    <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\n+    ]>\n+    <lolz>&lol1;</lolz>\n+    \"\"\"\n+    with raises(soap.XmlParseError):\n+        soap.open_soap_envelope(xml)"
        },
        {
          "filename": "tests/test_51_client.py",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -7,6 +7,7 @@\n from future.backports.urllib.parse import parse_qs\n from future.backports.urllib.parse import urlencode\n from future.backports.urllib.parse import urlparse\n+from pytest import raises\n \n from saml2.argtree import add_path\n from saml2.cert import OpenSSLWrapper\n@@ -25,6 +26,7 @@\n from saml2.authn_context import INTERNETPROTOCOLPASSWORD\n from saml2.client import Saml2Client\n from saml2.config import SPConfig\n+from saml2.pack import parse_soap_enveloped_saml\n from saml2.response import LogoutResponse\n from saml2.saml import NAMEID_FORMAT_PERSISTENT, EncryptedAssertion, Advice\n from saml2.saml import NAMEID_FORMAT_TRANSIENT\n@@ -38,6 +40,8 @@\n from saml2.s_utils import factory\n from saml2.time_util import in_a_while, a_while_ago\n \n+from defusedxml.common import EntitiesForbidden\n+\n from fakeIDP import FakeIDP\n from fakeIDP import unpack_form\n from pathutils import full_path\n@@ -1552,6 +1556,17 @@ def test_negotiated_post_sso(self):\n                'http://www.example.com/login'\n         assert ac.authn_context_class_ref.text == INTERNETPROTOCOLPASSWORD\n \n+def test_parse_soap_enveloped_saml_xxe():\n+    xml = \"\"\"<?xml version=\"1.0\"?>\n+    <!DOCTYPE lolz [\n+    <!ENTITY lol \"lol\">\n+    <!ELEMENT lolz (#PCDATA)>\n+    <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">\n+    ]>\n+    <lolz>&lol1;</lolz>\n+    \"\"\"\n+    with raises(EntitiesForbidden):\n+        parse_soap_enveloped_saml(xml, None)\n \n # if __name__ == \"__main__\":\n #     tc = TestClient()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7cb4f09dce87a7e8098b9c7552ebab8bc77bc896",
            "date": "2024-04-24T13:26:12Z",
            "author_login": "tmyjoe"
          },
          {
            "sha": "c8f595f6be7079aed498a7dd7d0c44717e8cd32f",
            "date": "2024-04-05T12:48:21Z",
            "author_login": "johanlundberg"
          },
          {
            "sha": "3daa066703f5ec433aeb9714a847330c540fc5d4",
            "date": "2024-01-30T13:06:56Z",
            "author_login": "c00kiemon5ter"
          },
          {
            "sha": "5b091317a70872aaf5b379301e8895a95ada17c1",
            "date": "2024-01-30T11:50:41Z",
            "author_login": "c00kiemon5ter"
          },
          {
            "sha": "aed3012249158572712450c9f03f89b2d9c5c1c8",
            "date": "2024-01-30T11:44:46Z",
            "author_login": "c00kiemon5ter"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-611",
    "description": "PySAML2 allows remote attackers to conduct XML external entity (XXE) attacks via a crafted SAML XML request or response.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-03-03T15:59:00.210",
    "last_modified": "2024-11-21T02:43:21.837",
    "fix_date": "2016-10-31T00:56:48Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2017/01/19/5",
      "source": "security@debian.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/95376",
      "source": "security@debian.org",
      "tags": [
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=850716",
      "source": "security@debian.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rohe/pysaml2/commit/6e09a25d9b4b7aa7a506853210a9a14100b8bc9b",
      "source": "security@debian.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rohe/pysaml2/issues/366",
      "source": "security@debian.org",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rohe/pysaml2/pull/379",
      "source": "security@debian.org",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2017/01/19/5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/95376",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=850716",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rohe/pysaml2/commit/6e09a25d9b4b7aa7a506853210a9a14100b8bc9b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rohe/pysaml2/issues/366",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/rohe/pysaml2/pull/379",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:52.245060",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pysaml2",
    "owner": "rohe",
    "created_at": "2012-05-23T21:12:14Z",
    "updated_at": "2025-01-08T10:50:56Z",
    "pushed_at": "2024-08-16T16:34:15Z",
    "size": 16380,
    "stars": 570,
    "forks": 426,
    "open_issues": 117,
    "watchers": 570,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 3261246,
      "Mako": 3703,
      "Shell": 2369,
      "Lua": 916,
      "CSS": 46
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:57:31.565342"
  }
}