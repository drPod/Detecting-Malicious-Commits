{
  "cve_id": "CVE-2016-1202",
  "github_data": {
    "repository": "electron/electron",
    "fix_commit": "9a2e2b365d061ec10cd861391fd5b1344af7194d",
    "related_commits": [
      "9a2e2b365d061ec10cd861391fd5b1344af7194d",
      "9a2e2b365d061ec10cd861391fd5b1344af7194d"
    ],
    "patch_url": "https://github.com/electron/electron/commit/9a2e2b365d061ec10cd861391fd5b1344af7194d.patch",
    "fix_commit_details": {
      "sha": "9a2e2b365d061ec10cd861391fd5b1344af7194d",
      "commit_date": "2015-10-03T13:20:19Z",
      "author": {
        "login": "zcbenz",
        "type": "User",
        "stats": {
          "total_commits": 8514,
          "average_weekly_commits": 13.754442649434571,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 406
        }
      },
      "commit_message": {
        "title": "Merge pull request #2976 from atom/node_modules_paths",
        "length": 117,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 66,
        "additions": 43,
        "deletions": 23
      },
      "files": [
        {
          "filename": "atom/browser/lib/init.coffee",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -7,14 +7,17 @@ Module = require 'module'\n # we need to restore it here.\n process.argv.splice 1, 1\n \n+# Clear search paths.\n+require path.resolve(__dirname, '..', '..', 'common', 'lib', 'reset-search-paths')\n+\n+# Import common settings.\n+require path.resolve(__dirname, '..', '..', 'common', 'lib', 'init')\n+\n # Add browser/api/lib to module search paths, which contains javascript part of\n # Electron's built-in libraries.\n globalPaths = Module.globalPaths\n globalPaths.push path.resolve(__dirname, '..', 'api', 'lib')\n \n-# Import common settings.\n-require path.resolve(__dirname, '..', '..', 'common', 'lib', 'init')\n-\n if process.platform is 'win32'\n   # Redirect node's console to use our own implementations, since node can not\n   # handle console output when running as GUI program."
        },
        {
          "filename": "atom/common/lib/init.coffee",
          "status": "modified",
          "additions": 1,
          "deletions": 14,
          "patch": "@@ -9,21 +9,8 @@ process.atomBinding = (name) ->\n   catch e\n     process.binding \"atom_common_#{name}\" if /No such module/.test e.message\n \n-# Global module search paths.\n-globalPaths = Module.globalPaths\n-\n-# Don't lookup modules in user-defined search paths, see http://git.io/vf8sF.\n-homeDir =\n-  if process.platform is 'win32'\n-    process.env.USERPROFILE\n-  else\n-    process.env.HOME\n-if homeDir  # Node only add user-defined search paths when $HOME is defined.\n-  userModulePath = path.resolve homeDir, '.node_modules'\n-  globalPaths.splice globalPaths.indexOf(userModulePath), 2\n-\n # Add common/api/lib to module search paths.\n-globalPaths.push path.resolve(__dirname, '..', 'api', 'lib')\n+Module.globalPaths.push path.resolve(__dirname, '..', 'api', 'lib')\n \n # setImmediate and process.nextTick makes use of uv_check and uv_prepare to\n # run the callbacks, however since we only run uv loop on requests, the"
        },
        {
          "filename": "atom/common/lib/reset-search-paths.coffee",
          "status": "added",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -0,0 +1,29 @@\n+path   = require 'path'\n+Module = require 'module'\n+\n+# Clear Node's global search paths.\n+Module.globalPaths.length = 0\n+\n+# Clear current and parent(init.coffee)'s search paths.\n+module.paths = []\n+module.parent.paths = []\n+\n+# Prevent Node from adding paths outside this app to search paths.\n+Module._nodeModulePaths = (from) ->\n+  from = path.resolve from\n+\n+  # If \"from\" is outside the app then we do nothing.\n+  skipOutsidePaths = from.startsWith process.resourcesPath\n+\n+  # Following logoic is copied from module.js.\n+  splitRe = if process.platform is 'win32' then /[\\/\\\\]/ else /\\//\n+  paths = []\n+\n+  parts = from.split splitRe\n+  for part, tip in parts by -1\n+    continue if part is 'node_modules'\n+    dir = parts.slice(0, tip + 1).join path.sep\n+    break if skipOutsidePaths and not dir.startsWith process.resourcesPath\n+    paths.push path.join(dir, 'node_modules')\n+\n+  paths"
        },
        {
          "filename": "atom/renderer/lib/init.coffee",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -7,16 +7,16 @@ Module = require 'module'\n # atom-renderer.js, we need to restore it here.\n process.argv.splice 1, 1\n \n+# Clear search paths.\n+require path.resolve(__dirname, '..', '..', 'common', 'lib', 'reset-search-paths')\n+\n+# Import common settings.\n+require path.resolve(__dirname, '..', '..', 'common', 'lib', 'init')\n+\n # Add renderer/api/lib to require's search paths, which contains javascript part\n # of Atom's built-in libraries.\n globalPaths = Module.globalPaths\n globalPaths.push path.resolve(__dirname, '..', 'api', 'lib')\n-# And also app.\n-globalPaths.push path.join(process.resourcesPath, 'app')\n-globalPaths.push path.join(process.resourcesPath, 'app.asar')\n-\n-# Import common settings.\n-require path.resolve(__dirname, '..', '..', 'common', 'lib', 'init')\n \n # The global variable will be used by ipc for event dispatching\n v8Util = process.atomBinding 'v8_util'"
        },
        {
          "filename": "filenames.gypi",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -37,6 +37,7 @@\n       'atom/common/api/lib/native-image.coffee',\n       'atom/common/api/lib/shell.coffee',\n       'atom/common/lib/init.coffee',\n+      'atom/common/lib/reset-search-paths.coffee',\n       'atom/renderer/lib/chrome-api.coffee',\n       'atom/renderer/lib/init.coffee',\n       'atom/renderer/lib/inspector.coffee',"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5680c628b6718385bbd975b51ec2640aa7df226b",
            "date": "2025-01-14T03:36:03Z",
            "author_login": "wujinli"
          },
          {
            "sha": "e57b69f106ae9c53a527038db4e8222692fa0ce7",
            "date": "2025-01-13T22:15:24Z",
            "author_login": "clavin"
          },
          {
            "sha": "19ee4464c211a0cef3bc5070fbd7b8bd0d5c3c7d",
            "date": "2025-01-11T00:21:08Z",
            "author_login": "mlaurencin"
          },
          {
            "sha": "7d05b7847943a01da3188523e720b17e67d47944",
            "date": "2025-01-10T16:52:34Z",
            "author_login": "electron-roller[bot]"
          },
          {
            "sha": "062d14e553fa85b14ca67b221911e82c5bc1bd12",
            "date": "2025-01-09T02:46:17Z",
            "author_login": "ckerr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": null,
    "description": "Untrusted search path vulnerability in Atom Electron before 0.33.5 allows local users to gain privileges via a Trojan horse Node.js module in a parent directory of a directory named on a require line.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2016-04-25T18:59:01.073",
    "last_modified": "2024-11-21T02:45:56.850",
    "fix_date": "2015-10-03T13:20:19Z"
  },
  "references": [
    {
      "url": "http://jvn.jp/en/jp/JVN00324715/index.html",
      "source": "vultures@jpcert.or.jp",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://jvndb.jvn.jp/jvndb/JVNDB-2016-000054",
      "source": "vultures@jpcert.or.jp",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/commit/9a2e2b365d061ec10cd861391fd5b1344af7194d",
      "source": "vultures@jpcert.or.jp",
      "tags": []
    },
    {
      "url": "https://github.com/electron/electron/pull/2976",
      "source": "vultures@jpcert.or.jp",
      "tags": []
    },
    {
      "url": "http://jvn.jp/en/jp/JVN00324715/index.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://jvndb.jvn.jp/jvndb/JVNDB-2016-000054",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/commit/9a2e2b365d061ec10cd861391fd5b1344af7194d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/electron/electron/pull/2976",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:42.528862",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "electron",
    "owner": "electron",
    "created_at": "2013-04-12T01:47:36Z",
    "updated_at": "2025-01-14T12:00:37Z",
    "pushed_at": "2025-01-14T12:17:40Z",
    "size": 160685,
    "stars": 115159,
    "forks": 15727,
    "open_issues": 986,
    "watchers": 115159,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1-3-x",
      "1-4-x",
      "1-5-x",
      "1-6-x",
      "1-7-x",
      "1-8-x",
      "2-0-x",
      "2-1-x",
      "3-0-x",
      "3-1-x",
      "4-0-x",
      "4-1-x",
      "4-2-x",
      "5-0-x",
      "6-0-x",
      "6-1-x",
      "7-0-x",
      "7-1-x",
      "7-2-x",
      "7-3-x",
      "8-x-y",
      "9-x-y",
      "10-x-y",
      "11-x-y",
      "12-x-y",
      "13-x-y",
      "14-x-y",
      "15-x-y",
      "16-x-y",
      "17-x-y"
    ],
    "languages": {
      "C++": 3784754,
      "TypeScript": 2172126,
      "Objective-C++": 404368,
      "JavaScript": 152129,
      "Python": 131385,
      "Objective-C": 44933,
      "HTML": 12057,
      "Shell": 8704,
      "Batchfile": 2794,
      "C": 2472,
      "CSS": 2369
    },
    "commit_activity": {
      "total_commits_last_year": 1162,
      "avg_commits_per_week": 22.346153846153847,
      "days_active_last_year": 245
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T12:58:58.367079"
  }
}