{
  "cve_id": "CVE-2016-2039",
  "github_data": {
    "repository": "phpmyadmin/phpmyadmin",
    "fix_commit": "cb7748ac9cffcd1cd0f3081499cd4aafa9d1065e",
    "related_commits": [
      "cb7748ac9cffcd1cd0f3081499cd4aafa9d1065e",
      "f20970d32c3dfdf82aef7b6c244da1f769043813",
      "cb7748ac9cffcd1cd0f3081499cd4aafa9d1065e",
      "f20970d32c3dfdf82aef7b6c244da1f769043813"
    ],
    "patch_url": "https://github.com/phpmyadmin/phpmyadmin/commit/cb7748ac9cffcd1cd0f3081499cd4aafa9d1065e.patch",
    "fix_commit_details": {
      "sha": "cb7748ac9cffcd1cd0f3081499cd4aafa9d1065e",
      "commit_date": "2016-01-19T07:47:02Z",
      "author": {
        "login": "nijel",
        "type": "User",
        "stats": {
          "total_commits": 16148,
          "average_weekly_commits": 13.592592592592593,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 613
        }
      },
      "commit_message": {
        "title": "Update phpseclib to 2.0.1",
        "length": 170,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 644,
        "additions": 305,
        "deletions": 339
      },
      "files": [
        {
          "filename": "libraries/phpseclib/Crypt/AES.php",
          "status": "modified",
          "additions": 10,
          "deletions": 10,
          "patch": "@@ -11,13 +11,13 @@\n  * just a wrapper to Rijndael.php you may consider using Rijndael.php instead of\n  * to save one include_once().\n  *\n- * If {@link \\phpseclib\\Crypt\\AES::setKeyLength() setKeyLength()} isn't called, it'll be calculated from\n- * {@link \\phpseclib\\Crypt\\AES::setKey() setKey()}.  ie. if the key is 128-bits, the key length will be 128-bits.  If it's 136-bits\n- * it'll be null-padded to 192-bits and 192 bits will be the key length until {@link \\phpseclib\\Crypt\\AES::setKey() setKey()}\n+ * If {@link self::setKeyLength() setKeyLength()} isn't called, it'll be calculated from\n+ * {@link self::setKey() setKey()}.  ie. if the key is 128-bits, the key length will be 128-bits.  If it's 136-bits\n+ * it'll be null-padded to 192-bits and 192 bits will be the key length until {@link self::setKey() setKey()}\n  * is called, again, at which point, it'll be recalculated.\n  *\n  * Since \\phpseclib\\Crypt\\AES extends \\phpseclib\\Crypt\\Rijndael, some functions are available to be called that, in the context of AES, don't\n- * make a whole lot of sense.  {@link \\phpseclib\\Crypt\\AES::setBlockLength() setBlockLength()}, for instance.  Calling that function,\n+ * make a whole lot of sense.  {@link self::setBlockLength() setBlockLength()}, for instance.  Calling that function,\n  * however possible, won't do anything (AES has a fixed block length whereas Rijndael has a variable one).\n  *\n  * Here's a short example of how to use this library:\n@@ -67,7 +67,7 @@ class AES extends Rijndael\n      *\n      * @see \\phpseclib\\Crypt\\Rijndael::setBlockLength()\n      * @access public\n-     * @param Integer $length\n+     * @param int $length\n      */\n     function setBlockLength($length)\n     {\n@@ -82,7 +82,7 @@ function setBlockLength($length)\n      *\n      * @see \\phpseclib\\Crypt\\Rijndael:setKeyLength()\n      * @access public\n-     * @param Integer $length\n+     * @param int $length\n      */\n     function setKeyLength($length)\n     {\n@@ -104,7 +104,7 @@ function setKeyLength($length)\n      * @see \\phpseclib\\Crypt\\Rijndael:setKey()\n      * @see setKeyLength()\n      * @access public\n-     * @param String $key\n+     * @param string $key\n      */\n     function setKey($key)\n     {\n@@ -114,13 +114,13 @@ function setKey($key)\n             $length = strlen($key);\n             switch (true) {\n                 case $length <= 16:\n-                    $this->key_size = 16;\n+                    $this->key_length = 16;\n                     break;\n                 case $length <= 24:\n-                    $this->key_size = 24;\n+                    $this->key_length = 24;\n                     break;\n                 default:\n-                    $this->key_size = 32;\n+                    $this->key_length = 32;\n             }\n             $this->_setEngine();\n         }"
        },
        {
          "filename": "libraries/phpseclib/Crypt/Base.php",
          "status": "modified",
          "additions": 212,
          "deletions": 160,
          "patch": "@@ -94,7 +94,7 @@ abstract class Base\n      * Whirlpool available flag\n      *\n      * @see \\phpseclib\\Crypt\\Base::_hashInlineCryptFunction()\n-     * @var Boolean\n+     * @var bool\n      * @access private\n      */\n     static $WHIRLPOOL_AVAILABLE;\n@@ -120,83 +120,83 @@ abstract class Base\n     /**\n      * The Encryption Mode\n      *\n-     * @see \\phpseclib\\Crypt\\Base::__construct()\n-     * @var Integer\n+     * @see self::__construct()\n+     * @var int\n      * @access private\n      */\n     var $mode;\n \n     /**\n      * The Block Length of the block cipher\n      *\n-     * @var Integer\n+     * @var int\n      * @access private\n      */\n     var $block_size = 16;\n \n     /**\n      * The Key\n      *\n-     * @see \\phpseclib\\Crypt\\Base::setKey()\n-     * @var String\n+     * @see self::setKey()\n+     * @var string\n      * @access private\n      */\n     var $key = \"\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\";\n \n     /**\n      * The Initialization Vector\n      *\n-     * @see \\phpseclib\\Crypt\\Base::setIV()\n-     * @var String\n+     * @see self::setIV()\n+     * @var string\n      * @access private\n      */\n     var $iv;\n \n     /**\n      * A \"sliding\" Initialization Vector\n      *\n-     * @see \\phpseclib\\Crypt\\Base::enableContinuousBuffer()\n-     * @see \\phpseclib\\Crypt\\Base::_clearBuffers()\n-     * @var String\n+     * @see self::enableContinuousBuffer()\n+     * @see self::_clearBuffers()\n+     * @var string\n      * @access private\n      */\n     var $encryptIV;\n \n     /**\n      * A \"sliding\" Initialization Vector\n      *\n-     * @see \\phpseclib\\Crypt\\Base::enableContinuousBuffer()\n-     * @see \\phpseclib\\Crypt\\Base::_clearBuffers()\n-     * @var String\n+     * @see self::enableContinuousBuffer()\n+     * @see self::_clearBuffers()\n+     * @var string\n      * @access private\n      */\n     var $decryptIV;\n \n     /**\n      * Continuous Buffer status\n      *\n-     * @see \\phpseclib\\Crypt\\Base::enableContinuousBuffer()\n-     * @var Boolean\n+     * @see self::enableContinuousBuffer()\n+     * @var bool\n      * @access private\n      */\n     var $continuousBuffer = false;\n \n     /**\n      * Encryption buffer for CTR, OFB and CFB modes\n      *\n-     * @see \\phpseclib\\Crypt\\Base::encrypt()\n-     * @see \\phpseclib\\Crypt\\Base::_clearBuffers()\n-     * @var Array\n+     * @see self::encrypt()\n+     * @see self::_clearBuffers()\n+     * @var array\n      * @access private\n      */\n     var $enbuffer;\n \n     /**\n      * Decryption buffer for CTR, OFB and CFB modes\n      *\n-     * @see \\phpseclib\\Crypt\\Base::decrypt()\n-     * @see \\phpseclib\\Crypt\\Base::_clearBuffers()\n-     * @var Array\n+     * @see self::decrypt()\n+     * @see self::_clearBuffers()\n+     * @var array\n      * @access private\n      */\n     var $debuffer;\n@@ -207,8 +207,8 @@ abstract class Base\n      * The mcrypt resource can be recreated every time something needs to be created or it can be created just once.\n      * Since mcrypt operates in continuous mode, by default, it'll need to be recreated when in non-continuous mode.\n      *\n-     * @see \\phpseclib\\Crypt\\Base::encrypt()\n-     * @var Resource\n+     * @see self::encrypt()\n+     * @var resource\n      * @access private\n      */\n     var $enmcrypt;\n@@ -219,8 +219,8 @@ abstract class Base\n      * The mcrypt resource can be recreated every time something needs to be created or it can be created just once.\n      * Since mcrypt operates in continuous mode, by default, it'll need to be recreated when in non-continuous mode.\n      *\n-     * @see \\phpseclib\\Crypt\\Base::decrypt()\n-     * @var Resource\n+     * @see self::decrypt()\n+     * @var resource\n      * @access private\n      */\n     var $demcrypt;\n@@ -230,7 +230,7 @@ abstract class Base\n      *\n      * @see \\phpseclib\\Crypt\\Twofish::setKey()\n      * @see \\phpseclib\\Crypt\\Twofish::setIV()\n-     * @var Boolean\n+     * @var bool\n      * @access private\n      */\n     var $enchanged = true;\n@@ -240,7 +240,7 @@ abstract class Base\n      *\n      * @see \\phpseclib\\Crypt\\Twofish::setKey()\n      * @see \\phpseclib\\Crypt\\Twofish::setIV()\n-     * @var Boolean\n+     * @var bool\n      * @access private\n      */\n     var $dechanged = true;\n@@ -256,10 +256,10 @@ abstract class Base\n      * use a separate ECB-mode mcrypt resource.\n      *\n      * @link http://phpseclib.sourceforge.net/cfb-demo.phps\n-     * @see \\phpseclib\\Crypt\\Base::encrypt()\n-     * @see \\phpseclib\\Crypt\\Base::decrypt()\n-     * @see \\phpseclib\\Crypt\\Base::_setupMcrypt()\n-     * @var Resource\n+     * @see self::encrypt()\n+     * @see self::decrypt()\n+     * @see self::_setupMcrypt()\n+     * @var resource\n      * @access private\n      */\n     var $ecb;\n@@ -280,37 +280,37 @@ abstract class Base\n      * which, typically, depends on the complexity\n      * on its internaly Key-expanding algorithm.\n      *\n-     * @see \\phpseclib\\Crypt\\Base::encrypt()\n-     * @var Integer\n+     * @see self::encrypt()\n+     * @var int\n      * @access private\n      */\n     var $cfb_init_len = 600;\n \n     /**\n      * Does internal cipher state need to be (re)initialized?\n      *\n-     * @see setKey()\n-     * @see setIV()\n-     * @see disableContinuousBuffer()\n-     * @var Boolean\n+     * @see self::setKey()\n+     * @see self::setIV()\n+     * @see self::disableContinuousBuffer()\n+     * @var bool\n      * @access private\n      */\n     var $changed = true;\n \n     /**\n      * Padding status\n      *\n-     * @see \\phpseclib\\Crypt\\Base::enablePadding()\n-     * @var Boolean\n+     * @see self::enablePadding()\n+     * @var bool\n      * @access private\n      */\n     var $padding = true;\n \n     /**\n      * Is the mode one that is paddable?\n      *\n-     * @see \\phpseclib\\Crypt\\Base::__construct()\n-     * @var Boolean\n+     * @see self::__construct()\n+     * @var bool\n      * @access private\n      */\n     var $paddable = false;\n@@ -324,20 +324,20 @@ abstract class Base\n      * - self::ENGINE_MCRYPT   (fast, php-extension: mcrypt, extension_loaded('mcrypt') required)\n      * - self::ENGINE_INTERNAL (slower, pure php-engine, no php-extension required)\n      *\n-     * @see \\phpseclib\\Crypt\\Base::_setEngine()\n-     * @see \\phpseclib\\Crypt\\Base::encrypt()\n-     * @see \\phpseclib\\Crypt\\Base::decrypt()\n-     * @var Integer\n+     * @see self::_setEngine()\n+     * @see self::encrypt()\n+     * @see self::decrypt()\n+     * @var int\n      * @access private\n      */\n     var $engine;\n \n     /**\n      * Holds the preferred crypt engine\n      *\n-     * @see \\phpseclib\\Crypt\\Base::_setEngine()\n-     * @see \\phpseclib\\Crypt\\Base::setPreferredEngine()\n-     * @var Integer\n+     * @see self::_setEngine()\n+     * @see self::setPreferredEngine()\n+     * @var int\n      * @access private\n      */\n     var $preferredEngine;\n@@ -349,19 +349,19 @@ abstract class Base\n      *\n      * @link http://www.php.net/mcrypt_module_open\n      * @link http://www.php.net/mcrypt_list_algorithms\n-     * @see \\phpseclib\\Crypt\\Base::_setupMcrypt()\n-     * @var String\n+     * @see self::_setupMcrypt()\n+     * @var string\n      * @access private\n      */\n     var $cipher_name_mcrypt;\n \n     /**\n      * The openssl specific name of the cipher\n      *\n-     * Only used if $engine == CRYPT_ENGINE_OPENSSL\n+     * Only used if $engine == self::ENGINE_OPENSSL\n      *\n      * @link http://www.php.net/openssl-get-cipher-methods\n-     * @var String\n+     * @var string\n      * @access private\n      */\n     var $cipher_name_openssl;\n@@ -373,25 +373,16 @@ abstract class Base\n      * it can still be emulated with ECB mode.\n      *\n      * @link http://www.php.net/openssl-get-cipher-methods\n-     * @var String\n+     * @var string\n      * @access private\n      */\n     var $cipher_name_openssl_ecb;\n \n-    /**\n-     * The default password key_size used by setPassword()\n-     *\n-     * @see \\phpseclib\\Crypt\\Base::setPassword()\n-     * @var Integer\n-     * @access private\n-     */\n-    var $password_key_size = 32;\n-\n     /**\n      * The default salt used by setPassword()\n      *\n-     * @see \\phpseclib\\Crypt\\Base::setPassword()\n-     * @var String\n+     * @see self::setPassword()\n+     * @var string\n      * @access private\n      */\n     var $password_default_salt = 'phpseclib/salt';\n@@ -402,10 +393,10 @@ abstract class Base\n      * Used by encrypt() / decrypt()\n      * only if $engine == self::ENGINE_INTERNAL\n      *\n-     * @see \\phpseclib\\Crypt\\Base::encrypt()\n-     * @see \\phpseclib\\Crypt\\Base::decrypt()\n-     * @see \\phpseclib\\Crypt\\Base::_setupInlineCrypt()\n-     * @see \\phpseclib\\Crypt\\Base::$use_inline_crypt\n+     * @see self::encrypt()\n+     * @see self::decrypt()\n+     * @see self::_setupInlineCrypt()\n+     * @see self::$use_inline_crypt\n      * @var Callback\n      * @access private\n      */\n@@ -414,9 +405,9 @@ abstract class Base\n     /**\n      * Holds whether performance-optimized $inline_crypt() can/should be used.\n      *\n-     * @see \\phpseclib\\Crypt\\Base::encrypt()\n-     * @see \\phpseclib\\Crypt\\Base::decrypt()\n-     * @see \\phpseclib\\Crypt\\Base::inline_crypt\n+     * @see self::encrypt()\n+     * @see self::decrypt()\n+     * @see self::inline_crypt\n      * @var mixed\n      * @access private\n      */\n@@ -425,21 +416,39 @@ abstract class Base\n     /**\n      * If OpenSSL can be used in ECB but not in CTR we can emulate CTR\n      *\n-     * @see \\phpseclib\\Crypt\\Base::_openssl_ctr_process()\n-     * @var Boolean\n+     * @see self::_openssl_ctr_process()\n+     * @var bool\n      * @access private\n      */\n     var $openssl_emulate_ctr = false;\n \n     /**\n      * Determines what options are passed to openssl_encrypt/decrypt\n      *\n-     * @see \\phpseclib\\Crypt\\Base::isValidEngine()\n+     * @see self::isValidEngine()\n      * @var mixed\n      * @access private\n      */\n     var $openssl_options;\n \n+    /**\n+     * Has the key length explicitly been set or should it be derived from the key, itself?\n+     *\n+     * @see self::setKeyLength()\n+     * @var bool\n+     * @access private\n+     */\n+    var $explicit_key_length = false;\n+\n+    /**\n+     * Don't truncate / null pad key\n+     *\n+     * @see self::_clearBuffers()\n+     * @var bool\n+     * @access private\n+     */\n+    var $skip_key_adjustment = false;\n+\n     /**\n      * Default Constructor.\n      *\n@@ -457,11 +466,9 @@ abstract class Base\n      *\n      * - self::MODE_OFB\n      *\n-     * (or the alias constants of the chosen cipher, for example for AES: CRYPT_AES_MODE_ECB or CRYPT_AES_MODE_CBC ...)\n-     *\n      * If not explicitly set, self::MODE_CBC will be used.\n      *\n-     * @param optional Integer $mode\n+     * @param int $mode\n      * @access public\n      */\n     function __construct($mode = self::MODE_CBC)\n@@ -499,7 +506,7 @@ function __construct($mode = self::MODE_CBC)\n      * to be all zero's.\n      *\n      * @access public\n-     * @param String $iv\n+     * @param string $iv\n      * @internal Can be overwritten by a sub class, but does not have to be\n      */\n     function setIV($iv)\n@@ -512,6 +519,43 @@ function setIV($iv)\n         $this->changed = true;\n     }\n \n+    /**\n+     * Sets the key length.\n+     *\n+     * Keys with explicitly set lengths need to be treated accordingly\n+     *\n+     * @access public\n+     * @param int $length\n+     */\n+    function setKeyLength($length)\n+    {\n+        $this->explicit_key_length = true;\n+        $this->changed = true;\n+        $this->_setEngine();\n+    }\n+\n+    /**\n+     * Returns the current key length in bits\n+     *\n+     * @access public\n+     * @return int\n+     */\n+    function getKeyLength()\n+    {\n+        return $this->key_length << 3;\n+    }\n+\n+    /**\n+     * Returns the current block length in bits\n+     *\n+     * @access public\n+     * @return int\n+     */\n+    function getBlockLength()\n+    {\n+        return $this->block_size << 3;\n+    }\n+\n     /**\n      * Sets the key.\n      *\n@@ -523,11 +567,16 @@ function setIV($iv)\n      * If the key is not explicitly set, it'll be assumed to be all null bytes.\n      *\n      * @access public\n-     * @param String $key\n+     * @param string $key\n      * @internal Could, but not must, extend by the child Crypt_* class\n      */\n     function setKey($key)\n     {\n+        if (!$this->explicit_key_length) {\n+            $this->setKeyLength(strlen($key) << 3);\n+            $this->explicit_key_length = false;\n+        }\n+\n         $this->key = $key;\n         $this->changed = true;\n         $this->_setEngine();\n@@ -543,9 +592,9 @@ function setKey($key)\n      *         Where $hash (default = sha1) currently supports the following hashes: see: Crypt/Hash.php\n      *\n      * @see Crypt/Hash.php\n-     * @param String $password\n-     * @param optional String $method\n-     * @return Boolean\n+     * @param string $password\n+     * @param string $method\n+     * @return bool\n      * @access public\n      * @internal Could, but not must, extend by the child Crypt_* class\n      */\n@@ -571,7 +620,7 @@ function setPassword($password, $method = 'pbkdf2')\n                 if (isset($func_args[5])) {\n                     $dkLen = $func_args[5];\n                 } else {\n-                    $dkLen = $method == 'pbkdf1' ? 2 * $this->password_key_size : $this->password_key_size;\n+                    $dkLen = $method == 'pbkdf1' ? 2 * $this->key_length : $this->key_length;\n                 }\n \n                 switch (true) {\n@@ -634,10 +683,10 @@ function setPassword($password, $method = 'pbkdf2')\n      * strlen($plaintext) will still need to be a multiple of the block size, however, arbitrary values can be added to make it that\n      * length.\n      *\n-     * @see \\phpseclib\\Crypt\\Base::decrypt()\n+     * @see self::decrypt()\n      * @access public\n-     * @param String $plaintext\n-     * @return String $ciphertext\n+     * @param string $plaintext\n+     * @return string $ciphertext\n      * @internal Could, but not must, extend by the child Crypt_* class\n      */\n     function encrypt($plaintext)\n@@ -914,7 +963,7 @@ function encrypt($plaintext)\n                 if ($this->continuousBuffer) {\n                     $this->encryptIV = $xor;\n                     if ($start = strlen($plaintext) % $block_size) {\n-                         $buffer['xor'] = substr($key, $start) . $buffer['xor'];\n+                        $buffer['xor'] = substr($key, $start) . $buffer['xor'];\n                     }\n                 }\n                 break;\n@@ -932,10 +981,10 @@ function encrypt($plaintext)\n      * If strlen($ciphertext) is not a multiple of the block size, null bytes will be added to the end of the string until\n      * it is.\n      *\n-     * @see \\phpseclib\\Crypt\\Base::encrypt()\n+     * @see self::encrypt()\n      * @access public\n-     * @param String $ciphertext\n-     * @return String $plaintext\n+     * @param string $ciphertext\n+     * @return string $plaintext\n      * @internal Could, but not must, extend by the child Crypt_* class\n      */\n     function decrypt($ciphertext)\n@@ -1204,7 +1253,7 @@ function decrypt($ciphertext)\n                 if ($this->continuousBuffer) {\n                     $this->decryptIV = $xor;\n                     if ($start = strlen($ciphertext) % $block_size) {\n-                         $buffer['xor'] = substr($key, $start) . $buffer['xor'];\n+                        $buffer['xor'] = substr($key, $start) . $buffer['xor'];\n                     }\n                 }\n                 break;\n@@ -1219,16 +1268,16 @@ function decrypt($ciphertext)\n      * OpenSSL CTR Processor\n      *\n      * PHP's OpenSSL bindings do not operate in continuous mode so we'll wrap around it. Since the keystream\n-     * for CTR is the same for both encrypting and decrypting this function is re-used by both Crypt_Base::encrypt()\n-     * and Crypt_Base::decrypt(). Also, OpenSSL doesn't implement CTR for all of it's symmetric ciphers so this\n+     * for CTR is the same for both encrypting and decrypting this function is re-used by both Base::encrypt()\n+     * and Base::decrypt(). Also, OpenSSL doesn't implement CTR for all of it's symmetric ciphers so this\n      * function will emulate CTR with ECB when necesary.\n      *\n-     * @see Crypt_Base::encrypt()\n-     * @see Crypt_Base::decrypt()\n-     * @param String $plaintext\n-     * @param String $encryptIV\n-     * @param Array $buffer\n-     * @return String\n+     * @see self::encrypt()\n+     * @see self::decrypt()\n+     * @param string $plaintext\n+     * @param string $encryptIV\n+     * @param array $buffer\n+     * @return string\n      * @access private\n      */\n     function _openssl_ctr_process($plaintext, &$encryptIV, &$buffer)\n@@ -1314,15 +1363,15 @@ function _openssl_ctr_process($plaintext, &$encryptIV, &$buffer)\n      * OpenSSL OFB Processor\n      *\n      * PHP's OpenSSL bindings do not operate in continuous mode so we'll wrap around it. Since the keystream\n-     * for OFB is the same for both encrypting and decrypting this function is re-used by both Crypt_Base::encrypt()\n-     * and Crypt_Base::decrypt().\n-     *\n-     * @see Crypt_Base::encrypt()\n-     * @see Crypt_Base::decrypt()\n-     * @param String $plaintext\n-     * @param String $encryptIV\n-     * @param Array $buffer\n-     * @return String\n+     * for OFB is the same for both encrypting and decrypting this function is re-used by both Base::encrypt()\n+     * and Base::decrypt().\n+     *\n+     * @see self::encrypt()\n+     * @see self::decrypt()\n+     * @param string $plaintext\n+     * @param string $encryptIV\n+     * @param array $buffer\n+     * @return string\n      * @access private\n      */\n     function _openssl_ofb_process($plaintext, &$encryptIV, &$buffer)\n@@ -1368,7 +1417,7 @@ function _openssl_ofb_process($plaintext, &$encryptIV, &$buffer)\n      *\n      * May need to be overwritten by classes extending this one in some cases\n      *\n-     * @return Integer\n+     * @return int\n      * @access private\n      */\n     function _openssl_translate_mode()\n@@ -1399,7 +1448,7 @@ function _openssl_translate_mode()\n      * away characters that shouldn't be stripped away. (SSH knows how many bytes are added because the length is\n      * transmitted separately)\n      *\n-     * @see \\phpseclib\\Crypt\\Base::disablePadding()\n+     * @see self::disablePadding()\n      * @access public\n      */\n     function enablePadding()\n@@ -1410,7 +1459,7 @@ function enablePadding()\n     /**\n      * Do not pad packets.\n      *\n-     * @see \\phpseclib\\Crypt\\Base::enablePadding()\n+     * @see self::enablePadding()\n      * @access public\n      */\n     function disablePadding()\n@@ -1452,7 +1501,7 @@ function disablePadding()\n      * continuous buffers not be used.  They do offer better security and are, in fact, sometimes required (SSH uses them),\n      * however, they are also less intuitive and more likely to cause you problems.\n      *\n-     * @see \\phpseclib\\Crypt\\Base::disableContinuousBuffer()\n+     * @see self::disableContinuousBuffer()\n      * @access public\n      * @internal Could, but not must, extend by the child Crypt_* class\n      */\n@@ -1472,7 +1521,7 @@ function enableContinuousBuffer()\n      *\n      * The default behavior.\n      *\n-     * @see \\phpseclib\\Crypt\\Base::enableContinuousBuffer()\n+     * @see self::enableContinuousBuffer()\n      * @access public\n      * @internal Could, but not must, extend by the child Crypt_* class\n      */\n@@ -1494,10 +1543,10 @@ function disableContinuousBuffer()\n     /**\n      * Test for engine validity\n      *\n-     * @see \\phpseclib\\Crypt\\Base::Crypt_Base()\n-     * @param Integer $engine\n+     * @see self::__construct()\n+     * @param int $engine\n      * @access public\n-     * @return Boolean\n+     * @return bool\n      */\n     function isValidEngine($engine)\n     {\n@@ -1561,8 +1610,8 @@ function isValidEngine($engine)\n      *\n      * If the preferred crypt engine is not available the fastest available one will be used\n      *\n-     * @see \\phpseclib\\Crypt\\Base::Crypt_Base()\n-     * @param Integer $engine\n+     * @see self::__construct()\n+     * @param int $engine\n      * @access public\n      */\n     function setPreferredEngine($engine)\n@@ -1583,7 +1632,7 @@ function setPreferredEngine($engine)\n     /**\n      * Returns the engine currently being utilized\n      *\n-     * @see \\phpseclib\\Crypt\\Base::_setEngine()\n+     * @see self::_setEngine()\n      * @access public\n      */\n     function getEngine()\n@@ -1594,7 +1643,7 @@ function getEngine()\n     /**\n      * Sets the engine as appropriate\n      *\n-     * @see \\phpseclib\\Crypt\\Base::Crypt_Base()\n+     * @see self::__construct()\n      * @access private\n      */\n     function _setEngine()\n@@ -1639,8 +1688,8 @@ function _setEngine()\n      * Note: Must be extended by the child \\phpseclib\\Crypt\\* class\n      *\n      * @access private\n-     * @param String $in\n-     * @return String\n+     * @param string $in\n+     * @return string\n      */\n     abstract function _encryptBlock($in);\n \n@@ -1650,8 +1699,8 @@ abstract function _encryptBlock($in);\n      * Note: Must be extended by the child \\phpseclib\\Crypt\\* class\n      *\n      * @access private\n-     * @param String $in\n-     * @return String\n+     * @param string $in\n+     * @return string\n      */\n     abstract function _decryptBlock($in);\n \n@@ -1662,7 +1711,7 @@ abstract function _decryptBlock($in);\n      *\n      * Note: Must extend by the child \\phpseclib\\Crypt\\* class\n      *\n-     * @see \\phpseclib\\Crypt\\Base::_setup()\n+     * @see self::_setup()\n      * @access private\n      */\n     abstract function _setupKey();\n@@ -1684,9 +1733,9 @@ abstract function _setupKey();\n      *\n      * - First run of encrypt() / decrypt() with no init-settings\n      *\n-     * @see setKey()\n-     * @see setIV()\n-     * @see disableContinuousBuffer()\n+     * @see self::setKey()\n+     * @see self::setIV()\n+     * @see self::disableContinuousBuffer()\n      * @access private\n      * @internal _setup() is always called before en/decryption.\n      * @internal Could, but not must, extend by the child Crypt_* class\n@@ -1718,9 +1767,9 @@ function _setup()\n      *\n      * - First run of encrypt() / decrypt()\n      *\n-     * @see setKey()\n-     * @see setIV()\n-     * @see disableContinuousBuffer()\n+     * @see self::setKey()\n+     * @see self::setIV()\n+     * @see self::disableContinuousBuffer()\n      * @access private\n      * @internal Could, but not must, extend by the child Crypt_* class\n      */\n@@ -1748,7 +1797,6 @@ function _setupMcrypt()\n             if ($this->mode == self::MODE_CFB) {\n                 $this->ecb = mcrypt_module_open($this->cipher_name_mcrypt, '', MCRYPT_MODE_ECB, '');\n             }\n-\n         } // else should mcrypt_generic_deinit be called?\n \n         if ($this->mode == self::MODE_CFB) {\n@@ -1766,10 +1814,10 @@ function _setupMcrypt()\n      * If padding is disabled and $text is not a multiple of the blocksize, the string will be padded regardless\n      * and padding will, hence forth, be enabled.\n      *\n-     * @see \\phpseclib\\Crypt\\Base::_unpad()\n-     * @param String $text\n+     * @see self::_unpad()\n+     * @param string $text\n      * @access private\n-     * @return String\n+     * @return string\n      */\n     function _pad($text)\n     {\n@@ -1795,10 +1843,10 @@ function _pad($text)\n      * If padding is enabled and the reported padding length is invalid the encryption key will be assumed to be wrong\n      * and false will be returned.\n      *\n-     * @see \\phpseclib\\Crypt\\Base::_pad()\n-     * @param String $text\n+     * @see self::_pad()\n+     * @param string $text\n      * @access private\n-     * @return String\n+     * @return string\n      */\n     function _unpad($text)\n     {\n@@ -1832,17 +1880,21 @@ function _clearBuffers()\n         // mcrypt's handling of invalid's $iv:\n         // $this->encryptIV = $this->decryptIV = strlen($this->iv) == $this->block_size ? $this->iv : str_repeat(\"\\0\", $this->block_size);\n         $this->encryptIV = $this->decryptIV = str_pad(substr($this->iv, 0, $this->block_size), $this->block_size, \"\\0\");\n+\n+        if (!$this->skip_key_adjustment) {\n+            $this->key = str_pad(substr($this->key, 0, $this->key_length), $this->key_length, \"\\0\");\n+        }\n     }\n \n     /**\n      * String Shift\n      *\n      * Inspired by array_shift\n      *\n-     * @param String $string\n-     * @param optional Integer $index\n+     * @param string $string\n+     * @param int $index\n      * @access private\n-     * @return String\n+     * @return string\n      */\n     function _string_shift(&$string, $index = 1)\n     {\n@@ -1856,10 +1908,10 @@ function _string_shift(&$string, $index = 1)\n      *\n      * Inspired by array_pop\n      *\n-     * @param String $string\n-     * @param optional Integer $index\n+     * @param string $string\n+     * @param int $index\n      * @access private\n-     * @return String\n+     * @return string\n      */\n     function _string_pop(&$string, $index = 1)\n     {\n@@ -1871,9 +1923,9 @@ function _string_pop(&$string, $index = 1)\n     /**\n      * Increment the current string\n      *\n-     * @see \\phpseclib\\Crypt\\Base::decrypt()\n-     * @see \\phpseclib\\Crypt\\Base::encrypt()\n-     * @param String $var\n+     * @see self::decrypt()\n+     * @see self::encrypt()\n+     * @param string $var\n      * @access private\n      */\n     function _increment_str(&$var)\n@@ -1958,10 +2010,10 @@ function _increment_str(&$var)\n      *       - The callback function should not use the 'return' statement, but en/decrypt'ing the content of $in only\n      *\n      *\n-     * @see \\phpseclib\\Crypt\\Base::_setup()\n-     * @see \\phpseclib\\Crypt\\Base::_createInlineCryptFunction()\n-     * @see \\phpseclib\\Crypt\\Base::encrypt()\n-     * @see \\phpseclib\\Crypt\\Base::decrypt()\n+     * @see self::_setup()\n+     * @see self::_createInlineCryptFunction()\n+     * @see self::encrypt()\n+     * @see self::decrypt()\n      * @access private\n      * @internal If a Crypt_* class providing inline crypting it must extend _setupInlineCrypt()\n      */\n@@ -2080,12 +2132,12 @@ function _setupInlineCrypt()\n      *    );\n      *    </code>\n      *\n-     * @see \\phpseclib\\Crypt\\Base::_setupInlineCrypt()\n-     * @see \\phpseclib\\Crypt\\Base::encrypt()\n-     * @see \\phpseclib\\Crypt\\Base::decrypt()\n-     * @param Array $cipher_code\n+     * @see self::_setupInlineCrypt()\n+     * @see self::encrypt()\n+     * @see self::decrypt()\n+     * @param array $cipher_code\n      * @access private\n-     * @return String (the name of the created callback function)\n+     * @return string (the name of the created callback function)\n      */\n     function _createInlineCryptFunction($cipher_code)\n     {\n@@ -2452,7 +2504,7 @@ function _createInlineCryptFunction($cipher_code)\n      * for which $mode the lambda function was created.\n      *\n      * @access private\n-     * @return Array &$functions\n+     * @return array &$functions\n      */\n     function &_getLambdaFunctions()\n     {\n@@ -2463,10 +2515,10 @@ function &_getLambdaFunctions()\n     /**\n      * Generates a digest from $bytes\n      *\n-     * @see _setupInlineCrypt()\n+     * @see self::_setupInlineCrypt()\n      * @access private\n      * @param $bytes\n-     * @return String\n+     * @return string\n      */\n     function _hashInlineCryptFunction($bytes)\n     {"
        },
        {
          "filename": "libraries/phpseclib/Crypt/Random.php",
          "status": "modified",
          "additions": 20,
          "deletions": 7,
          "patch": "@@ -48,15 +48,28 @@ class Random\n      * microoptimizations because this function has the potential of being called a huge number of times.\n      * eg. for RSA key generation.\n      *\n-     * @param Integer $length\n-     * @return String\n+     * @param int $length\n+     * @return string\n      */\n-    public static function string($length)\n+    static function string($length)\n     {\n+        if (version_compare(PHP_VERSION, '7.0.0', '>=')) {\n+            try {\n+                return \\random_bytes($length);\n+            } catch (\\Throwable $e) {\n+                // If a sufficient source of randomness is unavailable, random_bytes() will throw an\n+                // object that implements the Throwable interface (Exception, TypeError, Error).\n+                // We don't actually need to do anything here. The string() method should just continue\n+                // as normal. Note, however, that if we don't have a sufficient source of randomness for\n+                // random_bytes(), most of the other calls here will fail too, so we'll end up using\n+                // the PHP implementation.\n+            }\n+        }\n+\n         if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n             // method 1. prior to PHP 5.3 this would call rand() on windows hence the function_exists('class_alias') call.\n             // ie. class_alias is a function that was introduced in PHP 5.3\n-            if (function_exists('mcrypt_create_iv') && function_exists('class_alias')) {\n+            if (extension_loaded('mcrypt') && function_exists('class_alias')) {\n                 return mcrypt_create_iv($length);\n             }\n             // method 2. openssl_random_pseudo_bytes was introduced in PHP 5.3.0 but prior to PHP 5.3.4 there was,\n@@ -72,12 +85,12 @@ public static function string($length)\n             // https://github.com/php/php-src/blob/7014a0eb6d1611151a286c0ff4f2238f92c120d6/win32/winutil.c#L80\n             //\n             // we're calling it, all the same, in the off chance that the mcrypt extension is not available\n-            if (function_exists('openssl_random_pseudo_bytes') && version_compare(PHP_VERSION, '5.3.4', '>=')) {\n+            if (extension_loaded('openssl') && version_compare(PHP_VERSION, '5.3.4', '>=')) {\n                 return openssl_random_pseudo_bytes($length);\n             }\n         } else {\n             // method 1. the fastest\n-            if (function_exists('openssl_random_pseudo_bytes')) {\n+            if (extension_loaded('openssl')) {\n                 return openssl_random_pseudo_bytes($length);\n             }\n             // method 2\n@@ -95,7 +108,7 @@ public static function string($length)\n             // surprisingly slower than method 2. maybe that's because mcrypt_create_iv does a bunch of error checking that we're\n             // not doing. regardless, this'll only be called if this PHP script couldn't open /dev/urandom due to open_basedir\n             // restrictions or some such\n-            if (function_exists('mcrypt_create_iv')) {\n+            if (extension_loaded('mcrypt')) {\n                 return mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);\n             }\n         }"
        },
        {
          "filename": "libraries/phpseclib/Crypt/Rijndael.php",
          "status": "modified",
          "additions": 63,
          "deletions": 162,
          "patch": "@@ -7,11 +7,11 @@\n  *\n  * PHP version 5\n  *\n- * If {@link \\phpseclib\\Crypt\\Rijndael::setBlockLength() setBlockLength()} isn't called, it'll be assumed to be 128 bits.  If\n- * {@link \\phpseclib\\Crypt\\Rijndael::setKeyLength() setKeyLength()} isn't called, it'll be calculated from\n- * {@link \\phpseclib\\Crypt\\Rijndael::setKey() setKey()}.  ie. if the key is 128-bits, the key length will be 128-bits.  If it's\n+ * If {@link self::setBlockLength() setBlockLength()} isn't called, it'll be assumed to be 128 bits.  If\n+ * {@link self::setKeyLength() setKeyLength()} isn't called, it'll be calculated from\n+ * {@link self::setKey() setKey()}.  ie. if the key is 128-bits, the key length will be 128-bits.  If it's\n  * 136-bits it'll be null-padded to 192-bits and 192 bits will be the key length until\n- * {@link \\phpseclib\\Crypt\\Rijndael::setKey() setKey()} is called, again, at which point, it'll be recalculated.\n+ * {@link self::setKey() setKey()} is called, again, at which point, it'll be recalculated.\n  *\n  * Not all Rijndael implementations may support 160-bits or 224-bits as the block length / key length.  mcrypt, for example,\n  * does not.  AES, itself, only supports block lengths of 128 and key lengths of 128, 192, and 256.\n@@ -65,28 +65,18 @@\n  */\n class Rijndael extends Base\n {\n-    /**\n-     * The default password key_size used by setPassword()\n-     *\n-     * @see \\phpseclib\\Crypt\\Base::password_key_size\n-     * @see \\phpseclib\\Crypt\\Base::setPassword()\n-     * @var Integer\n-     * @access private\n-     */\n-    var $password_key_size = 16;\n-\n     /**\n      * The mcrypt specific name of the cipher\n      *\n-     * Mcrypt is useable for 128/192/256-bit $block_size/$key_size. For 160/224 not.\n+     * Mcrypt is useable for 128/192/256-bit $block_size/$key_length. For 160/224 not.\n      * \\phpseclib\\Crypt\\Rijndael determines automatically whether mcrypt is useable\n-     * or not for the current $block_size/$key_size.\n+     * or not for the current $block_size/$key_length.\n      * In case of, $cipher_name_mcrypt will be set dynamically at run time accordingly.\n      *\n      * @see \\phpseclib\\Crypt\\Base::cipher_name_mcrypt\n      * @see \\phpseclib\\Crypt\\Base::engine\n-     * @see isValidEngine()\n-     * @var String\n+     * @see self::isValidEngine()\n+     * @var string\n      * @access private\n      */\n     var $cipher_name_mcrypt = 'rijndael-128';\n@@ -96,43 +86,34 @@ class Rijndael extends Base\n      *\n      * @see \\phpseclib\\Crypt\\Base::password_default_salt\n      * @see \\phpseclib\\Crypt\\Base::setPassword()\n-     * @var String\n+     * @var string\n      * @access private\n      */\n     var $password_default_salt = 'phpseclib';\n \n-    /**\n-     * Has the key length explicitly been set or should it be derived from the key, itself?\n-     *\n-     * @see setKeyLength()\n-     * @var Boolean\n-     * @access private\n-     */\n-    var $explicit_key_length = false;\n-\n     /**\n      * The Key Schedule\n      *\n-     * @see _setup()\n-     * @var Array\n+     * @see self::_setup()\n+     * @var array\n      * @access private\n      */\n     var $w;\n \n     /**\n      * The Inverse Key Schedule\n      *\n-     * @see _setup()\n-     * @var Array\n+     * @see self::_setup()\n+     * @var array\n      * @access private\n      */\n     var $dw;\n \n     /**\n      * The Block Length divided by 32\n      *\n-     * @see setBlockLength()\n-     * @var Integer\n+     * @see self::setBlockLength()\n+     * @var int\n      * @access private\n      * @internal The max value is 256 / 32 = 8, the min value is 128 / 32 = 4.  Exists in conjunction with $block_size\n      *    because the encryption / decryption / key schedule creation requires this number and not $block_size.  We could\n@@ -142,23 +123,23 @@ class Rijndael extends Base\n     var $Nb = 4;\n \n     /**\n-     * The Key Length\n+     * The Key Length (in bytes)\n      *\n-     * @see setKeyLength()\n-     * @var Integer\n+     * @see self::setKeyLength()\n+     * @var int\n      * @access private\n      * @internal The max value is 256 / 8 = 32, the min value is 128 / 8 = 16.  Exists in conjunction with $Nk\n-     *    because the encryption / decryption / key schedule creation requires this number and not $key_size.  We could\n-     *    derive this from $key_size or vice versa, but that'd mean we'd have to do multiple shift operations, so in lieu\n+     *    because the encryption / decryption / key schedule creation requires this number and not $key_length.  We could\n+     *    derive this from $key_length or vice versa, but that'd mean we'd have to do multiple shift operations, so in lieu\n      *    of that, we'll just precompute it once.\n      */\n-    var $key_size = 16;\n+    var $key_length = 16;\n \n     /**\n      * The Key Length divided by 32\n      *\n-     * @see setKeyLength()\n-     * @var Integer\n+     * @see self::setKeyLength()\n+     * @var int\n      * @access private\n      * @internal The max value is 256 / 32 = 8, the min value is 128 / 32 = 4\n      */\n@@ -167,7 +148,7 @@ class Rijndael extends Base\n     /**\n      * The Number of Rounds\n      *\n-     * @var Integer\n+     * @var int\n      * @access private\n      * @internal The max value is 14, the min value is 10.\n      */\n@@ -176,85 +157,21 @@ class Rijndael extends Base\n     /**\n      * Shift offsets\n      *\n-     * @var Array\n+     * @var array\n      * @access private\n      */\n     var $c;\n \n     /**\n      * Holds the last used key- and block_size information\n      *\n-     * @var Array\n+     * @var array\n      * @access private\n      */\n     var $kl;\n \n     /**\n-     * Default Constructor.\n-     *\n-     * Determines whether or not the mcrypt extension should be used.\n-     *\n-     * $mode could be:\n-     *\n-     * - \\phpseclib\\Crypt\\Base::MODE_ECB\n-     *\n-     * - \\phpseclib\\Crypt\\Base::MODE_CBC\n-     *\n-     * - \\phpseclib\\Crypt\\Base::MODE_CTR\n-     *\n-     * - \\phpseclib\\Crypt\\Base::MODE_CFB\n-     *\n-     * - \\phpseclib\\Crypt\\Base::MODE_OFB\n-     *\n-     * If not explictly set, \\phpseclib\\Crypt\\Base::MODE_CBC will be used.\n-     *\n-     * @see \\phpseclib\\Crypt\\Base::Crypt_Base()\n-     * @param optional Integer $mode\n-     * @access public\n-\n-    /**\n-     * Sets the key.\n-     *\n-     * Keys can be of any length.  Rijndael, itself, requires the use of a key that's between 128-bits and 256-bits long and\n-     * whose length is a multiple of 32.  If the key is less than 256-bits and the key length isn't set, we round the length\n-     * up to the closest valid key length, padding $key with null bytes.  If the key is more than 256-bits, we trim the\n-     * excess bits.\n-     *\n-     * If the key is not explicitly set, it'll be assumed to be all null bytes.\n-     *\n-     * Note: 160/224-bit keys must explicitly set by setKeyLength(), otherwise they will be round/pad up to 192/256 bits.\n-     *\n-     * @see \\phpseclib\\Crypt\\Base:setKey()\n-     * @see setKeyLength()\n-     * @access public\n-     * @param String $key\n-     */\n-    function setKey($key)\n-    {\n-        if (!$this->explicit_key_length) {\n-            $length = strlen($key);\n-            switch (true) {\n-                case $length <= 16:\n-                    $this->key_size = 16;\n-                    break;\n-                case $length <= 20:\n-                    $this->key_size = 20;\n-                    break;\n-                case $length <= 24:\n-                    $this->key_size = 24;\n-                    break;\n-                case $length <= 28:\n-                    $this->key_size = 28;\n-                    break;\n-                default:\n-                    $this->key_size = 32;\n-            }\n-        }\n-        parent::setKey($key);\n-    }\n-\n-    /**\n-     * Sets the key length\n+     * Sets the key length.\n      *\n      * Valid key lengths are 128, 160, 192, 224, and 256.  If the length is less than 128, it will be rounded up to\n      * 128.  If the length is greater than 128 and invalid, it will be rounded down to the closest valid amount.\n@@ -271,30 +188,28 @@ function setKey($key)\n      *             This results then in slower encryption.\n      *\n      * @access public\n-     * @param Integer $length\n+     * @param int $length\n      */\n     function setKeyLength($length)\n     {\n         switch (true) {\n-            case $length == 160:\n-                $this->key_size = 20;\n-                break;\n-            case $length == 224:\n-                $this->key_size = 28;\n-                break;\n             case $length <= 128:\n-                $this->key_size = 16;\n+                $this->key_length = 16;\n+                break;\n+            case $length <= 160:\n+                $this->key_length = 20;\n                 break;\n             case $length <= 192:\n-                $this->key_size = 24;\n+                $this->key_length = 24;\n+                break;\n+            case $length <= 224:\n+                $this->key_length = 28;\n                 break;\n             default:\n-                $this->key_size = 32;\n+                $this->key_length = 32;\n         }\n \n-        $this->explicit_key_length = true;\n-        $this->changed = true;\n-        $this->_setEngine();\n+        parent::setKeyLength($length);\n     }\n \n     /**\n@@ -304,7 +219,7 @@ function setKeyLength($length)\n      * 128.  If the length is greater than 128 and invalid, it will be rounded down to the closest valid amount.\n      *\n      * @access public\n-     * @param Integer $length\n+     * @param int $length\n      */\n     function setBlockLength($length)\n     {\n@@ -325,10 +240,10 @@ function setBlockLength($length)\n      *\n      * This is mainly just a wrapper to set things up for \\phpseclib\\Crypt\\Base::isValidEngine()\n      *\n-     * @see \\phpseclib\\Crypt\\Base::Crypt_Base()\n-     * @param Integer $engine\n+     * @see \\phpseclib\\Crypt\\Base::__construct()\n+     * @param int $engine\n      * @access public\n-     * @return Boolean\n+     * @return bool\n      */\n     function isValidEngine($engine)\n     {\n@@ -337,12 +252,12 @@ function isValidEngine($engine)\n                 if ($this->block_size != 16) {\n                     return false;\n                 }\n-                $this->cipher_name_openssl_ecb = 'aes-' . ($this->key_size << 3) . '-ecb';\n-                $this->cipher_name_openssl = 'aes-' . ($this->key_size << 3) . '-' . $this->_openssl_translate_mode();\n+                $this->cipher_name_openssl_ecb = 'aes-' . ($this->key_length << 3) . '-ecb';\n+                $this->cipher_name_openssl = 'aes-' . ($this->key_length << 3) . '-' . $this->_openssl_translate_mode();\n                 break;\n             case self::ENGINE_MCRYPT:\n                 $this->cipher_name_mcrypt = 'rijndael-' . ($this->block_size << 3);\n-                if ($this->key_size % 8) { // is it a 160/224-bit key?\n+                if ($this->key_length % 8) { // is it a 160/224-bit key?\n                     // mcrypt is not usable for them, only for 128/192/256-bit keys\n                     return false;\n                 }\n@@ -351,24 +266,12 @@ function isValidEngine($engine)\n         return parent::isValidEngine($engine);\n     }\n \n-    /**\n-     * Setup the \\phpseclib\\Crypt\\Base::ENGINE_MCRYPT $engine\n-     *\n-     * @see \\phpseclib\\Crypt\\Base::_setupMcrypt()\n-     * @access private\n-     */\n-    function _setupMcrypt()\n-    {\n-        $this->key = str_pad(substr($this->key, 0, $this->key_size), $this->key_size, \"\\0\");\n-        parent::_setupMcrypt();\n-    }\n-\n     /**\n      * Encrypts a block\n      *\n      * @access private\n-     * @param String $in\n-     * @return String\n+     * @param string $in\n+     * @return string\n      */\n     function _encryptBlock($in)\n     {\n@@ -468,8 +371,8 @@ function _encryptBlock($in)\n      * Decrypts a block\n      *\n      * @access private\n-     * @param String $in\n-     * @return String\n+     * @param string $in\n+     * @return string\n      */\n     function _decryptBlock($in)\n     {\n@@ -573,15 +476,13 @@ function _setupKey()\n             0x7D000000, 0xFA000000, 0xEF000000, 0xC5000000, 0x91000000\n         );\n \n-        $this->key = str_pad(substr($this->key, 0, $this->key_size), $this->key_size, \"\\0\");\n-\n-        if (isset($this->kl['key']) && $this->key === $this->kl['key'] && $this->key_size === $this->kl['key_size'] && $this->block_size === $this->kl['block_size']) {\n+        if (isset($this->kl['key']) && $this->key === $this->kl['key'] && $this->key_length === $this->kl['key_length'] && $this->block_size === $this->kl['block_size']) {\n             // already expanded\n             return;\n         }\n-        $this->kl = array('key' => $this->key, 'key_size' => $this->key_size, 'block_size' => $this->block_size);\n+        $this->kl = array('key' => $this->key, 'key_length' => $this->key_length, 'block_size' => $this->block_size);\n \n-        $this->Nk = $this->key_size >> 2;\n+        $this->Nk = $this->key_length >> 2;\n         // see Rijndael-ammended.pdf#page=44\n         $this->Nr = max($this->Nk, $this->Nb) + 6;\n \n@@ -673,13 +574,13 @@ function _setupKey()\n      * Performs S-Box substitutions\n      *\n      * @access private\n-     * @param Integer $word\n+     * @param int $word\n      */\n     function _subWord($word)\n     {\n         static $sbox;\n         if (empty($sbox)) {\n-            list(,,,, $sbox) = $this->_getTables();\n+            list(, , , , $sbox) = $this->_getTables();\n         }\n \n         return  $sbox[$word       & 0x000000FF]        |\n@@ -691,11 +592,11 @@ function _subWord($word)\n     /**\n      * Provides the mixColumns and sboxes tables\n      *\n-     * @see Crypt_Rijndael:_encryptBlock()\n-     * @see Crypt_Rijndael:_setupInlineCrypt()\n-     * @see Crypt_Rijndael:_subWord()\n+     * @see self::_encryptBlock()\n+     * @see self::_setupInlineCrypt()\n+     * @see self::_subWord()\n      * @access private\n-     * @return Array &$tables\n+     * @return array &$tables\n      */\n     function &_getTables()\n     {\n@@ -780,11 +681,11 @@ function &_getTables()\n     /**\n      * Provides the inverse mixColumns and inverse sboxes tables\n      *\n-     * @see Crypt_Rijndael:_decryptBlock()\n-     * @see Crypt_Rijndael:_setupInlineCrypt()\n-     * @see Crypt_Rijndael:_setupKey()\n+     * @see self::_decryptBlock()\n+     * @see self::_setupInlineCrypt()\n+     * @see self::_setupKey()\n      * @access private\n-     * @return Array &$tables\n+     * @return array &$tables\n      */\n     function &_getInvTables()\n     {\n@@ -878,7 +779,7 @@ function _setupInlineCrypt()\n         // We create max. 10 hi-optimized code for memory reason. Means: For each $key one ultra fast inline-crypt function.\n         // (Currently, for Crypt_Rijndael/AES, one generated $lambda_function cost on php5.5@32bit ~80kb unfreeable mem and ~130kb on php5.5@64bit)\n         // After that, we'll still create very fast optimized code but not the hi-ultimative code, for each $mode one.\n-        $gen_hi_opt_code = (bool)( count($lambda_functions) < 10 );\n+        $gen_hi_opt_code = (bool)(count($lambda_functions) < 10);\n \n         // Generation of a uniqe hash for our generated code\n         $code_hash = \"Crypt_Rijndael, {$this->mode}, {$this->Nr}, {$this->Nb}\";"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1280adb2c8c3648b90804c685adeb3dcff3e2d8e",
            "date": "2025-01-13T19:17:52Z",
            "author_login": "MauricioFauth"
          },
          {
            "sha": "01013880dfa2b23897a96bc363b58cc954abe226",
            "date": "2025-01-13T17:49:00Z",
            "author_login": "liviuconcioiu"
          },
          {
            "sha": "580a7b1adf1c12d42226ace7777499381a174695",
            "date": "2025-01-13T01:51:23Z",
            "author_login": "williamdes"
          },
          {
            "sha": "227a2f68c6c9652e62fc9b6026c01e7dd4ceddf2",
            "date": "2025-01-13T01:48:56Z",
            "author_login": "williamdes"
          },
          {
            "sha": "3274eca15b0c95a8e3db7a8adf576b6f0b904641",
            "date": "2025-01-13T01:23:07Z",
            "author_login": "williamdes"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-200",
    "description": "libraries/session.inc.php in phpMyAdmin 4.0.x before 4.0.10.13, 4.4.x before 4.4.15.3, and 4.5.x before 4.5.4 does not properly generate CSRF token values, which allows remote attackers to bypass intended access restrictions by predicting a value.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2016-02-20T01:59:02.140",
    "last_modified": "2024-11-21T02:47:39.943",
    "fix_date": "2016-01-19T07:47:02Z"
  },
  "references": [
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176483.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176739.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00028.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00049.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.debian.org/security/2016/dsa-3627",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.phpmyadmin.net/home_page/security/PMASA-2016-2.php",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/cb7748ac9cffcd1cd0f3081499cd4aafa9d1065e",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/f20970d32c3dfdf82aef7b6c244da1f769043813",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176483.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176739.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00028.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00049.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.debian.org/security/2016/dsa-3627",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.phpmyadmin.net/home_page/security/PMASA-2016-2.php",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/cb7748ac9cffcd1cd0f3081499cd4aafa9d1065e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/f20970d32c3dfdf82aef7b6c244da1f769043813",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:40.210794",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "phpmyadmin",
    "owner": "phpmyadmin",
    "created_at": "2012-01-19T13:21:52Z",
    "updated_at": "2025-01-13T23:05:28Z",
    "pushed_at": "2025-01-13T22:05:32Z",
    "size": 2082161,
    "stars": 7343,
    "forks": 3442,
    "open_issues": 855,
    "watchers": 7343,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "QA_4_7",
      "QA_4_8",
      "QA_5_0",
      "master"
    ],
    "languages": {
      "PHP": 8222311,
      "TypeScript": 1345556,
      "Twig": 804427,
      "SCSS": 312156,
      "Shell": 52309,
      "JavaScript": 16982,
      "Hack": 588
    },
    "commit_activity": {
      "total_commits_last_year": 1510,
      "avg_commits_per_week": 29.03846153846154,
      "days_active_last_year": 306
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:04:35.166546"
  }
}