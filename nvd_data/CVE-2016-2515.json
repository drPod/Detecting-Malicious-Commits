{
  "cve_id": "CVE-2016-2515",
  "github_data": {
    "repository": "hueniverse/hawk",
    "fix_commit": "0833f99ba64558525995a7e21d4093da1f3e15fa",
    "related_commits": [
      "0833f99ba64558525995a7e21d4093da1f3e15fa",
      "0833f99ba64558525995a7e21d4093da1f3e15fa"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "0833f99ba64558525995a7e21d4093da1f3e15fa",
      "commit_date": "2016-01-19T19:53:57Z",
      "author": {
        "login": "hueniverse",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix minor DoS attack on long headers or uris. Closes #168",
        "length": 57,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 92,
        "additions": 86,
        "deletions": 6
      },
      "files": [
        {
          "filename": "lib/server.js",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -310,6 +310,11 @@ exports.header = function (credentials, artifacts, options) {\n  * 'hostHeaderName', 'localtimeOffsetMsec', 'host', 'port'\n  */\n \n+\n+//                       1     2             3           4\n+internals.bewitRegex = /^(\\/.*)([\\?&])bewit\\=([^&$]*)(?:&(.+))?$/;\n+\n+\n exports.authenticateBewit = function (req, credentialsFunc, options, callback) {\n \n     callback = Hoek.nextTick(callback);\n@@ -327,8 +332,11 @@ exports.authenticateBewit = function (req, credentialsFunc, options, callback) {\n \n     // Extract bewit\n \n-    //                                 1     2             3           4\n-    const resource = request.url.match(/^(\\/.*)([\\?&])bewit\\=([^&$]*)(?:&(.+))?$/);\n+    if (request.url.length > Utils.limits.maxMatchLength) {\n+        return callback(Boom.badRequest('Resource path exceeds max length'));\n+    }\n+\n+    const resource = request.url.match(internals.bewitRegex);\n     if (!resource) {\n         return callback(Utils.unauthorized());\n     }"
        },
        {
          "filename": "lib/utils.js",
          "status": "modified",
          "additions": 20,
          "deletions": 3,
          "patch": "@@ -17,6 +17,11 @@ exports.version = function () {\n };\n \n \n+exports.limits = {\n+    maxMatchLength: 4096            // Limit the length of uris and headers to avoid a DoS attack on string matching\n+};\n+\n+\n // Extract host and port from request\n \n //                                            $1                            $2\n@@ -31,6 +36,10 @@ exports.parseHost = function (req, hostHeaderName) {\n         return null;\n     }\n \n+    if (hostHeader.length > exports.limits.maxMatchLength) {\n+        return null;\n+    }\n+\n     const hostParts = hostHeader.match(internals.hostHeaderRegex);\n     if (!hostParts) {\n         return null;\n@@ -100,6 +109,10 @@ exports.nowSecs = function (localtimeOffsetMsec) {\n };\n \n \n+internals.authHeaderRegex = /^(\\w+)(?:\\s+(.*))?$/;                                      // Header: scheme[ something]\n+internals.attributeRegex = /^[ \\w\\!#\\$%&'\\(\\)\\*\\+,\\-\\.\\/\\:;<\\=>\\?@\\[\\]\\^`\\{\\|\\}~]+$/;   // !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9\n+\n+\n // Parse Hawk HTTP Authorization header\n \n exports.parseAuthorizationHeader = function (header, keys) {\n@@ -110,7 +123,11 @@ exports.parseAuthorizationHeader = function (header, keys) {\n         return Boom.unauthorized(null, 'Hawk');\n     }\n \n-    const headerParts = header.match(/^(\\w+)(?:\\s+(.*))?$/);       // Header: scheme[ something]\n+    if (header.length > exports.limits.maxMatchLength) {\n+        return Boom.badRequest('Header length too long');\n+    }\n+\n+    const headerParts = header.match(internals.authHeaderRegex);\n     if (!headerParts) {\n         return Boom.badRequest('Invalid header syntax');\n     }\n@@ -136,9 +153,9 @@ exports.parseAuthorizationHeader = function (header, keys) {\n             return;\n         }\n \n-        // Allowed attribute value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9\n+        // Allowed attribute value characters\n \n-        if ($2.match(/^[ \\w\\!#\\$%&'\\(\\)\\*\\+,\\-\\.\\/\\:;<\\=>\\?@\\[\\]\\^`\\{\\|\\}~]+$/) === null) {\n+        if ($2.match(internals.attributeRegex) === null) {\n             errorMessage = 'Bad attribute value: ' + $1;\n             return;\n         }"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,7 +1,7 @@\n {\n   \"name\": \"hawk\",\n   \"description\": \"HTTP Hawk Authentication Scheme\",\n-  \"version\": \"4.1.0\",\n+  \"version\": \"4.1.1\",\n   \"author\": \"Eran Hammer <eran@hammer.io> (http://hueniverse.com)\",\n   \"repository\": \"git://github.com/hueniverse/hawk\",\n   \"main\": \"lib/index.js\","
        },
        {
          "filename": "test/server.js",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -971,6 +971,33 @@ describe('Server', () => {\n         });\n     });\n \n+    describe('authenticateBewit()', () => {\n+\n+        it('errors on uri too long', (done) => {\n+\n+            let long = '/';\n+            for (let i = 0; i < 5000; ++i) {\n+                long += 'x';\n+            }\n+\n+            const req = {\n+                method: 'GET',\n+                url: long,\n+                host: 'example.com',\n+                port: 8080,\n+                authorization: 'Hawk id=\"1\", ts=\"1353788437\", nonce=\"k3j4h2\", mac=\"zy79QQ5/EYFmQqutVnYb73gAc/U=\", ext=\"hello\"'\n+            };\n+\n+            Hawk.server.authenticateBewit(req, credentialsFunc, {}, (err, credentials, bewit) => {\n+\n+                expect(err).to.exist();\n+                expect(err.output.statusCode).to.equal(400);\n+                expect(err.message).to.equal('Resource path exceeds max length');\n+                done();\n+            });\n+        });\n+    });\n+\n     describe('authenticateMessage()', () => {\n \n         it('errors on invalid authorization (ts)', (done) => {"
        },
        {
          "filename": "test/utils.js",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -95,6 +95,34 @@ describe('Utils', () => {\n             expect(host.name).to.equal('[123:123:123]');\n             done();\n         });\n+\n+        it('errors on header too long', (done) => {\n+\n+            let long = '';\n+            for (let i = 0; i < 5000; ++i) {\n+                long += 'x';\n+            }\n+\n+            expect(Hawk.utils.parseHost({ headers: { host: long } })).to.be.null();\n+            done();\n+        });\n+    });\n+\n+    describe('parseAuthorizationHeader()', () => {\n+\n+        it('errors on header too long', (done) => {\n+\n+            let long = 'Scheme a=\"';\n+            for (let i = 0; i < 5000; ++i) {\n+                long += 'x';\n+            }\n+            long += '\"';\n+\n+            const err = Hawk.utils.parseAuthorizationHeader(long, ['a']);\n+            expect(err).to.be.instanceof(Error);\n+            expect(err.message).to.equal('Header length too long');\n+            done();\n+        });\n     });\n \n     describe('version()', () => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c1dd59bf0ca80210eedafcd30033e1858660a0e6",
            "date": "2024-04-05T16:31:44Z",
            "author_login": "hwine"
          },
          {
            "sha": "cf5fc6cf03282fcc853ec780376c7cd7b461e9d6",
            "date": "2024-04-02T14:42:03Z",
            "author_login": "lotas"
          },
          {
            "sha": "6096dadcca8bce9e4176ea4b3a64c0e6ca0bebdb",
            "date": "2024-04-02T14:31:49Z",
            "author_login": "lotas"
          },
          {
            "sha": "0388a5d1bfbb960e5150ab1d3aae04a5ce520997",
            "date": "2024-04-02T14:26:00Z",
            "author_login": "lotas"
          },
          {
            "sha": "01f3d35479fe76654bb50f2886b37310555d088e",
            "date": "2023-07-10T11:04:53Z",
            "author_login": "lotas"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-399",
    "description": "Hawk before 3.1.3 and 4.x before 4.1.1 allow remote attackers to cause a denial of service (CPU consumption or partial outage) via a long (1) header or (2) URI that is matched against an improper regular expression.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2016-04-13T16:59:13.473",
    "last_modified": "2024-11-21T02:48:36.003",
    "fix_date": "2016-01-19T19:53:57Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/02/20/1",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/02/20/2",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1309721",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://github.com/hueniverse/hawk/commit/0833f99ba64558525995a7e21d4093da1f3e15fa",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/hueniverse/hawk/issues/168",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://nodesecurity.io/advisories/77",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/02/20/1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/02/20/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1309721",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/hueniverse/hawk/commit/0833f99ba64558525995a7e21d4093da1f3e15fa",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/hueniverse/hawk/issues/168",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://nodesecurity.io/advisories/77",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:42.524725",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "hawk",
    "owner": "hueniverse",
    "created_at": "2012-11-24T08:56:01Z",
    "updated_at": "2025-01-03T22:59:00Z",
    "pushed_at": "2024-04-05T16:31:45Z",
    "size": 811,
    "stars": 1908,
    "forks": 168,
    "open_issues": 0,
    "watchers": 1908,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 139483
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:26:02.567035"
  }
}