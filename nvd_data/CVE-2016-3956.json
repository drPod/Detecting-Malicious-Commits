{
  "cve_id": "CVE-2016-3956",
  "github_data": {
    "repository": "npm/npm",
    "fix_commit": "f67ecad59e99a03e5aad8e93cd1a086ae087cb29",
    "related_commits": [
      "f67ecad59e99a03e5aad8e93cd1a086ae087cb29",
      "fea8cc92cee02c720b58f95f14d315507ccad401",
      "f67ecad59e99a03e5aad8e93cd1a086ae087cb29",
      "fea8cc92cee02c720b58f95f14d315507ccad401"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f67ecad59e99a03e5aad8e93cd1a086ae087cb29",
      "commit_date": "2016-03-17T06:17:33Z",
      "author": {
        "login": "othiym23",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "config: only send token to registry hosts",
        "length": 92,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 274,
        "additions": 257,
        "deletions": 17
      },
      "files": [
        {
          "filename": "doc/cli/npm-adduser.md",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -59,9 +59,11 @@ registries. Can be used with `--registry` and / or `--scope`, e.g.\n     npm adduser --registry=http://private-registry.example.com --always-auth\n \n This will ensure that all requests to that registry (including for tarballs)\n-include an authorization header. See `always-auth` in `npm-config(7)` for more\n-details on always-auth. Registry-specific configuration of `always-auth` takes\n-precedence over any global configuration.\n+include an authorization header. This setting may be necessary for use with\n+private registries where metadata and package tarballs are stored on hosts with\n+different hostnames. See `always-auth` in `npm-config(7)` for more details on\n+always-auth. Registry-specific configuration of `always-auth` takes precedence\n+over any global configuration.\n \n ## SEE ALSO\n "
        },
        {
          "filename": "lib/cache.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -285,7 +285,7 @@ function add (args, where, cb) {\n         break\n       case 'remote':\n         // get auth, if possible\n-        mapToRegistry(spec, npm.config, function (err, uri, auth) {\n+        mapToRegistry(p.raw, npm.config, function (err, uri, auth) {\n           if (err) return cb(err)\n \n           addRemoteTarball(p.spec, { name: p.name }, null, auth, cb)"
        },
        {
          "filename": "lib/config/get-credentials-by-uri.js",
          "status": "modified",
          "additions": 8,
          "deletions": 7,
          "patch": "@@ -20,6 +20,14 @@ function getCredentialsByURI (uri) {\n     alwaysAuth: undefined\n   }\n \n+  // used to override scope matching for tokens as well as legacy auth\n+  if (this.get(nerfed + ':always-auth') !== undefined) {\n+    var val = this.get(nerfed + ':always-auth')\n+    c.alwaysAuth = val === 'false' ? false : !!val\n+  } else if (this.get('always-auth') !== undefined) {\n+    c.alwaysAuth = this.get('always-auth')\n+  }\n+\n   if (this.get(nerfed + ':_authToken')) {\n     c.token = this.get(nerfed + ':_authToken')\n     // the bearer token is enough, don't confuse things\n@@ -58,13 +66,6 @@ function getCredentialsByURI (uri) {\n     c.email = this.get('email')\n   }\n \n-  if (this.get(nerfed + ':always-auth') !== undefined) {\n-    var val = this.get(nerfed + ':always-auth')\n-    c.alwaysAuth = val === 'false' ? false : !!val\n-  } else if (this.get('always-auth') !== undefined) {\n-    c.alwaysAuth = this.get('always-auth')\n-  }\n-\n   if (c.username && c.password) {\n     c.auth = new Buffer(c.username + ':' + c.password).toString('base64')\n   }"
        },
        {
          "filename": "lib/utils/map-to-registry.js",
          "status": "modified",
          "additions": 46,
          "deletions": 2,
          "patch": "@@ -49,8 +49,52 @@ function mapToRegistry (name, config, cb) {\n \n   // normalize registry URL so resolution doesn't drop a piece of registry URL\n   var normalized = registry.slice(-1) !== '/' ? registry + '/' : registry\n-  var uri = url.resolve(normalized, name)\n+  var uri\n+  log.silly('mapToRegistry', 'data', data)\n+  if (data.type === 'remote') {\n+    uri = data.spec\n+  } else {\n+    uri = url.resolve(normalized, name)\n+  }\n+\n   log.silly('mapToRegistry', 'uri', uri)\n \n-  cb(null, uri, auth, normalized)\n+  cb(null, uri, scopeAuth(uri, registry, auth), normalized)\n+}\n+\n+function scopeAuth (uri, registry, auth) {\n+  var cleaned = {\n+    scope: auth.scope,\n+    email: auth.email,\n+    alwaysAuth: auth.alwaysAuth,\n+    token: undefined,\n+    username: undefined,\n+    password: undefined,\n+    auth: undefined\n+  }\n+\n+  var requestHost\n+  var registryHost\n+\n+  if (auth.token || auth.auth || (auth.username && auth.password)) {\n+    requestHost = url.parse(uri).hostname\n+    registryHost = url.parse(registry).hostname\n+\n+    if (requestHost === registryHost) {\n+      cleaned.token = auth.token\n+      cleaned.auth = auth.auth\n+      cleaned.username = auth.username\n+      cleaned.password = auth.password\n+    } else if (auth.alwaysAuth) {\n+      log.verbose('scopeAuth', 'alwaysAuth set for', registry)\n+      cleaned.token = auth.token\n+      cleaned.auth = auth.auth\n+      cleaned.username = auth.username\n+      cleaned.password = auth.password\n+    } else {\n+      log.silly('scopeAuth', uri, \"doesn't share host with registry\", registry)\n+    }\n+  }\n+\n+  return cleaned\n }"
        },
        {
          "filename": "test/tap/bearer-token-check.js",
          "status": "added",
          "additions": 118,
          "deletions": 0,
          "patch": "@@ -0,0 +1,118 @@\n+var resolve = require('path').resolve\n+var writeFileSync = require('graceful-fs').writeFileSync\n+\n+var mkdirp = require('mkdirp')\n+var mr = require('npm-registry-mock')\n+var osenv = require('osenv')\n+var rimraf = require('rimraf')\n+var test = require('tap').test\n+\n+var common = require('../common-tap.js')\n+var toNerfDart = require('../../lib/config/nerf-dart.js')\n+\n+var pkg = resolve(__dirname, 'install-bearer-check')\n+var outfile = resolve(pkg, '_npmrc')\n+var modules = resolve(pkg, 'node_modules')\n+var tarballPath = '/scoped-underscore/-/scoped-underscore-1.3.1.tgz'\n+// needs to be a different hostname to verify tokens (not) being sent correctly\n+var tarballURL = 'http://lvh.me:' + common.port + tarballPath\n+var tarball = resolve(__dirname, '../fixtures/scoped-underscore-1.3.1.tgz')\n+\n+var server\n+\n+var EXEC_OPTS = { cwd: pkg }\n+\n+function mocks (server) {\n+  var auth = 'Bearer 0xabad1dea'\n+  server.get(tarballPath, { authorization: auth }).reply(403, {\n+    error: 'token leakage',\n+    reason: 'This token should not be sent.'\n+  })\n+  server.get(tarballPath).replyWithFile(200, tarball)\n+}\n+\n+test('setup', function (t) {\n+  mr({ port: common.port, plugin: mocks }, function (er, s) {\n+    server = s\n+    t.ok(s, 'set up mock registry')\n+    setup()\n+    t.end()\n+  })\n+})\n+\n+test('authed npm install with tarball not on registry', function (t) {\n+  common.npm(\n+    [\n+      'install',\n+      '--loglevel', 'silent',\n+      '--json',\n+      '--fetch-retries', 0,\n+      '--userconfig', outfile\n+    ],\n+    EXEC_OPTS,\n+    function (err, code, stdout, stderr) {\n+      t.ifError(err, 'test runner executed without error')\n+      t.equal(code, 0, 'npm install exited OK')\n+      t.notOk(stderr, 'no output on stderr')\n+      try {\n+        var results = JSON.parse(stdout)\n+      } catch (ex) {\n+        console.error('#', ex)\n+        t.ifError(ex, 'stdout was valid JSON')\n+      }\n+\n+      if (results) {\n+        var installedversion = {\n+          'version': '1.3.1',\n+          'from': '>=1.3.1 <2',\n+          'resolved': 'http://lvh.me:1337/scoped-underscore/-/scoped-underscore-1.3.1.tgz'\n+        }\n+        t.isDeeply(results.dependencies['@scoped/underscore'], installedversion, '@scoped/underscore installed')\n+      }\n+\n+      t.end()\n+    }\n+  )\n+})\n+\n+test('cleanup', function (t) {\n+  server.close()\n+  cleanup()\n+  t.end()\n+})\n+\n+var contents = '@scoped:registry=' + common.registry + '\\n' +\n+               toNerfDart(common.registry) + ':_authToken=0xabad1dea\\n'\n+\n+var json = {\n+  name: 'test-package-install',\n+  version: '1.0.0'\n+}\n+\n+var shrinkwrap = {\n+  name: 'test-package-install',\n+  version: '1.0.0',\n+  dependencies: {\n+    '@scoped/underscore': {\n+      resolved: tarballURL,\n+      from: '>=1.3.1 <2',\n+      version: '1.3.1'\n+    }\n+  }\n+}\n+\n+function setup () {\n+  cleanup()\n+  mkdirp.sync(modules)\n+  writeFileSync(resolve(pkg, 'package.json'), JSON.stringify(json, null, 2) + '\\n')\n+  writeFileSync(outfile, contents)\n+  writeFileSync(\n+    resolve(pkg, 'npm-shrinkwrap.json'),\n+    JSON.stringify(shrinkwrap, null, 2) + '\\n'\n+  )\n+}\n+\n+function cleanup () {\n+  process.chdir(osenv.tmpdir())\n+  rimraf.sync(pkg)\n+}"
        },
        {
          "filename": "test/tap/config-credentials.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -79,7 +79,7 @@ test('set with token', function (t) {\n       password: undefined,\n       email: undefined,\n       auth: undefined,\n-      alwaysAuth: undefined\n+      alwaysAuth: false\n     }\n \n     t.same(conf.getCredentialsByURI(URI), expected, 'got bearer token and scope')"
        },
        {
          "filename": "test/tap/map-to-registry.js",
          "status": "modified",
          "additions": 78,
          "deletions": 3,
          "patch": "@@ -48,7 +48,7 @@ test('mapRegistryToURI', function (t) {\n       password: undefined,\n       email: undefined,\n       auth: undefined,\n-      alwaysAuth: undefined\n+      alwaysAuth: false\n     })\n     t.equal(registry, 'http://reg.npm/design/-/rewrite/')\n   })\n@@ -66,7 +66,7 @@ test('mapRegistryToURI', function (t) {\n       password: undefined,\n       email: undefined,\n       auth: undefined,\n-      alwaysAuth: undefined\n+      alwaysAuth: false\n     })\n     t.equal(registry, 'http://reg.npm/-/rewrite/')\n   })\n@@ -84,8 +84,83 @@ test('mapRegistryToURI', function (t) {\n       password: undefined,\n       email: undefined,\n       auth: undefined,\n-      alwaysAuth: undefined\n+      alwaysAuth: false\n     })\n     t.equal(registry, 'http://reg.npm/design/-/rewrite/relative/')\n   })\n })\n+\n+test('mapToRegistry token scoping', function (t) {\n+  npm.config.set('scope', '')\n+  npm.config.set('registry', 'https://reg.npm/')\n+  npm.config.set('//reg.npm/:_authToken', 'r-token')\n+\n+  t.test('pass token to registry host', function (t) {\n+    mapRegistry(\n+      'https://reg.npm/packages/e/easy-1.0.0.tgz',\n+      npm.config,\n+      function (er, uri, auth, registry) {\n+        t.ifError(er, 'mapRegistryToURI worked')\n+        t.equal(uri, 'https://reg.npm/packages/e/easy-1.0.0.tgz')\n+        t.deepEqual(auth, {\n+          scope: '//reg.npm/',\n+          token: 'r-token',\n+          username: undefined,\n+          password: undefined,\n+          email: undefined,\n+          auth: undefined,\n+          alwaysAuth: false\n+        })\n+        t.equal(registry, 'https://reg.npm/')\n+      }\n+    )\n+    t.end()\n+  })\n+\n+  t.test(\"don't pass token to non-registry host\", function (t) {\n+    mapRegistry(\n+      'https://butts.lol/packages/e/easy-1.0.0.tgz',\n+      npm.config,\n+      function (er, uri, auth, registry) {\n+        t.ifError(er, 'mapRegistryToURI worked')\n+        t.equal(uri, 'https://butts.lol/packages/e/easy-1.0.0.tgz')\n+        t.deepEqual(auth, {\n+          scope: '//reg.npm/',\n+          token: undefined,\n+          username: undefined,\n+          password: undefined,\n+          email: undefined,\n+          auth: undefined,\n+          alwaysAuth: false\n+        })\n+        t.equal(registry, 'https://reg.npm/')\n+      }\n+    )\n+    t.end()\n+  })\n+\n+  t.test('pass token to non-registry host with always-auth', function (t) {\n+    npm.config.set('always-auth', true)\n+    mapRegistry(\n+      'https://butts.lol/packages/e/easy-1.0.0.tgz',\n+      npm.config,\n+      function (er, uri, auth, registry) {\n+        t.ifError(er, 'mapRegistryToURI worked')\n+        t.equal(uri, 'https://butts.lol/packages/e/easy-1.0.0.tgz')\n+        t.deepEqual(auth, {\n+          scope: '//reg.npm/',\n+          token: 'r-token',\n+          username: undefined,\n+          password: undefined,\n+          email: undefined,\n+          auth: undefined,\n+          alwaysAuth: true\n+        })\n+        t.equal(registry, 'https://reg.npm/')\n+      }\n+    )\n+    t.end()\n+  })\n+\n+  t.end()\n+})"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 5,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "447afc8316536405dc3fc3a682edad52943c6c0e",
            "date": "2020-08-07T14:31:17Z",
            "author_login": "darcyclarke"
          },
          {
            "sha": "1f7b65860f1d56ce85ccea2b18de1ef58227be66",
            "date": "2020-08-07T14:27:11Z",
            "author_login": "darcyclarke"
          },
          {
            "sha": "eda72afeaa40bdb09af330c0059c5fca1521c73d",
            "date": "2018-07-12T22:40:00Z",
            "author_login": "zkat"
          },
          {
            "sha": "131501bbd44e4d4878b51fcea366b19e8e6309aa",
            "date": "2018-07-12T22:03:37Z",
            "author_login": "zkat"
          },
          {
            "sha": "4c32413a5b42e18a34afb078cf00eed60f08e4ff",
            "date": "2018-05-02T05:50:30Z",
            "author_login": "gucong3000"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "The CLI in npm before 2.15.1 and 3.x before 3.8.3, as used in Node.js 0.10 before 0.10.44, 0.12 before 0.12.13, 4 before 4.4.2, and 5 before 5.10.0, includes bearer tokens with arbitrary requests, which allows remote HTTP servers to obtain sensitive information by reading Authorization headers.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2016-07-02T14:59:19.417",
    "last_modified": "2024-11-21T02:51:01.750",
    "fix_date": "2016-03-17T06:17:33Z"
  },
  "references": [
    {
      "url": "http://blog.npmjs.org/post/142036323955/fixing-a-bearer-token-vulnerability",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www-01.ibm.com/support/docview.wss?uid=swg21980827",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/npm/commit/f67ecad59e99a03e5aad8e93cd1a086ae087cb29",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/npm/commit/fea8cc92cee02c720b58f95f14d315507ccad401",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/npm/issues/8380",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://nodejs.org/en/blog/vulnerability/npm-tokens-leak-march-2016/",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://blog.npmjs.org/post/142036323955/fixing-a-bearer-token-vulnerability",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www-01.ibm.com/support/docview.wss?uid=swg21980827",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/npm/commit/f67ecad59e99a03e5aad8e93cd1a086ae087cb29",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/npm/commit/fea8cc92cee02c720b58f95f14d315507ccad401",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/npm/issues/8380",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://nodejs.org/en/blog/vulnerability/npm-tokens-leak-march-2016/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:42.567673",
    "processing_status": "enhanced"
  }
}