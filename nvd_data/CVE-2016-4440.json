{
  "cve_id": "CVE-2016-4440",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "3ce424e45411cf5a13105e0386b6ecf6eeb4f66f",
    "related_commits": [
      "3ce424e45411cf5a13105e0386b6ecf6eeb4f66f",
      "3ce424e45411cf5a13105e0386b6ecf6eeb4f66f"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "3ce424e45411cf5a13105e0386b6ecf6eeb4f66f",
      "commit_date": "2016-05-18T14:48:20Z",
      "author": {
        "login": "rvka",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "kvm:vmx: more complete state update on APICv on/off",
        "length": 1002,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 48,
        "additions": 30,
        "deletions": 18
      },
      "files": [
        {
          "filename": "arch/x86/kvm/vmx.c",
          "status": "modified",
          "additions": 30,
          "deletions": 18,
          "patch": "@@ -2418,7 +2418,9 @@ static void vmx_set_msr_bitmap(struct kvm_vcpu *vcpu)\n \n \tif (is_guest_mode(vcpu))\n \t\tmsr_bitmap = vmx_msr_bitmap_nested;\n-\telse if (vcpu->arch.apic_base & X2APIC_ENABLE) {\n+\telse if (cpu_has_secondary_exec_ctrls() &&\n+\t\t (vmcs_read32(SECONDARY_VM_EXEC_CONTROL) &\n+\t\t  SECONDARY_EXEC_VIRTUALIZE_X2APIC_MODE)) {\n \t\tif (is_long_mode(vcpu))\n \t\t\tmsr_bitmap = vmx_msr_bitmap_longmode_x2apic;\n \t\telse\n@@ -4783,6 +4785,19 @@ static void vmx_refresh_apicv_exec_ctrl(struct kvm_vcpu *vcpu)\n \tstruct vcpu_vmx *vmx = to_vmx(vcpu);\n \n \tvmcs_write32(PIN_BASED_VM_EXEC_CONTROL, vmx_pin_based_exec_ctrl(vmx));\n+\tif (cpu_has_secondary_exec_ctrls()) {\n+\t\tif (kvm_vcpu_apicv_active(vcpu))\n+\t\t\tvmcs_set_bits(SECONDARY_VM_EXEC_CONTROL,\n+\t\t\t\t      SECONDARY_EXEC_APIC_REGISTER_VIRT |\n+\t\t\t\t      SECONDARY_EXEC_VIRTUAL_INTR_DELIVERY);\n+\t\telse\n+\t\t\tvmcs_clear_bits(SECONDARY_VM_EXEC_CONTROL,\n+\t\t\t\t\tSECONDARY_EXEC_APIC_REGISTER_VIRT |\n+\t\t\t\t\tSECONDARY_EXEC_VIRTUAL_INTR_DELIVERY);\n+\t}\n+\n+\tif (cpu_has_vmx_msr_bitmap())\n+\t\tvmx_set_msr_bitmap(vcpu);\n }\n \n static u32 vmx_exec_control(struct vcpu_vmx *vmx)\n@@ -6329,23 +6344,20 @@ static __init int hardware_setup(void)\n \n \tset_bit(0, vmx_vpid_bitmap); /* 0 is reserved for host */\n \n-\tif (enable_apicv) {\n-\t\tfor (msr = 0x800; msr <= 0x8ff; msr++)\n-\t\t\tvmx_disable_intercept_msr_read_x2apic(msr);\n-\n-\t\t/* According SDM, in x2apic mode, the whole id reg is used.\n-\t\t * But in KVM, it only use the highest eight bits. Need to\n-\t\t * intercept it */\n-\t\tvmx_enable_intercept_msr_read_x2apic(0x802);\n-\t\t/* TMCCT */\n-\t\tvmx_enable_intercept_msr_read_x2apic(0x839);\n-\t\t/* TPR */\n-\t\tvmx_disable_intercept_msr_write_x2apic(0x808);\n-\t\t/* EOI */\n-\t\tvmx_disable_intercept_msr_write_x2apic(0x80b);\n-\t\t/* SELF-IPI */\n-\t\tvmx_disable_intercept_msr_write_x2apic(0x83f);\n-\t}\n+\tfor (msr = 0x800; msr <= 0x8ff; msr++)\n+\t\tvmx_disable_intercept_msr_read_x2apic(msr);\n+\n+\t/* According SDM, in x2apic mode, the whole id reg is used.  But in\n+\t * KVM, it only use the highest eight bits. Need to intercept it */\n+\tvmx_enable_intercept_msr_read_x2apic(0x802);\n+\t/* TMCCT */\n+\tvmx_enable_intercept_msr_read_x2apic(0x839);\n+\t/* TPR */\n+\tvmx_disable_intercept_msr_write_x2apic(0x808);\n+\t/* EOI */\n+\tvmx_disable_intercept_msr_write_x2apic(0x80b);\n+\t/* SELF-IPI */\n+\tvmx_disable_intercept_msr_write_x2apic(0x83f);\n \n \tif (enable_ept) {\n \t\tkvm_mmu_set_mask_ptes(0ull,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-264",
    "description": "arch/x86/kvm/vmx.c in the Linux kernel through 4.6.3 mishandles the APICv on/off state, which allows guest OS users to obtain direct APIC MSR access on the host OS, and consequently cause a denial of service (host OS crash) or possibly execute arbitrary code on the host OS, via x2APIC mode.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2016-06-27T10:59:07.783",
    "last_modified": "2024-11-21T02:52:12.230",
    "fix_date": "2016-05-18T14:48:20Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=3ce424e45411cf5a13105e0386b6ecf6eeb4f66f",
      "source": "secalert@redhat.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/05/20/2",
      "source": "secalert@redhat.com",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1337806",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/3ce424e45411cf5a13105e0386b6ecf6eeb4f66f",
      "source": "secalert@redhat.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=3ce424e45411cf5a13105e0386b6ecf6eeb4f66f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/05/20/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1337806",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/3ce424e45411cf5a13105e0386b6ecf6eeb4f66f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:42.564216",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}