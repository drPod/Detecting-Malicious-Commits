{
  "cve_id": "CVE-2016-5097",
  "github_data": {
    "repository": "phpmyadmin/phpmyadmin",
    "fix_commit": "11eb574242d2526107366d367ab5585fbe29578f",
    "related_commits": [
      "11eb574242d2526107366d367ab5585fbe29578f",
      "59e56bd63a5e023b797d82eb272cd074e3b4bfd1",
      "5fc8020c5ba9cd2e38beb5dfe013faf2103cdf0f",
      "8326aaebe54083d9726e153abdd303a141fe5ad3",
      "11eb574242d2526107366d367ab5585fbe29578f",
      "59e56bd63a5e023b797d82eb272cd074e3b4bfd1",
      "5fc8020c5ba9cd2e38beb5dfe013faf2103cdf0f",
      "8326aaebe54083d9726e153abdd303a141fe5ad3"
    ],
    "patch_url": "https://github.com/phpmyadmin/phpmyadmin/commit/11eb574242d2526107366d367ab5585fbe29578f.patch",
    "fix_commit_details": {
      "sha": "11eb574242d2526107366d367ab5585fbe29578f",
      "commit_date": "2016-05-23T11:02:21Z",
      "author": {
        "login": "nijel",
        "type": "User",
        "stats": {
          "total_commits": 16148,
          "average_weekly_commits": 13.592592592592593,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 613
        }
      },
      "commit_message": {
        "title": "Improve handling of logout",
        "length": 252,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 279,
        "additions": 175,
        "deletions": 104
      },
      "files": [
        {
          "filename": "ChangeLog",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -12,6 +12,7 @@ phpMyAdmin - ChangeLog\n - issue #11705 Fix occassional 200 errors on Windows\n - issue #12219 Fix locking issues when importing SQL\n - issue #12231 Avoid confusing warning when mysql extension is missing\n+- issue        Improve handling of logout\n \n 4.6.1 (2016-05-02)\n - issue #12120 PMA_Util not found in insert_edit.lib.php"
        },
        {
          "filename": "libraries/navigation/NavigationHeader.php",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -167,8 +167,7 @@ private function _links()\n         if ($GLOBALS['server'] != 0) {\n             // Logout for advanced authentication\n             if ($GLOBALS['cfg']['Server']['auth_type'] != 'config') {\n-                $link = 'index.php' . $GLOBALS['url_query'];\n-                $link .= '&amp;old_usr=' . urlencode($GLOBALS['PHP_AUTH_USER']);\n+                $link = 'logout.php' . $GLOBALS['url_query'];\n                 $retval .= PMA\\libraries\\Util::getNavigationLink(\n                     $link,\n                     $showText,"
        },
        {
          "filename": "libraries/plugins/AuthenticationPlugin.php",
          "status": "modified",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -52,6 +52,46 @@ public function storeUserCredentials()\n      */\n     abstract public function authFails();\n \n+    /**\n+     * Perform logout\n+     *\n+     * @return void\n+     */\n+    public function logOut()\n+    {\n+        global $PHP_AUTH_USER, $PHP_AUTH_PW;\n+\n+        /* Obtain redirect URL (before doing logout) */\n+        if (! empty($GLOBALS['cfg']['Server']['LogoutURL'])) {\n+            $redirect_url = $GLOBALS['cfg']['Server']['LogoutURL'];\n+        } else {\n+            $redirect_url = $this->getLoginFormURL();\n+        }\n+\n+        /* Clear credentials */\n+        $PHP_AUTH_USER = '';\n+        $PHP_AUTH_PW = '';\n+\n+        /* delete user's choices that were stored in session */\n+        $_SESSION = array();\n+        if (!defined('TESTSUITE')) {\n+            session_destroy();\n+        }\n+\n+        /* Redirect to login form (or configured URL) */\n+        PMA_sendHeaderLocation($redirect_url);\n+    }\n+\n+    /**\n+     * Returns URL for login form.\n+     *\n+     * @return string\n+     */\n+    public function getLoginFormURL()\n+    {\n+        return './index.php';\n+    }\n+\n     /**\n      * Returns error message for failed authentication.\n      *"
        },
        {
          "filename": "libraries/plugins/auth/AuthenticationCookie.php",
          "status": "modified",
          "additions": 26,
          "deletions": 40,
          "patch": "@@ -67,18 +67,6 @@ public function auth()\n             }\n         }\n \n-        /* Perform logout to custom URL */\n-        if (! empty($_REQUEST['old_usr'])\n-            && ! empty($GLOBALS['cfg']['Server']['LogoutURL'])\n-        ) {\n-            PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);\n-            if (defined('TESTSUITE')) {\n-                return true;\n-            } else {\n-                exit;\n-            }\n-        }\n-\n         // No recall if blowfish secret is not configured as it would produce\n         // garbage\n         if ($GLOBALS['cfg']['LoginCookieRecall']\n@@ -295,34 +283,6 @@ public function authCheck()\n         }\n         // END Swekey Integration\n \n-        if (! empty($_REQUEST['old_usr'])) {\n-            // The user wants to be logged out\n-            // -> delete his choices that were stored in session\n-\n-            // according to the PHP manual we should do this before the destroy:\n-            //$_SESSION = array();\n-\n-            if (! defined('TESTSUITE')) {\n-                session_destroy();\n-            }\n-            // -> delete password cookie(s)\n-            if ($GLOBALS['cfg']['LoginCookieDeleteAll']) {\n-                foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {\n-                    $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);\n-                    if (isset($_COOKIE['pmaPass-' . $key])) {\n-                        unset($_COOKIE['pmaPass-' . $key]);\n-                    }\n-                }\n-            } else {\n-                $GLOBALS['PMA_Config']->removeCookie(\n-                    'pmaPass-' . $GLOBALS['server']\n-                );\n-                if (isset($_COOKIE['pmaPass-' . $GLOBALS['server']])) {\n-                    unset($_COOKIE['pmaPass-' . $GLOBALS['server']]);\n-                }\n-            }\n-        }\n-\n         if (! empty($_REQUEST['pma_username'])) {\n \n             // Verify Captcha if it is required.\n@@ -831,4 +791,30 @@ public function handlePasswordChange($password)\n     {\n         $this->storePasswordCookie($password);\n     }\n+\n+    /**\n+     * Perform logout\n+     *\n+     * @return void\n+     */\n+    public function logOut()\n+    {\n+        // -> delete password cookie(s)\n+        if ($GLOBALS['cfg']['LoginCookieDeleteAll']) {\n+            foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {\n+                $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);\n+                if (isset($_COOKIE['pmaPass-' . $key])) {\n+                    unset($_COOKIE['pmaPass-' . $key]);\n+                }\n+            }\n+        } else {\n+            $GLOBALS['PMA_Config']->removeCookie(\n+                'pmaPass-' . $GLOBALS['server']\n+            );\n+            if (isset($_COOKIE['pmaPass-' . $GLOBALS['server']])) {\n+                unset($_COOKIE['pmaPass-' . $GLOBALS['server']]);\n+            }\n+        }\n+        parent::logOut();\n+    }\n }"
        },
        {
          "filename": "libraries/plugins/auth/AuthenticationHttp.php",
          "status": "modified",
          "additions": 10,
          "deletions": 12,
          "patch": "@@ -49,18 +49,6 @@ public function auth()\n      */\n     public function authForm()\n     {\n-        /* Perform logout to custom URL */\n-        if (!empty($_REQUEST['old_usr'])\n-            && !empty($GLOBALS['cfg']['Server']['LogoutURL'])\n-        ) {\n-            PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);\n-            if (!defined('TESTSUITE')) {\n-                exit;\n-            } else {\n-                return false;\n-            }\n-        }\n-\n         if (empty($GLOBALS['cfg']['Server']['auth_http_realm'])) {\n             if (empty($GLOBALS['cfg']['Server']['verbose'])) {\n                 $server_message = $GLOBALS['cfg']['Server']['host'];\n@@ -262,4 +250,14 @@ public function authFails()\n \n         return true;\n     }\n+\n+    /**\n+     * Returns URL for login form.\n+     *\n+     * @return string\n+     */\n+    public function getLoginFormURL()\n+    {\n+        return './index.php?old_usr=' . $GLOBALS['PHP_AUTH_USER'];\n+    }\n }"
        },
        {
          "filename": "libraries/plugins/auth/AuthenticationSignon.php",
          "status": "modified",
          "additions": 2,
          "deletions": 18,
          "patch": "@@ -28,11 +28,6 @@ public function auth()\n         unset($_SESSION['LAST_SIGNON_URL']);\n         if (empty($GLOBALS['cfg']['Server']['SignonURL'])) {\n             PMA_fatalError('You must set SignonURL!');\n-        } elseif (!empty($_REQUEST['old_usr'])\n-            && !empty($GLOBALS['cfg']['Server']['LogoutURL'])\n-        ) {\n-            /* Perform logout to custom URL */\n-            PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);\n         } else {\n             PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['SignonURL']);\n         }\n@@ -82,9 +77,6 @@ public function authCheck()\n         /* No configuration updates */\n         $single_signon_cfgupdate = array();\n \n-        /* Are we requested to do logout? */\n-        $do_logout = !empty($_REQUEST['old_usr']);\n-\n         /* Handle script based auth */\n         if (!empty($script_name)) {\n             if (!file_exists($script_name)) {\n@@ -117,18 +109,10 @@ public function authCheck()\n \n             /* Grab credentials if they exist */\n             if (isset($_SESSION['PMA_single_signon_user'])) {\n-                if ($do_logout) {\n-                    $PHP_AUTH_USER = '';\n-                } else {\n-                    $PHP_AUTH_USER = $_SESSION['PMA_single_signon_user'];\n-                }\n+                $PHP_AUTH_USER = $_SESSION['PMA_single_signon_user'];\n             }\n             if (isset($_SESSION['PMA_single_signon_password'])) {\n-                if ($do_logout) {\n-                    $PHP_AUTH_PW = '';\n-                } else {\n-                    $PHP_AUTH_PW = $_SESSION['PMA_single_signon_password'];\n-                }\n+                $PHP_AUTH_PW = $_SESSION['PMA_single_signon_password'];\n             }\n             if (isset($_SESSION['PMA_single_signon_host'])) {\n                 $single_signon_host = $_SESSION['PMA_single_signon_host'];"
        },
        {
          "filename": "logout.php",
          "status": "added",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -0,0 +1,15 @@\n+<?php\n+/* vim: set expandtab sw=4 ts=4 sts=4: */\n+/**\n+ * Logout script\n+ *\n+ * @package PhpMyAdmin\n+ */\n+require_once 'libraries/common.inc.php';\n+\n+if ($token_mismatch) {\n+    PMA_sendHeaderLocation('./index.php');\n+} else {\n+    $auth_plugin->logOut();\n+}\n+"
        },
        {
          "filename": "test/classes/plugin/auth/AuthenticationCookieTest.php",
          "status": "modified",
          "additions": 47,
          "deletions": 13,
          "patch": "@@ -373,18 +373,16 @@ public function testAuthCaptcha()\n      */\n     public function testAuthHeader()\n     {\n+        $GLOBALS['cfg']['LoginCookieDeleteAll'] = false;\n+        $GLOBALS['cfg']['Servers'] = array(1);\n+\n         $restoreInstance = PMA\\libraries\\Response::getInstance();\n \n         $mockResponse = $this->getMockBuilder('PMA\\libraries\\Response')\n             ->disableOriginalConstructor()\n             ->setMethods(array('isAjax', 'headersSent', 'header'))\n             ->getMock();\n \n-        $mockResponse->expects($this->once())\n-            ->method('isAjax')\n-            ->with()\n-            ->will($this->returnValue(false));\n-\n         $mockResponse->expects($this->any())\n             ->method('headersSent')\n             ->with()\n@@ -398,12 +396,9 @@ public function testAuthHeader()\n         $attrInstance->setAccessible(true);\n         $attrInstance->setValue($mockResponse);\n \n-        $_REQUEST['old_usr'] = 'user1';\n         $GLOBALS['cfg']['Server']['LogoutURL'] = 'http://www.phpmyadmin.net/logout';\n \n-        $this->assertTrue(\n-            $this->object->auth()\n-        );\n+        $this->object->logOut();\n \n         $attrInstance->setValue($restoreInstance);\n     }\n@@ -454,20 +449,40 @@ public function testAuthCheckCaptcha()\n      */\n     public function testLogoutDelete()\n     {\n+        $restoreInstance = PMA\\libraries\\Response::getInstance();\n+\n+        $mockResponse = $this->getMockBuilder('PMA\\libraries\\Response')\n+            ->disableOriginalConstructor()\n+            ->setMethods(array('isAjax', 'headersSent', 'header'))\n+            ->getMock();\n+\n+        $mockResponse->expects($this->any())\n+            ->method('headersSent')\n+            ->with()\n+            ->will($this->returnValue(false));\n+\n+        $mockResponse->expects($this->once())\n+            ->method('header')\n+            ->with('Location: ./index.php' . ((SID) ? '?' . SID : ''));\n+\n+        $attrInstance = new ReflectionProperty('PMA\\libraries\\Response', '_instance');\n+        $attrInstance->setAccessible(true);\n+        $attrInstance->setValue($mockResponse);\n+\n         $GLOBALS['cfg']['Server']['auth_swekey_config'] = '';\n         $GLOBALS['cfg']['CaptchaLoginPrivateKey'] = '';\n         $GLOBALS['cfg']['CaptchaLoginPublicKey'] = '';\n-        $_REQUEST['old_usr'] = 'pmaolduser';\n         $GLOBALS['cfg']['LoginCookieDeleteAll'] = true;\n         $GLOBALS['cfg']['Servers'] = array(1);\n \n         $_COOKIE['pmaPass-0'] = 'test';\n \n-        $this->object->authCheck();\n+        $this->object->logOut();\n \n         $this->assertFalse(\n             isset($_COOKIE['pmaPass-0'])\n         );\n+        $attrInstance->setValue($restoreInstance);\n     }\n \n     /**\n@@ -477,21 +492,40 @@ public function testLogoutDelete()\n      */\n     public function testLogout()\n     {\n+        $restoreInstance = PMA\\libraries\\Response::getInstance();\n+\n+        $mockResponse = $this->getMockBuilder('PMA\\libraries\\Response')\n+            ->disableOriginalConstructor()\n+            ->setMethods(array('isAjax', 'headersSent', 'header'))\n+            ->getMock();\n+\n+        $mockResponse->expects($this->any())\n+            ->method('headersSent')\n+            ->with()\n+            ->will($this->returnValue(false));\n+\n+        $mockResponse->expects($this->once())\n+            ->method('header')\n+            ->with('Location: ./index.php' . ((SID) ? '?' . SID : ''));\n+\n+        $attrInstance = new ReflectionProperty('PMA\\libraries\\Response', '_instance');\n+        $attrInstance->setAccessible(true);\n+        $attrInstance->setValue($mockResponse);\n         $GLOBALS['cfg']['Server']['auth_swekey_config'] = '';\n         $GLOBALS['cfg']['CaptchaLoginPrivateKey'] = '';\n         $GLOBALS['cfg']['CaptchaLoginPublicKey'] = '';\n-        $_REQUEST['old_usr'] = 'pmaolduser';\n         $GLOBALS['cfg']['LoginCookieDeleteAll'] = false;\n         $GLOBALS['cfg']['Servers'] = array(1);\n         $GLOBALS['server'] = 1;\n \n         $_COOKIE['pmaPass-1'] = 'test';\n \n-        $this->object->authCheck();\n+        $this->object->logOut();\n \n         $this->assertFalse(\n             isset($_COOKIE['pmaPass-1'])\n         );\n+        $attrInstance->setValue($restoreInstance);\n     }\n \n     /**"
        },
        {
          "filename": "test/classes/plugin/auth/AuthenticationHttpTest.php",
          "status": "modified",
          "additions": 7,
          "deletions": 3,
          "patch": "@@ -123,9 +123,13 @@ public function doMockResponse($set_minimal, $body_id, $set_title)\n         call_user_func_array(array($header_method, 'withConsecutive'), $headers);\n \n         try {\n-            $this->assertFalse(\n-                $this->object->auth()\n-            );\n+            if (!empty($_REQUEST['old_usr'])) {\n+                $this->object->logOut();\n+            } else {\n+                $this->assertFalse(\n+                    $this->object->auth()\n+                );\n+            }\n         } finally {\n             $attrInstance->setValue($restoreInstance);\n         }"
        },
        {
          "filename": "test/classes/plugin/auth/AuthenticationSignonTest.php",
          "status": "modified",
          "additions": 26,
          "deletions": 16,
          "patch": "@@ -73,10 +73,9 @@ public function testAuth()\n         // case 2\n \n         $GLOBALS['cfg']['Server']['SignonURL'] = 'http://phpmyadmin.net/SignonURL';\n-        $_REQUEST['old_usr'] = 'oldUser';\n         $GLOBALS['cfg']['Server']['LogoutURL'] = 'http://phpmyadmin.net/logoutURL';\n \n-        $this->object->auth();\n+        $this->object->logOut();\n \n         $this->assertContains(\n             'Location: http://phpmyadmin.net/logoutURL?PHPSESSID=',\n@@ -87,10 +86,9 @@ public function testAuth()\n \n         $GLOBALS['header'] = array();\n         $GLOBALS['cfg']['Server']['SignonURL'] = 'http://phpmyadmin.net/SignonURL';\n-        $_REQUEST['old_usr'] = '';\n         $GLOBALS['cfg']['Server']['LogoutURL'] = '';\n \n-        $this->object->auth();\n+        $this->object->logOut();\n \n         $this->assertContains(\n             'Location: http://phpmyadmin.net/SignonURL?PHPSESSID=',\n@@ -155,14 +153,33 @@ public function testAuthCheckSession()\n      */\n     public function testAuthCheckToken()\n     {\n+        $restoreInstance = PMA\\libraries\\Response::getInstance();\n+\n+        $mockResponse = $this->getMockBuilder('PMA\\libraries\\Response')\n+            ->disableOriginalConstructor()\n+            ->setMethods(array('isAjax', 'headersSent', 'header'))\n+            ->getMock();\n+\n+        $mockResponse->expects($this->any())\n+            ->method('headersSent')\n+            ->with()\n+            ->will($this->returnValue(false));\n+\n+        $mockResponse->expects($this->once())\n+            ->method('header')\n+            ->with('Location: ./index.php' . ((SID) ? '?' . SID : ''));\n+\n+        $attrInstance = new ReflectionProperty('PMA\\libraries\\Response', '_instance');\n+        $attrInstance->setAccessible(true);\n+        $attrInstance->setValue($mockResponse);\n+\n         $GLOBALS['cfg']['Server']['SignonURL'] = 'http://phpmyadmin.net/SignonURL';\n         $GLOBALS['cfg']['Server']['SignonSession'] = 'session123';\n         $GLOBALS['cfg']['Server']['host'] = 'localhost';\n         $GLOBALS['cfg']['Server']['port'] = '80';\n         $GLOBALS['cfg']['Server']['user'] = 'user';\n         $GLOBALS['cfg']['Server']['SignonScript'] = '';\n         $_COOKIE['session123'] = true;\n-        $_REQUEST['old_usr'] = 'oldUser';\n         $_SESSION['PMA_single_signon_user'] = 'user123';\n         $_SESSION['PMA_single_signon_password'] = 'pass123';\n         $_SESSION['PMA_single_signon_host'] = 'local';\n@@ -172,28 +189,20 @@ public function testAuthCheckToken()\n         $sessionName = session_name();\n         $sessionID = session_id();\n \n-        $this->assertFalse(\n-            $this->object->authCheck()\n-        );\n+        $this->object->logOut();\n \n         $this->assertEquals(\n             array(\n                 'SignonURL' => 'http://phpmyadmin.net/SignonURL',\n                 'SignonScript' => '',\n                 'SignonSession' => 'session123',\n-                'host' => 'local',\n-                'port' => '12',\n+                'host' => 'localhost',\n+                'port' => '80',\n                 'user' => 'user',\n-                'foo' => 'bar'\n             ),\n             $GLOBALS['cfg']['Server']\n         );\n \n-        $this->assertEquals(\n-            'pmaToken',\n-            $_SESSION[' PMA_token ']\n-        );\n-\n         $this->assertEquals(\n             $sessionName,\n             session_name()\n@@ -207,6 +216,7 @@ public function testAuthCheckToken()\n         $this->assertFalse(\n             isset($_SESSION['LAST_SIGNON_URL'])\n         );\n+        $attrInstance->setValue($restoreInstance);\n     }\n \n     /**"
        }
      ],
      "file_patterns": {
        "security_files": 7,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1280adb2c8c3648b90804c685adeb3dcff3e2d8e",
            "date": "2025-01-13T19:17:52Z",
            "author_login": "MauricioFauth"
          },
          {
            "sha": "01013880dfa2b23897a96bc363b58cc954abe226",
            "date": "2025-01-13T17:49:00Z",
            "author_login": "liviuconcioiu"
          },
          {
            "sha": "580a7b1adf1c12d42226ace7777499381a174695",
            "date": "2025-01-13T01:51:23Z",
            "author_login": "williamdes"
          },
          {
            "sha": "227a2f68c6c9652e62fc9b6026c01e7dd4ceddf2",
            "date": "2025-01-13T01:48:56Z",
            "author_login": "williamdes"
          },
          {
            "sha": "3274eca15b0c95a8e3db7a8adf576b6f0b904641",
            "date": "2025-01-13T01:23:07Z",
            "author_login": "williamdes"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-200",
    "description": "phpMyAdmin before 4.6.2 places tokens in query strings and does not arrange for them to be stripped before external navigation, which allows remote attackers to obtain sensitive information by reading (1) HTTP requests or (2) server logs.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2016-07-05T01:59:05.673",
    "last_modified": "2024-11-21T02:53:37.333",
    "fix_date": "2016-05-23T11:02:21Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2016-06/msg00043.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1035978",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/11eb574242d2526107366d367ab5585fbe29578f",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/59e56bd63a5e023b797d82eb272cd074e3b4bfd1",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/5fc8020c5ba9cd2e38beb5dfe013faf2103cdf0f",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/8326aaebe54083d9726e153abdd303a141fe5ad3",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201701-32",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.phpmyadmin.net/security/PMASA-2016-14",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-updates/2016-06/msg00043.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1035978",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/11eb574242d2526107366d367ab5585fbe29578f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/59e56bd63a5e023b797d82eb272cd074e3b4bfd1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/5fc8020c5ba9cd2e38beb5dfe013faf2103cdf0f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/phpmyadmin/phpmyadmin/commit/8326aaebe54083d9726e153abdd303a141fe5ad3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201701-32",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.phpmyadmin.net/security/PMASA-2016-14",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:42.572315",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "phpmyadmin",
    "owner": "phpmyadmin",
    "created_at": "2012-01-19T13:21:52Z",
    "updated_at": "2025-01-13T23:05:28Z",
    "pushed_at": "2025-01-13T22:05:32Z",
    "size": 2082161,
    "stars": 7343,
    "forks": 3442,
    "open_issues": 855,
    "watchers": 7343,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "QA_4_7",
      "QA_4_8",
      "QA_5_0",
      "master"
    ],
    "languages": {
      "PHP": 8222311,
      "TypeScript": 1345556,
      "Twig": 804427,
      "SCSS": 312156,
      "Shell": 52309,
      "JavaScript": 16982,
      "Hack": 588
    },
    "commit_activity": {
      "total_commits_last_year": 1510,
      "avg_commits_per_week": 29.03846153846154,
      "days_active_last_year": 306
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:04:35.166546"
  }
}