{
  "cve_id": "CVE-2016-5359",
  "github_data": {
    "repository": "wireshark/wireshark",
    "fix_commit": "b8e0d416898bb975a02c1b55883342edc5b4c9c0",
    "related_commits": [
      "b8e0d416898bb975a02c1b55883342edc5b4c9c0",
      "b8e0d416898bb975a02c1b55883342edc5b4c9c0"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "b8e0d416898bb975a02c1b55883342edc5b4c9c0",
      "commit_date": "2016-05-09T16:03:05Z",
      "author": {
        "login": "pquantin",
        "type": "User",
        "stats": {
          "total_commits": 3023,
          "average_weekly_commits": 2.195352214960058,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 523
        }
      },
      "commit_message": {
        "title": "WBXML: add a basic sanity check for offset overflow",
        "length": 444,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 28,
        "additions": 24,
        "deletions": 4
      },
      "files": [
        {
          "filename": "epan/dissectors/packet-wbxml.c",
          "status": "modified",
          "additions": 24,
          "deletions": 4,
          "patch": "@@ -7304,7 +7304,7 @@ parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, guint32 offset,\n \t\t\t const wbxml_decoding *map)\n {\n \tguint32     tvb_len  = tvb_reported_length (tvb);\n-\tguint32     off      = offset;\n+\tguint32     off      = offset, last_off;\n \tguint32     len;\n \tguint       str_len;\n \tguint32     ent;\n@@ -7323,6 +7323,7 @@ parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, guint32 offset,\n \ttag_save_literal = NULL;                 /* Prevents compiler warning */\n \n \tDebugLog((\"parse_wbxml_tag_defined (level = %u, offset = %u)\\n\", *level, offset));\n+\tlast_off = off;\n \twhile (off < tvb_len) {\n \t\tpeek = tvb_get_guint8 (tvb, off);\n \t\tDebugLog((\"STAG: (top of while) level = %3u, peek = 0x%02X, off = %u, tvb_len = %u\\n\", *level, peek, off, tvb_len));\n@@ -7694,6 +7695,10 @@ parse_wbxml_tag_defined (proto_tree *tree, tvbuff_t *tvb, guint32 offset,\n \t\t\t\t/* TODO: Do I have to reset code page here? */\n \t\t\t}\n \t\t} /* if (tag & 0x3F) >= 5 */\n+\t\tif (off < last_off) {\n+\t\t\tTHROW(ReportedBoundsError);\n+\t\t}\n+\t\tlast_off = off;\n \t} /* while */\n \tDebugLog((\"STAG: level = %u, Return: len = %u (end of function body)\\n\", *level, off - offset));\n \treturn (off - offset);\n@@ -7711,7 +7716,7 @@ parse_wbxml_tag (proto_tree *tree, tvbuff_t *tvb, guint32 offset,\n \t\t guint8 *codepage_stag, guint8 *codepage_attr)\n {\n \tguint32     tvb_len             = tvb_reported_length (tvb);\n-\tguint32     off                 = offset;\n+\tguint32     off                 = offset, last_off;\n \tguint32     len;\n \tguint       str_len;\n \tguint32     ent;\n@@ -7732,6 +7737,7 @@ parse_wbxml_tag (proto_tree *tree, tvbuff_t *tvb, guint32 offset,\n \ttag_save_literal = NULL;                 /* Prevents compiler warning */\n \n \tDebugLog((\"parse_wbxml_tag (level = %u, offset = %u)\\n\", *level, offset));\n+\tlast_off = off;\n \twhile (off < tvb_len) {\n \t\tpeek = tvb_get_guint8 (tvb, off);\n \t\tDebugLog((\"STAG: (top of while) level = %3u, peek = 0x%02X, off = %u, tvb_len = %u\\n\", *level, peek, off, tvb_len));\n@@ -8091,6 +8097,10 @@ parse_wbxml_tag (proto_tree *tree, tvbuff_t *tvb, guint32 offset,\n \t\t\t\t/* TODO: Do I have to reset code page here? */\n \t\t\t}\n \t\t} /* if (tag & 0x3F) >= 5 */\n+\t\tif (off < last_off) {\n+\t\t\tTHROW(ReportedBoundsError);\n+\t\t}\n+\t\tlast_off = off;\n \t} /* while */\n \tDebugLog((\"STAG: level = %u, Return: len = %u (end of function body)\\n\",\n \t\t  *level, off - offset));\n@@ -8126,7 +8136,7 @@ parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb,\n \t\t\t\t    const wbxml_decoding *map)\n {\n \tguint32     tvb_len = tvb_reported_length (tvb);\n-\tguint32     off     = offset;\n+\tguint32     off     = offset, last_off;\n \tguint32     len;\n \tguint       str_len;\n \tguint32     ent;\n@@ -8138,6 +8148,7 @@ parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb,\n \tDebugLog((\"parse_wbxml_attr_defined (level = %u, offset = %u)\\n\",\n \t\t  level, offset));\n \t/* Parse attributes */\n+\tlast_off = off;\n \twhile (off < tvb_len) {\n \t\tpeek = tvb_get_guint8 (tvb, off);\n \t\tDebugLog((\"ATTR: (top of while) level = %3u, peek = 0x%02X, \"\n@@ -8330,6 +8341,10 @@ parse_wbxml_attribute_list_defined (proto_tree *tree, tvbuff_t *tvb,\n \t\t\t\toff++;\n \t\t\t}\n \t\t}\n+\t\tif (off < last_off) {\n+\t\t\tTHROW(ReportedBoundsError);\n+\t\t}\n+\t\tlast_off = off;\n \t} /* End WHILE */\n \tDebugLog((\"ATTR: level = %u, Return: len = %u (end of function body)\\n\",\n \t\t  level, off - offset));\n@@ -8350,7 +8365,7 @@ parse_wbxml_attribute_list (proto_tree *tree, tvbuff_t *tvb,\n \t\t\t    guint32 offset, guint32 str_tbl, guint8 level, guint8 *codepage_attr)\n {\n \tguint32 tvb_len = tvb_reported_length (tvb);\n-\tguint32 off     = offset;\n+\tguint32 off     = offset, last_off;\n \tguint32 len;\n \tguint   str_len;\n \tguint32 ent;\n@@ -8359,6 +8374,7 @@ parse_wbxml_attribute_list (proto_tree *tree, tvbuff_t *tvb,\n \n \tDebugLog((\"parse_wbxml_attr (level = %u, offset = %u)\\n\", level, offset));\n \t/* Parse attributes */\n+\tlast_off = off;\n \twhile (off < tvb_len) {\n \t\tpeek = tvb_get_guint8 (tvb, off);\n \t\tDebugLog((\"ATTR: (top of while) level = %3u, peek = 0x%02X, \"\n@@ -8516,6 +8532,10 @@ parse_wbxml_attribute_list (proto_tree *tree, tvbuff_t *tvb,\n \t\t\t\toff++;\n \t\t\t}\n \t\t}\n+\t\tif (off < last_off) {\n+\t\t\tTHROW(ReportedBoundsError);\n+\t\t}\n+\t\tlast_off = off;\n \t} /* End WHILE */\n \tDebugLog((\"ATTR: level = %u, Return: len = %u (end of function body)\\n\",\n \t\t  level, off - offset));"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "91cfd6d16d6f57c765d6708808673a2ac16eaa9d",
            "date": "2025-01-24T23:38:23Z",
            "author_login": "johnthacker"
          },
          {
            "sha": "798e31fc1e92a8572f8eb2a7b53fdf7931674514",
            "date": "2025-01-24T05:05:23Z",
            "author_login": "johnthacker"
          },
          {
            "sha": "93a913066382cab380bfe42bd15df971dedd0c1e",
            "date": "2025-01-24T15:47:39Z",
            "author_login": "johnthacker"
          },
          {
            "sha": "d14e835726e2b75adc73262720fdde9b7019f528",
            "date": "2025-01-25T01:09:04Z",
            "author_login": "geraldcombs"
          },
          {
            "sha": "3cd7081f0f31377440d8689774a5e577df79b1ef",
            "date": "2025-01-25T01:57:23Z",
            "author_login": "johnthacker"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-119",
    "description": "epan/dissectors/packet-wbxml.c in the WBXML dissector in Wireshark 1.12.x before 1.12.12 mishandles offsets, which allows remote attackers to cause a denial of service (integer overflow and infinite loop) via a crafted packet.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2016-08-07T16:59:14.550",
    "last_modified": "2024-11-21T02:54:10.797",
    "fix_date": "2016-05-09T16:03:05Z"
  },
  "references": [
    {
      "url": "http://www.debian.org/security/2016/dsa-3615",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/06/09/3",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/91140",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=12408",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/wireshark/wireshark/commit/b8e0d416898bb975a02c1b55883342edc5b4c9c0",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.wireshark.org/security/wnpa-sec-2016-38.html",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.debian.org/security/2016/dsa-3615",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/06/09/3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/91140",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=12408",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/wireshark/wireshark/commit/b8e0d416898bb975a02c1b55883342edc5b4c9c0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.wireshark.org/security/wnpa-sec-2016-38.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:46.773917",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "wireshark",
    "owner": "wireshark",
    "created_at": "2014-06-29T18:37:22Z",
    "updated_at": "2025-01-14T06:31:56Z",
    "pushed_at": "2025-01-14T06:31:52Z",
    "size": 1123592,
    "stars": 7492,
    "forks": 1910,
    "open_issues": 2,
    "watchers": 7492,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 249769887,
      "C++": 6560190,
      "Python": 2875784,
      "Perl": 854385,
      "CMake": 707737,
      "Lua": 390687,
      "Shell": 297586,
      "Lex": 193245,
      "NSIS": 132499,
      "HTML": 34111,
      "PowerShell": 27327,
      "XSLT": 11560,
      "PostScript": 6954,
      "Makefile": 4457,
      "Objective-C": 3844,
      "Objective-C++": 1390
    },
    "commit_activity": {
      "total_commits_last_year": 3260,
      "avg_commits_per_week": 62.69230769230769,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:32.847054"
  }
}