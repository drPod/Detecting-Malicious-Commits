{
  "cve_id": "CVE-2016-5427",
  "github_data": {
    "repository": "PowerDNS/pdns",
    "fix_commit": "881b5b03a590198d03008e4200dd00cc537712f3",
    "related_commits": [
      "881b5b03a590198d03008e4200dd00cc537712f3",
      "881b5b03a590198d03008e4200dd00cc537712f3"
    ],
    "patch_url": "https://github.com/PowerDNS/pdns/commit/881b5b03a590198d03008e4200dd00cc537712f3.patch",
    "fix_commit_details": {
      "sha": "881b5b03a590198d03008e4200dd00cc537712f3",
      "commit_date": "2016-07-01T13:30:20Z",
      "author": {
        "login": "rgacogne",
        "type": "User",
        "stats": {
          "total_commits": 6660,
          "average_weekly_commits": 5.7612456747404845,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 451
        }
      },
      "commit_message": {
        "title": "Reject qname's wirelength > 255, `chopOff()` handle dot inside labels",
        "length": 69,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 84,
        "additions": 58,
        "deletions": 26
      },
      "files": [
        {
          "filename": "pdns/dnsparser.cc",
          "status": "modified",
          "additions": 13,
          "deletions": 4,
          "patch": "@@ -402,8 +402,9 @@ uint8_t PacketReader::get8BitInt()\n string PacketReader::getLabel(unsigned int recurs)\n {\n   string ret;\n+  size_t wirelength = 0;\n   ret.reserve(40);\n-  getLabelFromContent(d_content, d_pos, ret, recurs++);\n+  getLabelFromContent(d_content, d_pos, ret, recurs++, wirelength);\n   return ret;\n }\n \n@@ -453,7 +454,7 @@ string PacketReader::getText(bool multi)\n }\n \n \n-void PacketReader::getLabelFromContent(const vector<uint8_t>& content, uint16_t& frompos, string& ret, int recurs) \n+void PacketReader::getLabelFromContent(const vector<uint8_t>& content, uint16_t& frompos, string& ret, int recurs, size_t& wirelength)\n {\n   if(recurs > 100) // the forward reference-check below should make this test 100% obsolete\n     throw MOADNSException(\"Loop\");\n@@ -462,6 +463,10 @@ void PacketReader::getLabelFromContent(const vector<uint8_t>& content, uint16_t&\n   // it is tempting to call reserve on ret, but it turns out it creates a malloc/free storm in the loop\n   for(;;) {\n     unsigned char labellen=content.at(frompos++);\n+    wirelength++;\n+    if (wirelength > 255) {\n+      throw MOADNSException(\"Overly long DNS name (\"+lexical_cast<string>(wirelength)+\")\");\n+    }\n \n     if(!labellen) {\n       if(ret.empty())\n@@ -474,13 +479,17 @@ void PacketReader::getLabelFromContent(const vector<uint8_t>& content, uint16_t&\n \n       if(offset >= pos)\n         throw MOADNSException(\"forward reference during label decompression\");\n-      return getLabelFromContent(content, offset, ret, ++recurs);\n+      /* the compression pointer does not count into the wire length */\n+      return getLabelFromContent(content, offset, ret, ++recurs, --wirelength);\n     }\n     else if(labellen > 63) \n       throw MOADNSException(\"Overly long label during label decompression (\"+lexical_cast<string>((unsigned int)labellen)+\")\");\n     else {\n+      if (wirelength + labellen > 255) {\n+        throw MOADNSException(\"Overly long DNS name (\"+lexical_cast<string>(wirelength)+\")\");\n+      }\n+      wirelength += labellen;\n       // XXX FIXME THIS MIGHT BE VERY SLOW!\n-\n       for(string::size_type n = 0 ; n < labellen; ++n, frompos++) {\n         if(content.at(frompos)=='.' || content.at(frompos)=='\\\\') {\n           ret.append(1, '\\\\');"
        },
        {
          "filename": "pdns/dnsparser.hh",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -133,7 +133,7 @@ public:\n   void xfrHexBlob(string& blob, bool keepReading=false);\n \n   static uint16_t get16BitInt(const vector<unsigned char>&content, uint16_t& pos);\n-  static void getLabelFromContent(const vector<uint8_t>& content, uint16_t& frompos, string& ret, int recurs);\n+  static void getLabelFromContent(const vector<uint8_t>& content, uint16_t& frompos, string& ret, int recurs, size_t& wirelength);\n \n   void getDnsrecordheader(struct dnsrecordheader &ah);\n   void copyRecord(vector<unsigned char>& dest, uint16_t len);"
        },
        {
          "filename": "pdns/misc.cc",
          "status": "modified",
          "additions": 44,
          "deletions": 21,
          "patch": "@@ -150,16 +150,27 @@ bool chopOff(string &domain)\n   if(domain.empty())\n     return false;\n \n-  string::size_type fdot=domain.find('.');\n-\n-  if(fdot==string::npos) \n-    domain=\"\";\n-  else {\n-    string::size_type remain = domain.length() - (fdot + 1);\n-    char tmp[remain];\n-    memcpy(tmp, domain.c_str()+fdot+1, remain);\n-    domain.assign(tmp, remain); // don't dare to do this w/o tmp holder :-)\n+  bool escaped = false;\n+  const string::size_type domainLen = domain.length();\n+  for (size_t fdot = 0; fdot < domainLen; fdot++)\n+  {\n+    if (domain[fdot] == '.' && !escaped) {\n+      string::size_type remain = domainLen - (fdot + 1);\n+      char tmp[remain];\n+      memcpy(tmp, domain.c_str()+fdot+1, remain);\n+      domain.assign(tmp, remain); // don't dare to do this w/o tmp holder :-)\n+\n+      return true;\n+    }\n+    else if (domain[fdot] == '\\\\' && !escaped) {\n+      escaped = true;\n+    }\n+    else {\n+      escaped = false;\n+    }\n   }\n+\n+  domain = \"\";\n   return true;\n }\n \n@@ -169,19 +180,31 @@ bool chopOffDotted(string &domain)\n   if(domain.empty() || (domain.size()==1 && domain[0]=='.'))\n     return false;\n \n-  string::size_type fdot=domain.find('.');\n-  if(fdot == string::npos)\n-    return false;\n-\n-  if(fdot==domain.size()-1) \n-    domain=\".\";\n-  else  {\n-    string::size_type remain = domain.length() - (fdot + 1);\n-    char tmp[remain];\n-    memcpy(tmp, domain.c_str()+fdot+1, remain);\n-    domain.assign(tmp, remain);\n+  bool escaped = false;\n+  const string::size_type domainLen = domain.length();\n+  for (size_t fdot = 0; fdot < domainLen; fdot++)\n+  {\n+    if (domain[fdot] == '.' && !escaped) {\n+      if (fdot==domain.size()-1) {\n+        domain=\".\";\n+      }\n+      else {\n+        string::size_type remain = domainLen - (fdot + 1);\n+        char tmp[remain];\n+        memcpy(tmp, domain.c_str()+fdot+1, remain);\n+        domain.assign(tmp, remain); // don't dare to do this w/o tmp holder :-)\n+      }\n+      return true;\n+    }\n+    else if (domain[fdot] == '\\\\' && !escaped) {\n+      escaped = true;\n+    }\n+    else {\n+      escaped = false;\n+    }\n   }\n-  return true;\n+\n+  return false;\n }\n \n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5557d8c64ef57f5e1832248109908d3074b36600",
            "date": "2025-01-14T11:18:56Z",
            "author_login": "rgacogne"
          },
          {
            "sha": "72f679df12342ef84f05c91ce43d5ea0ee4ff5fa",
            "date": "2025-01-14T10:13:26Z",
            "author_login": "rgacogne"
          },
          {
            "sha": "df8e71e47047022b801f9ec7796755a7075f3e98",
            "date": "2025-01-14T10:10:46Z",
            "author_login": "rgacogne"
          },
          {
            "sha": "318a47a9e6408e55c9553034c1b6b9cf3f95a9ca",
            "date": "2025-01-14T09:43:26Z",
            "author_login": "rgacogne"
          },
          {
            "sha": "d661c86302c9bbb27d3521b46d1bf4f4e8fc9b3e",
            "date": "2025-01-14T09:42:37Z",
            "author_login": "rgacogne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-399",
    "description": "PowerDNS (aka pdns) Authoritative Server before 3.4.10 does not properly handle a . (dot) inside labels, which allows remote attackers to cause a denial of service (backend CPU consumption) via a crafted DNS query.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2016-09-21T14:25:15.580",
    "last_modified": "2024-11-21T02:54:17.603",
    "fix_date": "2016-07-01T13:30:20Z"
  },
  "references": [
    {
      "url": "http://www.debian.org/security/2016/dsa-3664",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/09/09/3",
      "source": "secalert@redhat.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/92917",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1036761",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://doc.powerdns.com/md/security/powerdns-advisory-2016-01/",
      "source": "secalert@redhat.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/PowerDNS/pdns/commit/881b5b03a590198d03008e4200dd00cc537712f3",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2016/dsa-3664",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/09/09/3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/92917",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1036761",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://doc.powerdns.com/md/security/powerdns-advisory-2016-01/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/PowerDNS/pdns/commit/881b5b03a590198d03008e4200dd00cc537712f3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:46.793133",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pdns",
    "owner": "PowerDNS",
    "created_at": "2013-04-26T11:16:49Z",
    "updated_at": "2025-01-14T11:19:01Z",
    "pushed_at": "2025-01-14T11:18:56Z",
    "size": 93030,
    "stars": 3754,
    "forks": 921,
    "open_issues": 944,
    "watchers": 3754,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "rel/auth-3.4.x",
      "rel/auth-4.0.x",
      "rel/auth-4.1.x",
      "rel/auth-4.2.x",
      "rel/auth-4.3.x",
      "rel/auth-4.4.x",
      "rel/auth-4.5.x",
      "rel/auth-4.6.x",
      "rel/auth-4.7.x",
      "rel/auth-4.8.x",
      "rel/auth-4.9.x",
      "rel/dnsdist-1.2.x",
      "rel/dnsdist-1.5.x",
      "rel/dnsdist-1.6.x",
      "rel/dnsdist-1.7.x",
      "rel/dnsdist-1.8.x",
      "rel/dnsdist-1.9.x",
      "rel/rec-3.7.x",
      "rel/rec-4.0.x",
      "rel/rec-4.1.x",
      "rel/rec-4.2.x",
      "rel/rec-4.3.x",
      "rel/rec-4.4.x"
    ],
    "languages": {
      "C++": 9667783,
      "Python": 2714296,
      "JavaScript": 736474,
      "M4": 240774,
      "Shell": 235178,
      "Meson": 118177,
      "Makefile": 114248,
      "C": 67194,
      "Rust": 64785,
      "Lua": 27388,
      "CSS": 19750,
      "Perl": 18443,
      "HTML": 15141,
      "Ragel": 8703,
      "Yacc": 4781,
      "Lex": 3546,
      "Jinja": 1504,
      "Dockerfile": 838,
      "Ruby": 422,
      "PLpgSQL": 291,
      "DIGITAL Command Language": 141,
      "Assembly": 18
    },
    "commit_activity": {
      "total_commits_last_year": 2100,
      "avg_commits_per_week": 40.38461538461539,
      "days_active_last_year": 254
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:27:31.247510"
  }
}