{
  "cve_id": "CVE-2016-6175",
  "github_data": {
    "repository": "NagVis/nagvis",
    "fix_commit": "4fe8672a5aec3467da72b5852ca6d283c15adb53",
    "related_commits": [
      "4fe8672a5aec3467da72b5852ca6d283c15adb53",
      "4fe8672a5aec3467da72b5852ca6d283c15adb53"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "4fe8672a5aec3467da72b5852ca6d283c15adb53",
      "commit_date": "2016-06-25T11:21:48Z",
      "author": {
        "login": "LarsMichelsen",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Clarified change log on php-gettext 1.0.12 update",
        "length": 49,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 244,
        "additions": 116,
        "deletions": 128
      },
      "files": [
        {
          "filename": "ChangeLog",
          "status": "modified",
          "additions": 3,
          "deletions": 16,
          "patch": "@@ -3,22 +3,9 @@ Core:\n   * MK BI backend: Now prints an error message when trying to use it with\n     objects that are not aggregations.\n   * NDO MySQL backend: Filtering out legacy objects from DB (setting is_active filter)\n-  * FIX: A local exploitable security issue has been discovered in the php-gettext\n-    library which is used to make NagVis localizable on platforms which has no gettext\n-    support built into PHP.\n-\n-    A local user with privileges to create/modify the .mo files used by NagVis\n-    could modify a file in a way that it executes custom code with the privileges of\n-    the web server which is executing the NagVis code.\n-\n-    To more than 99% of NagVis installations (installed with the install.sh\n-    installer or OMD) this is no special threat because a user which is able to .mo\n-    files is able to modify the .php program files of NagVis. An attacker\n-    would rather modify the .php files directly instead of injecting it's code through\n-    the .mo files.\n-\n-    However, to fix this for most installations minor issue, we included php-gettext\n-    in version 1.0.12 with this release which fixes the issue.\n+  * FIX: Updated php-gettext to 1.0.12 and commented out unused code because it contains\n+    some exploitable PHP code which could be used to inject code using modified .mo files.\n+    However, NagVis has never used these functions, so was never affected by this issue.\n \n Frontend:\n   * FIX: Fixed error in ad-hoc automaps (Network Topology in Check_MK) during state updates"
        },
        {
          "filename": "share/server/core/ext/php-gettext-1.0.12/gettext.php",
          "status": "modified",
          "additions": 113,
          "deletions": 112,
          "patch": "@@ -275,72 +275,73 @@ function translate($string) {\n    * @access private\n    * @return string sanitized plural form expression\n    */\n-  function sanitize_plural_expression($expr) {\n-    // Get rid of disallowed characters.\n-    $expr = preg_replace('@[^a-zA-Z0-9_:;\\(\\)\\?\\|\\&=!<>+*/\\%-]@', '', $expr);\n-\n-    // Add parenthesis for tertiary '?' operator.\n-    $expr .= ';';\n-    $res = '';\n-    $p = 0;\n-    for ($i = 0; $i < strlen($expr); $i++) {\n-      $ch = $expr[$i];\n-      switch ($ch) {\n-      case '?':\n-        $res .= ' ? (';\n-        $p++;\n-        break;\n-      case ':':\n-        $res .= ') : (';\n-        break;\n-      case ';':\n-        $res .= str_repeat( ')', $p) . ';';\n-        $p = 0;\n-        break;\n-      default:\n-        $res .= $ch;\n-      }\n-    }\n-    return $res;\n-  }\n+  //function sanitize_plural_expression($expr) {\n+  //  // Get rid of disallowed characters.\n+  //  $expr = preg_replace('@[^a-zA-Z0-9_:;\\(\\)\\?\\|\\&=!<>+*/\\%-]@', '', $expr);\n+\n+  //  // Add parenthesis for tertiary '?' operator.\n+  //  $expr .= ';';\n+  //  $res = '';\n+  //  $p = 0;\n+  //  for ($i = 0; $i < strlen($expr); $i++) {\n+  //    $ch = $expr[$i];\n+  //    switch ($ch) {\n+  //    case '?':\n+  //      $res .= ' ? (';\n+  //      $p++;\n+  //      break;\n+  //    case ':':\n+  //      $res .= ') : (';\n+  //      break;\n+  //    case ';':\n+  //      $res .= str_repeat( ')', $p) . ';';\n+  //      $p = 0;\n+  //      break;\n+  //    default:\n+  //      $res .= $ch;\n+  //    }\n+  //  }\n+  //  return $res;\n+  //}\n \n   /**\n    * Parse full PO header and extract only plural forms line.\n    *\n    * @access private\n    * @return string verbatim plural form header field\n    */\n-  function extract_plural_forms_header_from_po_header($header) {\n-    if (preg_match(\"/(^|\\n)plural-forms: ([^\\n]*)\\n/i\", $header, $regs))\n-      $expr = $regs[2];\n-    else\n-      $expr = \"nplurals=2; plural=n == 1 ? 0 : 1;\";\n-    return $expr;\n-  }\n+  //function extract_plural_forms_header_from_po_header($header) {\n+  //  if (preg_match(\"/(^|\\n)plural-forms: ([^\\n]*)\\n/i\", $header, $regs))\n+  //    $expr = $regs[2];\n+  //  else\n+  //    $expr = \"nplurals=2; plural=n == 1 ? 0 : 1;\";\n+  //  return $expr;\n+  //}\n \n   /**\n    * Get possible plural forms from MO header\n    *\n    * @access private\n    * @return string plural form header\n    */\n-  function get_plural_forms() {\n-    // lets assume message number 0 is header\n-    // this is true, right?\n-    $this->load_tables();\n-\n-    // cache header field for plural forms\n-    if (! is_string($this->pluralheader)) {\n-      if ($this->enable_cache) {\n-        $header = $this->cache_translations[\"\"];\n-      } else {\n-        $header = $this->get_translation_string(0);\n-      }\n-      $expr = $this->extract_plural_forms_header_from_po_header($header);\n-      $this->pluralheader = $this->sanitize_plural_expression($expr);\n-    }\n-    return $this->pluralheader;\n-  }\n+  //function get_plural_forms() {\n+  //  // lets assume message number 0 is header\n+  //  // this is true, right?\n+  //  $this->load_tables();\n+\n+  //  // cache header field for plural forms\n+  //  if (! is_string($this->pluralheader)) {\n+  //    if ($this->enable_cache) {\n+  //      $header = $this->cache_translations[\"\"];\n+  //    } else {\n+  //      $header = $this->get_translation_string(0);\n+  //    }\n+  //    print($header);\n+  //    $expr = $this->extract_plural_forms_header_from_po_header($header);\n+  //    $this->pluralheader = $this->sanitize_plural_expression($expr);\n+  //  }\n+  //  return $this->pluralheader;\n+  //}\n \n   /**\n    * Detects which plural form to take\n@@ -349,23 +350,23 @@ function get_plural_forms() {\n    * @param n count\n    * @return int array index of the right plural form\n    */\n-  function select_string($n) {\n-    if (!is_int($n)) {\n-      throw new InvalidArgumentException(\n-        \"Select_string only accepts integers: \" . $n);\n-    }\n-    $string = $this->get_plural_forms();\n-    $string = str_replace('nplurals',\"\\$total\",$string);\n-    $string = str_replace(\"n\",$n,$string);\n-    $string = str_replace('plural',\"\\$plural\",$string);\n-\n-    $total = 0;\n-    $plural = 0;\n-\n-    eval(\"$string\");\n-    if ($plural >= $total) $plural = $total - 1;\n-    return $plural;\n-  }\n+  //function select_string($n) {\n+  //  if (!is_int($n)) {\n+  //    throw new InvalidArgumentException(\n+  //      \"Select_string only accepts integers: \" . $n);\n+  //  }\n+  //  $string = $this->get_plural_forms();\n+  //  $string = str_replace('nplurals',\"\\$total\",$string);\n+  //  $string = str_replace(\"n\",$n,$string);\n+  //  $string = str_replace('plural',\"\\$plural\",$string);\n+\n+  //  $total = 0;\n+  //  $plural = 0;\n+\n+  //  eval(\"$string\");\n+  //  if ($plural >= $total) $plural = $total - 1;\n+  //  return $plural;\n+  //}\n \n   /**\n    * Plural version of gettext\n@@ -376,40 +377,40 @@ function select_string($n) {\n    * @param string number\n    * @return translated plural form\n    */\n-  function ngettext($single, $plural, $number) {\n-    if ($this->short_circuit) {\n-      if ($number != 1)\n-        return $plural;\n-      else\n-        return $single;\n-    }\n-\n-    // find out the appropriate form\n-    $select = $this->select_string($number);\n-\n-    // this should contains all strings separated by NULLs\n-    $key = $single . chr(0) . $plural;\n-\n-\n-    if ($this->enable_cache) {\n-      if (! array_key_exists($key, $this->cache_translations)) {\n-        return ($number != 1) ? $plural : $single;\n-      } else {\n-        $result = $this->cache_translations[$key];\n-        $list = explode(chr(0), $result);\n-        return $list[$select];\n-      }\n-    } else {\n-      $num = $this->find_string($key);\n-      if ($num == -1) {\n-        return ($number != 1) ? $plural : $single;\n-      } else {\n-        $result = $this->get_translation_string($num);\n-        $list = explode(chr(0), $result);\n-        return $list[$select];\n-      }\n-    }\n-  }\n+  //function ngettext($single, $plural, $number) {\n+  //  if ($this->short_circuit) {\n+  //    if ($number != 1)\n+  //      return $plural;\n+  //    else\n+  //      return $single;\n+  //  }\n+\n+  //  // find out the appropriate form\n+  //  $select = $this->select_string($number);\n+\n+  //  // this should contains all strings separated by NULLs\n+  //  $key = $single . chr(0) . $plural;\n+\n+\n+  //  if ($this->enable_cache) {\n+  //    if (! array_key_exists($key, $this->cache_translations)) {\n+  //      return ($number != 1) ? $plural : $single;\n+  //    } else {\n+  //      $result = $this->cache_translations[$key];\n+  //      $list = explode(chr(0), $result);\n+  //      return $list[$select];\n+  //    }\n+  //  } else {\n+  //    $num = $this->find_string($key);\n+  //    if ($num == -1) {\n+  //      return ($number != 1) ? $plural : $single;\n+  //    } else {\n+  //      $result = $this->get_translation_string($num);\n+  //      $list = explode(chr(0), $result);\n+  //      return $list[$select];\n+  //    }\n+  //  }\n+  //}\n \n   function pgettext($context, $msgid) {\n     $key = $context . chr(4) . $msgid;\n@@ -421,16 +422,16 @@ function pgettext($context, $msgid) {\n     }\n   }\n \n-  function npgettext($context, $singular, $plural, $number) {\n-    $key = $context . chr(4) . $singular;\n-    $ret = $this->ngettext($key, $plural, $number);\n-    if (strpos($ret, \"\\004\") !== FALSE) {\n-      return $singular;\n-    } else {\n-      return $ret;\n-    }\n+  //function npgettext($context, $singular, $plural, $number) {\n+  //  $key = $context . chr(4) . $singular;\n+  //  $ret = $this->ngettext($key, $plural, $number);\n+  //  if (strpos($ret, \"\\004\") !== FALSE) {\n+  //    return $singular;\n+  //  } else {\n+  //    return $ret;\n+  //  }\n \n-  }\n+  //}\n }\n \n ?>"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ec23e885d6b67e51f1e2039000332d07c92e75e3",
            "date": "2024-09-30T11:36:51Z",
            "author_login": "loocars"
          },
          {
            "sha": "b46031b4c596f1caf6f1e1af59a19e8a31fcf071",
            "date": "2024-09-14T15:46:05Z",
            "author_login": "LarsMichelsen"
          },
          {
            "sha": "95078c7072f1c03993dc196c297b85076156d00b",
            "date": "2024-09-10T15:04:09Z",
            "author_login": "lpetrora"
          },
          {
            "sha": "04a4ae7251a1bb8ff54e520b911db6d36982b5b3",
            "date": "2024-08-30T07:39:06Z",
            "author_login": "loocars"
          },
          {
            "sha": "9d06d102e1348c7859b727fccfa56956b5869207",
            "date": "2024-08-29T07:16:15Z",
            "author_login": "loocars"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-94",
    "description": "Eval injection vulnerability in php-gettext 1.0.12 and earlier allows remote attackers to execute arbitrary PHP code via a crafted plural forms header.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-02-07T15:59:00.397",
    "last_modified": "2024-11-21T02:55:36.417",
    "fix_date": "2016-06-25T11:21:48Z"
  },
  "references": [
    {
      "url": "https://bugs.launchpad.net/php-gettext/+bug/1606184",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/NagVis/nagvis/commit/4fe8672a5aec3467da72b5852ca6d283c15adb53",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://kmkz-web-blog.blogspot.cz/2016/07/advisory-cve-2016-6175.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.exploit-db.com/exploits/40154/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://bugs.launchpad.net/php-gettext/+bug/1606184",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/NagVis/nagvis/commit/4fe8672a5aec3467da72b5852ca6d283c15adb53",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://kmkz-web-blog.blogspot.cz/2016/07/advisory-cve-2016-6175.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.exploit-db.com/exploits/40154/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:52.213642",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "nagvis",
    "owner": "NagVis",
    "created_at": "2015-03-02T18:19:06Z",
    "updated_at": "2024-12-23T17:07:41Z",
    "pushed_at": "2024-12-19T10:49:39Z",
    "size": 14186,
    "stars": 116,
    "forks": 74,
    "open_issues": 73,
    "watchers": 116,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "PHP": 1753118,
      "JavaScript": 648544,
      "Shell": 72660,
      "CSS": 35209,
      "HTML": 34504,
      "Makefile": 4233,
      "Smarty": 2182
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T08:05:58.586584"
  }
}