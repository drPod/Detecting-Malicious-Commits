{
  "cve_id": "CVE-2016-6912",
  "github_data": {
    "repository": "libgd/libgd",
    "fix_commit": "a49feeae76d41959d85ee733925a4cf40bac61b2",
    "related_commits": [
      "a49feeae76d41959d85ee733925a4cf40bac61b2",
      "a49feeae76d41959d85ee733925a4cf40bac61b2"
    ],
    "patch_url": "https://github.com/libgd/libgd/commit/a49feeae76d41959d85ee733925a4cf40bac61b2.patch",
    "fix_commit_details": {
      "sha": "a49feeae76d41959d85ee733925a4cf40bac61b2",
      "commit_date": "2016-08-16T15:40:23Z",
      "author": {
        "login": "cmb69",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix double-free in gdImageWebPtr()",
        "length": 860,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 111,
        "additions": 81,
        "deletions": 30
      },
      "files": [
        {
          "filename": "src/gd_webp.c",
          "status": "modified",
          "additions": 46,
          "deletions": 28,
          "patch": "@@ -162,54 +162,41 @@ BGD_DECLARE(gdImagePtr) gdImageCreateFromWebpCtx (gdIOCtx * infile)\n \treturn im;\n }\n \n-/*\n-  Function: gdImageWebpCtx\n-\n-    Write the image as WebP data via a <gdIOCtx>. See <gdImageWebpEx>\n-    for more details.\n-\n-  Parameters:\n-\n-    im      - The image to write.\n-    outfile - The output sink.\n-    quality - Image quality.\n \n-  Returns:\n-\n-    Nothing.\n-*/\n-BGD_DECLARE(void) gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quality)\n+/* returns 0 on success, 1 on failure */\n+static int _gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quality)\n {\n \tuint8_t *argb;\n \tint x, y;\n \tuint8_t *p;\n \tuint8_t *out;\n \tsize_t out_size;\n+    int ret = 0;\n \n \tif (im == NULL) {\n-\t\treturn;\n+\t\treturn 1;\n \t}\n \n \tif (!gdImageTrueColor(im)) {\n-\t\tgd_error(\"Paletter image not supported by webp\");\n-\t\treturn;\n+\t\tgd_error(\"Palette image not supported by webp\");\n+\t\treturn 1;\n \t}\n \n \tif (quality == -1) {\n \t\tquality = 80;\n \t}\n \n \tif (overflow2(gdImageSX(im), 4)) {\n-\t\treturn;\n+\t\treturn 1;\n \t}\n \n \tif (overflow2(gdImageSX(im) * 4, gdImageSY(im))) {\n-\t\treturn;\n+\t\treturn 1;\n \t}\n \n \targb = (uint8_t *)gdMalloc(gdImageSX(im) * 4 * gdImageSY(im));\n \tif (!argb) {\n-\t\treturn;\n+\t\treturn 1;\n \t}\n \tp = argb;\n \tfor (y = 0; y < gdImageSY(im); y++) {\n@@ -232,13 +219,38 @@ BGD_DECLARE(void) gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quality)\n \tout_size = WebPEncodeRGBA(argb, gdImageSX(im), gdImageSY(im), gdImageSX(im) * 4, quality, &out);\n \tif (out_size == 0) {\n \t\tgd_error(\"gd-webp encoding failed\");\n+        ret = 1;\n \t\tgoto freeargb;\n \t}\n \tgdPutBuf(out, out_size, outfile);\n \tfree(out);\n \n freeargb:\n \tgdFree(argb);\n+\n+    return ret;\n+}\n+\n+\n+/*\n+  Function: gdImageWebpCtx\n+\n+    Write the image as WebP data via a <gdIOCtx>. See <gdImageWebpEx>\n+    for more details.\n+\n+  Parameters:\n+\n+    im      - The image to write.\n+    outfile - The output sink.\n+    quality - Image quality.\n+\n+  Returns:\n+\n+    Nothing.\n+*/\n+BGD_DECLARE(void) gdImageWebpCtx (gdImagePtr im, gdIOCtx * outfile, int quality)\n+{\n+\t_gdImageWebpCtx(im, outfile, quality);\n }\n \n /*\n@@ -278,7 +290,7 @@ BGD_DECLARE(void) gdImageWebpEx (gdImagePtr im, FILE * outFile, int quality)\n \tif (out == NULL) {\n \t\treturn;\n \t}\n-\tgdImageWebpCtx(im, out, quality);\n+\t_gdImageWebpCtx(im, out, quality);\n \tout->gd_free(out);\n }\n \n@@ -302,7 +314,7 @@ BGD_DECLARE(void) gdImageWebp (gdImagePtr im, FILE * outFile)\n \tif (out == NULL) {\n \t\treturn;\n \t}\n-\tgdImageWebpCtx(im, out, -1);\n+\t_gdImageWebpCtx(im, out, -1);\n \tout->gd_free(out);\n }\n \n@@ -318,8 +330,11 @@ BGD_DECLARE(void *) gdImageWebpPtr (gdImagePtr im, int *size)\n \tif (out == NULL) {\n \t\treturn NULL;\n \t}\n-\tgdImageWebpCtx(im, out, -1);\n-\trv = gdDPExtractData(out, size);\n+\tif (_gdImageWebpCtx(im, out, -1)) {\n+\t\trv = NULL;\n+\t} else {\n+\t\trv = gdDPExtractData(out, size);\n+\t}\n \tout->gd_free(out);\n \n \treturn rv;\n@@ -337,8 +352,11 @@ BGD_DECLARE(void *) gdImageWebpPtrEx (gdImagePtr im, int *size, int quality)\n \tif (out == NULL) {\n \t\treturn NULL;\n \t}\n-\tgdImageWebpCtx(im, out, quality);\n-\trv = gdDPExtractData(out, size);\n+\tif (_gdImageWebpCtx(im, out, quality)) {\n+        rv = NULL;\n+    } else {\n+        rv = gdDPExtractData(out, size);\n+    }\n \tout->gd_free(out);\n \treturn rv;\n }"
        },
        {
          "filename": "tests/webp/.gitignore",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1 +1,2 @@\n /bug00111\n+/bug_double_free"
        },
        {
          "filename": "tests/webp/CMakeLists.txt",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1,6 +1,7 @@\n IF(WEBP_FOUND)\n LIST(APPEND TESTS_FILES\n \tbug00111\n+\tbug_double_free\n )\n ENDIF(WEBP_FOUND)\n "
        },
        {
          "filename": "tests/webp/Makemodule.am",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -1,7 +1,9 @@\n if HAVE_LIBWEBP\n libgd_test_programs += \\\n-\twebp/bug00111\n+\twebp/bug00111 \\\n+\twebp/bug_double_free\n endif\n \n EXTRA_DIST += \\\n-\twebp/CMakeLists.txt\n+\twebp/CMakeLists.txt \\\n+\twebp/bug_double_free.jpg"
        },
        {
          "filename": "tests/webp/bug_double_free.c",
          "status": "added",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -0,0 +1,29 @@\n+/**\n+ * Test that a too large image doesn't trigger an double-free when written\n+ * to memory.\n+ */\n+\n+\n+#include \"gd.h\"\n+#include \"gdtest.h\"\n+\n+\n+int main()\n+{\n+    gdImagePtr im1, im2;\n+    FILE *fp;\n+    int size;\n+\n+    fp = gdTestFileOpen2(\"webp\", \"bug_double_free.jpg\");\n+    gdTestAssert(fp != NULL);\n+    im1 = gdImageCreateFromJpeg(fp);\n+    gdTestAssert(im1 != NULL);\n+    fclose(fp);\n+\n+    im2 = gdImageWebpPtr(im1, &size);\n+    gdTestAssert(im2 == NULL);\n+\n+    gdImageDestroy(im1);\n+\n+    return gdNumFailures();\n+}"
        },
        {
          "filename": "tests/webp/bug_double_free.jpg",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "721f9228c2cce7d1361a2f3fd95ec95b8b959dbf",
            "date": "2025-01-10T11:37:52Z",
            "author_login": "cmb69"
          },
          {
            "sha": "d69be67d4946d2a92da7308a4b5820afa73b5a99",
            "date": "2025-01-10T11:31:49Z",
            "author_login": "cmb69"
          },
          {
            "sha": "c2a5cbc74f407da0e38e9cbfdefb454e5a3300c2",
            "date": "2025-01-09T13:41:13Z",
            "author_login": "cmb69"
          },
          {
            "sha": "56d34bc6142f2aaa289d43ed95eee5a493a71cd7",
            "date": "2025-01-09T13:22:12Z",
            "author_login": "cmb69"
          },
          {
            "sha": "a656f5cc5592757996e9e96b0821a0966bfaa3b3",
            "date": "2025-01-09T12:11:19Z",
            "author_login": "cmb69"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-415",
    "description": "Double free vulnerability in the gdImageWebPtr function in the GD Graphics Library (aka libgd) before 2.2.4 allows remote attackers to have unspecified impact via large width and height values.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-01-26T15:59:00.330",
    "last_modified": "2024-11-21T02:57:05.110",
    "fix_date": "2016-08-16T15:40:23Z"
  },
  "references": [
    {
      "url": "http://www.debian.org/security/2017/dsa-3777",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.securityfocus.com/bid/95843",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/libgd/libgd/blob/gd-2.2.4/CHANGELOG.md",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/libgd/libgd/commit/a49feeae76d41959d85ee733925a4cf40bac61b2",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.debian.org/security/2017/dsa-3777",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securityfocus.com/bid/95843",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/libgd/libgd/blob/gd-2.2.4/CHANGELOG.md",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/libgd/libgd/commit/a49feeae76d41959d85ee733925a4cf40bac61b2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:49.844134",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "libgd",
    "owner": "libgd",
    "created_at": "2015-01-22T08:50:57Z",
    "updated_at": "2025-01-12T09:49:38Z",
    "pushed_at": "2025-01-11T04:02:17Z",
    "size": 26535,
    "stars": 909,
    "forks": 273,
    "open_issues": 130,
    "watchers": 909,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "GD-2.1",
      "GD-2.2",
      "GD-2.3"
    ],
    "languages": {
      "C": 1645033,
      "CMake": 68297,
      "C++": 65997,
      "M4": 46524,
      "HTML": 42081,
      "Shell": 37342,
      "Makefile": 10014,
      "Perl": 3997,
      "Batchfile": 2234,
      "Tcl": 1381,
      "Python": 1206
    },
    "commit_activity": {
      "total_commits_last_year": 41,
      "avg_commits_per_week": 0.7884615384615384,
      "days_active_last_year": 20
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:09:06.928326"
  }
}