{
  "cve_id": "CVE-2016-7097",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "073931017b49d9458aa351605b43a7e34598caef",
    "related_commits": [
      "073931017b49d9458aa351605b43a7e34598caef",
      "073931017b49d9458aa351605b43a7e34598caef"
    ],
    "patch_url": "https://github.com/torvalds/linux/commit/073931017b49d9458aa351605b43a7e34598caef.patch",
    "fix_commit_details": {
      "sha": "073931017b49d9458aa351605b43a7e34598caef",
      "commit_date": "2016-09-19T15:39:09Z",
      "author": {
        "login": "jankara",
        "type": "User",
        "stats": {
          "total_commits": 2057,
          "average_weekly_commits": 1.7300252312867956,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 546
        }
      },
      "commit_message": {
        "title": "posix_acl: Clear SGID bit when setting file permissions",
        "length": 625,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 191,
        "additions": 89,
        "deletions": 102
      },
      "files": [
        {
          "filename": "fs/9p/acl.c",
          "status": "modified",
          "additions": 17,
          "deletions": 23,
          "patch": "@@ -276,32 +276,26 @@ static int v9fs_xattr_set_acl(const struct xattr_handler *handler,\n \tswitch (handler->flags) {\n \tcase ACL_TYPE_ACCESS:\n \t\tif (acl) {\n-\t\t\tumode_t mode = inode->i_mode;\n-\t\t\tretval = posix_acl_equiv_mode(acl, &mode);\n-\t\t\tif (retval < 0)\n+\t\t\tstruct iattr iattr;\n+\n+\t\t\tretval = posix_acl_update_mode(inode, &iattr.ia_mode, &acl);\n+\t\t\tif (retval)\n \t\t\t\tgoto err_out;\n-\t\t\telse {\n-\t\t\t\tstruct iattr iattr;\n-\t\t\t\tif (retval == 0) {\n-\t\t\t\t\t/*\n-\t\t\t\t\t * ACL can be represented\n-\t\t\t\t\t * by the mode bits. So don't\n-\t\t\t\t\t * update ACL.\n-\t\t\t\t\t */\n-\t\t\t\t\tacl = NULL;\n-\t\t\t\t\tvalue = NULL;\n-\t\t\t\t\tsize = 0;\n-\t\t\t\t}\n-\t\t\t\t/* Updte the mode bits */\n-\t\t\t\tiattr.ia_mode = ((mode & S_IALLUGO) |\n-\t\t\t\t\t\t (inode->i_mode & ~S_IALLUGO));\n-\t\t\t\tiattr.ia_valid = ATTR_MODE;\n-\t\t\t\t/* FIXME should we update ctime ?\n-\t\t\t\t * What is the following setxattr update the\n-\t\t\t\t * mode ?\n+\t\t\tif (!acl) {\n+\t\t\t\t/*\n+\t\t\t\t * ACL can be represented\n+\t\t\t\t * by the mode bits. So don't\n+\t\t\t\t * update ACL.\n \t\t\t\t */\n-\t\t\t\tv9fs_vfs_setattr_dotl(dentry, &iattr);\n+\t\t\t\tvalue = NULL;\n+\t\t\t\tsize = 0;\n \t\t\t}\n+\t\t\tiattr.ia_valid = ATTR_MODE;\n+\t\t\t/* FIXME should we update ctime ?\n+\t\t\t * What is the following setxattr update the\n+\t\t\t * mode ?\n+\t\t\t */\n+\t\t\tv9fs_vfs_setattr_dotl(dentry, &iattr);\n \t\t}\n \t\tbreak;\n \tcase ACL_TYPE_DEFAULT:"
        },
        {
          "filename": "fs/btrfs/acl.c",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -79,11 +79,9 @@ static int __btrfs_set_acl(struct btrfs_trans_handle *trans,\n \tcase ACL_TYPE_ACCESS:\n \t\tname = XATTR_NAME_POSIX_ACL_ACCESS;\n \t\tif (acl) {\n-\t\t\tret = posix_acl_equiv_mode(acl, &inode->i_mode);\n-\t\t\tif (ret < 0)\n+\t\t\tret = posix_acl_update_mode(inode, &inode->i_mode, &acl);\n+\t\t\tif (ret)\n \t\t\t\treturn ret;\n-\t\t\tif (ret == 0)\n-\t\t\t\tacl = NULL;\n \t\t}\n \t\tret = 0;\n \t\tbreak;"
        },
        {
          "filename": "fs/ceph/acl.c",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -95,11 +95,9 @@ int ceph_set_acl(struct inode *inode, struct posix_acl *acl, int type)\n \tcase ACL_TYPE_ACCESS:\n \t\tname = XATTR_NAME_POSIX_ACL_ACCESS;\n \t\tif (acl) {\n-\t\t\tret = posix_acl_equiv_mode(acl, &new_mode);\n-\t\t\tif (ret < 0)\n+\t\t\tret = posix_acl_update_mode(inode, &new_mode, &acl);\n+\t\t\tif (ret)\n \t\t\t\tgoto out;\n-\t\t\tif (ret == 0)\n-\t\t\t\tacl = NULL;\n \t\t}\n \t\tbreak;\n \tcase ACL_TYPE_DEFAULT:"
        },
        {
          "filename": "fs/ext2/acl.c",
          "status": "modified",
          "additions": 4,
          "deletions": 8,
          "patch": "@@ -190,15 +190,11 @@ ext2_set_acl(struct inode *inode, struct posix_acl *acl, int type)\n \t\tcase ACL_TYPE_ACCESS:\n \t\t\tname_index = EXT2_XATTR_INDEX_POSIX_ACL_ACCESS;\n \t\t\tif (acl) {\n-\t\t\t\terror = posix_acl_equiv_mode(acl, &inode->i_mode);\n-\t\t\t\tif (error < 0)\n+\t\t\t\terror = posix_acl_update_mode(inode, &inode->i_mode, &acl);\n+\t\t\t\tif (error)\n \t\t\t\t\treturn error;\n-\t\t\t\telse {\n-\t\t\t\t\tinode->i_ctime = CURRENT_TIME_SEC;\n-\t\t\t\t\tmark_inode_dirty(inode);\n-\t\t\t\t\tif (error == 0)\n-\t\t\t\t\t\tacl = NULL;\n-\t\t\t\t}\n+\t\t\t\tinode->i_ctime = CURRENT_TIME_SEC;\n+\t\t\t\tmark_inode_dirty(inode);\n \t\t\t}\n \t\t\tbreak;\n "
        },
        {
          "filename": "fs/ext4/acl.c",
          "status": "modified",
          "additions": 4,
          "deletions": 8,
          "patch": "@@ -193,15 +193,11 @@ __ext4_set_acl(handle_t *handle, struct inode *inode, int type,\n \tcase ACL_TYPE_ACCESS:\n \t\tname_index = EXT4_XATTR_INDEX_POSIX_ACL_ACCESS;\n \t\tif (acl) {\n-\t\t\terror = posix_acl_equiv_mode(acl, &inode->i_mode);\n-\t\t\tif (error < 0)\n+\t\t\terror = posix_acl_update_mode(inode, &inode->i_mode, &acl);\n+\t\t\tif (error)\n \t\t\t\treturn error;\n-\t\t\telse {\n-\t\t\t\tinode->i_ctime = ext4_current_time(inode);\n-\t\t\t\text4_mark_inode_dirty(handle, inode);\n-\t\t\t\tif (error == 0)\n-\t\t\t\t\tacl = NULL;\n-\t\t\t}\n+\t\t\tinode->i_ctime = ext4_current_time(inode);\n+\t\t\text4_mark_inode_dirty(handle, inode);\n \t\t}\n \t\tbreak;\n "
        },
        {
          "filename": "fs/f2fs/acl.c",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -210,12 +210,10 @@ static int __f2fs_set_acl(struct inode *inode, int type,\n \tcase ACL_TYPE_ACCESS:\n \t\tname_index = F2FS_XATTR_INDEX_POSIX_ACL_ACCESS;\n \t\tif (acl) {\n-\t\t\terror = posix_acl_equiv_mode(acl, &inode->i_mode);\n-\t\t\tif (error < 0)\n+\t\t\terror = posix_acl_update_mode(inode, &inode->i_mode, &acl);\n+\t\t\tif (error)\n \t\t\t\treturn error;\n \t\t\tset_acl_inode(inode, inode->i_mode);\n-\t\t\tif (error == 0)\n-\t\t\t\tacl = NULL;\n \t\t}\n \t\tbreak;\n "
        },
        {
          "filename": "fs/gfs2/acl.c",
          "status": "modified",
          "additions": 3,
          "deletions": 9,
          "patch": "@@ -92,17 +92,11 @@ int __gfs2_set_acl(struct inode *inode, struct posix_acl *acl, int type)\n \tif (type == ACL_TYPE_ACCESS) {\n \t\tumode_t mode = inode->i_mode;\n \n-\t\terror = posix_acl_equiv_mode(acl, &mode);\n-\t\tif (error < 0)\n+\t\terror = posix_acl_update_mode(inode, &inode->i_mode, &acl);\n+\t\tif (error)\n \t\t\treturn error;\n-\n-\t\tif (error == 0)\n-\t\t\tacl = NULL;\n-\n-\t\tif (mode != inode->i_mode) {\n-\t\t\tinode->i_mode = mode;\n+\t\tif (mode != inode->i_mode)\n \t\t\tmark_inode_dirty(inode);\n-\t\t}\n \t}\n \n \tif (acl) {"
        },
        {
          "filename": "fs/hfsplus/posix_acl.c",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -65,8 +65,8 @@ int hfsplus_set_posix_acl(struct inode *inode, struct posix_acl *acl,\n \tcase ACL_TYPE_ACCESS:\n \t\txattr_name = XATTR_NAME_POSIX_ACL_ACCESS;\n \t\tif (acl) {\n-\t\t\terr = posix_acl_equiv_mode(acl, &inode->i_mode);\n-\t\t\tif (err < 0)\n+\t\t\terr = posix_acl_update_mode(inode, &inode->i_mode, &acl);\n+\t\t\tif (err)\n \t\t\t\treturn err;\n \t\t}\n \t\terr = 0;"
        },
        {
          "filename": "fs/jffs2/acl.c",
          "status": "modified",
          "additions": 4,
          "deletions": 5,
          "patch": "@@ -233,9 +233,10 @@ int jffs2_set_acl(struct inode *inode, struct posix_acl *acl, int type)\n \tcase ACL_TYPE_ACCESS:\n \t\txprefix = JFFS2_XPREFIX_ACL_ACCESS;\n \t\tif (acl) {\n-\t\t\tumode_t mode = inode->i_mode;\n-\t\t\trc = posix_acl_equiv_mode(acl, &mode);\n-\t\t\tif (rc < 0)\n+\t\t\tumode_t mode;\n+\n+\t\t\trc = posix_acl_update_mode(inode, &mode, &acl);\n+\t\t\tif (rc)\n \t\t\t\treturn rc;\n \t\t\tif (inode->i_mode != mode) {\n \t\t\t\tstruct iattr attr;\n@@ -247,8 +248,6 @@ int jffs2_set_acl(struct inode *inode, struct posix_acl *acl, int type)\n \t\t\t\tif (rc < 0)\n \t\t\t\t\treturn rc;\n \t\t\t}\n-\t\t\tif (rc == 0)\n-\t\t\t\tacl = NULL;\n \t\t}\n \t\tbreak;\n \tcase ACL_TYPE_DEFAULT:"
        },
        {
          "filename": "fs/jfs/acl.c",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -78,13 +78,11 @@ static int __jfs_set_acl(tid_t tid, struct inode *inode, int type,\n \tcase ACL_TYPE_ACCESS:\n \t\tea_name = XATTR_NAME_POSIX_ACL_ACCESS;\n \t\tif (acl) {\n-\t\t\trc = posix_acl_equiv_mode(acl, &inode->i_mode);\n-\t\t\tif (rc < 0)\n+\t\t\trc = posix_acl_update_mode(inode, &inode->i_mode, &acl);\n+\t\t\tif (rc)\n \t\t\t\treturn rc;\n \t\t\tinode->i_ctime = CURRENT_TIME;\n \t\t\tmark_inode_dirty(inode);\n-\t\t\tif (rc == 0)\n-\t\t\t\tacl = NULL;\n \t\t}\n \t\tbreak;\n \tcase ACL_TYPE_DEFAULT:"
        },
        {
          "filename": "fs/ocfs2/acl.c",
          "status": "modified",
          "additions": 4,
          "deletions": 6,
          "patch": "@@ -241,13 +241,11 @@ int ocfs2_set_acl(handle_t *handle,\n \tcase ACL_TYPE_ACCESS:\n \t\tname_index = OCFS2_XATTR_INDEX_POSIX_ACL_ACCESS;\n \t\tif (acl) {\n-\t\t\tumode_t mode = inode->i_mode;\n-\t\t\tret = posix_acl_equiv_mode(acl, &mode);\n-\t\t\tif (ret < 0)\n-\t\t\t\treturn ret;\n+\t\t\tumode_t mode;\n \n-\t\t\tif (ret == 0)\n-\t\t\t\tacl = NULL;\n+\t\t\tret = posix_acl_update_mode(inode, &mode, &acl);\n+\t\t\tif (ret)\n+\t\t\t\treturn ret;\n \n \t\t\tret = ocfs2_acl_set_mode(inode, di_bh,\n \t\t\t\t\t\t handle, mode);"
        },
        {
          "filename": "fs/orangefs/acl.c",
          "status": "modified",
          "additions": 5,
          "deletions": 10,
          "patch": "@@ -73,14 +73,11 @@ int orangefs_set_acl(struct inode *inode, struct posix_acl *acl, int type)\n \tcase ACL_TYPE_ACCESS:\n \t\tname = XATTR_NAME_POSIX_ACL_ACCESS;\n \t\tif (acl) {\n-\t\t\tumode_t mode = inode->i_mode;\n-\t\t\t/*\n-\t\t\t * can we represent this with the traditional file\n-\t\t\t * mode permission bits?\n-\t\t\t */\n-\t\t\terror = posix_acl_equiv_mode(acl, &mode);\n-\t\t\tif (error < 0) {\n-\t\t\t\tgossip_err(\"%s: posix_acl_equiv_mode err: %d\\n\",\n+\t\t\tumode_t mode;\n+\n+\t\t\terror = posix_acl_update_mode(inode, &mode, &acl);\n+\t\t\tif (error) {\n+\t\t\t\tgossip_err(\"%s: posix_acl_update_mode err: %d\\n\",\n \t\t\t\t\t   __func__,\n \t\t\t\t\t   error);\n \t\t\t\treturn error;\n@@ -90,8 +87,6 @@ int orangefs_set_acl(struct inode *inode, struct posix_acl *acl, int type)\n \t\t\t\tSetModeFlag(orangefs_inode);\n \t\t\tinode->i_mode = mode;\n \t\t\tmark_inode_dirty_sync(inode);\n-\t\t\tif (error == 0)\n-\t\t\t\tacl = NULL;\n \t\t}\n \t\tbreak;\n \tcase ACL_TYPE_DEFAULT:"
        },
        {
          "filename": "fs/posix_acl.c",
          "status": "modified",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -626,6 +626,37 @@ posix_acl_create(struct inode *dir, umode_t *mode,\n }\n EXPORT_SYMBOL_GPL(posix_acl_create);\n \n+/**\n+ * posix_acl_update_mode  -  update mode in set_acl\n+ *\n+ * Update the file mode when setting an ACL: compute the new file permission\n+ * bits based on the ACL.  In addition, if the ACL is equivalent to the new\n+ * file mode, set *acl to NULL to indicate that no ACL should be set.\n+ *\n+ * As with chmod, clear the setgit bit if the caller is not in the owning group\n+ * or capable of CAP_FSETID (see inode_change_ok).\n+ *\n+ * Called from set_acl inode operations.\n+ */\n+int posix_acl_update_mode(struct inode *inode, umode_t *mode_p,\n+\t\t\t  struct posix_acl **acl)\n+{\n+\tumode_t mode = inode->i_mode;\n+\tint error;\n+\n+\terror = posix_acl_equiv_mode(*acl, &mode);\n+\tif (error < 0)\n+\t\treturn error;\n+\tif (error == 0)\n+\t\t*acl = NULL;\n+\tif (!in_group_p(inode->i_gid) &&\n+\t    !capable_wrt_inode_uidgid(inode, CAP_FSETID))\n+\t\tmode &= ~S_ISGID;\n+\t*mode_p = mode;\n+\treturn 0;\n+}\n+EXPORT_SYMBOL(posix_acl_update_mode);\n+\n /*\n  * Fix up the uids and gids in posix acl extended attributes in place.\n  */"
        },
        {
          "filename": "fs/reiserfs/xattr_acl.c",
          "status": "modified",
          "additions": 2,
          "deletions": 6,
          "patch": "@@ -242,13 +242,9 @@ __reiserfs_set_acl(struct reiserfs_transaction_handle *th, struct inode *inode,\n \tcase ACL_TYPE_ACCESS:\n \t\tname = XATTR_NAME_POSIX_ACL_ACCESS;\n \t\tif (acl) {\n-\t\t\terror = posix_acl_equiv_mode(acl, &inode->i_mode);\n-\t\t\tif (error < 0)\n+\t\t\terror = posix_acl_update_mode(inode, &inode->i_mode, &acl);\n+\t\t\tif (error)\n \t\t\t\treturn error;\n-\t\t\telse {\n-\t\t\t\tif (error == 0)\n-\t\t\t\t\tacl = NULL;\n-\t\t\t}\n \t\t}\n \t\tbreak;\n \tcase ACL_TYPE_DEFAULT:"
        },
        {
          "filename": "fs/xfs/xfs_acl.c",
          "status": "modified",
          "additions": 4,
          "deletions": 9,
          "patch": "@@ -257,16 +257,11 @@ xfs_set_acl(struct inode *inode, struct posix_acl *acl, int type)\n \t\treturn error;\n \n \tif (type == ACL_TYPE_ACCESS) {\n-\t\tumode_t mode = inode->i_mode;\n-\t\terror = posix_acl_equiv_mode(acl, &mode);\n-\n-\t\tif (error <= 0) {\n-\t\t\tacl = NULL;\n-\n-\t\t\tif (error < 0)\n-\t\t\t\treturn error;\n-\t\t}\n+\t\tumode_t mode;\n \n+\t\terror = posix_acl_update_mode(inode, &mode, &acl);\n+\t\tif (error)\n+\t\t\treturn error;\n \t\terror = xfs_set_mode(inode, mode);\n \t\tif (error)\n \t\t\treturn error;"
        },
        {
          "filename": "include/linux/posix_acl.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -93,6 +93,7 @@ extern int set_posix_acl(struct inode *, int, struct posix_acl *);\n extern int posix_acl_chmod(struct inode *, umode_t);\n extern int posix_acl_create(struct inode *, umode_t *, struct posix_acl **,\n \t\tstruct posix_acl **);\n+extern int posix_acl_update_mode(struct inode *, umode_t *, struct posix_acl **);\n \n extern int simple_set_acl(struct inode *, struct posix_acl *, int);\n extern int simple_acl_create(struct inode *, struct inode *);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 16,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7f5b6a8ec18e3add4c74682f60b90c31bdf849f2",
            "date": "2025-01-14T19:32:14Z",
            "author_login": "torvalds"
          },
          {
            "sha": "c3812b15000cc5b7b17c7238f8b12f6a22df0b1d",
            "date": "2025-01-14T18:07:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "79a1d390f879563119bf2848b621bc7eed228c7d",
            "date": "2025-01-14T17:54:57Z",
            "author_login": "torvalds"
          },
          {
            "sha": "c45323b7560ec87c37c729b703c86ee65f136d75",
            "date": "2025-01-13T17:03:18Z",
            "author_login": "torvalds"
          },
          {
            "sha": "34c8e74cd6667ef5da90d448a1af702c4b873bd3",
            "date": "2025-01-13T08:52:08Z",
            "author_login": "YageGeng"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-285",
    "description": "The filesystem implementation in the Linux kernel through 4.8.2 preserves the setgid bit during a setxattr call, which allows local users to gain group privileges by leveraging the existence of a setgid program with restrictions on execute permissions.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2016-10-16T21:59:11.147",
    "last_modified": "2024-11-21T02:57:27.480",
    "fix_date": "2016-09-19T15:39:09Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=073931017b49d9458aa351605b43a7e34598caef",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "http://marc.info/?l=linux-fsdevel&m=147162313630259&w=2",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://rhn.redhat.com/errata/RHSA-2017-0817.html",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/08/26/3",
      "source": "secalert@redhat.com",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/92659",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1038201",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.spinics.net/lists/linux-fsdevel/msg98328.html",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-3146-1",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-3146-2",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-3147-1",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:1842",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:2077",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:2669",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1368938",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/073931017b49d9458aa351605b43a7e34598caef",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://source.android.com/security/bulletin/2017-04-01",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://support.f5.com/csp/article/K31603170?utm_source=f5support&amp%3Butm_medium=RSS",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=073931017b49d9458aa351605b43a7e34598caef",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "http://marc.info/?l=linux-fsdevel&m=147162313630259&w=2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://rhn.redhat.com/errata/RHSA-2017-0817.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2016/08/26/3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/92659",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1038201",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.spinics.net/lists/linux-fsdevel/msg98328.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-3146-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-3146-2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.ubuntu.com/usn/USN-3147-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:1842",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:2077",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:2669",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1368938",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/073931017b49d9458aa351605b43a7e34598caef",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://source.android.com/security/bulletin/2017-04-01",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://support.f5.com/csp/article/K31603170?utm_source=f5support&amp%3Butm_medium=RSS",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:46.804773",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}