{
  "cve_id": "CVE-2016-9087",
  "github_data": {
    "repository": "exponentcms/exponent-cms",
    "fix_commit": "fdafb5ec97838e4edbd685f587f28d3174ebb3db",
    "related_commits": [
      "fdafb5ec97838e4edbd685f587f28d3174ebb3db",
      "fdafb5ec97838e4edbd685f587f28d3174ebb3db"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "fdafb5ec97838e4edbd685f587f28d3174ebb3db",
      "commit_date": "2016-09-28T19:21:21Z",
      "author": {
        "login": "dleffler",
        "type": "User",
        "stats": {
          "total_commits": 9296,
          "average_weekly_commits": 12.647619047619047,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 615
        }
      },
      "commit_message": {
        "title": "iniitial effort to greatly enhance system security (xss, sql inject, file exploit, rce, etc...)",
        "length": 95,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 8612,
        "additions": 4370,
        "deletions": 4242
      },
      "files": [
        {
          "filename": "framework/core/controllers/expController.php",
          "status": "modified",
          "additions": 34,
          "deletions": 8,
          "patch": "@@ -41,11 +41,19 @@ abstract class expController {\n         'create'    => 'Create',\n         'edit'      => 'Edit',\n         'delete'    => 'Delete',\n-        'approve'  => 'Approval',\n+    );\n+    protected $m_permissions = array(  // standard set of actions requiring manage permission for all modules\n+        'activate'  => 'Activate',\n+        'approve'   => 'Approve',\n+        'merge'     => 'Merge',\n+        'rerank'    => 'ReRank',\n+        'import'    => 'Import Items',\n+        'export'    => 'Export Items'\n     );\n     protected $remove_permissions = array();  // $permissions not applicable for this module from above list\n-    protected $add_permissions = array();  // additional $permissions processed for this module\n-    public $requires_login = array(); // actions/methods which ONLY require user be logged in to access...$permissions take priority\n+    protected $add_permissions = array();  // additional $permissions processed and visible  for this module\n+    protected $manage_permissions = array();  // additional actions requiring manage permission in addition to $m_permissions\n+    public $requires_login = array();  // actions/methods which ONLY require user be logged in to access...$permissions take priority\n \n     public $filepath = ''; // location of this controller's files\n     public $viewpath = ''; // location of this controllers views; defaults to controller file location\n@@ -131,6 +139,8 @@ public function __construct($src = null, $params = array()) {\n         $this->config = $config->config;\n \n         $this->params = $params;\n+        if (ENABLE_WORKFLOW)\n+            $this->permissions = array_merge($this->permissions, array('approve'=>'Approval'));\n     }\n \n     /**\n@@ -294,7 +304,7 @@ public function showall_by_tags() {\n         $modelname = $this->basemodel_name;\n \n         // get the tag being passed\n-        $tag = new expTag($this->params['tag']);\n+        $tag = new expTag(expString::escape($this->params['tag']));\n \n         // find all the id's of the portfolios for this module\n         $item_ids = $db->selectColumn($modelname, 'id', $this->aggregateWhereClause());\n@@ -328,7 +338,7 @@ public function showall_by_tags() {\n         assign_to_template(array(\n             'page'        => $page,\n             'items'       => $page->records,\n-            'moduletitle' => ucfirst($modelname) . ' ' . gt('items tagged with') . ' \"' . expString::sanitize($this->params['tag']) . '\"',\n+            'moduletitle' => ucfirst($modelname) . ' ' . gt('items tagged with') . ' \"' . expString::escape($this->params['tag']) . '\"',\n             'rank'        => ($order === 'rank') ? 1 : 0\n         ));\n     }\n@@ -454,7 +464,7 @@ public function show() {\n         if (isset($this->params['id'])) {\n             $id = $this->params['id'];\n         } elseif (isset($this->params['title'])) {\n-            $id = $this->params['title'];\n+            $id = expString::escape($this->params['title']);\n         }\n \n         $record = new $modelname($id);\n@@ -485,6 +495,7 @@ public function showByTitle() {\n         $modelname = $this->basemodel_name;\n         // first we'll check to see if this matches the sef_url field...if not then we'll look for the\n         // title field\n+        $this->params['title'] = expString::escape($this->params['title']);  // escape title to prevent sql injection\n         $record = $this->$modelname->find('first', \"sef_url='\" . $this->params['title'] . \"'\");\n         if (!is_object($record)) {\n             $record = $this->$modelname->find('first', \"title='\" . $this->params['title'] . \"'\");\n@@ -1012,7 +1023,7 @@ public function getRSSContent($limit = 0) {\n     public function rss() {\n         require_once(BASE . 'external/feedcreator.class.php');\n \n-        $id = isset($this->params['title']) ? $this->params['title'] : (isset($this->params['id']) ? $this->params['id'] : null);\n+        $id = isset($this->params['title']) ? expString::escape($this->params['title']) : (isset($this->params['id']) ? $this->params['id'] : null);\n         if (empty($id)) {\n             $module = !empty($this->params['module']) ? $this->params['module'] : $this->params['controller'];\n             $id = array('module' => $module, 'src' => $this->params['src']);\n@@ -1143,7 +1154,7 @@ public function downloadfile() {\n     }\n \n     /**\n-     * permission functions to aggregate a module's permissions based on add/remove permissions\n+     * permission functions to aggregate a module's visible permissions based on add/remove permissions\n      *\n      * @return array\n      */\n@@ -1157,6 +1168,21 @@ public function permissions() {\n         return $perms;\n     }\n \n+    /**\n+     * permission functions to aggregate a module's permissions based on add/remove and manage permissions\n+     *\n+     * @return array\n+     */\n+    public function permissions_all() {\n+        //set the permissions array\n+        $perms = array();\n+        foreach ($this->permissions as $perm => $name) {\n+            if (!in_array($perm, $this->remove_permissions)) $perms[$perm] = $name;\n+        }\n+        $perms = array_merge($perms, $this->m_permissions, $this->add_permissions, $this->manage_permissions);\n+        return $perms;\n+    }\n+\n     // create a psuedo global permission specific to the module; return true grants permission, false continues with other permission checks\n     public static function checkPermissions($permission, $location) {\n         return false;"
        },
        {
          "filename": "framework/core/expFramework.php",
          "status": "modified",
          "additions": 36,
          "deletions": 34,
          "patch": "@@ -285,13 +285,13 @@ function renderAction(array $parms=array()) {\n \n     // initialize the controller.\n     $src = isset($parms['src']) ? $parms['src'] : null;\n-    $controller = new $fullControllerName($src, $parms);    \n-    \n+    $controller = new $fullControllerName($src, $parms);\n+\n     //Set up the correct template to use for this action\n     global $template;\n     $view = !empty($parms['view']) ? $parms['view'] : $action;\n     $template = expTemplate::get_template_for_action($controller, $view, $controller->loc);\n-    \n+\n     //setup default model(s) for this controller's actions to use\n     foreach ($controller->getModels() as $model) {\n         $controller->$model = new $model(null,false,false);   //added null,false,false to reduce unnecessary queries. FJD\n@@ -324,28 +324,30 @@ function renderAction(array $parms=array()) {\n     }\n \n     // check the perms for this action\n-    $perms = $controller->permissions();\n-    \n+    $perms = $controller->permissions_all();\n+\n+    $common_action = null;\n+    // action convention for controllers that manage more than one model (datatype).\n+    // if you preface the name action name with a common crud action name we can check perms on\n+    // it with the developer needing to specify any...better safe than sorry.\n+    // i.e if the action is edit_mymodel it will be checked against the edit permission\n+    if (stristr($parms['action'], '_'))\n+        $parts = explode(\"_\", $parms['action']);\n+    else\n+        $parts = preg_split('/(?=[A-Z])/', $parms['action']);  // account for actions with camelCase action/perm such as editItem\n+    $common_action = isset($parts[0]) ? $parts[0] : null;\n     // we have to treat the update permission a little different..it's tied to the create/edit\n     // permissions.  Really the only way this will fail will be if someone bypasses the perm check\n     // on the edit form somehow..like a hacker trying to bypass the form and just submit straight to\n     // the action. To safeguard, we'll catch if the action is update and change it either to create or\n     // edit depending on whether an id param is passed to. that should be sufficient.\n-    $common_action = null;\n-    //FIXME do we also need to account for actions with camelcase action/perm such as editItem ???\n-    if ($parms['action'] == 'update') {\n+    if ($parms['action'] == 'update' || $common_action == 'update') {\n         $perm_action = (!isset($parms['id']) || $parms['id'] == 0) ? 'create' : 'edit';\n-    } elseif ($parms['action'] == 'edit' && (!isset($parms['id']) || $parms['id'] == 0)) {\n+    } elseif (($parms['action'] == 'edit' || $common_action == 'edit') && (!isset($parms['id']) || $parms['id'] == 0)) {\n         $perm_action = 'create';\n     } elseif ($parms['action'] == 'saveconfig') {\n         $perm_action = 'configure';\n     } else {\n-        // action convention for controllers that manage more than one model (datatype). \n-        // if you preface the name action name with a common crud action name we can check perms on \n-        // it with the developer needing to specify any...better safe than sorry.\n-        // i.e if the action is edit_mymodel it will be checked against the edit permission\n-        if (stristr($parms['action'], '_')) $parts = explode(\"_\", $parms['action']);\n-        $common_action = isset($parts[0]) ? $parts[0] : null;\n         $perm_action = $parms['action'];\n     }\n \n@@ -424,24 +426,24 @@ function renderAction(array $parms=array()) {\n     } elseif (array_key_exists($perm_action, $controller->requires_login)) {\n         // check if the action requires the user to at least be logged in\n         if (!$user->isLoggedIn()) {\n-            $msg = empty($controller->requires_login[$perm_action]) ? gt(\"You must be logged in to perform this action\") : $controller->requires_login[$perm_action];\n+            $msg = empty($controller->requires_login[$perm_action]) ? gt(\"You must be logged in to perform this action\") : gt($controller->requires_login[$perm_action]);\n             flash('error', $msg);\n             notfoundController::handle_not_authorized();\n             expHistory::redirecto_login();\n         }\n     } elseif (array_key_exists($common_action, $controller->requires_login)) {\n         // check if the action requires the user to at least be logged in\n         if (!$user->isLoggedIn()) {\n-            $msg = empty($controller->requires_login[$common_action]) ? gt(\"You must be logged in to perform this action\") : $controller->requires_login[$common_action];\n+            $msg = empty($controller->requires_login[$common_action]) ? gt(\"You must be logged in to perform this action\") : gt($controller->requires_login[$common_action]);\n             flash('error', $msg);\n             notfoundController::handle_not_authorized();\n             expHistory::redirecto_login();\n         }\n-    } \n-    \n+    }\n+\n     // register this controllers permissions to the view for in view perm checks\n     $template->register_permissions(array_keys($perms), $controller->loc);\n-    \n+\n     // globalizing $user inside all templates\n     $template->assign('user', $user);\n \n@@ -486,7 +488,7 @@ function redirect_to($params=array(), $secure=false) {\n     $link = (!is_array($params)) ? $params : $router->makeLink($params, false, $secure);\n     header(\"Location: \" . $link);\n     exit();\n-}   \n+}\n \n function flash($name, $msg) {\n     expQueue::flash($name, $msg);\n@@ -514,7 +516,7 @@ function show_msg_queue($name=null) {\n  */\n function assign_to_template(array $vars=array()) {\n     global $template;\n-    \n+\n     if (empty($template) || count($vars) == 0) return false;\n     foreach ($vars as $key=>$val) {\n         $template->assign($key, $val);\n@@ -540,7 +542,7 @@ function get_common_template($view, $loc, $controllername='') {\n     $controller = new stdClass();\n     $controller->baseclassname = empty($controllername) ? 'common' : $controllername;\n     $controller->loc = $loc;\n-    \n+\n     $themepath = BASE . 'themes/' . DISPLAY_THEME . '/modules/common/views/' . $controllername . '/' . $view . '.tpl';\n     $basenewuipath = BASE . 'framework/modules/common/views/' . $controllername . '/' . $view . '.newui.tpl';\n     $basepath = BASE . 'framework/modules/common/views/' . $controllername . '/' . $view . '.tpl';\n@@ -581,19 +583,19 @@ function get_config_templates($controller, $loc) {\n     return expTemplate::get_config_templates($controller, $loc);\n \n //    global $db;\n-    \n+\n     // set paths we will search in for the view\n     $commonpaths = array(\n         BASE.'framework/modules/common/views/configure',\n         BASE.'themes/'.DISPLAY_THEME.'/modules/common/views/configure',\n     );\n-    \n+\n     $modpaths = array(\n         $controller->viewpath.'/configure',\n \t    BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath.'/configure'\n     );\n-    \n-    // get the common configuration files    \n+\n+    // get the common configuration files\n     $common_views = expTemplate::find_config_views($commonpaths, $controller->remove_configs);\n     foreach ($common_views as $key=>$value) {\n         $common_views[$key]['name'] = gt($value['name']);\n@@ -608,7 +610,7 @@ function get_config_templates($controller, $loc) {\n         $module_views[$key]['name'] = gt($value['name']);\n     }\n \n-    // look for a config form for this module's current view    \n+    // look for a config form for this module's current view\n //    $controller->loc->mod = expModules::getControllerClassName($controller->loc->mod);\n     //check to see if hcview was passed along, indicating a hard-coded module\n //    if (!empty($controller->params['hcview'])) {\n@@ -625,7 +627,7 @@ function get_config_templates($controller, $loc) {\n //            $module_views[$viewname]['file'] =$path.'/'.$viewconfig;\n //        }\n //    }\n-    \n+\n     // sort the views highest to lowest by filename\n     // we are reverse sorting now so our array merge\n     // will overwrite property..we will run array_reverse\n@@ -671,7 +673,7 @@ function find_config_views($paths=array(), $excludes=array()) {\n             }\n         }\n     }\n-    \n+\n     return $views;\n }\n \n@@ -759,12 +761,12 @@ function get_action_views($ctl, $action, $human_readable) {\n //    $controller = new $controllerName();\n     $controller = expModules::getController($ctl);\n \n-    // set path information \n+    // set path information\n     $paths = array(\n         $controller->viewpath,\n         BASE.'themes/'.DISPLAY_THEME.'/modules/'.$controller->relative_viewpath,\n     );\n-    \n+\n     $views = array();\n     foreach ($paths as $path) {\n         if (is_readable($path)) {\n@@ -804,7 +806,7 @@ function get_filedisplay_views() {\n         BASE.'framework/modules/common/views/file/',\n         BASE.'themes/'.DISPLAY_THEME.'modules/common/views/file/',\n     );\n-    \n+\n     $views = array();\n     foreach ($paths as $path) {\n         if (is_readable($path)) {\n@@ -817,7 +819,7 @@ function get_filedisplay_views() {\n             }\n         }\n     }\n-    \n+\n     return $views;\n }\n "
        },
        {
          "filename": "framework/core/models/expRecord.php",
          "status": "modified",
          "additions": 13,
          "deletions": 8,
          "patch": "@@ -104,7 +104,7 @@ function __construct($params = null, $get_assoc = true, $get_attached = true) {\n         $needs_approval = $this->needs_approval && ENABLE_WORKFLOW;\n \n         // if the user passed in arguments to this constructor then we need to\n-        // retrieve objects \n+        // retrieve objects\n \n         // If a number was sent in, we assume this is a DB record ID, so pull it\n         if (!is_object($params) && !is_array($params)) {\n@@ -122,7 +122,7 @@ function __construct($params = null, $get_assoc = true, $get_attached = true) {\n                 $params = array('title'=> $params);\n             }\n         } else {\n-            // Otherwise we assume that in inbound is an array or Object to be processed as is.        \n+            // Otherwise we assume that in inbound is an array or Object to be processed as is.\n             $this->build($params);\n         }\n \n@@ -135,7 +135,7 @@ function __construct($params = null, $get_assoc = true, $get_attached = true) {\n             $this->publish_date = $this->created_at;\n         }\n \n-        // setup the exception array if it's not there.  This array tells the getAssociatedObjectsForThisModel() function which \n+        // setup the exception array if it's not there.  This array tells the getAssociatedObjectsForThisModel() function which\n         // modules NOT to setup.  This stops us from getting infinite loops with many to many relationships.\n         if (is_array($params)){\n             $params['except']         = isset($params['except']) ? $params['except'] : array();\n@@ -180,6 +180,11 @@ public function find($range = 'all', $where = null, $order = null, $limit = null\n         //eDebug(\"Supports Revisions:\" . $this->supports_revisions);\n //        if ($this->supports_revisions && $range != 'revisions') $sql .= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $db->prefix . $this->tablename . \"` WHERE $where)\";\n //        $sql .= empty($order) ? '' : ' ORDER BY ' . $order;\n+        $order = expString::escape($order);\n+        if ($limit !== null)\n+            $limit = intval($limit);\n+        if ($limitstart !== null)\n+            $limitstart = intval($limitstart);\n         $supports_revisions = $this->supports_revisions && ENABLE_WORKFLOW;\n         if (ENABLE_WORKFLOW && $this->needs_approval) {\n             $needs_approval = $user->id;\n@@ -361,10 +366,10 @@ public function build($params = array()) {\n         foreach ($table as $col=> $colDef) {\n             // check if the DB column has a corresponding value in the params array\n             // if not, we check to see if the column is boolean...if so we set it to false\n-            // if not, then we check to see if we had a previous value in this particular \n+            // if not, then we check to see if we had a previous value in this particular\n             // record.  if so we reset it to itself so we don't lose the existing value.\n-            // this is good for when the developer is trying to update just a field or two \n-            // in an existing record. \n+            // this is good for when the developer is trying to update just a field or two\n+            // in an existing record.\n             if (array_key_exists($col, $params)) {\n                 $value = is_array($params) ? $params[$col] : $params->$col;\n                 if ($colDef[0] == DB_DEF_INTEGER || $colDef[0] == DB_DEF_ID) {\n@@ -464,7 +469,7 @@ public function save($validate = false, $force_no_revisions = false) {\n \n         // Save this object's associated objects to the database.\n         // FIXME: we're not going to do this automagically until we get the refreshing figured out.\n-        //$this->saveAssociatedObjects(); \n+        //$this->saveAssociatedObjects();\n \n         //Only grab fields that are valid and save this object\n         $saveObj = new stdClass();\n@@ -534,7 +539,7 @@ public function validate() {\n         }\n \n         // safeguard again loc data not being pass via forms...sometimes this happens when you're in a router\n-        // mapped view and src hasn't been passed in via link to the form \n+        // mapped view and src hasn't been passed in via link to the form\n         if (isset($this->id) && empty($this->location_data)) {\n             $loc = $db->selectValue($this->tablename, 'location_data', 'id=' . $this->id);\n             if (!empty($loc)) $this->location_data = $loc;"
        },
        {
          "filename": "framework/core/subsystems/database/mysqli.php",
          "status": "modified",
          "additions": 14,
          "deletions": 14,
          "patch": "@@ -351,7 +351,7 @@ function sql($sql, $escape = true) {\n \t * @param int|null $where\n \t * @return void\n \t */\n-    function columnUpdate($table, $col, $val, $where=1) {         \n+    function columnUpdate($table, $col, $val, $where=1) {\n         $res = @mysqli_query($this->connection, \"UPDATE `\" . $this->prefix . \"$table` SET `$col`='\" . $val . \"' WHERE $where\");\n         /*if ($res == null)\n             return array();\n@@ -484,8 +484,8 @@ function selectAndJoinObjects($colsA=null, $colsB=null, $tableA, $tableB, $keyA,\n     function selectObjectBySql($sql) {\n         //$logFile = \"C:\\\\xampp\\\\htdocs\\\\supserg\\\\tmp\\\\queryLog.txt\";\n         //$lfh = fopen($logFile, 'a');\n-        //fwrite($lfh, $sql . \"\\n\");    \n-        //fclose($lfh);                 \n+        //fwrite($lfh, $sql . \"\\n\");\n+        //fclose($lfh);\n         $res = @mysqli_query($this->connection, $this->injectProof($sql));\n         if ($res == null)\n             return null;\n@@ -740,8 +740,8 @@ function selectObject($table, $where) {\n \t */\n \tfunction lockTable($table,$lockType=\"WRITE\") {\n         $sql = \"LOCK TABLES `\" . $this->prefix . \"$table` $lockType\";\n-       \n-        $res = mysqli_query($this->connection, $sql); \n+\n+        $res = mysqli_query($this->connection, $sql);\n         return $res;\n     }\n \n@@ -750,11 +750,11 @@ function lockTable($table,$lockType=\"WRITE\") {\n \t */\n \tfunction unlockTables() {\n         $sql = \"UNLOCK TABLES\";\n-        \n+\n         $res = mysqli_query($this->connection, $sql);\n         return $res;\n     }\n-    \n+\n \t/**\n      * Insert an Object into some table in the Database\n      *\n@@ -768,7 +768,7 @@ function unlockTables() {\n      * @return int|void\n      */\n     function insertObject($object, $table) {\n-        //if ($table==\"text\") eDebug($object,true); \n+        //if ($table==\"text\") eDebug($object,true);\n         $sql = \"INSERT INTO `\" . $this->prefix . \"$table` (\";\n         $values = \") VALUES (\";\n         foreach (get_object_vars($object) as $var => $val) {\n@@ -828,7 +828,7 @@ function updateObject($object, $table, $where=null, $identifier='id', $is_revisi\n             $object->revision_id++;\n             //if ($table==\"text\") eDebug($object);\n             $res = $this->insertObject($object, $table);\n-            //if ($table==\"text\") eDebug($object,true); \n+            //if ($table==\"text\") eDebug($object,true);\n             $this->trim_revisions($table, $object->$identifier, WORKFLOW_REVISION_LIMIT);\n             return $res;\n         }\n@@ -838,7 +838,7 @@ function updateObject($object, $table, $where=null, $identifier='id', $is_revisi\n             //if($is_revisioned && $var=='revision_id') $val++;\n             if ($var{0} != '_') {\n                 if (is_array($val) || is_object($val)) {\n-                    $val = serialize($val);   \n+                    $val = serialize($val);\n                     $sql .= \"`$var`='\".$val.\"',\";\n                 } else {\n                     $sql .= \"`$var`='\" . $this->escapeString($val) . \"',\";\n@@ -850,7 +850,7 @@ function updateObject($object, $table, $where=null, $identifier='id', $is_revisi\n             $sql .= $this->injectProof($where);\n         else\n             $sql .= \"`\" . $identifier . \"`=\" . $object->$identifier;\n-        //if ($table == 'text') eDebug($sql,true);        \n+        //if ($table == 'text') eDebug($sql,true);\n         $res = (@mysqli_query($this->connection, $sql) != false);\n         return $res;\n     }\n@@ -1109,7 +1109,7 @@ function inError() {\n     }\n \n \t/**\n-\t * Unescape a string based on the database connection\n+\t * Escape a string based on the database connection\n \t * @param $string\n \t * @return string\n \t */\n@@ -1162,7 +1162,7 @@ function selectArrays($table, $where = null, $orderby = null) {\n      * @param string $sql The name of the table/object to look at\n      * @return array\n      */\n-    function selectArraysBySql($sql) {        \n+    function selectArraysBySql($sql) {\n         $res = @mysqli_query($this->connection, $this->injectProof($sql));\n         if ($res == null)\n             return array();\n@@ -1294,7 +1294,7 @@ function getTextColumns($table) {\n \t\twhile($row = mysqli_fetch_object($res)) {\n \t\t\t$records[] = $row->Field;\n \t\t}\n-\t\t\n+\n \t\treturn $records;\n \t}\n "
        },
        {
          "filename": "framework/core/subsystems/expDatabase.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1099,14 +1099,14 @@ abstract function error();\n \tabstract function inError();\n \n \t/**\n-\t * Unescape a string based on the database connection\n+\t * Escape a string based on the database connection\n \t * @param $string\n \t * @return string\n \t */\n \tabstract function escapeString($string);\n \n     /**\n-   \t * Unescape a string based on the database connection\n+   \t * Attempt to prevent a sql injection\n    \t * @param $string\n    \t * @return string\n    \t */"
        },
        {
          "filename": "framework/core/subsystems/expPaginator.php",
          "status": "modified",
          "additions": 74,
          "deletions": 66,
          "patch": "@@ -23,22 +23,22 @@\n  * and paginate them and optionally group the by category.\n  * It automagically handles the calls to other pages\n  * and has built-in sorting using the defined column headers.\n- * \n+ *\n  * Usage Example:\n- *  \n+ *\n  * <code>\n  *\n  * $page = new expPaginator(array(\n  *      'model'=>'faq',\n- *      'where'=>1, \n+ *      'where'=>1,\n  *      'limit'=>25,\n  *      'order'=>'rank',\n  *      'controller'=>$this->baseclassname,\n  *      'action'=>$this->params['action'],\n  *      'columns'=>array('In FAQ'=>'include_in_faq', 'Submitted'=>'created_at', 'Submitted By'=>'submitter_name'),\n  *  ));\n  * </code>\n- * \n+ *\n  * @package Subsystems\n  * @subpackage Subsystems\n  */\n@@ -52,7 +52,7 @@ class expPaginator {\n     public $search_string = '';\n \tpublic $sql = '';\n     public $count_sql = '';\n-\tpublic $where = '';\t\n+\tpublic $where = '';\n \tpublic $controller = '';\n \tpublic $action = '';\n \tpublic $order = '';\n@@ -91,7 +91,7 @@ class expPaginator {\n \t/**#@+\n      * @access public\n      * @var array\n-     */\t\n+     */\n \tpublic $pages = array();\n \tpublic $records = array();\n     public $cats = array();\n@@ -106,21 +106,21 @@ class expPaginator {\n \t * @return \\expPaginator\n \t */\n \tpublic function __construct($params=array()) {\n-\t\tglobal $router,$db;\n+\t\tglobal $router, $db;\n \n         $this->pages_to_show = expTheme::is_mobile() ? 6 : 10; // fewer paging links for small devices\n \t\t$this->where = empty($params['where']) ? null : $params['where'];\n \t\t$this->records = empty($params['records']) ? array() : $params['records'];\n //\t\t$this->limit = empty($params['limit']) ? 10 : $params['limit'];\n-        $this->limit = empty($params['limit']) ? 0 : $params['limit'];\n+        $this->limit = empty($params['limit']) ? 0 : intval($params['limit']);\n         $this->page = empty($params['page']) ? 1 : intval($params['page']);\n \t\t$this->action = empty($params['action']) ? '' : $params['action'];\n \t\t$this->controller = empty($params['controller']) ? '' : $params['controller'];\n \t\t$this->sql = empty($params['sql']) ? '' : $params['sql'];\n         $this->count_sql = empty($params['count_sql']) ? '' : $params['count_sql'];\n-\t\t$this->order = empty($params['order']) ? 'id' : $params['order'];\n-\t\t$this->dir = empty($params['dir']) ? 'ASC' : $params['dir'];\n-\t\t$this->src = empty($params['src']) ? null : $params['src'];\n+\t\t$this->order = empty($params['order']) ? 'id' : expString::escape($params['order']);\n+\t\t$this->dir = empty($params['dir']) || !in_array($params['dir'], array('ASC', 'DESC')) ? 'ASC' : $params['dir'];\n+\t\t$this->src = empty($params['src']) ? null : expString::escape($params['src']);\n         $this->categorize = empty($params['categorize']) ? false : $params['categorize'];\n         $this->uncat = !empty($params['uncat']) ? $params['uncat'] : gt('Not Categorized');\n         $this->groups = !empty($params['groups']) ? $params['groups'] : array();\n@@ -137,15 +137,15 @@ public function __construct($params=array()) {\n             $this->model = $params['model'];\n             $class = new $this->model(null, false, false);\n         }\n-\t\n+\n \t    // auto-include the CSS for pagination links\n \t    expCSS::pushToHead(array(\n //\t\t    \"unique\"=>\"pagination\",\n //\t\t    \"link\"=>PATH_RELATIVE.\"framework/core/assets/css/pagination.css\",\n             'corecss'=>'pagination'\n \t\t    )\n \t\t);\n-\t\t\n+\n \t\tif ($this->limit)\n             $this->start = (($this->page * $this->limit) - $this->limit);\n         if ($this->start < 0)\n@@ -167,19 +167,23 @@ public function __construct($params=array()) {\n \t\t        }\n \t\t    }\n \t\t}\n-\t\t\n+\n \t\t//setup the default ordering of records\n \t\t// if we are in an action, see if the action is for this controller/action..if so pull the order\n \t\t// and order direction from the request params...this is how the params are passed via the column\n \t\t// headers.\n-\t\t$this->order_direction = $this->dir;\t\n+\t\t$this->order_direction = $this->dir;\n \n         // allow passing of a single order/dir as stored in config\n         if (strstr($this->order,\" \")) {\n             $orderby = explode(\" \",$this->order);\n             $this->order = $orderby[0];\n             $this->order_direction = $orderby[1];\n         }\n+        if(!preg_match('/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/', $this->order))\n+            $this->order = 'id';\n+        if (!in_array($this->order_direction, array('ASC', 'DESC')))\n+            $this->order_direction = 'ASC';\n         if ($this->dontsort)\n             $sort = null;\n         else\n@@ -209,13 +213,13 @@ public function __construct($params=array()) {\n             //this is MUCH faster if you supply a proper count_sql param using a COUNT() function; if not,\n             //we'll run the standard sql and do a queryRows with it\n \t\t\t//$this->total_records = $this->count_sql == '' ? $db->queryRows($this->sql) : $db->selectValueBySql($this->count_sql); //From Merge\n-                        \n+\n //\t\t\t$this->total_records =  $db->countObjectsBySql($this->count_sql); //$db->queryRows($this->sql); //From most current Trunk\n \n             if (!empty($sort)) $this->sql .= ' ORDER BY '.$sort;\n             if (!empty($this->count_sql)) $this->total_records = $db->countObjectsBySql($this->count_sql);\n \t\t\tif (!empty($this->limit)) $this->sql .= ' LIMIT '.$this->start.','.$this->limit;\n-\t\t\t\n+\n \t\t\t$this->records = array();\n \t\t\tif (isset($this->model) || isset($params['model_field'])) {\n \t\t\t    foreach($db->selectObjectsBySql($this->sql) as $record) {\n@@ -227,7 +231,7 @@ public function __construct($params=array()) {\n \t\t\t} else {\n \t\t\t    $this->records = $db->selectObjectsBySql($this->sql);\n \t\t\t}\n-\t\t}\t\n+\t\t}\n \n         // next we'll sort them based on categories if needed\n         if (!empty($this->categorize) && $this->categorize && empty($this->dontsort))\n@@ -314,7 +318,7 @@ public function __construct($params=array()) {\n \t\t\t$this->firstrecord = 0;\n \t\t\t$this->lastrecord = 0;\n \t\t}\n-\t\t\t\n+\n \t\t// get the page parameters from the router to build the links\n         $page_params = $router->params;\n //\t\t$page_params = $this->cleanParams($router->params);\n@@ -343,6 +347,10 @@ public function __construct($params=array()) {\n                 if ($this->controller == $mod && $this->action == $router->params['action']) {\n                     $this->order = isset($router->params['order']) ? $router->params['order'] : $this->order;\n                     $this->order_direction = isset($router->params['dir']) ? $router->params['dir'] : $this->dir;\n+                    if(!preg_match('/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/', $this->order))\n+                        $this->order = 'id';\n+                    if (!in_array($this->order_direction, array('ASC', 'DESC')))\n+                        $this->order_direction = 'ASC';\n                 }\n             } else {\n                 if (isset($params->controller)) {\n@@ -353,12 +361,12 @@ public function __construct($params=array()) {\n             }\n             $page_params['controller'] = $mod;  // we can't be passing an empty controller or module to the router\n         }\n-\t\t\n+\n \t\tif (!empty($this->action))\n             $page_params['action'] =  $this->action;\n \t\tif (!empty($this->src))\n             $page_params['src'] =  $this->src;\n-\t\t\n+\n \t\tif (isset($page_params['section']))\n             unset($page_params['section']);\n \n@@ -370,10 +378,10 @@ public function __construct($params=array()) {\n \n \t\t//build a couple more links we can use in the views.\n \t\t$this->pagelink = $router->makeLink($page_params, false, false, true);\n-\t\t\n+\n \t\t// if don't have enough records for more than one page then we're done.\n \t\t//if ($this->total_records <= $this->limit) return true;\n-\t\t\n+\n \t\t$this->total_pages = ($this->limit > 0) ? ceil($this->total_records/$this->limit) : 0;\n \n         // correct current page # to be within limits of number of pages\n@@ -407,7 +415,7 @@ public function __construct($params=array()) {\n \t\t    $this->last_pagelink = $this->first_pagelink + $this->pages_to_show - 1;\n \t\t    if ($this->last_pagelink > $this->total_pages) {\n \t\t        $this->first_pagelink = max(1, $this->total_pages - $this->pages_to_show) + 1;\n-\t\t        $this->last_pagelink = $this->total_pages; \n+\t\t        $this->last_pagelink = $this->total_pages;\n \t\t    }\n \t\t} else {\n \t\t\t$this->first_pagelink = 1;\n@@ -433,19 +441,19 @@ public function __construct($params=array()) {\n         }\n \n \t\t// setup the links to the remaining pages being displayed.\n-\t\tfor($i=$this->first_pagelink; $i<=$this->last_pagelink; $i++) { \n+\t\tfor($i=$this->first_pagelink; $i<=$this->last_pagelink; $i++) {\n \t\t\t$page_params['page'] = $i;\n \t\t\t$this->pages[$i] = $router->makeLink($page_params, false, false, true);\n-\t\t} \t\n+\t\t}\n \n \t\t$links_template = expTemplate::get_common_template('pagination_links', null, 'common');\n \t\t$links_template->assign('page', $this);\n \t\t$this->links = $links_template->render();\n-\t\t\n+\n \t\t$this->makeHeaderCols($page_params);  // headers for table view\n-         \n+\n         $sortparams = array_merge($page_params, $router->params);\n-\t\t\n+\n \t\t//From Merge ****\n         if (isset($router->params['page']))\n             $sortparams['page'] = $router->params['page'];\n@@ -454,68 +462,68 @@ public function __construct($params=array()) {\n         //End From Merge ****\n \n \t\t$this->makeSortDropdown($sortparams);  // used on non-table views\n-       \n+\n         $table_template = expTemplate::get_common_template('pagination_table', null, 'common');\n         $table_template->assign('page', $this);\n         $this->table = $table_template->render();  // table view\n-        \n+\n \t}\n-\t\n+\n \t//From Merge\n     private function cleanParams($params) {\n         $defaultParams = array('title'=>'','module'=>'','controller'=>'','src'=>'','id'=>'','dir'=>'','_common'=>'');\n         $newParams = array();\n-        $func = new ReflectionClass($this);       \n+        $func = new ReflectionClass($this);\n         foreach ($params as $pKey=>$pVal) {\n             $propname = $pKey;\n             if (array_key_exists($propname,$defaultParams)) {\n-                $newParams[$propname] = $params[$propname];                \n-            }               \n-        }        \n+                $newParams[$propname] = $params[$propname];\n+            }\n+        }\n         foreach ($func->getProperties() as $p) {\n             $propname = $p->name;\n             if (array_key_exists($propname,$params)) {\n-                $newParams[$propname] = $params[$propname];                \n-            }               \n-        }        \n-        \n+                $newParams[$propname] = $params[$propname];\n+            }\n+        }\n+\n         return $newParams;\n     }\n-    \n+\n     public function makeHeaderCols($params) {\n         global $router;\n \n         if (!empty($this->columns) && is_array($this->columns)) {\n             $this->header_columns = '';\n-            \n+\n             // get the parameters used to make this page.\n             if (!expTheme::inAction()) {\n                 unset($params['section']);\n                 if (empty($params['controller'])) $params['controller'] = $this->controller;\n                 if (empty($params['action'])) $params['action'] = $this->action;\n             }\n-            \n+\n //            $current = '';\n             if (isset($params['order'])) {\n                 $current = $params['order'];\n                 unset($params['order']);\n             } else {\n                 $current = $this->order;\n             }\n-            \n+\n             //loop over the columns and build out a list of <th>'s to be used in the page table\n             foreach ($this->columns as $colname=>$col) {\n                 // if this is the column we are sorting on right now we need to setup some class info\n                 $class = isset($this->class) ? $this->class : 'page';\n                 $params['dir'] = 'ASC';\n-                \n+\n                 if ($col == $current) {\n                     $class  = 'current '.strtolower($this->order_direction);\n                     $params['dir'] = $this->order_direction == 'ASC' ? 'DESC' : 'ASC';\n-                } \n+                }\n \n                 $params['order'] = $col;\n-                \n+\n                 $this->header_columns .= '<th class=\"'.$class.'\">';\n                 // if this column is empty then it's not supposed to be a sortable column\n \n@@ -524,7 +532,7 @@ public function makeHeaderCols($params) {\n                     $this->columns[$colname] = ' ';\n                 } else if($colname==\"actupon\") {\n                     $this->header_columns .= '<input type=checkbox name=selall id=selall value=1 class=\"select-all\"/>';\n-                    \n+\n //                    $js = \"\n //                    YUI(EXPONENT.YUI3_CONFIG).use('node', function(Y) {\n //                        Y.all('input[type=checkbox]').on('click',function(e){\n@@ -565,12 +573,12 @@ public function makeHeaderCols($params) {\n                         $this->header_columns .= '<a href=\"'.$router->makeLink($params, false, false, true).'\" alt=\"sort by '.$colname.'\" rel=\"nofollow\">'.$colname.'</a>';\n                     }\n                 }\n-                \n+\n                 $this->header_columns .= '</th>';\n             }\n         }\n     }\n-    \n+\n     //here if we want to modify the record for some reason. e.g. Using in search results w/ products\n     private function runCallback() {\n         foreach ($this->records as &$record) {\n@@ -585,9 +593,9 @@ private function runCallback() {\n                     }\n                 }\n             }\n-        }    \n+        }\n     }\n-    \n+\n \tpublic function makeSortDropdown($params) {\n \t\tglobal $router;\n \n@@ -600,15 +608,15 @@ public function makeSortDropdown($params) {\n \t\t\t\tif (empty($params['controller'])) $params['controller'] = $this->controller;\n \t\t\t\tif (empty($params['action'])) $params['action'] = $this->action;\n \t\t\t}\n-\t\t\t\n+\n \t\t\t/*$current = '';\n \t\t\tif (isset($params['order'])) {\n \t\t\t\t$current = $params['order'];\n \t\t\t\tunset($params['order']);\n \t\t\t} else {\n \t\t\t\t$current = $this->order;\n \t\t\t}  */\n-\t\t\t\n+\n \t\t\t//loop over the columns and build out a list of <th>'s to be used in the page table\n            // eDebug($router);\n             $defaultParams['controller'] = $params['controller'];\n@@ -617,13 +625,13 @@ public function makeSortDropdown($params) {\n                 $defaultParams['title'] = $params['title'];\n             if (isset($params['page']))\n                 $defaultParams['page'] = $params['page'];\n-            \n+\n             $this->sort_dropdown[$router->makeLink($defaultParams, false, false, true)] = \"Default\";\n \t\t\tforeach ($this->columns as $colname=>$col) {\n \t\t\t\t// if this is the column we are sorting on right now we need to setup some class info\n \t\t\t\t/*$class = isset($this->class) ? $this->class : 'page';\n \t\t\t\t$params['dir'] = 'ASC';*/\n-\t\t\t\t\n+\n \t\t\t\t/*if ($col == $current) {\n \t\t\t\t\t$class  = 'current';\n \t\t\t\t\t$class .= ' '.$this->order_direction;\n@@ -632,27 +640,27 @@ public function makeSortDropdown($params) {\n \t\t\t\t\t} else {\n \t\t\t\t\t\t$params['dir'] = $this->order_direction == 'ASC' ? 'DESC' : 'ASC';\n \t\t\t\t\t}\n-\t\t\t\t} \n+\t\t\t\t}\n                 */\n-\t\t\t\t$params['order'] = $col;      \t\t\t\t                        \n-\t\t\t\t\n-\t\t\t\tif (!empty($col)) {\t\n+\t\t\t\t$params['order'] = $col;\n+\n+\t\t\t\tif (!empty($col)) {\n                     if ($colname == 'Price') {\n-                        $params['dir'] = 'ASC'; \n+                        $params['dir'] = 'ASC';\n                         $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - Lowest to Highest\";\n-                        $params['dir'] = 'DESC'; \n+                        $params['dir'] = 'DESC';\n                         $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - Highest to Lowest\";\n                     } else {\n-                        $params['dir'] = 'ASC'; \n+                        $params['dir'] = 'ASC';\n                         $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - A-Z\";\n                         $params['dir'] = 'DESC';\n                         $this->sort_dropdown[$router->makeLink($params, false, false, true)] = $colname . \" - Z-A\";\n-                    }\t\n-\t\t\t\t}                  \t\t\t\t\t\t\t\t\n+                    }\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n-\t\n+\n     /** exdoc\n      * Object/Array sorting comparison function -- sorts by a specified column in ascending order.\n      * @node Subsystems:expPaginator"
        },
        {
          "filename": "framework/core/subsystems/expSettings.php",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -191,13 +191,13 @@ public static function saveValues($values, $configname = '')  //FIXME only used\n //                $value = str_replace(array('\\r\\n', '\\r', '\\n'), \"\", $value);\n                 $str .= \"exponent_unhtmlentities('$value')\";\n             } elseif (is_int($value)) {\n-                $str .= \"'\" . $value . \"'\";\n+                $str .= \"'\" . intval($value) . \"'\";\n             } else {\n                 if ($directive != 'SESSION_TIMEOUT') {\n-                    $str .= \"'\" . str_replace(\"'\", \"\\'\", $value) . \"'\";  //FIXME is this still necessary since we stripslashes above???\n+                    $str .= \"'\" . expString::escape(str_replace(\"'\", \"\\'\", $value)) . \"'\";  //FIXME is this still necessary since we stripslashes above???\n                 } //                    $str .= \"'\".$value.\"'\";\n                 else {\n-                    $str .= \"'\" . str_replace(\"'\", '', $value) . \"'\";\n+                    $str .= \"'\" . expString::escape(str_replace(\"'\", '', $value)) . \"'\";\n                 }\n             }\n             $str .= \");\\n\";\n@@ -584,6 +584,10 @@ public static function deleteProfile($profile)  //FIXME this method is never use\n      */\n     public static function activateProfile($profile)\n     {\n+        if (!empty($profile) && (strpos($profile, '..') !== false || strpos($profile, '/') !== false)) {\n+            header('Location: ' . URL_FULL);\n+            exit();  // attempt to hack the site\n+        }\n         if (is_readable(BASE . \"framework/conf/profiles/$profile.php\") && expUtil::isReallyWritable(\n                 BASE . \"framework/conf\"\n             )\n@@ -635,4 +639,4 @@ public static function dropdownData($dropdown_name)\n \n expSettings::initialize();  // auto-initialize when loaded\n \n-?>\n\\ No newline at end of file\n+?>"
        },
        {
          "filename": "framework/core/subsystems/expString.php",
          "status": "modified",
          "additions": 14,
          "deletions": 14,
          "patch": "@@ -34,7 +34,7 @@ class expString {\n      */\n \tstatic function convertUTF($string) {\n \t\treturn $string = str_replace('?', '', htmlspecialchars($string, ENT_IGNORE, 'UTF-8'));\n-\t} \n+\t}\n \n     /**\n      * Routine to check if string is valid UTF string\n@@ -46,7 +46,7 @@ static function convertUTF($string) {\n \tstatic function validUTF($string) {\n \t\tif(!mb_check_encoding($string, 'UTF-8') OR !($string === mb_convert_encoding(mb_convert_encoding($string, 'UTF-32', 'UTF-8' ), 'UTF-8', 'UTF-32'))) {\n \t\t\treturn false;\n-\t\t}\t\t\n+\t\t}\n \t\treturn true;\n \t}\n \n@@ -105,9 +105,9 @@ static function parseAndTrim($str, $unescape=false) {\n         $str = str_replace(\"\u00be\",\"&#190;\",$str);\n \t\t$str = str_replace(\"\u2122\",\"&trade;\", $str);\n \t\t$str = trim($str);\n-\t\t\n+\n         if ($unescape) {\n-\t\t\t$str = stripcslashes($str);  \n+\t\t\t$str = stripcslashes($str);\n \t\t} else {\n \t        $str = addslashes($str);\n         }\n@@ -130,15 +130,15 @@ static function convertXMLFeedSafeChar($str) {\n         $str = str_replace(\"&quot;\",'\"',$str);\n         $str = str_replace(\"&#39;\",\"'\",$str);\n         $str = str_replace(\"&rsquo;\",\"'\",$str);\n-        $str = str_replace(\"&lsquo;\",\"'\",$str);        \n+        $str = str_replace(\"&lsquo;\",\"'\",$str);\n         $str = str_replace(\"&#174;\",\"\",$str);\n         $str = str_replace(\"\ufffd\",\"-\", $str);\n-        $str = str_replace(\"\ufffd\",\"-\", $str); \n+        $str = str_replace(\"\ufffd\",\"-\", $str);\n         $str = str_replace(\"\ufffd\", '\"', $str);\n         $str = str_replace(\"&rdquo;\",'\"', $str);\n         $str = str_replace(\"\ufffd\", '\"', $str);\n         $str = str_replace(\"&ldquo;\",'\"', $str);\n-        $str = str_replace(\"\\r\\n\",\" \",$str); \n+        $str = str_replace(\"\\r\\n\",\" \",$str);\n         $str = str_replace(\"\ufffd\",\" 1/4\",$str);\n         $str = str_replace(\"&#188;\",\" 1/4\", $str);\n         $str = str_replace(\"\ufffd\",\" 1/2\",$str);\n@@ -148,9 +148,9 @@ static function convertXMLFeedSafeChar($str) {\n         $str = str_replace(\"\ufffd\", \"(TM)\", $str);\n         $str = str_replace(\"&trade;\",\"(TM)\", $str);\n         $str = str_replace(\"&reg;\",\"(R)\", $str);\n-        $str = str_replace(\"\ufffd\",\"(R)\",$str);        \n-        $str = str_replace(\"&\",\"&amp;\",$str);      \n-\t\t$str = str_replace(\">\",\"&gt;\",$str);      \t\t\n+        $str = str_replace(\"\ufffd\",\"(R)\",$str);\n+        $str = str_replace(\"&\",\"&amp;\",$str);\n+\t\t$str = str_replace(\">\",\"&gt;\",$str);\n         return trim($str);\n \t}\n \n@@ -449,7 +449,7 @@ public static function parseAndTrimExport($str, $isHTML = false) { //\ufffdDeath fr\n \n     public static function parseAndTrimImport($str, $isHTML = false) { //\ufffdDeath from above\ufffd? \ufffd\n         //echo \"1<br>\"; eDebug($str);\n-        global $db;\n+//        global $db;\n \n         $str = str_replace(\"\ufffd\", \"&rsquo;\", $str);\n         $str = str_replace(\"\ufffd\", \"&lsquo;\", $str);\n@@ -471,13 +471,13 @@ public static function parseAndTrimImport($str, $isHTML = false) { //\ufffdDeath fr\n         //$str = htmlspecialchars($str);\n         //$str = utf8_encode($str);\n //        if (DB_ENGINE=='mysqli') {\n-//\t        $str = @mysqli_real_escape_string($db->connection,trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n+//\t        $str = self::escape(trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n //        } elseif(DB_ENGINE=='mysql') {\n-//            $str = @mysql_real_escape_string(trim(str_replace(\"\ufffd\", \"&trade;\", $str)),$db->connection);\n+//            $str = self::escape(trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n //        } else {\n //\t        $str = trim(str_replace(\"\ufffd\", \"&trade;\", $str));\n //        }\n-        $str = @$db->escapeString($db->connection, trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n+        $str = self::escape(trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n         //echo \"2<br>\"; eDebug($str,die);\n         return $str;\n     }"
        },
        {
          "filename": "framework/core/subsystems/expTheme.php",
          "status": "modified",
          "additions": 10,
          "deletions": 7,
          "patch": "@@ -241,13 +241,19 @@ public static function headerInfo($config)\n             $config['meta']['ie_compat'] = true;\n         }\n \n-        $str = '<title>' . $metainfo['title'] . \"</title>\\n\";\n+        $str = '';\n         if ($config['meta']['content_type']) {\n-            $str .= \"\\t\" . '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=' . LANG_CHARSET . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n+            $str .= '<meta charset=\"' . LANG_CHARSET . XHTML_CLOSING . '>' . \"\\n\";  // html5\n+            $str .= \"\\t\" . '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=' . LANG_CHARSET . '\" ' . XHTML_CLOSING . '>' . \"\\n\";  // html4 or xhtml?\n         }\n+        if ($config['meta']['ie_compat']) {\n+            // turn off ie compatibility mode which will break the display\n+            $str .= \"\\t\" . '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"' . XHTML_CLOSING . '>' . \"\\n\";\n+        }\n+        $str .= \"\\t\" . '<title>' . $metainfo['title'] . \"</title>\\n\";\n         $locale = strtolower(str_replace('_', '-', LOCALE));\n         if ($config['meta']['content_language']) {\n-            $str .= \"\\t\" . '<meta content=\"' . $locale . '\" http-equiv=\"Content-Language\" ' . XHTML_CLOSING . '>' . \"\\n\";\n+            $str .= \"\\t\" . '<meta http-equiv=\"Content-Language\" content=\"' . $locale . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n         }\n         if ($config['meta']['generator']) {\n             $str .= \"\\t\" . '<meta name=\"Generator\" content=\"Exponent Content Management System - v' . expVersion::getVersion(\n@@ -361,9 +367,6 @@ public static function headerInfo($config)\n             //Win 8/IE 10 work around\n             $str .= \"\\t\" . '<!--[if IE 10]><link rel=\"stylesheet\" href=\"' . PATH_RELATIVE . 'external/ie10-viewport-bug-workaround.css\" type=\"text/css\"' . XHTML_CLOSING . '><![endif]-->' . \"\\n\";\n             $str .= \"\\t\" . '<!--[if IE 10]><script src=\"' . PATH_RELATIVE . 'external/ie10-viewport-bug-workaround.js\"></script><![endif]-->' . \"\\n\";\n-\n-            // turn off ie compatibility mode which will break the display\n-            $str .= \"\\t\" . '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"' . XHTML_CLOSING . '>' . \"\\n\";\n         }\n \n         return $str;\n@@ -1970,4 +1973,4 @@ public static function deprecated($newcall = \"expTheme::module()\", $controller =\n \n }\n \n-?>\n\\ No newline at end of file\n+?>"
        },
        {
          "filename": "framework/modules/addressbook/controllers/addressController.php",
          "status": "modified",
          "additions": 29,
          "deletions": 29,
          "patch": "@@ -22,17 +22,17 @@\n  */\n \n class addressController extends expController {\n-\tpublic $useractions = array(\n+//\tpublic $useractions = array(\n //        'myaddressbook'=>'Show my addressbook'\n-    );\n+//    );\n     protected $remove_permissions = array(\n         'create',\n         'edit',\n         'delete'\n     );\n-    protected $add_permissions = array(\n-        'import' => 'Import External Addresses',\n-//        'export' => 'Export External Addresses'\n+    protected $manage_permissions = array(\n+//        'import' => 'Import External Addresses',\n+        'process' => 'Import External Addresses'\n     );\n \tpublic $remove_configs = array(\n         'aggregation',\n@@ -59,7 +59,7 @@ function showall() {\n //        redirect_to(array(\"controller\"=>'address',\"action\"=>'myaddressbook'));\n         $this->myaddressbook();\n \t}\n-    \n+\n     public function edit()\n     {\n         if((isset($this->params['id']))) $record = new address(intval($this->params['id']));\n@@ -75,7 +75,7 @@ public function edit()\n             ));\n         }\n     }\n-    \n+\n \tpublic function myaddressbook() {\n \t\tglobal $user;\n \n@@ -87,7 +87,7 @@ public function myaddressbook() {\n             'addresses'=>$this->address->find('all', 'user_id='.$userid)\n         ));\n \t}\n-\t\n+\n \tfunction show() {\n \t    expHistory::set('viewable', $this->params);\n \t\tassign_to_template(array(\n@@ -111,7 +111,7 @@ public function update() {\n \t\t\t// check to see how many other addresses this user has already.\n \t\t\t$count = $this->address->find('count', 'user_id='.$user->id);\n \t\t\t// if this is first address save for this user we'll make this the default\n-\t\t\tif ($count == 0) \n+\t\t\tif ($count == 0)\n             {\n                 $this->params['is_default'] = 1;\n                 $this->params['is_billing'] = 1;\n@@ -123,22 +123,22 @@ public function update() {\n \t\t\t$this->address->update($this->params);\n \t\t}\n         else { //if (ecomconfig::getConfig('allow_anonymous_checkout')){\n-            //user is not logged in, but allow anonymous checkout is enabled so we'll check \n+            //user is not logged in, but allow anonymous checkout is enabled so we'll check\n             //a few things that we don't check in the parent 'stuff and create a user account.\n             $this->params['is_default'] = 1;\n             $this->params['is_billing'] = 1;\n-            $this->params['is_shipping'] = 1; \n+            $this->params['is_shipping'] = 1;\n             $this->address->update($this->params);\n         }\n-\t\texpHistory::back(); \n+\t\texpHistory::back();\n \t}\n-\t\n+\n \tpublic function delete() {\n \t    global $user;\n \n         $count = $this->address->find('count', 'user_id=' . $user->id);\n         if($count > 1)\n-        {    \n+        {\n             $address = new address($this->params['id']);\n \t        if ($user->isAdmin() || ($user->id == $address->user_id)) {\n                 if ($address->is_billing)\n@@ -147,7 +147,7 @@ public function delete() {\n                     $billAddress->is_billing = true;\n                     $billAddress->save();\n                 }\n-                if ($address->is_shipping) \n+                if ($address->is_shipping)\n                 {\n                     $shipAddress = $this->address->find('first', 'user_id=' . $user->id . \" AND id != \" . $address->id);\n                     $shipAddress->is_shipping = true;\n@@ -162,33 +162,33 @@ public function delete() {\n         }\n \t    expHistory::back();\n \t}\n-    \n+\n     public function activate_address()\n     {\n         global $db, $user;\n \n         $object = new stdClass();\n         $object->id = $this->params['id'];\n-        $db->setUniqueFlag($object, 'addresses', $this->params['is_what'], \"user_id=\" . $user->id);\n+        $db->setUniqueFlag($object, 'addresses', expString::escape($this->params['is_what']), \"user_id=\" . $user->id);\n         flash(\"message\", gt(\"Successfully updated address.\"));\n-        expHistory::back(); \n+        expHistory::back();\n     }\n-    \n+\n     public function manage()\n     {\n         expHistory::set('manageable',$this->params);\n         $gc = new geoCountry();\n         $countries = $gc->find('all');\n-        \n-        $gr = new geoRegion();             \n+\n+        $gr = new geoRegion();\n         $regions = $gr->find('all',null,'rank asc,name asc');\n-        \n+\n         assign_to_template(array(\n             'countries'=>$countries,\n             'regions'=>$regions\n         ));\n     }\n-    \n+\n     public function manage_update()\n     {\n         global $db;\n@@ -199,16 +199,16 @@ public function manage_update()\n         foreach($this->params['country'] as $country_id=>$is_active)\n         {\n             $gc = new geoCountry($country_id);\n-            $gc->active = true;            \n-            $gc->save();            \n+            $gc->active = true;\n+            $gc->save();\n         }\n         //country default\n         $db->columnUpdate('geo_country','is_default',0,'is_default=1');\n         if(isset($this->params['country_default']))\n         {\n-            $gc = new geoCountry($this->params['country_default']);            \n-            $db->setUniqueFlag($gc,'geo_country','is_default','id=' . $gc->id);    \n-            $gc->refresh();            \n+            $gc = new geoCountry(intval($this->params['country_default']));\n+            $db->setUniqueFlag($gc,'geo_country','is_default','id=' . $gc->id);\n+            $gc->refresh();\n         }\n         //regions\n         $db->columnUpdate('geo_region','active',0,'active=1');\n@@ -217,7 +217,7 @@ public function manage_update()\n             $gr = new geoRegion($region_id);\n             $gr->active = true;\n             if(isset($this->params['region_rank'][$region_id])) $gr->rank = $this->params['region_rank'][$region_id];\n-            $gr->save();            \n+            $gr->save();\n         }\n         flash('message',gt('Address configurations successfully updated.'));\n         redirect_to(array('controller'=>'address','action'=>'manage'));"
        },
        {
          "filename": "framework/modules/administration/controllers/administrationController.php",
          "status": "modified",
          "additions": 32,
          "deletions": 33,
          "patch": "@@ -24,17 +24,17 @@\n \n class administrationController extends expController {\n     public $basemodel_name = 'expRecord';\n-    protected $add_permissions = array(\n+    protected $manage_permissions = array(\n+        'change'=>'Change Settings',\n \t    'clear'=>'Clear Caches',  //FIXME this requires a logged in user to perform?\n \t    \"fix\"=>\"Fix Database\",\n \t    \"install\"=>\"Installation\",\n+        'mass'=>'Mass Mailing',\n+        'save'=>'Save Settings',\n \t    \"theme\"=>\"Manage Themes\",\n \t    'test_smtp'=>'Test SMTP Server Settings',\n \t    'toggle'=>'Toggle Settings',\n-        'mass'=>'Mass Mailing',\n-        'update'=>'Update Settings',\n-        'change'=>'Change Settings',\n-        'save'=>'Save Settings',\n+//        'update'=>'Update Settings',\n     );\n \n     static function displayname() { return gt(\"Administration Controls\"); }\n@@ -62,7 +62,7 @@ public function delete_unused_columns() {\n \n     public function manage_unused_tables() {\n         global $db;\n-        \n+\n         expHistory::set('manageable', $this->params);\n         $unused_tables = array();\n         $used_tables = array();\n@@ -114,12 +114,12 @@ public function manage_unused_tables() {\n                 $unused_tables[$basename]->rows = $db->countObjects($basename);\n             }\n         }\n-        \n+\n         assign_to_template(array(\n             'unused_tables'=>$unused_tables\n         ));\n     }\n-    \n+\n     public function delete_unused_tables() {\n         global $db;\n \n@@ -128,7 +128,7 @@ public function delete_unused_tables() {\n             $basename = str_replace($db->prefix, '', $table);\n             $count += $db->dropTable($basename);\n         }\n-        \n+\n         flash('message', gt('Deleted').' '.$count.' '.gt('unused tables').'.');\n         expHistory::back();\n     }\n@@ -147,14 +147,14 @@ public function fix_optimize_database() {\n         ));\n \t}\n \n-\tpublic function fixsessions() {\n-\t    global $db;\n-\n-//\t\t$test = $db->sql('CHECK TABLE '.$db->prefix.'sessionticket');\n-\t\t$fix = $db->sql('REPAIR TABLE '.$db->prefix.'sessionticket');\n-\t\tflash('message', gt('Sessions Table was Repaired'));\n-\t\texpHistory::back();\n-\t}\n+//\tpublic function fix_sessions() {\n+//\t    global $db;\n+//\n+////\t\t$test = $db->sql('CHECK TABLE '.$db->prefix.'sessionticket');\n+//\t\t$fix = $db->sql('REPAIR TABLE '.$db->prefix.'sessionticket');\n+//\t\tflash('message', gt('Sessions Table was Repaired'));\n+//\t\texpHistory::back();\n+//\t}\n \n \tpublic function fix_database() {\n \t    global $db;\n@@ -218,7 +218,6 @@ public function fix_database() {\n                     $newSecRef->refcount = 1;\n //                    $newSecRef->is_original = 1;\n \t\t\t\t\t$eloc = expUnserialize($container->external);\n-//\t\t\t\t\t$section = $db->selectObject('sectionref',\"module='containermodule' AND source='\".$eloc->src.\"'\");\n                     $section = $db->selectObject('sectionref',\"module='container' AND source='\".$eloc->src.\"'\");\n \t\t\t\t\tif (!empty($section)) {\n \t\t\t\t\t\t$newSecRef->section = $section->id;\n@@ -286,28 +285,28 @@ public function toolbar() {\n \t\t}\n \n         // sort the top level menus alphabetically by filename\n-\t\tksort($menu);\t\t\n+\t\tksort($menu);\n \t\t$sorted = array();\n \t\tforeach($menu as $m) $sorted[] = $m;\n-        \n+\n         // slingbar position\n         if (isset($_COOKIE['slingbar-top'])){\n             $top = $_COOKIE['slingbar-top'];\n         } else {\n             $top = SLINGBAR_TOP;\n         }\n-        \n+\n \t\tassign_to_template(array(\n             'menu'=>(bs3()) ? $sorted : json_encode($sorted),\n             \"top\"=>$top\n         ));\n     }\n-    \n+\n //    public function index() {\n //        redirect_to(array('controller'=>'administration', 'action'=>'toolbar'));\n ////        $this->toolbar();\n //    }\n-    \n+\n     public function update_SetSlingbarPosition() {\n         setcookie('slingbar-top', $this->params['top']);\n         expHistory::back();\n@@ -385,7 +384,7 @@ public function toggle_minify() {\n         }\n     \texpHistory::back();\n     }\n-    \n+\n \tpublic function toggle_dev() {\n         if (!expUtil::isReallyWritable(BASE.'framework/conf/config.php')) {  // we can't write to the config.php file\n             flash('error',gt('The file /framework/conf/config.php is NOT Writeable. You will be unable to change Error Reporting settings.'));\n@@ -1047,7 +1046,7 @@ public function manage_themes() {\n             'themes'=>$themes\n         ));\n     }\n-    \n+\n     public function theme_switch() {\n         if (!expUtil::isReallyWritable(BASE.'framework/conf/config.php')) {  // we can't write to the config.php file\n             flash('error',gt('The file /framework/conf/config.php is NOT Writeable. You will be unable to change the theme.'));\n@@ -1074,8 +1073,8 @@ public function theme_switch() {\n //        expTheme::removeSmartyCache();\n         expSession::clearAllUsersSessionCache();\n     \texpHistory::returnTo('manageable');\n-    }\t\n-    \n+    }\n+\n \tpublic function theme_preview() {\n \t\texpSession::set('display_theme',$this->params['theme']);\n \t\t$sv = isset($this->params['sv'])?$this->params['sv']:'';\n@@ -1179,13 +1178,13 @@ public function configure_site () {\n             '0'=>'-- '.gt('Please Select an Anti-Spam Control').' --',\n             \"recaptcha\"=>'reCAPTCHA'\n         );\n-        \n+\n         //THEMES FOR RECAPTCHA\n         $as_themes = array(\n             \"light\"=>gt('Light (Default)'),\n         \t\"dark\"=>gt('Dark'),\n         );\n-        \n+\n         // Available Themes\n         $themes = array();\n         if (is_readable(BASE.'themes')) {\n@@ -1243,24 +1242,24 @@ public function configure_site () {\n         $attribution = expSettings::dropdownData('attribution');\n \n         // These funcs need to be moved up in to new subsystems\n-        \n+\n         // Date/Time Format\n         $datetime_format = expSettings::dropdownData('datetime_format');\n \n         // Date Format\n         $date_format = expSettings::dropdownData('date_format');\n-        \n+\n         // Time Format\n         $time_format = expSettings::dropdownData('time_format');\n-        \n+\n         // Start of Week\n //        $start_of_week = glist(expSettings::dropdownData('start_of_week'));\n         $daysofweek = event::dayNames();\n         $start_of_week = $daysofweek['long'];\n \n         // File Permissions\n         $file_permisions = glist(expSettings::dropdownData('file_permissions'));\n-        \n+\n         // File Permissions\n         $dir_permissions = glist(expSettings::dropdownData('dir_permissions'));\n "
        },
        {
          "filename": "framework/modules/banners/controllers/bannerController.php",
          "status": "modified",
          "additions": 25,
          "deletions": 22,
          "patch": "@@ -22,6 +22,12 @@\n  */\n \n class bannerController extends expController {\n+    public $useractions = array(\n+        'showall'=>'Display Banner(s)'\n+    );\n+    protected $manage_permissions = array(\n+        'reset' => 'Reset Stats'\n+    );\n     public $remove_configs = array(\n         'aggregation',\n         'categories',\n@@ -34,43 +40,40 @@ class bannerController extends expController {\n         'tags',\n         'twitter',\n     ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n-    public $useractions = array(\n-        'showall'=>'Display Banner(s)'\n-    );\n \n     static function displayname() { return gt(\"Banners\"); }\n     static function description() { return gt(\"Display banners on your website and track 'clicks'.\"); }\n-    \n+\n     public function showall() {\n         $banners = array();\n         if (!empty($this->config['banners'])) {\n             // only show banners that this module is configured to show.\n             // do not show banners that have gone over their impression limit\n             // do not show banners that have gone over their click limit\n-            // randomly grab one banner to be displayed \n+            // randomly grab one banner to be displayed\n             // increase the impression count for this banner\n-            $where = 'id IN ('.implode(',', $this->config['banners']).')';    \n+            $where = 'id IN ('.implode(',', $this->config['banners']).')';\n             $where .= ' AND (impression_limit > impressions || impression_limit=0)';\n             $where .= ' AND (click_limit > clicks || click_limit=0)';\n             $limit = isset($this->config['limit']) ? $this->config['limit'] : 1;\n             $banners = $this->banner->find('all', $where , 'RAND()', $limit);\n-            foreach($banners as $banner) {            \n+            foreach($banners as $banner) {\n                 $banner->increaseImpressions();\n             }\n         }\n-        \n+\n         // assign banner to the template and show it!\n         assign_to_template(array(\n             'banners'=>$banners\n         ));\n     }\n-    \n+\n     public function click() {\n         $banner = new banner($this->params['id']);\n         $banner->increaseClicks();\n         redirect_to($banner->url);\n     }\n-    \n+\n     public function create() {\n //        global $db;\n         //make sure we have companies.\n@@ -85,15 +88,15 @@ public function create() {\n             parent::create();\n         }\n     }\n-    \n+\n     public function manage() {\n         expHistory::set('manageable', $this->params);\n-        \n+\n         // build out a SQL query that gets all the data we need and is sortable.\n         $sql  = 'SELECT b.*, c.title as companyname, f.expfiles_id as file_id ';\n         $sql .= 'FROM '.DB_TABLE_PREFIX.'_banner b, '.DB_TABLE_PREFIX.'_companies c , '.DB_TABLE_PREFIX.'_content_expFiles f ';\n         $sql .= 'WHERE b.companies_id = c.id AND (b.id = f.content_id AND f.content_type=\"banner\")';\n-\t\t\n+\n \t\t$page = new expPaginator(array(\n \t\t\t'model'=>'banner',\n \t\t\t'sql'=>$sql,\n@@ -114,41 +117,41 @@ public function manage() {\n             'page'=>$page\n         ));\n     }\n-    \n+\n     public function configure() {\n         $this->config['defaultbanner'] = array();\n         if (!empty($this->config['defaultbanner_id'])) {\n             $this->config['defaultbanner'][] = new expFile($this->config['defaultbanner_id']);\n-        }  \n+        }\n \t    parent::configure();\n \t    $banners = $this->banner->find('all', null, 'companies_id');\n \t    assign_to_template(array(\n             'banners'=>$banners,\n             'title'=>static::displayname()\n         ));\n \t}\n-\t\n+\n \tpublic function saveconfig() {\n \t    $this->params['defaultbanner_id'] = isset($this->params['expFile'][0]) ? $this->params['expFile'][0] : 0;\n    \t    parent::saveconfig();\n \t}\n-\t\n+\n \tpublic function export() {\n         // gather all the data\n         $banners = $this->banner->find('all');\n         $out = '\"Banner ID\",\"Banner Title\",\"Banner URL\",\"Company Name\",\"Impression Limit\",\"Click Limit\",\"Impressions\",\"Clicks\"' . \"\\n\";\n         foreach ($banners as $l) {\n             $out .='\"'.$l->id.'\",\"'.$l->title.'\",\"'.$l->url.'\",\"'.$l->company->title.'\",\"'.$l->impression_limit.'\",\"'.$l->click_limit.'\",\"'.$l->impressions.'\",\"'.$l->clicks.'\"' . \"\\n\";\n         }\n-        \n+\n         // open the file\n         $dir =  BASE.'tmp';\n-        $filename = 'banner_export' . date(\"m-d-Y\") . '.csv';        \n+        $filename = 'banner_export' . date(\"m-d-Y\") . '.csv';\n         $fh = fopen ($dir .'/'. $filename, 'w');\n \n         // Put all values from $out to export.csv.\n         fputs($fh, $out);\n-        fclose($fh);        \n+        fclose($fh);\n \n         // push the file to the user\n         $export = new expFile(array('directory'=>$dir, 'filename'=>$filename));  //FIXME we are using a full path BASE instead of relative to root\n@@ -163,8 +166,8 @@ function reset_stats() {\n         banner::resetImpressions();\n //        $db->sql ('UPDATE '.$db->prefix.'banner SET clicks=0 WHERE 1');\n         banner::resetClicks();\n-        \n-        // let the user know we did stuff.      \n+\n+        // let the user know we did stuff.\n         flash('message', gt(\"Banner statistics reset.\"));\n         expHistory::back();\n     }"
        },
        {
          "filename": "framework/modules/blog/controllers/blogController.php",
          "status": "modified",
          "additions": 6,
          "deletions": 7,
          "patch": "@@ -29,15 +29,13 @@ class blogController extends expController {\n         'dates'=>\"Show Post Dates\",\n         'comments'=>\"Show Recent Post Comments\",\n     );\n+    protected $manage_permissions = array(\n+//        'approve'=>\"Approve Comments\",\n+    );\n     public $remove_configs = array(\n //        'categories',\n //        'ealerts'\n     ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n-    protected $add_permissions = array(\n-        'approve'=>\"Approve Comments\",\n-        'import'=>'Import Blog Items',\n-        'export'=>'Export Blog Items'\n-    );\n \n     static function displayname() { return gt(\"Blog\"); }\n     static function description() { return gt(\"Run a blog on your site.\"); }\n@@ -168,6 +166,7 @@ public function showall_by_date() {\n \tpublic function showall_by_author() {\n \t    expHistory::set('viewable', $this->params);\n \n+        $this->params['author'] = expString::escape($this->params['author']);\n         $user = user::getUserByName($this->params['author']);\n \t\t$page = new expPaginator(array(\n             'model'=>$this->basemodel_name,\n@@ -194,7 +193,7 @@ public function show() {\n \t    $id = isset($this->params['title']) ? $this->params['title'] : $this->params['id'];\n         $record = new blog($id);\n         if (empty($record->id))\n-            redirect_to(array('controller'=>'notfound','action'=>'page_not_found','title'=>$this->params['title']));\n+            redirect_to(array('controller'=>'notfound','action'=>'page_not_found','title'=>expString::escape($this->params['title'])));\n \n \t    // since we are probably getting here via a router mapped url\n \t    // some of the links (tags in particular) require a source, we will\n@@ -231,7 +230,7 @@ function showByTags() {\n \n         // setup some objects\n         $tagobj = new expTag();\n-        $modelname = empty($this->params['model']) ? $this->basemodel_name : $this->params['model'];\n+        $modelname = empty($this->params['model']) ? $this->basemodel_name : expString::escape($this->params['model']);\n         $model = new $modelname();\n \n         // start building the sql query"
        },
        {
          "filename": "framework/modules/core/controllers/expCatController.php",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -23,6 +23,9 @@\n  */\n \n class expCatController extends expController {\n+    protected $manage_permissions = array(\n+        'change' => 'Change Cats'\n+    );\n \n \t/**\n \t * name of module"
        },
        {
          "filename": "framework/modules/core/controllers/expCommentController.php",
          "status": "modified",
          "additions": 63,
          "deletions": 62,
          "patch": "@@ -24,29 +24,30 @@\n \n class expCommentController extends expController {\n     public $base_class = 'expComment';\n-    protected $add_permissions = array(\n-        'approve'=>\"Approve Comments\"\n-    );\n-   \tprotected $remove_permissions = array(\n+    protected $remove_permissions = array(\n         'create'\n     );\n+    protected $add_permissions = array(\n+        'approve'=>\"Approve Comments\",\n+        'bulk'=>\"Bulk Actions\"\n+    );\n \n     static function displayname() { return gt(\"Comments\"); }\n     static function description() { return gt(\"Use this module to add comments to a page.\"); }\n-    \n+\n \tfunction edit() {\n \t    if (empty($this->params['content_id'])) {\n \t        flash('message',gt('An error occurred: No content id set.'));\n-            expHistory::back();  \n-\t    } \n+            expHistory::back();\n+\t    }\n         /* The global constants can be overridden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n //        $require_login = empty($this->params['require_login']) ? COMMENTS_REQUIRE_LOGIN : $this->params['require_login'];\n //        $require_approval = empty($this->params['require_approval']) ? COMMENTS_REQUIRE_APPROVAL : $this->params['require_approval'];\n //        $require_notification = empty($this->params['require_notification']) ? COMMENTS_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n //        $notification_email = empty($this->params['notification_email']) ? COMMENTS_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-        \n-        \n+\n+\n \t    $id = empty($this->params['id']) ? null : $this->params['id'];\n \t    $comment = new expComment($id);\n         //FIXME here is where we might sanitize the comment before displaying/editing it\n@@ -55,8 +56,8 @@ function edit() {\n             'content_type'=>$this->params['content_type'],\n \t\t    'comment'=>$comment\n \t\t));\n-\t}\t\n-\t\n+\t}\n+\n \tfunction manage() {\n \t    expHistory::set('manageable', $this->params);\n \n@@ -68,7 +69,7 @@ function manage() {\n //        $require_approval = empty($this->params['require_approval']) ? COMMENTS_REQUIRE_APPROVAL : $this->params['require_approval'];\n //        $require_notification = empty($this->params['require_notification']) ? COMMENTS_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n //        $notification_email = empty($this->params['notification_email']) ? COMMENTS_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-\t    \n+\n \t    $sql  = 'SELECT c.*, cnt.* FROM '.DB_TABLE_PREFIX.'_expComments c ';\n         $sql .= 'JOIN '.DB_TABLE_PREFIX.'_content_expComments cnt ON c.id=cnt.expcomments_id ';\n         if (!empty($this->params['content_id']) && !empty($this->params['content_type'])) {\n@@ -80,7 +81,7 @@ function manage() {\n \n         $page = new expPaginator(array(\n //            'model'=>'expComment',\n-            'sql'=>$sql, \n+            'sql'=>$sql,\n             'limit'=>10,\n             'order'=>$order,\n             'dir'=>$dir,\n@@ -115,10 +116,10 @@ function showComments() {\n \n         /* The global constants can be overridden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n-        $require_login = empty($this->params['require_login']) ? COMMENTS_REQUIRE_LOGIN : $this->params['require_login'];\n-        $require_approval = empty($this->params['require_approval']) ? COMMENTS_REQUIRE_APPROVAL : $this->params['require_approval'];\n-        $require_notification = empty($this->params['require_notification']) ? COMMENTS_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n-        $notification_email = empty($this->params['notification_email']) ? COMMENTS_NOTIFICATION_EMAIL : $this->params['notification_email'];\n+        $require_login = empty($this->params['require_login']) ? COMMENTS_REQUIRE_LOGIN : intval($this->params['require_login']);\n+        $require_approval = empty($this->params['require_approval']) ? COMMENTS_REQUIRE_APPROVAL : intval($this->params['require_approval']);\n+        $require_notification = empty($this->params['require_notification']) ? COMMENTS_REQUIRE_NOTIFICATION : intval($this->params['require_notification']);\n+        $notification_email = empty($this->params['notification_email']) ? COMMENTS_NOTIFICATION_EMAIL : expString::escape($this->params['notification_email']);\n \n //        $sql  = 'SELECT c.*, ua.image, u.username FROM '.$db->prefix.'expComments c ';\n //        $sql .= 'JOIN '.$db->prefix.'content_expComments cnt ON c.id=cnt.expcomments_id ';\n@@ -128,14 +129,14 @@ function showComments() {\n \n         $sql  = 'SELECT c.* FROM '.$db->prefix.'expComments c ';\n         $sql .= 'JOIN '.$db->prefix.'content_expComments cnt ON c.id=cnt.expcomments_id ';\n-        $sql .= 'WHERE cnt.content_id='.$this->params['content_id'].\" AND cnt.content_type='\".$this->params['content_type'].\"' \";\n+        $sql .= 'WHERE cnt.content_id='.$this->params['content_id'].\" AND cnt.content_type='\".expString::escape($this->params['content_type']).\"' \";\n         if (!$user->isAdmin()) {\n             $sql .= 'AND c.approved=1';\n         }\n \n         $comments = new expPaginator(array(\n             //'model'=>'expComment',\n-            'sql'=>$sql, \n+            'sql'=>$sql,\n //            'limit'=>999,\n             'order'=>'created_at',\n             'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n@@ -157,18 +158,18 @@ function showComments() {\n \n         if (empty($this->params['config']['disable_nested_comments'])) $comments->records = self::arrangecomments($comments->records);\n         // eDebug($sql, true);\n-        \n+\n         // count the unapproved comments\n         if ($require_approval == 1 && $user->isAdmin()) {\n             $sql  = 'SELECT count(com.id) as c FROM '.$db->prefix.'expComments com ';\n             $sql .= 'JOIN '.$db->prefix.'content_expComments cnt ON com.id=cnt.expcomments_id ';\n-            $sql .= 'WHERE cnt.content_id='.$this->params['content_id'].\" AND cnt.content_type='\".$this->params['content_type'].\"' \";\n+            $sql .= 'WHERE cnt.content_id='.$this->params['content_id'].\" AND cnt.content_type='\".expString::escape($this->params['content_type']).\"' \";\n             $sql .= 'AND com.approved=0';\n             $unapproved = $db->countObjectsBySql($sql);\n         } else {\n             $unapproved = 0;\n-        }        \n-        \n+        }\n+\n         $this->config = $this->params['config'];\n         $type = !empty($this->params['type']) ? $this->params['type'] : gt('Comment');\n         $ratings = !empty($this->params['ratings']) ? true : false;\n@@ -177,7 +178,7 @@ function showComments() {\n             'comments'=>$comments,\n             'config'=>$this->params['config'],\n             'unapproved'=>$unapproved,\n-\t\t\t'content_id'=>$this->params['content_id'], \n+\t\t\t'content_id'=>$this->params['content_id'],\n \t\t\t'content_type'=>$this->params['content_type'],\n \t\t\t'user'=>$user,\n \t\t\t'hideform'=>$this->params['hideform'],\n@@ -324,7 +325,7 @@ public static function getComments($params) {\n \n     function update() {\n         global $user;\n-        \n+\n         /* The global constants can be overridden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n //        $require_login = empty($this->params['require_login']) ? COMMENTS_REQUIRE_LOGIN : $this->params['require_login'];\n@@ -339,19 +340,19 @@ function update() {\n         if (!(ANTI_SPAM_USERS_SKIP && $user->isLoggedIn())) {\n             expValidator::check_antispam($this->params, gt('Your comment was not posted.') . ' ' . gt(\"Anti-spam verification failed.  Please try again. Please try again.\"));\n         }\n-        \n+\n         // figure out the name and email address\n         if (!empty($user->id) && empty($this->params['id'])) {\n             $this->params['name'] = $user->firstname.\" \".$user->lastname;\n             $this->params['email'] = $user->email;\n         }\n-                        \n+\n         // save the comment\n         if (empty($require_approval)) {\n             $this->expComment->approved=1;\n         }\n         $this->expComment->update($this->params);\n-        \n+\n         // attach the comment to the datatype it belongs to (blog, news, etc..);\n //        $obj = new stdClass();\n //\t\t$obj->content_type = $this->params['content_type'];\n@@ -366,7 +367,7 @@ function update() {\n \t\t    $msg .= ' '.gt('Your comment is now pending approval. You will receive an email to').' ';\n \t\t    $msg .= $this->expComment->email.' '.gt('letting you know when it has been approved.');\n \t\t}\n-\t\t\n+\n \t\tif ($require_notification && !$user->isAdmin()) {\n \t\t    $this->sendNotification($this->expComment,$this->params);\n \t\t}\n@@ -375,55 +376,55 @@ function update() {\n         }\n \n \t\tflash('message', $msg);\n-\t\t\n+\n \t\texpHistory::back();\n \t}\n-\t\n+\n \tpublic function approve() {\n \t    expHistory::set('editable', $this->params);\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n //        $require_login = empty($this->params['require_login']) ? COMMENTS_REQUIRE_LOGIN : $this->params['require_login'];\n //        $require_approval = empty($this->params['require_approval']) ? COMMENTS_REQUIRE_APPROVAL : $this->params['require_approval'];\n //        $require_notification = empty($this->params['require_notification']) ? COMMENTS_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n //        $notification_email = empty($this->params['notification_email']) ? COMMENTS_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-\t    \n+\n \t    if (empty($this->params['id'])) {\n \t        flash('error', gt('No ID supplied for comment to approve'));\n \t        expHistory::back();\n \t    }\n-\t    \n+\n \t    $comment = new expComment($this->params['id']);\n \t    assign_to_template(array(\n             'comment'=>$comment\n         ));\n \t}\n-\t\n+\n \tpublic function approve_submit() {\n \t    if (empty($this->params['id'])) {\n \t        flash('error', gt('No ID supplied for comment to approve'));\n \t        expHistory::back();\n \t    }\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n //        $require_login = empty($this->params['require_login']) ? COMMENTS_REQUIRE_LOGIN : $this->params['require_login'];\n //        $require_approval = empty($this->params['require_approval']) ? COMMENTS_REQUIRE_APPROVAL : $this->params['require_approval'];\n //        $require_notification = empty($this->params['require_notification']) ? COMMENTS_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n //        $notification_email = empty($this->params['notification_email']) ? COMMENTS_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-\t    \n+\n \t    $comment = new expComment($this->params['id']);\n \t    $comment->body = $this->params['body'];\n \t    $comment->approved = $this->params['approved'];\n \t    $comment->save();\n \t    expHistory::back();\n \t}\n-\t\n+\n \tpublic function approve_toggle() {\n \t    if (empty($this->params['id'])) return;\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n //        $require_login = empty($this->params['require_login']) ? COMMENTS_REQUIRE_LOGIN : $this->params['require_login'];\n //        $require_approval = empty($this->params['require_approval']) ? COMMENTS_REQUIRE_APPROVAL : $this->params['require_approval'];\n@@ -479,42 +480,42 @@ function bulk_process() {\n \n \tpublic function delete() {\n \t    global $db;\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n //        $require_login = empty($this->params['require_login']) ? COMMENTS_REQUIRE_LOGIN : $this->params['require_login'];\n //        $require_approval = empty($this->params['require_approval']) ? COMMENTS_REQUIRE_APPROVAL : $this->params['require_approval'];\n //        $require_notification = empty($this->params['require_notification']) ? COMMENTS_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n //        $notification_email = empty($this->params['notification_email']) ? COMMENTS_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-\t    \n+\n \t    if (empty($this->params['id'])) {\n \t        flash('error', gt('Missing id for the comment you would like to delete'));\n \t        expHistory::back();\n \t    }\n-\t    \n+\n \t    // delete the comment\n         $comment = new expComment($this->params['id']);\n         $comment->delete();\n-        \n+\n         // delete the association too\n-        $db->delete($comment->attachable_table, 'expcomments_id='.$this->params['id']);        \n-        \n+        $db->delete($comment->attachable_table, 'expcomments_id='.$this->params['id']);\n+\n         // send the user back where they came from.\n         expHistory::back();\n \t}\n-\t\n+\n \tprivate function sendNotification($comment,$params) {\n //\t    global $db;\n \t    if (empty($comment)) return false;\n-        \n+\n         //eDebug($comment,1);\n-        /* The global constants can be overriden by passing appropriate params */ \n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n //        $require_login = empty($this->params['require_login']) ? COMMENTS_REQUIRE_LOGIN : $this->params['require_login'];\n //        $require_approval = empty($this->params['require_approval']) ? COMMENTS_REQUIRE_APPROVAL : $this->params['require_approval'];\n //        $require_notification = empty($this->params['require_notification']) ? COMMENTS_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n         $notification_email = empty($this->params['notification_email']) ? COMMENTS_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-\t    \n+\n \t    // setup some email variables.\n \t    $subject = gt('Notification of a New Comment Posted to').' '.URL_BASE;\n         $tos = explode(',', str_replace(' ', '', $notification_email));\n@@ -526,7 +527,7 @@ private function sendNotification($comment,$params) {\n \n         $posting = makelink(array('controller'=>$params['content_type'], 'action'=>'show', 'title'=>$model->sef_url));\n         $editlink = makelink(array('controller'=>'expComment', 'action'=>'edit', 'content_id'=>$params['content_id'], 'content_type'=>$params['content_type'], 'id'=>$comment->id));\n-        \n+\n         // make the email body\n         $body = '<h1>'.gt('New Comment Posted').'</h1>';\n         $body .= '<h2>'.gt('Posted By').'</h2>';\n@@ -540,29 +541,29 @@ private function sendNotification($comment,$params) {\n         //1$body .= \"<br><br>\";\n         $body .= '<h3>'.gt('Edit / Approve comment').'</h3>';\n         $body .= '<a href=\"'.$editlink.'\">'.$editlink.'</a>';\n-        \n+\n         // create the mail message\n-        $mail = new expMail();        \n+        $mail = new expMail();\n         $mail->quickSend(array(\n                 'html_message'=>$body,\n \t\t\t    'to'=>$tos,\n \t\t\t\t'from'=>array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n \t\t\t    'subject'=>$subject,\n         ));\n-        \n+\n         return true;\n \t}\n \n \tprivate function sendApprovalNotification($comment,$params) {\n \t    if (empty($comment)) return false;\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n //        $require_login = empty($this->params['require_login']) ? COMMENTS_REQUIRE_LOGIN : $this->params['require_login'];\n //        $require_approval = empty($this->params['require_approval']) ? COMMENTS_REQUIRE_APPROVAL : $this->params['require_approval'];\n //        $require_notification = empty($this->params['require_notification']) ? COMMENTS_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n         $notification_email = empty($this->params['notification_email']) ? COMMENTS_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-\t    \n+\n \t    // setup some email variables.\n \t    $subject = gt('Notification of Comment Approval on').' '.URL_BASE;\n         $tos = explode(',', str_replace(' ', '', $notification_email));\n@@ -587,14 +588,14 @@ private function sendApprovalNotification($comment,$params) {\n         $body .= '<a href=\"'.$posting.'\">'.$posting.'</a>';\n \n         // create the mail message\n-        $mail = new expMail();        \n+        $mail = new expMail();\n         $mail->quickSend(array(\n                 'html_message'=>$body,\n \t\t\t    'to'=>$tos,\n \t\t\t    'from'=>array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n \t\t\t    'subject'=>$subject,\n         ));\n-        \n+\n         return true;\n \t}\n "
        },
        {
          "filename": "framework/modules/core/controllers/expDefinableFieldController.php",
          "status": "modified",
          "additions": 14,
          "deletions": 14,
          "patch": "@@ -47,26 +47,26 @@ static function hasSources() { return false; }\n    \t * default view for individual field\n    \t */\n    \tfunction show() {\n-        assign_to_template(array('record'=>$record,'tag'=>$tag));  //FIXME $record & $tag are undefined\n+//        assign_to_template(array('record'=>$record,'tag'=>$tag));  //FIXME $record & $tag are undefined\n     }\n \n \t/**\n \t * manage definable field\n \t */\n \tfunction manage() {\n         global $db;\n-\t\t\n+\n         expHistory::set('manageable', $this->params);\n \t\t$fields = $db->selectObjects(\"expDefinableFields\",'1','rank');\n \t\t$types = expTemplate::listControlTypes();\n         uasort($types, \"strnatcmp\");\n \t\tarray_unshift($types,'['.gt('Please Select'.']'));\n         assign_to_template(array('fields'=>$fields, 'types'=>$types));\n     }\n-\t\n+\n \tfunction edit() {\n \t\tglobal $db;\n-\t\t \n+\n \t\t$control_type = \"\";\n \t\t$ctl = null;\n \t\tif (isset($this->params['id'])) {\n@@ -80,7 +80,7 @@ function edit() {\n \t\t}\n \t\tif ($control_type == \"\") $control_type = $this->params['control_type'];\n \t\t$form = call_user_func(array($control_type,\"form\"),$ctl);\n-\t\tif ($ctl) { \n+\t\tif ($ctl) {\n \t\t\t$form->controls['identifier']->disabled = true;\n \t\t\t$form->meta(\"id\",$ctl->id);\n \t\t\t$form->meta(\"identifier\",$ctl->identifier);\n@@ -91,10 +91,10 @@ function edit() {\n \t\t$form->meta(\"type\", $control_type);\n \t\t$types = expTemplate::listControlTypes();\n \n-\t\tassign_to_template(array('form_html'=>$form->toHTML(), 'types'=>$types[$control_type]));\t\t\t\n+\t\tassign_to_template(array('form_html'=>$form->toHTML(), 'types'=>$types[$control_type]));\n \t}\n-\t\n-\tfunction save() {\t\n+\n+\tfunction save() {\n \t\tglobal $db;\n \t\t$ctl = null;\n \t\t$control = null;\n@@ -106,30 +106,30 @@ function save() {\n \t\t\t}\n \t\t}\n \n-\t\tif (call_user_func(array($_POST['control_type'],'useGeneric')) == true) { \t\n+\t\tif (call_user_func(array($_POST['control_type'],'useGeneric')) == true) {\n \t\t\t$ctl = call_user_func(array('genericcontrol','update'),expString::sanitize($_POST),$ctl);\n \t\t} else {\n \t\t\t$ctl = call_user_func(array($_POST['control_type'],'update'),expString::sanitize($_POST),$ctl);\n \t\t}\n-\t\t\n+\n \t\tif ($ctl != null) {\n \t\t\t$name = substr(preg_replace('/[^A-Za-z0-9]/','_',$ctl->identifier),0,20);\n-\t\n+\n \t\t\tif (!isset($this->params['id'])) {\n \t\t\t\t$control->name =  $name;\n \t\t\t}\n-\t\n+\n             if (!empty($ctl->pattern)) $ctl->pattern = addslashes($ctl->pattern);\n \t\t\t$control->data = serialize($ctl);\n \t\t\t$control->type = $this->params['type'];\n-\t\t\t\n+\n \t\t\tif (isset($control->id)) {\n \t\t\t\t$db->updateObject($control,'expDefinableFields');\n \t\t\t} else {\n \t\t\t\t$db->insertObject($control,'expDefinableFields');\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\tredirect_to(array('controller'=>'expDefinableField','action'=>'manage'));\n \t}\n "
        },
        {
          "filename": "framework/modules/core/controllers/expHTMLEditorController.php",
          "status": "modified",
          "additions": 8,
          "deletions": 5,
          "patch": "@@ -24,6 +24,14 @@\n \n class expHTMLEditorController extends expController\n {\n+    protected $manage_permissions = array(\n+        'activate' => \"Activate\",\n+        'preview'  => \"Preview Editor Toolbars\"\n+    );\n+    public $requires_login = array(\n+        'preview'=>'Preview Editor',\n+    );\n+\n     static function displayname()\n     {\n         return gt(\"Editors\");\n@@ -49,11 +57,6 @@ static function hasContent()\n         return false;\n     }\n \n-    protected $add_permissions = array(\n-        'activate' => \"Activate\",\n-        'preview'  => \"Preview Editor Toolbars\"\n-    );\n-\n     function __construct($src = null, $params = array())\n     {\n         parent:: __construct($src, $params);"
        },
        {
          "filename": "framework/modules/core/controllers/expSimpleNoteController.php",
          "status": "modified",
          "additions": 84,
          "deletions": 84,
          "patch": "@@ -24,8 +24,8 @@\n \n class expSimpleNoteController extends expController {\n     public $base_class = 'expSimpleNote';\n-    protected $add_permissions = array(\n-        'approve'=>\"Approve Comments\"\n+    protected $manage_permissions = array(\n+        'approve'=>\"Approve Notes\"\n     );\n //    protected $remove_permissions = array(\n //        'edit',\n@@ -35,18 +35,18 @@ class expSimpleNoteController extends expController {\n     static function displayname() { return gt(\"Simple Notes\"); }\n     static function description() { return gt(\"Use this module to add Simple Notes attached to something (product, order, etc)\"); }\n     static function author() { return \"Jonathan Worent @ OIC Group, Inc\"; }\n-    \n+\n     function edit() {\n         global $user;\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n         $require_login = empty($this->params['require_login']) ? SIMPLENOTE_REQUIRE_LOGIN : $this->params['require_login'];\n         $require_approval = empty($this->params['require_approval']) ? SIMPLENOTE_REQUIRE_APPROVAL : $this->params['require_approval'];\n         $require_notification = empty($this->params['require_notification']) ? SIMPLENOTE_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n         $notification_email = empty($this->params['notification_email']) ? SIMPLENOTE_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-        \n-        if (empty($this->params['formtitle'])) \n+\n+        if (empty($this->params['formtitle']))\n         {\n             if (empty($this->params['id']))\n             {\n@@ -61,7 +61,7 @@ function edit() {\n         {\n             $formtitle = $this->params['formtitle'];\n         }\n-        \n+\n         $id = empty($this->params['id']) ? null : $this->params['id'];\n         $simpleNote = new expSimpleNote($id);\n         //FIXME here is where we might sanitize the note before displaying/editing it\n@@ -78,26 +78,26 @@ function edit() {\n             'content_id'=>$this->params['content_id'],\n             'tab'=>empty($this->params['tab'])?0:$this->params['tab']\n         ));\n-    }    \n-    \n+    }\n+\n     function manage() {\n         expHistory::set('manageable', $this->params);\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n         $require_login = empty($this->params['require_login']) ? SIMPLENOTE_REQUIRE_LOGIN : $this->params['require_login'];\n         $require_approval = empty($this->params['require_approval']) ? SIMPLENOTE_REQUIRE_APPROVAL : $this->params['require_approval'];\n         $require_notification = empty($this->params['require_notification']) ? SIMPLENOTE_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n         $notification_email = empty($this->params['notification_email']) ? SIMPLENOTE_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-        \n+\n         $sql  = 'SELECT n.* FROM '.DB_TABLE_PREFIX.'_expSimpleNote n ';\n         $sql .= 'JOIN '.DB_TABLE_PREFIX.'_content_expSimpleNote cnt ON n.id=cnt.expsimplenote_id ';\n         $sql .= 'WHERE cnt.content_id='.$this->params['content_id'].\" AND cnt.content_type='\".$this->params['content_type'].\"' \";\n         $sql .= 'AND n.approved=0';\n-        \n+\n         $page = new expPaginator(array(\n //            'model'=>'expSimpleNote',  // brings in all of model\n-            'sql'=>$sql, \n+            'sql'=>$sql,\n             'limit'=>10,\n             'order'=>'created_at',\n             'dir'=>'DESC',\n@@ -110,7 +110,7 @@ function manage() {\n                 gt('Comment')=>'body'\n             ),\n         ));\n-        \n+\n         //FIXME here is where we might sanitize the notes before displaying them\n \n         assign_to_template(array(\n@@ -122,26 +122,26 @@ function manage() {\n             'tab'=>$this->params['tab']\n         ));\n     }\n-    \n+\n     function getNotes() {\n         global $user, $db;\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n-        $require_login = empty($this->params['require_login']) ? SIMPLENOTE_REQUIRE_LOGIN : $this->params['require_login'];\n-        $require_approval = empty($this->params['require_approval']) ? SIMPLENOTE_REQUIRE_APPROVAL : $this->params['require_approval'];\n-        $require_notification = empty($this->params['require_notification']) ? SIMPLENOTE_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n-        $notification_email = empty($this->params['notification_email']) ? SIMPLENOTE_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-        \n-        \n+        $require_login = empty($this->params['require_login']) ? SIMPLENOTE_REQUIRE_LOGIN : intval($this->params['require_login']);\n+        $require_approval = empty($this->params['require_approval']) ? SIMPLENOTE_REQUIRE_APPROVAL : intval($this->params['require_approval']);\n+        $require_notification = empty($this->params['require_notification']) ? SIMPLENOTE_REQUIRE_NOTIFICATION : intval($this->params['require_notification']);\n+        $notification_email = empty($this->params['notification_email']) ? SIMPLENOTE_NOTIFICATION_EMAIL : expString::escape($this->params['notification_email']);\n+\n+\n         $sql  = 'SELECT n.* FROM '.$db->prefix.'expSimpleNote n ';\n         $sql .= 'JOIN '.$db->prefix.'content_expSimpleNote cnt ON n.id=cnt.expsimplenote_id ';\n-        $sql .= 'WHERE cnt.content_id='.$this->params['content_id'].\" AND cnt.content_type='\".$this->params['content_type'].\"' \";\n+        $sql .= 'WHERE cnt.content_id='.$this->params['content_id'].\" AND cnt.content_type='\".expString::escape($this->params['content_type']).\"' \";\n         $sql .= 'AND n.approved=1';\n-        \n+\n         $simplenotes = new expPaginator(array(\n             //'model'=>'expSimpleNote',\n-            'sql'=>$sql, \n+            'sql'=>$sql,\n             'limit'=>10,\n             'order'=>'created_at',\n             'dir'=>'DESC',\n@@ -152,24 +152,24 @@ function getNotes() {\n                 gt('Readable Column Name')=>'Column Name'\n             ),\n         ));\n-        \n-        // count the unapproved comments\n+\n+        // count the unapproved notes\n         if ($require_approval == 1 && $user->isAdmin()) {\n             $sql  = 'SELECT count(com.id) as c FROM '.$db->prefix.'expSimpleNote com ';\n             $sql .= 'JOIN '.$db->prefix.'content_expSimpleNote cnt ON com.id=cnt.expsimplenote_id ';\n-            $sql .= 'WHERE cnt.content_id='.$this->params['content_id'].\" AND cnt.content_type='\".$this->params['content_type'].\"' \";\n+            $sql .= 'WHERE cnt.content_id='.$this->params['content_id'].\" AND cnt.content_type='\".expString::escape($this->params['content_type']).\"' \";\n             $sql .= 'AND com.approved=0';\n             $unapproved = $db->countObjectsBySql($sql);\n         } else {\n             $unapproved = 0;\n-        }        \n- \n+        }\n+\n         //FIXME here is where we might sanitize the notes before displaying them\n \n         assign_to_template(array(\n             'simplenotes'=>$simplenotes,\n-            'unapproved'=>$unapproved, \n-            'content_id'=>$this->params['content_id'], \n+            'unapproved'=>$unapproved,\n+            'content_id'=>$this->params['content_id'],\n             'content_type'=>$this->params['content_type'],\n             'user'=>$user,\n             'hideform'=>$this->params['hideform'],\n@@ -186,28 +186,28 @@ function getNotes() {\n \n     function update() {\n         global $db, $user, $history;\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n         $require_login = empty($this->params['require_login']) ? SIMPLENOTE_REQUIRE_LOGIN : $this->params['require_login'];\n         $require_approval = empty($this->params['require_approval']) ? SIMPLENOTE_REQUIRE_APPROVAL : $this->params['require_approval'];\n         $require_notification = empty($this->params['require_notification']) ? SIMPLENOTE_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n         $notification_email = empty($this->params['notification_email']) ? SIMPLENOTE_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-        \n+\n         // figure out the name and email address\n         if (!empty($user->id)) {\n             $this->params['name'] = $user->firstname.\" \".$user->lastname;\n             $this->params['email'] = $user->email;\n         }\n-        \n-        // if simplenotes are configed to require approvals set this to 0 otherwise we \n+\n+        // if simplenotes are configed to require approvals set this to 0 otherwise we\n         // will just go ahead and turn the approval on for this comment.\n         $this->expSimpleNote->approved = ($require_approval == 1 && !$user->isAdmin()) ? 0 : 1;\n-        \n+\n         // save the note\n         //FIXME here is where we might sanitize the note before saving it\n         $this->expSimpleNote->update($this->params);\n-        \n+\n         // attach the note to the datatype it belongs to (product, order, etc..);\n //        $obj = new stdClass();\n //        $obj->content_type = $this->params['content_type'];\n@@ -222,37 +222,37 @@ function update() {\n             $msg .= ' '.gt('Your note is now pending approval. You will receive an email to').' ';\n             $msg .= $this->expSimpleNote->email.' '.gt('letting you know when it has been approved.');\n         }\n-        \n+\n         if ($require_notification && !$user->isAdmin()) {\n             $this->sendNotification($this->expComment);\n         }\n-        \n+\n         flash('message', $msg);\n-        \n-        \n+\n+\n         $lastUrl = makelink($history->history[$history->history['lasts']['type']][count($history->history[$history->history['lasts']['type']])-1]['params']);\n         if (!empty($this->params['tab']))\n         {\n             $lastUrl .= \"#\".$this->params['tab'];\n         }\n         redirect_to($lastUrl);\n     }\n-    \n+\n     public function approve() {\n         expHistory::set('editable', $this->params);\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n         $require_login = empty($this->params['require_login']) ? SIMPLENOTE_REQUIRE_LOGIN : $this->params['require_login'];\n         $require_approval = empty($this->params['require_approval']) ? SIMPLENOTE_REQUIRE_APPROVAL : $this->params['require_approval'];\n         $require_notification = empty($this->params['require_notification']) ? SIMPLENOTE_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n         $notification_email = empty($this->params['notification_email']) ? SIMPLENOTE_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-        \n+\n         if (empty($this->params['id'])) {\n             flash('error', gt('No ID supplied for note to approve'));\n             $lastUrl = expHistory::getLast('editable');\n         }\n-        \n+\n         $simplenote = new expSimpleNote($this->params['id']);\n         assign_to_template(array(\n             'simplenote'=>$simplenote,\n@@ -263,83 +263,83 @@ public function approve() {\n             'tab'=>$this->params['tab']\n         ));\n     }\n-    \n+\n     public function approve_submit() {\n         global $history;\n-        \n+\n         if (empty($this->params['id'])) {\n             flash('error', gt('No ID supplied for comment to approve'));\n             $lastUrl = expHistory::getLast('editable');\n         }\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n         $require_login = empty($this->params['require_login']) ? SIMPLENOTE_REQUIRE_LOGIN : $this->params['require_login'];\n         $require_approval = empty($this->params['require_approval']) ? SIMPLENOTE_REQUIRE_APPROVAL : $this->params['require_approval'];\n         $require_notification = empty($this->params['require_notification']) ? SIMPLENOTE_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n         $notification_email = empty($this->params['notification_email']) ? SIMPLENOTE_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-        \n+\n         $simplenote = new expSimpleNote($this->params['id']);\n         //FIXME here is where we might sanitize the note before approving it\n         $simplenote->body = $this->params['body'];\n         $simplenote->approved = $this->params['approved'];\n         $simplenote->save();\n-        \n+\n         $lastUrl = makelink($history->history[$history->history['lasts']['type']][count($history->history[$history->history['lasts']['type']])-1]['params']);\n         if (!empty($this->params['tab']))\n         {\n             $lastUrl .= \"#\".$this->params['tab'];\n         }\n         redirect_to($lastUrl);\n     }\n-    \n+\n     public function approve_toggle() {\n         global $history;\n-        \n+\n         if (empty($this->params['id'])) return;\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n         $require_login = empty($this->params['require_login']) ? SIMPLENOTE_REQUIRE_LOGIN : $this->params['require_login'];\n         $require_approval = empty($this->params['require_approval']) ? SIMPLENOTE_REQUIRE_APPROVAL : $this->params['require_approval'];\n         $require_notification = empty($this->params['require_notification']) ? SIMPLENOTE_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n         $notification_email = empty($this->params['notification_email']) ? SIMPLENOTE_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-        \n-        \n+\n+\n         $simplenote = new expSimpleNote($this->params['id']);\n         $simplenote->approved = $simplenote->approved == 1 ? 0 : 1;\n         $simplenote->save();\n-        \n+\n         $lastUrl = makelink($history->history[$history->history['lasts']['type']][count($history->history[$history->history['lasts']['type']])-1]['params']);\n         if (!empty($this->params['tab']))\n         {\n             $lastUrl .= \"#\".$this->params['tab'];\n         }\n         redirect_to($lastUrl);\n     }\n-    \n+\n     public function delete() {\n         global $db, $history;\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n         $require_login = empty($this->params['require_login']) ? SIMPLENOTE_REQUIRE_LOGIN : $this->params['require_login'];\n         $require_approval = empty($this->params['require_approval']) ? SIMPLENOTE_REQUIRE_APPROVAL : $this->params['require_approval'];\n         $require_notification = empty($this->params['require_notification']) ? SIMPLENOTE_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n         $notification_email = empty($this->params['notification_email']) ? SIMPLENOTE_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-        \n+\n         if (empty($this->params['id'])) {\n             flash('error', gt('Missing id for the comment you would like to delete'));\n             $lastUrl = expHistory::getLast('editable');\n         }\n-        \n+\n         // delete the note\n         $simplenote = new expSimpleNote($this->params['id']);\n         $rows = $simplenote->delete();\n-        \n+\n         // delete the assocication too\n-        $db->delete($simplenote->attachable_table, 'expsimplenote_id='.$this->params['id']);        \n-        \n+        $db->delete($simplenote->attachable_table, 'expsimplenote_id='.$this->params['id']);\n+\n         // send the user back where they came from.\n         $lastUrl = expHistory::getLast('editable');\n         if (!empty($this->params['tab']))\n@@ -348,38 +348,38 @@ public function delete() {\n         }\n         redirect_to($lastUrl);\n     }\n-    \n+\n     private function sendNotification($simplenote) {\n         if (empty($simplenote)) return false;\n-        \n-        /* The global constants can be overriden by passing appropriate params */ \n+\n+        /* The global constants can be overriden by passing appropriate params */\n         //sure wish I could do this once in the constructor. sadly $this->params[] isn't set yet\n-        $require_login = empty($this->params['require_login']) ? SIMPLENOTE_REQUIRE_LOGIN : $this->params['require_login'];\n-        $require_approval = empty($this->params['require_approval']) ? SIMPLENOTE_REQUIRE_APPROVAL : $this->params['require_approval'];\n-        $require_notification = empty($this->params['require_notification']) ? SIMPLENOTE_REQUIRE_NOTIFICATION : $this->params['require_notification'];\n-        $notification_email = empty($this->params['notification_email']) ? SIMPLENOTE_NOTIFICATION_EMAIL : $this->params['notification_email'];\n-        \n+        $require_login = empty($this->params['require_login']) ? SIMPLENOTE_REQUIRE_LOGIN : intval($this->params['require_login']);\n+        $require_approval = empty($this->params['require_approval']) ? SIMPLENOTE_REQUIRE_APPROVAL : intval($this->params['require_approval']);\n+        $require_notification = empty($this->params['require_notification']) ? SIMPLENOTE_REQUIRE_NOTIFICATION : intval($this->params['require_notification']);\n+        $notification_email = empty($this->params['notification_email']) ? SIMPLENOTE_NOTIFICATION_EMAIL : expString::escape($this->params['notification_email']);\n+\n         // setup some email variables.\n         $subject = 'Notification of a New Note Posted to '.URL_BASE;\n         $tos = explode(',', str_replace(' ', '', $notification_email));\n         $editlink = makelink(array('controller'=>'expSimpleNote', 'action'=>'edit', 'id'=>$simplenote->id));\n-        \n+\n         // make the email body\n         $body  = gt('Posted By').':&#160;'.$simplenote->name.\"<br>\";\n         $body .= gt('Posters Email').':&#160;'.$simplenote->email.\"<br><br>\";\n         $body .= $simplenote->body.\"<br><br>\";\n         $body .= gt('You can view, edit and optionally approved this comment by going to').' ';\n         $body .= '<a href=\"'.$editlink.'\">'.$editlink.'</a>';\n-        \n+\n         // create the mail message\n-        $mail = new expMail();        \n+        $mail = new expMail();\n         $mail->quickSend(array(\n                 'html_message'=>$body,\n                 'to'=>$tos,\n                 'from'=>array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n                 'subject'=>$subject,\n         ));\n-        \n+\n         return true;\n     }\n "
        },
        {
          "filename": "framework/modules/core/controllers/expTagController.php",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -23,6 +23,12 @@\n  */\n \n class expTagController extends expController {\n+    protected $manage_permissions = array(\n+//        'import' => 'Import Tags',\n+//        'importTags' => 'Import Tags',\n+//        'export' => 'Export Tags',\n+        'change' => 'Change Tags',\n+    );\n \t/**\n \t * name of module\n \t * @return string\n@@ -59,7 +65,7 @@ function show() {\n         if (isset($this->params['id'])) {\n             $id = $this->params['id'];\n         } elseif (isset($this->params['title'])) {\n-            $id = $this->params['title'];\n+            $id = expString::escape($this->params['title']);\n             $tag = $id;\n         }\n "
        },
        {
          "filename": "framework/modules/eaas/controllers/eaasController.php",
          "status": "modified",
          "additions": 0,
          "deletions": 5,
          "patch": "@@ -41,10 +41,6 @@ class eaasController extends expController {\n         'tags',\n         'twitter',\n     ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n-    protected $add_permissions = array(\n-        // 'approve'=>\"Approve Comments\"\n-    );\n-\n     public $tabs = array(\n         'aboutus'=>'About Us', \n         'blog'=>'Blog', \n@@ -54,7 +50,6 @@ class eaasController extends expController {\n         'filedownload'=>'File Downloads', \n         'news'=>'News'\n     );\n-\n     protected $data = array();\n     \n     static function displayname() { return gt(\"Exponent as a Service\"); }"
        },
        {
          "filename": "framework/modules/ealerts/controllers/ealertController.php",
          "status": "modified",
          "additions": 162,
          "deletions": 156,
          "patch": "@@ -23,7 +23,9 @@\n \n class ealertController extends expController {\n     public $basemodel_name = 'expeAlerts';\n-\n+    protected $manage_permissions = array(\n+        'send'=>'Send E-Alert',\n+    );\n \tpublic $remove_configs = array(\n         'aggregation',\n         'categories',\n@@ -36,10 +38,10 @@ class ealertController extends expController {\n         'tags',\n         'twitter',\n     ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n-\t\n+\n     static function displayname() { return gt(\"E-Alerts\"); }\n     static function description() { return gt(\"This module will allow users to sign up for email alerts on a module by module basis.\"); }\n-    \n+\n     static function hasSources() {\n         return false;\n     }\n@@ -52,12 +54,12 @@ public function showall() {\n             'subscriptions'=>$subscriptions\n         ));\n     }\n-    \n+\n     public function send_confirm() {\n         global $db;\n \n         // find this E-Alert in the database\n-        $src = empty($this->params['src']) ? null : $this->params['src'];\n+        $src = empty($this->params['src']) ? null : expString::escape($this->params['src']);\n         $ealert = $db->selectObject('expeAlerts', 'module=\"'.$this->params['orig_controller'].'\" AND src=\"'.$src.'\"');\n         if (!empty($ealert->autosend_ealerts)) {\n             redirect_to(array('controller'=>'ealert','action'=>'send_auto','model'=>$this->params['model'],'id'=>$this->params['id'], 'src'=>$this->params['src']));\n@@ -69,17 +71,17 @@ public function send_confirm() {\n         // setup the content for the view\n         $subject = $record->title;\n         $body = $record->body;\n-        \n+\n         // figure out how many subscribers there are\n         $number_of_subscribers = $db->countObjects('user_subscriptions', 'expeAlerts_id='.$ealert->id);\n-        \n+\n         assign_to_template(array(\n             'record'=>$record,\n             'number_of_subscribers'=>$number_of_subscribers,\n             'ealert'=>$ealert\n         ));\n     }\n-    \n+\n     public function send_process() {\n         global $db, $router;\n \n@@ -90,22 +92,22 @@ public function send_process() {\n         $obj->body .= '<hr><a href=\"'.$link.'\">'.gt('View posting').'.</a>';\n         $obj->created_at = time();\n         $id = $db->insertObject($obj, 'expeAlerts_temp');\n-        \n+\n         $bot = new expBot(array(\n             'url'=>PATH_RELATIVE.\"index.php?controller=ealert&action=send&id=\".$id.'&ealert_id='.$this->params['id'],\n             'method'=>'POST',\n         ));\n-        \n+\n         $bot->fire();\n         flash('message', gt(\"E-Alerts are being sent to subscribers.\"));\n         expHistory::back();\n     }\n-    \n+\n     public function send_auto() {\n         global $db, $router;\n \n         // find this E-Alert in the database\n-        $src = empty($this->params['src']) ? null : $this->params['src'];\n+        $src = empty($this->params['src']) ? null : expString::escape($this->params['src']);\n         $ealert = $db->selectObject('expeAlerts', 'module=\"'.$this->params['model'].'\" AND src=\"'.$src.'\"');\n \n          // find the content for the E-Alerts\n@@ -136,36 +138,36 @@ public function send_auto() {\n \n     public function send() {\n         global $db, $router;\n-        \n+\n         // get the message body we saved in the temp table\n         $message = $db->selectObject('expeAlerts_temp', 'id='.$this->params['id']);\n-        \n+\n         // look up the subscribers\n         $sql  = 'SELECT s.* FROM '.$db->prefix.'user_subscriptions es ';\n         $sql .= 'LEFT JOIN '.$db->prefix.'user s ON s.id=es.user_id WHERE es.expeAlerts_id='.$this->params['ealert_id'];\n         $subscribers = $db->selectObjectsBySql($sql);\n-        \n+\n         $count = 1;\n         $total = count($subscribers);\n         foreach($subscribers as $subscriber) {\n //            $link = $router->makelink(array('controller'=>'ealert', 'action'=>'subscriptions', 'id'=>$subscriber->id, 'key'=>$subscriber->hash));\n //            $body  = $message->body;\n //            $body .= '<br><a href=\"'.$link.'\">'.gt('Click here to change your E-Alert subscription settings').'.</a>';\n-            \n+\n             $mail = new expMail();\n             $mail->quickSend(array(\n                 'html_message'=>$message->body,\n \t\t        'to'=>array(trim($subscriber->email) => trim(user::getUserAttribution($subscriber->id))),\n                 'from'=>array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n \t\t        'subject'=>$message->subject,\n             ));\n-            \n+\n             $message->edited_at = time();\n             $message->status = 'Sent message '.$count.' of '.$total;\n             $db->updateObject($message, 'expeAlerts_temp');\n             $count++;\n-        } \n-        \n+        }\n+\n         $db->delete('expeAlerts_temp', 'id='.$message->id);\n     }\n \n@@ -201,154 +203,158 @@ public function unsubscribe() {\n     /**\n      * @deprecated\n      */\n-    public function subscriptions() {\n-        global $db;\n-        \n-        expHistory::set('manageable', $this->params);\n-        // make sure we have what we need.\n-        if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));\n-        if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));\n-        \n-        // verify the id/key pair    \n-        $sub = new subscribers($this->params['id']);\n-        if (empty($sub->id)) expQueue::flashAndFlow('error', gt('We could not find any subscriptions matching the ID and Key you provided.'));\n-        \n-        // get this users subscriptions\n-        $subscriptions = $db->selectColumn('expeAlerts_subscribers', 'expeAlerts_id', 'subscribers_id='.$sub->id);\n-        \n-        // get a list of all available E-Alerts\n-        $ealerts = new expeAlerts();\n-        assign_to_template(array(\n-            'subscriber'=>$sub,\n-            'subscriptions'=>$subscriptions,\n-            'ealerts'=>$ealerts->find('all')\n-        ));\n-    }\n-    \n+//    public function subscriptions() {\n+//        global $db;\n+//\n+//        expHistory::set('manageable', $this->params);\n+//        // make sure we have what we need.\n+//        if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));\n+//        if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));\n+//\n+//        // verify the id/key pair\n+//        $sub = new subscribers($this->params['id']);\n+//        if (empty($sub->id)) expQueue::flashAndFlow('error', gt('We could not find any subscriptions matching the ID and Key you provided.'));\n+//\n+//        // get this users subscriptions\n+//        $subscriptions = $db->selectColumn('expeAlerts_subscribers', 'expeAlerts_id', 'subscribers_id='.$sub->id);\n+//\n+//        // get a list of all available E-Alerts\n+//        $ealerts = new expeAlerts();\n+//        assign_to_template(array(\n+//            'subscriber'=>$sub,\n+//            'subscriptions'=>$subscriptions,\n+//            'ealerts'=>$ealerts->find('all')\n+//        ));\n+//    }\n+\n     /**\n      * @deprecated\n      */\n-    public function subscription_update() {\n-        global $db;\n-        \n-        // make sure we have what we need.\n-        if (empty($this->params['email'])) expQueue::flashAndFlow('error', gt('You must supply an email address to sign up for email alerts.'));\n-        if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));\n-        if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));\n-        \n-        // find the subscriber and validate the security key\n-        $subscriber = new subscribers($this->params['id']);\n-        if ($subscriber->hash != $this->params['key']) expQueue::flashAndFlow('error', gt('The security key you supplied does not match the one we have on file.'));\n-        \n-        // delete any old subscriptions and add the user to new subscriptions\n-        $db->delete('expeAlerts_subscribers', 'subscribers_id='.$subscriber->id);\n-        foreach($this->params['ealerts'] as $ea_id) {\n-            $obj = new stdClass();\n-            $obj->subscribers_id = $subscriber->id;\n-            $obj->expeAlerts_id = $ea_id;\n-            $db->insertObject($obj, 'expeAlerts_subscribers');\n-        }\n-        \n-        $count = count($this->params['ealerts']);\n-        \n-        if ($count > 0) {\n-            flash('message', gt(\"Your subscriptions have been updated.  You are now subscriber to\").\" \".$count.' '.gt('E-Alerts.'));\n-        } else {\n-            flash('error', gt(\"You have been unsubscribed from all E-Alerts.\"));\n-        }\n-        \n-        expHistory::back();\n-    }\n-    \n+//    public function subscription_update() {\n+//        global $db;\n+//\n+//        // make sure we have what we need.\n+//        if (empty($this->params['email'])) expQueue::flashAndFlow('error', gt('You must supply an email address to sign up for email alerts.'));\n+//        if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));\n+//        if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));\n+//\n+//        // find the subscriber and validate the security key\n+//        $subscriber = new subscribers($this->params['id']);\n+//        if ($subscriber->hash != $this->params['key']) expQueue::flashAndFlow('error', gt('The security key you supplied does not match the one we have on file.'));\n+//\n+//        // delete any old subscriptions and add the user to new subscriptions\n+//        $db->delete('expeAlerts_subscribers', 'subscribers_id='.$subscriber->id);\n+//        foreach($this->params['ealerts'] as $ea_id) {\n+//            $obj = new stdClass();\n+//            $obj->subscribers_id = $subscriber->id;\n+//            $obj->expeAlerts_id = $ea_id;\n+//            $db->insertObject($obj, 'expeAlerts_subscribers');\n+//        }\n+//\n+//        $count = count($this->params['ealerts']);\n+//\n+//        if ($count > 0) {\n+//            flash('message', gt(\"Your subscriptions have been updated.  You are now subscriber to\").\" \".$count.' '.gt('E-Alerts.'));\n+//        } else {\n+//            flash('error', gt(\"You have been unsubscribed from all E-Alerts.\"));\n+//        }\n+//\n+//        expHistory::back();\n+//    }\n+\n     /**\n      * @deprecated\n      */\n-    public function signup() {\n-        global $db;\n-        // check the anti-spam control\n-        expValidator::check_antispam($this->params, gt(\"Anti-spam verification failed.  Please try again.\"));\n-        \n-        // make sure we have what we need.\n-        if (empty($this->params['email'])) expQueue::flashAndFlow('error', gt('You must supply an email address to sign up for email alerts.'));\n-        if (empty($this->params['ealerts'])) expQueue::flashAndFlow('error', gt('You did not select any E-Alert topics to subscribe to.'));\n-        \n-        // find or create the subscriber\n-        $id = $db->selectValue('subscribers', 'id', 'email=\"'.$this->params['email'].'\"');\n-        $subscriber = new subscribers($id);\n-        if (empty($subscriber->id)) {\n-            $subscriber->email = trim($this->params['email']);\n-            $subscriber->hash = md5($subscriber->email.time());\n-            $subscriber->save();\n-        }\n-        \n-        // delete any old subscriptions and add the user to new subscriptions\n-        $db->delete('expeAlerts_subscribers', 'subscribers_id='.$subscriber->id);\n-        foreach($this->params['ealerts'] as $ea_id) {\n-            $obj = new stdClass();\n-            $obj->subscribers_id = $subscriber->id;\n-            $obj->expeAlerts_id = $ea_id;\n-            $db->insertObject($obj, 'expeAlerts_subscribers');\n-        }\n-  \n-        // send a confirmation email to the user.    \n-        $ealerts = $db->selectObjects('expeAlerts', 'id IN ('.implode(',', $this->params['ealerts']).')');\n-        $body = expTemplate::get_template_for_action($this, 'email/confirmation_email', $this->loc);\n-        $body->assign('ealerts', $ealerts);\n-        $body->assign('subscriber', $subscriber);\n-        \n-        $mail = new expMail();\n-        $mail->quickSend(array(\n-                'html_message'=>$body->render(),\n-\t\t        'to'=>$subscriber->email,\n-                'from'=>array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n-\t\t        'subject'=>gt('Please confirm your E-Alert subscriptions'),\n-        ));\n-        \n-        redirect_to(array('controller'=>'ealert', 'action'=>'pending', 'id'=>$subscriber->id));\n-    }\n-    \n+//    public function signup() {\n+//        global $db;\n+//        // check the anti-spam control\n+//        expValidator::check_antispam($this->params, gt(\"Anti-spam verification failed.  Please try again.\"));\n+//\n+//        // make sure we have what we need.\n+//        if (empty($this->params['email'])) expQueue::flashAndFlow('error', gt('You must supply an email address to sign up for email alerts.'));\n+//        if (empty($this->params['ealerts'])) expQueue::flashAndFlow('error', gt('You did not select any E-Alert topics to subscribe to.'));\n+//\n+//        // find or create the subscriber\n+//        $id = $db->selectValue('subscribers', 'id', 'email=\"'.$this->params['email'].'\"');\n+//        $subscriber = new subscribers($id);\n+//        if (empty($subscriber->id)) {\n+//            $subscriber->email = trim($this->params['email']);\n+//            $subscriber->hash = md5($subscriber->email.time());\n+//            $subscriber->save();\n+//        }\n+//\n+//        // delete any old subscriptions and add the user to new subscriptions\n+//        $db->delete('expeAlerts_subscribers', 'subscribers_id='.$subscriber->id);\n+//        foreach($this->params['ealerts'] as $ea_id) {\n+//            $obj = new stdClass();\n+//            $obj->subscribers_id = $subscriber->id;\n+//            $obj->expeAlerts_id = $ea_id;\n+//            $db->insertObject($obj, 'expeAlerts_subscribers');\n+//        }\n+//\n+//        // send a confirmation email to the user.\n+//        $ealerts = $db->selectObjects('expeAlerts', 'id IN ('.implode(',', $this->params['ealerts']).')');\n+//        $body = expTemplate::get_template_for_action($this, 'email/confirmation_email', $this->loc);\n+//        $body->assign('ealerts', $ealerts);\n+//        $body->assign('subscriber', $subscriber);\n+//\n+//        $mail = new expMail();\n+//        $mail->quickSend(array(\n+//                'html_message'=>$body->render(),\n+//\t\t        'to'=>$subscriber->email,\n+//                'from'=>array(trim(SMTP_FROMADDRESS) => trim(ORGANIZATION_NAME)),\n+//\t\t        'subject'=>gt('Please confirm your E-Alert subscriptions'),\n+//        ));\n+//\n+//        redirect_to(array('controller'=>'ealert', 'action'=>'pending', 'id'=>$subscriber->id));\n+//    }\n+\n     /**\n      * @deprecated\n      */\n-    public function pending() {\n+//    public function pending() {\n+////        global $db;\n+//\n+//        // make sure we have what we need.\n+//        if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('Your subscriber ID was not supplied.'));\n+//\n+//        // find the subscriber and their pending subscriptions\n+//        $ealerts = expeAlerts::getPendingBySubscriber($this->params['id']);\n+//        $subscriber = new subscribers($this->params['id']);\n+//\n+//        // render the template\n+//        assign_to_template(array(\n+//            'subscriber'=>$subscriber,\n+//            'ealerts'=>$ealerts\n+//        ));\n+//    }\n+\n+    /**\n+     * @deprecated\n+     */\n+//    public function confirm() {\n //        global $db;\n-        \n-        // make sure we have what we need.\n-        if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('Your subscriber ID was not supplied.'));\n+//\n+//        // make sure we have what we need.\n+//        if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));\n+//        if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));\n+//\n+//        // verify the id/key pair\n+//        $id = $db->selectValue('subscribers','id', 'id='.$this->params['id'].' AND hash=\"'.$this->params['key'].'\"');\n+//        if (empty($id)) expQueue::flashAndFlow('error', gt('We could not find any subscriptions matching the ID and Key you provided.'));\n+//\n+//        // activate this users pending subscriptions\n+//        $sub = new stdClass();\n+//        $sub->enabled = 1;\n+//        $db->updateObject($sub, 'expeAlerts_subscribers', 'subscribers_id='.$id);\n+//\n+//        // find the users active subscriptions\n+//        $ealerts = expeAlerts::getBySubscriber($id);\n+//        assign_to_template(array(\n+//            'ealerts'=>$ealerts\n+//        ));\n+//    }\n \n-        // find the subscriber and their pending subscriptions\n-        $ealerts = expeAlerts::getPendingBySubscriber($this->params['id']);\n-        $subscriber = new subscribers($this->params['id']);\n-        \n-        // render the template\n-        assign_to_template(array(\n-            'subscriber'=>$subscriber,\n-            'ealerts'=>$ealerts\n-        ));\n-    }\n-    \n-    public function confirm() {\n-        global $db;\n-        \n-        // make sure we have what we need.\n-        if (empty($this->params['key'])) expQueue::flashAndFlow('error', gt('The security key for account was not supplied.'));\n-        if (empty($this->params['id'])) expQueue::flashAndFlow('error', gt('The subscriber id for account was not supplied.'));\n-        \n-        // verify the id/key pair    \n-        $id = $db->selectValue('subscribers','id', 'id='.$this->params['id'].' AND hash=\"'.$this->params['key'].'\"');\n-        if (empty($id)) expQueue::flashAndFlow('error', gt('We could not find any subscriptions matching the ID and Key you provided.'));\n-        \n-        // activate this users pending subscriptions\n-        $sub = new stdClass();\n-        $sub->enabled = 1;\n-        $db->updateObject($sub, 'expeAlerts_subscribers', 'subscribers_id='.$id);\n-        \n-        // find the users active subscriptions\n-        $ealerts = expeAlerts::getBySubscriber($id);\n-        assign_to_template(array(\n-            'ealerts'=>$ealerts\n-        ));\n-    }\n }\n \n ?>\n\\ No newline at end of file"
        },
        {
          "filename": "framework/modules/ecommerce/controllers/billingController.php",
          "status": "modified",
          "additions": 13,
          "deletions": 12,
          "patch": "@@ -22,14 +22,15 @@\n  */\n \n class billingController extends expController {\n-    protected $add_permissions = array(\n-        'activate'=>'Activate Payment Options'\n+    protected $manage_permissions = array(\n+        'select'=>'Select Feature',\n+        'toggle'=>'Toggle Feature',\n     );\n-    \n+\n     static function displayname() { return gt(\"e-Commerce Billing Controller\"); }\n     static function description() { return \"\"; }\n \tstatic function hasSources() { return false; }\n-\t\n+\n \tfunction selectBillingCalculator() {\n \t\t$billing = new billing();\n \t\t$billing->billingmethod->update($this->params);\n@@ -45,12 +46,12 @@ function setAddress() {\n \t}\n \n \tfunction selectBillingOptions() {\n-\t\t\n+\n \t}\n-\t\n+\n \tfunction manage() {\n \t    global $db;\n-\t    \n+\n \t    expHistory::set('manageable', $this->params);\n //\t    $classes = array();\n         $dir = BASE.\"framework/modules/ecommerce/billingcalculators\";\n@@ -68,7 +69,7 @@ function manage() {\n                             $obj = new billingcalculator(array(\n                                 'title'=>$calcobj->name(),\n //                                'user_title'=>$calcobj->title,\n-                                'body'=>$calcobj->description(), \n+                                'body'=>$calcobj->description(),\n                                 'calculator_name'=>$classname,\n                                 'enabled'=>false));\n                             $obj->save();\n@@ -77,15 +78,15 @@ function manage() {\n                 }\n             }\n         }\n-        \n+\n         $bcalc = new billingcalculator();\n         $calculators = $bcalc->find('all');\n         assign_to_template(array(\n             'calculators'=>$calculators\n         ));\n \t}\n-\t\n-\tpublic function activate(){\t\n+\n+\tpublic function activate(){\n \t    if (isset($this->params['id'])) {\n \t        $calc = new billingcalculator($this->params['id']);\n \t        $calc->update($this->params);\n@@ -121,7 +122,7 @@ public function configure() {\n             'title'=>static::displayname()\n         ));\n     }\n-    \n+\n     public function saveconfig() {\n         $calc = new billingcalculator($this->params['id']);\n         $conf = serialize($calc->calculator->parseConfig($this->params));"
        },
        {
          "filename": "framework/modules/ecommerce/controllers/ecomconfigController.php",
          "status": "modified",
          "additions": 63,
          "deletions": 60,
          "patch": "@@ -26,101 +26,104 @@ class ecomconfigController extends expController {\n     protected $add_permissions = array(\n         'show'=>'View Admin Options'\n     );\n-\t\n+    protected $manage_permissions = array(\n+        'options'=>'Display Options'\n+    );\n+\n     static function displayname() { return gt(\"e-Commerce Configuration Manager\"); }\n     static function description() { return gt(\"Use this module to configure your e-Commerce store\"); }\n     static function hasSources() { return false; }\n \n     function show() {\n         expHistory::set('manageable', $this->params);\n     }\n-    \n+\n     /*****************************************************************/\n     /***************  PRODUCT OPTIONS *******************************/\n     /*****************************************************************/\n     function edit_optiongroup_master() {\n         expHistory::set('editable', $this->params);\n-        \n+\n         $id = isset($this->params['id']) ? $this->params['id'] : null;\n-        $record = new optiongroup_master($id);       \n+        $record = new optiongroup_master($id);\n         assign_to_template(array(\n             'record'=>$record\n         ));\n     }\n-    \n+\n     function update_optiongroup_master() {\n         global $db;\n \n         $id = empty($this->params['id']) ? null : $this->params['id'];\n         $og = new optiongroup_master($id);\n         $oldtitle = $og->title;\n         $og->update($this->params);\n-        \n+\n         // if the title of the master changed we should update the option groups that are already using it.\n         if ($oldtitle != $og->title) {\n             $db->sql('UPDATE '.$db->prefix.'optiongroup SET title=\"'.$og->title.'\" WHERE title=\"'.$oldtitle.'\"');\n         }\n-        \n+\n         expHistory::back();\n     }\n-    \n+\n     function delete_optiongroup_master() {\n         global $db;\n-        \n+\n         $mastergroup = new optiongroup_master($this->params);\n-        \n+\n         // delete all the options for this optiongroup master\n         foreach ($mastergroup->option_master as $masteroption) {\n             $db->delete('option', 'option_master_id='.$masteroption->id);\n             $masteroption->delete();\n         }\n-        \n+\n         // delete the mastergroup\n         $db->delete('optiongroup', 'optiongroup_master_id='.$mastergroup->id);\n         $mastergroup->delete();\n-        \n+\n         expHistory::back();\n     }\n-    \n+\n     function delete_option_master() {\n         global $db;\n \n         $masteroption = new option_master($this->params['id']);\n-        \n+\n         // delete any implementations of this option master\n         $db->delete('option', 'option_master_id='.$masteroption->id);\n         $masteroption->delete('optiongroup_master_id=' . $masteroption->optiongroup_master_id);\n         //eDebug($masteroption);\n         expHistory::back();\n     }\n-    \n+\n     function edit_option_master() {\n         expHistory::set('editable', $this->params);\n-        \n+\n         $params = isset($this->params['id']) ? $this->params['id'] : $this->params;\n-        $record = new option_master($params);      \n+        $record = new option_master($params);\n         assign_to_template(array(\n             'record'=>$record\n         ));\n     }\n-    \n-    function update_option_master() {        \n+\n+    function update_option_master() {\n         global $db;\n \n         $id = empty($this->params['id']) ? null : $this->params['id'];\n         $opt = new option_master($id);\n         $oldtitle = $opt->title;\n-        \n+\n         $opt->update($this->params);\n-        \n+\n         // if the title of the master changed we should update the option groups that are already using it.\n         if ($oldtitle != $opt->title) {\n-            \n+\n         }$db->sql('UPDATE '.$db->prefix.'option SET title=\"'.$opt->title.'\" WHERE option_master_id='.$opt->id);\n-        \n+\n         expHistory::back();\n     }\n-    \n+\n     public function options() {\n         expHistory::set('viewable', $this->params);\n         $optiongroup = new optiongroup_master();\n@@ -129,19 +132,19 @@ public function options() {\n             'optiongroups'=>$optiongroups\n         ));\n     }\n-    \n+\n     function rerank_optionmaster() {\n         $om = new option_master($this->params['id']);\n         $om->rerank($this->params['push'], 'optiongroup_master_id=' . $this->params['master_id']);\n         expHistory::back();\n     }\n-    \n+\n     /*****************************************************************/\n     /***************  DISCOUNTS        *******************************/\n     /*****************************************************************/\n     public function manage_discounts() {\n         expHistory::set('manageable', $this->params);\n-\t\t\n+\n         $page = new expPaginator(array(\n             'model'=>'discounts',\n \t\t\t'sql'=>'SELECT * FROM '.DB_TABLE_PREFIX.'_discounts',\n@@ -158,16 +161,16 @@ public function manage_discounts() {\n             'page'=>$page\n         ));\n     }\n-    \n+\n       public function edit_discount() {\n         $id = empty($this->params['id']) ? null : $this->params['id'];\n         $discount = new discounts($id);\n-        \n+\n         //grab all user groups\n         $group = new group();\n-        \n+\n         //create two 'default' groups:\n-        $groups = array( \n+        $groups = array(\n                 -1 => 'ALL LOGGED IN USERS',\n                 -2 => 'ALL NON-LOGGED IN USERS'\n                 );\n@@ -183,17 +186,17 @@ public function edit_discount() {\n            };\n        }\n        //find our selected groups for this discount already\n-       // eDebug($discount);                        \n+       // eDebug($discount);\n        $selected_groups = array();\n        if (!empty($discount->group_ids))\n        {\n             $selected_groups = expUnserialize($discount->group_ids);\n        }\n-       \n+\n        if ($discount->minimum_order_amount == \"\") $discount->minimum_order_amount = 0;\n        if ($discount->discount_amount == \"\") $discount->discount_amount = 0;\n        if ($discount->discount_percent == \"\") $discount->discount_percent = 0;\n-       \n+\n         // get the shipping options and their methods\n         $shipping_services = array();\n         $shipping_methods = array();\n@@ -205,7 +208,7 @@ public function edit_discount() {\n                 $shipping_methods[$calcid] = $calc->availableMethods();\n             }\n         }\n-        \n+\n        assign_to_template(array(\n            'discount'=>$discount,\n            'groups'=>$groups,\n@@ -214,7 +217,7 @@ public function edit_discount() {\n            'shipping_methods'=>$shipping_methods\n        ));\n     }\n-    \n+\n     public function update_discount() {\n         $id = empty($this->params['id']) ? null : $this->params['id'];\n         $discount = new discounts($id);\n@@ -224,12 +227,12 @@ public function update_discount() {\n         } else {\n             $this->params['required_shipping_calculator_id'] = 0;\n         }\n-        \n+\n         $discount->update($this->params);\n         expHistory::back();\n     }\n-    \n-    public function activate_discount(){    \n+\n+    public function activate_discount(){\n         if (isset($this->params['id'])) {\n             $discount = new discounts($this->params['id']);\n             $discount->update($this->params);\n@@ -238,10 +241,10 @@ public function activate_discount(){\n                 //redirect_to(array('controller'=>'billing', 'action'=>'configure', 'id'=>$discount->id));\n             //}\n         }\n-        \n+\n         expHistory::back();\n     }\n-    \n+\n     /*****************************************************************/\n     /***************  PROMO CODE       *******************************/\n     /*****************************************************************/\n@@ -264,7 +267,7 @@ public function update_promocode() {\n \t    $code->update($this->params);\n \t    expHistory::back();\n \t}\n-\t\n+\n     /*****************************************************************/\n     /***************  GROUP DISCOUNTS  *******************************/\n     /*****************************************************************/\n@@ -289,7 +292,7 @@ public function manage_groupdiscounts() {\n \n \tpublic function update_groupdiscounts() {\n \t    global $db;\n-\t    \n+\n \t    if (empty($this->params['id'])) {\n \t        // look for existing discounts for the same group\n \t        $existing_id = $db->selectValue('groupdiscounts', 'id', 'group_id='.$this->params['group_id']);\n@@ -300,32 +303,32 @@ public function update_groupdiscounts() {\n \t    $gd->update($this->params);\n \t    expHistory::back();\n \t}\n-\t\n+\n \tfunction rerank_groupdiscount() {\n         $gd = new groupdiscounts($this->params['id']);\n         $gd->rerank($this->params['push']);\n         expHistory::back();\n     }\n-    \n+\n     /*****************************************************************/\n     /***************  GENERAL STORE CONFIG  *******************************/\n     /*****************************************************************/\n     function configure() {\n         expHistory::set('editable', $this->params);\n         // little bit of trickery so that that categories can have their own configs\n-        \n+\n         $this->loc->src = \"@globalstoresettings\";\n         $config = new expConfig($this->loc);\n         $this->config = $config->config;\n         $pullable_modules = expModules::listInstalledControllers($this->baseclassname, $this->loc);\n         $views = expTemplate::get_config_templates($this, $this->loc);\n-        \n-        $gc = new geoCountry();             \n+\n+        $gc = new geoCountry();\n         $countries = $gc->find('all');\n-        \n-        $gr = new geoRegion();             \n+\n+        $gr = new geoRegion();\n         $regions = $gr->find('all');\n-        \n+\n         assign_to_template(array(\n             'config'=>$this->config,\n             'pullable_modules'=>$pullable_modules,\n@@ -334,7 +337,7 @@ function configure() {\n             'regions'=>$regions,\n             'title'=>static::displayname()\n         ));\n-    }   \n+    }\n \n     function saveconfig() {\n         $this->params['min_order'] = substr($this->params['min_order'], 1) ;\n@@ -354,29 +357,29 @@ function saveconfig() {\n \t/*****************************************************************/\n     /***************  Upcharge Rate   *******************************/\n     /*****************************************************************/\n-\t\n+\n \t function manage_upcharge() {\n \t\t$this->loc->src = \"@globalstoresettings\";\n         $config = new expConfig($this->loc);\n \t\t$this->config = $config->config;\n \n-\t\t$gc = new geoCountry();             \n+\t\t$gc = new geoCountry();\n         $countries = $gc->find('all');\n-        \n-        $gr = new geoRegion();             \n+\n+        $gr = new geoRegion();\n         $regions = $gr->find('all',null,'rank asc,name asc');\n         assign_to_template(array(\n             'countries'=>$countries,\n             'regions'=>$regions,\n             'upcharge'=>!empty($this->config['upcharge'])?$this->config['upcharge']:''\n         ));\n \t }\n-\t \n+\n \t function update_upcharge() {\n         $this->loc->src = \"@globalstoresettings\";\n         $config = new expConfig($this->loc);\n \t\t$this->config = $config->config;\n-\t\t\n+\n \t\t//This will make sure that only the country or region that given a rate value will be saved in the db\n \t\t$upcharge = array();\n \t\tforeach($this->params['upcharge'] as $key => $item) {\n@@ -385,12 +388,12 @@ function update_upcharge() {\n \t\t\t}\n \t\t}\n \t\t$this->config['upcharge'] = $upcharge;\n-\t\t\n+\n         $config->update(array('config'=>$this->config));\n         flash('message', gt('Configuration updated'));\n         expHistory::back();\n     }\n-\t\n+\n }\n \n ?>\n\\ No newline at end of file"
        },
        {
          "filename": "framework/modules/ecommerce/controllers/eventregistrationController.php",
          "status": "modified",
          "additions": 6,
          "deletions": 7,
          "patch": "@@ -31,14 +31,18 @@ function compare($x, $y) {\n \n class eventregistrationController extends expController {\n     public $basemodel_name = 'eventregistration';\n-\n     public $useractions = array(\n         'showall'     => 'Show all events',\n         'eventsCalendar'                  => 'Calendar View',\n         'upcomingEvents'                  => 'Upcoming Events',\n //        'showByTitle' => \"Show events by title\",\n     );\n-\n+    protected $add_permissions = array(\n+//        'emailRegistrants'=> 'Email Registrants',\n+    );\n+    protected $manage_permissions = array(\n+        'emailRegistrants'=> 'Email Registrants',\n+    );\n     // hide the configs we don't need\n     public $remove_configs = array(\n         'aggregation',\n@@ -52,11 +56,6 @@ class eventregistrationController extends expController {\n         'twitter',\n     );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n \n-    protected $add_permissions = array(\n-        'view_registrants'=> 'View Registrants',\n-        'emailRegistrants'=> 'Email Registrants',\n-    );\n-\n     static function displayname() {\n         return gt(\"e-Commerce Online Event Registration\");\n     }"
        },
        {
          "filename": "framework/modules/ecommerce/controllers/orderController.php",
          "status": "modified",
          "additions": 54,
          "deletions": 52,
          "patch": "@@ -22,30 +22,32 @@\n  */\n \n class orderController extends expController {\n-    protected $add_permissions = array(\n-        'showall'             => 'Manage',\n-        'show'                => 'View Orders',\n-        'setStatus'           => 'Change Status',\n-        'edit_payment_info'   => 'Edit Payment Info',\n+    protected $manage_permissions = array(\n+        'add_order_item'      => 'Add Order Item',\n+        'download'      => 'Download Label',\n+//        'create_new_order'    => 'Create A New Order',\n+//        'createReferenceOrder'=> 'Create Reference Order',\n+//        'edit_address'        => 'Edit Address',\n+//        'edit_invoice_id'     => 'Edit Invoice Id',\n+//        'edit_order_item'     => 'Edit Order Item',\n+//        'edit_payment_info'   => 'Edit Payment Info',\n+//        'edit_shipping_method'=> 'Edit Shipping Method',\n+//        'edit_totals'         => 'Edit Totals',\n+        'email'         => 'Send Email',\n+        'quickfinder'=> 'Do a quick order lookup',\n         'save_payment_info'=> 'Save Payment Info',\n-        'edit_address'        => 'Edit Address',\n         'save_address'=> 'Save Address',\n-        'edit_order_item'     => 'Edit Order Item',\n         'save_order_item'=> 'Save Order Item',\n-        'add_order_item'      => 'Add Order Item',\n-        'save_new_order_item'=> 'Save New Order Item',\n-        'edit_totals'         => 'Edit Totals',\n+//        'save_new_order_item'=> 'Save New Order Item',\n         'save_totals'=> 'Save Totals',\n-        'edit_invoice_id'     => 'Edit Invoice Id',\n         'save_invoice_id'=> 'Save Invoice Id',\n-        'update_sales_reps'   => 'Manage Sales Reps',\n-        'quickfinder'=> 'Do a quick order lookup',\n-        'edit_shipping_method'=> 'Edit Shipping Method',\n         'save_shipping_method'=> 'Save Shipping Method',\n-        'create_new_order'    => 'Create A New Order',\n         'save_new_order'=> 'Save a new order',\n-        'createReferenceOrder'=> 'Create Reference Order',\n-        'save_reference_order'=> 'Save Reference Order'\n+        'save_reference_order'=> 'Save Reference Order',\n+        'set'           => 'Change Status',\n+        'showall'             => 'Manage',\n+        'show'                => 'View Orders',\n+        'update'                => 'update order',\n     );\n \n     static function displayname() {\n@@ -66,21 +68,21 @@ function showall() {\n         for($i=0; $i<$count; $i++) {\n             // get the cart\n             $cart = $db->selectObject('orders','purchased=0');\n-            \n+\n             // check to make sure this isn't an active session\n             $ticket = $db->selectObject('sessionticket', \"ticket='\".$cart->sessionticket_ticket.\"'\");\n             if (empty($ticket)) {\n                 // delete all the order items for this cart and their shippingmethods\n                 foreach($db->selectObjects('orderitems', 'orders_id='.$cart->id) as $oi) {\n                     $db->delete('shippingmethods', 'id='.$oi->shippingmethods_id);\n-                    $db->delete('orderitems', 'orders_id='.$cart->id);    \n+                    $db->delete('orderitems', 'orders_id='.$cart->id);\n                 }\n-                \n+\n                 // delete the billing methods for this cart.\n                 $db->delete('billingmethods', 'orders_id='.$cart->id);\n                 $db->delete('orders', 'id='.$cart->id);\n-            }           \n-            \n+            }\n+\n         } */\n \n         // find orders with a \"closed\" status type\n@@ -247,7 +249,7 @@ function myOrder() {\n         //check here for the hash in the params, or session set w/ perms to view...shs = xaf7y0s87d7elshd70 etc\n         //if present, prompt user for the order number and email address on the order\n         //and if they pass, show the order to them. Need to maybe set something in the session then for subsequent\n-        //viewing of the order?        \n+        //viewing of the order?\n         if ($user->id != $order->user_id) {\n             if ($user->isAdmin()) {\n                 redirect_to(array('controller'=> 'order', 'action'=> 'show', 'id'=> $this->params['id']));\n@@ -415,7 +417,7 @@ function getPDF($orders = null) {\n             foreach ($orders as $order) {\n                 if ($user->isAdmin()) {\n                     $invoice .= renderAction(array('controller'=> 'order', 'action'=> 'show', 'view'=> 'show_printable', 'id'=> $order['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n-                    //eDebug($order['id'] . \": \" . $timer->mark());                        \n+                    //eDebug($order['id'] . \": \" . $timer->mark());\n                 } else {\n                     $invoice .= renderAction(array('controller'=> 'order', 'action'=> 'myOrder', 'view'=> 'show_printable', 'id'=> $order['id'], 'printerfriendly'=> '1', 'no_output'=> 'true'));\n                 }\n@@ -550,7 +552,7 @@ function getPDF($orders = null) {\n // END OF FILE\n //============================================================+\n \n-            \n+\n             // create new PDF document\n             $pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);\n \n@@ -878,7 +880,7 @@ function emailCustomer() {\n //            $db->insertObject($noteObj, 'content_expSimpleNote');\n             $note->attachNote('order', $order->id);\n \n-            //eDebug($note,true);            \n+            //eDebug($note,true);\n         } else {\n             flash('error', gt('The email was NOT sent. An email address was not found for this customer'));\n             expHistory::back();\n@@ -920,7 +922,7 @@ function metainfo() {\n \n         if (empty($router->params['action'])) return false;\n \n-        // figure out what metadata to pass back based on the action \n+        // figure out what metadata to pass back based on the action\n         // we are in.\n         $action   = $router->params['action'];\n         $metainfo = array('title'=>'', 'keywords'=>'', 'description'=>'', 'canonical'=> '', 'noindex' => true, 'nofollow' => true);\n@@ -957,7 +959,7 @@ function metainfo() {\n     function captureAuthorization() {\n         //eDebug($this->params,true);\n         $order = new order($this->params['id']);\n-        /*eDebug($this->params); \n+        /*eDebug($this->params);\n         //eDebug($order,true);*/\n         //eDebug($order,true);\n         //$billing = new billing();\n@@ -1293,7 +1295,7 @@ function save_reference_order() {\n \n         //eDebug($this->params,true);\n         $order = new order($this->params['original_orderid']);\n-        //eDebug($order,true); \n+        //eDebug($order,true);\n         //x\n         $newOrder                  = new order();\n         $newOrder->order_status_id = $this->params['order_status_id'];\n@@ -1348,8 +1350,8 @@ function save_reference_order() {\n         $newBillingMethod->billing_options      = serialize($tObj);\n         $newBillingMethod->save();\n \n-        //eDebug(expUnserialize($order->billingmethod[0]->billing_options));        \n-        //eDebug(expUnserialize($order->billingmethod[0]->billingtransaction[0]->billing_options),true); \n+        //eDebug(expUnserialize($order->billingmethod[0]->billing_options));\n+        //eDebug(expUnserialize($order->billingmethod[0]->billingtransaction[0]->billing_options),true);\n \n         $newBillingTransaction                       = new billingtransaction();\n //        $newBillingTransaction->billingcalculator_id = 6; ///setting to manual/passthru\n@@ -1377,7 +1379,7 @@ function save_reference_order() {\n             $newOi->products_name           = $this->params['products_name'][$oikey];\n             $newOi->products_price          = $this->params['products_price'][$oikey];\n             $newOi->products_price_adjusted = $this->params['products_price'][$oikey];\n-            //$newOi->products_tax = 0;        \n+            //$newOi->products_tax = 0;\n             $newOi->shippingmethods_id = $newShippingMethod->id;\n             $newOi->save();\n         }\n@@ -1406,7 +1408,7 @@ function save_new_order() {\n //        global $user, $db;\n         //eDebug($this->params,true);\n         //$order = new order($this->params['original_orderid']);\n-        //eDebug($order,true); \n+        //eDebug($order,true);\n \n         $newAddy = new address();\n         if ($this->params['customer_type'] == 1) {\n@@ -1490,8 +1492,8 @@ function save_new_order() {\n         $newBillingMethod->email                = $newAddy->email;\n         $newBillingMethod->save();\n \n-        //eDebug(expUnserialize($order->billingmethod[0]->billing_options));        \n-        //eDebug(expUnserialize($order->billingmethod[0]->billingtransaction[0]->billing_options),true); \n+        //eDebug(expUnserialize($order->billingmethod[0]->billing_options));\n+        //eDebug(expUnserialize($order->billingmethod[0]->billingtransaction[0]->billing_options),true);\n \n         $newBillingTransaction                       = new billingtransaction();\n //        $newBillingTransaction->billingcalculator_id = 6; ///setting to manual/passthru\n@@ -1666,7 +1668,7 @@ function edit_order_item() {\n         $oi->product           = new product($oi->product->id, true, true);\n         if ($oi->product->parent_id != 0) {\n             $parProd = new product($oi->product->parent_id);\n-            //$oi->product->optiongroup = $parProd->optiongroup;   \n+            //$oi->product->optiongroup = $parProd->optiongroup;\n             $oi->product = $parProd;\n         }\n         //FIXME we don't use selectedOpts?\n@@ -1776,20 +1778,20 @@ function save_order_item() {\n         //$this->user_input_fields = expUnserialize($this->user_input_fields);\n         //eDebug($this,true);\n         if (!empty($oi->product->user_input_fields)) foreach ($oi->product->user_input_fields as $uifkey=> $uif) {\n-            /*if ($uif['is_required'] || (!$uif['is_required'] && strlen($params['user_input_fields'][$uifkey]) > 0)) \n+            /*if ($uif['is_required'] || (!$uif['is_required'] && strlen($params['user_input_fields'][$uifkey]) > 0))\n             {\n                 if (strlen($params['user_input_fields'][$uifkey]) < $uif['min_length'])\n                 {\n-                    //flash('error', 'test');    \n-                    //redirect_to(array('controller'=>cart, 'action'=>'displayForm', 'form'=>'addToCart', 'product_id'=>$this->id, 'product_type'=>$this->product_type));  \n+                    //flash('error', 'test');\n+                    //redirect_to(array('controller'=>cart, 'action'=>'displayForm', 'form'=>'addToCart', 'product_id'=>$this->id, 'product_type'=>$this->product_type));\n                     $params['error'] .= $uif['name'].' field has a minimum requirement of ' . $uif['min_length'] . ' characters.<br/>';\n-                    \n+\n                 }else if (strlen($params['user_input_fields'][$uifkey]) > $uif['max_length'] && $uif['max_length'] > 0)\n                 {\n-                    //flash('error', );    \n-                    //redirect_to(array('controller'=>cart, 'action'=>'displayForm', 'form'=>'addToCart', 'product_id'=>$this->id, 'product_type'=>$this->product_type));      \n+                    //flash('error', );\n+                    //redirect_to(array('controller'=>cart, 'action'=>'displayForm', 'form'=>'addToCart', 'product_id'=>$this->id, 'product_type'=>$this->product_type));\n                     $params['error'] .= $uif['name'].' field has a maximum requirement of ' . $uif['max_length'] . ' characters.<br/>';\n-                } \n+                }\n             }*/\n             $user_input_info[] = array($uif['name']=> $this->params['user_input_fields'][$uifkey]);\n         }\n@@ -1798,7 +1800,7 @@ function save_order_item() {\n \n         $oi->options           = serialize($options);\n         $oi->user_input_fields = serialize($user_input_info);\n-        //eDebug($oi);        \n+        //eDebug($oi);\n         $oi->save();\n         $oi->refresh();\n         //eDebug($oi,true);\n@@ -1856,7 +1858,7 @@ function save_new_order_item() {  //FIXME we need to be able to call this from p\n         $order = new order($this->params['orderid']);\n         if (isset($this->params['prod-quantity'])) {\n             //we are adding multiple children, so we approach a bit different\n-            //we'll send over the product_id of the parent, along with id's and quantities of children we're adding \n+            //we'll send over the product_id of the parent, along with id's and quantities of children we're adding\n             foreach ($this->params['prod-quantity'] as $qkey=> &$quantity) {\n                 if (in_array($qkey, $this->params['prod-check'])) {\n                     $this->params['children'][$qkey] = $quantity;\n@@ -2007,14 +2009,14 @@ function quickfinder() {\n         /*$o = new order();\n         $b = new billingmethod();\n         $s = new shippingmethod();\n-        \n+\n         $search = intval($this->params['ordernum']);\n         if (is_int($oid) && $oid > 0)\n         {\n             $orders = $o->find('all',\"invoice_id LIKE '%\".$oid.\"%'\");\n             if(count($orders == 1))\n             {\n-                redirect_to(array('controller'=>'order','action'=>'show','id'=>$order[0]->id));            \n+                redirect_to(array('controller'=>'order','action'=>'show','id'=>$order[0]->id));\n             }\n             else\n             {\n@@ -2033,7 +2035,7 @@ function quickfinder() {\n             $order = $o->find('first','invoice_id='.$oid);\n             if(!empty($order->id))\n             {\n-                redirect_to(array('controller'=>'order','action'=>'show','id'=>$order->id));            \n+                redirect_to(array('controller'=>'order','action'=>'show','id'=>$order->id));\n             }\n             else\n             {\n@@ -2042,7 +2044,7 @@ function quickfinder() {\n         }\n         else\n         {\n-            flashAndFlow('message','Invalid order number.');        \n+            flashAndFlow('message','Invalid order number.');\n         }*/\n     }\n \n@@ -2071,7 +2073,7 @@ public function verifyAndRestoreCart() {\n         if (isset($sessAr) && isset($this->params['cid']) && $this->params['cid'] == $sessAr['cid']) {\n             $tmpCart = new order($sessAr['cid']);\n             if (isset($tmpCart->id)) {\n-                //eDebug($tmpCart,true); \n+                //eDebug($tmpCart,true);\n                 $shippingMethod = $tmpCart->shippingmethod;\n                 $billingMethod  = $tmpCart->billingmethod[0];\n \n@@ -2125,7 +2127,7 @@ public function search() {\n         global $db;\n \n         $sql = \"select DISTINCT(a.id) as id, a.firstname as firstname, a.middlename as middlename, a.lastname as lastname, a.organization as organization, a.email as email \";\n-        $sql .= \"from \" . $db->prefix . \"addresses as a \"; //R JOIN \" . \n+        $sql .= \"from \" . $db->prefix . \"addresses as a \"; //R JOIN \" .\n         //$db->prefix . \"billingmethods as bm ON bm.addresses_id=a.id \";\n         $sql .= \" WHERE match (a.firstname,a.lastname,a.email,a.organization) against ('\" . $this->params['query'] .\n             \"*' IN BOOLEAN MODE) \";\n@@ -2148,7 +2150,7 @@ public function search_external() {\n         global $db;\n \n         $sql = \"select DISTINCT(a.id) as id, a.source as source, a.firstname as firstname, a.middlename as middlename, a.lastname as lastname, a.organization as organization, a.email as email \";\n-        $sql .= \"from \" . $db->prefix . \"external_addresses as a \"; //R JOIN \" . \n+        $sql .= \"from \" . $db->prefix . \"external_addresses as a \"; //R JOIN \" .\n         //$db->prefix . \"billingmethods as bm ON bm.addresses_id=a.id \";\n         $sql .= \" WHERE match (a.firstname,a.lastname,a.email,a.organization) against ('\" . $this->params['query'] .\n             \"*' IN BOOLEAN MODE) \";"
        },
        {
          "filename": "framework/modules/ecommerce/controllers/order_statusController.php",
          "status": "modified",
          "additions": 15,
          "deletions": 12,
          "patch": "@@ -22,14 +22,17 @@\n  */\n \n class order_statusController extends expController {\n+    protected $manage_permissions = array(\n+        'toggle'=>'Toggle Status'\n+    );\n     static function displayname() { return gt(\"e-Commerce Order Statuses\"); }\n     static function description() { return gt(\"Manage e-Commerce order status codes\"); }\n     static function hasSources() { return false; }\n     static function hasContent() { return false; }\n-    \n+\n     public function manage() {\n         expHistory::set('viewable', $this->params);\n-        \n+\n         $page = new expPaginator(array(\n \t\t\t'model'=>'order_status',\n \t\t\t'where'=>1,\n@@ -45,10 +48,10 @@ public function manage() {\n             'page'=>$page\n         ));\n     }\n-    \n+\n     public function manage_messages() {\n         expHistory::set('manageable', $this->params);\n-        \n+\n         $page = new expPaginator(array(\n \t\t\t'model'=>'order_status_messages',\n \t\t\t'where'=>1,\n@@ -65,7 +68,7 @@ public function manage_messages() {\n             'page'=>$page\n         ));\n     }\n-    \n+\n     public function edit_message() {\n         $id = isset($this->params['id']) ? $this->params['id'] : null;\n         $msg = new order_status_messages($id);\n@@ -74,46 +77,46 @@ public function edit_message() {\n         ));\n         //$msg->update($this->params);\n     }\n-    \n+\n     public function update_message() {\n         $id = isset($this->params['id']) ? $this->params['id'] : null;\n         $msg = new order_status_messages($id);\n         $msg->update($this->params);\n         expHistory::back();\n     }\n-    \n+\n     public function delete_message() {\n         if (empty($this->params['id'])) return false;\n         $msg = new order_status_messages($this->params['id']);\n         $msg->delete();\n         expHistory::back();\n     }\n-    \n+\n     public function toggle_closed() {\n         global $db;\n \n         $db->toggle('order_status', 'treat_as_closed', 'id='.$this->params['id']);\n         expHistory::back();\n     }\n-    \n+\n     public function toggle_default() {\n         global $db;\n \n         $order_status = new order_status($this->params['id']);\n         $db->setUniqueFlag($order_status, 'order_status', 'is_default');\n         expHistory::back();\n     }\n-    \n+\n     public function showall() {\n         redirect_to(array('controller'=>'order_status', 'action'=>'manage'));\n //        $this->manage();\n     }\n-    \n+\n     public function show() {\n         redirect_to(array('controller'=>'order_status', 'action'=>'manage'));\n //        $this->manage();\n     }\n-    \n+\n }\n \n ?>\n\\ No newline at end of file"
        },
        {
          "filename": "framework/modules/ecommerce/controllers/purchaseOrderController.php",
          "status": "modified",
          "additions": 21,
          "deletions": 28,
          "patch": "@@ -22,59 +22,52 @@\n  */\n \n class purchaseOrderController extends expController {\n-\n \tpublic $basemodel_name = 'purchase_order';\n-\tprotected $add_permissions = array(\n-        'manage'=>'Manage Purchase Orders',\n-        'edit'=>'Edit Purchase Orders',\n-        'manage_vendors'=>'Manage Vendors',\n+\tprotected $manage_permissions = array(\n         'show_vendor'=>'Show Vendor Details',\n-        'edit_vendor'=>'Edit Vendor',\n-        'update_vendor'=>'Update Vendor',\n-        'delete_vendor'=>'Delete vendors',\n     );\n-\t\n+\n     static function displayname() { return gt(\"e-Commerce Purchase Order Manager\"); }\n     static function description() { return gt(\"Use this module to create and manage purchase orders for your ecommerce store.\"); }\n-\t\n+\n \tfunction manage () {\n \t    expHistory::set('viewable', $this->params);\n-\t\t\n+\n \t\t$vendor = new vendor();\n \t\t$vendors = $vendor->find('all');\n \t\tif(!empty($this->params['vendor'])) {\n \t\t\t$purchase_orders = $this->purchase_order->find('all', 'vendor_id=' . $this->params['vendor']);\n \t\t} else {\n \t\t\t$purchase_orders = $this->purchase_order->find('all');\n \t\t}\n-\t\t\n+\n \t\tassign_to_template(array(\n             'purchase_orders'=>$purchase_orders,\n             'vendors' => $vendors,\n             'vendor_id' => @$this->params['vendor']\n         ));\n \t}\n-\t\n+\n \tfunction edit () {\n //\t    global $db;\n \t    assign_to_template(array(\n             'record'=>$this->params\n         ));\n \t}\n-    \n+\n \tfunction manage_vendors () {\n \t    expHistory::set('viewable', $this->params);\n \t\t$vendor = new vendor();\n-\t\t\n+\n \t\t$vendors = $vendor->find('all');\n \t\tassign_to_template(array(\n             'vendors'=>$vendors\n         ));\n \t}\n-\t\n+\n \tfunction show_vendor () {\n \t\t$vendor = new vendor();\n-\t\t\n+\n \t\tif(isset($this->params['id'])) {\n \t\t\t$vendor = $vendor->find('first', 'id =' .$this->params['id']);\n \t\t\t$vendor_title = $vendor->title;\n@@ -88,52 +81,52 @@ function show_vendor () {\n                 $vendor->classname,\n                 $vendor->identifier\n             );\n-\t\t\n+\n \t\t\tassign_to_template(array(\n                 'vendor_title' => $vendor_title,\n                 'vendor'=>$vendor\n             ));\n \t\t}\n \t}\n-\t\n+\n \tfunction edit_vendor() {\n \t\t$vendor = new vendor();\n-\t\t\n+\n \t\tif(isset($this->params['id'])) {\n \t\t\t$vendor = $vendor->find('first', 'id =' .$this->params['id']);\n \t\t\tassign_to_template(array(\n                 'vendor'=>$vendor\n             ));\n \t\t}\n \t}\n-\t\n+\n \tfunction update_vendor() {\n \t\t$vendor = new vendor();\n-\t\t\n+\n \t\t$vendor->update($this->params['vendor']);\n         expHistory::back();\n     }\n-\t\n+\n \tfunction delete_vendor() {\n \t\tglobal $db;\n-\t\t\n+\n         if (!empty($this->params['id'])){\n \t\t\t$db->delete('vendor', 'id =' .$this->params['id']);\n \t\t}\n         expHistory::back();\n     }\n-\t\n+\n \tpublic function getPurchaseOrderByJSON() {\n-\t\t\n+\n \t\tif(!empty($this->params['vendor'])) {\n \t\t\t$purchase_orders = $this->purchase_order->find('all', 'vendor_id=' . $this->params['vendor']);\n \t\t} else {\n \t\t\t$purchase_orders = $this->purchase_order->find('all');\n \t\t}\n-\t\t\n+\n \t\techo json_encode($purchase_orders);\n \t}\n-    \n+\n }\n \n ?>\n\\ No newline at end of file"
        },
        {
          "filename": "framework/modules/ecommerce/controllers/shippingController.php",
          "status": "modified",
          "additions": 31,
          "deletions": 28,
          "patch": "@@ -22,8 +22,11 @@\n  */\n \n class shippingController extends expController {\n-    protected $add_permissions = array(\n-        'toggle'=>'Enable/Disable Options'\n+    protected $manage_permissions = array(\n+        'editspeed'=>'Edit Shipping Speed',\n+        'save'=>'Save Configuration',\n+        'select'=>'Select Feature',\n+        'toggle'=>'Enable/Disable Options',\n     );\n \n     static function displayname() { return gt(\"e-Commerce Shipping Controller\"); }\n@@ -38,16 +41,16 @@ function selectShippingCalculator() {\n \t    global $db;\n \n \t\t$shipping = new shipping();\n-\t\t\n+\n \t\t// update the shippingmethod\n \t\t$shipping->shippingmethod->update(array('shippingcalculator_id'=>$this->params['shippingcalculator_id'],'option'=>null,'option_title'=>null));\n-\t\t\n+\n \t\t// fetch the calculator\n \t\t$calcname = $db->selectValue('shippingcalculator', 'calculator_name', 'id='.$this->params['shippingcalculator_id']);\n \t\t//eDebug($this->params['shippingcalculator_id']);\n \t\t//eDebug($calcname);\n \t\t$shipping->calculator = new $calcname($this->params['shippingcalculator_id']);\n-\t\t\n+\n \t\t$ar = new expAjaxReply(200, 'ok', $shipping, array('controller'=>'cart', 'action'=>'checkout'),true);\n \t\t$ar->send();\n \t}\n@@ -77,26 +80,26 @@ function setAddress() {\n \t\t$ar = new expAjaxReply(200, 'ok', new address($shipping->shippingmethod->addresses_id), array('controller'=>'cart', 'action'=>'checkout'),true);\n \t\t$ar->send();\n \t}\n-\t\n+\n     /**\n      * Ajax method to set a shipping 'gift' message\n      */\n \tfunction leaveMessage() {\n \t\tif (!empty($this->params['shippingmessageid'])) {\n \t\t    $sm = new shippingmethod($this->params['shippingmessageid']);\n-\t\t    \n+\n \t\t    if ($this->params['nosave'] == false) {\n-\t\t        $sm->to = empty($this->params['shpmessageto']) ? null : $this->params['shpmessageto'];   \n-\t\t        $sm->from = empty($this->params['shpmessagefrom']) ? null : $this->params['shpmessagefrom']; \n-\t\t        $sm->message = empty($this->params['shpmessage']) ? null : $this->params['shpmessage']; \n+\t\t        $sm->to = empty($this->params['shpmessageto']) ? null : $this->params['shpmessageto'];\n+\t\t        $sm->from = empty($this->params['shpmessagefrom']) ? null : $this->params['shpmessagefrom'];\n+\t\t        $sm->message = empty($this->params['shpmessage']) ? null : $this->params['shpmessage'];\n \t\t        $sm->save();\n \t\t    }\n \t\t}\n-\t\t\n+\n \t\t$ar = new expAjaxReply(200, 'ok', $sm, array('controller'=>'cart', 'action'=>'checkout'),true);\n-\t\t$ar->send();\t\t\n+\t\t$ar->send();\n \t}\n-\t\n+\n \tfunction renderOptions() {  //FIXME do we ever call this?\n //\t    global $db, $order;\n         global $order; //FIXME we do NOT want the global $order\n@@ -119,15 +122,15 @@ function renderOptions() {  //FIXME do we ever call this?\n                 $opt = $shipping->pricelist[$shipping->shippingmethod->option];\n             }\n         }\n-        \n+\n         $shipping->shippingmethod->update(array('option'=>$opt['id'],'option_title'=>$opt['title'],'shipping_cost'=>$opt['cost']));\n-        \n+\n         assign_to_template(array(\n             'shipping'=>$shipping,\n             'order'=>$order\n         ));\n \t}\n-\t\n+\n     /**\n      * Ajax method to return a shipping calculator object within a shipping object\n      */\n@@ -136,10 +139,10 @@ function listPrices() {\n \t    $ar = new expAjaxReply(200, 'ok', $shipping->listPrices(), array('controller'=>'cart', 'action'=>'checkout'),true);\n \t\t$ar->send();\n \t}\n-\t\n+\n \tfunction manage() {\n \t    global $db;\n-\t    \n+\n \t    expHistory::set('manageable', $this->params);\n \t    $calculators = array();\n         $dir = BASE.\"framework/modules/ecommerce/shippingcalculators\";\n@@ -151,10 +154,10 @@ function manage() {\n                 if (is_file(\"$dir/$file\") && substr(\"$dir/$file\", -4) == \".php\") {\n                     include_once(\"$dir/$file\");\n                     $classname = substr($file, 0, -4);\n-                    $id = $db->selectValue('shippingcalculator', 'id', 'calculator_name=\"'.$classname.'\"');                    \n+                    $id = $db->selectValue('shippingcalculator', 'id', 'calculator_name=\"'.$classname.'\"');\n                     if (empty($id)) {\n                         $calcobj = new $classname($this->params);\n-                        if ($calcobj->isSelectable() == true) {                            \n+                        if ($calcobj->isSelectable() == true) {\n                             $calcobj->update(array('title'=>$calcobj->name(),'body'=>$calcobj->description(),'calculator_name'=>$classname,'enabled'=>false));\n                         }\n                     } else {\n@@ -176,8 +179,8 @@ function manage() {\n             'calculators'=>$calculators\n         ));\n \t}\n-\t\n-\t\t\n+\n+\n \tpublic function toggle() {\n \t    global $db;\n \n@@ -222,18 +225,18 @@ public function configure() {\n             'title'=>static::displayname()\n         ));\n     }\n-    \n+\n     public function saveconfig() {\n         global $db;\n \n         if (empty($this->params['id'])) return false;\n         $calcname = $db->selectValue('shippingcalculator', 'calculator_name', 'id='.$this->params['id']);\n         $calc = new $calcname($this->params['id']);\n-        $conf = serialize($calc->parseConfig($this->params));        \n+        $conf = serialize($calc->parseConfig($this->params));\n         $calc->update(array('config'=>$conf));\n         expHistory::back();\n     }\n-\t\n+\n \tpublic function editspeed() {\n         global $db;\n \n@@ -243,9 +246,9 @@ public function editspeed() {\n         assign_to_template(array(\n             'calculator'=>$calc\n         ));\n-\t\t\n+\n     }\n-\t\n+\n \tpublic function saveEditSpeed() {\n \t\tglobal $db;\n \n@@ -255,7 +258,7 @@ public function saveEditSpeed() {\n \t\t$db->insertObject($obj, $this->params['table']);\n \t\tredirect_to(array('controller'=>'shipping', 'action'=>'configure', 'id'=>$this->params['shippingcalculator_id']));\n \t}\n-\t\n+\n \tpublic function deleteSpeed() {\n \t\tglobal $db;\n "
        },
        {
          "filename": "framework/modules/ecommerce/controllers/storeCategoryController.php",
          "status": "modified",
          "additions": 27,
          "deletions": 26,
          "patch": "@@ -22,18 +22,11 @@\n  */\n \n class storeCategoryController extends expNestedNodeController {\n-    static function displayname() {\n-        return gt(\"e-Commerce Category Manager\");\n-    }\n-\n-    static function description() {\n-        return gt(\"This module is for managing categories in your store.\");\n-    }\n-\n-    protected $add_permissions = array(\n+    protected $manage_permissions = array(\n+//        'import' => 'Import Category',\n+//        'importCategory' => 'Import Category',\n         'fix_categories' => 'to run this action.'\n     );\n-\n     // hide the configs we don't need\n     public $remove_configs = array(\n         'aggregation',\n@@ -49,6 +42,14 @@ static function description() {\n         'twitter',\n     ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n \n+    static function displayname() {\n+        return gt(\"e-Commerce Category Manager\");\n+    }\n+\n+    static function description() {\n+        return gt(\"This module is for managing categories in your store.\");\n+    }\n+\n     static function canImportData() {\n         return true;\n     }\n@@ -190,18 +191,18 @@ function manage() {\n         expHistory::set('viewable', $this->params);\n         //         $category = new storeCategory();\n         //         $categories = $category->getFullTree();\n-        //         \n+        //\n         //         // foreach($categories as $i=>$val){\n         //         //  if (!empty($this->values) && in_array($val->id,$this->values)) {\n         //         //      $this->tags[$i]->value = true;\n         //         //  } else {\n         //         //      $this->tags[$i]->value = false;\n         //         //  }\n-        //         //  $this->tags[$i]->draggable = $this->draggable; \n-        //         //  $this->tags[$i]->checkable = $this->checkable; \n+        //         //  $this->tags[$i]->draggable = $this->draggable;\n+        //         //  $this->tags[$i]->checkable = $this->checkable;\n         //         // }\n         //\n-        // $obj = json_encode($categories);  \n+        // $obj = json_encode($categories);\n     }\n \n     public function update() {\n@@ -405,7 +406,7 @@ function recurseBuild(&$thisNode, &$thisLeft, &$thisRight) {\n         // and adds the lft and rgt extents correctly for a nested set\n \n         /*function nestify($categories) {\n-            // Trees mapped            \n+            // Trees mapped\n             $trees = array();\n             $trackParents = array();\n             $depth=0;\n@@ -439,10 +440,10 @@ function recurseBuild(&$thisNode, &$thisLeft, &$thisRight) {\n                         $counter++;\n                         $l--;\n                     }\n-                    \n+\n                     $categories[$key]['lft'] = $counter;\n                     //???$counter++;\n-                }        \n+                }\n                 $prevDepth=$val['depth'];\n             }\n \n@@ -497,7 +498,7 @@ function recurseBuild(&$thisNode, &$thisLeft, &$thisRight) {\n         // eDebug(toHierarchy(nestify(flattenArray($TheTree))),1);\n \n         /*$flat_fixed_cats = nestify(flattenArray($TheTree));\n-                \n+\n         foreach ($flat_fixed_cats as $k=>$v) {\n             $cat = new storeCategory($v['id']);\n             $cat->lft = $v['lft'];\n@@ -508,13 +509,13 @@ function recurseBuild(&$thisNode, &$thisLeft, &$thisRight) {\n           */\n         //-Show Array Structure--//\n         // print_r($TheTree);\n-        // \n-        // \n+        //\n+        //\n         // //--Print the Categories, and send their children to DrawBranch--//\n         // //--The code below allows you to keep track of what category you're currently drawing--//\n-        // \n+        //\n         // printf(\"<ul>\");\n-        // \n+        //\n         // foreach($TheTree as $MyNode) {\n         //     printf(\"<li>{$MyNode['Name']}</li>\");\n         //     if(is_array($MyNode[\"Children\"]) && !empty($MyNode[\"Children\"])) {\n@@ -523,17 +524,17 @@ function recurseBuild(&$thisNode, &$thisLeft, &$thisRight) {\n         // }\n         // printf(\"</ul>\");\n         // //--Recursive printer, should draw a child, and any of its children--//\n-        // \n+        //\n         // function DrawBranch($Node){\n         //     printf(\"<ul>\");\n-        // \n+        //\n         //     foreach($Node as $Entity) {\n         //         printf(\"<li>{$Entity['Name']}</li>\");\n-        // \n+        //\n         //         if(is_array($Entity[\"Children\"]) && !empty($Entity[\"Children\"])) {\n         //             DrawBranch($Entity[\"Children\"]);\n         //         }\n-        // \n+        //\n         //         printf(\"</ul>\");\n         //     }\n         // }"
        },
        {
          "filename": "framework/modules/ecommerce/controllers/storeController.php",
          "status": "modified",
          "additions": 54,
          "deletions": 57,
          "patch": "@@ -24,7 +24,6 @@\n \n class storeController extends expController {\n     public $basemodel_name = 'product';\n-\n     public $useractions = array(\n         'showall'                         => 'Products - All Products and Categories',\n         'showallFeaturedProducts'         => 'Products - Only Featured',\n@@ -40,7 +39,30 @@ class storeController extends expController {\n         'quicklinks'                      => 'Links - User Links',\n         'showGiftCards'                   => 'Gift Cards UI',\n     );\n-\n+    protected $manage_permissions = array(\n+        'batch_process'               => 'Batch capture order transactions',\n+        'cleanNonUnicodeProducts'     => 'Clean all non-unicode charset products',\n+        'copyProduct'                 => \"Copy Product\",\n+//        'delete_children'             => \"Delete Children\",\n+        'reimport'                    => 'ReImport Products',\n+        'findDupes'                   => 'Fix Duplicate SEF Names',\n+//        'manage_sales_reps'           => 'Manage Sales Reps',\n+//        'import_external_addresses'   => 'Import addresses from other sources',\n+        'showallImpropercategorized'  => 'View products in top level categories that should not be',\n+        'showallUncategorized'        => 'View all uncategorized products',\n+        'nonUnicodeProducts'          => 'View all non-unicode charset products',\n+        'process_orders'              => 'Batch capture order transactions',\n+        'processModelAliases'         => 'Process uploaded model aliases',\n+        'saveModelAliases'            => 'Save uploaded model aliases',\n+//        'deleteProcessedModelAliases' => 'Delete processed uploaded model aliases',\n+//        'delete_model_alias'          => 'Process model aliases',\n+//        'update_model_alias'          => 'Save model aliases',\n+//        'edit_model_alias'            => 'Delete model aliases',\n+//        'import'                      => 'Import Products',\n+//        'importProduct'               => 'Import Products',\n+//        'export'                      => 'Export Products',\n+        'uploadModelAliases'          => 'Upload model aliases',\n+    );\n     // hide the configs we don't need\n     public $remove_configs = array(\n         'aggregation',\n@@ -54,31 +76,6 @@ class storeController extends expController {\n         'twitter',\n     );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','module_title','pagination','rss','tags','twitter',)\n \n-    //protected $permissions = array_merge(array(\"test\"=>'Test'), array('copyProduct'=>\"Copy Product\"));\n-    protected $add_permissions = array(\n-        'copyProduct'                 => \"Copy Product\",\n-        'delete_children'             => \"Delete Children\",\n-        'reimport'                    => 'ReImport Products',\n-        'findDupes'                   => 'Fix Duplicate SEF Names',\n-        'manage_sales_reps'           => 'Manage Sales Reps',\n-        'batch_process'               => 'Batch capture order transactions',\n-        'process_orders'              => 'Batch capture order transactions',\n-        'import_external_addresses'   => 'Import addresses from other sources',\n-        'showallImpropercategorized'  => 'View products in top level categories that should not be',\n-        'showallUncategorized'        => 'View all uncategorized products',\n-        'nonUnicodeProducts'          => 'View all non-unicode charset products',\n-        'cleanNonUnicodeProducts'     => 'Clean all non-unicode charset products',\n-        'uploadModelAliases'          => 'Upload model aliases',\n-        'processModelAliases'         => 'Process uploaded model aliases',\n-        'saveModelAliases'            => 'Save uploaded model aliases',\n-        'deleteProcessedModelAliases' => 'Delete processed uploaded model aliases',\n-        'delete_model_alias'          => 'Process model aliases',\n-        'update_model_alias'          => 'Save model aliases',\n-        'edit_model_alias'            => 'Delete model aliases',\n-        'import'                      => 'Import Products',\n-        'export'                      => 'Export Products',\n-    );\n-\n     static function displayname() {\n         return gt(\"e-Commerce Store Front\");\n     }\n@@ -508,13 +505,13 @@ function categoryBreadcrumb() {\n \n         /*if(isset($router->params['action']))\n         {\n-            $ancestors = $this->category->pathToNode();       \n+            $ancestors = $this->category->pathToNode();\n         }else if(isset($router->params['section']))\n         {\n             $current = $db->selectObject('section',' id= '.$router->params['section']);\n             $ancestors[] = $current;\n             if( $current->parent != -1 || $current->parent != 0 )\n-            {                   \n+            {\n                 while ($db->selectObject('section',' id= '.$router->params['section']);)\n                     if ($section->id == $id) {\n                         $current = $section;\n@@ -523,7 +520,7 @@ function categoryBreadcrumb() {\n                 }\n             }\n             eDebug($sections);\n-            $ancestors = $this->category->pathToNode();       \n+            $ancestors = $this->category->pathToNode();\n         }*/\n \n         $ancestors = $this->category->pathToNode();\n@@ -1274,7 +1271,7 @@ function edit() {\n                     }\n                 }\n             }\n-            //eDebug($editable_options[$group->title]);        \n+            //eDebug($editable_options[$group->title]);\n         }\n         //die();\n \n@@ -1496,7 +1493,7 @@ function delete() {\n         if (empty($this->params['id'])) return false;\n         $product_type = $db->selectValue('product', 'product_type', 'id=' . $this->params['id']);\n         $product = new $product_type($this->params['id'], true, false);\n-        //eDebug($product_type);  \n+        //eDebug($product_type);\n         //eDebug($product, true);\n         //if (!empty($product->product_type_id)) {\n         //$db->delete($product_type, 'id='.$product->product_id);\n@@ -1635,18 +1632,18 @@ public function configure() {\n     public function deleteChildren() {\n         //eDebug($data[0],true);\n         //if($id!=null) $this->params['id'] = $id;\n-        //eDebug($this->params,true);        \n+        //eDebug($this->params,true);\n         $product = new product($this->params['id']);\n         //$product = $product->find(\"first\", \"previous_id =\" . $previous_id);\n         //eDebug($product, true);\n-        if (empty($product->id)) // || empty($product->previous_id)) \n+        if (empty($product->id)) // || empty($product->previous_id))\n         {\n             flash('error', gt('There was an error deleting the child products.'));\n             expHistory::back();\n         }\n         $childrenToDelete = $product->find('all', 'parent_id=' . $product->id);\n         foreach ($childrenToDelete as $ctd) {\n-            //fwrite($lfh, \"Deleting:\" . $ctd->id . \"\\n\");                             \n+            //fwrite($lfh, \"Deleting:\" . $ctd->id . \"\\n\");\n             $ctd->delete();\n         }\n     }\n@@ -1822,7 +1819,7 @@ public function searchNew() {\n         if (!$user->isAdmin()) $sql .= '(p.active_type=0 OR p.active_type=1) AND ';\n         $sql .= \" match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"*' IN BOOLEAN MODE) AND p.parent_id=0 \";\n         $sql .= \" HAVING relevance > 0 \";\n-        //$sql .= \"GROUP BY p.id \"; \n+        //$sql .= \"GROUP BY p.id \";\n         $sql .= \"order by modelmatch,titlematch,relevance desc LIMIT 10\";\n \n         eDebug($sql);\n@@ -1851,32 +1848,32 @@ function process_orders() {\n         */\n         /*echo \"Here?\";\n         $inv = 30234;\n-        $req = 'a29f9shsgh32hsf80s7';        \n+        $req = 'a29f9shsgh32hsf80s7';\n         $amt = 101.00;\n         for($count=1;$count<=25;$count+=2)\n-        {   \n+        {\n             $data[2] = $inv + $count;\n             $amt += $count*$count;\n-            $successSet[$count]['message'] = \"Sucessfully imported row \" . $count . \", order: \" . $data[2] . \"<br/>\";                \n+            $successSet[$count]['message'] = \"Sucessfully imported row \" . $count . \", order: \" . $data[2] . \"<br/>\";\n             $successSet[$count]['order_id'] = $data[2];\n             $successSet[$count]['amount'] = $amt;\n             $successSet[$count]['request_id'] = $req;\n             $successSet[$count]['reference_id'] = $req;\n             $successSet[$count]['authorization_code'] = $req;\n-            $successSet[$count]['shipping_tracking_number'] = '1ZNF453937547';    \n+            $successSet[$count]['shipping_tracking_number'] = '1ZNF453937547';\n             $successSet[$count]['carrier'] = 'UPS';\n         }\n         for($count=2;$count<=25;$count+=2)\n-        {   \n-            $data[2] = $inv + $count;                \n-            $amt += $count*$count;        \n+        {\n+            $data[2] = $inv + $count;\n+            $amt += $count*$count;\n             $errorSet[$count]['error_code'] = '42';\n             $errorSet[$count]['message'] = \"No go for some odd reason. Try again.\";\n             $errorSet[$count]['order_id'] = $data[2];\n             $errorSet[$count]['amount'] = $amt;\n         }\n-        \n-        assign_to_template(array('errorSet'=>$errorSet, 'successSet'=>$successSet));     \n+\n+        assign_to_template(array('errorSet'=>$errorSet, 'successSet'=>$successSet));\n         return;*/\n \n         ###########\n@@ -1885,7 +1882,7 @@ function process_orders() {\n         $template = expTemplate::get_template_for_action(new orderController(), 'setStatus', $this->loc);\n \n         //eDebug($_FILES);\n-        //eDebug($this->params,true); \n+        //eDebug($this->params,true);\n         set_time_limit(0);\n         //$file = new expFile($this->params['expFile']['batch_process_upload'][0]);\n         if (!empty($_FILES['batch_upload_file']['error'])) {\n@@ -1925,7 +1922,7 @@ function process_orders() {\n \n         // read in the header line\n         $data = fgetcsv($handle, 10000, \",\");\n-        //eDebug($data);      \n+        //eDebug($data);\n //        $dataset = array();\n         $carrier = '';\n         if (trim($data[0]) == 'ShipmentInformationShipmentID') {\n@@ -2000,8 +1997,8 @@ function process_orders() {\n                     $result = $calc->delayed_capture($bm, $order->grand_total, $order);\n                     if ($result->errorCode == 0) {\n                         //we've succeeded.  transaction already created and billing info updated.\n-                        //just need to set the order shipping info, check and see if we send user an email, and set statuses.  \n-                        //shipping info:                                      \n+                        //just need to set the order shipping info, check and see if we send user an email, and set statuses.\n+                        //shipping info:\n                         $successSet[$count]['order_id'] = $data[2];\n                         $successSet[$count]['message'] = \"Sucessfully captured order \" . $data[2] . \" and set shipping information.\";\n                         $successSet[$count]['amount'] = $order->grand_total;\n@@ -2013,7 +2010,7 @@ function process_orders() {\n                     } else {\n                         //failed capture, so we report the error but still set the shipping information\n                         //because it's already out the door\n-                        //$failMessage = \"Attempted to delay capture order \" . $data[2] . \" and it failed with the following error: \" . $result->errorCode . \" - \" .$result->message;   \n+                        //$failMessage = \"Attempted to delay capture order \" . $data[2] . \" and it failed with the following error: \" . $result->errorCode . \" - \" .$result->message;\n                         //if the user seelected to set a different status for failed orders, set it here.\n                         /*if(isset($this->params['order_status_fail'][0]) && $this->params['order_status_fail'][0] > -1)\n                         {\n@@ -2024,22 +2021,22 @@ function process_orders() {\n                             $change->to_status_id = $this->params['order_status_fail'][0];\n                             $change->orders_id = $order->id;\n                             $change->save();\n-                            \n+\n                             // update the status of the order\n                             $order->order_status_id = $this->params['order_status_fail'][0];\n-                            $order->save();                             \n+                            $order->save();\n                         }*/\n                         $errorSet[$count]['error_code'] = $result->errorCode;\n                         $errorSet[$count]['message'] = \"Capture failed: \" . $result->message . \"<br/>Setting shipping information.\";\n                         $errorSet[$count]['order_id'] = $data[2];\n                         $errorSet[$count]['amount'] = $order->grand_total;\n                         $errorSet[$count]['shipping_tracking_number'] = $data[0];\n                         $errorSet[$count]['carrier'] = $carrier;\n-                        //continue;   \n+                        //continue;\n                     }\n                 } else {\n-                    //dont suppose we do anything here, as it may be set to approved manually \n-                    //$errorSet[$count] = \"Order \" . $data[2] . \" does not use a billing method with delayed capture ability.\";  \n+                    //dont suppose we do anything here, as it may be set to approved manually\n+                    //$errorSet[$count] = \"Order \" . $data[2] . \" does not use a billing method with delayed capture ability.\";\n                     $successSet[$count]['message'] = 'No capture processing available for order:' . $data[2] . '. Setting shipping information.';\n                     $successSet[$count]['order_id'] = $data[2];\n                     $successSet[$count]['amount'] = $order->grand_total;\n@@ -2126,7 +2123,7 @@ function process_orders() {\n                 }\n             }\n \n-            //eDebug($product);        \n+            //eDebug($product);\n         }\n         fclose($handle);\n         ini_set('auto_detect_line_endings',$line_end);\n@@ -2231,7 +2228,7 @@ function process_external_addresses() {\n \n         // read in the header line and discard it\n         $data = fgetcsv($handle, 10000, \",\");\n-        //eDebug($data);      \n+        //eDebug($data);\n //        $dataset = array();\n \n         //mc=1, nt=2, amm=3"
        },
        {
          "filename": "framework/modules/ecommerce/controllers/taxController.php",
          "status": "modified",
          "additions": 0,
          "deletions": 7,
          "patch": "@@ -24,13 +24,6 @@\n class taxController extends expController {\n     public $basemodel_name = 'taxclass';\n \n-    protected $add_permissions = array(\n-        'manage_zones' => 'Manages Zones',\n-        'edit_zone'    => 'Add/Edit Zone',\n-        'update_zone'  => 'Update Zone',\n-        'delete_zone'  => 'Delete Zone'\n-    );\n-\n     static function displayname() {\n         return gt(\"e-Commerce Tax Class Manager\");\n     }"
        },
        {
          "filename": "framework/modules/ecommerce/products/models/donation.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -65,10 +65,10 @@ public function find($range = 'all', $where = null, $order = null, $limit = null\n \n         $sql = \"product_type='donation'\";\n         if (!empty($where)) $sql .= $where;\n-        $sql .= empty($order) ? '' : ' ORDER BY ' . $order;\n+        $sql .= empty($order) ? '' : ' ORDER BY ' . expString::escape($order);\n \n         if (strcasecmp($range, 'all') == 0) {\n-            $sql .= empty($limit) ? '' : ' LIMIT ' . $limitstart . ',' . $limit;\n+            $sql .= empty($limit) ? '' : ' LIMIT ' . intval($limitstart) . ',' . intval($limit);\n             return $db->selectExpObjects($this->tablename, $sql, $this->classname);\n         } elseif (strcasecmp($range, 'first') == 0) {\n             $sql .= ' LIMIT 0,1';"
        },
        {
          "filename": "framework/modules/events/controllers/eventController.php",
          "status": "modified",
          "additions": 1773,
          "deletions": 1772,
          "patch": null
        },
        {
          "filename": "framework/modules/events/models/event.php",
          "status": "modified",
          "additions": 9,
          "deletions": 4,
          "patch": "@@ -52,6 +52,11 @@ public function find($range = 'all', $where = null, $order = null, $limit = null\n             //note $order is boolean for 'featured'\n             //note $limit is number of days, NOT number of records\n             //note $limitstart is a unixtimestamp in this instance\n+            $order = expString::escape($order);\n+            if ($limit !== null)\n+                $limit = intval($limit);\n+            if ($limitstart !== null)\n+                $limitstart = intval($limitstart);\n             $ed = new eventdate();\n             $day = expDateTime::startOfDayTimestamp(time());\n             $sort_asc = true; // For the getEventsForDates call\n@@ -65,7 +70,7 @@ public function find($range = 'all', $where = null, $order = null, $limit = null\n //                $begin = $day;\n //                $end = null;\n                 $items = $this->getEventsForDates($dates, $sort_asc, $order ? true : false, true);\n-                \n+\n                 // external events\n //                $extitems = $this->getExternalEvents($begin, $end);\n                 // we need to crunch these down\n@@ -78,7 +83,7 @@ public function find($range = 'all', $where = null, $order = null, $limit = null\n //                    }\n //                }\n //                $items = array_merge($items, $extitem);\n-                \n+\n                 // event registration events\n //                if (!empty($this->config['aggregate_registrations'])) $regitems = eventregistrationController::getRegEventsForDates($begin, $end, $regcolor);\n                 // we need to crunch these down\n@@ -89,7 +94,7 @@ public function find($range = 'all', $where = null, $order = null, $limit = null\n //                    }\n //                }\n //                $items = array_merge($items, $regitem);\n-                \n+\n                 $items = expSorter::sort(array('array' => $items, 'sortby' => 'eventstart', 'order' => 'ASC'));\n                 return $items;\n             }\n@@ -246,7 +251,7 @@ public static function dayNames() {\n         }\n         return $days;\n     }\n-    \n+\n }\n \n ?>\n\\ No newline at end of file"
        },
        {
          "filename": "framework/modules/file/controllers/fileController.php",
          "status": "modified",
          "additions": 34,
          "deletions": 28,
          "patch": "@@ -23,20 +23,26 @@\n \n class fileController extends expController {\n     public $basemodel_name = \"expFile\";\n-    protected $add_permissions = array(\n-//        'picker'=>'Manage Files',\n-        'import'=>'Import',\n-        'export'=>'Export',\n-    );\n     protected $remove_permissions = array(\n         'delete'\n     );\n+//    protected $manage_permissions = array(\n+//        'picker'=>'Manage Files',\n+//        'import'=>'Import',\n+//        'export'=>'Export',\n+//    );\n     public $requires_login = array(\n-        'picker'=>'must be logged in',\n-        'editAlt'=>'must be logged in',\n-        'editCat'=>'must be logged in',\n-        'editShare'=>'must be logged in',\n-        'editTitle'=>'must be logged in',\n+        'picker'=>'You must be logged in to perform this action',\n+        'adder'=>'You must be logged in to perform this action',\n+        'addit'=>'You must be logged in to perform this action',\n+        'batchDelete'=>'You must be logged in to perform this action',\n+        'createFolder'=>'You must be logged in to perform this action',\n+        'deleter'=>'You must be logged in to perform this action',\n+        'deleteit'=>'You must be logged in to perform this action',\n+        'edit'=>'You must be logged in to perform this action',\n+        'quickUpload'=>'You must be logged in to perform this action',\n+        'upload'=>'You must be logged in to perform this action',\n+        'uploader'=>'You must be logged in to perform this action',\n     );\n \n     static function displayname() { return gt(\"File Manager\"); }\n@@ -47,20 +53,20 @@ public function manage_fixPaths() {\n         // fixes file directory issues when the old file class was used to save record\n         // where the trailing forward slash was not added. This simply checks to see\n         // if the trailing / is there, if not, it adds it.\n-        \n+\n         $file = new expFile();\n         $files = $file->find('all');\n-        \n+\n         foreach ($files as $key=>$file) {\n             if (substr($files[$key]->directory,-1,1)!=\"/\") {\n                 $files[$key]->directory = $files[$key]->directory.'/';\n             }\n             $files[$key]->save();\n         }\n-    \n+\n //        eDebug($files,true);\n     }\n-    \n+\n     public function picker() {\n //        global $user;\n \n@@ -89,7 +95,7 @@ public function picker() {\n             'jscats'=>json_encode($jscatarray)\n         ));\n     }\n-    \n+\n     public function uploader() {\n         global $user;\n         //expHistory::set('manageable', $this->params);\n@@ -113,14 +119,14 @@ public function uploader() {\n             'cats'=>$catarray,\n         ));\n     }\n-    \n+\n     /**\n      * Returns attached file view template configuration settings template\n      *\n      */\n     public function get_view_config() {\n         global $template;\n-        \n+\n         // set paths we will search in for the view\n         $paths = array(\n             BASE.'themes/'.DISPLAY_THEME.'/modules/common/views/file/configure',\n@@ -148,7 +154,7 @@ public function get_view_config() {\n             }\n         }\n     }\n-    \n+\n     /**\n      * Returns view template configuration settings view template\n      *\n@@ -331,7 +337,7 @@ public function getFilesByJSON() {\n                 $filter .= !empty($filter) ? \" AND \" : \"\";\n                 $filter .= \"is_image=1\";\n             }\n-            \n+\n //            $totalrecords = $this->$modelname->find('count',$filter);\n //            $files = $this->$modelname->find('all',$filter,$sort.' '.$dir, $results, $startIndex);\n             $files = $this->$modelname->find('all', $filter, $sort.' '.$dir);\n@@ -364,9 +370,9 @@ public function getFilesByJSON() {\n                 'pageSize'=>$results,\n                 'records'=>$files\n             );\n-                  \n+\n         }\n-        \n+\n         echo json_encode($returnValue);\n     }\n \n@@ -411,8 +417,8 @@ public function delete() {\n             flash('error',$file->filename.' '.gt('wasn\\'t deleted because you don\\'t own the file.'));\n         }\n         redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n-    } \n-    \n+    }\n+\n     public function deleter() {\n //        global $db;\n \n@@ -527,7 +533,7 @@ public function addit() {\n     }\n \n     public function upload() {\n-        \n+\n         // upload the file, but don't save the record yet...\n         if ($this->params['resize'] != 'false') {\n             $maxwidth = $this->params['max_width'];\n@@ -562,7 +568,7 @@ public function upload() {\n             echo gt('File was NOT uploaded!');\n //            flash('error',gt('File was not uploaded!'));\n         }\n-    } \n+    }\n \n     public function quickUpload(){\n         global $user;\n@@ -661,10 +667,10 @@ public function editTitle() {\n             $ar = new expAjaxReply(300, gt(\"You didn't create this file, so you can't edit it.\"));\n         }\n         $ar->send();\n-    } \n+    }\n \n     public function editAlt() {\n-        global $user;        \n+        global $user;\n         $file = new expFile($this->params['id']);\n         if ($user->id==$file->poster || $user->isAdmin()) {\n             $file->alt = $this->params['newValue'];\n@@ -675,7 +681,7 @@ public function editAlt() {\n         }\n         $ar->send();\n         echo json_encode($file);  //FIXME we exit before hitting this\n-    } \n+    }\n \n     public function editShare() {\n         global $user;"
        },
        {
          "filename": "framework/modules/file/models/expFile.php",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -425,7 +425,7 @@ public static function fileUpload($_postName = null,\n         //Check to see if the directory exists.  If not, create the directory structure.\n         // if (!file_exists(BASE . $_destDir)) {\n         //  self::makeDirectory(BASE . $_destDir);\n-        // }    \n+        // }\n \n         // Move the temporary uploaded file into the destination directory,\n         // and change the name.\n@@ -735,8 +735,9 @@ public static function download($file) {\n      */\n     public static function fixName($name) {\n         $name = preg_replace('/[^A-Za-z0-9\\.]/','_',$name);\n-        if ($name[0] == '.')\n+        if ($name[0] == '.')  // attempt to upload a dot file\n             $name[0] = '_';\n+        $name = str_replace('_', '..', $name);  // attempt to upload with redirection to new folder\n         return $name;\n //        return preg_replace('/[^A-Za-z0-9\\.]/', '-', $name);\n     }"
        },
        {
          "filename": "framework/modules/filedownloads/controllers/filedownloadController.php",
          "status": "modified",
          "additions": 10,
          "deletions": 10,
          "patch": "@@ -38,7 +38,7 @@ class filedownloadController extends expController {\n     static function displayname() { return gt(\"File Downloads\"); }\n     static function description() { return gt(\"Place files on your website for users to download or use as a podcast.\"); }\n     static function isSearchable() { return true; }\n-\t\n+\n     function showall() {\n         expHistory::set('viewable', $this->params);\n         $limit = (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10;\n@@ -90,21 +90,21 @@ public function downloadfile() {\n             flash('error', gt('There was an error while trying to download your file.  No File Specified.'));\n             expHistory::back();\n         }\n-        \n-        $fd = new filedownload($this->params['fileid']); \n+\n+        $fd = new filedownload(intval($this->params['fileid']));\n         if (empty($this->params['filenum'])) $this->params['filenum'] = 0;\n \n         if (empty($fd->expFile['downloadable'][$this->params['filenum']]->id)) {\n             flash('error', gt('There was an error while trying to download your file.  The file you were looking for could not be found.'));\n             expHistory::back();\n-        }        \n-        \n+        }\n+\n         $fd->downloads++;\n         $fd->save();\n-        \n+\n         // this will set the id to the id of the actual file..makes the download go right.\n         $this->params['id'] = $fd->expFile['downloadable'][$this->params['filenum']]->id;\n-        parent::downloadfile();        \n+        parent::downloadfile();\n     }\n \n     /**\n@@ -219,10 +219,10 @@ function getRSSContent($limit = 0) {\n \n         $fd = new filedownload();\n         $items = $fd->find('all',$this->aggregateWhereClause(), isset($this->config['order']) ? $this->config['order'] : 'created_at DESC', $limit);\n-        \n+\n         //Convert the items to rss items\n         $rssitems = array();\n-        foreach ($items as $key => $item) { \n+        foreach ($items as $key => $item) {\n             $rss_item = new FeedItem();\n \n             // Add the basic data\n@@ -281,7 +281,7 @@ function getRSSContent($limit = 0) {\n         }\n         return $rssitems;\n     }\n-\t\n+\n }\n \n ?>\n\\ No newline at end of file"
        },
        {
          "filename": "framework/modules/forms/controllers/formsController.php",
          "status": "modified",
          "additions": 16,
          "deletions": 9,
          "patch": "@@ -27,6 +27,13 @@ class formsController extends expController {\n         'showall'    => 'Show All Records',\n         'show'       => 'Show a Single Record',\n     );\n+    protected $add_permissions = array(\n+        'viewdata'  => \"View Data\",\n+        'enter_data' => \"Enter Data\",  // slight naming variation to not fully restrict enterdata method\n+    );\n+    protected $manage_permissions = array(\n+        'design' => 'Design Form',\n+    );\n     public $remove_configs = array(\n         'aggregation',\n         'categories',\n@@ -39,10 +46,6 @@ class formsController extends expController {\n         'tags',\n         'twitter',\n     ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n-    protected $add_permissions = array(\n-        'viewdata'  => \"View Data\",\n-        'enter_data' => \"Enter Data\"  // slight naming variation to not fully restrict enterdata method\n-    );\n //    public $codequality = 'beta';\n \n     static function displayname() {\n@@ -81,7 +84,7 @@ public function showall() {\n             if (!empty($this->config)) {\n                 $f = $this->forms->find('first', 'id=' . $this->config['forms_id']);\n             } elseif (!empty($this->params['title'])) {\n-                $f = $this->forms->find('first', 'sef_url=\"' . $this->params['title'] . '\"');\n+                $f = $this->forms->find('first', 'sef_url=\"' . expString::escape($this->params['title']) . '\"');\n                 $this->get_defaults($f);\n             } elseif (!empty($this->params['id'])) {\n                 $f = $this->forms->find('first', 'id=' . $this->params['id']);\n@@ -92,7 +95,7 @@ public function showall() {\n                 if (empty($this->config['report_filter']) && empty($this->params['filter'])) {  // allow for param of 'filter' also\n                     $where = '1';\n                 } elseif (!empty($this->params['filter'])) {\n-                    $where = $this->params['filter'];\n+                    $where = expString::escape($this->params['filter']);\n                 } else {\n                     $where = $this->config['report_filter'];\n                 }\n@@ -200,7 +203,7 @@ public function show() {\n             } elseif (!empty($this->params['forms_id'])) {\n                 $f = $this->forms->find('first', 'id=' . $this->params['forms_id']);\n             } elseif (!empty($this->params['title'])) {\n-                $f = $this->forms->find('first', 'sef_url=\"' . $this->params['title'] . '\"');\n+                $f = $this->forms->find('first', 'sef_url=\"' . expString::escape($this->params['title']) . '\"');\n                 redirect_to(array('controller' => 'forms', 'action' => 'enterdata', 'forms_id' => $f->id));\n             }\n \n@@ -710,10 +713,10 @@ public function submit_data() {\n //                );\n \n                 $tmsg = trim(strip_tags(str_replace(array(\"<br />\", \"<br>\", \"br/>\"), \"\\n\", $this->config['auto_respond_body'])));\n-                if ($this->config['auto_respond_form']) \n+                if ($this->config['auto_respond_form'])\n                     $tmsg .= \"\\n\" . $emailText;\n                 $hmsg = $this->config['auto_respond_body'];\n-                if ($this->config['auto_respond_form']) \n+                if ($this->config['auto_respond_form'])\n                     $hmsg .= \"\\n\" . $emailHtml;\n                 $mail = new expMail();\n                 $mail->quickSend(array(\n@@ -1939,6 +1942,10 @@ public function import_csv_data_display() {\n     public function import_csv_data_add() {\n         global $user;\n \n+        if (!empty($this->params['filename']) && (strpos($this->params['filename'], 'tmp/') === false || strpos($this->params['folder'], '..') !== false)) {\n+            header('Location: ' . URL_FULL);\n+            exit();  // attempt to hack the site\n+        }\n         $line_end = ini_get('auto_detect_line_endings');\n         ini_set('auto_detect_line_endings',TRUE);\n         $file = fopen(BASE . $this->params[\"filename\"], \"r\");"
        },
        {
          "filename": "framework/modules/help/controllers/helpController.php",
          "status": "modified",
          "additions": 20,
          "deletions": 19,
          "patch": "@@ -41,7 +41,7 @@ class helpController extends expController {\n     static function displayname() { return gt(\"Help\"); }\n     static function description() { return gt(\"Manage Exponent CMS help files.\"); }\n     static function isSearchable() { return true; }\n-\t\n+\n     function __construct($src=null, $params=array()) {\n         parent::__construct($src,$params);\n         // only set the system help version if it's not already set as a session variable\n@@ -74,13 +74,13 @@ public function showall() {\n \t    //$current_version = $hv->find('first', 'is_current=1');\n \t    $ref_version = $hv->find('first', 'version=\\''.$this->help_version.'\\'');\n \n-        // pagination parameter..hard coded for now.\t    \n+        // pagination parameter..hard coded for now.\n \t\t$where = $this->aggregateWhereClause();\n \t    $where .= 'AND help_version_id='.(empty($ref_version->id)?'0':$ref_version->id);\n         if (empty($this->params['parent'])) {\n             $where .= ' AND (parent=0 OR parent IS NULL)';\n         } else {\n-            $where .= ' AND parent=' . $this->params['parent'];\n+            $where .= ' AND parent=' . intval($this->params['parent']);\n         }\n //\t    $limit = 999;\n \t    $order = isset($this->config['order']) ? $this->config['order'] : 'rank';\n@@ -127,6 +127,7 @@ public function show() {\n                 $version_id = help_version::getCurrentHelpVersionId();\n             }\n \t    }\n+\t    $this->params['title'] = expString::escape($this->params['title']);  // escape title to prevent sql injection\n \t    $doc = $help->find('first', 'help_version_id='.$version_id.' AND sef_url=\"'.$this->params['title'].'\"');\n         $children = $help->find('count','parent='.$doc->id);\n         if (empty($doc)) {\n@@ -201,10 +202,10 @@ public function edit() {\n \tpublic function manage() {\n \t    expHistory::set('manageable', $this->params);\n \t    global $db;\n-\t    \n+\n \t    $hv = new help_version();\n \t    $current_version = $hv->find('first', 'is_current=1');\n-\t    \n+\n \t    if (empty($current_version)) {\n \t        flash('error', gt(\"You don't have any software versions created yet.  Please do so now.\"));\n \t        redirect_to(array('controller'=>'help', 'action'=>'edit_version'));\n@@ -218,7 +219,7 @@ public function manage() {\n             }\n         }\n \n-\t    $where = empty($this->params['version']) ? 1 : 'help_version_id='.$this->params['version'];\n+\t    $where = empty($this->params['version']) ? 1 : 'help_version_id='.intval($this->params['version']);\n \t    $page = new expPaginator(array(\n             'model'=>'help',\n             'where'=>$where,\n@@ -263,7 +264,7 @@ private static function copydocs($from, $to) {\n             $origid = $doc->id;\n \t        unset($doc->id);\n \t        $doc->help_version_id = $to;\n-\t\t    \n+\n //\t        $tmpsef = $doc->sef_url;\n //\t        $doc->sef_url = \"\";\n //\t        $doc->save();\n@@ -313,10 +314,10 @@ private static function copydocs($from, $to) {\n      */\n \tpublic function manage_versions() {\n \t    expHistory::set('manageable', $this->params);\n-\t    \n+\n \t    $hv = new help_version();\n \t    $current_version = $hv->find('first', 'is_current=1');\n-\t    \n+\n \t    $sql  = 'SELECT hv.*, COUNT(h.title) AS num_docs FROM '.DB_TABLE_PREFIX.'_help h ';\n \t    $sql .= 'RIGHT JOIN '.DB_TABLE_PREFIX.'_help_version hv ON h.help_version_id=hv.id GROUP BY hv.version';\n \n@@ -336,7 +337,7 @@ public function manage_versions() {\n                 gt('# of Docs')=>'num_docs'\n             ),\n         ));\n-\t    \n+\n \t    assign_to_template(array(\n             'current_version'=>$current_version,\n             'page'=>$page\n@@ -362,23 +363,23 @@ public function delete_version() {\n \t    if (empty($this->params['id'])) {\n \t        flash('error', gt('The version you are trying to delete could not be found'));\n \t    }\n-\t    \n+\n \t    // get the version\n \t    $version = new help_version($this->params['id']);\n \t    if (empty($version->id)) {\n \t        flash('error', gt('The version you are trying to delete could not be found'));\n \t    }\n-\t    \n+\n \t    // if we have errors than lets get outta here!\n \t    if (!expQueue::isQueueEmpty('error')) expHistory::back();\n-\t    \n+\n \t    // delete the version\n \t    $version->delete();\n-\t    \n+\n \t    expSession::un_set('help-version');\n \n \t    flash('message', gt('Deleted version').' '.$version->version.' '.gt('and all documents in that version.'));\n-\t    expHistory::back();\t    \n+\t    expHistory::back();\n \t}\n \n     /**\n@@ -388,7 +389,7 @@ public function update_version() {\n \t    // get the current version\n \t    $hv = new help_version();\n \t    $current_version = $hv->find('first', 'is_current=1');\n-\t    \n+\n \t    // check to see if the we have a new current version and unset the old current version.\n \t    if (!empty($this->params['is_current'])) {\n //\t        $db->sql('UPDATE '.DB_TABLE_PREFIX.'_help_version set is_current=0');\n@@ -402,10 +403,10 @@ public function update_version() {\n \t    // if we don't have a current version yet so we will force this one to be it\n \t    if (empty($current_version->id)) $this->params['is_current'] = 1;\n \t    $version->update($this->params);\n-\t    \n+\n \t    // if this is a new version we need to copy over docs\n \t    if (empty($id)) {\n-\t        self::copydocs($current_version->id, $version->id);\t        \n+\t        self::copydocs($current_version->id, $version->id);\n \t    }\n         // let's update the search index to reflect the current help version\n         searchController::spider();\n@@ -536,7 +537,7 @@ public static function getSection($params) {\n         $section = new section(intval($sid));\n \t    return $section;\n \t}\n-\t\n+\n }\n \n ?>\n\\ No newline at end of file"
        },
        {
          "filename": "framework/modules/help/models/help_version.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -52,13 +52,13 @@ public static function getCurrentHelpVersion() {\n     public static function getHelpVersionId($version) {\n         global $db;\n \n-        return $db->selectValue('help_version', 'id', 'version=\"'.$version.'\"');\n+        return $db->selectValue('help_version', 'id', 'version=\"'.$db->escapeString($version).'\"');\n     }\n \n     public static function getHelpVersion($version_id) {\n         global $db;\n \n-        return $db->selectValue('help_version', 'version', 'id=\"'.$version_id.'\"');\n+        return $db->selectValue('help_version', 'version', 'id=\"'.intval($version_id).'\"');\n     }\n \n     public static function getHelpVersionsDropdown() {"
        },
        {
          "filename": "framework/modules/importexport/controllers/importexportController.php",
          "status": "modified",
          "additions": 58,
          "deletions": 51,
          "patch": "@@ -22,6 +22,13 @@\n  */\n \n class importexportController extends expController {\n+    protected $add_permissions = array(\n+        'import' => 'Import Data',\n+        'export' => 'Export Data'\n+    );\n+    protected $manage_permissions = array(\n+        'importProduct' => 'Import Product',\n+    );\n     // hide the configs we don't need\n     public $remove_configs = array(\n         'aggregation',\n@@ -35,11 +42,6 @@ class importexportController extends expController {\n         'twitter',\n     ); // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n \n-    //protected $permissions = array_merge(array(\"test\"=>'Test'), array('copyProduct'=>\"Copy Product\"));\n-    protected $add_permissions = array(\n-        'import' => 'Import Data',\n-        'export' => 'Export Data'\n-    );\n \n     static function displayname() {\n         return gt(\"Data Import / Export Module\");\n@@ -177,6 +179,11 @@ function import_process() {\n             expValidator::failAndReturnToForm(gt('You must select at least one item.'), $this->params);\n         }\n \n+        if (!empty($this->params['filename']) && (strpos($this->params['filename'], 'tmp/') === false || strpos($this->params['folder'], '..') !== false)) {\n+            header('Location: ' . URL_FULL);\n+            exit();  // attempt to hack the site\n+        }\n+\n         $filename = $this->params['filename'];\n         $src = $this->params['source'];\n         $selected = $this->params['items'];\n@@ -357,7 +364,7 @@ function export_process() {\n \n     function validate() {\n //        global $db;\n-        //eDebug($this->params,true); \n+        //eDebug($this->params,true);\n         set_time_limit(0);\n         //$file = new expFile($this->params['expFile']['import_file'][0]);\n         if (!empty($_FILES['import_file']['error'])) {\n@@ -397,117 +404,117 @@ function validate() {\n     {\n         $handle = fopen($file->path, \"r\");\n         $data = fgetcsv($handle, 10000, \",\");\n-        //eDebug($data);        \n-        $source = '';   \n+        //eDebug($data);\n+        $source = '';\n         foreach ($data as $key=>$value)\n         {\n-            $dataset[$value] = '';            \n+            $dataset[$value] = '';\n             if($key == 2 && $value=='Unique_Bill_Name') $source = '1';    //SMC\n         }\n-        \n+\n         //eDebug($source);\n         //eDebug($dataset,true);\n         $count = 1;\n         $errorSet = array();\n         $successSet = array();\n         eDebug($dataset);\n-        \n+\n         $extAddy = null;\n         while (($data = fgetcsv($handle, 10000, \",\")) !== FALSE) {\n             $count++;\n-            $extAddy = new external_address();             \n+            $extAddy = new external_address();\n             $bName = explode(' ',$data[3]);\n             eDebug($bName);\n             $extAddy->firstname = $bName[0];\n             if(count($bName) == 3)\n             {\n                 $extAddy->middlename = $bName[1];\n-                $extAddy->lastname = $bName[2];    \n+                $extAddy->lastname = $bName[2];\n             }\n             else if (count($bName) ==1)\n             {\n                 $extAddy->middlename = '';\n-                $extAddy->lastname = '';    \n+                $extAddy->lastname = '';\n             }\n             else\n             {\n                 $extAddy->middlename = '';\n-                $extAddy->lastname = $bName[1];        \n+                $extAddy->lastname = $bName[1];\n             }\n-            \n+\n             $extAddy->organization = $data[4];\n             $extAddy->address1 = $data[5];\n-            $extAddy->address2 = $data[6];            \n-            $extAddy->address2 = $data[6];            \n-            $extAddy->city = $data[7];            \n-            \n+            $extAddy->address2 = $data[6];\n+            $extAddy->address2 = $data[6];\n+            $extAddy->city = $data[7];\n+\n             $s = new geoRegion();\n             $state = $s->find('first','code=\"'.trim($data[8]).'\"');\n             eDebug($state);\n-            $extAddy->state = $state->id;                        \n-            $extAddy->zip = str_ireplace(\"'\",'',$data[9]);            \n-            $extAddy->phone = $data[20];            \n-            $extAddy->email = $data[21];            \n+            $extAddy->state = $state->id;\n+            $extAddy->zip = str_ireplace(\"'\",'',$data[9]);\n+            $extAddy->phone = $data[20];\n+            $extAddy->email = $data[21];\n             $extAddy->source = $source;\n-            \n-            \n+\n+\n             //shipping\n             if($data[3] == $data[12] && $data[5] == $data[14] && $data[6] == $data[15])  //shipping and billing same\n             {\n                 $extAddy->is_billing = 1;\n-                $extAddy->is_shipping = 1;            \n-                $extAddy->save(false);            \n+                $extAddy->is_shipping = 1;\n+                $extAddy->save(false);\n             }\n             else\n-            {                \n+            {\n                 $extAddy->is_billing = 1;\n-                $extAddy->is_shipping = 0;            \n-                $extAddy->save(false);            \n-                \n-                $extAddy = new external_address();             \n+                $extAddy->is_shipping = 0;\n+                $extAddy->save(false);\n+\n+                $extAddy = new external_address();\n                 $sName = explode(' ',$data[12]);\n                 eDebug($sName);\n                 $extAddy->firstname = $sName[0];\n                 if(count($sName) == 3)\n                 {\n                     $extAddy->middlename = $sName[1];\n-                    $extAddy->lastname = $sName[2];    \n+                    $extAddy->lastname = $sName[2];\n                 }\n                 else if (count($sName) ==1)\n                 {\n                     $extAddy->middlename = '';\n-                    $extAddy->lastname = '';    \n+                    $extAddy->lastname = '';\n                 }\n                 else\n                 {\n                     $extAddy->middlename = '';\n-                    $extAddy->lastname = $sName[1];        \n+                    $extAddy->lastname = $sName[1];\n                 }\n-                \n+\n                 $extAddy->organization = $data[13];\n                 $extAddy->address1 = $data[14];\n-                $extAddy->address2 = $data[15];                            \n-                $extAddy->city = $data[16];            \n-                \n+                $extAddy->address2 = $data[15];\n+                $extAddy->city = $data[16];\n+\n                 $s = new geoRegion();\n                 $state = $s->find('first','code=\"'.trim($data[17]).'\"');\n                 eDebug($state);\n-                $extAddy->state = $state->id;                        \n-                $extAddy->zip = str_ireplace(\"'\",'',$data[18]);            \n-                $extAddy->phone = $data[20];            \n-                $extAddy->email = $data[21];            \n+                $extAddy->state = $state->id;\n+                $extAddy->zip = str_ireplace(\"'\",'',$data[18]);\n+                $extAddy->phone = $data[20];\n+                $extAddy->email = $data[21];\n                 $extAddy->is_billing = 0;\n                 $extAddy->is_shipping = 1;\n-                $extAddy->source = $source;   \n-                \n+                $extAddy->source = $source;\n+\n                 $extAddy->save(false);\n             }\n-            \n+\n             echo \"Successfully imported row \" . $count . \", name: \" . $extAddy->firstname . \" \" . $extAddy->lastname . \"<br/>\";\n             //eDebug($product);\n-        \n-        }   \n-        \n+\n+        }\n+\n         if(count($errorSet))\n         {\n             echo \"<br/><hr><br/><font color='red'>The following records were NOT imported:<br/>\";\n@@ -524,7 +531,7 @@ function validate() {\n                 else echo \"--\" . $err . \"<br/>\";\n             }\n             echo \"</font>\";\n-        }    \n+        }\n     }*/\n \n     function importProduct($file=null) {"
        },
        {
          "filename": "framework/modules/migration/controllers/migrationController.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -21,7 +21,7 @@\n  */\n \n class migrationController extends expController {\n-    protected $add_permissions = array(\n+    protected $manage_permissions = array(\n         'analyze'=>'Analyze Data',\n         'migrate'=>'Migrate Data'\n     );"
        },
        {
          "filename": "framework/modules/navigation/controllers/navigationController.php",
          "status": "modified",
          "additions": 1305,
          "deletions": 1289,
          "patch": null
        },
        {
          "filename": "framework/modules/news/controllers/newsController.php",
          "status": "modified",
          "additions": 23,
          "deletions": 20,
          "patch": "@@ -26,18 +26,21 @@ class newsController extends expController {\n         'showall'=>'Show all News',\n         'tags'=>\"Tags\",\n     );\n+    protected $add_permissions = array(\n+        'showUnpublished'=>'View Unpublished News',\n+        'showExpired'=>'View Unpublished News',\n+    );\n+    protected $manage_permissions = array(\n+        'import'=>'Import News Items',\n+        'export'=>'Export News Items'\n+    );\n     public $remove_configs = array(\n         'categories',\n         'comments',\n //        'ealerts',\n //        'facebook',\n //        'twitter',\n     );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n-    protected $add_permissions = array(\n-        'showUnpublished'=>'View Unpublished News',\n-        'import'=>'Import News Items',\n-        'export'=>'Export News Items'\n-    );\n \n     static function displayname() { return gt(\"News\"); }\n     static function description() { return gt(\"Display & manage news type content on your site.\"); }\n@@ -58,15 +61,15 @@ public function showall() {\n             $limit = $this->params['limit'] == 'none' ? null : $this->params['limit'];\n         } else {\n             $limit = (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10;\n-        }       \n+        }\n         $order = isset($this->config['order']) ? $this->config['order'] : 'publish DESC';\n \n         // pull the news posts from the database\n         $items = $this->news->find('all', $this->aggregateWhereClause(), $order);\n \n         // merge in any RSS news and perform the sort and limit the number of posts we return to the configured amount.\n         if (!empty($this->config['pull_rss'])) $items = $this->mergeRssData($items);\n-        \n+\n         // setup the pagination object to paginate the news stories.\n         $page = new expPaginator(array(\n             'records'=>$items,\n@@ -78,7 +81,7 @@ public function showall() {\n             'src'=>$this->loc->src,\n             'view'=>empty($this->params['view']) ? null : $this->params['view']\n         ));\n-            \n+\n         assign_to_template(array(\n             'page'=>$page,\n             'items'=>$page->records,\n@@ -134,7 +137,7 @@ public function show() {\n         if (isset($this->params['id'])) {\n             $id = $this->params['id'];\n         } elseif (isset($this->params['title'])) {\n-            $id = $this->params['title'];\n+            $id = expString::escape($this->params['title']);\n         }\n \n         $record = new news($id);\n@@ -176,7 +179,7 @@ public function show() {\n \n     public function showUnpublished() {\n         expHistory::set('viewable', $this->params);\n-        \n+\n         // setup the where clause for looking up records.\n         $where = parent::aggregateWhereClause();\n         $where = \"((unpublish != 0 AND unpublish < \".time().\") OR (publish > \".time().\")) AND \".$where;\n@@ -197,38 +200,38 @@ public function showUnpublished() {\n                 gt('Status')=>'unpublish'\n             ),\n         ));\n-            \n+\n         assign_to_template(array(\n             'page'=>$page\n         ));\n     }\n-    \n+\n     public function showExpired() {\n         redirect_to(array('controller'=>'news', 'action'=>'showUnpublished','src'=>$this->params['src']));\n     }\n-    \n+\n //    public function configure() {\n //        parent::configure();\n //        assign_to_template(array('sortopts'=>$this->sortopts));\n //    }\n-    \n-    public function saveConfig() { \n+\n+    public function saveconfig() {\n         if (!empty($this->params['aggregate']) || !empty($this->params['pull_rss'])) {\n             if ($this->params['order'] == 'rank ASC') {\n                 expValidator::failAndReturnToForm(gt('User defined ranking is not allowed when aggregating or pull RSS data feeds.'), $this->params);\n             }\n         }\n-        \n-        parent::saveConfig();\n+\n+        parent::saveconfig();\n     }\n-    \n+\n     public function getRSSContent($limit = 0) {\n         // pull the news posts from the database\n         $items = $this->news->find('all', $this->aggregateWhereClause(), isset($this->config['order']) ? $this->config['order'] : 'publish DESC', $limit);\n \n         //Convert the newsitems to rss items\n         $rssitems = array();\n-        foreach ($items as $key => $item) { \n+        foreach ($items as $key => $item) {\n             $rss_item = new FeedItem();\n             $rss_item->title = expString::convertSmartQuotes($item->title);\n             $rss_item->link = $rss_item->guid = makeLink(array('controller'=>'news', 'action'=>'show', 'title'=>$item->sef_url));\n@@ -252,7 +255,7 @@ public function getRSSContent($limit = 0) {\n      * @return array\n      */\n     private function mergeRssData($items) {\n-        if (!empty($this->config['pull_rss'])) {    \n+        if (!empty($this->config['pull_rss'])) {\n             $RSS = new SimplePie();\n \t        $RSS->set_cache_location(BASE.'tmp/rsscache');  // default is ./cache\n //\t        $RSS->set_cache_duration(3600);  // default is 3600"
        },
        {
          "filename": "framework/modules/photoalbum/controllers/photosController.php",
          "status": "modified",
          "additions": 14,
          "deletions": 11,
          "patch": "@@ -28,6 +28,9 @@ class photosController extends expController {\n //        'slideshow'=>'Slideshow',\n //        //'showall_tags'=>\"Tag Categories\"\n //    );\n+    protected $manage_permissions = array(\n+        'multi'=>'Bulk Actions',\n+    );\n     public $remove_configs = array(\n         'comments',\n         'ealerts',\n@@ -41,7 +44,7 @@ class photosController extends expController {\n     static function displayname() { return gt(\"Photo Album\"); }\n     static function description() { return gt(\"Displays and manages images.\"); }\n     static function isSearchable() { return true; }\n-    \n+\n     public function showall() {\n         expHistory::set('viewable', $this->params);\n         $limit = (isset($this->config['limit']) && $this->config['limit'] != '') ? $this->config['limit'] : 10;\n@@ -66,22 +69,22 @@ public function showall() {\n                 gt('Title')=>'title'\n             ),\n         ));\n-                    \n+\n         assign_to_template(array(\n             'page'=>$page,\n             'params'=>$this->params,\n         ));\n     }\n-    \n+\n     function show() {\n         expHistory::set('viewable', $this->params);\n-        \n+\n         // figure out if we're looking this up by id or title\n         $id = null;\n         if (isset($this->params['id'])) {\n             $id = $this->params['id'];\n         } elseif (isset($this->params['title'])) {\n-            $id = $this->params['title'];\n+            $id = expString::escape($this->params['title']);\n         }\n         $record = new photo($id);\n         if (empty($record->id))\n@@ -121,7 +124,7 @@ function show() {\n             'config'=>$config\n         ));\n     }\n-    \n+\n     public function slideshow() {\n         expHistory::set('viewable', $this->params);\n         $order = isset($this->config['order']) ? $this->config['order'] : \"rank\";\n@@ -147,7 +150,7 @@ public function slideshow() {\n             'slides'=>$page->records,\n         ));\n     }\n-    \n+\n     public function showall_tags() {\n         $images = $this->image->find('all');\n         $used_tags = array();\n@@ -160,14 +163,14 @@ public function showall_tags() {\n                     $used_tags[$tag->id] = $exptag;\n                     $used_tags[$tag->id]->count = 1;\n                 }\n-                \n+\n             }\n         }\n-        \n+\n         assign_to_template(array(\n             'tags'=>$used_tags\n         ));\n-    }           \n+    }\n \n     /**\n      * Returns rich snippet PageMap meta data\n@@ -195,7 +198,7 @@ public function update() {\n \n         //populate the alt tag field if the user didn't\n         if (empty($this->params['alt'])) $this->params['alt'] = $this->params['title'];\n-        \n+\n         // call expController update to save the image\n         parent::update();\n     }"
        },
        {
          "filename": "framework/modules/pixidou/controllers/pixidouController.php",
          "status": "modified",
          "additions": 28,
          "deletions": 29,
          "patch": "@@ -22,11 +22,10 @@\n  */\n \n class pixidouController extends expController {\n-//    public $cacheDir = \"framework/modules/pixidou/images/\";\n \tpublic $cacheDir = \"tmp/pixidou/\";\n     public $requires_login = array(\n-        'editor',\n-        'exitEditor'\n+        'editor'=>'You must be logged in to perform this action',\n+        'exitEditor'=>'You must be logged in to perform this action',\n     );\n \n     static function displayname() { return gt(\"Pixidou Image Editor\"); }\n@@ -40,23 +39,23 @@ static function hasSources()\n \n     function editor() {\n         global $user;\n-        \n+\n         $file = new expFile($this->params['id']);\n-        \n-        $canSaveOg = $user->id==$file->poster || $user->is_admin ? 1 : 0 ;\n-\t    if (file_exists(BASE.$file->directory.$file->filename)) {\n-\t\t\t$file->copyToDirectory(BASE.$this->cacheDir);\n+\n+        $canSaveOg = $user->id==$file->poster || $user->isSuperAdmin() ? 1 : 0 ;\n+\t    if (file_exists(BASE . $file->directory . $file->filename)) {\n+\t\t\t$file->copyToDirectory(BASE . $this->cacheDir);\n \t\t\tassign_to_template(array(\n                 'image'=>$file,\n                 'update'=>$this->params['update'],\n                 'saveog'=>$canSaveOg\n             ));\n \t    } else {\n-\t\t    flash('error',gt('The file').' \"'.BASE.$file->directory.$file->filename.'\" '.gt('does not exist on the server.'));\n-\t\t    redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n+\t\t    flash('error', gt('The file') . ' \"' . BASE . $file->directory . $file->filename . '\" ' . gt('does not exist on the server.'));\n+\t\t    redirect_to(array(\"controller\"=>'file', \"action\"=>'picker', \"ajax_action\"=>1, \"update\"=>$this->params['update'], \"filter\"=>$this->params['filter']));\n \t    }\n     }\n-    \n+\n     public function exitEditor() {\n         // clean up parameters\n         $this->params['fid'] = intval($this->params['fid']);\n@@ -65,17 +64,17 @@ public function exitEditor() {\n         }\n         switch ($this->params['exitType']) {\n             case 'saveAsCopy':\n-                $oldimage = new expFile($this->params['fid']);                \n-                $copyname = expFile::resolveDuplicateFilename($oldimage->path); \n-                copy(BASE.$this->cacheDir.\"/\".$this->params['cpi'],$oldimage->directory.$copyname); //copy the edited file over to the files dir\n+                $oldimage = new expFile($this->params['fid']);\n+                $copyname = expFile::resolveDuplicateFilename($oldimage->path);\n+                copy(BASE . $this->cacheDir . \"/\" . $this->params['cpi'], $oldimage->directory . $copyname); //copy the edited file over to the files dir\n                 $newFile = new expFile(array(\"filename\"=>$copyname)); //construct a new expFile\n                 $newFile->directory = $oldimage->directory;\n                 $newFile->title = $oldimage->title;\n                 $newFile->shared = $oldimage->shared;\n                 $newFile->mimetype = $oldimage->mimetype;\n                 $newFile->posted = time();\n-                $newFile->filesize = filesize(BASE.$this->cacheDir.\"/\".$this->params['cpi']);\n-                $resized = getimagesize(BASE.$this->cacheDir.\"/\".$this->params['cpi']);\n+                $newFile->filesize = filesize(BASE . $this->cacheDir . \"/\" . $this->params['cpi']);\n+                $resized = getimagesize(BASE . $this->cacheDir . \"/\" . $this->params['cpi']);\n                 $newFile->image_width = $resized[0];\n                 $newFile->image_height = $resized[1];\n                 $newFile->alt = $oldimage->alt;\n@@ -86,36 +85,36 @@ public function exitEditor() {\n             case 'saveAsIs':\n                 //eDebug($this->params,true);\n                 $oldimage = new expFile($this->params['fid']);\n-                $resized = getimagesize(BASE.$this->cacheDir.\"/\".$this->params['cpi']);\n+                $resized = getimagesize(BASE . $this->cacheDir . \"/\" . $this->params['cpi']);\n                 $oldimage->image_width = $resized[0];\n                 $oldimage->image_height = $resized[1];\n                 $oldimage->save();\n-                copy(BASE.$this->cacheDir.\"/\".$this->params['cpi'],$oldimage->directory.$oldimage->filename); //copy the edited file over to the files dir\n+                copy(BASE . $this->cacheDir . \"/\" . $this->params['cpi'], $oldimage->directory . $oldimage->filename); //copy the edited file over to the files dir\n                 break;\n-            \n+\n             default:\n                 # code...\n                 break;\n         }\n         // proper file types to look for\n-        $types = array(\".jpg\",\".gif\",\".png\");\n-        \n+        $types = array(\".jpg\", \".gif\", \".png\");\n+\n         //Pixidou images directory, the editor's cache\n-        $cachedir = BASE.$this->cacheDir;\n-        \n+        $cachedir = BASE . $this->cacheDir;\n+\n         if (is_dir($cachedir) && is_readable($cachedir) ) {\n             $dh = opendir($cachedir);\n             while (($tmpfile = readdir($dh)) !== false) {\n-                if (in_array(substr($tmpfile,-4,4),$types)) {\n-                    $filename = $cachedir.$tmpfile;\n+                if (in_array(substr($tmpfile, -4, 4), $types)) {\n+                    $filename = $cachedir . $tmpfile;\n                     unlink($filename);\n                 }\n             }\n         }\n-        \n-        redirect_to(array(\"controller\"=>'file',\"action\"=>'picker',\"ajax_action\"=>1,\"update\"=>$this->params['update'],\"filter\"=>$this->params['filter']));\n+\n+        redirect_to(array(\"controller\"=>'file', \"action\"=>'picker', \"ajax_action\"=>1, \"update\"=>$this->params['update'], \"filter\"=>$this->params['filter']));\n     }\n-    \n+\n }\n \n-?>\n\\ No newline at end of file\n+?>"
        },
        {
          "filename": "framework/modules/portfolio/controllers/portfolioController.php",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -27,17 +27,17 @@ class portfolioController extends expController {\n         'tags'=>\"Tags\",\n         'slideshow'=>\"Slideshow\"\n     );\n+    protected $manage_permissions = array(\n+        'import'=>'Import Portfolio Items',\n+        'export'=>'Export Portfolio Items'\n+    );\n     public $remove_configs = array(\n         'comments',\n         'ealerts',\n         'facebook',\n         'rss',\n         'twitter',\n     );  // all options: ('aggregation','categories','comments','ealerts','facebook','files','pagination','rss','tags','twitter',)\n-    protected $add_permissions = array(\n-        'import'=>'Import Portfolio Items',\n-        'export'=>'Export Portfolio Items'\n-    );\n \n     static function displayname() { return gt(\"Portfolio\"); }\n     static function description() { return gt(\"Display a portfolio or listing.\"); }"
        },
        {
          "filename": "framework/modules/recyclebin/controllers/recyclebinController.php",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -22,7 +22,7 @@\n  */\n class recyclebinController extends expController\n {\n-    protected $add_permissions = array(\n+    protected $manage_permissions = array(\n         'showall' => 'View Recycle Bin',\n         'show' => 'View Recycle Bin',\n         'remove' => 'Remove Recycle Bin Item'\n@@ -97,6 +97,8 @@ public function remove()\n     {\n         global $db;\n \n+        $this->params['mod'] = expString::escape($this->params['mod']);\n+        $this->params['src'] = expString::escape($this->params['src']);\n         $mod = expModules::getController($this->params['mod'], $this->params['src']);\n         if ($mod != null) {\n             $mod->delete_instance();  // delete all assoc items"
        },
        {
          "filename": "framework/modules/report/controllers/reportController.php",
          "status": "modified",
          "additions": 89,
          "deletions": 84,
          "patch": "@@ -22,18 +22,23 @@\n  */\n \n class reportController extends expController {\n-    protected $add_permissions = array(\n-        'build_report' => 'Manage',\n+    protected $manage_permissions = array(\n+        'abandoned_carts' => 'Abandoned Carts Report',\n+        'batch_export' => 'Export Products',\n         'cart_summary' => 'View Cart Summary Report',\n+        'current_carts' => 'Current Carts Report',\n         'dashboard' => 'View the e-Commerce Dashboard',\n-        'order_report' => 'Generate Order Report',\n-        'product_report' => 'Generate Product Report',\n+        'download' => 'Download Report',\n         'generateOrderReport' => 'View Order Report',\n         'generateProductReport' => 'View Product Report',\n+        'order_report' => 'Generate Order Report',\n+        'payment_report' => 'Generate Payment Report',\n         'print_orders' => 'Print Orders',\n-        'batch_export' => 'Export Products',\n+        'product_report' => 'Generate Product Report',\n+        'purge_abandoned_carts' => 'Purge Abandoned Carts',\n         'show_payment_summary' => 'Show Payment Summary',\n-        'export_order_items' => 'Export Order Items File');\n+        'status_export' => 'Export Status',\n+    );\n \n     static function displayname() {\n         return gt(\"Ecom Report Builder\");\n@@ -339,13 +344,13 @@ function cart_summary() {\n         //echo $sql . $sqlwhere . \"<br>\";\n         /*\n         Need: order, orderitems, order status, ordertype, billingmethods, geo region, shipping methods, products\n-            [date-startdate] => \n-            [time-h-startdate] => \n-            [time-m-startdate] => \n+            [date-startdate] =>\n+            [time-h-startdate] =>\n+            [time-m-startdate] =>\n             [ampm-startdate] => am\n-            [date-enddate] => \n-            [time-h-enddate] =>     \n-            [time-m-enddate] => \n+            [date-enddate] =>\n+            [time-h-enddate] =>\n+            [time-m-enddate] =>\n             [ampm-enddate] => am\n             [order_status] => Array\n                 (\n@@ -361,20 +366,20 @@ function cart_summary() {\n                 )\n \n             [order-range-op] => e\n-            [order-range-num] => \n+            [order-range-num] =>\n             [order-price-op] => l\n-            [order-price-num] => \n-            [pnam] => \n-            [sku] => \n+            [order-price-num] =>\n+            [pnam] =>\n+            [sku] =>\n             [discounts] => Array\n                 (\n                     [0] => -1\n                 )\n \n-            [blshpname] => \n-            [email] => \n+            [blshpname] =>\n+            [email] =>\n             [bl-sp-zip] => s\n-            [zip] => \n+            [zip] =>\n             [bl-sp-state] => s\n             [state] => Array\n                 (\n@@ -393,8 +398,8 @@ function cart_summary() {\n         //$order = 'id';\n         //$prod = new product();\n         // $order = new order();\n-        //$items = $prod->find('all', 1, 'id DESC',25);  \n-        //$items = $order->find('all', 1, 'id DESC',25);  \n+        //$items = $prod->find('all', 1, 'id DESC',25);\n+        //$items = $order->find('all', 1, 'id DESC',25);\n         //$res = $mod->find('all',$sql,'id',25);\n \n         //eDebug($items);\n@@ -458,7 +463,7 @@ function order_report() {\n         }\n \n         /*$geo = new geoRegion();\n-        $geos = $geo->find('all');        \n+        $geos = $geo->find('all');\n         $states = array();\n         $states[-1] = gt('--Any--');\n         foreach ($geos as $skey=>$state)\n@@ -473,7 +478,7 @@ function order_report() {\n \n         //eDebug(mktime(0,0,0,(strftime(\"%m\")-1),1,strftime(\"%Y\")));\n //        $prev_month = strftime(\"%A, %d %B %Y\", mktime(0,0,0,(strftime(\"%m\")-1),1,strftime(\"%Y\")));\n-        //eDebug(strftime(\"%A, %d %B %Y\", mktime(0,0,0,(strftime(\"%m\")-1),1,strftime(\"%Y\"))));  \n+        //eDebug(strftime(\"%A, %d %B %Y\", mktime(0,0,0,(strftime(\"%m\")-1),1,strftime(\"%Y\"))));\n //        $now_date = strftime(\"%A, %d %B %Y\");\n         $prev_month = strftime(DISPLAY_DATE_FORMAT, mktime(0, 0, 0, (strftime(\"%m\") - 1), 1, strftime(\"%Y\")));\n         $now_date = strftime(DISPLAY_DATE_FORMAT);\n@@ -501,7 +506,7 @@ function generateOrderReport() {\n         $p = $this->params;\n \n         //eDebug();\n-        //build \n+        //build\n         $start_sql = \"SELECT DISTINCT(o.id), \";\n         $count_sql = \"SELECT COUNT(DISTINCT(o.id)) as c, \";\n         $sql = \"o.invoice_id, FROM_UNIXTIME(o.purchased,'%c/%e/%y %h:%i:%s %p') as purchased_date, b.firstname as bfirst, b.lastname as blast, concat('\".expCore::getCurrencySymbol().\"',format(o.grand_total,2)) as grand_total, os.title as status_title, ot.title as order_type\";\n@@ -685,7 +690,7 @@ function generateOrderReport() {\n         if (isset($p['payment_method'])) {\n             $inc = 0;\n             $sqltmp = '';\n-            //get each calculator's id  \n+            //get each calculator's id\n \n             foreach ($p['payment_method'] as $s) {\n                 if ($s == -1) continue;\n@@ -710,13 +715,13 @@ function generateOrderReport() {\n         //echo $sql . $sqlwhere . \"<br>\";\n         /*\n         Need: order, orderitems, order status, ordertype, billingmethods, geo region, shipping methods, products\n-            [date-startdate] => \n-            [time-h-startdate] => \n-            [time-m-startdate] => \n+            [date-startdate] =>\n+            [time-h-startdate] =>\n+            [time-m-startdate] =>\n             [ampm-startdate] => am\n-            [date-enddate] => \n-            [time-h-enddate] =>     \n-            [time-m-enddate] => \n+            [date-enddate] =>\n+            [time-h-enddate] =>\n+            [time-m-enddate] =>\n             [ampm-enddate] => am\n             [order_status] => Array\n                 (\n@@ -732,20 +737,20 @@ function generateOrderReport() {\n                 )\n \n             [order-range-op] => e\n-            [order-range-num] => \n+            [order-range-num] =>\n             [order-price-op] => l\n-            [order-price-num] => \n-            [pnam] => \n-            [sku] => \n+            [order-price-num] =>\n+            [pnam] =>\n+            [sku] =>\n             [discounts] => Array\n                 (\n                     [0] => -1\n                 )\n \n-            [blshpname] => \n-            [email] => \n+            [blshpname] =>\n+            [email] =>\n             [bl-sp-zip] => s\n-            [zip] => \n+            [zip] =>\n             [bl-sp-state] => s\n             [state] => Array\n                 (\n@@ -772,11 +777,11 @@ function generateOrderReport() {\n         //$order = 'id';\n         //$prod = new product();\n         // $order = new order();\n-        //$items = $prod->find('all', 1, 'id DESC',25);  \n-        //$items = $order->find('all', 1, 'id DESC',25);  \n+        //$items = $prod->find('all', 1, 'id DESC',25);\n+        //$items = $order->find('all', 1, 'id DESC',25);\n         //$res = $mod->find('all',$sql,'id',25);\n         //eDebug($items);\n-        //eDebug($sql . $sqlwhere); \n+        //eDebug($sql . $sqlwhere);\n \n         $page = new expPaginator(array(\n             //'model'=>'order',\n@@ -803,7 +808,7 @@ function generateOrderReport() {\n             ),\n         ));\n \n-        //strftime(\"%a %d-%m-%Y\", get_first_day(3, 1, 2007)); Thursday, 1 April 2010  \n+        //strftime(\"%a %d-%m-%Y\", get_first_day(3, 1, 2007)); Thursday, 1 April 2010\n         //$d_month_previous = date('n', mktime(0,0,0,(strftime(\"%m\")-1),1,strftime(\"%Y\")));\n \n         $action_items = array(\n@@ -944,7 +949,7 @@ function export_user_input_report() {\n         unset($item);\n         foreach ($items as $item) {\n             $line = '';\n-            //$line = expString::outputField(\"SMC Inventory - Laurie\");         \n+            //$line = expString::outputField(\"SMC Inventory - Laurie\");\n             $line .= expString::outputField($item['model']);\n             //$line.= expString::outputField($item['name']);\n             $line .= expString::outputField($item['qty']);\n@@ -1160,9 +1165,9 @@ function generateProductReport() {\n         //expSession::set('product_export_query', \"SELECT  DISTINCT(p.id) FROM `exponent_product` p WHERE (title like '%Velcro%' OR feed_title like '%Velcro%' OR title like '%Multicam%' OR feed_title like '%Multicam%') AND parent_id = 0\");\n \n         $product = new product();\n-        //$items = $product->find('all', '', 'id', 25);     \n-        //$page = new expPaginator();   \n-        //eDebug($page,true);   \n+        //$items = $product->find('all', '', 'id', 25);\n+        //$page = new expPaginator();\n+        //eDebug($page,true);\n         $page = new expPaginator(array(\n //            'model'      => 'product',\n             //'records'=>$items,\n@@ -1197,7 +1202,7 @@ function generateProductReport() {\n             'page'=>(isset($this->params['page']) ? $this->params['page'] : 1),\n             'columns'=>array(\n                 'Customer'=>'lastname',\n-                'Invoice #'=>'invoice_id', \n+                'Invoice #'=>'invoice_id',\n                 'Total'=>'total',\n                 'Date Purchased'=>'purchased',\n                 'Status'=>'order_status_id',\n@@ -1211,16 +1216,16 @@ function generateProductReport() {\n             'page'         => $page,\n             'action_items' => $action_items\n         ));\n-        // \n-        //     \n-        // assign_to_template(array('page'=>$page)); \n+        //\n+        //\n+        // assign_to_template(array('page'=>$page));\n     }\n \n     /**\n      * @deprecated 2.3.3 moved to expString\n      */\n     public static function parseAndTrimExport($str, $isHTML = false) { //\ufffdDeath from above\ufffd? \ufffd\n-        //echo \"1<br>\"; eDebug($str); \n+        //echo \"1<br>\"; eDebug($str);\n \n         $str = str_replace(\"\ufffd\", \"&rsquo;\", $str);\n         $str = str_replace(\"\ufffd\", \"&lsquo;\", $str);\n@@ -1268,7 +1273,7 @@ public static function parseAndTrimImport($str, $isHTML = false) { //\ufffdDeath fr\n         $str = str_replace(\"\\,\", \",\", $str);\n         $str = str_replace('\"\"', '\"', $str); //do this no matter what...in case someone added a quote in a non HTML field\n         if (!$isHTML) {\n-            //if HTML, then leave the single quotes alone, otheriwse replace w/ special Char            \n+            //if HTML, then leave the single quotes alone, otheriwse replace w/ special Char\n             $str = str_replace('\"', \"&quot;\", $str);\n         }\n         $str = str_replace(\"\ufffd\", \"&#188;\", $str);\n@@ -1303,7 +1308,7 @@ public static function parseAndTrim($str, $isHTML = false) { //\ufffdDeath from abo\n         $str = str_replace(\"\ufffd\", \"&rdquo;\", $str);\n         $str = str_replace(\"\ufffd\", \"&ldquo;\", $str);\n         $str = str_replace(\"\\r\\n\", \" \", $str);\n-        //$str = str_replace(\",\",\"\\,\",$str); \n+        //$str = str_replace(\",\",\"\\,\",$str);\n \n         $str = str_replace('\\\"', \"&quot;\", $str);\n         $str = str_replace('\"', \"&quot;\", $str);\n@@ -1539,14 +1544,14 @@ function productFeed() {\n         //check query password to avoid DDOS\n         /*\n             * condition  = new\n-            * description      \n-            * id - SKU      \n-            * link      \n-            * price      \n-            * title      \n-            * brand - manufacturer      \n-            * image link - fullsized image, up to 10, comma seperated          \n-            * product type - category - \"Electronics > Audio > Audio Accessories MP3 Player Accessories\",\"Health & Beauty > Healthcare > Biometric Monitors > Pedometers\"      \n+            * description\n+            * id - SKU\n+            * link\n+            * price\n+            * title\n+            * brand - manufacturer\n+            * image link - fullsized image, up to 10, comma seperated\n+            * product type - category - \"Electronics > Audio > Audio Accessories MP3 Player Accessories\",\"Health & Beauty > Healthcare > Biometric Monitors > Pedometers\"\n          */\n         $out = '\"id\",\"condition\",\"description\",\"like\",\"price\",\"title\",\"brand\",\"image link\",\"product type\"' . chr(13) . chr(10);\n \n@@ -1730,45 +1735,45 @@ function current_carts() {\n         eDebug(date('Y-m-d'), true);\n         // eDebug($this->tend);\n         eDebug(date('Y-m-d, g:i:s A', $this->tend));\n-        $allOrderCount = $this->o->find('count','created_at >= ' . $this->tstart . ' AND created_at <= ' . $this->tend,null,null,null,true,false,$except,true);            \n+        $allOrderCount = $this->o->find('count','created_at >= ' . $this->tstart . ' AND created_at <= ' . $this->tend,null,null,null,true,false,$except,true);\n         $sql = \"SELECT COUNT(DISTINCT(`orders_id`)) as c FROM \" . $db->prefix . \"orderitems oi \";\n         $sql .= \"JOIN \" . $db->prefix . \"orders o ON  oi.orders_id = o.id \";\n         $sql .= \"WHERE o.created_at >= \" . $this->tstart . \" AND o.created_at <= \" . $this->tend;\n         //$sql .= \" AND o.user_id != 0 AND o.order_type_id = 1\";\n-        \n+\n         eDebug($sql);\n         $allCartsWithItems = $db->countObjectsBySql($sql);\n-        \n+\n         $sql = \"SELECT COUNT(DISTINCT(`orders_id`)) as c FROM \" . $db->prefix . \"orderitems oi \";\n         $sql .= \"JOIN \" . $db->prefix . \"orders o ON  oi.orders_id = o.id \";\n         $sql .= \"WHERE o.created_at >= \" . $this->tstart . \" AND o.created_at <= \" . $this->tend;\n         eDebug($sql);\n         $realUserCartsWithItems = $db->countObjectsBySql($sql);\n-                \n-        $ordersInCheckout = $this->o->find('count','created_at >= ' . $this->tstart . ' AND created_at <= ' . $this->tend . \" AND user_id != 0\",null,null,null,true,false,$except,true);            \n-        \n-        //$ordersPurchased = $this->o->find('count','purchased >= ' . $this->tstart . ' AND purchased <= ' . $this->tend . \" AND user_id != 0 AND order_type_id = 1\",null,null,null,true,false,$except,true);     \n-        //$ordersPurchased = $this->o->find('count','purchased >= ' . $this->tstart . ' AND purchased <= ' . $this->tend . \" AND user_id != 0\",null,null,null,true,false,$except,true);     \n-        $ordersPurchased = $this->o->find('count','purchased >= ' . $this->tstart . ' AND purchased <= ' . $this->tend,null,null,null,true,false,$except,true);     \n-        $orders = $this->o->find('all','purchased >= ' . $this->tstart . ' AND purchased <= ' . $this->tend,null,null,null,true,false,$except,true);     \n-               \n-        eDebug(\"All:\" . $allOrderCount);    \n-        eDebug(\"Carts w/ Items:\" . $allCartsWithItems);           \n-        eDebug(\"Carts w/ Items in Checkout:\" . $ordersInCheckout);           \n-        eDebug(\"Purchased:\" . $ordersPurchased);  \n-        \n+\n+        $ordersInCheckout = $this->o->find('count','created_at >= ' . $this->tstart . ' AND created_at <= ' . $this->tend . \" AND user_id != 0\",null,null,null,true,false,$except,true);\n+\n+        //$ordersPurchased = $this->o->find('count','purchased >= ' . $this->tstart . ' AND purchased <= ' . $this->tend . \" AND user_id != 0 AND order_type_id = 1\",null,null,null,true,false,$except,true);\n+        //$ordersPurchased = $this->o->find('count','purchased >= ' . $this->tstart . ' AND purchased <= ' . $this->tend . \" AND user_id != 0\",null,null,null,true,false,$except,true);\n+        $ordersPurchased = $this->o->find('count','purchased >= ' . $this->tstart . ' AND purchased <= ' . $this->tend,null,null,null,true,false,$except,true);\n+        $orders = $this->o->find('all','purchased >= ' . $this->tstart . ' AND purchased <= ' . $this->tend,null,null,null,true,false,$except,true);\n+\n+        eDebug(\"All:\" . $allOrderCount);\n+        eDebug(\"Carts w/ Items:\" . $allCartsWithItems);\n+        eDebug(\"Carts w/ Items in Checkout:\" . $ordersInCheckout);\n+        eDebug(\"Purchased:\" . $ordersPurchased);\n+\n         $totalAbandoned = ($allCartsWithItems - $ordersPurchased) / $allCartsWithItems;\n         $checkoutAbandoned = ($ordersInCheckout - $ordersPurchased) / $ordersInCheckout;\n         eDebug(\"Total Abandoned: \" . $totalAbandoned);\n         eDebug(\"Checkout Abandoned: \" . $checkoutAbandoned);\n-        \n-        \n-  \n-        \n+\n+\n+\n+\n         $quickrange = array(0=>'Last 24 Hours',1=>'Last 7 Days',2=>'Last 30 Days');\n         $quickrange_default = isset($this->params['quickrange']) ? $this->params['quickrange'] : 0;\n         assign_to_template(array('orders'=>$oar,'quickrange'=>$quickrange,'quickrange_default'=>$quickrange_default));\n-        assign_to_template(array('prev_month'=>$this->prev_month, 'now_date'=>$this->now_date, 'now_hour'=>$this->now_hour, 'now_min'=>$this->now_min, 'now_ampm'=>$this->now_ampm, 'prev_hour'=>$this->prev_hour, 'prev_min'=>$this->prev_min, 'prev_ampm'=>$this->prev_ampm)); \n+        assign_to_template(array('prev_month'=>$this->prev_month, 'now_date'=>$this->now_date, 'now_hour'=>$this->now_hour, 'now_min'=>$this->now_min, 'now_ampm'=>$this->now_ampm, 'prev_hour'=>$this->prev_hour, 'prev_min'=>$this->prev_min, 'prev_ampm'=>$this->prev_ampm));\n         */\n     }\n \n@@ -1885,7 +1890,7 @@ function batch_export() {\n         /*eDebug(BASE . \"tmp/export.csv\");\n         $db->sql($sql);\n         eDebug($db->error());*/\n-        /*OPTIONALLY ENCLOSED BY '\" . '\"' . \n+        /*OPTIONALLY ENCLOSED BY '\" . '\"' .\n         \"' ESCAPED BY '\\\\'\n         LINES TERMINATED BY '\" . '\\\\n' .\n         \"' */\n@@ -2016,7 +2021,7 @@ function status_export() {\n         /*eDebug(BASE . \"tmp/export.csv\");\n         $db->sql($sql);\n         eDebug($db->error());*/\n-        /*OPTIONALLY ENCLOSED BY '\" . '\"' . \n+        /*OPTIONALLY ENCLOSED BY '\" . '\"' .\n         \"' ESCAPED BY '\\\\'\n         LINES TERMINATED BY '\" . '\\\\n' .\n         \"' */"
        },
        {
          "filename": "framework/modules/search/controllers/searchController.php",
          "status": "modified",
          "additions": 30,
          "deletions": 29,
          "patch": "@@ -26,10 +26,11 @@ class searchController extends expController {\n         'show'=>'Show Search Form',\n         'cloud'=>'Show Tag Cloud'\n     );\n-    protected $add_permissions = array(\n-        'spider'=>'Spider Site'\n+    protected $manage_permissions = array(\n+        'spider'=>'Spider Site',\n+        'searchQueryReport'=>'Search Query Report',\n+        'topSearchReport'=>'Top Search Report',\n     );\n-\n     public $remove_configs = array(\n         'aggregation',\n         'categories',\n@@ -109,7 +110,7 @@ public function search()\n             'params'=>$this->params,\n         ));\n     }\n-    \n+\n     public static function spider() {\n         global $db;\n \n@@ -136,18 +137,18 @@ public static function spider() {\n                 $mods[$controller->searchName()] = $controller->addContentToSearch();\n \t\t    }\n \t    }\n-\t\n+\n \t    uksort($mods,'strnatcasecmp');\n \t    assign_to_template(array(\n             'mods'=>$mods\n         ));\n     }\n-        \n+\n     public function show() {\n         //no need to do anything..we're just showing the form... so far! MUAHAHAHAHAHAAA!   what?\n //        redirect_to(array(\"controller\"=>'search',\"action\"=>'showall'));\n     }\n-    \n+\n     public function showall() {\n //        redirect_to(array(\"controller\"=>'search',\"action\"=>'show'));\n //        $this->show();\n@@ -220,70 +221,70 @@ public function autocomplete() {\n         }*/\n         //    $sql .= ' AND parent_id=0';\n         //eDebug($sql);\n-        \n+\n         //$res = $mod->find('all',$sql,'id',25);\n         $sql = \"select DISTINCT(p.id), p.title, model, sef_url, f.id as fileid from \".$db->prefix.\"product as p INNER JOIN \".$db->prefix.\"content_expfiles as cef ON p.id=cef.content_id INNER JOIN \".$db->prefix.\"expfiles as f ON cef.expfiles_id = f.id where match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"') AND p.parent_id=0 order by match (p.title,p.model,p.body) against ('\" . $this->params['query'] . \"') desc LIMIT 25\";\n         //$res = $db->selectObjectsBySql($sql);\n         //$res = $db->selectObjectBySql('SELECT * FROM `exponent_product`');\n-        \n+\n         $ar = new expAjaxReply(200, gt('Here\\'s the items you wanted'), $res);\n         $ar->send();\n     }\n-\t\n+\n \tpublic function searchQueryReport() {\n \t\tglobal $db;\n-\t\t\n+\n \t\t//Instantiate the search model\n \t\t$search = new search();\n-\t\t\n+\n \t\t//Store the keywords that returns nothing\n         $badSearch = array();\n \t\t$badSearchArr =  array();\n-\t\t\n+\n \t\t//User Records Initialization\n \t\t$all_user  = -1;\n \t\t$anonymous = -2;\n \t\t$uname = array('id'=>array($all_user, $anonymous), 'name'=>array('All Users', 'Anonymous'));\n \n \t\t$user_default = '';\n \t\t$where = '';\n-\t\t\n+\n \t\tif(isset($this->params['user_id']) && $this->params['user_id'] != -1) {\n \t\t\t$user_default = $this->params['user_id'];\n \t\t}\n-\t\t\n+\n \t\texpHistory::set('manageable', $this->params);\n \n \t\t$ctr  = 2;\n \t\t$ctr2 = 0;\n-\t\t\n+\n \t\t//Getting the search users\n \t\t$records = $db->selectObjects('search_queries');\n-\t\t\n-\t\t\n+\n+\n \t\tforeach($records as $item) {\n \t\t\t$u = user::getUserById($item->user_id);\n \n \t\t\tif($item->user_id == 0) {\n \t\t\t\t$item->user_id = $anonymous;\n \t\t\t}\n-\t\t\t\n+\n \t\t\tif(!in_array($item->user_id, $uname['id'])) {\n \t\t\t\t$uname['name'][$ctr] = $u->firstname . ' ' . $u->lastname;\n \t\t\t\t$uname['id'][$ctr] = $item->user_id;\n \t\t\t\t$ctr++;\n \t\t\t}\n-\t\t\t\n+\n \t\t\t$result  = $search->getSearchResults($item->query, false, true);\n \t\t\tif(empty($result) && !in_array($item->query, $badSearchArr)) {\n \t\t\t\t$badSearchArr[] = $item->query;\n \t\t\t\t$badSearch[$ctr2]['query'] = $item->query;\n \t\t\t\t$badSearch[$ctr2]['count'] = $db->countObjects(\"search_queries\", \"query='{$item->query}'\");\n \t\t\t\t$ctr2++;\n \t\t\t}\n-\t\t\t\n+\n \t\t}\n-\t\n+\n \t\t//Check if the user choose from the dropdown\n \t\tif(!empty($user_default)) {\n \t\t\tif($user_default == $anonymous) {\n@@ -293,7 +294,7 @@ public function searchQueryReport() {\n \t\t\t}\n \t\t\t$where .= \"user_id = {$u_id}\";\n \t\t}\n-\t\n+\n \t\t//Get all the search query records\n \t\t$records = $db->selectObjects('search_queries', $where);\n         for ($i = 0, $iMax = count($records); $i < $iMax; $i++) {\n@@ -302,7 +303,7 @@ public function searchQueryReport() {\n \t\t\t\t$records[$i]->user = $u->firstname . ' ' . $u->lastname;\n \t\t\t}\n \t\t}\n-\t\t\n+\n         $page = new expPaginator(array(\n             'records' => $records,\n             'where'=>1,\n@@ -328,19 +329,19 @@ public function searchQueryReport() {\n             'user_default' => $user_default,\n             'badSearch' => $badSearch\n         ));\n-\t\t\n+\n \t}\n-\t\n+\n \tpublic function topSearchReport() {\n \t\tglobal $db;\n \t\t$limit = intval(TOP_SEARCH);\n-\t\t\n+\n \t\tif(empty($limit)) {\n \t\t\t$limit = 10;\n \t\t}\n \n \t\t$count   = $db->countObjects('search_queries');\n-\t\n+\n \t\t$records = $db->selectObjectsBySql(\"SELECT COUNT(query) cnt, query FROM \" .$db->prefix . \"search_queries GROUP BY query ORDER BY cnt DESC LIMIT 0, {$limit}\");\n \n         $records_key_arr = array();\n@@ -351,7 +352,7 @@ public function topSearchReport() {\n \t\t}\n \t\t$records_key   = implode(\",\", $records_key_arr);\n \t\t$records_values = implode(\",\", $records_values_arr);\n-\t\t\n+\n \t\tassign_to_template(array(\n             'records'=>$records,\n             'total'=>$count,"
        },
        {
          "filename": "framework/modules/simplepoll/controllers/simplePollController.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -143,7 +143,7 @@ public function vote() {\n         global $user;\n \n         if (isset($this->params['choice'])) {\n-            $answer = new simplepoll_answer($this->params['choice']);\n+            $answer = new simplepoll_answer(intval($this->params['choice']));\n             if (empty($this->config)) {\n                 $this->config['anonymous_timeout'] = 5*3600;\n                 $this->config['thank_you_message'] = 'Thank you for voting.';"
        },
        {
          "filename": "framework/modules/users/controllers/loginController.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -125,7 +125,7 @@ public static function logout() {\n \t * main login method\n \t */\n \tpublic static function login() {\n-\t\tuser::login(expString::sanitize($_POST['username']),expString::sanitize($_POST['password']));\n+\t\tuser::login(expString::escape(expString::sanitize($_POST['username'])),expString::escape(expString::sanitize($_POST['password'])));\n \t\tif (!isset($_SESSION[SYS_SESSION_KEY]['user'])) {  // didn't successfully log in\n \t\t\tflash('error', gt('Invalid Username / Password'));\n \t\t\tif (expSession::is_set('redirecturl_error')) {"
        },
        {
          "filename": "framework/modules/users/controllers/usersController.php",
          "status": "modified",
          "additions": 22,
          "deletions": 9,
          "patch": "@@ -24,18 +24,19 @@\n \n class usersController extends expController {\n     public $basemodel_name = 'user';\n-    protected $add_permissions = array(\n+//    protected $remove_permissions = array(\n+//        'create',\n+//        'edit'\n+//    );\n+    protected $manage_permissions = array(\n         'toggle_extension' => 'Activate Extensions',\n         'kill_session'     => 'End Sessions',\n         'boot_user'        => 'Boot Users',\n         'userperms'        => 'User Permissions',\n         'groupperms'       => 'Group Permissions',\n         'import'           => 'Import Users',\n         'export'           => 'Export Users',\n-    );\n-    protected $remove_permissions = array(\n-        'create',\n-        'edit'\n+        'update'           => 'Update Users',\n     );\n \n     static function displayname() {\n@@ -171,7 +172,7 @@ public function update() {\n             expHistory::back();\n         }\n \n-        // if this is a new user account we need to check the password.  \n+        // if this is a new user account we need to check the password.\n         // the password fields wont come thru on an edit. Otherwise we will\n         // just update the existing account.\n         if (!empty($id)) {\n@@ -233,7 +234,7 @@ public function update() {\n             if ($u->id == $user->id) expSession::triggerRefresh();\n         }\n \n-        // if this is a new account then we will check to see if we need to send \n+        // if this is a new account then we will check to see if we need to send\n         // a welcome message or admin notification of new accounts.\n         if (empty($id)) {\n             // Calculate Group Memberships for newly created users.  Any groups that\n@@ -491,6 +492,7 @@ public function send_new_password() {\n         global $db;\n \n         // find the user\n+        $this->params['username'] = expString::escape($this->params['username']);\n         $u = user::getUserByName($this->params['username']);\n         if (empty($u)) {\n             $u = user::getUserByEmail($this->params['username']);\n@@ -539,7 +541,7 @@ public function confirm_password_reset() {\n         global $db;\n \n         $db->delete('passreset_token', 'expires < ' . time());\n-        $tok = $db->selectObject('passreset_token', 'uid=' . $this->params['uid'] . \" AND token='\" . preg_replace('/[^A-Za-z0-9]/', '', $this->params['token']) . \"'\");\n+        $tok = $db->selectObject('passreset_token', 'uid=' . intval($this->params['uid']) . \" AND token='\" . preg_replace('/[^A-Za-z0-9]/', '', expString::escape($this->params['token'])) . \"'\");\n         if ($tok == null) {\n             flash('error', gt('Your password reset request has expired.  Please try again.'));\n             expHistory::back();\n@@ -617,7 +619,7 @@ public function save_change_password() {\n             expHistory::returnTo('editable');\n         }\n         //eDebug($user);\n-        $u = new user($this->params['uid']);\n+        $u = new user(intval($this->params['uid']));\n \n         $ret = $u->setPassword($this->params['new_password1'], $this->params['new_password2']);\n         //eDebug($u, true);\n@@ -654,6 +656,13 @@ public function edit_userpassword() {\n     }\n \n     public function update_userpassword() {\n+        global $user;\n+\n+        if (!$user->isAdmin() && $this->params['id'] != $user->id) {\n+            flash('error', gt('You do not have permissions to change this users password.'));\n+            expHistory::back();\n+        }\n+\n         if (empty($this->params['id'])) {\n             expValidator::failAndReturnToForm(gt('You must specify the user whose password you want to change'), $this->params);\n         }\n@@ -1497,6 +1506,10 @@ public function import_users_display() {\n     }\n \n     public function import_users_add() {\n+        if (!empty($this->params['filename']) && (strpos($this->params['filename'], 'tmp/') === false || strpos($this->params['folder'], '..') !== false)) {\n+            header('Location: ' . URL_FULL);\n+            exit();  // attempt to hack the site\n+        }\n         $line_end = ini_get('auto_detect_line_endings');\n         ini_set('auto_detect_line_endings',TRUE);\n         $file = fopen(BASE . $this->params[\"filename\"], \"r\");"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 34,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "accea125b51d63319e69715a30f762be0e07845d",
            "date": "2024-12-26T16:54:42Z",
            "author_login": "dleffler"
          },
          {
            "sha": "7ca4bea4baabe3ffacff195a0ce1b1dab2ab11eb",
            "date": "2024-12-26T14:53:00Z",
            "author_login": "dleffler"
          },
          {
            "sha": "94b89d4cd98076976ef3c77f7bdc91fb874c70cd",
            "date": "2024-12-26T14:47:17Z",
            "author_login": "dleffler"
          },
          {
            "sha": "72ac0af81fdd733084a5164093ca33dcd41f8df0",
            "date": "2024-12-26T12:33:23Z",
            "author_login": "dleffler"
          },
          {
            "sha": "ababe76855ae7f303eedd9a581964ab8cae56097",
            "date": "2024-12-26T09:35:40Z",
            "author_login": "dleffler"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-89",
    "description": "SQL injection vulnerability in framework/modules/filedownloads/controllers/filedownloadController.php in Exponent CMS 2.3.9 and earlier allows remote attackers to execute arbitrary SQL commands via the fileid parameter.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-03-07T16:59:01.603",
    "last_modified": "2024-11-21T03:00:34.873",
    "fix_date": "2016-09-28T19:21:21Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/139484/Exponent-CMS-2.3.9-SQL-Injection.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2016/Nov/12",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97271",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/exponentcms/exponent-cms/commit/fdafb5ec97838e4edbd685f587f28d3174ebb3db",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/139484/Exponent-CMS-2.3.9-SQL-Injection.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2016/Nov/12",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97271",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/exponentcms/exponent-cms/commit/fdafb5ec97838e4edbd685f587f28d3174ebb3db",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:52.254466",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "exponent-cms",
    "owner": "exponentcms",
    "created_at": "2011-01-07T01:29:32Z",
    "updated_at": "2024-12-26T16:56:12Z",
    "pushed_at": "2024-12-30T15:54:53Z",
    "size": 227121,
    "stars": 60,
    "forks": 24,
    "open_issues": 152,
    "watchers": 60,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 11116843,
      "Smarty": 6027231,
      "JavaScript": 734249,
      "CSS": 260721,
      "Less": 171892,
      "SCSS": 22697
    },
    "commit_activity": {
      "total_commits_last_year": 79,
      "avg_commits_per_week": 1.5192307692307692,
      "days_active_last_year": 28
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T07:37:32.376467"
  }
}