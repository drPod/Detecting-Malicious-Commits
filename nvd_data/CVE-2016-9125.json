{
  "cve_id": "CVE-2016-9125",
  "github_data": {
    "repository": "revive-adserver/revive-adserver",
    "fix_commit": "4910365631eabbb208961c36149f41cc8159fb39",
    "related_commits": [
      "4910365631eabbb208961c36149f41cc8159fb39",
      "4910365631eabbb208961c36149f41cc8159fb39"
    ],
    "patch_url": "https://github.com/revive-adserver/revive-adserver/commit/4910365631eabbb208961c36149f41cc8159fb39.patch",
    "fix_commit_details": {
      "sha": "4910365631eabbb208961c36149f41cc8159fb39",
      "commit_date": "2015-11-20T06:23:43Z",
      "author": {
        "login": "mbeccati",
        "type": "User",
        "stats": {
          "total_commits": 1583,
          "average_weekly_commits": 2.633943427620632,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 293
        }
      },
      "commit_message": {
        "title": "Fix h1 reports 93809 and 93813",
        "length": 569,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 105,
        "additions": 85,
        "deletions": 20
      },
      "files": [
        {
          "filename": "lib/OA/Auth.php",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -86,6 +86,9 @@ function login($redirectCallback = null)\n                 OA_Auth::restart($GLOBALS['strUsernameOrPasswordWrong']);\n             }\n \n+            // Regenerate session ID now\n+            phpAds_SessionRegenerateId();\n+\n             return OA_Auth::getSessionData($doUser);\n         }\n \n@@ -190,7 +193,7 @@ function getFakeSessionData()\n      */\n     function restart($sMessage = '')\n     {\n-        $_COOKIE['sessionID'] = phpAds_SessionStart();\n+        $_COOKIE['sessionID'] = phpAds_SessionRegenerateId();\n         OA_Auth::displayLogin($sMessage, $_COOKIE['sessionID']);\n     }\n "
        },
        {
          "filename": "lib/OA/Upgrade/Login.php",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -25,7 +25,7 @@ class OA_Upgrade_Login\n     function checkLogin()\n     {\n         // Clean up session\n-        $GLOBALS['session'] = array();\n+        phpAds_clearSession();\n \n         // Detection needs to happen every time to make sure that database parameters are\n         $oUpgrader = new OA_Upgrade();\n@@ -93,6 +93,7 @@ function autoLogin()\n             $doUser->joinAdd($doAUA);\n             $doUser->find();\n             if ($doUser->fetch()) {\n+                phpAds_SessionRegenerateId();\n                 phpAds_SessionDataRegister(OA_Auth::getSessionData($doUser));\n                 phpAds_SessionDataStore();\n             }\n@@ -106,6 +107,8 @@ function _checkLoginNew()\n         $aCredentials = $oPlugin->_getCredentials(false);\n \n         if (!PEAR::isError($aCredentials)) {\n+            phpAds_SessionRegenerateId();\n+\n             $doUser = $oPlugin->checkPassword($aCredentials['username'], $aCredentials['password']);\n \n             if ($doUser) {\n@@ -140,6 +143,8 @@ function _checkLoginOld($tableName, $agencySupport)\n                 $aCredentials = $oPlugin->_getCredentials(false);\n \n                 if (!PEAR::isError($aCredentials)) {\n+                    phpAds_SessionRegenerateId();\n+\n                     if (strtolower($aPref['admin']) == strtolower($aCredentials['username']) &&\n                         $aPref['admin_pw'] == md5($aCredentials['password']))\n                     {"
        },
        {
          "filename": "lib/max/Dal/Admin/Session.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -76,10 +76,10 @@ function storeSerializedSession($serialized_session_data, $session_id)\n         if ($doSession) {\n             $doSession->sessiondata = $serialized_session_data;\n             $doSession->update();\n-        }\n-        else {\n+        } else {\n             $doSession = OA_Dal::factoryDO('session');\n-            $doSession->sessionid = $session_id;\n+            // It's an md5, so 32 chars max\n+            $doSession->sessionid = substr($session_id, 0, 32);\n             $doSession->sessiondata = $serialized_session_data;\n             $doSession->insert();\n         }"
        },
        {
          "filename": "www/admin/lib-sessions.inc.php",
          "status": "modified",
          "additions": 68,
          "deletions": 13,
          "patch": "@@ -30,28 +30,29 @@\n function phpAds_SessionDataFetch()\n {\n     global $session;\n-    $dal = new MAX_Dal_Admin_Session();\n \n     // Guard clause: Can't fetch a session without an ID\n-\tif (empty($_COOKIE['sessionID'])) {\n+    if (empty($_COOKIE['sessionID']) || !preg_match('#^[0-9a-f]{32}$#D', $_COOKIE['sessionID'])) {\n         return;\n     }\n \n+    $dal = new MAX_Dal_Admin_Session();\n     $serialized_session = $dal->getSerializedSession($_COOKIE['sessionID']);\n \n-    // This is required because 'sessionID' cookie is set to new during logout.\n-    // According to comments in the file it is because some servers do not\n-    // support setting cookies during redirect.\n-    if (empty($serialized_session)) {\n+    // Return if the session was not found (expired or forged)\n+    if (!$serialized_session) {\n         return;\n     }\n \n     $loaded_session = unserialize($serialized_session);\n-\tif (!$loaded_session) {\n-        // XXX: Consider raising an error\n+\n+    // Or if it can't be unserialized and/or is not a session we started\n+    if (empty($loaded_session['__authentic__'])) {\n         return;\n     }\n-\t$session = $loaded_session;\n+\n+    $session = $loaded_session;\n+\n     $dal->refreshSession($_COOKIE['sessionID']);\n }\n \n@@ -75,21 +76,75 @@ function phpAds_SessionSetAdminCookie($name, $value)\n }\n \n /*-------------------------------------------------------*/\n-/* Create a new sessionid                                */\n+/* Start a new session                                   */\n /*-------------------------------------------------------*/\n \n function phpAds_SessionStart()\n {\n \tglobal $session;\n+\n \tif (empty($_COOKIE['sessionID'])) {\n-\t\t$session = array();\n-\t\t$_COOKIE['sessionID'] = md5(uniqid('phpads', 1));\n+\t\tphpAds_clearSession();\n+\n+        $sessionId = phpAds_SessionGenerateId();\n \n-        phpAds_SessionSetAdminCookie('sessionID', $_COOKIE['sessionID']);\n+        $dal = new MAX_Dal_Admin_Session();\n+        $dal->storeSerializedSession(serialize($session), $sessionId);\n \t}\n+\n \treturn $_COOKIE['sessionID'];\n }\n \n+/*-------------------------------------------------------*/\n+/* Generate a sessionid                                  */\n+/*-------------------------------------------------------*/\n+\n+function phpAds_SessionGenerateId()\n+{\n+    $_COOKIE['sessionID'] = md5(uniqid('phpads', 1));\n+\n+    phpAds_SessionSetAdminCookie('sessionID', $_COOKIE['sessionID']);\n+\n+    return $_COOKIE['sessionID'];\n+}\n+\n+/*-------------------------------------------------------*/\n+/* Re-generate the sessionid                             */\n+/*-------------------------------------------------------*/\n+\n+function phpAds_SessionRegenerateId()\n+{\n+    global $session;\n+\n+    $dal = new MAX_Dal_Admin_Session();\n+\n+    if (!empty($_COOKIE['sessionID'])) {\n+        $dal->deleteSession($_COOKIE['sessionID']);\n+    }\n+\n+    if (!empty($session['__authentic__'])) {\n+        $sessionId = phpAds_SessionGenerateId();\n+        $dal->storeSerializedSession(serialize($session), $sessionId);\n+\n+        return $sessionId;\n+    }\n+\n+    unset($_COOKIE['sessionID']);\n+\n+    return phpAds_SessionStart();\n+}\n+\n+/*-------------------------------------------------------*/\n+/* Clear the session and mark it as authentic            */\n+/*-------------------------------------------------------*/\n+\n+function phpAds_clearSession()\n+{\n+    $GLOBALS['session'] = array(\n+        '__authentic__' => true,\n+    );\n+}\n+\n /*-------------------------------------------------------*/\n /* Register the data in the session array                */\n /*-------------------------------------------------------*/"
        },
        {
          "filename": "www/api/v1/xmlrpc/LogonServiceImpl.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -93,7 +93,8 @@ function logon($username, $password, &$sessionId)\n \n         $_POST['login'] = 'Login';\n \n-        $_COOKIE['sessionID'] = uniqid('phpads', 1);\n+        unset($_COOKIE['sessionID']);\n+        phpAds_SessionStart();\n         $_POST['phpAds_cookiecheck'] = $_COOKIE['sessionID'];\n \n         $this->preInitSession();"
        },
        {
          "filename": "www/api/v2/xmlrpc/LogonServiceImpl.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -93,7 +93,8 @@ function logon($username, $password, &$sessionId)\n \n         $_POST['login'] = 'Login';\n \n-        $_COOKIE['sessionID'] = uniqid('phpads', 1);\n+        unset($_COOKIE['sessionID']);\n+        phpAds_SessionStart();\n         $_POST['phpAds_cookiecheck'] = $_COOKIE['sessionID'];\n \n         $this->preInitSession();"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "dd61fd0d449dccc59fe6f65b3bd00aa77e5c9e4a",
            "date": "2024-11-07T15:04:51Z",
            "author_login": "mbeccati"
          },
          {
            "sha": "51f4abe954ba48a38ae6aacb5c179c5452895ebf",
            "date": "2024-11-06T18:31:20Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "d4af823e9600de3af555fb37257ca4da0a91c569",
            "date": "2024-11-25T15:39:33Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "297484b6ce1a6fde9d22d30506c4df1c7fec6ea3",
            "date": "2025-01-08T10:50:47Z",
            "author_login": "mbeccati"
          },
          {
            "sha": "8cfa5e622767d618e51cf9a82e3fb9b346928888",
            "date": "2025-01-08T10:46:14Z",
            "author_login": "mbeccati"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-384",
    "description": "Revive Adserver before 3.2.3 suffers from session fixation, by allowing arbitrary session identifiers to be forced and, at the same time, by not invalidating the existing session upon a successful authentication. Under some circumstances, that could have been an opportunity for an attacker to steal an authenticated session.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-03-28T02:59:00.370",
    "last_modified": "2024-11-21T03:00:39.940",
    "fix_date": "2015-11-20T06:23:43Z"
  },
  "references": [
    {
      "url": "https://github.com/revive-adserver/revive-adserver/commit/4910365631eabbb208961c36149f41cc8159fb39",
      "source": "support@hackerone.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://hackerone.com/reports/93809",
      "source": "support@hackerone.com",
      "tags": [
        "Permissions Required"
      ]
    },
    {
      "url": "https://hackerone.com/reports/93813",
      "source": "support@hackerone.com",
      "tags": [
        "Permissions Required"
      ]
    },
    {
      "url": "https://www.revive-adserver.com/security/revive-sa-2016-001/",
      "source": "support@hackerone.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/revive-adserver/revive-adserver/commit/4910365631eabbb208961c36149f41cc8159fb39",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://hackerone.com/reports/93809",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required"
      ]
    },
    {
      "url": "https://hackerone.com/reports/93813",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required"
      ]
    },
    {
      "url": "https://www.revive-adserver.com/security/revive-sa-2016-001/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:54.828173",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "revive-adserver",
    "owner": "revive-adserver",
    "created_at": "2013-07-16T22:11:15Z",
    "updated_at": "2025-01-10T17:06:46Z",
    "pushed_at": "2025-01-08T11:20:37Z",
    "size": 139905,
    "stars": 1282,
    "forks": 568,
    "open_issues": 173,
    "watchers": 1282,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 27472690,
      "JavaScript": 1124495,
      "HTML": 1041508,
      "CSS": 237772,
      "XSLT": 130214,
      "Smarty": 7889,
      "Shell": 7459
    },
    "commit_activity": {
      "total_commits_last_year": 203,
      "avg_commits_per_week": 3.9038461538461537,
      "days_active_last_year": 52
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:16:40.604099"
  }
}