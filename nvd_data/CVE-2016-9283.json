{
  "cve_id": "CVE-2016-9283",
  "github_data": {
    "repository": "exponentcms/exponent-cms",
    "fix_commit": "559792be727f4e731bfcb3935f5beec7749e9ce9",
    "related_commits": [
      "559792be727f4e731bfcb3935f5beec7749e9ce9",
      "559792be727f4e731bfcb3935f5beec7749e9ce9"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "559792be727f4e731bfcb3935f5beec7749e9ce9",
      "commit_date": "2016-11-04T01:34:43Z",
      "author": {
        "login": "dleffler",
        "type": "User",
        "stats": {
          "total_commits": 9296,
          "average_weekly_commits": 12.647619047619047,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 615
        }
      },
      "commit_message": {
        "title": "fix sql injection security vulnerability which failed to account for sef urls adequately; reported by many, many users",
        "length": 118,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 135,
        "additions": 96,
        "deletions": 39
      },
      "files": [
        {
          "filename": "framework/core/subsystems/expRouter.php",
          "status": "modified",
          "additions": 96,
          "deletions": 39,
          "patch": "@@ -38,9 +38,9 @@ class expRouter {\n      * either 'sef' or 'query'\n      * @var string\n      */\n-    public  $url_style = '';\n+    private $url_style = '';\n     public  $params = array();\n-    public  $sefPath = null;\n+    private $sefPath = null;\n \n     function __construct() {\n         self::getRouterMaps();\n@@ -189,7 +189,11 @@ public function plainPath() {\n     public function routeRequest() {\n         global $user;\n \n-        // strip out possible xss exploits via url\n+        // start splitting the URL into it's different parts\n+        $this->splitURL();\n+        // edebug($this,1);\n+\n+        // strip out possible xss exploits via old school url\n         foreach ($_GET as $key=>$var) {\n             if (is_string($var) && strpos($var,'\">')) {\n                 unset(\n@@ -198,35 +202,37 @@ public function routeRequest() {\n                 );\n             }\n         }\n+        //fixme only old school url and forms have these variables here\n         // conventional method to ensure the 'id' is only an id\n         if (isset($_REQUEST['id'])) {\n+            $_REQUEST['id'] = intval($_REQUEST['id']);\n             if (isset($_GET['id']))\n-                $_GET['id'] = intval($_GET['id']);\n+                $_GET['id'] = $_REQUEST['id'];\n             if (isset($_POST['id']))\n-                $_POST['id'] = intval($_POST['id']);\n-\n-            $_REQUEST['id'] = intval($_REQUEST['id']);\n+                $_POST['id'] = $_REQUEST['id'];\n         }\n         // do the same for the other id's\n         foreach ($_REQUEST as $key=>$var) {\n             if (is_string($var) && strlen($key) >= 3 && strrpos($key,'_id',-3) !== false) {\n+                $_REQUEST[$key] = intval($_REQUEST[$key]);\n                 if (isset($_GET[$key]))\n-                    $_GET[$key] = intval($_GET[$key]);\n+                    $_GET[$key] = $_REQUEST[$key];\n                 if (isset($_POST[$key]))\n-                    $_POST[$key] = intval($_POST[$key]);\n-\n-                $_REQUEST[$key] = intval($_REQUEST[$key]);\n+                    $_POST[$key] = $_REQUEST[$key];\n+            }\n+            if ($key == 'src') {\n+                $_REQUEST[$key] = preg_replace(\"/[^A-Za-z0-9@-]/\", '', $_REQUEST[$key]);\n+                if (isset($_GET[$key]))\n+                    $_GET[$key] = $_REQUEST[$key];\n+                if (isset($_POST[$key]))\n+                    $_POST[$key] = $_REQUEST[$key];\n             }\n         }\n         if (empty($user->id) || (!empty($user->id) && !$user->isAdmin())) {  //FIXME why would $user be empty here unless $db is down?\n //            $_REQUEST['route_sanitized'] = true;//FIXME debug test\n             expString::sanitize($_REQUEST);  // strip other exploits like sql injections\n         }\n \n-        // start splitting the URL into it's different parts\n-        $this->splitURL();\n-        // edebug($this,1);\n-\n         if ($this->url_style == 'sef') {\n             if ($this->url_type == 'page' || $this->url_type == 'base') {\n                 $ret = $this->routePageRequest();               // if we hit this the formatting of the URL looks like the user is trying to go to a page.\n@@ -248,8 +254,7 @@ public function routeRequest() {\n                     $module = !empty($_POST['controller']) ? expString::sanitize($_POST['controller']) : expString::sanitize($_POST['module']);\n                     // Figure out if this is module or controller request - WE ONLY NEED THIS CODE UNTIL WE PULL OUT THE OLD MODULES\n                     if (expModules::controllerExists($module)) {\n-                        $_POST['controller'] = $module;\n-                        $_REQUEST['controller'] = $module;\n+                        $_POST['controller'] = $_REQUEST['controller'] = $module;\n                     }\n                 }\n             }\n@@ -305,6 +310,9 @@ public function updateHistory($section=null) {\n         $db->insertObject($trackingObject,'tracking_rawdata');\n     }\n \n+    /**\n+     * Assign url_type & url_style\n+     */\n     public function splitURL() {\n         global $db;\n \n@@ -317,27 +325,31 @@ public function splitURL() {\n \n             // remove empty first and last url_parts if they exist\n             //if (empty($this->url_parts[count($this->url_parts)-1])) array_pop($this->url_parts);\n-            if ($this->url_parts[count($this->url_parts)-1] == '') array_pop($this->url_parts);\n-            if (empty($this->url_parts[0])) array_shift($this->url_parts);\n+            if ($this->url_parts[count($this->url_parts)-1] == '')\n+                array_pop($this->url_parts);\n+            if (empty($this->url_parts[0]))\n+                array_shift($this->url_parts);\n+            else\n+                $this->url_parts[0] = expString::escape($this->url_parts[0]);\n \n             if (count($this->url_parts) < 1 || (empty($this->url_parts[0]) && count($this->url_parts) == 1) ) {\n                 $this->url_type = 'base';  // no params\n-            } elseif (count($this->url_parts) == 1 || $db->selectObject('section', \"sef_name='\" . substr($this->sefPath,1) . \"'\") != null) {\n+            } elseif (count($this->url_parts) == 1 || $db->selectObject('section', \"sef_name='\" . substr($this->sefPath, 1) . \"'\") != null) {\n                 $this->url_type = 'page';  // single param is page name\n             } elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n                 $this->url_type = 'post';  // params via form/post\n             } else {\n                 // take a peek and see if a page exists with the same name as the first value...if so we probably have a page with\n                 // extra perms...like printerfriendly=1 or ajax_action=1;\n-                if (($db->selectObject('section', \"sef_name='\" . $this->url_parts[0] . \"'\") != null) && (in_array(array('printerfriendly','exportaspdf','ajax_action'), $this->url_parts))) {\n+                if (($db->selectObject('section', \"sef_name='\" . $this->url_parts[0]) . \"'\" != null) && (in_array(array('printerfriendly','exportaspdf','ajax_action'), $this->url_parts))) {\n                     $this->url_type = 'page';\n                 } else {\n                     $this->url_type = 'action';\n                 }\n             }\n             $this->params = $this->convertPartsToParams();\n         } elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n-            $this->url_style = 'sef';\n+            $this->url_style = 'sef';  // even if it's old school, they all come in the same\n             $this->url_type = 'post';\n             $this->params = $this->convertPartsToParams();\n         } elseif (isset($_SERVER['REQUEST_URI'])) {\n@@ -350,6 +362,7 @@ public function splitURL() {\n                 $sefPath = explode('%22%3E',$_SERVER['REQUEST_URI']);  // remove any attempts to close the command\n                 $_SERVER['REQUEST_URI'] = $sefPath[0];\n                 $this->url_style = 'query';\n+                //note 'query' doesn't need $params\n             }\n         } else {\n             $this->url_type = 'base';\n@@ -362,6 +375,11 @@ public function splitURL() {\n         define('EXPORT_AS_PDF_LANDSCAPE', (isset($_REQUEST['landscapepdf']) || isset($this->params['landscapepdf'])) ? 1 : 0);\n     }\n \n+    /**\n+     * Set up for page request, but check store category/product also\n+     *\n+     * @return bool\n+     */\n     public function routePageRequest() {\n //        global $db;\n \n@@ -430,7 +448,7 @@ public function routePageRequest() {\n                     return $this->routeActionRequest();\n                 }\n //fixme we may want to log missed pages (no existing store cat/product) requests and set up/use a redirect table (404)??\n-//fixme and we may also want to log any redirects taken??\n+//fixme and we may also want to log any redirects taken from that table??\n                 return false;\n             }\n             #########################################################\n@@ -493,14 +511,20 @@ public function isMappedURL() {\n                     }\n                 }\n \n-                $this->params = $this->convertPartsToParams();\n+                $this->params = $this->convertPartsToParams(); // update params to new re-mapped url_parts\n+                //fixme do we need to re-sanitize them???\n                 return true;\n             }\n         }\n \n         return false;\n     }\n \n+    /**\n+     * Check and set up for an action request\n+     *\n+     * @return bool\n+     */\n     public function routeActionRequest() {\n         $return_params = array('controller'=>'','action'=>'','url_parts'=>array());\n \n@@ -520,7 +544,7 @@ public function routeActionRequest() {\n         // now figure out the name<=>value pairs\n         if (count($this->url_parts) == 3) {\n             if ( is_numeric($this->url_parts[2])) {\n-                $return_params['url_parts']['id'] = $this->url_parts[2];\n+                $return_params['url_parts']['id'] = intval($this->url_parts[2]);\n             }\n         } else {\n             for ($i = 2, $iMax = count($this->url_parts); $i < $iMax; $i++) {\n@@ -530,10 +554,8 @@ public function routeActionRequest() {\n             }\n         }\n \n-        // Set the module or controller - this how the actual routing happens\n-        $_REQUEST[$requestType] = $return_params['controller']; //url_parts[0];\n-        $_GET[$requestType] = $return_params['controller'];\n-        $_POST[$requestType] = $return_params['controller'];\n+        // Set the controller - this how the actual routing happens\n+        $_REQUEST[$requestType] = $_GET[$requestType] = $_POST[$requestType] = $return_params['controller'];\n \n         // Set the action for this module or controller\n         if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n@@ -544,15 +566,11 @@ public function routeActionRequest() {\n             $action = $return_params['action'];\n         }\n \n-        $_REQUEST['action'] = $action;\n-        $_GET['action'] = $action;\n-        $_POST['action'] = $action;\n+        $_REQUEST['action'] = $_GET['action'] = $_POST['action'] = $action;\n \n-        // pass off the name<=>value pairs\n+        // pass off the name<=>value pairs for old school url\n         foreach($return_params['url_parts'] as $key=>$value) {\n-            $save_value = expString::sanitize($value);\n-            $_REQUEST[$key] = $save_value;\n-            $_GET[$key] = $save_value;\n+            $_REQUEST[$key] = $_GET[$key] = expString::sanitize($value);\n         }\n \n         return true;\n@@ -561,7 +579,16 @@ public function routeActionRequest() {\n     public function buildCurrentUrl() {\n         $url =  URL_BASE;\n         if ($this->url_style == 'sef') {\n-            $url .= substr(PATH_RELATIVE,0,-1).$this->sefPath;\n+            if (count($this->params) > 2) {\n+                $url .= substr(PATH_RELATIVE,0,-1).'/'.$this->params['controller'].'/'.$this->params['action'];\n+                foreach ($this->params as $key=>$value) {\n+                    if ($key != 'controller' && $key != 'action') {\n+                        $url .= '/' . $key . '/' . $value;\n+                    }\n+                }\n+            } else {\n+                $url .= substr(PATH_RELATIVE,0,-1).$this->sefPath;  //fixme do we need to clean this up?\n+            }\n         } else {\n             $url .= urldecode((empty($_SERVER['REQUEST_URI'])) ? $_ENV['REQUEST_URI'] : $_SERVER['REQUEST_URI']);\n         }\n@@ -665,6 +692,11 @@ public function convertToOldSchoolUrl() {\n         return $this->makeLink($params, true);\n     }\n \n+    /**\n+     * Convert url_parts() or $_REQUEST to $params\n+     *\n+     * @return array|string\n+     */\n     public function convertPartsToParams() {\n         $params = array();\n         if ($this->url_type == 'base') {\n@@ -681,7 +713,8 @@ public function convertPartsToParams() {\n                 }\n             }\n         } elseif ($this->url_type == 'post') {\n-            if (isset($_REQUEST['PHPSESSID'])) unset($_REQUEST['PHPSESSID']);\n+            if (isset($_REQUEST['PHPSESSID']))\n+                unset($_REQUEST['PHPSESSID']);\n //            foreach($_REQUEST as $name=>$val) {\n ////                if (get_magic_quotes_gpc()) $val = stripslashes($val);  // magic quotes fix??\n ////                $params[$name] = $val;\n@@ -693,9 +726,28 @@ public function convertPartsToParams() {\n         }\n         //TODO: fully sanitize all params values here for ---We already do this!\n //        if (isset($params['src'])) $params['src'] = expString::sanitize(htmlspecialchars($params['src']));\n+        // conventional method to ensure the 'id' is only an id\n+        if (isset($params['id'])) {\n+            $params['id'] = intval($params['id']);\n+        }\n+        // do the same for the other id's\n+        foreach ($params as $key=>$var) {\n+            if (is_string($var) && strlen($key) >= 3 && strrpos($key,'_id',-3) !== false) {\n+                $params[$key] = intval($params[$key]);\n+            }\n+            if ($key == 'src') {\n+                $params[$key] = preg_replace(\"/[^A-Za-z0-9@-]/\", '', $params[$key]);\n+            }\n+        }\n         return $params;\n     }\n \n+    /**\n+     * Attempt to locate a page by name or id\n+     *\n+     * @param $url_name\n+     * @return null|object|void\n+     */\n     public function getPageByName($url_name) {\n         global $db;\n \n@@ -721,6 +773,10 @@ public function getPageByName($url_name) {\n         return $section;\n     }\n \n+    /**\n+     * Get the SEF URL from the server\n+     * if we got an old school url, it will only contain the 'index.php'\n+     */\n     private function buildSEFPath () {\n         // Apache\n         if (strpos($_SERVER['SERVER_SOFTWARE'],'Apache') !== false || strpos($_SERVER['SERVER_SOFTWARE'],'WebServerX') !== false) {\n@@ -775,7 +831,8 @@ private function buildSEFPath () {\n                 }\n             }\n         }\n-        if (substr($this->sefPath,-1) == \"/\") $this->sefPath = substr($this->sefPath,0,-1);\n+        if (substr($this->sefPath,-1) == \"/\")\n+            $this->sefPath = substr($this->sefPath,0,-1);  //fixme isn't this redundant from above?\n         // sanitize it\n         $sefPath = explode('\">',$this->sefPath);  // remove any attempts to close the command\n         $this->sefPath = expString::escape(expString::sanitize($sefPath[0]));"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "accea125b51d63319e69715a30f762be0e07845d",
            "date": "2024-12-26T16:54:42Z",
            "author_login": "dleffler"
          },
          {
            "sha": "7ca4bea4baabe3ffacff195a0ce1b1dab2ab11eb",
            "date": "2024-12-26T14:53:00Z",
            "author_login": "dleffler"
          },
          {
            "sha": "94b89d4cd98076976ef3c77f7bdc91fb874c70cd",
            "date": "2024-12-26T14:47:17Z",
            "author_login": "dleffler"
          },
          {
            "sha": "72ac0af81fdd733084a5164093ca33dcd41f8df0",
            "date": "2024-12-26T12:33:23Z",
            "author_login": "dleffler"
          },
          {
            "sha": "ababe76855ae7f303eedd9a581964ab8cae56097",
            "date": "2024-12-26T09:35:40Z",
            "author_login": "dleffler"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-89",
    "description": "SQL Injection in framework/core/subsystems/expRouter.php in Exponent CMS v2.4.0 allows remote attackers to read database information via address/addContentToSearch/id/ and a trailing string, related to a \"sef URL\" issue.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2016-11-11T22:59:01.153",
    "last_modified": "2024-11-21T03:00:54.563",
    "fix_date": "2016-11-04T01:34:43Z"
  },
  "references": [
    {
      "url": "http://www.securityfocus.com/bid/94296",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.securitytracker.com/id/1037281",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/exponentcms/exponent-cms/commit/559792be727f4e731bfcb3935f5beec7749e9ce9",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/94296",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.securitytracker.com/id/1037281",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/exponentcms/exponent-cms/commit/559792be727f4e731bfcb3935f5beec7749e9ce9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:49.793334",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "exponent-cms",
    "owner": "exponentcms",
    "created_at": "2011-01-07T01:29:32Z",
    "updated_at": "2024-12-26T16:56:12Z",
    "pushed_at": "2024-12-30T15:54:53Z",
    "size": 227121,
    "stars": 60,
    "forks": 24,
    "open_issues": 152,
    "watchers": 60,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 11116843,
      "Smarty": 6027231,
      "JavaScript": 734249,
      "CSS": 260721,
      "Less": 171892,
      "SCSS": 22697
    },
    "commit_activity": {
      "total_commits_last_year": 79,
      "avg_commits_per_week": 1.5192307692307692,
      "days_active_last_year": 28
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T07:37:32.376467"
  }
}