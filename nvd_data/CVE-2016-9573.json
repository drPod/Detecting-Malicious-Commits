{
  "cve_id": "CVE-2016-9573",
  "github_data": {
    "repository": "uclouvain/openjpeg",
    "fix_commit": "7b28bd2b723df6be09fe7791eba33147c1c47d0d",
    "related_commits": [
      "7b28bd2b723df6be09fe7791eba33147c1c47d0d",
      "7b28bd2b723df6be09fe7791eba33147c1c47d0d"
    ],
    "patch_url": "https://github.com/uclouvain/openjpeg/commit/7b28bd2b723df6be09fe7791eba33147c1c47d0d.patch",
    "fix_commit_details": {
      "sha": "7b28bd2b723df6be09fe7791eba33147c1c47d0d",
      "commit_date": "2016-11-28T20:57:20Z",
      "author": {
        "login": "szukw000",
        "type": "User",
        "stats": {
          "total_commits": 22,
          "average_weekly_commits": 0.019927536231884056,
          "total_additions": 5444,
          "total_deletions": 3962,
          "weeks_active": 13
        }
      },
      "commit_message": {
        "title": "Changes for issues #863 and #862",
        "length": 32,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 101,
        "additions": 90,
        "deletions": 11
      },
      "files": [
        {
          "filename": "src/bin/jp2/convert.c",
          "status": "modified",
          "additions": 53,
          "deletions": 6,
          "patch": "@@ -906,7 +906,8 @@ int imagetotga(opj_image_t * image, const char *outfile) {\n     for (i = 0; i < image->numcomps-1; i++)\t{\n         if ((image->comps[0].dx != image->comps[i+1].dx)\n                 ||(image->comps[0].dy != image->comps[i+1].dy)\n-                ||(image->comps[0].prec != image->comps[i+1].prec))\t{\n+                ||(image->comps[0].prec != image->comps[i+1].prec)\n+\t\t\t\t||(image->comps[0].sgnd != image->comps[i+1].sgnd))\t{\n             fclose(fdest);\n             fprintf(stderr, \"Unable to create a tga file with such J2K image charateristics.\");\n             return 1;\n@@ -1743,7 +1744,7 @@ int imagetopnm(opj_image_t * image, const char *outfile, int force_split)\n     int *red, *green, *blue, *alpha;\n     int wr, hr, max;\n     int i;\n-    unsigned int compno, ncomp;\n+    unsigned int compno, ncomp, ui;\n     int adjustR, adjustG, adjustB, adjustA;\n     int fails, two, want_gray, has_alpha, triple;\n     int prec, v;\n@@ -1768,6 +1769,27 @@ int imagetopnm(opj_image_t * image, const char *outfile, int force_split)\n \n     if(want_gray) ncomp = 1;\n \n+    for (ui = 1; ui < ncomp; ++ui) {\n+        if (image->comps[0].dx != image->comps[ui].dx) {\n+            break;\n+        }\n+        if (image->comps[0].dy != image->comps[ui].dy) {\n+            break;\n+        }\n+        if (image->comps[0].prec != image->comps[ui].prec) {\n+            break;\n+        }\n+        if (image->comps[0].sgnd != image->comps[ui].sgnd) {\n+            break;\n+        }\n+    }\n+    if (ui != ncomp) {\n+        fprintf(stderr,\"imagetopnm: All components\\n    shall have \"\n+         \"the same subsampling, same bit depth, same sign.\\n\"\n+         \"    Aborting\\n\");\n+        return 1;\n+    }\n+\n     if ((force_split == 0) &&\n \t\t\t\t(ncomp == 2 /* GRAYA */\n             || (ncomp > 2 /* RGB, RGBA */\n@@ -2126,7 +2148,7 @@ static int imagetoraw_common(opj_image_t * image, const char *outfile, OPJ_BOOL\n {\n     FILE *rawFile = NULL;\n     size_t res;\n-    unsigned int compno;\n+    unsigned int compno, numcomps;\n     int w, h, fails;\n     int line, row, curr, mask;\n     int *ptr;\n@@ -2139,16 +2161,41 @@ static int imagetoraw_common(opj_image_t * image, const char *outfile, OPJ_BOOL\n         return 1;\n     }\n \n+    numcomps = image->numcomps;\n+\n+    if (numcomps > 4) {\n+        numcomps = 4;\n+    }\n+    for (compno = 1; compno < numcomps; ++compno) {\n+        if (image->comps[0].dx != image->comps[compno].dx) {\n+            break;\n+        }\n+        if (image->comps[0].dy != image->comps[compno].dy) {\n+            break;\n+        }\n+        if (image->comps[0].prec != image->comps[compno].prec) {\n+            break;\n+        }\n+        if (image->comps[0].sgnd != image->comps[compno].sgnd) {\n+            break;\n+        }\n+    }\n+    if (compno != numcomps) {\n+        fprintf(stderr,\"imagetoraw_common: All components shall have the same subsampling, same bit depth, same sign.\\n\");\n+        fprintf(stderr,\"\\tAborting\\n\");\n+        return 1;\n+    }\n+\n     rawFile = fopen(outfile, \"wb\");\n     if (!rawFile) {\n         fprintf(stderr, \"Failed to open %s for writing !!\\n\", outfile);\n         return 1;\n     }\n \n     fails = 1;\n-    fprintf(stdout,\"Raw image characteristics: %d components\\n\", image->numcomps);\n+    fprintf(stdout,\"Raw image characteristics: %d components\\n\", numcomps);\n \n-    for(compno = 0; compno < image->numcomps; compno++)\n+    for(compno = 0; compno < numcomps; compno++)\n     {\n         fprintf(stdout,\"Component %u characteristics: %dx%dx%d %s\\n\", compno, image->comps[compno].w,\n                 image->comps[compno].h, image->comps[compno].prec, image->comps[compno].sgnd==1 ? \"signed\": \"unsigned\");\n@@ -2238,7 +2285,7 @@ static int imagetoraw_common(opj_image_t * image, const char *outfile, OPJ_BOOL\n         }\n         else if (image->comps[compno].prec <= 32)\n         {\n-            fprintf(stderr,\"More than 16 bits per component no handled yet\\n\");\n+            fprintf(stderr,\"More than 16 bits per component not handled yet\\n\");\n             goto fin;\n         }\n         else"
        },
        {
          "filename": "src/bin/jp2/convertbmp.c",
          "status": "modified",
          "additions": 28,
          "deletions": 1,
          "patch": "@@ -806,8 +806,35 @@ int imagetobmp(opj_image_t * image, const char *outfile) {\n     FILE *fdest = NULL;\n     int adjustR, adjustG, adjustB;\n \n+   {\n+    unsigned int ui, ncomp = image->numcomps;\n+\n+    if (ncomp > 4) { /* RGBA in bmpmask32toimage */\n+        ncomp = 4;\n+    }\n+    for (ui = 1; ui < ncomp; ++ui) {\n+        if (image->comps[0].dx != image->comps[ui].dx) {\n+            break;\n+        }\n+        if (image->comps[0].dy != image->comps[ui].dy) {\n+            break;\n+        }\n+        if (image->comps[0].prec != image->comps[ui].prec) {\n+            break;\n+        }\n+        if (image->comps[0].sgnd != image->comps[ui].sgnd) {\n+            break;\n+        }\n+    }\n+    if (ui != ncomp) {\n+        fprintf(stderr,\"imagetobmp: All components shall have the same subsampling, same bit depth, same sign.\\n\");\n+        fprintf(stderr,\"\\tAborting\\n\");\n+        return 1;\n+    }\n+\n+   }\n     if (image->comps[0].prec < 8) {\n-        fprintf(stderr, \"Unsupported number of components: %d\\n\", image->comps[0].prec);\n+        fprintf(stderr, \"imagetobmp: Unsupported precision: %d\\n\", image->comps[0].prec);\n         return 1;\n     }\n     if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx"
        },
        {
          "filename": "src/bin/jp2/opj_decompress.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1607,7 +1607,7 @@ int main(int argc, char **argv)\n \t\tif(dirptr->filename_buf) free(dirptr->filename_buf);\n \t\tfree(dirptr);\n \t}\n-\tif (numDecompressedImages) {\n+\tif (numDecompressedImages && !failed) {\n \t\tfprintf(stdout, \"decode time: %d ms\\n\", (int)( (tCumulative * 1000.0) / (OPJ_FLOAT64)numDecompressedImages));\n \t}\n \treturn failed ? EXIT_FAILURE : EXIT_SUCCESS;"
        },
        {
          "filename": "src/lib/openjp2/j2k.c",
          "status": "modified",
          "additions": 8,
          "deletions": 3,
          "patch": "@@ -2158,7 +2158,7 @@ static OPJ_BOOL opj_j2k_read_siz(opj_j2k_t *p_j2k,\n                                   i, l_img_comp->dx, l_img_comp->dy);\n                     return OPJ_FALSE;\n                 }\n-                if( l_img_comp->prec > 38) { /* TODO openjpeg won't handle more than ? */\n+                if( l_img_comp->prec < 1 || l_img_comp->prec > 38) { /* TODO openjpeg won't handle more than ? */\n                     opj_event_msg(p_manager, EVT_ERROR,\n                                   \"Invalid values for comp = %d : prec=%u (should be between 1 and 38 according to the JPEG2000 norm)\\n\",\n                                   i, l_img_comp->prec);\n@@ -10029,15 +10029,18 @@ OPJ_BOOL opj_j2k_decode(opj_j2k_t * p_j2k,\n         /* Move data and copy one information from codec to output image*/\n         for (compno = 0; compno < p_image->numcomps; compno++) {\n                 p_image->comps[compno].resno_decoded = p_j2k->m_output_image->comps[compno].resno_decoded;\n-                p_image->comps[compno].data = p_j2k->m_output_image->comps[compno].data;\n+\t\tp_image->comps[compno].data = p_j2k->m_output_image->comps[compno].data;\n+\n+\t\tif(p_image->comps[compno].data == NULL) return OPJ_FALSE;\n+\n+                p_j2k->m_output_image->comps[compno].data = NULL;\n #if 0\n                 char fn[256];\n                 sprintf( fn, \"/tmp/%d.raw\", compno );\n                 FILE *debug = fopen( fn, \"wb\" );\n                 fwrite( p_image->comps[compno].data, sizeof(OPJ_INT32), p_image->comps[compno].w * p_image->comps[compno].h, debug );\n                 fclose( debug );\n #endif\n-                p_j2k->m_output_image->comps[compno].data = NULL;\n         }\n \n         return OPJ_TRUE;\n@@ -10131,6 +10134,8 @@ OPJ_BOOL opj_j2k_get_tile(      opj_j2k_t *p_j2k,\n \n                 p_image->comps[compno].data = p_j2k->m_output_image->comps[compno].data;\n \n+\t\t\t\tif (p_image->comps[compno].data == NULL) return OPJ_FALSE;\n+\n                 p_j2k->m_output_image->comps[compno].data = NULL;\n         }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eb25a5ec777ff6699f4bb1187740467dcfa64dd6",
            "date": "2024-12-09T16:48:54Z",
            "author_login": "rouault"
          },
          {
            "sha": "672ecbb10a8b74f6723e2e9bf062ac0f10625f98",
            "date": "2024-12-09T16:37:23Z",
            "author_login": "rouault"
          },
          {
            "sha": "210a8a5690d0da66f02d49420d7176a21ef409dc",
            "date": "2024-12-09T16:31:23Z",
            "author_login": "rouault"
          },
          {
            "sha": "e2cf50f68a51f4bbe09c400d8bcfb522e9f2bef2",
            "date": "2024-12-09T16:31:02Z",
            "author_login": "rouault"
          },
          {
            "sha": "4e3412d0a0777a12fddf0b469fd09771a2678bad",
            "date": "2024-12-09T16:27:18Z",
            "author_login": "rouault"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-125",
    "description": "An out-of-bounds read vulnerability was found in OpenJPEG 2.1.2, in the j2k_to_image tool. Converting a specially crafted JPEG2000 file to another format could cause the application to crash or, potentially, disclose some data from the heap.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-08-01T06:29:00.537",
    "last_modified": "2024-11-21T03:01:25.000",
    "fix_date": "2016-11-28T20:57:20Z"
  },
  "references": [
    {
      "url": "http://rhn.redhat.com/errata/RHSA-2017-0838.html",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97073",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-9573",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/szukw000/openjpeg/commit/7b28bd2b723df6be09fe7791eba33147c1c47d0d",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/uclouvain/openjpeg/issues/862",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201710-26",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2017/dsa-3768",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://rhn.redhat.com/errata/RHSA-2017-0838.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97073",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-9573",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/szukw000/openjpeg/commit/7b28bd2b723df6be09fe7791eba33147c1c47d0d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/uclouvain/openjpeg/issues/862",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201710-26",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2017/dsa-3768",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:32.421702",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openjpeg",
    "owner": "uclouvain",
    "created_at": "2015-02-15T15:04:29Z",
    "updated_at": "2025-01-14T10:29:19Z",
    "pushed_at": "2024-12-09T16:48:56Z",
    "size": 135125,
    "stars": 995,
    "forks": 463,
    "open_issues": 333,
    "watchers": 995,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 3036412,
      "C++": 338909,
      "CMake": 114732,
      "Java": 94066,
      "Shell": 36099,
      "Python": 11488,
      "Inno Setup": 1876,
      "HTML": 1412,
      "Makefile": 352
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:46:56.605469"
  }
}