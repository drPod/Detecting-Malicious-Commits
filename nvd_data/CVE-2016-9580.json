{
  "cve_id": "CVE-2016-9580",
  "github_data": {
    "repository": "uclouvain/openjpeg",
    "fix_commit": "cadff5fb6e73398de26a92e96d3d7cac893af255",
    "related_commits": [
      "cadff5fb6e73398de26a92e96d3d7cac893af255",
      "cadff5fb6e73398de26a92e96d3d7cac893af255"
    ],
    "patch_url": "https://github.com/uclouvain/openjpeg/commit/cadff5fb6e73398de26a92e96d3d7cac893af255.patch",
    "fix_commit_details": {
      "sha": "cadff5fb6e73398de26a92e96d3d7cac893af255",
      "commit_date": "2016-12-09T07:29:55Z",
      "author": {
        "login": "szukw000",
        "type": "User",
        "stats": {
          "total_commits": 22,
          "average_weekly_commits": 0.019927536231884056,
          "total_additions": 5444,
          "total_deletions": 3962,
          "weeks_active": 13
        }
      },
      "commit_message": {
        "title": "These changes repair bugs of #871 and #872",
        "length": 42,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 107,
        "additions": 70,
        "deletions": 37
      },
      "files": [
        {
          "filename": "src/bin/jp2/converttif.c",
          "status": "modified",
          "additions": 70,
          "deletions": 37,
          "patch": "@@ -553,20 +553,18 @@ static void tif_32sto16u(const OPJ_INT32* pSrc, OPJ_UINT16* pDst, OPJ_SIZE_T len\n \n int imagetotif(opj_image_t * image, const char *outfile)\n {\n-\tint width, height;\n-\tint bps,adjust, sgnd;\n-\tint tiPhoto;\n+\tuint32 width, height, bps, tiPhoto;\n+\tint adjust, sgnd;\n \tTIFF *tif;\n \ttdata_t buf;\n-\ttsize_t strip_size;\n+\ttmsize_t strip_size, rowStride;\n \tOPJ_UINT32 i, numcomps;\n-\tOPJ_SIZE_T rowStride;\n \tOPJ_INT32* buffer32s = NULL;\n \tOPJ_INT32 const* planes[4];\n \tconvert_32s_PXCX cvtPxToCx = NULL;\n \tconvert_32sXXx_C1R cvt32sToTif = NULL;\n \n-\tbps = (int)image->comps[0].prec;\n+\tbps = (uint32)image->comps[0].prec;\n \tplanes[0] = image->comps[0].data;\n \t\n \tnumcomps = image->numcomps;\n@@ -674,22 +672,22 @@ int imagetotif(opj_image_t * image, const char *outfile)\n \t\t\tbreak;\n \t}\n \tsgnd = (int)image->comps[0].sgnd;\n-\tadjust = sgnd ? 1 << (image->comps[0].prec - 1) : 0;\n-\twidth   = (int)image->comps[0].w;\n-\theight  = (int)image->comps[0].h;\n+\tadjust = sgnd ? (int)(1 << (image->comps[0].prec - 1)) : 0;\n+\twidth   = (uint32)image->comps[0].w;\n+\theight  = (uint32)image->comps[0].h;\n \t\n \tTIFFSetField(tif, TIFFTAG_IMAGEWIDTH, width);\n \tTIFFSetField(tif, TIFFTAG_IMAGELENGTH, height);\n-\tTIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, numcomps);\n+\tTIFFSetField(tif, TIFFTAG_SAMPLESPERPIXEL, (uint32)numcomps);\n \tTIFFSetField(tif, TIFFTAG_BITSPERSAMPLE, bps);\n \tTIFFSetField(tif, TIFFTAG_ORIENTATION, ORIENTATION_TOPLEFT);\n \tTIFFSetField(tif, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);\n \tTIFFSetField(tif, TIFFTAG_PHOTOMETRIC, tiPhoto);\n \tTIFFSetField(tif, TIFFTAG_ROWSPERSTRIP, 1);\n \t\n \tstrip_size = TIFFStripSize(tif);\n-\trowStride = ((OPJ_SIZE_T)width * numcomps * (OPJ_SIZE_T)bps + 7U) / 8U;\n-\tif (rowStride != (OPJ_SIZE_T)strip_size) {\n+\trowStride = (width * numcomps * bps + 7U) / 8U;\n+\tif (rowStride != strip_size) {\n \t\tfprintf(stderr, \"Invalid TIFF strip size\\n\");\n \t\tTIFFClose(tif);\n \t\treturn 1;\n@@ -699,7 +697,7 @@ int imagetotif(opj_image_t * image, const char *outfile)\n \t\tTIFFClose(tif);\n \t\treturn 1;\n \t}\n-\tbuffer32s = (OPJ_INT32 *)malloc((OPJ_SIZE_T)width * numcomps * sizeof(OPJ_INT32));\n+\tbuffer32s = (OPJ_INT32 *)malloc((OPJ_SIZE_T)(width * numcomps * sizeof(OPJ_INT32)));\n \tif (buffer32s == NULL) {\n \t\t_TIFFfree(buf);\n \t\tTIFFClose(tif);\n@@ -1211,20 +1209,19 @@ opj_image_t* tiftoimage(const char *filename, opj_cparameters_t *parameters)\n \tTIFF *tif;\n \ttdata_t buf;\n \ttstrip_t strip;\n-\ttsize_t strip_size;\n+\ttmsize_t strip_size;\n \tint j, currentPlane, numcomps = 0, w, h;\n \tOPJ_COLOR_SPACE color_space = OPJ_CLRSPC_UNKNOWN;\n \topj_image_cmptparm_t cmptparm[4]; /* RGBA */\n \topj_image_t *image = NULL;\n \tint has_alpha = 0;\n-\tunsigned short tiBps, tiPhoto, tiSf, tiSpp, tiPC;\n-\tunsigned int tiWidth, tiHeight;\n+\tuint32 tiBps, tiPhoto, tiSf, tiSpp, tiPC, tiWidth, tiHeight;\n \tOPJ_BOOL is_cinema = OPJ_IS_CINEMA(parameters->rsiz);\n \tconvert_XXx32s_C1R cvtTifTo32s = NULL;\n \tconvert_32s_CXPX cvtCxToPx = NULL;\n \tOPJ_INT32* buffer32s = NULL;\n \tOPJ_INT32* planes[4];\n-\tOPJ_SIZE_T rowStride;\n+\ttmsize_t rowStride;\n \t\n \ttif = TIFFOpen(filename, \"r\");\n \t\n@@ -1243,22 +1240,35 @@ opj_image_t* tiftoimage(const char *filename, opj_cparameters_t *parameters)\n \tTIFFGetField(tif, TIFFTAG_SAMPLESPERPIXEL, &tiSpp);\n \tTIFFGetField(tif, TIFFTAG_PHOTOMETRIC, &tiPhoto);\n \tTIFFGetField(tif, TIFFTAG_PLANARCONFIG, &tiPC);\n-\tw= (int)tiWidth;\n-\th= (int)tiHeight;\n-\t\n-\tif(tiBps > 16U) {\n-\t\tfprintf(stderr,\"tiftoimage: Bits=%d, Only 1 to 16 bits implemented\\n\",tiBps);\n-\t\tfprintf(stderr,\"\\tAborting\\n\");\n+\n+\tif(tiSpp == 0 || tiSpp > 4) { /* should be 1 ... 4 */\n+\t\tfprintf(stderr,\"tiftoimage: Bad value for samples per pixel == %hu.\\n\"\n+\t\t \"\\tAborting.\\n\", tiSpp);\n+\t\tTIFFClose(tif);\n+\t\treturn NULL;\n+\t}\n+\tif(tiBps > 16U || tiBps == 0) {\n+\t\tfprintf(stderr,\"tiftoimage: Bad values for Bits == %d.\\n\"\n+\t\t \"\\tMax. 16 Bits are allowed here.\\n\\tAborting.\\n\",tiBps);\n \t\tTIFFClose(tif);\n \t\treturn NULL;\n \t}\n \tif(tiPhoto != PHOTOMETRIC_MINISBLACK && tiPhoto != PHOTOMETRIC_RGB) {\n-\t\tfprintf(stderr,\"tiftoimage: Bad color format %d.\\n\\tOnly RGB(A) and GRAY(A) has been implemented\\n\",(int) tiPhoto);\n+\t\tfprintf(stderr,\"tiftoimage: Bad color format %d.\\n\"\n+\t\t \"\\tOnly RGB(A) and GRAY(A) has been implemented\\n\",(int) tiPhoto);\n \t\tfprintf(stderr,\"\\tAborting\\n\");\n \t\tTIFFClose(tif);\n \t\treturn NULL;\n \t}\n-\t\n+\tif(tiWidth == 0 || tiHeight == 0) {\n+\t\tfprintf(stderr,\"tiftoimage: Bad values for width(%u) \"\n+\t\t \"and/or height(%u)\\n\\tAborting.\\n\",tiWidth,tiHeight);\n+\t\tTIFFClose(tif);\n+\t\treturn NULL;\n+\t}\n+\tw= (int)tiWidth;\n+\th= (int)tiHeight;\n+\n \tswitch (tiBps) {\n \t\tcase 1:\n \t\tcase 2:\n@@ -1312,7 +1322,7 @@ opj_image_t* tiftoimage(const char *filename, opj_cparameters_t *parameters)\n \t\t\n \t\tTIFFGetFieldDefaulted(tif, TIFFTAG_EXTRASAMPLES,\n \t\t\t\t\t\t\t\t\t\t\t\t\t&extrasamples, &sampleinfo);\n-\t\t\n+\n \t\tif(extrasamples >= 1)\n \t\t{\n \t\t\tswitch(sampleinfo[0])\n@@ -1333,7 +1343,7 @@ opj_image_t* tiftoimage(const char *filename, opj_cparameters_t *parameters)\n \t\telse /* extrasamples == 0 */\n \t\t\tif(tiSpp == 4 || tiSpp == 2) has_alpha = 1;\n \t}\n-\t\n+\n \t/* initialize image components */\n \tmemset(&cmptparm[0], 0, 4 * sizeof(opj_image_cmptparm_t));\n \t\n@@ -1346,7 +1356,7 @@ opj_image_t* tiftoimage(const char *filename, opj_cparameters_t *parameters)\n \t} else {\n \t\tis_cinema = 0U;\n \t}\n-\t\n+\n \tif(tiPhoto == PHOTOMETRIC_RGB) /* RGB(A) */\n \t{\n \t\tnumcomps = 3 + has_alpha;\n@@ -1384,26 +1394,40 @@ opj_image_t* tiftoimage(const char *filename, opj_cparameters_t *parameters)\n \timage->x0 = (OPJ_UINT32)parameters->image_offset_x0;\n \timage->y0 = (OPJ_UINT32)parameters->image_offset_y0;\n \timage->x1 =\t!image->x0 ? (OPJ_UINT32)(w - 1) * (OPJ_UINT32)subsampling_dx + 1 :\n-\timage->x0 + (OPJ_UINT32)(w - 1) * (OPJ_UINT32)subsampling_dx + 1;\n+\t image->x0 + (OPJ_UINT32)(w - 1) * (OPJ_UINT32)subsampling_dx + 1;\n+\tif(image->x1 <= image->x0) {\n+\t\tfprintf(stderr,\"tiftoimage: Bad value for image->x1(%d) vs. \"\n+\t\t \"image->x0(%d)\\n\\tAborting.\\n\",image->x1,image->x0);\n+\t\tTIFFClose(tif);\n+\t\topj_image_destroy(image);\n+\t\treturn NULL;\n+\t}\n \timage->y1 =\t!image->y0 ? (OPJ_UINT32)(h - 1) * (OPJ_UINT32)subsampling_dy + 1 :\n-\timage->y0 + (OPJ_UINT32)(h - 1) * (OPJ_UINT32)subsampling_dy + 1;\n-\n+\t image->y0 + (OPJ_UINT32)(h - 1) * (OPJ_UINT32)subsampling_dy + 1;\n+\tif(image->y1 <= image->y0) {\n+\t\tfprintf(stderr,\"tiftoimage: Bad value for image->y1(%d) vs. \"\n+\t\t \"image->y0(%d)\\n\\tAborting.\\n\",image->y1,image->y0);\n+\t\tTIFFClose(tif);\n+\t\topj_image_destroy(image);\n+\t\treturn NULL;\n+\t}\n+\t\n \tfor(j = 0; j < numcomps; j++)\n \t{\n \t\tplanes[j] = image->comps[j].data;\n \t}\n \timage->comps[numcomps - 1].alpha = (OPJ_UINT16)(1 - (numcomps & 1));\n \t\t\n \tstrip_size = TIFFStripSize(tif);\n-\t\n+\n \tbuf = _TIFFmalloc(strip_size);\n \tif (buf == NULL) {\n \t\tTIFFClose(tif);\n \t\topj_image_destroy(image);\n \t\treturn NULL;\n \t}\n-\trowStride = ((OPJ_SIZE_T)w * tiSpp * tiBps + 7U) / 8U;\n-\tbuffer32s = (OPJ_INT32 *)malloc((OPJ_SIZE_T)w * tiSpp * sizeof(OPJ_INT32));\n+\trowStride = (w * tiSpp * tiBps + 7U) / 8U;\n+\tbuffer32s = (OPJ_INT32 *)malloc((OPJ_SIZE_T)(w * tiSpp * sizeof(OPJ_INT32)));\n \tif (buffer32s == NULL) {\n \t\t_TIFFfree(buf);\n \t\tTIFFClose(tif);\n@@ -1421,11 +1445,20 @@ opj_image_t* tiftoimage(const char *filename, opj_cparameters_t *parameters)\n \t\tfor(; (h > 0) && (strip < TIFFNumberOfStrips(tif)); strip++)\n \t\t{\n \t\t\t\tconst OPJ_UINT8 *dat8;\n-\t\t\t\tOPJ_SIZE_T ssize;\n+\t\t\t\ttmsize_t ssize;\n \t\t\t\t\n-\t\t\t\tssize = (OPJ_SIZE_T)TIFFReadEncodedStrip(tif, strip, buf, strip_size);\n+\t\t\t\tssize = TIFFReadEncodedStrip(tif, strip, buf, strip_size);\n+\t\t\t\tif(ssize < 1 || ssize > strip_size) {\n+\t\t\t\t\tfprintf(stderr,\"tiftoimage: Bad value for ssize(%ld) \"\n+                     \"vs. strip_size(%ld).\\n\\tAborting.\\n\",ssize,strip_size);\n+\t\t\t\t\t_TIFFfree(buf);\n+\t\t\t\t\t_TIFFfree(buffer32s);\n+\t\t\t\t\tTIFFClose(tif);\n+\t\t\t\t\topj_image_destroy(image);\n+\t\t\t\t\treturn NULL;\n+\t\t\t\t}\n \t\t\t\tdat8 = (const OPJ_UINT8*)buf;\n-\t\t\t\t\n+\n \t\t\t\twhile (ssize >= rowStride) {\n \t\t\t\t\tcvtTifTo32s(dat8, buffer32s, (OPJ_SIZE_T)w * tiSpp);\n \t\t\t\t\tcvtCxToPx(buffer32s, planes, (OPJ_SIZE_T)w);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eb25a5ec777ff6699f4bb1187740467dcfa64dd6",
            "date": "2024-12-09T16:48:54Z",
            "author_login": "rouault"
          },
          {
            "sha": "672ecbb10a8b74f6723e2e9bf062ac0f10625f98",
            "date": "2024-12-09T16:37:23Z",
            "author_login": "rouault"
          },
          {
            "sha": "210a8a5690d0da66f02d49420d7176a21ef409dc",
            "date": "2024-12-09T16:31:23Z",
            "author_login": "rouault"
          },
          {
            "sha": "e2cf50f68a51f4bbe09c400d8bcfb522e9f2bef2",
            "date": "2024-12-09T16:31:02Z",
            "author_login": "rouault"
          },
          {
            "sha": "4e3412d0a0777a12fddf0b469fd09771a2678bad",
            "date": "2024-12-09T16:27:18Z",
            "author_login": "rouault"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-122",
    "description": "An integer overflow vulnerability was found in tiftoimage function in openjpeg 2.1.2, resulting in heap buffer overflow.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-08-01T16:29:00.477",
    "last_modified": "2024-11-21T03:01:25.950",
    "fix_date": "2016-12-09T07:29:55Z"
  },
  "references": [
    {
      "url": "http://www.securityfocus.com/bid/94822",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-9580",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/szukw000/openjpeg/commit/cadff5fb6e73398de26a92e96d3d7cac893af255",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/uclouvain/openjpeg/issues/871",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201710-26",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/94822",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-9580",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/szukw000/openjpeg/commit/cadff5fb6e73398de26a92e96d3d7cac893af255",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/uclouvain/openjpeg/issues/871",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201710-26",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:32.423433",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openjpeg",
    "owner": "uclouvain",
    "created_at": "2015-02-15T15:04:29Z",
    "updated_at": "2025-01-14T10:29:19Z",
    "pushed_at": "2024-12-09T16:48:56Z",
    "size": 135125,
    "stars": 995,
    "forks": 463,
    "open_issues": 333,
    "watchers": 995,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 3036412,
      "C++": 338909,
      "CMake": 114732,
      "Java": 94066,
      "Shell": 36099,
      "Python": 11488,
      "Inno Setup": 1876,
      "HTML": 1412,
      "Makefile": 352
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:46:56.605469"
  }
}