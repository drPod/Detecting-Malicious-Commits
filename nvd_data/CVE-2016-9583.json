{
  "cve_id": "CVE-2016-9583",
  "github_data": {
    "repository": "mdadams/jasper",
    "fix_commit": "aa0b0f79ade5eef8b0e7a214c03f5af54b36ba7d",
    "related_commits": [
      "aa0b0f79ade5eef8b0e7a214c03f5af54b36ba7d",
      "f25486c3d4aa472fec79150f2c41ed4333395d3d",
      "aa0b0f79ade5eef8b0e7a214c03f5af54b36ba7d",
      "f25486c3d4aa472fec79150f2c41ed4333395d3d"
    ],
    "patch_url": "https://github.com/mdadams/jasper/commit/aa0b0f79ade5eef8b0e7a214c03f5af54b36ba7d.patch",
    "fix_commit_details": {
      "sha": "aa0b0f79ade5eef8b0e7a214c03f5af54b36ba7d",
      "commit_date": "2016-11-27T01:14:09Z",
      "author": {
        "login": "mdadams",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fixed numerous integer overflow problems in the code for packet iterators",
        "length": 93,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 176,
        "additions": 102,
        "deletions": 74
      },
      "files": [
        {
          "filename": "src/libjasper/include/jasper/jas_types.h",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -116,6 +116,10 @@\n #define\tJAS_CAST(t, e) \\\n \t((t) (e))\n \n+/* The number of bits in the integeral type uint_fast32_t. */\n+/* NOTE: This could underestimate the size on some exotic architectures. */\n+#define JAS_UINTFAST32_NUMBITS (8 * sizeof(uint_fast32_t))\n+\n #ifdef __cplusplus\n extern \"C\" {\n #endif"
        },
        {
          "filename": "src/libjasper/jpc/jpc_t2cod.c",
          "status": "modified",
          "additions": 77,
          "deletions": 53,
          "patch": "@@ -198,7 +198,8 @@ static int jpc_pi_nextrlcp(register jpc_pi_t *pi)\n \t\t  JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n \t\t\tfor (pi->compno = pchg->compnostart, pi->picomp =\n \t\t\t  &pi->picomps[pi->compno]; pi->compno < pi->numcomps &&\n-\t\t\t  pi->compno < JAS_CAST(int, pchg->compnoend); ++pi->compno, ++pi->picomp) {\n+\t\t\t  pi->compno < JAS_CAST(int, pchg->compnoend); ++pi->compno,\n+\t\t\t  ++pi->picomp) {\n \t\t\t\tif (pi->rlvlno >= pi->picomp->numrlvls) {\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n@@ -247,10 +248,17 @@ static int jpc_pi_nextrpcl(register jpc_pi_t *pi)\n \t\t  ++compno, ++picomp) {\n \t\t\tfor (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\n \t\t\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {\n-\t\t\t\txstep = picomp->hsamp * (1 << (pirlvl->prcwidthexpn +\n-\t\t\t\t  picomp->numrlvls - rlvlno - 1));\n-\t\t\t\tystep = picomp->vsamp * (1 << (pirlvl->prcheightexpn +\n-\t\t\t\t  picomp->numrlvls - rlvlno - 1));\n+\t\t\t\t// Check for the potential for overflow problems.\n+\t\t\t\tif (pirlvl->prcwidthexpn + pi->picomp->numrlvls >\n+\t\t\t\t  JAS_UINTFAST32_NUMBITS - 2 ||\n+\t\t\t\t  pirlvl->prcheightexpn + pi->picomp->numrlvls >\n+\t\t\t\t  JAS_UINTFAST32_NUMBITS - 2) {\n+\t\t\t\t\treturn -1;\n+\t\t\t\t}\n+\t\t\t\txstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<\n+\t\t\t\t  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));\n+\t\t\t\tystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<\n+\t\t\t\t  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));\n \t\t\t\tpi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);\n \t\t\t\tpi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);\n \t\t\t}\n@@ -280,21 +288,24 @@ static int jpc_pi_nextrpcl(register jpc_pi_t *pi)\n \t\t\t\t\trpy = r + pi->pirlvl->prcheightexpn;\n \t\t\t\t\ttrx0 = JPC_CEILDIV(pi->xstart, pi->picomp->hsamp << r);\n \t\t\t\t\ttry0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);\n-\t\t\t\t\tif (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx)))\n-\t\t\t\t\t  || !(pi->x % (1 << rpx))) &&\n-\t\t\t\t\t  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy)))\n-\t\t\t\t\t  || !(pi->y % (1 << rpy)))) {\n-\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\n-\t\t\t\t\t\t  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,\n-\t\t\t\t\t\t  pi->pirlvl->prcwidthexpn);\n-\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\n-\t\t\t\t\t\t  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,\n-\t\t\t\t\t\t  pi->pirlvl->prcheightexpn);\n+\t\t\t\t\tif (((pi->x == pi->xstart &&\n+\t\t\t\t\t  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx)))\n+\t\t\t\t\t  || !(pi->x % (JAS_CAST(uint_fast32_t, 1) << rpx))) &&\n+\t\t\t\t\t  ((pi->y == pi->ystart &&\n+\t\t\t\t\t  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy)))\n+\t\t\t\t\t  || !(pi->y % (JAS_CAST(uint_fast32_t, 1) << rpy)))) {\n+\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,\n+\t\t\t\t\t\t  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -\n+\t\t\t\t\t\t  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);\n+\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,\n+\t\t\t\t\t\t  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -\n+\t\t\t\t\t\t  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);\n \t\t\t\t\t\tpi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;\n \n \t\t\t\t\t\tassert(pi->prcno < pi->pirlvl->numprcs);\n \t\t\t\t\t\tfor (pi->lyrno = 0; pi->lyrno <\n-\t\t\t\t\t\t  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n+\t\t\t\t\t\t  pi->numlyrs && pi->lyrno < JAS_CAST(int,\n+\t\t\t\t\t\t  pchg->lyrnoend); ++pi->lyrno) {\n \t\t\t\t\t\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n \t\t\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n \t\t\t\t\t\t\t\t++(*prclyrno);\n@@ -339,16 +350,19 @@ static int jpc_pi_nextpcrl(register jpc_pi_t *pi)\n \t\t  ++compno, ++picomp) {\n \t\t\tfor (rlvlno = 0, pirlvl = picomp->pirlvls; rlvlno <\n \t\t\t  picomp->numrlvls; ++rlvlno, ++pirlvl) {\n-\t\t\t\txstep = picomp->hsamp * (1 <<\n-\t\t\t\t  (pirlvl->prcwidthexpn + picomp->numrlvls -\n-\t\t\t\t  rlvlno - 1));\n-\t\t\t\tystep = picomp->vsamp * (1 <<\n-\t\t\t\t  (pirlvl->prcheightexpn + picomp->numrlvls -\n-\t\t\t\t  rlvlno - 1));\n-\t\t\t\tpi->xstep = (!pi->xstep) ? xstep :\n-\t\t\t\t  JAS_MIN(pi->xstep, xstep);\n-\t\t\t\tpi->ystep = (!pi->ystep) ? ystep :\n-\t\t\t\t  JAS_MIN(pi->ystep, ystep);\n+\t\t\t\t// Check for the potential for overflow problems.\n+\t\t\t\tif (pirlvl->prcwidthexpn + pi->picomp->numrlvls >\n+\t\t\t\t  JAS_UINTFAST32_NUMBITS - 2 ||\n+\t\t\t\t  pirlvl->prcheightexpn + pi->picomp->numrlvls >\n+\t\t\t\t  JAS_UINTFAST32_NUMBITS - 2) {\n+\t\t\t\t\treturn -1;\n+\t\t\t\t}\n+\t\t\t\txstep = picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<\n+\t\t\t\t  (pirlvl->prcwidthexpn + picomp->numrlvls - rlvlno - 1));\n+\t\t\t\tystep = picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<\n+\t\t\t\t  (pirlvl->prcheightexpn + picomp->numrlvls - rlvlno - 1));\n+\t\t\t\tpi->xstep = (!pi->xstep) ? xstep : JAS_MIN(pi->xstep, xstep);\n+\t\t\t\tpi->ystep = (!pi->ystep) ? ystep : JAS_MIN(pi->ystep, ystep);\n \t\t\t}\n \t\t}\n \t\tpi->prgvolfirst = 0;\n@@ -375,20 +389,23 @@ static int jpc_pi_nextpcrl(register jpc_pi_t *pi)\n \t\t\t\t\ttry0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);\n \t\t\t\t\trpx = r + pi->pirlvl->prcwidthexpn;\n \t\t\t\t\trpy = r + pi->pirlvl->prcheightexpn;\n-\t\t\t\t\tif (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx))) ||\n+\t\t\t\t\tif (((pi->x == pi->xstart &&\n+\t\t\t\t\t  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx))) ||\n \t\t\t\t\t  !(pi->x % (pi->picomp->hsamp << rpx))) &&\n-\t\t\t\t\t  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy))) ||\n+\t\t\t\t\t  ((pi->y == pi->ystart &&\n+\t\t\t\t\t  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy))) ||\n \t\t\t\t\t  !(pi->y % (pi->picomp->vsamp << rpy)))) {\n-\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\n-\t\t\t\t\t\t  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,\n-\t\t\t\t\t\t  pi->pirlvl->prcwidthexpn);\n-\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\n-\t\t\t\t\t\t  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,\n-\t\t\t\t\t\t  pi->pirlvl->prcheightexpn);\n+\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,\n+\t\t\t\t\t\t  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -\n+\t\t\t\t\t\t  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);\n+\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,\n+\t\t\t\t\t\t  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -\n+\t\t\t\t\t\t  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);\n \t\t\t\t\t\tpi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;\n \t\t\t\t\t\tassert(pi->prcno < pi->pirlvl->numprcs);\n \t\t\t\t\t\tfor (pi->lyrno = 0; pi->lyrno < pi->numlyrs &&\n-\t\t\t\t\t\t  pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n+\t\t\t\t\t\t  pi->lyrno < JAS_CAST(int, pchg->lyrnoend);\n+\t\t\t\t\t\t  ++pi->lyrno) {\n \t\t\t\t\t\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n \t\t\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n \t\t\t\t\t\t\t\t++(*prclyrno);\n@@ -426,10 +443,17 @@ static int jpc_pi_nextcprl(register jpc_pi_t *pi)\n \t\tpi->prgvolfirst = 0;\n \t}\n \n-\tfor (pi->compno = pchg->compnostart, pi->picomp =\n-\t  &pi->picomps[pi->compno]; pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno < pi->numcomps; ++pi->compno,\n-\t  ++pi->picomp) {\n+\tfor (pi->compno = pchg->compnostart, pi->picomp = &pi->picomps[pi->compno];\n+\t  pi->compno < JAS_CAST(int, pchg->compnoend) && pi->compno < pi->numcomps;\n+\t  ++pi->compno, ++pi->picomp) {\n \t\tpirlvl = pi->picomp->pirlvls;\n+\t\t// Check for the potential for overflow problems.\n+\t\tif (pirlvl->prcwidthexpn + pi->picomp->numrlvls >\n+\t\t  JAS_UINTFAST32_NUMBITS - 2 ||\n+\t\t  pirlvl->prcheightexpn + pi->picomp->numrlvls >\n+\t\t  JAS_UINTFAST32_NUMBITS - 2) {\n+\t\t\treturn -1;\n+\t\t}\n \t\tpi->xstep = pi->picomp->hsamp * (JAS_CAST(uint_fast32_t, 1) <<\n \t\t  (pirlvl->prcwidthexpn + pi->picomp->numrlvls - 1));\n \t\tpi->ystep = pi->picomp->vsamp * (JAS_CAST(uint_fast32_t, 1) <<\n@@ -459,23 +483,23 @@ static int jpc_pi_nextcprl(register jpc_pi_t *pi)\n \t\t\t\t\ttry0 = JPC_CEILDIV(pi->ystart, pi->picomp->vsamp << r);\n \t\t\t\t\trpx = r + pi->pirlvl->prcwidthexpn;\n \t\t\t\t\trpy = r + pi->pirlvl->prcheightexpn;\n-\t\t\t\t\tif (((pi->x == pi->xstart && ((trx0 << r) % (1 << rpx))) ||\n+\t\t\t\t\tif (((pi->x == pi->xstart &&\n+\t\t\t\t\t  ((trx0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpx))) ||\n \t\t\t\t\t  !(pi->x % (pi->picomp->hsamp << rpx))) &&\n-\t\t\t\t\t  ((pi->y == pi->ystart && ((try0 << r) % (1 << rpy))) ||\n+\t\t\t\t\t  ((pi->y == pi->ystart &&\n+\t\t\t\t\t  ((try0 << r) % (JAS_CAST(uint_fast32_t, 1) << rpy))) ||\n \t\t\t\t\t  !(pi->y % (pi->picomp->vsamp << rpy)))) {\n-\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x, pi->picomp->hsamp\n-\t\t\t\t\t\t  << r), pi->pirlvl->prcwidthexpn) - JPC_FLOORDIVPOW2(trx0,\n-\t\t\t\t\t\t  pi->pirlvl->prcwidthexpn);\n-\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y, pi->picomp->vsamp\n-\t\t\t\t\t\t  << r), pi->pirlvl->prcheightexpn) - JPC_FLOORDIVPOW2(try0,\n-\t\t\t\t\t\t  pi->pirlvl->prcheightexpn);\n-\t\t\t\t\t\tpi->prcno = prcvind *\n-\t\t\t\t\t\t  pi->pirlvl->numhprcs +\n-\t\t\t\t\t\t  prchind;\n-\t\t\t\t\t\tassert(pi->prcno <\n-\t\t\t\t\t\t  pi->pirlvl->numprcs);\n-\t\t\t\t\t\tfor (pi->lyrno = 0; pi->lyrno <\n-\t\t\t\t\t\t  pi->numlyrs && pi->lyrno < JAS_CAST(int, pchg->lyrnoend); ++pi->lyrno) {\n+\t\t\t\t\t\tprchind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->x,\n+\t\t\t\t\t\t  pi->picomp->hsamp << r), pi->pirlvl->prcwidthexpn) -\n+\t\t\t\t\t\t  JPC_FLOORDIVPOW2(trx0, pi->pirlvl->prcwidthexpn);\n+\t\t\t\t\t\tprcvind = JPC_FLOORDIVPOW2(JPC_CEILDIV(pi->y,\n+\t\t\t\t\t\t  pi->picomp->vsamp << r), pi->pirlvl->prcheightexpn) -\n+\t\t\t\t\t\t  JPC_FLOORDIVPOW2(try0, pi->pirlvl->prcheightexpn);\n+\t\t\t\t\t\tpi->prcno = prcvind * pi->pirlvl->numhprcs + prchind;\n+\t\t\t\t\t\tassert(pi->prcno < pi->pirlvl->numprcs);\n+\t\t\t\t\t\tfor (pi->lyrno = 0; pi->lyrno < pi->numlyrs &&\n+\t\t\t\t\t\t  pi->lyrno < JAS_CAST(int, pchg->lyrnoend);\n+\t\t\t\t\t\t  ++pi->lyrno) {\n \t\t\t\t\t\t\tprclyrno = &pi->pirlvl->prclyrnos[pi->prcno];\n \t\t\t\t\t\t\tif (pi->lyrno >= *prclyrno) {\n \t\t\t\t\t\t\t\t++(*prclyrno);"
        },
        {
          "filename": "src/libjasper/jpc/jpc_t2dec.c",
          "status": "modified",
          "additions": 21,
          "deletions": 21,
          "patch": "@@ -423,39 +423,39 @@ int jpc_dec_decodepkts(jpc_dec_t *dec, jas_stream_t *pkthdrstream, jas_stream_t\n \ttile = dec->curtile;\n \tpi = tile->pi;\n \tfor (;;) {\n-if (!tile->pkthdrstream || jas_stream_peekc(tile->pkthdrstream) == EOF) {\n-\t\tswitch (jpc_dec_lookahead(in)) {\n-\t\tcase JPC_MS_EOC:\n-\t\tcase JPC_MS_SOT:\n-\t\t\treturn 0;\n-\t\t\tbreak;\n-\t\tcase JPC_MS_SOP:\n-\t\tcase JPC_MS_EPH:\n-\t\tcase 0:\n-\t\t\tbreak;\n-\t\tdefault:\n-\t\t\treturn -1;\n-\t\t\tbreak;\n+\t\tif (!tile->pkthdrstream || jas_stream_peekc(tile->pkthdrstream) == EOF) {\n+\t\t\tswitch (jpc_dec_lookahead(in)) {\n+\t\t\tcase JPC_MS_EOC:\n+\t\t\tcase JPC_MS_SOT:\n+\t\t\t\treturn 0;\n+\t\t\t\tbreak;\n+\t\t\tcase JPC_MS_SOP:\n+\t\t\tcase JPC_MS_EPH:\n+\t\t\tcase 0:\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\treturn -1;\n+\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n-}\n \t\tif ((ret = jpc_pi_next(pi))) {\n \t\t\treturn ret;\n \t\t}\n-if (dec->maxpkts >= 0 && dec->numpkts >= dec->maxpkts) {\n-\tjas_eprintf(\"warning: stopping decode prematurely as requested\\n\");\n-\treturn 0;\n-}\n+\t\tif (dec->maxpkts >= 0 && dec->numpkts >= dec->maxpkts) {\n+\t\t\tjas_eprintf(\"warning: stopping decode prematurely as requested\\n\");\n+\t\t\treturn 0;\n+\t\t}\n \t\tif (jas_getdbglevel() >= 1) {\n \t\t\tjas_eprintf(\"packet offset=%08ld prg=%d cmptno=%02d \"\n \t\t\t  \"rlvlno=%02d prcno=%03d lyrno=%02d\\n\", (long)\n \t\t\t  jas_stream_getrwcount(in), jpc_pi_prg(pi), jpc_pi_cmptno(pi),\n \t\t\t  jpc_pi_rlvlno(pi), jpc_pi_prcno(pi), jpc_pi_lyrno(pi));\n \t\t}\n-\t\tif (jpc_dec_decodepkt(dec, pkthdrstream, in, jpc_pi_cmptno(pi), jpc_pi_rlvlno(pi),\n-\t\t  jpc_pi_prcno(pi), jpc_pi_lyrno(pi))) {\n+\t\tif (jpc_dec_decodepkt(dec, pkthdrstream, in, jpc_pi_cmptno(pi),\n+\t\t  jpc_pi_rlvlno(pi), jpc_pi_prcno(pi), jpc_pi_lyrno(pi))) {\n \t\t\treturn -1;\n \t\t}\n-++dec->numpkts;\n+\t\t++dec->numpkts;\n \t}\n \n \treturn 0;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8766848706a727f61c1c76a5a7cf1078433fad02",
            "date": "2024-04-27T17:53:19Z",
            "author_login": "mdadams"
          },
          {
            "sha": "2d6b6e8a9987386afe388e1cde859d0182445e63",
            "date": "2024-04-27T17:49:23Z",
            "author_login": "mdadams"
          },
          {
            "sha": "29154a52b6c2b895ac3db60d51be9f2a995ee145",
            "date": "2024-04-10T06:11:01Z",
            "author_login": "mdadams"
          },
          {
            "sha": "2fe7d2d73d18d9c7072507d462737b372f9d56bf",
            "date": "2024-03-30T16:57:05Z",
            "author_login": "mdadams"
          },
          {
            "sha": "6d084c53a77762f41bb5310713a5f1872fef55f5",
            "date": "2024-03-29T14:57:29Z",
            "author_login": "mdadams"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-125",
    "description": "An out-of-bounds heap read vulnerability was found in the jpc_pi_nextpcrl() function of jasper before 2.0.6 when processing crafted input.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-08-01T17:29:00.297",
    "last_modified": "2024-11-21T03:01:26.213",
    "fix_date": "2016-11-27T01:14:09Z"
  },
  "references": [
    {
      "url": "http://www.securityfocus.com/bid/94925",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:1208",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-9583",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mdadams/jasper/commit/aa0b0f79ade5eef8b0e7a214c03f5af54b36ba7d",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mdadams/jasper/commit/f25486c3d4aa472fec79150f2c41ed4333395d3d",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/94925",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:1208",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-9583",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mdadams/jasper/commit/aa0b0f79ade5eef8b0e7a214c03f5af54b36ba7d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mdadams/jasper/commit/f25486c3d4aa472fec79150f2c41ed4333395d3d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:32.423604",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jasper",
    "owner": "mdadams",
    "created_at": "2016-09-16T18:52:32Z",
    "updated_at": "2025-01-10T13:03:21Z",
    "pushed_at": "2024-04-27T17:54:09Z",
    "size": 4405,
    "stars": 232,
    "forks": 102,
    "open_issues": 4,
    "watchers": 232,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1567274,
      "Shell": 147989,
      "CMake": 50869,
      "Roff": 3703,
      "Batchfile": 1905,
      "C++": 235
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:01:40.770708"
  }
}