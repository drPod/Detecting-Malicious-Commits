{
  "cve_id": "CVE-2017-0929",
  "github_data": {
    "repository": "dnnsoftware/Dnn.Platform",
    "fix_commit": "d3953db85fee77bb5e6383747692c507ef8b94c3",
    "related_commits": [
      "d3953db85fee77bb5e6383747692c507ef8b94c3",
      "d3953db85fee77bb5e6383747692c507ef8b94c3"
    ],
    "patch_url": "https://github.com/dnnsoftware/Dnn.Platform/commit/d3953db85fee77bb5e6383747692c507ef8b94c3.patch",
    "fix_commit_details": {
      "sha": "d3953db85fee77bb5e6383747692c507ef8b94c3",
      "commit_date": "2018-01-05T01:08:02Z",
      "author": {
        "login": "galatrash",
        "type": "User",
        "stats": {
          "total_commits": 657,
          "average_weekly_commits": 1.100502512562814,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 122
        }
      },
      "commit_message": {
        "title": "DNN-10601: preventing handling external URLs in image handler.",
        "length": 62,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 156,
        "additions": 149,
        "deletions": 7
      },
      "files": [
        {
          "filename": "DNN Platform/Library/Services/GeneratedImage/DnnImageHandler.cs",
          "status": "modified",
          "additions": 21,
          "deletions": 2,
          "patch": "@@ -1,4 +1,5 @@\n \ufeffusing System;\n+using System.Collections.Generic;\n using System.Collections.Specialized;\n using System.Configuration;\n using System.Drawing;\n@@ -233,11 +234,14 @@ public override ImageInfo GenerateImage(NameValueCollection parameters)\n                         }\n                         else if (!string.IsNullOrEmpty(parameters[\"Url\"]))\n                         {\n-                            if (!parameters[\"Url\"].StartsWith(\"http\"))\n+                            var url = parameters[\"Url\"];\n+                            // allow only site resources when using the url parameter\n+                            if (!url.StartsWith(\"http\") || !UriBelongsToSite(new Uri(url)))\n                             {\n                                 return GetEmptyImageInfo();\n                             }\n-                            imgUrl = parameters[\"Url\"];\n+\n+                            imgUrl = url;\n                         }\n \n                         if (string.IsNullOrEmpty(parameters[\"format\"]))\n@@ -555,5 +559,20 @@ private static ImageFormat GetImageFormat(string extension)\n                     return ImageFormat.Png;\n             }\n         }\n+\n+        // checks whether the uri belongs to any of the site-wide aliases\n+        private static bool UriBelongsToSite(Uri uri)\n+        {\n+            IEnumerable<string> hostAliases =\n+                from PortalAliasInfo alias in PortalAliasController.Instance.GetPortalAliases().Values\n+                 select alias.HTTPAlias.ToLowerInvariant();\n+\n+            // if URI, for example, = \"http(s)://myDomain:80/DNNDev/myPage?var=name\" , then the two strings will be\n+            // uriNoScheme1 = \"mydomain/dnndev/mypage\"  -- lower case\n+            // uriNoScheme2 = \"mydomain:80/dnndev/mypage\"  -- lower case\n+            var uriNoScheme1 = (uri.DnsSafeHost + uri.LocalPath).ToLowerInvariant();\n+            var uriNoScheme2 = (uri.Authority + uri.LocalPath).ToLowerInvariant();\n+            return hostAliases.Any(alias => uriNoScheme1.StartsWith(alias) || uriNoScheme2.StartsWith(alias));\n+        }\n     }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "DNN Platform/Library/Services/GeneratedImage/FilterTransform/ImageResizeTransform.cs",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -113,7 +113,10 @@ public ImageResizeTransform() {\n         /// <param name=\"image\">Input image</param>\n         /// <returns>Image result after image transformation</returns>\n         public override Image ProcessImage(Image image)\n-\t\t{\n+        {\n+            if (image == null)\n+                return null;    \n+\n             if (MaxWidth > 0)\n             {\n                 Width = image.Width > MaxWidth ? MaxWidth : image.Width;"
        },
        {
          "filename": "DNN Platform/Library/Services/GeneratedImage/ImageHandlerInternal.cs",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -426,7 +426,7 @@ private void RenderImage(Image image, Stream outStream)\n                         Param = { [0] = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, ImageCompression) }\n                     };\n                     var ici = GetEncoderInfo(GetImageMimeType(ContentType));\n-                    image.Save(outStream, ici, eps);\n+                    image?.Save(outStream, ici, eps);\n                 }\n             }\n             finally"
        },
        {
          "filename": "DNN Platform/Tests/DNN.Integration.Test.Framework/DNN.Integration.Test.Framework.csproj",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -81,6 +81,7 @@\n     <Compile Include=\"Helpers\\FolderHelper.cs\" />\n     <Compile Include=\"Helpers\\HostSettingsHelper.cs\" />\n     <Compile Include=\"Helpers\\MockComponentHelper.cs\" />\n+    <Compile Include=\"Helpers\\PortalAliasHelper.cs\" />\n     <Compile Include=\"Helpers\\PortalInfoHelper.cs\" />\n     <Compile Include=\"Helpers\\PortalSettingsHelper.cs\" />\n     <Compile Include=\"Helpers\\StoredProcedureStatsHelper.cs\" />"
        },
        {
          "filename": "DNN Platform/Tests/DNN.Integration.Test.Framework/Helpers/PortalAliasHelper.cs",
          "status": "added",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -0,0 +1,40 @@\n+\ufeff// DotNetNuke\u00ae - http://www.dnnsoftware.com\n+// Copyright (c) 2002-2018, DNN Corp.\n+// All Rights Reserved\n+\n+using System.Collections.Generic;\n+using System.Linq;\n+using DotNetNuke.Entities.Portals;\n+\n+namespace DNN.Integration.Test.Framework.Helpers\n+{\n+    public class PortalAliasHelper\n+    {\n+        public static PortalAliasInfo GetPrimaryPortalAlias(int portalId = 0)\n+        {\n+            return DatabaseHelper.ExecuteStoredProcedure<PortalAliasInfo>(\"GetPortalAliases\").First(p => p.PortalID == portalId && p.IsPrimary);\n+        }\n+\n+        public static IEnumerable<PortalAliasInfo> GetPortalAliaes(int portalId = 0)\n+        {\n+            return DatabaseHelper.ExecuteStoredProcedure<PortalAliasInfo>(\"GetPortalAliases\").Where(p => p.PortalID == portalId);\n+        }\n+\n+        public static IEnumerable<PortalAliasInfo> GetAllPortalAliaes()\n+        {\n+            return DatabaseHelper.ExecuteStoredProcedure<PortalAliasInfo>(\"GetPortalAliases\");\n+        }\n+\n+        public static void AddPortalAlias(PortalAliasInfo portal)\n+        {\n+            DatabaseHelper.ExecuteStoredProcedure(\"AddPortalAlias\",\n+                portal.PortalID,\n+                portal.HTTPAlias,\n+                portal.CultureCode,\n+                portal.Skin,\n+                portal.BrowserType,\n+                portal.IsPrimary,\n+                -1);\n+        }\n+    }\n+}"
        },
        {
          "filename": "DNN Platform/Tests/DotNetNuke.Tests.Integration/DotNetNuke.Tests.Integration.csproj",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -98,6 +98,7 @@\n     <Compile Include=\"PersonaBar\\Content\\Pages\\AddPageTests.cs\" />\r\n     <Compile Include=\"PersonaBar\\Content\\Pages\\PageUrlsTests.cs\" />\r\n     <Compile Include=\"PersonaBar\\Manage\\Users\\UsersFiltersTests.cs\" />\r\n+    <Compile Include=\"Tests\\Library\\ImageHandlerTests.cs\" />\r\n     <Compile Include=\"Tests\\Portals\\PortalInfoTests.cs\" />\r\n     <Compile Include=\"Tests\\Portals\\PortalSettingsTests.cs\" />\r\n     <Compile Include=\"Properties\\AssemblyInfo.cs\" />\r"
        },
        {
          "filename": "DNN Platform/Tests/DotNetNuke.Tests.Integration/Tests/Library/ImageHandlerTests.cs",
          "status": "added",
          "additions": 76,
          "deletions": 0,
          "patch": "@@ -0,0 +1,76 @@\n+\ufeff// DotNetNuke\u00ae - http://www.dnnsoftware.com\n+// Copyright (c) 2002-2018, DNN Corp.\n+// All Rights Reserved\n+\n+using System.Linq;\n+using DNN.Integration.Test.Framework;\n+using DNN.Integration.Test.Framework.Helpers;\n+using DotNetNuke.Entities.Portals;\n+using NUnit.Framework;\n+\n+namespace DotNetNuke.Tests.Integration.Tests.Library\n+{\n+    [TestFixture]\n+    public class ImageHandlerTests : IntegrationTestBase\n+    {\n+        // we assume this GIF image exists in all DNN sites and it shouldn't be PNG\n+        private const string HandlerPath = \"/DnnImageHandler.ashx?mode=file&w=1&url={0}/images/1x1.GIF\";\n+\n+        [Test]\n+        public void Using_Image_Handler_For_Foreign_Site_ShouldFail()\n+        {\n+            var session = WebApiTestHelper.GetAnnonymousConnector();\n+            var relativeUrl = string.Format(HandlerPath, \"https://google.com\");\n+\n+            var response = session.GetContent(relativeUrl).Content.ReadAsStringAsync().Result;\n+            Assert.IsTrue(response.StartsWith(\"\ufffdPNG\\r\\n\"), $\"Content = {response}\");\n+        }\n+\n+        [Test]\n+        public void Using_Image_Handler_For_Main_Alias_ShouldPass()\n+        {\n+            var session = WebApiTestHelper.GetAnnonymousConnector();\n+            var relativeUrl = string.Format(HandlerPath, AppConfigHelper.SiteUrl);\n+\n+            var response = session.GetContent(relativeUrl).Content.ReadAsStringAsync().Result;\n+            Assert.IsTrue(response.StartsWith(\"GIF89a\"), $\"Content = {response}\");\n+        }\n+\n+        [Test]\n+        public void Using_Image_Handler_From_All_Alias_ShouldPass()\n+        {\n+            PortalAliasInfo pai;\n+            var aliases = PortalAliasHelper.GetPortalAliaes().ToList();\n+            if (aliases.Count == 1)\n+            {\n+                var primary = aliases.First();\n+                pai = new PortalAliasInfo\n+                {\n+                    PortalID = primary.PortalID,\n+                    HTTPAlias = \"my-\" + primary.HTTPAlias,\n+                    CultureCode = primary.CultureCode,\n+                    Skin = primary.Skin,\n+                    BrowserType = primary.BrowserType,\n+                    IsPrimary = false,\n+\n+                };\n+            }\n+            else\n+            {\n+                pai = aliases.First(a => a.PortalAliasID > 1);\n+            }\n+\n+            var session = WebApiTestHelper.GetAnnonymousConnector();\n+            aliases = PortalAliasHelper.GetPortalAliaes().ToList();\n+            foreach (var alias in aliases)\n+            {\n+                var relativeUrl = string.Format(HandlerPath, AppConfigHelper.SiteUrl);\n+                var absoluteUrl = $\"http://{alias.HTTPAlias}{relativeUrl}\";\n+                LogText(\"Getting image from \" + absoluteUrl);\n+\n+                var response = session.GetContent(absoluteUrl).Content.ReadAsStringAsync().Result;\n+                Assert.IsTrue(response.StartsWith(\"GIF89a\"), $\"Url: {absoluteUrl} / Content = {response}\");\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "DNN Platform/Tests/DotNetNuke.Tests.Integration/Tests/Security/AuthCookieTests.cs",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -1,8 +1,10 @@\n-\ufeffusing System;\n+\ufeff// DotNetNuke\u00ae - http://www.dnnsoftware.com\n+// Copyright (c) 2002-2018, DNN Corp.\n+// All Rights Reserved\n+\n+using System;\n using System.Net;\n using System.Net.Http;\n-using System.Net.Http.Headers;\n-using System.Threading;\n using DNN.Integration.Test.Framework;\n using DNN.Integration.Test.Framework.Helpers;\n using NUnit.Framework;"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 5,
        "unique_directories": 7,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fbc6f70f72f63385555b9d3507a1115670338a58",
            "date": "2025-01-05T03:24:52Z",
            "author_login": "valadas"
          },
          {
            "sha": "1f164a04839a0f17efc5cfe84043767e354d9b2d",
            "date": "2024-12-30T22:42:25Z",
            "author_login": "david-poindexter"
          },
          {
            "sha": "dd79a9533f4d426a0e7997e9b1cf52377c8a4198",
            "date": "2024-12-18T22:20:10Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "230d821e785410162db5d5e6442028a8bc5b7767",
            "date": "2024-12-18T02:48:47Z",
            "author_login": "valadas"
          },
          {
            "sha": "19d4006633a7cebbef142b6d9ea360f6bc5e5899",
            "date": "2024-12-18T02:48:12Z",
            "author_login": "valadas"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-918",
    "description": "DNN (aka DotNetNuke) before 9.2.0 suffers from a Server-Side Request Forgery (SSRF) vulnerability in the DnnImageHandler class. Attackers may be able to access information about internal network resources.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-07-03T21:29:00.370",
    "last_modified": "2024-11-21T03:03:55.127",
    "fix_date": "2018-01-05T01:08:02Z"
  },
  "references": [
    {
      "url": "https://github.com/dnnsoftware/Dnn.Platform/commit/d3953db85fee77bb5e6383747692c507ef8b94c3",
      "source": "support@hackerone.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dnnsoftware/Dnn.Platform/commit/d3953db85fee77bb5e6383747692c507ef8b94c3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:28.563885",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Dnn.Platform",
    "owner": "dnnsoftware",
    "created_at": "2013-08-13T22:58:08Z",
    "updated_at": "2025-01-11T07:27:57Z",
    "pushed_at": "2025-01-12T06:10:31Z",
    "size": 914369,
    "stars": 1038,
    "forks": 754,
    "open_issues": 268,
    "watchers": 1038,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "master",
      "release/7.4.1",
      "release/10.0.0"
    ],
    "languages": {
      "C#": 21694308,
      "JavaScript": 8638688,
      "CSS": 921540,
      "Less": 567229,
      "HTML": 544656,
      "ASP.NET": 524399,
      "TypeScript": 140982,
      "TSQL": 128041,
      "Visual Basic .NET": 114706,
      "SCSS": 12701,
      "XSLT": 11388,
      "PowerShell": 3396,
      "Batchfile": 289,
      "Shell": 95
    },
    "commit_activity": {
      "total_commits_last_year": 276,
      "avg_commits_per_week": 5.3076923076923075,
      "days_active_last_year": 90
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:38:30.928896"
  }
}