{
  "cve_id": "CVE-2017-1000487",
  "github_data": {
    "repository": "codehaus-plexus/plexus-utils",
    "fix_commit": "b38a1b3a4352303e4312b2bb601a0d7ec6e28f41",
    "related_commits": [
      "b38a1b3a4352303e4312b2bb601a0d7ec6e28f41",
      "b38a1b3a4352303e4312b2bb601a0d7ec6e28f41"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "b38a1b3a4352303e4312b2bb601a0d7ec6e28f41",
      "commit_date": "2013-10-08T16:21:04Z",
      "author": {
        "login": "krosenvold",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[PLXUTILS-161] Commandline shell injection problems",
        "length": 95,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 189,
        "additions": 107,
        "deletions": 82
      },
      "files": [
        {
          "filename": "src/main/java/org/codehaus/plexus/util/cli/Commandline.java",
          "status": "modified",
          "additions": 30,
          "deletions": 8,
          "patch": "@@ -139,6 +139,8 @@ public class Commandline\n      * Create a new command line object.\n      * Shell is autodetected from operating system\n      *\n+     * Shell usage is only desirable when generating code for remote execution.\n+     *\n      * @param toProcess\n      */\n     public Commandline( String toProcess, Shell shell )\n@@ -167,15 +169,16 @@ public Commandline( String toProcess, Shell shell )\n     /**\n      * Create a new command line object.\n      * Shell is autodetected from operating system\n+     *\n+     * Shell usage is only desirable when generating code for remote execution.\n      */\n     public Commandline( Shell shell )\n     {\n         this.shell = shell;\n     }\n \n     /**\n-     * Create a new command line object.\n-     * Shell is autodetected from operating system\n+     * Create a new command line object, given a command following POSIX sh quoting rules\n      *\n      * @param toProcess\n      */\n@@ -203,7 +206,6 @@ public Commandline( String toProcess )\n \n     /**\n      * Create a new command line object.\n-     * Shell is autodetected from operating system\n      */\n     public Commandline()\n     {\n@@ -253,7 +255,7 @@ public int getPosition()\n         {\n             if ( realPos == -1 )\n             {\n-                realPos = ( getExecutable() == null ? 0 : 1 );\n+                realPos = ( getLiteralExecutable() == null ? 0 : 1 );\n                 for ( int i = 0; i < position; i++ )\n                 {\n                     Arg arg = (Arg) arguments.elementAt( i );\n@@ -404,6 +406,21 @@ public void setExecutable( String executable )\n         this.executable = executable;\n     }\n \n+    /**\n+     * @return Executable to be run, as a literal string (no shell quoting/munging)\n+     */\n+    public String getLiteralExecutable()\n+    {\n+        return executable;\n+    }\n+\n+    /**\n+     * Return an executable name, quoted for shell use.\n+     *\n+     * Shell usage is only desirable when generating code for remote execution.\n+     *\n+     * @return Executable to be run, quoted for shell interpretation\n+     */\n     public String getExecutable()\n     {\n         String exec = shell.getExecutable();\n@@ -483,7 +500,7 @@ public String[] getEnvironmentVariables()\n     public String[] getCommandline()\n     {\n         final String[] args = getArguments();\n-        String executable = getExecutable();\n+        String executable = getLiteralExecutable();\n \n         if ( executable == null )\n         {\n@@ -497,6 +514,8 @@ public String[] getCommandline()\n \n     /**\n      * Returns the shell, executable and all defined arguments.\n+     *\n+     * Shell usage is only desirable when generating code for remote execution.\n      */\n     public String[] getShellCommandline()\n     {\n@@ -633,7 +652,7 @@ public Process execute()\n         {\n             if ( workingDir == null )\n             {\n-                process = Runtime.getRuntime().exec( getShellCommandline(), environment );\n+                process = Runtime.getRuntime().exec( getCommandline(), environment, workingDir );\n             }\n             else\n             {\n@@ -648,7 +667,7 @@ else if ( !workingDir.isDirectory() )\n                         + \"\\\" does not specify a directory.\" );\n                 }\n \n-                process = Runtime.getRuntime().exec( getShellCommandline(), environment, workingDir );\n+                process = Runtime.getRuntime().exec( getCommandline(), environment, workingDir );\n             }\n         }\n         catch ( IOException ex )\n@@ -669,7 +688,7 @@ private void verifyShellState()\n             shell.setWorkingDirectory( workingDir );\n         }\n \n-        if ( shell.getExecutable() == null )\n+        if ( shell.getOriginalExecutable() == null )\n         {\n             shell.setExecutable( executable );\n         }\n@@ -684,6 +703,8 @@ public Properties getSystemEnvVars()\n     /**\n      * Allows to set the shell to be used in this command line.\n      *\n+     * Shell usage is only desirable when generating code for remote execution.\n+     *\n      * @param shell\n      * @since 1.2\n      */\n@@ -695,6 +716,7 @@ public void setShell( Shell shell )\n     /**\n      * Get the shell to be used in this command line.\n      *\n+     * Shell usage is only desirable when generating code for remote execution.\n      * @since 1.2\n      */\n     public Shell getShell()"
        },
        {
          "filename": "src/main/java/org/codehaus/plexus/util/cli/shell/BourneShell.java",
          "status": "modified",
          "additions": 19,
          "deletions": 41,
          "patch": "@@ -17,7 +17,6 @@\n  */\n \n import org.codehaus.plexus.util.Os;\n-import org.codehaus.plexus.util.StringUtils;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -29,34 +28,18 @@\n public class BourneShell\n     extends Shell\n {\n-    private static final char[] BASH_QUOTING_TRIGGER_CHARS = {\n-        ' ',\n-        '$',\n-        ';',\n-        '&',\n-        '|',\n-        '<',\n-        '>',\n-        '*',\n-        '?',\n-        '(',\n-        ')',\n-        '[',\n-        ']',\n-        '{',\n-        '}',\n-        '`' };\n \n     public BourneShell()\n     {\n-        this( false );\n+        this(false);\n     }\n \n     public BourneShell( boolean isLoginShell )\n     {\n+        setUnconditionalQuoting( true );\n         setShellCommand( \"/bin/sh\" );\n         setArgumentQuoteDelimiter( '\\'' );\n-        setExecutableQuoteDelimiter( '\\\"' );\n+        setExecutableQuoteDelimiter( '\\'' );\n         setSingleQuotedArgumentEscaped( true );\n         setSingleQuotedExecutableEscaped( false );\n         setQuotedExecutableEnabled( true );\n@@ -76,7 +59,7 @@ public String getExecutable()\n             return super.getExecutable();\n         }\n \n-        return unifyQuotes( super.getExecutable());\n+        return quoteOneItem( super.getOriginalExecutable(), true );\n     }\n \n     public List<String> getShellArgsList()\n@@ -126,46 +109,41 @@ protected String getExecutionPreamble()\n         StringBuilder sb = new StringBuilder();\n         sb.append( \"cd \" );\n \n-        sb.append( unifyQuotes( dir ) );\n+        sb.append( quoteOneItem( dir, false ) );\n         sb.append( \" && \" );\n \n         return sb.toString();\n     }\n \n-    protected char[] getQuotingTriggerChars()\n-    {\n-        return BASH_QUOTING_TRIGGER_CHARS;\n-    }\n-\n     /**\n      * <p>Unify quotes in a path for the Bourne Shell.</p>\n      *\n      * <pre>\n-     * BourneShell.unifyQuotes(null)                       = null\n-     * BourneShell.unifyQuotes(\"\")                         = (empty)\n-     * BourneShell.unifyQuotes(\"/test/quotedpath'abc\")     = /test/quotedpath\\'abc\n-     * BourneShell.unifyQuotes(\"/test/quoted path'abc\")    = \"/test/quoted path'abc\"\n-     * BourneShell.unifyQuotes(\"/test/quotedpath\\\"abc\")    = \"/test/quotedpath\\\"abc\"\n-     * BourneShell.unifyQuotes(\"/test/quoted path\\\"abc\")   = \"/test/quoted path\\\"abc\"\n-     * BourneShell.unifyQuotes(\"/test/quotedpath\\\"'abc\")   = \"/test/quotedpath\\\"'abc\"\n-     * BourneShell.unifyQuotes(\"/test/quoted path\\\"'abc\")  = \"/test/quoted path\\\"'abc\"\n+     * BourneShell.quoteOneItem(null)                       = null\n+     * BourneShell.quoteOneItem(\"\")                         = ''\n+     * BourneShell.quoteOneItem(\"/test/quotedpath'abc\")     = '/test/quotedpath'\"'\"'abc'\n+     * BourneShell.quoteOneItem(\"/test/quoted path'abc\")    = '/test/quoted pat'\"'\"'habc'\n+     * BourneShell.quoteOneItem(\"/test/quotedpath\\\"abc\")    = '/test/quotedpath\"abc'\n+     * BourneShell.quoteOneItem(\"/test/quoted path\\\"abc\")   = '/test/quoted path\"abc'\n+     * BourneShell.quoteOneItem(\"/test/quotedpath\\\"'abc\")   = '/test/quotedpath\"'\"'\"'abc'\n+     * BourneShell.quoteOneItem(\"/test/quoted path\\\"'abc\")  = '/test/quoted path\"'\"'\"'abc'\n      * </pre>\n      *\n      * @param path not null path.\n      * @return the path unified correctly for the Bourne shell.\n      */\n-    protected static String unifyQuotes( String path )\n+    protected String quoteOneItem( String path, boolean isExecutable )\n     {\n         if ( path == null )\n         {\n             return null;\n         }\n \n-        if ( path.indexOf( \" \" ) == -1 && path.indexOf( \"'\" ) != -1 && path.indexOf( \"\\\"\" ) == -1 )\n-        {\n-            return StringUtils.escape( path );\n-        }\n+        StringBuilder sb = new StringBuilder();\n+        sb.append( \"'\" );\n+        sb.append( path.replace( \"'\", \"'\\\"'\\\"'\" ) );\n+        sb.append( \"'\" );\n \n-        return StringUtils.quoteAndEscape( path, '\\\"', BASH_QUOTING_TRIGGER_CHARS );\n+        return sb.toString();\n     }\n }"
        },
        {
          "filename": "src/main/java/org/codehaus/plexus/util/cli/shell/Shell.java",
          "status": "modified",
          "additions": 28,
          "deletions": 7,
          "patch": "@@ -48,6 +48,8 @@ public class Shell\n \n     private boolean quotedArgumentsEnabled = true;\n \n+    private boolean unconditionallyQuote = false;\n+\n     private String executable;\n \n     private String workingDir;\n@@ -68,6 +70,16 @@ public class Shell\n \n     private String argumentEscapePattern = \"\\\\%s\";\n \n+    /**\n+     * Toggle unconditional quoting\n+     *\n+     * @param unconditionallyQuote\n+     */\n+    public void setUnconditionalQuoting(boolean unconditionallyQuote)\n+    {\n+        this.unconditionallyQuote = unconditionallyQuote;\n+    }\n+\n     /**\n      * Set the command to execute the shell (eg. COMMAND.COM, /bin/bash,...)\n      *\n@@ -129,6 +141,19 @@ public List<String> getCommandLine( String executable, String[] arguments )\n         return getRawCommandLine( executable, arguments );\n     }\n \n+    protected String quoteOneItem(String inputString, boolean isExecutable)\n+    {\n+        char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );\n+        return StringUtils.quoteAndEscape(\n+            inputString,\n+            isExecutable ? getExecutableQuoteDelimiter() : getArgumentQuoteDelimiter(),\n+            escapeChars,\n+            getQuotingTriggerChars(),\n+            '\\\\',\n+            unconditionallyQuote\n+        );\n+    }\n+\n     protected List<String> getRawCommandLine( String executable, String[] arguments )\n     {\n         List<String> commandLine = new ArrayList<String>();\n@@ -144,9 +169,7 @@ protected List<String> getRawCommandLine( String executable, String[] arguments\n \n             if ( isQuotedExecutableEnabled() )\n             {\n-                char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );\n-\n-                sb.append( StringUtils.quoteAndEscape( getExecutable(), getExecutableQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\\\', false ) );\n+                sb.append( quoteOneItem( getOriginalExecutable(), true ) );\n             }\n             else\n             {\n@@ -162,9 +185,7 @@ protected List<String> getRawCommandLine( String executable, String[] arguments\n \n             if ( isQuotedArgumentsEnabled() )\n             {\n-                char[] escapeChars = getEscapeChars( isSingleQuotedArgumentEscaped(), isDoubleQuotedArgumentEscaped() );\n-\n-                sb.append( StringUtils.quoteAndEscape( arguments[i], getArgumentQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), getArgumentEscapePattern(), false ) );\n+                sb.append( quoteOneItem( arguments[i], false ) );\n             }\n             else\n             {\n@@ -278,7 +299,7 @@ public List<String> getShellCommandLine( String[] arguments )\n             commandLine.addAll( getShellArgsList() );\n         }\n \n-        commandLine.addAll( getCommandLine( getExecutable(), arguments ) );\n+        commandLine.addAll( getCommandLine( getOriginalExecutable(), arguments ) );\n \n         return commandLine;\n "
        },
        {
          "filename": "src/test/java/org/codehaus/plexus/util/cli/CommandlineTest.java",
          "status": "modified",
          "additions": 21,
          "deletions": 16,
          "patch": "@@ -16,22 +16,15 @@\n  * limitations under the License.\n  */\n \n+import junit.framework.TestCase;\n import org.codehaus.plexus.util.IOUtil;\n import org.codehaus.plexus.util.Os;\n import org.codehaus.plexus.util.StringUtils;\n import org.codehaus.plexus.util.cli.shell.BourneShell;\n import org.codehaus.plexus.util.cli.shell.CmdShell;\n import org.codehaus.plexus.util.cli.shell.Shell;\n \n-import java.io.File;\n-import java.io.FileWriter;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.io.Reader;\n-import java.io.StringWriter;\n-import java.io.Writer;\n-\n-import junit.framework.TestCase;\n+import java.io.*;\n \n public class CommandlineTest\n     extends TestCase\n@@ -252,7 +245,7 @@ public void testGetShellCommandLineBash()\n \n         assertEquals( \"/bin/sh\", shellCommandline[0] );\n         assertEquals( \"-c\", shellCommandline[1] );\n-        String expectedShellCmd = \"/bin/echo \\'hello world\\'\";\n+        String expectedShellCmd = \"'/bin/echo' 'hello world'\";\n         if ( Os.isFamily( Os.FAMILY_WINDOWS ) )\n         {\n             expectedShellCmd = \"\\\\bin\\\\echo \\'hello world\\'\";\n@@ -282,12 +275,12 @@ public void testGetShellCommandLineBash_WithWorkingDirectory()\n \n         assertEquals( \"/bin/sh\", shellCommandline[0] );\n         assertEquals( \"-c\", shellCommandline[1] );\n-        String expectedShellCmd = \"cd \\\"\" + root.getAbsolutePath()\n-                                  + \"path with spaces\\\" && /bin/echo \\'hello world\\'\";\n+        String expectedShellCmd = \"cd '\" + root.getAbsolutePath()\n+                                  + \"path with spaces' && '/bin/echo' 'hello world'\";\n         if ( Os.isFamily( Os.FAMILY_WINDOWS ) )\n         {\n-            expectedShellCmd = \"cd \\\"\" + root.getAbsolutePath()\n-                               + \"path with spaces\\\" && \\\\bin\\\\echo \\'hello world\\'\";\n+            expectedShellCmd = \"cd '\" + root.getAbsolutePath()\n+                               + \"path with spaces' && '\\\\bin\\\\echo' 'hello world'\";\n         }\n         assertEquals( expectedShellCmd, shellCommandline[2] );\n     }\n@@ -311,7 +304,7 @@ public void testGetShellCommandLineBash_WithSingleQuotedArg()\n \n         assertEquals( \"/bin/sh\", shellCommandline[0] );\n         assertEquals( \"-c\", shellCommandline[1] );\n-        String expectedShellCmd = \"/bin/echo \\'hello world\\'\";\n+        String expectedShellCmd = \"'/bin/echo' ''\\\"'\\\"'hello world'\\\"'\\\"''\";\n         if ( Os.isFamily( Os.FAMILY_WINDOWS ) )\n         {\n             expectedShellCmd = \"\\\\bin\\\\echo \\'hello world\\'\";\n@@ -341,7 +334,7 @@ public void testGetShellCommandLineNonWindows()\n         }\n         else\n         {\n-            assertEquals( \"/usr/bin a b\", shellCommandline[2] );\n+            assertEquals( \"'/usr/bin' 'a' 'b'\", shellCommandline[2] );\n         }\n     }\n \n@@ -387,6 +380,18 @@ public void testQuotedPathWithSingleApostrophe()\n         createAndCallScript( dir, \"echo Quoted\" );\n     }\n \n+    /**\n+     * Test an executable with shell-expandable content in its path.\n+     *\n+     * @throws Exception\n+     */\n+    public void testPathWithShellExpansionStrings()\n+        throws Exception\n+    {\n+        File dir = new File( System.getProperty( \"basedir\" ), \"target/test/dollar$test\" );\n+        createAndCallScript( dir, \"echo Quoted\" );\n+    }\n+\n     /**\n      * Test an executable with a single quotation mark <code>\\\"</code> in its path only for non Windows box.\n      *"
        },
        {
          "filename": "src/test/java/org/codehaus/plexus/util/cli/shell/BourneShellTest.java",
          "status": "modified",
          "additions": 9,
          "deletions": 10,
          "patch": "@@ -16,14 +16,13 @@\n  * limitations under the License.\n  */\n \n+import junit.framework.TestCase;\n import org.codehaus.plexus.util.StringUtils;\n import org.codehaus.plexus.util.cli.Commandline;\n \n import java.util.Arrays;\n import java.util.List;\n \n-import junit.framework.TestCase;\n-\n public class BourneShellTest\n     extends TestCase\n {\n@@ -42,7 +41,7 @@ public void testQuoteWorkingDirectoryAndExecutable()\n \n         String executable = StringUtils.join( sh.getShellCommandLine( new String[]{} ).iterator(), \" \" );\n \n-        assertEquals( \"/bin/sh -c cd /usr/local/bin && chmod\", executable );\n+        assertEquals( \"/bin/sh -c cd '/usr/local/bin' && 'chmod'\", executable );\n     }\n \n     public void testQuoteWorkingDirectoryAndExecutable_WDPathWithSingleQuotes()\n@@ -54,7 +53,7 @@ public void testQuoteWorkingDirectoryAndExecutable_WDPathWithSingleQuotes()\n \n         String executable = StringUtils.join( sh.getShellCommandLine( new String[]{} ).iterator(), \" \" );\n \n-        assertEquals( \"/bin/sh -c cd \\\"/usr/local/\\'something else\\'\\\" && chmod\", executable );\n+        assertEquals( \"/bin/sh -c cd '/usr/local/'\\\"'\\\"'something else'\\\"'\\\"'' && 'chmod'\", executable );\n     }\n \n     public void testQuoteWorkingDirectoryAndExecutable_WDPathWithSingleQuotes_BackslashFileSep()\n@@ -66,7 +65,7 @@ public void testQuoteWorkingDirectoryAndExecutable_WDPathWithSingleQuotes_Backsl\n \n         String executable = StringUtils.join( sh.getShellCommandLine( new String[]{} ).iterator(), \" \" );\n \n-        assertEquals( \"/bin/sh -c cd \\\"\\\\usr\\\\local\\\\\\'something else\\'\\\" && chmod\", executable );\n+        assertEquals( \"/bin/sh -c cd '\\\\usr\\\\local\\\\\\'\\\"'\\\"'something else'\\\"'\\\"'' && 'chmod'\", executable );\n     }\n \n     public void testPreserveSingleQuotesOnArgument()\n@@ -82,7 +81,7 @@ public void testPreserveSingleQuotesOnArgument()\n \n         String cli = StringUtils.join( shellCommandLine.iterator(), \" \" );\n         System.out.println( cli );\n-        assertTrue( cli.endsWith( args[0] ) );\n+        assertTrue( cli.endsWith(\"''\\\"'\\\"'some arg with spaces'\\\"'\\\"''\"));\n     }\n \n     public void testAddSingleQuotesOnArgumentWithSpaces()\n@@ -114,7 +113,7 @@ public void testEscapeSingleQuotesOnArgument()\n \n         String cli = StringUtils.join( shellCommandLine.iterator(), \" \" );\n         System.out.println( cli );\n-        assertEquals(\"cd /usr/bin && chmod 'arg'\\\\''withquote'\", shellCommandLine.get(shellCommandLine.size() - 1));\n+        assertEquals(\"cd '/usr/bin' && 'chmod' 'arg'\\\"'\\\"'withquote'\", shellCommandLine.get(shellCommandLine.size() - 1));\n     }\n \n     public void testArgumentsWithsemicolon()\n@@ -146,7 +145,7 @@ public void testArgumentsWithsemicolon()\n \n         assertEquals( \"/bin/sh\", lines[0] );\n         assertEquals( \"-c\", lines[1] );\n-        assertEquals( \"chmod --password ';password'\", lines[2] );\n+        assertEquals( \"'chmod' '--password' ';password'\", lines[2] );\n \n         commandline = new Commandline( newShell() );\n         commandline.setExecutable( \"chmod\" );\n@@ -158,7 +157,7 @@ public void testArgumentsWithsemicolon()\n \n         assertEquals( \"/bin/sh\", lines[0] );\n         assertEquals( \"-c\", lines[1] );\n-        assertEquals( \"chmod --password ';password'\", lines[2] );\n+        assertEquals( \"'chmod' '--password' ';password'\", lines[2] );\n \n         commandline = new Commandline( new CmdShell() );\n         commandline.getShell().setQuotedArgumentsEnabled( true );\n@@ -206,7 +205,7 @@ public void testBourneShellQuotingCharacters()\n \n         assertEquals( \"/bin/sh\", lines[0] );\n         assertEquals( \"-c\", lines[1] );\n-        assertEquals( \"chmod ' ' '|' '&&' '||' ';' ';;' '&' '()' '<' '<<' '>' '>>' '*' '?' '[' ']' '{' '}' '`'\",\n+        assertEquals( \"'chmod' ' ' '|' '&&' '||' ';' ';;' '&' '()' '<' '<<' '>' '>>' '*' '?' '[' ']' '{' '}' '`'\",\n                       lines[2] );\n \n     }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f4be029e652ce43532757c947e596061ec8e93f7",
            "date": "2024-12-15T22:07:41Z",
            "author_login": "slachiewicz"
          },
          {
            "sha": "349b89ced5c863d0dc2c637d30d08b556265efec",
            "date": "2024-09-26T02:04:56Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "46d98a65ce92c16fb99c1fa6c4fc641f86fa733f",
            "date": "2024-11-05T12:07:30Z",
            "author_login": "Claudenw"
          },
          {
            "sha": "1f55ae1e6418b34c745d472903bfb835eb4c392b",
            "date": "2024-11-04T13:40:20Z",
            "author_login": "Claudenw"
          },
          {
            "sha": "2b68c66ada09a3d11a08d09a7be7fc30faa87073",
            "date": "2024-10-19T11:23:26Z",
            "author_login": "Claudenw"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "Plexus-utils before 3.0.16 is vulnerable to command injection because it does not correctly process the contents of double quoted strings.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2018-01-03T20:29:00.703",
    "last_modified": "2024-11-21T03:04:50.743",
    "fix_date": "2013-10-08T16:21:04Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:1322",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codehaus-plexus/plexus-utils/commit/b38a1b3a4352303e4312b2bb601a0d7ec6e28f41",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/9317fd092b257a0815434b116a8af8daea6e920b6673f4fd5583d5fe%40%3Ccommits.druid.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2e94f72f53df432302d359fd66cfa9e9efb8d42633d54579a4377e62%40%3Cdev.avro.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r9584c4304c888f651d214341a939bd264ed30c9e3d0d30fe85097ecf%40%3Ccommits.pulsar.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rd0e44e8ef71eeaaa3cf3d1b8b41eb25894372e2995ec908ce7624d26%40%3Ccommits.pulsar.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2018/01/msg00010.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2018/01/msg00011.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31522",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2018/dsa-4146",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2018/dsa-4149",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:1322",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codehaus-plexus/plexus-utils/commit/b38a1b3a4352303e4312b2bb601a0d7ec6e28f41",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/9317fd092b257a0815434b116a8af8daea6e920b6673f4fd5583d5fe%40%3Ccommits.druid.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2e94f72f53df432302d359fd66cfa9e9efb8d42633d54579a4377e62%40%3Cdev.avro.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r9584c4304c888f651d214341a939bd264ed30c9e3d0d30fe85097ecf%40%3Ccommits.pulsar.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rd0e44e8ef71eeaaa3cf3d1b8b41eb25894372e2995ec908ce7624d26%40%3Ccommits.pulsar.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2018/01/msg00010.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2018/01/msg00011.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31522",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2018/dsa-4146",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2018/dsa-4149",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:12.812999",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "plexus-utils",
    "owner": "codehaus-plexus",
    "created_at": "2015-01-27T16:48:02Z",
    "updated_at": "2024-12-15T22:12:37Z",
    "pushed_at": "2024-12-15T22:12:34Z",
    "size": 15457,
    "stars": 35,
    "forks": 40,
    "open_issues": 22,
    "watchers": 35,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 949918,
      "HTML": 7652,
      "Shell": 138
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:20:12.264200"
  }
}