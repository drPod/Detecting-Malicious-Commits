{
  "cve_id": "CVE-2017-1000491",
  "github_data": {
    "repository": "rhysd/Shiba",
    "fix_commit": "e8a65b0f81eb04903eedd29500d7e1bedf249eab",
    "related_commits": [
      "e8a65b0f81eb04903eedd29500d7e1bedf249eab",
      "e8a65b0f81eb04903eedd29500d7e1bedf249eab"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "e8a65b0f81eb04903eedd29500d7e1bedf249eab",
      "commit_date": "2017-11-28T16:34:37Z",
      "author": {
        "login": "rhysd",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "improve marked renderer",
        "length": 23,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 175,
        "additions": 6,
        "deletions": 169
      },
      "files": [
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -51,9 +51,10 @@\n     \"@types/empower\": \"^1.2.30\",\n     \"@types/es6-promise\": \"0.0.33\",\n     \"@types/he\": \"^0.5.29\",\n-    \"@types/highlight.js\": \"^9.12.1\",\n+    \"@types/highlight.js\": \"^9.12.2\",\n     \"@types/js-yaml\": \"^3.9.1\",\n     \"@types/katex\": \"0.5.0\",\n+    \"@types/marked\": \"^0.3.0\",\n     \"@types/mocha\": \"^2.2.44\",\n     \"@types/mousetrap\": \"^1.5.34\",\n     \"@types/node\": \"8.0.53\","
        },
        {
          "filename": "renderer/markdown-preview.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -41,17 +41,20 @@ marked.setOptions({\n         }\n     },\n \n+    // @ts-ignore: emoji is a dedicated method added by my fork\n     emoji(name: string) {\n         return emoji_replacer.replaceOne(name);\n     },\n+\n+    sanitize: 1,\n });\n \n const REGEX_CHECKED_LISTITEM = /^\\[x]\\s+/;\n const REGEX_UNCHECKED_LISTITEM = /^\\[ ]\\s+/;\n \n class MarkdownRenderer {\n     public outline: Heading[];\n-    private renderer: MarkedRenderer;\n+    private renderer: marked.Renderer;\n     private link_id: number;\n     private tooltips: string;\n "
        },
        {
          "filename": "renderer/marked.d.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 166,
          "patch": "@@ -1,166 +0,0 @@\n-// Generated by typings\n-// Source: https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/9cfdb11648f823b889287c770254b85b78a7a4a4/marked/marked.d.ts\n-interface MarkedStatic {\n-    Renderer: {\n-        new(): MarkedRenderer;\n-    };\n-\n-    Parser: {\n-        new(options: MarkedOptions): MarkedParser;\n-    };\n-\n-    /**\n-     * Compiles markdown to HTML.\n-     *\n-     * @param src String of markdown source to be compiled\n-     * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n-     * @return String of compiled HTML\n-     */\n-    (src: string, callback: (...args: any[]) => void): string;\n-\n-    /**\n-     * Compiles markdown to HTML.\n-     *\n-     * @param src String of markdown source to be compiled\n-     * @param options Hash of options\n-     * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n-     * @return String of compiled HTML\n-     */\n-    (src: string, options?: MarkedOptions, callback?: (...args: any[]) => void): string;\n-\n-    /**\n-     * @param src String of markdown source to be compiled\n-     * @param options Hash of options\n-     */\n-    lexer(src: string, options?: MarkedOptions): any[];\n-\n-    /**\n-     * Compiles markdown to HTML.\n-     *\n-     * @param src String of markdown source to be compiled\n-     * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n-     * @return String of compiled HTML\n-     */\n-    parse(src: string, callback: (...args: any[]) => void): string;\n-\n-    /**\n-     * Compiles markdown to HTML.\n-     *\n-     * @param src String of markdown source to be compiled\n-     * @param options Hash of options\n-     * @param callback Function called when the markdownString has been fully parsed when using async highlighting\n-     * @return String of compiled HTML\n-     */\n-    parse(src: string, options?: MarkedOptions, callback?: (...args: any[]) => void): string;\n-\n-    /**\n-     * @param options Hash of options\n-     */\n-    parser(src: any[], options?: MarkedOptions): string;\n-\n-    /**\n-     * Sets the default options.\n-     *\n-     * @param options Hash of options\n-     */\n-    setOptions(options: MarkedOptions): MarkedStatic;\n-}\n-\n-interface MarkedRenderer {\n-    code(code: string, language: string): string;\n-    blockquote(quote: string): string;\n-    html(html: string): string;\n-    heading(text: string, level: number, raw: string): string;\n-    hr(): string;\n-    list(body: string, ordered: boolean): string;\n-    listitem(text: string): string;\n-    paragraph(text: string): string;\n-    table(header: string, body: string): string;\n-    tablerow(content: string): string;\n-    tablecell(content: string, flags: {\n-        header: boolean,\n-        align: string\n-    }): string;\n-    strong(text: string): string;\n-    em(text: string): string;\n-    codespan(code: string): string;\n-    br(): string;\n-    del(text: string): string;\n-    link(href: string, title: string, text: string): string;\n-    image(href: string, title: string, text: string): string;\n-    text(text: string): string;\n-}\n-\n-interface MarkedParser {\n-    parse(source: any[]): string;\n-}\n-\n-interface MarkedOptions {\n-    /**\n-     * Type: object Default: new Renderer()\n-     *\n-     * An object containing functions to render tokens to HTML.\n-     */\n-    renderer?: MarkedRenderer;\n-\n-    /**\n-     * Enable GitHub flavored markdown.\n-     */\n-    gfm?: boolean;\n-\n-    /**\n-     * Enable GFM tables. This option requires the gfm option to be true.\n-     */\n-    tables?: boolean;\n-\n-    /**\n-     * Enable GFM line breaks. This option requires the gfm option to be true.\n-     */\n-    breaks?: boolean;\n-\n-    /**\n-     * Conform to obscure parts of markdown.pl as much as possible. Don't fix any of the original markdown bugs or poor behavior.\n-     */\n-    pedantic?: boolean;\n-\n-    /**\n-     * Sanitize the output. Ignore any HTML that has been input.\n-     */\n-    sanitize?: boolean;\n-\n-    /**\n-     * Use smarter list behavior than the original markdown. May eventually be default with the old behavior moved into pedantic.\n-     */\n-    smartLists?: boolean;\n-\n-    /**\n-     * Shows an HTML error message when rendering fails.\n-     */\n-    silent?: boolean;\n-\n-    /**\n-     * A function to highlight code blocks. The function takes three arguments: code, lang, and callback.\n-     */\n-    highlight?: (code: string, lang: string, callback?: (...args: any[]) => void) => string;\n-\n-    /**\n-     * Set the prefix for code block classes.\n-     */\n-    langPrefix?: string;\n-\n-    /**\n-     * Use 'smart' typograhic punctuation for things like quotes and dashes.\n-     */\n-    smartypants?: boolean;\n-\n-    /**\n-     * Forked 'emoji' inline images\n-     */\n-    emoji?: (name: string) => string;\n-}\n-\n-declare module 'marked' {\n-    const marked: MarkedStatic;\n-    export = marked;\n-}\n-"
        },
        {
          "filename": "renderer/tsconfig.json",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -18,7 +18,6 @@\n     \"index.ts\",\n     \"keyboard.ts\",\n     \"lib.d.ts\",\n-    \"marked.d.ts\",\n     \"lint-message.ts\",\n     \"lint-panel.ts\",\n     \"markdown-preview.ts\","
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6d38228804d0ea0da8185efabe8ac6db1a96e349",
            "date": "2024-12-06T13:25:24Z",
            "author_login": "rhysd"
          },
          {
            "sha": "218eed2104e491a49ff6282405aea293051b6ab3",
            "date": "2024-12-05T13:56:20Z",
            "author_login": "rhysd"
          },
          {
            "sha": "ec514bfa03ce80d159e13a779841d198b82e56d0",
            "date": "2024-09-27T11:52:49Z",
            "author_login": "rhysd"
          },
          {
            "sha": "4d7793f5a15b1acedb980c9dab4e18fa6f42599f",
            "date": "2024-09-26T14:17:23Z",
            "author_login": "rhysd"
          },
          {
            "sha": "0c1905c5616be8ff9abf28463970db625164aa89",
            "date": "2024-09-23T05:58:02Z",
            "author_login": "rhysd"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "Shiba markdown live preview app version 1.1.0 is vulnerable to XSS which leads to code execution due to enabled node integration.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-01-03T01:29:00.250",
    "last_modified": "2024-11-21T03:04:51.377",
    "fix_date": "2017-11-28T16:34:37Z"
  },
  "references": [
    {
      "url": "https://github.com/rhysd/Shiba/commit/e8a65b0f81eb04903eedd29500d7e1bedf249eab",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rhysd/Shiba/issues/42",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rhysd/Shiba/commit/e8a65b0f81eb04903eedd29500d7e1bedf249eab",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rhysd/Shiba/issues/42",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:12.808047",
    "processing_status": "enhanced"
  }
}