{
  "cve_id": "CVE-2017-1001000",
  "github_data": {
    "repository": "WordPress/WordPress",
    "fix_commit": "e357195ce303017d517aff944644a7a1232926f7",
    "related_commits": [
      "e357195ce303017d517aff944644a7a1232926f7",
      "e357195ce303017d517aff944644a7a1232926f7"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "e357195ce303017d517aff944644a7a1232926f7",
      "commit_date": "2017-01-26T13:39:41Z",
      "author": {
        "login": "joehoyle",
        "type": "User",
        "stats": {
          "total_commits": 51,
          "average_weekly_commits": 0.07822085889570553,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 17
        }
      },
      "commit_message": {
        "title": "REST API: Unify object access handling for simplicity.",
        "length": 391,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 502,
        "additions": 353,
        "deletions": 149
      },
      "files": [
        {
          "filename": "wp-includes/rest-api.php",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -46,6 +46,13 @@ function register_rest_route( $namespace, $route, $args = array(), $override = f\n \t\treturn false;\n \t}\n \n+\tif ( isset( $args['args'] ) ) {\n+\t\t$common_args = $args['args'];\n+\t\tunset( $args['args'] );\n+\t} else {\n+\t\t$common_args = array();\n+\t}\n+\n \tif ( isset( $args['callback'] ) ) {\n \t\t// Upgrade a single set to multiple.\n \t\t$args = array( $args );\n@@ -57,12 +64,13 @@ function register_rest_route( $namespace, $route, $args = array(), $override = f\n \t\t'args'            => array(),\n \t);\n \tforeach ( $args as $key => &$arg_group ) {\n-\t\tif ( ! is_numeric( $arg_group ) ) {\n+\t\tif ( ! is_numeric( $key ) ) {\n \t\t\t// Route option, skip here.\n \t\t\tcontinue;\n \t\t}\n \n \t\t$arg_group = array_merge( $defaults, $arg_group );\n+\t\t$arg_group['args'] = array_merge( $common_args, $arg_group['args'] );\n \t}\n \n \t$full_route = '/' . trim( $namespace, '/' ) . '/' . trim( $route, '/' );"
        },
        {
          "filename": "wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php",
          "status": "modified",
          "additions": 60,
          "deletions": 41,
          "patch": "@@ -63,6 +63,12 @@ public function register_routes() {\n \t\t) );\n \n \t\tregister_rest_route( $this->namespace, '/' . $this->rest_base . '/(?P<id>[\\d]+)', array(\n+\t\t\t'args' => array(\n+\t\t\t\t'id' => array(\n+\t\t\t\t\t'description' => __( 'Unique identifier for the object.' ),\n+\t\t\t\t\t'type'        => 'integer',\n+\t\t\t\t),\n+\t\t\t),\n \t\t\tarray(\n \t\t\t\t'methods'  => WP_REST_Server::READABLE,\n \t\t\t\t'callback' => array( $this, 'get_item' ),\n@@ -299,6 +305,36 @@ public function get_items( $request ) {\n \t\treturn $response;\n \t}\n \n+\t/**\n+\t * Get the comment, if the ID is valid.\n+\t *\n+\t * @since 4.7.2\n+\t *\n+\t * @param int $id Supplied ID.\n+\t * @return WP_Comment|WP_Error Comment object if ID is valid, WP_Error otherwise.\n+\t */\n+\tprotected function get_comment( $id ) {\n+\t\t$error = new WP_Error( 'rest_comment_invalid_id', __( 'Invalid comment ID.' ), array( 'status' => 404 ) );\n+\t\tif ( (int) $id <= 0 ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\t$id = (int) $id;\n+\t\t$comment = get_comment( $id );\n+\t\tif ( empty( $comment ) ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\tif ( ! empty( $comment->comment_post_ID ) ) {\n+\t\t\t$post = get_post( (int) $comment->comment_post_ID );\n+\t\t\tif ( empty( $post ) ) {\n+\t\t\t\treturn new WP_Error( 'rest_post_invalid_id', __( 'Invalid post ID.' ), array( 'status' => 404 ) );\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn $comment;\n+\t}\n+\n \t/**\n \t * Checks if a given request has access to read the comment.\n \t *\n@@ -309,12 +345,9 @@ public function get_items( $request ) {\n \t * @return WP_Error|bool True if the request has read access for the item, error object otherwise.\n \t */\n \tpublic function get_item_permissions_check( $request ) {\n-\t\t$id = (int) $request['id'];\n-\n-\t\t$comment = get_comment( $id );\n-\n-\t\tif ( ! $comment ) {\n-\t\t\treturn true;\n+\t\t$comment = $this->get_comment( $request['id'] );\n+\t\tif ( is_wp_error( $comment ) ) {\n+\t\t\treturn $comment;\n \t\t}\n \n \t\tif ( ! empty( $request['context'] ) && 'edit' === $request['context'] && ! current_user_can( 'moderate_comments' ) ) {\n@@ -344,18 +377,9 @@ public function get_item_permissions_check( $request ) {\n \t * @return WP_Error|WP_REST_Response Response object on success, or error object on failure.\n \t */\n \tpublic function get_item( $request ) {\n-\t\t$id = (int) $request['id'];\n-\n-\t\t$comment = get_comment( $id );\n-\t\tif ( empty( $comment ) ) {\n-\t\t\treturn new WP_Error( 'rest_comment_invalid_id', __( 'Invalid comment ID.' ), array( 'status' => 404 ) );\n-\t\t}\n-\n-\t\tif ( ! empty( $comment->comment_post_ID ) ) {\n-\t\t\t$post = get_post( $comment->comment_post_ID );\n-\t\t\tif ( empty( $post ) ) {\n-\t\t\t\treturn new WP_Error( 'rest_post_invalid_id', __( 'Invalid post ID.' ), array( 'status' => 404 ) );\n-\t\t\t}\n+\t\t$comment = $this->get_comment( $request['id'] );\n+\t\tif ( is_wp_error( $comment ) ) {\n+\t\t\treturn $comment;\n \t\t}\n \n \t\t$data = $this->prepare_item_for_response( $comment, $request );\n@@ -630,12 +654,12 @@ public function create_item( $request ) {\n \t * @return WP_Error|bool True if the request has access to update the item, error object otherwise.\n \t */\n \tpublic function update_item_permissions_check( $request ) {\n+\t\t$comment = $this->get_comment( $request['id'] );\n+\t\tif ( is_wp_error( $comment ) ) {\n+\t\t\treturn $comment;\n+\t\t}\n \n-\t\t$id = (int) $request['id'];\n-\n-\t\t$comment = get_comment( $id );\n-\n-\t\tif ( $comment && ! $this->check_edit_permission( $comment ) ) {\n+\t\tif ( ! $this->check_edit_permission( $comment ) ) {\n \t\t\treturn new WP_Error( 'rest_cannot_edit', __( 'Sorry, you are not allowed to edit this comment.' ), array( 'status' => rest_authorization_required_code() ) );\n \t\t}\n \n@@ -652,14 +676,13 @@ public function update_item_permissions_check( $request ) {\n \t * @return WP_Error|WP_REST_Response Response object on success, or error object on failure.\n \t */\n \tpublic function update_item( $request ) {\n-\t\t$id = (int) $request['id'];\n-\n-\t\t$comment = get_comment( $id );\n-\n-\t\tif ( empty( $comment ) ) {\n-\t\t\treturn new WP_Error( 'rest_comment_invalid_id', __( 'Invalid comment ID.' ), array( 'status' => 404 ) );\n+\t\t$comment = $this->get_comment( $request['id'] );\n+\t\tif ( is_wp_error( $comment ) ) {\n+\t\t\treturn $comment;\n \t\t}\n \n+\t\t$id = $comment->comment_ID;\n+\n \t\tif ( isset( $request['type'] ) && get_comment_type( $id ) !== $request['type'] ) {\n \t\t\treturn new WP_Error( 'rest_comment_invalid_type', __( 'Sorry, you are not allowed to change the comment type.' ), array( 'status' => 404 ) );\n \t\t}\n@@ -750,11 +773,9 @@ public function update_item( $request ) {\n \t * @return WP_Error|bool True if the request has access to delete the item, error object otherwise.\n \t */\n \tpublic function delete_item_permissions_check( $request ) {\n-\t\t$id      = (int) $request['id'];\n-\t\t$comment = get_comment( $id );\n-\n-\t\tif ( ! $comment ) {\n-\t\t\treturn new WP_Error( 'rest_comment_invalid_id', __( 'Invalid comment ID.' ), array( 'status' => 404 ) );\n+\t\t$comment = $this->get_comment( $request['id'] );\n+\t\tif ( is_wp_error( $comment ) ) {\n+\t\t\treturn $comment;\n \t\t}\n \n \t\tif ( ! $this->check_edit_permission( $comment ) ) {\n@@ -773,15 +794,13 @@ public function delete_item_permissions_check( $request ) {\n \t * @return WP_Error|WP_REST_Response Response object on success, or error object on failure.\n \t */\n \tpublic function delete_item( $request ) {\n-\t\t$id    = (int) $request['id'];\n-\t\t$force = isset( $request['force'] ) ? (bool) $request['force'] : false;\n-\n-\t\t$comment = get_comment( $id );\n-\n-\t\tif ( empty( $comment ) ) {\n-\t\t\treturn new WP_Error( 'rest_comment_invalid_id', __( 'Invalid comment ID.' ), array( 'status' => 404 ) );\n+\t\t$comment = $this->get_comment( $request['id'] );\n+\t\tif ( is_wp_error( $comment ) ) {\n+\t\t\treturn $comment;\n \t\t}\n \n+\t\t$force = isset( $request['force'] ) ? (bool) $request['force'] : false;\n+\n \t\t/**\n \t\t * Filters whether a comment can be trashed.\n \t\t *"
        },
        {
          "filename": "wp-includes/rest-api/endpoints/class-wp-rest-post-statuses-controller.php",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -48,6 +48,12 @@ public function register_routes() {\n \t\t) );\n \n \t\tregister_rest_route( $this->namespace, '/' . $this->rest_base . '/(?P<status>[\\w-]+)', array(\n+\t\t\t'args' => array(\n+\t\t\t\t'status' => array(\n+\t\t\t\t\t'description' => __( 'An alphanumeric identifier for the status.' ),\n+\t\t\t\t\t'type'        => 'string',\n+\t\t\t\t),\n+\t\t\t),\n \t\t\tarray(\n \t\t\t\t'methods'             => WP_REST_Server::READABLE,\n \t\t\t\t'callback'            => array( $this, 'get_item' ),"
        },
        {
          "filename": "wp-includes/rest-api/endpoints/class-wp-rest-post-types-controller.php",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -48,6 +48,12 @@ public function register_routes() {\n \t\t) );\n \n \t\tregister_rest_route( $this->namespace, '/' . $this->rest_base . '/(?P<type>[\\w-]+)', array(\n+\t\t\t'args' => array(\n+\t\t\t\t'type' => array(\n+\t\t\t\t\t'description' => __( 'An alphanumeric identifier for the post type.' ),\n+\t\t\t\t\t'type'        => 'string',\n+\t\t\t\t),\n+\t\t\t),\n \t\t\tarray(\n \t\t\t\t'methods'  => WP_REST_Server::READABLE,\n \t\t\t\t'callback' => array( $this, 'get_item' ),"
        },
        {
          "filename": "wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php",
          "status": "modified",
          "additions": 62,
          "deletions": 24,
          "patch": "@@ -88,6 +88,12 @@ public function register_routes() {\n \t\t\t);\n \t\t}\n \t\tregister_rest_route( $this->namespace, '/' . $this->rest_base . '/(?P<id>[\\d]+)', array(\n+\t\t\t'args' => array(\n+\t\t\t\t'id' => array(\n+\t\t\t\t\t'description' => __( 'Unique identifier for the object.' ),\n+\t\t\t\t\t'type'        => 'integer',\n+\t\t\t\t),\n+\t\t\t),\n \t\t\tarray(\n \t\t\t\t'methods'             => WP_REST_Server::READABLE,\n \t\t\t\t'callback'            => array( $this, 'get_item' ),\n@@ -349,6 +355,28 @@ public function get_items( $request ) {\n \t\treturn $response;\n \t}\n \n+\t/**\n+\t * Get the post, if the ID is valid.\n+\t *\n+\t * @since 4.7.2\n+\t *\n+\t * @param int $id Supplied ID.\n+\t * @return WP_Post|WP_Error Post object if ID is valid, WP_Error otherwise.\n+\t */\n+\tprotected function get_post( $id ) {\n+\t\t$error = new WP_Error( 'rest_post_invalid_id', __( 'Invalid post ID.' ), array( 'status' => 404 ) );\n+\t\tif ( (int) $id <= 0 ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\t$post = get_post( (int) $id );\n+\t\tif ( empty( $post ) || empty( $post->ID ) || $this->post_type !== $post->post_type ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\treturn $post;\n+\t}\n+\n \t/**\n \t * Checks if a given request has access to read a post.\n \t *\n@@ -359,8 +387,10 @@ public function get_items( $request ) {\n \t * @return bool|WP_Error True if the request has read access for the item, WP_Error object otherwise.\n \t */\n \tpublic function get_item_permissions_check( $request ) {\n-\n-\t\t$post = get_post( (int) $request['id'] );\n+\t\t$post = $this->get_post( $request['id'] );\n+\t\tif ( is_wp_error( $post ) ) {\n+\t\t\treturn $post;\n+\t\t}\n \n \t\tif ( 'edit' === $request['context'] && $post && ! $this->check_update_permission( $post ) ) {\n \t\t\treturn new WP_Error( 'rest_forbidden_context', __( 'Sorry, you are not allowed to edit this post.' ), array( 'status' => rest_authorization_required_code() ) );\n@@ -428,18 +458,16 @@ public function can_access_password_content( $post, $request ) {\n \t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n \t */\n \tpublic function get_item( $request ) {\n-\t\t$id   = (int) $request['id'];\n-\t\t$post = get_post( $id );\n-\n-\t\tif ( empty( $id ) || empty( $post->ID ) || $this->post_type !== $post->post_type ) {\n-\t\t\treturn new WP_Error( 'rest_post_invalid_id', __( 'Invalid post ID.' ), array( 'status' => 404 ) );\n+\t\t$post = $this->get_post( $request['id'] );\n+\t\tif ( is_wp_error( $post ) ) {\n+\t\t\treturn $post;\n \t\t}\n \n \t\t$data     = $this->prepare_item_for_response( $post, $request );\n \t\t$response = rest_ensure_response( $data );\n \n \t\tif ( is_post_type_viewable( get_post_type_object( $post->post_type ) ) ) {\n-\t\t\t$response->link_header( 'alternate',  get_permalink( $id ), array( 'type' => 'text/html' ) );\n+\t\t\t$response->link_header( 'alternate',  get_permalink( $post->ID ), array( 'type' => 'text/html' ) );\n \t\t}\n \n \t\treturn $response;\n@@ -455,6 +483,9 @@ public function get_item( $request ) {\n \t * @return true|WP_Error True if the request has access to create items, WP_Error object otherwise.\n \t */\n \tpublic function create_item_permissions_check( $request ) {\n+\t\tif ( ! empty( $request['id'] ) ) {\n+\t\t\treturn new WP_Error( 'rest_post_exists', __( 'Cannot create existing post.' ), array( 'status' => 400 ) );\n+\t\t}\n \n \t\t$post_type = get_post_type_object( $this->post_type );\n \n@@ -591,8 +622,11 @@ public function create_item( $request ) {\n \t * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.\n \t */\n \tpublic function update_item_permissions_check( $request ) {\n+\t\t$post = $this->get_post( $request['id'] );\n+\t\tif ( is_wp_error( $post ) ) {\n+\t\t\treturn $post;\n+\t\t}\n \n-\t\t$post = get_post( $request['id'] );\n \t\t$post_type = get_post_type_object( $this->post_type );\n \n \t\tif ( $post && ! $this->check_update_permission( $post ) ) {\n@@ -624,11 +658,9 @@ public function update_item_permissions_check( $request ) {\n \t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n \t */\n \tpublic function update_item( $request ) {\n-\t\t$id   = (int) $request['id'];\n-\t\t$post = get_post( $id );\n-\n-\t\tif ( empty( $id ) || empty( $post->ID ) || $this->post_type !== $post->post_type ) {\n-\t\t\treturn new WP_Error( 'rest_post_invalid_id', __( 'Invalid post ID.' ), array( 'status' => 404 ) );\n+\t\t$valid_check = $this->get_post( $request['id'] );\n+\t\tif ( is_wp_error( $valid_check ) ) {\n+\t\t\treturn $valid_check;\n \t\t}\n \n \t\t$post = $this->prepare_item_for_database( $request );\n@@ -714,8 +746,10 @@ public function update_item( $request ) {\n \t * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.\n \t */\n \tpublic function delete_item_permissions_check( $request ) {\n-\n-\t\t$post = get_post( $request['id'] );\n+\t\t$post = $this->get_post( $request['id'] );\n+\t\tif ( is_wp_error( $post ) ) {\n+\t\t\treturn $post;\n+\t\t}\n \n \t\tif ( $post && ! $this->check_delete_permission( $post ) ) {\n \t\t\treturn new WP_Error( 'rest_cannot_delete', __( 'Sorry, you are not allowed to delete this post.' ), array( 'status' => rest_authorization_required_code() ) );\n@@ -734,15 +768,14 @@ public function delete_item_permissions_check( $request ) {\n \t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n \t */\n \tpublic function delete_item( $request ) {\n-\t\t$id    = (int) $request['id'];\n-\t\t$force = (bool) $request['force'];\n-\n-\t\t$post = get_post( $id );\n-\n-\t\tif ( empty( $id ) || empty( $post->ID ) || $this->post_type !== $post->post_type ) {\n-\t\t\treturn new WP_Error( 'rest_post_invalid_id', __( 'Invalid post ID.' ), array( 'status' => 404 ) );\n+\t\t$post = $this->get_post( $request['id'] );\n+\t\tif ( is_wp_error( $post ) ) {\n+\t\t\treturn $post;\n \t\t}\n \n+\t\t$id    = $post->ID;\n+\t\t$force = (bool) $request['force'];\n+\n \t\t$supports_trash = ( EMPTY_TRASH_DAYS > 0 );\n \n \t\tif ( 'attachment' === $post->post_type ) {\n@@ -901,7 +934,12 @@ protected function prepare_item_for_database( $request ) {\n \n \t\t// Post ID.\n \t\tif ( isset( $request['id'] ) ) {\n-\t\t\t$prepared_post->ID = absint( $request['id'] );\n+\t\t\t$existing_post = $this->get_post( $request['id'] );\n+\t\t\tif ( is_wp_error( $existing_post ) ) {\n+\t\t\t\treturn $existing_post;\n+\t\t\t}\n+\n+\t\t\t$prepared_post->ID = $existing_post->ID;\n \t\t}\n \n \t\t$schema = $this->get_item_schema();"
        },
        {
          "filename": "wp-includes/rest-api/endpoints/class-wp-rest-revisions-controller.php",
          "status": "modified",
          "additions": 88,
          "deletions": 19,
          "patch": "@@ -71,6 +71,12 @@ public function __construct( $parent_post_type ) {\n \tpublic function register_routes() {\n \n \t\tregister_rest_route( $this->namespace, '/' . $this->parent_base . '/(?P<parent>[\\d]+)/' . $this->rest_base, array(\n+\t\t\t'args' => array(\n+\t\t\t\t'parent' => array(\n+\t\t\t\t\t'description' => __( 'The ID for the parent of the object.' ),\n+\t\t\t\t\t'type'        => 'integer',\n+\t\t\t\t),\n+\t\t\t),\n \t\t\tarray(\n \t\t\t\t'methods'             => WP_REST_Server::READABLE,\n \t\t\t\t'callback'            => array( $this, 'get_items' ),\n@@ -81,6 +87,16 @@ public function register_routes() {\n \t\t) );\n \n \t\tregister_rest_route( $this->namespace, '/' . $this->parent_base . '/(?P<parent>[\\d]+)/' . $this->rest_base . '/(?P<id>[\\d]+)', array(\n+\t\t\t'args' => array(\n+\t\t\t\t'parent' => array(\n+\t\t\t\t\t'description' => __( 'The ID for the parent of the object.' ),\n+\t\t\t\t\t'type'        => 'integer',\n+\t\t\t\t),\n+\t\t\t\t'id' => array(\n+\t\t\t\t\t'description' => __( 'Unique identifier for the object.' ),\n+\t\t\t\t\t'type'        => 'integer',\n+\t\t\t\t),\n+\t\t\t),\n \t\t\tarray(\n \t\t\t\t'methods'             => WP_REST_Server::READABLE,\n \t\t\t\t'callback'            => array( $this, 'get_item' ),\n@@ -106,6 +122,28 @@ public function register_routes() {\n \n \t}\n \n+\t/**\n+\t * Get the parent post, if the ID is valid.\n+\t *\n+\t * @since 4.7.2\n+\t *\n+\t * @param int $id Supplied ID.\n+\t * @return WP_Post|WP_Error Post object if ID is valid, WP_Error otherwise.\n+\t */\n+\tprotected function get_parent( $parent ) {\n+\t\t$error = new WP_Error( 'rest_post_invalid_parent', __( 'Invalid post parent ID.' ), array( 'status' => 404 ) );\n+\t\tif ( (int) $parent <= 0 ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\t$parent = get_post( (int) $parent );\n+\t\tif ( empty( $parent ) || empty( $parent->ID ) || $this->parent_post_type !== $parent->post_type ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\treturn $parent;\n+\t}\n+\n \t/**\n \t * Checks if a given request has access to get revisions.\n \t *\n@@ -116,11 +154,11 @@ public function register_routes() {\n \t * @return true|WP_Error True if the request has read access, WP_Error object otherwise.\n \t */\n \tpublic function get_items_permissions_check( $request ) {\n-\n-\t\t$parent = get_post( $request['parent'] );\n-\t\tif ( ! $parent ) {\n-\t\t\treturn true;\n+\t\t$parent = $this->get_parent( $request['parent'] );\n+\t\tif ( is_wp_error( $parent ) ) {\n+\t\t\treturn $parent;\n \t\t}\n+\n \t\t$parent_post_type_obj = get_post_type_object( $parent->post_type );\n \t\tif ( ! current_user_can( $parent_post_type_obj->cap->edit_post, $parent->ID ) ) {\n \t\t\treturn new WP_Error( 'rest_cannot_read', __( 'Sorry, you are not allowed to view revisions of this post.' ), array( 'status' => rest_authorization_required_code() ) );\n@@ -129,6 +167,28 @@ public function get_items_permissions_check( $request ) {\n \t\treturn true;\n \t}\n \n+\t/**\n+\t * Get the revision, if the ID is valid.\n+\t *\n+\t * @since 4.7.2\n+\t *\n+\t * @param int $id Supplied ID.\n+\t * @return WP_Post|WP_Error Revision post object if ID is valid, WP_Error otherwise.\n+\t */\n+\tprotected function get_revision( $id ) {\n+\t\t$error = new WP_Error( 'rest_post_invalid_id', __( 'Invalid revision ID.' ), array( 'status' => 404 ) );\n+\t\tif ( (int) $id <= 0 ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\t$revision = get_post( (int) $id );\n+\t\tif ( empty( $revision ) || empty( $revision->ID ) || 'revision' !== $revision->post_type ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\treturn $revision;\n+\t}\n+\n \t/**\n \t * Gets a collection of revisions.\n \t *\n@@ -139,9 +199,9 @@ public function get_items_permissions_check( $request ) {\n \t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n \t */\n \tpublic function get_items( $request ) {\n-\t\t$parent = get_post( $request['parent'] );\n-\t\tif ( ! $request['parent'] || ! $parent || $this->parent_post_type !== $parent->post_type ) {\n-\t\t\treturn new WP_Error( 'rest_post_invalid_parent', __( 'Invalid post parent ID.' ), array( 'status' => 404 ) );\n+\t\t$parent = $this->get_parent( $request['parent'] );\n+\t\tif ( is_wp_error( $parent ) ) {\n+\t\t\treturn $parent;\n \t\t}\n \n \t\t$revisions = wp_get_post_revisions( $request['parent'] );\n@@ -177,14 +237,14 @@ public function get_item_permissions_check( $request ) {\n \t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n \t */\n \tpublic function get_item( $request ) {\n-\t\t$parent = get_post( $request['parent'] );\n-\t\tif ( ! $request['parent'] || ! $parent || $this->parent_post_type !== $parent->post_type ) {\n-\t\t\treturn new WP_Error( 'rest_post_invalid_parent', __( 'Invalid post parent ID.' ), array( 'status' => 404 ) );\n+\t\t$parent = $this->get_parent( $request['parent'] );\n+\t\tif ( is_wp_error( $parent ) ) {\n+\t\t\treturn $parent;\n \t\t}\n \n-\t\t$revision = get_post( $request['id'] );\n-\t\tif ( ! $revision || 'revision' !== $revision->post_type ) {\n-\t\t\treturn new WP_Error( 'rest_post_invalid_id', __( 'Invalid revision ID.' ), array( 'status' => 404 ) );\n+\t\t$revision = $this->get_revision( $request['id'] );\n+\t\tif ( is_wp_error( $revision ) ) {\n+\t\t\treturn $revision;\n \t\t}\n \n \t\t$response = $this->prepare_item_for_response( $revision, $request );\n@@ -201,18 +261,23 @@ public function get_item( $request ) {\n \t * @return bool|WP_Error True if the request has access to delete the item, WP_Error object otherwise.\n \t */\n \tpublic function delete_item_permissions_check( $request ) {\n+\t\t$parent = $this->get_parent( $request['parent'] );\n+\t\tif ( is_wp_error( $parent ) ) {\n+\t\t\treturn $parent;\n+\t\t}\n+\n+\t\t$revision = $this->get_revision( $request['id'] );\n+\t\tif ( is_wp_error( $revision ) ) {\n+\t\t\treturn $revision;\n+\t\t}\n \n \t\t$response = $this->get_items_permissions_check( $request );\n \t\tif ( ! $response || is_wp_error( $response ) ) {\n \t\t\treturn $response;\n \t\t}\n \n-\t\t$post = get_post( $request['id'] );\n-\t\tif ( ! $post ) {\n-\t\t\treturn new WP_Error( 'rest_post_invalid_id', __( 'Invalid revision ID.' ), array( 'status' => 404 ) );\n-\t\t}\n \t\t$post_type = get_post_type_object( 'revision' );\n-\t\treturn current_user_can( $post_type->cap->delete_post, $post->ID );\n+\t\treturn current_user_can( $post_type->cap->delete_post, $revision->ID );\n \t}\n \n \t/**\n@@ -225,14 +290,18 @@ public function delete_item_permissions_check( $request ) {\n \t * @return true|WP_Error True on success, or WP_Error object on failure.\n \t */\n \tpublic function delete_item( $request ) {\n+\t\t$revision = $this->get_revision( $request['id'] );\n+\t\tif ( is_wp_error( $revision ) ) {\n+\t\t\treturn $revision;\n+\t\t}\n+\n \t\t$force = isset( $request['force'] ) ? (bool) $request['force'] : false;\n \n \t\t// We don't support trashing for revisions.\n \t\tif ( ! $force ) {\n \t\t\treturn new WP_Error( 'rest_trash_not_supported', __( 'Revisions do not support trashing. Set force=true to delete.' ), array( 'status' => 501 ) );\n \t\t}\n \n-\t\t$revision = get_post( $request['id'] );\n \t\t$previous = $this->prepare_item_for_response( $revision, $request );\n \n \t\t$result = wp_delete_post( $request['id'], true );"
        },
        {
          "filename": "wp-includes/rest-api/endpoints/class-wp-rest-taxonomies-controller.php",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -48,6 +48,12 @@ public function register_routes() {\n \t\t) );\n \n \t\tregister_rest_route( $this->namespace, '/' . $this->rest_base . '/(?P<taxonomy>[\\w-]+)', array(\n+\t\t\t'args' => array(\n+\t\t\t\t'taxonomy' => array(\n+\t\t\t\t\t'description'  => __( 'An alphanumeric identifier for the taxonomy.' ),\n+\t\t\t\t\t'type'         => 'string',\n+\t\t\t\t),\n+\t\t\t),\n \t\t\tarray(\n \t\t\t\t'methods'         => WP_REST_Server::READABLE,\n \t\t\t\t'callback'        => array( $this, 'get_item' ),"
        },
        {
          "filename": "wp-includes/rest-api/endpoints/class-wp-rest-terms-controller.php",
          "status": "modified",
          "additions": 57,
          "deletions": 35,
          "patch": "@@ -96,6 +96,12 @@ public function register_routes() {\n \t\t) );\n \n \t\tregister_rest_route( $this->namespace, '/' . $this->rest_base . '/(?P<id>[\\d]+)', array(\n+\t\t\t'args' => array(\n+\t\t\t\t'id' => array(\n+\t\t\t\t\t'description' => __( 'Unique identifier for the term.' ),\n+\t\t\t\t\t'type'        => 'integer',\n+\t\t\t\t),\n+\t\t\t),\n \t\t\tarray(\n \t\t\t\t'methods'             => WP_REST_Server::READABLE,\n \t\t\t\t'callback'            => array( $this, 'get_item' ),\n@@ -108,7 +114,7 @@ public function register_routes() {\n \t\t\t\t'methods'             => WP_REST_Server::EDITABLE,\n \t\t\t\t'callback'            => array( $this, 'update_item' ),\n \t\t\t\t'permission_callback' => array( $this, 'update_item_permissions_check' ),\n-\t\t\t\t'args'                 => $this->get_endpoint_args_for_item_schema( WP_REST_Server::EDITABLE ),\n+\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::EDITABLE ),\n \t\t\t),\n \t\t\tarray(\n \t\t\t\t'methods'             => WP_REST_Server::DELETABLE,\n@@ -287,6 +293,33 @@ public function get_items( $request ) {\n \t\treturn $response;\n \t}\n \n+\t/**\n+\t * Get the term, if the ID is valid.\n+\t *\n+\t * @since 4.7.2\n+\t *\n+\t * @param int $id Supplied ID.\n+\t * @return WP_Term|WP_Error Term object if ID is valid, WP_Error otherwise.\n+\t */\n+\tprotected function get_term( $id ) {\n+\t\t$error = new WP_Error( 'rest_term_invalid', __( 'Term does not exist.' ), array( 'status' => 404 ) );\n+\n+\t\tif ( ! $this->check_is_taxonomy_allowed( $this->taxonomy ) ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\tif ( (int) $id <= 0 ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\t$term = get_term( (int) $id, $this->taxonomy );\n+\t\tif ( empty( $term ) || $term->taxonomy !== $this->taxonomy ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\treturn $term;\n+\t}\n+\n \t/**\n \t * Checks if a request has access to read or edit the specified term.\n \t *\n@@ -297,11 +330,12 @@ public function get_items( $request ) {\n \t * @return bool|WP_Error True if the request has read access for the item, otherwise false or WP_Error object.\n \t */\n \tpublic function get_item_permissions_check( $request ) {\n-\t\t$tax_obj = get_taxonomy( $this->taxonomy );\n-\t\tif ( ! $tax_obj || ! $this->check_is_taxonomy_allowed( $this->taxonomy ) ) {\n-\t\t\treturn false;\n+\t\t$term = $this->get_term( $request['id'] );\n+\t\tif ( is_wp_error( $term ) ) {\n+\t\t\treturn $term;\n \t\t}\n-\t\tif ( 'edit' === $request['context'] && ! current_user_can( 'edit_term', (int) $request['id'] ) ) {\n+\n+\t\tif ( 'edit' === $request['context'] && ! current_user_can( 'edit_term', $term->term_id ) ) {\n \t\t\treturn new WP_Error( 'rest_forbidden_context', __( 'Sorry, you are not allowed to edit this term.' ), array( 'status' => rest_authorization_required_code() ) );\n \t\t}\n \t\treturn true;\n@@ -317,13 +351,7 @@ public function get_item_permissions_check( $request ) {\n \t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n \t */\n \tpublic function get_item( $request ) {\n-\n-\t\t$term = get_term( (int) $request['id'], $this->taxonomy );\n-\n-\t\tif ( ! $term || $term->taxonomy !== $this->taxonomy ) {\n-\t\t\treturn new WP_Error( 'rest_term_invalid', __( 'Term does not exist.' ), array( 'status' => 404 ) );\n-\t\t}\n-\n+\t\t$term = $this->get_term( $request['id'] );\n \t\tif ( is_wp_error( $term ) ) {\n \t\t\treturn $term;\n \t\t}\n@@ -445,15 +473,9 @@ public function create_item( $request ) {\n \t * @return bool|WP_Error True if the request has access to update the item, false or WP_Error object otherwise.\n \t */\n \tpublic function update_item_permissions_check( $request ) {\n-\n-\t\tif ( ! $this->check_is_taxonomy_allowed( $this->taxonomy ) ) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\t$term = get_term( (int) $request['id'], $this->taxonomy );\n-\n-\t\tif ( ! $term ) {\n-\t\t\treturn new WP_Error( 'rest_term_invalid', __( 'Term does not exist.' ), array( 'status' => 404 ) );\n+\t\t$term = $this->get_term( $request['id'] );\n+\t\tif ( is_wp_error( $term ) ) {\n+\t\t\treturn $term;\n \t\t}\n \n \t\tif ( ! current_user_can( 'edit_term', $term->term_id ) ) {\n@@ -473,6 +495,11 @@ public function update_item_permissions_check( $request ) {\n \t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n \t */\n \tpublic function update_item( $request ) {\n+\t\t$term = $this->get_term( $request['id'] );\n+\t\tif ( is_wp_error( $term ) ) {\n+\t\t\treturn $term;\n+\t\t}\n+\n \t\tif ( isset( $request['parent'] ) ) {\n \t\t\tif ( ! is_taxonomy_hierarchical( $this->taxonomy ) ) {\n \t\t\t\treturn new WP_Error( 'rest_taxonomy_not_hierarchical', __( 'Can not set parent term, taxonomy is not hierarchical.' ), array( 'status' => 400 ) );\n@@ -487,8 +514,6 @@ public function update_item( $request ) {\n \n \t\t$prepared_term = $this->prepare_item_for_database( $request );\n \n-\t\t$term = get_term( (int) $request['id'], $this->taxonomy );\n-\n \t\t// Only update the term if we haz something to update.\n \t\tif ( ! empty( $prepared_term ) ) {\n \t\t\t$update = wp_update_term( $term->term_id, $term->taxonomy, wp_slash( (array) $prepared_term ) );\n@@ -498,14 +523,14 @@ public function update_item( $request ) {\n \t\t\t}\n \t\t}\n \n-\t\t$term = get_term( (int) $request['id'], $this->taxonomy );\n+\t\t$term = get_term( $term->term_id, $this->taxonomy );\n \n \t\t/** This action is documented in wp-includes/rest-api/endpoints/class-wp-rest-terms-controller.php */\n \t\tdo_action( \"rest_insert_{$this->taxonomy}\", $term, $request, false );\n \n \t\t$schema = $this->get_item_schema();\n \t\tif ( ! empty( $schema['properties']['meta'] ) && isset( $request['meta'] ) ) {\n-\t\t\t$meta_update = $this->meta->update_value( $request['meta'], (int) $request['id'] );\n+\t\t\t$meta_update = $this->meta->update_value( $request['meta'], $term->term_id );\n \n \t\t\tif ( is_wp_error( $meta_update ) ) {\n \t\t\t\treturn $meta_update;\n@@ -535,14 +560,9 @@ public function update_item( $request ) {\n \t * @return bool|WP_Error True if the request has access to delete the item, otherwise false or WP_Error object.\n \t */\n \tpublic function delete_item_permissions_check( $request ) {\n-\t\tif ( ! $this->check_is_taxonomy_allowed( $this->taxonomy ) ) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\t$term = get_term( (int) $request['id'], $this->taxonomy );\n-\n-\t\tif ( ! $term ) {\n-\t\t\treturn new WP_Error( 'rest_term_invalid', __( 'Term does not exist.' ), array( 'status' => 404 ) );\n+\t\t$term = $this->get_term( $request['id'] );\n+\t\tif ( is_wp_error( $term ) ) {\n+\t\t\treturn $term;\n \t\t}\n \n \t\tif ( ! current_user_can( 'delete_term', $term->term_id ) ) {\n@@ -562,6 +582,10 @@ public function delete_item_permissions_check( $request ) {\n \t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n \t */\n \tpublic function delete_item( $request ) {\n+\t\t$term = $this->get_term( $request['id'] );\n+\t\tif ( is_wp_error( $term ) ) {\n+\t\t\treturn $term;\n+\t\t}\n \n \t\t$force = isset( $request['force'] ) ? (bool) $request['force'] : false;\n \n@@ -570,8 +594,6 @@ public function delete_item( $request ) {\n \t\t\treturn new WP_Error( 'rest_trash_not_supported', __( 'Terms do not support trashing. Set force=true to delete.' ), array( 'status' => 501 ) );\n \t\t}\n \n-\t\t$term = get_term( (int) $request['id'], $this->taxonomy );\n-\n \t\t$request->set_param( 'context', 'view' );\n \n \t\t$previous = $this->prepare_item_for_response( $term, $request );"
        },
        {
          "filename": "wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php",
          "status": "modified",
          "additions": 58,
          "deletions": 28,
          "patch": "@@ -65,6 +65,12 @@ public function register_routes() {\n \t\t) );\n \n \t\tregister_rest_route( $this->namespace, '/' . $this->rest_base . '/(?P<id>[\\d]+)', array(\n+\t\t\t'args' => array(\n+\t\t\t\t'id' => array(\n+\t\t\t\t\t'description' => __( 'Unique identifier for the user.' ),\n+\t\t\t\t\t'type'        => 'integer',\n+\t\t\t\t),\n+\t\t\t),\n \t\t\tarray(\n \t\t\t\t'methods'             => WP_REST_Server::READABLE,\n \t\t\t\t'callback'            => array( $this, 'get_item' ),\n@@ -326,6 +332,28 @@ public function get_items( $request ) {\n \t\treturn $response;\n \t}\n \n+\t/**\n+\t * Get the user, if the ID is valid.\n+\t *\n+\t * @since 4.7.2\n+\t *\n+\t * @param int $id Supplied ID.\n+\t * @return WP_User|WP_Error True if ID is valid, WP_Error otherwise.\n+\t */\n+\tprotected function get_user( $id ) {\n+\t\t$error = new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n+\t\tif ( (int) $id <= 0 ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\t$user = get_userdata( (int) $id );\n+\t\tif ( empty( $user ) || ! $user->exists() ) {\n+\t\t\treturn $error;\n+\t\t}\n+\n+\t\treturn $user;\n+\t}\n+\n \t/**\n \t * Checks if a given request has access to read a user.\n \t *\n@@ -336,22 +364,20 @@ public function get_items( $request ) {\n \t * @return true|WP_Error True if the request has read access for the item, otherwise WP_Error object.\n \t */\n \tpublic function get_item_permissions_check( $request ) {\n+\t\t$user = $this->get_user( $request['id'] );\n+\t\tif ( is_wp_error( $user ) ) {\n+\t\t\treturn $user;\n+\t\t}\n \n-\t\t$id = (int) $request['id'];\n-\t\t$user = get_userdata( $id );\n \t\t$types = get_post_types( array( 'show_in_rest' => true ), 'names' );\n \n-\t\tif ( empty( $id ) || empty( $user->ID ) ) {\n-\t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n-\t\t}\n-\n-\t\tif ( get_current_user_id() === $id ) {\n+\t\tif ( get_current_user_id() === $user->ID ) {\n \t\t\treturn true;\n \t\t}\n \n \t\tif ( 'edit' === $request['context'] && ! current_user_can( 'list_users' ) ) {\n \t\t\treturn new WP_Error( 'rest_user_cannot_view', __( 'Sorry, you are not allowed to list users.' ), array( 'status' => rest_authorization_required_code() ) );\n-\t\t} elseif ( ! count_user_posts( $id, $types ) && ! current_user_can( 'edit_user', $id ) && ! current_user_can( 'list_users' ) ) {\n+\t\t} elseif ( ! count_user_posts( $user->ID, $types ) && ! current_user_can( 'edit_user', $user->ID ) && ! current_user_can( 'list_users' ) ) {\n \t\t\treturn new WP_Error( 'rest_user_cannot_view', __( 'Sorry, you are not allowed to list users.' ), array( 'status' => rest_authorization_required_code() ) );\n \t\t}\n \n@@ -368,11 +394,9 @@ public function get_item_permissions_check( $request ) {\n \t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n \t */\n \tpublic function get_item( $request ) {\n-\t\t$id   = (int) $request['id'];\n-\t\t$user = get_userdata( $id );\n-\n-\t\tif ( empty( $id ) || empty( $user->ID ) ) {\n-\t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n+\t\t$user = $this->get_user( $request['id'] );\n+\t\tif ( is_wp_error( $user ) ) {\n+\t\t\treturn $user;\n \t\t}\n \n \t\t$user = $this->prepare_item_for_response( $user, $request );\n@@ -542,10 +566,12 @@ public function create_item( $request ) {\n \t * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.\n \t */\n \tpublic function update_item_permissions_check( $request ) {\n+\t\t$user = $this->get_user( $request['id'] );\n+\t\tif ( is_wp_error( $user ) ) {\n+\t\t\treturn $user;\n+\t\t}\n \n-\t\t$id = (int) $request['id'];\n-\n-\t\tif ( ! current_user_can( 'edit_user', $id ) ) {\n+\t\tif ( ! current_user_can( 'edit_user', $user->ID ) ) {\n \t\t\treturn new WP_Error( 'rest_cannot_edit', __( 'Sorry, you are not allowed to edit this user.' ), array( 'status' => rest_authorization_required_code() ) );\n \t\t}\n \n@@ -566,8 +592,12 @@ public function update_item_permissions_check( $request ) {\n \t * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.\n \t */\n \tpublic function update_item( $request ) {\n-\t\t$id   = (int) $request['id'];\n-\t\t$user = get_userdata( $id );\n+\t\t$user = $this->get_user( $request['id'] );\n+\t\tif ( is_wp_error( $user ) ) {\n+\t\t\treturn $user;\n+\t\t}\n+\n+\t\t$id = $user->ID;\n \n \t\tif ( ! $user ) {\n \t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n@@ -682,10 +712,12 @@ function update_current_item( $request ) {\n \t * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.\n \t */\n \tpublic function delete_item_permissions_check( $request ) {\n+\t\t$user = $this->get_user( $request['id'] );\n+\t\tif ( is_wp_error( $user ) ) {\n+\t\t\treturn $user;\n+\t\t}\n \n-\t\t$id = (int) $request['id'];\n-\n-\t\tif ( ! current_user_can( 'delete_user', $id ) ) {\n+\t\tif ( ! current_user_can( 'delete_user', $user->ID ) ) {\n \t\t\treturn new WP_Error( 'rest_user_cannot_delete', __( 'Sorry, you are not allowed to delete this user.' ), array( 'status' => rest_authorization_required_code() ) );\n \t\t}\n \n@@ -706,8 +738,12 @@ public function delete_item( $request ) {\n \t\tif ( is_multisite() ) {\n \t\t\treturn new WP_Error( 'rest_cannot_delete', __( 'The user cannot be deleted.' ), array( 'status' => 501 ) );\n \t\t}\n+\t\t$user = $this->get_user( $request['id'] );\n+\t\tif ( is_wp_error( $user ) ) {\n+\t\t\treturn $user;\n+\t\t}\n \n-\t\t$id       = (int) $request['id'];\n+\t\t$id       = $user->ID;\n \t\t$reassign = false === $request['reassign'] ? null : absint( $request['reassign'] );\n \t\t$force    = isset( $request['force'] ) ? (bool) $request['force'] : false;\n \n@@ -716,12 +752,6 @@ public function delete_item( $request ) {\n \t\t\treturn new WP_Error( 'rest_trash_not_supported', __( 'Users do not support trashing. Set force=true to delete.' ), array( 'status' => 501 ) );\n \t\t}\n \n-\t\t$user = get_userdata( $id );\n-\n-\t\tif ( ! $user ) {\n-\t\t\treturn new WP_Error( 'rest_user_invalid_id', __( 'Invalid user ID.' ), array( 'status' => 404 ) );\n-\t\t}\n-\n \t\tif ( ! empty( $reassign ) ) {\n \t\t\tif ( $reassign === $id || ! get_userdata( $reassign ) ) {\n \t\t\t\treturn new WP_Error( 'rest_user_invalid_reassign', __( 'Invalid user ID for reassignment.' ), array( 'status' => 400 ) );"
        },
        {
          "filename": "wp-includes/version.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@\n  *\n  * @global string $wp_version\n  */\n-$wp_version = '4.8-alpha-39952';\n+$wp_version = '4.8-alpha-39954';\n \n /**\n  * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema."
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cf2aebff7f24e3775678f5b5e70e58043021fecf",
            "date": "2025-01-25T23:51:24Z",
            "author_login": "audrasjb"
          },
          {
            "sha": "ffa50f3c7baa9b30335034c423a1dada4fba5be2",
            "date": "2025-01-25T17:11:23Z",
            "author_login": "audrasjb"
          },
          {
            "sha": "b74968d542e93ff5a9b088879cb4b2b06eb2602e",
            "date": "2025-01-25T14:34:20Z",
            "author_login": "SergeyBiryukov"
          },
          {
            "sha": "130a7a8567c1a13a9296abc9279f91dfc3e26dba",
            "date": "2025-01-25T14:12:19Z",
            "author_login": "audrasjb"
          },
          {
            "sha": "471cffffcc28c181524e5bf809f9efe2d96c99a2",
            "date": "2025-01-25T14:07:23Z",
            "author_login": "audrasjb"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": null,
    "description": "The register_routes function in wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php in the REST API in WordPress 4.7.x before 4.7.2 does not require an integer identifier, which allows remote attackers to modify arbitrary pages via a request for wp-json/wp/v2/posts followed by a numeric value and a non-numeric value, as demonstrated by the wp-json/wp/v2/posts/123?id=123helloworld URI.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-04-03T01:59:00.227",
    "last_modified": "2024-11-21T03:04:54.447",
    "fix_date": "2017-01-26T13:39:41Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2017/02/10/16",
      "source": "46fe6300-5254-4a98-9594-a9567bec8179",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1037731",
      "source": "46fe6300-5254-4a98-9594-a9567bec8179",
      "tags": []
    },
    {
      "url": "https://blog.sucuri.net/2017/02/content-injection-vulnerability-wordpress-rest-api.html",
      "source": "46fe6300-5254-4a98-9594-a9567bec8179",
      "tags": []
    },
    {
      "url": "https://blogs.akamai.com/2017/02/wordpress-web-api-vulnerability.html",
      "source": "46fe6300-5254-4a98-9594-a9567bec8179",
      "tags": []
    },
    {
      "url": "https://codex.wordpress.org/Version_4.7.2",
      "source": "46fe6300-5254-4a98-9594-a9567bec8179",
      "tags": []
    },
    {
      "url": "https://gist.github.com/leonjza/2244eb15510a0687ed93160c623762ab",
      "source": "46fe6300-5254-4a98-9594-a9567bec8179",
      "tags": []
    },
    {
      "url": "https://github.com/WordPress/WordPress/commit/e357195ce303017d517aff944644a7a1232926f7",
      "source": "46fe6300-5254-4a98-9594-a9567bec8179",
      "tags": []
    },
    {
      "url": "https://make.wordpress.org/core/2017/02/01/disclosure-of-additional-security-fix-in-wordpress-4-7-2/",
      "source": "46fe6300-5254-4a98-9594-a9567bec8179",
      "tags": []
    },
    {
      "url": "https://wordpress.org/news/2017/01/wordpress-4-7-2-security-release/",
      "source": "46fe6300-5254-4a98-9594-a9567bec8179",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2017/02/10/16",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1037731",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://blog.sucuri.net/2017/02/content-injection-vulnerability-wordpress-rest-api.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://blogs.akamai.com/2017/02/wordpress-web-api-vulnerability.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://codex.wordpress.org/Version_4.7.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://gist.github.com/leonjza/2244eb15510a0687ed93160c623762ab",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/WordPress/WordPress/commit/e357195ce303017d517aff944644a7a1232926f7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://make.wordpress.org/core/2017/02/01/disclosure-of-additional-security-fix-in-wordpress-4-7-2/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://wordpress.org/news/2017/01/wordpress-4-7-2-security-release/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:54.838639",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "WordPress",
    "owner": "WordPress",
    "created_at": "2011-12-01T07:05:17Z",
    "updated_at": "2025-01-25T23:52:13Z",
    "pushed_at": "2025-01-25T23:52:05Z",
    "size": 530651,
    "stars": 19812,
    "forks": 12704,
    "open_issues": 2,
    "watchers": 19812,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 20616593,
      "JavaScript": 5411354,
      "CSS": 4992383,
      "SCSS": 323898,
      "HTML": 48043
    },
    "commit_activity": {
      "total_commits_last_year": 1522,
      "avg_commits_per_week": 29.26923076923077,
      "days_active_last_year": 356
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:46:46.124114"
  }
}