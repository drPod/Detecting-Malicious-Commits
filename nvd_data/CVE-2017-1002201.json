{
  "cve_id": "CVE-2017-1002201",
  "github_data": {
    "repository": "haml/haml",
    "fix_commit": "18576ae6e9bdcb4303fdbe6b3199869d289d67c2",
    "related_commits": [
      "18576ae6e9bdcb4303fdbe6b3199869d289d67c2",
      "18576ae6e9bdcb4303fdbe6b3199869d289d67c2"
    ],
    "patch_url": "https://github.com/haml/haml/commit/18576ae6e9bdcb4303fdbe6b3199869d289d67c2.patch",
    "fix_commit_details": {
      "sha": "18576ae6e9bdcb4303fdbe6b3199869d289d67c2",
      "commit_date": "2017-02-08T15:17:19Z",
      "author": {
        "login": "k0kubun",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Always escape `'` in Haml::Helpers.#html_escape.",
        "length": 219,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 38,
        "additions": 19,
        "deletions": 19
      },
      "files": [
        {
          "filename": "lib/haml/helpers.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -596,7 +596,7 @@ def haml_tag_if(condition, *tag)\n     # Characters that need to be escaped to HTML entities from user input\n     HTML_ESCAPE = { '&' => '&amp;', '<' => '&lt;', '>' => '&gt;', '\"' => '&quot;', \"'\" => '&#039;' }\n \n-    HTML_ESCAPE_REGEX = /[\\\"><&]/\n+    HTML_ESCAPE_REGEX = /['\"><&]/\n \n     # Returns a copy of `text` with ampersands, angle brackets and quotes\n     # escaped into HTML entities."
        },
        {
          "filename": "test/engine_test.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -1127,8 +1127,8 @@ def test_doctypes\n   def test_attr_wrapper\n     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))\n     assert_equal(\"<p escaped='quo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))\n-    assert_equal(\"<p escaped=\\\"quo'te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))\n-    assert_equal(\"<p escaped=\\\"q'uo&#x0022;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))\n+    assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))\n+    assert_equal(\"<p escaped='q&#039;uo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))\n     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))\n   end\n \n@@ -1534,7 +1534,7 @@ def test_html5_data_attributes_without_hyphenation\n       render(\"%div{:data => {:one_plus_one => 1+1}}\",\n         :hyphenate_data_attrs => false))\n \n-    assert_equal(\"<div data-foo='Here&#x0027;s a \\\"quoteful\\\" string.'></div>\\n\",\n+    assert_equal(\"<div data-foo='Here&#039;s a \\\"quoteful\\\" string.'></div>\\n\",\n       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},\n         :hyphenate_data_attrs => false)) #'\n   end\n@@ -1698,9 +1698,9 @@ def test_truthy_new_attributes\n   def test_new_attribute_parsing\n     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))\n     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'\n-    assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'\n+    assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'\n     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))\n-    assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))\n+    assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))\n     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))\n     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))\n     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = foo b = bar) bar\", :locals => {:foo => 'foo', :bar => 'bar'}))\n@@ -1713,8 +1713,8 @@ def test_new_attribute_escaping\n     assert_equal(%Q{<a a='foo \" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))\n     assert_equal(%Q{<a a='foo \\\\\" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))\n \n-    assert_equal(%Q{<a a=\"foo ' bar\">bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))\n-    assert_equal(%Q{<a a=\"foo \\\\' bar\">bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))\n+    assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))\n+    assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))\n \n     assert_equal(%Q{<a a='foo \\\\ bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\ bar\") bar}))\n     assert_equal(%Q{<a a='foo \\#{1 + 1} bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\#{1 + 1} bar\") bar}))"
        },
        {
          "filename": "test/pretty_engine_test.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -1129,8 +1129,8 @@ def test_doctypes\n   def test_attr_wrapper\n     assert_equal(\"<p strange=*attrs*></p>\\n\", render(\"%p{ :strange => 'attrs'}\", :attr_wrapper => '*'))\n     assert_equal(\"<p escaped='quo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'quo\\\"te'}\", :attr_wrapper => '\"'))\n-    assert_equal(\"<p escaped=\\\"quo'te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))\n-    assert_equal(\"<p escaped=\\\"q'uo&#x0022;te\\\"></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))\n+    assert_equal(\"<p escaped=\\\"quo&#039;te\\\"></p>\\n\", render(\"%p{ :escaped => 'quo\\\\'te'}\", :attr_wrapper => '\"'))\n+    assert_equal(\"<p escaped='q&#039;uo\\\"te'></p>\\n\", render(\"%p{ :escaped => 'q\\\\'uo\\\"te'}\", :attr_wrapper => '\"'))\n     assert_equal(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n\", render(\"!!! XML\", :attr_wrapper => '\"', :format => :xhtml))\n   end\n \n@@ -1527,7 +1527,7 @@ def test_html5_data_attributes_without_hyphenation\n       render(\"%div{:data => {:one_plus_one => 1+1}}\",\n         :hyphenate_data_attrs => false))\n \n-    assert_equal(\"<div data-foo='Here&#x0027;s a \\\"quoteful\\\" string.'></div>\\n\",\n+    assert_equal(\"<div data-foo='Here&#039;s a \\\"quoteful\\\" string.'></div>\\n\",\n       render(%{%div{:data => {:foo => %{Here's a \"quoteful\" string.}}}},\n         :hyphenate_data_attrs => false)) #'\n   end\n@@ -1691,9 +1691,9 @@ def test_truthy_new_attributes\n   def test_new_attribute_parsing\n     assert_equal(\"<a a2='b2'>bar</a>\\n\", render(\"%a(a2=b2) bar\", :locals => {:b2 => 'b2'}))\n     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a=\"#{'foo\"bar'}\") bar})) #'\n-    assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'\n+    assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"#{\"foo'bar\"}\") bar})) #'\n     assert_equal(%Q{<a a='foo\"bar'>bar</a>\\n}, render(%q{%a(a='foo\"bar') bar}))\n-    assert_equal(%Q{<a a=\"foo'bar\">bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))\n+    assert_equal(%Q{<a a='foo&#039;bar'>bar</a>\\n}, render(%q{%a(a=\"foo'bar\") bar}))\n     assert_equal(\"<a a:b='foo'>bar</a>\\n\", render(\"%a(a:b='foo') bar\"))\n     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = 'foo' b = 'bar') bar\"))\n     assert_equal(\"<a a='foo' b='bar'>bar</a>\\n\", render(\"%a(a = foo b = bar) bar\", :locals => {:foo => 'foo', :bar => 'bar'}))\n@@ -1706,8 +1706,8 @@ def test_new_attribute_escaping\n     assert_equal(%Q{<a a='foo \" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\" bar\") bar}))\n     assert_equal(%Q{<a a='foo \\\\\" bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\\\\" bar\") bar}))\n \n-    assert_equal(%Q{<a a=\"foo ' bar\">bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))\n-    assert_equal(%Q{<a a=\"foo \\\\' bar\">bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))\n+    assert_equal(%Q{<a a='foo &#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\' bar') bar}))\n+    assert_equal(%Q{<a a='foo \\\\&#039; bar'>bar</a>\\n}, render(%q{%a(a='foo \\\\\\\\\\' bar') bar}))\n \n     assert_equal(%Q{<a a='foo \\\\ bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\\\\\\\ bar\") bar}))\n     assert_equal(%Q{<a a='foo \\#{1 + 1} bar'>bar</a>\\n}, render(%q{%a(a=\"foo \\#{1 + 1} bar\") bar}))"
        },
        {
          "filename": "test/pretty_results/just_stuff.xhtml",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -6,7 +6,7 @@\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n-<strong apos=\"Foo's bar!\">Boo!</strong>\n+<strong apos='Foo&#039;s bar!'>Boo!</strong>\n Embedded? false!\n Embedded? true!\n Embedded? true!\n@@ -61,7 +61,7 @@ testtest\n <p class='article quux qux' id='article_1'>Blump</p>\n <p class='article' id='foo_bar_baz_article_1'>Whee</p>\n Woah inner quotes\n-<p class='dynamic_quote' dyn='3' quotes=\"single '\"></p>\n+<p class='dynamic_quote' dyn='3' quotes='single &#039;'></p>\n <p class='dynamic_self_closing' dyn='3' />\n <body>\n   hello"
        },
        {
          "filename": "test/results/just_stuff.xhtml",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -6,7 +6,7 @@\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n-<strong apos=\"Foo's bar!\">Boo!</strong>\n+<strong apos='Foo&#039;s bar!'>Boo!</strong>\n Embedded? false!\n Embedded? true!\n Embedded? true!\n@@ -61,7 +61,7 @@ Nested content\n <p class='article quux qux' id='article_1'>Blump</p>\n <p class='article' id='foo_bar_baz_article_1'>Whee</p>\n Woah inner quotes\n-<p class='dynamic_quote' dyn='3' quotes=\"single '\"></p>\n+<p class='dynamic_quote' dyn='3' quotes='single &#039;'></p>\n <p class='dynamic_self_closing' dyn='3' />\n <body>\n hello"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a08d5cd792555621d8e778e4d71db5e88b7292c0",
            "date": "2024-12-28T09:27:55Z",
            "author_login": "tagliala"
          },
          {
            "sha": "21c79881979851930f328ce08f10c9f91c169cc2",
            "date": "2024-12-09T15:42:15Z",
            "author_login": "HamptonMakes"
          },
          {
            "sha": "d93642f88b6303bfd2e0f3c04466ba8f4a0cdf09",
            "date": "2024-12-09T15:40:39Z",
            "author_login": "HamptonMakes"
          },
          {
            "sha": "eaeb4ab88a7f33eb1ce830f320966ffc46b58cf9",
            "date": "2024-12-09T15:38:18Z",
            "author_login": "HamptonMakes"
          },
          {
            "sha": "3841f56a8005bebcd89ee11de6afcd34f1f4abcb",
            "date": "2024-08-24T09:09:10Z",
            "author_login": "tagliala"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "In haml versions prior to version 5.0.0.beta.2, when using user input to perform tasks on the server, characters like < > \" ' must be escaped properly. In this case, the ' character was missed. An attacker can manipulate the input to introduce additional attributes, potentially executing code.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-10-15T18:15:10.560",
    "last_modified": "2024-11-21T03:04:59.483",
    "fix_date": "2017-02-08T15:17:19Z"
  },
  "references": [
    {
      "url": "https://github.com/haml/haml/commit/18576ae6e9bdcb4303fdbe6b3199869d289d67c2",
      "source": "josh@bress.net",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2019/11/msg00007.html",
      "source": "josh@bress.net",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2021/12/msg00028.html",
      "source": "josh@bress.net",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202007-27",
      "source": "josh@bress.net",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-RUBY-HAML-20362",
      "source": "josh@bress.net",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/haml/haml/commit/18576ae6e9bdcb4303fdbe6b3199869d289d67c2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2019/11/msg00007.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2021/12/msg00028.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202007-27",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-RUBY-HAML-20362",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:59.959591",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "haml",
    "owner": "haml",
    "created_at": "2008-02-11T22:55:26Z",
    "updated_at": "2025-01-13T05:54:58Z",
    "pushed_at": "2024-12-28T15:27:55Z",
    "size": 10581,
    "stars": 3766,
    "forks": 575,
    "open_issues": 20,
    "watchers": 3766,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "original-main"
    ],
    "languages": {
      "Ruby": 357999,
      "Haml": 44905,
      "HTML": 17666,
      "Shell": 498,
      "Slim": 317,
      "Logos": 166,
      "RPC": 160
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:19:58.286846"
  }
}