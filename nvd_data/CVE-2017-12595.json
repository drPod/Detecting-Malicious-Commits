{
  "cve_id": "CVE-2017-12595",
  "github_data": {
    "repository": "qpdf/qpdf",
    "fix_commit": "ad527a64f93dca12f6aabab2ca99ae5eb352ab4b",
    "related_commits": [
      "ad527a64f93dca12f6aabab2ca99ae5eb352ab4b",
      "ad527a64f93dca12f6aabab2ca99ae5eb352ab4b"
    ],
    "patch_url": "https://github.com/qpdf/qpdf/commit/ad527a64f93dca12f6aabab2ca99ae5eb352ab4b.patch",
    "fix_commit_details": {
      "sha": "ad527a64f93dca12f6aabab2ca99ae5eb352ab4b",
      "commit_date": "2017-08-26T01:52:29Z",
      "author": {
        "login": "jberkenbilt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Parse iteratively to avoid stack overflow (fixes #146)",
        "length": 54,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 258,
        "additions": 150,
        "deletions": 108
      },
      "files": [
        {
          "filename": "ChangeLog",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1,5 +1,8 @@\n 2017-08-25  Jay Berkenbilt  <ejb@ql.org>\n \n+\t* Re-implement parser iteratively to avoid stack overflow on very\n+\tdeeply nested arrays and dictionaries. Fixes #146.\n+\n \t* Detect infinite loop while finding additional xref tables. Fixes\n \t#149.\n "
        },
        {
          "filename": "include/qpdf/QPDFObjectHandle.hh",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -667,7 +667,6 @@ class QPDFObjectHandle\n         std::string const& object_description,\n         QPDFTokenizer& tokenizer, bool& empty,\n         StringDecrypter* decrypter, QPDF* context,\n-        bool in_array, bool in_dictionary,\n         bool content_stream);\n     static void parseContentStream_internal(\n         PointerHolder<Buffer> stream_data,"
        },
        {
          "filename": "libqpdf/QPDFObjectHandle.cc",
          "status": "modified",
          "additions": 141,
          "deletions": 107,
          "patch": "@@ -883,8 +883,7 @@ QPDFObjectHandle::parseContentStream_internal(PointerHolder<Buffer> stream_data,\n     while (static_cast<size_t>(input->tell()) < length)\n     {\n         QPDFObjectHandle obj =\n-            parseInternal(input, \"content\", tokenizer, empty,\n-                          0, 0, false, false, true);\n+            parseInternal(input, \"content\", tokenizer, empty, 0, 0, true);\n         if (! obj.isInitialized())\n         {\n             // EOF\n@@ -945,15 +944,14 @@ QPDFObjectHandle::parse(PointerHolder<InputSource> input,\n                         StringDecrypter* decrypter, QPDF* context)\n {\n     return parseInternal(input, object_description, tokenizer, empty,\n-                         decrypter, context, false, false, false);\n+                         decrypter, context, false);\n }\n \n QPDFObjectHandle\n QPDFObjectHandle::parseInternal(PointerHolder<InputSource> input,\n                                 std::string const& object_description,\n                                 QPDFTokenizer& tokenizer, bool& empty,\n                                 StringDecrypter* decrypter, QPDF* context,\n-                                bool in_array, bool in_dictionary,\n                                 bool content_stream)\n {\n     // This method must take care not to resolve any objects. Don't\n@@ -962,22 +960,23 @@ QPDFObjectHandle::parseInternal(PointerHolder<InputSource> input,\n     // of reading the object and changing the file pointer.\n \n     empty = false;\n-    if (in_dictionary && in_array)\n-    {\n-\t// Although dictionaries and arrays arbitrarily nest, these\n-\t// variables indicate what is at the top of the stack right\n-\t// now, so they can, by definition, never both be true.\n-\tthrow std::logic_error(\n-\t    \"INTERNAL ERROR: parseInternal: in_dict && in_array\");\n-    }\n \n     QPDFObjectHandle object;\n \n-    qpdf_offset_t offset = input->tell();\n-    std::vector<QPDFObjectHandle> olist;\n+    std::vector<std::vector<QPDFObjectHandle> > olist_stack;\n+    olist_stack.push_back(std::vector<QPDFObjectHandle>());\n+    enum state_e { st_top, st_start, st_stop, st_eof, st_dictionary, st_array };\n+    std::vector<state_e> state_stack;\n+    state_stack.push_back(st_top);\n+    std::vector<qpdf_offset_t> offset_stack;\n+    offset_stack.push_back(input->tell());\n     bool done = false;\n     while (! done)\n     {\n+        std::vector<QPDFObjectHandle>& olist = olist_stack.back();\n+        state_e state = state_stack.back();\n+        qpdf_offset_t offset = offset_stack.back();\n+\n \tobject = QPDFObjectHandle();\n \n \tQPDFTokenizer::Token token =\n@@ -988,8 +987,7 @@ QPDFObjectHandle::parseInternal(PointerHolder<InputSource> input,\n           case QPDFTokenizer::tt_eof:\n             if (content_stream)\n             {\n-                // Return uninitialized object to indicate EOF\n-                return object;\n+                state = st_eof;\n             }\n             else\n             {\n@@ -1012,9 +1010,9 @@ QPDFObjectHandle::parseInternal(PointerHolder<InputSource> input,\n \t    break;\n \n \t  case QPDFTokenizer::tt_array_close:\n-\t    if (in_array)\n+\t    if (state == st_array)\n \t    {\n-\t\tdone = true;\n+                state = st_stop;\n \t    }\n \t    else\n \t    {\n@@ -1029,9 +1027,9 @@ QPDFObjectHandle::parseInternal(PointerHolder<InputSource> input,\n \t    break;\n \n \t  case QPDFTokenizer::tt_dict_close:\n-\t    if (in_dictionary)\n+\t    if (state == st_dictionary)\n \t    {\n-\t\tdone = true;\n+                state = st_stop;\n \t    }\n \t    else\n \t    {\n@@ -1046,15 +1044,13 @@ QPDFObjectHandle::parseInternal(PointerHolder<InputSource> input,\n \t    break;\n \n \t  case QPDFTokenizer::tt_array_open:\n-\t    object = parseInternal(\n-\t\tinput, object_description, tokenizer, empty,\n-                decrypter, context, true, false, content_stream);\n-\t    break;\n-\n \t  case QPDFTokenizer::tt_dict_open:\n-\t    object = parseInternal(\n-\t\tinput, object_description, tokenizer, empty,\n-                decrypter, context, false, true, content_stream);\n+            olist_stack.push_back(std::vector<QPDFObjectHandle>());\n+            state = st_start;\n+            offset_stack.push_back(input->tell());\n+            state_stack.push_back(\n+                (token.getType() == QPDFTokenizer::tt_array_open) ?\n+                st_array : st_dictionary);\n \t    break;\n \n \t  case QPDFTokenizer::tt_bool:\n@@ -1084,12 +1080,12 @@ QPDFObjectHandle::parseInternal(PointerHolder<InputSource> input,\n                 {\n                     object = QPDFObjectHandle::newOperator(value);\n                 }\n-\t\telse if ((value == \"R\") && (in_array || in_dictionary) &&\n-\t\t    (olist.size() >= 2) &&\n-                    (! olist.at(olist.size() - 1).isIndirect()) &&\n-\t\t    (olist.at(olist.size() - 1).isInteger()) &&\n-                    (! olist.at(olist.size() - 2).isIndirect()) &&\n-\t\t    (olist.at(olist.size() - 2).isInteger()))\n+\t\telse if ((value == \"R\") && (state != st_top) &&\n+                         (olist.size() >= 2) &&\n+                         (! olist.at(olist.size() - 1).isIndirect()) &&\n+                         (olist.at(olist.size() - 1).isInteger()) &&\n+                         (! olist.at(olist.size() - 2).isIndirect()) &&\n+                         (olist.at(olist.size() - 2).isInteger()))\n \t\t{\n                     if (context == 0)\n                     {\n@@ -1106,8 +1102,7 @@ QPDFObjectHandle::parseInternal(PointerHolder<InputSource> input,\n \t\t    olist.pop_back();\n \t\t    olist.pop_back();\n \t\t}\n-\t\telse if ((value == \"endobj\") &&\n-\t\t\t (! (in_array || in_dictionary)))\n+\t\telse if ((value == \"endobj\") && (state == st_top))\n \t\t{\n \t\t    // We just saw endobj without having read\n \t\t    // anything.  Treat this as a null and do not move\n@@ -1153,93 +1148,132 @@ QPDFObjectHandle::parseInternal(PointerHolder<InputSource> input,\n \t    break;\n \t}\n \n-\tif (in_dictionary || in_array)\n-\t{\n-\t    if (! done)\n-\t    {\n-\t\tolist.push_back(object);\n-\t    }\n-\t}\n-\telse if (! object.isInitialized())\n-\t{\n-            warn(context,\n-                 QPDFExc(qpdf_e_damaged_pdf, input->getName(),\n-                         object_description,\n-                         input->getLastOffset(),\n-                         \"parse error while reading object\"));\n+        if ((! object.isInitialized()) &&\n+            (! ((state == st_start) ||\n+                (state == st_stop) ||\n+                (state == st_eof))))\n+        {\n+            throw std::logic_error(\n+                \"QPDFObjectHandle::parseInternal: \"\n+                \"unexpected uninitialized object\");\n             object = newNull();\n-\t}\n-\telse\n-\t{\n-\t    done = true;\n-\t}\n-    }\n+        }\n \n-    if (in_array)\n-    {\n-\tobject = newArray(olist);\n-    }\n-    else if (in_dictionary)\n-    {\n-        // Convert list to map. Alternating elements are keys. Attempt\n-        // to recover more or less gracefully from invalid\n-        // dictionaries.\n-        std::set<std::string> names;\n-        for (std::vector<QPDFObjectHandle>::iterator iter = olist.begin();\n-             iter != olist.end(); ++iter)\n+        switch (state)\n         {\n-            if ((! (*iter).isIndirect()) && (*iter).isName())\n+          case st_eof:\n+            if (state_stack.size() > 1)\n             {\n-                names.insert((*iter).getName());\n+                warn(context,\n+                     QPDFExc(qpdf_e_damaged_pdf, input->getName(),\n+                             object_description,\n+                             input->getLastOffset(),\n+                             \"parse error while reading object\"));\n             }\n-        }\n+            done = true;\n+            // Leave object uninitialized to indicate EOF\n+            break;\n \n-        std::map<std::string, QPDFObjectHandle> dict;\n-        int next_fake_key = 1;\n-        for (unsigned int i = 0; i < olist.size(); ++i)\n-        {\n-            QPDFObjectHandle key_obj = olist.at(i);\n-            QPDFObjectHandle val;\n-            if (key_obj.isIndirect() || (! key_obj.isName()))\n+          case st_dictionary:\n+          case st_array:\n+            olist.push_back(object);\n+            break;\n+\n+          case st_top:\n+            done = true;\n+            break;\n+\n+          case st_start:\n+            break;\n+\n+          case st_stop:\n+            if ((state_stack.size() < 2) || (olist_stack.size() < 2))\n+            {\n+                throw std::logic_error(\n+                    \"QPDFObjectHandle::parseInternal: st_stop encountered\"\n+                    \" with insufficient elements in stack\");\n+            }\n+            state_e old_state = state_stack.back();\n+            state_stack.pop_back();\n+            if (old_state == st_array)\n             {\n-                bool found_fake = false;\n-                std::string candidate;\n-                while (! found_fake)\n+                object = newArray(olist);\n+            }\n+            else if (old_state == st_dictionary)\n+            {\n+                // Convert list to map. Alternating elements are keys.\n+                // Attempt to recover more or less gracefully from\n+                // invalid dictionaries.\n+                std::set<std::string> names;\n+                for (std::vector<QPDFObjectHandle>::iterator iter =\n+                         olist.begin();\n+                     iter != olist.end(); ++iter)\n+                {\n+                    if ((! (*iter).isIndirect()) && (*iter).isName())\n+                    {\n+                        names.insert((*iter).getName());\n+                    }\n+                }\n+\n+                std::map<std::string, QPDFObjectHandle> dict;\n+                int next_fake_key = 1;\n+                for (unsigned int i = 0; i < olist.size(); ++i)\n                 {\n-                    candidate =\n-                        \"/QPDFFake\" + QUtil::int_to_string(next_fake_key++);\n-                    found_fake = (names.count(candidate) == 0);\n-                    QTC::TC(\"qpdf\", \"QPDFObjectHandle found fake\",\n-                            (found_fake ? 0 : 1));\n+                    QPDFObjectHandle key_obj = olist.at(i);\n+                    QPDFObjectHandle val;\n+                    if (key_obj.isIndirect() || (! key_obj.isName()))\n+                    {\n+                        bool found_fake = false;\n+                        std::string candidate;\n+                        while (! found_fake)\n+                        {\n+                            candidate =\n+                                \"/QPDFFake\" +\n+                                QUtil::int_to_string(next_fake_key++);\n+                            found_fake = (names.count(candidate) == 0);\n+                            QTC::TC(\"qpdf\", \"QPDFObjectHandle found fake\",\n+                                    (found_fake ? 0 : 1));\n+                        }\n+                        warn(context,\n+                             QPDFExc(\n+                                 qpdf_e_damaged_pdf,\n+                                 input->getName(), object_description, offset,\n+                                 \"expected dictionary key but found\"\n+                                 \" non-name object; inserting key \" +\n+                                 candidate));\n+                        val = key_obj;\n+                        key_obj = newName(candidate);\n+                    }\n+                    else if (i + 1 >= olist.size())\n+                    {\n+                        QTC::TC(\"qpdf\", \"QPDFObjectHandle no val for last key\");\n+                        warn(context,\n+                             QPDFExc(\n+                                 qpdf_e_damaged_pdf,\n+                                 input->getName(), object_description, offset,\n+                                 \"dictionary ended prematurely; \"\n+                                 \"using null as value for last key\"));\n+                        val = newNull();\n+                    }\n+                    else\n+                    {\n+                        val = olist.at(++i);\n+                    }\n+                    dict[key_obj.getName()] = val;\n                 }\n-                warn(context,\n-                     QPDFExc(\n-                         qpdf_e_damaged_pdf,\n-                         input->getName(), object_description, offset,\n-                         \"expected dictionary key but found\"\n-                         \" non-name object; inserting key \" +\n-                         candidate));\n-                val = key_obj;\n-                key_obj = newName(candidate);\n+                object = newDictionary(dict);\n             }\n-            else if (i + 1 >= olist.size())\n+            olist_stack.pop_back();\n+            offset_stack.pop_back();\n+            if (state_stack.back() == st_top)\n             {\n-                QTC::TC(\"qpdf\", \"QPDFObjectHandle no val for last key\");\n-                warn(context,\n-                     QPDFExc(\n-                         qpdf_e_damaged_pdf,\n-                         input->getName(), object_description, offset,\n-                         \"dictionary ended prematurely; using null as value\"\n-                         \" for last key\"));\n-                val = newNull();\n+                done = true;\n             }\n             else\n             {\n-                val = olist.at(++i);\n+                olist_stack.back().push_back(object);\n             }\n-            dict[key_obj.getName()] = val;\n         }\n-        object = newDictionary(dict);\n     }\n \n     return object;"
        },
        {
          "filename": "qpdf/qtest/qpdf.test",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -221,6 +221,7 @@ my @bug_tests = (\n     [\"141a\", \"/W entry size 0\", 2],\n     [\"141b\", \"/W entry size 0\", 2],\n     [\"143\", \"self-referential ostream\", 3],\n+    [\"146\", \"very deeply nested array\", 2],\n     [\"149\", \"xref prev pointer loop\", 3],\n     );\n $n_tests += scalar(@bug_tests);"
        },
        {
          "filename": "qpdf/qtest/qpdf/issue-146.out",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+WARNING: issue-146.pdf: file is damaged\n+WARNING: issue-146.pdf: can't find startxref\n+WARNING: issue-146.pdf: Attempting to reconstruct cross-reference table\n+WARNING: issue-146.pdf (trailer, file position 20728): unknown token while reading object; treating as string\n+issue-146.pdf (trailer, file position 20732): EOF while reading token"
        },
        {
          "filename": "qpdf/qtest/qpdf/issue-146.pdf",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "531f6877a847fbfe7373f94b7652ea269a223a02",
            "date": "2025-01-05T22:08:40Z",
            "author_login": "jberkenbilt"
          },
          {
            "sha": "ef9616775e33ce8ba43fc441e15034b587ede16e",
            "date": "2024-12-13T13:09:38Z",
            "author_login": "jberkenbilt"
          },
          {
            "sha": "0e65d9c2461c3d583a48630f0c1901439bbb9bad",
            "date": "2024-12-13T12:52:43Z",
            "author_login": "jberkenbilt"
          },
          {
            "sha": "3ea83e9993801b002b4db8abaaa08dec31989ec7",
            "date": "2024-11-08T22:29:36Z",
            "author_login": "m-holger"
          },
          {
            "sha": "64e98397104f3fff759c27eb40092085e287755e",
            "date": "2024-11-08T12:44:36Z",
            "author_login": "m-holger"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-20",
    "description": "The tokenizer in QPDF 6.0.0 and 7.0.b1 is recursive for arrays and dictionaries, which allows remote attackers to cause a denial of service (stack consumption and segmentation fault) or possibly have unspecified other impact via a PDF document with a deep data structure, as demonstrated by a crash in QPDFObjectHandle::parseInternal in libqpdf/QPDFObjectHandle.cc.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-08-27T15:29:00.200",
    "last_modified": "2024-11-21T03:09:49.663",
    "fix_date": "2017-08-26T01:52:29Z"
  },
  "references": [
    {
      "url": "https://github.com/qpdf/qpdf/commit/ad527a64f93dca12f6aabab2ca99ae5eb352ab4b",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/qpdf/qpdf/issues/146",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/3638-1/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/qpdf/qpdf/commit/ad527a64f93dca12f6aabab2ca99ae5eb352ab4b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/qpdf/qpdf/issues/146",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/3638-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:05.117027",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "qpdf",
    "owner": "qpdf",
    "created_at": "2012-06-03T17:40:19Z",
    "updated_at": "2025-01-11T04:14:35Z",
    "pushed_at": "2025-01-05T23:25:11Z",
    "size": 39286,
    "stars": 3636,
    "forks": 287,
    "open_issues": 141,
    "watchers": 3636,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "C++": 2455745,
      "Perl": 440367,
      "C": 218958,
      "Python": 57186,
      "Shell": 53174,
      "Roff": 46904,
      "CMake": 46886,
      "PostScript": 2997,
      "Emacs Lisp": 1236,
      "Dockerfile": 839,
      "Raku": 773,
      "Batchfile": 567,
      "CSS": 128
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:32:57.409259"
  }
}