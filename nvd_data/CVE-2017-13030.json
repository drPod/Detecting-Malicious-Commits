{
  "cve_id": "CVE-2017-13030",
  "github_data": {
    "repository": "the-tcpdump-group/tcpdump",
    "fix_commit": "5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc",
    "related_commits": [
      "5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc",
      "5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc"
    ],
    "patch_url": "https://github.com/the-tcpdump-group/tcpdump/commit/5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc.patch",
    "fix_commit_details": {
      "sha": "5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc",
      "commit_date": "2017-03-22T21:09:28Z",
      "author": {
        "login": "guyharris",
        "type": "User",
        "stats": {
          "total_commits": 1754,
          "average_weekly_commits": 1.3287878787878789,
          "total_additions": 334479,
          "total_deletions": 321814,
          "weeks_active": 331
        }
      },
      "commit_message": {
        "title": "CVE-2017-13030/PIM: Redo bounds checks and add length checks.",
        "length": 483,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 389,
        "additions": 212,
        "deletions": 177
      },
      "files": [
        {
          "filename": "print-pim.c",
          "status": "modified",
          "additions": 207,
          "deletions": 176,
          "patch": "@@ -169,20 +169,28 @@ pimv1_join_prune_print(netdissect_options *ndo,\n \t\treturn;\n \t}\n \n+\tif (len < sizeof(struct in_addr))\n+\t\tgoto trunc;\n \tND_TCHECK2(bp[0], sizeof(struct in_addr));\n \tif (ndo->ndo_vflag > 1)\n \t\tND_PRINT((ndo, \"\\n\"));\n \tND_PRINT((ndo, \" Upstream Nbr: %s\", ipaddr_string(ndo, bp)));\n-\tND_TCHECK2(bp[6], 2);\n+\tbp += 4;\n+\tlen -= 4;\n+\tif (len < 4)\n+\t\tgoto trunc;\n+\tND_TCHECK2(bp[2], 2);\n \tif (ndo->ndo_vflag > 1)\n \t\tND_PRINT((ndo, \"\\n\"));\n \tND_PRINT((ndo, \" Hold time: \"));\n-\tunsigned_relts_print(ndo, EXTRACT_16BITS(&bp[6]));\n+\tunsigned_relts_print(ndo, EXTRACT_16BITS(&bp[2]));\n \tif (ndo->ndo_vflag < 2)\n \t\treturn;\n-\tbp += 8;\n-\tlen -= 8;\n+\tbp += 4;\n+\tlen -= 4;\n \n+\tif (len < 4)\n+\t\tgoto trunc;\n \tND_TCHECK2(bp[0], 4);\n \tngroups = bp[3];\n \tbp += 4;\n@@ -192,30 +200,43 @@ pimv1_join_prune_print(netdissect_options *ndo,\n \t\t * XXX - does the address have length \"addrlen\" and the\n \t\t * mask length \"maddrlen\"?\n \t\t */\n+\t\tif (len < 4)\n+\t\t\tgoto trunc;\n \t\tND_TCHECK2(bp[0], sizeof(struct in_addr));\n \t\tND_PRINT((ndo, \"\\n\\tGroup: %s\", ipaddr_string(ndo, bp)));\n-\t\tND_TCHECK2(bp[4], sizeof(struct in_addr));\n-\t\tif (EXTRACT_32BITS(&bp[4]) != 0xffffffff)\n-\t\t\tND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, &bp[4])));\n-\t\tND_TCHECK2(bp[8], 4);\n-\t\tnjoin = EXTRACT_16BITS(&bp[8]);\n-\t\tnprune = EXTRACT_16BITS(&bp[10]);\n+\t\tbp += 4;\n+\t\tlen -= 4;\n+\t\tif (len < 4)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK2(bp[0], sizeof(struct in_addr));\n+\t\tif (EXTRACT_32BITS(&bp[0]) != 0xffffffff)\n+\t\t\tND_PRINT((ndo, \"/%s\", ipaddr_string(ndo, &bp[0])));\n+\t\tbp += 4;\n+\t\tlen -= 4;\n+\t\tif (len < 4)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK2(bp[0], 4);\n+\t\tnjoin = EXTRACT_16BITS(&bp[0]);\n+\t\tnprune = EXTRACT_16BITS(&bp[2]);\n \t\tND_PRINT((ndo, \" joined: %d pruned: %d\", njoin, nprune));\n-\t\tbp += 12;\n-\t\tlen -= 12;\n+\t\tbp += 4;\n+\t\tlen -= 4;\n \t\tfor (njp = 0; njp < (njoin + nprune); njp++) {\n \t\t\tconst char *type;\n \n \t\t\tif (njp < njoin)\n \t\t\t\ttype = \"Join \";\n \t\t\telse\n \t\t\t\ttype = \"Prune\";\n+\t\t\tif (len < 6)\n+\t\t\t\tgoto trunc;\n \t\t\tND_TCHECK2(bp[0], 6);\n \t\t\tND_PRINT((ndo, \"\\n\\t%s %s%s%s%s/%d\", type,\n \t\t\t    (bp[0] & 0x01) ? \"Sparse \" : \"Dense \",\n \t\t\t    (bp[1] & 0x80) ? \"WC \" : \"\",\n \t\t\t    (bp[1] & 0x40) ? \"RP \" : \"SPT \",\n-\t\t\tipaddr_string(ndo, &bp[2]), bp[1] & 0x3f));\n+\t\t\t    ipaddr_string(ndo, &bp[2]),\n+\t\t\t    bp[1] & 0x3f));\n \t\t\tbp += 6;\n \t\t\tlen -= 6;\n \t\t}\n@@ -230,13 +251,8 @@ void\n pimv1_print(netdissect_options *ndo,\n             register const u_char *bp, register u_int len)\n {\n-\tregister const u_char *ep;\n \tregister u_char type;\n \n-\tep = (const u_char *)ndo->ndo_snapend;\n-\tif (bp >= ep)\n-\t\treturn;\n-\n \tND_TCHECK(bp[1]);\n \ttype = bp[1];\n \n@@ -302,8 +318,11 @@ pimv1_print(netdissect_options *ndo,\n \tcase PIMV1_TYPE_JOIN_PRUNE:\n \tcase PIMV1_TYPE_GRAFT:\n \tcase PIMV1_TYPE_GRAFT_ACK:\n-\t\tif (ndo->ndo_vflag)\n+\t\tif (ndo->ndo_vflag) {\n+\t\t\tif (len < 8)\n+\t\t\t\tgoto trunc;\n \t\t\tpimv1_join_prune_print(ndo, &bp[8], len - 8);\n+\t\t}\n \t\tbreak;\n \t}\n \tND_TCHECK(bp[4]);\n@@ -330,6 +349,8 @@ cisco_autorp_print(netdissect_options *ndo,\n \tint numrps;\n \tint hold;\n \n+\tif (len < 8)\n+\t\tgoto trunc;\n \tND_TCHECK(bp[0]);\n \tND_PRINT((ndo, \" auto-rp \"));\n \ttype = bp[0];\n@@ -377,10 +398,16 @@ cisco_autorp_print(netdissect_options *ndo,\n \t\tint nentries;\n \t\tchar s;\n \n+\t\tif (len < 4)\n+\t\t\tgoto trunc;\n \t\tND_TCHECK2(bp[0], 4);\n \t\tND_PRINT((ndo, \" RP %s\", ipaddr_string(ndo, bp)));\n-\t\tND_TCHECK(bp[4]);\n-\t\tswitch (bp[4] & 0x3) {\n+\t\tbp += 4;\n+\t\tlen -= 4;\n+\t\tif (len < 1)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK(bp[0]);\n+\t\tswitch (bp[0] & 0x3) {\n \t\tcase 0: ND_PRINT((ndo, \" PIMv?\"));\n \t\t\tbreak;\n \t\tcase 1:\tND_PRINT((ndo, \" PIMv1\"));\n@@ -390,13 +417,20 @@ cisco_autorp_print(netdissect_options *ndo,\n \t\tcase 3:\tND_PRINT((ndo, \" PIMv1+2\"));\n \t\t\tbreak;\n \t\t}\n-\t\tif (bp[4] & 0xfc)\n-\t\t\tND_PRINT((ndo, \" [rsvd=0x%02x]\", bp[4] & 0xfc));\n-\t\tND_TCHECK(bp[5]);\n-\t\tnentries = bp[5];\n-\t\tbp += 6; len -= 6;\n+\t\tif (bp[0] & 0xfc)\n+\t\t\tND_PRINT((ndo, \" [rsvd=0x%02x]\", bp[0] & 0xfc));\n+\t\tbp += 1;\n+\t\tlen -= 1;\n+\t\tif (len < 1)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK(bp[0]);\n+\t\tnentries = bp[0];\n+\t\tbp += 1;\n+\t\tlen -= 1;\n \t\ts = ' ';\n \t\tfor (; nentries; nentries--) {\n+\t\t\tif (len < 6)\n+\t\t\t\tgoto trunc;\n \t\t\tND_TCHECK2(bp[0], 6);\n \t\t\tND_PRINT((ndo, \"%c%s%s/%d\", s, bp[0] & 1 ? \"!\" : \"\",\n \t\t\t          ipaddr_string(ndo, &bp[2]), bp[1]));\n@@ -421,16 +455,13 @@ void\n pim_print(netdissect_options *ndo,\n           register const u_char *bp, register u_int len, const u_char *bp2)\n {\n-\tregister const u_char *ep;\n \tregister const struct pim *pim = (const struct pim *)bp;\n \n-\tep = (const u_char *)ndo->ndo_snapend;\n-\tif (bp >= ep)\n-\t\treturn;\n #ifdef notyet\t\t\t/* currently we see only version and type */\n \tND_TCHECK(pim->pim_rsv);\n #endif\n \n+\tND_TCHECK(pim->pim_typever);\n \tswitch (PIM_VER(pim->pim_typever)) {\n \tcase 2:\n \t\tif (!ndo->ndo_vflag) {\n@@ -454,6 +485,10 @@ pim_print(netdissect_options *ndo,\n \t\tbreak;\n \t}\n \treturn;\n+\n+trunc:\n+\tND_PRINT((ndo, \"[|pim]\"));\n+\treturn;\n }\n \n /*\n@@ -496,8 +531,6 @@ pim_print(netdissect_options *ndo,\n  *\n  */\n \n-static int pimv2_addr_len;\n-\n enum pimv2_addrtype {\n \tpimv2_unicast, pimv2_group, pimv2_source\n };\n@@ -524,23 +557,24 @@ enum pimv2_addrtype {\n  */\n static int\n pimv2_addr_print(netdissect_options *ndo,\n-                 const u_char *bp, enum pimv2_addrtype at, int silent)\n+                 const u_char *bp, u_int len, enum pimv2_addrtype at,\n+                 u_int addr_len, int silent)\n {\n \tint af;\n-\tint len, hdrlen;\n+\tint hdrlen;\n \n-\tND_TCHECK(bp[0]);\n-\n-\tif (pimv2_addr_len == 0) {\n+\tif (addr_len == 0) {\n+\t\tif (len < 2)\n+\t\t\tgoto trunc;\n \t\tND_TCHECK(bp[1]);\n \t\tswitch (bp[0]) {\n \t\tcase 1:\n \t\t\taf = AF_INET;\n-\t\t\tlen = sizeof(struct in_addr);\n+\t\t\taddr_len = (u_int)sizeof(struct in_addr);\n \t\t\tbreak;\n \t\tcase 2:\n \t\t\taf = AF_INET6;\n-\t\t\tlen = sizeof(struct in6_addr);\n+\t\t\taddr_len = (u_int)sizeof(struct in6_addr);\n \t\t\tbreak;\n \t\tdefault:\n \t\t\treturn -1;\n@@ -549,7 +583,7 @@ pimv2_addr_print(netdissect_options *ndo,\n \t\t\treturn -1;\n \t\thdrlen = 2;\n \t} else {\n-\t\tswitch (pimv2_addr_len) {\n+\t\tswitch (addr_len) {\n \t\tcase sizeof(struct in_addr):\n \t\t\taf = AF_INET;\n \t\t\tbreak;\n@@ -560,14 +594,16 @@ pimv2_addr_print(netdissect_options *ndo,\n \t\t\treturn -1;\n \t\t\tbreak;\n \t\t}\n-\t\tlen = pimv2_addr_len;\n \t\thdrlen = 0;\n \t}\n \n \tbp += hdrlen;\n+\tlen -= hdrlen;\n \tswitch (at) {\n \tcase pimv2_unicast:\n-\t\tND_TCHECK2(bp[0], len);\n+\t\tif (len < addr_len)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK2(bp[0], addr_len);\n \t\tif (af == AF_INET) {\n \t\t\tif (!silent)\n \t\t\t\tND_PRINT((ndo, \"%s\", ipaddr_string(ndo, bp)));\n@@ -576,10 +612,12 @@ pimv2_addr_print(netdissect_options *ndo,\n \t\t\tif (!silent)\n \t\t\t\tND_PRINT((ndo, \"%s\", ip6addr_string(ndo, bp)));\n \t\t}\n-\t\treturn hdrlen + len;\n+\t\treturn hdrlen + addr_len;\n \tcase pimv2_group:\n \tcase pimv2_source:\n-\t\tND_TCHECK2(bp[0], len + 2);\n+\t\tif (len < addr_len + 2)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK2(bp[0], addr_len + 2);\n \t\tif (af == AF_INET) {\n \t\t\tif (!silent) {\n \t\t\t\tND_PRINT((ndo, \"%s\", ipaddr_string(ndo, bp + 2)));\n@@ -608,7 +646,7 @@ pimv2_addr_print(netdissect_options *ndo,\n \t\t\t\tND_PRINT((ndo, \")\"));\n \t\t\t}\n \t\t}\n-\t\treturn hdrlen + 2 + len;\n+\t\treturn hdrlen + 2 + addr_len;\n \tdefault:\n \t\treturn -1;\n \t}\n@@ -660,17 +698,23 @@ pimv2_print(netdissect_options *ndo,\n \tregister const struct pim *pim = (const struct pim *)bp;\n \tint advance;\n \tenum checksum_status cksum_status;\n+\tint pimv2_addr_len;\n \n \tep = (const u_char *)ndo->ndo_snapend;\n \tif (bp >= ep)\n \t\treturn;\n \tif (ep > bp + len)\n \t\tep = bp + len;\n+\tif (len < 2)\n+\t\tgoto trunc;\n \tND_TCHECK(pim->pim_rsv);\n \tpimv2_addr_len = pim->pim_rsv;\n \tif (pimv2_addr_len != 0)\n \t\tND_PRINT((ndo, \", RFC2117-encoding\"));\n \n+\tif (len < 4)\n+\t\tgoto trunc;\n+\tND_TCHECK(pim->pim_cksum);\n \tND_PRINT((ndo, \", cksum 0x%04x \", EXTRACT_16BITS(&pim->pim_cksum)));\n \tif (EXTRACT_16BITS(&pim->pim_cksum) == 0) {\n \t\tND_PRINT((ndo, \"(unverified)\"));\n@@ -711,23 +755,29 @@ pimv2_print(netdissect_options *ndo,\n \t\t\tbreak;\n \t\t}\n \t}\n+\tbp += 4;\n+\tlen -= 4;\n \n \tswitch (PIM_TYPE(pim->pim_typever)) {\n \tcase PIMV2_TYPE_HELLO:\n \t    {\n \t\tuint16_t otype, olen;\n-\t\tbp += 4;\n-\t\twhile (bp < ep) {\n+\t\twhile (len > 0) {\n+\t\t\tif (len < 4)\n+\t\t\t\tgoto trunc;\n \t\t\tND_TCHECK2(bp[0], 4);\n \t\t\totype = EXTRACT_16BITS(&bp[0]);\n \t\t\tolen = EXTRACT_16BITS(&bp[2]);\n-\t\t\tND_TCHECK2(bp[0], 4 + olen);\n \t\t\tND_PRINT((ndo, \"\\n\\t  %s Option (%u), length %u, Value: \",\n \t\t\t          tok2str(pimv2_hello_option_values, \"Unknown\", otype),\n \t\t\t          otype,\n \t\t\t          olen));\n \t\t\tbp += 4;\n+\t\t\tlen -= 4;\n \n+\t\t\tif (len < olen)\n+\t\t\t\tgoto trunc;\n+\t\t\tND_TCHECK2(bp[0], olen);\n \t\t\tswitch (otype) {\n \t\t\tcase PIMV2_HELLO_OPTION_HOLDTIME:\n \t\t\t\tif (olen != 2) {\n@@ -797,14 +847,14 @@ pimv2_print(netdissect_options *ndo,\n \t\t\tcase PIMV2_HELLO_OPTION_ADDRESS_LIST:\n \t\t\t\tif (ndo->ndo_vflag > 1) {\n \t\t\t\t\tconst u_char *ptr = bp;\n+\t\t\t\t\tu_int plen = len;\n \t\t\t\t\twhile (ptr < (bp+olen)) {\n \t\t\t\t\t\tND_PRINT((ndo, \"\\n\\t    \"));\n-\t\t\t\t\t\tadvance = pimv2_addr_print(ndo, ptr, pimv2_unicast, 0);\n-\t\t\t\t\t\tif (advance < 0) {\n-\t\t\t\t\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\tadvance = pimv2_addr_print(ndo, ptr, plen, pimv2_unicast, pimv2_addr_len, 0);\n+\t\t\t\t\t\tif (advance < 0)\n+\t\t\t\t\t\t\tgoto trunc;\n \t\t\t\t\t\tptr += advance;\n+\t\t\t\t\t\tplen -= advance;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n@@ -817,6 +867,7 @@ pimv2_print(netdissect_options *ndo,\n \t\t\tif (ndo->ndo_vflag> 1)\n \t\t\t\tprint_unknown_data(ndo, bp, \"\\n\\t    \", olen);\n \t\t\tbp += olen;\n+\t\t\tlen -= olen;\n \t\t}\n \t\tbreak;\n \t    }\n@@ -825,18 +876,24 @@ pimv2_print(netdissect_options *ndo,\n \t{\n \t\tconst struct ip *ip;\n \n-\t\tND_TCHECK2(*(bp + 4), PIMV2_REGISTER_FLAG_LEN);\n+\t\tif (len < 4)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK2(*bp, PIMV2_REGISTER_FLAG_LEN);\n \n \t\tND_PRINT((ndo, \", Flags [ %s ]\\n\\t\",\n \t\t          tok2str(pimv2_register_flag_values,\n \t\t          \"none\",\n-\t\t          EXTRACT_32BITS(bp+4))));\n+\t\t          EXTRACT_32BITS(bp))));\n \n-\t\tbp += 8; len -= 8;\n+\t\tbp += 4; len -= 4;\n \t\t/* encapsulated multicast packet */\n+\t\tif (len == 0)\n+\t\t\tgoto trunc;\n \t\tip = (const struct ip *)bp;\n+\t\tND_TCHECK(ip->ip_vhl);\n \t\tswitch (IP_V(ip)) {\n                 case 0: /* Null header */\n+\t\t\tND_TCHECK(ip->ip_dst);\n \t\t\tND_PRINT((ndo, \"IP-Null-header %s > %s\",\n \t\t\t          ipaddr_string(ndo, &ip->ip_src),\n \t\t\t          ipaddr_string(ndo, &ip->ip_dst)));\n@@ -858,22 +915,13 @@ pimv2_print(netdissect_options *ndo,\n \t}\n \n \tcase PIMV2_TYPE_REGISTER_STOP:\n-\t\tbp += 4; len -= 4;\n-\t\tif (bp >= ep)\n-\t\t\tbreak;\n \t\tND_PRINT((ndo, \" group=\"));\n-\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0)) < 0) {\n-\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\tbreak;\n-\t\t}\n+\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)\n+\t\t\tgoto trunc;\n \t\tbp += advance; len -= advance;\n-\t\tif (bp >= ep)\n-\t\t\tbreak;\n \t\tND_PRINT((ndo, \" source=\"));\n-\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {\n-\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\tbreak;\n-\t\t}\n+\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)\n+\t\t\tgoto trunc;\n \t\tbp += advance; len -= advance;\n \t\tbreak;\n \n@@ -924,19 +972,15 @@ pimv2_print(netdissect_options *ndo,\n \t\tuint16_t nprune;\n \t\tint i, j;\n \n-\t\tbp += 4; len -= 4;\n \t\tif (PIM_TYPE(pim->pim_typever) != 7) {\t/*not for Graft-ACK*/\n-\t\t\tif (bp >= ep)\n-\t\t\t\tbreak;\n \t\t\tND_PRINT((ndo, \", upstream-neighbor: \"));\n-\t\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {\n-\t\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\t\tbreak;\n-\t\t\t}\n+\t\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)\n+\t\t\t\tgoto trunc;\n \t\t\tbp += advance; len -= advance;\n \t\t}\n-\t\tif (bp + 4 > ep)\n-\t\t\tbreak;\n+\t\tif (len < 4)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK2(*bp, 4);\n \t\tngroup = bp[1];\n \t\tholdtime = EXTRACT_16BITS(&bp[2]);\n \t\tND_PRINT((ndo, \"\\n\\t  %u group(s)\", ngroup));\n@@ -949,139 +993,125 @@ pimv2_print(netdissect_options *ndo,\n \t\t}\n \t\tbp += 4; len -= 4;\n \t\tfor (i = 0; i < ngroup; i++) {\n-\t\t\tif (bp >= ep)\n-\t\t\t\tgoto jp_done;\n \t\t\tND_PRINT((ndo, \"\\n\\t    group #%u: \", i+1));\n-\t\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0)) < 0) {\n-\t\t\t\tND_PRINT((ndo, \"...)\"));\n-\t\t\t\tgoto jp_done;\n-\t\t\t}\n+\t\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)\n+\t\t\t\tgoto trunc;\n \t\t\tbp += advance; len -= advance;\n-\t\t\tif (bp + 4 > ep) {\n-\t\t\t\tND_PRINT((ndo, \"...)\"));\n-\t\t\t\tgoto jp_done;\n-\t\t\t}\n+\t\t\tif (len < 4)\n+\t\t\t\tgoto trunc;\n+\t\t\tND_TCHECK2(*bp, 4);\n \t\t\tnjoin = EXTRACT_16BITS(&bp[0]);\n \t\t\tnprune = EXTRACT_16BITS(&bp[2]);\n \t\t\tND_PRINT((ndo, \", joined sources: %u, pruned sources: %u\", njoin, nprune));\n \t\t\tbp += 4; len -= 4;\n \t\t\tfor (j = 0; j < njoin; j++) {\n \t\t\t\tND_PRINT((ndo, \"\\n\\t      joined source #%u: \", j+1));\n-\t\t\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_source, 0)) < 0) {\n-\t\t\t\t\tND_PRINT((ndo, \"...)\"));\n-\t\t\t\t\tgoto jp_done;\n-\t\t\t\t}\n+\t\t\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_source, pimv2_addr_len, 0)) < 0)\n+\t\t\t\t\tgoto trunc;\n \t\t\t\tbp += advance; len -= advance;\n \t\t\t}\n \t\t\tfor (j = 0; j < nprune; j++) {\n \t\t\t\tND_PRINT((ndo, \"\\n\\t      pruned source #%u: \", j+1));\n-\t\t\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_source, 0)) < 0) {\n-\t\t\t\t\tND_PRINT((ndo, \"...)\"));\n-\t\t\t\t\tgoto jp_done;\n-\t\t\t\t}\n+\t\t\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_source, pimv2_addr_len, 0)) < 0)\n+\t\t\t\t\tgoto trunc;\n \t\t\t\tbp += advance; len -= advance;\n \t\t\t}\n \t\t}\n-\tjp_done:\n \t\tbreak;\n \t    }\n \n \tcase PIMV2_TYPE_BOOTSTRAP:\n \t{\n \t\tint i, j, frpcnt;\n-\t\tbp += 4;\n \n \t\t/* Fragment Tag, Hash Mask len, and BSR-priority */\n-\t\tif (bp + sizeof(uint16_t) >= ep) break;\n+\t\tif (len < 2)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK_16BITS(bp);\n \t\tND_PRINT((ndo, \" tag=%x\", EXTRACT_16BITS(bp)));\n-\t\tbp += sizeof(uint16_t);\n-\t\tif (bp >= ep) break;\n+\t\tbp += 2;\n+\t\tlen -= 2;\n+\t\tif (len < 1)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK(bp[0]);\n \t\tND_PRINT((ndo, \" hashmlen=%d\", bp[0]));\n-\t\tif (bp + 1 >= ep) break;\n+\t\tif (len < 2)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK(bp[2]);\n \t\tND_PRINT((ndo, \" BSRprio=%d\", bp[1]));\n \t\tbp += 2;\n+\t\tlen -= 2;\n \n \t\t/* Encoded-Unicast-BSR-Address */\n-\t\tif (bp >= ep) break;\n \t\tND_PRINT((ndo, \" BSR=\"));\n-\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {\n-\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\tbreak;\n-\t\t}\n+\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)\n+\t\t\tgoto trunc;\n \t\tbp += advance;\n+\t\tlen -= advance;\n \n \t\tfor (i = 0; bp < ep; i++) {\n \t\t\t/* Encoded-Group Address */\n \t\t\tND_PRINT((ndo, \" (group%d: \", i));\n-\t\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0))\n-\t\t\t    < 0) {\n-\t\t\t\tND_PRINT((ndo, \"...)\"));\n-\t\t\t\tgoto bs_done;\n-\t\t\t}\n+\t\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)\n+\t\t\t\tgoto trunc;\n \t\t\tbp += advance;\n+\t\t\tlen -= advance;\n \n \t\t\t/* RP-Count, Frag RP-Cnt, and rsvd */\n-\t\t\tif (bp >= ep) {\n-\t\t\t\tND_PRINT((ndo, \"...)\"));\n-\t\t\t\tgoto bs_done;\n-\t\t\t}\n+\t\t\tif (len < 1)\n+\t\t\t\tgoto trunc;\n+\t\t\tND_TCHECK(bp[0]);\n \t\t\tND_PRINT((ndo, \" RPcnt=%d\", bp[0]));\n-\t\t\tif (bp + 1 >= ep) {\n-\t\t\t\tND_PRINT((ndo, \"...)\"));\n-\t\t\t\tgoto bs_done;\n-\t\t\t}\n+\t\t\tif (len < 2)\n+\t\t\t\tgoto trunc;\n+\t\t\tND_TCHECK(bp[1]);\n \t\t\tND_PRINT((ndo, \" FRPcnt=%d\", frpcnt = bp[1]));\n+\t\t\tif (len < 4)\n+\t\t\t\tgoto trunc;\n \t\t\tbp += 4;\n+\t\t\tlen -= 4;\n \n \t\t\tfor (j = 0; j < frpcnt && bp < ep; j++) {\n \t\t\t\t/* each RP info */\n \t\t\t\tND_PRINT((ndo, \" RP%d=\", j));\n-\t\t\t\tif ((advance = pimv2_addr_print(ndo, bp,\n+\t\t\t\tif ((advance = pimv2_addr_print(ndo, bp, len,\n \t\t\t\t\t\t\t\tpimv2_unicast,\n-\t\t\t\t\t\t\t\t0)) < 0) {\n-\t\t\t\t\tND_PRINT((ndo, \"...)\"));\n-\t\t\t\t\tgoto bs_done;\n-\t\t\t\t}\n+\t\t\t\t\t\t\t\tpimv2_addr_len,\n+\t\t\t\t\t\t\t\t0)) < 0)\n+\t\t\t\t\tgoto trunc;\n \t\t\t\tbp += advance;\n+\t\t\t\tlen -= advance;\n \n-\t\t\t\tif (bp + 1 >= ep) {\n-\t\t\t\t\tND_PRINT((ndo, \"...)\"));\n-\t\t\t\t\tgoto bs_done;\n-\t\t\t\t}\n+\t\t\t\tif (len < 2)\n+\t\t\t\t\tgoto trunc;\n+\t\t\t\tND_TCHECK_16BITS(bp);\n \t\t\t\tND_PRINT((ndo, \",holdtime=\"));\n \t\t\t\tunsigned_relts_print(ndo, EXTRACT_16BITS(bp));\n-\t\t\t\tif (bp + 2 >= ep) {\n-\t\t\t\t\tND_PRINT((ndo, \"...)\"));\n-\t\t\t\t\tgoto bs_done;\n-\t\t\t\t}\n+\t\t\t\tif (len < 3)\n+\t\t\t\t\tgoto trunc;\n+\t\t\t\tND_TCHECK(bp[2]);\n \t\t\t\tND_PRINT((ndo, \",prio=%d\", bp[2]));\n+\t\t\t\tif (len < 4)\n+\t\t\t\t\tgoto trunc;\n \t\t\t\tbp += 4;\n+\t\t\t\tlen -= 4;\n \t\t\t}\n \t\t\tND_PRINT((ndo, \")\"));\n \t\t}\n-\t   bs_done:\n \t\tbreak;\n \t}\n \tcase PIMV2_TYPE_ASSERT:\n-\t\tbp += 4; len -= 4;\n-\t\tif (bp >= ep)\n-\t\t\tbreak;\n \t\tND_PRINT((ndo, \" group=\"));\n-\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0)) < 0) {\n-\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\tbreak;\n-\t\t}\n+\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)\n+\t\t\tgoto trunc;\n \t\tbp += advance; len -= advance;\n-\t\tif (bp >= ep)\n-\t\t\tbreak;\n \t\tND_PRINT((ndo, \" src=\"));\n-\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {\n-\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\tbreak;\n-\t\t}\n+\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)\n+\t\t\tgoto trunc;\n \t\tbp += advance; len -= advance;\n-\t\tif (bp + 8 > ep)\n-\t\t\tbreak;\n+\t\tif (len < 8)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK2(*bp, 8);\n \t\tif (bp[0] & 0x80)\n \t\t\tND_PRINT((ndo, \" RPT\"));\n \t\tND_PRINT((ndo, \" pref=%u\", EXTRACT_32BITS(&bp[0]) & 0x7fffffff));\n@@ -1091,61 +1121,62 @@ pimv2_print(netdissect_options *ndo,\n \tcase PIMV2_TYPE_CANDIDATE_RP:\n \t{\n \t\tint i, pfxcnt;\n-\t\tbp += 4;\n \n \t\t/* Prefix-Cnt, Priority, and Holdtime */\n-\t\tif (bp >= ep) break;\n+\t\tif (len < 1)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK(bp[0]);\n \t\tND_PRINT((ndo, \" prefix-cnt=%d\", bp[0]));\n \t\tpfxcnt = bp[0];\n-\t\tif (bp + 1 >= ep) break;\n+\t\tif (len < 2)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK(bp[1]);\n \t\tND_PRINT((ndo, \" prio=%d\", bp[1]));\n-\t\tif (bp + 3 >= ep) break;\n+\t\tif (len < 4)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK_16BITS(&bp[2]);\n \t\tND_PRINT((ndo, \" holdtime=\"));\n \t\tunsigned_relts_print(ndo, EXTRACT_16BITS(&bp[2]));\n \t\tbp += 4;\n+\t\tlen -= 4;\n \n \t\t/* Encoded-Unicast-RP-Address */\n-\t\tif (bp >= ep) break;\n \t\tND_PRINT((ndo, \" RP=\"));\n-\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {\n-\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\tbreak;\n-\t\t}\n+\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)\n+\t\t\tgoto trunc;\n \t\tbp += advance;\n+\t\tlen -= advance;\n \n \t\t/* Encoded-Group Addresses */\n \t\tfor (i = 0; i < pfxcnt && bp < ep; i++) {\n \t\t\tND_PRINT((ndo, \" Group%d=\", i));\n-\t\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0))\n-\t\t\t    < 0) {\n-\t\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\t\tbreak;\n-\t\t\t}\n+\t\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)\n+\t\t\t\tgoto trunc;\n \t\t\tbp += advance;\n+\t\t\tlen -= advance;\n \t\t}\n \t\tbreak;\n \t}\n \n \tcase PIMV2_TYPE_PRUNE_REFRESH:\n \t\tND_PRINT((ndo, \" src=\"));\n-\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {\n-\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\tbreak;\n-\t\t}\n+\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)\n+\t\t\tgoto trunc;\n \t\tbp += advance;\n+\t\tlen -= advance;\n \t\tND_PRINT((ndo, \" grp=\"));\n-\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_group, 0)) < 0) {\n-\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\tbreak;\n-\t\t}\n+\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_group, pimv2_addr_len, 0)) < 0)\n+\t\t\tgoto trunc;\n \t\tbp += advance;\n+\t\tlen -= advance;\n \t\tND_PRINT((ndo, \" forwarder=\"));\n-\t\tif ((advance = pimv2_addr_print(ndo, bp, pimv2_unicast, 0)) < 0) {\n-\t\t\tND_PRINT((ndo, \"...\"));\n-\t\t\tbreak;\n-\t\t}\n+\t\tif ((advance = pimv2_addr_print(ndo, bp, len, pimv2_unicast, pimv2_addr_len, 0)) < 0)\n+\t\t\tgoto trunc;\n \t\tbp += advance;\n-\t\tND_TCHECK2(bp[0], 2);\n+\t\tlen -= advance;\n+\t\tif (len < 2)\n+\t\t\tgoto trunc;\n+\t\tND_TCHECK_16BITS(bp);\n \t\tND_PRINT((ndo, \" TUNR \"));\n \t\tunsigned_relts_print(ndo, EXTRACT_16BITS(bp));\n \t\tbreak;"
        },
        {
          "filename": "tests/TESTLIST",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -535,6 +535,7 @@ isis_stlv_asan-4\tisis_stlv_asan-4.pcap\t\tisis_stlv_asan-4.out\t-v\n lldp_mgmt_addr_tlv_asan\tlldp_mgmt_addr_tlv_asan.pcap\tlldp_mgmt_addr_tlv_asan.out\t-v\n bootp_asan\t\tbootp_asan.pcap\t\t\tbootp_asan.out\t\t-v\n ppp_ccp_config_deflate_option_asan\tppp_ccp_config_deflate_option_asan.pcap\tppp_ccp_config_deflate_option_asan.out\t-v\n+pim_header_asan\t\tpim_header_asan.pcap\t\tpim_header_asan.out\t\t-v\n \n # RTP tests\n # fuzzed pcap"
        },
        {
          "filename": "tests/heapoverflow-in_checksum.out",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,3 +1,4 @@\n IP (tos 0x30, ttl 48, id 12336, offset 0, flags [DF], proto PIM (103), length 12336, bad cksum 3030 (->2947)!)\n     48.48.48.48 > 48.48.48.48: PIMv2, length 12316\n-\tHello, RFC2117-encoding, cksum 0x3030 (unverified)[|pim]\n+\tHello, RFC2117-encoding, cksum 0x3030 (unverified)\n+\t  Unknown Option (12336), length 12336, Value: [|pim]"
        },
        {
          "filename": "tests/pim_header_asan.out",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+IP6 (class 0x76, flowlabel 0xf6767, hlim 109, next-header PIM (103) payload length: 30311) 6767:6767:6767:8267:6767:6765:6767:6767 > 6700:80:74:24:2424:2424:2424:2509: PIMv2, length 30311\n+\tBootstrap, RFC2117-encoding[|pim]"
        },
        {
          "filename": "tests/pim_header_asan.pcap",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "05a263a5418a9e5b971509c486246eb0913c8aea",
            "date": "2025-01-12T21:05:02Z",
            "author_login": "fxlb"
          },
          {
            "sha": "9aee9964aaee40750acde45f838f48eb8f95fbe3",
            "date": "2025-01-09T15:35:53Z",
            "author_login": "fxlb"
          },
          {
            "sha": "6cd500c8dafe5a9bbf3e56312493709e8b118726",
            "date": "2025-01-08T20:12:09Z",
            "author_login": "fxlb"
          },
          {
            "sha": "c5b54bfbd68b03f7997feaa277db30d399975a4d",
            "date": "2022-10-11T20:10:46Z",
            "author_login": "fenner"
          },
          {
            "sha": "431bdb5c365360d61968e7fa02322825b1da4208",
            "date": "2025-01-07T19:21:12Z",
            "author_login": "fxlb"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-125",
    "description": "The PIM parser in tcpdump before 4.9.2 has a buffer over-read in print-pim.c, several functions.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-09-14T06:29:02.357",
    "last_modified": "2024-11-21T03:10:45.060",
    "fix_date": "2017-03-22T21:09:28Z"
  },
  "references": [
    {
      "url": "http://www.debian.org/security/2017/dsa-3971",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1039307",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.tcpdump.org/tcpdump-changes.txt",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHEA-2018:0705",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/the-tcpdump-group/tcpdump/commit/5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201709-23",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://support.apple.com/HT208221",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2017/dsa-3971",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1039307",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.tcpdump.org/tcpdump-changes.txt",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHEA-2018:0705",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/the-tcpdump-group/tcpdump/commit/5dc1860d8267b1e0cb78c9ffa2a40bea2fdb3ddc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201709-23",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://support.apple.com/HT208221",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:07.370505",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tcpdump",
    "owner": "the-tcpdump-group",
    "created_at": "2013-04-14T21:46:15Z",
    "updated_at": "2025-01-14T07:48:01Z",
    "pushed_at": "2025-01-13T06:19:33Z",
    "size": 27691,
    "stars": 2789,
    "forks": 860,
    "open_issues": 115,
    "watchers": 2789,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "tcpdump-3.5",
      "tcpdump-3.6",
      "tcpdump-3.7",
      "tcpdump-3.8",
      "tcpdump-3.9",
      "tcpdump-4.0",
      "tcpdump-4.1",
      "tcpdump-4.2",
      "tcpdump-4.3",
      "tcpdump-4.4",
      "tcpdump-4.5",
      "tcpdump-4.6",
      "tcpdump-4.7",
      "tcpdump-4.8",
      "tcpdump-4.9",
      "tcpdump-4.99"
    ],
    "languages": {
      "C": 3548298,
      "CMake": 76892,
      "Roff": 66849,
      "Shell": 50525,
      "M4": 31504,
      "Perl": 29240,
      "Makefile": 14259,
      "Awk": 4120,
      "GDB": 660
    },
    "commit_activity": {
      "total_commits_last_year": 314,
      "avg_commits_per_week": 6.038461538461538,
      "days_active_last_year": 158
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:04:48.453717"
  }
}