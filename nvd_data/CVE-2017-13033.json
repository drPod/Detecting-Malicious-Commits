{
  "cve_id": "CVE-2017-13033",
  "github_data": {
    "repository": "the-tcpdump-group/tcpdump",
    "fix_commit": "ae83295915d08a854de27a88efac5dd7353e6d3f",
    "related_commits": [
      "ae83295915d08a854de27a88efac5dd7353e6d3f",
      "ae83295915d08a854de27a88efac5dd7353e6d3f"
    ],
    "patch_url": "https://github.com/the-tcpdump-group/tcpdump/commit/ae83295915d08a854de27a88efac5dd7353e6d3f.patch",
    "fix_commit_details": {
      "sha": "ae83295915d08a854de27a88efac5dd7353e6d3f",
      "commit_date": "2017-03-23T20:30:56Z",
      "author": {
        "login": "guyharris",
        "type": "User",
        "stats": {
          "total_commits": 1754,
          "average_weekly_commits": 1.3287878787878789,
          "total_additions": 334479,
          "total_deletions": 321814,
          "weeks_active": 331
        }
      },
      "commit_message": {
        "title": "CVE-2017-13033/VTP: Add more bound and length checks.",
        "length": 940,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 148,
        "additions": 84,
        "deletions": 64
      },
      "files": [
        {
          "filename": "print-vtp.c",
          "status": "modified",
          "additions": 80,
          "deletions": 62,
          "patch": "@@ -13,9 +13,8 @@\n  * FOR A PARTICULAR PURPOSE.\n  *\n  * Reference documentation:\n- *  http://www.cisco.com/en/US/tech/tk389/tk689/technologies_tech_note09186a0080094c52.shtml\n- *  http://www.cisco.com/warp/public/473/21.html\n- *  http://www.cisco.com/univercd/cc/td/doc/product/lan/trsrb/frames.htm\n+ *  http://www.cisco.com/c/en/us/support/docs/lan-switching/vtp/10558-21.html\n+ *  http://docstore.mik.ua/univercd/cc/td/doc/product/lan/trsrb/frames.htm\n  *\n  * Original code ode by Carles Kishimoto <carles.kishimoto@gmail.com>\n  */\n@@ -36,7 +35,7 @@\n #define\tVTP_DOMAIN_NAME_LEN\t\t32\n #define\tVTP_MD5_DIGEST_LEN\t\t16\n #define VTP_UPDATE_TIMESTAMP_LEN\t12\n-#define VTP_VLAN_INFO_OFFSET\t\t12\n+#define VTP_VLAN_INFO_FIXED_PART_LEN\t12\t/* length of VLAN info before VLAN name */\n \n #define VTP_SUMMARY_ADV\t\t\t0x01\n #define VTP_SUBSET_ADV\t\t\t0x02\n@@ -252,89 +251,108 @@ vtp_print (netdissect_options *ndo,\n \t    ND_TCHECK2(*tptr, len);\n \n \t    vtp_vlan = (const struct vtp_vlan_*)tptr;\n+\t    if (len < VTP_VLAN_INFO_FIXED_PART_LEN)\n+\t\tgoto trunc;\n \t    ND_TCHECK(*vtp_vlan);\n \t    ND_PRINT((ndo, \"\\n\\tVLAN info status %s, type %s, VLAN-id %u, MTU %u, SAID 0x%08x, Name \",\n \t\t   tok2str(vtp_vlan_status,\"Unknown\",vtp_vlan->status),\n \t\t   tok2str(vtp_vlan_type_values,\"Unknown\",vtp_vlan->type),\n \t\t   EXTRACT_16BITS(&vtp_vlan->vlanid),\n \t\t   EXTRACT_16BITS(&vtp_vlan->mtu),\n \t\t   EXTRACT_32BITS(&vtp_vlan->index)));\n-\t    fn_printzp(ndo, tptr + VTP_VLAN_INFO_OFFSET, vtp_vlan->name_len, NULL);\n-\n-            /*\n-             * Vlan names are aligned to 32-bit boundaries.\n-             */\n-            len  -= VTP_VLAN_INFO_OFFSET + 4*((vtp_vlan->name_len + 3)/4);\n-            tptr += VTP_VLAN_INFO_OFFSET + 4*((vtp_vlan->name_len + 3)/4);\n+\t    len  -= VTP_VLAN_INFO_FIXED_PART_LEN;\n+\t    tptr += VTP_VLAN_INFO_FIXED_PART_LEN;\n+\t    if (len < 4*((vtp_vlan->name_len + 3)/4))\n+\t\tgoto trunc;\n+\t    ND_TCHECK2(*tptr, vtp_vlan->name_len);\n+\t    fn_printzp(ndo, tptr, vtp_vlan->name_len, NULL);\n+\n+\t    /*\n+\t     * Vlan names are aligned to 32-bit boundaries.\n+\t     */\n+\t    len  -= 4*((vtp_vlan->name_len + 3)/4);\n+\t    tptr += 4*((vtp_vlan->name_len + 3)/4);\n \n             /* TLV information follows */\n \n             while (len > 0) {\n \n                 /*\n-                 * Cisco specs says 2 bytes for type + 2 bytes for length, take only 1\n-                 * See: http://www.cisco.com/univercd/cc/td/doc/product/lan/trsrb/frames.htm\n+                 * Cisco specs say 2 bytes for type + 2 bytes for length;\n+                 * see http://docstore.mik.ua/univercd/cc/td/doc/product/lan/trsrb/frames.htm\n+                 * However, actual packets on the wire appear to use 1\n+                 * byte for the type and 1 byte for the length, so that's\n+                 * what we do.\n                  */\n+                if (len < 2)\n+                    goto trunc;\n+                ND_TCHECK2(*tptr, 2);\n                 type = *tptr;\n                 tlv_len = *(tptr+1);\n \n                 ND_PRINT((ndo, \"\\n\\t\\t%s (0x%04x) TLV\",\n                        tok2str(vtp_vlan_tlv_values, \"Unknown\", type),\n                        type));\n \n-                /*\n-                 * infinite loop check\n-                 */\n-                if (type == 0 || tlv_len == 0) {\n+                if (len < tlv_len * 2 + 2) {\n+                    ND_PRINT((ndo, \" (TLV goes past the end of the packet)\"));\n                     return;\n                 }\n-\n                 ND_TCHECK2(*tptr, tlv_len * 2 +2);\n \n-                tlv_value = EXTRACT_16BITS(tptr+2);\n-\n-                switch (type) {\n-                case VTP_VLAN_STE_HOP_COUNT:\n-                    ND_PRINT((ndo, \", %u\", tlv_value));\n-                    break;\n-\n-                case VTP_VLAN_PRUNING:\n-                    ND_PRINT((ndo, \", %s (%u)\",\n-                           tlv_value == 1 ? \"Enabled\" : \"Disabled\",\n-                           tlv_value));\n-                    break;\n-\n-                case VTP_VLAN_STP_TYPE:\n-                    ND_PRINT((ndo, \", %s (%u)\",\n-                           tok2str(vtp_stp_type_values, \"Unknown\", tlv_value),\n-                           tlv_value));\n-                    break;\n-\n-                case VTP_VLAN_BRIDGE_TYPE:\n-                    ND_PRINT((ndo, \", %s (%u)\",\n-                           tlv_value == 1 ? \"SRB\" : \"SRT\",\n-                           tlv_value));\n-                    break;\n-\n-                case VTP_VLAN_BACKUP_CRF_MODE:\n-                    ND_PRINT((ndo, \", %s (%u)\",\n-                           tlv_value == 1 ? \"Backup\" : \"Not backup\",\n-                           tlv_value));\n-                    break;\n-\n-                    /*\n-                     * FIXME those are the defined TLVs that lack a decoder\n-                     * you are welcome to contribute code ;-)\n-                     */\n-\n-                case VTP_VLAN_SOURCE_ROUTING_RING_NUMBER:\n-                case VTP_VLAN_SOURCE_ROUTING_BRIDGE_NUMBER:\n-                case VTP_VLAN_PARENT_VLAN:\n-                case VTP_VLAN_TRANS_BRIDGED_VLAN:\n-                case VTP_VLAN_ARP_HOP_COUNT:\n-                default:\n-\t\t    print_unknown_data(ndo, tptr, \"\\n\\t\\t  \", 2 + tlv_len*2);\n-                    break;\n+                /*\n+                 * We assume the value is a 2-byte integer; the length is\n+                 * in units of 16-bit words.\n+                 */\n+                if (tlv_len != 1) {\n+                    ND_PRINT((ndo, \" (invalid TLV length %u != 1)\", tlv_len));\n+                    return;\n+                } else {\n+                    tlv_value = EXTRACT_16BITS(tptr+2);\n+\n+                    switch (type) {\n+                    case VTP_VLAN_STE_HOP_COUNT:\n+                        ND_PRINT((ndo, \", %u\", tlv_value));\n+                        break;\n+\n+                    case VTP_VLAN_PRUNING:\n+                        ND_PRINT((ndo, \", %s (%u)\",\n+                               tlv_value == 1 ? \"Enabled\" : \"Disabled\",\n+                               tlv_value));\n+                        break;\n+\n+                    case VTP_VLAN_STP_TYPE:\n+                        ND_PRINT((ndo, \", %s (%u)\",\n+                               tok2str(vtp_stp_type_values, \"Unknown\", tlv_value),\n+                               tlv_value));\n+                        break;\n+\n+                    case VTP_VLAN_BRIDGE_TYPE:\n+                        ND_PRINT((ndo, \", %s (%u)\",\n+                               tlv_value == 1 ? \"SRB\" : \"SRT\",\n+                               tlv_value));\n+                        break;\n+\n+                    case VTP_VLAN_BACKUP_CRF_MODE:\n+                        ND_PRINT((ndo, \", %s (%u)\",\n+                               tlv_value == 1 ? \"Backup\" : \"Not backup\",\n+                               tlv_value));\n+                        break;\n+\n+                        /*\n+                         * FIXME those are the defined TLVs that lack a decoder\n+                         * you are welcome to contribute code ;-)\n+                         */\n+\n+                    case VTP_VLAN_SOURCE_ROUTING_RING_NUMBER:\n+                    case VTP_VLAN_SOURCE_ROUTING_BRIDGE_NUMBER:\n+                    case VTP_VLAN_PARENT_VLAN:\n+                    case VTP_VLAN_TRANS_BRIDGED_VLAN:\n+                    case VTP_VLAN_ARP_HOP_COUNT:\n+                    default:\n+                        print_unknown_data(ndo, tptr, \"\\n\\t\\t  \", 2 + tlv_len*2);\n+                        break;\n+                    }\n                 }\n                 len -= 2 + tlv_len*2;\n                 tptr += 2 + tlv_len*2;"
        },
        {
          "filename": "tests/TESTLIST",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -524,6 +524,7 @@ pgm_opts_asan_2\t\tpgm_opts_asan_2.pcap\t\tpgm_opts_asan_2.out\t-v\n pgm_opts_asan_3\t\tpgm_opts_asan_3.pcap\t\tpgm_opts_asan_3.out\t-v\n vtp_asan\t\tvtp_asan.pcap\t\t\tvtp_asan.out\t-v\n vtp_asan-2\t\tvtp_asan-2.pcap\t\t\tvtp_asan-2.out\t-v\n+vtp_asan-3\t\tvtp_asan-3.pcap\t\t\tvtp_asan-3.out\t-v\n icmp6_mobileprefix_asan\ticmp6_mobileprefix_asan.pcap\ticmp6_mobileprefix_asan.out\t-v\n ip_printroute_asan\tip_printroute_asan.pcap\t\tip_printroute_asan.out\t-v\n mobility_opt_asan\tmobility_opt_asan.pcap\t\tmobility_opt_asan.out\t-v"
        },
        {
          "filename": "tests/vtp_asan-2.out",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -1,3 +1,2 @@\n FRF.16 Frag, seq 193, Flags [Begin, End], UI 08! VTPv69, Message Subset advertisement (0x02), length 2126400013\n-\tDomain name: , Seq number: 0, Config Rev fb499603\n-\tVLAN info status Unknown, type TrCRF, VLAN-id 256, MTU 771, SAID 0x03030303, Name ^C^I^C[|vtp]\n+\tDomain name: , Seq number: 0, Config Rev fb499603[|vtp]"
        },
        {
          "filename": "tests/vtp_asan-3.out",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+FRF.16 Frag, seq 193, Flags [Begin, End], UI 08! VTPv69, Message Subset advertisement (0x02), length 2126400013\n+\tDomain name: , Seq number: 0, Config Rev 4040404[|vtp]"
        },
        {
          "filename": "tests/vtp_asan-3.pcap",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "05a263a5418a9e5b971509c486246eb0913c8aea",
            "date": "2025-01-12T21:05:02Z",
            "author_login": "fxlb"
          },
          {
            "sha": "9aee9964aaee40750acde45f838f48eb8f95fbe3",
            "date": "2025-01-09T15:35:53Z",
            "author_login": "fxlb"
          },
          {
            "sha": "6cd500c8dafe5a9bbf3e56312493709e8b118726",
            "date": "2025-01-08T20:12:09Z",
            "author_login": "fxlb"
          },
          {
            "sha": "c5b54bfbd68b03f7997feaa277db30d399975a4d",
            "date": "2022-10-11T20:10:46Z",
            "author_login": "fenner"
          },
          {
            "sha": "431bdb5c365360d61968e7fa02322825b1da4208",
            "date": "2025-01-07T19:21:12Z",
            "author_login": "fxlb"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-125",
    "description": "The VTP parser in tcpdump before 4.9.2 has a buffer over-read in print-vtp.c:vtp_print().",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-09-14T06:29:02.467",
    "last_modified": "2024-11-21T03:10:45.660",
    "fix_date": "2017-03-23T20:30:56Z"
  },
  "references": [
    {
      "url": "http://www.debian.org/security/2017/dsa-3971",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1039307",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.tcpdump.org/tcpdump-changes.txt",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHEA-2018:0705",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/the-tcpdump-group/tcpdump/commit/ae83295915d08a854de27a88efac5dd7353e6d3f",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201709-23",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://support.apple.com/HT208221",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2017/dsa-3971",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1039307",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.tcpdump.org/tcpdump-changes.txt",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHEA-2018:0705",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/the-tcpdump-group/tcpdump/commit/ae83295915d08a854de27a88efac5dd7353e6d3f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201709-23",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://support.apple.com/HT208221",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:07.371055",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tcpdump",
    "owner": "the-tcpdump-group",
    "created_at": "2013-04-14T21:46:15Z",
    "updated_at": "2025-01-14T07:48:01Z",
    "pushed_at": "2025-01-13T06:19:33Z",
    "size": 27691,
    "stars": 2789,
    "forks": 860,
    "open_issues": 115,
    "watchers": 2789,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "tcpdump-3.5",
      "tcpdump-3.6",
      "tcpdump-3.7",
      "tcpdump-3.8",
      "tcpdump-3.9",
      "tcpdump-4.0",
      "tcpdump-4.1",
      "tcpdump-4.2",
      "tcpdump-4.3",
      "tcpdump-4.4",
      "tcpdump-4.5",
      "tcpdump-4.6",
      "tcpdump-4.7",
      "tcpdump-4.8",
      "tcpdump-4.9",
      "tcpdump-4.99"
    ],
    "languages": {
      "C": 3548298,
      "CMake": 76892,
      "Roff": 66849,
      "Shell": 50525,
      "M4": 31504,
      "Perl": 29240,
      "Makefile": 14259,
      "Awk": 4120,
      "GDB": 660
    },
    "commit_activity": {
      "total_commits_last_year": 314,
      "avg_commits_per_week": 6.038461538461538,
      "days_active_last_year": 158
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:04:48.453717"
  }
}