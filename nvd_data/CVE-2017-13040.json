{
  "cve_id": "CVE-2017-13040",
  "github_data": {
    "repository": "the-tcpdump-group/tcpdump",
    "fix_commit": "4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c",
    "related_commits": [
      "4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c",
      "4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c",
      "commit_date": "2017-06-12T22:04:18Z",
      "author": {
        "login": "guyharris",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "CVE-2017-13040/MPTCP: Clean up printing DSS suboption.",
        "length": 378,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 89,
        "additions": 55,
        "deletions": 34
      },
      "files": [
        {
          "filename": "print-mptcp.c",
          "status": "modified",
          "additions": 50,
          "deletions": 34,
          "patch": "@@ -178,7 +178,7 @@ mp_capable_print(netdissect_options *ndo,\n {\n         const struct mp_capable *mpc = (const struct mp_capable *) opt;\n \n-        if (!(opt_len == 12 && flags & TH_SYN) &&\n+        if (!(opt_len == 12 && (flags & TH_SYN)) &&\n             !(opt_len == 20 && (flags & (TH_SYN | TH_ACK)) == TH_ACK))\n                 return 0;\n \n@@ -202,9 +202,9 @@ mp_join_print(netdissect_options *ndo,\n {\n         const struct mp_join *mpj = (const struct mp_join *) opt;\n \n-        if (!(opt_len == 12 && flags & TH_SYN) &&\n+        if (!(opt_len == 12 && (flags & TH_SYN)) &&\n             !(opt_len == 16 && (flags & (TH_SYN | TH_ACK)) == (TH_SYN | TH_ACK)) &&\n-            !(opt_len == 24 && flags & TH_ACK))\n+            !(opt_len == 24 && (flags & TH_ACK)))\n                 return 0;\n \n         if (opt_len != 24) {\n@@ -236,76 +236,92 @@ mp_join_print(netdissect_options *ndo,\n         return 1;\n }\n \n-static u_int mp_dss_len(const  struct mp_dss *m, int csum)\n-{\n-        u_int len;\n-\n-        len = 4;\n-        if (m->flags & MP_DSS_A) {\n-                /* Ack present - 4 or 8 octets */\n-                len += (m->flags & MP_DSS_a) ? 8 : 4;\n-        }\n-        if (m->flags & MP_DSS_M) {\n-                /*\n-                 * Data Sequence Number (DSN), Subflow Sequence Number (SSN),\n-                 * Data-Level Length present, and Checksum possibly present.\n-                 * All but the Checksum are 10 bytes if the m flag is\n-                 * clear (4-byte DSN) and 14 bytes if the m flag is set\n-                 * (8-byte DSN).\n-                 */\n-                len += (m->flags & MP_DSS_m) ? 14 : 10;\n-\n-                /*\n-                 * The Checksum is present only if negotiated.\n-                 */\n-                if (csum)\n-                        len += 2;\n-\t}\n-\treturn len;\n-}\n-\n static int\n mp_dss_print(netdissect_options *ndo,\n              const u_char *opt, u_int opt_len, u_char flags)\n {\n         const struct mp_dss *mdss = (const struct mp_dss *) opt;\n \n-        if ((opt_len != mp_dss_len(mdss, 1) &&\n-             opt_len != mp_dss_len(mdss, 0)) || flags & TH_SYN)\n+        /* We need the flags, at a minimum. */\n+        if (opt_len < 4)\n+                return 0;\n+\n+        if (flags & TH_SYN)\n                 return 0;\n \n         if (mdss->flags & MP_DSS_F)\n                 ND_PRINT((ndo, \" fin\"));\n \n         opt += 4;\n+        opt_len -= 4;\n         if (mdss->flags & MP_DSS_A) {\n+                /* Ack present */\n                 ND_PRINT((ndo, \" ack \"));\n+                /*\n+                 * If the a flag is set, we have an 8-byte ack; if it's\n+                 * clear, we have a 4-byte ack.\n+                 */\n                 if (mdss->flags & MP_DSS_a) {\n+                        if (opt_len < 8)\n+                                return 0;\n                         ND_PRINT((ndo, \"%\" PRIu64, EXTRACT_64BITS(opt)));\n                         opt += 8;\n+                        opt_len -= 8;\n                 } else {\n+                        if (opt_len < 4)\n+                                return 0;\n                         ND_PRINT((ndo, \"%u\", EXTRACT_32BITS(opt)));\n                         opt += 4;\n+                        opt_len -= 4;\n                 }\n         }\n \n         if (mdss->flags & MP_DSS_M) {\n+                /*\n+                 * Data Sequence Number (DSN), Subflow Sequence Number (SSN),\n+                 * Data-Level Length present, and Checksum possibly present.\n+                 */\n                 ND_PRINT((ndo, \" seq \"));\n+\t\t/*\n+                 * If the m flag is set, we have an 8-byte NDS; if it's clear,\n+                 * we have a 4-byte DSN.\n+                 */\n                 if (mdss->flags & MP_DSS_m) {\n+                        if (opt_len < 8)\n+                                return 0;\n                         ND_PRINT((ndo, \"%\" PRIu64, EXTRACT_64BITS(opt)));\n                         opt += 8;\n+                        opt_len -= 8;\n                 } else {\n+                        if (opt_len < 4)\n+                                return 0;\n                         ND_PRINT((ndo, \"%u\", EXTRACT_32BITS(opt)));\n                         opt += 4;\n+                        opt_len -= 4;\n                 }\n+                if (opt_len < 4)\n+                        return 0;\n                 ND_PRINT((ndo, \" subseq %u\", EXTRACT_32BITS(opt)));\n                 opt += 4;\n+                opt_len -= 4;\n+                if (opt_len < 2)\n+                        return 0;\n                 ND_PRINT((ndo, \" len %u\", EXTRACT_16BITS(opt)));\n                 opt += 2;\n+                opt_len -= 2;\n \n-                if (opt_len == mp_dss_len(mdss, 1))\n+                /*\n+                 * The Checksum is present only if negotiated.\n+                 * If there are at least 2 bytes left, process the next 2\n+                 * bytes as the Checksum.\n+                 */\n+                if (opt_len >= 2) {\n                         ND_PRINT((ndo, \" csum 0x%x\", EXTRACT_16BITS(opt)));\n+                        opt_len -= 2;\n+                }\n         }\n+        if (opt_len != 0)\n+                return 0;\n         return 1;\n }\n "
        },
        {
          "filename": "tests/TESTLIST",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -558,6 +558,9 @@ isakmpv1-attr-oobr\tisakmpv1-attr-oobr.pcap\t\tisakmpv1-attr-oobr.out\t-v\n # bad packets from Katie Holly\n mlppp-oobr\t\tmlppp-oobr.pcap\t\t\tmlppp-oobr.out\n \n+# bad packets from Kim Gwan Yeong\n+mptcp-dss-oobr\t\tmptcp-dss-oobr.pcap\t\tmptcp-dss-oobr.out\t-v\n+\n # RTP tests\n # fuzzed pcap\n rtp-seg-fault-1  rtp-seg-fault-1.pcap  rtp-seg-fault-1.out  -v -T rtp"
        },
        {
          "filename": "tests/mptcp-dss-oobr.out",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+IP (tos 0x10, ttl 64, id 39991, offset 0, flags [DF], proto TCP (6), length 60)\n+    127.0.0.1.57370 > 127.0.0.1.23: Flags [S], seq 1736820995, win 32792, options [mss 16396,sackOK,TS val 597120308 ecr 0,mptcp dss[bad opt]>"
        },
        {
          "filename": "tests/mptcp-dss-oobr.pcap",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "94675fce171e2a3b4e0197c5ec2deeaa51a58af9",
            "date": "2025-01-20T14:01:45Z",
            "author_login": "infrastation"
          },
          {
            "sha": "09512cfc01958a37f67951bf7b6e00d52ed1e12e",
            "date": "2025-01-20T13:59:44Z",
            "author_login": "infrastation"
          },
          {
            "sha": "584c7c4c7feb614da42c9de867e03cc7fcdb2723",
            "date": "2025-01-17T11:11:13Z",
            "author_login": "fxlb"
          },
          {
            "sha": "05a263a5418a9e5b971509c486246eb0913c8aea",
            "date": "2025-01-12T21:05:02Z",
            "author_login": "fxlb"
          },
          {
            "sha": "9aee9964aaee40750acde45f838f48eb8f95fbe3",
            "date": "2025-01-09T15:35:53Z",
            "author_login": "fxlb"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-125",
    "description": "The MPTCP parser in tcpdump before 4.9.2 has a buffer over-read in print-mptcp.c, several functions.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-09-14T06:29:02.717",
    "last_modified": "2024-11-21T03:10:47.167",
    "fix_date": "2017-06-12T22:04:18Z"
  },
  "references": [
    {
      "url": "http://www.debian.org/security/2017/dsa-3971",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1039307",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.tcpdump.org/tcpdump-changes.txt",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHEA-2018:0705",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/the-tcpdump-group/tcpdump/commit/4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201709-23",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://support.apple.com/HT208221",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.debian.org/security/2017/dsa-3971",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "http://www.securitytracker.com/id/1039307",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://www.tcpdump.org/tcpdump-changes.txt",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHEA-2018:0705",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/the-tcpdump-group/tcpdump/commit/4c3aee4bb0294c232d56b6d34e9eeb74f630fe8c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201709-23",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://support.apple.com/HT208221",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:07.372240",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "tcpdump",
    "owner": "the-tcpdump-group",
    "created_at": "2013-04-14T21:46:15Z",
    "updated_at": "2025-01-25T16:42:48Z",
    "pushed_at": "2025-01-21T11:51:24Z",
    "size": 27747,
    "stars": 2799,
    "forks": 861,
    "open_issues": 113,
    "watchers": 2799,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "tcpdump-3.5",
      "tcpdump-3.6",
      "tcpdump-3.7",
      "tcpdump-3.8",
      "tcpdump-3.9",
      "tcpdump-4.0",
      "tcpdump-4.1",
      "tcpdump-4.2",
      "tcpdump-4.3",
      "tcpdump-4.4",
      "tcpdump-4.5",
      "tcpdump-4.6",
      "tcpdump-4.7",
      "tcpdump-4.8",
      "tcpdump-4.9",
      "tcpdump-4.99"
    ],
    "languages": {
      "C": 3548123,
      "CMake": 76892,
      "Roff": 66849,
      "Shell": 50525,
      "M4": 31504,
      "Perl": 29240,
      "Makefile": 14259,
      "Awk": 4120,
      "GDB": 660
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:34:03.331448"
  }
}