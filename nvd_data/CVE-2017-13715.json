{
  "cve_id": "CVE-2017-13715",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "a6e544b0a88b53114bfa5a57e21b7be7a8dfc9d0",
    "related_commits": [
      "a6e544b0a88b53114bfa5a57e21b7be7a8dfc9d0",
      "a6e544b0a88b53114bfa5a57e21b7be7a8dfc9d0"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "a6e544b0a88b53114bfa5a57e21b7be7a8dfc9d0",
      "commit_date": "2015-09-01T16:24:26Z",
      "author": {
        "login": "tomratbert",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "flow_dissector: Jump to exit code in __skb_flow_dissect",
        "length": 411,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 51,
        "additions": 25,
        "deletions": 26
      },
      "files": [
        {
          "filename": "net/core/flow_dissector.c",
          "status": "modified",
          "additions": 25,
          "deletions": 26,
          "patch": "@@ -130,6 +130,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \tstruct flow_dissector_key_tags *key_tags;\n \tstruct flow_dissector_key_keyid *key_keyid;\n \tu8 ip_proto = 0;\n+\tbool ret = false;\n \n \tif (!data) {\n \t\tdata = skb->data;\n@@ -171,7 +172,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n ip:\n \t\tiph = __skb_header_pointer(skb, nhoff, sizeof(_iph), data, hlen, &_iph);\n \t\tif (!iph || iph->ihl < 5)\n-\t\t\treturn false;\n+\t\t\tgoto out_bad;\n \t\tnhoff += iph->ihl * 4;\n \n \t\tip_proto = iph->protocol;\n@@ -197,7 +198,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n ipv6:\n \t\tiph = __skb_header_pointer(skb, nhoff, sizeof(_iph), data, hlen, &_iph);\n \t\tif (!iph)\n-\t\t\treturn false;\n+\t\t\tgoto out_bad;\n \n \t\tip_proto = iph->nexthdr;\n \t\tnhoff += sizeof(struct ipv6hdr);\n@@ -234,7 +235,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \n \t\tvlan = __skb_header_pointer(skb, nhoff, sizeof(_vlan), data, hlen, &_vlan);\n \t\tif (!vlan)\n-\t\t\treturn false;\n+\t\t\tgoto out_bad;\n \n \t\tif (skb_flow_dissector_uses_key(flow_dissector,\n \t\t\t\t\t\tFLOW_DISSECTOR_KEY_VLANID)) {\n@@ -256,7 +257,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \t\t} *hdr, _hdr;\n \t\thdr = __skb_header_pointer(skb, nhoff, sizeof(_hdr), data, hlen, &_hdr);\n \t\tif (!hdr)\n-\t\t\treturn false;\n+\t\t\tgoto out_bad;\n \t\tproto = hdr->proto;\n \t\tnhoff += PPPOE_SES_HLEN;\n \t\tswitch (proto) {\n@@ -265,7 +266,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \t\tcase htons(PPP_IPV6):\n \t\t\tgoto ipv6;\n \t\tdefault:\n-\t\t\treturn false;\n+\t\t\tgoto out_bad;\n \t\t}\n \t}\n \tcase htons(ETH_P_TIPC): {\n@@ -275,9 +276,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \t\t} *hdr, _hdr;\n \t\thdr = __skb_header_pointer(skb, nhoff, sizeof(_hdr), data, hlen, &_hdr);\n \t\tif (!hdr)\n-\t\t\treturn false;\n-\t\tkey_basic->n_proto = proto;\n-\t\tkey_control->thoff = (u16)nhoff;\n+\t\t\tgoto out_bad;\n \n \t\tif (skb_flow_dissector_uses_key(flow_dissector,\n \t\t\t\t\t\tFLOW_DISSECTOR_KEY_TIPC_ADDRS)) {\n@@ -287,7 +286,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \t\t\tkey_addrs->tipcaddrs.srcnode = hdr->srcnode;\n \t\t\tkey_control->addr_type = FLOW_DISSECTOR_KEY_TIPC_ADDRS;\n \t\t}\n-\t\treturn true;\n+\t\tgoto out_good;\n \t}\n \n \tcase htons(ETH_P_MPLS_UC):\n@@ -297,7 +296,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \t\thdr = __skb_header_pointer(skb, nhoff, sizeof(_hdr), data,\n \t\t\t\t\t   hlen, &_hdr);\n \t\tif (!hdr)\n-\t\t\treturn false;\n+\t\t\tgoto out_bad;\n \n \t\tif ((ntohl(hdr[0].entry) & MPLS_LS_LABEL_MASK) >>\n \t\t     MPLS_LS_LABEL_SHIFT == MPLS_LABEL_ENTROPY) {\n@@ -310,21 +309,17 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \t\t\t\t\thtonl(MPLS_LS_LABEL_MASK);\n \t\t\t}\n \n-\t\t\tkey_basic->n_proto = proto;\n-\t\t\tkey_basic->ip_proto = ip_proto;\n-\t\t\tkey_control->thoff = (u16)nhoff;\n-\n-\t\t\treturn true;\n+\t\t\tgoto out_good;\n \t\t}\n \n-\t\treturn true;\n+\t\tgoto out_good;\n \t}\n \n \tcase htons(ETH_P_FCOE):\n \t\tkey_control->thoff = (u16)(nhoff + FCOE_HEADER_LEN);\n \t\t/* fall through */\n \tdefault:\n-\t\treturn false;\n+\t\tgoto out_bad;\n \t}\n \n ip_proto_again:\n@@ -337,7 +332,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \n \t\thdr = __skb_header_pointer(skb, nhoff, sizeof(_hdr), data, hlen, &_hdr);\n \t\tif (!hdr)\n-\t\t\treturn false;\n+\t\t\tgoto out_bad;\n \t\t/*\n \t\t * Only look inside GRE if version zero and no\n \t\t * routing\n@@ -357,7 +352,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \t\t\t\t\t\t     data, hlen, &_keyid);\n \n \t\t\tif (!keyid)\n-\t\t\t\treturn false;\n+\t\t\t\tgoto out_bad;\n \n \t\t\tif (skb_flow_dissector_uses_key(flow_dissector,\n \t\t\t\t\t\t\tFLOW_DISSECTOR_KEY_GRE_KEYID)) {\n@@ -378,7 +373,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \t\t\t\t\t\t   sizeof(_eth),\n \t\t\t\t\t\t   data, hlen, &_eth);\n \t\t\tif (!eth)\n-\t\t\t\treturn false;\n+\t\t\t\tgoto out_bad;\n \t\t\tproto = eth->h_proto;\n \t\t\tnhoff += sizeof(*eth);\n \t\t}\n@@ -395,7 +390,7 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \t\topthdr = __skb_header_pointer(skb, nhoff, sizeof(_opthdr),\n \t\t\t\t\t      data, hlen, &_opthdr);\n \t\tif (!opthdr)\n-\t\t\treturn false;\n+\t\t\tgoto out_bad;\n \n \t\tip_proto = opthdr[0];\n \t\tnhoff += (opthdr[1] + 1) << 3;\n@@ -415,10 +410,6 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \t\tbreak;\n \t}\n \n-\tkey_basic->n_proto = proto;\n-\tkey_basic->ip_proto = ip_proto;\n-\tkey_control->thoff = (u16)nhoff;\n-\n \tif (skb_flow_dissector_uses_key(flow_dissector,\n \t\t\t\t\tFLOW_DISSECTOR_KEY_PORTS)) {\n \t\tkey_ports = skb_flow_dissector_target(flow_dissector,\n@@ -428,7 +419,15 @@ bool __skb_flow_dissect(const struct sk_buff *skb,\n \t\t\t\t\t\t\tdata, hlen);\n \t}\n \n-\treturn true;\n+out_good:\n+\tret = true;\n+\n+out_bad:\n+\tkey_basic->n_proto = proto;\n+\tkey_basic->ip_proto = ip_proto;\n+\tkey_control->thoff = (u16)nhoff;\n+\n+\treturn ret;\n }\n EXPORT_SYMBOL(__skb_flow_dissect);\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-665",
    "description": "The __skb_flow_dissect function in net/core/flow_dissector.c in the Linux kernel before 4.3 does not ensure that n_proto, ip_proto, and thoff are initialized, which allows remote attackers to cause a denial of service (system crash) or possibly execute arbitrary code via a single crafted MPLS packet.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2017-08-29T01:35:13.453",
    "last_modified": "2024-11-21T03:11:29.750",
    "fix_date": "2015-09-01T16:24:26Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a6e544b0a88b53114bfa5a57e21b7be7a8dfc9d0",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2017/q3/345",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/100517",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/a6e544b0a88b53114bfa5a57e21b7be7a8dfc9d0",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=a6e544b0a88b53114bfa5a57e21b7be7a8dfc9d0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2017/q3/345",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/100517",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/a6e544b0a88b53114bfa5a57e21b7be7a8dfc9d0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:05.118910",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}