{
  "cve_id": "CVE-2017-14032",
  "github_data": {
    "repository": "ARMmbed/mbedtls",
    "fix_commit": "31458a18788b0cf0b722acda9bb2f2fe13a3fb32",
    "related_commits": [
      "31458a18788b0cf0b722acda9bb2f2fe13a3fb32",
      "d15795acd5074e0b44e71f7ede8bdfe1b48591fc",
      "31458a18788b0cf0b722acda9bb2f2fe13a3fb32",
      "d15795acd5074e0b44e71f7ede8bdfe1b48591fc"
    ],
    "patch_url": "https://github.com/ARMmbed/mbedtls/commit/31458a18788b0cf0b722acda9bb2f2fe13a3fb32.patch",
    "fix_commit_details": {
      "sha": "31458a18788b0cf0b722acda9bb2f2fe13a3fb32",
      "commit_date": "2017-06-26T08:11:49Z",
      "author": {
        "login": "mpg",
        "type": "User",
        "stats": {
          "total_commits": 4915,
          "average_weekly_commits": 7.7037617554858935,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 419
        }
      },
      "commit_message": {
        "title": "Only return VERIFY_FAILED from a single point",
        "length": 141,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 28,
        "additions": 22,
        "deletions": 6
      },
      "files": [
        {
          "filename": "ChangeLog",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -6,6 +6,9 @@ Changes\n    * Certificate verification functions now set flags to -1 in case the full\n      chain was not verified due to an internal error (including in the verify\n      callback) or chain length limitations.\n+   * With authmode set to optional, handshake is now aborted if the\n+     verification of the peer's certificate failed due to an overlong chain or\n+     a fatal error in the vrfy callback.\n \n = mbed TLS 2.5.1 released 2017-06-21\n "
        },
        {
          "filename": "include/mbedtls/error.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -71,7 +71,7 @@\n  * Name      ID  Nr of Errors\n  * PEM       1   9\n  * PKCS#12   1   4 (Started from top)\n- * X509      2   19\n+ * X509      2   20\n  * PKCS5     2   4 (Started from top)\n  * DHM       3   9\n  * PK        3   14 (Started from top)"
        },
        {
          "filename": "include/mbedtls/ssl.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1052,7 +1052,7 @@ void mbedtls_ssl_conf_authmode( mbedtls_ssl_config *conf, int authmode );\n  *\n  *                 If set, the verify callback is called for each\n  *                 certificate in the chain. For implementation\n- *                 information, please see \\c x509parse_verify()\n+ *                 information, please see \\c mbedtls_x509_crt_verify()\n  *\n  * \\param conf     SSL configuration\n  * \\param f_vrfy   verification function"
        },
        {
          "filename": "include/mbedtls/x509.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -76,6 +76,7 @@\n #define MBEDTLS_ERR_X509_ALLOC_FAILED                     -0x2880  /**< Allocation of memory failed. */\n #define MBEDTLS_ERR_X509_FILE_IO_ERROR                    -0x2900  /**< Read/write of file failed. */\n #define MBEDTLS_ERR_X509_BUFFER_TOO_SMALL                 -0x2980  /**< Destination buffer is too small. */\n+#define MBEDTLS_ERR_X509_FATAL_ERROR                      -0x3000  /**< A fatal error occured, eg the chain is too long or the vrfy callback failed. */\n /* \\} name */\n \n /**"
        },
        {
          "filename": "include/mbedtls/x509_crt.h",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -267,7 +267,13 @@ int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,\n  *\n  *                 All flags left after returning from the callback\n  *                 are also returned to the application. The function should\n- *                 return 0 for anything but a fatal error.\n+ *                 return 0 for anything (including invalid certificates)\n+ *                 other than fatal error, as a non-zero return code\n+ *                 immediately aborts the verification process. For fatal\n+ *                 errors, a specific error code should be used (different\n+ *                 from MBEDTLS_ERR_X509_CERT_VERIFY_FAILED which should not\n+ *                 be returned at this point), or MBEDTLS_ERR_X509_FATAL_ERROR\n+ *                 can be used if no better code is available.\n  *\n  * \\note           In case verification failed, the results can be displayed\n  *                 using \\c mbedtls_x509_crt_verify_info()"
        },
        {
          "filename": "library/error.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -480,6 +480,8 @@ void mbedtls_strerror( int ret, char *buf, size_t buflen )\n             mbedtls_snprintf( buf, buflen, \"X509 - Read/write of file failed\" );\n         if( use_ret == -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL) )\n             mbedtls_snprintf( buf, buflen, \"X509 - Destination buffer is too small\" );\n+        if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )\n+            mbedtls_snprintf( buf, buflen, \"X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed\" );\n #endif /* MBEDTLS_X509_USE_C || MBEDTLS_X509_CREATE_C */\n         // END generated code\n "
        },
        {
          "filename": "library/x509_crt.c",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -2057,8 +2057,8 @@ static int x509_crt_verify_child(\n     /* path_cnt is 0 for the first intermediate CA */\n     if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )\n     {\n-        *flags |= MBEDTLS_X509_BADCERT_NOT_TRUSTED;\n-        return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );\n+        /* return immediately as the goal is to avoid unbounded recursion */\n+        return( MBEDTLS_ERR_X509_FATAL_ERROR );\n     }\n \n     if( mbedtls_x509_time_is_past( &child->valid_to ) )\n@@ -2310,6 +2310,10 @@ int mbedtls_x509_crt_verify_with_profile( mbedtls_x509_crt *crt,\n     }\n \n exit:\n+    /* prevent misuse of the vrfy callback */\n+    if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )\n+        ret = MBEDTLS_ERR_X509_FATAL_ERROR;\n+\n     if( ret != 0 )\n     {\n         *flags = (uint32_t) -1;"
        },
        {
          "filename": "tests/suites/test_suite_x509parse.data",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1204,7 +1204,7 @@ mbedtls_x509_crt_verify_max:\"data_files/test-ca2.crt\":\"data_files/dir-maxpath\":M\n \n X509 CRT verify long chain (max intermediate CA + 1)\n depends_on:MBEDTLS_SHA256_C:MBEDTLS_ECDSA_C:MBEDTLS_ECP_DP_SECP256R1_ENABLED\n-mbedtls_x509_crt_verify_max:\"data_files/dir-maxpath/00.crt\":\"data_files/dir-maxpath\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_CERT_VERIFY_FAILED:-1\n+mbedtls_x509_crt_verify_max:\"data_files/dir-maxpath/00.crt\":\"data_files/dir-maxpath\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_FATAL_ERROR:-1\n \n X509 CRT verify chain #1 (zero pathlen intermediate)\n depends_on:MBEDTLS_SHA256_C:MBEDTLS_RSA_C"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "99d82166a33ac0f60e4a2dd8c649758aa33da648",
            "date": "2025-01-14T10:46:20Z",
            "author_login": "ronald-cron-arm"
          },
          {
            "sha": "dff650eb347680ab1e4bfa2094ec663079c0bfce",
            "date": "2025-01-09T13:28:19Z",
            "author_login": "valeriosetti"
          },
          {
            "sha": "ba8500b6b97d1c36ad4cb05ef51143b4989d8a9c",
            "date": "2025-01-09T13:27:42Z",
            "author_login": "valeriosetti"
          },
          {
            "sha": "3533e9b7611ff9573bbce98b8bd0a8e3c594ba5d",
            "date": "2025-01-09T13:21:30Z",
            "author_login": "valeriosetti"
          },
          {
            "sha": "67ba14c0bafd3de423fa0d89feb5f8eed4d4322c",
            "date": "2025-01-13T15:05:29Z",
            "author_login": "ronald-cron-arm"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-287",
    "description": "ARM mbed TLS before 1.3.21 and 2.x before 2.1.9, if optional authentication is configured, allows remote attackers to bypass peer authentication via an X.509 certificate chain with many intermediates. NOTE: although mbed TLS was formerly known as PolarSSL, the releases shipped with the PolarSSL name are not affected.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-08-30T20:29:00.337",
    "last_modified": "2024-11-21T03:12:01.000",
    "fix_date": "2017-06-26T08:11:49Z"
  },
  "references": [
    {
      "url": "http://www.debian.org/security/2017/dsa-3967",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://bugs.debian.org/873557",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ARMmbed/mbedtls/commit/31458a18788b0cf0b722acda9bb2f2fe13a3fb32",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ARMmbed/mbedtls/commit/d15795acd5074e0b44e71f7ede8bdfe1b48591fc",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://tls.mbed.org/tech-updates/security-advisories/mbedtls-security-advisory-2017-02",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.debian.org/security/2017/dsa-3967",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugs.debian.org/873557",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ARMmbed/mbedtls/commit/31458a18788b0cf0b722acda9bb2f2fe13a3fb32",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ARMmbed/mbedtls/commit/d15795acd5074e0b44e71f7ede8bdfe1b48591fc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://tls.mbed.org/tech-updates/security-advisories/mbedtls-security-advisory-2017-02",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:07.333575",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mbedtls",
    "owner": "ARMmbed",
    "created_at": "2012-11-14T13:13:13Z",
    "updated_at": "2025-01-14T13:10:56Z",
    "pushed_at": "2025-01-14T13:06:01Z",
    "size": 130331,
    "stars": 5642,
    "forks": 2629,
    "open_issues": 1514,
    "watchers": 5642,
    "has_security_policy": false,
    "default_branch": "development",
    "protected_branches": [
      "archive/Remove__CHECK_PARAMS_option",
      "archive/armv8_crypto_extensions",
      "archive/baremetal",
      "archive/baremetal-test",
      "archive/better-cf-padding-checks",
      "archive/code",
      "archive/config-header-check-2.7",
      "archive/datagram_packing_1919_CI_failure_debug"
    ],
    "languages": {
      "C": 4451056,
      "Shell": 1260520,
      "Python": 231979,
      "Perl": 101304,
      "Makefile": 69702,
      "CMake": 64740,
      "GDB": 2250,
      "Batchfile": 2004,
      "Tcl": 110
    },
    "commit_activity": {
      "total_commits_last_year": 3083,
      "avg_commits_per_week": 59.28846153846154,
      "days_active_last_year": 276
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:27:35.646827"
  }
}