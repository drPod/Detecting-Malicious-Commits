{
  "cve_id": "CVE-2017-15051",
  "github_data": {
    "repository": "nilsteampassnet/TeamPass",
    "fix_commit": "5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f",
    "related_commits": [
      "5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f",
      "5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f",
      "commit_date": "2017-09-30T11:07:36Z",
      "author": {
        "login": "nilsteampassnet",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "2.1.27",
        "length": 21,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 353,
        "additions": 244,
        "deletions": 109
      },
      "files": [
        {
          "filename": "index.php",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -177,7 +177,9 @@\n \n // Load user languages files\n if (in_array($session_user_language, $languagesList) === true) {\n-    require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$session_user_language.'.php';\n+    if (file_exists($SETTINGS['cpassman_dir'].'/includes/language/'.$session_user_language.'.php') === true) {\n+        require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$session_user_language.'.php';\n+    }\n } else {\n     $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n     include $SETTINGS['cpassman_dir'].'/error.php';"
        },
        {
          "filename": "items.load.php",
          "status": "modified",
          "additions": 52,
          "deletions": 35,
          "patch": "@@ -290,7 +290,9 @@ function(data) {\n                     }\n \n                     // store the categories to be displayed\n-                    $(\"#display_categories\").val(data.displayCategories);\n+                    if (data.displayCategories !== undefined) {\n+                        $(\"#display_categories\").val(data.displayCategories);\n+                    }\n \n                     // store type of access on folder\n                     $(\"#access_level\").val(data.access_level);\n@@ -350,7 +352,7 @@ function(data) {\n                         $(\"#query_next_start\").val(data.list_to_be_continued);\n \n                         // display Categories if needed\n-                        if ($(\".tr_fields\") != undefined && data.displayCategories != \"\") {\n+                        if ($(\".tr_fields\") !== undefined && data.displayCategories !== undefined && data.displayCategories !== \"\") {\n                             var liste = data.displayCategories.split(';');\n                             for (var i=0; i<liste.length; i++) {\n                                 $(\".itemCatName_\"+liste[i]+\", #newItemCatName_\"+liste[i]+\", #editItemCatName_\"+liste[i]).show();\n@@ -382,7 +384,7 @@ function(data) {\n                         $(\"#query_next_start\").val(data.list_to_be_continued);\n \n                         // display Categories if needed\n-                        if ($(\".tr_fields\") != undefined && data.displayCategories != \"\") {\n+                        if ($(\".tr_fields\") != undefined && data.displayCategories !== undefined && data.displayCategories != \"\") {\n                             var liste = data.displayCategories.split(';');\n                             for (var i=0; i<liste.length; i++) {\n                                 $(\".itemCatName_\"+liste[i]+\", #newItemCatName_\"+liste[i]+\", #editItemCatName_\"+liste[i]).show();\n@@ -420,10 +422,10 @@ function(data) {\n                                 $.post(\n                                     \"sources/items.queries.php\",\n                                     {\n-                                        type     : \"move_item\",\n-                                        item_id : ui.draggable.attr(\"id\"),\n+                                        type      : \"move_item\",\n+                                        item_id   : ui.draggable.attr(\"id\"),\n                                         folder_id : $(this).attr(\"id\").substring(4),\n-                                        key        : \"<?php echo $_SESSION['key']; ?>\"\n+                                        key       : \"<?php echo $_SESSION['key']; ?>\"\n                                     },\n                                     function(data) {\n                                         //increment / decrement number of items in folders\n@@ -926,34 +928,40 @@ function(data) {\n                     }\n \n                     //check if format error\n-                    if (data.error == \"ERR_JSON_FORMAT\") {\n+                    if (data.error === \"ERR_JSON_FORMAT\") {\n                         $(\"#div_loading\").addClass(\"hidden\");\n-                        $(\"#edit_show_error\").html(data.error + ' ERROR (JSON is broken)!!!!!');\n-                        $(\"#edit_show_error\").show();\n-                    } else if (data.error == \"ERR_KEY_NOT_CORRECT\") {\n+                        $(\"#edit_show_error\")\n+                            .html(data.error + ' ERROR (JSON is broken)!!!!!')\n+                            .show();\n+                    } else if (data.error === \"ERR_KEY_NOT_CORRECT\") {\n                         $(\"#div_loading\").addClass(\"hidden\");\n-                        $(\"#edit_show_error\").html('Key verification for Query is not correct!');\n-                        $(\"#edit_show_error\").show();\n+                        $(\"#edit_show_error\")\n+                            .html('Key verification for Query is not correct!')\n+                            .show();\n                         LoadingPage();\n-                    }else if (data.error == \"ERR_ENCRYPTION_NOT_CORRECT\") {\n+                    }else if (data.error === \"ERR_ENCRYPTION_NOT_CORRECT\") {\n                         $(\"#div_loading\").addClass(\"hidden\");\n-                        $(\"#edit_show_error\").html('Item password could not be correctly encrypted!');\n-                        $(\"#edit_show_error\").show();\n+                        $(\"#edit_show_error\")\n+                            .html('Item password could not be correctly encrypted!')\n+                            .show();\n                         LoadingPage();\n-                    } else if (data.error == \"ERR_PWD_TOO_LONG\") {\n+                    } else if (data.error === \"ERR_PWD_TOO_LONG\") {\n                         $(\"#div_loading\").addClass(\"hidden\");\n-                        $(\"#edit_show_error\").html('<?php echo addslashes($LANG['error_pw_too_long']); ?>');\n-                        $(\"#edit_show_error\").show();\n+                        $(\"#edit_show_error\")\n+                            .html('<?php echo addslashes($LANG['error_pw_too_long']); ?>')\n+                            .show();\n                         LoadingPage();\n-                    } else if (data.error == \"ERR_NOT_ALLOWED_TO_EDIT\") {\n+                    } else if (data.error === \"ERR_NOT_ALLOWED_TO_EDIT\") {\n                         $(\"#div_formulaire_saisi\").dialog(\"open\");\n-                        $(\"#new_show_error\").html('User not allowed to edit this Item!');\n-                        $(\"#new_show_error\").show();\n+                        $(\"#new_show_error\")\n+                            .html('User not allowed to edit this Item!')\n+                            .show();\n                         LoadingPage();\n-                    } else if (data.error != \"\") {\n+                    } else if (data.error !== \"\") {\n                         $(\"#div_loading\").addClass(\"hidden\");\n-                        $(\"#edit_show_error\").html('<?php echo addslashes($LANG['error_not_allowed_to']); ?>');\n-                        $(\"#edit_show_error\").show();\n+                        $(\"#edit_show_error\")\n+                            .html('<?php echo addslashes($LANG['error_not_allowed_to']); ?>')\n+                            .show();\n                         LoadingPage();\n                     } else {\n                         //refresh item in list\n@@ -1268,19 +1276,23 @@ function AfficherDetailsItem(id, salt_key_required, expired_item, restricted, di\n             return;\n         } else {\n             $(\"#timestamp_item_displayed\").val(\"\");\n+            var data = {\n+                \"id\" : id,\n+                \"folder_id\" : $('#hid_cat').val(),\n+                \"salt_key_required\" : $('#recherche_group_pf').val(),\n+                \"salt_key_set\" : $('#personal_sk_set').val(),\n+                \"expired_item\" : expired_item,\n+                \"restricted\" : restricted,\n+                \"page\" : \"items\"\n+            };\n+\n             //Send query\n             $.post(\n                 \"sources/items.queries.php\",\n                 {\n-                    type                : 'show_details_item',\n-                    id                  : id,\n-                    folder_id           : $('#hid_cat').val(),\n-                    salt_key_required   : $('#recherche_group_pf').val(),\n-                    salt_key_set        : $('#personal_sk_set').val(),\n-                    expired_item        : expired_item,\n-                    restricted          : restricted,\n-                    page                : \"items\",\n-                    key                 : \"<?php echo $_SESSION['key']; ?>\"\n+                    type : 'show_details_item',\n+                    data : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n+                    key  : \"<?php echo $_SESSION['key']; ?>\"\n                 },\n                 function(data_raw) {\n                     //decrypt data\n@@ -1589,7 +1601,7 @@ function(data_raw) {\n                         // continue loading data\n                         showDetailsStep2(id, param);\n \n-                    } else if (data.show_details == \"1\" && data.show_detail_option == \"2\") {\n+                    } else if (data.show_details === \"1\" && data.show_detail_option === \"2\") {\n                         $(\"#item_details_nok\").addClass(\"hidden\");\n                         $(\"#item_details_ok\").addClass(\"hidden\");\n                         $(\"#item_details_expired_full\").show();\n@@ -1658,6 +1670,11 @@ function(data) {\n                 return;\n             }\n \n+            if (data.error !== \"\") {\n+                $(\"#div_dialog_message_text\").html(data.error_text);\n+                $(\"#div_dialog_message\").show();\n+            }\n+\n             $(\"#item_history_log\").html(htmlspecialchars_decode(data.history));\n             $(\"#edit_past_pwds\").attr('title', htmlspecialchars_decode(data.history_of_pwds));\n             $(\"#edit_past_pwds_div\").html(htmlspecialchars_decode(data.history_of_pwds));\n@@ -2601,7 +2618,7 @@ function(data) {\n                     $.post(\n                         \"sources/items.queries.php\",\n                         {\n-                            type    : \"update_rep\",\n+                            type    : \"update_folder\",\n                             data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                             key        : \"<?php echo $_SESSION['key']; ?>\"\n                         },"
        },
        {
          "filename": "sources/core.php",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -71,7 +71,9 @@ function redirect($url)\n if (isset($SETTINGS_EXT['pwComplexity']) === false) {\n     // Pw complexity levels\n     if (isset($_SESSION['user_language']) === true && $_SESSION['user_language'] !== \"0\") {\n-        require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\n+        if (file_exists($SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php') === true) {\n+            require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\n+        }\n         $SETTINGS_EXT['pwComplexity'] = array(\n             0=>array(0, $LANG['complex_level0']),\n             25=>array(25, $LANG['complex_level1']),"
        },
        {
          "filename": "sources/items.queries.php",
          "status": "modified",
          "additions": 162,
          "deletions": 71,
          "patch": "@@ -129,10 +129,10 @@\n             );\n \n             // Prepare variables\n-            $label = noHTML(htmlspecialchars_decode($dataReceived['label']));\n-            $url = htmlspecialchars_decode($dataReceived['url']);\n+            $label = filter_var(htmlspecialchars_decode($dataReceived['label']), FILTER_SANITIZE_STRING);\n+            $url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_STRING);\n             $pw = htmlspecialchars_decode($dataReceived['pw']);\n-            $login = htmlspecialchars_decode($dataReceived['login']);\n+            $login = filter_var(htmlspecialchars_decode($dataReceived['login']), FILTER_SANITIZE_STRING);\n             $tags = htmlspecialchars_decode($dataReceived['tags']);\n \n             // is author authorized to create in this folder\n@@ -481,12 +481,12 @@\n \n             if (count($dataReceived) > 0) {\n                 // Prepare variables\n-                $label = noHTML(($dataReceived['label']));\n-                $url = noHTML(htmlspecialchars_decode($dataReceived['url']));\n+                $label = filter_var(($dataReceived['label']), FILTER_SANITIZE_STRING);\n+                $url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_STRING);\n                 $pw = $original_pw = $sentPw = htmlspecialchars_decode($dataReceived['pw']);\n-                $login = noHTML(htmlspecialchars_decode($dataReceived['login']));\n+                $login = filter_var(htmlspecialchars_decode($dataReceived['login']), FILTER_SANITIZE_STRING);\n                 $tags = htmlspecialchars_decode($dataReceived['tags']);\n-                $email = noHTML(htmlspecialchars_decode($dataReceived['email']));\n+                $email = filter_var(htmlspecialchars_decode($dataReceived['email']), FILTER_SANITIZE_STRING);\n \n                 // perform a check in case of Read-Only user creating an item in his PF\n                 if ($_SESSION['user_read_only'] === true && (!in_array($dataReceived['categorie'], $_SESSION['personal_folders']) || $dataReceived['is_pf'] !== '1')) {\n@@ -533,10 +533,11 @@\n                         && $restrictionActive === false\n                     )\n                     ||\n-                    (@in_array(\n-                        $post_id,\n-                        $_SESSION['list_folders_limited'][$post_folder_id]\n-                    ))\n+                    (null !== $post_folder_id\n+                    && isset($_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n+                    && in_array($post_id, $_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n+                    && $post_restricted === '1'\n+                    && $restrictionActive === false)\n                 ) {\n                     // Is pwd empty?\n                     if (empty($pw) && isset($_SESSION['user_settings']['create_item_without_password']) && $_SESSION['user_settings']['create_item_without_password'] !== '1') {\n@@ -1072,16 +1073,15 @@\n                 && (!in_array($post_source_id, $_SESSION['personal_folders'])\n                     || !in_array($post_dest_id, $_SESSION['personal_folders']))\n             ) {\n-                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"2'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n+                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                 echo $returnValues;\n                 break;\n             }\n \n             $returnValues = $pw = \"\";\n             $is_perso = 0;\n \n-            if (null !== $post_item_id\n-                && empty($post_item_id) === false\n+            if (empty($post_item_id) === false\n                 && empty($post_dest_id) === false\n             ) {\n                 // load the original record into an array\n@@ -1090,6 +1090,15 @@\n                     WHERE id=%i\",\n                     $post_item_id\n                 );\n+\n+                // Check if the folder where this item is, is accessible to the user\n+                if (in_array($originalRecord['id_tree'], $_SESSION['groupes_visibles'])) {\n+                    $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n+                    echo $returnValues;\n+                    break;\n+                }\n+\n+                // Load the destination folder record into an array\n                 $dataDestination = DB::queryfirstrow(\n                     \"SELECT personal_folder FROM \".prefix_table(\"nested_tree\").\"\n                     WHERE id=%i\",\n@@ -1303,6 +1312,17 @@\n                 break;\n             }\n \n+            // Decrypt and retreive data in JSON format\n+            $dataReceived = prepareExchangedData($post_data, \"decode\");\n+            // Init post variables\n+            $post_id = filter_var(htmlspecialchars_decode($dataReceived['id']), FILTER_SANITIZE_NUMBER_INT);\n+            $post_folder_id = filter_var(htmlspecialchars_decode($dataReceived['folder_id']), FILTER_SANITIZE_NUMBER_INT);\n+            $post_salt_key_required = filter_var(htmlspecialchars_decode($dataReceived['salt_key_required']), FILTER_SANITIZE_STRING);\n+            $post_salt_key_set = filter_var(htmlspecialchars_decode($dataReceived['salt_key_set']), FILTER_SANITIZE_STRING);\n+            $post_expired_item = filter_var(htmlspecialchars_decode($dataReceived['expired_item']), FILTER_SANITIZE_STRING);\n+            $post_restricted = filter_var(htmlspecialchars_decode($dataReceived['restricted']), FILTER_SANITIZE_STRING);\n+            $post_page = filter_var(htmlspecialchars_decode($dataReceived['page']), FILTER_SANITIZE_STRING);\n+\n             $arrData = array();\n             // return ID\n             $arrData['id'] = $post_id;\n@@ -1355,6 +1375,7 @@\n             $listNotif = array_filter(explode(\";\", $dataItem['notification']));\n             $listRest = array_filter(explode(\";\", $dataItem['restricted_to']));\n             $listeRestriction = $listNotification = $listNotificationEmails = \"\";\n+            $user_in_restricted_list_of_item = false;\n             $rows = DB::query(\"SELECT id, login, email FROM \".prefix_table(\"users\"));\n             foreach ($rows as $record) {\n                 // Get auhtor\n@@ -1372,6 +1393,9 @@\n                 // Get restriction list for users\n                 if (in_array($record['id'], $listRest)) {\n                     $listeRestriction .= $record['login'].\";\";\n+                    if ($_SESSION['user_id'] === $record['id']) {\n+                        $user_in_restricted_list_of_item = true;\n+                    }\n                 }\n                 // Get notification list for users\n                 if (in_array($record['id'], $listNotif)) {\n@@ -1408,18 +1432,26 @@\n             if (empty($dataItem['restricted_to'])) {\n                 $restrictionActive = false;\n             }\n+\n+\n             // Check if user has a role that is accepted\n-            $rows_tmp = DB::query(\"SELECT role_id FROM \".prefix_table(\"restriction_to_roles\").\" WHERE item_id=%i\", $post_id);\n-            $myTest = 0;\n-            if (in_array($_SESSION['user_id'], $rows_tmp)) {\n-                $myTest = 1;\n+            $rows_tmp = DB::query(\n+                \"SELECT role_id\n+                FROM \".prefix_table(\"restriction_to_roles\").\"\n+                WHERE item_id=%i\",\n+                $post_id\n+            );\n+            foreach ($rows_tmp as $rec_tmp) {\n+                if (in_array($rec_tmp['role_id'], explode(';', $_SESSION['fonction_id']))) {\n+                    $restrictionActive = false;\n+                }\n             }\n \n             // Uncrypt PW\n-            if (null !== filter_input(INPUT_POST, 'salt_key_required', FILTER_SANITIZE_STRING)\n-                && filter_input(INPUT_POST, 'salt_key_required', FILTER_SANITIZE_STRING) === '1'\n-                && null !== filter_input(INPUT_POST, 'salt_key_set', FILTER_SANITIZE_STRING)\n-                && filter_input(INPUT_POST, 'salt_key_set', FILTER_SANITIZE_STRING) === '1'\n+            if (null !== $post_salt_key_required\n+                && $post_salt_key_required === '1'\n+                && null !== $post_salt_key_set\n+                && $post_salt_key_set === '1'\n             ) {\n                 $pw = cryption(\n                     $dataItem['pw'],\n@@ -1442,13 +1474,15 @@\n             }\n \n             // check if item is expired\n-            if (null !== filter_input(INPUT_POST, 'expired_item', FILTER_SANITIZE_STRING)\n-                && filter_input(INPUT_POST, 'expired_item', FILTER_SANITIZE_STRING) === '1'\n+            if (null !== $post_expired_item\n+                && $post_expired_item === '1'\n             ) {\n                 $item_is_expired = true;\n             } else {\n                 $item_is_expired = false;\n             }\n+\n+\n             // check user is admin\n             if ($_SESSION['user_admin'] === '1' && $dataItem['perso'] != 1 && (isset($SETTINGS_EXT['admin_full_right']) && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n                 $arrData['show_details'] = 0;\n@@ -1459,8 +1493,14 @@\n                 (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1' && $dataItem['anyone_can_modify'] === '1' && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && $restrictionActive === false)\n                 ||\n                 (null !== $post_folder_id\n-                    && isset($_SESSION['list_folders_limited'][$post_folder_id])\n-                    && in_array($post_id, $_SESSION['list_folders_limited'][$post_folder_id]))\n+                    && isset($_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n+                    && in_array($post_id, $_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n+                    && $post_restricted === '1'\n+                    && $user_in_restricted_list_of_item === true)\n+                ||\n+                (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1'\n+                    && $restrictionActive === false\n+                )\n             ) {\n                 // Allow show details\n                 $arrData['show_details'] = 1;\n@@ -1626,8 +1666,8 @@\n                 $arrData['categories'] = $arrCatList;\n \n                 // Manage user restriction\n-                if (null !== filter_input(INPUT_POST, 'restricted', FILTER_SANITIZE_STRING)) {\n-                    $arrData['restricted'] = filter_input(INPUT_POST, 'restricted', FILTER_SANITIZE_STRING);\n+                if (null !== $post_restricted) {\n+                    $arrData['restricted'] = $post_restricted;\n                 } else {\n                     $arrData['restricted'] = \"\";\n                 }\n@@ -1724,6 +1764,13 @@\n             // get Item info\n             $dataItem = DB::queryfirstrow(\"SELECT * FROM \".prefix_table(\"items\").\" WHERE id=%i\", $post_id);\n \n+            // Check if the folder where this item is, is accessible to the user\n+            if (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])) {\n+                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n+                echo prepareExchangedData($returnValues, \"encode\");\n+                break;\n+            }\n+\n             // GET Audit trail\n             $history = \"\";\n             $historyOfPws = \"\";\n@@ -1844,7 +1891,8 @@\n                     \"favourite\" => $favourite,\n                     \"files_edit\" => $filesEdit,\n                     \"files_id\" => $files_id,\n-                    \"has_change_proposal\" => DB::count()\n+                    \"has_change_proposal\" => DB::count(),\n+                    \"error\" => \"\"\n                 ),\n                 \"encode\"\n             );\n@@ -1868,6 +1916,21 @@\n                 break;\n             }\n \n+            // Check that user can access this item\n+            $granted = accessToItemIsGranted($post_id);\n+            if ($granted !== true) {\n+                echo prepareExchangedData(array(\"error\" => $granted), \"encode\");\n+                break;\n+            }\n+\n+            // Load item data\n+            $data = DB::queryFirstRow(\n+                \"SELECT id_tree\n+                FROM \".prefix_table(\"items\").\"\n+                WHERE id = %i\",\n+                $post_id\n+            );\n+\n             // delete item consists in disabling it\n             DB::update(\n                 prefix_table(\"items\"),\n@@ -1887,7 +1950,7 @@\n         * CASE\n         * Update a Group\n         */\n-        case \"update_rep\":\n+        case \"update_folder\":\n             // Check KEY and rights\n             if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true) {\n                 $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n@@ -1898,7 +1961,15 @@\n             $dataReceived = prepareExchangedData($post_data, \"decode\");\n \n             // Prepare variables\n-            $title = htmlspecialchars_decode($dataReceived['title']);\n+            $title = filter_var(htmlspecialchars_decode($dataReceived['title']), FILTER_SANITIZE_STRING);\n+            $post_folder_id = filter_var(htmlspecialchars_decode($dataReceived['folder']), FILTER_SANITIZE_NUMBER_INT);\n+\n+            // Check if user is allowed to access this folder\n+            if (!in_array($post_folder_id, $_SESSION['groupes_visibles'])) {\n+                echo '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n+                break;\n+            }\n+\n             // Check if title doesn't contains html codes\n             if (preg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\", $title, $out)) {\n                 echo '[ { \"error\" : \"'.addslashes($LANG['error_html_codes']).'\" } ]';\n@@ -1925,7 +1996,7 @@\n                 \"SELECT parent_id, personal_folder\n                 FROM \".prefix_table(\"nested_tree\").\"\n                 WHERE id = %i\",\n-                $dataReceived['folder']\n+                $post_folder_id\n             );\n \n             // check if complexity level is good\n@@ -1956,7 +2027,7 @@\n                         'title' => $title\n                         ),\n                     'id=%s',\n-                    $dataReceived['folder']\n+                    $post_folder_id\n                 );\n                 // update complixity value\n                 DB::update(\n@@ -1965,7 +2036,7 @@\n                         'valeur' => $dataReceived['complexity']\n                         ),\n                     'intitule = %s AND type = %s',\n-                    $dataReceived['folder'],\n+                    $post_folder_id,\n                     \"complex\"\n                 );\n                 // rebuild fuild tree folder\n@@ -1988,23 +2059,34 @@\n             }\n             // decrypt and retreive data in JSON format\n             $dataReceived = prepareExchangedData($post_data, \"decode\");\n+            $post_source_folder_id = filter_var(htmlspecialchars_decode($dataReceived['source_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n+            $post_target_folder_id = filter_var(htmlspecialchars_decode($dataReceived['target_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n+\n+            // Check that user can access this folder\n+            if (!in_array($post_source_folder_id, $_SESSION['groupes_visibles'])\n+                || !in_array($post_target_folder_id, $_SESSION['groupes_visibles'])\n+            ) {\n+                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n+                echo $returnValues;\n+                break;\n+            }\n \n             $tmp_source = DB::queryFirstRow(\n                 \"SELECT title, parent_id, personal_folder\n                 FROM \".prefix_table(\"nested_tree\").\"\n                 WHERE id = %i\",\n-                $dataReceived['source_folder_id']\n+                $post_source_folder_id\n             );\n \n             $tmp_target = DB::queryFirstRow(\n                 \"SELECT title, parent_id, personal_folder\n                 FROM \".prefix_table(\"nested_tree\").\"\n                 WHERE id = %i\",\n-                $dataReceived['target_folder_id']\n+                $post_target_folder_id\n             );\n \n             // check if target is not a child of source\n-            if ($tree->isChildOf($dataReceived['target_folder_id'], $dataReceived['source_folder_id']) === true) {\n+            if ($tree->isChildOf($post_target_folder_id, $post_source_folder_id) === true) {\n                 $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                 echo $returnValues;\n                 break;\n@@ -2029,10 +2111,10 @@\n                 DB::update(\n                     prefix_table(\"nested_tree\"),\n                     array(\n-                        'parent_id' => $dataReceived['target_folder_id']\n+                        'parent_id' => $post_target_folder_id\n                         ),\n                     'id=%s',\n-                    $dataReceived['source_folder_id']\n+                    $post_source_folder_id\n                 );\n                 $tree->rebuild();\n             }\n@@ -2822,49 +2904,33 @@\n             echo prepareExchangedData($returnValues, \"encode\");\n             break;\n \n-        /*\n-          * CASE\n-          * WANT TO CLIPBOARD PW/LOGIN OF ITEM\n-        */\n-        case \"get_clipboard_item\":\n-            $dataItem = DB::queryfirstrow(\n-                \"SELECT pw,login,perso FROM \".prefix_table(\"items\").\" WHERE id=%i\",\n-                $post_id\n-            );\n-\n-            if (filter_input(INPUT_POST, 'field', FILTER_SANITIZE_STRING) === \"pw\") {\n-                if ($dataItem['perso'] === '1') {\n-                    $data = cryption(\n-                        $dataItem['pw'],\n-                        $_SESSION['user_settings']['session_psk'],\n-                        \"decrypt\"\n-                    );\n-                } else {\n-                    $data = cryption(\n-                        $dataItem['pw'],\n-                        \"\",\n-                        \"decrypt\"\n-                    );\n-                }\n-            } else {\n-                $data = $dataItem['login'];\n-            }\n-            // Encrypt data to return\n-            echo prepareExchangedData($data, \"encode\");\n-            break;\n-\n         /*\n         * CASE\n         * DELETE attached file from an item\n         */\n         case \"delete_attached_file\":\n             // Get some info before deleting\n             $data = DB::queryFirstRow(\n-                \"SELECT name,id_item,file\n+                \"SELECT name, id_item, file\n                 FROM \".prefix_table(\"files\").\"\n                 WHERE id = %i\",\n                 filter_input(INPUT_POST, 'file_id', FILTER_SANITIZE_NUMBER_INT)\n             );\n+\n+            // Load item data\n+            $data_item = DB::queryFirstRow(\n+                \"SELECT id_tree\n+                FROM \".prefix_table(\"items\").\"\n+                WHERE id = %i\",\n+                $data['id_item']\n+            );\n+\n+            // Check that user can access this folder\n+            if (!in_array($data_item['id_tree'], $_SESSION['groupes_visibles'])) {\n+                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n+                break;\n+            }\n+\n             if (!empty($data['id_item'])) {\n                 // Delete from FILES table\n                 DB::delete(\n@@ -3002,6 +3068,14 @@\n                 $post_folder_id\n             );\n \n+            // Check that user can access this folder\n+            if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n+                || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n+            ) {\n+                echo '[{\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"}]';\n+                break;\n+            }\n+\n             // previous is non personal folder and new too\n             if ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '0') {\n                 // just update is needed. Item key is the same\n@@ -3108,6 +3182,15 @@\n                         WHERE i.id=%i\",\n                         $item_id\n                     );\n+\n+                    // Check that user can access this folder\n+                    if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n+                        || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n+                    ) {\n+                        echo '[{\"error\":\"not_allowed\" , \"status\":\"ok\"}]';\n+                        break;\n+                    }\n+\n                     // get data about new folder\n                     $dataDestination = DB::queryfirstrow(\n                         \"SELECT personal_folder, title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n@@ -3227,6 +3310,14 @@\n                         $item_id\n                     );\n \n+                    // Check that user can access this folder\n+                    if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n+                        || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n+                    ) {\n+                        echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n+                        break;\n+                    }\n+\n                     // perform a check in case of Read-Only user creating an item in his PF\n                     if ($_SESSION['user_read_only'] === true) {\n                         echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");"
        },
        {
          "filename": "sources/main.functions.php",
          "status": "modified",
          "additions": 24,
          "deletions": 1,
          "patch": "@@ -630,7 +630,7 @@ function identifyUserRights($groupesVisiblesUser, $groupesInterditsUser, $isAdmi\n         }\n \n         // get complete list of ROLES\n-        $tmp = explode(\";\", $_SESSION['fonction_id']);\n+        $tmp = explode(\";\", $idFonctions);\n         $rows = DB::query(\n             \"SELECT * FROM \".prefix_table(\"roles_title\").\"\n             ORDER BY title ASC\"\n@@ -656,6 +656,7 @@ function identifyUserRights($groupesVisiblesUser, $groupesInterditsUser, $isAdmi\n         $_SESSION['groupes_interdits'] = array();\n         $_SESSION['personal_visible_groups'] = array();\n         $_SESSION['read_only_folders'] = array();\n+        $_SESSION['fonction_id'] = $idFonctions;\n         $groupesInterdits = array();\n         if (!is_array($groupesInterditsUser)) {\n             $groupesInterditsUser = explode(';', trimElement($groupesInterditsUser, \";\"));\n@@ -2110,3 +2111,25 @@ function chmodRecursive($dir, $dirPermissions, $filePermissions)\n \n     return $res;\n }\n+\n+/**\n+ * Check if user can access to this item\n+ * @param $item_id\n+ */\n+function accessToItemIsGranted($item_id)\n+{\n+    // Load item data\n+    $data = DB::queryFirstRow(\n+        \"SELECT id_tree\n+        FROM \".prefix_table(\"items\").\"\n+        WHERE id = %i\",\n+        $item_id\n+    );\n+\n+    // Check if user can access this folder\n+    if (!in_array($data['id'], $_SESSION['groupes_visibles'])) {\n+        return \"ERR_FOLDER_NOT_ALLOWED\";\n+    }\n+\n+    return true;\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aacdf6a3f2daf9b52a826d4b3d8a39873e2e2062",
            "date": "2025-01-13T17:24:23Z",
            "author_login": "nilsteampassnet"
          },
          {
            "sha": "eb95bc3e37f6e1f19fce98aa4c44c251f2084cd7",
            "date": "2025-01-13T17:20:31Z",
            "author_login": "nilsteampassnet"
          },
          {
            "sha": "9969d0ef636e28c1afcdb047aac2d2a5387b62b5",
            "date": "2025-01-12T17:29:37Z",
            "author_login": "nilsteampassnet"
          },
          {
            "sha": "4963736272bc4b281586f8ad4dcee70015d595b1",
            "date": "2025-01-12T17:22:24Z",
            "author_login": "nilsteampassnet"
          },
          {
            "sha": "b5a997952a43e4760c9eaceedfd9a7ba4a5683d2",
            "date": "2025-01-10T16:06:22Z",
            "author_login": "nilsteampassnet"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "Multiple stored cross-site scripting (XSS) vulnerabilities in TeamPass before 2.1.27.9 allow authenticated remote attackers to inject arbitrary web script or HTML via the (1) URL value of an item or (2) user log history. To exploit the vulnerability, the attacker must be first authenticated to the application. For the first one, the attacker has to simply inject XSS code within the URL field of a shared item. For the second one however, the attacker must prepare a payload within its profile, and then ask an administrator to modify its profile. From there, whenever the administrator accesses the log, it can be XSS'ed.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-11-27T19:29:00.220",
    "last_modified": "2024-11-21T03:14:00.723",
    "fix_date": "2017-09-30T11:07:36Z"
  },
  "references": [
    {
      "url": "http://blog.amossys.fr/teampass-multiple-cve-01.html",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Technical Description",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nilsteampassnet/TeamPass/commit/5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://blog.amossys.fr/teampass-multiple-cve-01.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Technical Description",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nilsteampassnet/TeamPass/commit/5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:09.752053",
    "processing_status": "enhanced"
  }
}