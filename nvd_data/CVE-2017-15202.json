{
  "cve_id": "CVE-2017-15202",
  "github_data": {
    "repository": "kanboard/kanboard",
    "fix_commit": "074f6c104f3e49401ef0065540338fc2d4be79f0",
    "related_commits": [
      "074f6c104f3e49401ef0065540338fc2d4be79f0",
      "3e0f14ae2b0b5a44bd038a472f17eac75f538524",
      "074f6c104f3e49401ef0065540338fc2d4be79f0",
      "3e0f14ae2b0b5a44bd038a472f17eac75f538524"
    ],
    "patch_url": "https://github.com/kanboard/kanboard/commit/074f6c104f3e49401ef0065540338fc2d4be79f0.patch",
    "fix_commit_details": {
      "sha": "074f6c104f3e49401ef0065540338fc2d4be79f0",
      "commit_date": "2017-09-24T01:48:45Z",
      "author": {
        "login": "fguillot",
        "type": "User",
        "stats": {
          "total_commits": 2700,
          "average_weekly_commits": 4.70383275261324,
          "total_additions": 870938,
          "total_deletions": 651416,
          "weeks_active": 306
        }
      },
      "commit_message": {
        "title": "Avoid people to alter other projects by changing form data",
        "length": 58,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 265,
        "additions": 154,
        "deletions": 111
      },
      "files": [
        {
          "filename": "ChangeLog",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -5,6 +5,10 @@ New features:\n \n * Vietnamese translation\n \n+Security Issues:\n+\n+* Avoid people to alter other project resources by changing form data\n+\n Version 1.0.46 (August 13, 2017)\n --------------------------------\n "
        },
        {
          "filename": "app/Controller/ActionController.php",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -46,9 +46,10 @@ public function index()\n     public function confirm()\n     {\n         $project = $this->getProject();\n+        $action = $this->getAction($project);\n \n         $this->response->html($this->helper->layout->project('action/remove', array(\n-            'action' => $this->actionModel->getById($this->request->getIntegerParam('action_id')),\n+            'action' => $action,\n             'available_events' => $this->eventManager->getAll(),\n             'available_actions' => $this->actionManager->getAvailableActions(),\n             'project' => $project,\n@@ -65,7 +66,7 @@ public function remove()\n     {\n         $this->checkCSRFParam();\n         $project = $this->getProject();\n-        $action = $this->actionModel->getById($this->request->getIntegerParam('action_id'));\n+        $action = $this->getAction($project);\n \n         if (! empty($action) && $this->actionModel->remove($action['id'])) {\n             $this->flash->success(t('Action removed successfully.'));"
        },
        {
          "filename": "app/Controller/ActionCreationController.php",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -35,8 +35,9 @@ public function event()\n     {\n         $project = $this->getProject();\n         $values = $this->request->getValues();\n+        $values['project_id'] = $project['id'];\n \n-        if (empty($values['action_name']) || empty($values['project_id'])) {\n+        if (empty($values['action_name'])) {\n             return $this->create();\n         }\n \n@@ -57,8 +58,9 @@ public function params()\n     {\n         $project = $this->getProject();\n         $values = $this->request->getValues();\n+        $values['project_id'] = $project['id'];\n \n-        if (empty($values['action_name']) || empty($values['project_id']) || empty($values['event_name'])) {\n+        if (empty($values['action_name']) || empty($values['event_name'])) {\n             $this->create();\n             return;\n         }\n@@ -109,6 +111,7 @@ public function save()\n      */\n     private function doCreation(array $project, array $values)\n     {\n+        $values['project_id'] = $project['id'];\n         list($valid, ) = $this->actionValidator->validateCreation($values);\n \n         if ($valid) {"
        },
        {
          "filename": "app/Controller/BaseController.php",
          "status": "modified",
          "additions": 90,
          "deletions": 0,
          "patch": "@@ -155,4 +155,94 @@ protected function getSubtask()\n \n         return $subtask;\n     }\n+\n+    protected function getColumn(array $project)\n+    {\n+        $column = $this->columnModel->getById($this->request->getIntegerParam('column_id'));\n+\n+        if (empty($column)) {\n+            throw new PageNotFoundException();\n+        }\n+\n+        if ($column['project_id'] != $project['id']) {\n+            throw new AccessForbiddenException();\n+        }\n+\n+        return $column;\n+    }\n+\n+    protected function getSwimlane(array $project)\n+    {\n+        $swimlane = $this->swimlaneModel->getById($this->request->getIntegerParam('swimlane_id'));\n+\n+        if (empty($swimlane)) {\n+            throw new PageNotFoundException();\n+        }\n+\n+        if ($swimlane['project_id'] != $project['id']) {\n+            throw new AccessForbiddenException();\n+        }\n+\n+        return $swimlane;\n+    }\n+\n+    protected function getCategory(array $project)\n+    {\n+        $category = $this->categoryModel->getById($this->request->getIntegerParam('category_id'));\n+\n+        if (empty($category)) {\n+            throw new PageNotFoundException();\n+        }\n+\n+        if ($category['project_id'] != $project['id']) {\n+            throw new AccessForbiddenException();\n+        }\n+\n+        return $category;\n+    }\n+\n+    protected function getProjectTag(array $project)\n+    {\n+        $tag = $this->tagModel->getById($this->request->getIntegerParam('tag_id'));\n+\n+        if (empty($tag)) {\n+            throw new PageNotFoundException();\n+        }\n+\n+        if ($tag['project_id'] != $project['id']) {\n+            throw new AccessForbiddenException();\n+        }\n+\n+        return $tag;\n+    }\n+\n+    protected function getAction(array $project)\n+    {\n+        $action = $this->actionModel->getById($this->request->getIntegerParam('action_id'));\n+\n+        if (empty($action)) {\n+            throw new PageNotFoundException();\n+        }\n+\n+        if ($action['project_id'] != $project['id']) {\n+            throw new AccessForbiddenException();\n+        }\n+\n+        return $action;\n+    }\n+\n+    protected function getCustomFilter(array $project)\n+    {\n+        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n+\n+        if (empty($filter)) {\n+            throw new PageNotFoundException();\n+        }\n+\n+        if ($filter['project_id'] != $project['id']) {\n+            throw new AccessForbiddenException();\n+        }\n+\n+        return $filter;\n+    }\n }"
        },
        {
          "filename": "app/Controller/CategoryController.php",
          "status": "modified",
          "additions": 9,
          "deletions": 22,
          "patch": "@@ -12,24 +12,6 @@\n  */\n class CategoryController extends BaseController\n {\n-    /**\n-     * Get the category (common method between actions)\n-     *\n-     * @access private\n-     * @return array\n-     * @throws PageNotFoundException\n-     */\n-    private function getCategory()\n-    {\n-        $category = $this->categoryModel->getById($this->request->getIntegerParam('category_id'));\n-\n-        if (empty($category)) {\n-            throw new PageNotFoundException();\n-        }\n-\n-        return $category;\n-    }\n-\n     /**\n      * List of categories for a given project\n      *\n@@ -72,8 +54,9 @@ public function create(array $values = array(), array $errors = array())\n     public function save()\n     {\n         $project = $this->getProject();\n-\n         $values = $this->request->getValues();\n+        $values['project_id'] = $project['id'];\n+\n         list($valid, $errors) = $this->categoryValidator->validateCreation($values);\n \n         if ($valid) {\n@@ -100,7 +83,7 @@ public function save()\n     public function edit(array $values = array(), array $errors = array())\n     {\n         $project = $this->getProject();\n-        $category = $this->getCategory();\n+        $category = $this->getCategory($project);\n \n         $this->response->html($this->template->render('category/edit', array(\n             'values'  => empty($values) ? $category : $values,\n@@ -117,8 +100,12 @@ public function edit(array $values = array(), array $errors = array())\n     public function update()\n     {\n         $project = $this->getProject();\n+        $category = $this->getCategory($project);\n \n         $values = $this->request->getValues();\n+        $values['project_id'] = $project['id'];\n+        $values['id'] = $category['id'];\n+\n         list($valid, $errors) = $this->categoryValidator->validateModification($values);\n \n         if ($valid) {\n@@ -141,7 +128,7 @@ public function update()\n     public function confirm()\n     {\n         $project = $this->getProject();\n-        $category = $this->getCategory();\n+        $category = $this->getCategory($project);\n \n         $this->response->html($this->helper->layout->project('category/remove', array(\n             'project'  => $project,\n@@ -158,7 +145,7 @@ public function remove()\n     {\n         $this->checkCSRFParam();\n         $project = $this->getProject();\n-        $category = $this->getCategory();\n+        $category = $this->getCategory($project);\n \n         if ($this->categoryModel->remove($category['id'])) {\n             $this->flash->success(t('Category removed successfully.'));"
        },
        {
          "filename": "app/Controller/ColumnController.php",
          "status": "modified",
          "additions": 11,
          "deletions": 5,
          "patch": "@@ -61,6 +61,7 @@ public function save()\n     {\n         $project = $this->getProject();\n         $values = $this->request->getValues() + array('hide_in_dashboard' => 0);\n+        $values['project_id'] = $project['id'];\n \n         list($valid, $errors) = $this->columnValidator->validateCreation($values);\n \n@@ -95,7 +96,7 @@ public function save()\n     public function edit(array $values = array(), array $errors = array())\n     {\n         $project = $this->getProject();\n-        $column = $this->columnModel->getById($this->request->getIntegerParam('column_id'));\n+        $column = $this->getColumn($project);\n \n         $this->response->html($this->helper->layout->project('column/edit', array(\n             'errors' => $errors,\n@@ -113,7 +114,11 @@ public function edit(array $values = array(), array $errors = array())\n     public function update()\n     {\n         $project = $this->getProject();\n+        $column = $this->getColumn($project);\n+\n         $values = $this->request->getValues() + array('hide_in_dashboard' => 0);\n+        $values['project_id'] = $project['id'];\n+        $values['id'] = $column['id'];\n \n         list($valid, $errors) = $this->columnValidator->validateModification($values);\n \n@@ -164,9 +169,10 @@ public function move()\n     public function confirm()\n     {\n         $project = $this->getProject();\n+        $column = $this->getColumn($project);\n \n         $this->response->html($this->helper->layout->project('column/remove', array(\n-            'column' => $this->columnModel->getById($this->request->getIntegerParam('column_id')),\n+            'column' => $column,\n             'project' => $project,\n         )));\n     }\n@@ -178,11 +184,11 @@ public function confirm()\n      */\n     public function remove()\n     {\n-        $project = $this->getProject();\n         $this->checkCSRFParam();\n-        $column_id = $this->request->getIntegerParam('column_id');\n+        $project = $this->getProject();\n+        $column = $this->getColumn($project);\n \n-        if ($this->columnModel->remove($column_id)) {\n+        if ($this->columnModel->remove($column['id'])) {\n             $this->flash->success(t('Column removed successfully.'));\n         } else {\n             $this->flash->failure(t('Unable to remove this column.'));"
        },
        {
          "filename": "app/Controller/CustomFilterController.php",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -59,6 +59,7 @@ public function save()\n         $project = $this->getProject();\n \n         $values = $this->request->getValues();\n+        $values['project_id'] = $project['id'];\n         $values['user_id'] = $this->userSession->getId();\n \n         list($valid, $errors) = $this->customFilterValidator->validateCreation($values);\n@@ -84,7 +85,7 @@ public function save()\n     public function confirm()\n     {\n         $project = $this->getProject();\n-        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n+        $filter = $this->getCustomFilter($project);\n \n         $this->response->html($this->helper->layout->project('custom_filter/remove', array(\n             'project' => $project,\n@@ -102,7 +103,7 @@ public function remove()\n     {\n         $this->checkCSRFParam();\n         $project = $this->getProject();\n-        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n+        $filter = $this->getCustomFilter($project);\n \n         $this->checkPermission($project, $filter);\n \n@@ -153,6 +154,8 @@ public function update()\n         $this->checkPermission($project, $filter);\n \n         $values = $this->request->getValues();\n+        $values['id'] = $filter['id'];\n+        $values['project_id'] = $project['id'];\n \n         if (! isset($values['is_shared'])) {\n             $values += array('is_shared' => 0);"
        },
        {
          "filename": "app/Controller/ProjectEditController.php",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -65,6 +65,8 @@ public function update()\n      */\n     private function prepareValues(array $project, array $values)\n     {\n+        $values['id'] = $project['id'];\n+\n         if (isset($values['is_private'])) {\n             if (! $this->helper->user->hasProjectAccess('ProjectCreationController', 'create', $project['id'])) {\n                 unset($values['is_private']);"
        },
        {
          "filename": "app/Controller/ProjectTagController.php",
          "status": "modified",
          "additions": 10,
          "deletions": 23,
          "patch": "@@ -2,8 +2,6 @@\n \n namespace Kanboard\\Controller;\n \n-use Kanboard\\Core\\Controller\\AccessForbiddenException;\n-\n /**\n  * Class ProjectTagController\n  *\n@@ -27,10 +25,6 @@ public function create(array $values = array(), array $errors = array())\n     {\n         $project = $this->getProject();\n \n-        if (empty($values)) {\n-            $values['project_id'] = $project['id'];\n-        }\n-\n         $this->response->html($this->template->render('project_tag/create', array(\n             'project' => $project,\n             'values'  => $values,\n@@ -42,6 +36,8 @@ public function save()\n     {\n         $project = $this->getProject();\n         $values = $this->request->getValues();\n+        $values['project_id'] = $project['id'];\n+\n         list($valid, $errors) = $this->tagValidator->validateCreation($values);\n \n         if ($valid) {\n@@ -60,8 +56,7 @@ public function save()\n     public function edit(array $values = array(), array $errors = array())\n     {\n         $project = $this->getProject();\n-        $tag_id = $this->request->getIntegerParam('tag_id');\n-        $tag = $this->tagModel->getById($tag_id);\n+        $tag = $this->getProjectTag($project);\n \n         if (empty($values)) {\n             $values = $tag;\n@@ -78,14 +73,12 @@ public function edit(array $values = array(), array $errors = array())\n     public function update()\n     {\n         $project = $this->getProject();\n-        $tag_id = $this->request->getIntegerParam('tag_id');\n-        $tag = $this->tagModel->getById($tag_id);\n+        $tag = $this->getProjectTag($project);\n         $values = $this->request->getValues();\n-        list($valid, $errors) = $this->tagValidator->validateModification($values);\n+        $values['project_id'] = $project['id'];\n+        $values['id'] = $tag['id'];\n \n-        if ($tag['project_id'] != $project['id']) {\n-            throw new AccessForbiddenException();\n-        }\n+        list($valid, $errors) = $this->tagValidator->validateModification($values);\n \n         if ($valid) {\n             if ($this->tagModel->update($values['id'], $values['name'])) {\n@@ -103,8 +96,7 @@ public function update()\n     public function confirm()\n     {\n         $project = $this->getProject();\n-        $tag_id = $this->request->getIntegerParam('tag_id');\n-        $tag = $this->tagModel->getById($tag_id);\n+        $tag = $this->getProjectTag($project);\n \n         $this->response->html($this->template->render('project_tag/remove', array(\n             'tag'     => $tag,\n@@ -116,14 +108,9 @@ public function remove()\n     {\n         $this->checkCSRFParam();\n         $project = $this->getProject();\n-        $tag_id = $this->request->getIntegerParam('tag_id');\n-        $tag = $this->tagModel->getById($tag_id);\n-\n-        if ($tag['project_id'] != $project['id']) {\n-            throw new AccessForbiddenException();\n-        }\n+        $tag = $this->getProjectTag($project);\n \n-        if ($this->tagModel->remove($tag_id)) {\n+        if ($this->tagModel->remove($tag['id'])) {\n             $this->flash->success(t('Tag removed successfully.'));\n         } else {\n             $this->flash->failure(t('Unable to remove this tag.'));"
        },
        {
          "filename": "app/Controller/SwimlaneController.php",
          "status": "modified",
          "additions": 14,
          "deletions": 29,
          "patch": "@@ -3,8 +3,6 @@\n namespace Kanboard\\Controller;\n \n use Kanboard\\Core\\Controller\\AccessForbiddenException;\n-use Kanboard\\Core\\Controller\\PageNotFoundException;\n-use Kanboard\\Model\\SwimlaneModel;\n \n /**\n  * Swimlanes Controller\n@@ -14,24 +12,6 @@\n  */\n class SwimlaneController extends BaseController\n {\n-    /**\n-     * Get the swimlane (common method between actions)\n-     *\n-     * @access private\n-     * @return array\n-     * @throws PageNotFoundException\n-     */\n-    private function getSwimlane()\n-    {\n-        $swimlane = $this->swimlaneModel->getById($this->request->getIntegerParam('swimlane_id'));\n-\n-        if (empty($swimlane)) {\n-            throw new PageNotFoundException();\n-        }\n-\n-        return $swimlane;\n-    }\n-\n     /**\n      * List of swimlanes for a given project\n      *\n@@ -78,6 +58,8 @@ public function save()\n     {\n         $project = $this->getProject();\n         $values = $this->request->getValues();\n+        $values['project_id'] = $project['id'];\n+\n         list($valid, $errors) = $this->swimlaneValidator->validateCreation($values);\n \n         if ($valid) {\n@@ -104,7 +86,7 @@ public function save()\n     public function edit(array $values = array(), array $errors = array())\n     {\n         $project = $this->getProject();\n-        $swimlane = $this->getSwimlane();\n+        $swimlane = $this->getSwimlane($project);\n \n         $this->response->html($this->helper->layout->project('swimlane/edit', array(\n             'values' => empty($values) ? $swimlane : $values,\n@@ -121,8 +103,11 @@ public function edit(array $values = array(), array $errors = array())\n     public function update()\n     {\n         $project = $this->getProject();\n-\n+        $swimlane = $this->getSwimlane($project);\n         $values = $this->request->getValues();\n+        $values['project_id'] = $project['id'];\n+        $values['id'] = $swimlane['id'];\n+\n         list($valid, $errors) = $this->swimlaneValidator->validateModification($values);\n \n         if ($valid) {\n@@ -145,7 +130,7 @@ public function update()\n     public function confirm()\n     {\n         $project = $this->getProject();\n-        $swimlane = $this->getSwimlane();\n+        $swimlane = $this->getSwimlane($project);\n \n         $this->response->html($this->helper->layout->project('swimlane/remove', array(\n             'project' => $project,\n@@ -162,9 +147,9 @@ public function remove()\n     {\n         $this->checkCSRFParam();\n         $project = $this->getProject();\n-        $swimlane_id = $this->request->getIntegerParam('swimlane_id');\n+        $swimlane = $this->getSwimlane($project);\n \n-        if ($this->swimlaneModel->remove($project['id'], $swimlane_id)) {\n+        if ($this->swimlaneModel->remove($project['id'], $swimlane['id'])) {\n             $this->flash->success(t('Swimlane removed successfully.'));\n         } else {\n             $this->flash->failure(t('Unable to remove this swimlane.'));\n@@ -182,9 +167,9 @@ public function disable()\n     {\n         $this->checkCSRFParam();\n         $project = $this->getProject();\n-        $swimlane_id = $this->request->getIntegerParam('swimlane_id');\n+        $swimlane = $this->getSwimlane($project);\n \n-        if ($this->swimlaneModel->disable($project['id'], $swimlane_id)) {\n+        if ($this->swimlaneModel->disable($project['id'], $swimlane['id'])) {\n             $this->flash->success(t('Swimlane updated successfully.'));\n         } else {\n             $this->flash->failure(t('Unable to update this swimlane.'));\n@@ -202,9 +187,9 @@ public function enable()\n     {\n         $this->checkCSRFParam();\n         $project = $this->getProject();\n-        $swimlane_id = $this->request->getIntegerParam('swimlane_id');\n+        $swimlane = $this->getSwimlane($project);\n \n-        if ($this->swimlaneModel->enable($project['id'], $swimlane_id)) {\n+        if ($this->swimlaneModel->enable($project['id'], $swimlane['id'])) {\n             $this->flash->success(t('Swimlane updated successfully.'));\n         } else {\n             $this->flash->failure(t('Unable to update this swimlane.'));"
        },
        {
          "filename": "app/Controller/TaskCreationController.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -49,6 +49,7 @@ public function save()\n     {\n         $project = $this->getProject();\n         $values = $this->request->getValues();\n+        $values['project_id'] = $project['id'];\n \n         list($valid, $errors) = $this->taskValidator->validateCreation($values);\n "
        },
        {
          "filename": "app/Template/action_creation/create.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -3,7 +3,6 @@\n </div>\n <form method=\"post\" action=\"<?= $this->url->href('ActionCreationController', 'event', array('project_id' => $project['id'])) ?>\">\n     <?= $this->form->csrf() ?>\n-    <?= $this->form->hidden('project_id', $values) ?>\n \n     <?= $this->form->label(t('Action'), 'action_name') ?>\n     <?= $this->form->select('action_name', $available_actions, $values) ?>"
        },
        {
          "filename": "app/Template/action_creation/event.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -5,7 +5,6 @@\n <form method=\"post\" action=\"<?= $this->url->href('ActionCreationController', 'params', array('project_id' => $project['id'])) ?>\">\n     <?= $this->form->csrf() ?>\n \n-    <?= $this->form->hidden('project_id', $values) ?>\n     <?= $this->form->hidden('action_name', $values) ?>\n \n     <?= $this->form->label(t('Action'), 'action_name') ?>"
        },
        {
          "filename": "app/Template/action_creation/params.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -5,7 +5,6 @@\n <form method=\"post\" action=\"<?= $this->url->href('ActionCreationController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n     <?= $this->form->csrf() ?>\n \n-    <?= $this->form->hidden('project_id', $values) ?>\n     <?= $this->form->hidden('event_name', $values) ?>\n     <?= $this->form->hidden('action_name', $values) ?>\n "
        },
        {
          "filename": "app/Template/category/create.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -3,7 +3,6 @@\n </div>\n <form method=\"post\" action=\"<?= $this->url->href('CategoryController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n     <?= $this->form->csrf() ?>\n-    <?= $this->form->hidden('project_id', $values) ?>\n \n     <?= $this->form->label(t('Category Name'), 'name') ?>\n     <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"')) ?>"
        },
        {
          "filename": "app/Template/category/edit.php",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -5,9 +5,6 @@\n <form method=\"post\" action=\"<?= $this->url->href('CategoryController', 'update', array('project_id' => $project['id'], 'category_id' => $values['id'])) ?>\" autocomplete=\"off\">\n     <?= $this->form->csrf() ?>\n \n-    <?= $this->form->hidden('id', $values) ?>\n-    <?= $this->form->hidden('project_id', $values) ?>\n-\n     <?= $this->form->label(t('Category Name'), 'name') ?>\n     <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>\n "
        },
        {
          "filename": "app/Template/column/create.php",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -4,8 +4,6 @@\n <form method=\"post\" action=\"<?= $this->url->href('ColumnController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n     <?= $this->form->csrf() ?>\n \n-    <?= $this->form->hidden('project_id', $values) ?>\n-\n     <?= $this->form->label(t('Title'), 'title') ?>\n     <?= $this->form->text('title', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>\n "
        },
        {
          "filename": "app/Template/column/edit.php",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -5,9 +5,6 @@\n <form method=\"post\" action=\"<?= $this->url->href('ColumnController', 'update', array('project_id' => $project['id'], 'column_id' => $column['id'])) ?>\" autocomplete=\"off\">\n     <?= $this->form->csrf() ?>\n \n-    <?= $this->form->hidden('id', $values) ?>\n-    <?= $this->form->hidden('project_id', $values) ?>\n-\n     <?= $this->form->label(t('Title'), 'title') ?>\n     <?= $this->form->text('title', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"')) ?>\n "
        },
        {
          "filename": "app/Template/custom_filter/create.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -3,7 +3,6 @@\n </div>\n <form method=\"post\" action=\"<?= $this->url->href('CustomFilterController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n     <?= $this->form->csrf() ?>\n-    <?= $this->form->hidden('project_id', $values) ?>\n \n     <?= $this->form->label(t('Name'), 'name') ?>\n     <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"100\"')) ?>"
        },
        {
          "filename": "app/Template/custom_filter/edit.php",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -5,9 +5,7 @@\n <form method=\"post\" action=\"<?= $this->url->href('CustomFilterController', 'update', array('project_id' => $filter['project_id'], 'filter_id' => $filter['id'])) ?>\" autocomplete=\"off\">\n     <?= $this->form->csrf() ?>\n \n-    <?= $this->form->hidden('id', $values) ?>\n     <?= $this->form->hidden('user_id', $values) ?>\n-    <?= $this->form->hidden('project_id', $values) ?>\n \n     <?= $this->form->label(t('Name'), 'name') ?>\n     <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"100\"')) ?>"
        },
        {
          "filename": "app/Template/project_edit/show.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -9,7 +9,6 @@\n <?php endif ?>\n <form method=\"post\" action=\"<?= $this->url->href('ProjectEditController', 'update', array('project_id' => $project['id'], 'redirect' => 'edit')) ?>\" autocomplete=\"off\">\n     <?= $this->form->csrf() ?>\n-    <?= $this->form->hidden('id', $values) ?>\n \n     <fieldset>\n         <legend><?= t('General') ?></legend>"
        },
        {
          "filename": "app/Template/project_tag/create.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -3,7 +3,6 @@\n </div>\n <form method=\"post\" action=\"<?= $this->url->href('ProjectTagController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n     <?= $this->form->csrf() ?>\n-    <?= $this->form->hidden('project_id', $values) ?>\n \n     <?= $this->form->label(t('Name'), 'name') ?>\n     <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"255\"')) ?>"
        },
        {
          "filename": "app/Template/project_tag/edit.php",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -3,8 +3,6 @@\n </div>\n <form method=\"post\" action=\"<?= $this->url->href('ProjectTagController', 'update', array('tag_id' => $tag['id'], 'project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n     <?= $this->form->csrf() ?>\n-    <?= $this->form->hidden('id', $values) ?>\n-    <?= $this->form->hidden('project_id', $values) ?>\n \n     <?= $this->form->label(t('Name'), 'name') ?>\n     <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"255\"')) ?>"
        },
        {
          "filename": "app/Template/swimlane/create.php",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -2,9 +2,7 @@\n     <h2><?= t('Add a new swimlane') ?></h2>\n </div>\n <form method=\"post\" action=\"<?= $this->url->href('SwimlaneController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n-\n     <?= $this->form->csrf() ?>\n-    <?= $this->form->hidden('project_id', $values) ?>\n \n     <?= $this->form->label(t('Name'), 'name') ?>\n     <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>"
        },
        {
          "filename": "app/Template/swimlane/edit.php",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -3,12 +3,8 @@\n </div>\n \n <form method=\"post\" action=\"<?= $this->url->href('SwimlaneController', 'update', array('project_id' => $project['id'], 'swimlane_id' => $values['id'])) ?>\" autocomplete=\"off\">\n-\n     <?= $this->form->csrf() ?>\n \n-    <?= $this->form->hidden('id', $values) ?>\n-    <?= $this->form->hidden('project_id', $values) ?>\n-\n     <?= $this->form->label(t('Name'), 'name') ?>\n     <?= $this->form->text('name', $values, $errors, array('autofocus', 'required', 'maxlength=\"50\"', 'tabindex=\"1\"')) ?>\n "
        },
        {
          "filename": "app/Template/task_creation/show.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -3,7 +3,6 @@\n </div>\n <form method=\"post\" action=\"<?= $this->url->href('TaskCreationController', 'save', array('project_id' => $project['id'])) ?>\" autocomplete=\"off\">\n     <?= $this->form->csrf() ?>\n-    <?= $this->form->hidden('project_id', $values) ?>\n \n     <div class=\"task-form-container\">\n         <div class=\"task-form-main-column\">"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 10,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d65a57ac658570dd0bbd6f60393937b0b90bea8d",
            "date": "2025-01-12T00:47:10Z",
            "author_login": "lourdas"
          },
          {
            "sha": "2a97f35f900fbcc33ffce54b12ec54fec3bb4cda",
            "date": "2024-12-20T20:17:14Z",
            "author_login": "fguillot"
          },
          {
            "sha": "e49e6968a587594ed62af193f639313293104e6a",
            "date": "2024-12-18T21:30:14Z",
            "author_login": "fguillot"
          },
          {
            "sha": "acf2be83765663b10fc1d6403aa2dba359275e08",
            "date": "2024-12-18T03:58:47Z",
            "author_login": "fguillot"
          },
          {
            "sha": "4d438cd2785942fa0dc4c408774f6749dfe2c8a6",
            "date": "2024-12-18T03:49:04Z",
            "author_login": "fguillot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-639",
    "description": "In Kanboard before 1.0.47, by altering form data, an authenticated user can edit columns of a private project of another user.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-10-11T01:32:54.740",
    "last_modified": "2024-11-21T03:14:12.340",
    "fix_date": "2017-09-24T01:48:45Z"
  },
  "references": [
    {
      "url": "http://openwall.com/lists/oss-security/2017/10/04/9",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/kanboard/kanboard/commit/074f6c104f3e49401ef0065540338fc2d4be79f0",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/kanboard/kanboard/commit/3e0f14ae2b0b5a44bd038a472f17eac75f538524",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://kanboard.net/news/version-1.0.47",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://openwall.com/lists/oss-security/2017/10/04/9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/kanboard/kanboard/commit/074f6c104f3e49401ef0065540338fc2d4be79f0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/kanboard/kanboard/commit/3e0f14ae2b0b5a44bd038a472f17eac75f538524",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://kanboard.net/news/version-1.0.47",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:07.411395",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "kanboard",
    "owner": "kanboard",
    "created_at": "2014-01-25T19:58:30Z",
    "updated_at": "2025-01-14T13:08:14Z",
    "pushed_at": "2025-01-12T00:47:10Z",
    "size": 92688,
    "stars": 8610,
    "forks": 1826,
    "open_issues": 158,
    "watchers": 8610,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "PHP": 8473579,
      "JavaScript": 128907,
      "CSS": 67936,
      "Dockerfile": 2671,
      "Makefile": 2660,
      "Shell": 1368
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:20:14.048868"
  }
}