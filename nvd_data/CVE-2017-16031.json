{
  "cve_id": "CVE-2017-16031",
  "github_data": {
    "repository": "socketio/socket.io",
    "fix_commit": "67b4eb9abdf111dfa9be4176d1709374a2b4ded8",
    "related_commits": [
      "67b4eb9abdf111dfa9be4176d1709374a2b4ded8",
      "67b4eb9abdf111dfa9be4176d1709374a2b4ded8"
    ],
    "patch_url": "https://github.com/socketio/socket.io/commit/67b4eb9abdf111dfa9be4176d1709374a2b4ded8.patch",
    "fix_commit_details": {
      "sha": "67b4eb9abdf111dfa9be4176d1709374a2b4ded8",
      "commit_date": "2012-04-26T21:28:00Z",
      "author": {
        "login": "martinthomson",
        "type": "User",
        "stats": {
          "total_commits": 4,
          "average_weekly_commits": 0.005161290322580645,
          "total_additions": 104,
          "total_deletions": 91,
          "weeks_active": 1
        }
      },
      "commit_message": {
        "title": "Making ID generation securely random",
        "length": 36,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 98,
        "additions": 92,
        "deletions": 6
      },
      "files": [
        {
          "filename": "lib/manager.js",
          "status": "modified",
          "additions": 12,
          "deletions": 6,
          "patch": "@@ -11,6 +11,7 @@\n var fs = require('fs')\n   , url = require('url')\n   , tty = require('tty')\n+  , crypto = require('crypto')\n   , util = require('./util')\n   , store = require('./store')\n   , client = require('socket.io-client')\n@@ -139,6 +140,8 @@ function Manager (server, options) {\n     self.emit('connection', conn);\n   });\n \n+  this.sequenceNumber = Date.now() | 0;\n+ \n   this.log.info('socket.io started');\n };\n \n@@ -702,9 +705,12 @@ Manager.prototype.handleClient = function (data, req) {\n  * @api private\n  */\n \n-Manager.prototype.generateId = function () {\n-  return Math.abs(Math.random() * Math.random() * Date.now() | 0).toString()\n-    + Math.abs(Math.random() * Math.random() * Date.now() | 0).toString();\n+Manager.prototype.generateId = function (data) {\n+  var rand = new Buffer(15); // multiple of 3 for base64\n+  this.sequenceNumber = (this.sequenceNumber + 1) | 0;\n+  rand.writeInt32BE(this.sequenceNumber, 11);\n+  crypto.randomBytes(12).copy(rand);\n+  return rand.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-');\n };\n \n /**\n@@ -752,7 +758,7 @@ Manager.prototype.handleHandshake = function (data, req, res) {\n     if (err) return error(err);\n \n     if (authorized) {\n-      var id = self.generateId()\n+      var id = self.generateId(newData || handshakeData)\n         , hs = [\n               id\n             , self.enabled('heartbeats') ? self.get('heartbeat timeout') || '' : ''\n@@ -872,9 +878,9 @@ Manager.prototype.authorize = function (data, fn) {\n   if (this.get('authorization')) {\n     var self = this;\n \n-    this.get('authorization').call(this, data, function (err, authorized) {\n+    this.get('authorization').call(this, data, function (err, authorized, newData) {\n       self.log.debug('client ' + authorized ? 'authorized' : 'unauthorized');\n-      fn(err, authorized);\n+      fn(err, authorized, newData);\n     });\n   } else {\n     this.log.debug('client authorized');"
        },
        {
          "filename": "test/manager.test.js",
          "status": "modified",
          "additions": 80,
          "deletions": 0,
          "patch": "@@ -220,6 +220,86 @@ module.exports = {\n     });\n   },\n \n+  'test authorization gets handshake data': function (done) {\n+    var port = ++ports\n+      , io = sio.listen(port)\n+      , cl = client(port);\n+\n+    io.configure(function () {\n+      function auth (data, fn) {\n+        data.query.should.have.foo;\n+        data.query.foo.should.eql('bar');\n+        fn(null, false);\n+      };\n+\n+      io.set('authorization', auth);\n+    });\n+\n+    cl.get('/socket.io/{protocol}/?foo=bar', function (res, data) {\n+      res.statusCode.should.eql(403);\n+      data.should.match(/handshake unauthorized/);\n+\n+      cl.end();\n+      io.server.close();\n+      done();\n+    });\n+  },\n+\n+  'test that authorization can view handshake data': function (done) {\n+    var port = ++ports\n+      , io = sio.listen(port)\n+      , cl = client(port);\n+\n+    io.configure(function () {\n+      function auth (data, fn) {\n+        data.query.should.have.foo;\n+        data.query.foo.should.eql('bar');\n+        fn(null, true);\n+      };\n+\n+      io.set('authorization', auth);\n+    });\n+\n+    cl.get('/socket.io/{protocol}/?foo=bar', function (res, data) {\n+      res.statusCode.should.eql(200);\n+\n+      cl.end();\n+      io.server.close();\n+      done();\n+    });\n+  },\n+\n+  'test that authorization can change handshake data': function (done) {\n+    var port = ++ports\n+      , io = sio.listen(port)\n+      , cl = client(port);\n+\n+    io.configure(function () {\n+      function auth (data, fn) {\n+        var replacement = { baz: 'qu' };\n+        for (i in data) {\n+          if (data.hasOwnProperty(i)) {\n+            replacement[i] = data[i];\n+          }\n+        }\n+        fn(null, true, replacement);\n+      };\n+\n+      io.set('authorization', auth);\n+    });\n+\n+    cl.get('/socket.io/{protocol}/', function (res, data) {\n+      var id = data.split(':', 2)[0];\n+      res.statusCode.should.eql(200);\n+      io.handshaken[id].should.have.baz;\n+      io.handshaken[id].baz.should.eql('qu');\n+\n+      cl.end();\n+      io.server.close();\n+      done();\n+    });\n+  },\n+\n   'test a handshake error': function (done) {\n     var port = ++ports\n       , io = sio.listen(port)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7fcddcb3bbd236b46aa8fee6f4ce6c45afb7b03a",
            "date": "2025-01-07T09:53:32Z",
            "author_login": "benmccann"
          },
          {
            "sha": "7427109658591e7ce677a183a664d1f5327f37ea",
            "date": "2024-11-21T07:52:37Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "91e1c8b3584054db6072046404a24e79a17c1367",
            "date": "2024-10-25T06:13:15Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "8d5528aa2abc530f9e35f53935083894cec38c99",
            "date": "2024-10-25T06:00:26Z",
            "author_login": "darrachequesne"
          },
          {
            "sha": "71387e52942c26493a6220fa332ff73293eb93c7",
            "date": "2024-10-25T05:54:35Z",
            "author_login": "darrachequesne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-330",
    "description": "Socket.io is a realtime application framework that provides communication via websockets. Because socket.io 0.9.6 and earlier depends on `Math.random()` to create socket IDs, the IDs are predictable. An attacker is able to guess the socket ID and gain access to socket.io servers, potentially obtaining sensitive information.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-06-04T19:29:01.727",
    "last_modified": "2024-11-21T03:15:41.763",
    "fix_date": "2012-04-26T21:28:00Z"
  },
  "references": [
    {
      "url": "https://github.com/socketio/socket.io/commit/67b4eb9abdf111dfa9be4176d1709374a2b4ded8",
      "source": "support@hackerone.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io/issues/856",
      "source": "support@hackerone.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io/pull/857",
      "source": "support@hackerone.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://nodesecurity.io/advisories/321",
      "source": "support@hackerone.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io/commit/67b4eb9abdf111dfa9be4176d1709374a2b4ded8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io/issues/856",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/socketio/socket.io/pull/857",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://nodesecurity.io/advisories/321",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:25.882870",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "socket.io",
    "owner": "socketio",
    "created_at": "2010-03-11T18:24:48Z",
    "updated_at": "2025-01-14T18:27:28Z",
    "pushed_at": "2025-01-07T09:53:32Z",
    "size": 32081,
    "stars": 61496,
    "forks": 10137,
    "open_issues": 174,
    "watchers": 61496,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "TypeScript": 729258,
      "JavaScript": 441182,
      "Shell": 1229,
      "HTML": 372,
      "CSS": 183
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T22:12:35.890420"
  }
}