{
  "cve_id": "CVE-2017-16510",
  "github_data": {
    "repository": "WordPress/WordPress",
    "fix_commit": "a2693fd8602e3263b5925b9d799ddd577202167d",
    "related_commits": [
      "a2693fd8602e3263b5925b9d799ddd577202167d",
      "a2693fd8602e3263b5925b9d799ddd577202167d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "a2693fd8602e3263b5925b9d799ddd577202167d",
      "commit_date": "2017-10-31T12:00:49Z",
      "author": {
        "login": "pento",
        "type": "User",
        "stats": {
          "total_commits": 705,
          "average_weekly_commits": 1.0812883435582823,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 120
        }
      },
      "commit_message": {
        "title": "Database: Restore numbered placeholders in `wpdb::prepare()`.",
        "length": 632,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 183,
        "additions": 142,
        "deletions": 41
      },
      "files": [
        {
          "filename": "wp-includes/formatting.php",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -3754,6 +3754,11 @@ function _deep_replace( $search, $subject ) {\n  * Sometimes, spot-escaping is required or useful. One example\n  * is preparing an array for use in an IN clause.\n  *\n+ * NOTE: Since 4.8.3, '%' characters will be replaced with a placeholder string,\n+ * this prevents certain SQLi attacks from taking place. This change in behaviour\n+ * may cause issues for code that expects the return value of esc_sql() to be useable\n+ * for other purposes.\n+ *\n  * @since 2.8.0\n  *\n  * @global wpdb $wpdb WordPress database abstraction object."
        },
        {
          "filename": "wp-includes/meta.php",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -364,12 +364,11 @@ function delete_metadata($meta_type, $object_id, $meta_key, $meta_value = '', $d\n \t\treturn false;\n \n \tif ( $delete_all ) {\n-\t\t$value_clause = '';\n \t\tif ( '' !== $meta_value && null !== $meta_value && false !== $meta_value ) {\n-\t\t\t$value_clause = $wpdb->prepare( \" AND meta_value = %s\", $meta_value );\n+\t\t\t$object_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT $type_column FROM $table WHERE meta_key = %s AND meta_value = %s\", $meta_key, $meta_value ) );\n+\t\t} else {\n+\t\t\t$object_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT $type_column FROM $table WHERE meta_key = %s\", $meta_key ) );\n \t\t}\n-\n-\t\t$object_ids = $wpdb->get_col( $wpdb->prepare( \"SELECT $type_column FROM $table WHERE meta_key = %s $value_clause\", $meta_key ) );\n \t}\n \n \t/**"
        },
        {
          "filename": "wp-includes/post.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -4317,10 +4317,10 @@ function get_page_by_path( $page_path, $output = OBJECT, $post_type = 'page' ) {\n \t$page_path = str_replace('%2F', '/', $page_path);\n \t$page_path = str_replace('%20', ' ', $page_path);\n \t$parts = explode( '/', trim( $page_path, '/' ) );\n-\t$parts = esc_sql( $parts );\n \t$parts = array_map( 'sanitize_title_for_query', $parts );\n+\t$escaped_parts = esc_sql( $parts );\n \n-\t$in_string = \"'\" . implode( \"','\", $parts ) . \"'\";\n+\t$in_string = \"'\" . implode( \"','\", $escaped_parts ) . \"'\";\n \n \tif ( is_array( $post_type ) ) {\n \t\t$post_types = $post_type;"
        },
        {
          "filename": "wp-includes/version.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@\n  *\n  * @global string $wp_version\n  */\n-$wp_version = '4.9-RC1-42050';\n+$wp_version = '4.9-RC1-42056';\n \n /**\n  * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema."
        },
        {
          "filename": "wp-includes/wp-db.php",
          "status": "modified",
          "additions": 131,
          "deletions": 34,
          "patch": "@@ -1106,20 +1106,22 @@ function _weak_escape( $string ) {\n \tfunction _real_escape( $string ) {\n \t\tif ( $this->dbh ) {\n \t\t\tif ( $this->use_mysqli ) {\n-\t\t\t\treturn mysqli_real_escape_string( $this->dbh, $string );\n+\t\t\t\t$escaped = mysqli_real_escape_string( $this->dbh, $string );\n \t\t\t} else {\n-\t\t\t\treturn mysql_real_escape_string( $string, $this->dbh );\n+\t\t\t\t$escaped = mysql_real_escape_string( $string, $this->dbh );\n \t\t\t}\n-\t\t}\n-\n-\t\t$class = get_class( $this );\n-\t\tif ( function_exists( '__' ) ) {\n-\t\t\t/* translators: %s: database access abstraction class, usually wpdb or a class extending wpdb */\n-\t\t\t_doing_it_wrong( $class, sprintf( __( '%s must set a database connection for use with escaping.' ), $class ), '3.6.0' );\n \t\t} else {\n-\t\t\t_doing_it_wrong( $class, sprintf( '%s must set a database connection for use with escaping.', $class ), '3.6.0' );\n+\t\t\t$class = get_class( $this );\n+\t\t\tif ( function_exists( '__' ) ) {\n+\t\t\t\t/* translators: %s: database access abstraction class, usually wpdb or a class extending wpdb */\n+\t\t\t\t_doing_it_wrong( $class, sprintf( __( '%s must set a database connection for use with escaping.' ), $class ), '3.6.0' );\n+\t\t\t} else {\n+\t\t\t\t_doing_it_wrong( $class, sprintf( '%s must set a database connection for use with escaping.', $class ), '3.6.0' );\n+\t\t\t}\n+\t\t\t$escaped = addslashes( $string );\n \t\t}\n-\t\treturn addslashes( $string );\n+\n+\t\treturn $this->add_placeholder_escape( $escaped );\n \t}\n \n \t/**\n@@ -1201,14 +1203,14 @@ public function escape_by_ref( &$string ) {\n \t *\n \t * All placeholders MUST be left unquoted in the query string. A corresponding argument MUST be passed for each placeholder.\n \t *\n+\t * For compatibility with old behavior, numbered or formatted string placeholders (eg, %1$s, %5s) will not have quotes\n+\t * added by this function, so should be passed with appropriate quotes around them for your usage.\n+\t *\n \t * Literal percentage signs (%) in the query string must be written as %%. Percentage wildcards (for example,\n \t * to use in LIKE syntax) must be passed via a substitution argument containing the complete LIKE string, these\n \t * cannot be inserted directly in the query string. Also see {@see esc_like()}.\n \t *\n-\t * This method DOES NOT support sign, padding, alignment, width or precision specifiers.\n-\t * This method DOES NOT support argument numbering or swapping.\n-\t *\n-\t * Arguments may be passed as individual arguments to the method, or as a single array containing all arguments. A combination \n+\t * Arguments may be passed as individual arguments to the method, or as a single array containing all arguments. A combination\n \t * of the two is not supported.\n \t *\n \t * Examples:\n@@ -1225,8 +1227,9 @@ public function escape_by_ref( &$string ) {\n \t * @return string|void Sanitized query string, if there is a query to prepare.\n \t */\n \tpublic function prepare( $query, $args ) {\n-\t\tif ( is_null( $query ) )\n+\t\tif ( is_null( $query ) ) {\n \t\t\treturn;\n+\t\t}\n \n \t\t// This is not meant to be foolproof -- but it will catch obviously incorrect usage.\n \t\tif ( strpos( $query, '%' ) === false ) {\n@@ -1237,8 +1240,10 @@ public function prepare( $query, $args ) {\n \t\t$args = func_get_args();\n \t\tarray_shift( $args );\n \n-\t\t// If args were passed as an array (as in vsprintf), move them up\n+\t\t// If args were passed as an array (as in vsprintf), move them up.\n+\t\t$passed_as_array = false;\n \t\tif ( is_array( $args[0] ) && count( $args ) == 1 ) {\n+\t\t\t$passed_as_array = true;\n \t\t\t$args = $args[0];\n \t\t}\n \n@@ -1249,28 +1254,62 @@ public function prepare( $query, $args ) {\n \t\t\t}\n \t\t}\n \n-\t\t$query = str_replace( \"'%s'\", '%s', $query ); // in case someone mistakenly already singlequoted it\n-\t\t$query = str_replace( '\"%s\"', '%s', $query ); // doublequote unquoting\n-\t\t$query = preg_replace( '|(?<!%)%f|' , '%F', $query ); // Force floats to be locale unaware\n-\t\t$query = preg_replace( '|(?<!%)%s|', \"'%s'\", $query ); // quote the strings, avoiding escaped strings like %%s\n-\t\t$query = preg_replace( '/%(?:%|$|([^dsF]))/', '%%\\\\1', $query ); // escape any unescaped percents\n+\t\t/*\n+\t\t * Specify the formatting allowed in a placeholder. The following are allowed:\n+\t\t *\n+\t\t * - Sign specifier. eg, $+d\n+\t\t * - Numbered placeholders. eg, %1$s\n+\t\t * - Padding specifier, including custom padding characters. eg, %05s, %'#5s\n+\t\t * - Alignment specifier. eg, %05-s\n+\t\t * - Precision specifier. eg, %.2f\n+\t\t */\n+\t\t$allowed_format = '(?:[1-9][0-9]*[$])?[-+0-9]*(?: |0|\\'.)?[-+0-9]*(?:\\.[0-9]+)?';\n+\n+\t\t/*\n+\t\t * If a %s placeholder already has quotes around it, removing the existing quotes and re-inserting them\n+\t\t * ensures the quotes are consistent.\n+\t\t *\n+\t\t * For backwards compatibility, this is only applied to %s, and not to placeholders like %1$s, which are frequently\n+\t\t * used in the middle of longer strings, or as table name placeholders.\n+\t\t */\n+\t\t$query = str_replace( \"'%s'\", '%s', $query ); // Strip any existing single quotes.\n+\t\t$query = str_replace( '\"%s\"', '%s', $query ); // Strip any existing double quotes.\n+\t\t$query = preg_replace( '/(?<!%)%s/', \"'%s'\", $query ); // Quote the strings, avoiding escaped strings like %%s.\n+\n+\t\t$query = preg_replace( \"/(?<!%)(%($allowed_format)?f)/\" , '%\\\\2F', $query ); // Force floats to be locale unaware.\n \n-\t\t// Count the number of valid placeholders in the query\n-\t\t$placeholders = preg_match_all( '/(^|[^%]|(%%)+)%[sdF]/', $query, $matches );\n+\t\t$query = preg_replace( \"/%(?:%|$|(?!($allowed_format)?[sdF]))/\", '%%\\\\1', $query ); // Escape any unescaped percents.\n \n-\t\tif ( count ( $args ) !== $placeholders ) {\n-\t\t\twp_load_translations_early();\n-\t\t\t_doing_it_wrong( 'wpdb::prepare',\n-\t\t\t\t/* translators: 1: number of placeholders, 2: number of arguments passed */\n-\t\t\t\tsprintf( __( 'The query does not contain the correct number of placeholders (%1$d) for the number of arguments passed (%2$d).' ),\n-\t\t\t\t\t$placeholders,\n-\t\t\t\t\tcount( $args ) ),\n-\t\t\t\t'4.9.0'\n-\t\t\t);\n+\t\t// Count the number of valid placeholders in the query.\n+\t\t$placeholders = preg_match_all( \"/(^|[^%]|(%%)+)%($allowed_format)?[sdF]/\", $query, $matches );\n+\n+\t\tif ( count( $args ) !== $placeholders ) {\n+\t\t\tif ( 1 === $placeholders && $passed_as_array ) {\n+\t\t\t\t// If the passed query only expected one argument, but the wrong number of arguments were sent as an array, bail.\n+\t\t\t\twp_load_translations_early();\n+\t\t\t\t_doing_it_wrong( 'wpdb::prepare', __( 'The query only expected one placeholder, but an array of multiple placeholders was sent.' ), '4.9.0' );\n+\n+\t\t\t\treturn;\n+\t\t\t} else {\n+\t\t\t\t/*\n+\t\t\t\t * If we don't have the right number of placeholders, but they were passed as individual arguments,\n+\t\t\t\t * or we were expecting multiple arguments in an array, throw a warning.\n+\t\t\t\t */\n+\t\t\t\twp_load_translations_early();\n+\t\t\t\t_doing_it_wrong( 'wpdb::prepare',\n+\t\t\t\t\t/* translators: 1: number of placeholders, 2: number of arguments passed */\n+\t\t\t\t\tsprintf( __( 'The query does not contain the correct number of placeholders (%1$d) for the number of arguments passed (%2$d).' ),\n+\t\t\t\t\t\t$placeholders,\n+\t\t\t\t\t\tcount( $args ) ),\n+\t\t\t\t\t'4.8.3'\n+\t\t\t\t);\n+\t\t\t}\n \t\t}\n \n \t\tarray_walk( $args, array( $this, 'escape_by_ref' ) );\n-\t\treturn @vsprintf( $query, $args );\n+\t\t$query = @vsprintf( $query, $args );\n+\n+\t\treturn $this->add_placeholder_escape( $query );\n \t}\n \n \t/**\n@@ -1893,6 +1932,64 @@ private function _do_query( $query ) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Generates and returns a placeholder escape string for use in queries returned by ::prepare().\n+\t *\n+\t * @since 4.8.3\n+\t *\n+\t * @return string String to escape placeholders.\n+\t */\n+\tpublic function placeholder_escape() {\n+\t\tstatic $placeholder;\n+\n+\t\tif ( ! $placeholder ) {\n+\t\t\t// If ext/hash is not present, compat.php's hash_hmac() does not support sha256.\n+\t\t\t$algo = function_exists( 'hash' ) ? 'sha256' : 'sha1';\n+\t\t\t// Old WP installs may not have AUTH_SALT defined.\n+\t\t\t$salt = defined( 'AUTH_SALT' ) ? AUTH_SALT : rand();\n+\n+\t\t\t$placeholder = '{' . hash_hmac( $algo, uniqid( $salt, true ), $salt ) . '}';\n+\t\t}\n+\n+\t\t/*\n+\t\t * Add the filter to remove the placeholder escaper. Uses priority 0, so that anything\n+\t\t * else attached to this filter will recieve the query with the placeholder string removed.\n+\t\t */\n+\t\tif ( ! has_filter( 'query', array( $this, 'remove_placeholder_escape' ) ) ) {\n+\t\t\tadd_filter( 'query', array( $this, 'remove_placeholder_escape' ), 0 );\n+\t\t}\n+\n+\t\treturn $placeholder;\n+\t}\n+\n+\t/**\n+\t * Adds a placeholder escape string, to escape anything that resembles a printf() placeholder.\n+\t *\n+\t * @since 4.8.3\n+\t *\n+\t * @param string $query The query to escape.\n+\t * @return string The query with the placeholder escape string inserted where necessary.\n+\t */\n+\tpublic function add_placeholder_escape( $query ) {\n+\t\t/*\n+\t\t * To prevent returning anything that even vaguely resembles a placeholder,\n+\t\t * we clobber every % we can find.\n+\t\t */\n+\t\treturn str_replace( '%', $this->placeholder_escape(), $query );\n+\t}\n+\n+\t/**\n+\t * Removes the placeholder escape strings from a query.\n+\t *\n+\t * @since 4.8.3\n+\t *\n+\t * @param string $query The query from which the placeholder will be removed.\n+\t * @return string The query with the placeholder removed.\n+\t */\n+\tpublic function remove_placeholder_escape( $query ) {\n+\t\treturn str_replace( $this->placeholder_escape(), '%', $query );\n+\t}\n+\n \t/**\n \t * Insert a row into a table.\n \t *\n@@ -2064,7 +2161,7 @@ public function update( $table, $data, $where, $format = null, $where_format = n\n \t\t$conditions = implode( ' AND ', $conditions );\n \n \t\t$sql = \"UPDATE `$table` SET $fields WHERE $conditions\";\n-\t\t\n+\n \t\t$this->check_current_query = false;\n \t\treturn $this->query( $this->prepare( $sql, $values ) );\n \t}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cf2aebff7f24e3775678f5b5e70e58043021fecf",
            "date": "2025-01-25T23:51:24Z",
            "author_login": "audrasjb"
          },
          {
            "sha": "ffa50f3c7baa9b30335034c423a1dada4fba5be2",
            "date": "2025-01-25T17:11:23Z",
            "author_login": "audrasjb"
          },
          {
            "sha": "b74968d542e93ff5a9b088879cb4b2b06eb2602e",
            "date": "2025-01-25T14:34:20Z",
            "author_login": "SergeyBiryukov"
          },
          {
            "sha": "130a7a8567c1a13a9296abc9279f91dfc3e26dba",
            "date": "2025-01-25T14:12:19Z",
            "author_login": "audrasjb"
          },
          {
            "sha": "471cffffcc28c181524e5bf809f9efe2d96c99a2",
            "date": "2025-01-25T14:07:23Z",
            "author_login": "audrasjb"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-89",
    "description": "WordPress before 4.8.3 is affected by an issue where $wpdb->prepare() can create unexpected and unsafe queries leading to potential SQL injection (SQLi) in plugins and themes, as demonstrated by a \"double prepare\" approach, a different vulnerability than CVE-2017-14723.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-11-02T16:29:00.787",
    "last_modified": "2024-11-21T03:16:28.570",
    "fix_date": "2017-10-31T12:00:49Z"
  },
  "references": [
    {
      "url": "http://www.securityfocus.com/bid/101638",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://blog.ircmaxell.com/2017/10/disclosure-wordpress-wpdb-sql-injection-technical.html",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://codex.wordpress.org/Version_4.8.3",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/WordPress/WordPress/commit/a2693fd8602e3263b5925b9d799ddd577202167d",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2017/11/msg00003.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://wordpress.org/news/2017/10/wordpress-4-8-3-security-release/",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://wpvulndb.com/vulnerabilities/8941",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2018/dsa-4090",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://www.securityfocus.com/bid/101638",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://blog.ircmaxell.com/2017/10/disclosure-wordpress-wpdb-sql-injection-technical.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://codex.wordpress.org/Version_4.8.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/WordPress/WordPress/commit/a2693fd8602e3263b5925b9d799ddd577202167d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2017/11/msg00003.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://wordpress.org/news/2017/10/wordpress-4-8-3-security-release/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://wpvulndb.com/vulnerabilities/8941",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2018/dsa-4090",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:09.723223",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "WordPress",
    "owner": "WordPress",
    "created_at": "2011-12-01T07:05:17Z",
    "updated_at": "2025-01-25T23:52:13Z",
    "pushed_at": "2025-01-25T23:52:05Z",
    "size": 530651,
    "stars": 19812,
    "forks": 12704,
    "open_issues": 2,
    "watchers": 19812,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 20616593,
      "JavaScript": 5411354,
      "CSS": 4992383,
      "SCSS": 323898,
      "HTML": 48043
    },
    "commit_activity": {
      "total_commits_last_year": 1522,
      "avg_commits_per_week": 29.26923076923077,
      "days_active_last_year": 356
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:46:46.124114"
  }
}