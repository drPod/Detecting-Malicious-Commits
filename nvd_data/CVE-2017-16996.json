{
  "cve_id": "CVE-2017-16996",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "0c17d1d2c61936401f4702e1846e2c19b200f958",
    "related_commits": [
      "0c17d1d2c61936401f4702e1846e2c19b200f958",
      "0c17d1d2c61936401f4702e1846e2c19b200f958"
    ],
    "patch_url": "https://github.com/torvalds/linux/commit/0c17d1d2c61936401f4702e1846e2c19b200f958.patch",
    "fix_commit_details": {
      "sha": "0c17d1d2c61936401f4702e1846e2c19b200f958",
      "commit_date": "2017-12-19T04:11:55Z",
      "author": {
        "login": "thejh",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "bpf: fix incorrect tracking of register size truncation",
        "length": 1321,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 44,
        "additions": 27,
        "deletions": 17
      },
      "files": [
        {
          "filename": "kernel/bpf/verifier.c",
          "status": "modified",
          "additions": 27,
          "deletions": 17,
          "patch": "@@ -1067,6 +1067,29 @@ static int check_ptr_alignment(struct bpf_verifier_env *env,\n \t\t\t\t\t   strict);\n }\n \n+/* truncate register to smaller size (in bytes)\n+ * must be called with size < BPF_REG_SIZE\n+ */\n+static void coerce_reg_to_size(struct bpf_reg_state *reg, int size)\n+{\n+\tu64 mask;\n+\n+\t/* clear high bits in bit representation */\n+\treg->var_off = tnum_cast(reg->var_off, size);\n+\n+\t/* fix arithmetic bounds */\n+\tmask = ((u64)1 << (size * 8)) - 1;\n+\tif ((reg->umin_value & ~mask) == (reg->umax_value & ~mask)) {\n+\t\treg->umin_value &= mask;\n+\t\treg->umax_value &= mask;\n+\t} else {\n+\t\treg->umin_value = 0;\n+\t\treg->umax_value = mask;\n+\t}\n+\treg->smin_value = reg->umin_value;\n+\treg->smax_value = reg->umax_value;\n+}\n+\n /* check whether memory at (regno + off) is accessible for t = (read | write)\n  * if t==write, value_regno is a register which value is stored into memory\n  * if t==read, value_regno is a register which will receive the value from memory\n@@ -1200,9 +1223,7 @@ static int check_mem_access(struct bpf_verifier_env *env, int insn_idx, u32 regn\n \tif (!err && size < BPF_REG_SIZE && value_regno >= 0 && t == BPF_READ &&\n \t    regs[value_regno].type == SCALAR_VALUE) {\n \t\t/* b/h/w load zero-extends, mark upper bits as known 0 */\n-\t\tregs[value_regno].var_off =\n-\t\t\ttnum_cast(regs[value_regno].var_off, size);\n-\t\t__update_reg_bounds(&regs[value_regno]);\n+\t\tcoerce_reg_to_size(&regs[value_regno], size);\n \t}\n \treturn err;\n }\n@@ -1772,14 +1793,6 @@ static int check_call(struct bpf_verifier_env *env, int func_id, int insn_idx)\n \treturn 0;\n }\n \n-static void coerce_reg_to_32(struct bpf_reg_state *reg)\n-{\n-\t/* clear high 32 bits */\n-\treg->var_off = tnum_cast(reg->var_off, 4);\n-\t/* Update bounds */\n-\t__update_reg_bounds(reg);\n-}\n-\n static bool signed_add_overflows(s64 a, s64 b)\n {\n \t/* Do the add in u64, where overflow is well-defined */\n@@ -2017,8 +2030,8 @@ static int adjust_scalar_min_max_vals(struct bpf_verifier_env *env,\n \n \tif (BPF_CLASS(insn->code) != BPF_ALU64) {\n \t\t/* 32-bit ALU ops are (32,32)->64 */\n-\t\tcoerce_reg_to_32(dst_reg);\n-\t\tcoerce_reg_to_32(&src_reg);\n+\t\tcoerce_reg_to_size(dst_reg, 4);\n+\t\tcoerce_reg_to_size(&src_reg, 4);\n \t}\n \tsmin_val = src_reg.smin_value;\n \tsmax_val = src_reg.smax_value;\n@@ -2398,10 +2411,7 @@ static int check_alu_op(struct bpf_verifier_env *env, struct bpf_insn *insn)\n \t\t\t\t\treturn -EACCES;\n \t\t\t\t}\n \t\t\t\tmark_reg_unknown(env, regs, insn->dst_reg);\n-\t\t\t\t/* high 32 bits are known zero. */\n-\t\t\t\tregs[insn->dst_reg].var_off = tnum_cast(\n-\t\t\t\t\t\tregs[insn->dst_reg].var_off, 4);\n-\t\t\t\t__update_reg_bounds(&regs[insn->dst_reg]);\n+\t\t\t\tcoerce_reg_to_size(&regs[insn->dst_reg], 4);\n \t\t\t}\n \t\t} else {\n \t\t\t/* case: R = imm"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c3812b15000cc5b7b17c7238f8b12f6a22df0b1d",
            "date": "2025-01-14T18:07:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "79a1d390f879563119bf2848b621bc7eed228c7d",
            "date": "2025-01-14T17:54:57Z",
            "author_login": "torvalds"
          },
          {
            "sha": "c45323b7560ec87c37c729b703c86ee65f136d75",
            "date": "2025-01-13T17:03:18Z",
            "author_login": "torvalds"
          },
          {
            "sha": "34c8e74cd6667ef5da90d448a1af702c4b873bd3",
            "date": "2025-01-13T08:52:08Z",
            "author_login": "YageGeng"
          },
          {
            "sha": "cbc5dde0a461240046e8a41c43d7c3b76d5db952",
            "date": "2025-01-10T15:28:21Z",
            "author_login": "rikvanriel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-119",
    "description": "kernel/bpf/verifier.c in the Linux kernel through 4.14.8 allows local users to cause a denial of service (memory corruption) or possibly have unspecified other impact by leveraging register truncation mishandling.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2017-12-27T17:08:17.750",
    "last_modified": "2024-11-21T03:17:21.157",
    "fix_date": "2017-12-19T04:11:55Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=0c17d1d2c61936401f4702e1846e2c19b200f958",
      "source": "security@debian.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://openwall.com/lists/oss-security/2017/12/21/2",
      "source": "security@debian.org",
      "tags": [
        "Issue Tracking",
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/102267",
      "source": "security@debian.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugs.chromium.org/p/project-zero/issues/detail?id=1454",
      "source": "security@debian.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/0c17d1d2c61936401f4702e1846e2c19b200f958",
      "source": "security@debian.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=0c17d1d2c61936401f4702e1846e2c19b200f958",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://openwall.com/lists/oss-security/2017/12/21/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/102267",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugs.chromium.org/p/project-zero/issues/detail?id=1454",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/0c17d1d2c61936401f4702e1846e2c19b200f958",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:12.789250",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}