{
  "cve_id": "CVE-2017-17852",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "468f6eafa6c44cb2c5d8aad35e12f06c240a812a",
    "related_commits": [
      "468f6eafa6c44cb2c5d8aad35e12f06c240a812a",
      "468f6eafa6c44cb2c5d8aad35e12f06c240a812a"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "468f6eafa6c44cb2c5d8aad35e12f06c240a812a",
      "commit_date": "2017-12-19T04:11:56Z",
      "author": {
        "login": "thejh",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "bpf: fix 32-bit ALU op verification",
        "length": 344,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 28,
        "additions": 17,
        "deletions": 11
      },
      "files": [
        {
          "filename": "kernel/bpf/verifier.c",
          "status": "modified",
          "additions": 17,
          "deletions": 11,
          "patch": "@@ -2017,6 +2017,10 @@ static int adjust_ptr_min_max_vals(struct bpf_verifier_env *env,\n \treturn 0;\n }\n \n+/* WARNING: This function does calculations on 64-bit values, but the actual\n+ * execution may occur on 32-bit values. Therefore, things like bitshifts\n+ * need extra checks in the 32-bit case.\n+ */\n static int adjust_scalar_min_max_vals(struct bpf_verifier_env *env,\n \t\t\t\t      struct bpf_insn *insn,\n \t\t\t\t      struct bpf_reg_state *dst_reg,\n@@ -2027,12 +2031,8 @@ static int adjust_scalar_min_max_vals(struct bpf_verifier_env *env,\n \tbool src_known, dst_known;\n \ts64 smin_val, smax_val;\n \tu64 umin_val, umax_val;\n+\tu64 insn_bitness = (BPF_CLASS(insn->code) == BPF_ALU64) ? 64 : 32;\n \n-\tif (BPF_CLASS(insn->code) != BPF_ALU64) {\n-\t\t/* 32-bit ALU ops are (32,32)->64 */\n-\t\tcoerce_reg_to_size(dst_reg, 4);\n-\t\tcoerce_reg_to_size(&src_reg, 4);\n-\t}\n \tsmin_val = src_reg.smin_value;\n \tsmax_val = src_reg.smax_value;\n \tumin_val = src_reg.umin_value;\n@@ -2168,9 +2168,9 @@ static int adjust_scalar_min_max_vals(struct bpf_verifier_env *env,\n \t\t__update_reg_bounds(dst_reg);\n \t\tbreak;\n \tcase BPF_LSH:\n-\t\tif (umax_val > 63) {\n-\t\t\t/* Shifts greater than 63 are undefined.  This includes\n-\t\t\t * shifts by a negative number.\n+\t\tif (umax_val >= insn_bitness) {\n+\t\t\t/* Shifts greater than 31 or 63 are undefined.\n+\t\t\t * This includes shifts by a negative number.\n \t\t\t */\n \t\t\tmark_reg_unknown(env, regs, insn->dst_reg);\n \t\t\tbreak;\n@@ -2196,9 +2196,9 @@ static int adjust_scalar_min_max_vals(struct bpf_verifier_env *env,\n \t\t__update_reg_bounds(dst_reg);\n \t\tbreak;\n \tcase BPF_RSH:\n-\t\tif (umax_val > 63) {\n-\t\t\t/* Shifts greater than 63 are undefined.  This includes\n-\t\t\t * shifts by a negative number.\n+\t\tif (umax_val >= insn_bitness) {\n+\t\t\t/* Shifts greater than 31 or 63 are undefined.\n+\t\t\t * This includes shifts by a negative number.\n \t\t\t */\n \t\t\tmark_reg_unknown(env, regs, insn->dst_reg);\n \t\t\tbreak;\n@@ -2234,6 +2234,12 @@ static int adjust_scalar_min_max_vals(struct bpf_verifier_env *env,\n \t\tbreak;\n \t}\n \n+\tif (BPF_CLASS(insn->code) != BPF_ALU64) {\n+\t\t/* 32-bit ALU ops are (32,32)->32 */\n+\t\tcoerce_reg_to_size(dst_reg, 4);\n+\t\tcoerce_reg_to_size(&src_reg, 4);\n+\t}\n+\n \t__reg_deduce_bounds(dst_reg);\n \t__reg_bound_offset(dst_reg);\n \treturn 0;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-119",
    "description": "kernel/bpf/verifier.c in the Linux kernel through 4.14.8 allows local users to cause a denial of service (memory corruption) or possibly have unspecified other impact by leveraging mishandling of 32-bit ALU ops.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2017-12-27T17:08:20.060",
    "last_modified": "2024-11-21T03:18:49.003",
    "fix_date": "2017-12-19T04:11:56Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=468f6eafa6c44cb2c5d8aad35e12f06c240a812a",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2017/12/21/2",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/468f6eafa6c44cb2c5d8aad35e12f06c240a812a",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=468f6eafa6c44cb2c5d8aad35e12f06c240a812a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2017/12/21/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/468f6eafa6c44cb2c5d8aad35e12f06c240a812a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:12.789720",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}