{
  "cve_id": "CVE-2017-20146",
  "github_data": {
    "repository": "gorilla/handlers",
    "fix_commit": "90663712d74cb411cbef281bc1e08c19d1a76145",
    "related_commits": [
      "90663712d74cb411cbef281bc1e08c19d1a76145",
      "90663712d74cb411cbef281bc1e08c19d1a76145"
    ],
    "patch_url": "https://github.com/gorilla/handlers/commit/90663712d74cb411cbef281bc1e08c19d1a76145.patch",
    "fix_commit_details": {
      "sha": "90663712d74cb411cbef281bc1e08c19d1a76145",
      "commit_date": "2017-11-01T17:43:35Z",
      "author": {
        "login": "ejcx",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[bugfix] Don't return the origin header when configured to * (#116)",
        "length": 537,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 49,
        "additions": 47,
        "deletions": 2
      },
      "files": [
        {
          "filename": "cors.go",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -110,7 +110,17 @@ func (ch *cors) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n \t\tw.Header().Set(corsVaryHeader, corsOriginHeader)\n \t}\n \n-\tw.Header().Set(corsAllowOriginHeader, origin)\n+\treturnOrigin := origin\n+\tfor _, o := range ch.allowedOrigins {\n+\t\t// A configuration of * is different than explicitly setting an allowed\n+\t\t// origin. Returning arbitrary origin headers an an access control allow\n+\t\t// origin header is unsafe and is not required by any use case.\n+\t\tif o == corsOriginMatchAll {\n+\t\t\treturnOrigin = \"*\"\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\tw.Header().Set(corsAllowOriginHeader, returnOrigin)\n \n \tif r.Method == corsOptionMethod {\n \t\treturn"
        },
        {
          "filename": "cors_test.go",
          "status": "modified",
          "additions": 36,
          "deletions": 1,
          "patch": "@@ -327,10 +327,45 @@ func TestCORSHandlerWithCustomValidator(t *testing.T) {\n \t\treturn false\n \t}\n \n-\tCORS(AllowedOriginValidator(originValidator))(testHandler).ServeHTTP(rr, r)\n+\t// Specially craft a CORS object.\n+\thandleFunc := func(h http.Handler) http.Handler {\n+\t\tc := &cors{\n+\t\t\tallowedMethods: defaultCorsMethods,\n+\t\t\tallowedHeaders: defaultCorsHeaders,\n+\t\t\tallowedOrigins: []string{\"http://a.example.com\"},\n+\t\t\th:              h,\n+\t\t}\n+\t\tAllowedOriginValidator(originValidator)(c)\n+\t\treturn c\n+\t}\n+\n+\thandleFunc(testHandler).ServeHTTP(rr, r)\n \theader := rr.HeaderMap.Get(corsAllowOriginHeader)\n \tif header != r.URL.String() {\n \t\tt.Fatalf(\"bad header: expected %s to be %s, got %s.\", corsAllowOriginHeader, r.URL.String(), header)\n \t}\n \n }\n+\n+func TestCORSAllowStar(t *testing.T) {\n+\tr := newRequest(\"GET\", \"http://a.example.com\")\n+\tr.Header.Set(\"Origin\", r.URL.String())\n+\trr := httptest.NewRecorder()\n+\n+\ttestHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {})\n+\toriginValidator := func(origin string) bool {\n+\t\tif strings.HasSuffix(origin, \".example.com\") {\n+\t\t\treturn true\n+\t\t}\n+\t\treturn false\n+\t}\n+\n+\tCORS(AllowedOriginValidator(originValidator))(testHandler).ServeHTTP(rr, r)\n+\theader := rr.HeaderMap.Get(corsAllowOriginHeader)\n+\t// Because * is the default CORS policy (which is safe), we should be\n+\t// expect a * returned here as the Access Control Allow Origin header\n+\tif header != \"*\" {\n+\t\tt.Fatalf(\"bad header: expected %s to be %s, got %s.\", corsAllowOriginHeader, r.URL.String(), header)\n+\t}\n+\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9c61bd81e701cf500437e1b516b675cdd3b73ca7",
            "date": "2024-01-13T09:16:59Z",
            "author_login": "taoso"
          },
          {
            "sha": "02b3ca3432ded5ecc34ba10c90017113835a1ec0",
            "date": "2023-10-18T11:25:31Z",
            "author_login": "coreydaley"
          },
          {
            "sha": "fc9305756b095d6a0aede51f06fc85933647a25f",
            "date": "2023-08-16T02:06:09Z",
            "author_login": "iBug"
          },
          {
            "sha": "ca610efb585cfc8074a4b429b647500ad7cb1a2d",
            "date": "2023-07-31T07:38:33Z",
            "author_login": "coreydaley"
          },
          {
            "sha": "0eda2fcc0eb0ce2f924a5d726416f505d191f185",
            "date": "2023-07-30T15:49:53Z",
            "author_login": "bharat-rajani"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-346",
    "description": "Usage of the CORS handler may apply improper CORS headers, allowing the requester to explicitly control the value of the Access-Control-Allow-Origin header, which bypasses the expected behavior of the Same Origin Policy.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-27T22:15:11.070",
    "last_modified": "2024-11-21T03:22:44.560",
    "fix_date": "2017-11-01T17:43:35Z"
  },
  "references": [
    {
      "url": "https://github.com/gorilla/handlers/commit/90663712d74cb411cbef281bc1e08c19d1a76145",
      "source": "security@golang.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gorilla/handlers/pull/116",
      "source": "security@golang.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2020-0020",
      "source": "security@golang.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gorilla/handlers/commit/90663712d74cb411cbef281bc1e08c19d1a76145",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gorilla/handlers/pull/116",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2020-0020",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.220991",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "handlers",
    "owner": "gorilla",
    "created_at": "2013-02-01T03:53:49Z",
    "updated_at": "2025-01-11T01:53:42Z",
    "pushed_at": "2024-02-20T16:27:20Z",
    "size": 174,
    "stars": 1680,
    "forks": 272,
    "open_issues": 21,
    "watchers": 1680,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 81324,
      "Makefile": 946
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T19:02:38.210315"
  }
}