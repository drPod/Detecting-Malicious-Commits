{
  "cve_id": "CVE-2017-20154",
  "github_data": {
    "repository": "ghostlander/Phoenixcoin",
    "fix_commit": "987dd68f71a7d8276cef3b6c3d578fd4845b5699",
    "related_commits": [
      "987dd68f71a7d8276cef3b6c3d578fd4845b5699",
      "987dd68f71a7d8276cef3b6c3d578fd4845b5699"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "987dd68f71a7d8276cef3b6c3d578fd4845b5699",
      "commit_date": "2017-07-19T08:10:09Z",
      "author": {
        "login": "ghostlander",
        "type": "User",
        "stats": {
          "total_commits": 85,
          "average_weekly_commits": 0.1445578231292517,
          "total_additions": 186288,
          "total_deletions": 49166,
          "weeks_active": 40
        }
      },
      "commit_message": {
        "title": "Implement fLimitFree to CTxMemPool::accept()",
        "length": 151,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 86,
        "additions": 41,
        "deletions": 45
      },
      "files": [
        {
          "filename": "src/main.cpp",
          "status": "modified",
          "additions": 32,
          "deletions": 37,
          "patch": "@@ -480,9 +480,9 @@ bool CTransaction::CheckTransaction() const\n }\n \n \n-bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n-                        bool* pfMissingInputs)\n-{\n+bool CTxMemPool::accept(CTxDB &txdb, CTransaction &tx, bool fCheckInputs,\n+  bool fLimitFree, bool *pfMissingInputs) {\n+\n     if (pfMissingInputs)\n         *pfMissingInputs = false;\n \n@@ -566,32 +566,29 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n         unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n-        if(nFees < tx.GetMinFee(nTxSize, true, GMF_RELAY))\n-            return error(\"CTxMemPool::accept() : not enough fees\");\n+        if(fLimitFree && (nFees < tx.GetMinFee(nTxSize, true, GMF_RELAY)))\n+          return(error(\"CTxMemPool::accept() : not enough fees\"));\n \n         // Continuously rate-limit free transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make other's transactions take longer to confirm.\n-        if (nFees < MIN_RELAY_TX_FEE)\n-        {\n-            static CCriticalSection cs;\n+        if(fLimitFree && (nFees < MIN_RELAY_TX_FEE)) {\n             static double dFreeCount;\n             static int64 nLastTime;\n             int64 nNow = GetTime();\n \n-            {\n-                LOCK(cs);\n-                // Use an exponentially decaying ~10-minute window:\n-                dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-                nLastTime = nNow;\n-                // -limitfreerelay unit is thousand-bytes-per-minute\n-                // At default rate it would take over a month to fill 1GB\n-                if (dFreeCount > GetArg(\"-limitfreerelay\", 15)*10*1000 && !IsFromMe(tx))\n-                    return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");\n-                if (fDebug)\n-                    printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nTxSize);\n-                dFreeCount += nTxSize;\n-            }\n+            LOCK(cs);\n+\n+            // Use an exponentially decaying ~10-minute window:\n+            dFreeCount *= pow(1.0 - 1.0 / 600.0, (double)(nNow - nLastTime));\n+            nLastTime = nNow;\n+            // -limitfreerelay unit is thousand-bytes-per-minute\n+            // At default rate it would take over a month to fill 1GB\n+            if(dFreeCount > GetArg(\"-limitfreerelay\", 15) * 10 * 1000)\n+              return(error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\"));\n+            if(fDebug)\n+              printf(\"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount + nTxSize);\n+            dFreeCount += nTxSize;\n         }\n \n         // Check against previous transactions\n@@ -624,9 +621,10 @@ bool CTxMemPool::accept(CTxDB& txdb, CTransaction &tx, bool fCheckInputs,\n     return true;\n }\n \n-bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMissingInputs)\n-{\n-    return mempool.accept(txdb, *this, fCheckInputs, pfMissingInputs);\n+bool CTransaction::AcceptToMemoryPool(CTxDB &txdb, bool fCheckInputs, bool fLimitFree,\n+  bool *pfMissingInputs) {\n+\n+    return mempool.accept(txdb, *this, fCheckInputs, fLimitFree, pfMissingInputs);\n }\n \n bool CTxMemPool::addUnchecked(const uint256& hash, CTransaction &tx)\n@@ -730,9 +728,9 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(CTxDB &txdb, bool fCheckInputs) {\n+bool CMerkleTx::AcceptToMemoryPool(CTxDB &txdb, bool fCheckInputs, bool fLimitFree) {\n \n-    return(CTransaction::AcceptToMemoryPool(txdb, fCheckInputs));\n+    return(CTransaction::AcceptToMemoryPool(txdb, fCheckInputs, fLimitFree));\n }\n \n bool CMerkleTx::AcceptToMemoryPool()\n@@ -755,10 +753,10 @@ bool CWalletTx::AcceptWalletTransaction(CTxDB& txdb, bool fCheckInputs)\n             {\n                 uint256 hash = tx.GetHash();\n                 if (!mempool.exists(hash) && !txdb.ContainsTx(hash))\n-                    tx.AcceptToMemoryPool(txdb, fCheckInputs);\n+                    tx.AcceptToMemoryPool(txdb, fCheckInputs, false);\n             }\n         }\n-        return AcceptToMemoryPool(txdb, fCheckInputs);\n+        return(AcceptToMemoryPool(txdb, fCheckInputs, false));\n     }\n     return false;\n }\n@@ -1581,7 +1579,7 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n \n     // Resurrect memory transactions that were in the disconnected branch\n     BOOST_FOREACH(CTransaction& tx, vResurrect)\n-        tx.AcceptToMemoryPool(txdb, false);\n+      tx.AcceptToMemoryPool(txdb, true, false);\n \n     // Delete redundant memory transactions that are in the connected branch\n     BOOST_FOREACH(CTransaction &tx, vDelete) {\n@@ -3022,8 +3020,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         }\n \n         bool fMissingInputs = false;\n-        if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs))\n-        {\n+        if(tx.AcceptToMemoryPool(txdb, true, true, &fMissingInputs)) {\n             SyncWithWallets(tx, NULL, true);\n             RelayMessage(inv, vMsg);\n             mapAlreadyAskedFor.erase(inv);\n@@ -3044,20 +3041,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     CInv inv(MSG_TX, tx.GetHash());\n                     bool fMissingInputs2 = false;\n \n-                    if (tx.AcceptToMemoryPool(txdb, true, &fMissingInputs2))\n-                    {\n+                    if(tx.AcceptToMemoryPool(txdb, true, true, &fMissingInputs2)) {\n                         printf(\"   accepted orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n                         SyncWithWallets(tx, NULL, true);\n                         RelayMessage(inv, vMsg);\n                         mapAlreadyAskedFor.erase(inv);\n                         vWorkQueue.push_back(inv.hash);\n                         vEraseQueue.push_back(inv.hash);\n                     }\n-                    else if (!fMissingInputs2)\n-                    {\n-                        // invalid orphan\n+                    else if(!fMissingInputs2) {\n+                        /* Invalid or insufficient fee orphan */\n                         vEraseQueue.push_back(inv.hash);\n-                        printf(\"   removed invalid orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n+                        printf(\"   removed orphan tx %s\\n\", inv.hash.ToString().substr(0,10).c_str());\n                     }\n                 }\n             }"
        },
        {
          "filename": "src/main.h",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -716,7 +716,8 @@ class CTransaction\n                        const CBlockIndex* pindexBlock, bool fBlock, bool fMiner, bool fStrictPayToScriptHash=true);\n     bool ClientConnectInputs();\n     bool CheckTransaction() const;\n-    bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true, bool* pfMissingInputs=NULL);\n+    bool AcceptToMemoryPool(CTxDB &txdb, bool fCheckInputs=true, bool fLimitFree=true,\n+      bool *pfMissingInputs=NULL);\n \n protected:\n     const CTxOut& GetOutputFor(const CTxIn& input, const MapPrevTx& inputs) const;\n@@ -771,7 +772,7 @@ class CMerkleTx : public CTransaction\n     int GetDepthInMainChain() const { CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n     bool IsInMainChain() const { return GetDepthInMainChain() > 0; }\n     int GetBlocksToMaturity() const;\n-    bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true);\n+    bool AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs=true, bool fLimitFree=true);\n     bool AcceptToMemoryPool();\n };\n \n@@ -1721,8 +1722,8 @@ class CTxMemPool\n     std::map<uint256, CTransaction> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n \n-    bool accept(CTxDB& txdb, CTransaction &tx,\n-                bool fCheckInputs, bool* pfMissingInputs);\n+    bool accept(CTxDB &txdb, CTransaction &tx, bool fCheckInputs, bool fLimitFree,\n+      bool *pfMissingInputs);\n     bool addUnchecked(const uint256& hash, CTransaction &tx);\n     bool remove(const CTransaction &tx, bool fRecursive = false);\n     bool removeConflicts(const CTransaction &tx);"
        },
        {
          "filename": "src/rpcrawtransaction.cpp",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -494,8 +494,8 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n     {\n         // push to local node\n         CTxDB txdb(\"r\");\n-        if (!tx.AcceptToMemoryPool(txdb))\n-            throw JSONRPCError(-22, \"TX rejected\");\n+        if(!tx.AcceptToMemoryPool(txdb, true, false))\n+          throw(JSONRPCError(-22, \"TX rejected\"));\n \n         SyncWithWallets(tx, NULL, true);\n     }"
        },
        {
          "filename": "src/wallet.cpp",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1251,8 +1251,8 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         mapRequestCount[wtxNew.GetHash()] = 0;\n \n         // Broadcast\n-        if (!wtxNew.AcceptToMemoryPool())\n-        {\n+        CTxDB txdb(\"r\");\n+        if(!wtxNew.AcceptToMemoryPool(txdb, true, false)) {\n             // This must not fail. The transaction has already been signed and recorded.\n             printf(\"CommitTransaction() : Error: Transaction not valid\");\n             return false;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "719c2378cb8525ce328b8a14f9f53d611dbba7dc",
            "date": "2021-12-20T02:19:11Z",
            "author_login": "ghostlander"
          },
          {
            "sha": "2c5e2143bd0c83059fdfa0838bf93c8db3bd3e9a",
            "date": "2020-09-28T14:42:37Z",
            "author_login": "ghostlander"
          },
          {
            "sha": "48c459982ea5f6ef161b2cd60ee7913a18e26a89",
            "date": "2019-02-13T07:38:11Z",
            "author_login": "ghostlander"
          },
          {
            "sha": "b39b549d563ffaa8ee2bc1740e7113a3a9ba53f0",
            "date": "2019-02-12T23:06:37Z",
            "author_login": "ghostlander"
          },
          {
            "sha": "5c570d6ecabc5b80ad792624e77f1652d770fac8",
            "date": "2019-02-12T22:15:16Z",
            "author_login": "ghostlander"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-404",
    "description": "A vulnerability was found in ghostlander Phoenixcoin. It has been classified as problematic. Affected is the function CTxMemPool::accept of the file src/main.cpp. The manipulation leads to denial of service. Upgrading to version 0.6.6.1-pxc is able to address this issue. The name of the patch is 987dd68f71a7d8276cef3b6c3d578fd4845b5699. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217068.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-30T21:15:09.787",
    "last_modified": "2024-11-21T03:22:45.700",
    "fix_date": "2017-07-19T08:10:09Z"
  },
  "references": [
    {
      "url": "https://github.com/ghostlander/Phoenixcoin/commit/987dd68f71a7d8276cef3b6c3d578fd4845b5699",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ghostlander/Phoenixcoin/releases/tag/v0.6.6.1-pxc",
      "source": "cna@vuldb.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217068",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217068",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ghostlander/Phoenixcoin/commit/987dd68f71a7d8276cef3b6c3d578fd4845b5699",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ghostlander/Phoenixcoin/releases/tag/v0.6.6.1-pxc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217068",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217068",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.238419",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "Phoenixcoin",
    "owner": "ghostlander",
    "created_at": "2013-11-01T18:22:02Z",
    "updated_at": "2022-11-10T10:35:56Z",
    "pushed_at": "2021-12-20T02:23:21Z",
    "size": 3358,
    "stars": 18,
    "forks": 18,
    "open_issues": 6,
    "watchers": 18,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 1493315,
      "Assembly": 204978,
      "C": 66003,
      "QMake": 13379,
      "Makefile": 3685,
      "Objective-C++": 3020,
      "Python": 1002,
      "Shell": 793
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:17:00.928236"
  }
}