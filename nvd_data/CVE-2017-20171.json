{
  "cve_id": "CVE-2017-20171",
  "github_data": {
    "repository": "PrivateSky/apersistence",
    "fix_commit": "954425f61634b556fe644837a592a5b8fcfca068",
    "related_commits": [
      "954425f61634b556fe644837a592a5b8fcfca068",
      "954425f61634b556fe644837a592a5b8fcfca068"
    ],
    "patch_url": "https://github.com/PrivateSky/apersistence/commit/954425f61634b556fe644837a592a5b8fcfca068.patch",
    "fix_commit_details": {
      "sha": "954425f61634b556fe644837a592a5b8fcfca068",
      "commit_date": "2017-04-10T06:29:58Z",
      "author": {
        "login": "cprnT",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fixed SQL injection bug and changed type boolean from bit to tinyint",
        "length": 68,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 43,
        "additions": 13,
        "deletions": 30
      },
      "files": [
        {
          "filename": "db/sql/MySqlPersistence.js",
          "status": "modified",
          "additions": 3,
          "deletions": 5,
          "patch": "@@ -21,14 +21,13 @@ function sqlPersistenceStrategy(mysqlPool) {\n \n             var validModel = true;\n             var model = new modelUtil.ModelDescription(typeName,description,self);\n-\n+            \n             tableStructure[0].forEach(function(column){\n-                column['Type'] = column['Type'].split('(')[0];   //ignore size specifications such as INT(10)\n+                column['Type'] = column['Type'].split('(')[0];   //ignore size specifications such as INT(10) ... not neccesarily reccomender\n             });\n \n             model.persistentProperties.some(function(modelProperty){\n                 var expectedDbType = self.getDatabaseType(model.getFieldType(modelProperty));\n-\n                 if(expectedDbType === undefined){\n                     validModel = false;\n                     return true;\n@@ -97,8 +96,7 @@ function sqlPersistenceStrategy(mysqlPool) {\n                 callback(err);\n             }else{\n                 var model = modelUtil.getModel(typeName);\n-                \n-                var deserialized_id = modelUtil.deserialiseField(typeName,model.getPKField(),serialized_id,self)\n+                var deserialized_id = modelUtil.deserialiseField(typeName,model.getPKField(),serialized_id,self);\n                 var retObj = createRawObject(typeName, deserialized_id);\n                 if (result.length>0) {\n                     modelUtil.load(retObj, result[0], self);"
        },
        {
          "filename": "db/sql/mysqlUtils.js",
          "status": "modified",
          "additions": 2,
          "deletions": 9,
          "patch": "@@ -2,7 +2,7 @@\n  * Created by ctalmacel on 12/21/15.\n  */\n \n-\n+var mysql = require('mysql');\n var Q = require('q');\n var modelUtil = require(\"../../lib/ModelDescription.js\");\n \n@@ -58,14 +58,7 @@ exports.insertRow = function(tableName,serializedData){\n \n \n     for(var field in serializedData){\n-        \n-        if(model.getFieldDescription(field).type === 'boolean') {\n-            query+=' b\\''+serializedData[field]+'\\',';\n-        }else{\n-            query+=' \\''+serializedData[field]+'\\',';\n-        }\n-\n-\n+        query+= mysql.escape(serializedData[field])+',';\n     }\n     query = query.slice(0, -1);\n     query+=');';"
        },
        {
          "filename": "lib/BasicStrategy.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -14,7 +14,7 @@ function BasicStrategy(){\n         if(dbType !== undefined) {\n \n             if(dbType.indexOf(')') != -1){\n-                dbType = dbType.slice(dbType.indexOf('('));\n+                dbType = dbType.slice(0,dbType.indexOf('('));\n             }\n             typeToDbTypeCorrespondence[typeName] = dbType;\n             dbTypeToTypeCorrespondence[dbType] = typeName;"
        },
        {
          "filename": "lib/ModelDescription.js",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -132,7 +132,6 @@ function ModelDescription(typeName, description, strategy){\n \n         // throw erros if trying to access lazy fields that are not loaded or setting fields #this is not OOP:)\n         self.transientProperties.forEach(function(field){\n-\n             Object.defineProperty(res,field,{\n                 get:function(field){\n                     return null;\n@@ -249,7 +248,7 @@ exports.load = function( rawObject, from , strategy){\n     var rawModel = models[rawObject.__meta.typeName];\n     var props = rawModel.persistentProperties;\n     props.forEach(function(p){\n-        if(from[p] || from[p]===false) {\n+        if(from.hasOwnProperty(p)) {\n             var value = convertFrom(strategy, rawObject.__meta.typeName, p, from[p]);\n             rawObject[p] = value;\n             rawObject.__meta.savedValues[p] = value;"
        },
        {
          "filename": "lib/basicSQLTypes.js",
          "status": "modified",
          "additions": 5,
          "deletions": 12,
          "patch": "@@ -45,23 +45,22 @@ exports.registerTypeConverters = function(persistence){\n \n     persistence.registerConverter('boolean',\n         function(value){\n-            \n-            if(value[0] != '0') {\n+            if(value == 1) {\n                 return true;\n             }\n             else {\n                 return false;\n             }\n         },\n         function(value){\n-            if(value){\n-                return \"1\"\n+            if(value == true){\n+                return 1\n             }\n             else{\n-                return \"0\"\n+                return 0\n             }\n         },\n-        \"bit\"\n+        \"tinyint(1)\"\n     );\n \n     persistence.registerConverter('date',\n@@ -100,12 +99,6 @@ exports.registerTypeConverters = function(persistence){\n             if(arrayOfStuff == \"null\"){\n                 return null;\n             }\n-            if(arrayOfStuff.length>0&&arrayOfStuff[0].__meta){\n-                //the array is of lazy objects and was filled\n-                arrayOfStuff = arrayOfStuff.map(function(lazyLoadedObject){\n-                    return lazyLoadedObject.__meta.getPK()\n-                })\n-            }\n \n             return JSON.stringify(arrayOfStuff)\n         },"
        },
        {
          "filename": "test/fillLazyTest.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -109,7 +109,7 @@ assert.steps(\"Load lazy objects test\",[\n                 });\n             })\n         })\n-    }]);\n+    }],1000);\n \n \n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "112bf8ba24d2d8c79cad7eb2d5b06bca4a874523",
            "date": "2017-10-27T10:35:37Z",
            "author_login": "cprnT"
          },
          {
            "sha": "6e5bce6e651d80b558c5975f18ec8ca84756db3f",
            "date": "2017-10-27T10:33:01Z",
            "author_login": "cprnT"
          },
          {
            "sha": "136dae5c3580444385d053258e380e5e0170bcd0",
            "date": "2017-10-17T14:05:48Z",
            "author_login": "cprnT"
          },
          {
            "sha": "6eaa3a39eebecd1872f9b0c0876ecc40c2268a47",
            "date": "2017-10-17T13:39:10Z",
            "author_login": "cprnT"
          },
          {
            "sha": "10fad21df2334ea04e2ed24d9eb82d3a12f75acc",
            "date": "2017-10-17T13:20:11Z",
            "author_login": "cprnT"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-89",
    "description": "A vulnerability classified as critical has been found in PrivateSky apersistence. This affects an unknown part of the file db/sql/mysqlUtils.js. The manipulation leads to sql injection. The identifier of the patch is 954425f61634b556fe644837a592a5b8fcfca068. It is recommended to apply a patch to fix this issue. The identifier VDB-218457 was assigned to this vulnerability.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-17T23:15:15.417",
    "last_modified": "2024-11-21T03:22:48.110",
    "fix_date": "2017-04-10T06:29:58Z"
  },
  "references": [
    {
      "url": "https://github.com/PrivateSky/apersistence/commit/954425f61634b556fe644837a592a5b8fcfca068",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.218457",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://vuldb.com/?id.218457",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/PrivateSky/apersistence/commit/954425f61634b556fe644837a592a5b8fcfca068",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.218457",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://vuldb.com/?id.218457",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory",
        "VDB Entry"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.569681",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "apersistence",
    "owner": "PrivateSky",
    "created_at": "2015-03-09T15:10:39Z",
    "updated_at": "2016-10-26T15:14:36Z",
    "pushed_at": "2017-10-27T10:35:43Z",
    "size": 134,
    "stars": 1,
    "forks": 1,
    "open_issues": 0,
    "watchers": 1,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 96142
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T19:45:58.612044"
  }
}