{
  "cve_id": "CVE-2017-2298",
  "github_data": {
    "repository": "puppetlabs/mcollective-sshkey-security",
    "fix_commit": "3388a3109f4fb1c69fa8505e991bf59ca20d19a2",
    "related_commits": [
      "3388a3109f4fb1c69fa8505e991bf59ca20d19a2",
      "3388a3109f4fb1c69fa8505e991bf59ca20d19a2"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "3388a3109f4fb1c69fa8505e991bf59ca20d19a2",
      "commit_date": "2017-06-28T22:12:00Z",
      "author": {
        "login": "MikaelSmith",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "(MCOP-600) Prevent public key overwriting attack via identity",
        "length": 472,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 39,
        "additions": 29,
        "deletions": 10
      },
      "files": [
        {
          "filename": "security/sshkey.rb",
          "status": "modified",
          "additions": 10,
          "deletions": 3,
          "patch": "@@ -142,20 +142,27 @@ def write_key_to_disk(key, identity)\n         end\n \n         if File.directory?(publickey_dir)\n-          if File.exists?(old_keyfile = File.join(publickey_dir, \"#{identity}_pub.pem\"))\n+          # Reject identity if it would result in directory traversal.\n+          old_keyfile = File.join(File.expand_path(publickey_dir), \"#{identity}_pub.pem\")\n+          unless File.expand_path(old_keyfile) == old_keyfile\n+            Log.warn(\"Identity returned by server would result in directory traversal. Not writing key to disk.\")\n+            return\n+          end\n+\n+          if File.exists?(old_keyfile)\n             old_key = File.read(old_keyfile).chomp\n \n             unless old_key == key\n               unless lookup_config_option('overwrite_stored_keys', 'n') =~ /^1|y/\n                 Log.warn(\"Public key sent from '%s' does not match the stored key. Not overwriting.\" % identity)\n               else\n                 Log.warn(\"Public key sent from '%s' does not match the stored key. Overwriting.\" % identity)\n-                File.open(File.join(publickey_dir, \"#{identity}_pub.pem\"), 'w') { |f| f.puts key }\n+                File.open(old_keyfile, 'w') { |f| f.puts key }\n               end\n             end\n           else\n             Log.debug(\"Discovered a new public key for '%s'. Writing to '%s'\" % [identity, publickey_dir])\n-            File.open(File.join(publickey_dir, \"#{identity}_pub.pem\"), 'w') { |f| f.puts key }\n+            File.open(old_keyfile, 'w') { |f| f.puts key }\n           end\n         else\n           raise(\"Cannot write public key to '%s'. Directory does not exist.\" % publickey_dir)"
        },
        {
          "filename": "spec/security/sshkey_spec.rb",
          "status": "modified",
          "additions": 19,
          "deletions": 7,
          "patch": "@@ -280,13 +280,23 @@ class Verifier; end\n           }.to raise_error\n         end\n \n+        it 'should fail if identity would result in directory traversal' do\n+          @plugin.stubs(:lookup_config_option).with('learn_public_keys').returns('1')\n+          @plugin.stubs(:lookup_config_option).with('publickey_dir').returns('ssh/pkd')\n+          File.stubs(:directory?).with('ssh/pkd').returns(true)\n+          Log.expects(:warn)\n+          File.expects(:open).never\n+          @plugin.send(:write_key_to_disk, 'ssh-rsa abcd', '../test')\n+        end\n+\n         it 'should write the public key to disk if its the first time its been seen' do\n           @plugin.stubs(:lookup_config_option).with('learn_public_keys').returns('1')\n           @plugin.stubs(:lookup_config_option).with('publickey_dir').returns('ssh/pkd')\n           File.stubs(:directory?).with('ssh/pkd').returns(true)\n-          File.stubs(:exists?).with('ssh/pkd/rspec_pub.pem').returns(false)\n+          full_path = File.join(File.expand_path('ssh/pkd'), 'rspec_pub.pem')\n+          File.stubs(:exists?).with(full_path).returns(false)\n           file = mock\n-          File.expects(:open).with('ssh/pkd/rspec_pub.pem', 'w').yields(file)\n+          File.expects(:open).with(full_path, 'w').yields(file)\n           file.expects(:puts).with('ssh-rsa abcd')\n           @plugin.send(:write_key_to_disk, 'ssh-rsa abcd', 'rspec')\n         end\n@@ -296,8 +306,9 @@ class Verifier; end\n           @plugin.stubs(:lookup_config_option).with('publickey_dir').returns('ssh/pkd')\n           @plugin.stubs(:lookup_config_option).with('overwrite_stored_keys', 'n').returns('n')\n           File.stubs(:directory?).with('ssh/pkd').returns(true)\n-          File.stubs(:exists?).with('ssh/pkd/rspec_pub.pem').returns(true)\n-          File.stubs(:read).with('ssh/pkd/rspec_pub.pem').returns('ssh-rsa dcba')\n+          full_path = File.join(File.expand_path('ssh/pkd'), 'rspec_pub.pem')\n+          File.stubs(:exists?).with(full_path).returns(true)\n+          File.stubs(:read).with(full_path).returns('ssh-rsa dcba')\n           Log.expects(:warn)\n           File.expects(:open).never\n           @plugin.send(:write_key_to_disk, 'ssh-rsa abcd', 'rspec')\n@@ -308,10 +319,11 @@ class Verifier; end\n           @plugin.stubs(:lookup_config_option).with('publickey_dir').returns('ssh/pkd')\n           @plugin.stubs(:lookup_config_option).with('overwrite_stored_keys', 'n').returns('1')\n           File.stubs(:directory?).with('ssh/pkd').returns(true)\n-          File.stubs(:exists?).with('ssh/pkd/rspec_pub.pem').returns(true)\n-          File.stubs(:read).with('ssh/pkd/rspec_pub.pem').returns('ssh-rsa dcba')\n+          full_path = File.join(File.expand_path('ssh/pkd'), 'rspec_pub.pem')\n+          File.stubs(:exists?).with(full_path).returns(true)\n+          File.stubs(:read).with(full_path).returns('ssh-rsa dcba')\n           file = mock\n-          File.expects(:open).with('ssh/pkd/rspec_pub.pem', 'w').yields(file)\n+          File.expects(:open).with(full_path, 'w').yields(file)\n           file.expects(:puts).with('ssh-rsa abcd')\n           Log.expects(:warn)\n           @plugin.send(:write_key_to_disk, 'ssh-rsa abcd', 'rspec')"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "83d8bf796364e10cb79325dd2cc0353e8dcf0818",
            "date": "2018-11-27T22:04:22Z",
            "author_login": "ripienaar"
          },
          {
            "sha": "a8fba800eef005285a78bc21af90f32e6a4bebeb",
            "date": "2018-04-09T18:20:53Z",
            "author_login": "MikaelSmith"
          },
          {
            "sha": "a56257de22de0d36a2a10b66c3a2fad3afdcb3ec",
            "date": "2017-06-30T17:54:27Z",
            "author_login": "MikaelSmith"
          },
          {
            "sha": "e45cf4a04efe82259ca57d19abe2ba02ff7d3ddb",
            "date": "2017-06-29T22:10:58Z",
            "author_login": "MikaelSmith"
          },
          {
            "sha": "41d8b4ed5701618da329a3d79772b57b92b0d0f5",
            "date": "2017-06-29T21:40:28Z",
            "author_login": "mruzicka"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-20",
    "description": "The mcollective-sshkey-security plugin before 0.5.1 for Puppet uses a server-specified identifier as part of a path where a file is written. A compromised server could use this to write a file to an arbitrary location on the client with the filename appended with the string \"_pub.pem\".",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2017-06-30T20:29:00.217",
    "last_modified": "2024-11-21T03:23:14.110",
    "fix_date": "2017-06-28T22:12:00Z"
  },
  "references": [
    {
      "url": "https://github.com/puppetlabs/mcollective-sshkey-security/blob/0.5.1/CHANGELOG.md",
      "source": "security@puppet.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/puppetlabs/mcollective-sshkey-security/commit/3388a3109f4fb1c69fa8505e991bf59ca20d19a2",
      "source": "security@puppet.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://puppet.com/security/cve/cve-2017-2298",
      "source": "security@puppet.com",
      "tags": [
        "Mitigation",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/puppetlabs/mcollective-sshkey-security/blob/0.5.1/CHANGELOG.md",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/puppetlabs/mcollective-sshkey-security/commit/3388a3109f4fb1c69fa8505e991bf59ca20d19a2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://puppet.com/security/cve/cve-2017-2298",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:01.671208",
    "processing_status": "enhanced"
  }
}