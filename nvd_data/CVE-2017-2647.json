{
  "cve_id": "CVE-2017-2647",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "c06cfb08b88dfbe13be44a69ae2fdc3a7c902d81",
    "related_commits": [
      "c06cfb08b88dfbe13be44a69ae2fdc3a7c902d81",
      "c06cfb08b88dfbe13be44a69ae2fdc3a7c902d81"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "c06cfb08b88dfbe13be44a69ae2fdc3a7c902d81",
      "commit_date": "2014-09-16T16:36:06Z",
      "author": {
        "login": "dhowells",
        "type": "User",
        "stats": {
          "total_commits": 3553,
          "average_weekly_commits": 2.9832073887489505,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 621
        }
      },
      "commit_message": {
        "title": "KEYS: Remove key_type::match in favour of overriding default by match_preparse",
        "length": 596,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 76,
        "additions": 31,
        "deletions": 45
      },
      "files": [
        {
          "filename": "crypto/asymmetric_keys/asymmetric_type.c",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -59,8 +59,8 @@ EXPORT_SYMBOL_GPL(asymmetric_keyid_match);\n  *\t\"id:<id>\"\t- request a key matching the ID\n  *\t\"<subtype>:<id>\" - request a key of a subtype\n  */\n-static int asymmetric_key_match(const struct key *key,\n-\t\t\t\tconst struct key_match_data *match_data)\n+static int asymmetric_key_cmp(const struct key *key,\n+\t\t\t      const struct key_match_data *match_data)\n {\n \tconst struct asymmetric_key_subtype *subtype = asymmetric_key_subtype(key);\n \tconst char *description = match_data->raw_data;\n@@ -110,6 +110,7 @@ static int asymmetric_key_match(const struct key *key,\n static int asymmetric_key_match_preparse(struct key_match_data *match_data)\n {\n \tmatch_data->lookup_type = KEYRING_SEARCH_LOOKUP_ITERATE;\n+\tmatch_data->cmp = asymmetric_key_cmp;\n \treturn 0;\n }\n \n@@ -224,7 +225,6 @@ struct key_type key_type_asymmetric = {\n \t.free_preparse\t= asymmetric_key_free_preparse,\n \t.instantiate\t= generic_key_instantiate,\n \t.match_preparse\t= asymmetric_key_match_preparse,\n-\t.match\t\t= asymmetric_key_match,\n \t.match_free\t= asymmetric_key_match_free,\n \t.destroy\t= asymmetric_key_destroy,\n \t.describe\t= asymmetric_key_describe,"
        },
        {
          "filename": "crypto/asymmetric_keys/pkcs7_key_type.c",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -75,7 +75,6 @@ static struct key_type key_type_pkcs7 = {\n \t.preparse\t\t= pkcs7_preparse,\n \t.free_preparse\t\t= user_free_preparse,\n \t.instantiate\t\t= generic_key_instantiate,\n-\t.match\t\t\t= user_match,\n \t.revoke\t\t\t= user_revoke,\n \t.destroy\t\t= user_destroy,\n \t.describe\t\t= user_describe,"
        },
        {
          "filename": "fs/cifs/cifs_spnego.c",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -62,7 +62,6 @@ cifs_spnego_key_destroy(struct key *key)\n struct key_type cifs_spnego_key_type = {\n \t.name\t\t= \"cifs.spnego\",\n \t.instantiate\t= cifs_spnego_key_instantiate,\n-\t.match\t\t= user_match,\n \t.destroy\t= cifs_spnego_key_destroy,\n \t.describe\t= user_describe,\n };"
        },
        {
          "filename": "fs/cifs/cifsacl.c",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -84,7 +84,6 @@ static struct key_type cifs_idmap_key_type = {\n \t.instantiate = cifs_idmap_key_instantiate,\n \t.destroy     = cifs_idmap_key_destroy,\n \t.describe    = user_describe,\n-\t.match       = user_match,\n };\n \n static char *"
        },
        {
          "filename": "fs/nfs/idmap.c",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -177,7 +177,6 @@ static struct key_type key_type_id_resolver = {\n \t.preparse\t= user_preparse,\n \t.free_preparse\t= user_free_preparse,\n \t.instantiate\t= generic_key_instantiate,\n-\t.match\t\t= user_match,\n \t.revoke\t\t= user_revoke,\n \t.destroy\t= user_destroy,\n \t.describe\t= user_describe,\n@@ -401,7 +400,6 @@ static struct key_type key_type_id_resolver_legacy = {\n \t.preparse\t= user_preparse,\n \t.free_preparse\t= user_free_preparse,\n \t.instantiate\t= generic_key_instantiate,\n-\t.match\t\t= user_match,\n \t.revoke\t\t= user_revoke,\n \t.destroy\t= user_destroy,\n \t.describe\t= user_describe,"
        },
        {
          "filename": "include/keys/user-type.h",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -36,13 +36,10 @@ extern struct key_type key_type_user;\n extern struct key_type key_type_logon;\n \n struct key_preparsed_payload;\n-struct key_match_data;\n \n extern int user_preparse(struct key_preparsed_payload *prep);\n extern void user_free_preparse(struct key_preparsed_payload *prep);\n extern int user_update(struct key *key, struct key_preparsed_payload *prep);\n-extern int user_match(const struct key *key,\n-\t\t      const struct key_match_data *match_data);\n extern void user_revoke(struct key *key);\n extern void user_destroy(struct key *key);\n extern void user_describe(const struct key *user, struct seq_file *m);"
        },
        {
          "filename": "include/linux/key-type.h",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -113,10 +113,6 @@ struct key_type {\n \t */\n \tint (*match_preparse)(struct key_match_data *match_data);\n \n-\t/* match a key against a description */\n-\tint (*match)(const struct key *key,\n-\t\t     const struct key_match_data *match_data);\n-\n \t/* Free preparsed match data (optional).  This should be supplied it\n \t * ->match_preparse() is supplied. */\n \tvoid (*match_free)(struct key_match_data *match_data);"
        },
        {
          "filename": "net/ceph/crypto.c",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -476,7 +476,6 @@ struct key_type key_type_ceph = {\n \t.preparse\t= ceph_key_preparse,\n \t.free_preparse\t= ceph_key_free_preparse,\n \t.instantiate\t= generic_key_instantiate,\n-\t.match\t\t= user_match,\n \t.destroy\t= ceph_key_destroy,\n };\n "
        },
        {
          "filename": "net/dns_resolver/dns_key.c",
          "status": "modified",
          "additions": 13,
          "deletions": 4,
          "patch": "@@ -176,9 +176,8 @@ static void dns_resolver_free_preparse(struct key_preparsed_payload *prep)\n  * The domain name may be a simple name or an absolute domain name (which\n  * should end with a period).  The domain name is case-independent.\n  */\n-static int\n-dns_resolver_match(const struct key *key,\n-\t\t   const struct key_match_data *match_data)\n+static int dns_resolver_cmp(const struct key *key,\n+\t\t\t    const struct key_match_data *match_data)\n {\n \tint slen, dlen, ret = 0;\n \tconst char *src = key->description, *dsp = match_data->raw_data;\n@@ -209,6 +208,16 @@ dns_resolver_match(const struct key *key,\n \treturn ret;\n }\n \n+/*\n+ * Preparse the match criterion.\n+ */\n+static int dns_resolver_match_preparse(struct key_match_data *match_data)\n+{\n+\tmatch_data->lookup_type = KEYRING_SEARCH_LOOKUP_ITERATE;\n+\tmatch_data->cmp = dns_resolver_cmp;\n+\treturn 0;\n+}\n+\n /*\n  * Describe a DNS key\n  */\n@@ -243,7 +252,7 @@ struct key_type key_type_dns_resolver = {\n \t.preparse\t= dns_resolver_preparse,\n \t.free_preparse\t= dns_resolver_free_preparse,\n \t.instantiate\t= generic_key_instantiate,\n-\t.match\t\t= dns_resolver_match,\n+\t.match_preparse\t= dns_resolver_match_preparse,\n \t.revoke\t\t= user_revoke,\n \t.destroy\t= user_destroy,\n \t.describe\t= dns_resolver_describe,"
        },
        {
          "filename": "net/rxrpc/ar-key.c",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -44,7 +44,6 @@ struct key_type key_type_rxrpc = {\n \t.preparse\t= rxrpc_preparse,\n \t.free_preparse\t= rxrpc_free_preparse,\n \t.instantiate\t= generic_key_instantiate,\n-\t.match\t\t= user_match,\n \t.destroy\t= rxrpc_destroy,\n \t.describe\t= rxrpc_describe,\n \t.read\t\t= rxrpc_read,\n@@ -61,7 +60,6 @@ struct key_type key_type_rxrpc_s = {\n \t.preparse\t= rxrpc_preparse_s,\n \t.free_preparse\t= rxrpc_free_preparse_s,\n \t.instantiate\t= generic_key_instantiate,\n-\t.match\t\t= user_match,\n \t.destroy\t= rxrpc_destroy_s,\n \t.describe\t= rxrpc_describe,\n };"
        },
        {
          "filename": "security/keys/big_key.c",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -36,7 +36,6 @@ struct key_type key_type_big_key = {\n \t.preparse\t\t= big_key_preparse,\n \t.free_preparse\t\t= big_key_free_preparse,\n \t.instantiate\t\t= generic_key_instantiate,\n-\t.match\t\t\t= user_match,\n \t.revoke\t\t\t= big_key_revoke,\n \t.destroy\t\t= big_key_destroy,\n \t.describe\t\t= big_key_describe,"
        },
        {
          "filename": "security/keys/encrypted-keys/encrypted.c",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -970,7 +970,6 @@ struct key_type key_type_encrypted = {\n \t.name = \"encrypted\",\n \t.instantiate = encrypted_instantiate,\n \t.update = encrypted_update,\n-\t.match = user_match,\n \t.destroy = encrypted_destroy,\n \t.describe = user_describe,\n \t.read = encrypted_read,"
        },
        {
          "filename": "security/keys/internal.h",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -127,6 +127,8 @@ struct keyring_search_context {\n \tstruct timespec\t\tnow;\n };\n \n+extern int key_default_cmp(const struct key *key,\n+\t\t\t   const struct key_match_data *match_data);\n extern key_ref_t keyring_search_aux(key_ref_t keyring_ref,\n \t\t\t\t    struct keyring_search_context *ctx);\n "
        },
        {
          "filename": "security/keys/key.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -799,7 +799,7 @@ key_ref_t key_create_or_update(key_ref_t keyring_ref,\n \t}\n \n \tkey_ref = ERR_PTR(-EINVAL);\n-\tif (!index_key.type->match || !index_key.type->instantiate ||\n+\tif (!index_key.type->instantiate ||\n \t    (!index_key.description && !index_key.type->preparse))\n \t\tgoto error_put_type;\n "
        },
        {
          "filename": "security/keys/keyring.c",
          "status": "modified",
          "additions": 10,
          "deletions": 5,
          "patch": "@@ -89,7 +89,6 @@ struct key_type key_type_keyring = {\n \t.preparse\t= keyring_preparse,\n \t.free_preparse\t= keyring_free_preparse,\n \t.instantiate\t= keyring_instantiate,\n-\t.match\t\t= user_match,\n \t.revoke\t\t= keyring_revoke,\n \t.destroy\t= keyring_destroy,\n \t.describe\t= keyring_describe,\n@@ -511,6 +510,15 @@ struct key *keyring_alloc(const char *description, kuid_t uid, kgid_t gid,\n }\n EXPORT_SYMBOL(keyring_alloc);\n \n+/*\n+ * By default, we keys found by getting an exact match on their descriptions.\n+ */\n+int key_default_cmp(const struct key *key,\n+\t\t    const struct key_match_data *match_data)\n+{\n+\treturn strcmp(key->description, match_data->raw_data) == 0;\n+}\n+\n /*\n  * Iteration function to consider each key found.\n  */\n@@ -884,17 +892,14 @@ key_ref_t keyring_search(key_ref_t keyring,\n \t\t.index_key.type\t\t= type,\n \t\t.index_key.description\t= description,\n \t\t.cred\t\t\t= current_cred(),\n-\t\t.match_data.cmp\t\t= type->match,\n+\t\t.match_data.cmp\t\t= key_default_cmp,\n \t\t.match_data.raw_data\t= description,\n \t\t.match_data.lookup_type\t= KEYRING_SEARCH_LOOKUP_DIRECT,\n \t\t.flags\t\t\t= KEYRING_SEARCH_DO_STATE_CHECK,\n \t};\n \tkey_ref_t key;\n \tint ret;\n \n-\tif (!ctx.match_data.cmp)\n-\t\treturn ERR_PTR(-ENOKEY);\n-\n \tif (type->match_preparse) {\n \t\tret = type->match_preparse(&ctx.match_data);\n \t\tif (ret < 0)"
        },
        {
          "filename": "security/keys/request_key.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -531,7 +531,7 @@ struct key *request_key_and_link(struct key_type *type,\n \t\t.index_key.type\t\t= type,\n \t\t.index_key.description\t= description,\n \t\t.cred\t\t\t= current_cred(),\n-\t\t.match_data.cmp\t\t= type->match,\n+\t\t.match_data.cmp\t\t= key_default_cmp,\n \t\t.match_data.raw_data\t= description,\n \t\t.match_data.lookup_type\t= KEYRING_SEARCH_LOOKUP_DIRECT,\n \t};"
        },
        {
          "filename": "security/keys/request_key_auth.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -246,7 +246,7 @@ struct key *key_get_instantiation_authkey(key_serial_t target_id)\n \t\t.index_key.type\t\t= &key_type_request_key_auth,\n \t\t.index_key.description\t= description,\n \t\t.cred\t\t\t= current_cred(),\n-\t\t.match_data.cmp\t\t= user_match,\n+\t\t.match_data.cmp\t\t= key_default_cmp,\n \t\t.match_data.raw_data\t= description,\n \t\t.match_data.lookup_type\t= KEYRING_SEARCH_LOOKUP_DIRECT,\n \t};"
        },
        {
          "filename": "security/keys/trusted.c",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -1096,7 +1096,6 @@ struct key_type key_type_trusted = {\n \t.name = \"trusted\",\n \t.instantiate = trusted_instantiate,\n \t.update = trusted_update,\n-\t.match = user_match,\n \t.destroy = trusted_destroy,\n \t.describe = user_describe,\n \t.read = trusted_read,"
        },
        {
          "filename": "security/keys/user_defined.c",
          "status": "modified",
          "additions": 0,
          "deletions": 12,
          "patch": "@@ -30,7 +30,6 @@ struct key_type key_type_user = {\n \t.free_preparse\t\t= user_free_preparse,\n \t.instantiate\t\t= generic_key_instantiate,\n \t.update\t\t\t= user_update,\n-\t.match\t\t\t= user_match,\n \t.revoke\t\t\t= user_revoke,\n \t.destroy\t\t= user_destroy,\n \t.describe\t\t= user_describe,\n@@ -51,7 +50,6 @@ struct key_type key_type_logon = {\n \t.free_preparse\t\t= user_free_preparse,\n \t.instantiate\t\t= generic_key_instantiate,\n \t.update\t\t\t= user_update,\n-\t.match\t\t\t= user_match,\n \t.revoke\t\t\t= user_revoke,\n \t.destroy\t\t= user_destroy,\n \t.describe\t\t= user_describe,\n@@ -136,16 +134,6 @@ int user_update(struct key *key, struct key_preparsed_payload *prep)\n \n EXPORT_SYMBOL_GPL(user_update);\n \n-/*\n- * match users on their name\n- */\n-int user_match(const struct key *key, const struct key_match_data *match_data)\n-{\n-\treturn strcmp(key->description, match_data->raw_data) == 0;\n-}\n-\n-EXPORT_SYMBOL_GPL(user_match);\n-\n /*\n  * dispose of the links from a revoked keyring\n  * - called with the key sem write-locked"
        }
      ],
      "file_patterns": {
        "security_files": 16,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 10,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-476",
    "description": "The KEYS subsystem in the Linux kernel before 3.18 allows local users to gain privileges or cause a denial of service (NULL pointer dereference and system crash) via vectors involving a NULL value for a certain match field, related to the keyring_search_iterator function in keyring.c.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-03-31T04:59:00.157",
    "last_modified": "2024-11-21T03:23:54.220",
    "fix_date": "2014-09-16T16:36:06Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c06cfb08b88dfbe13be44a69ae2fdc3a7c902d81",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97258",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:1842",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:2077",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:2437",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:2444",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1428353",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/c06cfb08b88dfbe13be44a69ae2fdc3a7c902d81",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/3849-1/",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/3849-2/",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=c06cfb08b88dfbe13be44a69ae2fdc3a7c902d81",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97258",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:1842",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:2077",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:2437",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2017:2444",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1428353",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/c06cfb08b88dfbe13be44a69ae2fdc3a7c902d81",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/3849-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/3849-2/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:54.834963",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-26T06:54:23Z",
    "pushed_at": "2025-01-26T01:00:03Z",
    "size": 5386838,
    "stars": 186472,
    "forks": 54875,
    "open_issues": 441,
    "watchers": 186472,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1331921668,
      "Assembly": 9611819,
      "Shell": 5108035,
      "Python": 2992085,
      "Makefile": 2706967,
      "Perl": 1253833,
      "Rust": 816450,
      "Roff": 202277,
      "C++": 173994,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71397,
      "Awk": 69555,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10902,
      "M4": 3329,
      "MATLAB": 2482,
      "Clojure": 2442,
      "sed": 2433,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 48379,
      "avg_commits_per_week": 930.3653846153846,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:34:00.817711"
  }
}