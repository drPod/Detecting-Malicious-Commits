{
  "cve_id": "CVE-2017-4952",
  "github_data": {
    "repository": "vmware/xenon",
    "fix_commit": "055ae13603f0cc3cd7cf59f20ce314bf8db583e1",
    "related_commits": [
      "055ae13603f0cc3cd7cf59f20ce314bf8db583e1",
      "06b9947cf603ba40fd8b03bfeb2e84528a7ab592",
      "30ae41bccf418d88b52b35a81efb3c1304b798f8",
      "5682ef8d40569afd00fb9a5933e7706bb5b66713",
      "756d893573414eec8635c2aba2345c4dcf10b21c",
      "7a747d82b80cd38d2c11a0d9cdedb71c722a2c75",
      "b1fd306047ecdac82661d636ebee801a7f2b3a0a",
      "c23964eb57e846126daef98ef7ed15400313e977",
      "ec30db9afada9cb52852082ce4d7d0095524f3b3",
      "055ae13603f0cc3cd7cf59f20ce314bf8db583e1",
      "06b9947cf603ba40fd8b03bfeb2e84528a7ab592",
      "30ae41bccf418d88b52b35a81efb3c1304b798f8",
      "5682ef8d40569afd00fb9a5933e7706bb5b66713",
      "756d893573414eec8635c2aba2345c4dcf10b21c",
      "7a747d82b80cd38d2c11a0d9cdedb71c722a2c75",
      "b1fd306047ecdac82661d636ebee801a7f2b3a0a",
      "c23964eb57e846126daef98ef7ed15400313e977",
      "ec30db9afada9cb52852082ce4d7d0095524f3b3"
    ],
    "patch_url": "https://github.com/vmware/xenon/commit/055ae13603f0cc3cd7cf59f20ce314bf8db583e1.patch",
    "fix_commit_details": {
      "sha": "055ae13603f0cc3cd7cf59f20ce314bf8db583e1",
      "commit_date": "2017-12-04T20:49:05Z",
      "author": {
        "login": "ttddyy",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add auth to UtilityService",
        "length": 171,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 249,
        "additions": 246,
        "deletions": 3
      },
      "files": [
        {
          "filename": "xenon-common/src/main/java/com/vmware/xenon/common/UtilityService.java",
          "status": "modified",
          "additions": 23,
          "deletions": 1,
          "patch": "@@ -57,7 +57,29 @@ public UtilityService setParent(Service parent) {\n \n     @Override\n     public void authorizeRequest(Operation op) {\n-        op.complete();\n+\n+        String suffix = UriUtils.buildUriPath(UriUtils.URI_PATH_CHAR, UriUtils.getLastPathSegment(op.getUri()));\n+\n+        // allow access to ui endpoint\n+        if (ServiceHost.SERVICE_URI_SUFFIX_UI.equals(suffix)) {\n+            op.complete();\n+            return;\n+        }\n+\n+        ServiceDocument doc = new ServiceDocument();\n+        if (this.parent.getOptions().contains(ServiceOption.FACTORY_ITEM)) {\n+            doc.documentSelfLink = UriUtils.buildUriPath(UriUtils.getParentPath(this.parent.getSelfLink()), suffix);\n+        } else {\n+            doc.documentSelfLink = UriUtils.buildUriPath(this.parent.getSelfLink(), suffix);\n+        }\n+\n+        doc.documentKind = Utils.buildKind(this.parent.getStateType());\n+        if (getHost().isAuthorized(this.parent, doc, op)) {\n+            op.complete();\n+            return;\n+        }\n+\n+        op.fail(Operation.STATUS_CODE_FORBIDDEN);\n     }\n \n     @Override"
        },
        {
          "filename": "xenon-common/src/test/java/com/vmware/xenon/common/TestAuthorization.java",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -513,6 +513,16 @@ public void statefulServiceAuthorization() throws Throwable {\n                 }));\n         this.host.testWait();\n \n+        // do GET on factory /stats, we should get 403\n+        Operation statsGet = Operation.createGet(this.host,\n+                ExampleService.FACTORY_LINK + ServiceHost.SERVICE_URI_SUFFIX_STATS);\n+        this.host.sendAndWaitExpectFailure(statsGet, Operation.STATUS_CODE_FORBIDDEN);\n+\n+        // do GET on factory /config, we should get 403\n+        Operation configGet = Operation.createGet(this.host,\n+                ExampleService.FACTORY_LINK + ServiceHost.SERVICE_URI_SUFFIX_CONFIG);\n+        this.host.sendAndWaitExpectFailure(configGet, Operation.STATUS_CODE_FORBIDDEN);\n+\n         // Assume Jane's identity\n         this.host.assumeIdentity(this.userServicePath);\n         // add docs accessible by jane\n@@ -555,9 +565,27 @@ public void statefulServiceAuthorization() throws Throwable {\n         // reset the auth context\n         OperationContext.setAuthorizationContext(null);\n \n+        // do GET on utility suffixes in example child services, we should get 403\n+        for (URI childUri : exampleServices.keySet()) {\n+            statsGet = Operation.createGet(this.host,\n+                    childUri.getPath() + ServiceHost.SERVICE_URI_SUFFIX_STATS);\n+            this.host.sendAndWaitExpectFailure(statsGet, Operation.STATUS_CODE_FORBIDDEN);\n+            configGet = Operation.createGet(this.host,\n+                    childUri.getPath() + ServiceHost.SERVICE_URI_SUFFIX_CONFIG);\n+            this.host.sendAndWaitExpectFailure(configGet, Operation.STATUS_CODE_FORBIDDEN);\n+        }\n+\n         // Assume Jane's identity through header auth token\n         String authToken = generateAuthToken(this.userServicePath);\n \n+        // do GET on utility suffixes in example child services, we should get 200\n+        for (URI childUri : exampleServices.keySet()) {\n+            statsGet = Operation.createGet(this.host,\n+                    childUri.getPath() + ServiceHost.SERVICE_URI_SUFFIX_STATS);\n+            statsGet.addRequestHeader(Operation.REQUEST_AUTH_TOKEN_HEADER, authToken);\n+            this.host.sendAndWaitExpectSuccess(statsGet);\n+        }\n+\n         verifyJaneAccess(exampleServices, authToken);\n     }\n "
        },
        {
          "filename": "xenon-common/src/test/java/com/vmware/xenon/common/TestExampleServiceHost.java",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -85,7 +85,9 @@ public void createUsers() throws Throwable {\n     private String loginUser(URI hostUri) throws Throwable {\n         URI usersLink = UriUtils.buildUri(hostUri, UserService.FACTORY_LINK);\n         // wait for factory availability\n+        this.host.setSystemAuthorizationContext();\n         this.host.waitForReplicatedFactoryServiceAvailable(usersLink);\n+        this.host.resetAuthorizationContext();\n \n         String basicAuth = constructBasicAuth(adminUser, adminUser);\n         URI loginUri = UriUtils.buildUri(hostUri, ServiceUriPaths.CORE_AUTHN_BASIC);"
        },
        {
          "filename": "xenon-common/src/test/java/com/vmware/xenon/common/TestSubscriptions.java",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -299,11 +299,14 @@ public void testSubscriptionsWithAuth() throws Throwable {\n \n                 }\n             };\n+\n+            hostWithAuth.setSystemAuthorizationContext();\n             Operation subscribe = Operation.createPost(UriUtils.buildUri(hostWithAuth, minimalServiceUUID));\n             subscribe.setReferer(hostWithAuth.getReferer());\n             ServiceSubscriber subscriber = new ServiceSubscriber();\n             subscriber.replayState = true;\n             hostWithAuth.startSubscriptionService(subscribe, notifyC, subscriber);\n+            hostWithAuth.resetAuthorizationContext();\n             hostWithAuth.testWait(notifyContext);\n         } finally {\n             if (hostWithAuth != null) {"
        },
        {
          "filename": "xenon-common/src/test/java/com/vmware/xenon/common/TestUtilityService.java",
          "status": "modified",
          "additions": 151,
          "deletions": 0,
          "patch": "@@ -14,8 +14,12 @@\n package com.vmware.xenon.common;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n \n+import static com.vmware.xenon.common.ServiceHost.SERVICE_URI_SUFFIX_TEMPLATE;\n+import static com.vmware.xenon.common.ServiceHost.SERVICE_URI_SUFFIX_UI;\n+\n import java.net.URI;\n import java.util.EnumSet;\n import java.util.List;\n@@ -32,10 +36,16 @@\n import com.vmware.xenon.common.ServiceStats.TimeSeriesStats;\n import com.vmware.xenon.common.ServiceStats.TimeSeriesStats.AggregationType;\n import com.vmware.xenon.common.ServiceStats.TimeSeriesStats.TimeBin;\n+import com.vmware.xenon.common.test.AuthTestUtils;\n import com.vmware.xenon.common.test.TestContext;\n+import com.vmware.xenon.common.test.TestRequestSender;\n+import com.vmware.xenon.common.test.TestRequestSender.FailureResponse;\n+import com.vmware.xenon.common.test.VerificationHost;\n+import com.vmware.xenon.services.common.AuthorizationContextService;\n import com.vmware.xenon.services.common.ExampleService;\n import com.vmware.xenon.services.common.ExampleService.ExampleServiceState;\n import com.vmware.xenon.services.common.MinimalTestService;\n+import com.vmware.xenon.services.common.QueryTask.Query;\n \n public class TestUtilityService extends BasicReusableHostTestCase {\n \n@@ -586,4 +596,145 @@ public static void validateTimeSeriesStat(ServiceStat stat, long expectedBinDura\n         assertTrue(maxAvg > 0);\n         assertTrue(countPerMaxAvgBin >= 1);\n     }\n+\n+    @Test\n+    public void endpointAuthorization() throws Throwable {\n+        VerificationHost host = VerificationHost.create(0);\n+        host.setAuthorizationService(new AuthorizationContextService());\n+        host.setAuthorizationEnabled(true);\n+        host.setMaintenanceIntervalMicros(TimeUnit.MILLISECONDS.toMicros(100));\n+        host.start();\n+\n+        TestRequestSender sender = host.getTestRequestSender();\n+\n+        host.setSystemAuthorizationContext();\n+        host.waitForReplicatedFactoryServiceAvailable(UriUtils.buildUri(host, ExampleService.FACTORY_LINK));\n+\n+        String exampleUser = \"example@vmware.com\";\n+        String examplePass = \"password\";\n+        TestContext authCtx = host.testCreate(1);\n+        AuthorizationSetupHelper.create()\n+                .setHost(host)\n+                .setUserEmail(exampleUser)\n+                .setUserPassword(examplePass)\n+                .setResourceQuery(Query.Builder.create()\n+                        .addFieldClause(ServiceDocument.FIELD_NAME_KIND, Utils.buildKind(ExampleServiceState.class))\n+                        .build())\n+                .setCompletion(authCtx.getCompletion())\n+                .start();\n+        authCtx.await();\n+\n+        // create a sample service\n+        ExampleServiceState doc = new ExampleServiceState();\n+        doc.name = \"foo\";\n+        doc.documentSelfLink = \"foo\";\n+\n+        Operation post = Operation.createPost(host, ExampleService.FACTORY_LINK).setBody(doc);\n+        ExampleServiceState postResult = sender.sendAndWait(post, ExampleServiceState.class);\n+\n+        host.resetAuthorizationContext();\n+\n+        URI factoryAvailableUri = UriUtils.buildAvailableUri(host, ExampleService.FACTORY_LINK);\n+        URI factoryStatsUri = UriUtils.buildStatsUri(host, ExampleService.FACTORY_LINK);\n+        URI factoryConfigUri = UriUtils.buildConfigUri(host, ExampleService.FACTORY_LINK);\n+        URI factorySubscriptionUri = UriUtils.buildSubscriptionUri(host, ExampleService.FACTORY_LINK);\n+        URI factoryTemplateUri = UriUtils.buildUri(host, UriUtils.buildUriPath(ExampleService.FACTORY_LINK, SERVICE_URI_SUFFIX_TEMPLATE));\n+        URI factoryUiUri = UriUtils.buildUri(host, UriUtils.buildUriPath(ExampleService.FACTORY_LINK, SERVICE_URI_SUFFIX_UI));\n+\n+        URI serviceAvailableUri = UriUtils.buildAvailableUri(host, postResult.documentSelfLink);\n+        URI serviceStatsUri = UriUtils.buildStatsUri(host, postResult.documentSelfLink);\n+        URI serviceConfigUri = UriUtils.buildConfigUri(host, postResult.documentSelfLink);\n+        URI serviceSubscriptionUri = UriUtils.buildSubscriptionUri(host, postResult.documentSelfLink);\n+        URI serviceTemplateUri = UriUtils.buildUri(host, UriUtils.buildUriPath(postResult.documentSelfLink, SERVICE_URI_SUFFIX_TEMPLATE));\n+        URI serviceUiUri = UriUtils.buildUri(host, UriUtils.buildUriPath(postResult.documentSelfLink, SERVICE_URI_SUFFIX_UI));\n+\n+        // check non-authenticated user receives forbidden response\n+        FailureResponse failureResponse;\n+        Operation uiOpResult;\n+\n+        // check factory endpoints\n+        failureResponse = sender.sendAndWaitFailure(Operation.createGet(factoryAvailableUri));\n+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());\n+\n+        failureResponse = sender.sendAndWaitFailure(Operation.createGet(factoryStatsUri));\n+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());\n+\n+        failureResponse = sender.sendAndWaitFailure(Operation.createGet(factoryConfigUri));\n+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());\n+\n+        failureResponse = sender.sendAndWaitFailure(Operation.createGet(factorySubscriptionUri));\n+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());\n+\n+        failureResponse = sender.sendAndWaitFailure(Operation.createGet(factoryTemplateUri));\n+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());\n+\n+        uiOpResult = sender.sendAndWait(Operation.createGet(factoryUiUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, uiOpResult.getStatusCode());\n+\n+        // check service endpoints\n+        failureResponse = sender.sendAndWaitFailure(Operation.createGet(serviceAvailableUri));\n+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());\n+\n+        failureResponse = sender.sendAndWaitFailure(Operation.createGet(serviceStatsUri));\n+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());\n+\n+        failureResponse = sender.sendAndWaitFailure(Operation.createGet(serviceConfigUri));\n+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());\n+\n+        failureResponse = sender.sendAndWaitFailure(Operation.createGet(serviceSubscriptionUri));\n+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());\n+\n+        failureResponse = sender.sendAndWaitFailure(Operation.createGet(serviceTemplateUri));\n+        assertEquals(Operation.STATUS_CODE_FORBIDDEN, failureResponse.op.getStatusCode());\n+\n+        uiOpResult = sender.sendAndWait(Operation.createGet(serviceUiUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, uiOpResult.getStatusCode());\n+\n+\n+        // check authenticated user does NOT receive forbidden response\n+        AuthTestUtils.login(host, exampleUser, examplePass);\n+\n+        Operation response;\n+\n+        // check factory endpoints\n+        response = sender.sendAndWait(Operation.createGet(factoryAvailableUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+        response = sender.sendAndWait(Operation.createGet(factoryStatsUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+        response = sender.sendAndWait(Operation.createGet(factoryConfigUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+        response = sender.sendAndWait(Operation.createGet(factorySubscriptionUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+        response = sender.sendAndWait(Operation.createGet(factoryTemplateUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+        response = sender.sendAndWait(Operation.createGet(factoryUiUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+\n+        // check service endpoints\n+        response = sender.sendAndWait(Operation.createGet(serviceAvailableUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+        response = sender.sendAndWait(Operation.createGet(serviceStatsUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+        response = sender.sendAndWait(Operation.createGet(serviceConfigUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+        response = sender.sendAndWait(Operation.createGet(serviceSubscriptionUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+        response = sender.sendAndWait(Operation.createGet(serviceTemplateUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+        response = sender.sendAndWait(Operation.createGet(serviceUiUri));\n+        assertNotEquals(Operation.STATUS_CODE_FORBIDDEN, response.getStatusCode());\n+\n+    }\n+\n }"
        },
        {
          "filename": "xenon-common/src/test/java/com/vmware/xenon/common/test/AuthorizationHelper.java",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -30,6 +30,7 @@\n import com.vmware.xenon.common.ServiceHost;\n import com.vmware.xenon.common.UriUtils;\n import com.vmware.xenon.common.Utils;\n+import com.vmware.xenon.services.common.ExampleService;\n import com.vmware.xenon.services.common.ExampleService.ExampleServiceState;\n import com.vmware.xenon.services.common.QueryTask;\n import com.vmware.xenon.services.common.QueryTask.Query;\n@@ -269,6 +270,22 @@ public Collection<String> createRoles(ServiceHost target, String email, boolean\n                                 UriUtils.buildUriPath(ServiceUriPaths.CORE_AUTHZ_USERS, email))\n                         .build());\n \n+        // Create resource group to allow access on utility paths\n+        String statsResourceGroupLink = createResourceGroup(target, \"stats-resource-group\",\n+                Builder.create()\n+                        .addFieldClause(\n+                                ServiceDocument.FIELD_NAME_SELF_LINK,\n+                                ExampleService.FACTORY_LINK + ServiceHost.SERVICE_URI_SUFFIX_STATS)\n+                        .build());\n+\n+        String subscriptionsResourceGroupLink = createResourceGroup(target, \"subs-resource-group\",\n+                Builder.create()\n+                        .addFieldClause(\n+                                ServiceDocument.FIELD_NAME_SELF_LINK,\n+                                ServiceUriPaths.CORE_LOCAL_QUERY_TASKS\n+                                        + ServiceHost.SERVICE_URI_SUFFIX_SUBSCRIPTIONS)\n+                        .build());\n+\n         Collection<String> paths = new HashSet<>();\n \n         // Create roles tying these together\n@@ -283,6 +300,16 @@ public Collection<String> createRoles(ServiceHost target, String email, boolean\n         // Create role authorizing access to the user's own query tasks\n         paths.add(createRole(target, userGroupLink, queryTaskResourceGroupLink,\n                 new HashSet<>(Arrays.asList(Action.GET, Action.POST, Action.PATCH, Action.DELETE))));\n+\n+        // Create role authorizing access to /stats\n+        paths.add(createRole(target, userGroupLink, statsResourceGroupLink,\n+                new HashSet<>(\n+                        Arrays.asList(Action.GET, Action.POST, Action.PATCH, Action.DELETE))));\n+\n+        // Create role authorizing access to /subscriptions of query tasks\n+        paths.add(createRole(target, userGroupLink, subscriptionsResourceGroupLink,\n+                new HashSet<>(\n+                        Arrays.asList(Action.GET, Action.POST, Action.PATCH, Action.DELETE))));\n         return paths;\n     }\n "
        },
        {
          "filename": "xenon-common/src/test/java/com/vmware/xenon/common/test/VerificationHost.java",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -79,6 +79,7 @@\n import com.vmware.xenon.common.Operation.AuthorizationContext;\n import com.vmware.xenon.common.Operation.CompletionHandler;\n import com.vmware.xenon.common.Operation.OperationOption;\n+import com.vmware.xenon.common.OperationContext;\n import com.vmware.xenon.common.Service;\n import com.vmware.xenon.common.Service.Action;\n import com.vmware.xenon.common.Service.ServiceOption;\n@@ -1011,8 +1012,16 @@ public ServiceDocumentQueryResult getExpandedFactoryState(URI factoryUri) {\n     }\n \n     public Map<String, ServiceStat> getServiceStats(URI serviceUri) {\n+        AuthorizationContext ctx = null;\n+        if (this.isAuthorizationEnabled()) {\n+            ctx = OperationContext.getAuthorizationContext();\n+            this.setSystemAuthorizationContext();\n+        }\n         ServiceStats stats = this.getServiceState(\n                 null, ServiceStats.class, UriUtils.buildStatsUri(serviceUri));\n+        if (this.isAuthorizationEnabled()) {\n+            this.setAuthorizationContext(ctx);\n+        }\n         return stats.entries;\n     }\n "
        },
        {
          "filename": "xenon-common/src/test/java/com/vmware/xenon/services/common/TestNodeGroupService.java",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -2482,6 +2482,7 @@ public void replicationWithAuthzCacheClear() throws Throwable {\n \n         VerificationHost groupHost = this.host.getPeerHost();\n \n+        groupHost.setSystemAuthorizationContext();\n         // wait for auth related services to be stabilized\n         groupHost.waitForReplicatedFactoryServiceAvailable(\n                 UriUtils.buildUri(groupHost, UserService.FACTORY_LINK));\n@@ -2499,7 +2500,7 @@ public void replicationWithAuthzCacheClear() throws Throwable {\n         String bazUserLink = UriUtils.buildUriPath(ServiceUriPaths.CORE_AUTHZ_USERS,\n                 \"baz@vmware.com\");\n \n-        groupHost.setSystemAuthorizationContext();\n+\n \n         // create user, user-group, resource-group, role for foo@vmware.com\n         //   user: /core/authz/users/foo@vmware.com\n@@ -2709,7 +2710,7 @@ private void populateAuthCacheInAllPeers(AuthorizationContext authContext) throw\n \n             // based on the role created in test, all users have access to ExampleService\n             this.host.sendAndWaitExpectSuccess(\n-                    Operation.createGet(UriUtils.buildStatsUri(peer, ExampleService.FACTORY_LINK)));\n+                    Operation.createGet(UriUtils.buildUri(peer, ExampleService.FACTORY_LINK)));\n         }\n \n         this.host.waitFor(\"Timeout waiting for correct auth cache state\","
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 7,
        "unique_directories": 4,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b6fb48b745985af2efc59b7ee0e5e7d69a289fbc",
            "date": "2018-12-10T13:24:35Z",
            "author_login": "tgeorgiev"
          },
          {
            "sha": "946895252e89bcee845e20f0886327d653205871",
            "date": "2018-11-16T00:08:09Z",
            "author_login": "RohitJ23"
          },
          {
            "sha": "101a82418c1775307be14a0efc47ae6bfd0171a8",
            "date": "2018-11-15T20:25:27Z",
            "author_login": "RohitJ23"
          },
          {
            "sha": "15fa2b4fdb43890efb3803a9db25f33187af7847",
            "date": "2018-11-06T14:54:21Z",
            "author_login": "pmitrov"
          },
          {
            "sha": "626788cb20680d1db3668ceed1b25b9166cc00b3",
            "date": "2018-11-01T15:31:21Z",
            "author_login": "pmitrov"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-732",
    "description": "VMware Xenon 1.x, prior to 1.5.4-CR7_1, 1.5.7_7, 1.5.4-CR6_2, 1.3.7-CR1_2, 1.1.0-CR0-3, 1.1.0-CR3_1,1.4.2-CR4_1, and 1.5.4_8, contains an authentication bypass vulnerability due to insufficient access controls for utility endpoints. Successful exploitation of this issue may result in information disclosure.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-05-02T14:29:00.380",
    "last_modified": "2024-11-21T03:26:45.067",
    "fix_date": "2017-12-04T20:49:05Z"
  },
  "references": [
    {
      "url": "http://seclists.org/oss-sec/2018/q1/153",
      "source": "security@vmware.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/103093",
      "source": "security@vmware.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/055ae13603f0cc3cd7cf59f20ce314bf8db583e1",
      "source": "security@vmware.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/06b9947cf603ba40fd8b03bfeb2e84528a7ab592",
      "source": "security@vmware.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/30ae41bccf418d88b52b35a81efb3c1304b798f8",
      "source": "security@vmware.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/5682ef8d40569afd00fb9a5933e7706bb5b66713",
      "source": "security@vmware.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/756d893573414eec8635c2aba2345c4dcf10b21c",
      "source": "security@vmware.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/7a747d82b80cd38d2c11a0d9cdedb71c722a2c75",
      "source": "security@vmware.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/b1fd306047ecdac82661d636ebee801a7f2b3a0a",
      "source": "security@vmware.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/c23964eb57e846126daef98ef7ed15400313e977",
      "source": "security@vmware.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/ec30db9afada9cb52852082ce4d7d0095524f3b3",
      "source": "security@vmware.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/oss-sec/2018/q1/153",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/103093",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/055ae13603f0cc3cd7cf59f20ce314bf8db583e1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/06b9947cf603ba40fd8b03bfeb2e84528a7ab592",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/30ae41bccf418d88b52b35a81efb3c1304b798f8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/5682ef8d40569afd00fb9a5933e7706bb5b66713",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/756d893573414eec8635c2aba2345c4dcf10b21c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/7a747d82b80cd38d2c11a0d9cdedb71c722a2c75",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/b1fd306047ecdac82661d636ebee801a7f2b3a0a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/c23964eb57e846126daef98ef7ed15400313e977",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vmware/xenon/commit/ec30db9afada9cb52852082ce4d7d0095524f3b3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:25.825946",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xenon",
    "owner": "vmware",
    "created_at": "2015-10-30T21:13:28Z",
    "updated_at": "2024-12-11T05:52:10Z",
    "pushed_at": "2020-01-06T08:32:48Z",
    "size": 52010,
    "stars": 227,
    "forks": 97,
    "open_issues": 4,
    "watchers": 227,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 6025057,
      "JavaScript": 504030,
      "TypeScript": 456177,
      "CSS": 115625,
      "HTML": 100032,
      "Shell": 25870,
      "Lua": 1785,
      "Makefile": 1614,
      "Dockerfile": 443
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:29:04.286855"
  }
}