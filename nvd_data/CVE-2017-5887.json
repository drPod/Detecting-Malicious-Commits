{
  "cve_id": "CVE-2017-5887",
  "github_data": {
    "repository": "daltoniam/Starscream",
    "fix_commit": "dbeb1190b8dcbff4f0b797f9e9d9b9b864d1f0d6",
    "related_commits": [
      "dbeb1190b8dcbff4f0b797f9e9d9b9b864d1f0d6",
      "dbeb1190b8dcbff4f0b797f9e9d9b9b864d1f0d6"
    ],
    "patch_url": "https://github.com/daltoniam/Starscream/commit/dbeb1190b8dcbff4f0b797f9e9d9b9b864d1f0d6.patch",
    "fix_commit_details": {
      "sha": "dbeb1190b8dcbff4f0b797f9e9d9b9b864d1f0d6",
      "commit_date": "2017-03-14T18:12:39Z",
      "author": {
        "login": "daltoniam",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "some cleanup and SSL pinning fix",
        "length": 32,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 32,
        "additions": 18,
        "deletions": 14
      },
      "files": [
        {
          "filename": "Source/WebSocket.swift",
          "status": "modified",
          "additions": 18,
          "deletions": 14,
          "patch": "@@ -258,7 +258,6 @@ open class WebSocket : NSObject, StreamDelegate {\n      Private method that starts the connection.\n      */\n     private func createHTTPRequest() {\n-\n         let urlRequest = CFHTTPMessageCreateRequest(kCFAllocatorDefault, \"GET\" as CFString,\n                                                     url as CFURL, kCFHTTPVersion1_1).takeRetainedValue()\n \n@@ -383,14 +382,29 @@ open class WebSocket : NSObject, StreamDelegate {\n                 guard !sOperation.isCancelled else { return }\n                 out -= 100\n                 if out < 0 {\n-                    self?.cleanupStream()\n+                    WebSocket.sharedWorkQueue.async {\n+                        self?.cleanupStream()\n+                    }\n                     self?.doDisconnect(self?.errorWithDetail(\"write wait timed out\", code: 2))\n                     return\n                 } else if outStream.streamError != nil {\n                     return // disconnectStream will be called.\n                 }\n             }\n-            guard !sOperation.isCancelled else { return }\n+            guard !sOperation.isCancelled, let s = self else { return }\n+            // Do the pinning now if needed\n+            if let sec = s.security, !s.certValidated {\n+                let trust = outStream.property(forKey: kCFStreamPropertySSLPeerTrust as Stream.PropertyKey) as! SecTrust\n+                let domain = outStream.property(forKey: kCFStreamSSLPeerName as Stream.PropertyKey) as? String\n+                s.certValidated = sec.isValid(trust, domain: domain)\n+                if !s.certValidated {\n+                    WebSocket.sharedWorkQueue.async {\n+                        let error = s.errorWithDetail(\"Invalid SSL certificate\", code: 1)\n+                        s.disconnectStream(error)\n+                    }\n+                    return\n+                }\n+            }\n             outStream.write(bytes, maxLength: data.count)\n         }\n         writeQueue.addOperation(operation)\n@@ -400,17 +414,6 @@ open class WebSocket : NSObject, StreamDelegate {\n      Delegate for the stream methods. Processes incoming bytes\n      */\n     open func stream(_ aStream: Stream, handle eventCode: Stream.Event) {\n-        if let sec = security, !certValidated && [.hasBytesAvailable, .hasSpaceAvailable].contains(eventCode) {\n-            let trust = aStream.property(forKey: kCFStreamPropertySSLPeerTrust as Stream.PropertyKey) as! SecTrust\n-            let domain = aStream.property(forKey: kCFStreamSSLPeerName as Stream.PropertyKey) as? String\n-            if sec.isValid(trust, domain: domain) {\n-                certValidated = true\n-            } else {\n-                let error = errorWithDetail(\"Invalid SSL certificate\", code: 1)\n-                disconnectStream(error)\n-                return\n-            }\n-        }\n         if eventCode == .hasBytesAvailable {\n             if aStream == inputStream {\n                 processInputStream()\n@@ -945,6 +948,7 @@ open class WebSocket : NSObject, StreamDelegate {\n         readyToWrite = false\n         mutex.unlock()\n         cleanupStream()\n+        writeQueue.cancelAllOperations()\n     }\n \n }"
        },
        {
          "filename": "examples/SimpleTest/SimpleTest.xcodeproj/project.xcworkspace/xcuserdata/dalton.xcuserdatad/UserInterfaceState.xcuserstate",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c6bfd1af48efcc9a9ad203665db12375ba6b145a",
            "date": "2024-03-07T18:57:12Z",
            "author_login": "acmacalister"
          },
          {
            "sha": "82d8a0119e4abe374a29c3cc4aa1be002e19770c",
            "date": "2024-03-07T18:10:16Z",
            "author_login": "acmacalister"
          },
          {
            "sha": "11c401f4089a2d177c545430418cd736eee9dd16",
            "date": "2024-03-07T18:05:33Z",
            "author_login": "dylancom"
          },
          {
            "sha": "b32c9ab481382c5d8362bbbfbceef0ab4f88187d",
            "date": "2024-03-07T18:03:19Z",
            "author_login": "jonathanellis"
          },
          {
            "sha": "b12442f29c501d5765bd54746cdea3ae8e8ab304",
            "date": "2024-02-20T18:47:38Z",
            "author_login": "JarnoRFB"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-295",
    "description": "WebSocket.swift in Starscream before 2.0.4 allows an SSL Pinning bypass because pinning occurs in the stream function (this is too late; pinning should occur in the initStreamsWithData function).",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-04-06T14:59:00.240",
    "last_modified": "2024-11-21T03:28:36.957",
    "fix_date": "2017-03-14T18:12:39Z"
  },
  "references": [
    {
      "url": "http://seclists.org/bugtraq/2017/Apr/67",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/daltoniam/Starscream/commit/dbeb1190b8dcbff4f0b797f9e9d9b9b864d1f0d6",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/daltoniam/Starscream/releases/tag/2.0.4",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/bugtraq/2017/Apr/67",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/daltoniam/Starscream/commit/dbeb1190b8dcbff4f0b797f9e9d9b9b864d1f0d6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/daltoniam/Starscream/releases/tag/2.0.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:54.843845",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Starscream",
    "owner": "daltoniam",
    "created_at": "2014-07-17T01:52:40Z",
    "updated_at": "2025-01-14T11:14:54Z",
    "pushed_at": "2024-05-16T21:37:05Z",
    "size": 2782,
    "stars": 8401,
    "forks": 1220,
    "open_issues": 156,
    "watchers": 8401,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Swift": 116701,
      "Ruby": 1602,
      "Objective-C": 1268
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:12:20.765268"
  }
}