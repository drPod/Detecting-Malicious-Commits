{
  "cve_id": "CVE-2017-5999",
  "github_data": {
    "repository": "nuxsmin/sysPass",
    "fix_commit": "a0e2c485e53b370a7cc6d833e192c3c5bfd70e1f",
    "related_commits": [
      "a0e2c485e53b370a7cc6d833e192c3c5bfd70e1f",
      "a0e2c485e53b370a7cc6d833e192c3c5bfd70e1f"
    ],
    "patch_url": "https://github.com/nuxsmin/sysPass/commit/a0e2c485e53b370a7cc6d833e192c3c5bfd70e1f.patch",
    "fix_commit_details": {
      "sha": "a0e2c485e53b370a7cc6d833e192c3c5bfd70e1f",
      "commit_date": "2017-03-01T02:37:47Z",
      "author": {
        "login": "nuxsmin",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge branch 'crypt'",
        "length": 108,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 71780,
        "additions": 40512,
        "deletions": 31268
      },
      "files": [
        {
          "filename": "ajax/ajax_task.php",
          "status": "added",
          "additions": 41,
          "deletions": 0,
          "patch": "@@ -0,0 +1,41 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author nuxsmin\n+ * @link http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+use SP\\Controller\\TaskController;\n+use SP\\Http\\Request;\n+\n+define('APP_ROOT', '..');\n+\n+require_once APP_ROOT . DIRECTORY_SEPARATOR . 'inc' . DIRECTORY_SEPARATOR . 'Base.php';\n+\n+session_write_close();\n+\n+Request::checkReferer('GET');\n+\n+header('Content-Type: text/event-stream');\n+header('Cache-Control: no-store, no-cache');\n+header('Access-Control-Allow-Origin: *');\n+\n+$Controller = new TaskController();\n+$Controller->doAction();\n\\ No newline at end of file"
        },
        {
          "filename": "ajax/ajax_upgrade.php",
          "status": "added",
          "additions": 36,
          "deletions": 0,
          "patch": "@@ -0,0 +1,36 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+use SP\\Controller\\MainActionController;\n+use SP\\Http\\Request;\n+\n+define('APP_ROOT', '..');\n+define('IS_UPGRADE', 1);\n+\n+require_once APP_ROOT . DIRECTORY_SEPARATOR . 'inc' . DIRECTORY_SEPARATOR . 'Base.php';\n+\n+Request::checkReferer('GET');\n+\n+$Controller = new MainActionController();\n+$Controller->doAction();\n\\ No newline at end of file"
        },
        {
          "filename": "inc/Base.php",
          "status": "modified",
          "additions": 14,
          "deletions": 3,
          "patch": "@@ -38,9 +38,14 @@\n define('PLUGINS_PATH', __DIR__ . DIRECTORY_SEPARATOR . 'Plugins');\n define('LOCALES_PATH', __DIR__ . DIRECTORY_SEPARATOR . 'locales');\n define('SQL_PATH', __DIR__ . DIRECTORY_SEPARATOR . 'sql');\n+define('LOG_FILE', __DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'syspass.log');\n \n define('DEBUG', false);\n \n+// Required random_compat polyfill for random_bytes() and random_int()\n+// @see https://github.com/paragonie/random_compat/tree/v2.0.4#random_compat\n+require_once EXTENSIONS_PATH . DIRECTORY_SEPARATOR . 'random_compat' . DIRECTORY_SEPARATOR . 'lib' . DIRECTORY_SEPARATOR . 'random.php';\n+\n require 'SplClassLoader.php';\n \n $ClassLoader = new SplClassLoader('SP');\n@@ -66,15 +71,21 @@\n  */\n function debugLog($data, $printLastCaller = false)\n {\n-    error_log(print_r($data, true));\n+    if (!error_log(date('Y-m-d H:i:s') . ' - ' . print_r($data, true) . PHP_EOL, 3, LOG_FILE)) {\n+        error_log(print_r($data, true));\n+    }\n \n     if ($printLastCaller === true) {\n         $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);\n         $n = count($backtrace);\n \n         for ($i = 1; $i <= $n - 1; $i++) {\n             $class = isset($backtrace[$i]['class']) ? $backtrace[$i]['class'] : '';\n-            error_log(sprintf('Caller %d: %s\\%s', $i, $class, $backtrace[$i]['function']));\n+            $line = sprintf('Caller %d: %s\\%s', $i, $class, $backtrace[$i]['function']);\n+\n+            if (!error_log($line . PHP_EOL, 3, LOG_FILE)) {\n+                error_log($line);\n+            }\n         }\n     }\n }\n@@ -83,7 +94,7 @@ function debugLog($data, $printLastCaller = false)\n  * Alias gettext function\n  *\n  * @param string $string\n- * @param bool   $tranlate Si es necesario traducir\n+ * @param bool $tranlate Si es necesario traducir\n  * @return string\n  */\n function __($string, $tranlate = true)"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/Core.php",
          "status": "added",
          "additions": 434,
          "deletions": 0,
          "patch": "@@ -0,0 +1,434 @@\n+<?php\n+\n+namespace Defuse\\Crypto;\n+\n+use Defuse\\Crypto\\Exception as Ex;\n+\n+final class Core\n+{\n+    const HEADER_VERSION_SIZE               = 4;\n+    const MINIMUM_CIPHERTEXT_SIZE           = 84;\n+\n+    const CURRENT_VERSION                   = \"\\xDE\\xF5\\x02\\x00\";\n+\n+    const CIPHER_METHOD                     = 'aes-256-ctr';\n+    const BLOCK_BYTE_SIZE                   = 16;\n+    const KEY_BYTE_SIZE                     = 32;\n+    const SALT_BYTE_SIZE                    = 32;\n+    const MAC_BYTE_SIZE                     = 32;\n+    const HASH_FUNCTION_NAME                = 'sha256';\n+    const ENCRYPTION_INFO_STRING            = 'DefusePHP|V2|KeyForEncryption';\n+    const AUTHENTICATION_INFO_STRING        = 'DefusePHP|V2|KeyForAuthentication';\n+    const BUFFER_BYTE_SIZE                  = 1048576;\n+\n+    const LEGACY_CIPHER_METHOD              = 'aes-128-cbc';\n+    const LEGACY_BLOCK_BYTE_SIZE            = 16;\n+    const LEGACY_KEY_BYTE_SIZE              = 16;\n+    const LEGACY_HASH_FUNCTION_NAME         = 'sha256';\n+    const LEGACY_MAC_BYTE_SIZE              = 32;\n+    const LEGACY_ENCRYPTION_INFO_STRING     = 'DefusePHP|KeyForEncryption';\n+    const LEGACY_AUTHENTICATION_INFO_STRING = 'DefusePHP|KeyForAuthentication';\n+\n+    /*\n+     * V2.0 Format: VERSION (4 bytes) || SALT (32 bytes) || IV (16 bytes) ||\n+     *              CIPHERTEXT (varies) || HMAC (32 bytes)\n+     *\n+     * V1.0 Format: HMAC (32 bytes) || IV (16 bytes) || CIPHERTEXT (varies).\n+     */\n+\n+    /**\n+     * Adds an integer to a block-sized counter.\n+     *\n+     * @param string $ctr\n+     * @param int    $inc\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public static function incrementCounter($ctr, $inc)\n+    {\n+        if (Core::ourStrlen($ctr) !== Core::BLOCK_BYTE_SIZE) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+              'Trying to increment a nonce of the wrong size.'\n+            );\n+        }\n+\n+        if (! \\is_int($inc)) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+              'Trying to increment nonce by a non-integer.'\n+            );\n+        }\n+\n+        if ($inc < 0) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+              'Trying to increment nonce by a negative amount.'\n+            );\n+        }\n+\n+        if ($inc > PHP_INT_MAX - 255) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+              'Integer overflow may occur.'\n+            );\n+        }\n+\n+        /*\n+         * We start at the rightmost byte (big-endian)\n+         * So, too, does OpenSSL: http://stackoverflow.com/a/3146214/2224584\n+         */\n+        for ($i = Core::BLOCK_BYTE_SIZE - 1; $i >= 0; --$i) {\n+            $sum = \\ord($ctr[$i]) + $inc;\n+\n+            /* Detect integer overflow and fail. */\n+            if (! \\is_int($sum)) {\n+                throw new Ex\\EnvironmentIsBrokenException(\n+                  'Integer overflow in CTR mode nonce increment.'\n+                );\n+            }\n+\n+            $ctr[$i] = \\pack('C', $sum & 0xFF);\n+            $inc     = $sum >> 8;\n+        }\n+        return $ctr;\n+    }\n+\n+    /**\n+     * Returns a random byte string of the specified length.\n+     *\n+     * @param int $octets\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public static function secureRandom($octets)\n+    {\n+        self::ensureFunctionExists('random_bytes');\n+        try {\n+            return \\random_bytes($octets);\n+        } catch (\\Exception $ex) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'Your system does not have a secure random number generator.'\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Computes the HKDF key derivation function specified in\n+     * http://tools.ietf.org/html/rfc5869.\n+     *\n+     * @param string $hash   Hash Function\n+     * @param string $ikm    Initial Keying Material\n+     * @param int    $length How many bytes?\n+     * @param string $info   What sort of key are we deriving?\n+     * @param string $salt\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public static function HKDF($hash, $ikm, $length, $info = '', $salt = null)\n+    {\n+        $digest_length = Core::ourStrlen(\\hash_hmac($hash, '', '', true));\n+\n+        // Sanity-check the desired output length.\n+        if (empty($length) || ! \\is_int($length) ||\n+            $length < 0 || $length > 255 * $digest_length) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'Bad output length requested of HKDF.'\n+            );\n+        }\n+\n+        // \"if [salt] not provided, is set to a string of HashLen zeroes.\"\n+        if (\\is_null($salt)) {\n+            $salt = \\str_repeat(\"\\x00\", $digest_length);\n+        }\n+\n+        // HKDF-Extract:\n+        // PRK = HMAC-Hash(salt, IKM)\n+        // The salt is the HMAC key.\n+        $prk = \\hash_hmac($hash, $ikm, $salt, true);\n+\n+        // HKDF-Expand:\n+\n+        // This check is useless, but it serves as a reminder to the spec.\n+        if (Core::ourStrlen($prk) < $digest_length) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+\n+        // T(0) = ''\n+        $t          = '';\n+        $last_block = '';\n+        for ($block_index = 1; Core::ourStrlen($t) < $length; ++$block_index) {\n+            // T(i) = HMAC-Hash(PRK, T(i-1) | info | 0x??)\n+            $last_block = \\hash_hmac(\n+                $hash,\n+                $last_block . $info . \\chr($block_index),\n+                $prk,\n+                true\n+            );\n+            // T = T(1) | T(2) | T(3) | ... | T(N)\n+            $t .= $last_block;\n+        }\n+\n+        // ORM = first L octets of T\n+        $orm = Core::ourSubstr($t, 0, $length);\n+        if ($orm === false) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+        return $orm;\n+    }\n+\n+    /**\n+     * Checks if two equal-length strings are the same without leaking\n+     * information through side channels.\n+     *\n+     * @param string $expected\n+     * @param string $given\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return bool\n+     */\n+    public static function hashEquals($expected, $given)\n+    {\n+        static $native = null;\n+        if ($native === null) {\n+            $native = \\function_exists('hash_equals');\n+        }\n+        if ($native) {\n+            return \\hash_equals($expected, $given);\n+        }\n+\n+        // We can't just compare the strings with '==', since it would make\n+        // timing attacks possible. We could use the XOR-OR constant-time\n+        // comparison algorithm, but that may not be a reliable defense in an\n+        // interpreted language. So we use the approach of HMACing both strings\n+        // with a random key and comparing the HMACs.\n+\n+        // We're not attempting to make variable-length string comparison\n+        // secure, as that's very difficult. Make sure the strings are the same\n+        // length.\n+        if (Core::ourStrlen($expected) !== Core::ourStrlen($given)) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+\n+        $blind           = Core::secureRandom(32);\n+        $message_compare = \\hash_hmac(Core::HASH_FUNCTION_NAME, $given, $blind);\n+        $correct_compare = \\hash_hmac(Core::HASH_FUNCTION_NAME, $expected, $blind);\n+        return $correct_compare === $message_compare;\n+    }\n+    /**\n+     * Throws an exception if the constant doesn't exist.\n+     *\n+     * @param string $name\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     */\n+    public static function ensureConstantExists($name)\n+    {\n+        if (! \\defined($name)) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+    }\n+\n+    /**\n+     * Throws an exception if the function doesn't exist.\n+     *\n+     * @param string $name\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     */\n+    public static function ensureFunctionExists($name)\n+    {\n+        if (! \\function_exists($name)) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+    }\n+\n+    /*\n+     * We need these strlen() and substr() functions because when\n+     * 'mbstring.func_overload' is set in php.ini, the standard strlen() and\n+     * substr() are replaced by mb_strlen() and mb_substr().\n+     */\n+\n+    /**\n+     * Computes the length of a string in bytes.\n+     *\n+     * @param string $str\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return int\n+     */\n+    public static function ourStrlen($str)\n+    {\n+        static $exists = null;\n+        if ($exists === null) {\n+            $exists = \\function_exists('mb_strlen');\n+        }\n+        if ($exists) {\n+            $length = \\mb_strlen($str, '8bit');\n+            if ($length === false) {\n+                throw new Ex\\EnvironmentIsBrokenException();\n+            }\n+            return $length;\n+        } else {\n+            return \\strlen($str);\n+        }\n+    }\n+\n+    /**\n+     * Behaves roughly like the function substr() in PHP 7 does.\n+     *\n+     * @param string $str\n+     * @param int    $start\n+     * @param int    $length\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public static function ourSubstr($str, $start, $length = null)\n+    {\n+        static $exists = null;\n+        if ($exists === null) {\n+            $exists = \\function_exists('mb_substr');\n+        }\n+\n+        if ($exists) {\n+            // mb_substr($str, 0, NULL, '8bit') returns an empty string on PHP\n+            // 5.3, so we have to find the length ourselves.\n+            if (! isset($length)) {\n+                if ($start >= 0) {\n+                    $length = Core::ourStrlen($str) - $start;\n+                } else {\n+                    $length = -$start;\n+                }\n+            }\n+\n+            // This is required to make mb_substr behavior identical to substr.\n+            // Without this, mb_substr() would return false, contra to what the\n+            // PHP documentation says (it doesn't say it can return false.)\n+            if ($start === Core::ourStrlen($str) && $length === 0) {\n+                return '';\n+            }\n+\n+            if ($start > Core::ourStrlen($str)) {\n+                return false;\n+            }\n+\n+            $substr = \\mb_substr($str, $start, $length, '8bit');\n+            if (Core::ourStrlen($substr) !== $length) {\n+                throw new Ex\\EnvironmentIsBrokenException(\n+                    'Your version of PHP has bug #66797. Its implementation of\n+                    mb_substr() is incorrect. See the details here:\n+                    https://bugs.php.net/bug.php?id=66797'\n+                );\n+            }\n+            return $substr;\n+        }\n+\n+        // Unlike mb_substr(), substr() doesn't accept NULL for length\n+        if (isset($length)) {\n+            return \\substr($str, $start, $length);\n+        } else {\n+            return \\substr($str, $start);\n+        }\n+    }\n+\n+    /**\n+     * Computes the PBKDF2 password-based key derivation function.\n+     *\n+     * The PBKDF2 function is defined in RFC 2898. Test vectors can be found in\n+     * RFC 6070. This implementation of PBKDF2 was originally created by Taylor\n+     * Hornby, with improvements from http://www.variations-of-shadow.com/.\n+     *\n+     * @param string $algorithm  The hash algorithm to use. Recommended: SHA256\n+     * @param string $password   The password.\n+     * @param string $salt       A salt that is unique to the password.\n+     * @param int    $count      Iteration count. Higher is better, but slower. Recommended: At least 1000.\n+     * @param int    $key_length The length of the derived key in bytes.\n+     * @param bool   $raw_output If true, the key is returned in raw binary format. Hex encoded otherwise.\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string A $key_length-byte key derived from the password and salt.\n+     */\n+    public static function pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)\n+    {\n+        // Type checks:\n+        if (! \\is_string($algorithm)) {\n+            throw new \\InvalidArgumentException(\n+                'pbkdf2(): algorithm must be a string'\n+            );\n+        }\n+        if (! \\is_string($password)) {\n+            throw new \\InvalidArgumentException(\n+                'pbkdf2(): password must be a string'\n+            );\n+        }\n+        if (! \\is_string($salt)) {\n+            throw new \\InvalidArgumentException(\n+                'pbkdf2(): salt must be a string'\n+            );\n+        }\n+        // Coerce strings to integers with no information loss or overflow\n+        $count += 0;\n+        $key_length += 0;\n+\n+        $algorithm = \\strtolower($algorithm);\n+        if (! \\in_array($algorithm, \\hash_algos(), true)) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'Invalid or unsupported hash algorithm.'\n+            );\n+        }\n+\n+        // Whitelist, or we could end up with people using CRC32.\n+        $ok_algorithms = [\n+            'sha1', 'sha224', 'sha256', 'sha384', 'sha512',\n+            'ripemd160', 'ripemd256', 'ripemd320', 'whirlpool',\n+        ];\n+        if (! \\in_array($algorithm, $ok_algorithms, true)) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'Algorithm is not a secure cryptographic hash function.'\n+            );\n+        }\n+\n+        if ($count <= 0 || $key_length <= 0) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'Invalid PBKDF2 parameters.'\n+            );\n+        }\n+\n+        if (\\function_exists('hash_pbkdf2')) {\n+            // The output length is in NIBBLES (4-bits) if $raw_output is false!\n+            if (! $raw_output) {\n+                $key_length = $key_length * 2;\n+            }\n+            return \\hash_pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output);\n+        }\n+\n+        $hash_length = Core::ourStrlen(\\hash($algorithm, '', true));\n+        $block_count = \\ceil($key_length / $hash_length);\n+\n+        $output = '';\n+        for ($i = 1; $i <= $block_count; $i++) {\n+            // $i encoded as 4 bytes, big endian.\n+            $last = $salt . \\pack('N', $i);\n+            // first iteration\n+            $last = $xorsum = \\hash_hmac($algorithm, $last, $password, true);\n+            // perform the other $count - 1 iterations\n+            for ($j = 1; $j < $count; $j++) {\n+                $xorsum ^= ($last = \\hash_hmac($algorithm, $last, $password, true));\n+            }\n+            $output .= $xorsum;\n+        }\n+\n+        if ($raw_output) {\n+            return Core::ourSubstr($output, 0, $key_length);\n+        } else {\n+            return Encoding::binToHex(Core::ourSubstr($output, 0, $key_length));\n+        }\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/Crypto.php",
          "status": "added",
          "additions": 372,
          "deletions": 0,
          "patch": "@@ -0,0 +1,372 @@\n+<?php\n+\n+namespace Defuse\\Crypto;\n+\n+use Defuse\\Crypto\\Exception as Ex;\n+\n+class Crypto\n+{\n+    /**\n+     * Encrypts a string with a Key.\n+     *\n+     * @param string $plaintext\n+     * @param Key    $key\n+     * @param bool   $raw_binary\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public static function encrypt($plaintext, Key $key, $raw_binary = false)\n+    {\n+        return self::encryptInternal(\n+            $plaintext,\n+            KeyOrPassword::createFromKey($key),\n+            $raw_binary\n+        );\n+    }\n+\n+    /**\n+     * Encrypts a string with a password, using a slow key derivation function\n+     * to make password cracking more expensive.\n+     *\n+     * @param string $plaintext\n+     * @param string $password\n+     * @param bool   $raw_binary\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public static function encryptWithPassword($plaintext, $password, $raw_binary = false)\n+    {\n+        return self::encryptInternal(\n+            $plaintext,\n+            KeyOrPassword::createFromPassword($password),\n+            $raw_binary\n+        );\n+    }\n+\n+    /**\n+     * Decrypts a ciphertext to a string with a Key.\n+     *\n+     * @param string $ciphertext\n+     * @param Key    $key\n+     * @param bool   $raw_binary\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     *\n+     * @return string\n+     */\n+    public static function decrypt($ciphertext, Key $key, $raw_binary = false)\n+    {\n+        return self::decryptInternal(\n+            $ciphertext,\n+            KeyOrPassword::createFromKey($key),\n+            $raw_binary\n+        );\n+    }\n+\n+    /**\n+     * Decrypts a ciphertext to a string with a password, using a slow key\n+     * derivation function to make password cracking more expensive.\n+     *\n+     * @param string $ciphertext\n+     * @param string $password\n+     * @param bool   $raw_binary\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     *\n+     * @return string\n+     */\n+    public static function decryptWithPassword($ciphertext, $password, $raw_binary = false)\n+    {\n+        return self::decryptInternal(\n+            $ciphertext,\n+            KeyOrPassword::createFromPassword($password),\n+            $raw_binary\n+        );\n+    }\n+\n+    /**\n+     * Decrypts a legacy ciphertext produced by version 1 of this library.\n+     *\n+     * @param string $ciphertext\n+     * @param string $key\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     *\n+     * @return string\n+     */\n+    public static function legacyDecrypt($ciphertext, $key)\n+    {\n+        RuntimeTests::runtimeTest();\n+\n+        // Extract the HMAC from the front of the ciphertext.\n+        if (Core::ourStrlen($ciphertext) <= Core::LEGACY_MAC_BYTE_SIZE) {\n+            throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                'Ciphertext is too short.'\n+            );\n+        }\n+        $hmac = Core::ourSubstr($ciphertext, 0, Core::LEGACY_MAC_BYTE_SIZE);\n+        if ($hmac === false) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+        $ciphertext = Core::ourSubstr($ciphertext, Core::LEGACY_MAC_BYTE_SIZE);\n+        if ($ciphertext === false) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+\n+        // Regenerate the same authentication sub-key.\n+        $akey = Core::HKDF(\n+            Core::LEGACY_HASH_FUNCTION_NAME,\n+            $key,\n+            Core::LEGACY_KEY_BYTE_SIZE,\n+            Core::LEGACY_AUTHENTICATION_INFO_STRING,\n+            null\n+        );\n+\n+        if (self::verifyHMAC($hmac, $ciphertext, $akey)) {\n+            // Regenerate the same encryption sub-key.\n+            $ekey = Core::HKDF(\n+                Core::LEGACY_HASH_FUNCTION_NAME,\n+                $key,\n+                Core::LEGACY_KEY_BYTE_SIZE,\n+                Core::LEGACY_ENCRYPTION_INFO_STRING,\n+                null\n+            );\n+\n+            // Extract the IV from the ciphertext.\n+            if (Core::ourStrlen($ciphertext) <= Core::LEGACY_BLOCK_BYTE_SIZE) {\n+                throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                    'Ciphertext is too short.'\n+                );\n+            }\n+            $iv = Core::ourSubstr($ciphertext, 0, Core::LEGACY_BLOCK_BYTE_SIZE);\n+            if ($iv === false) {\n+                throw new Ex\\EnvironmentIsBrokenException();\n+            }\n+            $ciphertext = Core::ourSubstr($ciphertext, Core::LEGACY_BLOCK_BYTE_SIZE);\n+            if ($ciphertext === false) {\n+                throw new Ex\\EnvironmentIsBrokenException();\n+            }\n+\n+            // Do the decryption.\n+            $plaintext = self::plainDecrypt($ciphertext, $ekey, $iv, Core::LEGACY_CIPHER_METHOD);\n+            return $plaintext;\n+        } else {\n+            throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                'Integrity check failed.'\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Encrypts a string with either a key or a password.\n+     *\n+     * @param string        $plaintext\n+     * @param KeyOrPassword $secret\n+     * @param bool          $raw_binary\n+     *\n+     * @return string\n+     */\n+    private static function encryptInternal($plaintext, KeyOrPassword $secret, $raw_binary)\n+    {\n+        RuntimeTests::runtimeTest();\n+\n+        $salt = Core::secureRandom(Core::SALT_BYTE_SIZE);\n+        $keys = $secret->deriveKeys($salt);\n+        $ekey = $keys->getEncryptionKey();\n+        $akey = $keys->getAuthenticationKey();\n+        $iv     = Core::secureRandom(Core::BLOCK_BYTE_SIZE);\n+\n+        $ciphertext = Core::CURRENT_VERSION . $salt . $iv . self::plainEncrypt($plaintext, $ekey, $iv);\n+        $auth       = \\hash_hmac(Core::HASH_FUNCTION_NAME, $ciphertext, $akey, true);\n+        $ciphertext = $ciphertext . $auth;\n+\n+        if ($raw_binary) {\n+            return $ciphertext;\n+        }\n+        return Encoding::binToHex($ciphertext);\n+    }\n+\n+    /**\n+     * Decrypts a ciphertext to a string with either a key or a password.\n+     *\n+     * @param string        $ciphertext\n+     * @param KeyOrPassword $secret\n+     * @param bool          $raw_binary\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     *\n+     * @return string\n+     */\n+    private static function decryptInternal($ciphertext, KeyOrPassword $secret, $raw_binary)\n+    {\n+        RuntimeTests::runtimeTest();\n+\n+        if (! $raw_binary) {\n+            try {\n+                $ciphertext = Encoding::hexToBin($ciphertext);\n+            } catch (Ex\\BadFormatException $ex) {\n+                throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                    'Ciphertext has invalid hex encoding.'\n+                );\n+            }\n+        }\n+\n+        if (Core::ourStrlen($ciphertext) < Core::MINIMUM_CIPHERTEXT_SIZE) {\n+            throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                'Ciphertext is too short.'\n+            );\n+        }\n+\n+        // Get and check the version header.\n+        $header = Core::ourSubstr($ciphertext, 0, Core::HEADER_VERSION_SIZE);\n+        if ($header !== Core::CURRENT_VERSION) {\n+            throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                'Bad version header.'\n+            );\n+        }\n+\n+        // Get the salt.\n+        $salt = Core::ourSubstr(\n+            $ciphertext,\n+            Core::HEADER_VERSION_SIZE,\n+            Core::SALT_BYTE_SIZE\n+        );\n+        if ($salt === false) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+\n+        // Get the IV.\n+        $iv = Core::ourSubstr(\n+            $ciphertext,\n+            Core::HEADER_VERSION_SIZE + Core::SALT_BYTE_SIZE,\n+            Core::BLOCK_BYTE_SIZE\n+        );\n+        if ($iv === false) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+\n+        // Get the HMAC.\n+        $hmac = Core::ourSubstr(\n+            $ciphertext,\n+            Core::ourStrlen($ciphertext) - Core::MAC_BYTE_SIZE,\n+            Core::MAC_BYTE_SIZE\n+        );\n+        if ($hmac === false) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+\n+        // Get the actual encrypted ciphertext.\n+        $encrypted = Core::ourSubstr(\n+            $ciphertext,\n+            Core::HEADER_VERSION_SIZE + Core::SALT_BYTE_SIZE +\n+                Core::BLOCK_BYTE_SIZE,\n+            Core::ourStrlen($ciphertext) - Core::MAC_BYTE_SIZE - Core::SALT_BYTE_SIZE -\n+                Core::BLOCK_BYTE_SIZE - Core::HEADER_VERSION_SIZE\n+        );\n+        if ($encrypted === false) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+\n+        // Derive the separate encryption and authentication keys from the key\n+        // or password, whichever it is.\n+        $keys = $secret->deriveKeys($salt);\n+\n+        if (self::verifyHMAC($hmac, $header . $salt . $iv . $encrypted, $keys->getAuthenticationKey())) {\n+            $plaintext = self::plainDecrypt($encrypted, $keys->getEncryptionKey(), $iv, Core::CIPHER_METHOD);\n+            return $plaintext;\n+        } else {\n+            throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                'Integrity check failed.'\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Raw unauthenticated encryption (insecure on its own).\n+     *\n+     * @param string $plaintext\n+     * @param string $key\n+     * @param string $iv\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    protected static function plainEncrypt($plaintext, $key, $iv)\n+    {\n+        Core::ensureConstantExists('OPENSSL_RAW_DATA');\n+        Core::ensureFunctionExists('openssl_encrypt');\n+        $ciphertext = \\openssl_encrypt(\n+            $plaintext,\n+            Core::CIPHER_METHOD,\n+            $key,\n+            OPENSSL_RAW_DATA,\n+            $iv\n+        );\n+\n+        if ($ciphertext === false) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'openssl_encrypt() failed.'\n+            );\n+        }\n+\n+        return $ciphertext;\n+    }\n+\n+    /**\n+     * Raw unauthenticated decryption (insecure on its own).\n+     *\n+     * @param string $ciphertext\n+     * @param string $key\n+     * @param string $iv\n+     * @param string $cipherMethod\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    protected static function plainDecrypt($ciphertext, $key, $iv, $cipherMethod)\n+    {\n+        Core::ensureConstantExists('OPENSSL_RAW_DATA');\n+        Core::ensureFunctionExists('openssl_decrypt');\n+        $plaintext = \\openssl_decrypt(\n+            $ciphertext,\n+            $cipherMethod,\n+            $key,\n+            OPENSSL_RAW_DATA,\n+            $iv\n+        );\n+        if ($plaintext === false) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'openssl_decrypt() failed.'\n+            );\n+        }\n+\n+        return $plaintext;\n+    }\n+\n+    /**\n+     * Verifies an HMAC without leaking information through side-channels.\n+     *\n+     * @param string $correct_hmac\n+     * @param string $message\n+     * @param string $key\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return bool\n+     */\n+    protected static function verifyHMAC($correct_hmac, $message, $key)\n+    {\n+        $message_hmac = \\hash_hmac(Core::HASH_FUNCTION_NAME, $message, $key, true);\n+        return Core::hashEquals($correct_hmac, $message_hmac);\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/DerivedKeys.php",
          "status": "added",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -0,0 +1,37 @@\n+<?php\n+\n+namespace Defuse\\Crypto;\n+\n+final class DerivedKeys\n+{\n+    private $akey = null;\n+    private $ekey = null;\n+\n+    /**\n+     * Returns the authentication key.\n+     */\n+    public function getAuthenticationKey()\n+    {\n+        return $this->akey;\n+    }\n+\n+    /**\n+     * Returns the encryption key.\n+     */\n+    public function getEncryptionKey()\n+    {\n+        return $this->ekey;\n+    }\n+\n+    /**\n+     * Constructor for DerivedKeys.\n+     *\n+     * @param string $akey\n+     * @param string $ekey\n+     */\n+    public function __construct($akey, $ekey)\n+    {\n+        $this->akey = $akey;\n+        $this->ekey = $ekey;\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/Encoding.php",
          "status": "added",
          "additions": 212,
          "deletions": 0,
          "patch": "@@ -0,0 +1,212 @@\n+<?php\n+\n+namespace Defuse\\Crypto;\n+\n+use Defuse\\Crypto\\Exception as Ex;\n+\n+final class Encoding\n+{\n+    const CHECKSUM_BYTE_SIZE     = 32;\n+    const CHECKSUM_HASH_ALGO     = 'sha256';\n+    const SERIALIZE_HEADER_BYTES = 4;\n+\n+    /**\n+     * Converts a byte string to a hexadecimal string without leaking\n+     * information through side channels.\n+     *\n+     * @param string $byte_string\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public static function binToHex($byte_string)\n+    {\n+        $hex = '';\n+        $len = Core::ourStrlen($byte_string);\n+        for ($i = 0; $i < $len; ++$i) {\n+            $c = \\ord($byte_string[$i]) & 0xf;\n+            $b = \\ord($byte_string[$i]) >> 4;\n+            $hex .= \\pack(\n+                'CC',\n+                87 + $b + ((($b - 10) >> 8) & ~38),\n+                87 + $c + ((($c - 10) >> 8) & ~38)\n+            );\n+        }\n+        return $hex;\n+    }\n+\n+    /**\n+     * Converts a hexadecimal string into a byte string without leaking\n+     * information through side channels.\n+     *\n+     * @param string $hex_string\n+     *\n+     * @throws Ex\\BadFormatException\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public static function hexToBin($hex_string)\n+    {\n+        $hex_pos = 0;\n+        $bin     = '';\n+        $hex_len = Core::ourStrlen($hex_string);\n+        $state   = 0;\n+        $c_acc   = 0;\n+\n+        while ($hex_pos < $hex_len) {\n+            $c        = \\ord($hex_string[$hex_pos]);\n+            $c_num    = $c ^ 48;\n+            $c_num0   = ($c_num - 10) >> 8;\n+            $c_alpha  = ($c & ~32) - 55;\n+            $c_alpha0 = (($c_alpha - 10) ^ ($c_alpha - 16)) >> 8;\n+            if (($c_num0 | $c_alpha0) === 0) {\n+                throw new Ex\\BadFormatException(\n+                    'Encoding::hexToBin() input is not a hex string.'\n+                );\n+            }\n+            $c_val = ($c_num0 & $c_num) | ($c_alpha & $c_alpha0);\n+            if ($state === 0) {\n+                $c_acc = $c_val * 16;\n+            } else {\n+                $bin .= \\pack('C', $c_acc | $c_val);\n+            }\n+            $state ^= 1;\n+            ++$hex_pos;\n+        }\n+        return $bin;\n+    }\n+\n+    /*\n+     * SECURITY NOTE ON APPLYING CHECKSUMS TO SECRETS:\n+     *\n+     *      The checksum introduces a potential security weakness. For example,\n+     *      suppose we apply a checksum to a key, and that an adversary has an\n+     *      exploit against the process containing the key, such that they can\n+     *      overwrite an arbitrary byte of memory and then cause the checksum to\n+     *      be verified and learn the result.\n+     *\n+     *      In this scenario, the adversary can extract the key one byte at\n+     *      a time by overwriting it with their guess of its value and then\n+     *      asking if the checksum matches. If it does, their guess was right.\n+     *      This kind of attack may be more easy to implement and more reliable\n+     *      than a remote code execution attack.\n+     *\n+     *      This attack also applies to authenticated encryption as a whole, in\n+     *      the situation where the adversary can overwrite a byte of the key\n+     *      and then cause a valid ciphertext to be decrypted, and then\n+     *      determine whether the MAC check passed or failed.\n+     *\n+     *      By using the full SHA256 hash instead of truncating it, I'm ensuring\n+     *      that both ways of going about the attack are equivalently difficult.\n+     *      A shorter checksum of say 32 bits might be more useful to the\n+     *      adversary as an oracle in case their writes are coarser grained.\n+     *\n+     *      Because the scenario assumes a serious vulnerability, we don't try\n+     *      to prevent attacks of this style.\n+     */\n+\n+    /**\n+     * INTERNAL USE ONLY: Applies a version header, applies a checksum, and\n+     * then encodes a byte string into a range of printable ASCII characters.\n+     *\n+     * @param string $header\n+     * @param string $bytes\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public static function saveBytesToChecksummedAsciiSafeString($header, $bytes)\n+    {\n+        // Headers must be a constant length to prevent one type's header from\n+        // being a prefix of another type's header, leading to ambiguity.\n+        if (Core::ourStrlen($header) !== self::SERIALIZE_HEADER_BYTES) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'Header must be ' . self::SERIALIZE_HEADER_BYTES . ' bytes.'\n+            );\n+        }\n+\n+        return Encoding::binToHex(\n+            $header .\n+            $bytes .\n+            \\hash(\n+                self::CHECKSUM_HASH_ALGO,\n+                $header . $bytes,\n+                true\n+            )\n+        );\n+    }\n+\n+    /**\n+     * INTERNAL USE ONLY: Decodes, verifies the header and checksum, and returns\n+     * the encoded byte string.\n+     *\n+     * @param string $expected_header\n+     * @param string $string\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\BadFormatException\n+     *\n+     * @return string\n+     */\n+    public static function loadBytesFromChecksummedAsciiSafeString($expected_header, $string)\n+    {\n+        // Headers must be a constant length to prevent one type's header from\n+        // being a prefix of another type's header, leading to ambiguity.\n+        if (Core::ourStrlen($expected_header) !== self::SERIALIZE_HEADER_BYTES) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'Header must be 4 bytes.'\n+            );\n+        }\n+\n+        $bytes = Encoding::hexToBin($string);\n+\n+        /* Make sure we have enough bytes to get the version header and checksum. */\n+        if (Core::ourStrlen($bytes) < self::SERIALIZE_HEADER_BYTES + self::CHECKSUM_BYTE_SIZE) {\n+            throw new Ex\\BadFormatException(\n+                'Encoded data is shorter than expected.'\n+            );\n+        }\n+\n+        /* Grab the version header. */\n+        $actual_header = Core::ourSubstr($bytes, 0, self::SERIALIZE_HEADER_BYTES);\n+\n+        if ($actual_header !== $expected_header) {\n+            throw new Ex\\BadFormatException(\n+                'Invalid header.'\n+            );\n+        }\n+\n+        /* Grab the bytes that are part of the checksum. */\n+        $checked_bytes = Core::ourSubstr(\n+            $bytes,\n+            0,\n+            Core::ourStrlen($bytes) - self::CHECKSUM_BYTE_SIZE\n+        );\n+\n+        /* Grab the included checksum. */\n+        $checksum_a = Core::ourSubstr(\n+            $bytes,\n+            Core::ourStrlen($bytes) - self::CHECKSUM_BYTE_SIZE,\n+            self::CHECKSUM_BYTE_SIZE\n+        );\n+\n+        /* Re-compute the checksum. */\n+        $checksum_b = \\hash(self::CHECKSUM_HASH_ALGO, $checked_bytes, true);\n+\n+        /* Check if the checksum matches. */\n+        if (! Core::hashEquals($checksum_a, $checksum_b)) {\n+            throw new Ex\\BadFormatException(\n+                \"Data is corrupted, the checksum doesn't match\"\n+            );\n+        }\n+\n+        return Core::ourSubstr(\n+            $bytes,\n+            self::SERIALIZE_HEADER_BYTES,\n+            Core::ourStrlen($bytes) - self::SERIALIZE_HEADER_BYTES - self::CHECKSUM_BYTE_SIZE\n+        );\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/Exception/BadFormatException.php",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+<?php\n+\n+namespace Defuse\\Crypto\\Exception;\n+\n+class BadFormatException extends \\Defuse\\Crypto\\Exception\\CryptoException\n+{\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/Exception/CryptoException.php",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+<?php\n+\n+namespace Defuse\\Crypto\\Exception;\n+\n+class CryptoException extends \\Exception\n+{\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/Exception/EnvironmentIsBrokenException.php",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+<?php\n+\n+namespace Defuse\\Crypto\\Exception;\n+\n+class EnvironmentIsBrokenException extends \\Defuse\\Crypto\\Exception\\CryptoException\n+{\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/Exception/IOException.php",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+<?php\n+\n+namespace Defuse\\Crypto\\Exception;\n+\n+class IOException extends \\Defuse\\Crypto\\Exception\\CryptoException\n+{\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/Exception/WrongKeyOrModifiedCiphertextException.php",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+<?php\n+\n+namespace Defuse\\Crypto\\Exception;\n+\n+class WrongKeyOrModifiedCiphertextException extends \\Defuse\\Crypto\\Exception\\CryptoException\n+{\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/File.php",
          "status": "added",
          "additions": 755,
          "deletions": 0,
          "patch": "@@ -0,0 +1,755 @@\n+<?php\n+\n+namespace Defuse\\Crypto;\n+\n+use Defuse\\Crypto\\Exception as Ex;\n+\n+final class File\n+{\n+    /**\n+     * Encrypts the input file, saving the ciphertext to the output file.\n+     *\n+     * @param string $inputFilename\n+     * @param string $outputFilename\n+     * @param Key    $key\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\IOException\n+     */\n+    public static function encryptFile($inputFilename, $outputFilename, Key $key)\n+    {\n+        self::encryptFileInternal(\n+            $inputFilename,\n+            $outputFilename,\n+            KeyOrPassword::createFromKey($key)\n+        );\n+    }\n+\n+    /**\n+     * Encrypts a file with a password, using a slow key derivation function to\n+     * make password cracking more expensive.\n+     *\n+     * @param string $inputFilename\n+     * @param string $outputFilename\n+     * @param string $password\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\IOException\n+     */\n+    public static function encryptFileWithPassword($inputFilename, $outputFilename, $password)\n+    {\n+        self::encryptFileInternal(\n+            $inputFilename,\n+            $outputFilename,\n+            KeyOrPassword::createFromPassword($password)\n+        );\n+    }\n+\n+    /**\n+     * Decrypts the input file, saving the plaintext to the output file.\n+     *\n+     * @param string $inputFilename\n+     * @param string $outputFilename\n+     * @param Key    $key\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\IOException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     */\n+    public static function decryptFile($inputFilename, $outputFilename, Key $key)\n+    {\n+        self::decryptFileInternal(\n+            $inputFilename,\n+            $outputFilename,\n+            KeyOrPassword::createFromKey($key)\n+        );\n+    }\n+\n+    /**\n+     * Decrypts a file with a password, using a slow key derivation function to\n+     * make password cracking more expensive.\n+     *\n+     * @param string $inputFilename\n+     * @param string $outputFilename\n+     * @param string $password\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\IOException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     */\n+    public static function decryptFileWithPassword($inputFilename, $outputFilename, $password)\n+    {\n+        self::decryptFileInternal(\n+            $inputFilename,\n+            $outputFilename,\n+            KeyOrPassword::createFromPassword($password)\n+        );\n+    }\n+\n+    /**\n+     * Takes two resource handles and encrypts the contents of the first,\n+     * writing the ciphertext into the second.\n+     *\n+     * @param resource $inputHandle\n+     * @param resource $outputHandle\n+     * @param Key      $key\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     */\n+    public static function encryptResource($inputHandle, $outputHandle, Key $key)\n+    {\n+        self::encryptResourceInternal(\n+            $inputHandle,\n+            $outputHandle,\n+            KeyOrPassword::createFromKey($key)\n+        );\n+    }\n+\n+    /**\n+     * Encrypts the contents of one resource handle into another with a\n+     * password, using a slow key derivation function to make password cracking\n+     * more expensive.\n+     *\n+     * @param resource $inputHandle\n+     * @param resource $outputHandle\n+     * @param string   $password\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\IOException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     */\n+    public static function encryptResourceWithPassword($inputHandle, $outputHandle, $password)\n+    {\n+        self::encryptResourceInternal(\n+            $inputHandle,\n+            $outputHandle,\n+            KeyOrPassword::createFromPassword($password)\n+        );\n+    }\n+\n+    /**\n+     * Takes two resource handles and decrypts the contents of the first,\n+     * writing the plaintext into the second.\n+     *\n+     * @param resource $inputHandle\n+     * @param resource $outputHandle\n+     * @param Key      $key\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\IOException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     */\n+    public static function decryptResource($inputHandle, $outputHandle, Key $key)\n+    {\n+        self::decryptResourceInternal(\n+            $inputHandle,\n+            $outputHandle,\n+            KeyOrPassword::createFromKey($key)\n+        );\n+    }\n+\n+    /**\n+     * Decrypts the contents of one resource into another with a password, using\n+     * a slow key derivation function to make password cracking more expensive.\n+     *\n+     * @param resource $inputHandle\n+     * @param resource $outputHandle\n+     * @param string   $password\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\IOException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     */\n+    public static function decryptResourceWithPassword($inputHandle, $outputHandle, $password)\n+    {\n+        self::decryptResourceInternal(\n+            $inputHandle,\n+            $outputHandle,\n+            KeyOrPassword::createFromPassword($password)\n+        );\n+    }\n+\n+    /**\n+     * Encrypts a file with either a key or a password.\n+     *\n+     * @param string        $inputFilename\n+     * @param string        $outputFilename\n+     * @param KeyOrPassword $secret\n+     *\n+     * @throws Ex\\CryptoException\n+     * @throws Ex\\IOException\n+     */\n+    private static function encryptFileInternal($inputFilename, $outputFilename, KeyOrPassword $secret)\n+    {\n+        /* Open the input file. */\n+        $if = @\\fopen($inputFilename, 'rb');\n+        if ($if === false) {\n+            throw new Ex\\IOException(\n+                'Cannot open input file for encrypting: ' .\n+                self::getLastErrorMessage()\n+            );\n+        }\n+        if (\\is_callable('\\\\stream_set_read_buffer')) {\n+            /* This call can fail, but the only consequence is performance. */\n+            \\stream_set_read_buffer($if, 0);\n+        }\n+\n+        /* Open the output file. */\n+        $of = @\\fopen($outputFilename, 'wb');\n+        if ($of === false) {\n+            \\fclose($if);\n+            throw new Ex\\IOException(\n+                'Cannot open output file for encrypting: ' .\n+                self::getLastErrorMessage()\n+            );\n+        }\n+        if (\\is_callable('\\\\stream_set_write_buffer')) {\n+            /* This call can fail, but the only consequence is performance. */\n+            \\stream_set_write_buffer($of, 0);\n+        }\n+\n+        /* Perform the encryption. */\n+        try {\n+            self::encryptResourceInternal($if, $of, $secret);\n+        } catch (Ex\\CryptoException $ex) {\n+            \\fclose($if);\n+            \\fclose($of);\n+            throw $ex;\n+        }\n+\n+        /* Close the input file. */\n+        if (\\fclose($if) === false) {\n+            \\fclose($of);\n+            throw new Ex\\IOException(\n+                'Cannot close input file after encrypting'\n+            );\n+        }\n+\n+        /* Close the output file. */\n+        if (\\fclose($of) === false) {\n+            throw new Ex\\IOException(\n+                'Cannot close output file after encrypting'\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Decrypts a file with either a key or a password.\n+     *\n+     * @param string        $inputFilename\n+     * @param string        $outputFilename\n+     * @param KeyOrPassword $secret\n+     *\n+     * @throws Ex\\CryptoException\n+     * @throws Ex\\IOException\n+     */\n+    private static function decryptFileInternal($inputFilename, $outputFilename, KeyOrPassword $secret)\n+    {\n+        /* Open the input file. */\n+        $if = @\\fopen($inputFilename, 'rb');\n+        if ($if === false) {\n+            throw new Ex\\IOException(\n+                'Cannot open input file for decrypting: ' .\n+                self::getLastErrorMessage()\n+            );\n+        }\n+        \n+        if (\\is_callable('\\\\stream_set_read_buffer')) {\n+            /* This call can fail, but the only consequence is performance. */\n+            \\stream_set_read_buffer($if, 0);\n+        }\n+\n+        /* Open the output file. */\n+        $of = @\\fopen($outputFilename, 'wb');\n+        if ($of === false) {\n+            \\fclose($if);\n+            throw new Ex\\IOException(\n+                'Cannot open output file for decrypting: ' .\n+                self::getLastErrorMessage()\n+            );\n+        }\n+        \n+        if (\\is_callable('\\\\stream_set_write_buffer')) {\n+            /* This call can fail, but the only consequence is performance. */\n+            \\stream_set_write_buffer($of, 0);\n+        }\n+\n+        /* Perform the decryption. */\n+        try {\n+            self::decryptResourceInternal($if, $of, $secret);\n+        } catch (Ex\\CryptoException $ex) {\n+            \\fclose($if);\n+            \\fclose($of);\n+            throw $ex;\n+        }\n+\n+        /* Close the input file. */\n+        if (\\fclose($if) === false) {\n+            \\fclose($of);\n+            throw new Ex\\IOException(\n+                'Cannot close input file after decrypting'\n+            );\n+        }\n+\n+        /* Close the output file. */\n+        if (\\fclose($of) === false) {\n+            throw new Ex\\IOException(\n+                'Cannot close output file after decrypting'\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Encrypts a resource with either a key or a password.\n+     *\n+     * @param resource      $inputHandle\n+     * @param resource      $outputHandle\n+     * @param KeyOrPassword $secret\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\IOException\n+     */\n+    private static function encryptResourceInternal($inputHandle, $outputHandle, KeyOrPassword $secret)\n+    {\n+        if (! \\is_resource($inputHandle)) {\n+            throw new Ex\\IOException(\n+                'Input handle must be a resource!'\n+            );\n+        }\n+        if (! \\is_resource($outputHandle)) {\n+            throw new Ex\\IOException(\n+                'Output handle must be a resource!'\n+            );\n+        }\n+\n+        $inputStat = \\fstat($inputHandle);\n+        $inputSize = $inputStat['size'];\n+\n+        $file_salt = Core::secureRandom(Core::SALT_BYTE_SIZE);\n+        $keys = $secret->deriveKeys($file_salt);\n+        $ekey = $keys->getEncryptionKey();\n+        $akey = $keys->getAuthenticationKey();\n+\n+        $ivsize = Core::BLOCK_BYTE_SIZE;\n+        $iv     = Core::secureRandom($ivsize);\n+\n+        /* Initialize a streaming HMAC state. */\n+        $hmac = \\hash_init(Core::HASH_FUNCTION_NAME, HASH_HMAC, $akey);\n+        if ($hmac === false) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'Cannot initialize a hash context'\n+            );\n+        }\n+\n+        /* Write the header, salt, and IV. */\n+        self::writeBytes(\n+            $outputHandle,\n+            Core::CURRENT_VERSION . $file_salt . $iv,\n+            Core::HEADER_VERSION_SIZE + Core::SALT_BYTE_SIZE + $ivsize\n+        );\n+\n+        /* Add the header, salt, and IV to the HMAC. */\n+        \\hash_update($hmac, Core::CURRENT_VERSION);\n+        \\hash_update($hmac, $file_salt);\n+        \\hash_update($hmac, $iv);\n+\n+        /* $thisIv will be incremented after each call to the encryption. */\n+        $thisIv = $iv;\n+\n+        /* How many blocks do we encrypt at a time? We increment by this value. */\n+        $inc = Core::BUFFER_BYTE_SIZE / Core::BLOCK_BYTE_SIZE;\n+\n+        /* Loop until we reach the end of the input file. */\n+        $at_file_end = false;\n+        while (! (\\feof($inputHandle) || $at_file_end)) {\n+            /* Find out if we can read a full buffer, or only a partial one. */\n+            $pos = \\ftell($inputHandle);\n+            if ($pos === false) {\n+                throw new Ex\\IOException(\n+                    'Could not get current position in input file during encryption'\n+                );\n+            }\n+            if ($pos + Core::BUFFER_BYTE_SIZE >= $inputSize) {\n+                /* We're at the end of the file, so we need to break out of the loop. */\n+                $at_file_end = true;\n+                $read = self::readBytes(\n+                    $inputHandle,\n+                    $inputSize - $pos\n+                );\n+            } else {\n+                $read = self::readBytes(\n+                    $inputHandle,\n+                    Core::BUFFER_BYTE_SIZE\n+                );\n+            }\n+\n+            /* Encrypt this buffer. */\n+            $encrypted = \\openssl_encrypt(\n+                $read,\n+                Core::CIPHER_METHOD,\n+                $ekey,\n+                OPENSSL_RAW_DATA,\n+                $thisIv\n+            );\n+\n+            if ($encrypted === false) {\n+                throw new Ex\\EnvironmentIsBrokenException(\n+                    'OpenSSL encryption error'\n+                );\n+            }\n+\n+            /* Write this buffer's ciphertext. */\n+            self::writeBytes($outputHandle, $encrypted, Core::ourStrlen($encrypted));\n+            /* Add this buffer's ciphertext to the HMAC. */\n+            \\hash_update($hmac, $encrypted);\n+\n+            /* Increment the counter by the number of blocks in a buffer. */\n+            $thisIv = Core::incrementCounter($thisIv, $inc);\n+            /* WARNING: Usually, unless the file is a multiple of the buffer\n+             * size, $thisIv will contain an incorrect value here on the last\n+             * iteration of this loop. */\n+        }\n+\n+        /* Get the HMAC and append it to the ciphertext. */\n+        $final_mac = \\hash_final($hmac, true);\n+        self::writeBytes($outputHandle, $final_mac, Core::MAC_BYTE_SIZE);\n+    }\n+\n+    /**\n+     * Decrypts a file-backed resource with either a key or a password.\n+     *\n+     * @param resource      $inputHandle\n+     * @param resource      $outputHandle\n+     * @param KeyOrPassword $secret\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\IOException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     */\n+    public static function decryptResourceInternal($inputHandle, $outputHandle, KeyOrPassword $secret)\n+    {\n+        if (! \\is_resource($inputHandle)) {\n+            throw new Ex\\IOException(\n+                'Input handle must be a resource!'\n+            );\n+        }\n+        if (! \\is_resource($outputHandle)) {\n+            throw new Ex\\IOException(\n+                'Output handle must be a resource!'\n+            );\n+        }\n+\n+        /* Make sure the file is big enough for all the reads we need to do. */\n+        $stat = \\fstat($inputHandle);\n+        if ($stat['size'] < Core::MINIMUM_CIPHERTEXT_SIZE) {\n+            throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                'Input file is too small to have been created by this library.'\n+            );\n+        }\n+\n+        /* Check the version header. */\n+        $header = self::readBytes($inputHandle, Core::HEADER_VERSION_SIZE);\n+        if ($header !== Core::CURRENT_VERSION) {\n+            throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                'Bad version header.'\n+            );\n+        }\n+\n+        /* Get the salt. */\n+        $file_salt = self::readBytes($inputHandle, Core::SALT_BYTE_SIZE);\n+\n+        /* Get the IV. */\n+        $ivsize = Core::BLOCK_BYTE_SIZE;\n+        $iv     = self::readBytes($inputHandle, $ivsize);\n+\n+        /* Derive the authentication and encryption keys. */\n+        $keys = $secret->deriveKeys($file_salt);\n+        $ekey = $keys->getEncryptionKey();\n+        $akey = $keys->getAuthenticationKey();\n+\n+        /* We'll store the MAC of each buffer-sized chunk as we verify the\n+         * actual MAC, so that we can check them again when decrypting. */\n+        $macs = [];\n+\n+        /* $thisIv will be incremented after each call to the decryption. */\n+        $thisIv = $iv;\n+\n+        /* How many blocks do we encrypt at a time? We increment by this value. */\n+        $inc = Core::BUFFER_BYTE_SIZE / Core::BLOCK_BYTE_SIZE;\n+\n+        /* Get the HMAC. */\n+        if (\\fseek($inputHandle, (-1 * Core::MAC_BYTE_SIZE), SEEK_END) === false) {\n+            throw new Ex\\IOException(\n+                'Cannot seek to beginning of MAC within input file'\n+            );\n+        }\n+\n+        /* Get the position of the last byte in the actual ciphertext. */\n+        $cipher_end = \\ftell($inputHandle);\n+        if ($cipher_end === false) {\n+            throw new Ex\\IOException(\n+                'Cannot read input file'\n+            );\n+        }\n+        /* We have the position of the first byte of the HMAC. Go back by one. */\n+        --$cipher_end;\n+\n+        /* Read the HMAC. */\n+        $stored_mac = self::readBytes($inputHandle, Core::MAC_BYTE_SIZE);\n+\n+        /* Initialize a streaming HMAC state. */\n+        $hmac = \\hash_init(Core::HASH_FUNCTION_NAME, HASH_HMAC, $akey);\n+        if ($hmac === false) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'Cannot initialize a hash context'\n+            );\n+        }\n+\n+        /* Reset file pointer to the beginning of the file after the header */\n+        if (\\fseek($inputHandle, Core::HEADER_VERSION_SIZE, SEEK_SET) === false) {\n+            throw new Ex\\IOException(\n+                'Cannot read seek within input file'\n+            );\n+        }\n+\n+        /* Seek to the start of the actual ciphertext. */\n+        if (\\fseek($inputHandle, Core::SALT_BYTE_SIZE + $ivsize, SEEK_CUR) === false) {\n+            throw new Ex\\IOException(\n+                'Cannot seek input file to beginning of ciphertext'\n+            );\n+        }\n+\n+        /* PASS #1: Calculating the HMAC. */\n+\n+        \\hash_update($hmac, $header);\n+        \\hash_update($hmac, $file_salt);\n+        \\hash_update($hmac, $iv);\n+        $hmac2 = \\hash_copy($hmac);\n+\n+        $break = false;\n+        while (! $break) {\n+            $pos = \\ftell($inputHandle);\n+            if ($pos === false) {\n+                throw new Ex\\IOException(\n+                    'Could not get current position in input file during decryption'\n+                );\n+            }\n+\n+            /* Read the next buffer-sized chunk (or less). */\n+            if ($pos + Core::BUFFER_BYTE_SIZE >= $cipher_end) {\n+                $break = true;\n+                $read  = self::readBytes(\n+                    $inputHandle,\n+                    $cipher_end - $pos + 1\n+                );\n+            } else {\n+                $read = self::readBytes(\n+                    $inputHandle,\n+                    Core::BUFFER_BYTE_SIZE\n+                );\n+            }\n+\n+            /* Update the HMAC. */\n+            \\hash_update($hmac, $read);\n+\n+            /* Remember this buffer-sized chunk's HMAC. */\n+            $chunk_mac = \\hash_copy($hmac);\n+            if ($chunk_mac === false) {\n+                throw new Ex\\EnvironmentIsBrokenException(\n+                    'Cannot duplicate a hash context'\n+                );\n+            }\n+            $macs []= \\hash_final($chunk_mac);\n+        }\n+\n+        /* Get the final HMAC, which should match the stored one. */\n+        $final_mac = \\hash_final($hmac, true);\n+\n+        /* Verify the HMAC. */\n+        if (! Core::hashEquals($final_mac, $stored_mac)) {\n+            throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                'Integrity check failed.'\n+            );\n+        }\n+\n+        /* PASS #2: Decrypt and write output. */\n+\n+        /* Rewind to the start of the actual ciphertext. */\n+        if (\\fseek($inputHandle, Core::SALT_BYTE_SIZE + $ivsize + Core::HEADER_VERSION_SIZE, SEEK_SET) === false) {\n+            throw new Ex\\IOException(\n+                'Could not move the input file pointer during decryption'\n+            );\n+        }\n+\n+        $at_file_end = false;\n+        while (! $at_file_end) {\n+            $pos = \\ftell($inputHandle);\n+            if ($pos === false) {\n+                throw new Ex\\IOException(\n+                    'Could not get current position in input file during decryption'\n+                );\n+            }\n+\n+            /* Read the next buffer-sized chunk (or less). */\n+            if ($pos + Core::BUFFER_BYTE_SIZE >= $cipher_end) {\n+                $at_file_end = true;\n+                $read   = self::readBytes(\n+                    $inputHandle,\n+                    $cipher_end - $pos + 1\n+                );\n+            } else {\n+                $read = self::readBytes(\n+                    $inputHandle,\n+                    Core::BUFFER_BYTE_SIZE\n+                );\n+            }\n+\n+            /* Recalculate the MAC (so far) and compare it with the one we\n+             * remembered from pass #1 to ensure attackers didn't change the\n+             * ciphertext after MAC verification. */\n+            \\hash_update($hmac2, $read);\n+            $calc_mac = \\hash_copy($hmac2);\n+            if ($calc_mac === false) {\n+                throw new Ex\\EnvironmentIsBrokenException(\n+                    'Cannot duplicate a hash context'\n+                );\n+            }\n+            $calc = \\hash_final($calc_mac);\n+\n+            if (empty($macs)) {\n+                throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                    'File was modified after MAC verification'\n+                );\n+            } elseif (! Core::hashEquals(\\array_shift($macs), $calc)) {\n+                throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                    'File was modified after MAC verification'\n+                );\n+            }\n+\n+            /* Decrypt this buffer-sized chunk. */\n+            $decrypted = \\openssl_decrypt(\n+                $read,\n+                Core::CIPHER_METHOD,\n+                $ekey,\n+                OPENSSL_RAW_DATA,\n+                $thisIv\n+            );\n+            if ($decrypted === false) {\n+                throw new Ex\\EnvironmentIsBrokenException(\n+                    'OpenSSL decryption error'\n+                );\n+            }\n+\n+            /* Write the plaintext to the output file. */\n+            self::writeBytes(\n+                $outputHandle,\n+                $decrypted,\n+                Core::ourStrlen($decrypted)\n+            );\n+\n+            /* Increment the IV by the amount of blocks in a buffer. */\n+            $thisIv = Core::incrementCounter($thisIv, $inc);\n+            /* WARNING: Usually, unless the file is a multiple of the buffer\n+             * size, $thisIv will contain an incorrect value here on the last\n+             * iteration of this loop. */\n+        }\n+    }\n+\n+    /**\n+     * Read from a stream; prevent partial reads.\n+     *\n+     * @param resource $stream\n+     * @param int      $num_bytes\n+     *\n+     * @throws Ex\\IOException\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public static function readBytes($stream, $num_bytes)\n+    {\n+        if ($num_bytes < 0) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'Tried to read less than 0 bytes'\n+            );\n+        } elseif ($num_bytes === 0) {\n+            return '';\n+        }\n+        $buf       = '';\n+        $remaining = $num_bytes;\n+        while ($remaining > 0 && ! \\feof($stream)) {\n+            $read = \\fread($stream, $remaining);\n+\n+            if ($read === false) {\n+                throw new Ex\\IOException(\n+                    'Could not read from the file'\n+                );\n+            }\n+            $buf .= $read;\n+            $remaining -= Core::ourStrlen($read);\n+        }\n+        if (Core::ourStrlen($buf) !== $num_bytes) {\n+            throw new Ex\\IOException(\n+                'Tried to read past the end of the file'\n+            );\n+        }\n+        return $buf;\n+    }\n+\n+    /**\n+     * Write to a stream; prevents partial writes.\n+     *\n+     * @param resource $stream\n+     * @param string   $buf\n+     * @param int      $num_bytes\n+     *\n+     * @throws Ex\\IOException\n+     *\n+     * @return string\n+     */\n+    public static function writeBytes($stream, $buf, $num_bytes = null)\n+    {\n+        $bufSize = Core::ourStrlen($buf);\n+        if ($num_bytes === null) {\n+            $num_bytes = $bufSize;\n+        }\n+        if ($num_bytes > $bufSize) {\n+            throw new Ex\\IOException(\n+                'Trying to write more bytes than the buffer contains.'\n+            );\n+        }\n+        if ($num_bytes < 0) {\n+            throw new Ex\\IOException(\n+                'Tried to write less than 0 bytes'\n+            );\n+        }\n+        $remaining = $num_bytes;\n+        while ($remaining > 0) {\n+            $written = \\fwrite($stream, $buf, $remaining);\n+            if ($written === false) {\n+                throw new Ex\\IOException(\n+                    'Could not write to the file'\n+                );\n+            }\n+            $buf = Core::ourSubstr($buf, $written, null);\n+            $remaining -= $written;\n+        }\n+        return $num_bytes;\n+    }\n+\n+    /**\n+     * Returns the last PHP error's or warning's message string.\n+     *\n+     * @return string\n+     */\n+    private static function getLastErrorMessage()\n+    {\n+        $error = error_get_last();\n+        if ($error === null) {\n+            return '[no PHP error]';\n+        } else {\n+            return $error['message'];\n+        }\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/Key.php",
          "status": "added",
          "additions": 84,
          "deletions": 0,
          "patch": "@@ -0,0 +1,84 @@\n+<?php\n+\n+namespace Defuse\\Crypto;\n+\n+use Defuse\\Crypto\\Exception as Ex;\n+\n+final class Key\n+{\n+    const KEY_CURRENT_VERSION = \"\\xDE\\xF0\\x00\\x00\";\n+    const KEY_BYTE_SIZE       = 32;\n+\n+    private $key_bytes = null;\n+\n+    /**\n+     * Creates new random key.\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return Key\n+     */\n+    public static function createNewRandomKey()\n+    {\n+        return new Key(Core::secureRandom(self::KEY_BYTE_SIZE));\n+    }\n+\n+    /**\n+     * Loads a Key from its encoded form.\n+     *\n+     * @param string $saved_key_string\n+     *\n+     * @throws Ex\\BadFormatException\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return Key\n+     */\n+    public static function loadFromAsciiSafeString($saved_key_string)\n+    {\n+        $key_bytes = Encoding::loadBytesFromChecksummedAsciiSafeString(self::KEY_CURRENT_VERSION, $saved_key_string);\n+        return new Key($key_bytes);\n+    }\n+\n+    /**\n+     * Encodes the Key into a string of printable ASCII characters.\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public function saveToAsciiSafeString()\n+    {\n+        return Encoding::saveBytesToChecksummedAsciiSafeString(\n+            self::KEY_CURRENT_VERSION,\n+            $this->key_bytes\n+        );\n+    }\n+\n+    /**\n+     * Gets the raw bytes of the key.\n+     *\n+     * @return string\n+     */\n+    public function getRawBytes()\n+    {\n+        return $this->key_bytes;\n+    }\n+\n+    /**\n+     * Constructs a new Key object from a string of raw bytes.\n+     *\n+     * @param string $bytes\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     */\n+    private function __construct($bytes)\n+    {\n+        if (Core::ourStrlen($bytes) !== self::KEY_BYTE_SIZE) {\n+            throw new Ex\\EnvironmentIsBrokenException(\n+                'Bad key length.'\n+            );\n+        }\n+        $this->key_bytes = $bytes;\n+    }\n+\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/KeyOrPassword.php",
          "status": "added",
          "additions": 119,
          "deletions": 0,
          "patch": "@@ -0,0 +1,119 @@\n+<?php\n+\n+namespace Defuse\\Crypto;\n+\n+use Defuse\\Crypto\\Exception as Ex;\n+\n+final class KeyOrPassword\n+{\n+    const PBKDF2_ITERATIONS    = 100000;\n+    const SECRET_TYPE_KEY      = 1;\n+    const SECRET_TYPE_PASSWORD = 2;\n+\n+    private $secret_type = null;\n+    private $secret      = null;\n+\n+    /**\n+     * Initializes an instance of KeyOrPassword from a key.\n+     *\n+     * @param Key $key\n+     *\n+     * @return KeyOrPassword\n+     */\n+    public static function createFromKey(Key $key)\n+    {\n+        return new KeyOrPassword(self::SECRET_TYPE_KEY, $key);\n+    }\n+\n+    /**\n+     * Initializes an instance of KeyOrPassword from a password.\n+     *\n+     * @param string $password\n+     *\n+     * @return KeyOrPassword\n+     */\n+    public static function createFromPassword($password)\n+    {\n+        return new KeyOrPassword(self::SECRET_TYPE_PASSWORD, $password);\n+    }\n+\n+    /**\n+     * Derives authentication and encryption keys from the secret, using a slow\n+     * key derivation function if the secret is a password.\n+     *\n+     * @param string $salt\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return DerivedKeys\n+     */\n+    public function deriveKeys($salt)\n+    {\n+        if (Core::ourStrlen($salt) !== Core::SALT_BYTE_SIZE) {\n+            throw new Ex\\EnvironmentIsBrokenException('Bad salt.');\n+        }\n+\n+        if ($this->secret_type === self::SECRET_TYPE_KEY) {\n+            $akey = Core::HKDF(\n+                Core::HASH_FUNCTION_NAME,\n+                $this->secret->getRawBytes(),\n+                Core::KEY_BYTE_SIZE,\n+                Core::AUTHENTICATION_INFO_STRING,\n+                $salt\n+            );\n+            $ekey = Core::HKDF(\n+                Core::HASH_FUNCTION_NAME,\n+                $this->secret->getRawBytes(),\n+                Core::KEY_BYTE_SIZE,\n+                Core::ENCRYPTION_INFO_STRING,\n+                $salt\n+            );\n+            return new DerivedKeys($akey, $ekey);\n+        } elseif ($this->secret_type === self::SECRET_TYPE_PASSWORD) {\n+            /* Our PBKDF2 polyfill is vulnerable to a DoS attack documented in\n+             * GitHub issue #230. The fix is to pre-hash the password to ensure\n+             * it is short. We do the prehashing here instead of in pbkdf2() so\n+             * that pbkdf2() still computes the function as defined by the\n+             * standard. */\n+            $prehash = \\hash(Core::HASH_FUNCTION_NAME, $this->secret, true);\n+            $prekey = Core::pbkdf2(\n+                Core::HASH_FUNCTION_NAME,\n+                $prehash,\n+                $salt,\n+                self::PBKDF2_ITERATIONS,\n+                Core::KEY_BYTE_SIZE,\n+                true\n+            );\n+            $akey = Core::HKDF(\n+                Core::HASH_FUNCTION_NAME,\n+                $prekey,\n+                Core::KEY_BYTE_SIZE,\n+                Core::AUTHENTICATION_INFO_STRING,\n+                $salt\n+            );\n+            /* Note the cryptographic re-use of $salt here. */\n+            $ekey = Core::HKDF(\n+                Core::HASH_FUNCTION_NAME,\n+                $prekey,\n+                Core::KEY_BYTE_SIZE,\n+                Core::ENCRYPTION_INFO_STRING,\n+                $salt\n+            );\n+            return new DerivedKeys($akey, $ekey);\n+        } else {\n+            throw new Ex\\EnvironmentIsBrokenException('Bad secret type.');\n+        }\n+    }\n+\n+    /**\n+     * Constructor for KeyOrPassword.\n+     *\n+     * @param int   $secret_type\n+     * @param mixed $secret      (either a Key or a password string)\n+     */\n+    private function __construct($secret_type, $secret)\n+    {\n+        $this->secret_type = $secret_type;\n+        $this->secret = $secret;\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/KeyProtectedByPassword.php",
          "status": "added",
          "additions": 112,
          "deletions": 0,
          "patch": "@@ -0,0 +1,112 @@\n+<?php\n+\n+namespace Defuse\\Crypto;\n+\n+use Defuse\\Crypto\\Exception as Ex;\n+\n+final class KeyProtectedByPassword\n+{\n+    const PASSWORD_KEY_CURRENT_VERSION = \"\\xDE\\xF1\\x00\\x00\";\n+\n+    private $encrypted_key = null;\n+\n+    /**\n+     * Creates a random key protected by the provided password.\n+     *\n+     * @param string $password\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return KeyProtectedByPassword\n+     */\n+    public static function createRandomPasswordProtectedKey($password)\n+    {\n+        $inner_key = Key::createNewRandomKey();\n+        /* The password is hashed as a form of poor-man's domain separation\n+         * between this use of encryptWithPassword() and other uses of\n+         * encryptWithPassword() that the user may also be using as part of the\n+         * same protocol. */\n+        $encrypted_key = Crypto::encryptWithPassword(\n+            $inner_key->saveToAsciiSafeString(),\n+            \\hash(Core::HASH_FUNCTION_NAME, $password, true),\n+            true\n+        );\n+\n+        return new KeyProtectedByPassword($encrypted_key);\n+    }\n+\n+    /**\n+     * Loads a KeyProtectedByPassword from its encoded form.\n+     *\n+     * @param string $saved_key_string\n+     *\n+     * @throws Ex\\BadFormatException\n+     *\n+     * @return KeyProtectedByPassword\n+     */\n+    public static function loadFromAsciiSafeString($saved_key_string)\n+    {\n+        $encrypted_key = Encoding::loadBytesFromChecksummedAsciiSafeString(\n+            self::PASSWORD_KEY_CURRENT_VERSION,\n+            $saved_key_string\n+        );\n+        return new KeyProtectedByPassword($encrypted_key);\n+    }\n+\n+    /**\n+     * Encodes the KeyProtectedByPassword into a string of printable ASCII\n+     * characters.\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     *\n+     * @return string\n+     */\n+    public function saveToAsciiSafeString()\n+    {\n+        return Encoding::saveBytesToChecksummedAsciiSafeString(\n+            self::PASSWORD_KEY_CURRENT_VERSION,\n+            $this->encrypted_key\n+        );\n+    }\n+\n+    /**\n+     * Decrypts the protected key, returning an unprotected Key object that can\n+     * be used for encryption and decryption.\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     * @throws Ex\\WrongKeyOrModifiedCiphertextException\n+     *\n+     * @return Key\n+     */\n+    public function unlockKey($password)\n+    {\n+        try {\n+            $inner_key_encoded = Crypto::decryptWithPassword(\n+                $this->encrypted_key,\n+                \\hash(Core::HASH_FUNCTION_NAME, $password, true),\n+                true\n+            );\n+            return Key::loadFromAsciiSafeString($inner_key_encoded);\n+        } catch (Ex\\BadFormatException $ex) {\n+            /* This should never happen unless an attacker replaced the\n+             * encrypted key ciphertext with some other ciphertext that was\n+             * encrypted with the same password. We transform the exception type\n+             * here in order to make the API simpler, avoiding the need to\n+             * document that this method might throw an Ex\\BadFormatException. */\n+            throw new Ex\\WrongKeyOrModifiedCiphertextException(\n+                \"The decrypted key was found to be in an invalid format. \" .\n+                \"This very likely indicates it was modified by an attacker.\"\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Constructor for KeyProtectedByPassword.\n+     *\n+     * @param string $encrypted_key\n+     */\n+    private function __construct($encrypted_key)\n+    {\n+        $this->encrypted_key = $encrypted_key;\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/Crypto/RuntimeTests.php",
          "status": "added",
          "additions": 242,
          "deletions": 0,
          "patch": "@@ -0,0 +1,242 @@\n+<?php\n+\n+namespace Defuse\\Crypto;\n+\n+use Defuse\\Crypto\\Exception as Ex;\n+\n+/*\n+ * We're using static class inheritance to get access to protected methods\n+ * inside Crypto. To make it easy to know where the method we're calling can be\n+ * found, within this file, prefix calls with `Crypto::` or `RuntimeTests::`,\n+ * and don't use `self::`.\n+ */\n+\n+class RuntimeTests extends Crypto\n+{\n+    /**\n+     * Runs the runtime tests.\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     */\n+    public static function runtimeTest()\n+    {\n+        // 0: Tests haven't been run yet.\n+        // 1: Tests have passed.\n+        // 2: Tests are running right now.\n+        // 3: Tests have failed.\n+        static $test_state = 0;\n+\n+        if ($test_state === 1 || $test_state === 2) {\n+            return;\n+        }\n+\n+        if ($test_state === 3) {\n+            /* If an intermittent problem caused a test to fail previously, we\n+             * want that to be indicated to the user with every call to this\n+             * library. This way, if the user first does something they really\n+             * don't care about, and just ignores all exceptions, they won't get\n+             * screwed when they then start to use the library for something\n+             * they do care about. */\n+            throw new Ex\\EnvironmentIsBrokenException('Tests failed previously.');\n+        }\n+\n+        try {\n+            $test_state = 2;\n+\n+            Core::ensureFunctionExists('openssl_get_cipher_methods');\n+            if (\\in_array(Core::CIPHER_METHOD, \\openssl_get_cipher_methods()) === false) {\n+                throw new Ex\\EnvironmentIsBrokenException(\n+                    'Cipher method not supported. This is normally caused by an outdated ' .\n+                    'version of OpenSSL (and/or OpenSSL compiled for FIPS compliance). ' .\n+                    'Please upgrade to a newer version of OpenSSL that supports ' .\n+                    Core::CIPHER_METHOD . ' to use this library.'\n+                );\n+            }\n+\n+            RuntimeTests::AESTestVector();\n+            RuntimeTests::HMACTestVector();\n+            RuntimeTests::HKDFTestVector();\n+\n+            RuntimeTests::testEncryptDecrypt();\n+            if (Core::ourStrlen(Key::createNewRandomKey()->getRawBytes()) != Core::KEY_BYTE_SIZE) {\n+                throw new Ex\\EnvironmentIsBrokenException();\n+            }\n+\n+            if (Core::ENCRYPTION_INFO_STRING == Core::AUTHENTICATION_INFO_STRING) {\n+                throw new Ex\\EnvironmentIsBrokenException();\n+            }\n+        } catch (Ex\\EnvironmentIsBrokenException $ex) {\n+            // Do this, otherwise it will stay in the \"tests are running\" state.\n+            $test_state = 3;\n+            throw $ex;\n+        }\n+\n+        // Change this to '0' make the tests always re-run (for benchmarking).\n+        $test_state = 1;\n+    }\n+\n+    /**\n+     * High-level tests of Crypto operations.\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     */\n+    private static function testEncryptDecrypt()\n+    {\n+        $key  = Key::createNewRandomKey();\n+        $data = \"EnCrYpT EvErYThInG\\x00\\x00\";\n+\n+        // Make sure encrypting then decrypting doesn't change the message.\n+        $ciphertext = Crypto::encrypt($data, $key, true);\n+        try {\n+            $decrypted = Crypto::decrypt($ciphertext, $key, true);\n+        } catch (Ex\\WrongKeyOrModifiedCiphertextException $ex) {\n+            // It's important to catch this and change it into a\n+            // Ex\\EnvironmentIsBrokenException, otherwise a test failure could trick\n+            // the user into thinking it's just an invalid ciphertext!\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+        if ($decrypted !== $data) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+\n+        // Modifying the ciphertext: Appending a string.\n+        try {\n+            Crypto::decrypt($ciphertext . 'a', $key, true);\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        } catch (Ex\\WrongKeyOrModifiedCiphertextException $e) { /* expected */\n+        }\n+\n+        // Modifying the ciphertext: Changing an HMAC byte.\n+        $indices_to_change = [\n+            0, // The header.\n+            Core::HEADER_VERSION_SIZE + 1, // the salt\n+            Core::HEADER_VERSION_SIZE + Core::SALT_BYTE_SIZE + 1, // the IV\n+            Core::HEADER_VERSION_SIZE + Core::SALT_BYTE_SIZE + Core::BLOCK_BYTE_SIZE + 1, // the ciphertext\n+        ];\n+\n+        foreach ($indices_to_change as $index) {\n+            try {\n+                $ciphertext[$index] = \\chr((\\ord($ciphertext[$index]) + 1) % 256);\n+                Crypto::decrypt($ciphertext, $key, true);\n+                throw new Ex\\EnvironmentIsBrokenException();\n+            } catch (Ex\\WrongKeyOrModifiedCiphertextException $e) { /* expected */\n+            }\n+        }\n+\n+        // Decrypting with the wrong key.\n+        $key        = Key::createNewRandomKey();\n+        $data       = 'abcdef';\n+        $ciphertext = Crypto::encrypt($data, $key, true);\n+        $wrong_key  = Key::createNewRandomKey();\n+        try {\n+            Crypto::decrypt($ciphertext, $wrong_key, true);\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        } catch (Ex\\WrongKeyOrModifiedCiphertextException $e) { /* expected */\n+        }\n+\n+        // Ciphertext too small.\n+        $key        = Key::createNewRandomKey();\n+        $ciphertext = \\str_repeat('A', Core::MINIMUM_CIPHERTEXT_SIZE - 1);\n+        try {\n+            Crypto::decrypt($ciphertext, $key, true);\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        } catch (Ex\\WrongKeyOrModifiedCiphertextException $e) { /* expected */\n+        }\n+    }\n+\n+    /**\n+     * Test HKDF against test vectors.\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     */\n+    private static function HKDFTestVector()\n+    {\n+        // HKDF test vectors from RFC 5869\n+\n+        // Test Case 1\n+        $ikm    = \\str_repeat(\"\\x0b\", 22);\n+        $salt   = Encoding::hexToBin('000102030405060708090a0b0c');\n+        $info   = Encoding::hexToBin('f0f1f2f3f4f5f6f7f8f9');\n+        $length = 42;\n+        $okm    = Encoding::hexToBin(\n+            '3cb25f25faacd57a90434f64d0362f2a' .\n+            '2d2d0a90cf1a5a4c5db02d56ecc4c5bf' .\n+            '34007208d5b887185865'\n+        );\n+        $computed_okm = Core::HKDF('sha256', $ikm, $length, $info, $salt);\n+        if ($computed_okm !== $okm) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+\n+        // Test Case 7\n+        $ikm    = \\str_repeat(\"\\x0c\", 22);\n+        $length = 42;\n+        $okm    = Encoding::hexToBin(\n+            '2c91117204d745f3500d636a62f64f0a' .\n+            'b3bae548aa53d423b0d1f27ebba6f5e5' .\n+            '673a081d70cce7acfc48'\n+        );\n+        $computed_okm = Core::HKDF('sha1', $ikm, $length, '', null);\n+        if ($computed_okm !== $okm) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+    }\n+\n+    /**\n+     * Test HMAC against test vectors.\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     */\n+    private static function HMACTestVector()\n+    {\n+        // HMAC test vector From RFC 4231 (Test Case 1)\n+        $key     = \\str_repeat(\"\\x0b\", 20);\n+        $data    = 'Hi There';\n+        $correct = 'b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7';\n+        if (\\hash_hmac(Core::HASH_FUNCTION_NAME, $data, $key) !== $correct) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+    }\n+\n+    /**\n+     * Test AES against test vectors.\n+     *\n+     * @throws Ex\\EnvironmentIsBrokenException\n+     */\n+    private static function AESTestVector()\n+    {\n+        // AES CTR mode test vector from NIST SP 800-38A\n+        $key = Encoding::hexToBin(\n+            '603deb1015ca71be2b73aef0857d7781' .\n+            '1f352c073b6108d72d9810a30914dff4'\n+        );\n+        $iv        = Encoding::hexToBin('f0f1f2f3f4f5f6f7f8f9fafbfcfdfeff');\n+        $plaintext = Encoding::hexToBin(\n+            '6bc1bee22e409f96e93d7e117393172a' .\n+            'ae2d8a571e03ac9c9eb76fac45af8e51' .\n+            '30c81c46a35ce411e5fbc1191a0a52ef' .\n+            'f69f2445df4f9b17ad2b417be66c3710'\n+        );\n+        $ciphertext = Encoding::hexToBin(\n+            '601ec313775789a5b7a7f504bbf3d228' .\n+            'f443e3ca4d62b59aca84e990cacaf5c5' .\n+            '2b0930daa23de94ce87017ba2d84988d' .\n+            'dfc9c58db67aada613c2dd08457941a6'\n+        );\n+\n+        $computed_ciphertext = Crypto::plainEncrypt($plaintext, $key, $iv);\n+        if ($computed_ciphertext !== $ciphertext) {\n+            echo \\str_repeat(\"\\n\", 30);\n+            echo \\bin2hex($computed_ciphertext);\n+            echo \"\\n---\\n\";\n+            echo \\bin2hex($ciphertext);\n+            echo \\str_repeat(\"\\n\", 30);\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+\n+        $computed_plaintext = Crypto::plainDecrypt($ciphertext, $key, $iv, Core::CIPHER_METHOD);\n+        if ($computed_plaintext !== $plaintext) {\n+            throw new Ex\\EnvironmentIsBrokenException();\n+        }\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/Defuse/LICENSE",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+The MIT License (MIT)\n+\n+Copyright (c) 2016 Taylor Hornby <https://defuse.ca> and Paragon Initiative\n+Enterprises <https://paragonie.com>.\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy of\n+this software and associated documentation files (the \"Software\"), to deal in\n+the Software without restriction, including without limitation the rights to\n+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n+the Software, and to permit persons to whom the Software is furnished to do so,\n+subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "filename": "inc/Exts/Defuse/README.md",
          "status": "added",
          "additions": 87,
          "deletions": 0,
          "patch": "@@ -0,0 +1,87 @@\n+php-encryption\n+===============\n+\n+[![Build Status](https://travis-ci.org/defuse/php-encryption.svg?branch=master)](https://travis-ci.org/defuse/php-encryption)\n+\n+This is a library for encrypting data with a key or password in PHP. **It\n+requires PHP 5.4 or newer.** The current version is v2.0.0, which is expected to\n+remain stable and supported by its authors with security and bugfixes until at\n+least January 1st, 2019.\n+\n+The library is a joint effort between [Taylor Hornby](https://defuse.ca/) and\n+[Scott Arciszewski](https://paragonie.com/blog/author/scott-arcizewski) as well\n+as numerous open-source contributors.\n+\n+What separates this library from other PHP encryption libraries is, firstly,\n+that it is secure. The authors used to encounter insecure PHP encryption code on\n+a daily basis, so they created this library to bring more security to the\n+ecosystem. Secondly, this library is \"difficult to misuse.\" Like\n+[libsodium](https://github.com/jedisct1/libsodium), its API is designed to be\n+easy to use in a secure way and hard to use in an insecure way.\n+\n+Dependencies\n+------------\n+\n+This library requres no special dependencies except for PHP 5.4 or newer with\n+the OpenSSL extensions enabled (this is the default). It uses\n+[random\\_compat](https://github.com/paragonie/random_compat), which is bundled\n+in with this library so that your users will not need to follow any special\n+installation steps.\n+\n+Getting Started\n+----------------\n+\n+Start with the [**Tutorial**](docs/Tutorial.md). You can find instructions for\n+obtaining this library's code securely in the [Installing and\n+Verifying](docs/InstallingAndVerifying.md) documentation.\n+\n+After you've read the tutorial and got the code, refer to the formal\n+documentation for each of the classes this library provides:\n+\n+- [Crypto](docs/classes/Crypto.md)\n+- [File](docs/classes/File.md)\n+- [Key](docs/classes/Key.md)\n+- [KeyProtectedByPassword](docs/classes/KeyProtectedByPassword.md)\n+\n+If you encounter difficulties, see the [FAQ](docs/FAQ.md) answers. The fixes to\n+the most commonly-reported problems are explained there.\n+\n+If you're a cryptographer and want to understand the nitty-gritty details of how\n+this library works, look at the [Cryptography Details](docs/CryptoDetails.md)\n+documentation.\n+\n+If you're interested in contributing to this library, see the [Internal\n+Developer Documentation](docs/InternalDeveloperDocs.md).\n+\n+Examples\n+---------\n+\n+If the documentation is not enough for you to understand how to use this\n+library, then you can look at an example project that uses this library:\n+\n+- [encutil](https://github.com/defuse/encutil)\n+\n+Security Audit Status\n+---------------------\n+\n+This code has not been subjected to a formal, paid, security audit. However, it\n+has received lots of review from members of the PHP security community, and the\n+authors are experienced with cryptography. In all likelihood, you are safer\n+using this library than almost any other encryption library for PHP.\n+\n+If you use this library as a part of your business and would like to help fund\n+a formal audit, please [contact Taylor Hornby](https://defuse.ca/contact.htm).\n+\n+Public Keys\n+------------\n+\n+The GnuPG public key used to sign releases is available in\n+[dist/signingkey.asc](https://github.com/defuse/php-encryption/raw/master/dist/signingkey.asc). Its fingerprint is:\n+\n+```\n+2FA6 1D8D 99B9 2658 6BAC  3D53 385E E055 A129 1538\n+```\n+\n+You can verify it against the Taylor Hornby's [contact\n+page](https://defuse.ca/contact.htm) and\n+[twitter](https://twitter.com/DefuseSec/status/723741424253059074)."
        },
        {
          "filename": "inc/Exts/phpseclib/Crypt/Base.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -540,7 +540,7 @@ function setKey($key)\n      *\n      *         Where $hash (default = sha1) currently supports the following hashes: see: Crypt/Hash.php\n      *\n-     * @see Crypt/Hash.php\n+     * @see OldCrypt/Hash.php\n      * @param string $password\n      * @param string $method\n      * @throws \\LengthException if pbkdf1 is being used and the derived key length exceeds the hash length"
        },
        {
          "filename": "inc/Exts/random_compat/lib/byte_safe_strings.php",
          "status": "added",
          "additions": 181,
          "deletions": 0,
          "patch": "@@ -0,0 +1,181 @@\n+<?php\n+/**\n+ * Random_* Compatibility Library\n+ * for using the new PHP 7 random_* API in PHP 5 projects\n+ *\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+if (!is_callable('RandomCompat_strlen')) {\n+    if (\n+        defined('MB_OVERLOAD_STRING') &&\n+        ini_get('mbstring.func_overload') & MB_OVERLOAD_STRING\n+    ) {\n+        /**\n+         * strlen() implementation that isn't brittle to mbstring.func_overload\n+         *\n+         * This version uses mb_strlen() in '8bit' mode to treat strings as raw\n+         * binary rather than UTF-8, ISO-8859-1, etc\n+         *\n+         * @param string $binary_string\n+         *\n+         * @throws TypeError\n+         *\n+         * @return int\n+         */\n+        function RandomCompat_strlen($binary_string)\n+        {\n+            if (!is_string($binary_string)) {\n+                throw new TypeError(\n+                    'RandomCompat_strlen() expects a string'\n+                );\n+            }\n+\n+            return mb_strlen($binary_string, '8bit');\n+        }\n+\n+    } else {\n+        /**\n+         * strlen() implementation that isn't brittle to mbstring.func_overload\n+         *\n+         * This version just used the default strlen()\n+         *\n+         * @param string $binary_string\n+         *\n+         * @throws TypeError\n+         *\n+         * @return int\n+         */\n+        function RandomCompat_strlen($binary_string)\n+        {\n+            if (!is_string($binary_string)) {\n+                throw new TypeError(\n+                    'RandomCompat_strlen() expects a string'\n+                );\n+            }\n+            return strlen($binary_string);\n+        }\n+    }\n+}\n+\n+if (!is_callable('RandomCompat_substr')) {\n+\n+    if (\n+        defined('MB_OVERLOAD_STRING')\n+        &&\n+        ini_get('mbstring.func_overload') & MB_OVERLOAD_STRING\n+    ) {\n+        /**\n+         * substr() implementation that isn't brittle to mbstring.func_overload\n+         *\n+         * This version uses mb_substr() in '8bit' mode to treat strings as raw\n+         * binary rather than UTF-8, ISO-8859-1, etc\n+         *\n+         * @param string $binary_string\n+         * @param int $start\n+         * @param int $length (optional)\n+         *\n+         * @throws TypeError\n+         *\n+         * @return string\n+         */\n+        function RandomCompat_substr($binary_string, $start, $length = null)\n+        {\n+            if (!is_string($binary_string)) {\n+                throw new TypeError(\n+                    'RandomCompat_substr(): First argument should be a string'\n+                );\n+            }\n+\n+            if (!is_int($start)) {\n+                throw new TypeError(\n+                    'RandomCompat_substr(): Second argument should be an integer'\n+                );\n+            }\n+\n+            if ($length === null) {\n+                /**\n+                 * mb_substr($str, 0, NULL, '8bit') returns an empty string on\n+                 * PHP 5.3, so we have to find the length ourselves.\n+                 */\n+                $length = RandomCompat_strlen($length) - $start;\n+            } elseif (!is_int($length)) {\n+                throw new TypeError(\n+                    'RandomCompat_substr(): Third argument should be an integer, or omitted'\n+                );\n+            }\n+\n+            // Consistency with PHP's behavior\n+            if ($start === RandomCompat_strlen($binary_string) && $length === 0) {\n+                return '';\n+            }\n+            if ($start > RandomCompat_strlen($binary_string)) {\n+                return false;\n+            }\n+\n+            return mb_substr($binary_string, $start, $length, '8bit');\n+        }\n+\n+    } else {\n+\n+        /**\n+         * substr() implementation that isn't brittle to mbstring.func_overload\n+         *\n+         * This version just uses the default substr()\n+         *\n+         * @param string $binary_string\n+         * @param int $start\n+         * @param int $length (optional)\n+         *\n+         * @throws TypeError\n+         *\n+         * @return string\n+         */\n+        function RandomCompat_substr($binary_string, $start, $length = null)\n+        {\n+            if (!is_string($binary_string)) {\n+                throw new TypeError(\n+                    'RandomCompat_substr(): First argument should be a string'\n+                );\n+            }\n+\n+            if (!is_int($start)) {\n+                throw new TypeError(\n+                    'RandomCompat_substr(): Second argument should be an integer'\n+                );\n+            }\n+\n+            if ($length !== null) {\n+                if (!is_int($length)) {\n+                    throw new TypeError(\n+                        'RandomCompat_substr(): Third argument should be an integer, or omitted'\n+                    );\n+                }\n+\n+                return substr($binary_string, $start, $length);\n+            }\n+\n+            return substr($binary_string, $start);\n+        }\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/random_compat/lib/cast_to_int.php",
          "status": "added",
          "additions": 71,
          "deletions": 0,
          "patch": "@@ -0,0 +1,71 @@\n+<?php\n+/**\n+ * Random_* Compatibility Library\n+ * for using the new PHP 7 random_* API in PHP 5 projects\n+ *\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+if (!is_callable('RandomCompat_intval')) {\n+    \n+    /**\n+     * Cast to an integer if we can, safely.\n+     * \n+     * If you pass it a float in the range (~PHP_INT_MAX, PHP_INT_MAX)\n+     * (non-inclusive), it will sanely cast it to an int. If you it's equal to\n+     * ~PHP_INT_MAX or PHP_INT_MAX, we let it fail as not an integer. Floats \n+     * lose precision, so the <= and => operators might accidentally let a float\n+     * through.\n+     * \n+     * @param int|float $number    The number we want to convert to an int\n+     * @param boolean   $fail_open Set to true to not throw an exception\n+     * \n+     * @return int (or float if $fail_open)\n+     *\n+     * @throws TypeError\n+     */\n+    function RandomCompat_intval($number, $fail_open = false)\n+    {\n+        if (is_numeric($number)) {\n+            $number += 0;\n+        }\n+\n+        if (\n+            is_float($number)\n+            &&\n+            $number > ~PHP_INT_MAX\n+            &&\n+            $number < PHP_INT_MAX\n+        ) {\n+            $number = (int) $number;\n+        }\n+\n+        if (is_int($number) || $fail_open) {\n+            return $number;\n+        }\n+\n+        throw new TypeError(\n+            'Expected an integer.'\n+        );\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/random_compat/lib/error_polyfill.php",
          "status": "added",
          "additions": 49,
          "deletions": 0,
          "patch": "@@ -0,0 +1,49 @@\n+<?php\n+/**\n+ * Random_* Compatibility Library \n+ * for using the new PHP 7 random_* API in PHP 5 projects\n+ * \n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises\n+ * \n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ * \n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ * \n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+if (!class_exists('Error', false)) {\n+    // We can't really avoid making this extend Exception in PHP 5.\n+    class Error extends Exception\n+    {\n+        \n+    }\n+}\n+\n+if (!class_exists('TypeError', false)) {\n+    if (is_subclass_of('Error', 'Exception')) {\n+        class TypeError extends Error\n+        {\n+            \n+        }\n+    } else {\n+        class TypeError extends Exception\n+        {\n+            \n+        }\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/random_compat/lib/random.php",
          "status": "added",
          "additions": 215,
          "deletions": 0,
          "patch": "@@ -0,0 +1,215 @@\n+<?php\n+/**\n+ * Random_* Compatibility Library\n+ * for using the new PHP 7 random_* API in PHP 5 projects\n+ *\n+ * @version 2.0.4\n+ * @released 2016-11-07\n+ *\n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+if (!defined('PHP_VERSION_ID')) {\n+    // This constant was introduced in PHP 5.2.7\n+    $RandomCompatversion = array_map('intval', explode('.', PHP_VERSION));\n+    define(\n+        'PHP_VERSION_ID',\n+        $RandomCompatversion[0] * 10000\n+        + $RandomCompatversion[1] * 100\n+        + $RandomCompatversion[2]\n+    );\n+    $RandomCompatversion = null;\n+}\n+\n+/**\n+ * PHP 7.0.0 and newer have these functions natively.\n+ */\n+if (PHP_VERSION_ID < 70000) {\n+    if (!defined('RANDOM_COMPAT_READ_BUFFER')) {\n+        define('RANDOM_COMPAT_READ_BUFFER', 8);\n+    }\n+\n+    $RandomCompatDIR = dirname(__FILE__);\n+\n+    require_once $RandomCompatDIR.'/byte_safe_strings.php';\n+    require_once $RandomCompatDIR.'/cast_to_int.php';\n+    require_once $RandomCompatDIR.'/error_polyfill.php';\n+\n+    if (!is_callable('random_bytes')) {\n+        /**\n+         * PHP 5.2.0 - 5.6.x way to implement random_bytes()\n+         *\n+         * We use conditional statements here to define the function in accordance\n+         * to the operating environment. It's a micro-optimization.\n+         *\n+         * In order of preference:\n+         *   1. Use libsodium if available.\n+         *   2. fread() /dev/urandom if available (never on Windows)\n+         *   3. mcrypt_create_iv($bytes, MCRYPT_DEV_URANDOM)\n+         *   4. COM('CAPICOM.Utilities.1')->GetRandom()\n+         *   5. openssl_random_pseudo_bytes() (absolute last resort)\n+         *\n+         * See RATIONALE.md for our reasoning behind this particular order\n+         */\n+        if (extension_loaded('libsodium')) {\n+            // See random_bytes_libsodium.php\n+            if (PHP_VERSION_ID >= 50300 && is_callable('\\\\Sodium\\\\randombytes_buf')) {\n+                require_once $RandomCompatDIR.'/random_bytes_libsodium.php';\n+            } elseif (method_exists('Sodium', 'randombytes_buf')) {\n+                require_once $RandomCompatDIR.'/random_bytes_libsodium_legacy.php';\n+            }\n+        }\n+\n+        /**\n+         * Reading directly from /dev/urandom:\n+         */\n+        if (DIRECTORY_SEPARATOR === '/') {\n+            // DIRECTORY_SEPARATOR === '/' on Unix-like OSes -- this is a fast\n+            // way to exclude Windows.\n+            $RandomCompatUrandom = true;\n+            $RandomCompat_basedir = ini_get('open_basedir');\n+\n+            if (!empty($RandomCompat_basedir)) {\n+                $RandomCompat_open_basedir = explode(\n+                    PATH_SEPARATOR,\n+                    strtolower($RandomCompat_basedir)\n+                );\n+                $RandomCompatUrandom = (array() !== array_intersect(\n+                    array('/dev', '/dev/', '/dev/urandom'),\n+                    $RandomCompat_open_basedir\n+                ));\n+                $RandomCompat_open_basedir = null;\n+            }\n+\n+            if (\n+                !is_callable('random_bytes')\n+                &&\n+                $RandomCompatUrandom\n+                &&\n+                @is_readable('/dev/urandom')\n+            ) {\n+                // Error suppression on is_readable() in case of an open_basedir\n+                // or safe_mode failure. All we care about is whether or not we\n+                // can read it at this point. If the PHP environment is going to\n+                // panic over trying to see if the file can be read in the first\n+                // place, that is not helpful to us here.\n+\n+                // See random_bytes_dev_urandom.php\n+                require_once $RandomCompatDIR.'/random_bytes_dev_urandom.php';\n+            }\n+            // Unset variables after use\n+            $RandomCompat_basedir = null;\n+        } else {\n+            $RandomCompatUrandom = false;\n+        }\n+\n+        /**\n+         * mcrypt_create_iv()\n+         *\n+         * We only want to use mcypt_create_iv() if:\n+         *\n+         * - random_bytes() hasn't already been defined\n+         * - PHP >= 5.3.7\n+         * - the mcrypt extensions is loaded\n+         * - One of these two conditions is true:\n+         *   - We're on Windows (DIRECTORY_SEPARATOR !== '/')\n+         *   - We're not on Windows and /dev/urandom is readabale\n+         *     (i.e. we're not in a chroot jail)\n+         * - Special case:\n+         *   - If we're not on Windows, but the PHP version is between\n+         *     5.6.10 and 5.6.12, we don't want to use mcrypt. It will\n+         *     hang indefinitely. This is bad.\n+         */\n+        if (\n+            !is_callable('random_bytes')\n+            &&\n+            PHP_VERSION_ID >= 50307\n+            &&\n+            extension_loaded('mcrypt')\n+        ) {\n+            // Prevent this code from hanging indefinitely on non-Windows;\n+            // see https://bugs.php.net/bug.php?id=69833\n+            if (\n+                DIRECTORY_SEPARATOR !== '/' || \n+                (PHP_VERSION_ID <= 50609 || PHP_VERSION_ID >= 50613)\n+            ) {\n+                // See random_bytes_mcrypt.php\n+                require_once $RandomCompatDIR.'/random_bytes_mcrypt.php';\n+            }\n+        }\n+        $RandomCompatUrandom = null;\n+\n+        /**\n+         * This is a Windows-specific fallback, for when the mcrypt extension\n+         * isn't loaded.\n+         */\n+        if (\n+            !is_callable('random_bytes')\n+            &&\n+            extension_loaded('com_dotnet')\n+            &&\n+            class_exists('COM')\n+        ) {\n+            $RandomCompat_disabled_classes = preg_split(\n+                '#\\s*,\\s*#',\n+                strtolower(ini_get('disable_classes'))\n+            );\n+\n+            if (!in_array('com', $RandomCompat_disabled_classes)) {\n+                try {\n+                    $RandomCompatCOMtest = new COM('CAPICOM.Utilities.1');\n+                    if (method_exists($RandomCompatCOMtest, 'GetRandom')) {\n+                        // See random_bytes_com_dotnet.php\n+                        require_once $RandomCompatDIR.'/random_bytes_com_dotnet.php';\n+                    }\n+                } catch (com_exception $e) {\n+                    // Don't try to use it.\n+                }\n+            }\n+            $RandomCompat_disabled_classes = null;\n+            $RandomCompatCOMtest = null;\n+        }\n+\n+        /**\n+         * throw new Exception\n+         */\n+        if (!is_callable('random_bytes')) {\n+            /**\n+             * We don't have any more options, so let's throw an exception right now\n+             * and hope the developer won't let it fail silently.\n+             */\n+            function random_bytes($length)\n+            {\n+                throw new Exception(\n+                    'There is no suitable CSPRNG installed on your system'\n+                );\n+            }\n+        }\n+    }\n+\n+    if (!is_callable('random_int')) {\n+        require_once $RandomCompatDIR.'/random_int.php';\n+    }\n+\n+    $RandomCompatDIR = null;\n+}"
        },
        {
          "filename": "inc/Exts/random_compat/lib/random_bytes_com_dotnet.php",
          "status": "added",
          "additions": 83,
          "deletions": 0,
          "patch": "@@ -0,0 +1,83 @@\n+<?php\n+/**\n+ * Random_* Compatibility Library \n+ * for using the new PHP 7 random_* API in PHP 5 projects\n+ * \n+ * The MIT License (MIT)\n+ * \n+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises\n+ * \n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ * \n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ * \n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+if (!is_callable('random_bytes')) {\n+    /**\n+     * Windows with PHP < 5.3.0 will not have the function\n+     * openssl_random_pseudo_bytes() available, so let's use\n+     * CAPICOM to work around this deficiency.\n+     *\n+     * @param int $bytes\n+     *\n+     * @throws Exception\n+     *\n+     * @return string\n+     */\n+    function random_bytes($bytes)\n+    {\n+        try {\n+            $bytes = RandomCompat_intval($bytes);\n+        } catch (TypeError $ex) {\n+            throw new TypeError(\n+                'random_bytes(): $bytes must be an integer'\n+            );\n+        }\n+\n+        if ($bytes < 1) {\n+            throw new Error(\n+                'Length must be greater than 0'\n+            );\n+        }\n+\n+        $buf = '';\n+        $util = new COM('CAPICOM.Utilities.1');\n+        $execCount = 0;\n+\n+        /**\n+         * Let's not let it loop forever. If we run N times and fail to\n+         * get N bytes of random data, then CAPICOM has failed us.\n+         */\n+        do {\n+            $buf .= base64_decode($util->GetRandom($bytes, 0));\n+            if (RandomCompat_strlen($buf) >= $bytes) {\n+                /**\n+                 * Return our random entropy buffer here:\n+                 */\n+                return RandomCompat_substr($buf, 0, $bytes);\n+            }\n+            ++$execCount;\n+        } while ($execCount < $bytes);\n+\n+        /**\n+         * If we reach here, PHP has failed us.\n+         */\n+        throw new Exception(\n+            'Could not gather sufficient random data'\n+        );\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/Exts/random_compat/lib/random_bytes_dev_urandom.php",
          "status": "added",
          "additions": 150,
          "deletions": 0,
          "patch": "@@ -0,0 +1,150 @@\n+<?php\n+/**\n+ * Random_* Compatibility Library \n+ * for using the new PHP 7 random_* API in PHP 5 projects\n+ * \n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises\n+ * \n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ * \n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ * \n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+if (!defined('RANDOM_COMPAT_READ_BUFFER')) {\n+    define('RANDOM_COMPAT_READ_BUFFER', 8);\n+}\n+\n+if (!is_callable('random_bytes')) {\n+    /**\n+     * Unless open_basedir is enabled, use /dev/urandom for\n+     * random numbers in accordance with best practices\n+     *\n+     * Why we use /dev/urandom and not /dev/random\n+     * @ref http://sockpuppet.org/blog/2014/02/25/safely-generate-random-numbers\n+     *\n+     * @param int $bytes\n+     *\n+     * @throws Exception\n+     *\n+     * @return string\n+     */\n+    function random_bytes($bytes)\n+    {\n+        static $fp = null;\n+        /**\n+         * This block should only be run once\n+         */\n+        if (empty($fp)) {\n+            /**\n+             * We use /dev/urandom if it is a char device.\n+             * We never fall back to /dev/random\n+             */\n+            $fp = fopen('/dev/urandom', 'rb');\n+            if (!empty($fp)) {\n+                $st = fstat($fp);\n+                if (($st['mode'] & 0170000) !== 020000) {\n+                    fclose($fp);\n+                    $fp = false;\n+                }\n+            }\n+\n+            if (!empty($fp)) {\n+                /**\n+                 * stream_set_read_buffer() does not exist in HHVM\n+                 *\n+                 * If we don't set the stream's read buffer to 0, PHP will\n+                 * internally buffer 8192 bytes, which can waste entropy\n+                 *\n+                 * stream_set_read_buffer returns 0 on success\n+                 */\n+                if (is_callable('stream_set_read_buffer')) {\n+                    stream_set_read_buffer($fp, RANDOM_COMPAT_READ_BUFFER);\n+                }\n+                if (is_callable('stream_set_chunk_size')) {\n+                    stream_set_chunk_size($fp, RANDOM_COMPAT_READ_BUFFER);\n+                }\n+            }\n+        }\n+\n+        try {\n+            $bytes = RandomCompat_intval($bytes);\n+        } catch (TypeError $ex) {\n+            throw new TypeError(\n+                'random_bytes(): $bytes must be an integer'\n+            );\n+        }\n+\n+        if ($bytes < 1) {\n+            throw new Error(\n+                'Length must be greater than 0'\n+            );\n+        }\n+\n+        /**\n+         * This if() block only runs if we managed to open a file handle\n+         *\n+         * It does not belong in an else {} block, because the above\n+         * if (empty($fp)) line is logic that should only be run once per\n+         * page load.\n+         */\n+        if (!empty($fp)) {\n+            $remaining = $bytes;\n+            $buf = '';\n+\n+            /**\n+             * We use fread() in a loop to protect against partial reads\n+             */\n+            do {\n+                $read = fread($fp, $remaining);\n+                if ($read === false) {\n+                    /**\n+                     * We cannot safely read from the file. Exit the\n+                     * do-while loop and trigger the exception condition\n+                     */\n+                    $buf = false;\n+                    break;\n+                }\n+                /**\n+                 * Decrease the number of bytes returned from remaining\n+                 */\n+                $remaining -= RandomCompat_strlen($read);\n+                $buf .= $read;\n+            } while ($remaining > 0);\n+\n+            /**\n+             * Is our result valid?\n+             */\n+            if ($buf !== false) {\n+                if (RandomCompat_strlen($buf) === $bytes) {\n+                    /**\n+                     * Return our random entropy buffer here:\n+                     */\n+                    return $buf;\n+                }\n+            }\n+        }\n+\n+        /**\n+         * If we reach here, PHP has failed us.\n+         */\n+        throw new Exception(\n+            'Error reading from source device'\n+        );\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/random_compat/lib/random_bytes_libsodium.php",
          "status": "added",
          "additions": 88,
          "deletions": 0,
          "patch": "@@ -0,0 +1,88 @@\n+<?php\n+/**\n+ * Random_* Compatibility Library \n+ * for using the new PHP 7 random_* API in PHP 5 projects\n+ * \n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises\n+ * \n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ * \n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ * \n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+if (!is_callable('random_bytes')) {\n+    /**\n+     * If the libsodium PHP extension is loaded, we'll use it above any other\n+     * solution.\n+     *\n+     * libsodium-php project:\n+     * @ref https://github.com/jedisct1/libsodium-php\n+     *\n+     * @param int $bytes\n+     *\n+     * @throws Exception\n+     *\n+     * @return string\n+     */\n+    function random_bytes($bytes)\n+    {\n+        try {\n+            $bytes = RandomCompat_intval($bytes);\n+        } catch (TypeError $ex) {\n+            throw new TypeError(\n+                'random_bytes(): $bytes must be an integer'\n+            );\n+        }\n+\n+        if ($bytes < 1) {\n+            throw new Error(\n+                'Length must be greater than 0'\n+            );\n+        }\n+\n+        /**\n+         * \\Sodium\\randombytes_buf() doesn't allow more than 2147483647 bytes to be\n+         * generated in one invocation.\n+         */\n+        if ($bytes > 2147483647) {\n+            $buf = '';\n+            for ($i = 0; $i < $bytes; $i += 1073741824) {\n+                $n = ($bytes - $i) > 1073741824\n+                    ? 1073741824\n+                    : $bytes - $i;\n+                $buf .= \\Sodium\\randombytes_buf($n);\n+            }\n+        } else {\n+            $buf = \\Sodium\\randombytes_buf($bytes);\n+        }\n+\n+        if ($buf !== false) {\n+            if (RandomCompat_strlen($buf) === $bytes) {\n+                return $buf;\n+            }\n+        }\n+\n+        /**\n+         * If we reach here, PHP has failed us.\n+         */\n+        throw new Exception(\n+            'Could not gather sufficient random data'\n+        );\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/random_compat/lib/random_bytes_libsodium_legacy.php",
          "status": "added",
          "additions": 88,
          "deletions": 0,
          "patch": "@@ -0,0 +1,88 @@\n+<?php\n+/**\n+ * Random_* Compatibility Library \n+ * for using the new PHP 7 random_* API in PHP 5 projects\n+ * \n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises\n+ * \n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ * \n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ * \n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+if (!is_callable('random_bytes')) {\n+    /**\n+     * If the libsodium PHP extension is loaded, we'll use it above any other\n+     * solution.\n+     *\n+     * libsodium-php project:\n+     * @ref https://github.com/jedisct1/libsodium-php\n+     *\n+     * @param int $bytes\n+     *\n+     * @throws Exception\n+     *\n+     * @return string\n+     */\n+    function random_bytes($bytes)\n+    {\n+        try {\n+            $bytes = RandomCompat_intval($bytes);\n+        } catch (TypeError $ex) {\n+            throw new TypeError(\n+                'random_bytes(): $bytes must be an integer'\n+            );\n+        }\n+\n+        if ($bytes < 1) {\n+            throw new Error(\n+                'Length must be greater than 0'\n+            );\n+        }\n+\n+        /**\n+         * \\Sodium\\randombytes_buf() doesn't allow more than 2147483647 bytes to be\n+         * generated in one invocation.\n+         */\n+        if ($bytes > 2147483647) {\n+            $buf = '';\n+            for ($i = 0; $i < $bytes; $i += 1073741824) {\n+                $n = ($bytes - $i) > 1073741824\n+                    ? 1073741824\n+                    : $bytes - $i;\n+                $buf .= Sodium::randombytes_buf($n);\n+            }\n+        } else {\n+            $buf = Sodium::randombytes_buf($bytes);\n+        }\n+\n+        if ($buf !== false) {\n+            if (RandomCompat_strlen($buf) === $bytes) {\n+                return $buf;\n+            }\n+        }\n+\n+        /**\n+         * If we reach here, PHP has failed us.\n+         */\n+        throw new Exception(\n+            'Could not gather sufficient random data'\n+        );\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/random_compat/lib/random_bytes_mcrypt.php",
          "status": "added",
          "additions": 77,
          "deletions": 0,
          "patch": "@@ -0,0 +1,77 @@\n+<?php\n+/**\n+ * Random_* Compatibility Library \n+ * for using the new PHP 7 random_* API in PHP 5 projects\n+ * \n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises\n+ * \n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ * \n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ * \n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+if (!is_callable('random_bytes')) {\n+    /**\n+     * Powered by ext/mcrypt (and thankfully NOT libmcrypt)\n+     *\n+     * @ref https://bugs.php.net/bug.php?id=55169\n+     * @ref https://github.com/php/php-src/blob/c568ffe5171d942161fc8dda066bce844bdef676/ext/mcrypt/mcrypt.c#L1321-L1386\n+     *\n+     * @param int $bytes\n+     *\n+     * @throws Exception\n+     *\n+     * @return string\n+     */\n+    function random_bytes($bytes)\n+    {\n+        try {\n+            $bytes = RandomCompat_intval($bytes);\n+        } catch (TypeError $ex) {\n+            throw new TypeError(\n+                'random_bytes(): $bytes must be an integer'\n+            );\n+        }\n+\n+        if ($bytes < 1) {\n+            throw new Error(\n+                'Length must be greater than 0'\n+            );\n+        }\n+\n+        $buf = @mcrypt_create_iv($bytes, MCRYPT_DEV_URANDOM);\n+        if (\n+            $buf !== false\n+            &&\n+            RandomCompat_strlen($buf) === $bytes\n+        ) {\n+            /**\n+             * Return our random entropy buffer here:\n+             */\n+            return $buf;\n+        }\n+\n+        /**\n+         * If we reach here, PHP has failed us.\n+         */\n+        throw new Exception(\n+            'Could not gather sufficient random data'\n+        );\n+    }\n+}"
        },
        {
          "filename": "inc/Exts/random_compat/lib/random_int.php",
          "status": "added",
          "additions": 191,
          "deletions": 0,
          "patch": "@@ -0,0 +1,191 @@\n+<?php\n+/**\n+ * Random_* Compatibility Library \n+ * for using the new PHP 7 random_* API in PHP 5 projects\n+ * \n+ * The MIT License (MIT)\n+ *\n+ * Copyright (c) 2015 - 2016 Paragon Initiative Enterprises\n+ * \n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ * \n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ * \n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+/**\n+ * Fetch a random integer between $min and $max inclusive\n+ * \n+ * @param int $min\n+ * @param int $max\n+ * \n+ * @throws Exception\n+ * \n+ * @return int\n+ */\n+function random_int($min, $max)\n+{\n+    /**\n+     * Type and input logic checks\n+     * \n+     * If you pass it a float in the range (~PHP_INT_MAX, PHP_INT_MAX)\n+     * (non-inclusive), it will sanely cast it to an int. If you it's equal to\n+     * ~PHP_INT_MAX or PHP_INT_MAX, we let it fail as not an integer. Floats \n+     * lose precision, so the <= and => operators might accidentally let a float\n+     * through.\n+     */\n+    \n+    try {\n+        $min = RandomCompat_intval($min);\n+    } catch (TypeError $ex) {\n+        throw new TypeError(\n+            'random_int(): $min must be an integer'\n+        );\n+    }\n+\n+    try {\n+        $max = RandomCompat_intval($max);\n+    } catch (TypeError $ex) {\n+        throw new TypeError(\n+            'random_int(): $max must be an integer'\n+        );\n+    }\n+    \n+    /**\n+     * Now that we've verified our weak typing system has given us an integer,\n+     * let's validate the logic then we can move forward with generating random\n+     * integers along a given range.\n+     */\n+    if ($min > $max) {\n+        throw new Error(\n+            'Minimum value must be less than or equal to the maximum value'\n+        );\n+    }\n+\n+    if ($max === $min) {\n+        return $min;\n+    }\n+\n+    /**\n+     * Initialize variables to 0\n+     * \n+     * We want to store:\n+     * $bytes => the number of random bytes we need\n+     * $mask => an integer bitmask (for use with the &) operator\n+     *          so we can minimize the number of discards\n+     */\n+    $attempts = $bits = $bytes = $mask = $valueShift = 0;\n+\n+    /**\n+     * At this point, $range is a positive number greater than 0. It might\n+     * overflow, however, if $max - $min > PHP_INT_MAX. PHP will cast it to\n+     * a float and we will lose some precision.\n+     */\n+    $range = $max - $min;\n+\n+    /**\n+     * Test for integer overflow:\n+     */\n+    if (!is_int($range)) {\n+\n+        /**\n+         * Still safely calculate wider ranges.\n+         * Provided by @CodesInChaos, @oittaa\n+         * \n+         * @ref https://gist.github.com/CodesInChaos/03f9ea0b58e8b2b8d435\n+         * \n+         * We use ~0 as a mask in this case because it generates all 1s\n+         * \n+         * @ref https://eval.in/400356 (32-bit)\n+         * @ref http://3v4l.org/XX9r5  (64-bit)\n+         */\n+        $bytes = PHP_INT_SIZE;\n+        $mask = ~0;\n+\n+    } else {\n+\n+        /**\n+         * $bits is effectively ceil(log($range, 2)) without dealing with \n+         * type juggling\n+         */\n+        while ($range > 0) {\n+            if ($bits % 8 === 0) {\n+               ++$bytes;\n+            }\n+            ++$bits;\n+            $range >>= 1;\n+            $mask = $mask << 1 | 1;\n+        }\n+        $valueShift = $min;\n+    }\n+\n+    /**\n+     * Now that we have our parameters set up, let's begin generating\n+     * random integers until one falls between $min and $max\n+     */\n+    do {\n+        /**\n+         * The rejection probability is at most 0.5, so this corresponds\n+         * to a failure probability of 2^-128 for a working RNG\n+         */\n+        if ($attempts > 128) {\n+            throw new Exception(\n+                'random_int: RNG is broken - too many rejections'\n+            );\n+        }\n+\n+        /**\n+         * Let's grab the necessary number of random bytes\n+         */\n+        $randomByteString = random_bytes($bytes);\n+        if ($randomByteString === false) {\n+            throw new Exception(\n+                'Random number generator failure'\n+            );\n+        }\n+\n+        /**\n+         * Let's turn $randomByteString into an integer\n+         * \n+         * This uses bitwise operators (<< and |) to build an integer\n+         * out of the values extracted from ord()\n+         * \n+         * Example: [9F] | [6D] | [32] | [0C] =>\n+         *   159 + 27904 + 3276800 + 201326592 =>\n+         *   204631455\n+         */\n+        $val = 0;\n+        for ($i = 0; $i < $bytes; ++$i) {\n+            $val |= ord($randomByteString[$i]) << ($i * 8);\n+        }\n+\n+        /**\n+         * Apply mask\n+         */\n+        $val &= $mask;\n+        $val += $valueShift;\n+\n+        ++$attempts;\n+        /**\n+         * If $val overflows to a floating point number,\n+         * ... or is larger than $max,\n+         * ... or smaller than $min,\n+         * then try again.\n+         */\n+    } while (!is_int($val) || $val > $max || $val < $min);\n+\n+    return (int) $val;\n+}"
        },
        {
          "filename": "inc/Plugins/Authenticator/PreferencesController.class.php",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -26,10 +26,11 @@\n \n use InvalidArgumentException;\n use SP\\Controller\\TabControllerBase;\n-use SP\\Core\\Crypt;\n+use SP\\Core\\OldCrypt;\n use SP\\Core\\Plugin\\PluginBase;\n use SP\\Core\\Plugin\\PluginInterface;\n use SP\\Util\\ArrayUtil;\n+use SP\\Util\\Util;\n \n /**\n  * Class Controller\n@@ -79,7 +80,7 @@ public function getSecurityTab()\n             $IV = null;\n \n             if (!$AuthenticatorData->isTwofaEnabled()) {\n-                $IV = Crypt::getIV();\n+                $IV = Util::generateRandomBytes();\n                 $AuthenticatorData->setIV($IV);\n \n                 Session::setUserData($AuthenticatorData);"
        },
        {
          "filename": "inc/SP/Account/Account.class.php",
          "status": "modified",
          "additions": 77,
          "deletions": 120,
          "patch": "@@ -24,19 +24,20 @@\n \n namespace SP\\Account;\n \n-use SP\\Core\\Crypt;\n+use Defuse\\Crypto\\Exception\\CryptoException;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\Crypt\\Session as CryptSession;\n+use SP\\Core\\Exceptions\\QueryException;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\Core\\Session;\n use SP\\DataModel\\AccountData;\n use SP\\DataModel\\AccountExtData;\n use SP\\DataModel\\GroupAccountsData;\n-use SP\\Log\\Email;\n use SP\\Log\\Log;\n use SP\\Mgmt\\Groups\\GroupAccounts;\n use SP\\Mgmt\\Groups\\GroupAccountsUtil;\n use SP\\Storage\\DB;\n use SP\\Storage\\QueryData;\n-use SP\\Util\\Checks;\n \n defined('APP_ROOT') || die();\n \n@@ -157,7 +158,7 @@ public function restoreFromHistory($id)\n             . 'dst.account_otherUserEdit = src.acchistory_otherUserEdit + 0,'\n             . 'dst.account_otherGroupEdit = src.acchistory_otherGroupEdit + 0,'\n             . 'dst.account_pass = src.acchistory_pass,'\n-            . 'dst.account_IV = src.acchistory_IV,'\n+            . 'dst.account_key = src.acchistory_key,'\n             . 'dst.account_passDate = src.acchistory_passDate,'\n             . 'dst.account_passDateChange = src.acchistory_passDateChange, '\n             . 'dst.account_parentId = src.acchistory_parentId, '\n@@ -215,6 +216,11 @@ public function getData()\n      *\n      * @param bool $encryptPass Encriptar la clave?\n      * @return $this\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n      * @throws SPException\n      */\n     public function createAccount($encryptPass = true)\n@@ -231,7 +237,7 @@ public function createAccount($encryptPass = true)\n             . 'account_login = :accountLogin,'\n             . 'account_url = :accountUrl,'\n             . 'account_pass = :accountPass,'\n-            . 'account_IV = :accountIV,'\n+            . 'account_key = :accountKey,'\n             . 'account_notes = :accountNotes,'\n             . 'account_dateAdd = NOW(),'\n             . 'account_userId = :accountUserId,'\n@@ -253,7 +259,7 @@ public function createAccount($encryptPass = true)\n         $Data->addParam($this->accountData->getAccountLogin(), 'accountLogin');\n         $Data->addParam($this->accountData->getAccountUrl(), 'accountUrl');\n         $Data->addParam($this->accountData->getAccountPass(), 'accountPass');\n-        $Data->addParam($this->accountData->getAccountIV(), 'accountIV');\n+        $Data->addParam($this->accountData->getAccountKey(), 'accountKey');\n         $Data->addParam($this->accountData->getAccountNotes(), 'accountNotes');\n         $Data->addParam($this->accountData->getAccountUserId(), 'accountUserId');\n         $Data->addParam($this->accountData->getAccountUserGroupId() ?: Session::getUserData()->getUserGroupId(), 'accountUserGroupId');\n@@ -300,13 +306,23 @@ public function createAccount($encryptPass = true)\n      *\n      * @param string $masterPass Clave maestra a utilizar\n      * @throws \\SP\\Core\\Exceptions\\SPException\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n      */\n-    protected function setPasswordEncrypted($masterPass = null)\n+    public function setPasswordEncrypted($masterPass = null)\n     {\n-        $pass = Crypt::encryptData($this->accountData->getAccountPass(), $masterPass);\n+        try {\n+            $masterPass = $masterPass ?: CryptSession::getSessionKey();\n+            $securedKey = Crypt::makeSecuredKey($masterPass);\n+\n+            $this->accountData->setAccountPass(Crypt::encrypt($this->accountData->getAccountPass(), $securedKey, $masterPass));\n+            $this->accountData->setAccountKey($securedKey);\n \n-        $this->accountData->setAccountPass($pass['data']);\n-        $this->accountData->setAccountIV($pass['iv']);\n+            if (strlen($securedKey) > 1000 || strlen($this->accountData->getAccountPass()) > 1000) {\n+                throw new QueryException(SPException::SP_ERROR, __('Error interno', false));\n+            }\n+        } catch (CryptoException $e) {\n+            throw new SPException(SPException::SP_ERROR, __('Error interno', false));\n+        }\n     }\n \n     /**\n@@ -346,149 +362,50 @@ public function deleteAccount($id)\n     /**\n      * Incrementa el contador de visitas de una cuenta en la BBDD\n      *\n+     * @param int $id\n      * @return bool\n      * @throws \\SP\\Core\\Exceptions\\QueryException\n      * @throws \\SP\\Core\\Exceptions\\ConstraintException\n      */\n-    public function incrementViewCounter()\n+    public function incrementViewCounter($id = null)\n     {\n         $query = /** @lang SQL */\n             'UPDATE accounts SET account_countView = (account_countView + 1) WHERE account_id = ? LIMIT 1';\n \n         $Data = new QueryData();\n         $Data->setQuery($query);\n-        $Data->addParam($this->accountData->getAccountId());\n+        $Data->addParam($id ?: $this->accountData->getAccountId());\n \n         return DB::getQuery($Data);\n     }\n \n     /**\n      * Incrementa el contador de vista de clave de una cuenta en la BBDD\n      *\n+     * @param null $id\n      * @return bool\n      * @throws \\SP\\Core\\Exceptions\\QueryException\n      * @throws \\SP\\Core\\Exceptions\\ConstraintException\n      */\n-    public function incrementDecryptCounter()\n+    public function incrementDecryptCounter($id = null)\n     {\n         $query = /** @lang SQL */\n             'UPDATE accounts SET account_countDecrypt = (account_countDecrypt + 1) WHERE account_id = ? LIMIT 1';\n \n         $Data = new QueryData();\n         $Data->setQuery($query);\n-        $Data->addParam($this->accountData->getAccountId());\n+        $Data->addParam($id ?: $this->accountData->getAccountId());\n \n         return DB::getQuery($Data);\n     }\n \n-    /**\n-     * Actualiza las claves de todas las cuentas con la nueva clave maestra.\n-     *\n-     * @param string $currentMasterPass con la clave maestra actual\n-     * @param string $newMasterPass     con la nueva clave maestra\n-     * @param string $newHash           con el nuevo hash de la clave maestra\n-     * @return bool\n-     * @throws \\phpmailer\\phpmailerException\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n-     */\n-    public function updateAccountsMasterPass($currentMasterPass, $newMasterPass, $newHash = null)\n-    {\n-        $accountsOk = [];\n-        $userId = Session::getUserData()->getUserId();\n-        $demoEnabled = Checks::demoIsEnabled();\n-        $errorCount = 0;\n-\n-        $Log = new Log();\n-        $LogMessage = $Log->getLogMessage();\n-        $LogMessage->setAction(__('Actualizar Clave Maestra', false));\n-        $LogMessage->addDescription(__('Inicio', false));\n-        $Log->writeLog(true);\n-\n-        if (!Crypt::checkCryptModule()) {\n-            $LogMessage->addDescription(__('Error en el m\u00f3dulo de encriptaci\u00f3n', false));\n-            $Log->setLogLevel(Log::ERROR);\n-            $Log->writeLog();\n-            return false;\n-        }\n-\n-        $accountsPass = $this->getAccountsPassData();\n-\n-        if (!$accountsPass) {\n-            $LogMessage->addDescription(__('Error al obtener las claves de las cuentas', false));\n-            $Log->setLogLevel(Log::ERROR);\n-            $Log->writeLog();\n-            return false;\n-        }\n-\n-        foreach ($accountsPass as $account) {\n-            $this->accountData->setAccountId($account->account_id);\n-            $this->accountData->setAccountUserEditId($userId);\n-\n-            // No realizar cambios si est\u00e1 en modo demo\n-            if ($demoEnabled) {\n-                $accountsOk[] = $this->accountData->getAccountId();\n-                continue;\n-            }\n-\n-            if (empty($account->account_pass)) {\n-                $LogMessage->addDetails(__('Clave de cuenta vac\u00eda', false), sprintf(' % s(%d)', $account->account_name, $account->account_id));\n-                continue;\n-            }\n-\n-            if (strlen($account->account_IV) < 32) {\n-                $LogMessage->addDetails(__('IV de encriptaci\u00f3n incorrecto', false), sprintf(' % s(%d)', $account->account_name, $account->account_id));\n-            }\n-\n-            $decryptedPass = Crypt::getDecrypt($account->account_pass, $account->account_IV, $currentMasterPass);\n-            $this->accountData->setAccountPass($decryptedPass);\n-            $this->setPasswordEncrypted($newMasterPass);\n-\n-            if ($this->accountData->getAccountPass() === false) {\n-                $errorCount++;\n-                $LogMessage->addDetails(__('No es posible desencriptar la clave de la cuenta', false), sprintf(' % s(%d)', $account->account_name, $account->account_id));\n-                continue;\n-            }\n-\n-            try {\n-                $this->updateAccountPass(true);\n-                $accountsOk[] = $this->accountData->getAccountId();\n-            } catch (SPException $e) {\n-                $errorCount++;\n-                $LogMessage->addDetails(__('Fallo al actualizar la clave de la cuenta', false), sprintf(' % s(%d)', $account->account_name, $account->account_id));\n-                continue;\n-            }\n-        }\n-\n-        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));\n-        $LogMessage->addDetails(__('Errores', false), $errorCount);\n-        $Log->writeLog();\n-\n-        Email::sendEmail($LogMessage);\n-\n-        return true;\n-    }\n-\n-    /**\n-     * Obtener los datos relativos a la clave de todas las cuentas.\n-     *\n-     * @return array Con los datos de la clave\n-     */\n-    protected function getAccountsPassData()\n-    {\n-        $query = /** @lang SQL */\n-            'SELECT account_id, account_name, account_pass, account_IV FROM accounts';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-\n-        return DB::getResultsArray($Data);\n-    }\n-\n     /**\n      * Actualiza la clave de una cuenta en la BBDD.\n      *\n      * @param bool $isMassive para no actualizar el hist\u00f3rico ni enviar mensajes\n      * @return bool\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public function updateAccountPass($isMassive = false)\n@@ -503,7 +420,7 @@ public function updateAccountPass($isMassive = false)\n         $query = /** @lang SQL */\n             'UPDATE accounts SET '\n             . 'account_pass = :accountPass,'\n-            . 'account_IV = :accountIV,'\n+            . 'account_key = :accountKey,'\n             . 'account_userEditId = :accountUserEditId,'\n             . 'account_dateEdit = NOW(), '\n             . 'account_passDate = UNIX_TIMESTAMP(), '\n@@ -513,7 +430,7 @@ public function updateAccountPass($isMassive = false)\n         $Data = new QueryData();\n         $Data->setQuery($query);\n         $Data->addParam($this->accountData->getAccountPass(), 'accountPass');\n-        $Data->addParam($this->accountData->getAccountIV(), 'accountIV');\n+        $Data->addParam($this->accountData->getAccountKey(), 'accountKey');\n         $Data->addParam($this->accountData->getAccountUserEditId(), 'accountUserEditId');\n         $Data->addParam($this->accountData->getAccountPassDateChange(), 'accountPassDateChange');\n         $Data->addParam($this->accountData->getAccountId(), 'accountId');\n@@ -538,7 +455,7 @@ public function getAccountPassData()\n             . 'account_userGroupId,'\n             . 'account_login,'\n             . 'account_pass,'\n-            . 'account_IV,'\n+            . 'account_key,'\n             . 'customer_name '\n             . 'FROM accounts '\n             . 'LEFT JOIN customers ON account_customerId = customer_id '\n@@ -555,4 +472,44 @@ public function getAccountPassData()\n \n         return DB::getResults($Data);\n     }\n+\n+    /**\n+     * Obtener los datos de una cuenta.\n+     * Esta funcion realiza la consulta a la BBDD y guarda los datos en las variables de la clase.\n+     *\n+     * @return AccountExtData\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    public function getDataForLink()\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT account_name,'\n+            . 'account_login,'\n+            . 'account_pass,'\n+            . 'account_key,'\n+            . 'account_url,'\n+            . 'account_notes,'\n+            . 'category_name,'\n+            . 'customer_name '\n+            . 'FROM accounts '\n+            . 'LEFT JOIN customers ON account_customerId = customer_id '\n+            . 'LEFT JOIN categories ON account_categoryId = category_id '\n+            . 'WHERE account_id = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->setMapClass($this->accountData);\n+        $Data->addParam($this->accountData->getAccountId());\n+\n+        /** @var AccountExtData|array $queryRes */\n+        $queryRes = DB::getResults($Data);\n+\n+        if ($queryRes === false) {\n+            throw new SPException(SPException::SP_CRITICAL, __('No se pudieron obtener los datos de la cuenta', false));\n+        } elseif (is_array($queryRes) && count($queryRes) === 0) {\n+            throw new SPException(SPException::SP_CRITICAL, __('La cuenta no existe', false));\n+        }\n+\n+        return $this->accountData;\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Account/AccountBase.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 5,
          "patch": "@@ -108,9 +108,4 @@ public function getAccountData()\n      * Esta funcion realiza la consulta a la BBDD y devuelve los datos.\n      */\n     protected abstract function getAccountPassData();\n-\n-    /**\n-     * Obtener los datos relativos a la clave de todas las cuentas.\n-     */\n-    protected abstract function getAccountsPassData();\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Account/AccountCrypt.class.php",
          "status": "added",
          "additions": 279,
          "deletions": 0,
          "patch": "@@ -0,0 +1,279 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Account;\n+\n+use Defuse\\Crypto\\Exception\\CryptoException;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\Exceptions\\QueryException;\n+use SP\\Core\\Messages\\TaskMessage;\n+use SP\\Core\\OldCrypt;\n+use SP\\Core\\Exceptions\\SPException;\n+use SP\\Core\\Session;\n+use SP\\Core\\Task;\n+use SP\\Core\\TaskFactory;\n+use SP\\DataModel\\AccountData;\n+use SP\\Log\\Email;\n+use SP\\Log\\Log;\n+use SP\\Storage\\DB;\n+use SP\\Storage\\QueryData;\n+use SP\\Util\\Checks;\n+use SP\\Util\\Util;\n+\n+/**\n+ * Class AccountCrypt\n+ *\n+ * @package SP\\Account\n+ */\n+class AccountCrypt\n+{\n+    /**\n+     * Actualiza las claves de todas las cuentas con la clave maestra actual\n+     * usando nueva encriptaci\u00f3n.\n+     *\n+     * @param string $currentMasterPass\n+     * @return bool\n+     */\n+    public function updateOldPass(&$currentMasterPass)\n+    {\n+        set_time_limit(0);\n+\n+        $accountsOk = [];\n+        $userId = Session::getUserData()->getUserId();\n+        $demoEnabled = Checks::demoIsEnabled();\n+        $errorCount = 0;\n+\n+        $Log = new Log();\n+        $LogMessage = $Log->getLogMessage();\n+        $LogMessage->setAction(__('Actualizar Clave Maestra', false));\n+        $LogMessage->addDescription(__('Inicio', false));\n+        $Log->writeLog(true);\n+\n+        if (!OldCrypt::checkCryptModule()) {\n+            $LogMessage->addDescription(__('Error en el m\u00f3dulo de encriptaci\u00f3n', false));\n+            $Log->setLogLevel(Log::ERROR);\n+            $Log->writeLog();\n+            return false;\n+        }\n+\n+        $accountsPass = $this->getAccountsPassData();\n+        $numAccounts = count($accountsPass);\n+\n+        if ($numAccounts === 0) {\n+            $LogMessage->addDescription(__('Error al obtener las claves de las cuentas', false));\n+            $Log->setLogLevel(Log::ERROR);\n+            $Log->writeLog();\n+            return false;\n+        }\n+\n+        $AccountDataBase = new AccountData();\n+\n+        TaskFactory::$Message->setTask(__('Actualizar Clave Maestra'));\n+        TaskFactory::sendTaskMessage();\n+\n+        $counter = 0;\n+        $startTime = time();\n+\n+        foreach ($accountsPass as $account) {\n+            // No realizar cambios si est\u00e1 en modo demo\n+            if ($demoEnabled) {\n+                $accountsOk[] = $account->account_id;\n+                continue;\n+            } elseif ($LogMessage->getDetailsCounter() >= 100) {\n+                $Log->writeLog(false, true);\n+            }\n+\n+            if ($counter % 100 === 0) {\n+                $eta = Util::getETA($startTime, $counter, $numAccounts);\n+\n+                TaskFactory::$Message->setMessage(__('Cuentas actualizadas') . ': ' . $counter . '/' . $numAccounts);\n+                TaskFactory::$Message->setProgress(round(($counter * 100) / $numAccounts, 2));\n+                TaskFactory::$Message->setTime(sprintf('ETA: %ds (%.2f/s)', $eta[0], $eta[1]));\n+                TaskFactory::sendTaskMessage();\n+            }\n+\n+            $AccountData = clone $AccountDataBase;\n+\n+            $AccountData->setAccountId($account->account_id);\n+            $AccountData->setAccountUserEditId($userId);\n+\n+//            } elseif (strlen($account->account_key) < 32) {\n+//                $LogMessage->addDetails(__('IV de encriptaci\u00f3n incorrecto', false), sprintf('%s (%d)', $account->account_name, $account->account_id));\n+//            }\n+\n+            try {\n+                $decryptedPass = OldCrypt::getDecrypt($account->account_pass, $account->account_key, $currentMasterPass);\n+\n+                $securedKey = Crypt::makeSecuredKey($currentMasterPass);\n+\n+                $AccountData->setAccountPass(Crypt::encrypt($decryptedPass, $securedKey, $currentMasterPass));\n+                $AccountData->setAccountKey($securedKey);\n+\n+                if (strlen($securedKey) > 1000 || strlen($AccountData->getAccountPass()) > 1000) {\n+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));\n+                }\n+\n+                $Account = new Account($AccountData);\n+                $Account->updateAccountPass(true);\n+\n+                $accountsOk[] = $account->account_id;\n+                $counter++;\n+            } catch (SPException $e) {\n+                $errorCount++;\n+                $LogMessage->addDetails(__('Fallo al actualizar la clave de la cuenta', false), sprintf('%s (%d)', $account->account_name, $account->account_id));\n+            } catch (CryptoException $e) {\n+                $errorCount++;\n+                $LogMessage->addDetails(__('Fallo al actualizar la clave de la cuenta', false), sprintf('%s (%d)', $account->account_name, $account->account_id));\n+            }\n+        }\n+\n+        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));\n+        $LogMessage->addDetails(__('Errores', false), $errorCount);\n+        $Log->writeLog();\n+\n+        Email::sendEmail($LogMessage);\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Obtener los datos relativos a la clave de todas las cuentas.\n+     *\n+     * @return array Con los datos de la clave\n+     */\n+    protected function getAccountsPassData()\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT account_id, account_name, account_pass, account_key \n+            FROM accounts WHERE BIT_LENGTH(account_pass) > 0';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+\n+        return DB::getResultsArray($Data);\n+    }\n+\n+    /**\n+     * Actualiza las claves de todas las cuentas con la nueva clave maestra.\n+     *\n+     * @param string $currentMasterPass\n+     * @param string $newMasterPass\n+     * @param Task   $Task\n+     * @return bool\n+     */\n+    public function updatePass($currentMasterPass, $newMasterPass, Task $Task)\n+    {\n+        set_time_limit(0);\n+\n+        $accountsOk = [];\n+        $userId = Session::getUserData()->getUserId();\n+        $demoEnabled = Checks::demoIsEnabled();\n+        $errorCount = 0;\n+\n+        $Log = new Log();\n+        $LogMessage = $Log->getLogMessage();\n+        $LogMessage->setAction(__('Actualizar Clave Maestra', false));\n+        $LogMessage->addDescription(__('Inicio', false));\n+        $Log->writeLog(true);\n+\n+        $accountsPass = $this->getAccountsPassData();\n+        $numAccounts = count($accountsPass);\n+\n+        if ($numAccounts === 0) {\n+            $LogMessage->addDescription(__('Error al obtener las claves de las cuentas', false));\n+            $Log->setLogLevel(Log::ERROR);\n+            $Log->writeLog();\n+            return false;\n+        }\n+\n+        $AccountDataBase = new AccountData();\n+\n+        $Message = new TaskMessage();\n+        $Message->setTaskId($Task->getTaskId());\n+        $Message->setTask(__('Actualizar Clave Maestra'));\n+\n+        $Task->writeJsonStatusAndFlush($Message);\n+\n+        $counter = 0;\n+        $startTime = time();\n+\n+        foreach ($accountsPass as $account) {\n+            // No realizar cambios si est\u00e1 en modo demo\n+            if ($demoEnabled) {\n+                $accountsOk[] = $account->account_id;\n+                continue;\n+            } elseif ($LogMessage->getDetailsCounter() >= 100) {\n+                $Log->writeLog(false, true);\n+            }\n+\n+            if ($counter % 100 === 0) {\n+                $eta = Util::getETA($startTime, $counter, $numAccounts);\n+\n+                $Message->setMessage(__('Cuentas actualizadas') . ': ' . $counter . '/' . $numAccounts);\n+                $Message->setProgress(round(($counter * 100) / $numAccounts, 2));\n+                $Message->setTime(sprintf('ETA: %ds (%.2f/s)', $eta[0], $eta[1]));\n+\n+                $Task->writeJsonStatusAndFlush($Message);\n+            }\n+\n+            $AccountData = clone $AccountDataBase;\n+\n+            $AccountData->setAccountId($account->account_id);\n+            $AccountData->setAccountUserEditId($userId);\n+\n+            try {\n+                $currentSecuredKey = Crypt::unlockSecuredKey($account->account_key, $currentMasterPass);\n+                $decryptedPass = Crypt::decrypt($account->account_pass, $currentSecuredKey);\n+\n+                $newSecuredKey = Crypt::makeSecuredKey($newMasterPass);\n+                $AccountData->setAccountPass(Crypt::encrypt($decryptedPass, $newSecuredKey, $newMasterPass));\n+                $AccountData->setAccountKey($newSecuredKey);\n+\n+                if (strlen($newSecuredKey) > 1000 || strlen($AccountData->getAccountPass()) > 1000) {\n+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));\n+                }\n+\n+                $Account = new Account($AccountData);\n+                $Account->updateAccountPass(true);\n+\n+                $accountsOk[] = $account->account_id;\n+                $counter++;\n+            } catch (SPException $e) {\n+                $errorCount++;\n+                $LogMessage->addDetails(__('Fallo al actualizar la clave de la cuenta', false), sprintf('%s (%d)', $account->account_name, $account->account_id));\n+            } catch (CryptoException $e) {\n+                $errorCount++;\n+                $LogMessage->addDetails(__('Fallo al actualizar la clave de la cuenta', false), sprintf('%s (%d)', $account->account_name, $account->account_id));\n+            }\n+        }\n+\n+        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));\n+        $LogMessage->addDetails(__('Errores', false), $errorCount);\n+        $Log->writeLog();\n+\n+        Email::sendEmail($LogMessage);\n+\n+        return true;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Account/AccountHistory.class.php",
          "status": "modified",
          "additions": 12,
          "deletions": 122,
          "patch": "@@ -25,7 +25,7 @@\n namespace SP\\Account;\n \n use SP\\Config\\ConfigDB;\n-use SP\\Core\\Crypt;\n+use SP\\Core\\OldCrypt;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\Log\\Log;\n use SP\\Storage\\DB;\n@@ -115,7 +115,7 @@ public static function addHistory($id, $isDelete = false)\n                 . 'account_login,'\n                 . 'account_url,'\n                 . 'account_pass,'\n-                . 'account_IV,'\n+                . 'account_key,'\n                 . 'account_notes,'\n                 . 'account_countView,'\n                 . 'account_countDecrypt,'\n@@ -143,7 +143,7 @@ public static function addHistory($id, $isDelete = false)\n                 . 'account_login,'\n                 . 'account_url,'\n                 . 'account_pass,'\n-                . 'account_IV,'\n+                . 'account_key,'\n                 . 'account_notes,'\n                 . 'account_countView,'\n                 . 'account_countDecrypt,'\n@@ -171,7 +171,7 @@ public static function addHistory($id, $isDelete = false)\n             . 'acchistory_login,'\n             . 'acchistory_url,'\n             . 'acchistory_pass,'\n-            . 'acchistory_IV,'\n+            . 'acchistory_key,'\n             . 'acchistory_notes,'\n             . 'acchistory_countView,'\n             . 'acchistory_countDecrypt,'\n@@ -242,116 +242,6 @@ public static function updateAccountsMPassHash($newHash)\n         return DB::getQuery($Data);\n     }\n \n-    /**\n-     * Actualiza las claves de todas las cuentas en el hist\u00f3rico con la nueva clave maestra.\n-     *\n-     * @param string $currentMasterPass con la clave maestra actual\n-     * @param string $newMasterPass     con la nueva clave maestra\n-     * @param string $newHash           con el nuevo hash de la clave maestra\n-     * @return bool\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n-     */\n-    public function updateAccountsMasterPass($currentMasterPass, $newMasterPass, $newHash = null)\n-    {\n-        $accountsOk = [];\n-        $errorCount = 0;\n-        $demoEnabled = Checks::demoIsEnabled();\n-\n-        $Log = new Log();\n-        $LogMessage = $Log->getLogMessage();\n-        $LogMessage->setAction(__('Actualizar Clave Maestra (H)', false));\n-        $LogMessage->addDescription(__('Inicio', false));\n-        $Log->writeLog(true);\n-\n-        if (!Crypt::checkCryptModule()) {\n-            $Log->setLogLevel(Log::ERROR);\n-            $LogMessage->addDescription(__('Error en el m\u00f3dulo de encriptaci\u00f3n', false));\n-            $Log->writeLog();\n-            return false;\n-        }\n-\n-        $accountsPass = $this->getAccountsPassData();\n-\n-        if (!$accountsPass) {\n-            $Log->setLogLevel(Log::ERROR);\n-            $LogMessage->addDescription(__('Error al obtener las claves de las cuentas', false));\n-            $Log->writeLog();\n-            return false;\n-        }\n-\n-        $AccountDataBase = new \\stdClass();\n-        $AccountDataBase->id = 0;\n-        $AccountDataBase->pass = '';\n-        $AccountDataBase->iv = '';\n-        $AccountDataBase->hash = $newHash;\n-\n-        foreach ($accountsPass as $account) {\n-            $AccountData = clone $AccountDataBase;\n-            $AccountData->id = $account->acchistory_id;\n-\n-            // No realizar cambios si est\u00e1 en modo demo\n-            if ($demoEnabled) {\n-                $accountsOk[] = $account->acchistory_id;\n-                continue;\n-            }\n-\n-            if (!$this->checkAccountMPass()) {\n-                $errorCount++;\n-                $LogMessage->addDetails(__('La clave maestra del registro no coincide', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));\n-                continue;\n-            }\n-\n-            if ($account->acchistory_pass === '') {\n-                $LogMessage->addDetails(__('Clave de cuenta vac\u00eda', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));\n-                continue;\n-            }\n-\n-            if (strlen($account->acchistory_IV) < 32) {\n-                $LogMessage->addDetails(__('IV de encriptaci\u00f3n incorrecto', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));\n-            }\n-\n-            $decryptedPass = Crypt::getDecrypt($account->acchistory_pass, $account->acchistory_IV, $currentMasterPass);\n-            $AccountData->pass = Crypt::mkEncrypt($decryptedPass, $newMasterPass);\n-            $AccountData->iv = Crypt::$strInitialVector;\n-\n-            if ($AccountData->pass === false) {\n-                $errorCount++;\n-                $LogMessage->addDetails(__('No es posible desencriptar la clave de la cuenta', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));\n-                continue;\n-            }\n-\n-            try {\n-                $this->updateAccountPass($AccountData);\n-                $accountsOk[] = $account->acchistory_id;\n-            } catch (SPException $e) {\n-                $errorCount++;\n-                $LogMessage->addDetails(__('Fallo al actualizar la clave del hist\u00f3rico', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));\n-            }\n-        }\n-\n-        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));\n-        $LogMessage->addDetails(__('Errores', false), $errorCount);\n-        $Log->writeLog();\n-\n-        return true;\n-    }\n-\n-    /**\n-     * Obtener los datos relativos a la clave de todas las cuentas del hist\u00f3rico.\n-     *\n-     * @return false|array con los datos de la clave\n-     */\n-    protected function getAccountsPassData()\n-    {\n-        $query = /** @lang SQL */\n-            'SELECT acchistory_id, acchistory_name, acchistory_pass, acchistory_IV FROM accHistory';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-\n-        return DB::getResultsArray($Data);\n-    }\n-\n     /**\n      * Comprueba el hash de la clave maestra del registro de hist\u00f3rico de una cuenta.\n      *\n@@ -387,16 +277,16 @@ public function updateAccountPass($AccountData)\n         $query = /** @lang SQL */\n             'UPDATE accHistory SET '\n             . 'acchistory_pass = :accountPass,'\n-            . 'acchistory_IV = :accountIV,'\n-            . 'acchistory_mPassHash = :newHash '\n+            . 'acchistory_key = :accountKey,'\n+            . 'acchistory_mPassHash = :hash '\n             . 'WHERE acchistory_id = :id';\n \n         $Data = new QueryData();\n         $Data->setQuery($query);\n         $Data->addParam($AccountData->id, 'id');\n         $Data->addParam($AccountData->pass, 'accountPass');\n-        $Data->addParam($AccountData->iv, 'accountIV');\n-        $Data->addParam($AccountData->hash, 'newHash');\n+        $Data->addParam($AccountData->key, 'accountKey');\n+        $Data->addParam($AccountData->hash, 'hash');\n \n         return DB::getQuery($Data);\n     }\n@@ -415,7 +305,7 @@ public function getAccountPassData()\n             . 'acchistory_userGroupId AS account_userGroupId,'\n             . 'acchistory_login AS account_login,'\n             . 'acchistory_pass AS account_pass,'\n-            . 'acchistory_IV AS account_IV,'\n+            . 'acchistory_key AS account_key,'\n             . 'customer_name '\n             . 'FROM accHistory '\n             . 'LEFT JOIN customers ON acchistory_customerId = customer_id '\n@@ -463,7 +353,7 @@ public function getData()\n             . 'acchistory_login as account_login,'\n             . 'acchistory_url as account_url,'\n             . 'acchistory_pass as account_pass,'\n-            . 'acchistory_IV as account_IV,'\n+            . 'acchistory_key as account_key,'\n             . 'acchistory_notes as account_notes,'\n             . 'acchistory_countView as account_countView,'\n             . 'acchistory_countDecrypt as account_countDecrypt,'\n@@ -527,7 +417,7 @@ public function createAccount($encryptPass = true)\n             . 'acchistory_login = :accountLogin,'\n             . 'acchistory_url = :accountUrl,'\n             . 'acchistory_pass = :accountPass,'\n-            . 'acchistory_IV = :accountIV,'\n+            . 'acchistory_key = :accountKey,'\n             . 'acchistory_notes = :accountNotes,'\n             . 'acchistory_dateAdd = :accountDateAdd,'\n             . 'acchistory_dateEdit = :accountDateEdit,'\n@@ -552,7 +442,7 @@ public function createAccount($encryptPass = true)\n         $Data->addParam($this->accountData->getAccountLogin(), 'accountLogin');\n         $Data->addParam($this->accountData->getAccountUrl(), 'accountUrl');\n         $Data->addParam($this->accountData->getAccountPass(), 'accountPass');\n-        $Data->addParam($this->accountData->getAccountIV(), 'accountIV');\n+        $Data->addParam($this->accountData->getAccountKey(), 'accountKey');\n         $Data->addParam($this->accountData->getAccountNotes(), 'accountNotes');\n         $Data->addParam($this->accountData->getAccountUserId(), 'accountUserId');\n         $Data->addParam($this->accountData->getAccountUserGroupId(), 'accountUserGroupId');"
        },
        {
          "filename": "inc/SP/Account/AccountHistoryCrypt.class.php",
          "status": "added",
          "additions": 298,
          "deletions": 0,
          "patch": "@@ -0,0 +1,298 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Account;\n+\n+use Defuse\\Crypto\\Exception\\CryptoException;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\Crypt\\Hash;\n+use SP\\Core\\Exceptions\\QueryException;\n+use SP\\Core\\Messages\\TaskMessage;\n+use SP\\Core\\OldCrypt;\n+use SP\\Core\\Exceptions\\SPException;\n+use SP\\Core\\Task;\n+use SP\\Core\\TaskFactory;\n+use SP\\Log\\Email;\n+use SP\\Log\\Log;\n+use SP\\Storage\\DB;\n+use SP\\Storage\\QueryData;\n+use SP\\Util\\Checks;\n+use SP\\Util\\Util;\n+\n+/**\n+ * Class AccountHistoryCrypt\n+ *\n+ * @package SP\\Account\n+ */\n+class AccountHistoryCrypt\n+{\n+    /**\n+     * @var string\n+     */\n+    public static $currentMPassHash;\n+\n+    /**\n+     * Actualiza las claves de todas las cuentas con la clave maestra actual\n+     * usando nueva encriptaci\u00f3n.\n+     *\n+     * @param string $currentMasterPass\n+     * @return bool\n+     */\n+    public function updateOldPass(&$currentMasterPass)\n+    {\n+        set_time_limit(0);\n+\n+        $accountsOk = [];\n+        $demoEnabled = Checks::demoIsEnabled();\n+        $errorCount = 0;\n+\n+        $Log = new Log();\n+        $LogMessage = $Log->getLogMessage();\n+        $LogMessage->setAction(__('Actualizar Clave Maestra (H)', false));\n+        $LogMessage->addDescription(__('Inicio', false));\n+        $Log->writeLog(true);\n+\n+        if (!OldCrypt::checkCryptModule()) {\n+            $LogMessage->addDescription(__('Error en el m\u00f3dulo de encriptaci\u00f3n', false));\n+            $Log->setLogLevel(Log::ERROR);\n+            $Log->writeLog();\n+            return false;\n+        }\n+\n+        $accountsPass = $this->getAccountsPassData();\n+        $numAccounts = count($accountsPass);\n+\n+        if ($numAccounts === 0) {\n+            $LogMessage->addDescription(__('No se encontraron registros', false));\n+            $Log->setLogLevel(Log::ERROR);\n+            $Log->writeLog();\n+            return true;\n+        }\n+\n+        $AccountDataBase = new \\stdClass();\n+        $AccountDataBase->id = 0;\n+        $AccountDataBase->pass = '';\n+        $AccountDataBase->key = '';\n+        $AccountDataBase->hash = Hash::hashKey($currentMasterPass);\n+\n+        TaskFactory::$Message->setTask(__('Actualizar Clave Maestra (H)'));\n+        TaskFactory::sendTaskMessage();\n+\n+        $counter = 0;\n+        $startTime = time();\n+\n+        foreach ($accountsPass as $account) {\n+            // No realizar cambios si est\u00e1 en modo demo\n+            if ($demoEnabled) {\n+                $accountsOk[] = $account->acchistory_id;\n+                continue;\n+            } elseif ($LogMessage->getDetailsCounter() >= 100) {\n+                $Log->writeLog(false, true);\n+            }\n+\n+            if ($counter % 100 === 0) {\n+                $eta = Util::getETA($startTime, $counter, $numAccounts);\n+\n+                TaskFactory::$Message->setMessage(__('Cuentas actualizadas') . ': ' . $counter . '/' . $numAccounts);\n+                TaskFactory::$Message->setProgress(round(($counter * 100) / $numAccounts, 2));\n+                TaskFactory::$Message->setTime(sprintf('ETA: %ds (%.2f/s)', $eta[0], $eta[1]));\n+\n+                TaskFactory::sendTaskMessage();\n+            }\n+\n+            $AccountData = clone $AccountDataBase;\n+\n+            $AccountData->id = $account->acchistory_id;\n+\n+            if (!self::$currentMPassHash === $account->acchistory_mPassHash\n+                && !hash_equals($currentMasterPass, $account->acchistory_mPassHash)\n+            ) {\n+                $errorCount++;\n+                $LogMessage->addDetails(__('La clave maestra del registro no coincide', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));\n+                continue;\n+            }\n+\n+            try {\n+                $decryptedPass = OldCrypt::getDecrypt($account->acchistory_pass, $account->acchistory_key, $currentMasterPass);\n+\n+                $securedKey = Crypt::makeSecuredKey($currentMasterPass);\n+\n+                $AccountData->pass = Crypt::encrypt($decryptedPass, $securedKey, $currentMasterPass);\n+                $AccountData->key = $securedKey;\n+\n+                if (strlen($securedKey) > 1000 || strlen($AccountData->pass) > 1000) {\n+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));\n+                }\n+\n+                $Account = new AccountHistory();\n+                $Account->updateAccountPass($AccountData);\n+\n+                $accountsOk[] = $account->acchistory_id;\n+                $counter++;\n+            } catch (SPException $e) {\n+                $errorCount++;\n+                $LogMessage->addDetails(__('Fallo al actualizar la clave del hist\u00f3rico', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));\n+            } catch (CryptoException $e) {\n+                $errorCount++;\n+                $LogMessage->addDetails(__('Fallo al actualizar la clave del hist\u00f3rico', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));\n+            }\n+        }\n+\n+        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));\n+        $LogMessage->addDetails(__('Errores', false), $errorCount);\n+        $Log->writeLog();\n+\n+        Email::sendEmail($LogMessage);\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Obtener los datos relativos a la clave de todas las cuentas.\n+     *\n+     * @return array Con los datos de la clave\n+     */\n+    protected function getAccountsPassData()\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT acchistory_id, acchistory_name, acchistory_pass, acchistory_key, acchistory_mPassHash\n+            FROM accHistory WHERE BIT_LENGTH(acchistory_pass) > 0';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+\n+        return DB::getResultsArray($Data);\n+    }\n+\n+    /**\n+     * Actualiza las claves de todas las cuentas con la nueva clave maestra.\n+     *\n+     * @param string $currentMasterPass\n+     * @param string $newMasterPass\n+     * @param Task   $Task\n+     * @return bool\n+     */\n+    public function updatePass($currentMasterPass, $newMasterPass, Task $Task)\n+    {\n+        set_time_limit(0);\n+\n+        $accountsOk = [];\n+        $demoEnabled = Checks::demoIsEnabled();\n+        $errorCount = 0;\n+\n+        $Log = new Log();\n+        $LogMessage = $Log->getLogMessage();\n+        $LogMessage->setAction(__('Actualizar Clave Maestra (H)', false));\n+        $LogMessage->addDescription(__('Inicio', false));\n+        $Log->writeLog(true);\n+\n+        $accountsPass = $this->getAccountsPassData();\n+        $numAccounts = count($accountsPass);\n+\n+        if ($numAccounts === 0) {\n+            $LogMessage->addDescription(__('No se encontraron registros', false));\n+            $Log->setLogLevel(Log::ERROR);\n+            $Log->writeLog();\n+            return true;\n+        }\n+\n+        $AccountDataBase = new \\stdClass();\n+        $AccountDataBase->id = 0;\n+        $AccountDataBase->pass = '';\n+        $AccountDataBase->key = '';\n+        $AccountDataBase->hash = Hash::hashKey($newMasterPass);\n+\n+        $Message = new TaskMessage();\n+        $Message->setTaskId($Task->getTaskId());\n+        $Message->setTask(__('Actualizar Clave Maestra (H)'));\n+\n+        $Task->writeJsonStatusAndFlush($Message);\n+\n+        $counter = 0;\n+        $startTime = time();\n+\n+        foreach ($accountsPass as $account) {\n+            // No realizar cambios si est\u00e1 en modo demo\n+            if ($demoEnabled) {\n+                $accountsOk[] = $account->acchistory_id;\n+                continue;\n+            } elseif ($LogMessage->getDetailsCounter() >= 100) {\n+                $Log->writeLog(false, true);\n+            }\n+\n+            if ($counter % 100 === 0) {\n+                $eta = Util::getETA($startTime, $counter, $numAccounts);\n+\n+                $Message->setMessage(__('Cuentas actualizadas') . ': ' . $counter . '/' . $numAccounts);\n+                $Message->setProgress(round(($counter * 100) / $numAccounts, 2));\n+                $Message->setTime(sprintf('ETA: %ds (%.2f/s)', $eta[0], $eta[1]));\n+\n+                $Task->writeJsonStatusAndFlush($Message);\n+            }\n+\n+            $AccountData = clone $AccountDataBase;\n+\n+            $AccountData->id = $account->acchistory_id;\n+\n+            if (!Hash::checkHashKey($currentMasterPass, $account->acchistory_mPassHash)) {\n+                $errorCount++;\n+                $LogMessage->addDetails(__('La clave maestra del registro no coincide', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));\n+                continue;\n+            }\n+\n+            try {\n+                $currentSecuredKey = Crypt::unlockSecuredKey($account->acchistory_key, $currentMasterPass);\n+                $decryptedPass = Crypt::decrypt($account->acchistory_pass, $currentSecuredKey);\n+\n+                $newSecuredKey = Crypt::makeSecuredKey($newMasterPass);\n+                $AccountData->pass = Crypt::encrypt($decryptedPass, $newSecuredKey, $newMasterPass);\n+                $AccountData->key = $newSecuredKey;\n+\n+                if (strlen($newSecuredKey) > 1000 || strlen($AccountData->pass) > 1000) {\n+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));\n+                }\n+\n+                $Account = new AccountHistory();\n+                $Account->updateAccountPass($AccountData);\n+\n+                $accountsOk[] = $account->acchistory_id;\n+                $counter++;\n+            } catch (SPException $e) {\n+                $errorCount++;\n+                $LogMessage->addDetails(__('Fallo al actualizar la clave del hist\u00f3rico', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));\n+            } catch (CryptoException $e) {\n+                $errorCount++;\n+                $LogMessage->addDetails(__('Fallo al actualizar la clave del hist\u00f3rico', false), sprintf('%s (%d)', $account->acchistory_name, $account->acchistory_id));\n+            }\n+        }\n+\n+        $LogMessage->addDetails(__('Cuentas actualizadas', false), implode(',', $accountsOk));\n+        $LogMessage->addDetails(__('Errores', false), $errorCount);\n+        $Log->writeLog();\n+\n+        Email::sendEmail($LogMessage);\n+\n+        return true;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Account/AccountHistoryUtil.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -117,6 +117,7 @@ public static function getAccountsMgmtSearch(ItemSearchData $SearchData)\n      * @param $id int El Id del registro en el hist\u00f3rico\n      * @param $accountId\n      * @return bool\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public static function restoreFromHistory($id, $accountId)\n     {\n@@ -138,7 +139,7 @@ public static function restoreFromHistory($id, $accountId)\n             . 'dst.account_otherUserEdit = src.acchistory_otherUserEdit + 0,'\n             . 'dst.account_otherGroupEdit = src.acchistory_otherGroupEdit + 0,'\n             . 'dst.account_pass = src.acchistory_pass,'\n-            . 'dst.account_IV = src.acchistory_IV,'\n+            . 'dst.account_key = src.acchistory_key,'\n             . 'dst.account_passDate = src.acchistory_passDate,'\n             . 'dst.account_passDateChange = src.acchistory_passDateChange, '\n             . 'dst.account_parentId = src.acchistory_parentId, '"
        },
        {
          "filename": "inc/SP/Account/AccountInterface.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 8,
          "patch": "@@ -51,12 +51,4 @@ public function createAccount($encryptPass = true);\n      * @return mixed\n      */\n     public function deleteAccount($id);\n-\n-    /**\n-     * @param      $currentMasterPass\n-     * @param      $newMasterPass\n-     * @param null $newHash\n-     * @return mixed\n-     */\n-    public function updateAccountsMasterPass($currentMasterPass, $newMasterPass, $newHash = null);\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Account/AccountUtil.class.php",
          "status": "modified",
          "additions": 17,
          "deletions": 1,
          "patch": "@@ -119,7 +119,7 @@ public static function getAccountsData()\n             account_login,\n             account_url,\n             account_pass,\n-            account_IV,\n+            account_key,\n             account_notes \n             FROM accounts';\n \n@@ -296,4 +296,20 @@ public static function getAccountsForUser($accountId = 0)\n \n         return DB::getResultsArray($Data);\n     }\n+\n+    /**\n+     * Devolver el n\u00famero de cuentas a procesar\n+     *\n+     * @return int\n+     */\n+    public static function getTotalNumAccounts()\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT SUM(n) AS num FROM (SELECT COUNT(*) AS n FROM accounts UNION SELECT COUNT(*) AS n FROM accHistory) a';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+\n+        return (int)DB::getResults($Data)->num;\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Api/ApiBase.class.php",
          "status": "modified",
          "additions": 61,
          "deletions": 53,
          "patch": "@@ -2,8 +2,8 @@\n /**\n  * sysPass\n  *\n- * @author nuxsmin\n- * @link http://syspass.org\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n  * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n  *\n  * This file is part of sysPass.\n@@ -26,17 +26,18 @@\n \n defined('APP_ROOT') || die();\n \n-use SP\\Auth\\Auth;\n-use SP\\Auth\\AuthResult;\n-use SP\\Auth\\AuthUtil;\n+use Defuse\\Crypto\\Exception\\CryptoException;\n+use SP\\Core\\Crypt\\Hash;\n+use SP\\Core\\Crypt\\Vault;\n use SP\\Core\\Exceptions\\InvalidArgumentException;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\Core\\Session;\n use SP\\Core\\SessionUtil;\n-use SP\\DataModel\\UserData;\n+use SP\\DataModel\\ApiTokenData;\n+use SP\\DataModel\\UserLoginData;\n use SP\\Log\\Log;\n+use SP\\Mgmt\\ApiTokens\\ApiToken;\n use SP\\Mgmt\\Users\\User;\n-use SP\\Mgmt\\Users\\UserPass;\n use SP\\Util\\Json;\n \n /**\n@@ -71,17 +72,17 @@ abstract class ApiBase implements ApiInterface\n      */\n     protected $data;\n     /**\n-     * @var string\n-     */\n-    protected $mPass = '';\n-    /**\n-     * @var UserData\n+     * @var UserLoginData\n      */\n     protected $UserData;\n     /**\n      * @var Log\n      */\n     protected $Log;\n+    /**\n+     * @var ApiTokenData\n+     */\n+    protected $ApiTokenData;\n \n     /**\n      * @param $data\n@@ -90,18 +91,21 @@ abstract class ApiBase implements ApiInterface\n     public function __construct($data)\n     {\n         $this->actionId = $this->getActionId($data->method);\n+        $this->ApiTokenData = ApiToken::getItem()->getTokenByToken($this->actionId, $data->params->authToken);\n+\n+        if ($this->ApiTokenData === false) {\n+            ApiUtil::addTracking();\n \n-        if (!AuthUtil::checkAuthToken($this->actionId, $data->params->authToken)) {\n             throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));\n         }\n \n         $this->data = $data;\n \n-        $this->userId = ApiTokensUtil::getUserIdForToken($data->params->authToken);\n+        $this->userId = $this->ApiTokenData->getAuthtokenUserId();\n \n         $this->loadUserData();\n \n-        if ($this->getParam('userPass') !== null) {\n+        if ($this->passIsNeeded()) {\n             $this->doAuth();\n         }\n \n@@ -126,27 +130,42 @@ protected function getActionId($action)\n     /**\n      * Cargar los datos del usuario\n      *\n-     * @return UserData\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     protected function loadUserData()\n     {\n-        $UserData = new UserData();\n-        $UserData->setUserId($this->userId);\n-        $UserData->setUserPass($this->getParam('userPass'));\n-\n-        $this->UserData = User::getItem($UserData)->getById($this->userId);\n+        $this->UserData = User::getItem()->getById($this->ApiTokenData->getAuthtokenUserId());\n \n         SessionUtil::loadUserSession($this->UserData);\n     }\n \n+    /**\n+     * @return bool\n+     */\n+    protected abstract function passIsNeeded();\n+\n+    /**\n+     * Realizar la autentificaci\u00f3n del usuario\n+     *\n+     * @throws SPException\n+     */\n+    protected function doAuth()\n+    {\n+        if ($this->UserData->isUserIsDisabled()\n+            || !Hash::checkHashKey($this->getParam('tokenPass', true), $this->ApiTokenData->getAuthtokenHash())\n+        ) {\n+            ApiUtil::addTracking();\n+\n+            throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));\n+        }\n+    }\n+\n     /**\n      * Devolver el valor de un par\u00e1metro\n      *\n-     * @param string $name Nombre del par\u00e1metro\n-     * @param bool $required Si es requerido\n-     * @param mixed $default Valor por defecto\n+     * @param string $name     Nombre del par\u00e1metro\n+     * @param bool   $required Si es requerido\n+     * @param mixed  $default  Valor por defecto\n      * @return int|string\n      * @throws SPException\n      */\n@@ -164,39 +183,24 @@ protected function getParam($name, $required = false, $default = null)\n     }\n \n     /**\n-     * Realizar la autentificaci\u00f3n del usuario\n+     * Devolver la clave maestra\n      *\n+     * @return string\n      * @throws SPException\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      */\n-    protected function doAuth()\n+    protected function getMPass()\n     {\n-        $Auth = new Auth($this->UserData);\n-        $resAuth = $Auth->doAuth();\n-\n-        if ($resAuth !== false) {\n-            /** @var AuthResult $AuthResult */\n-            foreach ($resAuth as $AuthResult) {\n-                $data = $AuthResult->getData();\n-\n-                if ($data->getAuthenticated() && $data->getStatusCode() === 0) {\n-                    break;\n-                }\n+        try {\n+            /** @var Vault $Vault */\n+            $Vault = unserialize($this->ApiTokenData->getAuthtokenVault());\n+\n+            if ($Vault && $pass = $Vault->getData($this->getParam('tokenPass') . $this->getParam('authToken'))) {\n+                return $pass;\n+            } else {\n+                throw new SPException(SPException::SP_ERROR, __('Error interno', false), __('Datos inv\u00e1lidos', false));\n             }\n-        } else {\n-            throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));\n-        }\n-\n-        $UserPass = UserPass::getItem($this->UserData);\n-\n-        if (!$this->UserData->isUserIsDisabled()\n-            && $UserPass->checkUserUpdateMPass()\n-            && $UserPass->loadUserMPass()\n-        ) {\n-            $this->auth = true;\n-            $this->mPass = $UserPass->getClearUserMPass();\n-        } else {\n-            throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));\n+        } catch (CryptoException $e) {\n+            throw new SPException(SPException::SP_ERROR, __('Error interno', false), $e->getMessage());\n         }\n     }\n \n@@ -209,6 +213,8 @@ protected function doAuth()\n     protected function checkActionAccess($action)\n     {\n         if ($this->actionId !== $action) {\n+            ApiUtil::addTracking();\n+\n             throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));\n         }\n     }\n@@ -241,6 +247,8 @@ protected function wrapJSON(&$data)\n     protected function checkAuth()\n     {\n         if ($this->auth === false) {\n+            ApiUtil::addTracking();\n+\n             throw new SPException(SPException::SP_CRITICAL, __('Acceso no permitido', false));\n         }\n     }"
        },
        {
          "filename": "inc/SP/Api/ApiRequest.class.php",
          "status": "modified",
          "additions": 40,
          "deletions": 5,
          "patch": "@@ -2,8 +2,8 @@\n /**\n  * sysPass\n  *\n- * @author nuxsmin\n- * @link http://syspass.org\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n  * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n  *\n  * This file is part of sysPass.\n@@ -24,14 +24,16 @@\n \n namespace SP\\Api;\n \n+defined('APP_ROOT') || die();\n+\n use ReflectionClass;\n use SP\\Core\\Exceptions\\InvalidArgumentException;\n use SP\\Core\\Exceptions\\SPException;\n+use SP\\DataModel\\TrackData;\n use SP\\Http\\Request;\n+use SP\\Mgmt\\Tracks\\Track;\n use SP\\Util\\Json;\n \n-defined('APP_ROOT') || die();\n-\n /**\n  * Class ApiRequest encargada de atender la peticiones a la API de sysPass\n  *\n@@ -49,6 +51,8 @@ class ApiRequest\n      */\n     const ACTION = 'action';\n     const AUTH_TOKEN = 'authToken';\n+    const TIME_TRACKING_MAX_ATTEMPTS = 5;\n+    const TIME_TRACKING = 300;\n \n     /**\n      * @var \\stdClass\n@@ -76,7 +80,7 @@ public function formatJsonError($e)\n             'error' => [\n                 'code' => $code,\n                 'message' => __($e->getMessage()),\n-                'data' => $class === SPException::class || $class === InvalidArgumentException::class ? $e->getHint() : ''\n+                'data' => $class === SPException::class || $class === InvalidArgumentException::class ? __($e->getHint()) : ''\n             ],\n             'id' => ($code === -32700 || $code === -32600) ? null : $this->getId()\n         ];\n@@ -115,6 +119,7 @@ public function runApi()\n     protected function init()\n     {\n         try {\n+            $this->checkTracking();\n             $this->analyzeRequestMethod();\n             $this->getRequestData();\n             $this->checkBasicData();\n@@ -124,6 +129,33 @@ protected function init()\n         }\n     }\n \n+    /**\n+     * Comprobar los intentos de login\n+     *\n+     * @throws \\SP\\Core\\Exceptions\\AuthException\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    private function checkTracking()\n+    {\n+        try {\n+            $TrackData = new TrackData();\n+            $TrackData->setTrackSource('API');\n+            $TrackData->setTrackIp($_SERVER['REMOTE_ADDR']);\n+\n+            $attempts = count(Track::getItem($TrackData)->getTracksForClientFromTime(time() - self::TIME_TRACKING));\n+        } catch (SPException $e) {\n+            throw new SPException(SPException::SP_ERROR, __('Error interno', false), __FUNCTION__, -32601);\n+        }\n+\n+        if ($attempts >= self::TIME_TRACKING_MAX_ATTEMPTS) {\n+            ApiUtil::addTracking();\n+\n+            sleep(0.3 * $attempts);\n+\n+            throw new SPException(SPException::SP_INFO, __('Intentos excedidos', false), '', -32601);\n+        }\n+    }\n+\n     /**\n      * Analizar y establecer el m\u00e9todo HTTP a utilizar\n      *\n@@ -189,10 +221,13 @@ private function checkAction()\n         $this->ApiReflection = new ReflectionClass(SyspassApi::class);\n \n         if (!$this->ApiReflection->hasMethod($this->data->method)) {\n+            ApiUtil::addTracking();\n+\n             throw new SPException(SPException::SP_WARNING, __('Acci\u00f3n Inv\u00e1lida', false), '', -32601);\n         }\n     }\n \n+\n     /**\n      * Obtener el id de la acci\u00f3n\n      *"
        },
        {
          "filename": "inc/SP/Api/ApiTokens.class.php",
          "status": "removed",
          "additions": 0,
          "deletions": 314,
          "patch": "@@ -1,314 +0,0 @@\n-<?php\n-/**\n- * sysPass\n- *\n- * @author    nuxsmin\n- * @link      http://syspass.org\n- * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n- *\n- * This file is part of sysPass.\n- *\n- * sysPass is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation, either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * sysPass is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-\n-namespace SP\\Api;\n-\n-defined('APP_ROOT') || die();\n-\n-use SP\\Core\\Exceptions\\SPException;\n-use SP\\Core\\Session;\n-use SP\\Storage\\DB;\n-use SP\\Storage\\QueryData;\n-\n-/**\n- * Class ApiTokens para la gesti\u00f3n de autorizaciones de acceso a la API de sysPass\n- *\n- * @package SP\n- */\n-class ApiTokens\n-{\n-    /**\n-     * @var int\n-     */\n-    private $tokenId = 0;\n-    /**\n-     * @var int\n-     */\n-    private $userId = 0;\n-    /**\n-     * @var int\n-     */\n-    private $actionId = 0;\n-    /**\n-     * @var string\n-     */\n-    private $token = '';\n-    /**\n-     * @var bool\n-     */\n-    private $refreshToken = false;\n-\n-    /**\n-     * @param boolean $refreshToken\n-     */\n-    public function setRefreshToken($refreshToken)\n-    {\n-        $this->refreshToken = $refreshToken;\n-    }\n-\n-    /**\n-     * A\u00f1adir un nuevo token\n-     *\n-     * @throws SPException\n-     */\n-    public function addToken()\n-    {\n-        $this->checkTokenExist();\n-\n-        if ($this->refreshToken) {\n-            $this->refreshToken();\n-        }\n-\n-        $query = /** @lang SQL */\n-            'INSERT INTO authTokens \n-            SET authtoken_userId = :userid,\n-            authtoken_actionId = :actionid,\n-            authtoken_createdBy = :createdby,\n-            authtoken_token = :token,\n-            authtoken_startDate = UNIX_TIMESTAMP()';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->addParam($this->userId, 'userid');\n-        $Data->addParam($this->actionId, 'actionid');\n-        $Data->addParam(Session::getUserData()->getUserId(), 'createdby');\n-        $Data->addParam($this->getUserToken() ? $this->token : $this->generateToken(), 'token');\n-        $Data->setOnErrorMessage(__('Error interno', false));\n-\n-        DB::getQuery($Data);\n-    }\n-\n-    /**\n-     * Comprobar si el token ya existe\n-     *\n-     * @return bool\n-     * @throws SPException\n-     */\n-    private function checkTokenExist()\n-    {\n-        $query = /** @lang SQL */\n-            'SELECT authtoken_id FROM authTokens \n-            WHERE authtoken_userId = :userid \n-            AND authtoken_actionId = :actionid \n-            AND authtoken_id <> :id LIMIT 1';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->addParam($this->tokenId, 'id');\n-        $Data->addParam($this->userId, 'userid');\n-        $Data->addParam($this->actionId, 'actionid');\n-\n-        try {\n-            DB::getResults($Data);\n-        } catch (SPException $e) {\n-            throw new SPException(SPException::SP_CRITICAL, __('Error interno', false));\n-        }\n-\n-        if ($Data->getQueryNumRows() === 1) {\n-            throw new SPException(SPException::SP_WARNING, __('La autorizaci\u00f3n ya existe', false));\n-        }\n-    }\n-\n-    /**\n-     * Regenerar el hash de los tokens de un usuario\n-     *\n-     * @throws SPException\n-     */\n-    private function refreshToken()\n-    {\n-        $query = /** @lang SQL */\n-            'UPDATE authTokens SET \n-            authtoken_token = :token,\n-            authtoken_startDate = UNIX_TIMESTAMP() \n-            WHERE authtoken_userId = :userid';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->addParam($this->userId, 'userid');\n-        $Data->addParam($this->generateToken(), 'token');\n-        $Data->setOnErrorMessage(__('Error interno', false));\n-\n-        DB::getQuery($Data);\n-    }\n-\n-    /**\n-     * Generar un token de acceso\n-     *\n-     * @return string\n-     */\n-    private function generateToken()\n-    {\n-        return sha1(uniqid('sysPass-API', true) . time());\n-    }\n-\n-    /**\n-     * Obtener el token de la API de un usuario\n-     *\n-     * @return bool\n-     * @throws SPException\n-     */\n-    private function getUserToken()\n-    {\n-        $query = /** @lang SQL */\n-            'SELECT authtoken_token FROM authTokens WHERE authtoken_userId = :userid LIMIT 1';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->addParam($this->userId, 'userid');\n-\n-        try {\n-            $queryRes = DB::getResults($Data);\n-        } catch (SPException $e) {\n-            throw new SPException(SPException::SP_CRITICAL, __('Error interno', false));\n-        }\n-\n-        if ($Data->getQueryNumRows() === 0) {\n-            return false;\n-        }\n-\n-        $this->token = $queryRes->authtoken_token;\n-\n-        return true;\n-    }\n-\n-    /**\n-     * Actualizar un token\n-     *\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n-     */\n-    public function updateToken()\n-    {\n-        $this->checkTokenExist();\n-\n-        if ($this->refreshToken) {\n-            $this->refreshToken();\n-        }\n-\n-        $query = /** @lang SQL */\n-            'UPDATE authTokens \n-            SET authtoken_userId = :userid,\n-            authtoken_actionId = :actionid,\n-            authtoken_createdBy = :createdby,\n-            authtoken_token = :token,\n-            authtoken_startDate = UNIX_TIMESTAMP() \n-            WHERE authtoken_id = :id LIMIT 1';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->addParam($this->tokenId, 'id');\n-        $Data->addParam($this->userId, 'userid');\n-        $Data->addParam($this->actionId, 'actionid');\n-        $Data->addParam(Session::getUserData()->getUserId(), 'createdby');\n-        $Data->addParam($this->getUserToken() ? $this->token : $this->generateToken(), 'token');\n-        $Data->setOnErrorMessage(__('Error interno', false));\n-\n-        DB::getQuery($Data);\n-    }\n-\n-    /**\n-     * Eliminar token\n-     *\n-     * @param $id\n-     */\n-    public function deleteToken($id)\n-    {\n-        $query = /** @lang SQL */\n-            'DELETE FROM authTokens WHERE authtoken_id = ? LIMIT 1';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->addParam($id);\n-        $Data->setOnErrorMessage(__('Error interno', false));\n-\n-        DB::getQuery($Data);\n-    }\n-\n-\n-    /**\n-     * Eliminar token\n-     *\n-     * @param array $ids\n-     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n-     */\n-    public function deleteTokenBatch(array $ids)\n-    {\n-        $query = /** @lang SQL */\n-            'DELETE FROM authTokens WHERE authtoken_id IN (' . implode(',', array_fill(0, count($ids), '?')) . ')';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->setParams($ids);\n-        $Data->setOnErrorMessage(__('Error interno', false));\n-\n-        DB::getQuery($Data);\n-    }\n-\n-    /**\n-     * @return int\n-     */\n-    public function getUserId()\n-    {\n-        return $this->userId;\n-    }\n-\n-    /**\n-     * @param int $userId\n-     */\n-    public function setUserId($userId)\n-    {\n-        $this->userId = $userId;\n-    }\n-\n-    /**\n-     * @return int\n-     */\n-    public function getTokenId()\n-    {\n-        return $this->tokenId;\n-    }\n-\n-    /**\n-     * @param int $tokenId\n-     */\n-    public function setTokenId($tokenId)\n-    {\n-        $this->tokenId = $tokenId;\n-    }\n-\n-    /**\n-     * @return int\n-     */\n-    public function getActionId()\n-    {\n-        return $this->actionId;\n-    }\n-\n-    /**\n-     * @param int $actionId\n-     */\n-    public function setActionId($actionId)\n-    {\n-        $this->actionId = $actionId;\n-    }\n-}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Api/ApiTokensUtil.class.php",
          "status": "removed",
          "additions": 0,
          "deletions": 177,
          "patch": "@@ -1,177 +0,0 @@\n-<?php\n-/**\n- * sysPass\n- *\n- * @author nuxsmin\n- * @link http://syspass.org\n- * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n- *\n- * This file is part of sysPass.\n- *\n- * sysPass is free software: you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation, either version 3 of the License, or\n- * (at your option) any later version.\n- *\n- * sysPass is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n- */\n-\n-namespace SP\\Api;\n-\n-use SP\\Core\\Acl;\n-use SP\\Core\\ActionsInterface;\n-use SP\\Core\\Exceptions\\SPException;\n-use SP\\DataModel\\ItemSearchData;\n-use SP\\Storage\\DB;\n-use SP\\Storage\\QueryData;\n-\n-defined('APP_ROOT') || die();\n-\n-/**\n- * Class ApiTokensUtil con utilidades para la gesti\u00f3n de tokens API\n- *\n- * @package SP\\Api\n- */\n-class ApiTokensUtil\n-{\n-    /**\n-     * Obtener los tokens de la API\n-     *\n-     * @param int $tokenId opcional, con el Id del token a consultar\n-     * @param bool $returnRawData Devolver la consulta tal cual\n-     * @return array|object con la lista de tokens\n-     */\n-    public static function getTokens($tokenId = null, $returnRawData = false)\n-    {\n-        $query = 'SELECT authtoken_id,' .\n-            'authtoken_userId,' .\n-            'authtoken_actionId, ' .\n-            'authtoken_token, ' .\n-            'user_login ' .\n-            'FROM authTokens ' .\n-            'LEFT JOIN usrData ON user_id = authtoken_userId ';\n-\n-        $Data = new QueryData();\n-\n-        if (null !== $tokenId) {\n-            $query .= 'WHERE authtoken_id = ? LIMIT 1';\n-            $Data->addParam($tokenId);\n-        } else {\n-            $query .= 'ORDER BY user_login';\n-        }\n-\n-        $Data->setQuery($query);\n-\n-        if (!$returnRawData) {\n-            $queryRes = DB::getResultsArray($Data);\n-\n-            foreach ($queryRes as &$token) {\n-                $token->authtoken_actionId = Acl::getActionName($token->authtoken_actionId);\n-            }\n-        } else {\n-            $queryRes = DB::getResults($Data);\n-        }\n-\n-        return $queryRes;\n-    }\n-\n-    /**\n-     * Obtener los tokens de la API de una b\u00fasqueda\n-     * @param ItemSearchData $SearchData\n-     * @return array|object con la lista de tokens\n-     */\n-    public static function getTokensMgmtSearch(ItemSearchData $SearchData)\n-    {\n-        $query = 'SELECT authtoken_id,' .\n-            'authtoken_userId,' .\n-            'authtoken_actionId, ' .\n-            'authtoken_token, ' .\n-            'user_login ' .\n-            'FROM authTokens ' .\n-            'LEFT JOIN usrData ON user_id = authtoken_userId ';\n-\n-        $Data = new QueryData();\n-\n-        if ($SearchData->getSeachString() !== '') {\n-            $search = '%' . $SearchData->getSeachString() . '%';\n-            $query .= ' WHERE user_login LIKE ?';\n-\n-            $Data->addParam($search);\n-        }\n-\n-        $query .= ' ORDER BY user_login';\n-        $query .= ' LIMIT ?, ?';\n-\n-        $Data->addParam($SearchData->getLimitStart());\n-        $Data->addParam($SearchData->getLimitCount());\n-\n-        $Data->setQuery($query);\n-\n-        DB::setFullRowCount();\n-\n-        $queryRes = DB::getResultsArray($Data);\n-\n-        foreach ($queryRes as &$token) {\n-            $token->authtoken_actionId = Acl::getActionName($token->authtoken_actionId);\n-        }\n-\n-        $queryRes['count'] = $Data->getQueryNumRows();\n-\n-        return $queryRes;\n-    }\n-\n-    /**\n-     * Devuelver un array de acciones posibles para los tokens\n-     *\n-     * @return array\n-     */\n-    public static function getTokenActions()\n-    {\n-        $actions = [\n-            ActionsInterface::ACTION_ACC_SEARCH => Acl::getActionName(ActionsInterface::ACTION_ACC_SEARCH),\n-            ActionsInterface::ACTION_ACC_VIEW => Acl::getActionName(ActionsInterface::ACTION_ACC_VIEW),\n-            ActionsInterface::ACTION_ACC_VIEW_PASS => Acl::getActionName(ActionsInterface::ACTION_ACC_VIEW_PASS),\n-            ActionsInterface::ACTION_ACC_DELETE => Acl::getActionName(ActionsInterface::ACTION_ACC_DELETE),\n-            ActionsInterface::ACTION_ACC_NEW => Acl::getActionName(ActionsInterface::ACTION_ACC_NEW),\n-            ActionsInterface::ACTION_CFG_BACKUP => Acl::getActionName(ActionsInterface::ACTION_CFG_BACKUP),\n-            ActionsInterface::ACTION_MGM_CATEGORIES => Acl::getActionName(ActionsInterface::ACTION_MGM_CATEGORIES),\n-            ActionsInterface::ACTION_MGM_CUSTOMERS => Acl::getActionName(ActionsInterface::ACTION_MGM_CUSTOMERS)\n-        ];\n-\n-        return $actions;\n-    }\n-\n-    /**\n-     * Obtener el usuario a partir del token\n-     *\n-     * @param $token string El token de autorizaci\u00f3n\n-     * @return bool|mixed\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n-     */\n-    public static function getUserIdForToken($token)\n-    {\n-        $query = 'SELECT authtoken_userId FROM authTokens WHERE authtoken_token = ? LIMIT 1';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->addParam($token);\n-\n-        try {\n-            $queryRes = DB::getResults($Data);\n-        } catch (SPException $e) {\n-            throw new SPException(SPException::SP_CRITICAL, __('Error interno', false));\n-        }\n-\n-        if ($Data->getQueryNumRows() === 0) {\n-            return false;\n-        }\n-\n-        return $queryRes->authtoken_userId;\n-    }\n-}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Api/ApiUtil.class.php",
          "status": "added",
          "additions": 57,
          "deletions": 0,
          "patch": "@@ -0,0 +1,57 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author nuxsmin\n+ * @link http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Api;\n+\n+defined('APP_ROOT') || die();\n+\n+use SP\\Core\\Exceptions\\SPException;\n+use SP\\DataModel\\TrackData;\n+use SP\\Mgmt\\Tracks\\Track;\n+\n+/**\n+ * Class ApiUtil\n+ *\n+ * @package SP\\Api\n+ */\n+class ApiUtil\n+{\n+    /**\n+     * A\u00f1adir un seguimiento\n+     *\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    public static function addTracking()\n+    {\n+        try {\n+            $TrackData = new TrackData();\n+            $TrackData->setTrackSource('API');\n+            $TrackData->setTrackIp($_SERVER['REMOTE_ADDR']);\n+\n+            Track::getItem($TrackData)->add();\n+        } catch (SPException $e) {\n+            throw new SPException(SPException::SP_WARNING, __('Error interno', false), '', -32601);\n+        }\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Api/SyspassApi.class.php",
          "status": "modified",
          "additions": 29,
          "deletions": 11,
          "patch": "@@ -24,14 +24,15 @@\n \n namespace SP\\Api;\n \n+defined('APP_ROOT') || die();\n+\n use SP\\Account\\Account;\n use SP\\Account\\AccountAcl;\n use SP\\Account\\AccountSearch;\n use SP\\Account\\AccountUtil;\n-use SP\\Core\\Acl;\n use SP\\Core\\ActionsInterface;\n use SP\\Core\\Backup;\n-use SP\\Core\\Crypt;\n+use SP\\Core\\Crypt\\Crypt;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\DataModel\\AccountExtData;\n use SP\\DataModel\\CategoryData;\n@@ -42,8 +43,6 @@\n use SP\\Mgmt\\Customers\\Customer;\n use SP\\Mgmt\\Customers\\CustomerSearch;\n \n-defined('APP_ROOT') || die();\n-\n /**\n  * Class Api para la gesti\u00f3n de peticiones a la API de sysPass\n  *\n@@ -55,6 +54,9 @@ class SyspassApi extends ApiBase\n      * Devolver la clave de una cuenta\n      *\n      * @return string La cadena en formato JSON\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public function getAccountPassword()\n@@ -84,15 +86,18 @@ public function getAccountPassword()\n         $LogMessage->addDetails(__('Origen', false), 'API');\n         $this->Log->writeLog();\n \n+        $mPass = $this->getMPass();\n+        $securedKey = Crypt::unlockSecuredKey($AccountData->getAccountKey(), $mPass);\n+\n         $ret = [\n             'itemId' => $accountId,\n-            'pass' => Crypt::getDecrypt($AccountData->getAccountPass(), $AccountData->getAccountIV(), $this->mPass)\n+            'pass' => Crypt::decrypt($AccountData->getAccountPass(), $securedKey, $mPass)\n         ];\n \n         if ($this->getParam('details', false, 0)) {\n             // Para evitar los caracteres especiales\n             $AccountData->setAccountPass('');\n-            $AccountData->setAccountIV('');\n+            $AccountData->setAccountKey('');\n \n             $ret['details'] = $AccountData;\n         }\n@@ -152,6 +157,11 @@ public function getAccountData()\n      * A\u00f1adir una nueva cuenta\n      *\n      * @return string La cadena en formato JSON\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public function addAccount()\n@@ -172,7 +182,8 @@ public function addAccount()\n \n         $Account = new Account($AccountData);\n \n-        $Account->createAccount();\n+        $Account->setPasswordEncrypted($this->getMPass());\n+        $Account->createAccount(false);\n \n         $LogMessage = $this->Log->getLogMessage();\n         $LogMessage->setAction(__('Crear Cuenta', false));\n@@ -453,7 +464,7 @@ public function getActions()\n                 'id' => ActionsInterface::ACTION_ACC_VIEW_PASS,\n                 'help' => [\n                     'id' => __('Id de la cuenta'),\n-                    'userPass' => __('Clave del usuario asociado al token'),\n+                    'tokenPass' => __('Clave del token'),\n                     'details' => __('Devolver detalles en la respuesta')\n                 ]\n             ],\n@@ -469,8 +480,7 @@ public function getActions()\n             'getAccountData' => [\n                 'id' => ActionsInterface::ACTION_ACC_VIEW,\n                 'help' => [\n-                    'id' => __('Id de la cuenta'),\n-                    'userPass' => __('Clave del usuario asociado al token')\n+                    'id' => __('Id de la cuenta')\n                 ]\n             ],\n             'deleteAccount' => [\n@@ -482,7 +492,7 @@ public function getActions()\n             'addAccount' => [\n                 'id' => ActionsInterface::ACTION_ACC_NEW,\n                 'help' => [\n-                    'userPass' => __('Clave del usuario asociado al token'),\n+                    'tokenPass' => __('Clave del token'),\n                     'name' => __('Nombre de cuenta'),\n                     'categoryId' => __('Id de categor\u00eda'),\n                     'customerId' => __('Id de cliente'),\n@@ -538,4 +548,12 @@ public function getActions()\n             ]\n         ];\n     }\n+\n+    /**\n+     * @return bool\n+     */\n+    protected function passIsNeeded()\n+    {\n+        return $this->actionId === ActionsInterface::ACTION_ACC_VIEW_PASS;\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Auth/Auth.class.php",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -34,6 +34,7 @@\n use SP\\Config\\Config;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\DataModel\\UserData;\n+use SP\\DataModel\\UserLoginData;\n use SP\\Util\\Checks;\n \n defined('APP_ROOT') || die();\n@@ -52,17 +53,17 @@ class Auth\n      */\n     protected $auths = [];\n     /**\n-     * @var UserData\n+     * @var UserLoginData\n      */\n     protected $UserData;\n \n     /**\n      * Auth constructor.\n      *\n-     * @param UserData $UserData\n+     * @param UserLoginData $UserData\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n-    public function __construct(UserData $UserData)\n+    public function __construct(UserLoginData $UserData)\n     {\n         $this->UserData = $UserData;\n \n@@ -146,6 +147,8 @@ public function authLdap()\n      * se ejecuta el proceso para actualizar la clave.\n      *\n      * @return DatabaseAuthData\n+     * @throws \\phpmailer\\phpmailerException\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public function authDatabase()\n     {"
        },
        {
          "filename": "inc/SP/Auth/AuthInterface.class.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -24,7 +24,7 @@\n \n namespace SP\\Auth;\n \n-use SP\\DataModel\\UserData;\n+use SP\\DataModel\\UserLoginData;\n \n /**\n  * Interface AuthInterface\n@@ -35,8 +35,8 @@ interface AuthInterface\n     /**\n      * Autentificar al usuario\n      *\n-     * @param UserData $UserData Datos del usuario\n+     * @param UserLoginData $UserData Datos del usuario\n      * @return mixed|AuthDataBase\n      */\n-    public function authenticate(UserData $UserData);\n+    public function authenticate(UserLoginData $UserData);\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Auth/AuthUtil.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 28,
          "patch": "@@ -31,8 +31,6 @@\n use SP\\Html\\Html;\n use SP\\Log\\Email;\n use SP\\Mgmt\\Users\\UserPassRecover;\n-use SP\\Storage\\DB;\n-use SP\\Storage\\QueryData;\n use SP\\Util\\Util;\n \n /**\n@@ -79,32 +77,6 @@ public static function mailPassRecover(UserData $UserData)\n         return false;\n     }\n \n-    /**\n-     * Comprobar el token de seguridad\n-     *\n-     * @param $actionId int El id de la accion\n-     * @param $token    string El token de seguridad\n-     * @return bool\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n-     */\n-    public static function checkAuthToken($actionId, $token)\n-    {\n-        $query = /** @lang SQL */\n-            'SELECT authtoken_id\n-            FROM authTokens\n-            WHERE authtoken_actionId = ?\n-            AND authtoken_token = ? LIMIT 1';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->addParam($actionId);\n-        $Data->addParam($token);\n-\n-        DB::getQuery($Data);\n-\n-        return $Data->getQueryNumRows() === 1;\n-    }\n-\n     /**\n      * Devuelve el typo de autentificaci\u00f3n del servidor web\n      *"
        },
        {
          "filename": "inc/SP/Auth/Browser/Browser.class.php",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -25,7 +25,7 @@\n namespace SP\\Auth\\Browser;\n \n use SP\\Auth\\AuthInterface;\n-use SP\\DataModel\\UserData;\n+use SP\\DataModel\\UserLoginData;\n \n /**\n  * Class Browser\n@@ -39,13 +39,13 @@ class Browser implements AuthInterface\n     /**\n      * Autentificar al usuario\n      *\n-     * @param UserData $UserData Datos del usuario\n+     * @param UserLoginData $UserData Datos del usuario\n      * @return BrowserAuthData\n      */\n-    public function authenticate(UserData $UserData)\n+    public function authenticate(UserLoginData $UserData)\n     {\n         $AuthData = new BrowserAuthData();\n-        $AuthData->setAuthenticated($this->checkServerAuthUser($UserData->getUserLogin()));\n+        $AuthData->setAuthenticated($this->checkServerAuthUser($UserData->getLogin()));\n \n         return $AuthData;\n     }"
        },
        {
          "filename": "inc/SP/Auth/Database/Database.class.php",
          "status": "modified",
          "additions": 39,
          "deletions": 47,
          "patch": "@@ -2,8 +2,8 @@\n /**\n  * sysPass\n  *\n- * @author nuxsmin\n- * @link http://syspass.org\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n  * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n  *\n  * This file is part of sysPass.\n@@ -25,10 +25,12 @@\n namespace SP\\Auth\\Database;\n \n use SP\\Auth\\AuthInterface;\n+use SP\\Core\\Crypt\\Hash;\n use SP\\Core\\Exceptions\\SPException;\n-use SP\\DataModel\\UserData;\n+use SP\\DataModel\\UserLoginData;\n use SP\\DataModel\\UserPassData;\n use SP\\Log\\Log;\n+use SP\\Mgmt\\Users\\User;\n use SP\\Mgmt\\Users\\UserMigrate;\n use SP\\Storage\\DB;\n use SP\\Storage\\QueryData;\n@@ -43,67 +45,57 @@\n class Database implements AuthInterface\n {\n     /**\n-     * @var UserData $UserData\n+     * @var UserLoginData $UserData\n      */\n     protected $UserData;\n \n+    /**\n+     * Autentificar al usuario\n+     *\n+     * @param UserLoginData $UserData Datos del usuario\n+     * @return DatabaseAuthData\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     * @throws \\phpmailer\\phpmailerException\n+     */\n+    public function authenticate(UserLoginData $UserData)\n+    {\n+        $this->UserData = $UserData;\n+\n+        $AuthData = new DatabaseAuthData();\n+        $AuthData->setAuthenticated($this->authUser());\n+\n+        return $AuthData;\n+    }\n+\n     /**\n      * Autentificaci\u00f3n de usuarios con BD.\n      *\n      * Esta funci\u00f3n comprueba la clave del usuario. Si el usuario necesita ser migrado desde phpPMS,\n      * se ejecuta el proceso para actualizar la clave.\n      *\n      * @return bool\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     * @throws \\phpmailer\\phpmailerException\n      */\n     protected function authUser()\n     {\n-        if (UserMigrate::checkUserIsMigrate($this->UserData->getUserLogin())) {\n-            try {\n-                UserMigrate::migrateUser($this->UserData->getUserLogin(), $this->UserData->getUserPass());\n-            } catch (SPException $e) {\n-                $Log = new Log();\n-                $LogMessage = $Log->getLogMessage();\n-                $LogMessage->setAction(__FUNCTION__);\n-                $LogMessage->addDescription($e->getMessage());\n-                $LogMessage->addDetails(__('Login', false), $this->UserData->getUserLogin());\n-                $Log->writeLog();\n+        try {\n+            User::getItem($this->UserData)->getByLogin($this->UserData->getLogin());\n \n+            if ($this->UserData->isUserIsMigrate() && !UserMigrate::migrateUserPass($this->UserData)) {\n                 return false;\n             }\n-        }\n-\n-        $query = /** @lang SQL */\n-            'SELECT user_pass, user_hashSalt\n-            FROM usrData\n-            WHERE user_login = ? \n-            AND user_isMigrate = 0 LIMIT 1';\n \n-        $Data = new QueryData();\n-        $Data->setMapClassName(UserPassData::class);\n-        $Data->setQuery($query);\n-        $Data->addParam($this->UserData->getUserLogin());\n+            return Hash::checkHashKey($this->UserData->getLoginPass(), $this->UserData->getUserPass());\n+        } catch (SPException $e) {\n+            $Log = new Log();\n+            $LogMessage = $Log->getLogMessage();\n+            $LogMessage->setAction(__FUNCTION__);\n+            $LogMessage->addDescription($e->getMessage());\n+            $LogMessage->addDetails(__('Login', false), $this->UserData->getLogin());\n+            $Log->writeLog();\n \n-        /** @var UserPassData $queryRes */\n-        $queryRes = DB::getResults($Data);\n-\n-        return ($queryRes !== false\n-            && $Data->getQueryNumRows() === 1\n-            && $queryRes->getUserPass() === crypt($this->UserData->getUserPass(), $queryRes->getUserHashSalt()));\n-    }\n-\n-    /**\n-     * Autentificar al usuario\n-     *\n-     * @param UserData $UserData Datos del usuario\n-     * @return DatabaseAuthData\n-     */\n-    public function authenticate(UserData $UserData)\n-    {\n-        $this->UserData = $UserData;\n-\n-        $AuthData = new DatabaseAuthData();\n-        $AuthData->setAuthenticated($this->authUser());\n-\n-        return $AuthData;\n+            return false;\n+        }\n     }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Auth/Ldap/LdapBase.class.php",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -28,7 +28,7 @@\n use SP\\Config\\Config;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\Core\\Messages\\LogMessage;\n-use SP\\DataModel\\UserData;\n+use SP\\DataModel\\UserLoginData;\n use SP\\Log\\Log;\n \n /**\n@@ -405,22 +405,22 @@ public function setUserLogin($userLogin)\n     /**\n      * Autentificar al usuario\n      *\n-     * @param UserData $UserData Datos del usuario\n+     * @param UserLoginData $UserData Datos del usuario\n      * @return bool\n      */\n-    public function authenticate(UserData $UserData)\n+    public function authenticate(UserLoginData $UserData)\n     {\n         if (!$this->checkParams()) {\n             return false;\n         }\n \n         try {\n-            $this->setUserLogin($UserData->getUserLogin());\n+            $this->setUserLogin($UserData->getLogin());\n \n             $this->connect();\n             $this->bind();\n             $this->getAttributes();\n-            $this->bind($this->LdapAuthData->getDn(), $UserData->getUserPass());\n+            $this->bind($this->LdapAuthData->getDn(), $UserData->getLoginPass());\n         } catch (SPException $e) {\n             return false;\n         }\n@@ -511,7 +511,7 @@ public function getAttributes()\n             }\n         }\n \n-        if (!empty($res[\"fullname\"])) {\n+        if (!empty($res['fullname'])) {\n             $this->LdapAuthData->setName($res['fullname']);\n         } else {\n             $this->LdapAuthData->setName($res['name'] . ' ' . $res['sn']);"
        },
        {
          "filename": "inc/SP/Controller/AccountController.class.php",
          "status": "modified",
          "additions": 47,
          "deletions": 49,
          "patch": "@@ -34,12 +34,14 @@\n use SP\\Config\\Config;\n use SP\\Core\\Acl;\n use SP\\Core\\ActionsInterface;\n-use SP\\Core\\Crypt;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\OldCrypt;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\Core\\Init;\n use SP\\Core\\Session;\n use SP\\Core\\SessionUtil;\n use SP\\Core\\Template;\n+use SP\\DataModel\\AccountData;\n use SP\\DataModel\\AccountExtData;\n use SP\\DataModel\\CustomFieldData;\n use SP\\DataModel\\PublicLinkData;\n@@ -121,22 +123,12 @@ private function isGotData()\n      * Obtener la vista de detalles de cuenta para enlaces p\u00fablicos\n      *\n      * @param PublicLinkData $PublicLinkData\n-     * @return bool\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n-     * @throws \\SP\\Core\\Exceptions\\FileNotFoundException\n-     * @throws \\SP\\Core\\Exceptions\\QueryException\n-     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n      *\n      */\n     public function getAccountFromLink(PublicLinkData $PublicLinkData)\n     {\n         $this->setAction(self::ACTION_ACC_VIEW);\n \n-        // Obtener los datos de la cuenta antes y comprobar el acceso\n-        if (!$this->setAccountData()) {\n-            return false;\n-        }\n-\n         $this->view->addTemplate('account-link');\n         $this->view->assign('title',\n             [\n@@ -145,48 +137,27 @@ public function getAccountFromLink(PublicLinkData $PublicLinkData)\n                 'icon' => $this->icons->getIconView()->getIcon()\n             ]\n         );\n-        $this->Account->incrementViewCounter();\n-        $this->Account->incrementDecryptCounter();\n-        $AccountPassData = $this->Account->getAccountPassData();\n \n-        // Desencriptar la clave de la cuenta\n-        $pass = Crypt::generateAesKey($PublicLinkData->getLinkHash());\n-        $masterPass = Crypt::getDecrypt($PublicLinkData->getPass(), $PublicLinkData->getPassIV(), $pass);\n-        $accountPass = Crypt::getDecrypt($AccountPassData->getAccountPass(), $AccountPassData->getAccountIV(), $masterPass);\n+        try {\n+            $Account = new Account();\n+            $Account->incrementViewCounter($PublicLinkData->getItemId());\n+            $Account->incrementDecryptCounter($PublicLinkData->getItemId());\n \n-        $this->view->assign('useImage', Config::getConfig()->isPublinksImageEnabled() || Config::getConfig()->isAccountPassToImage());\n+            $key = Config::getConfig()->getPasswordSalt() . $PublicLinkData->getLinkHash();\n+            $securedKey = Crypt::unlockSecuredKey($PublicLinkData->getPassIV(), $key);\n \n-        if ($this->view->useImage) {\n-            $accountPass = ImageUtil::convertText($accountPass);\n-        }\n+            /** @var AccountExtData $AccountData */\n+            $AccountData = unserialize(Crypt::decrypt($PublicLinkData->getData(), $securedKey, $key));\n \n-        $this->view->assign('accountPass', $accountPass);\n-    }\n+            $this->view->assign('useImage', Config::getConfig()->isPublinksImageEnabled() || Config::getConfig()->isAccountPassToImage());\n \n-    /**\n-     * Establecer las variables que contienen la informaci\u00f3n de la cuenta.\n-     *\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n-     */\n-    private function setAccountData()\n-    {\n-        $Account = new Account(new AccountExtData($this->getId()));\n-        $this->Account = $Account;\n-        $this->AccountData = $Account->getData();\n-\n-        $this->view->assign('accountId', $this->getId());\n-        $this->view->assign('accountData', $this->AccountData);\n-        $this->view->assign('gotData', $this->isGotData());\n+            $accountPass = $this->view->useImage ? ImageUtil::convertText($AccountData->getAccountPass()) : $AccountData->getAccountPass();\n \n-        return true;\n-    }\n-\n-    /**\n-     * @return int\n-     */\n-    private function getId()\n-    {\n-        return $this->id;\n+            $this->view->assign('accountPass', $accountPass);\n+            $this->view->assign('accountData', $AccountData);\n+        } catch (\\Exception $e) {\n+            $this->showError(self::ERR_EXCEPTION);\n+        }\n     }\n \n     /**\n@@ -278,7 +249,7 @@ protected function checkAccess($action = null)\n         if (!Acl::checkUserAccess($this->getAction())) {\n             $this->showError(self::ERR_PAGE_NO_PERMISSION);\n             return false;\n-        } elseif (!UserPass::getItem($this->UserData)->checkUserUpdateMPass()) {\n+        } elseif (!UserPass::checkUserUpdateMPass($this->UserData->getUserId())) {\n             $this->showError(self::ERR_UPDATE_MPASS);\n             return false;\n         } elseif ($this->id > 0) {\n@@ -314,8 +285,9 @@ private function setCommonData()\n \n             $PublicLinkData = PublicLink::getItem()->getHashForItem($this->getId());\n \n-            $publicLinkUrl = (Checks::publicLinksIsEnabled() && $PublicLinkData ? Init::$WEBURI . '/index.php?h=' . $PublicLinkData->getPublicLinkHash() . '&a=link' : '');\n+            $publicLinkUrl = (Checks::publicLinksIsEnabled() && $PublicLinkData ? Init::$WEBURI . '/index.php?h=' . $PublicLinkData->getPublicLinkHash() . '&a=link' : null);\n             $this->view->assign('publicLinkUrl', $publicLinkUrl);\n+            $this->view->assign('publicLinkId', $PublicLinkData ? $PublicLinkData->getPublicLinkId() : 0);\n \n             $this->view->assign('accountPassDate', date('Y-m-d H:i:s', $this->AccountData->getAccountPassDate()));\n             $this->view->assign('accountPassDateChange', date('Y-m-d', $this->AccountData->getAccountPassDateChange() ?: 0));\n@@ -352,6 +324,14 @@ private function getCustomFieldsForItem()\n         $this->view->assign('customFields', CustomField::getItem(new CustomFieldData(ActionsInterface::ACTION_ACC))->getById($this->getId()));\n     }\n \n+    /**\n+     * @return int\n+     */\n+    private function getId()\n+    {\n+        return $this->id;\n+    }\n+\n     /**\n      * @return \\SP\\Account\\Account|AccountHistory\n      */\n@@ -388,6 +368,24 @@ public function getCopyAccount()\n         $this->setCommonData();\n     }\n \n+    /**\n+     * Establecer las variables que contienen la informaci\u00f3n de la cuenta.\n+     *\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    private function setAccountData()\n+    {\n+        $Account = new Account(new AccountExtData($this->getId()));\n+        $this->Account = $Account;\n+        $this->AccountData = $Account->getData();\n+\n+        $this->view->assign('accountId', $this->getId());\n+        $this->view->assign('accountData', $this->AccountData);\n+        $this->view->assign('gotData', $this->isGotData());\n+\n+        return true;\n+    }\n+\n     /**\n      * Obtener los datos para mostrar el interface para editar cuenta\n      *"
        },
        {
          "filename": "inc/SP/Controller/ConfigActionController.class.php",
          "status": "modified",
          "additions": 33,
          "deletions": 16,
          "patch": "@@ -24,22 +24,22 @@\n \n namespace SP\\Controller;\n \n-use SP\\Account\\Account;\n-use SP\\Account\\AccountHistory;\n+use SP\\Account\\AccountCrypt;\n+use SP\\Account\\AccountHistoryCrypt;\n use SP\\Config\\Config;\n use SP\\Config\\ConfigDB;\n use SP\\Core\\ActionsInterface;\n use SP\\Core\\Backup;\n-use SP\\Core\\Crypt;\n+use SP\\Core\\Crypt\\Hash;\n+use SP\\Core\\Crypt\\Session as CryptSession;\n use SP\\Core\\CryptMasterPass;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\Core\\Init;\n use SP\\Core\\Messages\\LogMessage;\n use SP\\Core\\Messages\\NoticeMessage;\n use SP\\Core\\Session;\n-use SP\\Core\\SessionUtil;\n+use SP\\Core\\Task;\n use SP\\Core\\XmlExport;\n-use SP\\Html\\Html;\n use SP\\Http\\Request;\n use SP\\Import\\Import;\n use SP\\Import\\ImportParams;\n@@ -421,7 +421,6 @@ protected function ldapAction()\n      */\n     protected function mailAction()\n     {\n-        $Log = Log::newLog(__('Modificar Configuraci\u00f3n', false));\n         $Config = Session::getConfig();\n \n         // Mail\n@@ -483,7 +482,7 @@ protected function masterPassAction()\n         $confirmPassChange = Request::analyze('confirmPassChange', 0, false, 1);\n         $noAccountPassChange = Request::analyze('chkNoAccountChange', 0, false, 1);\n \n-        if (!UserPass::getItem(Session::getUserData())->checkUserUpdateMPass()) {\n+        if (!UserPass::checkUserUpdateMPass(Session::getUserData()->getUserId())) {\n             $this->JsonResponse->setDescription(__('Clave maestra actualizada', false));\n             $this->JsonResponse->addMessage(__('Reinicie la sesi\u00f3n para cambiarla', false));\n             $this->JsonResponse->setStatus(100);\n@@ -502,7 +501,7 @@ protected function masterPassAction()\n         } elseif ($newMasterPass !== $newMasterPassR) {\n             $this->JsonResponse->setDescription(__('Las claves maestras no coinciden', false));\n             return;\n-        } elseif (!Crypt::checkHashPass($currentMasterPass, ConfigDB::getValue('masterPwd'), true)) {\n+        } elseif (!Hash::checkHashKey($currentMasterPass, ConfigDB::getValue('masterPwd'))) {\n             $this->JsonResponse->setDescription(__('La clave maestra actual no coincide', false));\n             return;\n         }\n@@ -512,8 +511,6 @@ protected function masterPassAction()\n             return;\n         }\n \n-        $hashMPass = Crypt::mkHashPassword($newMasterPass);\n-\n         if (!$noAccountPassChange) {\n             Util::lockApp();\n \n@@ -522,40 +519,53 @@ protected function masterPassAction()\n                 return;\n             }\n \n-            $Account = new Account();\n+            $Task = new Task(__FUNCTION__, Request::analyze('taskId'));\n+            $Task->register();\n+\n+            $Account = new AccountCrypt();\n \n-            if (!$Account->updateAccountsMasterPass($currentMasterPass, $newMasterPass)) {\n+            if (!$Account->updatePass($currentMasterPass, $newMasterPass, $Task)) {\n                 DB::rollbackTransaction();\n \n+                $Task->end();\n+\n                 $this->JsonResponse->setDescription(__('Errores al actualizar las claves de las cuentas', false));\n                 return;\n             }\n \n-            $AccountHistory = new AccountHistory();\n+            $AccountHistory = new AccountHistoryCrypt();\n \n-            if (!$AccountHistory->updateAccountsMasterPass($currentMasterPass, $newMasterPass, $hashMPass)) {\n+            if (!$AccountHistory->updatePass($currentMasterPass, $newMasterPass, $Task)) {\n                 DB::rollbackTransaction();\n \n+                $Task->end();\n+\n                 $this->JsonResponse->setDescription(__('Errores al actualizar las claves de las cuentas del hist\u00f3rico', false));\n                 return;\n             }\n \n             if (!CustomFieldsUtil::updateCustomFieldsCrypt($currentMasterPass, $newMasterPass)) {\n                 DB::rollbackTransaction();\n \n+                $Task->end();\n+\n                 $this->JsonResponse->setDescription(__('Errores al actualizar datos de campos personalizados', false));\n                 return;\n             }\n \n             if (!DB::endTransaction()) {\n+                $Task->end();\n+\n                 $this->JsonResponse->setDescription(__('No es posible finalizar una transacci\u00f3n', false));\n                 return;\n             }\n \n+            $Task->end();\n+\n             Util::unlockApp();\n         }\n \n-        ConfigDB::setCacheConfigValue('masterPwd', $hashMPass);\n+        ConfigDB::setCacheConfigValue('masterPwd', Hash::hashKey($newMasterPass));\n         ConfigDB::setCacheConfigValue('lastupdatempass', time());\n \n         $this->LogMessage->setAction(__('Actualizar Clave Maestra', false));\n@@ -574,6 +584,10 @@ protected function masterPassAction()\n \n     /**\n      * Regenerar el hash de la clave maestra\n+     *\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n      */\n     protected function masterPassRefreshAction()\n     {\n@@ -584,7 +598,7 @@ protected function masterPassRefreshAction()\n \n         $this->LogMessage->setAction(__('Actualizar Clave Maestra', false));\n \n-        if (ConfigDB::setValue('masterPwd', Crypt::mkHashPassword(SessionUtil::getSessionMPass()))) {\n+        if (ConfigDB::setValue('masterPwd', Hash::hashKey(CryptSession::getSessionKey()))) {\n             $this->LogMessage->addDescription(__('Hash de clave maestra actualizado', false));\n \n             $this->JsonResponse->setStatus(0);\n@@ -600,6 +614,9 @@ protected function masterPassRefreshAction()\n      *\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      * @throws \\phpmailer\\phpmailerException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n      */\n     protected function tempMasterPassAction()\n     {"
        },
        {
          "filename": "inc/SP/Controller/ConfigController.class.php",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -26,6 +26,7 @@\n \n defined('APP_ROOT') || die();\n \n+use SP\\Account\\AccountUtil;\n use SP\\Config\\Config;\n use SP\\Config\\ConfigData;\n use SP\\Config\\ConfigDB;\n@@ -37,6 +38,7 @@\n use SP\\Core\\Plugin\\PluginUtil;\n use SP\\Core\\Session;\n use SP\\Core\\SessionUtil;\n+use SP\\Core\\Task;\n use SP\\Core\\Template;\n use SP\\Mgmt\\Groups\\Group;\n use SP\\Mgmt\\Profiles\\Profile;\n@@ -312,6 +314,9 @@ protected function getEncryptionTab()\n \n         $this->view->addTemplate('encryption');\n \n+        $this->view->assign('numAccounts', AccountUtil::getTotalNumAccounts());\n+        $this->view->assign('taskId', Task::genTaskId('masterpass'));\n+\n         $this->view->assign('lastUpdateMPass', isset($this->configDB['lastupdatempass']) ? $this->configDB['lastupdatempass'] : 0);\n         $this->view->assign('tempMasterPassTime', isset($this->configDB['tempmaster_passtime']) ? $this->configDB['tempmaster_passtime'] : 0);\n         $this->view->assign('tempMasterMaxTime', isset($this->configDB['tempmaster_maxtime']) ? $this->configDB['tempmaster_maxtime'] : 0);"
        },
        {
          "filename": "inc/SP/Controller/ItemActionController.class.php",
          "status": "modified",
          "additions": 76,
          "deletions": 63,
          "patch": "@@ -29,11 +29,9 @@\n use SP\\Account\\AccountHistory;\n use SP\\Account\\AccountHistoryUtil;\n use SP\\Account\\AccountUtil;\n-use SP\\Api\\ApiTokens;\n use SP\\Auth\\AuthUtil;\n use SP\\Core\\ActionsInterface;\n use SP\\Core\\Messages\\LogMessage;\n-use SP\\Core\\Messages\\NoticeMessage;\n use SP\\Core\\Session;\n use SP\\DataModel\\CustomFieldData;\n use SP\\DataModel\\NoticeData;\n@@ -52,6 +50,7 @@\n use SP\\Http\\Request;\n use SP\\Log\\Email;\n use SP\\Log\\Log;\n+use SP\\Mgmt\\ApiTokens\\ApiToken;\n use SP\\Mgmt\\Categories\\Category;\n use SP\\Mgmt\\Customers\\Customer;\n use SP\\Mgmt\\CustomFields\\CustomField;\n@@ -212,6 +211,7 @@ public function doAction()\n      * @throws \\SP\\Core\\Exceptions\\ValidationException\n      * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      * @throws \\phpmailer\\phpmailerException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n      */\n     protected function userAction()\n     {\n@@ -299,7 +299,6 @@ protected function setCustomFieldData($moduleId)\n     /**\n      * Guardar los datos de los campos personalizados del m\u00f3dulo\n      *\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     protected function addCustomFieldData()\n@@ -314,7 +313,6 @@ protected function addCustomFieldData()\n     /**\n      * Actualizar los datos de los campos personalizados del m\u00f3dulo\n      *\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     protected function updateCustomFieldData()\n@@ -595,37 +593,48 @@ protected function categoryAction()\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      * @throws \\phpmailer\\phpmailerException\n      * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n      */\n     protected function tokenAction()\n     {\n         $Form = new ApiTokenForm($this->itemId);\n \n+        $refresh = Request::analyze('refreshtoken', false, false, true);\n+\n         switch ($this->actionId) {\n             case ActionsInterface::ACTION_MGM_APITOKENS_NEW:\n                 $Form->validate($this->actionId);\n-                $Form->getItemData()->addToken();\n+\n+                if ($refresh === true) {\n+                    ApiToken::getItem($Form->getItemData())->refreshToken()->add();\n+                } else {\n+                    ApiToken::getItem($Form->getItemData())->add();\n+                }\n \n                 $this->LogMessage->setAction(__('Crear Autorizaci\u00f3n', false));\n                 $this->LogMessage->addDescription(__('Autorizaci\u00f3n creada', false));\n-                $this->LogMessage->addDetails(__('Usuario', false), UserUtil::getUserLoginById($Form->getItemData()->getUserId()));\n+                $this->LogMessage->addDetails(__('Usuario', false), UserUtil::getUserLoginById($Form->getItemData()->getAuthtokenUserId()));\n                 break;\n             case ActionsInterface::ACTION_MGM_APITOKENS_EDIT:\n                 $Form->validate($this->actionId);\n-                $Form->getItemData()->updateToken();\n+\n+                if ($refresh === true) {\n+                    ApiToken::getItem($Form->getItemData())->refreshToken()->update();\n+                } else {\n+                    ApiToken::getItem($Form->getItemData())->update();\n+                }\n \n                 $this->LogMessage->setAction(__('Actualizar Autorizaci\u00f3n', false));\n                 $this->LogMessage->addDescription(__('Autorizaci\u00f3n actualizada', false));\n-                $this->LogMessage->addDetails(__('Usuario', false), UserUtil::getUserLoginById($Form->getItemData()->getUserId()));\n+                $this->LogMessage->addDetails(__('Usuario', false), UserUtil::getUserLoginById($Form->getItemData()->getAuthtokenUserId()));\n                 break;\n             case ActionsInterface::ACTION_MGM_APITOKENS_DELETE:\n-                $ApiToken = new ApiTokens();\n-\n                 if (is_array($this->itemId)) {\n-                    $ApiToken->deleteTokenBatch($this->itemId);\n+                    ApiToken::getItem()->deleteBatch($this->itemId);\n \n                     $this->LogMessage->addDescription(__('Autorizaciones eliminadas', false));\n                 } else {\n-                    $ApiToken->deleteToken($this->itemId);\n+                    ApiToken::getItem()->delete($this->itemId);\n \n                     $this->LogMessage->addDescription(__('Autorizaci\u00f3n eliminada', false));\n                 }\n@@ -694,6 +703,9 @@ protected function customFieldAction()\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      * @throws \\phpmailer\\phpmailerException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n      */\n     protected function publicLinkAction()\n     {\n@@ -884,6 +896,8 @@ protected function pluginAction()\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      * @throws \\phpmailer\\phpmailerException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n      */\n     protected function accountAction()\n     {\n@@ -972,6 +986,56 @@ protected function accountAction()\n         $this->JsonResponse->setStatus(0);\n     }\n \n+    /**\n+     * Acci\u00f3n para eliminar una cuenta del historial\n+     *\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    protected function accountHistoryAction()\n+    {\n+        $Account = new AccountHistory();\n+\n+        switch ($this->actionId) {\n+            case ActionsInterface::ACTION_MGM_ACCOUNTS_EDIT_RESTORE:\n+                AccountHistoryUtil::restoreFromHistory($this->itemId, Request::analyze('accountId', 0));\n+\n+                $this->LogMessage->setAction(__('Restaurar Cuenta', false));\n+                $this->LogMessage->addDescription(__('Cuenta restaurada', false));\n+                $this->LogMessage->addDetails(__('Nombre', false), AccountUtil::getAccountNameById($this->itemId));\n+\n+                $this->JsonResponse->setData(['itemId' => $this->itemId, 'nextActionId' => ActionsInterface::ACTION_ACC_VIEW]);\n+                break;\n+            case ActionsInterface::ACTION_MGM_ACCOUNTS_DELETE_HISTORY:\n+                if (is_array($this->itemId)) {\n+                    $accounts = AccountHistoryUtil::getAccountNameByIdBatch($this->itemId);\n+                    $numAccounts = count($accounts);\n+                } else {\n+                    $accounts = AccountHistoryUtil::getAccountNameById($this->itemId);\n+                    $numAccounts = 1;\n+                }\n+\n+                $Account->deleteAccount($this->itemId);\n+\n+                $this->LogMessage->setAction(__('Eliminar Cuenta (H)', false));\n+\n+                if ($numAccounts > 1) {\n+                    $this->LogMessage->addDescription(__('Cuentas eliminadas', false));\n+\n+                    foreach ($accounts as $account) {\n+                        $this->LogMessage->addDetails(__('Nombre', false), $account->acchistory_name);\n+                    }\n+                } elseif ($numAccounts === 1) {\n+                    $this->LogMessage->addDescription(__('Cuenta eliminada', false));\n+                    $this->LogMessage->addDetails(__('Nombre', false), $accounts->acchistory_name);\n+                }\n+                break;\n+        }\n+\n+        Email::sendEmail($this->LogMessage);\n+\n+        $this->JsonResponse->setStatus(0);\n+    }\n+\n     /**\n      * Acciones sobre cuentas favoritas\n      *\n@@ -1127,58 +1191,7 @@ protected function requestAccountAction()\n             Notice::getItem($NoticeData)->add();\n         }\n \n-\n         $this->LogMessage->addDescription(__('Solicitud realizada', false));\n         $this->JsonResponse->setStatus(0);\n     }\n-\n-    /**\n-     * Acci\u00f3n para eliminar una cuenta del historial\n-     *\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n-     */\n-    protected function accountHistoryAction()\n-    {\n-        $Account = new AccountHistory();\n-\n-        switch ($this->actionId) {\n-            case ActionsInterface::ACTION_MGM_ACCOUNTS_EDIT_RESTORE:\n-                AccountHistoryUtil::restoreFromHistory($this->itemId, Request::analyze('accountId', 0));\n-\n-                $this->LogMessage->setAction(__('Restaurar Cuenta', false));\n-                $this->LogMessage->addDescription(__('Cuenta restaurada', false));\n-                $this->LogMessage->addDetails(__('Nombre', false), AccountUtil::getAccountNameById($this->itemId));\n-\n-                $this->JsonResponse->setData(['itemId' => $this->itemId, 'nextActionId' => ActionsInterface::ACTION_ACC_VIEW]);\n-                break;\n-            case ActionsInterface::ACTION_MGM_ACCOUNTS_DELETE_HISTORY:\n-                if (is_array($this->itemId)) {\n-                    $accounts = AccountHistoryUtil::getAccountNameByIdBatch($this->itemId);\n-                    $numAccounts = count($accounts);\n-                } else {\n-                    $accounts = AccountHistoryUtil::getAccountNameById($this->itemId);\n-                    $numAccounts = 1;\n-                }\n-\n-                $Account->deleteAccount($this->itemId);\n-\n-                $this->LogMessage->setAction(__('Eliminar Cuenta (H)', false));\n-\n-                if ($numAccounts > 1) {\n-                    $this->LogMessage->addDescription(__('Cuentas eliminadas', false));\n-\n-                    foreach ($accounts as $account) {\n-                        $this->LogMessage->addDetails(__('Nombre', false), $account->acchistory_name);\n-                    }\n-                } elseif ($numAccounts === 1) {\n-                    $this->LogMessage->addDescription(__('Cuenta eliminada', false));\n-                    $this->LogMessage->addDetails(__('Nombre', false), $accounts->acchistory_name);\n-                }\n-                break;\n-        }\n-\n-        Email::sendEmail($this->LogMessage);\n-\n-        $this->JsonResponse->setStatus(0);\n-    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Controller/ItemListController.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -28,14 +28,14 @@\n \n use SP\\Account\\AccountHistoryUtil;\n use SP\\Account\\AccountUtil;\n-use SP\\Api\\ApiTokensUtil;\n use SP\\Config\\Config;\n use SP\\Controller\\Grids\\Items;\n use SP\\Core\\ActionsInterface;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\Core\\Template;\n use SP\\DataModel\\ItemSearchData;\n use SP\\Http\\Request;\n+use SP\\Mgmt\\ApiTokens\\ApiTokenSearch;\n use SP\\Mgmt\\Categories\\CategorySearch;\n use SP\\Mgmt\\Customers\\CustomerSearch;\n use SP\\Mgmt\\CustomFields\\CustomFieldDefSearch;\n@@ -377,7 +377,7 @@ public function getAPITokensList()\n         }\n \n         $Grid = $this->getGrids()->getTokensGrid();\n-        $Grid->getData()->setData(ApiTokensUtil::getTokensMgmtSearch($this->ItemSearchData));\n+        $Grid->getData()->setData(ApiTokenSearch::getItem()->getMgmtSearch($this->ItemSearchData));\n         $Grid->updatePager();\n \n         $this->view->append('tabs', $Grid);"
        },
        {
          "filename": "inc/SP/Controller/ItemSearchController.class.php",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -28,14 +28,14 @@\n \n use SP\\Account\\AccountHistoryUtil;\n use SP\\Account\\AccountUtil;\n-use SP\\Api\\ApiTokensUtil;\n use SP\\Config\\Config;\n use SP\\Controller\\Grids\\Items;\n use SP\\Core\\ActionsInterface;\n use SP\\Core\\SessionUtil;\n use SP\\Core\\Template;\n use SP\\DataModel\\ItemSearchData;\n use SP\\Http\\Request;\n+use SP\\Mgmt\\ApiTokens\\ApiTokenSearch;\n use SP\\Mgmt\\Categories\\CategorySearch;\n use SP\\Mgmt\\Customers\\CustomerSearch;\n use SP\\Mgmt\\CustomFields\\CustomFieldDefSearch;\n@@ -248,6 +248,7 @@ public function getProfiles()\n      * Obtener los tokens API de una b\u00fasqueda\n      *\n      * @throws \\InvalidArgumentException\n+     * @throws \\SP\\Core\\Exceptions\\InvalidArgumentException\n      */\n     public function getTokens()\n     {\n@@ -260,7 +261,7 @@ public function getTokens()\n         $this->view->addTemplate('datagrid-table', 'grid');\n \n         $Grid = $this->getGrids()->getTokensGrid();\n-        $Grid->getData()->setData(ApiTokensUtil::getTokensMgmtSearch($this->ItemSearchData));\n+        $Grid->getData()->setData(ApiTokenSearch::getItem()->getMgmtSearch($this->ItemSearchData));\n         $Grid->updatePager();\n \n         $this->updatePager($Grid->getPager(), $this->ItemSearchData);"
        },
        {
          "filename": "inc/SP/Controller/ItemShowController.class.php",
          "status": "modified",
          "additions": 18,
          "deletions": 13,
          "patch": "@@ -29,15 +29,17 @@\n use SP\\Account\\Account;\n use SP\\Account\\AccountAcl;\n use SP\\Account\\AccountHistory;\n-use SP\\Api\\ApiTokensUtil;\n+use SP\\Mgmt\\ApiTokens\\ApiTokensUtil;\n use SP\\Core\\ActionsInterface;\n-use SP\\Core\\Crypt;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\Crypt\\Session as CryptSession;\n use SP\\Core\\Exceptions\\ItemException;\n use SP\\Core\\Plugin\\PluginUtil;\n use SP\\Core\\Session;\n use SP\\Core\\SessionUtil;\n use SP\\Core\\Template;\n use SP\\DataModel\\AccountExtData;\n+use SP\\DataModel\\ApiTokenData;\n use SP\\DataModel\\CategoryData;\n use SP\\DataModel\\CustomerData;\n use SP\\DataModel\\CustomFieldData;\n@@ -46,10 +48,10 @@\n use SP\\DataModel\\ProfileData;\n use SP\\DataModel\\TagData;\n use SP\\DataModel\\UserData;\n-use SP\\DataModel\\UserPassData;\n use SP\\Http\\Request;\n use SP\\Log\\Email;\n use SP\\Log\\Log;\n+use SP\\Mgmt\\ApiTokens\\ApiToken;\n use SP\\Mgmt\\Categories\\Category;\n use SP\\Mgmt\\Customers\\Customer;\n use SP\\Mgmt\\CustomFields\\CustomField;\n@@ -65,10 +67,10 @@\n use SP\\Mgmt\\Tags\\Tag;\n use SP\\Mgmt\\Users\\User;\n use SP\\Mgmt\\Users\\UserPass;\n+use SP\\Mgmt\\Users\\UserUtil;\n use SP\\Util\\Checks;\n use SP\\Util\\ImageUtil;\n use SP\\Util\\Json;\n-use SP\\Util\\Util;\n \n /**\n  * Class AccItemMgmt\n@@ -391,18 +393,19 @@ protected function getToken()\n         $this->module = self::ACTION_MGM_APITOKENS;\n         $this->view->addTemplate('tokens');\n \n-        $token = ApiTokensUtil::getTokens($this->itemId, true);\n+        $ApiTokenData = $this->itemId ? ApiToken::getItem()->getById($this->itemId) : new ApiTokenData();\n \n         $this->view->assign('users', User::getItem()->getItemsForSelect());\n         $this->view->assign('actions', ApiTokensUtil::getTokenActions());\n-        $this->view->assign('token', $token);\n-        $this->view->assign('gotData', is_object($token));\n+        $this->view->assign('ApiTokenData', $ApiTokenData);\n+        $this->view->assign('isDisabled', ($this->view->actionId === self::ACTION_MGM_APITOKENS_VIEW) ? 'disabled' : '');\n+        $this->view->assign('isReadonly', $this->view->isDisabled ? 'readonly' : '');\n \n         if ($this->view->isView === true) {\n             $Log = Log::newLog(__('Autorizaciones', false));\n             $LogMessage = $Log->getLogMessage();\n             $LogMessage->addDescription(__('Token de autorizaci\u00f3n visualizado'));\n-            $LogMessage->addDetails(__('Usuario'), $token->user_login);\n+            $LogMessage->addDetails(__('Usuario'), UserUtil::getUserLoginById($ApiTokenData->authtoken_userId));\n             $Log->writeLog();\n \n             Email::sendEmail($LogMessage);\n@@ -477,6 +480,9 @@ protected function getTag()\n      * @throws \\SP\\Core\\Exceptions\\ConstraintException\n      * @throws \\SP\\Core\\Exceptions\\QueryException\n      * @throws \\SP\\Core\\Exceptions\\FileNotFoundException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n      */\n     public function getAccountPass()\n     {\n@@ -504,16 +510,15 @@ public function getAccountPass()\n         $AccountAcl = new AccountAcl($Account, ActionsInterface::ACTION_ACC_VIEW_PASS);\n         $Acl = $AccountAcl->getAcl();\n \n-        $UserPass = new UserPass(new UserPassData());\n-        $UserPass->getItemData()->setUserId(Session::getUserData()->getUserId());\n-\n         if (!$Acl->isShowViewPass()) {\n             throw new ItemException(__('No tiene permisos para acceder a esta cuenta', false));\n-        } elseif (!$UserPass->checkUserUpdateMPass()) {\n+        } elseif (!UserPass::checkUserUpdateMPass(Session::getUserData()->getUserId())) {\n             throw new ItemException(__('Clave maestra actualizada', false) . '<br>' . __('Reinicie la sesi\u00f3n para cambiarla', false));\n         }\n \n-        $accountClearPass = Crypt::getDecrypt($AccountData->getAccountPass(), $AccountData->getAccountIV());\n+        $key = CryptSession::getSessionKey();\n+        $securedKey = Crypt::unlockSecuredKey($AccountData->getAccountKey(), $key);\n+        $accountClearPass = Crypt::decrypt($AccountData->getAccountPass(), $securedKey, $key);\n \n         if (!$isHistory) {\n             $Account->incrementDecryptCounter();"
        },
        {
          "filename": "inc/SP/Controller/LoginController.class.php",
          "status": "modified",
          "additions": 200,
          "deletions": 94,
          "patch": "@@ -2,8 +2,8 @@\n /**\n  * sysPass\n  *\n- * @author nuxsmin\n- * @link http://syspass.org\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n  * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n  *\n  * This file is part of sysPass.\n@@ -24,6 +24,10 @@\n \n namespace SP\\Controller;\n \n+defined('APP_ROOT') || die();\n+\n+use Defuse\\Crypto\\Exception\\BadFormatException;\n+use Defuse\\Crypto\\Exception\\CryptoException;\n use SP\\Auth\\Auth;\n use SP\\Auth\\AuthResult;\n use SP\\Auth\\AuthUtil;\n@@ -39,14 +43,15 @@\n use SP\\Core\\Messages\\LogMessage;\n use SP\\Core\\Session;\n use SP\\Core\\SessionUtil;\n-use SP\\DataModel\\UserData;\n+use SP\\DataModel\\TrackData;\n+use SP\\DataModel\\UserLoginData;\n use SP\\DataModel\\UserPassRecoverData;\n use SP\\Http\\JsonResponse;\n use SP\\Http\\Request;\n use SP\\Log\\Log;\n use SP\\Mgmt\\Groups\\Group;\n use SP\\Mgmt\\Profiles\\Profile;\n-use SP\\Mgmt\\Users\\User;\n+use SP\\Mgmt\\Tracks\\Track;\n use SP\\Mgmt\\Users\\UserLdap;\n use SP\\Mgmt\\Users\\UserPass;\n use SP\\Mgmt\\Users\\UserPassRecover;\n@@ -63,18 +68,27 @@\n  */\n class LoginController\n {\n+    /**\n+     * Estados\n+     */\n     const STATUS_INVALID_LOGIN = 1;\n     const STATUS_INVALID_MASTER_PASS = 2;\n     const STATUS_USER_DISABLED = 3;\n     const STATUS_INTERNAL_ERROR = 4;\n     const STATUS_NEED_OLD_PASS = 5;\n+    const STATUS_MAX_ATTEMPTS_EXCEEDED = 6;\n+    /**\n+     * Tiempo para contador de intentos\n+     */\n+    const TIME_TRACKING = 600;\n+    const TIME_TRACKING_MAX_ATTEMPTS = 5;\n \n     /**\n      * @var JsonResponse\n      */\n     protected $jsonResponse;\n     /**\n-     * @var UserData\n+     * @var UserLoginData\n      */\n     protected $UserData;\n     /**\n@@ -88,7 +102,7 @@ class LoginController\n     public function __construct()\n     {\n         $this->jsonResponse = new JsonResponse();\n-        $this->UserData = new UserData();\n+        $this->UserData = new UserLoginData();\n         $this->LogMessage = new LogMessage();\n         $this->LogMessage->setAction(__('Inicio sesi\u00f3n', false));\n     }\n@@ -110,12 +124,14 @@ public function doLogin()\n             Json::returnJson($this->jsonResponse);\n         }\n \n-        $this->UserData->setUserLogin($userLogin);\n-        $this->UserData->setUserPass($userPass);\n+        $this->UserData->setLogin($userLogin);\n+        $this->UserData->setLoginPass($userPass);\n \n         $Log = new Log($this->LogMessage);\n \n         try {\n+            $this->checkTracking();\n+\n             $Auth = new Auth($this->UserData);\n             $result = $Auth->doAuth();\n \n@@ -129,14 +145,17 @@ public function doLogin()\n                     }\n                 }\n             } else {\n+                $this->addTracking();\n+\n                 throw new AuthException(SPException::SP_INFO, __('Login incorrecto', false), '', self::STATUS_INVALID_LOGIN);\n             }\n \n-            $this->getUserData($userPass);\n-            $this->checkUserDisabled();\n-            $this->checkPasswordChange();\n+            $this->getUserData();\n+            $this->checkUser();\n+            $this->loadMasterPass();\n             $this->setUserSession();\n             $this->loadUserPreferences();\n+            $this->cleanUserData();\n         } catch (SPException $e) {\n             $Log->setLogLevel(Log::ERROR);\n             $Log->writeLog();\n@@ -161,20 +180,65 @@ public function doLogin()\n         Json::returnJson($this->jsonResponse);\n     }\n \n+    /**\n+     * Comprobar los intentos de login\n+     *\n+     * @throws \\SP\\Core\\Exceptions\\AuthException\n+     */\n+    private function checkTracking()\n+    {\n+        try {\n+            $TrackData = new TrackData();\n+            $TrackData->setTrackSource('Login');\n+            $TrackData->setTrackIp($_SERVER['REMOTE_ADDR']);\n+\n+            $attempts = count(Track::getItem($TrackData)->getTracksForClientFromTime(time() - self::TIME_TRACKING));\n+        } catch (SPException $e) {\n+            $this->LogMessage->addDescription($e->getMessage());\n+\n+            throw new AuthException(SPException::SP_ERROR, __('Error interno', false), '', self::STATUS_INTERNAL_ERROR);\n+        }\n+\n+        if ($attempts >= self::TIME_TRACKING_MAX_ATTEMPTS) {\n+            $this->addTracking();\n+\n+            sleep(0.3 * $attempts);\n+\n+            $this->LogMessage->addDescription(sprintf(__('Intentos excedidos (%d/%d)'), $attempts, self::TIME_TRACKING_MAX_ATTEMPTS));\n+\n+            throw new AuthException(SPException::SP_INFO, __('Intentos excedidos', false), '', self::STATUS_MAX_ATTEMPTS_EXCEEDED);\n+        }\n+    }\n+\n+    /**\n+     * A\u00f1adir un seguimiento\n+     *\n+     * @throws \\SP\\Core\\Exceptions\\AuthException\n+     */\n+    private function addTracking()\n+    {\n+        try {\n+            $TrackData = new TrackData();\n+            $TrackData->setTrackSource('Login');\n+            $TrackData->setTrackIp($_SERVER['REMOTE_ADDR']);\n+\n+            Track::getItem($TrackData)->add();\n+        } catch (SPException $e) {\n+            throw new AuthException(SPException::SP_ERROR, __('Error interno', false), '', self::STATUS_INTERNAL_ERROR);\n+        }\n+    }\n+\n     /**\n      * Obtener los datos del usuario\n      *\n-     * @param $userPass\n      * @throws SPException\n      * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      * @throws \\SP\\Core\\Exceptions\\AuthException\n      * @throws \\InvalidArgumentException\n      */\n-    protected function getUserData($userPass)\n+    protected function getUserData()\n     {\n         try {\n-            $this->UserData = User::getItem($this->UserData)->getByLogin($this->UserData->getUserLogin());\n-            $this->UserData->setUserPass($userPass);\n             $this->UserData->setUserPreferences(UserPreferences::getItem()->getById($this->UserData->getUserId()));\n         } catch (SPException $e) {\n             $this->LogMessage->addDescription(__('Error al obtener los datos del usuario de la BBDD', false));\n@@ -184,33 +248,21 @@ protected function getUserData($userPass)\n     }\n \n     /**\n-     * omprobar si el usuario est\u00e1 deshabilitado\n+     * Comprobar estado del usuario\n      *\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n-    protected function checkUserDisabled()\n+    protected function checkUser()\n     {\n         // Comprobar si el usuario est\u00e1 deshabilitado\n         if ($this->UserData->isUserIsDisabled()) {\n             $this->LogMessage->addDescription(__('Usuario deshabilitado', false));\n-            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getUserLogin());\n+            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getLogin());\n \n-            throw new AuthException(SPException::SP_INFO, __('Usuario deshabilitado', false), '', self::STATUS_USER_DISABLED);\n-        }\n-\n-        return false;\n-    }\n+            $this->addTracking();\n \n-    /**\n-     * Comprobar si se ha forzado un cambio de clave\n-     *\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n-     */\n-    protected function checkPasswordChange()\n-    {\n-        // Comprobar si se ha forzado un cambio de clave\n-        if ($this->UserData->isUserIsChangePass()) {\n+            throw new AuthException(SPException::SP_INFO, __('Usuario deshabilitado', false), '', self::STATUS_USER_DISABLED);\n+        } elseif ($this->UserData->isUserIsChangePass()) {\n             $hash = Util::generateRandomBytes();\n \n             $UserPassRecoverData = new UserPassRecoverData();\n@@ -229,27 +281,90 @@ protected function checkPasswordChange()\n     }\n \n     /**\n-     * Cargar la sesi\u00f3n del usuario\n+     * Cargar la clave maestra o solicitarla\n      *\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      * @throws \\SP\\Core\\Exceptions\\AuthException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     */\n+    protected function loadMasterPass()\n+    {\n+        $masterPass = Request::analyzeEncrypted('mpass');\n+        $oldPass = Request::analyzeEncrypted('oldpass');\n+\n+        try {\n+            if ($masterPass) {\n+                if (CryptMasterPass::checkTempMasterPass($masterPass)) {\n+                    $this->LogMessage->addDescription(__('Usando clave temporal', false));\n+\n+                    $masterPass = CryptMasterPass::getTempMasterPass($masterPass);\n+                }\n+\n+                if (!UserPass::updateUserMPass($masterPass, $this->UserData)) {\n+                    $this->LogMessage->addDescription(__('Clave maestra incorrecta', false));\n+\n+                    $this->addTracking();\n+\n+                    throw new AuthException(SPException::SP_INFO, __('Clave maestra incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);\n+                } else {\n+                    $this->LogMessage->addDescription(__('Clave maestra actualizada', false));\n+                }\n+            } else if ($oldPass) {\n+                if (!UserPass::updateMasterPassFromOldPass($oldPass, $this->UserData)) {\n+                    $this->LogMessage->addDescription(__('Clave maestra incorrecta', false));\n+\n+                    $this->addTracking();\n+\n+                    throw new AuthException(SPException::SP_INFO, __('Clave maestra incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);\n+                } else {\n+                    $this->LogMessage->addDescription(__('Clave maestra actualizada', false));\n+                }\n+            } else {\n+                switch (UserPass::loadUserMPass($this->UserData)) {\n+                    case UserPass::MPASS_CHECKOLD:\n+                        throw new AuthException(SPException::SP_INFO, __('Es necesaria su clave anterior', false), '', self::STATUS_NEED_OLD_PASS);\n+                        break;\n+                    case UserPass::MPASS_NOTSET:\n+                    case UserPass::MPASS_CHANGED:\n+                    case UserPass::MPASS_WRONG:\n+                        $this->addTracking();\n+\n+                        throw new AuthException(SPException::SP_INFO, __('La clave maestra no ha sido guardada o es incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);\n+                        break;\n+                }\n+            }\n+        } catch (BadFormatException $e) {\n+            $this->LogMessage->addDescription(__('Clave maestra incorrecta', false));\n+\n+            throw new AuthException(SPException::SP_INFO, __('Clave maestra incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);\n+        } catch (CryptoException $e) {\n+            $this->LogMessage->addDescription(__('Error interno', false));\n+\n+            throw new AuthException(SPException::SP_INFO, $this->LogMessage->getDescription(), $e->getMessage(), self::STATUS_INTERNAL_ERROR);\n+        }\n+    }\n+\n+    /**\n+     * Cargar la sesi\u00f3n del usuario\n+     *\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n      * @throws \\InvalidArgumentException\n+     * @throws \\SP\\Core\\Exceptions\\AuthException\n      * @throws \\SP\\Core\\Exceptions\\ConstraintException\n      * @throws \\SP\\Core\\Exceptions\\QueryException\n      */\n     protected function setUserSession()\n     {\n-        $UserPass = $this->loadMasterPass();\n-\n         // Obtenemos la clave maestra del usuario\n-        if ($UserPass->getClearUserMPass() !== '') {\n+        if (UserPass::$gotMPass === true) {\n             // Actualizar el \u00faltimo login del usuario\n             UserUtil::setUserLastLogin($this->UserData->getUserId());\n \n             // Cargar las variables de sesi\u00f3n del usuario\n             SessionUtil::loadUserSession($this->UserData);\n \n-            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getUserLogin());\n+            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getLogin());\n             $this->LogMessage->addDetails(__('Perfil', false), Profile::getItem()->getById($this->UserData->getUserProfileId())->getUserprofileName());\n             $this->LogMessage->addDetails(__('Grupo', false), Group::getItem()->getById($this->UserData->getUserGroupId())->getUsergroupName());\n         } else {\n@@ -260,74 +375,59 @@ protected function setUserSession()\n     }\n \n     /**\n-     * Cargar la clave maestra o solicitarla\n+     * Cargar las preferencias del usuario y comprobar si usa 2FA\n      *\n      * @throws \\SP\\Core\\Exceptions\\SPException\n-     * @throws \\SP\\Core\\Exceptions\\AuthException\n+     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      */\n-    protected function loadMasterPass()\n+    protected function loadUserPreferences()\n     {\n-        $masterPass = Request::analyzeEncrypted('mpass');\n-        $oldPass = Request::analyzeEncrypted('oldpass');\n-\n-        $UserPass = UserPass::getItem($this->UserData);\n-\n-        if ($masterPass) {\n-            if (CryptMasterPass::checkTempMasterPass($masterPass)) {\n-                $this->LogMessage->addDescription(__('Usando clave temporal', false));\n-\n-                $masterPass = CryptMasterPass::getTempMasterPass($masterPass);\n-            }\n-\n-            if (!$UserPass->updateUserMPass($masterPass)) {\n-                $this->LogMessage->addDescription(__('Clave maestra incorrecta', false));\n-\n-                throw new AuthException(SPException::SP_INFO, __('Clave maestra incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);\n-            } else {\n-                SessionUtil::saveSessionMPass($UserPass->getClearUserMPass());\n-\n-                $this->LogMessage->addDescription(__('Clave maestra actualizada', false));\n-            }\n-        } else if ($oldPass) {\n-            if (!$UserPass->updateMasterPass($oldPass)) {\n-                $this->LogMessage->addDescription(__('Clave maestra incorrecta', false));\n+        Language::setLanguage(true);\n+        DiFactory::getTheme()->initTheme(true);\n \n-                throw new AuthException(SPException::SP_INFO, __('Clave maestra incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);\n-            } else {\n-                SessionUtil::saveSessionMPass($UserPass->getClearUserMPass());\n+        Session::setUserPreferences($this->UserData->getUserPreferences());\n+        Session::setSessionType(Session::SESSION_INTERACTIVE);\n+        Session::setAuthCompleted(true);\n \n-                $this->LogMessage->addDescription(__('Clave maestra actualizada', false));\n-            }\n-        } else {\n-            $loadMPass = $UserPass->loadUserMPass();\n-\n-            // Comprobar si es necesario actualizar la clave maestra\n-            if ($loadMPass === null) {\n-                throw new AuthException(SPException::SP_INFO, __('Es necesaria su clave anterior', false), '', self::STATUS_NEED_OLD_PASS);\n-                // La clave no est\u00e1 establecida o se ha sido cambiada por el administrador\n-            } else if ($loadMPass === false) {\n-                throw new AuthException(SPException::SP_INFO, __('La clave maestra no ha sido guardada o es incorrecta', false), '', self::STATUS_INVALID_MASTER_PASS);\n-            }\n-        }\n+        DiFactory::getEventDispatcher()->notifyEvent('login.preferences', $this);\n+    }\n \n-        return $UserPass;\n+    /**\n+     * Limpiar datos de usuario\n+     */\n+    private function cleanUserData()\n+    {\n+        $this->UserData->setLogin(null);\n+        $this->UserData->setLoginPass(null);\n+        $this->UserData->setUserMPass(null);\n+        $this->UserData->setUserMKey(null);\n     }\n \n     /**\n-     * Cargar las preferencias del usuario y comprobar si usa 2FA\n+     * Comprobar si se ha forzado un cambio de clave\n      *\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      */\n-    protected function loadUserPreferences()\n+    protected function checkPasswordChange()\n     {\n-        Language::setLanguage(true);\n-        DiFactory::getTheme()->initTheme(true);\n-        Session::setUserPreferences($this->UserData->getUserPreferences());\n-        Session::setSessionType(Session::SESSION_INTERACTIVE);\n-        Session::setAuthCompleted(true);\n+        // Comprobar si se ha forzado un cambio de clave\n+        if ($this->UserData->isUserIsChangePass()) {\n+            $hash = Util::generateRandomBytes();\n \n-        DiFactory::getEventDispatcher()->notifyEvent('login.preferences', $this);\n+            $UserPassRecoverData = new UserPassRecoverData();\n+            $UserPassRecoverData->setUserpassrUserId($this->UserData->getUserId());\n+            $UserPassRecoverData->setUserpassrHash($hash);\n+\n+            UserPassRecover::getItem($UserPassRecoverData)->add();\n+\n+            $data = ['url' => Init::$WEBURI . '/index.php?a=passreset&h=' . $hash . '&t=' . time() . '&f=1'];\n+            $this->jsonResponse->setData($data);\n+            $this->jsonResponse->setStatus(0);\n+            Json::returnJson($this->jsonResponse);\n+        }\n+\n+        return false;\n     }\n \n     /**\n@@ -343,11 +443,13 @@ protected function authLdap(LdapAuthData $LdapAuthData)\n     {\n         if ($LdapAuthData->getStatusCode() > 0) {\n             $this->LogMessage->addDetails(__('Tipo', false), __FUNCTION__);\n-            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getUserLogin());\n+            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getLogin());\n \n             if ($LdapAuthData->getStatusCode() === 49) {\n                 $this->LogMessage->addDescription(__('Login incorrecto', false));\n \n+                $this->addTracking();\n+\n                 throw new AuthException(SPException::SP_INFO, $this->LogMessage->getDescription(), '', self::STATUS_INVALID_LOGIN);\n             } elseif ($LdapAuthData->getStatusCode() === 701) {\n                 $this->LogMessage->addDescription(__('Cuenta expirada', false));\n@@ -372,7 +474,7 @@ protected function authLdap(LdapAuthData $LdapAuthData)\n \n         try {\n             // Verificamos si el usuario existe en la BBDD\n-            if (UserLdap::checkLDAPUserInDB($this->UserData->getUserLogin())) {\n+            if (UserLdap::checkLDAPUserInDB($this->UserData->getLogin())) {\n                 // Actualizamos el usuario de LDAP en MySQL\n                 UserLdap::getItem($this->UserData)->update();\n             } else {\n@@ -401,7 +503,9 @@ protected function authDatabase(DatabaseAuthData $AuthData)\n         // Autentificamos con la BBDD\n         if ($AuthData->getAuthenticated() === 0) {\n             $this->LogMessage->addDescription(__('Login incorrecto', false));\n-            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getUserLogin());\n+            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getLogin());\n+\n+            $this->addTracking();\n \n             throw new AuthException(SPException::SP_INFO, $this->LogMessage->getDescription(), '', self::STATUS_INVALID_LOGIN);\n         } elseif ($AuthData->getAuthenticated() === 1) {\n@@ -424,9 +528,11 @@ protected function authBrowser(BrowserAuthData $AuthData)\n         if ($AuthData->getAuthenticated() === 0) {\n             $this->LogMessage->addDescription(__('Login incorrecto', false));\n             $this->LogMessage->addDetails(__('Tipo', false), __FUNCTION__);\n-            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getUserLogin());\n+            $this->LogMessage->addDetails(__('Usuario', false), $this->UserData->getLogin());\n             $this->LogMessage->addDetails(__('Autentificaci\u00f3n', false), sprintf('%s (%s)', AuthUtil::getServerAuthType(), $AuthData->getName()));\n \n+            $this->addTracking();\n+\n             throw new AuthException(SPException::SP_INFO, $this->LogMessage->getDescription(), '', self::STATUS_INVALID_LOGIN);\n         } elseif ($AuthData->getAuthenticated() === 1) {\n             $this->LogMessage->addDetails(__('Tipo', false), __FUNCTION__);"
        },
        {
          "filename": "inc/SP/Controller/MainActionController.class.php",
          "status": "added",
          "additions": 128,
          "deletions": 0,
          "patch": "@@ -0,0 +1,128 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Controller;\n+\n+use SP\\Config\\Config;\n+use SP\\Core\\Exceptions\\ValidationException;\n+use SP\\Core\\Session;\n+use SP\\Core\\TaskFactory;\n+use SP\\Core\\Upgrade\\Upgrade;\n+use SP\\Http\\JsonResponse;\n+use SP\\Http\\Request;\n+use SP\\Log\\Log;\n+use SP\\Util\\Json;\n+use SP\\Util\\Util;\n+\n+/**\n+ * Class MainActionController\n+ *\n+ * @package SP\\Controller\n+ */\n+class MainActionController\n+{\n+    /**\n+     * Realizar acci\u00f3n\n+     *\n+     * @param int $version\n+     * @return bool\n+     */\n+    public function doAction($version = 0)\n+    {\n+        $version = Request::analyze('version', $version);\n+        $type = Request::analyze('type');\n+        $taskId = Request::analyze('taskId');\n+\n+        if (Request::analyze('a') === 'upgrade'\n+            && Request::analyze('upgrade', 0) === 1\n+        ) {\n+            try {\n+                $JsonResponse = new JsonResponse();\n+                $JsonResponse->setAction(__('Actualizaci\u00f3n', false));\n+\n+                if (Request::analyze('h') !== Config::getConfig()->getUpgradeKey()) {\n+                    throw new ValidationException(__('C\u00f3digo de seguridad incorrecto', false));\n+                } elseif (Request::analyze('chkConfirm', false, false, true) === false) {\n+                    throw new ValidationException(__('Es necesario confirmar la actualizaci\u00f3n', false));\n+                }\n+\n+                TaskFactory::createTask('upgrade', $taskId);\n+\n+                $this->upgrade($version, $type);\n+\n+\n+                $JsonResponse->setDescription(__('Aplicaci\u00f3n actualizada correctamente', false));\n+                $JsonResponse->addMessage(__('En 5 segundos ser\u00e1 redirigido al login', false));\n+                $JsonResponse->setStatus(0);\n+            } catch (\\Exception $e) {\n+                TaskFactory::endTask();\n+\n+                $JsonResponse->setDescription($e->getMessage());\n+            }\n+\n+            Json::returnJson($JsonResponse);\n+        } elseif ($type === 'db' || $type === 'app') {\n+            $controller = new MainController();\n+            $controller->getUpgrade($version);\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Actualizar\n+     *\n+     * @param int $version\n+     * @param int $type\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    private function upgrade($version, $type)\n+    {\n+        Upgrade::doUpgrade($version);\n+\n+        TaskFactory::endTask();\n+\n+        $Config = Config::getConfig();\n+        $Config->setMaintenance(false);\n+        $Config->setUpgradeKey('');\n+\n+        $appVersion = implode('', Util::getVersion(true));\n+\n+        $Config->setConfigVersion($appVersion);\n+\n+        Config::saveConfig($Config);\n+\n+        Config::loadConfig(true);\n+\n+        Session::setAppUpdated();\n+\n+        $Log = new Log();\n+        $LogMessage = $Log->getLogMessage();\n+        $LogMessage->setAction(__('Actualizaci\u00f3n', false));\n+        $LogMessage->addDescription(__('Actualizaci\u00f3n de versi\u00f3n realizada.', false));\n+        $LogMessage->addDetails(__('Versi\u00f3n', false), sprintf('%d => %d', $version, $appVersion));\n+        $LogMessage->addDetails(__('Tipo', false), $type);\n+        $Log->writeLog();\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Controller/MainController.class.php",
          "status": "modified",
          "additions": 33,
          "deletions": 14,
          "patch": "@@ -26,6 +26,7 @@\n \n defined('APP_ROOT') || die();\n \n+use SP\\Account\\AccountUtil;\n use SP\\Config\\Config;\n use SP\\Core\\Acl;\n use SP\\Core\\ActionsInterface;\n@@ -37,7 +38,9 @@\n use SP\\Core\\Plugin\\PluginUtil;\n use SP\\Core\\Session;\n use SP\\Core\\SessionUtil;\n+use SP\\Core\\Task;\n use SP\\Core\\Template;\n+use SP\\Core\\Upgrade\\Account;\n use SP\\Core\\Upgrade\\Check;\n use SP\\DataModel\\NoticeData;\n use SP\\Html\\DataGrid\\DataGridAction;\n@@ -64,8 +67,8 @@ class MainController extends ControllerBase implements ActionsInterface\n      * Constructor\n      *\n      * @param        $template   Template con instancia de plantilla\n-     * @param string $page       El nombre de p\u00e1gina para la clase del body\n-     * @param bool   $initialize Si es una inicializaci\u00f3n completa\n+     * @param string $page El nombre de p\u00e1gina para la clase del body\n+     * @param bool $initialize Si es una inicializaci\u00f3n completa\n      */\n     public function __construct(Template $template = null, $page = '', $initialize = true)\n     {\n@@ -329,7 +332,9 @@ public function getLogin()\n         $this->view->assign('useLayout', false);\n         $this->view->assign('mailEnabled', Checks::mailIsEnabled());\n         $this->view->assign('isLogout', Request::analyze('logout', false, true));\n-        $this->view->assign('updated', Init::$UPDATED === true);\n+        $this->view->assign('updated', Session::getAppUpdated());\n+\n+        Session::setAppUpdated(false);\n \n         $getParams = [];\n \n@@ -420,9 +425,11 @@ public function getError()\n     }\n \n     /**\n-     * Obtener los datos para el interface de actualizaci\u00f3n de BD\n+     * Obtener los datos para el interface de actualizaci\u00f3n de componentes\n+     *\n+     * @param $version\n      */\n-    public function getUpgrade()\n+    public function getUpgrade($version)\n     {\n         $this->setPage('upgrade');\n \n@@ -431,20 +438,32 @@ public function getUpgrade()\n         $this->view->addTemplate('body-footer');\n         $this->view->addTemplate('body-end');\n \n-        $this->view->assign('action', Request::analyze('a'));\n-        $this->view->assign('time', Request::analyze('t'));\n-        $this->view->assign('upgrade', $this->view->action === 'upgrade');\n-        $this->view->assign('checkConstraints', Check::checkConstraints());\n+        $action = Request::analyze('a');\n+        $type = Request::analyze('type');\n+\n+        $this->view->assign('action', $action);\n+        $this->view->assign('type', $type);\n+        $this->view->assign('version', $version);\n+        $this->view->assign('upgradeVersion', implode('.', Util::getVersion(true)));\n+        $this->view->assign('taskId', Task::genTaskId('masterpass'));\n+\n+        if ($version < 1316011001) {\n+            $this->view->assign('checkConstraints', Check::checkConstraints());\n \n-        $constraints = [];\n+            $constraints = [];\n \n-        foreach ($this->view->checkConstraints as $key => $val) {\n-            if ($val > 0) {\n-                $constraints[] = sprintf('%s : %s', $key, $val);\n+            foreach ($this->view->checkConstraints as $key => $val) {\n+                if ($val > 0) {\n+                    $constraints[] = sprintf('%s : %s', $key, $val);\n+                }\n             }\n+\n+            $this->view->assign('constraints', $constraints);\n         }\n \n-        $this->view->assign('constraints', $constraints);\n+        if ($version < 21017022601) {\n+            $this->view->assign('numAccounts', AccountUtil::getTotalNumAccounts());\n+        }\n \n         $this->view();\n         exit();"
        },
        {
          "filename": "inc/SP/Controller/RequestControllerTrait.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 6,
          "patch": "@@ -92,8 +92,6 @@ protected function analyzeRequest()\n \n     /**\n      * Comprobaciones antes de realizar una acci\u00f3n\n-     *\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     protected function preActionChecks()\n     {\n@@ -104,8 +102,6 @@ protected function preActionChecks()\n \n     /**\n      * Acci\u00f3n no disponible\n-     *\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     protected function invalidAction()\n     {\n@@ -115,8 +111,6 @@ protected function invalidAction()\n \n     /**\n      * Comprobar si la sesi\u00f3n est\u00e1 activa\n-     *\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     protected function checkSession()\n     {"
        },
        {
          "filename": "inc/SP/Controller/TaskController.class.php",
          "status": "added",
          "additions": 267,
          "deletions": 0,
          "patch": "@@ -0,0 +1,267 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Controller;\n+\n+use SP\\Core\\Messages\\TaskMessage;\n+use SP\\Core\\Task;\n+use SP\\Http\\Request;\n+use SP\\Util\\Util;\n+\n+/**\n+ * Class TaskController\n+ *\n+ * @package SP\\Controller\n+ */\n+class TaskController\n+{\n+    /**\n+     * @var Task Instancia de la tarea\n+     */\n+    protected $Task;\n+    /**\n+     * @var int Tiempo de espera en cada intendo de inicializaci\u00f3n\n+     */\n+    protected $startupWaitTime = 10;\n+    /**\n+     * @var int Intentos de inicializaci\u00f3n\n+     */\n+    protected $startupWaitCount = 30;\n+    /**\n+     * @var string Archivo de bloqueo\n+     */\n+    protected $lockFile;\n+    /**\n+     * @var string Directorio de las tareas\n+     */\n+    protected $dir;\n+    /**\n+     * @var string ID de la tarea\n+     */\n+    protected $taskId;\n+    /**\n+     * @var string Archivo de la tarea\n+     */\n+    protected $taskFile;\n+\n+    /**\n+     * TaskController constructor.\n+     */\n+    public function __construct()\n+    {\n+        $this->dir = Util::getTempDir();\n+        $this->taskId = Request::analyze('taskId');\n+    }\n+\n+    /**\n+     * Realizar acci\u00f3n\n+     *\n+     * @return bool\n+     */\n+    public function doAction()\n+    {\n+        $source = Request::analyze('source');\n+\n+        if ($this->dir === false || !$this->getLock($source)) {\n+            return false;\n+        }\n+\n+        $this->taskFile = $this->dir . DIRECTORY_SEPARATOR . $this->taskId . '.task';\n+\n+        $count = 0;\n+\n+        while (!$this->checkTaskRegistered() || !$this->checkTaskFile()) {\n+            if ($count >= $this->startupWaitCount) {\n+                debugLog('Aborting ...');\n+\n+                die(1);\n+            }\n+\n+            debugLog('Waiting for task ...');\n+\n+            $count++;\n+            sleep($this->startupWaitTime);\n+        }\n+\n+        $this->readTaskStatus();\n+\n+        die(0);\n+    }\n+\n+    /**\n+     * Comprueba si una tarea ha sido registrada en la sesi\u00f3n\n+     *\n+     * @return bool\n+     */\n+    protected function checkTaskRegistered()\n+    {\n+        if (is_object($this->Task)) {\n+            debugLog('Task detected: ' . $this->Task->getTaskId());\n+\n+            return true;\n+        }\n+\n+        if (file_exists($this->taskFile)) {\n+            $task = file_get_contents($this->taskFile);\n+\n+            if ($task !== false) {\n+                $this->Task = unserialize($task);\n+            }\n+\n+            return is_object($this->Task);\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     *  Comprobar si el archivo de salida de la tarea existe\n+     */\n+    protected function checkTaskFile()\n+    {\n+        return file_exists($this->Task->getFileOut());\n+    }\n+\n+    /**\n+     * Leer el estado de una tarea y enviarlo\n+     */\n+    protected function readTaskStatus()\n+    {\n+        debugLog('Tracking task: ' . $this->Task->getTaskId());\n+\n+        $id = 0;\n+        $failCount = 0;\n+        $file = $this->Task->getFileOut();\n+        $interval = $this->Task->getInterval();\n+\n+        $Message = new TaskMessage();\n+        $Message->setTask($this->Task->getTaskId());\n+        $Message->setMessage(__('Esperando actualizaci\u00f3n de progreso ...'));\n+\n+        while ($failCount <= 30 && file_exists($this->taskFile)) {\n+            $content = file_get_contents($file);\n+\n+            if (!empty($content)) {\n+                $this->sendMessage($id, $content);\n+                $id++;\n+            } else {\n+                debugLog($Message->composeJson());\n+\n+                $this->sendMessage($id, $Message->composeJson());\n+                $failCount++;\n+            }\n+\n+            sleep($interval);\n+        }\n+    }\n+\n+    /**\n+     * Enviar un mensaje\n+     *\n+     * @param $id\n+     * @param $message\n+     */\n+    protected function sendMessage($id, $message)\n+    {\n+        echo 'id: ', $id, PHP_EOL, 'data: ', $message, PHP_EOL, PHP_EOL;\n+\n+        ob_flush();\n+        flush();\n+    }\n+\n+    /**\n+     * Comprobar si hay una tarea a la espera\n+     *\n+     * @param $source\n+     * @return bool\n+     */\n+    protected function checkWait($source)\n+    {\n+        $this->lockFile = sys_get_temp_dir() . DIRECTORY_SEPARATOR . $source . '.lock';\n+\n+        if (file_exists($this->lockFile)) {\n+            $timeout = $this->startupWaitCount * $this->startupWaitTime;\n+\n+            if (filemtime($this->lockFile) + $timeout < time()) {\n+                unlink($this->lockFile);\n+\n+                return false;\n+            }\n+\n+            return true;\n+        }\n+\n+        touch($this->lockFile);\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Eliminar bloqueo\n+     */\n+    protected function removeLock()\n+    {\n+        debugLog(__METHOD__);\n+\n+        unlink($this->lockFile);\n+    }\n+\n+    /**\n+     * Obtener un bloqueo para la ejecuci\u00f3n de la tarea\n+     *\n+     * @param $source\n+     *\n+     * @return bool\n+     */\n+    private function getLock($source)\n+    {\n+        if ($source === '') {\n+            $source = 'task';\n+        }\n+\n+        $this->lockFile = $this->dir . DIRECTORY_SEPARATOR . $source . '.lock';\n+\n+        if (file_exists($this->lockFile)) {\n+            $timeout = $this->startupWaitCount * $this->startupWaitTime;\n+\n+            if (filemtime($this->lockFile) + $timeout < time()) {\n+                unlink($this->lockFile);\n+\n+                return $this->updateLock();\n+            }\n+\n+            return false;\n+        } else {\n+            return $this->updateLock();\n+        }\n+    }\n+\n+    /**\n+     * Actualizar el tiempo del archivo de bloqueo\n+     */\n+    protected function updateLock()\n+    {\n+        return file_put_contents($this->lockFile, time()) !== false;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Crypt/Crypt.class.php",
          "status": "added",
          "additions": 141,
          "deletions": 0,
          "patch": "@@ -0,0 +1,141 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Core\\Crypt;\n+\n+use Defuse\\Crypto\\Crypto;\n+use Defuse\\Crypto\\Exception\\CryptoException;\n+use Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException;\n+use Defuse\\Crypto\\Key;\n+use Defuse\\Crypto\\KeyProtectedByPassword;\n+\n+/**\n+ * Class Crypt\n+ *\n+ * @package SP\\Core\\Crypt\n+ */\n+class Crypt\n+{\n+    /**\n+     * Encriptar datos con una clave segura\n+     *\n+     * @param string     $data\n+     * @param string|Key $securedKey\n+     * @param string     $password\n+     * @return string\n+     * @throws CryptoException\n+     */\n+    public static function encrypt($data, $securedKey, $password = null)\n+    {\n+        try {\n+            if ($securedKey instanceof Key) {\n+                $key = $securedKey;\n+            } elseif (!empty($password)) {\n+                $key = self::unlockSecuredKey($securedKey, $password, false);\n+            } else {\n+                $key = Key::loadFromAsciiSafeString($securedKey);\n+            }\n+\n+            return Crypto::encrypt($data, $key);\n+        } catch (CryptoException $e) {\n+            debugLog($e->getMessage());\n+\n+            throw $e;\n+        }\n+    }\n+\n+    /**\n+     * @param string $key\n+     * @param string $password\n+     * @param bool   $useAscii\n+     * @return string|Key\n+     * @throws CryptoException\n+     */\n+    public static function unlockSecuredKey($key, $password, $useAscii = true)\n+    {\n+        try {\n+            if ($useAscii) {\n+                return KeyProtectedByPassword::loadFromAsciiSafeString($key)->unlockKey($password)->saveToAsciiSafeString();\n+            }\n+\n+            return KeyProtectedByPassword::loadFromAsciiSafeString($key)->unlockKey($password);\n+        } catch (CryptoException $e) {\n+            debugLog($e->getMessage());\n+\n+            throw $e;\n+        }\n+    }\n+\n+    /**\n+     * Desencriptar datos con una clave segura\n+     *\n+     * @param string     $data\n+     * @param string|Key $securedKey\n+     * @param string     $password\n+     * @return string\n+     * @throws CryptoException\n+     */\n+    public static function decrypt($data, $securedKey, $password = null)\n+    {\n+        try {\n+            if ($securedKey instanceof Key) {\n+                $key = $securedKey;\n+            } elseif (!empty($password) && $securedKey instanceof KeyProtectedByPassword) {\n+                $key = self::unlockSecuredKey($securedKey, $password);\n+            } else {\n+                $key = Key::loadFromAsciiSafeString($securedKey);\n+            }\n+\n+            return Crypto::decrypt($data, $key);\n+        } catch (CryptoException $e) {\n+            debugLog($e->getMessage());\n+\n+            throw $e;\n+        }\n+\n+    }\n+\n+    /**\n+     * Securiza una clave de seguridad\n+     *\n+     * @param string $password\n+     * @param bool   $useAscii\n+     * @return string|Key\n+     * @throws CryptoException\n+     */\n+    public static function makeSecuredKey($password, $useAscii = true)\n+    {\n+        try {\n+            if ($useAscii) {\n+                return KeyProtectedByPassword::createRandomPasswordProtectedKey($password)->saveToAsciiSafeString();\n+            }\n+\n+            return KeyProtectedByPassword::createRandomPasswordProtectedKey($password);\n+        } catch (CryptoException $e) {\n+            debugLog($e->getMessage());\n+\n+            throw $e;\n+        }\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Crypt/Hash.class.php",
          "status": "added",
          "additions": 57,
          "deletions": 0,
          "patch": "@@ -0,0 +1,57 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Core\\Crypt;\n+\n+/**\n+ * Class Hash\n+ *\n+ * @package SP\\Core\\Crypt\n+ */\n+class Hash\n+{\n+    /**\n+     * Comprobar el hash de una clave.\n+     *\n+     * @param string $key  con la clave a comprobar\n+     * @param string $hash con el hash a comprobar\n+     * @return bool\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    public static function checkHashKey($key, $hash)\n+    {\n+        return password_verify($key, $hash);\n+    }\n+\n+    /**\n+     * Generar un hash de una clave criptogr\u00e1ficamente segura\n+     *\n+     * @param string $key con la clave a 'hashear'\n+     * @return string con el hash de la clave\n+     */\n+    public static function hashKey($key)\n+    {\n+        return password_hash($key, PASSWORD_BCRYPT);\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Crypt/Session.class.php",
          "status": "added",
          "additions": 74,
          "deletions": 0,
          "patch": "@@ -0,0 +1,74 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Core\\Crypt;\n+\n+use SP\\Core\\Session as CoreSession;\n+\n+/**\n+ * Class Session\n+ *\n+ * @package SP\\Core\\Crypt\n+ */\n+class Session\n+{\n+    /**\n+     * Devolver la clave maestra de la sesi\u00f3n\n+     *\n+     * @return string\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     */\n+    public static function getSessionKey()\n+    {\n+        return CoreSession::getVault()->getData();\n+    }\n+\n+    /**\n+     * Guardar la clave maestra en la sesi\u00f3n\n+     *\n+     * @param $data\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     */\n+    public static function saveSessionKey($data)\n+    {\n+        $Vault = new Vault();\n+        CoreSession::setVault($Vault->saveData($data));\n+    }\n+\n+    /**\n+     * Regenerar la clave de sesi\u00f3n\n+     *\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     */\n+    public static function reKey()\n+    {\n+        CoreSession::setVault(CoreSession::getVault()->reKey());\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Crypt/Vault.class.php",
          "status": "added",
          "additions": 140,
          "deletions": 0,
          "patch": "@@ -0,0 +1,140 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Core\\Crypt;\n+\n+use SP\\Core\\Session as CoreSession;\n+use SP\\Core\\SessionUtil;\n+\n+/**\n+ * Class Vault\n+ *\n+ * @package SP\\Core\\Crypt\n+ */\n+class Vault\n+{\n+    /**\n+     * @var string\n+     */\n+    private $data;\n+    /**\n+     * @var string\n+     */\n+    private $key;\n+    /**\n+     * @var int\n+     */\n+    private $timeSet = 0;\n+    /**\n+     * @var int\n+     */\n+    private $timeUpdated = 0;\n+\n+    /**\n+     * Regenerar la clave de sesi\u00f3n\n+     *\n+     * @param  string $key\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @return Vault\n+     */\n+    public function reKey($key = null)\n+    {\n+        $this->timeUpdated = time();\n+        $sessionMPass = $this->getData($key);\n+\n+        SessionUtil::regenerate();\n+\n+        $this->saveData($sessionMPass, $key);\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * Devolver la clave maestra de la sesi\u00f3n\n+     *\n+     * @param  string $key\n+     * @return string\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     */\n+    public function getData($key = null)\n+    {\n+        $key = $key ?: $this->getKey();\n+        $securedKey = Crypt::unlockSecuredKey($this->key, $key);\n+\n+        return Crypt::decrypt($this->data, $securedKey, $key);\n+    }\n+\n+    /**\n+     * Devolver la clave utilizada para generar la llave segura\n+     *\n+     * @return string\n+     */\n+    private function getKey()\n+    {\n+        return session_id() . CoreSession::getSidStartTime();\n+    }\n+\n+    /**\n+     * Guardar la clave maestra en la sesi\u00f3n\n+     *\n+     * @param $data\n+     * @param  string $key\n+     * @return $this\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     */\n+    public function saveData($data, $key = null)\n+    {\n+        if ($this->timeSet === 0) {\n+            $this->timeSet = time();\n+        }\n+\n+        $key = $key ?: $this->getKey();\n+        $this->key = Crypt::makeSecuredKey($key);\n+        $this->data = Crypt::encrypt($data, $this->key, $key);\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getTimeSet()\n+    {\n+        return $this->timeSet;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getTimeUpdated()\n+    {\n+        return $this->timeUpdated;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/CryptMasterPass.class.php",
          "status": "modified",
          "additions": 22,
          "deletions": 18,
          "patch": "@@ -2,8 +2,8 @@\n /**\n  * sysPass\n  *\n- * @author nuxsmin\n- * @link http://syspass.org\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n  * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n  *\n  * This file is part of sysPass.\n@@ -25,6 +25,9 @@\n namespace SP\\Core;\n \n use SP\\Config\\ConfigDB;\n+use SP\\Core\\Crypt\\Session as CryptSession;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\Crypt\\Hash;\n use SP\\Log\\Log;\n use SP\\Util\\Util;\n \n@@ -47,20 +50,19 @@ class CryptMasterPass\n      *\n      * @param int $maxTime El tiempo m\u00e1ximo de validez de la clave\n      * @return bool|string\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n      */\n     public static function setTempMasterPass($maxTime = 14400)\n     {\n         // Encriptar la clave maestra con hash aleatorio generado\n-        $randomKey = Crypt::generateAesKey(Util::generateRandomBytes());\n-        $pass = Crypt::mkCustomMPassEncrypt($randomKey, SessionUtil::getSessionMPass());\n+        $randomKey = Util::generateRandomBytes(32);\n+        $securedKey = Crypt::makeSecuredKey($randomKey);\n \n-        if (!is_array($pass)) {\n-            return false;\n-        }\n-\n-        ConfigDB::setCacheConfigValue('tempmaster_pass', bin2hex($pass[0]));\n-        ConfigDB::setCacheConfigValue('tempmaster_passiv', bin2hex($pass[1]));\n-        ConfigDB::setCacheConfigValue('tempmaster_passhash', Crypt::mkHashPassword($randomKey));\n+        ConfigDB::setCacheConfigValue('tempmaster_pass', Crypt::encrypt(CryptSession::getSessionKey(), $securedKey, $randomKey));\n+        ConfigDB::setCacheConfigValue('tempmaster_passkey', $securedKey);\n+        ConfigDB::setCacheConfigValue('tempmaster_passhash', Hash::hashKey($randomKey));\n         ConfigDB::setCacheConfigValue('tempmaster_passtime', time());\n         ConfigDB::setCacheConfigValue('tempmaster_maxtime', time() + $maxTime);\n         ConfigDB::setCacheConfigValue('tempmaster_attempts', 0);\n@@ -97,7 +99,7 @@ public static function checkTempMasterPass($pass)\n             || $attempts >= self::MAX_ATTEMPTS\n         ) {\n             ConfigDB::setCacheConfigValue('tempmaster_pass', '');\n-            ConfigDB::setCacheConfigValue('tempmaster_passiv', '');\n+            ConfigDB::setCacheConfigValue('tempmaster_passkey', '');\n             ConfigDB::setCacheConfigValue('tempmaster_passhash', '');\n             ConfigDB::setCacheConfigValue('tempmaster_maxtime', 0);\n             ConfigDB::setCacheConfigValue('tempmaster_attempts', 0);\n@@ -108,7 +110,7 @@ public static function checkTempMasterPass($pass)\n             return false;\n         }\n \n-        $isValid = Crypt::checkHashPass($pass, ConfigDB::getValue('tempmaster_passhash'));\n+        $isValid = Hash::checkHashKey($pass, ConfigDB::getValue('tempmaster_passhash'));\n \n         if (!$isValid) {\n             ConfigDB::setValue('tempmaster_attempts', $attempts + 1, false);\n@@ -120,14 +122,16 @@ public static function checkTempMasterPass($pass)\n     /**\n      * Devuelve la clave maestra que ha sido encriptada con la clave temporal\n      *\n-     * @param $pass string con la clave utilizada para encriptar\n+     * @param $randomKey string con la clave utilizada para encriptar\n      * @return string con la clave maestra desencriptada\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n      */\n-    public static function getTempMasterPass($pass)\n+    public static function getTempMasterPass($randomKey)\n     {\n-        $passLogin = hex2bin(ConfigDB::getValue('tempmaster_pass'));\n-        $passLoginIV = hex2bin(ConfigDB::getValue('tempmaster_passiv'));\n+        $securedKey = Crypt::unlockSecuredKey(ConfigDB::getValue('tempmaster_passkey'), $randomKey);\n \n-        return Crypt::getDecrypt($passLogin, $passLoginIV, $pass);\n+        return Crypt::decrypt(ConfigDB::getValue('tempmaster_pass'), $securedKey, $randomKey);\n     }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Init.class.php",
          "status": "modified",
          "additions": 78,
          "deletions": 109,
          "patch": "@@ -24,13 +24,14 @@\n \n namespace SP\\Core;\n \n+use Defuse\\Crypto\\Exception\\CryptoException;\n use SP\\Account\\AccountAcl;\n use SP\\Auth\\Browser\\Browser;\n use SP\\Config\\Config;\n-use SP\\Config\\ConfigDB;\n use SP\\Controller\\MainController;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\Core\\Plugin\\PluginUtil;\n+use SP\\Core\\Upgrade\\Upgrade;\n use SP\\Http\\JsonResponse;\n use SP\\Http\\Request;\n use SP\\Log\\Email;\n@@ -40,6 +41,7 @@\n use SP\\Util\\Checks;\n use SP\\Util\\Json;\n use SP\\Util\\Util;\n+use SP\\Core\\Crypt\\Session as CryptSession;\n \n defined('APP_ROOT') || die();\n \n@@ -85,6 +87,8 @@ class Init\n      *\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      * @throws \\phpmailer\\phpmailerException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n      */\n     public static function start()\n     {\n@@ -124,7 +128,7 @@ public static function start()\n \n         // Comprobar si es necesario inicializaci\u00f3n\n         if (self::checkInitSourceInclude() ||\n-            (defined('IS_INSTALLER') && Checks::isAjax())\n+            ((defined('IS_INSTALLER') || defined('IS_UPGRADE')) && Checks::isAjax())\n         ) {\n             return;\n         }\n@@ -143,7 +147,7 @@ public static function start()\n             Language::setLanguage(true);\n             DiFactory::getTheme()->initTheme(true);\n \n-            if (self::isLoggedIn()){\n+            if (self::isLoggedIn()) {\n                 // Recargar los permisos del perfil de usuario\n                 Session::setUserProfile(Profile::getItem()->getById(Session::getUserData()->getUserProfileId()));\n                 // Reset de los datos de ACL de cuentas\n@@ -165,8 +169,8 @@ public static function start()\n         // Comprobar si es cierre de sesi\u00f3n\n         self::checkLogout();\n \n-        // Comprobar la versi\u00f3n y actualizarla\n-        self::checkDbVersion();\n+        // Comprobar si es necesario actualizar componentes\n+        self::checkUpgrade();\n \n         // Inicializar la sesi\u00f3n\n         self::initSession();\n@@ -244,20 +248,29 @@ public static function setLogging()\n         if (isset($_COOKIE['XDEBUG_SESSION']) && !defined('DEBUG')) {\n             define('DEBUG', true);\n         }\n+\n         if (defined('DEBUG') && DEBUG) {\n             error_reporting(E_ALL);\n             ini_set('display_errors', 'On');\n         } else {\n             error_reporting(E_ALL & ~(E_DEPRECATED | E_STRICT | E_NOTICE));\n             ini_set('display_errors', 'Off');\n         }\n+\n+        if (!file_exists(LOG_FILE) && touch(LOG_FILE) && chmod(LOG_FILE, 0600)) {\n+            error_log('Setup log file: ' . LOG_FILE);\n+        }\n     }\n \n     /**\n      * Cargar las clases de las extensiones de sysPass\n      */\n     private static function loadExtensions()\n     {\n+        $CryptoLoader = new \\SplClassLoader('Defuse\\Crypto', EXTENSIONS_PATH);\n+        $CryptoLoader->setPrepend(false);\n+        $CryptoLoader->register();\n+\n         $PhpSecLoader = new \\SplClassLoader('phpseclib', EXTENSIONS_PATH);\n         $PhpSecLoader->setPrepend(false);\n         $PhpSecLoader->register();\n@@ -303,13 +316,12 @@ private static function startSession()\n      * @param string $message con la descripci\u00f3n del error\n      * @param string $hint    opcional, con una ayuda sobre el error\n      * @param bool   $headers\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public static function initError($message, $hint = '', $headers = false)\n     {\n         debugLog(__FUNCTION__);\n-        debugLog($message);\n-        debugLog($hint);\n+        debugLog(__($message));\n+        debugLog(__($hint));\n \n         if (Checks::isJson()) {\n             $JsonResponse = new JsonResponse();\n@@ -474,7 +486,7 @@ private static function checkConfig()\n     private static function checkInitSourceInclude()\n     {\n         $srcScript = pathinfo($_SERVER['SCRIPT_NAME'], PATHINFO_BASENAME);\n-        $skipInit = ['js.php', 'css.php', 'api.php', 'ajax_getEnvironment.php'];\n+        $skipInit = ['js.php', 'css.php', 'api.php', 'ajax_getEnvironment.php', 'ajax_task.php'];\n \n         return in_array($srcScript, $skipInit, true);\n     }\n@@ -491,6 +503,18 @@ private static function checkHttps()\n         }\n     }\n \n+    /**\n+     * Comprobar si el usuario est\u00e1 logado.\n+     *\n+     * @returns bool\n+     */\n+    public static function isLoggedIn()\n+    {\n+        return (DiFactory::getDBStorage()->getDbStatus() === 0\n+            && Session::getUserData()->getUserLogin()\n+            && is_object(Session::getUserPreferences()));\n+    }\n+\n     /**\n      * Comprueba que la aplicaci\u00f3n est\u00e9 instalada\n      * Esta funci\u00f3n comprueba si la aplicaci\u00f3n est\u00e1 instalada. Si no lo est\u00e1, redirige al instalador.\n@@ -502,7 +526,9 @@ private static function checkInstalled()\n         // Redirigir al instalador si no est\u00e1 instalada\n         if (!Config::getConfig()->isInstalled()) {\n             if (self::$SUBURI !== '/index.php') {\n-                $url = 'http://' . $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT'] . self::$WEBROOT . '/index.php';\n+                $protocol = isset($_SERVER['HTTPS']) ? 'https://' : 'http://';\n+\n+                $url = $protocol . $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT'] . self::$WEBROOT . '/index.php';\n                 header(\"Location: $url\");\n                 exit();\n             } else {\n@@ -529,7 +555,6 @@ private static function checkInstalled()\n      *\n      * @param bool $check s\u00f3lo comprobar si est\u00e1 activado el modo\n      * @return bool\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public static function checkMaintenanceMode($check = false)\n     {\n@@ -538,7 +563,7 @@ public static function checkMaintenanceMode($check = false)\n \n             if ($check === true\n                 || Checks::isAjax()\n-                || Request::analyze('upgrade', 0) === 1\n+                || (Request::analyze('a') === 'upgrade' && Request::analyze('type') !== '')\n                 || Request::analyze('nodbupgrade', 0) === 1\n                 || (self::$LOCK > 0 && self::isLoggedIn() && self::$LOCK === Session::getUserData()->getUserId())\n             ) {\n@@ -551,16 +576,6 @@ public static function checkMaintenanceMode($check = false)\n         return false;\n     }\n \n-    /**\n-     * Comprobar si el usuario est\u00e1 logado.\n-     *\n-     * @returns bool\n-     */\n-    public static function isLoggedIn()\n-    {\n-        return (DiFactory::getDBStorage()->getDbStatus() === 0 && Session::getUserData()->getUserLogin());\n-    }\n-\n     /**\n      * Comprobar si es necesario cerrar la sesi\u00f3n\n      */\n@@ -585,8 +600,8 @@ private static function logout()\n      */\n     private static function wrLogoutInfo()\n     {\n-        $inactiveTime = round((time() - Session::getLastActivity()) / 60, 2);\n-        $totalTime = round((time() - Session::getStartActivity()) / 60, 2);\n+        $inactiveTime = abs(round((time() - Session::getLastActivity()) / 60, 2));\n+        $totalTime = abs(round((time() - Session::getStartActivity()) / 60, 2));\n \n         $Log = new Log();\n         $LogMessage = $Log->getLogMessage();\n@@ -609,109 +624,58 @@ private static function goLogin()\n     }\n \n     /**\n-     * Comrpueba y actualiza la versi\u00f3n de la aplicaci\u00f3n.\n-     *\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n+     * Comprobar si es necesario actualizar componentes\n      */\n-    private static function checkDbVersion()\n+    private static function checkUpgrade()\n     {\n-        if (self::$SUBURI !== '/index.php' || Request::analyze('logout', 0) === 1) {\n-            return;\n-        }\n-\n-        $update = false;\n-        $databaseVersion = (int)str_replace('.', '', ConfigDB::getValue('version'));\n-        $appVersion = (int)implode(Util::getVersion(true));\n-\n-        if ($databaseVersion < $appVersion\n-            && Request::analyze('nodbupgrade', 0) === 0\n-            && Upgrade::needDBUpgrade($databaseVersion)\n-        ) {\n-            if (!self::checkMaintenanceMode(true)) {\n-                $upgradeKey = Config::getConfig()->getUpgradeKey();\n-\n-                if (empty($upgradeKey)) {\n-                    Config::getConfig()->setUpgradeKey(sha1(uniqid(mt_rand(), true)));\n-                    Config::getConfig()->setMaintenance(true);\n-                    Config::saveConfig(null, false);\n-                }\n-\n-                self::initError(__('La aplicaci\u00f3n necesita actualizarse'), sprintf(__('Si es un administrador pulse en el enlace: %s'), '<a href=\"index.php?upgrade=1&a=upgrade\">' . __('Actualizar') . '</a>'));\n-            } else {\n-                $action = Request::analyze('a');\n-                $hash = Request::analyze('h');\n-                $confirm = Request::analyze('chkConfirm', false, false, true);\n-\n-                if ($confirm === true\n-                    && $action === 'upgrade'\n-                    && $hash === Config::getConfig()->getUpgradeKey()\n-                ) {\n-                    try {\n-                        $update = Upgrade::doUpgrade($databaseVersion);\n-\n-                        ConfigDB::setValue('version', $appVersion);\n-                        Config::getConfig()->setMaintenance(false);\n-                        Config::getConfig()->setUpgradeKey('');\n-                        Config::saveConfig();\n-                    } catch (SPException $e) {\n-                        $hint = $e->getHint() . '<p class=\"center\"><a href=\"index.php?nodbupgrade=1\">' . __('Acceder') . '</a></p>';\n-                        self::initError($e->getMessage(), $hint);\n-                    }\n-                } else {\n-                    $controller = new MainController();\n-                    $controller->getUpgrade();\n-                }\n-            }\n-        }\n-\n-        if ($update === true) {\n-            $Log = new Log();\n-            $LogMessage = $Log->getLogMessage();\n-            $LogMessage->setAction(__('Actualizaci\u00f3n', false));\n-            $LogMessage->addDescription(__('Actualizaci\u00f3n de versi\u00f3n realizada.', false));\n-            $LogMessage->addDetails(__('Versi\u00f3n', false), $appVersion);\n-            $LogMessage->addDetails(__('Tipo', false), 'db');\n-            $Log->writeLog();\n-\n-            Email::sendEmail($LogMessage);\n-\n-            self::$UPDATED = true;\n-        }\n+        return self::$SUBURI === '/index.php' && (Upgrade::checkDbVersion() || Upgrade::checkAppVersion());\n     }\n \n     /**\n-     * Inicialiar la sesi\u00f3n de usuario\n+     * Inicializar la sesi\u00f3n de usuario\n+     *\n      */\n     private static function initSession()\n     {\n-        $sessionLifeTime = self::getSessionLifeTime();\n+        $lastActivity = Session::getLastActivity();\n+        $inMaintenance = Config::getConfig()->isMaintenance();\n \n         // Timeout de sesi\u00f3n\n-        if (Session::getLastActivity() && (time() - Session::getLastActivity() > $sessionLifeTime)) {\n+        if ($lastActivity > 0\n+            && !$inMaintenance\n+            && (time() - $lastActivity) > self::getSessionLifeTime()\n+        ) {\n             if (isset($_COOKIE[session_name()])) {\n                 setcookie(session_name(), '', time() - 42000, '/');\n             }\n \n             self::wrLogoutInfo();\n \n-            session_unset();\n-            session_destroy();\n-            session_start();\n+            SessionUtil::restart();\n             return;\n         }\n \n+        $sidStartTime = Session::getSidStartTime();\n+\n         // Regenerar el Id de sesi\u00f3n peri\u00f3dicamente para evitar fijaci\u00f3n\n-        if (Session::getSidStartTime() === 0) {\n+        if ($sidStartTime === 0) {\n             Session::setSidStartTime(time());\n             Session::setStartActivity(time());\n-        } else if (Session::getUserData()->getUserId() > 0 && time() - Session::getSidStartTime() > $sessionLifeTime / 2) {\n-            $sessionMPass = SessionUtil::getSessionMPass();\n-            session_regenerate_id(true);\n-            Session::setSidStartTime(time());\n-            // Recargar los permisos del perfil de usuario\n-            Session::setUserProfile(Profile::getItem()->getById(Session::getUserData()->getUserProfileId()));\n-            // Regenerar la clave maestra\n-            SessionUtil::saveSessionMPass($sessionMPass);\n+        } else if (!$inMaintenance\n+            && time() - $sidStartTime > 120\n+            && Session::getUserData()->getUserId() > 0\n+        ) {\n+            try {\n+                CryptSession::reKey();\n+\n+                // Recargar los permisos del perfil de usuario\n+                Session::setUserProfile(Profile::getItem()->getById(Session::getUserData()->getUserProfileId()));\n+            } catch (CryptoException $e) {\n+                debugLog($e->getMessage());\n+\n+                SessionUtil::restart();\n+                return;\n+            }\n         }\n \n         Session::setLastActivity(time());\n@@ -724,11 +688,16 @@ private static function initSession()\n      */\n     private static function getSessionLifeTime()\n     {\n-        if (null === Session::getSessionTimeout()) {\n-            Session::setSessionTimeout(Config::getConfig()->getSessionTimeout());\n+        $timeout = Session::getSessionTimeout();\n+\n+        if (null === $timeout) {\n+            $configTimeout = Config::getConfig()->getSessionTimeout();\n+            Session::setSessionTimeout($configTimeout);\n+\n+            return $configTimeout;\n         }\n \n-        return Session::getSessionTimeout();\n+        return $timeout;\n     }\n \n     /**\n@@ -795,7 +764,7 @@ public static function checkPostLoginActions()\n         $Controller = new MainController();\n         $Controller->doAction('postlogin.' . $action);\n \n-        return true;\n+        return false;\n     }\n \n     /**"
        },
        {
          "filename": "inc/SP/Core/Installer.class.php",
          "status": "modified",
          "additions": 37,
          "deletions": 46,
          "patch": "@@ -30,12 +30,13 @@\n use SP\\Config\\Config;\n use SP\\Config\\ConfigData;\n use SP\\Config\\ConfigDB;\n+use SP\\Core\\Crypt\\Hash;\n use SP\\Core\\Exceptions\\InvalidArgumentException;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\DataModel\\GroupData;\n use SP\\DataModel\\InstallData;\n use SP\\DataModel\\ProfileData;\n-use SP\\DataModel\\UserData;\n+use SP\\DataModel\\UserLoginData;\n use SP\\Mgmt\\Groups\\Group;\n use SP\\Mgmt\\Profiles\\Profile;\n use SP\\Mgmt\\Users\\User;\n@@ -226,7 +227,10 @@ private function setupMySQLDatabase()\n                 $sth->execute([$this->InstallData->getDbUser(), $this->InstallData->getDbAuthHost()]);\n \n                 // Si no existe el usuario, se intenta crear\n-                if ((int)$sth->fetchColumn() === 0) {\n+                if ((int)$sth->fetchColumn() === 0\n+                    // Se comprueba si el nuevo usuario es distinto del creado en otra instalaci\u00f3n\n+                    && $this->InstallData->getDbUser() != $this->Config->getDbUser()\n+                ) {\n                     $this->createDBUser();\n                 }\n             } catch (PDOException $e) {\n@@ -362,13 +366,15 @@ private function rollback()\n             $this->DB->exec('DROP USER `' . $this->InstallData->getDbUser() . '`@`' . $this->InstallData->getDbAuthHost() . '`');\n             $this->DB->exec('DROP USER `' . $this->InstallData->getDbUser() . '`@`' . $this->InstallData->getDbAuthHostDns() . '`');\n             $this->DB->exec('DROP USER `' . $this->InstallData->getDbUser() . '`@`%`');\n+\n+            debugLog('Rollback');\n+\n+            return true;\n         } catch (PDOException $e) {\n             debugLog($e->getMessage());\n \n             return false;\n         }\n-\n-        return true;\n     }\n \n     /**\n@@ -387,8 +393,8 @@ private function createDBStructure()\n                 __('No es posible crear la BBDD de la aplicaci\u00f3n. Desc\u00e1rguela de nuevo.', false));\n         }\n \n-        // Usar la base de datos de sysPass\n         try {\n+            // Usar la base de datos de sysPass\n             $this->DB->exec('USE `' . $this->InstallData->getDbName() . '`');\n         } catch (PDOException $e) {\n             throw new SPException(SPException::SP_CRITICAL,\n@@ -443,59 +449,44 @@ protected function checkConnection()\n      */\n     private function createAdminAccount()\n     {\n-        $GroupData = new GroupData();\n-        $GroupData->setUsergroupName('Admins');\n-        $GroupData->setUsergroupDescription('sysPass Admins');\n-\n         try {\n+            $GroupData = new GroupData();\n+            $GroupData->setUsergroupName('Admins');\n+            $GroupData->setUsergroupDescription('sysPass Admins');\n+\n             Group::getItem($GroupData)->add();\n-        } catch (SPException $e) {\n-            $this->rollback();\n-            throw new SPException(SPException::SP_CRITICAL,\n-                __('Error al crear el grupo \"admin\"', false),\n-                __('Informe al desarrollador', false));\n-        }\n \n-        $ProfileData = new ProfileData();\n-        $ProfileData->setUserprofileName('Admin');\n+            $ProfileData = new ProfileData();\n+            $ProfileData->setUserprofileName('Admin');\n \n-        try {\n             Profile::getItem($ProfileData)->add();\n-        } catch (SPException $e) {\n-            $this->rollback();\n-            throw new SPException(SPException::SP_CRITICAL,\n-                __('Error al crear el perfil \"admin\"', false),\n-                __('Informe al desarrollador', false));\n-        }\n \n-        // Datos del usuario\n-        $UserData = new UserData();\n-        $UserData->setUserGroupId($GroupData->getUsergroupId());\n-        $UserData->setUserProfileId($ProfileData->getUserprofileId());\n-        $UserData->setUserLogin($this->InstallData->getAdminLogin());\n-        $UserData->setUserPass($this->InstallData->getAdminPass());\n-        $UserData->setUserName('Admin');\n-        $UserData->setUserIsAdminApp(1);\n+            // Datos del usuario\n+            $UserData = new UserLoginData();\n+            $UserData->setUserGroupId($GroupData->getUsergroupId());\n+            $UserData->setUserProfileId($ProfileData->getUserprofileId());\n+            $UserData->setUserLogin($this->InstallData->getAdminLogin());\n+            $UserData->setLogin($this->InstallData->getAdminLogin());\n+            $UserData->setUserPass($this->InstallData->getAdminPass());\n+            $UserData->setLoginPass($this->InstallData->getAdminPass());\n+            $UserData->setUserName('Admin');\n+            $UserData->setUserIsAdminApp(1);\n \n-        try {\n             User::getItem($UserData)->add();\n-        } catch (SPException $e) {\n-            $this->rollback();\n-            throw new SPException(SPException::SP_CRITICAL,\n-                __('Error al crear el usuario \"admin\"', false),\n-                __('Informe al desarrollador', false));\n-        }\n \n-        // Guardar el hash de la clave maestra\n-        ConfigDB::setCacheConfigValue('masterPwd', Crypt::mkHashPassword($this->InstallData->getMasterPassword()));\n-        ConfigDB::setCacheConfigValue('lastupdatempass', time());\n-        ConfigDB::writeConfig(true);\n+            // Guardar el hash de la clave maestra\n+            ConfigDB::setCacheConfigValue('masterPwd', Hash::hashKey($this->InstallData->getMasterPassword()));\n+            ConfigDB::setCacheConfigValue('lastupdatempass', time());\n+            ConfigDB::writeConfig(true);\n \n-        if (!UserPass::getItem($UserData)->updateUserMPass($this->InstallData->getMasterPassword())) {\n+            if (!UserPass::updateUserMPass($this->InstallData->getMasterPassword(), $UserData)) {\n+                throw new SPException(SPException::SP_CRITICAL,\n+                    __('Error al actualizar la clave maestra del usuario \"admin\"', false));\n+            }\n+        } catch (\\Exception $e) {\n             $this->rollback();\n-\n             throw new SPException(SPException::SP_CRITICAL,\n-                __('Error al actualizar la clave maestra del usuario \"admin\"', false),\n+                $e->getMessage(),\n                 __('Informe al desarrollador', false));\n         }\n     }"
        },
        {
          "filename": "inc/SP/Core/Messages/LogMessage.class.php",
          "status": "modified",
          "additions": 40,
          "deletions": 1,
          "patch": "@@ -41,6 +41,14 @@ class LogMessage extends MessageBase\n      * @var array Detalles de la acci\u00f3n en formato \"detalle : descripci\u00f3n\"\n      */\n     protected $details = [];\n+    /**\n+     * @var int\n+     */\n+    protected $descriptionCounter = 0;\n+    /**\n+     * @var int\n+     */\n+    protected $detailsCounter = 0;\n \n     /**\n      * Devuelve la acci\u00f3n realizada\n@@ -140,6 +148,8 @@ public function addDetails($key, $value)\n \n         $this->details[] = [$this->formatString($key), $this->formatString($value)];\n \n+        $this->detailsCounter++;\n+\n         return $this;\n     }\n \n@@ -175,6 +185,7 @@ public function addDescription($description = '')\n     public function addDescriptionLine()\n     {\n         $this->description[] = '';\n+        $this->descriptionCounter++;\n \n         return $this;\n     }\n@@ -222,7 +233,7 @@ public function getDetails($translate = false)\n      * Devolver un detalle formateado\n      *\n      * @param array $detail\n-     * @param bool $translate\n+     * @param bool  $translate\n      * @return string\n      */\n     protected function formatDetail(array $detail, $translate = false)\n@@ -257,6 +268,18 @@ public function composeHtml()\n     public function resetDescription()\n     {\n         $this->description = [];\n+        $this->descriptionCounter = 0;\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * Restablecer la variable de detalles\n+     */\n+    public function resetDetails()\n+    {\n+        $this->details = [];\n+        $this->detailsCounter = 0;\n \n         return $this;\n     }\n@@ -271,4 +294,20 @@ public function getHtmlDetails($translate = false)\n     {\n         return nl2br($this->getDetails($translate));\n     }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getDescriptionCounter()\n+    {\n+        return $this->descriptionCounter;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getDetailsCounter()\n+    {\n+        return $this->detailsCounter;\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Messages/TaskMessage.class.php",
          "status": "added",
          "additions": 211,
          "deletions": 0,
          "patch": "@@ -0,0 +1,211 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Core\\Messages;\n+\n+use JsonSerializable;\n+\n+/**\n+ * Class TaskMessage\n+ *\n+ * @package SP\\Core\\Messages\n+ */\n+class TaskMessage implements MessageInterface, JsonSerializable\n+{\n+    /**\n+     * @var string\n+     */\n+    protected $taskId;\n+    /**\n+     * @var string\n+     */\n+    protected $task;\n+    /**\n+     * @var string\n+     */\n+    protected $message;\n+    /**\n+     * @var int\n+     */\n+    protected $time = 0;\n+    /**\n+     * @var int\n+     */\n+    protected $progress = 0;\n+    /**\n+     * @var int\n+     */\n+    protected $end = 0;\n+\n+    /**\n+     * @return string\n+     */\n+    public function getTask()\n+    {\n+        return $this->task;\n+    }\n+\n+    /**\n+     * @param string $task\n+     */\n+    public function setTask($task)\n+    {\n+        $this->task = $task;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getMessage()\n+    {\n+        return $this->message;\n+    }\n+\n+    /**\n+     * @param string $message\n+     */\n+    public function setMessage($message)\n+    {\n+        $this->message = $message;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getTime()\n+    {\n+        return $this->time;\n+    }\n+\n+    /**\n+     * @param int $time\n+     */\n+    public function setTime($time)\n+    {\n+        $this->time = $time;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getProgress()\n+    {\n+        return $this->progress;\n+    }\n+\n+    /**\n+     * @param int $progress\n+     */\n+    public function setProgress($progress)\n+    {\n+        $this->progress = $progress;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getEnd()\n+    {\n+        return $this->end;\n+    }\n+\n+    /**\n+     * @param int $end\n+     */\n+    public function setEnd($end)\n+    {\n+        $this->end = $end;\n+    }\n+\n+    /**\n+     * Componer un mensaje en formato texto\n+     *\n+     * @return string\n+     */\n+    public function composeText()\n+    {\n+        return implode(PHP_EOL, [\n+            'taskId' => $this->taskId,\n+            'task' => $this->task,\n+            'message' => $this->message,\n+            'time' => $this->time,\n+            'progress' => $this->progress,\n+            'end' => $this->end\n+        ]);\n+    }\n+\n+    /**\n+     * Componer un mensaje en formato HTML\n+     *\n+     * @return mixed\n+     */\n+    public function composeHtml()\n+    {\n+        return [\n+            'taskId' => $this->taskId,\n+            'task' => $this->task,\n+            'message' => $this->message,\n+            'time' => $this->time,\n+            'progress' => $this->progress,\n+            'end' => $this->end\n+        ];\n+    }\n+\n+    /**\n+     * Componer un mensaje en formato JSON\n+     */\n+    public function composeJson()\n+    {\n+        return json_encode($this);\n+    }\n+\n+    /**\n+     * Specify data which should be serialized to JSON\n+     *\n+     * @link  http://php.net/manual/en/jsonserializable.jsonserialize.php\n+     * @return mixed data which can be serialized by <b>json_encode</b>,\n+     *        which is a value of any type other than a resource.\n+     * @since 5.4.0\n+     */\n+    public function jsonSerialize()\n+    {\n+        return get_object_vars($this);\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getTaskId()\n+    {\n+        return $this->taskId;\n+    }\n+\n+    /**\n+     * @param string $taskId\n+     */\n+    public function setTaskId($taskId)\n+    {\n+        $this->taskId = $taskId;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/OldCrypt.class.php",
          "status": "renamed",
          "additions": 5,
          "deletions": 47,
          "patch": "@@ -36,53 +36,10 @@\n /**\n  * Esta clase es la encargada de realizar el encriptado/desencriptado de claves\n  */\n-class Crypt\n+class OldCrypt\n {\n     public static $strInitialVector;\n \n-    /**\n-     * Comprobar el hash de una clave.\n-     *\n-     * @param string $pwd         con la clave a comprobar\n-     * @param string $checkedHash con el hash a comprobar\n-     * @param bool   $isMPass     si es la clave maestra\n-     * @return bool\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n-     */\n-    public static function checkHashPass($pwd, $checkedHash, $isMPass = false)\n-    {\n-        if ($isMPass) {\n-            // Comprobar si el hash est\u00e1 en formato anterior a 12002\n-            if (strlen($checkedHash) === 128) {\n-                $check = (hash('sha256', substr($checkedHash, 0, 64) . $pwd) === substr($checkedHash, 64, 64));\n-\n-                if ($check) {\n-                    $newHash = self::mkHashPassword($pwd);\n-\n-                    AccountHistory::updateAccountsMPassHash($newHash);\n-\n-                    ConfigDB::setValue('masterPwd', $newHash);\n-                    Log::writeNewLog(__('Aviso', false), __('Se ha regenerado el HASH de clave maestra. No es necesaria ninguna acci\u00f3n.', false), Log::NOTICE);\n-                }\n-\n-                return $check;\n-\n-            // Hash de clave maestra anterior a 2.0.0.17013101\n-            } elseif (hash_equals(crypt($pwd, substr($checkedHash, 0, 72)), substr($checkedHash, 72))) {\n-                ConfigDB::setValue('masterPwd', Crypt::mkHashPassword($pwd));\n-\n-                Log::writeNewLog(__('Aviso', false), __('Se ha regenerado el HASH de clave maestra. No es necesaria ninguna acci\u00f3n.', false), Log::NOTICE);\n-                return true;\n-            }\n-        }\n-\n-        // Timing attacks...\n-//        usleep(mt_rand(100000, 300000));\n-\n-        // Obtener el hash de la clave y la clave para generar una clave y comparar\n-        return hash_equals(crypt($pwd, substr($checkedHash, 0, 30)), substr($checkedHash, 30));\n-    }\n-\n     /**\n      * Generar un hash de una clave utilizando un salt.\n      *\n@@ -206,16 +163,17 @@ public static function encryptData($data, $pwd = null)\n         }\n \n         // Comprobar el m\u00f3dulo de encriptaci\u00f3n\n-        if (!Crypt::checkCryptModule()) {\n+        if (!OldCrypt::checkCryptModule()) {\n             throw new SPException(\n                 SPException::SP_CRITICAL,\n                 __('Error interno', false),\n                 __('No se puede usar el m\u00f3dulo de encriptaci\u00f3n', false)\n             );\n         }\n \n+        // FIXME\n         // Encriptar datos\n-        $encData['data'] = Crypt::mkEncrypt($data, $pwd);\n+        $encData['data'] = OldCrypt::mkEncrypt($data, $pwd);\n \n         if (!empty($data) && ($encData['data'] === false || null === $encData['data'])) {\n             throw new SPException(\n@@ -225,7 +183,7 @@ public static function encryptData($data, $pwd = null)\n             );\n         }\n \n-        $encData['iv'] = Crypt::$strInitialVector;\n+        $encData['iv'] = OldCrypt::$strInitialVector;\n \n         return $encData;\n     }"
        },
        {
          "filename": "inc/SP/Core/Session.class.php",
          "status": "modified",
          "additions": 62,
          "deletions": 61,
          "patch": "@@ -27,6 +27,7 @@\n use SP\\Account\\AccountAcl;\n use SP\\Account\\AccountSearch;\n use SP\\Config\\ConfigData;\n+use SP\\Core\\Crypt\\Vault;\n use SP\\DataModel\\ProfileData;\n use SP\\DataModel\\UserData;\n use SP\\DataModel\\UserPreferencesData;\n@@ -50,7 +51,7 @@ class Session\n      *\n      * @param UserData $UserData\n      */\n-    public static function setUserData($UserData = null)\n+    public static function setUserData(UserData $UserData = null)\n     {\n         self::setSessionKey('userData', $UserData);\n     }\n@@ -237,66 +238,6 @@ public static function setSecurityKey($sk)\n         self::setSessionKey('sk', $sk);\n     }\n \n-    /**\n-     * Devuelve la clave maestra encriptada\n-     *\n-     * @return string\n-     */\n-    public static function getMPass()\n-    {\n-        return self::getSessionKey('mPass');\n-    }\n-\n-    /**\n-     * Establecer la clave maestra encriptada\n-     *\n-     * @param $mpass string La clave maestra\n-     */\n-    public static function setMPass($mpass)\n-    {\n-        self::setSessionKey('mPass', $mpass);\n-    }\n-\n-    /**\n-     * Devuelve la clave usada para encriptar la clave maestra\n-     *\n-     * @return string\n-     */\n-    public static function getMPassPwd()\n-    {\n-        return self::getSessionKey('mPassPwd');\n-    }\n-\n-    /**\n-     * Establece la clave usada para encriptar la clave maestra\n-     *\n-     * @param $mPassPwd string La clave usada\n-     */\n-    public static function setMPassPwd($mPassPwd)\n-    {\n-        self::setSessionKey('mPassPwd', $mPassPwd);\n-    }\n-\n-    /**\n-     * Devuelve el vector de inicializaci\u00f3n de la clave maestra\n-     *\n-     * @return string\n-     */\n-    public static function getMPassIV()\n-    {\n-        return self::getSessionKey('mPassIV');\n-    }\n-\n-    /**\n-     * Establece el vector de inicializaci\u00f3n de la clave maestra\n-     *\n-     * @param $mPassIV string El vector de inicializaci\u00f3n\n-     */\n-    public static function setMPassIV($mPassIV)\n-    {\n-        self::setSessionKey('mPassIV', $mPassIV);\n-    }\n-\n     /**\n      * Devuelve la hora en la que el SID de sesi\u00f3n fue creado\n      *\n@@ -684,4 +625,64 @@ public static function getAccountAcl($accountId)\n \n         return null;\n     }\n+\n+    /**\n+     * Establece si se ha actulizado la aplicaci\u00f3n\n+     *\n+     * @param bool $bool\n+     */\n+    public static function setAppUpdated($bool = true)\n+    {\n+        self::setSessionKey('appupdated', $bool);\n+    }\n+\n+    /**\n+     * Devuelve si se ha actulizado la aplicaci\u00f3n\n+     *\n+     * @return bool\n+     */\n+    public static function getAppUpdated()\n+    {\n+        return self::getSessionKey('appupdated', false);\n+    }\n+\n+    /**\n+     * Devuelve la clave maestra encriptada\n+     *\n+     * @return Vault\n+     */\n+    public static function getVault()\n+    {\n+        return self::getSessionKey('vault');\n+    }\n+\n+    /**\n+     * Establecer la clave maestra encriptada\n+     *\n+     * @param Vault $vault\n+     */\n+    public static function setVault(Vault $vault)\n+    {\n+        self::setSessionKey('vault', $vault);\n+    }\n+\n+    /**\n+     * Devuelve la tarea activa\n+     *\n+     * @return Task\n+     */\n+    public static function getTask()\n+    {\n+        return self::getSessionKey('task');\n+    }\n+\n+    /**\n+     * Establecer la tarea activa\n+     *\n+     * @param Task $task\n+     */\n+    public static function setTask(Task $task = null)\n+    {\n+        self::setSessionKey('task', $task);\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/SessionUtil.class.php",
          "status": "modified",
          "additions": 26,
          "deletions": 17,
          "patch": "@@ -2,8 +2,8 @@\n /**\n  * sysPass\n  *\n- * @author nuxsmin\n- * @link http://syspass.org\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n  * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n  *\n  * This file is part of sysPass.\n@@ -27,6 +27,7 @@\n use SP\\Config\\Config;\n use SP\\DataModel\\UserData;\n use SP\\Mgmt\\Profiles\\Profile;\n+use SP\\Core\\Crypt\\Session as CryptSession;\n \n defined('APP_ROOT') || die();\n \n@@ -60,27 +61,16 @@ public static function loadPublicKey()\n         Session::setPublicKey($CryptPKI->getPublicKey());\n     }\n \n-    /**\n-     * Guardar la clave maestra encriptada en la sesi\u00f3n\n-     *\n-     * @param $masterPass\n-     */\n-    public static function saveSessionMPass($masterPass)\n-    {\n-        $sessionMasterPass = Crypt::mkCustomMPassEncrypt(Crypt::generateAesKey(session_id()), $masterPass);\n-\n-        Session::setMPass($sessionMasterPass[0]);\n-        Session::setMPassIV($sessionMasterPass[1]);\n-    }\n-\n     /**\n      * Desencriptar la clave maestra de la sesi\u00f3n.\n      *\n      * @return string con la clave maestra\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n      */\n     public static function getSessionMPass()\n     {\n-        return Crypt::getDecrypt(Session::getMPass(), Session::getMPassIV(), Crypt::generateAesKey(session_id()));\n+        return CryptSession::getSessionKey();\n     }\n \n     /**\n@@ -120,7 +110,7 @@ public static function checkSessionKey($key)\n      */\n     public static function cleanSession()\n     {\n-        foreach ($_SESSION as $key => $value){\n+        foreach ($_SESSION as $key => $value) {\n             unset($_SESSION[$key]);\n         }\n \n@@ -151,4 +141,23 @@ public static function cleanSession()\n //        Session::unsetSessionKey('config');\n //        Session::unsetSessionKey('configTime');\n     }\n+\n+    /**\n+     * Regenerad el ID de sesi\u00f3n\n+     */\n+    public static function regenerate()\n+    {\n+        session_regenerate_id(true);\n+        Session::setSidStartTime(time());\n+    }\n+\n+    /**\n+     * Destruir la sesi\u00f3n y reiniciar\n+     */\n+    public static function restart()\n+    {\n+        session_unset();\n+        session_destroy();\n+        session_start();\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Task.class.php",
          "status": "added",
          "additions": 292,
          "deletions": 0,
          "patch": "@@ -0,0 +1,292 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Core;\n+\n+use SP\\Core\\Messages\\TaskMessage;\n+use SP\\Util\\Util;\n+\n+/**\n+ * Class Task\n+ *\n+ * @package SP\\Core\n+ */\n+class Task\n+{\n+    /**\n+     * @var string Nombre de la tarea\n+     */\n+    protected $name;\n+    /**\n+     * @var string ID de la tarea\n+     */\n+    protected $taskId;\n+    /**\n+     * @var string Ruta y archivo salida de la tarea\n+     */\n+    protected $fileOut;\n+    /**\n+     * @var string Ruta y archivo de la tarea\n+     */\n+    protected $fileTask;\n+    /**\n+     * @var resource Manejador del archivo\n+     */\n+    protected $fileHandler;\n+    /**\n+     * @var int Int\u00e9rvalo en segundos\n+     */\n+    protected $interval = 5;\n+    /**\n+     * @var bool Si se ha inicializado para escribir en el archivo\n+     */\n+    protected $initialized = false;\n+\n+    /**\n+     * Task constructor.\n+     *\n+     * @param string $name Nombre de la tarea\n+     * @param string $id\n+     */\n+    public function __construct($name, $id)\n+    {\n+        $this->name = $name;\n+        $this->taskId = $id;\n+        $this->initialized = $this->checkFile();\n+    }\n+\n+    /**\n+     * Comprobar si se puede escribir en el archivo\n+     *\n+     * @return bool\n+     */\n+    protected function checkFile()\n+    {\n+        $tempDir = Util::getTempDir();\n+\n+        if ($tempDir !== false) {\n+            $this->fileOut = $tempDir . DIRECTORY_SEPARATOR . $this->taskId . '.out';\n+            $this->fileTask = $tempDir . DIRECTORY_SEPARATOR . $this->taskId . '.task';\n+\n+            $this->deleteTaskFiles();\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Eliminar los archivos de la tarea no usados\n+     */\n+    protected function deleteTaskFiles()\n+    {\n+        $filesOut = dirname($this->fileOut) . DIRECTORY_SEPARATOR . $this->taskId . '*.out';\n+        $filesTask = dirname($this->fileOut) . DIRECTORY_SEPARATOR . $this->taskId . '*.task';\n+\n+        array_map('unlink', glob($filesOut));\n+        array_map('unlink', glob($filesTask));\n+    }\n+\n+    /**\n+     * Generar un ID de tarea\n+     *\n+     * @param $name\n+     * @return string\n+     */\n+    public static function genTaskId($name)\n+    {\n+        return uniqid($name, true);\n+    }\n+\n+    /**\n+     * Iniciar la tarea\n+     *\n+     * @return bool\n+     */\n+    public function start()\n+    {\n+        return $this->openFile();\n+    }\n+\n+    /**\n+     * Abrir el archivo para escritura\n+     *\n+     * @return  bool\n+     */\n+    protected function openFile()\n+    {\n+        if ($this->initialized === false\n+            || !$this->fileHandler = fopen($this->fileOut, 'wb')\n+        ) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Escribir el tado de la tarea a un archivo\n+     *\n+     * @param TaskMessage $Message\n+     * @return bool\n+     */\n+    public function writeStatus(TaskMessage $Message)\n+    {\n+        if ($this->initialized === false\n+            || !is_resource($this->fileHandler)\n+        ) {\n+            return false;\n+        }\n+\n+        fwrite($this->fileHandler, $Message->composeText());\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Escribir el tado de la tarea a un archivo\n+     *\n+     * @param TaskMessage $Message\n+     * @return bool\n+     */\n+    public function writeStatusAndFlush(TaskMessage $Message)\n+    {\n+        return $this->initialized === true\n+            && !is_resource($this->fileHandler)\n+            && file_put_contents($this->fileOut, $Message->composeText()) !== false;\n+    }\n+\n+    /**\n+     * Escribir un mensaje en el archivo de la tarea en formato JSON\n+     *\n+     * @param TaskMessage $Message\n+     * @return bool\n+     */\n+    public function writeJsonStatusAndFlush(TaskMessage $Message)\n+    {\n+        return $this->initialized === true\n+            && !is_resource($this->fileHandler)\n+            && file_put_contents($this->fileOut, $Message->composeJson()) !== false;\n+    }\n+\n+    /**\n+     * Iniciar la tarea\n+     *\n+     * @param bool $startSession\n+     * @return bool\n+     */\n+    public function end($startSession = true)\n+    {\n+        if ($startSession) {\n+            session_start();\n+        }\n+\n+        $this->deregister();\n+\n+        return $this->closeFile() && @unlink($this->fileOut);\n+    }\n+\n+    /**\n+     * Desregistrar la tarea en la sesi\u00f3n\n+     */\n+    public function deregister()\n+    {\n+        debugLog('Deregister Task: ' . $this->name);\n+\n+        unlink($this->fileTask);\n+    }\n+\n+    /**\n+     * Abrir el archivo para escritura\n+     *\n+     * @return  bool\n+     */\n+    protected function closeFile()\n+    {\n+        if ($this->initialized === true && is_resource($this->fileHandler)) {\n+            return fclose($this->fileHandler);\n+        }\n+\n+        return $this->initialized;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getInterval()\n+    {\n+        return $this->interval;\n+    }\n+\n+    /**\n+     * @param int $interval\n+     */\n+    public function setInterval($interval)\n+    {\n+        $this->interval = $interval;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getTaskId()\n+    {\n+        return $this->taskId;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getFileOut()\n+    {\n+        return $this->fileOut;\n+    }\n+\n+    /**\n+     * Registrar la tarea en la sesi\u00f3n.\n+     *\n+     * Es necesario bloquear la sesi\u00f3n para permitir la ejecuci\u00f3n de otros scripts\n+     *\n+     * @param bool $lockSession Bloquear la sesi\u00f3n\n+     */\n+    public function register($lockSession = true)\n+    {\n+        debugLog('Register Task: ' . $this->name);\n+\n+        file_put_contents($this->fileTask, serialize($this));\n+\n+        if ($lockSession === true) {\n+            session_write_close();\n+        }\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getFileTask()\n+    {\n+        return $this->fileTask;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/TaskFactory.class.php",
          "status": "added",
          "additions": 82,
          "deletions": 0,
          "patch": "@@ -0,0 +1,82 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Core;\n+\n+use SP\\Core\\Messages\\TaskMessage;\n+\n+/**\n+ * Class TaskFactory\n+ *\n+ * @package SP\\Core\n+ */\n+class TaskFactory\n+{\n+    /**\n+     * @var TaskMessage\n+     */\n+    public static $Message;\n+    /**\n+     * @var Task\n+     */\n+    private static $Task;\n+\n+    /**\n+     * Crear una tarea para la actualizaci\u00f3n de estado de la actualizaci\u00f3n\n+     *\n+     * @param $name\n+     * @param $id\n+     */\n+    public static function createTask($name, $id)\n+    {\n+        if (self::$Task === null) {\n+            self::$Task = new Task($name, $id);\n+            self::$Task->register();\n+        }\n+\n+        self::$Message = new TaskMessage();\n+        self::$Message->setTaskId($id);\n+    }\n+\n+    /**\n+     * Finalizar la tarea\n+     */\n+    public static function endTask()\n+    {\n+        if (self::$Task !== null) {\n+            self::$Task->end();\n+            self::$Task = null;\n+        }\n+    }\n+\n+    /**\n+     * Enviar un mensaje de actualizaci\u00f3n a la tarea\n+     */\n+    public static function sendTaskMessage()\n+    {\n+        if (self::$Task !== null) {\n+            self::$Task->writeJsonStatusAndFlush(self::$Message);\n+        }\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Template.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -62,7 +62,6 @@ class Template\n     /**\n      * @param null  $file Archivo de plantilla a a\u00f1adir\n      * @param array $vars Variables a inicializar\n-     * @throws \\SP\\Core\\Exceptions\\FileNotFoundException\n      */\n     public function __construct($file = null, array $vars = array())\n     {"
        },
        {
          "filename": "inc/SP/Core/Upgrade/Account.class.php",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -25,6 +25,7 @@\n namespace SP\\Core\\Upgrade;\n \n use SP\\Core\\Exceptions\\SPException;\n+use SP\\Core\\TaskFactory;\n use SP\\Storage\\DB;\n use SP\\Storage\\QueryData;\n \n@@ -42,6 +43,10 @@ class Account\n      */\n     public static function fixAccountsId()\n     {\n+        TaskFactory::$Message->setTask(__FUNCTION__);\n+        TaskFactory::$Message->setMessage(__('Actualizando IDs de cuentas'));\n+        TaskFactory::sendTaskMessage();\n+\n         try {\n             DB::beginTransaction();\n "
        },
        {
          "filename": "inc/SP/Core/Upgrade/Category.class.php",
          "status": "modified",
          "additions": 34,
          "deletions": 13,
          "patch": "@@ -25,6 +25,7 @@\n namespace SP\\Core\\Upgrade;\n \n use SP\\Core\\Exceptions\\SPException;\n+use SP\\Core\\TaskFactory;\n use SP\\Storage\\DB;\n use SP\\Storage\\QueryData;\n \n@@ -43,29 +44,28 @@ class Category\n      */\n     public static function fixCategoriesId($categoryId)\n     {\n-        $Data = new QueryData();\n-        $Data->setQuery('SELECT category_id FROM categories ORDER BY category_id');\n-\n-        $categories = DB::getResultsArray($Data);\n-\n-        $paramsIn = trim(str_repeat(',?', count($categories)), ',');\n-        $Data->addParam($categoryId);\n-\n-        foreach ($categories as $category) {\n-            $Data->addParam($category->category_id);\n-        }\n+        TaskFactory::$Message->setTask(__FUNCTION__);\n+        TaskFactory::$Message->setMessage(__('Actualizando IDs de categor\u00edas'));\n+        TaskFactory::sendTaskMessage();\n \n         try {\n             DB::beginTransaction();\n \n+            if ($categoryId === 0) {\n+                $categoryId = self::createOrphanCategory();\n+            }\n+\n+            $Data = new QueryData();\n+            $Data->addParam($categoryId);\n+\n             $query = /** @lang SQL */\n-                'UPDATE accHistory SET acchistory_categoryId = ? WHERE acchistory_categoryId NOT IN (' . $paramsIn . ') OR acchistory_categoryId IS NULL';\n+                'UPDATE accHistory SET acchistory_categoryId = ? WHERE acchistory_categoryId NOT IN (SELECT category_id FROM categories ORDER BY category_id) OR acchistory_categoryId IS NULL';\n             $Data->setQuery($query);\n \n             DB::getQuery($Data);\n \n             $query = /** @lang SQL */\n-                'UPDATE accounts SET account_categoryId = ? WHERE account_categoryId NOT IN (' . $paramsIn . ') OR account_categoryId IS NULL';\n+                'UPDATE accounts SET account_categoryId = ? WHERE account_categoryId NOT IN (SELECT category_id FROM categories ORDER BY category_id) OR account_categoryId IS NULL';\n             $Data->setQuery($query);\n \n             DB::getQuery($Data);\n@@ -79,4 +79,25 @@ public static function fixCategoriesId($categoryId)\n             return false;\n         }\n     }\n+\n+    /**\n+     * Crear una categor\u00eda para elementos hu\u00e9rfanos\n+     *\n+     * @return int\n+     */\n+    public static function createOrphanCategory()\n+    {\n+        $query = /** @lang SQL */\n+            'INSERT INTO categories SET\n+            category_name = \\'Orphan category\\',\n+            category_description = \\'Created by the upgrade process\\'';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->setOnErrorMessage(__('Error al crear la categor\u00eda', false));\n+\n+        DB::getQuery($Data);\n+\n+        return DB::getLastId();\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Upgrade/Crypt.class.php",
          "status": "added",
          "additions": 151,
          "deletions": 0,
          "patch": "@@ -0,0 +1,151 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Core\\Upgrade;\n+\n+use SP\\Account\\AccountCrypt;\n+use SP\\Account\\AccountHistory;\n+use SP\\Account\\AccountHistoryCrypt;\n+use SP\\Config\\ConfigDB;\n+use SP\\Core\\Crypt\\Hash;\n+use SP\\Core\\Exceptions\\SPException;\n+use SP\\Core\\Init;\n+use SP\\Log\\Log;\n+use SP\\Mgmt\\CustomFields\\CustomFieldsUtil;\n+use SP\\Mgmt\\Users\\UserMigrate;\n+use SP\\Storage\\DB;\n+\n+/**\n+ * Class Crypt\n+ *\n+ * @package SP\\Core\\Upgrade\n+ */\n+class Crypt\n+{\n+    /**\n+     * Migrar elementos encriptados\n+     *\n+     * @param $masterPass\n+     * @return bool\n+     * @throws \\Exception\n+     */\n+    public static function migrate(&$masterPass)\n+    {\n+        global $timeStart;\n+\n+        try {\n+            AccountHistoryCrypt::$currentMPassHash = ConfigDB::getValue('masterPwd');\n+\n+            if (!DB::beginTransaction()) {\n+                throw new SPException(SPException::SP_ERROR, __('No es posible iniciar una transacci\u00f3n', false));\n+            } elseif (!self::migrateHash($masterPass)) {\n+                throw new SPException(SPException::SP_INFO, __('Clave maestra incorrecta', false));\n+            }\n+\n+            self::migrateAccounts($masterPass);\n+            self::migrateCustomFields($masterPass);\n+            UserMigrate::setMigrateUsers();\n+\n+            if (!DB::endTransaction()) {\n+                throw new SPException(SPException::SP_ERROR, __('No es posible finalizar una transacci\u00f3n', false));\n+            }\n+\n+            debugLog('Total time: ' . (Init::microtime_float() - $timeStart));\n+\n+            return true;\n+        } catch (\\Exception $e) {\n+            if (DB::rollbackTransaction()) {\n+                debugLog('Rollback: ' . __METHOD__);\n+            }\n+\n+            throw $e;\n+        }\n+    }\n+\n+    /**\n+     * Migrar el hash de clave maestra\n+     *\n+     * @param $masterPass\n+     * @return bool\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    public static function migrateHash(&$masterPass)\n+    {\n+        $configHashMPass = ConfigDB::getValue('masterPwd');\n+\n+        // Comprobar si el hash est\u00e1 en formato anterior a 12002\n+        if (strlen($configHashMPass) === 128) {\n+            if (hash('sha256', substr($configHashMPass, 0, 64) . $masterPass) === substr($configHashMPass, 64, 64)) {\n+                $newHash = Hash::hashKey($masterPass);\n+\n+                AccountHistory::updateAccountsMPassHash($newHash);\n+\n+                ConfigDB::setValue('masterPwd', $newHash);\n+                Log::writeNewLog(__('Aviso', false), __('Se ha regenerado el HASH de clave maestra. No es necesaria ninguna acci\u00f3n.', false), Log::NOTICE);\n+\n+                return true;\n+            }\n+\n+            // Hash de clave maestra anterior a 2.0.0.17013101\n+            // Hash de clave maestra anterior a 2.0.0.17021601\n+        } elseif ((substr($configHashMPass, 72) !== false && hash_equals(crypt($masterPass, substr($configHashMPass, 0, 72)), substr($configHashMPass, 72)))\n+            || (substr($configHashMPass, 30) !== false && hash_equals(crypt($masterPass, substr($configHashMPass, 0, 30)), substr($configHashMPass, 30)))\n+        ) {\n+            ConfigDB::setValue('masterPwd', Hash::hashKey($masterPass));\n+            Log::writeNewLog(__('Aviso', false), __('Se ha regenerado el HASH de clave maestra. No es necesaria ninguna acci\u00f3n.', false), Log::NOTICE);\n+\n+            return true;\n+        }\n+\n+        return Hash::checkHashKey($masterPass, $configHashMPass);\n+    }\n+\n+    /**\n+     * Migrar claves de cuentas a nuevo formato\n+     *\n+     * @param $masterPass\n+     */\n+    private static function migrateAccounts(&$masterPass)\n+    {\n+        $AccountCrypt = new AccountCrypt();\n+        $AccountCrypt->updateOldPass($masterPass);\n+\n+        $AccountHistoryCrypt = new AccountHistoryCrypt();\n+        $AccountHistoryCrypt->updateOldPass($masterPass);\n+    }\n+\n+    /**\n+     * Migrar los datos de los campos personalizados a nuevo formato\n+     *\n+     * @param $masterPass\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     */\n+    private static function migrateCustomFields(&$masterPass)\n+    {\n+        CustomFieldsUtil::updateCustomFieldsOldCrypt($masterPass);\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Upgrade/Customer.class.php",
          "status": "modified",
          "additions": 36,
          "deletions": 14,
          "patch": "@@ -25,6 +25,7 @@\n namespace SP\\Core\\Upgrade;\n \n use SP\\Core\\Exceptions\\SPException;\n+use SP\\Core\\TaskFactory;\n use SP\\Storage\\DB;\n use SP\\Storage\\QueryData;\n \n@@ -43,33 +44,32 @@ class Customer\n      */\n     public static function fixCustomerId($customerId)\n     {\n-        $Data = new QueryData();\n-        $Data->setQuery('SELECT customer_id FROM customers ORDER BY customer_id');\n-\n-        $customers = DB::getResultsArray($Data);\n-\n-        $paramsIn = trim(str_repeat(',?', count($customers)), ',');\n-        $Data->addParam($customerId);\n-\n-        foreach ($customers as $customer) {\n-            $Data->addParam($customer->customer_id);\n-        }\n+        TaskFactory::$Message->setTask(__FUNCTION__);\n+        TaskFactory::$Message->setMessage(__('Actualizando IDs de clientes'));\n+        TaskFactory::sendTaskMessage();\n \n         try {\n             DB::beginTransaction();\n \n+            if ($customerId === 0) {\n+                $customerId = self::createOrphanCustomer();\n+            }\n+\n+            $Data = new QueryData();\n+            $Data->addParam($customerId);\n+\n             $query = /** @lang SQL */\n-                'UPDATE accHistory SET acchistory_customerId = ? WHERE acchistory_customerId NOT IN (' . $paramsIn . ') OR acchistory_customerId IS NULL';\n+                'UPDATE accHistory SET acchistory_customerId = ? WHERE acchistory_customerId NOT IN (SELECT customer_id FROM customers ORDER BY customer_id) OR acchistory_customerId IS NULL';\n             $Data->setQuery($query);\n \n             DB::getQuery($Data);\n \n             $query = /** @lang SQL */\n-                'UPDATE accounts SET account_customerId = ? WHERE account_customerId NOT IN (' . $paramsIn . ') OR account_customerId IS NULL';\n+                'UPDATE accounts SET account_customerId = ? WHERE account_customerId NOT IN (SELECT customer_id FROM customers ORDER BY customer_id) OR account_customerId IS NULL';\n             $Data->setQuery($query);\n \n             DB::getQuery($Data);\n-\n+            \n             DB::endTransaction();\n \n             return true;\n@@ -79,4 +79,26 @@ public static function fixCustomerId($customerId)\n             return false;\n         }\n     }\n+\n+    /**\n+     * Crear un cliente para elementos hu\u00e9rfanos\n+     *\n+     * @return int\n+     */\n+    public static function createOrphanCustomer()\n+    {\n+        $query = /** @lang SQL */\n+            'INSERT INTO customers SET\n+            customer_name = \\'Orphan customer\\',\n+            customer_hash = MD5(\\'Orphan customer\\'),\n+            customer_description = \\'Created by the upgrade process\\'';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->setOnErrorMessage(__('Error al crear el cliente', false));\n+\n+        DB::getQuery($Data);\n+\n+        return DB::getLastId();\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Upgrade/Group.class.php",
          "status": "modified",
          "additions": 44,
          "deletions": 13,
          "patch": "@@ -25,6 +25,7 @@\n namespace SP\\Core\\Upgrade;\n \n use SP\\Core\\Exceptions\\SPException;\n+use SP\\Core\\TaskFactory;\n use SP\\Storage\\DB;\n use SP\\Storage\\QueryData;\n \n@@ -34,37 +35,42 @@\n  */\n class Group\n {\n+    /**\n+     * @var int\n+     */\n+    protected static $orphanGroupId;\n+\n     /**\n      * Actualizar registros con grupos no existentes\n      * @param int $groupId Id de grupo por defecto\n      * @return bool\n      */\n     public static function fixGroupId($groupId)\n     {\n-        $Data = new QueryData();\n-        $Data->setQuery('SELECT usergroup_id FROM usrGroups ORDER BY usergroup_id');\n-\n-        $groups = DB::getResultsArray($Data);\n-\n-        $paramsIn = trim(str_repeat(',?', count($groups)), ',');\n-        $Data->addParam($groupId);\n-\n-        foreach ($groups as $group) {\n-            $Data->addParam($group->usergroup_id);\n-        }\n+        TaskFactory::$Message->setTask(__FUNCTION__);\n+        TaskFactory::$Message->setMessage(__('Actualizando IDs de grupos'));\n+        TaskFactory::sendTaskMessage();\n \n         try {\n             DB::beginTransaction();\n \n+            if ($groupId === 0){\n+                $groupId = self::$orphanGroupId ?: self::createOrphanGroup();\n+            }\n+\n+            $Data = new QueryData();\n+\n             $query = /** @lang SQL */\n-                'UPDATE usrData SET user_groupId = ? WHERE user_groupId NOT IN (' . $paramsIn . ') OR user_groupId IS NULL';\n+                'UPDATE usrData SET user_groupId = ? WHERE user_groupId NOT IN (SELECT usergroup_id FROM usrGroups ORDER BY usergroup_id) OR user_groupId IS NULL';\n             $Data->setQuery($query);\n+            $Data->addParam($groupId);\n \n             DB::getQuery($Data);\n \n             $query = /** @lang SQL */\n-                'DELETE FROM usrToGroups WHERE usertogroup_groupId <> ? AND usertogroup_groupId NOT IN (' . $paramsIn . ') OR usertogroup_groupId IS NULL';\n+                'DELETE FROM usrToGroups WHERE usertogroup_groupId NOT IN (SELECT usergroup_id FROM usrGroups ORDER BY usergroup_id) OR usertogroup_groupId IS NULL';\n             $Data->setQuery($query);\n+            $Data->setParams([]);\n \n             DB::getQuery($Data);\n \n@@ -77,4 +83,29 @@ public static function fixGroupId($groupId)\n             return false;\n         }\n     }\n+\n+    /**\n+     * Crear un grupo para elementos hu\u00e9rfanos\n+     *\n+     * @return int\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     */\n+    public static function createOrphanGroup()\n+    {\n+        $query = /** @lang SQL */\n+            'INSERT INTO usrGroups SET\n+            usergroup_name = \\'Orphan group\\',\n+            usergroup_description = \\'Created by the upgrade process\\'';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->setOnErrorMessage(__('Error al crear el grupo', false));\n+\n+        DB::getQuery($Data);\n+\n+        self::$orphanGroupId = DB::getLastId();\n+\n+        return self::$orphanGroupId;\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Upgrade/Profile.class.php",
          "status": "modified",
          "additions": 40,
          "deletions": 11,
          "patch": "@@ -25,6 +25,8 @@\n namespace SP\\Core\\Upgrade;\n \n use SP\\Core\\Exceptions\\SPException;\n+use SP\\Core\\TaskFactory;\n+use SP\\DataModel\\ProfileData;\n use SP\\Storage\\DB;\n use SP\\Storage\\QueryData;\n \n@@ -35,6 +37,8 @@\n  */\n class Profile\n {\n+    protected static $orphanProfileId;\n+\n     /**\n      * Actualizar registros con perfiles no existentes\n      *\n@@ -44,23 +48,22 @@ class Profile\n     public static function fixProfilesId($profileId)\n     {\n         $Data = new QueryData();\n-        $Data->setQuery('SELECT userprofile_id FROM usrProfiles ORDER BY userprofile_id');\n-\n-        $profiles = DB::getResultsArray($Data);\n-\n-        $paramsIn = trim(str_repeat(',?', count($profiles)), ',');\n-        $Data->addParam($profileId);\n-\n-        foreach ($profiles as $profile) {\n-            $Data->addParam($profile->userprofile_id);\n-        }\n \n         try {\n+            TaskFactory::$Message->setTask(__FUNCTION__);\n+            TaskFactory::$Message->setMessage(__('Actualizando IDs de perfil'));\n+            TaskFactory::sendTaskMessage();\n+\n             DB::beginTransaction();\n \n+            if ($profileId === 0){\n+                $profileId = self::$orphanProfileId ?: self::createOrphanProfile();\n+            }\n+\n             $query = /** @lang SQL */\n-                'UPDATE usrData SET user_profileId = ? WHERE user_profileId NOT IN (' . $paramsIn . ') OR user_profileId IS NULL';\n+                'UPDATE usrData SET user_profileId = ? WHERE user_profileId NOT IN (SELECT userprofile_id FROM usrProfiles ORDER BY userprofile_id) OR user_profileId IS NULL';\n             $Data->setQuery($query);\n+            $Data->addParam($profileId);\n \n             DB::getQuery($Data);\n \n@@ -73,4 +76,30 @@ public static function fixProfilesId($profileId)\n             return false;\n         }\n     }\n+\n+    /**\n+     * Crear un perfil para elementos hu\u00e9rfanos\n+     *\n+     * @return int\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     */\n+    public static function createOrphanProfile()\n+    {\n+        $query = /** @lang SQL */\n+            'INSERT INTO usrProfiles SET\n+            userprofile_name = \\'Orphan profile\\',\n+            userProfile_profile = ?';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam(serialize(new ProfileData()));\n+        $Data->setOnErrorMessage(__('Error al crear perfil', false));\n+\n+        DB::getQuery($Data);\n+\n+        self::$orphanProfileId = DB::getLastId();\n+\n+        return self::$orphanProfileId;\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Upgrade/Upgrade.class.php",
          "status": "renamed",
          "additions": 196,
          "deletions": 54,
          "patch": "@@ -23,27 +23,28 @@\n  *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n  */\n \n-namespace SP\\Core;\n+namespace SP\\Core\\Upgrade;\n \n use SP\\Config\\Config;\n use SP\\Config\\ConfigData;\n use SP\\Config\\ConfigDB;\n+use SP\\Controller\\MainActionController;\n use SP\\Core\\Exceptions\\SPException;\n-use SP\\Core\\Upgrade\\Account;\n-use SP\\Core\\Upgrade\\Group;\n-use SP\\Core\\Upgrade\\Profile;\n-use SP\\Core\\Upgrade\\User;\n-use SP\\Core\\Upgrade\\Category;\n-use SP\\Core\\Upgrade\\Customer;\n+use SP\\Core\\Init;\n+use SP\\Core\\Session as CoreSession;\n+use SP\\Core\\TaskFactory;\n use SP\\Http\\Request;\n use SP\\Log\\Email;\n use SP\\Log\\Log;\n use SP\\Mgmt\\CustomFields\\CustomFieldsUtil;\n use SP\\Mgmt\\Profiles\\ProfileUtil;\n+use SP\\Mgmt\\Users\\User;\n use SP\\Mgmt\\Users\\UserMigrate;\n use SP\\Mgmt\\Users\\UserPreferencesUtil;\n use SP\\Storage\\DB;\n use SP\\Storage\\QueryData;\n+use SP\\Util\\Util;\n+use SP\\Core\\Upgrade\\User as UserUpgrade;\n \n defined('APP_ROOT') || die();\n \n@@ -52,44 +53,46 @@\n  */\n class Upgrade\n {\n-    private static $dbUpgrade = [110, 1121, 1122, 1123, 11213, 11219, 11220, 12001, 12002, 1316011001, 1316100601, 20017011302, 20017011701, 20017012901];\n+    private static $dbUpgrade = [110, 1121, 1122, 1123, 11213, 11219, 11220, 12001, 12002, 1316011001, 1316100601, 20017011302, 20017011701, 21017022601];\n     private static $cfgUpgrade = [1124, 1316020501, 20017011202];\n     private static $auxUpgrade = [12001, 12002, 20017010901, 20017011202];\n+    private static $appUpgrade = [21017022601];\n \n     /**\n      * Inicia el proceso de actualizaci\u00f3n de la BBDD.\n      *\n      * @param int $version con la versi\u00f3n de la BBDD actual\n      * @return bool\n-     * @throws \\SP\\Core\\Exceptions\\QueryException\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n-     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n-     * @throws \\InvalidArgumentException\n-     * @throws \\phpmailer\\phpmailerException\n      * @throws SPException\n      */\n     public static function doUpgrade($version)\n     {\n         foreach (self::$dbUpgrade as $upgradeVersion) {\n             if ($version < $upgradeVersion) {\n-                if (self::auxPreUpgrades($upgradeVersion) === false) {\n-\n+                if (self::auxPreDbUpgrade($upgradeVersion) === false) {\n                     throw new SPException(SPException::SP_CRITICAL,\n                         __('Error al aplicar la actualizaci\u00f3n auxiliar', false),\n                         __('Compruebe el registro de eventos para m\u00e1s detalles', false));\n                 }\n \n                 if (self::upgradeDB($upgradeVersion) === false) {\n-\n-                    throw new SPException(SPException::SP_CRITICAL, __('Error al aplicar la actualizaci\u00f3n de la Base de Datos', false),\n+                    throw new SPException(SPException::SP_CRITICAL,\n+                        __('Error al aplicar la actualizaci\u00f3n de la Base de Datos', false),\n                         __('Compruebe el registro de eventos para m\u00e1s detalles', false));\n                 }\n             }\n         }\n \n+        foreach (self::$appUpgrade as $upgradeVersion) {\n+            if ($version < $upgradeVersion && self::appUpgrades($upgradeVersion) === false) {\n+                throw new SPException(SPException::SP_CRITICAL,\n+                    __('Error al aplicar la actualizaci\u00f3n de la aplicaci\u00f3n', false),\n+                    __('Compruebe el registro de eventos para m\u00e1s detalles', false));\n+            }\n+        }\n+\n         foreach (self::$auxUpgrade as $upgradeVersion) {\n             if ($version < $upgradeVersion && self::auxUpgrades($upgradeVersion) === false) {\n-\n                 throw new SPException(SPException::SP_CRITICAL,\n                     __('Error al aplicar la actualizaci\u00f3n auxiliar', false),\n                     __('Compruebe el registro de eventos para m\u00e1s detalles', false));\n@@ -105,18 +108,27 @@ public static function doUpgrade($version)\n      * @param $version\n      * @return bool\n      */\n-    private static function auxPreUpgrades($version)\n+    private static function auxPreDbUpgrade($version)\n     {\n+        if ((int)ConfigDB::getValue('version') >= $version) {\n+            return true;\n+        }\n+\n         switch ($version) {\n             case 1316011001:\n+                debugLog(__FUNCTION__ . ': ' . $version);\n+\n                 return self::upgradeDB(1300000000);\n             case 1316100601:\n-                return Account::fixAccountsId()\n-                    && User::fixUsersId(Request::analyze('userid', 1))\n-                    && Group::fixGroupId(Request::analyze('groupid', 1))\n-                    && Profile::fixProfilesId(Request::analyze('profileid', 1))\n-                    && Category::fixCategoriesId(Request::analyze('categoryid', 1))\n-                    && Customer::fixCustomerId(Request::analyze('customerid', 1));\n+                debugLog(__FUNCTION__ . ': ' . $version);\n+\n+                return\n+                    Account::fixAccountsId()\n+                    && UserUpgrade::fixUsersId(Request::analyze('userid', 0))\n+                    && Group::fixGroupId(Request::analyze('groupid', 0))\n+                    && Profile::fixProfilesId(Request::analyze('profileid', 0))\n+                    && Category::fixCategoriesId(Request::analyze('categoryid', 0))\n+                    && Customer::fixCustomerId(Request::analyze('customerid', 0));\n         }\n \n         return true;\n@@ -137,22 +149,27 @@ private static function upgradeDB($version)\n \n         $queries = self::getQueriesFromFile($version);\n \n-        if (count($queries) === 0 || (int)ConfigDB::getValue('version') === $version) {\n+        if (count($queries) === 0 || (int)ConfigDB::getValue('version') >= $version) {\n             $LogMessage->addDescription(__('No es necesario actualizar la Base de Datos.', false));\n             $Log->writeLog();\n             return true;\n         }\n \n+        TaskFactory::$Message->setTask(__('Actualizar BBDD'));\n+        TaskFactory::$Message->setMessage(sprintf('%s : %s', __('Versi\u00f3n'), $version));\n+        TaskFactory::sendTaskMessage();\n+\n+        debugLog(__FUNCTION__ . ': ' . $version);\n+\n         $Data = new QueryData();\n \n         foreach ($queries as $query) {\n             try {\n                 $Data->setQuery($query);\n                 DB::getQuery($Data);\n             } catch (SPException $e) {\n-                $LogMessage->addDescription(__('Error al aplicar la actualizaci\u00f3n de la Base de Datos.', false));\n+                $LogMessage->addDescription(__('Error al aplicar la actualizaci\u00f3n de la Base de Datos', false));\n                 $LogMessage->addDetails('ERROR', sprintf('%s (%s)', $e->getMessage(), $e->getCode()));\n-                $LogMessage->addDetails('SQL', $query);\n                 $Log->setLogLevel(Log::ERROR);\n                 $Log->writeLog();\n \n@@ -197,44 +214,78 @@ private static function getQueriesFromFile($filename)\n     }\n \n     /**\n-     * Aplicar actualizaciones auxiliares.\n+     * Actualizaciones de la aplicaci\u00f3n\n      *\n-     * @param $version int El n\u00famero de versi\u00f3n\n+     * @param $version\n      * @return bool\n-     * @throws \\SP\\Core\\Exceptions\\QueryException\n-     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n-     * @throws \\phpmailer\\phpmailerException\n-     * @throws \\InvalidArgumentException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      */\n-    private static function auxUpgrades($version)\n+    private static function appUpgrades($version)\n     {\n         switch ($version) {\n-            case 12001:\n-                return (ProfileUtil::migrateProfiles() && UserMigrate::migrateUsersGroup());\n-            case 12002:\n-                return UserMigrate::setMigrateUsers();\n-            case 20017010901:\n-                return CustomFieldsUtil::migrateCustomFields() && UserPreferencesUtil::migrate();\n-            case 20017011202:\n-                return UserPreferencesUtil::migrate();\n+            case 21017022601:\n+                $dbResult = true;\n+                $databaseVersion = (int)str_replace('.', '', ConfigDB::getValue('version'));\n+\n+                if ($databaseVersion < $version) {\n+                    if (!self::upgradeDB($version)) {\n+                        $dbResult = false;\n+                    }\n+                }\n+\n+                $masterPass = Request::analyzeEncrypted('masterkey');\n+                $UserData = User::getItem()->getByLogin(Request::analyze('userlogin'));\n+\n+                if (!is_object($UserData)) {\n+                    throw new SPException(SPException::SP_ERROR, __('Error al obtener los datos del usuario', false));\n+                }\n+\n+                @session_start();\n+\n+                CoreSession::setUserData($UserData);\n+\n+                @session_write_close();\n+\n+                return $dbResult === true\n+                    && !empty($masterPass)\n+                    && Crypt::migrate($masterPass);\n         }\n \n-        return true;\n+        return false;\n     }\n \n     /**\n-     * Comprueba si es necesario actualizar la BBDD.\n+     * Aplicar actualizaciones auxiliares.\n      *\n-     * @param int $version con el n\u00famero de versi\u00f3n actual\n-     * @returns bool\n+     * @param $version int El n\u00famero de versi\u00f3n\n+     * @return bool\n      */\n-    public static function needDBUpgrade($version)\n+    private static function auxUpgrades($version)\n     {\n-        $latestUpgrade = self::$dbUpgrade[count(self::$dbUpgrade) - 1];\n+        try {\n+            switch ($version) {\n+                case 12001:\n+                    debugLog(__FUNCTION__ . ': ' . $version);\n+\n+                    return (ProfileUtil::migrateProfiles() && UserMigrate::migrateUsersGroup());\n+                case 12002:\n+                    debugLog(__FUNCTION__ . ': ' . $version);\n+\n+                    return UserMigrate::setMigrateUsers();\n+                case 20017010901:\n+                    debugLog(__FUNCTION__ . ': ' . $version);\n+\n+                    return CustomFieldsUtil::migrateCustomFields() && UserPreferencesUtil::migrate();\n+                case 20017011202:\n+                    debugLog(__FUNCTION__ . ': ' . $version);\n+\n+                    return UserPreferencesUtil::migrate();\n+            }\n+        } catch (SPException $e) {\n+            return false;\n+        }\n \n-        return version_compare($version, $latestUpgrade) < 0;\n+        return true;\n     }\n \n     /**\n@@ -245,9 +296,7 @@ public static function needDBUpgrade($version)\n      */\n     public static function needConfigUpgrade($version)\n     {\n-        $latestUpgrade = self::$cfgUpgrade[count(self::$cfgUpgrade) - 1];\n-\n-        return version_compare($version, $latestUpgrade) < 0;\n+        return version_compare($version, self::$cfgUpgrade[count(self::$cfgUpgrade) - 1]) < 0;\n     }\n \n     /**\n@@ -265,6 +314,8 @@ public static function upgradeConfig($version)\n             if (version_compare($version, $upgradeVersion) < 0) {\n                 switch ($upgradeVersion) {\n                     case 20017011202:\n+                        debugLog(__FUNCTION__ . ': ' . $version);\n+\n                         $Config->setSiteTheme('material-blue');\n                         $Config->setConfigVersion($upgradeVersion);\n                         Config::saveConfig($Config, false);\n@@ -398,4 +449,95 @@ private static function getConfigParams()\n             'setWikiSearchUrl' => ['wikisearchurl', 'wiki_searchurl']\n         ];\n     }\n+\n+    /**\n+     * Comrpueba y actualiza la versi\u00f3n de la BBDD.\n+     *\n+     * @return int|false\n+     */\n+    public static function checkDbVersion()\n+    {\n+        $appVersion = (int)implode('', Util::getVersion(true));\n+        $databaseVersion = (int)str_replace('.', '', ConfigDB::getValue('version'));\n+\n+        if ($databaseVersion < $appVersion\n+            && Request::analyze('nodbupgrade', 0) === 0\n+            && self::needDBUpgrade($databaseVersion)\n+        ) {\n+            if (!Init::checkMaintenanceMode(true)) {\n+                self::setUpgradeKey('db');\n+            } else {\n+                $Controller = new MainActionController();\n+                $Controller->doAction($databaseVersion);\n+            }\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Comprueba si es necesario actualizar la BBDD.\n+     *\n+     * @param int $version con el n\u00famero de versi\u00f3n actual\n+     * @returns bool\n+     */\n+    private static function needDBUpgrade($version)\n+    {\n+        return version_compare($version, self::$dbUpgrade[count(self::$dbUpgrade) - 1]) < 0;\n+    }\n+\n+    /**\n+     * Establecer la key de actualizaci\u00f3n\n+     *\n+     * @param string $type Tipo de actualizaci\u00f3n\n+     */\n+    private static function setUpgradeKey($type)\n+    {\n+        $upgradeKey = Config::getConfig()->getUpgradeKey();\n+\n+        if (empty($upgradeKey)) {\n+            Config::getConfig()->setUpgradeKey(Util::generateRandomBytes(32));\n+        }\n+\n+        Config::getConfig()->setMaintenance(true);\n+        Config::saveConfig(null, false);\n+\n+        Init::initError(__('La aplicaci\u00f3n necesita actualizarse'), sprintf(__('Si es un administrador pulse en el enlace: %s'), '<a href=\"index.php?a=upgrade&type=' . $type . '\">' . __('Actualizar') . '</a>'));\n+    }\n+\n+    /**\n+     * Comrpueba y actualiza la versi\u00f3n de la aplicaci\u00f3n.\n+     *\n+     * @return int|false\n+     */\n+    public static function checkAppVersion()\n+    {\n+        $appVersion = (int)Config::getConfig()->getConfigVersion();\n+\n+        if (self::needAppUpgrade($appVersion)) {\n+            if (!Init::checkMaintenanceMode(true)) {\n+                self::setUpgradeKey('app');\n+            } else {\n+                $Controller = new MainActionController();\n+                $Controller->doAction($appVersion);\n+            }\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Comprueba si es necesario actualizar los componentes de la aplicaci\u00f3n.\n+     *\n+     * @param int $version con el n\u00famero de versi\u00f3n actual\n+     * @returns bool\n+     */\n+    private static function needAppUpgrade($version)\n+    {\n+        return version_compare($version, self::$appUpgrade[count(self::$appUpgrade) - 1]) < 0;\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/Upgrade/User.class.php",
          "status": "modified",
          "additions": 81,
          "deletions": 11,
          "patch": "@@ -24,7 +24,12 @@\n \n namespace SP\\Core\\Upgrade;\n \n+use Defuse\\Crypto\\Exception\\CryptoException;\n use SP\\Core\\Exceptions\\SPException;\n+use SP\\Core\\OldCrypt;\n+use SP\\Core\\TaskFactory;\n+use SP\\DataModel\\UserLoginData;\n+use SP\\Mgmt\\Users\\UserPass;\n use SP\\Storage\\DB;\n use SP\\Storage\\QueryData;\n \n@@ -43,23 +48,34 @@ class User\n      */\n     public static function fixUsersId($userId)\n     {\n-        $Data = new QueryData();\n-        $Data->setQuery('SELECT user_id FROM usrData ORDER BY user_id');\n+        TaskFactory::$Message->setTask(__FUNCTION__);\n+        TaskFactory::$Message->setMessage(__('Actualizando IDs de usuarios'));\n+        TaskFactory::sendTaskMessage();\n \n-        $users = DB::getResultsArray($Data);\n+        try {\n+            DB::beginTransaction();\n \n-        $paramsIn = trim(str_repeat(',?', count($users)), ',');\n-        $Data->addParam($userId);\n+            $Data = new QueryData();\n+            $Data->setQuery('SELECT user_id FROM usrData ORDER BY user_id');\n \n-        foreach ($users as $user) {\n-            $Data->addParam($user->user_id);\n-        }\n+            $users = DB::getResultsArray($Data);\n \n-        try {\n-            DB::beginTransaction();\n+            $paramsIn = trim(str_repeat(',?', count($users)), ',');\n+\n+            if ($userId === 0) {\n+                $groupId = Group::createOrphanGroup();\n+                $profileId = Profile::createOrphanProfile();\n+                $userId = self::createOrphanUser($groupId, $profileId);\n+            }\n+\n+            $Data->addParam($userId);\n+\n+            foreach ($users as $user) {\n+                $Data->addParam($user->user_id);\n+            }\n \n             $query = /** @lang SQL */\n-                'UPDATE accounts SET account_userId = ? WHERE account_userId NOT IN (' . $paramsIn . ') OR account_userId IS NULL';\n+                'UPDATE accounts SET account_userId = ? WHERE account_userId NOT IN (' . $paramsIn . ') OR account_userId IS NULL ';\n             $Data->setQuery($query);\n \n             DB::getQuery($Data);\n@@ -109,4 +125,58 @@ public static function fixUsersId($userId)\n             return false;\n         }\n     }\n+\n+    /**\n+     * Crear un usuario para elementos hu\u00e9rfanos\n+     *\n+     * @param $groupId\n+     * @param $profileId\n+     * @return int\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     */\n+    public static function createOrphanUser($groupId, $profileId)\n+    {\n+        $query = /** @lang SQL */\n+            'INSERT INTO usrData SET\n+            user_name = \\'Orphan User\\',\n+            user_login = \\'orphan_user\\',\n+            user_notes = \\'Created by the upgrade process\\',\n+            user_groupId = ?,\n+            user_profileId = ?,\n+            user_mIV = \\'\\',\n+            user_isDisabled = 1,\n+            user_pass = \\'\\',\n+            user_hashSalt = \\'\\'';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($groupId);\n+        $Data->addParam($profileId);\n+        $Data->setOnErrorMessage(__('Error al crear el usuario', false));\n+\n+        DB::getQuery($Data);\n+\n+        return DB::getLastId();\n+    }\n+\n+    /**\n+     * Actualizar la clave maestra\n+     *\n+     * @param UserLoginData $UserData\n+     * @return bool\n+     */\n+    public static function upgradeMasterKey(UserLoginData $UserData)\n+    {\n+        $key = OldCrypt::generateAesKey($UserData->getLoginPass() . $UserData->getLogin());\n+        $mKey = OldCrypt::getDecrypt($UserData->getUserMPass(), $UserData->getUserMKey(), $key);\n+\n+        try {\n+            return $mKey && UserPass::updateUserMPass($mKey, $UserData);\n+        } catch (SPException $e) {\n+        } catch (CryptoException $e) {\n+        }\n+\n+        return false;\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Core/XmlExport.class.php",
          "status": "modified",
          "additions": 12,
          "deletions": 5,
          "patch": "@@ -24,8 +24,11 @@\n \n namespace SP\\Core;\n \n+use Defuse\\Crypto\\Exception\\CryptoException;\n use SP\\Account\\AccountUtil;\n use SP\\Config\\Config;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\Crypt\\Hash;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\DataModel\\CategoryData;\n use SP\\Log\\Email;\n@@ -270,22 +273,22 @@ private function appendNode(\\DOMElement $node)\n                 $nodeXML = $this->xml->saveXML($node);\n \n                 // Crear los datos encriptados con la informaci\u00f3n del nodo\n-                $encrypted = Crypt::mkEncrypt($nodeXML, $this->exportPass);\n-                $encryptedIV = Crypt::$strInitialVector;\n+                $securedKey = Crypt::makeSecuredKey($this->exportPass);\n+                $encrypted = Crypt::encrypt($nodeXML, $securedKey);\n \n                 // Buscar si existe ya un nodo para el conjunto de datos encriptados\n                 $encryptedNode = $this->root->getElementsByTagName('Encrypted')->item(0);\n \n                 if (!$encryptedNode instanceof \\DOMElement) {\n                     $encryptedNode = $this->xml->createElement('Encrypted');\n-                    $encryptedNode->setAttribute('hash', Crypt::mkHashPassword($this->exportPass));\n+                    $encryptedNode->setAttribute('hash', Hash::hashKey($this->exportPass));\n                 }\n \n                 // Crear el nodo hijo con los datos encriptados\n                 $encryptedData = $this->xml->createElement('Data', base64_encode($encrypted));\n \n-                $encryptedDataIV = $this->xml->createAttribute('iv');\n-                $encryptedDataIV->value = base64_encode($encryptedIV);\n+                $encryptedDataIV = $this->xml->createAttribute('key');\n+                $encryptedDataIV->value = $securedKey;\n \n                 // A\u00f1adir nodos de datos\n                 $encryptedData->appendChild($encryptedDataIV);\n@@ -298,13 +301,17 @@ private function appendNode(\\DOMElement $node)\n             }\n         } catch (\\DOMException $e) {\n             throw new SPException(SPException::SP_WARNING, $e->getMessage(), __FUNCTION__);\n+        } catch (CryptoException $e) {\n+            throw new SPException(SPException::SP_WARNING, $e->getMessage(), __FUNCTION__);\n         }\n     }\n \n     /**\n      * Crear el nodo con los datos de los clientes\n      *\n      * #@throws SPException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n      */\n     private function createCustomers()\n     {"
        },
        {
          "filename": "inc/SP/DataModel/AccountData.class.php",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -77,9 +77,9 @@ class AccountData extends DataModelBase implements JsonSerializable, DataModelIn\n      */\n     public $account_pass = '';\n     /**\n-     * @var string El vector de inicializaci\u00f3n de la cuenta.\n+     * @var string La clave de encriptaci\u00f3n de la cuenta\n      */\n-    public $account_IV = '';\n+    public $account_key = '';\n     /**\n      * @var string Las nosta de la cuenta.\n      */\n@@ -207,17 +207,17 @@ public function setAccountPass($account_pass)\n     /**\n      * @return string\n      */\n-    public function getAccountIV()\n+    public function getAccountKey()\n     {\n-        return $this->account_IV;\n+        return $this->account_key;\n     }\n \n     /**\n-     * @param string $account_IV\n+     * @param string $account_key\n      */\n-    public function setAccountIV($account_IV)\n+    public function setAccountKey($account_key)\n     {\n-        $this->account_IV = $account_IV;\n+        $this->account_key = $account_key;\n     }\n \n     /**"
        },
        {
          "filename": "inc/SP/DataModel/ApiTokenData.class.php",
          "status": "added",
          "additions": 212,
          "deletions": 0,
          "patch": "@@ -0,0 +1,212 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\DataModel;\n+\n+use SP\\Core\\Crypt\\Vault;\n+\n+/**\n+ * Class ApiTokenData\n+ *\n+ * @package SP\\DataModel\n+ */\n+class ApiTokenData extends DataModelBase implements DataModelInterface\n+{\n+    /**\n+     * @var int\n+     */\n+    public $authtoken_id;\n+    /**\n+     * @var Vault\n+     */\n+    public $authtoken_vault;\n+    /**\n+     * @var int\n+     */\n+    public $authtoken_userId;\n+    /**\n+     * @var string\n+     */\n+    public $authtoken_token = '';\n+    /**\n+     * @var int\n+     */\n+    public $authtoken_createdBy;\n+    /**\n+     * @var int\n+     */\n+    public $authtoken_startDate;\n+    /**\n+     * @var int\n+     */\n+    public $authtoken_actionId;\n+    /**\n+     * @var string\n+     */\n+    public $authtoken_hash;\n+\n+    /**\n+     * @return int\n+     */\n+    public function getAuthtokenId()\n+    {\n+        return (int)$this->authtoken_id;\n+    }\n+\n+    /**\n+     * @param int $authtoken_id\n+     */\n+    public function setAuthtokenId($authtoken_id)\n+    {\n+        $this->authtoken_id = (int)$authtoken_id;\n+    }\n+\n+    /**\n+     * @return Vault\n+     */\n+    public function getAuthtokenVault()\n+    {\n+        return $this->authtoken_vault;\n+    }\n+\n+    /**\n+     * @param Vault $authtoken_vault\n+     */\n+    public function setAuthtokenVault(Vault $authtoken_vault)\n+    {\n+        $this->authtoken_vault = $authtoken_vault;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getAuthtokenUserId()\n+    {\n+        return (int)$this->authtoken_userId;\n+    }\n+\n+    /**\n+     * @param int $authtoken_userId\n+     */\n+    public function setAuthtokenUserId($authtoken_userId)\n+    {\n+        $this->authtoken_userId = (int)$authtoken_userId;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getAuthtokenToken()\n+    {\n+        return $this->authtoken_token;\n+    }\n+\n+    /**\n+     * @param string $authtoken_token\n+     */\n+    public function setAuthtokenToken($authtoken_token)\n+    {\n+        $this->authtoken_token = $authtoken_token;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getAuthtokenCreatedBy()\n+    {\n+        return (int)$this->authtoken_createdBy;\n+    }\n+\n+    /**\n+     * @param int $authtoken_createdBy\n+     */\n+    public function setAuthtokenCreatedBy($authtoken_createdBy)\n+    {\n+        $this->authtoken_createdBy = (int)$authtoken_createdBy;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getAuthtokenStartDate()\n+    {\n+        return (int)$this->authtoken_startDate;\n+    }\n+\n+    /**\n+     * @param int $authtoken_startDate\n+     */\n+    public function setAuthtokenStartDate($authtoken_startDate)\n+    {\n+        $this->authtoken_startDate = (int)$authtoken_startDate;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getId()\n+    {\n+        return (int)$this->authtoken_id;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getName()\n+    {\n+        return '';\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getAuthtokenActionId()\n+    {\n+        return (int)$this->authtoken_actionId;\n+    }\n+\n+    /**\n+     * @param int $authtoken_actionId\n+     */\n+    public function setAuthtokenActionId($authtoken_actionId)\n+    {\n+        $this->authtoken_actionId = (int)$authtoken_actionId;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getAuthtokenHash()\n+    {\n+        return $this->authtoken_hash;\n+    }\n+\n+    /**\n+     * @param string $authtoken_hash\n+     */\n+    public function setAuthtokenHash($authtoken_hash)\n+    {\n+        $this->authtoken_hash = $authtoken_hash;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/DataModel/CustomFieldBaseData.class.php",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -48,7 +48,7 @@ class CustomFieldBaseData extends DataModelBase\n     /**\n      * @var string\n      */\n-    public $customfielddata_iv = '';\n+    public $customfielddata_key = '';\n     /**\n      * @var string\n      */\n@@ -133,17 +133,17 @@ public function setCustomfielddataData($customfielddata_data)\n     /**\n      * @return string\n      */\n-    public function getCustomfielddataIv()\n+    public function getCustomfielddataKey()\n     {\n-        return $this->customfielddata_iv;\n+        return $this->customfielddata_key;\n     }\n \n     /**\n-     * @param string $customfielddata_iv\n+     * @param string $customfielddata_key\n      */\n-    public function setCustomfielddataIv($customfielddata_iv)\n+    public function setCustomfielddataKey($customfielddata_key)\n     {\n-        $this->customfielddata_iv = $customfielddata_iv;\n+        $this->customfielddata_key = $customfielddata_key;\n     }\n \n     /**"
        },
        {
          "filename": "inc/SP/DataModel/PublicLinkData.class.php",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -81,6 +81,10 @@ class PublicLinkData extends PublicLinkBaseData\n      * @var array\n      */\n     protected $useInfo = [];\n+    /**\n+     * @var string\n+     */\n+    protected $data;\n \n     /**\n      * @return int\n@@ -289,4 +293,20 @@ public function addUseInfo($useInfo)\n     {\n         $this->useInfo[] = $useInfo;\n     }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getData()\n+    {\n+        return $this->data;\n+    }\n+\n+    /**\n+     * @param string $data\n+     */\n+    public function setData($data)\n+    {\n+        $this->data = $data;\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/DataModel/TrackData.class.php",
          "status": "added",
          "additions": 189,
          "deletions": 0,
          "patch": "@@ -0,0 +1,189 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\DataModel;\n+use SP\\Core\\Exceptions\\InvalidArgumentException;\n+use SP\\Core\\Exceptions\\SPException;\n+\n+/**\n+ * Class TrackData\n+ *\n+ * @package SP\\DataModel\n+ */\n+class TrackData extends DataModelBase\n+{\n+    /**\n+     * @var int\n+     */\n+    public $track_id;\n+    /**\n+     * @var int\n+     */\n+    public $track_userId = 0;\n+    /**\n+     * @var string\n+     */\n+    public $track_source = '';\n+    /**\n+     * @var int\n+     */\n+    public $track_time = 0;\n+    /**\n+     * @var string\n+     */\n+    public $track_ipv4 = '';\n+    /**\n+     * @var string\n+     */\n+    public $track_ipv6 = '';\n+\n+    /**\n+     * @return int\n+     */\n+    public function getTrackId()\n+    {\n+        return (int)$this->track_id;\n+    }\n+\n+    /**\n+     * @param int $track_id\n+     */\n+    public function setTrackId($track_id)\n+    {\n+        $this->track_id = (int)$track_id;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getTrackUserId()\n+    {\n+        return (int)$this->track_userId;\n+    }\n+\n+    /**\n+     * @param int $track_userId\n+     */\n+    public function setTrackUserId($track_userId)\n+    {\n+        $this->track_userId = (int)$track_userId;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getTrackSource()\n+    {\n+        return $this->track_source;\n+    }\n+\n+    /**\n+     * @param string $track_source\n+     */\n+    public function setTrackSource($track_source)\n+    {\n+        $this->track_source = $track_source;\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getTrackTime()\n+    {\n+        return (int)$this->track_time;\n+    }\n+\n+    /**\n+     * @param int $track_time\n+     */\n+    public function setTrackTime($track_time)\n+    {\n+        $this->track_time = (int)$track_time;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getTrackIpv4()\n+    {\n+        return @inet_ntop($this->track_ipv4);\n+    }\n+\n+    /**\n+     * @param string $track_ipv4\n+     */\n+    public function setTrackIpv4($track_ipv4)\n+    {\n+        $this->track_ipv4 = @inet_pton($track_ipv4);\n+    }\n+\n+    /**\n+     * @param string $track_ip\n+     * @throws \\SP\\Core\\Exceptions\\InvalidArgumentException\n+     */\n+    public function setTrackIp($track_ip)\n+    {\n+        $ip = @inet_pton($track_ip);\n+\n+        if (strlen($ip) === 4) {\n+            $this->track_ipv4 = $ip;\n+        } elseif (strlen($ip) > 4) {\n+            $this->track_ipv6 = $ip;\n+        } elseif ($ip === false) {\n+            throw new InvalidArgumentException(SPException::SP_ERROR, __('IP inv\u00e1lida'));\n+        }\n+    }\n+\n+    /**\n+     * @return int\n+     */\n+    public function getTrackIpv4Bin()\n+    {\n+        return $this->track_ipv4;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getTrackIpv6()\n+    {\n+        return @inet_ntop($this->track_ipv6);\n+    }\n+\n+    /**\n+     * @param string $track_ipv6\n+     */\n+    public function setTrackIpv6($track_ipv6)\n+    {\n+        $this->track_ipv6 = @inet_pton($track_ipv6);\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getTrackIpv6Bin()\n+    {\n+        return $this->track_ipv6;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/DataModel/UserData.class.php",
          "status": "modified",
          "additions": 22,
          "deletions": 2,
          "patch": "@@ -2,8 +2,8 @@\n /**\n  * sysPass\n  *\n- * @author nuxsmin\n- * @link http://syspass.org\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n  * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n  *\n  * This file is part of sysPass.\n@@ -73,6 +73,10 @@ class UserData extends UserPassData implements DataModelInterface\n      * @var bool\n      */\n     public $user_isChangePass = 0;\n+    /**\n+     * @var bool\n+     */\n+    public $user_isChangedPass = 0;\n     /**\n      * @var bool\n      */\n@@ -389,4 +393,20 @@ public function getName()\n     {\n         return $this->user_name;\n     }\n+\n+    /**\n+     * @return bool\n+     */\n+    public function isUserIsChangedPass()\n+    {\n+        return (int)$this->user_isChangedPass;\n+    }\n+\n+    /**\n+     * @param bool $user_isChangedPass\n+     */\n+    public function setUserIsChangedPass($user_isChangedPass)\n+    {\n+        $this->user_isChangedPass = (int)$user_isChangedPass;\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/DataModel/UserLoginData.class.php",
          "status": "added",
          "additions": 74,
          "deletions": 0,
          "patch": "@@ -0,0 +1,74 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\DataModel;\n+\n+/**\n+ * Class UserLoginData\n+ *\n+ * @package SP\\DataModel\n+ */\n+class UserLoginData extends UserData\n+{\n+    /**\n+     * @var string\n+     */\n+    protected $login;\n+    /**\n+     * @var string\n+     */\n+    protected $loginPass;\n+\n+    /**\n+     * @return string\n+     */\n+    public function getLogin()\n+    {\n+        return $this->login;\n+    }\n+\n+    /**\n+     * @param string $login\n+     */\n+    public function setLogin($login)\n+    {\n+        $this->login = $login;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public function getLoginPass()\n+    {\n+        return $this->loginPass;\n+    }\n+\n+    /**\n+     * @param string $loginPass\n+     */\n+    public function setLoginPass($loginPass)\n+    {\n+        $this->loginPass = $loginPass;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/DataModel/UserPassData.class.php",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -50,7 +50,7 @@ class UserPassData extends DataModelBase\n     /**\n      * @var string\n      */\n-    public $user_mIV = '';\n+    public $user_mKey = '';\n     /**\n      * @var int\n      */\n@@ -107,17 +107,17 @@ public function setUserMPass($user_mPass)\n     /**\n      * @return string\n      */\n-    public function getUserMIV()\n+    public function getUserMKey()\n     {\n-        return $this->user_mIV;\n+        return $this->user_mKey;\n     }\n \n     /**\n-     * @param string $user_mIV\n+     * @param string $user_mKey\n      */\n-    public function setUserMIV($user_mIV)\n+    public function setUserMKey($user_mKey)\n     {\n-        $this->user_mIV = $user_mIV;\n+        $this->user_mKey = $user_mKey;\n     }\n \n     /**"
        },
        {
          "filename": "inc/SP/Forms/ApiTokenForm.class.php",
          "status": "modified",
          "additions": 19,
          "deletions": 14,
          "patch": "@@ -24,10 +24,11 @@\n \n namespace SP\\Forms;\n \n-use SP\\Api\\ApiTokens;\n use SP\\Core\\ActionsInterface;\n use SP\\Core\\Exceptions\\ValidationException;\n+use SP\\DataModel\\ApiTokenData;\n use SP\\Http\\Request;\n+use SP\\Mgmt\\ApiTokens\\ApiTokensUtil;\n \n /**\n  * Class ApiTokenForm\n@@ -37,15 +38,15 @@\n class ApiTokenForm extends FormBase implements FormInterface\n {\n     /**\n-     * @var ApiTokens\n+     * @var ApiTokenData\n      */\n-    protected $ApiTokens;\n+    protected $ApiTokenData;\n \n     /**\n      * Validar el formulario\n      *\n      * @param $action\n-     * @return bool\n+     * @return ApiTokenForm\n      * @throws \\SP\\Core\\Exceptions\\ValidationException\n      */\n     public function validate($action)\n@@ -58,7 +59,7 @@ public function validate($action)\n                 break;\n         }\n \n-        return true;\n+        return $this;\n     }\n \n     /**\n@@ -68,30 +69,34 @@ public function validate($action)\n      */\n     protected function analyzeRequestData()\n     {\n-        $this->ApiTokens = new ApiTokens();\n-        $this->ApiTokens->setTokenId($this->itemId);\n-        $this->ApiTokens->setUserId(Request::analyze('users', 0));\n-        $this->ApiTokens->setActionId(Request::analyze('actions', 0));\n-        $this->ApiTokens->setRefreshToken(Request::analyze('refreshtoken', false, false, true));\n+        $this->ApiTokenData = new ApiTokenData();\n+        $this->ApiTokenData->setAuthtokenId($this->itemId);\n+        $this->ApiTokenData->setAuthtokenUserId(Request::analyze('users', 0));\n+        $this->ApiTokenData->setAuthtokenActionId(Request::analyze('actions', 0));\n+        $this->ApiTokenData->setAuthtokenHash(Request::analyzeEncrypted('pass'));\n     }\n \n     /**\n      * @throws ValidationException\n      */\n     protected function checkCommon()\n     {\n-        if ($this->ApiTokens->getUserId() === 0) {\n+        if ($this->ApiTokenData->getAuthtokenUserId() === 0) {\n             throw new ValidationException(__('Usuario no indicado', false));\n-        } elseif ($this->ApiTokens->getActionId() === 0) {\n+        } elseif ($this->ApiTokenData->getAuthtokenActionId() === 0) {\n             throw new ValidationException(__('Acci\u00f3n no indicada', false));\n+        } elseif ($this->ApiTokenData->getAuthtokenActionId() === ActionsInterface::ACTION_ACC_VIEW_PASS\n+            && $this->ApiTokenData->getAuthtokenHash() === ''\n+        ) {\n+            throw new ValidationException(__('La clave no puede estar en blanco', false));\n         }\n     }\n \n     /**\n-     * @return ApiTokens\n+     * @return ApiTokenData\n      */\n     public function getItemData()\n     {\n-        return $this->ApiTokens;\n+        return $this->ApiTokenData;\n     }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Forms/FormInterface.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -35,7 +35,7 @@ interface FormInterface\n      * Validar el formulario\n      *\n      * @param $action\n-     * @return bool\n+     * @return FormInterface\n      * @throws \\SP\\Core\\Exceptions\\ValidationException\n      */\n     public function validate($action);"
        },
        {
          "filename": "inc/SP/Import/ImportBase.class.php",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -25,7 +25,8 @@\n namespace SP\\Import;\n \n use SP\\Account\\Account;\n-use SP\\Core\\Crypt;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\OldCrypt;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\Core\\Messages\\LogMessage;\n use SP\\DataModel\\AccountExtData;\n@@ -126,7 +127,11 @@ protected function addAccount(AccountExtData $AccountData)\n         }\n \n         if ($this->ImportParams->getImportMasterPwd() !== '') {\n-            $pass = Crypt::getDecrypt($AccountData->getAccountPass(), $AccountData->getAccountIV(), $this->ImportParams->getImportMasterPwd());\n+            $securedKey = Crypt::unlockSecuredKey($AccountData->getAccountKey(), $this->ImportParams->getImportMasterPwd());\n+            $pass = Crypt::decrypt($AccountData->getAccountPass(), $securedKey);\n+\n+            // TODO: importar con encriptaci\u00f3n anterior\n+//            $pass = Crypt::getDecrypt($AccountData->getAccountPass(), $AccountData->getAccountKey(), $this->ImportParams->getImportMasterPwd());\n             $AccountData->setAccountPass($pass);\n         }\n "
        },
        {
          "filename": "inc/SP/Import/SyspassImport.class.php",
          "status": "modified",
          "additions": 13,
          "deletions": 7,
          "patch": "@@ -2,8 +2,8 @@\n /**\n  * sysPass\n  *\n- * @author nuxsmin\n- * @link http://syspass.org\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n  * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n  *\n  * This file is part of sysPass.\n@@ -24,7 +24,9 @@\n \n namespace SP\\Import;\n \n-use SP\\Core\\Crypt;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\OldCrypt;\n+use SP\\Core\\Crypt\\Hash;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\DataModel\\AccountExtData;\n use SP\\DataModel\\CategoryData;\n@@ -105,16 +107,20 @@ protected function processEncrypted()\n     {\n         $hash = $this->xmlDOM->getElementsByTagName('Encrypted')->item(0)->getAttribute('hash');\n \n-        if ($hash !== '' && !Crypt::checkHashPass($this->ImportParams->getImportPwd(), $hash)) {\n+        if ($hash !== '' && !Hash::checkHashKey($this->ImportParams->getImportPwd(), $hash)) {\n             throw new SPException(SPException::SP_ERROR, __('Clave de encriptaci\u00f3n incorrecta', false));\n         }\n \n         foreach ($this->xmlDOM->getElementsByTagName('Data') as $node) {\n             /** @var $node \\DOMElement */\n             $data = base64_decode($node->nodeValue);\n-            $iv = base64_decode($node->getAttribute('iv'));\n \n-            $xmlDecrypted = Crypt::getDecrypt($data, $iv, $this->ImportParams->getImportPwd());\n+            if ($iv = base64_decode($node->getAttribute('iv'))) {\n+                $xmlDecrypted = OldCrypt::getDecrypt($data, $iv, $this->ImportParams->getImportPwd());\n+            } else {\n+                $securedKey = Crypt::unlockSecuredKey($node->getAttribute('key'), $this->ImportParams->getImportPwd());\n+                $xmlDecrypted = Crypt::decrypt($data, $securedKey);\n+            }\n \n             $newXmlData = new \\DOMDocument();\n //            $newXmlData->preserveWhiteSpace = true;\n@@ -270,7 +276,7 @@ protected function processAccounts(\\DOMElement $Account = null)\n                         $AccountData->setAccountPass(base64_decode($accountNode->nodeValue));\n                         break;\n                     case 'passiv';\n-                        $AccountData->setAccountIV(base64_decode($accountNode->nodeValue));\n+                        $AccountData->setAccountKey(base64_decode($accountNode->nodeValue));\n                         break;\n                     case 'notes';\n                         $AccountData->setAccountNotes($accountNode->nodeValue);"
        },
        {
          "filename": "inc/SP/Log/Log.class.php",
          "status": "modified",
          "additions": 26,
          "deletions": 21,
          "patch": "@@ -115,13 +115,34 @@ public static function writeNewLogAndEmail($action, $description = null, $level\n         return $Log;\n     }\n \n+    /**\n+     * Escribir un nuevo evento en el registro de eventos\n+     *\n+     * @param string $action      La acci\u00f3n realizada\n+     * @param string $description La descripci\u00f3n de la acci\u00f3n realizada\n+     * @param string $level\n+     * @return Log\n+     */\n+    public static function writeNewLog($action, $description = null, $level = Log::INFO)\n+    {\n+        $LogMessage = new LogMessage();\n+        $LogMessage->setAction($action);\n+        $LogMessage->addDescription($description);\n+\n+        $Log = new Log($LogMessage, $level);\n+        $Log->writeLog();\n+\n+        return $Log;\n+    }\n+\n     /**\n      * Escribir un nuevo evento en el registro de eventos\n      *\n      * @param bool $resetDescription Restablecer la descripci\u00f3n\n+     * @param bool $resetDetails     Restablecer los detalles\n      * @return bool\n      */\n-    public function writeLog($resetDescription = false)\n+    public function writeLog($resetDescription = false, $resetDetails = false)\n     {\n         if ((defined('IS_INSTALLER') && IS_INSTALLER === 1)\n             || self::$logDbEnabled === 0\n@@ -166,6 +187,10 @@ public function writeLog($resetDescription = false)\n             $this->LogMessage->resetDescription();\n         }\n \n+        if ($resetDetails === true) {\n+            $this->LogMessage->resetDetails();\n+        }\n+\n         try {\n             DB::getQuery($Data);\n         } catch (SPException $e) {\n@@ -218,24 +243,4 @@ public static function newLog($action, $description = null, $level = Log::INFO)\n \n         return new Log($LogMessage, $level);\n     }\n-\n-    /**\n-     * Escribir un nuevo evento en el registro de eventos\n-     *\n-     * @param string $action      La acci\u00f3n realizada\n-     * @param string $description La descripci\u00f3n de la acci\u00f3n realizada\n-     * @param string $level\n-     * @return Log\n-     */\n-    public static function writeNewLog($action, $description = null, $level = Log::INFO)\n-    {\n-        $LogMessage = new LogMessage();\n-        $LogMessage->setAction($action);\n-        $LogMessage->addDescription($description);\n-\n-        $Log = new Log($LogMessage, $level);\n-        $Log->writeLog();\n-\n-        return $Log;\n-    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Mgmt/ApiTokens/ApiToken.class.php",
          "status": "added",
          "additions": 423,
          "deletions": 0,
          "patch": "@@ -0,0 +1,423 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Mgmt\\ApiTokens;\n+\n+use SP\\Core\\ActionsInterface;\n+use SP\\Core\\Crypt\\Hash;\n+use SP\\Core\\Crypt\\Session as CryptSession;\n+use SP\\Core\\Crypt\\Vault;\n+use SP\\Core\\Exceptions\\SPException;\n+use SP\\Core\\Session;\n+use SP\\DataModel\\ApiTokenData;\n+use SP\\Mgmt\\ItemInterface;\n+use SP\\Mgmt\\ItemTrait;\n+use SP\\Storage\\DB;\n+use SP\\Storage\\QueryData;\n+use SP\\Util\\Util;\n+\n+/**\n+ * Class ApiToken\n+ *\n+ * @package SP\\Mgmt\\ApiTokens\n+ */\n+class ApiToken extends ApiTokenBase implements ItemInterface\n+{\n+    use ItemTrait;\n+\n+    /**\n+     * @return mixed\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     */\n+    public function add()\n+    {\n+        if ($this->checkDuplicatedOnAdd()) {\n+            throw new SPException(SPException::SP_WARNING, __('La autorizaci\u00f3n ya existe', false));\n+        }\n+\n+        $token = $this->getTokenByUserId($this->itemData->getAuthtokenUserId());\n+\n+        $query = /** @lang SQL */\n+            'INSERT INTO authTokens \n+            SET authtoken_userId = ?,\n+            authtoken_actionId = ?,\n+            authtoken_createdBy = ?,\n+            authtoken_token = ?,\n+            authtoken_vault = ?,\n+            authtoken_hash = ?,\n+            authtoken_startDate = UNIX_TIMESTAMP()';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($this->itemData->getAuthtokenUserId());\n+        $Data->addParam($this->itemData->getAuthtokenActionId());\n+        $Data->addParam(Session::getUserData()->getUserId());\n+        $Data->addParam($token);\n+\n+        if ($this->itemData->getAuthtokenActionId() === ActionsInterface::ACTION_ACC_VIEW_PASS) {\n+            $Data->addParam(serialize($this->getSecureData($token)));\n+        } else {\n+            $Data->addParam(null);\n+        }\n+\n+        $Data->addParam(Hash::hashKey($this->itemData->getAuthtokenHash()));\n+        $Data->setOnErrorMessage(__('Error interno', false));\n+\n+        DB::getQuery($Data);\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * @return bool\n+     * @throws SPException\n+     */\n+    public function checkDuplicatedOnAdd()\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT authtoken_id FROM authTokens \n+            WHERE authtoken_userId = ? \n+            AND authtoken_actionId = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($this->itemData->getAuthtokenUserId());\n+        $Data->addParam($this->itemData->getAuthtokenActionId());\n+\n+        DB::getResults($Data);\n+\n+        return $Data->getQueryNumRows() === 1;\n+    }\n+\n+    /**\n+     * Obtener el token de la API de un usuario\n+     *\n+     * @param $id\n+     * @return bool\n+     */\n+    private function getTokenByUserId($id)\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT authtoken_token FROM authTokens WHERE authtoken_userId = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($id);\n+\n+        $queryRes = DB::getResults($Data);\n+\n+        return $Data->getQueryNumRows() === 1 ? $queryRes->authtoken_token : $this->generateToken();\n+    }\n+\n+    /**\n+     * Generar un token de acceso\n+     *\n+     * @return string\n+     */\n+    private function generateToken()\n+    {\n+        return Util::generateRandomBytes(32);\n+    }\n+\n+    /**\n+     * Generar la llave segura del token\n+     *\n+     * @param $token\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @return Vault\n+     */\n+    private function getSecureData($token)\n+    {\n+        $Vault = new Vault();\n+        $Vault->saveData(CryptSession::getSessionKey(), $this->itemData->getAuthtokenHash() . $token);\n+\n+        return $Vault;\n+    }\n+\n+    /**\n+     * @param $id int\n+     * @return $this\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    public function delete($id)\n+    {\n+        $query = /** @lang SQL */\n+            'DELETE FROM authTokens WHERE authtoken_id = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($id);\n+        $Data->setOnErrorMessage(__('Error interno', false));\n+\n+        DB::getQuery($Data);\n+\n+        if ($Data->getQueryNumRows() === 0) {\n+            throw new SPException(SPException::SP_INFO, __('Token no encontrado', false));\n+        } else {\n+            $Data->addParam(null);\n+        }\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * @return mixed\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    public function update()\n+    {\n+        if ($this->checkDuplicatedOnUpdate()) {\n+            throw new SPException(SPException::SP_WARNING, __('La autorizaci\u00f3n ya existe', false));\n+        }\n+\n+        $token = $this->getTokenByUserId($this->itemData->getAuthtokenUserId());\n+        $this->getSecureData($token);\n+\n+        $query = /** @lang SQL */\n+            'UPDATE authTokens \n+            SET authtoken_userId = ?,\n+            authtoken_actionId = ?,\n+            authtoken_createdBy = ?,\n+            authtoken_token = ?,\n+            authtoken_vault = ?,\n+            authtoken_hash = ?,\n+            authtoken_startDate = UNIX_TIMESTAMP() \n+            WHERE authtoken_id = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($this->itemData->getAuthtokenUserId());\n+        $Data->addParam($this->itemData->getAuthtokenActionId());\n+        $Data->addParam(Session::getUserData()->getUserId());\n+        $Data->addParam($token);\n+\n+        if ($this->itemData->getAuthtokenActionId() === ActionsInterface::ACTION_ACC_VIEW_PASS) {\n+            $Data->addParam(serialize($this->getSecureData($token)));\n+        } else {\n+            $Data->addParam(null);\n+        }\n+\n+        $Data->addParam(Hash::hashKey($this->itemData->getAuthtokenHash()));\n+        $Data->addParam($this->itemData->getAuthtokenId());\n+        $Data->setOnErrorMessage(__('Error interno', false));\n+\n+        DB::getQuery($Data);\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * @return bool\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    public function checkDuplicatedOnUpdate()\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT authtoken_id FROM authTokens \n+            WHERE authtoken_userId = ? \n+            AND authtoken_actionId = ? \n+            AND authtoken_id <> ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($this->itemData->getAuthtokenUserId());\n+        $Data->addParam($this->itemData->getAuthtokenActionId());\n+        $Data->addParam($this->itemData->getAuthtokenId());\n+\n+        DB::getResults($Data);\n+\n+        return $Data->getQueryNumRows() === 1;\n+    }\n+\n+    /**\n+     * Regenerar el hash de los tokens de un usuario\n+     *\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     */\n+    public function refreshToken()\n+    {\n+        $token = $this->generateToken();\n+        $this->getSecureData($token);\n+\n+        $query = /** @lang SQL */\n+            'UPDATE authTokens \n+            SET authtoken_token = ?,\n+            authtoken_hash = ?,\n+            authtoken_vault = ?,\n+            authtoken_pass = ?,\n+            authtoken_startDate = UNIX_TIMESTAMP() \n+            WHERE authtoken_userId = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($this->generateToken());\n+        $Data->addParam(Hash::hashKey($this->itemData->getAuthtokenHash()));\n+\n+        if ($this->itemData->getAuthtokenActionId() === ActionsInterface::ACTION_ACC_VIEW_PASS) {\n+            $Data->addParam(serialize($this->getSecureData($token)));\n+        } else {\n+            $Data->addParam(null);\n+        }\n+\n+        $Data->addParam($this->itemData->getAuthtokenUserId());\n+        $Data->setOnErrorMessage(__('Error interno', false));\n+\n+        DB::getQuery($Data);\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * @param $id int\n+     * @return ApiTokenData\n+     */\n+    public function getById($id)\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT authtoken_id,\n+            authtoken_userId,\n+            authtoken_actionId,\n+            authtoken_createdBy,\n+            authtoken_startDate,\n+            authtoken_token \n+            FROM authTokens \n+            WHERE authtoken_id = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setMapClassName($this->getDataModel());\n+        $Data->setQuery($query);\n+        $Data->addParam($id);\n+\n+        return DB::getResults($Data);\n+    }\n+\n+    /**\n+     * @return mixed\n+     */\n+    public function getAll()\n+    {\n+        // TODO: Implement getAll() method.\n+    }\n+\n+    /**\n+     * @param $id int\n+     * @return mixed\n+     */\n+    public function checkInUse($id)\n+    {\n+        // TODO: Implement checkInUse() method.\n+    }\n+\n+    /**\n+     * Eliminar elementos en lote\n+     *\n+     * @param array $ids\n+     * @return $this\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     */\n+    public function deleteBatch(array $ids)\n+    {\n+        $query = /** @lang SQL */\n+            'DELETE FROM authTokens WHERE authtoken_id IN (' . $this->getParamsFromArray($ids) . ')';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->setParams($ids);\n+        $Data->setOnErrorMessage(__('Error interno', false));\n+\n+        DB::getQuery($Data);\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * Devolver los elementos con los ids especificados\n+     *\n+     * @param array $ids\n+     * @return mixed\n+     */\n+    public function getByIdBatch(array $ids)\n+    {\n+        // TODO: Implement getByIdBatch() method.\n+    }\n+\n+    /**\n+     * Obtener el usuario a partir del token\n+     *\n+     * @param $token string El token de autorizaci\u00f3n\n+     * @return bool|mixed\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    public function getUserIdForToken($token)\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT authtoken_userId FROM authTokens WHERE authtoken_token = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($token);\n+\n+        $queryRes = DB::getResults($Data);\n+\n+        return $Data->getQueryNumRows() === 1 ? $queryRes->authtoken_userId : false;\n+    }\n+\n+    /**\n+     * Devolver los datos de un token\n+     *\n+     * @param $actionId int El id de la accion\n+     * @param $token    string El token de seguridad\n+     * @return false|ApiTokenData\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    public function getTokenByToken($actionId, $token)\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT authtoken_userId,\n+            authtoken_vault,\n+            authtoken_hash \n+            FROM authTokens\n+            WHERE authtoken_actionId = ? \n+            AND authtoken_token = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setMapClassName($this->getDataModel());\n+        $Data->setQuery($query);\n+        $Data->addParam($actionId);\n+        $Data->addParam($token);\n+\n+        $queryRes = DB::getResults($Data);\n+\n+        return $Data->getQueryNumRows() === 1 ? $queryRes : false;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Mgmt/ApiTokens/ApiTokenBase.class.php",
          "status": "added",
          "additions": 66,
          "deletions": 0,
          "patch": "@@ -0,0 +1,66 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Mgmt\\ApiTokens;\n+\n+defined('APP_ROOT') || die();\n+\n+use SP\\DataModel\\ApiTokenData;\n+use SP\\Mgmt\\ItemBase;\n+\n+/**\n+ * Class ApiTokensBase\n+ *\n+ * @package SP\\Mgmt\\ApiTokens\n+ */\n+abstract class ApiTokenBase extends ItemBase\n+{\n+    /** @var ApiTokenData */\n+    protected $itemData;\n+\n+    /**\n+     * ApiTokensBase constructor.\n+     *\n+     * @param $itemData\n+     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n+     */\n+    public function __construct($itemData = null)\n+    {\n+        if (!$this->dataModel) {\n+            $this->setDataModel(ApiTokenData::class);\n+        }\n+\n+        parent::__construct($itemData);\n+    }\n+\n+    /**\n+     * Devolver los datos del elemento\n+     *\n+     * @return ApiTokenData\n+     */\n+    public function getItemData()\n+    {\n+        return parent::getItemData();\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Mgmt/ApiTokens/ApiTokenSearch.class.php",
          "status": "added",
          "additions": 84,
          "deletions": 0,
          "patch": "@@ -0,0 +1,84 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Mgmt\\ApiTokens;\n+\n+use SP\\Core\\Acl;\n+use SP\\DataModel\\ItemSearchData;\n+use SP\\Mgmt\\ItemSearchInterface;\n+use SP\\Storage\\DB;\n+use SP\\Storage\\QueryData;\n+\n+/**\n+ * Class ApiTokenSearch\n+ *\n+ * @package SP\\Mgmt\\ApiTokens\n+ */\n+class ApiTokenSearch extends ApiTokenBase implements ItemSearchInterface\n+{\n+    /**\n+     * @param ItemSearchData $SearchData\n+     * @return mixed\n+     */\n+    public function getMgmtSearch(ItemSearchData $SearchData)\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT authtoken_id,\n+            authtoken_userId,\n+            authtoken_actionId, \n+            authtoken_token,\n+            CONCAT(user_name, \\' (\\', user_login, \\')\\') AS user_login \n+            FROM authTokens \n+            LEFT JOIN usrData ON user_id = authtoken_userId ';\n+\n+        $Data = new QueryData();\n+\n+        if ($SearchData->getSeachString() !== '') {\n+            $search = '%' . $SearchData->getSeachString() . '%';\n+            $query .= ' WHERE user_login LIKE ?';\n+\n+            $Data->addParam($search);\n+        }\n+\n+        $query .= ' ORDER BY user_login';\n+        $query .= ' LIMIT ?, ?';\n+\n+        $Data->addParam($SearchData->getLimitStart());\n+        $Data->addParam($SearchData->getLimitCount());\n+\n+        $Data->setQuery($query);\n+\n+        DB::setFullRowCount();\n+\n+        $queryRes = DB::getResultsArray($Data);\n+\n+        foreach ($queryRes as $token) {\n+            $token->authtoken_actionId = Acl::getActionName($token->authtoken_actionId);\n+        }\n+\n+        $queryRes['count'] = $Data->getQueryNumRows();\n+\n+        return $queryRes;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Mgmt/ApiTokens/ApiTokensUtil.class.php",
          "status": "added",
          "additions": 59,
          "deletions": 0,
          "patch": "@@ -0,0 +1,59 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Mgmt\\ApiTokens;\n+\n+use SP\\Core\\Acl;\n+use SP\\Core\\ActionsInterface;\n+\n+defined('APP_ROOT') || die();\n+\n+/**\n+ * Class ApiTokensUtil con utilidades para la gesti\u00f3n de tokens API\n+ *\n+ * @package SP\\Api\n+ */\n+class ApiTokensUtil\n+{\n+    /**\n+     * Devuelver un array de acciones posibles para los tokens\n+     *\n+     * @return array\n+     */\n+    public static function getTokenActions()\n+    {\n+        $actions = [\n+            ActionsInterface::ACTION_ACC_SEARCH => Acl::getActionName(ActionsInterface::ACTION_ACC_SEARCH),\n+            ActionsInterface::ACTION_ACC_VIEW => Acl::getActionName(ActionsInterface::ACTION_ACC_VIEW),\n+            ActionsInterface::ACTION_ACC_VIEW_PASS => Acl::getActionName(ActionsInterface::ACTION_ACC_VIEW_PASS),\n+            ActionsInterface::ACTION_ACC_DELETE => Acl::getActionName(ActionsInterface::ACTION_ACC_DELETE),\n+            ActionsInterface::ACTION_ACC_NEW => Acl::getActionName(ActionsInterface::ACTION_ACC_NEW),\n+            ActionsInterface::ACTION_CFG_BACKUP => Acl::getActionName(ActionsInterface::ACTION_CFG_BACKUP),\n+            ActionsInterface::ACTION_MGM_CATEGORIES => Acl::getActionName(ActionsInterface::ACTION_MGM_CATEGORIES),\n+            ActionsInterface::ACTION_MGM_CUSTOMERS => Acl::getActionName(ActionsInterface::ACTION_MGM_CUSTOMERS)\n+        ];\n+\n+        return $actions;\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Mgmt/CustomFields/CustomField.class.php",
          "status": "modified",
          "additions": 38,
          "deletions": 12,
          "patch": "@@ -26,7 +26,10 @@\n \n defined('APP_ROOT') || die();\n \n-use SP\\Core\\Crypt;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\Crypt\\Session as CryptSession;\n+use SP\\Core\\Exceptions\\QueryException;\n+use SP\\Core\\Exceptions\\SPException;\n use SP\\DataModel\\CustomFieldData;\n use SP\\DataModel\\CustomFieldDefData;\n use SP\\Mgmt\\ItemInterface;\n@@ -67,6 +70,11 @@ public function __construct($itemData, $customFieldDefId = null)\n \n     /**\n      * @return mixed\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public function update()\n@@ -79,20 +87,25 @@ public function update()\n             return $this->delete($this->itemData->getId());\n         }\n \n-        $cryptData = Crypt::encryptData($this->itemData->getValue());\n+        $sessionKey = CryptSession::getSessionKey();\n+        $securedKey = Crypt::makeSecuredKey($sessionKey);\n+\n+        if (strlen($securedKey) > 1000) {\n+            throw new QueryException(SPException::SP_ERROR, __('Error interno', false));\n+        }\n \n         $query = /** @lang SQL */\n             'UPDATE customFieldsData SET\n             customfielddata_data = ?,\n-            customfielddata_iv = ?\n+            customfielddata_key = ?\n             WHERE customfielddata_moduleId = ?\n             AND customfielddata_itemId = ?\n             AND customfielddata_defId = ?';\n \n         $Data = new QueryData();\n         $Data->setQuery($query);\n-        $Data->addParam($cryptData['data']);\n-        $Data->addParam($cryptData['iv']);\n+        $Data->addParam(Crypt::encrypt($this->itemData->getValue(), $securedKey, $sessionKey));\n+        $Data->addParam($securedKey);\n         $Data->addParam($this->itemData->getModule());\n         $Data->addParam($this->itemData->getId());\n         $Data->addParam($this->itemData->getDefinitionId());\n@@ -128,6 +141,11 @@ protected function checkExists()\n \n     /**\n      * @return mixed\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public function add()\n@@ -136,23 +154,28 @@ public function add()\n             return true;\n         }\n \n-        $cryptData = Crypt::encryptData($this->itemData->getValue());\n+        $sessionKey = CryptSession::getSessionKey();\n+        $securedKey = Crypt::makeSecuredKey($sessionKey);\n+\n+        if (strlen($securedKey) > 1000) {\n+            throw new QueryException(SPException::SP_ERROR, __('Error interno', false));\n+        }\n \n         $query = /** @lang SQL */\n             'INSERT INTO customFieldsData SET\n             customfielddata_itemId = ?,\n             customfielddata_moduleId = ?,\n             customfielddata_defId = ?,\n             customfielddata_data = ?,\n-            customfielddata_iv = ?';\n+            customfielddata_key = ?';\n \n         $Data = new QueryData();\n         $Data->setQuery($query);\n         $Data->addParam($this->itemData->getId());\n         $Data->addParam($this->itemData->getModule());\n         $Data->addParam($this->itemData->getDefinitionId());\n-        $Data->addParam($cryptData['data']);\n-        $Data->addParam($cryptData['iv']);\n+        $Data->addParam(Crypt::encrypt($this->itemData->getValue(), $securedKey, $sessionKey));\n+        $Data->addParam($securedKey);\n \n         return DB::getQuery($Data);\n     }\n@@ -187,7 +210,7 @@ public function getById($id)\n             'SELECT customfielddata_id,\n             customfielddef_id,\n             customfielddata_data,\n-            customfielddata_iv,\n+            customfielddata_key,\n             customfielddef_field\n             FROM customFieldsData\n             JOIN customFieldsDef ON customfielddata_defId = customfielddef_id\n@@ -198,7 +221,7 @@ public function getById($id)\n             0 as customfielddata_id,\n             customfielddef_id,\n             \"\" as customfielddata_data,\n-            \"\" as customfielddata_iv,\n+            \"\" as customfielddata_key,\n             customfielddef_field\n             FROM customFieldsDef\n             WHERE customfielddef_module = ?\n@@ -244,11 +267,14 @@ public function getById($id)\n      *\n      * @param CustomFieldData $CustomFieldData\n      * @return string\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n      */\n     protected function unencryptData(CustomFieldData $CustomFieldData)\n     {\n         if ($CustomFieldData->getCustomfielddataData() !== '') {\n-            return $this->formatValue(Crypt::getDecrypt($CustomFieldData->getCustomfielddataData(), $CustomFieldData->getCustomfielddataIv()));\n+            $securedKey = Crypt::unlockSecuredKey($CustomFieldData->getCustomfielddataKey(), CryptSession::getSessionKey());\n+\n+            return $this->formatValue(Crypt::decrypt($CustomFieldData->getCustomfielddataData(), $securedKey));\n         }\n \n         return '';"
        },
        {
          "filename": "inc/SP/Mgmt/CustomFields/CustomFieldsUtil.class.php",
          "status": "modified",
          "additions": 108,
          "deletions": 36,
          "patch": "@@ -26,7 +26,10 @@\n \n defined('APP_ROOT') || die();\n \n-use SP\\Core\\Crypt;\n+use Defuse\\Crypto\\Exception\\CryptoException;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\Exceptions\\QueryException;\n+use SP\\Core\\OldCrypt;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\DataModel\\CustomFieldData;\n use SP\\DataModel\\CustomFieldDefData;\n@@ -43,33 +46,91 @@\n class CustomFieldsUtil\n {\n     /**\n-     * Comprobar si el hash de cambios coincide con el camculado con el valor de los campos del elemento\n+     * Actualizar los datos encriptados con una nueva clave\n      *\n-     * @param $fields\n-     * @param $srcHhash\n+     * @param string $currentMasterPass La clave maestra actual\n+     * @param string $newMasterPassword La nueva clave maestra\n      * @return bool\n      */\n-    public static function checkHash(&$fields, $srcHhash)\n+    public static function updateCustomFieldsCrypt($currentMasterPass, $newMasterPassword)\n     {\n-        return (!is_array($fields) || $srcHhash === md5(implode('', $fields)));\n+        $Log = new Log();\n+        $LogMessage = $Log->getLogMessage();\n+        $LogMessage->setAction(__('Campos Personalizados', false));\n+\n+        $query = /** @lang SQL */\n+            'SELECT customfielddata_id, customfielddata_data, customfielddata_key FROM customFieldsData';\n+\n+        $Data = new QueryData();\n+        $Data->setMapClassName(CustomFieldData::class);\n+        $Data->setQuery($query);\n+\n+        /** @var CustomFieldData[] $queryRes */\n+        $queryRes = DB::getResultsArray($Data);\n+\n+        if (count($queryRes) === 0) {\n+            $LogMessage->addDescription(__('No hay datos de campos personalizados', false));\n+            $Log->writeLog();\n+            return true;\n+        }\n+\n+        $LogMessage->addDescription(__('Actualizando datos encriptados', false));\n+\n+        $errors = [];\n+        $success = [];\n+\n+        foreach ($queryRes as $CustomField) {\n+            try {\n+                $currentSecuredKey = Crypt::unlockSecuredKey($CustomField->getCustomfielddataKey(), $currentMasterPass);\n+                $securedKey = Crypt::makeSecuredKey($newMasterPassword);\n+\n+                if (strlen($securedKey) > 1000) {\n+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));\n+                }\n+\n+                $query = /** @lang SQL */\n+                    'UPDATE customFieldsData SET\n+                customfielddata_data = ?,\n+                customfielddata_key = ? \n+                WHERE customfielddata_id = ?';\n+\n+                $Data = new QueryData();\n+                $Data->setQuery($query);\n+                $Data->addParam(Crypt::encrypt(Crypt::decrypt($CustomField->getCustomfielddataData(), $currentSecuredKey, $currentMasterPass), $securedKey, $newMasterPassword));\n+                $Data->addParam($securedKey);\n+                $Data->addParam($CustomField->getCustomfielddataId());\n+\n+                DB::getQuery($Data);\n+\n+                $success[] = $CustomField->getCustomfielddataId();\n+            } catch (\\Exception $e) {\n+                debugLog(__($e->getMessage()));\n+\n+                return false;\n+            }\n+        }\n+\n+        $LogMessage->addDetails(__('Registros no actualizados', false), implode(',', $errors));\n+        $LogMessage->addDetails(__('Registros actualizados', false), implode(',', $success));\n+        $Log->writeLog();\n+\n+        return true;\n     }\n \n     /**\n      * Actualizar los datos encriptados con una nueva clave\n      *\n      * @param string $currentMasterPass La clave maestra actual\n-     * @param string $newMasterPassword La nueva clave maestra\n      * @return bool\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n-    public static function updateCustomFieldsCrypt($currentMasterPass, $newMasterPassword)\n+    public static function updateCustomFieldsOldCrypt(&$currentMasterPass)\n     {\n         $Log = new Log();\n         $LogMessage = $Log->getLogMessage();\n         $LogMessage->setAction(__('Campos Personalizados', false));\n \n         $query = /** @lang SQL */\n-            'SELECT customfielddata_id, customfielddata_data, customfielddata_iv FROM customFieldsData';\n+            'SELECT customfielddata_id, customfielddata_data, customfielddata_key FROM customFieldsData';\n \n         $Data = new QueryData();\n         $Data->setMapClassName(CustomFieldData::class);\n@@ -90,52 +151,61 @@ public static function updateCustomFieldsCrypt($currentMasterPass, $newMasterPas\n         $success = [];\n \n         foreach ($queryRes as $CustomField) {\n-            $fieldData = Crypt::getDecrypt($CustomField->getCustomfielddataData(), $CustomField->getCustomfielddataIv(), $currentMasterPass);\n-            $fieldCryptData = Crypt::encryptData($fieldData, $newMasterPassword);\n+            try {\n+                $securedKey = Crypt::makeSecuredKey($currentMasterPass);\n+                $fieldData = OldCrypt::getDecrypt($CustomField->getCustomfielddataData(), $CustomField->getCustomfielddataKey(), $currentMasterPass);\n+\n+                if (strlen($securedKey) > 1000) {\n+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false));\n+                }\n \n-            $query = /** @lang SQL */\n-                'UPDATE customFieldsData SET\n+                $query = /** @lang SQL */\n+                    'UPDATE customFieldsData SET\n                 customfielddata_data = ?,\n-                customfielddata_iv = ? \n+                customfielddata_key = ? \n                 WHERE customfielddata_id = ?';\n \n-            $Data = new QueryData();\n-            $Data->setQuery($query);\n-            $Data->addParam($fieldCryptData['data']);\n-            $Data->addParam($fieldCryptData['iv']);\n-            $Data->addParam($CustomField->getCustomfielddataId());\n+                $Data = new QueryData();\n+                $Data->setQuery($query);\n+                $Data->addParam(Crypt::encrypt($fieldData, $securedKey, $currentMasterPass));\n+                $Data->addParam($securedKey);\n+                $Data->addParam($CustomField->getCustomfielddataId());\n \n-            try {\n                 DB::getQuery($Data);\n \n                 $success[] = $CustomField->getCustomfielddataId();\n-            } catch (SPException $e) {\n-                $errors[] = $CustomField->getCustomfielddataId();\n+            } catch (\\Exception $e) {\n+                debugLog(__($e->getMessage()));\n+\n+                return false;\n             }\n         }\n \n         $LogMessage->addDetails(__('Registros no actualizados', false), implode(',', $errors));\n         $LogMessage->addDetails(__('Registros actualizados', false), implode(',', $success));\n         $Log->writeLog();\n \n-        return (count($errors) === 0);\n+        return true;\n     }\n \n     /**\n      * Crear los campos personalizados de un elemento\n      *\n      * @param array           $customFields\n      * @param CustomFieldData $CustomFieldData\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public static function addItemCustomFields(array &$customFields, CustomFieldData $CustomFieldData)\n     {\n-        foreach ($customFields as $id => $value) {\n-            $CustomFieldData->setDefinitionId($id);\n-            $CustomFieldData->setValue($value);\n+        try {\n+            foreach ($customFields as $id => $value) {\n+                $CustomFieldData->setDefinitionId($id);\n+                $CustomFieldData->setValue($value);\n \n-            CustomField::getItem($CustomFieldData)->add();\n+                CustomField::getItem($CustomFieldData)->add();\n+            }\n+        } catch (CryptoException $e) {\n+            throw new SPException(SPException::SP_ERROR, __('Error interno'));\n         }\n     }\n \n@@ -144,24 +214,26 @@ public static function addItemCustomFields(array &$customFields, CustomFieldData\n      *\n      * @param array           $customFields\n      * @param CustomFieldData $CustomFieldData\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public static function updateItemCustomFields(array $customFields, CustomFieldData $CustomFieldData)\n     {\n-        foreach ($customFields as $id => $value) {\n-            $CustomFieldData->setDefinitionId($id);\n-            $CustomFieldData->setValue($value);\n+        try {\n+            foreach ($customFields as $id => $value) {\n+                $CustomFieldData->setDefinitionId($id);\n+                $CustomFieldData->setValue($value);\n \n-            CustomField::getItem($CustomFieldData)->update();\n+                CustomField::getItem($CustomFieldData)->update();\n+            }\n+        } catch (CryptoException $e) {\n+            throw new SPException(SPException::SP_ERROR, __('Error interno'));\n         }\n     }\n \n     /**\n      * Migraci\u00f3n de campos personalizados\n      *\n      * @return bool\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n      */\n     public static function migrateCustomFields()\n     {\n@@ -196,7 +268,7 @@ public static function migrateCustomFields()\n                     'UPDATE customFieldsDef SET\n                         customfielddef_module = ?,\n                         customfielddef_field = ?\n-                        WHERE customfielddef_id= ? LIMIT 1';\n+                        WHERE customfielddef_id = ? LIMIT 1';\n \n                 foreach ($oldDefs as $cf) {\n                     $CustomFieldDef = Util::castToClass(CustomFieldDefData::class, $cf->customfielddef_field);"
        },
        {
          "filename": "inc/SP/Mgmt/Files/File.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -120,7 +120,7 @@ public function delete($id)\n         $Data = new QueryData();\n         $Data->setQuery($query);\n         $Data->addParam($id);\n-        $Data->setOnErrorMessage(__('Error al eliminar archivo', false));\n+        $Data->setOnErrorMessage(__('Error al eliminar el archivo', false));\n \n         DB::getQuery($Data);\n "
        },
        {
          "filename": "inc/SP/Mgmt/Profiles/ProfileUtil.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -44,9 +44,6 @@ class ProfileUtil\n      * Migrar los perfiles con formato anterior a v1.2\n      *\n      * @return bool\n-     * @throws \\phpmailer\\phpmailerException\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n     public static function migrateProfiles()\n     {"
        },
        {
          "filename": "inc/SP/Mgmt/PublicLinks/PublicLink.class.php",
          "status": "modified",
          "additions": 11,
          "deletions": 3,
          "patch": "@@ -110,6 +110,11 @@ public function update()\n \n     /**\n      * @return $this\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n      * @throws SPException\n      */\n     public function add()\n@@ -123,7 +128,7 @@ public function add()\n         $this->itemData->setMaxCountViews(Config::getConfig()->getPublinksMaxViews());\n         $this->calcDateExpire();\n         $this->createLinkHash();\n-        $this->createLinkPass();\n+        $this->setLinkData();\n \n         $query = /** @lang SQL */\n             'INSERT INTO publicLinks\n@@ -186,6 +191,9 @@ public function delete($id)\n \n     /**\n      * @return $this\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n      * @throws SPException\n      */\n     public function refresh()\n@@ -194,7 +202,7 @@ public function refresh()\n \n         $this->calcDateExpire();\n         $this->createLinkHash(true);\n-        $this->createLinkPass();\n+        $this->setLinkData();\n \n         $query = /** @lang SQL */\n             'UPDATE publicLinks\n@@ -359,7 +367,7 @@ public function getByHash($hash)\n     public function getHashForItem($itemId)\n     {\n         $query = /** @lang SQL */\n-            'SELECT publicLink_hash FROM publicLinks WHERE publicLink_itemId = ? LIMIT 1';\n+            'SELECT publicLink_id, publicLink_hash FROM publicLinks WHERE publicLink_itemId = ? LIMIT 1';\n \n         $Data = new QueryData();\n         $Data->setMapClassName($this->getDataModel());"
        },
        {
          "filename": "inc/SP/Mgmt/PublicLinks/PublicLinkBase.class.php",
          "status": "modified",
          "additions": 40,
          "deletions": 8,
          "patch": "@@ -2,8 +2,8 @@\n /**\n  * sysPass\n  *\n- * @author nuxsmin\n- * @link http://syspass.org\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n  * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n  *\n  * This file is part of sysPass.\n@@ -26,10 +26,12 @@\n \n defined('APP_ROOT') || die();\n \n+use SP\\Account\\Account;\n use SP\\Config\\Config;\n-use SP\\Core\\Crypt;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\Crypt\\Session as CryptSession;\n use SP\\Core\\Exceptions\\SPException;\n-use SP\\Core\\SessionUtil;\n+use SP\\DataModel\\AccountExtData;\n use SP\\DataModel\\PublicLinkData;\n use SP\\Mgmt\\ItemBase;\n use SP\\DataModel\\PublicLinkBaseData;\n@@ -71,14 +73,44 @@ public function getItemData()\n      * Devolver la clave y el IV para el enlace\n      *\n      * @throws SPException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n      */\n     protected final function createLinkPass()\n     {\n-        $pass = Crypt::generateAesKey($this->createLinkHash());\n-        $cryptPass = Crypt::encryptData(SessionUtil::getSessionMPass(), $pass);\n+        $key = Config::getConfig()->getPasswordSalt() . $this->createLinkHash();\n+        $securedKey = Crypt::makeSecuredKey($key);\n \n-        $this->itemData->setPass($cryptPass['data']);\n-        $this->itemData->setPassIV($cryptPass['iv']);\n+        $this->itemData->setPass(Crypt::encrypt(CryptSession::getSessionKey(), $securedKey, $key));\n+        $this->itemData->setPassIV($securedKey);\n+    }\n+\n+    /**\n+     * Obtener los datos de una cuenta y encriptarlos para el enlace\n+     *\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     */\n+    protected final function setLinkData()\n+    {\n+        // Obtener los datos de la cuenta\n+        $Account = new Account(new AccountExtData($this->itemData->getItemId()));\n+        $AccountData = $Account->getDataForLink();\n+\n+        $key = CryptSession::getSessionKey();\n+        $securedKey = Crypt::unlockSecuredKey($AccountData->getAccountKey(), $key);\n+        $AccountData->setAccountPass(Crypt::decrypt($AccountData->getAccountPass(), $securedKey, $key));\n+        $AccountData->setAccountKey(null);\n+\n+        // Encriptar los datos de la cuenta\n+        $linkKey = Config::getConfig()->getPasswordSalt() . $this->createLinkHash();\n+        $linkSecuredKey = Crypt::makeSecuredKey($linkKey);\n+\n+        $this->itemData->setData(Crypt::encrypt(serialize($AccountData), $linkSecuredKey, $linkKey));\n+        $this->itemData->setPassIV($linkSecuredKey);\n     }\n \n     /**"
        },
        {
          "filename": "inc/SP/Mgmt/Tracks/Track.class.php",
          "status": "added",
          "additions": 240,
          "deletions": 0,
          "patch": "@@ -0,0 +1,240 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Mgmt\\Tracks;\n+\n+use SP\\Mgmt\\ItemInterface;\n+use SP\\Storage\\DB;\n+use SP\\Storage\\QueryData;\n+\n+/**\n+ * Class Track\n+ *\n+ * @package SP\\Mgmt\\Tracks\n+ */\n+class Track extends TrackBase implements ItemInterface\n+{\n+    /**\n+     * @return mixed\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     */\n+    public function add()\n+    {\n+        $query = /** @lang SQL */\n+            'INSERT INTO track SET \n+            track_userId = ?, \n+            track_source = ?, \n+            track_time = UNIX_TIMESTAMP(),\n+            track_ipv4 = ?,\n+            track_ipv6 = ?';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($this->itemData->getTrackUserId());\n+        $Data->addParam($this->itemData->getTrackSource());\n+        $Data->addParam($this->itemData->getTrackIpv4Bin());\n+        $Data->addParam($this->itemData->getTrackIpv6Bin());\n+        $Data->setOnErrorMessage(__('Error al crear track', false));\n+\n+        DB::getQuery($Data);\n+\n+        $this->itemData->setTrackId(DB::$lastId);\n+\n+        return $this;\n+    }\n+\n+    /**\n+     * @param $id int|array\n+     * @return mixed\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     */\n+    public function delete($id)\n+    {\n+        $query = /** @lang SQL */\n+            'DELETE FROM track WHERE track_id = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($this->itemData->getTrackId());\n+        $Data->setOnErrorMessage(__('Error al eliminar track', false));\n+\n+        return DB::getQuery($Data);\n+    }\n+\n+    /**\n+     * @return bool\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     */\n+    public function update()\n+    {\n+        $query = /** @lang SQL */\n+            'UPDATE track SET \n+            track_userId = ?, \n+            track_source = ?, \n+            track_time = UNIX_TIMESTAMP(),\n+            track_ipv4 = ?,\n+            track_ipv6 = ? \n+            WHERE track_id = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam($this->itemData->getTrackUserId());\n+        $Data->addParam($this->itemData->getTrackSource());\n+        $Data->addParam($this->itemData->getTrackIpv4Bin());\n+        $Data->addParam($this->itemData->getTrackIpv6Bin());\n+        $Data->addParam($this->itemData->getTrackId());\n+        $Data->setOnErrorMessage(__('Error al actualizar track', false));\n+\n+        return DB::getQuery($Data);\n+    }\n+\n+    /**\n+     * @param $id int\n+     * @return mixed\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     */\n+    public function getById($id)\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT track_id, \n+            track_userId, \n+            track_source, \n+            track_time,\n+            track_ipv4,\n+            track_ipv6 \n+            FROM track \n+            WHERE track_id = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setMapClassName($this->getDataModel());\n+        $Data->setQuery($query);\n+        $Data->addParam($this->itemData->getTrackId());\n+        $Data->setOnErrorMessage(__('Error al obtener track', false));\n+\n+        return DB::getResults($Data);\n+    }\n+\n+    /**\n+     * @return array\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     */\n+    public function getAll()\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT track_id, \n+            track_userId, \n+            track_source, \n+            track_time,\n+            track_ipv4,\n+            track_ipv6 FROM track';\n+\n+        $Data = new QueryData();\n+        $Data->setMapClassName($this->getDataModel());\n+        $Data->setQuery($query);\n+        $Data->addParam($this->itemData->getTrackId());\n+        $Data->setOnErrorMessage(__('Error al obtener tracks', false));\n+\n+        return DB::getResultsArray($Data);\n+    }\n+\n+    /**\n+     * @param $id int\n+     * @return mixed\n+     */\n+    public function checkInUse($id)\n+    {\n+        // TODO: Implement checkInUse() method.\n+    }\n+\n+    /**\n+     * @return bool\n+     */\n+    public function checkDuplicatedOnUpdate()\n+    {\n+        // TODO: Implement checkDuplicatedOnUpdate() method.\n+    }\n+\n+    /**\n+     * @return bool\n+     */\n+    public function checkDuplicatedOnAdd()\n+    {\n+        // TODO: Implement checkDuplicatedOnAdd() method.\n+    }\n+\n+    /**\n+     * Eliminar elementos en lote\n+     *\n+     * @param array $ids\n+     * @return $this\n+     */\n+    public function deleteBatch(array $ids)\n+    {\n+        // TODO: Implement deleteBatch() method.\n+    }\n+\n+    /**\n+     * Devolver los elementos con los ids especificados\n+     *\n+     * @param array $ids\n+     * @return mixed\n+     */\n+    public function getByIdBatch(array $ids)\n+    {\n+        // TODO: Implement getByIdBatch() method.\n+    }\n+\n+\n+    /**\n+     * Devuelve los tracks de un cliente desde un tiempo y origen determinados\n+     *\n+     * @param $time\n+     * @return array\n+     */\n+    public function getTracksForClientFromTime($time)\n+    {\n+        $query = /** @lang SQL */\n+            'SELECT track_id, track_userId \n+            FROM track \n+            WHERE track_time >= ? \n+            AND (track_ipv4 = ? OR track_ipv6 = ?) \n+            AND track_source = ?';\n+\n+        $Data = new QueryData();\n+        $Data->setMapClassName($this->getDataModel());\n+        $Data->setQuery($query);\n+        $Data->addParam($time);\n+        $Data->addParam($this->itemData->getTrackIpv4Bin());\n+        $Data->addParam($this->itemData->getTrackIpv6Bin());\n+        $Data->addParam($this->itemData->getTrackSource());\n+        $Data->setOnErrorMessage(__('Error al obtener tracks', false));\n+\n+        return DB::getResultsArray($Data);\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Mgmt/Tracks/TrackBase.class.php",
          "status": "added",
          "additions": 65,
          "deletions": 0,
          "patch": "@@ -0,0 +1,65 @@\n+<?php\n+/**\n+ * sysPass\n+ *\n+ * @author nuxsmin\n+ * @link http://syspass.org\n+ * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n+ *\n+ * This file is part of sysPass.\n+ *\n+ * sysPass is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * sysPass is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ *  along with sysPass.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+namespace SP\\Mgmt\\Tracks;\n+\n+defined('APP_ROOT') || die();\n+\n+use SP\\DataModel\\TrackData;\n+use SP\\Mgmt\\ItemBase;\n+\n+/**\n+ * Class TrackBase\n+ *\n+ * @package SP\\Mgmt\\Tracks\n+ */\n+abstract class TrackBase extends ItemBase\n+{\n+    /** @var TrackData */\n+    protected $itemData;\n+\n+    /**\n+     * Track constructor.\n+     *\n+     * @param $itemData\n+     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n+     */\n+    public function __construct($itemData = null)\n+    {\n+        if (!$this->dataModel) {\n+            $this->setDataModel(TrackData::class);\n+        }\n+\n+        parent::__construct($itemData);\n+    }\n+\n+    /**\n+     * Devolver los datos del elemento\n+     * @return TrackData\n+     */\n+    public function getItemData()\n+    {\n+        return parent::getItemData();\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Mgmt/Users/User.class.php",
          "status": "modified",
          "additions": 25,
          "deletions": 12,
          "patch": "@@ -26,6 +26,7 @@\n \n defined('APP_ROOT') || die();\n \n+use SP\\Core\\Crypt\\Hash;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\DataModel\\UserData;\n use SP\\Mgmt\\ItemInterface;\n@@ -53,8 +54,6 @@ public function add()\n             throw new SPException(SPException::SP_INFO, __('Login/email de usuario duplicados', false));\n         }\n \n-        $passdata = UserPass::makeUserPassHash($this->itemData->getUserPass());\n-\n         $query = /** @lang SQL */\n             'INSERT INTO usrData SET\n             user_name = ?,\n@@ -64,14 +63,14 @@ public function add()\n             user_groupId = ?,\n             user_profileId = ?,\n             user_mPass = \\'\\',\n-            user_mIV = \\'\\',\n+            user_mKey = \\'\\',\n             user_isAdminApp = ?,\n             user_isAdminAcc = ?,\n             user_isDisabled = ?,\n             user_isChangePass = ?,\n             user_isLdap = 0,\n             user_pass = ?,\n-            user_hashSalt = ?';\n+            user_hashSalt = \\'\\'';\n \n         $Data = new QueryData();\n         $Data->setQuery($query);\n@@ -85,8 +84,7 @@ public function add()\n         $Data->addParam($this->itemData->isUserIsAdminAcc());\n         $Data->addParam($this->itemData->isUserIsDisabled());\n         $Data->addParam($this->itemData->isUserIsChangePass());\n-        $Data->addParam($passdata['pass']);\n-        $Data->addParam($passdata['salt']);\n+        $Data->addParam(Hash::hashKey($this->itemData->getUserPass()));\n         $Data->setOnErrorMessage(__('Error al crear el usuario', false));\n \n         DB::getQuery($Data);\n@@ -266,20 +264,18 @@ public function checkInUse($id)\n      */\n     public function updatePass()\n     {\n-        $passdata = UserPass::makeUserPassHash($this->itemData->getUserPass());\n-\n         $query = /** @lang SQL */\n             'UPDATE usrData SET\n             user_pass = ?,\n-            user_hashSalt = ?,\n+            user_hashSalt = \\'\\',\n             user_isChangePass = 0,\n+            user_isChangedPass = 1,\n             user_lastUpdate = NOW()\n             WHERE user_id = ? LIMIT 1';\n \n         $Data = new QueryData();\n         $Data->setQuery($query);\n-        $Data->addParam($passdata['pass']);\n-        $Data->addParam($passdata['salt']);\n+        $Data->addParam(Hash::hashKey($this->itemData->getUserPass()));\n         $Data->addParam($this->itemData->getUserId());\n         $Data->setOnErrorMessage(__('Error al modificar la clave', false));\n \n@@ -310,11 +306,16 @@ public function getById($id)\n             user_lastUpdate,\n             user_lastUpdateMPass,\n             user_preferences,\n+            user_pass,\n+            user_hashSalt,\n+            user_mPass,\n+            user_mKey,            \n             BIN(user_isAdminApp) AS user_isAdminApp,\n             BIN(user_isAdminAcc) AS user_isAdminAcc,\n             BIN(user_isLdap) AS user_isLdap,\n             BIN(user_isDisabled) AS user_isDisabled,\n             BIN(user_isChangePass) AS user_isChangePass,\n+            BIN(user_isChangedPass) AS user_isChangedPass,\n             BIN(user_isMigrate) AS user_isMigrate\n             FROM usrData\n             JOIN usrGroups ON usergroup_id = user_groupId\n@@ -362,19 +363,30 @@ public function getByLogin($login)\n             user_lastUpdate,\n             user_lastUpdateMPass,\n             user_preferences,\n+            user_pass,\n+            user_hashSalt,\n+            user_mPass,\n+            user_mKey,\n             BIN(user_isAdminApp) AS user_isAdminApp,\n             BIN(user_isAdminAcc) AS user_isAdminAcc,\n             BIN(user_isLdap) AS user_isLdap,\n             BIN(user_isDisabled) AS user_isDisabled,\n             BIN(user_isChangePass) AS user_isChangePass,\n+            BIN(user_isChangedPass) AS user_isChangedPass,\n             BIN(user_isDisabled) AS user_isDisabled,\n             BIN(user_isMigrate) AS user_isMigrate\n             FROM usrData\n             JOIN usrGroups ON usergroup_id = user_groupId\n             WHERE user_login = ? LIMIT 1';\n \n         $Data = new QueryData();\n-        $Data->setMapClassName($this->getDataModel());\n+\n+        if (is_object($this->itemData)) {\n+            $Data->setMapClass($this->itemData);\n+        } else {\n+            $Data->setMapClassName($this->getDataModel());\n+        }\n+        \n         $Data->setQuery($query);\n         $Data->addParam($login);\n \n@@ -419,6 +431,7 @@ public function getByIdBatch(array $ids)\n             BIN(user_isLdap) AS user_isLdap,\n             BIN(user_isDisabled) AS user_isDisabled,\n             BIN(user_isChangePass) AS user_isChangePass,\n+            BIN(user_isChangedPass) AS user_isChangedPass,\n             BIN(user_isMigrate) AS user_isMigrate\n             FROM usrData\n             JOIN usrGroups ON usergroup_id = user_groupId"
        },
        {
          "filename": "inc/SP/Mgmt/Users/UserLdap.class.php",
          "status": "modified",
          "additions": 6,
          "deletions": 10,
          "patch": "@@ -25,6 +25,7 @@\n namespace SP\\Mgmt\\Users;\n \n use SP\\Config\\Config;\n+use SP\\Core\\Crypt\\Hash;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\Core\\Messages\\LogMessage;\n use SP\\Log\\Email;\n@@ -77,7 +78,6 @@ public function add()\n             throw new SPException(SPException::SP_INFO, __('Login/email de usuario duplicados', false));\n         }\n \n-        $passdata = UserPass::makeUserPassHash($this->itemData->getUserPass());\n         $groupId = Config::getConfig()->getLdapDefaultGroup();\n         $profileId = Config::getConfig()->getLdapDefaultProfile();\n         $this->itemData->setUserIsDisabled(($groupId === 0 || $profileId === 0) ? 1 : 0);\n@@ -91,14 +91,14 @@ public function add()\n             user_groupId = ?,\n             user_profileId = ?,\n             user_mPass = \\'\\',\n-            user_mIV = \\'\\',\n+            user_mKey = \\'\\',\n             user_isAdminApp = ?,\n             user_isAdminAcc = ?,\n             user_isDisabled = ?,\n             user_isChangePass = ?,\n             user_isLdap = 1,\n             user_pass = ?,\n-            user_hashSalt = ?';\n+            user_hashSalt = \\'\\'';\n \n         $Data = new QueryData();\n         $Data->setQuery($query);\n@@ -112,8 +112,7 @@ public function add()\n         $Data->addParam((int)$this->itemData->isUserIsAdminAcc());\n         $Data->addParam((int)$this->itemData->isUserIsDisabled());\n         $Data->addParam((int)$this->itemData->isUserIsChangePass());\n-        $Data->addParam($passdata['pass']);\n-        $Data->addParam($passdata['salt']);\n+        $Data->addParam(Hash::hashKey($this->itemData->getUserPass()));\n         $Data->setOnErrorMessage(__('Error al guardar los datos de LDAP', false));\n \n         DB::getQuery($Data);\n@@ -177,11 +176,9 @@ public function delete($id)\n      */\n     public function update()\n     {\n-        $passdata = UserPass::makeUserPassHash($this->itemData->getUserPass());\n-\n         $query = 'UPDATE usrData SET \n             user_pass = ?,\n-            user_hashSalt = ?,\n+            user_hashSalt = \\'\\',\n             user_name = ?,\n             user_email = ?,\n             user_lastUpdate = NOW(),\n@@ -190,8 +187,7 @@ public function update()\n \n         $Data = new QueryData();\n         $Data->setQuery($query);\n-        $Data->addParam($passdata['pass']);\n-        $Data->addParam($passdata['salt']);\n+        $Data->addParam(Hash::hashKey($this->itemData->getUserPass()));\n         $Data->addParam($this->itemData->getUserName());\n         $Data->addParam($this->itemData->getUserEmail());\n         $Data->addParam($this->itemData->getUserLogin());"
        },
        {
          "filename": "inc/SP/Mgmt/Users/UserMigrate.class.php",
          "status": "modified",
          "additions": 39,
          "deletions": 34,
          "patch": "@@ -2,8 +2,8 @@\n /**\n  * sysPass\n  *\n- * @author nuxsmin\n- * @link http://syspass.org\n+ * @author    nuxsmin\n+ * @link      http://syspass.org\n  * @copyright 2012-2017, Rub\u00e9n Dom\u00ednguez nuxsmin@$syspass.org\n  *\n  * This file is part of sysPass.\n@@ -26,8 +26,11 @@\n \n defined('APP_ROOT') || die();\n \n+use SP\\Core\\Crypt\\Hash;\n use SP\\Core\\Exceptions\\SPException;\n use SP\\DataModel\\GroupUsersData;\n+use SP\\DataModel\\UserData;\n+use SP\\DataModel\\UserLoginData;\n use SP\\Log\\Email;\n use SP\\Log\\Log;\n use SP\\Mgmt\\Groups\\GroupUsers;\n@@ -64,49 +67,51 @@ public static function checkUserIsMigrate($userLogin)\n     /**\n      * Actualizar la clave de un usuario desde phpPMS.\n      *\n-     * @param string $userLogin con el login del usuario\n-     * @param string $userPass  con la clave del usuario\n-     *\n-     * Esta funci\u00f3n actualiza la clave de un usuario que ha sido migrado desde phpPMS\n+     * @param UserLoginData $UserData\n+     * @return bool\n      * @throws \\SP\\Core\\Exceptions\\SPException\n-     * @throws \\phpmailer\\phpmailerException\n-     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n      * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     *\n+     * Esta funci\u00f3n actualiza la clave de un usuario que ha sido migrado desde phpPMS\n      */\n-    public static function migrateUser($userLogin, $userPass)\n+    public static function migrateUserPass(UserLoginData $UserData)\n     {\n-        $passdata = UserPass::makeUserPassHash($userPass);\n-\n-        $query = /** @lang SQL */\n-            'UPDATE usrData SET\n+        $passOk = ($UserData->getUserPass() === sha1($UserData->getUserHashSalt() . $UserData->getLoginPass())\n+            || $UserData->getUserPass() === md5($UserData->getLoginPass())\n+            || hash_equals($UserData->getUserPass(), crypt($UserData->getLoginPass(), $UserData->getUserHashSalt()))\n+            || Hash::checkHashKey($UserData->getLoginPass(), $UserData->getUserPass()));\n+\n+        if ($passOk) {\n+            $query = /** @lang SQL */\n+                'UPDATE usrData SET\n             user_pass = ?,\n-            user_hashSalt = ?,\n+            user_hashSalt = \\'\\',\n             user_lastUpdate = NOW(),\n             user_isMigrate = 0\n-            WHERE user_login = ?\n-            AND user_isMigrate = 1\n-            AND (user_pass = SHA1(CONCAT(user_hashSalt,?))\n-            OR user_pass = MD5(?)) LIMIT 1';\n+            WHERE user_login = ? LIMIT 1';\n \n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->addParam($passdata['pass']);\n-        $Data->addParam($passdata['salt']);\n-        $Data->addParam($userLogin);\n-        $Data->addParam($userPass);\n-        $Data->addParam($userPass);\n-        $Data->setOnErrorMessage(__('Error al migrar cuenta de usuario', false));\n+            $Data = new QueryData();\n+            $Data->setQuery($query);\n+            $Data->addParam(Hash::hashKey($UserData->getLoginPass()));\n+            $Data->addParam($UserData->getLogin());\n+            $Data->setOnErrorMessage(__('Error al migrar cuenta de usuario', false));\n \n-        DB::getQuery($Data);\n+            DB::getQuery($Data);\n \n-        $Log = new Log();\n-        $Log->getLogMessage()\n-            ->setAction(__FUNCTION__)\n-            ->addDescription(__('Usuario actualizado', false))\n-            ->addDetails(__('Login', false), $userLogin);\n-        $Log->writeLog();\n+            $Log = new Log();\n+            $Log->getLogMessage()\n+                ->setAction(__FUNCTION__)\n+                ->addDescription(__('Usuario actualizado', false))\n+                ->addDetails(__('Login', false), $UserData->getLogin());\n+            $Log->writeLog();\n+\n+            Email::sendEmail($Log->getLogMessage());\n+\n+            return true;\n+        }\n \n-        Email::sendEmail($Log->getLogMessage());\n+        return false;\n     }\n \n     /**"
        },
        {
          "filename": "inc/SP/Mgmt/Users/UserPass.class.php",
          "status": "modified",
          "additions": 165,
          "deletions": 145,
          "patch": "@@ -26,15 +26,23 @@\n \n defined('APP_ROOT') || die();\n \n+use Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException;\n+use SP\\Config\\Config;\n use SP\\Config\\ConfigDB;\n-use SP\\Core\\Crypt;\n+use SP\\Controller\\LoginController;\n+use SP\\Core\\Crypt\\Crypt;\n+use SP\\Core\\Crypt\\Hash;\n+use SP\\Core\\Exceptions\\QueryException;\n use SP\\Core\\Exceptions\\SPException;\n-use SP\\Core\\SessionUtil;\n+use SP\\Core\\Upgrade\\User as UpgradeUser;\n+use SP\\DataModel\\UserData;\n+use SP\\DataModel\\UserLoginData;\n use SP\\DataModel\\UserPassData;\n use SP\\Log\\Email;\n use SP\\Log\\Log;\n use SP\\Storage\\DB;\n use SP\\Storage\\QueryData;\n+use SP\\Core\\Crypt\\Session as CryptSession;\n \n /**\n  * Class UserPass para la gesti\u00f3n de las claves de un usuario\n@@ -43,10 +51,24 @@\n  */\n class UserPass extends UserBase\n {\n+    // La clave maestra incorrecta\n+    const MPASS_WRONG = 0;\n+    // La clave maestra correcta\n+    const MPASS_OK = 1;\n+    // La clave maestra no est\u00e1 guardada\n+    const MPASS_NOTSET = 2;\n+    // La clave maestra ha cambiado\n+    const MPASS_CHANGED = 3;\n+    // Comprobar la clave maestra con la calve del usuario anterior\n+    const MPASS_CHECKOLD = 4;\n+    /**\n+     * @var bool\n+     */\n+    public static $gotMPass = false;\n     /**\n      * @var string\n      */\n-    protected $clearUserMPass = '';\n+    private static $clearUserMPass = '';\n \n     /**\n      * Category constructor.\n@@ -70,7 +92,7 @@ public function __construct($itemData = null)\n     public static function getUserIVById($id)\n     {\n         $query = /** @lang SQL */\n-            'SELECT user_mIV FROM usrData WHERE user_id = ? LIMIT 1';\n+            'SELECT user_mKey FROM usrData WHERE user_id = ? LIMIT 1';\n \n         $Data = new QueryData();\n         $Data->setQuery($query);\n@@ -82,15 +104,16 @@ public static function getUserIVById($id)\n             return false;\n         }\n \n-        return $queryRes->user_mIV;\n+        return $queryRes->user_mKey;\n     }\n \n     /**\n      * Comprobar si el usuario tiene actualizada la clave maestra actual.\n      *\n+     * @param int $userId ID de usuario\n      * @return bool\n      */\n-    public function checkUserUpdateMPass()\n+    public static function checkUserUpdateMPass($userId)\n     {\n         $configMPassTime = ConfigDB::getValue('lastupdatempass');\n \n@@ -104,7 +127,7 @@ public function checkUserUpdateMPass()\n         $Data = new QueryData();\n         $Data->setMapClassName(UserPassData::class);\n         $Data->setQuery($query);\n-        $Data->addParam($this->itemData->getUserId());\n+        $Data->addParam($userId);\n \n         /** @var UserPassData $queryRes */\n         $queryRes = DB::getResults($Data);\n@@ -113,205 +136,202 @@ public function checkUserUpdateMPass()\n     }\n \n     /**\n-     * Modificar la clave de un usuario.\n+     * Actualizar la clave maestra con la clave anterior del usuario\n      *\n-     * @param $userId\n-     * @param $userPass\n-     * @return $this\n+     * @param string        $oldUserPass\n+     * @param UserLoginData $UserData\n+     * @return bool\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n      * @throws \\SP\\Core\\Exceptions\\QueryException\n      * @throws \\SP\\Core\\Exceptions\\ConstraintException\n-     * @throws \\phpmailer\\phpmailerException\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n      */\n-    public function updateUserPass($userId, $userPass)\n+    public static function updateMasterPassFromOldPass($oldUserPass, UserLoginData $UserData)\n     {\n-        $passdata = self::makeUserPassHash($userPass);\n-        $this->setItemData(User::getItem()->getById($userId));\n-\n-        $query = /** @lang SQL */\n-            'UPDATE usrData SET\n-            user_pass = ?,\n-            user_hashSalt = ?,\n-            user_isChangePass = 0,\n-            user_lastUpdate = NOW() \n-            WHERE user_id = ? LIMIT 1';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->addParam($passdata['pass']);\n-        $Data->addParam($passdata['salt']);\n-        $Data->addParam($userId);\n-        $Data->setOnErrorMessage(__('Error al modificar la clave', false));\n-\n-        DB::getQuery($Data);\n-\n-        $Log = new Log();\n-        $Log->getLogMessage()\n-            ->setAction(__('Modificar Clave Usuario', false))\n-            ->addDetails(__('Login', false), $this->itemData->getUserLogin());\n-        $Log->writeLog();\n-\n-        Email::sendEmail($Log->getLogMessage());\n-\n-        return $this;\n-    }\n-\n-    /**\n-     * Crear la clave de un usuario.\n-     *\n-     * @param string $userPass con la clave del usuario\n-     * @return array con la clave y salt del usuario\n-     */\n-    public static function makeUserPassHash($userPass)\n-    {\n-        $salt = Crypt::makeHashSalt();\n+        if (self::loadUserMPass($UserData, $oldUserPass) === UserPass::MPASS_OK) {\n+            return self::updateUserMPass(self::$clearUserMPass, $UserData);\n+        }\n \n-        return ['salt' => $salt, 'pass' => crypt($userPass, $salt)];\n+        return UserPass::MPASS_WRONG;\n     }\n \n     /**\n      * Comprueba la clave maestra del usuario.\n      *\n+     * @param UserLoginData $UserData\n+     * @param string        $key Clave de cifrado\n      * @return bool\n+     * @throws \\Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException\n+     * @throws \\Defuse\\Crypto\\Exception\\BadFormatException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n      */\n-    public function loadUserMPass()\n+    public static function loadUserMPass(UserLoginData $UserData, $key = null)\n     {\n-        $userMPass = $this->getUserMPass();\n         $configHashMPass = ConfigDB::getValue('masterPwd');\n \n-        if ($userMPass === false || empty($configHashMPass)) {\n-            return false;\n-\n-            // Comprobamos el hash de la clave del usuario con la guardada\n-        } elseif (Crypt::checkHashPass($userMPass, $configHashMPass, true)) {\n-            $this->clearUserMPass = $userMPass;\n-\n-            SessionUtil::saveSessionMPass($userMPass);\n-\n-            return true;\n-        }\n-\n-        return null;\n-    }\n-\n-    /**\n-     * Desencriptar la clave maestra del usuario para la sesi\u00f3n.\n-     *\n-     * @param string $cypher Clave de cifrado\n-     * @return false|string Devuelve bool se hay error o string si se devuelve la clave\n-     */\n-    public function getUserMPass($cypher = null)\n-    {\n-        $query = /** @lang SQL */\n-            'SELECT user_mPass, user_mIV, user_lastUpdateMPass FROM usrData WHERE user_id = ? LIMIT 1';\n-\n-        $Data = new QueryData();\n-        $Data->setQuery($query);\n-        $Data->addParam($this->itemData->getUserId());\n-\n-        $queryRes = DB::getResults($Data);\n-\n-        if ($queryRes === false\n-            || empty($queryRes->user_mPass)\n-            || empty($queryRes->user_mIV)\n-            || $queryRes->user_lastUpdateMPass < ConfigDB::getValue('lastupdatempass')\n+        if (empty($configHashMPass)\n+            || empty($UserData->getUserMPass())\n+            || empty($UserData->getUserMKey())\n         ) {\n-            return false;\n+            return self::MPASS_NOTSET;\n+        } elseif ($UserData->getUserLastUpdateMPass() < ConfigDB::getValue('lastupdatempass')) {\n+            return self::MPASS_CHANGED;\n+        } elseif ($UserData->isUserIsMigrate() === 1) {\n+            return UpgradeUser::upgradeMasterKey($UserData) ? self::MPASS_OK : self::MPASS_WRONG;\n+        } elseif ($key === null && $UserData->isUserIsChangedPass() === 1) {\n+            return self::MPASS_CHECKOLD;\n+        } else {\n+            try {\n+                $securedKey = Crypt::unlockSecuredKey($UserData->getUserMKey(), self::getKey($UserData, $key));\n+                $userMPass = Crypt::decrypt($UserData->getUserMPass(), $securedKey, self::getKey($UserData, $key));\n+\n+                // Comprobamos el hash de la clave del usuario con la guardada\n+                if (Hash::checkHashKey($userMPass, $configHashMPass)) {\n+                    self::$gotMPass = true;\n+                    self::$clearUserMPass = $userMPass;\n+\n+                    CryptSession::saveSessionKey($userMPass);\n+\n+                    return self::MPASS_OK;\n+                }\n+            } catch (WrongKeyOrModifiedCiphertextException $e) {\n+                return self::MPASS_CHECKOLD;\n+            }\n         }\n \n-        $this->itemData->setUserMPass($queryRes->user_mPass);\n-        $this->itemData->setUserMIV($queryRes->user_mIV);\n-\n-        return Crypt::getDecrypt($queryRes->user_mPass, $queryRes->user_mIV, $this->getCypherPass($cypher));\n+        return self::MPASS_WRONG;\n     }\n \n     /**\n      * Obtener una clave de cifrado basada en la clave del usuario y un salt.\n      *\n-     * @param string $cypher Clave de cifrado\n+     * @param UserLoginData $UserData\n+     * @param string        $key Clave de cifrado\n      * @return string con la clave de cifrado\n      */\n-    private function getCypherPass($cypher = null)\n-    {\n-        $pass = $cypher === null ? $this->itemData->getUserPass() : $cypher;\n-\n-        return Crypt::generateAesKey($pass . $this->itemData->getUserLogin());\n-    }\n-\n-    /**\n-     * @return string\n-     */\n-    public function getClearUserMPass()\n-    {\n-        return $this->clearUserMPass;\n-    }\n-\n-    /**\n-     * Actualizar la clave maestra con la clave anterior del usuario\n-     *\n-     * @param $oldUserPass\n-     * @return bool\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n-     */\n-    public function updateMasterPass($oldUserPass)\n+    private static function getKey(UserLoginData $UserData, $key = null)\n     {\n-        $masterPass = $this->getUserMPass($oldUserPass);\n-\n-        if ($masterPass) {\n-            return $this->updateUserMPass($masterPass);\n-        }\n+        $pass = $key === null ? $UserData->getLoginPass() : $key;\n \n-        return false;\n+        return $pass . $UserData->getLogin() . Config::getConfig()->getPasswordSalt();\n     }\n \n     /**\n      * Actualizar la clave maestra del usuario en la BBDD.\n      *\n-     * @param string $masterPwd con la clave maestra\n+     * @param string                 $userMPass con la clave maestra\n+     * @param UserData|UserLoginData $UserData  $UserData\n      * @return bool\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\Defuse\\Crypto\\Exception\\CryptoException\n      * @throws \\SP\\Core\\Exceptions\\SPException\n+     * @throws QueryException\n      */\n-    public function updateUserMPass($masterPwd)\n+    public static function updateUserMPass($userMPass, UserLoginData $UserData)\n     {\n         $configHashMPass = ConfigDB::getValue('masterPwd');\n \n         if ($configHashMPass === false) {\n-            return false;\n+            return self::MPASS_NOTSET;\n         } elseif (null === $configHashMPass) {\n-            $configHashMPass = Crypt::mkHashPassword($masterPwd);\n+            $configHashMPass = Hash::hashKey($userMPass);\n             ConfigDB::setValue('masterPwd', $configHashMPass);\n         }\n \n-        if (Crypt::checkHashPass($masterPwd, $configHashMPass, true)) {\n-            $cryptMPass = Crypt::mkCustomMPassEncrypt($this->getCypherPass(), $masterPwd);\n+        if (Hash::checkHashKey($userMPass, $configHashMPass)\n+            || \\SP\\Core\\Upgrade\\Crypt::migrateHash($userMPass)\n+        ) {\n+            $securedKey = Crypt::makeSecuredKey(self::getKey($UserData));\n+            $cryptMPass = Crypt::encrypt($userMPass, $securedKey, self::getKey($UserData));\n \n             if (!empty($cryptMPass)) {\n+                if (strlen($securedKey) > 1000 || strlen($cryptMPass) > 1000) {\n+                    throw new QueryException(SPException::SP_ERROR, __('Error interno', false), '', LoginController::STATUS_INTERNAL_ERROR);\n+                }\n+\n                 $query = /** @lang SQL */\n                     'UPDATE usrData SET \n                     user_mPass = ?,\n-                    user_mIV = ?,\n-                    user_lastUpdateMPass = UNIX_TIMESTAMP() \n+                    user_mKey = ?,\n+                    user_lastUpdateMPass = UNIX_TIMESTAMP(),\n+                    user_isMigrate = 0,\n+                    user_isChangedPass = 0 \n                     WHERE user_id = ? LIMIT 1';\n \n                 $Data = new QueryData();\n                 $Data->setQuery($query);\n-                $Data->addParam($cryptMPass[0]);\n-                $Data->addParam($cryptMPass[1]);\n-                $Data->addParam($this->itemData->getUserId());\n+                $Data->addParam($cryptMPass);\n+                $Data->addParam($securedKey);\n+                $Data->addParam($UserData->getUserId());\n \n-                $this->clearUserMPass = $masterPwd;\n+                self::$clearUserMPass = $userMPass;\n+                self::$gotMPass = true;\n \n-                $this->itemData->setUserMPass($cryptMPass[0]);\n-                $this->itemData->setUserMIV($cryptMPass[1]);\n+                CryptSession::saveSessionKey($userMPass);\n+\n+                $UserData->setUserMPass($cryptMPass);\n+                $UserData->setUserMKey($securedKey);\n \n                 DB::getQuery($Data);\n \n-                return true;\n+                return self::MPASS_OK;\n             }\n         }\n \n-        return false;\n+        return self::MPASS_WRONG;\n+    }\n+\n+    /**\n+     * @return string\n+     */\n+    public static function getClearUserMPass()\n+    {\n+        return self::$clearUserMPass;\n+    }\n+\n+    /**\n+     * Modificar la clave de un usuario.\n+     *\n+     * @param $userId\n+     * @param $userPass\n+     * @return $this\n+     * @throws \\SP\\Core\\Exceptions\\QueryException\n+     * @throws \\SP\\Core\\Exceptions\\ConstraintException\n+     * @throws \\phpmailer\\phpmailerException\n+     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n+     * @throws \\SP\\Core\\Exceptions\\SPException\n+     */\n+    public function updateUserPass($userId, $userPass)\n+    {\n+        $this->setItemData(User::getItem()->getById($userId));\n+\n+        $query = /** @lang SQL */\n+            'UPDATE usrData SET\n+            user_pass = ?,\n+            user_hashSalt = \\'\\',\n+            user_isChangePass = 0,\n+            user_lastUpdate = NOW() \n+            WHERE user_id = ? LIMIT 1';\n+\n+        $Data = new QueryData();\n+        $Data->setQuery($query);\n+        $Data->addParam(Hash::hashKey($userPass));\n+        $Data->addParam($userId);\n+        $Data->setOnErrorMessage(__('Error al modificar la clave', false));\n+\n+        DB::getQuery($Data);\n+\n+        $Log = new Log();\n+        $Log->getLogMessage()\n+            ->setAction(__('Modificar Clave Usuario', false))\n+            ->addDetails(__('Login', false), $this->itemData->getUserLogin());\n+        $Log->writeLog();\n+\n+        Email::sendEmail($Log->getLogMessage());\n+\n+        return $this;\n     }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/SP/Mgmt/Users/UserPreferencesUtil.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -48,8 +48,6 @@ class UserPreferencesUtil\n      *\n      * @return bool\n      * @throws \\SP\\Core\\Exceptions\\SPException\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n-     * @throws \\InvalidArgumentException\n      */\n     public static function migrate()\n     {\n@@ -93,8 +91,6 @@ public static function migrate()\n      *\n      * @param UserData $UserData\n      * @throws \\SP\\Core\\Exceptions\\SPException\n-     * @throws \\SP\\Core\\Exceptions\\InvalidClassException\n-     * @throws \\InvalidArgumentException\n      */\n     protected static function migrateTwoFA(UserData $UserData)\n     {"
        },
        {
          "filename": "inc/SP/Storage/DB.class.php",
          "status": "modified",
          "additions": 15,
          "deletions": 26,
          "patch": "@@ -110,7 +110,7 @@ public static function getResults(QueryData $queryData)\n         } catch (SPException $e) {\n             $queryData->setQueryStatus($e->getCode());\n \n-            self::logDBException($queryData->getQuery(), $e->getMessage(), $e->getCode(), __FUNCTION__);\n+            self::logDBException($queryData->getQuery(), $e, __FUNCTION__);\n             return false;\n         }\n \n@@ -146,12 +146,8 @@ public function doQuery(QueryData $queryData, $getRawData = false)\n         // Limpiar valores de cach\u00e9\n         $this->lastResult = [];\n \n-        try {\n-            /** @var PDOStatement $queryRes */\n-            $queryRes = $this->prepareQueryData($queryData);\n-        } catch (SPException $e) {\n-            throw $e;\n-        }\n+        /** @var PDOStatement $queryRes */\n+        $queryRes = $this->prepareQueryData($queryData);\n \n         if ($isSelect) {\n             if ($getRawData) {\n@@ -250,7 +246,7 @@ private function prepareQueryData(QueryData $queryData, $isCount = false)\n             debugLog('Exception: ' . $e->getMessage());\n             debugLog(ob_get_clean());\n \n-            throw new SPException(SPException::SP_CRITICAL, $e->getMessage(), '', $e->getCode(), $e);\n+            throw new SPException(SPException::SP_CRITICAL, $e->getMessage(), $e->getCode());\n         }\n     }\n \n@@ -267,34 +263,27 @@ private function getFullRowCount(QueryData $queryData)\n             return 0;\n         }\n \n-        try {\n-            $queryRes = $this->prepareQueryData($queryData, true);\n-            $num = (int)$queryRes->fetchColumn();\n-            $queryRes->closeCursor();\n-            $queryData->setQueryNumRows($num);\n-        } catch (SPException $e) {\n-            debugLog('Exception: ' . $e->getMessage());\n-\n-            throw $e;\n-        }\n+        $queryRes = $this->prepareQueryData($queryData, true);\n+        $num = (int)$queryRes->fetchColumn();\n+        $queryRes->closeCursor();\n+        $queryData->setQueryNumRows($num);\n     }\n \n     /**\n      * M\u00e9todo para registar los eventos de BD en el log\n      *\n-     * @param $query     string  La consulta que genera el error\n-     * @param $errorMsg  string  El mensaje de error\n-     * @param $errorCode int     El c\u00f3digo de error\n-     * @param $queryFunction\n+     * @param string     $query La consulta que genera el error\n+     * @param \\Exception $e\n+     * @param string     $queryFunction\n      */\n-    private static function logDBException($query, $errorMsg, $errorCode, $queryFunction)\n+    private static function logDBException($query, \\Exception $e, $queryFunction)\n     {\n         $caller = Util::traceLastCall($queryFunction);\n \n         $LogMessage = new LogMessage();\n         $LogMessage->setAction($caller);\n         $LogMessage->addDescription(__('Error en la consulta', false));\n-        $LogMessage->addDescription(sprintf('%s (%s)', $errorMsg, $errorCode));\n+        $LogMessage->addDescription(sprintf('%s (%s)', $e->getMessage(), $e->getCode()));\n         $LogMessage->addDetails('SQL', DBUtil::escape($query));\n \n         debugLog($LogMessage->getDescription(), true);\n@@ -321,7 +310,7 @@ public static function getResultsRaw(QueryData $queryData)\n             $db = new DB();\n             return $db->doQuery($queryData, true);\n         } catch (SPException $e) {\n-            self::logDBException($queryData->getQuery(), $e->getMessage(), $e->getCode(), __FUNCTION__);\n+            self::logDBException($queryData->getQuery(), $e, __FUNCTION__);\n \n             throw $e;\n         }\n@@ -355,7 +344,7 @@ public static function getQuery(QueryData $queryData)\n         } catch (SPException $e) {\n             $queryData->setQueryStatus($e->getCode());\n \n-            self::logDBException($queryData->getQuery(), $e->getMessage(), $e->getCode(), __FUNCTION__);\n+            self::logDBException($queryData->getQuery(), $e, __FUNCTION__);\n \n             if ($e->getCode() === 23000) {\n                 throw new ConstraintException(SPException::SP_ERROR, __('Restricci\u00f3n de integridad', false), $e->getMessage(), $e->getCode());"
        },
        {
          "filename": "inc/SP/Util/Json.class.php",
          "status": "modified",
          "additions": 12,
          "deletions": 4,
          "patch": "@@ -38,14 +38,22 @@ class Json\n     /**\n      * Devuelve una respuesta en formato JSON con el estado y el mensaje.\n      *\n-     * @param JsonResponse $json\n+     * @param JsonResponse $JsonResponse\n      * @return bool\n-     * @throws \\SP\\Core\\Exceptions\\SPException\n      */\n-    public static function returnJson(JsonResponse $json)\n+    public static function returnJson(JsonResponse $JsonResponse)\n     {\n         header('Content-type: application/json');\n-        exit(self::getJson($json));\n+\n+        try {\n+            exit(self::getJson($JsonResponse));\n+        } catch (SPException $e) {\n+            $JsonResponse = new JsonResponse();\n+            $JsonResponse->setDescription($e->getMessage());\n+            $JsonResponse->addMessage($e->getHint());\n+\n+            exit(json_encode($JsonResponse));\n+        }\n     }\n \n     /**"
        },
        {
          "filename": "inc/SP/Util/Util.class.php",
          "status": "modified",
          "additions": 66,
          "deletions": 13,
          "patch": "@@ -43,7 +43,7 @@ class Util\n     /**\n      * Generar una clave aleatoria\n      *\n-     * @param int $length Longitud de la clave\n+     * @param int  $length     Longitud de la clave\n      * @param bool $useNumbers Usar n\u00fameros\n      * @param bool $useSpecial Usar car\u00e1cteres especiales\n      * @param bool $checKStrength\n@@ -121,9 +121,13 @@ public static function randomPassword($length = 16, $useNumbers = true, $useSpec\n      */\n     public static function generateRandomBytes($length = 30)\n     {\n+        if (function_exists('random_bytes')) {\n+            return bin2hex(random_bytes($length));\n+        }\n+\n         // Try to use openssl_random_pseudo_bytes\n         if (function_exists('openssl_random_pseudo_bytes')) {\n-            $pseudo_byte = bin2hex(openssl_random_pseudo_bytes($length));\n+            $pseudo_byte = bin2hex(openssl_random_pseudo_bytes($length, $strong));\n             return substr($pseudo_byte, 0, $length); // Truncate it to match the length\n         }\n \n@@ -174,7 +178,7 @@ public static function init_var($s, $d = '')\n      */\n     public static function getVersionString()\n     {\n-        return '2.0';\n+        return '2.1';\n     }\n \n     /**\n@@ -242,10 +246,10 @@ public static function checkUpdates()\n     /**\n      * Obtener datos desde una URL usando CURL\n      *\n-     * @param string $url\n-     * @param array $data\n+     * @param string    $url\n+     * @param array     $data\n      * @param bool|null $useCookie\n-     * @param bool $weak\n+     * @param bool      $weak\n      * @return bool|string\n      * @throws SPException\n      */\n@@ -368,8 +372,8 @@ public static function getAppInfo($index = null)\n      */\n     public static function getVersion($retBuild = false)\n     {\n-        $build = '17022001';\n-        $version = [2, 0, 0];\n+        $build = '17022601';\n+        $version = [2, 1, 0];\n \n         if ($retBuild) {\n             $version[] = $build;\n@@ -449,8 +453,8 @@ public static function getMaxUpload()\n      * such as 'false','N','yes','on','off', etc.\n      *\n      * @author Samuel Levy <sam+nospam@samuellevy.com>\n-     * @param mixed $in The variable to check\n-     * @param bool $strict If set to false, consider everything that is not false to\n+     * @param mixed $in     The variable to check\n+     * @param bool  $strict If set to false, consider everything that is not false to\n      *                      be true.\n      * @return bool The boolean equivalent or null (if strict, and no exact equivalent)\n      */\n@@ -524,7 +528,7 @@ public static function getServerUrl()\n     /**\n      * Cast an object to another class, keeping the properties, but changing the methods\n      *\n-     * @param string $class Class name\n+     * @param string        $class Class name\n      * @param string|object $object\n      * @return mixed\n      * @link http://blog.jasny.net/articles/a-dark-corner-of-php-class-casting/\n@@ -580,9 +584,9 @@ public static function traceLastCall($function = null)\n     /**\n      * Comprobar si un valor existe en un array de objetos\n      *\n-     * @param array $objectArray\n+     * @param array  $objectArray\n      * @param string $method\n-     * @param mixed $value\n+     * @param mixed  $value\n      * @return bool\n      */\n     public static function checkInObjectArray(array $objectArray, $method, $value)\n@@ -598,6 +602,7 @@ public static function checkInObjectArray(array $objectArray, $method, $value)\n \n     /**\n      * Bloquear la aplicaci\u00f3n\n+     *\n      * @param bool $setMaintenance\n      */\n     public static function lockApp($setMaintenance = true)\n@@ -612,6 +617,7 @@ public static function lockApp($setMaintenance = true)\n \n     /**\n      * Desbloquear la aplicaci\u00f3n\n+     *\n      * @param bool $unsetMaintenance\n      */\n     public static function unlockApp($unsetMaintenance = true)\n@@ -633,4 +639,51 @@ public static function getAppLock()\n     {\n         return (int)ConfigDB::getValue('lock', 0);\n     }\n+\n+    /**\n+     * Devolver el tiempo aproximado en segundos de una operaci\u00f3n\n+     *\n+     * @param $startTime\n+     * @param $numItems\n+     * @param $totalItems\n+     *\n+     * @return array Con el tiempo estimado y los elementos por segundo\n+     */\n+    public static function getETA($startTime, $numItems, $totalItems)\n+    {\n+        if ($numItems > 0 && $totalItems > 0) {\n+            $runtime = time() - $startTime;\n+            $eta = (int)((($totalItems * $runtime) / $numItems) - $runtime);\n+\n+            return [$eta, $numItems / $runtime];\n+        }\n+\n+        return [0, 0];\n+    }\n+\n+    /**\n+     * Comprueba y devuelve un directorio temporal v\u00e1lido\n+     *\n+     * @return bool|string\n+     */\n+    public static function getTempDir()\n+    {\n+        $sysTmp = sys_get_temp_dir();\n+        $appTmp = Init::$SERVERROOT . DIRECTORY_SEPARATOR . 'tmp';\n+        $file = 'syspass.test';\n+\n+        if (file_exists($appTmp . DIRECTORY_SEPARATOR . $file)) {\n+            return $appTmp;\n+        } elseif (file_exists($sysTmp . DIRECTORY_SEPARATOR . $file)) {\n+            return $sysTmp;\n+        }\n+\n+        if (is_dir($appTmp) || @mkdir($appTmp)) {\n+            if (touch($appTmp . DIRECTORY_SEPARATOR . $file)) {\n+                return $appTmp;\n+            }\n+        }\n+\n+        return touch($sysTmp . DIRECTORY_SEPARATOR . $file) ? $sysTmp : false;\n+    }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "inc/locales/ca_ES/LC_MESSAGES/messages.mo",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "inc/locales/ca_ES/LC_MESSAGES/messages.po",
          "status": "modified",
          "additions": 4644,
          "deletions": 4446,
          "patch": null
        },
        {
          "filename": "inc/locales/de_DE/LC_MESSAGES/messages.mo",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "inc/locales/de_DE/LC_MESSAGES/messages.po",
          "status": "modified",
          "additions": 4857,
          "deletions": 4577,
          "patch": null
        },
        {
          "filename": "inc/locales/en_US/LC_MESSAGES/messages.mo",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "inc/locales/en_US/LC_MESSAGES/messages.po",
          "status": "modified",
          "additions": 1167,
          "deletions": 1045,
          "patch": null
        },
        {
          "filename": "inc/locales/fr_FR/LC_MESSAGES/messages.mo",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "inc/locales/fr_FR/LC_MESSAGES/messages.po",
          "status": "modified",
          "additions": 4830,
          "deletions": 5067,
          "patch": null
        },
        {
          "filename": "inc/locales/nl_NL/LC_MESSAGES/messages.po",
          "status": "modified",
          "additions": 4768,
          "deletions": 4398,
          "patch": null
        },
        {
          "filename": "inc/locales/po_PO/LC_MESSAGES/messages.mo",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "inc/locales/po_PO/LC_MESSAGES/messages.po",
          "status": "modified",
          "additions": 4818,
          "deletions": 4546,
          "patch": null
        },
        {
          "filename": "inc/locales/ru_RU/LC_MESSAGES/messages.mo",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "inc/locales/ru_RU/LC_MESSAGES/messages.po",
          "status": "modified",
          "additions": 4759,
          "deletions": 5055,
          "patch": null
        },
        {
          "filename": "inc/sql/21017022601.sql",
          "status": "added",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -0,0 +1,26 @@\n+ALTER TABLE `accounts`\n+  CHANGE COLUMN `account_pass` `account_pass` VARBINARY(1000) NOT NULL,\n+  CHANGE COLUMN `account_IV` `account_key` VARBINARY(1000) NOT NULL;\n+ALTER TABLE `accHistory`\n+  CHANGE COLUMN `acchistory_IV` `acchistory_key` VARBINARY(1000) NOT NULL ;\n+ALTER TABLE `customFieldsData`\n+  CHANGE COLUMN `customfielddata_iv` `customfielddata_key` VARBINARY(1000) NOT NULL;\n+ALTER TABLE `usrData`\n+  CHANGE COLUMN `user_mPass` `user_mPass` VARBINARY(1000) NULL DEFAULT NULL,\n+  CHANGE COLUMN `user_mIV` `user_mKey` VARBINARY(1000) NULL DEFAULT NULL;\n+ALTER TABLE `authTokens`\n+  ADD COLUMN `authtoken_vault` VARBINARY(2000) NULL,\n+  ADD COLUMN `authtoken_hash` VARBINARY(100) NULL;\n+CREATE TABLE `track` (\n+  `track_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,\n+  `track_userId` SMALLINT(5) UNSIGNED NULL,\n+  `track_source` VARCHAR(100) NOT NULL,\n+  `track_time` INT UNSIGNED NOT NULL,\n+  `track_ipv4` BINARY(4) NOT NULL,\n+  `track_ipv6` BINARY(16) NULL,\n+  PRIMARY KEY (`track_id`),\n+  INDEX `IDX_userId` (`track_userId` ASC),\n+  INDEX `IDX_time-ip-source` (`track_time` ASC, `track_ipv4` ASC, `track_ipv6` ASC, `track_source` ASC)\n+) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;\n+ALTER TABLE `usrData` ADD COLUMN `user_isChangedPass` BIT(1) NULL DEFAULT b'0' AFTER `user_isChangePass`;\n+"
        },
        {
          "filename": "inc/sql/dbstructure.sql",
          "status": "modified",
          "additions": 42,
          "deletions": 21,
          "patch": "@@ -19,7 +19,7 @@ CREATE TABLE `customers` (\n   `customer_description` varchar(255) DEFAULT NULL,\n   PRIMARY KEY (`customer_id`),\n   KEY `IDX_name` (`customer_name`,`customer_hash`)\n-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `categories`;\n@@ -31,7 +31,7 @@ CREATE TABLE `categories` (\n   `category_hash` varbinary(40) NOT NULL,\n   `category_description` varchar(255) DEFAULT NULL,\n   PRIMARY KEY (`category_id`)\n-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `usrGroups`;\n@@ -42,7 +42,7 @@ CREATE TABLE `usrGroups` (\n   `usergroup_name` varchar(50) NOT NULL,\n   `usergroup_description` varchar(255) DEFAULT NULL,\n   PRIMARY KEY (`usergroup_id`)\n-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `usrProfiles`;\n@@ -53,7 +53,7 @@ CREATE TABLE `usrProfiles` (\n   `userprofile_name` varchar(45) NOT NULL,\n   `userProfile_profile` blob NOT NULL,\n   PRIMARY KEY (`userprofile_id`)\n-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `usrData`;\n@@ -65,9 +65,9 @@ CREATE TABLE `usrData` (\n   `user_groupId` smallint(3) unsigned NOT NULL,\n   `user_secGroupId` smallint(3) unsigned DEFAULT NULL,\n   `user_login` varchar(50) NOT NULL,\n-  `user_pass` varbinary(255) NOT NULL,\n-  `user_mPass` varbinary(255) DEFAULT NULL,\n-  `user_mIV` varbinary(32) NOT NULL,\n+  `user_pass` varbinary(1000) NOT NULL,\n+  `user_mPass` varbinary(1000) DEFAULT NULL,\n+  `user_mKey` varbinary(1000) NOT NULL,\n   `user_email` varchar(80) DEFAULT NULL,\n   `user_notes` text,\n   `user_count` int(10) unsigned NOT NULL DEFAULT '0',\n@@ -82,6 +82,7 @@ CREATE TABLE `usrData` (\n   `user_hashSalt` varbinary(128) NOT NULL,\n   `user_isMigrate` bit(1) DEFAULT b'0',\n   `user_isChangePass` bit(1) DEFAULT b'0',\n+  `user_isChangedPass` bit(1) DEFAULT b'0',\n   `user_preferences` blob,\n   PRIMARY KEY (`user_id`),\n   UNIQUE KEY `IDX_login` (`user_login`),\n@@ -90,7 +91,7 @@ CREATE TABLE `usrData` (\n   KEY `fk_usrData_profiles_id_idx` (`user_profileId`),\n   CONSTRAINT `fk_usrData_groups_id` FOREIGN KEY (`user_groupId`) REFERENCES `usrGroups` (`usergroup_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,\n   CONSTRAINT `fk_usrData_profiles_id` FOREIGN KEY (`user_profileId`) REFERENCES `usrProfiles` (`userprofile_id`) ON DELETE RESTRICT ON UPDATE RESTRICT\n-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `accounts`;\n@@ -106,8 +107,8 @@ CREATE TABLE `accounts` (\n   `account_categoryId` smallint(5) unsigned NOT NULL,\n   `account_login` varchar(50) DEFAULT NULL,\n   `account_url` varchar(255) DEFAULT NULL,\n-  `account_pass` varbinary(255) NOT NULL,\n-  `account_IV` varbinary(32) NOT NULL,\n+  `account_pass` varbinary(1000) NOT NULL,\n+  `account_key` varbinary(1000) NOT NULL,\n   `account_notes` text,\n   `account_countView` int(10) unsigned NOT NULL DEFAULT '0',\n   `account_countDecrypt` int(10) unsigned NOT NULL DEFAULT '0',\n@@ -131,7 +132,7 @@ CREATE TABLE `accounts` (\n   CONSTRAINT `fk_accounts_user_edit_id` FOREIGN KEY (`account_userEditId`) REFERENCES `usrData` (`user_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,\n   CONSTRAINT `fk_accounts_customer_id` FOREIGN KEY (`account_customerId`) REFERENCES `customers` (`customer_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,\n   CONSTRAINT `fk_accounts_userGroup_id` FOREIGN KEY (`account_userGroupId`) REFERENCES `usrGroups` (`usergroup_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\n-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `accFavorites`;\n@@ -161,7 +162,7 @@ CREATE TABLE `accFiles` (\n   PRIMARY KEY (`accfile_id`),\n   KEY `IDX_accountId` (`accfile_accountId`),\n   CONSTRAINT `fk_accFiles_accounts_id` FOREIGN KEY (`accfile_accountId`) REFERENCES `accounts` (`account_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\n-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `accGroups`;\n@@ -191,8 +192,8 @@ CREATE TABLE `accHistory` (\n   `acchistory_categoryId` smallint(5) unsigned NOT NULL,\n   `acchistory_login` varchar(50) NOT NULL,\n   `acchistory_url` varchar(255) DEFAULT NULL,\n-  `acchistory_pass` varbinary(255) NOT NULL,\n-  `acchistory_IV` varbinary(32) NOT NULL,\n+  `acchistory_pass` varbinary(500) NOT NULL,\n+  `acchistory_key` varbinary(1000) NOT NULL,\n   `acchistory_notes` text NOT NULL,\n   `acchistory_countView` int(10) unsigned NOT NULL DEFAULT '0',\n   `acchistory_countDecrypt` int(10) unsigned NOT NULL DEFAULT '0',\n@@ -219,7 +220,7 @@ CREATE TABLE `accHistory` (\n   CONSTRAINT `fk_accHistory_category_id` FOREIGN KEY (`acchistory_categoryId`) REFERENCES `categories` (`category_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,\n   CONSTRAINT `fk_accHistory_customer_id` FOREIGN KEY (`acchistory_customerId`) REFERENCES `customers` (`customer_id`) ON DELETE RESTRICT ON UPDATE RESTRICT,\n   CONSTRAINT `fk_accHistory_userGroup_id` FOREIGN KEY (`acchistory_userGroupId`) REFERENCES `usrGroups` (`usergroup_id`) ON DELETE NO ACTION ON UPDATE NO ACTION\n-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `tags`;\n@@ -232,7 +233,7 @@ CREATE TABLE `tags` (\n   PRIMARY KEY (`tag_id`),\n   UNIQUE KEY `tag_hash_UNIQUE` (`tag_hash`),\n   KEY `IDX_name` (`tag_name`)\n-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `accTags`;\n@@ -271,14 +272,16 @@ CREATE TABLE `authTokens` (\n   `authtoken_actionId` smallint(5) unsigned NOT NULL,\n   `authtoken_createdBy` smallint(5) unsigned NOT NULL,\n   `authtoken_startDate` int(10) unsigned NOT NULL,\n+  `authtoken_vault` varbinary(2000) NULL,\n+  `authtoken_hash` varbinary(1000) NULL,\n   PRIMARY KEY (`authtoken_id`),\n   UNIQUE KEY `unique_authtoken_id` (`authtoken_id`),\n   KEY `IDX_checkToken` (`authtoken_userId`,`authtoken_actionId`,`authtoken_token`),\n   KEY `fk_authTokens_users_id_idx` (`authtoken_userId`,`authtoken_createdBy`),\n   KEY `fk_authTokens_users_createdby_id` (`authtoken_createdBy`),\n   CONSTRAINT `fk_authTokens_user_id` FOREIGN KEY (`authtoken_userId`) REFERENCES `usrData` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE,\n   CONSTRAINT `fk_authTokens_createdBy_id` FOREIGN KEY (`authtoken_createdBy`) REFERENCES `usrData` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE\n-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `config`;\n@@ -300,7 +303,7 @@ CREATE TABLE `customFieldsData` (\n   `customfielddata_itemId` int(10) unsigned NOT NULL,\n   `customfielddata_defId` int(10) unsigned NOT NULL,\n   `customfielddata_data` longblob,\n-  `customfielddata_iv` varbinary(128) DEFAULT NULL,\n+  `customfielddata_key` varbinary(1000) DEFAULT NULL,\n   PRIMARY KEY (`customfielddata_id`),\n   KEY `IDX_DEFID` (`customfielddata_defId`),\n   KEY `IDX_DELETE` (`customfielddata_itemId`,`customfielddata_moduleId`),\n@@ -335,7 +338,7 @@ CREATE TABLE `log` (\n   `log_description` text,\n   `log_level` varchar(20) NOT NULL,\n   PRIMARY KEY (`log_id`)\n-) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8;\n+) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `publicLinks`;\n@@ -391,7 +394,8 @@ CREATE TABLE `plugins` (\n   `plugin_data` VARBINARY(5000) NULL,\n   `plugin_enabled` BIT(1) NOT NULL DEFAULT b'0',\n   PRIMARY KEY (`plugin_id`),\n-  UNIQUE INDEX `plugin_name_UNIQUE` (`plugin_name` ASC));\n+  UNIQUE INDEX `plugin_name_UNIQUE` (`plugin_name` ASC)\n+) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `notices`;\n@@ -409,7 +413,24 @@ CREATE TABLE `notices` (\n   `notice_onlyAdmin` BIT(1) NULL DEFAULT b'0',\n   PRIMARY KEY (`notice_id`),\n   INDEX `IDX_userId` (`notice_userId` ASC, `notice_checked` ASC, `notice_date` ASC),\n-  INDEX `IDX_component` (`notice_component` ASC, `notice_date` ASC, `notice_checked` ASC, `notice_userId` ASC));\n+  INDEX `IDX_component` (`notice_component` ASC, `notice_date` ASC, `notice_checked` ASC, `notice_userId` ASC)\n+) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;\n+/*!40101 SET character_set_client = @saved_cs_client */;\n+\n+DROP TABLE IF EXISTS `track`;\n+/*!40101 SET @saved_cs_client     = @@character_set_client */;\n+/*!40101 SET character_set_client = utf8 */;\n+CREATE TABLE `track` (\n+  `track_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,\n+  `track_userId` SMALLINT(5) UNSIGNED NULL,\n+  `track_source` VARCHAR(100) NOT NULL,\n+  `track_time` INT UNSIGNED NOT NULL,\n+  `track_ipv4` BINARY(4) NOT NULL,\n+  `track_ipv6` BINARY(16) NULL,\n+  PRIMARY KEY (`track_id`),\n+  INDEX `IDX_userId` (`track_userId` ASC),\n+  INDEX `IDX_time-ip-source` (`track_time` ASC, `track_ipv4` ASC, `track_ipv6` ASC, `track_source` ASC)\n+) ENGINE = InnoDB DEFAULT CHARACTER SET = utf8;\n /*!40101 SET character_set_client = @saved_cs_client */;\n \n DROP TABLE IF EXISTS `account_data_v`;"
        },
        {
          "filename": "inc/themes/material-blue/css/styles.css",
          "status": "modified",
          "additions": 14,
          "deletions": 2,
          "patch": "@@ -153,6 +153,18 @@ pre, code, samp, kbd {\n       position: absolute;\n       top: 50%;\n       left: 50%; }\n+    #wrap-loading.overlay-full #taskStatus {\n+      display: block; }\n+  #wrap-loading #taskStatus {\n+    display: none;\n+    position: absolute;\n+    left: 0;\n+    top: 55%;\n+    width: 100%;\n+    text-align: center;\n+    color: white;\n+    background-color: rgba(0, 0, 0, 0.5);\n+    padding: 1em 0; }\n \n #container {\n   margin: auto;\n@@ -530,8 +542,8 @@ pre, code, samp, kbd {\n   padding: .3em 0; }\n \n #box-popup {\n-  min-width: 25em;\n-  max-width: 50em;\n+  min-width: 30em;\n+  max-width: 60em;\n   margin: 5em auto;\n   padding: 0;\n   background-color: #fff; }"
        },
        {
          "filename": "inc/themes/material-blue/css/styles.css.map",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n \"version\": 3,\n-\"mappings\": \"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\",\n+\"mappings\": \"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\",\n \"sources\": [\"_elements.scss\",\"_base.scss\",\"styles.scss\",\"_login.scss\"],\n \"names\": [],\n \"file\": \"styles.css\""
        },
        {
          "filename": "inc/themes/material-blue/css/styles.min.css",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1 +1 @@\n-html,body{margin:0;padding:0;text-align:left;background-color:#f5f5f5;color:#555;font-size:12px;font-weight:normal;box-sizing:border-box}*{font-family:\"Roboto Regular\",Verdana,Tahoma,sans-serif;box-sizing:inherit}*:before,*:after{box-sizing:inherit}table{font-size:11px;border-spacing:0}table th{border-bottom:2px solid transparent;vertical-align:middle}table th .icon{width:24px;height:24px}table tr{height:20px}table tr.odd{background-color:#f9f9f9}table tr.even>td,table tr.odd>td{border-bottom:1px solid #d9d9d9!important}table tr.even:hover,table tr.odd:hover{background-color:#e8ff99}table td{padding:3px}table td.txtCliente{font-weight:bold;text-align:center}form{font-size:11px;margin:0}input.inputImg,img.inputImg{background-color:transparent!important;width:24px!important;height:24px!important;border:0;vertical-align:middle;margin:0 .5em}input.txtFile{width:200px}input.txtLong{width:300px}textarea{width:350px;resize:none}select.files{width:250px}input.spinner{width:5em}img{margin:0;padding:0;border:0;cursor:pointer}img.inputImgMini{background-color:transparent!important;width:16px!important;height:16px!important;margin:0 5px 0 5px;border:0;vertical-align:middle}i{cursor:pointer}form .form-field{display:flex;justify-content:space-between}form .form-field>label{min-width:12em;padding:.5em 0;font-size:16px;align-self:center}form .form-field>div{width:100%;align-self:center}a{text-decoration:none;color:#536dfe}a:visited{text-decoration:none;color:#536dfe}a:hover,a:active,a:focus{text-decoration:none;cursor:pointer}pre,code,samp,kbd{font-family:Consolas,\"Andale Mono WT\",\"Andale Mono\",\"Bitstream Vera Sans Mono\",\"Nimbus Mono L\",Monaco,\"Courier New\",monospace;font-size:1em;direction:ltr;text-align:left;background-color:#fbfaf9;color:#333;box-shadow:inset 0 0 .3em #ccc;border-radius:2px}#nojs{width:80%;text-align:center;vertical-align:middle;margin:10px auto;padding:3px;background-color:#ef5350;color:white;font-weight:bold;font-size:14px}#wrap{height:auto!important;min-height:100%;width:100%;background-color:#f5f5f5}#wrap-loading{position:fixed;z-index:9999;top:50%;left:50%;padding:1em;background-color:rgba(255,255,255,0.8);display:none;border-radius:5px!important;-moz-border-radius:5px!important;-webkit-border-radius:5px!important}#wrap-loading.overlay-full{top:0;left:0;width:100%;height:100%;background-color:rgba(255,255,255,0.5)}#wrap-loading.overlay-full #loading{position:absolute;top:50%;left:50%}#container{margin:auto;width:100%}#container.login{padding-top:5%}#container.error,#container.install,#container.passreset{width:100%}#container .logo{height:64px}#container #actions-bar{z-index:100;display:flex;justify-content:space-between;position:fixed;border:0 none;top:0;left:0;width:100%;padding:1em 0;background-color:transparent}#container #actions-bar-icons{flex-grow:1;text-align:center}#container #actions-bar-logo{display:none;padding:0 .5em}#container #actions-bar-logo img{display:inline-block;width:50px;opacity:.75}#container #content{width:95%;margin:2em auto 8em auto}#container #content.public-link{width:70%;min-height:0;margin:5em auto}#content td.descField,#box-popup td.descField{text-align:right;padding-right:20px;width:25%;border-right:1px solid #d9d9d9;color:#999;font-size:12px;font-weight:bold}#content td.valField,#box-popup td.valField{padding-left:1em;width:100%}#content td.valField .lowres-title,#box-popup td.valField .lowres-title{display:none;width:100%;color:#607d8b;font-size:12px}#content .pager{width:100%;margin-top:15px;padding:.5em;vertical-align:middle;font-size:11px;color:#999;background-color:#fcfcfc}#content .pager img{margin-left:5px;vertical-align:middle}#content .pager a{margin-left:5px;font-size:12px;color:#999}#content .pager>div{display:inline-block;width:49%}#content .pager .pager-left{text-align:left}#content .pager .pager-right{text-align:right}#content #title{width:50%;padding:7px;margin:auto;background-color:#d9d9d9;color:#fff;font-size:17px;letter-spacing:.3em;text-align:center}#content #title.titleNormal{background-color:#607d8b;color:#fff}#content .data-container{width:75%;margin:0 auto}#content fieldset.data{margin:2em auto}#content fieldset.data>legend{color:#607d8b;padding:0 .5em;font-size:1.5em}#content fieldset.data>div{display:none}#content fieldset.data>div table{width:100%}#content .data{width:100%;padding:10px;border:1px solid #c9c9c9;margin:0 auto;background-color:#f9f9f9}#content .data #history-icon{position:relative;top:5em;right:2em}#content .data td{text-align:left}#content .data td.descField{text-align:right}#content .data select{min-width:210px}#content .data .list-wrap{max-height:10em;overflow:auto;padding:.5em;margin:1em 0}#content .data .dropzone{width:30em;padding:1em;border:2px dashed #26a69a;text-align:center}#content .data .dropzone img{vertical-align:middle}#content .data .file-upload{display:none}#content .data .account-permissions{width:100%}#content .data .account-permissions fieldset{border:1px solid #c9c9c9;padding:1em}#content .data .account-permissions legend{font-weight:bold;color:#999;padding:.2em 0}#content .data .account-permissions fieldset>span{font-weight:bold;color:#999;padding:.2em 0;display:inline-block;width:100px;text-align:right}#content span.tag{margin:0 3px 3px 0;padding:.2em;background:#5c6bc0;color:#fff;border:0 solid transparent;border-radius:3px!important;-moz-border-radius:3px!important;-webkit-border-radius:3px!important}#content .extra-info{margin-top:20px}#content #tabs fieldset{border:1px solid #c9c9c9}#content #tabs #frmConfig label{float:left}#content .tblConfig{margin-bottom:2em}#content .tblConfig td.descField{width:35%;font-size:11px;font-weight:bold}#content .tblConfig td.rowHeader{padding:5px 0 5px 0;background-color:#f5f5f5;text-align:center;font-weight:bold;border-top:15px solid #f9f9f9;border-bottom:3px solid #a9c1d7;letter-spacing:.5em;color:#696969}#content .tblConfig input.checkbox{width:15px;text-align:left;padding:0}#content .tblConfig .option-disabled{text-align:center;background-color:#fff8e1;color:#ffca28;font-weight:bold}#content h2{width:100%;height:1.5em;font-size:18px;color:white;background-color:#a9c1d7;margin:0;padding-top:.1em}#content .section{margin-top:2.5em;border-bottom:1px solid #d9d9d9;text-align:left;font-size:14px;font-weight:bold;color:#5c6bc0}#content .row_even>td{background-color:#f5f5f5}#content .row_odd>td{background-color:white}#content .data-header ul{list-style:none;width:100%;margin:0 0 10px 0;padding:0}#content .data-header li{display:inline-block;padding:.2em .5em;font-weight:bold;letter-spacing:.2em;color:#fff;text-align:center}#content .data-header li a{color:#777}#content .data-header li img{float:right;width:24px;height:24px;vertical-align:middle}#content .data-header-minimal{border-bottom:1px solid #dfdfdf}#content .data-header-minimal ul{display:flex;flex-wrap:wrap;justify-content:flex-start;margin:0}#content .data-header-minimal li{display:inline-flex;min-width:10em;font-weight:normal;letter-spacing:normal}#content .data-header-minimal li a{color:#b9b9b9;padding:.3em .8em}#content .data-table{width:100%}#content .data-table td:first-of-type,#content .data-table th:first-of-type{width:5em}#content .data-table thead th{background-color:#607d8b;color:#fff}#content .data-table tbody td.cell-data{text-align:left}#content .data-table tbody td.cell-nodata{padding:0 .5em;text-align:left}#content .data-table tbody td.cell-actions{text-align:right}#content .data-table tbody td.cell-actions i{opacity:.5}#content .data-table tbody td.cell-actions i:hover{opacity:1}#content .data-rows ul{display:table;list-style:none;width:100%;margin:0 0 10px 0;padding:0;background-color:#fcfcfc}#content .data-rows li{float:left;display:block;padding:1em;color:#696969;text-align:center;min-height:2em}#content .data-rows li.cell-nodata{padding:1em 0;min-height:2em;text-align:left}#content .data-rows li.cell-actions{float:right;min-height:2em;padding:1em 0;text-align:left;background-color:#fcfcfc;width:15em}#content .data-rows li.cell-nodata img,#content .data-rows li.cell-actions img{width:24px;height:24px;margin:0 .5em}#content #resEventLog .data{width:100%}#content #resEventLog thead{text-align:center}#content #resEventLog tbody{width:100%;height:500px;overflow:auto}#content #resEventLog td{border-bottom:1px solid #d9d9d9}#content #resEventLog .cell{text-align:center}#content #resEventLog .cell-description{width:60%}#content #searchbox{background-color:#fcfcfc;vertical-align:middle;position:relative;height:auto;padding:.5em 1em;margin-bottom:2em}#content #searchbox form{display:flex;flex-wrap:wrap;justify-content:flex-start;align-items:center;text-align:left}#content #searchbox .search-filters>*{margin:0 1em}#content #searchbox .search-filters .filter-buttons{display:inline-block}#content #searchbox .search-filters .filter-slider{width:10em}#content #searchbox .search-filters-tags{display:none;flex-grow:2}#content .btn-clear{opacity:.35;filter:alpha(opacity=35)}#content .btn-clear:hover{opacity:1;filter:alpha(opacity=100)}#content .actions-optional{display:none}#content .error{width:350px;padding:15px;margin:0 auto;text-align:center;font-size:16px;line-height:1.5em;color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28}#box-popup .list-wrap{max-height:10em;overflow:auto;padding:.5em;margin:1em 0}#content .data .list-wrap ul,#box-popup .list-wrap ul{list-style-type:none;margin:0;padding:0}#content .data .list-wrap li,#box-popup .list-wrap li{display:flex;background:#f2f2f2;padding:.5em;font-size:1em;margin-bottom:.5em}#content .data .list-wrap li:hover,#box-popup .list-wrap li:hover{background:#e8eaf6;color:#000}#content .data .list-wrap div.files-item-info,#box-popup .list-wrap div.files-item-info{flex-grow:2}#content .data .list-wrap div.files-item-info img,#box-popup .list-wrap div.files-item-info img{margin:0 .5em}#content .data .list-wrap div.files-item-actions,#box-popup .list-wrap div.files-item-actions{padding:.3em 0}#box-popup{min-width:25em;max-width:50em;margin:5em auto;padding:0;background-color:#fff}#box-popup.box-password-view{min-width:30em;max-width:35em}#box-popup>h2{position:relative;width:100%;font-size:18px;color:#fff;background-color:#607d8b;margin:0;padding:.5em 0;line-height:1em}#box-popup>h2 .btn-popup-close{display:none;position:absolute;right:.5em;top:.2em}#box-popup>table{width:100%;padding-bottom:1em}#box-popup select{width:220px}#box-popup #resFancyAccion{display:none}#box-popup #resCheck{display:inline-block;width:80%;height:4em;padding:1em 0}#box-popup.image{background-color:transparent;max-width:100%;margin:0 auto;border-radius:0!important;-moz-border-radius:0!important;-webkit-border-radius:0!important}#box-popup.image img{width:auto;margin:0 auto}#box-popup.image>div.title{background-color:#607d8b;color:#fff;padding:.5em}#box-popup.help{min-height:100px;background-color:#f5f5f5}#box-popup.help p{font-size:14px;text-align:justify;line-height:2em}#box-complexity>div{text-align:justify;line-height:1.5em;margin-top:1em}#debug{float:left;text-align:left}#debuginfo{width:100%;min-height:10em;padding:1em;background-color:#fff8e1;text-align:left;line-height:1.5em}#debuginfo H3{text-align:center}.popup-data{width:100%;min-width:400px;border:0;text-align:left;margin:0;padding:1em .5em}.popup-data .descField{min-width:100px}footer{display:flex;justify-content:space-between;position:fixed;bottom:0;z-index:100;width:100%;padding:.5em 0;background-color:#f5f5f5;color:#b9b9b9;font-size:1em;-webkit-box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14);-moz-box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14);box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14)}footer .footer-parts{display:flex;justify-content:space-between}footer #footer-left{width:50%;margin:0 1em}footer #footer-right{width:50%;margin:0 1em;justify-content:flex-end;text-align:right}footer #updates{min-width:10em;text-align:center;cursor:pointer}footer #status{margin:0 1em}footer #status>div{display:inline-block}footer #status .status-info{padding:.5em}footer #session{text-align:left;color:#999;font-size:.8em}footer a{color:#b9b9b9}footer a:visited{color:#b9b9b9}footer #project a:hover{color:#a9c1d7;border-bottom:1px solid #a9c1d7}footer #updates a:hover{color:#a9c1d7}footer img{border:0;width:16px;height:16px;vertical-align:middle}.round,.round5{border-radius:5px!important;-moz-border-radius:5px!important;-webkit-border-radius:5px!important}.midround{border-radius:0 0 10px 10px!important;-moz-border-radius:0 0 10px 10px!important;-webkit-border-radius:0 0 10px 10px!important}.midroundup{border-radius:10px 10px 0 0!important;-moz-border-radius:10px 10px 0 0!important;-webkit-border-radius:10px 10px 0 0!important}.fullround{border-radius:50%!important;-moz-border-radius:50%!important;-webkit-border-radius:50%!important}.iconMini{width:16px!important;height:16px!important;vertical-align:middle}.hide{display:none!important}.btn-checks{padding:5px;margin:.2em 0;width:30em;border-bottom:1px solid #c9c9c9}.shadow{-webkit-box-shadow:2px 2px 3px -3px rgba(0,0,0,0.14);-moz-box-shadow:2px 2px 3px -3px rgba(0,0,0,0.14);box-shadow:1px 1px 2px rgba(0,0,0,0.14)}.noRes{width:60%;padding:15px;background-color:#f9f9f9;color:#a9a9a9;border:#c9c9c9 1px solid;margin:20px auto;text-align:center;font-size:16px}.header-grey{background-color:#607d8b;color:#fff;min-height:2em}.no-background{background:none!important}.action-in-box{padding:1em;text-align:right}.action-in-box ul{list-style:none;margin:0;padding:0}.tab-data{margin:2em auto 0;width:75%}.item-actions{margin:1em auto}.tab-actions{margin:2em 0}.item-actions>ul,.tab-actions>ul{display:flex;flex-wrap:wrap;justify-content:flex-end;align-items:center;list-style:none;margin:0;padding:0}.item-actions>ul>li,.tab-actions>ul>li{width:auto;min-width:2em;margin-left:.5em}.item-actions>ul>li.datagrid-action-search,.tab-actions>ul>li.datagrid-action-search{min-width:5em}.item-actions>ul>li.datagrid-action-search form,.tab-actions>ul>li.datagrid-action-search form{width:100%}.fullWidth{max-width:100%!important}.filter-on{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;padding:.3em 1em}.global-on{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;padding:.3em 1em}.opacity50{filter:alpha(opacity=50);opacity:.5}.custom-combobox{position:relative;display:inline-block}.custom-combobox input{width:80%}.custom-combobox-toggle{position:absolute;top:0;bottom:0;margin-left:-1px;padding:0;*height:1.7em;*top:.1em}.custom-combobox-input{margin:0;padding:.3em}.passLevel{width:20px;height:20px;display:inline-block;position:relative;top:2px}.passLevel.strongest{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;font-weight:bold}.passLevel.strongest:hover{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;font-weight:bold}.passLevel.strong{color:#2196f3;background-color:#e3f2fd;border:1px solid #2196f3;font-weight:bold}.passLevel.strong:hover{color:#2196f3;background-color:#e3f2fd;border:1px solid #2196f3;font-weight:bold}.passLevel.good{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;font-weight:bold}.passLevel.good:hover{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;font-weight:bold}.passLevel.weak{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350;font-weight:bold}.passLevel.weak:hover{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350;font-weight:bold}#alert #alert-text{margin:15px auto;font-size:14px;font-weight:bold}#alert #alert-pass{width:50%;padding:10px;margin:15px auto;border:1px solid #c9c9c9;color:#555;font-weight:bold}.dialog-text,.dialog-user-text,.dialog-pass-text{font-family:Consolas,\"Andale Mono WT\",\"Andale Mono\",\"Bitstream Vera Sans Mono\",\"Nimbus Mono L\",Monaco,\"Courier New\",monospace;padding:.5em;text-align:center;min-width:200px}.dialog-user-text{border-bottom:#d9d9d9 1px solid;color:#a9a9a9}.dialog-pass-text{border:transparent 1px solid;letter-spacing:.2em}.dialog-buttons{text-align:center;padding:.5em;border-top:1px solid #c9c9c9;line-height:2.5em}.dialog-clip-copy{color:#26a69a;background-color:#e0f2f1}.help-box{display:none;background-color:#fff!important;color:#607d8b}.help-box>*{font-weight:bold}.help-text{text-align:justify;line-height:1.5em;margin-top:1em}.tooltip{width:300px;max-width:300px;background-color:#777;color:#fff;z-index:101}.cursor-pointer{cursor:pointer}.password-actions{display:inline-block;width:12em}.password-actions>span,.password-actions i{margin-right:.6em}.custom-input-color{width:3em;height:1em;display:inline-block}.account-pass-image{height:32px;width:auto}.select-box{min-width:20em}fieldset.warning{padding:8px;border-radius:5px;color:#ef5350;background-color:#ffebee;border:1px solid #ef5350}fieldset.warning legend{color:#ef5350!important}fieldset.warning a{color:#ef5350!important;font-weight:bold}#actions{width:100%;line-height:2em;margin-bottom:5em}#actions #logo{display:flex;width:100%;margin-bottom:30px;color:#607d8b;align-items:center;background:url(\"../imgs/logo_full_bg.png\") left no-repeat;background-size:auto 150px;height:150px}#actions #page-title{width:100%;color:#607d8b;text-align:center}#actions #page-title h1{font-weight:bold;font-size:24px;letter-spacing:3px}#actions ul.errors{max-width:40vw;margin:0 auto;list-style:none;font-size:14px;text-align:left}#actions ul.errors>li{margin:1.5em auto;border-radius:3px;padding:1em .5em}#actions ul.errors>li.msg-critical{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350}#actions ul.errors>li.msg-warning{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;color:#555}#actions ul.errors>li.msg-ok{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a}#actions ul.errors>li>p.hint{color:#555;font-size:12px}#actions ul.errors>li>p.hint i{margin-right:.5em}#actions form{width:450px;margin:0 auto;text-align:left}#actions form fieldset{margin-bottom:2em}#actions form fieldset legend{width:100%;color:#fff;font-size:14px;font-weight:bold;text-align:center;background-color:#607d8b;margin:1em 0;letter-spacing:.2em;padding:.2em 0}#actions div.buttons{margin-top:2em;text-align:center}.center{text-align:center!important}.right{text-align:right!important}.left{text-align:left!important}.opacity50{opacity:.5!important}#login-container{width:40em;margin:0 auto;background:transparent url(\"../imgs/logo_full_bg.png\") no-repeat top left;background-size:auto 10em}#login-container #boxSpacer{height:11em;background-color:transparent}#login-container #boxLogin{position:relative;margin:0 auto;width:100%;min-height:14em;padding:1em;background-color:#fff}#login-container #boxLogin #boxData{height:100%;min-height:14em;text-align:left;background-color:transparent}#login-container #boxLogin #boxData i{margin-right:.5em;opacity:.5}#login-container #boxLogin #boxData .extra-hidden{display:none}#login-container #boxLogin #boxButton{position:absolute;top:2em;right:2em}#login-container #boxLogin #boxActions{width:100%;text-align:right}#login-container #boxLogin #boxActions a{color:#c9c9c9}#login-container #boxLogout{margin-top:4em;width:100%}#login-container #boxLogout>div{margin:0 auto;width:250px;font-size:14px;padding:.5em;text-align:center;color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28}#login-container #boxUpdated{width:350px;margin:3em auto;font-size:14px;text-align:center;padding:.5em;color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a}#login-container #demo-info{margin:3em auto;color:#c9c9c9;border-top:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:.5em}#login-container #demo-info ul{display:flex;justify-content:space-around;list-style:none}#login-container #demo-info ul li span{margin:0 2em}@media screen and (max-width:1000px){#content #searchbox .search-filters>*{margin:.5em 1em .5em 0}#content .data-container #title,#content .tab-data #title{width:90%}footer{display:none;justify-content:space-between;flex-wrap:wrap}footer .footer-parts{justify-content:space-between;flex-wrap:wrap}footer #footer-left,footer #footer-right{width:100%}footer .footer-parts>div{width:100%;padding:.5em 0}}@media screen and (max-width:600px){#content input,#box-popup input{width:100%}#content .mdl-textfield,#box-popup .mdl-textfield{width:100%}#content td.descField,#box-popup td.descField{display:none}#content td.valField .lowres-title,#box-popup td.valField .lowres-title{display:block}#content #searchbox .mdl-textfield{width:90%}#content #searchbox .search-text{width:90%}#content #searchbox .search-filters .selectize-control{width:100%}#content .data-container,#content .tab-data{width:100%}#content .data-container #title,#content .tab-data #title{width:90%}#content .data-container .selectize-control,#content .tab-data .selectize-control{width:100%}#box-popup h2>.btn-popup-close{display:inline-block}.mdl-data-table{table-layout:fixed;width:100%}.table-responsive td,.table-responsive th{width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;-o-text-overflow:ellipsis}.table-responsive .cell-actions i{display:block!important}}\n\\ No newline at end of file\n+html,body{margin:0;padding:0;text-align:left;background-color:#f5f5f5;color:#555;font-size:12px;font-weight:normal;box-sizing:border-box}*{font-family:\"Roboto Regular\",Verdana,Tahoma,sans-serif;box-sizing:inherit}*:before,*:after{box-sizing:inherit}table{font-size:11px;border-spacing:0}table th{border-bottom:2px solid transparent;vertical-align:middle}table th .icon{width:24px;height:24px}table tr{height:20px}table tr.odd{background-color:#f9f9f9}table tr.even>td,table tr.odd>td{border-bottom:1px solid #d9d9d9!important}table tr.even:hover,table tr.odd:hover{background-color:#e8ff99}table td{padding:3px}table td.txtCliente{font-weight:bold;text-align:center}form{font-size:11px;margin:0}input.inputImg,img.inputImg{background-color:transparent!important;width:24px!important;height:24px!important;border:0;vertical-align:middle;margin:0 .5em}input.txtFile{width:200px}input.txtLong{width:300px}textarea{width:350px;resize:none}select.files{width:250px}input.spinner{width:5em}img{margin:0;padding:0;border:0;cursor:pointer}img.inputImgMini{background-color:transparent!important;width:16px!important;height:16px!important;margin:0 5px 0 5px;border:0;vertical-align:middle}i{cursor:pointer}form .form-field{display:flex;justify-content:space-between}form .form-field>label{min-width:12em;padding:.5em 0;font-size:16px;align-self:center}form .form-field>div{width:100%;align-self:center}a{text-decoration:none;color:#536dfe}a:visited{text-decoration:none;color:#536dfe}a:hover,a:active,a:focus{text-decoration:none;cursor:pointer}pre,code,samp,kbd{font-family:Consolas,\"Andale Mono WT\",\"Andale Mono\",\"Bitstream Vera Sans Mono\",\"Nimbus Mono L\",Monaco,\"Courier New\",monospace;font-size:1em;direction:ltr;text-align:left;background-color:#fbfaf9;color:#333;box-shadow:inset 0 0 .3em #ccc;border-radius:2px}#nojs{width:80%;text-align:center;vertical-align:middle;margin:10px auto;padding:3px;background-color:#ef5350;color:white;font-weight:bold;font-size:14px}#wrap{height:auto!important;min-height:100%;width:100%;background-color:#f5f5f5}#wrap-loading{position:fixed;z-index:9999;top:50%;left:50%;padding:1em;background-color:rgba(255,255,255,0.8);display:none;border-radius:5px!important;-moz-border-radius:5px!important;-webkit-border-radius:5px!important}#wrap-loading.overlay-full{top:0;left:0;width:100%;height:100%;background-color:rgba(255,255,255,0.5)}#wrap-loading.overlay-full #loading{position:absolute;top:50%;left:50%}#wrap-loading.overlay-full #taskStatus{display:block}#wrap-loading #taskStatus{display:none;position:absolute;left:0;top:55%;width:100%;text-align:center;color:white;background-color:rgba(0,0,0,0.5);padding:1em 0}#container{margin:auto;width:100%}#container.login{padding-top:5%}#container.error,#container.install,#container.passreset{width:100%}#container .logo{height:64px}#container #actions-bar{z-index:100;display:flex;justify-content:space-between;position:fixed;border:0 none;top:0;left:0;width:100%;padding:1em 0;background-color:transparent}#container #actions-bar-icons{flex-grow:1;text-align:center}#container #actions-bar-logo{display:none;padding:0 .5em}#container #actions-bar-logo img{display:inline-block;width:50px;opacity:.75}#container #content{width:95%;margin:2em auto 8em auto}#container #content.public-link{width:70%;min-height:0;margin:5em auto}#content td.descField,#box-popup td.descField{text-align:right;padding-right:20px;width:25%;border-right:1px solid #d9d9d9;color:#999;font-size:12px;font-weight:bold}#content td.valField,#box-popup td.valField{padding-left:1em;width:100%}#content td.valField .lowres-title,#box-popup td.valField .lowres-title{display:none;width:100%;color:#607d8b;font-size:12px}#content .pager{width:100%;margin-top:15px;padding:.5em;vertical-align:middle;font-size:11px;color:#999;background-color:#fcfcfc}#content .pager img{margin-left:5px;vertical-align:middle}#content .pager a{margin-left:5px;font-size:12px;color:#999}#content .pager>div{display:inline-block;width:49%}#content .pager .pager-left{text-align:left}#content .pager .pager-right{text-align:right}#content #title{width:50%;padding:7px;margin:auto;background-color:#d9d9d9;color:#fff;font-size:17px;letter-spacing:.3em;text-align:center}#content #title.titleNormal{background-color:#607d8b;color:#fff}#content .data-container{width:75%;margin:0 auto}#content fieldset.data{margin:2em auto}#content fieldset.data>legend{color:#607d8b;padding:0 .5em;font-size:1.5em}#content fieldset.data>div{display:none}#content fieldset.data>div table{width:100%}#content .data{width:100%;padding:10px;border:1px solid #c9c9c9;margin:0 auto;background-color:#f9f9f9}#content .data #history-icon{position:relative;top:5em;right:2em}#content .data td{text-align:left}#content .data td.descField{text-align:right}#content .data select{min-width:210px}#content .data .list-wrap{max-height:10em;overflow:auto;padding:.5em;margin:1em 0}#content .data .dropzone{width:30em;padding:1em;border:2px dashed #26a69a;text-align:center}#content .data .dropzone img{vertical-align:middle}#content .data .file-upload{display:none}#content .data .account-permissions{width:100%}#content .data .account-permissions fieldset{border:1px solid #c9c9c9;padding:1em}#content .data .account-permissions legend{font-weight:bold;color:#999;padding:.2em 0}#content .data .account-permissions fieldset>span{font-weight:bold;color:#999;padding:.2em 0;display:inline-block;width:100px;text-align:right}#content span.tag{margin:0 3px 3px 0;padding:.2em;background:#5c6bc0;color:#fff;border:0 solid transparent;border-radius:3px!important;-moz-border-radius:3px!important;-webkit-border-radius:3px!important}#content .extra-info{margin-top:20px}#content #tabs fieldset{border:1px solid #c9c9c9}#content #tabs #frmConfig label{float:left}#content .tblConfig{margin-bottom:2em}#content .tblConfig td.descField{width:35%;font-size:11px;font-weight:bold}#content .tblConfig td.rowHeader{padding:5px 0 5px 0;background-color:#f5f5f5;text-align:center;font-weight:bold;border-top:15px solid #f9f9f9;border-bottom:3px solid #a9c1d7;letter-spacing:.5em;color:#696969}#content .tblConfig input.checkbox{width:15px;text-align:left;padding:0}#content .tblConfig .option-disabled{text-align:center;background-color:#fff8e1;color:#ffca28;font-weight:bold}#content h2{width:100%;height:1.5em;font-size:18px;color:white;background-color:#a9c1d7;margin:0;padding-top:.1em}#content .section{margin-top:2.5em;border-bottom:1px solid #d9d9d9;text-align:left;font-size:14px;font-weight:bold;color:#5c6bc0}#content .row_even>td{background-color:#f5f5f5}#content .row_odd>td{background-color:white}#content .data-header ul{list-style:none;width:100%;margin:0 0 10px 0;padding:0}#content .data-header li{display:inline-block;padding:.2em .5em;font-weight:bold;letter-spacing:.2em;color:#fff;text-align:center}#content .data-header li a{color:#777}#content .data-header li img{float:right;width:24px;height:24px;vertical-align:middle}#content .data-header-minimal{border-bottom:1px solid #dfdfdf}#content .data-header-minimal ul{display:flex;flex-wrap:wrap;justify-content:flex-start;margin:0}#content .data-header-minimal li{display:inline-flex;min-width:10em;font-weight:normal;letter-spacing:normal}#content .data-header-minimal li a{color:#b9b9b9;padding:.3em .8em}#content .data-table{width:100%}#content .data-table td:first-of-type,#content .data-table th:first-of-type{width:5em}#content .data-table thead th{background-color:#607d8b;color:#fff}#content .data-table tbody td.cell-data{text-align:left}#content .data-table tbody td.cell-nodata{padding:0 .5em;text-align:left}#content .data-table tbody td.cell-actions{text-align:right}#content .data-table tbody td.cell-actions i{opacity:.5}#content .data-table tbody td.cell-actions i:hover{opacity:1}#content .data-rows ul{display:table;list-style:none;width:100%;margin:0 0 10px 0;padding:0;background-color:#fcfcfc}#content .data-rows li{float:left;display:block;padding:1em;color:#696969;text-align:center;min-height:2em}#content .data-rows li.cell-nodata{padding:1em 0;min-height:2em;text-align:left}#content .data-rows li.cell-actions{float:right;min-height:2em;padding:1em 0;text-align:left;background-color:#fcfcfc;width:15em}#content .data-rows li.cell-nodata img,#content .data-rows li.cell-actions img{width:24px;height:24px;margin:0 .5em}#content #resEventLog .data{width:100%}#content #resEventLog thead{text-align:center}#content #resEventLog tbody{width:100%;height:500px;overflow:auto}#content #resEventLog td{border-bottom:1px solid #d9d9d9}#content #resEventLog .cell{text-align:center}#content #resEventLog .cell-description{width:60%}#content #searchbox{background-color:#fcfcfc;vertical-align:middle;position:relative;height:auto;padding:.5em 1em;margin-bottom:2em}#content #searchbox form{display:flex;flex-wrap:wrap;justify-content:flex-start;align-items:center;text-align:left}#content #searchbox .search-filters>*{margin:0 1em}#content #searchbox .search-filters .filter-buttons{display:inline-block}#content #searchbox .search-filters .filter-slider{width:10em}#content #searchbox .search-filters-tags{display:none;flex-grow:2}#content .btn-clear{opacity:.35;filter:alpha(opacity=35)}#content .btn-clear:hover{opacity:1;filter:alpha(opacity=100)}#content .actions-optional{display:none}#content .error{width:350px;padding:15px;margin:0 auto;text-align:center;font-size:16px;line-height:1.5em;color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28}#box-popup .list-wrap{max-height:10em;overflow:auto;padding:.5em;margin:1em 0}#content .data .list-wrap ul,#box-popup .list-wrap ul{list-style-type:none;margin:0;padding:0}#content .data .list-wrap li,#box-popup .list-wrap li{display:flex;background:#f2f2f2;padding:.5em;font-size:1em;margin-bottom:.5em}#content .data .list-wrap li:hover,#box-popup .list-wrap li:hover{background:#e8eaf6;color:#000}#content .data .list-wrap div.files-item-info,#box-popup .list-wrap div.files-item-info{flex-grow:2}#content .data .list-wrap div.files-item-info img,#box-popup .list-wrap div.files-item-info img{margin:0 .5em}#content .data .list-wrap div.files-item-actions,#box-popup .list-wrap div.files-item-actions{padding:.3em 0}#box-popup{min-width:30em;max-width:60em;margin:5em auto;padding:0;background-color:#fff}#box-popup.box-password-view{min-width:30em;max-width:35em}#box-popup>h2{position:relative;width:100%;font-size:18px;color:#fff;background-color:#607d8b;margin:0;padding:.5em 0;line-height:1em}#box-popup>h2 .btn-popup-close{display:none;position:absolute;right:.5em;top:.2em}#box-popup>table{width:100%;padding-bottom:1em}#box-popup select{width:220px}#box-popup #resFancyAccion{display:none}#box-popup #resCheck{display:inline-block;width:80%;height:4em;padding:1em 0}#box-popup.image{background-color:transparent;max-width:100%;margin:0 auto;border-radius:0!important;-moz-border-radius:0!important;-webkit-border-radius:0!important}#box-popup.image img{width:auto;margin:0 auto}#box-popup.image>div.title{background-color:#607d8b;color:#fff;padding:.5em}#box-popup.help{min-height:100px;background-color:#f5f5f5}#box-popup.help p{font-size:14px;text-align:justify;line-height:2em}#box-complexity>div{text-align:justify;line-height:1.5em;margin-top:1em}#debug{float:left;text-align:left}#debuginfo{width:100%;min-height:10em;padding:1em;background-color:#fff8e1;text-align:left;line-height:1.5em}#debuginfo H3{text-align:center}.popup-data{width:100%;min-width:400px;border:0;text-align:left;margin:0;padding:1em .5em}.popup-data .descField{min-width:100px}footer{display:flex;justify-content:space-between;position:fixed;bottom:0;z-index:100;width:100%;padding:.5em 0;background-color:#f5f5f5;color:#b9b9b9;font-size:1em;-webkit-box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14);-moz-box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14);box-shadow:0 -3px 2px -2px rgba(0,0,0,0.14)}footer .footer-parts{display:flex;justify-content:space-between}footer #footer-left{width:50%;margin:0 1em}footer #footer-right{width:50%;margin:0 1em;justify-content:flex-end;text-align:right}footer #updates{min-width:10em;text-align:center;cursor:pointer}footer #status{margin:0 1em}footer #status>div{display:inline-block}footer #status .status-info{padding:.5em}footer #session{text-align:left;color:#999;font-size:.8em}footer a{color:#b9b9b9}footer a:visited{color:#b9b9b9}footer #project a:hover{color:#a9c1d7;border-bottom:1px solid #a9c1d7}footer #updates a:hover{color:#a9c1d7}footer img{border:0;width:16px;height:16px;vertical-align:middle}.round,.round5{border-radius:5px!important;-moz-border-radius:5px!important;-webkit-border-radius:5px!important}.midround{border-radius:0 0 10px 10px!important;-moz-border-radius:0 0 10px 10px!important;-webkit-border-radius:0 0 10px 10px!important}.midroundup{border-radius:10px 10px 0 0!important;-moz-border-radius:10px 10px 0 0!important;-webkit-border-radius:10px 10px 0 0!important}.fullround{border-radius:50%!important;-moz-border-radius:50%!important;-webkit-border-radius:50%!important}.iconMini{width:16px!important;height:16px!important;vertical-align:middle}.hide{display:none!important}.btn-checks{padding:5px;margin:.2em 0;width:30em;border-bottom:1px solid #c9c9c9}.shadow{-webkit-box-shadow:2px 2px 3px -3px rgba(0,0,0,0.14);-moz-box-shadow:2px 2px 3px -3px rgba(0,0,0,0.14);box-shadow:1px 1px 2px rgba(0,0,0,0.14)}.noRes{width:60%;padding:15px;background-color:#f9f9f9;color:#a9a9a9;border:#c9c9c9 1px solid;margin:20px auto;text-align:center;font-size:16px}.header-grey{background-color:#607d8b;color:#fff;min-height:2em}.no-background{background:none!important}.action-in-box{padding:1em;text-align:right}.action-in-box ul{list-style:none;margin:0;padding:0}.tab-data{margin:2em auto 0;width:75%}.item-actions{margin:1em auto}.tab-actions{margin:2em 0}.item-actions>ul,.tab-actions>ul{display:flex;flex-wrap:wrap;justify-content:flex-end;align-items:center;list-style:none;margin:0;padding:0}.item-actions>ul>li,.tab-actions>ul>li{width:auto;min-width:2em;margin-left:.5em}.item-actions>ul>li.datagrid-action-search,.tab-actions>ul>li.datagrid-action-search{min-width:5em}.item-actions>ul>li.datagrid-action-search form,.tab-actions>ul>li.datagrid-action-search form{width:100%}.fullWidth{max-width:100%!important}.filter-on{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;padding:.3em 1em}.global-on{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;padding:.3em 1em}.opacity50{filter:alpha(opacity=50);opacity:.5}.custom-combobox{position:relative;display:inline-block}.custom-combobox input{width:80%}.custom-combobox-toggle{position:absolute;top:0;bottom:0;margin-left:-1px;padding:0;*height:1.7em;*top:.1em}.custom-combobox-input{margin:0;padding:.3em}.passLevel{width:20px;height:20px;display:inline-block;position:relative;top:2px}.passLevel.strongest{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;font-weight:bold}.passLevel.strongest:hover{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a;font-weight:bold}.passLevel.strong{color:#2196f3;background-color:#e3f2fd;border:1px solid #2196f3;font-weight:bold}.passLevel.strong:hover{color:#2196f3;background-color:#e3f2fd;border:1px solid #2196f3;font-weight:bold}.passLevel.good{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;font-weight:bold}.passLevel.good:hover{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;font-weight:bold}.passLevel.weak{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350;font-weight:bold}.passLevel.weak:hover{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350;font-weight:bold}#alert #alert-text{margin:15px auto;font-size:14px;font-weight:bold}#alert #alert-pass{width:50%;padding:10px;margin:15px auto;border:1px solid #c9c9c9;color:#555;font-weight:bold}.dialog-text,.dialog-user-text,.dialog-pass-text{font-family:Consolas,\"Andale Mono WT\",\"Andale Mono\",\"Bitstream Vera Sans Mono\",\"Nimbus Mono L\",Monaco,\"Courier New\",monospace;padding:.5em;text-align:center;min-width:200px}.dialog-user-text{border-bottom:#d9d9d9 1px solid;color:#a9a9a9}.dialog-pass-text{border:transparent 1px solid;letter-spacing:.2em}.dialog-buttons{text-align:center;padding:.5em;border-top:1px solid #c9c9c9;line-height:2.5em}.dialog-clip-copy{color:#26a69a;background-color:#e0f2f1}.help-box{display:none;background-color:#fff!important;color:#607d8b}.help-box>*{font-weight:bold}.help-text{text-align:justify;line-height:1.5em;margin-top:1em}.tooltip{width:300px;max-width:300px;background-color:#777;color:#fff;z-index:101}.cursor-pointer{cursor:pointer}.password-actions{display:inline-block;width:12em}.password-actions>span,.password-actions i{margin-right:.6em}.custom-input-color{width:3em;height:1em;display:inline-block}.account-pass-image{height:32px;width:auto}.select-box{min-width:20em}fieldset.warning{padding:8px;border-radius:5px;color:#ef5350;background-color:#ffebee;border:1px solid #ef5350}fieldset.warning legend{color:#ef5350!important}fieldset.warning a{color:#ef5350!important;font-weight:bold}#actions{width:100%;line-height:2em;margin-bottom:5em}#actions #logo{display:flex;width:100%;margin-bottom:30px;color:#607d8b;align-items:center;background:url(\"../imgs/logo_full_bg.png\") left no-repeat;background-size:auto 150px;height:150px}#actions #page-title{width:100%;color:#607d8b;text-align:center}#actions #page-title h1{font-weight:bold;font-size:24px;letter-spacing:3px}#actions ul.errors{max-width:40vw;margin:0 auto;list-style:none;font-size:14px;text-align:left}#actions ul.errors>li{margin:1.5em auto;border-radius:3px;padding:1em .5em}#actions ul.errors>li.msg-critical{color:#ef5350;background-color:#ffebee;border:1px solid #ef5350}#actions ul.errors>li.msg-warning{color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28;color:#555}#actions ul.errors>li.msg-ok{color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a}#actions ul.errors>li>p.hint{color:#555;font-size:12px}#actions ul.errors>li>p.hint i{margin-right:.5em}#actions form{width:450px;margin:0 auto;text-align:left}#actions form fieldset{margin-bottom:2em}#actions form fieldset legend{width:100%;color:#fff;font-size:14px;font-weight:bold;text-align:center;background-color:#607d8b;margin:1em 0;letter-spacing:.2em;padding:.2em 0}#actions div.buttons{margin-top:2em;text-align:center}.center{text-align:center!important}.right{text-align:right!important}.left{text-align:left!important}.opacity50{opacity:.5!important}#login-container{width:40em;margin:0 auto;background:transparent url(\"../imgs/logo_full_bg.png\") no-repeat top left;background-size:auto 10em}#login-container #boxSpacer{height:11em;background-color:transparent}#login-container #boxLogin{position:relative;margin:0 auto;width:100%;min-height:14em;padding:1em;background-color:#fff}#login-container #boxLogin #boxData{height:100%;min-height:14em;text-align:left;background-color:transparent}#login-container #boxLogin #boxData i{margin-right:.5em;opacity:.5}#login-container #boxLogin #boxData .extra-hidden{display:none}#login-container #boxLogin #boxButton{position:absolute;top:2em;right:2em}#login-container #boxLogin #boxActions{width:100%;text-align:right}#login-container #boxLogin #boxActions a{color:#c9c9c9}#login-container #boxLogout{margin-top:4em;width:100%}#login-container #boxLogout>div{margin:0 auto;width:250px;font-size:14px;padding:.5em;text-align:center;color:#ffca28;background-color:#fff8e1;border:1px solid #ffca28}#login-container #boxUpdated{width:350px;margin:3em auto;font-size:14px;text-align:center;padding:.5em;color:#26a69a;background-color:#e0f2f1;border:1px solid #26a69a}#login-container #demo-info{margin:3em auto;color:#c9c9c9;border-top:1px solid #d9d9d9;border-bottom:1px solid #d9d9d9;padding:.5em}#login-container #demo-info ul{display:flex;justify-content:space-around;list-style:none}#login-container #demo-info ul li span{margin:0 2em}@media screen and (max-width:1000px){#content #searchbox .search-filters>*{margin:.5em 1em .5em 0}#content .data-container #title,#content .tab-data #title{width:90%}footer{display:none;justify-content:space-between;flex-wrap:wrap}footer .footer-parts{justify-content:space-between;flex-wrap:wrap}footer #footer-left,footer #footer-right{width:100%}footer .footer-parts>div{width:100%;padding:.5em 0}}@media screen and (max-width:600px){#content input,#box-popup input{width:100%}#content .mdl-textfield,#box-popup .mdl-textfield{width:100%}#content td.descField,#box-popup td.descField{display:none}#content td.valField .lowres-title,#box-popup td.valField .lowres-title{display:block}#content #searchbox .mdl-textfield{width:90%}#content #searchbox .search-text{width:90%}#content #searchbox .search-filters .selectize-control{width:100%}#content .data-container,#content .tab-data{width:100%}#content .data-container #title,#content .tab-data #title{width:90%}#content .data-container .selectize-control,#content .tab-data .selectize-control{width:100%}#box-popup h2>.btn-popup-close{display:inline-block}.mdl-data-table{table-layout:fixed;width:100%}.table-responsive td,.table-responsive th{width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;-o-text-overflow:ellipsis}.table-responsive .cell-actions i{display:block!important}}\n\\ No newline at end of file"
        },
        {
          "filename": "inc/themes/material-blue/css/styles.scss",
          "status": "modified",
          "additions": 16,
          "deletions": 2,
          "patch": "@@ -42,6 +42,20 @@\n       top: 50%;\n       left: 50%;\n     }\n+    #taskStatus {\n+      display: block;\n+    }\n+  }\n+  #taskStatus {\n+    display: none;\n+    position: absolute;\n+    left: 0;\n+    top: 55%;\n+    width: 100%;\n+    text-align: center;\n+    color: white;\n+    background-color: rgba(0, 0, 0, 0.5);\n+    padding: 1em 0;\n   }\n }\n \n@@ -532,8 +546,8 @@\n }\n \n #box-popup {\n-  min-width: 25em;\n-  max-width: 50em;\n+  min-width: 30em;\n+  max-width: 60em;\n   margin: 5em auto;\n   padding: 0;\n   background-color: #fff;"
        },
        {
          "filename": "inc/themes/material-blue/js/app-theme.js",
          "status": "modified",
          "additions": 11,
          "deletions": 7,
          "patch": "@@ -114,9 +114,12 @@ sysPass.Theme = function (Common) {\n             // Poner la clave en los input y actualizar MDL\n             $dstParent.find(\"input:password\").val(genPassword);\n             $dstParent.addClass(mdl.CssClasses_.IS_DIRTY).removeClass(mdl.CssClasses_.IS_INVALID);\n+\n             // Poner la clave en el input de repetici\u00f3n y encriptarla\n-            $targetR.val(genPassword).parent().addClass(mdl.CssClasses_.IS_DIRTY).removeClass(mdl.CssClasses_.IS_INVALID);\n-            Common.encryptFormValue($targetR);\n+            if ($targetR.length > 0) {\n+                $targetR.val(genPassword).parent().addClass(mdl.CssClasses_.IS_DIRTY).removeClass(mdl.CssClasses_.IS_INVALID);\n+                Common.encryptFormValue($targetR);\n+            }\n \n             // Mostar el indicador de complejidad\n             $dstParent.find(\"#passLevel\").show(500);\n@@ -127,8 +130,6 @@ sysPass.Theme = function (Common) {\n         }\n     };\n \n-\n-    // FIXME\n     // Di\u00e1logo de configuraci\u00f3n de complejidad de clave\n     var complexityDialog = function () {\n \n@@ -193,8 +194,6 @@ sysPass.Theme = function (Common) {\n \n             var $thisParent = $this.parent();\n             var targetId = $this.attr(\"id\");\n-            var $targetIdR = $(\"#\" + targetId + \"R\");\n-\n \n             var btnMenu = \"<button id=\\\"menu-speed-\" + targetId + \"\\\" class=\\\"mdl-button mdl-js-button mdl-button--icon\\\" type=\\\"button\\\" title=\\\"\" + Common.config().LANG[27] + \"\\\"><i class=\\\"material-icons\\\">more_vert</i></button>\";\n \n@@ -234,7 +233,12 @@ sysPass.Theme = function (Common) {\n             // Reset de los campos de clave\n             $passwordActions.find(\".reset\").on(\"click\", function () {\n                 $this.val(\"\");\n-                $targetIdR.val(\"\");\n+\n+                var $targetIdR = $(\"#\" + targetId + \"R\");\n+\n+                if ($targetIdR.length > 0) {\n+                    $targetIdR.val(\"\");\n+                }\n \n                 // Actualizar objetos de MDL\n                 componentHandler.upgradeDom();"
        },
        {
          "filename": "inc/themes/material-blue/js/app-theme.min.js",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -1,18 +1,18 @@\n-var $jscomp={scope:{},findInternal:function(a,g,e){a instanceof String&&(a=String(a));for(var h=a.length,k=0;k<h;k++){var m=a[k];if(g.call(e,m,k,a))return{i:k,v:m}}return{i:-1,v:void 0}}};$jscomp.defineProperty=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,g,e){if(e.get||e.set)throw new TypeError(\"ES3 does not support getters and setters.\");a!=Array.prototype&&a!=Object.prototype&&(a[g]=e.value)};\n+var $jscomp={scope:{},findInternal:function(a,g,e){a instanceof String&&(a=String(a));for(var h=a.length,k=0;k<h;k++){var l=a[k];if(g.call(e,l,k,a))return{i:k,v:l}}return{i:-1,v:void 0}}};$jscomp.defineProperty=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,g,e){if(e.get||e.set)throw new TypeError(\"ES3 does not support getters and setters.\");a!=Array.prototype&&a!=Object.prototype&&(a[g]=e.value)};\n $jscomp.getGlobal=function(a){return\"undefined\"!=typeof window&&window===a?a:\"undefined\"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(a,g,e,h){if(g){e=$jscomp.global;a=a.split(\".\");for(h=0;h<a.length-1;h++){var k=a[h];k in e||(e[k]={});e=e[k]}a=a[a.length-1];h=e[a];g=g(h);g!=h&&null!=g&&$jscomp.defineProperty(e,a,{configurable:!0,writable:!0,value:g})}};\n $jscomp.polyfill(\"Array.prototype.find\",function(a){return a?a:function(a,e){return $jscomp.findInternal(this,a,e).v}},\"es6-impl\",\"es3\");\n sysPass.Theme=function(a){var g=a.log,e={elems:{$wrap:$(\"#wrap-loading\"),$loading:$(\"#loading\")},show:function(a){void 0!==a&&!0===a&&e.elems.$wrap.addClass(\"overlay-full\");e.elems.$wrap.show();e.elems.$loading.addClass(\"is-active\")},hide:function(){e.elems.$wrap.removeClass(\"overlay-full\").hide();e.elems.$loading.removeClass(\"is-active\")},upgradeFull:function(){e.elems.$wrap.addClass(\"overlay-full\")}},h=function(b){for(var d=0,f=\"\",c;d<a.passwordData.complexity.numlength;)c=Math.floor(100*Math.random())%\n 94+33,!a.passwordData.complexity.symbols&&(33<=c&&47>=c||58<=c&&64>=c||91<=c&&96>=c||123<=c&&126>=c)||!a.passwordData.complexity.numbers&&48<=c&&57>=c||!a.passwordData.complexity.uppercase&&65<=c&&90>=c||(d++,f+=String.fromCharCode(c));$(\"#viewPass\").attr(\"title\",f);var e=zxcvbn(f);a.passwordData.passLength=f.length;b?(d=b.parent(),c=$(\"#\"+b.attr(\"id\")+\"R\"),a.outputResult(e,b),b=new MaterialTextfield,d.find(\"input:password\").val(f),d.addClass(b.CssClasses_.IS_DIRTY).removeClass(b.CssClasses_.IS_INVALID),\n-c.val(f).parent().addClass(b.CssClasses_.IS_DIRTY).removeClass(b.CssClasses_.IS_INVALID),a.encryptFormValue(c),d.find(\"#passLevel\").show(500)):(a.outputResult(e),$(\"input:password, input.password\").val(f),$(\"#passLevel\").show(500))},k=function(){var b='<div id=\"box-complexity\"><div><label class=\"mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect\" for=\"checkbox-numbers\"><input type=\"checkbox\" id=\"checkbox-numbers\" class=\"mdl-checkbox__input\" name=\"checkbox-numbers\" checked/><span class=\"mdl-checkbox__label\">'+\n+0<c.length&&(c.val(f).parent().addClass(b.CssClasses_.IS_DIRTY).removeClass(b.CssClasses_.IS_INVALID),a.encryptFormValue(c)),d.find(\"#passLevel\").show(500)):(a.outputResult(e),$(\"input:password, input.password\").val(f),$(\"#passLevel\").show(500))},k=function(){var b='<div id=\"box-complexity\"><div><label class=\"mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect\" for=\"checkbox-numbers\"><input type=\"checkbox\" id=\"checkbox-numbers\" class=\"mdl-checkbox__input\" name=\"checkbox-numbers\" checked/><span class=\"mdl-checkbox__label\">'+\n a.config().LANG[35]+'</span></label><label class=\"mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect\" for=\"checkbox-uppercase\"><input type=\"checkbox\" id=\"checkbox-uppercase\" class=\"mdl-checkbox__input\" name=\"checkbox-uppercase\"/><span class=\"mdl-checkbox__label\">'+a.config().LANG[36]+'</span></label><label class=\"mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect\" for=\"checkbox-symbols\"><input type=\"checkbox\" id=\"checkbox-symbols\" class=\"mdl-checkbox__input\" name=\"checkbox-symbols\"/><span class=\"mdl-checkbox__label\">'+\n a.config().LANG[37]+'</span></label><div class=\"mdl-textfield mdl-js-textfield textfield-passlength\"><input class=\"mdl-textfield__input\" type=\"number\" pattern=\"[0-9]*\" id=\"passlength\" /><label class=\"mdl-textfield__label\" for=\"passlength\">'+a.config().LANG[38]+\"</label></div></div></div>\";showDialog({title:a.config().LANG[29],text:b,negative:{title:a.config().LANG[44]},positive:{title:a.config().LANG[43],onClick:function(d){d.preventDefault();a.passwordData.complexity.numbers=$(\"#checkbox-numbers\").is(\":checked\");\n a.passwordData.complexity.uppercase=$(\"#checkbox-uppercase\").is(\":checked\");a.passwordData.complexity.symbols=$(\"#checkbox-symbols\").is(\":checked\");a.passwordData.complexity.numlength=parseInt($(\"#passlength\").val())}},cancelable:!0,contentStyle:{\"max-width\":\"300px\"},onLoaded:function(){$(\"#checkbox-numbers\").prop(\"checked\",a.passwordData.complexity.numbers);$(\"#checkbox-uppercase\").prop(\"checked\",a.passwordData.complexity.uppercase);$(\"#checkbox-symbols\").prop(\"checked\",a.passwordData.complexity.symbols);\n-$(\"#passlength\").val(a.passwordData.complexity.numlength)}})},m=function(b){b.find(\".passwordfield__input\").each(function(){var d=$(this);if(\"true\"!==d.attr(\"data-pass-upgraded\")){var f=d.parent(),c=d.attr(\"id\"),b=$(\"#\"+c+\"R\"),l='<button id=\"menu-speed-'+c+'\" class=\"mdl-button mdl-js-button mdl-button--icon\" type=\"button\" title=\"'+a.config().LANG[27]+'\"><i class=\"material-icons\">more_vert</i></button>',l=l+('<ul class=\"mdl-menu mdl-js-menu\" for=\"menu-speed-'+c+'\">')+('<li class=\"mdl-menu__item passGen\"><i class=\"material-icons\">settings</i>'+\n-a.config().LANG[28]+\"</li>\"),l=l+('<li class=\"mdl-menu__item passComplexity\"><i class=\"material-icons\">vpn_key</i>'+a.config().LANG[29]+\"</li>\"),l=l+('<li class=\"mdl-menu__item reset\"><i class=\"material-icons\">refresh</i>'+a.config().LANG[30]+\"</li>\");f.after('<div class=\"password-actions\" />');f.next(\".password-actions\").prepend('<span class=\"passLevel passLevel-'+c+' fullround\" title=\"'+a.config().LANG[31]+'\"></span>').prepend('<i class=\"showpass material-icons\" title=\"'+a.config().LANG[32]+'\">remove_red_eye</i>').prepend(l);\n-d.on(\"keyup\",function(){a.checkPassLevel(d)});f=d.parent().next();f.find(\".passGen\").on(\"click\",function(){h(d);d.focus()});f.find(\".passComplexity\").on(\"click\",function(){k()});f.find(\".showpass\").on(\"mouseover\",function(){$(this).attr(\"title\",d.val())});f.find(\".reset\").on(\"click\",function(){d.val(\"\");b.val(\"\");componentHandler.upgradeDom()});d.attr(\"data-pass-upgraded\",\"true\")}});b.find(\".passwordfield__input-show\").each(function(){var b=$(this),f=$('<i class=\"showpass material-icons\" title=\"'+\n-a.config().LANG[32]+'\" data-targetid=\"'+b.attr(\"id\")+'\">remove_red_eye</i>'),c=$('<i class=\"clip-pass-icon material-icons\" title=\"'+a.config().LANG[34]+'\" data-clipboard-text=\"'+b.val()+'\">content_paste</i>');b.parent().after(c).after(f);f.on(\"mouseover\",function(){f.attr(\"title\",b.val())})})},n=function(b){g.info(\"setupDatePicker\");var d={format:\"YYYY-MM-DD\",lang:a.config().LOCALE.substr(0,2),time:!1,cancelText:a.config().LANG[44],okText:a.config().LANG[43],clearText:a.config().LANG[30],nowText:a.config().LANG[56],\n+$(\"#passlength\").val(a.passwordData.complexity.numlength)}})},l=function(b){b.find(\".passwordfield__input\").each(function(){var d=$(this);if(\"true\"!==d.attr(\"data-pass-upgraded\")){var f=d.parent(),c=d.attr(\"id\"),b='<button id=\"menu-speed-'+c+'\" class=\"mdl-button mdl-js-button mdl-button--icon\" type=\"button\" title=\"'+a.config().LANG[27]+'\"><i class=\"material-icons\">more_vert</i></button>',b=b+('<ul class=\"mdl-menu mdl-js-menu\" for=\"menu-speed-'+c+'\">')+('<li class=\"mdl-menu__item passGen\"><i class=\"material-icons\">settings</i>'+\n+a.config().LANG[28]+\"</li>\"),b=b+('<li class=\"mdl-menu__item passComplexity\"><i class=\"material-icons\">vpn_key</i>'+a.config().LANG[29]+\"</li>\"),b=b+('<li class=\"mdl-menu__item reset\"><i class=\"material-icons\">refresh</i>'+a.config().LANG[30]+\"</li>\");f.after('<div class=\"password-actions\" />');f.next(\".password-actions\").prepend('<span class=\"passLevel passLevel-'+c+' fullround\" title=\"'+a.config().LANG[31]+'\"></span>').prepend('<i class=\"showpass material-icons\" title=\"'+a.config().LANG[32]+'\">remove_red_eye</i>').prepend(b);\n+d.on(\"keyup\",function(){a.checkPassLevel(d)});f=d.parent().next();f.find(\".passGen\").on(\"click\",function(){h(d);d.focus()});f.find(\".passComplexity\").on(\"click\",function(){k()});f.find(\".showpass\").on(\"mouseover\",function(){$(this).attr(\"title\",d.val())});f.find(\".reset\").on(\"click\",function(){d.val(\"\");var a=$(\"#\"+c+\"R\");0<a.length&&a.val(\"\");componentHandler.upgradeDom()});d.attr(\"data-pass-upgraded\",\"true\")}});b.find(\".passwordfield__input-show\").each(function(){var b=$(this),f=$('<i class=\"showpass material-icons\" title=\"'+\n+a.config().LANG[32]+'\" data-targetid=\"'+b.attr(\"id\")+'\">remove_red_eye</i>'),c=$('<i class=\"clip-pass-icon material-icons\" title=\"'+a.config().LANG[34]+'\" data-clipboard-text=\"'+b.val()+'\">content_paste</i>');b.parent().after(c).after(f);f.on(\"mouseover\",function(){f.attr(\"title\",b.val())})})},m=function(b){g.info(\"setupDatePicker\");var d={format:\"YYYY-MM-DD\",lang:a.config().LOCALE.substr(0,2),time:!1,cancelText:a.config().LANG[44],okText:a.config().LANG[43],clearText:a.config().LANG[30],nowText:a.config().LANG[56],\n minDate:new Date,triggerEvent:\"dateIconClick\"};b.find(\".password-datefield__input\").each(function(){var b=$(this);b.bootstrapMaterialDatePicker(d);b.parent().append(\"<input type='hidden' name='passworddatechange_unix' value='\"+moment.tz(b.val(),a.config().TIMEZONE).format(\"X\")+\"' />\");b.parent().next(\"i\").on(\"click\",function(){b.trigger(\"dateIconClick\")});b.on(\"change\",function(){var c;c=moment.tz(b.val(),a.config().TIMEZONE).format(\"X\");b.parent().find(\"input[name='passworddatechange_unix']\").val(c)})})};\n-return{passwordDetect:m,password:h,viewsTriggers:{search:function(){var b=$(\"#frmSearch\"),d=$(\"#res-content\");b.find(\".icon-searchfav\").on(\"click\",function(){var c=$(this).find(\"i\"),d=b.find(\"input[name='searchfav']\");0==d.val()?(c.addClass(\"mdl-color-text--amber-A200\"),c.attr(\"title\",a.config().LANG[53]),d.val(1)):(c.removeClass(\"mdl-color-text--amber-A200\"),c.attr(\"title\",a.config().LANG[52]),d.val(0));b.submit()});var e=b.find(\"#tags\")[0],c=b.find(\".search-filters-tags\"),g=b.find(\"i.show-filter\");\n+return{passwordDetect:l,password:h,viewsTriggers:{search:function(){var b=$(\"#frmSearch\"),d=$(\"#res-content\");b.find(\".icon-searchfav\").on(\"click\",function(){var c=$(this).find(\"i\"),d=b.find(\"input[name='searchfav']\");0==d.val()?(c.addClass(\"mdl-color-text--amber-A200\"),c.attr(\"title\",a.config().LANG[53]),d.val(1)):(c.removeClass(\"mdl-color-text--amber-A200\"),c.attr(\"title\",a.config().LANG[52]),d.val(0));b.submit()});var e=b.find(\"#tags\")[0],c=b.find(\".search-filters-tags\"),g=b.find(\"i.show-filter\");\n d.on(\"click\",\"#data-search-header .sort-down,#data-search-header .sort-up\",function(){var b=$(this);b.parent().find(\"a\").addClass(\"filterOn\");a.appActions().account.sort(b)}).on(\"click\",\"#search-rows i.icon-favorite\",function(){var b=$(this);a.appActions().account.savefavorite(b,function(){\"on\"===b.data(\"status\")?(b.addClass(\"mdl-color-text--amber-A100\"),b.attr(\"title\",a.config().LANG[50]),b.html(\"star\")):(b.removeClass(\"mdl-color-text--amber-A100\"),b.attr(\"title\",a.config().LANG[49]),b.html(\"star_border\"))})}).on(\"click\",\n-\"#search-rows span.tag\",function(){c.is(\":hidden\")&&g.trigger(\"click\");e.selectize.addItem($(this).data(\"tag-id\"))});g.on(\"click\",function(){var a=$(this);c.is(\":hidden\")?(c.slideDown(\"slow\"),a.html(a.data(\"icon-up\"))):(c.slideUp(\"slow\"),a.html(a.data(\"icon-down\")))});0<e.selectedOptions.length&&g.trigger(\"click\")},common:function(a){m(a);n(a)}},loading:e,ajax:{complete:function(){g.info(\"ajax:complete\");componentHandler.upgradeDom()}},html:{getList:function(a){var b=$('<ul class=\"ldap-list-item mdl-list\"></ul>'),\n+\"#search-rows span.tag\",function(){c.is(\":hidden\")&&g.trigger(\"click\");e.selectize.addItem($(this).data(\"tag-id\"))});g.on(\"click\",function(){var a=$(this);c.is(\":hidden\")?(c.slideDown(\"slow\"),a.html(a.data(\"icon-up\"))):(c.slideUp(\"slow\"),a.html(a.data(\"icon-down\")))});0<e.selectedOptions.length&&g.trigger(\"click\")},common:function(a){l(a);m(a)}},loading:e,ajax:{complete:function(){g.info(\"ajax:complete\");componentHandler.upgradeDom()}},html:{getList:function(a){var b=$('<ul class=\"ldap-list-item mdl-list\"></ul>'),\n e=$('<li class=\"mdl-list__item\"></li>'),c=$('<span class=\"mdl-list__item-primary-content\"></span>');a.forEach(function(a){var d=c.clone();d.append('<i class=\"material-icons mdl-list__item-icon\">person</i>');d.append(a);a=e.clone().append(d);b.append(a)});return b},tabs:{add:function(a,d,e,c){a=$(a);var b=\"\";1===c&&(a.parent().find(\"#tabs-\"+d).addClass(\"is-active\"),b=\"is-active\");a.append('<a href=\"#tabs-'+d+'\" class=\"mdl-tabs__tab '+b+'\">'+e+\"</a>\")}}}}};"
        },
        {
          "filename": "inc/themes/material-blue/views/account/actions.inc",
          "status": "modified",
          "additions": 28,
          "deletions": 12,
          "patch": "@@ -43,18 +43,34 @@ use SP\\Util\\Checks;\n         <?php endif; ?>\n \n         <?php if ($AccountAcl->isShowLink() && $AccountAcl->isShowViewPass() && $accountData->getAccountParentId() === 0 && $accountIsHistory !== 1): ?>\n-            <li>\n-                <button id=\"btnLink\" type=\"button\"\n-                        class=\"btn-action mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconPublicLink()->getClassButton(); ?>\"\n-                        data-action-id=\"<?php echo \\SP\\Core\\ActionsInterface::ACTION_MGM_PUBLICLINKS_NEW; ?>\"\n-                        data-nextaction-id=\"<?php echo \\SP\\Core\\ActionsInterface::ACTION_ACC_VIEW; ?>\"\n-                        data-item-id=\"<?php echo $accountId; ?>\"\n-                        data-sk=\"<?php echo $sk; ?>\"\n-                        data-onclick=\"link/save\"\n-                        title=\"<?php echo __('Crear Enlace P\u00fablico'); ?>\">\n-                    <i class=\"material-icons\"><?php echo $icons->getIconPublicLink()->getIcon(); ?></i>\n-                </button>\n-            </li>\n+            <?php if ($publicLinkUrl === null): ?>\n+                <li>\n+                    <button id=\"btnLink\" type=\"button\"\n+                            class=\"btn-action mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconPublicLink()->getClassButton(); ?>\"\n+                            data-action-id=\"<?php echo \\SP\\Core\\ActionsInterface::ACTION_MGM_PUBLICLINKS_NEW; ?>\"\n+                            data-nextaction-id=\"<?php echo \\SP\\Core\\ActionsInterface::ACTION_ACC_VIEW; ?>\"\n+                            data-item-id=\"<?php echo $accountId; ?>\"\n+                            data-sk=\"<?php echo $sk; ?>\"\n+                            data-onclick=\"link/save\"\n+                            title=\"<?php echo __('Crear Enlace P\u00fablico'); ?>\">\n+                        <i class=\"material-icons\"><?php echo $icons->getIconPublicLink()->getIcon(); ?></i>\n+                    </button>\n+                </li>\n+            <?php else: ?>\n+                <li>\n+                    <button id=\"btnLink\" type=\"button\"\n+                            class=\"btn-action mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconPublicLink()->getClassButton(); ?>\"\n+                            data-action-id=\"<?php echo \\SP\\Core\\ActionsInterface::ACTION_MGM_PUBLICLINKS_REFRESH; ?>\"\n+                            data-nextaction-id=\"<?php echo \\SP\\Core\\ActionsInterface::ACTION_ACC_VIEW; ?>\"\n+                            data-item-id=\"<?php echo $publicLinkId; ?>\"\n+                            data-activetab=\"<?php echo $accountId; ?>\"\n+                            data-sk=\"<?php echo $sk; ?>\"\n+                            data-onclick=\"link/refresh\"\n+                            title=\"<?php echo __('Actualizar Enlace'); ?>\">\n+                        <i class=\"material-icons\"><?php echo $icons->getIconPublicLink()->getIcon(); ?></i>\n+                    </button>\n+                </li>\n+            <?php endif; ?>\n         <?php endif; ?>\n \n         <?php if ($AccountAcl->isShowViewPass()): ?>"
        },
        {
          "filename": "inc/themes/material-blue/views/config/backup.inc",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -179,7 +179,7 @@\n                     <div id=\"help_export\" class=\"help-box\" title=\"<?php echo $icons->getIconHelp()->getTitle(); ?>\">\n                         <p class=\"help-text\"><?php echo __('La exportaci\u00f3n de cuentas permite guardar las cuentas y sus datos en formato XML para posteriormente poder ser importados en otras instancias de sysPass.'); ?></p>\n \n-                        <p class=\"help-text\"><?php echo __('Los elementos exportados son cuentas, clientes y categor\u00edas.'); ?></p>\n+                        <p class=\"help-text\"><?php echo __('Los elementos exportados son cuentas, clientes, categor\u00edas y etiquetas.'); ?></p>\n \n                         <p class=\"help-text\"><?php echo __('Las claves de las cuentas son exportadas de forma encriptada para mayor seguridad.'); ?></p>\n "
        },
        {
          "filename": "inc/themes/material-blue/views/config/encryption.inc",
          "status": "modified",
          "additions": 25,
          "deletions": 13,
          "patch": "@@ -88,17 +88,20 @@\n                     <td class=\"descField\"></td>\n                     <td class=\"valField\">\n                         <div\n-                            class=\"icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>\"><?php echo $icons->getIconWarning()->getIcon(); ?></div>\n+                                class=\"icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>\"><?php echo $icons->getIconWarning()->getIcon(); ?></div>\n                         <?php echo __('Guarde la nueva clave en un lugar seguro.'); ?>\n                         <br>\n                         <div\n-                            class=\"icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>\"><?php echo $icons->getIconWarning()->getIcon(); ?></div>\n+                                class=\"icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>\"><?php echo $icons->getIconWarning()->getIcon(); ?></div>\n                         <?php echo __('Se volver\u00e1n a encriptar las claves de todas las cuentas.'); ?>\n                         <br>\n                         <div\n-                            class=\"icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>\"><?php echo $icons->getIconWarning()->getIcon(); ?></div>\n+                                class=\"icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>\"><?php echo $icons->getIconWarning()->getIcon(); ?></div>\n                         <?php echo __('Los usuarios deber\u00e1n de introducir la nueva clave maestra.'); ?>\n                         <br>\n+                        <div\n+                                class=\"icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>\"><?php echo $icons->getIconWarning()->getIcon(); ?></div>\n+                        <strong><?php printf(__('Se van a actualizar %s cuentas. Este proceso puede tardar algo de tiempo.'), $numAccounts); ?></strong>\n                         <br>\n                         <label class=\"mdl-switch mdl-js-switch mdl-js-ripple-effect\" for=\"confirmPassChange\">\n                             <input type=\"checkbox\" id=\"confirmPassChange\" class=\"mdl-switch__input\"\n@@ -108,6 +111,13 @@\n                     </td>\n                 </tr>\n             </table>\n+\n+            <?php if ($numAccounts >= 500): ?>\n+                <input type=\"hidden\" name=\"useTask\" value=\"1\">\n+                <input type=\"hidden\" name=\"taskId\" value=\"<?php echo $taskId; ?>\">\n+                <input type=\"hidden\" name=\"lock\" value=\"masterpass\">\n+            <?php endif; ?>\n+\n             <input type=\"hidden\" name=\"activeTab\" value=\"<?php echo $encryption_tabIndex; ?>\"/>\n             <input type=\"hidden\" name=\"actionId\"\n                    value=\"<?php echo \\SP\\Core\\ActionsInterface::ACTION_CFG_ENCRYPTION; ?>\"/>\n@@ -128,19 +138,21 @@\n                         <p class=\"help-text\"><?php echo __('La clave maestra es utilizada para encriptar las claves de las cuentas de sysPass para mantenerlas seguras.'); ?></p>\n \n                         <p class=\"help-text\"><?php echo __('Es recomendable cambiarla cada cierto tiempo y utilizar una clave compleja que incluya n\u00fameros, letras y s\u00edmbolos.'); ?></p>\n+\n+                        <p class=\"help-text\"><?php printf(__('Para m\u00e1s informaci\u00f3n consulte: %s'), '<a target=\"_blank\" href=\"https://doc.syspass.org\">https://doc.syspass.org</a>'); ?></p>\n                     </div>\n                 </li>\n                 <?php if ($isAdminApp): ?>\n-                <li>\n-                    <button type=\"button\"\n-                            class=\"btn-action mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconCheck()->getClassButton(); ?>\"\n-                            data-onclick=\"config/refreshMpass\"\n-                            data-action-id=\"<?php echo \\SP\\Core\\ActionsInterface::ACTION_CFG_ENCRYPTION_REFRESH; ?>\"\n-                            data-sk=\"<?php echo $sk; ?>\"\n-                            title=\"<?php echo __('Actualizar hash de clave maestra'); ?>\">\n-                        <i class=\"material-icons\"><?php echo $icons->getIconRefresh()->getIcon(); ?></i>\n-                    </button>\n-                </li>\n+                    <li>\n+                        <button type=\"button\"\n+                                class=\"btn-action mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconCheck()->getClassButton(); ?>\"\n+                                data-onclick=\"config/refreshMpass\"\n+                                data-action-id=\"<?php echo \\SP\\Core\\ActionsInterface::ACTION_CFG_ENCRYPTION_REFRESH; ?>\"\n+                                data-sk=\"<?php echo $sk; ?>\"\n+                                title=\"<?php echo __('Actualizar hash de clave maestra'); ?>\">\n+                            <i class=\"material-icons\"><?php echo $icons->getIconRefresh()->getIcon(); ?></i>\n+                        </button>\n+                    </li>\n                 <?php endif; ?>\n                 <li>\n                     <button form=\"frmCrypt\""
        },
        {
          "filename": "inc/themes/material-blue/views/itemshow/tokens.inc",
          "status": "modified",
          "additions": 24,
          "deletions": 8,
          "patch": "@@ -1,3 +1,7 @@\n+<?php\n+/** @var  \\SP\\DataModel\\ApiTokenData $ApiTokenData */\n+/** @var  \\SP\\Core\\UI\\ThemeIconsBase $icons */\n+?>\n <div id=\"box-popup\">\n     <h2 class=\"center\"><?php echo $header; ?><i class=\"btn-popup-close material-icons\">close</i></h2>\n \n@@ -13,10 +17,10 @@\n                 <td class=\"valField\">\n                     <div class=\"lowres-title\"><?php echo __('Usuario'); ?></div>\n \n-                    <select id=\"selUsers\" name=\"users\" class=\"select-box\" required>\n+                    <select id=\"selUsers\" name=\"users\" class=\"select-box\" required <?php echo $isDisabled; ?>>\n                         <option value=\"\"><?php echo __('Seleccionar Usuario'); ?></option>\n                         <?php foreach ($users as $user): ?>\n-                            <?php $selected = ($gotData && $user->id == $token->authtoken_userId) ? 'selected' : ''; ?>\n+                            <?php $selected = ($user->id === $ApiTokenData->getAuthtokenUserId()) ? 'selected' : ''; ?>\n                             <option value=\"<?php echo $user->id; ?>\" <?php echo $selected; ?>><?php echo $user->name; ?></option>\n                         <?php endforeach; ?>\n                     </select>\n@@ -28,16 +32,28 @@\n                     <div class=\"lowres-title\"><?php echo __('Acci\u00f3n'); ?></div>\n \n                     <select id=\"selActions\" name=\"actions\"\n-                            class=\"select-box\" required>\n+                            class=\"select-box\" required <?php echo $isDisabled; ?>>\n                         <option value=\"\"><?php echo __('Seleccionar Acci\u00f3n'); ?></option>\n                         <?php foreach ($actions as $id => $name): ?>\n-                            <?php $selected = ($gotData && $id == $token->authtoken_actionId) ? 'selected' : ''; ?>\n+                            <?php $selected = ($id === $ApiTokenData->getAuthtokenActionId()) ? 'selected' : ''; ?>\n                             <option value=\"<?php echo $id; ?>\" <?php echo $selected; ?>><?php echo $name; ?></option>\n                         <?php endforeach; ?>\n                     </select>\n                 </td>\n             </tr>\n             <?php if (!$isView): ?>\n+                <tr>\n+                    <td class=\"descField\"><?php echo __('Clave'); ?></td>\n+                    <td class=\"valField\">\n+                        <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n+                            <input id=\"pass\" name=\"pass\" type=\"password\"\n+                                   class=\"mdl-textfield__input passwordfield__input mdl-color-text--indigo-400\"\n+                                   maxlength=\"50\">\n+                            <label class=\"mdl-textfield__label\"\n+                                   for=\"pass\"><?php echo __('Clave'); ?></label>\n+                        </div>\n+                    </td>\n+                </tr>\n                 <tr>\n                     <td class=\"descField\"><?php echo __('Opciones'); ?></td>\n                     <td class=\"valField\">\n@@ -56,22 +72,22 @@\n                     <td class=\"valField\">\n                         <div class=\"lowres-title\"><?php echo __('Token'); ?></div>\n \n-                        <?php echo $gotData ? $token->authtoken_token : ''; ?>\n+                        <?php echo $ApiTokenData->getAuthtokenToken(); ?>\n                     </td>\n                 </tr>\n             <?php endif; ?>\n             </tbody>\n         </table>\n \n-        <input type=\"hidden\" name=\"itemId\" value=\"<?php echo $gotData ? $token->authtoken_id : ''; ?>\"/>\n+        <input type=\"hidden\" name=\"itemId\" value=\"<?php echo $ApiTokenData->getAuthtokenId(); ?>\"/>\n         <input type=\"hidden\" name=\"actionId\" value=\"<?php echo $actionId; ?>\"/>\n         <input type=\"hidden\" name=\"sk\" value=\"\">\n         <input type=\"hidden\" name=\"isAjax\" value=\"1\">\n     </form>\n     <div class=\"action-in-box\">\n         <button\n-            class=\"mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconSave()->getClassButton(); ?>\"\n-            form=\"frmTokens\" title=\"<?php echo $icons->getIconSave()->getTitle(); ?>\">\n+                class=\"mdl-button mdl-js-button mdl-button--fab mdl-button--mini-fab mdl-button--colored <?php echo $icons->getIconSave()->getClassButton(); ?>\"\n+                form=\"frmTokens\" title=\"<?php echo $icons->getIconSave()->getTitle(); ?>\">\n             <i class=\"material-icons\"><?php echo $icons->getIconSave()->getIcon(); ?></i>\n         </button>\n     </div>"
        },
        {
          "filename": "inc/themes/material-blue/views/main/body-header-menu.inc",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -1,7 +1,13 @@\n <header class=\"mdl-layout__header mdl-color--indigo-400\">\n     <div class=\"mdl-layout__header-row\">\n         <!-- Title -->\n-        <span class=\"mdl-layout-icon\"><img class=\"logo\" src=\"<?php echo $logonobg; ?>\" alt=\"logo\"/></span>\n+        <span class=\"mdl-layout-icon\">\n+            <img class=\"logo btn-menu\" src=\"<?php echo $logonobg; ?>\"\n+                 alt=\"logo\"\n+                 data-action-id=\"<?php echo \\SP\\Core\\ActionsInterface::ACTION_ACC_SEARCH; ?>\"\n+                 data-view=\"search\"\n+                 data-historyReset=\"1\"/>\n+        </span>\n         <!--        <span class=\"mdl-layout-title\">--><?php //echo '#', $appInfo['appname']; ?><!--</span>-->\n         <?php if ($loggedIn): ?>\n             <!-- Add spacer, to align navigation to the right -->"
        },
        {
          "filename": "inc/themes/material-blue/views/main/body-start.inc",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -5,6 +5,7 @@\n     </noscript>\n     <div id=\"wrap-loading\">\n         <div id=\"loading\" class=\"mdl-spinner mdl-spinner--single-color mdl-js-spinner\"></div>\n+        <div id=\"taskStatus\"></div>\n     </div>\n     <div id=\"container\" class=\"<?php echo $page; ?>\" data-page=\"<?php echo $page; ?>\">\n         <?php if ($useLayout === true): ?>"
        },
        {
          "filename": "inc/themes/material-blue/views/main/upgrade.inc",
          "status": "modified",
          "additions": 64,
          "deletions": 20,
          "patch": "@@ -1,12 +1,16 @@\n <main class=\"mdl-layout__content\">\n     <div id=\"actions\" class=\"upgrade\">\n         <div id=\"page-title\">\n-            <h1><?php printf(__('Actualizaci\u00f3n  %s'), $appVersion); ?></h1>\n+            <h1><?php printf(__('Actualizaci\u00f3n  %s'), $upgradeVersion); ?></h1>\n         </div>\n \n-        <form id=\"frmUpgrade\" method=\"post\" action=\"index.php\">\n+        <form id=\"frmUpgrade\" method=\"get\" action=\"index.php\" class=\"form-action\" data-onsubmit=\"main/upgrade\">\n             <fieldset>\n-                <legend><?php echo __('Actualizaci\u00f3n de BBDD'); ?></legend>\n+                <?php if ($type === 'db'): ?>\n+                    <legend><?php echo __('Actualizaci\u00f3n de BBDD'); ?></legend>\n+                <?php elseif ($type === 'app'): ?>\n+                    <legend><?php echo __('Actualizaci\u00f3n de Aplicaci\u00f3n'); ?></legend>\n+                <?php endif; ?>\n \n                 <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n                     <input id=\"h\" name=\"h\" type=\"text\" required class=\"mdl-textfield__input mdl-color-text--indigo-400\"\n@@ -23,12 +27,14 @@\n                     <?php echo __('Este c\u00f3digo se encuentra en el archivo de configuraci\u00f3n de sysPass con la etiqueta \"upgradeKey\"'); ?>\n                 </div>\n \n-                <?php if (count($constraints) > 0): ?>\n+                <?php if ($version < 1316011001 && count($constraints) > 0): ?>\n                     <div>\n                         <ul class=\"errors\">\n                             <li class=\"msg-warning\">\n                                 <i class=\"icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>\"><?php echo $icons->getIconWarning()->getIcon(); ?></i>\n                                 <?php echo __('Se han encontrado elementos hu\u00e9rfanos. Por favor, modifique estos elementos o indique los IDs por defecto para los elementos hu\u00e9rfanos.'); ?>\n+                                <br>\n+                                <?php echo __('Si no se indican los IDs, se crear\u00e1n nuevos elementos.'); ?>\n                             </li>\n                         </ul>\n                     </div>\n@@ -46,66 +52,104 @@\n                         || $checkConstraints->accountshistory_useredit > 0\n                     ): ?>\n                         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n-                            <input id=\"userid\" name=\"userid\" type=\"number\" required\n+                            <input id=\"userid\" name=\"userid\" type=\"number\"\n                                    class=\"mdl-textfield__input mdl-color-text--indigo-400\"\n-                                   autocomplete=\"off\" min=\"1\" max=\"1000\">\n+                                   autocomplete=\"off\" min=\"0\" max=\"1000\" value=\"0\">\n                             <label class=\"mdl-textfield__label\"\n-                                   for=\"h\"><?php echo __('Introducir un ID de usuario v\u00e1lido para cuentas'); ?></label>\n+                                   for=\"userid\"><?php echo __('Introducir un ID de usuario v\u00e1lido para cuentas'); ?></label>\n                         </div>\n                     <?php endif; ?>\n \n                     <?php if ($checkConstraints->accounts_category > 0\n                         || $checkConstraints->accountshistory_category > 0\n                     ): ?>\n                         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n-                            <input id=\"categoryid\" name=\"categoryid\" type=\"number\" required\n+                            <input id=\"categoryid\" name=\"categoryid\" type=\"number\"\n                                    class=\"mdl-textfield__input mdl-color-text--indigo-400\"\n-                                   autocomplete=\"off\" min=\"1\" max=\"1000\">\n+                                   autocomplete=\"off\" min=\"0\" max=\"1000\" value=\"0\">\n                             <label class=\"mdl-textfield__label\"\n-                                   for=\"h\"><?php echo __('Introducir un ID de categor\u00eda v\u00e1lido para cuentas'); ?></label>\n+                                   for=\"categoryid\"><?php echo __('Introducir un ID de categor\u00eda v\u00e1lido para cuentas'); ?></label>\n                         </div>\n                     <?php endif; ?>\n \n                     <?php if ($checkConstraints->accounts_customer > 0\n                         || $checkConstraints->accountshistory_customer > 0\n                     ): ?>\n                         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n-                            <input id=\"customerid\" name=\"customerid\" type=\"number\" required\n+                            <input id=\"customerid\" name=\"customerid\" type=\"number\"\n                                    class=\"mdl-textfield__input mdl-color-text--indigo-400\"\n-                                   autocomplete=\"off\" min=\"1\" max=\"1000\">\n+                                   autocomplete=\"off\" min=\"0\" max=\"1000\" value=\"0\">\n                             <label class=\"mdl-textfield__label\"\n-                                   for=\"h\"><?php echo __('Introducir un ID de cliente v\u00e1lido para cuentas'); ?></label>\n+                                   for=\"customerid\"><?php echo __('Introducir un ID de cliente v\u00e1lido para cuentas'); ?></label>\n                         </div>\n                     <?php endif; ?>\n \n                     <?php if ($checkConstraints->users_group > 0): ?>\n                         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n-                            <input id=\"groupid\" name=\"groupid\" type=\"number\" required\n+                            <input id=\"groupid\" name=\"groupid\" type=\"number\"\n                                    class=\"mdl-textfield__input mdl-color-text--indigo-400\"\n-                                   autocomplete=\"off\" min=\"1\" max=\"1000\">\n+                                   autocomplete=\"off\" min=\"0\" max=\"1000\" value=\"0\">\n                             <label class=\"mdl-textfield__label\"\n-                                   for=\"h\"><?php echo __('Introducir un ID de grupo v\u00e1lido para usuarios'); ?></label>\n+                                   for=\"groupid\"><?php echo __('Introducir un ID de grupo v\u00e1lido para usuarios'); ?></label>\n                         </div>\n                     <?php endif; ?>\n \n                     <?php if ($checkConstraints->users_profile > 0): ?>\n                         <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n-                            <input id=\"profileid\" name=\"profileid\" type=\"number\" required\n+                            <input id=\"profileid\" name=\"profileid\" type=\"number\"\n                                    class=\"mdl-textfield__input mdl-color-text--indigo-400\"\n-                                   autocomplete=\"off\" min=\"1\" max=\"1000\">\n+                                   autocomplete=\"off\" min=\"0\" max=\"1000\" value=\"0\">\n                             <label class=\"mdl-textfield__label\"\n-                                   for=\"h\"><?php echo __('Introducir un ID de perfil v\u00e1lido para usuarios'); ?></label>\n+                                   for=\"profileid\"><?php echo __('Introducir un ID de perfil v\u00e1lido para usuarios'); ?></label>\n                         </div>\n                     <?php endif; ?>\n                 <?php endif; ?>\n \n+                <?php if ($version < 21017022601): ?>\n+                    <div>\n+                        <ul class=\"errors\">\n+                            <li class=\"msg-warning\">\n+                                <i class=\"icon material-icons <?php echo $icons->getIconWarning()->getClass(); ?>\"><?php echo $icons->getIconWarning()->getIcon(); ?></i>\n+                                <?php echo __('Esta actualizaci\u00f3n utiliza un nuevo esquema de encriptaci\u00f3n, por lo que es necesario reencriptar los datos almacenados'); ?>\n+                                <br>\n+                                <strong><?php printf(__('Se van a actualizar %s cuentas. Este proceso puede tardar algo de tiempo.'), $numAccounts); ?></strong>\n+                                <br>\n+                                <?php printf(__('Para m\u00e1s informaci\u00f3n consulte: %s'), '<a target=\"_blank\" href=\"https://doc.syspass.org\">https://doc.syspass.org</a>'); ?>\n+                            </li>\n+                        </ul>\n+                    </div>\n+\n+                    <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n+                        <input id=\"masterkey\" name=\"masterkey\" type=\"password\"\n+                               class=\"mdl-textfield__input mdl-color-text--indigo-400 passwordfield__input-show\"\n+                               maxlength=\"255\" required/>\n+                        <label class=\"mdl-textfield__label\"\n+                               for=\"masterkey\"><?php echo __('Clave Maestra actual'); ?></label>\n+                    </div>\n+\n+                    <div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\">\n+                        <input id=\"userlogin\" name=\"userlogin\" type=\"text\" required\n+                               class=\"mdl-textfield__input mdl-color-text--indigo-400\"\n+                               autocomplete=\"off\">\n+                        <label class=\"mdl-textfield__label\"\n+                               for=\"userlogin\"><?php echo __('Introducir login de usuario v\u00e1lido'); ?></label>\n+                    </div>\n+\n+                    <?php if ($numAccounts >= 500): ?>\n+                        <input type=\"hidden\" name=\"useTask\" value=\"1\">\n+                        <input type=\"hidden\" name=\"taskId\" value=\"<?php echo $taskId; ?>\">\n+                        <input type=\"hidden\" name=\"lock\" value=\"upgrade\">\n+                    <?php endif; ?>\n+                <?php endif; ?>\n+\n                 <label class=\"mdl-checkbox mdl-js-checkbox mdl-js-ripple-effect\" for=\"chkConfirm\">\n                     <input type=\"checkbox\" id=\"chkConfirm\" class=\"mdl-checkbox__input\" name=\"chkConfirm\">\n                     <span class=\"mdl-checkbox__label\"><?php echo __('He realizado una copia de seguridad completa de sysPass'); ?></span>\n                 </label>\n \n                 <input type=\"hidden\" name=\"a\" value=\"<?php echo $action; ?>\">\n-                <input type=\"hidden\" name=\"t\" value=\"<?php echo $time; ?>\">\n+                <input type=\"hidden\" name=\"type\" value=\"<?php echo $type; ?>\">\n+                <input type=\"hidden\" name=\"version\" value=\"<?php echo $version; ?>\">\n                 <input type=\"hidden\" name=\"upgrade\" value=\"1\">\n             </fieldset>\n "
        },
        {
          "filename": "js/app-actions.js",
          "status": "modified",
          "additions": 102,
          "deletions": 3,
          "patch": "@@ -44,7 +44,9 @@ sysPass.Actions = function (Common) {\n         main: {\n             login: \"/ajax/ajax_doLogin.php\",\n             install: \"/ajax/ajax_install.php\",\n-            getUpdates: \"/ajax/ajax_checkUpds.php\"\n+            upgrade: \"/ajax/ajax_upgrade.php\",\n+            getUpdates: \"/ajax/ajax_checkUpds.php\",\n+            task: \"/ajax/ajax_task.php\"\n         },\n         checks: \"/ajax/ajax_checkConnection.php\",\n         config: {\n@@ -399,6 +401,70 @@ sysPass.Actions = function (Common) {\n                 }\n             });\n         },\n+        upgrade: function ($obj) {\n+            log.info(\"main:upgrade\");\n+\n+            var atext = \"<div id=\\\"alert\\\"><p id=\\\"alert-text\\\">\" + Common.config().LANG[59] + \"</p></div>\";\n+\n+            showDialog({\n+                text: atext,\n+                negative: {\n+                    title: Common.config().LANG[44],\n+                    onClick: function (e) {\n+                        e.preventDefault();\n+\n+                        Common.msg.error(Common.config().LANG[44]);\n+                    }\n+                },\n+                positive: {\n+                    title: Common.config().LANG[43],\n+                    onClick: function (e) {\n+                        var $useTask = $obj.find(\"input[name='useTask']\");\n+                        var $taskStatus = $(\"#taskStatus\");\n+\n+                        $taskStatus.empty().html(Common.config().LANG[62]);\n+\n+                        if ($useTask.length > 0 && $useTask.val() == 1) {\n+                            var optsTask = Common.appRequests().getRequestOpts();\n+                            optsTask.url = ajaxUrl.main.task;\n+                            optsTask.data = {\n+                                source: $obj.find(\"input[name='lock']\").val(),\n+                                taskId: $obj.find(\"input[name='taskId']\").val()\n+                            };\n+\n+                            var task = Common.appRequests().getActionEvent(optsTask, function (result) {\n+                                var text = result.task + \" - \" + result.message + \" - \" + result.time + \" - \" + result.progress + \"%\";\n+                                text += \"<br>\" + Common.config().LANG[62];\n+\n+                                $taskStatus.empty().html(text);\n+                            });\n+                        }\n+\n+                        var opts = Common.appRequests().getRequestOpts();\n+                        opts.url = ajaxUrl.main.upgrade;\n+                        opts.method = \"get\";\n+                        opts.useFullLoading = true;\n+                        opts.data = $obj.serialize();\n+\n+                        Common.appRequests().getActionCall(opts, function (json) {\n+                            Common.msg.out(json);\n+\n+                            if (json.status !== 0) {\n+                                $obj.find(\":input[name=h]\").val(\"\");\n+                            } else {\n+                                if (task !== undefined) {\n+                                    task.close();\n+                                }\n+\n+                                setTimeout(function () {\n+                                    Common.redirect(\"index.php\");\n+                                }, 5000);\n+                            }\n+                        });\n+                    }\n+                }\n+            });\n+        },\n         getUpdates: function ($obj) {\n             log.info(\"main:getUpdates\");\n \n@@ -515,9 +581,41 @@ sysPass.Actions = function (Common) {\n                 positive: {\n                     title: Common.config().LANG[43],\n                     onClick: function (e) {\n-                        config.save($obj);\n+                        var $useTask = $obj.find(\"input[name='useTask']\");\n+                        var $taskStatus = $(\"#taskStatus\");\n \n-                        $obj.find(\":input[type=password]\").val(\"\");\n+                        $taskStatus.empty().html(Common.config().LANG[62]);\n+\n+                        if ($useTask.length > 0 && $useTask.val() == 1) {\n+                            var optsTask = Common.appRequests().getRequestOpts();\n+                            optsTask.url = ajaxUrl.main.task;\n+                            optsTask.data = {\n+                                source: $obj.find(\"input[name='lock']\").val(),\n+                                taskId: $obj.find(\"input[name='taskId']\").val()\n+                            };\n+\n+                            var task = Common.appRequests().getActionEvent(optsTask, function (result) {\n+                                var text = result.task + \" - \" + result.message + \" - \" + result.time + \" - \" + result.progress + \"%\";\n+                                text += \"<br>\" + Common.config().LANG[62];\n+\n+                                $taskStatus.empty().html(text);\n+                            });\n+                        }\n+\n+                        var opts = Common.appRequests().getRequestOpts();\n+                        opts.url = ajaxUrl.config.save;\n+                        opts.useFullLoading = true;\n+                        opts.data = $obj.serialize();\n+\n+                        Common.appRequests().getActionCall(opts, function (json) {\n+                            Common.msg.out(json);\n+\n+                            $obj.find(\":input[type=password]\").val(\"\");\n+\n+                            if (task !== undefined) {\n+                                task.close();\n+                            }\n+                        });\n                     }\n                 }\n             });\n@@ -528,6 +626,7 @@ sysPass.Actions = function (Common) {\n             var opts = Common.appRequests().getRequestOpts();\n             opts.url = ajaxUrl.config.export;\n             opts.method = \"post\";\n+            opts.useFullLoading = true;\n             opts.data = $obj.serialize();\n \n             Common.appRequests().getActionCall(opts, function (json) {"
        },
        {
          "filename": "js/app-actions.min.js",
          "status": "modified",
          "additions": 44,
          "deletions": 41,
          "patch": "@@ -1,42 +1,45 @@\n-var $jscomp={scope:{},findInternal:function(c,e,k){c instanceof String&&(c=String(c));for(var f=c.length,g=0;g<f;g++){var l=c[g];if(e.call(k,l,g,c))return{i:g,v:l}}return{i:-1,v:void 0}}};$jscomp.defineProperty=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(c,e,k){if(k.get||k.set)throw new TypeError(\"ES3 does not support getters and setters.\");c!=Array.prototype&&c!=Object.prototype&&(c[e]=k.value)};\n-$jscomp.getGlobal=function(c){return\"undefined\"!=typeof window&&window===c?c:\"undefined\"!=typeof global?global:c};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(c,e,k,f){if(e){k=$jscomp.global;c=c.split(\".\");for(f=0;f<c.length-1;f++){var g=c[f];g in k||(k[g]={});k=k[g]}c=c[c.length-1];f=k[c];e=e(f);e!=f&&null!=e&&$jscomp.defineProperty(k,c,{configurable:!0,writable:!0,value:e})}};\n+var $jscomp={scope:{},findInternal:function(c,d,k){c instanceof String&&(c=String(c));for(var f=c.length,g=0;g<f;g++){var l=c[g];if(d.call(k,l,g,c))return{i:g,v:l}}return{i:-1,v:void 0}}};$jscomp.defineProperty=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(c,d,k){if(k.get||k.set)throw new TypeError(\"ES3 does not support getters and setters.\");c!=Array.prototype&&c!=Object.prototype&&(c[d]=k.value)};\n+$jscomp.getGlobal=function(c){return\"undefined\"!=typeof window&&window===c?c:\"undefined\"!=typeof global?global:c};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(c,d,k,f){if(d){k=$jscomp.global;c=c.split(\".\");for(f=0;f<c.length-1;f++){var g=c[f];g in k||(k[g]={});k=k[g]}c=c[c.length-1];f=k[c];d=d(f);d!=f&&null!=d&&$jscomp.defineProperty(k,c,{configurable:!0,writable:!0,value:d})}};\n $jscomp.polyfill(\"Array.prototype.find\",function(c){return c?c:function(c,k){return $jscomp.findInternal(this,c,k).v}},\"es6-impl\",\"es3\");\n-sysPass.Actions=function(c){var e=c.log,k=0,f={doAction:\"/ajax/ajax_getContent.php\",updateItems:\"/ajax/ajax_getItems.php\",user:{savePreferences:\"/ajax/ajax_userPrefsSave.php\",password:\"/ajax/ajax_usrpass.php\",passreset:\"/ajax/ajax_passReset.php\"},main:{login:\"/ajax/ajax_doLogin.php\",install:\"/ajax/ajax_install.php\",getUpdates:\"/ajax/ajax_checkUpds.php\"},checks:\"/ajax/ajax_checkConnection.php\",config:{save:\"/ajax/ajax_configSave.php\",\"export\":\"/ajax/ajax_configSave.php\",\"import\":\"/ajax/ajax_configSave.php\"},\n-file:\"/ajax/ajax_filesMgmt.php\",link:\"/ajax/ajax_itemSave.php\",plugin:\"/ajax/ajax_itemSave.php\",account:{save:\"/ajax/ajax_itemSave.php\",saveFavorite:\"/ajax/ajax_itemSave.php\",request:\"/ajax/ajax_itemSave.php\",getFiles:\"/ajax/ajax_accGetFiles.php\",search:\"/ajax/ajax_accSearch.php\"},appMgmt:{show:\"/ajax/ajax_itemShow.php\",save:\"/ajax/ajax_itemSave.php\",search:\"/ajax/ajax_itemSearch.php\"},eventlog:\"/ajax/ajax_eventlog.php\",wiki:{show:\"/ajax/ajax_wiki.php\"},notice:{show:\"/ajax/ajax_noticeShow.php\",search:\"/ajax/ajax_noticeSearch.php\"}},\n-g=function(a,b){var d={actionId:a.actionId,itemId:\"undefined\"!==a.itemId?a.itemId:0,isAjax:1},h=c.appRequests().getRequestOpts();h.url=f.doAction;h.method=\"get\";h.type=\"html\";h.addHistory=!0;h.data=d;c.appRequests().getActionCall(h,function(a){var c=$(\"#content\");c.empty().html(a);a=sysPassApp.triggers().views;a.common(c);if(void 0!==b&&\"function\"===typeof a[b])a[b]();c=$(\".mdl-layout__content\");0<c.scrollTop()&&c.animate({scrollTop:0},1E3)})},l=function(a,b){$.magnificPopup.open({items:{src:b,type:\"inline\"},\n-callbacks:{open:function(){var a=$(\"#box-popup\");c.appTriggers().views.common(a);a.find(\":input:text:visible:first\").focus()},close:function(){a.data(\"item-dst\")&&p.update(a)}},showCloseBtn:!1})},t=function(a,b){var d=$('<div id=\"box-popup\" class=\"image\">'+b+\"</div>\"),h=d.find(\"img\");if(0===h.length)return l(a,b);h.hide();$.magnificPopup.open({items:{src:d,type:\"inline\"},callbacks:{open:function(){var a=this;h.on(\"click\",function(){a.close()});setTimeout(function(){var a=c.resizeImage(h);d.css({backgroundColor:\"#fff\",\n-width:a.width,height:\"auto\"});h.show(\"slow\")},500)}}})},p={get:function(a){e.info(\"items:get\");var b=a[0].selectize;b.clearOptions();b.load(function(d){var h=c.appRequests().getRequestOpts();h.url=f.updateItems;h.method=\"get\";h.cache=!0;h.data={sk:a.data(\"sk\"),itemType:a.data(\"item-type\"),itemId:a.data(\"item-id\")};c.appRequests().getActionCall(h,function(h){d(h.data);b.setValue(a.data(\"selected-id\"),!0);c.appTriggers().updateFormHash()})})},update:function(a){e.info(\"items:update\");var b=$(\"#\"+a.data(\"item-dst\"))[0].selectize;\n-b.clearOptions();b.load(function(b){var d=c.appRequests().getRequestOpts();d.url=f.updateItems;d.method=\"get\";d.data={sk:c.sk.get(),itemType:a.data(\"item-type\")};c.appRequests().getActionCall(d,function(a){b(a.data)})})}},q={logout:function(){var a=window.location.search;c.redirect(0<a.length?\"index.php\"+a+\"&logout=1\":\"index.php?logout=1\")},login:function(a){e.info(\"main:login\");var b=c.appRequests().getRequestOpts();b.url=f.main.login;b.method=\"get\";b.data=a.serialize();c.appRequests().getActionCall(b,\n-function(b){var d=$(\".extra-hidden\");switch(b.status){case 0:c.redirect(b.data.url);break;case 2:c.msg.out(b);a.find(\"input[type='text'],input[type='password']\").val(\"\");a.find(\"input:first\").focus();0<d.length&&d.hide();$(\"#mpass\").prop(\"disabled\",!1).val(\"\");$(\"#smpass\").show();break;case 5:c.msg.out(b);a.find(\"input[type='text'],input[type='password']\").val(\"\");a.find(\"input:first\").focus();0<d.length&&d.hide();$(\"#oldpass\").prop(\"disabled\",!1).val(\"\");$(\"#soldpass\").show();break;default:c.msg.out(b),\n-a.find(\"input[type='text'],input[type='password']\").val(\"\"),a.find(\"input:first\").focus()}})},install:function(a){e.info(\"main:install\");var b=c.appRequests().getRequestOpts();b.url=f.main.install;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0==a.status&&setTimeout(function(){c.redirect(\"index.php\")},1E3)})},getUpdates:function(a){e.info(\"main:getUpdates\");a=c.appRequests().getRequestOpts();a.url=f.main.getUpdates;a.type=\"html\";a.method=\"get\";a.timeout=1E4;a.useLoading=\n-!1;a.data={isAjax:1};c.appRequests().getActionCall(a,function(a){$(\"#updates\").html(a);\"undefined\"!==typeof componentHandler&&componentHandler.upgradeDom()},function(){$(\"#updates\").html(\"!\")})}},r={save:function(a){e.info(\"config:save\");var b=c.appRequests().getRequestOpts();b.url=f.config.save;b.data=a.serialize();\"masterpass\"===a.data(\"type\")&&(b.useFullLoading=!0);c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&(void 0!==a.data(\"nextaction-id\")?g({actionId:a.data(\"nextaction-id\"),\n-itemId:a.data(\"activetab\")}):void 0!==a.data(\"reload\")&&setTimeout(function(){c.redirect(\"index.php\")},2E3))})},masterpass:function(a){var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[59]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(b){b.preventDefault();c.msg.error(c.config().LANG[44]);a.find(\":input[type=password]\").val(\"\")}},positive:{title:c.config().LANG[43],onClick:function(c){r.save(a);a.find(\":input[type=password]\").val(\"\")}}})},backup:function(a){e.info(\"config:backup\");\n-var b=c.appRequests().getRequestOpts();b.url=f.config[\"export\"];b.method=\"post\";b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&void 0!==a.data(\"nextaction-id\")&&g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})},\"export\":function(a){e.info(\"config:export\");var b=c.appRequests().getRequestOpts();b.url=f.config[\"export\"];b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&void 0!==a.data(\"nextaction-id\")&&\n-g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})},\"import\":function(a){e.info(\"config:import\");var b=c.appRequests().getRequestOpts();b.url=f.config[\"import\"];b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&void 0!==a.data(\"nextaction-id\")&&g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})},refreshMpass:function(a){e.info(\"config:import\");var b=c.appRequests().getRequestOpts();b.url=f.config.save;b.data={actionId:a.data(\"action-id\"),\n-itemId:a.data(\"item-id\"),sk:a.data(\"sk\"),isAjax:1};c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}},m={show:function(a){e.info(\"account:show\");g({actionId:a.data(\"action-id\"),itemId:a.data(\"item-id\")},\"account\")},showHistory:function(a){e.info(\"account:showHistory\");g({actionId:a.data(\"action-id\"),itemId:a.val()},\"account\")},edit:function(a){e.info(\"account:edit\");g({actionId:a.data(\"action-id\"),itemId:a.data(\"item-id\")},\"account\")},\"delete\":function(a){e.info(\"account:delete\");var b=\n-'<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[3]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.account.save;b.data={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get()};c.appRequests().getActionCall(b,function(a){c.msg.out(a);m.search()})}}})},showpass:function(a){e.info(\"account:showpass\");\n-var b=a.data(\"parent-id\"),d=c.appRequests().getRequestOpts();d.url=f.appMgmt.show;d.method=\"get\";d.data={itemId:0==b?a.data(\"item-id\"):b,actionId:a.data(\"action-id\"),isHistory:a.data(\"history\"),isLinked:0<b?1:0,isFull:1,sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(d,function(b){0!==b.status?c.msg.out(b):(b=$(b.data.html),l(a,b),b.on(\"mouseleave\",function(){clearTimeout(k);k=setTimeout(function(){$.magnificPopup.close()},3E4)}).on(\"mouseenter\",function(){0!==k&&clearTimeout(k)}))})},copypass:function(a){e.info(\"account:copypass\");\n-var b=a.data(\"parent-id\"),d=c.appRequests().getRequestOpts();d.url=f.appMgmt.show;d.method=\"get\";d.async=!1;d.data={itemId:0==b?a.data(\"item-id\"):b,actionId:a.data(\"action-id\"),isHistory:a.data(\"history\"),isFull:0,sk:c.sk.get(),isAjax:1};a=c.appRequests().getActionCall(d);void 0!==a.responseJSON.csrf&&c.sk.set(a.responseJSON.csrf);return a},copy:function(a){e.info(\"account:copy\");g({actionId:a.data(\"action-id\"),itemId:a.data(\"item-id\")},\"account\")},savefavorite:function(a,b){e.info(\"account:saveFavorite\");\n-var d=\"on\"===a.data(\"status\"),h={actionId:d?a.data(\"action-id-off\"):a.data(\"action-id-on\"),itemId:a.data(\"item-id\"),sk:c.sk.get(),isAjax:1},g=c.appRequests().getRequestOpts();g.url=f.account.saveFavorite;g.data=h;c.appRequests().getActionCall(g,function(h){c.msg.out(h);0===h.status&&(a.data(\"status\",d?\"off\":\"on\"),\"function\"===typeof b&&b())})},request:function(a){e.info(\"account:request\");var b=c.appRequests().getRequestOpts();b.url=f.account.request;b.data=a.serialize();c.appRequests().getActionCall(b,\n-function(a){c.msg.out(a)})},menu:function(a){a.hide();a.parent().children(\".actions-optional\").show(250)},sort:function(a){e.info(\"account:sort\");var c=$(\"#frmSearch\");c.find('input[name=\"skey\"]').val(a.data(\"key\"));c.find('input[name=\"sorder\"]').val(a.data(\"dir\"));c.find('input[name=\"start\"]').val(a.data(\"start\"));m.search()},editpass:function(a){e.info(\"account:editpass\");var c=a.data(\"parent-id\");g({actionId:a.data(\"action-id\"),itemId:0==c?a.data(\"item-id\"):c},\"account\")},restore:function(a){e.info(\"account:restore\");\n-m.save(a)},getfiles:function(a){e.info(\"account:getfiles\");var b=c.appRequests().getRequestOpts();b.method=\"get\";b.type=\"html\";b.url=f.account.getFiles;b.data={id:a.data(\"item-id\"),del:a.data(\"delete\"),sk:c.sk.get()};c.appRequests().getActionCall(b,function(c){a.html(c)})},search:function(a){e.info(\"account:search\");var b=$(\"#frmSearch\");b.find(\"input[name='sk']\").val(c.sk.get());b.find(\"input[name='skey']\").val();b.find(\"input[name='sorder']\").val();void 0!==a&&b.find(\"input[name='start']\").val(0);\n-a=c.appRequests().getRequestOpts();a.url=f.account.search;a.method=\"get\";a.data=b.serialize();c.appRequests().getActionCall(a,function(a){10===a.status&&c.msg.out(a);c.sk.set(a.sk);$(\"#res-content\").empty().html(a.html)})},save:function(a){e.info(\"account:save\");var b=c.appRequests().getRequestOpts();b.url=f.account.save;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);void 0!==a.data.itemId&&void 0!==a.data.nextActionId&&g({actionId:a.data.nextActionId,itemId:a.data.itemId},\n-\"account\")})}},n={refreshTab:!0,show:function(a){e.info(\"appMgmt:show\");if(a.data(\"item-dst\")||void 0===a.data(\"activetab\"))e.info(a.data(\"activetab\")),n.refreshTab=!1;var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.show;b.method=\"get\";b.data={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),activeTab:a.data(\"activetab\"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==b.status?c.msg.out(b):l(a,b.data.html)})},\"delete\":function(a){e.info(\"appMgmt:delete\");var b=\n-'<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[12]+\"</p></div>\",d=a.data(\"selection\"),h=[];if(d&&($(d).find(\".is-selected\").each(function(a,c){var b=$(this);h.push(b.data(\"item-id\"))}),0===h.length))return;showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data={itemId:d?h:a.data(\"item-id\"),\n-actionId:a.data(\"action-id\"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){c.msg.out(b);a.data(\"nextaction-id\")&&g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})}}})},save:function(a){e.info(\"appMgmt:save\");var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&(b=a.data(\"activetab\"),!0===n.refreshTab&&void 0!==b&&g({actionId:a.data(\"nextaction-id\"),itemId:b}),$.magnificPopup.close())})},\n-search:function(a){e.info(\"appMgmt:search\");var b=$(a.data(\"target\")),d=c.appRequests().getRequestOpts();d.url=f.appMgmt.search;d.method=\"get\";d.data=a.serialize();c.appRequests().getActionCall(d,function(a){0===a.status?b.html(a.data.html):b.html(c.msg.html.error(a.description));c.sk.set(a.csrf)})},nav:function(a){e.info(\"appMgmt:nav\");var b=$(\"#\"+a.data(\"action-form\"));b.find(\"[name='start']\").val(a.data(\"start\"));b.find(\"[name='count']\").val(a.data(\"count\"));b.find(\"[name='sk']\").val(c.sk.get());\n-n.search(b)},ldapSync:function(a){e.info(\"appMgmt:ldapSync\");var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[57]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data={actionId:a.data(\"action-id\"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}}})}};\n-return{doAction:g,appMgmt:n,account:m,file:{view:function(a){e.info(\"file:view\");var b=c.appRequests().getRequestOpts();b.url=f.file;b.type=\"html\";b.data={fileId:a.data(\"item-id\"),sk:c.sk.get(),actionId:a.data(\"action-id\")};c.appRequests().getActionCall(b,function(b){void 0!==b.status&&1===b.status?c.msg.out(b):b?t(a,b):c.msg.error(c.config().LANG[14])})},download:function(a){e.info(\"file:download\");a={fileId:a.data(\"item-id\"),sk:c.sk.get(),actionId:a.data(\"action-id\")};$.fileDownload(c.config().APP_ROOT+\n-f.file,{httpMethod:\"POST\",data:a})},\"delete\":function(a){e.info(\"file:delete\");var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[15]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.file;b.data={fileId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get()};c.appRequests().getActionCall(b,function(a){c.msg.out(a);\n-0===a.status&&(a=$(\"#list-account-files\"),m.getfiles(a))})}}})}},checks:{ldap:function(a){e.info(\"checks:ldap\");a=$(a.data(\"src\"));a.find(\"[name='sk']\").val(c.sk.get());var b=c.appRequests().getRequestOpts();b.url=f.checks;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);var b=$(\"#ldap-results\");b.find(\".list-wrap\").html(c.appTheme().html.getList(a.data));b.show(\"slow\")})},wiki:function(a){e.info(\"checks:wiki\");a=$(a.data(\"src\"));a.find(\"[name='sk']\").val(c.sk.get());\n-var b=c.appRequests().getRequestOpts();b.url=f.checks;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0===a.status&&$(\"#dokuWikiResCheck\").html(a.data)})}},config:r,main:q,user:{savePreferences:function(a){e.info(\"user:savePreferences\");var b=c.appRequests().getRequestOpts();b.url=f.user.savePreferences;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);setTimeout(function(){c.redirect(\"index.php\")},2E3)})},saveSecurity:function(a){e.info(\"user:saveSecurity\");\n-var b=c.appRequests().getRequestOpts();b.url=f.user.savePreferences;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})},password:function(a){e.info(\"user:password\");var b=c.appRequests().getRequestOpts();b.type=\"html\";b.method=\"get\";b.url=f.user.password;b.data={actionId:a.data(\"action-id\"),itemId:a.data(\"item-id\"),sk:a.data(\"sk\"),isAjax:1};c.appRequests().getActionCall(b,function(c){0===c.length?q.logout():\n-l(a,c)})},passreset:function(a){e.info(\"user:passreset\");var b=c.appRequests().getRequestOpts();b.url=f.user.passreset;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0==a.status&&setTimeout(function(){c.redirect(\"index.php\")},1E3)})}},link:{save:function(a){e.info(\"link:save\");var b=c.appRequests().getRequestOpts();b.url=f.link;b.data={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get(),isAjax:1};var d='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[48]+\n-\"</p></div>\";showDialog({text:d,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}},positive:{title:c.config().LANG[43],onClick:function(d){d.preventDefault();b.data.notify=1;c.appRequests().getActionCall(b,function(b){c.msg.out(b);g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"item-id\")})})}}})},refresh:function(a){e.info(\"link:refresh\");var b={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get(),\n-activeTab:a.data(\"activetab\")},d=c.appRequests().getRequestOpts();d.url=f.link;d.data=b;c.appRequests().getActionCall(d,function(b){c.msg.out(b);0===b.status&&g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})}},eventlog:{nav:function(a){if(void 0===a.data(\"start\"))return!1;var b=c.appRequests().getRequestOpts();b.url=f.eventlog;b.method=\"get\";b.type=\"html\";b.data={actionId:a.data(\"action-id\"),sk:c.sk.get(),isAjax:1,start:a.data(\"start\"),count:a.data(\"count\"),current:a.data(\"current\")};\n-c.appRequests().getActionCall(b,function(a){$(\"#content\").html(a);c.scrollUp()})},clear:function(a){var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[20]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();b=c.appRequests().getRequestOpts();b.url=f.eventlog;b.method=\"get\";b.data={clear:1,sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,\n-function(b){c.msg.out(b);0==b.status&&g({actionId:a.data(\"nextaction-id\")})})}}})}},ajaxUrl:f,plugin:{toggle:function(a){e.info(\"plugin:enable\");a={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get(),activeTab:a.data(\"activetab\")};var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data=a;c.appRequests().getActionCall(b,function(a){c.msg.out(a);0===a.status&&setTimeout(function(){c.redirect(\"index.php\")},2E3)})},reset:function(a){e.info(\"plugin:reset\");var b='<div id=\"alert\"><p id=\"alert-text\">'+\n-c.config().LANG[58]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();b={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get(),activeTab:a.data(\"activetab\")};var d=c.appRequests().getRequestOpts();d.url=f.appMgmt.save;d.data=b;c.appRequests().getActionCall(d,function(a){c.msg.out(a)})}}})}},notice:{check:function(a){e.info(\"notice:check\");\n-var b={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get()},d=c.appRequests().getRequestOpts();d.url=f.appMgmt.save;d.data=b;c.appRequests().getActionCall(d,function(b){c.msg.out(b);0===b.status&&g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})},search:function(a){e.info(\"notice:search\");var b=$(a.data(\"target\")),d=c.appRequests().getRequestOpts();d.url=f.notice.search;d.method=\"get\";d.data=a.serialize();c.appRequests().getActionCall(d,function(a){0===a.status?b.html(a.data.html):\n-b.html(c.msg.html.error(a.description));c.sk.set(a.csrf)})},show:function(a){e.info(\"notice:show\");var b=c.appRequests().getRequestOpts();b.url=f.notice.show;b.method=\"get\";b.data={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),activeTab:a.data(\"activetab\"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==b.status?c.msg.out(b):l(a,b.data.html)})}},wiki:{show:function(a){e.info(\"wiki:show\");var b=c.appRequests().getRequestOpts();b.url=f.wiki.show;b.method=\"get\";b.data=\n-{pageName:a.data(\"pagename\"),actionId:a.data(\"action-id\"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==b.status?c.msg.out(b):l(a,b.data.html)})}},items:p}};\n+sysPass.Actions=function(c){var d=c.log,k=0,f={doAction:\"/ajax/ajax_getContent.php\",updateItems:\"/ajax/ajax_getItems.php\",user:{savePreferences:\"/ajax/ajax_userPrefsSave.php\",password:\"/ajax/ajax_usrpass.php\",passreset:\"/ajax/ajax_passReset.php\"},main:{login:\"/ajax/ajax_doLogin.php\",install:\"/ajax/ajax_install.php\",upgrade:\"/ajax/ajax_upgrade.php\",getUpdates:\"/ajax/ajax_checkUpds.php\",task:\"/ajax/ajax_task.php\"},checks:\"/ajax/ajax_checkConnection.php\",config:{save:\"/ajax/ajax_configSave.php\",\"export\":\"/ajax/ajax_configSave.php\",\n+\"import\":\"/ajax/ajax_configSave.php\"},file:\"/ajax/ajax_filesMgmt.php\",link:\"/ajax/ajax_itemSave.php\",plugin:\"/ajax/ajax_itemSave.php\",account:{save:\"/ajax/ajax_itemSave.php\",saveFavorite:\"/ajax/ajax_itemSave.php\",request:\"/ajax/ajax_itemSave.php\",getFiles:\"/ajax/ajax_accGetFiles.php\",search:\"/ajax/ajax_accSearch.php\"},appMgmt:{show:\"/ajax/ajax_itemShow.php\",save:\"/ajax/ajax_itemSave.php\",search:\"/ajax/ajax_itemSearch.php\"},eventlog:\"/ajax/ajax_eventlog.php\",wiki:{show:\"/ajax/ajax_wiki.php\"},notice:{show:\"/ajax/ajax_noticeShow.php\",\n+search:\"/ajax/ajax_noticeSearch.php\"}},g=function(a,b){var e={actionId:a.actionId,itemId:\"undefined\"!==a.itemId?a.itemId:0,isAjax:1},h=c.appRequests().getRequestOpts();h.url=f.doAction;h.method=\"get\";h.type=\"html\";h.addHistory=!0;h.data=e;c.appRequests().getActionCall(h,function(c){var a=$(\"#content\");a.empty().html(c);c=sysPassApp.triggers().views;c.common(a);if(void 0!==b&&\"function\"===typeof c[b])c[b]();a=$(\".mdl-layout__content\");0<a.scrollTop()&&a.animate({scrollTop:0},1E3)})},l=function(a,b){$.magnificPopup.open({items:{src:b,\n+type:\"inline\"},callbacks:{open:function(){var a=$(\"#box-popup\");c.appTriggers().views.common(a);a.find(\":input:text:visible:first\").focus()},close:function(){a.data(\"item-dst\")&&p.update(a)}},showCloseBtn:!1})},r=function(a,b){var e=$('<div id=\"box-popup\" class=\"image\">'+b+\"</div>\"),h=e.find(\"img\");if(0===h.length)return l(a,b);h.hide();$.magnificPopup.open({items:{src:e,type:\"inline\"},callbacks:{open:function(){var a=this;h.on(\"click\",function(){a.close()});setTimeout(function(){var a=c.resizeImage(h);\n+e.css({backgroundColor:\"#fff\",width:a.width,height:\"auto\"});h.show(\"slow\")},500)}}})},p={get:function(a){d.info(\"items:get\");var b=a[0].selectize;b.clearOptions();b.load(function(e){var h=c.appRequests().getRequestOpts();h.url=f.updateItems;h.method=\"get\";h.cache=!0;h.data={sk:a.data(\"sk\"),itemType:a.data(\"item-type\"),itemId:a.data(\"item-id\")};c.appRequests().getActionCall(h,function(h){e(h.data);b.setValue(a.data(\"selected-id\"),!0);c.appTriggers().updateFormHash()})})},update:function(a){d.info(\"items:update\");\n+var b=$(\"#\"+a.data(\"item-dst\"))[0].selectize;b.clearOptions();b.load(function(e){var b=c.appRequests().getRequestOpts();b.url=f.updateItems;b.method=\"get\";b.data={sk:c.sk.get(),itemType:a.data(\"item-type\")};c.appRequests().getActionCall(b,function(a){e(a.data)})})}},q={logout:function(){var a=window.location.search;c.redirect(0<a.length?\"index.php\"+a+\"&logout=1\":\"index.php?logout=1\")},login:function(a){d.info(\"main:login\");var b=c.appRequests().getRequestOpts();b.url=f.main.login;b.method=\"get\";b.data=\n+a.serialize();c.appRequests().getActionCall(b,function(e){var b=$(\".extra-hidden\");switch(e.status){case 0:c.redirect(e.data.url);break;case 2:c.msg.out(e);a.find(\"input[type='text'],input[type='password']\").val(\"\");a.find(\"input:first\").focus();0<b.length&&b.hide();$(\"#mpass\").prop(\"disabled\",!1).val(\"\");$(\"#smpass\").show();break;case 5:c.msg.out(e);a.find(\"input[type='text'],input[type='password']\").val(\"\");a.find(\"input:first\").focus();0<b.length&&b.hide();$(\"#oldpass\").prop(\"disabled\",!1).val(\"\");\n+$(\"#soldpass\").show();break;default:c.msg.out(e),a.find(\"input[type='text'],input[type='password']\").val(\"\"),a.find(\"input:first\").focus()}})},install:function(a){d.info(\"main:install\");var b=c.appRequests().getRequestOpts();b.url=f.main.install;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0==a.status&&setTimeout(function(){c.redirect(\"index.php\")},1E3)})},upgrade:function(a){d.info(\"main:upgrade\");var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[59]+\"</p></div>\";\n+showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=a.find(\"input[name='useTask']\");var e=$(\"#taskStatus\");e.empty().html(c.config().LANG[62]);if(0<b.length&&1==b.val()){b=c.appRequests().getRequestOpts();b.url=f.main.task;b.data={source:a.find(\"input[name='lock']\").val(),taskId:a.find(\"input[name='taskId']\").val()};var d=c.appRequests().getActionEvent(b,function(a){a=\n+a.task+\" - \"+a.message+\" - \"+a.time+\" - \"+a.progress+\"%\";a+=\"<br>\"+c.config().LANG[62];e.empty().html(a)})}b=c.appRequests().getRequestOpts();b.url=f.main.upgrade;b.method=\"get\";b.useFullLoading=!0;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0!==b.status?a.find(\":input[name=h]\").val(\"\"):(void 0!==d&&d.close(),setTimeout(function(){c.redirect(\"index.php\")},5E3))})}}})},getUpdates:function(a){d.info(\"main:getUpdates\");a=c.appRequests().getRequestOpts();a.url=f.main.getUpdates;\n+a.type=\"html\";a.method=\"get\";a.timeout=1E4;a.useLoading=!1;a.data={isAjax:1};c.appRequests().getActionCall(a,function(a){$(\"#updates\").html(a);\"undefined\"!==typeof componentHandler&&componentHandler.upgradeDom()},function(){$(\"#updates\").html(\"!\")})}},m={show:function(a){d.info(\"account:show\");g({actionId:a.data(\"action-id\"),itemId:a.data(\"item-id\")},\"account\")},showHistory:function(a){d.info(\"account:showHistory\");g({actionId:a.data(\"action-id\"),itemId:a.val()},\"account\")},edit:function(a){d.info(\"account:edit\");\n+g({actionId:a.data(\"action-id\"),itemId:a.data(\"item-id\")},\"account\")},\"delete\":function(a){d.info(\"account:delete\");var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[3]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.account.save;b.data={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get()};\n+c.appRequests().getActionCall(b,function(a){c.msg.out(a);m.search()})}}})},showpass:function(a){d.info(\"account:showpass\");var b=a.data(\"parent-id\"),e=c.appRequests().getRequestOpts();e.url=f.appMgmt.show;e.method=\"get\";e.data={itemId:0==b?a.data(\"item-id\"):b,actionId:a.data(\"action-id\"),isHistory:a.data(\"history\"),isLinked:0<b?1:0,isFull:1,sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(e,function(b){0!==b.status?c.msg.out(b):(b=$(b.data.html),l(a,b),b.on(\"mouseleave\",function(){clearTimeout(k);\n+k=setTimeout(function(){$.magnificPopup.close()},3E4)}).on(\"mouseenter\",function(){0!==k&&clearTimeout(k)}))})},copypass:function(a){d.info(\"account:copypass\");var b=a.data(\"parent-id\"),e=c.appRequests().getRequestOpts();e.url=f.appMgmt.show;e.method=\"get\";e.async=!1;e.data={itemId:0==b?a.data(\"item-id\"):b,actionId:a.data(\"action-id\"),isHistory:a.data(\"history\"),isFull:0,sk:c.sk.get(),isAjax:1};a=c.appRequests().getActionCall(e);void 0!==a.responseJSON.csrf&&c.sk.set(a.responseJSON.csrf);return a},\n+copy:function(a){d.info(\"account:copy\");g({actionId:a.data(\"action-id\"),itemId:a.data(\"item-id\")},\"account\")},savefavorite:function(a,b){d.info(\"account:saveFavorite\");var e=\"on\"===a.data(\"status\"),h={actionId:e?a.data(\"action-id-off\"):a.data(\"action-id-on\"),itemId:a.data(\"item-id\"),sk:c.sk.get(),isAjax:1},g=c.appRequests().getRequestOpts();g.url=f.account.saveFavorite;g.data=h;c.appRequests().getActionCall(g,function(h){c.msg.out(h);0===h.status&&(a.data(\"status\",e?\"off\":\"on\"),\"function\"===typeof b&&\n+b())})},request:function(a){d.info(\"account:request\");var b=c.appRequests().getRequestOpts();b.url=f.account.request;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a)})},menu:function(a){a.hide();a.parent().children(\".actions-optional\").show(250)},sort:function(a){d.info(\"account:sort\");var c=$(\"#frmSearch\");c.find('input[name=\"skey\"]').val(a.data(\"key\"));c.find('input[name=\"sorder\"]').val(a.data(\"dir\"));c.find('input[name=\"start\"]').val(a.data(\"start\"));m.search()},editpass:function(a){d.info(\"account:editpass\");\n+var c=a.data(\"parent-id\");g({actionId:a.data(\"action-id\"),itemId:0==c?a.data(\"item-id\"):c},\"account\")},restore:function(a){d.info(\"account:restore\");m.save(a)},getfiles:function(a){d.info(\"account:getfiles\");var b=c.appRequests().getRequestOpts();b.method=\"get\";b.type=\"html\";b.url=f.account.getFiles;b.data={id:a.data(\"item-id\"),del:a.data(\"delete\"),sk:c.sk.get()};c.appRequests().getActionCall(b,function(c){a.html(c)})},search:function(a){d.info(\"account:search\");var b=$(\"#frmSearch\");b.find(\"input[name='sk']\").val(c.sk.get());\n+b.find(\"input[name='skey']\").val();b.find(\"input[name='sorder']\").val();void 0!==a&&b.find(\"input[name='start']\").val(0);a=c.appRequests().getRequestOpts();a.url=f.account.search;a.method=\"get\";a.data=b.serialize();c.appRequests().getActionCall(a,function(a){10===a.status&&c.msg.out(a);c.sk.set(a.sk);$(\"#res-content\").empty().html(a.html)})},save:function(a){d.info(\"account:save\");var b=c.appRequests().getRequestOpts();b.url=f.account.save;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);\n+void 0!==a.data.itemId&&void 0!==a.data.nextActionId&&g({actionId:a.data.nextActionId,itemId:a.data.itemId},\"account\")})}},n={refreshTab:!0,show:function(a){d.info(\"appMgmt:show\");if(a.data(\"item-dst\")||void 0===a.data(\"activetab\"))d.info(a.data(\"activetab\")),n.refreshTab=!1;var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.show;b.method=\"get\";b.data={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),activeTab:a.data(\"activetab\"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==\n+b.status?c.msg.out(b):l(a,b.data.html)})},\"delete\":function(a){d.info(\"appMgmt:delete\");var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[12]+\"</p></div>\",e=a.data(\"selection\"),h=[];if(e&&($(e).find(\".is-selected\").each(function(a,c){var b=$(this);h.push(b.data(\"item-id\"))}),0===h.length))return;showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();\n+b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data={itemId:e?h:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){c.msg.out(b);a.data(\"nextaction-id\")&&g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})}}})},save:function(a){d.info(\"appMgmt:save\");var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&(b=a.data(\"activetab\"),\n+!0===n.refreshTab&&void 0!==b&&g({actionId:a.data(\"nextaction-id\"),itemId:b}),$.magnificPopup.close())})},search:function(a){d.info(\"appMgmt:search\");var b=$(a.data(\"target\")),e=c.appRequests().getRequestOpts();e.url=f.appMgmt.search;e.method=\"get\";e.data=a.serialize();c.appRequests().getActionCall(e,function(a){0===a.status?b.html(a.data.html):b.html(c.msg.html.error(a.description));c.sk.set(a.csrf)})},nav:function(a){d.info(\"appMgmt:nav\");var b=$(\"#\"+a.data(\"action-form\"));b.find(\"[name='start']\").val(a.data(\"start\"));\n+b.find(\"[name='count']\").val(a.data(\"count\"));b.find(\"[name='sk']\").val(c.sk.get());n.search(b)},ldapSync:function(a){d.info(\"appMgmt:ldapSync\");var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[57]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data={actionId:a.data(\"action-id\"),sk:c.sk.get(),\n+isAjax:1};c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}}})}};return{doAction:g,appMgmt:n,account:m,file:{view:function(a){d.info(\"file:view\");var b=c.appRequests().getRequestOpts();b.url=f.file;b.type=\"html\";b.data={fileId:a.data(\"item-id\"),sk:c.sk.get(),actionId:a.data(\"action-id\")};c.appRequests().getActionCall(b,function(b){void 0!==b.status&&1===b.status?c.msg.out(b):b?r(a,b):c.msg.error(c.config().LANG[14])})},download:function(a){d.info(\"file:download\");a={fileId:a.data(\"item-id\"),\n+sk:c.sk.get(),actionId:a.data(\"action-id\")};$.fileDownload(c.config().APP_ROOT+f.file,{httpMethod:\"POST\",data:a})},\"delete\":function(a){d.info(\"file:delete\");var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[15]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b=c.appRequests().getRequestOpts();b.url=f.file;b.data={fileId:a.data(\"item-id\"),\n+actionId:a.data(\"action-id\"),sk:c.sk.get()};c.appRequests().getActionCall(b,function(a){c.msg.out(a);0===a.status&&(a=$(\"#list-account-files\"),m.getfiles(a))})}}})}},checks:{ldap:function(a){d.info(\"checks:ldap\");a=$(a.data(\"src\"));a.find(\"[name='sk']\").val(c.sk.get());var b=c.appRequests().getRequestOpts();b.url=f.checks;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);var b=$(\"#ldap-results\");b.find(\".list-wrap\").html(c.appTheme().html.getList(a.data));b.show(\"slow\")})},\n+wiki:function(a){d.info(\"checks:wiki\");a=$(a.data(\"src\"));a.find(\"[name='sk']\").val(c.sk.get());var b=c.appRequests().getRequestOpts();b.url=f.checks;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0===a.status&&$(\"#dokuWikiResCheck\").html(a.data)})}},config:{save:function(a){d.info(\"config:save\");var b=c.appRequests().getRequestOpts();b.url=f.config.save;b.data=a.serialize();\"masterpass\"===a.data(\"type\")&&(b.useFullLoading=!0);c.appRequests().getActionCall(b,function(b){c.msg.out(b);\n+0===b.status&&(void 0!==a.data(\"nextaction-id\")?g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")}):void 0!==a.data(\"reload\")&&setTimeout(function(){c.redirect(\"index.php\")},2E3))})},masterpass:function(a){var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[59]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(b){b.preventDefault();c.msg.error(c.config().LANG[44]);a.find(\":input[type=password]\").val(\"\")}},positive:{title:c.config().LANG[43],\n+onClick:function(b){b=a.find(\"input[name='useTask']\");var e=$(\"#taskStatus\");e.empty().html(c.config().LANG[62]);if(0<b.length&&1==b.val()){b=c.appRequests().getRequestOpts();b.url=f.main.task;b.data={source:a.find(\"input[name='lock']\").val(),taskId:a.find(\"input[name='taskId']\").val()};var d=c.appRequests().getActionEvent(b,function(a){a=a.task+\" - \"+a.message+\" - \"+a.time+\" - \"+a.progress+\"%\";a+=\"<br>\"+c.config().LANG[62];e.empty().html(a)})}b=c.appRequests().getRequestOpts();b.url=f.config.save;\n+b.useFullLoading=!0;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);a.find(\":input[type=password]\").val(\"\");void 0!==d&&d.close()})}}})},backup:function(a){d.info(\"config:backup\");var b=c.appRequests().getRequestOpts();b.url=f.config[\"export\"];b.method=\"post\";b.useFullLoading=!0;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&void 0!==a.data(\"nextaction-id\")&&g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})},\n+\"export\":function(a){d.info(\"config:export\");var b=c.appRequests().getRequestOpts();b.url=f.config[\"export\"];b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&void 0!==a.data(\"nextaction-id\")&&g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})},\"import\":function(a){d.info(\"config:import\");var b=c.appRequests().getRequestOpts();b.url=f.config[\"import\"];b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);0===b.status&&\n+void 0!==a.data(\"nextaction-id\")&&g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})},refreshMpass:function(a){d.info(\"config:import\");var b=c.appRequests().getRequestOpts();b.url=f.config.save;b.data={actionId:a.data(\"action-id\"),itemId:a.data(\"item-id\"),sk:a.data(\"sk\"),isAjax:1};c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}},main:q,user:{savePreferences:function(a){d.info(\"user:savePreferences\");var b=c.appRequests().getRequestOpts();b.url=f.user.savePreferences;b.data=\n+a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);setTimeout(function(){c.redirect(\"index.php\")},2E3)})},saveSecurity:function(a){d.info(\"user:saveSecurity\");var b=c.appRequests().getRequestOpts();b.url=f.user.savePreferences;b.data=a.serialize();c.appRequests().getActionCall(b,function(b){c.msg.out(b);g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})},password:function(a){d.info(\"user:password\");var b=c.appRequests().getRequestOpts();b.type=\"html\";b.method=\"get\";\n+b.url=f.user.password;b.data={actionId:a.data(\"action-id\"),itemId:a.data(\"item-id\"),sk:a.data(\"sk\"),isAjax:1};c.appRequests().getActionCall(b,function(b){0===b.length?q.logout():l(a,b)})},passreset:function(a){d.info(\"user:passreset\");var b=c.appRequests().getRequestOpts();b.url=f.user.passreset;b.data=a.serialize();c.appRequests().getActionCall(b,function(a){c.msg.out(a);0==a.status&&setTimeout(function(){c.redirect(\"index.php\")},1E3)})}},link:{save:function(a){d.info(\"link:save\");var b=c.appRequests().getRequestOpts();\n+b.url=f.link;b.data={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get(),isAjax:1};var e='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[48]+\"</p></div>\";showDialog({text:e,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.appRequests().getActionCall(b,function(a){c.msg.out(a)})}},positive:{title:c.config().LANG[43],onClick:function(e){e.preventDefault();b.data.notify=1;c.appRequests().getActionCall(b,function(b){c.msg.out(b);g({actionId:a.data(\"nextaction-id\"),\n+itemId:a.data(\"item-id\")})})}}})},refresh:function(a){d.info(\"link:refresh\");var b={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get(),activeTab:a.data(\"activetab\")},e=c.appRequests().getRequestOpts();e.url=f.link;e.data=b;c.appRequests().getActionCall(e,function(b){c.msg.out(b);0===b.status&&g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})}},eventlog:{nav:function(a){if(void 0===a.data(\"start\"))return!1;var b=c.appRequests().getRequestOpts();b.url=f.eventlog;b.method=\n+\"get\";b.type=\"html\";b.data={actionId:a.data(\"action-id\"),sk:c.sk.get(),isAjax:1,start:a.data(\"start\"),count:a.data(\"count\"),current:a.data(\"current\")};c.appRequests().getActionCall(b,function(a){$(\"#content\").html(a);c.scrollUp()})},clear:function(a){var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[20]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();\n+b=c.appRequests().getRequestOpts();b.url=f.eventlog;b.method=\"get\";b.data={clear:1,sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){c.msg.out(b);0==b.status&&g({actionId:a.data(\"nextaction-id\")})})}}})}},ajaxUrl:f,plugin:{toggle:function(a){d.info(\"plugin:enable\");a={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get(),activeTab:a.data(\"activetab\")};var b=c.appRequests().getRequestOpts();b.url=f.appMgmt.save;b.data=a;c.appRequests().getActionCall(b,function(a){c.msg.out(a);\n+0===a.status&&setTimeout(function(){c.redirect(\"index.php\")},2E3)})},reset:function(a){d.info(\"plugin:reset\");var b='<div id=\"alert\"><p id=\"alert-text\">'+c.config().LANG[58]+\"</p></div>\";showDialog({text:b,negative:{title:c.config().LANG[44],onClick:function(a){a.preventDefault();c.msg.error(c.config().LANG[44])}},positive:{title:c.config().LANG[43],onClick:function(b){b.preventDefault();b={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get(),activeTab:a.data(\"activetab\")};var e=c.appRequests().getRequestOpts();\n+e.url=f.appMgmt.save;e.data=b;c.appRequests().getActionCall(e,function(a){c.msg.out(a)})}}})}},notice:{check:function(a){d.info(\"notice:check\");var b={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),sk:c.sk.get()},e=c.appRequests().getRequestOpts();e.url=f.appMgmt.save;e.data=b;c.appRequests().getActionCall(e,function(b){c.msg.out(b);0===b.status&&g({actionId:a.data(\"nextaction-id\"),itemId:a.data(\"activetab\")})})},search:function(a){d.info(\"notice:search\");var b=$(a.data(\"target\")),e=c.appRequests().getRequestOpts();\n+e.url=f.notice.search;e.method=\"get\";e.data=a.serialize();c.appRequests().getActionCall(e,function(a){0===a.status?b.html(a.data.html):b.html(c.msg.html.error(a.description));c.sk.set(a.csrf)})},show:function(a){d.info(\"notice:show\");var b=c.appRequests().getRequestOpts();b.url=f.notice.show;b.method=\"get\";b.data={itemId:a.data(\"item-id\"),actionId:a.data(\"action-id\"),activeTab:a.data(\"activetab\"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==b.status?c.msg.out(b):l(a,b.data.html)})}},\n+wiki:{show:function(a){d.info(\"wiki:show\");var b=c.appRequests().getRequestOpts();b.url=f.wiki.show;b.method=\"get\";b.data={pageName:a.data(\"pagename\"),actionId:a.data(\"action-id\"),sk:c.sk.get(),isAjax:1};c.appRequests().getActionCall(b,function(b){0!==b.status?c.msg.out(b):l(a,b.data.html)})}},items:p}};"
        },
        {
          "filename": "js/app-main.js",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -87,6 +87,11 @@ sysPass.Main = function () {\n         },\n         warn: function (msg) {\n             console.warn(msg);\n+        },\n+        debug: function (msg) {\n+            if (config.DEBUG === true) {\n+                console.debug(msg);\n+            }\n         }\n     };\n \n@@ -184,7 +189,7 @@ sysPass.Main = function () {\n                         msg.sticky(description);\n                         break;\n                     default:\n-                        return;\n+                        msg.error(description);\n                 }\n             }\n         },"
        },
        {
          "filename": "js/app-main.min.js",
          "status": "modified",
          "additions": 16,
          "deletions": 16,
          "patch": "@@ -4,19 +4,19 @@ $jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.\n $jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.array=$jscomp.array||{};$jscomp.iteratorFromArray=function(a,g){$jscomp.initSymbolIterator();a instanceof String&&(a+=\"\");var f=0,c={next:function(){if(f<a.length){var e=f++;return{value:g(e,a[e]),done:!1}}c.next=function(){return{done:!0,value:void 0}};return c.next()}};c[Symbol.iterator]=function(){return c};return c};\n $jscomp.polyfill=function(a,g,f,c){if(g){f=$jscomp.global;a=a.split(\".\");for(c=0;c<a.length-1;c++){var e=a[c];e in f||(f[e]={});f=f[e]}a=a[a.length-1];c=f[a];g=g(c);g!=c&&null!=g&&$jscomp.defineProperty(f,a,{configurable:!0,writable:!0,value:g})}};$jscomp.polyfill(\"Array.prototype.keys\",function(a){return a?a:function(){return $jscomp.iteratorFromArray(this,function(a){return a})}},\"es6-impl\",\"es3\");\n $jscomp.findInternal=function(a,g,f){a instanceof String&&(a=String(a));for(var c=a.length,e=0;e<c;e++){var m=a[e];if(g.call(f,m,e,a))return{i:e,v:m}}return{i:-1,v:void 0}};$jscomp.polyfill(\"Array.prototype.find\",function(a){return a?a:function(a,f){return $jscomp.findInternal(this,a,f).v}},\"es6-impl\",\"es3\");\n-sysPass.Main=function(){var a={APP_ROOT:\"\",LANG:[],PK:\"\",MAX_FILE_SIZE:1024,CRYPT:new JSEncrypt,CHECK_UPDATES:!1,TIMEZONE:\"\",LOCALE:\"\",DEBUG:\"\"},g={passLength:0,minPasswordLength:8,complexity:{numbers:!0,symbols:!0,uppercase:!0,numlength:12}},f={},c={},e={},m={},q={},n={},k={log:function(b){!0===a.DEBUG&&console.log(b)},info:function(b){!0===a.DEBUG&&console.info(b)},error:function(b){console.error(b)},warn:function(b){console.warn(b)}};toastr.options={closeButton:!0,debug:!1,newestOnTop:!1,progressBar:!1,\n-positionClass:\"toast-top-center\",preventDuplicates:!1,onclick:null,showDuration:\"300\",hideDuration:\"1000\",timeOut:\"5000\",extendedTimeOut:\"1000\",showEasing:\"swing\",hideEasing:\"linear\",showMethod:\"fadeIn\",hideMethod:\"fadeOut\"};var w=function(){k.info(\"setupCallbacks\");var b=$(\"#container\").data(\"page\");if(\"\"!==b&&\"function\"===typeof c.views[b])c.views[b]();0<$(\"footer\").length&&c.views.footer();$(\"#btnBack\").click(function(){r(\"index.php\")});c.bodyHooks()},l={ok:function(b){toastr.success(b)},error:function(b){toastr.error(b)},\n-warn:function(b){toastr.warning(b)},info:function(b){toastr.info(b)},sticky:function(b,h){var d={timeOut:0};\"function\"===typeof h&&(d.onHidden=h);toastr.warning(b,a.LANG[60],d)},out:function(b){if(\"object\"===typeof b){var a=b.status,d=b.description;void 0!==b.messages&&0<b.messages.length&&(d=d+\"<br>\"+b.messages.join(\"<br>\"));switch(a){case 0:l.ok(d);break;case 1:case 2:case 4:l.error(d);break;case 3:l.warn(d);break;case 10:e.main.logout();break;case 100:l.ok(d),l.sticky(d)}}},html:{error:function(b){return'<p class=\"error round\">Oops...<br>'+\n-a.LANG[1]+\"<br>\"+b+\"</p>\"}}},x=function(b){k.info(\"getEnvironment\");var h=window.location.pathname.split(\"/\");a.APP_ROOT=window.location.protocol+\"//\"+window.location.host+function(){for(var b=\"\",a=1;a<=h.length-2;a++)b+=\"/\"+h[a];return b}();var d=m.getRequestOpts();d.url=\"/ajax/ajax_getEnvironment.php\";d.method=\"get\";d.async=!1;d.useLoading=!1;d.data={isAjax:1};m.getActionCall(d,function(d){a.LANG=d.lang;a.PK=d.pk;a.CHECK_UPDATES=d.check_updates;a.CRYPT.setPublicKey(d.pk);a.TIMEZONE=d.timezone;a.LOCALE=\n-d.locale;a.DEBUG=d.debug;a.MAX_FILE_SIZE=parseInt(d.max_file_size);\"function\"===typeof b&&b()})},t={get:function(){k.info(\"sk:get\");return $(\"#container\").attr(\"data-sk\")},set:function(a){k.info(\"sk:set\");$(\"#container\").attr(\"data-sk\",a)}},y=function(){var a=$(\"#container\");if(!a.hasClass(\"content-no-auto-resize\")){var h=$(\"#content\").height()+200;a.css(\"height\",h)}},z=function(){$(\"html, body\").animate({scrollTop:0},\"slow\")},A=function(a){for(var b=[],d,c=window.location.href.slice(window.location.href.indexOf(\"?\")+\n-1).split(\"&\"),f=0;f<c.length;f++)d=c[f].split(\"=\"),b.push(d[0]),b[d[0]]=d[1];return void 0!==a&&void 0!==b[a]?b[a]:b},B=function(){k.info(\"checkLogout\");1===parseInt(A(\"logout\"))&&l.sticky(a.LANG[61],function(){r(\"index.php\")})},r=function(a){window.location.replace(a)},C=function(b){var h={actionId:b.data(\"action-id\"),itemId:b.data(\"item-id\"),sk:t.get()},d={requestDoneAction:\"\",setRequestData:function(a){$.extend(h,a)},getRequestData:function(){return h},beforeSendAction:\"\",url:\"\"},f=function(a){if(void 0===\n-d.url||\"\"===d.url)return!1;var b=new FormData;b.append(\"inFile\",a);b.append(\"isAjax\",1);h.sk=t.get();Object.keys(h).forEach(function(a){b.append(a,h[a])});a=m.getRequestOpts();a.url=d.url;a.processData=!1;a.contentType=!1;a.data=b;m.getActionCall(a,function(a){var b=a.status;a=a.description;0===b?(\"function\"===typeof d.requestDoneAction&&d.requestDoneAction(),l.ok(a)):10===b?e.main.logout():l.error(a)})},c=function(d){if(5<d.length)l.error(a.LANG[17]+\" (Max: 5)\");else for(var h=0;h<d.length;h++){var p=\n-d[h];if(p.size/1E3>a.MAX_FILE_SIZE)l.error(a.LANG[18]+\"<br>\"+p.name+\" (Max: \"+a.MAX_FILE_SIZE+\")\");else{var c;a:{c=p.name;for(var g=b.data(\"files-ext\").toLowerCase().split(\",\"),e=0;e<=g.length;e++)if(-1!==c.indexOf(g[e])){c=!0;break a}c=!1}c?f(d[h]):l.error(a.LANG[19]+\"<br>\"+p.name)}}},g=function(a){var b=$(\"#fileUploadForm\");!1===a&&b.hide();a=b.find(\"input[type='file']\");a.on(\"change\",function(){\"function\"===typeof d.beforeSendAction&&d.beforeSendAction();c(this.files)});return a};window.File&&\n-window.FileList&&window.FileReader?function(){k.info(\"fileUpload:init\");var a=g(!1);b.on(\"dragover dragenter\",function(a){k.info(\"fileUpload:drag\");a.stopPropagation();a.preventDefault()});b.on(\"drop\",function(a){k.info(\"fileUpload:drop\");a.stopPropagation();a.preventDefault();\"function\"===typeof d.beforeSendAction&&d.beforeSendAction();c(a.originalEvent.dataTransfer.files)});b.on(\"click\",function(){a.click()})}():g(!0);return d},D=function(a){k.info(\"checkPassLevel\");g.passLength=a.val().length;\n-v(zxcvbn(a.val()),a)},v=function(b,h){k.info(\"outputResult\");var d=$(\".passLevel-\"+h.attr(\"id\")),c=b.score;d.show();d.removeClass(\"weak good strong strongest\");0===g.passLength?d.attr(\"title\",\"\").empty():g.passLength<g.minPasswordLength?d.attr(\"title\",a.LANG[11]).addClass(\"weak\"):0===c?d.attr(\"title\",a.LANG[9]+\" - \"+b.feedback.warning).addClass(\"weak\"):1===c||2===c?d.attr(\"title\",a.LANG[8]+\" - \"+b.feedback.warning).addClass(\"good\"):3===c?d.attr(\"title\",a.LANG[7]).addClass(\"strong\"):4===c&&d.attr(\"title\",\n-a.LANG[10]).addClass(\"strongest\")},E=function(b){$(b).find(\".checkbox\").button({icons:{primary:\"ui-icon-transferthick-e-w\"}}).click(function(){var b=$(this);!0===b.prop(\"checked\")?b.button(\"option\",\"label\",a.LANG[40]):b.button(\"option\",\"label\",a.LANG[41])})},u=function(b){k.info(\"encryptFormValue\");var c=b.val();\"\"!==c&&parseInt(b.attr(\"data-length\"))!==c.length&&(c=a.CRYPT.encrypt(c),b.val(c),b.attr(\"data-length\",c.length))},F=function(){k.info(\"initializeClipboard\");var b=new Clipboard(\".clip-pass-button\",\n-{text:function(a){return e.account.copypass($(a)).responseJSON.data.accpass}});b.on(\"success\",function(b){l.ok(a.LANG[45])});b.on(\"error\",function(b){l.error(a.LANG[46])});var b=new Clipboard(\".dialog-clip-pass-button\"),c=new Clipboard(\".dialog-clip-user-button\");b.on(\"success\",function(a){$(\".dialog-user-text\").removeClass(\"dialog-clip-copy\");$(\".dialog-pass-text\").addClass(\"dialog-clip-copy\");a.clearSelection()});c.on(\"success\",function(a){$(\".dialog-pass-text\").removeClass(\"dialog-clip-copy\");\n-$(\".dialog-user-text\").addClass(\"dialog-clip-copy\");a.clearSelection()});(new Clipboard(\".clip-pass-icon\")).on(\"success\",function(b){l.ok(a.LANG[45]);b.clearSelection()})},G=function(){k.info(\"bindPassEncrypt\");$(\"body\").on(\"blur\",\":input[type=password]\",function(a){a=$(this);a.hasClass(\"passwordfield__no-pki\")||u(a)}).on(\"keypress\",\":input[type=password]\",function(a){13===a.keyCode&&(a.preventDefault(),a=$(this),u(a),a.closest(\"form\").submit())})},H=function(a,c){console.info(\"Eval: \"+a);if(\"function\"===\n-typeof a)a(c);else throw Error(\"Function not found: \"+a);},I=function(a){k.info(\"resizeImage\");var b=.9*$(window).width(),d=.9*$(window).height(),c={width:a.width(),height:a.height()},f={calc:0,main:0,secondary:0,factor:.9,rel:c.width/c.height},g=function(a){a.main>a.secondary?a.calc=a.main/a.rel:a.main<a.secondary&&(a.calc=a.main*a.rel);a.calc>a.secondary&&(a.main*=a.factor,g(a));return a},e=function(){f.main=b;f.secondary=d;var e=g(f);a.css({width:e.main,height:e.calc});c.width=e.main;c.height=\n-e.calc},l=function(){f.main=d;f.secondary=b;var e=g(f);a.css({width:e.calc,height:e.main});c.width=e.calc;c.height=e.main};c.width>b?e():c.height>d&&(k.info(\"height\"),l());return c},J=function(){return $.extend({log:k,config:function(){return a},appTheme:function(){return f},appActions:function(){return e},appTriggers:function(){return c},appRequests:function(){return m},evalAction:H,resizeImage:I},q)},K=function(){return{actions:function(){return e},triggers:function(){return c},theme:function(){return f},\n-sk:t,msg:l,log:k,passToClip:0,passwordData:g,outputResult:v,checkboxDetect:E,checkPassLevel:D,encryptFormValue:u,fileUpload:C,redirect:r,scrollUp:z,setContentSize:y}};(function(){k.info(\"init\");q=K();n=J();c=sysPass.Triggers(n);e=sysPass.Actions(n);m=sysPass.Requests(n);x(function(){\"\"!==a.PK&&G();\"function\"===typeof sysPass.Theme&&(f=sysPass.Theme(n));!0===a.CHECK_UPDATES&&e.main.getUpdates();F();w();B()})})();return q};\n+sysPass.Main=function(){var a={APP_ROOT:\"\",LANG:[],PK:\"\",MAX_FILE_SIZE:1024,CRYPT:new JSEncrypt,CHECK_UPDATES:!1,TIMEZONE:\"\",LOCALE:\"\",DEBUG:\"\"},g={passLength:0,minPasswordLength:8,complexity:{numbers:!0,symbols:!0,uppercase:!0,numlength:12}},f={},c={},e={},m={},q={},n={},h={log:function(b){!0===a.DEBUG&&console.log(b)},info:function(b){!0===a.DEBUG&&console.info(b)},error:function(b){console.error(b)},warn:function(b){console.warn(b)},debug:function(b){!0===a.DEBUG&&console.debug(b)}};toastr.options=\n+{closeButton:!0,debug:!1,newestOnTop:!1,progressBar:!1,positionClass:\"toast-top-center\",preventDuplicates:!1,onclick:null,showDuration:\"300\",hideDuration:\"1000\",timeOut:\"5000\",extendedTimeOut:\"1000\",showEasing:\"swing\",hideEasing:\"linear\",showMethod:\"fadeIn\",hideMethod:\"fadeOut\"};var w=function(){h.info(\"setupCallbacks\");var b=$(\"#container\").data(\"page\");if(\"\"!==b&&\"function\"===typeof c.views[b])c.views[b]();0<$(\"footer\").length&&c.views.footer();$(\"#btnBack\").click(function(){r(\"index.php\")});c.bodyHooks()},\n+l={ok:function(b){toastr.success(b)},error:function(b){toastr.error(b)},warn:function(b){toastr.warning(b)},info:function(b){toastr.info(b)},sticky:function(b,k){var d={timeOut:0};\"function\"===typeof k&&(d.onHidden=k);toastr.warning(b,a.LANG[60],d)},out:function(b){if(\"object\"===typeof b){var a=b.status,d=b.description;void 0!==b.messages&&0<b.messages.length&&(d=d+\"<br>\"+b.messages.join(\"<br>\"));switch(a){case 0:l.ok(d);break;case 1:case 2:case 4:l.error(d);break;case 3:l.warn(d);break;case 10:e.main.logout();\n+break;case 100:l.ok(d);l.sticky(d);break;default:l.error(d)}}},html:{error:function(b){return'<p class=\"error round\">Oops...<br>'+a.LANG[1]+\"<br>\"+b+\"</p>\"}}},x=function(b){h.info(\"getEnvironment\");var k=window.location.pathname.split(\"/\");a.APP_ROOT=window.location.protocol+\"//\"+window.location.host+function(){for(var b=\"\",a=1;a<=k.length-2;a++)b+=\"/\"+k[a];return b}();var d=m.getRequestOpts();d.url=\"/ajax/ajax_getEnvironment.php\";d.method=\"get\";d.async=!1;d.useLoading=!1;d.data={isAjax:1};m.getActionCall(d,\n+function(d){a.LANG=d.lang;a.PK=d.pk;a.CHECK_UPDATES=d.check_updates;a.CRYPT.setPublicKey(d.pk);a.TIMEZONE=d.timezone;a.LOCALE=d.locale;a.DEBUG=d.debug;a.MAX_FILE_SIZE=parseInt(d.max_file_size);\"function\"===typeof b&&b()})},t={get:function(){h.info(\"sk:get\");return $(\"#container\").attr(\"data-sk\")},set:function(b){h.info(\"sk:set\");$(\"#container\").attr(\"data-sk\",b)}},y=function(){var b=$(\"#container\");if(!b.hasClass(\"content-no-auto-resize\")){var a=$(\"#content\").height()+200;b.css(\"height\",a)}},z=function(){$(\"html, body\").animate({scrollTop:0},\n+\"slow\")},A=function(a){for(var b=[],d,c=window.location.href.slice(window.location.href.indexOf(\"?\")+1).split(\"&\"),f=0;f<c.length;f++)d=c[f].split(\"=\"),b.push(d[0]),b[d[0]]=d[1];return void 0!==a&&void 0!==b[a]?b[a]:b},B=function(){h.info(\"checkLogout\");1===parseInt(A(\"logout\"))&&l.sticky(a.LANG[61],function(){r(\"index.php\")})},r=function(a){window.location.replace(a)},C=function(b){var k={actionId:b.data(\"action-id\"),itemId:b.data(\"item-id\"),sk:t.get()},d={requestDoneAction:\"\",setRequestData:function(a){$.extend(k,\n+a)},getRequestData:function(){return k},beforeSendAction:\"\",url:\"\"},f=function(a){if(void 0===d.url||\"\"===d.url)return!1;var b=new FormData;b.append(\"inFile\",a);b.append(\"isAjax\",1);k.sk=t.get();Object.keys(k).forEach(function(a){b.append(a,k[a])});a=m.getRequestOpts();a.url=d.url;a.processData=!1;a.contentType=!1;a.data=b;m.getActionCall(a,function(a){var b=a.status;a=a.description;0===b?(\"function\"===typeof d.requestDoneAction&&d.requestDoneAction(),l.ok(a)):10===b?e.main.logout():l.error(a)})},\n+c=function(d){if(5<d.length)l.error(a.LANG[17]+\" (Max: 5)\");else for(var k=0;k<d.length;k++){var p=d[k];if(p.size/1E3>a.MAX_FILE_SIZE)l.error(a.LANG[18]+\"<br>\"+p.name+\" (Max: \"+a.MAX_FILE_SIZE+\")\");else{var c;a:{c=p.name;for(var g=b.data(\"files-ext\").toLowerCase().split(\",\"),e=0;e<=g.length;e++)if(-1!==c.indexOf(g[e])){c=!0;break a}c=!1}c?f(d[k]):l.error(a.LANG[19]+\"<br>\"+p.name)}}},g=function(a){var b=$(\"#fileUploadForm\");!1===a&&b.hide();a=b.find(\"input[type='file']\");a.on(\"change\",function(){\"function\"===\n+typeof d.beforeSendAction&&d.beforeSendAction();c(this.files)});return a};window.File&&window.FileList&&window.FileReader?function(){h.info(\"fileUpload:init\");var a=g(!1);b.on(\"dragover dragenter\",function(a){h.info(\"fileUpload:drag\");a.stopPropagation();a.preventDefault()});b.on(\"drop\",function(a){h.info(\"fileUpload:drop\");a.stopPropagation();a.preventDefault();\"function\"===typeof d.beforeSendAction&&d.beforeSendAction();c(a.originalEvent.dataTransfer.files)});b.on(\"click\",function(){a.click()})}():\n+g(!0);return d},D=function(a){h.info(\"checkPassLevel\");g.passLength=a.val().length;v(zxcvbn(a.val()),a)},v=function(b,k){h.info(\"outputResult\");var d=$(\".passLevel-\"+k.attr(\"id\")),c=b.score;d.show();d.removeClass(\"weak good strong strongest\");0===g.passLength?d.attr(\"title\",\"\").empty():g.passLength<g.minPasswordLength?d.attr(\"title\",a.LANG[11]).addClass(\"weak\"):0===c?d.attr(\"title\",a.LANG[9]+\" - \"+b.feedback.warning).addClass(\"weak\"):1===c||2===c?d.attr(\"title\",a.LANG[8]+\" - \"+b.feedback.warning).addClass(\"good\"):\n+3===c?d.attr(\"title\",a.LANG[7]).addClass(\"strong\"):4===c&&d.attr(\"title\",a.LANG[10]).addClass(\"strongest\")},E=function(b){$(b).find(\".checkbox\").button({icons:{primary:\"ui-icon-transferthick-e-w\"}}).click(function(){var b=$(this);!0===b.prop(\"checked\")?b.button(\"option\",\"label\",a.LANG[40]):b.button(\"option\",\"label\",a.LANG[41])})},u=function(b){h.info(\"encryptFormValue\");var c=b.val();\"\"!==c&&parseInt(b.attr(\"data-length\"))!==c.length&&(c=a.CRYPT.encrypt(c),b.val(c),b.attr(\"data-length\",c.length))},\n+F=function(){h.info(\"initializeClipboard\");var b=new Clipboard(\".clip-pass-button\",{text:function(a){return e.account.copypass($(a)).responseJSON.data.accpass}});b.on(\"success\",function(b){l.ok(a.LANG[45])});b.on(\"error\",function(b){l.error(a.LANG[46])});var b=new Clipboard(\".dialog-clip-pass-button\"),c=new Clipboard(\".dialog-clip-user-button\");b.on(\"success\",function(a){$(\".dialog-user-text\").removeClass(\"dialog-clip-copy\");$(\".dialog-pass-text\").addClass(\"dialog-clip-copy\");a.clearSelection()});\n+c.on(\"success\",function(a){$(\".dialog-pass-text\").removeClass(\"dialog-clip-copy\");$(\".dialog-user-text\").addClass(\"dialog-clip-copy\");a.clearSelection()});(new Clipboard(\".clip-pass-icon\")).on(\"success\",function(b){l.ok(a.LANG[45]);b.clearSelection()})},G=function(){h.info(\"bindPassEncrypt\");$(\"body\").on(\"blur\",\":input[type=password]\",function(a){a=$(this);a.hasClass(\"passwordfield__no-pki\")||u(a)}).on(\"keypress\",\":input[type=password]\",function(a){13===a.keyCode&&(a.preventDefault(),a=$(this),u(a),\n+a.closest(\"form\").submit())})},H=function(a,c){console.info(\"Eval: \"+a);if(\"function\"===typeof a)a(c);else throw Error(\"Function not found: \"+a);},I=function(a){h.info(\"resizeImage\");var b=.9*$(window).width(),d=.9*$(window).height(),c={width:a.width(),height:a.height()},f={calc:0,main:0,secondary:0,factor:.9,rel:c.width/c.height},g=function(a){a.main>a.secondary?a.calc=a.main/a.rel:a.main<a.secondary&&(a.calc=a.main*a.rel);a.calc>a.secondary&&(a.main*=a.factor,g(a));return a},e=function(){f.main=\n+b;f.secondary=d;var e=g(f);a.css({width:e.main,height:e.calc});c.width=e.main;c.height=e.calc},l=function(){f.main=d;f.secondary=b;var e=g(f);a.css({width:e.calc,height:e.main});c.width=e.calc;c.height=e.main};c.width>b?e():c.height>d&&(h.info(\"height\"),l());return c},J=function(){return $.extend({log:h,config:function(){return a},appTheme:function(){return f},appActions:function(){return e},appTriggers:function(){return c},appRequests:function(){return m},evalAction:H,resizeImage:I},q)},K=function(){return{actions:function(){return e},\n+triggers:function(){return c},theme:function(){return f},sk:t,msg:l,log:h,passToClip:0,passwordData:g,outputResult:v,checkboxDetect:E,checkPassLevel:D,encryptFormValue:u,fileUpload:C,redirect:r,scrollUp:z,setContentSize:y}};(function(){h.info(\"init\");q=K();n=J();c=sysPass.Triggers(n);e=sysPass.Actions(n);m=sysPass.Requests(n);x(function(){\"\"!==a.PK&&G();\"function\"===typeof sysPass.Theme&&(f=sysPass.Theme(n));!0===a.CHECK_UPDATES&&e.main.getUpdates();F();w();B()})})();return q};"
        },
        {
          "filename": "js/app-requests.js",
          "status": "modified",
          "additions": 41,
          "deletions": 0,
          "patch": "@@ -197,10 +197,51 @@ sysPass.Requests = function (Common) {\n         })).done(callbackOk);\n     };\n \n+    /**\n+     * Realizar una acci\u00f3n mediante env\u00edo de eventos\n+     * @param opts\n+     * @param callbackProgress\n+     * @param callbackEnd\n+     */\n+    var getActionEvent = function (opts, callbackProgress, callbackEnd) {\n+        var url = (!opts.url.startsWith(\"http\", 0) && !opts.url.startsWith(\"https\", 0)) ? Common.config().APP_ROOT + opts.url : opts.url;\n+        url += \"?\" + $.param(opts.data);\n+\n+        var source = new EventSource(url);\n+\n+        //a message is received\n+        source.addEventListener(\"message\", function (e) {\n+            var result = JSON.parse(e.data);\n+\n+            log.debug(result);\n+\n+            if (result.end === 1) {\n+                log.info(\"getActionEvent:Ending\");\n+                source.close();\n+\n+                if (typeof callbackEnd === \"function\") {\n+                    callbackEnd(result);\n+                }\n+            } else {\n+                if (typeof callbackProgress === \"function\") {\n+                    callbackProgress(result);\n+                }\n+            }\n+        });\n+\n+        source.addEventListener(\"error\", function (e) {\n+            log.error(\"getActionEvent:Error occured\");\n+            source.close();\n+        });\n+\n+        return source;\n+    };\n+\n     return {\n         getRequestOpts: getRequestOpts,\n         getActionCall: getActionCall,\n         getActionPromise: getActionPromise,\n+        getActionEvent: getActionEvent,\n         history: history\n     };\n };"
        },
        {
          "filename": "js/app-requests.min.js",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -1,8 +1,9 @@\n var $jscomp={scope:{},checkStringArgs:function(b,d,c){if(null==b)throw new TypeError(\"The 'this' value for String.prototype.\"+c+\" must not be null or undefined\");if(d instanceof RegExp)throw new TypeError(\"First argument to String.prototype.\"+c+\" must not be a regular expression\");return b+\"\"}};\n-$jscomp.defineProperty=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(b,d,c){if(c.get||c.set)throw new TypeError(\"ES3 does not support getters and setters.\");b!=Array.prototype&&b!=Object.prototype&&(b[d]=c.value)};$jscomp.getGlobal=function(b){return\"undefined\"!=typeof window&&window===b?b:\"undefined\"!=typeof global&&null!=global?global:b};$jscomp.global=$jscomp.getGlobal(this);\n+$jscomp.defineProperty=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(b,d,c){if(c.get||c.set)throw new TypeError(\"ES3 does not support getters and setters.\");b!=Array.prototype&&b!=Object.prototype&&(b[d]=c.value)};$jscomp.getGlobal=function(b){return\"undefined\"!=typeof window&&window===b?b:\"undefined\"!=typeof global?global:b};$jscomp.global=$jscomp.getGlobal(this);\n $jscomp.polyfill=function(b,d,c,e){if(d){c=$jscomp.global;b=b.split(\".\");for(e=0;e<b.length-1;e++){var a=b[e];a in c||(c[a]={});c=c[a]}b=b[b.length-1];e=c[b];d=d(e);d!=e&&null!=d&&$jscomp.defineProperty(c,b,{configurable:!0,writable:!0,value:d})}};\n $jscomp.polyfill(\"String.prototype.startsWith\",function(b){return b?b:function(b,c){var d=$jscomp.checkStringArgs(this,b,\"startsWith\");b+=\"\";for(var a=d.length,h=b.length,g=Math.max(0,Math.min(c|0,d.length)),f=0;f<h&&g<a;)if(d[g++]!=b[f++])return!1;return f>=h}},\"es6-impl\",\"es3\");\n sysPass.Requests=function(b){var d=b.log,c=[],e={get:function(){return c},add:function(a){var b=\"\"===a.hash?SparkMD5.hash(JSON.stringify(a),!1):a.hash;if(0<c.length&&c[c.length-1].hash===b)return c;d.info(\"history:add\");a.hash=b;c.push(a);15<=c.length&&c.splice(0,10);return c},del:function(){d.info(\"history:del\");if(\"undefined\"!==typeof c.pop())return c[c.length-1]},reset:function(){d.info(\"history:reset\");c=[]},length:function(){return c.length}};return{getRequestOpts:function(){return Object.create({type:\"json\",\n url:\"\",method:\"post\",callback:\"\",async:!0,data:\"\",cache:!1,processData:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",timeout:0,addHistory:!1,hash:\"\",useLoading:!0,useFullLoading:!1})},getActionCall:function(a,c,g){d.info(\"getActionCall\");var f=a.url.startsWith(\"http\",0)||a.url.startsWith(\"https\",0)?a.url:b.config().APP_ROOT+a.url;return $.ajax({dataType:a.type,url:f,method:a.method,async:a.async,data:a.data,cache:a.cache,processData:a.processData,contentType:a.contentType,timeout:a.timeout,\n beforeSend:function(){!0===a.useLoading&&b.appTheme().loading.show(a.useFullLoading)},success:function(b){if(\"function\"!==typeof c)return!0;!0===a.addHistory&&(a.callback=c,e.add(a));c(b)},error:function(c,e,f){\"function\"!==typeof g?(c=b.config().LANG[1]+\"<p>\"+f+e+\"</p>\",d.error(c),\"html\"===a.type&&$(\"#content\").html(b.msg.html.error(f)),b.msg.error(c)):g()},complete:function(){!0===a.useLoading&&b.appTheme().loading.hide();b.appTheme().ajax.complete()}})},getActionPromise:function(a,c){d.info(\"getActionPromise\");\n-var e=a.url.startsWith(\"http\",0)||a.url.startsWith(\"https\",0)?a.url:b.config().APP_ROOT+a.url;$.when($.ajax({dataType:a.type,url:e,method:a.method,async:a.async,data:a.data,cache:a.cache,processData:a.processData,contentType:a.contentType,timeout:a.timeout})).done(c)},history:e}};\n+var e=a.url.startsWith(\"http\",0)||a.url.startsWith(\"https\",0)?a.url:b.config().APP_ROOT+a.url;$.when($.ajax({dataType:a.type,url:e,method:a.method,async:a.async,data:a.data,cache:a.cache,processData:a.processData,contentType:a.contentType,timeout:a.timeout})).done(c)},getActionEvent:function(a,c,e){var f=a.url.startsWith(\"http\",0)||a.url.startsWith(\"https\",0)?a.url:b.config().APP_ROOT+a.url,f=f+(\"?\"+$.param(a.data)),g=new EventSource(f);g.addEventListener(\"message\",function(a){a=JSON.parse(a.data);\n+d.debug(a);1===a.end?(d.info(\"getActionEvent:Ending\"),g.close(),\"function\"===typeof e&&e(a)):\"function\"===typeof c&&c(a)});g.addEventListener(\"error\",function(a){d.error(\"getActionEvent:Error occured\");g.close()});return g},history:e}};"
        },
        {
          "filename": "js/app-triggers.min.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,5 +1,5 @@\n var $jscomp={scope:{},findInternal:function(b,d,e){b instanceof String&&(b=String(b));for(var a=b.length,c=0;c<a;c++){var f=b[c];if(d.call(e,f,c,b))return{i:c,v:f}}return{i:-1,v:void 0}}};$jscomp.defineProperty=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(b,d,e){if(e.get||e.set)throw new TypeError(\"ES3 does not support getters and setters.\");b!=Array.prototype&&b!=Object.prototype&&(b[d]=e.value)};\n-$jscomp.getGlobal=function(b){return\"undefined\"!=typeof window&&window===b?b:\"undefined\"!=typeof global&&null!=global?global:b};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(b,d,e,a){if(d){e=$jscomp.global;b=b.split(\".\");for(a=0;a<b.length-1;a++){var c=b[a];c in e||(e[c]={});e=e[c]}b=b[b.length-1];a=e[b];d=d(a);d!=a&&null!=d&&$jscomp.defineProperty(e,b,{configurable:!0,writable:!0,value:d})}};\n+$jscomp.getGlobal=function(b){return\"undefined\"!=typeof window&&window===b?b:\"undefined\"!=typeof global?global:b};$jscomp.global=$jscomp.getGlobal(this);$jscomp.polyfill=function(b,d,e,a){if(d){e=$jscomp.global;b=b.split(\".\");for(a=0;a<b.length-1;a++){var c=b[a];c in e||(e[c]={});e=e[c]}b=b[b.length-1];a=e[b];d=d(a);d!=a&&null!=d&&$jscomp.defineProperty(e,b,{configurable:!0,writable:!0,value:d})}};\n $jscomp.polyfill(\"Array.prototype.find\",function(b){return b?b:function(b,e){return $jscomp.findInternal(this,b,e).v}},\"es6-impl\",\"es3\");\n sysPass.Triggers=function(b){var d=b.log,e=function(a){var c={valueField:\"id\",labelField:\"name\",searchField:[\"name\"]};a.find(\".select-box\").each(function(a){var d=$(this);c.plugins=d.hasClass(\"select-box-deselect\")?{clear_selection:{title:b.config().LANG[51]}}:{};if(d.data(\"onchange\")){var f=d.data(\"onchange\").split(\"/\");c.onChange=function(a){if(0<a)if(2===f.length)sysPassApp.actions()[f[0]][f[1]](d);else sysPassApp.actions()[f[0]](d)}}d.selectize(c)});a.find(\"#allowed_exts\").selectize({create:function(a){return{value:a.toUpperCase(),\n text:a.toUpperCase()}},createFilter:/^[a-z0-9]{1,4}$/i,plugins:[\"remove_button\"]});a.find(\"#wikifilter\").selectize({create:!0,createFilter:/^[a-z0-9:._-]+$/i,plugins:[\"remove_button\"]})};return{views:{main:function(){d.info(\"views:main\");$(\".btn-menu\").click(function(){var a=$(this);\"1\"===a.attr(\"data-history-reset\")&&b.appRequests().history.reset();b.appActions().doAction({actionId:a.data(\"action-id\")},a.data(\"view\"))});b.appActions().doAction({actionId:1},\"search\")},search:function(){d.info(\"views:search\");"
        },
        {
          "filename": "js/eventsource.js",
          "status": "added",
          "additions": 686,
          "deletions": 0,
          "patch": "@@ -0,0 +1,686 @@\n+/** @license\n+ * eventsource.js\n+ * Available under MIT License (MIT)\n+ * https://github.com/Yaffle/EventSource/\n+ */\n+\n+/*jslint indent: 2, vars: true, plusplus: true */\n+/*global setTimeout, clearTimeout */\n+\n+(function (global) {\n+  \"use strict\";\n+\n+  var setTimeout = global.setTimeout;\n+  var clearTimeout = global.clearTimeout;\n+\n+  var k = function () {\n+  };\n+\n+  function XHRTransport(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg) {\n+    this._internal = new XHRTransportInternal(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg);\n+  }\n+\n+  XHRTransport.prototype.open = function (url, withCredentials) {\n+    this._internal.open(url, withCredentials);\n+  };\n+\n+  XHRTransport.prototype.cancel = function () {\n+    this._internal.cancel();\n+  };\n+\n+  function XHRTransportInternal(xhr, onStartCallback, onProgressCallback, onFinishCallback, thisArg) {\n+    this.onStartCallback = onStartCallback;\n+    this.onProgressCallback = onProgressCallback;\n+    this.onFinishCallback = onFinishCallback;\n+    this.thisArg = thisArg;\n+    this.xhr = xhr;\n+    this.state = 0;\n+    this.charOffset = 0;\n+    this.offset = 0;\n+    this.url = \"\";\n+    this.withCredentials = false;\n+    this.timeout = 0;\n+  }\n+\n+  XHRTransportInternal.prototype.onStart = function () {\n+    if (this.state === 1) {\n+      this.state = 2;\n+      var status = 0;\n+      var statusText = \"\";\n+      var contentType = undefined;\n+      if (!(\"contentType\" in this.xhr)) {\n+        try {\n+          status = this.xhr.status;\n+          statusText = this.xhr.statusText;\n+          contentType = this.xhr.getResponseHeader(\"Content-Type\");\n+        } catch (error) {\n+          // https://bugs.webkit.org/show_bug.cgi?id=29121\n+          status = 0;\n+          statusText = \"\";\n+          contentType = undefined;\n+          // FF < 14, WebKit\n+          // https://bugs.webkit.org/show_bug.cgi?id=29658\n+          // https://bugs.webkit.org/show_bug.cgi?id=77854\n+        }\n+      } else {\n+        status = 200;\n+        statusText = \"OK\";\n+        contentType = this.xhr.contentType;\n+      }\n+      if (contentType == undefined) {\n+        contentType = \"\";\n+      }\n+      this.onStartCallback.call(this.thisArg, status, statusText, contentType);\n+    }\n+  };\n+  XHRTransportInternal.prototype.onProgress = function () {\n+    this.onStart();\n+    if (this.state === 2 || this.state === 3) {\n+      this.state = 3;\n+      var responseText = \"\";\n+      try {\n+        responseText = this.xhr.responseText;\n+      } catch (error) {\n+        // IE 8 - 9 with XMLHttpRequest\n+      }\n+      var chunkStart = this.charOffset;\n+      var length = responseText.length;\n+      for (var i = this.offset; i < length; i += 1) {\n+        var c = responseText.charCodeAt(i);\n+        if (c === \"\\n\".charCodeAt(0) || c === \"\\r\".charCodeAt(0)) {\n+          this.charOffset = i + 1;\n+        }\n+      }\n+      this.offset = length;\n+      var chunk = responseText.slice(chunkStart, this.charOffset);\n+      this.onProgressCallback.call(this.thisArg, chunk);\n+    }\n+  };\n+  XHRTransportInternal.prototype.onFinish = function () {\n+    // IE 8 fires \"onload\" without \"onprogress\n+    this.onProgress();\n+    if (this.state === 3) {\n+      this.state = 4;\n+      if (this.timeout !== 0) {\n+        clearTimeout(this.timeout);\n+        this.timeout = 0;\n+      }\n+      this.onFinishCallback.call(this.thisArg);\n+    }\n+  };\n+  XHRTransportInternal.prototype.onReadyStateChange = function () {\n+    if (this.xhr != undefined) { // Opera 12\n+      if (this.xhr.readyState === 4) {\n+        if (this.xhr.status === 0) {\n+          this.onFinish();\n+        } else {\n+          this.onFinish();\n+        }\n+      } else if (this.xhr.readyState === 3) {\n+        this.onProgress();\n+      } else if (this.xhr.readyState === 2) {\n+        // Opera 10.63 throws exception for `this.xhr.status`\n+        // this.onStart();\n+      }\n+    }\n+  };\n+  XHRTransportInternal.prototype.onTimeout2 = function () {\n+    this.timeout = 0;\n+    var tmp = (/^data\\:([^,]*?)(base64)?,([\\S]*)$/).exec(this.url);\n+    var contentType = tmp[1];\n+    var data = tmp[2] === \"base64\" ? global.atob(tmp[3]) : decodeURIComponent(tmp[3]);\n+    if (this.state === 1) {\n+      this.state = 2;\n+      this.onStartCallback.call(this.thisArg, 200, \"OK\", contentType);\n+    }\n+    if (this.state === 2 || this.state === 3) {\n+      this.state = 3;\n+      this.onProgressCallback.call(this.thisArg, data);\n+    }\n+    if (this.state === 3) {\n+      this.state = 4;\n+      this.onFinishCallback.call(this.thisArg);\n+    }\n+  };\n+  XHRTransportInternal.prototype.onTimeout1 = function () {\n+    this.timeout = 0;\n+    this.open(this.url, this.withCredentials);\n+  };\n+  XHRTransportInternal.prototype.onTimeout0 = function () {\n+    var that = this;\n+    this.timeout = setTimeout(function () {\n+      that.onTimeout0();\n+    }, 500);\n+    if (this.xhr.readyState === 3) {\n+      this.onProgress();\n+    }\n+  };\n+  XHRTransportInternal.prototype.handleEvent = function (event) {\n+    if (event.type === \"load\") {\n+      this.onFinish();\n+    } else if (event.type === \"error\") {\n+      this.onFinish();\n+    } else if (event.type === \"abort\") {\n+      // improper fix to match Firefox behaviour, but it is better than just ignore abort\n+      // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\n+      // https://bugzilla.mozilla.org/show_bug.cgi?id=880200\n+      // https://code.google.com/p/chromium/issues/detail?id=153570\n+      // IE 8 fires \"onload\" without \"onprogress\n+      this.onFinish();\n+    } else if (event.type === \"progress\") {\n+      this.onProgress();\n+    } else if (event.type === \"readystatechange\") {\n+      this.onReadyStateChange();\n+    }\n+  };\n+  XHRTransportInternal.prototype.open = function (url, withCredentials) {\n+    if (this.timeout !== 0) {\n+      clearTimeout(this.timeout);\n+      this.timeout = 0;\n+    }\n+\n+    this.url = url;\n+    this.withCredentials = withCredentials;\n+\n+    this.state = 1;\n+    this.charOffset = 0;\n+    this.offset = 0;\n+\n+    var that = this;\n+\n+    var tmp = (/^data\\:([^,]*?)(?:;base64)?,[\\S]*$/).exec(url);\n+    if (tmp != undefined) {\n+      this.timeout = setTimeout(function () {\n+        that.onTimeout2();\n+      }, 0);\n+      return;\n+    }\n+\n+    // loading indicator in Safari, Chrome < 14\n+    // loading indicator in Firefox\n+    // https://bugzilla.mozilla.org/show_bug.cgi?id=736723\n+    if ((!(\"ontimeout\" in this.xhr) || (\"sendAsBinary\" in this.xhr) || (\"mozAnon\" in this.xhr)) && global.document != undefined && global.document.readyState != undefined && global.document.readyState !== \"complete\") {\n+      this.timeout = setTimeout(function () {\n+        that.onTimeout1();\n+      }, 4);\n+      return;\n+    }\n+\n+    // XDomainRequest#abort removes onprogress, onerror, onload\n+    this.xhr.onload = function (event) {\n+      that.handleEvent({type: \"load\"});\n+    };\n+    this.xhr.onerror = function () {\n+      that.handleEvent({type: \"error\"});\n+    };\n+    this.xhr.onabort = function () {\n+      that.handleEvent({type: \"abort\"});\n+    };\n+    this.xhr.onprogress = function () {\n+      that.handleEvent({type: \"progress\"});\n+    };\n+    // IE 8-9 (XMLHTTPRequest)\n+    // Firefox 3.5 - 3.6 - ? < 9.0\n+    // onprogress is not fired sometimes or delayed\n+    // see also #64\n+    this.xhr.onreadystatechange = function () {\n+      that.handleEvent({type: \"readystatechange\"});\n+    };\n+\n+    this.xhr.open(\"GET\", url, true);\n+\n+    // withCredentials should be set after \"open\" for Safari and Chrome (< 19 ?)\n+    this.xhr.withCredentials = withCredentials;\n+\n+    this.xhr.responseType = \"text\";\n+\n+    if (\"setRequestHeader\" in this.xhr) {\n+      // Request header field Cache-Control is not allowed by Access-Control-Allow-Headers.\n+      // \"Cache-control: no-cache\" are not honored in Chrome and Firefox\n+      // https://bugzilla.mozilla.org/show_bug.cgi?id=428916\n+      //this.xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n+      this.xhr.setRequestHeader(\"Accept\", \"text/event-stream\");\n+      // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.\n+      //this.xhr.setRequestHeader(\"Last-Event-ID\", this.lastEventId);\n+    }\n+\n+    try {\n+      this.xhr.send(undefined);\n+    } catch (error1) {\n+      // Safari 5.1.7, Opera 12\n+      throw error1;\n+    }\n+\n+    if ((\"readyState\" in this.xhr) && global.opera != undefined) {\n+      // workaround for Opera issue with \"progress\" events\n+      this.timeout = setTimeout(function () {\n+        that.onTimeout0();\n+      }, 0);\n+    }\n+  };\n+  XHRTransportInternal.prototype.cancel = function () {\n+    if (this.state !== 0 && this.state !== 4) {\n+      this.state = 4;\n+      this.xhr.onload = k;\n+      this.xhr.onerror = k;\n+      this.xhr.onabort = k;\n+      this.xhr.onprogress = k;\n+      this.xhr.onreadystatechange = k;\n+      this.xhr.abort();\n+      if (this.timeout !== 0) {\n+        clearTimeout(this.timeout);\n+        this.timeout = 0;\n+      }\n+      this.onFinishCallback.call(this.thisArg);\n+    }\n+    this.state = 0;\n+  };\n+\n+  function Map() {\n+    this._data = {};\n+  }\n+\n+  Map.prototype.get = function (key) {\n+    return this._data[key + \"~\"];\n+  };\n+  Map.prototype.set = function (key, value) {\n+    this._data[key + \"~\"] = value;\n+  };\n+  Map.prototype[\"delete\"] = function (key) {\n+    delete this._data[key + \"~\"];\n+  };\n+\n+  function EventTarget() {\n+    this._listeners = new Map();\n+  }\n+\n+  function throwError(e) {\n+    setTimeout(function () {\n+      throw e;\n+    }, 0);\n+  }\n+\n+  EventTarget.prototype.dispatchEvent = function (event) {\n+    event.target = this;\n+    var type = event.type.toString();\n+    var listeners = this._listeners;\n+    var typeListeners = listeners.get(type);\n+    if (typeListeners == undefined) {\n+      return;\n+    }\n+    var length = typeListeners.length;\n+    var listener = undefined;\n+    for (var i = 0; i < length; i += 1) {\n+      listener = typeListeners[i];\n+      try {\n+        if (typeof listener.handleEvent === \"function\") {\n+          listener.handleEvent(event);\n+        } else {\n+          listener.call(this, event);\n+        }\n+      } catch (e) {\n+        throwError(e);\n+      }\n+    }\n+  };\n+  EventTarget.prototype.addEventListener = function (type, callback) {\n+    type = type.toString();\n+    var listeners = this._listeners;\n+    var typeListeners = listeners.get(type);\n+    if (typeListeners == undefined) {\n+      typeListeners = [];\n+      listeners.set(type, typeListeners);\n+    }\n+    for (var i = typeListeners.length; i >= 0; i -= 1) {\n+      if (typeListeners[i] === callback) {\n+        return;\n+      }\n+    }\n+    typeListeners.push(callback);\n+  };\n+  EventTarget.prototype.removeEventListener = function (type, callback) {\n+    type = type.toString();\n+    var listeners = this._listeners;\n+    var typeListeners = listeners.get(type);\n+    if (typeListeners == undefined) {\n+      return;\n+    }\n+    var length = typeListeners.length;\n+    var filtered = [];\n+    for (var i = 0; i < length; i += 1) {\n+      if (typeListeners[i] !== callback) {\n+        filtered.push(typeListeners[i]);\n+      }\n+    }\n+    if (filtered.length === 0) {\n+      listeners[\"delete\"](type);\n+    } else {\n+      listeners.set(type, filtered);\n+    }\n+  };\n+\n+  function Event(type) {\n+    this.type = type;\n+    this.target = undefined;\n+  }\n+\n+  function MessageEvent(type, options) {\n+    Event.call(this, type);\n+    this.data = options.data;\n+    this.lastEventId = options.lastEventId;\n+  }\n+\n+  MessageEvent.prototype = Event.prototype;\n+\n+  var XHR = global.XMLHttpRequest;\n+  var XDR = global.XDomainRequest;\n+  var isCORSSupported = XHR != undefined && (new XHR()).withCredentials != undefined;\n+  var Transport = isCORSSupported || (XHR != undefined && XDR == undefined) ? XHR : XDR;\n+\n+  var WAITING = -1;\n+  var CONNECTING = 0;\n+  var OPEN = 1;\n+  var CLOSED = 2;\n+  var AFTER_CR = 3;\n+  var FIELD_START = 4;\n+  var FIELD = 5;\n+  var VALUE_START = 6;\n+  var VALUE = 7;\n+  var contentTypeRegExp = /^text\\/event\\-stream;?(\\s*charset\\=utf\\-8)?$/i;\n+\n+  var MINIMUM_DURATION = 1000;\n+  var MAXIMUM_DURATION = 18000000;\n+\n+  var getDuration = function (value, def) {\n+    var n = value;\n+    if (n !== n) {\n+      n = def;\n+    }\n+    return (n < MINIMUM_DURATION ? MINIMUM_DURATION : (n > MAXIMUM_DURATION ? MAXIMUM_DURATION : n));\n+  };\n+\n+  var fire = function (that, f, event) {\n+    try {\n+      if (typeof f === \"function\") {\n+        f.call(that, event);\n+      }\n+    } catch (e) {\n+      throwError(e);\n+    }\n+  };\n+\n+  function EventSource(url, options) {\n+    EventTarget.call(this);\n+\n+    this.onopen = undefined;\n+    this.onmessage = undefined;\n+    this.onerror = undefined;\n+\n+    this.url = \"\";\n+    this.readyState = CONNECTING;\n+    this.withCredentials = false;\n+\n+    this._internal = new EventSourceInternal(this, url, options);\n+  }\n+\n+  function EventSourceInternal(es, url, options) {\n+    this.url = url.toString();\n+    this.readyState = CONNECTING;\n+    this.withCredentials = isCORSSupported && options != undefined && Boolean(options.withCredentials);\n+\n+    this.es = es;\n+    this.initialRetry = getDuration(1000, 0);\n+    this.heartbeatTimeout = getDuration(45000, 0);\n+\n+    this.lastEventId = \"\";\n+    this.retry = this.initialRetry;\n+    this.wasActivity = false;\n+    var CurrentTransport = options != undefined && options.Transport != undefined ? options.Transport : Transport;\n+    var xhr = new CurrentTransport();\n+    this.transport = new XHRTransport(xhr, this.onStart, this.onProgress, this.onFinish, this);\n+    this.timeout = 0;\n+    this.currentState = WAITING;\n+    this.dataBuffer = [];\n+    this.lastEventIdBuffer = \"\";\n+    this.eventTypeBuffer = \"\";\n+\n+    this.state = FIELD_START;\n+    this.fieldStart = 0;\n+    this.valueStart = 0;\n+\n+    this.es.url = this.url;\n+    this.es.readyState = this.readyState;\n+    this.es.withCredentials = this.withCredentials;\n+\n+    this.onTimeout();\n+  }\n+\n+  EventSourceInternal.prototype.onStart = function (status, statusText, contentType) {\n+    if (this.currentState === CONNECTING) {\n+      if (contentType == undefined) {\n+        contentType = \"\";\n+      }\n+      if (status === 200 && contentTypeRegExp.test(contentType)) {\n+        this.currentState = OPEN;\n+        this.wasActivity = true;\n+        this.retry = this.initialRetry;\n+        this.readyState = OPEN;\n+        this.es.readyState = OPEN;\n+        var event = new Event(\"open\");\n+        this.es.dispatchEvent(event);\n+        fire(this.es, this.es.onopen, event);\n+      } else if (status !== 0) {\n+        var message = \"\";\n+        if (status !== 200) {\n+          message = \"EventSource's response has a status \" + status + \" \" + statusText.replace(/\\s+/g, \" \") + \" that is not 200. Aborting the connection.\";\n+        } else {\n+          message = \"EventSource's response has a Content-Type specifying an unsupported type: \" + contentType.replace(/\\s+/g, \" \") + \". Aborting the connection.\";\n+        }\n+        throwError(new Error(message));\n+        this.close();\n+        var event = new Event(\"error\");\n+        this.es.dispatchEvent(event);\n+        fire(this.es, this.es.onerror, event);\n+      }\n+    }\n+  };\n+\n+  EventSourceInternal.prototype.onProgress = function (chunk) {\n+    if (this.currentState === OPEN) {\n+      var length = chunk.length;\n+      if (length !== 0) {\n+        this.wasActivity = true;\n+      }\n+      for (var position = 0; position < length; position += 1) {\n+        var c = chunk.charCodeAt(position);\n+        if (this.state === AFTER_CR && c === \"\\n\".charCodeAt(0)) {\n+          this.state = FIELD_START;\n+        } else {\n+          if (this.state === AFTER_CR) {\n+            this.state = FIELD_START;\n+          }\n+          if (c === \"\\r\".charCodeAt(0) || c === \"\\n\".charCodeAt(0)) {\n+            if (this.state !== FIELD_START) {\n+              if (this.state === FIELD) {\n+                this.valueStart = position + 1;\n+              }\n+              var field = chunk.slice(this.fieldStart, this.valueStart - 1);\n+              var value = chunk.slice(this.valueStart + (this.valueStart < position && chunk.charCodeAt(this.valueStart) === \" \".charCodeAt(0) ? 1 : 0), position);\n+              if (field === \"data\") {\n+                this.dataBuffer.push(value);\n+              } else if (field === \"id\") {\n+                this.lastEventIdBuffer = value;\n+              } else if (field === \"event\") {\n+                this.eventTypeBuffer = value;\n+              } else if (field === \"retry\") {\n+                this.initialRetry = getDuration(Number(value), this.initialRetry);\n+                this.retry = this.initialRetry;\n+              } else if (field === \"heartbeatTimeout\") {\n+                this.heartbeatTimeout = getDuration(Number(value), this.heartbeatTimeout);\n+                if (this.timeout !== 0) {\n+                  clearTimeout(this.timeout);\n+                  var that = this;\n+                  this.timeout = setTimeout(function () {\n+                    that.onTimeout();\n+                  }, this.heartbeatTimeout);\n+                }\n+              }\n+            }\n+            if (this.state === FIELD_START) {\n+              if (this.dataBuffer.length !== 0) {\n+                this.lastEventId = this.lastEventIdBuffer;\n+                if (this.eventTypeBuffer === \"\") {\n+                  this.eventTypeBuffer = \"message\";\n+                }\n+                var event = new MessageEvent(this.eventTypeBuffer, {\n+                  data: this.dataBuffer.join(\"\\n\"),\n+                  lastEventId: this.lastEventIdBuffer\n+                });\n+                this.es.dispatchEvent(event);\n+                if (this.eventTypeBuffer === \"message\") {\n+                  fire(this.es, this.es.onmessage, event);\n+                }\n+                if (this.currentState === CLOSED) {\n+                  return;\n+                }\n+              }\n+              this.dataBuffer.length = 0;\n+              this.eventTypeBuffer = \"\";\n+            }\n+            this.state = c === \"\\r\".charCodeAt(0) ? AFTER_CR : FIELD_START;\n+          } else {\n+            if (this.state === FIELD_START) {\n+              this.fieldStart = position;\n+              this.state = FIELD;\n+            }\n+            if (this.state === FIELD) {\n+              if (c === \":\".charCodeAt(0)) {\n+                this.valueStart = position + 1;\n+                this.state = VALUE_START;\n+              }\n+            } else if (this.state === VALUE_START) {\n+              this.state = VALUE;\n+            }\n+          }\n+        }\n+      }\n+    }\n+  };\n+\n+  EventSourceInternal.prototype.onFinish = function () {\n+    if (this.currentState === OPEN || this.currentState === CONNECTING) {\n+      this.currentState = WAITING;\n+      if (this.timeout !== 0) {\n+        clearTimeout(this.timeout);\n+        this.timeout = 0;\n+      }\n+      if (this.retry > this.initialRetry * 16) {\n+        this.retry = this.initialRetry * 16;\n+      }\n+      if (this.retry > MAXIMUM_DURATION) {\n+        this.retry = MAXIMUM_DURATION;\n+      }\n+      var that = this;\n+      this.timeout = setTimeout(function () {\n+        that.onTimeout();\n+      }, this.retry);\n+      this.retry = this.retry * 2 + 1;\n+\n+      this.readyState = CONNECTING;\n+      this.es.readyState = CONNECTING;\n+      var event = new Event(\"error\");\n+      this.es.dispatchEvent(event);\n+      fire(this.es, this.es.onerror, event);\n+    }\n+  };\n+\n+  EventSourceInternal.prototype.onTimeout = function () {\n+    this.timeout = 0;\n+    if (this.currentState !== WAITING) {\n+      if (!this.wasActivity) {\n+        throwError(new Error(\"No activity within \" + this.heartbeatTimeout + \" milliseconds. Reconnecting.\"));\n+        this.transport.cancel();\n+      } else {\n+        this.wasActivity = false;\n+        var that = this;\n+        this.timeout = setTimeout(function () {\n+          that.onTimeout();\n+        }, this.heartbeatTimeout);\n+      }\n+      return;\n+    }\n+\n+    this.wasActivity = false;\n+    var that = this;\n+    this.timeout = setTimeout(function () {\n+      that.onTimeout();\n+    }, this.heartbeatTimeout);\n+\n+    this.currentState = CONNECTING;\n+    this.dataBuffer.length = 0;\n+    this.eventTypeBuffer = \"\";\n+    this.lastEventIdBuffer = this.lastEventId;\n+    this.fieldStart = 0;\n+    this.valueStart = 0;\n+    this.state = FIELD_START;\n+\n+    var s = this.url.slice(0, 5);\n+    if (s !== \"data:\" && s !== \"blob:\") {\n+      s = this.url + ((this.url.indexOf(\"?\", 0) === -1 ? \"?\" : \"&\") + \"lastEventId=\" + encodeURIComponent(this.lastEventId) + \"&r=\" + (Math.random() + 1).toString().slice(2));\n+    } else {\n+      s = this.url;\n+    }\n+    try {\n+      this.transport.open(s, this.withCredentials);\n+    } catch (error) {\n+      this.close();\n+      throw error;\n+    }\n+  };\n+\n+  EventSourceInternal.prototype.close = function () {\n+    this.currentState = CLOSED;\n+    this.transport.cancel();\n+    if (this.timeout !== 0) {\n+      clearTimeout(this.timeout);\n+      this.timeout = 0;\n+    }\n+    this.readyState = CLOSED;\n+    this.es.readyState = CLOSED;\n+  };\n+\n+  function F() {\n+    this.CONNECTING = CONNECTING;\n+    this.OPEN = OPEN;\n+    this.CLOSED = CLOSED;\n+  }\n+  F.prototype = EventTarget.prototype;\n+\n+  EventSource.prototype = new F();\n+\n+  EventSource.prototype.close = function () {\n+    this._internal.close();\n+  };\n+\n+  F.call(EventSource);\n+  if (isCORSSupported) {\n+    EventSource.prototype.withCredentials = undefined;\n+  }\n+\n+  var isEventSourceSupported = function () {\n+    // Opera 12 fails this test, but this is fine.\n+    return global.EventSource != undefined && (\"withCredentials\" in global.EventSource.prototype);\n+  };\n+\n+  if (Transport != undefined && (global.EventSource == undefined || (isCORSSupported && !isEventSourceSupported()))) {\n+    // Why replace a native EventSource ?\n+    // https://bugzilla.mozilla.org/show_bug.cgi?id=444328\n+    // https://bugzilla.mozilla.org/show_bug.cgi?id=831392\n+    // https://code.google.com/p/chromium/issues/detail?id=260144\n+    // https://code.google.com/p/chromium/issues/detail?id=225654\n+    // ...\n+    global.NativeEventSource = global.EventSource;\n+    global.EventSource = EventSource;\n+  }\n+\n+}(typeof window !== 'undefined' ? window : this));"
        },
        {
          "filename": "js/eventsource.min.js",
          "status": "added",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -0,0 +1,26 @@\n+/*\n+\n+ eventsource.js\n+ Available under MIT License (MIT)\n+ https://github.com/Yaffle/EventSource/\n+*/\n+(function(e){function y(a,c,b,d,f){this._internal=new g(a,c,b,d,f)}function g(a,c,b,d,f){this.onStartCallback=c;this.onProgressCallback=b;this.onFinishCallback=d;this.thisArg=f;this.xhr=a;this.offset=this.charOffset=this.state=0;this.url=\"\";this.withCredentials=!1;this.timeout=0}function m(){this._data={}}function r(){this._listeners=new m}function t(a){h(function(){throw a;},0)}function n(a){this.type=a;this.target=void 0}function A(a,c){n.call(this,a);this.data=c.data;this.lastEventId=c.lastEventId}\n+function p(a,c){this._listeners=new m;this.onerror=this.onmessage=this.onopen=void 0;this.url=\"\";this.readyState=0;this.withCredentials=!1;this._internal=new k(this,a,c)}function k(a,c,b){this.url=c.toString();this.readyState=0;this.withCredentials=u&&void 0!=b&&!!b.withCredentials;this.es=a;this.initialRetry=v(1E3,0);this.heartbeatTimeout=v(45E3,0);this.lastEventId=\"\";this.retry=this.initialRetry;this.wasActivity=!1;a=new (void 0!=b&&void 0!=b.Transport?b.Transport:B);this.transport=new y(a,this.onStart,\n+this.onProgress,this.onFinish,this);this.timeout=0;this.currentState=-1;this.dataBuffer=[];this.eventTypeBuffer=this.lastEventIdBuffer=\"\";this.state=4;this.valueStart=this.fieldStart=0;this.es.url=this.url;this.es.readyState=this.readyState;this.es.withCredentials=this.withCredentials;this.onTimeout()}function z(){this.CONNECTING=0;this.OPEN=1;this.CLOSED=2}var h=e.setTimeout,l=e.clearTimeout,q=function(){};y.prototype.open=function(a,c){this._internal.open(a,c)};y.prototype.cancel=function(){this._internal.cancel()};\n+g.prototype.onStart=function(){if(1===this.state){this.state=2;var a=0,c=\"\",b=void 0;if(\"contentType\"in this.xhr)a=200,c=\"OK\",b=this.xhr.contentType;else try{a=this.xhr.status,c=this.xhr.statusText,b=this.xhr.getResponseHeader(\"Content-Type\")}catch(d){a=0,c=\"\",b=void 0}void 0==b&&(b=\"\");this.onStartCallback.call(this.thisArg,a,c,b)}};g.prototype.onProgress=function(){this.onStart();if(2===this.state||3===this.state){this.state=3;var a=\"\";try{a=this.xhr.responseText}catch(C){}for(var c=this.charOffset,\n+b=a.length,d=this.offset;d<b;d+=1){var f=a.charCodeAt(d);if(10===f||13===f)this.charOffset=d+1}this.offset=b;a=a.slice(c,this.charOffset);this.onProgressCallback.call(this.thisArg,a)}};g.prototype.onFinish=function(){this.onProgress();3===this.state&&(this.state=4,0!==this.timeout&&(l(this.timeout),this.timeout=0),this.onFinishCallback.call(this.thisArg))};g.prototype.onReadyStateChange=function(){if(void 0!=this.xhr)if(4===this.xhr.readyState)this.onFinish();else if(3===this.xhr.readyState)this.onProgress()};\n+g.prototype.onTimeout2=function(){this.timeout=0;var a=/^data\\:([^,]*?)(base64)?,([\\S]*)$/.exec(this.url),c=a[1],a=\"base64\"===a[2]?e.atob(a[3]):decodeURIComponent(a[3]);1===this.state&&(this.state=2,this.onStartCallback.call(this.thisArg,200,\"OK\",c));if(2===this.state||3===this.state)this.state=3,this.onProgressCallback.call(this.thisArg,a);3===this.state&&(this.state=4,this.onFinishCallback.call(this.thisArg))};g.prototype.onTimeout1=function(){this.timeout=0;this.open(this.url,this.withCredentials)};\n+g.prototype.onTimeout0=function(){var a=this;this.timeout=h(function(){a.onTimeout0()},500);if(3===this.xhr.readyState)this.onProgress()};g.prototype.handleEvent=function(a){if(\"load\"===a.type)this.onFinish();else if(\"error\"===a.type)this.onFinish();else if(\"abort\"===a.type)this.onFinish();else if(\"progress\"===a.type)this.onProgress();else if(\"readystatechange\"===a.type)this.onReadyStateChange()};g.prototype.open=function(a,c){0!==this.timeout&&(l(this.timeout),this.timeout=0);this.url=a;this.withCredentials=\n+c;this.state=1;this.offset=this.charOffset=0;var b=this;if(void 0!=/^data\\:([^,]*?)(?:;base64)?,[\\S]*$/.exec(a))this.timeout=h(function(){b.onTimeout2()},0);else if((!(\"ontimeout\"in this.xhr)||\"sendAsBinary\"in this.xhr||\"mozAnon\"in this.xhr)&&void 0!=e.document&&void 0!=e.document.readyState&&\"complete\"!==e.document.readyState)this.timeout=h(function(){b.onTimeout1()},4);else{this.xhr.onload=function(a){b.handleEvent({type:\"load\"})};this.xhr.onerror=function(){b.handleEvent({type:\"error\"})};this.xhr.onabort=\n+function(){b.handleEvent({type:\"abort\"})};this.xhr.onprogress=function(){b.handleEvent({type:\"progress\"})};this.xhr.onreadystatechange=function(){b.handleEvent({type:\"readystatechange\"})};this.xhr.open(\"GET\",a,!0);this.xhr.withCredentials=c;this.xhr.responseType=\"text\";\"setRequestHeader\"in this.xhr&&this.xhr.setRequestHeader(\"Accept\",\"text/event-stream\");try{this.xhr.send(void 0)}catch(d){throw d;}\"readyState\"in this.xhr&&void 0!=e.opera&&(this.timeout=h(function(){b.onTimeout0()},0))}};g.prototype.cancel=\n+function(){0!==this.state&&4!==this.state&&(this.state=4,this.xhr.onload=q,this.xhr.onerror=q,this.xhr.onabort=q,this.xhr.onprogress=q,this.xhr.onreadystatechange=q,this.xhr.abort(),0!==this.timeout&&(l(this.timeout),this.timeout=0),this.onFinishCallback.call(this.thisArg));this.state=0};m.prototype.get=function(a){return this._data[a+\"~\"]};m.prototype.set=function(a,c){this._data[a+\"~\"]=c};m.prototype[\"delete\"]=function(a){delete this._data[a+\"~\"]};r.prototype.dispatchEvent=function(a){a.target=\n+this;var c=this._listeners.get(a.type.toString());if(void 0!=c)for(var b=c.length,d,f=0;f<b;f+=1){d=c[f];try{\"function\"===typeof d.handleEvent?d.handleEvent(a):d.call(this,a)}catch(C){t(C)}}};r.prototype.addEventListener=function(a,c){a=a.toString();var b=this._listeners,d=b.get(a);void 0==d&&(d=[],b.set(a,d));for(b=d.length;0<=b;--b)if(d[b]===c)return;d.push(c)};r.prototype.removeEventListener=function(a,c){a=a.toString();var b=this._listeners,d=b.get(a);if(void 0!=d){for(var f=d.length,e=[],g=0;g<\n+f;g+=1)d[g]!==c&&e.push(d[g]);if(0===e.length)b[\"delete\"](a);else b.set(a,e)}};A.prototype=n.prototype;var w=e.XMLHttpRequest,D=e.XDomainRequest,u=void 0!=w&&void 0!=(new w).withCredentials,B=u||void 0!=w&&void 0==D?w:D,E=/^text\\/event\\-stream;?(\\s*charset\\=utf\\-8)?$/i,v=function(a,c){var b=a;b!==b&&(b=c);return 1E3>b?1E3:18E6<b?18E6:b},x=function(a,c,b){try{\"function\"===typeof c&&c.call(a,b)}catch(d){t(d)}};k.prototype.onStart=function(a,c,b){0===this.currentState&&(void 0==b&&(b=\"\"),200===a&&E.test(b)?\n+(this.currentState=1,this.wasActivity=!0,this.retry=this.initialRetry,this.readyState=1,this.es.readyState=1,a=new n(\"open\"),this.es.dispatchEvent(a),x(this.es,this.es.onopen,a)):0!==a&&(a=200!==a?\"EventSource's response has a status \"+a+\" \"+c.replace(/\\s+/g,\" \")+\" that is not 200. Aborting the connection.\":\"EventSource's response has a Content-Type specifying an unsupported type: \"+b.replace(/\\s+/g,\" \")+\". Aborting the connection.\",t(Error(a)),this.close(),a=new n(\"error\"),this.es.dispatchEvent(a),\n+x(this.es,this.es.onerror,a)))};k.prototype.onProgress=function(a){if(1===this.currentState){var c=a.length;0!==c&&(this.wasActivity=!0);for(var b=0;b<c;b+=1){var d=a.charCodeAt(b);if(3===this.state&&10===d)this.state=4;else if(3===this.state&&(this.state=4),13===d||10===d){if(4!==this.state){5===this.state&&(this.valueStart=b+1);var f=a.slice(this.fieldStart,this.valueStart-1),e=a.slice(this.valueStart+(this.valueStart<b&&32===a.charCodeAt(this.valueStart)?1:0),b);if(\"data\"===f)this.dataBuffer.push(e);\n+else if(\"id\"===f)this.lastEventIdBuffer=e;else if(\"event\"===f)this.eventTypeBuffer=e;else if(\"retry\"===f)this.retry=this.initialRetry=v(Number(e),this.initialRetry);else if(\"heartbeatTimeout\"===f&&(this.heartbeatTimeout=v(Number(e),this.heartbeatTimeout),0!==this.timeout)){l(this.timeout);var g=this;this.timeout=h(function(){g.onTimeout()},this.heartbeatTimeout)}}if(4===this.state){if(0!==this.dataBuffer.length&&(this.lastEventId=this.lastEventIdBuffer,\"\"===this.eventTypeBuffer&&(this.eventTypeBuffer=\n+\"message\"),f=new A(this.eventTypeBuffer,{data:this.dataBuffer.join(\"\\n\"),lastEventId:this.lastEventIdBuffer}),this.es.dispatchEvent(f),\"message\"===this.eventTypeBuffer&&x(this.es,this.es.onmessage,f),2===this.currentState))break;this.dataBuffer.length=0;this.eventTypeBuffer=\"\"}this.state=13===d?3:4}else 4===this.state&&(this.fieldStart=b,this.state=5),5===this.state?58===d&&(this.valueStart=b+1,this.state=6):6===this.state&&(this.state=7)}}};k.prototype.onFinish=function(){if(1===this.currentState||\n+0===this.currentState){this.currentState=-1;0!==this.timeout&&(l(this.timeout),this.timeout=0);this.retry>16*this.initialRetry&&(this.retry=16*this.initialRetry);18E6<this.retry&&(this.retry=18E6);var a=this;this.timeout=h(function(){a.onTimeout()},this.retry);this.retry=2*this.retry+1;this.readyState=0;this.es.readyState=0;var c=new n(\"error\");this.es.dispatchEvent(c);x(this.es,this.es.onerror,c)}};k.prototype.onTimeout=function(){this.timeout=0;if(-1!==this.currentState)if(this.wasActivity){this.wasActivity=\n+!1;var a=this;this.timeout=h(function(){a.onTimeout()},this.heartbeatTimeout)}else t(Error(\"No activity within \"+this.heartbeatTimeout+\" milliseconds. Reconnecting.\")),this.transport.cancel();else{this.wasActivity=!1;a=this;this.timeout=h(function(){a.onTimeout()},this.heartbeatTimeout);this.currentState=0;this.dataBuffer.length=0;this.eventTypeBuffer=\"\";this.lastEventIdBuffer=this.lastEventId;this.valueStart=this.fieldStart=0;this.state=4;var c=this.url.slice(0,5),c=\"data:\"!==c&&\"blob:\"!==c?this.url+\n+((-1===this.url.indexOf(\"?\",0)?\"?\":\"&\")+\"lastEventId=\"+encodeURIComponent(this.lastEventId)+\"&r=\"+(Math.random()+1).toString().slice(2)):this.url;try{this.transport.open(c,this.withCredentials)}catch(b){throw this.close(),b;}}};k.prototype.close=function(){this.currentState=2;this.transport.cancel();0!==this.timeout&&(l(this.timeout),this.timeout=0);this.readyState=2;this.es.readyState=2};z.prototype=r.prototype;p.prototype=new z;p.prototype.close=function(){this._internal.close()};z.call(p);u&&(p.prototype.withCredentials=\n+void 0);void 0==B||void 0!=e.EventSource&&(!u||void 0!=e.EventSource&&\"withCredentials\"in e.EventSource.prototype)||(e.NativeEventSource=e.EventSource,e.EventSource=p)})(\"undefined\"!==typeof window?window:this);"
        },
        {
          "filename": "js/js.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -51,7 +51,8 @@\n             ->addFile('moment.min.js')\n             ->addFile('moment-timezone.min.js')\n             ->addFile('toastr.min.js')\n-            ->addFile('jquery.magnific-popup.min.js');\n+            ->addFile('jquery.magnific-popup.min.js')\n+            ->addFile('eventsource.min.js');\n     } elseif ($group === 1) {\n         $Minify->addFile('app.min.js')\n             ->addFile('app-triggers.min.js')"
        },
        {
          "filename": "js/strings.js.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -83,5 +83,6 @@\n     58 => __('Esta acci\u00f3n restablecer\u00e1 todos los datos del plugin. Desea continuar?'),\n     59 => __('Este proceso puede durar algo de tiempo. Desea continuar?'),\n     60 => __('Aviso'),\n-    61 => __('Sesi\u00f3n finalizada')\n+    61 => __('Sesi\u00f3n finalizada'),\n+    62 => __('Realizando tarea. Por favor, no cierre la ventana/pesta\u00f1a del navegador.')\n ];\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 21,
        "config_files": 4,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 47,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9d0e169d2163897238877fb65130db47fe1ddcfa",
            "date": "2022-07-02T05:48:11Z",
            "author_login": "nuxsmin"
          },
          {
            "sha": "c39b60c2a79041c8eae61aea7fd54a640b9c238a",
            "date": "2022-07-01T06:14:33Z",
            "author_login": "nuxsmin"
          },
          {
            "sha": "244fa4429c1936ce5391dc1042071cfec5b6263e",
            "date": "2022-06-25T08:16:34Z",
            "author_login": "nuxsmin"
          },
          {
            "sha": "c896d7f2da77486d14dcc9e2e718dc7abfc58ea1",
            "date": "2022-06-25T08:14:37Z",
            "author_login": "nuxsmin"
          },
          {
            "sha": "e63548f884bd5f646df74efcd45a540a4d0af395",
            "date": "2022-06-25T08:01:04Z",
            "author_login": "monkeywithacupcake"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-326",
    "description": "An issue was discovered in sysPass 2.x before 2.1, in which an algorithm was never sufficiently reviewed by cryptographers. The fact that inc/SP/Core/Crypt.class is using the MCRYPT_RIJNDAEL_256() function (the 256-bit block version of Rijndael, not AES) instead of MCRYPT_RIJNDAEL_128 (real AES) could help an attacker to create unknown havoc in the remote system.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-03-06T06:59:00.287",
    "last_modified": "2024-11-21T03:28:52.160",
    "fix_date": "2017-03-01T02:37:47Z"
  },
  "references": [
    {
      "url": "http://www.securityfocus.com/bid/96562",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://cxsecurity.com/issue/WLB-2017020196",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nuxsmin/sysPass/commit/a0e2c485e53b370a7cc6d833e192c3c5bfd70e1f",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nuxsmin/sysPass/releases/tag/2.1.0.17022601",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Release Notes"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/96562",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://cxsecurity.com/issue/WLB-2017020196",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nuxsmin/sysPass/commit/a0e2c485e53b370a7cc6d833e192c3c5bfd70e1f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nuxsmin/sysPass/releases/tag/2.1.0.17022601",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Release Notes"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:52.252860",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sysPass",
    "owner": "nuxsmin",
    "created_at": "2013-06-10T10:14:15Z",
    "updated_at": "2025-01-08T11:34:48Z",
    "pushed_at": "2024-12-21T08:36:16Z",
    "size": 35417,
    "stars": 976,
    "forks": 213,
    "open_issues": 257,
    "watchers": 976,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "PHP": 4032357,
      "JavaScript": 302843,
      "SCSS": 53897,
      "CSS": 4394,
      "HTML": 2489,
      "Shell": 1568
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T15:11:48.124606"
  }
}