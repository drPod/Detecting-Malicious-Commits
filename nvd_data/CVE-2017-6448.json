{
  "cve_id": "CVE-2017-6448",
  "github_data": {
    "repository": "radare/radare2",
    "fix_commit": "f41e941341e44aa86edd4483c4487ec09a074257",
    "related_commits": [
      "f41e941341e44aa86edd4483c4487ec09a074257",
      "f41e941341e44aa86edd4483c4487ec09a074257"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f41e941341e44aa86edd4483c4487ec09a074257",
      "commit_date": "2017-03-02T19:16:22Z",
      "author": {
        "login": "h4ng3r",
        "type": "User",
        "stats": {
          "total_commits": 61,
          "average_weekly_commits": 0.07305389221556886,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 27
        }
      },
      "commit_message": {
        "title": "Fix #6885 - oob write in dalvik_disassemble",
        "length": 43,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 118,
        "additions": 59,
        "deletions": 59
      },
      "files": [
        {
          "filename": "libr/asm/p/asm_dalvik.c",
          "status": "modified",
          "additions": 59,
          "deletions": 59,
          "patch": "@@ -26,7 +26,7 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\t{\n \t\t\t\tunsigned short array_size = buf[2] | (buf[3] << 8);\n \t\t\t\tint first_key = buf[4] | (buf[5] << 8) | (buf[6] << 16) | (buf[7] << 24);\n-\t\t\t\tsprintf (op->buf_asm, \"packed-switch-payload %d, %d\", array_size, first_key);\n+\t\t\t\tsnprintf (op->buf_asm, sizeof(op->buf_asm), \"packed-switch-payload %d, %d\", array_size, first_key);\n \t\t\t\tsize = 8;\n \t\t\t\tpayload = 2 * (array_size * 2);\n \t\t\t\tlen = 0;\n@@ -38,7 +38,7 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\t// int[size] relative offsets\n \t\t\t{\n \t\t\t\tunsigned short array_size = buf[2] | (buf[3] << 8);\n-\t\t\t\tsprintf (op->buf_asm, \"sparse-switch-payload %d\", array_size);\n+\t\t\t\tsnprintf (op->buf_asm, sizeof (op->buf_asm), \"sparse-switch-payload %d\", array_size);\n \t\t\t\tsize = 4;\n \t\t\t\tpayload = 2 * (array_size*4);\n \t\t\t\tlen = 0;\n@@ -74,37 +74,37 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\tcase fmtopvAvB:\n \t\t\tvA = buf[1] & 0x0f;\n \t\t\tvB = (buf[1] & 0xf0) >> 4;\n-\t\t\tsprintf (str, \" v%i, v%i\", vA, vB);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i\", vA, vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAvBBBB:\n \t\t\tvA = (int) buf[1];\n \t\t\tvB = (buf[3] << 8) | buf[2];\n-\t\t\tsprintf (str, \" v%i, v%i\", vA, vB);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i\", vA, vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAAAvBBBB: // buf[1] seems useless :/\n \t\t\tvA = (buf[3] << 8) | buf[2];\n \t\t\tvB = (buf[5] << 8) | buf[4];\n-\t\t\tsprintf (str, \" v%i, v%i\", vA, vB);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i\", vA, vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAA:\n \t\t\tvA = (int) buf[1];\n-\t\t\tsprintf (str, \" v%i\", vA);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i\", vA);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAcB:\n \t\t\tvA = buf[1] & 0x0f;\n \t\t\tvB = (buf[1] & 0xf0) >> 4;\n-\t\t\tsprintf (str, \" v%i, %#x\", vA, vB);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, %#x\", vA, vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAcBBBB:\n \t\t\tvA = (int) buf[1];\n \t\t\t{\n \t\t\t\tshort sB = (buf[3] << 8) | buf[2];\n-\t\t\t\tsprintf (str, \" v%i, %#04hx\", vA, sB);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, %#04hx\", vA, sB);\n \t\t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\t}\n \t\t\tbreak;\n@@ -137,33 +137,33 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\t\t((llint)buf[6] << 32) | ((llint)buf[7] << 40)|\n \t\t\t\t((llint)buf[8] << 48) | ((llint)buf[9] << 56);\n \t\t\t#undef llint\n-\t\t\tsprintf (str, \" v%i:v%i, 0x%\"PFMT64x, vA, vA + 1, lB);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i:v%i, 0x%\"PFMT64x, vA, vA + 1, lB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAvBBvCC:\n \t\t\tvA = (int) buf[1];\n \t\t\tvB = (int) buf[2];\n \t\t\tvC = (int) buf[3];\n-\t\t\tsprintf (str, \" v%i, v%i, v%i\", vA, vB, vC);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, v%i\", vA, vB, vC);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAvBBcCC:\n \t\t\tvA = (int) buf[1];\n \t\t\tvB = (int) buf[2];\n \t\t\tvC = (int) buf[3];\n-\t\t\tsprintf (str, \" v%i, v%i, %#x\", vA, vB, vC);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, %#x\", vA, vB, vC);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAvBcCCCC:\n \t\t\tvA = buf[1] & 0x0f;\n \t\t\tvB = (buf[1] & 0xf0) >> 4;\n \t\t\tvC = (buf[3] << 8) | buf[2];\n-\t\t\tsprintf (str, \" v%i, v%i, %#x\", vA, vB, vC);\n+\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, %#x\", vA, vB, vC);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtoppAA:\n \t\t\tvA = (char) buf[1];\n-\t\t\t//sprintf (str, \" %i\", vA*2); // vA : word -> byte\n+\t\t\t//snprintf (str, sizeof (str), \" %i\", vA*2); // vA : word -> byte\n \t\t\tsnprintf (str, sizeof (str), \" 0x%08\"PFMT64x, a->pc + (vA * 2)); // vA : word -> byte\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n@@ -175,21 +175,21 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\tcase fmtopvAApBBBB: // if-*z\n \t\t\tvA = (int) buf[1];\n \t\t\tvB = (int) (buf[3] << 8 | buf[2]);\n-\t\t\t//sprintf (str, \" v%i, %i\", vA, vB);\n+\t\t\t//snprintf (str, sizeof (str), \" v%i, %i\", vA, vB);\n \t\t\tsnprintf (str, sizeof (str), \" v%i, 0x%08\"PFMT64x, vA, a->pc + (vB * 2));\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtoppAAAAAAAA:\n \t\t\tvA = (int) (buf[2] | (buf[3] << 8) | (buf[4] << 16) | (buf[5] << 24));\n-\t\t\t//sprintf (str, \" %#08x\", vA*2); // vA: word -> byte\n+\t\t\t//snprintf (str, sizeof (str), \" %#08x\", vA*2); // vA: word -> byte\n \t\t\tsnprintf (str, sizeof (str), \" 0x%08\"PFMT64x, a->pc + (vA*2)); // vA : word -> byte\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAvBpCCCC: // if-*\n \t\t\tvA = buf[1] & 0x0f;\n \t\t\tvB = (buf[1] & 0xf0) >> 4;\n \t\t\tvC = (int) (buf[3] << 8 | buf[2]);\n-\t\t\t//sprintf (str, \" v%i, v%i, %i\", vA, vB, vC);\n+\t\t\t//snprintf (str, sizeof (str), \" v%i, v%i, %i\", vA, vB, vC);\n \t\t\tsnprintf (str, sizeof (str),\" v%i, v%i, 0x%08\"PFMT64x, vA, vB, a->pc + (vC * 2));\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n@@ -205,57 +205,57 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\t*str = 0;\n \t\t\tswitch (vA) {\n \t\t\tcase 1:\n-\t\t\t\tsprintf (str, \" {v%i}\", buf[4] & 0x0f);\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f);\n \t\t\t\tbreak;\n \t\t\tcase 2:\n-\t\t\t\tsprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n \t\t\t\tbreak;\n \t\t\tcase 3:\n-\t\t\t\tsprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4, buf[5] & 0x0f);\n \t\t\t\tbreak;\n \t\t\tcase 4:\n-\t\t\t\tsprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);\n \t\t\t\tbreak;\n \t\t\tdefault:\n-\t\t\t\tsprintf (str, \" {}\");\n+\t\t\t\tsnprintf (str, sizeof (str), \" {}\");\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n-\t\t\tsprintf (str, \", [%04x]\", vB);\n+\t\t\tsnprintf (str, sizeof (str), \", [%04x]\", vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtoptinlineIR:\n \t\tcase fmtoptinvokeVSR:\n \t\t\tvA = (int) buf[1];\n \t\t\tvB = (buf[3] << 8) | buf[2];\n \t\t\tvC = (buf[5] << 8) | buf[4];\n-\t\t\tsprintf (str, \" {v%i..v%i}, [%04x]\", vC, vC + vA - 1, vB);\n+\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, [%04x]\", vC, vC + vA - 1, vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtoptinvokeVS:\n \t\t\tvA = (int) (buf[1] & 0xf0) >> 4;\n \t\t\tvB = (buf[3] << 8) | buf[2];\n \t\t\tswitch (vA) {\n \t\t\tcase 1:\n-\t\t\t\tsprintf (str, \" {v%i}\", buf[4] & 0x0f);\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f);\n \t\t\t\tbreak;\n \t\t\tcase 2:\n-\t\t\t\tsprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n \t\t\t\tbreak;\n \t\t\tcase 3:\n-\t\t\t\tsprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f);\n \t\t\t\tbreak;\n \t\t\tcase 4:\n-\t\t\t\tsprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);\n \t\t\t\tbreak;\n \t\t\tdefault:\n-\t\t\t\tsprintf (str, \" {}\");\n+\t\t\t\tsnprintf (str, sizeof (str), \" {}\");\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n-\t\t\tsprintf (str, \", [%04x]\", vB);\n+\t\t\tsnprintf (str, sizeof (str), \", [%04x]\", vB);\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n \t\tcase fmtopvAAtBBBB: // \"sput-*\"\n@@ -264,23 +264,23 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tif (buf[0] == 0x1a) {\n \t\t\t\toffset = R_ASM_GET_OFFSET (a, 's', vB);\n \t\t\t\tif (offset == -1) {\n-\t\t\t\t\tsprintf (str, \" v%i, string+%i\", vA, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, string+%i\", vA, vB);\n \t\t\t\t} else {\n-\t\t\t\t\tsprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset);\n \t\t\t\t}\n \t\t\t} else if (buf[0] == 0x1c || buf[0] == 0x1f || buf[0] == 0x22) {\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'c', vB);\n \t\t\t\tif (!flag_str) {\n-\t\t\t\t\tsprintf (str, \" v%i, class+%i\", vA, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, class+%i\", vA, vB);\n \t\t\t\t} else {\n-\t\t\t\t\tsprintf (str, \" v%i, %s\", vA, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, %s\", vA, flag_str);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'f', vB);\n \t\t\t\tif (!flag_str) {\n-\t\t\t\t\tsprintf (str, \" v%i, field+%i\", vA, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, field+%i\", vA, vB);\n \t\t\t\t} else {\n-\t\t\t\t\tsprintf (str, \" v%i, %s\", vA, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, %s\", vA, flag_str);\n \t\t\t\t}\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n@@ -291,9 +291,9 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tvC = (buf[3]<<8) | buf[2];\n \t\t\toffset = R_ASM_GET_OFFSET (a, 'o', vC);\n \t\t\tif (offset == -1) {\n-\t\t\t\tsprintf (str, \" v%i, v%i, [obj+%04x]\", vA, vB, vC);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, [obj+%04x]\", vA, vB, vC);\n \t\t\t} else {\n-\t\t\t\tsprintf (str, \" v%i, v%i, [0x%\"PFMT64x\"]\", vA, vB, offset);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, [0x%\"PFMT64x\"]\", vA, vB, offset);\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n@@ -302,9 +302,9 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tvB = (buf[3] << 8) | buf[2];\n \t\t\toffset = R_ASM_GET_OFFSET (a, 't', vB);\n \t\t\tif (offset == -1) {\n-\t\t\t\tsprintf (str, \" v%i, thing+%i\", vA, vB);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, thing+%i\", vA, vB);\n \t\t\t} else {\n-\t\t\t\tsprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset);\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n@@ -315,18 +315,18 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tif (buf[0] == 0x20 || buf[0] == 0x23) { //instance-of & new-array\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'c', vC);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \" v%i, v%i, %s\", vA, vB, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, %s\", vA, vB, flag_str);\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tsprintf (str, \" v%i, v%i, class+%i\", vA, vB, vC);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, class+%i\", vA, vB, vC);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'f', vC);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \" v%i, v%i, %s\", vA, vB, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, %s\", vA, vB, flag_str);\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tsprintf (str, \" v%i, v%i, field+%i\", vA, vB, vC);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" v%i, v%i, field+%i\", vA, vB, vC);\n \t\t\t\t}\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n@@ -336,10 +336,10 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tvB = (int) (buf[5] | (buf[4] << 8) | (buf[3] << 16) | (buf[2] << 24));\n \t\t\toffset = R_ASM_GET_OFFSET (a, 's', vB);\n \t\t\tif (offset == -1) {\n-\t\t\t\tsprintf (str, \" v%i, string+%i\", vA, vB);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, string+%i\", vA, vB);\n \t\t\t}\n \t\t\telse {\n-\t\t\t\tsprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset);\n+\t\t\t\tsnprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset);\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tbreak;\n@@ -350,18 +350,18 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tif (buf[0] == 0x25) { // filled-new-array/range\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'c', vB);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tsprintf (str, \" {v%i..v%i}, class+%i\", vC, vC + vA - 1, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, class+%i\", vC, vC + vA - 1, vB);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'm', vB);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str);\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tsprintf (str, \" {v%i..v%i}, method+%i\", vC, vC + vA - 1, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i..v%i}, method+%i\", vC, vC + vA - 1, vB);\n \t\t\t\t}\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n@@ -371,40 +371,40 @@ static int dalvik_disassemble (RAsm *a, RAsmOp *op, const ut8 *buf, int len) {\n \t\t\tvB = (buf[3] << 8) | buf[2];\n \t\t\tswitch (vA) {\n \t\t\t\tcase 1:\n-\t\t\t\t\tsprintf (str, \" {v%i}\", buf[4] & 0x0f);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f);\n \t\t\t\t\tbreak;\n \t\t\t\tcase 2:\n-\t\t\t\t\tsprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4);\n \t\t\t\t\tbreak;\n \t\t\t\tcase 3:\n-\t\t\t\t\tsprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f);\n \t\t\t\t\tbreak;\n \t\t\t\tcase 4:\n-\t\t\t\t\tsprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4);\n \t\t\t\t\tbreak;\n \t\t\t\tcase 5:\n-\t\t\t\t\tsprintf (str, \" {v%i, v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,\n \t\t\t\t\t\t\t(buf[4] & 0xf0) >> 4, buf[5] & 0x0f, (buf[5] & 0xf0) >> 4, buf[1] & 0x0f); // TOODO: recheck this\n \t\t\t\t\tbreak;\n \t\t\t\tdefault:\n-\t\t\t\t\tsprintf (str, \" {}\");\n+\t\t\t\t\tsnprintf (str, sizeof (str), \" {}\");\n \t\t\t}\n \t\t\tstrasm = r_str_concat (strasm, str);\n \t\t\tif (buf[0] == 0x24) { // filled-new-array\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'c', vB);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \", %s ; 0x%x\", flag_str, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \", %s ; 0x%x\", flag_str, vB);\n \t\t\t\t} else {\n-\t\t\t\t\tsprintf (str, \", class+%i\", vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \", class+%i\", vB);\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tflag_str = R_ASM_GET_NAME (a, 'm', vB);\n \t\t\t\tif (flag_str) {\n-\t\t\t\t\tsprintf (str, \", %s ; 0x%x\", flag_str, vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \", %s ; 0x%x\", flag_str, vB);\n \t\t\t\t} else {\n-\t\t\t\t\tsprintf (str, \", method+%i\", vB);\n+\t\t\t\t\tsnprintf (str, sizeof (str), \", method+%i\", vB);\n \t\t\t\t}\n \n \t\t\t}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a7952c1e8041ec75e4e97559f0e5a62ed788d34a",
            "date": "2025-01-24T20:15:44Z",
            "author_login": "trufae"
          },
          {
            "sha": "40fe8e885d09148f4ef6d76dbd73b7e829123267",
            "date": "2025-01-24T18:59:45Z",
            "author_login": "radare"
          },
          {
            "sha": "8741d91143a8b3e54df0804142d12d4f95d16afc",
            "date": "2025-01-24T16:34:02Z",
            "author_login": "radare"
          },
          {
            "sha": "be8877140891d1c33721a136d26007a0df5b61db",
            "date": "2025-01-24T16:34:02Z",
            "author_login": "jukuisma"
          },
          {
            "sha": "3704f48fea7e2edc41e51cde95dd009c4c9bd00a",
            "date": "2025-01-24T16:29:42Z",
            "author_login": "jukuisma"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-119",
    "description": "The dalvik_disassemble function in libr/asm/p/asm_dalvik.c in radare2 1.2.1 allows remote attackers to cause a denial of service (stack-based buffer overflow and application crash) or possibly have unspecified other impact via a crafted DEX file.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-04-03T05:59:00.957",
    "last_modified": "2024-11-21T03:29:47.730",
    "fix_date": "2017-03-02T19:16:22Z"
  },
  "references": [
    {
      "url": "http://www.securityfocus.com/bid/97313",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/radare/radare2/commit/f41e941341e44aa86edd4483c4487ec09a074257",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/radare/radare2/issues/6885",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97313",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/radare/radare2/commit/f41e941341e44aa86edd4483c4487ec09a074257",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/radare/radare2/issues/6885",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:54.840094",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "radare2",
    "owner": "radare",
    "created_at": "2012-07-03T07:42:26Z",
    "updated_at": "2025-01-26T01:36:40Z",
    "pushed_at": "2025-01-24T20:15:44Z",
    "size": 180125,
    "stars": 21051,
    "forks": 3034,
    "open_issues": 875,
    "watchers": 21051,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29151635,
      "Makefile": 261654,
      "Shell": 144962,
      "Meson": 123696,
      "C++": 86180,
      "HTML": 55704,
      "Rebol": 54153,
      "Python": 38146,
      "Roff": 36722,
      "JavaScript": 23584,
      "CSS": 19465,
      "Batchfile": 8970,
      "Perl": 6449,
      "sed": 4448,
      "R": 1960,
      "Rez": 1386,
      "Assembly": 939,
      "Vala": 839,
      "Wren": 460,
      "Gnuplot": 429,
      "C#": 164,
      "Dart": 125,
      "Rascal": 45
    },
    "commit_activity": {
      "total_commits_last_year": 1630,
      "avg_commits_per_week": 31.346153846153847,
      "days_active_last_year": 297
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:54:31.187948"
  }
}