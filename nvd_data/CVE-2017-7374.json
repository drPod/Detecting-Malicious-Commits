{
  "cve_id": "CVE-2017-7374",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "1b53cf9815bb4744958d41f3795d5d5a1d365e2d",
    "related_commits": [
      "1b53cf9815bb4744958d41f3795d5d5a1d365e2d",
      "1b53cf9815bb4744958d41f3795d5d5a1d365e2d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "1b53cf9815bb4744958d41f3795d5d5a1d365e2d",
      "commit_date": "2017-02-21T23:07:11Z",
      "author": {
        "login": "ebiggers",
        "type": "User",
        "stats": {
          "total_commits": 1657,
          "average_weekly_commits": 1.3912678421494542,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 285
        }
      },
      "commit_message": {
        "title": "fscrypt: remove broken support for detecting keyring key revocation",
        "length": 2304,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 68,
        "additions": 11,
        "deletions": 57
      },
      "files": [
        {
          "filename": "fs/crypto/crypto.c",
          "status": "modified",
          "additions": 1,
          "deletions": 9,
          "patch": "@@ -327,7 +327,6 @@ EXPORT_SYMBOL(fscrypt_decrypt_page);\n static int fscrypt_d_revalidate(struct dentry *dentry, unsigned int flags)\n {\n \tstruct dentry *dir;\n-\tstruct fscrypt_info *ci;\n \tint dir_has_key, cached_with_key;\n \n \tif (flags & LOOKUP_RCU)\n@@ -339,18 +338,11 @@ static int fscrypt_d_revalidate(struct dentry *dentry, unsigned int flags)\n \t\treturn 0;\n \t}\n \n-\tci = d_inode(dir)->i_crypt_info;\n-\tif (ci && ci->ci_keyring_key &&\n-\t    (ci->ci_keyring_key->flags & ((1 << KEY_FLAG_INVALIDATED) |\n-\t\t\t\t\t  (1 << KEY_FLAG_REVOKED) |\n-\t\t\t\t\t  (1 << KEY_FLAG_DEAD))))\n-\t\tci = NULL;\n-\n \t/* this should eventually be an flag in d_flags */\n \tspin_lock(&dentry->d_lock);\n \tcached_with_key = dentry->d_flags & DCACHE_ENCRYPTED_WITH_KEY;\n \tspin_unlock(&dentry->d_lock);\n-\tdir_has_key = (ci != NULL);\n+\tdir_has_key = (d_inode(dir)->i_crypt_info != NULL);\n \tdput(dir);\n \n \t/*"
        },
        {
          "filename": "fs/crypto/fname.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -350,7 +350,7 @@ int fscrypt_setup_filename(struct inode *dir, const struct qstr *iname,\n \t\tfname->disk_name.len = iname->len;\n \t\treturn 0;\n \t}\n-\tret = fscrypt_get_crypt_info(dir);\n+\tret = fscrypt_get_encryption_info(dir);\n \tif (ret && ret != -EOPNOTSUPP)\n \t\treturn ret;\n "
        },
        {
          "filename": "fs/crypto/fscrypt_private.h",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -67,7 +67,6 @@ struct fscrypt_info {\n \tu8 ci_filename_mode;\n \tu8 ci_flags;\n \tstruct crypto_skcipher *ci_ctfm;\n-\tstruct key *ci_keyring_key;\n \tu8 ci_master_key[FS_KEY_DESCRIPTOR_SIZE];\n };\n \n@@ -101,7 +100,4 @@ extern int fscrypt_do_page_crypto(const struct inode *inode,\n extern struct page *fscrypt_alloc_bounce_page(struct fscrypt_ctx *ctx,\n \t\t\t\t\t      gfp_t gfp_flags);\n \n-/* keyinfo.c */\n-extern int fscrypt_get_crypt_info(struct inode *);\n-\n #endif /* _FSCRYPT_PRIVATE_H */"
        },
        {
          "filename": "fs/crypto/keyinfo.c",
          "status": "modified",
          "additions": 9,
          "deletions": 43,
          "patch": "@@ -95,18 +95,17 @@ static int validate_user_key(struct fscrypt_info *crypt_info,\n \tkfree(description);\n \tif (IS_ERR(keyring_key))\n \t\treturn PTR_ERR(keyring_key);\n+\tdown_read(&keyring_key->sem);\n \n \tif (keyring_key->type != &key_type_logon) {\n \t\tprintk_once(KERN_WARNING\n \t\t\t\t\"%s: key type must be logon\\n\", __func__);\n \t\tres = -ENOKEY;\n \t\tgoto out;\n \t}\n-\tdown_read(&keyring_key->sem);\n \tukp = user_key_payload(keyring_key);\n \tif (ukp->datalen != sizeof(struct fscrypt_key)) {\n \t\tres = -EINVAL;\n-\t\tup_read(&keyring_key->sem);\n \t\tgoto out;\n \t}\n \tmaster_key = (struct fscrypt_key *)ukp->data;\n@@ -117,17 +116,11 @@ static int validate_user_key(struct fscrypt_info *crypt_info,\n \t\t\t\t\"%s: key size incorrect: %d\\n\",\n \t\t\t\t__func__, master_key->size);\n \t\tres = -ENOKEY;\n-\t\tup_read(&keyring_key->sem);\n \t\tgoto out;\n \t}\n \tres = derive_key_aes(ctx->nonce, master_key->raw, raw_key);\n-\tup_read(&keyring_key->sem);\n-\tif (res)\n-\t\tgoto out;\n-\n-\tcrypt_info->ci_keyring_key = keyring_key;\n-\treturn 0;\n out:\n+\tup_read(&keyring_key->sem);\n \tkey_put(keyring_key);\n \treturn res;\n }\n@@ -169,12 +162,11 @@ static void put_crypt_info(struct fscrypt_info *ci)\n \tif (!ci)\n \t\treturn;\n \n-\tkey_put(ci->ci_keyring_key);\n \tcrypto_free_skcipher(ci->ci_ctfm);\n \tkmem_cache_free(fscrypt_info_cachep, ci);\n }\n \n-int fscrypt_get_crypt_info(struct inode *inode)\n+int fscrypt_get_encryption_info(struct inode *inode)\n {\n \tstruct fscrypt_info *crypt_info;\n \tstruct fscrypt_context ctx;\n@@ -184,21 +176,15 @@ int fscrypt_get_crypt_info(struct inode *inode)\n \tu8 *raw_key = NULL;\n \tint res;\n \n+\tif (inode->i_crypt_info)\n+\t\treturn 0;\n+\n \tres = fscrypt_initialize(inode->i_sb->s_cop->flags);\n \tif (res)\n \t\treturn res;\n \n \tif (!inode->i_sb->s_cop->get_context)\n \t\treturn -EOPNOTSUPP;\n-retry:\n-\tcrypt_info = ACCESS_ONCE(inode->i_crypt_info);\n-\tif (crypt_info) {\n-\t\tif (!crypt_info->ci_keyring_key ||\n-\t\t\t\tkey_validate(crypt_info->ci_keyring_key) == 0)\n-\t\t\treturn 0;\n-\t\tfscrypt_put_encryption_info(inode, crypt_info);\n-\t\tgoto retry;\n-\t}\n \n \tres = inode->i_sb->s_cop->get_context(inode, &ctx, sizeof(ctx));\n \tif (res < 0) {\n@@ -229,7 +215,6 @@ int fscrypt_get_crypt_info(struct inode *inode)\n \tcrypt_info->ci_data_mode = ctx.contents_encryption_mode;\n \tcrypt_info->ci_filename_mode = ctx.filenames_encryption_mode;\n \tcrypt_info->ci_ctfm = NULL;\n-\tcrypt_info->ci_keyring_key = NULL;\n \tmemcpy(crypt_info->ci_master_key, ctx.master_key_descriptor,\n \t\t\t\tsizeof(crypt_info->ci_master_key));\n \n@@ -273,21 +258,16 @@ int fscrypt_get_crypt_info(struct inode *inode)\n \tif (res)\n \t\tgoto out;\n \n-\tkzfree(raw_key);\n-\traw_key = NULL;\n-\tif (cmpxchg(&inode->i_crypt_info, NULL, crypt_info) != NULL) {\n-\t\tput_crypt_info(crypt_info);\n-\t\tgoto retry;\n-\t}\n-\treturn 0;\n-\n+\tif (cmpxchg(&inode->i_crypt_info, NULL, crypt_info) == NULL)\n+\t\tcrypt_info = NULL;\n out:\n \tif (res == -ENOKEY)\n \t\tres = 0;\n \tput_crypt_info(crypt_info);\n \tkzfree(raw_key);\n \treturn res;\n }\n+EXPORT_SYMBOL(fscrypt_get_encryption_info);\n \n void fscrypt_put_encryption_info(struct inode *inode, struct fscrypt_info *ci)\n {\n@@ -305,17 +285,3 @@ void fscrypt_put_encryption_info(struct inode *inode, struct fscrypt_info *ci)\n \tput_crypt_info(ci);\n }\n EXPORT_SYMBOL(fscrypt_put_encryption_info);\n-\n-int fscrypt_get_encryption_info(struct inode *inode)\n-{\n-\tstruct fscrypt_info *ci = inode->i_crypt_info;\n-\n-\tif (!ci ||\n-\t\t(ci->ci_keyring_key &&\n-\t\t (ci->ci_keyring_key->flags & ((1 << KEY_FLAG_INVALIDATED) |\n-\t\t\t\t\t       (1 << KEY_FLAG_REVOKED) |\n-\t\t\t\t\t       (1 << KEY_FLAG_DEAD)))))\n-\t\treturn fscrypt_get_crypt_info(inode);\n-\treturn 0;\n-}\n-EXPORT_SYMBOL(fscrypt_get_encryption_info);"
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-416",
    "description": "Use-after-free vulnerability in fs/crypto/ in the Linux kernel before 4.10.7 allows local users to cause a denial of service (NULL pointer dereference) or possibly gain privileges by revoking keyring keys being used for ext4, f2fs, or ubifs encryption, causing cryptographic transform objects to be freed prematurely.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2017-03-31T20:59:00.167",
    "last_modified": "2024-11-21T03:31:45.180",
    "fix_date": "2017-02-21T23:07:11Z"
  },
  "references": [
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1b53cf9815bb4744958d41f3795d5d5a1d365e2d",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97308",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/1b53cf9815bb4744958d41f3795d5d5a1d365e2d",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://source.android.com/security/bulletin/2017-10-01",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.kernel.org/pub/linux/kernel/v4.x/ChangeLog-4.10.7",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=1b53cf9815bb4744958d41f3795d5d5a1d365e2d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97308",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/1b53cf9815bb4744958d41f3795d5d5a1d365e2d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://source.android.com/security/bulletin/2017-10-01",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.kernel.org/pub/linux/kernel/v4.x/ChangeLog-4.10.7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:54.836022",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}