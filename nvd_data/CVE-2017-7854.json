{
  "cve_id": "CVE-2017-7854",
  "github_data": {
    "repository": "radare/radare2",
    "fix_commit": "d2632f6483a3ceb5d8e0a5fb11142c51c43978b4",
    "related_commits": [
      "d2632f6483a3ceb5d8e0a5fb11142c51c43978b4",
      "d2632f6483a3ceb5d8e0a5fb11142c51c43978b4"
    ],
    "patch_url": "https://github.com/radare/radare2/commit/d2632f6483a3ceb5d8e0a5fb11142c51c43978b4.patch",
    "fix_commit_details": {
      "sha": "d2632f6483a3ceb5d8e0a5fb11142c51c43978b4",
      "commit_date": "2017-04-13T13:31:24Z",
      "author": {
        "login": "radare",
        "type": "User",
        "stats": {
          "total_commits": 16352,
          "average_weekly_commits": 19.630252100840337,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 785
        }
      },
      "commit_message": {
        "title": "Fix crash in fuzzed wasm r2_hoobr_consume_init_expr",
        "length": 51,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 65,
        "additions": 27,
        "deletions": 38
      },
      "files": [
        {
          "filename": "libr/bin/format/wasm/wasm.c",
          "status": "modified",
          "additions": 27,
          "deletions": 38,
          "patch": "@@ -67,11 +67,12 @@ static size_t consume_str (ut8 *buf, ut8 *max, size_t sz, char *out, ut32 *offse\n \tif (offset) *offset += sz;\n \treturn sz;\n }\n+\n static size_t consume_init_expr (ut8 *buf, ut8 *max, ut8 eoc, void *out, ut32 *offset) {\n \tut32 i = 0;\n \twhile (buf + i < max && buf[i] != eoc) {\n \t\t// TODO: calc the expresion with the bytcode (ESIL?)\n-\t\ti += 1;\n+\t\ti++;\n \t}\n \tif (buf[i] != eoc) {\n \t\treturn 0;\n@@ -448,51 +449,50 @@ static RList *r_bin_wasm_get_code_entries (RBinWasmObj *bin, RBinWasmSection *se\n }\n \n static RList *r_bin_wasm_get_data_entries (RBinWasmObj *bin, RBinWasmSection *sec) {\n-\n \tRList *ret = NULL;\n \tRBinWasmDataEntry *ptr = NULL;\n+\tut32 len =  sec->payload_len;\n \n \tif (!(ret = r_list_newf ((RListFree)free))) {\n \t\treturn NULL;\n \t}\n \n \tut8* buf = bin->buf->buf + (ut32)sec->payload_data;\n-\tut32 len =  sec->payload_len;\n+\tint buflen = bin->buf->length - (ut32)sec->payload_data;\n \tut32 count = sec->count;\n \tut32 i = 0, r = 0;\n \tsize_t n = 0;\n \n-\twhile (i < len && r < count) {\n-\n+\twhile (i < len && len < buflen && r < count) {\n \t\tif (!(ptr = R_NEW0 (RBinWasmDataEntry))) {\n \t\t\treturn ret;\n \t\t}\n-\n \t\tif (!(consume_u32 (buf + i, buf + len, &ptr->index, &i))) {\n-\t\t\tfree (ptr);\n-\t\t\treturn ret;\n+\t\t\tgoto beach;\n+\t\t}\n+\t\tif (i + 4 >= buflen) {\n+\t\t\tgoto beach;\n \t\t}\n-\n \t\tif (!(n = consume_init_expr (buf + i, buf + len, R_BIN_WASM_END_OF_CODE, NULL, &i))) {\n-\t\t\tfree (ptr);\n-\t\t\treturn ret;\n+\t\t\tgoto beach;\n \t\t}\n-\n \t\tptr->offset.len = n;\n-\n \t\tif (!(consume_u32 (buf + i, buf + len, &ptr->size, &i))) {\t\n-\t\t\tfree (ptr);\n-\t\t\treturn ret;\n+\t\t\tgoto beach;\n+\t\t}\n+\t\tif (i + 4 >= buflen) {\n+\t\t\tgoto beach;\n \t\t}\n-\n \t\tptr->data = sec->payload_data + i;\n \n \t\tr_list_append (ret, ptr);\n \n \t\tr += 1;\n \n \t}\n-\n+\treturn ret;\n+beach:\n+\tfree (ptr);\n \treturn ret;\n }\n \n@@ -593,16 +593,13 @@ static RList *r_bin_wasm_get_table_entries (RBinWasmObj *bin, RBinWasmSection *s\n static RList *r_bin_wasm_get_global_entries (RBinWasmObj *bin, RBinWasmSection *sec) {\n \tRList *ret = NULL;\n \tRBinWasmGlobalEntry *ptr = NULL;\n-\tint buflen = bin->buf->length;\n-\tif (sec->payload_data + 32 > buflen) {\n-\t\treturn NULL;\n-\t}\n \n \tif (!(ret = r_list_newf ((RListFree)free))) {\n \t\treturn NULL;\n \t}\n \n \tut8* buf = bin->buf->buf + (ut32)sec->payload_data;\n+\tint buflen = bin->buf->length - (ut32)sec->payload_data;\n \tut32 len =  sec->payload_len;\n \tut32 count = sec->count;\n \tut32 i = 0, r = 0;\n@@ -631,7 +628,6 @@ static RList *r_bin_wasm_get_global_entries (RBinWasmObj *bin, RBinWasmSection *\n }\n \n static RList *r_bin_wasm_get_element_entries (RBinWasmObj *bin, RBinWasmSection *sec) {\n-\n \tRList *ret = NULL;\n \tRBinWasmElementEntry *ptr = NULL;\n \n@@ -640,47 +636,40 @@ static RList *r_bin_wasm_get_element_entries (RBinWasmObj *bin, RBinWasmSection\n \t}\n \n \tut8* buf = bin->buf->buf + (ut32)sec->payload_data;\n+\tint buflen = bin->buf->length - (ut32)sec->payload_data;\n \tut32 len =  sec->payload_len;\n \tut32 count = sec->count;\n \tut32 i = 0, r = 0;\n \n-\twhile (i < len && r < count) {\n-\n+\twhile (i < len && len < buflen && r < count) {\n \t\tif (!(ptr = R_NEW0 (RBinWasmElementEntry))) {\n \t\t\treturn ret;\n \t\t}\n-\n \t\tif (!(consume_u32 (buf + i, buf + len, &ptr->index, &i))) {\n-\t\t\tfree (ptr);\n-\t\t\treturn ret;\n+\t\t\tgoto beach;\n \t\t}\n-\n \t\tif (!(consume_init_expr (buf + i, buf + len, R_BIN_WASM_END_OF_CODE, NULL, &i))) {\n-\t\t\tfree (ptr);\n-\t\t\treturn ret;\n+\t\t\tgoto beach;\n \t\t}\n-\n \t\tif (!(consume_u32 (buf + i, buf + len, &ptr->num_elem, &i))) {\n-\t\t\tfree (ptr);\n-\t\t\treturn ret;\n+\t\t\tgoto beach;\n \t\t}\n-\n \t\tut32 j = 0;\n-\t\twhile (i < len && j < ptr->num_elem\t) {\n+\t\twhile (i < len && j < ptr->num_elem) {\n \t\t\t// TODO: allocate space and fill entry\n \t\t\tut32 e;\n \t\t\tif (!(consume_u32 (buf + i, buf + len, &e, &i))) {\n \t\t\t\tfree (ptr);\n \t\t\t\treturn ret;\n \t\t\t}\n \t\t}\n-\n \t\tr_list_append (ret, ptr);\n \n \t\tr += 1;\n-\n \t}\n-\n+\treturn ret;\n+beach:\n+\tfree (ptr);\n \treturn ret;\n }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0f85675c7a5d542a89318b62d4a4bc997e595e03",
            "date": "2025-01-14T11:01:39Z",
            "author_login": "radare"
          },
          {
            "sha": "92d45a6034fe60123adc23bf49b398809fe36d25",
            "date": "2025-01-14T11:11:00Z",
            "author_login": "radare"
          },
          {
            "sha": "07be136859c56f96a692c8d5d1a3531345f16a0c",
            "date": "2025-01-14T10:46:07Z",
            "author_login": "radare"
          },
          {
            "sha": "05ebe2e92fc1905702201106228b285c80bd958b",
            "date": "2025-01-14T10:28:47Z",
            "author_login": "radare"
          },
          {
            "sha": "e672c13d0f3620daf80a718e47d759f933bd8961",
            "date": "2025-01-14T10:18:30Z",
            "author_login": "trufae"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-125",
    "description": "The consume_init_expr function in wasm.c in radare2 1.3.0 allows remote attackers to cause a denial of service (heap-based buffer over-read and application crash) via a crafted Web Assembly file.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-04-13T16:59:01.317",
    "last_modified": "2024-11-21T03:32:49.273",
    "fix_date": "2017-04-13T13:31:24Z"
  },
  "references": [
    {
      "url": "http://www.securityfocus.com/bid/97648",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/radare/radare2/commit/d2632f6483a3ceb5d8e0a5fb11142c51c43978b4",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/radare/radare2/issues/7265",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97648",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/radare/radare2/commit/d2632f6483a3ceb5d8e0a5fb11142c51c43978b4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/radare/radare2/issues/7265",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:54.855253",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "radare2",
    "owner": "radare",
    "created_at": "2012-07-03T07:42:26Z",
    "updated_at": "2025-01-14T11:39:09Z",
    "pushed_at": "2025-01-14T11:39:05Z",
    "size": 182812,
    "stars": 20990,
    "forks": 3027,
    "open_issues": 874,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29143253,
      "Makefile": 262919,
      "Shell": 145034,
      "Meson": 123192,
      "C++": 82794,
      "HTML": 55704,
      "Rebol": 54153,
      "Python": 38146,
      "Roff": 36722,
      "JavaScript": 23584,
      "CSS": 19465,
      "Batchfile": 8970,
      "Perl": 6449,
      "sed": 4448,
      "R": 1960,
      "Rez": 1386,
      "Assembly": 939,
      "Vala": 839,
      "Wren": 460,
      "Gnuplot": 429,
      "C#": 164,
      "Dart": 125,
      "Rascal": 45
    },
    "commit_activity": {
      "total_commits_last_year": 1594,
      "avg_commits_per_week": 30.653846153846153,
      "days_active_last_year": 294
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:06:47.409274"
  }
}