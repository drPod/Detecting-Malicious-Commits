{
  "cve_id": "CVE-2017-8062",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "606142af57dad981b78707234cfbd15f9f7b7125",
    "related_commits": [
      "606142af57dad981b78707234cfbd15f9f7b7125",
      "606142af57dad981b78707234cfbd15f9f7b7125"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "606142af57dad981b78707234cfbd15f9f7b7125",
      "commit_date": "2017-02-15T20:29:15Z",
      "author": {
        "login": "u1f35c",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[media] dw2102: don't do DMA on stack",
        "length": 805,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 244,
        "additions": 145,
        "deletions": 99
      },
      "files": [
        {
          "filename": "drivers/media/usb/dvb-usb/dw2102.c",
          "status": "modified",
          "additions": 145,
          "deletions": 99,
          "patch": "@@ -68,6 +68,7 @@\n struct dw2102_state {\n \tu8 initialized;\n \tu8 last_lock;\n+\tu8 data[MAX_XFER_SIZE + 4];\n \tstruct i2c_client *i2c_client_demod;\n \tstruct i2c_client *i2c_client_tuner;\n \n@@ -661,62 +662,72 @@ static int su3000_i2c_transfer(struct i2c_adapter *adap, struct i2c_msg msg[],\n \t\t\t\t\t\t\t\tint num)\n {\n \tstruct dvb_usb_device *d = i2c_get_adapdata(adap);\n-\tu8 obuf[0x40], ibuf[0x40];\n+\tstruct dw2102_state *state;\n \n \tif (!d)\n \t\treturn -ENODEV;\n+\n+\tstate = d->priv;\n+\n \tif (mutex_lock_interruptible(&d->i2c_mutex) < 0)\n \t\treturn -EAGAIN;\n+\tif (mutex_lock_interruptible(&d->data_mutex) < 0) {\n+\t\tmutex_unlock(&d->i2c_mutex);\n+\t\treturn -EAGAIN;\n+\t}\n \n \tswitch (num) {\n \tcase 1:\n \t\tswitch (msg[0].addr) {\n \t\tcase SU3000_STREAM_CTRL:\n-\t\t\tobuf[0] = msg[0].buf[0] + 0x36;\n-\t\t\tobuf[1] = 3;\n-\t\t\tobuf[2] = 0;\n-\t\t\tif (dvb_usb_generic_rw(d, obuf, 3, ibuf, 0, 0) < 0)\n+\t\t\tstate->data[0] = msg[0].buf[0] + 0x36;\n+\t\t\tstate->data[1] = 3;\n+\t\t\tstate->data[2] = 0;\n+\t\t\tif (dvb_usb_generic_rw(d, state->data, 3,\n+\t\t\t\t\tstate->data, 0, 0) < 0)\n \t\t\t\terr(\"i2c transfer failed.\");\n \t\t\tbreak;\n \t\tcase DW2102_RC_QUERY:\n-\t\t\tobuf[0] = 0x10;\n-\t\t\tif (dvb_usb_generic_rw(d, obuf, 1, ibuf, 2, 0) < 0)\n+\t\t\tstate->data[0] = 0x10;\n+\t\t\tif (dvb_usb_generic_rw(d, state->data, 1,\n+\t\t\t\t\tstate->data, 2, 0) < 0)\n \t\t\t\terr(\"i2c transfer failed.\");\n-\t\t\tmsg[0].buf[1] = ibuf[0];\n-\t\t\tmsg[0].buf[0] = ibuf[1];\n+\t\t\tmsg[0].buf[1] = state->data[0];\n+\t\t\tmsg[0].buf[0] = state->data[1];\n \t\t\tbreak;\n \t\tdefault:\n \t\t\t/* always i2c write*/\n-\t\t\tobuf[0] = 0x08;\n-\t\t\tobuf[1] = msg[0].addr;\n-\t\t\tobuf[2] = msg[0].len;\n+\t\t\tstate->data[0] = 0x08;\n+\t\t\tstate->data[1] = msg[0].addr;\n+\t\t\tstate->data[2] = msg[0].len;\n \n-\t\t\tmemcpy(&obuf[3], msg[0].buf, msg[0].len);\n+\t\t\tmemcpy(&state->data[3], msg[0].buf, msg[0].len);\n \n-\t\t\tif (dvb_usb_generic_rw(d, obuf, msg[0].len + 3,\n-\t\t\t\t\t\tibuf, 1, 0) < 0)\n+\t\t\tif (dvb_usb_generic_rw(d, state->data, msg[0].len + 3,\n+\t\t\t\t\t\tstate->data, 1, 0) < 0)\n \t\t\t\terr(\"i2c transfer failed.\");\n \n \t\t}\n \t\tbreak;\n \tcase 2:\n \t\t/* always i2c read */\n-\t\tobuf[0] = 0x09;\n-\t\tobuf[1] = msg[0].len;\n-\t\tobuf[2] = msg[1].len;\n-\t\tobuf[3] = msg[0].addr;\n-\t\tmemcpy(&obuf[4], msg[0].buf, msg[0].len);\n-\n-\t\tif (dvb_usb_generic_rw(d, obuf, msg[0].len + 4,\n-\t\t\t\t\tibuf, msg[1].len + 1, 0) < 0)\n+\t\tstate->data[0] = 0x09;\n+\t\tstate->data[1] = msg[0].len;\n+\t\tstate->data[2] = msg[1].len;\n+\t\tstate->data[3] = msg[0].addr;\n+\t\tmemcpy(&state->data[4], msg[0].buf, msg[0].len);\n+\n+\t\tif (dvb_usb_generic_rw(d, state->data, msg[0].len + 4,\n+\t\t\t\t\tstate->data, msg[1].len + 1, 0) < 0)\n \t\t\terr(\"i2c transfer failed.\");\n \n-\t\tmemcpy(msg[1].buf, &ibuf[1], msg[1].len);\n+\t\tmemcpy(msg[1].buf, &state->data[1], msg[1].len);\n \t\tbreak;\n \tdefault:\n \t\twarn(\"more than 2 i2c messages at a time is not handled yet.\");\n \t\tbreak;\n \t}\n+\tmutex_unlock(&d->data_mutex);\n \tmutex_unlock(&d->i2c_mutex);\n \treturn num;\n }\n@@ -844,17 +855,23 @@ static int su3000_streaming_ctrl(struct dvb_usb_adapter *adap, int onoff)\n static int su3000_power_ctrl(struct dvb_usb_device *d, int i)\n {\n \tstruct dw2102_state *state = (struct dw2102_state *)d->priv;\n-\tu8 obuf[] = {0xde, 0};\n+\tint ret = 0;\n \n \tinfo(\"%s: %d, initialized %d\", __func__, i, state->initialized);\n \n \tif (i && !state->initialized) {\n+\t\tmutex_lock(&d->data_mutex);\n+\n+\t\tstate->data[0] = 0xde;\n+\t\tstate->data[1] = 0;\n+\n \t\tstate->initialized = 1;\n \t\t/* reset board */\n-\t\treturn dvb_usb_generic_rw(d, obuf, 2, NULL, 0, 0);\n+\t\tret = dvb_usb_generic_rw(d, state->data, 2, NULL, 0, 0);\n+\t\tmutex_unlock(&d->data_mutex);\n \t}\n \n-\treturn 0;\n+\treturn ret;\n }\n \n static int su3000_read_mac_address(struct dvb_usb_device *d, u8 mac[6])\n@@ -1309,49 +1326,57 @@ static int prof_7500_frontend_attach(struct dvb_usb_adapter *d)\n \treturn 0;\n }\n \n-static int su3000_frontend_attach(struct dvb_usb_adapter *d)\n+static int su3000_frontend_attach(struct dvb_usb_adapter *adap)\n {\n-\tu8 obuf[3] = { 0xe, 0x80, 0 };\n-\tu8 ibuf[] = { 0 };\n+\tstruct dvb_usb_device *d = adap->dev;\n+\tstruct dw2102_state *state = d->priv;\n+\n+\tmutex_lock(&d->data_mutex);\n+\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x80;\n+\tstate->data[2] = 0;\n \n-\tif (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \n-\tobuf[0] = 0xe;\n-\tobuf[1] = 0x02;\n-\tobuf[2] = 1;\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x02;\n+\tstate->data[2] = 1;\n \n-\tif (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \tmsleep(300);\n \n-\tobuf[0] = 0xe;\n-\tobuf[1] = 0x83;\n-\tobuf[2] = 0;\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x83;\n+\tstate->data[2] = 0;\n \n-\tif (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \n-\tobuf[0] = 0xe;\n-\tobuf[1] = 0x83;\n-\tobuf[2] = 1;\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x83;\n+\tstate->data[2] = 1;\n \n-\tif (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \n-\tobuf[0] = 0x51;\n+\tstate->data[0] = 0x51;\n \n-\tif (dvb_usb_generic_rw(d->dev, obuf, 1, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 1, state->data, 1, 0) < 0)\n \t\terr(\"command 0x51 transfer failed.\");\n \n-\td->fe_adap[0].fe = dvb_attach(ds3000_attach, &su3000_ds3000_config,\n-\t\t\t\t\t&d->dev->i2c_adap);\n-\tif (d->fe_adap[0].fe == NULL)\n+\tmutex_unlock(&d->data_mutex);\n+\n+\tadap->fe_adap[0].fe = dvb_attach(ds3000_attach, &su3000_ds3000_config,\n+\t\t\t\t\t&d->i2c_adap);\n+\tif (adap->fe_adap[0].fe == NULL)\n \t\treturn -EIO;\n \n-\tif (dvb_attach(ts2020_attach, d->fe_adap[0].fe,\n+\tif (dvb_attach(ts2020_attach, adap->fe_adap[0].fe,\n \t\t\t\t&dw2104_ts2020_config,\n-\t\t\t\t&d->dev->i2c_adap)) {\n+\t\t\t\t&d->i2c_adap)) {\n \t\tinfo(\"Attached DS3000/TS2020!\");\n \t\treturn 0;\n \t}\n@@ -1360,47 +1385,55 @@ static int su3000_frontend_attach(struct dvb_usb_adapter *d)\n \treturn -EIO;\n }\n \n-static int t220_frontend_attach(struct dvb_usb_adapter *d)\n+static int t220_frontend_attach(struct dvb_usb_adapter *adap)\n {\n-\tu8 obuf[3] = { 0xe, 0x87, 0 };\n-\tu8 ibuf[] = { 0 };\n+\tstruct dvb_usb_device *d = adap->dev;\n+\tstruct dw2102_state *state = d->priv;\n+\n+\tmutex_lock(&d->data_mutex);\n \n-\tif (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x87;\n+\tstate->data[2] = 0x0;\n+\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \n-\tobuf[0] = 0xe;\n-\tobuf[1] = 0x86;\n-\tobuf[2] = 1;\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x86;\n+\tstate->data[2] = 1;\n \n-\tif (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \n-\tobuf[0] = 0xe;\n-\tobuf[1] = 0x80;\n-\tobuf[2] = 0;\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x80;\n+\tstate->data[2] = 0;\n \n-\tif (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \n \tmsleep(50);\n \n-\tobuf[0] = 0xe;\n-\tobuf[1] = 0x80;\n-\tobuf[2] = 1;\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x80;\n+\tstate->data[2] = 1;\n \n-\tif (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \n-\tobuf[0] = 0x51;\n+\tstate->data[0] = 0x51;\n \n-\tif (dvb_usb_generic_rw(d->dev, obuf, 1, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 1, state->data, 1, 0) < 0)\n \t\terr(\"command 0x51 transfer failed.\");\n \n-\td->fe_adap[0].fe = dvb_attach(cxd2820r_attach, &cxd2820r_config,\n-\t\t\t\t\t&d->dev->i2c_adap, NULL);\n-\tif (d->fe_adap[0].fe != NULL) {\n-\t\tif (dvb_attach(tda18271_attach, d->fe_adap[0].fe, 0x60,\n-\t\t\t\t\t&d->dev->i2c_adap, &tda18271_config)) {\n+\tmutex_unlock(&d->data_mutex);\n+\n+\tadap->fe_adap[0].fe = dvb_attach(cxd2820r_attach, &cxd2820r_config,\n+\t\t\t\t\t&d->i2c_adap, NULL);\n+\tif (adap->fe_adap[0].fe != NULL) {\n+\t\tif (dvb_attach(tda18271_attach, adap->fe_adap[0].fe, 0x60,\n+\t\t\t\t\t&d->i2c_adap, &tda18271_config)) {\n \t\t\tinfo(\"Attached TDA18271HD/CXD2820R!\");\n \t\t\treturn 0;\n \t\t}\n@@ -1410,23 +1443,30 @@ static int t220_frontend_attach(struct dvb_usb_adapter *d)\n \treturn -EIO;\n }\n \n-static int m88rs2000_frontend_attach(struct dvb_usb_adapter *d)\n+static int m88rs2000_frontend_attach(struct dvb_usb_adapter *adap)\n {\n-\tu8 obuf[] = { 0x51 };\n-\tu8 ibuf[] = { 0 };\n+\tstruct dvb_usb_device *d = adap->dev;\n+\tstruct dw2102_state *state = d->priv;\n+\n+\tmutex_lock(&d->data_mutex);\n \n-\tif (dvb_usb_generic_rw(d->dev, obuf, 1, ibuf, 1, 0) < 0)\n+\tstate->data[0] = 0x51;\n+\n+\tif (dvb_usb_generic_rw(d, state->data, 1, state->data, 1, 0) < 0)\n \t\terr(\"command 0x51 transfer failed.\");\n \n-\td->fe_adap[0].fe = dvb_attach(m88rs2000_attach, &s421_m88rs2000_config,\n-\t\t\t\t\t&d->dev->i2c_adap);\n+\tmutex_unlock(&d->data_mutex);\n \n-\tif (d->fe_adap[0].fe == NULL)\n+\tadap->fe_adap[0].fe = dvb_attach(m88rs2000_attach,\n+\t\t\t\t\t&s421_m88rs2000_config,\n+\t\t\t\t\t&d->i2c_adap);\n+\n+\tif (adap->fe_adap[0].fe == NULL)\n \t\treturn -EIO;\n \n-\tif (dvb_attach(ts2020_attach, d->fe_adap[0].fe,\n+\tif (dvb_attach(ts2020_attach, adap->fe_adap[0].fe,\n \t\t\t\t&dw2104_ts2020_config,\n-\t\t\t\t&d->dev->i2c_adap)) {\n+\t\t\t\t&d->i2c_adap)) {\n \t\tinfo(\"Attached RS2000/TS2020!\");\n \t\treturn 0;\n \t}\n@@ -1439,44 +1479,50 @@ static int tt_s2_4600_frontend_attach(struct dvb_usb_adapter *adap)\n {\n \tstruct dvb_usb_device *d = adap->dev;\n \tstruct dw2102_state *state = d->priv;\n-\tu8 obuf[3] = { 0xe, 0x80, 0 };\n-\tu8 ibuf[] = { 0 };\n \tstruct i2c_adapter *i2c_adapter;\n \tstruct i2c_client *client;\n \tstruct i2c_board_info board_info;\n \tstruct m88ds3103_platform_data m88ds3103_pdata = {};\n \tstruct ts2020_config ts2020_config = {};\n \n-\tif (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0)\n+\tmutex_lock(&d->data_mutex);\n+\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x80;\n+\tstate->data[2] = 0x0;\n+\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \n-\tobuf[0] = 0xe;\n-\tobuf[1] = 0x02;\n-\tobuf[2] = 1;\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x02;\n+\tstate->data[2] = 1;\n \n-\tif (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \tmsleep(300);\n \n-\tobuf[0] = 0xe;\n-\tobuf[1] = 0x83;\n-\tobuf[2] = 0;\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x83;\n+\tstate->data[2] = 0;\n \n-\tif (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \n-\tobuf[0] = 0xe;\n-\tobuf[1] = 0x83;\n-\tobuf[2] = 1;\n+\tstate->data[0] = 0xe;\n+\tstate->data[1] = 0x83;\n+\tstate->data[2] = 1;\n \n-\tif (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0)\n \t\terr(\"command 0x0e transfer failed.\");\n \n-\tobuf[0] = 0x51;\n+\tstate->data[0] = 0x51;\n \n-\tif (dvb_usb_generic_rw(d, obuf, 1, ibuf, 1, 0) < 0)\n+\tif (dvb_usb_generic_rw(d, state->data, 1, state->data, 1, 0) < 0)\n \t\terr(\"command 0x51 transfer failed.\");\n \n+\tmutex_unlock(&d->data_mutex);\n+\n \t/* attach demod */\n \tm88ds3103_pdata.clk = 27000000;\n \tm88ds3103_pdata.i2c_wr_max = 33;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-119",
    "description": "drivers/media/usb/dvb-usb/dw2102.c in the Linux kernel 4.9.x and 4.10.x before 4.10.4 interacts incorrectly with the CONFIG_VMAP_STACK option, which allows local users to cause a denial of service (system crash or memory corruption) or possibly have unspecified other impact by leveraging use of more than one virtual page for a DMA scatterlist.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2017-04-23T05:59:00.223",
    "last_modified": "2024-11-21T03:33:15.040",
    "fix_date": "2017-02-15T20:29:15Z"
  },
  "references": [
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v4.x/ChangeLog-4.10.4",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2017/04/16/4",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97973",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=606142af57dad981b78707234cfbd15f9f7b7125",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/606142af57dad981b78707234cfbd15f9f7b7125",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v4.x/ChangeLog-4.10.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2017/04/16/4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97973",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=606142af57dad981b78707234cfbd15f9f7b7125",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/606142af57dad981b78707234cfbd15f9f7b7125",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:54.870715",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}