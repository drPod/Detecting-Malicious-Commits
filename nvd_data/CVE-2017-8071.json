{
  "cve_id": "CVE-2017-8071",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "7a7b5df84b6b4e5d599c7289526eed96541a0654",
    "related_commits": [
      "7a7b5df84b6b4e5d599c7289526eed96541a0654",
      "7a7b5df84b6b4e5d599c7289526eed96541a0654"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "7a7b5df84b6b4e5d599c7289526eed96541a0654",
      "commit_date": "2017-01-30T10:26:38Z",
      "author": {
        "login": "jhovold",
        "type": "User",
        "stats": {
          "total_commits": 3443,
          "average_weekly_commits": 2.890848026868178,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 428
        }
      },
      "commit_message": {
        "title": "HID: cp2112: fix sleep-while-atomic",
        "length": 517,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 26,
        "additions": 11,
        "deletions": 15
      },
      "files": [
        {
          "filename": "drivers/hid/hid-cp2112.c",
          "status": "modified",
          "additions": 11,
          "deletions": 15,
          "patch": "@@ -168,7 +168,7 @@ struct cp2112_device {\n \tatomic_t xfer_avail;\n \tstruct gpio_chip gc;\n \tu8 *in_out_buffer;\n-\tspinlock_t lock;\n+\tstruct mutex lock;\n \n \tstruct gpio_desc *desc[8];\n \tbool gpio_poll;\n@@ -186,10 +186,9 @@ static int cp2112_gpio_direction_input(struct gpio_chip *chip, unsigned offset)\n \tstruct cp2112_device *dev = gpiochip_get_data(chip);\n \tstruct hid_device *hdev = dev->hdev;\n \tu8 *buf = dev->in_out_buffer;\n-\tunsigned long flags;\n \tint ret;\n \n-\tspin_lock_irqsave(&dev->lock, flags);\n+\tmutex_lock(&dev->lock);\n \n \tret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf,\n \t\t\t\t CP2112_GPIO_CONFIG_LENGTH, HID_FEATURE_REPORT,\n@@ -213,7 +212,7 @@ static int cp2112_gpio_direction_input(struct gpio_chip *chip, unsigned offset)\n \tret = 0;\n \n exit:\n-\tspin_unlock_irqrestore(&dev->lock, flags);\n+\tmutex_unlock(&dev->lock);\n \treturn ret <= 0 ? ret : -EIO;\n }\n \n@@ -222,10 +221,9 @@ static void cp2112_gpio_set(struct gpio_chip *chip, unsigned offset, int value)\n \tstruct cp2112_device *dev = gpiochip_get_data(chip);\n \tstruct hid_device *hdev = dev->hdev;\n \tu8 *buf = dev->in_out_buffer;\n-\tunsigned long flags;\n \tint ret;\n \n-\tspin_lock_irqsave(&dev->lock, flags);\n+\tmutex_lock(&dev->lock);\n \n \tbuf[0] = CP2112_GPIO_SET;\n \tbuf[1] = value ? 0xff : 0;\n@@ -237,18 +235,17 @@ static void cp2112_gpio_set(struct gpio_chip *chip, unsigned offset, int value)\n \tif (ret < 0)\n \t\thid_err(hdev, \"error setting GPIO values: %d\\n\", ret);\n \n-\tspin_unlock_irqrestore(&dev->lock, flags);\n+\tmutex_unlock(&dev->lock);\n }\n \n static int cp2112_gpio_get_all(struct gpio_chip *chip)\n {\n \tstruct cp2112_device *dev = gpiochip_get_data(chip);\n \tstruct hid_device *hdev = dev->hdev;\n \tu8 *buf = dev->in_out_buffer;\n-\tunsigned long flags;\n \tint ret;\n \n-\tspin_lock_irqsave(&dev->lock, flags);\n+\tmutex_lock(&dev->lock);\n \n \tret = hid_hw_raw_request(hdev, CP2112_GPIO_GET, buf,\n \t\t\t\t CP2112_GPIO_GET_LENGTH, HID_FEATURE_REPORT,\n@@ -262,7 +259,7 @@ static int cp2112_gpio_get_all(struct gpio_chip *chip)\n \tret = buf[1];\n \n exit:\n-\tspin_unlock_irqrestore(&dev->lock, flags);\n+\tmutex_unlock(&dev->lock);\n \n \treturn ret;\n }\n@@ -284,10 +281,9 @@ static int cp2112_gpio_direction_output(struct gpio_chip *chip,\n \tstruct cp2112_device *dev = gpiochip_get_data(chip);\n \tstruct hid_device *hdev = dev->hdev;\n \tu8 *buf = dev->in_out_buffer;\n-\tunsigned long flags;\n \tint ret;\n \n-\tspin_lock_irqsave(&dev->lock, flags);\n+\tmutex_lock(&dev->lock);\n \n \tret = hid_hw_raw_request(hdev, CP2112_GPIO_CONFIG, buf,\n \t\t\t\t CP2112_GPIO_CONFIG_LENGTH, HID_FEATURE_REPORT,\n@@ -308,7 +304,7 @@ static int cp2112_gpio_direction_output(struct gpio_chip *chip,\n \t\tgoto fail;\n \t}\n \n-\tspin_unlock_irqrestore(&dev->lock, flags);\n+\tmutex_unlock(&dev->lock);\n \n \t/*\n \t * Set gpio value when output direction is already set,\n@@ -319,7 +315,7 @@ static int cp2112_gpio_direction_output(struct gpio_chip *chip,\n \treturn 0;\n \n fail:\n-\tspin_unlock_irqrestore(&dev->lock, flags);\n+\tmutex_unlock(&dev->lock);\n \treturn ret < 0 ? ret : -EIO;\n }\n \n@@ -1235,7 +1231,7 @@ static int cp2112_probe(struct hid_device *hdev, const struct hid_device_id *id)\n \tif (!dev->in_out_buffer)\n \t\treturn -ENOMEM;\n \n-\tspin_lock_init(&dev->lock);\n+\tmutex_init(&dev->lock);\n \n \tret = hid_parse(hdev);\n \tif (ret) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-404",
    "description": "drivers/hid/hid-cp2112.c in the Linux kernel 4.9.x before 4.9.9 uses a spinlock without considering that sleeping is possible in a USB HID request callback, which allows local users to cause a denial of service (deadlock) via unspecified vectors.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-04-23T05:59:00.597",
    "last_modified": "2024-11-21T03:33:16.623",
    "fix_date": "2017-01-30T10:26:38Z"
  },
  "references": [
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v4.x/ChangeLog-4.9.9",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2017/04/16/4",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97991",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7a7b5df84b6b4e5d599c7289526eed96541a0654",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/7a7b5df84b6b4e5d599c7289526eed96541a0654",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://www.kernel.org/pub/linux/kernel/v4.x/ChangeLog-4.9.9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2017/04/16/4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/97991",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7a7b5df84b6b4e5d599c7289526eed96541a0654",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/7a7b5df84b6b4e5d599c7289526eed96541a0654",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:58:54.872285",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}