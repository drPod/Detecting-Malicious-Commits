{
  "cve_id": "CVE-2017-9203",
  "github_data": {
    "repository": "jsummers/imageworsener",
    "fix_commit": "a4f247707f08e322f0b41e82c3e06e224240a654",
    "related_commits": [
      "a4f247707f08e322f0b41e82c3e06e224240a654",
      "a4f247707f08e322f0b41e82c3e06e224240a654"
    ],
    "patch_url": "https://github.com/jsummers/imageworsener/commit/a4f247707f08e322f0b41e82c3e06e224240a654.patch",
    "fix_commit_details": {
      "sha": "a4f247707f08e322f0b41e82c3e06e224240a654",
      "commit_date": "2017-05-11T16:04:40Z",
      "author": {
        "login": "jsummers",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fixed a bug that could cause invalid memory to be accessed",
        "length": 196,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 20,
        "additions": 17,
        "deletions": 3
      },
      "files": [
        {
          "filename": "src/imagew-bmp.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -847,11 +847,13 @@ static int bmpr_read_rle(struct iwbmprcontext *rctx)\n \t\t!(rctx->compression==IWBMP_BI_RLE4 && rctx->bitcount==4))\n \t{\n \t\tiw_set_error(rctx->ctx,\"Compression type incompatible with image type\");\n+\t\tgoto done;\n \t}\n \n \tif(rctx->topdown) {\n \t\t// The documentation says that top-down images may not be compressed.\n \t\tiw_set_error(rctx->ctx,\"Compression not allowed with top-down images\");\n+\t\tgoto done;\n \t}\n \n \t// RLE-compressed BMP images don't have to assign a color to every pixel,"
        },
        {
          "filename": "src/imagew-main.c",
          "status": "modified",
          "additions": 15,
          "deletions": 3,
          "patch": "@@ -922,8 +922,6 @@ static int iw_process_cols_to_intermediate(struct iw_context *ctx, int channel,\n \treturn retval;\n }\n \n-// 'handle_alpha_flag' must be set if an alpha channel exists and this is not\n-// the alpha channel.\n static int iw_process_rows_intermediate_to_final(struct iw_context *ctx, int intermed_channel,\n \tconst struct iw_csdescr *out_csdescr)\n {\n@@ -951,13 +949,27 @@ static int iw_process_rows_intermediate_to_final(struct iw_context *ctx, int int\n \tiw_tmpsample *out_pix = NULL;\n \tint num_in_pix;\n \tint num_out_pix;\n+\tstruct iw_channelinfo_out default_ci_out;\n \n \tnum_in_pix = ctx->intermed_canvas_width;\n \tnum_out_pix = ctx->img2.width;\n \n \tint_ci = &ctx->intermed_ci[intermed_channel];\n \toutput_channel = int_ci->corresponding_output_channel;\n-\tout_ci = &ctx->img2_ci[output_channel];\n+\tif(output_channel>=0) {\n+\t\tout_ci = &ctx->img2_ci[output_channel];\n+\t}\n+\telse {\n+\t\t// If there is no output channelinfo struct, create a temporary one to\n+\t\t// use.\n+\t\t// TODO: This is admittedly ugly, but we use these settings for a few\n+\t\t// things even when there is no corresponding output channel, and I\n+\t\t// don't remember exactly why.\n+\t\tiw_zeromem(&default_ci_out, sizeof(struct iw_channelinfo_out));\n+\t\tdefault_ci_out.channeltype = IW_CHANNELTYPE_NONALPHA;\n+\t\tout_ci = &default_ci_out;\n+\t}\n+\n \tis_alpha_channel = (int_ci->channeltype==IW_CHANNELTYPE_ALPHA);\n \tbkgd_has_transparency = iw_bkgd_has_transparency(ctx);\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "348e606cc14619549f6ab61cd40272e007c843e5",
            "date": "2023-03-19T16:14:20Z",
            "author_login": "jsummers"
          },
          {
            "sha": "6a43f725425bec281ccca7f5c690379c680e7fa2",
            "date": "2022-11-22T12:59:40Z",
            "author_login": "jsummers"
          },
          {
            "sha": "8484ed7ed42b46d5128f29bd9fbbca6ec16529ec",
            "date": "2022-11-15T20:18:16Z",
            "author_login": "jsummers"
          },
          {
            "sha": "e735cdf1635958a1c4aea64d71d033064eb64bef",
            "date": "2022-11-15T20:09:15Z",
            "author_login": "jsummers"
          },
          {
            "sha": "a3d1390cc3a381ce9a7a4daf949be930fdc0bc0d",
            "date": "2022-11-15T18:19:31Z",
            "author_login": "jsummers"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-787",
    "description": "imagew-main.c:960:12 in libimageworsener.a in ImageWorsener 1.3.1 allows remote attackers to cause a denial of service (buffer underflow) via a crafted image, related to imagew-bmp.c.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2017-05-23T04:29:04.447",
    "last_modified": "2024-11-21T03:35:34.587",
    "fix_date": "2017-05-11T16:04:40Z"
  },
  "references": [
    {
      "url": "https://blogs.gentoo.org/ago/2017/05/20/imageworsener-multiple-vulnerabilities/",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/jsummers/imageworsener/commit/a4f247707f08e322f0b41e82c3e06e224240a654",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://blogs.gentoo.org/ago/2017/05/20/imageworsener-multiple-vulnerabilities/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/jsummers/imageworsener/commit/a4f247707f08e322f0b41e82c3e06e224240a654",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:01.639302",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "imageworsener",
    "owner": "jsummers",
    "created_at": "2011-02-08T00:35:27Z",
    "updated_at": "2024-12-15T08:40:40Z",
    "pushed_at": "2024-01-16T03:30:19Z",
    "size": 2015,
    "stars": 257,
    "forks": 30,
    "open_issues": 11,
    "watchers": 257,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 517703,
      "Shell": 17237,
      "M4": 3490,
      "Makefile": 3335
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:15:29.806717"
  }
}