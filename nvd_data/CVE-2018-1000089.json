{
  "cve_id": "CVE-2018-1000089",
  "github_data": {
    "repository": "anymail/django-anymail",
    "fix_commit": "1a6086f2b58478d71f89bf27eb034ed81aefe5ef",
    "related_commits": [
      "1a6086f2b58478d71f89bf27eb034ed81aefe5ef",
      "1a6086f2b58478d71f89bf27eb034ed81aefe5ef"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "1a6086f2b58478d71f89bf27eb034ed81aefe5ef",
      "commit_date": "2018-02-07T21:25:48Z",
      "author": {
        "login": "medmunds",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Security: rename WEBHOOK_AUTHORIZATION --> WEBHOOK_SECRET",
        "length": 1799,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 128,
        "additions": 99,
        "deletions": 29
      },
      "files": [
        {
          "filename": "anymail/apps.py",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -1,9 +1,12 @@\n from django.apps import AppConfig\n+from django.core import checks\n+\n+from .checks import check_deprecated_settings\n \n \n class AnymailBaseConfig(AppConfig):\n     name = 'anymail'\n     verbose_name = \"Anymail\"\n \n     def ready(self):\n-        pass\n+        checks.register(check_deprecated_settings)"
        },
        {
          "filename": "anymail/checks.py",
          "status": "added",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -0,0 +1,24 @@\n+from django.conf import settings\n+from django.core import checks\n+\n+\n+def check_deprecated_settings(app_configs, **kwargs):\n+    errors = []\n+\n+    anymail_settings = getattr(settings, \"ANYMAIL\", {})\n+\n+    # anymail.W001: rename WEBHOOK_AUTHORIZATION to WEBHOOK_SECRET\n+    if \"WEBHOOK_AUTHORIZATION\" in anymail_settings:\n+        errors.append(checks.Warning(\n+            \"The ANYMAIL setting 'WEBHOOK_AUTHORIZATION' has been renamed 'WEBHOOK_SECRET' to improve security.\",\n+            hint=\"You must update your settings.py. The old name will stop working in a near-future release.\",\n+            id=\"anymail.W001\",\n+        ))\n+    if hasattr(settings, \"ANYMAIL_WEBHOOK_AUTHORIZATION\"):\n+        errors.append(checks.Warning(\n+            \"The ANYMAIL_WEBHOOK_AUTHORIZATION setting has been renamed ANYMAIL_WEBHOOK_SECRET to improve security.\",\n+            hint=\"You must update your settings.py. The old name will stop working in a near-future release.\",\n+            id=\"anymail.W001\",\n+        ))\n+\n+    return errors"
        },
        {
          "filename": "anymail/webhooks/base.py",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -24,15 +24,19 @@ class AnymailBasicAuthMixin(object):\n     basic_auth = None  # (Declaring class attr allows override by kwargs in View.as_view.)\n \n     def __init__(self, **kwargs):\n-        self.basic_auth = get_anymail_setting('webhook_authorization', default=[],\n+        self.basic_auth = get_anymail_setting('webhook_secret', default=[],\n                                               kwargs=kwargs)  # no esp_name -- auth is shared between ESPs\n+        if not self.basic_auth:\n+            # Temporarily allow deprecated WEBHOOK_AUTHORIZATION setting\n+            self.basic_auth = get_anymail_setting('webhook_authorization', default=[], kwargs=kwargs)\n+\n         # Allow a single string:\n         if isinstance(self.basic_auth, six.string_types):\n             self.basic_auth = [self.basic_auth]\n         if self.warn_if_no_basic_auth and len(self.basic_auth) < 1:\n             warnings.warn(\n                 \"Your Anymail webhooks are insecure and open to anyone on the web. \"\n-                \"You should set WEBHOOK_AUTHORIZATION in your ANYMAIL settings. \"\n+                \"You should set WEBHOOK_SECRET in your ANYMAIL settings. \"\n                 \"See 'Securing webhooks' in the Anymail docs.\",\n                 AnymailInsecureWebhookWarning)\n         # noinspection PyArgumentList"
        },
        {
          "filename": "docs/esps/mailgun.rst",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -197,7 +197,7 @@ for all events you want to receive:\n \n    :samp:`https://{random}:{random}@{yoursite.example.com}/anymail/mailgun/tracking/`\n \n-     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION` shared secret\n+     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_SECRET` shared secret\n      * *yoursite.example.com* is your Django site\n \n If you use multiple Mailgun sending domains, you'll need to enter the webhook\n@@ -232,7 +232,7 @@ The *action* for your route will be either:\n    :samp:`forward(\"https://{random}:{random}@{yoursite.example.com}/anymail/mailgun/inbound/\")`\n    :samp:`forward(\"https://{random}:{random}@{yoursite.example.com}/anymail/mailgun/inbound_mime/\")`\n \n-     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION` shared secret\n+     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_SECRET` shared secret\n      * *yoursite.example.com* is your Django site\n \n Anymail accepts either of Mailgun's \"fully-parsed\" (.../inbound/) and \"raw MIME\" (.../inbound_mime/)"
        },
        {
          "filename": "docs/esps/mailjet.rst",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -232,7 +232,7 @@ the url in your Mailjet account REST API settings under `Event tracking (trigger\n \n    :samp:`https://{random}:{random}@{yoursite.example.com}/anymail/mailjet/tracking/`\n \n-     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION` shared secret\n+     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_SECRET` shared secret\n      * *yoursite.example.com* is your Django site\n \n Be sure to enter the URL in the Mailjet settings for all the event types you want to receive.\n@@ -263,7 +263,7 @@ The parseroute Url parameter will be:\n \n    :samp:`https://{random}:{random}@{yoursite.example.com}/anymail/mailjet/inbound/`\n \n-     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION` shared secret\n+     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_SECRET` shared secret\n      * *yoursite.example.com* is your Django site\n \n Once you've done Mailjet's \"basic setup\" to configure the Parse API webhook, you can skip"
        },
        {
          "filename": "docs/esps/mandrill.rst",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -206,7 +206,7 @@ requires deploying your Django project twice:\n \n       :samp:`https://{random}:{random}@{yoursite.example.com}/anymail/mandrill/`\n \n-        * *random:random* is an :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION` shared secret\n+        * *random:random* is an :setting:`ANYMAIL_WEBHOOK_SECRET` shared secret\n         * *yoursite.example.com* is your Django site\n         * (Note: Unlike Anymail's other supported ESPs, the Mandrill webhook uses this\n           single url for both tracking and inbound events.)"
        },
        {
          "filename": "docs/esps/postmark.rst",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -181,7 +181,7 @@ want to receive all these types of events):\n \n    :samp:`https://{random}:{random}@{yoursite.example.com}/anymail/postmark/tracking/`\n \n-     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION` shared secret\n+     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_SECRET` shared secret\n      * *yoursite.example.com* is your Django site\n \n Anymail doesn't care about the \"include bounce content\" and \"post only on first open\"\n@@ -216,7 +216,7 @@ The InboundHookUrl setting will be:\n \n    :samp:`https://{random}:{random}@{yoursite.example.com}/anymail/postmark/inbound/`\n \n-     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION` shared secret\n+     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_SECRET` shared secret\n      * *yoursite.example.com* is your Django site\n \n Anymail handles the \"parse an email\" part of Postmark's instructions for you, but you'll"
        },
        {
          "filename": "docs/esps/sendgrid.rst",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -284,7 +284,7 @@ the url in your `SendGrid mail settings`_, under \"Event Notification\":\n \n    :samp:`https://{random}:{random}@{yoursite.example.com}/anymail/sendgrid/tracking/`\n \n-     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION` shared secret\n+     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_SECRET` shared secret\n      * *yoursite.example.com* is your Django site\n \n Be sure to check the boxes in the SendGrid settings for the event types you want to receive.\n@@ -315,7 +315,7 @@ The Destination URL setting will be:\n \n    :samp:`https://{random}:{random}@{yoursite.example.com}/anymail/sendgrid/inbound/`\n \n-     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION` shared secret\n+     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_SECRET` shared secret\n      * *yoursite.example.com* is your Django site\n \n Be sure the URL has a trailing slash. (SendGrid's inbound processing won't follow Django's"
        },
        {
          "filename": "docs/esps/sparkpost.rst",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -197,7 +197,7 @@ webhook in your `SparkPost account settings under \"Webhooks\"`_:\n \n * Target URL: :samp:`https://{yoursite.example.com}/anymail/sparkpost/tracking/`\n * Authentication: choose \"Basic Auth.\" For username and password enter the two halves of the\n-  *random:random* shared secret you created for your :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION`\n+  *random:random* shared secret you created for your :setting:`ANYMAIL_WEBHOOK_SECRET`\n   Django setting. (Anymail doesn't support OAuth webhook auth.)\n * Events: click \"Select\" and then *clear* the checkbox for \"Relay Events\" category (which is for\n   inbound email). You can leave all the other categories of events checked, or disable\n@@ -235,7 +235,7 @@ The target parameter for the Relay Webhook will be:\n \n    :samp:`https://{random}:{random}@{yoursite.example.com}/anymail/sparkpost/inbound/`\n \n-     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION` shared secret\n+     * *random:random* is an :setting:`ANYMAIL_WEBHOOK_SECRET` shared secret\n      * *yoursite.example.com* is your Django site\n \n .. _Enabling Inbound Email Relaying:"
        },
        {
          "filename": "docs/installation.rst",
          "status": "modified",
          "additions": 13,
          "deletions": 7,
          "patch": "@@ -98,22 +98,22 @@ Skip this section if you won't be using Anymail's webhooks.\n     or subject your app to malicious input data.\n \n     At a minimum, your site should **use https** and you should\n-    configure **webhook authorization** as described below.\n+    configure a **webhook secret** as described below.\n \n     See :ref:`securing-webhooks` for additional information.\n \n \n If you want to use Anymail's inbound or tracking webhooks:\n \n 1. In your :file:`settings.py`, add\n-   :setting:`WEBHOOK_AUTHORIZATION <ANYMAIL_WEBHOOK_AUTHORIZATION>`\n+   :setting:`WEBHOOK_SECRET <ANYMAIL_WEBHOOK_SECRET>`\n    to the ``ANYMAIL`` block:\n \n    .. code-block:: python\n \n       ANYMAIL = {\n           ...\n-          'WEBHOOK_AUTHORIZATION': '<a random string>:<another random string>',\n+          'WEBHOOK_SECRET': '<a random string>:<another random string>',\n       }\n \n    This setting should be a string with two sequences of random characters,\n@@ -133,7 +133,7 @@ If you want to use Anymail's inbound or tracking webhooks:\n \n    (This setting is actually an HTTP basic auth string. You can also set it\n    to a list of auth strings, to simplify credential rotation or use different auth\n-   with different ESPs. See :setting:`ANYMAIL_WEBHOOK_AUTHORIZATION` in the\n+   with different ESPs. See :setting:`ANYMAIL_WEBHOOK_SECRET` in the\n    :ref:`securing-webhooks` docs for more details.)\n \n \n@@ -160,7 +160,7 @@ If you want to use Anymail's inbound or tracking webhooks:\n    :samp:`https://{random}:{random}@{yoursite.example.com}/anymail/{esp}/{type}/`\n \n      * \"https\" (rather than http) is *strongly recommended*\n-     * *random:random* is the WEBHOOK_AUTHORIZATION string you created in step 1\n+     * *random:random* is the WEBHOOK_SECRET string you created in step 1\n      * *yoursite.example.com* is your Django site\n      * \"anymail\" is the url prefix (from step 2)\n      * *esp* is the lowercase name of your ESP (e.g., \"sendgrid\" or \"mailgun\")\n@@ -266,20 +266,26 @@ Set to `True` to ignore these problems and send the email anyway. See\n :ref:`unsupported-features`. (Default `False`.)\n \n \n-.. rubric:: WEBHOOK_AUTHORIZATION\n+.. rubric:: WEBHOOK_SECRET\n \n A `'random:random'` shared secret string. Anymail will reject incoming webhook calls\n from your ESP that don't include this authorization. You can also give a list of\n shared secret strings, and Anymail will allow ESP webhook calls that match any of them\n (to facilitate credential rotation). See :ref:`securing-webhooks`.\n \n Default is unset, which leaves your webhooks insecure. Anymail\n-will warn if you try to use webhooks with setting up authorization.\n+will warn if you try to use webhooks without a shared secret.\n \n This is actually implemented using HTTP basic authorization, and the string is\n technically a \"username:password\" format. But you should *not* use any real\n username or password for this shared secret.\n \n+.. versionchanged:: 1.4\n+\n+    The earlier WEBHOOK_AUTHORIZATION setting was renamed WEBHOOK_SECRET, so that\n+    Django error reporting sanitizes it. The old name is still allowed in v1.4,\n+    but will be removed in a near-future release. You should update your settings.\n+\n \n .. setting:: ANYMAIL_REQUESTS_TIMEOUT\n "
        },
        {
          "filename": "docs/tips/securing_webhooks.rst",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -29,7 +29,7 @@ If you aren't able to use https on your Django site, then you should\n not set up your ESP's webhooks.\n \n \n-.. setting:: ANYMAIL_WEBHOOK_AUTHORIZATION\n+.. setting:: ANYMAIL_WEBHOOK_SECRET\n \n Use a shared authorization secret\n ---------------------------------\n@@ -41,7 +41,7 @@ with webhook data, to prove the post is coming from your ESP.\n \n Most ESPs recommend using HTTP basic authorization as this shared\n secret. Anymail includes support for this, via the\n-:setting:`!ANYMAIL_WEBHOOK_AUTHORIZATION` setting.\n+:setting:`!ANYMAIL_WEBHOOK_SECRET` setting.\n Basic usage is covered in the\n :ref:`webhooks configuration <webhooks-configuration>` docs.\n \n@@ -60,7 +60,7 @@ any of the authorization strings:\n \n       ANYMAIL = {\n           ...\n-          'WEBHOOK_AUTHORIZATION': [\n+          'WEBHOOK_SECRET': [\n               'abcdefghijklmnop:qrstuvwxyz0123456789',\n               'ZYXWVUTSRQPONMLK:JIHGFEDCBA9876543210',\n           ],"
        },
        {
          "filename": "tests/test_checks.py",
          "status": "added",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -0,0 +1,27 @@\n+from django.core import checks\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+\n+from anymail.checks import check_deprecated_settings\n+\n+from .utils import AnymailTestMixin\n+\n+\n+class DeprecatedSettingsTests(SimpleTestCase, AnymailTestMixin):\n+    @override_settings(ANYMAIL={\"WEBHOOK_AUTHORIZATION\": \"abcde:12345\"})\n+    def test_webhook_authorization(self):\n+        errors = check_deprecated_settings(None)\n+        self.assertEqual(errors, [checks.Warning(\n+            \"The ANYMAIL setting 'WEBHOOK_AUTHORIZATION' has been renamed 'WEBHOOK_SECRET' to improve security.\",\n+            hint=\"You must update your settings.py. The old name will stop working in a near-future release.\",\n+            id=\"anymail.W001\",\n+        )])\n+\n+    @override_settings(ANYMAIL_WEBHOOK_AUTHORIZATION=\"abcde:12345\", ANYMAIL={})\n+    def test_anymail_webhook_authorization(self):\n+        errors = check_deprecated_settings(None)\n+        self.assertEqual(errors, [checks.Warning(\n+            \"The ANYMAIL_WEBHOOK_AUTHORIZATION setting has been renamed ANYMAIL_WEBHOOK_SECRET to improve security.\",\n+            hint=\"You must update your settings.py. The old name will stop working in a near-future release.\",\n+            id=\"anymail.W001\",\n+        )])"
        },
        {
          "filename": "tests/test_mandrill_webhooks.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -87,7 +87,7 @@ def test_verifies_bad_signature(self):\n         response = self.client.post(**kwargs)\n         self.assertEqual(response.status_code, 400)\n \n-    @override_settings(ANYMAIL={})  # clear WEBHOOK_AUTHORIZATION from WebhookTestCase\n+    @override_settings(ANYMAIL={})  # clear WEBHOOK_SECRET from WebhookTestCase\n     def test_no_basic_auth(self):\n         # Signature validation should work properly if you're not using basic auth\n         self.clear_basic_auth()\n@@ -99,7 +99,7 @@ def test_no_basic_auth(self):\n         ALLOWED_HOSTS=['127.0.0.1', '.example.com'],\n         ANYMAIL={\n             \"MANDRILL_WEBHOOK_URL\": \"https://abcde:12345@example.com/anymail/mandrill/\",\n-            \"WEBHOOK_AUTHORIZATION\": \"abcde:12345\",\n+            \"WEBHOOK_SECRET\": \"abcde:12345\",\n         })\n     def test_webhook_url_setting(self):\n         # If Django can't build_absolute_uri correctly (e.g., because your proxy\n@@ -111,7 +111,7 @@ def test_webhook_url_setting(self):\n         self.assertEqual(response.status_code, 200)\n \n     # override WebhookBasicAuthTestsMixin version of this test\n-    @override_settings(ANYMAIL={'WEBHOOK_AUTHORIZATION': ['cred1:pass1', 'cred2:pass2']})\n+    @override_settings(ANYMAIL={'WEBHOOK_SECRET': ['cred1:pass1', 'cred2:pass2']})\n     def test_supports_credential_rotation(self):\n         \"\"\"You can supply a list of basic auth credentials, and any is allowed\"\"\"\n         self.set_basic_auth('cred1', 'pass1')"
        },
        {
          "filename": "tests/webhook_cases.py",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -14,7 +14,7 @@ def event_handler(sender, event, esp_name, **kwargs):\n     pass\n \n \n-@override_settings(ANYMAIL={'WEBHOOK_AUTHORIZATION': 'username:password'})\n+@override_settings(ANYMAIL={'WEBHOOK_SECRET': 'username:password'})\n class WebhookTestCase(AnymailTestMixin, SimpleTestCase):\n     \"\"\"Base for testing webhooks\n \n@@ -111,7 +111,7 @@ def test_verifies_missing_auth(self):\n         response = self.call_webhook()\n         self.assertEqual(response.status_code, 400)\n \n-    @override_settings(ANYMAIL={'WEBHOOK_AUTHORIZATION': ['cred1:pass1', 'cred2:pass2']})\n+    @override_settings(ANYMAIL={'WEBHOOK_SECRET': ['cred1:pass1', 'cred2:pass2']})\n     def test_supports_credential_rotation(self):\n         \"\"\"You can supply a list of basic auth credentials, and any is allowed\"\"\"\n         self.set_basic_auth('cred1', 'pass1')\n@@ -125,3 +125,9 @@ def test_supports_credential_rotation(self):\n         self.set_basic_auth('baduser', 'wrongpassword')\n         response = self.call_webhook()\n         self.assertEqual(response.status_code, 400)\n+\n+    @override_settings(ANYMAIL={'WEBHOOK_AUTHORIZATION': \"username:password\"})\n+    def test_deprecated_setting(self):\n+        \"\"\"The older WEBHOOK_AUTHORIZATION setting is still supported (for now)\"\"\"\n+        response = self.call_webhook()\n+        self.assertEqual(response.status_code, 200)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 6,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0d1aa533ecd36794e8d5a9d2d924a724fedd8bdf",
            "date": "2024-12-11T22:27:21Z",
            "author_login": "medmunds"
          },
          {
            "sha": "5987e8377a7ec93687203f7a0d12fdb7ed54ef06",
            "date": "2024-12-11T19:54:54Z",
            "author_login": "medmunds"
          },
          {
            "sha": "77b9701b5eefd9bb7e471fc2e07e96b22d0493db",
            "date": "2024-12-10T21:01:18Z",
            "author_login": "medmunds"
          },
          {
            "sha": "8def0bdc067948de2c1b4e7967809035a3feadd8",
            "date": "2024-12-10T20:28:47Z",
            "author_login": "medmunds"
          },
          {
            "sha": "c7f7428b7a34b6ea3e31aa98f0d328f0468530ce",
            "date": "2024-12-10T20:01:17Z",
            "author_login": "medmunds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-532",
    "description": "Anymail django-anymail version version 0.2 through 1.3 contains a CWE-532, CWE-209 vulnerability in WEBHOOK_AUTHORIZATION setting value that can result in An attacker with access to error logs could fabricate email tracking events. This attack appear to be exploitable via If you have exposed your Django error reports, an attacker could discover your ANYMAIL_WEBHOOK setting and use this to post fabricated or malicious Anymail tracking/inbound events to your app. This vulnerability appears to have been fixed in v1.4.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-03-13T15:29:01.377",
    "last_modified": "2024-11-21T03:39:37.230",
    "fix_date": "2018-02-07T21:25:48Z"
  },
  "references": [
    {
      "url": "https://github.com/anymail/django-anymail/commit/1a6086f2b58478d71f89bf27eb034ed81aefe5ef",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/anymail/django-anymail/releases/tag/v1.4",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/anymail/django-anymail/commit/1a6086f2b58478d71f89bf27eb034ed81aefe5ef",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/anymail/django-anymail/releases/tag/v1.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:17.557395",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "django-anymail",
    "owner": "anymail",
    "created_at": "2016-03-10T02:55:09Z",
    "updated_at": "2025-01-25T19:51:07Z",
    "pushed_at": "2024-12-11T22:27:29Z",
    "size": 2415,
    "stars": 1718,
    "forks": 133,
    "open_issues": 8,
    "watchers": 1718,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "master",
      "v0.3.x",
      "v0.4.x",
      "v0.6.x",
      "v0.11.x",
      "v1.2.x",
      "v7.2.x"
    ],
    "languages": {
      "Python": 1475645
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T08:34:04.982452"
  }
}