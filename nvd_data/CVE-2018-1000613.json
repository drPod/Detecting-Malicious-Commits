{
  "cve_id": "CVE-2018-1000613",
  "github_data": {
    "repository": "bcgit/bc-java",
    "fix_commit": "4092ede58da51af9a21e4825fbad0d9a3ef5a223",
    "related_commits": [
      "4092ede58da51af9a21e4825fbad0d9a3ef5a223",
      "cd98322b171b15b3f88c5ec871175147893c31e6",
      "4092ede58da51af9a21e4825fbad0d9a3ef5a223",
      "cd98322b171b15b3f88c5ec871175147893c31e6"
    ],
    "patch_url": "https://github.com/bcgit/bc-java/commit/4092ede58da51af9a21e4825fbad0d9a3ef5a223.patch",
    "fix_commit_details": {
      "sha": "4092ede58da51af9a21e4825fbad0d9a3ef5a223",
      "commit_date": "2018-03-03T03:06:34Z",
      "author": {
        "login": "dghgit",
        "type": "User",
        "stats": {
          "total_commits": 5139,
          "average_weekly_commits": 8.235576923076923,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 467
        }
      },
      "commit_message": {
        "title": "added additional checking to XMSS BDS tree parsing. Failures now mostly cause IOException",
        "length": 89,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 163,
        "additions": 97,
        "deletions": 66
      },
      "files": [
        {
          "filename": "core/src/main/java/org/bouncycastle/pqc/crypto/gmss/GMSSKeyPairGenerator.java",
          "status": "modified",
          "additions": 10,
          "deletions": 17,
          "patch": "@@ -178,26 +178,19 @@ private AsymmetricCipherKeyPair genKeyPair()\n         // from bottom up to the root\n         for (int h = numLayer - 1; h >= 0; h--)\n         {\n-            GMSSRootCalc tree = new GMSSRootCalc(this.heightOfTrees[h], this.K[h], digestProvider);\n-            try\n-            {\n-                // on lowest layer no lower root is available, so just call\n-                // the method with null as first parameter\n-                if (h == numLayer - 1)\n-                {\n-                    tree = this.generateCurrentAuthpathAndRoot(null, currentStack[h], seeds[h], h);\n-                }\n-                else\n-                // otherwise call the method with the former computed root\n-                // value\n-                {\n-                    tree = this.generateCurrentAuthpathAndRoot(currentRoots[h + 1], currentStack[h], seeds[h], h);\n-                }\n+            GMSSRootCalc tree;\n \n+            // on lowest layer no lower root is available, so just call\n+            // the method with null as first parameter\n+            if (h == numLayer - 1)\n+            {\n+                tree = this.generateCurrentAuthpathAndRoot(null, currentStack[h], seeds[h], h);\n             }\n-            catch (Exception e1)\n+            else\n+            // otherwise call the method with the former computed root\n+            // value\n             {\n-                e1.printStackTrace();\n+                tree = this.generateCurrentAuthpathAndRoot(currentRoots[h + 1], currentStack[h], seeds[h], h);\n             }\n \n             // set initial values needed for the private key construction"
        },
        {
          "filename": "core/src/main/java/org/bouncycastle/pqc/crypto/rainbow/RainbowParameters.java",
          "status": "modified",
          "additions": 5,
          "deletions": 12,
          "patch": "@@ -44,37 +44,30 @@ public RainbowParameters()\n     public RainbowParameters(int[] vi)\n     {\n         this.vi = vi;\n-        try\n-        {\n-            checkParams();\n-        }\n-        catch (Exception e)\n-        {\n-            e.printStackTrace();\n-        }\n+\n+        checkParams();\n     }\n \n     private void checkParams()\n-        throws Exception\n     {\n         if (vi == null)\n         {\n-            throw new Exception(\"no layers defined.\");\n+            throw new IllegalArgumentException(\"no layers defined.\");\n         }\n         if (vi.length > 1)\n         {\n             for (int i = 0; i < vi.length - 1; i++)\n             {\n                 if (vi[i] >= vi[i + 1])\n                 {\n-                    throw new Exception(\n+                    throw new IllegalArgumentException(\n                         \"v[i] has to be smaller than v[i+1]\");\n                 }\n             }\n         }\n         else\n         {\n-            throw new Exception(\n+            throw new IllegalArgumentException(\n                 \"Rainbow needs at least 1 layer, such that v1 < v2.\");\n         }\n     }"
        },
        {
          "filename": "core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSMTPrivateKeyParameters.java",
          "status": "modified",
          "additions": 8,
          "deletions": 11,
          "patch": "@@ -68,21 +68,21 @@ private XMSSMTPrivateKeyParameters(Builder builder)\n \t\t\t/* import BDS state */\n             byte[] bdsStateBinary = XMSSUtil.extractBytesAtOffset(privateKey, position, privateKey.length - position);\n \n-            BDSStateMap bdsImport = null;\n             try\n             {\n-                bdsImport = (BDSStateMap)XMSSUtil.deserialize(bdsStateBinary);\n+                BDSStateMap bdsImport = (BDSStateMap)XMSSUtil.deserialize(bdsStateBinary, BDSStateMap.class);\n+\n+                bdsImport.setXMSS(builder.xmss);\n+                bdsState = bdsImport;\n             }\n             catch (IOException e)\n             {\n-                e.printStackTrace();\n+                throw new IllegalArgumentException(e.getMessage(), e);\n             }\n             catch (ClassNotFoundException e)\n             {\n-                e.printStackTrace();\n+                throw new IllegalArgumentException(e.getMessage(), e);\n             }\n-            bdsImport.setXMSS(builder.xmss);\n-            bdsState = bdsImport;\n         }\n         else\n         {\n@@ -260,17 +260,14 @@ public byte[] toByteArray()\n \t\t/* copy root */\n         XMSSUtil.copyBytesAtOffset(out, root, position);\n \t\t/* concatenate bdsState */\n-        byte[] bdsStateOut = null;\n         try\n         {\n-            bdsStateOut = XMSSUtil.serialize(bdsState);\n+            return Arrays.concatenate(out, XMSSUtil.serialize(bdsState));\n         }\n         catch (IOException e)\n         {\n-            e.printStackTrace();\n-            throw new RuntimeException(\"error serializing bds state\");\n+            throw new IllegalStateException(\"error serializing bds state: \" + e.getMessage(), e);\n         }\n-        return Arrays.concatenate(out, bdsStateOut);\n     }\n \n     public long getIndex()"
        },
        {
          "filename": "core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSPrivateKeyParameters.java",
          "status": "modified",
          "additions": 10,
          "deletions": 11,
          "patch": "@@ -86,26 +86,25 @@ private XMSSPrivateKeyParameters(Builder builder)\n             position += rootSize;\n \t\t\t/* import BDS state */\n             byte[] bdsStateBinary = XMSSUtil.extractBytesAtOffset(privateKey, position, privateKey.length - position);\n-            BDS bdsImport = null;\n             try\n             {\n-                bdsImport = (BDS)XMSSUtil.deserialize(bdsStateBinary);\n+                BDS bdsImport = (BDS)XMSSUtil.deserialize(bdsStateBinary, BDS.class);\n+                bdsImport.setXMSS(builder.xmss);\n+                bdsImport.validate();\n+                if (bdsImport.getIndex() != index)\n+                {\n+                    throw new IllegalStateException(\"serialized BDS has wrong index\");\n+                }\n+                bdsState = bdsImport;\n             }\n             catch (IOException e)\n             {\n-                e.printStackTrace();\n+                throw new IllegalArgumentException(e.getMessage(), e);\n             }\n             catch (ClassNotFoundException e)\n             {\n-                e.printStackTrace();\n-            }\n-            bdsImport.setXMSS(builder.xmss);\n-            bdsImport.validate();\n-            if (bdsImport.getIndex() != index)\n-            {\n-                throw new IllegalStateException(\"serialized BDS has wrong index\");\n+                throw new IllegalArgumentException(e.getMessage(), e);\n             }\n-            bdsState = bdsImport;\n         }\n         else\n         {"
        },
        {
          "filename": "core/src/main/java/org/bouncycastle/pqc/crypto/xmss/XMSSUtil.java",
          "status": "modified",
          "additions": 15,
          "deletions": 2,
          "patch": "@@ -321,12 +321,25 @@ public static byte[] serialize(Object obj)\n         return out.toByteArray();\n     }\n \n-    public static Object deserialize(byte[] data)\n+    public static Object deserialize(byte[] data, Class clazz)\n         throws IOException, ClassNotFoundException\n     {\n         ByteArrayInputStream in = new ByteArrayInputStream(data);\n         ObjectInputStream is = new ObjectInputStream(in);\n-        return is.readObject();\n+        Object obj = is.readObject();\n+\n+        if (is.available() != 0)\n+        {\n+            throw new IOException(\"unexpected data found at end of ObjectInputStream\");\n+        }\n+        if (clazz.isInstance(obj))\n+        {\n+            return obj;\n+        }\n+        else\n+        {\n+            throw new IOException(\"unexpected class found in ObjectInputStream\");\n+        }\n     }\n \n     public static int calculateTau(int index, int height)"
        },
        {
          "filename": "core/src/main/java/org/bouncycastle/pqc/math/linearalgebra/GF2nField.java",
          "status": "modified",
          "additions": 3,
          "deletions": 10,
          "patch": "@@ -155,16 +155,9 @@ protected final GF2Polynomial[] invertMatrix(GF2Polynomial[] matrix)\n         // initialize a as a copy of matrix and inv as E(inheitsmatrix)\n         for (i = 0; i < mDegree; i++)\n         {\n-            try\n-            {\n-                a[i] = new GF2Polynomial(matrix[i]);\n-                inv[i] = new GF2Polynomial(mDegree);\n-                inv[i].setBit(mDegree - 1 - i);\n-            }\n-            catch (RuntimeException BDNEExc)\n-            {\n-                BDNEExc.printStackTrace();\n-            }\n+            a[i] = new GF2Polynomial(matrix[i]);\n+            inv[i] = new GF2Polynomial(mDegree);\n+            inv[i].setBit(mDegree - 1 - i);\n         }\n         // construct triangle matrix so that for each a[i] the first i bits are\n         // zero"
        },
        {
          "filename": "core/src/test/java/org/bouncycastle/pqc/crypto/test/XMSSMTPrivateKeyTest.java",
          "status": "modified",
          "additions": 43,
          "deletions": 1,
          "patch": "@@ -5,19 +5,61 @@\n \n import junit.framework.TestCase;\n import org.bouncycastle.crypto.digests.SHA256Digest;\n+import org.bouncycastle.pqc.crypto.xmss.XMSS;\n import org.bouncycastle.pqc.crypto.xmss.XMSSMT;\n import org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters;\n+import org.bouncycastle.pqc.crypto.xmss.XMSSParameters;\n+import org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters;\n import org.bouncycastle.util.Arrays;\n+import org.bouncycastle.util.encoders.Base64;\n \n /**\n  * Test cases for XMSSMTPrivateKey class.\n  */\n public class XMSSMTPrivateKeyTest\n     extends TestCase\n {\n+    public void testPrivateKeySerialisation()\n+        throws Exception\n+    {\n+        String stream = \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArO0ABXNyACJzdW4ucm1pLnNlcnZlci5BY3RpdmF0aW9uR3JvdXBJbXBsT+r9SAwuMqcCAARaAA1ncm91cEluYWN0aXZlTAAGYWN0aXZldAAVTGphdmEvdXRpbC9IYXNodGFibGU7TAAHZ3JvdXBJRHQAJ0xqYXZhL3JtaS9hY3RpdmF0aW9uL0FjdGl2YXRpb25Hcm91cElEO0wACWxvY2tlZElEc3QAEExqYXZhL3V0aWwvTGlzdDt4cgAjamF2YS5ybWkuYWN0aXZhdGlvbi5BY3RpdmF0aW9uR3JvdXCVLvKwBSnVVAIAA0oAC2luY2FybmF0aW9uTAAHZ3JvdXBJRHEAfgACTAAHbW9uaXRvcnQAJ0xqYXZhL3JtaS9hY3RpdmF0aW9uL0FjdGl2YXRpb25Nb25pdG9yO3hyACNqYXZhLnJtaS5zZXJ2ZXIuVW5pY2FzdFJlbW90ZU9iamVjdEUJEhX14n4xAgADSQAEcG9ydEwAA2NzZnQAKExqYXZhL3JtaS9zZXJ2ZXIvUk1JQ2xpZW50U29ja2V0RmFjdG9yeTtMAANzc2Z0AChMamF2YS9ybWkvc2VydmVyL1JNSVNlcnZlclNvY2tldEZhY3Rvcnk7eHIAHGphdmEucm1pLnNlcnZlci5SZW1vdGVTZXJ2ZXLHGQcSaPM5+wIAAHhyABxqYXZhLnJtaS5zZXJ2ZXIuUmVtb3RlT2JqZWN002G0kQxhMx4DAAB4cHcSABBVbmljYXN0U2VydmVyUmVmeAAAFbNwcAAAAAAAAAAAcHAAcHBw\";\n+\n+        XMSSParameters params = new XMSSParameters(10, new SHA256Digest());\n+\n+        byte[] output = Base64.decode(new String(stream).getBytes(\"UTF-8\"));\n+\n+\n+        //Simple Exploit\n+\n+        try\n+        {\n+            new XMSSPrivateKeyParameters.Builder(params).withPrivateKey(output, params).build();\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            assertTrue(e.getCause() instanceof IOException);\n+        }\n+\n+        //Same Exploit other method\n+\n+        XMSS xmss2 = new XMSS(params, new SecureRandom());\n+\n+        xmss2.generateKeys();\n+\n+        byte[] publicKey = xmss2.exportPublicKey();\n+\n+        try\n+        {\n+            xmss2.importState(output, publicKey);\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            assertTrue(e.getCause() instanceof IOException);\n+        }\n+    }\n \n     public void testPrivateKeyParsingSHA256()\n-        throws IOException, ClassNotFoundException\n+        throws Exception\n     {\n         XMSSMTParameters params = new XMSSMTParameters(20, 10, new SHA256Digest());\n         XMSSMT mt = new XMSSMT(params, new SecureRandom());"
        },
        {
          "filename": "docs/releasenotes.html",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@ <h3>2.1.1 Version</h3>\n <h3>2.1.2 Defects Fixed</h3>\n <ul>\n <li>Base64/UrlBase64 would throw an exception on a zero length string. This has been fixed.</li>\n+<li>XMSS applies further validation to deserialisation of the BDS tree so that failure occurs as soon as tampering is detected.</li>\n </ul>\n <h3>2.1.3 Additional Features and Functionality</h3>\n <ul>"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSMTPrivateKey.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -52,7 +52,7 @@ public BCXMSSMTPrivateKey(PrivateKeyInfo keyInfo)\n \n             if (xmssMtPrivateKey.getBdsState() != null)\n             {\n-                keyBuilder.withBDSState((BDSStateMap)XMSSUtil.deserialize(xmssMtPrivateKey.getBdsState()));\n+                keyBuilder.withBDSState((BDSStateMap)XMSSUtil.deserialize(xmssMtPrivateKey.getBdsState(), BDSStateMap.class));\n             }\n \n             this.keyParams = keyBuilder.build();"
        },
        {
          "filename": "prov/src/main/java/org/bouncycastle/pqc/jcajce/provider/xmss/BCXMSSPrivateKey.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -51,7 +51,7 @@ public BCXMSSPrivateKey(PrivateKeyInfo keyInfo)\n \n             if (xmssPrivateKey.getBdsState() != null)\n             {\n-                keyBuilder.withBDSState((BDS)XMSSUtil.deserialize(xmssPrivateKey.getBdsState()));\n+                keyBuilder.withBDSState((BDS)XMSSUtil.deserialize(xmssPrivateKey.getBdsState(), BDS.class));\n             }\n \n             this.keyParams = keyBuilder.build();"
        }
      ],
      "file_patterns": {
        "security_files": 8,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 7,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5ce0d4d4536bcb622c1077a6b9157b02ad8adcc5",
            "date": "2025-01-14T16:09:19Z",
            "author_login": "dghgit"
          },
          {
            "sha": "29f141ac3217f48db3a65920c4971ffaddeb4a72",
            "date": "2025-01-14T16:08:32Z",
            "author_login": "dghgit"
          },
          {
            "sha": "8a81f6cdd89b798ecfc132b37c15331e7c5df2b4",
            "date": "2025-01-14T15:01:54Z",
            "author_login": "dghgit"
          },
          {
            "sha": "c9d83fbadb9a1ce7c12dca99833c6b42de088697",
            "date": "2025-01-14T14:10:20Z",
            "author_login": "dghgit"
          },
          {
            "sha": "9a36e56b93e361dbc065f5bd920574f96f99102f",
            "date": "2025-01-14T14:10:04Z",
            "author_login": "dghgit"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-470",
    "description": "Legion of the Bouncy Castle Legion of the Bouncy Castle Java Cryptography APIs 1.58 up to but not including 1.60 contains a CWE-470: Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') vulnerability in XMSS/XMSS^MT private key deserialization that can result in Deserializing an XMSS/XMSS^MT private key can result in the execution of unexpected code. This attack appear to be exploitable via A handcrafted private key can include references to unexpected classes which will be picked up from the class path for the executing application. This vulnerability appears to have been fixed in 1.60 and later.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2018-07-09T20:29:00.283",
    "last_modified": "2024-11-21T03:40:13.780",
    "fix_date": "2018-03-03T03:06:34Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-05/msg00011.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/4092ede58da51af9a21e4825fbad0d9a3ef5a223#diff-2c06e2edef41db889ee14899e12bd574",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/cd98322b171b15b3f88c5ec871175147893c31e6#diff-148a6c098af0199192d6aede960f45dc",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20190204-0003/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuApr2021.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2020.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuoct2020.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-05/msg00011.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/4092ede58da51af9a21e4825fbad0d9a3ef5a223#diff-2c06e2edef41db889ee14899e12bd574",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/bcgit/bc-java/commit/cd98322b171b15b3f88c5ec871175147893c31e6#diff-148a6c098af0199192d6aede960f45dc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/rf1bbc0ea4a9f014cf94df9a12a6477d24a27f52741dbc87f2fd52ff2%40%3Cissues.geode.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20190204-0003/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuApr2021.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2020.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuoct2020.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:28.630168",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bc-java",
    "owner": "bcgit",
    "created_at": "2013-06-01T02:38:42Z",
    "updated_at": "2025-01-13T21:13:46Z",
    "pushed_at": "2025-01-13T21:13:42Z",
    "size": 115936,
    "stars": 2364,
    "forks": 1146,
    "open_issues": 290,
    "watchers": 2364,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Java": 50883690,
      "Shell": 153252,
      "HTML": 81181,
      "Batchfile": 12956
    },
    "commit_activity": {
      "total_commits_last_year": 902,
      "avg_commits_per_week": 17.346153846153847,
      "days_active_last_year": 210
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:21:20.845974"
  }
}