{
  "cve_id": "CVE-2018-10665",
  "github_data": {
    "repository": "ILIAS-eLearning/ILIAS",
    "fix_commit": "3fe6aa778ca06080cf1b7303cbc458aa0c42392a",
    "related_commits": [
      "3fe6aa778ca06080cf1b7303cbc458aa0c42392a",
      "c9c9211bd689f2dda02006159e69a856eae8944d",
      "3fe6aa778ca06080cf1b7303cbc458aa0c42392a",
      "c9c9211bd689f2dda02006159e69a856eae8944d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "3fe6aa778ca06080cf1b7303cbc458aa0c42392a",
      "commit_date": "2018-04-27T07:38:26Z",
      "author": {
        "login": "alex40724",
        "type": "User",
        "stats": {
          "total_commits": 10761,
          "average_weekly_commits": 9.142735768903993,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 902
        }
      },
      "commit_message": {
        "title": "removed demos",
        "length": 13,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 7272,
        "additions": 0,
        "deletions": 7272
      },
      "files": [
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.audioinfo.class.php",
          "status": "removed",
          "additions": 0,
          "deletions": 316,
          "patch": "@@ -1,316 +0,0 @@\n-<?php\n-\n-// +----------------------------------------------------------------------+\n-// | PHP version 4.1.0                                                    |\n-// +----------------------------------------------------------------------+\n-// | Placed in public domain by Allan Hansen, 2002. Share and enjoy!      |\n-// +----------------------------------------------------------------------+\n-// | /demo/demo.audioinfo.class.php                                       |\n-// |                                                                      |\n-// | Example wrapper class to extract information from audio files        |\n-// | through getID3().                                                    |\n-// |                                                                      |\n-// | getID3() returns a lot of information. Much of this information is   |\n-// | not needed for the end-application. It is also possible that some    |\n-// | users want to extract specific info. Modifying getID3() files is a   |\n-// | bad idea, as modifications needs to be done to future versions of    |\n-// | getID3().                                                            |\n-// |                                                                      |\n-// | Modify this wrapper class instead. This example extracts certain     |\n-// | fields only and adds a new root value - encoder_options if possible. |\n-// | It also checks for mp3 files with wave headers.                      |\n-// +----------------------------------------------------------------------+\n-// | Example code:                                                        |\n-// |   $au = new AudioInfo();                                             |\n-// |   print_r($au->Info('file.flac');                                    |\n-// +----------------------------------------------------------------------+\n-// | Authors: Allan Hansen <ah\u00d8artemis*dk>                                |\n-// +----------------------------------------------------------------------+\n-//\n-\n-\n-\n-/**\n-* getID3() settings\n-*/\n-\n-require_once('../getid3/getid3.php');\n-\n-\n-\n-\n-/**\n-* Class for extracting information from audio files with getID3().\n-*/\n-\n-class AudioInfo {\n-\n-\t/**\n-\t* Private variables\n-\t*/\n-\tvar $result = NULL;\n-\tvar $info   = NULL;\n-\n-\n-\n-\n-\t/**\n-\t* Constructor\n-\t*/\n-\n-\tfunction AudioInfo() {\n-\n-\t\t// Initialize getID3 engine\n-\t\t$this->getID3 = new getID3;\n-\t\t$this->getID3->option_md5_data        = true;\n-\t\t$this->getID3->option_md5_data_source = true;\n-\t\t$this->getID3->encoding               = 'UTF-8';\n-\t}\n-\n-\n-\n-\n-\t/**\n-\t* Extract information - only public function\n-\t*\n-\t* @access   public\n-\t* @param    string  file    Audio file to extract info from.\n-\t*/\n-\n-\tfunction Info($file) {\n-\n-\t\t// Analyze file\n-\t\t$this->info = $this->getID3->analyze($file);\n-\n-\t\t// Exit here on error\n-\t\tif (isset($this->info['error'])) {\n-\t\t\treturn array ('error' => $this->info['error']);\n-\t\t}\n-\n-\t\t// Init wrapper object\n-\t\t$this->result = array();\n-\t\t$this->result['format_name']     = (isset($this->info['fileformat']) ? $this->info['fileformat'] : '').'/'.(isset($this->info['audio']['dataformat']) ? $this->info['audio']['dataformat'] : '').(isset($this->info['video']['dataformat']) ? '/'.$this->info['video']['dataformat'] : '');\n-\t\t$this->result['encoder_version'] = (isset($this->info['audio']['encoder'])         ? $this->info['audio']['encoder']         : '');\n-\t\t$this->result['encoder_options'] = (isset($this->info['audio']['encoder_options']) ? $this->info['audio']['encoder_options'] : '');\n-\t\t$this->result['bitrate_mode']    = (isset($this->info['audio']['bitrate_mode'])    ? $this->info['audio']['bitrate_mode']    : '');\n-\t\t$this->result['channels']        = (isset($this->info['audio']['channels'])        ? $this->info['audio']['channels']        : '');\n-\t\t$this->result['sample_rate']     = (isset($this->info['audio']['sample_rate'])     ? $this->info['audio']['sample_rate']     : '');\n-\t\t$this->result['bits_per_sample'] = (isset($this->info['audio']['bits_per_sample']) ? $this->info['audio']['bits_per_sample'] : '');\n-\t\t$this->result['playing_time']    = (isset($this->info['playtime_seconds'])         ? $this->info['playtime_seconds']         : '');\n-\t\t$this->result['avg_bit_rate']    = (isset($this->info['audio']['bitrate'])         ? $this->info['audio']['bitrate']         : '');\n-\t\t$this->result['tags']            = (isset($this->info['tags'])                     ? $this->info['tags']                     : '');\n-\t\t$this->result['comments']        = (isset($this->info['comments'])                 ? $this->info['comments']                 : '');\n-\t\t$this->result['warning']         = (isset($this->info['warning'])                  ? $this->info['warning']                  : '');\n-\t\t$this->result['md5']             = (isset($this->info['md5_data'])                 ? $this->info['md5_data']                 : '');\n-\n-\t\t// Post getID3() data handling based on file format\n-\t\t$method = (isset($this->info['fileformat']) ? $this->info['fileformat'] : '').'Info';\n-\t\tif ($method && method_exists($this, $method)) {\n-\t\t\t$this->$method();\n-\t\t}\n-\n-\t\treturn $this->result;\n-\t}\n-\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for AAC files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction aacInfo() {\n-\t\t$this->result['format_name']     = 'AAC';\n-\t}\n-\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for Wave files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction riffInfo() {\n-\t\tif ($this->info['audio']['dataformat'] == 'wav') {\n-\n-\t\t\t$this->result['format_name'] = 'Wave';\n-\n-\t\t} elseif (preg_match('#^mp[1-3]$#', $this->info['audio']['dataformat'])) {\n-\n-\t\t\t$this->result['format_name'] = strtoupper($this->info['audio']['dataformat']);\n-\n-\t\t} else {\n-\n-\t\t\t$this->result['format_name'] = 'riff/'.$this->info['audio']['dataformat'];\n-\n-\t\t}\n-\t}\n-\n-\n-\n-\n-\t/**\n-\t* * post-getID3() data handling for FLAC files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction flacInfo() {\n-\t\t$this->result['format_name']     = 'FLAC';\n-\t}\n-\n-\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for Monkey's Audio files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction macInfo() {\n-\t\t$this->result['format_name']     = 'Monkey\\'s Audio';\n-\t}\n-\n-\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for Lossless Audio files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction laInfo() {\n-\t\t$this->result['format_name']     = 'La';\n-\t}\n-\n-\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for Ogg Vorbis files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction oggInfo() {\n-\t\tif ($this->info['audio']['dataformat'] == 'vorbis') {\n-\n-\t\t\t$this->result['format_name']     = 'Ogg Vorbis';\n-\n-\t\t} else if ($this->info['audio']['dataformat'] == 'flac') {\n-\n-\t\t\t$this->result['format_name'] = 'Ogg FLAC';\n-\n-\t\t} else if ($this->info['audio']['dataformat'] == 'speex') {\n-\n-\t\t\t$this->result['format_name'] = 'Ogg Speex';\n-\n-\t\t} else {\n-\n-\t\t\t$this->result['format_name'] = 'Ogg '.$this->info['audio']['dataformat'];\n-\n-\t\t}\n-\t}\n-\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for Musepack files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction mpcInfo() {\n-\t\t$this->result['format_name']     = 'Musepack';\n-\t}\n-\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for MPEG files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction mp3Info() {\n-\t\t$this->result['format_name']     = 'MP3';\n-\t}\n-\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for MPEG files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction mp2Info() {\n-\t\t$this->result['format_name']     = 'MP2';\n-\t}\n-\n-\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for MPEG files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction mp1Info() {\n-\t\t$this->result['format_name']     = 'MP1';\n-\t}\n-\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for WMA files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction asfInfo() {\n-\t\t$this->result['format_name']     = strtoupper($this->info['audio']['dataformat']);\n-\t}\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for Real files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction realInfo() {\n-\t\t$this->result['format_name']     = 'Real';\n-\t}\n-\n-\n-\n-\n-\n-\t/**\n-\t* post-getID3() data handling for VQF files.\n-\t*\n-\t* @access   private\n-\t*/\n-\n-\tfunction vqfInfo() {\n-\t\t$this->result['format_name']     = 'VQF';\n-\t}\n-\n-}"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.basic.php",
          "status": "removed",
          "additions": 0,
          "deletions": 54,
          "patch": "@@ -1,54 +0,0 @@\n-<?php\n-/////////////////////////////////////////////////////////////////\n-/// getID3() by James Heinrich <info@getid3.org>               //\n-//  available at http://getid3.sourceforge.net                 //\n-//            or http://www.getid3.org                         //\n-//          also https://github.com/JamesHeinrich/getID3       //\n-/////////////////////////////////////////////////////////////////\n-//                                                             //\n-// /demo/demo.basic.php - part of getID3()                     //\n-// Sample script showing most basic use of getID3()            //\n-// See readme.txt for more details                             //\n-//                                                            ///\n-/////////////////////////////////////////////////////////////////\n-\n-die('Due to a security issue, this demo has been disabled. It can be enabled by removing line '.__LINE__.' in '.$_SERVER['PHP_SELF']);\n-\n-// include getID3() library (can be in a different directory if full path is specified)\n-require_once('../getid3/getid3.php');\n-\n-// Initialize getID3 engine\n-$getID3 = new getID3;\n-\n-// Analyze file and store returned data in $ThisFileInfo\n-$ThisFileInfo = $getID3->analyze($filename);\n-\n-/*\n- Optional: copies data from all subarrays of [tags] into [comments] so\n- metadata is all available in one location for all tag formats\n- metainformation is always available under [tags] even if this is not called\n-*/\n-getid3_lib::CopyTagsToComments($ThisFileInfo);\n-\n-/*\n- Output desired information in whatever format you want\n- Note: all entries in [comments] or [tags] are arrays of strings\n- See structure.txt for information on what information is available where\n- or check out the output of /demos/demo.browse.php for a particular file\n- to see the full detail of what information is returned where in the array\n- Note: all array keys may not always exist, you may want to check with isset()\n- or empty() before deciding what to output\n-*/\n-\n-//echo $ThisFileInfo['comments_html']['artist'][0]; // artist from any/all available tag formats\n-//echo $ThisFileInfo['tags']['id3v2']['title'][0];  // title from ID3v2\n-//echo $ThisFileInfo['audio']['bitrate'];           // audio bitrate\n-//echo $ThisFileInfo['playtime_string'];            // playtime in minutes:seconds, formatted string\n-\n-/* if you want to see all the tag data (from all tag formats), uncomment this line: */\n-//echo '<pre>'.htmlentities(print_r($ThisFileInfo['comments'], true), ENT_SUBSTITUTE).'</pre>';\n-\n-/* if you want to see ALL the output, uncomment this line: */\n-//echo '<pre>'.htmlentities(print_r($ThisFileInfo, true), ENT_SUBSTITUTE).'</pre>';\n-\n-"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.browse.php",
          "status": "removed",
          "additions": 0,
          "deletions": 609,
          "patch": "@@ -1,609 +0,0 @@\n-<?php\n-/////////////////////////////////////////////////////////////////\n-/// getID3() by James Heinrich <info@getid3.org>               //\n-//  available at http://getid3.sourceforge.net                 //\n-//            or http://www.getid3.org                         //\n-//          also https://github.com/JamesHeinrich/getID3       //\n-/////////////////////////////////////////////////////////////////\n-//                                                             //\n-// /demo/demo.browse.php - part of getID3()                     //\n-// Sample script for browsing/scanning files and displaying    //\n-// information returned by getID3()                            //\n-// See readme.txt for more details                             //\n-//                                                            ///\n-/////////////////////////////////////////////////////////////////\n-\n-die('For security reasons, this demo has been disabled. It can be enabled by removing line '.__LINE__.' in demos/'.basename(__FILE__));\n-define('GETID3_DEMO_BROWSE_ALLOW_EDIT_LINK',   false);\n-define('GETID3_DEMO_BROWSE_ALLOW_DELETE_LINK', false);\n-define('GETID3_DEMO_BROWSE_ALLOW_MD5_LINK',    false);\n-\n-/////////////////////////////////////////////////////////////////\n-// die if magic_quotes_runtime or magic_quotes_gpc are set\n-if (function_exists('get_magic_quotes_runtime') && get_magic_quotes_runtime()) {\n-\tdie('magic_quotes_runtime is enabled, getID3 will not run.');\n-}\n-if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {\n-\tdie('magic_quotes_gpc is enabled, getID3 will not run.');\n-}\n-/////////////////////////////////////////////////////////////////\n-\n-$PageEncoding = 'UTF-8';\n-\n-$writescriptfilename = 'demo.write.php';\n-\n-require_once('../getid3/getid3.php');\n-\n-// Needed for windows only. Leave commented-out to auto-detect, only define here if auto-detection does not work properly\n-//define('GETID3_HELPERAPPSDIR', 'C:\\\\helperapps\\\\');\n-\n-// Initialize getID3 engine\n-$getID3 = new getID3;\n-$getID3->setOption(array('encoding' => $PageEncoding));\n-\n-$getID3checkColor_Head           = 'CCCCDD';\n-$getID3checkColor_DirectoryLight = 'FFCCCC';\n-$getID3checkColor_DirectoryDark  = 'EEBBBB';\n-$getID3checkColor_FileLight      = 'EEEEEE';\n-$getID3checkColor_FileDark       = 'DDDDDD';\n-$getID3checkColor_UnknownLight   = 'CCCCFF';\n-$getID3checkColor_UnknownDark    = 'BBBBDD';\n-\n-\n-///////////////////////////////////////////////////////////////////////////////\n-\n-\n-header('Content-Type: text/html; charset='.$PageEncoding);\n-echo '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">';\n-echo '<html><head>';\n-echo '<title>getID3() - /demo/demo.browse.php (sample script)</title>';\n-echo '<link rel=\"stylesheet\" href=\"getid3.css\" type=\"text/css\">';\n-echo '<meta http-equiv=\"Content-Type\" content=\"text/html;charset='.$PageEncoding.'\" />';\n-echo '</head><body>';\n-\n-if (isset($_REQUEST['deletefile'])) {\n-\tif (file_exists($_REQUEST['deletefile'])) {\n-\t\tif (unlink($_REQUEST['deletefile'])) {\n-\t\t\t$deletefilemessage = 'Successfully deleted '.addslashes($_REQUEST['deletefile']);\n-\t\t} else {\n-\t\t\t$deletefilemessage = 'FAILED to delete '.addslashes($_REQUEST['deletefile']).' - error deleting file';\n-\t\t}\n-\t} else {\n-\t\t$deletefilemessage = 'FAILED to delete '.addslashes($_REQUEST['deletefile']).' - file does not exist';\n-\t}\n-\tif (isset($_REQUEST['noalert'])) {\n-\t\techo '<b><font color=\"'.(($deletefilemessage{0} == 'F') ? '#FF0000' : '#008000').'\">'.$deletefilemessage.'</font></b><hr>';\n-\t} else {\n-\t\techo '<script type=\"text/javascript\">alert(\"'.$deletefilemessage.'\");</script>';\n-\t}\n-}\n-\n-\n-if (isset($_REQUEST['filename'])) {\n-\n-\tif (!file_exists($_REQUEST['filename']) || !is_file($_REQUEST['filename'])) {\n-\t\tdie(getid3_lib::iconv_fallback('ISO-8859-1', $PageEncoding, $_REQUEST['filename'].' does not exist'));\n-\t}\n-\t$starttime = microtime(true);\n-\n-\t//$getID3->setOption(array(\n-\t//\t'option_md5_data'  => $AutoGetHashes,\n-\t//\t'option_sha1_data' => $AutoGetHashes,\n-\t//));\n-\t$ThisFileInfo = $getID3->analyze($_REQUEST['filename']);\n-\t$AutoGetHashes = (bool) (isset($ThisFileInfo['filesize']) && ($ThisFileInfo['filesize'] > 0) && ($ThisFileInfo['filesize'] < (50 * 1048576))); // auto-get md5_data, md5_file, sha1_data, sha1_file if filesize < 50MB, and NOT zero (which may indicate a file>2GB)\n-\t$AutoGetHashes = ($AutoGetHashes && GETID3_DEMO_BROWSE_ALLOW_MD5_LINK);\n-\tif ($AutoGetHashes) {\n-\t\t$ThisFileInfo['md5_file']  = md5_file($_REQUEST['filename']);\n-\t\t$ThisFileInfo['sha1_file'] = sha1_file($_REQUEST['filename']);\n-\t}\n-\n-\n-\tgetid3_lib::CopyTagsToComments($ThisFileInfo);\n-\n-\t$listdirectory = dirname($_REQUEST['filename']);\n-\t$listdirectory = realpath($listdirectory); // get rid of /../../ references\n-\n-\tif (GETID3_OS_ISWINDOWS) {\n-\t\t// this mostly just gives a consistant look to Windows and *nix filesystems\n-\t\t// (windows uses \\ as directory seperator, *nix uses /)\n-\t\t$listdirectory = str_replace(DIRECTORY_SEPARATOR, '/', $listdirectory.'/');\n-\t}\n-\n-\tif (strstr($_REQUEST['filename'], 'http://') || strstr($_REQUEST['filename'], 'ftp://')) {\n-\t\techo '<i>Cannot browse remote filesystems</i><br>';\n-\t} else {\n-\t\techo 'Browse: <a href=\"'.htmlentities($_SERVER['PHP_SELF'].'?listdirectory='.urlencode($listdirectory), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\">'.getid3_lib::iconv_fallback('ISO-8859-1', $PageEncoding, $listdirectory).'</a><br>';\n-\t}\n-\n-\tgetid3_lib::ksort_recursive($ThisFileInfo);\n-\techo table_var_dump($ThisFileInfo, false, $PageEncoding);\n-\t$endtime = microtime(true);\n-\techo 'File parsed in '.number_format($endtime - $starttime, 3).' seconds.<br>';\n-\n-} else {\n-\n-\t$listdirectory = (isset($_REQUEST['listdirectory']) ? $_REQUEST['listdirectory'] : '.');\n-\t$listdirectory = realpath($listdirectory); // get rid of /../../ references\n-\t$currentfulldir = $listdirectory.'/';\n-\n-\tif (GETID3_OS_ISWINDOWS) {\n-\t\t// this mostly just gives a consistant look to Windows and *nix filesystems\n-\t\t// (windows uses \\ as directory seperator, *nix uses /)\n-\t\t$currentfulldir = str_replace(DIRECTORY_SEPARATOR, '/', $listdirectory.'/');\n-\t}\n-\n-\tob_start();\n-\tif ($handle = opendir($listdirectory)) {\n-\n-\t\tob_end_clean();\n-\t\techo str_repeat(' ', 300); // IE buffers the first 300 or so chars, making this progressive display useless - fill the buffer with spaces\n-\t\techo 'Processing';\n-\n-\t\t$starttime = microtime(true);\n-\n-\t\t$TotalScannedUnknownFiles  = 0;\n-\t\t$TotalScannedKnownFiles    = 0;\n-\t\t$TotalScannedPlaytimeFiles = 0;\n-\t\t$TotalScannedBitrateFiles  = 0;\n-\t\t$TotalScannedFilesize      = 0;\n-\t\t$TotalScannedPlaytime      = 0;\n-\t\t$TotalScannedBitrate       = 0;\n-\t\t$FilesWithWarnings         = 0;\n-\t\t$FilesWithErrors           = 0;\n-\n-\t\twhile ($file = readdir($handle)) {\n-\t\t\t$currentfilename = $listdirectory.'/'.$file;\n-\t\t\tset_time_limit(30); // allocate another 30 seconds to process this file - should go much quicker than this unless intense processing (like bitrate histogram analysis) is enabled\n-\t\t\techo ' .'; // progress indicator dot\n-\t\t\tflush();  // make sure the dot is shown, otherwise it's useless\n-\t\t\tswitch ($file) {\n-\t\t\t\tcase '..':\n-\t\t\t\t\t$ParentDir = realpath($file.'/..').'/';\n-\t\t\t\t\tif (GETID3_OS_ISWINDOWS) {\n-\t\t\t\t\t\t$ParentDir = str_replace(DIRECTORY_SEPARATOR, '/', $ParentDir);\n-\t\t\t\t\t}\n-\t\t\t\t\t$DirectoryContents[$currentfulldir]['dir'][$file]['filename'] = $ParentDir;\n-\t\t\t\t\tcontinue 2;\n-\t\t\t\t\tbreak;\n-\n-\t\t\t\tcase '.':\n-\t\t\t\t\t// ignore\n-\t\t\t\t\tcontinue 2;\n-\t\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\t// symbolic-link-resolution enhancements by davidbullock\u05f4ech-center*com\n-\t\t\t$TargetObject     = realpath($currentfilename);  // Find actual file path, resolve if it's a symbolic link\n-\t\t\t$TargetObjectType = filetype($TargetObject);     // Check file type without examining extension\n-\n-\t\t\tif ($TargetObjectType == 'dir') {\n-\n-\t\t\t\t$DirectoryContents[$currentfulldir]['dir'][$file]['filename'] = $file;\n-\n-\t\t\t} elseif ($TargetObjectType == 'file') {\n-\n-\t\t\t\t$getID3->setOption(array('option_md5_data' => (isset($_REQUEST['ShowMD5']) && GETID3_DEMO_BROWSE_ALLOW_MD5_LINK)));\n-\t\t\t\t$fileinformation = $getID3->analyze($currentfilename);\n-\n-\t\t\t\tgetid3_lib::CopyTagsToComments($fileinformation);\n-\n-\t\t\t\t$TotalScannedFilesize += (isset($fileinformation['filesize']) ? $fileinformation['filesize'] : 0);\n-\n-\t\t\t\tif (isset($_REQUEST['ShowMD5']) && GETID3_DEMO_BROWSE_ALLOW_MD5_LINK) {\n-\t\t\t\t\t$fileinformation['md5_file'] = md5_file($currentfilename);\n-\t\t\t\t}\n-\n-\t\t\t\tif (!empty($fileinformation['fileformat'])) {\n-\t\t\t\t\t$DirectoryContents[$currentfulldir]['known'][$file] = $fileinformation;\n-\t\t\t\t\t$TotalScannedPlaytime += (isset($fileinformation['playtime_seconds']) ? $fileinformation['playtime_seconds'] : 0);\n-\t\t\t\t\t$TotalScannedBitrate  += (isset($fileinformation['bitrate'])          ? $fileinformation['bitrate']          : 0);\n-\t\t\t\t\t$TotalScannedKnownFiles++;\n-\t\t\t\t} else {\n-\t\t\t\t\t$DirectoryContents[$currentfulldir]['other'][$file] = $fileinformation;\n-\t\t\t\t\t$DirectoryContents[$currentfulldir]['other'][$file]['playtime_string'] = '-';\n-\t\t\t\t\t$TotalScannedUnknownFiles++;\n-\t\t\t\t}\n-\t\t\t\tif (isset($fileinformation['playtime_seconds']) && ($fileinformation['playtime_seconds'] > 0)) {\n-\t\t\t\t\t$TotalScannedPlaytimeFiles++;\n-\t\t\t\t}\n-\t\t\t\tif (isset($fileinformation['bitrate']) && ($fileinformation['bitrate'] > 0)) {\n-\t\t\t\t\t$TotalScannedBitrateFiles++;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t$endtime = microtime(true);\n-\t\tclosedir($handle);\n-\t\techo 'done<br>';\n-\t\techo 'Directory scanned in '.number_format($endtime - $starttime, 2).' seconds.<br>';\n-\t\tflush();\n-\n-\t\t$columnsintable = 14;\n-\t\techo '<table class=\"table\" cellspacing=\"0\" cellpadding=\"3\">';\n-\n-\t\techo '<tr bgcolor=\"#'.$getID3checkColor_Head.'\"><th colspan=\"'.$columnsintable.'\">Files in '.getid3_lib::iconv_fallback('ISO-8859-1', $PageEncoding, $currentfulldir).'</th></tr>';\n-\t\t$rowcounter = 0;\n-\t\tforeach ($DirectoryContents as $dirname => $val) {\n-\t\t\tif (isset($DirectoryContents[$dirname]['dir']) && is_array($DirectoryContents[$dirname]['dir'])) {\n-\t\t\t\tuksort($DirectoryContents[$dirname]['dir'], 'MoreNaturalSort');\n-\t\t\t\tforeach ($DirectoryContents[$dirname]['dir'] as $filename => $fileinfo) {\n-\t\t\t\t\techo '<tr bgcolor=\"#'.(($rowcounter++ % 2) ? $getID3checkColor_DirectoryLight : $getID3checkColor_DirectoryDark).'\">';\n-\t\t\t\t\tif ($filename == '..') {\n-\t\t\t\t\t\techo '<td colspan=\"'.$columnsintable.'\">';\n-\t\t\t\t\t\techo '<form action=\"'.htmlentities($_SERVER['PHP_SELF'], ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\" method=\"get\">';\n-\t\t\t\t\t\techo 'Parent directory: ';\n-\t\t\t\t\t\techo '<input type=\"text\" name=\"listdirectory\" size=\"50\" style=\"background-color: '.$getID3checkColor_DirectoryDark.';\" value=\"';\n-\t\t\t\t\t\tif (GETID3_OS_ISWINDOWS) {\n-\t\t\t\t\t\t\techo htmlentities(str_replace(DIRECTORY_SEPARATOR, '/', realpath($dirname.$filename)), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\techo htmlentities(realpath($dirname.$filename), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\techo '\"> <input type=\"submit\" value=\"Go\">';\n-\t\t\t\t\t\techo '</form></td>';\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t$escaped_filename = htmlentities($filename, ENT_SUBSTITUTE, $PageEncoding); // do filesystems always return filenames in ISO-8859-1?\n-\t\t\t\t\t\t$escaped_filename = ($escaped_filename ? $escaped_filename : rawurlencode($filename));\n-\t\t\t\t\t\techo '<td colspan=\"'.$columnsintable.'\"><a href=\"'.htmlentities($_SERVER['PHP_SELF'].'?listdirectory='.urlencode($dirname.$filename), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\"><b>'.$escaped_filename.'</b></a></td>';\n-\t\t\t\t\t}\n-\t\t\t\t\techo '</tr>';\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\techo '<tr bgcolor=\"#'.$getID3checkColor_Head.'\">';\n-\t\t\techo '<th>Filename</th>';\n-\t\t\techo '<th>File Size</th>';\n-\t\t\techo '<th>Format</th>';\n-\t\t\techo '<th>Playtime</th>';\n-\t\t\techo '<th>Bitrate</th>';\n-\t\t\techo '<th>Artist</th>';\n-\t\t\techo '<th>Title</th>';\n-\t\t\tif (isset($_REQUEST['ShowMD5']) && GETID3_DEMO_BROWSE_ALLOW_MD5_LINK) {\n-\t\t\t\techo '<th>MD5&nbsp;File (File) (<a href=\"'.htmlentities($_SERVER['PHP_SELF'].'?listdirectory='.rawurlencode(isset($_REQUEST['listdirectory']) ? $_REQUEST['listdirectory'] : '.'), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\">disable</a>)</th>';\n-\t\t\t\techo '<th>MD5&nbsp;Data (File) (<a href=\"'.htmlentities($_SERVER['PHP_SELF'].'?listdirectory='.rawurlencode(isset($_REQUEST['listdirectory']) ? $_REQUEST['listdirectory'] : '.'), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\">disable</a>)</th>';\n-\t\t\t\techo '<th>MD5&nbsp;Data (Source) (<a href=\"'.htmlentities($_SERVER['PHP_SELF'].'?listdirectory='.rawurlencode(isset($_REQUEST['listdirectory']) ? $_REQUEST['listdirectory'] : '.'), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\">disable</a>)</th>';\n-\t\t\t} else {\n-\t\t\t\techo '<th colspan=\"3\">MD5&nbsp;Data'.(GETID3_DEMO_BROWSE_ALLOW_MD5_LINK ?' (<a href=\"'.htmlentities($_SERVER['PHP_SELF'].'?listdirectory='.rawurlencode(isset($_REQUEST['listdirectory']) ? $_REQUEST['listdirectory'] : '.').'&ShowMD5=1', ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\">enable</a>)' : '').'</th>';\n-\t\t\t}\n-\t\t\techo '<th>Tags</th>';\n-\t\t\techo '<th>Errors &amp; Warnings</th>';\n-\t\t\techo (GETID3_DEMO_BROWSE_ALLOW_EDIT_LINK   ? '<th>Edit</th>'   : '');\n-\t\t\techo (GETID3_DEMO_BROWSE_ALLOW_DELETE_LINK ? '<th>Delete</th>' : '');\n-\t\t\techo '</tr>';\n-\n-\t\t\tif (isset($DirectoryContents[$dirname]['known']) && is_array($DirectoryContents[$dirname]['known'])) {\n-\t\t\t\tuksort($DirectoryContents[$dirname]['known'], 'MoreNaturalSort');\n-\t\t\t\tforeach ($DirectoryContents[$dirname]['known'] as $filename => $fileinfo) {\n-\t\t\t\t\techo '<tr bgcolor=\"#'.(($rowcounter++ % 2) ? $getID3checkColor_FileDark : $getID3checkColor_FileLight).'\">';\n-\t\t\t\t\t$escaped_filename = htmlentities($filename, ENT_SUBSTITUTE, $PageEncoding);\n-\t\t\t\t\t$escaped_filename = ($escaped_filename ? $escaped_filename : rawurlencode($filename));\n-\t\t\t\t\techo '<td><a href=\"'.htmlentities($_SERVER['PHP_SELF'].'?filename='.urlencode($dirname.$filename), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\" title=\"View detailed analysis\">'.$escaped_filename.'</a></td>';\n-\t\t\t\t\techo '<td align=\"right\">&nbsp;'.number_format($fileinfo['filesize']).'</td>';\n-\t\t\t\t\techo '<td align=\"right\">&nbsp;'.NiceDisplayFiletypeFormat($fileinfo).'</td>';\n-\t\t\t\t\techo '<td align=\"right\">&nbsp;'.(isset($fileinfo['playtime_string']) ? $fileinfo['playtime_string'] : '-').'</td>';\n-\t\t\t\t\techo '<td align=\"right\">&nbsp;'.(isset($fileinfo['bitrate']) ? BitrateText($fileinfo['bitrate'] / 1000, 0, ((isset($fileinfo['audio']['bitrate_mode']) && ($fileinfo['audio']['bitrate_mode'] == 'vbr')) ? true : false)) : '-').'</td>';\n-\t\t\t\t\techo '<td align=\"left\">&nbsp;'.(isset($fileinfo['comments_html']['artist']) ? implode('<br>', $fileinfo['comments_html']['artist']) : ((isset($fileinfo['video']['resolution_x']) && isset($fileinfo['video']['resolution_y'])) ? $fileinfo['video']['resolution_x'].'x'.$fileinfo['video']['resolution_y'] : '')).'</td>';\n-\t\t\t\t\techo '<td align=\"left\">&nbsp;'.(isset($fileinfo['comments_html']['title'])  ? implode('<br>', $fileinfo['comments_html']['title'])  :  (isset($fileinfo['video']['frame_rate'])                                                 ? number_format($fileinfo['video']['frame_rate'], 3).'fps'                  : '')).'</td>';\n-\t\t\t\t\tif (isset($_REQUEST['ShowMD5']) && GETID3_DEMO_BROWSE_ALLOW_MD5_LINK) {\n-\t\t\t\t\t\techo '<td align=\"left\"><tt>'.(isset($fileinfo['md5_file'])        ? $fileinfo['md5_file']        : '&nbsp;').'</tt></td>';\n-\t\t\t\t\t\techo '<td align=\"left\"><tt>'.(isset($fileinfo['md5_data'])        ? $fileinfo['md5_data']        : '&nbsp;').'</tt></td>';\n-\t\t\t\t\t\techo '<td align=\"left\"><tt>'.(isset($fileinfo['md5_data_source']) ? $fileinfo['md5_data_source'] : '&nbsp;').'</tt></td>';\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\techo '<td align=\"center\" colspan=\"3\">-</td>';\n-\t\t\t\t\t}\n-\t\t\t\t\techo '<td align=\"left\">&nbsp;'.(!empty($fileinfo['tags']) ? implode(', ', array_keys($fileinfo['tags'])) : '').'</td>';\n-\n-\t\t\t\t\techo '<td align=\"left\">&nbsp;';\n-\t\t\t\t\tif (!empty($fileinfo['warning'])) {\n-\t\t\t\t\t\t$FilesWithWarnings++;\n-\t\t\t\t\t\techo '<a href=\"#\" onClick=\"alert(\\''.htmlentities(str_replace(\"'\", \"\\\\'\", preg_replace('#[\\r\\n\\t]+#', ' ', implode('\\\\n', $fileinfo['warning']))), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\\'); return false;\" title=\"'.htmlentities(implode(\"; \\n\", $fileinfo['warning']), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\">warning</a><br>';\n-\t\t\t\t\t}\n-\t\t\t\t\tif (!empty($fileinfo['error'])) {\n-\t\t\t\t\t\t$FilesWithErrors++;\n-\t\t\t\t\t\techo '<a href=\"#\" onClick=\"alert(\\''.htmlentities(str_replace(\"'\", \"\\\\'\", preg_replace('#[\\r\\n\\t]+#', ' ', implode('\\\\n', $fileinfo['error']))),   ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\\'); return false;\" title=\"'.htmlentities(implode(\"; \\n\", $fileinfo['error']),   ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\">error</a><br>';\n-\t\t\t\t\t}\n-\t\t\t\t\techo '</td>';\n-\n-\t\t\t\t\tif (GETID3_DEMO_BROWSE_ALLOW_EDIT_LINK) {\n-\t\t\t\t\t\techo '<td align=\"left\">&nbsp;';\n-\t\t\t\t\t\t$fileinfo['fileformat'] = (isset($fileinfo['fileformat']) ? $fileinfo['fileformat'] : '');\n-\t\t\t\t\t\tswitch ($fileinfo['fileformat']) {\n-\t\t\t\t\t\t\tcase 'mp3':\n-\t\t\t\t\t\t\tcase 'mp2':\n-\t\t\t\t\t\t\tcase 'mp1':\n-\t\t\t\t\t\t\tcase 'flac':\n-\t\t\t\t\t\t\tcase 'mpc':\n-\t\t\t\t\t\t\tcase 'real':\n-\t\t\t\t\t\t\t\techo '<a href=\"'.htmlentities($writescriptfilename.'?Filename='.urlencode($dirname.$filename), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\" title=\"Edit tags\">edit&nbsp;tags</a>';\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\tcase 'ogg':\n-\t\t\t\t\t\t\t\tif (isset($fileinfo['audio']['dataformat']) && ($fileinfo['audio']['dataformat'] == 'vorbis')) {\n-\t\t\t\t\t\t\t\t\techo '<a href=\"'.htmlentities($writescriptfilename.'?Filename='.urlencode($dirname.$filename), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\" title=\"Edit tags\">edit&nbsp;tags</a>';\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\tdefault:\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\techo '</td>';\n-\t\t\t\t\t}\n-\t\t\t\t\tif (GETID3_DEMO_BROWSE_ALLOW_DELETE_LINK) {\n-\t\t\t\t\t\techo '<td align=\"left\">&nbsp;<a href=\"'.htmlentities($_SERVER['PHP_SELF'].'?listdirectory='.urlencode($listdirectory).'&deletefile='.urlencode($dirname.$filename), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\" onClick=\"return confirm(\\'Are you sure you want to delete '.addslashes(htmlentities($dirname.$filename)).'? \\n(this action cannot be un-done)\\');\" title=\"'.htmlentities('Permanently delete '.\"\\n\".$filename.\"\\n\".' from'.\"\\n\".' '.$dirname, ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\">delete</a></td>';\n-\t\t\t\t\t}\n-\t\t\t\t\techo '</tr>';\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif (isset($DirectoryContents[$dirname]['other']) && is_array($DirectoryContents[$dirname]['other'])) {\n-\t\t\t\tuksort($DirectoryContents[$dirname]['other'], 'MoreNaturalSort');\n-\t\t\t\tforeach ($DirectoryContents[$dirname]['other'] as $filename => $fileinfo) {\n-\t\t\t\t\techo '<tr bgcolor=\"#'.(($rowcounter++ % 2) ? $getID3checkColor_UnknownDark : $getID3checkColor_UnknownLight).'\">';\n-\t\t\t\t\t$escaped_filename = htmlentities($filename, ENT_SUBSTITUTE, $PageEncoding);\n-\t\t\t\t\t$escaped_filename = ($escaped_filename ? $escaped_filename : rawurlencode($filename));\n-\t\t\t\t\techo '<td><a href=\"'.htmlentities($_SERVER['PHP_SELF'].'?filename='.urlencode($dirname.$filename), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\"><i>'.$escaped_filename.'</i></a></td>';\n-\t\t\t\t\techo '<td align=\"right\">&nbsp;'.(isset($fileinfo['filesize']) ? number_format($fileinfo['filesize']) : '-').'</td>';\n-\t\t\t\t\techo '<td align=\"right\">&nbsp;'.NiceDisplayFiletypeFormat($fileinfo).'</td>';\n-\t\t\t\t\techo '<td align=\"right\">&nbsp;'.(isset($fileinfo['playtime_string']) ? $fileinfo['playtime_string'] : '-').'</td>';\n-\t\t\t\t\techo '<td align=\"right\">&nbsp;'.(isset($fileinfo['bitrate']) ? BitrateText($fileinfo['bitrate'] / 1000) : '-').'</td>';\n-\t\t\t\t\techo '<td align=\"left\">&nbsp;</td>'; // Artist\n-\t\t\t\t\techo '<td align=\"left\">&nbsp;</td>'; // Title\n-\t\t\t\t\techo '<td align=\"left\" colspan=\"3\">&nbsp;</td>'; // MD5_data\n-\t\t\t\t\techo '<td align=\"left\">&nbsp;</td>'; // Tags\n-\n-\t\t\t\t\t//echo '<td align=\"left\">&nbsp;</td>'; // Warning/Error\n-\t\t\t\t\techo '<td align=\"left\">&nbsp;';\n-\t\t\t\t\tif (!empty($fileinfo['warning'])) {\n-\t\t\t\t\t\t$FilesWithWarnings++;\n-\t\t\t\t\t\techo '<a href=\"#\" onClick=\"alert(\\''.htmlentities(implode('\\\\n', $fileinfo['warning']), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\\'); return false;\" title=\"'.htmlentities(implode(\"\\n\", $fileinfo['warning']), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\">warning</a><br>';\n-\t\t\t\t\t}\n-\t\t\t\t\tif (!empty($fileinfo['error'])) {\n-\t\t\t\t\t\tif ($fileinfo['error'][0] != 'unable to determine file format') {\n-\t\t\t\t\t\t\t$FilesWithErrors++;\n-\t\t\t\t\t\t\techo '<a href=\"#\" onClick=\"alert(\\''.htmlentities(implode('\\\\n', $fileinfo['error']), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\\'); return false;\" title=\"'.htmlentities(implode(\"\\n\", $fileinfo['error']), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\">error</a><br>';\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\techo '</td>';\n-\n-\t\t\t\t\tif (GETID3_DEMO_BROWSE_ALLOW_EDIT_LINK) {\n-\t\t\t\t\t\techo '<td align=\"left\">&nbsp;</td>'; // Edit\n-\t\t\t\t\t}\n-\t\t\t\t\tif (GETID3_DEMO_BROWSE_ALLOW_DELETE_LINK) {\n-\t\t\t\t\t\techo '<td align=\"left\">&nbsp;<a href=\"'.htmlentities($_SERVER['PHP_SELF'].'?listdirectory='.urlencode($listdirectory).'&deletefile='.urlencode($dirname.$filename), ENT_QUOTES | ENT_SUBSTITUTE, $PageEncoding).'\" onClick=\"return confirm(\\'Are you sure you want to delete '.addslashes($dirname.$filename).'? \\n(this action cannot be un-done)\\');\" title=\"Permanently delete '.addslashes($dirname.$filename).'\">delete</a></td>';\n-\t\t\t\t\t}\n-\t\t\t\t\techo '</tr>';\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\techo '<tr bgcolor=\"#'.$getID3checkColor_Head.'\">';\n-\t\t\techo '<td><b>Average:</b></td>';\n-\t\t\techo '<td align=\"right\">'.number_format($TotalScannedFilesize / max($TotalScannedKnownFiles, 1)).'</td>';\n-\t\t\techo '<td>&nbsp;</td>';\n-\t\t\techo '<td align=\"right\">'.getid3_lib::PlaytimeString($TotalScannedPlaytime / max($TotalScannedPlaytimeFiles, 1)).'</td>';\n-\t\t\techo '<td align=\"right\">'.BitrateText(round(($TotalScannedBitrate / 1000) / max($TotalScannedBitrateFiles, 1))).'</td>';\n-\t\t\techo '<td rowspan=\"2\" colspan=\"'.($columnsintable - 5).'\"><table class=\"table\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\"><tr><th align=\"right\">Identified Files:</th><td align=\"right\">'.number_format($TotalScannedKnownFiles).'</td><td>&nbsp;&nbsp;&nbsp;</td><th align=\"right\">Errors:</th><td align=\"right\">'.number_format($FilesWithErrors).'</td></tr><tr><th align=\"right\">Unknown Files:</th><td align=\"right\">'.number_format($TotalScannedUnknownFiles).'</td><td>&nbsp;&nbsp;&nbsp;</td><th align=\"right\">Warnings:</th><td align=\"right\">'.number_format($FilesWithWarnings).'</td></tr></table>';\n-\t\t\techo '</tr>';\n-\t\t\techo '<tr bgcolor=\"#'.$getID3checkColor_Head.'\">';\n-\t\t\techo '<td><b>Total:</b></td>';\n-\t\t\techo '<td align=\"right\">'.number_format($TotalScannedFilesize).'</td>';\n-\t\t\techo '<td>&nbsp;</td>';\n-\t\t\techo '<td align=\"right\">'.getid3_lib::PlaytimeString($TotalScannedPlaytime).'</td>';\n-\t\t\techo '<td>&nbsp;</td>';\n-\t\t\techo '</tr>';\n-\t\t}\n-\t\techo '</table>';\n-\t} else {\n-\t\t$errormessage = ob_get_contents();\n-\t\tob_end_clean();\n-\t\techo '<b>ERROR: Could not open directory: <u>'.$currentfulldir.'</u></b><br>';\n-\t}\n-}\n-echo PoweredBygetID3().'<br clear=\"all\">';\n-echo '</body></html>';\n-\n-\n-/////////////////////////////////////////////////////////////////\n-\n-\n-function RemoveAccents($string) {\n-\t// Revised version by marksteward\u05e8otmail*com\n-\t// Again revised by James Heinrich (19-June-2006)\n-\treturn strtr(\n-\t\tstrtr(\n-\t\t\t$string,\n-\t\t\t\"\\x8A\\x8E\\x9A\\x9E\\x9F\\xC0\\xC1\\xC2\\xC3\\xC4\\xC5\\xC7\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD1\\xD2\\xD3\\xD4\\xD5\\xD6\\xD8\\xD9\\xDA\\xDB\\xDC\\xDD\\xE0\\xE1\\xE2\\xE3\\xE4\\xE5\\xE7\\xE8\\xE9\\xEA\\xEB\\xEC\\xED\\xEE\\xEF\\xF1\\xF2\\xF3\\xF4\\xF5\\xF6\\xF8\\xF9\\xFA\\xFB\\xFC\\xFD\\xFF\",\n-\t\t\t'SZszYAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy'\n-\t\t),\n-\t\tarray(\n-\t\t\t\"\\xDE\" => 'TH',\n-\t\t\t\"\\xFE\" => 'th',\n-\t\t\t\"\\xD0\" => 'DH',\n-\t\t\t\"\\xF0\" => 'dh',\n-\t\t\t\"\\xDF\" => 'ss',\n-\t\t\t\"\\x8C\" => 'OE',\n-\t\t\t\"\\x9C\" => 'oe',\n-\t\t\t\"\\xC6\" => 'AE',\n-\t\t\t\"\\xE6\" => 'ae',\n-\t\t\t\"\\xB5\" => 'u'\n-\t\t)\n-\t);\n-}\n-\n-\n-function BitrateColor($bitrate, $BitrateMaxScale=768) {\n-\t// $BitrateMaxScale is bitrate of maximum-quality color (bright green)\n-\t// below this is gradient, above is solid green\n-\n-\t$bitrate *= (256 / $BitrateMaxScale); // scale from 1-[768]kbps to 1-256\n-\t$bitrate = round(min(max($bitrate, 1), 256));\n-\t$bitrate--;    // scale from 1-256kbps to 0-255kbps\n-\n-\t$Rcomponent = max(255 - ($bitrate * 2), 0);\n-\t$Gcomponent = max(($bitrate * 2) - 255, 0);\n-\tif ($bitrate > 127) {\n-\t\t$Bcomponent = max((255 - $bitrate) * 2, 0);\n-\t} else {\n-\t\t$Bcomponent = max($bitrate * 2, 0);\n-\t}\n-\treturn str_pad(dechex($Rcomponent), 2, '0', STR_PAD_LEFT).str_pad(dechex($Gcomponent), 2, '0', STR_PAD_LEFT).str_pad(dechex($Bcomponent), 2, '0', STR_PAD_LEFT);\n-}\n-\n-function BitrateText($bitrate, $decimals=0, $vbr=false) {\n-\treturn '<span style=\"color: #'.BitrateColor($bitrate).($vbr ? '; font-weight: bold;' : '').'\">'.number_format($bitrate, $decimals).' kbps</span>';\n-}\n-\n-function string_var_dump($variable) {\n-\tif (version_compare(PHP_VERSION, '4.3.0', '>=')) {\n-\t\treturn print_r($variable, true);\n-\t}\n-\tob_start();\n-\tvar_dump($variable);\n-\t$dumpedvariable = ob_get_contents();\n-\tob_end_clean();\n-\treturn $dumpedvariable;\n-}\n-\n-function table_var_dump($variable, $wrap_in_td=false, $encoding='ISO-8859-1') {\n-\t$returnstring = '';\n-\tswitch (gettype($variable)) {\n-\t\tcase 'array':\n-\t\t\t$returnstring .= ($wrap_in_td ? '<td>' : '');\n-\t\t\t$returnstring .= '<table class=\"dump\" cellspacing=\"0\" cellpadding=\"2\">';\n-\t\t\tforeach ($variable as $key => $value) {\n-\t\t\t\t$returnstring .= '<tr><td valign=\"top\"><b>'.str_replace(\"\\x00\", ' ', $key).'</b></td>'.\"\\n\";\n-\t\t\t\t$returnstring .= '<td valign=\"top\">'.gettype($value);\n-\t\t\t\tif (is_array($value)) {\n-\t\t\t\t\t$returnstring .= '&nbsp;('.count($value).')';\n-\t\t\t\t} elseif (is_string($value)) {\n-\t\t\t\t\t$returnstring .= '&nbsp;('.strlen($value).')';\n-\t\t\t\t}\n-\t\t\t\t//if (($key == 'data') && isset($variable['image_mime']) && isset($variable['dataoffset'])) {\n-\t\t\t\tif (($key == 'data') && isset($variable['image_mime'])) {\n-\t\t\t\t\t$imageinfo = array();\n-\t\t\t\t\tif ($imagechunkcheck = getid3_lib::GetDataImageSize($value, $imageinfo)) {\n-\t\t\t\t\t\t$returnstring .= '</td>'.\"\\n\".'<td><img src=\"data:'.$variable['image_mime'].';base64,'.base64_encode($value).'\" width=\"'.$imagechunkcheck[0].'\" height=\"'.$imagechunkcheck[1].'\"></td></tr>'.\"\\n\";\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t$returnstring .= '</td>'.\"\\n\".'<td><i>invalid image data</i></td></tr>'.\"\\n\";\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\t$returnstring .= '</td>'.\"\\n\".table_var_dump($value, true, $encoding).'</tr>'.\"\\n\";\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t$returnstring .= '</table>'.\"\\n\";\n-\t\t\t$returnstring .= ($wrap_in_td ? '</td>'.\"\\n\" : '');\n-\t\t\tbreak;\n-\n-\t\tcase 'boolean':\n-\t\t\t$returnstring .= ($wrap_in_td ? '<td class=\"dump_boolean\">' : '').($variable ? 'TRUE' : 'FALSE').($wrap_in_td ? '</td>'.\"\\n\" : '');\n-\t\t\tbreak;\n-\n-\t\tcase 'integer':\n-\t\t\t$returnstring .= ($wrap_in_td ? '<td class=\"dump_integer\">' : '').$variable.($wrap_in_td ? '</td>'.\"\\n\" : '');\n-\t\t\tbreak;\n-\n-\t\tcase 'double':\n-\t\tcase 'float':\n-\t\t\t$returnstring .= ($wrap_in_td ? '<td class=\"dump_double\">' : '').$variable.($wrap_in_td ? '</td>'.\"\\n\" : '');\n-\t\t\tbreak;\n-\n-\t\tcase 'object':\n-\t\tcase 'null':\n-\t\t\t$returnstring .= ($wrap_in_td ? '<td>' : '').string_var_dump($variable).($wrap_in_td ? '</td>'.\"\\n\" : '');\n-\t\t\tbreak;\n-\n-\t\tcase 'string':\n-\t\t\t$returnstring = htmlentities($variable, ENT_QUOTES | ENT_SUBSTITUTE, $encoding);\n-\t\t\t$returnstring = ($wrap_in_td ? '<td class=\"dump_string\">' : '').nl2br($returnstring).($wrap_in_td ? '</td>'.\"\\n\" : '');\n-\t\t\tbreak;\n-\n-\t\tdefault:\n-\t\t\t$imageinfo = array();\n-\t\t\tif (($imagechunkcheck = getid3_lib::GetDataImageSize($variable, $imageinfo)) && ($imagechunkcheck[2] >= 1) && ($imagechunkcheck[2] <= 3)) {\n-\t\t\t\t$returnstring .= ($wrap_in_td ? '<td>' : '');\n-\t\t\t\t$returnstring .= '<table class=\"dump\" cellspacing=\"0\" cellpadding=\"2\">';\n-\t\t\t\t$returnstring .= '<tr><td><b>type</b></td><td>'.getid3_lib::ImageTypesLookup($imagechunkcheck[2]).'</td></tr>'.\"\\n\";\n-\t\t\t\t$returnstring .= '<tr><td><b>width</b></td><td>'.number_format($imagechunkcheck[0]).' px</td></tr>'.\"\\n\";\n-\t\t\t\t$returnstring .= '<tr><td><b>height</b></td><td>'.number_format($imagechunkcheck[1]).' px</td></tr>'.\"\\n\";\n-\t\t\t\t$returnstring .= '<tr><td><b>size</b></td><td>'.number_format(strlen($variable)).' bytes</td></tr></table>'.\"\\n\";\n-\t\t\t\t$returnstring .= ($wrap_in_td ? '</td>'.\"\\n\" : '');\n-\t\t\t} else {\n-\t\t\t\t$returnstring .= ($wrap_in_td ? '<td>' : '').nl2br(htmlspecialchars(str_replace(\"\\x00\", ' ', $variable))).($wrap_in_td ? '</td>'.\"\\n\" : '');\n-\t\t\t}\n-\t\t\tbreak;\n-\t}\n-\treturn $returnstring;\n-}\n-\n-\n-function NiceDisplayFiletypeFormat(&$fileinfo) {\n-\n-\tif (empty($fileinfo['fileformat'])) {\n-\t\treturn '-';\n-\t}\n-\n-\t$output  = $fileinfo['fileformat'];\n-\tif (empty($fileinfo['video']['dataformat']) && empty($fileinfo['audio']['dataformat'])) {\n-\t\treturn $output;  // 'gif'\n-\t}\n-\tif (empty($fileinfo['video']['dataformat']) && !empty($fileinfo['audio']['dataformat'])) {\n-\t\tif ($fileinfo['fileformat'] == $fileinfo['audio']['dataformat']) {\n-\t\t\treturn $output; // 'mp3'\n-\t\t}\n-\t\t$output .= '.'.$fileinfo['audio']['dataformat']; // 'ogg.flac'\n-\t\treturn $output;\n-\t}\n-\tif (!empty($fileinfo['video']['dataformat']) && empty($fileinfo['audio']['dataformat'])) {\n-\t\tif ($fileinfo['fileformat'] == $fileinfo['video']['dataformat']) {\n-\t\t\treturn $output; // 'mpeg'\n-\t\t}\n-\t\t$output .= '.'.$fileinfo['video']['dataformat']; // 'riff.avi'\n-\t\treturn $output;\n-\t}\n-\tif ($fileinfo['video']['dataformat'] == $fileinfo['audio']['dataformat']) {\n-\t\tif ($fileinfo['fileformat'] == $fileinfo['video']['dataformat']) {\n-\t\t\treturn $output; // 'real'\n-\t\t}\n-\t\t$output .= '.'.$fileinfo['video']['dataformat']; // any examples?\n-\t\treturn $output;\n-\t}\n-\t$output .= '.'.$fileinfo['video']['dataformat'];\n-\t$output .= '.'.$fileinfo['audio']['dataformat']; // asf.wmv.wma\n-\treturn $output;\n-\n-}\n-\n-function MoreNaturalSort($ar1, $ar2) {\n-\tif ($ar1 === $ar2) {\n-\t\treturn 0;\n-\t}\n-\t$len1     = strlen($ar1);\n-\t$len2     = strlen($ar2);\n-\t$shortest = min($len1, $len2);\n-\tif (substr($ar1, 0, $shortest) === substr($ar2, 0, $shortest)) {\n-\t\t// the shorter argument is the beginning of the longer one, like \"str\" and \"string\"\n-\t\tif ($len1 < $len2) {\n-\t\t\treturn -1;\n-\t\t} elseif ($len1 > $len2) {\n-\t\t\treturn 1;\n-\t\t}\n-\t\treturn 0;\n-\t}\n-\t$ar1 = RemoveAccents(strtolower(trim($ar1)));\n-\t$ar2 = RemoveAccents(strtolower(trim($ar2)));\n-\t$translatearray = array('\\''=>'', '\"'=>'', '_'=>' ', '('=>'', ')'=>'', '-'=>' ', '  '=>' ', '.'=>'', ','=>'');\n-\tforeach ($translatearray as $key => $val) {\n-\t\t$ar1 = str_replace($key, $val, $ar1);\n-\t\t$ar2 = str_replace($key, $val, $ar2);\n-\t}\n-\n-\tif ($ar1 < $ar2) {\n-\t\treturn -1;\n-\t} elseif ($ar1 > $ar2) {\n-\t\treturn 1;\n-\t}\n-\treturn 0;\n-}\n-\n-function PoweredBygetID3($string='') {\n-\tglobal $getID3;\n-\tif (!$string) {\n-\t\t$string = '<div style=\"border: 1px #CCCCCC solid; padding: 5px; margin: 5px 0px; float: left; background-color: #EEEEEE; font-size: 8pt; font-face: sans-serif;\">Powered by <a href=\"http://www.getid3.org/\"><b>getID3() v<!--GETID3VER--></b><br>http://www.getid3.org/</a><br>Running on PHP v'.phpversion().' ('.(ceil(log(PHP_INT_MAX, 2)) + 1).'-bit)</div>';\n-\t}\n-\treturn str_replace('<!--GETID3VER-->', $getID3->version(), $string);\n-}"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.cache.dbm.php",
          "status": "removed",
          "additions": 0,
          "deletions": 31,
          "patch": "@@ -1,31 +0,0 @@\n-<?php\n-/////////////////////////////////////////////////////////////////\n-/// getID3() by James Heinrich <info@getid3.org>               //\n-//  available at http://getid3.sourceforge.net                 //\n-//            or http://www.getid3.org                         //\n-//          also https://github.com/JamesHeinrich/getID3       //\n-/////////////////////////////////////////////////////////////////\n-//                                                             //\n-// /demo/demo.cache.dbm.php - part of getID3()                 //\n-// Sample script demonstrating the use of the DBM caching      //\n-// extension for getID3()                                      //\n-// See readme.txt for more details                             //\n-//                                                            ///\n-/////////////////////////////////////////////////////////////////\n-\n-die('Due to a security issue, this demo has been disabled. It can be enabled by removing line '.__LINE__.' in '.$_SERVER['PHP_SELF']);\n-\n-\n-require_once('../getid3/getid3.php');\n-getid3_lib::IncludeDependency(GETID3_INCLUDEPATH.'extension.cache.dbm.php', __FILE__, true);\n-\n-$getID3 = new getID3_cached_dbm('db3', '/zimweb/test/test.dbm', '/zimweb/test/test.lock');\n-\n-$r = $getID3->analyze('/path/to/files/filename.mp3');\n-\n-echo '<pre>';\n-var_dump($r);\n-echo '</pre>';\n-\n-// uncomment to clear cache\n-// $getID3->clear_cache();"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.cache.mysql.php",
          "status": "removed",
          "additions": 0,
          "deletions": 32,
          "patch": "@@ -1,32 +0,0 @@\n-<?php\n-/////////////////////////////////////////////////////////////////\n-/// getID3() by James Heinrich <info@getid3.org>               //\n-//  available at http://getid3.sourceforge.net                 //\n-//            or http://www.getid3.org                         //\n-//          also https://github.com/JamesHeinrich/getID3       //\n-/////////////////////////////////////////////////////////////////\n-//                                                             //\n-// /demo/demo.cache.mysql.php - part of getID3()               //\n-// Sample script demonstrating the use of the DBM caching      //\n-// extension for getID3()                                      //\n-// See readme.txt for more details                             //\n-//                                                            ///\n-/////////////////////////////////////////////////////////////////\n-\n-die('Due to a security issue, this demo has been disabled. It can be enabled by removing line '.__LINE__.' in '.$_SERVER['PHP_SELF']);\n-\n-\n-require_once('../getid3/getid3.php');\n-require_once('../getid3/getid3.lib.php');\n-getid3_lib::IncludeDependency(GETID3_INCLUDEPATH.'extension.cache.mysql.php', __FILE__, true);\n-\n-$getID3 = new getID3_cached_mysql('localhost', 'database', 'username', 'password');\n-\n-$r = $getID3->analyze('/path/to/files/filename.mp3');\n-\n-echo '<pre>';\n-var_dump($r);\n-echo '</pre>';\n-\n-// uncomment to clear cache\n-//$getID3->clear_cache();"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.joinmp3.php",
          "status": "removed",
          "additions": 0,
          "deletions": 135,
          "patch": "@@ -1,135 +0,0 @@\n-<?php\n-/////////////////////////////////////////////////////////////////\n-/// getID3() by James Heinrich <info@getid3.org>               //\n-//  available at http://getid3.sourceforge.net                 //\n-//            or http://www.getid3.org                         //\n-//          also https://github.com/JamesHeinrich/getID3       //\n-/////////////////////////////////////////////////////////////////\n-//                                                             //\n-// /demo/demo.joinmp3.php - part of getID3()                   //\n-// Sample script for splicing two or more MP3s together into   //\n-// one file. Does not attempt to fix VBR header frames.        //\n-// Can also be used to extract portion from single file.       //\n-// See readme.txt for more details                             //\n-//                                                            ///\n-/////////////////////////////////////////////////////////////////\n-\n-\n-// sample usage:\n-//   $FilenameOut   = 'combined.mp3';\n-//   $FilenamesIn[] = 'first.mp3';                    // filename with no start/length parameters\n-//   $FilenamesIn[] = array('second.mp3',   0,   0);  // filename with zero for start/length is the same as not specified (start = beginning, length = full duration)\n-//   $FilenamesIn[] = array('third.mp3',    0,  10);  // extract first 10 seconds of audio\n-//   $FilenamesIn[] = array('fourth.mp3', -10,   0);  // extract last 10 seconds of audio\n-//   $FilenamesIn[] = array('fifth.mp3',   10,   0);  // extract everything except first 10 seconds of audio\n-//   $FilenamesIn[] = array('sixth.mp3',    0, -10);  // extract everything except last 10 seconds of audio\n-//   if (CombineMultipleMP3sTo($FilenameOut, $FilenamesIn)) {\n-//       echo 'Successfully copied '.implode(' + ', $FilenamesIn).' to '.$FilenameOut;\n-//   } else {\n-//       echo 'Failed to copy '.implode(' + ', $FilenamesIn).' to '.$FilenameOut;\n-//   }\n-//\n-// Could also be called like this to extract portion from single file:\n-//   CombineMultipleMP3sTo('sample.mp3', array(array('input.mp3', 0, 30))); // extract first 30 seconds of audio\n-\n-\n-function CombineMultipleMP3sTo($FilenameOut, $FilenamesIn) {\n-\n-\tforeach ($FilenamesIn as $nextinputfilename) {\n-\t\tif (is_array($nextinputfilename)) {\n-\t\t\t$nextinputfilename = $nextinputfilename[0];\n-\t\t}\n-\t\tif (!is_readable($nextinputfilename)) {\n-\t\t\techo 'Cannot read \"'.$nextinputfilename.'\"<BR>';\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\tif ((file_exists($FilenameOut) && !is_writeable($FilenameOut)) || (!file_exists($FilenameOut) && !is_writeable(dirname($FilenameOut)))) {\n-\t\techo 'Cannot write \"'.$FilenameOut.'\"<BR>';\n-\t\treturn false;\n-\t}\n-\n-\trequire_once(dirname(__FILE__).'/../getid3/getid3.php');\n-\tob_start();\n-\tif ($fp_output = fopen($FilenameOut, 'wb')) {\n-\n-\t\tob_end_clean();\n-\t\t// Initialize getID3 engine\n-\t\t$getID3 = new getID3;\n-\t\tforeach ($FilenamesIn as $nextinputfilename) {\n-\t\t\t$startoffset = 0;\n-\t\t\t$length_seconds      = 0;\n-\t\t\tif (is_array($nextinputfilename)) {\n-\t\t\t\t@list($nextinputfilename, $startoffset, $length_seconds)  = $nextinputfilename;\n-\t\t\t}\n-\t\t\t$CurrentFileInfo = $getID3->analyze($nextinputfilename);\n-\t\t\tif ($CurrentFileInfo['fileformat'] == 'mp3') {\n-\n-\t\t\t\tob_start();\n-\t\t\t\tif ($fp_source = fopen($nextinputfilename, 'rb')) {\n-\n-\t\t\t\t\tob_end_clean();\n-\t\t\t\t\t$CurrentOutputPosition = ftell($fp_output);\n-\n-\t\t\t\t\t// copy audio data from first file\n-\t\t\t\t\t$start_offset_bytes = $CurrentFileInfo['avdataoffset'];\n-\t\t\t\t\tif ($startoffset > 0) { // start X seconds from start of audio\n-\t\t\t\t\t\t$start_offset_bytes = $CurrentFileInfo['avdataoffset'] + round($CurrentFileInfo['bitrate'] / 8 * $startoffset);\n-\t\t\t\t\t} elseif ($startoffset < 0) { // start X seconds from end of audio\n-\t\t\t\t\t\t$start_offset_bytes = $CurrentFileInfo['avdataend'] + round($CurrentFileInfo['bitrate'] / 8 * $startoffset);\n-\t\t\t\t\t}\n-\t\t\t\t\t$start_offset_bytes = max($CurrentFileInfo['avdataoffset'], min($CurrentFileInfo['avdataend'], $start_offset_bytes));\n-\n-\t\t\t\t\t$end_offset_bytes = $CurrentFileInfo['avdataend'];\n-\t\t\t\t\tif ($length_seconds > 0) { // seconds from start of audio\n-\t\t\t\t\t\t$end_offset_bytes = $start_offset_bytes + round($CurrentFileInfo['bitrate'] / 8 * $length_seconds);\n-\t\t\t\t\t} elseif ($length_seconds < 0) { // seconds from start of audio\n-\t\t\t\t\t\t$end_offset_bytes = $CurrentFileInfo['avdataend'] + round($CurrentFileInfo['bitrate'] / 8 * $startoffset);\n-\t\t\t\t\t}\n-\t\t\t\t\t$end_offset_bytes = max($CurrentFileInfo['avdataoffset'], min($CurrentFileInfo['avdataend'], $end_offset_bytes));\n-\n-\t\t\t\t\tif ($end_offset_bytes <= $start_offset_bytes) {\n-\t\t\t\t\t\techo 'failed to copy '.$nextinputfilename.' from '.$startoffset.'-seconds start for '.$length_seconds.'-seconds length (not enough data)';\n-\t\t\t\t\t\tfclose($fp_source);\n-\t\t\t\t\t\tfclose($fp_output);\n-\t\t\t\t\t\treturn false;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tfseek($fp_source, $start_offset_bytes, SEEK_SET);\n-\t\t\t\t\twhile (!feof($fp_source) && (ftell($fp_source) < $end_offset_bytes)) {\n-\t\t\t\t\t\tfwrite($fp_output, fread($fp_source, min(32768, $end_offset_bytes - ftell($fp_source))));\n-\t\t\t\t\t}\n-\t\t\t\t\tfclose($fp_source);\n-\n-\t\t\t\t} else {\n-\n-\t\t\t\t\t$errormessage = ob_get_contents();\n-\t\t\t\t\tob_end_clean();\n-\t\t\t\t\techo 'failed to open '.$nextinputfilename.' for reading';\n-\t\t\t\t\tfclose($fp_output);\n-\t\t\t\t\treturn false;\n-\n-\t\t\t\t}\n-\n-\t\t\t} else {\n-\n-\t\t\t\techo $nextinputfilename.' is not MP3 format';\n-\t\t\t\tfclose($fp_output);\n-\t\t\t\treturn false;\n-\n-\t\t\t}\n-\n-\t\t}\n-\n-\t} else {\n-\n-\t\t$errormessage = ob_get_contents();\n-\t\tob_end_clean();\n-\t\techo 'failed to open '.$FilenameOut.' for writing';\n-\t\treturn false;\n-\n-\t}\n-\n-\tfclose($fp_output);\n-\treturn true;\n-}"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.mimeonly.php",
          "status": "removed",
          "additions": 0,
          "deletions": 74,
          "patch": "@@ -1,74 +0,0 @@\n-<?php\n-/////////////////////////////////////////////////////////////////\n-/// getID3() by James Heinrich <info@getid3.org>               //\n-//  available at http://getid3.sourceforge.net                 //\n-//            or http://www.getid3.org                         //\n-//          also https://github.com/JamesHeinrich/getID3       //\n-/////////////////////////////////////////////////////////////////\n-//                                                             //\n-// /demo/demo.mimeonly.php - part of getID3()                  //\n-// Sample script for scanning a single file and returning only //\n-// the MIME information                                        //\n-// See readme.txt for more details                             //\n-//                                                            ///\n-/////////////////////////////////////////////////////////////////\n-\n-die('Due to a security issue, this demo has been disabled. It can be enabled by removing line '.__LINE__.' in '.$_SERVER['PHP_SELF']);\n-\n-\n-echo '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">';\n-echo '<html><head><title>getID3 demos - MIME type only</title><style type=\"text/css\">BODY, TD, TH { font-family: sans-serif; font-size: 10pt; }</style></head><body>';\n-\n-if (!empty($_REQUEST['filename'])) {\n-\n-\techo 'The file \"'.htmlentities($_REQUEST['filename']).'\" has a MIME type of \"'.htmlentities(GetMIMEtype($_REQUEST['filename'])).'\"';\n-\n-} else {\n-\n-\techo 'Usage: <span style=\"font-family: monospace;\">'.htmlentities($_SERVER['PHP_SELF']).'?filename=<i>filename.ext</i></span>';\n-\n-}\n-\n-\n-function GetMIMEtype($filename) {\n-\t$filename = realpath($filename);\n-\tif (!file_exists($filename)) {\n-\t\techo 'File does not exist: \"'.htmlentities($filename).'\"<br>';\n-\t\treturn '';\n-\t} elseif (!is_readable($filename)) {\n-\t\techo 'File is not readable: \"'.htmlentities($filename).'\"<br>';\n-\t\treturn '';\n-\t}\n-\n-\t// include getID3() library (can be in a different directory if full path is specified)\n-\trequire_once('../getid3/getid3.php');\n-\t// Initialize getID3 engine\n-\t$getID3 = new getID3;\n-\n-\t$DeterminedMIMEtype = '';\n-\tif ($fp = fopen($filename, 'rb')) {\n-\t\t$getID3->openfile($filename);\n-\t\tif (empty($getID3->info['error'])) {\n-\n-\t\t\t// ID3v2 is the only tag format that might be prepended in front of files, and it's non-trivial to skip, easier just to parse it and know where to skip to\n-\t\t\tgetid3_lib::IncludeDependency(GETID3_INCLUDEPATH.'module.tag.id3v2.php', __FILE__, true);\n-\t\t\t$getid3_id3v2 = new getid3_id3v2($getID3);\n-\t\t\t$getid3_id3v2->Analyze();\n-\n-\t\t\tfseek($fp, $getID3->info['avdataoffset'], SEEK_SET);\n-\t\t\t$formattest = fread($fp, 16);  // 16 bytes is sufficient for any format except ISO CD-image\n-\t\t\tfclose($fp);\n-\n-\t\t\t$DeterminedFormatInfo = $getID3->GetFileFormat($formattest);\n-\t\t\t$DeterminedMIMEtype = $DeterminedFormatInfo['mime_type'];\n-\n-\t\t} else {\n-\t\t\techo 'Failed to getID3->openfile \"'.htmlentities($filename).'\"<br>';\n-\t\t}\n-\t} else {\n-\t\techo 'Failed to fopen \"'.htmlentities($filename).'\"<br>';\n-\t}\n-\treturn $DeterminedMIMEtype;\n-}\n-\n-echo '</body></html>';\n\\ No newline at end of file"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.mp3header.php",
          "status": "removed",
          "additions": 0,
          "deletions": 2889,
          "patch": null
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.mysql.php",
          "status": "removed",
          "additions": 0,
          "deletions": 2196,
          "patch": null
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.simple.php",
          "status": "removed",
          "additions": 0,
          "deletions": 55,
          "patch": "@@ -1,55 +0,0 @@\n-<?php\n-/////////////////////////////////////////////////////////////////\n-/// getID3() by James Heinrich <info@getid3.org>               //\n-//  available at http://getid3.sourceforge.net                 //\n-//            or http://www.getid3.org                         //\n-//          also https://github.com/JamesHeinrich/getID3       //\n-/////////////////////////////////////////////////////////////////\n-//                                                             //\n-// /demo/demo.simple.php - part of getID3()                    //\n-// Sample script for scanning a single directory and           //\n-// displaying a few pieces of information for each file        //\n-// See readme.txt for more details                             //\n-//                                                            ///\n-/////////////////////////////////////////////////////////////////\n-\n-die('Due to a security issue, this demo has been disabled. It can be enabled by removing line '.__LINE__.' in '.$_SERVER['PHP_SELF']);\n-\n-echo '<html><head>';\n-echo '<title>getID3() - /demo/demo.simple.php (sample script)</title>';\n-echo '<style type=\"text/css\">BODY,TD,TH { font-family: sans-serif; font-size: 9pt; }</style>';\n-echo '</head><body>';\n-\n-\n-// include getID3() library (can be in a different directory if full path is specified)\n-require_once('../getid3/getid3.php');\n-\n-// Initialize getID3 engine\n-$getID3 = new getID3;\n-\n-$DirectoryToScan = '/change/to/directory/you/want/to/scan'; // change to whatever directory you want to scan\n-$dir = opendir($DirectoryToScan);\n-echo '<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">';\n-echo '<tr><th>Filename</th><th>Artist</th><th>Title</th><th>Bitrate</th><th>Playtime</th></tr>';\n-while (($file = readdir($dir)) !== false) {\n-\t$FullFileName = realpath($DirectoryToScan.'/'.$file);\n-\tif ((substr($file, 0, 1) != '.') && is_file($FullFileName)) {\n-\t\tset_time_limit(30);\n-\n-\t\t$ThisFileInfo = $getID3->analyze($FullFileName);\n-\n-\t\tgetid3_lib::CopyTagsToComments($ThisFileInfo);\n-\n-\t\t// output desired information in whatever format you want\n-\t\techo '<tr>';\n-\t\techo '<td>'.htmlentities($ThisFileInfo['filenamepath']).'</td>';\n-\t\techo '<td>'              .htmlentities(!empty($ThisFileInfo['comments_html']['artist']) ? implode('<br>', $ThisFileInfo['comments_html']['artist'])         : chr(160)).'</td>';\n-\t\techo '<td>'              .htmlentities(!empty($ThisFileInfo['comments_html']['title'])  ? implode('<br>', $ThisFileInfo['comments_html']['title'])          : chr(160)).'</td>';\n-\t\techo '<td align=\"right\">'.htmlentities(!empty($ThisFileInfo['audio']['bitrate'])        ?           round($ThisFileInfo['audio']['bitrate'] / 1000).' kbps' : chr(160)).'</td>';\n-\t\techo '<td align=\"right\">'.htmlentities(!empty($ThisFileInfo['playtime_string'])         ?                 $ThisFileInfo['playtime_string']                  : chr(160)).'</td>';\n-\t\techo '</tr>';\n-\t}\n-}\n-echo '</table>';\n-\n-echo '</body></html>';\n\\ No newline at end of file"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.simple.write.php",
          "status": "removed",
          "additions": 0,
          "deletions": 61,
          "patch": "@@ -1,61 +0,0 @@\n-<?php\n-/////////////////////////////////////////////////////////////////\n-/// getID3() by James Heinrich <info@getid3.org>               //\n-//  available at http://getid3.sourceforge.net                 //\n-//            or http://www.getid3.org                         //\n-//          also https://github.com/JamesHeinrich/getID3       //\n-/////////////////////////////////////////////////////////////////\n-//                                                             //\n-// /demo/demo.simple.write.php - part of getID3()              //\n-// Sample script showing basic syntax for writing tags         //\n-// See readme.txt for more details                             //\n-//                                                            ///\n-/////////////////////////////////////////////////////////////////\n-\n-die('Due to a security issue, this demo has been disabled. It can be enabled by removing line '.__LINE__.' in '.$_SERVER['PHP_SELF']);\n-\n-$TextEncoding = 'UTF-8';\n-\n-require_once('../getid3/getid3.php');\n-// Initialize getID3 engine\n-$getID3 = new getID3;\n-$getID3->setOption(array('encoding'=>$TextEncoding));\n-\n-require_once('../getid3/write.php');\n-// Initialize getID3 tag-writing module\n-$tagwriter = new getid3_writetags;\n-//$tagwriter->filename = '/path/to/file.mp3';\n-$tagwriter->filename = 'c:/file.mp3';\n-\n-//$tagwriter->tagformats = array('id3v1', 'id3v2.3');\n-$tagwriter->tagformats = array('id3v2.3');\n-\n-// set various options (optional)\n-$tagwriter->overwrite_tags    = true;  // if true will erase existing tag data and write only passed data; if false will merge passed data with existing tag data (experimental)\n-$tagwriter->remove_other_tags = false; // if true removes other tag formats (e.g. ID3v1, ID3v2, APE, Lyrics3, etc) that may be present in the file and only write the specified tag format(s). If false leaves any unspecified tag formats as-is.\n-$tagwriter->tag_encoding      = $TextEncoding;\n-$tagwriter->remove_other_tags = true;\n-\n-// populate data array\n-$TagData = array(\n-\t'title'                  => array('My Song'),\n-\t'artist'                 => array('The Artist'),\n-\t'album'                  => array('Greatest Hits'),\n-\t'year'                   => array('2004'),\n-\t'genre'                  => array('Rock'),\n-\t'comment'                => array('excellent!'),\n-\t'track'                  => array('04/16'),\n-\t'popularimeter'          => array('email'=>'user@example.net', 'rating'=>128, 'data'=>0),\n-\t'unique_file_identifier' => array('ownerid'=>'user@example.net', 'data'=>md5(time())),\n-);\n-$tagwriter->tag_data = $TagData;\n-\n-// write tags\n-if ($tagwriter->WriteTags()) {\n-\techo 'Successfully wrote tags<br>';\n-\tif (!empty($tagwriter->warnings)) {\n-\t\techo 'There were some warnings:<br>'.implode('<br><br>', $tagwriter->warnings);\n-\t}\n-} else {\n-\techo 'Failed to write tags!<br>'.implode('<br><br>', $tagwriter->errors);\n-}"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.write.php",
          "status": "removed",
          "additions": 0,
          "deletions": 271,
          "patch": "@@ -1,271 +0,0 @@\n-<?php\n-/////////////////////////////////////////////////////////////////\n-/// getID3() by James Heinrich <info@getid3.org>               //\n-//  available at http://getid3.sourceforge.net                 //\n-//            or http://www.getid3.org                         //\n-//          also https://github.com/JamesHeinrich/getID3       //\n-/////////////////////////////////////////////////////////////////\n-//                                                             //\n-// /demo/demo.write.php - part of getID3()                     //\n-// sample script for demonstrating writing ID3v1 and ID3v2     //\n-// tags for MP3, or Ogg comment tags for Ogg Vorbis            //\n-// See readme.txt for more details                             //\n-//                                                            ///\n-/////////////////////////////////////////////////////////////////\n-\n-\n-die('Due to a security issue, this demo has been disabled. It can be enabled by removing line '.__LINE__.' in '.$_SERVER['PHP_SELF']);\n-\n-$TaggingFormat = 'UTF-8';\n-\n-header('Content-Type: text/html; charset='.$TaggingFormat);\n-echo '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">';\n-echo '<html><head><title>getID3() - Sample tag writer</title></head><style type=\"text/css\">BODY,TD,TH { font-family: sans-serif; font-size: 9pt;\" }</style><body>';\n-\n-require_once('../getid3/getid3.php');\n-// Initialize getID3 engine\n-$getID3 = new getID3;\n-$getID3->setOption(array('encoding'=>$TaggingFormat));\n-\n-getid3_lib::IncludeDependency(GETID3_INCLUDEPATH.'write.php', __FILE__, true);\n-\n-$browsescriptfilename = 'demo.browse.php';\n-\n-$Filename = (isset($_REQUEST['Filename']) ? $_REQUEST['Filename'] : '');\n-\n-\n-\n-if (isset($_POST['WriteTags'])) {\n-\n-\t$TagFormatsToWrite = (isset($_POST['TagFormatsToWrite']) ? $_POST['TagFormatsToWrite'] : array());\n-\tif (!empty($TagFormatsToWrite)) {\n-\t\techo 'starting to write tag(s)<BR>';\n-\n-\t\t$tagwriter = new getid3_writetags;\n-\t\t$tagwriter->filename       = $Filename;\n-\t\t$tagwriter->tagformats     = $TagFormatsToWrite;\n-\t\t$tagwriter->overwrite_tags = false;\n-\t\t$tagwriter->tag_encoding   = $TaggingFormat;\n-\t\tif (!empty($_POST['remove_other_tags'])) {\n-\t\t\t$tagwriter->remove_other_tags = true;\n-\t\t}\n-\n-\t\t$commonkeysarray = array('Title', 'Artist', 'Album', 'Year', 'Comment');\n-\t\tforeach ($commonkeysarray as $key) {\n-\t\t\tif (!empty($_POST[$key])) {\n-\t\t\t\t$TagData[strtolower($key)][] = $_POST[$key];\n-\t\t\t}\n-\t\t}\n-\t\tif (!empty($_POST['Genre'])) {\n-\t\t\t$TagData['genre'][] = $_POST['Genre'];\n-\t\t}\n-\t\tif (!empty($_POST['GenreOther'])) {\n-\t\t\t$TagData['genre'][] = $_POST['GenreOther'];\n-\t\t}\n-\t\tif (!empty($_POST['Track'])) {\n-\t\t\t$TagData['track'][] = $_POST['Track'].(!empty($_POST['TracksTotal']) ? '/'.$_POST['TracksTotal'] : '');\n-\t\t}\n-\n-\t\tif (!empty($_FILES['userfile']['tmp_name'])) {\n-\t\t\tif (in_array('id3v2.4', $tagwriter->tagformats) || in_array('id3v2.3', $tagwriter->tagformats) || in_array('id3v2.2', $tagwriter->tagformats)) {\n-\t\t\t\tif (is_uploaded_file($_FILES['userfile']['tmp_name'])) {\n-\t\t\t\t\tob_start();\n-\t\t\t\t\tif ($fd = fopen($_FILES['userfile']['tmp_name'], 'rb')) {\n-\t\t\t\t\t\tob_end_clean();\n-\t\t\t\t\t\t$APICdata = fread($fd, filesize($_FILES['userfile']['tmp_name']));\n-\t\t\t\t\t\tfclose ($fd);\n-\n-\t\t\t\t\t\tlist($APIC_width, $APIC_height, $APIC_imageTypeID) = GetImageSize($_FILES['userfile']['tmp_name']);\n-\t\t\t\t\t\t$imagetypes = array(1=>'gif', 2=>'jpeg', 3=>'png');\n-\t\t\t\t\t\tif (isset($imagetypes[$APIC_imageTypeID])) {\n-\n-\t\t\t\t\t\t\t$TagData['attached_picture'][0]['data']          = $APICdata;\n-\t\t\t\t\t\t\t$TagData['attached_picture'][0]['picturetypeid'] = $_POST['APICpictureType'];\n-\t\t\t\t\t\t\t$TagData['attached_picture'][0]['description']   = $_FILES['userfile']['name'];\n-\t\t\t\t\t\t\t$TagData['attached_picture'][0]['mime']          = 'image/'.$imagetypes[$APIC_imageTypeID];\n-\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\techo '<b>invalid image format (only GIF, JPEG, PNG)</b><br>';\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t$errormessage = ob_get_contents();\n-\t\t\t\t\t\tob_end_clean();\n-\t\t\t\t\t\techo '<b>cannot open '.$_FILES['userfile']['tmp_name'].'</b><br>';\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\techo '<b>!is_uploaded_file('.$_FILES['userfile']['tmp_name'].')</b><br>';\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\techo '<b>WARNING:</b> Can only embed images for ID3v2<br>';\n-\t\t\t}\n-\t\t}\n-\n-\t\t$tagwriter->tag_data = $TagData;\n-\t\tif ($tagwriter->WriteTags()) {\n-\t\t\techo 'Successfully wrote tags<BR>';\n-\t\t\tif (!empty($tagwriter->warnings)) {\n-\t\t\t\techo 'There were some warnings:<BLOCKQUOTE STYLE=\"background-color:#FFCC33; padding: 10px;\">'.implode('<br><br>', $tagwriter->warnings).'</BLOCKQUOTE>';\n-\t\t\t}\n-\t\t} else {\n-\t\t\techo 'Failed to write tags!<BLOCKQUOTE STYLE=\"background-color:#FF9999; padding: 10px;\">'.implode('<br><br>', $tagwriter->errors).'</BLOCKQUOTE>';\n-\t\t}\n-\n-\t} else {\n-\n-\t\techo 'WARNING: no tag formats selected for writing - nothing written';\n-\n-\t}\n-\techo '<HR>';\n-\n-}\n-\n-\n-echo '<div style=\"font-size: 1.2em; font-weight: bold;\">Sample tag editor/writer</div>';\n-echo '<a href=\"'.htmlentities($browsescriptfilename.'?listdirectory='.rawurlencode(realpath(dirname($Filename))), ENT_QUOTES).'\">Browse current directory</a><br>';\n-if (!empty($Filename)) {\n-\techo '<a href=\"'.htmlentities($_SERVER['PHP_SELF'], ENT_QUOTES).'\">Start Over</a><br><br>';\n-\techo '<form action=\"'.htmlentities($_SERVER['PHP_SELF'], ENT_QUOTES).'\" method=\"post\" enctype=\"multipart/form-data\">';\n-\techo '<table border=\"3\" cellspacing=\"0\" cellpadding=\"4\">';\n-\techo '<tr><th align=\"right\">Filename:</th><td><input type=\"hidden\" name=\"Filename\" value=\"'.htmlentities($Filename, ENT_QUOTES).'\"><a href=\"'.htmlentities($browsescriptfilename.'?filename='.rawurlencode($Filename), ENT_QUOTES).'\" target=\"_blank\">'.$Filename.'</a></td></tr>';\n-\tif (file_exists($Filename)) {\n-\n-\t\t// Initialize getID3 engine\n-\t\t$getID3 = new getID3;\n-\t\t$OldThisFileInfo = $getID3->analyze($Filename);\n-\t\tgetid3_lib::CopyTagsToComments($OldThisFileInfo);\n-\n-\t\tswitch ($OldThisFileInfo['fileformat']) {\n-\t\t\tcase 'mp3':\n-\t\t\tcase 'mp2':\n-\t\t\tcase 'mp1':\n-\t\t\t\t$ValidTagTypes = array('id3v1', 'id3v2.3', 'ape');\n-\t\t\t\tbreak;\n-\n-\t\t\tcase 'mpc':\n-\t\t\t\t$ValidTagTypes = array('ape');\n-\t\t\t\tbreak;\n-\n-\t\t\tcase 'ogg':\n-\t\t\t\tif (!empty($OldThisFileInfo['audio']['dataformat']) && ($OldThisFileInfo['audio']['dataformat'] == 'flac')) {\n-\t\t\t\t\t//$ValidTagTypes = array('metaflac');\n-\t\t\t\t\t// metaflac doesn't (yet) work with OggFLAC files\n-\t\t\t\t\t$ValidTagTypes = array();\n-\t\t\t\t} else {\n-\t\t\t\t\t$ValidTagTypes = array('vorbiscomment');\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\n-\t\t\tcase 'flac':\n-\t\t\t\t$ValidTagTypes = array('metaflac');\n-\t\t\t\tbreak;\n-\n-\t\t\tcase 'real':\n-\t\t\t\t$ValidTagTypes = array('real');\n-\t\t\t\tbreak;\n-\n-\t\t\tdefault:\n-\t\t\t\t$ValidTagTypes = array();\n-\t\t\t\tbreak;\n-\t\t}\n-\t\techo '<tr><td align=\"right\"><b>Title</b></td> <td><input type=\"text\" size=\"40\" name=\"Title\"  value=\"'.htmlentities((!empty($OldThisFileInfo['comments']['title'])  ? implode(', ', $OldThisFileInfo['comments']['title'] ) : ''), ENT_QUOTES).'\"></td></tr>';\n-\t\techo '<tr><td align=\"right\"><b>Artist</b></td><td><input type=\"text\" size=\"40\" name=\"Artist\" value=\"'.htmlentities((!empty($OldThisFileInfo['comments']['artist']) ? implode(', ', $OldThisFileInfo['comments']['artist']) : ''), ENT_QUOTES).'\"></td></tr>';\n-\t\techo '<tr><td align=\"right\"><b>Album</b></td> <td><input type=\"text\" size=\"40\" name=\"Album\"  value=\"'.htmlentities((!empty($OldThisFileInfo['comments']['album'])  ? implode(', ', $OldThisFileInfo['comments']['album'] ) : ''), ENT_QUOTES).'\"></td></tr>';\n-\t\techo '<tr><td align=\"right\"><b>Year</b></td>  <td><input type=\"text\" size=\"4\"  name=\"Year\"   value=\"'.htmlentities((!empty($OldThisFileInfo['comments']['year'])   ? implode(', ', $OldThisFileInfo['comments']['year']  ) : ''), ENT_QUOTES).'\"></td></tr>';\n-\n-\t\t$TracksTotal = '';\n-\t\t$TrackNumber = '';\n-\t\tif (!empty($OldThisFileInfo['comments']['track_number']) && is_array($OldThisFileInfo['comments']['track_number'])) {\n-\t\t\t$RawTrackNumberArray = $OldThisFileInfo['comments']['track_number'];\n-\t\t} elseif (!empty($OldThisFileInfo['comments']['track']) && is_array($OldThisFileInfo['comments']['track'])) {\n-\t\t\t$RawTrackNumberArray = $OldThisFileInfo['comments']['track'];\n-\t\t} else {\n-\t\t\t$RawTrackNumberArray = array();\n-\t\t}\n-\t\tforeach ($RawTrackNumberArray as $key => $value) {\n-\t\t\tif (strlen($value) > strlen($TrackNumber)) {\n-\t\t\t\t// ID3v1 may store track as \"3\" but ID3v2/APE would store as \"03/16\"\n-\t\t\t\t$TrackNumber = $value;\n-\t\t\t}\n-\t\t}\n-\t\tif (strstr($TrackNumber, '/')) {\n-\t\t\tlist($TrackNumber, $TracksTotal) = explode('/', $TrackNumber);\n-\t\t}\n-\t\techo '<tr><td align=\"right\"><b>Track</b></td><td><input type=\"text\" size=\"2\" name=\"Track\" value=\"'.htmlentities($TrackNumber, ENT_QUOTES).'\"> of <input type=\"text\" size=\"2\" name=\"TracksTotal\" value=\"'.htmlentities($TracksTotal, ENT_QUOTES).'\"></TD></TR>';\n-\n-\t\t$ArrayOfGenresTemp = getid3_id3v1::ArrayOfGenres();   // get the array of genres\n-\t\tforeach ($ArrayOfGenresTemp as $key => $value) {      // change keys to match displayed value\n-\t\t\t$ArrayOfGenres[$value] = $value;\n-\t\t}\n-\t\tunset($ArrayOfGenresTemp);                            // remove temporary array\n-\t\tunset($ArrayOfGenres['Cover']);                       // take off these special cases\n-\t\tunset($ArrayOfGenres['Remix']);\n-\t\tunset($ArrayOfGenres['Unknown']);\n-\t\t$ArrayOfGenres['']      = '- Unknown -';              // Add special cases back in with renamed key/value\n-\t\t$ArrayOfGenres['Cover'] = '-Cover-';\n-\t\t$ArrayOfGenres['Remix'] = '-Remix-';\n-\t\tasort($ArrayOfGenres);                                // sort into alphabetical order\n-\t\techo '<tr><th align=\"right\">Genre</th><td><select name=\"Genre\">';\n-\t\t$AllGenresArray = (!empty($OldThisFileInfo['comments']['genre']) ? $OldThisFileInfo['comments']['genre'] : array());\n-\t\tforeach ($ArrayOfGenres as $key => $value) {\n-\t\t\techo '<option value=\"'.htmlentities($key, ENT_QUOTES).'\"';\n-\t\t\tif (in_array($key, $AllGenresArray)) {\n-\t\t\t\techo ' selected=\"selected\"';\n-\t\t\t\tunset($AllGenresArray[array_search($key, $AllGenresArray)]);\n-\t\t\t\tsort($AllGenresArray);\n-\t\t\t}\n-\t\t\techo '>'.htmlentities($value).'</option>';\n-\t\t}\n-\t\techo '</select><input type=\"text\" name=\"GenreOther\" size=\"10\" value=\"'.htmlentities((!empty($AllGenresArray[0]) ? $AllGenresArray[0] : ''), ENT_QUOTES).'\"></td></tr>';\n-\n-\t\techo '<tr><td align=\"right\"><b>Write Tags</b></td><td>';\n-\t\tforeach ($ValidTagTypes as $ValidTagType) {\n-\t\t\techo '<input type=\"checkbox\" name=\"TagFormatsToWrite[]\" value=\"'.$ValidTagType.'\"';\n-\t\t\tif (count($ValidTagTypes) == 1) {\n-\t\t\t\techo ' checked=\"checked\"';\n-\t\t\t} else {\n-\t\t\t\tswitch ($ValidTagType) {\n-\t\t\t\t\tcase 'id3v2.2':\n-\t\t\t\t\tcase 'id3v2.3':\n-\t\t\t\t\tcase 'id3v2.4':\n-\t\t\t\t\t\tif (isset($OldThisFileInfo['tags']['id3v2'])) {\n-\t\t\t\t\t\t\techo ' checked=\"checked\"';\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tbreak;\n-\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\tif (isset($OldThisFileInfo['tags'][$ValidTagType])) {\n-\t\t\t\t\t\t\techo ' checked=\"checked\"';\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\techo '>'.$ValidTagType.'<br>';\n-\t\t}\n-\t\tif (count($ValidTagTypes) > 1) {\n-\t\t\techo '<hr><input type=\"checkbox\" name=\"remove_other_tags\" value=\"1\"> Remove non-selected tag formats when writing new tag<br>';\n-\t\t}\n-\t\techo '</td></tr>';\n-\n-\t\techo '<tr><td align=\"right\"><b>Comment</b></td><td><textarea cols=\"30\" rows=\"3\" name=\"Comment\" wrap=\"virtual\">'.((isset($OldThisFileInfo['comments']['comment']) && is_array($OldThisFileInfo['comments']['comment'])) ? implode(\"\\n\", $OldThisFileInfo['comments']['comment']) : '').'</textarea></td></tr>';\n-\n-\t\techo '<tr><td align=\"right\"><b>Picture</b><br>(ID3v2 only)</td><td><input type=\"file\" name=\"userfile\" accept=\"image/jpeg, image/gif, image/png\"><br>';\n-\t\techo '<select name=\"APICpictureType\">';\n-\t\t$APICtypes = getid3_id3v2::APICPictureTypeLookup('', true);\n-\t\tforeach ($APICtypes as $key => $value) {\n-\t\t\techo '<option value=\"'.htmlentities($key, ENT_QUOTES).'\">'.htmlentities($value).'</option>';\n-\t\t}\n-\t\techo '</select></td></tr>';\n-\t\techo '<tr><td align=\"center\" colspan=\"2\"><input type=\"submit\" name=\"WriteTags\" value=\"Save Changes\"> ';\n-\t\techo '<input type=\"reset\" value=\"Reset\"></td></tr>';\n-\n-\t} else {\n-\n-\t\techo '<tr><td align=\"right\"><b>Error</b></td><td>'.htmlentities($Filename).' does not exist</td></tr>';\n-\n-\t}\n-\techo '</table>';\n-\techo '</form>';\n-\n-}\n-\n-echo '</body></html>';\n\\ No newline at end of file"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/demo.zip.php",
          "status": "removed",
          "additions": 0,
          "deletions": 101,
          "patch": "@@ -1,101 +0,0 @@\n-<?php\n-/////////////////////////////////////////////////////////////////\n-/// getID3() by James Heinrich <info@getid3.org>               //\n-//  available at http://getid3.sourceforge.net                 //\n-//            or http://www.getid3.org                         //\n-//          also https://github.com/JamesHeinrich/getID3       //\n-/////////////////////////////////////////////////////////////////\n-//                                                             //\n-// /demo/demo.zip.php - part of getID3()                       //\n-// Sample script how to use getID3() to decompress zip files   //\n-// See readme.txt for more details                             //\n-//                                                            ///\n-/////////////////////////////////////////////////////////////////\n-\n-\n-function UnzipFileContents($filename, &$errors) {\n-\t$errors = array();\n-\t$DecompressedFileContents = array();\n-\tif (!class_exists('getID3')) {\n-\t\t$errors[] = 'class getID3 not defined, please include getid3.php';\n-\t} elseif (include_once('module.archive.zip.php')) {\n-\t\t$getid3 = new getID3();\n-\t\t$getid3->info['filesize'] = filesize($filename);\n-\t\tob_start();\n-\t\tif ($getid3->fp = fopen($filename, 'rb')) {\n-\t\t\tob_end_clean();\n-\t\t\t$getid3_zip = new getid3_zip($getid3);\n-\t\t\t$getid3_zip->analyze($filename);\n-\t\t\tif (($getid3->info['fileformat'] == 'zip') && !empty($getid3->info['zip']['files'])) {\n-\t\t\t\tif (!empty($getid3->info['zip']['central_directory'])) {\n-\t\t\t\t\t$ZipDirectoryToWalk = $getid3->info['zip']['central_directory'];\n-\t\t\t\t} elseif (!empty($getid3->info['zip']['entries'])) {\n-\t\t\t\t\t$ZipDirectoryToWalk = $getid3->info['zip']['entries'];\n-\t\t\t\t} else {\n-\t\t\t\t\t$errors[] = 'failed to parse ZIP attachment \"'.$piece_filename.'\" (no central directory)<br>';\n-\t\t\t\t\tfclose($getid3->fp);\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t\tforeach ($ZipDirectoryToWalk as $key => $valuearray) {\n-\t\t\t\t\tfseek($getid3->fp, $valuearray['entry_offset'], SEEK_SET);\n-\t\t\t\t\t$LocalFileHeader = $getid3_zip->ZIPparseLocalFileHeader($getid3->fp);\n-\t\t\t\t\tif ($LocalFileHeader['flags']['encrypted']) {\n-\t\t\t\t\t\t// password-protected\n-\t\t\t\t\t\t$DecompressedFileContents[$valuearray['filename']] = '';\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tfseek($getid3->fp, $LocalFileHeader['data_offset'], SEEK_SET);\n-\t\t\t\t\t\t$compressedFileData = '';\n-\t\t\t\t\t\twhile ((strlen($compressedFileData) < $LocalFileHeader['compressed_size']) && !feof($getid3->fp)) {\n-\t\t\t\t\t\t\t$compressedFileData .= fread($getid3->fp, 32768);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tswitch ($LocalFileHeader['raw']['compression_method']) {\n-\t\t\t\t\t\t\tcase 0: // store - great, just copy data unchanged\n-\t\t\t\t\t\t\t\t$uncompressedFileData = $compressedFileData;\n-\t\t\t\t\t\t\t\tbreak;\n-\n-\t\t\t\t\t\t\tcase 8: // deflate\n-\t\t\t\t\t\t\t\tob_start();\n-\t\t\t\t\t\t\t\t$uncompressedFileData = gzinflate($compressedFileData);\n-\t\t\t\t\t\t\t\t$gzinflate_errors = trim(strip_tags(ob_get_contents()));\n-\t\t\t\t\t\t\t\tob_end_clean();\n-\t\t\t\t\t\t\t\tif ($gzinflate_errors) {\n-\t\t\t\t\t\t\t\t\t$errors[] = 'gzinflate() failed for file ['.$LocalFileHeader['filename'].']: \"'.$gzinflate_errors.'\"';\n-\t\t\t\t\t\t\t\t\tcontinue 2;\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\tbreak;\n-\n-\t\t\t\t\t\t\tcase 1:  // shrink\n-\t\t\t\t\t\t\tcase 2:  // reduce-1\n-\t\t\t\t\t\t\tcase 3:  // reduce-2\n-\t\t\t\t\t\t\tcase 4:  // reduce-3\n-\t\t\t\t\t\t\tcase 5:  // reduce-4\n-\t\t\t\t\t\t\tcase 6:  // implode\n-\t\t\t\t\t\t\tcase 7:  // tokenize\n-\t\t\t\t\t\t\tcase 9:  // deflate64\n-\t\t\t\t\t\t\tcase 10: // PKWARE Date Compression Library Imploding\n-\t\t\t\t\t\t\t\t$DecompressedFileContents[$valuearray['filename']] = '';\n-\t\t\t\t\t\t\t\t$errors[] = 'unsupported ZIP compression method ('.$LocalFileHeader['raw']['compression_method'].' = '.$getid3_zip->ZIPcompressionMethodLookup($LocalFileHeader['raw']['compression_method']).')';\n-\t\t\t\t\t\t\t\tcontinue 2;\n-\n-\t\t\t\t\t\t\tdefault:\n-\t\t\t\t\t\t\t\t$DecompressedFileContents[$valuearray['filename']] = '';\n-\t\t\t\t\t\t\t\t$errors[] = 'unknown ZIP compression method ('.$LocalFileHeader['raw']['compression_method'].')';\n-\t\t\t\t\t\t\t\tcontinue 2;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t$DecompressedFileContents[$valuearray['filename']] = $uncompressedFileData;\n-\t\t\t\t\t\tunset($compressedFileData);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t$errors[] = $filename.' does not appear to be a zip file';\n-\t\t\t}\n-\t\t} else {\n-\t\t\t$error_message = ob_get_contents();\n-\t\t\tob_end_clean();\n-\t\t\t$errors[] = 'failed to fopen('.$filename.', rb): '.$error_message;\n-\t\t}\n-\t} else {\n-\t\t$errors[] = 'failed to include_once(module.archive.zip.php)';\n-\t}\n-\treturn $DecompressedFileContents;\n-}"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/getid3.css",
          "status": "removed",
          "additions": 0,
          "deletions": 171,
          "patch": "@@ -1,171 +0,0 @@\n-/**\n-* Common elements\n-*/\n-\n-body {\n-\tfont: 12px Verdana, sans-serif;\n-\tbackground-color: white;\n-\tcolor:            black;\n-\tmargin-top:    6px;\n-\tmargin-bottom: 30px;\n-\tmargin-left:   12px;\n-\tmargin-right:  12px;\n-}\n-\n-h1 {\n-\tfont: bold 18px Verdana, sans-serif;\n-\tline-height:   26px;\n-\tmargin-top:    12px;\n-\tmargin-bottom: 15px;\n-\tmargin-left:    0px;\n-\tmargin-right:   7px;\n-\tbackground-color: #e6eaf6;\n-\tpadding-left:   10px;\n-\tpadding-top:    2px;\n-\tpadding-bottom: 4px;\n-}\n-\n-h3 {\n-\tfont: bold 13px Verdana, sans-serif;\n-\tline-height:   26px;\n-\tmargin-top:    12px;\n-\tmargin-bottom:  0px;\n-\tmargin-left:    0px;\n-\tmargin-right:   7px;\n-\tpadding-left:   4px;\n-}\n-\n-ul {\n-\tmargin-top: 0px;\n-}\n-\n-p, li {\n-\tfont: 9pt/135% sans-serif;\n-\tmargin-top:    1x;\n-\tmargin-bottom: 0x;\n-}\n-\n-a, a:link, a:visited {\n-\tcolor: #0000cc;\n-}\n-\n-hr {\n-\theight: 0;\n-\tborder: solid gray 0;\n-\tborder-top-width: thin;\n-\twidth: 700px;\n-}\n-\n-table.table td {\n-\tfont: 9pt sans-serif;\n-\tpadding-top:    1px;\n-\tpadding-bottom: 1px;\n-\tpadding-left:   5px;\n-\tpadding-right:  5px;\n-}\n-\n-table.table td.header {\n-\tbackground-color: #cccccc;\n-\tpadding-top:    2px;\n-\tpadding-bottom: 2px;\n-\tfont-weight: bold;\n-}\n-\n-table.table tr.even_files {\n-\tbackground-color: #fefefe;\n-}\n-\n-table.table tr.odd_files {\n-\tbackground-color: #e9e9e9;\n-}\n-\n-table.dump {\n-\tborder-top:  solid 1px #cccccc;\n-\tborder-left: solid 1px #cccccc;\n-\tmargin: 2px;\n-}\n-\n-table.dump td {\n-\tfont: 9pt sans-serif;\n-\tpadding-top:    1px;\n-\tpadding-bottom: 1px;\n-\tpadding-left:   5px;\n-\tpadding-right:  5px;\n-\tborder-right:  solid 1px #cccccc;\n-\tborder-bottom: solid 1px #cccccc;\n-}\n-\n-td.dump_string {\n-\tfont-weight: bold;\n-\tcolor: #006600;\n-\tfont-family: Zawgyi-One,sans-serif;\n-}\n-\n-td.dump_integer {\n-\tcolor: #CC0000;\n-\tfont-weight: bold;\n-}\n-\n-td.dump_double {\n-\tcolor: #FF9900;\n-\tfont-weight: bold;\n-}\n-\n-td.dump_boolean {\n-\tcolor: #0000FF;\n-\tfont-weight: bold;\n-}\n-\n-.error {\n-\tcolor: red\n-}\n-\n-\n-/**\n-* Tool Tips\n-*/\n-\n-.tooltip {\n-    font: 9pt sans-serif;\n-    background: #ffffe1;\n-    color: \tblack;\n-    border: \tblack 1px solid;\n-    margin: \t2px;\n-    padding: \t7px;\n-    position: \tabsolute;\n-    top: \t10px;\n-    left: \t10px;\n-    z-index: \t10000;\n-    visibility: hidden;\n-}\n-\n-.tooltip p {\n-     margin-top:   -2px;\n-     margin-bottom: 4px;\n-}\n-\n-\n-/**\n-* Forms\n-*/\n-\n-table.form td {\n- \tfont: 9pt/135% sans-serif;\n- \tpadding: 2px;\n-}\n-\n-select, input {\n-\tfont: 9pt/135% sans-serif;\n-}\n-\n-.select, .field {\n-\twidth: 260px;\n-}\n-\n-#sel_field {\n-\twidth: 85px;\n-}\n-\n-.button {\n-\tmargin-top: 10px;\n-}"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/getid3.demo.dirscan.php",
          "status": "removed",
          "additions": 0,
          "deletions": 258,
          "patch": "@@ -1,258 +0,0 @@\n-<?php\n-/////////////////////////////////////////////////////////////////////////////////\n-/// getID3() by James Heinrich <info@getid3.org>                               //\n-//  available at http://getid3.sourceforge.net                                 //\n-//            or http://www.getid3.org                                         //\n-//          also https://github.com/JamesHeinrich/getID3                       //\n-/////////////////////////////////////////////////////////////////////////////////\n-///                                                                            //\n-// getid3.dirscan.php - tool for batch media file processing with getID3()     //\n-//                                                                            ///\n-/////////////////////////////////////////////////////////////////////////////////\n-///                                                                            //\n-//  Directory Scanning and Caching CLI tool by Karl G. Holz <newaeon\u00d8mac*com>  //\n-//                                                                            ///\n-/////////////////////////////////////////////////////////////////////////////////\n-/**\n-* This is a directory scanning and caching cli tool for getID3().\n-*\n-* use like so for the default sqlite3 database, which is hidden:\n-*\n-* cd <path you want to start scanning from>\n-* php <path to getid3 files>/getid3.dirscan.php\n-*\n-* or\n-*\n-* php <path to getid3 files>/getid3.dirscan.php <dir to scan> <file ext in csv list>\n-*\n-* Supported Cache Types    (this extension)\n-*\n-*   SQL Databases:\n-*\n-*   cache_type\n-*   -------------------------------------------------------------------\n-*    mysql\n-\n-$cache='mysql';\n-$database['host']='';\n-$database['database']='';\n-$database['username']='';\n-$database['password']='';\n-$database['table']='';\n-\n-*    sqlite3\n-\n-$cache='sqlite3';\n-$database['table']='getid3_cache';\n-$database['hide']=true;\n-\n-*/\n-$dir      = $_SERVER['PWD'];\n-$media    = array('mp4', 'm4v', 'mov', 'mp3', 'm4a', 'jpg', 'png', 'gif');\n-$database = array();\n-/**\n-* configure the database bellow\n-*/\n-// sqlite3\n-$cache             = 'sqlite3';\n-$database['table'] = 'getid3_cache';\n-$database['hide']  = true;\n-/**\n- * mysql\n-$cache                = 'mysql';\n-$database['host']     = '';\n-$database['database'] = '';\n-$database['username'] = '';\n-$database['password'] = '';\n-$database['table']    = '';\n-*/\n-\n-/**\n-* id3 tags class file\n-*/\n-require_once(dirname(__FILE__).'/getid3.php');\n-/**\n-* dirscan scans all directories for files that match your selected filetypes into the cache database\n-* this is useful for a lot of media files\n-*\n-*\n-* @package dirscan\n-* @author Karl Holz\n-*\n-*/\n-\n-class dirscan {\n-\t/**\n-\t* type_brace()  * Might not work on Solaris and other non GNU systems *\n-\t*\n-\t* Configures a filetype list for use with glob searches,\n-\t* will match uppercase or lowercase extensions only, no mixing\n-\t* @param string $dir directory to use\n-\t* @param mixed cvs list of extentions or an array\n-\t* @return string or null if checks fail\n-\t*/\n-\tprivate function type_brace($dir, $search=array()) {\n-\t\t$dir = str_replace(array('///', '//'), array('/', '/'), $dir);\n-\t\tif (!is_dir($dir)) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tif (!is_array($search)) {\n-\t\t\t$e = explode(',', $search);\n-\t\t} elseif (count($search) < 1) {\n-\t\t\treturn null;\n-\t\t} else {\n-\t\t\t$e = $search;\n-\t\t}\n-\t\t$ext = array();\n-\t\tforeach ($e as $new) {\n-\t\t\t$ext[] = strtolower(trim($new));\n-\t\t\t$ext[] = strtoupper(trim($new));\n-\t\t}\n-\t\t$b = $dir.'/*.{'.implode(',', $ext).'}';\n-\t\treturn $b;\n-\t}\n-\n-\t/**\n-\t* this function will search 4 levels deep for directories\n-\t* will return null on failure\n-\t* @param string $root\n-\t* @return array return an array of dirs under root\n-\t* @todo figure out how to block tabo directories with ease\n-\t*/\n-\tprivate function getDirs($root) {\n-\t\tswitch ($root) { // return null on tabo directories, add as needed -> case {dir to block }:   this is not perfect yet\n-\t\t\tcase '/':\n-\t\t\tcase '/var':\n-\t\t\tcase '/etc':\n-\t\t\tcase '/home':\n-\t\t\tcase '/usr':\n-\t\t\tcase '/root':\n-\t\t\tcase '/private/etc':\n-\t\t\tcase '/private/var':\n-\t\t\tcase '/etc/apache2':\n-\t\t\tcase '/home':\n-\t\t\tcase '/tmp':\n-\t\t\tcase '/var/log':\n-\t\t\t\treturn null;\n-\t\t\t\tbreak;\n-\t\t\tdefault: // scan 4 directories deep\n-\t\t\t\tif (!is_dir($root)) {\n-    \t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t\t$dirs = array_merge(glob($root.'/*', GLOB_ONLYDIR), glob($root.'/*/*', GLOB_ONLYDIR), glob($root.'/*/*/*', GLOB_ONLYDIR), glob($root.'/*/*/*/*', GLOB_ONLYDIR), glob($root.'/*/*/*/*/*', GLOB_ONLYDIR), glob($root.'/*/*/*/*/*/*', GLOB_ONLYDIR), glob($root.'/*/*/*/*/*/*/*', GLOB_ONLYDIR));\n-\t\t\t\tbreak;\n-\t\t}\n-\t\tif (count($dirs) < 1) {\n-\t\t\t$dirs = array($root);\n-\t\t}\n-\t\treturn $dirs;\n-\t}\n-\n-\t/**\n-\t*  file_check() check the number of file that are found that match the brace search\n-\t*\n-\t* @param string $search\n-\t* @return mixed\n-\t*/\n-\tprivate function file_check($search) {\n-\t\t$t = array();\n-\t\t$s = glob($search, GLOB_BRACE);\n-\t\tforeach ($s as $file) {\n-\t\t\t$t[] = str_replace(array('///', '//'), array('/', '/'), $file);\n-\t\t}\n-\t\tif (count($t) > 0) {\n-\t\t\treturn $t;\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tfunction getTime() {\n-\t\treturn microtime(true);\n-\t\t// old method for PHP < 5\n-\t\t//$a = explode(' ', microtime());\n-\t\t//return (double) $a[0] + $a[1];\n-\t}\n-\n-\n-\t/**\n-\t*\n-\t* @param type $dir\n-\t* @param type $match  search type name extentions, can be an array or csv list\n-\t* @param type $cache caching extention, select one of sqlite3, mysql, dbm\n-\t* @param array $opt database options,\n-\t*/\n-\tfunction scan_files($dir, $match, $cache='sqlite3', $opt=array('table'=>'getid3_cache', 'hide'=>true)) {\n-\t\t$Start = self::getTime();\n-\t\tswitch ($cache) { // load the caching module\n-\t\t\tcase 'sqlite3':\n-\t\t\t\tif (!class_exists('getID3_cached_sqlite3')) {\n-\t\t\t\t\trequire_once(dirname(__FILE__)).'/extension.cache.sqlite3.php';\n-\t\t\t\t}\n-\t\t\t\t$id3 = new getID3_cached_sqlite3($opt['table'], $opt['hide']);\n-\t\t\t\tbreak;\n-\t\t\tcase 'mysql':\n-\t\t\t\tif (!class_exists('getID3_cached_mysql')) {\n-\t\t\t\t\trequire_once(dirname(__FILE__)).'/extension.cache.mysql.php';\n-\t\t\t\t}\n-\t\t\t\t$id3 = new getID3_cached_mysql($opt['host'], $opt['database'], $opt['username'], $opt['password'], $opt['table']);\n-\t\t\t\tbreak;\n-\t\t// I'll leave this for some one else\n-\t\t\t//case 'dbm':\n-\t\t\t//\tif (!class_exists('getID3_cached_dbm')) {\n-\t\t\t//\t\trequire_once(dirname(__FILE__)).'/extension.cache.dbm.php';\n-\t\t\t//\t}\n-\t\t\t//\tdie(' This has not be implemented, sorry for the inconvenience');\n-\t\t\t//\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tdie(' You have selected an Invalid cache type, only \"sqlite3\" and \"mysql\" are valid'.\"\\n\");\n-\t\t\t\tbreak;\n-\t\t}\n-\t\t$count = array('dir'=>0, 'file'=>0);\n-\t\t$dirs = self::getDirs($dir);\n-\t\tif ($dirs !== null) {\n-\t\t\tforeach ($dirs as $d) {\n-\t\t\t\techo ' Scanning: '.$d.\"\\n\";\n-\t\t\t\t$search = self::type_brace($d, $match);\n-\t\t\t\tif ($search !== null) {\n-    \t\t\t\t$files = self::file_check($search);\n-\t\t\t\t\tif ($files !== null) {\n-\t\t\t\t\t\tforeach ($files as $f) {\n-\t\t\t\t\t\t\techo ' * Analyzing '.$f.' '.\"\\n\";\n-\t\t\t\t\t\t\t$id3->analyze($f);\n-\t\t\t\t\t\t\t$count['file']++;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t$count['dir']++;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\techo 'Failed to get files '.\"\\n\";\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\techo 'Failed to create match string '.\"\\n\";\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\techo '**************************************'.\"\\n\";\n-\t\t\techo '* Finished Scanning your directories '.\"\\n*\\n\";\n-\t\t\techo '* Directories '.$count['dir'].\"\\n\";\n-\t\t\techo '* Files '.$count['file'].\"\\n\";\n-\t\t\t$End = self::getTime();\n-\t\t\t$t = number_format(($End - $Start) / 60, 2);\n-\t\t\techo '* Time taken to scan '.$dir.' '.$t.' min '.\"\\n\";\n-\t\t\techo '**************************************'.\"\\n\";\n-\t\t} else {\n-\t\t\techo ' failed to get directories '.\"\\n\";\n-\t\t}\n-\t}\n-}\n-\n-if (PHP_SAPI === 'cli') {\n-\tif (count($argv) == 2) {\n-\t\tif (is_dir($argv[1])) {\n-\t\t\t$dir = $argv[1];\n-\t\t}\n-\t\tif (count(explode(',', $argv[2])) > 0) {\n-\t\t\t$media = $arg[2];\n-\t\t}\n-\t}\n-\techo ' * Starting to scan directory: '.$dir.\"\\n\";\n-\techo ' * Using default media types: '.implode(',', $media).\"\\n\";\n-\tdirscan::scan_files($dir, $media, $cache, $database);\n-}"
        },
        {
          "filename": "libs/composer/vendor/james-heinrich/getid3/demos/index.php",
          "status": "removed",
          "additions": 0,
          "deletions": 19,
          "patch": "@@ -1,19 +0,0 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n-<html><head><title>getID3 demos</title><style type=\"text/css\">BODY, TD, TH { font-family: sans-serif; font-size: 10pt; }</style></head><body>\n-\n-In this directory are a number of examples of how to use <a href=\"http://www.getid3.org/\">getID3()</a>.<br>\n-If you don't know what to run, take a look at <a href=\"demo.browse.php\"><b>demo.browse.php</b></a>\n-<hr>\n-Other demos:<ul>\n-<?php\n-if ($dh = opendir('.')) {\n-\twhile ($file = readdir($dh)) {\n-\t\tif (preg_match('#^demo\\\\..+\\\\.php$#', $file)) {\n-\t\t\techo '<li><a href=\"'.htmlentities($file, ENT_QUOTES).'\">'.htmlentities($file).'</a></li>';\n-\t\t}\n-\t}\n-}\n-?>\n-</ul>\n-</body>\n-</html>\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7a99709688810050113f709dea04f8c3a08f36bf",
            "date": "2025-01-24T12:52:10Z",
            "author_login": "fwolf-ilias"
          },
          {
            "sha": "35ee154dc568c14cf471e62ec7fb92e4f82e6d57",
            "date": "2025-01-24T13:27:13Z",
            "author_login": "lscharmer"
          },
          {
            "sha": "707fc76998559809546409a6d4962cb100c21697",
            "date": "2025-01-24T06:50:07Z",
            "author_login": "chfsx"
          },
          {
            "sha": "ed6778ec23b7a97adc316bce1ee12ac01fb1cc38",
            "date": "2025-01-17T15:06:45Z",
            "author_login": "chfsx"
          },
          {
            "sha": "ab1c5a61bb41c48a7d6d0d73d8907df623511add",
            "date": "2025-01-23T16:42:13Z",
            "author_login": "lscharmer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "ILIAS 5.3.4 has XSS through unsanitized output of PHP_SELF, related to shib_logout.php and third-party demo files.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-05-02T17:29:00.250",
    "last_modified": "2024-11-21T03:41:49.250",
    "fix_date": "2018-04-27T07:38:26Z"
  },
  "references": [
    {
      "url": "https://github.com/ILIAS-eLearning/ILIAS/commit/3fe6aa778ca06080cf1b7303cbc458aa0c42392a",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ILIAS-eLearning/ILIAS/commit/c9c9211bd689f2dda02006159e69a856eae8944d",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.openbugbounty.org/reports/608858/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ILIAS-eLearning/ILIAS/commit/3fe6aa778ca06080cf1b7303cbc458aa0c42392a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/ILIAS-eLearning/ILIAS/commit/c9c9211bd689f2dda02006159e69a856eae8944d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.openbugbounty.org/reports/608858/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:25.826320",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "ILIAS",
    "owner": "ILIAS-eLearning",
    "created_at": "2015-02-11T06:44:39Z",
    "updated_at": "2025-01-13T16:57:13Z",
    "pushed_at": "2025-01-14T12:35:33Z",
    "size": 2880187,
    "stars": 413,
    "forks": 344,
    "open_issues": 192,
    "watchers": 413,
    "has_security_policy": false,
    "default_branch": "release_9",
    "protected_branches": [
      "release_8",
      "release_9",
      "release_10",
      "trunk"
    ],
    "languages": {
      "PHP": 56484914,
      "JavaScript": 3216878,
      "HTML": 1049290,
      "XSLT": 553008,
      "CSS": 487462,
      "SCSS": 476887,
      "Java": 353023,
      "Less": 34995,
      "Shell": 25102,
      "TypeScript": 17319,
      "Hack": 6739
    },
    "commit_activity": {
      "total_commits_last_year": 2154,
      "avg_commits_per_week": 41.42307692307692,
      "days_active_last_year": 280
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:01:22.205031"
  }
}