{
  "cve_id": "CVE-2018-10937",
  "github_data": {
    "repository": "openshift/console",
    "fix_commit": "d56666852da6e7309a2e63a49f49a72ff66d309c",
    "related_commits": [
      "d56666852da6e7309a2e63a49f49a72ff66d309c",
      "d56666852da6e7309a2e63a49f49a72ff66d309c"
    ],
    "patch_url": "https://github.com/openshift/console/commit/d56666852da6e7309a2e63a49f49a72ff66d309c.patch",
    "fix_commit_details": {
      "sha": "d56666852da6e7309a2e63a49f49a72ff66d309c",
      "commit_date": "2018-08-27T19:49:52Z",
      "author": {
        "login": "openshift-merge-robot",
        "type": "User",
        "stats": {
          "total_commits": 9480,
          "average_weekly_commits": 17.523105360443623,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 272
        }
      },
      "commit_message": {
        "title": "Merge pull request #461 from spadgett/proxy",
        "length": 101,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 91,
        "additions": 54,
        "deletions": 37
      },
      "files": [
        {
          "filename": "auth/auth.go",
          "status": "modified",
          "additions": 25,
          "deletions": 7,
          "patch": "@@ -27,6 +27,7 @@ import (\n const (\n \tCSRFCookieName    = \"csrf-token\"\n \tCSRFHeader        = \"X-CSRFToken\"\n+\tCSRFQueryParam    = \"x-csrf-token\"\n \tstateCookieName   = \"state-token\"\n \terrorOAuth        = \"oauth_error\"\n \terrorLoginState   = \"login_state_error\"\n@@ -356,24 +357,36 @@ func (a *Authenticator) redirectAuthError(w http.ResponseWriter, authErr string,\n \tw.WriteHeader(http.StatusSeeOther)\n }\n \n-func (a *Authenticator) VerifyReferer(r *http.Request) (err error) {\n-\treferer := r.Referer()\n-\tif len(referer) == 0 {\n-\t\treturn fmt.Errorf(\"No referer!\")\n+func (a *Authenticator) getSourceOrigin(r *http.Request) string {\n+\torigin := r.Header.Get(\"Origin\")\n+\tif len(origin) != 0 {\n+\t\treturn origin\n \t}\n \n-\tu, err := url.Parse(referer)\n+\treturn r.Referer()\n+}\n+\n+// VerifySourceOrigin checks that the Origin request header, if present, matches the target origin. Otherwise, it checks the Referer request header.\n+// https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Identifying_Source_Origin\n+func (a *Authenticator) VerifySourceOrigin(r *http.Request) (err error) {\n+\tsource := a.getSourceOrigin(r)\n+\tif len(source) == 0 {\n+\t\treturn fmt.Errorf(\"no Origin or Referer header in request\")\n+\t}\n+\n+\tu, err := url.Parse(source)\n \tif err != nil {\n \t\treturn err\n \t}\n \n \tisValid := a.refererURL.Hostname() == u.Hostname() &&\n \t\ta.refererURL.Port() == u.Port() &&\n \t\ta.refererURL.Scheme == u.Scheme &&\n-\t\tstrings.HasPrefix(u.Path, a.refererURL.Path)\n+\t\t// The Origin header does not have a path\n+\t\t(u.Path == \"\" || strings.HasPrefix(u.Path, a.refererURL.Path))\n \n \tif !isValid {\n-\t\treturn fmt.Errorf(\"invalid referer: %v expected `%v`\", referer, a.refererURL)\n+\t\treturn fmt.Errorf(\"invalid Origin or Referer: %v expected `%v`\", source, a.refererURL)\n \t}\n \treturn nil\n }\n@@ -392,6 +405,11 @@ func (a *Authenticator) SetCSRFCookie(path string, w *http.ResponseWriter) {\n \n func (a *Authenticator) VerifyCSRFToken(r *http.Request) (err error) {\n \tCSRFToken := r.Header.Get(CSRFHeader)\n+\tif CSRFToken == \"\" {\n+\t\t// Fallback to a query parameter, which is needed for websockets\n+\t\tCSRFToken = r.URL.Query().Get(CSRFQueryParam)\n+\t}\n+\n \tCRSCookie, err := r.Cookie(CSRFCookieName)\n \tif err != nil {\n \t\treturn fmt.Errorf(\"No CSRF Cookie!\")"
        },
        {
          "filename": "auth/auth_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -228,7 +228,7 @@ func testReferer(t *testing.T, referer string, accept bool) {\n \t\tr.Header.Set(\"Referer\", referer)\n \t}\n \n-\terr = a.VerifyReferer(r)\n+\terr = a.VerifySourceOrigin(r)\n \n \tif err != nil && accept {\n \t\tt.Errorf(\"Unexpected error for referer `%v`:\\n%v\", referer, err)"
        },
        {
          "filename": "cmd/bridge/main.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -248,7 +248,7 @@ func main() {\n \n \t\tsrv.K8sProxyConfig = &proxy.Config{\n \t\t\tTLSClientConfig: tlsConfig,\n-\t\t\tHeaderBlacklist: []string{\"Cookie\"},\n+\t\t\tHeaderBlacklist: []string{\"Cookie\", \"X-CSRFToken\"},\n \t\t\tEndpoint:        k8sEndpoint,\n \t\t}\n \n@@ -268,7 +268,7 @@ func main() {\n \t\t\t// Only proxy requests to the Prometheus API, not the UI.\n \t\t\tsrv.PrometheusProxyConfig = &proxy.Config{\n \t\t\t\tTLSClientConfig: prometheusTLSConfig,\n-\t\t\t\tHeaderBlacklist: []string{\"Cookie\"},\n+\t\t\t\tHeaderBlacklist: []string{\"Cookie\", \"X-CSRFToken\"},\n \t\t\t\tEndpoint:        &url.URL{Scheme: \"https\", Host: openshiftPrometheusHost, Path: \"/api\"},\n \t\t\t}\n \t\t} else if !os.IsNotExist(err) {\n@@ -283,7 +283,7 @@ func main() {\n \t\t\tTLSClientConfig: &tls.Config{\n \t\t\t\tInsecureSkipVerify: *fK8sModeOffClusterSkipVerifyTLS,\n \t\t\t},\n-\t\t\tHeaderBlacklist: []string{\"Cookie\"},\n+\t\t\tHeaderBlacklist: []string{\"Cookie\", \"X-CSRFToken\"},\n \t\t\tEndpoint:        k8sEndpoint,\n \t\t}\n \tdefault:"
        },
        {
          "filename": "frontend/public/co-fetch.js",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -84,16 +84,14 @@ export class TimeoutError extends Error {\n }\n \n const cookiePrefix = 'csrf-token=';\n-const getCSRFToken = () => document && document.cookie && document.cookie.split(';')\n+export const getCSRFToken = () => document && document.cookie && document.cookie.split(';')\n   .map(c => _.trim(c))\n   .filter(c => c.startsWith(cookiePrefix))\n   .map(c => c.slice(cookiePrefix.length)).pop();\n \n export const coFetch = (url, options = {}, timeout=20000) => {\n   const allOptions = _.defaultsDeep({}, initDefaults, options);\n-  if (allOptions.method !== 'GET') {\n-    allOptions.headers['X-CSRFToken'] = getCSRFToken();\n-  }\n+  allOptions.headers['X-CSRFToken'] = getCSRFToken();\n \n   // If the URL being requested is absolute (and therefore, not a local request),\n   // remove the authorization header to prevent credentials from leaking."
        },
        {
          "filename": "frontend/public/module/ws-factory.js",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -5,6 +5,15 @@\n  */\n /* eslint-disable no-console */\n \n+import { getCSRFToken } from '../co-fetch';\n+\n+function addCSRFQueryParam(href) {\n+  const url = new URL(href);\n+  const csrfToken = getCSRFToken();\n+  url.searchParams.set('x-csrf-token', csrfToken);\n+  return url.href;\n+}\n+\n function createURL(host, path) {\n   let url;\n \n@@ -22,7 +31,8 @@ function createURL(host, path) {\n   if (path) {\n     url += path;\n   }\n-  return url;\n+\n+  return addCSRFQueryParam(url);\n }\n \n export function WSFactory(id, options) {"
        },
        {
          "filename": "pkg/proxy/proxy.go",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -85,9 +85,12 @@ func decodeSubprotocol(encodedProtocol string) (string, error) {\n \treturn string(decodedProtocol), err\n }\n \n-var headerBlacklist = []string{\"Cookie\"}\n+var headerBlacklist = []string{\"Cookie\", \"X-CSRFToken\"}\n \n func (p *Proxy) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n+\t// Block scripts from running in proxied content for browsers that support Content-Security-Policy.\n+\tw.Header().Set(\"Content-Security-Policy\", \"default-src 'none';\")\n+\n \tisWebsocket := false\n \tupgrades := r.Header[\"Upgrade\"]\n "
        },
        {
          "filename": "server/middleware.go",
          "status": "modified",
          "additions": 8,
          "deletions": 19,
          "patch": "@@ -27,27 +27,16 @@ func authMiddlewareWithUser(a *auth.Authenticator, handlerFunc func(user *auth.U\n \n \t\tr.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", user.Token))\n \n-\t\tsafe := false\n-\t\tswitch r.Method {\n-\t\tcase\n-\t\t\t\"GET\",\n-\t\t\t\"HEAD\",\n-\t\t\t\"OPTIONS\",\n-\t\t\t\"TRACE\":\n-\t\t\tsafe = true\n+\t\tif err := a.VerifySourceOrigin(r); err != nil {\n+\t\t\tplog.Infof(\"invalid source origin: %v\", err)\n+\t\t\tw.WriteHeader(http.StatusForbidden)\n+\t\t\treturn\n \t\t}\n \n-\t\tif !safe {\n-\t\t\tif err := a.VerifyReferer(r); err != nil {\n-\t\t\t\tplog.Infof(\"Invalid referer %v\", err)\n-\t\t\t\tw.WriteHeader(http.StatusForbidden)\n-\t\t\t\treturn\n-\t\t\t}\n-\t\t\tif err := a.VerifyCSRFToken(r); err != nil {\n-\t\t\t\tplog.Infof(\"Invalid CSRFToken %v\", err)\n-\t\t\t\tw.WriteHeader(http.StatusForbidden)\n-\t\t\t\treturn\n-\t\t\t}\n+\t\tif err := a.VerifyCSRFToken(r); err != nil {\n+\t\t\tplog.Infof(\"invalid CSRFToken: %v\", err)\n+\t\t\tw.WriteHeader(http.StatusForbidden)\n+\t\t\treturn\n \t\t}\n \n \t\thandlerFunc(user, w, r)"
        },
        {
          "filename": "server/server.go",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -61,7 +61,6 @@ type jsGlobals struct {\n \tBranding             string `json:\"branding\"`\n \tDocumentationBaseURL string `json:\"documentationBaseURL\"`\n \tClusterName          string `json:\"clusterName\"`\n-\tCSRFToken            string `json:\"CSRFToken\"`\n \tGoogleTagManagerID   string `json:\"googleTagManagerID\"`\n \tLoadTestFactor       int    `json:\"loadTestFactor\"`\n }"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e72cc4c35f60ee3456985c00b4c2c42f28057af5",
            "date": "2025-01-10T15:28:53Z",
            "author_login": "openshift-merge-bot[bot]"
          },
          {
            "sha": "79b09a745de356d80fbd015c1ecba828fc0e0075",
            "date": "2025-01-10T06:35:15Z",
            "author_login": "openshift-merge-bot[bot]"
          },
          {
            "sha": "38d1903ad18e2ec2466f2b6aea71697cc61691f3",
            "date": "2025-01-10T01:21:47Z",
            "author_login": "openshift-merge-bot[bot]"
          },
          {
            "sha": "e4649ad2a9cab36567ee5a3779ea3970c9de9f98",
            "date": "2025-01-09T04:20:19Z",
            "author_login": "openshift-merge-bot[bot]"
          },
          {
            "sha": "d1177079802bb15ac91258ded8f777f896feb159",
            "date": "2025-01-08T19:07:39Z",
            "author_login": "rhamilto"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "A cross site scripting flaw exists in the tetonic-console component of Openshift Container Platform 3.11. An attacker with the ability to create pods can use this flaw to perform actions on the K8s API as the victim.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-09-11T16:29:00.230",
    "last_modified": "2024-11-21T03:42:20.923",
    "fix_date": "2018-08-27T19:49:52Z"
  },
  "references": [
    {
      "url": "http://www.securityfocus.com/bid/105190",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-10937",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openshift/console/commit/d56666852da6e7309a2e63a49f49a72ff66d309c",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openshift/console/pull/461",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/105190",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-10937",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openshift/console/commit/d56666852da6e7309a2e63a49f49a72ff66d309c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openshift/console/pull/461",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:35.810728",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "console",
    "owner": "openshift",
    "created_at": "2018-04-13T17:54:59Z",
    "updated_at": "2025-01-10T15:28:59Z",
    "pushed_at": "2025-01-13T20:00:34Z",
    "size": 234784,
    "stars": 406,
    "forks": 615,
    "open_issues": 83,
    "watchers": 406,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "cherry-pick-5798-to-release-4.5",
      "kubevirt",
      "master",
      "master-4.3",
      "master-multi-cluster-feature",
      "master-next",
      "overview-metrics",
      "rc0.5.2",
      "rc-v0.6.1",
      "rc-v0.7.2",
      "rc-v0.8.0",
      "rc-v0.9.1",
      "rc-v1.2.1",
      "rc-v1.3.0",
      "rc-v1.4.0",
      "rc-v1.4.1",
      "rc-v1.5",
      "rc-v1.7",
      "rc-v1.8",
      "rc-v1.9"
    ],
    "languages": {
      "TypeScript": 13477292,
      "Go": 721892,
      "Gherkin": 687901,
      "JavaScript": 599919,
      "SCSS": 338390,
      "Shell": 29997,
      "HTML": 4740,
      "Dockerfile": 2832,
      "Ruby": 2195,
      "EJS": 1705,
      "CSS": 326,
      "Procfile": 76
    },
    "commit_activity": {
      "total_commits_last_year": 1388,
      "avg_commits_per_week": 26.692307692307693,
      "days_active_last_year": 275
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:58:59.646223"
  }
}