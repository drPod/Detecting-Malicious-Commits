{
  "cve_id": "CVE-2018-12436",
  "github_data": {
    "repository": "wolfSSL/wolfssl",
    "fix_commit": "9b9568d500f31f964af26ba8d01e542e1f27e5ca",
    "related_commits": [
      "9b9568d500f31f964af26ba8d01e542e1f27e5ca",
      "9b9568d500f31f964af26ba8d01e542e1f27e5ca"
    ],
    "patch_url": "https://github.com/wolfSSL/wolfssl/commit/9b9568d500f31f964af26ba8d01e542e1f27e5ca.patch",
    "fix_commit_details": {
      "sha": "9b9568d500f31f964af26ba8d01e542e1f27e5ca",
      "commit_date": "2018-05-27T22:32:45Z",
      "author": {
        "login": "SparkiDev",
        "type": "User",
        "stats": {
          "total_commits": 2017,
          "average_weekly_commits": 2.7668038408779148,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 355
        }
      },
      "commit_message": {
        "title": "Change ECDSA signing to use blinding.",
        "length": 37,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 68,
        "additions": 54,
        "deletions": 14
      },
      "files": [
        {
          "filename": "wolfcrypt/src/ecc.c",
          "status": "modified",
          "additions": 54,
          "deletions": 14,
          "patch": "@@ -3139,19 +3139,19 @@ static int wc_ecc_gen_k(WC_RNG* rng, int size, mp_int* k, mp_int* order)\n     if (err == 0)\n         err = mp_read_unsigned_bin(k, (byte*)buf, size);\n \n-    /* quick sanity check to make sure we're not dealing with a 0 key */\n-    if (err == MP_OKAY) {\n-        if (mp_iszero(k) == MP_YES)\n-          err = MP_ZERO_E;\n-    }\n-\n     /* the key should be smaller than the order of base point */\n     if (err == MP_OKAY) {\n         if (mp_cmp(k, order) != MP_LT) {\n             err = mp_mod(k, order, k);\n         }\n     }\n \n+    /* quick sanity check to make sure we're not dealing with a 0 key */\n+    if (err == MP_OKAY) {\n+        if (mp_iszero(k) == MP_YES)\n+          err = MP_ZERO_E;\n+    }\n+\n     ForceZero(buf, ECC_MAXSIZE);\n #ifdef WOLFSSL_SMALL_STACK\n     XFREE(buf, NULL, DYNAMIC_TYPE_ECC_BUFFER);\n@@ -3924,20 +3924,40 @@ int wc_ecc_sign_hash_ex(const byte* in, word32 inlen, WC_RNG* rng,\n \n        /* don't use async for key, since we don't support async return here */\n        if ((err = wc_ecc_init_ex(&pubkey, key->heap, INVALID_DEVID)) == MP_OKAY) {\n+           mp_int b;\n+\n+           if (err == MP_OKAY) {\n+               err = mp_init(&b);\n+           }\n+\n        #ifdef WOLFSSL_CUSTOM_CURVES\n            /* if custom curve, apply params to pubkey */\n-           if (key->idx == ECC_CUSTOM_IDX) {\n+           if (err == MP_OKAY && key->idx == ECC_CUSTOM_IDX) {\n                err = wc_ecc_set_custom_curve(&pubkey, key->dp);\n            }\n        #endif\n \n+           if (err == MP_OKAY) {\n+               /* Generate blinding value - non-zero value. */\n+               do {\n+                   if (++loop_check > 64) {\n+                        err = RNG_FAILURE_E;\n+                        break;\n+                   }\n+\n+                   err = wc_ecc_gen_k(rng, key->dp->size, &b, curve->order);\n+               }\n+               while (err == MP_ZERO_E);\n+               loop_check = 0;\n+           }\n+\n            for (; err == MP_OKAY;) {\n                if (++loop_check > 64) {\n                     err = RNG_FAILURE_E;\n                     break;\n                }\n                err = wc_ecc_make_key_ex(rng, key->dp->size, &pubkey,\n-                                                              key->dp->id);\n+                                                                   key->dp->id);\n                if (err != MP_OKAY) break;\n \n                /* find r = x1 mod n */\n@@ -3953,30 +3973,50 @@ int wc_ecc_sign_hash_ex(const byte* in, word32 inlen, WC_RNG* rng,\n                    mp_forcezero(&pubkey.k);\n                }\n                else {\n-                   /* find s = (e + xr)/k */\n+                   /* find s = (e + xr)/k\n+                             = b.(e/k.b + x.r/k.b) */\n+\n+                   /* k = k.b */\n+                   err = mp_mulmod(&pubkey.k, &b, curve->order, &pubkey.k);\n+                   if (err != MP_OKAY) break;\n+\n+                   /* k = 1/k.b */\n                    err = mp_invmod(&pubkey.k, curve->order, &pubkey.k);\n                    if (err != MP_OKAY) break;\n \n-                   /* s = xr */\n+                   /* s = x.r */\n                    err = mp_mulmod(&key->k, r, curve->order, s);\n                    if (err != MP_OKAY) break;\n \n-                   /* s = e +  xr */\n+                   /* s = x.r/k.b */\n+                   err = mp_mulmod(&pubkey.k, s, curve->order, s);\n+                   if (err != MP_OKAY) break;\n+\n+                   /* e = e/k.b */\n+                   err = mp_mulmod(&pubkey.k, e, curve->order, e);\n+                   if (err != MP_OKAY) break;\n+\n+                   /* s = e/k.b + x.r/k.b\n+                        = (e + x.r)/k.b */\n                    err = mp_add(e, s, s);\n                    if (err != MP_OKAY) break;\n \n-                   /* s = e +  xr */\n-                   err = mp_mod(s, curve->order, s);\n+                   /* s = b.(e + x.r)/k.b\n+                        = (e + x.r)/k */\n+                   err = mp_mulmod(s, &b, curve->order, s);\n                    if (err != MP_OKAY) break;\n \n                    /* s = (e + xr)/k */\n-                   err = mp_mulmod(s, &pubkey.k, curve->order, s);\n+                   err = mp_mod(s, curve->order, s);\n+                   if (err != MP_OKAY) break;\n \n                    if (mp_iszero(s) == MP_NO)\n                        break;\n                 }\n            }\n            wc_ecc_free(&pubkey);\n+           mp_clear(&b);\n+           mp_free(&b);\n        }\n    }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e037e0875dd2e07361e9fac4cf7a0238e0309e33",
            "date": "2025-01-11T00:31:34Z",
            "author_login": "JacobBarthelmeh"
          },
          {
            "sha": "d4c654205b396bc094101924cec5c70f3c1c43a1",
            "date": "2025-01-10T23:38:02Z",
            "author_login": "douzzer"
          },
          {
            "sha": "99a6e82ff8e6e5672d24a341d0563ef0e4eb0c83",
            "date": "2025-01-10T22:58:30Z",
            "author_login": "JacobBarthelmeh"
          },
          {
            "sha": "dc2ada117ecc48626ba431d63a01cbfd86c22b6c",
            "date": "2025-01-10T21:48:24Z",
            "author_login": "douzzer"
          },
          {
            "sha": "b16bedf82a6d10d69574a16684db74dd1e66f9f2",
            "date": "2025-01-10T21:48:05Z",
            "author_login": "douzzer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-200",
    "description": "wolfcrypt/src/ecc.c in wolfSSL before 3.15.1.patch allows a memory-cache side-channel attack on ECDSA signatures, aka the Return Of the Hidden Number Problem or ROHNP. To discover an ECDSA key, the attacker needs access to either the local machine or a different virtual machine on the same physical host.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-06-15T02:29:00.423",
    "last_modified": "2024-11-21T03:45:13.080",
    "fix_date": "2018-05-27T22:32:45Z"
  },
  "references": [
    {
      "url": "https://github.com/wolfSSL/wolfssl/commit/9b9568d500f31f964af26ba8d01e542e1f27e5ca",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.nccgroup.trust/us/our-research/technical-advisory-return-of-the-hidden-number-problem/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.wolfssl.com/wolfssh-and-rohnp/",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/wolfSSL/wolfssl/commit/9b9568d500f31f964af26ba8d01e542e1f27e5ca",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.nccgroup.trust/us/our-research/technical-advisory-return-of-the-hidden-number-problem/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.wolfssl.com/wolfssh-and-rohnp/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:28.533952",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wolfssl",
    "owner": "wolfSSL",
    "created_at": "2015-01-07T18:50:58Z",
    "updated_at": "2025-01-13T00:58:18Z",
    "pushed_at": "2025-01-11T00:31:34Z",
    "size": 721845,
    "stars": 2393,
    "forks": 837,
    "open_issues": 146,
    "watchers": 2393,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C": 62599471,
      "Assembly": 10706563,
      "SWIG": 703527,
      "Shell": 514989,
      "M4": 472265,
      "CMake": 469091,
      "C#": 318580,
      "Makefile": 179610,
      "C++": 139371,
      "Perl": 131729,
      "Ada": 101144,
      "Cuda": 44905,
      "FreeMarker": 21402,
      "Batchfile": 16006,
      "Tcl": 13135,
      "Python": 12935,
      "Objective-C": 8372,
      "Euphoria": 8268,
      "Dockerfile": 7146,
      "Swift": 2317,
      "BitBake": 1232,
      "XS": 195
    },
    "commit_activity": {
      "total_commits_last_year": 2519,
      "avg_commits_per_week": 48.44230769230769,
      "days_active_last_year": 301
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:12:30.290141"
  }
}