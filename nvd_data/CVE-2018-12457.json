{
  "cve_id": "CVE-2018-12457",
  "github_data": {
    "repository": "mrvautin/expressCart",
    "fix_commit": "baccaae9b0b72f00b10c5453ca00231340ad3e3b",
    "related_commits": [
      "baccaae9b0b72f00b10c5453ca00231340ad3e3b",
      "baccaae9b0b72f00b10c5453ca00231340ad3e3b"
    ],
    "patch_url": "https://github.com/mrvautin/expressCart/commit/baccaae9b0b72f00b10c5453ca00231340ad3e3b.patch",
    "fix_commit_details": {
      "sha": "baccaae9b0b72f00b10c5453ca00231340ad3e3b",
      "commit_date": "2018-05-30T09:05:17Z",
      "author": {
        "login": "mrvautin",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix issue with ability to create admin user by setting referrer",
        "length": 63,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 93,
        "additions": 49,
        "deletions": 44
      },
      "files": [
        {
          "filename": "routes/user.js",
          "status": "modified",
          "additions": 49,
          "deletions": 44,
          "patch": "@@ -146,56 +146,61 @@ router.post('/admin/user/insert', common.restrict, (req, res) => {\n     // set the account to admin if using the setup form. Eg: First user account\n     let urlParts = url.parse(req.header('Referer'));\n \n-    let isAdmin = false;\n-    if(urlParts.path === '/admin/setup'){\n-        isAdmin = true;\n-    }\n+    // Check number of users\n+    db.users.count({}, (err, userCount) => {\n+        let isAdmin = false;\n \n-    let doc = {\n-        usersName: req.body.usersName,\n-        userEmail: req.body.userEmail,\n-        userPassword: bcrypt.hashSync(req.body.userPassword, 10),\n-        isAdmin: isAdmin\n-    };\n-\n-    // check for existing user\n-    db.users.findOne({'userEmail': req.body.userEmail}, (err, user) => {\n-        if(user){\n-            // user already exists with that email address\n-            console.error(colors.red('Failed to insert user, possibly already exists: ' + err));\n-            req.session.message = 'A user with that email address already exists';\n-            req.session.messageType = 'danger';\n-            res.redirect('/admin/user/new');\n-            return;\n+        // if no users, setup user as admin\n+        if(userCount === 0){\n+            isAdmin = true;\n         }\n-        // email is ok to be used.\n-        db.users.insert(doc, (err, doc) => {\n-            // show the view\n-            if(err){\n-                if(doc){\n-                    console.error(colors.red('Failed to insert user: ' + err));\n-                    req.session.message = 'User exists';\n-                    req.session.messageType = 'danger';\n-                    res.redirect('/admin/user/edit/' + doc._id);\n-                    return;\n-                }\n-                console.error(colors.red('Failed to insert user: ' + err));\n-                req.session.message = 'New user creation failed';\n+\n+        let doc = {\n+            usersName: req.body.usersName,\n+            userEmail: req.body.userEmail,\n+            userPassword: bcrypt.hashSync(req.body.userPassword, 10),\n+            isAdmin: isAdmin\n+        };\n+\n+        // check for existing user\n+        db.users.findOne({'userEmail': req.body.userEmail}, (err, user) => {\n+            if(user){\n+                // user already exists with that email address\n+                console.error(colors.red('Failed to insert user, possibly already exists: ' + err));\n+                req.session.message = 'A user with that email address already exists';\n                 req.session.messageType = 'danger';\n                 res.redirect('/admin/user/new');\n                 return;\n             }\n-            req.session.message = 'User account inserted';\n-            req.session.messageType = 'success';\n-\n-            // if from setup we add user to session and redirect to login.\n-            // Otherwise we show users screen\n-            if(urlParts.path === '/admin/setup'){\n-                req.session.user = req.body.userEmail;\n-                res.redirect('/admin/login');\n-                return;\n-            }\n-            res.redirect('/admin/users');\n+            // email is ok to be used.\n+            db.users.insert(doc, (err, doc) => {\n+                // show the view\n+                if(err){\n+                    if(doc){\n+                        console.error(colors.red('Failed to insert user: ' + err));\n+                        req.session.message = 'User exists';\n+                        req.session.messageType = 'danger';\n+                        res.redirect('/admin/user/edit/' + doc._id);\n+                        return;\n+                    }\n+                    console.error(colors.red('Failed to insert user: ' + err));\n+                    req.session.message = 'New user creation failed';\n+                    req.session.messageType = 'danger';\n+                    res.redirect('/admin/user/new');\n+                    return;\n+                }\n+                req.session.message = 'User account inserted';\n+                req.session.messageType = 'success';\n+\n+                // if from setup we add user to session and redirect to login.\n+                // Otherwise we show users screen\n+                if(urlParts.path === '/admin/setup'){\n+                    req.session.user = req.body.userEmail;\n+                    res.redirect('/admin/login');\n+                    return;\n+                }\n+                res.redirect('/admin/users');\n+            });\n         });\n     });\n });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b31302f4e99c3293bd742c6d076a721e168118b0",
            "date": "2023-01-23T06:00:56Z",
            "author_login": "asadmakram"
          },
          {
            "sha": "1ecf54241b3a412f612cd4bf50d280c82f8c2008",
            "date": "2023-01-23T06:00:20Z",
            "author_login": "shivaenigma"
          },
          {
            "sha": "582a31ed5b5e00b9c73f704f8757adb63eead36e",
            "date": "2021-11-11T09:15:20Z",
            "author_login": "mrvautin"
          },
          {
            "sha": "147af3ea8c13d92321ae21e87d55ef0c22e532fb",
            "date": "2021-11-11T08:58:32Z",
            "author_login": "mrvautin"
          },
          {
            "sha": "43ffdb1112fc780e64d3f55a221abd8e15c24f7f",
            "date": "2021-11-11T05:20:52Z",
            "author_login": "mrvautin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-732",
    "description": "expressCart before 1.1.6 allows remote attackers to create an admin user via a /admin/setup Referer header.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-06-15T14:29:00.227",
    "last_modified": "2024-11-21T03:45:15.197",
    "fix_date": "2018-05-30T09:05:17Z"
  },
  "references": [
    {
      "url": "https://github.com/mrvautin/expressCart/commit/baccaae9b0b72f00b10c5453ca00231340ad3e3b",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://hackerone.com/reports/343626",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/express-cart?activeTab=versions",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mrvautin/expressCart/commit/baccaae9b0b72f00b10c5453ca00231340ad3e3b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://hackerone.com/reports/343626",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/express-cart?activeTab=versions",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:28.534220",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "expressCart",
    "owner": "mrvautin",
    "created_at": "2018-01-06T18:57:33Z",
    "updated_at": "2025-01-04T15:28:53Z",
    "pushed_at": "2023-11-23T15:35:59Z",
    "size": 9447,
    "stars": 2253,
    "forks": 872,
    "open_issues": 33,
    "watchers": 2253,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 383131,
      "Handlebars": 178323,
      "CSS": 18362,
      "Less": 17257,
      "HTML": 3273,
      "Dockerfile": 527
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:04:46.289786"
  }
}