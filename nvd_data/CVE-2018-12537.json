{
  "cve_id": "CVE-2018-12537",
  "github_data": {
    "repository": "eclipse/vert.x",
    "fix_commit": "1bb6445226c39a95e7d07ce3caaf56828e8aab72",
    "related_commits": [
      "1bb6445226c39a95e7d07ce3caaf56828e8aab72",
      "1bb6445226c39a95e7d07ce3caaf56828e8aab72"
    ],
    "patch_url": "https://github.com/eclipse/vert.x/commit/1bb6445226c39a95e7d07ce3caaf56828e8aab72.patch",
    "fix_commit_details": {
      "sha": "1bb6445226c39a95e7d07ce3caaf56828e8aab72",
      "commit_date": "2018-05-23T10:31:59Z",
      "author": {
        "login": "vietj",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Http header CR / LF validation - fixes #2470",
        "length": 44,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 146,
        "additions": 131,
        "deletions": 15
      },
      "files": [
        {
          "filename": "src/main/java/io/vertx/core/http/HttpHeaders.java",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -11,6 +11,9 @@\n \n package io.vertx.core.http;\n \n+import io.netty.util.AsciiString;\n+import io.vertx.core.http.impl.HttpUtils;\n+\n /**\n  * Contains often used Header names.\n  * <p>\n@@ -324,7 +327,8 @@ public final class HttpHeaders {\n    * for multiple responses or requests.\n    */\n   public static CharSequence createOptimized(String value) {\n-    return io.netty.handler.codec.http.HttpHeaders.newEntity(value);\n+    HttpUtils.validateHeader(value);\n+    return new AsciiString(value);\n   }\n \n   private HttpHeaders() {"
        },
        {
          "filename": "src/main/java/io/vertx/core/http/impl/Http2HeadersAdaptor.java",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -139,12 +139,14 @@ public int size() {\n \n   @Override\n   public MultiMap add(String name, String value) {\n+    HttpUtils.validateHeader(name, value);\n     headers.add(toLowerCase(name), value);\n     return this;\n   }\n \n   @Override\n   public MultiMap add(String name, Iterable<String> values) {\n+    HttpUtils.validateHeader(name, values);\n     headers.add(toLowerCase(name), values);\n     return this;\n   }\n@@ -167,12 +169,14 @@ public MultiMap addAll(Map<String, String> map) {\n \n   @Override\n   public MultiMap set(String name, String value) {\n+    HttpUtils.validateHeader(name, value);\n     headers.set(toLowerCase(name), value);\n     return this;\n   }\n \n   @Override\n   public MultiMap set(String name, Iterable<String> values) {\n+    HttpUtils.validateHeader(name, values);\n     headers.set(toLowerCase(name), values);\n     return this;\n   }\n@@ -240,24 +244,28 @@ public boolean contains(CharSequence name, CharSequence value, boolean caseInsen\n \n   @Override\n   public MultiMap add(CharSequence name, CharSequence value) {\n+    HttpUtils.validateHeader(name, value);\n     headers.add(toLowerCase(name), value);\n     return this;\n   }\n \n   @Override\n   public MultiMap add(CharSequence name, Iterable<CharSequence> values) {\n+    HttpUtils.validateHeader(name, values);\n     headers.add(toLowerCase(name), values);\n     return this;\n   }\n \n   @Override\n   public MultiMap set(CharSequence name, CharSequence value) {\n+    HttpUtils.validateHeader(name, value);\n     headers.set(toLowerCase(name), value);\n     return this;\n   }\n \n   @Override\n   public MultiMap set(CharSequence name, Iterable<CharSequence> values) {\n+    HttpUtils.validateHeader(name, values);\n     headers.set(toLowerCase(name), values);\n     return this;\n   }"
        },
        {
          "filename": "src/main/java/io/vertx/core/http/impl/Http2ServerResponseImpl.java",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -13,7 +13,6 @@\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.Unpooled;\n-import io.netty.channel.ChannelFuture;\n import io.netty.channel.ChannelFutureListener;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.http.HttpHeaderNames;\n@@ -26,7 +25,6 @@\n import io.vertx.core.Future;\n import io.vertx.core.Handler;\n import io.vertx.core.MultiMap;\n-import io.vertx.core.VertxException;\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.http.HttpMethod;\n import io.vertx.core.http.HttpServerResponse;"
        },
        {
          "filename": "src/main/java/io/vertx/core/http/impl/HttpClientRequestImpl.java",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -17,13 +17,13 @@\n import io.vertx.codegen.annotations.Nullable;\n import io.vertx.core.*;\n import io.vertx.core.buffer.Buffer;\n-import io.vertx.core.http.CaseInsensitiveHeaders;\n import io.vertx.core.http.HttpClientRequest;\n import io.vertx.core.http.HttpClientResponse;\n import io.vertx.core.http.HttpConnection;\n import io.vertx.core.http.HttpFrame;\n import io.vertx.core.http.HttpMethod;\n import io.vertx.core.http.HttpVersion;\n+import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n import io.vertx.core.impl.ContextInternal;\n import io.vertx.core.impl.VertxInternal;\n import io.vertx.core.logging.Logger;\n@@ -68,7 +68,7 @@ public class HttpClientRequestImpl extends HttpClientRequestBase implements Http\n   private int pendingMaxSize = -1;\n   private int followRedirects;\n   private long written;\n-  private CaseInsensitiveHeaders headers;\n+  private VertxHttpHeaders headers;\n \n   private HttpClientStream stream;\n   private boolean connecting;\n@@ -183,7 +183,7 @@ public synchronized String getHost() {\n   @Override\n   public synchronized MultiMap headers() {\n     if (headers == null) {\n-      headers = new CaseInsensitiveHeaders();\n+      headers = new VertxHttpHeaders();\n     }\n     return headers;\n   }"
        },
        {
          "filename": "src/main/java/io/vertx/core/http/impl/HttpUtils.java",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -521,4 +521,23 @@ public static int parseKeepAliveHeaderTimeout(CharSequence value) {\n     }\n     return -1;\n   }\n+\n+  public static void validateHeader(CharSequence name, CharSequence value) {\n+    validateHeader(name);\n+    validateHeader(value);\n+  }\n+\n+  public static void validateHeader(CharSequence name, Iterable<? extends CharSequence> values) {\n+    validateHeader(name);\n+    values.forEach(HttpUtils::validateHeader);\n+  }\n+\n+  public static void validateHeader(CharSequence value) {\n+    for (int i = 0;i < value.length();i++) {\n+      char c = value.charAt(i);\n+      if (c == '\\r' || c == '\\n') {\n+        throw new IllegalArgumentException(\"Illegal header character: \" + ((int)c));\n+      }\n+    }\n+  }\n }"
        },
        {
          "filename": "src/main/java/io/vertx/core/http/impl/headers/VertxHttpHeaders.java",
          "status": "modified",
          "additions": 14,
          "deletions": 1,
          "patch": "@@ -15,6 +15,7 @@\n import io.netty.util.AsciiString;\n import io.netty.util.HashingStrategy;\n import io.vertx.core.MultiMap;\n+import io.vertx.core.http.impl.HttpUtils;\n \n import java.util.AbstractMap;\n import java.util.ArrayList;\n@@ -54,7 +55,7 @@ private static int index(int hash) {\n   }\n \n   private final VertxHttpHeaders.MapEntry[] entries = new VertxHttpHeaders.MapEntry[16];\n-  private final VertxHttpHeaders.MapEntry head = new VertxHttpHeaders.MapEntry(-1, null, null);\n+  private final VertxHttpHeaders.MapEntry head = new VertxHttpHeaders.MapEntry();\n \n   public VertxHttpHeaders() {\n     head.before = head.after = head;\n@@ -397,6 +398,12 @@ private static final class MapEntry implements Map.Entry<CharSequence, CharSeque\n     VertxHttpHeaders.MapEntry next;\n     VertxHttpHeaders.MapEntry before, after;\n \n+    MapEntry() {\n+      this.hash = -1;\n+      this.key = null;\n+      this.value = null;\n+    }\n+\n     MapEntry(int hash, CharSequence key, CharSequence value) {\n       this.hash = hash;\n       this.key = key;\n@@ -476,6 +483,12 @@ private void remove0(int h, int i, CharSequence name) {\n   }\n \n   private void add0(int h, int i, final CharSequence name, final CharSequence value) {\n+    if (!(name instanceof AsciiString)) {\n+      HttpUtils.validateHeader(name);\n+    }\n+    if (!(value instanceof AsciiString)) {\n+      HttpUtils.validateHeader(value);\n+    }\n     // Update the hash table.\n     VertxHttpHeaders.MapEntry e = entries[i];\n     VertxHttpHeaders.MapEntry newEntry;"
        },
        {
          "filename": "src/test/java/io/vertx/test/core/HttpTest.java",
          "status": "modified",
          "additions": 76,
          "deletions": 8,
          "patch": "@@ -49,12 +49,7 @@\n import java.io.UnsupportedEncodingException;\n import java.net.InetAddress;\n import java.net.URLEncoder;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.UUID;\n+import java.util.*;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutorService;\n@@ -64,6 +59,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.BiConsumer;\n import java.util.function.Consumer;\n import java.util.function.Function;\n import java.util.stream.IntStream;\n@@ -86,7 +82,7 @@ public void setUp() throws Exception {\n     super.setUp();\n     testDir = testFolder.newFolder();\n   }\n-    \n+\n   protected HttpServerOptions createBaseServerOptions() {\n     return new HttpServerOptions().setPort(DEFAULT_HTTP_PORT).setHost(DEFAULT_HTTP_HOST);\n   }\n@@ -176,7 +172,7 @@ public void testListenDomainSocketAddress() throws Exception {\n     }\n   }\n \n-    \n+\n   @Test\n   public void testLowerCaseHeaders() {\n     server.requestHandler(req -> {\n@@ -4272,6 +4268,78 @@ protected static MultiMap getHeaders(int num) {\n     return headers;\n   }\n \n+  @Test\n+  public void testHttpClientRequestHeadersDontContainCROrLF() throws Exception {\n+    server.requestHandler(req -> {\n+      req.headers().forEach(header -> {\n+        String name = header.getKey();\n+        switch (name.toLowerCase()) {\n+          case \"host\":\n+          case \":method\":\n+          case \":path\":\n+          case \":scheme\":\n+          case \":authority\":\n+            break;\n+          default:\n+            fail(\"Unexpected header \" + name);\n+        }\n+      });\n+      testComplete();\n+    });\n+    startServer();\n+    HttpClientRequest req = client.get(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, DEFAULT_TEST_URI, resp -> {});\n+    List<BiConsumer<String, String>> list = Arrays.asList(\n+      req::putHeader,\n+      req.headers()::set,\n+      req.headers()::add\n+    );\n+    list.forEach(cs -> {\n+      try {\n+        req.putHeader(\"header-name: header-value\\r\\nanother-header\", \"another-value\");\n+        fail();\n+      } catch (IllegalArgumentException e) {\n+      }\n+    });\n+    assertEquals(0, req.headers().size());\n+    req.end();\n+    await();\n+  }\n+\n+  @Test\n+  public void testHttpServerResponseHeadersDontContainCROrLF() throws Exception {\n+    server.requestHandler(req -> {\n+      List<BiConsumer<String, String>> list = Arrays.asList(\n+        req.response()::putHeader,\n+        req.response().headers()::set,\n+        req.response().headers()::add\n+      );\n+      list.forEach(cs -> {\n+        try {\n+          cs.accept(\"header-name: header-value\\r\\nanother-header\", \"another-value\");\n+          fail();\n+        } catch (IllegalArgumentException e) {\n+        }\n+      });\n+      assertEquals(Collections.emptySet(), req.response().headers().names());\n+      req.response().end();\n+    });\n+    startServer();\n+    client.getNow(DEFAULT_HTTP_PORT, DEFAULT_HTTP_HOST, DEFAULT_TEST_URI, resp -> {\n+      resp.headers().forEach(header -> {\n+        String name = header.getKey();\n+        switch (name.toLowerCase()) {\n+          case \":status\":\n+          case \"content-length\":\n+            break;\n+          default:\n+            fail(\"Unexpected header \" + name);\n+        }\n+      });\n+      testComplete();\n+    });\n+    await();\n+  }\n+\n   /*\n   @Test\n   public void testReset() throws Exception {"
        },
        {
          "filename": "src/test/java/io/vertx/test/core/VertxHttpHeadersTest.java",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -13,6 +13,7 @@\n \n import io.vertx.core.MultiMap;\n import io.vertx.core.http.impl.headers.VertxHttpHeaders;\n+import org.junit.Test;\n \n /**\n  * @author <a href=\"mailto:julien@julienviet.com\">Julien Viet</a>\n@@ -23,4 +24,9 @@ public class VertxHttpHeadersTest extends CaseInsensitiveHeadersTest {\n   protected MultiMap newMultiMap() {\n     return new VertxHttpHeaders();\n   }\n+\n+  @Override\n+  public void testHashMININT() {\n+    // Does not apply\n+  }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d5f613c69cf6ed3a9ed3586e5be1896b11711462",
            "date": "2025-01-13T08:05:22Z",
            "author_login": "vietj"
          },
          {
            "sha": "bb4661d59e0f09e6811d0d386fa97bc459fa4285",
            "date": "2024-12-19T00:42:25Z",
            "author_login": "j-white"
          },
          {
            "sha": "77c2b91b6f1a72b6a9e5efbc805c29e2efe84007",
            "date": "2025-01-09T14:33:00Z",
            "author_login": "vietj"
          },
          {
            "sha": "56a122a2f7c5b118eb89ffdf936cc38dde7be4fd",
            "date": "2025-01-08T08:59:43Z",
            "author_login": "vietj"
          },
          {
            "sha": "7fbc36f8afcc2c9d845fc185f9b42f50bcd52e7e",
            "date": "2025-01-06T16:15:41Z",
            "author_login": "vietj"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-93",
    "description": "In Eclipse Vert.x version 3.0 to 3.5.1, the HttpServer response headers and HttpClient request headers do not filter carriage return and line feed characters from the header value. This allow unfiltered values to inject a new header in the client request or server response.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-08-14T19:29:00.247",
    "last_modified": "2024-11-21T03:45:23.467",
    "fix_date": "2018-05-23T10:31:59Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2371",
      "source": "emo@eclipse.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:3768",
      "source": "emo@eclipse.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.eclipse.org/bugs/show_bug.cgi?id=536038",
      "source": "emo@eclipse.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1591072",
      "source": "emo@eclipse.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eclipse/vert.x/commit/1bb6445226c39a95e7d07ce3caaf56828e8aab72",
      "source": "emo@eclipse.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eclipse/vert.x/issues/2470",
      "source": "emo@eclipse.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.compass-security.com/fileadmin/Datein/Research/Advisories/CSNC-2018-021_vertx.txt",
      "source": "emo@eclipse.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2371",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:3768",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.eclipse.org/bugs/show_bug.cgi?id=536038",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1591072",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eclipse/vert.x/commit/1bb6445226c39a95e7d07ce3caaf56828e8aab72",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eclipse/vert.x/issues/2470",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.compass-security.com/fileadmin/Datein/Research/Advisories/CSNC-2018-021_vertx.txt",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:32.437714",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vert.x",
    "owner": "eclipse",
    "created_at": "2011-06-17T14:54:55Z",
    "updated_at": "2025-01-14T12:09:54Z",
    "pushed_at": "2025-01-14T08:42:38Z",
    "size": 117543,
    "stars": 14377,
    "forks": 2081,
    "open_issues": 326,
    "watchers": 14377,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "3.5",
      "3.6",
      "3.7",
      "3.8",
      "3.9",
      "4.x",
      "4.1",
      "4.2",
      "4.3",
      "4.4"
    ],
    "languages": {
      "Java": 6459461,
      "HTML": 203
    },
    "commit_activity": {
      "total_commits_last_year": 359,
      "avg_commits_per_week": 6.903846153846154,
      "days_active_last_year": 164
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T17:36:51.086929"
  }
}