{
  "cve_id": "CVE-2018-13301",
  "github_data": {
    "repository": "FFmpeg/FFmpeg",
    "fix_commit": "2aa9047486dbff12d9e040f917e5f799ed2fd78b",
    "related_commits": [
      "2aa9047486dbff12d9e040f917e5f799ed2fd78b",
      "2aa9047486dbff12d9e040f917e5f799ed2fd78b"
    ],
    "patch_url": "https://github.com/FFmpeg/FFmpeg/commit/2aa9047486dbff12d9e040f917e5f799ed2fd78b.patch",
    "fix_commit_details": {
      "sha": "2aa9047486dbff12d9e040f917e5f799ed2fd78b",
      "commit_date": "2018-06-27T17:37:09Z",
      "author": {
        "login": "michaelni",
        "type": "User",
        "stats": {
          "total_commits": 30563,
          "average_weekly_commits": 24.352988047808765,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 1151
        }
      },
      "commit_message": {
        "title": "avcodec/mpeg4videodec: Check read profile before setting it",
        "length": 276,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 23,
        "additions": 15,
        "deletions": 8
      },
      "files": [
        {
          "filename": "libavcodec/mpeg4videodec.c",
          "status": "modified",
          "additions": 15,
          "deletions": 8,
          "patch": "@@ -1980,15 +1980,15 @@ static int mpeg4_decode_gop_header(MpegEncContext *s, GetBitContext *gb)\n     return 0;\n }\n \n-static int mpeg4_decode_profile_level(MpegEncContext *s, GetBitContext *gb)\n+static int mpeg4_decode_profile_level(MpegEncContext *s, GetBitContext *gb, int *profile, int *level)\n {\n \n-    s->avctx->profile = get_bits(gb, 4);\n-    s->avctx->level   = get_bits(gb, 4);\n+    *profile = get_bits(gb, 4);\n+    *level   = get_bits(gb, 4);\n \n     // for Simple profile, level 0\n-    if (s->avctx->profile == 0 && s->avctx->level == 8) {\n-        s->avctx->level = 0;\n+    if (*profile == 0 && *level == 8) {\n+        *level = 0;\n     }\n \n     return 0;\n@@ -3211,13 +3211,19 @@ int ff_mpeg4_decode_picture_header(Mpeg4DecContext *ctx, GetBitContext *gb)\n         } else if (startcode == GOP_STARTCODE) {\n             mpeg4_decode_gop_header(s, gb);\n         } else if (startcode == VOS_STARTCODE) {\n-            mpeg4_decode_profile_level(s, gb);\n-            if (s->avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO &&\n-                (s->avctx->level > 0 && s->avctx->level < 9)) {\n+            int profile, level;\n+            mpeg4_decode_profile_level(s, gb, &profile, &level);\n+            if (profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO &&\n+                (level > 0 && level < 9)) {\n                 s->studio_profile = 1;\n                 next_start_code_studio(gb);\n                 extension_and_user_data(s, gb, 0);\n+            } else if (s->studio_profile) {\n+                avpriv_request_sample(s->avctx, \"Mixes studio and non studio profile\\n\");\n+                return AVERROR_PATCHWELCOME;\n             }\n+            s->avctx->profile = profile;\n+            s->avctx->level   = level;\n         } else if (startcode == VISUAL_OBJ_STARTCODE) {\n             if (s->studio_profile) {\n                 if ((ret = decode_studiovisualobject(ctx, gb)) < 0)\n@@ -3238,6 +3244,7 @@ int ff_mpeg4_decode_picture_header(Mpeg4DecContext *ctx, GetBitContext *gb)\n     s->avctx->has_b_frames = !s->low_delay;\n \n     if (s->studio_profile) {\n+        av_assert0(s->avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO);\n         if (!s->avctx->bits_per_raw_sample) {\n             av_log(s->avctx, AV_LOG_ERROR, \"Missing VOL header\\n\");\n             return AVERROR_INVALIDDATA;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8eb1d76e146a0e557d596a4039efebac746b4d83",
            "date": "2025-01-12T03:34:17Z",
            "author_login": "nuomi2021"
          },
          {
            "sha": "d5873be583ada9e1fb887e2fe8dcfd4b12e0efcd",
            "date": "2025-01-13T20:28:02Z",
            "author_login": "jamrial"
          },
          {
            "sha": "b88fc4e098607bed98c74e6d13ed77b907776685",
            "date": "2025-01-08T11:06:30Z",
            "author_login": "mypopydev"
          },
          {
            "sha": "8ded602edad43227aa5b84ac8041d4b174ec9431",
            "date": "2025-01-08T11:04:12Z",
            "author_login": "mypopydev"
          },
          {
            "sha": "851a84650ef6026871f3b565d1f54c9d7a5397a4",
            "date": "2025-01-07T04:56:11Z",
            "author_login": "cyanreg"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-476",
    "description": "In FFmpeg 4.0.1, due to a missing check of a profile value before setting it, the ff_mpeg4_decode_picture_header function in libavcodec/mpeg4videodec.c may trigger a NULL pointer dereference while converting a crafted AVI file to MPEG4, leading to a denial of service.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-07-05T17:29:00.373",
    "last_modified": "2024-11-21T03:46:47.867",
    "fix_date": "2018-06-27T17:37:09Z"
  },
  "references": [
    {
      "url": "http://www.securityfocus.com/bid/104675",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/FFmpeg/FFmpeg/commit/2aa9047486dbff12d9e040f917e5f799ed2fd78b",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "http://www.securityfocus.com/bid/104675",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/FFmpeg/FFmpeg/commit/2aa9047486dbff12d9e040f917e5f799ed2fd78b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:28.578826",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "FFmpeg",
    "owner": "FFmpeg",
    "created_at": "2011-04-14T14:12:38Z",
    "updated_at": "2025-01-14T12:22:35Z",
    "pushed_at": "2025-01-13T21:15:03Z",
    "size": 431834,
    "stars": 47243,
    "forks": 12316,
    "open_issues": 3,
    "watchers": 47243,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "release/0.5",
      "release/0.6",
      "release/0.7",
      "release/0.8",
      "release/0.9",
      "release/0.10",
      "release/0.11",
      "release/1.0",
      "release/1.1",
      "release/1.2",
      "release/2.0",
      "release/2.1",
      "release/2.2",
      "release/2.3",
      "release/2.4",
      "release/2.5",
      "release/2.6",
      "release/2.7",
      "release/2.8",
      "release/3.0",
      "release/3.1",
      "release/3.2",
      "release/3.3",
      "release/3.4",
      "release/4.0",
      "release/4.1",
      "release/4.2",
      "release/4.3"
    ],
    "languages": {
      "C": 65826781,
      "Assembly": 5688727,
      "Makefile": 948271,
      "C++": 141194,
      "Objective-C": 108023,
      "Cuda": 85420,
      "Shell": 59093,
      "Perl": 29093,
      "Metal": 7961,
      "Python": 5992,
      "Awk": 1912,
      "HTML": 1631,
      "Ruby": 1462,
      "Verilog": 729,
      "Roff": 132
    },
    "commit_activity": {
      "total_commits_last_year": 4412,
      "avg_commits_per_week": 84.84615384615384,
      "days_active_last_year": 353
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:03:32.126548"
  }
}