{
  "cve_id": "CVE-2018-16976",
  "github_data": {
    "repository": "sitaramc/gitolite",
    "fix_commit": "dc13dfca8fdae5634bb0865f7e9822d2a268ed59",
    "related_commits": [
      "dc13dfca8fdae5634bb0865f7e9822d2a268ed59",
      "dc13dfca8fdae5634bb0865f7e9822d2a268ed59"
    ],
    "patch_url": "https://github.com/sitaramc/gitolite/commit/dc13dfca8fdae5634bb0865f7e9822d2a268ed59.patch",
    "fix_commit_details": {
      "sha": "dc13dfca8fdae5634bb0865f7e9822d2a268ed59",
      "commit_date": "2018-09-08T10:08:41Z",
      "author": {
        "login": "sitaramc",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "prevent access to repos which are in the process of bring migrated",
        "length": 1247,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 27,
        "additions": 25,
        "deletions": 2
      },
      "files": [
        {
          "filename": "src/gitolite-shell",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -113,6 +113,13 @@ sub main {\n     $ENV{GL_REPO} = $repo;\n     my $aa = ( $verb =~ 'upload' ? 'R' : 'W' );\n \n+    # catch rare race when moving repos into gitolite control\n+    _die \"$aa any $repo $user DENIED by fallthru\" .\n+            \"\\n(or you mis-spelled the reponame)\"\n+        unless update_hook_present($repo);\n+    # this error message is exactly the same as that from elsewhere in the\n+    # code, for the usual reasons (avoid leaking information)\n+\n     # set up env vars from options set for this repo\n     env_options($repo);\n "
        },
        {
          "filename": "src/lib/Gitolite/Common.pm",
          "status": "modified",
          "additions": 18,
          "deletions": 2,
          "patch": "@@ -19,6 +19,8 @@ package Gitolite::Common;\n \n           ssh_fingerprint_file\n           ssh_fingerprint_line\n+\n+          update_hook_present\n );\n #>>>\n use Exporter 'import';\n@@ -235,14 +237,28 @@ sub cleanup_conf_line {\n             chomp($repo);\n             $repo =~ s/\\.git$//;\n             $repo =~ s(^\\./)();\n-            push @phy_repos, $repo unless $repo =~ m(/$);\n-                # tolerate bare repos within ~/repositories but silently ignore them\n+            next if $repo =~ m(/$);\n+                # tolerate non-bare repos within ~/repositories but silently ignore them\n+            next unless update_hook_present($repo);\n+                # ignore repos that don't yet have the update hook\n+            push @phy_repos, $repo;\n         }\n         trace( 3, scalar(@phy_repos) . \" physical repos found\" );\n         return sort_u( \\@phy_repos );\n     }\n }\n \n+sub update_hook_present {\n+    my $repo = shift;\n+\n+    return 1 unless -d \"$ENV{GL_REPO_BASE}/$repo.git\";  # non-existent repo is fine\n+\n+    my $x = readlink(\"$ENV{GL_REPO_BASE}/$repo.git/hooks/update\");\n+    return 1 if $x and $x eq \"$ENV{GL_ADMIN_BASE}/hooks/common/update\";\n+\n+    return 0;\n+}\n+\n # generate a timestamp\n sub gen_ts {\n     my ( $s, $min, $h, $d, $m, $y ) = (localtime)[ 0 .. 5 ];"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a546e5e8bdbb7069b995ca95fd20556157b0b439",
            "date": "2024-05-28T01:18:50Z",
            "author_login": "sitaramc"
          },
          {
            "sha": "6b05ce44c00b95adf22c3e794d38f7166b86b6d0",
            "date": "2024-05-12T20:15:09Z",
            "author_login": "robbat2"
          },
          {
            "sha": "badc0a6faeb44a91b3cc1bdb70ff001499369a6a",
            "date": "2024-03-18T13:46:18Z",
            "author_login": "sitaramc"
          },
          {
            "sha": "8f600d84e85421609d9db1c0311e8983542209f6",
            "date": "2023-11-03T01:19:59Z",
            "author_login": "sitaramc"
          },
          {
            "sha": "9d3d03d7b82e71e1bf4b9544876386b38f87f273",
            "date": "2023-07-14T03:02:24Z",
            "author_login": "sitaramc"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-362",
    "description": "Gitolite before 3.6.9 does not (in certain configurations involving @all or a regex) properly restrict access to a Git repository that is in the process of being migrated until the full set of migration steps has been completed. This can allow valid users to obtain unintended access.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-09-12T22:29:00.517",
    "last_modified": "2024-11-21T03:53:37.817",
    "fix_date": "2018-09-08T10:08:41Z"
  },
  "references": [
    {
      "url": "https://bugs.debian.org/908699",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sitaramc/gitolite/commit/dc13dfca8fdae5634bb0865f7e9822d2a268ed59",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://groups.google.com/forum/#%21topic/gitolite-announce/WrwDTYdbfRg",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://bugs.debian.org/908699",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sitaramc/gitolite/commit/dc13dfca8fdae5634bb0865f7e9822d2a268ed59",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://groups.google.com/forum/#%21topic/gitolite-announce/WrwDTYdbfRg",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:35.813031",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gitolite",
    "owner": "sitaramc",
    "created_at": "2009-08-24T00:53:39Z",
    "updated_at": "2025-01-14T06:19:50Z",
    "pushed_at": "2024-05-28T01:49:35Z",
    "size": 3154,
    "stars": 8427,
    "forks": 1004,
    "open_issues": 6,
    "watchers": 8427,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Perl": 550652,
      "Shell": 72122,
      "Vim Script": 5731
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T16:13:18.767246"
  }
}