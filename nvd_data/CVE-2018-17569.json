{
  "cve_id": "CVE-2018-17569",
  "github_data": {
    "repository": "viabtc/viabtc_exchange_server",
    "fix_commit": "4a7c27bfe98f409623d4d857894d017ff0672cc9",
    "related_commits": [
      "4a7c27bfe98f409623d4d857894d017ff0672cc9",
      "4a7c27bfe98f409623d4d857894d017ff0672cc9"
    ],
    "patch_url": "https://github.com/viabtc/viabtc_exchange_server/commit/4a7c27bfe98f409623d4d857894d017ff0672cc9.patch",
    "fix_commit_details": {
      "sha": "4a7c27bfe98f409623d4d857894d017ff0672cc9",
      "commit_date": "2018-08-21T06:50:19Z",
      "author": {
        "login": "haipome",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #131 from benjaminchodroff/master",
        "length": 101,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 25,
        "additions": 20,
        "deletions": 5
      },
      "files": [
        {
          "filename": "network/nw_buf.c",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -8,7 +8,9 @@\n # include \"nw_buf.h\"\n \n # define NW_BUF_POOL_INIT_SIZE 64\n+# define NW_BUF_POOL_MAX_SIZE  65535\n # define NW_CACHE_INIT_SIZE    64\n+# define NW_CACHE_MAX_SIZE     65535\n \n size_t nw_buf_size(nw_buf *buf)\n {\n@@ -85,7 +87,7 @@ void nw_buf_free(nw_buf_pool *pool, nw_buf *buf)\n {\n     if (pool->free < pool->free_total) {\n         pool->free_arr[pool->free++] = buf;\n-    } else {\n+    } else if (pool->free_total < NW_BUF_POOL_MAX_SIZE) {\n         uint32_t new_free_total = pool->free_total * 2;\n         void *new_arr = realloc(pool->free_arr, new_free_total * sizeof(nw_buf *));\n         if (new_arr) {\n@@ -95,6 +97,8 @@ void nw_buf_free(nw_buf_pool *pool, nw_buf *buf)\n         } else {\n             free(buf);\n         }\n+    } else {\n+        free(buf);\n     }\n }\n \n@@ -230,7 +234,7 @@ void nw_cache_free(nw_cache *cache, void *obj)\n {\n     if (cache->free < cache->free_total) {\n         cache->free_arr[cache->free++] = obj;\n-    } else {\n+    } else if (cache->free_total < NW_CACHE_MAX_SIZE) {\n         uint32_t new_free_total = cache->free_total * 2;\n         void *new_arr = realloc(cache->free_arr, new_free_total * sizeof(void *));\n         if (new_arr) {\n@@ -240,6 +244,8 @@ void nw_cache_free(nw_cache *cache, void *obj)\n         } else {\n             free(obj);\n         }\n+    } else {\n+        free(obj);\n     }\n }\n "
        },
        {
          "filename": "utils/ut_rpc.c",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -44,13 +44,19 @@ int rpc_pack(rpc_pkg *pkg, void **data, uint32_t *size)\n {\n     static void *send_buf;\n     static size_t send_buf_size;\n-    uint32_t pkg_size = RPC_PKG_HEAD_SIZE + pkg->ext_size + pkg->body_size;\n+    uint32_t pkg_size;\n+    if (pkg->body_size > RPC_PKG_MAX_BODY_SIZE) {\n+        return -1;\n+    }\n+    pkg_size = RPC_PKG_HEAD_SIZE + pkg->ext_size + pkg->body_size;\n     if (send_buf_size < pkg_size) {\n         if (send_buf)\n             free(send_buf);\n         send_buf_size = pkg_size * 2;\n         send_buf = malloc(send_buf_size);\n-        assert(send_buf != NULL);\n+        if (send_buf == NULL) {\n+            return -1;\n+        }\n     }\n \n     memcpy(send_buf, pkg, RPC_PKG_HEAD_SIZE);"
        },
        {
          "filename": "utils/ut_rpc.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -32,6 +32,7 @@ typedef struct rpc_pkg {\n # pragma pack()\n \n # define RPC_PKG_HEAD_SIZE (sizeof(rpc_pkg) - sizeof(void *) * 2)\n+# define RPC_PKG_MAX_BODY_SIZE ((UINT32_MAX / 2) - UINT16_MAX - sizeof(rpc_pkg))\n \n int rpc_decode(nw_ses *ses, void *data, size_t max);\n int rpc_pack(rpc_pkg *pkg, void **data, uint32_t *size);"
        },
        {
          "filename": "utils/ut_ws_svr.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -129,7 +129,7 @@ static int on_http_message_complete(http_parser* parser)\n     if (upgrade == NULL || strcasecmp(upgrade, \"websocket\") != 0)\n         goto error;\n     const char *connection = http_request_get_header(info->request, \"Connection\");\n-    if (connection == NULL)\n+    if (connection == NULL || strlen(connection) > UT_WS_SVR_MAX_HEADER_SIZE)\n         goto error;\n     else {\n         bool found_upgrade = false;"
        },
        {
          "filename": "utils/ut_ws_svr.h",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -12,6 +12,8 @@\n # include \"nw_buf.h\"\n # include \"nw_timer.h\"\n \n+# define UT_WS_SVR_MAX_HEADER_SIZE 1024\n+\n typedef struct ws_svr_cfg {\n     uint32_t bind_count;\n     nw_svr_bind *bind_arr;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2289c53f7d181b6c4ede1bd82edac6e1386d8434",
            "date": "2021-08-25T06:26:36Z",
            "author_login": "haipome"
          },
          {
            "sha": "ac6fd4fe042d597337ca8b79d4ce382ccf9b9e12",
            "date": "2021-03-13T14:57:24Z",
            "author_login": "haipome"
          },
          {
            "sha": "a49880e9c6612736fc48a3ec7b921148275f7acb",
            "date": "2020-12-16T06:17:41Z",
            "author_login": "haipome"
          },
          {
            "sha": "14aa09c0709d32e9edd2688f2b2b3092a5f8f291",
            "date": "2020-11-12T15:57:18Z",
            "author_login": "ceyonur"
          },
          {
            "sha": "edf421dda1e9761df72c3179ec95d26d1376c26d",
            "date": "2020-08-18T17:47:16Z",
            "author_login": "haipome"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-190",
    "description": "network/nw_buf.c in ViaBTC Exchange Server before 2018-08-21 has an integer overflow leading to memory corruption.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-09-26T22:29:02.527",
    "last_modified": "2024-11-21T03:54:37.557",
    "fix_date": "2018-08-21T06:50:19Z"
  },
  "references": [
    {
      "url": "https://github.com/viabtc/viabtc_exchange_server/commit/4a7c27bfe98f409623d4d857894d017ff0672cc9#diff-9fabc53ea796ec492aef432594298baa",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/viabtc/viabtc_exchange_server/pull/131",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/viabtc/viabtc_exchange_server/commit/4a7c27bfe98f409623d4d857894d017ff0672cc9#diff-9fabc53ea796ec492aef432594298baa",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/viabtc/viabtc_exchange_server/pull/131",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:35.838580",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "viabtc_exchange_server",
    "owner": "viabtc",
    "created_at": "2017-03-06T02:55:03Z",
    "updated_at": "2025-01-09T08:57:59Z",
    "pushed_at": "2021-12-17T13:16:42Z",
    "size": 778,
    "stars": 2693,
    "forks": 1491,
    "open_issues": 111,
    "watchers": 2693,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1056594,
      "Makefile": 10174,
      "C++": 5900,
      "Shell": 3272,
      "Python": 1793,
      "Pascal": 388
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:05:37.328972"
  }
}