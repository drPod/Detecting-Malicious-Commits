{
  "cve_id": "CVE-2018-18928",
  "github_data": {
    "repository": "unicode-org/icu",
    "fix_commit": "53d8c8f3d181d87a6aa925b449b51c4a2c922a51",
    "related_commits": [
      "53d8c8f3d181d87a6aa925b449b51c4a2c922a51",
      "53d8c8f3d181d87a6aa925b449b51c4a2c922a51"
    ],
    "patch_url": "https://github.com/unicode-org/icu/commit/53d8c8f3d181d87a6aa925b449b51c4a2c922a51.patch",
    "fix_commit_details": {
      "sha": "53d8c8f3d181d87a6aa925b449b51c4a2c922a51",
      "commit_date": "2018-10-30T06:52:44Z",
      "author": {
        "login": "sffc",
        "type": "User",
        "stats": {
          "total_commits": 1881,
          "average_weekly_commits": 1.419622641509434,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 194
        }
      },
      "commit_message": {
        "title": "ICU-20246 Fixing another integer overflow in number parsing.",
        "length": 60,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 35,
        "additions": 31,
        "deletions": 4
      },
      "files": [
        {
          "filename": "icu4c/source/i18n/fmtable.cpp",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -734,7 +734,7 @@ CharString *Formattable::internalGetCharString(UErrorCode &status) {\n       // not print scientific notation for magnitudes greater than -5 and smaller than some amount (+5?).\n       if (fDecimalQuantity->isZero()) {\n         fDecimalStr->append(\"0\", -1, status);\n-      } else if (std::abs(fDecimalQuantity->getMagnitude()) < 5) {\n+      } else if (fDecimalQuantity->getMagnitude() != INT32_MIN && std::abs(fDecimalQuantity->getMagnitude()) < 5) {\n         fDecimalStr->appendInvariantChars(fDecimalQuantity->toPlainString(), status);\n       } else {\n         fDecimalStr->appendInvariantChars(fDecimalQuantity->toScientificString(), status);"
        },
        {
          "filename": "icu4c/source/i18n/number_decimalquantity.cpp",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -898,7 +898,10 @@ UnicodeString DecimalQuantity::toScientificString() const {\n     }\n     result.append(u'E');\n     int32_t _scale = upperPos + scale;\n-    if (_scale < 0) {\n+    if (_scale == INT32_MIN) {\n+        result.append({u\"-2147483648\", -1});\n+        return result;\n+    } else if (_scale < 0) {\n         _scale *= -1;\n         result.append(u'-');\n     } else {"
        },
        {
          "filename": "icu4c/source/test/intltest/numfmtst.cpp",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -9226,6 +9226,14 @@ void NumberFormatTest::Test20037_ScientificIntegerOverflow() {\n     assertEquals(u\"Should not overflow and should parse only the first exponent\",\n                  u\"1E-2147483647\",\n                  {sp.data(), sp.length(), US_INV});\n+\n+    // Test edge case overflow of exponent\n+    result = Formattable();\n+    nf->parse(u\".0003e-2147483644\", result, status);\n+    sp = result.getDecimalNumber(status);\n+    assertEquals(u\"Should not overflow\",\n+                 u\"3E-2147483648\",\n+                 {sp.data(), sp.length(), US_INV});\n }\n \n void NumberFormatTest::Test13840_ParseLongStringCrash() {"
        },
        {
          "filename": "icu4j/main/classes/core/src/com/ibm/icu/impl/number/DecimalQuantity_AbstractBCD.java",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -1067,7 +1067,10 @@ public void toScientificString(StringBuilder result) {\n         }\n         result.append('E');\n         int _scale = upperPos + scale;\n-        if (_scale < 0) {\n+        if (_scale == Integer.MIN_VALUE) {\n+            result.append(\"-2147483648\");\n+            return;\n+        } else if (_scale < 0) {\n             _scale *= -1;\n             result.append('-');\n         } else {"
        },
        {
          "filename": "icu4j/main/classes/core/src/com/ibm/icu/impl/number/DecimalQuantity_DualStorageBCD.java",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -239,7 +239,15 @@ protected BigDecimal bcdToBigDecimal() {\n                 tempLong = tempLong * 10 + getDigitPos(shift);\n             }\n             BigDecimal result = BigDecimal.valueOf(tempLong);\n-            result = result.scaleByPowerOfTen(scale);\n+            try {\n+                result = result.scaleByPowerOfTen(scale);\n+            } catch (ArithmeticException e) {\n+                if (e.getMessage().contains(\"Underflow\")) {\n+                    result = BigDecimal.ZERO;\n+                } else {\n+                    throw e;\n+                }\n+            }\n             if (isNegative())\n                 result = result.negate();\n             return result;"
        },
        {
          "filename": "icu4j/main/tests/core/src/com/ibm/icu/dev/test/format/NumberFormatTest.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -6325,6 +6325,11 @@ public void Test20037_ScientificIntegerOverflow() throws ParseException {\n         result = nf.parse(\"1E-547483647\");\n         assertEquals(\"Should *not* snap to zero\",\n                 \"1E-547483647\", result.toString());\n+\n+        // Test edge case overflow of exponent\n+        result = nf.parse(\".0003e-2147483644\");\n+        assertEquals(\"Should not overflow\",\n+                \"0\", result.toString());\n     }\n \n     @Test"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 11
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f8aa68b0c1c9584633e7a61157185f1a2c275f58",
            "date": "2024-12-13T23:46:54Z",
            "author_login": "catamorphism"
          },
          {
            "sha": "bd50f8be32d37f8bcac72fa2a20bdf3228c1e75c",
            "date": "2025-01-09T00:32:11Z",
            "author_login": "FrankYFTang"
          },
          {
            "sha": "ba5cf31f770058ad1d3a3502de7a084a2cfd0862",
            "date": "2025-01-04T11:09:51Z",
            "author_login": "mihnita"
          },
          {
            "sha": "9eafd8ca3e61e9e92a8d23f8d107b90100bdf1df",
            "date": "2025-01-08T00:39:19Z",
            "author_login": "FrankYFTang"
          },
          {
            "sha": "6f93c07a45e7fb1944fa0179591b36413312d16e",
            "date": "2025-01-07T10:15:44Z",
            "author_login": "roubert"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-190",
    "description": "International Components for Unicode (ICU) for C/C++ 63.1 has an integer overflow in number::impl::DecimalQuantity::toScientificString() in i18n/number_decimalquantity.cpp.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-11-04T20:29:00.247",
    "last_modified": "2024-11-21T03:56:53.433",
    "fix_date": "2018-10-30T06:52:44Z"
  },
  "references": [
    {
      "url": "https://bugs.chromium.org/p/chromium/issues/detail?id=900059",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/unicode-org/icu/commit/53d8c8f3d181d87a6aa925b449b51c4a2c922a51",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://unicode-org.atlassian.net/browse/ICU-20246",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://bugs.chromium.org/p/chromium/issues/detail?id=900059",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/unicode-org/icu/commit/53d8c8f3d181d87a6aa925b449b51c4a2c922a51",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://unicode-org.atlassian.net/browse/ICU-20246",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:38.544997",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "icu",
    "owner": "unicode-org",
    "created_at": "2016-01-08T02:42:32Z",
    "updated_at": "2025-01-14T12:35:00Z",
    "pushed_at": "2025-01-10T04:36:43Z",
    "size": 2696390,
    "stars": 2902,
    "forks": 758,
    "open_issues": 86,
    "watchers": 2902,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C++": 27706934,
      "Java": 24382753,
      "C": 8740719,
      "Perl": 406005,
      "Makefile": 403750,
      "Python": 273977,
      "HTML": 271129,
      "Shell": 114769,
      "Roff": 64711,
      "M4": 63969,
      "XSLT": 57366,
      "Starlark": 35197,
      "CSS": 28181,
      "Batchfile": 24117,
      "PowerShell": 2897,
      "sed": 2695,
      "CMake": 2549,
      "Emacs Lisp": 809,
      "BitBake": 562
    },
    "commit_activity": {
      "total_commits_last_year": 573,
      "avg_commits_per_week": 11.01923076923077,
      "days_active_last_year": 205
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:38:38.207666"
  }
}