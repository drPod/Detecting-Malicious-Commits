{
  "cve_id": "CVE-2018-19048",
  "github_data": {
    "repository": "mycolorway/simditor",
    "fix_commit": "ef01a643cbb7f8163535d6bfb71135f80ec6a6fd",
    "related_commits": [
      "ef01a643cbb7f8163535d6bfb71135f80ec6a6fd",
      "ef01a643cbb7f8163535d6bfb71135f80ec6a6fd"
    ],
    "patch_url": "https://github.com/mycolorway/simditor/commit/ef01a643cbb7f8163535d6bfb71135f80ec6a6fd.patch",
    "fix_commit_details": {
      "sha": "ef01a643cbb7f8163535d6bfb71135f80ec6a6fd",
      "commit_date": "2018-11-09T06:29:45Z",
      "author": {
        "login": "farthinker",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "ADD: DOMPurify for preventing xss attacks",
        "length": 41,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 3646,
        "additions": 2695,
        "deletions": 951
      },
      "files": [
        {
          "filename": ".bowerrc",
          "status": "removed",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -1,3 +0,0 @@\n-{\n-\t\"directory\": \"vendor/bower\"\n-}"
        },
        {
          "filename": "Gruntfile.coffee",
          "status": "modified",
          "additions": 23,
          "deletions": 16,
          "patch": "@@ -88,18 +88,18 @@ module.exports = (grunt) ->\n         objectToExport: 'Simditor'\n         globalAlias: 'Simditor'\n         deps:\n-          'default': ['$', 'SimpleModule', 'simpleHotkeys', 'simpleUploader']\n-          amd: ['jquery', 'simple-module', 'simple-hotkeys', 'simple-uploader']\n-          cjs: ['jquery', 'simple-module', 'simple-hotkeys', 'simple-uploader']\n+          'default': ['$', 'SimpleModule', 'simpleHotkeys', 'simpleUploader', 'DOMPurify']\n+          amd: ['jquery', 'simple-module', 'simple-hotkeys', 'simple-uploader', 'dompurify']\n+          cjs: ['jquery', 'simple-module', 'simple-hotkeys', 'simple-uploader', 'dompurify']\n           global:\n-            items: ['jQuery', 'SimpleModule', 'simple.hotkeys', 'simple.uploader']\n+            items: ['jQuery', 'SimpleModule', 'simple.hotkeys', 'simple.uploader', 'window.DOMPurify']\n             prefix: ''\n             suffix: ''\n \n     copy:\n       vendor:\n         files: [{\n-          src: 'vendor/bower/jquery/dist/jquery.min.js',\n+          src: 'node_modules/jquery/dist/jquery.min.js',\n           dest: 'site/assets/scripts/jquery.min.js'\n         }]\n       styles:\n@@ -109,14 +109,17 @@ module.exports = (grunt) ->\n         }]\n       scripts:\n         files: [{\n-          src: 'vendor/bower/simple-module/lib/module.js',\n+          src: 'node_modules/simple-module/lib/module.js',\n           dest: 'site/assets/scripts/module.js'\n         }, {\n-          src: 'vendor/bower/simple-uploader/lib/uploader.js',\n+          src: 'node_modules/simple-uploader/lib/uploader.js',\n           dest: 'site/assets/scripts/uploader.js'\n         }, {\n-          src: 'vendor/bower/simple-hotkeys/lib/hotkeys.js',\n+          src: 'node_modules/simple-hotkeys/lib/hotkeys.js',\n           dest: 'site/assets/scripts/hotkeys.js'\n+        }, {\n+          src: 'node_modules/dompurify/dist/purify.js',\n+          dest: 'site/assets/scripts/dompurify.js'\n         }, {\n           src: 'lib/simditor.js',\n           dest: 'site/assets/scripts/simditor.js'\n@@ -129,17 +132,20 @@ module.exports = (grunt) ->\n           src: 'lib/*',\n           dest: 'package/scripts/'\n         }, {\n-          src: 'vendor/bower/jquery/dist/jquery.min.js',\n+          src: 'node_modules/jquery/dist/jquery.min.js',\n           dest: 'package/scripts/jquery.min.js'\n         }, {\n-          src: 'vendor/bower/simple-module/lib/module.js',\n+          src: 'node_modules/simple-module/lib/module.js',\n           dest: 'package/scripts/module.js'\n         }, {\n-          src: 'vendor/bower/simple-uploader/lib/uploader.js',\n+          src: 'node_modules/simple-uploader/lib/uploader.js',\n           dest: 'package/scripts/uploader.js'\n         }, {\n-          src: 'vendor/bower/simple-hotkeys/lib/hotkeys.js',\n+          src: 'node_modules/simple-hotkeys/lib/hotkeys.js',\n           dest: 'package/scripts/hotkeys.js'\n+        }, {\n+          src: 'node_modules/dompurify/dist/purify.js',\n+          dest: 'package/scripts/dompurify.js'\n         }, {\n           expand: true,\n           flatten: true\n@@ -234,10 +240,11 @@ module.exports = (grunt) ->\n             'spec/buttons/*.js'\n           ]\n           vendor: [\n-            'vendor/bower/jquery/dist/jquery.min.js'\n-            'vendor/bower/simple-module/lib/module.js'\n-            'vendor/bower/simple-uploader/lib/uploader.js'\n-            'vendor/bower/simple-hotkeys/lib/hotkeys.js'\n+            'node_modules/jquery/dist/jquery.min.js'\n+            'node_modules/simple-module/lib/module.js'\n+            'node_modules/simple-uploader/lib/uploader.js'\n+            'node_modules/simple-hotkeys/lib/hotkeys.js'\n+            'node_modules/dompurify/dist/purify.js'\n           ]\n \n     curl:"
        },
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -9,6 +9,5 @@ It is used by [Tower](http://tower.im) -- a popular project management web appli\n Supported Browsers: IE10+\u3001Chrome\u3001Firefox\u3001Safari.\n * [Download Zip](https://github.com/mycolorway/simditor/releases)\n * Install with npm: $ npm install simditor</li>\n-* Install with bower: $ bower install simditor</li>\n \n Demo and docs can be found [here](http://simditor.tower.im/)."
        },
        {
          "filename": "bower.json",
          "status": "removed",
          "additions": 0,
          "deletions": 40,
          "patch": "@@ -1,40 +0,0 @@\n-{\n-  \"name\": \"simditor\",\n-  \"version\": \"2.3.21\",\n-  \"homepage\": \"http://simditor.tower.im/\",\n-  \"authors\": [\n-    \"farthinker <farthinker@gmail.com>\"\n-  ],\n-  \"description\": \"A simple online editor\",\n-  \"main\": [\n-    \"lib/simditor.js\",\n-    \"styles/simditor.css\"\n-  ],\n-  \"keywords\": [\n-    \"editor\"\n-  ],\n-  \"license\": \"MIT\",\n-  \"ignore\": [\n-    \"**/.*\",\n-    \"spec\",\n-    \"node_modules\",\n-    \"vendor\",\n-    \"site\",\n-    \"_config.yml\",\n-    \"Gemfile\",\n-    \"Gemfile.lock\",\n-    \"Gruntfile.coffee\",\n-    \"package.json\",\n-    \"server.js\",\n-    \"README.md\",\n-    \"umd.hbs\"\n-  ],\n-  \"devDependencies\": {\n-  },\n-  \"dependencies\": {\n-    \"jquery\": \"~2.1.4\",\n-    \"simple-hotkeys\": \"~1.0.3\",\n-    \"simple-uploader\": \"~2.0.7\",\n-    \"simple-module\": \"~2.0.6\"\n-  }\n-}"
        },
        {
          "filename": "circle.yml",
          "status": "removed",
          "additions": 0,
          "deletions": 7,
          "patch": "@@ -1,7 +0,0 @@\n-dependencies:\n-  pre:\n-    - npm install -g bower\n-    - bower install\n-machine:\n-  ruby:\n-    version: 2.3.1"
        },
        {
          "filename": "lib/simditor.js",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -1,23 +1,23 @@\n /*!\n * Simditor v2.3.21\n * http://simditor.tower.im/\n-* 2018-10-17\n+* 2018-11-09\n */\n (function (root, factory) {\n   if (typeof define === 'function' && define.amd) {\n     // AMD. Register as an anonymous module unless amdModuleId is set\n-    define('simditor', [\"jquery\",\"simple-module\",\"simple-hotkeys\",\"simple-uploader\"], function ($, SimpleModule, simpleHotkeys, simpleUploader) {\n-      return (root['Simditor'] = factory($, SimpleModule, simpleHotkeys, simpleUploader));\n+    define('simditor', [\"jquery\",\"simple-module\",\"simple-hotkeys\",\"simple-uploader\",\"dompurify\"], function ($, SimpleModule, simpleHotkeys, simpleUploader, DOMPurify) {\n+      return (root['Simditor'] = factory($, SimpleModule, simpleHotkeys, simpleUploader, DOMPurify));\n     });\n   } else if (typeof exports === 'object') {\n     // Node. Does not work with strict CommonJS, but\n     // only CommonJS-like environments that support module.exports,\n     // like Node.\n-    module.exports = factory(require(\"jquery\"),require(\"simple-module\"),require(\"simple-hotkeys\"),require(\"simple-uploader\"));\n+    module.exports = factory(require(\"jquery\"),require(\"simple-module\"),require(\"simple-hotkeys\"),require(\"simple-uploader\"),require(\"dompurify\"));\n   } else {\n-    root['Simditor'] = factory(jQuery,SimpleModule,simple.hotkeys,simple.uploader);\n+    root['Simditor'] = factory(jQuery,SimpleModule,simple.hotkeys,simple.uploader,window.DOMPurify);\n   }\n-}(this, function ($, SimpleModule, simpleHotkeys, simpleUploader) {\n+}(this, function ($, SimpleModule, simpleHotkeys, simpleUploader, DOMPurify) {\n \n var AlignmentButton, BlockquoteButton, BoldButton, Button, Clipboard, CodeButton, CodePopover, ColorButton, FontScaleButton, Formatter, HrButton, ImageButton, ImagePopover, IndentButton, Indentation, InputManager, ItalicButton, Keystroke, LinkButton, LinkPopover, ListButton, OrderListButton, OutdentButton, Popover, Selection, Simditor, StrikethroughButton, TableButton, TitleButton, Toolbar, UnderlineButton, UndoManager, UnorderListButton, Util,\n   extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n@@ -2342,7 +2342,7 @@ Clipboard = (function(superClass) {\n       return function() {\n         var pasteContent;\n         _this.editor.hidePopover();\n-        _this.editor.body.get(0).innerHTML = state.html;\n+        _this.editor.body.get(0).innerHTML = DOMPurify ? DOMPurify.sanitize(state.html) : state.html;\n         _this.editor.undoManager.caretPosition(state.caret);\n         _this.editor.body.focus();\n         _this.editor.selection.reset();\n@@ -2649,7 +2649,7 @@ Simditor = (function(superClass) {\n   Simditor.prototype.setValue = function(val) {\n     this.hidePopover();\n     this.textarea.val(val);\n-    this.body.get(0).innerHTML = val;\n+    this.body.get(0).innerHTML = DOMPurify ? DOMPurify.sanitize(val) : val;\n     this.formatter.format();\n     this.formatter.decorate();\n     this.util.reflow(this.body);"
        },
        {
          "filename": "package-lock.json",
          "status": "modified",
          "additions": 1544,
          "deletions": 822,
          "patch": null
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 15,
          "deletions": 13,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"simditor\",\n-  \"version\": \"2.3.21\",\n+  \"version\": \"2.3.22\",\n   \"description\": \"A simple online editor\",\n   \"keywords\": \"editor simditor\",\n   \"repository\": {\n@@ -23,26 +23,28 @@\n   ],\n   \"homepage\": \"http://simditor.tower.im\",\n   \"dependencies\": {\n+    \"dompurify\": \"^1.0.8\",\n     \"jquery\": \"~2.1.4\",\n     \"simple-hotkeys\": \"~1.0.3\",\n-    \"simple-uploader\": \"~2.0.7\",\n-    \"simple-module\": \"~2.0.6\"\n+    \"simple-module\": \"~2.0.6\",\n+    \"simple-uploader\": \"~2.0.7\"\n   },\n   \"devDependencies\": {\n+    \"express\": \"~3.3.4\",\n     \"grunt\": \"0.x\",\n-    \"grunt-contrib-sass\": \"0.x\",\n-    \"grunt-contrib-watch\": \"0.x\",\n+    \"grunt-banner\": \"0.3.x\",\n+    \"grunt-contrib-clean\": \"0.x\",\n     \"grunt-contrib-coffee\": \"0.x\",\n-    \"grunt-contrib-copy\": \"0.x\",\n-    \"grunt-contrib-uglify\": \"0.x\",\n     \"grunt-contrib-compress\": \"0.x\",\n-    \"grunt-contrib-clean\": \"0.x\",\n+    \"grunt-contrib-copy\": \"0.x\",\n     \"grunt-contrib-jasmine\": \"0.x\",\n-    \"grunt-jekyll\": \"0.x\",\n-    \"grunt-umd\": \"2.3.x\",\n-    \"grunt-express\": \"1.4.0\",\n-    \"grunt-banner\": \"0.3.x\",\n+    \"grunt-contrib-sass\": \"0.x\",\n+    \"grunt-contrib-uglify\": \"0.x\",\n+    \"grunt-contrib-watch\": \"0.x\",\n     \"grunt-curl\": \"2.1.x\",\n-    \"express\": \"~3.3.4\"\n+    \"grunt-express\": \"1.4.0\",\n+    \"grunt-jekyll\": \"0.x\",\n+    \"grunt-parallel\": \"^0.5.1\",\n+    \"grunt-umd\": \"2.3.x\"\n   }\n }"
        },
        {
          "filename": "site/assets/scripts/dompurify.js",
          "status": "added",
          "additions": 1017,
          "deletions": 0,
          "patch": "@@ -0,0 +1,1017 @@\n+(function (global, factory) {\n+\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n+\ttypeof define === 'function' && define.amd ? define(factory) :\n+\t(global.DOMPurify = factory());\n+}(this, (function () { 'use strict';\n+\n+var html = ['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr'];\n+\n+// SVG\n+var svg = ['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'audio', 'canvas', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'video', 'view', 'vkern'];\n+\n+var svgFilters = ['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence'];\n+\n+var mathMl = ['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmuliscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mpspace', 'msqrt', 'mystyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover'];\n+\n+var text = ['#text'];\n+\n+var html$1 = ['accept', 'action', 'align', 'alt', 'autocomplete', 'background', 'bgcolor', 'border', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'coords', 'crossorigin', 'datetime', 'default', 'dir', 'disabled', 'download', 'enctype', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'integrity', 'ismap', 'label', 'lang', 'list', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'multiple', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns'];\n+\n+var svg$1 = ['accent-height', 'accumulate', 'additivive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan'];\n+\n+var mathMl$1 = ['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns'];\n+\n+var xml = ['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink'];\n+\n+/* Add properties to a lookup table */\n+function addToSet(set, array) {\n+  var l = array.length;\n+  while (l--) {\n+    if (typeof array[l] === 'string') {\n+      array[l] = array[l].toLowerCase();\n+    }\n+    set[array[l]] = true;\n+  }\n+  return set;\n+}\n+\n+/* Shallow clone an object */\n+function clone(object) {\n+  var newObject = {};\n+  var property = void 0;\n+  for (property in object) {\n+    if (Object.prototype.hasOwnProperty.call(object, property)) {\n+      newObject[property] = object[property];\n+    }\n+  }\n+  return newObject;\n+}\n+\n+var MUSTACHE_EXPR = /\\{\\{[\\s\\S]*|[\\s\\S]*\\}\\}/gm; // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n+var ERB_EXPR = /<%[\\s\\S]*|[\\s\\S]*%>/gm;\n+var DATA_ATTR = /^data-[\\-\\w.\\u00B7-\\uFFFF]/; // eslint-disable-line no-useless-escape\n+var ARIA_ATTR = /^aria-[\\-\\w]+$/; // eslint-disable-line no-useless-escape\n+var IS_ALLOWED_URI = /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i; // eslint-disable-line no-useless-escape\n+var IS_SCRIPT_OR_DATA = /^(?:\\w+script|data):/i;\n+var ATTR_WHITESPACE = /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g; // eslint-disable-line no-control-regex\n+\n+var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n+\n+function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n+\n+var getGlobal = function getGlobal() {\n+  return typeof window === 'undefined' ? null : window;\n+};\n+\n+function createDOMPurify() {\n+  var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n+\n+  var DOMPurify = function DOMPurify(root) {\n+    return createDOMPurify(root);\n+  };\n+\n+  /**\n+   * Version label, exposed for easier checks\n+   * if DOMPurify is up to date or not\n+   */\n+  DOMPurify.version = '1.0.8';\n+\n+  /**\n+   * Array of elements that DOMPurify removed during sanitation.\n+   * Empty if nothing was removed.\n+   */\n+  DOMPurify.removed = [];\n+\n+  if (!window || !window.document || window.document.nodeType !== 9) {\n+    // Not running in a browser, provide a factory function\n+    // so that you can pass your own Window\n+    DOMPurify.isSupported = false;\n+\n+    return DOMPurify;\n+  }\n+\n+  var originalDocument = window.document;\n+  var useDOMParser = false; // See comment below\n+  var removeTitle = false; // See comment below\n+\n+  var document = window.document;\n+  var DocumentFragment = window.DocumentFragment,\n+      HTMLTemplateElement = window.HTMLTemplateElement,\n+      Node = window.Node,\n+      NodeFilter = window.NodeFilter,\n+      _window$NamedNodeMap = window.NamedNodeMap,\n+      NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,\n+      Text = window.Text,\n+      Comment = window.Comment,\n+      DOMParser = window.DOMParser;\n+\n+  // As per issue #47, the web-components registry is inherited by a\n+  // new document created via createHTMLDocument. As per the spec\n+  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n+  // a new empty registry is used when creating a template contents owner\n+  // document, so we use that as our parent document to ensure nothing\n+  // is inherited.\n+\n+  if (typeof HTMLTemplateElement === 'function') {\n+    var template = document.createElement('template');\n+    if (template.content && template.content.ownerDocument) {\n+      document = template.content.ownerDocument;\n+    }\n+  }\n+\n+  var _document = document,\n+      implementation = _document.implementation,\n+      createNodeIterator = _document.createNodeIterator,\n+      getElementsByTagName = _document.getElementsByTagName,\n+      createDocumentFragment = _document.createDocumentFragment;\n+  var importNode = originalDocument.importNode;\n+\n+\n+  var hooks = {};\n+\n+  /**\n+   * Expose whether this browser supports running the full DOMPurify.\n+   */\n+  DOMPurify.isSupported = implementation && typeof implementation.createHTMLDocument !== 'undefined' && document.documentMode !== 9;\n+\n+  var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,\n+      ERB_EXPR$$1 = ERB_EXPR,\n+      DATA_ATTR$$1 = DATA_ATTR,\n+      ARIA_ATTR$$1 = ARIA_ATTR,\n+      IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,\n+      ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;\n+  var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;\n+  /**\n+   * We consider the elements and attributes below to be safe. Ideally\n+   * don't add any new ones but feel free to remove unwanted ones.\n+   */\n+\n+  /* allowed element names */\n+\n+  var ALLOWED_TAGS = null;\n+  var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(svgFilters), _toConsumableArray(mathMl), _toConsumableArray(text)));\n+\n+  /* Allowed attribute names */\n+  var ALLOWED_ATTR = null;\n+  var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(mathMl$1), _toConsumableArray(xml)));\n+\n+  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n+  var FORBID_TAGS = null;\n+\n+  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n+  var FORBID_ATTR = null;\n+\n+  /* Decide if ARIA attributes are okay */\n+  var ALLOW_ARIA_ATTR = true;\n+\n+  /* Decide if custom data attributes are okay */\n+  var ALLOW_DATA_ATTR = true;\n+\n+  /* Decide if unknown protocols are okay */\n+  var ALLOW_UNKNOWN_PROTOCOLS = false;\n+\n+  /* Output should be safe for jQuery's $() factory? */\n+  var SAFE_FOR_JQUERY = false;\n+\n+  /* Output should be safe for common template engines.\n+   * This means, DOMPurify removes data attributes, mustaches and ERB\n+   */\n+  var SAFE_FOR_TEMPLATES = false;\n+\n+  /* Decide if document with <html>... should be returned */\n+  var WHOLE_DOCUMENT = false;\n+\n+  /* Track whether config is already set on this instance of DOMPurify. */\n+  var SET_CONFIG = false;\n+\n+  /* Decide if all elements (e.g. style, script) must be children of\n+   * document.body. By default, browsers might move them to document.head */\n+  var FORCE_BODY = false;\n+\n+  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html string.\n+   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n+   */\n+  var RETURN_DOM = false;\n+\n+  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html string */\n+  var RETURN_DOM_FRAGMENT = false;\n+\n+  /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM\n+   * `Node` is imported into the current `Document`. If this flag is not enabled the\n+   * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by\n+   * DOMPurify. */\n+  var RETURN_DOM_IMPORT = false;\n+\n+  /* Output should be free from DOM clobbering attacks? */\n+  var SANITIZE_DOM = true;\n+\n+  /* Keep element content when removing element? */\n+  var KEEP_CONTENT = true;\n+\n+  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n+   * of importing it into a new Document and returning a sanitized copy */\n+  var IN_PLACE = false;\n+\n+  /* Allow usage of profiles like html, svg and mathMl */\n+  var USE_PROFILES = {};\n+\n+  /* Tags to ignore content of when KEEP_CONTENT is true */\n+  var FORBID_CONTENTS = addToSet({}, ['audio', 'head', 'math', 'script', 'style', 'template', 'svg', 'video']);\n+\n+  /* Tags that are safe for data: URIs */\n+  var DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image']);\n+\n+  /* Attributes safe for values like \"javascript:\" */\n+  var URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);\n+\n+  /* Keep a reference to config to pass to hooks */\n+  var CONFIG = null;\n+\n+  /* Ideally, do not touch anything below this line */\n+  /* ______________________________________________ */\n+\n+  var formElement = document.createElement('form');\n+\n+  /**\n+   * _parseConfig\n+   *\n+   * @param  {Object} cfg optional config literal\n+   */\n+  // eslint-disable-next-line complexity\n+  var _parseConfig = function _parseConfig(cfg) {\n+    /* Shield configuration object from tampering */\n+    if ((typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {\n+      cfg = {};\n+    }\n+    /* Set configuration parameters */\n+    ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;\n+    ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;\n+    FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};\n+    FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};\n+    USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n+    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n+    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n+    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n+    SAFE_FOR_JQUERY = cfg.SAFE_FOR_JQUERY || false; // Default false\n+    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n+    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n+    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n+    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n+    RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT || false; // Default false\n+    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n+    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n+    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n+    IN_PLACE = cfg.IN_PLACE || false; // Default false\n+\n+    IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;\n+\n+    if (SAFE_FOR_TEMPLATES) {\n+      ALLOW_DATA_ATTR = false;\n+    }\n+\n+    if (RETURN_DOM_FRAGMENT) {\n+      RETURN_DOM = true;\n+    }\n+\n+    /* Parse profile info */\n+    if (USE_PROFILES) {\n+      ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(text)));\n+      ALLOWED_ATTR = [];\n+      if (USE_PROFILES.html === true) {\n+        addToSet(ALLOWED_TAGS, html);\n+        addToSet(ALLOWED_ATTR, html$1);\n+      }\n+      if (USE_PROFILES.svg === true) {\n+        addToSet(ALLOWED_TAGS, svg);\n+        addToSet(ALLOWED_ATTR, svg$1);\n+        addToSet(ALLOWED_ATTR, xml);\n+      }\n+      if (USE_PROFILES.svgFilters === true) {\n+        addToSet(ALLOWED_TAGS, svgFilters);\n+        addToSet(ALLOWED_ATTR, svg$1);\n+        addToSet(ALLOWED_ATTR, xml);\n+      }\n+      if (USE_PROFILES.mathMl === true) {\n+        addToSet(ALLOWED_TAGS, mathMl);\n+        addToSet(ALLOWED_ATTR, mathMl$1);\n+        addToSet(ALLOWED_ATTR, xml);\n+      }\n+    }\n+\n+    /* Merge configuration parameters */\n+    if (cfg.ADD_TAGS) {\n+      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n+        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n+      }\n+      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\n+    }\n+    if (cfg.ADD_ATTR) {\n+      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n+        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n+      }\n+      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\n+    }\n+    if (cfg.ADD_URI_SAFE_ATTR) {\n+      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);\n+    }\n+\n+    /* Add #text in case KEEP_CONTENT is set to true */\n+    if (KEEP_CONTENT) {\n+      ALLOWED_TAGS['#text'] = true;\n+    }\n+\n+    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n+    if (WHOLE_DOCUMENT) {\n+      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n+    }\n+\n+    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286 */\n+    if (ALLOWED_TAGS.table) {\n+      addToSet(ALLOWED_TAGS, ['tbody']);\n+    }\n+\n+    // Prevent further manipulation of configuration.\n+    // Not available in IE8, Safari 5, etc.\n+    if (Object && 'freeze' in Object) {\n+      Object.freeze(cfg);\n+    }\n+\n+    CONFIG = cfg;\n+  };\n+\n+  /**\n+   * _forceRemove\n+   *\n+   * @param  {Node} node a DOM node\n+   */\n+  var _forceRemove = function _forceRemove(node) {\n+    DOMPurify.removed.push({ element: node });\n+    try {\n+      node.parentNode.removeChild(node);\n+    } catch (err) {\n+      node.outerHTML = '';\n+    }\n+  };\n+\n+  /**\n+   * _removeAttribute\n+   *\n+   * @param  {String} name an Attribute name\n+   * @param  {Node} node a DOM node\n+   */\n+  var _removeAttribute = function _removeAttribute(name, node) {\n+    try {\n+      DOMPurify.removed.push({\n+        attribute: node.getAttributeNode(name),\n+        from: node\n+      });\n+    } catch (err) {\n+      DOMPurify.removed.push({\n+        attribute: null,\n+        from: node\n+      });\n+    }\n+    node.removeAttribute(name);\n+  };\n+\n+  /**\n+   * _initDocument\n+   *\n+   * @param  {String} dirty a string of dirty markup\n+   * @return {Document} a DOM, filled with the dirty markup\n+   */\n+  var _initDocument = function _initDocument(dirty) {\n+    /* Create a HTML document */\n+    var doc = void 0;\n+\n+    if (FORCE_BODY) {\n+      dirty = '<remove></remove>' + dirty;\n+    }\n+\n+    /* Use DOMParser to workaround Firefox bug (see comment below) */\n+    if (useDOMParser) {\n+      try {\n+        doc = new DOMParser().parseFromString(dirty, 'text/html');\n+      } catch (err) {}\n+    }\n+\n+    /* Remove title to fix an mXSS bug in older MS Edge */\n+    if (removeTitle) {\n+      addToSet(FORBID_TAGS, ['title']);\n+    }\n+\n+    /* Otherwise use createHTMLDocument, because DOMParser is unsafe in\n+    Safari (see comment below) */\n+    if (!doc || !doc.documentElement) {\n+      doc = implementation.createHTMLDocument('');\n+      var _doc = doc,\n+          body = _doc.body;\n+\n+      body.parentNode.removeChild(body.parentNode.firstElementChild);\n+      body.outerHTML = dirty;\n+    }\n+\n+    /* Work on whole document or just its body */\n+    return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n+  };\n+\n+  // Firefox uses a different parser for innerHTML rather than\n+  // DOMParser (see https://bugzilla.mozilla.org/show_bug.cgi?id=1205631)\n+  // which means that you *must* use DOMParser, otherwise the output may\n+  // not be safe if used in a document.write context later.\n+  //\n+  // So we feature detect the Firefox bug and use the DOMParser if necessary.\n+  //\n+  // MS Edge, in older versions, is affected by an mXSS behavior. The second\n+  // check tests for the behavior and fixes it if necessary.\n+  if (DOMPurify.isSupported) {\n+    (function () {\n+      try {\n+        var doc = _initDocument('<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">');\n+        if (doc.querySelector('svg img')) {\n+          useDOMParser = true;\n+        }\n+      } catch (err) {}\n+    })();\n+    (function () {\n+      try {\n+        var doc = _initDocument('<x/><title>&lt;/title&gt;&lt;img&gt;');\n+        if (doc.querySelector('title').textContent.match(/<\\/title/)) {\n+          removeTitle = true;\n+        }\n+      } catch (err) {}\n+    })();\n+  }\n+\n+  /**\n+   * _createIterator\n+   *\n+   * @param  {Document} root document/fragment to create iterator for\n+   * @return {Iterator} iterator instance\n+   */\n+  var _createIterator = function _createIterator(root) {\n+    return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {\n+      return NodeFilter.FILTER_ACCEPT;\n+    }, false);\n+  };\n+\n+  /**\n+   * _isClobbered\n+   *\n+   * @param  {Node} elm element to check for clobbering attacks\n+   * @return {Boolean} true if clobbered, false if safe\n+   */\n+  var _isClobbered = function _isClobbered(elm) {\n+    if (elm instanceof Text || elm instanceof Comment) {\n+      return false;\n+    }\n+    if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function') {\n+      return true;\n+    }\n+    return false;\n+  };\n+\n+  /**\n+   * _isNode\n+   *\n+   * @param  {Node} obj object to check whether it's a DOM node\n+   * @return {Boolean} true is object is a DOM node\n+   */\n+  var _isNode = function _isNode(obj) {\n+    return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? obj instanceof Node : obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';\n+  };\n+\n+  /**\n+   * _executeHook\n+   * Execute user configurable hooks\n+   *\n+   * @param  {String} entryPoint  Name of the hook's entry point\n+   * @param  {Node} currentNode node to work on with the hook\n+   * @param  {Object} data additional hook parameters\n+   */\n+  var _executeHook = function _executeHook(entryPoint, currentNode, data) {\n+    if (!hooks[entryPoint]) {\n+      return;\n+    }\n+\n+    hooks[entryPoint].forEach(function (hook) {\n+      hook.call(DOMPurify, currentNode, data, CONFIG);\n+    });\n+  };\n+\n+  /**\n+   * _sanitizeElements\n+   *\n+   * @protect nodeName\n+   * @protect textContent\n+   * @protect removeChild\n+   *\n+   * @param   {Node} currentNode to check for permission to exist\n+   * @return  {Boolean} true if node was killed, false if left alive\n+   */\n+  var _sanitizeElements = function _sanitizeElements(currentNode) {\n+    var content = void 0;\n+\n+    /* Execute a hook if present */\n+    _executeHook('beforeSanitizeElements', currentNode, null);\n+\n+    /* Check if element is clobbered or can clobber */\n+    if (_isClobbered(currentNode)) {\n+      _forceRemove(currentNode);\n+      return true;\n+    }\n+\n+    /* Now let's check the element's type and name */\n+    var tagName = currentNode.nodeName.toLowerCase();\n+\n+    /* Execute a hook if present */\n+    _executeHook('uponSanitizeElement', currentNode, {\n+      tagName: tagName,\n+      allowedTags: ALLOWED_TAGS\n+    });\n+\n+    /* Remove element if anything forbids its presence */\n+    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n+      /* Keep content except for black-listed elements */\n+      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName] && typeof currentNode.insertAdjacentHTML === 'function') {\n+        try {\n+          currentNode.insertAdjacentHTML('AfterEnd', currentNode.innerHTML);\n+        } catch (err) {}\n+      }\n+      _forceRemove(currentNode);\n+      return true;\n+    }\n+\n+    /* Convert markup to cover jQuery behavior */\n+    if (SAFE_FOR_JQUERY && !currentNode.firstElementChild && (!currentNode.content || !currentNode.content.firstElementChild) && /</g.test(currentNode.textContent)) {\n+      DOMPurify.removed.push({ element: currentNode.cloneNode() });\n+      if (currentNode.innerHTML) {\n+        currentNode.innerHTML = currentNode.innerHTML.replace(/</g, '&lt;');\n+      } else {\n+        currentNode.innerHTML = currentNode.textContent.replace(/</g, '&lt;');\n+      }\n+    }\n+\n+    /* Sanitize element content to be template-safe */\n+    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n+      /* Get the element's text content */\n+      content = currentNode.textContent;\n+      content = content.replace(MUSTACHE_EXPR$$1, ' ');\n+      content = content.replace(ERB_EXPR$$1, ' ');\n+      if (currentNode.textContent !== content) {\n+        DOMPurify.removed.push({ element: currentNode.cloneNode() });\n+        currentNode.textContent = content;\n+      }\n+    }\n+\n+    /* Execute a hook if present */\n+    _executeHook('afterSanitizeElements', currentNode, null);\n+\n+    return false;\n+  };\n+\n+  /**\n+   * _isValidAttribute\n+   *\n+   * @param  {string} lcTag Lowercase tag name of containing element.\n+   * @param  {string} lcName Lowercase attribute name.\n+   * @param  {string} value Attribute value.\n+   * @return {Boolean} Returns true if `value` is valid, otherwise false.\n+   */\n+  var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n+    /* Make sure attribute cannot clobber */\n+    if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n+      return false;\n+    }\n+\n+    /* Sanitize attribute content to be template-safe */\n+    if (SAFE_FOR_TEMPLATES) {\n+      value = value.replace(MUSTACHE_EXPR$$1, ' ');\n+      value = value.replace(ERB_EXPR$$1, ' ');\n+    }\n+\n+    /* Allow valid data-* attributes: At least one character after \"-\"\n+        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n+        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n+        We don't need to check the value; it's always URI safe. */\n+    if (ALLOW_DATA_ATTR && DATA_ATTR$$1.test(lcName)) {\n+      // This attribute is safe\n+    } else if (ALLOW_ARIA_ATTR && ARIA_ATTR$$1.test(lcName)) {\n+      // This attribute is safe\n+      /* Otherwise, check the name is permitted */\n+    } else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n+      return false;\n+\n+      /* Check value is safe. First, is attr inert? If so, is safe */\n+    } else if (URI_SAFE_ATTRIBUTES[lcName]) {\n+      // This attribute is safe\n+      /* Check no script, data or unknown possibly unsafe URI\n+        unless we know URI values are safe for that attribute */\n+    } else if (IS_ALLOWED_URI$$1.test(value.replace(ATTR_WHITESPACE$$1, ''))) {\n+      // This attribute is safe\n+      /* Keep image data URIs alive if src/xlink:href is allowed */\n+      /* Further prevent gadget XSS for dynamically built script tags */\n+    } else if ((lcName === 'src' || lcName === 'xlink:href') && lcTag !== 'script' && value.indexOf('data:') === 0 && DATA_URI_TAGS[lcTag]) {\n+      // This attribute is safe\n+      /* Allow unknown protocols: This provides support for links that\n+        are handled by protocol handlers which may be unknown ahead of\n+        time, e.g. fb:, spotify: */\n+    } else if (ALLOW_UNKNOWN_PROTOCOLS && !IS_SCRIPT_OR_DATA$$1.test(value.replace(ATTR_WHITESPACE$$1, ''))) {\n+      // This attribute is safe\n+      /* Check for binary attributes */\n+      // eslint-disable-next-line no-negated-condition\n+    } else if (!value) {\n+      // Binary attributes are safe at this point\n+      /* Anything else, presume unsafe, do not add it back */\n+    } else {\n+      return false;\n+    }\n+    return true;\n+  };\n+\n+  /**\n+   * _sanitizeAttributes\n+   *\n+   * @protect attributes\n+   * @protect nodeName\n+   * @protect removeAttribute\n+   * @protect setAttribute\n+   *\n+   * @param  {Node} node to sanitize\n+   */\n+  // eslint-disable-next-line complexity\n+  var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n+    var attr = void 0;\n+    var value = void 0;\n+    var lcName = void 0;\n+    var idAttr = void 0;\n+    var l = void 0;\n+    /* Execute a hook if present */\n+    _executeHook('beforeSanitizeAttributes', currentNode, null);\n+\n+    var attributes = currentNode.attributes;\n+\n+    /* Check if we have attributes; if not we might have a text node */\n+\n+    if (!attributes) {\n+      return;\n+    }\n+\n+    var hookEvent = {\n+      attrName: '',\n+      attrValue: '',\n+      keepAttr: true,\n+      allowedAttributes: ALLOWED_ATTR\n+    };\n+    l = attributes.length;\n+\n+    /* Go backwards over all attributes; safely remove bad ones */\n+    while (l--) {\n+      attr = attributes[l];\n+      var _attr = attr,\n+          name = _attr.name,\n+          namespaceURI = _attr.namespaceURI;\n+\n+      value = attr.value.trim();\n+      lcName = name.toLowerCase();\n+\n+      /* Execute a hook if present */\n+      hookEvent.attrName = lcName;\n+      hookEvent.attrValue = value;\n+      hookEvent.keepAttr = true;\n+      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n+      value = hookEvent.attrValue;\n+\n+      /* Remove attribute */\n+      // Safari (iOS + Mac), last tested v8.0.5, crashes if you try to\n+      // remove a \"name\" attribute from an <img> tag that has an \"id\"\n+      // attribute at the time.\n+      if (lcName === 'name' && currentNode.nodeName === 'IMG' && attributes.id) {\n+        idAttr = attributes.id;\n+        attributes = Array.prototype.slice.apply(attributes);\n+        _removeAttribute('id', currentNode);\n+        _removeAttribute(name, currentNode);\n+        if (attributes.indexOf(idAttr) > l) {\n+          currentNode.setAttribute('id', idAttr.value);\n+        }\n+      } else if (\n+      // This works around a bug in Safari, where input[type=file]\n+      // cannot be dynamically set after type has been removed\n+      currentNode.nodeName === 'INPUT' && lcName === 'type' && value === 'file' && (ALLOWED_ATTR[lcName] || !FORBID_ATTR[lcName])) {\n+        continue;\n+      } else {\n+        // This avoids a crash in Safari v9.0 with double-ids.\n+        // The trick is to first set the id to be empty and then to\n+        // remove the attribute\n+        if (name === 'id') {\n+          currentNode.setAttribute(name, '');\n+        }\n+        _removeAttribute(name, currentNode);\n+      }\n+\n+      /* Did the hooks approve of the attribute? */\n+      if (!hookEvent.keepAttr) {\n+        continue;\n+      }\n+\n+      /* Is `value` valid for this attribute? */\n+      var lcTag = currentNode.nodeName.toLowerCase();\n+      if (!_isValidAttribute(lcTag, lcName, value)) {\n+        continue;\n+      }\n+\n+      /* Handle invalid data-* attribute set by try-catching it */\n+      try {\n+        if (namespaceURI) {\n+          currentNode.setAttributeNS(namespaceURI, name, value);\n+        } else {\n+          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n+          currentNode.setAttribute(name, value);\n+        }\n+        DOMPurify.removed.pop();\n+      } catch (err) {}\n+    }\n+\n+    /* Execute a hook if present */\n+    _executeHook('afterSanitizeAttributes', currentNode, null);\n+  };\n+\n+  /**\n+   * _sanitizeShadowDOM\n+   *\n+   * @param  {DocumentFragment} fragment to iterate over recursively\n+   */\n+  var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n+    var shadowNode = void 0;\n+    var shadowIterator = _createIterator(fragment);\n+\n+    /* Execute a hook if present */\n+    _executeHook('beforeSanitizeShadowDOM', fragment, null);\n+\n+    while (shadowNode = shadowIterator.nextNode()) {\n+      /* Execute a hook if present */\n+      _executeHook('uponSanitizeShadowNode', shadowNode, null);\n+\n+      /* Sanitize tags and elements */\n+      if (_sanitizeElements(shadowNode)) {\n+        continue;\n+      }\n+\n+      /* Deep shadow DOM detected */\n+      if (shadowNode.content instanceof DocumentFragment) {\n+        _sanitizeShadowDOM(shadowNode.content);\n+      }\n+\n+      /* Check attributes, sanitize if necessary */\n+      _sanitizeAttributes(shadowNode);\n+    }\n+\n+    /* Execute a hook if present */\n+    _executeHook('afterSanitizeShadowDOM', fragment, null);\n+  };\n+\n+  /**\n+   * Sanitize\n+   * Public method providing core sanitation functionality\n+   *\n+   * @param {String|Node} dirty string or DOM node\n+   * @param {Object} configuration object\n+   */\n+  // eslint-disable-next-line complexity\n+  DOMPurify.sanitize = function (dirty, cfg) {\n+    var body = void 0;\n+    var importedNode = void 0;\n+    var currentNode = void 0;\n+    var oldNode = void 0;\n+    var returnNode = void 0;\n+    /* Make sure we have a string to sanitize.\n+      DO NOT return early, as this will return the wrong type if\n+      the user has requested a DOM object rather than a string */\n+    if (!dirty) {\n+      dirty = '<!-->';\n+    }\n+\n+    /* Stringify, in case dirty is an object */\n+    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n+      // eslint-disable-next-line no-negated-condition\n+      if (typeof dirty.toString !== 'function') {\n+        throw new TypeError('toString is not a function');\n+      } else {\n+        dirty = dirty.toString();\n+        if (typeof dirty !== 'string') {\n+          throw new TypeError('dirty is not a string, aborting');\n+        }\n+      }\n+    }\n+\n+    /* Check we can run. Otherwise fall back or ignore */\n+    if (!DOMPurify.isSupported) {\n+      if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {\n+        if (typeof dirty === 'string') {\n+          return window.toStaticHTML(dirty);\n+        }\n+        if (_isNode(dirty)) {\n+          return window.toStaticHTML(dirty.outerHTML);\n+        }\n+      }\n+      return dirty;\n+    }\n+\n+    /* Assign config vars */\n+    if (!SET_CONFIG) {\n+      _parseConfig(cfg);\n+    }\n+\n+    /* Clean up removed elements */\n+    DOMPurify.removed = [];\n+\n+    if (IN_PLACE) {\n+      /* No special handling necessary for in-place sanitization */\n+    } else if (dirty instanceof Node) {\n+      /* If dirty is a DOM element, append to an empty document to avoid\n+         elements being stripped by the parser */\n+      body = _initDocument('<!-->');\n+      importedNode = body.ownerDocument.importNode(dirty, true);\n+      if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n+        /* Node is already a body, use as is */\n+        body = importedNode;\n+      } else {\n+        body.appendChild(importedNode);\n+      }\n+    } else {\n+      /* Exit directly if we have nothing to do */\n+      if (!RETURN_DOM && !WHOLE_DOCUMENT && dirty.indexOf('<') === -1) {\n+        return dirty;\n+      }\n+\n+      /* Initialize the document to work on */\n+      body = _initDocument(dirty);\n+\n+      /* Check we have a DOM node from the data */\n+      if (!body) {\n+        return RETURN_DOM ? null : '';\n+      }\n+    }\n+\n+    /* Remove first element node (ours) if FORCE_BODY is set */\n+    if (body && FORCE_BODY) {\n+      _forceRemove(body.firstChild);\n+    }\n+\n+    /* Get node iterator */\n+    var nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n+\n+    /* Now start iterating over the created document */\n+    while (currentNode = nodeIterator.nextNode()) {\n+      /* Fix IE's strange behavior with manipulated textNodes #89 */\n+      if (currentNode.nodeType === 3 && currentNode === oldNode) {\n+        continue;\n+      }\n+\n+      /* Sanitize tags and elements */\n+      if (_sanitizeElements(currentNode)) {\n+        continue;\n+      }\n+\n+      /* Shadow DOM detected, sanitize it */\n+      if (currentNode.content instanceof DocumentFragment) {\n+        _sanitizeShadowDOM(currentNode.content);\n+      }\n+\n+      /* Check attributes, sanitize if necessary */\n+      _sanitizeAttributes(currentNode);\n+\n+      oldNode = currentNode;\n+    }\n+\n+    /* If we sanitized `dirty` in-place, return it. */\n+    if (IN_PLACE) {\n+      return dirty;\n+    }\n+\n+    /* Return sanitized string or DOM */\n+    if (RETURN_DOM) {\n+      if (RETURN_DOM_FRAGMENT) {\n+        returnNode = createDocumentFragment.call(body.ownerDocument);\n+\n+        while (body.firstChild) {\n+          returnNode.appendChild(body.firstChild);\n+        }\n+      } else {\n+        returnNode = body;\n+      }\n+\n+      if (RETURN_DOM_IMPORT) {\n+        /* AdoptNode() is not used because internal state is not reset\n+               (e.g. the past names map of a HTMLFormElement), this is safe\n+               in theory but we would rather not risk another attack vector.\n+               The state that is cloned by importNode() is explicitly defined\n+               by the specs. */\n+        returnNode = importNode.call(originalDocument, returnNode, true);\n+      }\n+\n+      return returnNode;\n+    }\n+\n+    return WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n+  };\n+\n+  /**\n+   * Public method to set the configuration once\n+   * setConfig\n+   *\n+   * @param {Object} cfg configuration object\n+   */\n+  DOMPurify.setConfig = function (cfg) {\n+    _parseConfig(cfg);\n+    SET_CONFIG = true;\n+  };\n+\n+  /**\n+   * Public method to remove the configuration\n+   * clearConfig\n+   *\n+   */\n+  DOMPurify.clearConfig = function () {\n+    CONFIG = null;\n+    SET_CONFIG = false;\n+  };\n+\n+  /**\n+   * Public method to check if an attribute value is valid.\n+   * Uses last set config, if any. Otherwise, uses config defaults.\n+   * isValidAttribute\n+   *\n+   * @param  {string} tag Tag name of containing element.\n+   * @param  {string} attr Attribute name.\n+   * @param  {string} value Attribute value.\n+   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n+   */\n+  DOMPurify.isValidAttribute = function (tag, attr, value) {\n+    /* Initialize shared config vars if necessary. */\n+    if (!CONFIG) {\n+      _parseConfig({});\n+    }\n+    var lcTag = tag.toLowerCase();\n+    var lcName = attr.toLowerCase();\n+    return _isValidAttribute(lcTag, lcName, value);\n+  };\n+\n+  /**\n+   * AddHook\n+   * Public method to add DOMPurify hooks\n+   *\n+   * @param {String} entryPoint entry point for the hook to add\n+   * @param {Function} hookFunction function to execute\n+   */\n+  DOMPurify.addHook = function (entryPoint, hookFunction) {\n+    if (typeof hookFunction !== 'function') {\n+      return;\n+    }\n+    hooks[entryPoint] = hooks[entryPoint] || [];\n+    hooks[entryPoint].push(hookFunction);\n+  };\n+\n+  /**\n+   * RemoveHook\n+   * Public method to remove a DOMPurify hook at a given entryPoint\n+   * (pops it from the stack of hooks if more are present)\n+   *\n+   * @param {String} entryPoint entry point for the hook to remove\n+   */\n+  DOMPurify.removeHook = function (entryPoint) {\n+    if (hooks[entryPoint]) {\n+      hooks[entryPoint].pop();\n+    }\n+  };\n+\n+  /**\n+   * RemoveHooks\n+   * Public method to remove all DOMPurify hooks at a given entryPoint\n+   *\n+   * @param  {String} entryPoint entry point for the hooks to remove\n+   */\n+  DOMPurify.removeHooks = function (entryPoint) {\n+    if (hooks[entryPoint]) {\n+      hooks[entryPoint] = [];\n+    }\n+  };\n+\n+  /**\n+   * RemoveAllHooks\n+   * Public method to remove all DOMPurify hooks\n+   *\n+   */\n+  DOMPurify.removeAllHooks = function () {\n+    hooks = {};\n+  };\n+\n+  return DOMPurify;\n+}\n+\n+var purify = createDOMPurify();\n+\n+return purify;\n+\n+})));\n+//# sourceMappingURL=purify.js.map"
        },
        {
          "filename": "site/assets/scripts/simditor.js",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -1,18 +1,18 @@\n (function (root, factory) {\n   if (typeof define === 'function' && define.amd) {\n     // AMD. Register as an anonymous module unless amdModuleId is set\n-    define('simditor', [\"jquery\",\"simple-module\",\"simple-hotkeys\",\"simple-uploader\"], function ($, SimpleModule, simpleHotkeys, simpleUploader) {\n-      return (root['Simditor'] = factory($, SimpleModule, simpleHotkeys, simpleUploader));\n+    define('simditor', [\"jquery\",\"simple-module\",\"simple-hotkeys\",\"simple-uploader\",\"dompurify\"], function ($, SimpleModule, simpleHotkeys, simpleUploader, DOMPurify) {\n+      return (root['Simditor'] = factory($, SimpleModule, simpleHotkeys, simpleUploader, DOMPurify));\n     });\n   } else if (typeof exports === 'object') {\n     // Node. Does not work with strict CommonJS, but\n     // only CommonJS-like environments that support module.exports,\n     // like Node.\n-    module.exports = factory(require(\"jquery\"),require(\"simple-module\"),require(\"simple-hotkeys\"),require(\"simple-uploader\"));\n+    module.exports = factory(require(\"jquery\"),require(\"simple-module\"),require(\"simple-hotkeys\"),require(\"simple-uploader\"),require(\"dompurify\"));\n   } else {\n-    root['Simditor'] = factory(jQuery,SimpleModule,simple.hotkeys,simple.uploader);\n+    root['Simditor'] = factory(jQuery,SimpleModule,simple.hotkeys,simple.uploader,window.DOMPurify);\n   }\n-}(this, function ($, SimpleModule, simpleHotkeys, simpleUploader) {\n+}(this, function ($, SimpleModule, simpleHotkeys, simpleUploader, DOMPurify) {\n \n var AlignmentButton, BlockquoteButton, BoldButton, Button, Clipboard, CodeButton, CodePopover, ColorButton, FontScaleButton, Formatter, HrButton, ImageButton, ImagePopover, IndentButton, Indentation, InputManager, ItalicButton, Keystroke, LinkButton, LinkPopover, ListButton, OrderListButton, OutdentButton, Popover, Selection, Simditor, StrikethroughButton, TableButton, TitleButton, Toolbar, UnderlineButton, UndoManager, UnorderListButton, Util,\n   extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n@@ -2337,7 +2337,7 @@ Clipboard = (function(superClass) {\n       return function() {\n         var pasteContent;\n         _this.editor.hidePopover();\n-        _this.editor.body.get(0).innerHTML = state.html;\n+        _this.editor.body.get(0).innerHTML = DOMPurify ? DOMPurify.sanitize(state.html) : state.html;\n         _this.editor.undoManager.caretPosition(state.caret);\n         _this.editor.body.focus();\n         _this.editor.selection.reset();\n@@ -2644,7 +2644,7 @@ Simditor = (function(superClass) {\n   Simditor.prototype.setValue = function(val) {\n     this.hidePopover();\n     this.textarea.val(val);\n-    this.body.get(0).innerHTML = val;\n+    this.body.get(0).innerHTML = DOMPurify ? DOMPurify.sanitize(val) : val;\n     this.formatter.format();\n     this.formatter.decorate();\n     this.util.reflow(this.body);"
        },
        {
          "filename": "site/assets/scripts/uploader.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -44,7 +44,7 @@ Uploader = (function(superClass) {\n         _this.files.splice($.inArray(file, _this.files), 1);\n         if (_this.queue.length > 0 && _this.files.length < _this.opts.connectionCount) {\n           return _this.upload(_this.queue.shift());\n-        } else {\n+        } else if (_this.files.length === 0) {\n           return _this.uploading = false;\n         }\n       };"
        },
        {
          "filename": "site/demo.html",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -13,5 +13,6 @@\n <script type=\"text/javascript\" src=\"assets/scripts/module.js\"></script>\n <script type=\"text/javascript\" src=\"assets/scripts/uploader.js\"></script>\n <script type=\"text/javascript\" src=\"assets/scripts/hotkeys.js\"></script>\n+<script type=\"text/javascript\" src=\"assets/scripts/dompurify.js\"></script>\n <script type=\"text/javascript\" src=\"assets/scripts/simditor.js\"></script>\n <script type=\"text/javascript\" src=\"assets/scripts/page-demo.js\"></script>"
        },
        {
          "filename": "site/docs/doc-dev-env.md",
          "status": "modified",
          "additions": 3,
          "deletions": 21,
          "patch": "@@ -40,7 +40,7 @@ $ bundle install\n ```\n \n \n-#Install Grunt\n+#Install Dependencies\n \n Simditor uses [Grunt](http://gruntjs.com/) as the task runner to run tasks such as auto-compiling and watching files.\n \n@@ -52,30 +52,12 @@ Install Grunt's command line interface (CLI) globally:\n $ sudo npm install -g grunt-cli\n ```\n \n-Install grunt:\n+Install grunt and other dependencies:\n \n ```bash\n-$ npm install\n+$ npm i\n ```\n \n-\n-#Install Bower Dependencies\n-\n-Simditor uses [Bower](http://bower.io/) to manage front-end libraries:\n-\n-Install bower\uff1a\n-\n-```bash\n-npm install -g bower\n-```\n-\n-Install bower dependencies:\n-\n-```bash\n-bower install\n-```\n-\n-\n #Run Project\n \n Run project with grunt:"
        },
        {
          "filename": "site/docs/doc-usage.md",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -7,10 +7,9 @@ root: ../\n \n #Download\n \n-Click [Here](https://github.com/mycolorway/simditor/releases) to download the zip file. You can also install Simditor by bower and npm :\n+Click [Here](https://github.com/mycolorway/simditor/releases) to download the zip file. You can also install Simditor npm:\n \n-* `$ npm install simditor`\n-* `$ bower install simditor`\n+`$ npm install simditor`\n \n \n Import files below into your web application\n@@ -22,13 +21,15 @@ Import files below into your web application\n <script type=\"text/javascript\" src=\"[script path]/module.js\"></script>\n <script type=\"text/javascript\" src=\"[script path]/hotkeys.js\"></script>\n <script type=\"text/javascript\" src=\"[script path]/uploader.js\"></script>\n+<script type=\"text/javascript\" src=\"[script path]/dompurify.js\"></script>\n <script type=\"text/javascript\" src=\"[script path]/simditor.js\"></script>\n ```\n Note that\n \n * Simditor is based on [jQuery](http://jquery.com) and [module.js](https://github.com/mycolorway/simple-module).\n * [hotkeys.js](https://github.com/mycolorway/simple-hotkeys) is used to bind hotkeys.\n * [uploader.js](https://github.com/mycolorway/simple-uploader) is related to uploading files. You don't need to import this file if you don't want the uploading feature.\n+* [dompurify.js](https://github.com/cure53/DOMPurify) is used to purify html tags for preventing xss attacks.\n \n #Using Simditor in your project\n \n@@ -75,4 +76,4 @@ Want some special interactions and features? have a look at [extension library](\n Sample extensions:\n \n * a feature extension: [simditor-autosave](https://github.com/mycolorway/simditor-autosave)\n-* a button extension: [simditor-mark](https://github.com/mycolorway/simditor-mark)\n\\ No newline at end of file\n+* a button extension: [simditor-mark](https://github.com/mycolorway/simditor-mark)"
        },
        {
          "filename": "site/index.html",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -12,13 +12,13 @@\n <ul>\n   <li><a href=\"https://github.com/mycolorway/simditor/releases\" target=\"_blank\" class=\"\">Download Zip</a></li>\n   <li>Install with npm: $ npm install simditor</li>\n-  <li>Install with bower: $ bower install simditor</li>\n </ul>\n </textarea>\n </section>\n \n <script type=\"text/javascript\" src=\"assets/scripts/module.js\"></script>\n <script type=\"text/javascript\" src=\"assets/scripts/uploader.js\"></script>\n <script type=\"text/javascript\" src=\"assets/scripts/hotkeys.js\"></script>\n+<script type=\"text/javascript\" src=\"assets/scripts/dompurify.js\"></script>\n <script type=\"text/javascript\" src=\"assets/scripts/simditor.js\"></script>\n <script type=\"text/javascript\" src=\"assets/scripts/page-demo.js\"></script>"
        },
        {
          "filename": "spec/index.html",
          "status": "added",
          "additions": 63,
          "deletions": 0,
          "patch": "@@ -0,0 +1,63 @@\n+<!doctype html>\n+<html>\n+<head>\n+  <meta charset=\"utf-8\">\n+  <title>Jasmine Spec Runner</title>\n+  <link rel=\"shortcut icon\" type=\"image/png\" href=\".grunt/grunt-contrib-jasmine/jasmine_favicon.png\">\n+\n+  <link rel=\"stylesheet\" type=\"text/css\" href=\"../.grunt/grunt-contrib-jasmine/jasmine.css\">\n+\n+  <link rel=\"stylesheet\" type=\"text/css\" href=\"../styles/simditor.css\">\n+\n+\n+</head>\n+<body>\n+\n+  \n+  <script src=\"../.grunt/grunt-contrib-jasmine/es5-shim.js\"></script>\n+  \n+  <script src=\"../.grunt/grunt-contrib-jasmine/jasmine.js\"></script>\n+  \n+  <script src=\"../.grunt/grunt-contrib-jasmine/jasmine-html.js\"></script>\n+  \n+  <script src=\"../.grunt/grunt-contrib-jasmine/json2.js\"></script>\n+  \n+  <script src=\"../.grunt/grunt-contrib-jasmine/boot.js\"></script>\n+  \n+  <script src=\"../node_modules/jquery/dist/jquery.min.js\"></script>\n+  \n+  <script src=\"../node_modules/simple-module/lib/module.js\"></script>\n+  \n+  <script src=\"../node_modules/simple-uploader/lib/uploader.js\"></script>\n+  \n+  <script src=\"../node_modules/simple-hotkeys/lib/hotkeys.js\"></script>\n+  \n+  <script src=\"../node_modules/dompurify/dist/purify.js\"></script>\n+  \n+  <script src=\"../lib/simditor.js\"></script>\n+  \n+  <script src=\"core-spec.js\"></script>\n+  \n+  <script src=\"formatter-spec.js\"></script>\n+  \n+  <script src=\"indentation-spec.js\"></script>\n+  \n+  <script src=\"util.js\"></script>\n+  \n+  <script src=\"buttons/alignment-spec.js\"></script>\n+  \n+  <script src=\"buttons/bold-spec.js\"></script>\n+  \n+  <script src=\"buttons/code-spec.js\"></script>\n+  \n+  <script src=\"buttons/font-scale-spec.js\"></script>\n+  \n+  <script src=\"buttons/table-spec.js\"></script>\n+  \n+  <script src=\"buttons/title-spec.js\"></script>\n+  \n+  <script src=\"../.grunt/grunt-contrib-jasmine/reporter.js\"></script>\n+  \n+\n+</body>\n+</html>"
        },
        {
          "filename": "src/clipboard.coffee",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -79,7 +79,7 @@ class Clipboard extends SimpleModule\n \n     setTimeout =>\n       @editor.hidePopover()\n-      @editor.body.get(0).innerHTML = state.html\n+      @editor.body.get(0).innerHTML = if DOMPurify then DOMPurify.sanitize(state.html) else state.html\n       @editor.undoManager.caretPosition state.caret\n       @editor.body.focus()\n       @editor.selection.reset()\n@@ -112,7 +112,7 @@ class Clipboard extends SimpleModule\n \n     if !pasteContent\n       return\n-    \n+\n     if @_pastePlainText\n       if $blockEl.is('table')\n         lines = pasteContent.split('\\n')\n@@ -216,7 +216,7 @@ class Clipboard extends SimpleModule\n     $node = $(node)\n     return unless $node.length > 0\n \n-    sizeMap = [ \n+    sizeMap = [\n       '1.5em'\n       '1.25em'\n       '0.75em'"
        },
        {
          "filename": "src/core.coffee",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -115,7 +115,7 @@ class Simditor extends SimpleModule\n   setValue: (val) ->\n     @hidePopover()\n     @textarea.val val\n-    @body.get(0).innerHTML = val\n+    @body.get(0).innerHTML = if DOMPurify then DOMPurify.sanitize(val) else val\n \n     @formatter.format()\n     @formatter.decorate()"
        },
        {
          "filename": "src/formatter.coffee",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -162,7 +162,7 @@ class Formatter extends SimpleModule\n             $node.removeAttr(attr.name)\n \n         @_cleanNodeStyles $node\n-        \n+\n         if $node.is('span')\n           if $node[0].attributes.length == 0\n             $node.contents().first().unwrap()\n@@ -214,7 +214,7 @@ class Formatter extends SimpleModule\n \n       if pair[0] == 'font-size' and pair[1].indexOf('px') > 0\n         continue if parseInt(pair[1], 10) < 12\n-      \n+\n       styles[$.trim(pair[0])] = $.trim(pair[1]) if pair[0] in allowedStyles\n \n     $node.css styles if Object.keys(styles).length > 0"
        },
        {
          "filename": "styles/simditor.css",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,7 +1,7 @@\n /*!\n * Simditor v2.3.21\n * http://simditor.tower.im/\n-* 2018-10-17\n+* 2018-11-09\n */\n @font-face {\n   font-family: 'Simditor';"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 4,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 8,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3d318c01e4b5a78c70f219959be2b5653c6eb78d",
            "date": "2024-02-25T03:52:28Z",
            "author_login": "seandong"
          },
          {
            "sha": "4eb1259270b4270c24ce6486f54fe717a8bbdc1f",
            "date": "2019-08-15T06:17:21Z",
            "author_login": "farthinker"
          },
          {
            "sha": "9e992fbeda5d1e9f8bd428e95cff2350a64b3491",
            "date": "2019-07-30T07:14:55Z",
            "author_login": "farthinker"
          },
          {
            "sha": "88b3e80f7cd2b1ed0680f498804b8d0829accee7",
            "date": "2019-07-22T10:53:08Z",
            "author_login": "farthinker"
          },
          {
            "sha": "2d002a1eb01947a638dd6ee4e5000b03142cc31b",
            "date": "2019-07-22T10:44:20Z",
            "author_login": "farthinker"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "Simditor through 2.3.21 allows DOM XSS via an onload attribute within a malformed SVG element.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2019-05-13T14:29:00.957",
    "last_modified": "2024-11-21T03:57:13.550",
    "fix_date": "2018-11-09T06:29:45Z"
  },
  "references": [
    {
      "url": "https://github.com/hkglue/simditor_demo.git",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hkglue/simditor_dom_xss/blob/master/README.md",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mycolorway/simditor/commit/ef01a643cbb7f8163535d6bfb71135f80ec6a6fd",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mycolorway/simditor/releases/tag/v2.3.22",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hkglue/simditor_demo.git",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hkglue/simditor_dom_xss/blob/master/README.md",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mycolorway/simditor/commit/ef01a643cbb7f8163535d6bfb71135f80ec6a6fd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mycolorway/simditor/releases/tag/v2.3.22",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:50.471982",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "simditor",
    "owner": "mycolorway",
    "created_at": "2014-01-10T03:54:08Z",
    "updated_at": "2025-01-10T09:52:20Z",
    "pushed_at": "2024-02-25T03:52:36Z",
    "size": 6146,
    "stars": 5024,
    "forks": 799,
    "open_issues": 32,
    "watchers": 5024,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 404672,
      "CoffeeScript": 154179,
      "CSS": 75724,
      "SCSS": 36766,
      "HTML": 8998,
      "Handlebars": 770,
      "Ruby": 67
    },
    "commit_activity": {
      "total_commits_last_year": 1,
      "avg_commits_per_week": 0.019230769230769232,
      "days_active_last_year": 1
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:57.644038"
  }
}