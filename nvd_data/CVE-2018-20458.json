{
  "cve_id": "CVE-2018-20458",
  "github_data": {
    "repository": "radareorg/radare2",
    "fix_commit": "30f4c7b52a4e2dc0d0b1bae487d90f5437c69d19",
    "related_commits": [
      "30f4c7b52a4e2dc0d0b1bae487d90f5437c69d19",
      "30f4c7b52a4e2dc0d0b1bae487d90f5437c69d19"
    ],
    "patch_url": "https://github.com/radareorg/radare2/commit/30f4c7b52a4e2dc0d0b1bae487d90f5437c69d19.patch",
    "fix_commit_details": {
      "sha": "30f4c7b52a4e2dc0d0b1bae487d90f5437c69d19",
      "commit_date": "2018-12-03T01:03:00Z",
      "author": {
        "login": "radare",
        "type": "User",
        "stats": {
          "total_commits": 16353,
          "average_weekly_commits": 19.631452581032413,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 785
        }
      },
      "commit_message": {
        "title": "Fix #12374 - oobread crash in truncated dyldcache ##bin (#12381)",
        "length": 64,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 47,
        "additions": 35,
        "deletions": 12
      },
      "files": [
        {
          "filename": "libr/bin/format/mach0/dyldcache.c",
          "status": "modified",
          "additions": 35,
          "deletions": 12,
          "patch": "@@ -1,4 +1,4 @@\n-/* radare - LGPL - Copyright 2010-2016 - nibble, pancake  */\n+/* radare - LGPL - Copyright 2010-2018 - nibble, pancake  */\n \n #include <stdio.h>\n #include <r_types.h>\n@@ -21,6 +21,23 @@ static int r_bin_dyldcache_apply_patch (struct r_buf_t* buf, ut32 data, ut64 off\n \n #define NZ_OFFSET(x) if((x) > 0) r_bin_dyldcache_apply_patch (dbuf, (x) - linkedit_offset, (ut64)((size_t)&(x) - (size_t)data))\n \n+// make it public in util/buf.c ?\n+static ut64 r_buf_read64le (RBuffer *buf, ut64 off) {\n+\tut8 data[8] = {0};\n+\tr_buf_read_at (buf, off, data, 8);\n+\treturn r_read_le64 (data);\n+}\n+\n+static char *r_buf_read_string (RBuffer *buf, ut64 addr, int len) {\n+\tut8 *data = malloc (len);\n+\tif (data) {\n+\t\tr_buf_read_at (buf, addr, data, len);\n+\t\tdata[len-1] = 0;\n+\t\treturn data;\n+\t}\n+\treturn NULL;\n+}\n+\n /* TODO: Needs more testing and ERROR HANDLING */\n struct r_bin_dyldcache_lib_t *r_bin_dyldcache_extract(struct r_bin_dyldcache_obj_t* bin, int idx, int *nlib) {\n \tut64 liboff, linkedit_offset;\n@@ -47,34 +64,41 @@ struct r_bin_dyldcache_lib_t *r_bin_dyldcache_extract(struct r_bin_dyldcache_obj\n \t*nlib = bin->nlibs;\n \tret = R_NEW0 (struct r_bin_dyldcache_lib_t);\n \tif (!ret) {\n-\t\tperror (\"malloc (ret)\");\n \t\treturn NULL;\n \t}\n \tif (bin->hdr.startaddr > bin->size) {\n \t    \teprintf (\"corrupted dyldcache\");\n \t\tfree (ret);\n \t\treturn NULL;\n \t}\n+\n \tif (bin->hdr.startaddr > bin->size || bin->hdr.baseaddroff > bin->size) {\n \t\teprintf (\"corrupted dyldcache\");\n \t\tfree (ret);\n \t\treturn NULL;\n \t}\n-\timage_infos = (struct dyld_cache_image_info*) (bin->b->buf + bin->hdr.startaddr);\n-\tdyld_vmbase = *(ut64 *)(bin->b->buf + bin->hdr.baseaddroff);\n+\tint sz = bin->nlibs * sizeof (struct dyld_cache_image_info);\n+\timage_infos = malloc (sz); //(struct dyld_cache_image_info*) (bin->b->buf + bin->hdr.startaddr);\n+\tif (!image_infos) {\n+\t\tfree (ret);\n+\t\treturn NULL;\n+\t}\n+\tr_buf_read_at (bin->b, bin->hdr.startaddr, (ut8*)image_infos, sz);\n+\tdyld_vmbase = r_buf_read64le (bin->b, bin->hdr.baseaddroff);\n \tliboff = image_infos[idx].address - dyld_vmbase;\n \tif (liboff > bin->size) {\n \t\teprintf (\"Corrupted file\\n\");\n \t\tfree (ret);\n \t\treturn NULL;\n \t}\n \tret->offset = liboff;\n-\tif (image_infos[idx].pathFileOffset > bin->size) {\n-\t    eprintf (\"corrupted file\\n\");\n+\tint pfo = image_infos[idx].pathFileOffset;\n+\tif (pfo < 0 || pfo > bin->size) {\n+\t\teprintf (\"corrupted file: pathFileOffset > bin->size (%d)\\n\", pfo);\n \t\tfree (ret);\n \t\treturn NULL;\n \t}\n-\tlibname = (char *)(bin->b->buf + image_infos[idx].pathFileOffset);\n+\tlibname = r_buf_read_string (bin->b, pfo, 64);\n \t/* Locate lib hdr in cache */\n \tdata = bin->b->buf + liboff;\n \tmh = (struct mach_header *)data;\n@@ -224,16 +248,15 @@ struct r_bin_dyldcache_obj_t* r_bin_dyldcache_new(const char* file) {\n }\n \n struct r_bin_dyldcache_obj_t* r_bin_dyldcache_from_bytes_new(const ut8* buf, ut64 size) {\n-\tstruct r_bin_dyldcache_obj_t *bin;\n-\tif (!(bin = malloc (sizeof (struct r_bin_dyldcache_obj_t)))) {\n+\tstruct r_bin_dyldcache_obj_t *bin = R_NEW0 (struct r_bin_dyldcache_obj_t);\n+\tif (!bin) {\n \t\treturn NULL;\n \t}\n-\tmemset (bin, 0, sizeof (struct r_bin_dyldcache_obj_t));\n \tif (!buf) {\n \t\treturn r_bin_dyldcache_free (bin);\n \t}\n-\tbin->b = r_buf_new();\n-\tif (!r_buf_set_bytes (bin->b, buf, size)) {\n+\tbin->b = r_buf_new ();\n+\tif (!bin->b || !r_buf_set_bytes (bin->b, buf, size)) {\n \t\treturn r_bin_dyldcache_free (bin);\n \t}\n \tif (!r_bin_dyldcache_init (bin)) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a7e958f9ebdf9771c36e8376078f027792981fea",
            "date": "2025-01-14T17:22:24Z",
            "author_login": "radare"
          },
          {
            "sha": "0f85675c7a5d542a89318b62d4a4bc997e595e03",
            "date": "2025-01-14T11:01:39Z",
            "author_login": "radare"
          },
          {
            "sha": "92d45a6034fe60123adc23bf49b398809fe36d25",
            "date": "2025-01-14T11:11:00Z",
            "author_login": "radare"
          },
          {
            "sha": "07be136859c56f96a692c8d5d1a3531345f16a0c",
            "date": "2025-01-14T10:46:07Z",
            "author_login": "radare"
          },
          {
            "sha": "05ebe2e92fc1905702201106228b285c80bd958b",
            "date": "2025-01-14T10:28:47Z",
            "author_login": "radare"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-125",
    "description": "In radare2 prior to 3.1.1, r_bin_dyldcache_extract in libr/bin/format/mach0/dyldcache.c may allow attackers to cause a denial-of-service (application crash caused by out-of-bounds read) by crafting an input file.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2018-12-25T19:29:00.417",
    "last_modified": "2024-11-21T04:01:31.563",
    "fix_date": "2018-12-03T01:03:00Z"
  },
  "references": [
    {
      "url": "https://github.com/radare/radare2/issues/12374",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/radareorg/radare2/commit/30f4c7b52a4e2dc0d0b1bae487d90f5437c69d19",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/radare/radare2/issues/12374",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/radareorg/radare2/commit/30f4c7b52a4e2dc0d0b1bae487d90f5437c69d19",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:42.204726",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "radare2",
    "owner": "radareorg",
    "created_at": "2012-07-03T07:42:26Z",
    "updated_at": "2025-01-14T11:39:09Z",
    "pushed_at": "2025-01-14T11:39:05Z",
    "size": 182812,
    "stars": 20990,
    "forks": 3027,
    "open_issues": 874,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29143253,
      "Makefile": 262919,
      "Shell": 145034,
      "Meson": 123192,
      "C++": 82794,
      "HTML": 55704,
      "Rebol": 54153,
      "Python": 38146,
      "Roff": 36722,
      "JavaScript": 23584,
      "CSS": 19465,
      "Batchfile": 8970,
      "Perl": 6449,
      "sed": 4448,
      "R": 1960,
      "Rez": 1386,
      "Assembly": 939,
      "Vala": 839,
      "Wren": 460,
      "Gnuplot": 429,
      "C#": 164,
      "Dart": 125,
      "Rascal": 45
    },
    "commit_activity": {
      "total_commits_last_year": 1594,
      "avg_commits_per_week": 30.653846153846153,
      "days_active_last_year": 294
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:04:16.054007"
  }
}