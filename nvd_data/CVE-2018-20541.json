{
  "cve_id": "CVE-2018-20541",
  "github_data": {
    "repository": "hfp/libxsmm",
    "fix_commit": "151481489192e6d1997f8bde52c5c425ea41741d",
    "related_commits": [
      "151481489192e6d1997f8bde52c5c425ea41741d",
      "151481489192e6d1997f8bde52c5c425ea41741d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "151481489192e6d1997f8bde52c5c425ea41741d",
      "commit_date": "2018-11-26T14:28:03Z",
      "author": {
        "login": "hfp",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Issue #287: made CSR/CSC readers more robust against invalid input (case #1).",
        "length": 77,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 31,
        "additions": 20,
        "deletions": 11
      },
      "files": [
        {
          "filename": "samples/edge/common_edge_proxy.h",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -78,7 +78,9 @@ static void libxsmm_sparse_csr_reader( const char*    i_csr_file_in,\n     } else {\n       /* if we are the first line after comment header, we allocate our data structures */\n       if ( l_header_read == 0 ) {\n-        if ( sscanf(l_line, \"%u %u %u\", o_row_count, o_column_count, o_element_count) == 3 ) {\n+        if (3 == sscanf(l_line, \"%u %u %u\", o_row_count, o_column_count, o_element_count) &&\n+            0 != *o_row_count && 0 != *o_column_count && 0 != *o_element_count)\n+        {\n           /* allocate CSC datastructure matching mtx file */\n           *o_column_idx = (unsigned int*) malloc(sizeof(unsigned int) * (*o_element_count));\n           *o_row_idx = (unsigned int*) malloc(sizeof(unsigned int) * (*o_row_count + 1));"
        },
        {
          "filename": "samples/edge/edge_proxy_common.c",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -62,7 +62,9 @@ void edge_sparse_csr_reader_double( const char*           i_csr_file_in,\n     } else {\n       /* if we are the first line after comment header, we allocate our data structures */\n       if ( l_header_read == 0 ) {\n-        if ( sscanf(l_line, \"%u %u %u\", o_row_count, o_column_count, o_element_count) == 3 ) {\n+        if (3 == sscanf(l_line, \"%u %u %u\", o_row_count, o_column_count, o_element_count) &&\n+            0 != *o_row_count && 0 != *o_column_count && 0 != *o_element_count)\n+        {\n           /* allocate CSC datastructure matching mtx file */\n           *o_column_idx = (unsigned int*) malloc(sizeof(unsigned int) * (*o_element_count));\n           *o_row_idx = (unsigned int*) malloc(sizeof(unsigned int) * (*o_row_count + 1));"
        },
        {
          "filename": "samples/pyfr/pyfr_driver_asp_reg.c",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -75,7 +75,9 @@ int my_csr_reader( const char*           i_csr_file_in,\n     } else {\n       /* if we are the first line after comment header, we allocate our data structures */\n       if ( l_header_read == 0 ) {\n-        if ( sscanf(l_line, \"%u %u %u\", o_row_count, o_column_count, o_element_count) == 3 ) {\n+        if (3 == sscanf(l_line, \"%u %u %u\", o_row_count, o_column_count, o_element_count) &&\n+            0 != *o_row_count && 0 != *o_column_count && 0 != *o_element_count)\n+        {\n           /* allocate CSC datastructure matching mtx file */\n           *o_column_idx = (unsigned int*) malloc(sizeof(unsigned int) * (*o_element_count));\n           *o_row_idx = (unsigned int*) malloc(sizeof(unsigned int) * (*o_row_count + 1));"
        },
        {
          "filename": "src/generator_spgemm_csc_reader.c",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -117,7 +117,9 @@ void libxsmm_sparse_csc_reader( libxsmm_generated_code* io_generated_code,\n     } else {\n       /* if we are the first line after comment header, we allocate our data structures */\n       if ( l_header_read == 0 ) {\n-        if ( sscanf(l_line, \"%u %u %u\", o_row_count, o_column_count, o_element_count) == 3 ) {\n+        if (3 == sscanf(l_line, \"%u %u %u\", o_row_count, o_column_count, o_element_count) &&\n+            0 != *o_row_count && 0 != *o_column_count && 0 != *o_element_count)\n+        {\n           /* allocate CSC data structure matching mtx file */\n           *o_row_idx = (unsigned int*) malloc(sizeof(unsigned int) * (*o_element_count));\n           *o_column_idx = (unsigned int*) malloc(sizeof(unsigned int) * ((size_t)(*o_column_count) + 1));\n@@ -168,8 +170,8 @@ void libxsmm_sparse_csc_reader( libxsmm_generated_code* io_generated_code,\n           return;\n         }\n         /* adjust numbers to zero termination */\n-        l_row--;\n-        l_column--;\n+        LIBXSMM_ASSERT(0 != l_row && 0 != l_column);\n+        l_row--; l_column--;\n         /* add these values to row and value structure */\n         (*o_row_idx)[l_i] = l_row;\n         (*o_values)[l_i] = l_value;\n@@ -205,4 +207,3 @@ void libxsmm_sparse_csc_reader( libxsmm_generated_code* io_generated_code,\n   }\n }\n \n-"
        },
        {
          "filename": "src/generator_spgemm_csr_reader.c",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -78,7 +78,9 @@ void libxsmm_sparse_csr_reader( libxsmm_generated_code* io_generated_code,\n     } else {\n       /* if we are the first line after comment header, we allocate our data structures */\n       if ( l_header_read == 0 ) {\n-        if ( sscanf(l_line, \"%u %u %u\", o_row_count, o_column_count, o_element_count) == 3 ) {\n+        if (3 == sscanf(l_line, \"%u %u %u\", o_row_count, o_column_count, o_element_count) &&\n+            0 != *o_row_count && 0 != *o_column_count && 0 != *o_element_count)\n+        {\n           /* allocate CSC data-structure matching mtx file */\n           *o_column_idx = (unsigned int*) malloc(sizeof(unsigned int) * (*o_element_count));\n           *o_row_idx = (unsigned int*) malloc(sizeof(unsigned int) * ((size_t)(*o_row_count) + 1));\n@@ -129,8 +131,8 @@ void libxsmm_sparse_csr_reader( libxsmm_generated_code* io_generated_code,\n           return;\n         }\n         /* adjust numbers to zero termination */\n-        l_row--;\n-        l_column--;\n+        LIBXSMM_ASSERT(0 != l_row && 0 != l_column);\n+        l_row--; l_column--;\n         /* add these values to row and value structure */\n         (*o_column_idx)[l_i] = l_column;\n         (*o_values)[l_i] = l_value;"
        },
        {
          "filename": "version.txt",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1 +1 @@\n-master-1.10-47\n+master-1.10-48"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6ea2c101ee6774a240ae6b4fcd8728d4a608e3cc",
            "date": "2024-12-20T09:23:58Z",
            "author_login": "hfp"
          },
          {
            "sha": "322beeeee1636afd789a2351c873af2659322549",
            "date": "2024-12-19T19:37:45Z",
            "author_login": "stefan0re"
          },
          {
            "sha": "b4514e4c52b6c735c30700992b1966e7c9dcdcae",
            "date": "2024-12-19T15:47:53Z",
            "author_login": "hfp"
          },
          {
            "sha": "f99ff6c1899a754d3ea8b57b5dd6e73fe6266e34",
            "date": "2024-12-19T05:15:45Z",
            "author_login": "egeor"
          },
          {
            "sha": "7eec2c3b129af3cf372390803aac6ad1d7518f21",
            "date": "2024-12-16T08:36:33Z",
            "author_login": "hfp"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-787",
    "description": "There is a heap-based buffer overflow in libxsmm_sparse_csc_reader at generator_spgemm_csc_reader.c in LIBXSMM 1.10, a different vulnerability than CVE-2018-20542 (which is in a different part of the source code and is seen at different addresses).",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-12-28T16:29:04.643",
    "last_modified": "2024-11-21T04:01:41.263",
    "fix_date": "2018-11-26T14:28:03Z"
  },
  "references": [
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1652632",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hfp/libxsmm/commit/151481489192e6d1997f8bde52c5c425ea41741d",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hfp/libxsmm/issues/287",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1652632",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hfp/libxsmm/commit/151481489192e6d1997f8bde52c5c425ea41741d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hfp/libxsmm/issues/287",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:42.207920",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "libxsmm",
    "owner": "hfp",
    "created_at": "2024-12-16T08:37:04Z",
    "updated_at": "2024-12-21T01:49:01Z",
    "pushed_at": "2024-12-20T09:24:13Z",
    "size": 307629,
    "stars": 1,
    "forks": 0,
    "open_issues": 0,
    "watchers": 1,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C": 8873641,
      "Makefile": 160707,
      "C++": 142470,
      "Shell": 122728,
      "Fortran": 96355,
      "Python": 84618,
      "Batchfile": 3540,
      "CMake": 2349,
      "JavaScript": 1077,
      "Starlark": 882,
      "HTML": 390,
      "CSS": 242
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T08:06:38.620921"
  }
}