{
  "cve_id": "CVE-2018-20762",
  "github_data": {
    "repository": "gpac/gpac",
    "fix_commit": "35ab4475a7df9b2a4bcab235e379c0c3ec543658",
    "related_commits": [
      "35ab4475a7df9b2a4bcab235e379c0c3ec543658",
      "35ab4475a7df9b2a4bcab235e379c0c3ec543658"
    ],
    "patch_url": "https://github.com/gpac/gpac/commit/35ab4475a7df9b2a4bcab235e379c0c3ec543658.patch",
    "fix_commit_details": {
      "sha": "35ab4475a7df9b2a4bcab235e379c0c3ec543658",
      "commit_date": "2019-01-11T10:32:54Z",
      "author": {
        "login": "aureliendavid",
        "type": "User",
        "stats": {
          "total_commits": 798,
          "average_weekly_commits": 0.7831207065750736,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 213
        }
      },
      "commit_message": {
        "title": "fix some overflows due to strcpy",
        "length": 78,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 64,
        "additions": 58,
        "deletions": 6
      },
      "files": [
        {
          "filename": "applications/mp4box/fileimport.c",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -2356,24 +2356,44 @@ GF_Err cat_multiple_files(GF_ISOFile *dest, char *fileName, u32 import_flags, Do\n \tcat_enum.align_timelines = align_timelines;\n \tcat_enum.allow_add_in_command = allow_add_in_command;\n \n+\tif (strlen(fileName) >= sizeof(cat_enum.szPath)) {\n+\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"File name %s is too long.\\n\", fileName));\n+\t\treturn GF_NOT_SUPPORTED;\n+\t}\n \tstrcpy(cat_enum.szPath, fileName);\n \tsep = strrchr(cat_enum.szPath, GF_PATH_SEPARATOR);\n \tif (!sep) sep = strrchr(cat_enum.szPath, '/');\n \tif (!sep) {\n \t\tstrcpy(cat_enum.szPath, \".\");\n+\t\tif (strlen(fileName) >= sizeof(cat_enum.szRad1)) {\n+\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"File name %s is too long.\\n\", fileName));\n+\t\t\treturn GF_NOT_SUPPORTED;\n+\t\t}\n \t\tstrcpy(cat_enum.szRad1, fileName);\n \t} else {\n+\t\tif (strlen(sep + 1) >= sizeof(cat_enum.szRad1)) {\n+\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"File name %s is too long.\\n\", (sep + 1)));\n+\t\t\treturn GF_NOT_SUPPORTED;\n+\t\t}\n \t\tstrcpy(cat_enum.szRad1, sep+1);\n \t\tsep[0] = 0;\n \t}\n \tsep = strchr(cat_enum.szRad1, '*');\n+\tif (strlen(sep + 1) >= sizeof(cat_enum.szRad2)) {\n+\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"File name %s is too long.\\n\", (sep + 1)));\n+\t\treturn GF_NOT_SUPPORTED;\n+\t}\n \tstrcpy(cat_enum.szRad2, sep+1);\n \tsep[0] = 0;\n \tsep = strchr(cat_enum.szRad2, '%');\n \tif (!sep) sep = strchr(cat_enum.szRad2, '#');\n \tif (!sep) sep = strchr(cat_enum.szRad2, ':');\n \tstrcpy(cat_enum.szOpt, \"\");\n \tif (sep) {\n+\t\tif (strlen(sep) >= sizeof(cat_enum.szOpt)) {\n+\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"Invalid option: %s.\\n\", sep));\n+\t\t\treturn GF_NOT_SUPPORTED;\n+\t\t}\n \t\tstrcpy(cat_enum.szOpt, sep);\n \t\tsep[0] = 0;\n \t}"
        },
        {
          "filename": "applications/mp4client/main.c",
          "status": "modified",
          "additions": 29,
          "deletions": 4,
          "patch": "@@ -910,7 +910,8 @@ Bool GPAC_EventProc(void *ptr, GF_Event *evt)\n \t\tbreak;\n \tcase GF_EVENT_NAVIGATE:\n \t\tif (gf_term_is_supported_url(term, evt->navigate.to_url, 1, no_mime_check)) {\n-\t\t\tstrcpy(the_url, evt->navigate.to_url);\n+\t\t\tstrncpy(the_url, evt->navigate.to_url, sizeof(the_url)-1);\n+\t\t\tthe_url[sizeof(the_url) - 1] = 0;\n \t\t\tfprintf(stderr, \"Navigating to URL %s\\n\", the_url);\n \t\t\tgf_term_navigate_to(term, evt->navigate.to_url);\n \t\t\treturn 1;\n@@ -1099,6 +1100,11 @@ void set_cfg_option(char *opt_string)\n \t}\n \t{\n \t\tconst size_t sepIdx = sep - opt_string;\n+\t\tif (sepIdx >= sizeof(szSec)) {\n+\t\t\tfprintf(stderr, \"Badly formatted option %s - Section name is too long\\n\", opt_string);\n+\t\t\treturn;\n+\t\t}\n+\n \t\tstrncpy(szSec, opt_string, sepIdx);\n \t\tszSec[sepIdx] = 0;\n \t}\n@@ -1110,8 +1116,16 @@ void set_cfg_option(char *opt_string)\n \t}\n \t{\n \t\tconst size_t sepIdx = sep2 - sep;\n+\t\tif (sepIdx >= sizeof(szKey)) {\n+\t\t\tfprintf(stderr, \"Badly formatted option %s - key name is too long\\n\", opt_string);\n+\t\t\treturn;\n+\t\t}\n \t\tstrncpy(szKey, sep, sepIdx);\n \t\tszKey[sepIdx] = 0;\n+\t\tif (strlen(sep2 + 1) >= sizeof(szVal)) {\n+\t\t\tfprintf(stderr, \"Badly formatted option %s - value is too long\\n\", opt_string);\n+\t\t\treturn;\n+\t\t}\n \t\tstrcpy(szVal, sep2+1);\n \t}\n \n@@ -1680,7 +1694,14 @@ int mp4client_main(int argc, char **argv)\n \telse if (!gui_mode && url_arg) {\n \t\tchar *ext;\n \n-\t\tstrcpy(the_url, url_arg);\n+\t\tif (strlen(url_arg) >= sizeof(the_url)) {\n+\t\t\tfprintf(stderr, \"Input url %s is too long, truncating to %d chars.\\n\", url_arg, (int)(sizeof(the_url) - 1));\n+\t\t\tstrncpy(the_url, url_arg, sizeof(the_url)-1);\n+\t\t\tthe_url[sizeof(the_url) - 1] = 0;\n+\t\t}\n+\t\telse {\n+\t\t\tstrcpy(the_url, url_arg);\n+\t\t}\n \t\text = strrchr(the_url, '.');\n \t\tif (ext && (!stricmp(ext, \".m3u\") || !stricmp(ext, \".pls\"))) {\n \t\t\tGF_Err e = GF_OK;\n@@ -1692,7 +1713,10 @@ int mp4client_main(int argc, char **argv)\n \t\t\t\tGF_DownloadSession *sess = gf_dm_sess_new(term->downloader, the_url, GF_NETIO_SESSION_NOT_THREADED, NULL, NULL, &e);\n \t\t\t\tif (sess) {\n \t\t\t\t\te = gf_dm_sess_process(sess);\n-\t\t\t\t\tif (!e) strcpy(the_url, gf_dm_sess_get_cache_name(sess));\n+\t\t\t\t\tif (!e) {\n+\t\t\t\t\t\tstrncpy(the_url, gf_dm_sess_get_cache_name(sess), sizeof(the_url) - 1);\n+\t\t\t\t\t\tthe_url[sizeof(the_cfg) - 1] = 0;\n+\t\t\t\t\t}\n \t\t\t\t\tgf_dm_sess_del(sess);\n \t\t\t\t}\n \t\t\t}\n@@ -1715,7 +1739,8 @@ int mp4client_main(int argc, char **argv)\n \t\tfprintf(stderr, \"Hit 'h' for help\\n\\n\");\n \t\tstr = gf_cfg_get_key(cfg_file, \"General\", \"StartupFile\");\n \t\tif (str) {\n-\t\t\tstrcpy(the_url, \"MP4Client \"GPAC_FULL_VERSION);\n+\t\t\tstrncpy(the_url, \"MP4Client \"GPAC_FULL_VERSION , sizeof(the_url)-1);\n+\t\t\tthe_url[sizeof(the_url) - 1] = 0;\n \t\t\tgf_term_connect(term, str);\n \t\t\tstartup_file = 1;\n \t\t\tis_connected = 1;"
        },
        {
          "filename": "modules/ffmpeg_in/ffmpeg_demux.c",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -227,7 +227,7 @@ static Bool FFD_CanHandleURL(GF_InputService *plug, const char *url)\n \tAVFormatContext *ctx;\n \tAVOutputFormat *fmt_out;\n \tBool ret = GF_FALSE;\n-\tchar *ext, szName[1000], szExt[20];\n+\tchar *ext, szName[1024], szExt[20];\n \tconst char *szExtList;\n \tFFDemux *ffd;\n \tif (!plug || !url)\n@@ -243,6 +243,9 @@ static Bool FFD_CanHandleURL(GF_InputService *plug, const char *url)\n \n \tffd = (FFDemux*)plug->priv;\n \n+\tif (strlen(url) >= sizeof(szName))\n+\t\treturn GF_FALSE;\n+\n \tstrcpy(szName, url);\n \text = strrchr(szName, '#');\n \tif (ext) ext[0] = 0;\n@@ -252,7 +255,7 @@ static Bool FFD_CanHandleURL(GF_InputService *plug, const char *url)\n \text = strrchr(szName, '.');\n \tif (ext && strlen(ext) > 19) ext = NULL;\n \n-\tif (ext && strlen(ext) > 1) {\n+\tif (ext && strlen(ext) > 1 && strlen(ext) <= sizeof(szExt)) {\n \t\tstrcpy(szExt, &ext[1]);\n \t\tstrlwr(szExt);\n #ifndef FFMPEG_DEMUX_ENABLE_MPEG2TS"
        },
        {
          "filename": "src/scene_manager/scene_manager.c",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -646,6 +646,10 @@ GF_Err gf_sm_load_init(GF_SceneLoader *load)\n \t\t\t\text[0] = '.';\n \t\t\t\text = anext;\n \t\t\t}\n+\t\t\tif (strlen(ext) < 2 || strlen(ext) > sizeof(szExt)) {\n+\t\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_SCENE, (\"[Scene Manager] invalid extension in file name %s\\n\", load->fileName));\n+\t\t\t\treturn GF_NOT_SUPPORTED;\n+\t\t\t}\n \t\t\tstrcpy(szExt, &ext[1]);\n \t\t\tstrlwr(szExt);\n \t\t\tif (strstr(szExt, \"bt\")) load->type = GF_SM_LOAD_BT;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7af1bfcdc25dd74e158437abd13858281ae1bea0",
            "date": "2025-01-14T12:33:00Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "08572e41a7eae3d7e4329bf88a455ba6cb209936",
            "date": "2025-01-14T12:18:43Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "5f2c53efbc58ecfb01885c73b9507413efde6c81",
            "date": "2025-01-14T11:46:01Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "f2082beb80c470f4eaf2bb0421b56e8adcde303a",
            "date": "2025-01-14T11:45:02Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "4551f467cbe027e92b4ba1ff1806c05c8ea282b4",
            "date": "2025-01-13T10:33:01Z",
            "author_login": "touatily"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-119",
    "description": "GPAC version 0.7.1 and earlier has a buffer overflow vulnerability in the cat_multiple_files function in applications/mp4box/fileimport.c when MP4Box is used for a local directory containing crafted filenames.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2019-02-06T23:29:00.370",
    "last_modified": "2024-11-21T04:02:06.987",
    "fix_date": "2019-01-11T10:32:54Z"
  },
  "references": [
    {
      "url": "https://github.com/gpac/gpac/commit/35ab4475a7df9b2a4bcab235e379c0c3ec543658",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/issues/1187",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2019/02/msg00040.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/3926-1/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/commit/35ab4475a7df9b2a4bcab235e379c0c3ec543658",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/issues/1187",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2019/02/msg00040.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/3926-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:44.445770",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gpac",
    "owner": "gpac",
    "created_at": "2014-05-03T11:29:57Z",
    "updated_at": "2025-01-14T12:51:06Z",
    "pushed_at": "2025-01-14T12:51:01Z",
    "size": 148655,
    "stars": 2857,
    "forks": 539,
    "open_issues": 84,
    "watchers": 2857,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29230795,
      "JavaScript": 1164507,
      "C++": 591365,
      "Roff": 570792,
      "Python": 185337,
      "Makefile": 105620,
      "HTML": 100652,
      "Java": 92437,
      "GLSL": 90260,
      "Objective-C": 24884,
      "Shell": 21810,
      "NSIS": 17560,
      "Rez": 13704,
      "CSS": 4998,
      "Batchfile": 4898,
      "Dockerfile": 3216,
      "Nix": 1229
    },
    "commit_activity": {
      "total_commits_last_year": 1273,
      "avg_commits_per_week": 24.48076923076923,
      "days_active_last_year": 239
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:56:58.367536"
  }
}