{
  "cve_id": "CVE-2018-21010",
  "github_data": {
    "repository": "uclouvain/openjpeg",
    "fix_commit": "2e5ab1d9987831c981ff05862e8ccf1381ed58ea",
    "related_commits": [
      "2e5ab1d9987831c981ff05862e8ccf1381ed58ea",
      "2e5ab1d9987831c981ff05862e8ccf1381ed58ea"
    ],
    "patch_url": "https://github.com/uclouvain/openjpeg/commit/2e5ab1d9987831c981ff05862e8ccf1381ed58ea.patch",
    "fix_commit_details": {
      "sha": "2e5ab1d9987831c981ff05862e8ccf1381ed58ea",
      "commit_date": "2018-11-27T22:31:30Z",
      "author": {
        "login": "rouault",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "color_apply_icc_profile: avoid potential heap buffer overflow",
        "length": 97,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 154,
        "additions": 82,
        "deletions": 72
      },
      "files": [
        {
          "filename": "src/bin/common/color.c",
          "status": "modified",
          "additions": 82,
          "deletions": 72,
          "patch": "@@ -597,82 +597,92 @@ void color_apply_icc_profile(opj_image_t *image)\n     }\n \n     if (image->numcomps > 2) { /* RGB, RGBA */\n-        if (prec <= 8) {\n-            unsigned char *inbuf, *outbuf, *in, *out;\n-\n-            max = max_w * max_h;\n-            nr_samples = (size_t)(max * 3U * sizeof(unsigned char));\n-            in = inbuf = (unsigned char*)opj_image_data_alloc(nr_samples);\n-            out = outbuf = (unsigned char*)opj_image_data_alloc(nr_samples);\n-\n-            if (inbuf == NULL || outbuf == NULL) {\n-                goto fails0;\n-            }\n-\n-            r = image->comps[0].data;\n-            g = image->comps[1].data;\n-            b = image->comps[2].data;\n-\n-            for (i = 0U; i < max; ++i) {\n-                *in++ = (unsigned char) * r++;\n-                *in++ = (unsigned char) * g++;\n-                *in++ = (unsigned char) * b++;\n-            }\n-\n-            cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max);\n-\n-            r = image->comps[0].data;\n-            g = image->comps[1].data;\n-            b = image->comps[2].data;\n-\n-            for (i = 0U; i < max; ++i) {\n-                *r++ = (int) * out++;\n-                *g++ = (int) * out++;\n-                *b++ = (int) * out++;\n-            }\n-            ok = 1;\n+        if ((image->comps[0].w == image->comps[1].w &&\n+                image->comps[0].w == image->comps[2].w) &&\n+                (image->comps[0].h == image->comps[1].h &&\n+                 image->comps[0].h == image->comps[2].h)) {\n+            if (prec <= 8) {\n+                unsigned char *inbuf, *outbuf, *in, *out;\n+\n+                max = max_w * max_h;\n+                nr_samples = (size_t)(max * 3U * sizeof(unsigned char));\n+                in = inbuf = (unsigned char*)opj_image_data_alloc(nr_samples);\n+                out = outbuf = (unsigned char*)opj_image_data_alloc(nr_samples);\n+\n+                if (inbuf == NULL || outbuf == NULL) {\n+                    goto fails0;\n+                }\n+\n+                r = image->comps[0].data;\n+                g = image->comps[1].data;\n+                b = image->comps[2].data;\n+\n+                for (i = 0U; i < max; ++i) {\n+                    *in++ = (unsigned char) * r++;\n+                    *in++ = (unsigned char) * g++;\n+                    *in++ = (unsigned char) * b++;\n+                }\n+\n+                cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max);\n+\n+                r = image->comps[0].data;\n+                g = image->comps[1].data;\n+                b = image->comps[2].data;\n+\n+                for (i = 0U; i < max; ++i) {\n+                    *r++ = (int) * out++;\n+                    *g++ = (int) * out++;\n+                    *b++ = (int) * out++;\n+                }\n+                ok = 1;\n \n fails0:\n-            opj_image_data_free(inbuf);\n-            opj_image_data_free(outbuf);\n-        } else { /* prec > 8 */\n-            unsigned short *inbuf, *outbuf, *in, *out;\n-\n-            max = max_w * max_h;\n-            nr_samples = (size_t)(max * 3U * sizeof(unsigned short));\n-            in = inbuf = (unsigned short*)opj_image_data_alloc(nr_samples);\n-            out = outbuf = (unsigned short*)opj_image_data_alloc(nr_samples);\n-\n-            if (inbuf == NULL || outbuf == NULL) {\n-                goto fails1;\n-            }\n-\n-            r = image->comps[0].data;\n-            g = image->comps[1].data;\n-            b = image->comps[2].data;\n-\n-            for (i = 0U  ; i < max; ++i) {\n-                *in++ = (unsigned short) * r++;\n-                *in++ = (unsigned short) * g++;\n-                *in++ = (unsigned short) * b++;\n-            }\n-\n-            cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max);\n-\n-            r = image->comps[0].data;\n-            g = image->comps[1].data;\n-            b = image->comps[2].data;\n-\n-            for (i = 0; i < max; ++i) {\n-                *r++ = (int) * out++;\n-                *g++ = (int) * out++;\n-                *b++ = (int) * out++;\n-            }\n-            ok = 1;\n+                opj_image_data_free(inbuf);\n+                opj_image_data_free(outbuf);\n+            } else { /* prec > 8 */\n+                unsigned short *inbuf, *outbuf, *in, *out;\n+\n+                max = max_w * max_h;\n+                nr_samples = (size_t)(max * 3U * sizeof(unsigned short));\n+                in = inbuf = (unsigned short*)opj_image_data_alloc(nr_samples);\n+                out = outbuf = (unsigned short*)opj_image_data_alloc(nr_samples);\n+\n+                if (inbuf == NULL || outbuf == NULL) {\n+                    goto fails1;\n+                }\n+\n+                r = image->comps[0].data;\n+                g = image->comps[1].data;\n+                b = image->comps[2].data;\n+\n+                for (i = 0U  ; i < max; ++i) {\n+                    *in++ = (unsigned short) * r++;\n+                    *in++ = (unsigned short) * g++;\n+                    *in++ = (unsigned short) * b++;\n+                }\n+\n+                cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max);\n+\n+                r = image->comps[0].data;\n+                g = image->comps[1].data;\n+                b = image->comps[2].data;\n+\n+                for (i = 0; i < max; ++i) {\n+                    *r++ = (int) * out++;\n+                    *g++ = (int) * out++;\n+                    *b++ = (int) * out++;\n+                }\n+                ok = 1;\n \n fails1:\n-            opj_image_data_free(inbuf);\n-            opj_image_data_free(outbuf);\n+                opj_image_data_free(inbuf);\n+                opj_image_data_free(outbuf);\n+            }\n+        } else {\n+            fprintf(stderr,\n+                    \"[ERROR] Image components should have the same width and height\\n\");\n+            cmsDeleteTransform(transform);\n+            return;\n         }\n     } else { /* image->numcomps <= 2 : GRAY, GRAYA */\n         if (prec <= 8) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eb25a5ec777ff6699f4bb1187740467dcfa64dd6",
            "date": "2024-12-09T16:48:54Z",
            "author_login": "rouault"
          },
          {
            "sha": "672ecbb10a8b74f6723e2e9bf062ac0f10625f98",
            "date": "2024-12-09T16:37:23Z",
            "author_login": "rouault"
          },
          {
            "sha": "210a8a5690d0da66f02d49420d7176a21ef409dc",
            "date": "2024-12-09T16:31:23Z",
            "author_login": "rouault"
          },
          {
            "sha": "e2cf50f68a51f4bbe09c400d8bcfb522e9f2bef2",
            "date": "2024-12-09T16:31:02Z",
            "author_login": "rouault"
          },
          {
            "sha": "4e3412d0a0777a12fddf0b469fd09771a2678bad",
            "date": "2024-12-09T16:27:18Z",
            "author_login": "rouault"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-787",
    "description": "OpenJPEG before 2.3.1 has a heap buffer overflow in color_apply_icc_profile in bin/common/color.c.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-09-05T13:15:10.813",
    "last_modified": "2024-11-21T04:02:41.187",
    "fix_date": "2018-11-27T22:31:30Z"
  },
  "references": [
    {
      "url": "https://github.com/uclouvain/openjpeg/commit/2e5ab1d9987831c981ff05862e8ccf1381ed58ea",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2019/10/msg00009.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202101-29",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com//security-alerts/cpujul2021.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/uclouvain/openjpeg/commit/2e5ab1d9987831c981ff05862e8ccf1381ed58ea",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2019/10/msg00009.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202101-29",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com//security-alerts/cpujul2021.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:57.303452",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openjpeg",
    "owner": "uclouvain",
    "created_at": "2015-02-15T15:04:29Z",
    "updated_at": "2025-01-14T10:29:19Z",
    "pushed_at": "2024-12-09T16:48:56Z",
    "size": 135125,
    "stars": 995,
    "forks": 463,
    "open_issues": 333,
    "watchers": 995,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 3036412,
      "C++": 338909,
      "CMake": 114732,
      "Java": 94066,
      "Shell": 36099,
      "Python": 11488,
      "Inno Setup": 1876,
      "HTML": 1412,
      "Makefile": 352
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:46:56.605469"
  }
}