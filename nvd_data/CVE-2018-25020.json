{
  "cve_id": "CVE-2018-25020",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "050fad7c4534c13c8eb1d9c2ba66012e014773cb",
    "related_commits": [
      "050fad7c4534c13c8eb1d9c2ba66012e014773cb",
      "050fad7c4534c13c8eb1d9c2ba66012e014773cb"
    ],
    "patch_url": "https://github.com/torvalds/linux/commit/050fad7c4534c13c8eb1d9c2ba66012e014773cb.patch",
    "fix_commit_details": {
      "sha": "050fad7c4534c13c8eb1d9c2ba66012e014773cb",
      "commit_date": "2018-05-16T23:44:11Z",
      "author": {
        "login": "borkmann",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "bpf: fix truncated jump targets on heavy expansions",
        "length": 3794,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 111,
        "additions": 84,
        "deletions": 27
      },
      "files": [
        {
          "filename": "kernel/bpf/core.c",
          "status": "modified",
          "additions": 75,
          "deletions": 25,
          "patch": "@@ -218,47 +218,84 @@ int bpf_prog_calc_tag(struct bpf_prog *fp)\n \treturn 0;\n }\n \n-static void bpf_adj_branches(struct bpf_prog *prog, u32 pos, u32 delta)\n+static int bpf_adj_delta_to_imm(struct bpf_insn *insn, u32 pos, u32 delta,\n+\t\t\t\tu32 curr, const bool probe_pass)\n {\n+\tconst s64 imm_min = S32_MIN, imm_max = S32_MAX;\n+\ts64 imm = insn->imm;\n+\n+\tif (curr < pos && curr + imm + 1 > pos)\n+\t\timm += delta;\n+\telse if (curr > pos + delta && curr + imm + 1 <= pos + delta)\n+\t\timm -= delta;\n+\tif (imm < imm_min || imm > imm_max)\n+\t\treturn -ERANGE;\n+\tif (!probe_pass)\n+\t\tinsn->imm = imm;\n+\treturn 0;\n+}\n+\n+static int bpf_adj_delta_to_off(struct bpf_insn *insn, u32 pos, u32 delta,\n+\t\t\t\tu32 curr, const bool probe_pass)\n+{\n+\tconst s32 off_min = S16_MIN, off_max = S16_MAX;\n+\ts32 off = insn->off;\n+\n+\tif (curr < pos && curr + off + 1 > pos)\n+\t\toff += delta;\n+\telse if (curr > pos + delta && curr + off + 1 <= pos + delta)\n+\t\toff -= delta;\n+\tif (off < off_min || off > off_max)\n+\t\treturn -ERANGE;\n+\tif (!probe_pass)\n+\t\tinsn->off = off;\n+\treturn 0;\n+}\n+\n+static int bpf_adj_branches(struct bpf_prog *prog, u32 pos, u32 delta,\n+\t\t\t    const bool probe_pass)\n+{\n+\tu32 i, insn_cnt = prog->len + (probe_pass ? delta : 0);\n \tstruct bpf_insn *insn = prog->insnsi;\n-\tu32 i, insn_cnt = prog->len;\n-\tbool pseudo_call;\n-\tu8 code;\n-\tint off;\n+\tint ret = 0;\n \n \tfor (i = 0; i < insn_cnt; i++, insn++) {\n+\t\tu8 code;\n+\n+\t\t/* In the probing pass we still operate on the original,\n+\t\t * unpatched image in order to check overflows before we\n+\t\t * do any other adjustments. Therefore skip the patchlet.\n+\t\t */\n+\t\tif (probe_pass && i == pos) {\n+\t\t\ti += delta + 1;\n+\t\t\tinsn++;\n+\t\t}\n \t\tcode = insn->code;\n-\t\tif (BPF_CLASS(code) != BPF_JMP)\n-\t\t\tcontinue;\n-\t\tif (BPF_OP(code) == BPF_EXIT)\n+\t\tif (BPF_CLASS(code) != BPF_JMP ||\n+\t\t    BPF_OP(code) == BPF_EXIT)\n \t\t\tcontinue;\n+\t\t/* Adjust offset of jmps if we cross patch boundaries. */\n \t\tif (BPF_OP(code) == BPF_CALL) {\n-\t\t\tif (insn->src_reg == BPF_PSEUDO_CALL)\n-\t\t\t\tpseudo_call = true;\n-\t\t\telse\n+\t\t\tif (insn->src_reg != BPF_PSEUDO_CALL)\n \t\t\t\tcontinue;\n+\t\t\tret = bpf_adj_delta_to_imm(insn, pos, delta, i,\n+\t\t\t\t\t\t   probe_pass);\n \t\t} else {\n-\t\t\tpseudo_call = false;\n+\t\t\tret = bpf_adj_delta_to_off(insn, pos, delta, i,\n+\t\t\t\t\t\t   probe_pass);\n \t\t}\n-\t\toff = pseudo_call ? insn->imm : insn->off;\n-\n-\t\t/* Adjust offset of jmps if we cross boundaries. */\n-\t\tif (i < pos && i + off + 1 > pos)\n-\t\t\toff += delta;\n-\t\telse if (i > pos + delta && i + off + 1 <= pos + delta)\n-\t\t\toff -= delta;\n-\n-\t\tif (pseudo_call)\n-\t\t\tinsn->imm = off;\n-\t\telse\n-\t\t\tinsn->off = off;\n+\t\tif (ret)\n+\t\t\tbreak;\n \t}\n+\n+\treturn ret;\n }\n \n struct bpf_prog *bpf_patch_insn_single(struct bpf_prog *prog, u32 off,\n \t\t\t\t       const struct bpf_insn *patch, u32 len)\n {\n \tu32 insn_adj_cnt, insn_rest, insn_delta = len - 1;\n+\tconst u32 cnt_max = S16_MAX;\n \tstruct bpf_prog *prog_adj;\n \n \t/* Since our patchlet doesn't expand the image, we're done. */\n@@ -269,6 +306,15 @@ struct bpf_prog *bpf_patch_insn_single(struct bpf_prog *prog, u32 off,\n \n \tinsn_adj_cnt = prog->len + insn_delta;\n \n+\t/* Reject anything that would potentially let the insn->off\n+\t * target overflow when we have excessive program expansions.\n+\t * We need to probe here before we do any reallocation where\n+\t * we afterwards may not fail anymore.\n+\t */\n+\tif (insn_adj_cnt > cnt_max &&\n+\t    bpf_adj_branches(prog, off, insn_delta, true))\n+\t\treturn NULL;\n+\n \t/* Several new instructions need to be inserted. Make room\n \t * for them. Likely, there's no need for a new allocation as\n \t * last page could have large enough tailroom.\n@@ -294,7 +340,11 @@ struct bpf_prog *bpf_patch_insn_single(struct bpf_prog *prog, u32 off,\n \t\tsizeof(*patch) * insn_rest);\n \tmemcpy(prog_adj->insnsi + off, patch, sizeof(*patch) * len);\n \n-\tbpf_adj_branches(prog_adj, off, insn_delta);\n+\t/* We are guaranteed to not fail at this point, otherwise\n+\t * the ship has sailed to reverse to the original state. An\n+\t * overflow cannot happen at this point.\n+\t */\n+\tBUG_ON(bpf_adj_branches(prog_adj, off, insn_delta, false));\n \n \treturn prog_adj;\n }"
        },
        {
          "filename": "net/core/filter.c",
          "status": "modified",
          "additions": 9,
          "deletions": 2,
          "patch": "@@ -481,11 +481,18 @@ static int bpf_convert_filter(struct sock_filter *prog, int len,\n \n #define BPF_EMIT_JMP\t\t\t\t\t\t\t\\\n \tdo {\t\t\t\t\t\t\t\t\\\n+\t\tconst s32 off_min = S16_MIN, off_max = S16_MAX;\t\t\\\n+\t\ts32 off;\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n \t\tif (target >= len || target < 0)\t\t\t\\\n \t\t\tgoto err;\t\t\t\t\t\\\n-\t\tinsn->off = addrs ? addrs[target] - addrs[i] - 1 : 0;\t\\\n+\t\toff = addrs ? addrs[target] - addrs[i] - 1 : 0;\t\t\\\n \t\t/* Adjust pc relative offset for 2nd or 3rd insn. */\t\\\n-\t\tinsn->off -= insn - tmp_insns;\t\t\t\t\\\n+\t\toff -= insn - tmp_insns;\t\t\t\t\\\n+\t\t/* Reject anything not fitting into insn->off. */\t\\\n+\t\tif (off < off_min || off > off_max)\t\t\t\\\n+\t\t\tgoto err;\t\t\t\t\t\\\n+\t\tinsn->off = off;\t\t\t\t\t\\\n \t} while (0)\n \n \t\tcase BPF_JMP | BPF_JA:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7f5b6a8ec18e3add4c74682f60b90c31bdf849f2",
            "date": "2025-01-14T19:32:14Z",
            "author_login": "torvalds"
          },
          {
            "sha": "c3812b15000cc5b7b17c7238f8b12f6a22df0b1d",
            "date": "2025-01-14T18:07:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "79a1d390f879563119bf2848b621bc7eed228c7d",
            "date": "2025-01-14T17:54:57Z",
            "author_login": "torvalds"
          },
          {
            "sha": "c45323b7560ec87c37c729b703c86ee65f136d75",
            "date": "2025-01-13T17:03:18Z",
            "author_login": "torvalds"
          },
          {
            "sha": "34c8e74cd6667ef5da90d448a1af702c4b873bd3",
            "date": "2025-01-13T08:52:08Z",
            "author_login": "YageGeng"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-120",
    "description": "The BPF subsystem in the Linux kernel before 4.17 mishandles situations with a long jump over an instruction sequence where inner instructions require substantial expansions into multiple BPF instructions, leading to an overflow. This affects kernel/bpf/core.c and net/core/filter.c.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-12-08T05:15:07.910",
    "last_modified": "2024-11-21T04:03:22.250",
    "fix_date": "2018-05-16T23:44:11Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/165477/Kernel-Live-Patch-Security-Notice-LSN-0083-1.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/050fad7c4534c13c8eb1d9c2ba66012e014773cb",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20211229-0005/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/165477/Kernel-Live-Patch-Security-Notice-LSN-0083-1.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/050fad7c4534c13c8eb1d9c2ba66012e014773cb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20211229-0005/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.825434",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}