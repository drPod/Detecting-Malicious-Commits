{
  "cve_id": "CVE-2018-25045",
  "github_data": {
    "repository": "encode/django-rest-framework",
    "fix_commit": "4bb9a3c48427867ef1e46f7dee945a4c25a4f9b8",
    "related_commits": [
      "4bb9a3c48427867ef1e46f7dee945a4c25a4f9b8",
      "4bb9a3c48427867ef1e46f7dee945a4c25a4f9b8"
    ],
    "patch_url": "https://github.com/encode/django-rest-framework/commit/4bb9a3c48427867ef1e46f7dee945a4c25a4f9b8.patch",
    "fix_commit_details": {
      "sha": "4bb9a3c48427867ef1e46f7dee945a4c25a4f9b8",
      "commit_date": "2019-01-16T12:36:25Z",
      "author": {
        "login": "zyv",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix XSS caused by disabled autoescaping in the default DRF Browsable API view templates (#6330)",
        "length": 331,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 43,
        "additions": 26,
        "deletions": 17
      },
      "files": [
        {
          "filename": "rest_framework/templates/rest_framework/base.html",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -171,10 +171,10 @@ <h1>{{ name }}</h1>\n               </div>\n \n               <div class=\"response-info\" aria-label=\"{% trans \"response info\" %}\">\n-                <pre class=\"prettyprint\"><span class=\"meta nocode\"><b>HTTP {{ response.status_code }} {{ response.status_text }}</b>{% autoescape off %}{% for key, val in response_headers|items %}\n+                <pre class=\"prettyprint\"><span class=\"meta nocode\"><b>HTTP {{ response.status_code }} {{ response.status_text }}</b>{% for key, val in response_headers|items %}\n <b>{{ key }}:</b> <span class=\"lit\">{{ val|break_long_headers|urlize_quoted_links }}</span>{% endfor %}\n \n-</span>{{ content|urlize_quoted_links }}</pre>{% endautoescape %}\n+</span>{{ content|urlize_quoted_links }}</pre>\n               </div>\n             </div>\n "
        },
        {
          "filename": "rest_framework/templatetags/rest_framework.py",
          "status": "modified",
          "additions": 13,
          "deletions": 13,
          "patch": "@@ -336,6 +336,12 @@ def trim_url(x, limit=trim_url_limit):\n         return limit is not None and (len(x) > limit and ('%s...' % x[:max(0, limit - 3)])) or x\n \n     safe_input = isinstance(text, SafeData)\n+\n+    # Unfortunately, Django built-in cannot be used here, because escaping\n+    # is to be performed on words, which have been forcibly coerced to text\n+    def conditional_escape(text):\n+        return escape(text) if autoescape and not safe_input else text\n+\n     words = word_split_re.split(force_text(text))\n     for i, word in enumerate(words):\n         if '.' in word or '@' in word or ':' in word:\n@@ -376,21 +382,15 @@ def trim_url(x, limit=trim_url_limit):\n             # Make link.\n             if url:\n                 trimmed = trim_url(middle)\n-                if autoescape and not safe_input:\n-                    lead, trail = escape(lead), escape(trail)\n-                    url, trimmed = escape(url), escape(trimmed)\n+                lead, trail = conditional_escape(lead), conditional_escape(trail)\n+                url, trimmed = conditional_escape(url), conditional_escape(trimmed)\n                 middle = '<a href=\"%s\"%s>%s</a>' % (url, nofollow_attr, trimmed)\n-                words[i] = mark_safe('%s%s%s' % (lead, middle, trail))\n+                words[i] = '%s%s%s' % (lead, middle, trail)\n             else:\n-                if safe_input:\n-                    words[i] = mark_safe(word)\n-                elif autoescape:\n-                    words[i] = escape(word)\n-        elif safe_input:\n-            words[i] = mark_safe(word)\n-        elif autoescape:\n-            words[i] = escape(word)\n-    return ''.join(words)\n+                words[i] = conditional_escape(word)\n+        else:\n+            words[i] = conditional_escape(word)\n+    return mark_safe(''.join(words))\n \n \n @register.filter"
        },
        {
          "filename": "tests/test_templatetags.py",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -305,15 +305,24 @@ def test_json_with_url(self):\n             '&quot;foo_set&quot;: [\\n    &quot;<a href=\"http://api/foos/1/\">http://api/foos/1/</a>&quot;\\n], '\n         self._urlize_dict_check(data)\n \n+    def test_template_render_with_autoescape(self):\n+        \"\"\"\n+        Test that HTML is correctly escaped in Browsable API views.\n+        \"\"\"\n+        template = Template(\"{% load rest_framework %}{{ content|urlize_quoted_links }}\")\n+        rendered = template.render(Context({'content': '<script>alert()</script> http://example.com'}))\n+        assert rendered == '&lt;script&gt;alert()&lt;/script&gt;' \\\n+                           ' <a href=\"http://example.com\" rel=\"nofollow\">http://example.com</a>'\n+\n     def test_template_render_with_noautoescape(self):\n         \"\"\"\n         Test if the autoescape value is getting passed to urlize_quoted_links filter.\n         \"\"\"\n         template = Template(\"{% load rest_framework %}\"\n                             \"{% autoescape off %}{{ content|urlize_quoted_links }}\"\n                             \"{% endautoescape %}\")\n-        rendered = template.render(Context({'content': '\"http://example.com\"'}))\n-        assert rendered == '\"<a href=\"http://example.com\" rel=\"nofollow\">http://example.com</a>\"'\n+        rendered = template.render(Context({'content': '<b> \"http://example.com\" </b>'}))\n+        assert rendered == '<b> \"<a href=\"http://example.com\" rel=\"nofollow\">http://example.com</a>\" </b>'\n \n \n @unittest.skipUnless(coreapi, 'coreapi is not installed')"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4a1d773b8f7d86e08e3fd7c6809fd1092eb69d6e",
            "date": "2025-01-10T18:56:36Z",
            "author_login": "sliverc"
          },
          {
            "sha": "a4f6059d500efbe25e889862d12f5f7a87cba8fe",
            "date": "2025-01-07T19:19:39Z",
            "author_login": "Gluroda"
          },
          {
            "sha": "089f6a697445af20f52832db99f2ab94baea4ece",
            "date": "2024-12-28T10:22:21Z",
            "author_login": "terencehonles"
          },
          {
            "sha": "a8595a8eae2649b763f4882da643c1dc9183d6f1",
            "date": "2024-12-14T09:08:22Z",
            "author_login": "browniebroke"
          },
          {
            "sha": "dbac145638758413b966c3418fa5f3f651e3e02a",
            "date": "2024-11-18T11:43:53Z",
            "author_login": "amansharma612"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Django REST framework (aka django-rest-framework) before 3.9.1 allows XSS because the default DRF Browsable API view templates disable autoescaping.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-23T02:15:07.267",
    "last_modified": "2024-11-21T04:03:25.850",
    "fix_date": "2019-01-16T12:36:25Z"
  },
  "references": [
    {
      "url": "https://github.com/encode/django-rest-framework/commit/4bb9a3c48427867ef1e46f7dee945a4c25a4f9b8",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/encode/django-rest-framework/pull/6191",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/encode/django-rest-framework/pull/6330",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/encode/django-rest-framework/commit/4bb9a3c48427867ef1e46f7dee945a4c25a4f9b8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/encode/django-rest-framework/pull/6191",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/encode/django-rest-framework/pull/6330",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.514532",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "django-rest-framework",
    "owner": "encode",
    "created_at": "2011-03-02T17:13:56Z",
    "updated_at": "2025-01-14T13:41:09Z",
    "pushed_at": "2025-01-10T18:56:37Z",
    "size": 54056,
    "stars": 28664,
    "forks": 6867,
    "open_issues": 105,
    "watchers": 28664,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 1533982,
      "HTML": 85858,
      "CSS": 40329,
      "JavaScript": 18245
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:12:56.927561"
  }
}