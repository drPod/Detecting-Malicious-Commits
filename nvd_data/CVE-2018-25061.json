{
  "cve_id": "CVE-2018-25061",
  "github_data": {
    "repository": "christian-bromann/rgb2hex",
    "fix_commit": "9e0c38594432edfa64136fdf7bb651835e17c34f",
    "related_commits": [
      "9e0c38594432edfa64136fdf7bb651835e17c34f",
      "9e0c38594432edfa64136fdf7bb651835e17c34f"
    ],
    "patch_url": "https://github.com/christian-bromann/rgb2hex/commit/9e0c38594432edfa64136fdf7bb651835e17c34f.patch",
    "fix_commit_details": {
      "sha": "9e0c38594432edfa64136fdf7bb651835e17c34f",
      "commit_date": "2018-07-05T09:40:04Z",
      "author": {
        "login": "christian-bromann",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "prevent Regular Expression Denial of Service attacks",
        "length": 52,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 44,
        "additions": 28,
        "deletions": 16
      },
      "files": [
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -28,21 +28,21 @@ var rgb2hex = module.exports = function rgb2hex(color) {\n     /**\n      * parse input\n      */\n-    var digits = /rgba?\\((\\d+),(\\d+),(\\d+)(,(\\d+)?\\.?(\\d+))?\\);?/.exec(strippedColor);\n+    var digits = /(.*?)rgb(a)??\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})(,[01]??\\.([0-9]{0,3}))??\\)/.exec(strippedColor);\n \n     if(!digits) {\n         // or throw error if input isn't a valid rgb(a) color\n         throw new Error('given color (' + color + ') isn\\'t a valid rgb or rgba color');\n     }\n \n-    var red = parseInt(digits[1], 10);\n-    var green = parseInt(digits[2], 10);\n-    var blue = parseInt(digits[3], 10);\n-    var alpha = digits[4] ? /([0-9\\.]+)/.exec(digits[4])[0] : '1';\n+    var red = parseInt(digits[3], 10);\n+    var green = parseInt(digits[4], 10);\n+    var blue = parseInt(digits[5], 10);\n+    var alpha = digits[6] ? /([0-9\\.]+)/.exec(digits[6])[0] : '1';\n     var rgb = ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1);\n \n     // parse alpha value into float\n-    if(alpha.substr(0,1) === '.') {\n+    if(alpha.substr(0,2) === ',.') {\n         alpha = parseFloat('0' + alpha);\n     }\n \n@@ -58,4 +58,4 @@ var rgb2hex = module.exports = function rgb2hex(color) {\n         hex: '#' + rgb.toString(16),\n         alpha: alpha\n     };\n-};\n+};\n\\ No newline at end of file"
        },
        {
          "filename": "rgb2hex.js",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -21,21 +21,21 @@\n         /**\n          * parse input\n          */\n-        var digits = /rgba?\\((\\d+),(\\d+),(\\d+)(,(\\d+)?\\.?(\\d+))?\\);?/.exec(strippedColor);\n+        var digits = /(.*?)rgb(a)??\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})(,[01]??\\.([0-9]{0,3}))??\\)/.exec(strippedColor);\n \n         if(!digits) {\n             // or throw error if input isn't a valid rgb(a) color\n             throw new Error('given color (' + color + ') isn\\'t a valid rgb or rgba color');\n         }\n \n-        var red = parseInt(digits[1], 10);\n-        var green = parseInt(digits[2], 10);\n-        var blue = parseInt(digits[3], 10);\n-        var alpha = digits[4] ? /([0-9\\.]+)/.exec(digits[4])[0] : '1';\n+        var red = parseInt(digits[3], 10);\n+        var green = parseInt(digits[4], 10);\n+        var blue = parseInt(digits[5], 10);\n+        var alpha = digits[6] ? /([0-9\\.]+)/.exec(digits[6])[0] : '1';\n         var rgb = ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1);\n \n         // parse alpha value into float\n-        if(alpha.substr(0,1) === '.') {\n+        if(alpha.substr(0,2) === ',.') {\n             alpha = parseFloat('0' + alpha);\n         }\n "
        },
        {
          "filename": "rgb2hex.min.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1 +1 @@\n-!function(r){var e=function(r){if(\"string\"!=typeof r)throw new Error(\"color has to be type of `string`\");if(\"#\"===r.substr(0,1))return{hex:r,alpha:1};var e=r.replace(/\\s+/g,\"\"),t=/rgba?\\((\\d+),(\\d+),(\\d+)(,(\\d+)?\\.?(\\d+))?\\);?/.exec(e);if(!t)throw new Error(\"given color (\"+r+\") isn't a valid rgb or rgba color\");var n=parseInt(t[1],10),o=parseInt(t[2],10),a=parseInt(t[3],10),i=t[4]?/([0-9\\.]+)/.exec(t[4])[0]:\"1\",s=(a|o<<8|n<<16|1<<24).toString(16).slice(1);return\".\"===i.substr(0,1)&&(i=parseFloat(\"0\"+i)),1<i&&(i=1),i=parseFloat(Math.round(100*i))/100,{hex:\"#\"+s.toString(16),alpha:i}};\"function\"==typeof define&&define.amd?define(\"rgb2hex\",function(){return e}):r.rgb2hex=e}(window);\n\\ No newline at end of file\n+!function(r){var e=function(r){if(\"string\"!=typeof r)throw new Error(\"color has to be type of `string`\");if(\"#\"===r.substr(0,1))return{hex:r,alpha:1};var e=r.replace(/\\s+/g,\"\"),t=/(.*?)rgb(a)??\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})(,[01]??\\.([0-9]{0,3}))??\\)/.exec(e);if(!t)throw new Error(\"given color (\"+r+\") isn't a valid rgb or rgba color\");var n=parseInt(t[3],10),o=parseInt(t[4],10),a=parseInt(t[5],10),i=t[6]?/([0-9\\.]+)/.exec(t[6])[0]:\"1\",s=(a|o<<8|n<<16|1<<24).toString(16).slice(1);return\",.\"===i.substr(0,2)&&(i=parseFloat(\"0\"+i)),1<i&&(i=1),i=parseFloat(Math.round(100*i))/100,{hex:\"#\"+s.toString(16),alpha:i}};\"function\"==typeof define&&define.amd?define(\"rgb2hex\",function(){return e}):r.rgb2hex=e}(window);\n\\ No newline at end of file"
        },
        {
          "filename": "test/rgb2hex.test.js",
          "status": "modified",
          "additions": 14,
          "deletions": 2,
          "patch": "@@ -80,10 +80,22 @@ describe('rgb2hex should', () => {\n         })\n \n         it('by limiting alpha value to 1', () => {\n-            var input = 'rgba(12,173,22,12312.67)'\n+            var input = 'rgba(12,173,22,1.67)'\n             expect(rgb2hex(input).alpha).not.toBeGreaterThan(1)\n         })\n \n+        it('by not accepting to big values', () => {\n+            var input = 'rgba(1123, 54, 4, 0.33)'\n+            expect(() => rgb2hex(input)).toThrow(invalidErrorMessage(input))\n+            input = 'rgba(113, 1154, 4, 0.33)'\n+            expect(() => rgb2hex(input)).toThrow(invalidErrorMessage(input))\n+            input = 'rgba(113, 154, 1114, 0.33)'\n+            expect(() => rgb2hex(input)).toThrow(invalidErrorMessage(input))\n+            input = 'rgba(113, 54, 4, 2.33)'\n+            expect(() => rgb2hex(input)).toThrow(invalidErrorMessage(input))\n+            input = 'rgbaaaaaa(113, 54, 4, .33)'\n+            expect(() => rgb2hex(input)).toThrow(invalidErrorMessage(input))\n+        })\n     })\n \n     describe('not care about', () => {\n@@ -132,4 +144,4 @@ describe('rgb2hex should', () => {\n             expect(rgb2hex(`${values}rgba(226,230,233,0.4)${values}`).hex)\n         })\n     })\n-})\n+})\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b45bf84a2eb95fd683421c54eed843c992fce75b",
            "date": "2023-07-09T20:05:26Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a84f970bc1089f04c3dbe1835f3e14262e10015c",
            "date": "2023-07-18T20:11:58Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "36132ca3707457b6952e131f7d455d60b0c25f59",
            "date": "2023-01-06T01:33:26Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c42fd80d32768c7579a28f0f0c0627ef07a1732f",
            "date": "2022-12-02T08:23:24Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "820da01a152e37e138f44e3dfd0bed3f8c86de74",
            "date": "2022-12-02T04:23:18Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-1333",
    "description": "A vulnerability was found in rgb2hex up to 0.1.5. It has been rated as problematic. This issue affects some unknown processing. The manipulation leads to inefficient regular expression complexity. The attack may be initiated remotely. Upgrading to version 0.1.6 is able to address this issue. The patch is named 9e0c38594432edfa64136fdf7bb651835e17c34f. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217151.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-31T20:15:08.817",
    "last_modified": "2024-11-21T04:03:28.010",
    "fix_date": "2018-07-05T09:40:04Z"
  },
  "references": [
    {
      "url": "https://github.com/christian-bromann/rgb2hex/commit/9e0c38594432edfa64136fdf7bb651835e17c34f",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/christian-bromann/rgb2hex/releases/tag/v0.1.6",
      "source": "cna@vuldb.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217151",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217151",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/christian-bromann/rgb2hex/commit/9e0c38594432edfa64136fdf7bb651835e17c34f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/christian-bromann/rgb2hex/releases/tag/v0.1.6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.217151",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.217151",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.241104",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rgb2hex",
    "owner": "christian-bromann",
    "created_at": "2014-04-21T23:36:04Z",
    "updated_at": "2024-01-12T17:58:58Z",
    "pushed_at": "2023-10-17T01:41:50Z",
    "size": 660,
    "stars": 14,
    "forks": 8,
    "open_issues": 2,
    "watchers": 14,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 9844
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T22:00:49.249093"
  }
}