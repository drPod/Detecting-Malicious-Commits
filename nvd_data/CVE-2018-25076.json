{
  "cve_id": "CVE-2018-25076",
  "github_data": {
    "repository": "timbuckingham/bigtree-events",
    "fix_commit": "11169e48ab1249109485fdb1e0c9fca3d25ba01d",
    "related_commits": [
      "11169e48ab1249109485fdb1e0c9fca3d25ba01d",
      "11169e48ab1249109485fdb1e0c9fca3d25ba01d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "11169e48ab1249109485fdb1e0c9fca3d25ba01d",
      "commit_date": "2018-03-19T15:03:37Z",
      "author": {
        "login": "timbuckingham",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Added methods for getting a page of upcoming events, fixed SQL injection in searches",
        "length": 84,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 118,
        "additions": 107,
        "deletions": 11
      },
      "files": [
        {
          "filename": "classes/events.php",
          "status": "modified",
          "additions": 102,
          "deletions": 6,
          "patch": "@@ -1012,14 +1012,16 @@ static function getRandomFeaturedEventByDate($date) {\n \n \t\tstatic function getSearchResultsInDateRange($query,$start_date,$end_date,$featured = false) {\n \t\t\t$events = array();\n+\t\t\t$words = explode(\" \",$query);\n+\t\t\t$qwords = array();\n+\n \t\t\tif ($featured) {\n \t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n \t\t\t}\n \n-\t\t\t$words = explode(\" \",$query);\n-\t\t\t$qwords = array();\n \t\t\tif ($words) {\n \t\t\t\tforeach ($words as $word) {\n+\t\t\t\t\t$word = sqlescape($word);\n \t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n \t\t\t\t}\n \t\t\t\t$qwords = implode(\" AND \",$qwords).\" AND \";\n@@ -1296,32 +1298,116 @@ static function getUpcomingFeaturedEventsInCategoriesWithSubcategories($limit =\n \t\t\t\tAn array of event instances ordered by soonest.\n \t\t*/\n \n-\t\tstatic function getUpcomingSearchResults($query,$limit = 5,$featured = false) {\n+\t\tstatic function getUpcomingSearchResults($query, $limit = 5, $featured = false) {\n \t\t\t$events = array();\n+\t\t\t$qwords = array();\n+\t\t\t$words = explode(\" \",$query);\n+\n \t\t\tif ($featured) {\n \t\t\t\t$featured = \" AND btx_events_events.featured = 'on' \";\n \t\t\t}\n \n+\t\t\tif ($words) {\n+\t\t\t\tforeach ($words as $word) {\n+\t\t\t\t\t$word = sqlescape($word);\n+\t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n+\t\t\t\t}\n+\n+\t\t\t\t$qwords = implode(\" AND \",$qwords).\" AND \";\n+\t\t\t} else {\n+\t\t\t\t$qwords = \"\";\n+\t\t\t}\n+\n+\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND $qwords btx_events_date_cache.end >= NOW() $featured ORDER BY btx_events_date_cache.start ASC LIMIT $limit\");\n+\n+\t\t\twhile ($f = sqlfetch($q)) {\n+\t\t\t\t$event = self::get($f);\n+\t\t\t\t$events[] = $event;\n+\t\t\t}\n+\t\t\treturn $events;\n+\t\t}\n+\n+\t\t/*\n+\t\t\tFunction: getUpcomingSearchResultsPage\n+\t\t\t\tReturns a page of event instances matching a given query that are occurring in the future.\n+\t\t\t\n+\t\t\tParameters:\n+\t\t\t\tquery - The string to search for.\n+\t\t\t\tpage - The page to return\n+\t\t\t\tper_page - The number of event instances to return per page.\n+\t\t\t\n+\t\t\tReturns:\n+\t\t\t\tAn array of event instances ordered by soonest.\n+\t\t*/\n+\n+\t\tstatic function getUpcomingSearchResultsPage($query, $page = 1, $per_page = 10) {\n+\t\t\t$events = array();\n \t\t\t$words = explode(\" \",$query);\n \t\t\t$qwords = array();\n+\n \t\t\tif ($words) {\n \t\t\t\tforeach ($words as $word) {\n+\t\t\t\t\t$word = sqlescape($word);\n \t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n \t\t\t\t}\n+\n \t\t\t\t$qwords = implode(\" AND \",$qwords).\" AND \";\n \t\t\t} else {\n \t\t\t\t$qwords = \"\";\n \t\t\t}\n \n-\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND $qwords btx_events_date_cache.end >= NOW() $featured ORDER BY btx_events_date_cache.start ASC LIMIT $limit\");\n+\t\t\t$limit = (($page - 1) * $per_page).\", $per_page\";\n+\n+\t\t\t$q = sqlquery(\"SELECT btx_events_date_cache.start,btx_events_date_cache.end,btx_events_date_cache.id as instance,btx_events_date_cache.title_route AS title_route, btx_events_date_cache.date_route AS date_route,btx_events_events.* FROM btx_events_events JOIN btx_events_date_cache WHERE btx_events_date_cache.event = btx_events_events.id AND $qwords btx_events_date_cache.end >= NOW() ORDER BY btx_events_date_cache.start ASC LIMIT $limit\");\n \n \t\t\twhile ($f = sqlfetch($q)) {\n \t\t\t\t$event = self::get($f);\n \t\t\t\t$events[] = $event;\n \t\t\t}\n+\n \t\t\treturn $events;\n \t\t}\n \n+\t\t/*\n+\t\t\tFunction: getUpcomingSearchResultsPage\n+\t\t\t\tReturns the number of pages of event instances matching a given query that are occurring in the future.\n+\t\t\t\n+\t\t\tParameters:\n+\t\t\t\tquery - The string to search for.\n+\t\t\t\tper_page - The number of event instances per page.\n+\t\t\t\n+\t\t\tReturns:\n+\t\t\t\tAn integer.\n+\t\t*/\n+\n+\t\tstatic function getUpcomingSearchResultsPageCount($query, $per_page = 10) {\n+\t\t\t$events = array();\n+\t\t\t$words = explode(\" \",$query);\n+\t\t\t$qwords = array();\n+\n+\t\t\tif ($words) {\n+\t\t\t\tforeach ($words as $word) {\n+\t\t\t\t\t$word = sqlescape($word);\n+\t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\t$qwords = implode(\" AND \",$qwords).\" AND \";\n+\t\t\t} else {\n+\t\t\t\t$qwords = \"\";\n+\t\t\t}\n+\n+\t\t\t$limit = (($page - 1) * $per_page).\", $per_page\";\n+\n+\t\t\t$f = sqlfetch(sqlquery(\"SELECT COUNT(btx_events_date_cache.id) AS `count`\n+\t\t\t\t\t\t\t\t\tFROM btx_events_events JOIN btx_events_date_cache\n+\t\t\t\t\t\t\t\t\tON btx_events_date_cache.event = btx_events_events.id\n+\t\t\t\t\t\t\t\t\tWHERE $qwords btx_events_date_cache.end >= NOW()\"));\n+\n+\t\t\t$pages = ceil($f[\"count\"] / $per_page);\n+\n+\t\t\treturn $pages ?: 1;\n+\t\t}\n+\n \t\t/*\n \t\t\tFunction: getUpcomingFeaturedSearchResults\n \t\t\t\tReturns featured event instances matching a given query that are occurring in the future.\n@@ -1365,10 +1451,13 @@ static function recacheEvent($id) {\n \t\tstatic function searchResults($query) {\n \t\t\t$words = explode(\" \",$query);\n \t\t\t$qwords = array();\n+\n \t\t\tif ($words) {\n \t\t\t\tforeach ($words as $word) {\n+\t\t\t\t\t$word = sqlescape($word);\n \t\t\t\t\t$qwords[] = \"(title LIKE '%$word%' OR description LIKE '%$word%')\";\n \t\t\t\t}\n+\n \t\t\t\t$qwords = \" AND \".implode(\" AND \",$qwords);\n \t\t\t} else {\n \t\t\t\t$qwords = \"\";\n@@ -1377,10 +1466,12 @@ static function searchResults($query) {\n \t\t\t$q = sqlquery(\"SELECT * FROM btx_events_events WHERE 1 $qwords ORDER BY id DESC\");\n \n \t\t\t$events = array();\n+\n \t\t\twhile ($f = sqlfetch($q)) {\n \t\t\t\t$event = self::get($f);\n \t\t\t\t$events[] = $event;\n \t\t\t}\n+\n \t\t\treturn $events;\n \t\t}\n \n@@ -1396,21 +1487,24 @@ static function searchResults($query) {\n \t\t\t\tAn array of decoded event entries from the database.\n \t\t*/\n \n-\t\tstatic function searchResultsInCategory($query,$category) {\n+\t\tstatic function searchResultsInCategory($query, $category) {\n \t\t\t$category = is_array($category) ? sqlescape($category[\"id\"]) : sqlescape($category);\n \t\t\t$with_sub = array_merge(array($category),self::getSubcategoriesOfCategory($category));\n-\n \t\t\t$cat_search = array();\n+\n \t\t\tforeach ($with_sub as $category) {\n \t\t\t\t$cat_search[] = \"btx_events_event_categories.category = '$category'\";\n \t\t\t}\n \n \t\t\t$words = explode(\" \",$query);\n \t\t\t$qwords = array();\n+\n \t\t\tif ($words) {\n \t\t\t\tforeach ($words as $word) {\n+\t\t\t\t\t$word = sqlescape($word);\n \t\t\t\t\t$qwords[] = \"(btx_events_events.title LIKE '%$word%' OR btx_events_events.description LIKE '%$word%')\";\n \t\t\t\t}\n+\n \t\t\t\t$qwords = \" AND \".implode(\" AND \",$qwords);\n \t\t\t} else {\n \t\t\t\t$qwords = \"\";\n@@ -1419,10 +1513,12 @@ static function searchResultsInCategory($query,$category) {\n \t\t\t$q = sqlquery(\"SELECT DISTINCT(btx_events_event_categories.event),btx_events_events.* FROM btx_events_events JOIN btx_events_event_categories WHERE btx_events_events.id = btx_events_event_categories.event $qwords AND (\".implode(\" OR \",$cat_search).\") ORDER BY id DESC\");\n \n \t\t\t$events = array();\n+\n \t\t\twhile ($f = sqlfetch($q)) {\n \t\t\t\t$event = self::get($f);\n \t\t\t\t$events[] = $event;\n \t\t\t}\n+\n \t\t\treturn $events;\n \t\t}\n \t\t"
        },
        {
          "filename": "manifest.json",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -2,7 +2,7 @@\n     \"type\": \"extension\",\n     \"id\": \"com.fastspot.events\",\n     \"version\": \"1.2.1\",\n-    \"revision\": 7,\n+    \"revision\": 6,\n     \"compatibility\": \"4.2.4+\",\n     \"title\": \"Events\",\n     \"description\": \"A very fast (performance wise) events system that supports recurring events and a powerful class for pulling events into the front end of your site.\",\n@@ -372,10 +372,10 @@\n             }\n         ],\n         \"tables\": {\n-            \"btx_events_categories\": \"CREATE TABLE `btx_events_categories` (   `id` int(11) unsigned NOT NULL AUTO_INCREMENT,   `parent` int(11) unsigned DEFAULT NULL,   `name` varchar(255) NOT NULL DEFAULT '',   `route` varchar(255) NOT NULL DEFAULT '',   `position` int(11) unsigned NOT NULL,   PRIMARY KEY (`id`),   KEY `parent` (`parent`),   KEY `route` (`route`),   KEY `position` (`position`),    FOREIGN KEY (`parent`) REFERENCES `btx_events_categories` (`id`) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n-            \"btx_events_date_cache\": \"CREATE TABLE `btx_events_date_cache` (   `id` int(11) unsigned NOT NULL AUTO_INCREMENT,   `event` int(11) unsigned NOT NULL,   `start` datetime NOT NULL,   `end` datetime NOT NULL,   `date_cached` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,   `title_route` varchar(255) NOT NULL DEFAULT '',   `date_route` varchar(255) NOT NULL DEFAULT '',   PRIMARY KEY (`id`),   KEY `event` (`event`),   KEY `start` (`start`),   KEY `end` (`end`),   KEY `title_route` (`title_route`),   KEY `date_route` (`date_route`),   KEY `date_cached` (`date_cached`),    FOREIGN KEY (`event`) REFERENCES `btx_events_events` (`id`) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n-            \"btx_events_event_categories\": \"CREATE TABLE `btx_events_event_categories` (   `event` int(11) unsigned NOT NULL,   `category` int(11) unsigned NOT NULL,   KEY `event` (`event`),   KEY `category` (`category`),    FOREIGN KEY (`event`) REFERENCES `btx_events_events` (`id`) ON DELETE CASCADE,    FOREIGN KEY (`category`) REFERENCES `btx_events_categories` (`id`) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n-            \"btx_events_events\": \"CREATE TABLE `btx_events_events` (   `id` int(11) unsigned NOT NULL AUTO_INCREMENT,   `title` varchar(255) NOT NULL DEFAULT '',   `description` mediumtext NOT NULL,   `image` varchar(255) NOT NULL,   `start_date` date DEFAULT NULL,   `end_date` date DEFAULT NULL,   `start_time` time DEFAULT NULL,   `end_time` time DEFAULT NULL,   `all_day` char(2) NOT NULL,   `recurrence_type` varchar(255) NOT NULL,   `recurrence_detail` varchar(255) NOT NULL,   `canceled_recurrences` text NOT NULL,   `recurring_end_date` date DEFAULT NULL,   `last_updated` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,   `featured` char(2) NOT NULL,   `route` varchar(255) DEFAULT NULL,   PRIMARY KEY (`id`),   KEY `start_date` (`start_date`),   KEY `end_date` (`end_date`),   KEY `recurring_end_date` (`recurring_end_date`),   KEY `recurrence_type` (`recurrence_type`),   KEY `featured` (`featured`),   KEY `route` (`route`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8\"\n+            \"btx_events_categories\": \"CREATE TABLE `btx_events_categories` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `parent` int(11) DEFAULT NULL,   `name` varchar(255) NOT NULL DEFAULT '',   `route` varchar(255) NOT NULL DEFAULT '',   `position` int(11) NOT NULL,   PRIMARY KEY (`id`),   KEY `parent` (`parent`),   KEY `route` (`route`),   KEY `position` (`position`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n+            \"btx_events_date_cache\": \"CREATE TABLE `btx_events_date_cache` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `event` int(11) NOT NULL,   `start` datetime NOT NULL,   `end` datetime NOT NULL,   `date_cached` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,   `title_route` varchar(255) NOT NULL DEFAULT '',   `date_route` varchar(255) NOT NULL DEFAULT '',   PRIMARY KEY (`id`),   KEY `event` (`event`),   KEY `start` (`start`),   KEY `end` (`end`),   KEY `title_route` (`title_route`),   KEY `date_route` (`date_route`),   KEY `date_cached` (`date_cached`),    FOREIGN KEY (`event`) REFERENCES `btx_events_events` (`id`) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n+            \"btx_events_event_categories\": \"CREATE TABLE `btx_events_event_categories` (   `event` int(11) NOT NULL,   `category` int(11) NOT NULL,   KEY `event` (`event`),   KEY `category` (`category`),    FOREIGN KEY (`event`) REFERENCES `btx_events_events` (`id`) ON DELETE CASCADE,    FOREIGN KEY (`category`) REFERENCES `btx_events_categories` (`id`) ON DELETE CASCADE ) ENGINE=InnoDB DEFAULT CHARSET=utf8\",\n+            \"btx_events_events\": \"CREATE TABLE `btx_events_events` (   `id` int(11) NOT NULL AUTO_INCREMENT,   `title` varchar(255) NOT NULL DEFAULT '',   `description` mediumtext NOT NULL,   `image` varchar(255) NOT NULL,   `start_date` date DEFAULT NULL,   `end_date` date DEFAULT NULL,   `start_time` time DEFAULT NULL,   `end_time` time DEFAULT NULL,   `all_day` char(2) NOT NULL,   `recurrence_type` varchar(255) NOT NULL,   `recurrence_detail` varchar(255) NOT NULL,   `canceled_recurrences` text NOT NULL,   `recurring_end_date` date DEFAULT NULL,   `last_updated` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,   `featured` char(2) NOT NULL,   `route` varchar(255) DEFAULT NULL,   PRIMARY KEY (`id`),   KEY `start_date` (`start_date`),   KEY `end_date` (`end_date`),   KEY `recurring_end_date` (`recurring_end_date`),   KEY `recurrence_type` (`recurrence_type`),   KEY `featured` (`featured`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8\"\n         }\n     },\n     \"sql_revisions\": []"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0c36a7e4019034149f49c26612e793c4ccb158f8",
            "date": "2018-08-03T18:01:27Z",
            "author_login": "timbuckingham"
          },
          {
            "sha": "11169e48ab1249109485fdb1e0c9fca3d25ba01d",
            "date": "2018-03-19T15:03:37Z",
            "author_login": "timbuckingham"
          },
          {
            "sha": "7b2feffcf16ad3aa30f931f3c468ed3333e95eea",
            "date": "2018-02-13T17:14:03Z",
            "author_login": "timbuckingham"
          },
          {
            "sha": "d7554b3e0956b0063ce3db58de9a71282351191e",
            "date": "2017-03-23T18:20:23Z",
            "author_login": "timbuckingham"
          },
          {
            "sha": "e1fbf45d4939fe836409c23f7d9d1cac32b75ee3",
            "date": "2017-03-23T17:32:59Z",
            "author_login": "timbuckingham"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-89",
    "description": "A vulnerability classified as critical was found in Events Extension on BigTree. Affected by this vulnerability is the function getRandomFeaturedEventByDate/getUpcomingFeaturedEventsInCategoriesWithSubcategories/recacheEvent/searchResults of the file classes/events.php. The manipulation leads to sql injection. The patch is named 11169e48ab1249109485fdb1e0c9fca3d25ba01d. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218395.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-01-16T12:15:16.347",
    "last_modified": "2024-11-21T04:03:30.100",
    "fix_date": "2018-03-19T15:03:37Z"
  },
  "references": [
    {
      "url": "https://github.com/timbuckingham/bigtree-events/commit/11169e48ab1249109485fdb1e0c9fca3d25ba01d",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.218395",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.218395",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/timbuckingham/bigtree-events/commit/11169e48ab1249109485fdb1e0c9fca3d25ba01d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.218395",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.218395",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.561465",
    "processing_status": "enhanced"
  }
}