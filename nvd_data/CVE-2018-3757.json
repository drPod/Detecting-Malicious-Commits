{
  "cve_id": "CVE-2018-3757",
  "github_data": {
    "repository": "roest01/node-pdf-image",
    "fix_commit": "54679496a89738443917608c2bbe2f6e5dd20e83",
    "related_commits": [
      "54679496a89738443917608c2bbe2f6e5dd20e83",
      "54679496a89738443917608c2bbe2f6e5dd20e83"
    ],
    "patch_url": "https://github.com/roest01/node-pdf-image/commit/54679496a89738443917608c2bbe2f6e5dd20e83.patch",
    "fix_commit_details": {
      "sha": "54679496a89738443917608c2bbe2f6e5dd20e83",
      "commit_date": "2018-05-13T23:43:20Z",
      "author": {
        "login": "roest01",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "resolve #340208 - Command injection in 'pdf-image', Severity:Medium (6.1) - fix #38 - solution for v2",
        "length": 101,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 156,
        "additions": 91,
        "deletions": 65
      },
      "files": [
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 59,
          "deletions": 57,
          "patch": "@@ -5,7 +5,7 @@ var Promise = require(\"es6-promise\").Promise;\n var path = require(\"path\");\n var fs   = require(\"fs\");\n var util = require(\"util\");\n-var exec = require(\"child_process\").exec;\n+var spawn = require(\"child-process-promise\").spawn;\n \n function PDFImage(pdfFilePath, options) {\n   if (!options) options = {};\n@@ -23,10 +23,10 @@ function PDFImage(pdfFilePath, options) {\n \n PDFImage.prototype = {\n   constructGetInfoCommand: function () {\n-    return util.format(\n-      \"pdfinfo \\\"%s\\\"\",\n-      this.pdfFilePath\n-    );\n+    return {\n+      cmd: \"pdfinfo\",\n+      args: [this.pdfFilePath]\n+    };\n   },\n   parseGetInfoCommandOutput: function (output) {\n     var info = {};\n@@ -40,20 +40,12 @@ PDFImage.prototype = {\n   getInfo: function () {\n     var self = this;\n     var getInfoCommand = this.constructGetInfoCommand();\n-    var promise = new Promise(function (resolve, reject) {\n-      exec(getInfoCommand, function (err, stdout, stderr) {\n-        if (err) {\n-          return reject({\n-            message: \"Failed to get PDF'S information\",\n-            error: err,\n-            stdout: stdout,\n-            stderr: stderr\n-          });\n-        }\n-        return resolve(self.parseGetInfoCommandOutput(stdout));\n-      });\n+    return new Promise(function (resolve, reject) {\n+      spawn(getInfoCommand.cmd, getInfoCommand.args, { capture: [ 'stdout', 'stderr' ]})\n+        .then(function (cmdResult) {\n+          resolve(self.parseGetInfoCommandOutput(cmdResult.stdout.toString()));\n+        }).catch(reject);\n     });\n-    return promise;\n   },\n   numberOfPages: function () {\n     return this.getInfo().then(function (info) {\n@@ -84,46 +76,53 @@ PDFImage.prototype = {\n   constructConvertCommandForPage: function (pageNumber) {\n     var pdfFilePath = this.pdfFilePath;\n     var outputImagePath = this.getOutputImagePathForPage(pageNumber);\n-    var convertOptionsString = this.constructConvertOptions();\n-    return util.format(\n-      \"%s %s\\\"%s[%d]\\\" \\\"%s\\\"\",\n-      this.useGM ? \"gm convert\" : \"convert\",\n-      convertOptionsString ? convertOptionsString + \" \" : \"\",\n-      pdfFilePath, pageNumber, outputImagePath\n-    );\n+    var convertOptions = this.constructConvertOptions();\n+    var args = [];\n+    if (convertOptions) args = convertOptions.slice();\n+    args.push(pdfFilePath+\"[\"+pageNumber+\"]\");\n+    args.push(outputImagePath);\n+\n+    return {\n+      cmd: this.useGM ? \"gm convert\" : \"convert\",\n+      args: args\n+    };\n   },\n   constructCombineCommandForFile: function (imagePaths) {\n-    return util.format(\n-      \"%s -append %s \\\"%s\\\"\",\n-      this.useGM ? \"gm convert\" : \"convert\",\n-      imagePaths.join(' '),\n-      this.getOutputImagePathForFile()\n-    );\n+    var args = imagePaths.slice();\n+    args.push(this.getOutputImagePathForFile());\n+    args.unshift(\"-append\");\n+    return {\n+      cmd: this.useGM ? \"gm convert\" : \"convert\",\n+      args: args\n+    };\n   },\n   constructConvertOptions: function () {\n-    return Object.keys(this.convertOptions).sort().map(function (optionName) {\n+    var convertOptions = [];\n+    Object.keys(this.convertOptions).sort().map(function (optionName) {\n       if (this.convertOptions[optionName] !== null) {\n-        return optionName + \" \" + this.convertOptions[optionName];\n+        convertOptions.push(optionName);\n+        convertOptions.push(this.convertOptions[optionName]);\n       } else {\n-        return optionName;\n+        convertOptions.push(optionName);\n       }\n-    }, this).join(\" \");\n+    }, this);\n+    return convertOptions;\n   },\n   combineImages: function(imagePaths) {\n     var pdfImage = this;\n     var combineCommand = pdfImage.constructCombineCommandForFile(imagePaths);\n     return new Promise(function (resolve, reject) {\n-      exec(combineCommand, function (err, stdout, stderr) {\n-        if (err) {\n-          return reject({\n+      spawn(combineCommand.cmd, combineCommand.args, { capture: [ 'stdout', 'stderr' ]})\n+        .then(function () {\n+          spawn(\"rm\", imagePaths); //cleanUp\n+          resolve(pdfImage.getOutputImagePathForFile());\n+        }).catch(function(error){\n+          reject({\n             message: \"Failed to combine images\",\n-            error: err,\n-            stdout: stdout,\n-            stderr: stderr\n+            error: error.message,\n+            stdout: error.stdout,\n+            stderr: error.stderr\n           });\n-        }\n-        exec(\"rm \"+imagePaths.join(' ')); //cleanUp\n-        return resolve(pdfImage.getOutputImagePathForFile());\n       });\n     });\n   },\n@@ -167,16 +166,18 @@ PDFImage.prototype = {\n \n     var promise = new Promise(function (resolve, reject) {\n       function convertPageToImage() {\n-        exec(convertCommand, function (err, stdout, stderr) {\n-          if (err) {\n-            return reject({\n+        return new Promise(function (resolve, reject) {\n+          spawn(convertCommand.cmd, convertCommand.args, { capture: [ 'stdout', 'stderr' ]})\n+            .then(function () {\n+              resolve(outputImagePath);\n+            }).catch(function(error){\n+            reject({\n               message: \"Failed to convert page to image\",\n-              error: err,\n-              stdout: stdout,\n-              stderr: stderr\n+              error: error.message,\n+              stdout: error.stdout,\n+              stderr: error.stderr\n             });\n-          }\n-          return resolve(outputImagePath);\n+          });\n         });\n       }\n \n@@ -194,7 +195,9 @@ PDFImage.prototype = {\n \n         if (imageNotExists) {\n           // (1)\n-          convertPageToImage();\n+          convertPageToImage().then(function(result){\n+            resolve(result);\n+          }).catch(reject);\n           return;\n         }\n \n@@ -209,11 +212,10 @@ PDFImage.prototype = {\n \n           if (imageFileStat.mtime < pdfFileStat.mtime) {\n             // (2)\n-            convertPageToImage();\n-            return;\n+            convertPageToImage().then(function(result){\n+              resolve(result);\n+            }).catch(reject);\n           }\n-\n-          return resolve(outputImagePath);\n         });\n       });\n     });"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -11,7 +11,8 @@\n   },\n   \"homepage\": \"https://github.com/mooz/node-pdf-image#readme\",\n   \"dependencies\": {\n-    \"es6-promise\": \"~4.2.4\"\n+    \"es6-promise\": \"~4.2.4\",\n+    \"child-process-promise\": \"^2.2.1\"\n   },\n   \"devDependencies\": {\n     \"chai\": \"~4.1.2\","
        },
        {
          "filename": "tests/test-main.js",
          "status": "modified",
          "additions": 30,
          "deletions": 7,
          "patch": "@@ -45,19 +45,22 @@ describe(\"PDFImage\", function () {\n   });\n \n   it(\"should return correct convert command\", function () {\n-    expect(pdfImage.constructConvertCommandForPage(1))\n-      .equal('convert \"/tmp/test.pdf[1]\" \"/tmp/test-1.png\"');\n+    var convertCommand = pdfImage.constructConvertCommandForPage(1);\n+    expect(convertCommand.cmd).equal(\"convert\");\n+    expect(convertCommand.args.length).equal(2);\n   });\n \n   it(\"should return correct convert command to combine images\", function () {\n-    expect(pdfImage.constructCombineCommandForFile(['/tmp/test-0.png', '/tmp/test-1.png']))\n-      .equal('convert -append /tmp/test-0.png /tmp/test-1.png \"/tmp/test.png\"');\n+    var cmdConfig = pdfImage.constructCombineCommandForFile(['/tmp/test-0.png', '/tmp/test-1.png']);\n+    expect(cmdConfig.cmd).equal('convert');\n+    expect(cmdConfig.args.length).equal(4);\n   });\n \n   it(\"should use gm when you ask it to\", function () {\n     pdfImage = new PDFImage(pdfPath, {graphicsMagick: true});\n-    expect(pdfImage.constructConvertCommandForPage(1))\n-      .equal('gm convert \"/tmp/test.pdf[1]\" \"/tmp/test-1.png\"');\n+    var cmdConfig = pdfImage.constructConvertCommandForPage(1);\n+    expect(cmdConfig.cmd).equal('gm convert');\n+    expect(cmdConfig.args.length).equal(2);\n   });\n \n   // TODO: Do page updating test\n@@ -148,7 +151,27 @@ describe(\"PDFImage\", function () {\n       \"-density\": 300,\n       \"-trim\": null\n     });\n-    expect(pdfImage.constructConvertOptions()).equal(\"-density 300 -trim\");\n+    expect(pdfImage.constructConvertOptions()[0]).equal(\"-density 300\");\n+    expect(pdfImage.constructConvertOptions()[1]).equal(\"-trim\");\n+  });\n+\n+  it(\"should convert all PDF's pages with convertOptions\", function () {\n+    return new Promise(function(resolve, reject){\n+      pdfImage.setConvertOptions({\n+        \"-quality\": 100,\n+        \"-trim\": null\n+      });\n+\n+      pdfImage.convertFile().then(function (images) {\n+        images.forEach(function(image){\n+          expect(fs.existsSync(image)).to.be.true;\n+        });\n+        generatedFiles = images;\n+        resolve();\n+      }).catch(function (error) {\n+        reject(error.message + \" \" + error.stderr);\n+      });\n+    })\n   });\n \n   afterEach(function(done){"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d8c0dcadd93985dbefe80b84060f5f572bfbb6ff",
            "date": "2018-05-07T14:10:36Z",
            "author_login": "mooz"
          },
          {
            "sha": "039ac28b0922e7cd3ec88087c79a8ce44e2fc29b",
            "date": "2018-05-07T13:18:15Z",
            "author_login": "mooz"
          },
          {
            "sha": "380953591d4e43dfb6b8a098a6da50ee41f82160",
            "date": "2018-05-07T13:17:24Z",
            "author_login": "mooz"
          },
          {
            "sha": "31edb6b1c5ed1330db93d7765e4d8ede60f859b0",
            "date": "2018-05-03T12:42:53Z",
            "author_login": "roest01"
          },
          {
            "sha": "623d1b856916e7365b6a436f24f38c7188bb23da",
            "date": "2018-05-03T12:36:53Z",
            "author_login": "roest01"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "Command injection exists in pdf-image v2.0.0 due to an unescaped string parameter.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2018-06-01T19:29:00.393",
    "last_modified": "2024-11-21T04:06:01.110",
    "fix_date": "2018-05-13T23:43:20Z"
  },
  "references": [
    {
      "url": "https://github.com/roest01/node-pdf-image/commit/54679496a89738443917608c2bbe2f6e5dd20e83",
      "source": "support@hackerone.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://hackerone.com/reports/340208",
      "source": "support@hackerone.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/roest01/node-pdf-image/commit/54679496a89738443917608c2bbe2f6e5dd20e83",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://hackerone.com/reports/340208",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:25.875901",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "node-pdf-image",
    "owner": "roest01",
    "created_at": "2018-05-03T08:29:03Z",
    "updated_at": "2018-05-13T22:58:52Z",
    "pushed_at": "2018-07-10T14:11:18Z",
    "size": 44,
    "stars": 0,
    "forks": 2,
    "open_issues": 0,
    "watchers": 0,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 12262
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:08:22.689548"
  }
}