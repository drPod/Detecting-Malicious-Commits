{
  "cve_id": "CVE-2018-3774",
  "github_data": {
    "repository": "unshiftio/url-parse",
    "fix_commit": "53b1794e54d0711ceb52505e0f74145270570d5a",
    "related_commits": [
      "53b1794e54d0711ceb52505e0f74145270570d5a",
      "d7b582ec1243e8024e60ac0b62d2569c939ef5de",
      "53b1794e54d0711ceb52505e0f74145270570d5a",
      "d7b582ec1243e8024e60ac0b62d2569c939ef5de"
    ],
    "patch_url": "https://github.com/unshiftio/url-parse/commit/53b1794e54d0711ceb52505e0f74145270570d5a.patch",
    "fix_commit_details": {
      "sha": "53b1794e54d0711ceb52505e0f74145270570d5a",
      "commit_date": "2018-07-29T12:26:05Z",
      "author": {
        "login": "3rd-Eden",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[security] Sanitize paths, hosts before parsing.",
        "length": 48,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 59,
        "additions": 50,
        "deletions": 9
      },
      "files": [
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 21,
          "deletions": 9,
          "patch": "@@ -20,6 +20,9 @@ var required = require('requires-port')\n var rules = [\n   ['#', 'hash'],                        // Extract from the back.\n   ['?', 'query'],                       // Extract from the back.\n+  function sanitize(address) {          // Sanitize what is left of the address\n+    return address.replace('\\\\', '/');\n+  },\n   ['/', 'pathname'],                    // Extract from the back.\n   ['@', 'auth', 1],                     // Extract from the front.\n   [NaN, 'host', undefined, 1, 1],       // Set left over value.\n@@ -47,7 +50,7 @@ var ignore = { hash: 1, query: 1 };\n  *\n  * @param {Object|String} loc Optional default location object.\n  * @returns {Object} lolcation object.\n- * @api public\n+ * @public\n  */\n function lolcation(loc) {\n   var location = global && global.location || {};\n@@ -89,7 +92,7 @@ function lolcation(loc) {\n  *\n  * @param {String} address URL we want to extract from.\n  * @return {ProtocolExtract} Extracted information.\n- * @api private\n+ * @private\n  */\n function extractProtocol(address) {\n   var match = protocolre.exec(address);\n@@ -107,7 +110,7 @@ function extractProtocol(address) {\n  * @param {String} relative Pathname of the relative URL.\n  * @param {String} base Pathname of the base URL.\n  * @return {String} Resolved pathname.\n- * @api private\n+ * @private\n  */\n function resolve(relative, base) {\n   var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))\n@@ -140,11 +143,14 @@ function resolve(relative, base) {\n  * create an actual constructor as it's much more memory efficient and\n  * faster and it pleases my OCD.\n  *\n+ * It is worth noting that we should not use `URL` as class name to prevent\n+ * clashes with the global URL instance that got introduced in browsers.\n+ *\n  * @constructor\n  * @param {String} address URL we want to parse.\n  * @param {Object|String} location Location defaults for relative paths.\n  * @param {Boolean|Function} parser Parser for the query string.\n- * @api public\n+ * @private\n  */\n function Url(address, location, parser) {\n   if (!(this instanceof Url)) {\n@@ -190,10 +196,16 @@ function Url(address, location, parser) {\n   // When the authority component is absent the URL starts with a path\n   // component.\n   //\n-  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];\n+  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];\n \n   for (; i < instructions.length; i++) {\n     instruction = instructions[i];\n+\n+    if (typeof instruction === 'function') {\n+      address = instruction(address);\n+      continue;\n+    }\n+\n     parse = instruction[0];\n     key = instruction[1];\n \n@@ -284,8 +296,8 @@ function Url(address, location, parser) {\n  *                               used to parse the query.\n  *                               When setting the protocol, double slash will be\n  *                               removed from the final url if it is true.\n- * @returns {URL}\n- * @api public\n+ * @returns {URL} URL instance for chaining.\n+ * @public\n  */\n function set(part, value, fn) {\n   var url = this;\n@@ -370,8 +382,8 @@ function set(part, value, fn) {\n  * Transform the properties back in to a valid and full URL string.\n  *\n  * @param {Function} stringify Optional query stringify function.\n- * @returns {String}\n- * @api public\n+ * @returns {String} Compiled version of the URL.\n+ * @public\n  */\n function toString(stringify) {\n   if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;"
        },
        {
          "filename": "test/test.js",
          "status": "modified",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -192,6 +192,28 @@ describe('url-parse', function () {\n     assume(parsed.pathname).equals('/b/c');\n   });\n \n+  it('ignores \\\\ in pathnames', function () {\n+    var url = 'http://google.com:80\\\\@yahoo.com/#what\\\\is going on'\n+      , parsed = parse(url);\n+\n+    assume(parsed.port).equals('');\n+    assume(parsed.username).equals('');\n+    assume(parsed.password).equals('');\n+    assume(parsed.hostname).equals('google.com');\n+    assume(parsed.hash).equals('#what\\\\is going on');\n+\n+    parsed = parse('//\\\\what-is-up.com');\n+    assume(parsed.pathname).equals('/what-is-up.com');\n+  });\n+\n+  it('correctly ignores multiple slashes //', function () {\n+    var url = '////what-is-up.com'\n+      , parsed = parse(url);\n+\n+    assume(parsed.host).equals('');\n+    assume(parsed.hostname).equals('');\n+  });\n+\n   describe('origin', function () {\n     it('generates an origin property', function () {\n       var url = 'http://google.com:80/pathname'\n@@ -252,6 +274,13 @@ describe('url-parse', function () {\n       o = parse('wss://google.com:80/pathname');\n       assume(o.origin).equals('wss://google.com:80');\n     });\n+\n+    it('maintains the port number for non-default port numbers', function () {\n+      var parsed = parse('http://google.com:8080/pathname');\n+\n+      assume(parsed.host).equals('http://google.com:8080');\n+      assume(parsed.href).equals('http://google.com:8080/pathname');\n+    });\n   });\n \n   describe('protocol', function () {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "877225add9c3a2e33ef20ebef94dd397a0965666",
            "date": "2023-01-04T21:10:39Z",
            "author_login": "lpinca"
          },
          {
            "sha": "4487d3160453185c146c582adabab8ff1c09ab91",
            "date": "2022-08-13T18:28:16Z",
            "author_login": "lpinca"
          },
          {
            "sha": "66610bbcdfaa406c97d692e819c26f69e486473c",
            "date": "2022-08-13T18:27:56Z",
            "author_login": "lpinca"
          },
          {
            "sha": "5d8e5e310a86a062fd5ffac392990c67d8a74401",
            "date": "2022-08-13T18:20:35Z",
            "author_login": "lpinca"
          },
          {
            "sha": "5a52bdda35b0c5ee14bfaf9169354d88ac61e218",
            "date": "2022-05-13T18:18:58Z",
            "author_login": "lpinca"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-425",
    "description": "Incorrect parsing in url-parse <1.4.3 returns wrong hostname which leads to multiple vulnerabilities such as SSRF, Open Redirect, Bypass Authentication Protocol.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-08-12T22:29:00.220",
    "last_modified": "2024-11-21T04:06:03.090",
    "fix_date": "2018-07-29T12:26:05Z"
  },
  "references": [
    {
      "url": "https://github.com/unshiftio/url-parse/commit/53b1794e54d0711ceb52505e0f74145270570d5a",
      "source": "support@hackerone.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/unshiftio/url-parse/commit/d7b582ec1243e8024e60ac0b62d2569c939ef5de",
      "source": "support@hackerone.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://hackerone.com/reports/384029",
      "source": "support@hackerone.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/unshiftio/url-parse/commit/53b1794e54d0711ceb52505e0f74145270570d5a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/unshiftio/url-parse/commit/d7b582ec1243e8024e60ac0b62d2569c939ef5de",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://hackerone.com/reports/384029",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:32.436008",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "url-parse",
    "owner": "unshiftio",
    "created_at": "2014-10-13T13:50:59Z",
    "updated_at": "2024-12-31T02:45:51Z",
    "pushed_at": "2023-01-04T21:12:05Z",
    "size": 233,
    "stars": 1032,
    "forks": 107,
    "open_issues": 12,
    "watchers": 1032,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 67671,
      "HTML": 761
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:24:10.289367"
  }
}