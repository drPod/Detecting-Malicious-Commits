{
  "cve_id": "CVE-2018-5801",
  "github_data": {
    "repository": "LibRaw/LibRaw",
    "fix_commit": "0df5490b985c419de008d32168650bff17128914",
    "related_commits": [
      "0df5490b985c419de008d32168650bff17128914",
      "0df5490b985c419de008d32168650bff17128914"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "0df5490b985c419de008d32168650bff17128914",
      "commit_date": "2017-12-06T18:41:19Z",
      "author": {
        "login": "alextutubalin",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "SA79000 advisory fix",
        "length": 20,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 111,
        "additions": 105,
        "deletions": 6
      },
      "files": [
        {
          "filename": "Changelog.txt",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -1,4 +1,11 @@\n-Alex Tutubalin <lexa@lexa.ru>\n+2018-01-19  Alex Tutubalin <lexa@lexa.ru>\n+Secunia #79000: \n+Credit: Laurent Delosieres, Secunia Research at Flexera\n+ * All legacy (RGB raw) image loaders checks for imgdata.image is not NULL\n+ * kodak_radc_load_raw: check image size before processing\n+ * legacy memory allocator: allocate max(widh,raw_width)*max(height,raw_height)\n+\n+2017-12-06 Alex Tutubalin <lexa@lexa.ru>\n Secunia #76000:\n  * Fixed fuji_width handling if file is neither fuji nor DNG\n  * Fixed xtrans interpolate for broken xtrans pattern"
        },
        {
          "filename": "dcraw/dcraw.c",
          "status": "modified",
          "additions": 52,
          "deletions": 2,
          "patch": "@@ -1886,6 +1886,10 @@ void CLASS nikon_load_raw()\n \n void CLASS nikon_yuv_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   int row, col, yuv[4], rgb[3], b, c;\n   UINT64 bitbuf = 0;\n   float cmul[4];\n@@ -2815,6 +2819,10 @@ void CLASS sinar_4shot_load_raw()\n     unpacked_load_raw();\n     return;\n   }\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  else if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   pixel = (ushort *)calloc(raw_width, sizeof *pixel);\n   merror(pixel, \"sinar_4shot_load_raw()\");\n #ifdef LIBRAW_LIBRARY_BUILD\n@@ -2857,8 +2865,10 @@ void CLASS imacon_full_load_raw()\n {\n   int row, col;\n \n-  if (!image)\n-    return;\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n \n #ifdef LIBRAW_LIBRARY_BUILD\n   unsigned short *buf = (unsigned short *)malloc(width * 3 * sizeof(unsigned short));\n@@ -3404,6 +3414,12 @@ void CLASS quicktake_100_load_raw()\n \n void CLASS kodak_radc_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  // All kodak radc images are 768x512\n+  if(width>768 || raw_width>768 || height > 512 || raw_height>512 )\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n+\n   static const signed char src[] = {\n       1, 1,   2, 3,   3, 4,   4, 2,   5, 7,   6, 5,   7, 6,  7, 8,   1, 0,   2, 1,  3, 3,  4, 4,  5, 2,   6, 7,   7, 6,\n       8, 5,   8, 8,   2, 1,   2, 3,   3, 0,   3, 2,   3, 4,  4, 6,   5, 5,   6, 7,  6, 8,  2, 0,  2, 1,   2, 3,   3, 2,\n@@ -3652,6 +3668,10 @@ void CLASS gamma_curve(double pwr, double ts, int mode, int imax);\n \n void CLASS lossy_dng_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   struct jpeg_decompress_struct cinfo;\n   struct jpeg_error_mgr jerr;\n   JSAMPARRAY buf;\n@@ -3806,6 +3826,11 @@ void CLASS eight_bit_load_raw()\n \n void CLASS kodak_c330_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n+\n   uchar *pixel;\n   int row, col, y, cb, cr, rgb[3], c;\n \n@@ -3849,6 +3874,11 @@ void CLASS kodak_c330_load_raw()\n \n void CLASS kodak_c603_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n+\n   uchar *pixel;\n   int row, col, y, cb, cr, rgb[3], c;\n \n@@ -4028,6 +4058,10 @@ void CLASS kodak_65000_load_raw()\n \n void CLASS kodak_ycbcr_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   short buf[384], *bp;\n   int row, col, len, c, i, j, k, y[2][2], cb, cr, rgb[3];\n   ushort *ip;\n@@ -4067,6 +4101,10 @@ void CLASS kodak_ycbcr_load_raw()\n \n void CLASS kodak_rgb_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   short buf[768], *bp;\n   int row, col, len, c, i, rgb[3], ret;\n   ushort *ip = image[0];\n@@ -4096,6 +4134,10 @@ void CLASS kodak_rgb_load_raw()\n \n void CLASS kodak_thumb_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   int row, col;\n   colors = thumb_misc >> 5;\n   for (row = 0; row < height; row++)\n@@ -4809,6 +4851,10 @@ void CLASS foveon_thumb()\n \n void CLASS foveon_sd_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   struct decode *dindex;\n   short diff[1024];\n   unsigned bitbuf = 0;\n@@ -4869,6 +4915,10 @@ void CLASS foveon_huff(ushort *huff)\n \n void CLASS foveon_dp_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   unsigned c, roff[4], row, col, diff;\n   ushort huff[512], vpred[2][2], hpred[2];\n "
        },
        {
          "filename": "internal/dcraw_common.cpp",
          "status": "modified",
          "additions": 44,
          "deletions": 2,
          "patch": "@@ -1595,6 +1595,10 @@ void CLASS nikon_load_raw()\n \n void CLASS nikon_yuv_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   int row, col, yuv[4], rgb[3], b, c;\n   UINT64 bitbuf = 0;\n   float cmul[4];\n@@ -2519,6 +2523,10 @@ void CLASS sinar_4shot_load_raw()\n     unpacked_load_raw();\n     return;\n   }\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  else if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   pixel = (ushort *)calloc(raw_width, sizeof *pixel);\n   merror(pixel, \"sinar_4shot_load_raw()\");\n #ifdef LIBRAW_LIBRARY_BUILD\n@@ -2561,8 +2569,10 @@ void CLASS imacon_full_load_raw()\n {\n   int row, col;\n \n-  if (!image)\n-    return;\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n \n #ifdef LIBRAW_LIBRARY_BUILD\n   unsigned short *buf = (unsigned short *)malloc(width * 3 * sizeof(unsigned short));\n@@ -3108,6 +3118,12 @@ void CLASS quicktake_100_load_raw()\n \n void CLASS kodak_radc_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  // All kodak radc images are 768x512\n+  if(width>768 || raw_width>768 || height > 512 || raw_height>512 )\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n+\n   static const signed char src[] = {\n       1, 1,   2, 3,   3, 4,   4, 2,   5, 7,   6, 5,   7, 6,  7, 8,   1, 0,   2, 1,  3, 3,  4, 4,  5, 2,   6, 7,   7, 6,\n       8, 5,   8, 8,   2, 1,   2, 3,   3, 0,   3, 2,   3, 4,  4, 6,   5, 5,   6, 7,  6, 8,  2, 0,  2, 1,   2, 3,   3, 2,\n@@ -3356,6 +3372,10 @@ void CLASS gamma_curve(double pwr, double ts, int mode, int imax);\n \n void CLASS lossy_dng_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   struct jpeg_decompress_struct cinfo;\n   struct jpeg_error_mgr jerr;\n   JSAMPARRAY buf;\n@@ -3510,6 +3530,11 @@ void CLASS eight_bit_load_raw()\n \n void CLASS kodak_c330_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n+\n   uchar *pixel;\n   int row, col, y, cb, cr, rgb[3], c;\n \n@@ -3553,6 +3578,11 @@ void CLASS kodak_c330_load_raw()\n \n void CLASS kodak_c603_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n+\n   uchar *pixel;\n   int row, col, y, cb, cr, rgb[3], c;\n \n@@ -3732,6 +3762,10 @@ void CLASS kodak_65000_load_raw()\n \n void CLASS kodak_ycbcr_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   short buf[384], *bp;\n   int row, col, len, c, i, j, k, y[2][2], cb, cr, rgb[3];\n   ushort *ip;\n@@ -3771,6 +3805,10 @@ void CLASS kodak_ycbcr_load_raw()\n \n void CLASS kodak_rgb_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   short buf[768], *bp;\n   int row, col, len, c, i, rgb[3], ret;\n   ushort *ip = image[0];\n@@ -3800,6 +3838,10 @@ void CLASS kodak_rgb_load_raw()\n \n void CLASS kodak_thumb_load_raw()\n {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(!image)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n   int row, col;\n   colors = thumb_misc >> 5;\n   for (row = 0; row < height; row++)"
        },
        {
          "filename": "src/libraw_cxx.cpp",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2792,7 +2792,7 @@ int LibRaw::unpack(void)\n         // sRAW and old Foveon decoders only, so extra buffer size is just 1/4\n         // allocate image as temporary buffer, size\n         imgdata.rawdata.raw_alloc = 0;\n-        imgdata.image = (ushort(*)[4])calloc(unsigned(S.raw_width) * unsigned(S.raw_height), sizeof(*imgdata.image));\n+        imgdata.image = (ushort(*)[4])calloc(unsigned(MAX(S.width,S.raw_width)) * unsigned(MAX(S.height,S.raw_height)), sizeof(*imgdata.image));\n         if (!(decoder_info.decoder_flags & LIBRAW_DECODER_ADOBECOPYPIXEL))\n         {\n           imgdata.rawdata.raw_image = (ushort *)imgdata.image;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bf7a0346d822c74b519c915275dfde806777dbaa",
            "date": "2025-01-16T06:33:47Z",
            "author_login": "LibRaw"
          },
          {
            "sha": "6a0ef24834cac038187cbe12065696515704f9ee",
            "date": "2025-01-16T06:15:12Z",
            "author_login": "meitu-ar-ljl5"
          },
          {
            "sha": "816ab359bc1bf0a6163d5347e2722b1857243058",
            "date": "2025-01-16T03:19:55Z",
            "author_login": "meitu-ar-ljl5"
          },
          {
            "sha": "cc118c1c1869e2559dbd0c7639d219154cc46e40",
            "date": "2024-11-30T15:36:46Z",
            "author_login": "alextutubalin"
          },
          {
            "sha": "9bcb8a1d9593ba67e4eb67fed716efc5e1353d5c",
            "date": "2024-09-18T09:07:43Z",
            "author_login": "alextutubalin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-476",
    "description": "An error within the \"LibRaw::unpack()\" function (src/libraw_cxx.cpp) in LibRaw versions prior to 0.18.7 can be exploited to trigger a NULL pointer dereference.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-12-07T22:29:00.520",
    "last_modified": "2024-11-21T04:09:26.087",
    "fix_date": "2017-12-06T18:41:19Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:3065",
      "source": "PSIRT-CNA@flexerasoftware.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/LibRaw/LibRaw/blob/master/Changelog.txt",
      "source": "PSIRT-CNA@flexerasoftware.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/LibRaw/LibRaw/commit/0df5490b985c419de008d32168650bff17128914",
      "source": "PSIRT-CNA@flexerasoftware.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2019/03/msg00036.html",
      "source": "PSIRT-CNA@flexerasoftware.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://secuniaresearch.flexerasoftware.com/advisories/79000/",
      "source": "PSIRT-CNA@flexerasoftware.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://secuniaresearch.flexerasoftware.com/secunia_research/2018-1/",
      "source": "PSIRT-CNA@flexerasoftware.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/3615-1/",
      "source": "PSIRT-CNA@flexerasoftware.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:3065",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/LibRaw/LibRaw/blob/master/Changelog.txt",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/LibRaw/LibRaw/commit/0df5490b985c419de008d32168650bff17128914",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2019/03/msg00036.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://secuniaresearch.flexerasoftware.com/advisories/79000/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://secuniaresearch.flexerasoftware.com/secunia_research/2018-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/3615-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:42.169091",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "LibRaw",
    "owner": "LibRaw",
    "created_at": "2010-10-11T18:01:13Z",
    "updated_at": "2025-01-23T07:12:41Z",
    "pushed_at": "2025-01-16T06:33:47Z",
    "size": 14009,
    "stars": 1179,
    "forks": 289,
    "open_issues": 2,
    "watchers": 1179,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 2013125,
      "C": 18819,
      "M4": 8267,
      "QMake": 6245,
      "Makefile": 5329,
      "Shell": 1869,
      "Perl": 1289
    },
    "commit_activity": {
      "total_commits_last_year": 33,
      "avg_commits_per_week": 0.6346153846153846,
      "days_active_last_year": 26
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:45:55.196630"
  }
}