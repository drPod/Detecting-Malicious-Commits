{
  "cve_id": "CVE-2018-5804",
  "github_data": {
    "repository": "LibRaw/LibRaw",
    "fix_commit": "9f26ce37f5be86ea11bfc6831366558650b1f6ff",
    "related_commits": [
      "9f26ce37f5be86ea11bfc6831366558650b1f6ff",
      "9f26ce37f5be86ea11bfc6831366558650b1f6ff"
    ],
    "patch_url": "https://github.com/LibRaw/LibRaw/commit/9f26ce37f5be86ea11bfc6831366558650b1f6ff.patch",
    "fix_commit_details": {
      "sha": "9f26ce37f5be86ea11bfc6831366558650b1f6ff",
      "commit_date": "2018-02-23T18:23:25Z",
      "author": {
        "login": "alextutubalin",
        "type": "User",
        "stats": {
          "total_commits": 1695,
          "average_weekly_commits": 2.272117962466488,
          "total_additions": 249813,
          "total_deletions": 212804,
          "weeks_active": 403
        }
      },
      "commit_message": {
        "title": "SA81000: LibRaw 0.18.8",
        "length": 22,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 80,
        "additions": 63,
        "deletions": 17
      },
      "files": [
        {
          "filename": "Changelog.txt",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -1,3 +1,11 @@\n+2018-02-23  Alex Tutubalin <lexa@lexa.ru>\n+Secunia #81000: \n+Credit: Laurent Delosieres, Secunia Research at Flexera\n+ * leaf_hdr_load_raw: check for image pointer for demosaiced raw\n+ * NOKIARAW parser: check image dimensions readed from file\n+ * quicktake_100_load_raw: check width/height limits\n+ * LibRaw 0.18.8\n+\n 2018-01-29  Alex Tutubalin <lexa@lexa.ru>\n  * Checks for width+left_margin/height+top_margin not larger than 64k\n  * LIBRAW_MAX_ALLOC_MB define limits maximum image/raw_image allocation"
        },
        {
          "filename": "dcraw/dcraw.c",
          "status": "modified",
          "additions": 27,
          "deletions": 8,
          "patch": "@@ -2365,6 +2365,10 @@ void CLASS leaf_hdr_load_raw()\n   unsigned tile=0, r, c, row, col;\n \n   if (!filters) {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+    if(!image)\n+      throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n     pixel = (ushort *) calloc (raw_width, sizeof *pixel);\n     merror (pixel, \"leaf_hdr_load_raw()\");\n   }\n@@ -2894,7 +2898,11 @@ void CLASS quicktake_100_load_raw()\n     654,665,676,687,698,710,721,732,743,754,766,777,788,799,810,822,833,844,\n     855,866,878,889,900,911,922,933,945,956,967,978,989,1001,1012,1023 };\n   int rb, row, col, sharp, val=0;\n-\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(width>640 || height > 480)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n+  \n   getbits(-1);\n   memset (pixel, 0x80, sizeof pixel);\n   for (row=2; row < height+2; row++) {\n@@ -15649,13 +15657,24 @@ void CLASS identify()\n     i = get4();\n     width = get2();\n     height = get2();\n-    switch (tiff_bps = i*8 / (width * height)) {\n-      case  8: load_raw = &CLASS eight_bit_load_raw;  break;\n-      case 10: load_raw = &CLASS nokia_load_raw;\n-    }\n-    raw_height = height + (top_margin = i / (width * tiff_bps/8) - height);\n-    mask[0][3] = 1;\n-    filters = 0x61616161;\n+#ifdef LIBRAW_LIBRARY_BUILD\n+    // data length should be in range w*h..w*h*2\n+    if(width*height < (LIBRAW_MAX_ALLOC_MB*1024*512L) && width*height>1\n+       && i >= width * height && i <= width*height*2)\n+      {\n+#endif\n+\tswitch (tiff_bps = i*8 / (width * height)) {\n+\tcase  8: load_raw = &CLASS eight_bit_load_raw;  break;\n+\tcase 10: load_raw = &CLASS nokia_load_raw;\n+\t}\n+\traw_height = height + (top_margin = i / (width * tiff_bps/8) - height);\n+\tmask[0][3] = 1;\n+\tfilters = 0x61616161;\n+#ifdef LIBRAW_LIBRARY_BUILD\n+      }\n+    else\n+      is_raw = 0;\n+#endif\n   } else if (!memcmp (head,\"ARRI\",4)) {\n     order = 0x4949;\n     fseek (ifp, 20, SEEK_SET);"
        },
        {
          "filename": "internal/dcraw_common.cpp",
          "status": "modified",
          "additions": 27,
          "deletions": 8,
          "patch": "@@ -2077,6 +2077,10 @@ void CLASS leaf_hdr_load_raw()\n   unsigned tile=0, r, c, row, col;\n \n   if (!filters) {\n+#ifdef LIBRAW_LIBRARY_BUILD\n+    if(!image)\n+      throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n     pixel = (ushort *) calloc (raw_width, sizeof *pixel);\n     merror (pixel, \"leaf_hdr_load_raw()\");\n   }\n@@ -2606,7 +2610,11 @@ void CLASS quicktake_100_load_raw()\n     654,665,676,687,698,710,721,732,743,754,766,777,788,799,810,822,833,844,\n     855,866,878,889,900,911,922,933,945,956,967,978,989,1001,1012,1023 };\n   int rb, row, col, sharp, val=0;\n-\n+#ifdef LIBRAW_LIBRARY_BUILD\n+  if(width>640 || height > 480)\n+    throw LIBRAW_EXCEPTION_IO_CORRUPT;\n+#endif\n+  \n   getbits(-1);\n   memset (pixel, 0x80, sizeof pixel);\n   for (row=2; row < height+2; row++) {\n@@ -14311,13 +14319,24 @@ void CLASS identify()\n     i = get4();\n     width = get2();\n     height = get2();\n-    switch (tiff_bps = i*8 / (width * height)) {\n-      case  8: load_raw = &CLASS eight_bit_load_raw;  break;\n-      case 10: load_raw = &CLASS nokia_load_raw;\n-    }\n-    raw_height = height + (top_margin = i / (width * tiff_bps/8) - height);\n-    mask[0][3] = 1;\n-    filters = 0x61616161;\n+#ifdef LIBRAW_LIBRARY_BUILD\n+    // data length should be in range w*h..w*h*2\n+    if(width*height < (LIBRAW_MAX_ALLOC_MB*1024*512L) && width*height>1\n+       && i >= width * height && i <= width*height*2)\n+      {\n+#endif\n+\tswitch (tiff_bps = i*8 / (width * height)) {\n+\tcase  8: load_raw = &CLASS eight_bit_load_raw;  break;\n+\tcase 10: load_raw = &CLASS nokia_load_raw;\n+\t}\n+\traw_height = height + (top_margin = i / (width * tiff_bps/8) - height);\n+\tmask[0][3] = 1;\n+\tfilters = 0x61616161;\n+#ifdef LIBRAW_LIBRARY_BUILD\n+      }\n+    else\n+      is_raw = 0;\n+#endif\n   } else if (!memcmp (head,\"ARRI\",4)) {\n     order = 0x4949;\n     fseek (ifp, 20, SEEK_SET);"
        },
        {
          "filename": "libraw/libraw_version.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -22,7 +22,7 @@ it under the terms of the one of two licenses as you choose:\n \n #define LIBRAW_MAJOR_VERSION  0\n #define LIBRAW_MINOR_VERSION  18\n-#define LIBRAW_PATCH_VERSION  7\n+#define LIBRAW_PATCH_VERSION  8\n #define LIBRAW_VERSION_TAIL   Release\n \n #define LIBRAW_SHLIB_CURRENT  \t16"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cc118c1c1869e2559dbd0c7639d219154cc46e40",
            "date": "2024-11-30T15:36:46Z",
            "author_login": "alextutubalin"
          },
          {
            "sha": "9bcb8a1d9593ba67e4eb67fed716efc5e1353d5c",
            "date": "2024-09-18T09:07:43Z",
            "author_login": "alextutubalin"
          },
          {
            "sha": "bf1a9140e0d032c0f3d5eccbe2b7aa4e7167e287",
            "date": "2024-09-16T08:49:24Z",
            "author_login": "alextutubalin"
          },
          {
            "sha": "77a46b31978a2381e61df524dc9b6670a1f22321",
            "date": "2024-09-16T08:45:25Z",
            "author_login": "alextutubalin"
          },
          {
            "sha": "4f5a4cfb3724eb57386efad362b998b68a10eba7",
            "date": "2024-09-14T17:32:15Z",
            "author_login": "alextutubalin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-369",
    "description": "A type confusion error within the \"identify()\" function (internal/dcraw_common.cpp) in LibRaw versions prior to 0.18.8 can be exploited to trigger a division by zero.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-12-07T22:29:00.693",
    "last_modified": "2024-11-21T04:09:26.550",
    "fix_date": "2018-02-23T18:23:25Z"
  },
  "references": [
    {
      "url": "https://github.com/LibRaw/LibRaw/blob/master/Changelog.txt",
      "source": "PSIRT-CNA@flexerasoftware.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/LibRaw/LibRaw/commit/9f26ce37f5be86ea11bfc6831366558650b1f6ff",
      "source": "PSIRT-CNA@flexerasoftware.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://secuniaresearch.flexerasoftware.com/advisories/81000/",
      "source": "PSIRT-CNA@flexerasoftware.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://secuniaresearch.flexerasoftware.com/secunia_research/2018-3/",
      "source": "PSIRT-CNA@flexerasoftware.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/LibRaw/LibRaw/blob/master/Changelog.txt",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/LibRaw/LibRaw/commit/9f26ce37f5be86ea11bfc6831366558650b1f6ff",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://secuniaresearch.flexerasoftware.com/advisories/81000/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://secuniaresearch.flexerasoftware.com/secunia_research/2018-3/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:42.169448",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "LibRaw",
    "owner": "LibRaw",
    "created_at": "2010-10-11T18:01:13Z",
    "updated_at": "2025-01-14T03:39:50Z",
    "pushed_at": "2024-11-30T15:42:21Z",
    "size": 14433,
    "stars": 1172,
    "forks": 287,
    "open_issues": 2,
    "watchers": 1172,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 2012970,
      "C": 18819,
      "M4": 8267,
      "QMake": 6245,
      "Makefile": 5329,
      "Shell": 1869,
      "Perl": 1289
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:49:33.251436"
  }
}