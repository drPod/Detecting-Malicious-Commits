{
  "cve_id": "CVE-2018-6331",
  "github_data": {
    "repository": "facebook/buck",
    "fix_commit": "8c5500981812564877bd122c0f8fab48d3528ddf",
    "related_commits": [
      "8c5500981812564877bd122c0f8fab48d3528ddf",
      "8c5500981812564877bd122c0f8fab48d3528ddf"
    ],
    "patch_url": "https://github.com/facebook/buck/commit/8c5500981812564877bd122c0f8fab48d3528ddf.patch",
    "fix_commit_details": {
      "sha": "8c5500981812564877bd122c0f8fab48d3528ddf",
      "commit_date": "2018-03-28T18:24:00Z",
      "author": {
        "login": "dinhvh",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent deserialization of random objects",
        "length": 210,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 85,
        "additions": 84,
        "deletions": 1
      },
      "files": [
        {
          "filename": "src/com/facebook/buck/cli/ParserCacheCommand.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -17,6 +17,7 @@\n package com.facebook.buck.cli;\n \n import com.facebook.buck.parser.ParserConfig;\n+import com.facebook.buck.parser.ParserStateObjectInputStream;\n import com.facebook.buck.parser.thrift.RemoteDaemonicParserState;\n import com.facebook.buck.util.ExitCode;\n import com.facebook.buck.util.json.ObjectMappers;\n@@ -88,7 +89,7 @@ public ExitCode runWithoutHelp(CommandRunnerParams params)\n           ZipInputStream zipis = new ZipInputStream(fis)) {\n         ZipEntry entry = zipis.getNextEntry();\n         Preconditions.checkState(entry.getName().equals(\"parser_data\"));\n-        try (ObjectInputStream ois = new ObjectInputStream(zipis)) {\n+        try (ObjectInputStream ois = new ParserStateObjectInputStream(zipis)) {\n           RemoteDaemonicParserState state;\n           try {\n             state = (RemoteDaemonicParserState) ois.readObject();"
        },
        {
          "filename": "src/com/facebook/buck/parser/BUCK",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -35,6 +35,7 @@ java_immutables_library(\n         \"Parser.java\",\n         \"ParserMessages.java\",\n         \"ParserPythonInterpreterProvider.java\",\n+        \"ParserStateObjectInputStream.java\",\n         \"ParserTargetNodeFactory.java\",\n         \"PerBuildState.java\",\n         \"PipelineNodeCache.java\","
        },
        {
          "filename": "src/com/facebook/buck/parser/ParserStateObjectInputStream.java",
          "status": "added",
          "additions": 48,
          "deletions": 0,
          "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2013-present Facebook, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n+ * not use this file except in compliance with the License. You may obtain\n+ * a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package com.facebook.buck.parser;\n+\n+import com.facebook.buck.parser.thrift.RemoteDaemonicParserState;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InvalidClassException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectStreamClass;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/** A ObjectInputStream that will deserialize only RemoteDaemonicParserState. */\n+public class ParserStateObjectInputStream extends ObjectInputStream {\n+\n+  private Set<String> whitelist;\n+\n+  public ParserStateObjectInputStream(InputStream inputStream) throws IOException {\n+    super(inputStream);\n+\n+    whitelist = new HashSet<>();\n+    whitelist.add(RemoteDaemonicParserState.class.getName());\n+  }\n+\n+  @Override\n+  protected Class<?> resolveClass(ObjectStreamClass desc)\n+      throws IOException, ClassNotFoundException {\n+    if (!whitelist.contains(desc.getName())) {\n+      throw new InvalidClassException(desc.getName(), \"Can't deserialize this class\");\n+    }\n+    return super.resolveClass(desc);\n+  }\n+}"
        },
        {
          "filename": "test/com/facebook/buck/cli/ParserCacheCommandIntegrationTest.java",
          "status": "modified",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -28,17 +28,26 @@\n import com.facebook.buck.testutil.integration.TestDataHelper;\n import com.facebook.buck.util.HumanReadableException;\n import com.facebook.buck.util.NamedTemporaryFile;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.InvalidClassException;\n+import java.io.ObjectOutputStream;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n import org.hamcrest.Matchers;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n \n public class ParserCacheCommandIntegrationTest {\n \n   @Rule public TemporaryPaths tmp = new TemporaryPaths();\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n \n   @Test\n   public void testSaveAndLoad() throws IOException {\n@@ -146,4 +155,28 @@ public void testInvalidate() throws IOException {\n           e.getMessage(), Matchers.containsString(\"//Apps:TestAppsLibrary could not be found\"));\n     }\n   }\n+\n+  @Test\n+  public void testInvalidData() throws IOException {\n+    Map<String, String> invalidData = new HashMap();\n+    invalidData.put(\"foo\", \"bar\");\n+\n+    NamedTemporaryFile tempFile = new NamedTemporaryFile(\"invalid_parser_data\", null);\n+    try (FileOutputStream fos = new FileOutputStream(tempFile.get().toString());\n+        ZipOutputStream zipos = new ZipOutputStream(fos)) {\n+      zipos.putNextEntry(new ZipEntry(\"parser_data\"));\n+      try (ObjectOutputStream oos = new ObjectOutputStream(zipos)) {\n+        oos.writeObject(invalidData);\n+      }\n+    }\n+\n+    ProjectWorkspace workspace =\n+        TestDataHelper.createProjectWorkspaceForScenario(this, \"parser_with_cell\", tmp);\n+    workspace.setUp();\n+\n+    // Load the invalid parser cache data.\n+    thrown.expect(InvalidClassException.class);\n+    thrown.expectMessage(\"Can't deserialize this class\");\n+    workspace.runBuckCommand(\"parser-cache\", \"--load\", tempFile.get().toString());\n+  }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9c7c421e49f4d92d67321f18c6d1cd90974c77c4",
            "date": "2023-04-19T11:32:59Z",
            "author_login": "ndmitchell"
          },
          {
            "sha": "5c6382b3d81beae78c64499440847f210570a987",
            "date": "2022-10-28T13:47:54Z",
            "author_login": "bigfootjon"
          },
          {
            "sha": "16dc4866c20e807451a1762eb98776814c545e6f",
            "date": "2022-05-07T23:39:33Z",
            "author_login": "bigfootjon"
          },
          {
            "sha": "d599cf58b79c6fa087fcd6385edd9370042316f9",
            "date": "2022-05-05T22:18:56Z",
            "author_login": "bigfootjon"
          },
          {
            "sha": "a8e25cb17d8d5034ae3fa4981e7f78eef25dfb29",
            "date": "2022-05-05T20:03:16Z",
            "author_login": "bigfootjon"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-502",
    "description": "Buck parser-cache command loads/saves state using Java serialized object. If the state information is maliciously crafted, deserializing it could lead to code execution. This issue affects Buck versions prior to v2018.06.25.01.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-12-31T23:29:00.237",
    "last_modified": "2024-11-21T04:10:29.953",
    "fix_date": "2018-03-28T18:24:00Z"
  },
  "references": [
    {
      "url": "https://github.com/facebook/buck/commit/8c5500981812564877bd122c0f8fab48d3528ddf",
      "source": "cve-assign@fb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/facebook/buck/commit/8c5500981812564877bd122c0f8fab48d3528ddf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:42.219330",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "buck",
    "owner": "facebook",
    "created_at": "2013-04-17T18:12:18Z",
    "updated_at": "2025-01-09T19:57:14Z",
    "pushed_at": "2023-10-25T02:45:11Z",
    "size": 2024585,
    "stars": 8556,
    "forks": 1157,
    "open_issues": 227,
    "watchers": 8556,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "dev",
      "gh-pages",
      "main"
    ],
    "languages": {
      "Java": 33678299,
      "Starlark": 1409831,
      "JavaScript": 931240,
      "Python": 766764,
      "C": 250514,
      "CSS": 56119,
      "Shell": 39846,
      "Kotlin": 25953,
      "Thrift": 18470,
      "Lex": 14469,
      "Smalltalk": 5432,
      "Dockerfile": 2559,
      "PowerShell": 2154,
      "Batchfile": 1796,
      "Makefile": 1704,
      "HTML": 501
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T22:38:14.605008"
  }
}