{
  "cve_id": "CVE-2018-6360",
  "github_data": {
    "repository": "mpv-player/mpv",
    "fix_commit": "e6e6b0dcc7e9b0dbf35154a179b3dc1fcfcaff43",
    "related_commits": [
      "e6e6b0dcc7e9b0dbf35154a179b3dc1fcfcaff43",
      "e6e6b0dcc7e9b0dbf35154a179b3dc1fcfcaff43"
    ],
    "patch_url": "https://github.com/mpv-player/mpv/commit/e6e6b0dcc7e9b0dbf35154a179b3dc1fcfcaff43.patch",
    "fix_commit_details": {
      "sha": "e6e6b0dcc7e9b0dbf35154a179b3dc1fcfcaff43",
      "commit_date": "2018-01-26T01:19:04Z",
      "author": {
        "login": "wiiaboo",
        "type": "User",
        "stats": {
          "total_commits": 195,
          "average_weekly_commits": 0.2628032345013477,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 71
        }
      },
      "commit_message": {
        "title": "ytdl_hook: whitelist protocols from urls retrieved from youtube-dl",
        "length": 242,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 54,
        "additions": 47,
        "deletions": 7
      },
      "files": [
        {
          "filename": "player/lua/ytdl_hook.lua",
          "status": "modified",
          "additions": 47,
          "deletions": 7,
          "patch": "@@ -16,6 +16,18 @@ local ytdl = {\n \n local chapter_list = {}\n \n+function Set (t)\n+    local set = {}\n+    for _, v in pairs(t) do set[v] = true end\n+    return set\n+end\n+\n+local safe_protos = Set {\n+    \"http\", \"https\", \"ftp\", \"ftps\",\n+    \"rtmp\", \"rtmps\", \"rtmpe\", \"rtmpt\", \"rtmpts\", \"rtmpte\",\n+    \"data\"\n+}\n+\n local function exec(args)\n     local ret = utils.subprocess({args = args})\n     return ret.status, ret.stdout, ret\n@@ -183,6 +195,9 @@ local function edl_track_joined(fragments, protocol, is_live, base)\n \n     for i = offset, #fragments do\n         local fragment = fragments[i]\n+        if not url_is_safe(join_url(base, fragment)) then\n+            return nil\n+        end\n         table.insert(parts, edl_escape(join_url(base, fragment)))\n         if fragment.duration then\n             parts[#parts] =\n@@ -208,6 +223,15 @@ local function proto_is_dash(json)\n            or json[\"protocol\"] == \"http_dash_segments\"\n end\n \n+local function url_is_safe(url)\n+    local proto = type(url) == \"string\" and url:match(\"^(.+)://\") or nil\n+    local safe = proto and safe_protos[proto]\n+    if not safe then\n+        msg.error((\"Ignoring potentially unsafe url: '%s'\"):format(url))\n+    end\n+    return safe\n+end\n+\n local function add_single_video(json)\n     local streamurl = \"\"\n     local max_bitrate = 0\n@@ -218,6 +242,8 @@ local function add_single_video(json)\n         if not mpd_url then\n             msg.error(\"No manifest URL found in JSON data.\")\n             return\n+        elseif not url_is_safe(mpd_url) then\n+            return\n         end\n \n         streamurl = mpd_url\n@@ -238,14 +264,18 @@ local function add_single_video(json)\n             edl_track = edl_track_joined(track.fragments,\n                 track.protocol, json.is_live,\n                 track.fragment_base_url)\n+            local url = edl_track or track.url\n+            if not url_is_safe(url) then\n+                return\n+            end\n             if track.acodec and track.acodec ~= \"none\" then\n                 -- audio track\n                 mp.commandv(\"audio-add\",\n-                    edl_track or track.url, \"auto\",\n+                    url, \"auto\",\n                     track.format_note or \"\")\n             elseif track.vcodec and track.vcodec ~= \"none\" then\n                 -- video track\n-                streamurl = edl_track or track.url\n+                streamurl = url\n             end\n         end\n \n@@ -264,7 +294,13 @@ local function add_single_video(json)\n \n     msg.debug(\"streamurl: \" .. streamurl)\n \n-    mp.set_property(\"stream-open-filename\", streamurl:gsub(\"^data:\", \"data://\", 1))\n+    streamurl = streamurl:gsub(\"^data:\", \"data://\", 1)\n+\n+    if not url_is_safe(streamurl) then\n+        return\n+    end\n+\n+    mp.set_property(\"stream-open-filename\", streamurl)\n \n     mp.set_property(\"file-local-options/force-media-title\", json.title)\n \n@@ -526,14 +562,18 @@ mp.add_hook(o.try_ytdl_first and \"on_load\" or \"on_load_fail\", 10, function ()\n                         site = entry[\"webpage_url\"]\n                     end\n \n-                    if not (site:find(\"https?://\") == 1) then\n-                        site = \"ytdl://\" .. site\n+                    -- links with only youtube id as returned by --flat-playlist\n+                    if not site:find(\"://\") then\n+                        table.insert(playlist, \"ytdl://\" .. site)\n+                    elseif url_is_safe(site) then\n+                        table.insert(playlist, site)\n                     end\n-                    table.insert(playlist, site)\n \n                 end\n \n-                mp.set_property(\"stream-open-filename\", \"memory://\" .. table.concat(playlist, \"\\n\"))\n+                if #playlist > 0 then\n+                    mp.set_property(\"stream-open-filename\", \"memory://\" .. table.concat(playlist, \"\\n\"))\n+                end\n             end\n \n         else -- probably a video"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ca211b5b8830a74fecae115ba18b62878348342c",
            "date": "2025-01-10T12:50:20Z",
            "author_login": "guidocella"
          },
          {
            "sha": "f049a1e91c840754159dc86eb5b19ea15d311a75",
            "date": "2025-01-08T23:52:50Z",
            "author_login": "llyyr"
          },
          {
            "sha": "7a59a12b764369cebda0e5097401856a8c0e0a6a",
            "date": "2024-12-31T09:26:10Z",
            "author_login": "guidocella"
          },
          {
            "sha": "b530b402bf5adcfd024bb3e500cc86845a80d7e5",
            "date": "2024-12-05T18:18:02Z",
            "author_login": "guidocella"
          },
          {
            "sha": "0c3c4a315b6383be066f5824401be57e676412bf",
            "date": "2024-12-10T22:09:02Z",
            "author_login": "guidocella"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-20",
    "description": "mpv through 0.28.0 allows remote attackers to execute arbitrary code via a crafted web site, because it reads HTML documents containing VIDEO elements, and accepts arbitrary URLs in a src attribute without a protocol whitelist in player/lua/ytdl_hook.lua. For example, an av://lavfi:ladspa=file= URL signifies that the product should call dlopen on a shared object file located at an arbitrary local pathname. The issue exists because the product does not consider that youtube-dl can provide a potentially unsafe URL.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-01-28T02:29:01.503",
    "last_modified": "2024-11-21T04:10:33.517",
    "fix_date": "2018-01-26T01:19:04Z"
  },
  "references": [
    {
      "url": "https://github.com/mpv-player/mpv/commit/e6e6b0dcc7e9b0dbf35154a179b3dc1fcfcaff43",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mpv-player/mpv/issues/5456",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201805-05",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2018/dsa-4105",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mpv-player/mpv/commit/e6e6b0dcc7e9b0dbf35154a179b3dc1fcfcaff43",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mpv-player/mpv/issues/5456",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/201805-05",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2018/dsa-4105",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:15.386717",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mpv",
    "owner": "mpv-player",
    "created_at": "2012-10-13T08:08:44Z",
    "updated_at": "2025-01-14T17:09:37Z",
    "pushed_at": "2025-01-10T13:06:17Z",
    "size": 106930,
    "stars": 29319,
    "forks": 2959,
    "open_issues": 976,
    "watchers": 29319,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C": 6695376,
      "Lua": 396852,
      "Swift": 188294,
      "Meson": 80626,
      "Python": 54824,
      "Objective-C": 51306,
      "Shell": 29833,
      "JavaScript": 29576,
      "C++": 22002,
      "PowerShell": 15989
    },
    "commit_activity": {
      "total_commits_last_year": 1925,
      "avg_commits_per_week": 37.01923076923077,
      "days_active_last_year": 323
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T17:16:25.245010"
  }
}