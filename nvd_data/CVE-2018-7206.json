{
  "cve_id": "CVE-2018-7206",
  "github_data": {
    "repository": "jupyterhub/oauthenticator",
    "fix_commit": "1845c0e4b1bff3462c91c3108c85205acd3c75a2",
    "related_commits": [
      "1845c0e4b1bff3462c91c3108c85205acd3c75a2",
      "1845c0e4b1bff3462c91c3108c85205acd3c75a2"
    ],
    "patch_url": "https://github.com/jupyterhub/oauthenticator/commit/1845c0e4b1bff3462c91c3108c85205acd3c75a2.patch",
    "fix_commit_details": {
      "sha": "1845c0e4b1bff3462c91c3108c85205acd3c75a2",
      "commit_date": "2018-02-16T16:08:58Z",
      "author": {
        "login": "jbweston",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Security fix: fix gitlab group whitelist check",
        "length": 275,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 34,
        "additions": 8,
        "deletions": 26
      },
      "files": [
        {
          "filename": "oauthenticator/gitlab.py",
          "status": "modified",
          "additions": 8,
          "deletions": 26,
          "patch": "@@ -21,7 +21,6 @@\n \n from traitlets import Set\n \n-from .common import next_page_from_links\n from .oauth2 import OAuthLoginHandler, OAuthenticator\n \n # Support gitlab.com and gitlab community edition installations\n@@ -131,31 +130,14 @@ def authenticate(self, handler, data=None):\n     def _check_group_whitelist(self, username, user_id, is_admin, access_token):\n         http_client = AsyncHTTPClient()\n         headers = _api_headers(access_token)\n-        if is_admin:\n-            # For admins, /groups returns *all* groups. As a workaround\n-            # we check if we are a member of each group in the whitelist\n-            for group in map(url_escape, self.gitlab_group_whitelist):\n-                url = \"%s/groups/%s/members/%d\" % (GITLAB_API, group, user_id)\n-                req = HTTPRequest(url, method=\"GET\", headers=headers)\n-                resp = yield http_client.fetch(req, raise_error=False)\n-                if resp.code == 200:\n-                    return True  # user _is_ in group\n-        else:\n-            # For regular users we get all the groups to which they have access\n-            # and check if any of these are in the whitelisted groups\n-            next_page = url_concat(\"%s/groups\" % GITLAB_API,\n-                                   dict(all_available=True))\n-            while next_page:\n-                req = HTTPRequest(next_page, method=\"GET\", headers=headers)\n-                resp = yield http_client.fetch(req)\n-                resp_json = json.loads(resp.body.decode('utf8', 'replace'))\n-                next_page = next_page_from_links(resp)\n-                user_groups = set(entry[\"path\"] for entry in resp_json)\n-                # check if any of the organizations seen thus far are in whitelist\n-                if len(self.gitlab_group_whitelist & user_groups) > 0:\n-                    return True\n-            return False\n-\n+        # Check if we are a member of each group in the whitelist\n+        for group in map(url_escape, self.gitlab_group_whitelist):\n+            url = \"%s/groups/%s/members/%d\" % (GITLAB_API, group, user_id)\n+            req = HTTPRequest(url, method=\"GET\", headers=headers)\n+            resp = yield http_client.fetch(req, raise_error=False)\n+            if resp.code == 200:\n+                return True  # user _is_ in group\n+        return False\n \n \n class LocalGitLabOAuthenticator(LocalAuthenticator, GitLabOAuthenticator):"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d31bb193e84e7cda58b16f2f5d385c9b8affda4f",
            "date": "2025-01-08T08:17:05Z",
            "author_login": "minrk"
          },
          {
            "sha": "ff6a1c817a95f26fadc49ac132110f60a02e7ed5",
            "date": "2025-01-07T00:23:15Z",
            "author_login": "pre-commit-ci[bot]"
          },
          {
            "sha": "aadfbf5ff4f25c972bfa03ae65a24057c94f645c",
            "date": "2024-12-11T14:05:01Z",
            "author_login": "minrk"
          },
          {
            "sha": "109018ef6e62bb9eed62f86af4c08929ac37c524",
            "date": "2024-12-11T14:04:30Z",
            "author_login": "minrk"
          },
          {
            "sha": "878de9b46bcb87ba4b9ee2b53ec63c9dccf7672f",
            "date": "2024-12-11T14:04:15Z",
            "author_login": "minrk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": null,
    "description": "An issue was discovered in Project Jupyter JupyterHub OAuthenticator 0.6.x before 0.6.2 and 0.7.x before 0.7.3. When using JupyterHub with GitLab group whitelisting for access control, group membership was not checked correctly, allowing members not in the whitelisted groups to create accounts on the Hub. (Users were not allowed to access other users' accounts, but could create their own accounts on the Hub linked to their GitLab account. GitLab authentication not using gitlab_group_whitelist is unaffected. No other Authenticators are affected.)",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2018-02-18T03:29:00.353",
    "last_modified": "2024-11-21T04:11:47.403",
    "fix_date": "2018-02-16T16:08:58Z"
  },
  "references": [
    {
      "url": "https://blog.jupyter.org/security-fix-for-jupyterhub-gitlab-oauthenticator-7b14571d1f76",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/oauthenticator/blob/8499dc2/CHANGELOG.md#073---2018-02-16",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/oauthenticator/commit/1845c0e4b1bff3462c91c3108c85205acd3c75a2",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://blog.jupyter.org/security-fix-for-jupyterhub-gitlab-oauthenticator-7b14571d1f76",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/oauthenticator/blob/8499dc2/CHANGELOG.md#073---2018-02-16",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/oauthenticator/commit/1845c0e4b1bff3462c91c3108c85205acd3c75a2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:15.416096",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "oauthenticator",
    "owner": "jupyterhub",
    "created_at": "2014-09-23T21:37:06Z",
    "updated_at": "2025-01-13T00:54:46Z",
    "pushed_at": "2025-01-08T08:17:07Z",
    "size": 1723,
    "stars": 419,
    "forks": 367,
    "open_issues": 51,
    "watchers": 419,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 307581
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T16:41:10.766867"
  }
}