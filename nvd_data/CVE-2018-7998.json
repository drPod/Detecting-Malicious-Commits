{
  "cve_id": "CVE-2018-7998",
  "github_data": {
    "repository": "jcupitt/libvips",
    "fix_commit": "20d840e6da15c1574b3ed998bc92f91d1e36c2a5",
    "related_commits": [
      "20d840e6da15c1574b3ed998bc92f91d1e36c2a5",
      "20d840e6da15c1574b3ed998bc92f91d1e36c2a5"
    ],
    "patch_url": "https://github.com/jcupitt/libvips/commit/20d840e6da15c1574b3ed998bc92f91d1e36c2a5.patch",
    "fix_commit_details": {
      "sha": "20d840e6da15c1574b3ed998bc92f91d1e36c2a5",
      "commit_date": "2018-03-05T14:42:09Z",
      "author": {
        "login": "jcupitt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix a crash with delayed load",
        "length": 243,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 31,
        "additions": 25,
        "deletions": 6
      },
      "files": [
        {
          "filename": "ChangeLog",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@\n   writing twice to memory\n - better rounding behaviour in convolution means we hit the vector path more\n   often\n+- fix a crash if a delayed load failed [gsharpsh00ter]\n \n 5/1/18 started 8.6.2\n - vips_sink_screen() keeps a ref to the input image ... stops a rare race"
        },
        {
          "filename": "libvips/foreign/foreign.c",
          "status": "modified",
          "additions": 19,
          "deletions": 6,
          "patch": "@@ -18,6 +18,8 @@\n  * \t- transform cmyk->rgb if there's an embedded profile\n  * 16/6/17\n  * \t- add page_height\n+ * 5/3/18\n+ * \t- block _start if one start fails, see #893\n  */\n \n /*\n@@ -796,6 +798,11 @@ vips_foreign_load_start( VipsImage *out, void *a, void *b )\n \tVipsForeignLoad *load = VIPS_FOREIGN_LOAD( b );\n \tVipsForeignLoadClass *class = VIPS_FOREIGN_LOAD_GET_CLASS( load );\n \n+\t/* If this start has failed before in another thread, we can fail now.\n+\t */\n+\tif( load->error )\n+\t\treturn( NULL );\n+\n \tif( !load->real ) {\n \t\tif( !(load->real = vips_foreign_load_temp( load )) )\n \t\t\treturn( NULL );\n@@ -819,19 +826,25 @@ vips_foreign_load_start( VipsImage *out, void *a, void *b )\n \t\tg_object_set_qdata( G_OBJECT( load->real ), \n \t\t\tvips__foreign_load_operation, load ); \n \n-\t\tif( class->load( load ) ||\n-\t\t\tvips_image_pio_input( load->real ) ) \n-\t\t\treturn( NULL );\n-\n-\t\t/* ->header() read the header into @out, load has read the\n+\t\t/* Load the image and check the result.\n+\t\t *\n+\t\t * ->header() read the header into @out, load has read the\n \t\t * image into @real. They must match exactly in size, bands,\n \t\t * format and coding for the copy to work.  \n \t\t *\n \t\t * Some versions of ImageMagick give different results between\n \t\t * Ping and Load for some formats, for example.\n+\t\t *\n+\t\t * If the load fails, we need to stop\n \t\t */\n-\t\tif( !vips_foreign_load_iscompat( load->real, out ) )\n+\t\tif( class->load( load ) ||\n+\t\t\tvips_image_pio_input( load->real ) || \n+\t\t\tvips_foreign_load_iscompat( load->real, out ) ) {\n+\t\t\tvips_operation_invalidate( VIPS_OPERATION( load ) ); \n+\t\t\tload->error = TRUE;\n+\n \t\t\treturn( NULL );\n+\t\t}\n \n \t\t/* We have to tell vips that out depends on real. We've set\n \t\t * the demand hint below, but not given an input there."
        },
        {
          "filename": "libvips/include/vips/foreign.h",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -158,6 +158,11 @@ typedef struct _VipsForeignLoad {\n \t * TRUE.\n \t */\n \tgboolean disc;\n+\n+\t/* Set if a start function fails. We want to prevent the other starts\n+\t * from also triggering the load.\n+\t */\n+\tgboolean error;\n } VipsForeignLoad;\n \n typedef struct _VipsForeignLoadClass {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1584d0d917f9890675325b65ab5102c049070a86",
            "date": "2021-09-18T13:40:59Z",
            "author_login": "jcupitt"
          },
          {
            "sha": "6acc77505b0e9cce6c193cb0494063980dfa3c72",
            "date": "2021-09-18T13:18:43Z",
            "author_login": "jcupitt"
          },
          {
            "sha": "024244bfbc99eb1de0273ab729be23bd2044e7f7",
            "date": "2021-09-18T13:04:05Z",
            "author_login": "jcupitt"
          },
          {
            "sha": "b96ed28903cf4087833b86d20ff4b851439b599c",
            "date": "2021-09-17T18:09:07Z",
            "author_login": "jcupitt"
          },
          {
            "sha": "af61d375bc435b5a07216b053e8fd77b2640df42",
            "date": "2021-09-17T18:02:53Z",
            "author_login": "jcupitt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-362",
    "description": "In libvips before 8.6.3, a NULL function pointer dereference vulnerability was found in the vips_region_generate function in region.c, which allows remote attackers to cause a denial of service or possibly have unspecified other impact via a crafted image file. This occurs because of a race condition involving a failed delayed load and other worker threads.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-03-09T19:29:01.070",
    "last_modified": "2024-11-21T04:13:03.527",
    "fix_date": "2018-03-05T14:42:09Z"
  },
  "references": [
    {
      "url": "https://github.com/jcupitt/libvips/commit/20d840e6da15c1574b3ed998bc92f91d1e36c2a5",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jcupitt/libvips/issues/893",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2018/03/msg00009.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jcupitt/libvips/commit/20d840e6da15c1574b3ed998bc92f91d1e36c2a5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/jcupitt/libvips/issues/893",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2018/03/msg00009.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:17.550437",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "libvips",
    "owner": "jcupitt",
    "created_at": "2021-07-16T11:11:06Z",
    "updated_at": "2024-12-29T19:53:54Z",
    "pushed_at": "2021-09-22T09:59:01Z",
    "size": 81013,
    "stars": 55,
    "forks": 5,
    "open_issues": 0,
    "watchers": 55,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 7848202,
      "C++": 553394,
      "Python": 187929,
      "M4": 83094,
      "Shell": 26565,
      "Makefile": 23114
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T17:01:13.568128"
  }
}