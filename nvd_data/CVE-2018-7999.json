{
  "cve_id": "CVE-2018-7999",
  "github_data": {
    "repository": "silnrsi/graphite",
    "fix_commit": "db132b4731a9b4c9534144ba3a18e65b390e9ff6",
    "related_commits": [
      "db132b4731a9b4c9534144ba3a18e65b390e9ff6",
      "db132b4731a9b4c9534144ba3a18e65b390e9ff6"
    ],
    "patch_url": "https://github.com/silnrsi/graphite/commit/db132b4731a9b4c9534144ba3a18e65b390e9ff6.patch",
    "fix_commit_details": {
      "sha": "db132b4731a9b4c9534144ba3a18e65b390e9ff6",
      "commit_date": "2018-03-06T05:42:16Z",
      "author": {
        "login": "mhosken",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Deprecate and make ineffective gr_face_dumbRendering",
        "length": 52,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 111,
        "additions": 53,
        "deletions": 58
      },
      "files": [
        {
          "filename": "include/graphite2/Font.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -56,7 +56,7 @@ GR2_API void gr_engine_version(int *nMajor, int *nMinor, int *nBugFix);\n enum gr_face_options {\n     /** No preload, no cmap caching, fail if the graphite tables are invalid */\n     gr_face_default = 0,\n-    /** Dumb rendering will be enabled if the graphite tables are invalid */\n+    /** Dumb rendering will be enabled if the graphite tables are invalid. DEPRECATED. */\n     gr_face_dumbRendering = 1,\n     /** preload glyphs at construction time */\n     gr_face_preloadGlyphs = 2,"
        },
        {
          "filename": "src/GlyphCache.cpp",
          "status": "modified",
          "additions": 44,
          "deletions": 47,
          "patch": "@@ -84,7 +84,7 @@ const SlantBox SlantBox::empty = {0,0,0,0};\n class GlyphCache::Loader\n {\n public:\n-    Loader(const Face & face, const bool dumb_font);    //return result indicates success. Do not use if failed.\n+    Loader(const Face & face);    //return result indicates success. Do not use if failed.\n \n     operator bool () const throw();\n     unsigned short int units_per_em() const throw();\n@@ -115,7 +115,7 @@ class GlyphCache::Loader\n \n \n GlyphCache::GlyphCache(const Face & face, const uint32 face_options)\n-: _glyph_loader(new Loader(face, bool(face_options & gr_face_dumbRendering))),\n+: _glyph_loader(new Loader(face)),\n   _glyphs(_glyph_loader && *_glyph_loader && _glyph_loader->num_glyphs()\n         ? grzeroalloc<const GlyphFace *>(_glyph_loader->num_glyphs()) : 0),\n   _boxes(_glyph_loader && _glyph_loader->has_boxes() && _glyph_loader->num_glyphs()\n@@ -239,7 +239,7 @@ const GlyphFace *GlyphCache::glyph(unsigned short glyphid) const      //result m\n \n \n \n-GlyphCache::Loader::Loader(const Face & face, const bool dumb_font)\n+GlyphCache::Loader::Loader(const Face & face)\n : _head(face, Tag::head),\n   _hhea(face, Tag::hhea),\n   _hmtx(face, Tag::hmtx),\n@@ -265,52 +265,49 @@ GlyphCache::Loader::Loader(const Face & face, const bool dumb_font)\n         return;\n     }\n \n-    if (!dumb_font)\n+    if ((m_pGlat = Face::Table(face, Tag::Glat, 0x00030000)) == NULL\n+        || (m_pGloc = Face::Table(face, Tag::Gloc)) == NULL\n+        || m_pGloc.size() < 8)\n     {\n-        if ((m_pGlat = Face::Table(face, Tag::Glat, 0x00030000)) == NULL\n-            || (m_pGloc = Face::Table(face, Tag::Gloc)) == NULL\n-            || m_pGloc.size() < 8)\n-        {\n-            _head = Face::Table();\n-            return;\n-        }\n-        const byte    * p = m_pGloc;\n-        int       version = be::read<uint32>(p);\n-        const uint16    flags = be::read<uint16>(p);\n-        _num_attrs = be::read<uint16>(p);\n-        // We can accurately calculate the number of attributed glyphs by\n-        //  subtracting the length of the attribids array (numAttribs long if present)\n-        //  and dividing by either 2 or 4 depending on shor or lonf format\n-        _long_fmt              = flags & 1;\n-        int tmpnumgattrs       = (m_pGloc.size()\n-                                   - (p - m_pGloc)\n-                                   - sizeof(uint16)*(flags & 0x2 ? _num_attrs : 0))\n-                                       / (_long_fmt ? sizeof(uint32) : sizeof(uint16)) - 1;\n-\n-        if (version >= 0x00020000 || tmpnumgattrs < 0 || tmpnumgattrs > 65535\n-            || _num_attrs == 0 || _num_attrs > 0x3000  // is this hard limit appropriate?\n-            || _num_glyphs_graphics > tmpnumgattrs\n-            || m_pGlat.size() < 4)\n-        {\n-            _head = Face::Table();\n-            return;\n-        }\n+        _head = Face::Table();\n+        return;\n+    }\n+    const byte    * p = m_pGloc;\n+    int       version = be::read<uint32>(p);\n+    const uint16    flags = be::read<uint16>(p);\n+    _num_attrs = be::read<uint16>(p);\n+    // We can accurately calculate the number of attributed glyphs by\n+    //  subtracting the length of the attribids array (numAttribs long if present)\n+    //  and dividing by either 2 or 4 depending on shor or lonf format\n+    _long_fmt              = flags & 1;\n+    int tmpnumgattrs       = (m_pGloc.size()\n+                               - (p - m_pGloc)\n+                               - sizeof(uint16)*(flags & 0x2 ? _num_attrs : 0))\n+                                   / (_long_fmt ? sizeof(uint32) : sizeof(uint16)) - 1;\n+\n+    if (version >= 0x00020000 || tmpnumgattrs < 0 || tmpnumgattrs > 65535\n+        || _num_attrs == 0 || _num_attrs > 0x3000  // is this hard limit appropriate?\n+        || _num_glyphs_graphics > tmpnumgattrs\n+        || m_pGlat.size() < 4)\n+    {\n+        _head = Face::Table();\n+        return;\n+    }\n \n-        _num_glyphs_attributes = static_cast<unsigned short>(tmpnumgattrs);\n-        p = m_pGlat;\n-        version = be::read<uint32>(p);\n-        if (version >= 0x00040000 || (version >= 0x00030000 && m_pGlat.size() < 8))       // reject Glat tables that are too new\n-        {\n-            _head = Face::Table();\n-            return;\n-        }\n-        else if (version >= 0x00030000)\n-        {\n-            unsigned int glatflags = be::read<uint32>(p);\n-            _has_boxes = glatflags & 1;\n-            // delete this once the compiler is fixed\n-            _has_boxes = true;\n-        }\n+    _num_glyphs_attributes = static_cast<unsigned short>(tmpnumgattrs);\n+    p = m_pGlat;\n+    version = be::read<uint32>(p);\n+    if (version >= 0x00040000 || (version >= 0x00030000 && m_pGlat.size() < 8))       // reject Glat tables that are too new\n+    {\n+        _head = Face::Table();\n+        return;\n+    }\n+    else if (version >= 0x00030000)\n+    {\n+        unsigned int glatflags = be::read<uint32>(p);\n+        _has_boxes = glatflags & 1;\n+        // delete this once the compiler is fixed\n+        _has_boxes = true;\n     }\n }\n "
        },
        {
          "filename": "src/gr_face.cpp",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -47,8 +47,7 @@ namespace\n         telemetry::category _misc_cat(face.tele.misc);\n #endif\n         Face::Table silf(face, Tag::Silf, 0x00050000);\n-        if (silf)   options &= ~gr_face_dumbRendering;\n-        else if (!(options &  gr_face_dumbRendering))\n+        if (!silf)\n             return false;\n \n         if (!face.readGlyphs(options))\n@@ -74,7 +73,7 @@ namespace\n                 return true;\n         }\n         else\n-            return options & gr_face_dumbRendering;\n+            return false;\n     }\n }\n "
        },
        {
          "filename": "tests/featuremap/CMakeLists.txt",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -20,7 +20,7 @@ if (GRAPHITE2_ASAN)\n endif (GRAPHITE2_ASAN)\n target_link_libraries(featuremaptest graphite2 graphite2-base graphite2-segcache graphite2-base)\n \n-add_test(NAME featuremaptest COMMAND $<TARGET_FILE:featuremaptest> ${testing_SOURCE_DIR}/fonts/tiny.ttf)\n+add_test(NAME featuremaptest COMMAND $<TARGET_FILE:featuremaptest> ${testing_SOURCE_DIR}/fonts/small.ttf)\n set_tests_properties(featuremaptest PROPERTIES TIMEOUT 3)\n if (GRAPHITE2_ASAN)\n     set_property(TEST featuremaptest APPEND PROPERTY ENVIRONMENT \"ASAN_SYMBOLIZER_PATH=${ASAN_SYMBOLIZER}\")"
        },
        {
          "filename": "tests/featuremap/featuremaptest.cpp",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -243,7 +243,7 @@ template <class T> void testFeatTable(const T & table, const char * testName)\n {\n     FeatureMap testFeatureMap;\n     dummyFace.replace_table(TtfUtil::Tag::Feat, &table, sizeof(T));\n-    gr_face * face = gr_make_face_with_ops(&dummyFace, &face_handle::ops, gr_face_dumbRendering);\n+    gr_face * face = gr_make_face_with_ops(&dummyFace, &face_handle::ops, 0);\n     if (!face) throw std::runtime_error(\"failed to load font\");\n     bool readStatus = testFeatureMap.readFeats(*face);\n     testAssert(\"readFeats\", readStatus);\n@@ -285,9 +285,8 @@ int main(int argc, char * argv[])\n \t\t// test a bad settings offset stradling the end of the table\n \t\tFeatureMap testFeatureMap;\n \t\tdummyFace.replace_table(TtfUtil::Tag::Feat, &testBadOffset, sizeof testBadOffset);\n-\t\tface = gr_make_face_with_ops(&dummyFace, &face_handle::ops, gr_face_dumbRendering);\n-\t\tbool readStatus = testFeatureMap.readFeats(*face);\n-\t\ttestAssert(\"fail gracefully on bad table\", !readStatus);\n+\t\tface = gr_make_face_with_ops(&dummyFace, &face_handle::ops, 0);\n+\t\ttestAssert(\"fail gracefully on bad table\", !face);\n \t}\n \tcatch (std::exception & e)\n \t{"
        },
        {
          "filename": "tests/vm/CMakeLists.txt",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -41,7 +41,7 @@ if  (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n \tendif (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Release\")\n endif  (${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n \n-add_test(vm-test-call-threading vm-test-call ${testing_SOURCE_DIR}/fonts/tiny.ttf 1)\n+add_test(vm-test-call-threading vm-test-call ${testing_SOURCE_DIR}/fonts/small.ttf 1)\n set_tests_properties(vm-test-call-threading PROPERTIES\n         PASS_REGULAR_EXPRESSION \"simple program size:    14 bytes.*result of program: 42\"\n         FAIL_REGULAR_EXPRESSION \"program terminated early;stack not empty\")\n@@ -51,7 +51,7 @@ if (GRAPHITE2_ASAN)\n endif (GRAPHITE2_ASAN)\n \n if  (${CMAKE_COMPILER_IS_GNUCXX})\n-\tadd_test(vm-test-direct-threading vm-test-direct ${testing_SOURCE_DIR}/fonts/tiny.ttf 1)\n+\tadd_test(vm-test-direct-threading vm-test-direct ${testing_SOURCE_DIR}/fonts/small.ttf 1)\n \tset_tests_properties(vm-test-direct-threading PROPERTIES\n \t\t\tPASS_REGULAR_EXPRESSION \"simple program size:    14 bytes.*result of program: 42\"\n \t\t\tFAIL_REGULAR_EXPRESSION \"program terminated early;stack not empty\")"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6768ea92b89ed2505a3624208c42ce05e417496c",
            "date": "2024-11-04T14:54:22Z",
            "author_login": "sharoncorrell"
          },
          {
            "sha": "6f4e6a755fd35d51429b70d08eb673a24d209dd6",
            "date": "2024-07-05T17:56:02Z",
            "author_login": "sharoncorrell"
          },
          {
            "sha": "a74b7c13ed42ec03d2c0ad05e147953acff04217",
            "date": "2023-07-20T16:25:41Z",
            "author_login": "sharoncorrell"
          },
          {
            "sha": "56d65d4c4d69deeadb0346add522468cd27e4f59",
            "date": "2023-07-20T16:10:02Z",
            "author_login": "sharoncorrell"
          },
          {
            "sha": "00acbe0949697ea1e69f7b5f8ccf4a73b4e05d80",
            "date": "2023-07-20T16:07:19Z",
            "author_login": "sharoncorrell"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-476",
    "description": "In libgraphite2 in graphite2 1.3.11, a NULL pointer dereference vulnerability was found in Segment.cpp during a dumbRendering operation, which may allow attackers to cause a denial of service or possibly have unspecified other impact via a crafted .ttf file.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-03-09T19:29:01.133",
    "last_modified": "2024-11-21T04:13:03.680",
    "fix_date": "2018-03-06T05:42:16Z"
  },
  "references": [
    {
      "url": "https://github.com/silnrsi/graphite/commit/db132b4731a9b4c9534144ba3a18e65b390e9ff6",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/silnrsi/graphite/issues/22",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/L5F3CK2IPXFCLQZEBEEXONWIABN2E7H2/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LVWOKYZZDEMG6VSG53KAGUOHUIIQ7CND/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/silnrsi/graphite/commit/db132b4731a9b4c9534144ba3a18e65b390e9ff6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/silnrsi/graphite/issues/22",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/L5F3CK2IPXFCLQZEBEEXONWIABN2E7H2/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LVWOKYZZDEMG6VSG53KAGUOHUIIQ7CND/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:17.550584",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "graphite",
    "owner": "silnrsi",
    "created_at": "2015-10-12T04:05:00Z",
    "updated_at": "2024-12-25T18:27:06Z",
    "pushed_at": "2024-11-04T14:54:28Z",
    "size": 43957,
    "stars": 150,
    "forks": 44,
    "open_issues": 28,
    "watchers": 150,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 639592,
      "C#": 89605,
      "Python": 73077,
      "C": 60284,
      "CMake": 40171,
      "Perl": 15486,
      "XS": 6003,
      "Makefile": 5177,
      "SCSS": 3426,
      "Shell": 3325,
      "Ruby": 287,
      "HTML": 148
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T21:11:52.130735"
  }
}