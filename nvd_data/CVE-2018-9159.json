{
  "cve_id": "CVE-2018-9159",
  "github_data": {
    "repository": "perwendel/spark",
    "fix_commit": "030e9d00125cbd1ad759668f85488aba1019c668",
    "related_commits": [
      "030e9d00125cbd1ad759668f85488aba1019c668",
      "a221a864db28eb736d36041df2fa6eb8839fc5cd",
      "ce9e11517eca69e58ed4378d1e47a02bd06863cc",
      "030e9d00125cbd1ad759668f85488aba1019c668",
      "a221a864db28eb736d36041df2fa6eb8839fc5cd",
      "ce9e11517eca69e58ed4378d1e47a02bd06863cc"
    ],
    "patch_url": "https://github.com/perwendel/spark/commit/030e9d00125cbd1ad759668f85488aba1019c668.patch",
    "fix_commit_details": {
      "sha": "030e9d00125cbd1ad759668f85488aba1019c668",
      "commit_date": "2018-03-07T13:43:02Z",
      "author": {
        "login": "perwendel",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix for #981, patch 2 (#988)",
        "length": 28,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 60,
        "additions": 44,
        "deletions": 16
      },
      "files": [
        {
          "filename": "src/main/java/spark/resource/ClassPathResource.java",
          "status": "modified",
          "additions": 25,
          "deletions": 5,
          "patch": "@@ -23,6 +23,7 @@\n \n import spark.utils.Assert;\n import spark.utils.ClassUtils;\n+import spark.utils.ResourceUtils;\n import spark.utils.StringUtils;\n \n /**\n@@ -74,7 +75,7 @@ public ClassPathResource(String path) {\n      */\n     public ClassPathResource(String path, ClassLoader classLoader) {\n         Assert.notNull(path, \"Path must not be null\");\n-        Assert.state(doesNotContainFileColon(path), \"Path must not contain 'file:'\");\n+        Assert.isTrue(isValid(path), \"Path is not valid\");\n \n         String pathToUse = StringUtils.cleanPath(path);\n \n@@ -86,8 +87,27 @@ public ClassPathResource(String path, ClassLoader classLoader) {\n         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());\n     }\n \n-    private static boolean doesNotContainFileColon(String path) {\n-        return !path.contains(\"file:\");\n+    private static boolean isValid(final String path) {\n+        return !isInvalidPath(path);\n+    }\n+\n+    private static boolean isInvalidPath(String path) {\n+        if (path.contains(\"WEB-INF\") || path.contains(\"META-INF\")) {\n+            return true;\n+        }\n+        if (path.contains(\":/\")) {\n+            String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path);\n+            if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith(\"url:\")) {\n+                return true;\n+            }\n+        }\n+        if (path.contains(\"\")) {\n+            path = StringUtils.cleanPath(path);\n+            if (path.contains(\"../\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     /**\n@@ -236,8 +256,8 @@ public boolean equals(Object obj) {\n             ClassLoader otherLoader = otherRes.classLoader;\n \n             return (this.path.equals(otherRes.path) &&\n-                thisLoader.equals(otherLoader) &&\n-                this.clazz.equals(otherRes.clazz));\n+                    thisLoader.equals(otherLoader) &&\n+                    this.clazz.equals(otherRes.clazz));\n         }\n         return false;\n     }"
        },
        {
          "filename": "src/test/java/spark/embeddedserver/jetty/EmbeddedJettyFactoryTest.java",
          "status": "modified",
          "additions": 17,
          "deletions": 9,
          "patch": "@@ -4,13 +4,19 @@\n import org.eclipse.jetty.util.thread.QueuedThreadPool;\n import org.junit.After;\n import org.junit.Test;\n+\n import spark.embeddedserver.EmbeddedServer;\n import spark.route.Routes;\n import spark.staticfiles.StaticFilesConfiguration;\n \n-import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n \n public class EmbeddedJettyFactoryTest {\n+\n     private EmbeddedServer embeddedServer;\n \n     @Test\n@@ -19,14 +25,14 @@ public void create() throws Exception {\n         final StaticFilesConfiguration staticFilesConfiguration = mock(StaticFilesConfiguration.class);\n         final Routes routes = mock(Routes.class);\n \n-        when(jettyServerFactory.create(100,10,10000)).thenReturn(new Server());\n+        when(jettyServerFactory.create(100, 10, 10000)).thenReturn(new Server());\n \n         final EmbeddedJettyFactory embeddedJettyFactory = new EmbeddedJettyFactory(jettyServerFactory);\n         embeddedServer = embeddedJettyFactory.create(routes, staticFilesConfiguration, false);\n \n-        embeddedServer.ignite(\"localhost\", 8080, null, 100,10,10000);\n+        embeddedServer.ignite(\"localhost\", 6757, null, 100, 10, 10000);\n \n-        verify(jettyServerFactory, times(1)).create(100,10,10000);\n+        verify(jettyServerFactory, times(1)).create(100, 10, 10000);\n         verifyNoMoreInteractions(jettyServerFactory);\n     }\n \n@@ -42,7 +48,7 @@ public void create_withThreadPool() throws Exception {\n         final EmbeddedJettyFactory embeddedJettyFactory = new EmbeddedJettyFactory(jettyServerFactory).withThreadPool(threadPool);\n         embeddedServer = embeddedJettyFactory.create(routes, staticFilesConfiguration, false);\n \n-        embeddedServer.ignite(\"localhost\", 8080, null, 0,0,0);\n+        embeddedServer.ignite(\"localhost\", 6758, null, 0, 0, 0);\n \n         verify(jettyServerFactory, times(1)).create(threadPool);\n         verifyNoMoreInteractions(jettyServerFactory);\n@@ -54,19 +60,21 @@ public void create_withNullThreadPool() throws Exception {\n         final StaticFilesConfiguration staticFilesConfiguration = mock(StaticFilesConfiguration.class);\n         final Routes routes = mock(Routes.class);\n \n-        when(jettyServerFactory.create(100,10,10000)).thenReturn(new Server());\n+        when(jettyServerFactory.create(100, 10, 10000)).thenReturn(new Server());\n \n         final EmbeddedJettyFactory embeddedJettyFactory = new EmbeddedJettyFactory(jettyServerFactory).withThreadPool(null);\n         embeddedServer = embeddedJettyFactory.create(routes, staticFilesConfiguration, false);\n \n-        embeddedServer.ignite(\"localhost\", 8080, null, 100,10,10000);\n+        embeddedServer.ignite(\"localhost\", 6759, null, 100, 10, 10000);\n \n-        verify(jettyServerFactory, times(1)).create(100,10,10000);\n+        verify(jettyServerFactory, times(1)).create(100, 10, 10000);\n         verifyNoMoreInteractions(jettyServerFactory);\n     }\n \n     @After\n     public void tearDown() throws Exception {\n-        if(embeddedServer != null) embeddedServer.extinguish();\n+        if (embeddedServer != null) {\n+            embeddedServer.extinguish();\n+        }\n     }\n }"
        },
        {
          "filename": "src/test/java/spark/examples/staticresources/StaticResources.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -17,7 +17,7 @@\n package spark.examples.staticresources;\n \n import static spark.Spark.get;\n-import static spark.Spark.staticFileLocation;\n+import static spark.Spark.staticFiles;\n \n /**\n  * Example showing how serve static resources.\n@@ -27,7 +27,7 @@ public class StaticResources {\n     public static void main(String[] args) {\n \n         // Will serve all static file are under \"/public\" in classpath if the route isn't consumed by others routes.\n-        staticFileLocation(\"/public\");\n+        staticFiles.location(\"/public\");\n \n         get(\"/hello\", (request, response) -> {\n             return \"Hello World!\";"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1973e402f5d4c1442ad34a1d38ed0758079f7773",
            "date": "2022-07-10T11:06:37Z",
            "author_login": "perwendel"
          },
          {
            "sha": "053c278e837ef232aa6bef357b20a9e5b564061d",
            "date": "2022-07-09T18:49:58Z",
            "author_login": "perwendel"
          },
          {
            "sha": "cd0a6cee306a2331cc8c3266146c11a8ec4dc438",
            "date": "2022-07-09T18:34:26Z",
            "author_login": "chenzhang22"
          },
          {
            "sha": "4f4b210a4042949135f1b976940d8d2acb194d63",
            "date": "2022-07-09T18:33:45Z",
            "author_login": "Clivern"
          },
          {
            "sha": "584b17fe4eb8eabd5ddefc56dceb2b8e1ee557bb",
            "date": "2022-06-27T09:25:25Z",
            "author_login": "mcgivrer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-22",
    "description": "In Spark before 2.7.2, a remote attacker can read unintended static files via various representations of absolute or relative pathnames, as demonstrated by file: URLs and directory traversal sequences. NOTE: this product is unrelated to Ignite Realtime Spark.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2018-03-31T21:29:00.373",
    "last_modified": "2024-11-21T04:15:06.177",
    "fix_date": "2018-03-07T13:43:02Z"
  },
  "references": [
    {
      "url": "http://sparkjava.com/news#spark-272-released",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2020",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2405",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/perwendel/spark/commit/030e9d00125cbd1ad759668f85488aba1019c668",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/perwendel/spark/commit/a221a864db28eb736d36041df2fa6eb8839fc5cd",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/perwendel/spark/commit/ce9e11517eca69e58ed4378d1e47a02bd06863cc",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/perwendel/spark/issues/981",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://sparkjava.com/news#spark-272-released",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2020",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2018:2405",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/perwendel/spark/commit/030e9d00125cbd1ad759668f85488aba1019c668",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/perwendel/spark/commit/a221a864db28eb736d36041df2fa6eb8839fc5cd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/perwendel/spark/commit/ce9e11517eca69e58ed4378d1e47a02bd06863cc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/perwendel/spark/issues/981",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:21.810040",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "spark",
    "owner": "perwendel",
    "created_at": "2011-05-05T11:52:05Z",
    "updated_at": "2025-01-12T16:06:57Z",
    "pushed_at": "2023-10-08T09:20:37Z",
    "size": 2503,
    "stars": 9656,
    "forks": 1563,
    "open_issues": 260,
    "watchers": 9656,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 703473,
      "JavaScript": 103,
      "HTML": 96,
      "CSS": 19,
      "FreeMarker": 19
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:27:35.729800"
  }
}