{
  "cve_id": "CVE-2019-1010200",
  "github_data": {
    "repository": "google/voice-builder",
    "fix_commit": "c145d4604df67e6fc625992412eef0bf9a85e26b",
    "related_commits": [
      "c145d4604df67e6fc625992412eef0bf9a85e26b",
      "f6660e6d8f0d1d931359d591dbdec580fef36d36",
      "c145d4604df67e6fc625992412eef0bf9a85e26b",
      "f6660e6d8f0d1d931359d591dbdec580fef36d36"
    ],
    "patch_url": "https://github.com/google/voice-builder/commit/c145d4604df67e6fc625992412eef0bf9a85e26b.patch",
    "fix_commit_details": {
      "sha": "c145d4604df67e6fc625992412eef0bf9a85e26b",
      "commit_date": "2018-09-20T08:45:17Z",
      "author": {
        "login": "pasindud",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Added function to replace characters with space and use it to sanitize text",
        "length": 129,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 97,
        "additions": 88,
        "deletions": 9
      },
      "files": [
        {
          "filename": "merlin_model_server/api.js",
          "status": "modified",
          "additions": 5,
          "deletions": 8,
          "patch": "@@ -33,14 +33,9 @@ router.get('/alignment', (req, res) => res.status(200).send([]));\n /** GET synthesize voice based on a voice model */\n router.get('/tts', (req, res) => {\n   const { text, type } = req.query;\n-  // TODO(twattanavekin): Test Unicode text.\n-  const escapedText = JSON.stringify(text).slice(1, -1);\n+  const sanitizedText = utils.replaceCharactersWithSpaces(text);\n \n-  // Example command:\n-  //  echo \"hello\" | ${SYNTH_SCRIPT}\n-\n-  const cmd = `echo \"${escapedText}\" | ${SYNTH_SCRIPT}`;\n-  console.log(`Running command - \\n${cmd}`);\n+  console.log(`Synthesizing ${sanitizedText}`);\n \n   const options = {\n     maxBuffer: 1024 * 1000, // 1 mb buffer\n@@ -49,7 +44,7 @@ router.get('/tts', (req, res) => {\n     encoding: 'buffer',\n   };\n \n-  exec(cmd, options, (err, stdout, stderr) => {\n+  const child = exec(SYNTH_SCRIPT, options, (err, stdout, stderr) => {\n     const errMsg = utils.getExecErrorMessage(err, stderr);\n     if (errMsg) {\n       return res.status(500).send(errMsg);\n@@ -59,6 +54,8 @@ router.get('/tts', (req, res) => {\n     const data = type === 'base64' ? stdout.toString('base64') : stdout;\n     return res.send(data);\n   });\n+  child.stdin.write(sanitizedText);\n+  child.stdin.end();\n });\n \n module.exports = router;"
        },
        {
          "filename": "merlin_model_server/jasmine.json",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -1,6 +1,8 @@\n {\n   \"spec_dir\": \"tests\",\n-  \"spec_files\": [],\n+  \"spec_files\": [\n+    \"UtilsTests.js\"\n+  ],\n   \"stopSpecOnExpectationFailure\": false,\n   \"random\": false\n }"
        },
        {
          "filename": "merlin_model_server/settings.js",
          "status": "added",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 Google Inc.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+/**\n+ * Module containing settings for merlin server.\n+ */\n+const settings = {\n+  // Merlin synthesis pipeline might not handle these characters as expected\n+  // and also they are typically not needed during tts synthesis.\n+  // Therefore we replace them with spaces.\n+  CHARACTERS_TO_REPLACE_WITH_SPACES: '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~',\n+};\n+module.exports = settings;"
        },
        {
          "filename": "merlin_model_server/tests/UtilsTests.js",
          "status": "added",
          "additions": 43,
          "deletions": 0,
          "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 Google Inc.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     https://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+const utils = require('../utils');\n+\n+describe('Testing utils replaceCharactersWithSpaces method', () => {\n+  it('The function should return characters replaced with spaces and trim', () => {\n+    const testData = [\n+      ['`<text>`', 'text'],\n+      ['`text`', 'text'],\n+      ['$(text)', 'text'],\n+      ['\"\\$(text\\)', 'text'],\n+      ['\\\"\\$(text\\)', 'text'],\n+      ['${{{text}', 'text'],\n+      ['\\$\\{text\\}', 'text'],\n+      ['\\${text\"}', 'text'],\n+      ['\"${{text\"}', 'text'],\n+      ['\"${text\"}', 'text'],\n+      [\"\\\"\u0dc1\u0dca\u0dbb\u0dd3 \u0dbd\u0d82\u0d9a\u0dcf\u0dc0'\\\"\", '\u0dc1\u0dca\u0dbb\u0dd3 \u0dbd\u0d82\u0d9a\u0dcf\u0dc0'],\n+      ['\"$text\"', 'text'],\n+      ['$text', 'text'],\n+      [\",./;'[]*\\-=\", ''],\n+      ['echo `<text>`', 'echo   text'],\n+      ['echo $(\"text\")', 'echo    text'],\n+      ['echo \\$\\{text\\}', 'echo   text'],\n+    ];\n+\n+    testData.forEach(function(entry) {\n+      expect(utils.replaceCharactersWithSpaces(entry[0])).toEqual(entry[1]);\n+    });\n+  });\n+});"
        },
        {
          "filename": "merlin_model_server/utils.js",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -12,6 +12,8 @@\n // See the License for the specific language governing permissions and\n // limitations under the License.\n \n+const settings = require('./settings');\n+\n /**\n  * Returns a error message for the given parameters.\n  * @param {String} err error from the exec call.\n@@ -27,7 +29,18 @@ const getExecErrorMessage = (err, stderr) => {\n   return errMsg;\n };\n \n+/**\n+ * Returns the original string with characters\n+ * specified in settings replaced with spaces.\n+ * @text {String} text to be replaced.\n+ */\n+const replaceCharactersWithSpaces = (text) => {\n+  const re = new RegExp(`[${settings.CHARACTERS_TO_REPLACE_WITH_SPACES}]`, 'g');\n+  const newText = text.replace(re, ' ').trim();\n+  return newText;\n+};\n \n module.exports = {\n   getExecErrorMessage,\n+  replaceCharactersWithSpaces,\n };"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "90a8817575a9ca1efc85d0596d7f152daf0b2728",
            "date": "2019-11-21T13:27:47Z",
            "author_login": "pasindud"
          },
          {
            "sha": "6d12dcbc371116377d8662d766135ff5883a6b1d",
            "date": "2019-11-21T13:27:37Z",
            "author_login": "pasindud"
          },
          {
            "sha": "a907c2736103eb7c105e92fccc4a80876ce6f8ec",
            "date": "2019-11-21T13:27:26Z",
            "author_login": "pasindud"
          },
          {
            "sha": "d1184880ca11d39a8acc772bc25f976270ab20bb",
            "date": "2019-11-21T13:27:17Z",
            "author_login": "pasindud"
          },
          {
            "sha": "044c20f943c6764f08e256e11056c514d7c67505",
            "date": "2019-11-20T16:50:18Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-78",
    "description": "Voice Builder Prior to commit c145d4604df67e6fc625992412eef0bf9a85e26b and f6660e6d8f0d1d931359d591dbdec580fef36d36 is affected by: CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection'). The impact is: Remote code execution with the same privileges as the servers. The component is: Two web servers in the projects expose three vulnerable endpoints that can be accessed remotely. The endpoints are defined at: - /tts: https://github.com/google/voice-builder/blob/3a449a3e8d5100ff323161c89b897f6d5ccdb6f9/merlin_model_server/api.js#L34 - /alignment: https://github.com/google/voice-builder/blob/3a449a3e8d5100ff323161c89b897f6d5ccdb6f9/festival_model_server/api.js#L28 - /tts: https://github.com/google/voice-builder/blob/3a449a3e8d5100ff323161c89b897f6d5ccdb6f9/festival_model_server/api.js#L65. The attack vector is: Attacker sends a GET request to the vulnerable endpoint with a specially formatted query parameter. The fixed version is: After commit f6660e6d8f0d1d931359d591dbdec580fef36d36.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2019-07-23T18:15:14.377",
    "last_modified": "2024-11-21T04:18:02.797",
    "fix_date": "2018-09-20T08:45:17Z"
  },
  "references": [
    {
      "url": "https://github.com/google/voice-builder/commit/c145d4604df67e6fc625992412eef0bf9a85e26b",
      "source": "josh@bress.net",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/google/voice-builder/commit/f6660e6d8f0d1d931359d591dbdec580fef36d36",
      "source": "josh@bress.net",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/google/voice-builder/commit/c145d4604df67e6fc625992412eef0bf9a85e26b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/google/voice-builder/commit/f6660e6d8f0d1d931359d591dbdec580fef36d36",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:54.803740",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "voice-builder",
    "owner": "google",
    "created_at": "2018-03-05T13:17:52Z",
    "updated_at": "2025-01-11T15:46:37Z",
    "pushed_at": "2024-07-22T20:40:56Z",
    "size": 502,
    "stars": 662,
    "forks": 134,
    "open_issues": 61,
    "watchers": 662,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 127100,
      "Dockerfile": 7944,
      "Shell": 7491,
      "CSS": 3188,
      "HTML": 2638
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:10:43.807277"
  }
}