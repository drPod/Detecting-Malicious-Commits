{
  "cve_id": "CVE-2019-1020017",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "b8340c6c8e50a71ff1bca9654b9126ca5a84ce9a",
    "related_commits": [
      "b8340c6c8e50a71ff1bca9654b9126ca5a84ce9a",
      "e6e47f2fb22764c92aaa90445c7bf203192fba11",
      "b8340c6c8e50a71ff1bca9654b9126ca5a84ce9a",
      "e6e47f2fb22764c92aaa90445c7bf203192fba11"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/b8340c6c8e50a71ff1bca9654b9126ca5a84ce9a.patch",
    "fix_commit_details": {
      "sha": "b8340c6c8e50a71ff1bca9654b9126ca5a84ce9a",
      "commit_date": "2019-06-17T14:59:41Z",
      "author": {
        "login": "davidtaylorhq",
        "type": "User",
        "stats": {
          "total_commits": 2460,
          "average_weekly_commits": 3.54978354978355,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 338
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-hv9p-jfm4-gpr9",
        "length": 281,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 391,
        "additions": 271,
        "deletions": 120
      },
      "files": [
        {
          "filename": "app/assets/javascripts/discourse/controllers/email-login.js.es6",
          "status": "added",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -0,0 +1,29 @@\n+import { SECOND_FACTOR_METHODS } from \"discourse/models/user\";\n+import { ajax } from \"discourse/lib/ajax\";\n+import DiscourseURL from \"discourse/lib/url\";\n+import { popupAjaxError } from \"discourse/lib/ajax-error\";\n+\n+export default Ember.Controller.extend({\n+  secondFactorMethod: SECOND_FACTOR_METHODS.TOTP,\n+  lockImageUrl: Discourse.getURL(\"/images/lock.svg\"),\n+  actions: {\n+    finishLogin() {\n+      ajax({\n+        url: `/session/email-login/${this.model.token}`,\n+        type: \"POST\",\n+        data: {\n+          second_factor_token: this.secondFactorToken,\n+          second_factor_method: this.secondFactorMethod\n+        }\n+      })\n+        .then(result => {\n+          if (result.success) {\n+            DiscourseURL.redirectTo(\"/\");\n+          } else {\n+            this.set(\"model.error\", result.error);\n+          }\n+        })\n+        .catch(popupAjaxError);\n+    }\n+  }\n+});"
        },
        {
          "filename": "app/assets/javascripts/discourse/routes/app-route-map.js.es6",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -177,6 +177,7 @@ export default function() {\n   });\n   this.route(\"signup\", { path: \"/signup\" });\n   this.route(\"login\", { path: \"/login\" });\n+  this.route(\"email-login\", { path: \"/session/email-login/:token\" });\n   this.route(\"login-preferences\");\n   this.route(\"forgot-password\", { path: \"/password-reset\" });\n   this.route(\"faq\", { path: \"/faq\" });"
        },
        {
          "filename": "app/assets/javascripts/discourse/routes/email-login.js.es6",
          "status": "added",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -0,0 +1,11 @@\n+import { ajax } from \"discourse/lib/ajax\";\n+\n+export default Discourse.Route.extend({\n+  titleToken() {\n+    return I18n.t(\"login.title\");\n+  },\n+\n+  model(params) {\n+    return ajax(`/session/email-login/${params.token}`);\n+  }\n+});"
        },
        {
          "filename": "app/assets/javascripts/discourse/templates/email-login.hbs",
          "status": "added",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -0,0 +1,33 @@\n+<div class=\"container email-login clearfix\">\n+  <div class=\"pull-left col-image\">\n+    <img src={{lockImageUrl}} class=\"password-reset-img\">\n+  </div>\n+\n+  <div class=\"pull-left col-form\">\n+    <form>\n+      {{#if model.error}}\n+        <div class='alert alert-error'>\n+          {{model.error}}\n+        </div>\n+      {{/if}}\n+\n+      {{#if model.can_login}}\n+        {{#if model.second_factor_required}}\n+          {{#second-factor-form\n+            secondFactorMethod=secondFactorMethod\n+            secondFactorToken=secondFactorToken\n+            backupEnabled=model.backup_codes_enabled\n+            isLogin=true}}\n+            {{second-factor-input value=secondFactorToken secondFactorMethod=secondFactorMethod backupEnabled=backupEnabled}}\n+          {{/second-factor-form}}\n+        {{else}}\n+          <h2>{{i18n \"email_login.confirm_title\" site_name=siteSettings.title}}</h2>\n+          <p>{{i18n \"email_login.logging_in_as\" email=model.token_email}}</p>\n+        {{/if}}\n+\n+        {{d-button label=\"email_login.confirm_button\" action=(action \"finishLogin\") class=\"btn-primary\"}}\n+      {{/if}}\n+    </form>\n+  </div>\n+</div>\n+"
        },
        {
          "filename": "app/assets/stylesheets/desktop/login.scss",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -267,6 +267,7 @@\n }\n \n .password-reset,\n+.email-login,\n .invites-show {\n   .col-form {\n     padding-left: 20px;\n@@ -282,7 +283,8 @@\n   }\n }\n \n-.password-reset {\n+.password-reset,\n+.email-login {\n   .col-form {\n     padding-top: 40px;\n   }"
        },
        {
          "filename": "app/assets/stylesheets/mobile/login.scss",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -182,6 +182,7 @@\n }\n \n .password-reset,\n+.email-login,\n .invites-show {\n   margin-top: 30px;\n   .col-image {"
        },
        {
          "filename": "app/controllers/session_controller.rb",
          "status": "modified",
          "additions": 51,
          "deletions": 21,
          "patch": "@@ -11,10 +11,10 @@ class LocalLoginNotAllowed < StandardError; end\n     render body: nil, status: 500\n   end\n \n-  before_action :check_local_login_allowed, only: %i(create forgot_password email_login)\n+  before_action :check_local_login_allowed, only: %i(create forgot_password email_login email_login_info)\n   before_action :rate_limit_login, only: %i(create email_login)\n   skip_before_action :redirect_to_login_if_required\n-  skip_before_action :preload_json, :check_xhr, only: %i(sso sso_login sso_provider destroy email_login one_time_password)\n+  skip_before_action :preload_json, :check_xhr, only: %i(sso sso_login sso_provider destroy one_time_password)\n \n   ACTIVATE_USER_KEY = \"activate_user\"\n \n@@ -305,49 +305,79 @@ def create\n     end\n   end\n \n+  def email_login_info\n+    raise Discourse::NotFound if !SiteSetting.enable_local_logins_via_email\n+\n+    token = params[:token]\n+    matched_token = EmailToken.confirmable(token)\n+\n+    if matched_token\n+      response = {\n+        can_login: true,\n+        token: token,\n+        token_email: matched_token.email\n+      }\n+\n+      if matched_token.user&.totp_enabled?\n+        response.merge!(\n+          second_factor_required: true,\n+          backup_codes_enabled: matched_token.user&.backup_codes_enabled?\n+        )\n+      end\n+\n+      render json: response\n+    else\n+      render json: {\n+        can_login: false,\n+        error: I18n.t('email_login.invalid_token')\n+      }\n+    end\n+  end\n+\n   def email_login\n     raise Discourse::NotFound if !SiteSetting.enable_local_logins_via_email\n     second_factor_token = params[:second_factor_token]\n     second_factor_method = params[:second_factor_method].to_i\n     token = params[:token]\n-    valid_token = !!EmailToken.valid_token_format?(token)\n-    user = EmailToken.confirmable(token)&.user\n+    matched_token = EmailToken.confirmable(token)\n \n-    if valid_token && user&.totp_enabled?\n+    if matched_token&.user&.totp_enabled?\n       if !second_factor_token.present?\n-        @second_factor_required = true\n-        @backup_codes_enabled = true if user&.backup_codes_enabled?\n-        return render layout: 'no_ember'\n-      elsif !user.authenticate_second_factor(second_factor_token, second_factor_method)\n+        return render json: { error: I18n.t('login.invalid_second_factor_code') }\n+      elsif !matched_token.user.authenticate_second_factor(second_factor_token, second_factor_method)\n         RateLimiter.new(nil, \"second-factor-min-#{request.remote_ip}\", 3, 1.minute).performed!\n-        @error = I18n.t('login.invalid_second_factor_code')\n-        return render layout: 'no_ember'\n+        return render json: { error: I18n.t('login.invalid_second_factor_code') }\n       end\n     end\n \n     if user = EmailToken.confirm(token)\n       if login_not_approved_for?(user)\n-        @error = login_not_approved[:error]\n+        return render json: login_not_approved\n       elsif payload = login_error_check(user)\n-        @error = payload[:error]\n+        return render json: payload\n       else\n         log_on_user(user)\n-        return redirect_to path(\"/\")\n+        return render json: success_json\n       end\n-    else\n-      @error = I18n.t('email_login.invalid_token')\n     end\n \n-    render layout: 'no_ember'\n+    return render json: { error: I18n.t('email_login.invalid_token') }\n   end\n \n   def one_time_password\n-    otp_username = $redis.get \"otp_#{params[:token]}\"\n+    @otp_username = otp_username = $redis.get \"otp_#{params[:token]}\"\n \n     if otp_username && user = User.find_by_username(otp_username)\n-      log_on_user(user)\n-      $redis.del \"otp_#{params[:token]}\"\n-      return redirect_to path(\"/\")\n+      if current_user&.username == otp_username\n+        $redis.del \"otp_#{params[:token]}\"\n+        return redirect_to path(\"/\")\n+      elsif request.post?\n+        log_on_user(user)\n+        $redis.del \"otp_#{params[:token]}\"\n+        return redirect_to path(\"/\")\n+      else\n+        # Display the form\n+      end\n     else\n       @error = I18n.t('user_api_key.invalid_token')\n     end"
        },
        {
          "filename": "app/views/session/email_login.html.erb",
          "status": "removed",
          "additions": 0,
          "deletions": 45,
          "patch": "@@ -1,45 +0,0 @@\n-<%if @error%>\n-  <div class='alert alert-error'>\n-    <%= @error %>\n-  </div>\n-<%end%>\n-\n-<%if @second_factor_required%>\n-  <div id=\"simple-container\">\n-    <div id=\"primary-second-factor-form\">\n-      <%= form_tag(method: \"post\") do%>\n-        <h2><%=t \"login.second_factor_title\" %></h2>\n-        <%= label_tag(:second_factor_token, t(\"login.second_factor_description\")) %>\n-        <div><%= render 'common/second_factor_text_field' %></div>\n-        <%= submit_tag(t(\"submit\"), class: \"btn btn-large btn-primary\") %>\n-      <%end%>\n-    </div>\n-\n-    <%if @backup_codes_enabled%>\n-      <div id=\"backup-second-factor-form\" style=\"display: none\">\n-        <%= form_tag(method: \"post\") do%>\n-          <h2><%=t \"login.second_factor_backup_title\" %></h2>\n-          <%= label_tag(:second_factor_token, t(\"login.second_factor_backup_description\")) %>\n-          <div><%= render 'common/second_factor_backup_input' %></div>\n-          <%= submit_tag(t(\"submit\"), class: \"btn btn-large btn-primary\") %>\n-        <%end%>\n-      </div>\n-      <a href id=\"toggle-form\"><%=t \"login.second_factor_toggle.backup_code\" %></a>\n-      <%= render 'common/second_factor_form_script' %>\n-    <%end%>\n-  </div>\n-<%end%>\n-\n-\n-\n-<% content_for :title do %><%=t \"email_login.title\" %><% end %>\n-\n-<%- content_for(:no_ember_head) do %>\n-  <meta name=\"referrer\" content=\"no-referrer\">\n-  <%= preload_script \"ember_jquery\" %>\n-  <%= render_google_universal_analytics_code %>\n-<%- end %>\n-\n-<%- content_for(:head) do %>\n-  <meta name=\"referrer\" content=\"no-referrer\">\n-<%- end %>"
        },
        {
          "filename": "app/views/session/one_time_password.html.erb",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -2,4 +2,10 @@\n   <div class='alert alert-error'>\n     <%= @error %>\n   </div>\n+<%else%>\n+  <%= form_tag do%>\n+    <h2><%= t(\"user_api_key.otp_confirmation.confirm_title\", site_name: SiteSetting.title) %></h2>\n+    <p><%= t(\"user_api_key.otp_confirmation.logging_in_as\", username: @otp_username) %></p>\n+    <%= submit_tag(t(\"user_api_key.otp_confirmation.confirm_button\"), class: \"btn btn-primary\") %>\n+  <%end%>\n <%end%>"
        },
        {
          "filename": "config/locales/client.en.yml",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1387,6 +1387,9 @@ en:\n       complete_email_found: \"We found an account that matches <b>%{email}</b>, you should receive an email with a login link shortly.\"\n       complete_username_not_found: \"No account matches the username <b>%{username}</b>\"\n       complete_email_not_found: \"No account matches <b>%{email}</b>\"\n+      confirm_title: Continue to %{site_name}\n+      logging_in_as: Logging in as %{email}\n+      confirm_button: Finish Login\n \n     login:\n       title: \"Log In\""
        },
        {
          "filename": "config/locales/server.en.yml",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -939,6 +939,10 @@ en:\n     description: '\"%{application_name}\" is requesting the following access to your account:'\n     instructions: 'We just generated a new user API key for you to use with \"%{application_name}\", please paste the following key into your application:'\n     otp_description: 'Would you like to allow \"%{application_name}\" to access this site?'\n+    otp_confirmation: \n+      confirm_title: Continue to %{site_name}\n+      logging_in_as: Logging in as %{username}\n+      confirm_button: Finish Login\n     no_trust_level: \"Sorry, you do not have the required trust level to access the user API\"\n     generic_error: \"Sorry, we are unable to issue user API keys, this feature may be disabled by the site admin\"\n     scopes:"
        },
        {
          "filename": "config/routes.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -337,9 +337,10 @@\n   get \"session/sso_provider\" => \"session#sso_provider\"\n   get \"session/current\" => \"session#current\"\n   get \"session/csrf\" => \"session#csrf\"\n-  get \"session/email-login/:token\" => \"session#email_login\"\n+  get \"session/email-login/:token\" => \"session#email_login_info\"\n   post \"session/email-login/:token\" => \"session#email_login\"\n   get \"session/otp/:token\" => \"session#one_time_password\", constraints: { token: /[0-9a-f]+/ }\n+  post \"session/otp/:token\" => \"session#one_time_password\", constraints: { token: /[0-9a-f]+/ }\n   get \"composer_messages\" => \"composer_messages#index\"\n   post \"composer/parse_html\" => \"composer#parse_html\"\n "
        },
        {
          "filename": "spec/requests/session_controller_spec.rb",
          "status": "modified",
          "additions": 127,
          "deletions": 52,
          "patch": "@@ -14,7 +14,7 @@\n     end\n   end\n \n-  describe '#email_login' do\n+  describe '#email_login_info' do\n     before do\n       SiteSetting.enable_local_logins_via_email = true\n     end\n@@ -26,13 +26,66 @@\n       end\n     end\n \n+    context 'valid token' do\n+      it 'returns information' do\n+        get \"/session/email-login/#{email_token.token}.json\"\n+\n+        expect(JSON.parse(response.body)[\"can_login\"]).to eq(true)\n+        expect(JSON.parse(response.body)[\"second_factor_required\"]).to eq(nil)\n+\n+        # Does not log in the user\n+        expect(session[:current_user_id]).to be_nil\n+      end\n+\n+      it 'fails when local logins via email is disabled' do\n+        SiteSetting.enable_local_logins_via_email = false\n+\n+        get \"/session/email-login/#{email_token.token}.json\"\n+\n+        expect(response.status).to eq(404)\n+      end\n+\n+      it 'fails when local logins is disabled' do\n+        SiteSetting.enable_local_logins = false\n+\n+        get \"/session/email-login/#{email_token.token}.json\"\n+\n+        expect(response.status).to eq(500)\n+      end\n+\n+      context 'user has 2-factor logins' do\n+        let!(:user_second_factor) { Fabricate(:user_second_factor_totp, user: user) }\n+        let!(:user_second_factor_backup) { Fabricate(:user_second_factor_backup, user: user) }\n+\n+        it \"includes that information in the response\" do\n+          get \"/session/email-login/#{email_token.token}.json\"\n+\n+          expect(JSON.parse(response.body)[\"can_login\"]).to eq(true)\n+          expect(JSON.parse(response.body)[\"second_factor_required\"]).to eq(true)\n+          expect(JSON.parse(response.body)[\"backup_codes_enabled\"]).to eq(true)\n+        end\n+      end\n+    end\n+  end\n+\n+  describe '#email_login' do\n+    before do\n+      SiteSetting.enable_local_logins_via_email = true\n+    end\n+\n+    context 'missing token' do\n+      it 'returns the right response' do\n+        post \"/session/email-login\"\n+        expect(response.status).to eq(404)\n+      end\n+    end\n+\n     context 'invalid token' do\n       it 'returns the right response' do\n-        get \"/session/email-login/adasdad\"\n+        post \"/session/email-login/adasdad.json\"\n \n         expect(response.status).to eq(200)\n-\n-        expect(CGI.unescapeHTML(response.body)).to match(\n+        expect(JSON.parse(response.body)[\"error\"]).to eq(\n           I18n.t('email_login.invalid_token')\n         )\n       end\n@@ -41,11 +94,11 @@\n         it 'should return the right response' do\n           email_token.update!(created_at: 999.years.ago)\n \n-          get \"/session/email-login/#{email_token.token}\"\n+          post \"/session/email-login/#{email_token.token}.json\"\n \n           expect(response.status).to eq(200)\n \n-          expect(CGI.unescapeHTML(response.body)).to match(\n+          expect(JSON.parse(response.body)[\"error\"]).to eq(\n             I18n.t('email_login.invalid_token')\n           )\n         end\n@@ -54,37 +107,39 @@\n \n     context 'valid token' do\n       it 'returns success' do\n-        get \"/session/email-login/#{email_token.token}\"\n+        post \"/session/email-login/#{email_token.token}.json\"\n \n-        expect(response).to redirect_to(\"/\")\n+        expect(JSON.parse(response.body)[\"success\"]).to eq(\"OK\")\n+        expect(session[:current_user_id]).to eq(user.id)\n       end\n \n       it 'fails when local logins via email is disabled' do\n         SiteSetting.enable_local_logins_via_email = false\n \n-        get \"/session/email-login/#{email_token.token}\"\n+        post \"/session/email-login/#{email_token.token}.json\"\n \n         expect(response.status).to eq(404)\n+        expect(session[:current_user_id]).to eq(nil)\n       end\n \n       it 'fails when local logins is disabled' do\n         SiteSetting.enable_local_logins = false\n \n-        get \"/session/email-login/#{email_token.token}\"\n+        post \"/session/email-login/#{email_token.token}.json\"\n \n         expect(response.status).to eq(500)\n+        expect(session[:current_user_id]).to eq(nil)\n       end\n \n       it \"doesn't log in the user when not approved\" do\n         SiteSetting.must_approve_users = true\n \n-        get \"/session/email-login/#{email_token.token}\"\n+        post \"/session/email-login/#{email_token.token}.json\"\n \n         expect(response.status).to eq(200)\n \n-        expect(CGI.unescapeHTML(response.body)).to include(\n-          I18n.t(\"login.not_approved\")\n-        )\n+        expect(JSON.parse(response.body)[\"error\"]).to eq(I18n.t(\"login.not_approved\"))\n+        expect(session[:current_user_id]).to eq(nil)\n       end\n \n       context \"when admin IP address is not valid\" do\n@@ -99,13 +154,14 @@\n         end\n \n         it 'returns the right response' do\n-          get \"/session/email-login/#{email_token.token}\"\n+          post \"/session/email-login/#{email_token.token}.json\"\n \n           expect(response.status).to eq(200)\n \n-          expect(CGI.unescapeHTML(response.body)).to include(\n+          expect(JSON.parse(response.body)[\"error\"]).to eq(\n             I18n.t(\"login.admin_not_allowed_from_ip_address\", username: user.username)\n           )\n+          expect(session[:current_user_id]).to eq(nil)\n         end\n       end\n \n@@ -122,13 +178,14 @@\n         it 'returns the right response' do\n           ActionDispatch::Request.any_instance.stubs(:remote_ip).returns(permitted_ip_address)\n \n-          get \"/session/email-login/#{email_token.token}\"\n+          post \"/session/email-login/#{email_token.token}.json\"\n \n           expect(response.status).to eq(200)\n \n-          expect(CGI.unescapeHTML(response.body)).to include(\n+          expect(JSON.parse(response.body)[\"error\"]).to eq(\n             I18n.t(\"login.not_allowed_from_ip_address\", username: user.username)\n           )\n+          expect(session[:current_user_id]).to eq(nil)\n         end\n       end\n \n@@ -138,86 +195,73 @@\n           suspended_at: Time.zone.now\n         )\n \n-        get \"/session/email-login/#{email_token.token}\"\n+        post \"/session/email-login/#{email_token.token}.json\"\n \n         expect(response.status).to eq(200)\n \n-        expect(CGI.unescapeHTML(response.body)).to include(I18n.t(\"login.suspended\",\n-          date: I18n.l(user.suspended_till, format: :date_only)\n+        expect(JSON.parse(response.body)[\"error\"]).to eq(\n+          I18n.t(\"login.suspended\", date: I18n.l(user.suspended_till, format: :date_only)\n         ))\n+        expect(session[:current_user_id]).to eq(nil)\n       end\n \n       context 'user has 2-factor logins' do\n         let!(:user_second_factor) { Fabricate(:user_second_factor_totp, user: user) }\n         let!(:user_second_factor_backup) { Fabricate(:user_second_factor_backup, user: user) }\n \n-        describe 'requires second factor' do\n-          it 'should return a second factor prompt' do\n-            get \"/session/email-login/#{email_token.token}\"\n-\n-            expect(response.status).to eq(200)\n-\n-            response_body = CGI.unescapeHTML(response.body)\n-\n-            expect(response_body).to include(I18n.t(\n-              \"login.second_factor_title\"\n-            ))\n-\n-            expect(response_body).to_not include(I18n.t(\n-              \"login.invalid_second_factor_code\"\n-            ))\n-          end\n-        end\n-\n         describe 'errors on incorrect 2-factor' do\n           context 'when using totp method' do\n             it 'does not log in with incorrect two factor' do\n-              post \"/session/email-login/#{email_token.token}\", params: {\n+              post \"/session/email-login/#{email_token.token}.json\", params: {\n                 second_factor_token: \"0000\",\n                 second_factor_method: UserSecondFactor.methods[:totp]\n               }\n \n               expect(response.status).to eq(200)\n \n-              expect(CGI.unescapeHTML(response.body)).to include(I18n.t(\n-                \"login.invalid_second_factor_code\"\n-              ))\n+              expect(JSON.parse(response.body)[\"error\"]).to eq(\n+                I18n.t(\"login.invalid_second_factor_code\")\n+              )\n+              expect(session[:current_user_id]).to eq(nil)\n             end\n           end\n           context 'when using backup code method' do\n             it 'does not log in with incorrect backup code' do\n-              post \"/session/email-login/#{email_token.token}\", params: {\n+              post \"/session/email-login/#{email_token.token}.json\", params: {\n                 second_factor_token: \"0000\",\n                 second_factor_method: UserSecondFactor.methods[:backup_codes]\n               }\n \n               expect(response.status).to eq(200)\n-              expect(CGI.unescapeHTML(response.body)).to include(I18n.t(\n-                \"login.invalid_second_factor_code\"\n-              ))\n+              expect(JSON.parse(response.body)[\"error\"]).to eq(\n+                I18n.t(\"login.invalid_second_factor_code\")\n+              )\n+              expect(session[:current_user_id]).to eq(nil)\n             end\n           end\n         end\n \n         describe 'allows successful 2-factor' do\n           context 'when using totp method' do\n             it 'logs in correctly' do\n-              post \"/session/email-login/#{email_token.token}\", params: {\n+              post \"/session/email-login/#{email_token.token}.json\", params: {\n                 second_factor_token: ROTP::TOTP.new(user_second_factor.data).now,\n                 second_factor_method: UserSecondFactor.methods[:totp]\n               }\n \n-              expect(response).to redirect_to(\"/\")\n+              expect(JSON.parse(response.body)[\"success\"]).to eq(\"OK\")\n+              expect(session[:current_user_id]).to eq(user.id)\n             end\n           end\n           context 'when using backup code method' do\n             it 'logs in correctly' do\n-              post \"/session/email-login/#{email_token.token}\", params: {\n+              post \"/session/email-login/#{email_token.token}.json\", params: {\n                 second_factor_token: \"iAmValidBackupCode\",\n                 second_factor_method: UserSecondFactor.methods[:backup_codes]\n               }\n \n-              expect(response).to redirect_to(\"/\")\n+              expect(JSON.parse(response.body)[\"success\"]).to eq(\"OK\")\n+              expect(session[:current_user_id]).to eq(user.id)\n             end\n           end\n         end\n@@ -1325,9 +1369,40 @@ def post_login\n         get \"/session/otp/asd1231dasd123\"\n \n         expect(response.status).to eq(404)\n+\n+        post \"/session/otp/asd1231dasd123\"\n+\n+        expect(response.status).to eq(404)\n       end\n \n       context 'when token is valid' do\n+        it \"should display the form for GET\" do\n+          token = SecureRandom.hex\n+          $redis.setex \"otp_#{token}\", 10.minutes, user.username\n+\n+          get \"/session/otp/#{token}\"\n+\n+          expect(response.status).to eq(200)\n+          expect(response.body).to include(\n+            I18n.t(\"user_api_key.otp_confirmation.logging_in_as\", username: user.username)\n+          )\n+          expect($redis.get(\"otp_#{token}\")).to eq(user.username)\n+\n+          expect(session[:current_user_id]).to eq(nil)\n+        end\n+\n+        it \"should redirect on GET if already logged in\" do\n+          sign_in(user)\n+          token = SecureRandom.hex\n+          $redis.setex \"otp_#{token}\", 10.minutes, user.username\n+\n+          get \"/session/otp/#{token}\"\n+          expect(response.status).to eq(302)\n+\n+          expect($redis.get(\"otp_#{token}\")).to eq(nil)\n+          expect(session[:current_user_id]).to eq(user.id)\n+        end\n+\n         it 'should authenticate user and delete token' do\n           user = Fabricate(:user)\n \n@@ -1337,7 +1412,7 @@ def post_login\n           token = SecureRandom.hex\n           $redis.setex \"otp_#{token}\", 10.minutes, user.username\n \n-          get \"/session/otp/#{token}\"\n+          post \"/session/otp/#{token}\"\n \n           expect(response.status).to eq(302)\n           expect(response).to redirect_to(\"/\")"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 10,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "473e37e7b3dcb254548a04695fb5e5f56a6de33b",
            "date": "2025-01-14T14:32:50Z",
            "author_login": "CvX"
          },
          {
            "sha": "eb64db828e116edbacdf10266f8102ed7028a2f2",
            "date": "2025-01-14T13:28:46Z",
            "author_login": "renato"
          },
          {
            "sha": "7330cfa76a6e6ab7bf90702fb1db5e1a37a2eca1",
            "date": "2025-01-14T13:28:16Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "f8c493f3c4ee5e38dff460288996c780a6458e29",
            "date": "2025-01-14T12:47:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6cb8b576d0c7902b99cbb39bc7aaa473d454118a",
            "date": "2025-01-14T12:46:14Z",
            "author_login": "CvX"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": null,
    "description": "Discourse before 2.3.0 and 2.4.x before 2.4.0.beta3 lacks a confirmation screen when logging in via a user-api OTP.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-07-29T13:15:12.263",
    "last_modified": "2024-11-21T04:18:11.960",
    "fix_date": "2019-06-17T14:59:41Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/b8340c6c8e50a71ff1bca9654b9126ca5a84ce9a",
      "source": "josh@bress.net",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/e6e47f2fb22764c92aaa90445c7bf203192fba11",
      "source": "josh@bress.net",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/b8340c6c8e50a71ff1bca9654b9126ca5a84ce9a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/e6e47f2fb22764c92aaa90445c7bf203192fba11",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:54.817822",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}