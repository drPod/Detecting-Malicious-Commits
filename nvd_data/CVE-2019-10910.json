{
  "cve_id": "CVE-2019-10910",
  "github_data": {
    "repository": "symfony/symfony",
    "fix_commit": "d2fb5893923292a1da7985f0b56960b5bb10737b",
    "related_commits": [
      "d2fb5893923292a1da7985f0b56960b5bb10737b",
      "d2fb5893923292a1da7985f0b56960b5bb10737b"
    ],
    "patch_url": "https://github.com/symfony/symfony/commit/d2fb5893923292a1da7985f0b56960b5bb10737b.patch",
    "fix_commit_details": {
      "sha": "d2fb5893923292a1da7985f0b56960b5bb10737b",
      "commit_date": "2019-04-02T17:55:56Z",
      "author": {
        "login": "nicolas-grekas",
        "type": "User",
        "stats": {
          "total_commits": 16251,
          "average_weekly_commits": 20.70191082802548,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 533
        }
      },
      "commit_message": {
        "title": "[DI] Check service IDs are valid",
        "length": 32,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 337,
        "additions": 283,
        "deletions": 54
      },
      "files": [
        {
          "filename": "src/Symfony/Bridge/ProxyManager/LazyProxy/PhpDumper/ProxyDumper.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -58,7 +58,7 @@ public function getProxyFactoryCode(Definition $definition, $id, $factoryCode =\n         $instantiation = 'return';\n \n         if ($definition->isShared()) {\n-            $instantiation .= sprintf(' $this->%s[\\'%s\\'] =', \\method_exists(ContainerBuilder::class, 'addClassResource') || ($definition->isPublic() && !$definition->isPrivate()) ? 'services' : 'privates', $id);\n+            $instantiation .= sprintf(' $this->%s[%s] =', \\method_exists(ContainerBuilder::class, 'addClassResource') || ($definition->isPublic() && !$definition->isPrivate()) ? 'services' : 'privates', var_export($id, true));\n         }\n \n         if (null === $factoryCode) {"
        },
        {
          "filename": "src/Symfony/Component/DependencyInjection/ContainerBuilder.php",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -868,6 +868,10 @@ public function setAlias($alias, $id)\n     {\n         $alias = $this->normalizeId($alias);\n \n+        if ('' === $alias || '\\\\' === substr($alias, -1) || \\strlen($alias) !== strcspn($alias, \"\\0\\r\\n'\")) {\n+            throw new InvalidArgumentException(sprintf('Invalid alias id: \"%s\"', $alias));\n+        }\n+\n         if (\\is_string($id)) {\n             $id = new Alias($this->normalizeId($id));\n         } elseif (!$id instanceof Alias) {\n@@ -1021,6 +1025,10 @@ public function setDefinition($id, Definition $definition)\n \n         $id = $this->normalizeId($id);\n \n+        if ('' === $id || '\\\\' === substr($id, -1) || \\strlen($id) !== strcspn($id, \"\\0\\r\\n'\")) {\n+            throw new InvalidArgumentException(sprintf('Invalid service id: \"%s\"', $id));\n+        }\n+\n         unset($this->aliasDefinitions[$id], $this->removedIds[$id]);\n \n         return $this->definitions[$id] = $definition;"
        },
        {
          "filename": "src/Symfony/Component/DependencyInjection/Dumper/PhpDumper.php",
          "status": "modified",
          "additions": 19,
          "deletions": 14,
          "patch": "@@ -483,7 +483,7 @@ private function addServiceInstance($id, Definition $definition, $isSimpleInstan\n         $instantiation = '';\n \n         if (!$isProxyCandidate && $definition->isShared()) {\n-            $instantiation = \"\\$this->services['$id'] = \".($isSimpleInstance ? '' : '$instance');\n+            $instantiation = sprintf('$this->services[%s] = %s', $this->doExport($id), $isSimpleInstance ? '' : '$instance');\n         } elseif (!$isSimpleInstance) {\n             $instantiation = '$instance';\n         }\n@@ -679,6 +679,9 @@ private function addService($id, Definition $definition, &$file = null)\n      * Gets the $public '$id'$shared$autowired service.\n      *\n      * $return\n+EOF;\n+            $code = str_replace('*/', ' ', $code).<<<EOF\n+\n      */\n     protected function {$methodName}($lazyInitialization)\n     {\n@@ -693,7 +696,7 @@ protected function {$methodName}($lazyInitialization)\n \n         if ($this->getProxyDumper()->isProxyCandidate($definition)) {\n             $factoryCode = $asFile ? \"\\$this->load('%s.php', false)\" : '$this->%s(false)';\n-            $code .= $this->getProxyDumper()->getProxyFactoryCode($definition, $id, sprintf($factoryCode, $methodName));\n+            $code .= $this->getProxyDumper()->getProxyFactoryCode($definition, $id, sprintf($factoryCode, $methodName, $this->doExport($id)));\n         }\n \n         if ($definition->isDeprecated()) {\n@@ -767,14 +770,14 @@ private function addInlineReference($id, Definition $definition, $targetId, $for\n \n         $code .= sprintf(<<<'EOTXT'\n \n-        if (isset($this->%s['%s'])) {\n-            return $this->%1$s['%2$s'];\n+        if (isset($this->%s[%s])) {\n+            return $this->%1$s[%2$s];\n         }\n \n EOTXT\n             ,\n             'services',\n-            $id\n+            $this->doExport($id)\n         );\n \n         return $code;\n@@ -1530,14 +1533,14 @@ private function getServiceConditionals($value)\n             if (!$this->container->hasDefinition($service)) {\n                 return 'false';\n             }\n-            $conditions[] = sprintf(\"isset(\\$this->services['%s'])\", $service);\n+            $conditions[] = sprintf('isset($this->services[%s])', $this->doExport($service));\n         }\n         foreach (ContainerBuilder::getServiceConditionals($value) as $service) {\n             if ($this->container->hasDefinition($service) && !$this->container->getDefinition($service)->isPublic()) {\n                 continue;\n             }\n \n-            $conditions[] = sprintf(\"\\$this->has('%s')\", $service);\n+            $conditions[] = sprintf('$this->has(%s)', $this->doExport($service));\n         }\n \n         if (!$conditions) {\n@@ -1776,6 +1779,8 @@ private function dumpLiteralClass($class)\n      */\n     private function dumpParameter($name)\n     {\n+        $name = (string) $name;\n+\n         if ($this->container->isCompiled() && $this->container->hasParameter($name)) {\n             $value = $this->container->getParameter($name);\n             $dumpedValue = $this->dumpValue($value, false);\n@@ -1785,11 +1790,11 @@ private function dumpParameter($name)\n             }\n \n             if (!preg_match(\"/\\\\\\$this->(?:getEnv\\('(?:\\w++:)*+\\w++'\\)|targetDirs\\[\\d++\\])/\", $dumpedValue)) {\n-                return sprintf(\"\\$this->parameters['%s']\", $name);\n+                return sprintf('$this->parameters[%s]', $this->doExport($name));\n             }\n         }\n \n-        return sprintf(\"\\$this->getParameter('%s')\", $name);\n+        return sprintf('$this->getParameter(%s)', $this->doExport($name));\n     }\n \n     /**\n@@ -1813,7 +1818,7 @@ private function getServiceCall($id, Reference $reference = null)\n \n         if ($this->container->hasDefinition($id) && $definition = $this->container->getDefinition($id)) {\n             if ($definition->isSynthetic()) {\n-                $code = sprintf('$this->get(\\'%s\\'%s)', $id, null !== $reference ? ', '.$reference->getInvalidBehavior() : '');\n+                $code = sprintf('$this->get(%s%s)', $this->doExport($id), null !== $reference ? ', '.$reference->getInvalidBehavior() : '');\n             } elseif (null !== $reference && ContainerInterface::IGNORE_ON_UNINITIALIZED_REFERENCE === $reference->getInvalidBehavior()) {\n                 $code = 'null';\n                 if (!$definition->isShared()) {\n@@ -1822,7 +1827,7 @@ private function getServiceCall($id, Reference $reference = null)\n             } elseif ($this->isTrivialInstance($definition)) {\n                 $code = substr($this->addNewInstance($definition, '', '', $id), 8, -2);\n                 if ($definition->isShared()) {\n-                    $code = sprintf('$this->services[\\'%s\\'] = %s', $id, $code);\n+                    $code = sprintf('$this->services[%s] = %s', $this->doExport($id), $code);\n                 }\n                 $code = \"($code)\";\n             } elseif ($this->asFiles && $definition->isShared() && !$this->isHotPath($definition)) {\n@@ -1833,14 +1838,14 @@ private function getServiceCall($id, Reference $reference = null)\n         } elseif (null !== $reference && ContainerInterface::IGNORE_ON_UNINITIALIZED_REFERENCE === $reference->getInvalidBehavior()) {\n             return 'null';\n         } elseif (null !== $reference && ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE !== $reference->getInvalidBehavior()) {\n-            $code = sprintf('$this->get(\\'%s\\', /* ContainerInterface::NULL_ON_INVALID_REFERENCE */ %d)', $id, ContainerInterface::NULL_ON_INVALID_REFERENCE);\n+            $code = sprintf('$this->get(%s, /* ContainerInterface::NULL_ON_INVALID_REFERENCE */ %d)', $this->doExport($id), ContainerInterface::NULL_ON_INVALID_REFERENCE);\n         } else {\n-            $code = sprintf('$this->get(\\'%s\\')', $id);\n+            $code = sprintf('$this->get(%s)', $this->doExport($id));\n         }\n \n         // The following is PHP 5.5 syntax for what could be written as \"(\\$this->services['$id'] ?? $code)\" on PHP>=7.0\n \n-        return \"\\${(\\$_ = isset(\\$this->services['$id']) ? \\$this->services['$id'] : $code) && false ?: '_'}\";\n+        return sprintf(\"\\${(\\$_ = isset(\\$this->services[%s]) ? \\$this->services[%1\\$s] : %s) && false ?: '_'}\", $this->doExport($id), $code);\n     }\n \n     /**"
        },
        {
          "filename": "src/Symfony/Component/DependencyInjection/Tests/ContainerBuilderTest.php",
          "status": "modified",
          "additions": 32,
          "deletions": 0,
          "patch": "@@ -195,6 +195,38 @@ public function testNonSharedServicesReturnsDifferentInstances()\n         $this->assertNotSame($builder->get('bar'), $builder->get('bar'));\n     }\n \n+    /**\n+     * @expectedException \\Symfony\\Component\\DependencyInjection\\Exception\\InvalidArgumentException\n+     * @dataProvider provideBadId\n+     */\n+    public function testBadAliasId($id)\n+    {\n+        $builder = new ContainerBuilder();\n+        $builder->setAlias($id, 'foo');\n+    }\n+\n+    /**\n+     * @expectedException \\Symfony\\Component\\DependencyInjection\\Exception\\InvalidArgumentException\n+     * @dataProvider provideBadId\n+     */\n+    public function testBadDefinitionId($id)\n+    {\n+        $builder = new ContainerBuilder();\n+        $builder->setDefinition($id, new Definition('Foo'));\n+    }\n+\n+    public function provideBadId()\n+    {\n+        return [\n+            [''],\n+            [\"\\0\"],\n+            [\"\\r\"],\n+            [\"\\n\"],\n+            [\"'\"],\n+            ['ab\\\\'],\n+        ];\n+    }\n+\n     /**\n      * @expectedException        \\Symfony\\Component\\DependencyInjection\\Exception\\RuntimeException\n      * @expectedExceptionMessage You have requested a synthetic service (\"foo\"). The DIC does not know how to construct this service."
        },
        {
          "filename": "src/Symfony/Component/DependencyInjection/Tests/Dumper/PhpDumperTest.php",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -234,12 +234,18 @@ public function testAddServiceIdWithUnsupportedCharacters()\n     {\n         $class = 'Symfony_DI_PhpDumper_Test_Unsupported_Characters';\n         $container = new ContainerBuilder();\n+        $container->setParameter(\"'\", 'oh-no');\n+        $container->register(\"foo*/oh-no\", 'FooClass')->setPublic(true);\n         $container->register('bar$', 'FooClass')->setPublic(true);\n         $container->register('bar$!', 'FooClass')->setPublic(true);\n         $container->compile();\n         $dumper = new PhpDumper($container);\n-        eval('?>'.$dumper->dump(['class' => $class]));\n \n+        $this->assertStringEqualsFile(self::$fixturesPath.'/php/services_unsupported_characters.php', $dumper->dump(['class' => $class]));\n+\n+        require_once self::$fixturesPath.'/php/services_unsupported_characters.php';\n+\n+        $this->assertTrue(method_exists($class, 'getFooOhNoService'));\n         $this->assertTrue(method_exists($class, 'getBarService'));\n         $this->assertTrue(method_exists($class, 'getBar2Service'));\n     }"
        },
        {
          "filename": "src/Symfony/Component/DependencyInjection/Tests/Fixtures/php/services33.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -66,7 +66,7 @@ public function isFrozen()\n      */\n     protected function getFooService()\n     {\n-        return $this->services['Bar\\Foo'] = new \\Bar\\Foo();\n+        return $this->services['Bar\\\\Foo'] = new \\Bar\\Foo();\n     }\n \n     /**\n@@ -76,6 +76,6 @@ protected function getFooService()\n      */\n     protected function getFoo2Service()\n     {\n-        return $this->services['Foo\\Foo'] = new \\Foo\\Foo();\n+        return $this->services['Foo\\\\Foo'] = new \\Foo\\Foo();\n     }\n }"
        },
        {
          "filename": "src/Symfony/Component/DependencyInjection/Tests/Fixtures/php/services_adawson.php",
          "status": "modified",
          "additions": 23,
          "deletions": 23,
          "patch": "@@ -88,10 +88,10 @@ public function isFrozen()\n      */\n     protected function getBusService()\n     {\n-        $this->services['App\\Bus'] = $instance = new \\App\\Bus(${($_ = isset($this->services['App\\Db']) ? $this->services['App\\Db'] : $this->getDbService()) && false ?: '_'});\n+        $this->services['App\\\\Bus'] = $instance = new \\App\\Bus(${($_ = isset($this->services['App\\\\Db']) ? $this->services['App\\\\Db'] : $this->getDbService()) && false ?: '_'});\n \n-        $instance->handler1 = ${($_ = isset($this->services['App\\Handler1']) ? $this->services['App\\Handler1'] : $this->getHandler1Service()) && false ?: '_'};\n-        $instance->handler2 = ${($_ = isset($this->services['App\\Handler2']) ? $this->services['App\\Handler2'] : $this->getHandler2Service()) && false ?: '_'};\n+        $instance->handler1 = ${($_ = isset($this->services['App\\\\Handler1']) ? $this->services['App\\\\Handler1'] : $this->getHandler1Service()) && false ?: '_'};\n+        $instance->handler2 = ${($_ = isset($this->services['App\\\\Handler2']) ? $this->services['App\\\\Handler2'] : $this->getHandler2Service()) && false ?: '_'};\n \n         return $instance;\n     }\n@@ -103,9 +103,9 @@ protected function getBusService()\n      */\n     protected function getDbService()\n     {\n-        $this->services['App\\Db'] = $instance = new \\App\\Db();\n+        $this->services['App\\\\Db'] = $instance = new \\App\\Db();\n \n-        $instance->schema = ${($_ = isset($this->services['App\\Schema']) ? $this->services['App\\Schema'] : $this->getSchemaService()) && false ?: '_'};\n+        $instance->schema = ${($_ = isset($this->services['App\\\\Schema']) ? $this->services['App\\\\Schema'] : $this->getSchemaService()) && false ?: '_'};\n \n         return $instance;\n     }\n@@ -117,13 +117,13 @@ protected function getDbService()\n      */\n     protected function getHandler1Service()\n     {\n-        $a = ${($_ = isset($this->services['App\\Processor']) ? $this->services['App\\Processor'] : $this->getProcessorService()) && false ?: '_'};\n+        $a = ${($_ = isset($this->services['App\\\\Processor']) ? $this->services['App\\\\Processor'] : $this->getProcessorService()) && false ?: '_'};\n \n-        if (isset($this->services['App\\Handler1'])) {\n-            return $this->services['App\\Handler1'];\n+        if (isset($this->services['App\\\\Handler1'])) {\n+            return $this->services['App\\\\Handler1'];\n         }\n \n-        return $this->services['App\\Handler1'] = new \\App\\Handler1(${($_ = isset($this->services['App\\Db']) ? $this->services['App\\Db'] : $this->getDbService()) && false ?: '_'}, ${($_ = isset($this->services['App\\Schema']) ? $this->services['App\\Schema'] : $this->getSchemaService()) && false ?: '_'}, $a);\n+        return $this->services['App\\\\Handler1'] = new \\App\\Handler1(${($_ = isset($this->services['App\\\\Db']) ? $this->services['App\\\\Db'] : $this->getDbService()) && false ?: '_'}, ${($_ = isset($this->services['App\\\\Schema']) ? $this->services['App\\\\Schema'] : $this->getSchemaService()) && false ?: '_'}, $a);\n     }\n \n     /**\n@@ -133,13 +133,13 @@ protected function getHandler1Service()\n      */\n     protected function getHandler2Service()\n     {\n-        $a = ${($_ = isset($this->services['App\\Processor']) ? $this->services['App\\Processor'] : $this->getProcessorService()) && false ?: '_'};\n+        $a = ${($_ = isset($this->services['App\\\\Processor']) ? $this->services['App\\\\Processor'] : $this->getProcessorService()) && false ?: '_'};\n \n-        if (isset($this->services['App\\Handler2'])) {\n-            return $this->services['App\\Handler2'];\n+        if (isset($this->services['App\\\\Handler2'])) {\n+            return $this->services['App\\\\Handler2'];\n         }\n \n-        return $this->services['App\\Handler2'] = new \\App\\Handler2(${($_ = isset($this->services['App\\Db']) ? $this->services['App\\Db'] : $this->getDbService()) && false ?: '_'}, ${($_ = isset($this->services['App\\Schema']) ? $this->services['App\\Schema'] : $this->getSchemaService()) && false ?: '_'}, $a);\n+        return $this->services['App\\\\Handler2'] = new \\App\\Handler2(${($_ = isset($this->services['App\\\\Db']) ? $this->services['App\\\\Db'] : $this->getDbService()) && false ?: '_'}, ${($_ = isset($this->services['App\\\\Schema']) ? $this->services['App\\\\Schema'] : $this->getSchemaService()) && false ?: '_'}, $a);\n     }\n \n     /**\n@@ -149,13 +149,13 @@ protected function getHandler2Service()\n      */\n     protected function getProcessorService()\n     {\n-        $a = ${($_ = isset($this->services['App\\Registry']) ? $this->services['App\\Registry'] : $this->getRegistryService()) && false ?: '_'};\n+        $a = ${($_ = isset($this->services['App\\\\Registry']) ? $this->services['App\\\\Registry'] : $this->getRegistryService()) && false ?: '_'};\n \n-        if (isset($this->services['App\\Processor'])) {\n-            return $this->services['App\\Processor'];\n+        if (isset($this->services['App\\\\Processor'])) {\n+            return $this->services['App\\\\Processor'];\n         }\n \n-        return $this->services['App\\Processor'] = new \\App\\Processor($a, ${($_ = isset($this->services['App\\Db']) ? $this->services['App\\Db'] : $this->getDbService()) && false ?: '_'});\n+        return $this->services['App\\\\Processor'] = new \\App\\Processor($a, ${($_ = isset($this->services['App\\\\Db']) ? $this->services['App\\\\Db'] : $this->getDbService()) && false ?: '_'});\n     }\n \n     /**\n@@ -165,9 +165,9 @@ protected function getProcessorService()\n      */\n     protected function getRegistryService()\n     {\n-        $this->services['App\\Registry'] = $instance = new \\App\\Registry();\n+        $this->services['App\\\\Registry'] = $instance = new \\App\\Registry();\n \n-        $instance->processor = [0 => ${($_ = isset($this->services['App\\Db']) ? $this->services['App\\Db'] : $this->getDbService()) && false ?: '_'}, 1 => ${($_ = isset($this->services['App\\Bus']) ? $this->services['App\\Bus'] : $this->getBusService()) && false ?: '_'}];\n+        $instance->processor = [0 => ${($_ = isset($this->services['App\\\\Db']) ? $this->services['App\\\\Db'] : $this->getDbService()) && false ?: '_'}, 1 => ${($_ = isset($this->services['App\\\\Bus']) ? $this->services['App\\\\Bus'] : $this->getBusService()) && false ?: '_'}];\n \n         return $instance;\n     }\n@@ -179,12 +179,12 @@ protected function getRegistryService()\n      */\n     protected function getSchemaService()\n     {\n-        $a = ${($_ = isset($this->services['App\\Db']) ? $this->services['App\\Db'] : $this->getDbService()) && false ?: '_'};\n+        $a = ${($_ = isset($this->services['App\\\\Db']) ? $this->services['App\\\\Db'] : $this->getDbService()) && false ?: '_'};\n \n-        if (isset($this->services['App\\Schema'])) {\n-            return $this->services['App\\Schema'];\n+        if (isset($this->services['App\\\\Schema'])) {\n+            return $this->services['App\\\\Schema'];\n         }\n \n-        return $this->services['App\\Schema'] = new \\App\\Schema($a);\n+        return $this->services['App\\\\Schema'] = new \\App\\Schema($a);\n     }\n }"
        },
        {
          "filename": "src/Symfony/Component/DependencyInjection/Tests/Fixtures/php/services_inline_requires.php",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -87,7 +87,7 @@ public function isFrozen()\n      */\n     protected function getParentNotExistsService()\n     {\n-        return $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\ParentNotExists'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\ParentNotExists();\n+        return $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\ParentNotExists'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\ParentNotExists();\n     }\n \n     /**\n@@ -97,7 +97,7 @@ protected function getParentNotExistsService()\n      */\n     protected function getC1Service()\n     {\n-        return $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C1'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C1();\n+        return $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\includes\\\\HotPath\\\\C1'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C1();\n     }\n \n     /**\n@@ -110,7 +110,7 @@ protected function getC2Service()\n         include_once $this->targetDirs[1].'/includes/HotPath/C2.php';\n         include_once $this->targetDirs[1].'/includes/HotPath/C3.php';\n \n-        return $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C2'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C2(${($_ = isset($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C3']) ? $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C3'] : ($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C3'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C3())) && false ?: '_'});\n+        return $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\includes\\\\HotPath\\\\C2'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C2(${($_ = isset($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\includes\\\\HotPath\\\\C3']) ? $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\includes\\\\HotPath\\\\C3'] : ($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\includes\\\\HotPath\\\\C3'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C3())) && false ?: '_'});\n     }\n \n     /**\n@@ -122,7 +122,7 @@ protected function getC3Service()\n     {\n         include_once $this->targetDirs[1].'/includes/HotPath/C3.php';\n \n-        return $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C3'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C3();\n+        return $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\includes\\\\HotPath\\\\C3'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\includes\\HotPath\\C3();\n     }\n \n     public function getParameter($name)"
        },
        {
          "filename": "src/Symfony/Component/DependencyInjection/Tests/Fixtures/php/services_inline_self_ref.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -69,7 +69,7 @@ protected function getFooService()\n         $b = new \\App\\Baz($a);\n         $b->bar = $a;\n \n-        $this->services['App\\Foo'] = $instance = new \\App\\Foo($b);\n+        $this->services['App\\\\Foo'] = $instance = new \\App\\Foo($b);\n \n         $a->foo = $instance;\n "
        },
        {
          "filename": "src/Symfony/Component/DependencyInjection/Tests/Fixtures/php/services_rot13_env.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -67,7 +67,7 @@ public function isFrozen()\n      */\n     protected function getRot13EnvVarProcessorService()\n     {\n-        return $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Dumper\\Rot13EnvVarProcessor'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Dumper\\Rot13EnvVarProcessor();\n+        return $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Dumper\\\\Rot13EnvVarProcessor'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Dumper\\Rot13EnvVarProcessor();\n     }\n \n     /**\n@@ -78,7 +78,7 @@ protected function getRot13EnvVarProcessorService()\n     protected function getContainer_EnvVarProcessorsLocatorService()\n     {\n         return $this->services['container.env_var_processors_locator'] = new \\Symfony\\Component\\DependencyInjection\\ServiceLocator(['rot13' => function () {\n-            return ${($_ = isset($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Dumper\\Rot13EnvVarProcessor']) ? $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Dumper\\Rot13EnvVarProcessor'] : ($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Dumper\\Rot13EnvVarProcessor'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Dumper\\Rot13EnvVarProcessor())) && false ?: '_'};\n+            return ${($_ = isset($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Dumper\\\\Rot13EnvVarProcessor']) ? $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Dumper\\\\Rot13EnvVarProcessor'] : ($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Dumper\\\\Rot13EnvVarProcessor'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Dumper\\Rot13EnvVarProcessor())) && false ?: '_'};\n         }]);\n     }\n "
        },
        {
          "filename": "src/Symfony/Component/DependencyInjection/Tests/Fixtures/php/services_subscriber.php",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -73,7 +73,7 @@ public function isFrozen()\n      */\n     protected function getTestServiceSubscriberService()\n     {\n-        return $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber();\n+        return $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\TestServiceSubscriber'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber();\n     }\n \n     /**\n@@ -84,13 +84,13 @@ protected function getTestServiceSubscriberService()\n     protected function getFooServiceService()\n     {\n         return $this->services['foo_service'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber((new \\Symfony\\Component\\DependencyInjection\\ServiceLocator(['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\CustomDefinition' => function () {\n-            $f = function (\\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition $v = null) { return $v; }; return $f(${($_ = isset($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition']) ? $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition'] : ($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition())) && false ?: '_'});\n+            $f = function (\\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition $v = null) { return $v; }; return $f(${($_ = isset($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\CustomDefinition']) ? $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\CustomDefinition'] : ($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\CustomDefinition'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition())) && false ?: '_'});\n         }, 'Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\TestServiceSubscriber' => function () {\n-            $f = function (\\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber $v) { return $v; }; return $f(${($_ = isset($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber']) ? $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber'] : ($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber())) && false ?: '_'});\n+            $f = function (\\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber $v) { return $v; }; return $f(${($_ = isset($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\TestServiceSubscriber']) ? $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\TestServiceSubscriber'] : ($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\TestServiceSubscriber'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber())) && false ?: '_'});\n         }, 'bar' => function () {\n-            $f = function (\\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition $v) { return $v; }; return $f(${($_ = isset($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber']) ? $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber'] : ($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber())) && false ?: '_'});\n+            $f = function (\\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition $v) { return $v; }; return $f(${($_ = isset($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\TestServiceSubscriber']) ? $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\TestServiceSubscriber'] : ($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\TestServiceSubscriber'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\TestServiceSubscriber())) && false ?: '_'});\n         }, 'baz' => function () {\n-            $f = function (\\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition $v = null) { return $v; }; return $f(${($_ = isset($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition']) ? $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition'] : ($this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition())) && false ?: '_'});\n+            $f = function (\\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition $v = null) { return $v; }; return $f(${($_ = isset($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\CustomDefinition']) ? $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\CustomDefinition'] : ($this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\CustomDefinition'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition())) && false ?: '_'});\n         }]))->withContext('foo_service', $this));\n     }\n \n@@ -101,6 +101,6 @@ protected function getFooServiceService()\n      */\n     protected function getCustomDefinitionService()\n     {\n-        return $this->services['Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition();\n+        return $this->services['Symfony\\\\Component\\\\DependencyInjection\\\\Tests\\\\Fixtures\\\\CustomDefinition'] = new \\Symfony\\Component\\DependencyInjection\\Tests\\Fixtures\\CustomDefinition();\n     }\n }"
        },
        {
          "filename": "src/Symfony/Component/DependencyInjection/Tests/Fixtures/php/services_unsupported_characters.php",
          "status": "added",
          "additions": 178,
          "deletions": 0,
          "patch": "@@ -0,0 +1,178 @@\n+<?php\n+\n+use Symfony\\Component\\DependencyInjection\\Argument\\RewindableGenerator;\n+use Symfony\\Component\\DependencyInjection\\ContainerInterface;\n+use Symfony\\Component\\DependencyInjection\\Container;\n+use Symfony\\Component\\DependencyInjection\\Exception\\InvalidArgumentException;\n+use Symfony\\Component\\DependencyInjection\\Exception\\LogicException;\n+use Symfony\\Component\\DependencyInjection\\Exception\\RuntimeException;\n+use Symfony\\Component\\DependencyInjection\\ParameterBag\\FrozenParameterBag;\n+\n+/**\n+ * This class has been auto-generated\n+ * by the Symfony Dependency Injection Component.\n+ *\n+ * @final since Symfony 3.3\n+ */\n+class Symfony_DI_PhpDumper_Test_Unsupported_Characters extends Container\n+{\n+    private $parameters;\n+    private $targetDirs = [];\n+\n+    public function __construct()\n+    {\n+        $this->parameters = $this->getDefaultParameters();\n+\n+        $this->services = [];\n+        $this->methodMap = [\n+            'bar$' => 'getBarService',\n+            'bar$!' => 'getBar2Service',\n+            'foo*/oh-no' => 'getFooohnoService',\n+        ];\n+\n+        $this->aliases = [];\n+    }\n+\n+    public function getRemovedIds()\n+    {\n+        return [\n+            'Psr\\\\Container\\\\ContainerInterface' => true,\n+            'Symfony\\\\Component\\\\DependencyInjection\\\\ContainerInterface' => true,\n+        ];\n+    }\n+\n+    public function compile()\n+    {\n+        throw new LogicException('You cannot compile a dumped container that was already compiled.');\n+    }\n+\n+    public function isCompiled()\n+    {\n+        return true;\n+    }\n+\n+    public function isFrozen()\n+    {\n+        @trigger_error(sprintf('The %s() method is deprecated since Symfony 3.3 and will be removed in 4.0. Use the isCompiled() method instead.', __METHOD__), E_USER_DEPRECATED);\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Gets the public 'bar$' shared service.\n+     *\n+     * @return \\FooClass\n+     */\n+    protected function getBarService()\n+    {\n+        return $this->services['bar$'] = new \\FooClass();\n+    }\n+\n+    /**\n+     * Gets the public 'bar$!' shared service.\n+     *\n+     * @return \\FooClass\n+     */\n+    protected function getBar2Service()\n+    {\n+        return $this->services['bar$!'] = new \\FooClass();\n+    }\n+\n+    /**\n+     * Gets the public 'foo oh-no' shared service.\n+     *\n+     * @return \\FooClass\n+     */\n+    protected function getFooohnoService()\n+    {\n+        return $this->services['foo*/oh-no'] = new \\FooClass();\n+    }\n+\n+    public function getParameter($name)\n+    {\n+        $name = (string) $name;\n+        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || array_key_exists($name, $this->parameters))) {\n+            $name = $this->normalizeParameterName($name);\n+\n+            if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || array_key_exists($name, $this->parameters))) {\n+                throw new InvalidArgumentException(sprintf('The parameter \"%s\" must be defined.', $name));\n+            }\n+        }\n+        if (isset($this->loadedDynamicParameters[$name])) {\n+            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);\n+        }\n+\n+        return $this->parameters[$name];\n+    }\n+\n+    public function hasParameter($name)\n+    {\n+        $name = (string) $name;\n+        $name = $this->normalizeParameterName($name);\n+\n+        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || array_key_exists($name, $this->parameters);\n+    }\n+\n+    public function setParameter($name, $value)\n+    {\n+        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');\n+    }\n+\n+    public function getParameterBag()\n+    {\n+        if (null === $this->parameterBag) {\n+            $parameters = $this->parameters;\n+            foreach ($this->loadedDynamicParameters as $name => $loaded) {\n+                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);\n+            }\n+            $this->parameterBag = new FrozenParameterBag($parameters);\n+        }\n+\n+        return $this->parameterBag;\n+    }\n+\n+    private $loadedDynamicParameters = [];\n+    private $dynamicParameters = [];\n+\n+    /**\n+     * Computes a dynamic parameter.\n+     *\n+     * @param string $name The name of the dynamic parameter to load\n+     *\n+     * @return mixed The value of the dynamic parameter\n+     *\n+     * @throws InvalidArgumentException When the dynamic parameter does not exist\n+     */\n+    private function getDynamicParameter($name)\n+    {\n+        throw new InvalidArgumentException(sprintf('The dynamic parameter \"%s\" must be defined.', $name));\n+    }\n+\n+    private $normalizedParameterNames = [];\n+\n+    private function normalizeParameterName($name)\n+    {\n+        if (isset($this->normalizedParameterNames[$normalizedName = strtolower($name)]) || isset($this->parameters[$normalizedName]) || array_key_exists($normalizedName, $this->parameters)) {\n+            $normalizedName = isset($this->normalizedParameterNames[$normalizedName]) ? $this->normalizedParameterNames[$normalizedName] : $normalizedName;\n+            if ((string) $name !== $normalizedName) {\n+                @trigger_error(sprintf('Parameter names will be made case sensitive in Symfony 4.0. Using \"%s\" instead of \"%s\" is deprecated since Symfony 3.4.', $name, $normalizedName), E_USER_DEPRECATED);\n+            }\n+        } else {\n+            $normalizedName = $this->normalizedParameterNames[$normalizedName] = (string) $name;\n+        }\n+\n+        return $normalizedName;\n+    }\n+\n+    /**\n+     * Gets the default parameters.\n+     *\n+     * @return array An array of the default parameters\n+     */\n+    protected function getDefaultParameters()\n+    {\n+        return [\n+            '\\'' => 'oh-no',\n+        ];\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 9,
        "unique_directories": 6,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f6312d3f3313afc62c5b1e920b2cbfe62fcf3f8e",
            "date": "2025-01-13T09:20:08Z",
            "author_login": "nicolas-grekas"
          },
          {
            "sha": "7b338721ca42ba1d5544658b39359916715170f4",
            "date": "2025-01-12T22:16:37Z",
            "author_login": "derrabus"
          },
          {
            "sha": "1a76f128845de80fe6644c7de12e0dcdad8197f1",
            "date": "2025-01-12T20:19:12Z",
            "author_login": "derrabus"
          },
          {
            "sha": "0d0758e87be2e990d7744e4e66b59e6609a2b3c9",
            "date": "2025-01-12T17:25:07Z",
            "author_login": "fabpot"
          },
          {
            "sha": "946278f9f8cd1bc40c075d37b1d6c2a289c8eb4c",
            "date": "2025-01-12T12:57:08Z",
            "author_login": "alamirault"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-89",
    "description": "In Symfony before 2.7.51, 2.8.x before 2.8.50, 3.x before 3.4.26, 4.x before 4.1.12, and 4.2.x before 4.2.7, when service ids allow user input, this could allow for SQL Injection and remote code execution. This is related to symfony/dependency-injection.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-05-16T22:29:00.407",
    "last_modified": "2024-11-21T04:20:07.760",
    "fix_date": "2019-04-02T17:55:56Z"
  },
  "references": [
    {
      "url": "https://github.com/symfony/symfony/commit/d2fb5893923292a1da7985f0b56960b5bb10737b",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://symfony.com/blog/cve-2019-10910-check-service-ids-are-valid",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.synology.com/security/advisory/Synology_SA_19_19",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/symfony/symfony/commit/d2fb5893923292a1da7985f0b56960b5bb10737b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://symfony.com/blog/cve-2019-10910-check-service-ids-are-valid",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.synology.com/security/advisory/Synology_SA_19_19",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:50.478002",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "symfony",
    "owner": "symfony",
    "created_at": "2010-01-04T14:21:21Z",
    "updated_at": "2025-01-14T09:56:31Z",
    "pushed_at": "2025-01-13T13:22:56Z",
    "size": 290479,
    "stars": 29917,
    "forks": 9510,
    "open_issues": 879,
    "watchers": 29917,
    "has_security_policy": false,
    "default_branch": "7.3",
    "protected_branches": [
      "2.0",
      "2.1",
      "2.2",
      "2.3",
      "2.4",
      "2.5",
      "2.6",
      "2.7",
      "2.8",
      "3.0",
      "3.1",
      "3.2",
      "3.3",
      "3.4",
      "4.0",
      "4.1",
      "4.2",
      "4.3",
      "4.4",
      "5.0",
      "5.1",
      "5.2",
      "5.3",
      "5.4",
      "6.0",
      "6.1",
      "6.2",
      "6.3",
      "6.4",
      "7.0"
    ],
    "languages": {
      "PHP": 30007525,
      "Twig": 527335,
      "CSS": 56186,
      "JavaScript": 28225,
      "HTML": 16804,
      "Shell": 9654,
      "Makefile": 1612,
      "Hack": 26
    },
    "commit_activity": {
      "total_commits_last_year": 4163,
      "avg_commits_per_week": 80.0576923076923,
      "days_active_last_year": 343
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:44:47.171985"
  }
}