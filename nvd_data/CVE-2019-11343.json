{
  "cve_id": "CVE-2019-11343",
  "github_data": {
    "repository": "xjodoin/torpedoquery",
    "fix_commit": "3c20b874fba9cc2a78b9ace10208de1602b56c3f",
    "related_commits": [
      "3c20b874fba9cc2a78b9ace10208de1602b56c3f",
      "3c20b874fba9cc2a78b9ace10208de1602b56c3f"
    ],
    "patch_url": "https://github.com/xjodoin/torpedoquery/commit/3c20b874fba9cc2a78b9ace10208de1602b56c3f.patch",
    "fix_commit_details": {
      "sha": "3c20b874fba9cc2a78b9ace10208de1602b56c3f",
      "commit_date": "2019-10-11T18:59:20Z",
      "author": {
        "login": "xjodoin",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix issue with like",
        "length": 19,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 95,
        "additions": 36,
        "deletions": 59
      },
      "files": [
        {
          "filename": "src/main/java/org/torpedoquery/jpa/internal/conditions/ConditionBuilder.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -253,9 +253,9 @@ public OnGoingLogicalCondition notLike(String notLikeValue) {\n \n \tprivate LikeCondition createLike(Type type, String toMatch) {\n \t\tif (notLike) {\n-\t\t\treturn new NotLikeCondition(type, selector, toMatch);\n+\t\t\treturn new NotLikeCondition(selector, selector.generateParameter(type.wrap(toMatch)));\n \t\t} else {\n-\t\t\treturn new LikeCondition(type, selector, toMatch);\n+\t\t\treturn new LikeCondition(selector, selector.generateParameter(type.wrap(toMatch)));\n \t\t}\n \t}\n "
        },
        {
          "filename": "src/main/java/org/torpedoquery/jpa/internal/conditions/LikeCondition.java",
          "status": "modified",
          "additions": 9,
          "deletions": 41,
          "patch": "@@ -19,15 +19,10 @@\n  */\n package org.torpedoquery.jpa.internal.conditions;\n \n-import java.util.Collections;\n-import java.util.List;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import org.torpedoquery.jpa.internal.Condition;\n import org.torpedoquery.jpa.internal.Parameter;\n import org.torpedoquery.jpa.internal.Selector;\n \n-public class LikeCondition implements Condition {\n+public class LikeCondition<T> extends SingleParameterCondition<T> {\n \n \tpublic static enum Type {\n \t\tANY {\n@@ -58,51 +53,24 @@ public String wrap(String toMatch) {\n \t\tpublic abstract String wrap(String toMatch);\n \t}\n \n-\tprivate final String toMatch;\n-\tprivate final Type type;\n-\tprivate final Selector selector;\n-\n \t/**\n \t * <p>\n \t * Constructor for LikeCondition.\n \t * </p>\n \t *\n-\t * @param type\n-\t *            a\n-\t *            {@link org.torpedoquery.jpa.internal.conditions.LikeCondition.Type}\n-\t *            object.\n-\t * @param selector\n-\t *            a {@link org.torpedoquery.jpa.internal.Selector} object.\n-\t * @param toMatch\n-\t *            a {@link java.lang.String} object.\n+\t * @param type     a\n+\t *                 {@link org.torpedoquery.jpa.internal.conditions.LikeCondition.Type}\n+\t *                 object.\n+\t * @param selector a {@link org.torpedoquery.jpa.internal.Selector} object.\n+\t * @param toMatch  a {@link java.lang.String} object.\n \t */\n-\tpublic LikeCondition(Type type, Selector selector, String toMatch) {\n-\t\tthis.type = type;\n-\t\tthis.selector = selector;\n-\t\tthis.toMatch = toMatch;\n+\tpublic LikeCondition(Selector selector, Parameter<T> parameter) {\n+\t\tsuper(selector, parameter);\n \t}\n \n-\t/** {@inheritDoc} */\n \t@Override\n-\tpublic String createQueryFragment(AtomicInteger incrementor) {\n-\t\treturn selector.createQueryFragment(incrementor) + \" \" + getLike() + \" '\" + type.wrap(toMatch) + \"' \";\n-\t}\n-\n-\t/**\n-\t * <p>\n-\t * getLike.\n-\t * </p>\n-\t *\n-\t * @return a {@link java.lang.String} object.\n-\t */\n-\tprotected String getLike() {\n+\tprotected String getComparator() {\n \t\treturn \"like\";\n \t}\n \n-\t/** {@inheritDoc} */\n-\t@Override\n-\tpublic List<Parameter> getParameters() {\n-\t\treturn Collections.emptyList();\n-\t}\n-\n }"
        },
        {
          "filename": "src/main/java/org/torpedoquery/jpa/internal/conditions/NotLikeCondition.java",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -19,8 +19,9 @@\n  */\n package org.torpedoquery.jpa.internal.conditions;\n \n+import org.torpedoquery.jpa.internal.Parameter;\n import org.torpedoquery.jpa.internal.Selector;\n-public class NotLikeCondition extends LikeCondition {\n+public class NotLikeCondition<T> extends LikeCondition<T> {\n \n \t/**\n \t * <p>Constructor for NotLikeCondition.</p>\n@@ -29,14 +30,13 @@ public class NotLikeCondition extends LikeCondition {\n \t * @param selector a {@link org.torpedoquery.jpa.internal.Selector} object.\n \t * @param toMatch a {@link java.lang.String} object.\n \t */\n-\tpublic NotLikeCondition(Type type, Selector selector, String toMatch) {\n-\t\tsuper(type, selector, toMatch);\n+\tpublic NotLikeCondition(Selector selector, Parameter<T> parameter) {\n+\t\tsuper(selector,parameter);\n \t}\n \n-\t/** {@inheritDoc} */\n \t@Override\n-\tprotected String getLike() {\n-\t\treturn \"not \" + super.getLike();\n+\tprotected String getComparator() {\n+\t\treturn \"not \" + super.getComparator();\n \t}\n \n }"
        },
        {
          "filename": "src/test/java/org/torpedoquery/jpa/StringFunctionsTest.java",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -96,23 +96,26 @@ public void testWhereWithStringFunction() {\n \t\tEntity from = from(Entity.class);\n \t\twhere(lower(from.getCode())).like().any(\"test\");\n \t\tQuery<Entity> select = select(from);\n-\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) like '%test%'\", select.getQuery());\n+\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) like :function_1\", select.getQuery());\n+\t\tassertEquals(\"%test%\", select.getParameters().get(\"function_1\"));\n \t}\n \t\n \t@Test\n \tpublic void testWhereWithLikeFunction() {\n \t\tEntity from = from(Entity.class);\n \t\twhere(lower(from.getCode())).like(\"%test%\");\n \t\tQuery<Entity> select = select(from);\n-\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) like '%test%'\", select.getQuery());\n+\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) like :function_1\", select.getQuery());\n+\t\tassertEquals(\"%test%\", select.getParameters().get(\"function_1\"));\n \t}\n \t\n \t@Test\n \tpublic void testWhereWithNotLikeFunction() {\n \t\tEntity from = from(Entity.class);\n \t\twhere(lower(from.getCode())).notLike(\"%test%\");\n \t\tQuery<Entity> select = select(from);\n-\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) not like '%test%'\", select.getQuery());\n+\t\tassertEquals(\"select entity_0 from Entity entity_0 where lower(entity_0.code) not like :function_1\", select.getQuery());\n+\t\tassertEquals(\"%test%\", select.getParameters().get(\"function_1\"));\n \t}\n \t\n \t/**"
        },
        {
          "filename": "src/test/java/org/torpedoquery/jpa/ValueOnGoingConditionTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -119,7 +119,7 @@ public void testLowerFunctionInCondition() {\n \t\twhere(condition);\n \t\tQuery<Entity> select = select(entity);\n \t\tassertEquals(\n-\t\t\t\t\"select entity_0 from Entity entity_0 where ( lower(entity_0.code) like '%test%'  )\",\n+\t\t\t\t\"select entity_0 from Entity entity_0 where ( lower(entity_0.code) like :function_1 )\",\n \t\t\t\tselect.getQuery());\n \t}\n "
        },
        {
          "filename": "src/test/java/org/torpedoquery/jpa/WhereClauseTest.java",
          "status": "modified",
          "additions": 12,
          "deletions": 6,
          "patch": "@@ -343,7 +343,8 @@ public void test_like_any() {\n \t\twhere(from.getCode()).like().any(\"test\");\n \t\tQuery<Entity> select = select(from);\n \n-\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like '%test%'\", select.getQuery());\n+\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like :code_1\", select.getQuery());\n+\t\tassertEquals(\"%test%\", select.getParameters().get(\"code_1\"));\n \t}\n \t\n \t/**\n@@ -355,7 +356,8 @@ public void test_notLike_any() {\n \t\twhere(from.getCode()).notLike().any(\"test\");\n \t\tQuery<Entity> select = select(from);\n \n-\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like '%test%'\", select.getQuery());\n+\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like :code_1\", select.getQuery());\n+\t\tassertEquals(\"%test%\", select.getParameters().get(\"code_1\"));\n \t}\n \n \t/**\n@@ -367,7 +369,8 @@ public void test_like_startsWith() {\n \t\twhere(from.getCode()).like().startsWith(\"test\");\n \t\tQuery<Entity> select = select(from);\n \n-\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like 'test%'\", select.getQuery());\n+\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like :code_1\", select.getQuery());\n+\t\tassertEquals(\"test%\", select.getParameters().get(\"code_1\"));\n \t}\n \t\n \t@Test\n@@ -376,7 +379,8 @@ public void test_notLike_startsWith() {\n \t\twhere(from.getCode()).notLike().startsWith(\"test\");\n \t\tQuery<Entity> select = select(from);\n \n-\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like 'test%'\", select.getQuery());\n+\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like :code_1\", select.getQuery());\n+\t\tassertEquals(\"test%\", select.getParameters().get(\"code_1\"));\n \t}\n \n \t/**\n@@ -388,7 +392,8 @@ public void test_like_endsWith() {\n \t\twhere(from.getCode()).like().endsWith(\"test\");\n \t\tQuery<Entity> select = select(from);\n \n-\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like '%test'\", select.getQuery());\n+\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code like :code_1\", select.getQuery());\n+\t\tassertEquals(\"%test\", select.getParameters().get(\"code_1\"));\n \t}\n \t\n \t/**\n@@ -400,7 +405,8 @@ public void test_notLike_endsWith() {\n \t\twhere(from.getCode()).notLike().endsWith(\"test\");\n \t\tQuery<Entity> select = select(from);\n \n-\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like '%test'\", select.getQuery());\n+\t\tassertEquals(\"select entity_0 from Entity entity_0 where entity_0.code not like :code_1\", select.getQuery());\n+\t\tassertEquals(\"%test\", select.getParameters().get(\"code_1\"));\n \t}\n \n \t/**"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 2,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8074da8c6e3205c45d82e6542832caf89973cc5f",
            "date": "2023-11-24T18:30:31Z",
            "author_login": "xjodoin"
          },
          {
            "sha": "5f9bf38de1a437fd50ba403666e536eb4e846f40",
            "date": "2023-08-22T18:26:58Z",
            "author_login": "xjodoin"
          },
          {
            "sha": "084ebf1e390174de5f877870e02f5e58023d3183",
            "date": "2021-08-23T13:55:48Z",
            "author_login": "xjodoin"
          },
          {
            "sha": "7ae9c9e7f60e250397f4bd5915e96bc1da216e72",
            "date": "2021-08-18T13:41:10Z",
            "author_login": "chenzhang22"
          },
          {
            "sha": "da8b5ad47115375a40d9a9b059cbfee615eb41ca",
            "date": "2020-10-13T12:35:26Z",
            "author_login": "xjodoin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": null,
    "description": "Torpedo Query before 2.5.3 mishandles the LIKE operator in ConditionBuilder.java, LikeCondition.java, and NotLikeCondition.java.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-03-12T21:15:12.703",
    "last_modified": "2024-11-21T04:20:55.143",
    "fix_date": "2019-10-11T18:59:20Z"
  },
  "references": [
    {
      "url": "https://github.com/xjodoin/torpedoquery/commit/3c20b874fba9cc2a78b9ace10208de1602b56c3f",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xjodoin/torpedoquery/compare/v2.5.2...v2.5.3",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xjodoin/torpedoquery/commit/3c20b874fba9cc2a78b9ace10208de1602b56c3f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xjodoin/torpedoquery/compare/v2.5.2...v2.5.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Release Notes",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:42.263556",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "torpedoquery",
    "owner": "xjodoin",
    "created_at": "2011-09-23T01:09:41Z",
    "updated_at": "2024-12-24T03:25:11Z",
    "pushed_at": "2023-11-24T18:31:01Z",
    "size": 1826,
    "stars": 82,
    "forks": 19,
    "open_issues": 7,
    "watchers": 82,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 1131328
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T20:58:27.328458"
  }
}