{
  "cve_id": "CVE-2019-12313",
  "github_data": {
    "repository": "dollarshaveclub/shave",
    "fix_commit": "da7371b0531ba14eae48ef1bb1456a3de4cfa954",
    "related_commits": [
      "da7371b0531ba14eae48ef1bb1456a3de4cfa954",
      "da7371b0531ba14eae48ef1bb1456a3de4cfa954"
    ],
    "patch_url": "https://github.com/dollarshaveclub/shave/commit/da7371b0531ba14eae48ef1bb1456a3de4cfa954.patch",
    "fix_commit_details": {
      "sha": "da7371b0531ba14eae48ef1bb1456a3de4cfa954",
      "commit_date": "2019-04-17T05:49:10Z",
      "author": {
        "login": "yowainwright",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[version] patch; @digitalcraft createTextNode() \ud83d\ude80 (#146)",
        "length": 56,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 25,
        "additions": 17,
        "deletions": 8
      },
      "files": [
        {
          "filename": "dist/jquery.shave.min.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1 +1 @@\n-!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?t():\"function\"==typeof define&&define.amd?define(t):t()}(0,function(){\"use strict\";if(\"undefined\"!=typeof window){var e=window.$||window.jQuery||window.Zepto;e&&(e.fn.shave=function(e,t){return function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};if(!t)throw Error(\"maxHeight is required\");var i=\"string\"==typeof e?document.querySelectorAll(e):e;if(i){var o=n.character||\"\u2026\",a=n.classname||\"js-shave\",s=\"boolean\"!=typeof n.spaces||n.spaces,r='<span class=\"js-shave-char\">'.concat(o,\"</span>\");\"length\"in i||(i=[i]);for(var c=0;c<i.length;c+=1){var f=i[c],h=f.style,l=f.querySelector(\".\".concat(a)),d=void 0===f.textContent?\"innerText\":\"textContent\";l&&(f.removeChild(f.querySelector(\".js-shave-char\")),f[d]=f[d]);var v=f[d],g=s?v.split(\" \"):v;if(!(g.length<2)){var u=h.height;h.height=\"auto\";var p=h.maxHeight;if(h.maxHeight=\"none\",f.offsetHeight<=t)h.height=u,h.maxHeight=p;else{for(var y=g.length-1,j=0,m=void 0;j<y;)m=j+y+1>>1,f[d]=s?g.slice(0,m).join(\" \"):g.slice(0,m),f.insertAdjacentHTML(\"beforeend\",r),f.offsetHeight>t?y=s?m-1:m-2:j=m;f[d]=s?g.slice(0,y).join(\" \"):g.slice(0,y),f.insertAdjacentHTML(\"beforeend\",r);var H=s?\" \".concat(g.slice(y).join(\" \")):g.slice(y);f.insertAdjacentHTML(\"beforeend\",'<span class=\"'.concat(a,'\" style=\"display:none;\">').concat(H,\"</span>\")),h.height=u,h.maxHeight=p}}}}}(this,e,t),this})}});\n+!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?t():\"function\"==typeof define&&define.amd?define(t):t()}(0,function(){\"use strict\";if(\"undefined\"!=typeof window){var e=window.$||window.jQuery||window.Zepto;e&&(e.fn.shave=function(e,t){return function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};if(!t)throw Error(\"maxHeight is required\");var i=\"string\"==typeof e?document.querySelectorAll(e):e;if(i){var o=n.character||\"\u2026\",a=n.classname||\"js-shave\",r=\"boolean\"!=typeof n.spaces||n.spaces,s='<span class=\"js-shave-char\">'.concat(o,\"</span>\");\"length\"in i||(i=[i]);for(var c=0;c<i.length;c+=1){var d=i[c],h=d.style,f=d.querySelector(\".\".concat(a)),l=void 0===d.textContent?\"innerText\":\"textContent\";f&&(d.removeChild(d.querySelector(\".js-shave-char\")),d[l]=d[l]);var u=d[l],v=r?u.split(\" \"):u;if(!(v.length<2)){var g=h.height;h.height=\"auto\";var p=h.maxHeight;if(h.maxHeight=\"none\",d.offsetHeight<=t)h.height=g,h.maxHeight=p;else{for(var m=v.length-1,y=0,j=void 0;y<m;)j=y+m+1>>1,d[l]=r?v.slice(0,j).join(\" \"):v.slice(0,j),d.insertAdjacentHTML(\"beforeend\",s),d.offsetHeight>t?m=r?j-1:j-2:y=j;d[l]=r?v.slice(0,m).join(\" \"):v.slice(0,m),d.insertAdjacentHTML(\"beforeend\",s);var x=r?\" \".concat(v.slice(m).join(\" \")):v.slice(m),w=document.createTextNode(x),H=document.createElement(\"span\");H.classList.add(a),H.style.display=\"none\",H.appendChild(w),d.insertAdjacentElement(\"beforeend\",H),h.height=g,h.maxHeight=p}}}}}(this,e,t),this})}});"
        },
        {
          "filename": "dist/shave.es.js",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -1,6 +1,6 @@\n /**\n   shave - Shave is a javascript plugin that truncates multi-line text within a html element based on set max height\n-  @version v2.5.2\n+  @version v2.5.3\n   @link https://github.com/dollarshaveclub/shave#readme\n   @author Jeff Wainwright <yowainwright@gmail.com> (jeffry.in)\n   @license MIT\n@@ -61,7 +61,12 @@ function shave(target, maxHeight) {\n     el[textProp] = spaces ? words.slice(0, max).join(' ') : words.slice(0, max);\n     el.insertAdjacentHTML('beforeend', charHtml);\n     var diff = spaces ? \" \".concat(words.slice(max).join(' ')) : words.slice(max);\n-    el.insertAdjacentHTML('beforeend', \"<span class=\\\"\".concat(classname, \"\\\" style=\\\"display:none;\\\">\").concat(diff, \"</span>\"));\n+    var shavedText = document.createTextNode(diff);\n+    var elWithShavedText = document.createElement('span');\n+    elWithShavedText.classList.add(classname);\n+    elWithShavedText.style.display = 'none';\n+    elWithShavedText.appendChild(shavedText);\n+    el.insertAdjacentElement('beforeend', elWithShavedText);\n     styles.height = heightStyle;\n     styles.maxHeight = maxHeightStyle;\n   }"
        },
        {
          "filename": "dist/shave.js",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -1,6 +1,6 @@\n /**\n   shave - Shave is a javascript plugin that truncates multi-line text within a html element based on set max height\n-  @version v2.5.2\n+  @version v2.5.3\n   @link https://github.com/dollarshaveclub/shave#readme\n   @author Jeff Wainwright <yowainwright@gmail.com> (jeffry.in)\n   @license MIT\n@@ -67,7 +67,12 @@\n       el[textProp] = spaces ? words.slice(0, max).join(' ') : words.slice(0, max);\n       el.insertAdjacentHTML('beforeend', charHtml);\n       var diff = spaces ? \" \".concat(words.slice(max).join(' ')) : words.slice(max);\n-      el.insertAdjacentHTML('beforeend', \"<span class=\\\"\".concat(classname, \"\\\" style=\\\"display:none;\\\">\").concat(diff, \"</span>\"));\n+      var shavedText = document.createTextNode(diff);\n+      var elWithShavedText = document.createElement('span');\n+      elWithShavedText.classList.add(classname);\n+      elWithShavedText.style.display = 'none';\n+      elWithShavedText.appendChild(shavedText);\n+      el.insertAdjacentElement('beforeend', elWithShavedText);\n       styles.height = heightStyle;\n       styles.maxHeight = maxHeightStyle;\n     }"
        },
        {
          "filename": "dist/shave.min.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1 +1 @@\n-!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.shave=t()}(this,function(){\"use strict\";return function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};if(!t)throw Error(\"maxHeight is required\");var i=\"string\"==typeof e?document.querySelectorAll(e):e;if(i){var o=n.character||\"\u2026\",a=n.classname||\"js-shave\",s=\"boolean\"!=typeof n.spaces||n.spaces,r='<span class=\"js-shave-char\">'.concat(o,\"</span>\");\"length\"in i||(i=[i]);for(var c=0;c<i.length;c+=1){var h=i[c],l=h.style,f=h.querySelector(\".\".concat(a)),d=void 0===h.textContent?\"innerText\":\"textContent\";f&&(h.removeChild(h.querySelector(\".js-shave-char\")),h[d]=h[d]);var v=h[d],g=s?v.split(\" \"):v;if(!(g.length<2)){var p=l.height;l.height=\"auto\";var u=l.maxHeight;if(l.maxHeight=\"none\",h.offsetHeight<=t)l.height=p,l.maxHeight=u;else{for(var m=g.length-1,y=0,j=void 0;y<m;)j=y+m+1>>1,h[d]=s?g.slice(0,j).join(\" \"):g.slice(0,j),h.insertAdjacentHTML(\"beforeend\",r),h.offsetHeight>t?m=s?j-1:j-2:y=j;h[d]=s?g.slice(0,m).join(\" \"):g.slice(0,m),h.insertAdjacentHTML(\"beforeend\",r);var x=s?\" \".concat(g.slice(m).join(\" \")):g.slice(m);h.insertAdjacentHTML(\"beforeend\",'<span class=\"'.concat(a,'\" style=\"display:none;\">').concat(x,\"</span>\")),l.height=p,l.maxHeight=u}}}}}});\n+!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.shave=t()}(this,function(){\"use strict\";return function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:{};if(!t)throw Error(\"maxHeight is required\");var i=\"string\"==typeof e?document.querySelectorAll(e):e;if(i){var o=n.character||\"\u2026\",a=n.classname||\"js-shave\",r=\"boolean\"!=typeof n.spaces||n.spaces,s='<span class=\"js-shave-char\">'.concat(o,\"</span>\");\"length\"in i||(i=[i]);for(var c=0;c<i.length;c+=1){var h=i[c],l=h.style,d=h.querySelector(\".\".concat(a)),f=void 0===h.textContent?\"innerText\":\"textContent\";d&&(h.removeChild(h.querySelector(\".js-shave-char\")),h[f]=h[f]);var v=h[f],g=r?v.split(\" \"):v;if(!(g.length<2)){var u=l.height;l.height=\"auto\";var p=l.maxHeight;if(l.maxHeight=\"none\",h.offsetHeight<=t)l.height=u,l.maxHeight=p;else{for(var m=g.length-1,x=0,y=void 0;x<m;)y=x+m+1>>1,h[f]=r?g.slice(0,y).join(\" \"):g.slice(0,y),h.insertAdjacentHTML(\"beforeend\",s),h.offsetHeight>t?m=r?y-1:y-2:x=y;h[f]=r?g.slice(0,m).join(\" \"):g.slice(0,m),h.insertAdjacentHTML(\"beforeend\",s);var j=r?\" \".concat(g.slice(m).join(\" \")):g.slice(m),H=document.createTextNode(j),b=document.createElement(\"span\");b.classList.add(a),b.style.display=\"none\",b.appendChild(H),h.insertAdjacentElement(\"beforeend\",b),l.height=u,l.maxHeight=p}}}}}});"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"shave\",\n-  \"version\": \"2.5.2\",\n+  \"version\": \"2.5.3\",\n   \"description\": \"Shave is a javascript plugin that truncates multi-line text within a html element based on set max height\",\n   \"main\": \"dist/shave.js\",\n   \"module\": \"dist/shave.es.js\","
        },
        {
          "filename": "src/shave.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -57,7 +57,6 @@ export default function shave (target, maxHeight, opts = {}) {\n     el.insertAdjacentHTML('beforeend', charHtml)\n     const diff = spaces ? ` ${words.slice(max).join(' ')}` : words.slice(max)\n \n-    // https://stackoverflow.com/questions/476821/is-a-dom-text-node-guaranteed-to-not-be-interpreted-as-html\n     const shavedText = document.createTextNode(diff)\n     const elWithShavedText = document.createElement('span')\n     elWithShavedText.classList.add(classname)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f3e7723a71f0a4a6b0791ae18a474ffa82ed37df",
            "date": "2020-03-26T18:38:39Z",
            "author_login": "jakiestfu"
          },
          {
            "sha": "f19ccc78bf3e634c0e206445af29595403defa5c",
            "date": "2020-01-09T07:04:17Z",
            "author_login": "greenkeeper[bot]"
          },
          {
            "sha": "04abc93eafe44b0cdb5a925a0a93a81eaafa1cb7",
            "date": "2020-01-03T00:42:03Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "bc66e5386452d238f07d248019db7c299e5b5f2c",
            "date": "2019-12-26T14:38:40Z",
            "author_login": "greenkeeper[bot]"
          },
          {
            "sha": "19f20fc6f001423c9d04675ccb8a1457cc8f0a15",
            "date": "2019-12-05T20:10:15Z",
            "author_login": "yowainwright"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-79",
    "description": "XSS exists in Shave before 2.5.3 because output encoding is mishandled during the overwrite of an HTML element.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2019-05-24T14:29:00.327",
    "last_modified": "2024-11-21T04:22:36.527",
    "fix_date": "2019-04-17T05:49:10Z"
  },
  "references": [
    {
      "url": "https://github.com/dollarshaveclub/shave/commit/da7371b0531ba14eae48ef1bb1456a3de4cfa954#diff-074799b511e4b61923dfd3f2a3bf9b54R67",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dollarshaveclub/shave/compare/852b537...da7371b",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/advisories/822",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dollarshaveclub/shave/commit/da7371b0531ba14eae48ef1bb1456a3de4cfa954#diff-074799b511e4b61923dfd3f2a3bf9b54R67",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dollarshaveclub/shave/compare/852b537...da7371b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/advisories/822",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:50.487073",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "shave",
    "owner": "dollarshaveclub",
    "created_at": "2016-10-19T21:54:46Z",
    "updated_at": "2024-10-24T11:52:04Z",
    "pushed_at": "2020-10-27T20:20:25Z",
    "size": 31623,
    "stars": 2108,
    "forks": 122,
    "open_issues": 2,
    "watchers": 2108,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 4657,
      "HTML": 831
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T18:22:52.132764"
  }
}