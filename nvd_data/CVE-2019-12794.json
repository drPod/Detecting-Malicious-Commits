{
  "cve_id": "CVE-2019-12794",
  "github_data": {
    "repository": "MISP/MISP",
    "fix_commit": "36b43f1306873cff87b7aa30cdc1a30b38c9c16a",
    "related_commits": [
      "36b43f1306873cff87b7aa30cdc1a30b38c9c16a",
      "36b43f1306873cff87b7aa30cdc1a30b38c9c16a"
    ],
    "patch_url": "https://github.com/MISP/MISP/commit/36b43f1306873cff87b7aa30cdc1a30b38c9c16a.patch",
    "fix_commit_details": {
      "sha": "36b43f1306873cff87b7aa30cdc1a30b38c9c16a",
      "commit_date": "2019-06-11T09:05:34Z",
      "author": {
        "login": "iglocska",
        "type": "User",
        "stats": {
          "total_commits": 9407,
          "average_weekly_commits": 13.692867540029113,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 546
        }
      },
      "commit_message": {
        "title": "fix: [security] Org admins could reset credentials for site admins",
        "length": 648,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 70,
        "additions": 60,
        "deletions": 10
      },
      "files": [
        {
          "filename": "app/Controller/LogsController.php",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -343,7 +343,11 @@ public function admin_search($new = false)\n                     'conditions' => $conditions,\n                     'order' => array('Log.id' => 'DESC')\n                 );\n-                $this->set('list', $this->paginate());\n+                $list = $this->paginate();\n+                if (empty($this->Auth->user('Role')['perm_site_admin'])) {\n+                    $list = $this->Log->filterSiteAdminSensitiveLogs($list);\n+                }\n+                $this->set('list', $list);\n \n                 // and store into session\n                 $this->Session->write('paginate_conditions_log', $this->paginate);\n@@ -394,7 +398,11 @@ public function admin_search($new = false)\n                 }\n                 $conditions = $this->__buildSearchConditions($filters);\n                 $this->paginate['conditions'] = $conditions;\n-                $this->set('list', $this->paginate());\n+                $list = $this->paginate();\n+                if (empty($this->Auth->user('Role')['perm_site_admin'])) {\n+                    $list = $this->Log->filterSiteAdminSensitiveLogs($list);\n+                }\n+                $this->set('list', $list);\n \n                 // set the same view as the index page\n                 $this->render('admin_index');"
        },
        {
          "filename": "app/Controller/UsersController.php",
          "status": "modified",
          "additions": 23,
          "deletions": 8,
          "patch": "@@ -19,7 +19,7 @@ class UsersController extends AppController\n             ),\n             'contain' => array(\n                 'Organisation' => array('id', 'name'),\n-                'Role' => array('id', 'name', 'perm_auth')\n+                'Role' => array('id', 'name', 'perm_auth', 'perm_site_admin')\n             )\n     );\n \n@@ -350,11 +350,16 @@ public function admin_index()\n                     ),\n                     'contain' => array(\n                             'Organisation' => array('id', 'name'),\n-                            'Role' => array('id', 'name', 'perm_auth')\n+                            'Role' => array('id', 'name', 'perm_auth', 'perm_site_admin')\n                     )\n             ));\n             foreach ($users as $key => $value) {\n-                unset($users['User']['password']);\n+                if (empty($this->Auth->user('Role')['perm_site_admin'])) {\n+                    if ($value['Role']['perm_site_admin']) {\n+                        $users[$key]['User']['authkey'] = __('Redacted');\n+                    }\n+                }\n+                unset($users[$key]['User']['password']);\n             }\n             return $this->RestResponse->viewData($users, $this->response->type());\n         } else {\n@@ -366,7 +371,13 @@ public function admin_index()\n             } else {\n                 $conditions['User.org_id'] = $this->Auth->user('org_id');\n                 $this->paginate['conditions']['AND'][] = $conditions;\n-                $this->set('users', $this->paginate());\n+                $users = $this->paginate();\n+                foreach ($users as $key => $value) {\n+                    if ($value['Role']['perm_site_admin']) {\n+                        $users[$key]['User']['authkey'] = __('Redacted');\n+                    }\n+                }\n+                $this->set('users', $users);\n             }\n             if ($this->request->is('ajax')) {\n                 $this->autoRender = false;\n@@ -462,6 +473,9 @@ public function admin_view($id = null)\n             $user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n         }\n         $user['User']['orgAdmins'] = $this->User->getOrgAdminsForOrg($user['User']['org_id'], $user['User']['id']);\n+        if (empty($this->Auth->user('Role')['perm_site_admin']) && !(empty($user['Role']['perm_site_admin']))) {\n+            $user['User']['authkey'] = __('Redacted');\n+        }\n         $this->set('user', $user);\n         if (!$this->_isSiteAdmin() && !($this->_isAdmin() && $this->Auth->user('org_id') == $user['User']['org_id'])) {\n             throw new MethodNotAllowedException();\n@@ -694,9 +708,10 @@ public function admin_edit($id = null)\n         $params = array();\n         $allowedRole = '';\n         $userToEdit = $this->User->find('first', array(\n-                'conditions' => array('id' => $id),\n+                'conditions' => array('User.id' => $id),\n                 'recursive' => -1,\n-                'fields' => array('id', 'role_id', 'email', 'org_id'),\n+                'fields' => array('User.id', 'User.role_id', 'User.email', 'User.org_id', 'Role.perm_site_admin'),\n+                'contain' => array('Role')\n         ));\n         if (!$this->_isSiteAdmin()) {\n             // Org admins should be able to select the role that is already assigned to an org user when editing them.\n@@ -706,8 +721,8 @@ public function admin_edit($id = null)\n             // MISP automatically chooses the first available option for the user as the selected setting (usually user)\n             // Org admin is downgraded to a user\n             // Now we make an exception for the already assigned role, both in the form and the actual edit.\n-            if ($userToEdit['User']['org_id'] != $this->Auth->user('org_id')) {\n-                throw new Exception('Invalid user');\n+            if ($userToEdit['User']['org_id'] != $this->Auth->user('org_id') || !empty($userToEdit['Role']['perm_site_admin'])) {\n+                throw new NotFoundException(__('Invalid user'));\n             }\n             $allowedRole = $userToEdit['User']['role_id'];\n             $params = array('conditions' => array("
        },
        {
          "filename": "app/Model/Log.php",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -295,4 +295,31 @@ public function logData($data)\n         }\n         return true;\n     }\n+\n+    public function filterSiteAdminSensitiveLogs($list)\n+    {\n+        $this->User = ClassRegistry::init('User');\n+        $site_admin_roles = $this->User->Role->find('list', array(\n+            'recursive' => -1,\n+            'conditions' => array('Role.perm_site_admin' => 1),\n+            'fields' => array('Role.id', 'Role.id')\n+        ));\n+        $site_admins = $this->User->find('list', array(\n+            'recursive' => -1,\n+            'conditions' => array(\n+                'User.role_id' => array_values($site_admin_roles)\n+            ),\n+            'fields' => array('User.id', 'User.id')\n+        ));\n+        foreach ($list as $k => $v) {\n+            if (\n+                $v['Log']['model'] === 'User' &&\n+                in_array($v['Log']['model_id'], array_values($site_admins)) &&\n+                in_array($v['Log']['action'], array('add', 'edit', 'reset_auth_key'))\n+            ) {\n+                $list[$k]['Log']['change'] = __('Redacted');\n+            }\n+        }\n+        return $list;\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1da14f0253b2d853603bfb10e0c2b92aa27ecb6a",
            "date": "2025-01-13T07:57:22Z",
            "author_login": "iglocska"
          },
          {
            "sha": "439433b405ca829f33bf886e788be84c0870b6dc",
            "date": "2025-01-10T16:37:30Z",
            "author_login": "rubentroncon"
          },
          {
            "sha": "cd6d87caa2db4b6bbe65d7cdc2bd8d84bc7f0705",
            "date": "2025-01-10T13:37:21Z",
            "author_login": "chrisr3d"
          },
          {
            "sha": "9fd8c3f8d8ba83c31614b8f0614e50be4284147f",
            "date": "2025-01-10T09:35:18Z",
            "author_login": "chrisr3d"
          },
          {
            "sha": "7c23b9d94726723a38cfd48e5f6b2555f75c05fb",
            "date": "2025-01-10T09:43:37Z",
            "author_login": "chrisr3d"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-269",
    "description": "An issue was discovered in MISP 2.4.108. Organization admins could reset credentials for site admins (organization admins have the inherent ability to reset passwords for all of their organization's users). This, however, could be abused in a situation where the host organization of an instance creates organization admins. An organization admin could set a password manually for the site admin or simply use the API key of the site admin to impersonate them. The potential for abuse only occurs when the host organization creates lower-privilege organization admins instead of the usual site admins. Also, only organization admins of the same organization as the site admin could abuse this.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2019-06-11T17:29:00.550",
    "last_modified": "2024-11-21T04:23:35.680",
    "fix_date": "2019-06-11T09:05:34Z"
  },
  "references": [
    {
      "url": "https://github.com/MISP/MISP/commit/36b43f1306873cff87b7aa30cdc1a30b38c9c16a",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/MISP/MISP/commit/36b43f1306873cff87b7aa30cdc1a30b38c9c16a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:52.560124",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "MISP",
    "owner": "MISP",
    "created_at": "2013-02-07T17:10:34Z",
    "updated_at": "2025-01-14T10:15:41Z",
    "pushed_at": "2025-01-13T08:23:44Z",
    "size": 158555,
    "stars": 5471,
    "forks": 1421,
    "open_issues": 2637,
    "watchers": 5471,
    "has_security_policy": false,
    "default_branch": "2.5",
    "protected_branches": [
      "2.4",
      "3.x"
    ],
    "languages": {
      "PHP": 9033432,
      "JavaScript": 1901843,
      "Python": 401628,
      "CSS": 156405,
      "Shell": 105142,
      "Perl": 6169,
      "Makefile": 759
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 231
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T12:59:29.252533"
  }
}