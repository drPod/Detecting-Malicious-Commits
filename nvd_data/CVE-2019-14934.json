{
  "cve_id": "CVE-2019-14934",
  "github_data": {
    "repository": "enferex/pdfresurrect",
    "fix_commit": "0c4120fffa3dffe97b95c486a120eded82afe8a6",
    "related_commits": [
      "0c4120fffa3dffe97b95c486a120eded82afe8a6",
      "0c4120fffa3dffe97b95c486a120eded82afe8a6"
    ],
    "patch_url": "https://github.com/enferex/pdfresurrect/commit/0c4120fffa3dffe97b95c486a120eded82afe8a6.patch",
    "fix_commit_details": {
      "sha": "0c4120fffa3dffe97b95c486a120eded82afe8a6",
      "commit_date": "2019-08-10T14:47:09Z",
      "author": {
        "login": "enferex",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Zero and sanity check all dynamic allocs.",
        "length": 136,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 56,
        "additions": 34,
        "deletions": 22
      },
      "files": [
        {
          "filename": "main.c",
          "status": "modified",
          "additions": 19,
          "deletions": 2,
          "patch": "@@ -72,7 +72,7 @@ static void write_version(\n     /* Create file */\n     if ((c = strstr(fname, \".pdf\")))\n       *c = '\\0';\n-    new_fname = malloc(strlen(fname) + strlen(dirname) + 16);\n+    new_fname = safe_calloc(strlen(fname) + strlen(dirname) + 16);\n     snprintf(new_fname, strlen(fname) + strlen(dirname) + 16,\n              \"%s/%s-version-%d.pdf\", dirname, fname, xref->version);\n \n@@ -213,6 +213,23 @@ static pdf_t *init_pdf(FILE *fp, const char *name)\n }\n \n \n+void *safe_calloc(size_t size) {\n+  void *addr;\n+\n+  if (!size)\n+  {\n+    ERR(\"Invalid allocation size.\\n\");\n+    exit(EXIT_FAILURE);\n+  }\n+  if (!(addr = calloc(1, size)))\n+  {\n+      ERR(\"Failed to allocate requested number of bytes, out of memory?\\n\");\n+      exit(EXIT_FAILURE);\n+  }\n+  return addr;\n+}\n+\n+\n int main(int argc, char **argv)\n {\n     int         i, n_valid, do_write, do_scrub;\n@@ -295,7 +312,7 @@ int main(int argc, char **argv)\n         if ((c = strrchr(name, '.')))\n           *c = '\\0';\n \n-        dname = malloc(strlen(name) + 16);\n+        dname = safe_calloc(strlen(name) + 16);\n         sprintf(dname, \"%s-versions\", name);\n         if (!(dir = opendir(dname)))\n           mkdir(dname, S_IRWXU);"
        },
        {
          "filename": "main.h",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -40,5 +40,7 @@\n #define TAG \"[pdfresurrect]\"\n #define ERR(...) {fprintf(stderr, TAG\" -- Error -- \" __VA_ARGS__);}\n \n+/* Returns a zero'd buffer of 'size' bytes or exits in failure. */\n+extern void *safe_calloc(size_t bytes);\n \n #endif /* MAIN_H_INCLUDE */"
        },
        {
          "filename": "pdf.c",
          "status": "modified",
          "additions": 13,
          "deletions": 20,
          "patch": "@@ -122,7 +122,7 @@ pdf_t *pdf_new(const char *name)\n     const char *n;\n     pdf_t      *pdf;\n    \n-    pdf = calloc(1, sizeof(pdf_t));\n+    pdf = safe_calloc(sizeof(pdf_t));\n \n     if (name)\n     {\n@@ -132,12 +132,12 @@ pdf_t *pdf_new(const char *name)\n         else\n           n = name;\n \n-        pdf->name = malloc(strlen(n) + 1);\n+        pdf->name = safe_calloc(strlen(n) + 1);\n         strcpy(pdf->name, n);\n     }\n     else /* !name */\n     {\n-        pdf->name = malloc(strlen(\"Unknown\") + 1);\n+        pdf->name = safe_calloc(strlen(\"Unknown\") + 1);\n         strcpy(pdf->name, \"Unknown\");\n     }\n \n@@ -216,7 +216,7 @@ int pdf_load_xrefs(FILE *fp, pdf_t *pdf)\n \n     /* Load in the start/end positions */\n     fseek(fp, 0, SEEK_SET);\n-    pdf->xrefs = calloc(1, sizeof(xref_t) * pdf->n_xrefs);\n+    pdf->xrefs = safe_calloc(sizeof(xref_t) * pdf->n_xrefs);\n     ver = 1;\n     for (i=0; i<pdf->n_xrefs; i++)\n     {\n@@ -314,7 +314,7 @@ void pdf_load_pages_kids(FILE *fp, pdf_t *pdf)\n \n             /* Get root catalog */\n             sz = pdf->xrefs[i].end - ftell(fp);\n-            buf = malloc(sz + 1);\n+            buf = safe_calloc(sz + 1);\n             SAFE_E(fread(buf, 1, sz, fp), sz, \"Failed to load /Root.\\n\");\n             buf[sz] = '\\0';\n             if (!(c = strstr(buf, \"/Root\")))\n@@ -444,7 +444,7 @@ void pdf_summarize(\n \n     if (name)\n     {\n-        dst_name = malloc(strlen(name) * 2 + 16);\n+        dst_name = safe_calloc(strlen(name) * 2 + 16);\n         sprintf(dst_name, \"%s/%s\", name, name);\n \n         if ((c = strrchr(dst_name, '.')) && (strncmp(c, \".pdf\", 4) == 0))\n@@ -643,7 +643,7 @@ static void load_xref_from_plaintext(FILE *fp, xref_t *xref)\n \n     SAFE_E(fread(buf, 1, 21, fp), 21, \"Failed to load entry Size string.\\n\");\n     xref->n_entries = atoi(buf + strlen(\"ize \"));\n-    xref->entries = calloc(1, xref->n_entries * sizeof(struct _xref_entry));\n+    xref->entries = safe_calloc(xref->n_entries * sizeof(struct _xref_entry));\n \n     /* Load entry data */\n     obj_id = 0;\n@@ -810,7 +810,7 @@ static pdf_creator_t *new_creator(int *n_elements)\n         {\"Trapped\",      \"\"},\n     };\n \n-    daddy = malloc(sizeof(creator_template));\n+    daddy = safe_calloc(sizeof(creator_template));\n     memcpy(daddy, creator_template, sizeof(creator_template));\n \n     if (n_elements)\n@@ -1099,8 +1099,7 @@ static char *get_object(\n     obj_sz = 0;    /* Bytes in object */\n     total_sz = 0;  /* Bytes read in   */\n     n_blks = 1;\n-    data = malloc(blk_sz * n_blks);\n-    memset(data, 0, blk_sz * n_blks);\n+    data = safe_calloc(blk_sz * n_blks);\n \n     /* Suck in data */\n     stream = 0;\n@@ -1266,18 +1265,12 @@ static int get_page(int obj_id, const xref_t *xref)\n \n static char *get_header(FILE *fp)\n {\n-    long start;\n-\n     /* First 1024 bytes of doc must be header (1.7 spec pg 1102) */\n-    char *header;\n-\n-    header = calloc(1, 1024);\n-    \n-    start = ftell(fp);\n+    char *header = safe_calloc(1024);\n+    long start = ftell(fp);\n     fseek(fp, 0, SEEK_SET);\n     SAFE_E(fread(header, 1, 1023, fp), 1023, \"Failed to load PDF header.\\n\");\n     fseek(fp, start, SEEK_SET);\n-    \n     return header;\n }\n \n@@ -1292,7 +1285,7 @@ static char *decode_text_string(const char *str, size_t str_len)\n     /* Regular encoding */\n     if (str[0] == '(')\n     {\n-        ascii = malloc(strlen(str) + 1);\n+        ascii = safe_calloc(strlen(str) + 1);\n         strncpy(ascii, str, strlen(str) + 1);\n         return ascii;\n     }\n@@ -1314,7 +1307,7 @@ static char *decode_text_string(const char *str, size_t str_len)\n       return NULL;\n \n     /* Now decode as hex */\n-    ascii = malloc(str_len);\n+    ascii = safe_calloc(str_len);\n     for ( ; idx<str_len; ++idx)\n     {\n         hex_buf[0] = str[idx++];"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "35c50ad3f659b7e5e739bcfdd8c805acc5f42b90",
            "date": "2022-09-10T17:20:44Z",
            "author_login": "enferex"
          },
          {
            "sha": "7a57bffaa8e0ad47f9b0a4fa44fe5ae621680c62",
            "date": "2022-09-10T17:12:02Z",
            "author_login": "enferex"
          },
          {
            "sha": "da31f8424e66cc5e9865e9eb51076e7beb29fa2c",
            "date": "2022-09-10T17:09:42Z",
            "author_login": "enferex"
          },
          {
            "sha": "636ae5d9ba76c6730e4bcd9230e569a94a5ab454",
            "date": "2022-09-10T03:37:20Z",
            "author_login": "enferex"
          },
          {
            "sha": "b06a8bae8c34921e272276474db8445a58ce1e2d",
            "date": "2021-08-31T03:57:12Z",
            "author_login": "enferex"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-787",
    "description": "An issue was discovered in PDFResurrect before 0.18. pdf_load_pages_kids in pdf.c doesn't validate a certain size value, which leads to a malloc failure and out-of-bounds write.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-08-11T22:15:11.080",
    "last_modified": "2024-11-21T04:27:42.997",
    "fix_date": "2019-08-10T14:47:09Z"
  },
  "references": [
    {
      "url": "https://github.com/enferex/pdfresurrect/commit/0c4120fffa3dffe97b95c486a120eded82afe8a6",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/enferex/pdfresurrect/compare/v0.17...v0.18",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2020/12/msg00002.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/4DBYXYU2VSDJ3NAL54IW2KYD3TZSR33M/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LXN6W5QTNQJ2LFDCQWKYSMMZ3NPUWP3U/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Y243C2IFMRFQWHV62JCSHTMQGDDCICNF/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/enferex/pdfresurrect/commit/0c4120fffa3dffe97b95c486a120eded82afe8a6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/enferex/pdfresurrect/compare/v0.17...v0.18",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2020/12/msg00002.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/4DBYXYU2VSDJ3NAL54IW2KYD3TZSR33M/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LXN6W5QTNQJ2LFDCQWKYSMMZ3NPUWP3U/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Y243C2IFMRFQWHV62JCSHTMQGDDCICNF/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:54.838413",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pdfresurrect",
    "owner": "enferex",
    "created_at": "2013-07-01T12:49:44Z",
    "updated_at": "2024-11-16T18:28:48Z",
    "pushed_at": "2022-09-10T17:21:03Z",
    "size": 276,
    "stars": 81,
    "forks": 13,
    "open_issues": 1,
    "watchers": 81,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 45143,
      "Roff": 2941,
      "M4": 1136,
      "Makefile": 730
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T20:29:33.808811"
  }
}