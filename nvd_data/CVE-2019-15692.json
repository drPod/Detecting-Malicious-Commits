{
  "cve_id": "CVE-2019-15692",
  "github_data": {
    "repository": "TigerVNC/tigervnc",
    "fix_commit": "996356b6c65ca165ee1ea46a571c32a1dc3c3821",
    "related_commits": [
      "996356b6c65ca165ee1ea46a571c32a1dc3c3821",
      "996356b6c65ca165ee1ea46a571c32a1dc3c3821"
    ],
    "patch_url": "https://github.com/TigerVNC/tigervnc/commit/996356b6c65ca165ee1ea46a571c32a1dc3c3821.patch",
    "fix_commit_details": {
      "sha": "996356b6c65ca165ee1ea46a571c32a1dc3c3821",
      "commit_date": "2019-09-10T13:21:03Z",
      "author": {
        "login": "CendioOssman",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Restrict PixelBuffer dimensions to safe values",
        "length": 724,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 22,
        "additions": 22,
        "deletions": 0
      },
      "files": [
        {
          "filename": "common/rfb/PixelBuffer.cxx",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -31,6 +31,14 @@ using namespace rdr;\n \n static LogWriter vlog(\"PixelBuffer\");\n \n+// We do a lot of byte offset calculations that assume the result fits\n+// inside a signed 32 bit integer. Limit the maximum size of pixel\n+// buffers so that these calculations never overflow.\n+\n+const int maxPixelBufferWidth = 16384;\n+const int maxPixelBufferHeight = 16384;\n+const int maxPixelBufferStride = 16384;\n+\n \n // -=- Generic pixel buffer class\n \n@@ -108,6 +116,11 @@ void PixelBuffer::getImage(const PixelFormat& pf, void* imageBuf,\n \n void PixelBuffer::setSize(int width, int height)\n {\n+  if ((width < 0) || (width > maxPixelBufferWidth))\n+    throw rfb::Exception(\"Invalid PixelBuffer width of %d pixels requested\", width);\n+  if ((height < 0) || (height > maxPixelBufferHeight))\n+    throw rfb::Exception(\"Invalid PixelBuffer height of %d pixels requested\", height);\n+\n   width_ = width;\n   height_ = height;\n }\n@@ -340,6 +353,15 @@ const rdr::U8* FullFramePixelBuffer::getBuffer(const Rect& r, int* stride_) cons\n void FullFramePixelBuffer::setBuffer(int width, int height,\n                                      rdr::U8* data_, int stride_)\n {\n+  if ((width < 0) || (width > maxPixelBufferWidth))\n+    throw rfb::Exception(\"Invalid PixelBuffer width of %d pixels requested\", width);\n+  if ((height < 0) || (height > maxPixelBufferHeight))\n+    throw rfb::Exception(\"Invalid PixelBuffer height of %d pixels requested\", height);\n+  if ((stride_ < 0) || (stride_ > maxPixelBufferStride) || (stride_ < width))\n+    throw rfb::Exception(\"Invalid PixelBuffer stride of %d pixels requested\", stride_);\n+  if ((width != 0) && (height != 0) && (data_ == NULL))\n+    throw rfb::Exception(\"PixelBuffer requested without a valid memory area\");\n+\n   ModifiablePixelBuffer::setSize(width, height);\n   stride = stride_;\n   data = data_;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ba73536bcdc32e2d0f8b465ba0295f9ab9ce2b54",
            "date": "2025-01-14T11:41:42Z",
            "author_login": "CendioOssman"
          },
          {
            "sha": "fac3d805774f9d482db7d4e4fdee4bdc6300c455",
            "date": "2025-01-13T16:31:44Z",
            "author_login": "CendioOssman"
          },
          {
            "sha": "5b0b8c0db44eb20ac501158affd3c77fe2c7fdb3",
            "date": "2025-01-13T09:17:28Z",
            "author_login": "CendioOssman"
          },
          {
            "sha": "68763a13f9ebc386e101907683b30dde842f3618",
            "date": "2024-12-17T19:04:04Z",
            "author_login": "JoachimFalk"
          },
          {
            "sha": "e378f3f87d4104545224afa54d418bbebf255f8e",
            "date": "2024-12-17T18:58:34Z",
            "author_login": "JoachimFalk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-122",
    "description": "TigerVNC version prior to 1.10.1 is vulnerable to heap buffer overflow. Vulnerability could be triggered from CopyRectDecoder due to incorrect value checks. Exploitation of this vulnerability could potentially result into remote code execution. This attack appear to be exploitable via network connectivity.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-12-26T15:15:11.147",
    "last_modified": "2024-11-21T04:29:16.240",
    "fix_date": "2019-09-10T13:21:03Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-01/msg00039.html",
      "source": "vulnerability@kaspersky.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/CendioOssman/tigervnc/commit/996356b6c65ca165ee1ea46a571c32a1dc3c3821",
      "source": "vulnerability@kaspersky.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/TigerVNC/tigervnc/releases/tag/v1.10.1",
      "source": "vulnerability@kaspersky.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.openwall.com/lists/oss-security/2019/12/20/2",
      "source": "vulnerability@kaspersky.com",
      "tags": [
        "Exploit",
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-01/msg00039.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/CendioOssman/tigervnc/commit/996356b6c65ca165ee1ea46a571c32a1dc3c3821",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/TigerVNC/tigervnc/releases/tag/v1.10.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.openwall.com/lists/oss-security/2019/12/20/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mailing List",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:24.272382",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tigervnc",
    "owner": "TigerVNC",
    "created_at": "2014-06-25T12:48:26Z",
    "updated_at": "2025-01-14T11:44:26Z",
    "pushed_at": "2025-01-14T11:44:21Z",
    "size": 25050,
    "stars": 5359,
    "forks": 970,
    "open_issues": 175,
    "watchers": 5359,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 2105004,
      "Java": 1745894,
      "C": 1008908,
      "CMake": 70519,
      "Roff": 50879,
      "Makefile": 32567,
      "Objective-C++": 17412,
      "Perl": 12443,
      "Shell": 11196,
      "Objective-C": 1780,
      "Python": 1378
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:43:04.443892"
  }
}