{
  "cve_id": "CVE-2019-15785",
  "github_data": {
    "repository": "fontforge/fontforge",
    "fix_commit": "626f751752875a0ddd74b9e217b6f4828713573c",
    "related_commits": [
      "626f751752875a0ddd74b9e217b6f4828713573c",
      "626f751752875a0ddd74b9e217b6f4828713573c"
    ],
    "patch_url": "https://github.com/fontforge/fontforge/commit/626f751752875a0ddd74b9e217b6f4828713573c.patch",
    "fix_commit_details": {
      "sha": "626f751752875a0ddd74b9e217b6f4828713573c",
      "commit_date": "2019-08-13T11:09:59Z",
      "author": {
        "login": "ctrlcctrlv",
        "type": "User",
        "stats": {
          "total_commits": 91,
          "average_weekly_commits": 0.0834862385321101,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 46
        }
      },
      "commit_message": {
        "title": " Warn users before discarding their unsaved scripts (#3852)",
        "length": 135,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 49,
        "additions": 48,
        "deletions": 1
      },
      "files": [
        {
          "filename": "fontforge/views.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -476,6 +476,7 @@ typedef struct fontview {\n     struct lookup_subtable *cur_subtable;\n     struct qg_data *qg;\n     GPid pid_webfontserver;\n+    bool script_unsaved; // Whether or not there's an unsaved script in script dialog\n } FontView;\n \n typedef struct findsel {"
        },
        {
          "filename": "fontforgeexe/fontview.c",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -80,6 +80,7 @@ char *script_filenames[SCRIPT_MENU_MAX];\n extern int onlycopydisplayed, copymetadata, copyttfinstr, add_char_to_name_list;\n int home_char='A';\n int compact_font_on_open=0;\n+bool warn_script_unsaved = true;\n int navigation_mask = 0;\t\t/* Initialized in startui.c */\n \n static char *fv_fontnames = MONO_UI_FAMILIES;\n@@ -534,6 +535,22 @@ static int AskChanged(SplineFont *sf) {\n return( ret );\n }\n \n+static int AskScriptChanged() {\n+    int ret;\n+    char *buts[4];\n+\n+    buts[0] = _(\"_Yes\");\n+    buts[1] = _(\"Yes, and don't _remind me again\");\n+    buts[2] = _(\"_No\");\n+    buts[3] = NULL;\n+    ret = gwwv_ask( _(\"Unsaved script\"),(const char **) buts,0,2,_(\"You have an unsaved script in the \u00abExecute Script\u00bb dialog. Do you intend to discard it?\"));\n+    if (ret == 1) {\n+        warn_script_unsaved = false;\n+        SavePrefs(true);\n+    }\n+return( ret );\n+}\n+\n int _FVMenuGenerate(FontView *fv,int family) {\n     FVFlattenAllBitmapSelections(fv);\n return( SFGenerateFont(fv->b.sf,fv->b.active_layer,family,fv->b.normal==NULL?fv->b.map:fv->b.normal) );\n@@ -858,6 +875,9 @@ return( false );\n \n     if ( fv->b.nextsame!=NULL || fv->b.sf->fv!=&fv->b ) {\n \t/* There's another view, can close this one with no problems */\n+    } else if ( warn_script_unsaved && fv->script_unsaved && \n+                AskScriptChanged()==2 ) {\n+        return false;\n     } else if ( SFAnyChanged(sf) ) {\n \ti = AskChanged(fv->b.sf);\n \tif ( i==2 )\t/* Cancel */"
        },
        {
          "filename": "fontforgeexe/prefs.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -194,6 +194,7 @@ extern int prefs_cv_outline_thickness; /* from charview.c */\n \n extern float OpenTypeLoadHintEqualityTolerance;  /* autohint.c */\n extern float GenerateHintWidthEqualityTolerance; /* splinesave.c */\n+extern bool warn_script_unsaved; /* fontview.c */\n extern NameList *force_names_when_opening;\n extern NameList *force_names_when_saving;\n extern NameList *namelist_for_new_fonts;\n@@ -311,6 +312,7 @@ static struct prefs_list {\n \t{ N_(\"AutoSaveFrequency\"), pr_int, &AutoSaveFrequency, NULL, NULL, '\\0', NULL, 0, N_( \"The number of seconds between autosaves. If you set this to 0 there will be no autosaves.\") },\n \t{ N_(\"RevisionsToRetain\"), pr_int, &prefRevisionsToRetain, NULL, NULL, '\\0', NULL, 0, N_( \"When Saving, keep this number of previous versions of the file. file.sfd-01 will be the last saved file, file.sfd-02 will be the file saved before that, and so on. If you set this to 0 then no revisions will be retained.\") },\n \t{ N_(\"UndoRedoLimitToSave\"), pr_int, &UndoRedoLimitToSave, NULL, NULL, '\\0', NULL, 0, N_( \"The number of undo and redo operations which will be saved in sfd files.\\nIf you set this to 0 undo/redo information is not saved to sfd files.\\nIf set to -1 then all available undo/redo information is saved without limit.\") },\n+\t{ N_(\"WarnScriptUnsaved\"), pr_bool, &warn_script_unsaved, NULL, NULL, '\\0', NULL, 0, N_( \"Whether or not to warn you if you have an unsaved script in the \u00abExecute Script\u00bb dialog.\") },\n \tPREFS_LIST_EMPTY\n },\n   new_list[] = {"
        },
        {
          "filename": "fontforgeexe/scriptingdlg.c",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -189,6 +189,10 @@ return( true );\n     \n     if ( event->type==et_close ) {\n \tSD_DoCancel( sd );\n+    } else if ( event->type==et_controlevent && event->u.control.subtype==et_textchanged ) {\n+    sd->fv->script_unsaved = !GTextFieldIsEmpty(GWidgetGetControl(sd->gw,CID_Script));\n+    } else if ( event->type==et_controlevent && event->u.control.subtype==et_save ) {\n+    sd->fv->script_unsaved = false;\n     } else if ( event->type==et_char ) {\n \tif ( event->u.chr.keysym == GK_F1 || event->u.chr.keysym == GK_Help ) {\n \t    help(\"scripting.html\");"
        },
        {
          "filename": "gdraw/gtextfield.c",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -215,6 +215,19 @@ static void GTextFieldChanged(GTextField *gt,int src) {\n \tGDrawPostEvent(&e);\n }\n \n+static void GTextFieldSaved(GTextField *gt) {\n+    GEvent e;\n+\n+    e.type = et_controlevent;\n+    e.w = gt->g.base;\n+    e.u.control.subtype = et_save;\n+    e.u.control.g = &gt->g;\n+    if ( gt->g.handle_controlevent != NULL )\n+\t(gt->g.handle_controlevent)(&gt->g,&e);\n+    else\n+\tGDrawPostEvent(&e);\n+}\n+\n static void GTextFieldFocusChanged(GTextField *gt,int gained) {\n     GEvent e;\n \n@@ -878,6 +891,11 @@ static unichar_t txt[] = { '*','.','{','t','x','t',',','p','y','}',  '\\0' };\n static unichar_t errort[] = { 'C','o','u','l','d',' ','n','o','t',' ','o','p','e','n',  '\\0' };\n static unichar_t error[] = { 'C','o','u','l','d',' ','n','o','t',' ','o','p','e','n',' ','%','.','1','0','0','h','s',  '\\0' };\n \n+bool GTextFieldIsEmpty(GGadget *g) {\n+    GTextField *gt = (GTextField *) g;\n+    return gt->text == NULL || *gt->text == '\\0';\n+}\n+\n static void GTextFieldImport(GTextField *gt) {\n     unichar_t *ret;\n     char *cret;\n@@ -970,6 +988,7 @@ return;\n \t}\n     }\n     fclose(file);\n+    GTextFieldSaved(gt);\n }\n \n #define MID_Cut\t\t1"
        },
        {
          "filename": "inc/gdraw.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -120,7 +120,7 @@ enum et_subtype { et_buttonpress, et_buttonactivate, et_radiochanged,\n \t\t  et_listselected, et_listdoubleclick,\n \t\t  et_scrollbarchange,\n \t\t  et_textchanged, et_textfocuschanged,\n-\t\t  et_lastsubtype };\n+\t\t  et_save, et_lastsubtype };\n \n enum sb { et_sb_top, et_sb_uppage, et_sb_up, et_sb_left=et_sb_up,\n \t  et_sb_down, et_sb_right=et_sb_down, et_sb_downpage,"
        },
        {
          "filename": "inc/ggadget.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -406,6 +406,7 @@ GGadgetHandler GGadgetGetHandler(GGadget *g);\n void GTextFieldSelect(GGadget *g,int sel_start, int sel_end);\n void GTextFieldShow(GGadget *g,int pos);\n void GTextFieldReplace(GGadget *g,const unichar_t *txt);\n+bool GTextFieldIsEmpty(GGadget *g);\n void GCompletionFieldSetCompletion(GGadget *g,GTextCompletionHandler completion);\n void GCompletionFieldSetCompletionMode(GGadget *g,int enabled);\n void GGadgetClearList(GGadget *g);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2e5bbdc933e125332ee0cdc6d74dabf1f90bb0f4",
            "date": "2025-01-01T18:36:32Z",
            "author_login": "iorsh"
          },
          {
            "sha": "dcb6efb85030c4bee2f18c6e46c20561d1c77a2b",
            "date": "2025-01-01T16:04:40Z",
            "author_login": "xiaoxiaoafeifei"
          },
          {
            "sha": "c5eb85bdee1e7a1aec58e6754d6142c9ec1f24c1",
            "date": "2025-01-01T15:58:48Z",
            "author_login": "iorsh"
          },
          {
            "sha": "ce1c89c8a39f814206493c89c8679541eb2a5c22",
            "date": "2025-01-01T15:58:14Z",
            "author_login": "Yukinoroh"
          },
          {
            "sha": "91177cb5892ff973b56bd49da946fc312684803f",
            "date": "2025-01-01T15:57:55Z",
            "author_login": "cspiel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-119",
    "description": "FontForge 20190813 through 20190820 has a buffer overflow in PrefsUI_LoadPrefs in prefs.c.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2019-08-29T13:15:11.630",
    "last_modified": "2024-11-21T04:29:27.633",
    "fix_date": "2019-08-13T11:09:59Z"
  },
  "references": [
    {
      "url": "https://github.com/fontforge/fontforge/commit/626f751752875a0ddd74b9e217b6f4828713573c",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/fontforge/fontforge/pull/3886",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202004-14",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/fontforge/fontforge/commit/626f751752875a0ddd74b9e217b6f4828713573c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/fontforge/fontforge/pull/3886",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202004-14",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:57.298682",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "fontforge",
    "owner": "fontforge",
    "created_at": "2012-08-12T17:08:20Z",
    "updated_at": "2025-01-14T13:22:44Z",
    "pushed_at": "2025-01-01T18:36:32Z",
    "size": 107307,
    "stars": 6664,
    "forks": 713,
    "open_issues": 1084,
    "watchers": 6664,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "release/win-20190317",
      "release/win-20190413",
      "release/win-20190801",
      "release/win-20200314",
      "release/win-20201107"
    ],
    "languages": {
      "C": 23146812,
      "Python": 333283,
      "CMake": 283842,
      "Roff": 19490,
      "C++": 10276,
      "Objective-C": 8166,
      "Shell": 4505,
      "Makefile": 605,
      "Emacs Lisp": 339
    },
    "commit_activity": {
      "total_commits_last_year": 44,
      "avg_commits_per_week": 0.8461538461538461,
      "days_active_last_year": 22
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:27:49.093732"
  }
}