{
  "cve_id": "CVE-2019-16761",
  "github_data": {
    "repository": "simpleledger/slp-validate",
    "fix_commit": "50ad96c2798dad6b9f9a13333dd05232defe5730",
    "related_commits": [
      "50ad96c2798dad6b9f9a13333dd05232defe5730",
      "50ad96c2798dad6b9f9a13333dd05232defe5730"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "50ad96c2798dad6b9f9a13333dd05232defe5730",
      "commit_date": "2019-10-26T22:01:04Z",
      "author": {
        "login": "jcramer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "1.0.1 updates:",
        "length": 66,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 480,
        "additions": 312,
        "deletions": 168
      },
      "files": [
        {
          "filename": ".vscode/settings.json",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+{\n+    \"files.associations\": {\n+        \"*.json\": \"jsonc\"\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -32,10 +32,14 @@ The following examples are provided in the examples directory:\n \n ## Change Log\n \n+### 1.0.1\n+- add ts linting to the project\n+- add example for using gs++ as validation source\n+\n ### 1.0.0\n - ported validator from slpjs 0.21.3\n - store cached transactions as buffer instead of a string\n-- Add max cache size parameters in ValidatorType1 constructor\n+- add max cache size parameters in ValidatorType1 constructor\n \n \n "
        },
        {
          "filename": "lib/crypto.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -1,9 +1,9 @@\n-import * as crypto from 'crypto';\n+import * as crypto from \"crypto\";\n \n export class Crypto {\n-    static hash256(message: Buffer): Buffer { \n-        let hash1 = crypto.createHash('sha256');\n-        let hash2 = crypto.createHash('sha256');\n+    public static hash256(message: Buffer): Buffer {\n+        const hash1 = crypto.createHash(\"sha256\");\n+        const hash2 = crypto.createHash(\"sha256\");\n         hash1.update(message);\n         hash2.update(hash1.digest());\n         return Buffer.from(hash2.digest().toJSON().data.reverse());"
        },
        {
          "filename": "lib/script.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@ export class Script {\n         OP_PUSHDATA1: 76,\n         OP_PUSHDATA2: 77,\n         OP_PUSHDATA4: 78,\n-        OP_1NEGATE : 79,\n+        OP_1NEGATE: 79,\n         OP_RETURN: 106,\n     }\n }\n\\ No newline at end of file"
        },
        {
          "filename": "lib/slp.ts",
          "status": "modified",
          "additions": 194,
          "deletions": 158,
          "patch": "@@ -1,17 +1,17 @@\n-import { Script } from './script';\n+import { Script } from \"./script\";\n \n-import Big from 'big.js';\n+import Big from \"big.js\";\n \n export enum SlpTransactionType {\n-    \"GENESIS\" = \"GENESIS\", \n-    \"MINT\" = \"MINT\", \n-    \"SEND\" = \"SEND\"\n+    \"GENESIS\" = \"GENESIS\",\n+    \"MINT\" = \"MINT\",\n+    \"SEND\" = \"SEND\",\n }\n \n export enum SlpVersionType {\n     \"TokenVersionType1\" = 1,\n     \"TokenVersionType1_NFT_Child\" = 65,\n-    \"TokenVersionType1_NFT_Parent\" = 129\n+    \"TokenVersionType1_NFT_Parent\" = 129,\n }\n \n export interface SlpTransactionDetails {\n@@ -21,7 +21,7 @@ export interface SlpTransactionDetails {\n     timestamp?: string;\n     symbol: string;\n     name: string;\n-    documentUri: string|Buffer; \n+    documentUri: string|Buffer;\n     documentSha256: Buffer|null;\n     decimals: number;\n     containsBaton: boolean;\n@@ -31,142 +31,153 @@ export interface SlpTransactionDetails {\n }\n \n export interface PushDataOperation {\n-    opcode: number, \n-    data: Buffer|null\n+    opcode: number;\n+    data: Buffer|null;\n }\n \n export class Slp {\n \n-    static get lokadIdHex() { return \"534c5000\" }\n+    static get lokadIdHex() { return \"534c5000\"; }\n \n     // get list of data chunks resulting from data push operations\n-    static parseOpReturnToChunks(script: Buffer, allow_op_0=false, allow_op_number=false) {\n+    public static parseOpReturnToChunks(script: Buffer, allowOP_0= false, allowOP_number= false) {\n         // \"\"\"Extract pushed bytes after opreturn. Returns list of bytes() objects,\n         // one per push.\n         let ops: PushDataOperation[];\n-    \n+\n         // Strict refusal of non-push opcodes; bad scripts throw OpreturnError.\"\"\"\n         try {\n             ops = this.getScriptOperations(script);\n-        } catch(e) {\n-            //console.log(e);\n-            throw Error('Script error');\n+        } catch (e) {\n+            // console.log(e);\n+            throw Error(\"Script error\");\n         }\n \n-        if(ops[0].opcode !== Script.opcodes.OP_RETURN)\n-            throw Error('No OP_RETURN');\n-        let chunks: (Buffer|null)[] = [];\n+        if (ops[0].opcode !== Script.opcodes.OP_RETURN) {\n+            throw Error(\"No OP_RETURN\");\n+        }\n+        const chunks: Array<Buffer|null> = [];\n         ops.slice(1).forEach(opitem => {\n-            if(opitem.opcode > Script.opcodes.OP_16)\n+            if (opitem.opcode > Script.opcodes.OP_16) {\n                 throw Error(\"Non-push opcode\");\n-            if(opitem.opcode > Script.opcodes.OP_PUSHDATA4) {\n-                if(opitem.opcode === 80)\n-                    throw Error('Non-push opcode');\n-                if(!allow_op_number)\n-                    throw Error('OP_1NEGATE to OP_16 not allowed');\n-                if(opitem.opcode === Script.opcodes.OP_1NEGATE)\n+            }\n+            if (opitem.opcode > Script.opcodes.OP_PUSHDATA4) {\n+                if (opitem.opcode === 80) {\n+                    throw Error(\"Non-push opcode\");\n+                }\n+                if (!allowOP_number) {\n+                    throw Error(\"OP_1NEGATE to OP_16 not allowed\");\n+                }\n+                if (opitem.opcode === Script.opcodes.OP_1NEGATE) {\n                     opitem.data = Buffer.from([0x81]);\n-                else // OP_1 - OP_16\n+                } else { // OP_1 - OP_16\n                     opitem.data = Buffer.from([opitem.opcode - 80]);\n+                }\n             }\n-            if(opitem.opcode === Script.opcodes.OP_0 && !allow_op_0){\n-                throw Error('OP_0 not allowed');\n+            if (opitem.opcode === Script.opcodes.OP_0 && !allowOP_0) {\n+                throw Error(\"OP_0 not allowed\");\n             }\n-            chunks.push(opitem.data)\n+            chunks.push(opitem.data);\n         });\n-        //console.log(chunks);\n-        return chunks\n-    }\n-\n-    static parseChunkToInt(intBytes: Buffer, minByteLen: number, maxByteLen: number, raise_on_Null = false) {\n-        // # Parse data as unsigned-big-endian encoded integer.\n-        // # For empty data different possibilities may occur:\n-        // #      minByteLen <= 0 : return 0\n-        // #      raise_on_Null == False and minByteLen > 0: return None\n-        // #      raise_on_Null == True and minByteLen > 0:  raise SlpInvalidOutputMessage\n-        if(intBytes.length >= minByteLen && intBytes.length <= maxByteLen)\n-            return intBytes.readUIntBE(0, intBytes.length)\n-        if(intBytes.length === 0 && !raise_on_Null)\n-            return null;\n-        throw Error('Field has wrong length');\n+        // console.log(chunks);\n+        return chunks;\n     }\n \n-    static parseSlpOutputScript(outputScript: Buffer): SlpTransactionDetails {\n-        let slpMsg = <SlpTransactionDetails>{};\n-        let chunks: (Buffer|null)[];\n+    public static parseSlpOutputScript(outputScript: Buffer): SlpTransactionDetails {\n+        const slpMsg = {} as SlpTransactionDetails;\n+        let chunks: Array<Buffer|null>;\n         try {\n             chunks = this.parseOpReturnToChunks(outputScript);\n-        } catch(e) {\n-            throw Error('Bad OP_RETURN');\n+        } catch (e) {\n+            throw Error(\"Bad OP_RETURN\");\n+        }\n+        if (chunks.length === 0) {\n+            throw Error(\"Empty OP_RETURN\");\n+        }\n+        if (!chunks[0]) {\n+            throw Error(\"Not SLP\");\n         }\n-        if(chunks.length === 0)\n-            throw Error('Empty OP_RETURN');\n-        if(!chunks[0])\n-            throw Error(\"Not SLP\")\n-        if(!chunks[0]!.equals(Buffer.from(this.lokadIdHex, 'hex')))\n-            throw Error('Not SLP');\n-        if(chunks.length === 1)\n+        if (!chunks[0]!.equals(Buffer.from(this.lokadIdHex, \"hex\"))) {\n+            throw Error(\"Not SLP\");\n+        }\n+        if (chunks.length === 1) {\n             throw Error(\"Missing token versionType\");\n+        }\n         // # check if the token version is supported\n-        if(!chunks[1])\n-            throw Error(\"Bad versionType buffer\")\n-        slpMsg.versionType = <SlpVersionType>Slp.parseChunkToInt(chunks[1]!, 1, 2, true);\n-        let supportedTypes = [   \n-                SlpVersionType.TokenVersionType1, \n+        if (!chunks[1]) {\n+            throw Error(\"Bad versionType buffer\");\n+        }\n+        slpMsg.versionType = (Slp.parseChunkToInt(chunks[1]!, 1, 2, true) as SlpVersionType);\n+        const supportedTypes = [\n+                SlpVersionType.TokenVersionType1,\n                 SlpVersionType.TokenVersionType1_NFT_Parent,\n                 SlpVersionType.TokenVersionType1_NFT_Child ];\n-        if(!supportedTypes.includes(slpMsg.versionType))\n-            throw Error('Unsupported token type: ' + slpMsg.versionType);\n-        if(chunks.length === 2)\n-            throw Error('Missing SLP transaction type');\n+        if (!supportedTypes.includes(slpMsg.versionType)) {\n+            throw Error(\"Unsupported token type: \" + slpMsg.versionType);\n+        }\n+        if (chunks.length === 2) {\n+            throw Error(\"Missing SLP transaction type\");\n+        }\n         try {\n-            let msgType: string = chunks[2]!.toString('ascii')\n-            slpMsg.transactionType = SlpTransactionType[msgType as keyof typeof SlpTransactionType]\n-        } catch(_){\n-            throw Error('Bad transaction type');\n+            const msgType: string = chunks[2]!.toString(\"latin1\");\n+            slpMsg.transactionType = SlpTransactionType[msgType as keyof typeof SlpTransactionType];\n+        } catch (_) {\n+            throw Error(\"Bad transaction type\");\n         }\n-        if(slpMsg.transactionType === SlpTransactionType.GENESIS) {\n-            if(chunks.length !== 10)\n-                throw Error('GENESIS with incorrect number of parameters');\n-            slpMsg.symbol = chunks[3] ? chunks[3]!.toString('utf8') : '';\n-            slpMsg.name = chunks[4] ? chunks[4]!.toString('utf8') : '';\n-            slpMsg.documentUri = chunks[5] ? chunks[5]!.toString('utf8') : '';\n+        if (slpMsg.transactionType === SlpTransactionType.GENESIS) {\n+            if (chunks.length !== 10) {\n+                throw Error(\"GENESIS with incorrect number of parameters\");\n+            }\n+            slpMsg.symbol = chunks[3] ? chunks[3]!.toString(\"utf8\") : \"\";\n+            slpMsg.name = chunks[4] ? chunks[4]!.toString(\"utf8\") : \"\";\n+            slpMsg.documentUri = chunks[5] ? chunks[5]!.toString(\"utf8\") : \"\";\n             slpMsg.documentSha256 = chunks[6] ? chunks[6] : null;\n-            if(slpMsg.documentSha256) {\n-                if(slpMsg.documentSha256.length !== 0 && slpMsg.documentSha256.length !== 32)\n-                    throw Error('Token document hash is incorrect length');\n+            if (slpMsg.documentSha256) {\n+                if (slpMsg.documentSha256.length !== 0 && slpMsg.documentSha256.length !== 32) {\n+                    throw Error(\"Token document hash is incorrect length\");\n+                }\n+            }\n+            if (!chunks[7]) {\n+                throw Error(\"Bad decimals buffer\");\n+            }\n+            slpMsg.decimals = (Slp.parseChunkToInt(chunks[7]!, 1, 1, true) as number);\n+            if (slpMsg.versionType === 0x41 && slpMsg.decimals !== 0) {\n+                throw Error(\"NFT1 child token must have divisibility set to 0 decimal places.\");\n+            }\n+            if (slpMsg.decimals > 9) {\n+                throw Error(\"Too many decimals\");\n             }\n-            if(!chunks[7])\n-                throw Error(\"Bad decimals buffer\")\n-            slpMsg.decimals = <number>Slp.parseChunkToInt(chunks[7]!, 1, 1, true);\n-            if(slpMsg.versionType === 0x41 && slpMsg.decimals !== 0)\n-                throw Error('NFT1 child token must have divisibility set to 0 decimal places.')\n-            if(slpMsg.decimals > 9)\n-                throw Error('Too many decimals')\n             slpMsg.batonVout = chunks[8] ? Slp.parseChunkToInt(chunks[8]!, 1, 1) : null;\n-            if(slpMsg.batonVout !== null) {\n-                if (slpMsg.batonVout < 2)\n-                    throw Error('Mint baton cannot be on vout=0 or 1');\n+            if (slpMsg.batonVout !== null) {\n+                if (slpMsg.batonVout < 2) {\n+                    throw Error(\"Mint baton cannot be on vout=0 or 1\");\n+                }\n                 slpMsg.containsBaton = true;\n             }\n-            if(slpMsg.versionType === 0x41 && slpMsg.batonVout !== null)\n-                throw Error(\"NFT1 child token must not have a minting baton!\")\n-            if(!chunks[9])\n-                throw Error(\"Bad Genesis quantity buffer\")\n-            if(chunks[9]!.length !== 8)\n-                throw Error(\"Genesis quantity must be provided as an 8-byte buffer\")\n-            slpMsg.genesisOrMintQuantity = this.buffer2BigNumber(chunks[9]!);                \n-            if(slpMsg.versionType === 0x41 && !slpMsg.genesisOrMintQuantity.eq(1))\n-                throw Error(\"NFT1 child token must have GENESIS quantity of 1.\")\n-        }\n-        else if(slpMsg.transactionType === SlpTransactionType.SEND) {\n-            if(chunks.length < 4)\n-                throw Error('SEND with too few parameters');\n-            if(!chunks[3])\n-                throw Error(\"Bad tokenId buffer\")\n-            if(chunks[3]!.length !== 32)\n-                throw Error('token_id is wrong length');\n-            slpMsg.tokenIdHex = chunks[3]!.toString('hex');\n+            if (slpMsg.versionType === 0x41 && slpMsg.batonVout !== null) {\n+                throw Error(\"NFT1 child token must not have a minting baton!\");\n+            }\n+            if (!chunks[9]) {\n+                throw Error(\"Bad Genesis quantity buffer\");\n+            }\n+            if (chunks[9]!.length !== 8) {\n+                throw Error(\"Genesis quantity must be provided as an 8-byte buffer\");\n+            }\n+            slpMsg.genesisOrMintQuantity = this.buffer2BigNumber(chunks[9]!);\n+            if (slpMsg.versionType === 0x41 && !slpMsg.genesisOrMintQuantity.eq(1)) {\n+                throw Error(\"NFT1 child token must have GENESIS quantity of 1.\");\n+            }\n+        } else if (slpMsg.transactionType === SlpTransactionType.SEND) {\n+            if (chunks.length < 4) {\n+                throw Error(\"SEND with too few parameters\");\n+            }\n+            if (!chunks[3]) {\n+                throw Error(\"Bad tokenId buffer\");\n+            }\n+            if (chunks[3]!.length !== 32) {\n+                throw Error(\"token_id is wrong length\");\n+            }\n+            slpMsg.tokenIdHex = chunks[3]!.toString(\"hex\");\n             // # Note that we put an explicit 0 for  ['token_output'][0] since it\n             // # corresponds to vout=0, which is the OP_RETURN tx output.\n             // # ['token_output'][1] is the first token output given by the SLP\n@@ -175,93 +186,118 @@ export class Slp {\n             slpMsg.sendOutputs = [];\n             slpMsg.sendOutputs.push(new Big(0));\n             chunks.slice(4).forEach(chunk => {\n-                if(!chunk)\n-                    throw Error(\"Bad send quantity buffer.\")\n-                if(chunk.length !== 8)\n-                    throw Error('SEND quantities must be 8-bytes each.');\n+                if (!chunk) {\n+                    throw Error(\"Bad send quantity buffer.\");\n+                }\n+                if (chunk.length !== 8) {\n+                    throw Error(\"SEND quantities must be 8-bytes each.\");\n+                }\n                 slpMsg.sendOutputs!.push(this.buffer2BigNumber(chunk));\n             });\n             // # maximum 19 allowed token outputs, plus 1 for the explicit [0] we inserted.\n-            if(slpMsg.sendOutputs.length < 2)\n-                throw Error('Missing output amounts');\n-            if(slpMsg.sendOutputs.length > 20)\n-                throw Error('More than 19 output amounts');\n-        }\n-        else if(slpMsg.transactionType === SlpTransactionType.MINT) {\n-            if(slpMsg.versionType === 0x41)\n-                throw Error(\"NFT1 Child cannot have MINT transaction type.\")\n-            if(chunks.length != 6)\n-                throw Error('MINT with incorrect number of parameters');\n-            if(!chunks[3])\n+            if (slpMsg.sendOutputs.length < 2) {\n+                throw Error(\"Missing output amounts\");\n+            }\n+            if (slpMsg.sendOutputs.length > 20) {\n+                throw Error(\"More than 19 output amounts\");\n+            }\n+        } else if (slpMsg.transactionType === SlpTransactionType.MINT) {\n+            if (slpMsg.versionType === 0x41) {\n+                throw Error(\"NFT1 Child cannot have MINT transaction type.\");\n+            }\n+            if (chunks.length !== 6) {\n+                throw Error(\"MINT with incorrect number of parameters\");\n+            }\n+            if (!chunks[3]) {\n                 throw Error(\"Bad token_id buffer\");\n-            if(chunks[3]!.length != 32)\n-                throw Error('token_id is wrong length');\n-            slpMsg.tokenIdHex = chunks[3]!.toString('hex');\n-            slpMsg.batonVout = chunks[4] ? Slp.parseChunkToInt(chunks[4]!,1,1) : null;\n-            if(slpMsg.batonVout !== null && slpMsg.batonVout !== undefined) {\n-                if(slpMsg.batonVout < 2)\n-                    throw Error('Mint baton cannot be on vout=0 or 1');\n+            }\n+            if (chunks[3]!.length !== 32) {\n+                throw Error(\"token_id is wrong length\");\n+            }\n+            slpMsg.tokenIdHex = chunks[3]!.toString(\"hex\");\n+            slpMsg.batonVout = chunks[4] ? Slp.parseChunkToInt(chunks[4]!, 1, 1) : null;\n+            if (slpMsg.batonVout !== null && slpMsg.batonVout !== undefined) {\n+                if (slpMsg.batonVout < 2) {\n+                    throw Error(\"Mint baton cannot be on vout=0 or 1\");\n+                }\n                 slpMsg.containsBaton = true;\n             }\n-            if(!chunks[5])\n-                throw Error(\"Bad Mint quantity buffer\")\n-            if(chunks[5]!.length !== 8)\n-                throw Error(\"Mint quantity must be provided as an 8-byte buffer\")\n+            if (!chunks[5]) {\n+                throw Error(\"Bad Mint quantity buffer\");\n+            }\n+            if (chunks[5]!.length !== 8) {\n+                throw Error(\"Mint quantity must be provided as an 8-byte buffer\");\n+            }\n             slpMsg.genesisOrMintQuantity = this.buffer2BigNumber(chunks[5]!);\n-        }\n-        else\n+        } else {\n             throw Error(\"Bad transaction type\");\n+ }\n \n-        if(!slpMsg.genesisOrMintQuantity && (!slpMsg.sendOutputs || slpMsg.sendOutputs.length === 0))\n+        if (!slpMsg.genesisOrMintQuantity && (!slpMsg.sendOutputs || slpMsg.sendOutputs.length === 0)) {\n             throw Error(\"SLP message must have either Genesis/Mint outputs or Send outputs, both are missing\");\n+        }\n \n         return slpMsg;\n     }\n \n-    static buffer2BigNumber(amount: Buffer): Big {\n-        if(amount.length < 5 || amount.length > 8)\n+    public static parseChunkToInt(intBytes: Buffer, minByteLen: number, maxByteLen: number, raiseOnNull = false) {\n+        // # Parse data as unsigned-big-endian encoded integer.\n+        // # For empty data different possibilities may occur:\n+        // #      minByteLen <= 0 : return 0\n+        // #      raise_on_Null == False and minByteLen > 0: return None\n+        // #      raise_on_Null == True and minByteLen > 0:  raise SlpInvalidOutputMessage\n+        if (intBytes.length >= minByteLen && intBytes.length <= maxByteLen) {\n+            return intBytes.readUIntBE(0, intBytes.length);\n+        }\n+        if (intBytes.length === 0 && !raiseOnNull) {\n+            return null;\n+        }\n+        throw Error(\"Field has wrong length\");\n+    }\n+\n+    public static buffer2BigNumber(amount: Buffer): Big {\n+        if (amount.length < 5 || amount.length > 8) {\n             throw Error(\"Buffer must be between 4-8 bytes in length\");\n-        return (new Big(amount.readUInt32BE(0).toString())).times(2**32).plus(amount.readUInt32BE(4).toString());\n+        }\n+        return (new Big(amount.readUInt32BE(0).toString())).times(2 ** 32).plus(amount.readUInt32BE(4).toString());\n     }\n \n     // Get a list of operations with accompanying push data (if a push opcode)\n-    static getScriptOperations(script: Buffer) {\n-        let ops: PushDataOperation[] = [];\n+    public static getScriptOperations(script: Buffer) {\n+        const ops: PushDataOperation[] = [];\n         try {\n             let n = 0;\n             let dlen: number;\n             while (n < script.length) {\n-                let op: PushDataOperation = { opcode: script[n], data: null }\n+                const op: PushDataOperation = { opcode: script[n], data: null };\n                 n += 1;\n-                if(op.opcode <= Script.opcodes.OP_PUSHDATA4) {\n-                    if(op.opcode < Script.opcodes.OP_PUSHDATA1)\n+                if (op.opcode <= Script.opcodes.OP_PUSHDATA4) {\n+                    if (op.opcode < Script.opcodes.OP_PUSHDATA1) {\n                         dlen = op.opcode;\n-                    else if(op.opcode === Script.opcodes.OP_PUSHDATA1) {\n+                    } else if (op.opcode === Script.opcodes.OP_PUSHDATA1) {\n                         dlen = script[n];\n                         n += 1;\n-                    }\n-                    else if(op.opcode === Script.opcodes.OP_PUSHDATA2) {\n-                        dlen = script.slice(n, n + 2).readUIntLE(0,2);\n+                    } else if (op.opcode === Script.opcodes.OP_PUSHDATA2) {\n+                        dlen = script.slice(n, n + 2).readUIntLE(0, 2);\n                         n += 2;\n-                    }\n-                    else {\n-                        dlen = script.slice(n, n + 4).readUIntLE(0,4);\n+                    } else {\n+                        dlen = script.slice(n, n + 4).readUIntLE(0, 4);\n                         n += 4;\n                     }\n-                    if((n + dlen) > script.length) {\n-                        throw Error('IndexError');\n+                    if ((n + dlen) > script.length) {\n+                        throw Error(\"IndexError\");\n                     }\n-                    if(dlen > 0)\n+                    if (dlen > 0) {\n                         op.data = script.slice(n, n + dlen);\n-                    n += dlen\n+                    }\n+                    n += dlen;\n                 }\n                 ops.push(op);\n             }\n-        } catch(e) {\n-            //console.log(e);\n-            throw Error('truncated script')\n+        } catch (e) {\n+            // console.log(e);\n+            throw Error(\"truncated script\");\n         }\n         return ops;\n     }\n- \n }"
        },
        {
          "filename": "package-lock.json",
          "status": "modified",
          "additions": 87,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"slp-validate\",\n-  \"version\": \"1.0.0\",\n+  \"version\": \"1.0.1\",\n   \"lockfileVersion\": 1,\n   \"requires\": true,\n   \"dependencies\": {\n@@ -763,6 +763,12 @@\n       \"integrity\": \"sha512-mBBwmeGTrxEMO4pMaaf/uUEFHnYtwr8FTe8Y/mer4rcV/bye0qGm6pw1bGZFGStxC5O76c5ZAVBGnqHmOaJpdQ==\",\n       \"dev\": true\n     },\n+    \"get-caller-file\": {\n+      \"version\": \"1.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/get-caller-file/-/get-caller-file-1.0.3.tgz\",\n+      \"integrity\": \"sha512-3t6rVToeoZfYSGd8YoLFR2DJkiQrIiUrGcjvFX2mDw3bn6k2OtwHN0TNCLbBO+w8qTvimhDkv+LSscbJY1vE6w==\",\n+      \"dev\": true\n+    },\n     \"glob\": {\n       \"version\": \"7.1.2\",\n       \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.2.tgz\",\n@@ -2095,6 +2101,16 @@\n         \"supports-color\": \"5.4.0\"\n       }\n     },\n+    \"mock-require\": {\n+      \"version\": \"3.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/mock-require/-/mock-require-3.0.3.tgz\",\n+      \"integrity\": \"sha512-lLzfLHcyc10MKQnNUCv7dMcoY/2Qxd6wJfbqCcVk3LDb8An4hF6ohk5AztrvgKhJCqj36uyzi/p5se+tvyD+Wg==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"get-caller-file\": \"^1.0.2\",\n+        \"normalize-path\": \"^2.1.1\"\n+      }\n+    },\n     \"module-deps\": {\n       \"version\": \"6.2.1\",\n       \"resolved\": \"https://registry.npmjs.org/module-deps/-/module-deps-6.2.1.tgz\",\n@@ -2130,6 +2146,15 @@\n       \"integrity\": \"sha512-INOFj37C7k3AfaNTtX8RhsTw7qRy7eLET14cROi9+5HAVbbHuIWUHEauBv5qT4Av2tWasiTY1Jw6puUNqRJXQg==\",\n       \"dev\": true\n     },\n+    \"normalize-path\": {\n+      \"version\": \"2.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/normalize-path/-/normalize-path-2.1.1.tgz\",\n+      \"integrity\": \"sha1-GrKLVW4Zg2Oowab35vogE3/mrtk=\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"remove-trailing-separator\": \"^1.0.1\"\n+      }\n+    },\n     \"number-is-nan\": {\n       \"version\": \"1.0.1\",\n       \"resolved\": \"https://registry.npmjs.org/number-is-nan/-/number-is-nan-1.0.1.tgz\",\n@@ -2377,6 +2402,12 @@\n         }\n       }\n     },\n+    \"remove-trailing-separator\": {\n+      \"version\": \"1.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz\",\n+      \"integrity\": \"sha1-wkvOKig62tW8P1jg1IJJuSN52O8=\",\n+      \"dev\": true\n+    },\n     \"resolve\": {\n       \"version\": \"1.12.0\",\n       \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.12.0.tgz\",\n@@ -2601,6 +2632,23 @@\n       \"integrity\": \"sha1-hnrHTjhkGHsdPUfZlqeOxciDB3c=\",\n       \"dev\": true\n     },\n+    \"typescript\": {\n+      \"version\": \"3.6.4\",\n+      \"resolved\": \"https://registry.npmjs.org/typescript/-/typescript-3.6.4.tgz\",\n+      \"integrity\": \"sha512-unoCll1+l+YK4i4F8f22TaNVPRHcD9PA3yCuZ8g5e0qGqlVlJ/8FSateOLLSagn+Yg5+ZwuPkL8LFUc0Jcvksg==\",\n+      \"dev\": true\n+    },\n+    \"typescript-tslint-plugin\": {\n+      \"version\": \"0.5.4\",\n+      \"resolved\": \"https://registry.npmjs.org/typescript-tslint-plugin/-/typescript-tslint-plugin-0.5.4.tgz\",\n+      \"integrity\": \"sha512-CQEfGC+p0SoBARI4N2LrGsWJsp4/OE+uKZ68xsWYKHWqMFq4DFQHqOVlK0deEricSN01NmDTqjap63Pw/DHieg==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"minimatch\": \"^3.0.4\",\n+        \"mock-require\": \"^3.0.2\",\n+        \"vscode-languageserver\": \"^5.1.0\"\n+      }\n+    },\n     \"uglify-es\": {\n       \"version\": \"3.3.9\",\n       \"resolved\": \"https://registry.npmjs.org/uglify-es/-/uglify-es-3.3.9.tgz\",\n@@ -2691,6 +2739,44 @@\n       \"integrity\": \"sha512-iq+S7vZJE60yejDYM0ek6zg308+UZsdtPExWP9VZoCFCz1zkJoXFnAX7aZfd/ZwrkidzdUZL0C/ryW+JwAiIGw==\",\n       \"dev\": true\n     },\n+    \"vscode-jsonrpc\": {\n+      \"version\": \"4.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/vscode-jsonrpc/-/vscode-jsonrpc-4.0.0.tgz\",\n+      \"integrity\": \"sha512-perEnXQdQOJMTDFNv+UF3h1Y0z4iSiaN9jIlb0OqIYgosPCZGYh/MCUlkFtV2668PL69lRDO32hmvL2yiidUYg==\",\n+      \"dev\": true\n+    },\n+    \"vscode-languageserver\": {\n+      \"version\": \"5.2.1\",\n+      \"resolved\": \"https://registry.npmjs.org/vscode-languageserver/-/vscode-languageserver-5.2.1.tgz\",\n+      \"integrity\": \"sha512-GuayqdKZqAwwaCUjDvMTAVRPJOp/SLON3mJ07eGsx/Iq9HjRymhKWztX41rISqDKhHVVyFM+IywICyZDla6U3A==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"vscode-languageserver-protocol\": \"3.14.1\",\n+        \"vscode-uri\": \"^1.0.6\"\n+      }\n+    },\n+    \"vscode-languageserver-protocol\": {\n+      \"version\": \"3.14.1\",\n+      \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.14.1.tgz\",\n+      \"integrity\": \"sha512-IL66BLb2g20uIKog5Y2dQ0IiigW0XKrvmWiOvc0yXw80z3tMEzEnHjaGAb3ENuU7MnQqgnYJ1Cl2l9RvNgDi4g==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"vscode-jsonrpc\": \"^4.0.0\",\n+        \"vscode-languageserver-types\": \"3.14.0\"\n+      }\n+    },\n+    \"vscode-languageserver-types\": {\n+      \"version\": \"3.14.0\",\n+      \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.14.0.tgz\",\n+      \"integrity\": \"sha512-lTmS6AlAlMHOvPQemVwo3CezxBp0sNB95KNPkqp3Nxd5VFEnuG1ByM0zlRWos0zjO3ZWtkvhal0COgiV1xIA4A==\",\n+      \"dev\": true\n+    },\n+    \"vscode-uri\": {\n+      \"version\": \"1.0.8\",\n+      \"resolved\": \"https://registry.npmjs.org/vscode-uri/-/vscode-uri-1.0.8.tgz\",\n+      \"integrity\": \"sha512-obtSWTlbJ+a+TFRYGaUumtVwb+InIUVI0Lu0VBUAPmj2cU5JutEXg3xUE0c2J5Tcy7h2DEKVJBFi+Y9ZSFzzPQ==\",\n+      \"dev\": true\n+    },\n     \"window-size\": {\n       \"version\": \"0.1.4\",\n       \"resolved\": \"https://registry.npmjs.org/window-size/-/window-size-0.1.4.tgz\","
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"slp-validate\",\n-  \"version\": \"1.0.0\",\n+  \"version\": \"1.0.1\",\n   \"description\": \"SLP transaction validator\",\n   \"main\": \"index.js\",\n   \"files\": [\n@@ -29,6 +29,8 @@\n     \"grpc-slp-graphsearch-node\": \"^0.0.1\",\n     \"browserify\": \"^16.2.2\",\n     \"uglify-es\": \"^3.3.9\",\n-    \"mkdirp\": \"^0.5.1\"\n+    \"mkdirp\": \"^0.5.1\",\n+    \"typescript-tslint-plugin\": \"^0.5.4\",\n+    \"typescript\": \"^3.6.4\"\n   }\n }"
        },
        {
          "filename": "tsconfig.json",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -7,6 +7,9 @@\n     \"sourceMap\": true,                     /* Generates corresponding '.map' file. */\n     \"downlevelIteration\": true,             /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n     \"strict\": true,                         /* Enable all strict type-checking options. */\n-    \"esModuleInterop\": true                 /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\n+    \"esModuleInterop\": true,                 /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\n+    \"plugins\": [\n+      { \"name\": \"typescript-tslint-plugin\" }\n+    ]\n   }\n }"
        },
        {
          "filename": "tslint.json",
          "status": "added",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -0,0 +1,8 @@\n+// You can modify the configuration here with your own.\n+// Make sure that your json is valid, and if you run into\n+// other issues, try checking the console for errors.\n+\n+{\n+    \"extends\": [\"tslint:recommended\"],\n+    \"rules\": {} // add additional rules and their configuration\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 5,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5308d9471901b9cc78fe4e5aa1b4c8db519a19ad",
            "date": "2021-04-11T14:24:15Z",
            "author_login": "jcramer"
          },
          {
            "sha": "312eff5f9895479d89a4abb104fbc508e0c09370",
            "date": "2021-04-11T14:17:14Z",
            "author_login": "jcramer"
          },
          {
            "sha": "06722707a5938866449713e2f0a54be3823222a7",
            "date": "2021-04-11T13:55:32Z",
            "author_login": "jcramer"
          },
          {
            "sha": "e305a036dd00d87ed350409bf4de21e12ebc866e",
            "date": "2021-04-11T13:55:16Z",
            "author_login": "jcramer"
          },
          {
            "sha": "38d9818c4f2c583f7d9640bd8b47610fa22042d0",
            "date": "2021-04-11T13:53:41Z",
            "author_login": "jcramer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:H/A:H",
    "cwe_id": "CWE-20",
    "description": "A specially crafted Bitcoin script can cause a discrepancy between the specified SLP consensus rules and the validation result of the slp-validate@1.0.0 npm package. An attacker could create a specially crafted Bitcoin script in order to cause a hard-fork from the SLP consensus. All versions >1.0.0 have been patched.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2019-11-15T23:15:11.317",
    "last_modified": "2024-11-21T04:31:08.150",
    "fix_date": "2019-10-26T22:01:04Z"
  },
  "references": [
    {
      "url": "https://github.com/simpleledger/slp-validate/commit/50ad96c2798dad6b9f9a13333dd05232defe5730#diff-fe58606994c412ba56a65141a7aa4a62L123",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slp-validate/security/advisories/GHSA-wmx6-vxcf-c3gr",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slp-validate/commit/50ad96c2798dad6b9f9a13333dd05232defe5730#diff-fe58606994c412ba56a65141a7aa4a62L123",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slp-validate/security/advisories/GHSA-wmx6-vxcf-c3gr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:09.195042",
    "processing_status": "enhanced"
  }
}