{
  "cve_id": "CVE-2019-16762",
  "github_data": {
    "repository": "simpleledger/slpjs",
    "fix_commit": "ac8809b42e47790a6f0205991b36f2699ed10c84",
    "related_commits": [
      "ac8809b42e47790a6f0205991b36f2699ed10c84",
      "ac8809b42e47790a6f0205991b36f2699ed10c84"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "ac8809b42e47790a6f0205991b36f2699ed10c84",
      "commit_date": "2019-10-26T20:56:21Z",
      "author": {
        "login": "jcramer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "0.21.4 updates:",
        "length": 55,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 2154,
        "additions": 1046,
        "deletions": 1108
      },
      "files": [
        {
          "filename": ".vscode/settings.json",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+{\n+    \"files.associations\": {\n+        \"*.json\": \"jsonc\"\n+    }\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "lib/slp.ts",
          "status": "modified",
          "additions": 646,
          "deletions": 513,
          "patch": "@@ -1,22 +1,24 @@\n-import { SlpAddressUtxoResult, SlpTransactionDetails, SlpTransactionType, SlpUtxoJudgement, SlpBalancesResult, utxo, SlpVersionType, logger, Primatives } from '../index';\n-import { SlpTokenType1 } from './slptokentype1';\n-import { Utils } from './utils';\n+import {\n+    logger, Primatives, SlpAddressUtxoResult, SlpBalancesResult,\n+    SlpTransactionDetails, SlpTransactionType, SlpUtxoJudgement, SlpVersionType, utxo } from \"../index\";\n+import { SlpTokenType1 } from \"./slptokentype1\";\n+import { Utils } from \"./utils\";\n \n-import { BITBOX } from 'bitbox-sdk';\n-import * as bchaddr from 'bchaddrjs-slp';\n-import BigNumber from 'bignumber.js';\n+import * as bchaddr from \"bchaddrjs-slp\";\n+import BigNumber from \"bignumber.js\";\n+import { BITBOX } from \"bitbox-sdk\";\n \n export interface SlpPaymentRequest {\n-    address: string,\n-    amountBch?: number, \n-    amountToken?: number,\n-    tokenId?: string,\n-    tokenFlags?: string[]\n+    address: string;\n+    amountBch?: number;\n+    amountToken?: number;\n+    tokenId?: string;\n+    tokenFlags?: string[];\n }\n \n export interface PushDataOperation {\n-    opcode: number, \n-    data: Buffer|null\n+    opcode: number;\n+    data: Buffer|null;\n }\n \n export interface configBuildNFT1GenesisOpReturn {\n@@ -30,10 +32,10 @@ export interface configBuildGenesisOpReturn {\n     ticker: string|null;\n     name: string|null;\n     documentUri: string|null;\n-    hash: Buffer|null,\n+    hash: Buffer|null;\n     decimals: number;\n     batonVout: number|null; // normally this is null (for fixed supply) or 2+ for flexible\n-    initialQuantity: BigNumber\n+    initialQuantity: BigNumber;\n }\n \n export interface configBuildMintOpReturn {\n@@ -43,24 +45,24 @@ export interface configBuildMintOpReturn {\n }\n \n export interface configBuildSendOpReturn {\n-    tokenIdHex: string; \n-    outputQtyArray: BigNumber[]\n+    tokenIdHex: string;\n+    outputQtyArray: BigNumber[];\n }\n \n export interface configBuildRawNFT1GenesisTx {\n-    slpNFT1GenesisOpReturn: Buffer; \n+    slpNFT1GenesisOpReturn: Buffer;\n     mintReceiverAddress: string;\n     mintReceiverSatoshis?: BigNumber;\n-    //batonReceiverAddress: string|null;\n-    //batonReceiverSatoshis?: BigNumber;\n+    // batonReceiverAddress: string|null;\n+    // batonReceiverSatoshis?: BigNumber;\n     bchChangeReceiverAddress: string;\n     input_utxos: utxo[];\n     parentTokenIdHex: string;\n-    //allowed_token_burning: string[]|null;\n+    // allowed_token_burning: string[]|null;\n }\n \n export interface configBuildRawGenesisTx {\n-    slpGenesisOpReturn: Buffer; \n+    slpGenesisOpReturn: Buffer;\n     mintReceiverAddress: string;\n     mintReceiverSatoshis?: BigNumber;\n     batonReceiverAddress: string|null;\n@@ -75,7 +77,7 @@ export interface configBuildRawSendTx {\n     input_token_utxos: utxo[];\n     tokenReceiverAddressArray: string[];\n     bchChangeReceiverAddress: string;\n-    requiredNonTokenOutputs?: { satoshis: number, receiverAddress: string }[]\n+    requiredNonTokenOutputs?: Array<{ satoshis: number, receiverAddress: string }>;\n     extraFee?: number;\n }\n \n@@ -104,8 +106,9 @@ export interface configBuildRawBurnTx {\n }\n \n export interface SlpValidator {\n-    isValidSlpTxid(txid: string, tokenIdFilter?: string|null, tokenTypeFilter?: number|null, logger?: logger): Promise<boolean>;\n     getRawTransactions: (txid: string[]) => Promise<string[]>;\n+    isValidSlpTxid(txid: string, tokenIdFilter?: string|null,\n+                   tokenTypeFilter?: number|null, logger?: logger): Promise<boolean>;\n     validateSlpTransactions(txids: string[]): Promise<string[]>;\n }\n \n@@ -114,128 +117,187 @@ export interface SlpProxyValidator extends SlpValidator {\n }\n \n export class Slp {\n-    BITBOX: BITBOX;\n-    constructor(bitbox: BITBOX) {\n-        if(!bitbox)\n-            throw Error(\"Must provide BITBOX instance to class constructor.\")\n-        this.BITBOX = bitbox;\n-    }\n \n-    get lokadIdHex() { return \"534c5000\" }\n+    get lokadIdHex() { return \"534c5000\"; }\n \n-    static buildGenesisOpReturn(config: configBuildGenesisOpReturn, type = 0x01) {\n+    public static buildGenesisOpReturn(config: configBuildGenesisOpReturn, type = 0x01) {\n         let hash;\n-        try { \n-            hash = config.hash!.toString('hex')\n-        } catch (_) { hash = null }\n-        \n+        try {\n+            hash = config.hash!.toString(\"hex\");\n+        } catch (_) { hash = null; }\n+\n         return SlpTokenType1.buildGenesisOpReturn(\n             config.ticker,\n             config.name,\n             config.documentUri,\n             hash,\n             config.decimals,\n             config.batonVout,\n-            config.initialQuantity, \n-            type\n-        )\n+            config.initialQuantity,\n+            type,\n+        );\n     }\n \n-    static buildMintOpReturn(config: configBuildMintOpReturn, type = 0x01) {\n+    public static buildMintOpReturn(config: configBuildMintOpReturn, type = 0x01) {\n         return SlpTokenType1.buildMintOpReturn(\n             config.tokenIdHex,\n             config.batonVout,\n-            config.mintQuantity, \n-            type\n-        )\n+            config.mintQuantity,\n+            type,\n+        );\n     }\n \n-    static buildSendOpReturn(config: configBuildSendOpReturn, type = 0x01) {\n+    public static buildSendOpReturn(config: configBuildSendOpReturn, type = 0x01) {\n         return SlpTokenType1.buildSendOpReturn(\n             config.tokenIdHex,\n             config.outputQtyArray,\n-            type\n-        )\n+            type,\n+        );\n+    }\n+\n+    public static parseChunkToInt(intBytes: Buffer, minByteLen: number, maxByteLen: number, raise_on_Null = false) {\n+        // # Parse data as unsigned-big-endian encoded integer.\n+        // # For empty data different possibilities may occur:\n+        // #      minByteLen <= 0 : return 0\n+        // #      raise_on_Null == False and minByteLen > 0: return None\n+        // #      raise_on_Null == True and minByteLen > 0:  raise SlpInvalidOutputMessage\n+        if (intBytes.length >= minByteLen && intBytes.length <= maxByteLen) {\n+            return intBytes.readUIntBE(0, intBytes.length)\n+        }\n+        if (intBytes.length === 0 && !raise_on_Null) {\n+            return null;\n+        }\n+        throw Error(\"Field has wrong length\");\n+    }\n+\n+    public static preSendSlpJudgementCheck(txo: SlpAddressUtxoResult, tokenId: string) {\n+        if (txo.slpUtxoJudgement === undefined ||\n+            txo.slpUtxoJudgement === null ||\n+            txo.slpUtxoJudgement === SlpUtxoJudgement.UNKNOWN) {\n+            throw Error(\"There at least one input UTXO that does not have a proper SLP judgement\");\n+        }\n+        if (txo.slpUtxoJudgement === SlpUtxoJudgement.UNSUPPORTED_TYPE) {\n+            throw Error(\"There is at least one input UTXO that is an Unsupported SLP type.\");\n+        }\n+        if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON) {\n+            throw Error(\"There is at least one input UTXO that is a baton.  \\\n+                        You can only spend batons in a MINT transaction.\");\n+        }\n+        if (txo.slpTransactionDetails) {\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n+                if (!txo.slpUtxoJudgementAmount) {\n+                    throw Error(\"There is at least one input token that does not \\\n+                                have the 'slpUtxoJudgementAmount' property set.\");\n+                }\n+                if (txo.slpTransactionDetails.tokenIdHex !== tokenId) {\n+                    throw Error(\"There is at least one input UTXO that \\\n+                                is a different SLP token than the one specified.\");\n+                }\n+                return txo.slpTransactionDetails.tokenIdHex === tokenId;\n+            }\n+        }\n+        return false;\n+    }\n+    public BITBOX: BITBOX;\n+    constructor(bitbox: BITBOX) {\n+        if (!bitbox) {\n+            throw Error(\"Must provide BITBOX instance to class constructor.\")\n+        }\n+        this.BITBOX = bitbox;\n     }\n \n-    buildRawNFT1GenesisTx(config: configBuildRawNFT1GenesisTx, type = 0x01) {\n-        let config2: configBuildRawGenesisTx = {\n+    public buildRawNFT1GenesisTx(config: configBuildRawNFT1GenesisTx, type = 0x01) {\n+        const config2: configBuildRawGenesisTx = {\n             slpGenesisOpReturn: config.slpNFT1GenesisOpReturn,\n             mintReceiverAddress: config.mintReceiverAddress,\n             mintReceiverSatoshis: config.mintReceiverSatoshis,\n             batonReceiverAddress: null,\n             bchChangeReceiverAddress: config.bchChangeReceiverAddress,\n             input_utxos: config.input_utxos,\n-            allowed_token_burning: [ config.parentTokenIdHex ]\n-        }\n+            allowed_token_burning: [ config.parentTokenIdHex ],\n+        };\n \n         return this.buildRawGenesisTx(config2);\n     }\n \n-    buildRawGenesisTx(config: configBuildRawGenesisTx, type = 0x01) {\n+    public buildRawGenesisTx(config: configBuildRawGenesisTx, type = 0x01) {\n \n-        if(config.mintReceiverSatoshis === undefined)\n+        if (config.mintReceiverSatoshis === undefined) {\n             config.mintReceiverSatoshis = new BigNumber(546);\n+        }\n \n-        if(config.batonReceiverSatoshis === undefined)\n-            config.batonReceiverSatoshis = new BigNumber(546); \n+        if (config.batonReceiverSatoshis === undefined) {\n+            config.batonReceiverSatoshis = new BigNumber(546);\n+        } \n \n         // Make sure we're not spending any token or baton UTXOs\n-        config.input_utxos.forEach(txo => {\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.NOT_SLP)\n-                return\n-            if(config.allowed_token_burning && \n-                txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN && \n-                config.allowed_token_burning!.includes(txo.slpTransactionDetails.tokenIdHex)) {\n-                    return\n+        config.input_utxos.forEach((txo) => {\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.NOT_SLP) {\n+                return;\n             }\n-            else if(txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n-                throw Error(\"Input UTXOs included a token for another tokenId.\")\n+            if (config.allowed_token_burning &&\n+                txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN &&\n+                config.allowed_token_burning!.includes(txo.slpTransactionDetails.tokenIdHex)) {\n+                    return;\n+            } else if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n+                throw Error(\"Input UTXOs included a token for another tokenId.\");\n             }\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON)\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON) {\n                 throw Error(\"Cannot spend a minting baton.\")\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG || txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG)\n-                throw Error(\"Cannot currently spend tokens and baton with invalid DAGs.\")\n-            throw Error(\"Cannot spend utxo with no SLP judgement.\")\n-        })\n+            }\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG ||\n+                txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG) {\n+                throw Error(\"Cannot currently spend tokens and baton with invalid DAGs.\");\n+            }\n+            throw Error(\"Cannot spend utxo with no SLP judgement.\");\n+        });\n \n         // Check for slp formatted addresses\n-        if (!bchaddr.isSlpAddress(config.mintReceiverAddress))\n+        if (!bchaddr.isSlpAddress(config.mintReceiverAddress)) {\n             throw new Error(\"Not an SLP address.\");\n-        if (config.batonReceiverAddress && !bchaddr.isSlpAddress(config.batonReceiverAddress))\n+        }\n+        if (config.batonReceiverAddress && !bchaddr.isSlpAddress(config.batonReceiverAddress)) {\n             throw new Error(\"Not an SLP address.\");\n+        }\n \n         config.mintReceiverAddress = bchaddr.toCashAddress(config.mintReceiverAddress);\n \n-        let transactionBuilder = new this.BITBOX.TransactionBuilder(Utils.txnBuilderString(config.mintReceiverAddress));\n+        const transactionBuilder = new this.BITBOX.TransactionBuilder(\n+            Utils.txnBuilderString(config.mintReceiverAddress));\n         let satoshis = new BigNumber(0);\n         config.input_utxos.forEach(token_utxo => {\n             transactionBuilder.addInput(token_utxo.txid, token_utxo.vout);\n             satoshis = satoshis.plus(token_utxo.satoshis);\n         });\n \n-        let genesisCost = this.calculateGenesisCost(config.slpGenesisOpReturn.length, config.input_utxos.length, config.batonReceiverAddress, config.bchChangeReceiverAddress);\n-        let bchChangeAfterFeeSatoshis: BigNumber = satoshis.minus(genesisCost);\n+        const genesisCost = this.calculateGenesisCost(\n+            config.slpGenesisOpReturn.length,\n+            config.input_utxos.length,\n+            config.batonReceiverAddress,\n+            config.bchChangeReceiverAddress);\n+        const bchChangeAfterFeeSatoshis: BigNumber = satoshis.minus(genesisCost);\n \n         // Genesis OpReturn\n         transactionBuilder.addOutput(config.slpGenesisOpReturn, 0);\n \n         // Genesis token mint\n         transactionBuilder.addOutput(config.mintReceiverAddress, config.mintReceiverSatoshis.toNumber());\n-        //bchChangeAfterFeeSatoshis -= config.mintReceiverSatoshis;\n+        // bchChangeAfterFeeSatoshis -= config.mintReceiverSatoshis;\n \n         // Baton address (optional)\n-        let batonvout = this.parseSlpOutputScript(config.slpGenesisOpReturn).batonVout\n+        const batonvout = this.parseSlpOutputScript(config.slpGenesisOpReturn).batonVout;\n         if (config.batonReceiverAddress) {\n             config.batonReceiverAddress = bchaddr.toCashAddress(config.batonReceiverAddress);\n-            if(batonvout !== 2)\n-                throw Error(\"batonVout in transaction does not match OP_RETURN data.\")\n+            if (batonvout !== 2) {\n+                throw Error(\"batonVout in transaction does not match OP_RETURN data.\");\n+            }\n             transactionBuilder.addOutput(config.batonReceiverAddress, config.batonReceiverSatoshis.toNumber());\n-            //bchChangeAfterFeeSatoshis -= config.batonReceiverSatoshis;\n+            // bchChangeAfterFeeSatoshis -= config.batonReceiverSatoshis;\n         } else {\n             // Make sure that batonVout is set to null\n-            if(batonvout)\n-                throw Error(\"OP_RETURN has batonVout set to vout=\" + batonvout + \", but a baton receiver address was not provided.\")\n+            if (batonvout) {\n+                throw Error(\"OP_RETURN has batonVout set to vout=\" + batonvout + \", but a baton receiver address was not provided.\");\n+            }\n         }\n \n         // Change (optional)\n@@ -247,104 +309,116 @@ export class Slp {\n         // sign inputs\n         let i = 0;\n         for (const txo of config.input_utxos) {\n-            let paymentKeyPair = this.BITBOX.ECPair.fromWIF(txo.wif);\n-            transactionBuilder.sign(i, paymentKeyPair, undefined, transactionBuilder.hashTypes.SIGHASH_ALL, txo.satoshis.toNumber());\n+            const paymentKeyPair = this.BITBOX.ECPair.fromWIF(txo.wif);\n+            transactionBuilder.sign(i, paymentKeyPair, undefined,\n+                transactionBuilder.hashTypes.SIGHASH_ALL, txo.satoshis.toNumber());\n             i++;\n         }\n \n-        let tx = transactionBuilder.build().toHex();\n+        const tx = transactionBuilder.build().toHex();\n \n         // Check For Low Fee\n-        let outValue: number = transactionBuilder.transaction.tx.outs.reduce((v: number, o: any)=>v += o.value, 0);\n-        let inValue: BigNumber = config.input_utxos.reduce((v,i)=>v=v.plus(i.satoshis), new BigNumber(0))\n-        if(inValue.minus(outValue).isLessThanOrEqualTo(tx.length/2))\n-            throw Error(\"Transaction input BCH amount is too low.  Add more BCH inputs to fund this transaction.\")\n+        const outValue: number = transactionBuilder.transaction.tx.outs.reduce((v: number, o: any) => v += o.value, 0);\n+        const inValue: BigNumber = config.input_utxos.reduce((v, i) => v = v.plus(i.satoshis), new BigNumber(0));\n+        if (inValue.minus(outValue).isLessThanOrEqualTo(tx.length / 2)) {\n+            throw Error(\"Transaction input BCH amount is too low.  Add more BCH inputs to fund this transaction.\");\n+        }\n \n         // TODO: Check for fee too large or send leftover to target address\n \n         return tx;\n     }\n \n-    buildRawSendTx(config: configBuildRawSendTx, type = 0x01) {\n+    public buildRawSendTx(config: configBuildRawSendTx, type = 0x01) {\n \n         // Check proper address formats are given\n \n-        config.tokenReceiverAddressArray.forEach(outputAddress => {\n-            if (!bchaddr.isSlpAddress(outputAddress))\n+        config.tokenReceiverAddressArray.forEach((outputAddress) => {\n+            if (!bchaddr.isSlpAddress(outputAddress)) {\n                 throw new Error(\"Token receiver address not in SlpAddr format.\");\n+            }\n         });\n \n-        if (!bchaddr.isSlpAddress(config.bchChangeReceiverAddress))\n+        if (!bchaddr.isSlpAddress(config.bchChangeReceiverAddress)) {\n             throw new Error(\"Token/BCH change receiver address is not in SLP format.\");\n+        }\n \n         // Parse the SLP SEND OP_RETURN message\n \n         const sendMsg = this.parseSlpOutputScript(config.slpSendOpReturn);\n-        \n+\n         // Make sure we're not spending inputs from any other token or baton\n \n         let tokenInputQty = new BigNumber(0);\n-        config.input_token_utxos.forEach(txo => {\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.NOT_SLP)\n-                return\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n-                if(txo.slpTransactionDetails.tokenIdHex !== sendMsg.tokenIdHex)\n-                    throw Error(\"Input UTXOs included a token for another tokenId.\")\n+        config.input_token_utxos.forEach((txo) => {\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.NOT_SLP) {\n+                return;\n+            }\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n+                if (txo.slpTransactionDetails.tokenIdHex !== sendMsg.tokenIdHex) {\n+                    throw Error(\"Input UTXOs included a token for another tokenId.\");\n+                }\n                 tokenInputQty = tokenInputQty.plus(txo.slpUtxoJudgementAmount);\n-                return\n+                return;\n             }\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON)\n-                throw Error(\"Cannot spend a minting baton.\")\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG || \n-                txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG)\n-                throw Error(\"Cannot currently spend UTXOs with invalid DAGs.\")\n-            throw Error(\"Cannot spend utxo with no SLP judgement.\")\n-        })\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON) {\n+                throw Error(\"Cannot spend a minting baton.\");\n+            }\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG ||\n+                txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG) {\n+                    throw Error(\"Cannot currently spend UTXOs with invalid DAGs.\");\n+                }\n+            throw Error(\"Cannot spend utxo with no SLP judgement.\");\n+        });\n \n-        // Make sure the number of output receivers \n+        // Make sure the number of output receivers\n         // matches the outputs in the OP_RETURN message.\n \n-        let chgAddr = config.bchChangeReceiverAddress ? 1 : 0;\n-        if(!sendMsg.sendOutputs)\n+        const chgAddr = config.bchChangeReceiverAddress ? 1 : 0;\n+        if (!sendMsg.sendOutputs) {\n             throw Error(\"OP_RETURN contains no SLP send outputs.\");\n-        if(config.tokenReceiverAddressArray.length + chgAddr !== sendMsg.sendOutputs.length)\n-            throw Error(\"Number of token receivers in config does not match the OP_RETURN outputs\")\n+        }\n+        if (config.tokenReceiverAddressArray.length + chgAddr !== sendMsg.sendOutputs.length) {\n+            throw Error(\"Number of token receivers in config does not match the OP_RETURN outputs\");\n+        }\n \n         // Make sure token inputs == token outputs\n \n-        let outputTokenQty = sendMsg.sendOutputs.reduce((v,o)=>v=v.plus(o), new BigNumber(0));\n-        if(!tokenInputQty.isEqualTo(outputTokenQty))\n-            throw Error(\"Token input quantity does not match token outputs.\")\n+        const outputTokenQty = sendMsg.sendOutputs.reduce((v, o) => v = v.plus(o), new BigNumber(0));\n+        if (!tokenInputQty.isEqualTo(outputTokenQty)) {\n+            throw Error(\"Token input quantity does not match token outputs.\");\n+        }\n \n         // Create a transaction builder\n \n-        let transactionBuilder = new this.BITBOX.TransactionBuilder(\n+        const transactionBuilder = new this.BITBOX.TransactionBuilder(\n             Utils.txnBuilderString(config.tokenReceiverAddressArray[0]));\n     //  let sequence = 0xffffffff - 1;\n     //  let locktime = 0;\n \n         // Calculate the total input amount & add all inputs to the transaction\n-        \n-        let inputSatoshis = config.input_token_utxos.reduce((t, i) => t.plus(i.satoshis), new BigNumber(0));\n+\n+        const inputSatoshis = config.input_token_utxos.reduce((t, i) => t.plus(i.satoshis), new BigNumber(0));\n         config.input_token_utxos.forEach(\n-            token_utxo => transactionBuilder.addInput(token_utxo.txid, token_utxo.vout)); //, sequence);\n+            token_utxo => transactionBuilder.addInput(token_utxo.txid, token_utxo.vout)); // , sequence);\n \n         // Calculate the amount of outputs set aside for special BCH-only outputs for fee calculation\n \n-        let bchOnlyCount = config.requiredNonTokenOutputs ? config.requiredNonTokenOutputs.length : 0;\n-        let bcOnlyOutputSatoshis = config.requiredNonTokenOutputs ? config.requiredNonTokenOutputs.reduce((t, v)=> t+=v.satoshis, 0): 0\n+        const bchOnlyCount = config.requiredNonTokenOutputs ? config.requiredNonTokenOutputs.length : 0;\n+        const bcOnlyOutputSatoshis = config.requiredNonTokenOutputs ?\n+                                        config.requiredNonTokenOutputs.reduce((t, v) => t += v.satoshis, 0) : 0;\n \n         // Calculate mining fee cost\n \n-        let sendCost = this.calculateSendCost(\n-                            config.slpSendOpReturn.length, \n-                            config.input_token_utxos.length, \n-                            config.tokenReceiverAddressArray.length + bchOnlyCount, \n+        const sendCost = this.calculateSendCost(\n+                            config.slpSendOpReturn.length,\n+                            config.input_token_utxos.length,\n+                            config.tokenReceiverAddressArray.length + bchOnlyCount,\n                             config.bchChangeReceiverAddress);\n \n         // Compute BCH change amount\n \n-        let bchChangeAfterFeeSatoshis = \n+        const bchChangeAfterFeeSatoshis =\n             inputSatoshis\n                 .minus(sendCost)\n                 .minus(bcOnlyOutputSatoshis)\n@@ -360,15 +434,15 @@ export class Slp {\n         config.tokenReceiverAddressArray.forEach((outputAddress) => {\n             outputAddress = bchaddr.toCashAddress(outputAddress);\n             transactionBuilder.addOutput(outputAddress, 546);\n-        })\n+        });\n \n         // Add BCH-only outputs\n \n-        if(config.requiredNonTokenOutputs && config.requiredNonTokenOutputs.length > 0) {\n+        if (config.requiredNonTokenOutputs && config.requiredNonTokenOutputs.length > 0) {\n             config.requiredNonTokenOutputs.forEach((output) => {\n-                let outputAddress = bchaddr.toCashAddress(output.receiverAddress);\n+                const outputAddress = bchaddr.toCashAddress(output.receiverAddress);\n                 transactionBuilder.addOutput(outputAddress, output.satoshis);\n-            })\n+            });\n         }\n \n         // Add change, if any\n@@ -378,53 +452,58 @@ export class Slp {\n             transactionBuilder.addOutput(config.bchChangeReceiverAddress, bchChangeAfterFeeSatoshis.toNumber());\n         }\n \n-        // Sign txn and add sig to p2pkh input for convenience if wif is provided, \n+        // Sign txn and add sig to p2pkh input for convenience if wif is provided,\n         // otherwise skip signing.\n \n         let i = 0;\n         let isComplete = true;\n         for (const txo of config.input_token_utxos) {\n-            if(txo.wif) {\n-                let paymentKeyPair = this.BITBOX.ECPair.fromWIF(txo.wif);\n-                transactionBuilder.sign(i, paymentKeyPair, undefined, transactionBuilder.hashTypes.SIGHASH_ALL, txo.satoshis.toNumber());\n-            } \n-            else\n+            if (txo.wif) {\n+                const paymentKeyPair = this.BITBOX.ECPair.fromWIF(txo.wif);\n+                transactionBuilder.sign(i, paymentKeyPair, undefined,\n+                    transactionBuilder.hashTypes.SIGHASH_ALL, txo.satoshis.toNumber());\n+            }\n+            else {\n                 isComplete = false;\n+            }\n             i++;\n         }\n \n         // Build the transaction to hex and return\n         // warn user if the transaction was not fully signed\n \n         let hex: string;\n-        if(!isComplete) {\n+        if (!isComplete) {\n             console.log(\"WARNING: Transaction signing is not complete.\");\n-            let tx = transactionBuilder.transaction.buildIncomplete();\n+            const tx = transactionBuilder.transaction.buildIncomplete();\n         //  tx.locktime = locktime;\n             hex = tx.toHex();\n-        } \n-        else\n+        } else {\n             hex = transactionBuilder.build().toHex();\n+        }\n \n         // Check For Low Fee\n \n-        let outValue: number = transactionBuilder.transaction.tx.outs.reduce((v: number,o: any)=>v+=o.value, 0);\n-        let inValue: BigNumber = config.input_token_utxos.reduce((v,i)=>v=v.plus(i.satoshis), new BigNumber(0))\n-        if(inValue.minus(outValue).isLessThanOrEqualTo(hex.length/2))\n+        const outValue: number = transactionBuilder.transaction.tx.outs.reduce((v: number, o: any) => v += o.value, 0);\n+        const inValue: BigNumber = config.input_token_utxos.reduce((v, i) => v = v.plus(i.satoshis), new BigNumber(0));\n+        if (inValue.minus(outValue).isLessThanOrEqualTo(hex.length / 2)) {\n             throw Error(\"Transaction input BCH amount is too low.  Add more BCH inputs to fund this transaction.\");\n+        }\n \n         return hex;\n     }\n \n-    buildRawMintTx(config: configBuildRawMintTx, type = 0x01) {\n+    public buildRawMintTx(config: configBuildRawMintTx, type = 0x01) {\n \n-        let mintMsg = this.parseSlpOutputScript(config.slpMintOpReturn);\n+        const mintMsg = this.parseSlpOutputScript(config.slpMintOpReturn);\n \n-        if(config.mintReceiverSatoshis === undefined)\n+        if (config.mintReceiverSatoshis === undefined) {\n             config.mintReceiverSatoshis = new BigNumber(546);\n+        }\n \n-        if(config.batonReceiverSatoshis === undefined)\n-            config.batonReceiverSatoshis = new BigNumber(546); \n+        if (config.batonReceiverSatoshis === undefined) {\n+            config.batonReceiverSatoshis = new BigNumber(546);\n+        }\n \n         // Check for slp formatted addresses\n         if (!bchaddr.isSlpAddress(config.mintReceiverAddress)) {\n@@ -434,53 +513,63 @@ export class Slp {\n             throw new Error(\"Baton receiver address not in SLP format.\");\n         }\n         config.mintReceiverAddress = bchaddr.toCashAddress(config.mintReceiverAddress);\n-        if(config.batonReceiverAddress)\n+        if (config.batonReceiverAddress) {\n             config.batonReceiverAddress = bchaddr.toCashAddress(config.batonReceiverAddress);\n+        }\n \n         // Make sure inputs don't include spending any tokens or batons for other tokenIds\n-        config.input_baton_utxos.forEach(txo => {\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.NOT_SLP)\n-                return\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN)\n-                throw Error(\"Input UTXOs should not include any tokens.\")\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON) {\n-                if(txo.slpTransactionDetails.tokenIdHex !== mintMsg.tokenIdHex)\n-                    throw Error(\"Cannot spend a minting baton.\")\n-                return\n-            }\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG || txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG)\n-                throw Error(\"Cannot currently spend UTXOs with invalid DAGs.\")\n-            throw Error(\"Cannot spend utxo with no SLP judgement.\")\n-        })\n+        config.input_baton_utxos.forEach((txo) => {\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.NOT_SLP) {\n+                return;\n+            }\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n+                throw Error(\"Input UTXOs should not include any tokens.\");\n+            }\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON) {\n+                if (txo.slpTransactionDetails.tokenIdHex !== mintMsg.tokenIdHex) {\n+                    throw Error(\"Cannot spend a minting baton.\");\n+                }\n+                return;\n+            }\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG ||\n+                txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG) {\n+                throw Error(\"Cannot currently spend UTXOs with invalid DAGs.\");\n+            }\n+            throw Error(\"Cannot spend utxo with no SLP judgement.\");\n+        });\n \n         // Make sure inputs include the baton for this tokenId\n-        if(!config.input_baton_utxos.find(o => o.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON))\n-            Error(\"There is no baton included with the input UTXOs.\")\n+        if (!config.input_baton_utxos.find((o) => o.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON)) {\n+            Error(\"There is no baton included with the input UTXOs.\");\n+        }\n \n-        let transactionBuilder = new this.BITBOX.TransactionBuilder(Utils.txnBuilderString(config.mintReceiverAddress));\n+        const transactionBuilder = new this.BITBOX.TransactionBuilder(\n+            Utils.txnBuilderString(config.mintReceiverAddress));\n         let satoshis = new BigNumber(0);\n         config.input_baton_utxos.forEach(baton_utxo => {\n             transactionBuilder.addInput(baton_utxo.txid, baton_utxo.vout);\n             satoshis = satoshis.plus(baton_utxo.satoshis);\n         });\n \n-        let mintCost = this.calculateGenesisCost(config.slpMintOpReturn.length, config.input_baton_utxos.length, config.batonReceiverAddress, config.bchChangeReceiverAddress);\n-        let bchChangeAfterFeeSatoshis = satoshis.minus(mintCost);\n+        const mintCost = this.calculateGenesisCost(config.slpMintOpReturn.length, config.input_baton_utxos.length,\n+            config.batonReceiverAddress, config.bchChangeReceiverAddress);\n+        const bchChangeAfterFeeSatoshis = satoshis.minus(mintCost);\n \n         // Mint OpReturn\n         transactionBuilder.addOutput(config.slpMintOpReturn, 0);\n \n         // Mint token mint\n         transactionBuilder.addOutput(config.mintReceiverAddress, config.mintReceiverSatoshis.toNumber());\n-        //bchChangeAfterFeeSatoshis -= config.mintReceiverSatoshis;\n+        // bchChangeAfterFeeSatoshis -= config.mintReceiverSatoshis;\n \n         // Baton address (optional)\n         if (config.batonReceiverAddress !== null) {\n             config.batonReceiverAddress = bchaddr.toCashAddress(config.batonReceiverAddress);\n-            if(this.parseSlpOutputScript(config.slpMintOpReturn).batonVout !== 2)\n-                throw Error(\"batonVout in transaction does not match OP_RETURN data.\")\n+            if (this.parseSlpOutputScript(config.slpMintOpReturn).batonVout !== 2) {\n+                throw Error(\"batonVout in transaction does not match OP_RETURN data.\");\n+            }\n             transactionBuilder.addOutput(config.batonReceiverAddress, config.batonReceiverSatoshis.toNumber());\n-            //bchChangeAfterFeeSatoshis -= config.batonReceiverSatoshis;\n+            // bchChangeAfterFeeSatoshis -= config.batonReceiverSatoshis;\n         }\n \n         // Change (optional)\n@@ -492,92 +581,107 @@ export class Slp {\n         // sign inputs\n         let i = 0;\n         for (const txo of config.input_baton_utxos) {\n-            let paymentKeyPair = this.BITBOX.ECPair.fromWIF(txo.wif);\n-            transactionBuilder.sign(i, paymentKeyPair, undefined, transactionBuilder.hashTypes.SIGHASH_ALL, txo.satoshis.toNumber());\n+            const paymentKeyPair = this.BITBOX.ECPair.fromWIF(txo.wif);\n+            transactionBuilder.sign(i, paymentKeyPair, undefined,\n+                transactionBuilder.hashTypes.SIGHASH_ALL, txo.satoshis.toNumber());\n             i++;\n         }\n \n-        let tx = transactionBuilder.build().toHex();\n+        const tx = transactionBuilder.build().toHex();\n \n         // Check For Low Fee\n-        let outValue: number = transactionBuilder.transaction.tx.outs.reduce((v: number,o: any)  => v += o.value, 0);\n-        let inValue: BigNumber = config.input_baton_utxos.reduce((v, i)=> v = v.plus(i.satoshis), new BigNumber(0))\n-        if(inValue.minus(outValue).isLessThanOrEqualTo(tx.length / 2))\n-            throw Error(\"Transaction input BCH amount is too low.  Add more BCH inputs to fund this transaction.\")\n+        const outValue: number = transactionBuilder.transaction.tx.outs.reduce((v: number, o: any)  => v += o.value, 0);\n+        const inValue: BigNumber = config.input_baton_utxos.reduce((v, i) => v = v.plus(i.satoshis), new BigNumber(0));\n+        if (inValue.minus(outValue).isLessThanOrEqualTo(tx.length / 2)) {\n+            throw Error(\"Transaction input BCH amount is too low.  Add more BCH inputs to fund this transaction.\");\n+        }\n \n         // TODO: Check for fee too large or send leftover to target address\n \n         return tx;\n     }\n \n-    buildRawBurnTx(burnAmount: BigNumber, config: configBuildRawBurnTx, type = 0x01) {\n+    public buildRawBurnTx(burnAmount: BigNumber, config: configBuildRawBurnTx, type = 0x01) {\n         let sendMsg: SlpTransactionDetails;\n \n-        if(config.slpBurnOpReturn) {\n+        if (config.slpBurnOpReturn) {\n             sendMsg = this.parseSlpOutputScript(config.slpBurnOpReturn);\n-            if(!sendMsg.sendOutputs)\n+            if (!sendMsg.sendOutputs) {\n                 throw Error(\"OP_RETURN contains no SLP send outputs for token change.\");\n-    \n-            if(sendMsg.sendOutputs!.length !== 2)\n+            }\n+\n+            if (sendMsg.sendOutputs!.length !== 2) {\n                 throw Error(\"Burn transaction must have only a single change receiver for token change.\");\n+            }\n \n-            if(sendMsg.sendOutputs!.length === 2 && !config.bchChangeReceiverAddress)\n+            if (sendMsg.sendOutputs!.length === 2 && !config.bchChangeReceiverAddress) {\n                 throw new Error(\"Token/BCH change address is not provided.\");\n+            }\n \n-            if (!bchaddr.isSlpAddress(config.bchChangeReceiverAddress))\n+            if (!bchaddr.isSlpAddress(config.bchChangeReceiverAddress)) {\n                 throw new Error(\"Token/BCH change receiver address is not in SLP format.\");\n-        } else if(!config.tokenIdHex)\n+            }\n+        } else if (!config.tokenIdHex) {\n             console.log(\"[WARNING!] Include 'config.tokenIdHex' in order to accidental token burning.  To supress this log message set 'config.tokenIdHex' to an empty string.\")\n+ }\n \n         // Make sure not spending any other tokens or baton UTXOs\n         let tokenInputQty = new BigNumber(0);\n-        config.input_token_utxos.forEach(txo => {\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.NOT_SLP)\n-                return\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n-                if(sendMsg) {\n-                    if(txo.slpTransactionDetails.tokenIdHex !== sendMsg.tokenIdHex)\n-                        throw Error(\"Input UTXOs included a token for another tokenId.\")\n+        config.input_token_utxos.forEach((txo) => {\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.NOT_SLP) {\n+                return;\n+            }\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n+                if (sendMsg) {\n+                    if (txo.slpTransactionDetails.tokenIdHex !== sendMsg.tokenIdHex) {\n+                        throw Error(\"Input UTXOs included a token for another tokenId.\");\n+                    }\n                 } else {\n-                    if(txo.slpTransactionDetails.tokenIdHex !== config.tokenIdHex)\n-                        throw Error(\"Input UTXOs included a token for another tokenId.\")\n+                    if (txo.slpTransactionDetails.tokenIdHex !== config.tokenIdHex) {\n+                        throw Error(\"Input UTXOs included a token for another tokenId.\");\n+                    }\n                 }\n                 tokenInputQty = tokenInputQty.plus(txo.slpUtxoJudgementAmount);\n-                return\n+                return;\n             }\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON)\n-                throw Error(\"Cannot spend a minting baton.\")\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG || txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG)\n-                throw Error(\"Cannot currently spend UTXOs with invalid DAGs.\")\n-            throw Error(\"Cannot spend utxo with no SLP judgement.\")\n-        })\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON) {\n+                throw Error(\"Cannot spend a minting baton.\");\n+            }\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG || txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG) {\n+                throw Error(\"Cannot currently spend UTXOs with invalid DAGs.\");\n+            }\n+            throw Error(\"Cannot spend utxo with no SLP judgement.\");\n+        });\n \n         // Make sure the number of output receivers matches the outputs in the OP_RETURN message.\n-        if(config.slpBurnOpReturn) {\n-            //let chgAddr = config.bchChangeReceiverAddress ? 1 : 0;\n+        if (config.slpBurnOpReturn) {\n+            // let chgAddr = config.bchChangeReceiverAddress ? 1 : 0;\n             // Make sure token inputs equals token outputs in OP_RETURN\n-            let outputTokenQty = sendMsg!.sendOutputs!.reduce((v,o) => v=v.plus(o), new BigNumber(0));\n-            \n-            if(!tokenInputQty.minus(outputTokenQty).isEqualTo(burnAmount))\n-                throw Error(\"Token burn output quantity must be less than token input quantity.\")\n+            const outputTokenQty = sendMsg!.sendOutputs!.reduce((v, o) => v = v.plus(o), new BigNumber(0));\n+\n+            if (!tokenInputQty.minus(outputTokenQty).isEqualTo(burnAmount)) {\n+                throw Error(\"Token burn output quantity must be less than token input quantity.\");\n+            }\n         }\n \n-        let transactionBuilder = new this.BITBOX.TransactionBuilder(Utils.txnBuilderString(config.bchChangeReceiverAddress));\n+        const transactionBuilder = new this.BITBOX.TransactionBuilder(\n+            Utils.txnBuilderString(config.bchChangeReceiverAddress));\n         let inputSatoshis = new BigNumber(0);\n         config.input_token_utxos.forEach(token_utxo => {\n             transactionBuilder.addInput(token_utxo.txid, token_utxo.vout);\n             inputSatoshis = inputSatoshis.plus(token_utxo.satoshis);\n         });\n \n-        let msgLength = config.slpBurnOpReturn ? config.slpBurnOpReturn.length : 0;\n-        let sendCost = this.calculateSendCost(msgLength, config.input_token_utxos.length, msgLength > 0 ? 1 : 0, config.bchChangeReceiverAddress);\n-        let bchChangeAfterFeeSatoshis = inputSatoshis.minus(sendCost);\n+        const msgLength = config.slpBurnOpReturn ? config.slpBurnOpReturn.length : 0;\n+        const sendCost = this.calculateSendCost(msgLength,\n+            config.input_token_utxos.length, msgLength > 0 ? 1 : 0, config.bchChangeReceiverAddress);\n+        const bchChangeAfterFeeSatoshis = inputSatoshis.minus(sendCost);\n \n         // Burn change OpReturn / token change output\n-        if(config.slpBurnOpReturn) {\n+        if (config.slpBurnOpReturn) {\n             transactionBuilder.addOutput(config.slpBurnOpReturn!, 0);\n \n-            let outputAddress = bchaddr.toCashAddress(config.bchChangeReceiverAddress);\n+            const outputAddress = bchaddr.toCashAddress(config.bchChangeReceiverAddress);\n             transactionBuilder.addOutput(outputAddress, 546);\n         }\n \n@@ -590,57 +694,67 @@ export class Slp {\n         // sign inputs\n         let i = 0;\n         for (const txo of config.input_token_utxos) {\n-            let paymentKeyPair = this.BITBOX.ECPair.fromWIF(txo.wif);\n-            transactionBuilder.sign(i, paymentKeyPair, undefined, transactionBuilder.hashTypes.SIGHASH_ALL, txo.satoshis.toNumber());\n+            const paymentKeyPair = this.BITBOX.ECPair.fromWIF(txo.wif);\n+            transactionBuilder.sign(i, paymentKeyPair, undefined,\n+                transactionBuilder.hashTypes.SIGHASH_ALL, txo.satoshis.toNumber());\n             i++;\n         }\n \n-        let tx = transactionBuilder.build().toHex();\n+        const tx = transactionBuilder.build().toHex();\n \n         // Check For Low Fee\n-        let outValue: number = transactionBuilder.transaction.tx.outs.reduce((v: number,o: any) => v+=o.value, 0);\n-        let inValue: BigNumber = config.input_token_utxos.reduce((v,i) => v=v.plus(i.satoshis), new BigNumber(0))\n-        if(inValue.minus(outValue).isLessThanOrEqualTo(tx.length/2))\n-            throw Error(\"Transaction input BCH amount is too low.  Add more BCH inputs to fund this transaction.\")\n+        const outValue: number = transactionBuilder.transaction.tx.outs.reduce((v: number, o: any) => v += o.value, 0);\n+        const inValue: BigNumber = config.input_token_utxos.reduce((v, i) => v = v.plus(i.satoshis), new BigNumber(0));\n+        if (inValue.minus(outValue).isLessThanOrEqualTo(tx.length / 2)) {\n+            throw Error(\"Transaction input BCH amount is too low.  Add more BCH inputs to fund this transaction.\");\n+        }\n \n         return tx;\n     }\n \n-    buildRawBchOnlyTx(config: configBuildBchSendTx) {\n-        config.bchReceiverAddressArray.forEach(outputAddress => {\n-            if (!bchaddr.isSlpAddress(outputAddress) && !bchaddr.isCashAddress(outputAddress))\n+    public buildRawBchOnlyTx(config: configBuildBchSendTx) {\n+        config.bchReceiverAddressArray.forEach((outputAddress) => {\n+            if (!bchaddr.isSlpAddress(outputAddress) && !bchaddr.isCashAddress(outputAddress)) {\n                 throw new Error(\"Token receiver address not in SlpAddr or CashAddr format.\");\n+            }\n         });\n \n         // Make sure not spending ANY tokens or baton UTXOs\n-        config.input_token_utxos.forEach(txo => {\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.NOT_SLP)\n-                return\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n+        config.input_token_utxos.forEach((txo) => {\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.NOT_SLP) {\n+                return;\n+            }\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n                 throw Error(\"Input UTXOs included a token for another tokenId.\");\n             }\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON)\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON) {\n                 throw Error(\"Cannot spend a minting baton.\");\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG || txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG)\n+            }\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG ||\n+                txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG) {\n                 throw Error(\"Cannot currently spend UTXOs with invalid DAGs.\");\n+            }\n             throw Error(\"Cannot spend utxo with no SLP judgement.\");\n-        })\n+        });\n \n-        let transactionBuilder = new this.BITBOX.TransactionBuilder(Utils.txnBuilderString(config.bchReceiverAddressArray[0]));\n+        const transactionBuilder = new this.BITBOX.TransactionBuilder(\n+            Utils.txnBuilderString(config.bchReceiverAddressArray[0]));\n         let inputSatoshis = new BigNumber(0);\n         config.input_token_utxos.forEach(token_utxo => {\n             transactionBuilder.addInput(token_utxo.txid, token_utxo.vout);\n             inputSatoshis = inputSatoshis.plus(token_utxo.satoshis);\n         });\n \n-        let sendCost = this.calculateSendCost(0, config.input_token_utxos.length, config.bchReceiverAddressArray.length, config.bchChangeReceiverAddress, 1, false);\n-        let bchChangeAfterFeeSatoshis = inputSatoshis.minus(sendCost).minus(config.bchReceiverSatoshiAmounts.reduce((t, v) => t = t.plus(v), new BigNumber(0)));\n+        const sendCost = this.calculateSendCost(0, config.input_token_utxos.length,\n+            config.bchReceiverAddressArray.length, config.bchChangeReceiverAddress, 1, false);\n+        const bchChangeAfterFeeSatoshis = inputSatoshis.minus(sendCost)\n+            .minus(config.bchReceiverSatoshiAmounts.reduce((t, v) => t = t.plus(v), new BigNumber(0)));\n \n         // BCH outputs\n         config.bchReceiverAddressArray.forEach((outputAddress, i) => {\n             outputAddress = bchaddr.toCashAddress(outputAddress);\n             transactionBuilder.addOutput(outputAddress, Math.round(config.bchReceiverSatoshiAmounts[i].toNumber()));\n-        })\n+        });\n \n         // Change\n         if (bchChangeAfterFeeSatoshis.isGreaterThan(new BigNumber(546))) {\n@@ -651,335 +765,351 @@ export class Slp {\n         // sign inputs\n         let i = 0;\n         for (const txo of config.input_token_utxos) {\n-            let paymentKeyPair = this.BITBOX.ECPair.fromWIF(txo.wif);\n-            transactionBuilder.sign(i, paymentKeyPair, undefined, transactionBuilder.hashTypes.SIGHASH_ALL, txo.satoshis.toNumber());\n+            const paymentKeyPair = this.BITBOX.ECPair.fromWIF(txo.wif);\n+            transactionBuilder.sign(i, paymentKeyPair, undefined,\n+                transactionBuilder.hashTypes.SIGHASH_ALL, txo.satoshis.toNumber());\n             i++;\n         }\n \n-        let tx = transactionBuilder.build().toHex();\n+        const tx = transactionBuilder.build().toHex();\n \n         // Check For Low Fee\n-        let outValue: number = transactionBuilder.transaction.tx.outs.reduce((v: number,o: any)=>v+=o.value, 0);\n-        let inValue: BigNumber = config.input_token_utxos.reduce((v,i)=>v=v.plus(i.satoshis), new BigNumber(0))\n-        if(inValue.minus(outValue).isLessThanOrEqualTo(tx.length/2))\n-            throw Error(\"Transaction input BCH amount is too low.  Add more BCH inputs to fund this transaction.\")\n+        const outValue: number = transactionBuilder.transaction.tx.outs.reduce((v: number, o: any) => v += o.value, 0);\n+        const inValue: BigNumber = config.input_token_utxos.reduce((v, i) => v = v.plus(i.satoshis), new BigNumber(0));\n+        if (inValue.minus(outValue).isLessThanOrEqualTo(tx.length / 2)) {\n+            throw Error(\"Transaction input BCH amount is too low.  Add more BCH inputs to fund this transaction.\");\n+        }\n \n         // TODO: Check for fee too large or send leftover to target address\n \n         return tx;\n     }\n \n-    parseSlpOutputScript(outputScript: Buffer): SlpTransactionDetails {\n-        let slpMsg = <SlpTransactionDetails>{};\n-        let chunks: (Buffer|null)[];\n+    public parseSlpOutputScript(outputScript: Buffer): SlpTransactionDetails {\n+        const slpMsg =  {} as SlpTransactionDetails;\n+        let chunks: Array<Buffer|null>;\n         try {\n             chunks = this.parseOpReturnToChunks(outputScript);\n-        } catch(e) {\n-            throw Error('Bad OP_RETURN');\n-        }\n-        if(chunks.length === 0)\n-            throw Error('Empty OP_RETURN');\n-        if(!chunks[0])\n-            throw Error(\"Not SLP\")\n-        if(!chunks[0]!.equals(Buffer.from(this.lokadIdHex, 'hex')))\n-            throw Error('Not SLP');\n-        if(chunks.length === 1)\n+        } catch (e) {\n+            throw Error(\"Bad OP_RETURN\");\n+        }\n+        if (chunks.length === 0) {\n+            throw Error(\"Empty OP_RETURN\");\n+        }\n+        if (!chunks[0]) {\n+            throw Error(\"Not SLP\");\n+        }\n+        if (!chunks[0]!.equals(Buffer.from(this.lokadIdHex, \"hex\"))) {\n+            throw Error(\"Not SLP\");\n+        }\n+        if (chunks.length === 1) {\n             throw Error(\"Missing token versionType\");\n+        }\n         // # check if the token version is supported\n-        if(!chunks[1])\n-            throw Error(\"Bad versionType buffer\")\n-        slpMsg.versionType = <SlpVersionType>Slp.parseChunkToInt(chunks[1]!, 1, 2, true);\n-        let supportedTypes = [   \n-                SlpVersionType.TokenVersionType1, \n+        if (!chunks[1]) {\n+            throw Error(\"Bad versionType buffer\");\n+        }\n+        slpMsg.versionType = ( Slp.parseChunkToInt(chunks[1]!, 1, 2, true) as SlpVersionType);\n+        const supportedTypes = [\n+                SlpVersionType.TokenVersionType1,\n                 SlpVersionType.TokenVersionType1_NFT_Parent,\n                 SlpVersionType.TokenVersionType1_NFT_Child ];\n-        if(!supportedTypes.includes(slpMsg.versionType))\n-            throw Error('Unsupported token type: ' + slpMsg.versionType);\n-        if(chunks.length === 2)\n-            throw Error('Missing SLP transaction type');\n+        if (!supportedTypes.includes(slpMsg.versionType)) {\n+            throw Error(\"Unsupported token type: \" + slpMsg.versionType);\n+        }\n+        if (chunks.length === 2) {\n+            throw Error(\"Missing SLP transaction type\");\n+        }\n         try {\n-            let msgType: string = chunks[2]!.toString('ascii')\n-            slpMsg.transactionType = SlpTransactionType[msgType as keyof typeof SlpTransactionType]\n-        } catch(_){\n-            throw Error('Bad transaction type');\n-        }\n-        if(slpMsg.transactionType === SlpTransactionType.GENESIS) {\n-            if(chunks.length !== 10)\n-                throw Error('GENESIS with incorrect number of parameters');\n-            slpMsg.symbol = chunks[3] ? chunks[3]!.toString('utf8') : '';\n-            slpMsg.name = chunks[4] ? chunks[4]!.toString('utf8') : '';\n-            slpMsg.documentUri = chunks[5] ? chunks[5]!.toString('utf8') : '';\n+            const msgType: string = chunks[2]!.toString(\"latin1\");\n+            slpMsg.transactionType = SlpTransactionType[msgType as keyof typeof SlpTransactionType];\n+        } catch (_) {\n+            throw Error(\"Bad transaction type\");\n+        }\n+        if (slpMsg.transactionType === SlpTransactionType.GENESIS) {\n+            if (chunks.length !== 10) {\n+                throw Error(\"GENESIS with incorrect number of parameters\");\n+            }\n+            slpMsg.symbol = chunks[3] ? chunks[3]!.toString(\"utf8\") : \"\";\n+            slpMsg.name = chunks[4] ? chunks[4]!.toString(\"utf8\") : \"\";\n+            slpMsg.documentUri = chunks[5] ? chunks[5]!.toString(\"utf8\") : \"\";\n             slpMsg.documentSha256 = chunks[6] ? chunks[6] : null;\n-            if(slpMsg.documentSha256) {\n-                if(slpMsg.documentSha256.length !== 0 && slpMsg.documentSha256.length !== 32)\n+            if (slpMsg.documentSha256) {\n+                if (slpMsg.documentSha256.length !== 0 && slpMsg.documentSha256.length !== 32) {\n                     throw Error('Token document hash is incorrect length');\n+                }\n+            }\n+            if (!chunks[7]) {\n+                throw Error(\"Bad decimals buffer\");\n+            }\n+            slpMsg.decimals = ( Slp.parseChunkToInt(chunks[7]!, 1, 1, true) as number);\n+            if (slpMsg.versionType === 0x41 && slpMsg.decimals !== 0) {\n+                throw Error(\"NFT1 child token must have divisibility set to 0 decimal places.\");\n+            }\n+            if (slpMsg.decimals > 9) {\n+                throw Error(\"Too many decimals\");\n             }\n-            if(!chunks[7])\n-                throw Error(\"Bad decimals buffer\")\n-            slpMsg.decimals = <number>Slp.parseChunkToInt(chunks[7]!, 1, 1, true);\n-            if(slpMsg.versionType === 0x41 && slpMsg.decimals !== 0)\n-                throw Error('NFT1 child token must have divisibility set to 0 decimal places.')\n-            if(slpMsg.decimals > 9)\n-                throw Error('Too many decimals')\n             slpMsg.batonVout = chunks[8] ? Slp.parseChunkToInt(chunks[8]!, 1, 1) : null;\n-            if(slpMsg.batonVout !== null) {\n-                if (slpMsg.batonVout < 2)\n-                    throw Error('Mint baton cannot be on vout=0 or 1');\n+            if (slpMsg.batonVout !== null) {\n+                if (slpMsg.batonVout < 2) {\n+                    throw Error(\"Mint baton cannot be on vout=0 or 1\");\n+                }\n                 slpMsg.containsBaton = true;\n             }\n-            if(slpMsg.versionType === 0x41 && slpMsg.batonVout !== null)\n-                throw Error(\"NFT1 child token must not have a minting baton!\")\n-            if(!chunks[9])\n-                throw Error(\"Bad Genesis quantity buffer\")\n-            if(chunks[9]!.length !== 8)\n-                throw Error(\"Genesis quantity must be provided as an 8-byte buffer\")\n-            slpMsg.genesisOrMintQuantity = Utils.buffer2BigNumber(chunks[9]!);                \n-            if(slpMsg.versionType === 0x41 && !slpMsg.genesisOrMintQuantity.isEqualTo(1))\n-                throw Error(\"NFT1 child token must have GENESIS quantity of 1.\")\n-        }\n-        else if(slpMsg.transactionType === SlpTransactionType.SEND) {\n-            if(chunks.length < 4)\n-                throw Error('SEND with too few parameters');\n-            if(!chunks[3])\n-                throw Error(\"Bad tokenId buffer\")\n-            if(chunks[3]!.length !== 32)\n-                throw Error('token_id is wrong length');\n-            slpMsg.tokenIdHex = chunks[3]!.toString('hex');\n+            if (slpMsg.versionType === 0x41 && slpMsg.batonVout !== null) {\n+                throw Error(\"NFT1 child token must not have a minting baton!\");\n+            }\n+            if (!chunks[9]) {\n+                throw Error(\"Bad Genesis quantity buffer\");\n+            }\n+            if (chunks[9]!.length !== 8) {\n+                throw Error(\"Genesis quantity must be provided as an 8-byte buffer\");\n+            }\n+            slpMsg.genesisOrMintQuantity = Utils.buffer2BigNumber(chunks[9]!);\n+            if (slpMsg.versionType === 0x41 && !slpMsg.genesisOrMintQuantity.isEqualTo(1)) {\n+                throw Error(\"NFT1 child token must have GENESIS quantity of 1.\");\n+            }\n+        } else if (slpMsg.transactionType === SlpTransactionType.SEND) {\n+            if (chunks.length < 4) {\n+                throw Error(\"SEND with too few parameters\");\n+            }\n+            if (!chunks[3]) {\n+                throw Error(\"Bad tokenId buffer\");\n+            }\n+            if (chunks[3]!.length !== 32) {\n+                throw Error(\"token_id is wrong length\");\n+            }\n+            slpMsg.tokenIdHex = chunks[3]!.toString(\"hex\");\n             // # Note that we put an explicit 0 for  ['token_output'][0] since it\n             // # corresponds to vout=0, which is the OP_RETURN tx output.\n             // # ['token_output'][1] is the first token output given by the SLP\n             // # message, i.e., the number listed as `token_output_quantity1` in the\n             // # spec, which goes to tx output vout=1.\n             slpMsg.sendOutputs = [];\n             slpMsg.sendOutputs.push(new BigNumber(0));\n-            chunks.slice(4).forEach(chunk => {\n-                if(!chunk)\n-                    throw Error(\"Bad send quantity buffer.\")\n-                if(chunk.length !== 8)\n-                    throw Error('SEND quantities must be 8-bytes each.');\n+            chunks.slice(4).forEach((chunk) => {\n+                if (!chunk) {\n+                    throw Error(\"Bad send quantity buffer.\");\n+                }\n+                if (chunk.length !== 8) {\n+                    throw Error(\"SEND quantities must be 8-bytes each.\");\n+                }\n                 slpMsg.sendOutputs!.push(Utils.buffer2BigNumber(chunk));\n             });\n             // # maximum 19 allowed token outputs, plus 1 for the explicit [0] we inserted.\n-            if(slpMsg.sendOutputs.length < 2)\n-                throw Error('Missing output amounts');\n-            if(slpMsg.sendOutputs.length > 20)\n-                throw Error('More than 19 output amounts');\n-        }\n-        else if(slpMsg.transactionType === SlpTransactionType.MINT) {\n-            if(slpMsg.versionType === 0x41)\n-                throw Error(\"NFT1 Child cannot have MINT transaction type.\")\n-            if(chunks.length != 6)\n-                throw Error('MINT with incorrect number of parameters');\n-            if(!chunks[3])\n+            if (slpMsg.sendOutputs.length < 2) {\n+                throw Error(\"Missing output amounts\");\n+            }\n+            if (slpMsg.sendOutputs.length > 20) {\n+                throw Error(\"More than 19 output amounts\");\n+            }\n+        } else if (slpMsg.transactionType === SlpTransactionType.MINT) {\n+            if (slpMsg.versionType === 0x41) {\n+                throw Error(\"NFT1 Child cannot have MINT transaction type.\");\n+            }\n+            if (chunks.length != 6) {\n+                throw Error(\"MINT with incorrect number of parameters\");\n+            }\n+            if (!chunks[3]) {\n                 throw Error(\"Bad token_id buffer\");\n-            if(chunks[3]!.length != 32)\n-                throw Error('token_id is wrong length');\n-            slpMsg.tokenIdHex = chunks[3]!.toString('hex');\n-            slpMsg.batonVout = chunks[4] ? Slp.parseChunkToInt(chunks[4]!,1,1) : null;\n-            if(slpMsg.batonVout !== null && slpMsg.batonVout !== undefined) {\n-                if(slpMsg.batonVout < 2)\n-                    throw Error('Mint baton cannot be on vout=0 or 1');\n+            }\n+            if (chunks[3]!.length != 32) {\n+                throw Error(\"token_id is wrong length\");\n+            }\n+            slpMsg.tokenIdHex = chunks[3]!.toString(\"hex\");\n+            slpMsg.batonVout = chunks[4] ? Slp.parseChunkToInt(chunks[4]!, 1, 1) : null;\n+            if (slpMsg.batonVout !== null && slpMsg.batonVout !== undefined) {\n+                if (slpMsg.batonVout < 2) {\n+                    throw Error(\"Mint baton cannot be on vout=0 or 1\");\n+                }\n                 slpMsg.containsBaton = true;\n             }\n-            if(!chunks[5])\n-                throw Error(\"Bad Mint quantity buffer\")\n-            if(chunks[5]!.length !== 8)\n-                throw Error(\"Mint quantity must be provided as an 8-byte buffer\")\n+            if (!chunks[5]) {\n+                throw Error(\"Bad Mint quantity buffer\");\n+            }\n+            if (chunks[5]!.length !== 8) {\n+                throw Error(\"Mint quantity must be provided as an 8-byte buffer\");\n+            }\n             slpMsg.genesisOrMintQuantity = Utils.buffer2BigNumber(chunks[5]!);\n-        }\n-        else\n+        } else {\n             throw Error(\"Bad transaction type\");\n+        }\n \n-        if(!slpMsg.genesisOrMintQuantity && (!slpMsg.sendOutputs || slpMsg.sendOutputs.length === 0))\n+        if (!slpMsg.genesisOrMintQuantity && (!slpMsg.sendOutputs || slpMsg.sendOutputs.length === 0)) {\n             throw Error(\"SLP message must have either Genesis/Mint outputs or Send outputs, both are missing\");\n+        }\n \n         return slpMsg;\n     }\n- \n-    static parseChunkToInt(intBytes: Buffer, minByteLen: number, maxByteLen: number, raise_on_Null = false) {\n-        // # Parse data as unsigned-big-endian encoded integer.\n-        // # For empty data different possibilities may occur:\n-        // #      minByteLen <= 0 : return 0\n-        // #      raise_on_Null == False and minByteLen > 0: return None\n-        // #      raise_on_Null == True and minByteLen > 0:  raise SlpInvalidOutputMessage\n-        if(intBytes.length >= minByteLen && intBytes.length <= maxByteLen)\n-            return intBytes.readUIntBE(0, intBytes.length)\n-        if(intBytes.length === 0 && !raise_on_Null)\n-            return null;\n-        throw Error('Field has wrong length');\n-    }\n \n     // get list of data chunks resulting from data push operations\n-    parseOpReturnToChunks(script: Buffer, allow_op_0=false, allow_op_number=false) {\n+    public parseOpReturnToChunks(script: Buffer, allow_op_0= false, allow_op_number= false) {\n         // \"\"\"Extract pushed bytes after opreturn. Returns list of bytes() objects,\n         // one per push.\n         let ops: PushDataOperation[];\n-    \n+\n         // Strict refusal of non-push opcodes; bad scripts throw OpreturnError.\"\"\"\n         try {\n             ops = this.getScriptOperations(script);\n-        } catch(e) {\n-            //console.log(e);\n-            throw Error('Script error');\n+        } catch (e) {\n+            // console.log(e);\n+            throw Error(\"Script error\");\n         }\n \n-        if(ops[0].opcode !== this.BITBOX.Script.opcodes.OP_RETURN)\n+        if (ops[0].opcode !== this.BITBOX.Script.opcodes.OP_RETURN) {\n             throw Error('No OP_RETURN');\n-        let chunks: (Buffer|null)[] = [];\n-        ops.slice(1).forEach(opitem => {\n-            if(opitem.opcode > this.BITBOX.Script.opcodes.OP_16)\n+        }\n+        const chunks: Array<Buffer|null> = [];\n+        ops.slice(1).forEach((opitem) => {\n+            if (opitem.opcode > this.BITBOX.Script.opcodes.OP_16) {\n                 throw Error(\"Non-push opcode\");\n-            if(opitem.opcode > this.BITBOX.Script.opcodes.OP_PUSHDATA4) {\n-                if(opitem.opcode === 80)\n+            }\n+            if (opitem.opcode > this.BITBOX.Script.opcodes.OP_PUSHDATA4) {\n+                if (opitem.opcode === 80) {\n                     throw Error('Non-push opcode');\n-                if(!allow_op_number)\n+                }\n+                if (!allow_op_number) {\n                     throw Error('OP_1NEGATE to OP_16 not allowed');\n-                if(opitem.opcode === this.BITBOX.Script.opcodes.OP_1NEGATE)\n+                }\n+                if (opitem.opcode === this.BITBOX.Script.opcodes.OP_1NEGATE) {\n                     opitem.data = Buffer.from([0x81]);\n-                else // OP_1 - OP_16\n+                }\n+                else { // OP_1 - OP_16\n                     opitem.data = Buffer.from([opitem.opcode - 80]);\n+                }\n             }\n-            if(opitem.opcode === this.BITBOX.Script.opcodes.OP_0 && !allow_op_0){\n-                throw Error('OP_0 not allowed');\n+            if (opitem.opcode === this.BITBOX.Script.opcodes.OP_0 && !allow_op_0) {\n+                throw Error(\"OP_0 not allowed\");\n             }\n-            chunks.push(opitem.data)\n+            chunks.push(opitem.data);\n         });\n-        //console.log(chunks);\n-        return chunks\n+        // console.log(chunks);\n+        return chunks;\n     }\n \n     // Get a list of operations with accompanying push data (if a push opcode)\n-    getScriptOperations(script: Buffer) {\n-        let ops: PushDataOperation[] = [];\n+    public getScriptOperations(script: Buffer) {\n+        const ops: PushDataOperation[] = [];\n         try {\n             let n = 0;\n             let dlen: number;\n             while (n < script.length) {\n-                let op: PushDataOperation = { opcode: script[n], data: null }\n+                const op: PushDataOperation = { opcode: script[n], data: null };\n                 n += 1;\n-                if(op.opcode <= this.BITBOX.Script.opcodes.OP_PUSHDATA4) {\n-                    if(op.opcode < this.BITBOX.Script.opcodes.OP_PUSHDATA1)\n+                if (op.opcode <= this.BITBOX.Script.opcodes.OP_PUSHDATA4) {\n+                    if (op.opcode < this.BITBOX.Script.opcodes.OP_PUSHDATA1) {\n                         dlen = op.opcode;\n-                    else if(op.opcode === this.BITBOX.Script.opcodes.OP_PUSHDATA1) {\n+                    }\n+                    else if (op.opcode === this.BITBOX.Script.opcodes.OP_PUSHDATA1) {\n                         dlen = script[n];\n                         n += 1;\n-                    }\n-                    else if(op.opcode === this.BITBOX.Script.opcodes.OP_PUSHDATA2) {\n-                        dlen = script.slice(n, n + 2).readUIntLE(0,2);\n+                    } else if (op.opcode === this.BITBOX.Script.opcodes.OP_PUSHDATA2) {\n+                        dlen = script.slice(n, n + 2).readUIntLE(0, 2);\n                         n += 2;\n-                    }\n-                    else {\n-                        dlen = script.slice(n, n + 4).readUIntLE(0,4);\n+                    } else {\n+                        dlen = script.slice(n, n + 4).readUIntLE(0, 4);\n                         n += 4;\n                     }\n-                    if((n + dlen) > script.length) {\n-                        throw Error('IndexError');\n+                    if ((n + dlen) > script.length) {\n+                        throw Error(\"IndexError\");\n                     }\n-                    if(dlen > 0)\n+                    if (dlen > 0) {\n                         op.data = script.slice(n, n + dlen);\n-                    n += dlen\n+                    }\n+                    n += dlen;\n                 }\n                 ops.push(op);\n             }\n-        } catch(e) {\n-            //console.log(e);\n-            throw Error('truncated script')\n+        } catch (e) {\n+            // console.log(e);\n+            throw Error(\"truncated script\");\n         }\n         return ops;\n     }\n \n-    calculateGenesisCost(genesisOpReturnLength: number, inputUtxoSize: number, batonAddress: string|null, bchChangeAddress?: string, feeRate = 1) {\n-        return this.calculateMintOrGenesisCost(genesisOpReturnLength, inputUtxoSize, batonAddress, bchChangeAddress, feeRate);\n+    public calculateGenesisCost(genesisOpReturnLength: number, inputUtxoSize: number,\n+                                batonAddress: string | null, bchChangeAddress?: string, feeRate = 1) {\n+        return this.calculateMintOrGenesisCost(genesisOpReturnLength,\n+            inputUtxoSize, batonAddress, bchChangeAddress, feeRate);\n     }\n \n-    calculateMintCost(mintOpReturnLength: number, inputUtxoSize: number, batonAddress: string|null, bchChangeAddress?: string, feeRate = 1) {\n-        return this.calculateMintOrGenesisCost(mintOpReturnLength, inputUtxoSize, batonAddress, bchChangeAddress, feeRate);\n+    public calculateMintCost(mintOpReturnLength: number, inputUtxoSize: number,\n+                             batonAddress: string | null, bchChangeAddress?: string, feeRate = 1) {\n+        return this.calculateMintOrGenesisCost(mintOpReturnLength, inputUtxoSize,\n+            batonAddress, bchChangeAddress, feeRate);\n     }\n \n-    calculateMintOrGenesisCost(mintOpReturnLength: number, inputUtxoSize: number, batonAddress: string|null, bchChangeAddress?: string, feeRate: number = 1) {\n-        let outputs = 1\n-        let nonfeeoutputs = 546\n+    public calculateMintOrGenesisCost(mintOpReturnLength: number, inputUtxoSize: number,\n+                                      batonAddress: string|null, bchChangeAddress?: string, feeRate: number = 1) {\n+        let outputs = 1;\n+        let nonfeeoutputs = 546;\n         if (batonAddress !== null && batonAddress !== undefined) {\n-            nonfeeoutputs += 546\n-            outputs += 1\n+            nonfeeoutputs += 546;\n+            outputs += 1;\n         }\n \n         if (bchChangeAddress !== null && bchChangeAddress !== undefined) {\n-            outputs += 1\n+            outputs += 1;\n         }\n \n-        let fee = this.BITBOX.BitcoinCash.getByteCount({ P2PKH: inputUtxoSize }, { P2PKH: outputs })\n-        fee += mintOpReturnLength\n-        fee += 10 // added to account for OP_RETURN ammount of 0000000000000000\n-        fee *= feeRate\n-        //console.log(\"MINT/GENESIS cost before outputs: \" + fee.toString());\n-        fee += nonfeeoutputs\n-        //console.log(\"MINT/GENESIS cost after outputs are added: \" + fee.toString());\n-        return fee\n+        let fee = this.BITBOX.BitcoinCash.getByteCount({ P2PKH: inputUtxoSize }, { P2PKH: outputs });\n+        fee += mintOpReturnLength;\n+        fee += 10; // added to account for OP_RETURN ammount of 0000000000000000\n+        fee *= feeRate;\n+        // console.log(\"MINT/GENESIS cost before outputs: \" + fee.toString());\n+        fee += nonfeeoutputs;\n+        // console.log(\"MINT/GENESIS cost after outputs are added: \" + fee.toString());\n+        return fee;\n     }\n \n-    calculateSendCost(sendOpReturnLength: number, inputUtxoSize: number, outputAddressArraySize: number, bchChangeAddress?: string, feeRate = 1, forTokens=true) {\n+    public calculateSendCost(sendOpReturnLength: number, inputUtxoSize: number, \n+                             outputAddressArraySize: number, bchChangeAddress?: string, feeRate = 1, forTokens= true) {\n         let outputs = outputAddressArraySize;\n         let nonfeeoutputs = 0;\n-        if(forTokens)\n+        if (forTokens) {\n             nonfeeoutputs = outputAddressArraySize * 546;\n+        }\n \n         if (bchChangeAddress !== null && bchChangeAddress !== undefined) {\n-            outputs += 1\n+            outputs += 1;\n         }\n \n-        let fee = this.BITBOX.BitcoinCash.getByteCount({ P2PKH: inputUtxoSize }, { P2PKH: outputs })\n-        fee += sendOpReturnLength\n-        fee += 10 // added to account for OP_RETURN ammount of 0000000000000000\n-        fee *= feeRate\n-        //console.log(\"SEND cost before outputs: \" + fee.toString());\n-        fee += nonfeeoutputs\n-        //console.log(\"SEND cost after outputs are added: \" + fee.toString());\n-        return fee\n+        let fee = this.BITBOX.BitcoinCash.getByteCount({ P2PKH: inputUtxoSize }, { P2PKH: outputs });\n+        fee += sendOpReturnLength;\n+        fee += 10; // added to account for OP_RETURN ammount of 0000000000000000\n+        fee *= feeRate;\n+        // console.log(\"SEND cost before outputs: \" + fee.toString());\n+        fee += nonfeeoutputs;\n+        // console.log(\"SEND cost after outputs are added: \" + fee.toString());\n+        return fee;\n     }\n \n-    static preSendSlpJudgementCheck(txo: SlpAddressUtxoResult, tokenId: string){\n-        if (txo.slpUtxoJudgement === undefined || txo.slpUtxoJudgement === null || txo.slpUtxoJudgement === SlpUtxoJudgement.UNKNOWN)\n-            throw Error(\"There at least one input UTXO that does not have a proper SLP judgement\")\n-        if (txo.slpUtxoJudgement === SlpUtxoJudgement.UNSUPPORTED_TYPE)\n-            throw Error(\"There is at least one input UTXO that is an Unsupported SLP type.\")\n-        if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON)\n-            throw Error(\"There is at least one input UTXO that is a baton.  You can only spend batons in a MINT transaction.\")\n-        if (txo.slpTransactionDetails) {\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n-                if(!txo.slpUtxoJudgementAmount)\n-                    throw Error(\"There is at least one input token that does not have the 'slpUtxoJudgementAmount' property set.\")\n-                if(txo.slpTransactionDetails.tokenIdHex !== tokenId)\n-                    throw Error(\"There is at least one input UTXO that is a different SLP token than the one specified.\")\n-                return txo.slpTransactionDetails.tokenIdHex === tokenId;\n-            }\n-        } \n-        return false;\n-    }\n+    public async processUtxosForSlpAbstract(utxos: SlpAddressUtxoResult[], asyncSlpValidator: SlpValidator) {\n \n-    async processUtxosForSlpAbstract(utxos: SlpAddressUtxoResult[], asyncSlpValidator: SlpValidator) {\n-        \n         // 1) parse SLP OP_RETURN and cast initial SLP judgement, based on OP_RETURN only.\n-        for(let txo of utxos) {\n+        for (const txo of utxos) {\n             this.applyInitialSlpJudgement(txo);\n-            if(txo.slpUtxoJudgement === SlpUtxoJudgement.UNKNOWN || txo.slpUtxoJudgement === undefined)\n-                throw Error('Utxo SLP judgement has not been set, unknown error.');\n+            if (txo.slpUtxoJudgement === SlpUtxoJudgement.UNKNOWN || txo.slpUtxoJudgement === undefined) {\n+                throw Error(\"Utxo SLP judgement has not been set, unknown error.\");\n+            }\n         }\n-    \n+\n         // 2) Cast final SLP judgement using the supplied async validator\n         await this.applyFinalSlpJudgement(asyncSlpValidator, utxos);\n-        \n+\n         // 3) Prepare results object\n         const result: SlpBalancesResult = this.computeSlpBalances(utxos);\n-    \n+\n         // 4) Check that all UTXOs have been categorized\n         let tokenTxoCount = 0;\n-        for(let id in result.slpTokenUtxos) tokenTxoCount += result.slpTokenUtxos[id].length;\n+        for (const id in result.slpTokenUtxos) { tokenTxoCount += result.slpTokenUtxos[id].length; }\n         let batonTxoCount = 0;\n-        for(let id in result.slpBatonUtxos) batonTxoCount += result.slpBatonUtxos[id].length;\n-        if(utxos.length !== (tokenTxoCount + batonTxoCount + result.nonSlpUtxos.length + result.unknownTokenTypeUtxos.length + result.invalidBatonUtxos.length + result.invalidTokenUtxos.length))\n-            throw Error('Not all UTXOs have been categorized. Unknown Error.');\n-    \n+        for (const id in result.slpBatonUtxos) { batonTxoCount += result.slpBatonUtxos[id].length; }\n+        if (utxos.length !== (tokenTxoCount + batonTxoCount + result.nonSlpUtxos.length +\n+            result.unknownTokenTypeUtxos.length + result.invalidBatonUtxos.length + result.invalidTokenUtxos.length)) {\n+            throw Error(\"Not all UTXOs have been categorized. Unknown Error.\");\n+        }\n+\n         return result;\n     }\n \n@@ -997,63 +1127,65 @@ export class Slp {\n             slpBatonUtxos: {},\n             nonSlpUtxos: [],\n             invalidTokenUtxos: [],\n-            invalidBatonUtxos: [], \n-            unknownTokenTypeUtxos: []\n+            invalidBatonUtxos: [],\n+            unknownTokenTypeUtxos: [],\n         };\n         // 5) Loop through UTXO set and accumulate balances for type of utxo, organize the Utxos into their categories.\n         for (const txo of utxos) {\n             if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n-                if (!(txo.slpTransactionDetails.tokenIdHex in result.slpTokenBalances))\n+                if (!(txo.slpTransactionDetails.tokenIdHex in result.slpTokenBalances)) {\n                     result.slpTokenBalances[txo.slpTransactionDetails.tokenIdHex] = new BigNumber(0);\n-                if (txo.slpTransactionDetails.transactionType === SlpTransactionType.GENESIS || txo.slpTransactionDetails.transactionType === SlpTransactionType.MINT) {\n-                    result.slpTokenBalances[txo.slpTransactionDetails.tokenIdHex] = result.slpTokenBalances[txo.slpTransactionDetails.tokenIdHex].plus(<BigNumber>txo.slpTransactionDetails.genesisOrMintQuantity);\n                 }\n-                else if (txo.slpTransactionDetails.transactionType === SlpTransactionType.SEND && txo.slpTransactionDetails.sendOutputs) {\n-                    let qty = txo.slpTransactionDetails.sendOutputs[txo.vout];\n-                    result.slpTokenBalances[txo.slpTransactionDetails.tokenIdHex] = result.slpTokenBalances[txo.slpTransactionDetails.tokenIdHex].plus(qty);\n-                }\n-                else {\n-                    throw Error('Unknown Error: cannot have an SLP_TOKEN that is not from GENESIS, MINT, or SEND.');\n+                if (txo.slpTransactionDetails.transactionType === SlpTransactionType.GENESIS ||\n+                    txo.slpTransactionDetails.transactionType === SlpTransactionType.MINT) {\n+                    result.slpTokenBalances[txo.slpTransactionDetails.tokenIdHex] =\n+                    result.slpTokenBalances[txo.slpTransactionDetails.tokenIdHex]\n+                    .plus( txo.slpTransactionDetails.genesisOrMintQuantity as BigNumber);\n+                } else if (txo.slpTransactionDetails.transactionType === SlpTransactionType.SEND &&\n+                    txo.slpTransactionDetails.sendOutputs) {\n+                    const qty = txo.slpTransactionDetails.sendOutputs[txo.vout];\n+                    result.slpTokenBalances[txo.slpTransactionDetails.tokenIdHex] =\n+                    result.slpTokenBalances[txo.slpTransactionDetails.tokenIdHex].plus(qty);\n+                } else {\n+                    throw Error(\"Unknown Error: cannot have an SLP_TOKEN that is not from GENESIS, MINT, or SEND.\");\n                 }\n                 result.satoshis_in_slp_token += txo.satoshis;\n-                if(!(txo.slpTransactionDetails.tokenIdHex in result.slpTokenUtxos))\n+                if (!(txo.slpTransactionDetails.tokenIdHex in result.slpTokenUtxos)) {\n                     result.slpTokenUtxos[txo.slpTransactionDetails.tokenIdHex] = [];\n+                }\n \n                 // NFT1 Children Balances (nftParentChildBalances):\n-                if(txo.slpTransactionDetails.versionType === SlpVersionType.TokenVersionType1_NFT_Child) {\n-                    if(!(txo.nftParentId! in result.nftParentChildBalances)) {\n+                if (txo.slpTransactionDetails.versionType === SlpVersionType.TokenVersionType1_NFT_Child) {\n+                    if (!(txo.nftParentId! in result.nftParentChildBalances)) {\n                         result.nftParentChildBalances[txo.nftParentId!] = {};\n                     }\n-                    if(!(txo.slpTransactionDetails.tokenIdHex in result.nftParentChildBalances[txo.nftParentId!])) {\n-                        result.nftParentChildBalances[txo.nftParentId!][txo.slpTransactionDetails.tokenIdHex] = txo.slpUtxoJudgementAmount;\n+                    if (!(txo.slpTransactionDetails.tokenIdHex in result.nftParentChildBalances[txo.nftParentId!])) {\n+                        result.nftParentChildBalances[txo.nftParentId!][txo.slpTransactionDetails.tokenIdHex] =\n+                        txo.slpUtxoJudgementAmount;\n                     } else {\n                         // NOTE: this does not cover the 0 quantity SEND case\n-                        throw Error(\"Cannot have 2 UTXOs with the same NFT1 child token designation.\")\n+                        throw Error(\"Cannot have 2 UTXOs with the same NFT1 child token designation.\");\n                     }\n                 }\n \n                 // All token balances (includes Type 1, and NFT1(65/129)):\n                 result.slpTokenUtxos[txo.slpTransactionDetails.tokenIdHex].push(txo);\n-            }\n-            else if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON) {\n+            } else if (txo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON) {\n                 result.satoshis_in_slp_baton += txo.satoshis;\n-                if(!(txo.slpTransactionDetails.tokenIdHex in result.slpBatonUtxos))\n+                if (!(txo.slpTransactionDetails.tokenIdHex in result.slpBatonUtxos)) {\n                     result.slpBatonUtxos[txo.slpTransactionDetails.tokenIdHex] = [];\n+                }\n                 result.slpBatonUtxos[txo.slpTransactionDetails.tokenIdHex].push(txo);\n-            }\n-            else if (txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG) {\n+            } else if (txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_TOKEN_DAG) {\n                 result.satoshis_in_invalid_token_dag += txo.satoshis;\n                 result.invalidTokenUtxos.push(txo);\n-            }\n-            else if (txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG) {\n+            } else if (txo.slpUtxoJudgement === SlpUtxoJudgement.INVALID_BATON_DAG) {\n                 result.satoshis_in_invalid_baton_dag += txo.satoshis;\n                 result.invalidBatonUtxos.push(txo);\n-            }\n-            else if (txo.slpUtxoJudgement === SlpUtxoJudgement.UNSUPPORTED_TYPE) {\n+            } else if (txo.slpUtxoJudgement === SlpUtxoJudgement.UNSUPPORTED_TYPE) {\n                 result.satoshis_in_unknown_token_type += txo.satoshis;\n                 result.unknownTokenTypeUtxos.push(txo);\n-            }\n-            else {\n+            } else {\n                 result.satoshis_available_bch += txo.satoshis;\n                 result.nonSlpUtxos.push(txo);\n             }\n@@ -1063,98 +1195,99 @@ export class Slp {\n \n     private applyInitialSlpJudgement(txo: SlpAddressUtxoResult) {\n         try {\n-            let vout = txo.tx.vout.find(vout => vout.n === 0);\n-            if (!vout)\n+            const vout = txo.tx.vout.find(vout => vout.n === 0);\n+            if (!vout) {\n                 throw 'Utxo contains no Vout!';\n-            let vout0script = Buffer.from(vout.scriptPubKey.hex, 'hex');\n+            }\n+            const vout0script = Buffer.from(vout.scriptPubKey.hex, \"hex\");\n             txo.slpTransactionDetails = this.parseSlpOutputScript(vout0script);\n \n             // populate txid for GENESIS\n-            if (txo.slpTransactionDetails.transactionType === SlpTransactionType.GENESIS)\n+            if (txo.slpTransactionDetails.transactionType === SlpTransactionType.GENESIS) {\n                 txo.slpTransactionDetails.tokenIdHex = txo.txid;\n+            }\n \n-            // apply initial SLP judgement to the UTXO (based on OP_RETURN parsing ONLY! Still need to validate the DAG for possible tokens and batons!)\n+            // apply initial SLP judgement to the UTXO (based on OP_RETURN \n+            // parsing ONLY! Still need to validate the DAG for possible tokens and batons!)\n             if (txo.slpTransactionDetails.transactionType === SlpTransactionType.GENESIS ||\n                 txo.slpTransactionDetails.transactionType === SlpTransactionType.MINT) {\n                 if (txo.slpTransactionDetails.containsBaton && txo.slpTransactionDetails.batonVout === txo.vout) {\n                     txo.slpUtxoJudgement = SlpUtxoJudgement.SLP_BATON;\n-                }\n-                else if (txo.vout === 1 && txo.slpTransactionDetails.genesisOrMintQuantity!.isGreaterThan(0)) {\n+                } else if (txo.vout === 1 && txo.slpTransactionDetails.genesisOrMintQuantity!.isGreaterThan(0)) {\n                     txo.slpUtxoJudgement = SlpUtxoJudgement.SLP_TOKEN;\n-                    txo.slpUtxoJudgementAmount = <BigNumber>txo.slpTransactionDetails.genesisOrMintQuantity;\n-                }\n-                else\n+                    txo.slpUtxoJudgementAmount = ( txo.slpTransactionDetails.genesisOrMintQuantity as BigNumber);\n+                } else {\n                     txo.slpUtxoJudgement = SlpUtxoJudgement.NOT_SLP;\n-            }\n-            else if (txo.slpTransactionDetails.transactionType === SlpTransactionType.SEND && txo.slpTransactionDetails.sendOutputs) {\n+ }\n+            } else if (txo.slpTransactionDetails.transactionType === SlpTransactionType.SEND &&\n+                txo.slpTransactionDetails.sendOutputs) {\n                 if (txo.vout > 0 && txo.vout < txo.slpTransactionDetails.sendOutputs.length) {\n                     txo.slpUtxoJudgement = SlpUtxoJudgement.SLP_TOKEN;\n                     txo.slpUtxoJudgementAmount = txo.slpTransactionDetails.sendOutputs[txo.vout];\n-                }\n-                else\n+                } else {\n                     txo.slpUtxoJudgement = SlpUtxoJudgement.NOT_SLP;\n+                }\n             } else {\n                 txo.slpUtxoJudgement = SlpUtxoJudgement.NOT_SLP;\n             }\n-        }\n-        catch (e) {\n-            if(e.message.includes(\"Unsupported token type\"))\n-                txo.slpUtxoJudgement = SlpUtxoJudgement.UNSUPPORTED_TYPE\n-            else\n+        } catch (e) {\n+            if (e.message.includes(\"Unsupported token type\")) {\n+                txo.slpUtxoJudgement = SlpUtxoJudgement.UNSUPPORTED_TYPE;\n+            } else {\n                 txo.slpUtxoJudgement = SlpUtxoJudgement.NOT_SLP;\n+            }\n         }\n     }\n \n     private async applyFinalSlpJudgement(asyncSlpValidator: SlpValidator, utxos: SlpAddressUtxoResult[]) {\n \n-        let validSLPTx: string[] = await asyncSlpValidator.validateSlpTransactions([\n-            ...new Set(utxos.filter(txOut => {\n+        const validSLPTx: string[] = await asyncSlpValidator.validateSlpTransactions([\n+            ...new Set(utxos.filter((txOut) => {\n                 if (txOut.slpTransactionDetails &&\n                     txOut.slpUtxoJudgement !== SlpUtxoJudgement.UNKNOWN &&\n                     txOut.slpUtxoJudgement !== SlpUtxoJudgement.UNSUPPORTED_TYPE &&\n-                    txOut.slpUtxoJudgement !== SlpUtxoJudgement.NOT_SLP)\n+                    txOut.slpUtxoJudgement !== SlpUtxoJudgement.NOT_SLP) {\n                     return true;\n+                }\n                 return false;\n-            }).map(txOut => txOut.txid))\n+            }).map((txOut) => txOut.txid)),\n         ]);\n \n         utxos.forEach(utxo => {\n             if (!(validSLPTx.includes(utxo.txid))) {\n                 if (utxo.slpUtxoJudgement === SlpUtxoJudgement.SLP_TOKEN) {\n                     utxo.slpUtxoJudgement = SlpUtxoJudgement.INVALID_TOKEN_DAG;\n-                }\n-                else if (utxo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON) {\n+                } else if (utxo.slpUtxoJudgement === SlpUtxoJudgement.SLP_BATON) {\n                     utxo.slpUtxoJudgement = SlpUtxoJudgement.INVALID_BATON_DAG;\n                 }\n             }\n         });\n \n         // function for determination of NFT1 parent ID\n-        let getNftParentId = async (tokenIdHex: string) => {\n-            let txnhex = (await asyncSlpValidator.getRawTransactions([tokenIdHex]))[0];\n-            let tx = Primatives.Transaction.parseFromBuffer(Buffer.from(txnhex, 'hex'));\n-            let nftBurnTxnHex = (await asyncSlpValidator.getRawTransactions([tx.inputs[0].previousTxHash]))[0];\n-            let nftBurnTxn = Primatives.Transaction.parseFromBuffer(Buffer.from(nftBurnTxnHex, 'hex'));\n-            let slp = new Slp(this.BITBOX);\n-            let nftBurnSlp = slp.parseSlpOutputScript(Buffer.from(nftBurnTxn.outputs[0].scriptPubKey));\n+        const getNftParentId = async (tokenIdHex: string) => {\n+            const txnhex = (await asyncSlpValidator.getRawTransactions([tokenIdHex]))[0];\n+            const tx = Primatives.Transaction.parseFromBuffer(Buffer.from(txnhex, \"hex\"));\n+            const nftBurnTxnHex = (await asyncSlpValidator.getRawTransactions([tx.inputs[0].previousTxHash]))[0];\n+            const nftBurnTxn = Primatives.Transaction.parseFromBuffer(Buffer.from(nftBurnTxnHex, \"hex\"));\n+            const slp = new Slp(this.BITBOX);\n+            const nftBurnSlp = slp.parseSlpOutputScript(Buffer.from(nftBurnTxn.outputs[0].scriptPubKey));\n             if (nftBurnSlp.transactionType === SlpTransactionType.GENESIS) {\n                 return tx.inputs[0].previousTxHash;\n-            }\n-            else {\n+            } else {\n                 return nftBurnSlp.tokenIdHex;\n             }\n-        }\n+        };\n \n         // Loop through utxos to add nftParentId to any NFT1 child UTXO.\n-        for(let txo in utxos) {\n-            if(utxos[txo].slpTransactionDetails && \n+        for (const txo in utxos) {\n+            if (utxos[txo].slpTransactionDetails &&\n                 utxos[txo].slpTransactionDetails.versionType === SlpVersionType.TokenVersionType1_NFT_Child) {\n-                if(utxos[txo].slpTransactionDetails.transactionType !== SlpTransactionType.GENESIS) {\n+                if (utxos[txo].slpTransactionDetails.transactionType !== SlpTransactionType.GENESIS) {\n                     utxos[txo].nftParentId = await getNftParentId(utxos[txo].slpTransactionDetails.tokenIdHex);\n                 } else {\n                     utxos[txo].nftParentId = await getNftParentId(utxos[txo].txid);\n                 }\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"
        },
        {
          "filename": "package-lock.json",
          "status": "modified",
          "additions": 377,
          "deletions": 593,
          "patch": "@@ -1,29 +1,28 @@\n {\n   \"name\": \"slpjs\",\n-  \"version\": \"0.21.3\",\n+  \"version\": \"0.21.4\",\n   \"lockfileVersion\": 1,\n   \"requires\": true,\n   \"dependencies\": {\n     \"@babel/code-frame\": {\n-      \"version\": \"7.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.0.0.tgz\",\n-      \"integrity\": \"sha512-OfC2uemaknXr87bdLUkWog7nYuliM9Ij5HUcajsVcMCpQrcLmtxRbVFTIqmcSkSeYRBFBRxs2FiUqFJDLdiebA==\",\n+      \"version\": \"7.5.5\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.5.5.tgz\",\n+      \"integrity\": \"sha512-27d4lZoomVyo51VegxI20xZPuSHusqbQag/ztrBC7wegWoQ1nLREPVSKSW8byhTlzTKyNE4ifaTA6lCp7JjpFw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@babel/highlight\": \"^7.0.0\"\n       }\n     },\n     \"@babel/generator\": {\n-      \"version\": \"7.4.4\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/generator/-/generator-7.4.4.tgz\",\n-      \"integrity\": \"sha512-53UOLK6TVNqKxf7RUh8NE851EHRxOOeVXKbK2bivdb+iziMyk03Sr4eaE9OELCbyZAAafAKPDwF2TPUES5QbxQ==\",\n+      \"version\": \"7.6.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/generator/-/generator-7.6.4.tgz\",\n+      \"integrity\": \"sha512-jsBuXkFoZxk0yWLyGI9llT9oiQ2FeTASmRFE32U+aaDTfoE92t78eroO7PTpU/OrYq38hlcDM6vbfLDaOLy+7w==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"@babel/types\": \"^7.4.4\",\n+        \"@babel/types\": \"^7.6.3\",\n         \"jsesc\": \"^2.5.1\",\n-        \"lodash\": \"^4.17.11\",\n-        \"source-map\": \"^0.5.0\",\n-        \"trim-right\": \"^1.0.1\"\n+        \"lodash\": \"^4.17.13\",\n+        \"source-map\": \"^0.5.0\"\n       }\n     },\n     \"@babel/helper-function-name\": {\n@@ -56,9 +55,9 @@\n       }\n     },\n     \"@babel/highlight\": {\n-      \"version\": \"7.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/highlight/-/highlight-7.0.0.tgz\",\n-      \"integrity\": \"sha512-UFMC4ZeFC48Tpvj7C8UgLvtkaUuovQX+5xNWrsIoMG8o2z+XFKjKaN9iVmS84dPwVN00W4wPmqvYoZF3EGAsfw==\",\n+      \"version\": \"7.5.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/highlight/-/highlight-7.5.0.tgz\",\n+      \"integrity\": \"sha512-7dV4eu9gBxoM0dAnj/BCFDW9LFU0zvTrkq0ugM7pnHEgguOEeOz1so2ZghEdzviYzQEED0r4EAgpsBChKy1TRQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"chalk\": \"^2.0.0\",\n@@ -67,58 +66,47 @@\n       }\n     },\n     \"@babel/parser\": {\n-      \"version\": \"7.4.5\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/parser/-/parser-7.4.5.tgz\",\n-      \"integrity\": \"sha512-9mUqkL1FF5T7f0WDFfAoDdiMVPWsdD1gZYzSnaXsxUCUqzuch/8of9G3VUSNiZmMBoRxT3neyVsqeiL/ZPcjew==\",\n+      \"version\": \"7.6.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/parser/-/parser-7.6.4.tgz\",\n+      \"integrity\": \"sha512-D8RHPW5qd0Vbyo3qb+YjO5nvUVRTXFLQ/FsDxJU2Nqz4uB5EnUN0ZQSEYpvTIbRuttig1XbHWU5oMeQwQSAA+A==\",\n       \"dev\": true\n     },\n     \"@babel/template\": {\n-      \"version\": \"7.4.4\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/template/-/template-7.4.4.tgz\",\n-      \"integrity\": \"sha512-CiGzLN9KgAvgZsnivND7rkA+AeJ9JB0ciPOD4U59GKbQP2iQl+olF1l76kJOupqidozfZ32ghwBEJDhnk9MEcw==\",\n+      \"version\": \"7.6.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/template/-/template-7.6.0.tgz\",\n+      \"integrity\": \"sha512-5AEH2EXD8euCk446b7edmgFdub/qfH1SN6Nii3+fyXP807QRx9Q73A2N5hNwRRslC2H9sNzaFhsPubkS4L8oNQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"@babel/code-frame\": \"^7.0.0\",\n-        \"@babel/parser\": \"^7.4.4\",\n-        \"@babel/types\": \"^7.4.4\"\n+        \"@babel/parser\": \"^7.6.0\",\n+        \"@babel/types\": \"^7.6.0\"\n       }\n     },\n     \"@babel/traverse\": {\n-      \"version\": \"7.4.5\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/traverse/-/traverse-7.4.5.tgz\",\n-      \"integrity\": \"sha512-Vc+qjynwkjRmIFGxy0KYoPj4FdVDxLej89kMHFsWScq999uX+pwcX4v9mWRjW0KcAYTPAuVQl2LKP1wEVLsp+A==\",\n+      \"version\": \"7.6.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/traverse/-/traverse-7.6.3.tgz\",\n+      \"integrity\": \"sha512-unn7P4LGsijIxaAJo/wpoU11zN+2IaClkQAxcJWBNCMS6cmVh802IyLHNkAjQ0iYnRS3nnxk5O3fuXW28IMxTw==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"@babel/code-frame\": \"^7.0.0\",\n-        \"@babel/generator\": \"^7.4.4\",\n+        \"@babel/code-frame\": \"^7.5.5\",\n+        \"@babel/generator\": \"^7.6.3\",\n         \"@babel/helper-function-name\": \"^7.1.0\",\n         \"@babel/helper-split-export-declaration\": \"^7.4.4\",\n-        \"@babel/parser\": \"^7.4.5\",\n-        \"@babel/types\": \"^7.4.4\",\n+        \"@babel/parser\": \"^7.6.3\",\n+        \"@babel/types\": \"^7.6.3\",\n         \"debug\": \"^4.1.0\",\n         \"globals\": \"^11.1.0\",\n-        \"lodash\": \"^4.17.11\"\n-      },\n-      \"dependencies\": {\n-        \"debug\": {\n-          \"version\": \"4.1.1\",\n-          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.1.1.tgz\",\n-          \"integrity\": \"sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"ms\": \"^2.1.1\"\n-          }\n-        }\n+        \"lodash\": \"^4.17.13\"\n       }\n     },\n     \"@babel/types\": {\n-      \"version\": \"7.4.4\",\n-      \"resolved\": \"https://registry.npmjs.org/@babel/types/-/types-7.4.4.tgz\",\n-      \"integrity\": \"sha512-dOllgYdnEFOebhkKCjzSVFqw/PmmB8pH6RGOWkY4GsboQNd47b1fBThBSwlHAq9alF9vc1M3+6oqR47R50L0tQ==\",\n+      \"version\": \"7.6.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@babel/types/-/types-7.6.3.tgz\",\n+      \"integrity\": \"sha512-CqbcpTxMcpuQTMhjI37ZHVgjBkysg5icREQIEZ0eG1yCNwg3oy+5AaLiOKmjsCj6nqOsa6Hf0ObjRVwokb7srA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"esutils\": \"^2.0.2\",\n-        \"lodash\": \"^4.17.11\",\n+        \"lodash\": \"^4.17.13\",\n         \"to-fast-properties\": \"^2.0.0\"\n       }\n     },\n@@ -202,9 +190,9 @@\n       }\n     },\n     \"@types/chai\": {\n-      \"version\": \"4.1.7\",\n-      \"resolved\": \"https://registry.npmjs.org/@types/chai/-/chai-4.1.7.tgz\",\n-      \"integrity\": \"sha512-2Y8uPt0/jwjhQ6EiluT0XCri1Dbplr0ZxfFXUz+ye13gaqE8u5gL5ppao1JrUYr9cIip5S6MvQzBS7Kke7U9VA==\",\n+      \"version\": \"4.2.4\",\n+      \"resolved\": \"https://registry.npmjs.org/@types/chai/-/chai-4.2.4.tgz\",\n+      \"integrity\": \"sha512-7qvf9F9tMTzo0akeswHPGqgUx/gIaJqrOEET/FCD8CFRkSUHlygQiM5yB6OvjrtdxBVLSyw7COJubsFYs0683g==\",\n       \"dev\": true\n     },\n     \"@types/google-protobuf\": {\n@@ -246,9 +234,9 @@\n       }\n     },\n     \"@types/sinon\": {\n-      \"version\": \"7.0.12\",\n-      \"resolved\": \"https://registry.npmjs.org/@types/sinon/-/sinon-7.0.12.tgz\",\n-      \"integrity\": \"sha512-fo0MWpVPSUrnZZhp9wyu+hhI3VJ9+Jhs+PWrokBTg3d2ryNPDOAWF1csIhQuYWBTn7KdZzXpRgpX2o6cwOlPWg==\",\n+      \"version\": \"7.5.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@types/sinon/-/sinon-7.5.0.tgz\",\n+      \"integrity\": \"sha512-NyzhuSBy97B/zE58cDw4NyGvByQbAHNP9069KVSgnXt/sc0T6MFRh0InKAeBVHJWdSXG1S3+PxgVIgKo9mTHbw==\",\n       \"dev\": true\n     },\n     \"@types/wif\": {\n@@ -391,7 +379,7 @@\n     },\n     \"archy\": {\n       \"version\": \"1.0.0\",\n-      \"resolved\": false,\n+      \"resolved\": \"https://registry.npmjs.org/archy/-/archy-1.0.0.tgz\",\n       \"integrity\": \"sha1-+cjBN1fMHde8N5rHeyxipcKGjEA=\",\n       \"dev\": true\n     },\n@@ -490,9 +478,9 @@\n       \"dev\": true\n     },\n     \"async-limiter\": {\n-      \"version\": \"1.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/async-limiter/-/async-limiter-1.0.0.tgz\",\n-      \"integrity\": \"sha512-jp/uFnooOiO+L211eZOoSyzpOITMXx1rBITauYykG3BRYPu8h0UcxsPNB04RR5vo4Tyz3+ay17tR6JVf9qzYWg==\",\n+      \"version\": \"1.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/async-limiter/-/async-limiter-1.0.1.tgz\",\n+      \"integrity\": \"sha512-csOlWGAcRFJaI6m+F2WKdnMKr4HhdhFVBk0H/QbJFMCr+uO2kwohwXQPxw/9OCxp05r5ghVBFSyioixx3gfkNQ==\",\n       \"dev\": true\n     },\n     \"asynckit\": {\n@@ -542,7 +530,7 @@\n       \"dependencies\": {\n         \"ansi-regex\": {\n           \"version\": \"2.1.1\",\n-          \"resolved\": false,\n+          \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz\",\n           \"integrity\": \"sha1-w7M6te42DYbg5ijwRorn7yfWVN8=\",\n           \"dev\": true\n         },\n@@ -573,7 +561,7 @@\n         },\n         \"strip-ansi\": {\n           \"version\": \"3.0.1\",\n-          \"resolved\": false,\n+          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz\",\n           \"integrity\": \"sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=\",\n           \"dev\": true,\n           \"requires\": {\n@@ -621,9 +609,9 @@\n       \"dev\": true\n     },\n     \"base64id\": {\n-      \"version\": \"1.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/base64id/-/base64id-1.0.0.tgz\",\n-      \"integrity\": \"sha1-R2iMuZu2gE8OBtPnY7HDLlfY5rY=\",\n+      \"version\": \"2.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz\",\n+      \"integrity\": \"sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==\",\n       \"dev\": true\n     },\n     \"bc-bip68\": {\n@@ -888,12 +876,13 @@\n       }\n     },\n     \"bitcoinjs-message\": {\n-      \"version\": \"2.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/bitcoinjs-message/-/bitcoinjs-message-2.0.0.tgz\",\n-      \"integrity\": \"sha512-H5pJC7/eSqVjREiEOZ4jifX+7zXYP3Y28GIOIqg9hrgE7Vj8Eva9+HnVqnxwA1rJPOwZKuw0vo6k0UxgVc6q1A==\",\n+      \"version\": \"2.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/bitcoinjs-message/-/bitcoinjs-message-2.1.0.tgz\",\n+      \"integrity\": \"sha512-xVL2YvyAJUI8ZwfNpi6Ju5zda3+QYGHTLUvISDb0VHWbsWn9Zyvd1o8XHRC/0r+DNwDIwenpXDSPl1XLCMGnMA==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"bs58check\": \"^2.0.2\",\n+        \"bech32\": \"^1.1.3\",\n+        \"bs58check\": \"^2.1.2\",\n         \"buffer-equals\": \"^1.0.3\",\n         \"create-hash\": \"^1.1.2\",\n         \"secp256k1\": \"^3.0.1\",\n@@ -1232,15 +1221,6 @@\n       \"integrity\": \"sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==\",\n       \"dev\": true\n     },\n-    \"can-promise\": {\n-      \"version\": \"0.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/can-promise/-/can-promise-0.0.1.tgz\",\n-      \"integrity\": \"sha512-gzVrHyyrvgt0YpDm7pn04MQt8gjh0ZAhN4ZDyCRtGl6YnuuK6b4aiUTD7G52r9l4YNmxfTtEscb92vxtAlL6XQ==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"window-or-global\": \"^1.0.1\"\n-      }\n-    },\n     \"caseless\": {\n       \"version\": \"0.12.0\",\n       \"resolved\": \"https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz\",\n@@ -1328,12 +1308,6 @@\n       \"integrity\": \"sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=\",\n       \"dev\": true\n     },\n-    \"code-point-at\": {\n-      \"version\": \"1.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/code-point-at/-/code-point-at-1.1.0.tgz\",\n-      \"integrity\": \"sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c=\",\n-      \"dev\": true\n-    },\n     \"coininfo\": {\n       \"version\": \"github:Bitcoin-com/coininfo#eece2c6141d08c3e7783929f2a1e1e681aa1a82c\",\n       \"from\": \"github:Bitcoin-com/coininfo\",\n@@ -1393,9 +1367,9 @@\n       }\n     },\n     \"commander\": {\n-      \"version\": \"2.20.0\",\n-      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.20.0.tgz\",\n-      \"integrity\": \"sha512-7j2y+40w61zy6YC2iRNpUe/NwhNyoXrYpHMrSunaMG64nRnaf96zO/KMQR4OyN/UnE5KLyEBnKHd4aG3rskjpQ==\",\n+      \"version\": \"2.20.3\",\n+      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-2.20.3.tgz\",\n+      \"integrity\": \"sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==\",\n       \"dev\": true,\n       \"optional\": true\n     },\n@@ -1583,9 +1557,9 @@\n       \"dev\": true\n     },\n     \"debug\": {\n-      \"version\": \"3.2.6\",\n-      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.2.6.tgz\",\n-      \"integrity\": \"sha512-mel+jf7nrtEl5Pn1Qx46zARXKDpBbvzezse7p7LqINmdoIk8PYP5SySaxEmYv6TZ0JyEKA1hsCId6DIhgITtWQ==\",\n+      \"version\": \"4.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.1.1.tgz\",\n+      \"integrity\": \"sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"ms\": \"^2.1.1\"\n@@ -1798,56 +1772,30 @@\n       \"integrity\": \"sha512-CwBLREIQ7LvYFB0WyRvwhq5N5qPhc6PMjD6bYggFlI5YyDgl+0vxq5VHbMOFqLg7hfWzmu8T5Z1QofhmTIhItA==\",\n       \"dev\": true\n     },\n-    \"end-of-stream\": {\n-      \"version\": \"1.4.1\",\n-      \"resolved\": \"https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.1.tgz\",\n-      \"integrity\": \"sha512-1MkrZNvWTKCaigbn+W15elq2BB/L22nqrSY5DKlo3X6+vclJm8Bb5djXJBmEX6fS3+zCh/F4VBK5Z2KxJt4s2Q==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"once\": \"^1.4.0\"\n-      }\n-    },\n     \"engine.io\": {\n-      \"version\": \"3.3.2\",\n-      \"resolved\": \"https://registry.npmjs.org/engine.io/-/engine.io-3.3.2.tgz\",\n-      \"integrity\": \"sha512-AsaA9KG7cWPXWHp5FvHdDWY3AMWeZ8x+2pUVLcn71qE5AtAzgGbxuclOytygskw8XGmiQafTmnI9Bix3uihu2w==\",\n+      \"version\": \"3.4.0\",\n+      \"resolved\": \"https://registry.npmjs.org/engine.io/-/engine.io-3.4.0.tgz\",\n+      \"integrity\": \"sha512-XCyYVWzcHnK5cMz7G4VTu2W7zJS7SM1QkcelghyIk/FmobWBtXE7fwhBusEKvCSqc3bMh8fNFMlUkCKTFRxH2w==\",\n       \"dev\": true,\n       \"requires\": {\n         \"accepts\": \"~1.3.4\",\n-        \"base64id\": \"1.0.0\",\n+        \"base64id\": \"2.0.0\",\n         \"cookie\": \"0.3.1\",\n-        \"debug\": \"~3.1.0\",\n-        \"engine.io-parser\": \"~2.1.0\",\n-        \"ws\": \"~6.1.0\"\n-      },\n-      \"dependencies\": {\n-        \"debug\": {\n-          \"version\": \"3.1.0\",\n-          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.1.0.tgz\",\n-          \"integrity\": \"sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"ms\": \"2.0.0\"\n-          }\n-        },\n-        \"ms\": {\n-          \"version\": \"2.0.0\",\n-          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\n-          \"integrity\": \"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=\",\n-          \"dev\": true\n-        }\n+        \"debug\": \"~4.1.0\",\n+        \"engine.io-parser\": \"~2.2.0\",\n+        \"ws\": \"^7.1.2\"\n       }\n     },\n     \"engine.io-client\": {\n-      \"version\": \"3.3.2\",\n-      \"resolved\": \"https://registry.npmjs.org/engine.io-client/-/engine.io-client-3.3.2.tgz\",\n-      \"integrity\": \"sha512-y0CPINnhMvPuwtqXfsGuWE8BB66+B6wTtCofQDRecMQPYX3MYUZXFNKDhdrSe3EVjgOu4V3rxdeqN/Tr91IgbQ==\",\n+      \"version\": \"3.4.0\",\n+      \"resolved\": \"https://registry.npmjs.org/engine.io-client/-/engine.io-client-3.4.0.tgz\",\n+      \"integrity\": \"sha512-a4J5QO2k99CM2a0b12IznnyQndoEvtA4UAldhGzKqnHf42I3Qs2W5SPnDvatZRcMaNZs4IevVicBPayxYt6FwA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"component-emitter\": \"1.2.1\",\n         \"component-inherit\": \"0.0.3\",\n-        \"debug\": \"~3.1.0\",\n-        \"engine.io-parser\": \"~2.1.1\",\n+        \"debug\": \"~4.1.0\",\n+        \"engine.io-parser\": \"~2.2.0\",\n         \"has-cors\": \"1.1.0\",\n         \"indexof\": \"0.0.1\",\n         \"parseqs\": \"0.0.5\",\n@@ -1857,27 +1805,21 @@\n         \"yeast\": \"0.1.2\"\n       },\n       \"dependencies\": {\n-        \"debug\": {\n-          \"version\": \"3.1.0\",\n-          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.1.0.tgz\",\n-          \"integrity\": \"sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==\",\n+        \"ws\": {\n+          \"version\": \"6.1.4\",\n+          \"resolved\": \"https://registry.npmjs.org/ws/-/ws-6.1.4.tgz\",\n+          \"integrity\": \"sha512-eqZfL+NE/YQc1/ZynhojeV8q+H050oR8AZ2uIev7RU10svA9ZnJUddHcOUZTJLinZ9yEfdA2kSATS2qZK5fhJA==\",\n           \"dev\": true,\n           \"requires\": {\n-            \"ms\": \"2.0.0\"\n+            \"async-limiter\": \"~1.0.0\"\n           }\n-        },\n-        \"ms\": {\n-          \"version\": \"2.0.0\",\n-          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\n-          \"integrity\": \"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=\",\n-          \"dev\": true\n         }\n       }\n     },\n     \"engine.io-parser\": {\n-      \"version\": \"2.1.3\",\n-      \"resolved\": \"https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-2.1.3.tgz\",\n-      \"integrity\": \"sha512-6HXPre2O4Houl7c4g7Ic/XzPnHBvaEmN90vtRO9uLmwtRqQmTOw0QMevL1TOfL2Cpu1VzsaTmMotQgMdkzGkVA==\",\n+      \"version\": \"2.2.0\",\n+      \"resolved\": \"https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-2.2.0.tgz\",\n+      \"integrity\": \"sha512-6I3qD9iUxotsC5HEMuuGsKA0cXerGz+4uGcXQEkfBidgKf0amsjrrtwcbwK/nzpZBxclXlV7gGl9dgWvu4LF6w==\",\n       \"dev\": true,\n       \"requires\": {\n         \"after\": \"0.8.2\",\n@@ -1897,17 +1839,21 @@\n       }\n     },\n     \"es-abstract\": {\n-      \"version\": \"1.13.0\",\n-      \"resolved\": \"https://registry.npmjs.org/es-abstract/-/es-abstract-1.13.0.tgz\",\n-      \"integrity\": \"sha512-vDZfg/ykNxQVwup/8E1BZhVzFfBxs9NqMzGcvIJrqg5k2/5Za2bWo40dK2J1pgLngZ7c+Shh8lwYtLGyrwPutg==\",\n+      \"version\": \"1.16.0\",\n+      \"resolved\": \"https://registry.npmjs.org/es-abstract/-/es-abstract-1.16.0.tgz\",\n+      \"integrity\": \"sha512-xdQnfykZ9JMEiasTAJZJdMWCQ1Vm00NBw79/AWi7ELfZuuPCSOMDZbT9mkOfSctVtfhb+sAAzrm+j//GjjLHLg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"es-to-primitive\": \"^1.2.0\",\n         \"function-bind\": \"^1.1.1\",\n         \"has\": \"^1.0.3\",\n+        \"has-symbols\": \"^1.0.0\",\n         \"is-callable\": \"^1.1.4\",\n         \"is-regex\": \"^1.0.4\",\n-        \"object-keys\": \"^1.0.12\"\n+        \"object-inspect\": \"^1.6.0\",\n+        \"object-keys\": \"^1.1.1\",\n+        \"string.prototype.trimleft\": \"^2.1.0\",\n+        \"string.prototype.trimright\": \"^2.1.0\"\n       }\n     },\n     \"es-to-primitive\": {\n@@ -1995,6 +1941,15 @@\n             \"which\": \"^1.2.9\"\n           }\n         },\n+        \"debug\": {\n+          \"version\": \"3.2.6\",\n+          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.2.6.tgz\",\n+          \"integrity\": \"sha512-mel+jf7nrtEl5Pn1Qx46zARXKDpBbvzezse7p7LqINmdoIk8PYP5SySaxEmYv6TZ0JyEKA1hsCId6DIhgITtWQ==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"ms\": \"^2.1.1\"\n+          }\n+        },\n         \"strip-ansi\": {\n           \"version\": \"4.0.0\",\n           \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz\",\n@@ -2046,9 +2001,9 @@\n       }\n     },\n     \"eslint-module-utils\": {\n-      \"version\": \"2.4.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.4.0.tgz\",\n-      \"integrity\": \"sha512-14tltLm38Eu3zS+mt0KvILC3q8jyIAH518MlG+HO0p+yK885Lb1UHTY/UgR91eOyGdmxAPb+OLoW4znqIT6Ndw==\",\n+      \"version\": \"2.4.1\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.4.1.tgz\",\n+      \"integrity\": \"sha512-H6DOj+ejw7Tesdgbfs4jeS4YMFrT8uI8xwd1gtQqXssaR0EQ26L+2O/w6wkYFy2MymON0fTwHmXBvvfLNZVZEw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"debug\": \"^2.6.8\",\n@@ -2316,9 +2271,9 @@\n       }\n     },\n     \"eslint-visitor-keys\": {\n-      \"version\": \"1.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz\",\n-      \"integrity\": \"sha512-qzm/XxIbxm/FHyH341ZrbnMUpe+5Bocte9xkmFMzPMjRaZMcXww+MpBptFvtU+79L362nqiLhekCxCxDPaUMBQ==\",\n+      \"version\": \"1.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-1.1.0.tgz\",\n+      \"integrity\": \"sha512-8y9YjtM1JBJU/A9Kc+SbaOV4y29sSWckBwMHa+FGtVj5gN/sbnKDf6xJUl+8g7FAij9LVaP8C24DUiH/f/2Z9A==\",\n       \"dev\": true\n     },\n     \"espree\": {\n@@ -2356,15 +2311,15 @@\n       }\n     },\n     \"estraverse\": {\n-      \"version\": \"4.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-4.2.0.tgz\",\n-      \"integrity\": \"sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=\",\n+      \"version\": \"4.3.0\",\n+      \"resolved\": \"https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz\",\n+      \"integrity\": \"sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==\",\n       \"dev\": true\n     },\n     \"esutils\": {\n-      \"version\": \"2.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/esutils/-/esutils-2.0.2.tgz\",\n-      \"integrity\": \"sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs=\",\n+      \"version\": \"2.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz\",\n+      \"integrity\": \"sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==\",\n       \"dev\": true\n     },\n     \"events\": {\n@@ -2383,36 +2338,6 @@\n         \"safe-buffer\": \"^5.1.1\"\n       }\n     },\n-    \"execa\": {\n-      \"version\": \"1.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/execa/-/execa-1.0.0.tgz\",\n-      \"integrity\": \"sha512-adbxcyWV46qiHyvSp50TKt05tB4tK3HcmF7/nxfAdhnox83seTDbwnaqKO4sXRy7roHAIFqJP/Rw/AuEbX61LA==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"cross-spawn\": \"^6.0.0\",\n-        \"get-stream\": \"^4.0.0\",\n-        \"is-stream\": \"^1.1.0\",\n-        \"npm-run-path\": \"^2.0.0\",\n-        \"p-finally\": \"^1.0.0\",\n-        \"signal-exit\": \"^3.0.0\",\n-        \"strip-eof\": \"^1.0.0\"\n-      },\n-      \"dependencies\": {\n-        \"cross-spawn\": {\n-          \"version\": \"6.0.5\",\n-          \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz\",\n-          \"integrity\": \"sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"nice-try\": \"^1.0.4\",\n-            \"path-key\": \"^2.0.1\",\n-            \"semver\": \"^5.5.0\",\n-            \"shebang-command\": \"^1.2.0\",\n-            \"which\": \"^1.2.9\"\n-          }\n-        }\n-      }\n-    },\n     \"extend\": {\n       \"version\": \"3.0.2\",\n       \"resolved\": \"https://registry.npmjs.org/extend/-/extend-3.0.2.tgz\",\n@@ -2515,6 +2440,17 @@\n         \"graceful-fs\": \"^4.1.2\",\n         \"rimraf\": \"~2.6.2\",\n         \"write\": \"^0.2.1\"\n+      },\n+      \"dependencies\": {\n+        \"rimraf\": {\n+          \"version\": \"2.6.3\",\n+          \"resolved\": \"https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz\",\n+          \"integrity\": \"sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"glob\": \"^7.1.3\"\n+          }\n+        }\n       }\n     },\n     \"follow-redirects\": {\n@@ -2612,15 +2548,6 @@\n       \"integrity\": \"sha512-jp4tHawyV7+fkkSKyvjuLZswblUtz+SQKzSWnBbii16BuZksJlU1wuBYXY75r+duh/llF1ur6oNwi+2ZzjKZ7g==\",\n       \"dev\": true\n     },\n-    \"get-stream\": {\n-      \"version\": \"4.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz\",\n-      \"integrity\": \"sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"pump\": \"^3.0.0\"\n-      }\n-    },\n     \"getpass\": {\n       \"version\": \"0.1.7\",\n       \"resolved\": \"https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz\",\n@@ -2657,9 +2584,9 @@\n       \"dev\": true\n     },\n     \"graceful-fs\": {\n-      \"version\": \"4.1.15\",\n-      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.1.15.tgz\",\n-      \"integrity\": \"sha512-6uHUhOPEBgQ24HM+r6b/QwWfZq+yiFcipKFrOFiBEnWdy5sdzYoi+pJeQaPI5qOLRFqWmAXUPQNsielzdLoecA==\",\n+      \"version\": \"4.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.3.tgz\",\n+      \"integrity\": \"sha512-a30VEBm4PEdx1dRB7MFK7BejejvCvBronbLjht+sHuGYj8PHs7M/5Z+rt5lw551vZ7yfTCj4Vuyy3mSJytDWRQ==\",\n       \"dev\": true\n     },\n     \"growl\": {\n@@ -3262,9 +3189,9 @@\n       }\n     },\n     \"handlebars\": {\n-      \"version\": \"4.1.2\",\n-      \"resolved\": \"https://registry.npmjs.org/handlebars/-/handlebars-4.1.2.tgz\",\n-      \"integrity\": \"sha512-nvfrjqvt9xQ8Z/w0ijewdD/vvWDTOweBUm96NTr66Wfvo1mJenBLwcYmPs3TIBP5ruzYGD7Hx/DaM9RmhroGPw==\",\n+      \"version\": \"4.4.5\",\n+      \"resolved\": \"https://registry.npmjs.org/handlebars/-/handlebars-4.4.5.tgz\",\n+      \"integrity\": \"sha512-0Ce31oWVB7YidkaTq33ZxEbN+UDxMMgThvCe8ptgQViymL5DPis9uLdTA13MiRPhgvqyxIegugrP97iK3JeBHg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"neo-async\": \"^2.6.0\",\n@@ -3280,13 +3207,13 @@\n           \"dev\": true\n         },\n         \"uglify-js\": {\n-          \"version\": \"3.5.15\",\n-          \"resolved\": \"https://registry.npmjs.org/uglify-js/-/uglify-js-3.5.15.tgz\",\n-          \"integrity\": \"sha512-fe7aYFotptIddkwcm6YuA0HmknBZ52ZzOsUxZEdhhkSsz7RfjHDX2QDxwKTiv4JQ5t5NhfmpgAK+J7LiDhKSqg==\",\n+          \"version\": \"3.6.4\",\n+          \"resolved\": \"https://registry.npmjs.org/uglify-js/-/uglify-js-3.6.4.tgz\",\n+          \"integrity\": \"sha512-9Yc2i881pF4BPGhjteCXQNaXx1DCwm3dtOyBaG2hitHjLWOczw/ki8vD1bqyT3u6K0Ms/FpCShkmfg+FtlOfYA==\",\n           \"dev\": true,\n           \"optional\": true,\n           \"requires\": {\n-            \"commander\": \"~2.20.0\",\n+            \"commander\": \"~2.20.3\",\n             \"source-map\": \"~0.6.1\"\n           }\n         }\n@@ -3439,9 +3366,9 @@\n       }\n     },\n     \"hosted-git-info\": {\n-      \"version\": \"2.7.1\",\n-      \"resolved\": \"https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.7.1.tgz\",\n-      \"integrity\": \"sha512-7T/BxH19zbcCTa8XkMlbK5lTo1WtgkFi3GvdWEyNuc4Vex7/9Dqbnpsf4JMydcfj9HCg4zUWFTL3Za6lapg5/w==\",\n+      \"version\": \"2.8.5\",\n+      \"resolved\": \"https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.5.tgz\",\n+      \"integrity\": \"sha512-kssjab8CvdXfcXMXVcvsXum4Hwdq9XGtRD3TteMEvEbq0LXyiNQr6AprqKqfeaDXze7SxWvRxdpwE6ku7ikLkg==\",\n       \"dev\": true\n     },\n     \"htmlescape\": {\n@@ -3591,12 +3518,6 @@\n         \"xtend\": \"^4.0.0\"\n       }\n     },\n-    \"invert-kv\": {\n-      \"version\": \"2.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/invert-kv/-/invert-kv-2.0.0.tgz\",\n-      \"integrity\": \"sha512-wPVv/y/QQ/Uiirj/vh3oP+1Ww+AWehmi1g5fFWGPF6IpCBCDVrhgHRMvrLfdYcwDh3QJbGXDW4JAuzxElLSqKA==\",\n-      \"dev\": true\n-    },\n     \"is-arrayish\": {\n       \"version\": \"0.2.1\",\n       \"resolved\": \"https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz\",\n@@ -3718,9 +3639,9 @@\n       },\n       \"dependencies\": {\n         \"semver\": {\n-          \"version\": \"6.1.0\",\n-          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.1.0.tgz\",\n-          \"integrity\": \"sha512-kCqEOOHoBcFs/2Ccuk4Xarm/KiWRSLEX9CAZF8xkJ6ZPlIoTZ8V5f7J16vYLJqDbR7KrxTJpR2lqjIEm2Qx9cQ==\",\n+          \"version\": \"6.3.0\",\n+          \"resolved\": \"https://registry.npmjs.org/semver/-/semver-6.3.0.tgz\",\n+          \"integrity\": \"sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==\",\n           \"dev\": true\n         }\n       }\n@@ -3760,15 +3681,6 @@\n         \"source-map\": \"^0.6.1\"\n       },\n       \"dependencies\": {\n-        \"debug\": {\n-          \"version\": \"4.1.1\",\n-          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.1.1.tgz\",\n-          \"integrity\": \"sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"ms\": \"^2.1.1\"\n-          }\n-        },\n         \"source-map\": {\n           \"version\": \"0.6.1\",\n           \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\",\n@@ -3884,12 +3796,13 @@\n       }\n     },\n     \"jsx-ast-utils\": {\n-      \"version\": \"2.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-2.1.0.tgz\",\n-      \"integrity\": \"sha512-yDGDG2DS4JcqhA6blsuYbtsT09xL8AoLuUR2Gb5exrw7UEM19sBcOTq+YBBhrNbl0PUC4R4LnFu+dHg2HKeVvA==\",\n+      \"version\": \"2.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-2.2.3.tgz\",\n+      \"integrity\": \"sha512-EdIHFMm+1BPynpKOpdPqiOsvnIrInRGJD7bzPZdPkjitQEqpdpUuFpq4T0npZFKTiB3RhWFdGN+oqOJIdhDhQA==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"array-includes\": \"^3.0.3\"\n+        \"array-includes\": \"^3.0.3\",\n+        \"object.assign\": \"^4.1.0\"\n       }\n     },\n     \"keccak\": {\n@@ -3923,15 +3836,6 @@\n         }\n       }\n     },\n-    \"lcid\": {\n-      \"version\": \"2.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/lcid/-/lcid-2.0.0.tgz\",\n-      \"integrity\": \"sha512-avPEb8P8EGnwXKClwsNUgryVjllcRqtMYa49NTsbQagYuT1DcXnl1915oxWjoyGrXR6zH/Y0Zc96xWsPcoDKeA==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"invert-kv\": \"^2.0.0\"\n-      }\n-    },\n     \"levn\": {\n       \"version\": \"0.3.0\",\n       \"resolved\": \"https://registry.npmjs.org/levn/-/levn-0.3.0.tgz\",\n@@ -4042,15 +3946,6 @@\n       \"integrity\": \"sha512-c3sIjNUow0+8swNwVpqoH4YCShKNFkMaw6oH1mNS2haDZQqkeZFlHS3dhoeEbKKmJB4vXpJucU6oH75aDYeE9g==\",\n       \"dev\": true\n     },\n-    \"map-age-cleaner\": {\n-      \"version\": \"0.1.3\",\n-      \"resolved\": \"https://registry.npmjs.org/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz\",\n-      \"integrity\": \"sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"p-defer\": \"^1.0.0\"\n-      }\n-    },\n     \"md5.js\": {\n       \"version\": \"1.3.5\",\n       \"resolved\": \"https://registry.npmjs.org/md5.js/-/md5.js-1.3.5.tgz\",\n@@ -4061,17 +3956,6 @@\n         \"safe-buffer\": \"^5.1.2\"\n       }\n     },\n-    \"mem\": {\n-      \"version\": \"4.3.0\",\n-      \"resolved\": \"https://registry.npmjs.org/mem/-/mem-4.3.0.tgz\",\n-      \"integrity\": \"sha512-qX2bG48pTqYRVmDB37rn/6PT7LcR8T7oAX3bf99u1Tt1nzxYfxkgqDwUwolPlXweM0XzBOBFzSx4kfp7KP1s/w==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"map-age-cleaner\": \"^0.1.1\",\n-        \"mimic-fn\": \"^2.0.0\",\n-        \"p-is-promise\": \"^2.0.0\"\n-      }\n-    },\n     \"merge-source-map\": {\n       \"version\": \"1.1.0\",\n       \"resolved\": \"https://registry.npmjs.org/merge-source-map/-/merge-source-map-1.1.0.tgz\",\n@@ -4121,9 +4005,9 @@\n       }\n     },\n     \"mimic-fn\": {\n-      \"version\": \"2.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz\",\n-      \"integrity\": \"sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==\",\n+      \"version\": \"1.2.0\",\n+      \"resolved\": \"https://registry.npmjs.org/mimic-fn/-/mimic-fn-1.2.0.tgz\",\n+      \"integrity\": \"sha512-jf84uxzwiuiIVKiOLpfYk7N46TSy8ubTonmneY9vrpHNAnp0QBt2BxWV9dO3/j+BoVAb+a5G6YDPW3M5HOdMWQ==\",\n       \"dev\": true\n     },\n     \"minimalistic-assert\": {\n@@ -4225,6 +4109,24 @@\n         }\n       }\n     },\n+    \"mock-require\": {\n+      \"version\": \"3.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/mock-require/-/mock-require-3.0.3.tgz\",\n+      \"integrity\": \"sha512-lLzfLHcyc10MKQnNUCv7dMcoY/2Qxd6wJfbqCcVk3LDb8An4hF6ohk5AztrvgKhJCqj36uyzi/p5se+tvyD+Wg==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"get-caller-file\": \"^1.0.2\",\n+        \"normalize-path\": \"^2.1.1\"\n+      },\n+      \"dependencies\": {\n+        \"get-caller-file\": {\n+          \"version\": \"1.0.3\",\n+          \"resolved\": \"https://registry.npmjs.org/get-caller-file/-/get-caller-file-1.0.3.tgz\",\n+          \"integrity\": \"sha512-3t6rVToeoZfYSGd8YoLFR2DJkiQrIiUrGcjvFX2mDw3bn6k2OtwHN0TNCLbBO+w8qTvimhDkv+LSscbJY1vE6w==\",\n+          \"dev\": true\n+        }\n+      }\n+    },\n     \"module-deps\": {\n       \"version\": \"6.2.0\",\n       \"resolved\": \"https://registry.npmjs.org/module-deps/-/module-deps-6.2.0.tgz\",\n@@ -4249,9 +4151,9 @@\n       }\n     },\n     \"ms\": {\n-      \"version\": \"2.1.1\",\n-      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.1.tgz\",\n-      \"integrity\": \"sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg==\",\n+      \"version\": \"2.1.2\",\n+      \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.1.2.tgz\",\n+      \"integrity\": \"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\",\n       \"dev\": true\n     },\n     \"mute-stream\": {\n@@ -4290,12 +4192,6 @@\n       \"integrity\": \"sha512-AO81vsIO1k1sM4Zrd6Hu7regmJN1NSiAja10gc4bX3F0wd+9rQmcuHQaHVQCYIEC8iFXnE+mavh23GOt7wBgug==\",\n       \"dev\": true\n     },\n-    \"nice-try\": {\n-      \"version\": \"1.0.5\",\n-      \"resolved\": \"https://registry.npmjs.org/nice-try/-/nice-try-1.0.5.tgz\",\n-      \"integrity\": \"sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==\",\n-      \"dev\": true\n-    },\n     \"node-jsonrpc-request\": {\n       \"version\": \"1.0.0\",\n       \"resolved\": \"https://registry.npmjs.org/node-jsonrpc-request/-/node-jsonrpc-request-1.0.0.tgz\",\n@@ -4318,21 +4214,15 @@\n         \"validate-npm-package-license\": \"^3.0.1\"\n       }\n     },\n-    \"npm-run-path\": {\n-      \"version\": \"2.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/npm-run-path/-/npm-run-path-2.0.2.tgz\",\n-      \"integrity\": \"sha1-NakjLfo11wZ7TLLd8jV7GHFTbF8=\",\n+    \"normalize-path\": {\n+      \"version\": \"2.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/normalize-path/-/normalize-path-2.1.1.tgz\",\n+      \"integrity\": \"sha1-GrKLVW4Zg2Oowab35vogE3/mrtk=\",\n       \"dev\": true,\n       \"requires\": {\n-        \"path-key\": \"^2.0.0\"\n+        \"remove-trailing-separator\": \"^1.0.1\"\n       }\n     },\n-    \"number-is-nan\": {\n-      \"version\": \"1.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/number-is-nan/-/number-is-nan-1.0.1.tgz\",\n-      \"integrity\": \"sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=\",\n-      \"dev\": true\n-    },\n     \"nyc\": {\n       \"version\": \"14.1.1\",\n       \"resolved\": \"https://registry.npmjs.org/nyc/-/nyc-14.1.1.tgz\",\n@@ -4396,6 +4286,18 @@\n       \"integrity\": \"sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==\",\n       \"dev\": true\n     },\n+    \"object.assign\": {\n+      \"version\": \"4.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/object.assign/-/object.assign-4.1.0.tgz\",\n+      \"integrity\": \"sha512-exHJeq6kBKj58mqGyTQ9DFvrZC/eR6OwxzoM9YRoGBqrXYonaFyGiFMuc9VZrXf7DarreEwMpurG3dd+CNyW5w==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"define-properties\": \"^1.1.2\",\n+        \"function-bind\": \"^1.1.1\",\n+        \"has-symbols\": \"^1.0.0\",\n+        \"object-keys\": \"^1.0.11\"\n+      }\n+    },\n     \"once\": {\n       \"version\": \"1.4.0\",\n       \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\n@@ -4412,14 +4314,6 @@\n       \"dev\": true,\n       \"requires\": {\n         \"mimic-fn\": \"^1.0.0\"\n-      },\n-      \"dependencies\": {\n-        \"mimic-fn\": {\n-          \"version\": \"1.2.0\",\n-          \"resolved\": \"https://registry.npmjs.org/mimic-fn/-/mimic-fn-1.2.0.tgz\",\n-          \"integrity\": \"sha512-jf84uxzwiuiIVKiOLpfYk7N46TSy8ubTonmneY9vrpHNAnp0QBt2BxWV9dO3/j+BoVAb+a5G6YDPW3M5HOdMWQ==\",\n-          \"dev\": true\n-        }\n       }\n     },\n     \"optimist\": {\n@@ -4472,45 +4366,16 @@\n       \"integrity\": \"sha1-/7xJiDNuDoM94MFox+8VISGqf7M=\",\n       \"dev\": true\n     },\n-    \"os-locale\": {\n-      \"version\": \"3.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/os-locale/-/os-locale-3.1.0.tgz\",\n-      \"integrity\": \"sha512-Z8l3R4wYWM40/52Z+S265okfFj8Kt2cC2MKY+xNi3kFs+XGI7WXu/I309QQQYbRW4ijiZ+yxs9pqEhJh0DqW3Q==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"execa\": \"^1.0.0\",\n-        \"lcid\": \"^2.0.0\",\n-        \"mem\": \"^4.0.0\"\n-      }\n-    },\n     \"os-tmpdir\": {\n       \"version\": \"1.0.2\",\n       \"resolved\": \"https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",\n       \"integrity\": \"sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=\",\n       \"dev\": true\n     },\n-    \"p-defer\": {\n-      \"version\": \"1.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/p-defer/-/p-defer-1.0.0.tgz\",\n-      \"integrity\": \"sha1-n26xgvbJqozXQwBKfU+WsZaw+ww=\",\n-      \"dev\": true\n-    },\n-    \"p-finally\": {\n-      \"version\": \"1.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz\",\n-      \"integrity\": \"sha1-P7z7FbiZpEEjs0ttzBi3JDNqLK4=\",\n-      \"dev\": true\n-    },\n-    \"p-is-promise\": {\n-      \"version\": \"2.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/p-is-promise/-/p-is-promise-2.1.0.tgz\",\n-      \"integrity\": \"sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\",\n-      \"dev\": true\n-    },\n     \"p-limit\": {\n-      \"version\": \"2.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-2.2.0.tgz\",\n-      \"integrity\": \"sha512-pZbTJpoUsCzV48Mc9Nh51VbwO0X9cuPFE8gYwx9BTCt9SF8/b7Zljd2fVgOxhIF/HDTKgpVzs+GPhyKfjLLFRQ==\",\n+      \"version\": \"2.2.1\",\n+      \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-2.2.1.tgz\",\n+      \"integrity\": \"sha512-85Tk+90UCVWvbDavCLKPOLC9vvY8OwEX/RtKF+/1OADJMVlFfEHOiMTPVyxg7mk/dKa+ipdHm0OUkTvCpMTuwg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"p-try\": \"^2.0.0\"\n@@ -4624,12 +4489,6 @@\n       \"integrity\": \"sha1-NlQX3t5EQw0cEa9hAn+s8HS9/FM=\",\n       \"dev\": true\n     },\n-    \"path-key\": {\n-      \"version\": \"2.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz\",\n-      \"integrity\": \"sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A=\",\n-      \"dev\": true\n-    },\n     \"path-parse\": {\n       \"version\": \"1.0.6\",\n       \"resolved\": \"https://registry.npmjs.org/path-parse/-/path-parse-1.0.6.tgz\",\n@@ -4861,16 +4720,6 @@\n         \"safe-buffer\": \"^5.1.2\"\n       }\n     },\n-    \"pump\": {\n-      \"version\": \"3.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/pump/-/pump-3.0.0.tgz\",\n-      \"integrity\": \"sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==\",\n-      \"dev\": true,\n-      \"requires\": {\n-        \"end-of-stream\": \"^1.1.0\",\n-        \"once\": \"^1.3.1\"\n-      }\n-    },\n     \"punycode\": {\n       \"version\": \"1.4.1\",\n       \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz\",\n@@ -4886,155 +4735,29 @@\n       }\n     },\n     \"qrcode\": {\n-      \"version\": \"1.3.3\",\n-      \"resolved\": \"https://registry.npmjs.org/qrcode/-/qrcode-1.3.3.tgz\",\n-      \"integrity\": \"sha512-SH7V13AcJusH3GT8bMNOGz4w0L+LjcpNOU/NiOgtBhT/5DoWeZE6D5ntMJnJ84AMkoaM4kjJJoHoh9g++8lWFg==\",\n+      \"version\": \"1.4.2\",\n+      \"resolved\": \"https://registry.npmjs.org/qrcode/-/qrcode-1.4.2.tgz\",\n+      \"integrity\": \"sha512-eR6RgxFYPDFH+zFLTJKtoNP/RlsHANQb52AUmQ2bGDPMuUw7jJb0F+DNEgx7qQGIElrbFxWYMc0/B91zLZPF9Q==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"can-promise\": \"0.0.1\",\n         \"dijkstrajs\": \"^1.0.1\",\n         \"isarray\": \"^2.0.1\",\n         \"pngjs\": \"^3.3.0\",\n-        \"yargs\": \"^12.0.5\"\n+        \"yargs\": \"^13.2.4\"\n       },\n       \"dependencies\": {\n-        \"ansi-regex\": {\n-          \"version\": \"3.0.0\",\n-          \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-3.0.0.tgz\",\n-          \"integrity\": \"sha1-7QMXwyIGT3lGbAKWa922Bas32Zg=\",\n-          \"dev\": true\n-        },\n-        \"cliui\": {\n-          \"version\": \"4.1.0\",\n-          \"resolved\": \"https://registry.npmjs.org/cliui/-/cliui-4.1.0.tgz\",\n-          \"integrity\": \"sha512-4FG+RSG9DL7uEwRUZXZn3SS34DiDPfzP0VOiEwtUWlE+AR2EIg+hSyvrIgUUfhdgR/UkAeW2QHgeP+hWrXs7jQ==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"string-width\": \"^2.1.1\",\n-            \"strip-ansi\": \"^4.0.0\",\n-            \"wrap-ansi\": \"^2.0.0\"\n-          }\n-        },\n-        \"get-caller-file\": {\n-          \"version\": \"1.0.3\",\n-          \"resolved\": \"https://registry.npmjs.org/get-caller-file/-/get-caller-file-1.0.3.tgz\",\n-          \"integrity\": \"sha512-3t6rVToeoZfYSGd8YoLFR2DJkiQrIiUrGcjvFX2mDw3bn6k2OtwHN0TNCLbBO+w8qTvimhDkv+LSscbJY1vE6w==\",\n-          \"dev\": true\n-        },\n         \"isarray\": {\n-          \"version\": \"2.0.4\",\n-          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-2.0.4.tgz\",\n-          \"integrity\": \"sha512-GMxXOiUirWg1xTKRipM0Ek07rX+ubx4nNVElTJdNLYmNO/2YrDkgJGw9CljXn+r4EWiDQg/8lsRdHyg2PJuUaA==\",\n-          \"dev\": true\n-        },\n-        \"require-main-filename\": {\n-          \"version\": \"1.0.1\",\n-          \"resolved\": \"https://registry.npmjs.org/require-main-filename/-/require-main-filename-1.0.1.tgz\",\n-          \"integrity\": \"sha1-l/cXtp1IeE9fUmpsWqj/3aBVpNE=\",\n+          \"version\": \"2.0.5\",\n+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz\",\n+          \"integrity\": \"sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==\",\n           \"dev\": true\n-        },\n-        \"string-width\": {\n-          \"version\": \"2.1.1\",\n-          \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-2.1.1.tgz\",\n-          \"integrity\": \"sha512-nOqH59deCq9SRHlxq1Aw85Jnt4w6KvLKqWVik6oA9ZklXLNIOlqg4F2yrT1MVaTjAqvVwdfeZ7w7aCvJD7ugkw==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"is-fullwidth-code-point\": \"^2.0.0\",\n-            \"strip-ansi\": \"^4.0.0\"\n-          }\n-        },\n-        \"strip-ansi\": {\n-          \"version\": \"4.0.0\",\n-          \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-4.0.0.tgz\",\n-          \"integrity\": \"sha1-qEeQIusaw2iocTibY1JixQXuNo8=\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"ansi-regex\": \"^3.0.0\"\n-          }\n-        },\n-        \"wrap-ansi\": {\n-          \"version\": \"2.1.0\",\n-          \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-2.1.0.tgz\",\n-          \"integrity\": \"sha1-2Pw9KE3QV5T+hJc8rs3Rz4JP3YU=\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"string-width\": \"^1.0.1\",\n-            \"strip-ansi\": \"^3.0.1\"\n-          },\n-          \"dependencies\": {\n-            \"ansi-regex\": {\n-              \"version\": \"2.1.1\",\n-              \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz\",\n-              \"integrity\": \"sha1-w7M6te42DYbg5ijwRorn7yfWVN8=\",\n-              \"dev\": true\n-            },\n-            \"is-fullwidth-code-point\": {\n-              \"version\": \"1.0.0\",\n-              \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz\",\n-              \"integrity\": \"sha1-754xOG8DGn8NZDr4L95QxFfvAMs=\",\n-              \"dev\": true,\n-              \"requires\": {\n-                \"number-is-nan\": \"^1.0.0\"\n-              }\n-            },\n-            \"string-width\": {\n-              \"version\": \"1.0.2\",\n-              \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz\",\n-              \"integrity\": \"sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=\",\n-              \"dev\": true,\n-              \"requires\": {\n-                \"code-point-at\": \"^1.0.0\",\n-                \"is-fullwidth-code-point\": \"^1.0.0\",\n-                \"strip-ansi\": \"^3.0.0\"\n-              }\n-            },\n-            \"strip-ansi\": {\n-              \"version\": \"3.0.1\",\n-              \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz\",\n-              \"integrity\": \"sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=\",\n-              \"dev\": true,\n-              \"requires\": {\n-                \"ansi-regex\": \"^2.0.0\"\n-              }\n-            }\n-          }\n-        },\n-        \"yargs\": {\n-          \"version\": \"12.0.5\",\n-          \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-12.0.5.tgz\",\n-          \"integrity\": \"sha512-Lhz8TLaYnxq/2ObqHDql8dX8CJi97oHxrjUcYtzKbbykPtVW9WB+poxI+NM2UIzsMgNCZTIf0AQwsjK5yMAqZw==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"cliui\": \"^4.0.0\",\n-            \"decamelize\": \"^1.2.0\",\n-            \"find-up\": \"^3.0.0\",\n-            \"get-caller-file\": \"^1.0.1\",\n-            \"os-locale\": \"^3.0.0\",\n-            \"require-directory\": \"^2.1.1\",\n-            \"require-main-filename\": \"^1.0.1\",\n-            \"set-blocking\": \"^2.0.0\",\n-            \"string-width\": \"^2.0.0\",\n-            \"which-module\": \"^2.0.0\",\n-            \"y18n\": \"^3.2.1 || ^4.0.0\",\n-            \"yargs-parser\": \"^11.1.1\"\n-          }\n-        },\n-        \"yargs-parser\": {\n-          \"version\": \"11.1.1\",\n-          \"resolved\": \"https://registry.npmjs.org/yargs-parser/-/yargs-parser-11.1.1.tgz\",\n-          \"integrity\": \"sha512-C6kB/WJDiaxONLJQnF8ccx9SEeoTTLek8RVbaOIsrAUS8VrBEXfmeSnCZxygc+XC2sNMBIwOOnfcxiynjHsVSQ==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"camelcase\": \"^5.0.0\",\n-            \"decamelize\": \"^1.2.0\"\n-          }\n         }\n       }\n     },\n     \"qs\": {\n-      \"version\": \"6.7.0\",\n-      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.7.0.tgz\",\n-      \"integrity\": \"sha512-VCdBRNFTX1fyE7Nb6FYoURo/SPe62QCaAyzJvUjwRaIsc+NePBEniHlvxFmmX56+HZphIGtV0XeCirBtpDrTyQ==\",\n+      \"version\": \"6.9.0\",\n+      \"resolved\": \"https://registry.npmjs.org/qs/-/qs-6.9.0.tgz\",\n+      \"integrity\": \"sha512-27RP4UotQORTpmNQDX8BHPukOnBP3p1uUJY5UnDhaJB+rMt9iMsok724XL+UHU23bEFOHRMQ2ZhI99qOWUMGFA==\",\n       \"dev\": true\n     },\n     \"querystring\": {\n@@ -5075,9 +4798,9 @@\n       }\n     },\n     \"react-is\": {\n-      \"version\": \"16.8.6\",\n-      \"resolved\": \"https://registry.npmjs.org/react-is/-/react-is-16.8.6.tgz\",\n-      \"integrity\": \"sha512-aUk3bHfZ2bRSVFFbbeVS4i+lNPZr3/WM5jT2J5omUVV1zzcs1nAaf3l51ctA5FFvCRbhrH0bdAsRRQddFJZPtA==\",\n+      \"version\": \"16.11.0\",\n+      \"resolved\": \"https://registry.npmjs.org/react-is/-/react-is-16.11.0.tgz\",\n+      \"integrity\": \"sha512-gbBVYR2p8mnriqAwWx9LbuUrShnAuSCNnuPGyc7GJrMVQtPDAh8iLpv7FRuMPFb56KkaVZIYSz1PrjI9q0QPCw==\",\n       \"dev\": true\n     },\n     \"read-only-stream\": {\n@@ -5134,6 +4857,12 @@\n         \"es6-error\": \"^4.0.1\"\n       }\n     },\n+    \"remove-trailing-separator\": {\n+      \"version\": \"1.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz\",\n+      \"integrity\": \"sha1-wkvOKig62tW8P1jg1IJJuSN52O8=\",\n+      \"dev\": true\n+    },\n     \"repl.history\": {\n       \"version\": \"0.1.4\",\n       \"resolved\": \"https://registry.npmjs.org/repl.history/-/repl.history-0.1.4.tgz\",\n@@ -5261,9 +4990,9 @@\n       }\n     },\n     \"rimraf\": {\n-      \"version\": \"2.6.3\",\n-      \"resolved\": \"https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz\",\n-      \"integrity\": \"sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==\",\n+      \"version\": \"2.7.1\",\n+      \"resolved\": \"https://registry.npmjs.org/rimraf/-/rimraf-2.7.1.tgz\",\n+      \"integrity\": \"sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==\",\n       \"dev\": true,\n       \"requires\": {\n         \"glob\": \"^7.1.3\"\n@@ -5329,15 +5058,15 @@\n       }\n     },\n     \"scryptsy\": {\n-      \"version\": \"2.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/scryptsy/-/scryptsy-2.0.0.tgz\",\n-      \"integrity\": \"sha1-Jiw28CMc+nZU4jY/o5TNLexm83g=\",\n+      \"version\": \"2.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/scryptsy/-/scryptsy-2.1.0.tgz\",\n+      \"integrity\": \"sha512-1CdSqHQowJBnMAFyPEBRfqag/YP9OF394FV+4YREIJX4ljD7OxvQRDayyoyyCk+senRjSkP6VnUNQmVQqB6g7w==\",\n       \"dev\": true\n     },\n     \"secp256k1\": {\n-      \"version\": \"3.7.0\",\n-      \"resolved\": \"https://registry.npmjs.org/secp256k1/-/secp256k1-3.7.0.tgz\",\n-      \"integrity\": \"sha512-YlUIghD6ilkMkzmFJpIdVjiamv2S8lNZ9YMwm1XII9JC0NcR5qQiv2DOp/G37sExBtaMStzba4VDJtvBXEbmMQ==\",\n+      \"version\": \"3.7.1\",\n+      \"resolved\": \"https://registry.npmjs.org/secp256k1/-/secp256k1-3.7.1.tgz\",\n+      \"integrity\": \"sha512-1cf8sbnRreXrQFdH6qsg2H71Xw91fCCS9Yp021GnUNJzWJS/py96fS4lHbnTnouLp08Xj6jBoBB6V78Tdbdu5g==\",\n       \"dev\": true,\n       \"requires\": {\n         \"bindings\": \"^1.5.0\",\n@@ -5346,14 +5075,14 @@\n         \"create-hash\": \"^1.2.0\",\n         \"drbg.js\": \"^1.0.1\",\n         \"elliptic\": \"^6.4.1\",\n-        \"nan\": \"^2.13.2\",\n+        \"nan\": \"^2.14.0\",\n         \"safe-buffer\": \"^5.1.2\"\n       },\n       \"dependencies\": {\n         \"elliptic\": {\n-          \"version\": \"6.4.1\",\n-          \"resolved\": \"https://registry.npmjs.org/elliptic/-/elliptic-6.4.1.tgz\",\n-          \"integrity\": \"sha512-BsXLz5sqX8OHcsh7CqBMztyXARmGQ3LWPtGjJi6DiJHq5C/qvi9P3OqgswKSDftbu8+IoI/QDTAm2fFnQ9SZSQ==\",\n+          \"version\": \"6.5.1\",\n+          \"resolved\": \"https://registry.npmjs.org/elliptic/-/elliptic-6.5.1.tgz\",\n+          \"integrity\": \"sha512-xvJINNLbTeWQjrl6X+7eQCrIy/YPv5XCpKW6kB5mKvtnGILoLDcySuwomfdzt0BMdLNVnuRNTuzKNHj0bva1Cg==\",\n           \"dev\": true,\n           \"requires\": {\n             \"bn.js\": \"^4.4.0\",\n@@ -5368,9 +5097,9 @@\n       }\n     },\n     \"semver\": {\n-      \"version\": \"5.7.0\",\n-      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.7.0.tgz\",\n-      \"integrity\": \"sha512-Ya52jSX2u7QKghxeoFGpLwCtGlt7j0oY9DYb5apt9nPlJ42ID+ulTXESnt/qAQcoSERyZ5sl3LDIOw0nAn/5DA==\",\n+      \"version\": \"5.7.1\",\n+      \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.7.1.tgz\",\n+      \"integrity\": \"sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==\",\n       \"dev\": true\n     },\n     \"set-blocking\": {\n@@ -5447,33 +5176,22 @@\n       }\n     },\n     \"slp-unit-test-data\": {\n-      \"version\": \"git+https://github.com/simpleledger/slp-unit-test-data.git#4b0f5e773e3beea14a3385b2222b4d2239524b63\",\n+      \"version\": \"git+https://github.com/simpleledger/slp-unit-test-data.git#22d9c5c95c3f1e1fb75958a82a211f4e99dcb9f1\",\n       \"from\": \"git+https://github.com/simpleledger/slp-unit-test-data.git\",\n       \"dev\": true\n     },\n     \"socket.io\": {\n-      \"version\": \"2.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/socket.io/-/socket.io-2.2.0.tgz\",\n-      \"integrity\": \"sha512-wxXrIuZ8AILcn+f1B4ez4hJTPG24iNgxBBDaJfT6MsyOhVYiTXWexGoPkd87ktJG8kQEcL/NBvRi64+9k4Kc0w==\",\n+      \"version\": \"2.3.0\",\n+      \"resolved\": \"https://registry.npmjs.org/socket.io/-/socket.io-2.3.0.tgz\",\n+      \"integrity\": \"sha512-2A892lrj0GcgR/9Qk81EaY2gYhCBxurV0PfmmESO6p27QPrUK1J3zdns+5QPqvUYK2q657nSj0guoIil9+7eFg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"debug\": \"~4.1.0\",\n-        \"engine.io\": \"~3.3.1\",\n+        \"engine.io\": \"~3.4.0\",\n         \"has-binary2\": \"~1.0.2\",\n         \"socket.io-adapter\": \"~1.1.0\",\n-        \"socket.io-client\": \"2.2.0\",\n-        \"socket.io-parser\": \"~3.3.0\"\n-      },\n-      \"dependencies\": {\n-        \"debug\": {\n-          \"version\": \"4.1.1\",\n-          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-4.1.1.tgz\",\n-          \"integrity\": \"sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"ms\": \"^2.1.1\"\n-          }\n-        }\n+        \"socket.io-client\": \"2.3.0\",\n+        \"socket.io-parser\": \"~3.4.0\"\n       }\n     },\n     \"socket.io-adapter\": {\n@@ -5483,17 +5201,17 @@\n       \"dev\": true\n     },\n     \"socket.io-client\": {\n-      \"version\": \"2.2.0\",\n-      \"resolved\": \"https://registry.npmjs.org/socket.io-client/-/socket.io-client-2.2.0.tgz\",\n-      \"integrity\": \"sha512-56ZrkTDbdTLmBIyfFYesgOxsjcLnwAKoN4CiPyTVkMQj3zTUh0QAx3GbvIvLpFEOvQWu92yyWICxB0u7wkVbYA==\",\n+      \"version\": \"2.3.0\",\n+      \"resolved\": \"https://registry.npmjs.org/socket.io-client/-/socket.io-client-2.3.0.tgz\",\n+      \"integrity\": \"sha512-cEQQf24gET3rfhxZ2jJ5xzAOo/xhZwK+mOqtGRg5IowZsMgwvHwnf/mCRapAAkadhM26y+iydgwsXGObBB5ZdA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"backo2\": \"1.0.2\",\n         \"base64-arraybuffer\": \"0.1.5\",\n         \"component-bind\": \"1.0.0\",\n         \"component-emitter\": \"1.2.1\",\n-        \"debug\": \"~3.1.0\",\n-        \"engine.io-client\": \"~3.3.1\",\n+        \"debug\": \"~4.1.0\",\n+        \"engine.io-client\": \"~3.4.0\",\n         \"has-binary2\": \"~1.0.2\",\n         \"has-cors\": \"1.1.0\",\n         \"indexof\": \"0.0.1\",\n@@ -5504,54 +5222,58 @@\n         \"to-array\": \"0.1.4\"\n       },\n       \"dependencies\": {\n-        \"debug\": {\n-          \"version\": \"3.1.0\",\n-          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.1.0.tgz\",\n-          \"integrity\": \"sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"ms\": \"2.0.0\"\n-          }\n+        \"isarray\": {\n+          \"version\": \"2.0.1\",\n+          \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-2.0.1.tgz\",\n+          \"integrity\": \"sha1-o32U7ZzaLVmGXJ92/llu4fM4dB4=\",\n+          \"dev\": true\n         },\n         \"ms\": {\n           \"version\": \"2.0.0\",\n           \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\n           \"integrity\": \"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=\",\n           \"dev\": true\n+        },\n+        \"socket.io-parser\": {\n+          \"version\": \"3.3.0\",\n+          \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-3.3.0.tgz\",\n+          \"integrity\": \"sha512-hczmV6bDgdaEbVqhAeVMM/jfUfzuEZHsQg6eOmLgJht6G3mPKMxYm75w2+qhAQZ+4X+1+ATZ+QFKeOZD5riHng==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"component-emitter\": \"1.2.1\",\n+            \"debug\": \"~3.1.0\",\n+            \"isarray\": \"2.0.1\"\n+          },\n+          \"dependencies\": {\n+            \"debug\": {\n+              \"version\": \"3.1.0\",\n+              \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.1.0.tgz\",\n+              \"integrity\": \"sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==\",\n+              \"dev\": true,\n+              \"requires\": {\n+                \"ms\": \"2.0.0\"\n+              }\n+            }\n+          }\n         }\n       }\n     },\n     \"socket.io-parser\": {\n-      \"version\": \"3.3.0\",\n-      \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-3.3.0.tgz\",\n-      \"integrity\": \"sha512-hczmV6bDgdaEbVqhAeVMM/jfUfzuEZHsQg6eOmLgJht6G3mPKMxYm75w2+qhAQZ+4X+1+ATZ+QFKeOZD5riHng==\",\n+      \"version\": \"3.4.0\",\n+      \"resolved\": \"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-3.4.0.tgz\",\n+      \"integrity\": \"sha512-/G/VOI+3DBp0+DJKW4KesGnQkQPFmUCbA/oO2QGT6CWxU7hLGWqU3tyuzeSK/dqcyeHsQg1vTe9jiZI8GU9SCQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"component-emitter\": \"1.2.1\",\n-        \"debug\": \"~3.1.0\",\n+        \"debug\": \"~4.1.0\",\n         \"isarray\": \"2.0.1\"\n       },\n       \"dependencies\": {\n-        \"debug\": {\n-          \"version\": \"3.1.0\",\n-          \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.1.0.tgz\",\n-          \"integrity\": \"sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==\",\n-          \"dev\": true,\n-          \"requires\": {\n-            \"ms\": \"2.0.0\"\n-          }\n-        },\n         \"isarray\": {\n           \"version\": \"2.0.1\",\n           \"resolved\": \"https://registry.npmjs.org/isarray/-/isarray-2.0.1.tgz\",\n           \"integrity\": \"sha1-o32U7ZzaLVmGXJ92/llu4fM4dB4=\",\n           \"dev\": true\n-        },\n-        \"ms\": {\n-          \"version\": \"2.0.0\",\n-          \"resolved\": \"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\n-          \"integrity\": \"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=\",\n-          \"dev\": true\n         }\n       }\n     },\n@@ -5562,9 +5284,9 @@\n       \"dev\": true\n     },\n     \"spawn-wrap\": {\n-      \"version\": \"1.4.2\",\n-      \"resolved\": \"https://registry.npmjs.org/spawn-wrap/-/spawn-wrap-1.4.2.tgz\",\n-      \"integrity\": \"sha512-vMwR3OmmDhnxCVxM8M+xO/FtIp6Ju/mNaDfCMMW7FDcLRTPFWUswec4LXJHTJE2hwTI9O0YBfygu4DalFl7Ylg==\",\n+      \"version\": \"1.4.3\",\n+      \"resolved\": \"https://registry.npmjs.org/spawn-wrap/-/spawn-wrap-1.4.3.tgz\",\n+      \"integrity\": \"sha512-IgB8md0QW/+tWqcavuFgKYR/qIRvJkRLPJDFaoXtLLUaVcCDK0+HeFTkmQHj3eprcYhc+gOl0aEA1w7qZlYezw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"foreground-child\": \"^1.5.6\",\n@@ -5602,9 +5324,9 @@\n       }\n     },\n     \"spdx-license-ids\": {\n-      \"version\": \"3.0.4\",\n-      \"resolved\": \"https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.4.tgz\",\n-      \"integrity\": \"sha512-7j8LYJLeY/Yb6ACbQ7F76qy5jHkp0U6jgBfJsk97bwWlVUnUWsAgpyaCvo17h0/RQGnQ036tVDomiwoI4pDkQA==\",\n+      \"version\": \"3.0.5\",\n+      \"resolved\": \"https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.5.tgz\",\n+      \"integrity\": \"sha512-J+FWzZoynJEXGphVIS+XEh3kFSjZX/1i9gFBaWQcB+/tmpe2qUsSBABpcxqxnAxFdiUFEgAX1bjYGQvIZmoz9Q==\",\n       \"dev\": true\n     },\n     \"sprintf-js\": {\n@@ -5738,6 +5460,26 @@\n         \"function-bind\": \"^1.0.2\"\n       }\n     },\n+    \"string.prototype.trimleft\": {\n+      \"version\": \"2.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/string.prototype.trimleft/-/string.prototype.trimleft-2.1.0.tgz\",\n+      \"integrity\": \"sha512-FJ6b7EgdKxxbDxc79cOlok6Afd++TTs5szo+zJTUyow3ycrRfJVE2pq3vcN53XexvKZu/DJMDfeI/qMiZTrjTw==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"define-properties\": \"^1.1.3\",\n+        \"function-bind\": \"^1.1.1\"\n+      }\n+    },\n+    \"string.prototype.trimright\": {\n+      \"version\": \"2.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/string.prototype.trimright/-/string.prototype.trimright-2.1.0.tgz\",\n+      \"integrity\": \"sha512-fXZTSV55dNBwv16uw+hh5jkghxSnc5oHq+5K/gXgizHwAvMetdAJlHqqoFC1FSDVPYWLkAKl2cxpUT41sV7nSg==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"define-properties\": \"^1.1.3\",\n+        \"function-bind\": \"^1.1.1\"\n+      }\n+    },\n     \"string_decoder\": {\n       \"version\": \"1.1.1\",\n       \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n@@ -5762,12 +5504,6 @@\n       \"integrity\": \"sha1-IzTBjpx1n3vdVv3vfprj1YjmjtM=\",\n       \"dev\": true\n     },\n-    \"strip-eof\": {\n-      \"version\": \"1.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/strip-eof/-/strip-eof-1.0.0.tgz\",\n-      \"integrity\": \"sha1-u0P/VZim6wXYm1n80SnJgzE2Br8=\",\n-      \"dev\": true\n-    },\n     \"strip-json-comments\": {\n       \"version\": \"2.0.1\",\n       \"resolved\": \"https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz\",\n@@ -5851,9 +5587,9 @@\n       }\n     },\n     \"tape\": {\n-      \"version\": \"4.10.2\",\n-      \"resolved\": \"https://registry.npmjs.org/tape/-/tape-4.10.2.tgz\",\n-      \"integrity\": \"sha512-mgl23h7W2yuk3N85FOYrin2OvThTYWdwbk6XQ1pr2PMJieyW2FM/4Bu/+kD/wecb3aZ0Enm+Syinyq467OPq2w==\",\n+      \"version\": \"4.11.0\",\n+      \"resolved\": \"https://registry.npmjs.org/tape/-/tape-4.11.0.tgz\",\n+      \"integrity\": \"sha512-yixvDMX7q7JIs/omJSzSZrqulOV51EC9dK8dM0TzImTIkHWfe2/kFyL5v+d9C+SrCMaICk59ujsqFAVidDqDaA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"deep-equal\": \"~1.0.1\",\n@@ -5862,19 +5598,19 @@\n         \"function-bind\": \"~1.1.1\",\n         \"glob\": \"~7.1.4\",\n         \"has\": \"~1.0.3\",\n-        \"inherits\": \"~2.0.3\",\n+        \"inherits\": \"~2.0.4\",\n         \"minimist\": \"~1.2.0\",\n         \"object-inspect\": \"~1.6.0\",\n-        \"resolve\": \"~1.10.1\",\n+        \"resolve\": \"~1.11.1\",\n         \"resumer\": \"~0.0.0\",\n         \"string.prototype.trim\": \"~1.1.2\",\n         \"through\": \"~2.3.8\"\n       },\n       \"dependencies\": {\n         \"glob\": {\n-          \"version\": \"7.1.4\",\n-          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.4.tgz\",\n-          \"integrity\": \"sha512-hkLPepehmnKk41pUGm3sYxoFs/umurYfYJCerbXEyFIWcAzvpipAgVkBqqT9RBKMGjnq6kMuyYwha6csxbiM1A==\",\n+          \"version\": \"7.1.5\",\n+          \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.1.5.tgz\",\n+          \"integrity\": \"sha512-J9dlskqUXK1OeTOYBEn5s8aMukWMwWfs+rPTn/jn50Ux4MNXVhubL1wu/j2t+H4NVI+cXEcCaYellqaPVGXNqQ==\",\n           \"dev\": true,\n           \"requires\": {\n             \"fs.realpath\": \"^1.0.0\",\n@@ -5885,16 +5621,22 @@\n             \"path-is-absolute\": \"^1.0.0\"\n           }\n         },\n+        \"inherits\": {\n+          \"version\": \"2.0.4\",\n+          \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\n+          \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\",\n+          \"dev\": true\n+        },\n         \"minimist\": {\n           \"version\": \"1.2.0\",\n           \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",\n           \"integrity\": \"sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=\",\n           \"dev\": true\n         },\n         \"resolve\": {\n-          \"version\": \"1.10.1\",\n-          \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.10.1.tgz\",\n-          \"integrity\": \"sha512-KuIe4mf++td/eFb6wkaPbMDnP6kObCaEtIDuHOUED6MNUo4K670KZUHuuvYPZDxNF0WVLw49n06M2m2dXphEzA==\",\n+          \"version\": \"1.11.1\",\n+          \"resolved\": \"https://registry.npmjs.org/resolve/-/resolve-1.11.1.tgz\",\n+          \"integrity\": \"sha512-vIpgF6wfuJOZI7KKKSP+HmiKggadPQAdsp5HiC1mvqnfp0gF1vdwgBWZIdrVft9pgqoMFQN+R7BSWZiBxx+BBw==\",\n           \"dev\": true,\n           \"requires\": {\n             \"path-parse\": \"^1.0.6\"\n@@ -5982,12 +5724,6 @@\n         \"punycode\": \"^1.4.1\"\n       }\n     },\n-    \"trim-right\": {\n-      \"version\": \"1.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/trim-right/-/trim-right-1.0.1.tgz\",\n-      \"integrity\": \"sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM=\",\n-      \"dev\": true\n-    },\n     \"ts-node\": {\n       \"version\": \"7.0.1\",\n       \"resolved\": \"https://registry.npmjs.org/ts-node/-/ts-node-7.0.1.tgz\",\n@@ -6070,6 +5806,23 @@\n       \"integrity\": \"sha512-7uc1O8h1M1g0rArakJdf0uLRSSgFcYexrVoKo+bzJd32gd4gDy2L/Z+8/FjPnU9ydY3pEnVPtr9FyscYY60K1g==\",\n       \"dev\": true\n     },\n+    \"typescript\": {\n+      \"version\": \"3.6.4\",\n+      \"resolved\": \"https://registry.npmjs.org/typescript/-/typescript-3.6.4.tgz\",\n+      \"integrity\": \"sha512-unoCll1+l+YK4i4F8f22TaNVPRHcD9PA3yCuZ8g5e0qGqlVlJ/8FSateOLLSagn+Yg5+ZwuPkL8LFUc0Jcvksg==\",\n+      \"dev\": true\n+    },\n+    \"typescript-tslint-plugin\": {\n+      \"version\": \"0.5.4\",\n+      \"resolved\": \"https://registry.npmjs.org/typescript-tslint-plugin/-/typescript-tslint-plugin-0.5.4.tgz\",\n+      \"integrity\": \"sha512-CQEfGC+p0SoBARI4N2LrGsWJsp4/OE+uKZ68xsWYKHWqMFq4DFQHqOVlK0deEricSN01NmDTqjap63Pw/DHieg==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"minimatch\": \"^3.0.4\",\n+        \"mock-require\": \"^3.0.2\",\n+        \"vscode-languageserver\": \"^5.1.0\"\n+      }\n+    },\n     \"uglify-es\": {\n       \"version\": \"3.3.9\",\n       \"resolved\": \"https://registry.npmjs.org/uglify-es/-/uglify-es-3.3.9.tgz\",\n@@ -6120,9 +5873,9 @@\n       \"dev\": true\n     },\n     \"unorm\": {\n-      \"version\": \"1.5.0\",\n-      \"resolved\": \"https://registry.npmjs.org/unorm/-/unorm-1.5.0.tgz\",\n-      \"integrity\": \"sha512-sMfSWoiRaXXeDZSXC+YRZ23H4xchQpwxjpw1tmfR+kgbBCaOgln4NI0LXejJIhnBuKINrB3WRn+ZI8IWssirVw==\",\n+      \"version\": \"1.6.0\",\n+      \"resolved\": \"https://registry.npmjs.org/unorm/-/unorm-1.6.0.tgz\",\n+      \"integrity\": \"sha512-b2/KCUlYZUeA7JFUuRJZPUtr4gZvBh7tavtv4fvk4+KV9pfGiR6CQAQAWl49ZpR3ts2dk4FYkP7EIgDJoiOLDA==\",\n       \"dev\": true\n     },\n     \"uri-js\": {\n@@ -6200,9 +5953,9 @@\n       }\n     },\n     \"varuint-bitcoin\": {\n-      \"version\": \"1.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/varuint-bitcoin/-/varuint-bitcoin-1.1.0.tgz\",\n-      \"integrity\": \"sha512-jCEPG+COU/1Rp84neKTyDJQr478/hAfVp5xxYn09QEH0yBjbmPeMfuuQIrp+BUD83hybtYZKhr5elV3bvdV1bA==\",\n+      \"version\": \"1.1.2\",\n+      \"resolved\": \"https://registry.npmjs.org/varuint-bitcoin/-/varuint-bitcoin-1.1.2.tgz\",\n+      \"integrity\": \"sha512-4EVb+w4rx+YfVM32HQX42AbbT7/1f5zwAYhIujKXKk8NQK+JfRVl3pqT3hjNn/L+RstigmGGKVwHA/P0wgITZw==\",\n       \"dev\": true,\n       \"requires\": {\n         \"safe-buffer\": \"^5.1.1\"\n@@ -6225,6 +5978,44 @@\n       \"integrity\": \"sha512-iq+S7vZJE60yejDYM0ek6zg308+UZsdtPExWP9VZoCFCz1zkJoXFnAX7aZfd/ZwrkidzdUZL0C/ryW+JwAiIGw==\",\n       \"dev\": true\n     },\n+    \"vscode-jsonrpc\": {\n+      \"version\": \"4.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/vscode-jsonrpc/-/vscode-jsonrpc-4.0.0.tgz\",\n+      \"integrity\": \"sha512-perEnXQdQOJMTDFNv+UF3h1Y0z4iSiaN9jIlb0OqIYgosPCZGYh/MCUlkFtV2668PL69lRDO32hmvL2yiidUYg==\",\n+      \"dev\": true\n+    },\n+    \"vscode-languageserver\": {\n+      \"version\": \"5.2.1\",\n+      \"resolved\": \"https://registry.npmjs.org/vscode-languageserver/-/vscode-languageserver-5.2.1.tgz\",\n+      \"integrity\": \"sha512-GuayqdKZqAwwaCUjDvMTAVRPJOp/SLON3mJ07eGsx/Iq9HjRymhKWztX41rISqDKhHVVyFM+IywICyZDla6U3A==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"vscode-languageserver-protocol\": \"3.14.1\",\n+        \"vscode-uri\": \"^1.0.6\"\n+      }\n+    },\n+    \"vscode-languageserver-protocol\": {\n+      \"version\": \"3.14.1\",\n+      \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-protocol/-/vscode-languageserver-protocol-3.14.1.tgz\",\n+      \"integrity\": \"sha512-IL66BLb2g20uIKog5Y2dQ0IiigW0XKrvmWiOvc0yXw80z3tMEzEnHjaGAb3ENuU7MnQqgnYJ1Cl2l9RvNgDi4g==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"vscode-jsonrpc\": \"^4.0.0\",\n+        \"vscode-languageserver-types\": \"3.14.0\"\n+      }\n+    },\n+    \"vscode-languageserver-types\": {\n+      \"version\": \"3.14.0\",\n+      \"resolved\": \"https://registry.npmjs.org/vscode-languageserver-types/-/vscode-languageserver-types-3.14.0.tgz\",\n+      \"integrity\": \"sha512-lTmS6AlAlMHOvPQemVwo3CezxBp0sNB95KNPkqp3Nxd5VFEnuG1ByM0zlRWos0zjO3ZWtkvhal0COgiV1xIA4A==\",\n+      \"dev\": true\n+    },\n+    \"vscode-uri\": {\n+      \"version\": \"1.0.8\",\n+      \"resolved\": \"https://registry.npmjs.org/vscode-uri/-/vscode-uri-1.0.8.tgz\",\n+      \"integrity\": \"sha512-obtSWTlbJ+a+TFRYGaUumtVwb+InIUVI0Lu0VBUAPmj2cU5JutEXg3xUE0c2J5Tcy7h2DEKVJBFi+Y9ZSFzzPQ==\",\n+      \"dev\": true\n+    },\n     \"which\": {\n       \"version\": \"1.3.1\",\n       \"resolved\": \"https://registry.npmjs.org/which/-/which-1.3.1.tgz\",\n@@ -6249,12 +6040,6 @@\n         \"bs58check\": \"<3.0.0\"\n       }\n     },\n-    \"window-or-global\": {\n-      \"version\": \"1.0.1\",\n-      \"resolved\": \"https://registry.npmjs.org/window-or-global/-/window-or-global-1.0.1.tgz\",\n-      \"integrity\": \"sha1-2+RboqKRqrxW1iz2bEW3+jIpRt4=\",\n-      \"dev\": true\n-    },\n     \"window-size\": {\n       \"version\": \"0.1.4\",\n       \"resolved\": \"https://registry.npmjs.org/window-size/-/window-size-0.1.4.tgz\",\n@@ -6305,12 +6090,12 @@\n       }\n     },\n     \"ws\": {\n-      \"version\": \"6.1.4\",\n-      \"resolved\": \"https://registry.npmjs.org/ws/-/ws-6.1.4.tgz\",\n-      \"integrity\": \"sha512-eqZfL+NE/YQc1/ZynhojeV8q+H050oR8AZ2uIev7RU10svA9ZnJUddHcOUZTJLinZ9yEfdA2kSATS2qZK5fhJA==\",\n+      \"version\": \"7.2.0\",\n+      \"resolved\": \"https://registry.npmjs.org/ws/-/ws-7.2.0.tgz\",\n+      \"integrity\": \"sha512-+SqNqFbwTm/0DC18KYzIsMTnEWpLwJsiasW/O17la4iDRRIO9uaHbvKiAS3AHgTiuuWerK/brj4O6MYZkei9xg==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"async-limiter\": \"~1.0.0\"\n+        \"async-limiter\": \"^1.0.0\"\n       }\n     },\n     \"xmlhttprequest-ssl\": {\n@@ -6338,28 +6123,27 @@\n       \"dev\": true\n     },\n     \"yargs\": {\n-      \"version\": \"13.2.4\",\n-      \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-13.2.4.tgz\",\n-      \"integrity\": \"sha512-HG/DWAJa1PAnHT9JAhNa8AbAv3FPaiLzioSjCcmuXXhP8MlpHO5vwls4g4j6n30Z74GVQj8Xa62dWVx1QCGklg==\",\n+      \"version\": \"13.3.0\",\n+      \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-13.3.0.tgz\",\n+      \"integrity\": \"sha512-2eehun/8ALW8TLoIl7MVaRUrg+yCnenu8B4kBlRxj3GJGDKU1Og7sMXPNm1BYyM1DOJmTZ4YeN/Nwxv+8XJsUA==\",\n       \"dev\": true,\n       \"requires\": {\n         \"cliui\": \"^5.0.0\",\n         \"find-up\": \"^3.0.0\",\n         \"get-caller-file\": \"^2.0.1\",\n-        \"os-locale\": \"^3.1.0\",\n         \"require-directory\": \"^2.1.1\",\n         \"require-main-filename\": \"^2.0.0\",\n         \"set-blocking\": \"^2.0.0\",\n         \"string-width\": \"^3.0.0\",\n         \"which-module\": \"^2.0.0\",\n         \"y18n\": \"^4.0.0\",\n-        \"yargs-parser\": \"^13.1.0\"\n+        \"yargs-parser\": \"^13.1.1\"\n       }\n     },\n     \"yargs-parser\": {\n-      \"version\": \"13.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/yargs-parser/-/yargs-parser-13.1.0.tgz\",\n-      \"integrity\": \"sha512-Yq+32PrijHRri0vVKQEm+ys8mbqWjLiwQkMFNXEENutzLPP0bE4Lcd4iA3OQY5HF+GD3xXxf0MEHb8E4/SA3AA==\",\n+      \"version\": \"13.1.1\",\n+      \"resolved\": \"https://registry.npmjs.org/yargs-parser/-/yargs-parser-13.1.1.tgz\",\n+      \"integrity\": \"sha512-oVAVsHz6uFrg3XQheFII8ESO2ssAf9luWuAd6Wexsu4F3OtIW0o8IribPXYrD4WC24LWtPrJlGy87y5udK+dxQ==\",\n       \"dev\": true,\n       \"requires\": {\n         \"camelcase\": \"^5.0.0\","
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"slpjs\",\n-  \"version\": \"0.21.3\",\n+  \"version\": \"0.21.4\",\n   \"description\": \"Simple Ledger Protocol (SLP) JavaScript Library\",\n   \"main\": \"index.js\",\n   \"files\": [\n@@ -39,12 +39,14 @@\n     \"bitbox-sdk\": \"8.2.1\",\n     \"bitcoin-rpc-promise\": \"^2.1.6\",\n     \"browserify\": \"^16.2.2\",\n+    \"grpc-bchrpc-node\": \"0.5.2\",\n     \"mkdirp\": \"^0.5.1\",\n     \"mocha\": \"^5.1.1\",\n     \"slp-unit-test-data\": \"git+https://github.com/simpleledger/slp-unit-test-data.git\",\n     \"ts-node\": \"^7.0.1\",\n     \"uglify-es\": \"^3.3.9\",\n-    \"grpc-bchrpc-node\": \"0.5.2\"\n+    \"typescript-tslint-plugin\": \"^0.5.4\",\n+    \"typescript\": \"^3.6.4\"\n   },\n   \"dependencies\": {\n     \"@types/lodash\": \"^4.14.120\","
        },
        {
          "filename": "readme.md",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -772,6 +772,9 @@ Running the unit tests require node.js v8.15+.\n \n # Change Log\n \n+### 0.21.4\n+- Add ts linting / allow json comments\n+\n ### 0.21.3\n - Judge NFT1 child created directly from valid NFT1 Parent Genesis as valid\n - Removed map files from npm package module"
        },
        {
          "filename": "tsconfig.json",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -7,6 +7,9 @@\n         \"moduleResolution\": \"node\",\n         \"lib\":[ \"es2017\" ],\n         \"sourceMap\": true, \n+        \"plugins\": [\n+            { \"name\": \"typescript-tslint-plugin\" }\n+        ]\n     },\n     \"include\": [\n         \"./lib\","
        },
        {
          "filename": "tslint.json",
          "status": "added",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -0,0 +1,8 @@\n+// You can modify the configuration here with your own.\n+// Make sure that your json is valid, and if you run into\n+// other issues, try checking the console for errors.\n+\n+{\n+    \"extends\": [\"tslint:recommended\"],\n+    \"rules\": {} // add additional rules and their configuration\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 5,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8fdfc622d3231f9079b6da6701d0ee5331e7928d",
            "date": "2021-04-11T15:09:19Z",
            "author_login": "jcramer"
          },
          {
            "sha": "39aaed9673eb504c4603628e3d879bc0a6b1ff00",
            "date": "2021-04-11T15:02:41Z",
            "author_login": "jcramer"
          },
          {
            "sha": "d5db3edb451cc40fbbcd7b3fbf44cffa598df820",
            "date": "2021-03-30T16:21:13Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3ee1a73a40fc698039733a75d93bf5e4500d7534",
            "date": "2021-02-28T20:16:57Z",
            "author_login": "jcramer"
          },
          {
            "sha": "ba4380535b7054ab9a7028cfff256b418b634e1e",
            "date": "2021-02-28T20:16:45Z",
            "author_login": "jcramer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:N/I:H/A:H",
    "cwe_id": "CWE-20",
    "description": "A specially crafted Bitcoin script can cause a discrepancy between the specified SLP consensus rules and the validation result of the slpjs npm package. An attacker could create a specially crafted Bitcoin script in order to cause a hard-fork from the SLP consensus. Affected users can upgrade to any version >= 0.21.4.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2019-11-15T23:15:11.443",
    "last_modified": "2024-11-21T04:31:08.293",
    "fix_date": "2019-10-26T20:56:21Z"
  },
  "references": [
    {
      "url": "https://github.com/simpleledger/slpjs/commit/ac8809b42e47790a6f0205991b36f2699ed10c84#diff-fe58606994c412ba56a65141a7aa4a62L701",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slpjs/security/advisories/GHSA-425c-ccf3-3jrr",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slpjs/commit/ac8809b42e47790a6f0205991b36f2699ed10c84#diff-fe58606994c412ba56a65141a7aa4a62L701",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slpjs/security/advisories/GHSA-425c-ccf3-3jrr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:09.195234",
    "processing_status": "enhanced"
  }
}