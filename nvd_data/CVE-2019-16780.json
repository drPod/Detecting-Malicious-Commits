{
  "cve_id": "CVE-2019-16780",
  "github_data": {
    "repository": "WordPress/wordpress-develop",
    "fix_commit": "505dd6a20b6fc3d06130018c1caeff764248c29e",
    "related_commits": [
      "505dd6a20b6fc3d06130018c1caeff764248c29e",
      "505dd6a20b6fc3d06130018c1caeff764248c29e"
    ],
    "patch_url": "https://github.com/WordPress/wordpress-develop/commit/505dd6a20b6fc3d06130018c1caeff764248c29e.patch",
    "fix_commit_details": {
      "sha": "505dd6a20b6fc3d06130018c1caeff764248c29e",
      "commit_date": "2019-12-12T18:10:56Z",
      "author": {
        "login": "whyisjake",
        "type": "User",
        "stats": {
          "total_commits": 206,
          "average_weekly_commits": 0.18101933216168717,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 37
        }
      },
      "commit_message": {
        "title": "Prevent stored XSS in the block editor.",
        "length": 268,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 274,
        "additions": 271,
        "deletions": 3
      },
      "files": [
        {
          "filename": "src/wp-includes/blocks.php",
          "status": "modified",
          "additions": 227,
          "deletions": 3,
          "patch": "@@ -74,11 +74,11 @@ function has_blocks( $post = null ) {\n  * @since 5.0.0\n  * @see parse_blocks()\n  *\n- * @param string                  $block_type Full Block type to look for.\n+ * @param string                  $block_name Full Block type to look for.\n  * @param int|string|WP_Post|null $post Optional. Post content, post ID, or post object. Defaults to global $post.\n  * @return bool Whether the post content contains the specified block.\n  */\n-function has_block( $block_type, $post = null ) {\n+function has_block( $block_name, $post = null ) {\n \tif ( ! has_blocks( $post ) ) {\n \t\treturn false;\n \t}\n@@ -90,7 +90,30 @@ function has_block( $block_type, $post = null ) {\n \t\t}\n \t}\n \n-\treturn false !== strpos( $post, '<!-- wp:' . $block_type . ' ' );\n+\t/*\n+\t * Normalize block name to include namespace, if provided as non-namespaced.\n+\t * This matches behavior for WordPress 5.0.0 - 5.3.0 in matching blocks by\n+\t * their serialized names.\n+\t */\n+\tif ( false === strpos( $block_name, '/' ) ) {\n+\t\t$block_name = 'core/' . $block_name;\n+\t}\n+\n+\t// Test for existence of block by its fully qualified name.\n+\t$has_block = false !== strpos( $post, '<!-- wp:' . $block_name . ' ' );\n+\n+\tif ( ! $has_block ) {\n+\t\t/*\n+\t\t * If the given block name would serialize to a different name, test for\n+\t\t * existence by the serialized form.\n+\t\t */\n+\t\t$serialized_block_name = strip_core_block_namespace( $block_name );\n+\t\tif ( $serialized_block_name !== $block_name ) {\n+\t\t\t$has_block = false !== strpos( $post, '<!-- wp:' . $serialized_block_name . ' ' );\n+\t\t}\n+\t}\n+\n+\treturn $has_block;\n }\n \n /**\n@@ -113,6 +136,207 @@ function get_dynamic_block_names() {\n \treturn $dynamic_block_names;\n }\n \n+/**\n+ * Given an array of attributes, returns a string in the serialized attributes\n+ * format prepared for post content.\n+ *\n+ * The serialized result is a JSON-encoded string, with unicode escape sequence\n+ * substitution for characters which might otherwise interfere with embedding\n+ * the result in an HTML comment.\n+ *\n+ * @since 5.3.1\n+ *\n+ * @param array $attributes Attributes object.\n+ * @return string Serialized attributes.\n+ */\n+function serialize_block_attributes( $block_attributes ) {\n+\t$encoded_attributes = json_encode( $block_attributes );\n+\t$encoded_attributes = preg_replace( '/--/', '\\\\u002d\\\\u002d', $encoded_attributes );\n+\t$encoded_attributes = preg_replace( '/</', '\\\\u003c', $encoded_attributes );\n+\t$encoded_attributes = preg_replace( '/>/', '\\\\u003e', $encoded_attributes );\n+\t$encoded_attributes = preg_replace( '/&/', '\\\\u0026', $encoded_attributes );\n+\t// Regex: /\\\\\"/\n+\t$encoded_attributes = preg_replace( '/\\\\\\\\\"/', '\\\\u0022', $encoded_attributes );\n+\n+\treturn $encoded_attributes;\n+}\n+\n+/**\n+ * Returns the block name to use for serialization. This will remove the default\n+ * \"core/\" namespace from a block name.\n+ *\n+ * @since 5.3.1\n+ *\n+ * @param string $block_name Original block name.\n+ * @return string Block name to use for serialization.\n+ */\n+function strip_core_block_namespace( $block_name = null ) {\n+\tif ( is_string( $block_name ) && 0 === strpos( $block_name, 'core/' ) ) {\n+\t\treturn substr( $block_name, 5 );\n+\t}\n+\n+\treturn $block_name;\n+}\n+\n+/**\n+ * Returns the content of a block, including comment delimiters.\n+ *\n+ * @since 5.3.1\n+ *\n+ * @param string $block_name Block name.\n+ * @param array  $attributes Block attributes.\n+ * @param string $content    Block save content.\n+ * @return string Comment-delimited block content.\n+ */\n+function get_comment_delimited_block_content( $block_name = null, $block_attributes, $block_content ) {\n+\tif ( is_null( $block_name ) ) {\n+\t\treturn $block_content;\n+\t}\n+\n+\t$serialized_block_name = strip_core_block_namespace( $block_name );\n+\t$serialized_attributes = empty( $block_attributes ) ? '' : serialize_block_attributes( $block_attributes ) . ' ';\n+\n+\tif ( empty( $block_content ) ) {\n+\t\treturn sprintf( '<!-- wp:%s %s/-->', $serialized_block_name, $serialized_attributes );\n+\t}\n+\n+\treturn sprintf(\n+\t\t'<!-- wp:%s %s-->%s<!-- /wp:%s -->',\n+\t\t$serialized_block_name,\n+\t\t$serialized_attributes,\n+\t\t$block_content,\n+\t\t$serialized_block_name\n+\t);\n+}\n+\n+/**\n+ * Returns the content of a block, including comment delimiters, serializing all\n+ * attributes from the given parsed block.\n+ *\n+ * This should be used when preparing a block to be saved to post content.\n+ * Prefer `render_block` when preparing a block for display. Unlike\n+ * `render_block`, this does not evaluate a block's `render_callback`, and will\n+ * instead preserve the markup as parsed.\n+ *\n+ * @since 5.3.1\n+ *\n+ * @param WP_Block_Parser_Block $block A single parsed block object.\n+ * @return string String of rendered HTML.\n+ */\n+function serialize_block( $block ) {\n+\t$block_content = '';\n+\n+\t$index = 0;\n+\tforeach ( $block['innerContent'] as $chunk ) {\n+\t\t$block_content .= is_string( $chunk ) ? $chunk : serialize_block( $block['innerBlocks'][ $index++ ] );\n+\t}\n+\n+\tif ( ! is_array( $block['attrs'] ) ) {\n+\t\t$block['attrs'] = array();\n+\t}\n+\n+\treturn get_comment_delimited_block_content(\n+\t\t$block['blockName'],\n+\t\t$block['attrs'],\n+\t\t$block_content\n+\t);\n+}\n+\n+/**\n+ * Returns a joined string of the aggregate serialization of the given parsed\n+ * blocks.\n+ *\n+ * @since 5.3.1\n+ *\n+ * @param WP_Block_Parser_Block[] $blocks Parsed block objects.\n+ * @return string String of rendered HTML.\n+ */\n+function serialize_blocks( $blocks ) {\n+\treturn implode( '', array_map( 'serialize_block', $blocks ) );\n+}\n+\n+/**\n+ * Filters and sanitizes block content to remove non-allowable HTML from\n+ * parsed block attribute values.\n+ *\n+ * @since 5.3.1\n+ *\n+ * @param string         $text              Text that may contain block content.\n+ * @param array[]|string $allowed_html      An array of allowed HTML elements\n+ *                                          and attributes, or a context name\n+ *                                          such as 'post'.\n+ * @param string[]       $allowed_protocols Array of allowed URL protocols.\n+ * @return string The filtered and sanitized content result.\n+ */\n+function filter_block_content( $text, $allowed_html = 'post', $allowed_protocols = array() ) {\n+\t$result = '';\n+\n+\t$blocks = parse_blocks( $text );\n+\tforeach ( $blocks as $block ) {\n+\t\t$block   = filter_block_kses( $block, $allowed_html, $allowed_protocols );\n+\t\t$result .= serialize_block( $block );\n+\t}\n+\n+\treturn $result;\n+}\n+\n+/**\n+ * Filters and sanitizes a parsed block to remove non-allowable HTML from block\n+ * attribute values.\n+ *\n+ * @since 5.3.1\n+ *\n+ * @param WP_Block_Parser_Block $block             The parsed block object.\n+ * @param array[]|string        $allowed_html      An array of allowed HTML\n+ *                                                 elements and attributes, or a\n+ *                                                 context name such as 'post'.\n+ * @param string[]              $allowed_protocols Allowed URL protocols.\n+ * @return array The filtered and sanitized block object result.\n+ */\n+function filter_block_kses( $block, $allowed_html, $allowed_protocols = array() ) {\n+\t$block['attrs'] = filter_block_kses_value( $block['attrs'], $allowed_html, $allowed_protocols );\n+\n+\tif ( is_array( $block['innerBlocks'] ) ) {\n+\t\tforeach ( $block['innerBlocks'] as $i => $inner_block ) {\n+\t\t\t$block['innerBlocks'][ $i ] = filter_block_kses( $inner_block, $allowed_html, $allowed_protocols );\n+\t\t}\n+\t}\n+\n+\treturn $block;\n+}\n+\n+/**\n+ * Filters and sanitizes a parsed block attribute value to remove non-allowable\n+ * HTML.\n+ *\n+ * @since 5.3.1\n+ *\n+ * @param mixed          $value             The attribute value to filter.\n+ * @param array[]|string $allowed_html      An array of allowed HTML elements\n+ *                                          and attributes, or a context name\n+ *                                          such as 'post'.\n+ * @param string[]       $allowed_protocols Array of allowed URL protocols.\n+ * @return array The filtered and sanitized result.\n+ */\n+function filter_block_kses_value( $value, $allowed_html, $allowed_protocols = array() ) {\n+\tif ( is_array( $value ) ) {\n+\t\tforeach ( $value as $key => $inner_value ) {\n+\t\t\t$filtered_key   = filter_block_kses_value( $key, $allowed_html, $allowed_protocols );\n+\t\t\t$filtered_value = filter_block_kses_value( $inner_value, $allowed_html, $allowed_protocols );\n+\n+\t\t\tif ( $filtered_key !== $key ) {\n+\t\t\t\tunset( $value[ $key ] );\n+\t\t\t}\n+\n+\t\t\t$value[ $filtered_key ] = $filtered_value;\n+\t\t}\n+\t} elseif ( is_string( $value ) ) {\n+\t\treturn wp_kses( $value, $allowed_html, $allowed_protocols );\n+\t}\n+\n+\treturn $value;\n+}\n+\n /**\n  * Parses blocks out of a content string, and renders those appropriate for the excerpt.\n  *"
        },
        {
          "filename": "src/wp-includes/default-filters.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -243,6 +243,7 @@\n add_filter( 'tiny_mce_before_init', '_mce_set_direction' );\n add_filter( 'teeny_mce_before_init', '_mce_set_direction' );\n add_filter( 'pre_kses', 'wp_pre_kses_less_than' );\n+add_filter( 'pre_kses', 'wp_pre_kses_block_attributes', 10, 3 );\n add_filter( 'sanitize_title', 'sanitize_title_with_dashes', 10, 3 );\n add_action( 'check_comment_flood', 'check_comment_flood_db', 10, 4 );\n add_filter( 'comment_flood_filter', 'wp_throttle_comment_flood', 10, 3 );"
        },
        {
          "filename": "src/wp-includes/formatting.php",
          "status": "modified",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -4902,6 +4902,31 @@ function wp_pre_kses_less_than_callback( $matches ) {\n \treturn $matches[0];\n }\n \n+/**\n+ * Remove non-allowable HTML from parsed block attribute values when filtering\n+ * in the post context.\n+ *\n+ * @since 5.3.1\n+ *\n+ * @param string         $string            Content to be run through KSES.\n+ * @param array[]|string $allowed_html      An array of allowed HTML elements\n+ *                                          and attributes, or a context name\n+ *                                          such as 'post'.\n+ * @param string[]       $allowed_protocols Array of allowed URL protocols.\n+ * @return string Filtered text to run through KSES.\n+ */\n+function wp_pre_kses_block_attributes( $string, $allowed_html, $allowed_protocols ) {\n+\t/*\n+\t * `filter_block_content` is expected to call `wp_kses`. Temporarily remove\n+\t * the filter to avoid recursion.\n+\t */\n+\tremove_filter( 'pre_kses', 'wp_pre_kses_block_attributes', 10 );\n+\t$string = filter_block_content( $string, $allowed_html, $allowed_protocols );\n+\tadd_filter( 'pre_kses', 'wp_pre_kses_block_attributes', 10, 3 );\n+\n+\treturn $string;\n+}\n+\n /**\n  * WordPress implementation of PHP sprintf() with filters.\n  *"
        },
        {
          "filename": "tests/phpunit/tests/blocks/block-type.php",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -304,6 +304,24 @@ public function test_post_has_block() {\n \t\t$this->assertFalse( has_block( 'core/fake' ) );\n \t}\n \n+\tpublic function test_post_has_block_serialized_name() {\n+\t\t$content = '<!-- wp:serialized /--><!-- wp:core/normalized /--><!-- wp:plugin/third-party /-->';\n+\n+\t\t$this->assertTrue( has_block( 'core/serialized', $content ) );\n+\n+\t\t/*\n+\t\t * Technically, `has_block` should receive a \"full\" (normalized, parsed)\n+\t\t * block name. But this test conforms to expected pre-5.3.1 behavior.\n+\t\t */\n+\t\t$this->assertTrue( has_block( 'serialized', $content ) );\n+\t\t$this->assertTrue( has_block( 'core/normalized', $content ) );\n+\t\t$this->assertTrue( has_block( 'normalized', $content ) );\n+\t\t$this->assertFalse( has_block( 'plugin/normalized', $content ) );\n+\t\t$this->assertFalse( has_block( 'plugin/serialized', $content ) );\n+\t\t$this->assertFalse( has_block( 'third-party', $content ) );\n+\t\t$this->assertFalse( has_block( 'core/third-party', $content ) );\n+\t}\n+\n \t/**\n \t * Renders a test block without content.\n \t *"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "83718be6851597c68ba085b120c892616443698d",
            "date": "2025-01-14T15:35:18Z",
            "author_login": "SergeyBiryukov"
          },
          {
            "sha": "47774776112815b1b997a68fc51cf3dabd3f44c2",
            "date": "2025-01-14T11:37:00Z",
            "author_login": "johnbillion"
          },
          {
            "sha": "9d9d73cd9e5d243e4841fe9567ef388e3fb65932",
            "date": "2025-01-13T22:20:03Z",
            "author_login": "SergeyBiryukov"
          },
          {
            "sha": "062df4cd8825c3a44de4c05fe612bf3172ede84b",
            "date": "2025-01-13T14:55:09Z",
            "author_login": "desrosj"
          },
          {
            "sha": "88796678fd838ab0e790d22558f258c906262400",
            "date": "2025-01-12T18:12:14Z",
            "author_login": "SergeyBiryukov"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-79",
    "description": "WordPress users with lower privileges (like contributors) can inject JavaScript code in the block editor using a specific payload, which is executed within the dashboard. This can lead to XSS if an admin opens the post in the editor. Execution of this attack does require an authenticated user. This has been patched in WordPress 5.3.1, along with all the previous WordPress versions from 3.7 to 5.3 via a minor release. Automatic updates are enabled by default for minor releases and we strongly recommend that you keep them enabled.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2019-12-26T17:15:13.503",
    "last_modified": "2024-11-21T04:31:10.637",
    "fix_date": "2019-12-12T18:10:56Z"
  },
  "references": [
    {
      "url": "https://github.com/WordPress/wordpress-develop/commit/505dd6a20b6fc3d06130018c1caeff764248c29e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-x3wp-h3qx-9w94",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://hackerone.com/reports/738644",
      "source": "security-advisories@github.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://seclists.org/bugtraq/2020/Jan/8",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://wordpress.org/news/2019/12/wordpress-5-3-1-security-and-maintenance-release/",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://wpvulndb.com/vulnerabilities/9976",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2020/dsa-4599",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2020/dsa-4677",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/WordPress/wordpress-develop/commit/505dd6a20b6fc3d06130018c1caeff764248c29e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-x3wp-h3qx-9w94",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://hackerone.com/reports/738644",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://seclists.org/bugtraq/2020/Jan/8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://wordpress.org/news/2019/12/wordpress-5-3-1-security-and-maintenance-release/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://wpvulndb.com/vulnerabilities/9976",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2020/dsa-4599",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2020/dsa-4677",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:24.273343",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wordpress-develop",
    "owner": "WordPress",
    "created_at": "2016-12-05T16:41:44Z",
    "updated_at": "2025-01-14T11:37:14Z",
    "pushed_at": "2025-01-14T11:37:07Z",
    "size": 307564,
    "stars": 2652,
    "forks": 2710,
    "open_issues": 1941,
    "watchers": 2652,
    "has_security_policy": false,
    "default_branch": "trunk",
    "protected_branches": [
      "1.5",
      "2.0",
      "2.1",
      "2.2",
      "2.3",
      "2.5",
      "2.6",
      "2.7",
      "2.8",
      "2.9",
      "3.0",
      "3.1",
      "3.2",
      "3.3",
      "3.4",
      "3.5",
      "3.6",
      "3.7",
      "3.8",
      "3.9",
      "4.0",
      "4.1",
      "4.2",
      "4.3",
      "4.4",
      "4.5",
      "4.6",
      "4.7",
      "4.8",
      "4.9"
    ],
    "languages": {
      "PHP": 31280108,
      "CSS": 3527314,
      "JavaScript": 3133436,
      "SCSS": 321414,
      "HTML": 252320,
      "XSLT": 2137,
      "Python": 1724,
      "Shell": 977,
      "Rich Text Format": 341,
      "Hack": 245
    },
    "commit_activity": {
      "total_commits_last_year": 1725,
      "avg_commits_per_week": 33.17307692307692,
      "days_active_last_year": 358
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:50:59.247064"
  }
}