{
  "cve_id": "CVE-2019-17579",
  "github_data": {
    "repository": "SonarSource/sonarqube",
    "fix_commit": "2beaf73c2d10dcaaf3949889af53579e7d5aba13",
    "related_commits": [
      "2beaf73c2d10dcaaf3949889af53579e7d5aba13",
      "2beaf73c2d10dcaaf3949889af53579e7d5aba13"
    ],
    "patch_url": "https://github.com/SonarSource/sonarqube/commit/2beaf73c2d10dcaaf3949889af53579e7d5aba13.patch",
    "fix_commit_details": {
      "sha": "2beaf73c2d10dcaaf3949889af53579e7d5aba13",
      "commit_date": "2019-03-27T12:19:14Z",
      "author": {
        "login": "wouter-admiraal-sonarsource",
        "type": "User",
        "stats": {
          "total_commits": 767,
          "average_weekly_commits": 1.0226666666666666,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 179
        }
      },
      "commit_message": {
        "title": "SONAR-11867, SSF-74 Fix XSS in project links on account/projects",
        "length": 64,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 179,
        "additions": 110,
        "deletions": 69
      },
      "files": [
        {
          "filename": "server/sonar-web/src/main/js/apps/account/projects/ProjectCard.tsx",
          "status": "modified",
          "additions": 19,
          "deletions": 15,
          "patch": "@@ -18,22 +18,35 @@\n  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n  */\n import * as React from 'react';\n-import { sortBy } from 'lodash';\n import { Link } from 'react-router';\n import DateFromNow from '../../../components/intl/DateFromNow';\n import DateTimeFormatter from '../../../components/intl/DateTimeFormatter';\n import HelpTooltip from '../../../components/controls/HelpTooltip';\n import Level from '../../../components/ui/Level';\n-import ProjectLinkIcon from '../../../components/icons-components/ProjectLinkIcon';\n import Tooltip from '../../../components/controls/Tooltip';\n+import MetaLink from '../../overview/meta/MetaLink';\n+import { orderLinks } from '../../projectLinks/utils';\n import { translateWithParameters, translate } from '../../../helpers/l10n';\n \n interface Props {\n   project: T.MyProject;\n }\n \n export default function ProjectCard({ project }: Props) {\n-  const links = sortBy(project.links, 'type');\n+  const { links } = project;\n+\n+  const orderedLinks: T.ProjectLink[] = orderLinks(\n+    links.map((link, i) => {\n+      const { href, name, type } = link;\n+      return {\n+        id: `link-${i}`,\n+        name,\n+        type,\n+        url: href\n+      };\n+    })\n+  );\n+\n   const { lastAnalysisDate } = project;\n \n   return (\n@@ -72,20 +85,11 @@ export default function ProjectCard({ project }: Props) {\n         <Link to={{ pathname: '/dashboard', query: { id: project.key } }}>{project.name}</Link>\n       </h3>\n \n-      {links.length > 0 && (\n+      {orderedLinks.length > 0 && (\n         <div className=\"account-project-links\">\n           <ul className=\"list-inline\">\n-            {links.map(link => (\n-              <li key={link.type}>\n-                <a\n-                  className=\"link-with-icon\"\n-                  href={link.href}\n-                  rel=\"nofollow\"\n-                  target=\"_blank\"\n-                  title={link.name}>\n-                  <ProjectLinkIcon type={link.type} />\n-                </a>\n-              </li>\n+            {orderedLinks.map(link => (\n+              <MetaLink iconOnly={true} key={link.id} link={link} />\n             ))}\n           </ul>\n         </div>"
        },
        {
          "filename": "server/sonar-web/src/main/js/apps/account/projects/__tests__/ProjectCard-test.tsx",
          "status": "modified",
          "additions": 25,
          "deletions": 33,
          "patch": "@@ -19,68 +19,60 @@\n  */\n import * as React from 'react';\n import { shallow } from 'enzyme';\n-import { Link } from 'react-router';\n import ProjectCard from '../ProjectCard';\n-import Level from '../../../../components/ui/Level';\n-\n-const BASE = { key: 'key', links: [], name: 'name' };\n \n it('should render key and name', () => {\n-  const project = { ...BASE };\n-  const output = shallow(<ProjectCard project={project} />);\n-  expect(output.find('.account-project-key').text()).toBe('key');\n+  const wrapper = shallowRender();\n+  expect(wrapper.find('.account-project-key').text()).toBe('key');\n   expect(\n-    output\n+    wrapper\n       .find('.account-project-name')\n-      .find(Link)\n+      .find('Link')\n       .prop('children')\n   ).toBe('name');\n });\n \n it('should render description', () => {\n-  const project = { ...BASE, description: 'bla' };\n-  const output = shallow(<ProjectCard project={project} />);\n-  expect(output.find('.account-project-description').text()).toBe('bla');\n+  const wrapper = shallowRender({ description: 'bla' });\n+  expect(wrapper.find('.account-project-description').text()).toBe('bla');\n });\n \n it('should not render optional fields', () => {\n-  const project = { ...BASE };\n-  const output = shallow(<ProjectCard project={project} />);\n-  expect(output.find('.account-project-description').length).toBe(0);\n-  expect(output.find('.account-project-quality-gate').length).toBe(0);\n-  expect(output.find('.account-project-links').length).toBe(0);\n+  const wrapper = shallowRender();\n+  expect(wrapper.find('.account-project-description').length).toBe(0);\n+  expect(wrapper.find('.account-project-quality-gate').length).toBe(0);\n+  expect(wrapper.find('.account-project-links').length).toBe(0);\n });\n \n it('should render analysis date', () => {\n-  const project = { ...BASE, lastAnalysisDate: '2016-05-17' };\n-  const output = shallow(<ProjectCard project={project} />);\n-  expect(output.find('.account-project-analysis DateFromNow')).toHaveLength(1);\n+  const wrapper = shallowRender({ lastAnalysisDate: '2016-05-17' });\n+  expect(wrapper.find('.account-project-analysis DateFromNow')).toHaveLength(1);\n });\n \n it('should not render analysis date', () => {\n-  const project = { ...BASE };\n-  const output = shallow(<ProjectCard project={project} />);\n-  expect(output.find('.account-project-analysis').text()).toContain(\n+  const wrapper = shallowRender();\n+  expect(wrapper.find('.account-project-analysis').text()).toContain(\n     'my_account.projects.never_analyzed'\n   );\n });\n \n it('should render quality gate status', () => {\n-  const project = { ...BASE, qualityGate: 'ERROR' };\n-  const output = shallow(<ProjectCard project={project} />);\n+  const wrapper = shallowRender({ qualityGate: 'ERROR' });\n   expect(\n-    output\n+    wrapper\n       .find('.account-project-quality-gate')\n-      .find(Level)\n+      .find('Level')\n       .prop('level')\n   ).toBe('ERROR');\n });\n \n it('should render links', () => {\n-  const project = {\n-    ...BASE,\n-    links: [{ name: 'n', type: 't', href: 'h' }]\n-  };\n-  const output = shallow(<ProjectCard project={project} />);\n-  expect(output.find('.account-project-links').find('li').length).toBe(1);\n+  const wrapper = shallowRender({\n+    links: [{ name: 'name', type: 'type', href: 'href' }]\n+  });\n+  expect(wrapper.find('MetaLink').length).toBe(1);\n });\n+\n+function shallowRender(project: Partial<T.MyProject> = {}) {\n+  return shallow(<ProjectCard project={{ key: 'key', links: [], name: 'name', ...project }} />);\n+}"
        },
        {
          "filename": "server/sonar-web/src/main/js/apps/overview/meta/MetaLink.css",
          "status": "added",
          "additions": 35,
          "deletions": 0,
          "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * SonarQube\n+ * Copyright (C) 2009-2019 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+.copy-paste-link .overview-key {\n+  width: 80%;\n+}\n+\n+.copy-paste-link .close {\n+  color: #000;\n+  border-bottom: 0;\n+  height: 100%;\n+  display: inline-block;\n+  margin-left: 5px;\n+  box-sizing: border-box;\n+}\n+\n+.copy-paste-link .close svg {\n+  vertical-align: sub;\n+}"
        },
        {
          "filename": "server/sonar-web/src/main/js/apps/overview/meta/MetaLink.tsx",
          "status": "modified",
          "additions": 7,
          "deletions": 3,
          "patch": "@@ -22,8 +22,10 @@ import { getLinkName } from '../../projectLinks/utils';\n import ProjectLinkIcon from '../../../components/icons-components/ProjectLinkIcon';\n import isValidUri from '../../../app/utils/isValidUri';\n import ClearIcon from '../../../components/icons-components/ClearIcon';\n+import './MetaLink.css';\n \n interface Props {\n+  iconOnly?: boolean;\n   link: T.ProjectLink;\n }\n \n@@ -42,17 +44,19 @@ export default class MetaLink extends React.PureComponent<Props, State> {\n   };\n \n   render() {\n-    const { link } = this.props;\n+    const { iconOnly, link } = this.props;\n+    const linkTitle = getLinkName(link);\n     return (\n       <li>\n         <a\n           className=\"link-with-icon\"\n           href={link.url}\n           onClick={!isValidUri(link.url) ? this.handleClick : undefined}\n           rel=\"nofollow noreferrer noopener\"\n-          target=\"_blank\">\n+          target=\"_blank\"\n+          title={linkTitle}>\n           <ProjectLinkIcon className=\"little-spacer-right\" type={link.type} />\n-          {getLinkName(link)}\n+          {!iconOnly && linkTitle}\n         </a>\n         {this.state.expanded && (\n           <div className=\"little-spacer-top copy-paste-link\">"
        },
        {
          "filename": "server/sonar-web/src/main/js/apps/overview/meta/__tests__/MetaLink-test.tsx",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -31,6 +31,7 @@ it('should match snapshot', () => {\n   };\n \n   expect(shallow(<MetaLink link={link} />)).toMatchSnapshot();\n+  expect(shallow(<MetaLink iconOnly={true} link={link} />)).toMatchSnapshot();\n });\n \n it('should render dangerous links as plaintext', () => {"
        },
        {
          "filename": "server/sonar-web/src/main/js/apps/overview/meta/__tests__/__snapshots__/MetaLink-test.tsx.snap",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -7,6 +7,7 @@ exports[`should expand and collapse link 1`] = `\n     href=\"scm:git:git@github.com\"\n     rel=\"nofollow noreferrer noopener\"\n     target=\"_blank\"\n+    title=\"Foo\"\n   >\n     <ProjectLinkIcon\n       className=\"little-spacer-right\"\n@@ -24,6 +25,7 @@ exports[`should expand and collapse link 2`] = `\n     href=\"scm:git:git@github.com\"\n     rel=\"nofollow noreferrer noopener\"\n     target=\"_blank\"\n+    title=\"Foo\"\n   >\n     <ProjectLinkIcon\n       className=\"little-spacer-right\"\n@@ -41,6 +43,7 @@ exports[`should expand and collapse link 3`] = `\n     href=\"scm:git:git@github.com\"\n     rel=\"nofollow noreferrer noopener\"\n     target=\"_blank\"\n+    title=\"Foo\"\n   >\n     <ProjectLinkIcon\n       className=\"little-spacer-right\"\n@@ -58,6 +61,7 @@ exports[`should match snapshot 1`] = `\n     href=\"http://example.com\"\n     rel=\"nofollow noreferrer noopener\"\n     target=\"_blank\"\n+    title=\"Foo\"\n   >\n     <ProjectLinkIcon\n       className=\"little-spacer-right\"\n@@ -68,6 +72,23 @@ exports[`should match snapshot 1`] = `\n </li>\n `;\n \n+exports[`should match snapshot 2`] = `\n+<li>\n+  <a\n+    className=\"link-with-icon\"\n+    href=\"http://example.com\"\n+    rel=\"nofollow noreferrer noopener\"\n+    target=\"_blank\"\n+    title=\"Foo\"\n+  >\n+    <ProjectLinkIcon\n+      className=\"little-spacer-right\"\n+      type=\"foo\"\n+    />\n+  </a>\n+</li>\n+`;\n+\n exports[`should render dangerous links as plaintext 1`] = `\n <li>\n   <a\n@@ -76,6 +97,7 @@ exports[`should render dangerous links as plaintext 1`] = `\n     onClick={[Function]}\n     rel=\"nofollow noreferrer noopener\"\n     target=\"_blank\"\n+    title=\"Dangerous\"\n   >\n     <ProjectLinkIcon\n       className=\"little-spacer-right\""
        },
        {
          "filename": "server/sonar-web/src/main/js/apps/overview/styles.css",
          "status": "modified",
          "additions": 0,
          "deletions": 17,
          "patch": "@@ -474,23 +474,6 @@\n   background-color: transparent !important;\n }\n \n-.copy-paste-link .overview-key {\n-  width: 90%;\n-}\n-\n-.copy-paste-link .close {\n-  color: #000;\n-  border-bottom: 0;\n-  height: 100%;\n-  display: inline-block;\n-  margin-left: 5px;\n-  box-sizing: border-box;\n-}\n-\n-.copy-paste-link .close svg {\n-  vertical-align: sub;\n-}\n-\n .overview-deleted-profile,\n .overview-deprecated-rules {\n   margin: 4px -6px 4px;"
        },
        {
          "filename": "server/sonar-web/src/main/js/apps/projectLinks/utils.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -31,7 +31,7 @@ export function orderLinks<T extends NameAndType>(links: T[]) {\n   const [provided, unknown] = partition<T>(links, isProvided);\n   return [\n     ...sortBy(provided, link => PROVIDED_TYPES.indexOf(link.type)),\n-    ...sortBy(unknown, link => link.name!.toLowerCase())\n+    ...sortBy(unknown, link => link.name && link.name.toLowerCase())\n   ];\n }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 7,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7233fccd87550601b48591166795c382073f782b",
            "date": "2025-01-10T15:54:42Z",
            "author_login": "alain-kermis-sonarsource"
          },
          {
            "sha": "9d9a58b9baccc68ea3a953a310e52132eae7cb54",
            "date": "2025-01-10T07:18:55Z",
            "author_login": "matteo-mara-sonarsource"
          },
          {
            "sha": "0b4040008a20bf08472b95e2b7806f6bc7f1cde3",
            "date": "2025-01-10T12:16:02Z",
            "author_login": "Nolwenn-cadic-sonarsource"
          },
          {
            "sha": "7df33eb6a4d41d5071999f3296125e5666232dde",
            "date": "2025-01-09T13:41:14Z",
            "author_login": "steve-marion-sonarsource"
          },
          {
            "sha": "aca3703d4bc4528aa579ad42c46d3641d51f0752",
            "date": "2025-01-10T10:57:22Z",
            "author_login": "tomasz-tylenda-sonarsource"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "SonarSource SonarQube before 7.8 has XSS in project links on account/projects.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-10-14T15:15:10.227",
    "last_modified": "2024-11-21T04:32:34.827",
    "fix_date": "2019-03-27T12:19:14Z"
  },
  "references": [
    {
      "url": "https://github.com/SonarSource/sonarqube/commit/2beaf73c2d10dcaaf3949889af53579e7d5aba13",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SonarSource/sonarqube/commit/2beaf73c2d10dcaaf3949889af53579e7d5aba13",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:59.958223",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sonarqube",
    "owner": "SonarSource",
    "created_at": "2011-01-05T11:05:17Z",
    "updated_at": "2025-01-14T03:19:35Z",
    "pushed_at": "2025-01-10T20:03:44Z",
    "size": 962222,
    "stars": 9234,
    "forks": 1985,
    "open_issues": 3,
    "watchers": 9234,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "branch-5.6",
      "branch-6.0",
      "branch-6.1",
      "branch-6.2",
      "branch-6.3",
      "branch-6.4",
      "branch-6.5-M1",
      "branch-6.5",
      "branch-6.6-M1",
      "branch-6.6",
      "branch-6.7",
      "branch-7.0",
      "branch-7.9",
      "branch-8.1",
      "branch-8.3",
      "branch-8.4",
      "branch-8.5",
      "branch-8.6",
      "branch-8.7",
      "branch-8.9",
      "branch-9.0",
      "branch-9.1",
      "branch-9.2",
      "branch-9.3",
      "branch-9.4",
      "branch-9.5",
      "branch-9.6"
    ],
    "languages": {
      "Java": 35288541,
      "Shell": 27573,
      "Ruby": 13336,
      "HTML": 10979,
      "Batchfile": 5437,
      "Dockerfile": 2303,
      "JavaScript": 1799,
      "Groovy": 1419,
      "Starlark": 860,
      "Scheme": 359
    },
    "commit_activity": {
      "total_commits_last_year": 1826,
      "avg_commits_per_week": 35.11538461538461,
      "days_active_last_year": 242
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-14T15:15:28.045271"
  }
}