{
  "cve_id": "CVE-2019-17592",
  "github_data": {
    "repository": "adaltas/node-csv-parse",
    "fix_commit": "b9d35940c6815cdf1dfd6b21857a1f6d0fd51e4a",
    "related_commits": [
      "b9d35940c6815cdf1dfd6b21857a1f6d0fd51e4a",
      "b9d35940c6815cdf1dfd6b21857a1f6d0fd51e4a"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "b9d35940c6815cdf1dfd6b21857a1f6d0fd51e4a",
      "commit_date": "2019-09-17T20:46:03Z",
      "author": {
        "login": "wdavidw",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "security: remove regexp vulnerable to DOS in cast option, npm report 69742",
        "length": 74,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 48,
        "additions": 29,
        "deletions": 19
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -7,6 +7,10 @@\n * max_comment_size: new option\n * promise: new API module\n \n+## Trunk\n+\n+* security: remove regexp vulnerable to DOS in cast option, npm report 69742\n+\n ## Version 4.4.5\n \n * ts: add buffer as allowed type for input, fix #248"
        },
        {
          "filename": "lib/es5/index.js",
          "status": "modified",
          "additions": 8,
          "deletions": 9,
          "patch": "@@ -985,21 +985,20 @@ function (_Transform) {\n         }\n       }\n \n-      if (this.__isInt(field) === true) {\n-        return [undefined, parseInt(field)];\n-      } else if (this.__isFloat(field)) {\n+      if (this.__isFloat(field)) {\n         return [undefined, parseFloat(field)];\n       } else if (this.options.cast_date !== false) {\n         return [undefined, this.options.cast_date.call(null, field, context)];\n       }\n \n       return [undefined, field];\n-    }\n-  }, {\n-    key: \"__isInt\",\n-    value: function __isInt(value) {\n-      return /^(\\-|\\+)?([1-9]+[0-9]*)$/.test(value);\n-    }\n+    } // Keep it in case we implement the `cast_int` option\n+    // __isInt(value){\n+    //   // return Number.isInteger(parseInt(value))\n+    //   // return !isNaN( parseInt( obj ) );\n+    //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n+    // }\n+\n   }, {\n     key: \"__isFloat\",\n     value: function __isFloat(value) {"
        },
        {
          "filename": "lib/index.js",
          "status": "modified",
          "additions": 7,
          "deletions": 6,
          "patch": "@@ -747,18 +747,19 @@ class Parser extends Transform {\n         return [err]\n       }\n     }\n-    if(this.__isInt(field) === true){\n-      return [undefined, parseInt(field)]\n-    }else if(this.__isFloat(field)){\n+    if(this.__isFloat(field)){\n       return [undefined, parseFloat(field)]\n     }else if(this.options.cast_date !== false){\n       return [undefined, this.options.cast_date.call(null, field, context)]\n     }\n     return [undefined, field]\n   }\n-  __isInt(value){\n-    return /^(\\-|\\+)?([1-9]+[0-9]*)$/.test(value)\n-  }\n+  // Keep it in case we implement the `cast_int` option\n+  // __isInt(value){\n+  //   // return Number.isInteger(parseInt(value))\n+  //   // return !isNaN( parseInt( obj ) );\n+  //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n+  // }\n   __isFloat(value){\n     return (value - parseFloat( value ) + 1) >= 0 // Borrowed from jquery\n   }"
        },
        {
          "filename": "test/option.cast.coffee",
          "status": "modified",
          "additions": 10,
          "deletions": 4,
          "patch": "@@ -31,8 +31,14 @@ describe 'Option `cast`', ->\n       parser.end()\n \n     it 'ints', (next) ->\n-      parse '123a,123,0123,', cast: true, (err, data) ->\n-        data.should.eql [ ['123a', 123, 123, ''] ]\n+      parse '123a,123,+123,-123,0123,+0123,-0123,', cast: true, (err, data) ->\n+        data.should.eql [ ['123a', 123, 123, -123, 123, 123, -123, ''] ]\n+        next()\n+\n+    it 'ints isnt exposed to DOS vulnerabilities, npm security issue 69742', (next) ->\n+      data = Array.from( length: 3000000 ).map( (x) -> '1' ).join('') + '!'\n+      parse data, cast: true, (err, data) ->\n+        data[0][0].length.should.eql 3000001\n         next()\n \n     it 'float', (next) ->\n@@ -54,11 +60,11 @@ describe 'Option `cast`', ->\n       , (err, records) ->\n         records.should.eql [\n           [ '2000-01-01T05:00:00.000Z', {\n-            column: 1, empty_lines: 0, header: false, index: 1, \n+            column: 1, empty_lines: 0, header: false, index: 1,\n             invalid_field_length: 0, lines: 1, quoting: false, records: 0\n           } ]\n           [ '2050-11-27T05:00:00.000Z', {\n-            column: 1, empty_lines: 0, header: false, index: 1, \n+            column: 1, empty_lines: 0, header: false, index: 1,\n             invalid_field_length: 0, lines: 2, quoting: false, records: 1\n           } ]\n         ] unless err"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "29fb64abdcf9537d2953306c7f92482cf808b740",
            "date": "2021-06-28T09:50:45Z",
            "author_login": "sergkudinov"
          },
          {
            "sha": "bccbb21299a2db1acbc3b5aac1236835aecafb15",
            "date": "2021-06-21T10:15:21Z",
            "author_login": "wdavidw"
          },
          {
            "sha": "c2c67855f90ac37be68bfd687117e1c961500306",
            "date": "2021-06-09T16:14:50Z",
            "author_login": "dhull"
          },
          {
            "sha": "82a0da7a6bdfc739234aed730abeff8ba224505f",
            "date": "2021-06-08T21:19:00Z",
            "author_login": "dhull"
          },
          {
            "sha": "42ee5121157a71582a41e60d83940a60fdedd7fc",
            "date": "2021-06-09T07:34:43Z",
            "author_login": "wdavidw"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "The csv-parse module before 4.4.6 for Node.js is vulnerable to Regular Expression Denial of Service. The __isInt() function contains a malformed regular expression that processes large crafted input very slowly. This is triggered when using the cast option.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-10-14T20:15:10.650",
    "last_modified": "2024-11-21T04:32:35.897",
    "fix_date": "2019-09-17T20:46:03Z"
  },
  "references": [
    {
      "url": "https://github.com/adaltas/node-csv-parse/commit/b9d35940c6815cdf1dfd6b21857a1f6d0fd51e4a",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Z36UKPO5F3PQ3Q2POMF5LEKXWAH5RUFP/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20191127-0002/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/advisories/1171",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/adaltas/node-csv-parse/commit/b9d35940c6815cdf1dfd6b21857a1f6d0fd51e4a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/Z36UKPO5F3PQ3Q2POMF5LEKXWAH5RUFP/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20191127-0002/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/advisories/1171",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:59.959282",
    "processing_status": "enhanced"
  }
}