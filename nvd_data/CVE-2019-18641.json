{
  "cve_id": "CVE-2019-18641",
  "github_data": {
    "repository": "SparkDevNetwork/Rock",
    "fix_commit": "576f5ec22b1c43f123a377612981c68538167c61",
    "related_commits": [
      "576f5ec22b1c43f123a377612981c68538167c61",
      "576f5ec22b1c43f123a377612981c68538167c61"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "576f5ec22b1c43f123a377612981c68538167c61",
      "commit_date": "2019-01-12T06:59:05Z",
      "author": {
        "login": "shivambareria",
        "type": "User",
        "stats": {
          "total_commits": 1675,
          "average_weekly_commits": 2.323162274618585,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 328
        }
      },
      "commit_message": {
        "title": "+ Changed vCard to be secured by adjustments to the People/GetVCard/ REST controller.",
        "length": 85,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 203,
        "additions": 45,
        "deletions": 158
      },
      "files": [
        {
          "filename": "Rock.Rest/Controllers/PeopleController.Partial.cs",
          "status": "modified",
          "additions": 44,
          "deletions": 0,
          "patch": "@@ -21,6 +21,7 @@\n using System.Net;\r\n using System.Net.Http;\r\n using System.Text;\r\n+using System.Text.RegularExpressions;\r\n using System.Web;\r\n using System.Web.Http;\r\n using System.Web.Http.OData;\r\n@@ -876,6 +877,49 @@ public PeopleExport Export(\n         }\r\n \r\n         #endregion\r\n+\r\n+        #region VCard\r\n+\r\n+        /// <summary>\r\n+        /// Returns VCard for person.\r\n+        /// </summary>\r\n+        /// <param name=\"personGuid\">The person Guid.</param>\r\n+        /// <returns></returns>\r\n+        [HttpGet]\r\n+        [Authenticate, Secured]\r\n+        [System.Web.Http.Route( \"api/People/VCard/{personGuid}\" )]\r\n+        public HttpResponseMessage GetVCard( Guid personGuid )\r\n+        {\r\n+            var rockContext = ( Rock.Data.RockContext ) Service.Context;\r\n+\r\n+            var person = new PersonService( rockContext ).Get( personGuid );\r\n+            if ( person == null )\r\n+            {\r\n+                throw new HttpResponseException( new System.Net.Http.HttpResponseMessage( HttpStatusCode.NotFound ) );\r\n+            }\r\n+\r\n+            string fileName = person.FullName + \".vcf\";\r\n+            HttpResponseMessage result = new HttpResponseMessage( HttpStatusCode.OK );\r\n+\r\n+            var mergeFields = Rock.Lava.LavaHelper.GetCommonMergeFields( null, GetPerson() );\r\n+            mergeFields.Add( \"Person\", person );\r\n+            string vCard = GlobalAttributesCache.Value( \"VCardFormat\" ).ResolveMergeFields( mergeFields ).Trim();\r\n+\r\n+            // remove empty lines (the vcard spec is very picky)\r\n+            vCard = Regex.Replace( vCard, @\"^\\s+$[\\r\\n]*\", \"\", RegexOptions.Multiline );\r\n+\r\n+            var inputEncoding = Encoding.Default;\r\n+            var outputEncoding = Encoding.GetEncoding( 28591 );\r\n+            var cardBytes = inputEncoding.GetBytes( vCard );\r\n+            var outputBytes = Encoding.Convert( inputEncoding, outputEncoding, cardBytes );\r\n+            result.Content = new ByteArrayContent( outputBytes );\r\n+            result.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue( \"text/vcard\" );\r\n+            result.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue( \"attachment\" );\r\n+            result.Content.Headers.ContentDisposition.FileName = fileName;\r\n+            return result;\r\n+        }\r\n+\r\n+        #endregion\r\n     }\r\n \r\n     /// <summary>\r"
        },
        {
          "filename": "RockWeb/App_Code/GetVCard.ashx.cs",
          "status": "removed",
          "additions": 0,
          "deletions": 156,
          "patch": "@@ -1,156 +0,0 @@\n-\ufeff// <copyright>\n-// Copyright by the Spark Development Network\n-//\n-// Licensed under the Rock Community License (the \"License\");\n-// you may not use this file except in compliance with the License.\n-// You may obtain a copy of the License at\n-//\n-// http://www.rockrms.com/license\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-// </copyright>\n-//\n-using System;\n-using System.IO;\n-using System.Text;\n-using System.Text.RegularExpressions;\n-using System.Threading.Tasks;\n-using System.Web;\n-using Rock;\n-using Rock.Data;\n-using Rock.Model;\n-using Rock.Security;\n-using Rock.Web.Cache;\n-\n-namespace RockWeb\n-{\n-    /// <summary>\n-    /// Handles retrieving file data from storage\n-    /// </summary>\n-    public class GetVCard : IHttpHandler\n-    {\n-        /// <summary>\n-        /// Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref=\"T:System.Web.IHttpHandler\" /> interface.\n-        /// </summary>\n-        /// <param name=\"context\">An <see cref=\"T:System.Web.HttpContext\" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>\n-        public void ProcessRequest( HttpContext context )\n-        {\n-            var rockContext = new RockContext();\n-\n-            var currentUser = new UserLoginService( rockContext ).GetByUserName( UserLogin.GetCurrentUserName() );\n-            Person currentPerson = currentUser != null ? currentUser.Person : null;\n-\n-            Person person = GetPerson( context, rockContext );\n-            if ( person == null )\n-            {\n-                SendNotFound( context );\n-                return;\n-            }\n-            else\n-            {\n-                if ( !person.IsAuthorized( Authorization.VIEW, currentPerson ) )\n-                {\n-                    SendNotAuthorized( context );\n-                    return;\n-                }\n-            }\n-\n-            var response = context.Response;\n-            response.ContentType = \"text/vcard\";\n-\n-            // http://stackoverflow.com/questions/93551/how-to-encode-the-filename-parameter-of-content-disposition-header-in-http\n-            string contentDisposition;\n-            string fileName = person.FullName + \".vcf\";\n-            if ( context.Request.Browser.Browser == \"IE\" )\n-            {\n-                contentDisposition = \"attachment; filename=\" + Uri.EscapeDataString( fileName );\n-            }\n-            else if ( context.Request.Browser.Browser == \"Safari\" )\n-            {\n-                contentDisposition = \"attachment; filename=\" + fileName;\n-            }\n-            else\n-            {\n-                contentDisposition = \"attachment; filename*=UTF-8''\" + Uri.EscapeDataString( fileName );\n-            }\n-            response.AddHeader( \"Content-Disposition\", contentDisposition );\n-\n-            var mergeFields = Rock.Lava.LavaHelper.GetCommonMergeFields( null, currentPerson );\n-            mergeFields.Add( \"Person\", person );\n-            string vCard = GlobalAttributesCache.Value( \"VCardFormat\" ).ResolveMergeFields( mergeFields ).Trim();\n-\n-            // remove empty lines (the vcard spec is very picky)\n-            vCard = Regex.Replace( vCard, @\"^\\s+$[\\r\\n]*\", \"\", RegexOptions.Multiline );\n-\n-            var inputEncoding = Encoding.Default;\n-            var outputEncoding = Encoding.GetEncoding( 28591 );\n-            var cardBytes = inputEncoding.GetBytes( vCard );\n-            var outputBytes = Encoding.Convert( inputEncoding, outputEncoding, cardBytes );\n-\n-            response.OutputStream.Write( outputBytes, 0, outputBytes.Length );\n-        }\n-\n-        /// <summary>\n-        /// Gets the person.\n-        /// </summary>\n-        /// <param name=\"context\">The context.</param>\n-        /// <param name=\"rockContext\">The rock context.</param>\n-        /// <returns></returns>\n-        private Person GetPerson( HttpContext context, RockContext rockContext )\n-        {\n-            string personParam = context.Request.QueryString[\"Person\"];\n-\n-            int? personId = personParam.AsIntegerOrNull();\n-            if ( personId.HasValue )\n-            {\n-                return new PersonService( rockContext ).Get( personId.Value );\n-            }\n-\n-            Guid? personGuid = personParam.AsGuidOrNull();\n-            if ( personGuid.HasValue )\n-            {\n-                return new PersonService( rockContext ).Get( personGuid.Value );\n-            }\n-\n-            return null;\n-        }\n-\n-        /// <summary>\n-        /// Sends 404 status.\n-        /// </summary>\n-        /// <param name=\"context\">The context.</param>\n-        private void SendNotFound( HttpContext context )\n-        {\n-            context.Response.StatusCode = System.Net.HttpStatusCode.NotFound.ConvertToInt();\n-            context.Response.StatusDescription = \"The requested person could not be found.\";\n-            context.ApplicationInstance.CompleteRequest();\n-        }\n-\n-        /// <summary>\n-        /// Sends a 403 (forbidden)\n-        /// </summary>\n-        /// <param name=\"context\">The context.</param>\n-        private void SendNotAuthorized( HttpContext context )\n-        {\n-            context.Response.StatusCode = System.Net.HttpStatusCode.Forbidden.ConvertToInt();\n-            context.Response.StatusDescription = \"Not authorized to view person\";\n-            context.ApplicationInstance.CompleteRequest();\n-        }\n-\n-        /// <summary>\n-        /// Gets a value indicating whether another request can use the <see cref=\"T:System.Web.IHttpHandler\" /> instance.\n-        /// </summary>\n-        /// <returns>true if the <see cref=\"T:System.Web.IHttpHandler\" /> instance is reusable; otherwise, false.</returns>\n-        public bool IsReusable\n-        {\n-            get\n-            {\n-                return false;\n-            }\n-        }\n-    }\n-}\n\\ No newline at end of file"
        },
        {
          "filename": "RockWeb/Blocks/Crm/PersonDetail/Bio.ascx.cs",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -175,7 +175,7 @@ protected override void OnLoad( EventArgs e )\n                         FollowingsHelper.SetFollowing( Person.PrimaryAlias, pnlFollow, this.CurrentPerson );\n                     }\n \n-                    hlVCard.NavigateUrl = ResolveRockUrl( string.Format( \"~/GetVCard.ashx?Person={0}\", Person.Id ) );\n+                    hlVCard.NavigateUrl = ResolveUrl( string.Format( \"~/api/People/VCard/{0}\", Person.Guid ) );\n \n                     var socialCategoryGuid = GetAttributeValue( \"SocialMediaCategory\" ).AsGuidOrNull();\n                     if ( socialCategoryGuid.HasValue )"
        },
        {
          "filename": "RockWeb/GetVCard.ashx",
          "status": "removed",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -1 +0,0 @@\n-\ufeff<%@ WebHandler Language=\"C#\" CodeBehind=\"~/App_Code/GetVCard.ashx.cs\" Class=\"RockWeb.GetVCard\" %>"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9fef0e7fb47d0880012ccad97b38a81ddc083f65",
            "date": "2025-01-24T23:04:22Z",
            "author_login": "unlearnd"
          },
          {
            "sha": "a173693e376b888794fd63225263bcbfefd0c80e",
            "date": "2025-01-24T23:03:44Z",
            "author_login": "unlearnd"
          },
          {
            "sha": "448a961f03ecfa2cf5aadbba2bd1e575c2dd4aef",
            "date": "2025-01-24T23:03:22Z",
            "author_login": "unlearnd"
          },
          {
            "sha": "f17e4275a11e46ce2cf48ec4988c889ccc9a1db0",
            "date": "2025-01-24T22:23:38Z",
            "author_login": "unlearnd"
          },
          {
            "sha": "af9c99808759532a974dd7cd7bb8b1e9b825b23e",
            "date": "2025-01-24T22:19:20Z",
            "author_login": "unlearnd"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": null,
    "description": "Rock RMS before 1.8.6 mishandles vCard access control within the People/GetVCard/REST controller.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-03-20T21:15:16.483",
    "last_modified": "2024-11-21T04:33:25.907",
    "fix_date": "2019-01-12T06:59:05Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/160766/Rock-RMS-File-Upload-Account-Takeover-Information-Disclosure.html",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2021/Jan/1",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SparkDevNetwork/Rock/commit/576f5ec22b1c43f123a377612981c68538167c61",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SparkDevNetwork/Rock/compare/1.7.6...1.8.6",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/160766/Rock-RMS-File-Upload-Account-Takeover-Information-Disclosure.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2021/Jan/1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SparkDevNetwork/Rock/commit/576f5ec22b1c43f123a377612981c68538167c61",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SparkDevNetwork/Rock/compare/1.7.6...1.8.6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:42.277584",
    "processing_status": "enhanced"
  }
}