{
  "cve_id": "CVE-2019-18885",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "09ba3bc9dd150457c506e4661380a6183af651c1",
    "related_commits": [
      "09ba3bc9dd150457c506e4661380a6183af651c1",
      "09ba3bc9dd150457c506e4661380a6183af651c1"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "09ba3bc9dd150457c506e4661380a6183af651c1",
      "commit_date": "2019-01-19T06:48:55Z",
      "author": {
        "login": "asj",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "btrfs: merge btrfs_find_device and find_device",
        "length": 370,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 86,
        "additions": 42,
        "deletions": 44
      },
      "files": [
        {
          "filename": "fs/btrfs/dev-replace.c",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -112,10 +112,10 @@ int btrfs_init_dev_replace(struct btrfs_fs_info *fs_info)\n \tcase BTRFS_IOCTL_DEV_REPLACE_STATE_STARTED:\n \tcase BTRFS_IOCTL_DEV_REPLACE_STATE_SUSPENDED:\n \t\tdev_replace->srcdev = btrfs_find_device(fs_info->fs_devices,\n-\t\t\t\t\t\t\tsrc_devid, NULL, NULL);\n+\t\t\t\t\t\tsrc_devid, NULL, NULL, true);\n \t\tdev_replace->tgtdev = btrfs_find_device(fs_info->fs_devices,\n \t\t\t\t\t\t\tBTRFS_DEV_REPLACE_DEVID,\n-\t\t\t\t\t\t\tNULL, NULL);\n+\t\t\t\t\t\t\tNULL, NULL, true);\n \t\t/*\n \t\t * allow 'btrfs dev replace_cancel' if src/tgt device is\n \t\t * missing"
        },
        {
          "filename": "fs/btrfs/ioctl.c",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1642,7 +1642,7 @@ static noinline int btrfs_ioctl_resize(struct file *file,\n \t\tbtrfs_info(fs_info, \"resizing devid %llu\", devid);\n \t}\n \n-\tdevice = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);\n+\tdevice = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL, true);\n \tif (!device) {\n \t\tbtrfs_info(fs_info, \"resizer unable to find device %llu\",\n \t\t\t   devid);\n@@ -3179,7 +3179,7 @@ static long btrfs_ioctl_dev_info(struct btrfs_fs_info *fs_info,\n \n \trcu_read_lock();\n \tdev = btrfs_find_device(fs_info->fs_devices, di_args->devid, s_uuid,\n-\t\t\t\tNULL);\n+\t\t\t\tNULL, true);\n \n \tif (!dev) {\n \t\tret = -ENODEV;"
        },
        {
          "filename": "fs/btrfs/scrub.c",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -3835,7 +3835,7 @@ int btrfs_scrub_dev(struct btrfs_fs_info *fs_info, u64 devid, u64 start,\n \t\treturn PTR_ERR(sctx);\n \n \tmutex_lock(&fs_info->fs_devices->device_list_mutex);\n-\tdev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);\n+\tdev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL, true);\n \tif (!dev || (test_bit(BTRFS_DEV_STATE_MISSING, &dev->dev_state) &&\n \t\t     !is_dev_replace)) {\n \t\tmutex_unlock(&fs_info->fs_devices->device_list_mutex);\n@@ -4012,7 +4012,7 @@ int btrfs_scrub_progress(struct btrfs_fs_info *fs_info, u64 devid,\n \tstruct scrub_ctx *sctx = NULL;\n \n \tmutex_lock(&fs_info->fs_devices->device_list_mutex);\n-\tdev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);\n+\tdev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL, true);\n \tif (dev)\n \t\tsctx = dev->scrub_ctx;\n \tif (sctx)"
        },
        {
          "filename": "fs/btrfs/volumes.c",
          "status": "modified",
          "additions": 35,
          "deletions": 37,
          "patch": "@@ -415,27 +415,6 @@ static struct btrfs_device *__alloc_device(void)\n \treturn dev;\n }\n \n-/*\n- * Find a device specified by @devid or @uuid in the list of @fs_devices, or\n- * return NULL.\n- *\n- * If devid and uuid are both specified, the match must be exact, otherwise\n- * only devid is used.\n- */\n-static struct btrfs_device *find_device(struct btrfs_fs_devices *fs_devices,\n-\t\tu64 devid, const u8 *uuid)\n-{\n-\tstruct btrfs_device *dev;\n-\n-\tlist_for_each_entry(dev, &fs_devices->devices, dev_list) {\n-\t\tif (dev->devid == devid &&\n-\t\t    (!uuid || !memcmp(dev->uuid, uuid, BTRFS_UUID_SIZE))) {\n-\t\t\treturn dev;\n-\t\t}\n-\t}\n-\treturn NULL;\n-}\n-\n static noinline struct btrfs_fs_devices *find_fsid(\n \t\tconst u8 *fsid, const u8 *metadata_fsid)\n {\n@@ -984,8 +963,8 @@ static noinline struct btrfs_device *device_list_add(const char *path,\n \t\tdevice = NULL;\n \t} else {\n \t\tmutex_lock(&fs_devices->device_list_mutex);\n-\t\tdevice = find_device(fs_devices, devid,\n-\t\t\t\tdisk_super->dev_item.uuid);\n+\t\tdevice = btrfs_find_device(fs_devices, devid,\n+\t\t\t\tdisk_super->dev_item.uuid, NULL, false);\n \n \t\t/*\n \t\t * If this disk has been pulled into an fs devices created by\n@@ -2402,10 +2381,10 @@ static struct btrfs_device *btrfs_find_device_by_path(\n \tdev_uuid = disk_super->dev_item.uuid;\n \tif (btrfs_fs_incompat(fs_info, METADATA_UUID))\n \t\tdevice = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,\n-\t\t\t\t\t   disk_super->metadata_uuid);\n+\t\t\t\t\t   disk_super->metadata_uuid, true);\n \telse\n \t\tdevice = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,\n-\t\t\t\t\t   disk_super->fsid);\n+\t\t\t\t\t   disk_super->fsid, true);\n \n \tbrelse(bh);\n \tif (!device)\n@@ -2425,7 +2404,7 @@ struct btrfs_device *btrfs_find_device_by_devspec(\n \n \tif (devid) {\n \t\tdevice = btrfs_find_device(fs_info->fs_devices, devid, NULL,\n-\t\t\t\t\t   NULL);\n+\t\t\t\t\t   NULL, true);\n \t\tif (!device)\n \t\t\treturn ERR_PTR(-ENOENT);\n \t\treturn device;\n@@ -2568,7 +2547,7 @@ static int btrfs_finish_sprout(struct btrfs_trans_handle *trans,\n \t\tread_extent_buffer(leaf, fs_uuid, btrfs_device_fsid(dev_item),\n \t\t\t\t   BTRFS_FSID_SIZE);\n \t\tdevice = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,\n-\t\t\t\t\t   fs_uuid);\n+\t\t\t\t\t   fs_uuid, true);\n \t\tBUG_ON(!device); /* Logic error */\n \n \t\tif (device->fs_devices->seeding) {\n@@ -6621,19 +6600,36 @@ blk_status_t btrfs_map_bio(struct btrfs_fs_info *fs_info, struct bio *bio,\n \treturn BLK_STS_OK;\n }\n \n+/*\n+ * Find a device specified by @devid or @uuid in the list of @fs_devices, or\n+ * return NULL.\n+ *\n+ * If devid and uuid are both specified, the match must be exact, otherwise\n+ * only devid is used.\n+ *\n+ * If @seed is true, traverse through the seed devices.\n+ */\n struct btrfs_device *btrfs_find_device(struct btrfs_fs_devices *fs_devices,\n-\t\t\t\t       u64 devid, u8 *uuid, u8 *fsid)\n+\t\t\t\t       u64 devid, u8 *uuid, u8 *fsid,\n+\t\t\t\t       bool seed)\n {\n \tstruct btrfs_device *device;\n \n \twhile (fs_devices) {\n \t\tif (!fsid ||\n \t\t    !memcmp(fs_devices->metadata_uuid, fsid, BTRFS_FSID_SIZE)) {\n-\t\t\tdevice = find_device(fs_devices, devid, uuid);\n-\t\t\tif (device)\n-\t\t\t\treturn device;\n+\t\t\tlist_for_each_entry(device, &fs_devices->devices,\n+\t\t\t\t\t    dev_list) {\n+\t\t\t\tif (device->devid == devid &&\n+\t\t\t\t    (!uuid || memcmp(device->uuid, uuid,\n+\t\t\t\t\t\t     BTRFS_UUID_SIZE) == 0))\n+\t\t\t\t\treturn device;\n+\t\t\t}\n \t\t}\n-\t\tfs_devices = fs_devices->seed;\n+\t\tif (seed)\n+\t\t\tfs_devices = fs_devices->seed;\n+\t\telse\n+\t\t\treturn NULL;\n \t}\n \treturn NULL;\n }\n@@ -6879,7 +6875,7 @@ static int read_one_chunk(struct btrfs_fs_info *fs_info, struct btrfs_key *key,\n \t\t\t\t   btrfs_stripe_dev_uuid_nr(chunk, i),\n \t\t\t\t   BTRFS_UUID_SIZE);\n \t\tmap->stripes[i].dev = btrfs_find_device(fs_info->fs_devices,\n-\t\t\t\t\t\t\tdevid, uuid, NULL);\n+\t\t\t\t\t\t\tdevid, uuid, NULL, true);\n \t\tif (!map->stripes[i].dev &&\n \t\t    !btrfs_test_opt(fs_info, DEGRADED)) {\n \t\t\tfree_extent_map(em);\n@@ -7019,7 +7015,7 @@ static int read_one_dev(struct btrfs_fs_info *fs_info,\n \t}\n \n \tdevice = btrfs_find_device(fs_info->fs_devices, devid, dev_uuid,\n-\t\t\t\t   fs_uuid);\n+\t\t\t\t   fs_uuid, true);\n \tif (!device) {\n \t\tif (!btrfs_test_opt(fs_info, DEGRADED)) {\n \t\t\tbtrfs_report_missing_device(fs_info, devid,\n@@ -7609,7 +7605,8 @@ int btrfs_get_dev_stats(struct btrfs_fs_info *fs_info,\n \tint i;\n \n \tmutex_lock(&fs_devices->device_list_mutex);\n-\tdev = btrfs_find_device(fs_info->fs_devices, stats->devid, NULL, NULL);\n+\tdev = btrfs_find_device(fs_info->fs_devices, stats->devid, NULL, NULL,\n+\t\t\t\ttrue);\n \tmutex_unlock(&fs_devices->device_list_mutex);\n \n \tif (!dev) {\n@@ -7823,7 +7820,7 @@ static int verify_one_dev_extent(struct btrfs_fs_info *fs_info,\n \t}\n \n \t/* Make sure no dev extent is beyond device bondary */\n-\tdev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL);\n+\tdev = btrfs_find_device(fs_info->fs_devices, devid, NULL, NULL, true);\n \tif (!dev) {\n \t\tbtrfs_err(fs_info, \"failed to find devid %llu\", devid);\n \t\tret = -EUCLEAN;\n@@ -7832,7 +7829,8 @@ static int verify_one_dev_extent(struct btrfs_fs_info *fs_info,\n \n \t/* It's possible this device is a dummy for seed device */\n \tif (dev->disk_total_bytes == 0) {\n-\t\tdev = find_device(fs_info->fs_devices->seed, devid, NULL);\n+\t\tdev = btrfs_find_device(fs_info->fs_devices->seed, devid, NULL,\n+\t\t\t\t\tNULL, false);\n \t\tif (!dev) {\n \t\t\tbtrfs_err(fs_info, \"failed to find seed devid %llu\",\n \t\t\t\t  devid);"
        },
        {
          "filename": "fs/btrfs/volumes.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -434,7 +434,7 @@ int btrfs_num_copies(struct btrfs_fs_info *fs_info, u64 logical, u64 len);\n int btrfs_grow_device(struct btrfs_trans_handle *trans,\n \t\t      struct btrfs_device *device, u64 new_size);\n struct btrfs_device *btrfs_find_device(struct btrfs_fs_devices *fs_devices,\n-\t\t\t\t       u64 devid, u8 *uuid, u8 *fsid);\n+\t\t\t\t       u64 devid, u8 *uuid, u8 *fsid, bool seed);\n int btrfs_shrink_device(struct btrfs_device *device, u64 new_size);\n int btrfs_init_new_device(struct btrfs_fs_info *fs_info, const char *path);\n int btrfs_balance(struct btrfs_fs_info *fs_info,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "fs/btrfs/volumes.c in the Linux kernel before 5.1 allows a btrfs_verify_dev_extents NULL pointer dereference via a crafted btrfs image because fs_devices->devices is mishandled within find_device, aka CID-09ba3bc9dd15.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-11-14T14:15:11.630",
    "last_modified": "2024-11-21T04:33:46.677",
    "fix_date": "2019-01-19T06:48:55Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/156185/Kernel-Live-Patch-Security-Notice-LSN-0062-1.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=09ba3bc9dd150457c506e4661380a6183af651c1",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bobfuzzer/CVE-2019-18885",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/09ba3bc9dd150457c506e4661380a6183af651c1",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2020/08/msg00019.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20191205-0001/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/4254-1/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/4254-2/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/4258-1/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/4287-1/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/4287-2/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuApr2021.html",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "http://packetstormsecurity.com/files/156185/Kernel-Live-Patch-Security-Notice-LSN-0062-1.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=09ba3bc9dd150457c506e4661380a6183af651c1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bobfuzzer/CVE-2019-18885",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/09ba3bc9dd150457c506e4661380a6183af651c1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2020/08/msg00019.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20191205-0001/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/4254-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/4254-2/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/4258-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/4287-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://usn.ubuntu.com/4287-2/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuApr2021.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:09.191950",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}