{
  "cve_id": "CVE-2019-18978",
  "github_data": {
    "repository": "cyu/rack-cors",
    "fix_commit": "e4d4fc362a4315808927011cbe5afcfe5486f17d",
    "related_commits": [
      "e4d4fc362a4315808927011cbe5afcfe5486f17d",
      "e4d4fc362a4315808927011cbe5afcfe5486f17d"
    ],
    "patch_url": "https://github.com/cyu/rack-cors/commit/e4d4fc362a4315808927011cbe5afcfe5486f17d.patch",
    "fix_commit_details": {
      "sha": "e4d4fc362a4315808927011cbe5afcfe5486f17d",
      "commit_date": "2019-11-14T03:55:41Z",
      "author": {
        "login": "cyu",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Unescape and resolve paths before resource checks",
        "length": 121,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 39,
        "additions": 29,
        "deletions": 10
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1,6 +1,10 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 1.0.4 - 2019-11-13\n+### Security\n+- Escape and resolve path before evaluating resource rules (thanks to Colby Morgan)\n+\n ## 1.0.3 - 2019-03-24\n ### Changed\n - Don't send 'Content-Type' header with pre-flight requests"
        },
        {
          "filename": "lib/rack/cors.rb",
          "status": "modified",
          "additions": 17,
          "deletions": 9,
          "patch": "@@ -64,24 +64,27 @@ def allow(&block)\n     def call(env)\n       env[HTTP_ORIGIN] ||= env[HTTP_X_ORIGIN] if env[HTTP_X_ORIGIN]\n \n+      path = evaluate_path(env)\n+\n       add_headers = nil\n       if env[HTTP_ORIGIN]\n         debug(env) do\n           [ 'Incoming Headers:',\n             \"  Origin: #{env[HTTP_ORIGIN]}\",\n+            \"  Path-Info: #{path}\",\n             \"  Access-Control-Request-Method: #{env[HTTP_ACCESS_CONTROL_REQUEST_METHOD]}\",\n             \"  Access-Control-Request-Headers: #{env[HTTP_ACCESS_CONTROL_REQUEST_HEADERS]}\"\n             ].join(\"\\n\")\n         end\n         if env[REQUEST_METHOD] == OPTIONS and env[HTTP_ACCESS_CONTROL_REQUEST_METHOD]\n-          headers = process_preflight(env)\n+          headers = process_preflight(env, path)\n           debug(env) do\n             \"Preflight Headers:\\n\" +\n                 headers.collect{|kv| \"  #{kv.join(': ')}\"}.join(\"\\n\")\n           end\n           return [200, headers, []]\n         else\n-          add_headers = process_cors(env)\n+          add_headers = process_cors(env, path)\n         end\n       else\n         Result.miss(env, Result::MISS_NO_ORIGIN)\n@@ -90,7 +93,7 @@ def call(env)\n       # This call must be done BEFORE calling the app because for some reason\n       # env[PATH_INFO] gets changed after that and it won't match. (At least\n       # in rails 4.1.6)\n-      vary_resource = resource_for_path(env[PATH_INFO])\n+      vary_resource = resource_for_path(path)\n \n       status, headers, body = @app.call env\n \n@@ -147,14 +150,20 @@ def select_logger(env)\n         end\n       end\n \n+      def evaluate_path(env)\n+        path = env[PATH_INFO]\n+        path = Rack::Utils.clean_path_info(Rack::Utils.unescape_path(path)) if path\n+        path\n+      end\n+\n       def all_resources\n         @all_resources ||= []\n       end\n \n-      def process_preflight(env)\n+      def process_preflight(env, path)\n         result = Result.preflight(env)\n \n-        resource, error = match_resource(env)\n+        resource, error = match_resource(path, env)\n         unless resource\n           result.miss(error)\n           return {}\n@@ -163,8 +172,8 @@ def process_preflight(env)\n         return resource.process_preflight(env, result)\n       end\n \n-      def process_cors(env)\n-        resource, error = match_resource(env)\n+      def process_cors(env, path)\n+        resource, error = match_resource(path, env)\n         if resource\n           Result.hit(env)\n           cors = resource.to_headers(env)\n@@ -185,8 +194,7 @@ def resource_for_path(path_info)\n         nil\n       end\n \n-      def match_resource(env)\n-        path   = env[PATH_INFO]\n+      def match_resource(path, env)\n         origin = env[HTTP_ORIGIN]\n \n         origin_matched = false"
        },
        {
          "filename": "lib/rack/cors/version.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,5 +1,5 @@\n module Rack\n   class Cors\n-    VERSION = \"1.0.3\"\n+    VERSION = \"1.0.4\"\n   end\n end"
        },
        {
          "filename": "test/unit/cors_test.rb",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -146,6 +146,12 @@ def load_app(name, options = {})\n     last_response.headers['Vary'].must_equal 'Origin, Host'\n   end\n \n+  it \"decode URL and resolve paths before resource matching\" do\n+    header 'Origin', 'http://localhost:3000'\n+    get '/public/a/..%2F..%2Fprivate/stuff'\n+    last_response.wont_render_cors_success\n+  end\n+\n   describe 'with array of upstream Vary headers' do\n     let(:app) { load_app('test', { proxy: true }) }\n "
        },
        {
          "filename": "test/unit/test.ru",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -41,6 +41,7 @@ use Rack::Cors do\n   allow do\n     origins '*'\n     resource '/public'\n+    resource '/public/*'\n     resource '/public_without_credentials', :credentials => false\n   end\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a3b0a90d7bd7f8cc32df6bcf993b14673f466283",
            "date": "2025-01-13T20:17:49Z",
            "author_login": "andrew"
          },
          {
            "sha": "c3e6de5a852ef650ecb9810774a6d6b7e09ff6cf",
            "date": "2025-01-08T16:47:12Z",
            "author_login": "nbr"
          },
          {
            "sha": "ea21a39e4eb93e6ce77d15d65de308bebcad0128",
            "date": "2024-12-27T23:58:22Z",
            "author_login": "m-nakamura145"
          },
          {
            "sha": "246ef22707b0f7b7107ea53f8834d1d0ea52558a",
            "date": "2024-07-06T21:11:52Z",
            "author_login": "fynsta"
          },
          {
            "sha": "0e68b881ef6c428bbf928b2c4a92ab49a34823e3",
            "date": "2024-03-19T14:55:58Z",
            "author_login": "ismailarilik"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "An issue was discovered in the rack-cors (aka Rack CORS Middleware) gem before 1.0.4 for Ruby. It allows ../ directory traversal to access private resources because resource matching does not ensure that pathnames are in a canonical format.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-11-14T21:15:12.170",
    "last_modified": "2024-11-21T04:33:55.463",
    "fix_date": "2019-11-14T03:55:41Z"
  },
  "references": [
    {
      "url": "https://github.com/cyu/rack-cors/commit/e4d4fc362a4315808927011cbe5afcfe5486f17d",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cyu/rack-cors/compare/v1.0.3...v1.0.4",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2020/02/msg00004.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2020/10/msg00000.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/4571-1/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2021/dsa-4918",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cyu/rack-cors/commit/e4d4fc362a4315808927011cbe5afcfe5486f17d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cyu/rack-cors/compare/v1.0.3...v1.0.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2020/02/msg00004.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2020/10/msg00000.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/4571-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2021/dsa-4918",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:09.193728",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rack-cors",
    "owner": "cyu",
    "created_at": "2010-06-02T10:14:29Z",
    "updated_at": "2025-01-13T20:17:54Z",
    "pushed_at": "2025-01-13T20:17:49Z",
    "size": 673,
    "stars": 3266,
    "forks": 262,
    "open_issues": 35,
    "watchers": 3266,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 147976,
      "Ruby": 38423,
      "CSS": 3819,
      "CoffeeScript": 1773,
      "HTML": 502
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:06:06.445528"
  }
}