{
  "cve_id": "CVE-2019-19324",
  "github_data": {
    "repository": "xmidt-org/cjwt",
    "fix_commit": "9304d3e94242c1a6df77b21bde0e949392e1040a",
    "related_commits": [
      "9304d3e94242c1a6df77b21bde0e949392e1040a",
      "9304d3e94242c1a6df77b21bde0e949392e1040a"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "9304d3e94242c1a6df77b21bde0e949392e1040a",
      "commit_date": "2019-11-25T22:11:28Z",
      "author": {
        "login": "shilpa24balaji",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #29 from xmidt-org/correct-return-codes-and-eliminiate-silent-failure",
        "length": 140,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 190,
        "additions": 98,
        "deletions": 92
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -7,10 +7,13 @@ and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.\n ## [Unreleased]\n ### Added\n - Valgrind checking and fixes.\n+- Algorithms that are unsupported now are not mapped to alg=none to prevent untrusted\n+  accidental acceptance of JWT.\n \n ### Changed\n - Fixed memory leaks.\n - Updated the CONTRIBUTION document.\n+- Updated the cjwt_decode() documentation to be accurate and consistent.\n \n ## [1.0.1]\n ### Added"
        },
        {
          "filename": "src/cjwt.c",
          "status": "modified",
          "additions": 18,
          "deletions": 17,
          "patch": "@@ -117,16 +117,6 @@ int cjwt_alg_str_to_enum( const char *alg_str )\n     return -1;\n }\n \n-static cjwt_alg_t __cjwt_alg_str_to_enum( const char *alg_str )\n-{\n-  int alg = cjwt_alg_str_to_enum (alg_str);\n-\n-  if (alg >= 0)\n-\t\treturn alg;\n-\telse\n-\t\treturn alg_none;\n-}\n-\n \n inline static void cjwt_delete_child_json( cJSON* j, const char* s )\n {\n@@ -357,12 +347,14 @@ static int cjwt_verify_signature( cjwt_t *p_jwt, char *p_in, const char *p_sign\n     if( sz_signed != out_size ) {\n         cjwt_info( \"Signature length mismatch: enc %d, signature %d\\n\",\n                    ( int )sz_signed, ( int )out_size );\n-        ret = -1;\n+        ret = EINVAL;\n         goto err_match;\n     }\n \n-    ret = CRYPTO_memcmp(\n-              ( unsigned char* )signed_out, ( unsigned char* )signed_dec, out_size );\n+    if( 0 != CRYPTO_memcmp(signed_out, signed_dec, out_size) ) {\n+        ret = EINVAL;\n+    }\n+\n err_match:\n     free( signed_dec );\n err_decode:\n@@ -384,7 +376,8 @@ static int cjwt_update_payload( cjwt_t *p_cjwt, char *p_decpl )\n     cJSON *j_payload = cJSON_Parse( ( char* )p_decpl );\n \n     if( !j_payload ) {\n-        return ENOMEM;\n+        // The data is probably not json vs. memory allocation error.\n+        return EINVAL;\n     }\n \n     //extract data\n@@ -562,6 +555,7 @@ static int cjwt_update_payload( cjwt_t *p_cjwt, char *p_decpl )\n }\n \n static int cjwt_update_header( cjwt_t *p_cjwt, char *p_dechead )\n+    // The data is probably not json vs. memory allocation error.\n {\n     if( !p_cjwt || !p_dechead ) {\n         return EINVAL;\n@@ -571,7 +565,8 @@ static int cjwt_update_header( cjwt_t *p_cjwt, char *p_dechead )\n     cJSON *j_header = cJSON_Parse( ( char* )p_dechead );\n \n     if( !j_header ) {\n-        return ENOMEM;\n+        // The data is probably not json vs. memory allocation error.\n+        return EINVAL;\n     }\n \n     cjwt_info( \"Json  = %s\\n\", cJSON_Print( j_header ) );\n@@ -586,7 +581,14 @@ static int cjwt_update_header( cjwt_t *p_cjwt, char *p_dechead )\n     cJSON* j_alg = cJSON_GetObjectItem( j_header, \"alg\" );\n \n     if( j_alg ) {\n-        p_cjwt->header.alg = __cjwt_alg_str_to_enum( j_alg->valuestring );\n+        int alg;\n+\n+        alg = cjwt_alg_str_to_enum( j_alg->valuestring );\n+        if( -1 == alg ) {\n+            cJSON_Delete( j_header );\n+            return ENOTSUP;\n+        }\n+        p_cjwt->header.alg = alg;\n     }\n \n     //destroy cJSON object\n@@ -711,7 +713,6 @@ int cjwt_decode( const char *encoded, unsigned int options, cjwt_t **jwt,\n     int ret = 0;\n     char *payload, *signature;\n     ( void )options; //suppressing unused parameter warning\n-    ( void ) options;\n \n     //validate inputs\n     if( !encoded || !jwt ) {"
        },
        {
          "filename": "src/cjwt.h",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -93,7 +93,7 @@ typedef struct {\n  *  The function to use to decode and validate a JWT.\n  *\n  *  @note This function allocates memory associated with the output jwt that\n- *        must be freed.  cjwt_destroy() must be called to destry the object\n+ *        must be freed.  cjwt_destroy() must be called to destroy the object\n  *        when we are done with it.\n  *\n  *  @note This function does not\n@@ -105,10 +105,10 @@ typedef struct {\n  *  @param key     [IN]  the public key to use for validating the signature\n  *  @param key_len [IN]  the length of the key in bytes\n  *\n- *  @retval   0 successful\n- *  @retval  -1 invalid jwt format\n- *  @retval  -2 mismatched key\n- *  ... etc\n+ *  @retval  0       successful\n+ *  @retval  EINVAL  invalid jwt format or mismatched key\n+ *  @retval  ENOMEM  unable to allocate needed memory\n+ *  @retval  ENOTSUP unsupported algorithm\n  */\n int cjwt_decode( const char *encoded, unsigned int options, cjwt_t **jwt,\n                  const uint8_t *key, size_t key_len );"
        },
        {
          "filename": "tests/inputs/jwtbadalg.txt",
          "status": "added",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -0,0 +1 @@\n+eyAiYWxnIjogImludmFsaWQiLCAidHlwIjogIkpXVCIgfQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        },
        {
          "filename": "tests/test_cjwt.c",
          "status": "modified",
          "additions": 71,
          "deletions": 70,
          "patch": "@@ -29,79 +29,80 @@\n #include \"../src/cjwt.h\"\n \n typedef struct {\n-    bool expected;\n+    int expected;\n     const char *jwt_file_name;\n     bool is_key_in_file;\n     const char *key;\n     const char *decode_test_name;\n } test_case_t;\n \n test_case_t test_list[] = {\n-    {true, \"jwtn.txt\",  false, \"\", \"No Alg claims on on\"},\n-    {true, \"jwtnx.txt\", false, \"\", \"No Alg claims off on\"},\n-    {true, \"jwtny.txt\", false, \"\", \"No Alg claims off off\"},\n-    {false, \"jwtia.txt\", false, \"test_passwd1\", \"HS256 invalid jwt\"},\n-    {false, \"jwtib.txt\", false, \"test_passwd1\", \"HS256 invalid jwt\"},\n-    //{false, \"jwtic.txt\", false, \"test_passwd1\", \"HS256 invalid jwt\"}, /*TBD */ //FAILED test after modifying verify_signature logic\n-    {false, \"jwtid.txt\", false, \"test_passwd1\", \"HS256 invalid jwt\"},\n-    {false, \"jwtie.txt\", false, \"test_passwd1\", \"HS256 invalid jwt\"},\n-    {false, \"jwtif.txt\", false, \"test_passwd1\", \"HS256 invalid jwt\"},\n-    {true, \"jwt1.txt\", false, \"test_passwd1\", \"HS256 claims on on\"},\n-    {false, \"jwt1.txt\", false, \"test_passbad\", \"HS256 claims on on\"},\n-    {true, \"jwt2.txt\", false, \"test_passwd2\", \"HS384 claims on on\"},\n-    {false, \"jwt2.txt\", false, \"test_passbad\", \"HS384 claims on on\"},\n-    {true, \"jwt3.txt\", false, \"test_passwd3\", \"HS512 claims on on\"},\n-    {false, \"jwt3.txt\", false, \"test_passbad\", \"HS512 claims on on\"},\n-    {true, \"jwt5.txt\", true, \"pubkey5.pem\", \"RS384 claims on on\"},\n-    {false, \"jwt5.txt\", true, \"badkey4.pem\", \"RS384 claims on on\"},\n-    {true, \"jwt4.txt\", true, \"pubkey4.pem\", \"RS256 claims on on\"},\n-    {false, \"jwt4.txt\", true, \"badkey4.pem\", \"RS256 claims on on\"},\n-    {true, \"jwt6.txt\", true, \"pubkey6.pem\", \"RS512 claims on on\"},\n-    {false, \"jwt6.txt\", true, \"badkey6.pem\", \"RS512 claims on on\"},\n-    {true, \"jwt1x.txt\", false, \"test_passwd1\", \"HS256 claims off on\"},\n-    {false, \"jwt1x.txt\", false, \"test_prasswd1\", \"HS256 claims off on\"},\n-    {true, \"jwt2x.txt\", false, \"test_passwd2\", \"HS384 claims off on\"},\n-    {false, \"jwt2x.txt\", false, \"twest_passwd2\", \"HS384 claims off on\"},\n-    {true, \"jwt3x.txt\", false, \"test_passwd3\", \"HS512 claims off on\"},\n-    {false, \"jwt3x.txt\", false, \"test_passwd3...\", \"HS512 claims off on\"},\n-    {true, \"jwt4x.txt\", true, \"pubkey4.pem\", \"RS256 claims off on\"},\n-    {false, \"jwt4x.txt\", true, \"pubkey5.pem\", \"RS256 claims off on\"},\n-    {true, \"jwt5x.txt\", true, \"pubkey5.pem\", \"RS384 claims off on\"},\n-    {false, \"jwt5x.txt\", true, \"badkey5.pem\", \"RS384 claims off on\"},\n-    {true, \"jwt6x.txt\", true, \"pubkey6.pem\", \"RS512 claims off on\"},\n-    {false, \"jwt6x.txt\", true, \"badkey6.pem\", \"RS512 claims off on\"},\n-    {true, \"jwt1y.txt\", false, \"test_passwd1\", \"HS256 claims off off\"},\n-    {false, \"jwt1y.txt\", false, \"tast_passwd1\", \"HS256 claims off off\"},\n-    {true, \"jwt2y.txt\", false, \"test_passwd2\", \"HS384 claims off off\"},\n-    {false, \"jwt2y.txt\", false, \"test..passwd2\", \"HS384 claims off off\"},\n-    {true, \"jwt3y.txt\", false, \"test_passwd3\", \"HS512 claims off off\"},\n-    {false, \"jwt3y.txt\", false, \"tteesstt_passwd3\", \"HS512 claims off off\"},\n-    {true, \"jwt4y.txt\", true, \"pubkey4.pem\", \"RS256 claims off off\"},\n-    {false, \"jwt4y.txt\", true, \"badkey4.pem\", \"RS256 claims off off\"},\n-    {true, \"jwt5y.txt\", true, \"pubkey5.pem\", \"RS384 claims off off\"},\n-    {false, \"jwt5y.txt\", true, \"pubkey6.pem\", \"RS384 claims off off\"},\n-    {true, \"jwt6y.txt\", true, \"pubkey6.pem\", \"RS512 claims off off\"},\n-    {false, \"jwt6y.txt\", true, \"pubkey5.pem\", \"RS512 claims off off\"},\n-    {true, \"jwt1l.txt\", false, \"test_passwd1\", \"HS256 claims long\"},\n-    {false, \"jwt1l.txt\", false, \"test_keyword1\", \"HS256 claims long\"},\n-    {true, \"jwt2l.txt\", false, \"test_passwd2\", \"HS384 claims long\"},\n-    {false, \"jwt2l.txt\", false, \"test_passwd1\", \"HS384 claims long\"},\n-    {true, \"jwt3l.txt\", false, \"test_passwd3\", \"HS512 claims long\"},\n-    {false, \"jwt3l.txt\", false, \"passwd3\", \"HS512 claims long\"},\n-    {true, \"jwt4l.txt\", true, \"pubkey4.pem\", \"RS256 claims long\"},\n-    {false, \"jwt4l.txt\", true, \"badkey4.pem\", \"RS256 claims long\"},\n-    {true, \"jwt5l.txt\", true, \"pubkey5.pem\", \"RS384 claims long\"},\n-    {false, \"jwt5l.txt\", true, \"badkey5.pem\", \"RS384 claims long\"},\n-    {true, \"jwt6l.txt\", true, \"pubkey6.pem\", \"RS512 claims long\"},\n-    {false, \"jwt6l.txt\", true, \"badkey6.pem\", \"RS512 claims long\"},\n-    {true, \"jwt2.txt\", false, \"test_passwd2\", \"HS384 claims on on\"},\n-    {true, \"jwt3.txt\", false, \"test_passwd3\", \"HS512 claims on on\"},\n-    {true, \"jwt8_hs256.txt\", true, \"key8_hs256.pem\", \"HS256 claims on on\"},\n-    {true, \"jwt9_hs384.txt\", true, \"key9_hs384.pem\", \"HS384 claims on on\"},\n-    {true, \"jwt10_hs512.txt\", true, \"key10_hs512.pem\", \"HS512 claims on on\"},\n-    {false, \"jwt11.txt\", false, \"incorrect_key\", \"RS256 claims all\"},\n-    {false, \"jwt12.txt\", false, \"incorrect_key\", \"RS256 claims all\"},\n-\t{false, \"jwt13.txt\", false, \"incorrect_key\", \"RS256 claims all\"}\n+    {       0, \"jwtn.txt\",          false, \"\",                  \"No Alg claims on on\"       },\n+    {       0, \"jwtnx.txt\",         false, \"\",                  \"No Alg claims off on\"      },\n+    {       0, \"jwtny.txt\",         false, \"\",                  \"No Alg claims off off\"     },\n+    {  EINVAL, \"jwtia.txt\",         false, \"test_passwd1\",      \"HS256 invalid jwt\"         },\n+    {  EINVAL, \"jwtib.txt\",         false, \"test_passwd1\",      \"HS256 invalid jwt\"         },\n+//  {  EINVAL, \"jwtic.txt\",         false, \"test_passwd1\",      \"HS256 invalid jwt\"         }, /*TBD */ //FAILED test after modifying verify_signature logic\n+    {  EINVAL, \"jwtid.txt\",         false, \"test_passwd1\",      \"HS256 invalid jwt\"         },\n+    {  EINVAL, \"jwtie.txt\",         false, \"test_passwd1\",      \"HS256 invalid jwt\"         },\n+    {  EINVAL, \"jwtif.txt\",         false, \"test_passwd1\",      \"HS256 invalid jwt\"         },\n+    {       0, \"jwt1.txt\",          false, \"test_passwd1\",      \"HS256 claims on on\"        },\n+    {  EINVAL, \"jwt1.txt\",          false, \"test_passbad\",      \"HS256 claims on on\"        },\n+    {       0, \"jwt2.txt\",          false, \"test_passwd2\",      \"HS384 claims on on\"        },\n+    {  EINVAL, \"jwt2.txt\",          false, \"test_passbad\",      \"HS384 claims on on\"        },\n+    {       0, \"jwt3.txt\",          false, \"test_passwd3\",      \"HS512 claims on on\"        },\n+    {  EINVAL, \"jwt3.txt\",          false, \"test_passbad\",      \"HS512 claims on on\"        },\n+    {       0, \"jwt5.txt\",          true,  \"pubkey5.pem\",       \"RS384 claims on on\"        },\n+    {  EINVAL, \"jwt5.txt\",          true,  \"badkey4.pem\",       \"RS384 claims on on\"        },\n+    {       0, \"jwt4.txt\",          true,  \"pubkey4.pem\",       \"RS256 claims on on\"        },\n+    {  EINVAL, \"jwt4.txt\",          true,  \"badkey4.pem\",       \"RS256 claims on on\"        },\n+    {       0, \"jwt6.txt\",          true,  \"pubkey6.pem\",       \"RS512 claims on on\"        },\n+    {  EINVAL, \"jwt6.txt\",          true,  \"badkey6.pem\",       \"RS512 claims on on\"        },\n+    {       0, \"jwt1x.txt\",         false, \"test_passwd1\",      \"HS256 claims off on\"       },\n+    {  EINVAL, \"jwt1x.txt\",         false, \"test_prasswd1\",     \"HS256 claims off on\"       },\n+    {       0, \"jwt2x.txt\",         false, \"test_passwd2\",      \"HS384 claims off on\"       },\n+    {  EINVAL, \"jwt2x.txt\",         false, \"twest_passwd2\",     \"HS384 claims off on\"       },\n+    {       0, \"jwt3x.txt\",         false, \"test_passwd3\",      \"HS512 claims off on\"       },\n+    {  EINVAL, \"jwt3x.txt\",         false, \"test_passwd3...\",   \"HS512 claims off on\"       },\n+    {       0, \"jwt4x.txt\",         true,  \"pubkey4.pem\",       \"RS256 claims off on\"       },\n+    {  EINVAL, \"jwt4x.txt\",         true,  \"pubkey5.pem\",       \"RS256 claims off on\"       },\n+    {       0, \"jwt5x.txt\",         true,  \"pubkey5.pem\",       \"RS384 claims off on\"       },\n+    {  EINVAL, \"jwt5x.txt\",         true,  \"badkey5.pem\",       \"RS384 claims off on\"       },\n+    {       0, \"jwt6x.txt\",         true,  \"pubkey6.pem\",       \"RS512 claims off on\"       },\n+    {  EINVAL, \"jwt6x.txt\",         true,  \"badkey6.pem\",       \"RS512 claims off on\"       },\n+    {       0, \"jwt1y.txt\",         false, \"test_passwd1\",      \"HS256 claims off off\"      },\n+    {  EINVAL, \"jwt1y.txt\",         false, \"tast_passwd1\",      \"HS256 claims off off\"      },\n+    {       0, \"jwt2y.txt\",         false, \"test_passwd2\",      \"HS384 claims off off\"      },\n+    {  EINVAL, \"jwt2y.txt\",         false, \"test..passwd2\",     \"HS384 claims off off\"      },\n+    {       0, \"jwt3y.txt\",         false, \"test_passwd3\",      \"HS512 claims off off\"      },\n+    {  EINVAL, \"jwt3y.txt\",         false, \"tteesstt_passwd3\",  \"HS512 claims off off\"      },\n+    {       0, \"jwt4y.txt\",         true,  \"pubkey4.pem\",       \"RS256 claims off off\"      },\n+    {  EINVAL, \"jwt4y.txt\",         true,  \"badkey4.pem\",       \"RS256 claims off off\"      },\n+    {       0, \"jwt5y.txt\",         true,  \"pubkey5.pem\",       \"RS384 claims off off\"      },\n+    {  EINVAL, \"jwt5y.txt\",         true,  \"pubkey6.pem\",       \"RS384 claims off off\"      },\n+    {       0, \"jwt6y.txt\",         true,  \"pubkey6.pem\",       \"RS512 claims off off\"      },\n+    {  EINVAL, \"jwt6y.txt\",         true,  \"pubkey5.pem\",       \"RS512 claims off off\"      },\n+    {       0, \"jwt1l.txt\",         false, \"test_passwd1\",      \"HS256 claims long\"         },\n+    {  EINVAL, \"jwt1l.txt\",         false, \"test_keyword1\",     \"HS256 claims long\"         },\n+    {       0, \"jwt2l.txt\",         false, \"test_passwd2\",      \"HS384 claims long\"         },\n+    {  EINVAL, \"jwt2l.txt\",         false, \"test_passwd1\",      \"HS384 claims long\"         },\n+    {       0, \"jwt3l.txt\",         false, \"test_passwd3\",      \"HS512 claims long\"         },\n+    {  EINVAL, \"jwt3l.txt\",         false, \"passwd3\",           \"HS512 claims long\"         },\n+    {       0, \"jwt4l.txt\",         true,  \"pubkey4.pem\",       \"RS256 claims long\"         },\n+    {  EINVAL, \"jwt4l.txt\",         true,  \"badkey4.pem\",       \"RS256 claims long\"         },\n+    {       0, \"jwt5l.txt\",         true,  \"pubkey5.pem\",       \"RS384 claims long\"         },\n+    {  EINVAL, \"jwt5l.txt\",         true,  \"badkey5.pem\",       \"RS384 claims long\"         },\n+    {       0, \"jwt6l.txt\",         true,  \"pubkey6.pem\",       \"RS512 claims long\"         },\n+    {  EINVAL, \"jwt6l.txt\",         true,  \"badkey6.pem\",       \"RS512 claims long\"         },\n+    {       0, \"jwt2.txt\",          false, \"test_passwd2\",      \"HS384 claims on on\"        },\n+    {       0, \"jwt3.txt\",          false, \"test_passwd3\",      \"HS512 claims on on\"        },\n+    {       0, \"jwt8_hs256.txt\",    true,  \"key8_hs256.pem\",    \"HS256 claims on on\"        },\n+    {       0, \"jwt9_hs384.txt\",    true,  \"key9_hs384.pem\",    \"HS384 claims on on\"        },\n+    {       0, \"jwt10_hs512.txt\",   true,  \"key10_hs512.pem\",   \"HS512 claims on on\"        },\n+    {  EINVAL, \"jwt11.txt\",         false, \"incorrect_key\",     \"RS256 claims all\"          },\n+    {  EINVAL, \"jwt12.txt\",         false, \"incorrect_key\",     \"RS256 claims all\"          },\n+\t{  EINVAL, \"jwt13.txt\",         false, \"incorrect_key\",     \"RS256 claims all\"          },\n+\t{ ENOTSUP, \"jwtbadalg.txt\",     false, \"incorrect_key\",     \"Invalid/unsupported alg.\"  }\n };\n \n #define _NUM_TEST_CASES ( sizeof(test_list) / sizeof(test_case_t) )\n@@ -161,7 +162,7 @@ void test_case (unsigned _i )\n     const char *jwt_fname;\n     const char *key_str;\n     const char *decode_test_name;\n-    bool expected;\n+    int expected;\n     int key_len;\n     ssize_t jwt_bytes;\n     int result = 0;\n@@ -207,16 +208,16 @@ void test_case (unsigned _i )\n         result = jwt_bytes;\n     }\n \n-    if( expected == ( result == 0 ) ) {\n+    if( expected == result ) {\n         printf( \"--- PASSED: %s\\n\", decode_test_name );\n         pass_cnt += 1;\n     } else {\n-        printf( \"--- FAILED: %s\\n\", decode_test_name );\n+        printf( \"\\e[01;31m--- FAILED: %s (%d != %d)\\e[00m\\n\", decode_test_name, expected, result );\n         fail_cnt += 1;\n     }\n \n     cjwt_destroy( &jwt );\n-    CU_ASSERT_EQUAL ( expected, ( result == 0 ) );\n+    CU_ASSERT ( expected == result );\n }\n \n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f74f9f322e300a10f9733be100c0a27e5ebb9292",
            "date": "2024-12-19T06:33:47Z",
            "author_login": "schmidtw"
          },
          {
            "sha": "fd1be8120cd35fa041e3007166f02967ac2994ce",
            "date": "2024-12-19T06:26:44Z",
            "author_login": "schmidtw"
          },
          {
            "sha": "da94f4955b81317ec0252c35e9589c11533d4e02",
            "date": "2024-12-19T06:23:18Z",
            "author_login": "schmidtw"
          },
          {
            "sha": "93dd01a302e4c97ec65707c32e0ce15d57b27e07",
            "date": "2024-12-19T06:19:31Z",
            "author_login": "schmidtw"
          },
          {
            "sha": "86d3f2776a0cf86d8d6d0fc402f0853f3886bad3",
            "date": "2024-12-19T06:08:35Z",
            "author_login": "schmidtw"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-670",
    "description": "Xmidt cjwt through 1.0.1 before 2019-11-25 maps unsupported algorithms to alg=none, which sometimes leads to untrusted accidental JWT acceptance.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-03-20T18:15:13.857",
    "last_modified": "2024-11-21T04:34:34.387",
    "fix_date": "2019-11-25T22:11:28Z"
  },
  "references": [
    {
      "url": "https://github.com/xmidt-org/cjwt/commit/9304d3e94242c1a6df77b21bde0e949392e1040a",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xmidt-org/cjwt/pull/29#issuecomment-558356866",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xmidt-org/cjwt/commit/9304d3e94242c1a6df77b21bde0e949392e1040a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/xmidt-org/cjwt/pull/29#issuecomment-558356866",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:42.276839",
    "processing_status": "enhanced"
  }
}