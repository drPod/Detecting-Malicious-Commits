{
  "cve_id": "CVE-2019-19333",
  "github_data": {
    "repository": "CESNET/libyang",
    "fix_commit": "f6d684ade99dd37b21babaa8a856f64faa1e2e0d",
    "related_commits": [
      "f6d684ade99dd37b21babaa8a856f64faa1e2e0d",
      "f6d684ade99dd37b21babaa8a856f64faa1e2e0d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f6d684ade99dd37b21babaa8a856f64faa1e2e0d",
      "commit_date": "2019-12-04T09:59:04Z",
      "author": {
        "login": "michalvasko",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "parser BUGFIX long identity name buffer overflow",
        "length": 75,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 80,
        "additions": 57,
        "deletions": 23
      },
      "files": [
        {
          "filename": "src/parser.c",
          "status": "modified",
          "additions": 57,
          "deletions": 23,
          "patch": "@@ -979,7 +979,7 @@ lyp_precompile_pattern(struct ly_ctx *ctx, const char *pattern, pcre** pcre_cmp,\n  * @param[in] data2 If \\p type is #LY_TYPE_BITS: (int *) type bit field length,\n  *                                #LY_TYPE_DEC64: (uint8_t *) number of fraction digits (position of the floating point),\n  *                                otherwise ignored.\n- * @return 1 if a conversion took place, 0 if the value was kept the same.\n+ * @return 1 if a conversion took place, 0 if the value was kept the same, -1 on error.\n  */\n static int\n make_canonical(struct ly_ctx *ctx, int type, const char **value, void *data1, void *data2)\n@@ -994,6 +994,8 @@ make_canonical(struct ly_ctx *ctx, int type, const char **value, void *data1, vo\n     uint64_t unum;\n     uint8_t c;\n \n+#define LOGBUF(str) LOGERR(ctx, LY_EINVAL, \"Value \\\"%s\\\" is too long.\", str)\n+\n     switch (type) {\n     case LY_TYPE_BITS:\n         bits = (struct lys_type_bit **)data1;\n@@ -1006,8 +1008,10 @@ make_canonical(struct ly_ctx *ctx, int type, const char **value, void *data1, vo\n                 continue;\n             }\n             if (buf[0]) {\n+                LY_CHECK_ERR_RETURN(strlen(buf) + 1 + strlen(bits[i]->name) > buf_len, LOGBUF(bits[i]->name), -1);\n                 sprintf(buf + strlen(buf), \" %s\", bits[i]->name);\n             } else {\n+                LY_CHECK_ERR_RETURN(strlen(bits[i]->name) > buf_len, LOGBUF(bits[i]->name), -1);\n                 strcpy(buf, bits[i]->name);\n             }\n         }\n@@ -1025,7 +1029,7 @@ make_canonical(struct ly_ctx *ctx, int type, const char **value, void *data1, vo\n \n     case LY_TYPE_INST:\n         exp = lyxp_parse_expr(ctx, *value);\n-        LY_CHECK_ERR_RETURN(!exp, LOGINT(ctx), 0);\n+        LY_CHECK_ERR_RETURN(!exp, LOGINT(ctx), -1);\n \n         module_name = NULL;\n         count = 0;\n@@ -1035,9 +1039,9 @@ make_canonical(struct ly_ctx *ctx, int type, const char **value, void *data1, vo\n             /* copy WS */\n             if (i && ((end = exp->expr + exp->expr_pos[i - 1] + exp->tok_len[i - 1]) != cur_expr)) {\n                 if (count + (cur_expr - end) > buf_len) {\n-                    LOGINT(ctx);\n                     lyxp_expr_free(exp);\n-                    return 0;\n+                    LOGBUF(end);\n+                    return -1;\n                 }\n                 strncpy(&buf[count], end, cur_expr - end);\n                 count += cur_expr - end;\n@@ -1051,9 +1055,9 @@ make_canonical(struct ly_ctx *ctx, int type, const char **value, void *data1, vo\n                 if (!module_name || strncmp(cur_expr, module_name, j)) {\n                     /* print module name with colon, it does not equal to the parent one */\n                     if (count + j > buf_len) {\n-                        LOGINT(ctx);\n                         lyxp_expr_free(exp);\n-                        return 0;\n+                        LOGBUF(cur_expr);\n+                        return -1;\n                     }\n                     strncpy(&buf[count], cur_expr, j);\n                     count += j;\n@@ -1062,17 +1066,17 @@ make_canonical(struct ly_ctx *ctx, int type, const char **value, void *data1, vo\n \n                 /* copy the rest */\n                 if (count + (exp->tok_len[i] - j) > buf_len) {\n-                    LOGINT(ctx);\n                     lyxp_expr_free(exp);\n-                    return 0;\n+                    LOGBUF(end);\n+                    return -1;\n                 }\n                 strncpy(&buf[count], end, exp->tok_len[i] - j);\n                 count += exp->tok_len[i] - j;\n             } else {\n                 if (count + exp->tok_len[i] > buf_len) {\n-                    LOGINT(ctx);\n                     lyxp_expr_free(exp);\n-                    return 0;\n+                    LOGBUF(&exp->expr[exp->expr_pos[i]]);\n+                    return -1;\n                 }\n                 strncpy(&buf[count], &exp->expr[exp->expr_pos[i]], exp->tok_len[i]);\n                 count += exp->tok_len[i];\n@@ -1081,7 +1085,7 @@ make_canonical(struct ly_ctx *ctx, int type, const char **value, void *data1, vo\n         if (count > buf_len) {\n             LOGINT(ctx);\n             lyxp_expr_free(exp);\n-            return 0;\n+            return -1;\n         }\n         buf[count] = '\\0';\n \n@@ -1146,6 +1150,8 @@ make_canonical(struct ly_ctx *ctx, int type, const char **value, void *data1, vo\n     }\n \n     return 0;\n+\n+#undef LOGBUF\n }\n \n static const char *\n@@ -1412,7 +1418,10 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             c = c + len;\n         }\n \n-        make_canonical(ctx, LY_TYPE_BITS, value_, bits, &type->info.bits.count);\n+        if (make_canonical(ctx, LY_TYPE_BITS, value_, bits, &type->info.bits.count) == -1) {\n+            free(bits);\n+            goto error;\n+        }\n \n         if (store) {\n             /* store the result */\n@@ -1470,7 +1479,9 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             goto error;\n         }\n \n-        make_canonical(ctx, LY_TYPE_DEC64, value_, &num, &type->info.dec64.dig);\n+        if (make_canonical(ctx, LY_TYPE_DEC64, value_, &num, &type->info.dec64.dig) == -1) {\n+            goto error;\n+        }\n \n         if (store) {\n             /* store the result */\n@@ -1598,7 +1609,10 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             type->parent->flags |= LYS_DFLTJSON;\n         }\n \n-        make_canonical(ctx, LY_TYPE_IDENT, &value, (void*)lys_main_module(local_mod)->name, NULL);\n+        if (make_canonical(ctx, LY_TYPE_IDENT, &value, (void*)lys_main_module(local_mod)->name, NULL) == -1) {\n+            lydict_remove(ctx, value);\n+            goto error;\n+        }\n \n         /* replace the old value with the new one (even if they may be the same) */\n         lydict_remove(ctx, *value_);\n@@ -1651,7 +1665,11 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             /* turn logging back on */\n             ly_ilo_restore(NULL, prev_ilo, NULL, 0);\n         } else {\n-            if (make_canonical(ctx, LY_TYPE_INST, &value, NULL, NULL)) {\n+            if ((c = make_canonical(ctx, LY_TYPE_INST, &value, NULL, NULL))) {\n+                if (c == -1) {\n+                    goto error;\n+                }\n+\n                 /* if a change occurred, value was removed from the dictionary so fix the pointers */\n                 *value_ = value;\n             }\n@@ -1749,7 +1767,9 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             goto error;\n         }\n \n-        make_canonical(ctx, LY_TYPE_INT8, value_, &num, NULL);\n+        if (make_canonical(ctx, LY_TYPE_INT8, value_, &num, NULL) == -1) {\n+            goto error;\n+        }\n \n         if (store) {\n             /* store the result */\n@@ -1764,7 +1784,9 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             goto error;\n         }\n \n-        make_canonical(ctx, LY_TYPE_INT16, value_, &num, NULL);\n+        if (make_canonical(ctx, LY_TYPE_INT16, value_, &num, NULL) == -1) {\n+            goto error;\n+        }\n \n         if (store) {\n             /* store the result */\n@@ -1779,7 +1801,9 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             goto error;\n         }\n \n-        make_canonical(ctx, LY_TYPE_INT32, value_, &num, NULL);\n+        if (make_canonical(ctx, LY_TYPE_INT32, value_, &num, NULL) == -1) {\n+            goto error;\n+        }\n \n         if (store) {\n             /* store the result */\n@@ -1795,7 +1819,9 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             goto error;\n         }\n \n-        make_canonical(ctx, LY_TYPE_INT64, value_, &num, NULL);\n+        if (make_canonical(ctx, LY_TYPE_INT64, value_, &num, NULL) == -1) {\n+            goto error;\n+        }\n \n         if (store) {\n             /* store the result */\n@@ -1810,7 +1836,9 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             goto error;\n         }\n \n-        make_canonical(ctx, LY_TYPE_UINT8, value_, &unum, NULL);\n+        if (make_canonical(ctx, LY_TYPE_UINT8, value_, &unum, NULL) == -1) {\n+            goto error;\n+        }\n \n         if (store) {\n             /* store the result */\n@@ -1825,7 +1853,9 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             goto error;\n         }\n \n-        make_canonical(ctx, LY_TYPE_UINT16, value_, &unum, NULL);\n+        if (make_canonical(ctx, LY_TYPE_UINT16, value_, &unum, NULL) == -1) {\n+            goto error;\n+        }\n \n         if (store) {\n             /* store the result */\n@@ -1840,7 +1870,9 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             goto error;\n         }\n \n-        make_canonical(ctx, LY_TYPE_UINT32, value_, &unum, NULL);\n+        if (make_canonical(ctx, LY_TYPE_UINT32, value_, &unum, NULL) == -1) {\n+            goto error;\n+        }\n \n         if (store) {\n             /* store the result */\n@@ -1855,7 +1887,9 @@ lyp_parse_value(struct lys_type *type, const char **value_, struct lyxml_elem *x\n             goto error;\n         }\n \n-        make_canonical(ctx, LY_TYPE_UINT64, value_, &unum, NULL);\n+        if (make_canonical(ctx, LY_TYPE_UINT64, value_, &unum, NULL) == -1) {\n+            goto error;\n+        }\n \n         if (store) {\n             /* store the result */"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "03e294d83b610f89e8ba7b2156a80dc0ad534443",
            "date": "2025-01-08T11:32:35Z",
            "author_login": "michalvasko"
          },
          {
            "sha": "9458469a06846e87d6a8b5e00dbf013d0e9d50c0",
            "date": "2025-01-08T11:32:25Z",
            "author_login": "michalvasko"
          },
          {
            "sha": "13bdd039a5852c8450e87868bea94d41144cafd0",
            "date": "2025-01-08T11:30:35Z",
            "author_login": "michalvasko"
          },
          {
            "sha": "08a2b06a4a0913aff45b0c65038d4c0f3c548b80",
            "date": "2025-01-08T08:51:31Z",
            "author_login": "michalvasko"
          },
          {
            "sha": "26e01dab9ef9866719eb478f8d493dfc6149908b",
            "date": "2025-01-08T08:51:15Z",
            "author_login": "michalvasko"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-121",
    "description": "In all versions of libyang before 1.0-r5, a stack-based buffer overflow was discovered in the way libyang parses YANG files with a leaf of type \"bits\". An application that uses libyang to parse untrusted YANG files may be vulnerable to this flaw, which would allow an attacker to cause a denial of service or possibly gain code execution.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-12-06T16:15:10.827",
    "last_modified": "2024-11-21T04:34:35.697",
    "fix_date": "2019-12-04T09:59:04Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/errata/RHSA-2019:4360",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-19333",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/CESNET/libyang/commit/f6d684ade99dd37b21babaa8a856f64faa1e2e0d",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PETB6TVMFV5KUD4IKVP2JPLBCYHUGSAJ/",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RL54JMS7XW7PI6JC4BFSNNLSX5AINQUL/",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://access.redhat.com/errata/RHSA-2019:4360",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-19333",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/CESNET/libyang/commit/f6d684ade99dd37b21babaa8a856f64faa1e2e0d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PETB6TVMFV5KUD4IKVP2JPLBCYHUGSAJ/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RL54JMS7XW7PI6JC4BFSNNLSX5AINQUL/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:24.248079",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "libyang",
    "owner": "CESNET",
    "created_at": "2015-03-13T10:25:52Z",
    "updated_at": "2025-01-20T10:20:54Z",
    "pushed_at": "2025-01-16T13:43:33Z",
    "size": 45242,
    "stars": 377,
    "forks": 296,
    "open_issues": 18,
    "watchers": 377,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "devel",
      "libyang1",
      "master"
    ],
    "languages": {
      "C": 6704302,
      "CMake": 51183,
      "Tcl": 17965,
      "Shell": 17558,
      "Roff": 9841,
      "Makefile": 226
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T07:58:53.424106"
  }
}