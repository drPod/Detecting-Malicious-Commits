{
  "cve_id": "CVE-2019-19960",
  "github_data": {
    "repository": "wolfSSL/wolfssl",
    "fix_commit": "5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8",
    "related_commits": [
      "5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8",
      "5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8"
    ],
    "patch_url": "https://github.com/wolfSSL/wolfssl/commit/5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8.patch",
    "fix_commit_details": {
      "sha": "5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8",
      "commit_date": "2019-12-17T23:16:16Z",
      "author": {
        "login": "toddouska",
        "type": "User",
        "stats": {
          "total_commits": 3656,
          "average_weekly_commits": 5.015089163237311,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 487
        }
      },
      "commit_message": {
        "title": "Merge pull request #2637 from SparkiDev/ecc_cache_resist",
        "length": 106,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 115,
        "additions": 53,
        "deletions": 62
      },
      "files": [
        {
          "filename": "wolfcrypt/src/ecc.c",
          "status": "modified",
          "additions": 53,
          "deletions": 62,
          "patch": "@@ -2795,102 +2795,93 @@ int wc_ecc_mulmod_ex(mp_int* k, ecc_point *G, ecc_point *R,\n            i = (buf >> (DIGIT_BIT - 1)) & 1;\n            buf <<= 1;\n \n+#ifdef WC_NO_CACHE_RESISTANT\n            if (mode == 0) {\n-               mode = i;\n                /* timing resistant - dummy operations */\n                if (err == MP_OKAY)\n                    err = ecc_projective_add_point(M[1], M[2], M[2], a, modulus,\n                                                   mp);\n-#ifdef WC_NO_CACHE_RESISTANT\n                if (err == MP_OKAY)\n                    err = ecc_projective_dbl_point(M[2], M[3], a, modulus, mp);\n-#else\n-               /* instead of using M[i] for double, which leaks key bit to cache\n-                * monitor, use M[2] as temp, make sure address calc is constant,\n-                * keep M[0] and M[1] in cache */\n-              if (err == MP_OKAY)\n-                  err = mp_copy((mp_int*)\n-                             ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->x & wc_off_on_addr[i])),\n-                             M[2]->x);\n-              if (err == MP_OKAY)\n-                  err = mp_copy((mp_int*)\n-                             ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->y & wc_off_on_addr[i])),\n-                             M[2]->y);\n-              if (err == MP_OKAY)\n-                  err = mp_copy((mp_int*)\n-                             ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->z & wc_off_on_addr[i])),\n-                             M[2]->z);\n-              if (err == MP_OKAY)\n-                  err = ecc_projective_dbl_point(M[2], M[3], a, modulus, mp);\n-              /* copy M[2] back to M[i] */\n-              if (err == MP_OKAY)\n-                  err = mp_copy(M[2]->x,\n-                             (mp_int*)\n-                             ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->x & wc_off_on_addr[i])) );\n-              if (err == MP_OKAY)\n-                  err = mp_copy(M[2]->y,\n-                             (mp_int*)\n-                             ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->y & wc_off_on_addr[i])) );\n-              if (err == MP_OKAY)\n-                  err = mp_copy(M[2]->z,\n-                             (mp_int*)\n-                             ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->z & wc_off_on_addr[i])) );\n-#endif\n+           }\n+           else {\n+               if (err == MP_OKAY)\n+                   err = ecc_projective_add_point(M[0], M[1], M[i^1], a,\n+                                                  modulus, mp);\n                if (err == MP_OKAY)\n-                   continue;\n+                   err = ecc_projective_dbl_point(M[i], M[i], a, modulus, mp);\n            }\n \n+           mode |= i;\n+#else\n            if (err == MP_OKAY)\n-               err = ecc_projective_add_point(M[0], M[1], M[i^1], a, modulus,\n-                                                                       mp);\n-#ifdef WC_NO_CACHE_RESISTANT\n+               err = ecc_projective_add_point(M[0], M[1], M[2], a, modulus,\n+                                              mp);\n            if (err == MP_OKAY)\n-               err = ecc_projective_dbl_point(M[i], M[i], a, modulus, mp);\n-#else\n+               err = mp_copy(M[2]->x,\n+                             (mp_int*)\n+                             ( ((size_t)M[0]->x & wc_off_on_addr[mode&(i  )]) +\n+                               ((size_t)M[1]->x & wc_off_on_addr[mode&(i^1)]) +\n+                               ((size_t)M[2]->x & wc_off_on_addr[mode^1])) );\n+           if (err == MP_OKAY)\n+               err = mp_copy(M[2]->y,\n+                             (mp_int*)\n+                             ( ((size_t)M[0]->y & wc_off_on_addr[mode&(i  )]) +\n+                               ((size_t)M[1]->y & wc_off_on_addr[mode&(i^1)]) +\n+                               ((size_t)M[2]->y & wc_off_on_addr[mode^1])) );\n+           if (err == MP_OKAY)\n+               err = mp_copy(M[2]->z,\n+                             (mp_int*)\n+                             ( ((size_t)M[0]->z & wc_off_on_addr[mode&(i  )]) +\n+                               ((size_t)M[1]->z & wc_off_on_addr[mode&(i^1)]) +\n+                               ((size_t)M[2]->z & wc_off_on_addr[mode^1])) );\n+\n             /* instead of using M[i] for double, which leaks key bit to cache\n              * monitor, use M[2] as temp, make sure address calc is constant,\n              * keep M[0] and M[1] in cache */\n            if (err == MP_OKAY)\n                err = mp_copy((mp_int*)\n-                             ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->x & wc_off_on_addr[i])),\n+                             ( ((size_t)M[0]->x & wc_off_on_addr[i^1]) +\n+                               ((size_t)M[1]->x & wc_off_on_addr[i])),\n                              M[2]->x);\n            if (err == MP_OKAY)\n                err = mp_copy((mp_int*)\n-                             ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->y & wc_off_on_addr[i])),\n+                             ( ((size_t)M[0]->y & wc_off_on_addr[i^1]) +\n+                               ((size_t)M[1]->y & wc_off_on_addr[i])),\n                              M[2]->y);\n            if (err == MP_OKAY)\n                err = mp_copy((mp_int*)\n-                             ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->z & wc_off_on_addr[i])),\n+                             ( ((size_t)M[0]->z & wc_off_on_addr[i^1]) +\n+                               ((size_t)M[1]->z & wc_off_on_addr[i])),\n                              M[2]->z);\n            if (err == MP_OKAY)\n-               err = ecc_projective_dbl_point(M[2], M[2], a, modulus, mp);\n+               err = ecc_projective_dbl_point(M[2], M[3], a, modulus, mp);\n            /* copy M[2] back to M[i] */\n            if (err == MP_OKAY)\n-               err = mp_copy(M[2]->x,\n+               err = mp_copy((mp_int*)\n+                             (((size_t)M[2]->x & wc_off_on_addr[mode^1]) +\n+                              ((size_t)M[3]->x & wc_off_on_addr[mode])),\n                              (mp_int*)\n-                             ( ((wolfssl_word)M[0]->x & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->x & wc_off_on_addr[i])) );\n+                             ( ((size_t)M[0]->x & wc_off_on_addr[i^1]) +\n+                               ((size_t)M[1]->x & wc_off_on_addr[i])) );\n            if (err == MP_OKAY)\n-               err = mp_copy(M[2]->y,\n+               err = mp_copy((mp_int*)\n+                             (((size_t)M[2]->y & wc_off_on_addr[mode^1]) +\n+                              ((size_t)M[3]->y & wc_off_on_addr[mode])),\n                              (mp_int*)\n-                             ( ((wolfssl_word)M[0]->y & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->y & wc_off_on_addr[i])) );\n+                             ( ((size_t)M[0]->y & wc_off_on_addr[i^1]) +\n+                               ((size_t)M[1]->y & wc_off_on_addr[i])) );\n            if (err == MP_OKAY)\n-               err = mp_copy(M[2]->z,\n+               err = mp_copy((mp_int*)\n+                             (((size_t)M[2]->z & wc_off_on_addr[mode^1]) +\n+                              ((size_t)M[3]->z & wc_off_on_addr[mode])),\n                              (mp_int*)\n-                             ( ((wolfssl_word)M[0]->z & wc_off_on_addr[i^1]) +\n-                               ((wolfssl_word)M[1]->z & wc_off_on_addr[i])) );\n+                             ( ((size_t)M[0]->z & wc_off_on_addr[i^1]) +\n+                               ((size_t)M[1]->z & wc_off_on_addr[i])) );\n            if (err != MP_OKAY)\n                break;\n+\n+           mode |= i;\n #endif /* WC_NO_CACHE_RESISTANT */\n        } /* end for */\n    }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e037e0875dd2e07361e9fac4cf7a0238e0309e33",
            "date": "2025-01-11T00:31:34Z",
            "author_login": "JacobBarthelmeh"
          },
          {
            "sha": "d4c654205b396bc094101924cec5c70f3c1c43a1",
            "date": "2025-01-10T23:38:02Z",
            "author_login": "douzzer"
          },
          {
            "sha": "99a6e82ff8e6e5672d24a341d0563ef0e4eb0c83",
            "date": "2025-01-10T22:58:30Z",
            "author_login": "JacobBarthelmeh"
          },
          {
            "sha": "dc2ada117ecc48626ba431d63a01cbfd86c22b6c",
            "date": "2025-01-10T21:48:24Z",
            "author_login": "douzzer"
          },
          {
            "sha": "b16bedf82a6d10d69574a16684db74dd1e66f9f2",
            "date": "2025-01-10T21:48:05Z",
            "author_login": "douzzer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": null,
    "description": "In wolfSSL before 4.3.0, wc_ecc_mulmod_ex does not properly resist side-channel attacks.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-12-25T00:15:10.757",
    "last_modified": "2024-11-21T04:35:45.070",
    "fix_date": "2019-12-17T23:16:16Z"
  },
  "references": [
    {
      "url": "https://github.com/wolfSSL/wolfssl/commit/5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wolfSSL/wolfssl/releases/tag/v4.3.0-stable",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wolfSSL/wolfssl/commit/5ee9f9c7a23f8ed093fe1e42bc540727e96cebb8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wolfSSL/wolfssl/releases/tag/v4.3.0-stable",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:24.270955",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wolfssl",
    "owner": "wolfSSL",
    "created_at": "2015-01-07T18:50:58Z",
    "updated_at": "2025-01-13T00:58:18Z",
    "pushed_at": "2025-01-11T00:31:34Z",
    "size": 721845,
    "stars": 2393,
    "forks": 837,
    "open_issues": 146,
    "watchers": 2393,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C": 62599471,
      "Assembly": 10706563,
      "SWIG": 703527,
      "Shell": 514989,
      "M4": 472265,
      "CMake": 469091,
      "C#": 318580,
      "Makefile": 179610,
      "C++": 139371,
      "Perl": 131729,
      "Ada": 101144,
      "Cuda": 44905,
      "FreeMarker": 21402,
      "Batchfile": 16006,
      "Tcl": 13135,
      "Python": 12935,
      "Objective-C": 8372,
      "Euphoria": 8268,
      "Dockerfile": 7146,
      "Swift": 2317,
      "BitBake": 1232,
      "XS": 195
    },
    "commit_activity": {
      "total_commits_last_year": 2519,
      "avg_commits_per_week": 48.44230769230769,
      "days_active_last_year": 301
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:12:30.290141"
  }
}