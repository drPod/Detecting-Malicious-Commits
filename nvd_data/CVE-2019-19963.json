{
  "cve_id": "CVE-2019-19963",
  "github_data": {
    "repository": "wolfSSL/wolfssl",
    "fix_commit": "7e391f0fd57f2ef375b1174d752a56ce34b2b190",
    "related_commits": [
      "7e391f0fd57f2ef375b1174d752a56ce34b2b190",
      "7e391f0fd57f2ef375b1174d752a56ce34b2b190"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "7e391f0fd57f2ef375b1174d752a56ce34b2b190",
      "commit_date": "2019-12-06T00:20:21Z",
      "author": {
        "login": "toddouska",
        "type": "User",
        "stats": {
          "total_commits": 3656,
          "average_weekly_commits": 5.001367989056088,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 487
        }
      },
      "commit_message": {
        "title": "Merge pull request #2629 from SparkiDev/dsa_blinding",
        "length": 75,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 84,
        "additions": 84,
        "deletions": 0
      },
      "files": [
        {
          "filename": "wolfcrypt/src/dsa.c",
          "status": "modified",
          "additions": 84,
          "deletions": 0,
          "patch": "@@ -663,6 +663,9 @@ int wc_DsaExportKeyRaw(DsaKey* dsa, byte* x, word32* xSz, byte* y, word32* ySz)\n int wc_DsaSign(const byte* digest, byte* out, DsaKey* key, WC_RNG* rng)\n {\n     mp_int  k, kInv, r, s, H;\n+#ifndef WOLFSSL_MP_INVMOD_CONSTANT_TIME\n+    mp_int  b;\n+#endif\n     mp_int* qMinus1;\n     int     ret = 0, sz;\n     byte    buffer[DSA_HALF_SIZE];\n@@ -676,8 +679,14 @@ int wc_DsaSign(const byte* digest, byte* out, DsaKey* key, WC_RNG* rng)\n \n     sz = min((int)sizeof(buffer), mp_unsigned_bin_size(&key->q));\n \n+#ifdef WOLFSSL_MP_INVMOD_CONSTANT_TIME\n     if (mp_init_multi(&k, &kInv, &r, &s, &H, 0) != MP_OKAY)\n+#else\n+    if (mp_init_multi(&k, &kInv, &r, &s, &H, &b) != MP_OKAY)\n+#endif\n+    {\n         return MP_INIT_E;\n+    }\n     qMinus1 = &kInv;\n \n     /* NIST FIPS 186-4: B.2.2\n@@ -708,6 +717,7 @@ int wc_DsaSign(const byte* digest, byte* out, DsaKey* key, WC_RNG* rng)\n     if (ret == 0 && mp_add_d(&k, 1, &k) != MP_OKAY)\n         ret = MP_MOD_E;\n \n+#ifdef WOLFSSL_MP_INVMOD_CONSTANT_TIME\n     /* inverse k mod q */\n     if (ret == 0 && mp_invmod(&k, &key->q, &kInv) != MP_OKAY)\n         ret = MP_INVMOD_E;\n@@ -734,6 +744,72 @@ int wc_DsaSign(const byte* digest, byte* out, DsaKey* key, WC_RNG* rng)\n \n     if (ret == 0 && mp_mulmod(&s, &kInv, &key->q, &s) != MP_OKAY)\n         ret = MP_MULMOD_E;\n+#else\n+    /* Blinding value\n+     * Generate b in range [1, q-1].\n+     */\n+    if (ret == 0) {\n+        do {\n+            ret = wc_RNG_GenerateBlock(rng, buffer, sz);\n+            if (ret == 0 && mp_read_unsigned_bin(&b, buffer, sz) != MP_OKAY)\n+                ret = MP_READ_E;\n+        } while (ret == 0 && mp_cmp(&b, qMinus1) != MP_LT);\n+    }\n+    if (ret == 0 && mp_add_d(&b, 1, &b) != MP_OKAY)\n+        ret = MP_MOD_E;\n+\n+    /* set H from sha digest */\n+    if (ret == 0 && mp_read_unsigned_bin(&H, digest,\n+                                               WC_SHA_DIGEST_SIZE) != MP_OKAY) {\n+        ret = MP_READ_E;\n+    }\n+\n+    /* generate r, r = (g exp k mod p) mod q */\n+    if (ret == 0 && mp_exptmod_ex(&key->g, &k, key->q.used, &key->p,\n+                                                               &r) != MP_OKAY) {\n+        ret = MP_EXPTMOD_E;\n+    }\n+\n+    /* calculate s = (H + xr)/k\n+                   = b.(H/k.b + x.r/k.b) */\n+\n+    /* k = k.b */\n+    if (ret == 0 && mp_mulmod(&k, &b, &key->q, &k) != MP_OKAY)\n+        ret = MP_MULMOD_E;\n+\n+    /* kInv = 1/k.b mod q */\n+    if (ret == 0 && mp_invmod(&k, &key->q, &kInv) != MP_OKAY)\n+        ret = MP_INVMOD_E;\n+\n+    if (ret == 0 && mp_mod(&r, &key->q, &r) != MP_OKAY)\n+        ret = MP_MOD_E;\n+\n+    /* s = x.r */\n+    if (ret == 0 && mp_mul(&key->x, &r, &s) != MP_OKAY)\n+        ret = MP_MUL_E;\n+\n+    /* s = x.r/k.b */\n+    if (ret == 0 && mp_mulmod(&s, &kInv, &key->q, &s) != MP_OKAY)\n+        ret = MP_MULMOD_E;\n+\n+    /* H = H/k.b */\n+    if (ret == 0 && mp_mulmod(&H, &kInv, &key->q, &H) != MP_OKAY)\n+        ret = MP_MULMOD_E;\n+\n+    /* s = H/k.b + x.r/k.b\n+         = (H + x.r)/k.b */\n+    if (ret == 0 && mp_add(&s, &H, &s) != MP_OKAY)\n+        ret = MP_ADD_E;\n+\n+    /* s = b.(e + x.r)/k.b\n+         = (e + x.r)/k */\n+    if (ret == 0 && mp_mulmod(&s, &b, &key->q, &s) != MP_OKAY)\n+        ret = MP_MULMOD_E;\n+\n+    /* s = (e + x.r)/k */\n+    if (ret == 0 && mp_mod(&s, &key->q, &s) != MP_OKAY)\n+        ret = MP_MOD_E;\n+#endif\n \n     /* detect zero r or s */\n     if (ret == 0 && (mp_iszero(&r) == MP_YES || mp_iszero(&s) == MP_YES))\n@@ -759,6 +835,14 @@ int wc_DsaSign(const byte* digest, byte* out, DsaKey* key, WC_RNG* rng)\n         }\n     }\n \n+    ForceZero(buffer, sz);\n+    mp_forcezero(&kInv);\n+    mp_forcezero(&k);\n+#ifndef WOLFSSL_MP_INVMOD_CONSTANT_TIME\n+    mp_forcezero(&b);\n+\n+    mp_clear(&b);\n+#endif\n     mp_clear(&H);\n     mp_clear(&s);\n     mp_clear(&r);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "337932806d1b2a41593c5c5e38a3be1f85e21764",
            "date": "2025-01-25T16:48:14Z",
            "author_login": "dgarske"
          },
          {
            "sha": "b41d46a15833616028c33487c3902e2c843cf740",
            "date": "2025-01-25T16:11:25Z",
            "author_login": "douzzer"
          },
          {
            "sha": "0932891b5b97bdbaac3aa9d7e0ff73470481950f",
            "date": "2025-01-25T03:13:21Z",
            "author_login": "dgarske"
          },
          {
            "sha": "f7abd7cb2532c867fd598409e15af86ddcf55f59",
            "date": "2025-01-25T02:14:39Z",
            "author_login": "douzzer"
          },
          {
            "sha": "e6b87c2e54e28830cf95d1c19105e959b6780ef6",
            "date": "2025-01-24T23:55:55Z",
            "author_login": "douzzer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": null,
    "description": "An issue was discovered in wolfSSL before 4.3.0 in a non-default configuration where DSA is enabled. DSA signing uses the BEEA algorithm during modular inversion of the nonce, leading to a side-channel attack against the nonce.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2019-12-25T00:15:10.913",
    "last_modified": "2024-11-21T04:35:45.350",
    "fix_date": "2019-12-06T00:20:21Z"
  },
  "references": [
    {
      "url": "https://github.com/wolfSSL/wolfssl/commit/7e391f0fd57f2ef375b1174d752a56ce34b2b190",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wolfSSL/wolfssl/releases/tag/v4.3.0-stable",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wolfSSL/wolfssl/commit/7e391f0fd57f2ef375b1174d752a56ce34b2b190",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wolfSSL/wolfssl/releases/tag/v4.3.0-stable",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:24.271249",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "wolfssl",
    "owner": "wolfSSL",
    "created_at": "2015-01-07T18:50:58Z",
    "updated_at": "2025-01-26T03:18:01Z",
    "pushed_at": "2025-01-25T16:48:15Z",
    "size": 729999,
    "stars": 2396,
    "forks": 836,
    "open_issues": 128,
    "watchers": 2396,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C": 62652332,
      "Assembly": 10706558,
      "SWIG": 703527,
      "Shell": 514989,
      "M4": 472363,
      "CMake": 469100,
      "C#": 318580,
      "Makefile": 179614,
      "C++": 139367,
      "Perl": 131729,
      "Ada": 109433,
      "Cuda": 44905,
      "FreeMarker": 21402,
      "Batchfile": 16006,
      "Tcl": 13135,
      "Python": 12922,
      "Objective-C": 8372,
      "Euphoria": 8268,
      "Dockerfile": 7146,
      "Swift": 2317,
      "BitBake": 1232,
      "XS": 195
    },
    "commit_activity": {
      "total_commits_last_year": 2511,
      "avg_commits_per_week": 48.28846153846154,
      "days_active_last_year": 298
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T07:52:00.037170"
  }
}