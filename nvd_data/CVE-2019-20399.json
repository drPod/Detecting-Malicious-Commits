{
  "cve_id": "CVE-2019-20399",
  "github_data": {
    "repository": "paritytech/libsecp256k1",
    "fix_commit": "11ba23a9766a5079918cd9f515bc100bc8164b50",
    "related_commits": [
      "11ba23a9766a5079918cd9f515bc100bc8164b50",
      "11ba23a9766a5079918cd9f515bc100bc8164b50"
    ],
    "patch_url": "https://github.com/paritytech/libsecp256k1/commit/11ba23a9766a5079918cd9f515bc100bc8164b50.patch",
    "fix_commit_details": {
      "sha": "11ba23a9766a5079918cd9f515bc100bc8164b50",
      "commit_date": "2019-10-03T01:31:32Z",
      "author": {
        "login": "sorpaas",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent side channel leak in Scala::check_overflow",
        "length": 50,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 40,
        "additions": 23,
        "deletions": 17
      },
      "files": [
        {
          "filename": "Cargo.toml",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -2,7 +2,7 @@\n name = \"libsecp256k1\"\n description = \"Pure Rust secp256k1 implementation.\"\n license = \"Apache-2.0\"\n-version = \"0.3.0\"\n+version = \"0.4.0\"\n authors = [\"Wei Tang <hi@that.world>\"]\n repository = \"https://github.com/sorpaas/libsecp256k1-rs\"\n keywords = [ \"crypto\", \"ECDSA\", \"secp256k1\", \"bitcoin\", \"no_std\" ]\n@@ -18,12 +18,17 @@ sha2 = \"0.8\"\n digest = \"0.8\"\n typenum = \"1.11\"\n arrayref = \"0.3\"\n+subtle = { version = \"2.2\", default-features = false }\n \n [dev-dependencies]\n secp256k1-test = \"0.7\"\n clear_on_drop = \"0.2\"\n rand-test = { package = \"rand\", version = \"0.4\" }\n \n+[features]\n+default = [\"std\"]\n+std = [\"subtle/std\", \"rand/std\"]\n+\n [workspace]\n members = [\n   \"./gen/ecmult\","
        },
        {
          "filename": "src/lib.rs",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -7,7 +7,7 @@\n         unused_variables, non_shorthand_field_patterns,\n         unreachable_code, unused_parens)]\n \n-#![no_std]\n+#![cfg_attr(not(feature = \"std\"), no_std)]\n \n #[macro_use]\n mod field;"
        },
        {
          "filename": "src/scalar.rs",
          "status": "modified",
          "additions": 16,
          "deletions": 15,
          "patch": "@@ -1,4 +1,5 @@\n use core::ops::{Add, AddAssign, Mul, MulAssign};\n+use subtle::Choice;\n \n const SECP256K1_N_0: u32 = 0xD0364141;\n const SECP256K1_N_1: u32 = 0xBFD25E8C;\n@@ -69,21 +70,21 @@ impl Scalar {\n \n     #[must_use]\n     fn check_overflow(&self) -> bool {\n-        let mut yes: bool = false;\n-        let mut no: bool = false;\n-        no = no || (self.0[7] < SECP256K1_N_7); /* No need for a > check. */\n-        no = no || (self.0[6] < SECP256K1_N_6); /* No need for a > check. */\n-        no = no || (self.0[5] < SECP256K1_N_5); /* No need for a > check. */\n-        no = no || (self.0[4] < SECP256K1_N_4);\n-        yes = yes || ((self.0[4] > SECP256K1_N_4) && !no);\n-        no = no || ((self.0[3] < SECP256K1_N_3) && !yes);\n-        yes = yes || ((self.0[3] > SECP256K1_N_3) && !no);\n-        no = no || ((self.0[2] < SECP256K1_N_2) && !yes);\n-        yes = yes || ((self.0[2] > SECP256K1_N_2) && !no);\n-        no = no || ((self.0[1] < SECP256K1_N_1) && !yes);\n-        yes = yes || ((self.0[1] > SECP256K1_N_1) && !no);\n-        yes = yes || ((self.0[0] >= SECP256K1_N_0) && !no);\n-        return yes;\n+        let mut yes: Choice = 0.into();\n+        let mut no: Choice = 0.into();\n+        no |= Choice::from((self.0[7] < SECP256K1_N_7) as u8); /* No need for a > check. */\n+        no |= Choice::from((self.0[6] < SECP256K1_N_6) as u8); /* No need for a > check. */\n+        no |= Choice::from((self.0[5] < SECP256K1_N_5) as u8); /* No need for a > check. */\n+        no |= Choice::from((self.0[4] < SECP256K1_N_4) as u8);\n+        yes |= Choice::from((self.0[4] > SECP256K1_N_4) as u8) & !no;\n+        no |= Choice::from((self.0[3] < SECP256K1_N_3) as u8) & !yes;\n+        yes |= Choice::from((self.0[3] > SECP256K1_N_3) as u8) & !no;\n+        no |= Choice::from((self.0[2] < SECP256K1_N_2) as u8) & !yes;\n+        yes |= Choice::from((self.0[2] > SECP256K1_N_2) as u8) & !no;\n+        no |= Choice::from((self.0[1] < SECP256K1_N_1) as u8) & !yes;\n+        yes |= Choice::from((self.0[1] > SECP256K1_N_1) as u8) & !no;\n+        yes |= Choice::from((self.0[0] >= SECP256K1_N_0) as u8) & !no;\n+        return yes.into();\n     }\n \n     #[must_use]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "48dabd8821852c5fe00b846f6c37e1f6b05c3d8c",
            "date": "2023-03-06T17:12:52Z",
            "author_login": "chiro-hiro"
          },
          {
            "sha": "de9f27521461ad6497c4149541933a94f1a56d1b",
            "date": "2022-10-21T12:49:39Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "9d4f1452c16a746cdf4684c46a1283ff83242a55",
            "date": "2022-10-21T12:43:10Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "91bb14b35ce63d8a4e8b9a71072ab4c712be329b",
            "date": "2022-10-21T11:36:07Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "47265ba39ed607e892cb742ed79e7cf2f95d9d8d",
            "date": "2022-10-21T11:35:43Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-203",
    "description": "A timing vulnerability in the Scalar::check_overflow function in Parity libsecp256k1-rs before 0.3.1 potentially allows an attacker to leak information via a side-channel attack.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-01-23T00:15:09.953",
    "last_modified": "2024-11-21T04:38:23.637",
    "fix_date": "2019-10-03T01:31:32Z"
  },
  "references": [
    {
      "url": "https://github.com/paritytech/libsecp256k1/commit/11ba23a9766a5079918cd9f515bc100bc8164b50",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/libsecp256k1/commit/11ba23a9766a5079918cd9f515bc100bc8164b50",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:37.482862",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "libsecp256k1",
    "owner": "paritytech",
    "created_at": "2017-12-05T05:09:29Z",
    "updated_at": "2024-12-12T06:10:47Z",
    "pushed_at": "2024-08-17T20:01:27Z",
    "size": 3607,
    "stars": 179,
    "forks": 91,
    "open_issues": 33,
    "watchers": 179,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Rust": 204155
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T18:09:28.446296"
  }
}