{
  "cve_id": "CVE-2019-20807",
  "github_data": {
    "repository": "vim/vim",
    "fix_commit": "8c62a08faf89663e5633dc5036cd8695c80f1075",
    "related_commits": [
      "8c62a08faf89663e5633dc5036cd8695c80f1075",
      "8c62a08faf89663e5633dc5036cd8695c80f1075"
    ],
    "patch_url": "https://github.com/vim/vim/commit/8c62a08faf89663e5633dc5036cd8695c80f1075.patch",
    "fix_commit_details": {
      "sha": "8c62a08faf89663e5633dc5036cd8695c80f1075",
      "commit_date": "2019-02-08T13:34:10Z",
      "author": {
        "login": "brammool",
        "type": "User",
        "stats": {
          "total_commits": 16567,
          "average_weekly_commits": 15.411162790697674,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 874
        }
      },
      "commit_message": {
        "title": "patch 8.1.0881: can execute shell commands in rvim through interfaces",
        "length": 275,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 169,
        "additions": 151,
        "deletions": 18
      },
      "files": [
        {
          "filename": "runtime/doc/starting.txt",
          "status": "modified",
          "additions": 10,
          "deletions": 4,
          "patch": "@@ -248,12 +248,18 @@ a slash.  Thus \"-R\" means recovery and \"-/R\" readonly.\n \t\tchanges and writing.\n \t\t{not in Vi}\n \n-\t\t\t\t\t\t*-Z* *restricted-mode* *E145*\n+\t\t\t\t\t*-Z* *restricted-mode* *E145* *E981*\n -Z\t\tRestricted mode.  All commands that make use of an external\n \t\tshell are disabled.  This includes suspending with CTRL-Z,\n-\t\t\":sh\", filtering, the system() function, backtick expansion,\n-\t\tdelete(), rename(), mkdir(), writefile(), libcall(),\n-\t\tjob_start(), etc.\n+\t\t\":sh\", filtering, the system() function, backtick expansion\n+\t\tand libcall().\n+\t\tAlso disallowed are delete(), rename(), mkdir(), job_start(),\n+\t\tetc.\n+\t\tInterfaces, such as Python, Ruby and Lua, are also disabled,\n+\t\tsince they could be used to execute shell commands.  Perl uses\n+\t\tthe Safe module.\n+\t\tNote that the user may still find a loophole to execute a\n+\t\tshell command, it has only been made difficult.\n \t\t{not in Vi}\n \n \t\t\t\t\t\t\t*-g*"
        },
        {
          "filename": "src/evalfunc.c",
          "status": "modified",
          "additions": 18,
          "deletions": 4,
          "patch": "@@ -6817,7 +6817,7 @@ f_histadd(typval_T *argvars UNUSED, typval_T *rettv)\n #endif\n \n     rettv->vval.v_number = FALSE;\n-    if (check_restricted() || check_secure())\n+    if (check_secure())\n \treturn;\n #ifdef FEAT_CMDHIST\n     str = tv_get_string_chk(&argvars[0]);\t/* NULL on type error */\n@@ -7898,6 +7898,9 @@ f_luaeval(typval_T *argvars, typval_T *rettv)\n     char_u\t*str;\n     char_u\tbuf[NUMBUFLEN];\n \n+    if (check_restricted() || check_secure())\n+\treturn;\n+\n     str = tv_get_string_buf(&argvars[0], buf);\n     do_luaeval(str, argvars + 1, rettv);\n }\n@@ -8644,6 +8647,8 @@ f_mzeval(typval_T *argvars, typval_T *rettv)\n     char_u\t*str;\n     char_u\tbuf[NUMBUFLEN];\n \n+    if (check_restricted() || check_secure())\n+\treturn;\n     str = tv_get_string_buf(&argvars[0], buf);\n     do_mzeval(str, rettv);\n }\n@@ -8932,6 +8937,9 @@ f_py3eval(typval_T *argvars, typval_T *rettv)\n     char_u\t*str;\n     char_u\tbuf[NUMBUFLEN];\n \n+    if (check_restricted() || check_secure())\n+\treturn;\n+\n     if (p_pyx == 0)\n \tp_pyx = 3;\n \n@@ -8950,6 +8958,9 @@ f_pyeval(typval_T *argvars, typval_T *rettv)\n     char_u\t*str;\n     char_u\tbuf[NUMBUFLEN];\n \n+    if (check_restricted() || check_secure())\n+\treturn;\n+\n     if (p_pyx == 0)\n \tp_pyx = 2;\n \n@@ -8965,6 +8976,9 @@ f_pyeval(typval_T *argvars, typval_T *rettv)\n     static void\n f_pyxeval(typval_T *argvars, typval_T *rettv)\n {\n+    if (check_restricted() || check_secure())\n+\treturn;\n+\n # if defined(FEAT_PYTHON) && defined(FEAT_PYTHON3)\n     init_pyxversion();\n     if (p_pyx == 2)\n@@ -10819,7 +10833,7 @@ f_setbufvar(typval_T *argvars, typval_T *rettv UNUSED)\n     typval_T\t*varp;\n     char_u\tnbuf[NUMBUFLEN];\n \n-    if (check_restricted() || check_secure())\n+    if (check_secure())\n \treturn;\n     (void)tv_get_number(&argvars[0]);\t    /* issue errmsg if type error */\n     varname = tv_get_string_chk(&argvars[1]);\n@@ -11341,7 +11355,7 @@ f_settabvar(typval_T *argvars, typval_T *rettv)\n \n     rettv->vval.v_number = 0;\n \n-    if (check_restricted() || check_secure())\n+    if (check_secure())\n \treturn;\n \n     tp = find_tabpage((int)tv_get_number_chk(&argvars[0], NULL));\n@@ -14714,7 +14728,7 @@ f_writefile(typval_T *argvars, typval_T *rettv)\n     blob_T\t*blob = NULL;\n \n     rettv->vval.v_number = -1;\n-    if (check_restricted() || check_secure())\n+    if (check_secure())\n \treturn;\n \n     if (argvars[0].v_type == VAR_LIST)"
        },
        {
          "filename": "src/ex_cmds.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4775,7 +4775,7 @@ check_restricted(void)\n {\n     if (restricted)\n     {\n-\temsg(_(\"E145: Shell commands not allowed in rvim\"));\n+\temsg(_(\"E145: Shell commands and some functionality not allowed in rvim\"));\n \treturn TRUE;\n     }\n     return FALSE;"
        },
        {
          "filename": "src/ex_docmd.c",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -2007,11 +2007,16 @@ do_one_cmd(\n #ifdef HAVE_SANDBOX\n \tif (sandbox != 0 && !(ea.argt & SBOXOK))\n \t{\n-\t    /* Command not allowed in sandbox. */\n+\t    // Command not allowed in sandbox.\n \t    errormsg = _(e_sandbox);\n \t    goto doend;\n \t}\n #endif\n+\tif (restricted != 0 && (ea.argt & RESTRICT))\n+\t{\n+\t    errormsg = _(\"E981: Command not allowed in rvim\");\n+\t    goto doend;\n+\t}\n \tif (!curbuf->b_p_ma && (ea.argt & MODIFY))\n \t{\n \t    /* Command not allowed in non-'modifiable' buffer */"
        },
        {
          "filename": "src/if_perl.xs",
          "status": "modified",
          "additions": 5,
          "deletions": 8,
          "patch": "@@ -971,6 +971,7 @@ VIM_init(void)\n #ifdef DYNAMIC_PERL\n static char *e_noperl = N_(\"Sorry, this command is disabled: the Perl library could not be loaded.\");\n #endif\n+static char *e_perlsandbox = N_(\"E299: Perl evaluation forbidden in sandbox without the Safe module\");\n \n /*\n  * \":perl\"\n@@ -1019,13 +1020,12 @@ ex_perl(exarg_T *eap)\n \tvim_free(script);\n     }\n \n-#ifdef HAVE_SANDBOX\n-    if (sandbox)\n+    if (sandbox || secure)\n     {\n \tsafe = perl_get_sv(\"VIM::safe\", FALSE);\n # ifndef MAKE_TEST  /* avoid a warning for unreachable code */\n \tif (safe == NULL || !SvTRUE(safe))\n-\t    emsg(_(\"E299: Perl evaluation forbidden in sandbox without the Safe module\"));\n+\t    emsg(_(e_perlsandbox));\n \telse\n # endif\n \t{\n@@ -1037,7 +1037,6 @@ ex_perl(exarg_T *eap)\n \t}\n     }\n     else\n-#endif\n \tperl_eval_sv(sv, G_DISCARD | G_NOARGS);\n \n     SvREFCNT_dec(sv);\n@@ -1298,13 +1297,12 @@ do_perleval(char_u *str, typval_T *rettv)\n \tENTER;\n \tSAVETMPS;\n \n-#ifdef HAVE_SANDBOX\n-\tif (sandbox)\n+\tif (sandbox || secure)\n \t{\n \t    safe = get_sv(\"VIM::safe\", FALSE);\n # ifndef MAKE_TEST  /* avoid a warning for unreachable code */\n \t    if (safe == NULL || !SvTRUE(safe))\n-\t\temsg(_(\"E299: Perl evaluation forbidden in sandbox without the Safe module\"));\n+\t\temsg(_(e_perlsandbox));\n \t    else\n # endif\n \t    {\n@@ -1320,7 +1318,6 @@ do_perleval(char_u *str, typval_T *rettv)\n \t    }\n \t}\n \telse\n-#endif /* HAVE_SANDBOX */\n \t    sv = eval_pv((char *)str, 0);\n \n \tif (sv) {"
        },
        {
          "filename": "src/testdir/Make_all.mak",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -213,6 +213,7 @@ NEW_TESTS = \\\n \ttest_regexp_utf8 \\\n \ttest_registers \\\n \ttest_reltime \\\n+\ttest_restricted \\\n \ttest_retab \\\n \ttest_ruby \\\n \ttest_scriptnames \\\n@@ -375,6 +376,7 @@ NEW_TESTS_RES = \\\n \ttest_quotestar.res \\\n \ttest_regex_char_classes.res \\\n \ttest_registers.res \\\n+\ttest_restricted.res \\\n \ttest_retab.res \\\n \ttest_ruby.res \\\n \ttest_scriptnames.res \\"
        },
        {
          "filename": "src/testdir/test_restricted.vim",
          "status": "added",
          "additions": 107,
          "deletions": 0,
          "patch": "@@ -0,0 +1,107 @@\n+\" Test for \"rvim\" or \"vim -Z\"\n+\n+source shared.vim\n+\n+func Test_restricted()\n+  let cmd = GetVimCommand('Xrestricted')\n+  if cmd == ''\n+    return\n+  endif\n+\n+  call writefile([\n+\t\\ \"silent !ls\",\n+\t\\ \"call writefile([v:errmsg], 'Xrestrout')\",\n+\t\\ \"qa!\",\n+\t\\ ], 'Xrestricted')\n+  call system(cmd . ' -Z')\n+  call assert_match('E145:', join(readfile('Xrestrout')))\n+\n+  call delete('Xrestricted')\n+  call delete('Xrestrout')\n+endfunc\n+\n+func Run_restricted_test(ex_cmd, error)\n+  let cmd = GetVimCommand('Xrestricted')\n+  if cmd == ''\n+    return\n+  endif\n+\n+  call writefile([\n+\t\\ a:ex_cmd,\n+\t\\ \"call writefile([v:errmsg], 'Xrestrout')\",\n+\t\\ \"qa!\",\n+\t\\ ], 'Xrestricted')\n+  call system(cmd . ' -Z')\n+  call assert_match(a:error, join(readfile('Xrestrout')))\n+\n+  call delete('Xrestricted')\n+  call delete('Xrestrout')\n+endfunc\n+\n+func Test_restricted_lua()\n+  if !has('lua')\n+    throw 'Skipped: Lua is not supported'\n+  endif\n+  call Run_restricted_test('lua print(\"Hello, Vim!\")', 'E981:')\n+  call Run_restricted_test('luado return \"hello\"', 'E981:')\n+  call Run_restricted_test('luafile somefile', 'E981:')\n+  call Run_restricted_test('call luaeval(\"expression\")', 'E145:')\n+endfunc\n+\n+func Test_restricted_mzscheme()\n+  if !has('mzscheme')\n+    throw 'Skipped: MzScheme is not supported'\n+  endif\n+  call Run_restricted_test('mzscheme statement', 'E981:')\n+  call Run_restricted_test('mzfile somefile', 'E981:')\n+  call Run_restricted_test('call mzeval(\"expression\")', 'E145:')\n+endfunc\n+\n+func Test_restricted_perl()\n+  if !has('perl')\n+    throw 'Skipped: Perl is not supported'\n+  endif\n+  \" TODO: how to make Safe mode fail?\n+  \" call Run_restricted_test('perl system(\"ls\")', 'E981:')\n+  \" call Run_restricted_test('perldo system(\"hello\")', 'E981:')\n+  \" call Run_restricted_test('perlfile somefile', 'E981:')\n+  \" call Run_restricted_test('call perleval(\"system(\\\"ls\\\")\")', 'E145:')\n+endfunc\n+\n+func Test_restricted_python()\n+  if !has('python')\n+    throw 'Skipped: Python is not supported'\n+  endif\n+  call Run_restricted_test('python print \"hello\"', 'E981:')\n+  call Run_restricted_test('pydo return \"hello\"', 'E981:')\n+  call Run_restricted_test('pyfile somefile', 'E981:')\n+  call Run_restricted_test('call pyeval(\"expression\")', 'E145:')\n+endfunc\n+\n+func Test_restricted_python3()\n+  if !has('python3')\n+    throw 'Skipped: Python3 is not supported'\n+  endif\n+  call Run_restricted_test('py3 print \"hello\"', 'E981:')\n+  call Run_restricted_test('py3do return \"hello\"', 'E981:')\n+  call Run_restricted_test('py3file somefile', 'E981:')\n+  call Run_restricted_test('call py3eval(\"expression\")', 'E145:')\n+endfunc\n+\n+func Test_restricted_ruby()\n+  if !has('ruby')\n+    throw 'Skipped: Ruby is not supported'\n+  endif\n+  call Run_restricted_test('ruby print \"Hello\"', 'E981:')\n+  call Run_restricted_test('rubydo print \"Hello\"', 'E981:')\n+  call Run_restricted_test('rubyfile somefile', 'E981:')\n+endfunc\n+\n+func Test_restricted_tcl()\n+  if !has('tcl')\n+    throw 'Skipped: Tcl is not supported'\n+  endif\n+  call Run_restricted_test('tcl puts \"Hello\"', 'E981:')\n+  call Run_restricted_test('tcldo puts \"Hello\"', 'E981:')\n+  call Run_restricted_test('tclfile somefile', 'E981:')\n+endfunc"
        },
        {
          "filename": "src/version.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -783,6 +783,8 @@ static char *(features[]) =\n \n static int included_patches[] =\n {   /* Add new patch number below this line */\n+/**/\n+    881,\n /**/\n     880,\n /**/"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "30377e0fe084496911e108cbb33c84cf075e6e33",
            "date": "2025-01-13T07:23:24Z",
            "author_login": "denilsonsa"
          },
          {
            "sha": "221c53202da1e9a2a30d081a46eacdeb220be443",
            "date": "2025-01-13T06:54:33Z",
            "author_login": "dkearns"
          },
          {
            "sha": "8e92db4ea22f010d402df9d34071022a4aa8cef5",
            "date": "2025-01-13T06:30:11Z",
            "author_login": "yegappan"
          },
          {
            "sha": "3a0cc36c69744a7727ce34311d39d2d9d8ddc6f9",
            "date": "2025-01-13T06:27:43Z",
            "author_login": "zeertzjq"
          },
          {
            "sha": "c200f53cbb03fa11e489a27791d5b9dfc34a6564",
            "date": "2025-01-12T19:02:04Z",
            "author_login": "Konfekt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-78",
    "description": "In Vim before 8.1.0881, users can circumvent the rvim restricted mode and execute arbitrary OS commands via scripting interfaces (e.g., Python, Ruby, or Lua).",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-05-28T14:15:11.563",
    "last_modified": "2024-11-21T04:39:24.670",
    "fix_date": "2019-02-08T13:34:10Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-06/msg00018.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2020/Jul/24",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vim/vim/commit/8c62a08faf89663e5633dc5036cd8695c80f1075",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vim/vim/releases/tag/v8.1.0881",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/01/msg00003.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT211289",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/4582-1/",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.starwindsoftware.com/security/sw-20220812-0003/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-06/msg00018.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2020/Jul/24",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vim/vim/commit/8c62a08faf89663e5633dc5036cd8695c80f1075",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vim/vim/releases/tag/v8.1.0881",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/01/msg00003.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT211289",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/4582-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.starwindsoftware.com/security/sw-20220812-0003/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.822713",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vim",
    "owner": "vim",
    "created_at": "2015-08-18T21:03:56Z",
    "updated_at": "2025-01-14T08:58:33Z",
    "pushed_at": "2025-01-13T07:25:13Z",
    "size": 153925,
    "stars": 37215,
    "forks": 5529,
    "open_issues": 1516,
    "watchers": 37215,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Vim Script": 20025864,
      "C": 14374546,
      "Roff": 576344,
      "Makefile": 490522,
      "C++": 246793,
      "NSIS": 180936,
      "M4": 159971,
      "Java": 85446,
      "Shell": 71333,
      "PostScript": 64070,
      "Module Management System": 56375,
      "Python": 51761,
      "XS": 51261,
      "Ruby": 40309,
      "JavaScript": 37774,
      "NewLisp": 37431,
      "Raku": 34258,
      "Emacs Lisp": 30304,
      "Perl": 29735,
      "SystemVerilog": 27883,
      "Smalltalk": 25762,
      "Awk": 19481,
      "Batchfile": 18475,
      "Objective-C": 13147,
      "DIGITAL Command Language": 10835,
      "HTML": 6885,
      "Prolog": 4336,
      "KRL": 4206,
      "MATLAB": 1970,
      "Thrift": 1670,
      "OpenEdge ABL": 1490,
      "sed": 826,
      "Tcl": 745,
      "Lua": 738,
      "BitBake": 388
    },
    "commit_activity": {
      "total_commits_last_year": 1872,
      "avg_commits_per_week": 36.0,
      "days_active_last_year": 324
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "vim"
    },
    "collected_at": "2025-01-14T12:54:52.772009"
  }
}