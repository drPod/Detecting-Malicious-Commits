{
  "cve_id": "CVE-2019-20911",
  "github_data": {
    "repository": "LibreDWG/libredwg",
    "fix_commit": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
    "related_commits": [
      "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
      "c6f6668b82bfe595899cc820279ac37bb9ef16f5"
    ],
    "patch_url": "https://github.com/LibreDWG/libredwg/commit/c6f6668b82bfe595899cc820279ac37bb9ef16f5.patch",
    "fix_commit_details": {
      "sha": "c6f6668b82bfe595899cc820279ac37bb9ef16f5",
      "commit_date": "2019-12-31T20:59:36Z",
      "author": {
        "login": "rurban",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "cleanup tio.unknown",
        "length": 139,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 129,
        "additions": 15,
        "deletions": 114
      },
      "files": [
        {
          "filename": "include/dwg.h",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -5456,7 +5456,6 @@ typedef struct _dwg_object\n   {\n     Dwg_Object_Entity *entity;\n     Dwg_Object_Object *object;\n-    char *unknown; /* i.e. unhandled class as raw bits */\n   } tio;\n \n   Dwg_Handle handle;"
        },
        {
          "filename": "src/decode.c",
          "status": "modified",
          "additions": 10,
          "deletions": 60,
          "patch": "@@ -5011,10 +5011,7 @@ dwg_decode_add_object (Dwg_Data *restrict dwg, Bit_Chain *dat,\n           // LOG_HANDLE(\"common_size: %lu\\n\", obj->common_size); // needed for\n           // unknown\n           bit_set_position (dat, restartpos);\n-\n-          // obj->unknown_off = obj->unknown_pos - restartpos;\n-          // LOG_TRACE(\"Unknown pos %lu, offset %lu\\n\", obj->unknown_pos,\n-          // obj->unknown_off);\n+          obj->supertype = DWG_SUPERTYPE_UNKNOWN;\n \n           if (i >= 0 && i < (int)dwg->num_classes)\n             {\n@@ -5032,67 +5029,20 @@ dwg_decode_add_object (Dwg_Data *restrict dwg, Bit_Chain *dat,\n                   LOG_ERROR (\"Invalid class index %d >%d\", i,\n                              (int)dwg->num_classes);\n                 }\n-              obj->supertype = DWG_SUPERTYPE_UNKNOWN;\n               obj->type = 0;\n               *dat = abs_dat;\n               return error | DWG_ERR_VALUEOUTOFBOUNDS;\n             }\n           // properly dwg_decode_object/_entity for eed, reactors, xdic\n-          if (klass && !is_entity)\n-            {\n-              int err = dwg_decode_UNKNOWN_OBJ (dat, obj);\n-              error |= err;\n-              obj->supertype = DWG_SUPERTYPE_UNKNOWN;\n-              if (!dat)\n-                return error;\n-              if (err >= DWG_ERR_CRITICAL)\n-                *dat = abs_dat;\n-            }\n-          else if (klass) // is_entity\n-            {\n-              int err;\n-#if 0 && !defined(IS_RELEASE)\n-              if (strEQc(klass->dxfname, \"MULTILEADER\")) { //debug CED\n-                char *mleader = bit_read_TF(dat, obj->size);\n-                LOG_INSANE_TF(mleader, (int)obj->size)\n-                bit_set_position(dat, restartpos);\n-                free (mleader);\n-              }\n-#endif\n-              err = dwg_decode_UNKNOWN_ENT (dat, obj);\n-              error |= err;\n-              obj->supertype = DWG_SUPERTYPE_UNKNOWN;\n-              if (!dat)\n-                return error;\n-              if (err >= DWG_ERR_CRITICAL)\n-                *dat = abs_dat;\n-            }\n-          else // not a class\n-            {\n-              LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");\n-              SINCE (R_2000)\n-              {\n-                obj->bitsize = bit_read_RL (dat);\n-                LOG_TRACE (\"bitsize: \" FORMAT_RL \" [RL] @%lu.%u\\n\",\n-                           obj->bitsize, dat->byte-2, dat->bit);\n-                if (obj->bitsize > obj->size * 8)\n-                  {\n-                    LOG_ERROR (\"Invalid bitsize \" FORMAT_RL \" => \" FORMAT_RL,\n-                               obj->bitsize, obj->size * 8);\n-                    obj->bitsize = obj->size * 8;\n-                    error |= DWG_ERR_VALUEOUTOFBOUNDS;\n-                  }\n-              }\n-              if (!bit_read_H (dat, &obj->handle))\n-                {\n-                  LOG_TRACE (\"handle: \" FORMAT_H \" [H 5]\\n\",\n-                             ARGS_H (obj->handle));\n-                }\n-              restartpos = dat->byte;\n-              obj->supertype = DWG_SUPERTYPE_UNKNOWN;\n-              obj->tio.unknown = bit_read_TF (dat, obj->size);\n-              dat->byte = restartpos;\n-            }\n+          if (is_entity)\n+              error |= dwg_decode_UNKNOWN_ENT (dat, obj);\n+          else\n+              error |= dwg_decode_UNKNOWN_OBJ (dat, obj);\n+\n+          if (!dat)\n+            return error;\n+          if (error >= DWG_ERR_CRITICAL)\n+            *dat = abs_dat;\n         }\n     }\n "
        },
        {
          "filename": "src/encode.c",
          "status": "modified",
          "additions": 3,
          "deletions": 19,
          "patch": "@@ -1970,26 +1970,10 @@ dwg_encode_add_object (Dwg_Object *restrict obj, Bit_Chain *restrict dat,\n           else\n             is_entity = obj->supertype == DWG_SUPERTYPE_ENTITY;\n           // properly dwg_decode_object/_entity for eed, reactors, xdic\n-          if (klass && !is_entity)\n-            error = dwg_encode_UNKNOWN_OBJ (dat, obj);\n-          else if (klass)\n+          if (is_entity)\n             error = dwg_encode_UNKNOWN_ENT (dat, obj);\n-          else // not a class\n-            {\n-              LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");\n-              error = DWG_ERR_UNHANDLEDCLASS;\n-              SINCE (R_2000)\n-              {\n-                bit_write_RL (dat, obj->bitsize);\n-                LOG_INFO (\"bitsize: \" FORMAT_RL \" [RL] (@%lu.%u)\\n\", obj->bitsize,\n-                          dat->byte - 4, dat->bit);\n-              }\n-              bit_write_H (dat, &obj->handle);\n-              LOG_INFO (\"handle: \" FORMAT_H \" [H 5]\\n\", ARGS_H (obj->handle));\n-              // write obj->size bytes, excl. bitsize and handle.\n-              // overshoot the bitsize and handle size.\n-              bit_write_TF (dat, obj->tio.unknown, obj->size);\n-            }\n+          else\n+            error = dwg_encode_UNKNOWN_OBJ (dat, obj);\n         }\n     }\n "
        },
        {
          "filename": "src/free.c",
          "status": "modified",
          "additions": 2,
          "deletions": 34,
          "patch": "@@ -731,43 +731,11 @@ dwg_free_object (Dwg_Object *obj)\n       else if ((error = dwg_free_variable_type (obj->parent, obj))\n                & DWG_ERR_UNHANDLEDCLASS)\n         {\n-          int is_entity;\n-          int i;\n-          Dwg_Class *klass;\n-\n         unhandled:\n-          is_entity = 0;\n-          i = obj->type - 500;\n-          klass = NULL;\n-\n-          dwg = obj->parent;\n-          if (dwg->dwg_class && i >= 0 && i < (int)dwg->num_classes)\n-            {\n-              klass = &dwg->dwg_class[i];\n-              is_entity = klass ? dwg_class_is_entity (klass) : 0;\n-            }\n-          // indxf (and later injson) already creates some DEBUGGING classes\n-          if (obj->fixedtype == DWG_TYPE_TABLE)\n-            {\n-              // just the preview, i.e. common. plus some colors: leak\n+          if (obj->fixedtype == DWG_TYPE_UNKNOWN_ENT)\n               dwg_free_UNKNOWN_ENT (dat, obj);\n-            }\n-          else if (obj->fixedtype == DWG_TYPE_DATATABLE)\n-            {\n-              dwg_free_UNKNOWN_OBJ (dat, obj);\n-            }\n-          else if (klass && !is_entity)\n-            {\n+          else if (obj->fixedtype == DWG_TYPE_UNKNOWN_OBJ)\n               dwg_free_UNKNOWN_OBJ (dat, obj);\n-            }\n-          else if (klass && is_entity)\n-            {\n-              dwg_free_UNKNOWN_ENT (dat, obj);\n-            }\n-          else // not a class\n-            {\n-              FREE_IF (obj->tio.unknown);\n-            }\n         }\n     }\n   /* With this importer the dxfname is dynamic, just the name is const */"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "56d392a7e5ae5f522004ff92396dabd468f8d810",
            "date": "2024-12-22T06:40:55Z",
            "author_login": "aled-ua"
          },
          {
            "sha": "47a07e5fadfd335adf63cb3ff995edbda86565a3",
            "date": "2024-12-03T09:11:55Z",
            "author_login": "rurban"
          },
          {
            "sha": "a208df1ba9702d2933d57869230b51738fa05d32",
            "date": "2024-12-01T17:43:48Z",
            "author_login": "rurban"
          },
          {
            "sha": "73ea171313ed2efca15b59a1f484c56b4a661e1e",
            "date": "2024-12-01T17:38:55Z",
            "author_login": "rurban"
          },
          {
            "sha": "b76f99df5bf29af8f0b9bfdeb79793f8b821e247",
            "date": "2023-07-28T14:31:49Z",
            "author_login": "rurban"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-835",
    "description": "An issue was discovered in GNU LibreDWG through 0.9.3. Crafted input will lead to denial of service in bit_calc_CRC in bits.c, related to a for loop.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-07-16T18:15:13.300",
    "last_modified": "2024-11-21T04:39:40.197",
    "fix_date": "2019-12-31T20:59:36Z"
  },
  "references": [
    {
      "url": "https://github.com/LibreDWG/libredwg/commit/c6f6668b82bfe595899cc820279ac37bb9ef16f5",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/LibreDWG/libredwg/issues/178",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/LibreDWG/libredwg/commit/c6f6668b82bfe595899cc820279ac37bb9ef16f5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/LibreDWG/libredwg/issues/178",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:01.367690",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "libredwg",
    "owner": "LibreDWG",
    "created_at": "2018-05-06T13:01:25Z",
    "updated_at": "2025-01-08T13:57:48Z",
    "pushed_at": "2025-01-01T08:30:48Z",
    "size": 93717,
    "stars": 1016,
    "forks": 243,
    "open_issues": 110,
    "watchers": 1016,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C": 27080259,
      "Shell": 195384,
      "M4": 188244,
      "Perl": 133096,
      "SWIG": 62478,
      "Makefile": 57350,
      "CMake": 27062,
      "Roff": 12889,
      "Python": 11732,
      "Common Lisp": 4155,
      "Batchfile": 3219,
      "Dockerfile": 2881,
      "HTML": 842
    },
    "commit_activity": {
      "total_commits_last_year": 226,
      "avg_commits_per_week": 4.346153846153846,
      "days_active_last_year": 87
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:06:26.526589"
  }
}