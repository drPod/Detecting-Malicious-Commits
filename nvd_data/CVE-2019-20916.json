{
  "cve_id": "CVE-2019-20916",
  "github_data": {
    "repository": "pypa/pip",
    "fix_commit": "a4c735b14a62f9cb864533808ac63936704f2ace",
    "related_commits": [
      "a4c735b14a62f9cb864533808ac63936704f2ace",
      "a4c735b14a62f9cb864533808ac63936704f2ace"
    ],
    "patch_url": "https://github.com/pypa/pip/commit/a4c735b14a62f9cb864533808ac63936704f2ace.patch",
    "fix_commit_details": {
      "sha": "a4c735b14a62f9cb864533808ac63936704f2ace",
      "commit_date": "2019-04-17T13:25:45Z",
      "author": {
        "login": "gzpan123",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "FIX #6413 pip install <url> allow directory traversal",
        "length": 53,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 119,
        "additions": 114,
        "deletions": 5
      },
      "files": [
        {
          "filename": "news/6413.bugfix",
          "status": "added",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -0,0 +1,3 @@\n+Prevent ``pip install <url>`` from permitting directory traversal if e.g.\n+a malicious server sends a ``Content-Disposition`` header with a filename\n+containing ``../`` or ``..\\\\``."
        },
        {
          "filename": "src/pip/_internal/download.py",
          "status": "modified",
          "additions": 26,
          "deletions": 5,
          "patch": "@@ -66,7 +66,8 @@\n            'is_url', 'url_to_path', 'path_to_url',\n            'is_archive_file', 'unpack_vcs_link',\n            'unpack_file_url', 'is_vcs_url', 'is_file_url',\n-           'unpack_http_url', 'unpack_url']\n+           'unpack_http_url', 'unpack_url',\n+           'parse_content_disposition', 'sanitize_content_filename']\n \n \n logger = logging.getLogger(__name__)\n@@ -1050,6 +1051,29 @@ def unpack_url(\n         write_delete_marker_file(location)\n \n \n+def sanitize_content_filename(filename):\n+    # type: (str) -> str\n+    \"\"\"\n+    Sanitize the \"filename\" value from a Content-Disposition header.\n+    \"\"\"\n+    return os.path.basename(filename)\n+\n+\n+def parse_content_disposition(content_disposition, default_filename):\n+    # type: (str, str) -> str\n+    \"\"\"\n+    Parse the \"filename\" value from a Content-Disposition header, and\n+    return the default filename if the result is empty.\n+    \"\"\"\n+    _type, params = cgi.parse_header(content_disposition)\n+    filename = params.get('filename')\n+    if filename:\n+        # We need to sanitize the filename to prevent directory traversal\n+        # in case the filename contains \"..\" path parts.\n+        filename = sanitize_content_filename(filename)\n+    return filename or default_filename\n+\n+\n def _download_http_url(\n     link,  # type: Link\n     session,  # type: PipSession\n@@ -1097,10 +1121,7 @@ def _download_http_url(\n     # Have a look at the Content-Disposition header for a better guess\n     content_disposition = resp.headers.get('content-disposition')\n     if content_disposition:\n-        type, params = cgi.parse_header(content_disposition)\n-        # We use ``or`` here because we don't want to use an \"empty\" value\n-        # from the filename param.\n-        filename = params.get('filename') or filename\n+        filename = parse_content_disposition(content_disposition, filename)\n     ext = splitext(filename)[1]\n     if not ext:\n         ext = mimetypes.guess_extension(content_type)"
        },
        {
          "filename": "tests/unit/test_download.py",
          "status": "modified",
          "additions": 85,
          "deletions": 0,
          "patch": "@@ -12,6 +12,7 @@\n import pip\n from pip._internal.download import (\n     CI_ENVIRONMENT_VARIABLES, MultiDomainBasicAuth, PipSession, SafeFileCache,\n+    _download_http_url, parse_content_disposition, sanitize_content_filename,\n     unpack_file_url, unpack_http_url, url_to_path,\n )\n from pip._internal.exceptions import HashMismatch\n@@ -199,6 +200,90 @@ def test_unpack_http_url_bad_downloaded_checksum(mock_unpack_file):\n         rmtree(download_dir)\n \n \n+@pytest.mark.parametrize(\"filename, expected\", [\n+    ('dir/file', 'file'),\n+    ('../file', 'file'),\n+    ('../../file', 'file'),\n+    ('../', ''),\n+    ('../..', '..'),\n+    ('/', ''),\n+])\n+def test_sanitize_content_filename(filename, expected):\n+    \"\"\"\n+    Test inputs where the result is the same for Windows and non-Windows.\n+    \"\"\"\n+    assert sanitize_content_filename(filename) == expected\n+\n+\n+@pytest.mark.parametrize(\"filename, win_expected, non_win_expected\", [\n+    ('dir\\\\file', 'file', 'dir\\\\file'),\n+    ('..\\\\file', 'file', '..\\\\file'),\n+    ('..\\\\..\\\\file', 'file', '..\\\\..\\\\file'),\n+    ('..\\\\', '', '..\\\\'),\n+    ('..\\\\..', '..', '..\\\\..'),\n+    ('\\\\', '', '\\\\'),\n+])\n+def test_sanitize_content_filename__platform_dependent(\n+    filename,\n+    win_expected,\n+    non_win_expected\n+):\n+    \"\"\"\n+    Test inputs where the result is different for Windows and non-Windows.\n+    \"\"\"\n+    if sys.platform == 'win32':\n+        expected = win_expected\n+    else:\n+        expected = non_win_expected\n+    assert sanitize_content_filename(filename) == expected\n+\n+\n+@pytest.mark.parametrize(\"content_disposition, default_filename, expected\", [\n+    ('attachment;filename=\"../file\"', 'df', 'file'),\n+])\n+def test_parse_content_disposition(\n+    content_disposition,\n+    default_filename,\n+    expected\n+):\n+    actual = parse_content_disposition(content_disposition, default_filename)\n+    assert actual == expected\n+\n+\n+def test_download_http_url__no_directory_traversal(tmpdir):\n+    \"\"\"\n+    Test that directory traversal doesn't happen on download when the\n+    Content-Disposition header contains a filename with a \"..\" path part.\n+    \"\"\"\n+    mock_url = 'http://www.example.com/whatever.tgz'\n+    contents = b'downloaded'\n+    link = Link(mock_url)\n+\n+    session = Mock()\n+    resp = MockResponse(contents)\n+    resp.url = mock_url\n+    resp.headers = {\n+        # Set the content-type to a random value to prevent\n+        # mimetypes.guess_extension from guessing the extension.\n+        'content-type': 'random',\n+        'content-disposition': 'attachment;filename=\"../out_dir_file\"'\n+    }\n+    session.get.return_value = resp\n+\n+    download_dir = tmpdir.join('download')\n+    os.mkdir(download_dir)\n+    file_path, content_type = _download_http_url(\n+        link,\n+        session,\n+        download_dir,\n+        hashes=None,\n+        progress_bar='on',\n+    )\n+    # The file should be downloaded to download_dir.\n+    actual = os.listdir(download_dir)\n+    assert actual == ['out_dir_file']\n+\n+\n @pytest.mark.parametrize(\"url,win_expected,non_win_expected\", [\n     ('file:tmp', 'tmp', 'tmp'),\n     ('file:c:/path/to/file', r'C:\\path\\to\\file', 'c:/path/to/file'),"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a84a9403a493f46ec8c02975d9f832b2f19dc24d",
            "date": "2025-01-12T22:04:59Z",
            "author_login": "ichard26"
          },
          {
            "sha": "4ad729572d4b68d7fbafc3d6183fdb59c3001b7d",
            "date": "2025-01-12T17:30:18Z",
            "author_login": "ichard26"
          },
          {
            "sha": "94a5bf484cc37f6337fb4ff2944724f01cd48a88",
            "date": "2025-01-12T16:55:51Z",
            "author_login": "sbidoul"
          },
          {
            "sha": "654c3da58e36ae9a573ad3658ef7cdc5366940dc",
            "date": "2025-01-12T16:13:25Z",
            "author_login": "sbidoul"
          },
          {
            "sha": "145242988c09a54a3c68a0d79f0b5ce6565c7299",
            "date": "2025-01-12T13:03:46Z",
            "author_login": "sbidoul"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-22",
    "description": "The pip package before 19.2 for Python allows Directory Traversal when a URL is given in an install command, because a Content-Disposition header can have ../ in a filename, as demonstrated by overwriting the /root/.ssh/authorized_keys file. This occurs in _download_http_url in _internal/download.py.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-09-04T20:15:11.013",
    "last_modified": "2024-11-21T04:39:40.913",
    "fix_date": "2019-04-17T13:25:45Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00005.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00010.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gzpan123/pip/commit/a4c735b14a62f9cb864533808ac63936704f2ace",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pypa/pip/compare/19.1.1...19.2",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pypa/pip/issues/6413",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2020/09/msg00010.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2022.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00005.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00010.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gzpan123/pip/commit/a4c735b14a62f9cb864533808ac63936704f2ace",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pypa/pip/compare/19.1.1...19.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/pypa/pip/issues/6413",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2020/09/msg00010.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2022.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:03.822871",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pip",
    "owner": "pypa",
    "created_at": "2011-03-06T14:30:46Z",
    "updated_at": "2025-01-13T22:42:37Z",
    "pushed_at": "2025-01-12T22:05:00Z",
    "size": 71480,
    "stars": 9599,
    "forks": 3050,
    "open_issues": 1099,
    "watchers": 9599,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 6052055,
      "HTML": 3983
    },
    "commit_activity": {
      "total_commits_last_year": 654,
      "avg_commits_per_week": 12.576923076923077,
      "days_active_last_year": 186
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:11:31.325798"
  }
}