{
  "cve_id": "CVE-2019-9482",
  "github_data": {
    "repository": "MISP/MISP",
    "fix_commit": "c69969329d197bcdd04832b03310fa73f4eb7155",
    "related_commits": [
      "c69969329d197bcdd04832b03310fa73f4eb7155",
      "c69969329d197bcdd04832b03310fa73f4eb7155"
    ],
    "patch_url": "https://github.com/MISP/MISP/commit/c69969329d197bcdd04832b03310fa73f4eb7155.patch",
    "fix_commit_details": {
      "sha": "c69969329d197bcdd04832b03310fa73f4eb7155",
      "commit_date": "2019-02-28T19:27:36Z",
      "author": {
        "login": "iglocska",
        "type": "User",
        "stats": {
          "total_commits": 9407,
          "average_weekly_commits": 13.692867540029113,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 546
        }
      },
      "commit_message": {
        "title": "fix: [vulnerability] Fixes a vulnerability where a user can view sightings that they should not be eligible for",
        "length": 316,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 60,
        "additions": 55,
        "deletions": 5
      },
      "files": [
        {
          "filename": "app/Controller/SightingsController.php",
          "status": "modified",
          "additions": 55,
          "deletions": 5,
          "patch": "@@ -341,22 +341,72 @@ public function listSightings($id, $context = 'attribute', $org_id = false)\n             'contain' => array('Organisation.name'),\n             'order' => array('Sighting.date_sighting DESC')\n         ));\n+        if (!empty($sightings) && empty(Configure::read('Plugin.Sightings_policy')) && !$this->_isSiteAdmin()) {\n+            $eventOwnerOrgIdList = array();\n+            foreach ($sightings as $k => $sighting) {\n+                if (empty($eventOwnerOrgIdList[$sighting['Sighting']['event_id']])) {\n+                    $temp_event = $this->Event->find('first', array(\n+                        'recursive' => -1,\n+                        'conditions' => array('Event.id' => $sighting['Sighting']['event_id']),\n+                        'fields' => array('Event.id', 'Event.orgc_id')\n+                    ));\n+                    $eventOwnerOrgIdList[$temp_event['Event']['id']] = $temp_event['Event']['orgc_id'];\n+                }\n+                if (empty($eventOwnerOrgIdList[$sighting['Sighting']['event_id']]) || $eventOwnerOrgIdList[$sighting['Sighting']['event_id']] !== $this->Auth->user('org_id')) {\n+                    unset($sightings[$k]);\n+                }\n+            }\n+            $sightings = array_values($sightings);\n+        } else if (!empty($sightings) && Configure::read('Plugin.Sightings_policy') == 1 && !$this->_isSiteAdmin()) {\n+            $eventsWithOwnSightings = array();\n+            foreach ($sightings as $k => $sighting) {\n+                if (empty($eventsWithOwnSightings[$sighting['Sighting']['event_id']])) {\n+                    $eventsWithOwnSightings[$sighting['Sighting']['event_id']] = false;\n+                    $sighting_temp = $this->Sighting->find('first', array(\n+                        'recursive' => -1,\n+                        'conditions' => array(\n+                            'Sighting.event_id' => $sighting['Sighting']['event_id'],\n+                            'Sighting.org_id' => $this->Auth->user('org_id')\n+                        )\n+                    ));\n+                    if (empty($sighting_temp)) {\n+                        $temp_event = $this->Event->find('first', array(\n+                            'recursive' => -1,\n+                            'conditions' => array(\n+                                'Event.id' => $sighting['Sighting']['event_id'],\n+                                'Event.orgc_id' => $this->Auth->user('org_id')\n+                            ),\n+                            'fields' => array('Event.id', 'Event.orgc_id')\n+                        ));\n+                        $eventsWithOwnSightings[$sighting['Sighting']['event_id']] = !empty($temp_event);\n+                    } else {\n+                        $eventsWithOwnSightings[$sighting['Sighting']['event_id']] = true;\n+                    }\n+                }\n+                if (!$eventsWithOwnSightings[$sighting['Sighting']['event_id']]) {\n+                    unset($sightings[$k]);\n+                }\n+            }\n+            $sightings = array_values($sightings);\n+        }\n         $this->set('org_id', $org_id);\n         $this->set('rawId', $rawId);\n         $this->set('context', $context);\n         $this->set('types', array('Sighting', 'False-positive', 'Expiration'));\n         if (Configure::read('Plugin.Sightings_anonymise') && !$this->_isSiteAdmin()) {\n-            foreach ($sightings as $k => $v) {\n-                if ($v['Sighting']['org_id'] != $this->Auth->user('org_id')) {\n-                    $sightings[$k]['Organisation']['name'] = '';\n-                    $sightings[$k]['Sighting']['org_id'] = 0;\n+            if (!empty($sightings)) {\n+                foreach ($sightings as $k => $v) {\n+                    if ($v['Sighting']['org_id'] != $this->Auth->user('org_id')) {\n+                        $sightings[$k]['Organisation']['name'] = '';\n+                        $sightings[$k]['Sighting']['org_id'] = 0;\n+                    }\n                 }\n             }\n         }\n         if ($this->_isRest()) {\n             return $this->RestResponse->viewData($sightings, $this->response->type());\n         }\n-        $this->set('sightings', $sightings);\n+        $this->set('sightings', empty($sightings) ? array() : $sightings);\n         $this->layout = false;\n         $this->render('ajax/list_sightings');\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1da14f0253b2d853603bfb10e0c2b92aa27ecb6a",
            "date": "2025-01-13T07:57:22Z",
            "author_login": "iglocska"
          },
          {
            "sha": "439433b405ca829f33bf886e788be84c0870b6dc",
            "date": "2025-01-10T16:37:30Z",
            "author_login": "rubentroncon"
          },
          {
            "sha": "cd6d87caa2db4b6bbe65d7cdc2bd8d84bc7f0705",
            "date": "2025-01-10T13:37:21Z",
            "author_login": "chrisr3d"
          },
          {
            "sha": "9fd8c3f8d8ba83c31614b8f0614e50be4284147f",
            "date": "2025-01-10T09:35:18Z",
            "author_login": "chrisr3d"
          },
          {
            "sha": "7c23b9d94726723a38cfd48e5f6b2555f75c05fb",
            "date": "2025-01-10T09:43:37Z",
            "author_login": "chrisr3d"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": "CWE-862",
    "description": "In MISP 2.4.102, an authenticated user can view sightings that they should not be eligible for. Exploiting this requires access to the event that has received the sighting. The issue affects instances with restrictive sighting settings (event only / sighting reported only).",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2019-03-01T05:29:00.790",
    "last_modified": "2024-11-21T04:51:42.257",
    "fix_date": "2019-02-28T19:27:36Z"
  },
  "references": [
    {
      "url": "https://github.com/MISP/MISP/commit/c69969329d197bcdd04832b03310fa73f4eb7155",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/MISP/MISP/commit/c69969329d197bcdd04832b03310fa73f4eb7155",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:44.496916",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "MISP",
    "owner": "MISP",
    "created_at": "2013-02-07T17:10:34Z",
    "updated_at": "2025-01-14T10:15:41Z",
    "pushed_at": "2025-01-13T08:23:44Z",
    "size": 158555,
    "stars": 5471,
    "forks": 1421,
    "open_issues": 2637,
    "watchers": 5471,
    "has_security_policy": false,
    "default_branch": "2.5",
    "protected_branches": [
      "2.4",
      "3.x"
    ],
    "languages": {
      "PHP": 9033432,
      "JavaScript": 1901843,
      "Python": 401628,
      "CSS": 156405,
      "Shell": 105142,
      "Perl": 6169,
      "Makefile": 759
    },
    "commit_activity": {
      "total_commits_last_year": 1723,
      "avg_commits_per_week": 33.13461538461539,
      "days_active_last_year": 231
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T12:59:29.252533"
  }
}