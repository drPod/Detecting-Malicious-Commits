{
  "cve_id": "CVE-2019-9942",
  "github_data": {
    "repository": "twigphp/Twig",
    "fix_commit": "eac5422956e1dcca89a3669a03a3ff32f0502077",
    "related_commits": [
      "eac5422956e1dcca89a3669a03a3ff32f0502077",
      "eac5422956e1dcca89a3669a03a3ff32f0502077"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "eac5422956e1dcca89a3669a03a3ff32f0502077",
      "commit_date": "2019-03-10T17:31:18Z",
      "author": {
        "login": "fabpot",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fixed security issue in the sandbox",
        "length": 35,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 235,
        "additions": 160,
        "deletions": 75
      },
      "files": [
        {
          "filename": "CHANGELOG",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1,5 +1,8 @@\n * 1.38.0 (2019-XX-XX)\n \n+ * fixed sandbox security issue (under some circumstances, calling the\n+   __toString() method on an object was possible even if not allowed by the\n+   security policy)\n  * fixed batch filter clobbers array keys when fill parameter is used\n  * added preserveKeys support for the batch filter\n  * fixed \"embed\" support when used from \"template_from_string\""
        },
        {
          "filename": "src/Node/CheckToStringNode.php",
          "status": "added",
          "additions": 42,
          "deletions": 0,
          "patch": "@@ -0,0 +1,42 @@\n+<?php\n+\n+/*\n+ * This file is part of Twig.\n+ *\n+ * (c) Fabien Potencier\n+ *\n+ * For the full copyright and license information, please view the LICENSE\n+ * file that was distributed with this source code.\n+ */\n+\n+namespace Twig\\Node;\n+\n+use Twig\\Compiler;\n+use Twig\\Node\\Expression\\AbstractExpression;\n+\n+/**\n+ * Checks if casting an expression to __toString() is allowed by the sandbox.\n+ *\n+ * For instance, when there is a simple Print statement, like {{ article }},\n+ * and if the sandbox is enabled, we need to check that the __toString()\n+ * method is allowed if 'article' is an object. The same goes for {{ article|upper }}\n+ * or {{ random(article) }}\n+ *\n+ * @author Fabien Potencier <fabien@symfony.com>\n+ */\n+class CheckToStringNode extends Node\n+{\n+    public function __construct(AbstractExpression $expr)\n+    {\n+        parent::__construct(['expr' => $expr], [], $expr->getTemplateLine(), $expr->getNodeTag());\n+    }\n+\n+    public function compile(Compiler $compiler)\n+    {\n+        $compiler\n+            ->raw('$this->sandbox->ensureToStringAllowed(')\n+            ->subcompile($this->getNode('expr'))\n+            ->raw(')')\n+        ;\n+    }\n+}"
        },
        {
          "filename": "src/Node/SandboxedPrintNode.php",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -22,6 +22,8 @@\n  * and if the sandbox is enabled, we need to check that the __toString()\n  * method is allowed if 'article' is an object.\n  *\n+ * Not used anymore, to be deprecated in 2.x and removed in 3.0\n+ *\n  * @author Fabien Potencier <fabien@symfony.com>\n  */\n class SandboxedPrintNode extends PrintNode"
        },
        {
          "filename": "src/NodeVisitor/SandboxNodeVisitor.php",
          "status": "modified",
          "additions": 48,
          "deletions": 3,
          "patch": "@@ -13,13 +13,17 @@\n \n use Twig\\Environment;\n use Twig\\Node\\CheckSecurityNode;\n+use Twig\\Node\\CheckToStringNode;\n+use Twig\\Node\\Expression\\Binary\\ConcatBinary;\n use Twig\\Node\\Expression\\Binary\\RangeBinary;\n use Twig\\Node\\Expression\\FilterExpression;\n use Twig\\Node\\Expression\\FunctionExpression;\n+use Twig\\Node\\Expression\\GetAttrExpression;\n+use Twig\\Node\\Expression\\NameExpression;\n use Twig\\Node\\ModuleNode;\n use Twig\\Node\\Node;\n use Twig\\Node\\PrintNode;\n-use Twig\\Node\\SandboxedPrintNode;\n+use Twig\\Node\\SetNode;\n \n /**\n  * @final\n@@ -33,6 +37,8 @@ class SandboxNodeVisitor extends AbstractNodeVisitor\n     protected $filters;\n     protected $functions;\n \n+    private $needsToStringWrap = false;\n+\n     protected function doEnterNode(Node $node, Environment $env)\n     {\n         if ($node instanceof ModuleNode) {\n@@ -63,9 +69,28 @@ protected function doEnterNode(Node $node, Environment $env)\n                 $this->functions['range'] = $node;\n             }\n \n-            // wrap print to check __toString() calls\n             if ($node instanceof PrintNode) {\n-                return new SandboxedPrintNode($node->getNode('expr'), $node->getTemplateLine(), $node->getNodeTag());\n+                $this->needsToStringWrap = true;\n+                $this->wrapNode($node, 'expr');\n+            }\n+\n+            if ($node instanceof SetNode && !$node->getAttribute('capture')) {\n+                $this->needsToStringWrap = true;\n+            }\n+\n+            // wrap outer nodes that can implicitly call __toString()\n+            if ($this->needsToStringWrap) {\n+                if ($node instanceof ConcatBinary) {\n+                    $this->wrapNode($node, 'left');\n+                    $this->wrapNode($node, 'right');\n+                }\n+                if ($node instanceof FilterExpression) {\n+                    $this->wrapNode($node, 'node');\n+                    $this->wrapArrayNode($node, 'arguments');\n+                }\n+                if ($node instanceof FunctionExpression) {\n+                    $this->wrapArrayNode($node, 'arguments');\n+                }\n             }\n         }\n \n@@ -78,11 +103,31 @@ protected function doLeaveNode(Node $node, Environment $env)\n             $this->inAModule = false;\n \n             $node->setNode('constructor_end', new Node([new CheckSecurityNode($this->filters, $this->tags, $this->functions), $node->getNode('display_start')]));\n+        } elseif ($this->inAModule) {\n+            if ($node instanceof PrintNode || $node instanceof SetNode) {\n+                $this->needsToStringWrap = false;\n+            }\n         }\n \n         return $node;\n     }\n \n+    private function wrapNode(Node $node, $name)\n+    {\n+        $expr = $node->getNode($name);\n+        if ($expr instanceof NameExpression || $expr instanceof GetAttrExpression) {\n+            $node->setNode($name, new CheckToStringNode($expr));\n+        }\n+    }\n+\n+    private function wrapArrayNode(Node $node, $name)\n+    {\n+        $args = $node->getNode($name);\n+        foreach ($args as $name => $_) {\n+            $this->wrapNode($args, $name);\n+        }\n+    }\n+\n     public function getPriority()\n     {\n         return 0;"
        },
        {
          "filename": "test/Twig/Tests/Extension/SandboxTest.php",
          "status": "modified",
          "additions": 65,
          "deletions": 30,
          "patch": "@@ -34,7 +34,6 @@ protected function setUp()\n             '1_basic3' => '{% if name %}foo{% endif %}',\n             '1_basic4' => '{{ obj.bar }}',\n             '1_basic5' => '{{ obj }}',\n-            '1_basic6' => '{{ arr.obj }}',\n             '1_basic7' => '{{ cycle([\"foo\",\"bar\"], 1) }}',\n             '1_basic8' => '{{ obj.getfoobar }}{{ obj.getFooBar }}',\n             '1_basic9' => '{{ obj.foobar }}{{ obj.fooBar }}',\n@@ -112,11 +111,14 @@ public function testSandboxUnallowedProperty()\n         }\n     }\n \n-    public function testSandboxUnallowedToString()\n+    /**\n+     * @dataProvider getSandboxUnallowedToStringTests\n+     */\n+    public function testSandboxUnallowedToString($template)\n     {\n-        $twig = $this->getEnvironment(true, [], self::$templates);\n+        $twig = $this->getEnvironment(true, [], ['index' => $template], [], ['upper'], ['FooObject' => 'getAnotherFooObject'], [], ['random']);\n         try {\n-            $twig->load('1_basic5')->render(self::$params);\n+            $twig->loadTemplate('index')->render(self::$params);\n             $this->fail('Sandbox throws a SecurityError exception if an unallowed method (__toString()) is called in the template');\n         } catch (SecurityError $e) {\n             $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedMethodError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedMethodError');\n@@ -125,17 +127,61 @@ public function testSandboxUnallowedToString()\n         }\n     }\n \n-    public function testSandboxUnallowedToStringArray()\n+    public function getSandboxUnallowedToStringTests()\n     {\n-        $twig = $this->getEnvironment(true, [], self::$templates);\n-        try {\n-            $twig->load('1_basic6')->render(self::$params);\n-            $this->fail('Sandbox throws a SecurityError exception if an unallowed method (__toString()) is called in the template');\n-        } catch (SecurityError $e) {\n-            $this->assertInstanceOf('\\Twig\\Sandbox\\SecurityNotAllowedMethodError', $e, 'Exception should be an instance of Twig_Sandbox_SecurityNotAllowedMethodError');\n-            $this->assertEquals('FooObject', $e->getClassName(), 'Exception should be raised on the \"FooObject\" class');\n-            $this->assertEquals('__tostring', $e->getMethodName(), 'Exception should be raised on the \"__toString\" method');\n-        }\n+        return [\n+            'simple' => ['{{ obj }}'],\n+            'object_from_array' => ['{{ arr.obj }}'],\n+            'object_chain' => ['{{ obj.anotherFooObject }}'],\n+            'filter' => ['{{ obj|upper }}'],\n+            'filter_from_array' => ['{{ arr.obj|upper }}'],\n+            'function' => ['{{ random(obj) }}'],\n+            'function_from_array' => ['{{ random(arr.obj) }}'],\n+            'function_and_filter' => ['{{ random(obj|upper) }}'],\n+            'function_and_filter_from_array' => ['{{ random(arr.obj|upper) }}'],\n+            'object_chain_and_filter' => ['{{ obj.anotherFooObject|upper }}'],\n+            'object_chain_and_function' => ['{{ random(obj.anotherFooObject) }}'],\n+            'concat' => ['{{ obj ~ \"\" }}'],\n+            'concat_again' => ['{{ \"\" ~ obj }}'],\n+        ];\n+    }\n+\n+    /**\n+     * @dataProvider getSandboxAllowedToStringTests\n+     */\n+    public function testSandboxAllowedToString($template, $output)\n+    {\n+        $twig = $this->getEnvironment(true, [], ['index' => $template], ['set'], [], ['FooObject' => ['foo', 'getAnotherFooObject']]);\n+        $this->assertEquals($output, $twig->load('index')->render(self::$params));\n+    }\n+\n+    public function getSandboxAllowedToStringTests()\n+    {\n+        return [\n+            'constant_test' => ['{{ obj is constant(\"PHP_INT_MAX\") }}', ''],\n+            'set_object' => ['{% set a = obj.anotherFooObject %}{{ a.foo }}', 'foo'],\n+            'is_defined' => ['{{ obj.anotherFooObject is defined }}', '1'],\n+            'is_null' => ['{{ obj is null }}', ''],\n+            'is_sameas' => ['{{ obj is same as(obj) }}', '1'],\n+            'is_sameas_from_array' => ['{{ arr.obj is same as(arr.obj) }}', '1'],\n+            'is_sameas_from_another_method' => ['{{ obj.anotherFooObject is same as(obj.anotherFooObject) }}', ''],\n+        ];\n+    }\n+\n+    public function testSandboxAllowMethodToString()\n+    {\n+        $twig = $this->getEnvironment(true, [], self::$templates, [], [], ['FooObject' => '__toString']);\n+        FooObject::reset();\n+        $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allow some methods');\n+        $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');\n+    }\n+\n+    public function testSandboxAllowMethodToStringDisabled()\n+    {\n+        $twig = $this->getEnvironment(false, [], self::$templates);\n+        FooObject::reset();\n+        $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allows __toString when sandbox disabled');\n+        $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');\n     }\n \n     public function testSandboxUnallowedFunction()\n@@ -170,22 +216,6 @@ public function testSandboxAllowMethodFoo()\n         $this->assertEquals(1, FooObject::$called['foo'], 'Sandbox only calls method once');\n     }\n \n-    public function testSandboxAllowMethodToString()\n-    {\n-        $twig = $this->getEnvironment(true, [], self::$templates, [], [], ['FooObject' => '__toString']);\n-        FooObject::reset();\n-        $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allow some methods');\n-        $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');\n-    }\n-\n-    public function testSandboxAllowMethodToStringDisabled()\n-    {\n-        $twig = $this->getEnvironment(false, [], self::$templates);\n-        FooObject::reset();\n-        $this->assertEquals('foo', $twig->load('1_basic5')->render(self::$params), 'Sandbox allows __toString when sandbox disabled');\n-        $this->assertEquals(1, FooObject::$called['__toString'], 'Sandbox only calls method once');\n-    }\n-\n     public function testSandboxAllowFilter()\n     {\n         $twig = $this->getEnvironment(true, [], self::$templates, [], ['upper']);\n@@ -326,4 +356,9 @@ public function getFooBar()\n \n         return 'foobar';\n     }\n+\n+    public function getAnotherFooObject()\n+    {\n+        return new self();\n+    }\n }"
        },
        {
          "filename": "test/Twig/Tests/Node/SandboxedPrintTest.php",
          "status": "removed",
          "additions": 0,
          "deletions": 42,
          "patch": "@@ -1,42 +0,0 @@\n-<?php\n-\n-/*\n- * This file is part of Twig.\n- *\n- * (c) Fabien Potencier\n- *\n- * For the full copyright and license information, please view the LICENSE\n- * file that was distributed with this source code.\n- */\n-\n-use Twig\\Node\\Expression\\ConstantExpression;\n-use Twig\\Node\\Expression\\NameExpression;\n-use Twig\\Node\\SandboxedPrintNode;\n-use Twig\\Test\\NodeTestCase;\n-\n-class Twig_Tests_Node_SandboxedPrintTest extends NodeTestCase\n-{\n-    public function testConstructor()\n-    {\n-        $node = new SandboxedPrintNode($expr = new ConstantExpression('foo', 1), 1);\n-\n-        $this->assertEquals($expr, $node->getNode('expr'));\n-    }\n-\n-    public function getTests()\n-    {\n-        $tests[] = [new SandboxedPrintNode(new ConstantExpression('foo', 1), 1), <<<EOF\n-// line 1\n-echo \"foo\";\n-EOF\n-        ];\n-\n-        $tests[] = [new SandboxedPrintNode(new NameExpression('foo', 1), 1), <<<EOF\n-// line 1\n-echo \\$this->env->getExtension('\\Twig\\Extension\\SandboxExtension')->ensureToStringAllowed({$this->getVariableGetter('foo', false)});\n-EOF\n-        ];\n-\n-        return $tests;\n-    }\n-}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fcd0332dca2a88e69a988ab7e4c603acc910b5e8",
            "date": "2025-01-25T15:41:44Z",
            "author_login": "fabpot"
          },
          {
            "sha": "11535e9058b289d55e5057bf9e701ba64af97ac6",
            "date": "2025-01-25T15:41:07Z",
            "author_login": "fabpot"
          },
          {
            "sha": "b680354bbb639bdf8019e2c488648d5dbbc501ef",
            "date": "2025-01-24T20:37:36Z",
            "author_login": "fabpot"
          },
          {
            "sha": "d76d2d7d260eeb4df2f2d96199c969b8b436a212",
            "date": "2025-01-24T20:36:20Z",
            "author_login": "fabpot"
          },
          {
            "sha": "18007078ba96eb8d208dbc59ad9df94eb984e405",
            "date": "2025-01-24T20:10:08Z",
            "author_login": "xabbuh"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": null,
    "description": "A sandbox information disclosure exists in Twig before 1.38.0 and 2.x before 2.7.0 because, under some circumstances, it is possible to call the __toString() method on an object even if not allowed by the security policy in place.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2019-03-23T15:29:00.323",
    "last_modified": "2024-11-21T04:52:38.353",
    "fix_date": "2019-03-10T17:31:18Z"
  },
  "references": [
    {
      "url": "https://github.com/twigphp/Twig/commit/eac5422956e1dcca89a3669a03a3ff32f0502077",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://seclists.org/bugtraq/2019/Mar/60",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://symfony.com/blog/twig-sandbox-information-disclosure",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2019/dsa-4419",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/twigphp/Twig/commit/eac5422956e1dcca89a3669a03a3ff32f0502077",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://seclists.org/bugtraq/2019/Mar/60",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://symfony.com/blog/twig-sandbox-information-disclosure",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2019/dsa-4419",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T22:59:47.000305",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "Twig",
    "owner": "twigphp",
    "created_at": "2009-10-07T21:23:38Z",
    "updated_at": "2025-01-14T10:54:36Z",
    "pushed_at": "2025-01-12T17:49:31Z",
    "size": 11930,
    "stars": 8222,
    "forks": 1259,
    "open_issues": 57,
    "watchers": 8222,
    "has_security_policy": false,
    "default_branch": "3.x",
    "protected_branches": [],
    "languages": {
      "PHP": 1085470,
      "Shell": 1690,
      "Twig": 641,
      "HTML": 286
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T16:15:22.367515"
  }
}