{
  "cve_id": "CVE-2020-10739",
  "github_data": {
    "repository": "istio/envoy",
    "fix_commit": "8788a3cf255b647fd14e6b5e2585abaaedb28153",
    "related_commits": [
      "8788a3cf255b647fd14e6b5e2585abaaedb28153",
      "8788a3cf255b647fd14e6b5e2585abaaedb28153"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "8788a3cf255b647fd14e6b5e2585abaaedb28153",
      "commit_date": "2020-05-09T02:05:05Z",
      "author": {
        "login": "jplevyak",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "1.4 - Do not call into the VM unless the VM Context has been created. (#24)",
        "length": 712,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 33,
        "additions": 19,
        "deletions": 14
      },
      "files": [
        {
          "filename": "source/extensions/common/wasm/wasm.cc",
          "status": "modified",
          "additions": 15,
          "deletions": 13,
          "patch": "@@ -1699,6 +1699,7 @@ void Context::onStart(absl::string_view root_id, absl::string_view vm_configurat\n     auto config_addr = wasm_->copyString(vm_configuration);\n     wasm_->onStart_(this, id_, root_id_addr, root_id.size(), config_addr, vm_configuration.size());\n   }\n+  in_vm_context_created_ = true;\n }\n \n bool Context::validateConfiguration(absl::string_view configuration) {\n@@ -1725,6 +1726,7 @@ void Context::onCreate(uint32_t root_context_id) {\n \n Network::FilterStatus Context::onNetworkNewConnection() {\n   onCreate(root_context_id_);\n+  in_vm_context_created_ = true;\n   if (!wasm_->onNewConnection_) {\n     return Network::FilterStatus::Continue;\n   }\n@@ -1735,7 +1737,7 @@ Network::FilterStatus Context::onNetworkNewConnection() {\n }\n \n Network::FilterStatus Context::onDownstreamData(int data_length, bool end_of_stream) {\n-  if (!wasm_->onDownstreamData_) {\n+  if (!in_vm_context_created_ || !wasm_->onDownstreamData_) {\n     return Network::FilterStatus::Continue;\n   }\n   auto result = wasm_->onDownstreamData_(this, id_, static_cast<uint32_t>(data_length),\n@@ -1745,7 +1747,7 @@ Network::FilterStatus Context::onDownstreamData(int data_length, bool end_of_str\n }\n \n Network::FilterStatus Context::onUpstreamData(int data_length, bool end_of_stream) {\n-  if (!wasm_->onUpstreamData_) {\n+  if (!in_vm_context_created_ || !wasm_->onUpstreamData_) {\n     return Network::FilterStatus::Continue;\n   }\n   auto result = wasm_->onUpstreamData_(this, id_, static_cast<uint32_t>(data_length),\n@@ -1755,13 +1757,13 @@ Network::FilterStatus Context::onUpstreamData(int data_length, bool end_of_strea\n }\n \n void Context::onDownstreamConnectionClose(PeerType peer_type) {\n-  if (wasm_->onDownstreamConnectionClose_) {\n+  if (in_vm_context_created_ && wasm_->onDownstreamConnectionClose_) {\n     wasm_->onDownstreamConnectionClose_(this, id_, static_cast<uint32_t>(peer_type));\n   }\n }\n \n void Context::onUpstreamConnectionClose(PeerType peer_type) {\n-  if (wasm_->onUpstreamConnectionClose_) {\n+  if (in_vm_context_created_ && wasm_->onUpstreamConnectionClose_) {\n     wasm_->onUpstreamConnectionClose_(this, id_, static_cast<uint32_t>(peer_type));\n   }\n }\n@@ -1785,7 +1787,7 @@ Http::FilterHeadersStatus Context::onRequestHeaders() {\n }\n \n Http::FilterDataStatus Context::onRequestBody(int body_buffer_length, bool end_of_stream) {\n-  if (!wasm_->onRequestBody_) {\n+  if (!in_vm_context_created_ || !wasm_->onRequestBody_) {\n     return Http::FilterDataStatus::Continue;\n   }\n   switch (wasm_\n@@ -1804,7 +1806,7 @@ Http::FilterDataStatus Context::onRequestBody(int body_buffer_length, bool end_o\n }\n \n Http::FilterTrailersStatus Context::onRequestTrailers() {\n-  if (!wasm_->onRequestTrailers_) {\n+  if (!in_vm_context_created_ || !wasm_->onRequestTrailers_) {\n     return Http::FilterTrailersStatus::Continue;\n   }\n   if (wasm_->onRequestTrailers_(this, id_).u64_ == 0) {\n@@ -1814,7 +1816,7 @@ Http::FilterTrailersStatus Context::onRequestTrailers() {\n }\n \n Http::FilterMetadataStatus Context::onRequestMetadata() {\n-  if (!wasm_->onRequestMetadata_) {\n+  if (!in_vm_context_created_ || !wasm_->onRequestMetadata_) {\n     return Http::FilterMetadataStatus::Continue;\n   }\n   if (wasm_->onRequestMetadata_(this, id_).u64_ == 0) {\n@@ -1842,7 +1844,7 @@ Http::FilterHeadersStatus Context::onResponseHeaders() {\n }\n \n Http::FilterDataStatus Context::onResponseBody(int body_buffer_length, bool end_of_stream) {\n-  if (!wasm_->onResponseBody_) {\n+  if (!in_vm_context_created_ || !wasm_->onResponseBody_) {\n     return Http::FilterDataStatus::Continue;\n   }\n   switch (wasm_\n@@ -1861,7 +1863,7 @@ Http::FilterDataStatus Context::onResponseBody(int body_buffer_length, bool end_\n }\n \n Http::FilterTrailersStatus Context::onResponseTrailers() {\n-  if (!wasm_->onResponseTrailers_) {\n+  if (!in_vm_context_created_ || !wasm_->onResponseTrailers_) {\n     return Http::FilterTrailersStatus::Continue;\n   }\n   if (wasm_->onResponseTrailers_(this, id_).u64_ == 0) {\n@@ -1871,7 +1873,7 @@ Http::FilterTrailersStatus Context::onResponseTrailers() {\n }\n \n Http::FilterMetadataStatus Context::onResponseMetadata() {\n-  if (!wasm_->onResponseMetadata_) {\n+  if (!in_vm_context_created_ || !wasm_->onResponseMetadata_) {\n     return Http::FilterMetadataStatus::Continue;\n   }\n   if (wasm_->onResponseMetadata_(this, id_).u64_ == 0) {\n@@ -2445,19 +2447,19 @@ void Context::onDestroy() {\n }\n \n void Context::onDone() {\n-  if (wasm_->onDone_) {\n+  if (in_vm_context_created_ && wasm_->onDone_) {\n     wasm_->onDone_(this, id_);\n   }\n }\n \n void Context::onLog() {\n-  if (wasm_->onLog_) {\n+  if (in_vm_context_created_ && wasm_->onLog_) {\n     wasm_->onLog_(this, id_);\n   }\n }\n \n void Context::onDelete() {\n-  if (wasm_->onDelete_) {\n+  if (in_vm_context_created_ && wasm_->onDelete_) {\n     wasm_->onDelete_(this, id_);\n   }\n }"
        },
        {
          "filename": "source/extensions/common/wasm/wasm.h",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -413,6 +413,8 @@ class Context : public Logger::Loggable<Logger::Id::wasm>,\n   // Connection\n   virtual bool isSsl();\n \n+  void setInVmContextCreatedForTesting() { in_vm_context_created_ = true; }\n+\n protected:\n   friend class Wasm;\n   friend struct AsyncClientHandler;"
        },
        {
          "filename": "test/extensions/wasm/wasm_test.cc",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -184,7 +184,7 @@ TEST_P(WasmTest, DivByZero) {\n   auto context = std::make_unique<TestContext>(wasm.get());\n   EXPECT_CALL(*context, scriptLog_(spdlog::level::err, Eq(\"before div by zero\")));\n   EXPECT_TRUE(wasm->initialize(code, false));\n-  wasm->setContext(context.get());\n+  context->setInVmContextCreatedForTesting();\n \n   if (GetParam() == \"v8\") {\n     EXPECT_THROW_WITH_MESSAGE(\n@@ -388,6 +388,7 @@ TEST_P(WasmTest, StatsHighLevel) {\n       \"{{ test_rundir }}/test/extensions/wasm/test_data/stats_cpp.wasm\"));\n   EXPECT_FALSE(code.empty());\n   auto context = std::make_unique<TestContext>(wasm.get());\n+  context->setInVmContextCreatedForTesting();\n \n   EXPECT_CALL(*context, scriptLog_(spdlog::level::trace, Eq(\"get counter = 1\")));\n   EXPECT_CALL(*context, scriptLog_(spdlog::level::debug, Eq(\"get counter = 2\")));"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "96b216696bf69fa83bc65285a0f816cc41b079e6",
            "date": "2020-05-07T00:36:12Z",
            "author_login": "jplevyak"
          },
          {
            "sha": "0e2c9c0c67e71ff358f6755fbbfdc998426b1c46",
            "date": "2020-05-05T03:34:57Z",
            "author_login": "jplevyak"
          },
          {
            "sha": "ad7f85b4a264e731be03e05bceaf1aeb1c70641f",
            "date": "2020-04-25T00:09:33Z",
            "author_login": "jplevyak"
          },
          {
            "sha": "11176a0c982cda3548ad344ac324ec94a8ee0490",
            "date": "2020-04-21T22:41:01Z",
            "author_login": "bianpengyuan"
          },
          {
            "sha": "0747da34b00d9165738d8073ab85634fc8b1cfce",
            "date": "2020-04-21T20:59:19Z",
            "author_login": "jplevyak"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "Istio 1.4.x before 1.4.9 and Istio 1.5.x before 1.5.4 contain the following vulnerability when telemetry v2 is enabled: by sending a specially crafted packet, an attacker could trigger a Null Pointer Exception resulting in a Denial of Service. This could be sent to the ingress gateway or a sidecar, triggering a null pointer exception which results in a denial of service. This also affects servicemesh-proxy where a null pointer exception flaw was found in servicemesh-proxy. When running Telemetry v2 (not on by default in version 1.4.x), an attacker could send a specially crafted packet to the ingress gateway or proxy sidecar, triggering a denial of service.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-06-02T13:15:10.983",
    "last_modified": "2024-11-21T04:55:58.273",
    "fix_date": "2020-05-09T02:05:05Z"
  },
  "references": [
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2020-10739",
      "source": "secalert@redhat.com",
      "tags": [
        "Broken Link",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/istio/envoy/commit/8788a3cf255b647fd14e6b5e2585abaaedb28153#diff-fcf2cf5dd389b5285f882ba4a8708633",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://istio.io/news/security/istio-security-2020-005/",
      "source": "secalert@redhat.com",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2020-10739",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/istio/envoy/commit/8788a3cf255b647fd14e6b5e2585abaaedb28153#diff-fcf2cf5dd389b5285f882ba4a8708633",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://istio.io/news/security/istio-security-2020-005/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.827211",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "envoy",
    "owner": "istio",
    "created_at": "2017-10-20T16:25:41Z",
    "updated_at": "2024-10-21T09:40:07Z",
    "pushed_at": "2025-01-23T08:06:15Z",
    "size": 348724,
    "stars": 36,
    "forks": 61,
    "open_issues": 7,
    "watchers": 36,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "add-validation-context-provider",
      "alts_config_debug",
      "dependabot/go_modules/examples/load-reporting-service/golang.org/x/net-0.17.0",
      "dependabot/go_modules/examples/load-reporting-service/golang.org/x/sys-0.1.0",
      "dependabot/go_modules/examples/load-reporting-service/google.golang.org/grpc-1.56.3",
      "dependabot/pip/configs/jinja2-3.1.3",
      "dependabot/pip/docs/gitpython-3.1.41",
      "dependabot/pip/docs/jinja2-3.1.3",
      "dependabot/pip/tools/deprecate_version/gitpython-3.1.41",
      "experimental-ambient",
      "fix_direct_response_route_name",
      "gh-pages",
      "hack_xff",
      "hash",
      "hbone",
      "imgbot",
      "istio-release-1.1",
      "lua_base",
      "lua_filter",
      "luafix",
      "proxysyncmain",
      "proxysynctest",
      "quanlin_log_0131",
      "rds_crash",
      "refactor_transport_socket_config",
      "release-0.2",
      "release-1.0",
      "release-1.1-sdspatch",
      "release-1.1"
    ],
    "languages": {
      "C++": 19486055,
      "Starlark": 1184414,
      "Python": 418501,
      "Shell": 120251,
      "C": 35685,
      "PowerShell": 6173,
      "Rust": 3471,
      "Makefile": 1985,
      "JavaScript": 1760,
      "Emacs Lisp": 966,
      "Thrift": 748,
      "Go": 695,
      "PureBasic": 472,
      "Dockerfile": 245
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:11:13.886188"
  }
}