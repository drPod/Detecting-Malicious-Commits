{
  "cve_id": "CVE-2020-11001",
  "github_data": {
    "repository": "wagtail/wagtail",
    "fix_commit": "61045ceefea114c40ac4b680af58990dbe732389",
    "related_commits": [
      "61045ceefea114c40ac4b680af58990dbe732389"
    ],
    "patch_url": "https://github.com/wagtail/wagtail/commit/61045ceefea114c40ac4b680af58990dbe732389.patch",
    "fix_commit_details": {
      "sha": "61045ceefea114c40ac4b680af58990dbe732389",
      "commit_date": "2020-04-03T13:10:47Z",
      "author": {
        "login": "gasman",
        "type": "User",
        "stats": {
          "total_commits": 5988,
          "average_weekly_commits": 10.432055749128919,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 513
        }
      },
      "commit_message": {
        "title": "Apply proper HTML escaping on StreamField block comparisons",
        "length": 824,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 196,
        "additions": 176,
        "deletions": 20
      },
      "files": [
        {
          "filename": "wagtail/admin/compare.py",
          "status": "modified",
          "additions": 30,
          "deletions": 11,
          "patch": "@@ -10,6 +10,11 @@\n from wagtail.core import blocks\n \n \n+def text_from_html(val):\n+    # Return the unescaped text content of an HTML string\n+    return BeautifulSoup(force_str(val), 'html5lib').getText()\n+\n+\n class FieldComparison:\n     is_field = True\n     is_child_relation = False\n@@ -52,15 +57,18 @@ def htmldiff(self):\n class RichTextFieldComparison(TextFieldComparison):\n     def htmldiff(self):\n         return diff_text(\n-            BeautifulSoup(force_str(self.val_a), 'html5lib').getText(),\n-            BeautifulSoup(force_str(self.val_b), 'html5lib').getText()\n+            text_from_html(self.val_a),\n+            text_from_html(self.val_b)\n         ).to_html()\n \n \n def get_comparison_class_for_block(block):\n     if hasattr(block, 'get_comparison_class'):\n         return block.get_comparison_class()\n-    elif isinstance(block, blocks.CharBlock):\n+    elif isinstance(block, (blocks.CharBlock, blocks.TextBlock)):\n+        return CharBlockComparison\n+    elif isinstance(block, blocks.RawHTMLBlock):\n+        # Compare raw HTML blocks as if they were plain text, so that tags are shown explicitly\n         return CharBlockComparison\n     elif isinstance(block, blocks.RichTextBlock):\n         return RichTextBlockComparison\n@@ -89,7 +97,19 @@ def has_changed(self):\n         return self.val_a != self.val_b\n \n     def htmlvalue(self, val):\n-        return self.block.render_basic(val)\n+        \"\"\"\n+        Return an HTML representation of this block that is safe to be included\n+        in comparison views\n+        \"\"\"\n+        return escape(text_from_html(self.block.render_basic(val)))\n+\n+    def htmldiff(self):\n+        html_val_a = self.block.render_basic(self.val_a)\n+        html_val_b = self.block.render_basic(self.val_b)\n+        return diff_text(\n+            text_from_html(html_val_a),\n+            text_from_html(html_val_b)\n+        ).to_html()\n \n \n class CharBlockComparison(BlockComparison):\n@@ -99,13 +119,12 @@ def htmldiff(self):\n             force_str(self.val_b)\n         ).to_html()\n \n+    def htmlvalue(self, val):\n+        return escape(val)\n+\n \n class RichTextBlockComparison(BlockComparison):\n-    def htmldiff(self):\n-        return diff_text(\n-            BeautifulSoup(force_str(self.val_a), 'html5lib').getText(),\n-            BeautifulSoup(force_str(self.val_b), 'html5lib').getText()\n-        ).to_html()\n+    pass\n \n \n class StructBlockComparison(BlockComparison):\n@@ -219,8 +238,8 @@ def htmldiff(self):\n         else:\n             # Fall back to diffing the HTML representation\n             return diff_text(\n-                BeautifulSoup(force_str(self.val_a), 'html5lib').getText(),\n-                BeautifulSoup(force_str(self.val_b), 'html5lib').getText()\n+                text_from_html(self.val_a),\n+                text_from_html(self.val_b)\n             ).to_html()\n \n "
        },
        {
          "filename": "wagtail/admin/tests/test_compare.py",
          "status": "modified",
          "additions": 123,
          "deletions": 8,
          "patch": "@@ -247,36 +247,151 @@ def test_has_changed_richtext(self):\n         self.assertIsInstance(comparison.htmldiff(), SafeString)\n         self.assertTrue(comparison.has_changed())\n \n-    def test_htmldiff_escapes_value(self):\n+    def test_htmldiff_escapes_value_on_change(self):\n         field = StreamPage._meta.get_field('body')\n \n         comparison = self.comparison_class(\n             field,\n             StreamPage(body=StreamValue(field.stream_block, [\n-                ('text', \"Original content\", '1'),\n+                ('text', \"I <b>really</b> like original<i>ish</i> content\", '1'),\n+            ])),\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('text', 'I <b>really</b> like evil code <script type=\"text/javascript\">doSomethingBad();</script>', '1'),\n+            ])),\n+        )\n+\n+        self.assertEqual(comparison.htmldiff(), '<div class=\"comparison__child-object\">I &lt;b&gt;really&lt;/b&gt; like <span class=\"deletion\">original&lt;i&gt;ish&lt;/i&gt; content</span><span class=\"addition\">evil code &lt;script type=&quot;text/javascript&quot;&gt;doSomethingBad();&lt;/script&gt;</span></div>')\n+        self.assertIsInstance(comparison.htmldiff(), SafeString)\n+\n+    def test_htmldiff_escapes_value_on_addition(self):\n+        field = StreamPage._meta.get_field('body')\n+\n+        comparison = self.comparison_class(\n+            field,\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('text', \"Original <em>and unchanged</em> content\", '1'),\n+            ])),\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('text', \"Original <em>and unchanged</em> content\", '1'),\n+                ('text', '<script type=\"text/javascript\">doSomethingBad();</script>', '2'),\n+            ])),\n+        )\n+\n+        self.assertEqual(comparison.htmldiff(), '<div class=\"comparison__child-object\">Original &lt;em&gt;and unchanged&lt;/em&gt; content</div>\\n<div class=\"comparison__child-object addition\">&lt;script type=&quot;text/javascript&quot;&gt;doSomethingBad();&lt;/script&gt;</div>')\n+        self.assertIsInstance(comparison.htmldiff(), SafeString)\n+\n+    def test_htmldiff_escapes_value_on_deletion(self):\n+        field = StreamPage._meta.get_field('body')\n+\n+        comparison = self.comparison_class(\n+            field,\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('text', \"Original <em>and unchanged</em> content\", '1'),\n+                ('text', '<script type=\"text/javascript\">doSomethingBad();</script>', '2'),\n             ])),\n             StreamPage(body=StreamValue(field.stream_block, [\n-                ('text', '<script type=\"text/javascript\">doSomethingBad();</script>', '1'),\n+                ('text', \"Original <em>and unchanged</em> content\", '1'),\n             ])),\n         )\n \n-        self.assertEqual(comparison.htmldiff(), '<div class=\"comparison__child-object\"><span class=\"deletion\">Original content</span><span class=\"addition\">&lt;script type=&quot;text/javascript&quot;&gt;doSomethingBad();&lt;/script&gt;</span></div>')\n+        self.assertEqual(comparison.htmldiff(), '<div class=\"comparison__child-object\">Original &lt;em&gt;and unchanged&lt;/em&gt; content</div>\\n<div class=\"comparison__child-object deletion\">&lt;script type=&quot;text/javascript&quot;&gt;doSomethingBad();&lt;/script&gt;</div>')\n         self.assertIsInstance(comparison.htmldiff(), SafeString)\n \n-    def test_htmldiff_escapes_value_richtext(self):\n+    def test_htmldiff_richtext_strips_tags_on_change(self):\n         field = StreamPage._meta.get_field('body')\n \n         comparison = self.comparison_class(\n             field,\n             StreamPage(body=StreamValue(field.stream_block, [\n-                ('rich_text', \"Original content\", '1'),\n+                ('rich_text', \"I <b>really</b> like Wagtail &lt;3\", '1'),\n             ])),\n             StreamPage(body=StreamValue(field.stream_block, [\n-                ('rich_text', '<script type=\"text/javascript\">doSomethingBad();</script>', '1'),\n+                ('rich_text', 'I <b>really</b> like evil code &gt;_&lt; <script type=\"text/javascript\">doSomethingBad();</script>', '1'),\n             ])),\n         )\n \n-        self.assertEqual(comparison.htmldiff(), '<div class=\"comparison__child-object\"><span class=\"deletion\">Original content</span><span class=\"addition\">doSomethingBad();</span></div>')\n+        self.assertEqual(comparison.htmldiff(), '<div class=\"comparison__child-object\">I really like <span class=\"deletion\">Wagtail &lt;3</span><span class=\"addition\">evil code &gt;_&lt; doSomethingBad();</span></div>')\n+        self.assertIsInstance(comparison.htmldiff(), SafeString)\n+\n+    def test_htmldiff_richtext_strips_tags_on_addition(self):\n+        field = StreamPage._meta.get_field('body')\n+\n+        comparison = self.comparison_class(\n+            field,\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('rich_text', \"Original <em>and unchanged</em> content\", '1'),\n+            ])),\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('rich_text', \"Original <em>and unchanged</em> content\", '1'),\n+                ('rich_text', 'I <b>really</b> like evil code &gt;_&lt; <script type=\"text/javascript\">doSomethingBad();</script>', '2'),\n+            ])),\n+        )\n+\n+        self.assertEqual(comparison.htmldiff(), '<div class=\"comparison__child-object\">Original and unchanged content</div>\\n<div class=\"comparison__child-object addition\">I really like evil code &gt;_&lt; doSomethingBad();</div>')\n+        self.assertIsInstance(comparison.htmldiff(), SafeString)\n+\n+    def test_htmldiff_richtext_strips_tags_on_deletion(self):\n+        field = StreamPage._meta.get_field('body')\n+\n+        comparison = self.comparison_class(\n+            field,\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('rich_text', \"Original <em>and unchanged</em> content\", '1'),\n+                ('rich_text', 'I <b>really</b> like evil code &gt;_&lt; <script type=\"text/javascript\">doSomethingBad();</script>', '2'),\n+            ])),\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('rich_text', \"Original <em>and unchanged</em> content\", '1'),\n+            ])),\n+        )\n+\n+        self.assertEqual(comparison.htmldiff(), '<div class=\"comparison__child-object\">Original and unchanged content</div>\\n<div class=\"comparison__child-object deletion\">I really like evil code &gt;_&lt; doSomethingBad();</div>')\n+        self.assertIsInstance(comparison.htmldiff(), SafeString)\n+\n+    def test_htmldiff_raw_html_escapes_value_on_change(self):\n+        field = StreamPage._meta.get_field('body')\n+\n+        comparison = self.comparison_class(\n+            field,\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('raw_html', \"Original<i>ish</i> content\", '1'),\n+            ])),\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('raw_html', '<script type=\"text/javascript\">doSomethingBad();</script>', '1'),\n+            ])),\n+        )\n+        self.assertEqual(comparison.htmldiff(), '<div class=\"comparison__child-object\"><span class=\"deletion\">Original&lt;i&gt;ish&lt;/i&gt; content</span><span class=\"addition\">&lt;script type=&quot;text/javascript&quot;&gt;doSomethingBad();&lt;/script&gt;</span></div>')\n+        self.assertIsInstance(comparison.htmldiff(), SafeString)\n+\n+    def test_htmldiff_raw_html_escapes_value_on_addition(self):\n+        field = StreamPage._meta.get_field('body')\n+\n+        comparison = self.comparison_class(\n+            field,\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('raw_html', \"Original <em>and unchanged</em> content\", '1'),\n+            ])),\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('raw_html', \"Original <em>and unchanged</em> content\", '1'),\n+                ('raw_html', '<script type=\"text/javascript\">doSomethingBad();</script>', '2'),\n+            ])),\n+        )\n+        self.assertEqual(comparison.htmldiff(), '<div class=\"comparison__child-object\">Original &lt;em&gt;and unchanged&lt;/em&gt; content</div>\\n<div class=\"comparison__child-object addition\">&lt;script type=&quot;text/javascript&quot;&gt;doSomethingBad();&lt;/script&gt;</div>')\n+        self.assertIsInstance(comparison.htmldiff(), SafeString)\n+\n+    def test_htmldiff_raw_html_escapes_value_on_deletion(self):\n+        field = StreamPage._meta.get_field('body')\n+\n+        comparison = self.comparison_class(\n+            field,\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('raw_html', \"Original <em>and unchanged</em> content\", '1'),\n+                ('raw_html', '<script type=\"text/javascript\">doSomethingBad();</script>', '2'),\n+            ])),\n+            StreamPage(body=StreamValue(field.stream_block, [\n+                ('raw_html', \"Original <em>and unchanged</em> content\", '1'),\n+            ])),\n+        )\n+        self.assertEqual(comparison.htmldiff(), '<div class=\"comparison__child-object\">Original &lt;em&gt;and unchanged&lt;/em&gt; content</div>\\n<div class=\"comparison__child-object deletion\">&lt;script type=&quot;text/javascript&quot;&gt;doSomethingBad();&lt;/script&gt;</div>')\n         self.assertIsInstance(comparison.htmldiff(), SafeString)\n \n     def test_compare_structblock(self):"
        },
        {
          "filename": "wagtail/tests/testapp/migrations/0047_rawhtmlblock.py",
          "status": "added",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -0,0 +1,21 @@\n+# Generated by Django 3.0.4 on 2020-04-06 09:46\n+\n+from django.db import migrations\n+import wagtail.core.blocks\n+import wagtail.core.fields\n+import wagtail.tests.testapp.models\n+\n+\n+class Migration(migrations.Migration):\n+\n+    dependencies = [\n+        ('tests', '0046_personpage'),\n+    ]\n+\n+    operations = [\n+        migrations.AlterField(\n+            model_name='streampage',\n+            name='body',\n+            field=wagtail.core.fields.StreamField([('text', wagtail.core.blocks.CharBlock()), ('rich_text', wagtail.core.blocks.RichTextBlock()), ('image', wagtail.tests.testapp.models.ExtendedImageChooserBlock()), ('product', wagtail.core.blocks.StructBlock([('name', wagtail.core.blocks.CharBlock()), ('price', wagtail.core.blocks.CharBlock())])), ('raw_html', wagtail.core.blocks.RawHTMLBlock())]),\n+        ),\n+    ]"
        },
        {
          "filename": "wagtail/tests/testapp/models.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -29,7 +29,7 @@\n from wagtail.contrib.settings.models import BaseSetting, register_setting\n from wagtail.contrib.sitemaps import Sitemap\n from wagtail.contrib.table_block.blocks import TableBlock\n-from wagtail.core.blocks import CharBlock, RichTextBlock, StructBlock\n+from wagtail.core.blocks import CharBlock, RawHTMLBlock, RichTextBlock, StructBlock\n from wagtail.core.fields import RichTextField, StreamField\n from wagtail.core.models import Orderable, Page, PageManager, PageQuerySet\n from wagtail.documents.edit_handlers import DocumentChooserPanel\n@@ -972,6 +972,7 @@ class StreamPage(Page):\n             ('name', CharBlock()),\n             ('price', CharBlock()),\n         ])),\n+        ('raw_html', RawHTMLBlock()),\n     ])\n \n     api_fields = ('body',)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "782aa0e16b48d33a3c964c7fee9f5724478e2015",
            "date": "2025-01-14T10:00:09Z",
            "author_login": "TARishabh"
          },
          {
            "sha": "cb11ec3e01899825e7d00e6791acdb95ccd7ceed",
            "date": "2025-01-14T08:44:47Z",
            "author_login": "ayaan-qadri"
          },
          {
            "sha": "75e07498f42c707089ac9e2371a29986f9e25abd",
            "date": "2024-12-18T12:52:13Z",
            "author_login": "tomusher"
          },
          {
            "sha": "d20c1b66bf0db9df13eea8b2d2be2fc2a2b98828",
            "date": "2025-01-13T13:05:06Z",
            "author_login": "thibaudcolas"
          },
          {
            "sha": "da12f4a284f21a485f3191740563f507198a6e9a",
            "date": "2025-01-06T13:17:56Z",
            "author_login": "laymonage"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-79",
    "description": "In Wagtail before versions 2.8.1 and 2.7.2, a cross-site scripting (XSS) vulnerability exists on the page revision\ncomparison view within the Wagtail admin interface. A user with a limited-permission editor account for the Wagtail\nadmin could potentially craft a page revision history that, when viewed by a user with higher privileges, could perform\nactions with that user's credentials. The vulnerability is not exploitable by an ordinary site visitor without access to\nthe Wagtail admin.\n\nPatched versions have been released as Wagtail 2.7.2 (for the LTS 2.7 branch) and Wagtail 2.8.1 (for the current 2.8 branch).",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-04-14T23:15:11.917",
    "last_modified": "2024-11-21T04:56:33.267",
    "fix_date": "2020-04-03T13:10:47Z"
  },
  "references": [
    {
      "url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-v2wc-pfq2-5cm6",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/61045ceefea114c40ac4b680af58990dbe732389",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/wagtail/wagtail/releases/tag/v2.8.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-v2wc-pfq2-5cm6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:42.330535",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wagtail",
    "owner": "wagtail",
    "created_at": "2014-02-03T12:41:59Z",
    "updated_at": "2025-01-14T14:01:28Z",
    "pushed_at": "2025-01-14T10:01:52Z",
    "size": 227820,
    "stars": 18619,
    "forks": 3952,
    "open_issues": 983,
    "watchers": 18619,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 8266424,
      "JavaScript": 1140099,
      "TypeScript": 556344,
      "HTML": 524532,
      "SCSS": 229702,
      "Shell": 6841,
      "CSS": 2719,
      "Dockerfile": 2038,
      "Makefile": 1389,
      "MDX": 271
    },
    "commit_activity": {
      "total_commits_last_year": 1489,
      "avg_commits_per_week": 28.634615384615383,
      "days_active_last_year": 270
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T15:05:24.057199"
  }
}