{
  "cve_id": "CVE-2020-11002",
  "github_data": {
    "repository": "dropwizard/dropwizard",
    "fix_commit": "d5a512f7abf965275f2a6b913ac4fe778e424242",
    "related_commits": [
      "d5a512f7abf965275f2a6b913ac4fe778e424242",
      "d5a512f7abf965275f2a6b913ac4fe778e424242"
    ],
    "patch_url": "https://github.com/dropwizard/dropwizard/commit/d5a512f7abf965275f2a6b913ac4fe778e424242.patch",
    "fix_commit_details": {
      "sha": "d5a512f7abf965275f2a6b913ac4fe778e424242",
      "commit_date": "2020-03-26T17:08:56Z",
      "author": {
        "login": "joschi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Disable message interpolation in ConstraintViolations by default (#3208)",
        "length": 420,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 253,
        "additions": 222,
        "deletions": 31
      },
      "files": [
        {
          "filename": "dropwizard-validation/src/main/java/io/dropwizard/validation/InterpolationHelper.java",
          "status": "added",
          "additions": 38,
          "deletions": 0,
          "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Hibernate Validator, declare and validate application constraints\n+ *\n+ * License: Apache License, Version 2.0\n+ * See the license.txt file in the root directory or <http://www.apache.org/licenses/LICENSE-2.0>.\n+ */\n+package io.dropwizard.validation;\n+\n+import javax.annotation.Nullable;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Utilities used for message interpolation.\n+ *\n+ * @author Guillaume Smet\n+ * @since 2.0.3\n+ */\n+public final class InterpolationHelper {\n+\n+    public static final char BEGIN_TERM = '{';\n+    public static final char END_TERM = '}';\n+    public static final char EL_DESIGNATOR = '$';\n+    public static final char ESCAPE_CHARACTER = '\\\\';\n+\n+    private static final Pattern ESCAPE_MESSAGE_PARAMETER_PATTERN = Pattern.compile(\"([\\\\\" + ESCAPE_CHARACTER + BEGIN_TERM + END_TERM + EL_DESIGNATOR + \"])\");\n+\n+    private InterpolationHelper() {\n+    }\n+\n+    @Nullable\n+    public static String escapeMessageParameter(@Nullable String messageParameter) {\n+        if (messageParameter == null) {\n+            return null;\n+        }\n+        return ESCAPE_MESSAGE_PARAMETER_PATTERN.matcher(messageParameter).replaceAll(Matcher.quoteReplacement(String.valueOf(ESCAPE_CHARACTER)) + \"$1\");\n+    }\n+}"
        },
        {
          "filename": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -7,6 +7,7 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n+import java.util.Map;\n \n /**\n  * The annotated element has methods annotated by\n@@ -24,4 +25,16 @@\n     Class<?>[] groups() default {};\n \n     Class<? extends Payload>[] payload() default {};\n+\n+    /**\n+     * Escape EL expressions to avoid template injection attacks.\n+     * <p>\n+     * This has serious security implications and you will\n+     * have to escape the violation messages added to {@link ViolationCollector} appropriately.\n+     *\n+     * @see ViolationCollector#addViolation(String, Map)\n+     * @see ViolationCollector#addViolation(String, String, Map)\n+     * @see ViolationCollector#addViolation(String, Integer, String, Map)\n+     */\n+    boolean escapeExpressions() default true;\n }"
        },
        {
          "filename": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -31,15 +31,17 @@ public class SelfValidatingValidator implements ConstraintValidator<SelfValidati\n     private final AnnotationConfiguration annotationConfiguration = new AnnotationConfiguration.StdConfiguration(AnnotationInclusion.INCLUDE_AND_INHERIT_IF_INHERITED);\n     private final TypeResolver typeResolver = new TypeResolver();\n     private final MemberResolver memberResolver = new MemberResolver(typeResolver);\n+    private boolean escapeExpressions = true;\n \n     @Override\n     public void initialize(SelfValidating constraintAnnotation) {\n+        escapeExpressions = constraintAnnotation.escapeExpressions();\n     }\n \n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     @Override\n     public boolean isValid(Object value, ConstraintValidatorContext context) {\n-        final ViolationCollector collector = new ViolationCollector(context);\n+        final ViolationCollector collector = new ViolationCollector(context, escapeExpressions);\n         context.disableDefaultConstraintViolation();\n         for (ValidationCaller caller : methodMap.computeIfAbsent(value.getClass(), this::findMethods)) {\n             caller.setValidationObject(value);"
        },
        {
          "filename": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
          "status": "modified",
          "additions": 95,
          "deletions": 29,
          "patch": "@@ -1,64 +1,116 @@\n package io.dropwizard.validation.selfvalidating;\n \n+import org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorContext;\n+\n import javax.annotation.Nullable;\n import javax.validation.ConstraintValidatorContext;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static io.dropwizard.validation.InterpolationHelper.escapeMessageParameter;\n \n /**\n  * This class is a simple wrapper around the ConstraintValidatorContext of hibernate validation.\n  * It collects all the violations of the SelfValidation methods of an object.\n  */\n public class ViolationCollector {\n-    private static final Pattern ESCAPE_PATTERN = Pattern.compile(\"\\\\$\\\\{\");\n+    private final ConstraintValidatorContext constraintValidatorContext;\n+    private final boolean escapeExpressions;\n \n     private boolean violationOccurred = false;\n-    private ConstraintValidatorContext context;\n \n+    public ViolationCollector(ConstraintValidatorContext constraintValidatorContext) {\n+        this(constraintValidatorContext, true);\n+    }\n \n-    public ViolationCollector(ConstraintValidatorContext context) {\n-        this.context = context;\n+    public ViolationCollector(ConstraintValidatorContext constraintValidatorContext, boolean escapeExpressions) {\n+        this.constraintValidatorContext = constraintValidatorContext;\n+        this.escapeExpressions = escapeExpressions;\n     }\n \n     /**\n      * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     * <p>\n+     * Prefer the method with explicit message parameters if you want to interpolate the message.\n      *\n-     * @param message the message of the violation (any EL expression will be escaped and not parsed)\n+     * @param message the message of the violation\n+     * @see #addViolation(String, Map)\n      */\n     public void addViolation(String message) {\n+        addViolation(message, Collections.emptyMap());\n+    }\n+\n+    /**\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     *\n+     * @param message           the message of the violation\n+     * @param messageParameters a map of message parameters which can be interpolated in the violation message\n+     * @since 2.0.3\n+     */\n+    public void addViolation(String message, Map<String, Object> messageParameters) {\n         violationOccurred = true;\n-        String messageTemplate = escapeEl(message);\n-        context.buildConstraintViolationWithTemplate(messageTemplate)\n+        getContextWithMessageParameters(messageParameters)\n+                .buildConstraintViolationWithTemplate(sanitizeTemplate(message))\n                 .addConstraintViolation();\n     }\n \n     /**\n      * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     * <p>\n+     * Prefer the method with explicit message parameters if you want to interpolate the message.\n      *\n      * @param propertyName the name of the property\n-     * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n+     * @param message      the message of the violation\n+     * @see #addViolation(String, String, Map)\n      * @since 2.0.2\n      */\n     public void addViolation(String propertyName, String message) {\n+        addViolation(propertyName, message, Collections.emptyMap());\n+    }\n+\n+    /**\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     *\n+     * @param propertyName      the name of the property\n+     * @param message           the message of the violation\n+     * @param messageParameters a map of message parameters which can be interpolated in the violation message\n+     * @since 2.0.3\n+     */\n+    public void addViolation(String propertyName, String message, Map<String, Object> messageParameters) {\n         violationOccurred = true;\n-        String messageTemplate = escapeEl(message);\n-        context.buildConstraintViolationWithTemplate(messageTemplate)\n+        getContextWithMessageParameters(messageParameters)\n+                .buildConstraintViolationWithTemplate(sanitizeTemplate(message))\n                 .addPropertyNode(propertyName)\n                 .addConstraintViolation();\n     }\n \n     /**\n      * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     * Prefer the method with explicit message parameters if you want to interpolate the message.\n      *\n      * @param propertyName the name of the property with the violation\n      * @param index        the index of the element with the violation\n      * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n+     * @see ViolationCollector#addViolation(String, Integer, String, Map)\n      * @since 2.0.2\n      */\n     public void addViolation(String propertyName, Integer index, String message) {\n+        addViolation(propertyName, index, message, Collections.emptyMap());\n+    }\n+\n+    /**\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     *\n+     * @param propertyName      the name of the property with the violation\n+     * @param index             the index of the element with the violation\n+     * @param message           the message of the violation\n+     * @param messageParameters a map of message parameters which can be interpolated in the violation message\n+     * @since 2.0.3\n+     */\n+    public void addViolation(String propertyName, Integer index, String message, Map<String, Object> messageParameters) {\n         violationOccurred = true;\n-        String messageTemplate = escapeEl(message);\n-        context.buildConstraintViolationWithTemplate(messageTemplate)\n+        getContextWithMessageParameters(messageParameters)\n+                .buildConstraintViolationWithTemplate(sanitizeTemplate(message))\n                 .addPropertyNode(propertyName)\n                 .addBeanNode().inIterable().atIndex(index)\n                 .addConstraintViolation();\n@@ -69,32 +121,46 @@ public void addViolation(String propertyName, Integer index, String message) {\n      *\n      * @param propertyName the name of the property with the violation\n      * @param key          the key of the element with the violation\n-     * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n+     * @param message      the message of the violation\n      * @since 2.0.2\n      */\n     public void addViolation(String propertyName, String key, String message) {\n+        addViolation(propertyName, key, message, Collections.emptyMap());\n+    }\n+\n+    /**\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     *\n+     * @param propertyName      the name of the property with the violation\n+     * @param key               the key of the element with the violation\n+     * @param message           the message of the violation\n+     * @param messageParameters a map of message parameters which can be interpolated in the violation message\n+     * @since 2.0.3\n+     */\n+    public void addViolation(String propertyName, String key, String message, Map<String, Object> messageParameters) {\n         violationOccurred = true;\n-        String messageTemplate = escapeEl(message);\n+        final String messageTemplate = sanitizeTemplate(message);\n+        final HibernateConstraintValidatorContext context = getContextWithMessageParameters(messageParameters);\n         context.buildConstraintViolationWithTemplate(messageTemplate)\n                 .addPropertyNode(propertyName)\n                 .addBeanNode().inIterable().atKey(key)\n                 .addConstraintViolation();\n     }\n \n-    @Nullable\n-    private String escapeEl(@Nullable String s) {\n-        if (s == null || s.isEmpty()) {\n-            return s;\n-        }\n-\n-        final Matcher m = ESCAPE_PATTERN.matcher(s);\n-        final StringBuffer sb = new StringBuffer(s.length() + 16);\n-        while (m.find()) {\n-            m.appendReplacement(sb, \"\\\\\\\\\\\\${\");\n+    private HibernateConstraintValidatorContext getContextWithMessageParameters(Map<String, Object> messageParameters) {\n+        final HibernateConstraintValidatorContext context =\n+                constraintValidatorContext.unwrap(HibernateConstraintValidatorContext.class);\n+        for (Map.Entry<String, Object> messageParameter : messageParameters.entrySet()) {\n+            final Object value = messageParameter.getValue();\n+            final String escapedValue = value == null ? null : escapeMessageParameter(value.toString());\n+            context.addMessageParameter(messageParameter.getKey(), escapedValue);\n         }\n-        m.appendTail(sb);\n+        return context;\n+    }\n \n-        return sb.toString();\n+    @Nullable\n+    private String sanitizeTemplate(@Nullable String message) {\n+        return escapeExpressions ? escapeMessageParameter(message) : message;\n     }\n \n     /**\n@@ -104,7 +170,7 @@ private String escapeEl(@Nullable String s) {\n      * @return the wrapped Hibernate ConstraintValidatorContext\n      */\n     public ConstraintValidatorContext getContext() {\n-        return context;\n+        return constraintValidatorContext;\n     }\n \n     /**"
        },
        {
          "filename": "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java",
          "status": "modified",
          "additions": 73,
          "deletions": 1,
          "patch": "@@ -1,5 +1,6 @@\n package io.dropwizard.validation;\n \n+import io.dropwizard.util.Maps;\n import io.dropwizard.validation.selfvalidating.SelfValidating;\n import io.dropwizard.validation.selfvalidating.SelfValidation;\n import io.dropwizard.validation.selfvalidating.ViolationCollector;\n@@ -12,6 +13,7 @@\n \n import javax.annotation.concurrent.NotThreadSafe;\n import javax.validation.Validator;\n+import java.util.Collections;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -146,12 +148,48 @@ public static class InjectionExample {\n         @SelfValidation\n         public void validateFail(ViolationCollector col) {\n             col.addViolation(\"${'value'}\");\n+            col.addViolation(\"$\\\\A{1+1}\");\n+            col.addViolation(\"{value}\", Collections.singletonMap(\"value\", \"TEST\"));\n             col.addViolation(\"${'property'}\", \"${'value'}\");\n             col.addViolation(\"${'property'}\", 1, \"${'value'}\");\n             col.addViolation(\"${'property'}\", \"${'key'}\", \"${'value'}\");\n         }\n     }\n \n+    @SelfValidating(escapeExpressions = false)\n+    public static class EscapingDisabledExample {\n+        @SuppressWarnings(\"unused\")\n+        @SelfValidation\n+        public void validateFail(ViolationCollector col) {\n+            col.addViolation(\"${'value'}\");\n+            col.addViolation(\"$\\\\A{1+1}\");\n+            col.addViolation(\"{value}\", Collections.singletonMap(\"value\", \"TEST\"));\n+            col.addViolation(\"${'property'}\", \"${'value'}\");\n+            col.addViolation(\"${'property'}\", 1, \"${'value'}\");\n+            col.addViolation(\"${'property'}\", \"${'key'}\", \"${'value'}\");\n+        }\n+    }\n+\n+    @SelfValidating(escapeExpressions = false)\n+    public static class MessageParametersExample {\n+        @SuppressWarnings(\"unused\")\n+        @SelfValidation\n+        public void validateFail(ViolationCollector col) {\n+            col.addViolation(\"{1+1}\");\n+            col.addViolation(\"{value}\", Collections.singletonMap(\"value\", \"VALUE\"));\n+            col.addViolation(\"No parameter\", Collections.singletonMap(\"value\", \"VALUE\"));\n+            col.addViolation(\"{value} {unsetParameter}\", Collections.singletonMap(\"value\", \"VALUE\"));\n+            col.addViolation(\"{value\", Collections.singletonMap(\"value\", \"VALUE\"));\n+            col.addViolation(\"value}\", Collections.singletonMap(\"value\", \"VALUE\"));\n+            col.addViolation(\"{  value  }\", Collections.singletonMap(\"value\", \"VALUE\"));\n+            col.addViolation(\"Mixed ${'value'} {value}\", Collections.singletonMap(\"value\", \"VALUE\"));\n+            col.addViolation(\"Nested {value}\", Collections.singletonMap(\"value\", \"${'nested'}\"));\n+            col.addViolation(\"{property}\", \"{value}\", Maps.of(\"property\", \"PROPERTY\", \"value\", \"VALUE\"));\n+            col.addViolation(\"{property}\", 1, \"{value}\", Maps.of(\"property\", \"PROPERTY\", \"value\", \"VALUE\"));\n+            col.addViolation(\"{property}\", \"{key}\", \"{value}\", Maps.of(\"property\", \"PROPERTY\", \"key\", \"KEY\", \"value\", \"VALUE\"));\n+        }\n+    }\n+\n     private final Validator validator = BaseValidator.newValidator();\n \n     @Test\n@@ -271,13 +309,47 @@ public void giveWarningIfNoValidationMethods() {\n     }\n \n     @Test\n-    public void violationMessagesAreEscaped() {\n+    public void violationMessagesAreEscapedByDefault() {\n         assertThat(ConstraintViolations.format(validator.validate(new InjectionExample()))).containsExactly(\n+                \" $\\\\A{1+1}\",\n                 \" ${'value'}\",\n+                \" {value}\",\n                 \"${'property'} ${'value'}\",\n                 \"${'property'}[${'key'}] ${'value'}\",\n                 \"${'property'}[1] ${'value'}\"\n         );\n         assertThat(TestLoggerFactory.getAllLoggingEvents()).isEmpty();\n     }\n+\n+    @Test\n+    public void violationMessagesAreInterpolatedIfEscapingDisabled() {\n+        assertThat(ConstraintViolations.format(validator.validate(new EscapingDisabledExample()))).containsExactly(\n+                \" A2\",\n+                \" TEST\",\n+                \" value\",\n+                \"${'property'} value\",\n+                \"${'property'}[${'key'}] value\",\n+                \"${'property'}[1] value\"\n+        );\n+        assertThat(TestLoggerFactory.getAllLoggingEvents()).isEmpty();\n+    }\n+\n+    @Test\n+    public void messageParametersExample() {\n+        assertThat(ConstraintViolations.format(validator.validate(new MessageParametersExample()))).containsExactly(\n+                \" Mixed value VALUE\",\n+                \" Nested ${'nested'}\",\n+                \" No parameter\",\n+                \" VALUE\",\n+                \" VALUE {unsetParameter}\",\n+                \" value}\",\n+                \" {  value  }\",\n+                \" {1+1}\",\n+                \" {value\",\n+                \"{property} VALUE\",\n+                \"{property}[1] VALUE\",\n+                \"{property}[{key}] VALUE\"\n+        );\n+        assertThat(TestLoggerFactory.getAllLoggingEvents()).isEmpty();\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "782666e19692967be9a04641528750672c1e9376",
            "date": "2025-01-13T07:34:39Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "139de3d455d5659af6aae583bb3d3ced8f65d1ac",
            "date": "2025-01-13T05:34:36Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "f8a930899ec012957321522ff44a3e23715b7af3",
            "date": "2025-01-13T01:14:03Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "40b0b1cc6e7ca7492bdec8014b2085a0e08b5cb5",
            "date": "2025-01-09T09:16:49Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "a021bb0c06422a26a27c28df12f687fd4c75eef8",
            "date": "2025-01-09T08:27:36Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-74",
    "description": "dropwizard-validation before versions 2.0.3 and 1.3.21 has a remote code execution vulnerability. A server-side template injection was identified in the self-validating feature enabling attackers to inject arbitrary Java EL expressions, leading to Remote Code Execution (RCE) vulnerability. If you are using a self-validating bean an upgrade to Dropwizard 1.3.21/2.0.3 or later is strongly recommended. The changes introduced in Dropwizard 1.3.19 and 2.0.2 for CVE-2020-5245 unfortunately did not fix the underlying issue completely. The issue has been fixed in dropwizard-validation 1.3.21 and 2.0.3 or later. We strongly recommend upgrading to one of these versions.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-04-10T19:15:13.007",
    "last_modified": "2024-11-21T04:56:33.427",
    "fix_date": "2020-03-26T17:08:56Z"
  },
  "references": [
    {
      "url": "https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-hibernateconstraintvalidatorcontext",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/commit/d5a512f7abf965275f2a6b913ac4fe778e424242",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/pull/3208",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/pull/3209",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/security/advisories/GHSA-8jpx-m2wh-2v34",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-hibernateconstraintvalidatorcontext",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/commit/d5a512f7abf965275f2a6b913ac4fe778e424242",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/pull/3208",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/pull/3209",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/security/advisories/GHSA-8jpx-m2wh-2v34",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/security/policy#reporting-a-vulnerability",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:42.325900",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "dropwizard",
    "owner": "dropwizard",
    "created_at": "2011-01-19T19:52:29Z",
    "updated_at": "2025-01-13T07:34:43Z",
    "pushed_at": "2025-01-13T07:36:16Z",
    "size": 112272,
    "stars": 8508,
    "forks": 3439,
    "open_issues": 15,
    "watchers": 8508,
    "has_security_policy": false,
    "default_branch": "release/4.0.x",
    "protected_branches": [
      "master",
      "release/0.7.x",
      "release/0.8.x",
      "release/0.9.x",
      "release/1.0.x",
      "release/1.1.x",
      "release/1.2.x",
      "release/1.3.x",
      "release/2.0.x",
      "release/2.1.x",
      "release/3.0.x",
      "release/4.0.x",
      "release/5.0.x"
    ],
    "languages": {
      "Java": 2837500,
      "Shell": 1642,
      "FreeMarker": 992,
      "Mustache": 569,
      "HTML": 111
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T17:33:29.087336"
  }
}