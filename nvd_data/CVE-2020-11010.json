{
  "cve_id": "CVE-2020-11010",
  "github_data": {
    "repository": "tortoise/tortoise-orm",
    "fix_commit": "91c364053e0ddf77edc5442914c6f049512678b3",
    "related_commits": [
      "91c364053e0ddf77edc5442914c6f049512678b3",
      "91c364053e0ddf77edc5442914c6f049512678b3"
    ],
    "patch_url": "https://github.com/tortoise/tortoise-orm/commit/91c364053e0ddf77edc5442914c6f049512678b3.patch",
    "fix_commit_details": {
      "sha": "91c364053e0ddf77edc5442914c6f049512678b3",
      "commit_date": "2020-04-18T14:58:20Z",
      "author": {
        "login": "grigi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fixed various SQL generation issues",
        "length": 35,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 288,
        "additions": 265,
        "deletions": 23
      },
      "files": [
        {
          "filename": "CHANGELOG.rst",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -32,6 +32,9 @@ Changelog\n \n - Fixed bad SQL generation when doing a ``.values()`` query over a Foreign Key\n - Added `<model>.update_from_dict({...})` that will mass update values safely from a dictionary\n+- Fixed SQL injection issue in MySQL\n+- Fixed SQL injection issues in MySQL when using ``contains``, ``starts_with`` or ``ends_with`` filters (and their case-insensitive counterparts)\n+- Fixed malformed SQL for PostgreSQL and SQLite when using ``contains``, ``starts_with`` or ``ends_with`` filters (and their case-insensitive counterparts)\n \n 0.16.5\n ------"
        },
        {
          "filename": "tests/test_fuzz.py",
          "status": "added",
          "additions": 127,
          "deletions": 0,
          "patch": "@@ -0,0 +1,127 @@\n+from tests.testmodels import CharFields\n+from tortoise.contrib import test\n+\n+DODGY_STRINGS = [\n+    \"a/\",\n+    \"a\\\\\",\n+    \"a\\\\'\",\n+    \"a\\\\x39\",\n+    \"a'\",\n+    '\"',\n+    \"\u2018a\",\n+    \"a\u2019\",\n+    \"\u2018a\u2019\",\n+    \"a/a\",\n+    \"a\\\\a\",\n+    \"0x39\",\n+    \"%a%\",\n+    \"_a_\",\n+    \"WC[R]S123456\",\n+    \"\\x01!\\U00043198\",\n+    \"\\x02\\U0006501c\",\n+    \"\\x03\u32bf\\U000e90ff\\U0007d718\\x16'%\\U000b712a(\\x16\",\n+    \"\\x03\\U000d435e\\U000aa4cb)\\U000fe59b\",\n+    \"\\x05\\x10\\U0009417f\\U000f22e3\\U000a5932\ud83d\udd08\\U000a5e47\\x18\\U0006c16b\\x05\",\n+    \"\\n\ua762$\\x17\\r\\x17\\U00014dc2\u5d4b0\\U0010fda8\\U00041dfa\",\n+    \"\\x0c\\U000d4858\",\n+    \"\\r\",\n+    '\\r\\r\\U0006c50e\\U000e309a\u156b%\"\\U00105213\\U0007ba4b\\x03\\x0c',\n+    \"\\r\ua762$\\x17\\r\\x17\\U00014dc2\u5d4b0\\U0010fda8\\U00041dfa\",\n+    \"\\x0e\\x0e\",\n+    \"\\x0f\\uf308\ud844\ude59\\x1f\\U0008ceaf\\x19\\U000f156b(\\U0006c5b0\\U0003881c\\U0004b76a\\U0010b7a2*+\\x1b\\x19$\\U000f643f,(\\U000b7e06\",\n+    \"\\x14\\x14\",\n+    \"\\x14\\U000b45e4.\\x19\\x01,\\U00058aa5\\U0008da94\\U000bb53e\\x10\\U000a0328%\\U0008e967\",\n+    \"\\x14\\U000eb331\",\n+    \"\\x17\\x17%\\x12\\U0008c069\\x18\\x10(\\x1f\\x0f\",\n+    \"\\x17\\x17(\\U0008c069\\x18\\x10(\\x1f\\x0f\",\n+    \"\\x17\\x17\\U000a084e\\U0008c069\\x18\\x10(\\x1f\\x0f\",\n+    \"\\x17((\\U0008c069\\x18\\x10(\\x1f\\x0f\",\n+    \"\\x17\\U0006083e\\x18\",\n+    \"\\x17\\U000ef05e%\\x12\\U0008c069\\x18\\x10(\\x1f\\x0f\",\n+    '\\x17\\U00108f29\\x18\\x1c\"\\x18',\n+    \"\\x19\\x19\\x19\",\n+    \"\\x19\\x19-\",\n+    \"\\x19\\x19-\\U000a0865\",\n+    \"\\x1b\",\n+    \"\\x1b\\x19-\\U000a0865\",\n+    '\\x1d\\x19+\\x1c\u320f\\U000b0305\\U000ffbf2\\x1b+\\U000ff7bf\"\\U000557c3\\x1c%\\n',\n+    '\\x1d\\x19+\\x1c\\U000ff7bf\\U000b0305\\U000ffbf2\\x1b+\\U000ff7bf\"\\U000557c3\\x1c%\\n',\n+    '\\x1d\\x19\u320f\\x1c\u320f\\U000b0305\\U000ffbf2\\x1b+\\U000ff7bf\"\\U000557c3\\x1c%\\n',\n+    '\\x1d\\x19\u320f\\x1c\\U000566bf\\U000b0305\\U000ffbf2\\x1b+\\U000ff7bf\"\\U000557c3\\x1c%\\n',\n+    \"\\x1d\\U0005f530\",\n+    \"\\x1f\",\n+    \"\\x1f\\x18\",\n+    \"\\x1f\\x1f\ud83d\udd08\",\n+    \"\\x1f\\x1f\ud83d\udd08\\x1f\\U000a5932\ud83d\udd08\\U000a5e47\\x18\\U0006c16b\\x05\",\n+    \"\\x1f\\x1f\ud83d\udd08\\U000f22e3\\U000a5932\ud83d\udd08\\U000a5e47\\x18\\U0006c16b\\x05\",\n+    \"\\x1f\\uf308\ud844\ude59\\x1f\\U0008ceaf\\x19\\U000f156b(\\U0006c5b0\\U0003881c\\U0004b76a\\U0010b7a2*+\\x1b\\x19$\\U000f643f,(\\U000b7e06\",\n+    \"\\x1f\ud82c\ude45\\U001086b3\\x0b\\x1b\\U00077711\\U00057223\\U0005e650\u5a6f\\x1d0\\U000c0272\\x02\\x15\\U000d159c\\U0005997e!\\x04&\\x04\",\n+    \"\\x1f\\U00077711\\U001086b3\\x0b\\x1b\\U00077711\\U00057223\\U0005e650\u5a6f\\x1d0\\U000c0272\\x02\\x15\\U000d159c\\U0005997e!\\x04&\\x04\",\n+    \"\\x1f\\U000a0850\\U0009417f\\U000f22e3\\U000a5932\ud83d\udd08\\U000a5e47\\x18\\U0006c16b\\x05\",\n+    \"%\\U000e6f0c\",\n+    \"&\",\n+    \"(((\\U0008c069\\x18\\x10(\\x1f\\x0f\",\n+    \"*\\x10'\\U0001ea89\\U0006a5fe\\U00097b9b\\x1e\",\n+    \"+/\",\n+    \"/\ud870\udf58&\\U00059587+\\n\\U0003a4ef\\x06\\U0004675f\\x12\\U000bfa73\\x14\\x02(\",\n+    \"0\",\n+    \"\u6ed5'\\u16fa\uabad\\U00041a44\\U000d04ba\\U000d341c\\n'$,\\U000bac0b\\U000446f8\\U000ff86e(\",\n+    \"\ud866\udcc2\ud866\udcc2\\uf580\\U000508c8\ud866\udcc2\\U00041150\\uf580\\x1c\",\n+    \"\ud866\udcc2\\U0005215e\\uf580\\U000508c8\ud866\udcc2\\U00041150\\uf580\\x1c\",\n+    \"\\U0003b0da\",\n+    \"\\U0003ffe5*\\n\\U000f9326,\",\n+    \"\\U00050c3e''\",\n+    \"\\U00050c3e'\\U00050c3e\",\n+    \"\\U0005215e\",\n+    \"\\U0005215e\\U0005215e\\x18\\U000508c8\ud866\udcc2\\U00041150\\uf580\\x1c\",\n+    \"\\U0005215e\\U0005215e\\uf580\\U000508c8\ud866\udcc2\\U00041150\\uf580\\x1c\",\n+    \"\\U00059504\\U000a33bc\\x18\\x1f\\U000b3017\\U000643a3\\x18\\U000ea429\\U000af53c!\\U000bcc8f\\U000606df\",\n+    \"\\U0005b823\\U0007d224\",\n+    \"\\U0007bf54\\U0001e97a\\x08\\x18\\x04\\x06\\U000c4329\u6dea\",\n+    \"\\U0008d96d\\x02\\U0006d816\",\n+    \"\\U0009601b\\U000b210a\\U00058370\",\n+    \"\\U000965f7'\",\n+    \"\\U000965f7'\\U00050c3e\",\n+    \"\\U000a9760\\U00108859\\x0c\\r\\U00019fbb\\U00045885\u975c$!\\U00074df5\\x1a\\U000c9c7d\\U0004bb28\\x08\\x19\\U00099df6+\\x1c!\\U0003d75f\\U0003f457\\U0001352e/\\U000495db\\U000b6234(\",\n+    \"\\U000aee91\\x1c\\x1f\\U0001cac6\\x08\\x1d\",\n+    \"\\U000af7bd\\x17\",\n+    \"\\U000e6f0c\\U000e6f0c\",\n+    \"\\U000f01c8\\x0e\",\n+]\n+\n+\n+class TestFuzz(test.TestCase):\n+    async def test_char_fuzz(self):\n+        for char in DODGY_STRINGS:\n+            # print(repr(char))\n+\n+            # Create\n+            obj1 = await CharFields.create(char=char)\n+\n+            # Get-by-pk, and confirm that reading is correct\n+            obj2 = await CharFields.get(pk=obj1.pk)\n+            self.assertEqual(char, obj2.char)\n+\n+            # Update data using a queryset, confirm that update is correct\n+            await CharFields.filter(pk=obj1.pk).update(char=\"a\")\n+            await CharFields.filter(pk=obj1.pk).update(char=char)\n+            obj3 = await CharFields.get(pk=obj1.pk)\n+            self.assertEqual(char, obj3.char)\n+\n+            # Filter by value in queryset, and confirm that it fetched the right one\n+            obj4 = await CharFields.get(pk=obj1.pk, char=char)\n+            self.assertEqual(obj1.pk, obj4.pk)\n+            self.assertEqual(char, obj4.char)\n+\n+            # LIKE statements are not strict, so require all of these to match\n+            obj5 = await CharFields.get(\n+                pk=obj1.pk,\n+                char__startswith=char,\n+                char__endswith=char,\n+                char__contains=char,\n+                char__istartswith=char,\n+                char__iendswith=char,\n+                char__icontains=char,\n+            )\n+            self.assertEqual(obj1.pk, obj5.pk)\n+            self.assertEqual(char, obj5.char)"
        },
        {
          "filename": "tortoise/backends/mysql/executor.py",
          "status": "modified",
          "additions": 52,
          "deletions": 15,
          "patch": "@@ -4,10 +4,14 @@\n \n from tortoise import Model\n from tortoise.backends.base.executor import BaseExecutor\n-from tortoise.fields import BigIntField, Field, IntField, SmallIntField\n+from tortoise.fields import BigIntField, IntField, SmallIntField\n from tortoise.filters import (\n+    Like,\n+    Term,\n+    ValueWrapper,\n     contains,\n     ends_with,\n+    format_quotes,\n     insensitive_contains,\n     insensitive_ends_with,\n     insensitive_exact,\n@@ -16,32 +20,65 @@\n )\n \n \n-def mysql_contains(field: Field, value: str) -> Criterion:\n-    return functions.Cast(field, SqlTypes.CHAR).like(f\"%{value}%\")\n+class StrWrapper(ValueWrapper):  # type: ignore\n+    \"\"\"\n+    Naive str wrapper that doesn't use the monkey-patched pypika ValueWraper for MySQL\n+    \"\"\"\n \n+    def get_value_sql(self, **kwargs):\n+        quote_char = kwargs.get(\"secondary_quote_char\") or \"\"\n+        value = self.value.replace(quote_char, quote_char * 2)\n+        return format_quotes(value, quote_char)\n \n-def mysql_starts_with(field: Field, value: str) -> Criterion:\n-    return functions.Cast(field, SqlTypes.CHAR).like(f\"{value}%\")\n \n+def escape_like(val: str) -> str:\n+    return val.replace(\"\\\\\", \"\\\\\\\\\\\\\\\\\").replace(\"%\", \"\\\\%\").replace(\"_\", \"\\\\_\")\n \n-def mysql_ends_with(field: Field, value: str) -> Criterion:\n-    return functions.Cast(field, SqlTypes.CHAR).like(f\"%{value}\")\n \n+def mysql_contains(field: Term, value: str) -> Criterion:\n+    return Like(\n+        functions.Cast(field, SqlTypes.CHAR), StrWrapper(f\"%{escape_like(value)}%\"), escape=\"\"\n+    )\n \n-def mysql_insensitive_exact(field: Field, value: str) -> Criterion:\n-    return functions.Upper(functions.Cast(field, SqlTypes.CHAR)).eq(functions.Upper(f\"{value}\"))\n \n+def mysql_starts_with(field: Term, value: str) -> Criterion:\n+    return Like(\n+        functions.Cast(field, SqlTypes.CHAR), StrWrapper(f\"{escape_like(value)}%\"), escape=\"\"\n+    )\n \n-def mysql_insensitive_contains(field: Field, value: str) -> Criterion:\n-    return functions.Upper(functions.Cast(field, SqlTypes.CHAR)).like(functions.Upper(f\"%{value}%\"))\n \n+def mysql_ends_with(field: Term, value: str) -> Criterion:\n+    return Like(\n+        functions.Cast(field, SqlTypes.CHAR), StrWrapper(f\"%{escape_like(value)}\"), escape=\"\"\n+    )\n \n-def mysql_insensitive_starts_with(field: Field, value: str) -> Criterion:\n-    return functions.Upper(functions.Cast(field, SqlTypes.CHAR)).like(functions.Upper(f\"{value}%\"))\n \n+def mysql_insensitive_exact(field: Term, value: str) -> Criterion:\n+    return functions.Upper(functions.Cast(field, SqlTypes.CHAR)).eq(functions.Upper(str(value)))\n \n-def mysql_insensitive_ends_with(field: Field, value: str) -> Criterion:\n-    return functions.Upper(functions.Cast(field, SqlTypes.CHAR)).like(functions.Upper(f\"%{value}\"))\n+\n+def mysql_insensitive_contains(field: Term, value: str) -> Criterion:\n+    return Like(\n+        functions.Upper(functions.Cast(field, SqlTypes.CHAR)),\n+        functions.Upper(StrWrapper(f\"%{escape_like(value)}%\")),\n+        escape=\"\",\n+    )\n+\n+\n+def mysql_insensitive_starts_with(field: Term, value: str) -> Criterion:\n+    return Like(\n+        functions.Upper(functions.Cast(field, SqlTypes.CHAR)),\n+        functions.Upper(StrWrapper(f\"{escape_like(value)}%\")),\n+        escape=\"\",\n+    )\n+\n+\n+def mysql_insensitive_ends_with(field: Term, value: str) -> Criterion:\n+    return Like(\n+        functions.Upper(functions.Cast(field, SqlTypes.CHAR)),\n+        functions.Upper(StrWrapper(f\"%{escape_like(value)}\")),\n+        escape=\"\",\n+    )\n \n \n class MySQLExecutor(BaseExecutor):"
        },
        {
          "filename": "tortoise/filters.py",
          "status": "modified",
          "additions": 83,
          "deletions": 8,
          "patch": "@@ -4,14 +4,89 @@\n \n from pypika import Table\n from pypika.functions import Upper\n-from pypika.terms import BasicCriterion, Criterion, Equality, Term, ValueWrapper\n+from pypika.terms import (\n+    BasicCriterion,\n+    Criterion,\n+    Enum,\n+    Equality,\n+    Term,\n+    ValueWrapper,\n+    basestring,\n+    date,\n+    format_quotes,\n+)\n \n from tortoise.fields import Field\n from tortoise.fields.relational import BackwardFKRelation, ManyToManyFieldInstance\n \n if TYPE_CHECKING:  # pragma: nocoverage\n     from tortoise.models import Model\n \n+##############################################################################\n+# Here we monkey-patch PyPika Valuewrapper to behave differently for MySQL\n+##############################################################################\n+\n+\n+def get_value_sql(self, **kwargs):  # pragma: nocoverage\n+    quote_char = kwargs.get(\"secondary_quote_char\") or \"\"\n+    dialect = kwargs.get(\"dialect\")\n+    if dialect:\n+        dialect = dialect.value\n+\n+    if isinstance(self.value, Term):\n+        return self.value.get_sql(**kwargs)\n+    if isinstance(self.value, Enum):\n+        return self.value.value\n+    if isinstance(self.value, date):\n+        value = self.value.isoformat()\n+        return format_quotes(value, quote_char)\n+    if isinstance(self.value, basestring):\n+        value = self.value.replace(quote_char, quote_char * 2)\n+        if dialect == \"mysql\":\n+            value = value.replace(\"\\\\\", \"\\\\\\\\\")\n+        return format_quotes(value, quote_char)\n+    if isinstance(self.value, bool):\n+        return str.lower(str(self.value))\n+    if self.value is None:\n+        return \"null\"\n+    return str(self.value)\n+\n+\n+ValueWrapper.get_value_sql = get_value_sql\n+##############################################################################\n+\n+\n+class Like(BasicCriterion):  # type: ignore\n+    def __init__(self, left, right, alias=None, escape=\" ESCAPE '\\\\'\") -> None:\n+        \"\"\"\n+        A Like that supports an ESCAPE clause\n+        \"\"\"\n+        super().__init__(\" LIKE \", left, right, alias=alias)\n+        self.escape = escape\n+\n+    def get_sql(self, quote_char='\"', with_alias=False, **kwargs):\n+        sql = \"{left}{comparator}{right}{escape}\".format(\n+            comparator=self.comparator,\n+            left=self.left.get_sql(quote_char=quote_char, **kwargs),\n+            right=self.right.get_sql(quote_char=quote_char, **kwargs),\n+            escape=self.escape,\n+        )\n+        if with_alias and self.alias:  # pragma: nocoverage\n+            return '{sql} \"{alias}\"'.format(sql=sql, alias=self.alias)\n+        return sql\n+\n+\n+def escape_val(val: Any) -> Any:\n+    if isinstance(val, str):\n+        print(val)\n+        return val.replace(\"\\\\\", \"\\\\\\\\\")\n+    return val\n+\n+\n+def escape_like(val: str) -> str:\n+    return val.replace(\"\\\\\", \"\\\\\\\\\").replace(\"%\", \"\\\\%\").replace(\"_\", \"\\\\_\")\n+\n+\n ##############################################################################\n # Encoders\n # Should be type: (Any, instance: \"Model\", field: Field) -> type:\n@@ -79,31 +154,31 @@ def not_null(field: Term, value: Any) -> Criterion:\n \n \n def contains(field: Term, value: str) -> Criterion:\n-    return field.like(f\"%{value}%\")\n+    return Like(field, field.wrap_constant(f\"%{escape_like(value)}%\"))\n \n \n def starts_with(field: Term, value: str) -> Criterion:\n-    return field.like(f\"{value}%\")\n+    return Like(field, field.wrap_constant(f\"{escape_like(value)}%\"))\n \n \n def ends_with(field: Term, value: str) -> Criterion:\n-    return field.like(f\"%{value}\")\n+    return Like(field, field.wrap_constant(f\"%{escape_like(value)}\"))\n \n \n def insensitive_exact(field: Term, value: str) -> Criterion:\n-    return Upper(field).eq(Upper(f\"{value}\"))\n+    return Upper(field).eq(Upper(str(value)))\n \n \n def insensitive_contains(field: Term, value: str) -> Criterion:\n-    return Upper(field).like(Upper(f\"%{value}%\"))\n+    return Like(Upper(field), field.wrap_constant(Upper(f\"%{escape_like(value)}%\")))\n \n \n def insensitive_starts_with(field: Term, value: str) -> Criterion:\n-    return Upper(field).like(Upper(f\"{value}%\"))\n+    return Like(Upper(field), field.wrap_constant(Upper(f\"{escape_like(value)}%\")))\n \n \n def insensitive_ends_with(field: Term, value: str) -> Criterion:\n-    return Upper(field).like(Upper(f\"%{value}\"))\n+    return Like(Upper(field), field.wrap_constant(Upper(f\"%{escape_like(value)}\")))\n \n \n ##############################################################################"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e34c2c01a09b0505d7e706df9a6d4aaf10d38b67",
            "date": "2025-01-10T17:16:39Z",
            "author_login": "henadzit"
          },
          {
            "sha": "46e3aefda15e90e23e22b76f62ae1c6f783ce7a7",
            "date": "2025-01-10T16:46:25Z",
            "author_login": "henadzit"
          },
          {
            "sha": "8b5ac141e19e1bd4fd60cf575d123c3569cb0fd2",
            "date": "2025-01-05T07:57:38Z",
            "author_login": "waketzheng"
          },
          {
            "sha": "0aee52d31ce22b7389a3a83cfc62747e9d2482c5",
            "date": "2025-01-04T15:55:50Z",
            "author_login": "Invisi"
          },
          {
            "sha": "7afc90e2ad8bdffd68b2221f816b53a37eb3cf73",
            "date": "2025-01-03T10:43:55Z",
            "author_login": "henadzit"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-89",
    "description": "In Tortoise ORM before versions 0.15.23 and 0.16.6, various forms of SQL injection have been found for MySQL and when filtering or doing mass-updates on char/text fields. SQLite & PostgreSQL are only affected when filtering with contains, starts_with, or ends_with filters (and their case-insensitive counterparts).",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-04-20T22:15:13.587",
    "last_modified": "2024-11-21T04:56:34.570",
    "fix_date": "2020-04-18T14:58:20Z"
  },
  "references": [
    {
      "url": "https://github.com/tortoise/tortoise-orm/commit/91c364053e0ddf77edc5442914c6f049512678b3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tortoise/tortoise-orm/security/advisories/GHSA-9j2c-x8qm-qmjq",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tortoise/tortoise-orm/commit/91c364053e0ddf77edc5442914c6f049512678b3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tortoise/tortoise-orm/security/advisories/GHSA-9j2c-x8qm-qmjq",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:44.949716",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tortoise-orm",
    "owner": "tortoise",
    "created_at": "2018-03-29T16:52:10Z",
    "updated_at": "2025-01-14T14:35:27Z",
    "pushed_at": "2025-01-10T17:16:39Z",
    "size": 4691,
    "stars": 4780,
    "forks": 398,
    "open_issues": 505,
    "watchers": 4780,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop"
    ],
    "languages": {
      "Python": 1355423,
      "Makefile": 3422
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T19:17:00.766115"
  }
}