{
  "cve_id": "CVE-2020-11012",
  "github_data": {
    "repository": "minio/minio",
    "fix_commit": "4cd6ca02c7957aeb2de3eede08b0754332a77923",
    "related_commits": [
      "4cd6ca02c7957aeb2de3eede08b0754332a77923",
      "4cd6ca02c7957aeb2de3eede08b0754332a77923"
    ],
    "patch_url": "https://github.com/minio/minio/commit/4cd6ca02c7957aeb2de3eede08b0754332a77923.patch",
    "fix_commit_details": {
      "sha": "4cd6ca02c7957aeb2de3eede08b0754332a77923",
      "commit_date": "2020-04-22T20:42:01Z",
      "author": {
        "login": "vadmeste",
        "type": "User",
        "stats": {
          "total_commits": 897,
          "average_weekly_commits": 1.6797752808988764,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 344
        }
      },
      "commit_message": {
        "title": "fix: Add missing return in admin requests auth (#9422)",
        "length": 54,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 47,
        "additions": 47,
        "deletions": 0
      },
      "files": [
        {
          "filename": "cmd/auth-handler.go",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -140,6 +140,7 @@ func validateAdminSignature(ctx context.Context, r *http.Request, region string)\n \t\treqInfo := (&logger.ReqInfo{}).AppendTags(\"requestHeaders\", dumpRequest(r))\n \t\tctx := logger.SetReqInfo(ctx, reqInfo)\n \t\tlogger.LogIf(ctx, errors.New(getAPIError(s3Err).Description), logger.Application)\n+\t\treturn cred, nil, owner, s3Err\n \t}\n \n \tclaims, s3Err := checkClaimsFromToken(r, cred)"
        },
        {
          "filename": "cmd/auth-handler_test.go",
          "status": "modified",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -391,6 +391,7 @@ func TestIsReqAuthenticated(t *testing.T) {\n \t\t}\n \t}\n }\n+\n func TestCheckAdminRequestAuthType(t *testing.T) {\n \tobjLayer, fsDir, err := prepareFS()\n \tif err != nil {\n@@ -425,3 +426,48 @@ func TestCheckAdminRequestAuthType(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+func TestValidateAdminSignature(t *testing.T) {\n+\n+\tctx := context.Background()\n+\n+\tobjLayer, fsDir, err := prepareFS()\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer os.RemoveAll(fsDir)\n+\n+\tif err = newTestConfig(globalMinioDefaultRegion, objLayer); err != nil {\n+\t\tt.Fatalf(\"unable initialize config file, %s\", err)\n+\t}\n+\n+\tcreds, err := auth.CreateCredentials(\"admin\", \"mypassword\")\n+\tif err != nil {\n+\t\tt.Fatalf(\"unable create credential, %s\", err)\n+\t}\n+\tglobalActiveCred = creds\n+\n+\ttestCases := []struct {\n+\t\tAccessKey string\n+\t\tSecretKey string\n+\t\tErrCode   APIErrorCode\n+\t}{\n+\t\t{\"\", \"\", ErrInvalidAccessKeyID},\n+\t\t{\"admin\", \"\", ErrSignatureDoesNotMatch},\n+\t\t{\"admin\", \"wrongpassword\", ErrSignatureDoesNotMatch},\n+\t\t{\"wronguser\", \"mypassword\", ErrInvalidAccessKeyID},\n+\t\t{\"\", \"mypassword\", ErrInvalidAccessKeyID},\n+\t\t{\"admin\", \"mypassword\", ErrNone},\n+\t}\n+\n+\tfor i, testCase := range testCases {\n+\t\treq := mustNewRequest(\"GET\", \"http://localhost:9000/\", 0, nil, t)\n+\t\tif err := signRequestV4(req, testCase.AccessKey, testCase.SecretKey); err != nil {\n+\t\t\tt.Fatalf(\"Unable to inititalized new signed http request %s\", err)\n+\t\t}\n+\t\t_, _, _, s3Error := validateAdminSignature(ctx, req, globalMinioDefaultRegion)\n+\t\tif s3Error != testCase.ErrCode {\n+\t\t\tt.Errorf(\"Test %d: Unexpected s3error returned wanted %d, got %d\", i+1, testCase.ErrCode, s3Error)\n+\t\t}\n+\t}\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "00b2ef29323e786a8958bf0bedced133cb06245f",
            "date": "2025-01-08T11:09:24Z",
            "author_login": "vadmeste"
          },
          {
            "sha": "4536ecfaa4d81dd3f648616094a4936162089db8",
            "date": "2025-01-06T15:51:54Z",
            "author_login": "klauspost"
          },
          {
            "sha": "43a74029685512ce9b1b76c053d48b43fc8d64fc",
            "date": "2025-01-03T05:34:47Z",
            "author_login": "harshavardhana"
          },
          {
            "sha": "330dca9a354cdf445d71979170bbe3d27971d127",
            "date": "2024-12-21T04:24:45Z",
            "author_login": "allanrogerr"
          },
          {
            "sha": "ddd137d31769185e6de4f27dfaba8de6498bb1ea",
            "date": "2024-12-19T18:21:46Z",
            "author_login": "klauspost"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:H/A:N",
    "cwe_id": "CWE-305",
    "description": "MinIO versions before RELEASE.2020-04-23T00-58-49Z have an authentication bypass issue in the MinIO admin API. Given an admin access key, it is possible to perform admin API operations i.e. creating new service accounts for existing access keys - without knowing the admin secret key. This has been fixed and released in version RELEASE.2020-04-23T00-58-49Z.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-04-23T22:15:12.833",
    "last_modified": "2024-11-21T04:56:34.820",
    "fix_date": "2020-04-22T20:42:01Z"
  },
  "references": [
    {
      "url": "https://github.com/minio/minio/commit/4cd6ca02c7957aeb2de3eede08b0754332a77923",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/pull/9422",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/releases/tag/RELEASE.2020-04-23T00-58-49Z",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/security/advisories/GHSA-xv4r-vccv-mg4w",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/commit/4cd6ca02c7957aeb2de3eede08b0754332a77923",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/pull/9422",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/releases/tag/RELEASE.2020-04-23T00-58-49Z",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/security/advisories/GHSA-xv4r-vccv-mg4w",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:44.955066",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "minio",
    "owner": "minio",
    "created_at": "2015-01-14T19:23:58Z",
    "updated_at": "2025-01-14T10:52:24Z",
    "pushed_at": "2025-01-08T11:09:25Z",
    "size": 131770,
    "stars": 49440,
    "forks": 5609,
    "open_issues": 33,
    "watchers": 49440,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "release"
    ],
    "languages": {
      "Go": 8661217,
      "Shell": 72203,
      "Makefile": 11634,
      "Mustache": 6628,
      "Smarty": 872,
      "Dockerfile": 229
    },
    "commit_activity": {
      "total_commits_last_year": 949,
      "avg_commits_per_week": 18.25,
      "days_active_last_year": 271
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T12:53:58.932687"
  }
}