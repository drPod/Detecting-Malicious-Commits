{
  "cve_id": "CVE-2020-11031",
  "github_data": {
    "repository": "glpi-project/glpi",
    "fix_commit": "f1ae6c8481e5c19a6f1801a5548cada45702e01a",
    "related_commits": [
      "f1ae6c8481e5c19a6f1801a5548cada45702e01a",
      "f1ae6c8481e5c19a6f1801a5548cada45702e01a"
    ],
    "patch_url": "https://github.com/glpi-project/glpi/commit/f1ae6c8481e5c19a6f1801a5548cada45702e01a.patch",
    "fix_commit_details": {
      "sha": "f1ae6c8481e5c19a6f1801a5548cada45702e01a",
      "commit_date": "2020-05-06T07:50:25Z",
      "author": {
        "login": "trasher",
        "type": "User",
        "stats": {
          "total_commits": 2845,
          "average_weekly_commits": 2.602927721866423,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 379
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-7xwm-4vjr-jvqh",
        "length": 517,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 861,
        "additions": 789,
        "deletions": 72
      },
      "files": [
        {
          "filename": ".gitignore",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -1,4 +1,6 @@\n /config/config_db*\n+/config/glpi.key\n+/config/glpicrypt.key\n /config/local_define.php\n /tests/config_db*\n /marketplace/"
        },
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -27,6 +27,7 @@ The present file will list all changes made to the project; according to the\n \n - PHP error_reporting and display_errors configuration directives are no longer overrided by GLPI, unless in debug mode (which forces reporting and display of all errors).\n - `scripts/migrations/racks_plugin.php` has been replaced by `glpi:migration:racks_plugin_to_core` command available using `bin/console`\n+- Encryption alogithm improved using libsodium\n \n ### API changes\n \n@@ -114,6 +115,8 @@ The present file will list all changes made to the project; according to the\n - `ProjectCost::cloneProject()`\n - `ProjectTeam::cloneProjectTask()`\n - `ProjectTask::cloneProjectTeam()`\n+- Usage of `GLPIKEY` constant\n+- `Toolbox::encrypt()` and `Toolbox::decrypt()` because they use the old encryption aglogithm\n \n #### Removed\n "
        },
        {
          "filename": "ajax/mailcollector.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -58,7 +58,7 @@\n             if (empty($input[\"passwd\"])) {\n                unset($input[\"passwd\"]);\n             } else {\n-               $input[\"passwd\"] = Toolbox::encrypt(stripslashes($input[\"passwd\"]), GLPIKEY);\n+               $input[\"passwd\"] = Toolbox::sodiumEncrypt(stripslashes($input[\"passwd\"]));\n             }\n          }\n "
        },
        {
          "filename": "composer.json",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -36,6 +36,7 @@\n         \"mexitek/phpcolors\": \"^0.4.0\",\n         \"michelf/php-markdown\": \"^1.6\",\n         \"monolog/monolog\": \"^2.0\",\n+        \"paragonie/sodium_compat\": \"^1.13\",\n         \"phpmailer/phpmailer\": \"^6.0\",\n         \"psr/log\": \"^1.1\",\n         \"psr/simple-cache\": \"^1.0\",\n@@ -66,13 +67,15 @@\n         \"sensiolabs/security-checker\": \"^6.0\"\n     },\n     \"replace\": {\n+        \"paragonie/random_compat\": \"*\",\n         \"symfony/polyfill-ctype\": \"*\",\n         \"symfony/polyfill-intl-idn\": \"*\",\n         \"symfony/polyfill-mbstring\": \"*\",\n         \"symfony/polyfill-php72\": \"*\"\n     },\n     \"suggest\": {\n-        \"ext-ldap\": \"Used to provide LDAP authentication and synchronization\"\n+        \"ext-ldap\": \"Used to provide LDAP authentication and synchronization\",\n+        \"ext-sodium\": \"Used to provide strong encryption for sensitive data in database\"\n     },\n     \"config\": {\n         \"optimize-autoloader\": true,"
        },
        {
          "filename": "composer.lock",
          "status": "modified",
          "additions": 193,
          "deletions": 2,
          "patch": "@@ -4,7 +4,7 @@\n         \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n         \"This file is @generated automatically\"\n     ],\n-    \"content-hash\": \"267af5215d3b1148d5a2bd588feec8fa\",\n+    \"content-hash\": \"889748826910604c38cf291aab5b831e\",\n     \"packages\": [\n         {\n             \"name\": \"blueimp/jquery-file-upload\",\n@@ -59,6 +59,12 @@\n                 \"upload\",\n                 \"widget\"\n             ],\n+            \"funding\": [\n+                {\n+                    \"url\": \"https://github.com/blueimp\",\n+                    \"type\": \"github\"\n+                }\n+            ],\n             \"time\": \"2020-05-05T08:39:01+00:00\"\n         },\n         {\n@@ -811,6 +817,12 @@\n                 \"laminas\",\n                 \"mail\"\n             ],\n+            \"funding\": [\n+                {\n+                    \"url\": \"https://funding.communitybridge.org/projects/laminas-project\",\n+                    \"type\": \"community_bridge\"\n+                }\n+            ],\n             \"time\": \"2020-04-21T16:42:19+00:00\"\n         },\n         {\n@@ -1179,6 +1191,12 @@\n                 \"laminas\",\n                 \"zf\"\n             ],\n+            \"funding\": [\n+                {\n+                    \"url\": \"https://funding.communitybridge.org/projects/laminas-project\",\n+                    \"type\": \"community_bridge\"\n+                }\n+            ],\n             \"time\": \"2020-04-03T16:01:00+00:00\"\n         },\n         {\n@@ -1356,6 +1374,88 @@\n             ],\n             \"time\": \"2019-12-20T14:22:59+00:00\"\n         },\n+        {\n+            \"name\": \"paragonie/sodium_compat\",\n+            \"version\": \"v1.13.0\",\n+            \"source\": {\n+                \"type\": \"git\",\n+                \"url\": \"https://github.com/paragonie/sodium_compat.git\",\n+                \"reference\": \"bbade402cbe84c69b718120911506a3aa2bae653\"\n+            },\n+            \"dist\": {\n+                \"type\": \"zip\",\n+                \"url\": \"https://api.github.com/repos/paragonie/sodium_compat/zipball/bbade402cbe84c69b718120911506a3aa2bae653\",\n+                \"reference\": \"bbade402cbe84c69b718120911506a3aa2bae653\",\n+                \"shasum\": \"\"\n+            },\n+            \"require\": {\n+                \"paragonie/random_compat\": \">=1\",\n+                \"php\": \"^5.2.4|^5.3|^5.4|^5.5|^5.6|^7|^8\"\n+            },\n+            \"require-dev\": {\n+                \"phpunit/phpunit\": \"^3|^4|^5|^6|^7\"\n+            },\n+            \"suggest\": {\n+                \"ext-libsodium\": \"PHP < 7.0: Better performance, password hashing (Argon2i), secure memory management (memzero), and better security.\",\n+                \"ext-sodium\": \"PHP >= 7.0: Better performance, password hashing (Argon2i), secure memory management (memzero), and better security.\"\n+            },\n+            \"type\": \"library\",\n+            \"autoload\": {\n+                \"files\": [\n+                    \"autoload.php\"\n+                ]\n+            },\n+            \"notification-url\": \"https://packagist.org/downloads/\",\n+            \"license\": [\n+                \"ISC\"\n+            ],\n+            \"authors\": [\n+                {\n+                    \"name\": \"Paragon Initiative Enterprises\",\n+                    \"email\": \"security@paragonie.com\"\n+                },\n+                {\n+                    \"name\": \"Frank Denis\",\n+                    \"email\": \"jedisct1@pureftpd.org\"\n+                }\n+            ],\n+            \"description\": \"Pure PHP implementation of libsodium; uses the PHP extension if it exists\",\n+            \"keywords\": [\n+                \"Authentication\",\n+                \"BLAKE2b\",\n+                \"ChaCha20\",\n+                \"ChaCha20-Poly1305\",\n+                \"Chapoly\",\n+                \"Curve25519\",\n+                \"Ed25519\",\n+                \"EdDSA\",\n+                \"Edwards-curve Digital Signature Algorithm\",\n+                \"Elliptic Curve Diffie-Hellman\",\n+                \"Poly1305\",\n+                \"Pure-PHP cryptography\",\n+                \"RFC 7748\",\n+                \"RFC 8032\",\n+                \"Salpoly\",\n+                \"Salsa20\",\n+                \"X25519\",\n+                \"XChaCha20-Poly1305\",\n+                \"XSalsa20-Poly1305\",\n+                \"Xchacha20\",\n+                \"Xsalsa20\",\n+                \"aead\",\n+                \"cryptography\",\n+                \"ecdh\",\n+                \"elliptic curve\",\n+                \"elliptic curve cryptography\",\n+                \"encryption\",\n+                \"libsodium\",\n+                \"php\",\n+                \"public-key cryptography\",\n+                \"secret-key cryptography\",\n+                \"side-channel resistant\"\n+            ],\n+            \"time\": \"2020-03-20T21:48:09+00:00\"\n+        },\n         {\n             \"name\": \"phpmailer/phpmailer\",\n             \"version\": \"v6.1.5\",\n@@ -1416,6 +1516,20 @@\n                 }\n             ],\n             \"description\": \"PHPMailer is a full-featured email creation and transfer class for PHP\",\n+            \"funding\": [\n+                {\n+                    \"url\": \"https://marcus.bointon.com/donations/\",\n+                    \"type\": \"custom\"\n+                },\n+                {\n+                    \"url\": \"https://github.com/Synchro\",\n+                    \"type\": \"github\"\n+                },\n+                {\n+                    \"url\": \"https://www.patreon.com/marcusbointon\",\n+                    \"type\": \"patreon\"\n+                }\n+            ],\n             \"time\": \"2020-03-14T14:23:48+00:00\"\n         },\n         {\n@@ -1838,6 +1952,12 @@\n                 \"identifier\",\n                 \"uuid\"\n             ],\n+            \"funding\": [\n+                {\n+                    \"url\": \"https://github.com/ramsey\",\n+                    \"type\": \"github\"\n+                }\n+            ],\n             \"time\": \"2020-03-29T20:13:32+00:00\"\n         },\n         {\n@@ -2552,6 +2672,20 @@\n             ],\n             \"description\": \"Symfony Console Component\",\n             \"homepage\": \"https://symfony.com\",\n+            \"funding\": [\n+                {\n+                    \"url\": \"https://symfony.com/sponsor\",\n+                    \"type\": \"custom\"\n+                },\n+                {\n+                    \"url\": \"https://github.com/fabpot\",\n+                    \"type\": \"github\"\n+                },\n+                {\n+                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n+                    \"type\": \"tidelift\"\n+                }\n+            ],\n             \"time\": \"2020-03-30T11:41:10+00:00\"\n         },\n         {\n@@ -2610,6 +2744,20 @@\n                 \"portable\",\n                 \"shim\"\n             ],\n+            \"funding\": [\n+                {\n+                    \"url\": \"https://symfony.com/sponsor\",\n+                    \"type\": \"custom\"\n+                },\n+                {\n+                    \"url\": \"https://github.com/fabpot\",\n+                    \"type\": \"github\"\n+                },\n+                {\n+                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n+                    \"type\": \"tidelift\"\n+                }\n+            ],\n             \"time\": \"2020-02-27T09:26:54+00:00\"\n         },\n         {\n@@ -4172,6 +4320,20 @@\n             ],\n             \"description\": \"Symfony Finder Component\",\n             \"homepage\": \"https://symfony.com\",\n+            \"funding\": [\n+                {\n+                    \"url\": \"https://symfony.com/sponsor\",\n+                    \"type\": \"custom\"\n+                },\n+                {\n+                    \"url\": \"https://github.com/fabpot\",\n+                    \"type\": \"github\"\n+                },\n+                {\n+                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n+                    \"type\": \"tidelift\"\n+                }\n+            ],\n             \"time\": \"2020-02-14T07:42:58+00:00\"\n         },\n         {\n@@ -4408,6 +4570,20 @@\n             ],\n             \"description\": \"Symfony Process Component\",\n             \"homepage\": \"https://symfony.com\",\n+            \"funding\": [\n+                {\n+                    \"url\": \"https://symfony.com/sponsor\",\n+                    \"type\": \"custom\"\n+                },\n+                {\n+                    \"url\": \"https://github.com/fabpot\",\n+                    \"type\": \"github\"\n+                },\n+                {\n+                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n+                    \"type\": \"tidelift\"\n+                }\n+            ],\n             \"time\": \"2020-02-07T20:06:44+00:00\"\n         },\n         {\n@@ -4467,6 +4643,20 @@\n             ],\n             \"description\": \"Symfony Yaml Component\",\n             \"homepage\": \"https://symfony.com\",\n+            \"funding\": [\n+                {\n+                    \"url\": \"https://symfony.com/sponsor\",\n+                    \"type\": \"custom\"\n+                },\n+                {\n+                    \"url\": \"https://github.com/fabpot\",\n+                    \"type\": \"github\"\n+                },\n+                {\n+                    \"url\": \"https://tidelift.com/funding/github/packagist/symfony/symfony\",\n+                    \"type\": \"tidelift\"\n+                }\n+            ],\n             \"time\": \"2020-02-03T10:46:43+00:00\"\n         }\n     ],\n@@ -4494,5 +4684,6 @@\n     },\n     \"platform-overrides\": {\n         \"php\": \"7.2.0\"\n-    }\n+    },\n+    \"plugin-api-version\": \"1.1.0\"\n }"
        },
        {
          "filename": "inc/auth.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -744,8 +744,7 @@ function login($login_name, $login_password, $noauto = false, $remember_me = fal\n                   $ds = AuthLDAP::connectToServer($ldap_method[\"host\"],\n                                                   $ldap_method[\"port\"],\n                                                   $ldap_method[\"rootdn\"],\n-                                                  Toolbox::decrypt($ldap_method[\"rootdn_passwd\"],\n-                                                                   GLPIKEY),\n+                                                  Toolbox::sodiumDecrypt($ldap_method[\"rootdn_passwd\"]),\n                                                   $ldap_method[\"use_tls\"],\n                                                   $ldap_method[\"deref_option\"]);\n \n@@ -1708,4 +1707,4 @@ static function dropdownLogin() {\n    static function getIcon() {\n       return \"fas fa-sign-in-alt\";\n    }\n-}\n\\ No newline at end of file\n+}"
        },
        {
          "filename": "inc/authldap.class.php",
          "status": "modified",
          "additions": 7,
          "deletions": 8,
          "patch": "@@ -193,8 +193,7 @@ function prepareInputForUpdate($input) {\n          if (empty($input[\"rootdn_passwd\"])) {\n             unset($input[\"rootdn_passwd\"]);\n          } else {\n-            $input[\"rootdn_passwd\"] = Toolbox::encrypt(stripslashes($input[\"rootdn_passwd\"]),\n-                                                       GLPIKEY);\n+            $input[\"rootdn_passwd\"] = Toolbox::sodiumEncrypt(stripslashes($input[\"rootdn_passwd\"]));\n          }\n       }\n \n@@ -1457,7 +1456,7 @@ static function testLDAPConnection($auths_id, $replicate_id = -1) {\n          $port = $config_ldap->fields['port'];\n       }\n       $ds = self::connectToServer($host, $port, $config_ldap->fields['rootdn'],\n-                                  Toolbox::decrypt($config_ldap->fields['rootdn_passwd'], GLPIKEY),\n+                                  Toolbox::sodiumDecrypt($config_ldap->fields['rootdn_passwd']),\n                                   $config_ldap->fields['use_tls'],\n                                   $config_ldap->fields['deref_option']);\n       if ($ds) {\n@@ -2613,7 +2612,7 @@ function connect() {\n \n       return $this->connectToServer($this->fields['host'], $this->fields['port'],\n                                     $this->fields['rootdn'],\n-                                    Toolbox::decrypt($this->fields['rootdn_passwd'], GLPIKEY),\n+                                    Toolbox::sodiumDecrypt($this->fields['rootdn_passwd']),\n                                     $this->fields['use_tls'],\n                                     $this->fields['deref_option']);\n    }\n@@ -2674,7 +2673,7 @@ static function tryToConnectToServer($ldap_method, $login, $password) {\n       }\n       $ds = self::connectToServer($ldap_method['host'], $ldap_method['port'],\n                                   $ldap_method['rootdn'],\n-                                  Toolbox::decrypt($ldap_method['rootdn_passwd'], GLPIKEY),\n+                                  Toolbox::sodiumDecrypt($ldap_method['rootdn_passwd']),\n                                   $ldap_method['use_tls'], $ldap_method['deref_option']);\n \n       // Test with login and password of the user if exists\n@@ -2691,7 +2690,7 @@ static function tryToConnectToServer($ldap_method, $login, $password) {\n          foreach (self::getAllReplicateForAMaster($ldap_method['id']) as $replicate) {\n             $ds = self::connectToServer($replicate[\"host\"], $replicate[\"port\"],\n                                         $ldap_method['rootdn'],\n-                                        Toolbox::decrypt($ldap_method['rootdn_passwd'], GLPIKEY),\n+                                        Toolbox::sodiumDecrypt($ldap_method['rootdn_passwd']),\n                                         $ldap_method['use_tls'], $ldap_method['deref_option']);\n \n             // Test with login and password of the user\n@@ -3445,7 +3444,7 @@ static function searchUser(AuthLDAP $authldap) {\n \n       if (self::connectToServer($authldap->getField('host'), $authldap->getField('port'),\n                                 $authldap->getField('rootdn'),\n-                                Toolbox::decrypt($authldap->getField('rootdn_passwd'), GLPIKEY),\n+                                Toolbox::sodiumDecrypt($authldap->getField('rootdn_passwd')),\n                                 $authldap->getField('use_tls'),\n                                 $authldap->getField('deref_option'))) {\n          self::showLdapUsers();\n@@ -3503,7 +3502,7 @@ function prepareInputForAdd($input) {\n       }\n \n       if (isset($input[\"rootdn_passwd\"]) && !empty($input[\"rootdn_passwd\"])) {\n-         $input[\"rootdn_passwd\"] = Toolbox::encrypt(stripslashes($input[\"rootdn_passwd\"]), GLPIKEY);\n+         $input[\"rootdn_passwd\"] = Toolbox::sodiumEncrypt(stripslashes($input[\"rootdn_passwd\"]));\n       }\n \n       return $input;"
        },
        {
          "filename": "inc/config.class.php",
          "status": "modified",
          "additions": 7,
          "deletions": 3,
          "patch": "@@ -156,7 +156,7 @@ function prepareInputForUpdate($input) {\n          if (empty($input[\"smtp_passwd\"])) {\n             unset($input[\"smtp_passwd\"]);\n          } else {\n-            $input[\"smtp_passwd\"] = Toolbox::encrypt(stripslashes($input[\"smtp_passwd\"]), GLPIKEY);\n+            $input[\"smtp_passwd\"] = Toolbox::sodiumEncrypt(stripslashes($input[\"smtp_passwd\"]));\n          }\n       }\n \n@@ -168,8 +168,7 @@ function prepareInputForUpdate($input) {\n          if (empty($input[\"proxy_passwd\"])) {\n             unset($input[\"proxy_passwd\"]);\n          } else {\n-            $input[\"proxy_passwd\"] = Toolbox::encrypt(stripslashes($input[\"proxy_passwd\"]),\n-                                                      GLPIKEY);\n+            $input[\"proxy_passwd\"] = Toolbox::sodiumEncrypt(stripslashes($input[\"proxy_passwd\"]));\n          }\n       }\n \n@@ -2060,6 +2059,8 @@ static function getLibraries($all = false) {\n                  'check'   => 'GuzzleHttp\\\\Client' ],\n                [ 'name'    => 'wapmorgan/unified-archive',\n                  'check'   => 'wapmorgan\\\\UnifiedArchive\\\\UnifiedArchive' ],\n+               [ 'name'    => 'paragonie/sodium_compat',\n+                 'check'   => 'ParagonIE_Sodium_Compat' ],\n       ];\n       if (Toolbox::canUseCAS()) {\n          $deps[] = [\n@@ -2523,6 +2524,9 @@ static function checkExtensions($list = null) {\n             ],\n             'intl' => [\n                'required' => true\n+            ],\n+            'sodium' => [\n+               'required' => false\n             ]\n          ];\n       } else {"
        },
        {
          "filename": "inc/console/database/installcommand.class.php",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -37,6 +37,7 @@\n }\n \n use DB;\n+use GLPIKey;\n use Toolbox;\n \n use Symfony\\Component\\Console\\Exception\\RuntimeException;\n@@ -75,6 +76,13 @@ class InstallCommand extends AbstractConfigureCommand {\n     */\n    const ERROR_MISSING_REQUIREMENTS = 8;\n \n+   /**\n+    * Error code returned when failing to create encryption key file.\n+    *\n+    * @var integer\n+    */\n+   const ERROR_CANNOT_CREATE_ENCRYPTION_KEY_FILE = 9;\n+\n    protected function configure() {\n \n       parent::configure();\n@@ -210,6 +218,14 @@ protected function execute(InputInterface $input, OutputInterface $output) {\n          }\n       }\n \n+      // Create security key\n+      $glpikey = new GLPIKey();\n+      if (!$glpikey->keyExists() && !$glpikey->generate()) {\n+         $message = __('Security key cannot be generated!');\n+         $output->writeln('<error>' . $message . '</error>', OutputInterface::VERBOSITY_QUIET);\n+         return self::ERROR_CANNOT_CREATE_ENCRYPTION_KEY_FILE;\n+      }\n+\n       $mysqli = new \\mysqli();\n       if (intval($db_port) > 0) {\n          // Network port"
        },
        {
          "filename": "inc/console/security/changekeycommand.class.php",
          "status": "added",
          "additions": 110,
          "deletions": 0,
          "patch": "@@ -0,0 +1,110 @@\n+<?php\n+/**\n+ * ---------------------------------------------------------------------\n+ * GLPI - Gestionnaire Libre de Parc Informatique\n+ * Copyright (C) 2015-2018 Teclib' and contributors.\n+ *\n+ * http://glpi-project.org\n+ *\n+ * based on GLPI - Gestionnaire Libre de Parc Informatique\n+ * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n+ *\n+ * ---------------------------------------------------------------------\n+ *\n+ * LICENSE\n+ *\n+ * This file is part of GLPI.\n+ *\n+ * GLPI is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * GLPI is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n+ * ---------------------------------------------------------------------\n+ */\n+\n+namespace Glpi\\Console\\Security;\n+\n+if (!defined('GLPI_ROOT')) {\n+   die(\"Sorry. You can't access this file directly\");\n+}\n+\n+use Glpi\\Console\\AbstractCommand;\n+use Symfony\\Component\\Console\\Input\\InputInterface;\n+use Symfony\\Component\\Console\\Output\\OutputInterface;\n+use Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\n+use GLPIKey;\n+\n+class ChangekeyCommand extends AbstractCommand {\n+   /**\n+    * Error code returned when unable to renew key.\n+    *\n+    * @var integer\n+    */\n+   const ERROR_UNABLE_TO_RENEW_KEY = 1;\n+\n+   protected function configure() {\n+      parent::configure();\n+\n+      $this->setName('glpi:security:change_key');\n+      $this->setDescription(__('Change password storage key and update values in database.'));\n+   }\n+\n+   protected function execute(InputInterface $input, OutputInterface $output) {\n+      $glpikey = new GLPIKey();\n+\n+      $fields = $glpikey->getFields();\n+      $configs = $glpikey->getConfigs();\n+      $conf_count = 0;\n+      foreach ($configs as $config) {\n+         $conf_count += count($config);\n+      }\n+\n+      $output->writeln(\n+         sprintf(\n+            '<info>' . __('Found %1$s field(s) and %2$s configuration entries requiring migration.') . '</info>',\n+            count($fields),\n+            $conf_count\n+         )\n+      );\n+\n+      if (!$input->getOption('no-interaction')) {\n+         // Ask for confirmation (unless --no-interaction)\n+         $question_helper = $this->getHelper('question');\n+         $run = $question_helper->ask(\n+            $input,\n+            $output,\n+            new ConfirmationQuestion(__('Do you want to continue ?') . ' [Yes/no]', true)\n+         );\n+         if (!$run) {\n+            $output->writeln(\n+               '<comment>' . __('Aborted.') . '</comment>',\n+               OutputInterface::VERBOSITY_VERBOSE\n+            );\n+            return 0;\n+         }\n+      }\n+\n+      $created = $glpikey->generate();\n+      if (!$created) {\n+         $output->writeln(\n+            '<error>' . __('Unable to change security key!') . '</error>',\n+            OutputInterface::VERBOSITY_QUIET\n+         );\n+         return self::ERROR_UNABLE_TO_RENEW_KEY;\n+      }\n+\n+      $this->output->write(PHP_EOL);\n+\n+      $output->writeln('<info>' . __('New security key generated; database updated.') . '</info>');\n+\n+      return 0; // Success\n+   }\n+}"
        },
        {
          "filename": "inc/dashboard/grid.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -462,7 +462,7 @@ public function embed(array $params = []) {\n    }\n \n    static function getToken(string $dasboard = \"\", int $entities_id = 0, int $is_recursive = 0): string {\n-      $seed         = $dasboard.$entities_id.$is_recursive.GLPIKEY;\n+      $seed         = $dasboard.$entities_id.$is_recursive.Telemetry::getInstanceUuid();\n       $uuid         = Uuid::uuid5(Uuid::NAMESPACE_OID, $seed);\n       $token        = $uuid->toString();\n \n@@ -1366,4 +1366,4 @@ static function dropdownDashboard(string $name = \"\", array $params = []): string\n \n       return \\Dropdown::showFromArray($name, $options_dashboards, $params);\n    }\n-}\n\\ No newline at end of file\n+}"
        },
        {
          "filename": "inc/glpikey.class.php",
          "status": "added",
          "additions": 271,
          "deletions": 0,
          "patch": "@@ -0,0 +1,271 @@\n+<?php\n+/**\n+ * ---------------------------------------------------------------------\n+ * GLPI - Gestionnaire Libre de Parc Informatique\n+ * Copyright (C) 2015-2018 Teclib' and contributors.\n+ *\n+ * http://glpi-project.org\n+ *\n+ * based on GLPI - Gestionnaire Libre de Parc Informatique\n+ * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n+ *\n+ * ---------------------------------------------------------------------\n+ *\n+ * LICENSE\n+ *\n+ * This file is part of GLPI.\n+ *\n+ * GLPI is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * GLPI is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n+ * ---------------------------------------------------------------------\n+ */\n+\n+if (!defined('GLPI_ROOT')) {\n+   die(\"Sorry. You can't access this file directly\");\n+}\n+\n+/**\n+ *  GLPI security key\n+**/\n+class GLPIKey {\n+   /**\n+    * Key file path.\n+    *\n+    * @var string\n+    */\n+   private $keyfile;\n+\n+   /**\n+    * Legacy key file path.\n+    *\n+    * @var string\n+    */\n+   private $legacykeyfile;\n+\n+   /**\n+    * List of crypted DB fields.\n+    *\n+    * @var array\n+    */\n+   protected $fields = [\n+      'glpi_mailcollectors.passwd',\n+      'glpi_authldaps.rootdn_passwd'\n+   ];\n+\n+   /**\n+    * List of crypted configuration values.\n+    * Each key corresponds to a configuration context, and contains list of configs names.\n+    *\n+    * @var array\n+    */\n+   protected $configs = [\n+      'core'   => [\n+         'smtp_passwd',\n+         'proxy_passwd'\n+      ]\n+   ];\n+\n+   public function __construct() {\n+      $this->keyfile = GLPI_CONFIG_DIR . '/glpicrypt.key';\n+      $this->legacykeyfile = GLPI_CONFIG_DIR . '/glpi.key';\n+   }\n+\n+   /**\n+    * Check if GLPI security key used for decryptable passwords exists\n+    *\n+    * @return string\n+    */\n+   public function keyExists() {\n+      return file_exists($this->keyfile) && !empty($this->get());\n+   }\n+\n+   /**\n+    * Get GLPI security key used for decryptable passwords\n+    *\n+    * @throw \\RuntimeException if key file is missing\n+    *\n+    * @return string\n+    */\n+   public function get() {\n+      if (!file_exists($this->keyfile)) {\n+         throw new \\RuntimeException('You must create a security key, see glpi:security:change_key command.');\n+      }\n+      //load key from existing config file\n+      $key = file_get_contents($this->keyfile);\n+      return $key;\n+   }\n+\n+   /**\n+    * Get GLPI security legacy key that was used for decryptable passwords\n+    *\n+    * @return string\n+    *\n+    * @deprecated 9.5.0\n+    */\n+   public function getLegacyKey() {\n+      Toolbox::deprecated();\n+\n+      if (!file_exists($this->legacykeyfile)) {\n+         return GLPIKEY;\n+      }\n+      //load key from existing config file\n+      $key = file_get_contents($this->legacykeyfile);\n+      return $key;\n+   }\n+\n+   /**\n+    * Generate GLPI security key used for decryptable passwords\n+    * and update values in DB if necessary.\n+    * @return boolean\n+    */\n+   public function generate() {\n+      global $DB;\n+\n+      $sodium_key = null;\n+      $old_key = false;\n+\n+      try {\n+         $sodium_key = $this->get();\n+      } catch (\\RuntimeException $e) {\n+         $sodium_key = null;\n+         $old_key = @$this->getLegacyKey();\n+      }\n+\n+      $key = sodium_crypto_aead_chacha20poly1305_ietf_keygen();\n+      $success = (bool)file_put_contents($this->keyfile, $key);\n+      if (!$success) {\n+         return false;\n+      }\n+\n+      if ($DB instanceof DBmysql) {\n+         return $this->migrateFieldsInDb($sodium_key, $old_key)\n+            && $this->migrateConfigsInDb($sodium_key, $old_key);\n+      }\n+\n+      return true;\n+   }\n+\n+   /**\n+    * Get fields\n+    *\n+    * @return array\n+    */\n+   public function getFields() :array {\n+      global $PLUGIN_HOOKS;\n+\n+      $fields = $this->fields;\n+      if (isset($PLUGIN_HOOKS['secured_fields'])) {\n+         foreach ($PLUGIN_HOOKS['secured_fields'] as $plugfields) {\n+            $fields = array_merge($fields, $plugfields);\n+         }\n+      }\n+\n+      return $fields;\n+   }\n+\n+   /**\n+    * Get configs\n+    *\n+    * @return array\n+    */\n+   public function getConfigs() :array {\n+      global $PLUGIN_HOOKS;\n+\n+      $configs = $this->configs;\n+\n+      if (isset($PLUGIN_HOOKS['secured_configs'])) {\n+         foreach ($PLUGIN_HOOKS['secured_configs'] as $plugin => $plugconfigs) {\n+            $configs['plugin:' . $plugin] = $plugconfigs;\n+         }\n+      }\n+\n+      return $configs;\n+   }\n+\n+   /**\n+    * Migrate fields in database\n+    *\n+    * @param string       $sodium_key Current key\n+    * @param string|false $old_key     Old key, if any\n+    *\n+    * @return void\n+    */\n+   protected function migrateFieldsInDb($sodium_key, $old_key = false) {\n+      global $DB;\n+\n+      $success = true;\n+\n+      foreach ($this->getFields() as $field) {\n+         list($table, $column) = explode('.', $field);\n+\n+         $iterator = $DB->request([\n+            'SELECT' => ['id', $column],\n+            'FROM'   => $table\n+         ]);\n+\n+         while ($success && $row = $iterator->next()) {\n+            if ($old_key === false) {\n+               $pass = Toolbox::sodiumEncrypt(Toolbox::sodiumDecrypt($row[$column], $sodium_key));\n+            } else {\n+               $pass = Toolbox::sodiumEncrypt(Toolbox::decrypt($row[$column], $old_key));\n+            }\n+            $success = $DB->update(\n+               $table,\n+               [$field  => $pass],\n+               ['id'    => $row['id']]\n+            );\n+         }\n+      }\n+\n+      return $success;\n+   }\n+\n+   /**\n+    * Migrate configurations in database\n+    *\n+    * @param string       $sodium_key Current key\n+    * @param string|false $old_key    Old key, if any\n+    *\n+    * @return boolean\n+    */\n+   protected function migrateConfigsInDb($sodium_key, $old_key = false) {\n+      global $DB;\n+\n+      $success = true;\n+\n+      foreach ($this->getConfigs() as $context => $names) {\n+         $iterator = $DB->request([\n+            'FROM'   => Config::getTable(),\n+            'WHERE'  => [\n+               'context'   => $context,\n+               'name'      => $names\n+            ]\n+         ]);\n+\n+         while ($success && $row = $iterator->next()) {\n+            if ($old_key === false) {\n+               $pass = Toolbox::sodiumEncrypt(Toolbox::sodiumDecrypt($row['value'], $sodium_key));\n+            } else {\n+               $pass = Toolbox::sodiumEncrypt(Toolbox::decrypt($row['value'], $old_key));\n+            }\n+            $success = $DB->update(\n+               Config::getTable(),\n+               ['value' => $pass],\n+               ['id'    => $row['id']]\n+            );\n+         }\n+      }\n+\n+      return $success;\n+   }\n+}"
        },
        {
          "filename": "inc/glpimailer.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -65,7 +65,7 @@ function __construct() {\n          if ($CFG_GLPI['smtp_username'] != '') {\n             $this->SMTPAuth = true;\n             $this->Username = $CFG_GLPI['smtp_username'];\n-            $this->Password = Toolbox::decrypt($CFG_GLPI['smtp_passwd'], GLPIKEY);\n+            $this->Password = Toolbox::sodiumDecrypt($CFG_GLPI['smtp_passwd']);\n          }\n \n          if ($CFG_GLPI['smtp_mode'] == MAIL_SMTPSSL) {"
        },
        {
          "filename": "inc/mailcollector.class.php",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -138,7 +138,7 @@ public function prepareInput(array $input, $mode = 'add') :array {\n          if (empty($input[\"passwd\"])) {\n             unset($input[\"passwd\"]);\n          } else {\n-            $input[\"passwd\"] = Toolbox::encrypt(stripslashes($input[\"passwd\"]), GLPIKEY);\n+            $input[\"passwd\"] = Toolbox::sodiumEncrypt(stripslashes($input[\"passwd\"]));\n          }\n       }\n \n@@ -1249,7 +1249,7 @@ function connect() {\n       $params = [\n          'host'      => $config['address'],\n          'user'      => $this->fields['login'],\n-         'password'  => Toolbox::decrypt($this->fields['passwd'], GLPIKEY),\n+         'password'  => Toolbox::sodiumDecrypt($this->fields['passwd']),\n          'port'      => $config['port']\n       ];\n \n@@ -1291,7 +1291,7 @@ function connect() {\n          $this->marubox = imap_open(\n             $this->fields['host'],\n             $this->fields['login'],\n-            Toolbox::decrypt($this->fields['passwd'], GLPIKEY),\n+            Toolbox::sodiumDecrypt($this->fields['passwd']),\n             CL_EXPUNGE,\n             1\n          );\n@@ -1304,7 +1304,7 @@ function connect() {\n             $this->marubox = imap_open(\n                $this->fields['host'],\n                $this->fields['login'],\n-               Toolbox::decrypt($this->fields['passwd'], GLPIKEY),\n+               Toolbox::sodiumDecrypt($this->fields['passwd']),\n                CL_EXPUNGE,\n                1,\n                $option"
        },
        {
          "filename": "inc/marketplace/api/plugins.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -64,7 +64,7 @@ function __construct(bool $connect = false) {\n       // add proxy string if configured in glpi\n       if (!empty($CFG_GLPI[\"proxy_name\"])) {\n          $proxy_creds      = !empty($CFG_GLPI[\"proxy_user\"])\n-            ? $CFG_GLPI[\"proxy_user\"].\":\".Toolbox::decrypt($CFG_GLPI[\"proxy_passwd\"], GLPIKEY).\"@\"\n+            ? $CFG_GLPI[\"proxy_user\"].\":\".Toolbox::sodiumDecrypt($CFG_GLPI[\"proxy_passwd\"]).\"@\"\n             : \"\";\n          $proxy_string     = \"http://{$proxy_creds}\".$CFG_GLPI['proxy_name'].\":\".$CFG_GLPI['proxy_port'];\n          $options['proxy'] = $proxy_string;"
        },
        {
          "filename": "inc/rssfeed.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -876,8 +876,7 @@ static function getRSSFeed($url, $cache_duration = DAY_TIMESTAMP) {\n          if (!empty($CFG_GLPI[\"proxy_user\"])) {\n             $prx_opt[CURLOPT_HTTPAUTH]     = CURLAUTH_ANYSAFE;\n             $prx_opt[CURLOPT_PROXYUSERPWD] = $CFG_GLPI[\"proxy_user\"].\":\".\n-                                             Toolbox::decrypt($CFG_GLPI[\"proxy_passwd\"],\n-                                                              GLPIKEY);\n+                                             Toolbox::sodiumDecrypt($CFG_GLPI[\"proxy_passwd\"]);\n          }\n          $feed->set_curl_options($prx_opt);\n       }"
        },
        {
          "filename": "inc/system/requirementsmanager.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -89,6 +89,7 @@ public function getCoreRequirementList(\\DBmysql $db = null): RequirementsList {\n       $requirements[] = new Extension('exif', true);\n       $requirements[] = new Extension('zip', true);\n       $requirements[] = new Extension('bz2', true);\n+      $requirements[] = new Extension('sodium', true);\n \n       if ($db instanceof \\DBmysql) {\n          $requirements[] = new DbEngine($db);"
        },
        {
          "filename": "inc/toolbox.class.php",
          "status": "modified",
          "additions": 61,
          "deletions": 3,
          "patch": "@@ -241,7 +241,13 @@ static function decodeFromUtf8($string, $to_charset = \"ISO-8859-1\") {\n     *\n     * @return string  encrypted string\n    **/\n-   static function encrypt($string, $key) {\n+   static function encrypt($string, $key = null) {\n+      self::deprecated('Use sodiumEncrypt');\n+\n+      if ($key === null) {\n+         $glpikey = new GLPIKey();\n+         $key = $glpikey->getLegacyKey();\n+      }\n \n       $result = '';\n       for ($i=0; $i<strlen($string); $i++) {\n@@ -253,6 +259,40 @@ static function encrypt($string, $key) {\n       return base64_encode($result);\n    }\n \n+   public static function sodiumEncrypt($content, $key = null) {\n+      if ($key === null) {\n+         $key = self::getGlpiSecKey();\n+      }\n+\n+      $nonce = random_bytes(SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES); // NONCE = Number to be used ONCE, for each message\n+      $encrypted = sodium_crypto_aead_xchacha20poly1305_ietf_encrypt(\n+         $content,\n+         $nonce,\n+         $nonce,\n+         $key\n+      );\n+      return base64_encode($nonce . $encrypted);\n+   }\n+\n+   public static function sodiumDecrypt($content, $key = null) {\n+      if ($key === null) {\n+         $key = self::getGlpiSecKey();\n+      }\n+\n+      $content = base64_decode($content);\n+      $nonce = mb_substr($content, 0, SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES, '8bit');\n+      $ciphertext = mb_substr($content, SODIUM_CRYPTO_AEAD_XCHACHA20POLY1305_IETF_NPUBBYTES, null, '8bit');\n+      $plaintext = sodium_crypto_aead_xchacha20poly1305_ietf_decrypt(\n+         $ciphertext,\n+         $nonce,\n+         $nonce,\n+         $key\n+      );\n+      if (!is_string($plaintext)) {\n+         throw new \\RuntimeException('Unable to decrypt content');\n+      }\n+      return $plaintext;\n+   }\n \n    /**\n     * Decrypt a string\n@@ -262,7 +302,13 @@ static function encrypt($string, $key) {\n     *\n     * @return string  decrypted string\n    **/\n-   static function decrypt($string, $key) {\n+   static function decrypt($string, $key = null) {\n+      self::deprecated('Use sodiumDecrypt');\n+\n+      if ($key === null) {\n+         $glpikey = new GLPIKey();\n+         $key = $glpikey->getLegacyKey();\n+      }\n \n       $result = '';\n       $string = base64_decode($string);\n@@ -277,6 +323,18 @@ static function decrypt($string, $key) {\n       return Toolbox::unclean_cross_side_scripting_deep($result);\n    }\n \n+   /**\n+    * Get GLPI security key used for decryptable passwords from file\n+    *\n+    * @throw \\RuntimeException if key file is missing\n+    *\n+    * @return string\n+    */\n+   public static function getGlpiSecKey() {\n+      $glpikey = new GLPIKey();\n+      return $glpikey->get();\n+   }\n+\n \n    /**\n     * Prevent from XSS\n@@ -1614,7 +1672,7 @@ public static function callCurl($url, array $eopts = [], &$msgerr = null) {\n          if (!empty($CFG_GLPI[\"proxy_user\"])) {\n             $opts += [\n                CURLOPT_PROXYAUTH    => CURLAUTH_BASIC,\n-               CURLOPT_PROXYUSERPWD => $CFG_GLPI[\"proxy_user\"] . \":\" . self::decrypt($CFG_GLPI[\"proxy_passwd\"], GLPIKEY),\n+               CURLOPT_PROXYUSERPWD => $CFG_GLPI[\"proxy_user\"] . \":\" . self::sodiumDecrypt($CFG_GLPI[\"proxy_passwd\"]),\n             ];\n          }\n "
        },
        {
          "filename": "inc/update.class.php",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -163,7 +163,8 @@ public function doUpdates($current_version = null) {\n       $updir = __DIR__ . \"/../install/\";\n \n       if (isCommandLine() && version_compare($current_version, '0.72.3', 'lt')) {\n-         die('Upgrade from command line is not supported before 0.72.3!');\n+         echo 'Upgrade from command line is not supported before 0.72.3!';\n+         die(1);\n       }\n \n       // Update process desactivate all plugins\n@@ -511,6 +512,12 @@ public function doUpdates($current_version = null) {\n       $crontask_telemetry->getFromDBbyName(\"Telemetry\", \"telemetry\");\n       $crontask_telemetry->resetDate();\n       $crontask_telemetry->resetState();\n+\n+      //generate security key if missing, and update db\n+      $glpikey = new GLPIKey();\n+      if (!$glpikey->keyExists() && !$glpikey->generate()) {\n+         $this->migration->displayWarning(__('Unable to create security key file!'), true);\n+      }\n    }\n \n    /**"
        },
        {
          "filename": "install/install.php",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -368,6 +368,19 @@ function next_form() {\n       Html::closeForm();\n    }\n \n+   //create security key\n+   $glpikey = new GLPIKey();\n+   $secured = $glpikey->keyExists();\n+   if (!$secured) {\n+      $secured = $glpikey->generate();\n+   }\n+\n+   if (!$secured) {\n+      echo \"<p><strong>\".__('Security key cannot be generated!').\"</strong></p>\";\n+      prev_form($host, $user, $password);\n+      return;\n+   }\n+\n    //Check if the port is in url\n    $hostport = explode(\":\", $host);\n    if (count($hostport) < 2) {\n@@ -521,6 +534,7 @@ function step8() {\n    Session::destroy(); // Remove session data (debug mode for instance) set by web installation\n \n    echo \"<h2>\".__('The installation is finished').\"</h2>\";\n+\n    echo \"<p>\".__('Default logins / passwords are:').\"</p>\";\n    echo \"<p><ul><li> \".__('glpi/glpi for the administrator account').\"</li>\";\n    echo \"<li>\".__('tech/tech for the technician account').\"</li>\";"
        },
        {
          "filename": "install/update_0782_080.php",
          "status": "modified",
          "additions": 4,
          "deletions": 6,
          "patch": "@@ -951,7 +951,7 @@ function update0782to080() {\n             $value = $DB->result($result, 0, 0);\n             if (!empty($value)) {\n                $query = \"UPDATE `glpi_configs`\n-                         SET `proxy_passwd` = '\".addslashes(Toolbox::encrypt($value, GLPIKEY)).\"'\n+                         SET `proxy_passwd` = '\".addslashes(Toolbox::encrypt($value)).\"'\n                          WHERE `id` = '1' \";\n                $DB->queryOrDie($query, \"0.80 update proxy_passwd in glpi_configs\");\n             }\n@@ -973,7 +973,7 @@ function update0782to080() {\n             $value = $DB->result($result, 0, 0);\n             if (!empty($value)) {\n                $query = \"UPDATE `glpi_configs`\n-                         SET `smtp_passwd` = '\".addslashes(Toolbox::encrypt($value, GLPIKEY)).\"'\n+                         SET `smtp_passwd` = '\".addslashes(Toolbox::encrypt($value)).\"'\n                          WHERE `id` = '1' \";\n                $DB->queryOrDie($query, \"0.80 update smtp_passwd in glpi_configs\");\n             }\n@@ -996,8 +996,7 @@ function update0782to080() {\n             while ($data = $DB->fetchAssoc($result)) {\n                if (!empty($data['rootdn_password'])) {\n                   $query = \"UPDATE `glpi_authldaps`\n-                            SET `rootdn_passwd` = '\".addslashes(Toolbox::encrypt($data['rootdn_password'],\n-                                                                                 GLPIKEY)).\"'\n+                            SET `rootdn_passwd` = '\".addslashes(Toolbox::encrypt($data['rootdn_password'])).\"'\n                             WHERE `id` = '\".$data['id'].\"' \";\n                   $DB->queryOrDie($query, \"0.80 update rootdn_passwd in glpi_authldaps\");\n                }\n@@ -1123,8 +1122,7 @@ function update0782to080() {\n             while ($data = $DB->fetchAssoc($result)) {\n                if (!empty($data['password'])) {\n                   $query = \"UPDATE `glpi_mailcollectors`\n-                            SET `passwd` = '\".addslashes(Toolbox::encrypt($data['password'],\n-                                                                          GLPIKEY)).\"'\n+                            SET `passwd` = '\".addslashes(Toolbox::encrypt($data['password'])).\"'\n                             WHERE `id`= '\".$data['id'].\"' \";\n                   $DB->queryOrDie($query, \"0.80 update passwd in glpi_mailcollectors\");\n                }"
        },
        {
          "filename": "install/update_94_95.php",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -1784,6 +1784,24 @@ function update94to95() {\n       );\n    }\n \n+   /** Appliances & webapps */\n+   require __DIR__ . '/update_94_95/appliances.php';\n+   /** /Appliances & webapps */\n+\n+   // ************ Keep it at the end **************\n+   foreach ($ADDTODISPLAYPREF as $type => $tab) {\n+      $rank = 1;\n+      foreach ($tab as $newval) {\n+         $DB->updateOrInsert(\"glpi_displaypreferences\", [\n+            'rank'      => $rank++\n+         ], [\n+            'users_id'  => \"0\",\n+            'itemtype'  => $type,\n+            'num'       => $newval,\n+         ]);\n+      }\n+   }\n+\n    // Add new field states in contract\n    if (!$DB->fieldExists('glpi_states', 'is_visible_contract')) {\n       $migration->addField('glpi_states', 'is_visible_contract', 'bool', ["
        },
        {
          "filename": "status.php",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -104,8 +104,7 @@\n       foreach ($ldap_methods as $method) {\n          echo \" \".$method['name'];\n          if (AuthLDAP::tryToConnectToServer($method, $method[\"rootdn\"],\n-                                            Toolbox::decrypt($method[\"rootdn_passwd\"],\n-                                            GLPIKEY))) {\n+                                            Toolbox::sodiumDecrypt($method[\"rootdn_passwd\"]))) {\n             echo \"_OK\";\n          } else {\n             echo \"_PROBLEM\";"
        },
        {
          "filename": "tests/functionnal/AuthLdap.php",
          "status": "modified",
          "additions": 44,
          "deletions": 22,
          "patch": "@@ -154,28 +154,6 @@ public function testPrepareInputForUpdate() {\n       $result = $ldap->prepareInputForUpdate($input);\n       $this->array($result)->notHasKey('rootdn_passwd');\n \n-      //rootdn_passwd is set with a value (a password, not encrypted)\n-      $password = 'toto';\n-      $input    = ['name' => 'ldap', 'rootdn_passwd' => $password];\n-      $result   = $ldap->prepareInputForUpdate($input);\n-\n-      //Expected value to be encrypted using GLPIKEY key\n-      $expected = \\Toolbox::encrypt(stripslashes($password), GLPIKEY);\n-      $this->string($result['rootdn_passwd'])->isIdenticalTo($expected);\n-\n-      $password = 'tot\\'o';\n-      $input    = ['name' => 'ldap', 'rootdn_passwd' => $password];\n-      $result   = $ldap->prepareInputForUpdate($input);\n-\n-      //Expected value to be encrypted using GLPIKEY key\n-      $expected = \\Toolbox::encrypt(stripslashes($password), GLPIKEY);\n-      $this->string($result['rootdn_passwd'])->isIdenticalTo($expected);\n-\n-      $input['_blank_passwd'] = 1;\n-      $result   = $ldap->prepareInputForUpdate($input);\n-      //rootdn_passwd is set but empty\n-      $this->string($result['rootdn_passwd'])->isEmpty();\n-\n       //Field name finishing with _field : set the value in lower case\n       $input['_login_field'] = 'TEST';\n       $result         = $ldap->prepareInputForUpdate($input);\n@@ -598,4 +576,48 @@ public function testGetFieldValue() {\n       $infos = ['objectguid' => 'value'];\n       $this->string(\\AuthLDAP::getFieldValue($infos, 'objectguid'))->isIdenticalTo('value');\n    }\n+\n+   public function testPassword() {\n+      $ldap = new \\AuthLDAP();\n+      $id = (int)$ldap->add([\n+         'name'        => 'LDAPcrypted',\n+         'is_active'   => 1,\n+         'is_default'  => 0,\n+         'basedn'      => 'ou=people,dc=mycompany',\n+         'login_field' => 'uid',\n+         'phone_field' => 'phonenumber'\n+      ]);\n+      $this->integer($id)->isGreaterThan(0);\n+\n+      //rootdn_passwd is set with a value (a password, not encrypted)\n+      $password = 'toto';\n+      $input    = ['id' => $id, 'name' => 'ldap', 'rootdn_passwd' => $password];\n+      $this->boolean($ldap->update($input))->isTrue();\n+      $this->boolean($ldap->getFromDB($id))->isTrue();\n+\n+      //Expected value to be encrypted using current  key\n+      $this->string(\\Toolbox::sodiumDecrypt($ldap->fields['rootdn_passwd']))->isIdenticalTo($password);\n+\n+      $password = 'tot\\'o';\n+      $input    = ['id' => $id, 'name' => 'ldap', 'rootdn_passwd' => $password];\n+      $this->boolean($ldap->update($input))->isTrue();\n+      $this->boolean($ldap->getFromDB($id))->isTrue();\n+\n+      //Expected value to be encrypted using current key\n+      $this->string(\\Toolbox::sodiumDecrypt($ldap->fields['rootdn_passwd']))->isIdenticalTo($password);\n+\n+      $password = 'tot\\'o';\n+      $input    = ['id' => $id, 'name' => 'ldap', 'rootdn_passwd' => \\Toolbox::addslashes_deep($password)];\n+      $this->boolean($ldap->update($input))->isTrue();\n+      $this->boolean($ldap->getFromDB($id))->isTrue();\n+\n+      //Expected value to be encrypted using current key\n+      $this->string(\\Toolbox::sodiumDecrypt($ldap->fields['rootdn_passwd']))->isIdenticalTo($password);\n+\n+      $input['_blank_passwd'] = 1;\n+      $result   = $ldap->prepareInputForUpdate($input);\n+      //rootdn_passwd is set but empty\n+      $this->string($result['rootdn_passwd'])->isEmpty();\n+\n+   }\n }"
        },
        {
          "filename": "tests/imap/MailCollector.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -116,7 +116,7 @@ public function testPrepareInput() {\n \n       $this->array($this->testedInstance->prepareInput($oinput, 'add'))\n          ->isIdenticalTo([\n-            'passwd'    => \\Toolbox::encrypt($oinput[\"passwd\"], GLPIKEY),\n+            'passwd'    => \\Toolbox::sodiumEncrypt($oinput[\"passwd\"]),\n             'is_active' => true\n          ]);\n \n@@ -369,4 +369,4 @@ public function testCollect() {\n       }\n        */\n    }\n-}\n\\ No newline at end of file\n+}"
        },
        {
          "filename": "tests/units/Toolbox.php",
          "status": "modified",
          "additions": 11,
          "deletions": 8,
          "patch": "@@ -347,18 +347,21 @@ protected function encryptProvider() {\n       ];\n    }\n \n-   /**\n-    * @dataProvider encryptProvider\n-    */\n-   public function testEncrypt($string, $key, $expected) {\n-      $this->string(\\Toolbox::encrypt($string, $key))->isIdenticalTo($expected);\n+   protected function sodiumEncryptProvider() {\n+      return [\n+         ['My string'],\n+         ['keepmysecret'],\n+         ['This is a strng I want to crypt, with some unusual chars like %, \\', @, and so on!']\n+      ];\n    }\n \n    /**\n-    * @dataProvider encryptProvider\n+    * @dataProvider sodiumEncryptProvider\n     */\n-   public function testDecrypt($expected, $key, $string) {\n-      $this->string(\\Toolbox::decrypt($string, $key))->isIdenticalTo($expected);\n+   public function testSodiumEncrypt($string) {\n+      $crypted = \\Toolbox::sodiumEncrypt($string);\n+      $this->string($crypted)->isNotEmpty();\n+      $this->string(\\Toolbox::sodiumDecrypt($crypted))->isIdenticalTo($string);\n    }\n \n    protected function cleanProvider() {"
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 12,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "515f37f98fdfc8fdc1eb2f090252b2f3af1fdfa4",
            "date": "2025-01-14T14:43:36Z",
            "author_login": "ccailly"
          },
          {
            "sha": "9869867f24c899d79e4675ad93131bbb2cba53a2",
            "date": "2025-01-14T14:39:56Z",
            "author_login": "ccailly"
          },
          {
            "sha": "4b9fbaea0bb355b49990ee51c690fed5e7302443",
            "date": "2025-01-14T13:22:29Z",
            "author_login": "SebSept"
          },
          {
            "sha": "78d50b2a0c46bea23fc414f0bb9e4a7c74949ab0",
            "date": "2025-01-14T12:00:37Z",
            "author_login": "AdrienClairembault"
          },
          {
            "sha": "0fa6e4c403f5e2b2b5c26dd8f2137faf6a8af997",
            "date": "2025-01-14T06:57:56Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-327",
    "description": "In GLPI before version 9.5.0, the encryption algorithm used is insecure. The security of the data encrypted relies on the password used, if a user sets a weak/predictable password, an attacker could decrypt data. This is fixed in version 9.5.0 by using a more secure encryption library. The library chosen is sodium.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-09-23T16:15:13.810",
    "last_modified": "2024-11-21T04:56:37.780",
    "fix_date": "2020-05-06T07:50:25Z"
  },
  "references": [
    {
      "url": "https://github.com/glpi-project/glpi/commit/f1ae6c8481e5c19a6f1801a5548cada45702e01a#diff-b5d0ee8c97c7abd7e3fa29b9a27d1780",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-7xwm-4vjr-jvqh",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/commit/f1ae6c8481e5c19a6f1801a5548cada45702e01a#diff-b5d0ee8c97c7abd7e3fa29b9a27d1780",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-7xwm-4vjr-jvqh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.146305",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "glpi",
    "owner": "glpi-project",
    "created_at": "2015-07-16T07:20:21Z",
    "updated_at": "2025-01-14T12:00:43Z",
    "pushed_at": "2025-01-14T12:00:37Z",
    "size": 864638,
    "stars": 4447,
    "forks": 1324,
    "open_issues": 223,
    "watchers": 4447,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0.70/bugfixes",
      "0.71/bugfixes",
      "0.72/bugfixes",
      "0.78/bugfixes",
      "0.80/bugfixes",
      "0.83/bugfixes",
      "0.84/bugfixes",
      "0.85/bugfixes",
      "0.90/bugfixes",
      "9.1/bugfixes",
      "9.2/bugfixes",
      "9.3/bugfixes",
      "9.4/bugfixes",
      "9.5/bugfixes",
      "10.0/bugfixes",
      "main"
    ],
    "languages": {
      "PHP": 24867216,
      "Twig": 1834187,
      "JavaScript": 1339721,
      "SCSS": 362786,
      "Vue": 188168,
      "Shell": 24779,
      "Makefile": 2692,
      "CSS": 1716,
      "Dockerfile": 638
    },
    "commit_activity": {
      "total_commits_last_year": 1737,
      "avg_commits_per_week": 33.40384615384615,
      "days_active_last_year": 259
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:16:26.208966"
  }
}