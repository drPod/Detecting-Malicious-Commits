{
  "cve_id": "CVE-2020-11049",
  "github_data": {
    "repository": "FreeRDP/FreeRDP",
    "fix_commit": "c367f65d42e0d2e1ca248998175180aa9c2eacd0",
    "related_commits": [
      "c367f65d42e0d2e1ca248998175180aa9c2eacd0",
      "c367f65d42e0d2e1ca248998175180aa9c2eacd0"
    ],
    "patch_url": "https://github.com/FreeRDP/FreeRDP/commit/c367f65d42e0d2e1ca248998175180aa9c2eacd0.patch",
    "fix_commit_details": {
      "sha": "c367f65d42e0d2e1ca248998175180aa9c2eacd0",
      "commit_date": "2020-04-06T11:53:28Z",
      "author": {
        "login": "nfedera",
        "type": "User",
        "stats": {
          "total_commits": 323,
          "average_weekly_commits": 0.4562146892655367,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 111
        }
      },
      "commit_message": {
        "title": "Merge pull request #6019 from akallabeth/bound_access_fixes",
        "length": 93,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 798,
        "additions": 419,
        "deletions": 379
      },
      "files": [
        {
          "filename": "libfreerdp/cache/bitmap.c",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -281,11 +281,12 @@ rdpBitmapCache* bitmap_cache_new(rdpSettings* settings)\n \tbitmapCache->settings = settings;\n \tbitmapCache->update = ((freerdp*)settings->instance)->update;\n \tbitmapCache->context = bitmapCache->update->context;\n-\tbitmapCache->maxCells = settings->BitmapCacheV2NumCells;\n-\tbitmapCache->cells = (BITMAP_V2_CELL*)calloc(bitmapCache->maxCells, sizeof(BITMAP_V2_CELL));\n+\tbitmapCache->cells =\n+\t    (BITMAP_V2_CELL*)calloc(settings->BitmapCacheV2NumCells, sizeof(BITMAP_V2_CELL));\n \n \tif (!bitmapCache->cells)\n \t\tgoto fail;\n+\tbitmapCache->maxCells = settings->BitmapCacheV2NumCells;\n \n \tfor (i = 0; i < (int)bitmapCache->maxCells; i++)\n \t{"
        },
        {
          "filename": "libfreerdp/core/autodetect.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -465,6 +465,8 @@ static BOOL autodetect_recv_bandwidth_measure_results(rdpRdp* rdp, wStream* s,\n \t\treturn FALSE;\n \n \tWLog_VRB(AUTODETECT_TAG, \"received Bandwidth Measure Results PDU\");\n+\tif (Stream_GetRemainingLength(s) < 8)\n+\t\treturn -1;\n \tStream_Read_UINT32(s, rdp->autodetect->bandwidthMeasureTimeDelta); /* timeDelta (4 bytes) */\n \tStream_Read_UINT32(s, rdp->autodetect->bandwidthMeasureByteCount); /* byteCount (4 bytes) */\n "
        },
        {
          "filename": "libfreerdp/core/capabilities.c",
          "status": "modified",
          "additions": 316,
          "deletions": 317,
          "patch": "@@ -107,10 +107,15 @@ static const GUID CODEC_GUID_JPEG = {\n };\n #endif\n \n-static void rdp_read_capability_set_header(wStream* s, UINT16* length, UINT16* type)\n+static BOOL rdp_read_capability_set_header(wStream* s, UINT16* length, UINT16* type)\n {\n+\tif (Stream_GetRemainingLength(s) < 4)\n+\t\treturn FALSE;\n \tStream_Read_UINT16(s, *type);   /* capabilitySetType */\n \tStream_Read_UINT16(s, *length); /* lengthCapability */\n+\tif (*length < 4)\n+\t\treturn FALSE;\n+\treturn TRUE;\n }\n \n static void rdp_write_capability_set_header(wStream* s, UINT16 length, UINT16 type)\n@@ -145,13 +150,13 @@ static void rdp_capability_set_finish(wStream* s, UINT16 header, UINT16 type)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_general_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_general_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT16 extraFlags;\n \tBYTE refreshRectSupport;\n \tBYTE suppressOutputSupport;\n \n-\tif (length < 24)\n+\tif (Stream_GetRemainingLength(s) < 20)\n \t\treturn FALSE;\n \n \tif (settings->ServerMode)\n@@ -259,7 +264,7 @@ static BOOL rdp_write_general_capability_set(wStream* s, const rdpSettings* sett\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_general_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_general_capability_set(wStream* s)\n {\n \tUINT16 osMajorType;\n \tUINT16 osMinorType;\n@@ -273,10 +278,10 @@ static BOOL rdp_print_general_capability_set(wStream* s, UINT16 length)\n \tBYTE refreshRectSupport;\n \tBYTE suppressOutputSupport;\n \n-\tif (length < 24)\n+\tif (Stream_GetRemainingLength(s) < 20)\n \t\treturn FALSE;\n \n-\tWLog_INFO(TAG, \"GeneralCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"GeneralCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \tStream_Read_UINT16(s, osMajorType);             /* osMajorType (2 bytes) */\n \tStream_Read_UINT16(s, osMinorType);             /* osMinorType (2 bytes) */\n \tStream_Read_UINT16(s, protocolVersion);         /* protocolVersion (2 bytes) */\n@@ -311,15 +316,15 @@ static BOOL rdp_print_general_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_bitmap_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_bitmap_capability_set(wStream* s, rdpSettings* settings)\n {\n \tBYTE drawingFlags;\n \tUINT16 desktopWidth;\n \tUINT16 desktopHeight;\n \tUINT16 desktopResizeFlag;\n \tUINT16 preferredBitsPerPixel;\n \n-\tif (length < 28)\n+\tif (Stream_GetRemainingLength(s) < 24)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, preferredBitsPerPixel); /* preferredBitsPerPixel (2 bytes) */\n@@ -431,7 +436,7 @@ static BOOL rdp_write_bitmap_capability_set(wStream* s, const rdpSettings* setti\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_bitmap_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_bitmap_capability_set(wStream* s)\n {\n \tUINT16 preferredBitsPerPixel;\n \tUINT16 receive1BitPerPixel;\n@@ -446,9 +451,9 @@ static BOOL rdp_print_bitmap_capability_set(wStream* s, UINT16 length)\n \tBYTE drawingFlags;\n \tUINT16 multipleRectangleSupport;\n \tUINT16 pad2OctetsB;\n-\tWLog_INFO(TAG, \"BitmapCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"BitmapCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 28)\n+\tif (Stream_GetRemainingLength(s) < 24)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, preferredBitsPerPixel);    /* preferredBitsPerPixel (2 bytes) */\n@@ -489,7 +494,7 @@ static BOOL rdp_print_bitmap_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_order_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_order_capability_set(wStream* s, rdpSettings* settings)\n {\n \tint i;\n \tUINT16 orderFlags;\n@@ -498,7 +503,7 @@ static BOOL rdp_read_order_capability_set(wStream* s, UINT16 length, rdpSettings\n \tBOOL BitmapCacheV3Enabled = FALSE;\n \tBOOL FrameMarkerCommandEnabled = FALSE;\n \n-\tif (length < 88)\n+\tif (Stream_GetRemainingLength(s) < 84)\n \t\treturn FALSE;\n \n \tStream_Seek(s, 16);                         /* terminalDescriptor (16 bytes) */\n@@ -606,7 +611,7 @@ static BOOL rdp_write_order_capability_set(wStream* s, const rdpSettings* settin\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_order_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_order_capability_set(wStream* s)\n {\n \tBYTE terminalDescriptor[16];\n \tUINT32 pad4OctetsA;\n@@ -625,9 +630,9 @@ static BOOL rdp_print_order_capability_set(wStream* s, UINT16 length)\n \tUINT16 pad2OctetsD;\n \tUINT16 textANSICodePage;\n \tUINT16 pad2OctetsE;\n-\tWLog_INFO(TAG, \"OrderCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"OrderCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 88)\n+\tif (Stream_GetRemainingLength(s) < 84)\n \t\treturn FALSE;\n \n \tStream_Read(s, terminalDescriptor, 16);         /* terminalDescriptor (16 bytes) */\n@@ -710,10 +715,10 @@ static BOOL rdp_print_order_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_bitmap_cache_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_bitmap_cache_capability_set(wStream* s, rdpSettings* settings)\n {\n \tWINPR_UNUSED(settings);\n-\tif (length < 40)\n+\tif (Stream_GetRemainingLength(s) < 36)\n \t\treturn FALSE;\n \n \tStream_Seek_UINT32(s); /* pad1 (4 bytes) */\n@@ -779,7 +784,7 @@ static BOOL rdp_write_bitmap_cache_capability_set(wStream* s, const rdpSettings*\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_bitmap_cache_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_bitmap_cache_capability_set(wStream* s)\n {\n \tUINT32 pad1, pad2, pad3;\n \tUINT32 pad4, pad5, pad6;\n@@ -789,9 +794,9 @@ static BOOL rdp_print_bitmap_cache_capability_set(wStream* s, UINT16 length)\n \tUINT16 Cache1MaximumCellSize;\n \tUINT16 Cache2Entries;\n \tUINT16 Cache2MaximumCellSize;\n-\tWLog_INFO(TAG, \"BitmapCacheCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"BitmapCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 40)\n+\tif (Stream_GetRemainingLength(s) < 36)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, pad1);                  /* pad1 (4 bytes) */\n@@ -830,10 +835,10 @@ static BOOL rdp_print_bitmap_cache_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_control_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_control_capability_set(wStream* s, rdpSettings* settings)\n {\n \tWINPR_UNUSED(settings);\n-\tif (length < 12)\n+\tif (Stream_GetRemainingLength(s) < 8)\n \t\treturn FALSE;\n \n \tStream_Seek_UINT16(s); /* controlFlags (2 bytes) */\n@@ -870,15 +875,15 @@ static BOOL rdp_write_control_capability_set(wStream* s, const rdpSettings* sett\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_control_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_control_capability_set(wStream* s)\n {\n \tUINT16 controlFlags;\n \tUINT16 remoteDetachFlag;\n \tUINT16 controlInterest;\n \tUINT16 detachInterest;\n-\tWLog_INFO(TAG, \"ControlCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"ControlCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 12)\n+\tif (Stream_GetRemainingLength(s) < 8)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, controlFlags);     /* controlFlags (2 bytes) */\n@@ -901,11 +906,10 @@ static BOOL rdp_print_control_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_window_activation_capability_set(wStream* s, UINT16 length,\n-                                                      rdpSettings* settings)\n+static BOOL rdp_read_window_activation_capability_set(wStream* s, rdpSettings* settings)\n {\n \tWINPR_UNUSED(settings);\n-\tif (length < 12)\n+\tif (Stream_GetRemainingLength(s) < 8)\n \t\treturn FALSE;\n \n \tStream_Seek_UINT16(s); /* helpKeyFlag (2 bytes) */\n@@ -942,15 +946,16 @@ static BOOL rdp_write_window_activation_capability_set(wStream* s, const rdpSett\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_window_activation_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_window_activation_capability_set(wStream* s)\n {\n \tUINT16 helpKeyFlag;\n \tUINT16 helpKeyIndexFlag;\n \tUINT16 helpExtendedKeyFlag;\n \tUINT16 windowManagerKeyFlag;\n-\tWLog_INFO(TAG, \"WindowActivationCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG,\n+\t          \"WindowActivationCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 12)\n+\tif (Stream_GetRemainingLength(s) < 8)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, helpKeyFlag);          /* helpKeyFlag (2 bytes) */\n@@ -973,20 +978,20 @@ static BOOL rdp_print_window_activation_capability_set(wStream* s, UINT16 length\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_pointer_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_pointer_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT16 colorPointerFlag;\n \tUINT16 colorPointerCacheSize;\n \tUINT16 pointerCacheSize;\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, colorPointerFlag);      /* colorPointerFlag (2 bytes) */\n \tStream_Read_UINT16(s, colorPointerCacheSize); /* colorPointerCacheSize (2 bytes) */\n \n \t/* pointerCacheSize is optional */\n-\tif (length >= 10)\n+\tif (Stream_GetRemainingLength(s) >= 2)\n \t\tStream_Read_UINT16(s, pointerCacheSize); /* pointerCacheSize (2 bytes) */\n \telse\n \t\tpointerCacheSize = 0;\n@@ -1038,16 +1043,16 @@ static BOOL rdp_write_pointer_capability_set(wStream* s, const rdpSettings* sett\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_pointer_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_pointer_capability_set(wStream* s)\n {\n \tUINT16 colorPointerFlag;\n \tUINT16 colorPointerCacheSize;\n \tUINT16 pointerCacheSize;\n \n-\tif (length < 10)\n+\tif (Stream_GetRemainingLength(s) < 6)\n \t\treturn FALSE;\n \n-\tWLog_INFO(TAG, \"PointerCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"PointerCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \tStream_Read_UINT16(s, colorPointerFlag);      /* colorPointerFlag (2 bytes) */\n \tStream_Read_UINT16(s, colorPointerCacheSize); /* colorPointerCacheSize (2 bytes) */\n \tStream_Read_UINT16(s, pointerCacheSize);      /* pointerCacheSize (2 bytes) */\n@@ -1066,10 +1071,10 @@ static BOOL rdp_print_pointer_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_share_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_share_capability_set(wStream* s, rdpSettings* settings)\n {\n \tWINPR_UNUSED(settings);\n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Seek_UINT16(s); /* nodeId (2 bytes) */\n@@ -1103,13 +1108,13 @@ static BOOL rdp_write_share_capability_set(wStream* s, const rdpSettings* settin\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_share_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_share_capability_set(wStream* s)\n {\n \tUINT16 nodeId;\n \tUINT16 pad2Octets;\n-\tWLog_INFO(TAG, \"ShareCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"ShareCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, nodeId);     /* nodeId (2 bytes) */\n@@ -1128,10 +1133,10 @@ static BOOL rdp_print_share_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_color_cache_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_color_cache_capability_set(wStream* s, rdpSettings* settings)\n {\n \tWINPR_UNUSED(settings);\n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Seek_UINT16(s); /* colorTableCacheSize (2 bytes) */\n@@ -1164,13 +1169,13 @@ static BOOL rdp_write_color_cache_capability_set(wStream* s, const rdpSettings*\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_color_cache_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_color_cache_capability_set(wStream* s)\n {\n \tUINT16 colorTableCacheSize;\n \tUINT16 pad2Octets;\n-\tWLog_INFO(TAG, \"ColorCacheCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"ColorCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, colorTableCacheSize); /* colorTableCacheSize (2 bytes) */\n@@ -1189,11 +1194,11 @@ static BOOL rdp_print_color_cache_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_sound_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_sound_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT16 soundFlags;\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, soundFlags); /* soundFlags (2 bytes) */\n@@ -1228,13 +1233,13 @@ static BOOL rdp_write_sound_capability_set(wStream* s, const rdpSettings* settin\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_sound_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_sound_capability_set(wStream* s)\n {\n \tUINT16 soundFlags;\n \tUINT16 pad2OctetsA;\n-\tWLog_INFO(TAG, \"SoundCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"SoundCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, soundFlags);  /* soundFlags (2 bytes) */\n@@ -1253,11 +1258,11 @@ static BOOL rdp_print_sound_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_input_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_input_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT16 inputFlags;\n \n-\tif (length < 88)\n+\tif (Stream_GetRemainingLength(s) < 84)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, inputFlags); /* inputFlags (2 bytes) */\n@@ -1356,17 +1361,17 @@ static BOOL rdp_write_input_capability_set(wStream* s, const rdpSettings* settin\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_input_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_input_capability_set(wStream* s)\n {\n \tUINT16 inputFlags;\n \tUINT16 pad2OctetsA;\n \tUINT32 keyboardLayout;\n \tUINT32 keyboardType;\n \tUINT32 keyboardSubType;\n \tUINT32 keyboardFunctionKey;\n-\tWLog_INFO(TAG, \"InputCapabilitySet (length %\" PRIu16 \")\", length);\n+\tWLog_INFO(TAG, \"InputCapabilitySet (length %\" PRIuz \")\", Stream_GetRemainingLength(s));\n \n-\tif (length < 88)\n+\tif (Stream_GetRemainingLength(s) < 84)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, inputFlags);          /* inputFlags (2 bytes) */\n@@ -1394,13 +1399,13 @@ static BOOL rdp_print_input_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_font_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_font_capability_set(wStream* s, rdpSettings* settings)\n {\n \tWINPR_UNUSED(settings);\n-\tif (length > 4)\n+\tif (Stream_GetRemainingLength(s) >= 2)\n \t\tStream_Seek_UINT16(s); /* fontSupportFlags (2 bytes) */\n \n-\tif (length > 6)\n+\tif (Stream_GetRemainingLength(s) >= 2)\n \t\tStream_Seek_UINT16(s); /* pad2Octets (2 bytes) */\n \n \treturn TRUE;\n@@ -1431,16 +1436,16 @@ static BOOL rdp_write_font_capability_set(wStream* s, const rdpSettings* setting\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_font_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_font_capability_set(wStream* s)\n {\n \tUINT16 fontSupportFlags = 0;\n \tUINT16 pad2Octets = 0;\n-\tWLog_INFO(TAG, \"FontCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"FontCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length > 4)\n+\tif (Stream_GetRemainingLength(s) >= 2)\n \t\tStream_Read_UINT16(s, fontSupportFlags); /* fontSupportFlags (2 bytes) */\n \n-\tif (length > 6)\n+\tif (Stream_GetRemainingLength(s) >= 2)\n \t\tStream_Read_UINT16(s, pad2Octets); /* pad2Octets (2 bytes) */\n \n \tWLog_INFO(TAG, \"\\tfontSupportFlags: 0x%04\" PRIX16 \"\", fontSupportFlags);\n@@ -1457,14 +1462,10 @@ static BOOL rdp_print_font_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_brush_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_brush_capability_set(wStream* s, rdpSettings* settings)\n {\n \tWINPR_UNUSED(settings);\n-\tif (length < 8)\n-\t\treturn FALSE;\n-\n-\tStream_Seek_UINT32(s); /* brushSupportLevel (4 bytes) */\n-\treturn TRUE;\n+\treturn Stream_SafeSeek(s, 4); /* brushSupportLevel (4 bytes) */\n }\n \n /**\n@@ -1490,12 +1491,12 @@ static BOOL rdp_write_brush_capability_set(wStream* s, const rdpSettings* settin\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_brush_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_brush_capability_set(wStream* s)\n {\n \tUINT32 brushSupportLevel;\n-\tWLog_INFO(TAG, \"BrushCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"BrushCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, brushSupportLevel); /* brushSupportLevel (4 bytes) */\n@@ -1536,9 +1537,9 @@ static void rdp_write_cache_definition(wStream* s, GLYPH_CACHE_DEFINITION* cache\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_glyph_cache_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_glyph_cache_capability_set(wStream* s, rdpSettings* settings)\n {\n-\tif (length < 52)\n+\tif (Stream_GetRemainingLength(s) < 48)\n \t\treturn FALSE;\n \n \t/* glyphCache (40 bytes) */\n@@ -1596,15 +1597,15 @@ static BOOL rdp_write_glyph_cache_capability_set(wStream* s, const rdpSettings*\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_glyph_cache_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_glyph_cache_capability_set(wStream* s)\n {\n \tGLYPH_CACHE_DEFINITION glyphCache[10];\n \tGLYPH_CACHE_DEFINITION fragCache;\n \tUINT16 glyphSupportLevel;\n \tUINT16 pad2Octets;\n-\tWLog_INFO(TAG, \"GlyphCacheCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"GlyphCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 52)\n+\tif (Stream_GetRemainingLength(s) < 48)\n \t\treturn FALSE;\n \n \t/* glyphCache (40 bytes) */\n@@ -1657,12 +1658,11 @@ static BOOL rdp_print_glyph_cache_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_offscreen_bitmap_cache_capability_set(wStream* s, UINT16 length,\n-                                                           rdpSettings* settings)\n+static BOOL rdp_read_offscreen_bitmap_cache_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT32 offscreenSupportLevel;\n \n-\tif (length < 12)\n+\tif (Stream_GetRemainingLength(s) < 8)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, offscreenSupportLevel);           /* offscreenSupportLevel (4 bytes) */\n@@ -1709,14 +1709,15 @@ static BOOL rdp_write_offscreen_bitmap_cache_capability_set(wStream* s, const rd\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_offscreen_bitmap_cache_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_offscreen_bitmap_cache_capability_set(wStream* s)\n {\n \tUINT32 offscreenSupportLevel;\n \tUINT16 offscreenCacheSize;\n \tUINT16 offscreenCacheEntries;\n-\tWLog_INFO(TAG, \"OffscreenBitmapCacheCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"OffscreenBitmapCacheCapabilitySet (length %\" PRIuz \"):\",\n+\t          Stream_GetRemainingLength(s));\n \n-\tif (length < 12)\n+\tif (Stream_GetRemainingLength(s) < 8)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, offscreenSupportLevel); /* offscreenSupportLevel (4 bytes) */\n@@ -1737,12 +1738,11 @@ static BOOL rdp_print_offscreen_bitmap_cache_capability_set(wStream* s, UINT16 l\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_bitmap_cache_host_support_capability_set(wStream* s, UINT16 length,\n-                                                              rdpSettings* settings)\n+static BOOL rdp_read_bitmap_cache_host_support_capability_set(wStream* s, rdpSettings* settings)\n {\n \tBYTE cacheVersion;\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT8(s, cacheVersion); /* cacheVersion (1 byte) */\n@@ -1782,14 +1782,15 @@ static BOOL rdp_write_bitmap_cache_host_support_capability_set(wStream* s,\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_bitmap_cache_host_support_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_bitmap_cache_host_support_capability_set(wStream* s)\n {\n \tBYTE cacheVersion;\n \tBYTE pad1;\n \tUINT16 pad2;\n-\tWLog_INFO(TAG, \"BitmapCacheHostSupportCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"BitmapCacheHostSupportCapabilitySet (length %\" PRIuz \"):\",\n+\t          Stream_GetRemainingLength(s));\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT8(s, cacheVersion); /* cacheVersion (1 byte) */\n@@ -1833,11 +1834,10 @@ static void rdp_write_bitmap_cache_cell_info(wStream* s, BITMAP_CACHE_V2_CELL_IN\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_bitmap_cache_v2_capability_set(wStream* s, UINT16 length,\n-                                                    rdpSettings* settings)\n+static BOOL rdp_read_bitmap_cache_v2_capability_set(wStream* s, rdpSettings* settings)\n {\n \tWINPR_UNUSED(settings);\n-\tif (length < 40)\n+\tif (Stream_GetRemainingLength(s) < 36)\n \t\treturn FALSE;\n \n \tStream_Seek_UINT16(s); /* cacheFlags (2 bytes) */\n@@ -1892,15 +1892,15 @@ static BOOL rdp_write_bitmap_cache_v2_capability_set(wStream* s, const rdpSettin\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_bitmap_cache_v2_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_bitmap_cache_v2_capability_set(wStream* s)\n {\n \tUINT16 cacheFlags;\n \tBYTE pad2;\n \tBYTE numCellCaches;\n \tBITMAP_CACHE_V2_CELL_INFO bitmapCacheV2CellInfo[5];\n-\tWLog_INFO(TAG, \"BitmapCacheV2CapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"BitmapCacheV2CapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 40)\n+\tif (Stream_GetRemainingLength(s) < 36)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, cacheFlags);   /* cacheFlags (2 bytes) */\n@@ -1942,18 +1942,17 @@ static BOOL rdp_print_bitmap_cache_v2_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_virtual_channel_capability_set(wStream* s, UINT16 length,\n-                                                    rdpSettings* settings)\n+static BOOL rdp_read_virtual_channel_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT32 flags;\n \tUINT32 VCChunkSize;\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, flags); /* flags (4 bytes) */\n \n-\tif (length > 8)\n+\tif (Stream_GetRemainingLength(s) >= 4)\n \t\tStream_Read_UINT32(s, VCChunkSize); /* VCChunkSize (4 bytes) */\n \telse\n \t\tVCChunkSize = 1600;\n@@ -1988,18 +1987,19 @@ static BOOL rdp_write_virtual_channel_capability_set(wStream* s, const rdpSettin\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_virtual_channel_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_virtual_channel_capability_set(wStream* s)\n {\n \tUINT32 flags;\n \tUINT32 VCChunkSize;\n-\tWLog_INFO(TAG, \"VirtualChannelCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG,\n+\t          \"VirtualChannelCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, flags); /* flags (4 bytes) */\n \n-\tif (length > 8)\n+\tif (Stream_GetRemainingLength(s) >= 4)\n \t\tStream_Read_UINT32(s, VCChunkSize); /* VCChunkSize (4 bytes) */\n \telse\n \t\tVCChunkSize = 1600;\n@@ -2018,12 +2018,11 @@ static BOOL rdp_print_virtual_channel_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_draw_nine_grid_cache_capability_set(wStream* s, UINT16 length,\n-                                                         rdpSettings* settings)\n+static BOOL rdp_read_draw_nine_grid_cache_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT32 drawNineGridSupportLevel;\n \n-\tif (length < 12)\n+\tif (Stream_GetRemainingLength(s) < 8)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, drawNineGridSupportLevel);        /* drawNineGridSupportLevel (4 bytes) */\n@@ -2092,14 +2091,15 @@ static void rdp_write_gdiplus_image_cache_properties(wStream* s, UINT16 oiccs, U\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_draw_nine_grid_cache_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_draw_nine_grid_cache_capability_set(wStream* s)\n {\n \tUINT32 drawNineGridSupportLevel;\n \tUINT16 DrawNineGridCacheSize;\n \tUINT16 DrawNineGridCacheEntries;\n-\tWLog_INFO(TAG, \"DrawNineGridCacheCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG,\n+\t          \"DrawNineGridCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 12)\n+\tif (Stream_GetRemainingLength(s) < 8)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, drawNineGridSupportLevel); /* drawNineGridSupportLevel (4 bytes) */\n@@ -2117,13 +2117,12 @@ static BOOL rdp_print_draw_nine_grid_cache_capability_set(wStream* s, UINT16 len\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_draw_gdiplus_cache_capability_set(wStream* s, UINT16 length,\n-                                                       rdpSettings* settings)\n+static BOOL rdp_read_draw_gdiplus_cache_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT32 drawGDIPlusSupportLevel;\n \tUINT32 drawGdiplusCacheLevel;\n \n-\tif (length < 40)\n+\tif (Stream_GetRemainingLength(s) < 36)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, drawGDIPlusSupportLevel); /* drawGDIPlusSupportLevel (4 bytes) */\n@@ -2175,14 +2174,15 @@ static BOOL rdp_write_draw_gdiplus_cache_capability_set(wStream* s, const rdpSet\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_draw_gdiplus_cache_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_draw_gdiplus_cache_capability_set(wStream* s)\n {\n \tUINT32 drawGdiPlusSupportLevel;\n \tUINT32 GdipVersion;\n \tUINT32 drawGdiplusCacheLevel;\n-\tWLog_INFO(TAG, \"DrawGdiPlusCacheCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG,\n+\t          \"DrawGdiPlusCacheCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 40)\n+\tif (Stream_GetRemainingLength(s) < 36)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, drawGdiPlusSupportLevel); /* drawGdiPlusSupportLevel (4 bytes) */\n@@ -2203,12 +2203,11 @@ static BOOL rdp_print_draw_gdiplus_cache_capability_set(wStream* s, UINT16 lengt\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_remote_programs_capability_set(wStream* s, UINT16 length,\n-                                                    rdpSettings* settings)\n+static BOOL rdp_read_remote_programs_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT32 railSupportLevel;\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, railSupportLevel); /* railSupportLevel (4 bytes) */\n@@ -2271,12 +2270,13 @@ static BOOL rdp_write_remote_programs_capability_set(wStream* s, const rdpSettin\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_remote_programs_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_remote_programs_capability_set(wStream* s)\n {\n \tUINT32 railSupportLevel;\n-\tWLog_INFO(TAG, \"RemoteProgramsCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG,\n+\t          \"RemoteProgramsCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, railSupportLevel); /* railSupportLevel (4 bytes) */\n@@ -2293,9 +2293,9 @@ static BOOL rdp_print_remote_programs_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_window_list_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_window_list_capability_set(wStream* s, rdpSettings* settings)\n {\n-\tif (length < 11)\n+\tif (Stream_GetRemainingLength(s) < 7)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, settings->RemoteWndSupportLevel); /* wndSupportLevel (4 bytes) */\n@@ -2329,14 +2329,14 @@ static BOOL rdp_write_window_list_capability_set(wStream* s, const rdpSettings*\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_window_list_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_window_list_capability_set(wStream* s)\n {\n \tUINT32 wndSupportLevel;\n \tBYTE numIconCaches;\n \tUINT16 numIconCacheEntries;\n-\tWLog_INFO(TAG, \"WindowListCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"WindowListCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 11)\n+\tif (Stream_GetRemainingLength(s) < 7)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, wndSupportLevel);     /* wndSupportLevel (4 bytes) */\n@@ -2357,10 +2357,10 @@ static BOOL rdp_print_window_list_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_desktop_composition_capability_set(wStream* s, UINT16 length,\n-                                                        rdpSettings* settings)\n+static BOOL rdp_read_desktop_composition_capability_set(wStream* s, rdpSettings* settings)\n {\n-\tif (length < 6)\n+\tWINPR_UNUSED(settings);\n+\tif (Stream_GetRemainingLength(s) < 2)\n \t\treturn FALSE;\n \n \tStream_Seek_UINT16(s); /* compDeskSupportLevel (2 bytes) */\n@@ -2391,12 +2391,13 @@ static BOOL rdp_write_desktop_composition_capability_set(wStream* s, const rdpSe\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_desktop_composition_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_desktop_composition_capability_set(wStream* s)\n {\n \tUINT16 compDeskSupportLevel;\n-\tWLog_INFO(TAG, \"DesktopCompositionCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG,\n+\t          \"DesktopCompositionCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 6)\n+\tif (Stream_GetRemainingLength(s) < 2)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, compDeskSupportLevel); /* compDeskSupportLevel (2 bytes) */\n@@ -2413,12 +2414,11 @@ static BOOL rdp_print_desktop_composition_capability_set(wStream* s, UINT16 leng\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_multifragment_update_capability_set(wStream* s, UINT16 length,\n-                                                         rdpSettings* settings)\n+static BOOL rdp_read_multifragment_update_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT32 multifragMaxRequestSize;\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, multifragMaxRequestSize); /* MaxRequestSize (4 bytes) */\n@@ -2517,12 +2517,13 @@ static BOOL rdp_write_multifragment_update_capability_set(wStream* s, rdpSetting\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_multifragment_update_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_multifragment_update_capability_set(wStream* s)\n {\n \tUINT32 maxRequestSize;\n-\tWLog_INFO(TAG, \"MultifragmentUpdateCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(\n+\t    TAG, \"MultifragmentUpdateCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, maxRequestSize); /* maxRequestSize (4 bytes) */\n@@ -2539,11 +2540,11 @@ static BOOL rdp_print_multifragment_update_capability_set(wStream* s, UINT16 len\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_large_pointer_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_large_pointer_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT16 largePointerSupportFlags;\n \n-\tif (length < 6)\n+\tif (Stream_GetRemainingLength(s) < 2)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, largePointerSupportFlags); /* largePointerSupportFlags (2 bytes) */\n@@ -2584,12 +2585,12 @@ static BOOL rdp_write_large_pointer_capability_set(wStream* s, const rdpSettings\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_large_pointer_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_large_pointer_capability_set(wStream* s)\n {\n \tUINT16 largePointerSupportFlags;\n-\tWLog_INFO(TAG, \"LargePointerCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"LargePointerCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 6)\n+\tif (Stream_GetRemainingLength(s) < 2)\n \t\treturn FALSE;\n \n \tStream_Read_UINT16(s, largePointerSupportFlags); /* largePointerSupportFlags (2 bytes) */\n@@ -2606,12 +2607,11 @@ static BOOL rdp_print_large_pointer_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_surface_commands_capability_set(wStream* s, UINT16 length,\n-                                                     rdpSettings* settings)\n+static BOOL rdp_read_surface_commands_capability_set(wStream* s, rdpSettings* settings)\n {\n \tUINT32 cmdFlags;\n \n-\tif (length < 12)\n+\tif (Stream_GetRemainingLength(s) < 8)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, cmdFlags); /* cmdFlags (4 bytes) */\n@@ -2649,13 +2649,14 @@ static BOOL rdp_write_surface_commands_capability_set(wStream* s, const rdpSetti\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_surface_commands_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_surface_commands_capability_set(wStream* s)\n {\n \tUINT32 cmdFlags;\n \tUINT32 reserved;\n-\tWLog_INFO(TAG, \"SurfaceCommandsCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG,\n+\t          \"SurfaceCommandsCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 12)\n+\tif (Stream_GetRemainingLength(s) < 8)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, cmdFlags); /* cmdFlags (4 bytes) */\n@@ -2696,9 +2697,11 @@ static char* rdp_get_bitmap_codec_guid_name(const GUID* guid)\n }\n #endif\n \n-static void rdp_read_bitmap_codec_guid(wStream* s, GUID* guid)\n+static BOOL rdp_read_bitmap_codec_guid(wStream* s, GUID* guid)\n {\n \tBYTE g[16];\n+\tif (Stream_GetRemainingLength(s) < 16)\n+\t\treturn FALSE;\n \tStream_Read(s, g, 16);\n \tguid->Data1 = (g[3] << 24) | (g[2] << 16) | (g[1] << 8) | g[0];\n \tguid->Data2 = (g[5] << 8) | g[4];\n@@ -2711,6 +2714,7 @@ static void rdp_read_bitmap_codec_guid(wStream* s, GUID* guid)\n \tguid->Data4[5] = g[13];\n \tguid->Data4[6] = g[14];\n \tguid->Data4[7] = g[15];\n+\treturn TRUE;\n }\n \n static void rdp_write_bitmap_codec_guid(wStream* s, const GUID* guid)\n@@ -2743,54 +2747,52 @@ static void rdp_write_bitmap_codec_guid(wStream* s, const GUID* guid)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_bitmap_codecs_capability_set(wStream* s, UINT16 length, rdpSettings* settings)\n+static BOOL rdp_read_bitmap_codecs_capability_set(wStream* s, rdpSettings* settings)\n {\n \tBYTE codecId;\n \tGUID codecGuid;\n \tRPC_STATUS rpc_status;\n \tBYTE bitmapCodecCount;\n \tUINT16 codecPropertiesLength;\n-\tUINT16 remainingLength;\n+\n \tBOOL guidNSCodec = FALSE;\n \tBOOL guidRemoteFx = FALSE;\n \tBOOL guidRemoteFxImage = FALSE;\n \n-\tif (length < 5)\n+\tif (Stream_GetRemainingLength(s) < 1)\n \t\treturn FALSE;\n \n \tStream_Read_UINT8(s, bitmapCodecCount); /* bitmapCodecCount (1 byte) */\n-\tremainingLength = length - 5;\n \n \twhile (bitmapCodecCount > 0)\n \t{\n-\t\tif (remainingLength < 19)\n+\t\tsize_t rest;\n+\t\twStream sub;\n+\t\tif (!rdp_read_bitmap_codec_guid(s, &codecGuid)) /* codecGuid (16 bytes) */\n+\t\t\treturn FALSE;\n+\t\tif (Stream_GetRemainingLength(s) < 3)\n \t\t\treturn FALSE;\n-\n-\t\trdp_read_bitmap_codec_guid(s, &codecGuid);    /* codecGuid (16 bytes) */\n \t\tStream_Read_UINT8(s, codecId);                /* codecId (1 byte) */\n \t\tStream_Read_UINT16(s, codecPropertiesLength); /* codecPropertiesLength (2 bytes) */\n-\t\tremainingLength -= 19;\n \n-\t\tif (remainingLength < codecPropertiesLength)\n+\t\tStream_StaticInit(&sub, Stream_Pointer(s), codecPropertiesLength);\n+\t\tif (!Stream_SafeSeek(s, codecPropertiesLength))\n \t\t\treturn FALSE;\n \n \t\tif (settings->ServerMode)\n \t\t{\n-\t\t\tUINT32 beg;\n-\t\t\tUINT32 end;\n-\t\t\tbeg = (UINT32)Stream_GetPosition(s);\n-\t\t\tend = beg + codecPropertiesLength;\n-\n \t\t\tif (UuidEqual(&codecGuid, &CODEC_GUID_REMOTEFX, &rpc_status))\n \t\t\t{\n \t\t\t\tUINT32 rfxCapsLength;\n \t\t\t\tUINT32 rfxPropsLength;\n \t\t\t\tUINT32 captureFlags;\n \t\t\t\tguidRemoteFx = TRUE;\n \t\t\t\tsettings->RemoteFxCodecId = codecId;\n-\t\t\t\tStream_Read_UINT32(s, rfxPropsLength); /* length (4 bytes) */\n-\t\t\t\tStream_Read_UINT32(s, captureFlags);   /* captureFlags (4 bytes) */\n-\t\t\t\tStream_Read_UINT32(s, rfxCapsLength);  /* capsLength (4 bytes) */\n+\t\t\t\tif (Stream_GetRemainingLength(&sub) < 12)\n+\t\t\t\t\treturn FALSE;\n+\t\t\t\tStream_Read_UINT32(&sub, rfxPropsLength); /* length (4 bytes) */\n+\t\t\t\tStream_Read_UINT32(&sub, captureFlags);   /* captureFlags (4 bytes) */\n+\t\t\t\tStream_Read_UINT32(&sub, rfxCapsLength);  /* capsLength (4 bytes) */\n \t\t\t\tsettings->RemoteFxCaptureFlags = captureFlags;\n \t\t\t\tsettings->RemoteFxOnly = (captureFlags & CARDP_CAPS_CAPTURE_NON_CAC) ? TRUE : FALSE;\n \n@@ -2804,9 +2806,11 @@ static BOOL rdp_read_bitmap_codecs_capability_set(wStream* s, UINT16 length, rdp\n \t\t\t\t\tUINT16 numIcaps;\n \t\t\t\t\tUINT16 icapLen;\n \t\t\t\t\t/* TS_RFX_CAPS */\n-\t\t\t\t\tStream_Read_UINT16(s, blockType);  /* blockType (2 bytes) */\n-\t\t\t\t\tStream_Read_UINT32(s, blockLen);   /* blockLen (4 bytes) */\n-\t\t\t\t\tStream_Read_UINT16(s, numCapsets); /* numCapsets (2 bytes) */\n+\t\t\t\t\tif (Stream_GetRemainingLength(&sub) < 21)\n+\t\t\t\t\t\treturn FALSE;\n+\t\t\t\t\tStream_Read_UINT16(&sub, blockType);  /* blockType (2 bytes) */\n+\t\t\t\t\tStream_Read_UINT32(&sub, blockLen);   /* blockLen (4 bytes) */\n+\t\t\t\t\tStream_Read_UINT16(&sub, numCapsets); /* numCapsets (2 bytes) */\n \n \t\t\t\t\tif (blockType != 0xCBC0)\n \t\t\t\t\t\treturn FALSE;\n@@ -2818,12 +2822,12 @@ static BOOL rdp_read_bitmap_codecs_capability_set(wStream* s, UINT16 length, rdp\n \t\t\t\t\t\treturn FALSE;\n \n \t\t\t\t\t/* TS_RFX_CAPSET */\n-\t\t\t\t\tStream_Read_UINT16(s, blockType);  /* blockType (2 bytes) */\n-\t\t\t\t\tStream_Read_UINT32(s, blockLen);   /* blockLen (4 bytes) */\n-\t\t\t\t\tStream_Read_UINT8(s, rfxCodecId);  /* codecId (1 byte) */\n-\t\t\t\t\tStream_Read_UINT16(s, capsetType); /* capsetType (2 bytes) */\n-\t\t\t\t\tStream_Read_UINT16(s, numIcaps);   /* numIcaps (2 bytes) */\n-\t\t\t\t\tStream_Read_UINT16(s, icapLen);    /* icapLen (2 bytes) */\n+\t\t\t\t\tStream_Read_UINT16(&sub, blockType);  /* blockType (2 bytes) */\n+\t\t\t\t\tStream_Read_UINT32(&sub, blockLen);   /* blockLen (4 bytes) */\n+\t\t\t\t\tStream_Read_UINT8(&sub, rfxCodecId);  /* codecId (1 byte) */\n+\t\t\t\t\tStream_Read_UINT16(&sub, capsetType); /* capsetType (2 bytes) */\n+\t\t\t\t\tStream_Read_UINT16(&sub, numIcaps);   /* numIcaps (2 bytes) */\n+\t\t\t\t\tStream_Read_UINT16(&sub, icapLen);    /* icapLen (2 bytes) */\n \n \t\t\t\t\tif (blockType != 0xCBC1)\n \t\t\t\t\t\treturn FALSE;\n@@ -2843,12 +2847,14 @@ static BOOL rdp_read_bitmap_codecs_capability_set(wStream* s, UINT16 length, rdp\n \t\t\t\t\t\tBYTE transformBits;\n \t\t\t\t\t\tBYTE entropyBits;\n \t\t\t\t\t\t/* TS_RFX_ICAP */\n-\t\t\t\t\t\tStream_Read_UINT16(s, version);      /* version (2 bytes) */\n-\t\t\t\t\t\tStream_Read_UINT16(s, tileSize);     /* tileSize (2 bytes) */\n-\t\t\t\t\t\tStream_Read_UINT8(s, codecFlags);    /* flags (1 byte) */\n-\t\t\t\t\t\tStream_Read_UINT8(s, colConvBits);   /* colConvBits (1 byte) */\n-\t\t\t\t\t\tStream_Read_UINT8(s, transformBits); /* transformBits (1 byte) */\n-\t\t\t\t\t\tStream_Read_UINT8(s, entropyBits);   /* entropyBits (1 byte) */\n+\t\t\t\t\t\tif (Stream_GetRemainingLength(&sub) < 8)\n+\t\t\t\t\t\t\treturn FALSE;\n+\t\t\t\t\t\tStream_Read_UINT16(&sub, version);      /* version (2 bytes) */\n+\t\t\t\t\t\tStream_Read_UINT16(&sub, tileSize);     /* tileSize (2 bytes) */\n+\t\t\t\t\t\tStream_Read_UINT8(&sub, codecFlags);    /* flags (1 byte) */\n+\t\t\t\t\t\tStream_Read_UINT8(&sub, colConvBits);   /* colConvBits (1 byte) */\n+\t\t\t\t\t\tStream_Read_UINT8(&sub, transformBits); /* transformBits (1 byte) */\n+\t\t\t\t\t\tStream_Read_UINT8(&sub, entropyBits);   /* entropyBits (1 byte) */\n \n \t\t\t\t\t\tif (version == 0x0009)\n \t\t\t\t\t\t{\n@@ -2877,7 +2883,8 @@ static BOOL rdp_read_bitmap_codecs_capability_set(wStream* s, UINT16 length, rdp\n \t\t\t{\n \t\t\t\t/* Microsoft RDP servers ignore CODEC_GUID_IMAGE_REMOTEFX codec properties */\n \t\t\t\tguidRemoteFxImage = TRUE;\n-\t\t\t\tStream_Seek(s, codecPropertiesLength); /* codecProperties */\n+\t\t\t\tif (!Stream_SafeSeek(&sub, codecPropertiesLength)) /* codecProperties */\n+\t\t\t\t\treturn FALSE;\n \t\t\t}\n \t\t\telse if (UuidEqual(&codecGuid, &CODEC_GUID_NSCODEC, &rpc_status))\n \t\t\t{\n@@ -2886,9 +2893,11 @@ static BOOL rdp_read_bitmap_codecs_capability_set(wStream* s, UINT16 length, rdp\n \t\t\t\tBYTE fAllowDynamicFidelity;\n \t\t\t\tguidNSCodec = TRUE;\n \t\t\t\tsettings->NSCodecId = codecId;\n-\t\t\t\tStream_Read_UINT8(s, fAllowDynamicFidelity); /* fAllowDynamicFidelity (1 byte) */\n-\t\t\t\tStream_Read_UINT8(s, fAllowSubsampling);     /* fAllowSubsampling (1 byte) */\n-\t\t\t\tStream_Read_UINT8(s, colorLossLevel);        /* colorLossLevel (1 byte) */\n+\t\t\t\tif (Stream_GetRemainingLength(&sub) < 3)\n+\t\t\t\t\treturn FALSE;\n+\t\t\t\tStream_Read_UINT8(&sub, fAllowDynamicFidelity); /* fAllowDynamicFidelity (1 byte) */\n+\t\t\t\tStream_Read_UINT8(&sub, fAllowSubsampling);     /* fAllowSubsampling (1 byte) */\n+\t\t\t\tStream_Read_UINT8(&sub, colorLossLevel);        /* colorLossLevel (1 byte) */\n \n \t\t\t\tif (colorLossLevel < 1)\n \t\t\t\t\tcolorLossLevel = 1;\n@@ -2902,30 +2911,29 @@ static BOOL rdp_read_bitmap_codecs_capability_set(wStream* s, UINT16 length, rdp\n \t\t\t}\n \t\t\telse if (UuidEqual(&codecGuid, &CODEC_GUID_IGNORE, &rpc_status))\n \t\t\t{\n-\t\t\t\tStream_Seek(s, codecPropertiesLength); /* codecProperties */\n+\t\t\t\tif (!Stream_SafeSeek(&sub, codecPropertiesLength)) /* codecProperties */\n+\t\t\t\t\treturn FALSE;\n \t\t\t}\n \t\t\telse\n \t\t\t{\n-\t\t\t\tStream_Seek(s, codecPropertiesLength); /* codecProperties */\n-\t\t\t}\n-\n-\t\t\tif (Stream_GetPosition(s) != end)\n-\t\t\t{\n-\t\t\t\tWLog_ERR(TAG,\n-\t\t\t\t         \"error while reading codec properties: actual offset: %\" PRIuz\n-\t\t\t\t         \" expected offset: %\" PRIu32 \"\",\n-\t\t\t\t         Stream_GetPosition(s), end);\n-\t\t\t\tStream_SetPosition(s, end);\n+\t\t\t\tif (!Stream_SafeSeek(&sub, codecPropertiesLength)) /* codecProperties */\n+\t\t\t\t\treturn FALSE;\n \t\t\t}\n-\n-\t\t\tremainingLength -= codecPropertiesLength;\n \t\t}\n \t\telse\n \t\t{\n-\t\t\tStream_Seek(s, codecPropertiesLength); /* codecProperties */\n-\t\t\tremainingLength -= codecPropertiesLength;\n+\t\t\tif (!Stream_SafeSeek(&sub, codecPropertiesLength)) /* codecProperties */\n+\t\t\t\treturn FALSE;\n \t\t}\n \n+\t\trest = Stream_GetRemainingLength(&sub);\n+\t\tif (rest > 0)\n+\t\t{\n+\t\t\tWLog_ERR(TAG,\n+\t\t\t         \"error while reading codec properties: actual size: %\" PRIuz\n+\t\t\t         \" expected size: %\" PRIu32 \"\",\n+\t\t\t         rest + codecPropertiesLength, codecPropertiesLength);\n+\t\t}\n \t\tbitmapCodecCount--;\n \t}\n \n@@ -3200,42 +3208,37 @@ static BOOL rdp_write_bitmap_codecs_capability_set(wStream* s, const rdpSettings\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_bitmap_codecs_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_bitmap_codecs_capability_set(wStream* s)\n {\n \tGUID codecGuid;\n \tBYTE bitmapCodecCount;\n \tBYTE codecId;\n \tUINT16 codecPropertiesLength;\n-\tUINT16 remainingLength;\n-\tWLog_INFO(TAG, \"BitmapCodecsCapabilitySet (length %\" PRIu16 \"):\", length);\n \n-\tif (length < 5)\n+\tWLog_INFO(TAG, \"BitmapCodecsCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n+\n+\tif (Stream_GetRemainingLength(s) < 1)\n \t\treturn FALSE;\n \n \tStream_Read_UINT8(s, bitmapCodecCount); /* bitmapCodecCount (1 byte) */\n-\tremainingLength = length - 5;\n \tWLog_INFO(TAG, \"\\tbitmapCodecCount: %\" PRIu8 \"\", bitmapCodecCount);\n \n \twhile (bitmapCodecCount > 0)\n \t{\n-\t\tif (remainingLength < 19)\n+\t\tif (!rdp_read_bitmap_codec_guid(s, &codecGuid)) /* codecGuid (16 bytes) */\n+\t\t\treturn FALSE;\n+\t\tif (Stream_GetRemainingLength(s) < 3)\n \t\t\treturn FALSE;\n-\n-\t\trdp_read_bitmap_codec_guid(s, &codecGuid); /* codecGuid (16 bytes) */\n \t\tStream_Read_UINT8(s, codecId);             /* codecId (1 byte) */\n \t\tWLog_INFO(TAG, \"\\tcodecGuid: 0x\");\n \t\trdp_print_bitmap_codec_guid(&codecGuid);\n \t\tWLog_INFO(TAG, \" (%s)\", rdp_get_bitmap_codec_guid_name(&codecGuid));\n \t\tWLog_INFO(TAG, \"\\tcodecId: %\" PRIu8 \"\", codecId);\n \t\tStream_Read_UINT16(s, codecPropertiesLength); /* codecPropertiesLength (2 bytes) */\n \t\tWLog_INFO(TAG, \"\\tcodecPropertiesLength: %\" PRIu16 \"\", codecPropertiesLength);\n-\t\tremainingLength -= 19;\n \n-\t\tif (remainingLength < codecPropertiesLength)\n+\t\tif (!Stream_SafeSeek(s, codecPropertiesLength)) /* codecProperties */\n \t\t\treturn FALSE;\n-\n-\t\tStream_Seek(s, codecPropertiesLength); /* codecProperties */\n-\t\tremainingLength -= codecPropertiesLength;\n \t\tbitmapCodecCount--;\n \t}\n \n@@ -3250,10 +3253,9 @@ static BOOL rdp_print_bitmap_codecs_capability_set(wStream* s, UINT16 length)\n  * @return if the operation completed successfully\n  */\n \n-static BOOL rdp_read_frame_acknowledge_capability_set(wStream* s, UINT16 length,\n-                                                      rdpSettings* settings)\n+static BOOL rdp_read_frame_acknowledge_capability_set(wStream* s, rdpSettings* settings)\n {\n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tif (settings->ServerMode)\n@@ -3290,12 +3292,13 @@ static BOOL rdp_write_frame_acknowledge_capability_set(wStream* s, const rdpSett\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_frame_acknowledge_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_frame_acknowledge_capability_set(wStream* s)\n {\n \tUINT32 frameAcknowledge;\n-\tWLog_INFO(TAG, \"FrameAcknowledgeCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG,\n+\t          \"FrameAcknowledgeCapabilitySet (length %\" PRIuz \"):\", Stream_GetRemainingLength(s));\n \n-\tif (length < 8)\n+\tif (Stream_GetRemainingLength(s) < 4)\n \t\treturn FALSE;\n \n \tStream_Read_UINT32(s, frameAcknowledge); /* frameAcknowledge (4 bytes) */\n@@ -3304,13 +3307,12 @@ static BOOL rdp_print_frame_acknowledge_capability_set(wStream* s, UINT16 length\n }\n #endif\n \n-static BOOL rdp_read_bitmap_cache_v3_codec_id_capability_set(wStream* s, UINT16 length,\n-                                                             rdpSettings* settings)\n+static BOOL rdp_read_bitmap_cache_v3_codec_id_capability_set(wStream* s, rdpSettings* settings)\n {\n \tBYTE bitmapCacheV3CodecId;\n \n \tWINPR_UNUSED(settings);\n-\tif (length < 5)\n+\tif (Stream_GetRemainingLength(s) < 1)\n \t\treturn FALSE;\n \n \tStream_Read_UINT8(s, bitmapCacheV3CodecId); /* bitmapCacheV3CodecId (1 byte) */\n@@ -3336,12 +3338,13 @@ static BOOL rdp_write_bitmap_cache_v3_codec_id_capability_set(wStream* s,\n }\n \n #ifdef WITH_DEBUG_CAPABILITIES\n-static BOOL rdp_print_bitmap_cache_v3_codec_id_capability_set(wStream* s, UINT16 length)\n+static BOOL rdp_print_bitmap_cache_v3_codec_id_capability_set(wStream* s)\n {\n \tBYTE bitmapCacheV3CodecId;\n-\tWLog_INFO(TAG, \"BitmapCacheV3CodecIdCapabilitySet (length %\" PRIu16 \"):\", length);\n+\tWLog_INFO(TAG, \"BitmapCacheV3CodecIdCapabilitySet (length %\" PRIuz \"):\",\n+\t          Stream_GetRemainingLength(s));\n \n-\tif (length < 5)\n+\tif (Stream_GetRemainingLength(s) < 1)\n \t\treturn FALSE;\n \n \tStream_Read_UINT8(s, bitmapCacheV3CodecId); /* bitmapCacheV3CodecId (1 byte) */\n@@ -3353,193 +3356,191 @@ static BOOL rdp_print_capability_sets(wStream* s, UINT16 numberCapabilities, BOO\n {\n \tUINT16 type;\n \tUINT16 length;\n-\tBYTE *bm, *em;\n \n \twhile (numberCapabilities > 0)\n \t{\n-\t\tStream_GetPointer(s, bm);\n-\t\trdp_read_capability_set_header(s, &length, &type);\n-\t\tWLog_INFO(TAG, \"%s \", receiving ? \"Receiving\" : \"Sending\");\n-\t\tem = bm + length;\n+\t\tsize_t rest;\n+\t\twStream sub;\n+\t\tif (!rdp_read_capability_set_header(s, &length, &type))\n+\t\t\treturn FALSE;\n \n-\t\tif (Stream_GetRemainingLength(s) < (size_t)(length - 4))\n-\t\t{\n-\t\t\tWLog_ERR(TAG, \"error processing stream\");\n+\t\tWLog_INFO(TAG, \"%s \", receiving ? \"Receiving\" : \"Sending\");\n+\t\tStream_StaticInit(&sub, Stream_Pointer(s), length - 4);\n+\t\tif (!Stream_SafeSeek(s, length - 4))\n \t\t\treturn FALSE;\n-\t\t}\n \n \t\tswitch (type)\n \t\t{\n \t\t\tcase CAPSET_TYPE_GENERAL:\n-\t\t\t\tif (!rdp_print_general_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_general_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_BITMAP:\n-\t\t\t\tif (!rdp_print_bitmap_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_bitmap_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_ORDER:\n-\t\t\t\tif (!rdp_print_order_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_order_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_BITMAP_CACHE:\n-\t\t\t\tif (!rdp_print_bitmap_cache_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_bitmap_cache_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_CONTROL:\n-\t\t\t\tif (!rdp_print_control_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_control_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_ACTIVATION:\n-\t\t\t\tif (!rdp_print_window_activation_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_window_activation_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_POINTER:\n-\t\t\t\tif (!rdp_print_pointer_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_pointer_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_SHARE:\n-\t\t\t\tif (!rdp_print_share_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_share_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_COLOR_CACHE:\n-\t\t\t\tif (!rdp_print_color_cache_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_color_cache_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_SOUND:\n-\t\t\t\tif (!rdp_print_sound_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_sound_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_INPUT:\n-\t\t\t\tif (!rdp_print_input_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_input_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_FONT:\n-\t\t\t\tif (!rdp_print_font_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_font_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_BRUSH:\n-\t\t\t\tif (!rdp_print_brush_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_brush_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_GLYPH_CACHE:\n-\t\t\t\tif (!rdp_print_glyph_cache_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_glyph_cache_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_OFFSCREEN_CACHE:\n-\t\t\t\tif (!rdp_print_offscreen_bitmap_cache_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_offscreen_bitmap_cache_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_BITMAP_CACHE_HOST_SUPPORT:\n-\t\t\t\tif (!rdp_print_bitmap_cache_host_support_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_bitmap_cache_host_support_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_BITMAP_CACHE_V2:\n-\t\t\t\tif (!rdp_print_bitmap_cache_v2_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_bitmap_cache_v2_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_VIRTUAL_CHANNEL:\n-\t\t\t\tif (!rdp_print_virtual_channel_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_virtual_channel_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_DRAW_NINE_GRID_CACHE:\n-\t\t\t\tif (!rdp_print_draw_nine_grid_cache_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_draw_nine_grid_cache_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_DRAW_GDI_PLUS:\n-\t\t\t\tif (!rdp_print_draw_gdiplus_cache_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_draw_gdiplus_cache_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_RAIL:\n-\t\t\t\tif (!rdp_print_remote_programs_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_remote_programs_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_WINDOW:\n-\t\t\t\tif (!rdp_print_window_list_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_window_list_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_COMP_DESK:\n-\t\t\t\tif (!rdp_print_desktop_composition_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_desktop_composition_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_MULTI_FRAGMENT_UPDATE:\n-\t\t\t\tif (!rdp_print_multifragment_update_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_multifragment_update_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_LARGE_POINTER:\n-\t\t\t\tif (!rdp_print_large_pointer_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_large_pointer_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_SURFACE_COMMANDS:\n-\t\t\t\tif (!rdp_print_surface_commands_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_surface_commands_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_BITMAP_CODECS:\n-\t\t\t\tif (!rdp_print_bitmap_codecs_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_bitmap_codecs_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_FRAME_ACKNOWLEDGE:\n-\t\t\t\tif (!rdp_print_frame_acknowledge_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_frame_acknowledge_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_BITMAP_CACHE_V3_CODEC_ID:\n-\t\t\t\tif (!rdp_print_bitmap_cache_v3_codec_id_capability_set(s, length))\n+\t\t\t\tif (!rdp_print_bitmap_cache_v3_codec_id_capability_set(&sub))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n@@ -3549,14 +3550,15 @@ static BOOL rdp_print_capability_sets(wStream* s, UINT16 numberCapabilities, BOO\n \t\t\t\tbreak;\n \t\t}\n \n-\t\tif (Stream_Pointer(s) != em)\n+\t\trest = Stream_GetRemainingLength(&sub);\n+\t\tif (rest > 0)\n \t\t{\n-\t\t\tWLog_ERR(TAG,\n-\t\t\t         \"incorrect offset, type:0x%04\" PRIX16 \" actual:%\" PRIuz \" expected:%\" PRIuz \"\",\n-\t\t\t         type, Stream_Pointer(s) - bm, em - bm);\n+\t\t\tWLog_WARN(TAG,\n+\t\t\t          \"incorrect capability offset, type:0x%04\" PRIX16 \" %\" PRIu16\n+\t\t\t          \" bytes expected, %\" PRIuz \"bytes remaining\",\n+\t\t\t          type, length, rest);\n \t\t}\n \n-\t\tStream_SetPointer(s, em);\n \t\tnumberCapabilities--;\n \t}\n \n@@ -3574,11 +3576,16 @@ static BOOL rdp_read_capability_sets(wStream* s, rdpSettings* settings, UINT16 n\n \tstart = Stream_GetPosition(s);\n \twhile (numberCapabilities > 0 && Stream_GetRemainingLength(s) >= 4)\n \t{\n+\t\tsize_t rest;\n \t\tUINT16 type;\n \t\tUINT16 length;\n-\t\tBYTE* em;\n-\t\tBYTE* bm = Stream_Pointer(s);\n-\t\trdp_read_capability_set_header(s, &length, &type);\n+\t\twStream sub;\n+\n+\t\tif (!rdp_read_capability_set_header(s, &length, &type))\n+\t\t\treturn FALSE;\n+\t\tStream_StaticInit(&sub, Stream_Pointer(s), length - 4);\n+\t\tif (!Stream_SafeSeek(s, length - 4))\n+\t\t\treturn FALSE;\n \n \t\tif (type < 32)\n \t\t{\n@@ -3589,128 +3596,120 @@ static BOOL rdp_read_capability_sets(wStream* s, rdpSettings* settings, UINT16 n\n \t\t\tWLog_WARN(TAG, \"not handling capability type %\" PRIu16 \" yet\", type);\n \t\t}\n \n-\t\tem = bm + length;\n-\n-\t\tif (Stream_GetRemainingLength(s) + 4 < ((size_t)length))\n-\t\t{\n-\t\t\tWLog_ERR(TAG, \"error processing stream\");\n-\t\t\treturn FALSE;\n-\t\t}\n-\n \t\ttreated = TRUE;\n \n \t\tswitch (type)\n \t\t{\n \t\t\tcase CAPSET_TYPE_GENERAL:\n-\t\t\t\tif (!rdp_read_general_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_general_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_BITMAP:\n-\t\t\t\tif (!rdp_read_bitmap_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_bitmap_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_ORDER:\n-\t\t\t\tif (!rdp_read_order_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_order_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_POINTER:\n-\t\t\t\tif (!rdp_read_pointer_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_pointer_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_INPUT:\n-\t\t\t\tif (!rdp_read_input_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_input_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_VIRTUAL_CHANNEL:\n-\t\t\t\tif (!rdp_read_virtual_channel_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_virtual_channel_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_SHARE:\n-\t\t\t\tif (!rdp_read_share_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_share_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_COLOR_CACHE:\n-\t\t\t\tif (!rdp_read_color_cache_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_color_cache_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_FONT:\n-\t\t\t\tif (!rdp_read_font_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_font_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_DRAW_GDI_PLUS:\n-\t\t\t\tif (!rdp_read_draw_gdiplus_cache_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_draw_gdiplus_cache_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_RAIL:\n-\t\t\t\tif (!rdp_read_remote_programs_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_remote_programs_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_WINDOW:\n-\t\t\t\tif (!rdp_read_window_list_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_window_list_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_MULTI_FRAGMENT_UPDATE:\n-\t\t\t\tif (!rdp_read_multifragment_update_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_multifragment_update_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_LARGE_POINTER:\n-\t\t\t\tif (!rdp_read_large_pointer_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_large_pointer_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_COMP_DESK:\n-\t\t\t\tif (!rdp_read_desktop_composition_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_desktop_composition_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_SURFACE_COMMANDS:\n-\t\t\t\tif (!rdp_read_surface_commands_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_surface_commands_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_BITMAP_CODECS:\n-\t\t\t\tif (!rdp_read_bitmap_codecs_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_bitmap_codecs_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_FRAME_ACKNOWLEDGE:\n-\t\t\t\tif (!rdp_read_frame_acknowledge_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_frame_acknowledge_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n \n \t\t\tcase CAPSET_TYPE_BITMAP_CACHE_V3_CODEC_ID:\n-\t\t\t\tif (!rdp_read_bitmap_cache_v3_codec_id_capability_set(s, length, settings))\n+\t\t\t\tif (!rdp_read_bitmap_cache_v3_codec_id_capability_set(&sub, settings))\n \t\t\t\t\treturn FALSE;\n \n \t\t\t\tbreak;\n@@ -3728,55 +3727,55 @@ static BOOL rdp_read_capability_sets(wStream* s, rdpSettings* settings, UINT16 n\n \t\t\t\tswitch (type)\n \t\t\t\t{\n \t\t\t\t\tcase CAPSET_TYPE_BITMAP_CACHE:\n-\t\t\t\t\t\tif (!rdp_read_bitmap_cache_capability_set(s, length, settings))\n+\t\t\t\t\t\tif (!rdp_read_bitmap_cache_capability_set(&sub, settings))\n \t\t\t\t\t\t\treturn FALSE;\n \n \t\t\t\t\t\tbreak;\n \n \t\t\t\t\tcase CAPSET_TYPE_BITMAP_CACHE_V2:\n-\t\t\t\t\t\tif (!rdp_read_bitmap_cache_v2_capability_set(s, length, settings))\n+\t\t\t\t\t\tif (!rdp_read_bitmap_cache_v2_capability_set(&sub, settings))\n \t\t\t\t\t\t\treturn FALSE;\n \n \t\t\t\t\t\tbreak;\n \n \t\t\t\t\tcase CAPSET_TYPE_BRUSH:\n-\t\t\t\t\t\tif (!rdp_read_brush_capability_set(s, length, settings))\n+\t\t\t\t\t\tif (!rdp_read_brush_capability_set(&sub, settings))\n \t\t\t\t\t\t\treturn FALSE;\n \n \t\t\t\t\t\tbreak;\n \n \t\t\t\t\tcase CAPSET_TYPE_GLYPH_CACHE:\n-\t\t\t\t\t\tif (!rdp_read_glyph_cache_capability_set(s, length, settings))\n+\t\t\t\t\t\tif (!rdp_read_glyph_cache_capability_set(&sub, settings))\n \t\t\t\t\t\t\treturn FALSE;\n \n \t\t\t\t\t\tbreak;\n \n \t\t\t\t\tcase CAPSET_TYPE_OFFSCREEN_CACHE:\n-\t\t\t\t\t\tif (!rdp_read_offscreen_bitmap_cache_capability_set(s, length, settings))\n+\t\t\t\t\t\tif (!rdp_read_offscreen_bitmap_cache_capability_set(&sub, settings))\n \t\t\t\t\t\t\treturn FALSE;\n \n \t\t\t\t\t\tbreak;\n \n \t\t\t\t\tcase CAPSET_TYPE_SOUND:\n-\t\t\t\t\t\tif (!rdp_read_sound_capability_set(s, length, settings))\n+\t\t\t\t\t\tif (!rdp_read_sound_capability_set(&sub, settings))\n \t\t\t\t\t\t\treturn FALSE;\n \n \t\t\t\t\t\tbreak;\n \n \t\t\t\t\tcase CAPSET_TYPE_CONTROL:\n-\t\t\t\t\t\tif (!rdp_read_control_capability_set(s, length, settings))\n+\t\t\t\t\t\tif (!rdp_read_control_capability_set(&sub, settings))\n \t\t\t\t\t\t\treturn FALSE;\n \n \t\t\t\t\t\tbreak;\n \n \t\t\t\t\tcase CAPSET_TYPE_ACTIVATION:\n-\t\t\t\t\t\tif (!rdp_read_window_activation_capability_set(s, length, settings))\n+\t\t\t\t\t\tif (!rdp_read_window_activation_capability_set(&sub, settings))\n \t\t\t\t\t\t\treturn FALSE;\n \n \t\t\t\t\t\tbreak;\n \n \t\t\t\t\tcase CAPSET_TYPE_DRAW_NINE_GRID_CACHE:\n-\t\t\t\t\t\tif (!rdp_read_draw_nine_grid_cache_capability_set(s, length, settings))\n+\t\t\t\t\t\tif (!rdp_read_draw_nine_grid_cache_capability_set(&sub, settings))\n \t\t\t\t\t\t\treturn FALSE;\n \n \t\t\t\t\t\tbreak;\n@@ -3793,7 +3792,7 @@ static BOOL rdp_read_capability_sets(wStream* s, rdpSettings* settings, UINT16 n\n \t\t\t\tswitch (type)\n \t\t\t\t{\n \t\t\t\t\tcase CAPSET_TYPE_BITMAP_CACHE_HOST_SUPPORT:\n-\t\t\t\t\t\tif (!rdp_read_bitmap_cache_host_support_capability_set(s, length, settings))\n+\t\t\t\t\t\tif (!rdp_read_bitmap_cache_host_support_capability_set(&sub, settings))\n \t\t\t\t\t\t\treturn FALSE;\n \n \t\t\t\t\t\tbreak;\n@@ -3806,12 +3805,13 @@ static BOOL rdp_read_capability_sets(wStream* s, rdpSettings* settings, UINT16 n\n \t\t\t}\n \t\t}\n \n-\t\tif (Stream_Pointer(s) != em)\n+\t\trest = Stream_GetRemainingLength(&sub);\n+\t\tif (rest > 0)\n \t\t{\n \t\t\tWLog_ERR(TAG,\n-\t\t\t         \"incorrect offset, type:0x%04\" PRIX16 \" actual:%\" PRIuz \" expected:%\" PRIuz \"\",\n-\t\t\t         type, Stream_Pointer(s) - bm, em - bm);\n-\t\t\tStream_SetPointer(s, em);\n+\t\t\t         \"incorrect offset, type:0x%04\" PRIX16 \" actual:%\" PRIuz \" expected:%\" PRIu16\n+\t\t\t         \"\",\n+\t\t\t         type, length - rest, length);\n \t\t}\n \n \t\tnumberCapabilities--;\n@@ -3888,7 +3888,6 @@ BOOL rdp_recv_demand_active(rdpRdp* rdp, wStream* s)\n {\n \tUINT16 channelId;\n \tUINT16 pduType;\n-\tUINT16 pduLength;\n \tUINT16 pduSource;\n \tUINT16 length;\n \tUINT16 numberCapabilities;\n@@ -3901,7 +3900,7 @@ BOOL rdp_recv_demand_active(rdpRdp* rdp, wStream* s)\n \tif (freerdp_shall_disconnect(rdp->instance))\n \t\treturn TRUE;\n \n-\tif (!rdp_read_share_control_header(s, &pduLength, &pduType, &pduSource))\n+\tif (!rdp_read_share_control_header(s, NULL, NULL, &pduType, &pduSource))\n \t{\n \t\tWLog_ERR(TAG, \"rdp_read_share_control_header failed\");\n \t\treturn FALSE;"
        },
        {
          "filename": "libfreerdp/core/gcc.c",
          "status": "modified",
          "additions": 23,
          "deletions": 9,
          "patch": "@@ -519,18 +519,27 @@ BOOL gcc_read_server_data_blocks(wStream* s, rdpMcs* mcs, int length)\n \n \twhile (offset < length)\n \t{\n-\t\tholdp = Stream_Pointer(s);\n+\t\tsize_t rest;\n+\t\twStream sub;\n \n \t\tif (!gcc_read_user_data_header(s, &type, &blockLength))\n \t\t{\n \t\t\tWLog_ERR(TAG, \"gcc_read_server_data_blocks: gcc_read_user_data_header failed\");\n \t\t\treturn FALSE;\n \t\t}\n+\t\tholdp = Stream_Pointer(s);\n+\t\tStream_StaticInit(&sub, holdp, blockLength - 4);\n+\t\tif (!Stream_SafeSeek(s, blockLength - 4))\n+\t\t{\n+\t\t\tWLog_ERR(TAG, \"gcc_read_server_data_blocks: stream too short\");\n+\t\t\treturn FALSE;\n+\t\t}\n+\t\toffset += blockLength;\n \n \t\tswitch (type)\n \t\t{\n \t\t\tcase SC_CORE:\n-\t\t\t\tif (!gcc_read_server_core_data(s, mcs))\n+\t\t\t\tif (!gcc_read_server_core_data(&sub, mcs))\n \t\t\t\t{\n \t\t\t\t\tWLog_ERR(TAG, \"gcc_read_server_data_blocks: gcc_read_server_core_data failed\");\n \t\t\t\t\treturn FALSE;\n@@ -539,7 +548,7 @@ BOOL gcc_read_server_data_blocks(wStream* s, rdpMcs* mcs, int length)\n \t\t\t\tbreak;\n \n \t\t\tcase SC_SECURITY:\n-\t\t\t\tif (!gcc_read_server_security_data(s, mcs))\n+\t\t\t\tif (!gcc_read_server_security_data(&sub, mcs))\n \t\t\t\t{\n \t\t\t\t\tWLog_ERR(TAG,\n \t\t\t\t\t         \"gcc_read_server_data_blocks: gcc_read_server_security_data failed\");\n@@ -549,7 +558,7 @@ BOOL gcc_read_server_data_blocks(wStream* s, rdpMcs* mcs, int length)\n \t\t\t\tbreak;\n \n \t\t\tcase SC_NET:\n-\t\t\t\tif (!gcc_read_server_network_data(s, mcs))\n+\t\t\t\tif (!gcc_read_server_network_data(&sub, mcs))\n \t\t\t\t{\n \t\t\t\t\tWLog_ERR(TAG,\n \t\t\t\t\t         \"gcc_read_server_data_blocks: gcc_read_server_network_data failed\");\n@@ -559,7 +568,7 @@ BOOL gcc_read_server_data_blocks(wStream* s, rdpMcs* mcs, int length)\n \t\t\t\tbreak;\n \n \t\t\tcase SC_MCS_MSGCHANNEL:\n-\t\t\t\tif (!gcc_read_server_message_channel_data(s, mcs))\n+\t\t\t\tif (!gcc_read_server_message_channel_data(&sub, mcs))\n \t\t\t\t{\n \t\t\t\t\tWLog_ERR(\n \t\t\t\t\t    TAG,\n@@ -570,7 +579,7 @@ BOOL gcc_read_server_data_blocks(wStream* s, rdpMcs* mcs, int length)\n \t\t\t\tbreak;\n \n \t\t\tcase SC_MULTITRANSPORT:\n-\t\t\t\tif (!gcc_read_server_multitransport_channel_data(s, mcs))\n+\t\t\t\tif (!gcc_read_server_multitransport_channel_data(&sub, mcs))\n \t\t\t\t{\n \t\t\t\t\tWLog_ERR(TAG, \"gcc_read_server_data_blocks: \"\n \t\t\t\t\t              \"gcc_read_server_multitransport_channel_data failed\");\n@@ -584,8 +593,13 @@ BOOL gcc_read_server_data_blocks(wStream* s, rdpMcs* mcs, int length)\n \t\t\t\tbreak;\n \t\t}\n \n-\t\toffset += blockLength;\n-\t\tStream_SetPointer(s, holdp + blockLength);\n+\t\trest = Stream_GetRemainingLength(&sub);\n+\t\tif (rest > 0)\n+\t\t{\n+\t\t\tWLog_WARN(\n+\t\t\t    TAG, \"gcc_read_server_data_blocks: ignoring %\" PRIuz \" bytes with type=%\" PRIu16 \"\",\n+\t\t\t    rest, type);\n+\t\t}\n \t}\n \n \treturn TRUE;\n@@ -610,7 +624,7 @@ BOOL gcc_read_user_data_header(wStream* s, UINT16* type, UINT16* length)\n \tStream_Read_UINT16(s, *type);   /* type */\n \tStream_Read_UINT16(s, *length); /* length */\n \n-\tif (Stream_GetRemainingLength(s) < (size_t)(*length - 4))\n+\tif ((*length < 4) || (Stream_GetRemainingLength(s) < (size_t)(*length - 4)))\n \t\treturn FALSE;\n \n \treturn TRUE;"
        },
        {
          "filename": "libfreerdp/core/orders.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2161,7 +2161,7 @@ static CACHE_BITMAP_V3_ORDER* update_read_cache_bitmap_v3_order(rdpUpdate* updat\n \tStream_Read_UINT16(s, bitmapData->height); /* height (2 bytes) */\n \tStream_Read_UINT32(s, new_len);            /* length (4 bytes) */\n \n-\tif (Stream_GetRemainingLength(s) < new_len)\n+\tif ((new_len == 0) || (Stream_GetRemainingLength(s) < new_len))\n \t\tgoto fail;\n \n \tnew_data = (BYTE*)realloc(bitmapData->data, new_len);"
        },
        {
          "filename": "libfreerdp/core/peer.c",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -348,7 +348,6 @@ static int peer_recv_tpkt_pdu(freerdp_peer* client, wStream* s)\n \trdpRdp* rdp;\n \tUINT16 length;\n \tUINT16 pduType;\n-\tUINT16 pduLength;\n \tUINT16 pduSource;\n \tUINT16 channelId;\n \tUINT16 securityFlags = 0;\n@@ -381,7 +380,8 @@ static int peer_recv_tpkt_pdu(freerdp_peer* client, wStream* s)\n \n \tif (channelId == MCS_GLOBAL_CHANNEL_ID)\n \t{\n-\t\tif (!rdp_read_share_control_header(s, &pduLength, &pduType, &pduSource))\n+\t\tUINT16 pduLength, remain;\n+\t\tif (!rdp_read_share_control_header(s, &pduLength, &remain, &pduType, &pduSource))\n \t\t\treturn -1;\n \n \t\tclient->settings->PduSource = pduSource;\n@@ -403,6 +403,8 @@ static int peer_recv_tpkt_pdu(freerdp_peer* client, wStream* s)\n \t\t\tcase PDU_TYPE_FLOW_RESPONSE:\n \t\t\tcase PDU_TYPE_FLOW_STOP:\n \t\t\tcase PDU_TYPE_FLOW_TEST:\n+\t\t\t\tif (!Stream_SafeSeek(s, remain))\n+\t\t\t\t\treturn -1;\n \t\t\t\tbreak;\n \n \t\t\tdefault:"
        },
        {
          "filename": "libfreerdp/core/rdp.c",
          "status": "modified",
          "additions": 49,
          "deletions": 37,
          "patch": "@@ -102,7 +102,7 @@ const char* DATA_PDU_TYPE_STRINGS[80] = {\n \t\"?\" /* 0x41 - 0x46 */\n };\n \n-static void rdp_read_flow_control_pdu(wStream* s, UINT16* type);\n+static BOOL rdp_read_flow_control_pdu(wStream* s, UINT16* type, UINT16* channel_id);\n static void rdp_write_share_control_header(wStream* s, UINT16 length, UINT16 type,\n                                            UINT16 channel_id);\n static void rdp_write_share_data_header(wStream* s, UINT16 length, BYTE type, UINT32 share_id);\n@@ -143,34 +143,51 @@ void rdp_write_security_header(wStream* s, UINT16 flags)\n \tStream_Write_UINT16(s, 0);     /* flagsHi (unused) */\n }\n \n-BOOL rdp_read_share_control_header(wStream* s, UINT16* length, UINT16* type, UINT16* channel_id)\n+BOOL rdp_read_share_control_header(wStream* s, UINT16* tpktLength, UINT16* remainingLength,\n+                                   UINT16* type, UINT16* channel_id)\n {\n+\tUINT16 len;\n \tif (Stream_GetRemainingLength(s) < 2)\n \t\treturn FALSE;\n \n \t/* Share Control Header */\n-\tStream_Read_UINT16(s, *length); /* totalLength */\n+\tStream_Read_UINT16(s, len); /* totalLength */\n \n \t/* If length is 0x8000 then we actually got a flow control PDU that we should ignore\n \t http://msdn.microsoft.com/en-us/library/cc240576.aspx */\n-\tif (*length == 0x8000)\n+\tif (len == 0x8000)\n \t{\n-\t\trdp_read_flow_control_pdu(s, type);\n+\t\tif (!rdp_read_flow_control_pdu(s, type, channel_id))\n+\t\t\treturn FALSE;\n \t\t*channel_id = 0;\n-\t\t*length = 8; /* Flow control PDU is 8 bytes */\n+\t\tif (tpktLength)\n+\t\t\t*tpktLength = 8; /* Flow control PDU is 8 bytes */\n+\t\tif (remainingLength)\n+\t\t\t*remainingLength = 0;\n \t\treturn TRUE;\n \t}\n \n-\tif (((size_t)*length - 2) > Stream_GetRemainingLength(s))\n+\tif ((len < 4) || ((len - 2) > Stream_GetRemainingLength(s)))\n \t\treturn FALSE;\n \n+\tif (tpktLength)\n+\t\t*tpktLength = len;\n+\n \tStream_Read_UINT16(s, *type); /* pduType */\n \t*type &= 0x0F;                /* type is in the 4 least significant bits */\n \n-\tif (*length > 4)\n+\tif (len > 5)\n+\t{\n \t\tStream_Read_UINT16(s, *channel_id); /* pduSource */\n+\t\tif (remainingLength)\n+\t\t\t*remainingLength = len - 6;\n+\t}\n \telse\n+\t{\n \t\t*channel_id = 0; /* Windows XP can send such short DEACTIVATE_ALL PDUs. */\n+\t\tif (remainingLength)\n+\t\t\t*remainingLength = len - 4;\n+\t}\n \n \treturn TRUE;\n }\n@@ -1094,7 +1111,7 @@ int rdp_recv_out_of_sequence_pdu(rdpRdp* rdp, wStream* s)\n \tUINT16 length;\n \tUINT16 channelId;\n \n-\tif (!rdp_read_share_control_header(s, &length, &type, &channelId))\n+\tif (!rdp_read_share_control_header(s, &length, NULL, &type, &channelId))\n \t\treturn -1;\n \n \tif (type == PDU_TYPE_DATA)\n@@ -1116,7 +1133,7 @@ int rdp_recv_out_of_sequence_pdu(rdpRdp* rdp, wStream* s)\n \t}\n }\n \n-void rdp_read_flow_control_pdu(wStream* s, UINT16* type)\n+BOOL rdp_read_flow_control_pdu(wStream* s, UINT16* type, UINT16* channel_id)\n {\n \t/*\n \t * Read flow control PDU - documented in FlowPDU section in T.128\n@@ -1126,12 +1143,17 @@ void rdp_read_flow_control_pdu(wStream* s, UINT16* type)\n \t * Switched the order of these two fields to match this observation.\n \t */\n \tUINT8 pduType;\n+\tif (!type)\n+\t\treturn FALSE;\n+\tif (Stream_GetRemainingLength(s) < 6)\n+\t\treturn FALSE;\n \tStream_Read_UINT8(s, pduType); /* pduTypeFlow */\n \t*type = pduType;\n-\tStream_Seek_UINT8(s);  /* pad8bits */\n-\tStream_Seek_UINT8(s);  /* flowIdentifier */\n-\tStream_Seek_UINT8(s);  /* flowNumber */\n-\tStream_Seek_UINT16(s); /* pduSource */\n+\tStream_Seek_UINT8(s);               /* pad8bits */\n+\tStream_Seek_UINT8(s);               /* flowIdentifier */\n+\tStream_Seek_UINT8(s);               /* flowNumber */\n+\tStream_Read_UINT16(s, *channel_id); /* pduSource */\n+\treturn TRUE;\n }\n \n /**\n@@ -1265,7 +1287,6 @@ static int rdp_recv_tpkt_pdu(rdpRdp* rdp, wStream* s)\n \tint rc = 0;\n \tUINT16 length;\n \tUINT16 pduType;\n-\tUINT16 pduLength;\n \tUINT16 pduSource;\n \tUINT16 channelId = 0;\n \tUINT16 securityFlags = 0;\n@@ -1319,39 +1340,33 @@ static int rdp_recv_tpkt_pdu(rdpRdp* rdp, wStream* s)\n \t{\n \t\twhile (Stream_GetRemainingLength(s) > 3)\n \t\t{\n-\t\t\tsize_t startheader, endheader, start, end, diff, headerdiff;\n+\t\t\twStream sub;\n+\t\t\tsize_t diff;\n+\t\t\tUINT16 remain;\n \n-\t\t\tstartheader = Stream_GetPosition(s);\n-\t\t\tif (!rdp_read_share_control_header(s, &pduLength, &pduType, &pduSource))\n+\t\t\tif (!rdp_read_share_control_header(s, NULL, &remain, &pduType, &pduSource))\n \t\t\t{\n \t\t\t\tWLog_ERR(TAG, \"rdp_recv_tpkt_pdu: rdp_read_share_control_header() fail\");\n \t\t\t\treturn -1;\n \t\t\t}\n-\t\t\tstart = endheader = Stream_GetPosition(s);\n-\t\t\theaderdiff = endheader - startheader;\n-\t\t\tif (pduLength < headerdiff)\n-\t\t\t{\n-\t\t\t\tWLog_ERR(\n-\t\t\t\t    TAG,\n-\t\t\t\t    \"rdp_recv_tpkt_pdu: rdp_read_share_control_header() invalid pduLength %\" PRIu16,\n-\t\t\t\t    pduLength);\n+\n+\t\t\tStream_StaticInit(&sub, Stream_Pointer(s), remain);\n+\t\t\tif (!Stream_SafeSeek(s, remain))\n \t\t\t\treturn -1;\n-\t\t\t}\n-\t\t\tpduLength -= headerdiff;\n \n \t\t\trdp->settings->PduSource = pduSource;\n \t\t\trdp->inPackets++;\n \n \t\t\tswitch (pduType)\n \t\t\t{\n \t\t\t\tcase PDU_TYPE_DATA:\n-\t\t\t\t\trc = rdp_recv_data_pdu(rdp, s);\n+\t\t\t\t\trc = rdp_recv_data_pdu(rdp, &sub);\n \t\t\t\t\tif (rc < 0)\n \t\t\t\t\t\treturn rc;\n \t\t\t\t\tbreak;\n \n \t\t\t\tcase PDU_TYPE_DEACTIVATE_ALL:\n-\t\t\t\t\tif (!rdp_recv_deactivate_all(rdp, s))\n+\t\t\t\t\tif (!rdp_recv_deactivate_all(rdp, &sub))\n \t\t\t\t\t{\n \t\t\t\t\t\tWLog_ERR(TAG, \"rdp_recv_tpkt_pdu: rdp_recv_deactivate_all() fail\");\n \t\t\t\t\t\treturn -1;\n@@ -1360,14 +1375,14 @@ static int rdp_recv_tpkt_pdu(rdpRdp* rdp, wStream* s)\n \t\t\t\t\tbreak;\n \n \t\t\t\tcase PDU_TYPE_SERVER_REDIRECTION:\n-\t\t\t\t\treturn rdp_recv_enhanced_security_redirection_packet(rdp, s);\n+\t\t\t\t\treturn rdp_recv_enhanced_security_redirection_packet(rdp, &sub);\n \n \t\t\t\tcase PDU_TYPE_FLOW_RESPONSE:\n \t\t\t\tcase PDU_TYPE_FLOW_STOP:\n \t\t\t\tcase PDU_TYPE_FLOW_TEST:\n \t\t\t\t\tWLog_DBG(TAG, \"flow message 0x%04\" PRIX16 \"\", pduType);\n \t\t\t\t\t/* http://msdn.microsoft.com/en-us/library/cc240576.aspx */\n-\t\t\t\t\tif (!Stream_SafeSeek(s, pduLength))\n+\t\t\t\t\tif (!Stream_SafeSeek(&sub, remain))\n \t\t\t\t\t\treturn -1;\n \t\t\t\t\tbreak;\n \n@@ -1376,16 +1391,13 @@ static int rdp_recv_tpkt_pdu(rdpRdp* rdp, wStream* s)\n \t\t\t\t\tbreak;\n \t\t\t}\n \n-\t\t\tend = Stream_GetPosition(s);\n-\t\t\tdiff = end - start;\n-\t\t\tif (diff != pduLength)\n+\t\t\tdiff = Stream_GetRemainingLength(&sub);\n+\t\t\tif (diff > 0)\n \t\t\t{\n \t\t\t\tWLog_WARN(TAG,\n \t\t\t\t          \"pduType %s not properly parsed, %\" PRIdz\n \t\t\t\t          \" bytes remaining unhandled. Skipping.\",\n \t\t\t\t          pdu_type_to_str(pduType), diff);\n-\t\t\t\tif (!Stream_SafeSeek(s, pduLength))\n-\t\t\t\t\treturn -1;\n \t\t\t}\n \t\t}\n \t}"
        },
        {
          "filename": "libfreerdp/core/rdp.h",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -184,7 +184,8 @@ struct rdp_rdp\n FREERDP_LOCAL BOOL rdp_read_security_header(wStream* s, UINT16* flags, UINT16* length);\n FREERDP_LOCAL void rdp_write_security_header(wStream* s, UINT16 flags);\n \n-FREERDP_LOCAL BOOL rdp_read_share_control_header(wStream* s, UINT16* length, UINT16* type,\n+FREERDP_LOCAL BOOL rdp_read_share_control_header(wStream* s, UINT16* tpktLength,\n+                                                 UINT16* remainingLength, UINT16* type,\n                                                  UINT16* channel_id);\n \n FREERDP_LOCAL BOOL rdp_read_share_data_header(wStream* s, UINT16* length, BYTE* type,"
        },
        {
          "filename": "libfreerdp/core/update.c",
          "status": "modified",
          "additions": 11,
          "deletions": 7,
          "patch": "@@ -103,6 +103,9 @@ static BOOL update_read_bitmap_data(rdpUpdate* update, wStream* s, BITMAP_DATA*\n \t{\n \t\tif (!(bitmapData->flags & NO_BITMAP_COMPRESSION_HDR))\n \t\t{\n+\t\t\tif (Stream_GetRemainingLength(s) < 8)\n+\t\t\t\treturn FALSE;\n+\n \t\t\tStream_Read_UINT16(s,\n \t\t\t                   bitmapData->cbCompFirstRowSize); /* cbCompFirstRowSize (2 bytes) */\n \t\t\tStream_Read_UINT16(s,\n@@ -287,14 +290,14 @@ PALETTE_UPDATE* update_read_palette(rdpUpdate* update, wStream* s)\n \treturn NULL;\n }\n \n-static void update_read_synchronize(rdpUpdate* update, wStream* s)\n+static BOOL update_read_synchronize(rdpUpdate* update, wStream* s)\n {\n \tWINPR_UNUSED(update);\n-\tStream_Seek_UINT16(s); /* pad2Octets (2 bytes) */\n-\t                       /**\n-\t                        * The Synchronize Update is an artifact from the\n-\t                        * T.128 protocol and should be ignored.\n-\t                        */\n+\treturn Stream_SafeSeek(s, 2); /* pad2Octets (2 bytes) */\n+\t                              /**\n+\t                               * The Synchronize Update is an artifact from the\n+\t                               * T.128 protocol and should be ignored.\n+\t                               */\n }\n \n static BOOL update_read_play_sound(wStream* s, PLAY_SOUND_UPDATE* play_sound)\n@@ -807,7 +810,8 @@ BOOL update_recv(rdpUpdate* update, wStream* s)\n \t\tbreak;\n \n \t\tcase UPDATE_TYPE_SYNCHRONIZE:\n-\t\t\tupdate_read_synchronize(update, s);\n+\t\t\tif (!update_read_synchronize(update, s))\n+\t\t\t\tgoto fail;\n \t\t\trc = IFCALLRESULT(TRUE, update->Synchronize, context);\n \t\t\tbreak;\n "
        },
        {
          "filename": "libfreerdp/core/window.c",
          "status": "modified",
          "additions": 8,
          "deletions": 3,
          "patch": "@@ -136,9 +136,6 @@ static BOOL update_read_icon_info(wStream* s, ICON_INFO* iconInfo)\n \tStream_Read_UINT16(s, iconInfo->cbBitsMask);  /* cbBitsMask (2 bytes) */\n \tStream_Read_UINT16(s, iconInfo->cbBitsColor); /* cbBitsColor (2 bytes) */\n \n-\tif (Stream_GetRemainingLength(s) < iconInfo->cbBitsMask + iconInfo->cbBitsColor)\n-\t\treturn FALSE;\n-\n \t/* bitsMask */\n \tnewBitMask = (BYTE*)realloc(iconInfo->bitsMask, iconInfo->cbBitsMask);\n \n@@ -150,6 +147,8 @@ static BOOL update_read_icon_info(wStream* s, ICON_INFO* iconInfo)\n \t}\n \n \ticonInfo->bitsMask = newBitMask;\n+\tif (Stream_GetRemainingLength(s) < iconInfo->cbBitsMask)\n+\t\treturn FALSE;\n \tStream_Read(s, iconInfo->bitsMask, iconInfo->cbBitsMask);\n \n \t/* colorTable */\n@@ -184,7 +183,11 @@ static BOOL update_read_icon_info(wStream* s, ICON_INFO* iconInfo)\n \t}\n \n \tif (iconInfo->colorTable)\n+\t{\n+\t\tif (Stream_GetRemainingLength(s) < iconInfo->cbColorTable)\n+\t\t\treturn FALSE;\n \t\tStream_Read(s, iconInfo->colorTable, iconInfo->cbColorTable);\n+\t}\n \n \t/* bitsColor */\n \tnewBitMask = (BYTE*)realloc(iconInfo->bitsColor, iconInfo->cbBitsColor);\n@@ -197,6 +200,8 @@ static BOOL update_read_icon_info(wStream* s, ICON_INFO* iconInfo)\n \t}\n \n \ticonInfo->bitsColor = newBitMask;\n+\tif (Stream_GetRemainingLength(s) < iconInfo->cbBitsColor)\n+\t\treturn FALSE;\n \tStream_Read(s, iconInfo->bitsColor, iconInfo->cbBitsColor);\n \treturn TRUE;\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d0fb99715de93983522517eaf475303f3bcbf213",
            "date": "2025-01-14T11:16:30Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "fca3b3d7db4f343d24c5072f139d88217fbb0ad2",
            "date": "2025-01-14T11:09:22Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "6b577b167ec0b41d73cbb9a2336c245fd5954c0d",
            "date": "2025-01-14T08:59:48Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "5a45a8cad4733ab4337711484210eadb97825944",
            "date": "2025-01-13T17:23:47Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "d938f978a8ce46b66dfc0dc39e6115adcd3f548b",
            "date": "2025-01-14T07:30:15Z",
            "author_login": "akallabeth"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-125",
    "description": "In FreeRDP after 1.1 and before 2.0.0, there is an out-of-bound read of client memory that is then passed on to the protocol parser. This has been patched in 2.0.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-05-07T20:15:12.237",
    "last_modified": "2024-11-21T04:56:40.793",
    "fix_date": "2020-04-06T11:53:28Z"
  },
  "references": [
    {
      "url": "https://github.com/FreeRDP/FreeRDP/commit/c367f65d42e0d2e1ca248998175180aa9c2eacd0",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/issues/6008",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/pull/6019",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/security/advisories/GHSA-wwh7-r2r8-xjpr",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/10/msg00008.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/4379-1/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/4382-1/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/commit/c367f65d42e0d2e1ca248998175180aa9c2eacd0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/issues/6008",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/pull/6019",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/security/advisories/GHSA-wwh7-r2r8-xjpr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/10/msg00008.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/4379-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/4382-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:44.980566",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "FreeRDP",
    "owner": "FreeRDP",
    "created_at": "2011-06-30T19:14:15Z",
    "updated_at": "2025-01-14T11:51:38Z",
    "pushed_at": "2025-01-14T11:16:30Z",
    "size": 68011,
    "stars": 11214,
    "forks": 14938,
    "open_issues": 248,
    "watchers": 11214,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "stable-1.0",
      "stable-1.1",
      "stable-2.0"
    ],
    "languages": {
      "C": 17349509,
      "C++": 685511,
      "CMake": 627854,
      "Objective-C": 540407,
      "Java": 373726,
      "HTML": 99135,
      "Shell": 51324,
      "Python": 46681,
      "Lua": 27393,
      "Roff": 26338,
      "Perl": 8044,
      "C#": 5756,
      "CSS": 5696,
      "Makefile": 2420,
      "Rich Text Format": 937
    },
    "commit_activity": {
      "total_commits_last_year": 2287,
      "avg_commits_per_week": 43.98076923076923,
      "days_active_last_year": 268
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:01:37.323973"
  }
}