{
  "cve_id": "CVE-2020-11060",
  "github_data": {
    "repository": "glpi-project/glpi",
    "fix_commit": "ad748d59c94da177a3ed25111c453902396f320c",
    "related_commits": [
      "ad748d59c94da177a3ed25111c453902396f320c",
      "ad748d59c94da177a3ed25111c453902396f320c"
    ],
    "patch_url": "https://github.com/glpi-project/glpi/commit/ad748d59c94da177a3ed25111c453902396f320c.patch",
    "fix_commit_details": {
      "sha": "ad748d59c94da177a3ed25111c453902396f320c",
      "commit_date": "2020-04-28T06:08:02Z",
      "author": {
        "login": "trasher",
        "type": "User",
        "stats": {
          "total_commits": 2845,
          "average_weekly_commits": 2.602927721866423,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 379
        }
      },
      "commit_message": {
        "title": "Drop xml backup; check new versions from config",
        "length": 61,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 850,
        "additions": 41,
        "deletions": 809
      },
      "files": [
        {
          "filename": "front/backup.php",
          "status": "removed",
          "additions": 0,
          "deletions": 700,
          "patch": "@@ -1,700 +0,0 @@\n-<?php\n-/**\n- * ---------------------------------------------------------------------\n- * GLPI - Gestionnaire Libre de Parc Informatique\n- * Copyright (C) 2015-2018 Teclib' and contributors.\n- *\n- * http://glpi-project.org\n- *\n- * based on GLPI - Gestionnaire Libre de Parc Informatique\n- * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n- *\n- * ---------------------------------------------------------------------\n- *\n- * LICENSE\n- *\n- * This file is part of GLPI.\n- *\n- * GLPI is free software; you can redistribute it and/or modify\n- * it under the terms of the GNU General Public License as published by\n- * the Free Software Foundation; either version 2 of the License, or\n- * (at your option) any later version.\n- *\n- * GLPI is distributed in the hope that it will be useful,\n- * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n- * GNU General Public License for more details.\n- *\n- * You should have received a copy of the GNU General Public License\n- * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n- * ---------------------------------------------------------------------\n- */\n-\n-include ('../inc/includes.php');\n-\n-if (isset($_POST['check_version'])) {\n-   Session::checkRight('backup', Backup::CHECKUPDATE);\n-   Toolbox::checkNewVersionAvailable(0, true);\n-   Html::back();\n-}\n-\n-Session::checkRight(\"backup\", READ);\n-\n-Html::header(__('Maintenance'), $_SERVER['PHP_SELF'], \"admin\", \"backup\");\n-\n-$max_time = min(get_cfg_var(\"max_execution_time\"), get_cfg_var(\"max_input_time\"));\n-\n-if ($max_time == 0) {\n-   $defaulttimeout  = 60;\n-   $defaultrowlimit = 5;\n-\n-} else if ($max_time > 5) {\n-   $defaulttimeout  = $max_time-2;\n-   $defaultrowlimit = 5;\n-\n-} else {\n-   $defaulttimeout  = max(1, $max_time-2);\n-   $defaultrowlimit = 2;\n-}\n-\n-\n-/**\n- * Generate an XML backup file of the database\n- * @global DB $DB\n- */\n-function xmlbackup() {\n-   global $CFG_GLPI, $DB;\n-\n-   //on parcoure la DB et on liste tous les noms des tables dans $table\n-   //on incremente $query[] de \"select * from $table\"  pour chaque occurence de $table\n-\n-   $result = $DB->listTables();\n-   $i      = 0;\n-   while ($line = $result->next()) {\n-      $table = $line['TABLE_NAME'];\n-\n-      $query[$i] = \"SELECT *\n-                    FROM `$table`\";\n-      $i++;\n-   }\n-\n-   // Filename\n-   $time_file = date(\"Y-m-d-H-i\");\n-   $filename = GLPI_DUMP_DIR . \"/glpi-backup-\" . GLPI_VERSION . \"-$time_file.xml\";\n-\n-   $A = new XML();\n-\n-   // Your query\n-   $A->SqlString = $query;\n-\n-   //File path\n-   $A->FilePath = $filename;\n-\n-   // Define layout type\n-   $A->Type = 4;\n-\n-   // Generate the XML file\n-   $A->DoXML();\n-\n-   // In case of error, display it\n-   if ($A->IsError == 1) {\n-      printf(__('ERROR:'), $A->ErrorString);\n-   }\n-}\n-\n-/**\n- * Init time to computer time spend\n- * @global type $TPSDEB\n- * @global int $TPSCOUR\n- */\n-function init_time() {\n-   global $TPSDEB, $TPSCOUR;\n-\n-   list($usec,$sec) = explode(\" \", microtime());\n-   $TPSDEB          = $sec;\n-   $TPSCOUR         = 0;\n-}\n-\n-/**\n- * Get current time\n- * @global type $TPSDEB\n- * @global type $TPSCOUR\n- */\n-function current_time() {\n-   global $TPSDEB, $TPSCOUR;\n-\n-   list($usec,$sec) = explode(\" \", microtime());\n-   $TPSFIN          = $sec;\n-   if (round($TPSFIN-$TPSDEB, 1) >= $TPSCOUR+1) {//une seconde de plus\n-      $TPSCOUR = round($TPSFIN-$TPSDEB, 1);\n-   }\n-}\n-\n-/**\n- * Get data of a table\n- * @param DB $DB\n- * @param string $table table name\n- * @param integer $from FROM xxx\n- * @param integer $limit LIMIT xxx\n- * @return string SQL query \"INSERT INTO...\"\n- */\n-function get_content($DB, $table, $from, $limit) {\n-\n-   $content = \"\";\n-\n-   $iterator = $DB->request($table, ['START' => $from, 'LIMIT' => $limit]);\n-\n-   if ($iterator->count()) {\n-\n-      while ($row = $iterator->next()) {\n-         $insert = \"INSERT INTO `$table` VALUES (\";\n-\n-         foreach ($row as $field_key => $field_val) {\n-            if (is_null($field_val)) {\n-               $insert .= \"NULL,\";\n-            } else if ($field_val != \"\") {\n-               $insert .= \"'\" . addslashes($field_val) . \"',\";\n-            } else {\n-               $insert .= \"'',\";\n-            }\n-         }\n-         $insert = preg_replace(\"/,$/\", \"\", $insert);\n-         $insert .= \");\\n\";\n-         $content .= $insert;\n-      }\n-   }\n-   return $content;\n-}\n-\n-/**  Get structure of a table\n- *\n- * @param $DB     DB object\n- * @param $table  table name\n-**/\n-function get_def($DB, $table) {\n-\n-   $def  = \"### Dump table $table\\n\\n\";\n-   $def .= \"DROP TABLE IF EXISTS `$table`;\\n\";\n-\n-   $query  = \"SHOW CREATE TABLE `$table`\";\n-   $result = $DB->query($query);\n-   $DB->query(\"SET SESSION sql_quote_show_create = 1\");\n-   $row = $DB->fetch_row($result);\n-\n-   $def .= preg_replace(\"/AUTO_INCREMENT=\\w+/i\", \"\", $row[1]);\n-   $def .= \";\";\n-   return $def.\"\\n\\n\";\n-}\n-\n-\n-/**  Restore a mysql dump\n- *\n- * @param $DB        DB object\n- * @param $dumpFile  dump file\n- * @param $duree     max delay before refresh\n-**/\n-function restoreMySqlDump($DB, $dumpFile, $duree) {\n-   global $DB, $TPSCOUR, $offset, $cpt;\n-\n-   // $dumpFile, fichier source\n-   // $duree=timeout pour changement de page (-1 = aucun)\n-\n-   // Desactivation pour empecher les addslashes au niveau de la creation des tables\n-   // En plus, au niveau du dump on considere qu'on est bon\n-   // set_magic_quotes_runtime(0);\n-\n-   if (!file_exists($dumpFile)) {\n-      echo sprintf(__('File %s not found.'), $dumpFile).\"<br>\";\n-      return false;\n-   }\n-   if (substr($dumpFile, -2) == \"gz\") {\n-      $fileHandle = gzopen($dumpFile, \"rb\");\n-   } else {\n-      $fileHandle = fopen($dumpFile, \"rb\");\n-   }\n-\n-   if (!$fileHandle) {\n-      //TRASN: %s is the name of the file\n-      echo sprintf(__('Unauthorized access to the file %s'), $dumpFile).\"<br>\";\n-      return false;\n-   }\n-\n-   if ($offset != 0) {\n-      if (substr($dumpFile, -2) == \"gz\") {\n-         if (gzseek($fileHandle, $offset, SEEK_SET) != 0) { //erreur\n-            //TRANS: %s is the number of the byte\n-            printf(__(\"Unable to find the byte %s\"), Html::formatNumber($offset, false, 0));\n-            echo \"<br>\";\n-            return false;\n-         }\n-      } else {\n-         if (fseek($fileHandle, $offset, SEEK_SET) != 0) { //erreur\n-            //TRANS: %s is the number of the byte\n-            printf(__(\"Unable to find the byte %s\"), Html::formatNumber($offset, false, 0));\n-            echo \"<br>\";\n-            return false;\n-         }\n-      }\n-      Html::glpi_flush();\n-   }\n-\n-   $formattedQuery = \"\";\n-\n-   if (substr($dumpFile, -2) == \"gz\") {\n-      while (!gzeof($fileHandle)) {\n-         current_time();\n-         if (($duree > 0)\n-             && ($TPSCOUR >= $duree)) { //on atteint la fin du temps imparti\n-            return true;\n-         }\n-\n-         // specify read length to be able to read long lines\n-         $buffer = gzgets($fileHandle, 102400);\n-\n-         // do not strip comments due to problems when # in begin of a data line\n-         $formattedQuery .= $buffer;\n-\n-         if (substr(rtrim($formattedQuery), -1) == \";\") {\n-            // Do not use the $DB->query\n-            if ($DB->query($formattedQuery)) { //if no success continue to concatenate\n-               $offset         = gztell($fileHandle);\n-               $formattedQuery = \"\";\n-               $cpt++;\n-            }\n-         }\n-      }\n-   } else {\n-      while (!feof($fileHandle)) {\n-         current_time();\n-         if (($duree > 0)\n-               && ($TPSCOUR >= $duree)) { //on atteint la fin du temps imparti\n-            return true;\n-         }\n-\n-         // specify read length to be able to read long lines\n-         $buffer = fgets($fileHandle, 102400);\n-\n-         // do not strip comments due to problems when # in begin of a data line\n-         $formattedQuery .= $buffer;\n-\n-         if (substr(rtrim($formattedQuery), -1) == \";\") {\n-            // Do not use the $DB->query\n-            if ($DB->query($formattedQuery)) { //if no success continue to concatenate\n-               $offset         = ftell($fileHandle);\n-               $formattedQuery = \"\";\n-               $cpt++;\n-            }\n-         }\n-      }\n-   }\n-\n-   if ($DB->error) {\n-      echo \"<hr>\";\n-      //TRANS: %s is the SQL query which generates the error\n-      printf(__(\"SQL error starting from %s\"), \"[$formattedQuery]\");\n-      echo \"<br>\".$DB->error().\"<hr>\";\n-   }\n-\n-   if (substr($dumpFile, -2) == \"gz\") {\n-      gzclose($fileHandle);\n-   } else {\n-      fclose($fileHandle);\n-   }\n-   $offset = -1;\n-   return true;\n-}\n-\n-\n-/**  Backup a glpi DB\n- *\n- * @param $DB        DB object\n- * @param $dumpFile  dump file\n- * @param $duree     max delay before refresh\n- * @param $rowlimit  rowlimit to backup in one time\n-**/\n-function backupMySql($DB, $dumpFile, $duree, $rowlimit) {\n-   global $TPSCOUR, $offsettable, $offsetrow, $cpt;\n-\n-   // $dumpFile, fichier source\n-   // $duree=timeout pour changement de page (-1 = aucun)\n-\n-   if (function_exists('gzopen')) {\n-      $fileHandle = gzopen($dumpFile, \"a\");\n-   } else {\n-      $fileHandle = gzopen64($dumpFile, \"a\");\n-   }\n-\n-   if (!$fileHandle) {\n-      //TRANS: %s is the name of the file\n-      echo sprintf(__('Unauthorized access to the file %s'), $dumpFile).\"<br>\";\n-      return false;\n-   }\n-\n-   if ($offsettable == 0 && $offsetrow == -1) {\n-      $time_file = date(\"Y-m-d-H-i\");\n-      $cur_time  = date(\"Y-m-d H:i\");\n-      $todump    = \"#GLPI Dump database on $cur_time\\n\";\n-      gzwrite ($fileHandle, $todump);\n-   }\n-\n-   $result = $DB->listTables();\n-   $numtab = 0;\n-   while ($t = $result->next()) {\n-      $tables[$numtab] = $t['TABLE_NAME'];\n-      $numtab++;\n-   }\n-\n-   for (; $offsettable<$numtab; $offsettable++) {\n-      // Dump de la structure table\n-      if ($offsetrow == -1) {\n-         $todump = \"\\n\".get_def($DB, $tables[$offsettable]);\n-         gzwrite ($fileHandle, $todump);\n-         $offsetrow++;\n-         $cpt++;\n-      }\n-      current_time();\n-      if (($duree > 0)\n-          && ($TPSCOUR >= $duree)) { //on atteint la fin du temps imparti\n-         return true;\n-      }\n-      $fin = 0;\n-      while (!$fin) {\n-         $todump    = get_content($DB, $tables[$offsettable], $offsetrow, $rowlimit);\n-         $rowtodump = substr_count($todump, \"INSERT INTO\");\n-\n-         if ($rowtodump > 0) {\n-            gzwrite ($fileHandle, $todump);\n-            $cpt       += $rowtodump;\n-            $offsetrow += $rowlimit;\n-            if ($rowtodump<$rowlimit) {\n-               $fin = 1;\n-            }\n-            current_time();\n-            if (($duree > 0)\n-                && ($TPSCOUR >= $duree)) { //on atteint la fin du temps imparti\n-               return true;\n-            }\n-\n-         } else {\n-            $fin       = 1;\n-            $offsetrow = -1;\n-         }\n-      }\n-\n-      if ($fin) {\n-         $offsetrow = -1;\n-      }\n-      current_time();\n-      if (($duree > 0)\n-          && ($TPSCOUR >= $duree)) { //on atteint la fin du temps imparti\n-         return true;\n-      }\n-   }\n-\n-   if ($DB->error()) {\n-      echo \"<hr>\";\n-      //TRANS: %s is the SQL query which generates the error\n-      printf(__(\"SQL error starting from %s\"), \"[$formattedQuery]\");\n-      echo \"<br>\".$DB->error().\"<hr>\";\n-   }\n-   $offsettable = -1;\n-   gzclose($fileHandle);\n-   return true;\n-}\n-\n-\n-// #################\" DUMP sql#################################\n-\n-if (isset($_GET[\"dump\"]) && $_GET[\"dump\"] != \"\") {\n-   $time_file = date(\"Y-m-d-H-i\");\n-   $cur_time  = date(\"Y-m-d H:i\");\n-   $filename  = GLPI_DUMP_DIR . \"/glpi-backup-\".GLPI_VERSION.\"-$time_file.sql.gz\";\n-\n-   if (!isset($_GET[\"duree\"]) && is_file($filename)) {\n-      echo \"<div class='center'>\".__('The file already exists').\"</div>\";\n-\n-   } else {\n-      init_time(); //initialise le temps\n-      //debut de fichier\n-\n-      if (!isset($_GET[\"offsettable\"])) {\n-         $offsettable = 0;\n-      } else {\n-         $offsettable = $_GET[\"offsettable\"];\n-      }\n-\n-      //debut de fichier\n-      if (!isset($_GET[\"offsetrow\"])) {\n-         $offsetrow = -1;\n-      } else {\n-         $offsetrow = $_GET[\"offsetrow\"];\n-      }\n-\n-      //timeout de 5 secondes par defaut, -1 pour utiliser sans timeout\n-      if (!isset($_GET[\"duree\"])) {\n-         $duree = $defaulttimeout;\n-      } else {\n-         $duree = $_GET[\"duree\"];\n-      }\n-\n-      //Limite de lignes a dumper a chaque fois\n-      if (!isset($_GET[\"rowlimit\"])) {\n-         $rowlimit = $defaultrowlimit;\n-      } else {\n-         $rowlimit = $_GET[\"rowlimit\"];\n-      }\n-\n-      //si le nom du fichier n'est pas en parametre le mettre ici\n-      if (!isset($_GET[\"fichier\"])) {\n-         $fichier = $filename;\n-      } else {\n-         $fichier = $_GET[\"fichier\"];\n-      }\n-\n-      $tot = $DB->listTables()->count();\n-      if (isset($offsettable)) {\n-         if ($offsettable >= 0) {\n-            $percent = min(100, round(100*$offsettable/$tot, 0));\n-         } else {\n-            $percent = 100;\n-         }\n-      } else {\n-         $percent = 0;\n-      }\n-\n-      if ($percent >= 0) {\n-         Html::displayProgressBar(400, $percent);\n-         echo '<br>';\n-      }\n-\n-      if ($offsettable >= 0) {\n-         if (backupMySql($DB, $fichier, $duree, $rowlimit)) {\n-            echo \"<div class='center spaced'>\".\n-                 \"<a href=\\\"backup.php?dump=1&duree=$duree&rowlimit=$rowlimit&offsetrow=\".\n-                    \"$offsetrow&offsettable=$offsettable&cpt=$cpt&fichier=$fichier\\\">\".\n-                    __('Automatic redirection, else click').\"</a>\";\n-            echo \"<script type='text/javascript'>\" .\n-                \"window.location=\\\"backup.php?dump=1&duree=$duree&rowlimit=\".\n-                     \"$rowlimit&offsetrow=$offsetrow&offsettable=$offsettable&cpt=$cpt&fichier=\".\n-                     \"$fichier\\\";</script></div>\";\n-            Html::glpi_flush();\n-            exit;\n-         }\n-      }\n-   }\n-}\n-\n-\n-// ##############################   fin dump sql########################\"\"\"\"\n-\n-\n-// ################################## dump XML #############################\n-\n-if (isset($_GET[\"xmlnow\"]) && ($_GET[\"xmlnow\"] != \"\")) {\n-   xmlbackup();\n-}\n-\n-// ################################## fin dump XML #############################\n-\n-if (isset($_GET[\"file\"]) && ($_GET[\"file\"] != \"\") && is_file(GLPI_DUMP_DIR . \"/\" . $_GET[\"file\"])) {\n-   $filepath = realpath(GLPI_DUMP_DIR . \"/\" . $_GET['file']);\n-   if (is_file($filepath) && Toolbox::startsWith($filepath, GLPI_DUMP_DIR)) {\n-      $_SESSION['TRY_OLD_CONFIG_FIRST'] = true;\n-      init_time(); //initialise le temps\n-\n-      //debut de fichier\n-      if (!isset($_GET[\"offset\"])) {\n-         $offset = 0;\n-      } else {\n-         $offset = $_GET[\"offset\"];\n-      }\n-\n-      //timeout de 5 secondes par defaut, -1 pour utiliser sans timeout\n-      if (!isset($_GET[\"duree\"])) {\n-         $duree = $defaulttimeout;\n-      } else {\n-         $duree = $_GET[\"duree\"];\n-      }\n-\n-      $fsize = filesize($filepath);\n-      if (isset($offset)) {\n-         if ($offset == -1) {\n-            $percent = 100;\n-         } else {\n-            $percent = min(100, round(100*$offset/$fsize, 0));\n-         }\n-      } else {\n-         $percent = 0;\n-      }\n-\n-      if ($percent >= 0) {\n-         Html::displayProgressBar(400, $percent);\n-         echo '<br>';\n-      }\n-\n-      if ($offset != -1) {\n-         if (restoreMySqlDump($DB, $filepath, $duree)) {\n-            echo \"<div class='center'>\".\n-               \"<a href=\\\"backup.php?file=\".$_GET[\"file\"].\"&amp;duree=$duree&amp;offset=\".\n-                     \"$offset&amp;cpt=$cpt&amp;donotcheckversion=1\\\">\";\n-            echo __('Automatic redirection, else click').\"</a>\";\n-            echo \"<script language='javascript' type='text/javascript'>\".\n-                  \"window.location=\\\"backup.php?file=\".\n-                  $_GET[\"file\"].\"&duree=$duree&offset=$offset&cpt=$cpt&donotcheckversion=1\\\";\".\n-                  \"</script></div>\";\n-            Html::glpi_flush();\n-            exit;\n-         }\n-\n-      } else {\n-         // Compatiblity for old version for utf8 complete conversion\n-         $cnf                = new Config();\n-         $input['id']        = 1;\n-         $input['utf8_conv'] = 1;\n-         $cnf->update($input);\n-      }\n-   }\n-}\n-\n-if (isset($_POST[\"delfile\"])) {\n-   if (isset($_POST['file']) && ($_POST[\"file\"] != \"\")) {\n-      $filepath = realpath(GLPI_DUMP_DIR . \"/\" . $_POST['file']);\n-      if (is_file($filepath) && Toolbox::startsWith($filepath, GLPI_DUMP_DIR)) {\n-         $filename = $_POST[\"file\"];\n-         unlink($filepath);\n-         // TRANS: %s is a file name\n-         echo \"<div class ='center spaced'>\".sprintf(__('%s deleted'), $filename).\"</div>\";\n-      }\n-   }\n-}\n-\n-if (Session::haveRight('backup', Backup::CHECKUPDATE)) {\n-   echo \"<div class='center spaced'><table class='tab_glpi'>\";\n-   echo \"<tr class='tab_bg_1'><td colspan='4' class='center b'>\";\n-   Html::showSimpleForm($_SERVER['PHP_SELF'], 'check_version',\n-                        __('Check if a new version is available'));\n-   echo \"</td></tr></table></div>\";\n-}\n-\n-// Title backup\n-echo \"<div class='center'>\";\n-if (Session::haveRight('backup', CREATE)) {\n-   echo \"<table class='tab_glpi'><tr><td colspan='4'>\";\n-   echo \"<div class='warning'><i class='fa fa-exclamation-triangle fa-5x'></i><ul><li>\";\n-   echo __('GLPI internal backup system is a helper for very small instances.');\n-   echo \"<br/>\" . __('You should rather use a dedicated tool on your server.');\n-   echo \"</li></ul></div>\";\n-   echo \"</td></tr><tr><td>\";\n-   echo \"<i class='far fa-save fa-3x'></i>\";\n-         \"</td>\";\n-   echo \"<td><a class='vsubmit'\n-              href=\\\"#\\\" \".HTML::addConfirmationOnAction(__('Backup the database?'),\n-                                                         \"window.location='\".$CFG_GLPI[\"root_doc\"].\n-                                                           \"/front/backup.php?dump=dump'\").\n-              \">\".__('SQL Dump').\"</a>&nbsp;</td>\";\n-   echo \"<td><a class='vsubmit'\n-              href=\\\"#\\\" \".HTML::addConfirmationOnAction(__('Backup the database?'),\n-                                                         \"window.location='\".$CFG_GLPI[\"root_doc\"].\n-                                                           \"/front/backup.php?xmlnow=xmlnow'\").\n-              \">\".__('XML Dump').\"</a>&nbsp;</td>\";\n-   echo \"</tr></table>\";\n-}\n-echo \"<br><table class='tab_cadre' cellpadding='5'>\".\n-     \"<tr class='center'>\".\n-     \"<th><u><i>\".__('File').\"</i></u></th>\".\n-     \"<th><u><i>\".__('Size').\"</i></u></th>\".\n-     \"<th><u><i>\".__('Date').\"</i></u></th>\".\n-     \"<th colspan='3'>&nbsp;</th>\".\n-     \"</tr>\";\n-\n-$dir   = opendir(GLPI_DUMP_DIR);\n-$files = [];\n-while ($file = readdir($dir)) {\n-   if (($file != \".\") && ($file != \"..\")\n-       && (preg_match(\"/\\.sql.gz$/i\", $file)\n-           || preg_match(\"/\\.sql$/i\", $file))) {\n-\n-      $files[$file] = filemtime(GLPI_DUMP_DIR . \"/\" . $file);\n-   }\n-}\n-arsort($files);\n-\n-if (count($files)) {\n-   foreach ($files as $file => $date) {\n-      $taille_fic = filesize(GLPI_DUMP_DIR . \"/\" . $file);\n-      echo \"<tr class='tab_bg_2'><td>$file&nbsp;</td>\".\n-           \"<td class='right'>\".Toolbox::getSize($taille_fic).\"</td>\".\n-           \"<td>&nbsp;\" . Html::convDateTime(date(\"Y-m-d H:i\", $date)) . \"</td>\";\n-      if (Session::haveRight('backup', PURGE)) {\n-         echo \"<td>&nbsp;\";\n-              //TRANS: %s is the filename\n-              $string = sprintf(__('Delete the file %s?'), $file);\n-              Html::showSimpleForm($_SERVER['PHP_SELF'], 'delfile',\n-                                   _x('button', 'Delete permanently'),\n-                                   ['file' => $file], '', '', $string);\n-\n-         echo \"</td>\";\n-         echo \"<td>&nbsp;\";\n-         // Multiple confirmation\n-         $string   = [];\n-         //TRANS: %s is the filename\n-         $string[] = [sprintf(__('Replace the current database with the backup file %s?'),\n-                                   $file)];\n-         $string[] = [__('Warning, your actual database will be totaly overwriten by the database you want to restore !!!')];\n-\n-         echo \"<a class='vsubmit' href=\\\"#\\\" \".HTML::addConfirmationOnAction($string,\n-                                        \"window.location='\".$CFG_GLPI[\"root_doc\"].\n-                                        \"/front/backup.php?file=$file&amp;donotcheckversion=1'\").\n-              \">\".__('Restore').\"</a>&nbsp;</td>\";\n-      }\n-      if (Session::haveRight('backup', CREATE)) {\n-         echo \"<td>&nbsp;\".\n-              \"<a class='vsubmit' href=\\\"document.send.php?file=_dumps/$file\\\">\".__('Download').\n-              \"</a></td>\";\n-      }\n-      echo \"</tr>\";\n-   }\n-}\n-closedir($dir);\n-\n-$dir = opendir(GLPI_DUMP_DIR);\n-unset($files);\n-$files = [];\n-\n-while ($file = readdir($dir)) {\n-   if (($file != \".\") && ($file != \"..\")\n-       && preg_match(\"/\\.xml$/i\", $file)) {\n-\n-      $files[$file] = filemtime(GLPI_DUMP_DIR . \"/\" . $file);\n-   }\n-}\n-arsort($files);\n-\n-if (count($files)) {\n-   foreach ($files as $file => $date) {\n-      $taille_fic = filesize(GLPI_DUMP_DIR . \"/\" . $file);\n-      echo \"<tr class='tab_bg_1'><td colspan='6'><hr noshade></td></tr>\".\n-           \"<tr class='tab_bg_2'><td>$file&nbsp;</td>\".\n-            \"<td class='right'>\".Toolbox::getSize($taille_fic).\"</td>\".\n-            \"<td>&nbsp;\" . Html::convDateTime(date(\"Y-m-d H:i\", $date)) . \"</td>\";\n-      if (Session::haveRight('backup', PURGE)) {\n-         echo \"<td colspan=2>\";\n-         //TRANS: %s is the filename\n-         $string = sprintf(__('Delete the file %s?'), $file);\n-         Html::showSimpleForm($_SERVER['PHP_SELF'], 'delfile', _x('button', 'Delete permanently'),\n-                              ['file' => $file], '', '', $string);\n-         echo \"</td>\";\n-      }\n-      if (Session::haveRight('backup', CREATE)) {\n-         echo \"<td>&nbsp;<a class='vsubmit' href=\\\"document.send.php?file=_dumps/$file\\\">\".\n-                       __('Download').\"</a></td>\";\n-      }\n-      echo \"</tr>\";\n-   }\n-}\n-closedir($dir);\n-\n-echo \"</table>\";\n-echo \"</div>\";\n-\n-Html::footer();"
        },
        {
          "filename": "front/config.form.php",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -33,6 +33,13 @@\n include ('../inc/includes.php');\n Session::checkRight(\"config\", READ);\n \n+if (isset($_GET['check_version'])) {\n+    Session::addMessageAfterRedirect(\n+        Toolbox::checkNewVersionAvailable()\n+    );\n+    Html::back();\n+}\n+\n $config = new Config();\n $_POST['id'] = 1;\n if (!empty($_POST[\"update_auth\"])) {"
        },
        {
          "filename": "inc/config.class.php",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1779,6 +1779,9 @@ function showSystemInformations() {\n \n       echo \"<table class='tab_cadre_fixe'>\";\n       echo \"<tr><th>\". __('Information about system installation and configuration').\"</th></tr>\";\n+      echo \"<tr class='tab_bg_1'><td>\";\n+      echo \"<a class='vsubmit' href='?check_version'>\".__('Check if a new version is available').\"</a>\";\n+      echo \"</td></tr>\";\n \n        $oldlang = $_SESSION['glpilanguage'];\n        // Keep this, for some function call which still use translation (ex showAllReplicateDelay)"
        },
        {
          "filename": "inc/console/database/updatecommand.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -170,8 +170,8 @@ protected function execute(InputInterface $input, OutputInterface $output) {\n       } else if ($force) {\n          // Replay last update script even if there is no schema change.\n          // It can be used in dev environment when update script has been updated/fixed.\n-         include_once(GLPI_ROOT . '/install/update_943_945.php');\n-         update943to945();\n+         include_once(GLPI_ROOT . '/install/update_945_946.php');\n+         update945to946();\n \n          $output->writeln('<info>' . __('Last migration replayed.') . '</info>');\n       }"
        },
        {
          "filename": "inc/crontask.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1654,7 +1654,7 @@ static function cronLogs($task) {\n    **/\n    static function cronCheckUpdate($task) {\n \n-      $result = Toolbox::checkNewVersionAvailable(1);\n+      $result = Toolbox::checkNewVersionAvailable();\n       $task->log($result);\n \n       return 1;"
        },
        {
          "filename": "inc/html.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1414,7 +1414,7 @@ static function getMenuInfos() {\n \n       $menu['admin']['title']        = __('Administration');\n       $menu['admin']['types']        = ['User', 'Group', 'Entity', 'Rule',\n-                                             'Profile', 'QueuedNotification', 'Backup', 'Glpi\\\\Event'];\n+                                             'Profile', 'QueuedNotification', 'Glpi\\\\Event'];\n \n       $menu['config']['title']       = __('Setup');\n       $menu['config']['types']       = ['CommonDropdown', 'CommonDevice', 'Notification',"
        },
        {
          "filename": "inc/profile.class.php",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -1321,9 +1321,6 @@ function showFormAdmin($openform = true, $closeform = true) {\n                       ['itemtype'  => 'QueuedNotification',\n                             'label'     => __('Notification queue'),\n                             'field'     => 'queuednotification'],\n-                      ['itemtype'  => 'Backup',\n-                            'label'     => __('Maintenance'),\n-                            'field'     => 'backup'],\n                       ['itemtype'  => 'Log',\n                             'label'     => _n('Log', 'Logs', Session::getPluralNumber()),\n                             'field'     => 'logs']];"
        },
        {
          "filename": "inc/toolbox.class.php",
          "status": "modified",
          "additions": 5,
          "deletions": 62,
          "patch": "@@ -1407,25 +1407,11 @@ static function resizePicture($source_path, $dest_path, $new_width = 71, $new_he\n    /**\n     * Check if new version is available\n     *\n-    * @param $auto                  boolean: check done autically ? (if not display result)\n-    *                                        (true by default)\n-    * @param $messageafterredirect  boolean: use message after redirect instead of display\n-    *                                        (false by default)\n-    *\n-    * @return string explaining the result\n+    * @return string\n    **/\n-   static function checkNewVersionAvailable($auto = true, $messageafterredirect = false) {\n+   static function checkNewVersionAvailable() {\n       global $CFG_GLPI;\n \n-      if (!$auto\n-          && !Session::haveRight('backup', Backup::CHECKUPDATE)) {\n-         return false;\n-      }\n-\n-      if (!$auto && !$messageafterredirect) {\n-         echo \"<br>\";\n-      }\n-\n       //parse github releases (get last version number)\n       $error = \"\";\n       $json_gh_releases = self::getURLContent(\"https://api.github.com/repos/glpi-project/glpi/releases\", $error);\n@@ -1440,56 +1426,13 @@ static function checkNewVersionAvailable($auto = true, $messageafterredirect = f\n       $latest_version = array_pop($released_tags);\n \n       if (strlen(trim($latest_version)) == 0) {\n-         if (!$auto) {\n-            if ($messageafterredirect) {\n-               Session::addMessageAfterRedirect($error, true, ERROR);\n-            } else {\n-               echo \"<div class='center'>$error</div>\";\n-            }\n-         } else {\n-            return $error;\n-         }\n-\n+         return $error;\n       } else {\n          if (version_compare($CFG_GLPI[\"version\"], $latest_version, '<')) {\n             Config::setConfigurationValues('core', ['founded_new_version' => $latest_version]);\n-\n-            if (!$auto) {\n-               if ($messageafterredirect) {\n-                  Session::addMessageAfterRedirect(sprintf(__('A new version is available: %s.'),\n-                                                           $latest_version));\n-                  Session::addMessageAfterRedirect(__('You will find it on the GLPI-PROJECT.org site.'));\n-               } else {\n-                  echo \"<div class='center'>\".sprintf(__('A new version is available: %s.'),\n-                                                      $latest_version).\"</div>\";\n-                  echo \"<div class='center'>\".__('You will find it on the GLPI-PROJECT.org site.').\n-                       \"</div>\";\n-               }\n-\n-            } else {\n-               if ($messageafterredirect) {\n-                  Session::addMessageAfterRedirect(sprintf(__('A new version is available: %s.'),\n-                                                           $latest_version));\n-               } else {\n-                  return sprintf(__('A new version is available: %s.'), $latest_version);\n-               }\n-            }\n-\n+            return sprintf(__('A new version is available: %s.'), $latest_version);\n          } else {\n-            if (!$auto) {\n-               if ($messageafterredirect) {\n-                  Session::addMessageAfterRedirect(__('You have the latest available version'));\n-               } else {\n-                  echo \"<div class='center'>\".__('You have the latest available version').\"</div>\";\n-               }\n-\n-            } else {\n-               if ($messageafterredirect) {\n-                  Session::addMessageAfterRedirect(__('You have the latest available version'));\n-               } else {\n-                  return __('You have the latest available version');\n-               }\n-            }\n+            return __('You have the latest available version');\n          }\n       }\n       return 1;"
        },
        {
          "filename": "inc/update.class.php",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -458,6 +458,10 @@ public function doUpdates($current_version = null) {\n          case \"9.4.4\":\n             include_once \"{$updir}update_943_945.php\";\n             update943to945();\n+\n+         case \"9.4.5\":\n+            include_once \"{$updir}update_945_946.php\";\n+            update945to946();\n             break;\n \n          case GLPI_VERSION:"
        },
        {
          "filename": "install/update_084_085.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -893,7 +893,7 @@ function update084to085() {\n                          \"`name` = 'check_update' AND `rights` = '1'\") as $profrights) {\n \n       $query  = \"UPDATE `glpi_profilerights`\n-                 SET `rights` = `rights` | \" . Backup::CHECKUPDATE .\"\n+                 SET `rights` = `rights` | \" . 1024 /*Backup::CHECKUPDATE*/ .\"\n                  WHERE `profiles_id` = '\".$profrights['profiles_id'].\"'\n                       AND `name` = 'backup'\";\n          $DB->queryOrDie($query, \"0.85 update backup with check_update\");"
        },
        {
          "filename": "install/update_945_946.php",
          "status": "renamed",
          "additions": 17,
          "deletions": 38,
          "patch": "@@ -30,50 +30,29 @@\n  * ---------------------------------------------------------------------\n  */\n \n-if (!defined('GLPI_ROOT')) {\n-   die(\"Sorry. You can't access this file directly\");\n-}\n-\n /**\n- * Backup class\n+ * Update from 9.4.5 to 9.4.6\n  *\n- * @since 0.85\n+ * @return bool for success (will die for most error)\n **/\n+function update945to946() {\n+   global $DB, $migration;\n \n+   $updateresult     = true;\n \n-class Backup extends CommonGLPI {\n-\n-   static $rightname = 'backup';\n-\n-   const CHECKUPDATE = 1024;\n-\n-\n-\n-   /**\n-    * @since 0.85.3\n-    **/\n-   static function canView() {\n-      return Session::haveRight(self::$rightname, READ);\n-   }\n-\n-\n-   static function getTypeName($nb = 0) {\n-      return __('Maintenance');\n-   }\n-\n+   //TRANS: %s is the number of new version\n+   $migration->displayTitle(sprintf(__('Update to %s'), '9.4.6'));\n+   $migration->setVersion('9.4.6');\n \n-   /**\n-    * @since 0.85\n-    *\n-    * @see commonDBTM::getRights()\n-   **/\n-   function getRights($interface = 'central') {\n+   $DB->deleteOrDie(\n+      'glpi_profilerights',\n+      [\n+         'name'  => 'backup'\n+      ]\n+   );\n \n-      $values = [READ                => __('Read'),\n-                      CREATE              => __('Create'),\n-                      PURGE               => _x('button', 'Delete permanently'),\n-                      self::CHECKUPDATE   => __('Check for upgrade')];\n-      return $values;\n-   }\n+   // ************ Keep it at the end **************\n+   $migration->executeMigration();\n \n+   return $updateresult;\n }"
        },
        {
          "filename": "tests/units/Html.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -379,7 +379,6 @@ public function testGetMenuInfos() {\n          'Rule',\n          'Profile',\n          'QueuedNotification',\n-         'Backup',\n          'Glpi\\\\Event'\n       ];\n       $this->string($menu['admin']['title'])->isIdenticalTo('Administration');"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "50989595d9386f3eed353125d7a693ef1241b517",
            "date": "2025-01-14T15:16:58Z",
            "author_login": "cconard96"
          },
          {
            "sha": "515f37f98fdfc8fdc1eb2f090252b2f3af1fdfa4",
            "date": "2025-01-14T14:43:36Z",
            "author_login": "ccailly"
          },
          {
            "sha": "9869867f24c899d79e4675ad93131bbb2cba53a2",
            "date": "2025-01-14T14:39:56Z",
            "author_login": "ccailly"
          },
          {
            "sha": "4b9fbaea0bb355b49990ee51c690fed5e7302443",
            "date": "2025-01-14T13:22:29Z",
            "author_login": "SebSept"
          },
          {
            "sha": "78d50b2a0c46bea23fc414f0bb9e4a7c74949ab0",
            "date": "2025-01-14T12:00:37Z",
            "author_login": "AdrienClairembault"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-74",
    "description": "In GLPI before 9.4.6, an attacker can execute system commands by abusing the backup functionality. Theoretically, this vulnerability can be exploited by an attacker without a valid account by using a CSRF. Due to the difficulty of the exploitation, the attack is only conceivable by an account having Maintenance privileges and the right to add WIFI networks. This is fixed in version 9.4.6.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-05-12T20:15:11.567",
    "last_modified": "2024-11-21T04:56:42.190",
    "fix_date": "2020-04-28T06:08:02Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/163119/GLPI-9.4.5-Remote-Code-Execution.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/commit/ad748d59c94da177a3ed25111c453902396f320c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-cvvq-3fww-5v6f",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/163119/GLPI-9.4.5-Remote-Code-Execution.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/commit/ad748d59c94da177a3ed25111c453902396f320c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-cvvq-3fww-5v6f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:44.988490",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "glpi",
    "owner": "glpi-project",
    "created_at": "2015-07-16T07:20:21Z",
    "updated_at": "2025-01-14T12:00:43Z",
    "pushed_at": "2025-01-14T12:00:37Z",
    "size": 864638,
    "stars": 4447,
    "forks": 1324,
    "open_issues": 223,
    "watchers": 4447,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0.70/bugfixes",
      "0.71/bugfixes",
      "0.72/bugfixes",
      "0.78/bugfixes",
      "0.80/bugfixes",
      "0.83/bugfixes",
      "0.84/bugfixes",
      "0.85/bugfixes",
      "0.90/bugfixes",
      "9.1/bugfixes",
      "9.2/bugfixes",
      "9.3/bugfixes",
      "9.4/bugfixes",
      "9.5/bugfixes",
      "10.0/bugfixes",
      "main"
    ],
    "languages": {
      "PHP": 24867216,
      "Twig": 1834187,
      "JavaScript": 1339721,
      "SCSS": 362786,
      "Vue": 188168,
      "Shell": 24779,
      "Makefile": 2692,
      "CSS": 1716,
      "Dockerfile": 638
    },
    "commit_activity": {
      "total_commits_last_year": 1737,
      "avg_commits_per_week": 33.40384615384615,
      "days_active_last_year": 259
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:16:26.208966"
  }
}