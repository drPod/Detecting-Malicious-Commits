{
  "cve_id": "CVE-2020-11071",
  "github_data": {
    "repository": "simpleledger/slpjs",
    "fix_commit": "3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754",
    "related_commits": [
      "3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754",
      "3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754",
      "commit_date": "2020-04-29T16:48:21Z",
      "author": {
        "login": "jcramer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix false negative case for MINT transactions",
        "length": 133,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 16,
        "additions": 10,
        "deletions": 6
      },
      "files": [
        {
          "filename": "lib/localvalidator.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 6,
          "patch": "@@ -282,10 +282,10 @@ export class LocalValidator implements SlpValidator {\n                     }\n                 } catch (_) {}\n             }\n-            if (this.cachedValidations[txid].parents.length !== 1) {\n+            if (this.cachedValidations[txid].parents.length < 1) {\n                 this.cachedValidations[txid].validity = false;\n                 this.cachedValidations[txid].waiting = false;\n-                this.cachedValidations[txid].invalidReason = \"MINT transaction must have 1 valid baton parent.\";\n+                this.cachedValidations[txid].invalidReason = \"MINT transaction must have at least 1 candidate baton parent input.\";\n                 return this.cachedValidations[txid].validity!;\n             }\n         }\n@@ -342,10 +342,14 @@ export class LocalValidator implements SlpValidator {\n         // Set validity validation-cache for parents, and handle MINT condition with no valid input\n         // we don't need to check proper token id since we only added parents with same ID in above steps.\n         const parentTxids = [...new Set(this.cachedValidations[txid].parents.map(p => p.txid))];\n-        for (let i = 0; i < parentTxids.length; i++) {\n-            const valid = await this.isValidSlpTxid(parentTxids[i]);\n-            this.cachedValidations[txid].parents.filter(p => p.txid === parentTxids[i]).map(p => p.valid = valid);\n-            if (this.cachedValidations[txid].details!.transactionType === SlpTransactionType.MINT && !valid) {\n+        for (const id of parentTxids) {\n+            const valid = await this.isValidSlpTxid(id);\n+            this.cachedValidations[txid].parents.filter(p => p.txid === id).map(p => p.valid = valid);\n+        }\n+\n+        // Check MINT for exactly 1 valid MINT baton\n+        if (this.cachedValidations[txid].details!.transactionType === SlpTransactionType.MINT) {\n+            if (this.cachedValidations[txid].parents.filter(p => p.valid && p.inputQty === null).length !== 1) {\n                 this.cachedValidations[txid].validity = false;\n                 this.cachedValidations[txid].waiting = false;\n                 this.cachedValidations[txid].invalidReason = \"MINT transaction with invalid baton parent.\";"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8fdfc622d3231f9079b6da6701d0ee5331e7928d",
            "date": "2021-04-11T15:09:19Z",
            "author_login": "jcramer"
          },
          {
            "sha": "39aaed9673eb504c4603628e3d879bc0a6b1ff00",
            "date": "2021-04-11T15:02:41Z",
            "author_login": "jcramer"
          },
          {
            "sha": "d5db3edb451cc40fbbcd7b3fbf44cffa598df820",
            "date": "2021-03-30T16:21:13Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3ee1a73a40fc698039733a75d93bf5e4500d7534",
            "date": "2021-02-28T20:16:57Z",
            "author_login": "jcramer"
          },
          {
            "sha": "ba4380535b7054ab9a7028cfff256b418b634e1e",
            "date": "2021-02-28T20:16:45Z",
            "author_login": "jcramer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:H/A:N",
    "cwe_id": "CWE-697",
    "description": "SLPJS (npm package slpjs) before version 0.27.2, has a vulnerability where users could experience false-negative validation outcomes for MINT transaction operations. A poorly implemented SLP wallet could allow spending of the affected tokens which would result in the destruction of a user's minting baton. This is fixed in version 0.27.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-05-12T01:15:11.150",
    "last_modified": "2024-11-21T04:56:43.487",
    "fix_date": "2020-04-29T16:48:21Z"
  },
  "references": [
    {
      "url": "https://github.com/simpleledger/slpjs/commit/3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Tool Signature"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slpjs/security/advisories/GHSA-jc83-cpf9-q7c6",
      "source": "security-advisories@github.com",
      "tags": [
        "Tool Signature"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slpjs/commit/3671be2ffb6d4cfa94c00c6dc8649d1ba1d75754",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Tool Signature"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slpjs/security/advisories/GHSA-jc83-cpf9-q7c6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Tool Signature"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:44.987263",
    "processing_status": "enhanced"
  }
}