{
  "cve_id": "CVE-2020-11072",
  "github_data": {
    "repository": "simpleledger/slp-validate",
    "fix_commit": "cde95c0c6470dceb4f023cd462f904135ebd73e7",
    "related_commits": [
      "cde95c0c6470dceb4f023cd462f904135ebd73e7",
      "cde95c0c6470dceb4f023cd462f904135ebd73e7"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "cde95c0c6470dceb4f023cd462f904135ebd73e7",
      "commit_date": "2020-04-29T13:52:56Z",
      "author": {
        "login": "jcramer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix false negative case for MINT transactions",
        "length": 133,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 16,
        "additions": 10,
        "deletions": 6
      },
      "files": [
        {
          "filename": "lib/validation.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 6,
          "patch": "@@ -408,10 +408,10 @@ export class ValidatorType1 {\n                     }\n                 } catch (_) { }\n             }\n-            if (validation.parents.length !== 1) {\n+            if (validation.parents.length < 1) {\n                 validation.validity = false;\n                 validation.waiting = false;\n-                validation.invalidReason = \"MINT transaction must have 1 valid baton parent.\";\n+                validation.invalidReason = \"MINT transaction must have at least 1 candidate baton parent input.\";\n                 return validation.validity!;\n             }\n         } else if (slpmsg.transactionType === SlpTransactionType.SEND) {\n@@ -468,10 +468,14 @@ export class ValidatorType1 {\n         // Set validity validation-cache for parents, and handle MINT condition with no valid input\n         // we don't need to check proper token id since we only added parents with same ID in above steps.\n         const parentTxids = [...new Set(validation.parents.map(p => p.txid))];\n-        for (let i = 0; i < parentTxids.length; i++) {\n-            const valid = await this.isValidSlpTxid({ txid: parentTxids[i] });\n-            validation.parents.filter(p => p.txid === parentTxids[i]).map(p => p.valid = valid);\n-            if (validation.details!.transactionType === SlpTransactionType.MINT && !valid) {\n+        for (const id of parentTxids) {\n+            const valid = await this.isValidSlpTxid({ txid: id });\n+            validation.parents.filter(p => p.txid === id).map(p => p.valid = valid);\n+        }\n+\n+        // Check MINT for exactly 1 valid MINT baton\n+        if (validation.details!.transactionType === SlpTransactionType.MINT) {\n+            if (validation.parents.filter(p => p.valid && p.inputQty === null).length !== 1) {\n                 validation.validity = false;\n                 validation.waiting = false;\n                 validation.invalidReason = \"MINT transaction with invalid baton parent.\";"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5308d9471901b9cc78fe4e5aa1b4c8db519a19ad",
            "date": "2021-04-11T14:24:15Z",
            "author_login": "jcramer"
          },
          {
            "sha": "312eff5f9895479d89a4abb104fbc508e0c09370",
            "date": "2021-04-11T14:17:14Z",
            "author_login": "jcramer"
          },
          {
            "sha": "06722707a5938866449713e2f0a54be3823222a7",
            "date": "2021-04-11T13:55:32Z",
            "author_login": "jcramer"
          },
          {
            "sha": "e305a036dd00d87ed350409bf4de21e12ebc866e",
            "date": "2021-04-11T13:55:16Z",
            "author_login": "jcramer"
          },
          {
            "sha": "38d9818c4f2c583f7d9640bd8b47610fa22042d0",
            "date": "2021-04-11T13:53:41Z",
            "author_login": "jcramer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:N/I:H/A:N",
    "cwe_id": "CWE-697",
    "description": "In SLP Validate (npm package slp-validate) before version 1.2.1, users could experience false-negative validation outcomes for MINT transaction operations. A poorly implemented SLP wallet could allow spending of the affected tokens which would result in the destruction of a user's minting baton. This has been fixed in slp-validate in version 1.2.1. Additonally, slpjs version 0.27.2 has a related fix under related CVE-2020-11071.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-05-12T01:15:11.213",
    "last_modified": "2024-11-21T04:56:43.600",
    "fix_date": "2020-04-29T13:52:56Z"
  },
  "references": [
    {
      "url": "https://github.com/simpleledger/slp-validate/commit/cde95c0c6470dceb4f023cd462f904135ebd73e7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slp-validate/security/advisories/GHSA-4w97-57v2-3w44",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slp-validate/commit/cde95c0c6470dceb4f023cd462f904135ebd73e7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slp-validate/security/advisories/GHSA-4w97-57v2-3w44",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:44.987403",
    "processing_status": "enhanced"
  }
}