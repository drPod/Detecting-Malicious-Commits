{
  "cve_id": "CVE-2020-11085",
  "github_data": {
    "repository": "FreeRDP/FreeRDP",
    "fix_commit": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
    "related_commits": [
      "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
      "b73143cf7ee5fe4cdabcbf56908aa15d8a883821"
    ],
    "patch_url": "https://github.com/FreeRDP/FreeRDP/commit/b73143cf7ee5fe4cdabcbf56908aa15d8a883821.patch",
    "fix_commit_details": {
      "sha": "b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
      "commit_date": "2020-04-15T14:47:12Z",
      "author": {
        "login": "akallabeth",
        "type": "User",
        "stats": {
          "total_commits": 7809,
          "average_weekly_commits": 11.029661016949152,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 486
        }
      },
      "commit_message": {
        "title": "Fixed oob read in cliprdr_read_format_list",
        "length": 42,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 85,
        "additions": 39,
        "deletions": 46
      },
      "files": [
        {
          "filename": "channels/cliprdr/cliprdr_common.c",
          "status": "modified",
          "additions": 39,
          "deletions": 46,
          "patch": "@@ -400,29 +400,32 @@ UINT cliprdr_read_format_list(wStream* s, CLIPRDR_FORMAT_LIST* formatList, BOOL\n \tint formatNameLength;\n \tchar* szFormatName;\n \tWCHAR* wszFormatName;\n-\tUINT32 dataLen = formatList->dataLen;\n+\twStream sub1, sub2;\n \tCLIPRDR_FORMAT* formats = NULL;\n \tUINT error = CHANNEL_RC_OK;\n \n \tasciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;\n \n \tindex = 0;\n+\t/* empty format list */\n+\tformatList->formats = NULL;\n \tformatList->numFormats = 0;\n-\tposition = Stream_GetPosition(s);\n+\n+\tStream_StaticInit(&sub1, Stream_Pointer(s), formatList->dataLen);\n+\tif (!Stream_SafeSeek(s, formatList->dataLen))\n+\t\treturn ERROR_INVALID_DATA;\n \n \tif (!formatList->dataLen)\n \t{\n-\t\t/* empty format list */\n-\t\tformatList->formats = NULL;\n-\t\tformatList->numFormats = 0;\n \t}\n \telse if (!useLongFormatNames)\n \t{\n-\t\tformatList->numFormats = (dataLen / 36);\n+\t\tconst size_t cap = Stream_Capacity(&sub1);\n+\t\tformatList->numFormats = (cap / 36);\n \n-\t\tif ((formatList->numFormats * 36) != dataLen)\n+\t\tif ((formatList->numFormats * 36) != cap)\n \t\t{\n-\t\t\tWLog_ERR(TAG, \"Invalid short format list length: %\" PRIu32 \"\", dataLen);\n+\t\t\tWLog_ERR(TAG, \"Invalid short format list length: %\" PRIuz \"\", cap);\n \t\t\treturn ERROR_INTERNAL_ERROR;\n \t\t}\n \n@@ -437,10 +440,9 @@ UINT cliprdr_read_format_list(wStream* s, CLIPRDR_FORMAT_LIST* formatList, BOOL\n \n \t\tformatList->formats = formats;\n \n-\t\twhile (dataLen)\n+\t\twhile (Stream_GetRemainingLength(&sub1) >= 4)\n \t\t{\n-\t\t\tStream_Read_UINT32(s, formats[index].formatId); /* formatId (4 bytes) */\n-\t\t\tdataLen -= 4;\n+\t\t\tStream_Read_UINT32(&sub1, formats[index].formatId); /* formatId (4 bytes) */\n \n \t\t\tformats[index].formatName = NULL;\n \n@@ -452,10 +454,12 @@ UINT cliprdr_read_format_list(wStream* s, CLIPRDR_FORMAT_LIST* formatList, BOOL\n \t\t\t * These are 16 unicode charaters - *without* terminating null !\n \t\t\t */\n \n+\t\t\tszFormatName = (char*)Stream_Pointer(&sub1);\n+\t\t\twszFormatName = (WCHAR*)Stream_Pointer(&sub1);\n+\t\t\tif (!Stream_SafeSeek(&sub1, 32))\n+\t\t\t\tgoto error_out;\n \t\t\tif (asciiNames)\n \t\t\t{\n-\t\t\t\tszFormatName = (char*)Stream_Pointer(s);\n-\n \t\t\t\tif (szFormatName[0])\n \t\t\t\t{\n \t\t\t\t\t/* ensure null termination */\n@@ -472,8 +476,6 @@ UINT cliprdr_read_format_list(wStream* s, CLIPRDR_FORMAT_LIST* formatList, BOOL\n \t\t\t}\n \t\t\telse\n \t\t\t{\n-\t\t\t\twszFormatName = (WCHAR*)Stream_Pointer(s);\n-\n \t\t\t\tif (wszFormatName[0])\n \t\t\t\t{\n \t\t\t\t\t/* ConvertFromUnicode always returns a null-terminated\n@@ -489,34 +491,27 @@ UINT cliprdr_read_format_list(wStream* s, CLIPRDR_FORMAT_LIST* formatList, BOOL\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tStream_Seek(s, 32);\n-\t\t\tdataLen -= 32;\n \t\t\tindex++;\n \t\t}\n \t}\n \telse\n \t{\n-\t\twhile (dataLen)\n+\t\tsub2 = sub1;\n+\t\twhile (Stream_GetRemainingLength(&sub1) > 0)\n \t\t{\n-\t\t\tStream_Seek(s, 4); /* formatId (4 bytes) */\n-\t\t\tdataLen -= 4;\n+\t\t\tsize_t rest;\n+\t\t\tif (!Stream_SafeSeek(&sub1, 4)) /* formatId (4 bytes) */\n+\t\t\t\tgoto error_out;\n \n-\t\t\twszFormatName = (WCHAR*)Stream_Pointer(s);\n-\n-\t\t\tif (!wszFormatName[0])\n-\t\t\t\tformatNameLength = 0;\n-\t\t\telse\n-\t\t\t\tformatNameLength = _wcslen(wszFormatName);\n-\n-\t\t\tStream_Seek(s, (formatNameLength + 1) * 2);\n-\t\t\tdataLen -= ((formatNameLength + 1) * 2);\n+\t\t\twszFormatName = (WCHAR*)Stream_Pointer(&sub1);\n+\t\t\trest = Stream_GetRemainingLength(&sub1);\n+\t\t\tformatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));\n \n+\t\t\tif (!Stream_SafeSeek(&sub1, (formatNameLength + 1) * sizeof(WCHAR)))\n+\t\t\t\tgoto error_out;\n \t\t\tformatList->numFormats++;\n \t\t}\n \n-\t\tdataLen = formatList->dataLen;\n-\t\tStream_SetPosition(s, position);\n-\n \t\tif (formatList->numFormats)\n \t\t\tformats = (CLIPRDR_FORMAT*)calloc(formatList->numFormats, sizeof(CLIPRDR_FORMAT));\n \n@@ -528,34 +523,30 @@ UINT cliprdr_read_format_list(wStream* s, CLIPRDR_FORMAT_LIST* formatList, BOOL\n \n \t\tformatList->formats = formats;\n \n-\t\twhile (dataLen)\n+\t\twhile (Stream_GetRemainingLength(&sub2) >= 4)\n \t\t{\n-\t\t\tStream_Read_UINT32(s, formats[index].formatId); /* formatId (4 bytes) */\n-\t\t\tdataLen -= 4;\n+\t\t\tsize_t rest;\n+\t\t\tStream_Read_UINT32(&sub2, formats[index].formatId); /* formatId (4 bytes) */\n \n \t\t\tformats[index].formatName = NULL;\n \n-\t\t\twszFormatName = (WCHAR*)Stream_Pointer(s);\n-\n-\t\t\tif (!wszFormatName[0])\n-\t\t\t\tformatNameLength = 0;\n-\t\t\telse\n-\t\t\t\tformatNameLength = _wcslen(wszFormatName);\n+\t\t\twszFormatName = (WCHAR*)Stream_Pointer(&sub2);\n+\t\t\trest = Stream_GetRemainingLength(&sub2);\n+\t\t\tformatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));\n+\t\t\tif (!Stream_SafeSeek(&sub2, (formatNameLength + 1) * sizeof(WCHAR)))\n+\t\t\t\tgoto error_out;\n \n \t\t\tif (formatNameLength)\n \t\t\t{\n-\t\t\t\tif (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, -1, &(formats[index].formatName),\n-\t\t\t\t                       0, NULL, NULL) < 1)\n+\t\t\t\tif (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, formatNameLength,\n+\t\t\t\t                       &(formats[index].formatName), 0, NULL, NULL) < 1)\n \t\t\t\t{\n \t\t\t\t\tWLog_ERR(TAG, \"failed to convert long clipboard format name\");\n \t\t\t\t\terror = ERROR_INTERNAL_ERROR;\n \t\t\t\t\tgoto error_out;\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tStream_Seek(s, (formatNameLength + 1) * 2);\n-\t\t\tdataLen -= ((formatNameLength + 1) * 2);\n-\n \t\t\tindex++;\n \t\t}\n \t}\n@@ -582,5 +573,7 @@ void cliprdr_free_format_list(CLIPRDR_FORMAT_LIST* formatList)\n \t\t}\n \n \t\tfree(formatList->formats);\n+\t\tformatList->formats = NULL;\n+\t\tformatList->numFormats = 0;\n \t}\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d0fb99715de93983522517eaf475303f3bcbf213",
            "date": "2025-01-14T11:16:30Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "fca3b3d7db4f343d24c5072f139d88217fbb0ad2",
            "date": "2025-01-14T11:09:22Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "6b577b167ec0b41d73cbb9a2336c245fd5954c0d",
            "date": "2025-01-14T08:59:48Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "5a45a8cad4733ab4337711484210eadb97825944",
            "date": "2025-01-13T17:23:47Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "d938f978a8ce46b66dfc0dc39e6115adcd3f548b",
            "date": "2025-01-14T07:30:15Z",
            "author_login": "akallabeth"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-125",
    "description": "In FreeRDP before 2.1.0, there is an out-of-bounds read in cliprdr_read_format_list. Clipboard format data read (by client or server) might read data out-of-bounds. This has been fixed in 2.1.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-05-29T20:15:10.670",
    "last_modified": "2024-11-21T04:56:45.387",
    "fix_date": "2020-04-15T14:47:12Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00080.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/commit/b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/security/advisories/GHSA-2j4w-v45m-95hf",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/10/msg00008.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00080.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/commit/b73143cf7ee5fe4cdabcbf56908aa15d8a883821",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/security/advisories/GHSA-2j4w-v45m-95hf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/10/msg00008.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.825218",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "FreeRDP",
    "owner": "FreeRDP",
    "created_at": "2011-06-30T19:14:15Z",
    "updated_at": "2025-01-14T11:51:38Z",
    "pushed_at": "2025-01-14T11:16:30Z",
    "size": 68011,
    "stars": 11214,
    "forks": 14938,
    "open_issues": 248,
    "watchers": 11214,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "stable-1.0",
      "stable-1.1",
      "stable-2.0"
    ],
    "languages": {
      "C": 17349509,
      "C++": 685511,
      "CMake": 627854,
      "Objective-C": 540407,
      "Java": 373726,
      "HTML": 99135,
      "Shell": 51324,
      "Python": 46681,
      "Lua": 27393,
      "Roff": 26338,
      "Perl": 8044,
      "C#": 5756,
      "CSS": 5696,
      "Makefile": 2420,
      "Rich Text Format": 937
    },
    "commit_activity": {
      "total_commits_last_year": 2287,
      "avg_commits_per_week": 43.98076923076923,
      "days_active_last_year": 268
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:01:37.323973"
  }
}