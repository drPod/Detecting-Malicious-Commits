{
  "cve_id": "CVE-2020-11089",
  "github_data": {
    "repository": "FreeRDP/FreeRDP",
    "fix_commit": "6b485b146a1b9d6ce72dfd7b5f36456c166e7a16",
    "related_commits": [
      "6b485b146a1b9d6ce72dfd7b5f36456c166e7a16",
      "795842f4096501fcefc1a7f535ccc8132feb31d7",
      "6b485b146a1b9d6ce72dfd7b5f36456c166e7a16",
      "795842f4096501fcefc1a7f535ccc8132feb31d7"
    ],
    "patch_url": "https://github.com/FreeRDP/FreeRDP/commit/6b485b146a1b9d6ce72dfd7b5f36456c166e7a16.patch",
    "fix_commit_details": {
      "sha": "6b485b146a1b9d6ce72dfd7b5f36456c166e7a16",
      "commit_date": "2020-04-15T15:21:46Z",
      "author": {
        "login": "akallabeth",
        "type": "User",
        "stats": {
          "total_commits": 7821,
          "average_weekly_commits": 11.046610169491526,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 486
        }
      },
      "commit_message": {
        "title": "Fixed oob read in irp_write and similar",
        "length": 39,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 66,
        "additions": 48,
        "deletions": 18
      },
      "files": [
        {
          "filename": "channels/drive/client/drive_main.c",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -331,6 +331,7 @@ static UINT drive_process_irp_write(DRIVE_DEVICE* drive, IRP* irp)\n \tDRIVE_FILE* file;\n \tUINT32 Length;\n \tUINT64 Offset;\n+\tvoid* ptr;\n \n \tif (!drive || !irp || !irp->input || !irp->output || !irp->Complete)\n \t\treturn ERROR_INVALID_PARAMETER;\n@@ -341,6 +342,9 @@ static UINT drive_process_irp_write(DRIVE_DEVICE* drive, IRP* irp)\n \tStream_Read_UINT32(irp->input, Length);\n \tStream_Read_UINT64(irp->input, Offset);\n \tStream_Seek(irp->input, 20); /* Padding */\n+\tptr = Stream_Pointer(irp->input);\n+\tif (!Stream_SafeSeek(irp->input, Length))\n+\t\treturn ERROR_INVALID_DATA;\n \tfile = drive_get_file_by_id(drive, irp->FileId);\n \n \tif (!file)\n@@ -353,7 +357,7 @@ static UINT drive_process_irp_write(DRIVE_DEVICE* drive, IRP* irp)\n \t\tirp->IoStatus = drive_map_windows_err(GetLastError());\n \t\tLength = 0;\n \t}\n-\telse if (!drive_file_write(file, Stream_Pointer(irp->input), Length))\n+\telse if (!drive_file_write(file, ptr, Length))\n \t{\n \t\tirp->IoStatus = drive_map_windows_err(GetLastError());\n \t\tLength = 0;"
        },
        {
          "filename": "channels/printer/client/printer_main.c",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -478,10 +478,16 @@ static UINT printer_process_irp_write(PRINTER_DEVICE* printer_dev, IRP* irp)\n \tUINT64 Offset;\n \trdpPrintJob* printjob = NULL;\n \tUINT error = CHANNEL_RC_OK;\n+\tvoid* ptr;\n+\n+\tif (Stream_GetRemainingLength(irp->input) < 32)\n+\t\treturn ERROR_INVALID_DATA;\n \tStream_Read_UINT32(irp->input, Length);\n \tStream_Read_UINT64(irp->input, Offset);\n \tStream_Seek(irp->input, 20); /* Padding */\n-\n+\tptr = Stream_Pointer(irp->input);\n+\tif (!Stream_SafeSeek(irp->input, Length))\n+\t\treturn ERROR_INVALID_DATA;\n \tif (printer_dev->printer)\n \t\tprintjob = printer_dev->printer->FindPrintJob(printer_dev->printer, irp->FileId);\n \n@@ -492,7 +498,7 @@ static UINT printer_process_irp_write(PRINTER_DEVICE* printer_dev, IRP* irp)\n \t}\n \telse\n \t{\n-\t\terror = printjob->Write(printjob, Stream_Pointer(irp->input), Length);\n+\t\terror = printjob->Write(printjob, ptr, Length);\n \t}\n \n \tif (error)"
        },
        {
          "filename": "channels/rdpei/client/rdpei_main.c",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -445,6 +445,9 @@ static UINT rdpei_recv_pdu(RDPEI_CHANNEL_CALLBACK* callback, wStream* s)\n \tUINT16 eventId;\n \tUINT32 pduLength;\n \tUINT error;\n+\tif (Stream_GetRemainingLength(s) < 6)\n+\t\treturn ERROR_INVALID_DATA;\n+\n \tStream_Read_UINT16(s, eventId);   /* eventId (2 bytes) */\n \tStream_Read_UINT32(s, pduLength); /* pduLength (4 bytes) */\n #ifdef WITH_DEBUG_RDPEI"
        },
        {
          "filename": "channels/serial/client/serial_main.c",
          "status": "modified",
          "additions": 9,
          "deletions": 4,
          "patch": "@@ -142,10 +142,9 @@ static UINT serial_process_irp_create(SERIAL_DEVICE* serial, IRP* irp)\n \tStream_Seek_UINT32(irp->input);                    /* CreateOptions (4 bytes) */\n \tStream_Read_UINT32(irp->input, PathLength);        /* PathLength (4 bytes) */\n \n-\tif (Stream_GetRemainingLength(irp->input) < PathLength)\n+\tif (!Stream_SafeSeek(irp->input, PathLength)) /* Path (variable) */\n \t\treturn ERROR_INVALID_DATA;\n \n-\tStream_Seek(irp->input, PathLength); /* Path (variable) */\n \tassert(PathLength == 0);             /* MS-RDPESP 2.2.2.2 */\n #ifndef _WIN32\n \t/* Windows 2012 server sends on a first call :\n@@ -300,14 +299,17 @@ static UINT serial_process_irp_write(SERIAL_DEVICE* serial, IRP* irp)\n {\n \tUINT32 Length;\n \tUINT64 Offset;\n+\tvoid* ptr;\n \tDWORD nbWritten = 0;\n \n \tif (Stream_GetRemainingLength(irp->input) < 32)\n \t\treturn ERROR_INVALID_DATA;\n \n \tStream_Read_UINT32(irp->input, Length); /* Length (4 bytes) */\n \tStream_Read_UINT64(irp->input, Offset); /* Offset (8 bytes) */\n-\tStream_Seek(irp->input, 20);            /* Padding (20 bytes) */\n+\tif (!Stream_SafeSeek(irp->input, 20))   /* Padding (20 bytes) */\n+\t\treturn ERROR_INVALID_DATA;\n+\n \t/* MS-RDPESP 3.2.5.1.5: The Offset field is ignored\n \t * assert(Offset == 0);\n \t *\n@@ -317,8 +319,11 @@ static UINT serial_process_irp_write(SERIAL_DEVICE* serial, IRP* irp)\n \tWLog_Print(serial->log, WLOG_DEBUG, \"writing %\" PRIu32 \" bytes to %s\", Length,\n \t           serial->device.name);\n \n+\tptr = Stream_Pointer(irp->input);\n+\tif (!Stream_SafeSeek(irp->input, Length))\n+\t\treturn ERROR_INVALID_DATA;\n \t/* FIXME: CommWriteFile to be replaced by WriteFile */\n-\tif (CommWriteFile(serial->hComm, Stream_Pointer(irp->input), Length, &nbWritten, NULL))\n+\tif (CommWriteFile(serial->hComm, ptr, Length, &nbWritten, NULL))\n \t{\n \t\tirp->IoStatus = STATUS_SUCCESS;\n \t}"
        },
        {
          "filename": "libfreerdp/core/gateway/rdg.c",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -304,7 +304,8 @@ static wStream* rdg_receive_packet(rdpRdg* rdg)\n \tStream_Seek(s, 4);\n \tStream_Read_UINT32(s, packetLength);\n \n-\tif ((packetLength > INT_MAX) || !Stream_EnsureCapacity(s, packetLength))\n+\tif ((packetLength > INT_MAX) || !Stream_EnsureCapacity(s, packetLength) ||\n+\t    (packetLength < header))\n \t{\n \t\tStream_Free(s, TRUE);\n \t\treturn NULL;"
        },
        {
          "filename": "libfreerdp/core/nego.c",
          "status": "modified",
          "additions": 21,
          "deletions": 10,
          "patch": "@@ -91,9 +91,9 @@ static BOOL nego_security_connect(rdpNego* nego);\n static BOOL nego_send_preconnection_pdu(rdpNego* nego);\n static BOOL nego_recv_response(rdpNego* nego);\n static void nego_send(rdpNego* nego);\n-static void nego_process_negotiation_request(rdpNego* nego, wStream* s);\n-static void nego_process_negotiation_response(rdpNego* nego, wStream* s);\n-static void nego_process_negotiation_failure(rdpNego* nego, wStream* s);\n+static BOOL nego_process_negotiation_request(rdpNego* nego, wStream* s);\n+static BOOL nego_process_negotiation_response(rdpNego* nego, wStream* s);\n+static BOOL nego_process_negotiation_failure(rdpNego* nego, wStream* s);\n \n /**\n  * Negotiate protocol security and connect.\n@@ -618,7 +618,8 @@ int nego_recv(rdpTransport* transport, wStream* s, void* extra)\n \t\tswitch (type)\n \t\t{\n \t\t\tcase TYPE_RDP_NEG_RSP:\n-\t\t\t\tnego_process_negotiation_response(nego, s);\n+\t\t\t\tif (!nego_process_negotiation_response(nego, s))\n+\t\t\t\t\treturn -1;\n \t\t\t\tWLog_DBG(TAG, \"selected_protocol: %\" PRIu32 \"\", nego->SelectedProtocol);\n \n \t\t\t\t/* enhanced security selected ? */\n@@ -645,7 +646,8 @@ int nego_recv(rdpTransport* transport, wStream* s, void* extra)\n \t\t\t\tbreak;\n \n \t\t\tcase TYPE_RDP_NEG_FAILURE:\n-\t\t\t\tnego_process_negotiation_failure(nego, s);\n+\t\t\t\tif (!nego_process_negotiation_failure(nego, s))\n+\t\t\t\t\treturn -1;\n \t\t\t\tbreak;\n \t\t}\n \t}\n@@ -795,7 +797,8 @@ BOOL nego_read_request(rdpNego* nego, wStream* s)\n \t\t\treturn FALSE;\n \t\t}\n \n-\t\tnego_process_negotiation_request(nego, s);\n+\t\tif (!nego_process_negotiation_request(nego, s))\n+\t\t\treturn FALSE;\n \t}\n \n \treturn tpkt_ensure_stream_consumed(s, length);\n@@ -918,15 +921,19 @@ BOOL nego_send_negotiation_request(rdpNego* nego)\n  * @param s\n  */\n \n-void nego_process_negotiation_request(rdpNego* nego, wStream* s)\n+BOOL nego_process_negotiation_request(rdpNego* nego, wStream* s)\n {\n \tBYTE flags;\n \tUINT16 length;\n+\n+\tif (Stream_GetRemainingLength(s) < 7)\n+\t\treturn FALSE;\n \tStream_Read_UINT8(s, flags);\n \tStream_Read_UINT16(s, length);\n \tStream_Read_UINT32(s, nego->RequestedProtocols);\n \tWLog_DBG(TAG, \"RDP_NEG_REQ: RequestedProtocol: 0x%08\" PRIX32 \"\", nego->RequestedProtocols);\n \tnego->state = NEGO_STATE_FINAL;\n+\treturn TRUE;\n }\n \n /**\n@@ -935,7 +942,7 @@ void nego_process_negotiation_request(rdpNego* nego, wStream* s)\n  * @param s\n  */\n \n-void nego_process_negotiation_response(rdpNego* nego, wStream* s)\n+BOOL nego_process_negotiation_response(rdpNego* nego, wStream* s)\n {\n \tUINT16 length;\n \tWLog_DBG(TAG, \"RDP_NEG_RSP\");\n@@ -944,13 +951,14 @@ void nego_process_negotiation_response(rdpNego* nego, wStream* s)\n \t{\n \t\tWLog_ERR(TAG, \"Invalid RDP_NEG_RSP\");\n \t\tnego->state = NEGO_STATE_FAIL;\n-\t\treturn;\n+\t\treturn FALSE;\n \t}\n \n \tStream_Read_UINT8(s, nego->flags);\n \tStream_Read_UINT16(s, length);\n \tStream_Read_UINT32(s, nego->SelectedProtocol);\n \tnego->state = NEGO_STATE_FINAL;\n+\treturn TRUE;\n }\n \n /**\n@@ -959,12 +967,14 @@ void nego_process_negotiation_response(rdpNego* nego, wStream* s)\n  * @param s\n  */\n \n-void nego_process_negotiation_failure(rdpNego* nego, wStream* s)\n+BOOL nego_process_negotiation_failure(rdpNego* nego, wStream* s)\n {\n \tBYTE flags;\n \tUINT16 length;\n \tUINT32 failureCode;\n \tWLog_DBG(TAG, \"RDP_NEG_FAILURE\");\n+\tif (Stream_GetRemainingLength(s) < 7)\n+\t\treturn FALSE;\n \tStream_Read_UINT8(s, flags);\n \tStream_Read_UINT16(s, length);\n \tStream_Read_UINT32(s, failureCode);\n@@ -999,6 +1009,7 @@ void nego_process_negotiation_failure(rdpNego* nego, wStream* s)\n \t}\n \n \tnego->state = NEGO_STATE_FAIL;\n+\treturn TRUE;\n }\n \n /**"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "87e6ceca988b8e0ee581301e43523b8404c3fb00",
            "date": "2025-01-14T21:52:26Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "ba424d7600a9ed7fd2598052a12e4ae8bd787c45",
            "date": "2025-01-14T21:05:33Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "52708ad86df206b033adee88fe329fc61e78d312",
            "date": "2025-01-14T20:57:52Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "0455da9adcf942f5626d7f9999e03eee44a98254",
            "date": "2025-01-14T20:26:24Z",
            "author_login": "akallabeth"
          },
          {
            "sha": "b02e58a039ae7bea77286e39ce62a794f9c26b92",
            "date": "2025-01-14T20:05:58Z",
            "author_login": "akallabeth"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-125",
    "description": "In FreeRDP before 2.1.0, there is an out-of-bound read in irp functions (parallel_process_irp_create, serial_process_irp_create, drive_process_irp_write, printer_process_irp_write, rdpei_recv_pdu, serial_process_irp_write). This has been fixed in 2.1.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-05-29T20:15:11.017",
    "last_modified": "2024-11-21T04:56:45.897",
    "fix_date": "2020-04-15T15:21:46Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00080.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/commit/6b485b146a1b9d6ce72dfd7b5f36456c166e7a16",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/commit/795842f4096501fcefc1a7f535ccc8132feb31d7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/security/advisories/GHSA-hfc7-c5gv-8c2h",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/10/msg00008.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00080.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/commit/6b485b146a1b9d6ce72dfd7b5f36456c166e7a16",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/commit/795842f4096501fcefc1a7f535ccc8132feb31d7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FreeRDP/FreeRDP/security/advisories/GHSA-hfc7-c5gv-8c2h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/10/msg00008.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.825898",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "FreeRDP",
    "owner": "FreeRDP",
    "created_at": "2011-06-30T19:14:15Z",
    "updated_at": "2025-01-14T11:51:38Z",
    "pushed_at": "2025-01-14T11:16:30Z",
    "size": 68011,
    "stars": 11214,
    "forks": 14938,
    "open_issues": 248,
    "watchers": 11214,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "stable-1.0",
      "stable-1.1",
      "stable-2.0"
    ],
    "languages": {
      "C": 17349509,
      "C++": 685511,
      "CMake": 627854,
      "Objective-C": 540407,
      "Java": 373726,
      "HTML": 99135,
      "Shell": 51324,
      "Python": 46681,
      "Lua": 27393,
      "Roff": 26338,
      "Perl": 8044,
      "C#": 5756,
      "CSS": 5696,
      "Makefile": 2420,
      "Rich Text Format": 937
    },
    "commit_activity": {
      "total_commits_last_year": 2287,
      "avg_commits_per_week": 43.98076923076923,
      "days_active_last_year": 268
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:01:37.323973"
  }
}