{
  "cve_id": "CVE-2020-12887",
  "github_data": {
    "repository": "mjurczak/mbed-coap",
    "fix_commit": "4647a68e364401e81dbd370728127d844f221d93",
    "related_commits": [
      "4647a68e364401e81dbd370728127d844f221d93",
      "4647a68e364401e81dbd370728127d844f221d93"
    ],
    "patch_url": "https://github.com/mjurczak/mbed-coap/commit/4647a68e364401e81dbd370728127d844f221d93.patch",
    "fix_commit_details": {
      "sha": "4647a68e364401e81dbd370728127d844f221d93",
      "commit_date": "2020-05-11T20:46:09Z",
      "author": {
        "login": "mjurczak",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Implemented measures to prevent memory leaks in sn_coap_parser_options_parse().",
        "length": 483,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 71,
        "additions": 60,
        "deletions": 11
      },
      "files": [
        {
          "filename": "source/sn_coap_parser.c",
          "status": "modified",
          "additions": 60,
          "deletions": 11,
          "patch": "@@ -260,6 +260,29 @@ static uint32_t sn_coap_parser_options_parse_uint(uint8_t **packet_data_pptr, ui\n     return value;\n }\n \n+/**\n+ * \\brief Add u16 integers with overflow detection\n+ *\n+ * \\param a            first term of addition\n+ * \\param b            second term of addion\n+ * \\param result       pointer to the result variable\n+ *\n+ * \\return Return 0 if there was no overflow, -1 otherwise\n+ */\n+static int8_t sn_coap_parser_add_u16_limit(uint16_t a, uint16_t b, uint16_t *result)\n+{\n+    uint16_t c;\n+\n+    c = a + b;\n+    if (c < a || c < b)\n+    {\n+        return -1;\n+    }\n+\n+    *result = c;\n+\n+    return 0;\n+}\n \n /**\n  * \\brief Performs data packet pointer boundary check\n@@ -397,11 +420,15 @@ static int8_t parse_ext_option(uint16_t *dst, uint8_t **packet_data_pptr, uint8_\n             return -1;\n         }\n         else {\n-                option_number += option_ext;\n-                *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n-                                                               packet_data_start_ptr,\n-                                                               packet_len,\n-                                                               1);\n+            if(sn_coap_parser_add_u16_limit(option_number, option_ext, &option_number) != 0)\n+            {\n+                return -1;\n+            }\n+\n+            *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n+                                                            packet_data_start_ptr,\n+                                                            packet_len,\n+                                                            1);\n         }\n     } else if (option_number == 14) {\n             int8_t read_result = sn_coap_parser_read_packet_u16(&option_number,\n@@ -414,11 +441,15 @@ static int8_t parse_ext_option(uint16_t *dst, uint8_t **packet_data_pptr, uint8_\n                 return -1;\n             }\n             else {\n-            option_number += 269;\n-            *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n-                                                           packet_data_start_ptr,\n-                                                           packet_len,\n-                                                           2);\n+                if(sn_coap_parser_add_u16_limit(option_number, 269, &option_number) != 0)\n+                {\n+                    return -1;\n+                }\n+\n+                *message_left = sn_coap_parser_move_packet_ptr(packet_data_pptr,\n+                                                            packet_data_start_ptr,\n+                                                            packet_len,\n+                                                            2);\n             }\n     }\n     /* Option number 15 reserved for payload marker. This is handled as a error! */\n@@ -499,7 +530,10 @@ static int8_t sn_coap_parser_options_parse(struct coap_s *handle, uint8_t **pack\n             return -1;\n         }\n         /* Add previous option to option delta and get option number */\n-        option_number += previous_option_number;\n+        if(sn_coap_parser_add_u16_limit(option_number, previous_option_number, &option_number) != 0)\n+        {\n+            return -1;\n+        }\n \n         /* Add possible option length extension to resolve full length of the option */\n         option_parse_result = parse_ext_option(&option_len,\n@@ -577,6 +611,11 @@ static int8_t sn_coap_parser_options_parse(struct coap_s *handle, uint8_t **pack\n                 break;\n \n             case COAP_OPTION_ETAG:\n+                if (dst_coap_msg_ptr->options_list_ptr->etag_ptr)\n+                {\n+                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_ETAG exists!\");\n+                    return -1;\n+                }\n                 /* This is managed independently because User gives this option in one character table */\n                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr,\n                              message_left,\n@@ -628,6 +667,11 @@ static int8_t sn_coap_parser_options_parse(struct coap_s *handle, uint8_t **pack\n                 break;\n \n             case COAP_OPTION_LOCATION_QUERY:\n+                if (dst_coap_msg_ptr->options_list_ptr->location_query_ptr)\n+                {\n+                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_LOCATION_QUERY exists!\");\n+                    return -1;\n+                }\n                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                              &dst_coap_msg_ptr->options_list_ptr->location_query_ptr, &dst_coap_msg_ptr->options_list_ptr->location_query_len,\n                              COAP_OPTION_LOCATION_QUERY, option_len);\n@@ -639,6 +683,11 @@ static int8_t sn_coap_parser_options_parse(struct coap_s *handle, uint8_t **pack\n                 break;\n \n             case COAP_OPTION_URI_PATH:\n+                if (dst_coap_msg_ptr->uri_path_ptr)\n+                {\n+                    tr_error(\"sn_coap_parser_options_parse - COAP_OPTION_URI_PATH exists!\");\n+                    return -1;\n+                }\n                 ret_status = sn_coap_parser_options_parse_multiple_options(handle, packet_data_pptr, message_left,\n                              &dst_coap_msg_ptr->uri_path_ptr, &dst_coap_msg_ptr->uri_path_len,\n                              COAP_OPTION_URI_PATH, option_len);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "152cde0a79afc1e66ef36484172ee2f433777d0b",
            "date": "2020-05-07T10:23:04Z",
            "author_login": "mjurczak"
          },
          {
            "sha": "8949f3db2d0932bb6bae0ee1b4f78e4942911695",
            "date": "2020-05-07T04:32:12Z",
            "author_login": "teetak01"
          },
          {
            "sha": "c64e94caa46c73c0d5c73c9b6dba3c38a35850b7",
            "date": "2020-05-06T07:26:16Z",
            "author_login": "teetak01"
          },
          {
            "sha": "4ee0eb3b18267b5be0d42f00dc4cc0660679686b",
            "date": "2020-04-27T08:01:39Z",
            "author_login": "teetak01"
          },
          {
            "sha": "cf5ea631517b0a6f31bc82bf126c623d329b9187",
            "date": "2020-04-24T11:05:09Z",
            "author_login": "teetak01"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-190",
    "description": "Memory leaks were discovered in the CoAP library in Arm Mbed OS 5.15.3 when using the Arm mbed-coap library 5.1.5. The CoAP parser is responsible for parsing received CoAP packets. The function sn_coap_parser_options_parse() parses the CoAP option number field of all options present in the input packet. Each option number is calculated as a sum of the previous option number and a delta of the current option. The delta and the previous option number are expressed as unsigned 16-bit integers. Due to lack of overflow detection, it is possible to craft a packet that wraps the option number around and results in the same option number being processed again in a single packet. Certain options allocate memory by calling a memory allocation function. In the cases of COAP_OPTION_URI_QUERY, COAP_OPTION_URI_PATH, COAP_OPTION_LOCATION_QUERY, and COAP_OPTION_ETAG, there is no check on whether memory has already been allocated, which in conjunction with the option number integer overflow may lead to multiple assignments of allocated memory to a single pointer. This has been demonstrated to lead to memory leak by buffer orphaning. As a result, the memory is never freed.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-06-18T19:15:11.783",
    "last_modified": "2024-11-21T05:00:29.737",
    "fix_date": "2020-05-11T20:46:09Z"
  },
  "references": [
    {
      "url": "https://github.com/ARMmbed/mbed-coap/pull/116",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ARMmbed/mbed-os/issues/12930",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ARMmbed/mbed-os/issues/12957",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mjurczak/mbed-coap/commit/4647a68e364401e81dbd370728127d844f221d93",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ARMmbed/mbed-coap/pull/116",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ARMmbed/mbed-os/issues/12930",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ARMmbed/mbed-os/issues/12957",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mjurczak/mbed-coap/commit/4647a68e364401e81dbd370728127d844f221d93",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.861493",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mbed-coap",
    "owner": "mjurczak",
    "created_at": "2020-05-01T10:49:43Z",
    "updated_at": "2020-11-18T06:01:20Z",
    "pushed_at": "2020-06-18T04:38:47Z",
    "size": 5355,
    "stars": 0,
    "forks": 0,
    "open_issues": 0,
    "watchers": 0,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 313155,
      "C++": 131858,
      "Makefile": 21106,
      "Shell": 3202,
      "XSLT": 2798
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T22:31:35.806195"
  }
}