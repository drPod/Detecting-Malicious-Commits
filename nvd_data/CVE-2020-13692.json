{
  "cve_id": "CVE-2020-13692",
  "github_data": {
    "repository": "pgjdbc/pgjdbc",
    "fix_commit": "14b62aca4764d496813f55a43d050b017e01eb65",
    "related_commits": [
      "14b62aca4764d496813f55a43d050b017e01eb65",
      "14b62aca4764d496813f55a43d050b017e01eb65"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "14b62aca4764d496813f55a43d050b017e01eb65",
      "commit_date": "2020-06-01T12:54:32Z",
      "author": {
        "login": "sehrope",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-37xm-4h3m-5w3v",
        "length": 621,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 482,
        "additions": 453,
        "deletions": 29
      },
      "files": [
        {
          "filename": "pgjdbc/src/main/java/org/postgresql/PGProperty.java",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -661,6 +661,17 @@ public enum PGProperty {\n     \"false\",\n     \"Use SPNEGO in SSPI authentication requests\"),\n \n+  /**\n+   * Factory class to instantiate factories for XML processing.\n+   * The default factory disables external entity processing.\n+   * Legacy behavior with external entity processing can be enabled by specifying a value of LEGACY_INSECURE.\n+   * Or specify a custom class that implements {@code org.postgresql.xml.PGXmlFactoryFactory}.\n+   */\n+  XML_FACTORY_FACTORY(\n+    \"xmlFactoryFactory\",\n+    \"\",\n+    \"Factory class to instantiate factories for XML processing\"),\n+\n   ;\n \n   private final String name;"
        },
        {
          "filename": "pgjdbc/src/main/java/org/postgresql/core/BaseConnection.java",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -10,6 +10,7 @@\n import org.postgresql.jdbc.FieldMetadata;\n import org.postgresql.jdbc.TimestampUtils;\n import org.postgresql.util.LruCache;\n+import org.postgresql.xml.PGXmlFactoryFactory;\n \n import java.sql.Connection;\n import java.sql.ResultSet;\n@@ -212,4 +213,12 @@ CachedQuery createQuery(String sql, boolean escapeProcessing, boolean isParamete\n    * @see PGProperty#READ_ONLY_MODE\n    */\n   boolean hintReadOnly();\n+\n+  /**\n+   * Retrieve the factory to instantiate XML processing factories.\n+   *\n+   * @return The factory to use to instantiate XML processing factories\n+   * @throws SQLException if the class cannot be found or instantiated.\n+   */\n+  PGXmlFactoryFactory getXmlFactoryFactory() throws SQLException;\n }"
        },
        {
          "filename": "pgjdbc/src/main/java/org/postgresql/ds/common/BaseDataSource.java",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -1526,6 +1526,14 @@ public java.util.logging.Logger getParentLogger() {\n     return Logger.getLogger(\"org.postgresql\");\n   }\n \n+  public String getXmlFactoryFactory() {\n+    return PGProperty.XML_FACTORY_FACTORY.get(properties);\n+  }\n+\n+  public void setXmlFactoryFactory(String xmlFactoryFactory) {\n+    PGProperty.XML_FACTORY_FACTORY.set(properties, xmlFactoryFactory);\n+  }\n+\n   /*\n    * Alias methods below, these are to help with ease-of-use with other database tools / frameworks\n    * which expect normal java bean getters / setters to exist for the property names."
        },
        {
          "filename": "pgjdbc/src/main/java/org/postgresql/jdbc/PgConnection.java",
          "status": "modified",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -37,6 +37,9 @@\n import org.postgresql.util.PGobject;\n import org.postgresql.util.PSQLException;\n import org.postgresql.util.PSQLState;\n+import org.postgresql.xml.DefaultPGXmlFactoryFactory;\n+import org.postgresql.xml.LegacyInsecurePGXmlFactoryFactory;\n+import org.postgresql.xml.PGXmlFactoryFactory;\n \n import java.io.IOException;\n import java.sql.Array;\n@@ -156,6 +159,9 @@ private enum ReadOnlyBehavior {\n \n   private final LruCache<FieldMetadata.Key, FieldMetadata> fieldMetadataCache;\n \n+  private final String xmlFactoryFactoryClass;\n+  private PGXmlFactoryFactory xmlFactoryFactory;\n+\n   final CachedQuery borrowQuery(String sql) throws SQLException {\n     return queryExecutor.borrowQuery(sql);\n   }\n@@ -311,6 +317,8 @@ public TimeZone get() {\n         false);\n \n     replicationConnection = PGProperty.REPLICATION.get(info) != null;\n+\n+    xmlFactoryFactoryClass = PGProperty.XML_FACTORY_FACTORY.get(info);\n   }\n \n   private static ReadOnlyBehavior getReadOnlyBehavior(String property) {\n@@ -1823,4 +1831,36 @@ public final String getParameterStatus(String parameterName) {\n     return queryExecutor.getParameterStatus(parameterName);\n   }\n \n+  @Override\n+  public PGXmlFactoryFactory getXmlFactoryFactory() throws SQLException {\n+    if (xmlFactoryFactory == null) {\n+      if (xmlFactoryFactoryClass == null || xmlFactoryFactoryClass.equals(\"\")) {\n+        xmlFactoryFactory = DefaultPGXmlFactoryFactory.INSTANCE;\n+      } else if (xmlFactoryFactoryClass.equals(\"LEGACY_INSECURE\")) {\n+        xmlFactoryFactory = LegacyInsecurePGXmlFactoryFactory.INSTANCE;\n+      } else {\n+        Class<?> clazz;\n+        try {\n+          clazz = Class.forName(xmlFactoryFactoryClass);\n+        } catch (ClassNotFoundException ex) {\n+          throw new PSQLException(\n+              GT.tr(\"Could not instantiate xmlFactoryFactory: {0}\", xmlFactoryFactoryClass),\n+              PSQLState.INVALID_PARAMETER_VALUE, ex);\n+        }\n+        if (!clazz.isAssignableFrom(PGXmlFactoryFactory.class)) {\n+          throw new PSQLException(\n+              GT.tr(\"Connection property xmlFactoryFactory must implement PGXmlFactoryFactory: {0}\", xmlFactoryFactoryClass),\n+              PSQLState.INVALID_PARAMETER_VALUE);\n+        }\n+        try {\n+          xmlFactoryFactory = (PGXmlFactoryFactory) clazz.newInstance();\n+        } catch (Exception ex) {\n+          throw new PSQLException(\n+              GT.tr(\"Could not instantiate xmlFactoryFactory: {0}\", xmlFactoryFactoryClass),\n+              PSQLState.INVALID_PARAMETER_VALUE, ex);\n+        }\n+      }\n+    }\n+    return xmlFactoryFactory;\n+  }\n }"
        },
        {
          "filename": "pgjdbc/src/main/java/org/postgresql/jdbc/PgSQLXML.java",
          "status": "modified",
          "additions": 17,
          "deletions": 26,
          "patch": "@@ -9,10 +9,11 @@\n import org.postgresql.util.GT;\n import org.postgresql.util.PSQLException;\n import org.postgresql.util.PSQLState;\n+import org.postgresql.xml.DefaultPGXmlFactoryFactory;\n+import org.postgresql.xml.PGXmlFactoryFactory;\n \n-import org.xml.sax.ErrorHandler;\n import org.xml.sax.InputSource;\n-import org.xml.sax.SAXParseException;\n+import org.xml.sax.XMLReader;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n@@ -27,7 +28,6 @@\n import java.sql.SQLXML;\n \n import javax.xml.parsers.DocumentBuilder;\n-import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.stream.XMLInputFactory;\n import javax.xml.stream.XMLOutputFactory;\n import javax.xml.stream.XMLStreamException;\n@@ -77,6 +77,13 @@ private PgSQLXML(BaseConnection conn, String data, boolean initialized) {\n     this.freed = false;\n   }\n \n+  private PGXmlFactoryFactory getXmlFactoryFactory() throws SQLException {\n+    if (conn != null) {\n+      return conn.getXmlFactoryFactory();\n+    }\n+    return DefaultPGXmlFactoryFactory.INSTANCE;\n+  }\n+\n   @Override\n   public synchronized void free() {\n     freed = true;\n@@ -132,18 +139,17 @@ public synchronized <T extends Source> T getSource(Class<T> sourceClass) throws\n \n     try {\n       if (sourceClass == null || DOMSource.class.equals(sourceClass)) {\n-        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n-        DocumentBuilder builder = factory.newDocumentBuilder();\n-        builder.setErrorHandler(new NonPrintingErrorHandler());\n+        DocumentBuilder builder = getXmlFactoryFactory().newDocumentBuilder();\n         InputSource input = new InputSource(new StringReader(data));\n         return (T) new DOMSource(builder.parse(input));\n       } else if (SAXSource.class.equals(sourceClass)) {\n+        XMLReader reader = getXmlFactoryFactory().createXMLReader();\n         InputSource is = new InputSource(new StringReader(data));\n-        return (T) new SAXSource(is);\n+        return (T) new SAXSource(reader, is);\n       } else if (StreamSource.class.equals(sourceClass)) {\n         return (T) new StreamSource(new StringReader(data));\n       } else if (StAXSource.class.equals(sourceClass)) {\n-        XMLInputFactory xif = XMLInputFactory.newInstance();\n+        XMLInputFactory xif = getXmlFactoryFactory().newXMLInputFactory();\n         XMLStreamReader xsr = xif.createXMLStreamReader(new StringReader(data));\n         return (T) new StAXSource(xsr);\n       }\n@@ -191,8 +197,7 @@ public synchronized <T extends Result> T setResult(Class<T> resultClass) throws\n       return (T) domResult;\n     } else if (SAXResult.class.equals(resultClass)) {\n       try {\n-        SAXTransformerFactory transformerFactory =\n-            (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n+        SAXTransformerFactory transformerFactory = getXmlFactoryFactory().newSAXTransformerFactory();\n         TransformerHandler transformerHandler = transformerFactory.newTransformerHandler();\n         stringWriter = new StringWriter();\n         transformerHandler.setResult(new StreamResult(stringWriter));\n@@ -209,7 +214,7 @@ public synchronized <T extends Result> T setResult(Class<T> resultClass) throws\n     } else if (StAXResult.class.equals(resultClass)) {\n       stringWriter = new StringWriter();\n       try {\n-        XMLOutputFactory xof = XMLOutputFactory.newInstance();\n+        XMLOutputFactory xof = getXmlFactoryFactory().newXMLOutputFactory();\n         XMLStreamWriter xsw = xof.createXMLStreamWriter(stringWriter);\n         active = true;\n         return (T) new StAXResult(xsw);\n@@ -272,7 +277,7 @@ private void ensureInitialized() throws SQLException {\n       // and use the identify transform to get it into a\n       // friendlier result format.\n       try {\n-        TransformerFactory factory = TransformerFactory.newInstance();\n+        TransformerFactory factory = getXmlFactoryFactory().newTransformerFactory();\n         Transformer transformer = factory.newTransformer();\n         DOMSource domSource = new DOMSource(domResult.getNode());\n         StringWriter stringWriter = new StringWriter();\n@@ -298,18 +303,4 @@ private void initialize() throws SQLException {\n     }\n     initialized = true;\n   }\n-\n-  // Don't clutter System.err with errors the user can't silence.\n-  // If something bad really happens an exception will be thrown.\n-  static class NonPrintingErrorHandler implements ErrorHandler {\n-    public void error(SAXParseException e) {\n-    }\n-\n-    public void fatalError(SAXParseException e) {\n-    }\n-\n-    public void warning(SAXParseException e) {\n-    }\n-  }\n-\n }"
        },
        {
          "filename": "pgjdbc/src/main/java/org/postgresql/xml/DefaultPGXmlFactoryFactory.java",
          "status": "added",
          "additions": 140,
          "deletions": 0,
          "patch": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright (c) 2020, PostgreSQL Global Development Group\n+ * See the LICENSE file in the project root for more information.\n+ */\n+\n+package org.postgresql.xml;\n+\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.sax.SAXTransformerFactory;\n+\n+/**\n+ * Default implementation of PGXmlFactoryFactory that configures each factory per OWASP recommendations.\n+ *\n+ * @see <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html\">https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html</a>\n+ */\n+public class DefaultPGXmlFactoryFactory implements PGXmlFactoryFactory {\n+  public static final DefaultPGXmlFactoryFactory INSTANCE = new DefaultPGXmlFactoryFactory();\n+\n+  private DefaultPGXmlFactoryFactory() {\n+  }\n+\n+  private DocumentBuilderFactory getDocumentBuilderFactory() {\n+    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+    setFactoryProperties(factory);\n+    factory.setXIncludeAware(false);\n+    factory.setExpandEntityReferences(false);\n+    return factory;\n+  }\n+\n+  @Override\n+  public DocumentBuilder newDocumentBuilder() throws ParserConfigurationException {\n+    DocumentBuilder builder = getDocumentBuilderFactory().newDocumentBuilder();\n+    builder.setEntityResolver(EmptyStringEntityResolver.INSTANCE);\n+    builder.setErrorHandler(NullErrorHandler.INSTANCE);\n+    return builder;\n+  }\n+\n+  @Override\n+  public TransformerFactory newTransformerFactory() {\n+    TransformerFactory factory = TransformerFactory.newInstance();\n+    setFactoryProperties(factory);\n+    return factory;\n+  }\n+\n+  @Override\n+  public SAXTransformerFactory newSAXTransformerFactory() {\n+    SAXTransformerFactory factory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n+    setFactoryProperties(factory);\n+    return factory;\n+  }\n+\n+  @Override\n+  public XMLInputFactory newXMLInputFactory() {\n+    XMLInputFactory factory = XMLInputFactory.newInstance();\n+    setPropertyQuietly(factory, XMLInputFactory.SUPPORT_DTD, false);\n+    setPropertyQuietly(factory, XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);\n+    return factory;\n+  }\n+\n+  @Override\n+  public XMLOutputFactory newXMLOutputFactory() {\n+    XMLOutputFactory factory = XMLOutputFactory.newInstance();\n+    return factory;\n+  }\n+\n+  @Override\n+  public XMLReader createXMLReader() throws SAXException {\n+    XMLReader factory = XMLReaderFactory.createXMLReader();\n+    setFeatureQuietly(factory, \"http://apache.org/xml/features/disallow-doctype-decl\", true);\n+    setFeatureQuietly(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n+    setFeatureQuietly(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n+    setFeatureQuietly(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n+    factory.setErrorHandler(NullErrorHandler.INSTANCE);\n+    return factory;\n+  }\n+\n+  private static void setFeatureQuietly(Object factory, String name, boolean value) {\n+    try {\n+      if (factory instanceof DocumentBuilderFactory) {\n+        ((DocumentBuilderFactory) factory).setFeature(name, value);\n+      } else if (factory instanceof TransformerFactory) {\n+        ((TransformerFactory) factory).setFeature(name, value);\n+      } else if (factory instanceof XMLReader) {\n+        ((XMLReader) factory).setFeature(name, value);\n+      } else {\n+        throw new Error(\"Invalid factory class: \" + factory.getClass());\n+      }\n+      return;\n+    } catch (Exception ignore) {\n+    }\n+  }\n+\n+  private static void setAttributeQuietly(Object factory, String name, Object value) {\n+    try {\n+      if (factory instanceof DocumentBuilderFactory) {\n+        ((DocumentBuilderFactory) factory).setAttribute(name, value);\n+      } else if (factory instanceof TransformerFactory) {\n+        ((TransformerFactory) factory).setAttribute(name, value);\n+      } else {\n+        throw new Error(\"Invalid factory class: \" + factory.getClass());\n+      }\n+    } catch (Exception ignore) {\n+    }\n+  }\n+\n+  private static void setFactoryProperties(Object factory) {\n+    setFeatureQuietly(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+    setFeatureQuietly(factory, \"http://apache.org/xml/features/disallow-doctype-decl\", true);\n+    setFeatureQuietly(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n+    setFeatureQuietly(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n+    setFeatureQuietly(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n+    // Values from XMLConstants inlined for JDK 1.6 compatibility\n+    setAttributeQuietly(factory, \"http://javax.xml.XMLConstants/property/accessExternalDTD\", \"\");\n+    setAttributeQuietly(factory, \"http://javax.xml.XMLConstants/property/accessExternalSchema\", \"\");\n+    setAttributeQuietly(factory, \"http://javax.xml.XMLConstants/property/accessExternalStylesheet\", \"\");\n+  }\n+\n+  private static void setPropertyQuietly(Object factory, String name, Object value) {\n+    try {\n+      if (factory instanceof XMLReader) {\n+        ((XMLReader) factory).setProperty(name, value);\n+      } else if (factory instanceof XMLInputFactory) {\n+        ((XMLInputFactory) factory).setProperty(name, value);\n+      } else {\n+        throw new Error(\"Invalid factory class: \" + factory.getClass());\n+      }\n+    } catch (Exception ignore) {\n+    }\n+  }\n+}"
        },
        {
          "filename": "pgjdbc/src/main/java/org/postgresql/xml/EmptyStringEntityResolver.java",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright (c) 2020, PostgreSQL Global Development Group\n+ * See the LICENSE file in the project root for more information.\n+ */\n+\n+package org.postgresql.xml;\n+\n+import org.xml.sax.EntityResolver;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+public class EmptyStringEntityResolver implements EntityResolver {\n+  public static final EmptyStringEntityResolver INSTANCE = new EmptyStringEntityResolver();\n+\n+  @Override\n+  public InputSource resolveEntity(String publicId, String systemId)\n+      throws SAXException, IOException {\n+    return new InputSource(new StringReader(\"\"));\n+  }\n+}"
        },
        {
          "filename": "pgjdbc/src/main/java/org/postgresql/xml/LegacyInsecurePGXmlFactoryFactory.java",
          "status": "added",
          "additions": 57,
          "deletions": 0,
          "patch": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) 2020, PostgreSQL Global Development Group\n+ * See the LICENSE file in the project root for more information.\n+ */\n+\n+package org.postgresql.xml;\n+\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.sax.SAXTransformerFactory;\n+\n+public class LegacyInsecurePGXmlFactoryFactory implements PGXmlFactoryFactory {\n+  public static final LegacyInsecurePGXmlFactoryFactory INSTANCE = new LegacyInsecurePGXmlFactoryFactory();\n+\n+  private LegacyInsecurePGXmlFactoryFactory() {\n+  }\n+\n+  @Override\n+  public DocumentBuilder newDocumentBuilder() throws ParserConfigurationException {\n+    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+    builder.setErrorHandler(NullErrorHandler.INSTANCE);\n+    return builder;\n+  }\n+\n+  @Override\n+  public TransformerFactory newTransformerFactory() {\n+    return TransformerFactory.newInstance();\n+  }\n+\n+  @Override\n+  public SAXTransformerFactory newSAXTransformerFactory() {\n+    return (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n+  }\n+\n+  @Override\n+  public XMLInputFactory newXMLInputFactory() {\n+    return XMLInputFactory.newInstance();\n+  }\n+\n+  @Override\n+  public XMLOutputFactory newXMLOutputFactory() {\n+    return XMLOutputFactory.newInstance();\n+  }\n+\n+  @Override\n+  public XMLReader createXMLReader() throws SAXException {\n+    return XMLReaderFactory.createXMLReader();\n+  }\n+}"
        },
        {
          "filename": "pgjdbc/src/main/java/org/postgresql/xml/NullErrorHandler.java",
          "status": "added",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (c) 2020, PostgreSQL Global Development Group\n+ * See the LICENSE file in the project root for more information.\n+ */\n+\n+package org.postgresql.xml;\n+\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXParseException;\n+\n+/**\n+ * Error handler that silently suppresses all errors.\n+ */\n+public class NullErrorHandler implements ErrorHandler {\n+  public static final NullErrorHandler INSTANCE = new NullErrorHandler();\n+\n+  public void error(SAXParseException e) {\n+  }\n+\n+  public void fatalError(SAXParseException e) {\n+  }\n+\n+  public void warning(SAXParseException e) {\n+  }\n+}"
        },
        {
          "filename": "pgjdbc/src/main/java/org/postgresql/xml/PGXmlFactoryFactory.java",
          "status": "added",
          "additions": 30,
          "deletions": 0,
          "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2020, PostgreSQL Global Development Group\n+ * See the LICENSE file in the project root for more information.\n+ */\n+\n+package org.postgresql.xml;\n+\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.sax.SAXTransformerFactory;\n+\n+public interface PGXmlFactoryFactory {\n+  DocumentBuilder newDocumentBuilder() throws ParserConfigurationException;\n+\n+  TransformerFactory newTransformerFactory();\n+\n+  SAXTransformerFactory newSAXTransformerFactory();\n+\n+  XMLInputFactory newXMLInputFactory();\n+\n+  XMLOutputFactory newXMLOutputFactory();\n+\n+  XMLReader createXMLReader() throws SAXException;\n+}"
        },
        {
          "filename": "pgjdbc/src/test/java/org/postgresql/jdbc/PgSQLXMLTest.java",
          "status": "modified",
          "additions": 93,
          "deletions": 3,
          "patch": "@@ -7,37 +7,55 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n import static org.junit.Assert.assertTrue;\n \n+import org.postgresql.PGProperty;\n+import org.postgresql.core.BaseConnection;\n import org.postgresql.test.TestUtil;\n import org.postgresql.test.jdbc2.BaseTest4;\n \n import org.junit.Before;\n import org.junit.Test;\n \n+import java.io.StringWriter;\n import java.io.Writer;\n+import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.sql.SQLXML;\n import java.sql.Statement;\n+import java.util.Properties;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.sax.SAXSource;\n+import javax.xml.transform.stax.StAXSource;\n+import javax.xml.transform.stream.StreamResult;\n \n public class PgSQLXMLTest extends BaseTest4 {\n \n   @Override\n   @Before\n   public void setUp() throws Exception {\n     super.setUp();\n-    TestUtil.createTempTable(con, \"xmltab\",\"x xml\");\n+    TestUtil.createTempTable(con, \"xmltab\", \"x xml\");\n   }\n \n   @Test\n-  public void setCharacterStream() throws  Exception {\n+  public void setCharacterStream() throws Exception {\n     String exmplar = \"<x>value</x>\";\n     SQLXML pgSQLXML = con.createSQLXML();\n     Writer writer = pgSQLXML.setCharacterStream();\n     writer.write(exmplar);\n     PreparedStatement preparedStatement = con.prepareStatement(\"insert into xmltab values (?)\");\n-    preparedStatement.setSQLXML(1,pgSQLXML);\n+    preparedStatement.setSQLXML(1, pgSQLXML);\n     preparedStatement.execute();\n \n     Statement statement = con.createStatement();\n@@ -47,4 +65,76 @@ public void setCharacterStream() throws  Exception {\n     assertNotNull(result);\n     assertEquals(exmplar, result.getString());\n   }\n+\n+  private static final String LICENSE_URL =\n+      PgSQLXMLTest.class.getClassLoader().getResource(\"META-INF/LICENSE\").toString();\n+  private static final String XXE_EXAMPLE =\n+      \"<!DOCTYPE foo [<!ELEMENT foo ANY >\\n\"\n+      + \"<!ENTITY xxe SYSTEM \\\"\" + LICENSE_URL + \"\\\">]>\"\n+      + \"<foo>&xxe;</foo>\";\n+\n+  @Test\n+  public void testLegacyXxe() throws Exception {\n+    Properties props = new Properties();\n+    props.setProperty(PGProperty.XML_FACTORY_FACTORY.getName(), \"LEGACY_INSECURE\");\n+    try (Connection conn = TestUtil.openDB(props)) {\n+      BaseConnection baseConn = conn.unwrap(BaseConnection.class);\n+      PgSQLXML xml = new PgSQLXML(baseConn, XXE_EXAMPLE);\n+      xml.getSource(null);\n+    }\n+  }\n+\n+  private static String sourceToString(Source source) throws TransformerException {\n+    StringWriter sw = new StringWriter();\n+    Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+    transformer.transform(source, new StreamResult(sw));\n+    return sw.toString();\n+  }\n+\n+  private <T extends Source> void testGetSourceXxe(Class<T> clazz) {\n+    SQLException ex = assertThrows(SQLException.class, () -> {\n+      PgSQLXML xml = new PgSQLXML(null, XXE_EXAMPLE);\n+      xml.getSource(clazz);\n+    });\n+    String message = ex.getCause().getMessage();\n+    assertTrue(\n+        \"Expected to get a <<DOCTYPE disallowed>> SAXParseException. Actual message is \" + message,\n+        message.startsWith(\"DOCTYPE is disallowed\"));\n+  }\n+\n+  @Test\n+  public void testGetSourceXxeNull() throws Exception {\n+    testGetSourceXxe(null);\n+  }\n+\n+  @Test\n+  public void testGetSourceXxeDOMSource() throws Exception {\n+    testGetSourceXxe(DOMSource.class);\n+  }\n+\n+  @Test\n+  public void testGetSourceXxeSAXSource() throws Exception {\n+    PgSQLXML xml = new PgSQLXML(null, XXE_EXAMPLE);\n+    SAXSource source = xml.getSource(SAXSource.class);\n+    TransformerException ex = assertThrows(TransformerException.class, () -> {\n+      sourceToString(source);\n+    });\n+    String message = ex.getCause().getMessage();\n+    assertTrue(\n+        \"Expected to get a <<DOCTYPE disallowed>> TransformerException. Actual message is \" + message,\n+        message.startsWith(\"DOCTYPE is disallowed\"));\n+  }\n+\n+  @Test\n+  public void testGetSourceXxeStAXSource() throws Exception {\n+    PgSQLXML xml = new PgSQLXML(null, XXE_EXAMPLE);\n+    StAXSource source = xml.getSource(StAXSource.class);\n+    XMLStreamReader reader = source.getXMLStreamReader();\n+    // STAX will not throw XXE error until we actually read the element\n+    assertThrows(XMLStreamException.class, () -> {\n+      while (reader.hasNext()) {\n+        reader.next();\n+      }\n+    });\n+  }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 6,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "882b97f99a94b75753fc565ea65491c608c83d46",
            "date": "2025-01-24T08:54:34Z",
            "author_login": "vlsi"
          },
          {
            "sha": "581e3a54742a286ea4e1bf414a68bf724fee6a91",
            "date": "2025-01-24T12:01:28Z",
            "author_login": "vlsi"
          },
          {
            "sha": "f6a70eaacfcf0436538904e9359d2f22c3de65ba",
            "date": "2025-01-24T10:46:50Z",
            "author_login": "vlsi"
          },
          {
            "sha": "9239620623f93a8aaf735b9f934c452e1f906540",
            "date": "2025-01-23T21:47:53Z",
            "author_login": "renovate-bot"
          },
          {
            "sha": "169c4f4ef490f0f48dcfe207154e37abd2b627b8",
            "date": "2025-01-20T05:56:21Z",
            "author_login": "renovate-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:H",
    "cwe_id": "CWE-611",
    "description": "PostgreSQL JDBC Driver (aka PgJDBC) before 42.2.13 allows XXE.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-06-04T16:15:12.657",
    "last_modified": "2024-11-21T05:01:44.940",
    "fix_date": "2020-06-01T12:54:32Z"
  },
  "references": [
    {
      "url": "https://github.com/pgjdbc/pgjdbc/commit/14b62aca4764d496813f55a43d050b017e01eb65",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jdbc.postgresql.org/documentation/changelog.html#version_42.2.13",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/r00bcc6b2da972e0d6332a4ebc7807e17305d8b8e7fb2ae63d2a3cbfb%40%3Ccommits.camel.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r01ae1b3d981cf2e563e9b5b0a6ea54fb3cac8e9a0512ee5269e3420e%40%3Ccommits.camel.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r0478a1aa9ae0dbd79d8f7b38d0d93fa933ac232e2b430b6f31a103c0%40%3Ccommits.camel.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r1aae77706aab7d89b4fe19be468fc3c73e9cc84ff79cc2c3bd07c05a%40%3Ccommits.camel.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r4bdea189c9991aae7a929d28f575ec46e49ed3d68fa5235825f38a4f%40%3Cnotifications.netbeans.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r631f967db6260d6178740a3314a35d9421facd8212e62320275fa78e%40%3Ccommits.camel.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r7f6d019839df17646ffd0046a99146cacf40492a6c92078f65fd32e0%40%3Ccommits.camel.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb89f92aba44f524d5c270e0c44ca7aec4704691c37fe106cf73ec977%40%3Cnotifications.netbeans.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rfe363bf3a46d440ad57fd05c0e313025c7218364bbdc5fd8622ea7ae%40%3Ccommits.camel.apache.org%3E",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DCCAPM6FSNOC272DLSNQ6YHXS3OMHGJC/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20200619-0005/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5196",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pgjdbc/pgjdbc/commit/14b62aca4764d496813f55a43d050b017e01eb65",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://jdbc.postgresql.org/documentation/changelog.html#version_42.2.13",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/r00bcc6b2da972e0d6332a4ebc7807e17305d8b8e7fb2ae63d2a3cbfb%40%3Ccommits.camel.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r01ae1b3d981cf2e563e9b5b0a6ea54fb3cac8e9a0512ee5269e3420e%40%3Ccommits.camel.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r0478a1aa9ae0dbd79d8f7b38d0d93fa933ac232e2b430b6f31a103c0%40%3Ccommits.camel.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r1aae77706aab7d89b4fe19be468fc3c73e9cc84ff79cc2c3bd07c05a%40%3Ccommits.camel.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r4bdea189c9991aae7a929d28f575ec46e49ed3d68fa5235825f38a4f%40%3Cnotifications.netbeans.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r631f967db6260d6178740a3314a35d9421facd8212e62320275fa78e%40%3Ccommits.camel.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r7f6d019839df17646ffd0046a99146cacf40492a6c92078f65fd32e0%40%3Ccommits.camel.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb89f92aba44f524d5c270e0c44ca7aec4704691c37fe106cf73ec977%40%3Cnotifications.netbeans.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rfe363bf3a46d440ad57fd05c0e313025c7218364bbdc5fd8622ea7ae%40%3Ccommits.camel.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DCCAPM6FSNOC272DLSNQ6YHXS3OMHGJC/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20200619-0005/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5196",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.834060",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "pgjdbc",
    "owner": "pgjdbc",
    "created_at": "2012-02-06T19:30:35Z",
    "updated_at": "2025-01-24T13:08:01Z",
    "pushed_at": "2025-01-24T13:07:56Z",
    "size": 45446,
    "stars": 1533,
    "forks": 860,
    "open_issues": 556,
    "watchers": 1533,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 4263274,
      "Groovy": 20585,
      "Shell": 17728,
      "Smarty": 6366,
      "Kotlin": 4797,
      "Makefile": 2901,
      "Perl": 2844,
      "Scala": 2761,
      "Dockerfile": 2126
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-2-clause"
    },
    "collected_at": "2025-01-26T07:35:30.826249"
  }
}