{
  "cve_id": "CVE-2020-14214",
  "github_data": {
    "repository": "zammad/zammad",
    "fix_commit": "40148392426f626cb779c76d6bdda0f67bd6069d",
    "related_commits": [
      "40148392426f626cb779c76d6bdda0f67bd6069d",
      "40148392426f626cb779c76d6bdda0f67bd6069d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "40148392426f626cb779c76d6bdda0f67bd6069d",
      "commit_date": "2020-06-02T12:21:08Z",
      "author": {
        "login": "rolfschmidt",
        "type": "User",
        "stats": {
          "total_commits": 863,
          "average_weekly_commits": 1.289985052316891,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 237
        }
      },
      "commit_message": {
        "title": "Fixes issue #2907 - Password strength settings are ignored when creating new customer accounts. Make login available to verified users only.",
        "length": 140,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 319,
        "additions": 120,
        "deletions": 199
      },
      "files": [
        {
          "filename": "app/assets/javascripts/app/controllers/email_verify.coffee",
          "status": "modified",
          "additions": 17,
          "deletions": 40,
          "patch": "@@ -1,7 +1,6 @@\n class Index extends App.Controller\n   constructor: ->\n     super\n-    @authenticateCheckRedirect()\n     @verifyCall()\n \n   verifyCall: =>\n@@ -11,45 +10,23 @@ class Index extends App.Controller\n       url:         \"#{@apiPath}/users/email_verify\"\n       data:        JSON.stringify(token: @token)\n       processData: true\n-      success:     @success\n-      error:       @error\n-    )\n-\n-  success: =>\n-    new Success(el: @el)\n-\n-  error: =>\n-    new Fail(el: @el)\n-\n-class Success extends App.ControllerContent\n-  constructor: ->\n-    super\n-    @render()\n-\n-    # rerender view, e. g. on language change\n-    @bind 'ui:rerender', =>\n-      @render()\n-\n-  render: =>\n-    @renderScreenSuccess(\n-      detail: 'Woo hoo! Your email address has been verified!'\n-    )\n-    delay = =>\n-      @navigate '#'\n-    @delay(delay, 20500)\n-\n-class Fail extends App.ControllerContent\n-  constructor: ->\n-    super\n-    @render()\n-\n-    # rerender view, e. g. on language change\n-    @bind 'ui:rerender', =>\n-      @render()\n-\n-  render: =>\n-    @renderScreenError(\n-      detail: 'Unable to verify email. Please contact your administrator.'\n+      success: (data, status, xhr) =>\n+        App.Auth.loginCheck()\n+        @navigate '#'\n+\n+        @notify\n+          type:      'success'\n+          msg:       App.i18n.translateContent('Woo hoo! Your email address has been verified!')\n+          removeAll: true\n+          timeout: 2000\n+\n+      error: (data, status, xhr) =>\n+        @navigate '#'\n+\n+        @notify\n+          type:      'error'\n+          msg:       App.i18n.translateContent('Unable to verify email. Please contact your administrator.')\n+          removeAll: true\n     )\n \n App.Config.set('email_verify/:token', Index, 'Routes')"
        },
        {
          "filename": "app/assets/javascripts/app/controllers/signup.coffee",
          "status": "modified",
          "additions": 29,
          "deletions": 18,
          "patch": "@@ -2,6 +2,7 @@ class Index extends App.ControllerContent\n   events:\n     'submit form': 'submit'\n     'click .submit': 'submit'\n+    'click .js-submitResend': 'resend'\n     'click .cancel': 'cancel'\n \n   constructor: ->\n@@ -61,31 +62,41 @@ class Index extends App.ControllerContent\n     # save user\n     user.save(\n       done: (r) =>\n-        App.Auth.login(\n-          data:\n-            username: @params.login\n-            password: @params.password\n-          success: @success\n-          error: @error\n+        @html App.view('signup/verify')(\n+          email: @params.email\n         )\n       fail: (settings, details) =>\n         @formEnable(e)\n-        @form.showAlert(details.error_human || details.error || 'Unable to update object!')\n+        if _.isArray(details.error)\n+          @form.showAlert( App.i18n.translateInline( details.error[0], details.error[1] ) )\n+        else\n+          @form.showAlert(details.error_human || details.error || 'Unable to update object!')\n     )\n \n-  success: (data, status, xhr) =>\n+  resend: (e) =>\n+    e.preventDefault()\n+    @formDisable(e)\n+    @resendParams = @formParam(e.target)\n+\n+    @ajax(\n+      id:          'email_verify_send'\n+      type:        'POST'\n+      url:         @apiPath + '/users/email_verify_send'\n+      data:        JSON.stringify(email: @resendParams.email)\n+      processData: true\n+      success: (data, status, xhr) =>\n+        @formEnable(e)\n \n-    # login check\n-    App.Auth.loginCheck()\n+        # add notify\n+        @notify\n+          type:      'success'\n+          msg:       App.i18n.translateContent('Email sent to \"%s\". Please verify your email address.', @params.email)\n+          removeAll: true\n \n-    # add notify\n-    @notify\n-      type:      'success'\n-      msg:       App.i18n.translateContent('Thanks for joining. Email sent to \"%s\". Please verify your email address.', @params.email)\n-      removeAll: true\n-\n-    # redirect to #\n-    @navigate '#'\n+        if data.token && @Config.get('developer_mode') is true\n+          @navigate \"#email_verify/#{data.token}\"\n+      error: @error\n+    )\n \n   error: (xhr, statusText, error) =>\n     detailsRaw = xhr.responseText"
        },
        {
          "filename": "app/assets/javascripts/app/controllers/user_profile.coffee",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -77,6 +77,8 @@ class App.UserProfile extends App.Controller\n class ActionRow extends App.ObserverActionRow\n   model: 'User'\n   observe:\n+    verified: true\n+    source: true\n     organization_id: true\n \n   showHistory: (user) =>\n@@ -100,6 +102,25 @@ class ActionRow extends App.ObserverActionRow\n   newTicket: (user) =>\n     @navigate(\"ticket/create/customer/#{user.id}\")\n \n+  resendVerificationEmail: (user) =>\n+    @ajax(\n+      id:          'email_verify_send'\n+      type:        'POST'\n+      url:         @apiPath + '/users/email_verify_send'\n+      data:        JSON.stringify(email: user.email)\n+      processData: true\n+      success: (data, status, xhr) =>\n+        @notify\n+          type:      'success'\n+          msg:       App.i18n.translateContent('Email sent to \"%s\". Please let the user verify his email address.', user.email)\n+          removeAll: true\n+      error: (data, status, xhr) =>\n+        @notify\n+          type:      'error'\n+          msg:       App.i18n.translateContent('Failed to sent Email \"%s\". Please contact an administrator.', user.email)\n+          removeAll: true\n+    )\n+\n   actions: (user) =>\n     actions = [\n       {\n@@ -121,6 +142,13 @@ class ActionRow extends App.ObserverActionRow\n         callback: @editUser\n       }\n \n+      if user.verified isnt true && user.source is 'signup'\n+        actions.push({\n+          name:     'resend_verification_email'\n+          title:    'Resend verification email'\n+          callback: @resendVerificationEmail\n+        })\n+\n     actions\n \n class Object extends App.ObserverController"
        },
        {
          "filename": "app/assets/javascripts/app/controllers/widget/user_signup_check.coffee",
          "status": "removed",
          "additions": 0,
          "deletions": 82,
          "patch": "@@ -1,82 +0,0 @@\n-class Widget extends App.Controller\n-  constructor: ->\n-\n-    # for browser test\n-    App.Event.bind('user_signup_verify', (user) ->\n-      new Modal(user: user)\n-      'user_signup_verify'\n-    )\n-\n-    App.Event.bind('auth:login', (user) =>\n-      return if !user\n-      @verifyLater(user.id)\n-      'user_signup_verify'\n-    )\n-    user = App.User.current()\n-    @verifyLater(user.id) if user?\n-\n-  verifyLater: (userId) =>\n-    delay = =>\n-      @verify(userId)\n-    @delay(delay, 5000, 'user_signup_verify_dialog')\n-\n-  verify: (userId) ->\n-    return if !userId\n-    return if !App.User.exists(userId)\n-    user = App.User.find(userId)\n-    return if user.source isnt 'signup'\n-    return if user.verified is true\n-    currentTime = new Date().getTime()\n-    createdAt = Date.parse(user.created_at)\n-    diff = currentTime - createdAt\n-    max = 1000 * 60 * 30 # show message if account is older then 30 minutes\n-    return if diff < max\n-    new Modal(user: user)\n-\n-class Modal extends App.ControllerModal\n-  backdrop: false\n-  keyboard: false\n-  head: 'Account not verified'\n-  small: true\n-  buttonClose: false\n-  buttonCancel: false\n-  buttonSubmit: 'Resend verification email'\n-\n-  constructor: ->\n-    super\n-\n-  content: =>\n-    if !@sent\n-      return App.i18n.translateContent('Your account has not been verified. Please click the link in the verification email.')\n-    content = App.i18n.translateContent('We\\'ve sent an email to _%s_. Click the link in the email to verify your account.', @user.email)\n-    content += '<br><br>'\n-    content += App.i18n.translateContent('If you don\\'t see the email, check other places it might be, like your junk, spam, social, or other folders.')\n-    content\n-\n-  onSubmit: =>\n-    @ajax(\n-      id:          'email_verify_send'\n-      type:        'POST'\n-      url:         @apiPath + '/users/email_verify_send'\n-      data:        JSON.stringify(email: @user.email)\n-      processData: true\n-      success:     @success\n-      error:       @error\n-    )\n-\n-  success: (data) =>\n-    @sent = true\n-    @update()\n-\n-    # if in developer mode, redirect to verify\n-    if data.token && @Config.get('developer_mode') is true\n-      redirect = =>\n-        @close()\n-        @navigate \"#email_verify/#{data.token}\"\n-      App.Delay.set(redirect, 4000)\n-\n-  error: =>\n-    @contentInline = App.i18n.translateContent('Unable to send verify email.')\n-    @update()\n-\n-App.Config.set('user_signup', Widget, 'Widgets')"
        },
        {
          "filename": "app/assets/javascripts/app/views/signup/verify.jst.eco",
          "status": "added",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -0,0 +1,16 @@\n+<div class=\"signup fullscreen\">\n+  <div class=\"fullscreen-center\">\n+    <div class=\"hero-unit fullscreen-body\">\n+      <h1><%- @T('Registration successful!') %></h1>\n+      <p><%- @T('Thanks for joining. Email sent to \"%s\".', @email) %></p>\n+      <p><%- @T('Please click the link in the verification email.') %> <%- @T('If you don\\'t see the email, check other places it might be, like your junk, spam, social, or other folders.') %></p>\n+      <form>\n+        <input type=\"hidden\" name=\"email\" value=\"<%= @email %>\">\n+        <div class=\"form-controls\">\n+          <a class=\"btn btn--text btn--subtle js-cancel\" href=\"#login\"><%- @T('Go Back') %></a>\n+          <button class=\"btn btn--primary js-submitResend align-right\"><%- @T('Resend verification email') %></button>\n+        </div>\n+      </form>\n+    </div>\n+  </div>\n+</div>"
        },
        {
          "filename": "app/controllers/users_controller.rb",
          "status": "modified",
          "additions": 16,
          "deletions": 10,
          "patch": "@@ -4,7 +4,7 @@ class UsersController < ApplicationController\n   include ChecksUserAttributesByCurrentUserPermission\n \n   prepend_before_action -> { authorize! }, only: %i[import_example import_start search history]\n-  prepend_before_action :authentication_check, except: %i[create password_reset_send password_reset_verify image]\n+  prepend_before_action :authentication_check, except: %i[create password_reset_send password_reset_verify image email_verify email_verify_send]\n   prepend_before_action :authentication_check_only, only: [:create]\n \n   # @path       [GET] /users\n@@ -140,6 +140,15 @@ def create\n       exists = User.exists?(email: clean_params[:email].downcase.strip)\n       raise Exceptions::UnprocessableEntity, \"Email address '#{clean_params[:email].downcase.strip}' is already used for other user.\" if exists\n \n+      # check password policy\n+      if clean_params[:password].present?\n+        result = password_policy(clean_params[:password])\n+        if result != true\n+          render json: { error: result }, status: :unprocessable_entity\n+          return\n+        end\n+      end\n+\n       user = User.new(clean_params)\n       user.associations_from_param(params)\n       user.updated_by_id = 1\n@@ -499,6 +508,8 @@ def email_verify\n     user = User.signup_verify_via_token(params[:token], current_user)\n     raise Exceptions::UnprocessableEntity, 'Invalid token!' if !user\n \n+    current_user_set(user)\n+\n     render json: { message: 'ok', user_email: user.email }, status: :ok\n   end\n \n@@ -527,17 +538,12 @@ def email_verify_send\n     raise Exceptions::UnprocessableEntity, 'No email!' if !params[:email]\n \n     user = User.find_by(email: params[:email].downcase)\n-    if !user\n+    if !user || user.verified == true\n       # result is always positive to avoid leaking of existing user accounts\n       render json: { message: 'ok' }, status: :ok\n       return\n     end\n \n-    #if user.verified == true\n-    #  render json: { error: 'Already verified!' }, status: :unprocessable_entity\n-    #  return\n-    #end\n-\n     Token.create(action: 'Signup', user_id: user.id)\n \n     result = User.signup_new_token(user)\n@@ -1029,13 +1035,13 @@ def import_start\n \n   def password_policy(password)\n     if Setting.get('password_min_size').to_i > password.length\n-      return [\"Can\\'t update password, it must be at least %s characters long!\", Setting.get('password_min_size')]\n+      return ['Invalid password, it must be at least %s characters long!', Setting.get('password_min_size')]\n     end\n     if Setting.get('password_need_digit').to_i == 1 && password !~ /\\d/\n-      return [\"Can't update password, it must contain at least 1 digit!\"]\n+      return ['Invalid password, it must contain at least 1 digit!']\n     end\n     if Setting.get('password_min_2_lower_2_upper_characters').to_i == 1 && ( password !~ /[A-Z].*[A-Z]/ || password !~ /[a-z].*[a-z]/ )\n-      return [\"Can't update password, it must contain at least 2 lowercase and 2 uppercase characters!\"]\n+      return ['Invalid password, it must contain at least 2 lowercase and 2 uppercase characters!']\n     end\n \n     true"
        },
        {
          "filename": "app/models/user.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -586,7 +586,7 @@ def self.password_reset_via_token(token, password)\n     return if !user\n \n     # reset password\n-    user.update!(password: password)\n+    user.update!(password: password, verified: true)\n \n     # delete token\n     Token.find_by(action: 'PasswordReset', name: token).destroy"
        },
        {
          "filename": "lib/auth/internal.rb",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -12,7 +12,11 @@ def valid?(user, password)\n         return true\n       end\n \n-      PasswordHash.verified?(user.password, password)\n+      password_verified = PasswordHash.verified?(user.password, password)\n+\n+      raise Exceptions::NotAuthorized, 'Please verify your account before you can login!' if !user.verified && user.source == 'signup' && password_verified\n+\n+      password_verified\n     end\n \n     private"
        },
        {
          "filename": "test/browser/signup_password_change_and_reset_test.rb",
          "status": "modified",
          "additions": 8,
          "deletions": 47,
          "patch": "@@ -23,65 +23,26 @@ def test_signup\n     )\n     set(\n       css:   'input[name=\"password\"]',\n-      value: 'some-pass',\n+      value: 'some-pass-123',\n     )\n     set(\n       css:   'input[name=\"password_confirm\"]',\n-      value: 'some-pass',\n+      value: 'some-pass-123',\n     )\n     click(css: 'button.js-submit')\n \n-    watch_for_disappear(\n-      css:     '.signup',\n-      timeout: 10,\n-    )\n-\n-    match(\n-      css:       '.user-menu .user a',\n-      value:     signup_user_email,\n-      attribute: 'title',\n-    )\n-\n-    # check email verify\n-    location(url: \"#{browser_url}#email_verify/not_existing\")\n     watch_for(\n       css:   '#content',\n-      value: 'Unable to verify email',\n+      value: 'Registration successful!',\n     )\n-    logout()\n \n-    login(\n-      username: signup_user_email,\n-      password: 'some-pass',\n-      url:      \"#{browser_url}#email_verify/not_existing2\",\n-    )\n-    watch_for(\n-      css:   '#content',\n-      value: 'Unable to verify email',\n-    )\n-    execute(\n-      js: 'App.Event.trigger(\"user_signup_verify\", App.Session.get())',\n-    )\n-    modal_ready()\n-    click(css: '.modal .js-submit')\n+    # auto login via token trick in dev mode\n+    click(css: '.signup .js-submitResend')\n \n-    execute(\n-      js: 'App.Auth.logout()',\n-    )\n-    sleep 6\n     watch_for(\n-      css: '#login',\n-    )\n-    login(\n-      username: signup_user_email,\n-      password: 'some-pass',\n-    )\n-    watch_for(\n-      css:   '#content',\n-      value: 'Your email address has been verified',\n+      css:   '.content.active',\n+      value: 'Welcome!',\n     )\n-    modal_disappear()\n-    sleep 2\n \n     # change password\n     click(css: '.navbar-items-personal .user a')\n@@ -109,7 +70,7 @@ def test_signup\n \n     set(\n       css:   'input[name=\"password_old\"]',\n-      value: 'some-pass',\n+      value: 'some-pass-123',\n     )\n     set(\n       css:   'input[name=\"password_new_confirm\"]',"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 7,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "98ea2e924935a8ae2cfc92f6b4d4434ea1e2efe8",
            "date": "2025-01-25T15:52:03Z",
            "author_login": "mgruner"
          },
          {
            "sha": "7f5fac4eb074b03907a0210b1bc63aa407dea3cb",
            "date": "2025-01-24T22:49:19Z",
            "author_login": "vBenTec"
          },
          {
            "sha": "260dd9c94c8e088e2b26aed3e1f0db1d0c2ac298",
            "date": "2025-01-24T16:50:05Z",
            "author_login": "rolfschmidt"
          },
          {
            "sha": "c2395f4e1d43fbee37c70b2e8cff3107dcb2d655",
            "date": "2025-01-24T15:34:11Z",
            "author_login": "rolfschmidt"
          },
          {
            "sha": "7c1489eea5893e737652dc19607f4fe688db926b",
            "date": "2025-01-24T15:14:07Z",
            "author_login": "dominikklein"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-863",
    "description": "Zammad before 3.3.1, when Domain Based Assignment is enabled, relies on a claimed e-mail address for authorization decisions. An attacker can register a new account that will have access to all tickets of an arbitrary Organization.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-06-16T23:15:11.237",
    "last_modified": "2024-11-21T05:02:53.030",
    "fix_date": "2020-06-02T12:21:08Z"
  },
  "references": [
    {
      "url": "https://github.com/zammad/zammad/commit/40148392426f626cb779c76d6bdda0f67bd6069d",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://zammad.com/news/security-advisory-zaa-2020-12",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/zammad/zammad/commit/40148392426f626cb779c76d6bdda0f67bd6069d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://zammad.com/news/security-advisory-zaa-2020-12",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.856124",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "zammad",
    "owner": "zammad",
    "created_at": "2012-04-02T08:50:33Z",
    "updated_at": "2025-01-14T16:43:45Z",
    "pushed_at": "2025-01-14T12:55:08Z",
    "size": 614035,
    "stars": 4579,
    "forks": 780,
    "open_issues": 473,
    "watchers": 4579,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "Ruby": 12092834,
      "TypeScript": 4400117,
      "CoffeeScript": 2299732,
      "Vue": 1438308,
      "JavaScript": 1294158,
      "HTML": 469188,
      "SCSS": 284398,
      "Shell": 75274,
      "CSS": 44030,
      "PHP": 7732,
      "Raku": 3038,
      "Dockerfile": 1289,
      "Perl": 1236,
      "Procfile": 275
    },
    "commit_activity": {
      "total_commits_last_year": 1712,
      "avg_commits_per_week": 32.92307692307692,
      "days_active_last_year": 252
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T16:48:55.646726"
  }
}