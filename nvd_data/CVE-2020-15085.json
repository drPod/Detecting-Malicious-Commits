{
  "cve_id": "CVE-2020-15085",
  "github_data": {
    "repository": "mirumee/saleor-storefront",
    "fix_commit": "7c331e1be805022c9a7be719bd69d050b2577458",
    "related_commits": [
      "7c331e1be805022c9a7be719bd69d050b2577458",
      "7c331e1be805022c9a7be719bd69d050b2577458"
    ],
    "patch_url": "https://github.com/mirumee/saleor-storefront/commit/7c331e1be805022c9a7be719bd69d050b2577458.patch",
    "fix_commit_details": {
      "sha": "7c331e1be805022c9a7be719bd69d050b2577458",
      "commit_date": "2020-06-30T10:44:53Z",
      "author": {
        "login": "patrys",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-4279-h39w-2jqm",
        "length": 83,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 191,
        "additions": 131,
        "deletions": 60
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -4,6 +4,10 @@ All notable, unreleased changes to this project will be documented in this file.\n \n ## [Unreleased]\n \n+## 2.10.3\n+\n+- Stop storing plain text passwords in localStorage - by @dominik-zeglen\n+\n ## 2.10.2\n \n - Fix fetching `quantityAvailable` field - #738 by @AlicjaSzu"
        },
        {
          "filename": "src/@sdk/api/APIProxy.ts",
          "status": "modified",
          "additions": 107,
          "deletions": 60,
          "patch": "@@ -8,7 +8,12 @@ import { GraphQLError } from \"graphql\";\n \n import { fireSignOut, getAuthToken, setAuthToken } from \"../auth\";\n import { MUTATIONS } from \"../mutations\";\n-import { TokenAuth } from \"../mutations/gqlTypes/TokenAuth\";\n+import { PasswordChange } from \"../mutations/gqlTypes/PasswordChange\";\n+import { SetPassword } from \"../mutations/gqlTypes/SetPassword\";\n+import {\n+  TokenAuth,\n+  TokenAuth_tokenCreatte,\n+} from \"../mutations/gqlTypes/TokenAuth\";\n import { QUERIES } from \"../queries\";\n import { UserDetails } from \"../queries/gqlTypes/UserDetails\";\n import { RequireAtLeastOne } from \"../tsHelpers\";\n@@ -25,67 +30,70 @@ import {\n   isDataEmpty,\n   mergeEdges,\n } from \"../utils\";\n+import { SetPasswordChange, SetPasswordResult, SignIn } from \"./types\";\n \n export class APIProxy {\n-  getAttributes = this.watchQuery(QUERIES.Attributes, data => data.attributes);\n+  getAttributes = this.watchQuery(\n+    QUERIES.Attributes,\n+    (data) => data.attributes\n+  );\n \n   getProductDetails = this.watchQuery(\n     QUERIES.ProductDetails,\n-    data => data.product\n+    (data) => data.product\n   );\n \n-  getProductList = this.watchQuery(QUERIES.ProductList, data => data.products);\n+  getProductList = this.watchQuery(\n+    QUERIES.ProductList,\n+    (data) => data.products\n+  );\n \n   getCategoryDetails = this.watchQuery(\n     QUERIES.CategoryDetails,\n-    data => data.category\n+    (data) => data.category\n   );\n \n-  getOrdersByUser = this.watchQuery(QUERIES.OrdersByUser, data =>\n+  getOrdersByUser = this.watchQuery(QUERIES.OrdersByUser, (data) =>\n     data.me ? data.me.orders : null\n   );\n \n   getOrderDetails = this.watchQuery(\n     QUERIES.OrderDetails,\n-    data => data.orderByToken\n+    (data) => data.orderByToken\n   );\n \n   getVariantsProducts = this.watchQuery(\n     QUERIES.VariantsProducts,\n-    data => data.productVariants\n+    (data) => data.productVariants\n   );\n \n-  getShopDetails = this.watchQuery(QUERIES.GetShopDetails, data => data);\n+  getShopDetails = this.watchQuery(QUERIES.GetShopDetails, (data) => data);\n \n   setUserDefaultAddress = this.fireQuery(\n     MUTATIONS.AddressTypeUpdate,\n-    data => data!.accountSetDefaultAddress\n+    (data) => data!.accountSetDefaultAddress\n   );\n \n   setDeleteUserAddress = this.fireQuery(\n     MUTATIONS.DeleteUserAddress,\n-    data => data!.accountAddressDelete\n+    (data) => data!.accountAddressDelete\n   );\n \n   setCreateUserAddress = this.fireQuery(\n     MUTATIONS.CreateUserAddress,\n-    data => data!.accountAddressCreate\n+    (data) => data!.accountAddressCreate\n   );\n \n   setUpdateuserAddress = this.fireQuery(\n     MUTATIONS.UpdateUserAddress,\n-    data => data!.accountAddressUpdate\n+    (data) => data!.accountAddressUpdate\n   );\n \n   setAccountUpdate = this.fireQuery(\n     MUTATIONS.AccountUpdate,\n-    data => data!.accountUpdate\n+    (data) => data!.accountUpdate\n   );\n \n-  setPasswordChange = this.fireQuery(MUTATIONS.PasswordChange, data => data);\n-\n-  setPassword = this.fireQuery(MUTATIONS.SetPassword, data => data);\n-\n   client: ApolloClient<any>;\n \n   constructor(client: ApolloClient<any>) {\n@@ -99,7 +107,7 @@ export class APIProxy {\n     }\n   ) => {\n     if (this.isLoggedIn()) {\n-      return this.watchQuery(QUERIES.UserDetails, data => data.me)(\n+      return this.watchQuery(QUERIES.UserDetails, (data) => data.me)(\n         variables,\n         options\n       );\n@@ -116,47 +124,40 @@ export class APIProxy {\n     };\n   };\n \n-  signIn = (\n+  signIn = async (\n     variables: InferOptions<MUTATIONS[\"TokenAuth\"]>[\"variables\"],\n     options?: Omit<InferOptions<MUTATIONS[\"TokenAuth\"]>, \"variables\">\n-  ) =>\n-    new Promise<{ data: TokenAuth[\"tokenCreate\"] }>(async (resolve, reject) => {\n-      try {\n-        this.client.resetStore();\n-\n-        const data = await this.fireQuery(\n-          MUTATIONS.TokenAuth,\n-          data => data!.tokenCreate\n-        )(variables, {\n-          ...options,\n-          update: (proxy, data) => {\n-            const handledData = handleDataErrors(\n-              (data: any) => data.tokenCreate,\n-              data.data,\n-              data.errors\n-            );\n-            if (!handledData.errors && handledData.data) {\n-              setAuthToken(handledData.data.token);\n-              if (window.PasswordCredential && variables) {\n-                navigator.credentials.store(\n-                  new window.PasswordCredential({\n-                    id: variables.email,\n-                    password: variables.password,\n-                  })\n-                );\n-              }\n-            }\n-            if (options && options.update) {\n-              options.update(proxy, data);\n-            }\n-          },\n-        });\n-\n-        resolve(data);\n-      } catch (e) {\n-        reject(e);\n-      }\n+  ): Promise<SignIn> => {\n+    await this.client.resetStore();\n+    let result: {\n+      data: TokenAuth_tokenCreate | null;\n+    } | null = null;\n+\n+    result = await this.fireQuery(\n+      MUTATIONS.TokenAuth,\n+      (mutationData) => mutationData!.tokenCreate\n+    )(variables, {\n+      ...options,\n+      fetchPolicy: \"no-cache\",\n     });\n+    const { data } = result;\n+\n+    if (data?.token && data.errors.length === 0) {\n+      setAuthToken(data.token);\n+      if (window.PasswordCredential && variables) {\n+        navigator.credentials.store(\n+          new window.PasswordCredential({\n+            id: variables.email,\n+            password: variables.password,\n+          })\n+        );\n+      }\n+    }\n+    return {\n+      data,\n+      error: null,\n+    };\n+  };\n \n   signOut = () =>\n     new Promise(async (resolve, reject) => {\n@@ -169,6 +170,52 @@ export class APIProxy {\n       }\n     });\n \n+  setPassword = async (\n+    variables: InferOptions<MUTATIONS[\"SetPassword\"]>[\"variables\"],\n+    options?: Omit<InferOptions<MUTATIONS[\"SetPassword\"]>, \"variables\">\n+  ): Promise<SetPasswordResult> => {\n+    let result: {\n+      data: SetPassword | null;\n+    } | null = null;\n+\n+    result = await this.fireQuery(MUTATIONS.SetPassword, (data) => data!)(\n+      variables,\n+      {\n+        ...options,\n+        fetchPolicy: \"no-cache\",\n+      }\n+    );\n+    const { data } = result;\n+\n+    return {\n+      data,\n+      error: null,\n+    };\n+  };\n+\n+  setPasswordChange = async (\n+    variables: InferOptions<MUTATIONS[\"PasswordChange\"]>[\"variables\"],\n+    options?: Omit<InferOptions<MUTATIONS[\"PasswordChange\"]>, \"variables\">\n+  ): Promise<SetPasswordChange> => {\n+    let result: {\n+      data: PasswordChange | null;\n+    } | null = null;\n+\n+    result = await this.fireQuery(MUTATIONS.PasswordChange, (data) => data!)(\n+      variables,\n+      {\n+        ...options,\n+        fetchPolicy: \"no-cache\",\n+      }\n+    );\n+    const { data } = result;\n+\n+    return {\n+      data,\n+      error: null,\n+    };\n+  };\n+\n   attachAuthListener = (callback: (authenticated: boolean) => void) => {\n     const eventHandler = () => {\n       callback(this.isLoggedIn());\n@@ -226,7 +273,7 @@ export class APIProxy {\n       }\n \n       const subscription = observable.subscribe(\n-        result => {\n+        (result) => {\n           const { data, errors: apolloErrors } = result;\n           const errorHandledData = handleDataErrors(\n             mapFn,\n@@ -246,7 +293,7 @@ export class APIProxy {\n             }\n           }\n         },\n-        error => {\n+        (error) => {\n           if (onError) {\n             onError(error);\n           }\n@@ -281,7 +328,7 @@ export class APIProxy {\n                 );\n \n                 // use new result for metadata and mutate existing data\n-                Object.keys(prevResultRef).forEach(key => {\n+                Object.keys(prevResultRef).forEach((key) => {\n                   prevResultRef[key] = newResultRef[key];\n                 });\n                 prevResultRef.edges = mergedEdges;"
        },
        {
          "filename": "src/@sdk/api/types.ts",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -1,3 +1,8 @@\n+import { ApolloError } from \"apollo-client\";\n+import { PasswordChange } from \"../mutations/gqlTypes/PasswordChange\";\n+import { SetPassword } from \"../mutations/gqlTypes/SetPassword\";\n+import { TokenAuth_tokenCreate } from \"../mutations/gqlTypes/TokenAuth\";\n+\n export interface ErrorResponse<T> {\n   error?: any;\n   type?: T;\n@@ -15,3 +20,18 @@ export interface FunctionRunResponse<D, F> {\n \n export type PromiseQueuedResponse = Promise<FunctionQueueResponse>;\n export type PromiseRunResponse<D, F> = Promise<FunctionRunResponse<D, F>>;\n+\n+export type SignIn = {\n+  data: TokenAuth_tokenCreate | null;\n+  error: ApolloError | null;\n+} | null;\n+\n+export type SetPasswordChange = {\n+  data: PasswordChange | null;\n+  error: ApolloError | null;\n+} | null;\n+\n+export type SetPasswordResult = {\n+  data: SetPassword | null;\n+  error: ApolloError | null;\n+} | null;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "52ea1dd236433466b7506c286c2f82488d35d883",
            "date": "2022-02-15T08:19:58Z",
            "author_login": "krzysztofwolski"
          },
          {
            "sha": "a2ee94b423b9c74f4048e8a5924cab17b12627f7",
            "date": "2021-10-19T16:38:45Z",
            "author_login": "mirekm"
          },
          {
            "sha": "c6fe25d428767977862abc77e8b267762358a7dc",
            "date": "2021-10-06T13:40:23Z",
            "author_login": "patrys"
          },
          {
            "sha": "ad676ebe6469198c73faa4bc80eeb04d2a05a930",
            "date": "2021-09-16T09:00:20Z",
            "author_login": "orzechdev"
          },
          {
            "sha": "ac803a8a86909cf81dde695cb1e4205cfd779fdc",
            "date": "2021-09-10T12:26:41Z",
            "author_login": "jwm0"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:L/A:N",
    "cwe_id": "CWE-312",
    "description": "In Saleor Storefront before version 2.10.3, request data used to authenticate customers was inadvertently cached in the browser's local storage mechanism, including credentials. A malicious user with direct access to the browser could extract the email and password. In versions prior to 2.10.0 persisted the cache even after the user logged out. This is fixed in version 2.10.3. A workaround is to manually clear application data (browser's local storage) after logging into Saleor Storefront.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-06-30T17:15:10.797",
    "last_modified": "2024-11-21T05:04:46.887",
    "fix_date": "2020-06-30T10:44:53Z"
  },
  "references": [
    {
      "url": "https://github.com/mirumee/saleor-storefront/blob/master/CHANGELOG.md#2103",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mirumee/saleor-storefront/commit/7c331e1be805022c9a7be719bd69d050b2577458",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mirumee/saleor-storefront/security/advisories/GHSA-4279-h39w-2jqm",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mirumee/saleor-storefront/blob/master/CHANGELOG.md#2103",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mirumee/saleor-storefront/commit/7c331e1be805022c9a7be719bd69d050b2577458",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mirumee/saleor-storefront/security/advisories/GHSA-4279-h39w-2jqm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:01.347180",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "saleor-storefront",
    "owner": "mirumee",
    "created_at": "2018-08-01T10:16:33Z",
    "updated_at": "2024-12-16T05:58:00Z",
    "pushed_at": "2022-06-25T07:59:19Z",
    "size": 21704,
    "stars": 769,
    "forks": 674,
    "open_issues": 84,
    "watchers": 769,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 964511,
      "SCSS": 50928,
      "JavaScript": 48187,
      "Handlebars": 994,
      "Dockerfile": 376,
      "Shell": 320,
      "HTML": 88
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T21:56:33.969195"
  }
}