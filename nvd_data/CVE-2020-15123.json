{
  "cve_id": "CVE-2020-15123",
  "github_data": {
    "repository": "codecov/codecov-node",
    "fix_commit": "c0711c656686e902af2cd92d6aecc8074de4d83d",
    "related_commits": [
      "c0711c656686e902af2cd92d6aecc8074de4d83d",
      "c0711c656686e902af2cd92d6aecc8074de4d83d"
    ],
    "patch_url": "https://github.com/codecov/codecov-node/commit/c0711c656686e902af2cd92d6aecc8074de4d83d.patch",
    "fix_commit_details": {
      "sha": "c0711c656686e902af2cd92d6aecc8074de4d83d",
      "commit_date": "2020-07-17T16:20:03Z",
      "author": {
        "login": "drazisil",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Switch from execSync to execFileSync (#180)",
        "length": 854,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 64,
        "additions": 46,
        "deletions": 18
      },
      "files": [
        {
          "filename": ".idea/.gitignore",
          "status": "added",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -0,0 +1,7 @@\n+# Default ignored files\n+/shelf/\n+/workspace.xml\n+# Editor-based HTTP Client requests\n+/httpRequests/\n+\n+.idea/\n\\ No newline at end of file"
        },
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -116,3 +116,5 @@ If you're seeing an **HTTP 400 error when uploading reports to S3**, make sure y\n - v3.6.3 Fix for AWS Codebuild & package updates\n - v3.6.4 Fix Cirrus CI\n - v3.7.0 Remove the X-Amz-Acl: public-read header\n+\n+."
        },
        {
          "filename": "lib/codecov.js",
          "status": "modified",
          "additions": 37,
          "deletions": 18,
          "patch": "@@ -4,21 +4,23 @@ var request = require('teeny-request').teenyRequest\n var urlgrey = require('urlgrey')\n var jsYaml = require('js-yaml')\n var walk = require('ignore-walk')\n+var execFileSync = require('child_process').execFileSync\n var execSync = require('child_process').execSync\n \n var detectProvider = require('./detect')\n \n var version = 'v' + require('../package.json').version\n \n-var patterns,\n-  more_patterns = ''\n+var patterns = ''\n+var more_patterns = ''\n+var winPatterns = ''\n \n var isWindows =\n   process.platform.match(/win32/) || process.platform.match(/win64/)\n \n if (!isWindows) {\n-  patterns =\n-    \"-type f \\\\( -name '*coverage.*' \" +\n+  patterns = (\n+    \"-type f -name '*coverage.*' \" +\n     \"-or -name 'nosetests.xml' \" +\n     \"-or -name 'jacoco*.xml' \" +\n     \"-or -name 'clover.xml' \" +\n@@ -29,7 +31,7 @@ if (!isWindows) {\n     \"-or -name '*.lcov' \" +\n     \"-or -name 'gcov.info' \" +\n     \"-or -name '*.gcov' \" +\n-    \"-or -name '*.lst' \\\\) \" +\n+    \"-or -name '*.lst' \" +\n     \"-not -name '*.sh' \" +\n     \"-not -name '*.data' \" +\n     \"-not -name '*.py' \" +\n@@ -76,9 +78,10 @@ if (!isWindows) {\n     \"-not -path '*/$bower_components/*' \" +\n     \"-not -path '*/node_modules/*' \" +\n     \"-not -path '*/conftest_*.c.gcov'\"\n+  ).split(' ')\n } else {\n-  patterns =\n-    '/a-d /b /s *coverage.* ' +\n+  winPatterns = (\n+    '/a:-d /b /s *coverage.* ' +\n     '/s nosetests.xml ' +\n     '/s jacoco*.xml ' +\n     '/s clover.xml ' +\n@@ -136,6 +139,7 @@ if (!isWindows) {\n     '| findstr /i /v \\\\\\\\$bower_components\\\\ ' +\n     '| findstr /i /v \\\\node_modules\\\\ ' +\n     '| findstr /i /v \\\\conftest_.*\\\\.c\\\\.gcov '\n+  ).split(' ')\n }\n \n var sendToCodecovV2 = function(\n@@ -355,7 +359,7 @@ var upload = function(args, on_success, on_failure) {\n   console.log('==> Building file structure')\n   try {\n     upload +=\n-      execSync('git ls-files || hg locate', { cwd: root })\n+      execFileSync('git', ['ls-files', '||', 'hg', 'locate'], { cwd: root })\n         .toString()\n         .trim() + '\\n<<<<<< network\\n'\n   } catch (err) {\n@@ -414,7 +418,7 @@ var upload = function(args, on_success, on_failure) {\n       }\n       debug.push(gcov)\n       console.log('    $ ' + gcov)\n-      execSync(gcov)\n+      execFileSync(gcov)\n     } catch (e) {\n       console.log('    Failed to run gcov command.')\n     }\n@@ -431,19 +435,23 @@ var upload = function(args, on_success, on_failure) {\n       .toString()\n       .trim()\n   } else {\n-    bowerrc = execSync('if exist .bowerrc type .bowerrc', { cwd: root })\n-      .toString()\n-      .trim()\n+    bowerrc = fs.existsSync('.bowerrc')\n   }\n   if (bowerrc) {\n     bowerrc = JSON.parse(bowerrc).directory\n     if (bowerrc) {\n       if (!isWindows) {\n-        more_patterns =\n-          \" -not -path '*/\" + bowerrc.toString().replace(/\\/$/, '') + \"/*'\"\n+        more_patterns = (\n+          \" -not -path '*/\" +\n+          bowerrc.toString().replace(/\\/$/, '') +\n+          \"/*'\"\n+        ).split(' ')\n       } else {\n-        more_patterns =\n-          '| findstr /i /v \\\\' + bowerrc.toString().replace(/\\/$/, '') + '\\\\'\n+        more_patterns = (\n+          '| findstr /i /v \\\\' +\n+          bowerrc.toString().replace(/\\/$/, '') +\n+          '\\\\'\n+        ).split(' ')\n       }\n     }\n   }\n@@ -474,15 +482,26 @@ var upload = function(args, on_success, on_failure) {\n   } else if ((args.options.disable || '').split(',').indexOf('search') === -1) {\n     console.log('==> Scanning for reports')\n     var _files\n+    var _findArgs\n     if (!isWindows) {\n-      _files = execSync('find ' + root + ' ' + patterns + more_patterns)\n+      // @TODO support for a root directory\n+      // It's not straightforward due to the nature of the find command\n+      _findArgs = [root].concat(patterns)\n+      if (more_patterns) {\n+        _findArgs.concat(more_patterns)\n+      }\n+      _files = execFileSync('find', _findArgs)\n         .toString()\n         .trim()\n         .split('\\n')\n     } else {\n       // @TODO support for a root directory\n       // It's not straightforward due to the nature of the dir command\n-      _files = execSync('dir ' + patterns + more_patterns)\n+      _findArgs = [root].concat(winPatterns)\n+      if (more_patterns) {\n+        _findArgs.concat(more_patterns)\n+      }\n+      _files = execSync('dir ' + winPatterns.join(' ') + more_patterns)\n         .toString()\n         .trim()\n         .split('\\r\\n')"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7c698b77e3b04abc24a8bbf2e0606d6f77cdba21",
            "date": "2022-02-16T14:52:25Z",
            "author_login": "drazisil-codecov"
          },
          {
            "sha": "4700f3370bd9e11d42a77089a091ade47e085bdc",
            "date": "2022-02-16T14:31:48Z",
            "author_login": "drazisil-codecov"
          },
          {
            "sha": "f45c820d8e7909c8afea02fe9ce7f203838dcb87",
            "date": "2022-02-09T06:01:02Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "86ef8486d549a7b4c49fe78d51d16ff121f2222e",
            "date": "2022-01-19T01:34:26Z",
            "author_login": "drazisil-codecov"
          },
          {
            "sha": "0d8367bd15cd9167a80ff8b94891012aeba0348e",
            "date": "2022-01-18T23:00:54Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-78",
    "description": "In codecov (npm package) before version 3.7.1 the upload method has a command injection vulnerability. Clients of the codecov-node library are unlikely to be aware of this, so they might unwittingly write code that contains a vulnerability. A similar CVE (CVE-2020-7597 for GHSA-5q88-cjfq-g2mh) was issued but the fix was incomplete. It only blocked &, and command injection is still possible using backticks instead to bypass the sanitizer. The attack surface is low in this case. Particularly in the standard use of codecov, where the module is used directly in a build pipeline, not built against as a library in another application that may supply malicious input and perform command injection.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-07-20T18:15:12.250",
    "last_modified": "2024-11-21T05:04:52.170",
    "fix_date": "2020-07-17T16:20:03Z"
  },
  "references": [
    {
      "url": "https://github.com/advisories/GHSA-5q88-cjfq-g2mh",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codecov/codecov-node/commit/c0711c656686e902af2cd92d6aecc8074de4d83d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codecov/codecov-node/pull/180",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codecov/codecov-node/security/advisories/GHSA-xp63-6vf5-xf3v",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lgtm.com/query/7714424068617023832",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/advisories/GHSA-5q88-cjfq-g2mh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codecov/codecov-node/commit/c0711c656686e902af2cd92d6aecc8074de4d83d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codecov/codecov-node/pull/180",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/codecov/codecov-node/security/advisories/GHSA-xp63-6vf5-xf3v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lgtm.com/query/7714424068617023832",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:01.371340",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "codecov-node",
    "owner": "codecov",
    "created_at": "2015-10-16T08:27:38Z",
    "updated_at": "2024-11-24T22:29:05Z",
    "pushed_at": "2023-01-06T06:01:14Z",
    "size": 1537,
    "stars": 294,
    "forks": 114,
    "open_issues": 20,
    "watchers": 294,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 67377
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T21:51:12.287116"
  }
}