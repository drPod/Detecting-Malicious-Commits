{
  "cve_id": "CVE-2020-15126",
  "github_data": {
    "repository": "parse-community/parse-server",
    "fix_commit": "78239ac9071167fdf243c55ae4bc9a2c0b0d89aa",
    "related_commits": [
      "78239ac9071167fdf243c55ae4bc9a2c0b0d89aa",
      "78239ac9071167fdf243c55ae4bc9a2c0b0d89aa"
    ],
    "patch_url": "https://github.com/parse-community/parse-server/commit/78239ac9071167fdf243c55ae4bc9a2c0b0d89aa.patch",
    "fix_commit_details": {
      "sha": "78239ac9071167fdf243c55ae4bc9a2c0b0d89aa",
      "commit_date": "2020-07-17T16:50:41Z",
      "author": {
        "login": "Moumouls",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-236h-rqv8-8q73",
        "length": 97,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 407,
        "additions": 226,
        "deletions": 181
      },
      "files": [
        {
          "filename": "spec/ParseGraphQLServer.spec.js",
          "status": "modified",
          "additions": 187,
          "deletions": 143,
          "patch": "@@ -170,7 +170,7 @@ describe('ParseGraphQLServer', () => {\n         new ParseGraphQLServer(parseServer, {\n           graphQLPath: 'somepath',\n         }).applyGraphQL({\n-          use: (path) => {\n+          use: path => {\n             useCount++;\n             expect(path).toEqual('somepath');\n           },\n@@ -208,7 +208,7 @@ describe('ParseGraphQLServer', () => {\n           graphQLPath: 'graphQL',\n           playgroundPath: 'somepath',\n         }).applyPlayground({\n-          get: (path) => {\n+          get: path => {\n             useCount++;\n             expect(path).toEqual('somepath');\n           },\n@@ -436,9 +436,7 @@ describe('ParseGraphQLServer', () => {\n       parseGraphQLServer.applyGraphQL(expressApp);\n       parseGraphQLServer.applyPlayground(expressApp);\n       parseGraphQLServer.createSubscriptions(httpServer);\n-      await new Promise((resolve) =>\n-        httpServer.listen({ port: 13377 }, resolve)\n-      );\n+      await new Promise(resolve => httpServer.listen({ port: 13377 }, resolve));\n \n       const subscriptionClient = new SubscriptionClient(\n         'ws://localhost:13377/subscriptions',\n@@ -506,7 +504,7 @@ describe('ParseGraphQLServer', () => {\n         let checked = false;\n         const apolloClient = new ApolloClient({\n           link: new ApolloLink((operation, forward) => {\n-            return forward(operation).map((response) => {\n+            return forward(operation).map(response => {\n               const context = operation.getContext();\n               const {\n                 response: { headers },\n@@ -541,7 +539,7 @@ describe('ParseGraphQLServer', () => {\n       it('should handle Parse headers', async () => {\n         let checked = false;\n         const originalGetGraphQLOptions = parseGraphQLServer._getGraphQLOptions;\n-        parseGraphQLServer._getGraphQLOptions = async (req) => {\n+        parseGraphQLServer._getGraphQLOptions = async req => {\n           expect(req.info).toBeDefined();\n           expect(req.config).toBeDefined();\n           expect(req.auth).toBeDefined();\n@@ -643,7 +641,7 @@ describe('ParseGraphQLServer', () => {\n             })\n           ).data['__type'];\n           expect(fileType.kind).toEqual('OBJECT');\n-          expect(fileType.fields.map((field) => field.name).sort()).toEqual([\n+          expect(fileType.fields.map(field => field.name).sort()).toEqual([\n             'name',\n             'url',\n           ]);\n@@ -665,7 +663,7 @@ describe('ParseGraphQLServer', () => {\n             })\n           ).data['__type'];\n           expect(classType.kind).toEqual('INTERFACE');\n-          expect(classType.fields.map((field) => field.name).sort()).toEqual([\n+          expect(classType.fields.map(field => field.name).sort()).toEqual([\n             'ACL',\n             'createdAt',\n             'objectId',\n@@ -690,7 +688,7 @@ describe('ParseGraphQLServer', () => {\n           ).data['__type'];\n           expect(readPreferenceType.kind).toEqual('ENUM');\n           expect(\n-            readPreferenceType.enumValues.map((value) => value.name).sort()\n+            readPreferenceType.enumValues.map(value => value.name).sort()\n           ).toEqual([\n             'NEAREST',\n             'PRIMARY',\n@@ -731,7 +729,7 @@ describe('ParseGraphQLServer', () => {\n                 }\n               `,\n             })\n-          ).data['__schema'].types.map((type) => type.name);\n+          ).data['__schema'].types.map(type => type.name);\n \n           const expectedTypes = [\n             'ParseObject',\n@@ -741,7 +739,7 @@ describe('ParseGraphQLServer', () => {\n             'Upload',\n           ];\n           expect(\n-            expectedTypes.every((type) => schemaTypes.indexOf(type) !== -1)\n+            expectedTypes.every(type => schemaTypes.indexOf(type) !== -1)\n           ).toBeTruthy(JSON.stringify(schemaTypes.types));\n         });\n       });\n@@ -768,7 +766,7 @@ describe('ParseGraphQLServer', () => {\n                 }\n               `,\n             })\n-          ).data['__schema'].types.map((type) => type.name);\n+          ).data['__schema'].types.map(type => type.name);\n \n           expect(schemaTypes).toContain('Node');\n         });\n@@ -786,7 +784,7 @@ describe('ParseGraphQLServer', () => {\n                 }\n               `,\n             })\n-          ).data['__type'].fields.map((field) => field.name);\n+          ).data['__type'].fields.map(field => field.name);\n \n           expect(queryFields).toContain('node');\n         });\n@@ -804,7 +802,7 @@ describe('ParseGraphQLServer', () => {\n                 }\n               `,\n             })\n-          ).data['__type'].fields.map((field) => field.name);\n+          ).data['__type'].fields.map(field => field.name);\n \n           expect(userFields).toContain('id');\n           expect(userFields).toContain('objectId');\n@@ -824,7 +822,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].inputFields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(createFileInputFields).toEqual(['clientMutationId', 'upload']);\n@@ -844,7 +842,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].fields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(createFilePayloadFields).toEqual([\n@@ -869,7 +867,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].inputFields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(callFunctionInputFields).toEqual([\n@@ -895,7 +893,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].fields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(callFunctionPayloadFields).toEqual([\n@@ -918,7 +916,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].inputFields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(inputFields).toEqual(['clientMutationId', 'fields']);\n@@ -938,7 +936,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].fields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(payloadFields).toEqual(['clientMutationId', 'viewer']);\n@@ -958,7 +956,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].inputFields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(inputFields).toEqual([\n@@ -982,7 +980,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].fields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(payloadFields).toEqual(['clientMutationId', 'viewer']);\n@@ -1002,7 +1000,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].inputFields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(inputFields).toEqual(['clientMutationId']);\n@@ -1022,7 +1020,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].fields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(payloadFields).toEqual(['clientMutationId', 'viewer']);\n@@ -1042,7 +1040,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].inputFields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(inputFields).toEqual([\n@@ -1066,7 +1064,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].fields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(payloadFields).toEqual(['class', 'clientMutationId']);\n@@ -1086,7 +1084,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].inputFields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(inputFields).toEqual([\n@@ -1110,7 +1108,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].fields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(payloadFields).toEqual(['class', 'clientMutationId']);\n@@ -1130,7 +1128,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].inputFields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(inputFields).toEqual(['clientMutationId', 'name']);\n@@ -1150,7 +1148,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].fields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(payloadFields).toEqual(['class', 'clientMutationId']);\n@@ -1175,7 +1173,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].inputFields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(createObjectInputFields).toEqual([\n@@ -1203,7 +1201,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].fields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(createObjectPayloadFields).toEqual([\n@@ -1231,7 +1229,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].inputFields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(createObjectInputFields).toEqual([\n@@ -1260,7 +1258,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].fields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(createObjectPayloadFields).toEqual([\n@@ -1288,7 +1286,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].inputFields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(createObjectInputFields).toEqual(['clientMutationId', 'id']);\n@@ -1313,7 +1311,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'].fields\n-            .map((field) => field.name)\n+            .map(field => field.name)\n             .sort();\n \n           expect(createObjectPayloadFields).toEqual([\n@@ -1339,7 +1337,7 @@ describe('ParseGraphQLServer', () => {\n                 }\n               `,\n             })\n-          ).data['__schema'].types.map((type) => type.name);\n+          ).data['__schema'].types.map(type => type.name);\n \n           const expectedTypes = [\n             'Role',\n@@ -1354,7 +1352,7 @@ describe('ParseGraphQLServer', () => {\n             'UpdateUserFieldsInput',\n           ];\n           expect(\n-            expectedTypes.every((type) => schemaTypes.indexOf(type) !== -1)\n+            expectedTypes.every(type => schemaTypes.indexOf(type) !== -1)\n           ).toBeTruthy(JSON.stringify(schemaTypes));\n         });\n \n@@ -1373,7 +1371,7 @@ describe('ParseGraphQLServer', () => {\n               `,\n             })\n           ).data['__type'];\n-          const possibleTypes = objectType.possibleTypes.map((o) => o.name);\n+          const possibleTypes = objectType.possibleTypes.map(o => o.name);\n           expect(possibleTypes).toContain('User');\n           expect(possibleTypes).toContain('Role');\n           expect(possibleTypes).toContain('Element');\n@@ -1397,7 +1395,7 @@ describe('ParseGraphQLServer', () => {\n                 }\n               `,\n             })\n-          ).data['__type'].fields.map((field) => field.name);\n+          ).data['__type'].fields.map(field => field.name);\n           expect(userFields.indexOf('foo') !== -1).toBeTruthy();\n         });\n \n@@ -1414,7 +1412,7 @@ describe('ParseGraphQLServer', () => {\n                 }\n               `,\n             })\n-          ).data['__type'].fields.map((field) => field.name);\n+          ).data['__type'].fields.map(field => field.name);\n           expect(userFields.includes('password')).toBeFalsy();\n         });\n       });\n@@ -1896,13 +1894,13 @@ describe('ParseGraphQLServer', () => {\n             `,\n           });\n           expect(\n-            __type.inputFields.find((o) => o.name === 'price').type.kind\n+            __type.inputFields.find(o => o.name === 'price').type.kind\n           ).toEqual('SCALAR');\n           expect(\n-            __type.inputFields.find((o) => o.name === 'engine').type.kind\n+            __type.inputFields.find(o => o.name === 'engine').type.kind\n           ).toEqual('NON_NULL');\n           expect(\n-            __type.inputFields.find((o) => o.name === 'doors').type.kind\n+            __type.inputFields.find(o => o.name === 'doors').type.kind\n           ).toEqual('NON_NULL');\n \n           const {\n@@ -1922,13 +1920,13 @@ describe('ParseGraphQLServer', () => {\n             `,\n           });\n           expect(\n-            __type2.fields.find((o) => o.name === 'price').type.kind\n+            __type2.fields.find(o => o.name === 'price').type.kind\n           ).toEqual('SCALAR');\n           expect(\n-            __type2.fields.find((o) => o.name === 'engine').type.kind\n+            __type2.fields.find(o => o.name === 'engine').type.kind\n           ).toEqual('NON_NULL');\n           expect(\n-            __type2.fields.find((o) => o.name === 'doors').type.kind\n+            __type2.fields.find(o => o.name === 'doors').type.kind\n           ).toEqual('NON_NULL');\n         });\n \n@@ -2787,7 +2785,7 @@ describe('ParseGraphQLServer', () => {\n                 ).toEqual(2);\n                 expect(\n                   findSecondaryObjectsResult.data.secondaryObjects.edges\n-                    .map((value) => value.node.someField)\n+                    .map(value => value.node.someField)\n                     .sort()\n                 ).toEqual(['some value 22', 'some value 44']);\n                 expect(\n@@ -2954,7 +2952,7 @@ describe('ParseGraphQLServer', () => {\n                 ).toEqual('some value 22');\n                 expect(\n                   createPrimaryObjectResult.data.createPrimaryObject.primaryObject.relationField.edges\n-                    .map((value) => value.node.someField)\n+                    .map(value => value.node.someField)\n                     .sort()\n                 ).toEqual(['some value 22', 'some value 44']);\n                 expect(\n@@ -3193,7 +3191,7 @@ describe('ParseGraphQLServer', () => {\n                 },\n               },\n             });\n-            const classes = Object.keys(result.data).map((fieldName) => ({\n+            const classes = Object.keys(result.data).map(fieldName => ({\n               clientMutationId: result.data[fieldName].clientMutationId,\n               class: {\n                 name: result.data[fieldName].class.name,\n@@ -3358,9 +3356,9 @@ describe('ParseGraphQLServer', () => {\n               },\n             });\n             findResult.data.classes = findResult.data.classes\n-              .filter((schemaClass) => !schemaClass.name.startsWith('_'))\n+              .filter(schemaClass => !schemaClass.name.startsWith('_'))\n               .sort((a, b) => (a.name > b.name ? 1 : -1));\n-            findResult.data.classes.forEach((schemaClass) => {\n+            findResult.data.classes.forEach(schemaClass => {\n               schemaClass.schemaFields = schemaClass.schemaFields.sort((a, b) =>\n                 a.name > b.name ? 1 : -1\n               );\n@@ -4277,10 +4275,10 @@ describe('ParseGraphQLServer', () => {\n               expect(result.manyRelations.length).toEqual(2);\n \n               const customerSubObject = result.manyRelations.find(\n-                (o) => o.objectId === obj1.id\n+                o => o.objectId === obj1.id\n               );\n               const someClassSubObject = result.manyRelations.find(\n-                (o) => o.objectId === obj2.id\n+                o => o.objectId === obj2.id\n               );\n \n               expect(customerSubObject).toBeDefined();\n@@ -4289,7 +4287,7 @@ describe('ParseGraphQLServer', () => {\n                 'imCustomerOne'\n               );\n               const formatedArrayField = customerSubObject.arrayField.map(\n-                (elem) => elem.value\n+                elem => elem.value\n               );\n               expect(formatedArrayField).toEqual(arrayField);\n               expect(someClassSubObject.someClassField).toEqual(\n@@ -4445,7 +4443,7 @@ describe('ParseGraphQLServer', () => {\n             await Promise.all(\n               objects\n                 .slice(0, 3)\n-                .map((obj) =>\n+                .map(obj =>\n                   expectAsync(\n                     getObject(obj.className, obj.id)\n                   ).toBeRejectedWith(jasmine.stringMatching('Object not found'))\n@@ -4456,7 +4454,7 @@ describe('ParseGraphQLServer', () => {\n                 .someField\n             ).toEqual('someValue4');\n             await Promise.all(\n-              objects.map(async (obj) =>\n+              objects.map(async obj =>\n                 expect(\n                   (\n                     await getObject(obj.className, obj.id, {\n@@ -4467,7 +4465,7 @@ describe('ParseGraphQLServer', () => {\n               )\n             );\n             await Promise.all(\n-              objects.map(async (obj) =>\n+              objects.map(async obj =>\n                 expect(\n                   (\n                     await getObject(obj.className, obj.id, {\n@@ -4478,7 +4476,7 @@ describe('ParseGraphQLServer', () => {\n               )\n             );\n             await Promise.all(\n-              objects.map(async (obj) =>\n+              objects.map(async obj =>\n                 expect(\n                   (\n                     await getObject(obj.className, obj.id, {\n@@ -4494,7 +4492,7 @@ describe('ParseGraphQLServer', () => {\n               })\n             ).toBeRejectedWith(jasmine.stringMatching('Object not found'));\n             await Promise.all(\n-              [object1, object3, object4].map(async (obj) =>\n+              [object1, object3, object4].map(async obj =>\n                 expect(\n                   (\n                     await getObject(obj.className, obj.id, {\n@@ -4505,7 +4503,7 @@ describe('ParseGraphQLServer', () => {\n               )\n             );\n             await Promise.all(\n-              objects.slice(0, 3).map((obj) =>\n+              objects.slice(0, 3).map(obj =>\n                 expectAsync(\n                   getObject(obj.className, obj.id, {\n                     'X-Parse-Session-Token': user4.getSessionToken(),\n@@ -4521,7 +4519,7 @@ describe('ParseGraphQLServer', () => {\n               ).data.get.someField\n             ).toEqual('someValue4');\n             await Promise.all(\n-              objects.slice(0, 2).map((obj) =>\n+              objects.slice(0, 2).map(obj =>\n                 expectAsync(\n                   getObject(obj.className, obj.id, {\n                     'X-Parse-Session-Token': user5.getSessionToken(),\n@@ -4646,7 +4644,7 @@ describe('ParseGraphQLServer', () => {\n             ).toBeDefined();\n           });\n \n-          it('should respect protectedFields', async (done) => {\n+          it('should respect protectedFields', async done => {\n             await prepareData();\n             await parseGraphQLServer.parseGraphQLSchema.databaseController.schemaCache.clear();\n \n@@ -4762,7 +4760,7 @@ describe('ParseGraphQLServer', () => {\n                 let foundUserClassReadPreference = false;\n                 databaseAdapter.database.serverConfig.cursor.calls\n                   .all()\n-                  .forEach((call) => {\n+                  .forEach(call => {\n                     if (\n                       call.args[0].ns.collection.indexOf('GraphQLClass') >= 0\n                     ) {\n@@ -4826,7 +4824,7 @@ describe('ParseGraphQLServer', () => {\n               let foundUserClassReadPreference = false;\n               databaseAdapter.database.serverConfig.cursor.calls\n                 .all()\n-                .forEach((call) => {\n+                .forEach(call => {\n                   if (call.args[0].ns.collection.indexOf('GraphQLClass') >= 0) {\n                     foundGraphQLClassReadPreference = true;\n                     expect(call.args[0].options.readPreference.mode).toBe(\n@@ -4886,7 +4884,7 @@ describe('ParseGraphQLServer', () => {\n               let foundUserClassReadPreference = false;\n               databaseAdapter.database.serverConfig.cursor.calls\n                 .all()\n-                .forEach((call) => {\n+                .forEach(call => {\n                   if (call.args[0].ns.collection.indexOf('GraphQLClass') >= 0) {\n                     foundGraphQLClassReadPreference = true;\n                     expect(call.args[0].options.readPreference.mode).toBe(\n@@ -4936,7 +4934,7 @@ describe('ParseGraphQLServer', () => {\n \n             expect(result.data.customers.edges.length).toEqual(2);\n \n-            result.data.customers.edges.forEach((resultObj) => {\n+            result.data.customers.edges.forEach(resultObj => {\n               const obj = resultObj.node.objectId === obj1.id ? obj1 : obj2;\n               expect(resultObj.node.objectId).toEqual(obj.id);\n               expect(resultObj.node.someField).toEqual(obj.get('someField'));\n@@ -4977,12 +4975,12 @@ describe('ParseGraphQLServer', () => {\n \n             expect(\n               (await findObjects('GraphQLClass')).data.find.edges.map(\n-                (object) => object.node.someField\n+                object => object.node.someField\n               )\n             ).toEqual([]);\n             expect(\n               (await findObjects('PublicClass')).data.find.edges.map(\n-                (object) => object.node.someField\n+                object => object.node.someField\n               )\n             ).toEqual(['someValue4']);\n             expect(\n@@ -4991,39 +4989,39 @@ describe('ParseGraphQLServer', () => {\n                   'X-Parse-Master-Key': 'test',\n                 })\n               ).data.find.edges\n-                .map((object) => object.node.someField)\n+                .map(object => object.node.someField)\n                 .sort()\n             ).toEqual(['someValue1', 'someValue2', 'someValue3']);\n             expect(\n               (\n                 await findObjects('PublicClass', {\n                   'X-Parse-Master-Key': 'test',\n                 })\n-              ).data.find.edges.map((object) => object.node.someField)\n+              ).data.find.edges.map(object => object.node.someField)\n             ).toEqual(['someValue4']);\n             expect(\n               (\n                 await findObjects('GraphQLClass', {\n                   'X-Parse-Session-Token': user1.getSessionToken(),\n                 })\n               ).data.find.edges\n-                .map((object) => object.node.someField)\n+                .map(object => object.node.someField)\n                 .sort()\n             ).toEqual(['someValue1', 'someValue2', 'someValue3']);\n             expect(\n               (\n                 await findObjects('PublicClass', {\n                   'X-Parse-Session-Token': user1.getSessionToken(),\n                 })\n-              ).data.find.edges.map((object) => object.node.someField)\n+              ).data.find.edges.map(object => object.node.someField)\n             ).toEqual(['someValue4']);\n             expect(\n               (\n                 await findObjects('GraphQLClass', {\n                   'X-Parse-Session-Token': user2.getSessionToken(),\n                 })\n               ).data.find.edges\n-                .map((object) => object.node.someField)\n+                .map(object => object.node.someField)\n                 .sort()\n             ).toEqual(['someValue1', 'someValue2', 'someValue3']);\n             expect(\n@@ -5032,22 +5030,22 @@ describe('ParseGraphQLServer', () => {\n                   'X-Parse-Session-Token': user3.getSessionToken(),\n                 })\n               ).data.find.edges\n-                .map((object) => object.node.someField)\n+                .map(object => object.node.someField)\n                 .sort()\n             ).toEqual(['someValue1', 'someValue3']);\n             expect(\n               (\n                 await findObjects('GraphQLClass', {\n                   'X-Parse-Session-Token': user4.getSessionToken(),\n                 })\n-              ).data.find.edges.map((object) => object.node.someField)\n+              ).data.find.edges.map(object => object.node.someField)\n             ).toEqual([]);\n             expect(\n               (\n                 await findObjects('GraphQLClass', {\n                   'X-Parse-Session-Token': user5.getSessionToken(),\n                 })\n-              ).data.find.edges.map((object) => object.node.someField)\n+              ).data.find.edges.map(object => object.node.someField)\n             ).toEqual(['someValue3']);\n           });\n \n@@ -5100,7 +5098,7 @@ describe('ParseGraphQLServer', () => {\n \n             expect(\n               result.data.graphQLClasses.edges\n-                .map((object) => object.node.someField)\n+                .map(object => object.node.someField)\n                 .sort()\n             ).toEqual(['someValue1', 'someValue3']);\n           });\n@@ -5178,7 +5176,7 @@ describe('ParseGraphQLServer', () => {\n \n             expect(\n               result.data.graphQLClasses.edges\n-                .map((object) => object.node.someField)\n+                .map(object => object.node.someField)\n                 .sort()\n             ).toEqual(['someValue1', 'someValue2']);\n           });\n@@ -5345,7 +5343,7 @@ describe('ParseGraphQLServer', () => {\n             });\n \n             expect(\n-              result.data.find.edges.map((obj) => obj.node.someField)\n+              result.data.find.edges.map(obj => obj.node.someField)\n             ).toEqual(['someValue14', 'someValue17']);\n           });\n \n@@ -5416,7 +5414,7 @@ describe('ParseGraphQLServer', () => {\n \n             let result = await find();\n             expect(\n-              result.data.someClasses.edges.map((edge) => edge.node.numberField)\n+              result.data.someClasses.edges.map(edge => edge.node.numberField)\n             ).toEqual(numberArray(0, 99));\n             expect(result.data.someClasses.count).toEqual(100);\n             expect(result.data.someClasses.pageInfo.hasPreviousPage).toEqual(\n@@ -5432,7 +5430,7 @@ describe('ParseGraphQLServer', () => {\n \n             result = await find({ first: 10 });\n             expect(\n-              result.data.someClasses.edges.map((edge) => edge.node.numberField)\n+              result.data.someClasses.edges.map(edge => edge.node.numberField)\n             ).toEqual(numberArray(0, 9));\n             expect(result.data.someClasses.count).toEqual(100);\n             expect(result.data.someClasses.pageInfo.hasPreviousPage).toEqual(\n@@ -5451,7 +5449,7 @@ describe('ParseGraphQLServer', () => {\n               after: result.data.someClasses.pageInfo.endCursor,\n             });\n             expect(\n-              result.data.someClasses.edges.map((edge) => edge.node.numberField)\n+              result.data.someClasses.edges.map(edge => edge.node.numberField)\n             ).toEqual(numberArray(10, 19));\n             expect(result.data.someClasses.count).toEqual(100);\n             expect(result.data.someClasses.pageInfo.hasPreviousPage).toEqual(\n@@ -5467,7 +5465,7 @@ describe('ParseGraphQLServer', () => {\n \n             result = await find({ last: 10 });\n             expect(\n-              result.data.someClasses.edges.map((edge) => edge.node.numberField)\n+              result.data.someClasses.edges.map(edge => edge.node.numberField)\n             ).toEqual(numberArray(90, 99));\n             expect(result.data.someClasses.count).toEqual(100);\n             expect(result.data.someClasses.pageInfo.hasPreviousPage).toEqual(\n@@ -5486,7 +5484,7 @@ describe('ParseGraphQLServer', () => {\n               before: result.data.someClasses.pageInfo.startCursor,\n             });\n             expect(\n-              result.data.someClasses.edges.map((edge) => edge.node.numberField)\n+              result.data.someClasses.edges.map(edge => edge.node.numberField)\n             ).toEqual(numberArray(80, 89));\n             expect(result.data.someClasses.count).toEqual(100);\n             expect(result.data.someClasses.pageInfo.hasPreviousPage).toEqual(\n@@ -5820,7 +5818,7 @@ describe('ParseGraphQLServer', () => {\n               let foundUserClassReadPreference = false;\n               databaseAdapter.database.serverConfig.cursor.calls\n                 .all()\n-                .forEach((call) => {\n+                .forEach(call => {\n                   if (call.args[0].ns.collection.indexOf('GraphQLClass') >= 0) {\n                     foundGraphQLClassReadPreference = true;\n                     expect(call.args[0].options.readPreference.mode).toBe(\n@@ -5877,7 +5875,7 @@ describe('ParseGraphQLServer', () => {\n               let foundUserClassReadPreference = false;\n               databaseAdapter.database.serverConfig.cursor.calls\n                 .all()\n-                .forEach((call) => {\n+                .forEach(call => {\n                   if (call.args[0].ns.collection.indexOf('GraphQLClass') >= 0) {\n                     foundGraphQLClassReadPreference = true;\n                     expect(call.args[0].options.readPreference.mode).toBe(\n@@ -5937,7 +5935,7 @@ describe('ParseGraphQLServer', () => {\n               let foundUserClassReadPreference = false;\n               databaseAdapter.database.serverConfig.cursor.calls\n                 .all()\n-                .forEach((call) => {\n+                .forEach(call => {\n                   if (call.args[0].ns.collection.indexOf('GraphQLClass') >= 0) {\n                     foundGraphQLClassReadPreference = true;\n                     expect(call.args[0].options.readPreference.mode).toBe(\n@@ -6008,7 +6006,7 @@ describe('ParseGraphQLServer', () => {\n                 let foundUserClassReadPreference = false;\n                 databaseAdapter.database.serverConfig.cursor.calls\n                   .all()\n-                  .forEach((call) => {\n+                  .forEach(call => {\n                     if (\n                       call.args[0].ns.collection.indexOf('GraphQLClass') >= 0\n                     ) {\n@@ -6067,7 +6065,7 @@ describe('ParseGraphQLServer', () => {\n             }\n \n             expect(\n-              result.data.graphQLClasses.edges.map((edge) => edge.node.objectId)\n+              result.data.graphQLClasses.edges.map(edge => edge.node.objectId)\n             ).toEqual([object3.id, object1.id, object2.id]);\n           });\n \n@@ -6120,7 +6118,7 @@ describe('ParseGraphQLServer', () => {\n \n               expect(\n                 result.data.parentClass.graphQLClasses.edges.map(\n-                  (edge) => edge.node.objectId\n+                  edge => edge.node.objectId\n                 )\n               ).toEqual([object3.id, object1.id, object2.id]);\n             }\n@@ -6384,7 +6382,7 @@ describe('ParseGraphQLServer', () => {\n             }\n \n             await Promise.all(\n-              objects.slice(0, 3).map(async (obj) => {\n+              objects.slice(0, 3).map(async obj => {\n                 const originalFieldValue = obj.get('someField');\n                 await expectAsync(\n                   updateObject(obj.className, obj.id, {\n@@ -6405,7 +6403,7 @@ describe('ParseGraphQLServer', () => {\n             await object4.fetch({ useMasterKey: true });\n             expect(object4.get('someField')).toEqual('changedValue1');\n             await Promise.all(\n-              objects.map(async (obj) => {\n+              objects.map(async obj => {\n                 expect(\n                   (\n                     await updateObject(\n@@ -6421,7 +6419,7 @@ describe('ParseGraphQLServer', () => {\n               })\n             );\n             await Promise.all(\n-              objects.map(async (obj) => {\n+              objects.map(async obj => {\n                 expect(\n                   (\n                     await updateObject(\n@@ -6437,7 +6435,7 @@ describe('ParseGraphQLServer', () => {\n               })\n             );\n             await Promise.all(\n-              objects.map(async (obj) => {\n+              objects.map(async obj => {\n                 expect(\n                   (\n                     await updateObject(\n@@ -6453,7 +6451,7 @@ describe('ParseGraphQLServer', () => {\n               })\n             );\n             await Promise.all(\n-              [object1, object3, object4].map(async (obj) => {\n+              [object1, object3, object4].map(async obj => {\n                 expect(\n                   (\n                     await updateObject(\n@@ -6480,7 +6478,7 @@ describe('ParseGraphQLServer', () => {\n             await object2.fetch({ useMasterKey: true });\n             expect(object2.get('someField')).toEqual(originalFieldValue);\n             await Promise.all(\n-              objects.slice(0, 3).map(async (obj) => {\n+              objects.slice(0, 3).map(async obj => {\n                 const originalFieldValue = obj.get('someField');\n                 await expectAsync(\n                   updateObject(\n@@ -6507,7 +6505,7 @@ describe('ParseGraphQLServer', () => {\n             await object4.fetch({ useMasterKey: true });\n             expect(object4.get('someField')).toEqual('changedValue6');\n             await Promise.all(\n-              objects.slice(0, 2).map(async (obj) => {\n+              objects.slice(0, 2).map(async obj => {\n                 const originalFieldValue = obj.get('someField');\n                 await expectAsync(\n                   updateObject(\n@@ -6583,7 +6581,7 @@ describe('ParseGraphQLServer', () => {\n             }\n \n             await Promise.all(\n-              objects.slice(0, 3).map(async (obj) => {\n+              objects.slice(0, 3).map(async obj => {\n                 const originalFieldValue = obj.get('someField');\n                 await expectAsync(\n                   updateObject(obj.className, obj.id, {\n@@ -6607,7 +6605,7 @@ describe('ParseGraphQLServer', () => {\n             await object4.fetch({ useMasterKey: true });\n             expect(object4.get('someField')).toEqual('changedValue1');\n             await Promise.all(\n-              objects.map(async (obj) => {\n+              objects.map(async obj => {\n                 expect(\n                   (\n                     await updateObject(\n@@ -6626,7 +6624,7 @@ describe('ParseGraphQLServer', () => {\n               })\n             );\n             await Promise.all(\n-              objects.map(async (obj) => {\n+              objects.map(async obj => {\n                 expect(\n                   (\n                     await updateObject(\n@@ -6645,7 +6643,7 @@ describe('ParseGraphQLServer', () => {\n               })\n             );\n             await Promise.all(\n-              objects.map(async (obj) => {\n+              objects.map(async obj => {\n                 expect(\n                   (\n                     await updateObject(\n@@ -6664,7 +6662,7 @@ describe('ParseGraphQLServer', () => {\n               })\n             );\n             await Promise.all(\n-              [object1, object3, object4].map(async (obj) => {\n+              [object1, object3, object4].map(async obj => {\n                 expect(\n                   (\n                     await updateObject(\n@@ -6694,7 +6692,7 @@ describe('ParseGraphQLServer', () => {\n             await object2.fetch({ useMasterKey: true });\n             expect(object2.get('someField')).toEqual(originalFieldValue);\n             await Promise.all(\n-              objects.slice(0, 3).map(async (obj) => {\n+              objects.slice(0, 3).map(async obj => {\n                 const originalFieldValue = obj.get('someField');\n                 await expectAsync(\n                   updateObject(\n@@ -6724,7 +6722,7 @@ describe('ParseGraphQLServer', () => {\n             await object4.fetch({ useMasterKey: true });\n             expect(object4.get('someField')).toEqual('changedValue6');\n             await Promise.all(\n-              objects.slice(0, 2).map(async (obj) => {\n+              objects.slice(0, 2).map(async obj => {\n                 const originalFieldValue = obj.get('someField');\n                 await expectAsync(\n                   updateObject(\n@@ -6851,7 +6849,7 @@ describe('ParseGraphQLServer', () => {\n             }\n \n             await Promise.all(\n-              objects.slice(0, 3).map(async (obj) => {\n+              objects.slice(0, 3).map(async obj => {\n                 const originalFieldValue = obj.get('someField');\n                 await expectAsync(\n                   deleteObject(obj.className, obj.id)\n@@ -6861,7 +6859,7 @@ describe('ParseGraphQLServer', () => {\n               })\n             );\n             await Promise.all(\n-              objects.slice(0, 3).map(async (obj) => {\n+              objects.slice(0, 3).map(async obj => {\n                 const originalFieldValue = obj.get('someField');\n                 await expectAsync(\n                   deleteObject(obj.className, obj.id, {\n@@ -6952,7 +6950,7 @@ describe('ParseGraphQLServer', () => {\n             }\n \n             await Promise.all(\n-              objects.slice(0, 3).map(async (obj) => {\n+              objects.slice(0, 3).map(async obj => {\n                 const originalFieldValue = obj.get('someField');\n                 await expectAsync(\n                   deleteObject(obj.className, obj.id)\n@@ -6962,7 +6960,7 @@ describe('ParseGraphQLServer', () => {\n               })\n             );\n             await Promise.all(\n-              objects.slice(0, 3).map(async (obj) => {\n+              objects.slice(0, 3).map(async obj => {\n                 const originalFieldValue = obj.get('someField');\n                 await expectAsync(\n                   deleteObject(obj.className, obj.id, {\n@@ -7185,6 +7183,56 @@ describe('ParseGraphQLServer', () => {\n           expect(resultFoo).toBeDefined();\n           expect(resultFoo.bar).toEqual('hello');\n         });\n+        it('should return logged user and do not by pass pointer security', async () => {\n+          const masterKeyOnlyACL = new Parse.ACL();\n+          masterKeyOnlyACL.setPublicReadAccess(false);\n+          masterKeyOnlyACL.setPublicWriteAccess(false);\n+          const foo = new Parse.Object('Foo');\n+          foo.setACL(masterKeyOnlyACL);\n+          foo.set('bar', 'hello');\n+          await foo.save(null, { useMasterKey: true });\n+          const userName = 'userx1',\n+            password = 'user1',\n+            email = 'emailUserx1@parse.com';\n+\n+          const user = new Parse.User();\n+          user.setUsername(userName);\n+          user.setPassword(password);\n+          user.setEmail(email);\n+          user.set('userFoo', foo);\n+          await user.signUp();\n+\n+          await parseGraphQLServer.parseGraphQLSchema.databaseController.schemaCache.clear();\n+\n+          const session = await Parse.Session.current();\n+          const result = await apolloClient.query({\n+            query: gql`\n+              query GetCurrentUser {\n+                viewer {\n+                  sessionToken\n+                  user {\n+                    id\n+                    objectId\n+                    userFoo {\n+                      bar\n+                    }\n+                  }\n+                }\n+              }\n+            `,\n+            context: {\n+              headers: {\n+                'X-Parse-Session-Token': session.getSessionToken(),\n+              },\n+            },\n+          });\n+\n+          const sessionToken = result.data.viewer.sessionToken;\n+          const { objectId, userFoo: resultFoo } = result.data.viewer.user;\n+          expect(objectId).toEqual(user.id);\n+          expect(sessionToken).toBeDefined();\n+          expect(resultFoo).toEqual(null);\n+        });\n       });\n \n       describe('Users Mutations', () => {\n@@ -7635,8 +7683,8 @@ describe('ParseGraphQLServer', () => {\n           }\n         });\n \n-        it('should accept different params', (done) => {\n-          Parse.Cloud.define('hello', async (req) => {\n+        it('should accept different params', done => {\n+          Parse.Cloud.define('hello', async req => {\n             expect(req.params.date instanceof Date).toBe(true);\n             expect(req.params.date.getTime()).toBe(1463907600000);\n             expect(req.params.dateList[0] instanceof Date).toBe(true);\n@@ -7772,7 +7820,7 @@ describe('ParseGraphQLServer', () => {\n             ).data['__type'];\n             expect(functionEnum.kind).toEqual('ENUM');\n             expect(\n-              functionEnum.enumValues.map((value) => value.name).sort()\n+              functionEnum.enumValues.map(value => value.name).sort()\n             ).toEqual(['_underscored', 'a', 'b', 'contains1Number']);\n           } catch (e) {\n             handleError(e);\n@@ -7814,12 +7862,12 @@ describe('ParseGraphQLServer', () => {\n             ).data['__type'];\n             expect(functionEnum.kind).toEqual('ENUM');\n             expect(\n-              functionEnum.enumValues.map((value) => value.name).sort()\n+              functionEnum.enumValues.map(value => value.name).sort()\n             ).toEqual(['a']);\n             expect(\n               parseGraphQLServer.parseGraphQLSchema.log.warn.calls\n                 .all()\n-                .map((call) => call.args[0])\n+                .map(call => call.args[0])\n                 .sort()\n             ).toEqual([\n               'Function 1NumberInTheBeggning could not be added to the auto schema because GraphQL names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/.',\n@@ -8715,13 +8763,13 @@ describe('ParseGraphQLServer', () => {\n             expect(result.name).toEqual('imACountry2');\n             expect(result.companies.edges.length).toEqual(3);\n             expect(\n-              result.companies.edges.some((o) => o.node.objectId === company.id)\n+              result.companies.edges.some(o => o.node.objectId === company.id)\n             ).toBeTruthy();\n             expect(\n-              result.companies.edges.some((o) => o.node.name === 'imACompany2')\n+              result.companies.edges.some(o => o.node.name === 'imACompany2')\n             ).toBeTruthy();\n             expect(\n-              result.companies.edges.some((o) => o.node.name === 'imACompany3')\n+              result.companies.edges.some(o => o.node.name === 'imACompany3')\n             ).toBeTruthy();\n           }\n         );\n@@ -8806,16 +8854,16 @@ describe('ParseGraphQLServer', () => {\n           expect(result.companies.edges.length).toEqual(2);\n           expect(\n             result.companies.edges.some(\n-              (c) =>\n+              c =>\n                 c.node.name === 'imACompany2' &&\n-                c.node.teams.edges.some((t) => t.node.name === 'imATeam2')\n+                c.node.teams.edges.some(t => t.node.name === 'imATeam2')\n             )\n           ).toBeTruthy();\n           expect(\n             result.companies.edges.some(\n-              (c) =>\n+              c =>\n                 c.node.name === 'imACompany3' &&\n-                c.node.teams.edges.some((t) => t.node.name === 'imATeam3')\n+                c.node.teams.edges.some(t => t.node.name === 'imATeam3')\n             )\n           ).toBeTruthy();\n         });\n@@ -8884,17 +8932,13 @@ describe('ParseGraphQLServer', () => {\n             expect(result.objectId).toEqual(country.id);\n             expect(result.companies.edges.length).toEqual(2);\n             expect(\n-              result.companies.edges.some(\n-                (o) => o.node.objectId === company2.id\n-              )\n+              result.companies.edges.some(o => o.node.objectId === company2.id)\n             ).toBeTruthy();\n             expect(\n-              result.companies.edges.some((o) => o.node.name === 'imACompany3')\n+              result.companies.edges.some(o => o.node.name === 'imACompany3')\n             ).toBeTruthy();\n             expect(\n-              result.companies.edges.some(\n-                (o) => o.node.objectId === company1.id\n-              )\n+              result.companies.edges.some(o => o.node.objectId === company1.id)\n             ).toBeFalsy();\n           }\n         );\n@@ -8966,7 +9010,7 @@ describe('ParseGraphQLServer', () => {\n             expect(result.name).toEqual('imACountry2');\n             expect(result.companies.edges.length).toEqual(1);\n             expect(\n-              result.companies.edges.some((o) => o.node.name === 'imACompany2')\n+              result.companies.edges.some(o => o.node.name === 'imACompany2')\n             ).toBeTruthy();\n           }\n         );\n@@ -9017,10 +9061,10 @@ describe('ParseGraphQLServer', () => {\n           expect(result1.objectId).toEqual(country.id);\n           expect(result1.companies.edges.length).toEqual(2);\n           expect(\n-            result1.companies.edges.some((o) => o.node.objectId === company1.id)\n+            result1.companies.edges.some(o => o.node.objectId === company1.id)\n           ).toBeTruthy();\n           expect(\n-            result1.companies.edges.some((o) => o.node.objectId === company2.id)\n+            result1.companies.edges.some(o => o.node.objectId === company2.id)\n           ).toBeTruthy();\n \n           // With where\n@@ -9762,12 +9806,12 @@ describe('ParseGraphQLServer', () => {\n             const { edges } = someClasses;\n             expect(edges.length).toEqual(2);\n             expect(\n-              edges.find((result) => result.node.id === create1.someClass.id)\n-                .node.someField\n+              edges.find(result => result.node.id === create1.someClass.id).node\n+                .someField\n             ).toEqual(someFieldValue);\n             expect(\n-              edges.find((result) => result.node.id === create2.someClass.id)\n-                .node.someField\n+              edges.find(result => result.node.id === create2.someClass.id).node\n+                .someField\n             ).toEqual(someFieldValue2);\n           } catch (e) {\n             handleError(e);\n@@ -9859,7 +9903,7 @@ describe('ParseGraphQLServer', () => {\n \n             const { someField } = getResult.data.someClass;\n             expect(Array.isArray(someField)).toBeTruthy();\n-            expect(someField.map((element) => element.value)).toEqual(\n+            expect(someField.map(element => element.value)).toEqual(\n               someFieldValue\n             );\n             expect(getResult.data.someClasses.edges.length).toEqual(1);\n@@ -10276,7 +10320,7 @@ describe('ParseGraphQLServer', () => {\n               [46, 47],\n               [48, 49],\n               [44, 45],\n-            ].map((point) => ({\n+            ].map(point => ({\n               latitude: point[0],\n               longitude: point[1],\n             }));\n@@ -10356,7 +10400,7 @@ describe('ParseGraphQLServer', () => {\n               'object'\n             );\n             expect(getResult.data.someClass.somePolygonField).toEqual(\n-              somePolygonFieldValue.map((geoPoint) => ({\n+              somePolygonFieldValue.map(geoPoint => ({\n                 ...geoPoint,\n                 __typename: 'GeoPoint',\n               }))\n@@ -10672,7 +10716,7 @@ describe('ParseGraphQLServer', () => {\n           `,\n         });\n         parseGraphQLServer.applyGraphQL(expressApp);\n-        await new Promise((resolve) =>\n+        await new Promise(resolve =>\n           httpServer.listen({ port: 13377 }, resolve)\n         );\n         const httpLink = createUploadLink({\n@@ -10797,7 +10841,7 @@ describe('ParseGraphQLServer', () => {\n             fields: {\n               nameUpperCase: {\n                 type: new GraphQLNonNull(GraphQLString),\n-                resolve: (p) => p.name.toUpperCase(),\n+                resolve: p => p.name.toUpperCase(),\n               },\n               type: { type: TypeEnum },\n               language: {\n@@ -10858,7 +10902,7 @@ describe('ParseGraphQLServer', () => {\n           });\n \n         parseGraphQLServer.applyGraphQL(expressApp);\n-        await new Promise((resolve) =>\n+        await new Promise(resolve =>\n           httpServer.listen({ port: 13377 }, resolve)\n         );\n         const httpLink = createUploadLink({\n@@ -10992,7 +11036,7 @@ describe('ParseGraphQLServer', () => {\n         });\n \n         parseGraphQLServer.applyGraphQL(expressApp);\n-        await new Promise((resolve) =>\n+        await new Promise(resolve =>\n           httpServer.listen({ port: 13377 }, resolve)\n         );\n         const httpLink = createUploadLink({"
        },
        {
          "filename": "src/GraphQL/loaders/usersMutations.js",
          "status": "modified",
          "additions": 14,
          "deletions": 18,
          "patch": "@@ -41,23 +41,22 @@ const load = parseGraphQLSchema => {\n         const { fields } = args;\n         const { config, auth, info } = context;\n \n-        const { sessionToken } = await objectsMutations.createObject(\n+        const { sessionToken, objectId } = await objectsMutations.createObject(\n           '_User',\n           fields,\n           config,\n           auth,\n           info\n         );\n \n-        info.sessionToken = sessionToken;\n+        context.info.sessionToken = sessionToken;\n \n         return {\n           viewer: await getUserFromSessionToken(\n-            config,\n-            info,\n+            context,\n             mutationInfo,\n             'viewer.user.',\n-            true\n+            objectId\n           ),\n         };\n       } catch (e) {\n@@ -120,23 +119,22 @@ const load = parseGraphQLSchema => {\n         const { fields, authData } = args;\n         const { config, auth, info } = context;\n \n-        const { sessionToken } = await objectsMutations.createObject(\n+        const { sessionToken, objectId } = await objectsMutations.createObject(\n           '_User',\n           { ...fields, authData },\n           config,\n           auth,\n           info\n         );\n \n-        info.sessionToken = sessionToken;\n+        context.info.sessionToken = sessionToken;\n \n         return {\n           viewer: await getUserFromSessionToken(\n-            config,\n-            info,\n+            context,\n             mutationInfo,\n             'viewer.user.',\n-            true\n+            objectId\n           ),\n         };\n       } catch (e) {\n@@ -183,7 +181,7 @@ const load = parseGraphQLSchema => {\n         const { username, password } = args;\n         const { config, auth, info } = context;\n \n-        const { sessionToken } = (\n+        const { sessionToken, objectId } = (\n           await usersRouter.handleLogIn({\n             body: {\n               username,\n@@ -196,15 +194,14 @@ const load = parseGraphQLSchema => {\n           })\n         ).response;\n \n-        info.sessionToken = sessionToken;\n+        context.info.sessionToken = sessionToken;\n \n         return {\n           viewer: await getUserFromSessionToken(\n-            config,\n-            info,\n+            context,\n             mutationInfo,\n             'viewer.user.',\n-            true\n+            objectId\n           ),\n         };\n       } catch (e) {\n@@ -236,11 +233,10 @@ const load = parseGraphQLSchema => {\n         const { config, auth, info } = context;\n \n         const viewer = await getUserFromSessionToken(\n-          config,\n-          info,\n+          context,\n           mutationInfo,\n           'viewer.user.',\n-          true\n+          auth.user.id\n         );\n \n         await usersRouter.handleLogOut({"
        },
        {
          "filename": "src/GraphQL/loaders/usersQueries.js",
          "status": "modified",
          "additions": 25,
          "deletions": 20,
          "patch": "@@ -2,16 +2,16 @@ import { GraphQLNonNull } from 'graphql';\n import getFieldNames from 'graphql-list-fields';\n import Parse from 'parse/node';\n import rest from '../../rest';\n-import Auth from '../../Auth';\n import { extractKeysAndInclude } from './parseClassTypes';\n+import { Auth } from '../../Auth';\n \n const getUserFromSessionToken = async (\n-  config,\n-  info,\n+  context,\n   queryInfo,\n   keysPrefix,\n-  validatedToken\n+  userId\n ) => {\n+  const { info, config } = context;\n   if (!info || !info.sessionToken) {\n     throw new Parse.Error(\n       Parse.Error.INVALID_SESSION_TOKEN,\n@@ -27,48 +27,55 @@ const getUserFromSessionToken = async (\n   const { keys } = keysAndInclude;\n   let { include } = keysAndInclude;\n \n-  if (validatedToken && !keys && !include) {\n+  if (userId && !keys && !include) {\n     return {\n       sessionToken,\n     };\n   } else if (keys && !include) {\n     include = 'user';\n   }\n \n+  if (userId) {\n+    // We need to re create the auth context\n+    // to avoid security breach if userId is provided\n+    context.auth = new Auth({\n+      config,\n+      isMaster: context.auth.isMaster,\n+      user: { id: userId },\n+    });\n+  }\n+\n   const options = {};\n   if (keys) {\n     options.keys = keys\n       .split(',')\n-      .map(key => `user.${key}`)\n+      .map(key => `${key}`)\n       .join(',');\n   }\n   if (include) {\n     options.include = include\n       .split(',')\n-      .map(included => `user.${included}`)\n+      .map(included => `${included}`)\n       .join(',');\n   }\n \n   const response = await rest.find(\n     config,\n-    Auth.master(config),\n-    '_Session',\n-    { sessionToken },\n+    context.auth,\n+    '_User',\n+    // Get the user it self from auth object\n+    { objectId: context.auth.user.id },\n     options,\n     info.clientVersion,\n-    info.context,\n+    info.context\n   );\n-  if (\n-    !response.results ||\n-    response.results.length == 0 ||\n-    !response.results[0].user\n-  ) {\n+  if (!response.results || response.results.length == 0) {\n     throw new Parse.Error(\n       Parse.Error.INVALID_SESSION_TOKEN,\n       'Invalid session token'\n     );\n   } else {\n-    const user = response.results[0].user;\n+    const user = response.results[0];\n     return {\n       sessionToken,\n       user,\n@@ -89,10 +96,8 @@ const load = parseGraphQLSchema => {\n       type: new GraphQLNonNull(parseGraphQLSchema.viewerType),\n       async resolve(_source, _args, context, queryInfo) {\n         try {\n-          const { config, info } = context;\n           return await getUserFromSessionToken(\n-            config,\n-            info,\n+            context,\n             queryInfo,\n             'user.',\n             false"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "970528ddff49d7e66bc41a876f043953ab075baa",
            "date": "2025-01-14T21:39:11Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "ad0a7bc0ba1823ada299a6476402420fdc4c4467",
            "date": "2025-01-14T18:51:58Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "28b3edee4e76679dedee9fe115283110fd952678",
            "date": "2025-01-13T15:19:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "1b61cab81c4206ce135f1239f17a53dabbc698d7",
            "date": "2025-01-13T14:47:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a0efad88d2177f027ee3709beba13282a6ca9d35",
            "date": "2025-01-12T20:55:48Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-863",
    "description": "In parser-server from version 3.5.0 and before 4.3.0, an authenticated user using the viewer GraphQL query can by pass all read security on his User object and can also by pass all objects linked via relation or Pointer on his User object.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-07-22T23:15:11.207",
    "last_modified": "2024-11-21T05:04:53.707",
    "fix_date": "2020-07-17T16:50:41Z"
  },
  "references": [
    {
      "url": "https://github.com/parse-community/parse-server/blob/master/CHANGELOG.md#430",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/78239ac9071167fdf243c55ae4bc9a2c0b0d89aa",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/security/advisories/GHSA-236h-rqv8-8q73",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/blob/master/CHANGELOG.md#430",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/78239ac9071167fdf243c55ae4bc9a2c0b0d89aa",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/security/advisories/GHSA-236h-rqv8-8q73",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:01.374279",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "parse-server",
    "owner": "parse-community",
    "created_at": "2016-01-28T18:29:14Z",
    "updated_at": "2025-01-13T16:51:06Z",
    "pushed_at": "2025-01-14T11:16:34Z",
    "size": 73208,
    "stars": 20994,
    "forks": 4781,
    "open_issues": 474,
    "watchers": 20994,
    "has_security_policy": false,
    "default_branch": "alpha",
    "protected_branches": [
      "alpha",
      "beta",
      "release",
      "release-4.x.x",
      "release-5.x.x",
      "release-6.x.x",
      "release-7.x.x"
    ],
    "languages": {
      "JavaScript": 4248231,
      "HTML": 25876,
      "Shell": 7825,
      "Handlebars": 2113,
      "Dockerfile": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:26:59.166995"
  }
}