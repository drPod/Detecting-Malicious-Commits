{
  "cve_id": "CVE-2020-15131",
  "github_data": {
    "repository": "simpleledger/slp-validate.js",
    "fix_commit": "3963cf914afae69084059b82483da916d97af65c",
    "related_commits": [
      "3963cf914afae69084059b82483da916d97af65c",
      "3963cf914afae69084059b82483da916d97af65c"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "3963cf914afae69084059b82483da916d97af65c",
      "commit_date": "2020-07-29T15:53:29Z",
      "author": {
        "login": "jcramer",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "critical update for NFT child genesis validation",
        "length": 48,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 54,
        "additions": 35,
        "deletions": 19
      },
      "files": [
        {
          "filename": "lib/validation.ts",
          "status": "modified",
          "additions": 34,
          "deletions": 18,
          "patch": "@@ -346,12 +346,13 @@ export class ValidatorType1 {\n             if (slpmsg.versionType === 0x41) {\n                 // An NFT1 parent should be provided at input index 0,\n                 // so we check this first before checking the whole parent DAG\n-                const inputTxid = txn.inputs[0].previousTxHash;\n-                const inputTxHex = await this.retrieveRawTransaction(inputTxid);\n-                const inputTx: Transaction = Transaction.parseFromBuffer(inputTxHex);\n+                const inputPrevTxid = txn.inputs[0].previousTxHash;\n+                const inputPrevOut = txn.inputs[0].previousTxOutIndex;\n+                const inputPrevTxHex = await this.retrieveRawTransaction(inputPrevTxid);\n+                const inputPrevTx: Transaction = Transaction.parseFromBuffer(inputPrevTxHex);\n                 let inputSlpMsg;\n                 try {\n-                    inputSlpMsg = Slp.parseSlpOutputScript(inputTx.outputs[0].scriptPubKey);\n+                    inputSlpMsg = Slp.parseSlpOutputScript(inputPrevTx.outputs[0].scriptPubKey);\n                 } catch (_) {}\n                 if (!inputSlpMsg || inputSlpMsg.versionType !== 0x81) {\n                     validation.validity = false;\n@@ -360,23 +361,38 @@ export class ValidatorType1 {\n                     return validation.validity!;\n                 }\n                 // Check that the there is a burned output >0 in the parent txn SLP message\n-                if (inputSlpMsg.transactionType === SlpTransactionType.SEND &&\n-                    !inputSlpMsg.sendOutputs![1].gt(0)) {\n-                    validation.validity = false;\n-                    validation.waiting = false;\n-                    validation.invalidReason = \"NFT1 child's parent has SLP output that is not greater than zero.\";\n-                    return validation.validity!;\n-                } else if ((inputSlpMsg.transactionType === SlpTransactionType.GENESIS ||\n-                            inputSlpMsg.transactionType === SlpTransactionType.MINT) &&\n-                            !inputSlpMsg.genesisOrMintQuantity!.gt(0)) {\n-                    validation.validity = false;\n-                    validation.waiting = false;\n-                    validation.invalidReason = \"NFT1 child's parent has SLP output that is not greater than zero.\";\n-                    return validation.validity!;\n+                if (inputSlpMsg.transactionType === SlpTransactionType.SEND) {\n+                    if (inputPrevOut > inputSlpMsg.sendOutputs!.length - 1) {\n+                        validation.validity = false;\n+                        validation.waiting = false;\n+                        validation.invalidReason = \"NFT1 child GENESIS does not have a valid NFT1 parent input.\";\n+                        return validation.validity!;\n+                    }\n+                    if (! inputSlpMsg.sendOutputs![inputPrevOut].gt(0)) {\n+                        validation.validity = false;\n+                        validation.waiting = false;\n+                        validation.invalidReason = \"NFT1 child's parent has SLP output that is not greater than zero.\";\n+                        return validation.validity!;\n+                    }\n+                } else if (inputSlpMsg.transactionType === SlpTransactionType.GENESIS ||\n+                            inputSlpMsg.transactionType === SlpTransactionType.MINT) {\n+                    if (inputPrevOut !== 1) {\n+                        validation.validity = false;\n+                        validation.waiting = false;\n+                        validation.invalidReason = \"NFT1 child GENESIS does not have a valid NFT1 parent input.\";\n+                        return validation.validity!;\n+                    }\n+                    if (!inputSlpMsg.genesisOrMintQuantity!.gt(0)) {\n+                        validation.validity = false;\n+                        validation.waiting = false;\n+                        validation.invalidReason = \"NFT1 child's parent has SLP output that is not greater than zero.\";\n+                        return validation.validity!;\n+                    }\n                 }\n+\n                 // Continue to check the NFT1 parent DAG\n                 const nft_parent_dag_validity = await this.isValidSlpTxid({\n-                    txid: inputTxid,\n+                    txid: inputPrevTxid,\n                     tokenIdFilter: undefined,\n                     tokenTypeFilter: 0x81\n                 });"
        },
        {
          "filename": "package-lock.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4087,7 +4087,7 @@\n       \"dev\": true\n     },\n     \"slp-unit-test-data\": {\n-      \"version\": \"git+https://github.com/simpleledger/slp-unit-test-data.git#be74a6005dbf7dfabce19a9f920b2632b539f73e\",\n+      \"version\": \"git+https://github.com/simpleledger/slp-unit-test-data.git#8c942eacfae12686dcf1f3366321445a4fba73e7\",\n       \"from\": \"git+https://github.com/simpleledger/slp-unit-test-data.git\",\n       \"dev\": true\n     },"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5308d9471901b9cc78fe4e5aa1b4c8db519a19ad",
            "date": "2021-04-11T14:24:15Z",
            "author_login": "jcramer"
          },
          {
            "sha": "312eff5f9895479d89a4abb104fbc508e0c09370",
            "date": "2021-04-11T14:17:14Z",
            "author_login": "jcramer"
          },
          {
            "sha": "06722707a5938866449713e2f0a54be3823222a7",
            "date": "2021-04-11T13:55:32Z",
            "author_login": "jcramer"
          },
          {
            "sha": "e305a036dd00d87ed350409bf4de21e12ebc866e",
            "date": "2021-04-11T13:55:16Z",
            "author_login": "jcramer"
          },
          {
            "sha": "38d9818c4f2c583f7d9640bd8b47610fa22042d0",
            "date": "2021-04-11T13:53:41Z",
            "author_login": "jcramer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-697",
    "description": "In SLP Validate (npm package slp-validate) before version 1.2.2, there is a vulnerability to false-positive validation outcomes for the NFT1 Child Genesis transaction type. A poorly implemented SLP wallet or opportunistic attacker could create a seemingly valid NFT1 child token without burning any of the NFT1 Group token type as is required by the NFT1 specification. This is fixed in version 1.2.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-07-30T15:15:13.150",
    "last_modified": "2024-11-21T05:04:54.613",
    "fix_date": "2020-07-29T15:53:29Z"
  },
  "references": [
    {
      "url": "https://github.com/simpleledger/slp-validate.js/commit/3963cf914afae69084059b82483da916d97af65c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slp-validate.js/security/advisories/GHSA-6jmr-jfh7-xg3h",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slp-validate.js/commit/3963cf914afae69084059b82483da916d97af65c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/simpleledger/slp-validate.js/security/advisories/GHSA-6jmr-jfh7-xg3h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:01.382079",
    "processing_status": "enhanced"
  }
}