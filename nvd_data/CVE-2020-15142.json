{
  "cve_id": "CVE-2020-15142",
  "github_data": {
    "repository": "triaxtec/openapi-python-client",
    "fix_commit": "f7a56aae32cba823a77a84a1f10400799b19c19a",
    "related_commits": [
      "f7a56aae32cba823a77a84a1f10400799b19c19a",
      "f7a56aae32cba823a77a84a1f10400799b19c19a"
    ],
    "patch_url": "https://github.com/triaxtec/openapi-python-client/commit/f7a56aae32cba823a77a84a1f10400799b19c19a.patch",
    "fix_commit_details": {
      "sha": "f7a56aae32cba823a77a84a1f10400799b19c19a",
      "commit_date": "2020-08-13T17:05:36Z",
      "author": {
        "login": "emann",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-9x4c-63pf-525f",
        "length": 1455,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 842,
        "additions": 744,
        "deletions": 98
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -5,7 +5,15 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\n and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n \n \n-## 0.5.3 - Unrelease\n+## 0.5.3 - Unreleased\n+### Security\n+- All values that become file/directory names are sanitized to address path traversal vulnerabilities (CVE-2020-15141)\n+- All values that get placed into python files (everything from enum names, to endpoint descriptions, to default values) are validated and/or saniziatied to address arbitrary code execution vulnerabilities (CVE-2020-15142)\n+\n+### Changes\n+- Due to security concerns/implementation complexities, default values are temporarily unsupported for any `RefProperty` that doesn't refer to an enum.\n+- Defaults for properties must now be valid values for their respective type (e.g. \"example string\" is an invalid default for an `integer` type property, and the function for an endpoint using it would fail to generate and be skipped). \n+\n ### Additions\n - Added support for header parameters (#117)\n "
        },
        {
          "filename": "end_to_end_tests/fastapi_app/__init__.py",
          "status": "modified",
          "additions": 21,
          "deletions": 3,
          "patch": "@@ -5,7 +5,7 @@\n from pathlib import Path\n from typing import Any, Dict, List, Union\n \n-from fastapi import APIRouter, FastAPI, File, Header, Query, UploadFile\n+from fastapi import APIRouter, Body, FastAPI, File, Header, Query, UploadFile\n from pydantic import BaseModel\n \n app = FastAPI(title=\"My Test API\", description=\"An API for testing openapi-python-client\",)\n@@ -43,13 +43,15 @@ class AModel(BaseModel):\n \n     an_enum_value: AnEnum\n     nested_list_of_enums: List[List[DifferentEnum]] = []\n-    some_dict: Dict[str, str] = {}\n+    some_dict: Dict[str, str]\n     aCamelDateTime: Union[datetime, date]\n     a_date: date\n \n \n @test_router.get(\"/\", response_model=List[AModel], operation_id=\"getUserList\")\n-def get_list(an_enum_value: List[AnEnum] = Query(...), some_date: Union[date, datetime] = Query(...)):\n+def get_list(\n+    an_enum_value: List[AnEnum] = Query(...), some_date: Union[date, datetime] = Query(...),\n+):\n     \"\"\" Get a list of things \"\"\"\n     return\n \n@@ -67,6 +69,22 @@ def json_body(body: AModel):\n     return\n \n \n+@test_router.post(\"/test_defaults\")\n+def test_defaults(\n+    string_prop: str = Query(default=\"the default string\"),\n+    datetime_prop: datetime = Query(default=datetime(1010, 10, 10)),\n+    date_prop: date = Query(default=date(1010, 10, 10)),\n+    float_prop: float = Query(default=3.14),\n+    int_prop: int = Query(default=7),\n+    boolean_prop: bool = Query(default=False),\n+    list_prop: List[AnEnum] = Query(default=[AnEnum.FIRST_VALUE, AnEnum.SECOND_VALUE]),\n+    union_prop: Union[float, str] = Query(default=\"not a float\"),\n+    enum_prop: AnEnum = Query(default=AnEnum.FIRST_VALUE),\n+    dict_prop: Dict[str, str] = Body(default={\"key\": \"val\"}),\n+):\n+    return\n+\n+\n app.include_router(test_router, prefix=\"/tests\", tags=[\"tests\"])\n \n "
        },
        {
          "filename": "end_to_end_tests/fastapi_app/openapi.json",
          "status": "modified",
          "additions": 152,
          "deletions": 2,
          "patch": "@@ -184,6 +184,156 @@\n                     }\n                 }\n             }\n+        },\n+        \"/tests/test_defaults\": {\n+            \"post\": {\n+                \"tags\": [\n+                    \"tests\"\n+                ],\n+                \"summary\": \"Test Defaults\",\n+                \"operationId\": \"test_defaults_tests_test_defaults_post\",\n+                \"parameters\": [\n+                    {\n+                        \"required\": false,\n+                        \"schema\": {\n+                            \"title\": \"String Prop\",\n+                            \"type\": \"string\",\n+                            \"default\": \"the default string\"\n+                        },\n+                        \"name\": \"string_prop\",\n+                        \"in\": \"query\"\n+                    },\n+                    {\n+                        \"required\": false,\n+                        \"schema\": {\n+                            \"title\": \"Datetime Prop\",\n+                            \"type\": \"string\",\n+                            \"format\": \"date-time\",\n+                            \"default\": \"1010-10-10T00:00:00\"\n+                        },\n+                        \"name\": \"datetime_prop\",\n+                        \"in\": \"query\"\n+                    },\n+                    {\n+                        \"required\": false,\n+                        \"schema\": {\n+                            \"title\": \"Date Prop\",\n+                            \"type\": \"string\",\n+                            \"format\": \"date\",\n+                            \"default\": \"1010-10-10\"\n+                        },\n+                        \"name\": \"date_prop\",\n+                        \"in\": \"query\"\n+                    },\n+                    {\n+                        \"required\": false,\n+                        \"schema\": {\n+                            \"title\": \"Float Prop\",\n+                            \"type\": \"number\",\n+                            \"default\": 3.14\n+                        },\n+                        \"name\": \"float_prop\",\n+                        \"in\": \"query\"\n+                    },\n+                    {\n+                        \"required\": false,\n+                        \"schema\": {\n+                            \"title\": \"Int Prop\",\n+                            \"type\": \"integer\",\n+                            \"default\": 7\n+                        },\n+                        \"name\": \"int_prop\",\n+                        \"in\": \"query\"\n+                    },\n+                    {\n+                        \"required\": false,\n+                        \"schema\": {\n+                            \"title\": \"Boolean Prop\",\n+                            \"type\": \"boolean\",\n+                            \"default\": false\n+                        },\n+                        \"name\": \"boolean_prop\",\n+                        \"in\": \"query\"\n+                    },\n+                    {\n+                        \"required\": false,\n+                        \"schema\": {\n+                            \"title\": \"List Prop\",\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"$ref\": \"#/components/schemas/AnEnum\"\n+                            },\n+                            \"default\": [\n+                                \"FIRST_VALUE\",\n+                                \"SECOND_VALUE\"\n+                            ]\n+                        },\n+                        \"name\": \"list_prop\",\n+                        \"in\": \"query\"\n+                    },\n+                    {\n+                        \"required\": false,\n+                        \"schema\": {\n+                            \"title\": \"Union Prop\",\n+                            \"anyOf\": [\n+                                {\n+                                    \"type\": \"number\"\n+                                },\n+                                {\n+                                    \"type\": \"string\"\n+                                }\n+                            ],\n+                            \"default\": \"not a float\"\n+                        },\n+                        \"name\": \"union_prop\",\n+                        \"in\": \"query\"\n+                    },\n+                    {\n+                        \"required\": false,\n+                        \"schema\": {\n+                            \"$ref\": \"#/components/schemas/AnEnum\"\n+                        },\n+                        \"name\": \"enum_prop\",\n+                        \"in\": \"query\"\n+                    }\n+                ],\n+                \"requestBody\": {\n+                    \"content\": {\n+                        \"application/json\": {\n+                            \"schema\": {\n+                                \"title\": \"Dict Prop\",\n+                                \"type\": \"object\",\n+                                \"additionalProperties\": {\n+                                    \"type\": \"string\"\n+                                },\n+                                \"default\": {\n+                                    \"key\": \"val\"\n+                                }\n+                            }\n+                        }\n+                    }\n+                },\n+                \"responses\": {\n+                    \"200\": {\n+                        \"description\": \"Successful Response\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {}\n+                            }\n+                        }\n+                    },\n+                    \"422\": {\n+                        \"description\": \"Validation Error\",\n+                        \"content\": {\n+                            \"application/json\": {\n+                                \"schema\": {\n+                                    \"$ref\": \"#/components/schemas/HTTPValidationError\"\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         }\n     },\n     \"components\": {\n@@ -192,6 +342,7 @@\n                 \"title\": \"AModel\",\n                 \"required\": [\n                     \"an_enum_value\",\n+                    \"some_dict\",\n                     \"aCamelDateTime\",\n                     \"a_date\"\n                 ],\n@@ -216,8 +367,7 @@\n                         \"type\": \"object\",\n                         \"additionalProperties\": {\n                             \"type\": \"string\"\n-                        },\n-                        \"default\": {}\n+                        }\n                     },\n                     \"aCamelDateTime\": {\n                         \"title\": \"Acameldatetime\","
        },
        {
          "filename": "end_to_end_tests/golden-master/my_test_api_client/api/tests.py",
          "status": "modified",
          "additions": 82,
          "deletions": 4,
          "patch": "@@ -1,5 +1,5 @@\n-from dataclasses import asdict\n-from datetime import date, datetime\n+import datetime\n+from dataclasses import asdict, field\n from typing import Any, Dict, List, Optional, Union, cast\n \n import httpx\n@@ -13,7 +13,7 @@\n \n \n def get_user_list(\n-    *, client: Client, an_enum_value: List[AnEnum], some_date: Union[date, datetime],\n+    *, client: Client, an_enum_value: List[AnEnum], some_date: Union[datetime.date, datetime.datetime],\n ) -> Union[\n     List[AModel], HTTPValidationError,\n ]:\n@@ -29,7 +29,7 @@ def get_user_list(\n \n         json_an_enum_value.append(an_enum_value_item)\n \n-    if isinstance(some_date, date):\n+    if isinstance(some_date, datetime.date):\n         json_some_date = some_date.isoformat()\n \n     else:\n@@ -94,3 +94,81 @@ def json_body_tests_json_body_post(\n         return HTTPValidationError.from_dict(cast(Dict[str, Any], response.json()))\n     else:\n         raise ApiResponseError(response=response)\n+\n+\n+def test_defaults_tests_test_defaults_post(\n+    *,\n+    client: Client,\n+    json_body: Dict[Any, Any],\n+    string_prop: Optional[str] = \"the default string\",\n+    datetime_prop: Optional[datetime.datetime] = datetime.datetime(1010, 10, 10, 0, 0),\n+    date_prop: Optional[datetime.date] = datetime.date(1010, 10, 10),\n+    float_prop: Optional[float] = 3.14,\n+    int_prop: Optional[int] = 7,\n+    boolean_prop: Optional[bool] = False,\n+    list_prop: Optional[List[AnEnum]] = field(\n+        default_factory=lambda: cast(Optional[List[AnEnum]], [AnEnum.FIRST_VALUE, AnEnum.SECOND_VALUE])\n+    ),\n+    union_prop: Optional[Union[Optional[float], Optional[str]]] = \"not a float\",\n+    enum_prop: Optional[AnEnum] = None,\n+) -> Union[\n+    None, HTTPValidationError,\n+]:\n+\n+    \"\"\"  \"\"\"\n+    url = \"{}/tests/test_defaults\".format(client.base_url)\n+\n+    headers: Dict[str, Any] = client.get_headers()\n+\n+    json_datetime_prop = datetime_prop.isoformat() if datetime_prop else None\n+\n+    json_date_prop = date_prop.isoformat() if date_prop else None\n+\n+    if list_prop is None:\n+        json_list_prop = None\n+    else:\n+        json_list_prop = []\n+        for list_prop_item_data in list_prop:\n+            list_prop_item = list_prop_item_data.value\n+\n+            json_list_prop.append(list_prop_item)\n+\n+    if union_prop is None:\n+        json_union_prop: Optional[Union[Optional[float], Optional[str]]] = None\n+    elif isinstance(union_prop, float):\n+        json_union_prop = union_prop\n+    else:\n+        json_union_prop = union_prop\n+\n+    json_enum_prop = enum_prop.value if enum_prop else None\n+\n+    params: Dict[str, Any] = {}\n+    if string_prop is not None:\n+        params[\"string_prop\"] = string_prop\n+    if datetime_prop is not None:\n+        params[\"datetime_prop\"] = json_datetime_prop\n+    if date_prop is not None:\n+        params[\"date_prop\"] = json_date_prop\n+    if float_prop is not None:\n+        params[\"float_prop\"] = float_prop\n+    if int_prop is not None:\n+        params[\"int_prop\"] = int_prop\n+    if boolean_prop is not None:\n+        params[\"boolean_prop\"] = boolean_prop\n+    if list_prop is not None:\n+        params[\"list_prop\"] = json_list_prop\n+    if union_prop is not None:\n+        params[\"union_prop\"] = json_union_prop\n+    if enum_prop is not None:\n+        params[\"enum_prop\"] = json_enum_prop\n+\n+    json_json_body = json_body\n+\n+    response = httpx.post(url=url, headers=headers, json=json_json_body, params=params,)\n+\n+    if response.status_code == 200:\n+        return None\n+    if response.status_code == 422:\n+        return HTTPValidationError.from_dict(cast(Dict[str, Any], response.json()))\n+    else:\n+        raise ApiResponseError(response=response)"
        },
        {
          "filename": "end_to_end_tests/golden-master/my_test_api_client/async_api/tests.py",
          "status": "modified",
          "additions": 83,
          "deletions": 4,
          "patch": "@@ -1,5 +1,5 @@\n-from dataclasses import asdict\n-from datetime import date, datetime\n+import datetime\n+from dataclasses import asdict, field\n from typing import Any, Dict, List, Optional, Union, cast\n \n import httpx\n@@ -13,7 +13,7 @@\n \n \n async def get_user_list(\n-    *, client: Client, an_enum_value: List[AnEnum], some_date: Union[date, datetime],\n+    *, client: Client, an_enum_value: List[AnEnum], some_date: Union[datetime.date, datetime.datetime],\n ) -> Union[\n     List[AModel], HTTPValidationError,\n ]:\n@@ -29,7 +29,7 @@ async def get_user_list(\n \n         json_an_enum_value.append(an_enum_value_item)\n \n-    if isinstance(some_date, date):\n+    if isinstance(some_date, datetime.date):\n         json_some_date = some_date.isoformat()\n \n     else:\n@@ -97,3 +97,82 @@ async def json_body_tests_json_body_post(\n         return HTTPValidationError.from_dict(cast(Dict[str, Any], response.json()))\n     else:\n         raise ApiResponseError(response=response)\n+\n+\n+async def test_defaults_tests_test_defaults_post(\n+    *,\n+    client: Client,\n+    json_body: Dict[Any, Any],\n+    string_prop: Optional[str] = \"the default string\",\n+    datetime_prop: Optional[datetime.datetime] = datetime.datetime(1010, 10, 10, 0, 0),\n+    date_prop: Optional[datetime.date] = datetime.date(1010, 10, 10),\n+    float_prop: Optional[float] = 3.14,\n+    int_prop: Optional[int] = 7,\n+    boolean_prop: Optional[bool] = False,\n+    list_prop: Optional[List[AnEnum]] = field(\n+        default_factory=lambda: cast(Optional[List[AnEnum]], [AnEnum.FIRST_VALUE, AnEnum.SECOND_VALUE])\n+    ),\n+    union_prop: Optional[Union[Optional[float], Optional[str]]] = \"not a float\",\n+    enum_prop: Optional[AnEnum] = None,\n+) -> Union[\n+    None, HTTPValidationError,\n+]:\n+\n+    \"\"\"  \"\"\"\n+    url = \"{}/tests/test_defaults\".format(client.base_url,)\n+\n+    headers: Dict[str, Any] = client.get_headers()\n+\n+    json_datetime_prop = datetime_prop.isoformat() if datetime_prop else None\n+\n+    json_date_prop = date_prop.isoformat() if date_prop else None\n+\n+    if list_prop is None:\n+        json_list_prop = None\n+    else:\n+        json_list_prop = []\n+        for list_prop_item_data in list_prop:\n+            list_prop_item = list_prop_item_data.value\n+\n+            json_list_prop.append(list_prop_item)\n+\n+    if union_prop is None:\n+        json_union_prop: Optional[Union[Optional[float], Optional[str]]] = None\n+    elif isinstance(union_prop, float):\n+        json_union_prop = union_prop\n+    else:\n+        json_union_prop = union_prop\n+\n+    json_enum_prop = enum_prop.value if enum_prop else None\n+\n+    params: Dict[str, Any] = {}\n+    if string_prop is not None:\n+        params[\"string_prop\"] = string_prop\n+    if datetime_prop is not None:\n+        params[\"datetime_prop\"] = json_datetime_prop\n+    if date_prop is not None:\n+        params[\"date_prop\"] = json_date_prop\n+    if float_prop is not None:\n+        params[\"float_prop\"] = float_prop\n+    if int_prop is not None:\n+        params[\"int_prop\"] = int_prop\n+    if boolean_prop is not None:\n+        params[\"boolean_prop\"] = boolean_prop\n+    if list_prop is not None:\n+        params[\"list_prop\"] = json_list_prop\n+    if union_prop is not None:\n+        params[\"union_prop\"] = json_union_prop\n+    if enum_prop is not None:\n+        params[\"enum_prop\"] = json_enum_prop\n+\n+    json_json_body = json_body\n+\n+    async with httpx.AsyncClient() as _client:\n+        response = await _client.post(url=url, headers=headers, json=json_json_body, params=params,)\n+\n+    if response.status_code == 200:\n+        return None\n+    if response.status_code == 422:\n+        return HTTPValidationError.from_dict(cast(Dict[str, Any], response.json()))\n+    else:\n+        raise ApiResponseError(response=response)"
        },
        {
          "filename": "end_to_end_tests/golden-master/my_test_api_client/models/a_model.py",
          "status": "modified",
          "additions": 16,
          "deletions": 16,
          "patch": "@@ -1,7 +1,7 @@\n from __future__ import annotations\n \n+import datetime\n from dataclasses import dataclass, field\n-from datetime import date, datetime\n from typing import Any, Dict, List, Optional, Union, cast\n \n from .an_enum import AnEnum\n@@ -13,17 +13,19 @@ class AModel:\n     \"\"\" A Model for testing all the ways custom objects can be used  \"\"\"\n \n     an_enum_value: AnEnum\n-    a_camel_date_time: Union[datetime, date]\n-    a_date: date\n+    some_dict: Dict[Any, Any]\n+    a_camel_date_time: Union[datetime.datetime, datetime.date]\n+    a_date: datetime.date\n     nested_list_of_enums: Optional[List[List[DifferentEnum]]] = field(\n         default_factory=lambda: cast(Optional[List[List[DifferentEnum]]], [])\n     )\n-    some_dict: Optional[Dict[Any, Any]] = field(default_factory=lambda: cast(Optional[Dict[Any, Any]], {}))\n \n     def to_dict(self) -> Dict[str, Any]:\n         an_enum_value = self.an_enum_value.value\n \n-        if isinstance(self.a_camel_date_time, datetime):\n+        some_dict = self.some_dict\n+\n+        if isinstance(self.a_camel_date_time, datetime.datetime):\n             a_camel_date_time = self.a_camel_date_time.isoformat()\n \n         else:\n@@ -44,35 +46,35 @@ def to_dict(self) -> Dict[str, Any]:\n \n                 nested_list_of_enums.append(nested_list_of_enums_item)\n \n-        some_dict = self.some_dict\n-\n         return {\n             \"an_enum_value\": an_enum_value,\n+            \"some_dict\": some_dict,\n             \"aCamelDateTime\": a_camel_date_time,\n             \"a_date\": a_date,\n             \"nested_list_of_enums\": nested_list_of_enums,\n-            \"some_dict\": some_dict,\n         }\n \n     @staticmethod\n     def from_dict(d: Dict[str, Any]) -> AModel:\n         an_enum_value = AnEnum(d[\"an_enum_value\"])\n \n-        def _parse_a_camel_date_time(data: Dict[str, Any]) -> Union[datetime, date]:\n-            a_camel_date_time: Union[datetime, date]\n+        some_dict = d[\"some_dict\"]\n+\n+        def _parse_a_camel_date_time(data: Dict[str, Any]) -> Union[datetime.datetime, datetime.date]:\n+            a_camel_date_time: Union[datetime.datetime, datetime.date]\n             try:\n-                a_camel_date_time = datetime.fromisoformat(d[\"aCamelDateTime\"])\n+                a_camel_date_time = datetime.datetime.fromisoformat(d[\"aCamelDateTime\"])\n \n                 return a_camel_date_time\n             except:\n                 pass\n-            a_camel_date_time = date.fromisoformat(d[\"aCamelDateTime\"])\n+            a_camel_date_time = datetime.date.fromisoformat(d[\"aCamelDateTime\"])\n \n             return a_camel_date_time\n \n         a_camel_date_time = _parse_a_camel_date_time(d[\"aCamelDateTime\"])\n \n-        a_date = date.fromisoformat(d[\"a_date\"])\n+        a_date = datetime.date.fromisoformat(d[\"a_date\"])\n \n         nested_list_of_enums = []\n         for nested_list_of_enums_item_data in d.get(\"nested_list_of_enums\") or []:\n@@ -84,12 +86,10 @@ def _parse_a_camel_date_time(data: Dict[str, Any]) -> Union[datetime, date]:\n \n             nested_list_of_enums.append(nested_list_of_enums_item)\n \n-        some_dict = d.get(\"some_dict\")\n-\n         return AModel(\n             an_enum_value=an_enum_value,\n+            some_dict=some_dict,\n             a_camel_date_time=a_camel_date_time,\n             a_date=a_date,\n             nested_list_of_enums=nested_list_of_enums,\n-            some_dict=some_dict,\n         )"
        },
        {
          "filename": "openapi_python_client/__init__.py",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -96,7 +96,9 @@ def __init__(self, *, openapi: GeneratorData) -> None:\n \n         self.package_name: str = self.package_name_override or self.project_name.replace(\"-\", \"_\")\n         self.package_dir: Path = self.project_dir / self.package_name\n-        self.package_description: str = f\"A client library for accessing {self.openapi.title}\"\n+        self.package_description: str = utils.remove_string_escapes(\n+            f\"A client library for accessing {self.openapi.title}\"\n+        )\n         self.version: str = openapi.version\n \n         self.env.filters.update(self.TEMPLATE_FILTERS)"
        },
        {
          "filename": "openapi_python_client/parser/errors.py",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -37,3 +37,7 @@ class PropertyError(ParseError):\n     \"\"\" Error raised when there's a problem creating a Property \"\"\"\n \n     header = \"Problem creating a Property: \"\n+\n+\n+class ValidationError(Exception):\n+    pass"
        },
        {
          "filename": "openapi_python_client/parser/openapi.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -8,6 +8,7 @@\n from pydantic import ValidationError\n \n from .. import schema as oai\n+from .. import utils\n from .errors import GeneratorError, ParseError, PropertyError\n from .properties import EnumProperty, Property, property_from_data\n from .reference import Reference\n@@ -182,7 +183,7 @@ def from_data(*, data: oai.Operation, path: str, method: str, tag: str) -> Union\n         endpoint = Endpoint(\n             path=path,\n             method=method,\n-            description=data.description,\n+            description=utils.remove_string_escapes(data.description) if data.description else \"\",\n             name=data.operationId,\n             requires_security=bool(data.security),\n             tag=tag,"
        },
        {
          "filename": "openapi_python_client/parser/properties.py",
          "status": "modified",
          "additions": 110,
          "deletions": 35,
          "patch": "@@ -1,11 +1,12 @@\n from __future__ import annotations\n \n from dataclasses import InitVar, dataclass, field\n+from datetime import date, datetime\n from typing import Any, ClassVar, Dict, Generic, List, Optional, Set, TypeVar, Union\n \n from .. import schema as oai\n from .. import utils\n-from .errors import PropertyError\n+from .errors import PropertyError, ValidationError\n from .reference import Reference\n \n \n@@ -19,6 +20,9 @@ class Property:\n             templates/property_templates and must contain two macros: construct and transform. Construct will be used to\n             build this property from JSON data (a response from an API). Transform will be used to convert this property\n             to JSON data (when sending a request to the API).\n+\n+    Raises:\n+        ValidationError: Raised when the default value fails to be converted to the expected type\n     \"\"\"\n \n     name: str\n@@ -32,10 +36,16 @@ class Property:\n \n     def __post_init__(self) -> None:\n         self.python_name = utils.snake_case(self.name)\n+        if self.default is not None:\n+            self.default = self._validate_default(default=self.default)\n+\n+    def _validate_default(self, default: Any) -> Any:\n+        \"\"\" Check that the default value is valid for the property's type + perform any necessary sanitization \"\"\"\n+        raise ValidationError\n \n-    def get_type_string(self) -> str:\n+    def get_type_string(self, no_optional: bool = False) -> str:\n         \"\"\" Get a string representation of type that should be used when declaring this property \"\"\"\n-        if self.required:\n+        if self.required or no_optional:\n             return self._type_string\n         return f\"Optional[{self._type_string}]\"\n \n@@ -74,10 +84,8 @@ class StringProperty(Property):\n \n     _type_string: ClassVar[str] = \"str\"\n \n-    def __post_init__(self) -> None:\n-        super().__post_init__()\n-        if self.default is not None:\n-            self.default = f'\"{self.default}\"'\n+    def _validate_default(self, default: Any) -> str:\n+        return f'\"{utils.remove_string_escapes(default)}\"'\n \n \n @dataclass\n@@ -86,7 +94,7 @@ class DateTimeProperty(Property):\n     A property of type datetime.datetime\n     \"\"\"\n \n-    _type_string: ClassVar[str] = \"datetime\"\n+    _type_string: ClassVar[str] = \"datetime.datetime\"\n     template: ClassVar[str] = \"datetime_property.pyi\"\n \n     def get_imports(self, *, prefix: str) -> Set[str]:\n@@ -97,15 +105,23 @@ def get_imports(self, *, prefix: str) -> Set[str]:\n             prefix: A prefix to put before any relative (local) module names.\n         \"\"\"\n         imports = super().get_imports(prefix=prefix)\n-        imports.update({\"from datetime import datetime\", \"from typing import cast\"})\n+        imports.update({\"import datetime\", \"from typing import cast\"})\n         return imports\n \n+    def _validate_default(self, default: Any) -> str:\n+        for format_string in (\"%Y-%m-%dT%H:%M:%S\", \"%Y-%m-%dT%H:%M:%S%z\"):\n+            try:\n+                return repr(datetime.strptime(default, format_string))\n+            except (TypeError, ValueError):\n+                continue\n+        raise ValidationError\n+\n \n @dataclass\n class DateProperty(Property):\n     \"\"\" A property of type datetime.date \"\"\"\n \n-    _type_string: ClassVar[str] = \"date\"\n+    _type_string: ClassVar[str] = \"datetime.date\"\n     template: ClassVar[str] = \"date_property.pyi\"\n \n     def get_imports(self, *, prefix: str) -> Set[str]:\n@@ -116,9 +132,15 @@ def get_imports(self, *, prefix: str) -> Set[str]:\n             prefix: A prefix to put before any relative (local) module names.\n         \"\"\"\n         imports = super().get_imports(prefix=prefix)\n-        imports.update({\"from datetime import date\", \"from typing import cast\"})\n+        imports.update({\"import datetime\", \"from typing import cast\"})\n         return imports\n \n+    def _validate_default(self, default: Any) -> str:\n+        try:\n+            return repr(date.fromisoformat(default))\n+        except (TypeError, ValueError) as e:\n+            raise ValidationError() from e\n+\n \n @dataclass\n class FileProperty(Property):\n@@ -146,6 +168,12 @@ class FloatProperty(Property):\n     default: Optional[float] = None\n     _type_string: ClassVar[str] = \"float\"\n \n+    def _validate_default(self, default: Any) -> float:\n+        try:\n+            return float(default)\n+        except (TypeError, ValueError) as e:\n+            raise ValidationError() from e\n+\n \n @dataclass\n class IntProperty(Property):\n@@ -154,13 +182,23 @@ class IntProperty(Property):\n     default: Optional[int] = None\n     _type_string: ClassVar[str] = \"int\"\n \n+    def _validate_default(self, default: Any) -> int:\n+        try:\n+            return int(default)\n+        except (TypeError, ValueError) as e:\n+            raise ValidationError() from e\n+\n \n @dataclass\n class BooleanProperty(Property):\n     \"\"\" Property for bool \"\"\"\n \n     _type_string: ClassVar[str] = \"bool\"\n \n+    def _validate_default(self, default: Any) -> bool:\n+        # no try/except needed as anything that comes from the initial load from json/yaml will be boolable\n+        return bool(default)\n+\n \n InnerProp = TypeVar(\"InnerProp\", bound=Property)\n \n@@ -172,14 +210,9 @@ class ListProperty(Property, Generic[InnerProp]):\n     inner_property: InnerProp\n     template: ClassVar[str] = \"list_property.pyi\"\n \n-    def __post_init__(self) -> None:\n-        super().__post_init__()\n-        if self.default is not None:\n-            self.default = f\"field(default_factory=lambda: cast({self.get_type_string()}, {self.default}))\"\n-\n-    def get_type_string(self) -> str:\n+    def get_type_string(self, no_optional: bool = False) -> str:\n         \"\"\" Get a string representation of type that should be used when declaring this property \"\"\"\n-        if self.required:\n+        if self.required or no_optional:\n             return f\"List[{self.inner_property.get_type_string()}]\"\n         return f\"Optional[List[{self.inner_property.get_type_string()}]]\"\n \n@@ -198,6 +231,16 @@ def get_imports(self, *, prefix: str) -> Set[str]:\n             imports.add(\"from typing import cast\")\n         return imports\n \n+    def _validate_default(self, default: Any) -> str:\n+        if not isinstance(default, list):\n+            raise ValidationError()\n+\n+        default = list(map(self.inner_property._validate_default, default))\n+        if isinstance(self.inner_property, RefProperty):  # Fix enums to use the actual value\n+            default = str(default).replace(\"'\", \"\")\n+\n+        return f\"field(default_factory=lambda: cast({self.get_type_string()}, {default}))\"\n+\n \n @dataclass\n class UnionProperty(Property):\n@@ -206,11 +249,11 @@ class UnionProperty(Property):\n     inner_properties: List[Property]\n     template: ClassVar[str] = \"union_property.pyi\"\n \n-    def get_type_string(self) -> str:\n+    def get_type_string(self, no_optional: bool = False) -> str:\n         \"\"\" Get a string representation of type that should be used when declaring this property \"\"\"\n         inner_types = [p.get_type_string() for p in self.inner_properties]\n         inner_prop_string = \", \".join(inner_types)\n-        if self.required:\n+        if self.required or no_optional:\n             return f\"Union[{inner_prop_string}]\"\n         return f\"Optional[Union[{inner_prop_string}]]\"\n \n@@ -227,6 +270,15 @@ def get_imports(self, *, prefix: str) -> Set[str]:\n         imports.add(\"from typing import Union\")\n         return imports\n \n+    def _validate_default(self, default: Any) -> Any:\n+        for property in self.inner_properties:\n+            try:\n+                val = property._validate_default(default)\n+                return val\n+            except ValidationError:\n+                continue\n+        raise ValidationError()\n+\n \n _existing_enums: Dict[str, EnumProperty] = {}\n \n@@ -242,7 +294,6 @@ class EnumProperty(Property):\n     template: ClassVar[str] = \"enum_property.pyi\"\n \n     def __post_init__(self, title: str) -> None:  # type: ignore\n-        super().__post_init__()\n         reference = Reference.from_ref(title)\n         dedup_counter = 0\n         while reference.class_name in _existing_enums:\n@@ -253,9 +304,7 @@ def __post_init__(self, title: str) -> None:  # type: ignore\n             reference = Reference.from_ref(f\"{reference.class_name}{dedup_counter}\")\n \n         self.reference = reference\n-        inverse_values = {v: k for k, v in self.values.items()}\n-        if self.default is not None:\n-            self.default = f\"{self.reference.class_name}.{inverse_values[self.default]}\"\n+        super().__post_init__()\n         _existing_enums[self.reference.class_name] = self\n \n     @staticmethod\n@@ -268,10 +317,10 @@ def get_enum(name: str) -> Optional[EnumProperty]:\n         \"\"\" Get all the EnumProperties that have been registered keyed by class name \"\"\"\n         return _existing_enums.get(name)\n \n-    def get_type_string(self) -> str:\n+    def get_type_string(self, no_optional: bool = False) -> str:\n         \"\"\" Get a string representation of type that should be used when declaring this property \"\"\"\n \n-        if self.required:\n+        if self.required or no_optional:\n             return self.reference.class_name\n         return f\"Optional[{self.reference.class_name}]\"\n \n@@ -298,10 +347,18 @@ def values_from_list(values: List[str]) -> Dict[str, str]:\n                 key = f\"VALUE_{i}\"\n             if key in output:\n                 raise ValueError(f\"Duplicate key {key} in Enum\")\n-            output[key] = value\n+            sanitized_key = utils.fix_keywords(utils.sanitize(key))\n+            output[sanitized_key] = utils.remove_string_escapes(value)\n \n         return output\n \n+    def _validate_default(self, default: Any) -> str:\n+        inverse_values = {v: k for k, v in self.values.items()}\n+        try:\n+            return f\"{self.reference.class_name}.{inverse_values[default]}\"\n+        except KeyError as e:\n+            raise ValidationError() from e\n+\n \n @dataclass\n class RefProperty(Property):\n@@ -316,9 +373,9 @@ def template(self) -> str:  # type: ignore\n             return \"enum_property.pyi\"\n         return \"ref_property.pyi\"\n \n-    def get_type_string(self) -> str:\n+    def get_type_string(self, no_optional: bool = False) -> str:\n         \"\"\" Get a string representation of type that should be used when declaring this property \"\"\"\n-        if self.required:\n+        if self.required or no_optional:\n             return self.reference.class_name\n         return f\"Optional[{self.reference.class_name}]\"\n \n@@ -339,17 +396,20 @@ def get_imports(self, *, prefix: str) -> Set[str]:\n         )\n         return imports\n \n+    def _validate_default(self, default: Any) -> Any:\n+        enum = EnumProperty.get_enum(self.reference.class_name)\n+        if enum:\n+            return enum._validate_default(default)\n+        else:\n+            raise ValidationError\n+\n \n @dataclass\n class DictProperty(Property):\n     \"\"\" Property that is a general Dict \"\"\"\n \n     _type_string: ClassVar[str] = \"Dict[Any, Any]\"\n-\n-    def __post_init__(self) -> None:\n-        super().__post_init__()\n-        if self.default is not None:\n-            self.default = f\"field(default_factory=lambda: cast({self.get_type_string()}, {self.default}))\"\n+    template: ClassVar[str] = \"dict_property.pyi\"\n \n     def get_imports(self, *, prefix: str) -> Set[str]:\n         \"\"\"\n@@ -365,6 +425,11 @@ def get_imports(self, *, prefix: str) -> Set[str]:\n             imports.add(\"from typing import cast\")\n         return imports\n \n+    def _validate_default(self, default: Any) -> str:\n+        if isinstance(default, dict):\n+            return repr(default)\n+        raise ValidationError\n+\n \n def _string_based_property(\n     name: str, required: bool, data: oai.Schema\n@@ -381,10 +446,11 @@ def _string_based_property(\n         return StringProperty(name=name, default=data.default, required=required, pattern=data.pattern)\n \n \n-def property_from_data(\n+def _property_from_data(\n     name: str, required: bool, data: Union[oai.Reference, oai.Schema]\n ) -> Union[Property, PropertyError]:\n     \"\"\" Generate a Property from the OpenAPI dictionary representation of it \"\"\"\n+    name = utils.remove_string_escapes(name)\n     if isinstance(data, oai.Reference):\n         return RefProperty(name=name, required=required, reference=Reference.from_ref(data.ref), default=None)\n     if data.enum:\n@@ -423,3 +489,12 @@ def property_from_data(\n     elif data.type == \"object\":\n         return DictProperty(name=name, required=required, default=data.default)\n     return PropertyError(data=data, detail=f\"unknown type {data.type}\")\n+\n+\n+def property_from_data(\n+    name: str, required: bool, data: Union[oai.Reference, oai.Schema]\n+) -> Union[Property, PropertyError]:\n+    try:\n+        return _property_from_data(name=name, required=required, data=data)\n+    except ValidationError:\n+        return PropertyError(detail=\"Failed to validate default value\", data=data)"
        },
        {
          "filename": "openapi_python_client/templates/async_endpoint_module.pyi",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -70,7 +70,7 @@ async def {{ endpoint.name | snakecase }}(\n             files=multipart_data.to_dict(),\n             {% endif %}\n             {% if endpoint.json_body %}\n-            json={{ \"json_\" +  endpoint.json_body.python_name }},\n+            json={{ \"json_\" + endpoint.json_body.python_name }},\n             {% endif %}\n             {% if endpoint.query_parameters %}\n             params=params,"
        },
        {
          "filename": "openapi_python_client/templates/property_templates/date_property.pyi",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,10 +1,10 @@\n {% macro construct(property, source) %}\n {% if property.required %}\n-{{ property.python_name }} = date.fromisoformat({{ source }})\n+{{ property.python_name }} = datetime.date.fromisoformat({{ source }})\n {% else %}\n {{ property.python_name }} = None\n if {{ source }} is not None:\n-    {{ property.python_name }} = date.fromisoformat(cast(str, {{ source }}))\n+    {{ property.python_name }} = datetime.date.fromisoformat(cast(str, {{ source }}))\n {% endif %}\n {% endmacro %}\n "
        },
        {
          "filename": "openapi_python_client/templates/property_templates/datetime_property.pyi",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,10 +1,10 @@\n {% macro construct(property, source) %}\n {% if property.required %}\n-{{ property.python_name }} = datetime.fromisoformat({{ source }})\n+{{ property.python_name }} = datetime.datetime.fromisoformat({{ source }})\n {% else %}\n {{ property.python_name }} = None\n if {{ source }} is not None:\n-    {{ property.python_name }} = datetime.fromisoformat(cast(str, {{ source }}))\n+    {{ property.python_name }} = datetime.datetime.fromisoformat(cast(str, {{ source }}))\n {% endif %}\n {% endmacro %}\n "
        },
        {
          "filename": "openapi_python_client/templates/property_templates/dict_property.pyi",
          "status": "added",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -0,0 +1,17 @@\n+{% macro construct(property, source) %}\n+{% if property.required %}\n+{{ property.python_name }} = {{ source }}\n+{% else %}\n+{{ property.python_name }} = None\n+if {{ source }} is not None:\n+    {{ property.python_name }} = {{ source }}\n+{% endif %}\n+{% endmacro %}\n+\n+{% macro transform(property, source, destination) %}\n+{% if property.required %}\n+{{ destination }} = {{ source }}\n+{% else %}\n+{{ destination }} = {{ source }} if {{ source }} else None\n+{% endif %}\n+{% endmacro %}"
        },
        {
          "filename": "openapi_python_client/templates/property_templates/union_property.pyi",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -24,13 +24,13 @@ def _parse_{{ property.python_name }}(data: Dict[str, Any]) -> {{ property.get_t\n {% macro transform(property, source, destination) %}\n {% if not property.required %}\n if {{ source }} is None:\n-    {{ destination }} = None\n+    {{ destination }}: {{ property.get_type_string() }} = None\n {% endif %}\n {% for inner_property in property.inner_properties %}\n     {% if loop.first and property.required %}{# No if None statement before this #}\n-if isinstance({{ source }}, {{ inner_property.get_type_string() }}):\n+if isinstance({{ source }}, {{ inner_property.get_type_string(no_optional=True) }}):\n     {% elif not loop.last %}\n-elif isinstance({{ source }}, {{ inner_property.get_type_string() }}):\n+elif isinstance({{ source }}, {{ inner_property.get_type_string(no_optional=True) }}):\n     {% else %}\n else:\n     {% endif %}"
        },
        {
          "filename": "openapi_python_client/utils.py",
          "status": "modified",
          "additions": 17,
          "deletions": 6,
          "patch": "@@ -1,25 +1,36 @@\n import re\n+from keyword import iskeyword\n \n import stringcase\n \n \n-def _sanitize(value: str) -> str:\n-    return re.sub(r\"[^\\w _-]+\", \"\", value)\n+def sanitize(value: str) -> str:\n+    return re.sub(r\"[^\\w _\\-]+\", \"\", value)\n+\n+\n+def fix_keywords(value: str) -> str:\n+    if iskeyword(value):\n+        return f\"{value}_\"\n+    return value\n \n \n def group_title(value: str) -> str:\n-    value = re.sub(r\"([A-Z]{2,})([A-Z][a-z]|[ -_]|$)\", lambda m: m.group(1).title() + m.group(2), value.strip())\n+    value = re.sub(r\"([A-Z]{2,})([A-Z][a-z]|[ \\-_]|$)\", lambda m: m.group(1).title() + m.group(2), value.strip())\n     value = re.sub(r\"(^|[ _-])([A-Z])\", lambda m: m.group(1) + m.group(2).lower(), value)\n     return value\n \n \n def snake_case(value: str) -> str:\n-    return stringcase.snakecase(group_title(_sanitize(value)))\n+    return fix_keywords(stringcase.snakecase(group_title(sanitize(value))))\n \n \n def pascal_case(value: str) -> str:\n-    return stringcase.pascalcase(_sanitize(value))\n+    return fix_keywords(stringcase.pascalcase(sanitize(value)))\n \n \n def kebab_case(value: str) -> str:\n-    return stringcase.spinalcase(group_title(_sanitize(value)))\n+    return fix_keywords(stringcase.spinalcase(group_title(sanitize(value))))\n+\n+\n+def remove_string_escapes(value: str) -> str:\n+    return value.replace('\"', r\"\\\"\")"
        },
        {
          "filename": "tests/test_openapi_parser/test_openapi.py",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -2,7 +2,7 @@\n from pydantic.error_wrappers import ErrorWrapper\n \n import openapi_python_client.schema as oai\n-from openapi_python_client import GeneratorError\n+from openapi_python_client import GeneratorError, utils\n from openapi_python_client.parser.errors import ParseError\n \n MODULE_NAME = \"openapi_python_client.parser.openapi\"\n@@ -546,6 +546,8 @@ def test_from_data(self, mocker):\n             responses=mocker.MagicMock(),\n         )\n \n+        mocker.patch(\"openapi_python_client.utils.remove_string_escapes\", return_value=data.description)\n+\n         endpoint = Endpoint.from_data(data=data, path=path, method=method, tag=\"default\")\n \n         assert endpoint == _add_body.return_value"
        },
        {
          "filename": "tests/test_openapi_parser/test_properties.py",
          "status": "modified",
          "additions": 205,
          "deletions": 16,
          "patch": "@@ -1,12 +1,26 @@\n+from datetime import date, datetime\n+\n import pytest\n \n import openapi_python_client.schema as oai\n-from openapi_python_client.parser.errors import PropertyError\n+from openapi_python_client.parser.errors import PropertyError, ValidationError\n+from openapi_python_client.parser.reference import Reference\n \n MODULE_NAME = \"openapi_python_client.parser.properties\"\n \n \n class TestProperty:\n+    def test___post_init(self, mocker):\n+        from openapi_python_client.parser.properties import Property\n+\n+        validate_default = mocker.patch(f\"{MODULE_NAME}.Property._validate_default\")\n+\n+        Property(name=\"a name\", required=True, default=None)\n+        validate_default.assert_not_called()\n+\n+        Property(name=\"a name\", required=True, default=\"the default value\")\n+        validate_default.assert_called_with(default=\"the default value\")\n+\n     def test_get_type_string(self):\n         from openapi_python_client.parser.properties import Property\n \n@@ -43,15 +57,20 @@ def test_get_imports(self, mocker):\n         p.required = False\n         assert p.get_imports(prefix=\"\") == {\"from typing import Optional\"}\n \n+    def test__validate_default(self):\n+        from openapi_python_client.parser.properties import Property\n \n-class TestStringProperty:\n-    def test___post_init__(self):\n-        from openapi_python_client.parser.properties import StringProperty\n+        # should be okay if default isn't specified\n+        p = Property(name=\"a name\", required=True, default=None)\n \n-        sp = StringProperty(name=\"test\", required=True, default=\"A Default Value\",)\n+        with pytest.raises(ValidationError):\n+            p._validate_default(\"a default value\")\n \n-        assert sp.default == '\"A Default Value\"'\n+        with pytest.raises(ValidationError):\n+            p = Property(name=\"a name\", required=True, default=\"\")\n \n+\n+class TestStringProperty:\n     def test_get_type_string(self):\n         from openapi_python_client.parser.properties import StringProperty\n \n@@ -61,6 +80,12 @@ def test_get_type_string(self):\n         p.required = False\n         assert p.get_type_string() == \"Optional[str]\"\n \n+    def test__validate_default(self):\n+        from openapi_python_client.parser.properties import StringProperty\n+\n+        p = StringProperty(name=\"a name\", required=True, default=\"the default value\")\n+        assert p.default == '\"the default value\"'\n+\n \n class TestDateTimeProperty:\n     def test_get_imports(self, mocker):\n@@ -70,17 +95,26 @@ def test_get_imports(self, mocker):\n         mocker.patch(\"openapi_python_client.utils.snake_case\")\n         p = DateTimeProperty(name=name, required=True, default=None)\n         assert p.get_imports(prefix=\"\") == {\n-            \"from datetime import datetime\",\n+            \"import datetime\",\n             \"from typing import cast\",\n         }\n \n         p.required = False\n         assert p.get_imports(prefix=\"\") == {\n             \"from typing import Optional\",\n-            \"from datetime import datetime\",\n+            \"import datetime\",\n             \"from typing import cast\",\n         }\n \n+    def test__validate_default(self):\n+        from openapi_python_client.parser.properties import DateTimeProperty\n+\n+        with pytest.raises(ValidationError):\n+            p = DateTimeProperty(name=\"a name\", required=True, default=\"not a datetime\")\n+\n+        p = DateTimeProperty(name=\"a name\", required=True, default=\"2017-07-21T17:32:28Z\")\n+        assert p.default == \"datetime.datetime(2017, 7, 21, 17, 32, 28, tzinfo=datetime.timezone.utc)\"\n+\n \n class TestDateProperty:\n     def test_get_imports(self, mocker):\n@@ -90,17 +124,26 @@ def test_get_imports(self, mocker):\n         mocker.patch(\"openapi_python_client.utils.snake_case\")\n         p = DateProperty(name=name, required=True, default=None)\n         assert p.get_imports(prefix=\"\") == {\n-            \"from datetime import date\",\n+            \"import datetime\",\n             \"from typing import cast\",\n         }\n \n         p.required = False\n         assert p.get_imports(prefix=\"\") == {\n             \"from typing import Optional\",\n-            \"from datetime import date\",\n+            \"import datetime\",\n             \"from typing import cast\",\n         }\n \n+    def test__validate_default(self):\n+        from openapi_python_client.parser.properties import DateProperty\n+\n+        with pytest.raises(ValidationError):\n+            p = DateProperty(name=\"a name\", required=True, default=\"not a date\")\n+\n+        p = DateProperty(name=\"a name\", required=True, default=\"1010-10-10\")\n+        assert p.default == \"datetime.date(1010, 10, 10)\"\n+\n \n class TestFileProperty:\n     def test_get_imports(self, mocker):\n@@ -119,6 +162,54 @@ def test_get_imports(self, mocker):\n             \"from dataclasses import astuple\",\n         }\n \n+    def test__validate_default(self):\n+        from openapi_python_client.parser.properties import FileProperty\n+\n+        # should be okay if default isn't specified\n+        p = FileProperty(name=\"a name\", required=True, default=None)\n+\n+        with pytest.raises(ValidationError):\n+            p = FileProperty(name=\"a name\", required=True, default=\"\")\n+\n+\n+class TestFloatProperty:\n+    def test__validate_default(self):\n+        from openapi_python_client.parser.properties import FloatProperty\n+\n+        # should be okay if default isn't specified\n+        p = FloatProperty(name=\"a name\", required=True, default=None)\n+\n+        p = FloatProperty(name=\"a name\", required=True, default=\"123.123\")\n+        assert p.default == 123.123\n+\n+        with pytest.raises(ValidationError):\n+            p = FloatProperty(name=\"a name\", required=True, default=\"not a float\")\n+\n+\n+class TestIntProperty:\n+    def test__validate_default(self):\n+        from openapi_python_client.parser.properties import IntProperty\n+\n+        # should be okay if default isn't specified\n+        p = IntProperty(name=\"a name\", required=True, default=None)\n+\n+        p = IntProperty(name=\"a name\", required=True, default=\"123\")\n+        assert p.default == 123\n+\n+        with pytest.raises(ValidationError):\n+            p = IntProperty(name=\"a name\", required=True, default=\"not an int\")\n+\n+\n+class TestBooleanProperty:\n+    def test__validate_default(self):\n+        from openapi_python_client.parser.properties import BooleanProperty\n+\n+        # should be okay if default isn't specified\n+        p = BooleanProperty(name=\"a name\", required=True, default=None)\n+\n+        p = BooleanProperty(name=\"a name\", required=True, default=\"Literally anything will work\")\n+        assert p.default == True\n+\n \n class TestListProperty:\n     def test_get_type_string(self, mocker):\n@@ -165,6 +256,30 @@ def test_get_type_imports(self, mocker):\n             \"from dataclasses import field\",\n         }\n \n+    def test__validate_default(self, mocker):\n+        from openapi_python_client.parser.properties import ListProperty\n+\n+        inner_property = mocker.MagicMock()\n+        inner_type_string = mocker.MagicMock()\n+        inner_property.get_type_string.return_value = inner_type_string\n+        inner_property._validate_default.return_value = \"y\"\n+\n+        p = ListProperty(name=\"a name\", required=True, default=[\"x\"], inner_property=inner_property)\n+        assert p.default == f\"field(default_factory=lambda: cast(List[{inner_type_string}], ['y']))\"\n+\n+        with pytest.raises(ValidationError):\n+            p = ListProperty(name=\"a name\", required=True, default=\"x\", inner_property=inner_property)\n+\n+    def test__validate_default_enum_items(self, mocker):\n+        from openapi_python_client.parser.properties import ListProperty, RefProperty\n+\n+        inner_enum_property = mocker.MagicMock(spec=RefProperty)\n+        inner_enum_property.get_type_string.return_value = \"AnEnum\"\n+        inner_enum_property._validate_default.return_value = \"AnEnum.val1\"\n+\n+        p = ListProperty(name=\"a name\", required=True, default=[\"val1\"], inner_property=inner_enum_property)\n+        assert p.default == f\"field(default_factory=lambda: cast(List[AnEnum], [AnEnum.val1]))\"\n+\n \n class TestUnionProperty:\n     def test_get_type_string(self, mocker):\n@@ -209,6 +324,28 @@ def test_get_type_imports(self, mocker):\n             \"from typing import Optional\",\n         }\n \n+    def test__validate_default(self, mocker):\n+        from openapi_python_client.parser.properties import UnionProperty\n+\n+        inner_property_1 = mocker.MagicMock()\n+        inner_property_1.get_type_string.return_value = \"inner_type_string_1\"\n+        inner_property_1._validate_default.side_effect = ValidationError()\n+        inner_property_2 = mocker.MagicMock()\n+        inner_property_2.get_type_string.return_value = \"inner_type_string_2\"\n+        inner_property_2._validate_default.return_value = \"the default value\"\n+        p = UnionProperty(\n+            name=\"test\", required=True, default=\"a value\", inner_properties=[inner_property_1, inner_property_2]\n+        )\n+\n+        assert p.default == \"the default value\"\n+\n+        inner_property_2._validate_default.side_effect = ValidationError()\n+\n+        with pytest.raises(ValidationError):\n+            p = UnionProperty(\n+                name=\"test\", required=True, default=\"a value\", inner_properties=[inner_property_1, inner_property_2]\n+            )\n+\n \n class TestEnumProperty:\n     def test___post_init__(self, mocker):\n@@ -327,6 +464,24 @@ def test_get_enum(self):\n         assert properties.EnumProperty.get_enum(\"test\") == \"an enum\"\n         properties._existing_enums = {}\n \n+    def test__validate_default(self, mocker):\n+        fake_reference = mocker.MagicMock(class_name=\"MyTestEnum\", module_name=\"my_test_enum\")\n+        mocker.patch(f\"{MODULE_NAME}.Reference.from_ref\", return_value=fake_reference)\n+\n+        from openapi_python_client.parser import properties\n+\n+        enum_property = properties.EnumProperty(\n+            name=\"test\", required=True, default=\"test\", values={\"TEST\": \"test\"}, title=\"a_title\"\n+        )\n+        assert enum_property.default == \"MyTestEnum.TEST\"\n+\n+        with pytest.raises(ValidationError):\n+            enum_property = properties.EnumProperty(\n+                name=\"test\", required=True, default=\"bad_val\", values={\"TEST\": \"test\"}, title=\"a_title\"\n+            )\n+\n+        properties._existing_enums = {}\n+\n \n class TestRefProperty:\n     def test_template(self, mocker):\n@@ -376,14 +531,20 @@ def test_get_imports(self, mocker):\n             \"from typing import Optional\",\n         }\n \n+    def test__validate_default(self, mocker):\n+        from openapi_python_client.parser.properties import RefProperty\n+\n+        with pytest.raises(ValidationError):\n+            p = RefProperty(name=\"a name\", required=True, default=\"\", reference=mocker.MagicMock())\n \n-class TestDictProperty:\n-    def test___post_init__(self):\n-        from openapi_python_client.parser.properties import DictProperty\n+        enum_property = mocker.MagicMock()\n+        enum_property._validate_default.return_value = \"val1\"\n+        mocker.patch(f\"{MODULE_NAME}.EnumProperty.get_enum\", return_value=enum_property)\n+        p = RefProperty(name=\"a name\", required=True, default=\"\", reference=mocker.MagicMock())\n+        assert p.default == \"val1\"\n \n-        p = DictProperty(name=\"blah\", required=True, default={})\n-        assert p.default == \"field(default_factory=lambda: cast(Dict[Any, Any], {}))\"\n \n+class TestDictProperty:\n     def test_get_imports(self, mocker):\n         from openapi_python_client.parser.properties import DictProperty\n \n@@ -409,13 +570,22 @@ def test_get_imports(self, mocker):\n             \"from dataclasses import field\",\n         }\n \n+    def test__validate_default(self):\n+        from openapi_python_client.parser.properties import DictProperty\n+\n+        p = DictProperty(name=\"a name\", required=True, default={\"key\": \"value\"})\n+\n+        with pytest.raises(ValidationError):\n+            p = DictProperty(name=\"a name\", required=True, default=\"not a dict\")\n+\n \n class TestPropertyFromData:\n     def test_property_from_data_enum(self, mocker):\n         name = mocker.MagicMock()\n         required = mocker.MagicMock()\n         data = mocker.MagicMock(title=None)\n         EnumProperty = mocker.patch(f\"{MODULE_NAME}.EnumProperty\")\n+        mocker.patch(\"openapi_python_client.utils.remove_string_escapes\", return_value=name)\n \n         from openapi_python_client.parser.properties import property_from_data\n \n@@ -443,6 +613,7 @@ def test_property_from_data_ref(self, mocker):\n         data = oai.Reference.construct(ref=mocker.MagicMock())\n         from_ref = mocker.patch(f\"{MODULE_NAME}.Reference.from_ref\")\n         RefProperty = mocker.patch(f\"{MODULE_NAME}.RefProperty\")\n+        mocker.patch(\"openapi_python_client.utils.remove_string_escapes\", return_value=name)\n \n         from openapi_python_client.parser.properties import property_from_data\n \n@@ -457,6 +628,8 @@ def test_property_from_data_string(self, mocker):\n         name = mocker.MagicMock()\n         required = mocker.MagicMock()\n         data = oai.Schema.construct(type=\"string\")\n+        mocker.patch(\"openapi_python_client.utils.remove_string_escapes\", return_value=name)\n+\n         from openapi_python_client.parser.properties import property_from_data\n \n         p = property_from_data(name=name, required=required, data=data)\n@@ -478,6 +651,7 @@ def test_property_from_data_simple_types(self, mocker, openapi_type, python_type\n         required = mocker.MagicMock()\n         data = oai.Schema.construct(type=openapi_type)\n         clazz = mocker.patch(f\"{MODULE_NAME}.{python_type}\")\n+        mocker.patch(\"openapi_python_client.utils.remove_string_escapes\", return_value=name)\n \n         from openapi_python_client.parser.properties import property_from_data\n \n@@ -501,12 +675,13 @@ def test_property_from_data_array(self, mocker):\n         data = oai.Schema(type=\"array\", items={\"type\": \"number\", \"default\": \"0.0\"},)\n         ListProperty = mocker.patch(f\"{MODULE_NAME}.ListProperty\")\n         FloatProperty = mocker.patch(f\"{MODULE_NAME}.FloatProperty\")\n+        mocker.patch(\"openapi_python_client.utils.remove_string_escapes\", return_value=name)\n \n         from openapi_python_client.parser.properties import property_from_data\n \n         p = property_from_data(name=name, required=required, data=data)\n \n-        FloatProperty.assert_called_once_with(name=f\"{name}_item\", required=True, default=\"0.0\")\n+        FloatProperty.assert_called_once_with(name=name, required=True, default=\"0.0\")\n         ListProperty.assert_called_once_with(\n             name=name, required=required, default=None, inner_property=FloatProperty.return_value\n         )\n@@ -527,6 +702,7 @@ def test_property_from_data_array_invalid_items(self, mocker):\n         name = mocker.MagicMock()\n         required = mocker.MagicMock()\n         data = oai.Schema(type=\"array\", items={},)\n+        mocker.patch(\"openapi_python_client.utils.remove_string_escapes\", return_value=name)\n \n         from openapi_python_client.parser.properties import property_from_data\n \n@@ -541,6 +717,7 @@ def test_property_from_data_union(self, mocker):\n         UnionProperty = mocker.patch(f\"{MODULE_NAME}.UnionProperty\")\n         FloatProperty = mocker.patch(f\"{MODULE_NAME}.FloatProperty\")\n         IntProperty = mocker.patch(f\"{MODULE_NAME}.IntProperty\")\n+        mocker.patch(\"openapi_python_client.utils.remove_string_escapes\", return_value=name)\n \n         from openapi_python_client.parser.properties import property_from_data\n \n@@ -560,6 +737,7 @@ def test_property_from_data_union_bad_type(self, mocker):\n         name = mocker.MagicMock()\n         required = mocker.MagicMock()\n         data = oai.Schema(anyOf=[{}])\n+        mocker.patch(\"openapi_python_client.utils.remove_string_escapes\", return_value=name)\n \n         from openapi_python_client.parser.properties import property_from_data\n \n@@ -588,6 +766,17 @@ def test_property_from_data_no_valid_props_in_data(self):\n             data=data, detail=\"Schemas must either have one of enum, anyOf, or type defined.\"\n         )\n \n+    def test_property_from_data_validation_error(self, mocker):\n+        from openapi_python_client.parser.errors import PropertyError\n+        from openapi_python_client.parser.properties import property_from_data\n+\n+        mocker.patch(f\"{MODULE_NAME}._property_from_data\").side_effect = ValidationError()\n+\n+        data = oai.Schema()\n+        assert property_from_data(name=\"blah\", required=True, data=data) == PropertyError(\n+            detail=\"Failed to validate default value\", data=data\n+        )\n+\n \n class TestStringBasedProperty:\n     def test__string_based_property_no_format(self, mocker):"
        },
        {
          "filename": "tests/test_utils.py",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -22,3 +22,15 @@ def test_snake_case_from_camel():\n \n def test_kebab_case():\n     assert utils.kebab_case(\"keep_alive\") == \"keep-alive\"\n+\n+\n+def test__sanitize():\n+    assert utils.sanitize(\"something*~with lots_- of weird things}=\") == \"somethingwith lots_- of weird things\"\n+\n+\n+def test_no_string_escapes():\n+    assert utils.remove_string_escapes('an \"evil\" string') == 'an \\\\\"evil\\\\\" string'\n+\n+\n+def test__fix_keywords():\n+    assert utils.fix_keywords(\"None\") == \"None_\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 8,
        "unique_directories": 11,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3bd12f86f0c196896818e1b0952f457b29fcbc11",
            "date": "2025-01-13T17:00:54Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "a594a14873c47e940d076f16ba021e8b61f699ee",
            "date": "2025-01-13T16:50:59Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "718e9aaa743550d31f4e7db14de10cb3c91d36bc",
            "date": "2024-12-30T17:17:52Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "99ae3a93877116fced970b2a25e33913035ac400",
            "date": "2024-12-24T23:46:54Z",
            "author_login": "knope-bot[bot]"
          },
          {
            "sha": "88b3be192bc5c5cc8b84d6cfff1d3350ec29acbe",
            "date": "2024-12-24T23:31:48Z",
            "author_login": "paulo-raca"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "In openapi-python-client before version 0.5.3, clients generated with a maliciously crafted OpenAPI Document can generate arbitrary Python code. Subsequent execution of this malicious client is arbitrary code execution.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-08-14T17:15:14.157",
    "last_modified": "2024-11-21T05:04:56.050",
    "fix_date": "2020-08-13T17:05:36Z"
  },
  "references": [
    {
      "url": "https://github.com/triaxtec/openapi-python-client/blob/main/CHANGELOG.md#053---2020-08-13",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/triaxtec/openapi-python-client/commit/f7a56aae32cba823a77a84a1f10400799b19c19a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/triaxtec/openapi-python-client/security/advisories/GHSA-9x4c-63pf-525f",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/openapi-python-client/",
      "source": "security-advisories@github.com",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/triaxtec/openapi-python-client/blob/main/CHANGELOG.md#053---2020-08-13",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/triaxtec/openapi-python-client/commit/f7a56aae32cba823a77a84a1f10400799b19c19a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/triaxtec/openapi-python-client/security/advisories/GHSA-9x4c-63pf-525f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/openapi-python-client/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:03.794676",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openapi-python-client",
    "owner": "triaxtec",
    "created_at": "2020-02-15T19:33:46Z",
    "updated_at": "2025-01-14T06:04:21Z",
    "pushed_at": "2025-01-13T17:06:16Z",
    "size": 3320,
    "stars": 1408,
    "forks": 211,
    "open_issues": 71,
    "watchers": 1408,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 979413,
      "Jinja": 52889
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:06:10.285688"
  }
}