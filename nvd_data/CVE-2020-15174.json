{
  "cve_id": "CVE-2020-15174",
  "github_data": {
    "repository": "electron/electron",
    "fix_commit": "18613925610ba319da7f497b6deed85ad712c59b",
    "related_commits": [
      "18613925610ba319da7f497b6deed85ad712c59b",
      "18613925610ba319da7f497b6deed85ad712c59b"
    ],
    "patch_url": "https://github.com/electron/electron/commit/18613925610ba319da7f497b6deed85ad712c59b.patch",
    "fix_commit_details": {
      "sha": "18613925610ba319da7f497b6deed85ad712c59b",
      "commit_date": "2020-08-25T10:22:24Z",
      "author": {
        "login": "MarshallOfSound",
        "type": "User",
        "stats": {
          "total_commits": 1452,
          "average_weekly_commits": 2.345718901453958,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 318
        }
      },
      "commit_message": {
        "title": "refactor: wire will-navigate up to a navigation throttle instead of OpenURL (#25108)",
        "length": 328,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 72,
        "additions": 65,
        "deletions": 7
      },
      "files": [
        {
          "filename": "shell/browser/api/electron_api_web_contents.cc",
          "status": "modified",
          "additions": 0,
          "deletions": 6,
          "patch": "@@ -743,12 +743,6 @@ content::WebContents* WebContents::OpenURLFromTab(\n     return nullptr;\n   }\n \n-  // Give user a chance to cancel navigation.\n-  if (Emit(\"will-navigate\", params.url))\n-    return nullptr;\n-\n-  // Don't load the URL if the web contents was marked as destroyed from a\n-  // will-navigate event listener\n   if (IsDestroyed())\n     return nullptr;\n "
        },
        {
          "filename": "shell/browser/electron_navigation_throttle.cc",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -19,6 +19,30 @@ const char* ElectronNavigationThrottle::GetNameForLogging() {\n   return \"ElectronNavigationThrottle\";\n }\n \n+content::NavigationThrottle::ThrottleCheckResult\n+ElectronNavigationThrottle::WillStartRequest() {\n+  auto* handle = navigation_handle();\n+  auto* contents = handle->GetWebContents();\n+  if (!contents) {\n+    NOTREACHED();\n+    return PROCEED;\n+  }\n+\n+  v8::Isolate* isolate = v8::Isolate::GetCurrent();\n+  v8::HandleScope scope(isolate);\n+  auto api_contents = electron::api::WebContents::From(isolate, contents);\n+  if (api_contents.IsEmpty()) {\n+    // No need to emit any event if the WebContents is not available in JS.\n+    return PROCEED;\n+  }\n+\n+  if (handle->IsRendererInitiated() && handle->IsInMainFrame() &&\n+      api_contents->EmitNavigationEvent(\"will-navigate\", handle)) {\n+    return CANCEL;\n+  }\n+  return PROCEED;\n+}\n+\n content::NavigationThrottle::ThrottleCheckResult\n ElectronNavigationThrottle::WillRedirectRequest() {\n   auto* handle = navigation_handle();"
        },
        {
          "filename": "shell/browser/electron_navigation_throttle.h",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -14,6 +14,8 @@ class ElectronNavigationThrottle : public content::NavigationThrottle {\n   explicit ElectronNavigationThrottle(content::NavigationHandle* handle);\n   ~ElectronNavigationThrottle() override;\n \n+  ElectronNavigationThrottle::ThrottleCheckResult WillStartRequest() override;\n+\n   ElectronNavigationThrottle::ThrottleCheckResult WillRedirectRequest()\n       override;\n "
        },
        {
          "filename": "spec-main/api-browser-window-spec.ts",
          "status": "modified",
          "additions": 39,
          "deletions": 1,
          "patch": "@@ -442,7 +442,13 @@ describe('BrowserWindow module', () => {\n         let server = null as unknown as http.Server;\n         let url = null as unknown as string;\n         before((done) => {\n-          server = http.createServer((req, res) => { res.end(''); });\n+          server = http.createServer((req, res) => {\n+            if (req.url === '/navigate-top') {\n+              res.end('<a target=_top href=\"/\">navigate _top</a>');\n+            } else {\n+              res.end('');\n+            }\n+          });\n           server.listen(0, '127.0.0.1', () => {\n             url = `http://127.0.0.1:${(server.address() as AddressInfo).port}/`;\n             done();\n@@ -506,6 +512,38 @@ describe('BrowserWindow module', () => {\n           expect(navigatedTo).to.equal(url);\n           expect(w.webContents.getURL()).to.equal('about:blank');\n         });\n+\n+        it('is triggered when a cross-origin iframe navigates _top', async () => {\n+          await w.loadURL(`data:text/html,<iframe src=\"http://127.0.0.1:${(server.address() as AddressInfo).port}/navigate-top\"></iframe>`);\n+          await delay(1000);\n+          w.webContents.debugger.attach('1.1');\n+          const targets = await w.webContents.debugger.sendCommand('Target.getTargets');\n+          const iframeTarget = targets.targetInfos.find((t: any) => t.type === 'iframe');\n+          const { sessionId } = await w.webContents.debugger.sendCommand('Target.attachToTarget', {\n+            targetId: iframeTarget.targetId,\n+            flatten: true\n+          });\n+          await w.webContents.debugger.sendCommand('Input.dispatchMouseEvent', {\n+            type: 'mousePressed',\n+            x: 10,\n+            y: 10,\n+            clickCount: 1,\n+            button: 'left'\n+          }, sessionId);\n+          await w.webContents.debugger.sendCommand('Input.dispatchMouseEvent', {\n+            type: 'mouseReleased',\n+            x: 10,\n+            y: 10,\n+            clickCount: 1,\n+            button: 'left'\n+          }, sessionId);\n+          let willNavigateEmitted = false;\n+          w.webContents.on('will-navigate', () => {\n+            willNavigateEmitted = true;\n+          });\n+          await emittedOnce(w.webContents, 'did-navigate');\n+          expect(willNavigateEmitted).to.be.true();\n+        });\n       });\n \n       describe('will-redirect event', () => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5680c628b6718385bbd975b51ec2640aa7df226b",
            "date": "2025-01-14T03:36:03Z",
            "author_login": "wujinli"
          },
          {
            "sha": "e57b69f106ae9c53a527038db4e8222692fa0ce7",
            "date": "2025-01-13T22:15:24Z",
            "author_login": "clavin"
          },
          {
            "sha": "19ee4464c211a0cef3bc5070fbd7b8bd0d5c3c7d",
            "date": "2025-01-11T00:21:08Z",
            "author_login": "mlaurencin"
          },
          {
            "sha": "7d05b7847943a01da3188523e720b17e67d47944",
            "date": "2025-01-10T16:52:34Z",
            "author_login": "electron-roller[bot]"
          },
          {
            "sha": "062d14e553fa85b14ca67b221911e82c5bc1bd12",
            "date": "2025-01-09T02:46:17Z",
            "author_login": "ckerr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:N/I:H/A:L",
    "cwe_id": "CWE-20",
    "description": "In Electron before versions 11.0.0-beta.1, 10.0.1, 9.3.0 or 8.5.1 the `will-navigate` event that apps use to prevent navigations to unexpected destinations as per our security recommendations can be bypassed when a sub-frame performs a top-frame navigation across sites. The issue is patched in versions 11.0.0-beta.1, 10.0.1, 9.3.0 or 8.5.1 As a workaround sandbox all your iframes using the sandbox attribute. This will prevent them creating top-frame navigations and is good practice anyway.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-10-06T18:15:14.283",
    "last_modified": "2024-11-21T05:05:00.327",
    "fix_date": "2020-08-25T10:22:24Z"
  },
  "references": [
    {
      "url": "https://github.com/electron/electron/commit/18613925610ba319da7f497b6deed85ad712c59b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/security/advisories/GHSA-2q4g-w47c-4674",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/commit/18613925610ba319da7f497b6deed85ad712c59b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/security/advisories/GHSA-2q4g-w47c-4674",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.170199",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "electron",
    "owner": "electron",
    "created_at": "2013-04-12T01:47:36Z",
    "updated_at": "2025-01-14T12:00:37Z",
    "pushed_at": "2025-01-14T12:17:40Z",
    "size": 160685,
    "stars": 115159,
    "forks": 15727,
    "open_issues": 986,
    "watchers": 115159,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1-3-x",
      "1-4-x",
      "1-5-x",
      "1-6-x",
      "1-7-x",
      "1-8-x",
      "2-0-x",
      "2-1-x",
      "3-0-x",
      "3-1-x",
      "4-0-x",
      "4-1-x",
      "4-2-x",
      "5-0-x",
      "6-0-x",
      "6-1-x",
      "7-0-x",
      "7-1-x",
      "7-2-x",
      "7-3-x",
      "8-x-y",
      "9-x-y",
      "10-x-y",
      "11-x-y",
      "12-x-y",
      "13-x-y",
      "14-x-y",
      "15-x-y",
      "16-x-y",
      "17-x-y"
    ],
    "languages": {
      "C++": 3784754,
      "TypeScript": 2172126,
      "Objective-C++": 404368,
      "JavaScript": 152129,
      "Python": 131385,
      "Objective-C": 44933,
      "HTML": 12057,
      "Shell": 8704,
      "Batchfile": 2794,
      "C": 2472,
      "CSS": 2369
    },
    "commit_activity": {
      "total_commits_last_year": 1162,
      "avg_commits_per_week": 22.346153846153847,
      "days_active_last_year": 245
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T12:58:58.367079"
  }
}