{
  "cve_id": "CVE-2020-15184",
  "github_data": {
    "repository": "helm/helm",
    "fix_commit": "e7c281564d8306e1dcf8023d97f972449ad74850",
    "related_commits": [
      "e7c281564d8306e1dcf8023d97f972449ad74850",
      "e7c281564d8306e1dcf8023d97f972449ad74850"
    ],
    "patch_url": "https://github.com/helm/helm/commit/e7c281564d8306e1dcf8023d97f972449ad74850.patch",
    "fix_commit_details": {
      "sha": "e7c281564d8306e1dcf8023d97f972449ad74850",
      "commit_date": "2020-09-17T18:31:23Z",
      "author": {
        "login": "technosophos",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-9vp5-m38w-j776",
        "length": 113,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 80,
        "additions": 79,
        "deletions": 1
      },
      "files": [
        {
          "filename": "pkg/chart/chart.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -17,6 +17,7 @@ package chart\n \n import (\n \t\"path/filepath\"\n+\t\"regexp\"\n \t\"strings\"\n )\n \n@@ -26,6 +27,9 @@ const APIVersionV1 = \"v1\"\n // APIVersionV2 is the API version number for version 2.\n const APIVersionV2 = \"v2\"\n \n+// aliasNameFormat defines the characters that are legal in an alias name.\n+var aliasNameFormat = regexp.MustCompile(\"^[a-zA-Z0-9_-]+$\")\n+\n // Chart is a helm package that contains metadata, a default config, zero or more\n // optionally parameterizable templates, and zero or more charts (dependencies).\n type Chart struct {"
        },
        {
          "filename": "pkg/chart/errors.go",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -15,9 +15,16 @@ limitations under the License.\n \n package chart\n \n+import \"fmt\"\n+\n // ValidationError represents a data validation error.\n type ValidationError string\n \n func (v ValidationError) Error() string {\n \treturn \"validation: \" + string(v)\n }\n+\n+// ValidationErrorf takes a message and formatting options and creates a ValidationError\n+func ValidationErrorf(msg string, args ...interface{}) ValidationError {\n+\treturn ValidationError(fmt.Sprintf(msg, args...))\n+}"
        },
        {
          "filename": "pkg/chart/metadata.go",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -81,6 +81,15 @@ func (md *Metadata) Validate() error {\n \tif !isValidChartType(md.Type) {\n \t\treturn ValidationError(\"chart.metadata.type must be application or library\")\n \t}\n+\n+\t// Aliases need to be validated here to make sure that the alias name does\n+\t// not contain any illegal characters.\n+\tfor _, dependency := range md.Dependencies {\n+\t\tif err := validateDependency(dependency); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t}\n+\n \t// TODO validate valid semver here?\n \treturn nil\n }\n@@ -92,3 +101,13 @@ func isValidChartType(in string) bool {\n \t}\n \treturn false\n }\n+\n+// validateDependency checks for common problems with the dependency datastructure in\n+// the chart. This check must be done at load time before the dependency's charts are\n+// loaded.\n+func validateDependency(dep *Dependency) error {\n+\tif len(dep.Alias) > 0 && !aliasNameFormat.MatchString(dep.Alias) {\n+\t\treturn ValidationErrorf(\"dependency %q has disallowed characters in the alias\", dep.Name)\n+\t}\n+\treturn nil\n+}"
        },
        {
          "filename": "pkg/chart/metadata_test.go",
          "status": "modified",
          "additions": 49,
          "deletions": 1,
          "patch": "@@ -48,12 +48,60 @@ func TestValidate(t *testing.T) {\n \t\t\t&Metadata{Name: \"test\", APIVersion: \"v2\", Version: \"1.0\", Type: \"application\"},\n \t\t\tnil,\n \t\t},\n+\t\t{\n+\t\t\t&Metadata{\n+\t\t\t\tName:       \"test\",\n+\t\t\t\tAPIVersion: \"v2\",\n+\t\t\t\tVersion:    \"1.0\",\n+\t\t\t\tType:       \"application\",\n+\t\t\t\tDependencies: []*Dependency{\n+\t\t\t\t\t{Name: \"dependency\", Alias: \"legal-alias\"},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tnil,\n+\t\t},\n+\t\t{\n+\t\t\t&Metadata{\n+\t\t\t\tName:       \"test\",\n+\t\t\t\tAPIVersion: \"v2\",\n+\t\t\t\tVersion:    \"1.0\",\n+\t\t\t\tType:       \"application\",\n+\t\t\t\tDependencies: []*Dependency{\n+\t\t\t\t\t{Name: \"bad\", Alias: \"illegal alias\"},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t\tValidationError(\"dependency \\\"bad\\\" has disallowed characters in the alias\"),\n+\t\t},\n \t}\n \n \tfor _, tt := range tests {\n \t\tresult := tt.md.Validate()\n \t\tif result != tt.err {\n-\t\t\tt.Errorf(\"expected %s, got %s\", tt.err, result)\n+\t\t\tt.Errorf(\"expected '%s', got '%s'\", tt.err, result)\n+\t\t}\n+\t}\n+}\n+\n+func TestValidateDependency(t *testing.T) {\n+\tdep := &Dependency{\n+\t\tName: \"example\",\n+\t}\n+\tfor value, shouldFail := range map[string]bool{\n+\t\t\"abcdefghijklmenopQRSTUVWXYZ-0123456780_\": false,\n+\t\t\"-okay\":      false,\n+\t\t\"_okay\":      false,\n+\t\t\"- bad\":      true,\n+\t\t\" bad\":       true,\n+\t\t\"bad\\nvalue\": true,\n+\t\t\"bad \":       true,\n+\t\t\"bad$\":       true,\n+\t} {\n+\t\tdep.Alias = value\n+\t\tres := validateDependency(dep)\n+\t\tif res != nil && !shouldFail {\n+\t\t\tt.Errorf(\"Failed on case %q\", dep.Alias)\n+\t\t} else if res == nil && shouldFail {\n+\t\t\tt.Errorf(\"Expected failure for %q\", dep.Alias)\n \t\t}\n \t}\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fb54996b001697513cdb1ffa5915c0ba90149fff",
            "date": "2025-01-14T02:16:44Z",
            "author_login": "sabre1041"
          },
          {
            "sha": "7dac0157a78e5ba6ad607cf1b1fc598b98ef5dfd",
            "date": "2025-01-13T18:01:22Z",
            "author_login": "robertsirc"
          },
          {
            "sha": "6d42a2973d108a28bff46e38f2afe6a9e98918af",
            "date": "2025-01-11T18:41:47Z",
            "author_login": "shahbazaamir"
          },
          {
            "sha": "bd897c96fbaf7546d6a5c57be009f16f9d38d6de",
            "date": "2025-01-09T00:46:19Z",
            "author_login": "gjenkins8"
          },
          {
            "sha": "ad9768402951f48f61e1ecbea0c1894456d63a2a",
            "date": "2025-01-07T17:09:02Z",
            "author_login": "mattfarina"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-20",
    "description": "In Helm before versions 2.16.11 and 3.3.2 there is a bug in which the `alias` field on a `Chart.yaml` is not properly sanitized. This could lead to the injection of unwanted information into a chart. This issue has been patched in Helm 3.3.2 and 2.16.11. A possible workaround is to manually review the `dependencies` field of any untrusted chart, verifying that the `alias` field is either not used, or (if used) does not contain newlines or path characters.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-09-17T21:15:17.550",
    "last_modified": "2024-11-21T05:05:01.673",
    "fix_date": "2020-09-17T18:31:23Z"
  },
  "references": [
    {
      "url": "https://github.com/helm/helm/commit/e7c281564d8306e1dcf8023d97f972449ad74850",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/helm/helm/security/advisories/GHSA-9vp5-m38w-j776",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/helm/helm/commit/e7c281564d8306e1dcf8023d97f972449ad74850",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/helm/helm/security/advisories/GHSA-9vp5-m38w-j776",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.137595",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "helm",
    "owner": "helm",
    "created_at": "2015-10-06T01:07:32Z",
    "updated_at": "2025-01-14T12:24:26Z",
    "pushed_at": "2025-01-14T02:16:52Z",
    "size": 22466,
    "stars": 27310,
    "forks": 7159,
    "open_issues": 777,
    "watchers": 27310,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "feat-v3/event-emitter-lua",
      "kube-update-test",
      "main",
      "release-2.0",
      "release-2.1",
      "release-2.2",
      "release-2.3",
      "release-2.4",
      "release-2.5",
      "release-2.6",
      "release-2.7",
      "release-2.8",
      "release-2.9"
    ],
    "languages": {
      "Go": 1934648,
      "Shell": 31103,
      "Makefile": 8742
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:57:31.645568"
  }
}