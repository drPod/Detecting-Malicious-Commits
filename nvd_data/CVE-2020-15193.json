{
  "cve_id": "CVE-2020-15193",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "22e07fb204386768e5bcbea563641ea11f96ceb8",
    "related_commits": [
      "22e07fb204386768e5bcbea563641ea11f96ceb8",
      "22e07fb204386768e5bcbea563641ea11f96ceb8"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/22e07fb204386768e5bcbea563641ea11f96ceb8.patch",
    "fix_commit_details": {
      "sha": "22e07fb204386768e5bcbea563641ea11f96ceb8",
      "commit_date": "2020-09-19T02:14:17Z",
      "author": {
        "login": "mihaimaruseac",
        "type": "User",
        "stats": {
          "total_commits": 1590,
          "average_weekly_commits": 3.3125,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 214
        }
      },
      "commit_message": {
        "title": "Fix multiple vulnerabilities in `tf.experimental.dlpack.to_dlpack`.",
        "length": 341,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 46,
        "additions": 38,
        "deletions": 8
      },
      "files": [
        {
          "filename": "tensorflow/c/eager/dlpack.cc",
          "status": "modified",
          "additions": 22,
          "deletions": 6,
          "patch": "@@ -249,21 +249,36 @@ void TFE_CallDLManagedTensorDeleter(void* dlm_ptr) {\n }\n \n void* TFE_HandleToDLPack(TFE_TensorHandle* h, TF_Status* status) {\n+  auto tf_dlm_context = GetDlContext(h, status);\n+  if (!status->status.ok()) {\n+    return nullptr;\n+  }\n+\n+  auto* tf_dlm_data = TFE_TensorHandleDevicePointer(h, status);\n+  if (!status->status.ok()) {\n+    return nullptr;\n+  }\n+\n   const Tensor* tensor = GetTensorFromHandle(h, status);\n   TF_DataType data_type = static_cast<TF_DataType>(tensor->dtype());\n-  TensorReference tensor_ref(*tensor);  // This will call buf_->Ref()\n \n+  auto tf_dlm_type = GetDlDataType(data_type, status);\n+  if (!status->status.ok()) {\n+    return nullptr;\n+  }\n+\n+  TensorReference tensor_ref(*tensor);  // This will call buf_->Ref()\n   auto* tf_dlm_tensor_ctx = new TfDlManagedTensorCtx(tensor_ref);\n   tf_dlm_tensor_ctx->reference = tensor_ref;\n \n   DLManagedTensor* dlm_tensor = &tf_dlm_tensor_ctx->tensor;\n   dlm_tensor->manager_ctx = tf_dlm_tensor_ctx;\n   dlm_tensor->deleter = &DLManagedTensorDeleter;\n-  dlm_tensor->dl_tensor.ctx = GetDlContext(h, status);\n+  dlm_tensor->dl_tensor.ctx = tf_dlm_context;\n   int ndim = tensor->dims();\n   dlm_tensor->dl_tensor.ndim = ndim;\n-  dlm_tensor->dl_tensor.data = TFE_TensorHandleDevicePointer(h, status);\n-  dlm_tensor->dl_tensor.dtype = GetDlDataType(data_type, status);\n+  dlm_tensor->dl_tensor.data = tf_dlm_data;\n+  dlm_tensor->dl_tensor.dtype = tf_dlm_type;\n \n   std::vector<int64_t>* shape_arr = &tf_dlm_tensor_ctx->shape;\n   std::vector<int64_t>* stride_arr = &tf_dlm_tensor_ctx->strides;\n@@ -276,13 +291,14 @@ void* TFE_HandleToDLPack(TFE_TensorHandle* h, TF_Status* status) {\n     (*stride_arr)[i] = (*shape_arr)[i + 1] * (*stride_arr)[i + 1];\n   }\n \n-  dlm_tensor->dl_tensor.shape = &(*shape_arr)[0];\n+  dlm_tensor->dl_tensor.shape = shape_arr->data();\n   // There are two ways to represent compact row-major data\n   // 1) nullptr indicates tensor is compact and row-majored.\n   // 2) fill in the strides array as the real case for compact row-major data.\n   // Here we choose option 2, since some frameworks didn't handle the strides\n   // argument properly.\n-  dlm_tensor->dl_tensor.strides = &(*stride_arr)[0];\n+  dlm_tensor->dl_tensor.strides = stride_arr->data();\n+\n   dlm_tensor->dl_tensor.byte_offset =\n       0;  // TF doesn't handle the strides and byte_offsets here\n   return static_cast<void*>(dlm_tensor);"
        },
        {
          "filename": "tensorflow/python/dlpack/BUILD",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -19,7 +19,6 @@ cuda_py_test(\n     name = \"dlpack_test\",\n     srcs = [\"dlpack_test.py\"],\n     srcs_version = \"PY2AND3\",\n-    tags = [\"noasan\"],  # TODO(b/159774807)\n     deps = [\n         \":dlpack\",\n         \"//tensorflow/python/eager:test\","
        },
        {
          "filename": "tensorflow/python/dlpack/dlpack_test.py",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -20,9 +20,11 @@\n from absl.testing import parameterized\n import numpy as np\n \n+\n from tensorflow.python.dlpack import dlpack\n from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors\n from tensorflow.python.framework import ops\n from tensorflow.python.platform import test\n from tensorflow.python.ops import array_ops\n@@ -105,6 +107,12 @@ def UnsupportedComplex64():\n     self.assertRaisesRegex(Exception, \".* is not supported by dlpack\",\n                            UnsupportedComplex64)\n \n+  def testMustPassTensorArgumentToDLPack(self):\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        \"The argument to `to_dlpack` must be a TF tensor, not Python object\"):\n+      dlpack.to_dlpack([1])\n+\n \n if __name__ == \"__main__\":\n   ops.enable_eager_execution()"
        },
        {
          "filename": "tensorflow/python/tfe_wrapper.cc",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -1358,9 +1358,16 @@ PYBIND11_MODULE(_pywrap_tfe, m) {\n   // DLPack functions\n   m.def(\"TFE_ToDlpackCapsule\", [](py::handle& o) {\n     PyObject* eager_tensor_pyobject_ptr = o.ptr();\n-    TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);\n     tensorflow::Safe_TF_StatusPtr status =\n         tensorflow::make_safe(TF_NewStatus());\n+\n+    if (!EagerTensor_CheckExact(eager_tensor_pyobject_ptr)) {\n+      status->status = tensorflow::errors::InvalidArgument(\n+          \"The argument to `to_dlpack` must be a TF tensor, not Python object\");\n+      tensorflow::MaybeRaiseRegisteredFromTFStatus(status.get());\n+    }\n+\n+    TFE_TensorHandle* thandle = EagerTensor_Handle(eager_tensor_pyobject_ptr);\n     void* dlm_ptr = tensorflow::TFE_HandleToDLPack(thandle, status.get());\n     tensorflow::MaybeRaiseRegisteredFromTFStatus(status.get());\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ea89878e945fdb95ec85b5d396d45b70a42d268e",
            "date": "2025-01-14T19:00:19Z",
            "author_login": "eunjaekim-0"
          },
          {
            "sha": "2ed056484b967486920cc8be1740ab1bd13c9f64",
            "date": "2025-01-14T18:40:26Z",
            "author_login": "GleasonK"
          },
          {
            "sha": "f04ac71a7ba0972752968c52b299e9e53795c9bf",
            "date": "2025-01-14T18:36:27Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "af7f5e877165ab909d171a6ec560a8ce80f410b5",
            "date": "2025-01-14T18:29:16Z",
            "author_login": "sdasgup3"
          },
          {
            "sha": "29a59f3245aadc7db8c6cc3a3a0d214f2dd10d6b",
            "date": "2025-01-14T18:26:14Z",
            "author_login": "sergey-kozub"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:L",
    "cwe_id": "CWE-908",
    "description": "In Tensorflow before versions 2.2.1 and 2.3.1, the implementation of `dlpack.to_dlpack` can be made to use uninitialized memory resulting in further memory corruption. This is because the pybind11 glue code assumes that the argument is a tensor. However, there is nothing stopping users from passing in a Python object instead of a tensor. The uninitialized memory address is due to a `reinterpret_cast` Since the `PyObject` is a Python object, not a TensorFlow Tensor, the cast to `EagerTensor` fails. The issue is patched in commit 22e07fb204386768e5bcbea563641ea11f96ceb8 and is released in TensorFlow versions 2.2.1, or 2.3.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-09-25T19:15:14.573",
    "last_modified": "2024-11-21T05:05:03.037",
    "fix_date": "2020-09-19T02:14:17Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00065.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/22e07fb204386768e5bcbea563641ea11f96ceb8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00065.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/22e07fb204386768e5bcbea563641ea11f96ceb8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-rjjg-hgv6-h69v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.152492",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}