{
  "cve_id": "CVE-2020-15195",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "390611e0d45c5793c7066110af37c8514e6a6c54",
    "related_commits": [
      "390611e0d45c5793c7066110af37c8514e6a6c54",
      "390611e0d45c5793c7066110af37c8514e6a6c54"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/390611e0d45c5793c7066110af37c8514e6a6c54.patch",
    "fix_commit_details": {
      "sha": "390611e0d45c5793c7066110af37c8514e6a6c54",
      "commit_date": "2020-09-19T01:43:38Z",
      "author": {
        "login": "mihaimaruseac",
        "type": "User",
        "stats": {
          "total_commits": 1590,
          "average_weekly_commits": 3.3125,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 214
        }
      },
      "commit_message": {
        "title": "Fix heap buffer overflow in `tf.raw_ops.SparseFillEmptyRowsGrad`.",
        "length": 185,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 66,
        "additions": 64,
        "deletions": 2
      },
      "files": [
        {
          "filename": "tensorflow/core/kernels/sparse_fill_empty_rows_op.cc",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -236,6 +236,9 @@ class SparseFillEmptyRowsGradOp : public OpKernel {\n         context, TensorShapeUtils::IsVector(reverse_index_map_t->shape()),\n         errors::InvalidArgument(\"reverse_index_map must be a vector, saw: \",\n                                 reverse_index_map_t->shape().DebugString()));\n+    OP_REQUIRES(context, TensorShapeUtils::IsVector(grad_values_t->shape()),\n+                errors::InvalidArgument(\"grad_values must be a vector, saw: \",\n+                                        grad_values_t->shape().DebugString()));\n \n     const auto reverse_index_map = reverse_index_map_t->vec<int64>();\n     const auto grad_values = grad_values_t->vec<T>();\n@@ -264,8 +267,13 @@ class SparseFillEmptyRowsGradOp : public OpKernel {\n       // Locate the index of the output of the forward prop associated\n       // with this location in the input of the forward prop.  Copy\n       // the gradient into it.  Mark it as visited.\n-      d_values(i) = grad_values(reverse_index_map(i));\n-      visited(reverse_index_map(i)) = true;\n+      int64 reverse_index = reverse_index_map(i);\n+      OP_REQUIRES(\n+          context, 0 <= reverse_index && reverse_index < N_full,\n+          errors::InvalidArgument(\"Elements in reverse index must be in [0, \",\n+                                  N_full, \") but got \", reverse_index));\n+      d_values(i) = grad_values(reverse_index);\n+      visited(reverse_index) = true;\n     }\n     for (int j = 0; j < N_full; ++j) {\n       // The default value gradient gets the accumulated remainder of"
        },
        {
          "filename": "tensorflow/python/ops/sparse_ops_test.py",
          "status": "modified",
          "additions": 54,
          "deletions": 0,
          "patch": "@@ -21,6 +21,7 @@\n from absl.testing import parameterized\n import numpy as np\n \n+from tensorflow.python.eager import context\n from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n from tensorflow.python.framework import errors\n@@ -30,6 +31,7 @@\n # Need array_grad to register gradient for Identity.\n from tensorflow.python.ops import array_grad  # pylint: disable=unused-import\n from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import gen_sparse_ops\n from tensorflow.python.ops import gradient_checker_v2 as gradient_checker\n from tensorflow.python.ops import math_ops\n # Need sparse_grad to register gradient for SparseToDense.\n@@ -234,5 +236,57 @@ def testConstantStringToSparse(self):\n     self.assertAllEqual([5], result.dense_shape)\n \n \n+@test_util.run_all_in_graph_and_eager_modes\n+class RawOpsTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n+\n+  def testSparseFillEmptyRowsGrad(self):\n+    reverse_index_map = [2, 1]\n+    grad_values = [0, 1, 2, 3]\n+    d_values, d_default_value = self.evaluate(\n+        gen_sparse_ops.SparseFillEmptyRowsGrad(\n+            reverse_index_map=reverse_index_map, grad_values=grad_values))\n+    self.assertAllEqual([2, 1], d_values)\n+    self.assertEqual(3, d_default_value)\n+\n+  def testSparseFillEmptyRowsGradNegativeIndexMapValue(self):\n+    reverse_index_map = [2, -1]\n+    grad_values = [0, 1, 2, 3]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        r'Elements in reverse index must be in \\[0, 4\\)'):\n+      self.evaluate(\n+          gen_sparse_ops.SparseFillEmptyRowsGrad(\n+              reverse_index_map=reverse_index_map, grad_values=grad_values))\n+\n+  def testSparseFillEmptyRowsGradLargeIndexMapValue(self):\n+    reverse_index_map = [2, 10]\n+    grad_values = [0, 1, 2, 3]\n+    with self.assertRaisesRegex(\n+        errors.InvalidArgumentError,\n+        r'Elements in reverse index must be in \\[0, 4\\)'):\n+      self.evaluate(\n+          gen_sparse_ops.SparseFillEmptyRowsGrad(\n+              reverse_index_map=reverse_index_map, grad_values=grad_values))\n+\n+  def testSparseFillEmptyRowsGradMatrix(self):\n+    reverse_index_map = [0, 1]\n+    grad_values = [[0, 1], [2, 3]]\n+    # Note: Eager mode and graph mode throw different errors here. Graph mode\n+    # will fail with a ValueError from the shape checking logic, while Eager\n+    # will fail with an InvalidArgumentError from the kernel itself.\n+    if context.executing_eagerly():\n+      with self.assertRaisesRegex(errors.InvalidArgumentError,\n+                                  r'grad_values must be a vector'):\n+        self.evaluate(\n+            gen_sparse_ops.SparseFillEmptyRowsGrad(\n+                reverse_index_map=reverse_index_map, grad_values=grad_values))\n+    else:\n+      with self.assertRaisesRegex(ValueError,\n+                                  r'Shape must be rank 1 but is rank 2'):\n+        self.evaluate(\n+            gen_sparse_ops.SparseFillEmptyRowsGrad(\n+                reverse_index_map=reverse_index_map, grad_values=grad_values))\n+\n+\n if __name__ == '__main__':\n   googletest.main()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c141307fbd02349cf4d83f9a73bdba73fcba9b87",
            "date": "2025-01-14T14:26:56Z",
            "author_login": "mooskagh"
          },
          {
            "sha": "9263c01097f54dbb932ac56d6d87a61a93409221",
            "date": "2025-01-14T14:18:52Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "e7f7cefc7d284c486f84596811d07bb5cd0890ca",
            "date": "2025-01-14T14:16:10Z",
            "author_login": "krasimirgg"
          },
          {
            "sha": "fd41705e0ad7a123a9d01b8be2a3b34b3266493e",
            "date": "2025-01-14T13:33:52Z",
            "author_login": "loislo"
          },
          {
            "sha": "af5275c5731565cbf2a2c01ee418a8cf62388431",
            "date": "2025-01-14T12:48:20Z",
            "author_login": "akuegel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-119",
    "description": "In Tensorflow before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, the implementation of `SparseFillEmptyRowsGrad` uses a double indexing pattern. It is possible for `reverse_index_map(i)` to be an index outside of bounds of `grad_values`, thus resulting in a heap buffer overflow. The issue is patched in commit 390611e0d45c5793c7066110af37c8514e6a6c54, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-09-25T19:15:14.743",
    "last_modified": "2024-11-21T05:05:03.340",
    "fix_date": "2020-09-19T01:43:38Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00065.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/390611e0d45c5793c7066110af37c8514e6a6c54",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00065.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/390611e0d45c5793c7066110af37c8514e6a6c54",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-63xm-rx5p-xvqr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.152807",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}