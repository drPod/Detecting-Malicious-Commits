{
  "cve_id": "CVE-2020-15209",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "0b5662bc2be13a8c8f044d925d87fb6e56247cd8",
    "related_commits": [
      "0b5662bc2be13a8c8f044d925d87fb6e56247cd8",
      "0b5662bc2be13a8c8f044d925d87fb6e56247cd8"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/0b5662bc2be13a8c8f044d925d87fb6e56247cd8.patch",
    "fix_commit_details": {
      "sha": "0b5662bc2be13a8c8f044d925d87fb6e56247cd8",
      "commit_date": "2020-09-18T21:12:45Z",
      "author": {
        "login": "mihaimaruseac",
        "type": "User",
        "stats": {
          "total_commits": 1590,
          "average_weekly_commits": 3.3125,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 214
        }
      },
      "commit_message": {
        "title": "[tflite] Ensure input tensors don't have `nullptr` buffers.",
        "length": 602,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 76,
        "additions": 58,
        "deletions": 18
      },
      "files": [
        {
          "filename": "tensorflow/lite/BUILD",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -242,6 +242,7 @@ cc_library(\n         \":arena_planner\",\n         \":external_cpu_backend_context\",\n         \":graph_info\",\n+        \":kernel_api\",\n         \":memory_planner\",\n         \":minimal_logging\",\n         \":shared_library\",\n@@ -469,6 +470,7 @@ cc_test(\n         \"testdata/add_shared_tensors.bin\",\n         \"testdata/empty_model.bin\",\n         \"testdata/multi_add_flex.bin\",\n+        \"testdata/segment_sum_invalid_buffer.bin\",\n         \"testdata/sparse_tensor.bin\",\n         \"testdata/test_min_runtime.bin\",\n         \"testdata/test_model.bin\","
        },
        {
          "filename": "tensorflow/lite/core/subgraph.cc",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -19,6 +19,7 @@ limitations under the License.\n #include <cstdint>\n \n #include \"tensorflow/lite/arena_planner.h\"\n+#include \"tensorflow/lite/builtin_ops.h\"\n #include \"tensorflow/lite/c/common.h\"\n #include \"tensorflow/lite/context_util.h\"\n #include \"tensorflow/lite/core/api/tensor_utils.h\"\n@@ -1030,6 +1031,19 @@ TfLiteStatus Subgraph::Invoke() {\n           tensor->data_is_stale) {\n         TF_LITE_ENSURE_STATUS(EnsureTensorDataIsReadable(tensor_index));\n       }\n+      if (tensor->data.raw == nullptr && tensor->bytes > 0) {\n+        if (registration.builtin_code == kTfLiteBuiltinReshape && i == 1) {\n+          // In general, having a tensor here with no buffer will be an error.\n+          // However, for the reshape operator, the second input tensor is only\n+          // used for the shape, not for the data. Thus, null buffer is ok.\n+          continue;\n+        } else {\n+          // In all other cases, we need to return an error as otherwise we will\n+          // trigger a null pointer dereference (likely).\n+          ReportError(\"Input tensor %d lacks data\", tensor_index);\n+          return kTfLiteError;\n+        }\n+      }\n     }\n \n     if (check_cancelled_func_ != nullptr &&"
        },
        {
          "filename": "tensorflow/lite/model_test.cc",
          "status": "modified",
          "additions": 42,
          "deletions": 18,
          "patch": "@@ -438,24 +438,48 @@ TEST(BasicFlatBufferModel, TestParseModelWithSparseTensor) {\n }\n \n // TODO(b/150072943): Add malformed model with sparse tensor tests.\n-TEST(BasicFlatBufferModel, TestHandleMalformedModel) {\n-  const auto model_paths = {\n-      // These models use the same tensor as both input and ouput of a node\n-      \"tensorflow/lite/testdata/add_shared_tensors.bin\",\n-  };\n-\n-  for (const auto& model_path : model_paths) {\n-    std::unique_ptr<tflite::FlatBufferModel> model =\n-        FlatBufferModel::BuildFromFile(model_path);\n-    ASSERT_NE(model, nullptr);\n-\n-    tflite::ops::builtin::BuiltinOpResolver resolver;\n-    InterpreterBuilder builder(*model, resolver);\n-    std::unique_ptr<Interpreter> interpreter;\n-    ASSERT_EQ(builder(&interpreter), kTfLiteOk);\n-    ASSERT_NE(interpreter, nullptr);\n-    ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);\n-  }\n+\n+// The models here have at least a node that uses the same tensor as input and\n+// output. This causes segfaults when trying to eval the operator, hence we try\n+// to prevent this scenario. The earliest place we can check this is in\n+// `AllocateTensors`, hence the test checks that `interpreter->AllocateTensors`\n+// detects these bad models.\n+TEST(BasicFlatBufferModel, TestHandleMalformedModelReuseTensor) {\n+  const auto model_path =\n+      \"tensorflow/lite/testdata/add_shared_tensors.bin\";\n+\n+  std::unique_ptr<tflite::FlatBufferModel> model =\n+      FlatBufferModel::BuildFromFile(model_path);\n+  ASSERT_NE(model, nullptr);\n+\n+  tflite::ops::builtin::BuiltinOpResolver resolver;\n+  InterpreterBuilder builder(*model, resolver);\n+  std::unique_ptr<Interpreter> interpreter;\n+  ASSERT_EQ(builder(&interpreter), kTfLiteOk);\n+  ASSERT_NE(interpreter, nullptr);\n+  ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);\n+}\n+\n+// The models here have a buffer index for a tensor pointing to a null buffer.\n+// This results in the tensor being interpreted as read-write, but the model\n+// assumes the tensor is read-only. As such, `interpreter->Invoke()` would\n+// segfault if no precondition check is added. The test checks that the\n+// precondition check exists.\n+TEST(BasicFlatBufferModel, TestHandleMalformedModelInvalidBuffer) {\n+  const auto model_path =\n+      \"tensorflow/lite/testdata/segment_sum_invalid_buffer.bin\";\n+\n+  std::unique_ptr<tflite::FlatBufferModel> model =\n+      FlatBufferModel::BuildFromFile(model_path);\n+  ASSERT_NE(model, nullptr);\n+\n+  tflite::ops::builtin::BuiltinOpResolver resolver;\n+  InterpreterBuilder builder(*model, resolver);\n+  std::unique_ptr<Interpreter> interpreter;\n+  ASSERT_EQ(builder(&interpreter), kTfLiteOk);\n+  ASSERT_NE(interpreter, nullptr);\n+  ASSERT_EQ(interpreter->AllocateTensors(), kTfLiteOk);\n+  ASSERT_NE(interpreter->Invoke(), kTfLiteOk);\n }\n \n // TODO(aselle): Add tests for serialization of builtin op data types."
        },
        {
          "filename": "tensorflow/lite/testdata/segment_sum_invalid_buffer.bin",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fd41705e0ad7a123a9d01b8be2a3b34b3266493e",
            "date": "2025-01-14T13:33:52Z",
            "author_login": "loislo"
          },
          {
            "sha": "af5275c5731565cbf2a2c01ee418a8cf62388431",
            "date": "2025-01-14T12:48:20Z",
            "author_login": "akuegel"
          },
          {
            "sha": "ee156c15e5d1cd7d2bd85885e7fd2bf7e143c2c3",
            "date": "2025-01-14T12:46:22Z",
            "author_login": "pifon2a"
          },
          {
            "sha": "bd43a8255ce9e203b740bcdc09e8f79d3a26f887",
            "date": "2025-01-14T12:33:02Z",
            "author_login": "metaflow"
          },
          {
            "sha": "8003fb40987f176d35364da2af8fcdfab339349e",
            "date": "2025-01-14T11:27:47Z",
            "author_login": "vwbaker"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, a crafted TFLite model can force a node to have as input a tensor backed by a `nullptr` buffer. This can be achieved by changing a buffer index in the flatbuffer serialization to convert a read-only tensor to a read-write one. The runtime assumes that these buffers are written to before a possible read, hence they are initialized with `nullptr`. However, by changing the buffer index for a tensor and implicitly converting that tensor to be a read-write one, as there is nothing in the model that writes to it, we get a null pointer dereference. The issue is patched in commit 0b5662bc, and is released in TensorFlow versions 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-09-25T19:15:16.213",
    "last_modified": "2024-11-21T05:05:05.573",
    "fix_date": "2020-09-18T21:12:45Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00065.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/0b5662bc2be13a8c8f044d925d87fb6e56247cd8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qh32-6jjc-qprm",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00065.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/0b5662bc2be13a8c8f044d925d87fb6e56247cd8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-qh32-6jjc-qprm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.155120",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}