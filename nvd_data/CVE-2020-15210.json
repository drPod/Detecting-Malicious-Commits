{
  "cve_id": "CVE-2020-15210",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "d58c96946b2880991d63d1dacacb32f0a4dfa453",
    "related_commits": [
      "d58c96946b2880991d63d1dacacb32f0a4dfa453",
      "d58c96946b2880991d63d1dacacb32f0a4dfa453"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/d58c96946b2880991d63d1dacacb32f0a4dfa453.patch",
    "fix_commit_details": {
      "sha": "d58c96946b2880991d63d1dacacb32f0a4dfa453",
      "commit_date": "2020-09-18T21:04:39Z",
      "author": {
        "login": "mihaimaruseac",
        "type": "User",
        "stats": {
          "total_commits": 1590,
          "average_weekly_commits": 3.3125,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 214
        }
      },
      "commit_message": {
        "title": "[tflite] Ensure inputs and outputs don't overlap.",
        "length": 278,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 66,
        "additions": 66,
        "deletions": 0
      },
      "files": [
        {
          "filename": "tensorflow/lite/BUILD",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -466,6 +466,7 @@ cc_test(\n     data = [\n         \"testdata/0_subgraphs.bin\",\n         \"testdata/2_subgraphs.bin\",\n+        \"testdata/add_shared_tensors.bin\",\n         \"testdata/empty_model.bin\",\n         \"testdata/multi_add_flex.bin\",\n         \"testdata/sparse_tensor.bin\","
        },
        {
          "filename": "tensorflow/lite/core/subgraph.cc",
          "status": "modified",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -581,6 +581,33 @@ TfLiteStatus Subgraph::CheckTensorIndices(const char* label, const int* indices,\n   return kTfLiteOk;\n }\n \n+// We have two arrays and we need to check that elements from one array don't\n+// show up in the other. We could sort both arrays and then iterate with two\n+// pointers from start to finish always increasing the smaller one but since\n+// these arrays are usually short (<25 elements for inputs, usually <3 for\n+// outputs), this might be slower than the naive approach (if arrays have size n\n+// and m, with n >> m ~ O(1), first approach is O(nlogn) whereas the other is\n+// O(n)). Plus, sorting the input and output arrays might not be something we\n+// want as it destroys ordering of elements.\n+//\n+// If it turns out that this is an issue, we can switch to the other algorithm.\n+TfLiteStatus Subgraph::CheckInputAndOutputForOverlap(const int* input_indices,\n+                                                     int num_inputs,\n+                                                     const int* output_indices,\n+                                                     int num_outputs) {\n+  for (int i = 0; i < num_inputs; i++) {\n+    for (int j = 0; j < num_outputs; j++) {\n+      if (input_indices[i] == output_indices[j]) {\n+        ReportError(\"Tensor %d is both input %d and output %d\\n\",\n+                    input_indices[i], i, j);\n+        consistent_ = false;\n+        return kTfLiteError;\n+      }\n+    }\n+  }\n+  return kTfLiteOk;\n+}\n+\n namespace {\n // Multiply two sizes and return true if overflow occurred;\n // This is based off tensorflow/overflow.h but is simpler as we already\n@@ -707,6 +734,16 @@ TfLiteStatus Subgraph::AddNodeWithParameters(\n       &context_,\n       CheckTensorIndices(\"node outputs\", outputs.data(), outputs.size()));\n \n+  // For builtin ops, inputs and outputs must not overlap. Custom ops must do\n+  // this check by themselves if they don't support overlapping tensors. This\n+  // distinction is to allow custom ops to just forward a tensor, reusing it as\n+  // both input and output.\n+  if (builtin_data != nullptr) {\n+    TF_LITE_ENSURE_OK(&context_, CheckInputAndOutputForOverlap(\n+                                     inputs.data(), inputs.size(),\n+                                     outputs.data(), outputs.size()));\n+  }\n+\n   int new_node_index = nodes_and_registration_.size();\n   if (node_index) *node_index = new_node_index;\n   nodes_and_registration_.resize(nodes_and_registration_.size() + 1);"
        },
        {
          "filename": "tensorflow/lite/core/subgraph.h",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -451,6 +451,15 @@ class Subgraph {\n   TfLiteStatus CheckTensorIndices(const char* label, const int* indices,\n                                   int length);\n \n+  // Check that the input indices and the output indices don't overlap.\n+  // This is needed because same tensor must not be used both as input and\n+  // output for an operator.\n+  // NOTE: this changes consistent_ to be false if indices are out of bounds.\n+  TfLiteStatus CheckInputAndOutputForOverlap(const int* input_indices,\n+                                             int num_inputs,\n+                                             const int* output_indices,\n+                                             int num_outputs);\n+\n   // Compute the number of bytes required to represent a tensor with dimensions\n   // specified by the array dims (of length dims_size). Returns the status code\n   // and bytes."
        },
        {
          "filename": "tensorflow/lite/model_test.cc",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -438,6 +438,25 @@ TEST(BasicFlatBufferModel, TestParseModelWithSparseTensor) {\n }\n \n // TODO(b/150072943): Add malformed model with sparse tensor tests.\n+TEST(BasicFlatBufferModel, TestHandleMalformedModel) {\n+  const auto model_paths = {\n+      // These models use the same tensor as both input and ouput of a node\n+      \"tensorflow/lite/testdata/add_shared_tensors.bin\",\n+  };\n+\n+  for (const auto& model_path : model_paths) {\n+    std::unique_ptr<tflite::FlatBufferModel> model =\n+        FlatBufferModel::BuildFromFile(model_path);\n+    ASSERT_NE(model, nullptr);\n+\n+    tflite::ops::builtin::BuiltinOpResolver resolver;\n+    InterpreterBuilder builder(*model, resolver);\n+    std::unique_ptr<Interpreter> interpreter;\n+    ASSERT_EQ(builder(&interpreter), kTfLiteOk);\n+    ASSERT_NE(interpreter, nullptr);\n+    ASSERT_NE(interpreter->AllocateTensors(), kTfLiteOk);\n+  }\n+}\n \n // TODO(aselle): Add tests for serialization of builtin op data types.\n // These tests will occur with the evaluation tests of individual operators,"
        },
        {
          "filename": "tensorflow/lite/testdata/add_shared_tensors.bin",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "tensorflow/lite/testdata/sparse_tensor.bin",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fd41705e0ad7a123a9d01b8be2a3b34b3266493e",
            "date": "2025-01-14T13:33:52Z",
            "author_login": "loislo"
          },
          {
            "sha": "af5275c5731565cbf2a2c01ee418a8cf62388431",
            "date": "2025-01-14T12:48:20Z",
            "author_login": "akuegel"
          },
          {
            "sha": "ee156c15e5d1cd7d2bd85885e7fd2bf7e143c2c3",
            "date": "2025-01-14T12:46:22Z",
            "author_login": "pifon2a"
          },
          {
            "sha": "bd43a8255ce9e203b740bcdc09e8f79d3a26f887",
            "date": "2025-01-14T12:33:02Z",
            "author_login": "metaflow"
          },
          {
            "sha": "8003fb40987f176d35364da2af8fcdfab339349e",
            "date": "2025-01-14T11:27:47Z",
            "author_login": "vwbaker"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:H",
    "cwe_id": "CWE-20",
    "description": "In tensorflow-lite before versions 1.15.4, 2.0.3, 2.1.2, 2.2.1 and 2.3.1, if a TFLite saved model uses the same tensor as both input and output of an operator, then, depending on the operator, we can observe a segmentation fault or just memory corruption. We have patched the issue in d58c96946b and will release patch releases for all versions between 1.15 and 2.3. We recommend users to upgrade to TensorFlow 1.15.4, 2.0.3, 2.1.2, 2.2.1, or 2.3.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-09-25T19:15:16.307",
    "last_modified": "2024-11-21T05:05:05.720",
    "fix_date": "2020-09-18T21:04:39Z"
  },
  "references": [
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00065.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/d58c96946b2880991d63d1dacacb32f0a4dfa453",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x9j7-x98r-r4w2",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lists.opensuse.org/opensuse-security-announce/2020-10/msg00065.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/d58c96946b2880991d63d1dacacb32f0a4dfa453",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.3.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x9j7-x98r-r4w2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.155285",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}