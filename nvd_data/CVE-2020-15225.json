{
  "cve_id": "CVE-2020-15225",
  "github_data": {
    "repository": "carltongibson/django-filter",
    "fix_commit": "340cf7a23a2b3dcd7183f6a0d6c383e85b130d2b",
    "related_commits": [
      "340cf7a23a2b3dcd7183f6a0d6c383e85b130d2b",
      "340cf7a23a2b3dcd7183f6a0d6c383e85b130d2b"
    ],
    "patch_url": "https://github.com/carltongibson/django-filter/commit/340cf7a23a2b3dcd7183f6a0d6c383e85b130d2b.patch",
    "fix_commit_details": {
      "sha": "340cf7a23a2b3dcd7183f6a0d6c383e85b130d2b",
      "commit_date": "2020-09-27T09:04:03Z",
      "author": {
        "login": "carltongibson",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Version 2.4 (#1272)",
        "length": 123,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 101,
        "additions": 68,
        "deletions": 33
      },
      "files": [
        {
          "filename": ".bumpversion.cfg",
          "status": "removed",
          "additions": 0,
          "deletions": 24,
          "patch": "@@ -1,24 +0,0 @@\n-[bumpversion]\n-current_version = 2.3.0\n-commit = False\n-tag = False\n-parse = (?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(\\.(?P<release>[a-z]+)(?P<num>\\d+))?\n-serialize =\n-\t{major}.{minor}.{patch}.{release}{num}\n-\t{major}.{minor}.{patch}\n-\n-[bumpversion:file:django_filters/__init__.py]\n-\n-[bumpversion:file:setup.py]\n-\n-[bumpversion:file:docs/conf.py]\n-\n-[bumpversion:part:release]\n-optional_value = final\n-values =\n-\tdev\n-\tfinal\n-\n-[bumpversion:part:num]\n-first_value = 1\n-"
        },
        {
          "filename": "CHANGES.rst",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -1,3 +1,20 @@\n+Version 2.4.0 (2020-9-27)\n+--------------------------\n+\n+* SECURITY: Added a ``MaxValueValidator`` to the form field for\n+  ``NumberFilter``. This prevents a potential DoS attack if numbers with very\n+  large exponents were subsequently converted to integers.\n+\n+  The default limit value for the validator is ``1e50``.\n+\n+  The new ``NumberFilter.get_max_validator()`` allows customising the used\n+  validator, and may return ``None`` to disable the validation entirely.\n+\n+* Added testing against Django 3.1 and Python 3.9.\n+\n+  In addition tests against Django main development branch are now required to\n+  pass.\n+\n Version 2.3.0 (2020-6-5)\n ------------------------\n "
        },
        {
          "filename": "django_filters/__init__.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -10,7 +10,7 @@\n     from . import rest_framework\n del pkgutil\n \n-__version__ = '2.3.0'\n+__version__ = '2.4.0'\n \n \n def parse_version(version):"
        },
        {
          "filename": "django_filters/filters.py",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@\n from datetime import timedelta\n \n from django import forms\n+from django.core.validators import MaxValueValidator\n from django.db.models import Q\n from django.db.models.constants import LOOKUP_SEP\n from django.forms.utils import pretty_name\n@@ -357,6 +358,23 @@ class ModelMultipleChoiceFilter(QuerySetRequestMixin, MultipleChoiceFilter):\n class NumberFilter(Filter):\n     field_class = forms.DecimalField\n \n+    def get_max_validator(self):\n+        \"\"\"\n+        Return a MaxValueValidator for the field, or None to disable.\n+        \"\"\"\n+        return MaxValueValidator(1e50)\n+\n+    @property\n+    def field(self):\n+        if not hasattr(self, '_field'):\n+            field = super().field\n+            max_validator = self.get_max_validator()\n+            if max_validator:\n+                field.validators.append(max_validator)\n+\n+            self._field = field\n+        return self._field\n+\n \n class NumericRangeFilter(Filter):\n     field_class = RangeField"
        },
        {
          "filename": "docs/conf.py",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -13,6 +13,8 @@\n \n import sys, os\n \n+from django_filters import __version__\n+\n # If extensions (or modules to document with autodoc) are in another directory,\n # add these directories to sys.path here. If the directory is relative to the\n # documentation root, use os.path.abspath to make it absolute, like shown here.\n@@ -41,16 +43,16 @@\n \n # General information about the project.\n project = u'django-filter'\n-copyright = u'2019, Alex Gaynor, Carlton Gibson and others.'\n+copyright = u'2020, Alex Gaynor, Carlton Gibson and others.'\n \n # The version info for the project you're documenting, acts as replacement for\n # |version| and |release|, also used in various other places throughout the\n # built documents.\n #\n # The short X.Y version.\n-version = '2.3'\n+version = __version__\n # The full version, including alpha/beta/rc tags.\n-release = '2.3.0'\n+release = __version__\n \n # The language for content autogenerated by Sphinx. Refer to documentation\n # for a list of supported languages."
        },
        {
          "filename": "docs/ref/filters.txt",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -426,6 +426,12 @@ QuerySet, which then gets used as the model's manager::\n Filters based on a numerical value, used with ``IntegerField``, ``FloatField``,\n and ``DecimalField`` by default.\n \n+.. method:: NumberFilter.get_max_validator()\n+\n+    Return a ``MaxValueValidator`` instance that will be added to\n+    ``field.validators``. By default uses a limit value of ``1e50``. Return\n+    ``None`` to disable maximum value validation.\n+\n ``NumericRangeFilter``\n ~~~~~~~~~~~~~~~~~~~~~~\n "
        },
        {
          "filename": "requirements/maintainer.txt",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -2,7 +2,6 @@ alabaster==0.7.7\n argh==0.26.1\n Babel==2.2.0\n backports.ssl-match-hostname==3.4.0.2\n-bumpversion==0.5.3\n certifi==2015.9.6.2\n docutils==0.12\n funcsigs==0.4"
        },
        {
          "filename": "setup.py",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -2,12 +2,15 @@\n import sys\n from setuptools import setup, find_packages\n \n+# FIXME: Main module requires django to be present, so cannot run setup.py in\n+# clean environment.\n+# from django_filters import __version__\n+__version__ = '2.4.0'\n+\n f = open('README.rst')\n readme = f.read()\n f.close()\n \n-version = '2.3.0'\n-\n if sys.argv[-1] == 'publish':\n     if os.system(\"pip freeze | grep wheel\"):\n         print(\"wheel not installed.\\nUse `pip install wheel`.\\nExiting.\")\n@@ -18,13 +21,13 @@\n     os.system(\"python setup.py sdist bdist_wheel\")\n     os.system(\"twine upload dist/*\")\n     print(\"You probably want to also tag the version now:\")\n-    print(\"  git tag -a %s -m 'version %s'\" % (version, version))\n+    print(\"  git tag -a %s -m 'version %s'\" % (__version__, __version__))\n     print(\"  git push --tags\")\n     sys.exit()\n \n setup(\n     name='django-filter',\n-    version=version,\n+    version=__version__,\n     description=('Django-filter is a reusable Django application for allowing'\n                  ' users to filter querysets dynamically.'),\n     long_description=readme,"
        },
        {
          "filename": "tests/test_forms.py",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -255,3 +255,17 @@ def test_is_bound_and_not_valid(self):\n         self.assertFalse(f.is_valid())\n         self.assertEqual(f.data, {'price': 'four dollars'})\n         self.assertEqual(f.errors, {'price': ['Enter a number.']})\n+\n+    def test_number_filter_max_value_validation(self):\n+        class F(FilterSet):\n+            class Meta:\n+                model = Book\n+                fields = ['average_rating']\n+\n+        f = F({'average_rating': '1E1001'})\n+        self.assertTrue(f.is_bound)\n+        self.assertFalse(f.is_valid())\n+        self.assertEqual(\n+            f.errors,\n+            {'average_rating': ['Ensure this value is less than or equal to 1e+50.']}\n+        )"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 6,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e709e5d43a4ad8b8e8ea62520669b88300c9c686",
            "date": "2024-12-28T09:57:04Z",
            "author_login": "carltongibson"
          },
          {
            "sha": "ccde000dfe74362b62301b248681e9505133e821",
            "date": "2024-12-28T09:54:53Z",
            "author_login": "carltongibson"
          },
          {
            "sha": "2a644e176634ec0ce99d9446d980501e9763e194",
            "date": "2024-12-28T09:50:42Z",
            "author_login": "carltongibson"
          },
          {
            "sha": "2494df96c6387a9fa411fcb00b696b15dfd9216b",
            "date": "2024-11-26T20:22:47Z",
            "author_login": "aadarsh977"
          },
          {
            "sha": "3656174bd90d20f3d916fd98b6476c270013b681",
            "date": "2024-09-16T09:23:08Z",
            "author_login": "weblate"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-681",
    "description": "django-filter is a generic system for filtering Django QuerySets based on user selections. In django-filter before version 2.4.0, automatically generated `NumberFilter` instances, whose value was later converted to an integer, were subject to potential DoS from maliciously input using exponential format with sufficiently large exponents. Version 2.4.0+ applies a `MaxValueValidator` with a a default `limit_value` of 1e50 to the form field used by `NumberFilter` instances. In addition, `NumberFilter` implements the new `get_max_validator()` which should return a configured validator instance to customise the limit, or else `None` to disable the additional validation. Users may manually apply an equivalent validator if they are not able to upgrade.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-04-29T21:15:08.490",
    "last_modified": "2024-11-21T05:05:07.877",
    "fix_date": "2020-09-27T09:04:03Z"
  },
  "references": [
    {
      "url": "https://github.com/carltongibson/django-filter/commit/340cf7a23a2b3dcd7183f6a0d6c383e85b130d2b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/carltongibson/django-filter/releases/tag/2.4.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/carltongibson/django-filter/security/advisories/GHSA-x7gm-rfgv-w973",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DPHENTRHRAYFXYPPBT7JRHZRWILRY44S/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/FAT2ZAEF6DM3VFSOHKB7X3ASSHGQHJAK/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SVJ7AYU6FUSU3F653YCGW5LFD3IULRSX/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://pypi.org/project/django-filter/",
      "source": "security-advisories@github.com",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20210604-0010/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/carltongibson/django-filter/commit/340cf7a23a2b3dcd7183f6a0d6c383e85b130d2b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/carltongibson/django-filter/releases/tag/2.4.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/carltongibson/django-filter/security/advisories/GHSA-x7gm-rfgv-w973",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DPHENTRHRAYFXYPPBT7JRHZRWILRY44S/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/FAT2ZAEF6DM3VFSOHKB7X3ASSHGQHJAK/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SVJ7AYU6FUSU3F653YCGW5LFD3IULRSX/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://pypi.org/project/django-filter/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20210604-0010/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:57.058064",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "django-filter",
    "owner": "carltongibson",
    "created_at": "2009-01-30T00:35:57Z",
    "updated_at": "2025-01-13T22:38:54Z",
    "pushed_at": "2024-12-28T10:30:41Z",
    "size": 2288,
    "stars": 4507,
    "forks": 771,
    "open_issues": 74,
    "watchers": 4507,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 358189,
      "HTML": 517,
      "Makefile": 145
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T20:01:18.606108"
  }
}