{
  "cve_id": "CVE-2020-15245",
  "github_data": {
    "repository": "Sylius/Sylius",
    "fix_commit": "60636d711a4011e8694d10d201b53632c7e8ecaf",
    "related_commits": [
      "60636d711a4011e8694d10d201b53632c7e8ecaf",
      "60636d711a4011e8694d10d201b53632c7e8ecaf"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "60636d711a4011e8694d10d201b53632c7e8ecaf",
      "commit_date": "2020-10-06T15:09:15Z",
      "author": {
        "login": "lchrusciel",
        "type": "User",
        "stats": {
          "total_commits": 2338,
          "average_weekly_commits": 3.4382352941176473,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 322
        }
      },
      "commit_message": {
        "title": "[Shop] Disabling customer when email has been changed",
        "length": 53,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 292,
        "additions": 291,
        "deletions": 1
      },
      "files": [
        {
          "filename": "features/account/customer_account/editing_customer_profile.feature",
          "status": "modified",
          "additions": 13,
          "deletions": 1,
          "patch": "@@ -19,9 +19,21 @@ Feature: Editing a customer profile\n         And my name should be \"Will Conway\"\n \n     @ui\n-    Scenario: Changing my email\n+    Scenario: Changing my email if channel requires verification\n         When I want to modify my profile\n         And I specify the customer email as \"frank@underwood.com\"\n         And I save my changes\n         Then I should be notified that it has been successfully edited\n+        And I should be notified that the verification email has been sent\n+        And it should be sent to \"frank@underwood.com\"\n+        And I should not be logged in\n+\n+    @ui\n+    Scenario: Changing my email if channel does not require verification\n+        Given \"United States\" channel has account verification disabled\n+        When I want to modify my profile\n+        And I specify the customer email as \"frank@underwood.com\"\n+        And I save my changes\n+        Then I should be notified that it has been successfully edited\n+        And my account should not be verified\n         And my email should be \"frank@underwood.com\""
        },
        {
          "filename": "src/Sylius/Behat/Context/Ui/Shop/VerificationContext.php",
          "status": "added",
          "additions": 163,
          "deletions": 0,
          "patch": "@@ -0,0 +1,163 @@\n+<?php\n+\n+/*\n+ * This file is part of the Sylius package.\n+ *\n+ * (c) Pawe\u0142 J\u0119drzejewski\n+ *\n+ * For the full copyright and license information, please view the LICENSE\n+ * file that was distributed with this source code.\n+ */\n+\n+declare(strict_types=1);\n+\n+namespace Sylius\\Behat\\Context\\Ui\\Shop;\n+\n+use Behat\\Behat\\Context\\Context;\n+use Sylius\\Behat\\NotificationType;\n+use Sylius\\Behat\\Page\\Shop\\Account\\DashboardPageInterface;\n+use Sylius\\Behat\\Page\\Shop\\Account\\VerificationPageInterface;\n+use Sylius\\Behat\\Service\\NotificationCheckerInterface;\n+use Sylius\\Behat\\Service\\SharedStorageInterface;\n+use Sylius\\Component\\Core\\Model\\CustomerInterface;\n+use Sylius\\Component\\Core\\Model\\ShopUserInterface;\n+use Webmozart\\Assert\\Assert;\n+\n+class VerificationContext implements Context\n+{\n+    /** @var SharedStorageInterface */\n+    private $sharedStorage;\n+\n+    /** @var DashboardPageInterface */\n+    private $dashboardPage;\n+\n+    /** @var VerificationPageInterface */\n+    private $verificationPage;\n+\n+    /** @var NotificationCheckerInterface */\n+    private $notificationChecker;\n+\n+    public function __construct(\n+        SharedStorageInterface $sharedStorage,\n+        DashboardPageInterface $dashboardPage,\n+        VerificationPageInterface $verificationPage,\n+        NotificationCheckerInterface $notificationChecker\n+    ) {\n+        $this->sharedStorage = $sharedStorage;\n+        $this->dashboardPage = $dashboardPage;\n+        $this->verificationPage = $verificationPage;\n+        $this->notificationChecker = $notificationChecker;\n+    }\n+\n+    /**\n+     * @Then I should be notified that my account has been created and the verification email has been sent\n+     */\n+    public function iShouldBeNotifiedThatNewAccountHasBeenSuccessfullyCreated(): void\n+    {\n+        $this->notificationChecker->checkNotification(\n+            'Thank you for registering, check your email to verify your account.',\n+            NotificationType::success()\n+        );\n+    }\n+\n+    /**\n+     * @Then /^my account should be verified$/\n+     */\n+    public function myAccountShouldBeVerified(): void\n+    {\n+        Assert::true($this->dashboardPage->isVerified());\n+    }\n+\n+    /**\n+     * @When /^(I) try to verify my account using the link from this email$/\n+     */\n+    public function iUseItToVerify(ShopUserInterface $user): void\n+    {\n+        $this->verificationPage->verifyAccount($user->getEmailVerificationToken());\n+    }\n+\n+    /**\n+     * @When I verify my account using link sent to :customer\n+     */\n+    public function iVerifyMyAccount(CustomerInterface $customer): void\n+    {\n+        $user = $customer->getUser();\n+        Assert::notNull($user, 'No account for given customer');\n+\n+        $this->iUseItToVerify($user);\n+    }\n+\n+    /**\n+     * @When I resend the verification email\n+     */\n+    public function iResendVerificationEmail(): void\n+    {\n+        $this->dashboardPage->open();\n+        $this->dashboardPage->pressResendVerificationEmail();\n+    }\n+\n+    /**\n+     * @When I use the verification link from the first email to verify\n+     */\n+    public function iUseVerificationLinkFromFirstEmailToVerify(): void\n+    {\n+        $token = $this->sharedStorage->get('verification_token');\n+\n+        $this->verificationPage->verifyAccount($token);\n+    }\n+\n+    /**\n+     * @When I (try to )verify using :token token\n+     */\n+    public function iTryToVerifyUsing(string $token): void\n+    {\n+        $this->verificationPage->verifyAccount($token);\n+    }\n+\n+    /**\n+     * @Then /^(?:my|his|her) account should not be verified$/\n+     */\n+    public function myAccountShouldNotBeVerified(): void\n+    {\n+        $this->dashboardPage->open();\n+\n+        Assert::false($this->dashboardPage->isVerified());\n+    }\n+\n+    /**\n+     * @Then I should not be able to resend the verification email\n+     */\n+    public function iShouldBeUnableToResendVerificationEmail(): void\n+    {\n+        $this->dashboardPage->open();\n+\n+        Assert::false($this->dashboardPage->hasResendVerificationEmailButton());\n+    }\n+\n+    /**\n+     * @Then I should be notified that the verification was successful\n+     */\n+    public function iShouldBeNotifiedThatTheVerificationWasSuccessful(): void\n+    {\n+        $this->notificationChecker->checkNotification('has been successfully verified.', NotificationType::success());\n+    }\n+\n+    /**\n+     * @Then I should be notified that the verification token is invalid\n+     */\n+    public function iShouldBeNotifiedThatTheVerificationTokenIsInvalid(): void\n+    {\n+        $this->notificationChecker->checkNotification('The verification token is invalid.', NotificationType::failure());\n+    }\n+\n+    /**\n+     * @Then I should be notified that the verification email has been sent\n+     */\n+    public function iShouldBeNotifiedThatTheVerificationEmailHasBeenSent(): void\n+    {\n+        $this->notificationChecker->checkNotification(\n+            'An email with the verification link has been sent to your email address.',\n+            NotificationType::success()\n+        );\n+    }\n+}"
        },
        {
          "filename": "src/Sylius/Bundle/ShopBundle/EventListener/CustomerEmailUpdaterListener.php",
          "status": "added",
          "additions": 106,
          "deletions": 0,
          "patch": "@@ -0,0 +1,106 @@\n+<?php\n+\n+/*\n+ * This file is part of the Sylius package.\n+ *\n+ * (c) Pawe\u0142 J\u0119drzejewski\n+ *\n+ * For the full copyright and license information, please view the LICENSE\n+ * file that was distributed with this source code.\n+ */\n+\n+declare(strict_types=1);\n+\n+namespace Sylius\\Bundle\\ShopBundle\\EventListener;\n+\n+use Sylius\\Bundle\\UserBundle\\EventListener\\PasswordUpdaterListener as BasePasswordUpdaterListener;\n+use Sylius\\Bundle\\UserBundle\\UserEvents;\n+use Sylius\\Component\\Channel\\Context\\ChannelContextInterface;\n+use Sylius\\Component\\Core\\Model\\ChannelInterface;\n+use Sylius\\Component\\Core\\Model\\CustomerInterface;\n+use Sylius\\Component\\Core\\Model\\ShopUserInterface;\n+use Sylius\\Component\\User\\Security\\Generator\\GeneratorInterface;\n+use Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\n+use Symfony\\Component\\EventDispatcher\\GenericEvent;\n+use Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBagInterface;\n+use Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;\n+use Webmozart\\Assert\\Assert;\n+\n+final class CustomerEmailUpdaterListener\n+{\n+    /** @var GeneratorInterface */\n+    private $tokenGenerator;\n+    /** @var ChannelContextInterface */\n+    private $channelContext;\n+    /** @var EventDispatcherInterface */\n+    private $eventDispatcher;\n+    /** @var SessionInterface */\n+    private $session;\n+\n+    public function __construct(\n+        GeneratorInterface $tokenGenerator,\n+        ChannelContextInterface $channelContext,\n+        EventDispatcherInterface $eventDispatcher,\n+        SessionInterface $session\n+    ) {\n+        $this->tokenGenerator = $tokenGenerator;\n+        $this->channelContext = $channelContext;\n+        $this->eventDispatcher = $eventDispatcher;\n+        $this->session = $session;\n+    }\n+\n+    public function eraseVerification(GenericEvent $event): void\n+    {\n+        $customer = $event->getSubject();\n+\n+        /** @var CustomerInterface $customer */\n+        Assert::isInstanceOf($customer, CustomerInterface::class);\n+\n+        /** @var ShopUserInterface $user */\n+        $user = $customer->getUser();\n+        if ($customer->getEmail() !== $user->getUsername()) {\n+            $user->setEmail($customer->getEmail());\n+            $user->setVerifiedAt(null);\n+\n+            $token = $this->tokenGenerator->generate();\n+            $user->setEmailVerificationToken($token);\n+\n+            /** @var ChannelInterface $channel */\n+            $channel = $this->channelContext->getChannel();\n+\n+            if ($channel->isAccountVerificationRequired()) {\n+                $user->setEnabled(false);\n+            }\n+        }\n+    }\n+\n+    public function sendVerificationEmail(GenericEvent $event): void\n+    {\n+        /** @var ChannelInterface $channel */\n+        $channel = $this->channelContext->getChannel();\n+\n+        if (!$channel->isAccountVerificationRequired()) {\n+            return;\n+        }\n+\n+        $customer = $event->getSubject();\n+\n+        /** @var CustomerInterface $customer */\n+        Assert::isInstanceOf($customer, CustomerInterface::class);\n+\n+        /** @var ShopUserInterface $user */\n+        $user = $customer->getUser();\n+\n+        if (!$user->isEnabled() && !$user->isVerified() && null !== $user->getEmailVerificationToken()) {\n+            $this->eventDispatcher->dispatch(UserEvents::REQUEST_VERIFICATION_TOKEN, new GenericEvent($user));\n+            $this->addFlash('success', 'sylius.user.verify_email_request');\n+        }\n+    }\n+\n+    private function addFlash(string $type, string $message): void\n+    {\n+        /** @var FlashBagInterface $flashBag */\n+        $flashBag = $this->session->getBag('flashes');\n+        $flashBag->add($type, $message);\n+    }\n+}"
        },
        {
          "filename": "src/Sylius/Bundle/ShopBundle/Resources/config/services.xml",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -29,6 +29,15 @@\n             <argument type=\"service\" id=\"sylius.storage.cart_session\" />\n         </service>\n \n+        <service id=\"sylius.listener.email_updater\" class=\"Sylius\\Bundle\\ShopBundle\\EventListener\\CustomerEmailUpdaterListener\">\n+            <argument type=\"service\" id=\"sylius.shop_user.token_generator.email_verification\" />\n+            <argument type=\"service\" id=\"sylius.context.channel\" />\n+            <argument type=\"service\" id=\"event_dispatcher\" />\n+            <argument type=\"service\" id=\"session\" />\n+            <tag name=\"kernel.event_listener\" event=\"sylius.customer.pre_update\" method=\"eraseVerification\" />\n+            <tag name=\"kernel.event_listener\" event=\"sylius.customer.post_update\" method=\"sendVerificationEmail\" />\n+        </service>\n+\n         <service id=\"sylius.context.cart.session_and_channel_based\" class=\"Sylius\\Bundle\\CoreBundle\\Context\\SessionAndChannelBasedCartContext\">\n             <argument type=\"service\" id=\"sylius.storage.cart_session\" />\n             <argument type=\"service\" id=\"sylius.context.channel\" />"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "27c5ab559f734d4701ba5aa87d181874b379e3df",
            "date": "2025-01-17T13:46:03Z",
            "author_login": "GSadee"
          },
          {
            "sha": "1cd7b6b863d2e0322e8700c2671c6628f83a60bf",
            "date": "2025-01-17T13:45:04Z",
            "author_login": "GSadee"
          },
          {
            "sha": "ac9e2a3aea43468bf1867eb7f37761ceba980ed8",
            "date": "2025-01-17T13:44:31Z",
            "author_login": "GSadee"
          },
          {
            "sha": "e80c0bd279a9fd38e684c4460bbd28569d45864d",
            "date": "2025-01-16T11:53:43Z",
            "author_login": "GSadee"
          },
          {
            "sha": "7ebf7dac78ebadc9a2c6c73ec25b7540d229e18b",
            "date": "2025-01-16T08:42:21Z",
            "author_login": "GSadee"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "In Sylius before versions 1.6.9, 1.7.9 and 1.8.3, the user may register in a shop by email mail@example.com, verify it, change it to the mail another@domain.com and stay verified and enabled. This may lead to having accounts addressed to totally different emails, that were verified. Note, that this way one is not able to take over any existing account (guest or normal one). The issue has been patched in Sylius 1.6.9, 1.7.9 and 1.8.3. As a workaround, you may resolve this issue on your own by creating a custom event listener, which will listen to the sylius.customer.pre_update event. You can determine that email has been changed if customer email and user username are different. They are synchronized later on. Pay attention, to email changing behavior for administrators. You may need to skip this logic for them. In order to achieve this, you should either check master request path info, if it does not contain /admin prefix or adjust event triggered during customer update in the shop. You can find more information on how to customize the event here.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-10-19T21:15:12.810",
    "last_modified": "2024-11-21T05:05:10.723",
    "fix_date": "2020-10-06T15:09:15Z"
  },
  "references": [
    {
      "url": "https://github.com/Sylius/Sylius/commit/60636d711a4011e8694d10d201b53632c7e8ecaf",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/Sylius/security/advisories/GHSA-6gw4-x63h-5499",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/Sylius/commit/60636d711a4011e8694d10d201b53632c7e8ecaf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Sylius/Sylius/security/advisories/GHSA-6gw4-x63h-5499",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.184819",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "Sylius",
    "owner": "Sylius",
    "created_at": "2011-11-05T22:05:52Z",
    "updated_at": "2025-01-23T16:59:03Z",
    "pushed_at": "2025-01-26T02:24:51Z",
    "size": 295719,
    "stars": 8070,
    "forks": 2106,
    "open_issues": 235,
    "watchers": 8070,
    "has_security_policy": false,
    "default_branch": "2.0",
    "protected_branches": [
      "1.0",
      "1.1",
      "1.2",
      "1.3",
      "1.4",
      "1.5",
      "1.6",
      "1.7",
      "1.8",
      "1.9",
      "1.10",
      "1.11",
      "1.12",
      "1.13",
      "1.14",
      "2.0",
      "sylius-stack"
    ],
    "languages": {
      "PHP": 10594782,
      "Gherkin": 1522366,
      "Twig": 572800,
      "SCSS": 40886,
      "JavaScript": 37326,
      "Dockerfile": 4882,
      "Shell": 1935,
      "Makefile": 1440
    },
    "commit_activity": {
      "total_commits_last_year": 5857,
      "avg_commits_per_week": 112.63461538461539,
      "days_active_last_year": 286
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:47:16.892439"
  }
}