{
  "cve_id": "CVE-2020-15264",
  "github_data": {
    "repository": "chocolatey/boxstarter",
    "fix_commit": "67e320491813550b48900e87105a34ceefdcf633",
    "related_commits": [
      "67e320491813550b48900e87105a34ceefdcf633",
      "67e320491813550b48900e87105a34ceefdcf633"
    ],
    "patch_url": "https://github.com/chocolatey/boxstarter/commit/67e320491813550b48900e87105a34ceefdcf633.patch",
    "fix_commit_details": {
      "sha": "67e320491813550b48900e87105a34ceefdcf633",
      "commit_date": "2020-10-13T10:31:35Z",
      "author": {
        "login": "mwallner",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-rpgx-h675-r3jf",
        "length": 101,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 125,
        "additions": 116,
        "deletions": 9
      },
      "files": [
        {
          "filename": "BuildScripts/setup.ps1",
          "status": "modified",
          "additions": 116,
          "deletions": 9,
          "patch": "@@ -1,20 +1,127 @@\n+\r\n+<#\r\n+.SYNOPSIS\r\n+    test if current session/identity is elevated \r\n+    (a.k.a. check if we've got admin privileges)\r\n+#>\r\n+function Test-Admin {\r\n+    $identity = [System.Security.Principal.WindowsIdentity]::GetCurrent()\r\n+    $principal = New-Object System.Security.Principal.WindowsPrincipal( $identity )\r\n+    return $principal.IsInRole( [System.Security.Principal.WindowsBuiltInRole]::Administrator )\r\n+}\r\n+\r\n+<#\r\n+.SYNOPSIS\r\n+    get name of 'WellKnownSidType' in the current user's system locale\r\n+#>\r\n+function Get-LocalizedWellKnownPrincipalName {\r\n+    param (\r\n+        [Parameter(Mandatory = $true)]\r\n+        [Security.Principal.WellKnownSidType] $WellKnownSidType\r\n+    )\r\n+    $sid = New-Object -TypeName 'System.Security.Principal.SecurityIdentifier' -ArgumentList @($WellKnownSidType, $null)\r\n+    $account = $sid.Translate([Security.Principal.NTAccount])\r\n+\r\n+    return $account.Value\r\n+}\r\n+\r\n+<#\r\n+.SYNOPSIS\r\n+    ensure a given folder is only writeable by administrative users\r\n+\r\n+.NOTES\r\n+    we need to do this in order to mitigate privilege escalation attacks!\r\n+    \r\n+    Attack Vector 1: Boxstarter folders are added to PATH, therefore they must be protected in a way so \r\n+    that a random user may not put arbitrary files/dlls in these folders.\r\n+    (files may be replaces with hijacked/malicious ones)\r\n+    \r\n+    Attack Vector 2: 'BuildPackages' contains Boxstarter Packages that may be installed after system reboots.\r\n+    If a user would be able to modify those packages, it would be easy to run arbitrary PowerShell code with \r\n+    SYSTEM privileges.\r\n+    \r\n+    see Ensure-Permissions \r\n+    https://github.com/chocolatey/choco/blob/master/nuget/chocolatey/tools/chocolateysetup.psm1\r\n+#>\r\n+function Ensure-Permissions {\r\n+    [CmdletBinding()]\r\n+    param(\r\n+        [string]$folder\r\n+    )\r\n+    Write-Debug \"Ensure-Permissions\"\r\n+\r\n+    $currentEA = $ErrorActionPreference\r\n+    $ErrorActionPreference = 'Stop'\r\n+    try {\r\n+        # get current acl\r\n+        $acl = (Get-Item $folder).GetAccessControl('Access,Owner')\r\n+\r\n+        Write-Debug \"Removing existing permissions.\"\r\n+        $acl.Access | ForEach-Object {\r\n+            Write-Debug \"Remove '$($_.FileSystemRights)' for user '$($_.IdentityReference)'\"\r\n+            $acl.RemoveAccessRuleAll($_) \r\n+        }\r\n+\r\n+        $inheritanceFlags = ([Security.AccessControl.InheritanceFlags]::ContainerInherit -bor [Security.AccessControl.InheritanceFlags]::ObjectInherit)\r\n+        $propagationFlags = [Security.AccessControl.PropagationFlags]::None\r\n+\r\n+        $rightsFullControl = [Security.AccessControl.FileSystemRights]::FullControl\r\n+        $rightsReadExecute = [Security.AccessControl.FileSystemRights]::ReadAndExecute\r\n+\r\n+        Write-Output \"Restricting write permissions of '$folder' to Administrators\"\r\n+        $builtinAdmins = Get-LocalizedWellKnownPrincipalName -WellKnownSidType ([Security.Principal.WellKnownSidType]::BuiltinAdministratorsSid)\r\n+        $adminsAccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($builtinAdmins, $rightsFullControl, $inheritanceFlags, $propagationFlags, \"Allow\")\r\n+        $acl.SetAccessRule($adminsAccessRule)\r\n+        $localSystem = Get-LocalizedWellKnownPrincipalName -WellKnownSidType ([Security.Principal.WellKnownSidType]::LocalSystemSid)\r\n+        $localSystemAccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($localSystem, $rightsFullControl, $inheritanceFlags, $propagationFlags, \"Allow\")\r\n+        $acl.SetAccessRule($localSystemAccessRule)\r\n+        $builtinUsers = Get-LocalizedWellKnownPrincipalName -WellKnownSidType ([Security.Principal.WellKnownSidType]::BuiltinUsersSid)\r\n+        $usersAccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($builtinUsers, $rightsReadExecute, $inheritanceFlags, $propagationFlags, \"Allow\")\r\n+        $acl.SetAccessRule($usersAccessRule)\r\n+\r\n+        Write-Debug \"Set Owner to Administrators\"\r\n+        $builtinAdminsSid = New-Object System.Security.Principal.SecurityIdentifier([Security.Principal.WellKnownSidType]::BuiltinAdministratorsSid, $null)\r\n+        $acl.SetOwner($builtinAdminsSid)\r\n+\r\n+        Write-Debug \"Removing inheritance with no copy\"\r\n+        $acl.SetAccessRuleProtection($true, $false)\r\n+\r\n+        # enact the changes against the actual\r\n+        (Get-Item $folder).SetAccessControl($acl)\r\n+\r\n+    }\r\n+    catch {\r\n+        Write-Warning $_.Exception\r\n+        Write-Warning \"Not able to set permissions for $folder.\"\r\n+    }\r\n+    $ErrorActionPreference = $currentEA\r\n+}\r\n+\r\n function Install-Boxstarter($here, $ModuleName, $installArgs = \"\") {\r\n+\r\n+    if (!(Test-Admin)) {\r\n+        throw \"Installation of Boxstarter requires Administrative permissions. Please run from elevated prompt.\"\r\n+    }\r\n+\r\n     $boxstarterPath = Join-Path $env:ProgramData Boxstarter\r\n-    if(!(test-Path $boxstarterPath)){\r\n-        mkdir $boxstarterPath\r\n+    if (!(test-Path $boxstarterPath)) {\r\n+        New-Item -ItemType Directory $boxstarterPath | Out-Null\r\n     }\r\n-    $packagePath=Join-Path $boxstarterPath BuildPackages\r\n-    if(!(test-Path $packagePath)){\r\n-        mkdir $packagePath\r\n+    $packagePath = Join-Path $boxstarterPath BuildPackages\r\n+    if (!(test-Path $packagePath)) {\r\n+        New-Item -ItemType Directory $packagePath | Out-Null\r\n     }\r\n-    foreach($ModulePath in (Get-ChildItem $here | Where-Object { $_.PSIsContainer })){\r\n-        $target=Join-Path $boxstarterPath $modulePath.BaseName\r\n-        if(test-Path $target){\r\n+    foreach ($ModulePath in (Get-ChildItem $here | Where-Object { $_.PSIsContainer })) {\r\n+        $target = Join-Path $boxstarterPath $modulePath.BaseName\r\n+        if (test-Path $target) {\r\n             Remove-Item $target -Recurse -Force\r\n         }\r\n     }\r\n     Copy-Item \"$here\\*\" $boxstarterPath -Recurse -Force -Exclude ChocolateyInstall.ps1, Setup.*\r\n \r\n+    # set permissions to mitigate possible privilege escalation\r\n+    Ensure-Permissions -folder $boxstarterPath\r\n+\r\n     PersistBoxStarterPathToEnvironmentVariable \"PSModulePath\" $boxstarterPath\r\n     PersistBoxStarterPathToEnvironmentVariable \"Path\" $boxstarterPath\r\n     $binPath =  \"$here\\..\\..\\..\\bin\"\r\n@@ -46,7 +153,7 @@ PS:>Get-Help Boxstarter\n         $startMenu = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::CommonStartMenu)\r\n         $startMenu += \"\\Programs\\Boxstarter\"\r\n         if(!(Test-Path $startMenu)){\r\n-            mkdir $startMenu\r\n+            New-Item -ItemType Directory $startMenu | Out-Null\r\n         }\r\n         $target=\"powershell.exe\"\r\n         $targetArgs=\"-ExecutionPolicy bypass -NoExit -Command `\"&'$boxstarterPath\\BoxstarterShell.ps1'`\"\"\r"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cd6f1f57743acb49c9b1165a434bae4e49fdfd4e",
            "date": "2024-10-18T05:18:14Z",
            "author_login": "corbob"
          },
          {
            "sha": "452ab614dc7a70fa1873acc2adfa8b5b72f2a408",
            "date": "2024-09-27T04:37:25Z",
            "author_login": "mwallner"
          },
          {
            "sha": "ac87ed2c342f262025b39216b8ddc8341e9b3510",
            "date": "2024-09-03T22:44:28Z",
            "author_login": "flcdrg"
          },
          {
            "sha": "5c60819ab4fef6a9b72947199b22a16313206600",
            "date": "2024-09-03T19:55:30Z",
            "author_login": "mwallner"
          },
          {
            "sha": "678c86e43da3f9d3740b1b3d945fedfe6d8297a8",
            "date": "2024-07-05T07:02:16Z",
            "author_login": "flcdrg"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-73",
    "description": "The Boxstarter installer before version 2.13.0 configures C:\\ProgramData\\Boxstarter to be in the system-wide PATH environment variable. However, this directory is writable by normal, unprivileged users. To exploit the vulnerability, place a DLL in this directory that a privileged service is looking for. For example, WptsExtensions.dll When Windows starts, it'll execute the code in DllMain() with SYSTEM privileges. Any unprivileged user can execute code with SYSTEM privileges. The issue is fixed in version 3.13.0",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-10-20T21:15:12.633",
    "last_modified": "2024-11-21T05:05:13.600",
    "fix_date": "2020-10-13T10:31:35Z"
  },
  "references": [
    {
      "url": "https://github.com/chocolatey/boxstarter/commit/67e320491813550b48900e87105a34ceefdcf633",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/chocolatey/boxstarter/security/advisories/GHSA-rpgx-h675-r3jf",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.kb.cert.org/vuls/id/208577",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/chocolatey/boxstarter/commit/67e320491813550b48900e87105a34ceefdcf633",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/chocolatey/boxstarter/security/advisories/GHSA-rpgx-h675-r3jf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.kb.cert.org/vuls/id/208577",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.186119",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "boxstarter",
    "owner": "chocolatey",
    "created_at": "2014-09-15T03:58:15Z",
    "updated_at": "2025-01-09T08:24:44Z",
    "pushed_at": "2024-10-18T05:18:14Z",
    "size": 10180,
    "stars": 1320,
    "forks": 161,
    "open_issues": 95,
    "watchers": 1320,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop"
    ],
    "languages": {
      "PowerShell": 597406,
      "Python": 224376,
      "C#": 2475,
      "CSS": 1302,
      "Batchfile": 582
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:27:45.172082"
  }
}