{
  "cve_id": "CVE-2020-15271",
  "github_data": {
    "repository": "d0c-s4vage/lookatme",
    "fix_commit": "72fe36b784b234548d49dae60b840c37f0eb8d84",
    "related_commits": [
      "72fe36b784b234548d49dae60b840c37f0eb8d84",
      "72fe36b784b234548d49dae60b840c37f0eb8d84"
    ],
    "patch_url": "https://github.com/d0c-s4vage/lookatme/commit/72fe36b784b234548d49dae60b840c37f0eb8d84.patch",
    "fix_commit_details": {
      "sha": "72fe36b784b234548d49dae60b840c37f0eb8d84",
      "commit_date": "2020-10-23T05:28:53Z",
      "author": {
        "login": "d0c-s4vage",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #110 from d0c-s4vage/feature/109-extension_warnings",
        "length": 110,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 251,
        "additions": 232,
        "deletions": 19
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -63,6 +63,8 @@ Usage: lookatme [OPTIONS] [INPUT_FILES]...\n \n   lookatme - An interactive, terminal-based markdown presentation tool.\n \n+  See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n+\n Options:\n   --debug\n   -l, --log PATH\n@@ -74,6 +76,14 @@ Options:\n   --live, --live-reload           Watch the input filename for modifications\n                                   and automatically reload\n \n+  -s, --safe                      Do not load any new extensions specified in\n+                                  the source markdown. Extensions specified\n+                                  via env var or -e are still loaded\n+\n+  --no-ext-warn                   Load new extensions specified in the source\n+                                  markdown without warning\n+\n+  -i, --ignore-ext-failure        Ignore load failures of extensions\n   -e, --exts TEXT                 A comma-separated list of extension names to\n                                   automatically load (LOOKATME_EXTS)\n "
        },
        {
          "filename": "docs/source/_static/lookatme_tour.gif",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "docs/source/getting_started.rst",
          "status": "modified",
          "additions": 31,
          "deletions": 1,
          "patch": "@@ -24,6 +24,8 @@ The ``lookatme`` CLI has a few options to control it's behavior:\n \n       lookatme - An interactive, terminal-based markdown presentation tool.\n \n+      See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n+\n     Options:\n       --debug\n       -l, --log PATH\n@@ -35,6 +37,14 @@ The ``lookatme`` CLI has a few options to control it's behavior:\n       --live, --live-reload           Watch the input filename for modifications\n                                       and automatically reload\n \n+      -s, --safe                      Do not load any new extensions specified in\n+                                      the source markdown. Extensions specified\n+                                      via env var or -e are still loaded\n+\n+      --no-ext-warn                   Load new extensions specified in the source\n+                                      markdown without warning\n+\n+      -i, --ignore-ext-failure        Ignore load failures of extensions\n       -e, --exts TEXT                 A comma-separated list of extension names to\n                                       automatically load (LOOKATME_EXTS)\n \n@@ -58,11 +68,31 @@ are possible:\n   :alt: Live Updates\n \n ``-e EXT_NAME1,EXT_NAME2`` / ``--exts EXT_NAME1,EXT_NAME2``\n-^^^^^^^^^^^^^^^^^^^\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n Allows a comma-separated list of extension names to be pre-loaded into lookatme\n without requring them to be declared in the Markdown source.\n \n+``-s`` / ``--safe``\n+^^^^^^^^^^^^^^^^^^^\n+\n+Do **NOT** load any new extensions specified in the markdown (ignore them). New\n+extensions are extensions that have not manually been allowed via the ``-e``\n+argument or the ``LOOKATME_EXTS`` environment variable.\n+\n+``--no-ext-warn``\n+^^^^^^^^^^^^^^^^^\n+\n+Do not warn about new extensions that are to-be-loaded that are specified in\n+the source markdown. New extensions are extensions that have not manually been\n+allowed via the ``-e`` argument or the ``LOOKATME_EXTS`` environment variable.\n+\n+``-i``\n+^^^^^^\n+\n+Ignore failure loading extensions. This does not ignore warnings, but ignores\n+any hard-errors during import, such as ``ImportError``.\n+\n \n ``--single`` / ``--one``\n ^^^^^^^^^^^^^^^^^^^^^^^^"
        },
        {
          "filename": "examples/calendar_contrib/lookatme/contrib/calendar.py",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -12,6 +12,14 @@\n from lookatme.exceptions import IgnoredByContrib\n \n \n+def user_warnings():\n+    \"\"\"No warnings exist for this extension. Anything you want to warn the\n+    user about, such as security risks in processing untrusted markdown, should\n+    go here.\n+    \"\"\"\n+    return []\n+\n+\n def render_code(token, body, stack, loop):\n     lang = token[\"lang\"] or \"\"\n     if lang != \"calendar\":"
        },
        {
          "filename": "examples/tour.md",
          "status": "modified",
          "additions": 8,
          "deletions": 7,
          "patch": "@@ -3,18 +3,19 @@ title: lookatme Tour\n date: 2020-10-09\n author: James Johnson\n extensions:\n+  - terminal\n   - qrcode\n   - image_ueberzug\n styles:\n-  style: solarized-dark\n+  style: monokai\n   table:\n-    column_spacing: 5\n+    column_spacing: 15\n   margin:\n     top: 3\n     bottom: 0\n   padding:\n-    top: 1\n-    bottom: 1\n+    top: 3\n+    bottom: 3\n ---\n \n # Markdown Support: Inline\n@@ -170,16 +171,16 @@ docker run --rm -it ubuntu:18.04\n \n # Live Editing\n \n-When run with the `--live` option, lookatme watches for file changes and\n-auto-reloads the source markdown \n+Hello from vim! The `--live` flag makes lookatme watch the source input\n+for file changes and auto-reloads the slides.\n \n ---\n \n # Live Editing: Including Styles!\n \n ```python\n def a_function(test):\n-    print \"Hello again from vim\"\n+    print \"Hello again from vim again\"\n ```\n \n | h1     | h2     | h3    |"
        },
        {
          "filename": "lookatme/__main__.py",
          "status": "modified",
          "additions": 28,
          "deletions": 1,
          "patch": "@@ -58,6 +58,27 @@\n     is_flag=True,\n     default=False,\n )\n+@click.option(\n+    \"-s\",\n+    \"--safe\",\n+    help=\"Do not load any new extensions specified in the source markdown. \"\n+         \"Extensions specified via env var or -e are still loaded\",\n+    is_flag=True,\n+    default=False,\n+)\n+@click.option(\n+    \"--no-ext-warn\",\n+    help=\"Load new extensions specified in the source markdown without warning\",\n+    is_flag=True,\n+    default=False,\n+)\n+@click.option(\n+    \"-i\",\n+    \"--ignore-ext-failure\",\n+    help=\"Ignore load failures of extensions\",\n+    is_flag=True,\n+    default=False,\n+)\n @click.option(\n     \"-e\",\n     \"--exts\",\n@@ -82,8 +103,11 @@\n     nargs=-1,\n )\n def main(debug, log_path, theme, code_style, dump_styles,\n-         input_files, live_reload, extensions, single_slide):\n+         input_files, live_reload, extensions, single_slide, safe, no_ext_warn,\n+         ignore_ext_failure):\n     \"\"\"lookatme - An interactive, terminal-based markdown presentation tool.\n+    \n+    See https://lookatme.readthedocs.io/en/v{{VERSION}} for documentation\n     \"\"\"\n     if debug:\n         lookatme.config.LOG = lookatme.log.create_log(log_path)\n@@ -102,6 +126,9 @@ def main(debug, log_path, theme, code_style, dump_styles,\n         live_reload=live_reload,\n         single_slide=single_slide,\n         preload_extensions=preload_exts,\n+        safe=safe,\n+        no_ext_warn=no_ext_warn,\n+        ignore_ext_failure=ignore_ext_failure,\n     )\n \n     if dump_styles:"
        },
        {
          "filename": "lookatme/ascii_art.py",
          "status": "added",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -0,0 +1,22 @@\n+\"\"\"\n+Misc ASCII art\n+\"\"\"\n+\n+WARNING = r\"\"\"\n+               _mBma\n+              sQf \"QL\n+             jW(   -$g.\n+            jW'     -$m,\n+          .y@'  _aa.  4m,\n+         .mD`  ]QQWQ.  4Q,\n+        _mP`   ]QQQQ    ?Q/\n+       _QF     )WQQ@     ?Qc\n+      <QF       QQQF      )Qa\n+     jW(        QQQf       \"QL\n+    jW'         ]H8'        -Q6.\n+  .y@'          _as.         -$m.\n+ .m@`          ]QQWQ.         -4m,\n+_mP`           -?$8!            4Q,\n+mE                               $m\n+?$gyygggggggggwywgyygggggggygggggD(\n+\"\"\""
        },
        {
          "filename": "lookatme/contrib/__init__.py",
          "status": "modified",
          "additions": 43,
          "deletions": 6,
          "patch": "@@ -8,41 +8,78 @@\n import contextlib\n \n \n+import lookatme.ascii_art\n from lookatme.exceptions import IgnoredByContrib\n+import lookatme.prompt\n from . import terminal\n from . import file_loader\n \n \n-CONTRIB_MODULES = [\n-    terminal,\n-    file_loader,\n-]\n+CONTRIB_MODULES = []\n \n \n-def load_contribs(contrib_names):\n+def validate_extension_mod(ext_name, ext_mod):\n+    \"\"\"Validate the extension, returns an array of warnings associated with the\n+    module\n+    \"\"\"\n+    res = []\n+    if not hasattr(ext_mod, \"user_warnings\"):\n+        res.append(\"'user_warnings' is missing. Extension is not able to \"\n+                   \"provide user warnings.\")\n+    else:\n+        res += ext_mod.user_warnings()\n+\n+    return res\n+\n+\n+def load_contribs(contrib_names, safe_contribs, ignore_load_failure=False):\n     \"\"\"Load all contrib modules specified by ``contrib_names``. These should\n     all be namespaced packages under the ``lookatmecontrib`` namespace. E.g.\n     ``lookatmecontrib.calendar`` would be an extension provided by a\n     contrib module, and would be added to an ``extensions`` list in a slide's\n     YAML header as ``calendar``.\n+\n+    ``safe_contribs`` is a set of contrib names that are manually provided\n+    by the user by the ``-e`` flag or env variable of extensions to auto-load.\n     \"\"\"\n     if contrib_names is None:\n         return\n \n     errors = []\n+    all_warnings = []\n     for contrib_name in contrib_names:\n         module_name = f\"lookatme.contrib.{contrib_name}\"\n         try:\n             mod = __import__(module_name, fromlist=[contrib_name])\n-            CONTRIB_MODULES.append(mod)\n         except Exception as e:\n+            if ignore_load_failure:\n+                continue\n             errors.append(str(e))\n+        else:\n+            if contrib_name not in safe_contribs:\n+                ext_warnings = validate_extension_mod(contrib_name, mod)\n+                if len(ext_warnings) > 0:\n+                    all_warnings.append((contrib_name, ext_warnings))\n+            CONTRIB_MODULES.append(mod)\n \n     if len(errors) > 0:\n         raise Exception(\n             \"Error loading one or more extensions:\\n\\n\" + \"\\n\".join(errors),\n         )\n \n+    if len(all_warnings) == 0:\n+        return\n+\n+    print(\"\\nExtension-provided user warnings:\")\n+    for ext_name, ext_warnings in all_warnings:\n+        print(\"\\n  {!r}:\\n\".format(ext_name))\n+        for ext_warning in ext_warnings:\n+            print(\"    * {}\".format(ext_warning))\n+    print(\"\")\n+\n+    if not lookatme.prompt.yes(\"Continue anyways?\"):\n+        exit(1)\n+\n \n def contrib_first(fn):\n     \"\"\"A decorator that allows contrib modules to override default behavior"
        },
        {
          "filename": "lookatme/contrib/file_loader.py",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -16,6 +16,19 @@\n from lookatme.exceptions import IgnoredByContrib\n \n \n+def user_warnings():\n+    \"\"\"Provide warnings to the user that loading this extension may cause\n+    shell commands specified in the markdown to be run.\n+    \"\"\"\n+    return [\n+        \"Code-blocks with a language starting with 'file' may cause shell\",\n+        \"  commands from the source markdown to be run if the 'transform'\",\n+        \"  field is set\",\n+        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/file_loader.html\",\n+        \"  for more details\",\n+    ]\n+\n+\n class YamlRender:\n     loads = lambda data: yaml.safe_load(data)\n     dumps = lambda data: yaml.safe_dump(data)"
        },
        {
          "filename": "lookatme/contrib/terminal.py",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -18,6 +18,18 @@\n import lookatme.config\n \n \n+def user_warnings():\n+    \"\"\"Provide warnings to the user that loading this extension may cause\n+    shell commands specified in the markdown to be run.\n+    \"\"\"\n+    return [\n+        \"Code-blocks with a language starting with 'terminal' will cause shell\",\n+        \"  commands from the source markdown to be run\",\n+        \"See https://lookatme.readthedocs.io/en/latest/builtin_extensions/terminal.html\",\n+        \"  for more details\",\n+    ]\n+\n+\n class YamlRender:\n     loads = lambda data: yaml.safe_load(data)\n     dumps = lambda data: yaml.safe_dump(data)"
        },
        {
          "filename": "lookatme/pres.py",
          "status": "modified",
          "additions": 47,
          "deletions": 4,
          "patch": "@@ -12,6 +12,7 @@\n import lookatme.config\n import lookatme.contrib\n from lookatme.parser import Parser\n+import lookatme.prompt\n import lookatme.themes\n import lookatme.tui\n from lookatme.utils import dict_deep_update\n@@ -21,7 +22,8 @@ class Presentation(object):\n     \"\"\"Defines a presentation\n     \"\"\"\n     def __init__(self, input_stream, theme, style_override=None, live_reload=False,\n-                 single_slide=False, preload_extensions=None):\n+                 single_slide=False, preload_extensions=None, safe=False,\n+                 no_ext_warn=False, ignore_ext_failure=False):\n         \"\"\"Creates a new Presentation\n \n         :param stream input_stream: An input stream from which to read the\n@@ -37,6 +39,10 @@ def __init__(self, input_stream, theme, style_override=None, live_reload=False,\n         self.live_reload = live_reload\n         self.tui = None\n         self.single_slide = single_slide\n+        self.safe = safe\n+        self.no_ext_warn = no_ext_warn\n+        self.ignore_ext_failure = ignore_ext_failure\n+        self.initial_load_complete = False\n \n         self.theme_mod = __import__(\"lookatme.themes.\" + theme, fromlist=[theme])\n \n@@ -46,6 +52,7 @@ def __init__(self, input_stream, theme, style_override=None, live_reload=False,\n             self.reload_thread.start()\n \n         self.reload(data=input_stream.read())\n+        self.initial_load_complete = True\n \n     def reload_watcher(self):\n         \"\"\"Watch for changes to the input filename, automatically reloading\n@@ -79,9 +86,24 @@ def reload(self, data=None):\n         parser = Parser(single_slide=self.single_slide)\n         self.meta, self.slides = parser.parse(data)\n \n-        all_exts = set(self.preload_extensions)\n-        all_exts |= set(self.meta.get(\"extensions\", []))\n-        lookatme.contrib.load_contribs(all_exts)\n+        # only load extensions once! Live editing does not support\n+        # auto-extension reloading\n+        if not self.initial_load_complete:\n+            safe_exts = set(self.preload_extensions)\n+            new_exts = set()\n+            # only load if running with safe=False\n+            if not self.safe:\n+                source_exts = set(self.meta.get(\"extensions\", []))\n+                new_exts = source_exts - safe_exts\n+                self.warn_exts(new_exts)\n+\n+            all_exts = safe_exts | new_exts\n+\n+            lookatme.contrib.load_contribs(\n+                all_exts,\n+                safe_exts,\n+                self.ignore_ext_failure,\n+            )\n \n         self.styles = lookatme.themes.ensure_defaults(self.theme_mod)\n         dict_deep_update(self.styles, self.meta.get(\"styles\", {}))\n@@ -91,6 +113,27 @@ def reload(self, data=None):\n             self.styles[\"style\"] = self.style_override\n \n         lookatme.config.STYLE = self.styles\n+        self.initial_load_complete = True\n+\n+    def warn_exts(self, exts):\n+        \"\"\"Warn about source-provided extensions that are to-be-loaded\n+        \"\"\"\n+        if len(exts) == 0 or self.no_ext_warn:\n+            return\n+\n+        warning = lookatme.ascii_art.WARNING\n+        print(\"\\n\".join([\"    \" + x for x in warning.split(\"\\n\")]))\n+\n+        print(\"New extensions required by {!r} are about to be loaded:\\n\".format(\n+            self.input_filename\n+        ))\n+        for ext in exts:\n+            print(\"  - {!r}\".format(\"lookatme.contrib.\" + ext))\n+        print(\"\")\n+\n+        if not lookatme.prompt.yes(\"Are you ok with attempting to load them?\"):\n+            print(\"Bailing due to unacceptance of source-required extensions\")\n+            exit(1)\n \n     def run(self, start_slide=0):\n         \"\"\"Run the presentation!"
        },
        {
          "filename": "lookatme/prompt.py",
          "status": "added",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -0,0 +1,10 @@\n+\"\"\"\n+Basic user-prompting helper functions\n+\"\"\"\n+\n+\n+def yes(msg):\n+    \"\"\"Prompt the user for a yes/no answer. Returns bool\n+    \"\"\"\n+    answer = input(\"{} (Y/N) \".format(msg))\n+    return answer.strip().lower() in [\"y\", \"yes\"]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 7,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c05abe1804d93254e9139039937eed43fb6b49ab",
            "date": "2023-01-24T14:24:56Z",
            "author_login": "d0c-s4vage"
          },
          {
            "sha": "55154e65f526a0a740d5a13e6a497c5c1e3b4345",
            "date": "2023-01-01T16:38:57Z",
            "author_login": "d0c-s4vage"
          },
          {
            "sha": "61398f9f736e4b2202826a43a6001bc9f36e7759",
            "date": "2022-12-30T15:50:22Z",
            "author_login": "d0c-s4vage"
          },
          {
            "sha": "7c8693aaf943987c1758cb5fffd2b54ed2332fd2",
            "date": "2022-12-30T04:36:20Z",
            "author_login": "d0c-s4vage"
          },
          {
            "sha": "6ec6b30996d56c5952dc6c9fd53322a985bc3ecf",
            "date": "2022-12-30T04:25:46Z",
            "author_login": "d0c-s4vage"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-78",
    "description": "In lookatme (python/pypi package) versions prior to 2.3.0, the package automatically loaded the built-in \"terminal\" and \"file_loader\" extensions. Users that use lookatme to render untrusted markdown may have malicious shell commands automatically run on their system. This is fixed in version 2.3.0. As a workaround, the `lookatme/contrib/terminal.py` and `lookatme/contrib/file_loader.py` files may be manually deleted. Additionally, it is always recommended to be aware of what is being rendered with lookatme.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-10-26T18:15:14.480",
    "last_modified": "2024-11-21T05:05:14.360",
    "fix_date": "2020-10-23T05:28:53Z"
  },
  "references": [
    {
      "url": "https://github.com/d0c-s4vage/lookatme/commit/72fe36b784b234548d49dae60b840c37f0eb8d84",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/d0c-s4vage/lookatme/pull/110",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/d0c-s4vage/lookatme/releases/tag/v2.3.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/d0c-s4vage/lookatme/security/advisories/GHSA-c84h-w6cr-5v8q",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/lookatme/#history",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/d0c-s4vage/lookatme/commit/72fe36b784b234548d49dae60b840c37f0eb8d84",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/d0c-s4vage/lookatme/pull/110",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/d0c-s4vage/lookatme/releases/tag/v2.3.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/d0c-s4vage/lookatme/security/advisories/GHSA-c84h-w6cr-5v8q",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/lookatme/#history",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.195395",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "lookatme",
    "owner": "d0c-s4vage",
    "created_at": "2019-11-29T00:28:28Z",
    "updated_at": "2025-01-06T21:54:30Z",
    "pushed_at": "2024-04-02T20:22:15Z",
    "size": 12717,
    "stars": 2149,
    "forks": 63,
    "open_issues": 37,
    "watchers": 2149,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.0-dev",
      "main"
    ],
    "languages": {
      "Python": 143286,
      "Shell": 7935
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:53:35.890320"
  }
}