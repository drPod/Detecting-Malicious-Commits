{
  "cve_id": "CVE-2020-15720",
  "github_data": {
    "repository": "dogtagpki/pki",
    "fix_commit": "50c23ec146ee9abf28c9de87a5f7787d495f0b72",
    "related_commits": [
      "50c23ec146ee9abf28c9de87a5f7787d495f0b72",
      "50c23ec146ee9abf28c9de87a5f7787d495f0b72"
    ],
    "patch_url": "https://github.com/dogtagpki/pki/commit/50c23ec146ee9abf28c9de87a5f7787d495f0b72.patch",
    "fix_commit_details": {
      "sha": "50c23ec146ee9abf28c9de87a5f7787d495f0b72",
      "commit_date": "2020-06-15T14:19:40Z",
      "author": {
        "login": "cipherboy",
        "type": "User",
        "stats": {
          "total_commits": 151,
          "average_weekly_commits": 0.2197962154294032,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 63
        }
      },
      "commit_message": {
        "title": "Enable certificate verification in PKIConnection",
        "length": 724,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 61,
        "additions": 58,
        "deletions": 3
      },
      "files": [
        {
          "filename": "base/common/python/pki/client.py",
          "status": "modified",
          "additions": 58,
          "deletions": 3,
          "patch": "@@ -25,11 +25,13 @@\n import functools\n import inspect\n import logging\n+import os\n import ssl\n import warnings\n \n import requests\n from requests import adapters\n+from requests.adapters import DEFAULT_POOLBLOCK, DEFAULT_POOLSIZE, DEFAULT_RETRIES\n try:\n     from requests.packages.urllib3.exceptions import InsecureRequestWarning\n except ImportError:\n@@ -55,8 +57,41 @@ def wrapper(self, *args, **kwargs):\n \n \n class SSLContextAdapter(adapters.HTTPAdapter):\n-    \"\"\"Custom SSLContext Adapter for requests\n     \"\"\"\n+    Custom SSLContext Adapter for requests\n+    \"\"\"\n+\n+    def __init__(self, pool_connections=DEFAULT_POOLSIZE,\n+                 pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,\n+                 pool_block=DEFAULT_POOLBLOCK, verify=True,\n+                 cert_paths=None):\n+        self.verify = verify\n+        self.cafiles = []\n+        self.capaths = []\n+\n+        cert_paths = cert_paths or []\n+\n+        if isinstance(cert_paths, str):\n+            cert_paths = [cert_paths]\n+\n+        for path in cert_paths:\n+            path = path and os.path.expanduser(path)\n+\n+            if os.path.isdir(path):\n+                self.capaths.append(path)\n+            elif os.path.exists(path):\n+                self.cafiles.append(path)\n+            else:\n+                logger.warning(\"cert_path missing; not used for validation: %s\",\n+                               path)\n+\n+        # adapters.HTTPAdapter.__init__ calls our init_poolmanager, which needs\n+        # our cafiles/capaths variables we set up above.\n+        super(SSLContextAdapter, self).__init__(pool_connections=pool_connections,\n+                                                pool_maxsize=pool_maxsize,\n+                                                max_retries=max_retries,\n+                                                pool_block=pool_block)\n+\n     def init_poolmanager(self, connections, maxsize,\n                          block=adapters.DEFAULT_POOLBLOCK, **pool_kwargs):\n         context = ssl.SSLContext(\n@@ -67,6 +102,23 @@ def init_poolmanager(self, connections, maxsize,\n         if getattr(context, \"post_handshake_auth\", None) is not None:\n             context.post_handshake_auth = True\n \n+        # Load from the system trust store when possible; per documentation\n+        # this call could silently fail and refuse to configure any\n+        # certificates. In this instance, the user should provide a\n+        # certificate manually.\n+        context.set_default_verify_paths()\n+\n+        # Load any specific certificate paths that have been specified during\n+        # adapter initialization.\n+        for cafile in self.cafiles:\n+            context.load_verify_locations(cafile=cafile)\n+        for capath in self.capaths:\n+            context.load_verify_locations(capath=capath)\n+\n+        if self.verify:\n+            # Enable certificate verification\n+            context.verify_mode = ssl.VerifyMode.CERT_REQUIRED  # pylint: disable=no-member\n+\n         pool_kwargs['ssl_context'] = context\n         return super().init_poolmanager(\n             connections, maxsize, block, **pool_kwargs\n@@ -81,7 +133,7 @@ class PKIConnection:\n \n     def __init__(self, protocol='http', hostname='localhost', port='8080',\n                  subsystem=None, accept='application/json',\n-                 trust_env=None, verify=False):\n+                 trust_env=None, verify=True, cert_paths=None):\n         \"\"\"\n         Set the parameters for a python-requests based connection to a\n         Dogtag subsystem.\n@@ -103,6 +155,9 @@ def __init__(self, protocol='http', hostname='localhost', port='8080',\n         :param verify: verify TLS/SSL connections and configure CA certs\n            (default: no)\n         :type verify: None, bool, str\n+        :param cert_paths: paths to CA certificates / directories in OpenSSL\n+          format. (default: None)\n+        :type cert_paths: None, str, list\n         :return: PKIConnection object.\n         \"\"\"\n \n@@ -123,7 +178,7 @@ def __init__(self, protocol='http', hostname='localhost', port='8080',\n             self.serverURI = self.rootURI\n \n         self.session = requests.Session()\n-        self.session.mount(\"https://\", SSLContextAdapter())\n+        self.session.mount(\"https://\", SSLContextAdapter(verify=verify, cert_paths=cert_paths))\n         self.session.trust_env = trust_env\n         self.session.verify = verify\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2817b436ebe906034ea7d1a9cc71539d21068518",
            "date": "2025-01-14T17:52:22Z",
            "author_login": "fmarco76"
          },
          {
            "sha": "aa3ba8daeb63f0c8fd259a1dfbb119eec842c4a1",
            "date": "2025-01-13T17:51:04Z",
            "author_login": "fmarco76"
          },
          {
            "sha": "25eeb6bc3a40b4d36471cff1da4c4faa4a35690d",
            "date": "2025-01-10T00:07:37Z",
            "author_login": "ladycfu"
          },
          {
            "sha": "53d9c84cf79ab093a92963bf3956034e492c022a",
            "date": "2025-01-10T00:05:14Z",
            "author_login": "ladycfu"
          },
          {
            "sha": "93b951811e497ea8481e900dcef5f9225d348c3f",
            "date": "2025-01-09T23:53:39Z",
            "author_login": "ladycfu"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-295",
    "description": "In Dogtag PKI through 10.8.3, the pki.client.PKIConnection class did not enable python-requests certificate validation. Since the verify parameter was hard-coded in all request functions, it was not possible to override the setting. As a result, tools making use of this class, such as the pki-server command, may have been vulnerable to Person-in-the-Middle attacks in certain non-localhost use cases. This is fixed in 10.9.0-b1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-07-14T14:15:17.713",
    "last_modified": "2024-11-21T05:06:06.093",
    "fix_date": "2020-06-15T14:19:40Z"
  },
  "references": [
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1855273",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dogtagpki/pki/commit/50c23ec146ee9abf28c9de87a5f7787d495f0b72",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dogtagpki/pki/compare/v10.9.0-a2...v10.9.0-b1",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1855273",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dogtagpki/pki/commit/50c23ec146ee9abf28c9de87a5f7787d495f0b72",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dogtagpki/pki/compare/v10.9.0-a2...v10.9.0-b1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:01.361437",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pki",
    "owner": "dogtagpki",
    "created_at": "2017-02-16T19:36:36Z",
    "updated_at": "2025-01-14T11:59:56Z",
    "pushed_at": "2025-01-14T10:49:43Z",
    "size": 64053,
    "stars": 388,
    "forks": 139,
    "open_issues": 971,
    "watchers": 388,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "DOGTAG_9_0_BRANCH",
      "DOGTAG_10_0_BRANCH",
      "DOGTAG_10_1_BRANCH",
      "DOGTAG_10_2_BRANCH",
      "DOGTAG_10_2_0_BRANCH",
      "DOGTAG_10_2_1_BRANCH",
      "DOGTAG_10_2_2_BRANCH",
      "DOGTAG_10_2_3_BRANCH",
      "DOGTAG_10_2_4_BRANCH",
      "DOGTAG_10_2_5_BRANCH",
      "DOGTAG_10_2_6_BRANCH",
      "DOGTAG_10_3_BRANCH",
      "DOGTAG_10_4_BRANCH",
      "DOGTAG_10_5_BRANCH",
      "DOGTAG_10_6_BRANCH",
      "master",
      "v10",
      "v10.7",
      "v10.8",
      "v10.9",
      "v10.10",
      "v10.11",
      "v10.12"
    ],
    "languages": {
      "Java": 24137420,
      "Python": 3134457,
      "Shell": 1071772,
      "C": 951256,
      "HTML": 861130,
      "JavaScript": 558695,
      "C++": 397405,
      "CSS": 288406,
      "CMake": 146059,
      "Makefile": 50365,
      "Dockerfile": 18417,
      "PLSQL": 4821,
      "eC": 1739,
      "Perl": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 870,
      "avg_commits_per_week": 16.73076923076923,
      "days_active_last_year": 186
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:06:33.324832"
  }
}