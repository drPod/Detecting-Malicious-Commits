{
  "cve_id": "CVE-2020-15852",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "cadfad870154e14f745ec845708bc17d166065f2",
    "related_commits": [
      "cadfad870154e14f745ec845708bc17d166065f2",
      "cadfad870154e14f745ec845708bc17d166065f2"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "cadfad870154e14f745ec845708bc17d166065f2",
      "commit_date": "2020-07-17T23:53:55Z",
      "author": {
        "login": "amluto",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "x86/ioperm: Fix io bitmap invalidation on Xen PV",
        "length": 704,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 55,
        "additions": 38,
        "deletions": 17
      },
      "files": [
        {
          "filename": "arch/x86/include/asm/io_bitmap.h",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -19,12 +19,28 @@ struct task_struct;\n void io_bitmap_share(struct task_struct *tsk);\n void io_bitmap_exit(struct task_struct *tsk);\n \n+static inline void native_tss_invalidate_io_bitmap(void)\n+{\n+\t/*\n+\t * Invalidate the I/O bitmap by moving io_bitmap_base outside the\n+\t * TSS limit so any subsequent I/O access from user space will\n+\t * trigger a #GP.\n+\t *\n+\t * This is correct even when VMEXIT rewrites the TSS limit\n+\t * to 0x67 as the only requirement is that the base points\n+\t * outside the limit.\n+\t */\n+\tthis_cpu_write(cpu_tss_rw.x86_tss.io_bitmap_base,\n+\t\t       IO_BITMAP_OFFSET_INVALID);\n+}\n+\n void native_tss_update_io_bitmap(void);\n \n #ifdef CONFIG_PARAVIRT_XXL\n #include <asm/paravirt.h>\n #else\n #define tss_update_io_bitmap native_tss_update_io_bitmap\n+#define tss_invalidate_io_bitmap native_tss_invalidate_io_bitmap\n #endif\n \n #else"
        },
        {
          "filename": "arch/x86/include/asm/paravirt.h",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -302,6 +302,11 @@ static inline void write_idt_entry(gate_desc *dt, int entry, const gate_desc *g)\n }\n \n #ifdef CONFIG_X86_IOPL_IOPERM\n+static inline void tss_invalidate_io_bitmap(void)\n+{\n+\tPVOP_VCALL0(cpu.invalidate_io_bitmap);\n+}\n+\n static inline void tss_update_io_bitmap(void)\n {\n \tPVOP_VCALL0(cpu.update_io_bitmap);"
        },
        {
          "filename": "arch/x86/include/asm/paravirt_types.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -141,6 +141,7 @@ struct pv_cpu_ops {\n \tvoid (*load_sp0)(unsigned long sp0);\n \n #ifdef CONFIG_X86_IOPL_IOPERM\n+\tvoid (*invalidate_io_bitmap)(void);\n \tvoid (*update_io_bitmap)(void);\n #endif\n "
        },
        {
          "filename": "arch/x86/kernel/paravirt.c",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -324,7 +324,8 @@ struct paravirt_patch_template pv_ops = {\n \t.cpu.swapgs\t\t= native_swapgs,\n \n #ifdef CONFIG_X86_IOPL_IOPERM\n-\t.cpu.update_io_bitmap\t= native_tss_update_io_bitmap,\n+\t.cpu.invalidate_io_bitmap\t= native_tss_invalidate_io_bitmap,\n+\t.cpu.update_io_bitmap\t\t= native_tss_update_io_bitmap,\n #endif\n \n \t.cpu.start_context_switch\t= paravirt_nop,"
        },
        {
          "filename": "arch/x86/kernel/process.c",
          "status": "modified",
          "additions": 2,
          "deletions": 16,
          "patch": "@@ -322,20 +322,6 @@ void arch_setup_new_exec(void)\n }\n \n #ifdef CONFIG_X86_IOPL_IOPERM\n-static inline void tss_invalidate_io_bitmap(struct tss_struct *tss)\n-{\n-\t/*\n-\t * Invalidate the I/O bitmap by moving io_bitmap_base outside the\n-\t * TSS limit so any subsequent I/O access from user space will\n-\t * trigger a #GP.\n-\t *\n-\t * This is correct even when VMEXIT rewrites the TSS limit\n-\t * to 0x67 as the only requirement is that the base points\n-\t * outside the limit.\n-\t */\n-\ttss->x86_tss.io_bitmap_base = IO_BITMAP_OFFSET_INVALID;\n-}\n-\n static inline void switch_to_bitmap(unsigned long tifp)\n {\n \t/*\n@@ -346,7 +332,7 @@ static inline void switch_to_bitmap(unsigned long tifp)\n \t * user mode.\n \t */\n \tif (tifp & _TIF_IO_BITMAP)\n-\t\ttss_invalidate_io_bitmap(this_cpu_ptr(&cpu_tss_rw));\n+\t\ttss_invalidate_io_bitmap();\n }\n \n static void tss_copy_io_bitmap(struct tss_struct *tss, struct io_bitmap *iobm)\n@@ -380,7 +366,7 @@ void native_tss_update_io_bitmap(void)\n \tu16 *base = &tss->x86_tss.io_bitmap_base;\n \n \tif (!test_thread_flag(TIF_IO_BITMAP)) {\n-\t\ttss_invalidate_io_bitmap(tss);\n+\t\tnative_tss_invalidate_io_bitmap();\n \t\treturn;\n \t}\n "
        },
        {
          "filename": "arch/x86/xen/enlighten_pv.c",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -870,6 +870,17 @@ static void xen_load_sp0(unsigned long sp0)\n }\n \n #ifdef CONFIG_X86_IOPL_IOPERM\n+static void xen_invalidate_io_bitmap(void)\n+{\n+\tstruct physdev_set_iobitmap iobitmap = {\n+\t\t.bitmap = 0,\n+\t\t.nr_ports = 0,\n+\t};\n+\n+\tnative_tss_invalidate_io_bitmap();\n+\tHYPERVISOR_physdev_op(PHYSDEVOP_set_iobitmap, &iobitmap);\n+}\n+\n static void xen_update_io_bitmap(void)\n {\n \tstruct physdev_set_iobitmap iobitmap;\n@@ -1099,6 +1110,7 @@ static const struct pv_cpu_ops xen_cpu_ops __initconst = {\n \t.load_sp0 = xen_load_sp0,\n \n #ifdef CONFIG_X86_IOPL_IOPERM\n+\t.invalidate_io_bitmap = xen_invalidate_io_bitmap,\n \t.update_io_bitmap = xen_update_io_bitmap,\n #endif\n \t.io_delay = xen_io_delay,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-276",
    "description": "An issue was discovered in the Linux kernel 5.5 through 5.7.9, as used in Xen through 4.13.x for x86 PV guests. An attacker may be granted the I/O port permissions of an unrelated task. This occurs because tss_invalidate_io_bitmap mishandling causes a loss of synchronization between the I/O bitmaps of TSS and Xen, aka CID-cadfad870154.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-07-20T19:15:11.397",
    "last_modified": "2024-11-21T05:06:18.867",
    "fix_date": "2020-07-17T23:53:55Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2020/07/21/2",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://xenbits.xen.org/xsa/advisory-329.html",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cadfad870154e14f745ec845708bc17d166065f2",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/cadfad870154e14f745ec845708bc17d166065f2",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20200810-0001/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2020/07/21/2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://xenbits.xen.org/xsa/advisory-329.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cadfad870154e14f745ec845708bc17d166065f2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/cadfad870154e14f745ec845708bc17d166065f2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20200810-0001/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:01.371534",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-26T06:54:23Z",
    "pushed_at": "2025-01-26T01:00:03Z",
    "size": 5386838,
    "stars": 186472,
    "forks": 54875,
    "open_issues": 441,
    "watchers": 186472,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1331921668,
      "Assembly": 9611819,
      "Shell": 5108035,
      "Python": 2992085,
      "Makefile": 2706967,
      "Perl": 1253833,
      "Rust": 816450,
      "Roff": 202277,
      "C++": 173994,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71397,
      "Awk": 69555,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10902,
      "M4": 3329,
      "MATLAB": 2482,
      "Clojure": 2442,
      "sed": 2433,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 48379,
      "avg_commits_per_week": 930.3653846153846,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:34:00.817711"
  }
}