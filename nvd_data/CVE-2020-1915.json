{
  "cve_id": "CVE-2020-1915",
  "github_data": {
    "repository": "facebook/hermes",
    "fix_commit": "8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0",
    "related_commits": [
      "8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0",
      "8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0"
    ],
    "patch_url": "https://github.com/facebook/hermes/commit/8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0.patch",
    "fix_commit_details": {
      "sha": "8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0",
      "commit_date": "2020-09-26T03:52:54Z",
      "author": {
        "login": "mhorowitz",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Handle set where internalSetter and Proxy are both true",
        "length": 431,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 44,
        "additions": 29,
        "deletions": 15
      },
      "files": [
        {
          "filename": "lib/VM/JSObject.cpp",
          "status": "modified",
          "additions": 20,
          "deletions": 15,
          "patch": "@@ -1699,6 +1699,24 @@ CallResult<bool> JSObject::putComputedWithReceiver_RJS(\n     if (LLVM_UNLIKELY(\n             desc.flags.internalSetter || receiverHandle->isHostObject() ||\n             receiverHandle->isProxyObject())) {\n+      // If putComputed is called on a proxy whose target's prototype\n+      // is an array with a propname of 'length', then internalSetter\n+      // will be true, and the receiver will be a proxy.  In that case,\n+      // proxy wins.\n+      if (receiverHandle->isProxyObject()) {\n+        if (*descDefinedRes) {\n+          dpf.setValue = 1;\n+        } else {\n+          dpf = DefinePropertyFlags::getDefaultNewPropertyFlags();\n+        }\n+        return JSProxy::defineOwnProperty(\n+            receiverHandle,\n+            runtime,\n+            nameValPrimitiveHandle,\n+            dpf,\n+            valueHandle,\n+            opFlags);\n+      }\n       SymbolID id{};\n       LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);\n       if (desc.flags.internalSetter) {\n@@ -1709,23 +1727,10 @@ CallResult<bool> JSObject::putComputedWithReceiver_RJS(\n             desc.castToNamedPropertyDescriptorRef(),\n             valueHandle,\n             opFlags);\n-      } else if (receiverHandle->isHostObject()) {\n-        return vmcast<HostObject>(receiverHandle.get())->set(id, *valueHandle);\n       }\n       assert(\n-          receiverHandle->isProxyObject() && \"descriptor flags are impossible\");\n-      if (*descDefinedRes) {\n-        dpf.setValue = 1;\n-      } else {\n-        dpf = DefinePropertyFlags::getDefaultNewPropertyFlags();\n-      }\n-      return JSProxy::defineOwnProperty(\n-          receiverHandle,\n-          runtime,\n-          nameValPrimitiveHandle,\n-          dpf,\n-          valueHandle,\n-          opFlags);\n+          receiverHandle->isHostObject() && \"descriptor flags are impossible\");\n+      return vmcast<HostObject>(receiverHandle.get())->set(id, *valueHandle);\n     }\n   }\n "
        },
        {
          "filename": "test/hermes/proxy.js",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -2125,5 +2125,14 @@ checkDeep({...f})(_ => ({a:1, b:2}))\n // uses fast array access (this will trip an assert otherwise)\n new Proxy([], {}).unshift(0);\n \n+// If putComputed is called on a proxy whose target's prototype is an\n+// array with a propname of 'length', then internalSetter will be\n+// true, and the receiver will be a proxy.  In that case, proxy needs\n+// to win; the behavior may assert or be UB otherwise.\n+var p = new Proxy(Object.create([]), {});\n+// using String() forces putComputed\n+p[String('length')] = 0x123;\n+p[0xABC] = 1111;\n+\n print('done');\n // CHECK-LABEL: done"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a942ef374897d85da38e9c8904574f8376555388",
            "date": "2025-01-09T13:15:51Z",
            "author_login": "tsaichien"
          },
          {
            "sha": "9f0b77fc801b1bed97e6097776a6baa1c4ed2e00",
            "date": "2025-01-09T13:15:51Z",
            "author_login": "tsaichien"
          },
          {
            "sha": "c995d195adaf07811cf35d81423a5a4afa7d60cf",
            "date": "2025-01-09T13:15:51Z",
            "author_login": "tsaichien"
          },
          {
            "sha": "e08fb5fc02177d55ca13fd71324a0e94e33ffb76",
            "date": "2025-01-09T13:15:51Z",
            "author_login": "tsaichien"
          },
          {
            "sha": "a49b895b12e3a9d6cfa79204daa480dcc831cbe0",
            "date": "2025-01-08T16:47:41Z",
            "author_login": "SamChou19815"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-125",
    "description": "An out-of-bounds read in the JavaScript Interpreter in Facebook Hermes prior to commit 8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0 allows attackers to cause a denial of service attack or possible further memory corruption via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-10-26T21:15:12.193",
    "last_modified": "2024-11-21T05:11:36.263",
    "fix_date": "2020-09-26T03:52:54Z"
  },
  "references": [
    {
      "url": "https://github.com/facebook/hermes/commit/8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0",
      "source": "cve-assign@fb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.facebook.com/security/advisories/cve-2020-1915",
      "source": "cve-assign@fb.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/facebook/hermes/commit/8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.facebook.com/security/advisories/cve-2020-1915",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.196202",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "hermes",
    "owner": "facebook",
    "created_at": "2018-10-22T19:13:00Z",
    "updated_at": "2025-01-13T03:07:27Z",
    "pushed_at": "2025-01-13T14:55:56Z",
    "size": 98978,
    "stars": 10032,
    "forks": 648,
    "open_issues": 161,
    "watchers": 10032,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "gh-pages",
      "main"
    ],
    "languages": {
      "C++": 10937781,
      "JavaScript": 7932464,
      "Rust": 1201532,
      "Python": 337453,
      "Java": 319660,
      "TypeScript": 184977,
      "Objective-C++": 113458,
      "CMake": 113065,
      "C": 41344,
      "Shell": 38189,
      "Swift": 22129,
      "NASL": 4993,
      "Ruby": 3189,
      "DTrace": 574,
      "Objective-C": 303,
      "D": 225
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:50:37.887799"
  }
}