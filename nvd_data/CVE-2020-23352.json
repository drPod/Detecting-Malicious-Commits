{
  "cve_id": "CVE-2020-23352",
  "github_data": {
    "repository": "zblogcn/zblogphp",
    "fix_commit": "a67607fc984f976d6b36b8870dffaabd9d6c9d5e",
    "related_commits": [
      "a67607fc984f976d6b36b8870dffaabd9d6c9d5e",
      "a67607fc984f976d6b36b8870dffaabd9d6c9d5e"
    ],
    "patch_url": "https://github.com/zblogcn/zblogphp/commit/a67607fc984f976d6b36b8870dffaabd9d6c9d5e.patch",
    "fix_commit_details": {
      "sha": "a67607fc984f976d6b36b8870dffaabd9d6c9d5e",
      "commit_date": "2020-05-21T09:54:45Z",
      "author": {
        "login": "rainbowsoft",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "hash_equals\u51fd\u6570\u6dfb\u52a0\u53ca\u5176\u5e94\u7528;CloseTags\u51fd\u6570\u8fdb\u884c\u4e86\u4fee\u6b63;",
        "length": 37,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 96,
        "additions": 63,
        "deletions": 33
      },
      "files": [
        {
          "filename": "phpcs.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -42,6 +42,7 @@\n \t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.rrmdir.Found\" />\n \t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.gzdecode.Found\" />\n \t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.array_replace_recursive.Found\" />\n+\t\t<exclude name=\"PHPCompatibility.FunctionUse.NewFunctions.hash_equals.Found\" />\n \t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.PHP_VERSION_ID.Found\" />\n \t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.FNM_PATHNAME.Found\" />\n \t\t<exclude name=\"PHPCompatibility.Constants.NewConstants.FNM_NOESCAPE.Found\" />"
        },
        {
          "filename": "zb_system/function/c_system_common.php",
          "status": "modified",
          "additions": 10,
          "deletions": 30,
          "patch": "@@ -1218,42 +1218,22 @@ function TransferHTML($source, $param)\n  */\n function CloseTags($html)\n {\n-    // strip fraction of open or close tag from end (e.g. if we take first x characters, we might cut off a tag at the end!)\n-    $html = preg_replace('/<[^>]*$/', '', $html); // ending with fraction of open tag\n-\n-    // put open tags into an array\n-    preg_match_all('#<([a-z]+)(?: .*)?(?<![/|/ ])>#iU', $html, $result);\n-    $opentags = $result[1];\n-\n-    // put all closed tags into an array\n+    preg_match_all('#<(?!meta|img|br|hr|input\\b)\\b([a-z]+)(?: .*)?(?<![/|/ ])>#iU', $html, $result);\n+    $openedtags = $result[1];\n     preg_match_all('#</([a-z]+)>#iU', $html, $result);\n-    $closetags = $result[1];\n-\n-    $len_opened = count($opentags);\n-\n-    // if all tags are closed, we can return\n-    if (count($closetags) == $len_opened) {\n+    $closedtags = $result[1];\n+    $len_opened = count($openedtags);\n+    if (count($closedtags) == $len_opened) {\n         return $html;\n     }\n-\n-    // close tags in reverse order that they were opened\n-    $opentags = array_reverse($opentags);\n-\n-    // self closing tags\n-    $sc = array('br', 'input', 'img', 'hr', 'meta', 'link');\n-    // ,'frame','iframe','param','area','base','basefont','col'\n-    // should not skip tags that can have content inside!\n-\n-    for ($i = 0; $i < $len_opened; $i++) {\n-        $ot = strtolower($opentags[$i]);\n-\n-        if (!in_array($opentags[$i], $closetags) && !in_array($ot, $sc)) {\n-            $html .= '</' . $opentags[$i] . '>';\n+    $openedtags = array_reverse($openedtags);\n+    for ($i=0; $i < $len_opened; $i++) {\n+        if (!in_array($openedtags[$i], $closedtags)) {\n+            $html .= '</'.$openedtags[$i].'>';\n         } else {\n-            unset($closetags[array_search($opentags[$i], $closetags)]);\n+            unset($closedtags[array_search($openedtags[$i], $closedtags)]);\n         }\n     }\n-\n     return $html;\n }\n "
        },
        {
          "filename": "zb_system/function/c_system_compat.php",
          "status": "modified",
          "additions": 50,
          "deletions": 1,
          "patch": "@@ -446,8 +446,57 @@ function recurse($array, $array1)\n                 $array = recurse($array, $args[$i]);\n             }\n         }\n-\n         return $array;\n     }\n \n }\n+\n+\n+if (!function_exists('hash_equals')) {\n+\n+    /**\n+     * Timing attack safe string comparison\n+     *\n+     * Compares two strings using the same time whether they're equal or not.\n+     * This function should be used to mitigate timing attacks; for instance, when testing crypt() password hashes.\n+     *\n+     * @param string $known_string The string of known length to compare against\n+     * @param string $user_string The user-supplied string\n+     * @return boolean Returns TRUE when the two strings are equal, FALSE otherwise.\n+     */\n+    function hash_equals($known_string, $user_string)\n+    {\n+        if (func_num_args() !== 2) {\n+            // handle wrong parameter count as the native implentation\n+            trigger_error('hash_equals() expects exactly 2 parameters, ' . func_num_args() . ' given', E_USER_WARNING);\n+            return null;\n+        }\n+        if (is_string($known_string) !== true) {\n+            trigger_error('hash_equals(): Expected known_string to be a string, ' . gettype($known_string) . ' given', E_USER_WARNING);\n+            return false;\n+        }\n+        $known_string_len = strlen($known_string);\n+        $user_string_type_error = 'hash_equals(): Expected user_string to be a string, ' . gettype($user_string) . ' given'; // prepare wrong type error message now to reduce the impact of string concatenation and the gettype call\n+        if (is_string($user_string) !== true) {\n+            trigger_error($user_string_type_error, E_USER_WARNING);\n+            // prevention of timing attacks might be still possible if we handle $user_string as a string of diffent length (the trigger_error() call increases the execution time a bit)\n+            $user_string_len = strlen($user_string);\n+            $user_string_len = $known_string_len + 1;\n+        } else {\n+            $user_string_len = $known_string_len + 1;\n+            $user_string_len = strlen($user_string);\n+        }\n+        if ($known_string_len !== $user_string_len) {\n+            $res = $known_string ^ $known_string; // use $known_string instead of $user_string to handle strings of diffrent length.\n+            $ret = 1; // set $ret to 1 to make sure false is returned\n+        } else {\n+            $res = $known_string ^ $user_string;\n+            $ret = 0;\n+        }\n+        for ($i = strlen($res) - 1; $i >= 0; $i--) {\n+            $ret |= ord($res[$i]);\n+        }\n+        return $ret === 0;\n+    }\n+\n+}"
        },
        {
          "filename": "zb_system/function/lib/zblogphp.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1316,7 +1316,7 @@ public function Verify_Final($name, $password, &$member = null)\n         }\n         $m = $this->GetMemberByName($name);\n         if ($m->ID != null) {\n-            if (strcasecmp($m->Password, $password) == 0) {\n+            if (hash_equals($m->Password, $password) === true) {\n                 $member = $m;\n \n                 return true;"
        },
        {
          "filename": "zb_users/plugin/passwordvisit/include.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -31,7 +31,7 @@ function passwordvisit_input_password(&$template)\n     if (isset($_POST['password']) && $_POST['password'] != '') {\n         $article = $template->GetTags('article');\n         if ($article->Metas->passwordvisit_password != '') {\n-            if (GetVars('password', 'POST') == $article->Metas->passwordvisit_password) {\n+            if (GetVars('password', 'POST') === $article->Metas->passwordvisit_password) {\n                 return;\n             } else {\n                 echo '<script type=\"text/javascript\">alert(\"\u5bc6\u7801\u9519\u8bef\uff0c\u8bf7\u91cd\u65b0\u8f93\u5165\uff01\");window.location=\"' . $article->Url . '\";</script>';"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a239218821627be3eb9ed5e141b75d136bf602f5",
            "date": "2025-01-02T08:01:38Z",
            "author_login": "rainbowsoft"
          },
          {
            "sha": "1f8f75a3516196a5b20c6790738ea260e56328b5",
            "date": "2024-12-23T13:33:47Z",
            "author_login": "rainbowsoft"
          },
          {
            "sha": "2ccde3bae1d7b1b63438282f02a09439d6a8d6c7",
            "date": "2024-12-23T09:55:03Z",
            "author_login": "rainbowsoft"
          },
          {
            "sha": "070db96bb58cc0ae8b63be5d3e6e379d8f2b9ddd",
            "date": "2024-12-20T05:40:56Z",
            "author_login": "rainbowsoft"
          },
          {
            "sha": "0e171d4aa25dfe42d9a400d7e7907e10b7a460cc",
            "date": "2024-12-20T05:40:29Z",
            "author_login": "rainbowsoft"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": null,
    "description": "Z-BlogPHP 1.6.0 Valyria is affected by incorrect access control. PHP loose comparison and a magic hash can be used to bypass authentication. zb_user/plugin/passwordvisit/include.php:passwordvisit_input_password() uses loose comparison to authenticate, which can be bypassed via magic hash values.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-01-27T16:15:12.717",
    "last_modified": "2024-11-21T05:13:46.373",
    "fix_date": "2020-05-21T09:54:45Z"
  },
  "references": [
    {
      "url": "https://github.com/zblogcn/zblogphp/commit/a67607fc984f976d6b36b8870dffaabd9d6c9d5e",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zblogcn/zblogphp/commit/a67607fc984f976d6b36b8870dffaabd9d6c9d5e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:13.171109",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "zblogphp",
    "owner": "zblogcn",
    "created_at": "2014-09-15T01:46:16Z",
    "updated_at": "2025-01-10T07:48:17Z",
    "pushed_at": "2025-01-02T08:01:46Z",
    "size": 55071,
    "stars": 823,
    "forks": 258,
    "open_issues": 28,
    "watchers": 823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 2931540,
      "HTML": 1570281,
      "CSS": 586709,
      "JavaScript": 520475,
      "Hack": 245096,
      "Less": 95444,
      "Batchfile": 58
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:44:31.807091"
  }
}