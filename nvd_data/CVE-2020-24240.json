{
  "cve_id": "CVE-2020-24240",
  "github_data": {
    "repository": "akimd/bison",
    "fix_commit": "be95a4fe2951374676efc9454ffee8638faaf68d",
    "related_commits": [
      "be95a4fe2951374676efc9454ffee8638faaf68d",
      "be95a4fe2951374676efc9454ffee8638faaf68d"
    ],
    "patch_url": "https://github.com/akimd/bison/commit/be95a4fe2951374676efc9454ffee8638faaf68d.patch",
    "fix_commit_details": {
      "sha": "be95a4fe2951374676efc9454ffee8638faaf68d",
      "commit_date": "2020-07-28T16:51:30Z",
      "author": {
        "login": "akimd",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "scanner: don't crash on strings containing a NUL byte",
        "length": 403,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 62,
        "additions": 50,
        "deletions": 12
      },
      "files": [
        {
          "filename": "THANKS",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -185,6 +185,7 @@ Simon Sobisch             simonsobisch@web.de\n Stefano Lattarini         stefano.lattarini@gmail.com\n Stephen Cameron           stephenmcameron@gmail.com\n Steve Murphy              murf@parsetree.com\n+Suhwan Song               prada960808@gmail.com\n Sum Wu                    sum@geekhouse.org\n Th\u00e9ophile Ranquet         theophile.ranquet@gmail.com\n Thiru Ramakrishnan        thiru.ramakrishnan@gmail.com"
        },
        {
          "filename": "src/flex-scanner.h",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -112,7 +112,15 @@ static struct obstack obstack_for_string;\n # define STRING_1GROW(Char)                     \\\n   obstack_1grow (&obstack_for_string, Char)\n \n-# define STRING_FREE()                                  \\\n+# ifdef NDEBUG\n+#  define STRING_FREE()                                 \\\n   obstack_free (&obstack_for_string, last_string)\n+# else\n+#  define STRING_FREE()                                  \\\n+  do {                                                   \\\n+    obstack_free (&obstack_for_string, last_string);     \\\n+    last_string = NULL;                                  \\\n+  } while (0)\n+#endif\n \n #endif"
        },
        {
          "filename": "src/scan-gram.l",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -403,6 +403,7 @@ eqopt    ({sp}=)?\n {\n   \\0         {\n     complain (loc, complaint, _(\"invalid null character\"));\n+    STRING_FINISH ();\n     STRING_FREE ();\n     return GRAM_error;\n   }\n@@ -599,7 +600,6 @@ eqopt    ({sp}=)?\n     STRING_FINISH ();\n     BEGIN INITIAL;\n     loc->start = token_start;\n-    val->CHAR = last_string[0];\n \n     if (last_string[0] == '\\0')\n       {\n@@ -615,6 +615,7 @@ eqopt    ({sp}=)?\n       }\n     else\n       {\n+        val->CHAR = last_string[0];\n         STRING_FREE ();\n         return CHAR;\n       }"
        },
        {
          "filename": "tests/input.at",
          "status": "modified",
          "additions": 38,
          "deletions": 10,
          "patch": "@@ -1,4 +1,4 @@\n-# Checking the Bison scanner.                    -*- Autotest -*-\n+# Checking the Bison reader.                    -*- Autotest -*-\n \n # Copyright (C) 2002-2015, 2018-2020 Free Software Foundation, Inc.\n \n@@ -78,10 +78,13 @@ AT_CLEANUP\n ## Invalid inputs.  ##\n ## ---------------- ##\n \n+# The truly bad guys no human would write, but easily uncovered by\n+# fuzzers.\n AT_SETUP([Invalid inputs])\n \n AT_DATA([input.y],\n [[\\000\\001\\002\\377?\n+\"\\000\"\n %%\n ?\n default: 'a' }\n@@ -92,16 +95,41 @@ default: 'a' }\n ]])\n AT_PERL_REQUIRE([[-pi -e 's/\\\\(\\d{3})/chr(oct($1))/ge' input.y]])\n \n-AT_BISON_CHECK([input.y], [1], [],\n+AT_BISON_CHECK([-fcaret input.y], [1], [], [stderr])\n+\n+# Autotest's diffing, when there are NUL bytes, just reports \"binary\n+# files differ\".  So don't leave NUL bytes.\n+AT_PERL_CHECK([[-p -e 's{([\\0\\377])}{sprintf \"\\\\x%02x\", ord($1)}ge' stderr]], [],\n [[input.y:1.1-2: error: invalid characters: '\\0\\001\\002\\377?'\n-input.y:3.1: error: invalid character: '?'\n-input.y:4.14: error: invalid character: '}'\n-input.y:5.1: error: invalid character: '%'\n-input.y:5.2: error: invalid character: '&'\n-input.y:6.1-17: error: invalid directive: '%a-does-not-exist'\n-input.y:7.1: error: invalid character: '%'\n-input.y:7.2: error: invalid character: '-'\n-input.y:8.1-9.0: error: missing '%}' at end of file\n+    1 | \\x00\u0001\u0002\\xff?\n+      | ^~\n+input.y:2.2: error: invalid null character\n+    2 | \"\\x00\"\n+      |  ^\n+input.y:4.1: error: invalid character: '?'\n+    4 | ?\n+      | ^\n+input.y:5.14: error: invalid character: '}'\n+    5 | default: 'a' }\n+      |              ^\n+input.y:6.1: error: invalid character: '%'\n+    6 | %&\n+      | ^\n+input.y:6.2: error: invalid character: '&'\n+    6 | %&\n+      |  ^\n+input.y:7.1-17: error: invalid directive: '%a-does-not-exist'\n+    7 | %a-does-not-exist\n+      | ^~~~~~~~~~~~~~~~~\n+input.y:8.1: error: invalid character: '%'\n+    8 | %-\n+      | ^\n+input.y:8.2: error: invalid character: '-'\n+    8 | %-\n+      |  ^\n+input.y:9.1-10.0: error: missing '%}' at end of file\n+    9 | %{\n+      | ^~\n ]])\n \n AT_CLEANUP"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "25b3d0e1a3f97a33615099e4b211f3953990c203",
            "date": "2022-09-20T06:19:02Z",
            "author_login": "akimd"
          },
          {
            "sha": "de3041b69a72f7a027f20082d8c1eb605d01f9dd",
            "date": "2022-09-20T05:15:48Z",
            "author_login": "akimd"
          },
          {
            "sha": "0faf3719926defc459c10b0a8d04d6a29c47a53f",
            "date": "2022-09-19T17:09:20Z",
            "author_login": "adelavais"
          },
          {
            "sha": "be4528096ec05f0d58bd9ff53a293e1ec3193a85",
            "date": "2022-09-19T13:12:39Z",
            "author_login": "adelavais"
          },
          {
            "sha": "c0258915474496874318f4767ba6ebcc1e9471f0",
            "date": "2022-09-13T06:25:59Z",
            "author_login": "akimd"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-416",
    "description": "GNU Bison before 3.7.1 has a use-after-free in _obstack_free in lib/obstack.c (called from gram_lex) when a '\\0' byte is encountered. NOTE: there is a risk only if Bison is used with untrusted input, and the observed bug happens to cause unsafe behavior with a specific compiler/architecture. The bug report was intended to show that a crash may occur in Bison itself, not that a crash may occur in code that is generated by Bison.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-08-25T14:15:16.543",
    "last_modified": "2024-11-21T05:14:32.130",
    "fix_date": "2020-07-28T16:51:30Z"
  },
  "references": [
    {
      "url": "https://github.com/akimd/bison/commit/be95a4fe2951374676efc9454ffee8638faaf68d",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/akimd/bison/compare/v3.7...v3.7.1",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.gnu.org/r/bug-bison/2020-07/msg00051.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/akimd/bison/commit/be95a4fe2951374676efc9454ffee8638faaf68d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/akimd/bison/compare/v3.7...v3.7.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.gnu.org/r/bug-bison/2020-07/msg00051.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:03.807764",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bison",
    "owner": "akimd",
    "created_at": "2018-09-03T13:33:50Z",
    "updated_at": "2025-01-10T09:33:21Z",
    "pushed_at": "2022-10-25T16:13:18Z",
    "size": 18803,
    "stars": 337,
    "forks": 91,
    "open_issues": 19,
    "watchers": 337,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1166149,
      "M4": 215919,
      "C++": 208717,
      "Shell": 68971,
      "XSLT": 58297,
      "Perl": 46648,
      "Java": 45349,
      "Makefile": 30439,
      "Python": 3388,
      "Ruby": 2522,
      "CSS": 1862
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:29:22.286980"
  }
}