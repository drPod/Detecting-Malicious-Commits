{
  "cve_id": "CVE-2020-24711",
  "github_data": {
    "repository": "gophish/gophish",
    "fix_commit": "6df62e85fd60f0931d3c8bfdb13b436a961bc9b6",
    "related_commits": [
      "6df62e85fd60f0931d3c8bfdb13b436a961bc9b6",
      "6df62e85fd60f0931d3c8bfdb13b436a961bc9b6"
    ],
    "patch_url": "https://github.com/gophish/gophish/commit/6df62e85fd60f0931d3c8bfdb13b436a961bc9b6.patch",
    "fix_commit_details": {
      "sha": "6df62e85fd60f0931d3c8bfdb13b436a961bc9b6",
      "commit_date": "2020-08-20T15:39:23Z",
      "author": {
        "login": "jordan-wright",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Added a simple Content-Security-Policy to mitigate clickjacking attempts.",
        "length": 73,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 29,
        "additions": 28,
        "deletions": 1
      },
      "files": [
        {
          "filename": "controllers/route.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -155,7 +155,7 @@ func (as *AdminServer) registerRoutes() {\n \t\tcsrf.FieldName(\"csrf_token\"),\n \t\tcsrf.Secure(as.config.UseTLS))\n \tadminHandler := csrfHandler(router)\n-\tadminHandler = mid.Use(adminHandler.ServeHTTP, mid.CSRFExceptions, mid.GetContext)\n+\tadminHandler = mid.Use(adminHandler.ServeHTTP, mid.CSRFExceptions, mid.GetContext, mid.ApplySecurityHeaders)\n \n \t// Setup GZIP compression\n \tgzipWrapper, _ := gziphandler.NewGzipLevelHandler(gzip.BestCompression)"
        },
        {
          "filename": "middleware/middleware.go",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -176,6 +176,17 @@ func RequirePermission(perm string) func(http.Handler) http.HandlerFunc {\n \t}\n }\n \n+// ApplySecurityHeaders applies various security headers according to best-\n+// practices.\n+func ApplySecurityHeaders(next http.Handler) http.HandlerFunc {\n+\treturn func(w http.ResponseWriter, r *http.Request) {\n+\t\tcsp := \"frame-ancestors 'none';\"\n+\t\tw.Header().Set(\"Content-Security-Policy\", csp)\n+\t\tw.Header().Set(\"X-Frame-Options\", \"DENY\")\n+\t\tnext.ServeHTTP(w, r)\n+\t}\n+}\n+\n // JSONError returns an error in JSON format with the given\n // status code and message\n func JSONError(w http.ResponseWriter, c int, m string) {"
        },
        {
          "filename": "middleware/middleware_test.go",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -181,3 +181,19 @@ func TestPasswordResetRequired(t *testing.T) {\n \t\tt.Fatalf(\"incorrect location header received. expected %s got %s\", expectedLocation, gotLocation)\n \t}\n }\n+\n+func TestApplySecurityHeaders(t *testing.T) {\n+\texpected := map[string]string{\n+\t\t\"Content-Security-Policy\": \"frame-ancestors 'none';\",\n+\t\t\"X-Frame-Options\":         \"DENY\",\n+\t}\n+\treq := httptest.NewRequest(http.MethodGet, \"/\", nil)\n+\tresponse := httptest.NewRecorder()\n+\tApplySecurityHeaders(successHandler).ServeHTTP(response, req)\n+\tfor header, value := range expected {\n+\t\tgot := response.Header().Get(header)\n+\t\tif got != value {\n+\t\t\tt.Fatalf(\"incorrect security header received for %s: expected %s got %s\", header, value, got)\n+\t\t}\n+\t}\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "95618469799295e2c0fec980805a2dfbb818816b",
            "date": "2024-09-23T04:24:43Z",
            "author_login": "jordan-wright"
          },
          {
            "sha": "908886f2cd9567ddd0523d43532e33e4df8fd200",
            "date": "2024-09-23T03:53:08Z",
            "author_login": "Caetan"
          },
          {
            "sha": "8e79294413932fa302212d8e785b281fb0f8896d",
            "date": "2023-09-15T14:45:30Z",
            "author_login": "glennzw"
          },
          {
            "sha": "ac9e6a719004a1cf08cf1585a996372dbd301c9f",
            "date": "2023-08-23T02:03:39Z",
            "author_login": "rpsteinbrueck"
          },
          {
            "sha": "04f0fb6dfd9498f68fed145e1c3fbe515697cf0a",
            "date": "2023-08-23T01:50:03Z",
            "author_login": "wmnnd"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-1021",
    "description": "The Reset button on the Account Settings page in Gophish before 0.11.0 allows attackers to cause a denial of service via a clickjacking attack",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-10-28T20:15:13.447",
    "last_modified": "2024-11-21T05:15:56.527",
    "fix_date": "2020-08-20T15:39:23Z"
  },
  "references": [
    {
      "url": "https://github.com/gophish/gophish/commit/6df62e85fd60f0931d3c8bfdb13b436a961bc9b6",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gophish/gophish/releases/tag/v0.11.0",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://herolab.usd.de/security-advisories/usd-2020-0051/",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gophish/gophish/commit/6df62e85fd60f0931d3c8bfdb13b436a961bc9b6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gophish/gophish/releases/tag/v0.11.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://herolab.usd.de/security-advisories/usd-2020-0051/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:08.438765",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gophish",
    "owner": "gophish",
    "created_at": "2013-11-18T23:26:43Z",
    "updated_at": "2025-01-14T08:44:53Z",
    "pushed_at": "2024-09-23T04:24:43Z",
    "size": 55052,
    "stars": 12002,
    "forks": 2300,
    "open_issues": 592,
    "watchers": 12002,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Go": 372379,
      "JavaScript": 154041,
      "HTML": 72203,
      "Shell": 3070,
      "Jinja": 2399,
      "Dockerfile": 1081
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:24:42.209730"
  }
}