{
  "cve_id": "CVE-2020-24881",
  "github_data": {
    "repository": "osTicket/osTicket",
    "fix_commit": "d98c2d096aeb8876c6ab2f88317cd371d781f14d",
    "related_commits": [
      "d98c2d096aeb8876c6ab2f88317cd371d781f14d",
      "d98c2d096aeb8876c6ab2f88317cd371d781f14d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "d98c2d096aeb8876c6ab2f88317cd371d781f14d",
      "commit_date": "2020-08-18T15:21:35Z",
      "author": {
        "login": "JediKev",
        "type": "User",
        "stats": {
          "total_commits": 751,
          "average_weekly_commits": 1.1175595238095237,
          "total_additions": 69640,
          "total_deletions": 231119,
          "weeks_active": 228
        }
      },
      "commit_message": {
        "title": "ssrf: External Inline Images",
        "length": 831,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 77,
        "additions": 71,
        "deletions": 6
      },
      "files": [
        {
          "filename": "include/class.config.php",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -230,6 +230,7 @@ class OsticketConfig extends Config {\n         'max_open_tickets' => 0,\n         'files_req_auth' => 1,\n         'force_https' => '',\n+        'allow_external_images' => 1,\n     );\n \n     function __construct($section=null) {\n@@ -1035,6 +1036,10 @@ function requireTopicToClose() {\n         return $this->get('require_topic_to_close');\n     }\n \n+    function allowExternalImages() {\n+        return ($this->get('allow_external_images'));\n+    }\n+\n     function getDefaultTicketQueueId() {\n         return $this->get('default_ticket_queue', 1);\n     }\n@@ -1417,6 +1422,7 @@ function updateTicketsSettings($vars, &$errors) {\n             'allow_client_updates'=>isset($vars['allow_client_updates'])?1:0,\n             'ticket_lock' => $vars['ticket_lock'],\n             'default_ticket_queue'=>$vars['default_ticket_queue'],\n+            'allow_external_images'=>isset($vars['allow_external_images'])?1:0,\n         ));\n     }\n "
        },
        {
          "filename": "include/class.format.php",
          "status": "modified",
          "additions": 44,
          "deletions": 5,
          "patch": "@@ -411,13 +411,29 @@ function input($var) {\n \n     //Format text for display..\n     function display($text, $inline_images=true, $balance=true) {\n+        global $cfg;\n+\n+        // Exclude external images?\n+        $exclude = !$cfg->allowExternalImages();\n+        // Allowed image extensions\n+        $allowed = array('gif', 'png', 'jpg', 'jpeg');\n+\n         // Make showing offsite images optional\n         $text = preg_replace_callback('/<img ([^>]*)(src=\"http[^\"]+\")([^>]*)\\/>/',\n-            function($match) {\n-                // Drop embedded classes -- they don't refer to ours\n-                $match = preg_replace('/class=\"[^\"]*\"/', '', $match);\n-                return sprintf('<span %s class=\"non-local-image\" data-%s %s></span>',\n-                    $match[1], $match[2], $match[3]);\n+            function($match) use ($exclude, $allowed) {\n+                $m = array();\n+                // Split the src URL and get the extension\n+                preg_match('/src=\"([^\"]+)\"/', $match[2], $m);\n+                $url = explode('.', explode('?', $m[1])[0]);\n+                $ext = preg_split('/[^A-Za-z]/', end($url))[0];\n+\n+                if (!$exclude && in_array($ext, $allowed)) {\n+                    // Drop embedded classes -- they don't refer to ours\n+                    $match = preg_replace('/class=\"[^\"]*\"/', '', $match);\n+                    return sprintf('<span %s class=\"non-local-image\" data-%s %s></span>',\n+                        $match[1], $match[2], $match[3]);\n+                } else\n+                    return '';\n             },\n             $text);\n \n@@ -433,6 +449,29 @@ function($match) {\n         return $text;\n     }\n \n+    function stripExternalImages($input, $display=false) {\n+        global $cfg;\n+\n+        // Allowed Inline External Image Extensions\n+        $allowed = array('gif', 'png', 'jpg', 'jpeg');\n+        $exclude = !$cfg->allowExternalImages();\n+\n+        $input = preg_replace_callback('/<img ([^>]*)(src=\"([^\"]+)\")([^>]*)\\/?>/',\n+            function($match) use ($allowed, $exclude, $display) {\n+                // Split the src URL and get the extension\n+                $url = explode('.', explode('?', $match[3])[0]);\n+                $ext = preg_split('/[^A-Za-z]/', end($url))[0];\n+\n+                if (($exclude && $display) || !in_array($ext, $allowed))\n+                    return '';\n+                else\n+                    return $match[0];\n+            },\n+            $input);\n+\n+        return $input;\n+    }\n+\n     function striptags($var, $decode=true) {\n \n         if(is_array($var))"
        },
        {
          "filename": "include/class.thread.php",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -1647,6 +1647,9 @@ static function create($vars=false) {\n         if (!($body = Format::strip_emoticons($vars['body']->getClean())))\n             $body = '-'; //Special tag used to signify empty message as stored.\n \n+        // Ensure valid external images\n+        $body = Format::stripExternalImages($body);\n+\n         $poster = $vars['poster'];\n         if ($poster && is_object($poster))\n             $poster = (string) $poster;\n@@ -2890,7 +2893,7 @@ function display($output=false) {\n         case 'email':\n             return $this->body;\n         case 'pdf':\n-            return Format::clickableurls($this->body);\n+            return Format::clickableurls(Format::stripExternalImages($this->body, true));\n         default:\n             return Format::display($this->body, true, !$this->options['balanced']);\n         }"
        },
        {
          "filename": "include/i18n/en_US/config.yaml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -80,6 +80,7 @@ core:\n     ticket_number_format: '######'\n     ticket_sequence_id: 0\n     queue_bucket_counts: 0\n+    allow_external_images: 1\n     task_number_format: '#'\n     task_sequence_id: 2\n     log_level: 2"
        },
        {
          "filename": "include/i18n/en_US/help/tips/settings.ticket.yaml",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -124,6 +124,15 @@ require_topic_to_close:\n     content: >\n         If Enabled, a Ticket must have a Help Topic in order to be Closed by an Agent\n \n+allow_external_images:\n+    title: Allow External Images\n+    content: >\n+        If Enabled, the system will allow external inline images that have a valid image\n+        extension (.png, .jpg, .jpeg, .gif). If Disabled, the system will exclude\n+        any external inline images. One caveat to note, is if the setting is Disabled we\n+        will still store external inline images that have a valid image extension in case\n+        the setting is re-enabled in the future.\n+\n assigned_tickets:\n     title: Assigned Tickets\n     content: >"
        },
        {
          "filename": "include/staff/settings-tickets.inc.php",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -234,6 +234,13 @@\n                 <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#require_topic_to_close\"></i>\n             </td>\n         </tr>\n+        <tr>\n+            <td><?php echo __('Allow External Images'); ?>:</td>\n+            <td>\n+                <input type=\"checkbox\" name=\"allow_external_images\" <?php echo $config['allow_external_images']?'checked=\"checked\"':''; ?>>\n+                <?php echo __('Enable'); ?>&nbsp;<i class=\"help-tip icon-question-sign\" href=\"#allow_external_images\"></i>\n+            </td>\n+        </tr>\n         <tr>\n             <th colspan=\"2\">\n                 <em><b><?php echo __('Attachments');?></b>:  <?php echo __('Size and maximum uploads setting mainly apply to web tickets.');?></em>"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 4,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4689926b2d3d25754f0ddcf8d4e181a2817f6d56",
            "date": "2023-10-25T15:45:33Z",
            "author_login": "JediKev"
          },
          {
            "sha": "03755768d9f239d70a1af7ddc7eb35c49bf6239d",
            "date": "2023-10-25T15:34:06Z",
            "author_login": "JediKev"
          },
          {
            "sha": "0f08e5b0b7474522d76416e7b57709c3ff619fef",
            "date": "2023-10-25T15:26:17Z",
            "author_login": "JediKev"
          },
          {
            "sha": "7c2003629dd7c11db33cd7d7f790704d87cfd412",
            "date": "2023-10-25T15:19:29Z",
            "author_login": "JediKev"
          },
          {
            "sha": "f878766863fc6e5bc8b8c53ae48afef31496b53a",
            "date": "2023-10-25T15:06:35Z",
            "author_login": "JediKev"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-918",
    "description": "SSRF exists in osTicket before 1.14.3, where an attacker can add malicious file to server or perform port scanning.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-11-02T21:15:26.680",
    "last_modified": "2024-11-21T05:16:09.900",
    "fix_date": "2020-08-18T15:21:35Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/160995/osTicket-1.14.2-Server-Side-Request-Forgery.html",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://blackbatsec.medium.com/cve-2020-24881-server-side-request-forgery-in-osticket-eea175e147f0",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/osTicket/osTicket/commit/d98c2d096aeb8876c6ab2f88317cd371d781f14d",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/160995/osTicket-1.14.2-Server-Side-Request-Forgery.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://blackbatsec.medium.com/cve-2020-24881-server-side-request-forgery-in-osticket-eea175e147f0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/osTicket/osTicket/commit/d98c2d096aeb8876c6ab2f88317cd371d781f14d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:08.442051",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "osTicket",
    "owner": "osTicket",
    "created_at": "2013-08-12T19:10:14Z",
    "updated_at": "2025-01-25T07:44:35Z",
    "pushed_at": "2024-11-14T16:43:24Z",
    "size": 76341,
    "stars": 3311,
    "forks": 1677,
    "open_issues": 1163,
    "watchers": 3311,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop"
    ],
    "languages": {
      "PHP": 6160811,
      "JavaScript": 360520,
      "CSS": 239335,
      "Less": 15079,
      "Shell": 4233,
      "Perl": 2087,
      "HTML": 882,
      "Standard ML": 33
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-26T07:46:21.978137"
  }
}