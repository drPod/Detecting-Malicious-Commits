{
  "cve_id": "CVE-2020-26124",
  "github_data": {
    "repository": "openmediavault/openmediavault",
    "fix_commit": "ebb51bbf5a39f4955eab0073bf87f2a31926d85d",
    "related_commits": [
      "ebb51bbf5a39f4955eab0073bf87f2a31926d85d",
      "ebb51bbf5a39f4955eab0073bf87f2a31926d85d"
    ],
    "patch_url": "https://github.com/openmediavault/openmediavault/commit/ebb51bbf5a39f4955eab0073bf87f2a31926d85d.patch",
    "fix_commit_details": {
      "sha": "ebb51bbf5a39f4955eab0073bf87f2a31926d85d",
      "commit_date": "2020-09-26T20:36:04Z",
      "author": {
        "login": "votdev",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Cleanup code, add unit tests.",
        "length": 75,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 109,
        "additions": 106,
        "deletions": 3
      },
      "files": [
        {
          "filename": "deb/openmediavault/usr/share/openmediavault/unittests/php/test_openmediavault_config_databasebackend.php",
          "status": "added",
          "additions": 58,
          "deletions": 0,
          "patch": "@@ -0,0 +1,58 @@\n+#!/usr/bin/phpunit -c/etc/openmediavault\n+<?php\n+/**\n+ * This file is part of OpenMediaVault.\n+ *\n+ * @license   http://www.gnu.org/licenses/gpl.html GPL Version 3\n+ * @author    Volker Theile <volker.theile@openmediavault.org>\n+ * @copyright Copyright (c) 2009-2020 Volker Theile\n+ *\n+ * OpenMediaVault is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * any later version.\n+ *\n+ * OpenMediaVault is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+require_once(\"openmediavault/autoloader.inc\");\n+\n+class test_openmediavault_config_databasebackend extends \\PHPUnit\\Framework\\TestCase {\n+\tprivate $databaseBackend;\n+\n+\tpublic function setUp() {\n+\t\t$this->databaseBackend = new \\OMV\\Config\\DatabaseBackend(\n+\t\t\tsprintf(\"%s/../data/config.xml\", getcwd()),\n+\t\t\tFALSE);\n+\t\t$this->databaseBackend->load();\n+\t}\n+\n+\tpublic function test_compare_1() {\n+\t\t$this->assertEquals($this->databaseBackend->compare(\n+\t\t\t\"//system/time\",\n+\t\t\t[\n+\t\t\t\t\"timezone\" => \"Europe/Berlin\",\n+\t\t\t\t\"ntp\" => [\n+\t\t\t\t\t\"enable\" => 0,\n+\t\t\t\t\t\"timeservers\" => \"pool.ntp.org\",\n+\t\t\t\t\t\"clients\" => \"\"\n+\t\t\t\t]\n+\t\t\t]\n+\t\t), 0);\n+\t}\n+\n+\tpublic function test_compare_2() {\n+\t\t$this->assertEquals($this->databaseBackend->compare(\n+\t\t\t\"//system/powermanagement\",\n+\t\t\t[\n+\t\t\t\t\"cpufreq\" => 0,\n+\t\t\t\t\"powerbtn\" => \"nothing\"\n+\t\t\t]\n+\t\t), -1);\n+\t}\n+}"
        },
        {
          "filename": "deb/openmediavault/usr/share/openmediavault/unittests/php/test_openmediavault_functions.php",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -335,4 +335,32 @@ public function test_array_boolval_12() {\n \tpublic function test_array_boolval_13() {\n \t\t$this->assertTrue(array_boolval(\"a\", \"c\", TRUE));\n \t}\n+\n+\tpublic function test_array_sort_key_1() {\n+\t\t$d = [\n+\t\t\t['id' => 3, 'text' => 'b'],\n+\t\t\t['id' => 1, 'text' => 'a'],\n+\t\t\t['id' => 2, 'text' => 'c']\n+\t\t];\n+\t\t$this->assertTrue(array_sort_key($d, \"id\"));\n+\t\t$this->assertEquals($d, [\n+\t\t\t['id' => 1, 'text' => 'a'],\n+\t\t\t['id' => 2, 'text' => 'c'],\n+\t\t\t['id' => 3, 'text' => 'b']\n+\t\t]);\n+\t}\n+\n+\tpublic function test_array_sort_key_2() {\n+\t\t$d = [\n+\t\t\t['id' => 3, 'text' => 'b'],\n+\t\t\t['id' => 1, 'text' => 'a'],\n+\t\t\t['id' => 2, 'text' => 'c']\n+\t\t];\n+\t\t$this->assertTrue(array_sort_key($d, \"text\"));\n+\t\t$this->assertEquals($d, [\n+\t\t\t['id' => 1, 'text' => 'a'],\n+\t\t\t['id' => 3, 'text' => 'b'],\n+\t\t\t['id' => 2, 'text' => 'c']\n+\t\t]);\n+\t}\n }"
        },
        {
          "filename": "deb/openmediavault/usr/share/php/openmediavault/config/databasebackend.inc",
          "status": "modified",
          "additions": 16,
          "deletions": 1,
          "patch": "@@ -331,15 +331,30 @@ class DatabaseBackend {\n \t\t// Convert all values to strings before comparison. This is necessary\n \t\t// because the values returned from the configuration database are\n \t\t// strings.\n+\t\tif (FALSE === array_walk_recursive($data, function(&$item, $key) {\n+\t\t\tif (is_string($item)) {\n+\t\t\t\tif (!mb_check_encoding($item, \"UTF-8\")) {\n+\t\t\t\t\t$item = utf8_encode($item);\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\t$item = utf8_encode(strval($item));\n+\t\t\t}\n+\t\t})) {\n+\t\t\treturn FALSE;\n+\t\t}\n \t\tif (FALSE === array_walk_recursive($data,\n \t\t  create_function('&$item, $key', 'if (is_string($item)) { '.\n \t\t  'if (!mb_check_encoding($item, \"UTF-8\")) { '.\n \t\t  '$item = utf8_encode($item); } } else { '.\n \t\t  '$item = utf8_encode(strval($item)); }')))\n \t\t\treturn FALSE;\n \t\t// Compare the arrays.\n-\t\tif (0 == count(array_diff($result, $data)))\n+\t\t// Note, we can not use `array_diff` here because this function\n+\t\t// does not support multidimensional arrays.\n+\t\tif (0 === strcmp(json_encode_safe($result),\n+\t\t\t\tjson_encode_safe($data))) {\n \t\t\treturn 0;\n+\t\t}\n \t\treturn -1;\n \t}\n "
        },
        {
          "filename": "deb/openmediavault/usr/share/php/openmediavault/functions.inc",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -84,9 +84,11 @@ function array_sort_key(array &$array, $key) {\n \tif (!is_multi_array($array))\n \t\treturn FALSE;\n \t// Sort the array.\n-\tif (FALSE === uasort($array, create_function('$a, $b',\n-\t\t\"return strnatcmp(strval(\\$a['$key']), strval(\\$b['$key']));\")))\n+\tif (FALSE === uasort($array, function($a, $b) use($key) {\n+\t\treturn strnatcmp(strval($a[$key]), strval($b[$key]));\n+\t})) {\n \t\treturn FALSE;\n+\t}\n \t// Re-index the array.\n \t$array = array_values($array);\n \treturn TRUE;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9e7cdb88bb1b5606be1074adbe73ac79c55966c1",
            "date": "2025-01-12T11:20:18Z",
            "author_login": "votdev"
          },
          {
            "sha": "6edef0f2b8d156002edfbeba898cc0e96c2920f5",
            "date": "2025-01-12T10:24:09Z",
            "author_login": "votdev"
          },
          {
            "sha": "5988573285fb1ca37187f05afd06f52add8d8d3e",
            "date": "2025-01-10T13:24:07Z",
            "author_login": "votdev"
          },
          {
            "sha": "f7dd9fb30df354a11ae38e6f9a3903e22b52d1e2",
            "date": "2025-01-10T13:20:52Z",
            "author_login": "votdev"
          },
          {
            "sha": "cb5d2d1ae14b485ad61860bce26a600cf8e14fff",
            "date": "2025-01-09T09:11:20Z",
            "author_login": "votdev"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "openmediavault before 4.1.36 and 5.x before 5.5.12 allows authenticated PHP code injection attacks, via the sortfield POST parameter of rpc.php, because json_encode_safe is not used in config/databasebackend.inc. Successful exploitation allows arbitrary command execution on the underlying operating system as root.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-10-02T09:15:13.900",
    "last_modified": "2024-11-21T05:19:17.900",
    "fix_date": "2020-09-26T20:36:04Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/160223/OpenMediaVault-rpc.php-Authenticated-PHP-Code-Injection.html",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/openmediavault/openmediavault/commit/ebb51bbf5a39f4955eab0073bf87f2a31926d85d",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.openmediavault.org/?p=2797",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/160223/OpenMediaVault-rpc.php-Authenticated-PHP-Code-Injection.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/openmediavault/openmediavault/commit/ebb51bbf5a39f4955eab0073bf87f2a31926d85d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.openmediavault.org/?p=2797",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.164374",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openmediavault",
    "owner": "openmediavault",
    "created_at": "2016-05-03T10:35:34Z",
    "updated_at": "2025-01-14T10:03:34Z",
    "pushed_at": "2025-01-12T11:20:20Z",
    "size": 546929,
    "stars": 5340,
    "forks": 495,
    "open_issues": 94,
    "watchers": 5340,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "3.x",
      "4.x",
      "5.x",
      "master"
    ],
    "languages": {
      "PHP": 1601212,
      "TypeScript": 1304131,
      "Python": 591319,
      "SaltStack": 442599,
      "Shell": 410563,
      "Jinja": 207280,
      "HTML": 124052,
      "SCSS": 101267,
      "Makefile": 17718,
      "C": 14304,
      "XSLT": 4432,
      "M4": 2190,
      "JavaScript": 651
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:00:44.526706"
  }
}