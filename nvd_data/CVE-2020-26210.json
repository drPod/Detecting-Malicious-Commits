{
  "cve_id": "CVE-2020-26210",
  "github_data": {
    "repository": "BookStackApp/BookStack",
    "fix_commit": "349162ea139556b2d25e09e155cec84e21cc9227",
    "related_commits": [
      "349162ea139556b2d25e09e155cec84e21cc9227",
      "349162ea139556b2d25e09e155cec84e21cc9227"
    ],
    "patch_url": "https://github.com/BookStackApp/BookStack/commit/349162ea139556b2d25e09e155cec84e21cc9227.patch",
    "fix_commit_details": {
      "sha": "349162ea139556b2d25e09e155cec84e21cc9227",
      "commit_date": "2020-10-31T15:01:52Z",
      "author": {
        "login": "ssddanbrown",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevented possible XSS via link attachments",
        "length": 268,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 111,
        "additions": 80,
        "deletions": 31
      },
      "files": [
        {
          "filename": "app/Http/Controllers/AttachmentController.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -110,7 +110,7 @@ public function update(Request $request, string $attachmentId)\n         try {\n             $this->validate($request, [\n                 'attachment_edit_name' => 'required|string|min:1|max:255',\n-                'attachment_edit_url' =>  'string|min:1|max:255'\n+                'attachment_edit_url' =>  'string|min:1|max:255|safe_url'\n             ]);\n         } catch (ValidationException $exception) {\n             return response()->view('attachments.manager-edit-form', array_merge($request->only(['attachment_edit_name', 'attachment_edit_url']), [\n@@ -145,7 +145,7 @@ public function attachLink(Request $request)\n             $this->validate($request, [\n                 'attachment_link_uploaded_to' => 'required|integer|exists:pages,id',\n                 'attachment_link_name' => 'required|string|min:1|max:255',\n-                'attachment_link_url' =>  'required|string|min:1|max:255'\n+                'attachment_link_url' =>  'required|string|min:1|max:255|safe_url'\n             ]);\n         } catch (ValidationException $exception) {\n             return response()->view('attachments.manager-link-form', array_merge($request->only(['attachment_link_name', 'attachment_link_url']), [\n@@ -161,7 +161,7 @@ public function attachLink(Request $request)\n \n         $attachmentName = $request->get('attachment_link_name');\n         $link = $request->get('attachment_link_url');\n-        $attachment = $this->attachmentService->saveNewFromLink($attachmentName, $link, $pageId);\n+        $attachment = $this->attachmentService->saveNewFromLink($attachmentName, $link, intval($pageId));\n \n         return view('attachments.manager-link-form', [\n             'pageId' => $pageId,"
        },
        {
          "filename": "app/Providers/AppServiceProvider.php",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -43,6 +43,13 @@ public function boot()\n             return substr_count($uploadName, '.') < 2;\n         });\n \n+        Validator::extend('safe_url', function ($attribute, $value, $parameters, $validator) {\n+            $cleanLinkName = strtolower(trim($value));\n+            $isJs = strpos($cleanLinkName, 'javascript:') === 0;\n+            $isData = strpos($cleanLinkName, 'data:') === 0;\n+            return !$isJs && !$isData;\n+        });\n+\n         // Custom blade view directives\n         Blade::directive('icon', function ($expression) {\n             return \"<?php echo icon($expression); ?>\";"
        },
        {
          "filename": "app/Uploads/AttachmentService.php",
          "status": "modified",
          "additions": 4,
          "deletions": 9,
          "patch": "@@ -88,12 +88,8 @@ public function saveUpdatedUpload(UploadedFile $uploadedFile, Attachment $attach\n \n     /**\n      * Save a new File attachment from a given link and name.\n-     * @param string $name\n-     * @param string $link\n-     * @param int $page_id\n-     * @return Attachment\n      */\n-    public function saveNewFromLink($name, $link, $page_id)\n+    public function saveNewFromLink(string $name, string $link, int $page_id): Attachment\n     {\n         $largestExistingOrder = Attachment::where('uploaded_to', '=', $page_id)->max('order');\n         return Attachment::forceCreate([\n@@ -123,20 +119,19 @@ public function updateFileOrderWithinPage(array $attachmentOrder, string $pageId\n \n     /**\n      * Update the details of a file.\n-     * @param Attachment $attachment\n-     * @param $requestData\n-     * @return Attachment\n      */\n-    public function updateFile(Attachment $attachment, $requestData)\n+    public function updateFile(Attachment $attachment, array $requestData): Attachment\n     {\n         $attachment->name = $requestData['name'];\n+\n         if (isset($requestData['link']) && trim($requestData['link']) !== '') {\n             $attachment->path = $requestData['link'];\n             if (!$attachment->external) {\n                 $this->deleteFileInStorage($attachment);\n                 $attachment->external = true;\n             }\n         }\n+\n         $attachment->save();\n         return $attachment;\n     }"
        },
        {
          "filename": "resources/lang/en/validation.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -90,6 +90,7 @@\n     'required_without'     => 'The :attribute field is required when :values is not present.',\n     'required_without_all' => 'The :attribute field is required when none of :values are present.',\n     'same'                 => 'The :attribute and :other must match.',\n+    'safe_url'             => 'The provided link may not be safe.',\n     'size'                 => [\n         'numeric' => 'The :attribute must be :size.',\n         'file'    => 'The :attribute must be :size kilobytes.',"
        },
        {
          "filename": "tests/Uploads/AttachmentTest.php",
          "status": "modified",
          "additions": 65,
          "deletions": 19,
          "patch": "@@ -3,39 +3,51 @@\n use BookStack\\Uploads\\Attachment;\n use BookStack\\Entities\\Page;\n use BookStack\\Auth\\Permissions\\PermissionService;\n+use BookStack\\Uploads\\AttachmentService;\n+use Illuminate\\Http\\UploadedFile;\n use Tests\\TestCase;\n+use Tests\\TestResponse;\n \n class AttachmentTest extends TestCase\n {\n     /**\n      * Get a test file that can be uploaded\n-     * @param $fileName\n-     * @return \\Illuminate\\Http\\UploadedFile\n      */\n-    protected function getTestFile($fileName)\n+    protected function getTestFile(string $fileName): UploadedFile\n     {\n-        return new \\Illuminate\\Http\\UploadedFile(base_path('tests/test-data/test-file.txt'), $fileName, 'text/plain', 55, null, true);\n+        return new UploadedFile(base_path('tests/test-data/test-file.txt'), $fileName, 'text/plain', 55, null, true);\n     }\n \n     /**\n      * Uploads a file with the given name.\n-     * @param $name\n-     * @param int $uploadedTo\n-     * @return \\Illuminate\\Foundation\\Testing\\TestResponse\n      */\n-    protected function uploadFile($name, $uploadedTo = 0)\n+    protected function uploadFile(string $name, int $uploadedTo = 0): \\Illuminate\\Foundation\\Testing\\TestResponse\n     {\n         $file = $this->getTestFile($name);\n         return $this->call('POST', '/attachments/upload', ['uploaded_to' => $uploadedTo], [], ['file' => $file], []);\n     }\n \n+    /**\n+     * Create a new attachment\n+     */\n+    protected function createAttachment(Page $page): Attachment\n+    {\n+        $this->post('attachments/link', [\n+            'attachment_link_url' => 'https://example.com',\n+            'attachment_link_name' => 'Example Attachment Link',\n+            'attachment_link_uploaded_to' => $page->id,\n+        ]);\n+\n+        return Attachment::query()->latest()->first();\n+    }\n+\n     /**\n      * Delete all uploaded files.\n      * To assist with cleanup.\n      */\n     protected function deleteUploads()\n     {\n-        $fileService = $this->app->make(\\BookStack\\Uploads\\AttachmentService::class);\n+        $fileService = $this->app->make(AttachmentService::class);\n         foreach (Attachment::all() as $file) {\n             $fileService->deleteFile($file);\n         }\n@@ -145,21 +157,14 @@ public function test_attachment_updating()\n         $page = Page::first();\n         $this->asAdmin();\n \n-        $this->call('POST', 'attachments/link', [\n-            'attachment_link_url' => 'https://example.com',\n-            'attachment_link_name' => 'Example Attachment Link',\n-            'attachment_link_uploaded_to' => $page->id,\n-        ]);\n-\n-        $attachmentId = Attachment::first()->id;\n-\n-        $update = $this->call('PUT', 'attachments/' . $attachmentId, [\n+        $attachment = $this->createAttachment($page);\n+        $update = $this->call('PUT', 'attachments/' . $attachment->id, [\n             'attachment_edit_name' => 'My new attachment name',\n             'attachment_edit_url' => 'https://test.example.com'\n         ]);\n \n         $expectedData = [\n-            'id' => $attachmentId,\n+            'id' => $attachment->id,\n             'path' => 'https://test.example.com',\n             'name' => 'My new attachment name',\n             'uploaded_to' => $page->id\n@@ -242,4 +247,45 @@ public function test_attachment_access_without_permission_shows_404()\n \n         $this->deleteUploads();\n     }\n+\n+    public function test_data_and_js_links_cannot_be_attached_to_a_page()\n+    {\n+        $page = Page::first();\n+        $this->asAdmin();\n+\n+        $badLinks = [\n+            'javascript:alert(\"bunny\")',\n+            ' javascript:alert(\"bunny\")',\n+            'JavaScript:alert(\"bunny\")',\n+            \"\\t\\n\\t\\nJavaScript:alert(\\\"bunny\\\")\",\n+            \"data:text/html;<a></a>\",\n+            \"Data:text/html;<a></a>\",\n+            \"Data:text/html;<a></a>\",\n+        ];\n+\n+        foreach ($badLinks as $badLink) {\n+            $linkReq = $this->post('attachments/link', [\n+                'attachment_link_url' => $badLink,\n+                'attachment_link_name' => 'Example Attachment Link',\n+                'attachment_link_uploaded_to' => $page->id,\n+            ]);\n+            $linkReq->assertStatus(422);\n+            $this->assertDatabaseMissing('attachments', [\n+                'path' => $badLink,\n+            ]);\n+        }\n+\n+        $attachment = $this->createAttachment($page);\n+\n+        foreach ($badLinks as $badLink) {\n+            $linkReq = $this->put('attachments/' . $attachment->id, [\n+                'attachment_edit_url' => $badLink,\n+                'attachment_edit_name' => 'Example Attachment Link',\n+            ]);\n+            $linkReq->assertStatus(422);\n+            $this->assertDatabaseMissing('attachments', [\n+                'path' => $badLink,\n+            ]);\n+        }\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "786a434c03faa996e630f4a0a523567d3b093f43",
            "date": "2025-01-14T14:56:43Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "25c4f4b02ba06f66f5239de48ae005f895146f8d",
            "date": "2025-01-14T14:53:10Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "481580be172a4813ee98ad1b945d12d731e71cdb",
            "date": "2025-01-13T16:51:07Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "593645acfe8521db97d7469c92546c8529703969",
            "date": "2025-01-13T14:30:53Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "b9751807e7bad4b7d477b6977f630881f730abad",
            "date": "2025-01-13T13:27:32Z",
            "author_login": "ssddanbrown"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-79",
    "description": "In BookStack before version 0.30.4, a user with permissions to edit a page could add an attached link which would execute untrusted JavaScript code when clicked by a viewer of the page. Dangerous content may remain in the database after this update. If you think this could have been exploited the linked advisory provides a SQL query to test. As a workaround, page edit permissions could be limited to only those that are trusted until you can upgrade although this will not address existing exploitation of this vulnerability. The issue is fixed in version 0.30.4.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-11-03T19:15:13.157",
    "last_modified": "2024-11-21T05:19:31.920",
    "fix_date": "2020-10-31T15:01:52Z"
  },
  "references": [
    {
      "url": "https://bookstackapp.com/blog/beta-release-v0-30-4/",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/BookStackApp/BookStack/commit/349162ea139556b2d25e09e155cec84e21cc9227",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/BookStackApp/BookStack/releases/tag/v0.30.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/BookStackApp/BookStack/security/advisories/GHSA-7p2j-4h6p-cq3h",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bookstackapp.com/blog/beta-release-v0-30-4/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/BookStackApp/BookStack/commit/349162ea139556b2d25e09e155cec84e21cc9227",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/BookStackApp/BookStack/releases/tag/v0.30.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/BookStackApp/BookStack/security/advisories/GHSA-7p2j-4h6p-cq3h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:08.445759",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "BookStack",
    "owner": "BookStackApp",
    "created_at": "2015-08-29T10:26:44Z",
    "updated_at": "2025-01-14T14:56:47Z",
    "pushed_at": "2025-01-14T14:56:46Z",
    "size": 41179,
    "stars": 15788,
    "forks": 1979,
    "open_issues": 596,
    "watchers": 15788,
    "has_security_policy": false,
    "default_branch": "development",
    "protected_branches": [
      "release"
    ],
    "languages": {
      "PHP": 7967773,
      "TypeScript": 1856418,
      "Blade": 444101,
      "JavaScript": 287858,
      "SCSS": 139395,
      "Dockerfile": 1282,
      "Shell": 347
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:42:30.929244"
  }
}