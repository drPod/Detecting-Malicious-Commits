{
  "cve_id": "CVE-2020-26212",
  "github_data": {
    "repository": "glpi-project/glpi",
    "fix_commit": "527280358ec78988ac57e9809d2eb21fcd74caf7",
    "related_commits": [
      "527280358ec78988ac57e9809d2eb21fcd74caf7",
      "527280358ec78988ac57e9809d2eb21fcd74caf7"
    ],
    "patch_url": "https://github.com/glpi-project/glpi/commit/527280358ec78988ac57e9809d2eb21fcd74caf7.patch",
    "fix_commit_details": {
      "sha": "527280358ec78988ac57e9809d2eb21fcd74caf7",
      "commit_date": "2020-11-25T08:18:56Z",
      "author": {
        "login": "cedric-anne",
        "type": "User",
        "stats": {
          "total_commits": 2969,
          "average_weekly_commits": 2.716376944190302,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 324
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-qmw3-87hr-5wgx",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 297,
        "additions": 249,
        "deletions": 48
      },
      "files": [
        {
          "filename": "inc/caldav/backend/principal.class.php",
          "status": "modified",
          "additions": 4,
          "deletions": 41,
          "patch": "@@ -37,6 +37,7 @@\n }\n \n use Glpi\\CalDAV\\Node\\Property;\n+use Glpi\\CalDAV\\Traits\\CalDAVPrincipalsTrait;\n use Glpi\\CalDAV\\Traits\\CalDAVUriUtilTrait;\n use Sabre\\DAV\\PropPatch;\n use Sabre\\DAVACL\\PrincipalBackend\\AbstractBackend;\n@@ -50,6 +51,7 @@\n  */\n class Principal extends AbstractBackend {\n \n+   use CalDAVPrincipalsTrait;\n    use CalDAVUriUtilTrait;\n \n    const PRINCIPALS_ROOT = 'principals';\n@@ -58,56 +60,17 @@ class Principal extends AbstractBackend {\n \n    public function getPrincipalsByPrefix($prefixPath) {\n \n-      global $DB;\n-\n       $principals = [];\n \n       switch ($prefixPath) {\n          case self::PREFIX_GROUPS:\n-            if (!\\Session::haveRight(\\Planning::$rightname, \\Planning::READALL)\n-                && empty($_SESSION['glpigroups'])) {\n-               // User cannot read planning of everyone and has no groups.\n-               break;\n-            }\n-\n-            $groups_criteria = getEntitiesRestrictCriteria(\n-               \\Group::getTable(),\n-               'entities_id',\n-               $_SESSION['glpiactiveentities'],\n-               true\n-            );\n-\n-            // Limit to groups visible in planning (see Planning::showAddGroupForm())\n-            $groups_criteria['is_task'] = 1;\n-\n-            // Limit to users groups if user cannot read planning of everyone\n-            if (!\\Session::haveRight(\\Planning::$rightname, \\Planning::READALL)) {\n-               $groups_criteria['id'] = $_SESSION['glpigroups'];\n-            }\n-\n-            $groups_iterator = $DB->request(\n-               [\n-                  'FROM'  => \\Group::getTable(),\n-                  'WHERE' => $groups_criteria,\n-               ]\n-            );\n+            $groups_iterator = $this->getVisibleGroupsIterator();\n             foreach ($groups_iterator as $group_fields) {\n                $principals[] = $this->getPrincipalFromGroupFields($group_fields);\n             }\n             break;\n          case self::PREFIX_USERS:\n-            if (!\\Session::haveRightsOr(\\Planning::$rightname, [\\Planning::READALL, \\Planning::READGROUP])) {\n-               // Can see only personnal planning\n-               $rights = 'id';\n-            } else if (\\Session::haveRight(\\Planning::$rightname, \\Planning::READGROUP)\n-                && !\\Session::haveRight(\\Planning::$rightname, \\Planning::READALL)) {\n-               // Can see only planning from users sharing same groups\n-               $rights = 'groups';\n-            } else {\n-               // Can see planning from users having rights on planning elements\n-               $rights = ['change', 'problem', 'reminder', 'task', 'projecttask'];\n-            }\n-            $users_iterator = \\User::getSqlSearchResult(false, $rights);\n+            $users_iterator = $this->getVisibleUsersIterator();\n             foreach ($users_iterator as $user_fields) {\n                $principals[] = $this->getPrincipalFromUserFields($user_fields);\n             }"
        },
        {
          "filename": "inc/caldav/plugin/acl.class.php",
          "status": "modified",
          "additions": 9,
          "deletions": 2,
          "patch": "@@ -37,10 +37,13 @@\n }\n \n use Glpi\\CalDAV\\Backend\\Principal;\n+use Glpi\\CalDAV\\Traits\\CalDAVPrincipalsTrait;\n use Glpi\\CalDAV\\Traits\\CalDAVUriUtilTrait;\n use Sabre\\CalDAV\\Calendar;\n use Sabre\\CalDAV\\CalendarObject;\n+use Sabre\\DAVACL\\IACL;\n use Sabre\\DAVACL\\Plugin;\n+use Session;\n \n /**\n  * ACL plugin for CalDAV server.\n@@ -49,6 +52,7 @@\n  */\n class Acl extends Plugin {\n \n+   use CalDAVPrincipalsTrait;\n    use CalDAVUriUtilTrait;\n \n    public $principalCollectionSet = [\n@@ -65,8 +69,11 @@ public function getAcl($node) {\n \n       $acl = parent::getAcl($node);\n \n-      // Authenticated user have read access to all nodes, as node list only contains elements\n-      // that user can read.\n+      if (!($node instanceof IACL) || ($owner_path = $node->getOwner()) === null\n+          || !$this->canViewPrincipalObjects($owner_path)) {\n+         return $acl;\n+      }\n+\n       $acl[] = [\n          'principal' => '{DAV:}authenticated',\n          'privilege' => '{DAV:}read',"
        },
        {
          "filename": "inc/caldav/traits/caldavprincipalstrait.class.php",
          "status": "added",
          "additions": 173,
          "deletions": 0,
          "patch": "@@ -0,0 +1,173 @@\n+<?php\n+/**\n+ * ---------------------------------------------------------------------\n+ * GLPI - Gestionnaire Libre de Parc Informatique\n+ * Copyright (C) 2015-2020 Teclib' and contributors.\n+ *\n+ * http://glpi-project.org\n+ *\n+ * based on GLPI - Gestionnaire Libre de Parc Informatique\n+ * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n+ *\n+ * ---------------------------------------------------------------------\n+ *\n+ * LICENSE\n+ *\n+ * This file is part of GLPI.\n+ *\n+ * GLPI is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * GLPI is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n+ * ---------------------------------------------------------------------\n+ */\n+\n+namespace Glpi\\CalDAV\\Traits;\n+\n+use EmptyIterator;\n+use Group;\n+use Iterator;\n+use Planning;\n+use Session;\n+use User;\n+\n+if (!defined('GLPI_ROOT')) {\n+   die(\"Sorry. You can't access this file directly\");\n+}\n+\n+/**\n+ * Trait used for CalDAV Principals listing and visibility management.\n+ *\n+ * @since 9.5.3\n+ */\n+trait CalDAVPrincipalsTrait {\n+\n+   /**\n+    * Check if principal objects are visible for current session.\n+    *\n+    * @param string $path\n+    *\n+    * @return bool\n+    */\n+   protected function canViewPrincipalObjects(string $path): bool {\n+      $principal_type = $this->getPrincipalItemtypeFromUri($path);\n+      switch ($principal_type) {\n+         case Group::class:\n+            $can_view = $this->canViewGroupObjects($this->getGroupIdFromPrincipalUri($path));\n+            break;\n+         case User::class:\n+            $can_view = $this->canViewUserObjects($this->getUsernameFromPrincipalUri($path));\n+            break;\n+         default:\n+            $can_view = false;\n+            break;\n+      }\n+\n+      return $can_view;\n+   }\n+\n+   /**\n+    * Check if group objects are visible for current session.\n+    *\n+    * @param int $group_id\n+    *\n+    * @return bool\n+    */\n+   protected function canViewGroupObjects(int $group_id): bool {\n+      $groups_iterator = $this->getVisibleGroupsIterator();\n+      foreach ($groups_iterator as $group) {\n+         if ($group['id'] === $group_id) {\n+            return true;\n+         }\n+      }\n+\n+      return false;\n+   }\n+\n+   /**\n+    * Check if user objects are visible for current session.\n+    *\n+    * @param string $username\n+    *\n+    * @return bool\n+    */\n+   protected function canViewUserObjects(string $username): bool {\n+      $users_iterator = $this->getVisibleUsersIterator();\n+      foreach ($users_iterator as $user) {\n+         if ($user['name'] === $username) {\n+            return true;\n+         }\n+      }\n+\n+      return false;\n+   }\n+\n+   /**\n+    * Get visible groups for current session.\n+    *\n+    * @return array\n+    */\n+   protected function getVisibleGroupsIterator(): Iterator {\n+\n+      global $DB;\n+\n+      if (!Session::haveRight(Planning::$rightname, Planning::READALL)\n+          && empty($_SESSION['glpigroups'])) {\n+         // User cannot read planning of everyone and has no groups.\n+         return new EmptyIterator();\n+      }\n+\n+      $groups_criteria = getEntitiesRestrictCriteria(\n+         Group::getTable(),\n+         'entities_id',\n+         $_SESSION['glpiactiveentities'],\n+         true\n+      );\n+\n+      // Limit to groups visible in planning (see Planning::showAddGroupForm())\n+      $groups_criteria['is_task'] = 1;\n+\n+      // Limit to users groups if user cannot read planning of everyone\n+      if (!Session::haveRight(Planning::$rightname, Planning::READALL)) {\n+         $groups_criteria['id'] = $_SESSION['glpigroups'];\n+      }\n+\n+      $groups_iterator = $DB->request(\n+         [\n+            'FROM'  => Group::getTable(),\n+            'WHERE' => $groups_criteria,\n+         ]\n+      );\n+\n+      return $groups_iterator;\n+   }\n+\n+   /**\n+    * Get visible users for current session.\n+    *\n+    * @return array\n+    */\n+   protected function getVisibleUsersIterator(): Iterator {\n+\n+      if (!Session::haveRightsOr(Planning::$rightname, [Planning::READALL, Planning::READGROUP])) {\n+         // Can see only personnal planning\n+         $rights = 'id';\n+      } else if (Session::haveRight(Planning::$rightname, Planning::READGROUP)\n+          && !Session::haveRight(Planning::$rightname, Planning::READALL)) {\n+         // Can see only planning from users sharing same groups\n+         $rights = 'groups';\n+      } else {\n+         // Can see planning from users having rights on planning elements\n+         $rights = ['change', 'problem', 'reminder', 'task', 'projecttask'];\n+      }\n+      return User::getSqlSearchResult(false, $rights);\n+   }\n+}"
        },
        {
          "filename": "tests/functionnal/Glpi/CalDAV/Server.php",
          "status": "modified",
          "additions": 63,
          "deletions": 5,
          "patch": "@@ -407,15 +407,14 @@ public function testPropfindOnMainEndpoints(string $path, array $expected_result\n     */\n    public function testPropfindOnPrincipalCalendar() {\n \n-      $login = TU_USER;\n-      $pass  = TU_PASS;\n+      $login = 'tech';\n+      $pass  = 'tech';\n       $user  = getItemByTypeName('User', $login);\n \n-      $this->login($login, $pass);\n-\n       $group = new \\Group();\n       $group_id = (int)$group->add([\n-         'name' => 'Test group'\n+         'name'    => 'Test group',\n+         'is_task' => 1,\n       ]);\n       $this->integer($group_id)->isGreaterThan(0);\n       $group->getFromDB($group_id);\n@@ -428,6 +427,8 @@ public function testPropfindOnPrincipalCalendar() {\n          ])\n       )->isGreaterThan(0);\n \n+      $this->login($login, $pass);\n+\n       $calendars = [\n          [\n             'path' => 'calendars/users/' . $user->fields['name'] . '/calendar/',\n@@ -488,6 +489,62 @@ public function testPropfindOnPrincipalCalendar() {\n       }\n    }\n \n+   /**\n+    * Test ACL on main objects.\n+    */\n+   public function testAcl() {\n+\n+      $user  = getItemByTypeName('User', 'tech');\n+\n+      $group = new \\Group();\n+      $group_id = (int)$group->add([\n+         'name'    => 'Test group',\n+         'is_task' => 1,\n+      ]);\n+      $this->integer($group_id)->isGreaterThan(0);\n+      $group->getFromDB($group_id);\n+\n+      $group_user = new \\Group_User();\n+      $this->integer(\n+         (int)$group_user->add([\n+            'groups_id' => $group_id,\n+            'users_id'  => $user->fields['id'],\n+         ])\n+      )->isGreaterThan(0);\n+\n+      $objects = [\n+         'principals/users/' . $user->fields['name'],\n+         'calendars/users/' . $user->fields['name'] . '/calendar/',\n+         'principals/groups/' . $group_id,\n+         'calendars/groups/' . $group_id . '/calendar/',\n+      ];\n+\n+      $users_access = [\n+         'normal' => 'HTTP/1.1 403 Forbidden',\n+         'tech'   => 'HTTP/1.1 200 OK',\n+      ];\n+\n+      foreach ($users_access as $username => $expected_status) {\n+         $this->login($username, $username);\n+\n+         foreach ($objects as $path) {\n+            $server = $this->getServerInstance('PROPFIND', $path);\n+\n+            $this->validateThatAuthenticationIsRequired($server);\n+\n+            $server->httpRequest->addHeader('Authorization', 'Basic ' . base64_encode($username . ':' . $username));\n+\n+            $response = new \\Sabre\\HTTP\\Response();\n+            $server->invokeMethod($server->httpRequest, $response, false);\n+            $this->validateResponseIsOk($response, 207, 'application/xml'); // 207 'Multi-Status'\n+\n+            $xpath = $this->getXpathFromResponse($response);\n+            $result_path = '/d:multistatus/d:response[1]';\n+            $this->string($xpath->evaluate('string(' . $result_path . '/d:propstat/d:status)'))->isEqualTo($expected_status);\n+         }\n+      }\n+   }\n+\n    /**\n     * Test PROPFIND, GET, DELETE, PUT methods on calendar events.\n     * Tests validates that mandatory properties are correctly set.\n@@ -1529,6 +1586,7 @@ function() use($server) {\n     *\n     * @param \\Sabre\\HTTP\\Response $response\n     * @param integer              $status\n+    * @param string|null          $content_type\n     */\n    private function validateResponseIsOk(\\Sabre\\HTTP\\Response $response, int $status, string $content_type) {\n       $this->integer($response->getStatus())->isEqualTo($status);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4b9fbaea0bb355b49990ee51c690fed5e7302443",
            "date": "2025-01-14T13:22:29Z",
            "author_login": "SebSept"
          },
          {
            "sha": "78d50b2a0c46bea23fc414f0bb9e4a7c74949ab0",
            "date": "2025-01-14T12:00:37Z",
            "author_login": "AdrienClairembault"
          },
          {
            "sha": "0fa6e4c403f5e2b2b5c26dd8f2137faf6a8af997",
            "date": "2025-01-14T06:57:56Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2f13c37266d1ef84d79519cdf5d810c099415f48",
            "date": "2025-01-13T15:21:36Z",
            "author_login": "Rom1-B"
          },
          {
            "sha": "5bb568d9f8bf7c5820af1ed70d1e7de98f62e699",
            "date": "2025-01-13T14:48:36Z",
            "author_login": "cedric-anne"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-862",
    "description": "GLPI stands for Gestionnaire Libre de Parc Informatique and it is a Free Asset and IT Management Software package, that provides ITIL Service Desk features, licenses tracking and software auditing. In GLPI before version 9.5.3, any authenticated user has read-only permissions to the planning of every other user, even admin ones. Steps to reproduce the behavior: 1. Create a new planning with 'eduardo.mozart' user (from 'IT' group that belongs to 'Super-admin') into it's personal planning at 'Assistance' > 'Planning'. 2. Copy the CalDAV url and use a CalDAV client (e.g. Thunderbird) to sync the planning with the provided URL. 3. Inform the username and password from any valid user (e.g. 'camila' from 'Proativa' group). 4. 'Camila' has read-only access to 'eduardo.mozart' personal planning. The same behavior happens to any group. E.g. 'Camila' has access to 'IT' group planning, even if she doesn't belong to this group and has a 'Self-service' profile permission). This issue is fixed in version 9.5.3. As a workaround, one can remove the `caldav.php` file to block access to CalDAV server.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-11-25T17:15:12.073",
    "last_modified": "2024-11-21T05:19:32.347",
    "fix_date": "2020-11-25T08:18:56Z"
  },
  "references": [
    {
      "url": "https://github.com/glpi-project/glpi/commit/527280358ec78988ac57e9809d2eb21fcd74caf7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/releases/tag/9.5.3",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-qmw3-87hr-5wgx",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/commit/527280358ec78988ac57e9809d2eb21fcd74caf7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/releases/tag/9.5.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-qmw3-87hr-5wgx",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:08.476620",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "glpi",
    "owner": "glpi-project",
    "created_at": "2015-07-16T07:20:21Z",
    "updated_at": "2025-01-14T12:00:43Z",
    "pushed_at": "2025-01-14T12:00:37Z",
    "size": 864638,
    "stars": 4447,
    "forks": 1324,
    "open_issues": 223,
    "watchers": 4447,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0.70/bugfixes",
      "0.71/bugfixes",
      "0.72/bugfixes",
      "0.78/bugfixes",
      "0.80/bugfixes",
      "0.83/bugfixes",
      "0.84/bugfixes",
      "0.85/bugfixes",
      "0.90/bugfixes",
      "9.1/bugfixes",
      "9.2/bugfixes",
      "9.3/bugfixes",
      "9.4/bugfixes",
      "9.5/bugfixes",
      "10.0/bugfixes",
      "main"
    ],
    "languages": {
      "PHP": 24867216,
      "Twig": 1834187,
      "JavaScript": 1339721,
      "SCSS": 362786,
      "Vue": 188168,
      "Shell": 24779,
      "Makefile": 2692,
      "CSS": 1716,
      "Dockerfile": 638
    },
    "commit_activity": {
      "total_commits_last_year": 1737,
      "avg_commits_per_week": 33.40384615384615,
      "days_active_last_year": 259
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:16:26.208966"
  }
}