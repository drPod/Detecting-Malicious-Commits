{
  "cve_id": "CVE-2020-26251",
  "github_data": {
    "repository": "open-zaak/open-zaak",
    "fix_commit": "952269269f1b629fce9c94485f83ac13f31d6c46",
    "related_commits": [
      "952269269f1b629fce9c94485f83ac13f31d6c46",
      "952269269f1b629fce9c94485f83ac13f31d6c46"
    ],
    "patch_url": "https://github.com/open-zaak/open-zaak/commit/952269269f1b629fce9c94485f83ac13f31d6c46.patch",
    "fix_commit_details": {
      "sha": "952269269f1b629fce9c94485f83ac13f31d6c46",
      "commit_date": "2020-12-17T13:04:43Z",
      "author": {
        "login": "sergei-maertens",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-chhr-gxrg-64x7",
        "length": 72,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 250,
        "additions": 231,
        "deletions": 19
      },
      "files": [
        {
          "filename": "docs/client-development/cors.rst",
          "status": "added",
          "additions": 39,
          "deletions": 0,
          "patch": "@@ -0,0 +1,39 @@\n+.. _client-development-cors:\n+\n+Cross-Origin Resource Sharing (CORS)\n+====================================\n+\n+Some clients develop against Open Zaak using single-page-application technology that\n+runs completely in the browser, such as React, Angular or other frameworks.\n+\n+Open Zaak must be deployed with an appropriate CORS-configuration for this.\n+\n+.. note:: We always recommend using an API gateway/own backend to communicate with Open\n+   Zaak. It's simpler because you don't have to deal with CORS, and there's less risk\n+   of credentials/secrets leaking. You should **never** store client ID/secret in your\n+   dist bundle(s).\n+\n+Production-grade settings\n+-------------------------\n+\n+In production-like environments, we recommend using an explicit allow-list for the\n+trusted origins. This requires deploying Open Zaak with\n+``CORS_ALLOWED_ORIGINS=https://my-app.example.com``, where ``https://my-app.example.com``\n+is the domain where the application is deployed.\n+\n+Development/experimental configuration\n+--------------------------------------\n+\n+If you're running Open Zaak locally or on an environment with dummy data for\n+development purposes, you can grant CORS access to every possible client using\n+``CORS_ALLOW_ALL_ORIGINS=True`` in the Open Zaak deployment.\n+\n+Separation of administrative interface and API\n+----------------------------------------------\n+\n+The administrative interface authenticates using session cookies, while the APIs use\n+the ``Authorization`` header with bearer tokens.\n+\n+The session cookies are never sent on cross-domain requests, and the CORS configuration\n+is configured to not allow credentials (which are typically session cookies). The API\n+with the ``Authorization`` header is not affected by this policy."
        },
        {
          "filename": "docs/client-development/index.rst",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -12,4 +12,5 @@ Please select your relevant topic\n    :maxdepth: 2\n \n    authentication\n+   cors\n    recipes"
        },
        {
          "filename": "docs/installation/config/env_config.md",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -108,6 +108,22 @@ on Docker, since `localhost` is contained within the container:\n     Zaak to other services such as the [Selectie Lijst](https://selectielijst.openzaak.nl/) will be disabled, so this\n     variable should be used with care to prevent unwanted side-effects.\n \n+### Cross-Origin-Resource-Sharing\n+\n+The following parameters control the CORS policy.\n+\n+* `CORS_ALLOW_ALL_ORIGINS`: allow cross-domain access from any client. Defaults to `False`.\n+\n+* `CORS_ALLOWED_ORIGINS`: explicitly list the allowed origins for cross-domain requests.\n+  Defaults to an empty list. Example: `http://localhost:3000,https://some-app.gemeente.nl`.\n+\n+* `CORS_ALLOWED_ORIGIN_REGEXES`: same as `CORS_ALLOWED_ORIGINS`, but supports regular\n+  expressions.\n+\n+* `CORS_EXTRA_ALLOW_HEADERS`: headers that are allowed to be sent as part of the cross-domain\n+  request. By default, `Authorization`, `Accept-Crs` and `Content-Crs` are already\n+  included. The value of this variable is added to these already included headers.\n+  Defaults to an empty list.\n \n ## Specifying the environment variables\n "
        },
        {
          "filename": "requirements/base.in",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -14,7 +14,7 @@ django\n django-auth-adfs-db\n django-axes\n django-choices\n-django-cors-middleware\n+django-cors-headers\n django-db-logger\n django-extra-views\n django-loose-fk"
        },
        {
          "filename": "requirements/base.txt",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -18,7 +18,7 @@ django-auth-adfs-db==0.2.0  # via -r requirements/base.in\n django-auth-adfs==1.3.1   # via django-auth-adfs-db\n django-axes==4.4.0        # via -r requirements/base.in\n django-choices==1.7.0     # via -r requirements/base.in, drc-cmis, vng-api-common, zgw-consumers\n-django-cors-middleware==1.3.1  # via -r requirements/base.in\n+django-cors-headers==3.5.0  # via -r requirements/base.in\n django-db-logger==0.1.7   # via -r requirements/base.in\n django-extra-fields==1.2.4  # via -r requirements/base.in\n django-extra-views==0.13.0  # via -r requirements/base.in\n@@ -33,7 +33,7 @@ django-relativedelta==1.0.5  # via -r requirements/base.in, zgw-consumers\n django-sendfile2==0.6.0   # via django-privates\n django-sniplates==0.7.0   # via -r requirements/base.in\n django-solo==1.1.3        # via django-auth-adfs-db, drc-cmis, vng-api-common, zgw-consumers\n-django==2.2.10            # via -r requirements/base.in, django-auth-adfs, django-auth-adfs-db, django-choices, django-db-logger, django-extra-fields, django-extra-views, django-filter, django-loose-fk, django-markup, django-privates, django-redis, django-relativedelta, django-sendfile2, django-sniplates, drc-cmis, drf-nested-routers, drf-yasg, nlx-url-rewriter, vng-api-common, zgw-consumers\n+django==2.2.10            # via -r requirements/base.in, django-auth-adfs, django-auth-adfs-db, django-choices, django-cors-headers, django-db-logger, django-extra-fields, django-extra-views, django-filter, django-loose-fk, django-markup, django-privates, django-redis, django-relativedelta, django-sendfile2, django-sniplates, drc-cmis, drf-nested-routers, drf-yasg, nlx-url-rewriter, vng-api-common, zgw-consumers\n djangorestframework-camel-case==0.2.0  # via -r requirements/base.in, vng-api-common\n djangorestframework-gis==0.14  # via -r requirements/base.in\n djangorestframework==3.9.4  # via -r requirements/base.in, django-extra-fields, django-loose-fk, djangorestframework-gis, drf-nested-routers, drf-yasg, vng-api-common"
        },
        {
          "filename": "requirements/ci.txt",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -24,7 +24,7 @@ django-auth-adfs-db==0.2.0  # via -r requirements/base.txt\n django-auth-adfs==1.3.1   # via -r requirements/base.txt, django-auth-adfs-db\n django-axes==4.4.0        # via -r requirements/base.txt\n django-choices==1.7.0     # via -r requirements/base.txt, drc-cmis, vng-api-common, zgw-consumers\n-django-cors-middleware==1.3.1  # via -r requirements/base.txt\n+django-cors-headers==3.5.0  # via -r requirements/base.txt\n django-db-logger==0.1.7   # via -r requirements/base.txt\n django-extra-fields==1.2.4  # via -r requirements/base.txt\n django-extra-views==0.13.0  # via -r requirements/base.txt\n@@ -40,7 +40,7 @@ django-sendfile2==0.6.0   # via -r requirements/base.txt, django-privates\n django-sniplates==0.7.0   # via -r requirements/base.txt\n django-solo==1.1.3        # via -r requirements/base.txt, django-auth-adfs-db, drc-cmis, vng-api-common, zgw-consumers\n django-webtest==1.9.7     # via -r requirements/test-tools.in\n-django==2.2.10            # via -r requirements/base.txt, django-auth-adfs, django-auth-adfs-db, django-choices, django-db-logger, django-extra-fields, django-extra-views, django-filter, django-loose-fk, django-markup, django-privates, django-redis, django-relativedelta, django-sendfile2, django-sniplates, drc-cmis, drf-nested-routers, drf-yasg, nlx-url-rewriter, vng-api-common, zgw-consumers\n+django==2.2.10            # via -r requirements/base.txt, django-auth-adfs, django-auth-adfs-db, django-choices, django-cors-headers, django-db-logger, django-extra-fields, django-extra-views, django-filter, django-loose-fk, django-markup, django-privates, django-redis, django-relativedelta, django-sendfile2, django-sniplates, drc-cmis, drf-nested-routers, drf-yasg, nlx-url-rewriter, vng-api-common, zgw-consumers\n djangorestframework-camel-case==0.2.0  # via -r requirements/base.txt, vng-api-common\n djangorestframework-gis==0.14  # via -r requirements/base.txt\n djangorestframework==3.9.4  # via -r requirements/base.txt, django-extra-fields, django-loose-fk, djangorestframework-gis, drf-nested-routers, drf-yasg, vng-api-common"
        },
        {
          "filename": "requirements/dev.txt",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -31,7 +31,7 @@ django-auth-adfs-db==0.2.0  # via -r requirements/ci.txt\n django-auth-adfs==1.3.1   # via -r requirements/ci.txt, django-auth-adfs-db\n django-axes==4.4.0        # via -r requirements/ci.txt\n django-choices==1.7.0     # via -r requirements/ci.txt, drc-cmis, vng-api-common, zgw-consumers\n-django-cors-middleware==1.3.1  # via -r requirements/ci.txt\n+django-cors-headers==3.5.0  # via -r requirements/ci.txt\n django-db-logger==0.1.7   # via -r requirements/ci.txt\n django-debug-toolbar==2.0  # via -r requirements/dev.in\n django-extensions==2.2.1  # via -r requirements/dev.in\n@@ -50,7 +50,7 @@ django-silk==4.0.1        # via -r requirements/dev.in\n django-sniplates==0.7.0   # via -r requirements/ci.txt\n django-solo==1.1.3        # via -r requirements/ci.txt, django-auth-adfs-db, drc-cmis, vng-api-common, zgw-consumers\n django-webtest==1.9.7     # via -r requirements/ci.txt\n-django==2.2.10            # via -r requirements/ci.txt, django-auth-adfs, django-auth-adfs-db, django-choices, django-db-logger, django-debug-toolbar, django-extra-fields, django-extra-views, django-filter, django-loose-fk, django-markup, django-privates, django-redis, django-relativedelta, django-sendfile2, django-silk, django-sniplates, drc-cmis, drf-nested-routers, drf-yasg, nlx-url-rewriter, vng-api-common, zgw-consumers\n+django==2.2.10            # via -r requirements/ci.txt, django-auth-adfs, django-auth-adfs-db, django-choices, django-cors-headers, django-db-logger, django-debug-toolbar, django-extra-fields, django-extra-views, django-filter, django-loose-fk, django-markup, django-privates, django-redis, django-relativedelta, django-sendfile2, django-silk, django-sniplates, drc-cmis, drf-nested-routers, drf-yasg, nlx-url-rewriter, vng-api-common, zgw-consumers\n djangorestframework-camel-case==0.2.0  # via -r requirements/ci.txt, vng-api-common\n djangorestframework-gis==0.14  # via -r requirements/ci.txt\n djangorestframework==3.9.4  # via -r requirements/ci.txt, django-extra-fields, django-loose-fk, djangorestframework-gis, drf-nested-routers, drf-yasg, vng-api-common"
        },
        {
          "filename": "src/openzaak/accounts/tests/factories.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -5,6 +5,7 @@\n \n class UserFactory(factory.django.DjangoModelFactory):\n     username = factory.Sequence(lambda n: f\"user-{n}\")\n+    password = factory.PostGenerationMethodCall(\"set_password\")\n \n     class Meta:\n         model = \"accounts.User\""
        },
        {
          "filename": "src/openzaak/conf/includes/base.py",
          "status": "modified",
          "additions": 17,
          "deletions": 12,
          "patch": "@@ -7,6 +7,7 @@\n \n import git\n import sentry_sdk\n+from corsheaders.defaults import default_headers as default_cors_headers\n from sentry_sdk.integrations import django, redis\n \n # NLX directory urls\n@@ -152,13 +153,13 @@\n     \"openzaak.utils.middleware.LogHeadersMiddleware\",\n     \"django.contrib.sessions.middleware.SessionMiddleware\",\n     # 'django.middleware.locale.LocaleMiddleware',\n+    \"corsheaders.middleware.CorsMiddleware\",\n     \"django.middleware.common.CommonMiddleware\",\n     \"django.middleware.csrf.CsrfViewMiddleware\",\n     \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n     \"openzaak.components.autorisaties.middleware.AuthMiddleware\",\n     \"django.contrib.messages.middleware.MessageMiddleware\",\n     \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n-    \"corsheaders.middleware.CorsMiddleware\",\n     \"openzaak.utils.middleware.APIVersionHeaderMiddleware\",\n     \"openzaak.utils.middleware.EnabledMiddleware\",\n ]\n@@ -471,19 +472,23 @@\n #\n # DJANGO-CORS-MIDDLEWARE\n #\n-CORS_ORIGIN_ALLOW_ALL = True\n+CORS_ALLOW_ALL_ORIGINS = config(\"CORS_ALLOW_ALL_ORIGINS\", default=False)\n+CORS_ALLOWED_ORIGINS = config(\"CORS_ALLOWED_ORIGINS\", split=True, default=[])\n+CORS_ALLOWED_ORIGIN_REGEXES = config(\n+    \"CORS_ALLOWED_ORIGIN_REGEXES\", split=True, default=[]\n+)\n+# Authorization is included in default_cors_headers\n CORS_ALLOW_HEADERS = (\n-    \"x-requested-with\",\n-    \"content-type\",\n-    \"accept\",\n-    \"origin\",\n-    \"authorization\",\n-    \"x-csrftoken\",\n-    \"user-agent\",\n-    \"accept-encoding\",\n-    \"accept-crs\",\n-    \"content-crs\",\n+    list(default_cors_headers)\n+    + [\"accept-crs\", \"content-crs\",]\n+    + config(\"CORS_EXTRA_ALLOW_HEADERS\", split=True, default=[])\n )\n+CORS_EXPOSE_HEADERS = [\n+    \"content-crs\",\n+]\n+# Django's SESSION_COOKIE_SAMESITE = \"Lax\" prevents session cookies from being sent\n+# cross-domain. There is no need for these cookies to be sent, since the API itself\n+# uses Bearer Authentication.\n \n #\n # DJANGO-PRIVATES -- safely serve files after authorization"
        },
        {
          "filename": "src/openzaak/conf/includes/environ.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -7,6 +7,8 @@ def config(option: str, default=undefined, *args, **kwargs):\n     if \"split\" in kwargs:\n         kwargs.pop(\"split\")\n         kwargs[\"cast\"] = Csv()\n+        if default == []:\n+            default = \"\"\n \n     if default is not undefined and default is not None:\n         kwargs.setdefault(\"cast\", type(default))"
        },
        {
          "filename": "src/openzaak/tests/test_cors_configuration.py",
          "status": "added",
          "additions": 148,
          "deletions": 0,
          "patch": "@@ -0,0 +1,148 @@\n+# SPDX-License-Identifier: EUPL-1.2\n+# Copyright (C) 2019 - 2020 Dimpact\n+#\n+# Documentation on CORS spec, see MDN\n+# https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n+from unittest.mock import patch\n+\n+from django.test import override_settings\n+from django.urls import path\n+\n+from rest_framework import views\n+from rest_framework.response import Response\n+from rest_framework.test import APITestCase\n+\n+from openzaak.accounts.tests.factories import SuperUserFactory\n+\n+\n+class View(views.APIView):\n+    def get(self, request, *args, **kwargs):\n+        return Response({\"ok\": True})\n+\n+    post = get\n+\n+\n+urlpatterns = [path(\"cors\", View.as_view())]\n+\n+\n+class CorsMixin:\n+    def setUp(self):\n+        super().setUp()\n+        mocker = patch(\n+            \"openzaak.utils.middleware.get_version_mapping\", return_value={\"/\": \"1.0.0\"}\n+        )\n+        mocker.start()\n+        self.addCleanup(mocker.stop)\n+\n+\n+@override_settings(ROOT_URLCONF=\"openzaak.tests.test_cors_configuration\")\n+class DefaultCORSConfigurationTests(CorsMixin, APITestCase):\n+    \"\"\"\n+    Test the default CORS settings.\n+    \"\"\"\n+\n+    def test_preflight_request(self):\n+        \"\"\"\n+        Test the most basic preflight request.\n+        \"\"\"\n+        response = self.client.options(\n+            \"/cors\",\n+            HTTP_ACCESS_CONTROL_REQUEST_METHOD=\"POST\",\n+            HTTP_ACCESS_CONTROL_REQUEST_HEADERS=\"origin, x-requested-with\",\n+            HTTP_ORIGIN=\"https://evil.com\",\n+        )\n+\n+        self.assertNotIn(\"Access-Control-Allow-Origin\", response)\n+        self.assertNotIn(\"Access-Control-Allow-Credentials\", response)\n+\n+    def test_credentialed_request(self):\n+        user = SuperUserFactory.create(password=\"secret\")\n+        self.assertTrue(self.client.login(username=user.username, password=\"secret\"))\n+\n+        response = self.client.get(\"/cors\", HTTP_ORIGIN=\"https://evil.com\",)\n+\n+        self.assertNotIn(\"Access-Control-Allow-Origin\", response)\n+        self.assertNotIn(\"Access-Control-Allow-Credentials\", response)\n+\n+\n+@override_settings(\n+    ROOT_URLCONF=\"openzaak.tests.test_cors_configuration\",\n+    CORS_ALLOW_ALL_ORIGINS=True,\n+    CORS_ALLOW_CREDENTIALS=False,\n+)\n+class CORSEnabledWithoutCredentialsTests(CorsMixin, APITestCase):\n+    \"\"\"\n+    Test the default CORS settings.\n+    \"\"\"\n+\n+    def test_preflight_request(self):\n+        \"\"\"\n+        Test the most basic preflight request.\n+        \"\"\"\n+        response = self.client.options(\n+            \"/cors\",\n+            HTTP_ACCESS_CONTROL_REQUEST_METHOD=\"POST\",\n+            HTTP_ACCESS_CONTROL_REQUEST_HEADERS=\"origin, x-requested-with\",\n+            HTTP_ORIGIN=\"https://evil.com\",\n+        )\n+\n+        # wildcard \"*\" prevents browsers from sending credentials - this is good\n+        self.assertNotEqual(response[\"Access-Control-Allow-Origin\"], \"https://evil.com\")\n+        self.assertEqual(response[\"Access-Control-Allow-Origin\"], \"*\")\n+        self.assertNotIn(\"Access-Control-Allow-Credentials\", response)\n+\n+    def test_simple_request(self):\n+        response = self.client.get(\"/cors\", HTTP_ORIGIN=\"https://evil.com\",)\n+\n+        # wildcard \"*\" prevents browsers from sending credentials - this is good\n+        self.assertNotEqual(response[\"Access-Control-Allow-Origin\"], \"https://evil.com\")\n+        self.assertEqual(response[\"Access-Control-Allow-Origin\"], \"*\")\n+        self.assertNotIn(\"Access-Control-Allow-Credentials\", response)\n+\n+    def test_credentialed_request(self):\n+        user = SuperUserFactory.create(password=\"secret\")\n+        self.assertTrue(self.client.login(username=user.username, password=\"secret\"))\n+\n+        response = self.client.get(\"/cors\", HTTP_ORIGIN=\"https://evil.com\",)\n+\n+        # wildcard \"*\" prevents browsers from sending credentials - this is good\n+        self.assertNotEqual(response[\"Access-Control-Allow-Origin\"], \"https://evil.com\")\n+        self.assertEqual(response[\"Access-Control-Allow-Origin\"], \"*\")\n+        self.assertNotIn(\"Access-Control-Allow-Credentials\", response)\n+\n+\n+@override_settings(\n+    ROOT_URLCONF=\"openzaak.tests.test_cors_configuration\",\n+    CORS_ALLOW_ALL_ORIGINS=True,\n+    CORS_ALLOW_CREDENTIALS=False,\n+)\n+class CORSEnabledWithAuthHeaderTests(CorsMixin, APITestCase):\n+    def test_preflight_request(self):\n+        \"\"\"\n+        Test a pre-flight request for requests including the HTTP Authorization header.\n+\n+        The inclusion of htis header makes it a not-simple request, see\n+        https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests\n+        \"\"\"\n+        response = self.client.options(\n+            \"/cors\",\n+            HTTP_ACCESS_CONTROL_REQUEST_METHOD=\"GET\",\n+            HTTP_ACCESS_CONTROL_REQUEST_HEADERS=\"origin, x-requested-with, authorization\",\n+            HTTP_ORIGIN=\"https://evil.com\",\n+        )\n+\n+        self.assertEqual(response[\"Access-Control-Allow-Origin\"], \"*\")\n+        self.assertIn(\n+            \"authorization\", response[\"Access-Control-Allow-Headers\"].lower(),\n+        )\n+        self.assertNotIn(\"Access-Control-Allow-Credentials\", response)\n+\n+    def test_credentialed_request(self):\n+        response = self.client.get(\n+            \"/cors\",\n+            HTTP_ORIGIN=\"http://localhost:3000\",\n+            HTTP_AUTHORIZATION=\"Bearer foobarbaz\",\n+        )\n+\n+        self.assertEqual(response[\"Access-Control-Allow-Origin\"], \"*\")\n+        self.assertNotIn(\"Access-Control-Allow-Credentials\", response)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "93cef507b476adab90e74d8337c1e162a1ea67dd",
            "date": "2025-01-13T13:37:44Z",
            "author_login": "stevenbal"
          },
          {
            "sha": "16f3c28f865d08661d856c848333bb5169a07b8c",
            "date": "2025-01-09T09:41:56Z",
            "author_login": "stevenbal"
          },
          {
            "sha": "5cc48978f91375414a937e314490a4909804b5f9",
            "date": "2025-01-09T08:48:56Z",
            "author_login": "stevenbal"
          },
          {
            "sha": "06a08814e6db83ad361f8750f46dcbf221d0a4e9",
            "date": "2024-12-31T15:49:27Z",
            "author_login": "annashamray"
          },
          {
            "sha": "920c6eb2dcef08791f7701a3b8b887a10880a21c",
            "date": "2024-12-31T15:18:19Z",
            "author_login": "annashamray"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-346",
    "description": "Open Zaak is a modern, open-source data- and services-layer to enable zaakgericht werken, a Dutch approach to case management. In Open Zaak before version 1.3.3 the Cross-Origin-Resource-Sharing policy in Open Zaak is currently wide open - every client is allowed. This allows evil.com to run scripts that perform AJAX calls to known Open Zaak installations, and the browser will not block these. This was intended to only apply to development machines running on localhost/127.0.0.1. Open Zaak 1.3.3 disables CORS by default, while it can be opted-in through environment variables. The vulnerability does not actually seem exploitable because: a) The session cookie has a `Same-Site: Lax` policy which prevents it from being sent along in Cross-Origin requests. b) All pages that give access to (production) data are login-protected c) `Access-Control-Allow-Credentials` is set to `false` d) CSRF checks probably block the remote origin, since they're not explicitly added to the trusted allowlist.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-12-18T18:15:12.543",
    "last_modified": "2024-11-21T05:19:39.693",
    "fix_date": "2020-12-17T13:04:43Z"
  },
  "references": [
    {
      "url": "https://github.com/open-zaak/open-zaak/blob/master/CHANGELOG.rst#133-2020-12-17",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-zaak/open-zaak/commit/952269269f1b629fce9c94485f83ac13f31d6c46",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-zaak/open-zaak/security/advisories/GHSA-chhr-gxrg-64x7",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-zaak/open-zaak/blob/master/CHANGELOG.rst#133-2020-12-17",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-zaak/open-zaak/commit/952269269f1b629fce9c94485f83ac13f31d6c46",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open-zaak/open-zaak/security/advisories/GHSA-chhr-gxrg-64x7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:10.528894",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "open-zaak",
    "owner": "open-zaak",
    "created_at": "2019-07-26T15:12:06Z",
    "updated_at": "2025-01-13T13:37:49Z",
    "pushed_at": "2025-01-14T16:47:50Z",
    "size": 16315,
    "stars": 38,
    "forks": 36,
    "open_issues": 206,
    "watchers": 38,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 4805788,
      "HTML": 65261,
      "JavaScript": 56574,
      "Shell": 15473,
      "SCSS": 14744,
      "Dockerfile": 3965,
      "Batchfile": 505,
      "PLpgSQL": 168
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T18:20:26.373376"
  }
}