{
  "cve_id": "CVE-2020-26261",
  "github_data": {
    "repository": "jupyterhub/systemdspawner",
    "fix_commit": "a4d08fd2ade1cfd0ef2c29dc221e649345f23580",
    "related_commits": [
      "a4d08fd2ade1cfd0ef2c29dc221e649345f23580",
      "a4d08fd2ade1cfd0ef2c29dc221e649345f23580"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "a4d08fd2ade1cfd0ef2c29dc221e649345f23580",
      "commit_date": "2020-12-07T11:48:58Z",
      "author": {
        "login": "minrk",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-cg54-gpgr-4rm6",
        "length": 111,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 132,
        "additions": 117,
        "deletions": 15
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -1,5 +1,16 @@\n # Changelog\n \n+## v0.15\n+\n+Fixes vulnerability [GHSA-cg54-gpgr-4rm6](https://github.com/jupyterhub/systemdspawner/security/advisories/GHSA-cg54-gpgr-4rm6) affecting all previous releases.\n+\n+- Use EnvironmentFile to pass environment variables to units.\n+\n+## v0.14\n+\n+- define entrypoints for JupyterHub spawner configuration\n+- Fixes for CentOS 7\n+\n ## v0.13\n \n ### Bug Fixes"
        },
        {
          "filename": "setup.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2,7 +2,7 @@\n \n setup(\n     name='jupyterhub-systemdspawner',\n-    version='0.14',\n+    version='0.15.0',\n     description='JupyterHub Spawner using systemd for resource isolation',\n     long_description='See https://github.com/jupyterhub/systemdspawner for more info',\n     url='https://github.com/jupyterhub/systemdspawner',"
        },
        {
          "filename": "systemdspawner/systemd.py",
          "status": "modified",
          "additions": 78,
          "deletions": 6,
          "patch": "@@ -4,8 +4,62 @@\n Contains functions to start, stop & poll systemd services.\n Probably not very useful outside this spawner.\n \"\"\"\n+\n import asyncio\n+import os\n+import re\n import shlex\n+import warnings\n+\n+# light validation of environment variable keys\n+env_pat = re.compile(\"[A-Za-z_]+\")\n+\n+RUN_ROOT = \"/run\"\n+\n+def ensure_environment_directory(environment_file_directory):\n+    \"\"\"Ensure directory for environment files exists and is private\"\"\"\n+    # ensure directory exists\n+    os.makedirs(environment_file_directory, mode=0o700, exist_ok=True)\n+    # validate permissions\n+    mode = os.stat(environment_file_directory).st_mode\n+    if mode & 0o077:\n+        warnings.warn(\n+            f\"Fixing permissions on environment directory {environment_file_directory}: {oct(mode)}\",\n+            RuntimeWarning,\n+        )\n+        os.chmod(environment_file_directory, 0o700)\n+    else:\n+        return\n+    # Check again after supposedly fixing.\n+    # Some filesystems can have weird issues, preventing this from having desired effect\n+    mode = os.stat(environment_file_directory).st_mode\n+    if mode & 0o077:\n+        warnings.warn(\n+            f\"Bad permissions on environment directory {environment_file_directory}: {oct(mode)}\",\n+            RuntimeWarning,\n+        )\n+\n+\n+def make_environment_file(environment_file_directory, unit_name, environment_variables):\n+    \"\"\"Make a systemd environment file\n+\n+    - ensures environment directory exists and is private\n+    - writes private environment file\n+    - returns path to created environment file\n+    \"\"\"\n+    ensure_environment_directory(environment_file_directory)\n+    env_file = os.path.join(environment_file_directory, f\"{unit_name}.env\")\n+    env_lines = []\n+    for key, value in sorted(environment_variables.items()):\n+        assert env_pat.match(key), f\"{key} not a valid environment variable\"\n+        env_lines.append(f\"{key}={shlex.quote(value)}\")\n+    env_lines.append(\"\")  # trailing newline\n+    with open(env_file, mode=\"w\") as f:\n+        # make the file itself private as well\n+        os.fchmod(f.fileno(), 0o400)\n+        f.write(\"\\n\".join(env_lines))\n+\n+    return env_file\n \n \n async def start_transient_service(\n@@ -20,14 +74,32 @@ async def start_transient_service(\n     slice=None,\n ):\n     \"\"\"\n-    Start a systemd transient service with given paramters\n+    Start a systemd transient service with given parameters\n     \"\"\"\n \n     run_cmd = [\n         'systemd-run',\n         '--unit', unit_name,\n     ]\n \n+    if properties is None:\n+        properties = {}\n+    else:\n+        properties = properties.copy()\n+\n+    # ensure there is a runtime directory where we can put our env file\n+    # If already set, can be space-separated list of paths\n+    runtime_directories = properties.setdefault(\"RuntimeDirectory\", unit_name).split()\n+\n+    # runtime directories are always resolved relative to `/run`\n+    # grab the first item, if more than one\n+    runtime_dir = os.path.join(RUN_ROOT, runtime_directories[0])\n+    # make runtime directories private by default\n+    properties.setdefault(\"RuntimeDirectoryMode\", \"700\")\n+    # preserve runtime directories across restarts\n+    # allows `systemctl restart` to load the env\n+    properties.setdefault(\"RuntimeDirectoryPreserve\", \"restart\")\n+\n     if properties:\n         for key, value in properties.items():\n             if isinstance(value, list):\n@@ -37,10 +109,10 @@ async def start_transient_service(\n                 run_cmd.append('--property={}={}'.format(key, value))\n \n     if environment_variables:\n-        run_cmd += [\n-            '--setenv={}={}'.format(key, value)\n-            for key, value in environment_variables.items()\n-        ]\n+        environment_file = make_environment_file(\n+            runtime_dir, unit_name, environment_variables\n+        )\n+        run_cmd.append(f\"--property=EnvironmentFile={environment_file}\")\n \n     # Explicitly check if uid / gid are not None, since 0 is valid value for both\n     if uid is not None:\n@@ -51,7 +123,7 @@ async def start_transient_service(\n \n     if slice is not None:\n         run_cmd += ['--slice={}'.format(slice)]\n-    \n+\n     # We unfortunately have to resort to doing cd with bash, since WorkingDirectory property\n     # of systemd units can't be set for transient units via systemd-run until systemd v227.\n     # Centos 7 has systemd 219, and will probably never upgrade - so we need to support them."
        },
        {
          "filename": "tests/test_systemd.py",
          "status": "modified",
          "additions": 27,
          "deletions": 8,
          "patch": "@@ -65,23 +65,42 @@ async def test_service_running_fail():\n async def test_env_setting():\n     unit_name = 'systemdspawner-unittest-' + str(time.time())\n     with tempfile.TemporaryDirectory() as d:\n+        os.chmod(d, 0o777)\n         await systemd.start_transient_service(\n             unit_name,\n-            ['/bin/bash'],\n-            ['-c', 'env > {}/env'.format(d)],\n-            working_dir='/',\n+            [\"/bin/bash\"],\n+            [\"-c\", \"pwd; ls -la {0}; env > ./env; sleep 3\".format(d)],\n+            working_dir=d,\n             environment_variables={\n-                'TESTING_SYSTEMD_ENV_1': 'TEST_1',\n-                'TESTING_SYSTEMD_ENV_2': 'TEST_2'\n-            }\n+                \"TESTING_SYSTEMD_ENV_1\": \"TEST 1\",\n+                \"TESTING_SYSTEMD_ENV_2\": \"TEST 2\",\n+            },\n+            # set user to ensure we are testing permission issues\n+            properties={\n+                \"User\": \"65534\",\n+            },\n         )\n+        env_dir = os.path.join(systemd.RUN_ROOT, unit_name)\n+        assert os.path.isdir(env_dir)\n+        assert (os.stat(env_dir).st_mode & 0o777) == 0o700\n \n         # Wait a tiny bit for the systemd unit to complete running\n         await asyncio.sleep(0.1)\n+        assert await systemd.service_running(unit_name)\n+\n+        env_file = os.path.join(env_dir, f\"{unit_name}.env\")\n+        assert os.path.exists(env_file)\n+        assert (os.stat(env_file).st_mode & 0o777) == 0o400\n+        # verify that the env had the desired effect\n         with open(os.path.join(d, 'env')) as f:\n             text = f.read()\n-            assert 'TESTING_SYSTEMD_ENV_1=TEST_1' in text\n-            assert 'TESTING_SYSTEMD_ENV_2=TEST_2' in text\n+            assert \"TESTING_SYSTEMD_ENV_1=TEST 1\" in text\n+            assert \"TESTING_SYSTEMD_ENV_2=TEST 2\" in text\n+\n+        await systemd.stop_service(unit_name)\n+        assert not await systemd.service_running(unit_name)\n+        # systemd cleans up env file\n+        assert not os.path.exists(env_file)\n \n \n @pytest.mark.asyncio"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a448f2aadfd9dd409f1bd90cfbf986034ee2dcee",
            "date": "2024-10-20T13:40:31Z",
            "author_login": "consideRatio"
          },
          {
            "sha": "2f6bde8a9b9daff4b8c0453c6baa972a7f94aa21",
            "date": "2024-10-20T13:40:22Z",
            "author_login": "consideRatio"
          },
          {
            "sha": "afa41bbec9b0607ff33da29dd9eda280eba9cda3",
            "date": "2024-10-20T13:39:58Z",
            "author_login": "consideRatio"
          },
          {
            "sha": "05466cb566f326bad6c270f22cf984ab9e795dd8",
            "date": "2024-10-20T12:50:59Z",
            "author_login": "consideRatio"
          },
          {
            "sha": "ba131abd79d7f6c5646f1b9fbb6cf53af21b43f5",
            "date": "2024-10-20T12:27:21Z",
            "author_login": "consideRatio"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.9,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-668",
    "description": "jupyterhub-systemdspawner enables JupyterHub to spawn single-user notebook servers using systemd. In jupyterhub-systemdspawner before version 0.15 user API tokens issued to single-user servers are specified in the environment of systemd units. These tokens are incorrectly accessible to all users. In particular, the-littlest-jupyterhub is affected, which uses systemdspawner by default. This is patched in jupyterhub-systemdspawner v0.15",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-12-09T17:15:30.603",
    "last_modified": "2024-11-21T05:19:41.350",
    "fix_date": "2020-12-07T11:48:58Z"
  },
  "references": [
    {
      "url": "https://github.com/jupyterhub/systemdspawner/blob/master/CHANGELOG.md#v015",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/systemdspawner/commit/a4d08fd2ade1cfd0ef2c29dc221e649345f23580",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/systemdspawner/security/advisories/GHSA-cg54-gpgr-4rm6",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/jupyterhub-systemdspawner/",
      "source": "security-advisories@github.com",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/systemdspawner/blob/master/CHANGELOG.md#v015",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/systemdspawner/commit/a4d08fd2ade1cfd0ef2c29dc221e649345f23580",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/systemdspawner/security/advisories/GHSA-cg54-gpgr-4rm6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/jupyterhub-systemdspawner/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:10.505482",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "systemdspawner",
    "owner": "jupyterhub",
    "created_at": "2016-09-06T07:20:44Z",
    "updated_at": "2024-12-05T06:02:37Z",
    "pushed_at": "2024-12-01T05:32:30Z",
    "size": 192,
    "stars": 92,
    "forks": 45,
    "open_issues": 26,
    "watchers": 92,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 34841,
      "Shell": 1082
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T08:18:57.164759"
  }
}