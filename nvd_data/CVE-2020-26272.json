{
  "cve_id": "CVE-2020-26272",
  "github_data": {
    "repository": "electron/electron",
    "fix_commit": "07a1c2a3e5845901f7e2eda9506695be58edc73c",
    "related_commits": [
      "07a1c2a3e5845901f7e2eda9506695be58edc73c",
      "07a1c2a3e5845901f7e2eda9506695be58edc73c"
    ],
    "patch_url": "https://github.com/electron/electron/commit/07a1c2a3e5845901f7e2eda9506695be58edc73c.patch",
    "fix_commit_details": {
      "sha": "07a1c2a3e5845901f7e2eda9506695be58edc73c",
      "commit_date": "2020-12-09T20:48:16Z",
      "author": {
        "login": "nornagon",
        "type": "User",
        "stats": {
          "total_commits": 1229,
          "average_weekly_commits": 1.9854604200323103,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 232
        }
      },
      "commit_message": {
        "title": "fix: restrict sendToFrame to same-process frames by default (#26875)",
        "length": 68,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 125,
        "additions": 89,
        "deletions": 36
      },
      "files": [
        {
          "filename": "docs/api/structures/ipc-main-event.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1,5 +1,6 @@\n # IpcMainEvent Object extends `Event`\n \n+* `processId` Integer - The internal ID of the renderer process that sent this message\n * `frameId` Integer - The ID of the renderer frame that sent this message\n * `returnValue` any - Set this to the value to be returned in a synchronous message\n * `sender` WebContents - Returns the `webContents` that sent the message"
        },
        {
          "filename": "docs/api/structures/ipc-main-invoke-event.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1,4 +1,5 @@\n # IpcMainInvokeEvent Object extends `Event`\n \n+* `processId` Integer - The internal ID of the renderer process that sent this message\n * `frameId` Integer - The ID of the renderer frame that sent this message\n * `sender` WebContents - Returns the `webContents` that sent the message"
        },
        {
          "filename": "docs/api/web-contents.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1696,7 +1696,7 @@ app.whenReady().then(() => {\n \n #### `contents.sendToFrame(frameId, channel, ...args)`\n \n-* `frameId` Integer\n+* `frameId` Integer | [number, number]\n * `channel` String\n * `...args` any[]\n "
        },
        {
          "filename": "lib/browser/api/web-contents.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 9,
          "patch": "@@ -148,23 +148,23 @@ WebContents.prototype._sendInternal = function (channel, ...args) {\n \n   return this._send(true /* internal */, channel, args);\n };\n-WebContents.prototype.sendToFrame = function (frameId, channel, ...args) {\n+WebContents.prototype.sendToFrame = function (frame, channel, ...args) {\n   if (typeof channel !== 'string') {\n     throw new Error('Missing required channel argument');\n-  } else if (typeof frameId !== 'number') {\n-    throw new Error('Missing required frameId argument');\n+  } else if (!(typeof frame === 'number' || Array.isArray(frame))) {\n+    throw new Error('Missing required frame argument (must be number or array)');\n   }\n \n-  return this._sendToFrame(false /* internal */, frameId, channel, args);\n+  return this._sendToFrame(false /* internal */, frame, channel, args);\n };\n-WebContents.prototype._sendToFrameInternal = function (frameId, channel, ...args) {\n+WebContents.prototype._sendToFrameInternal = function (frame, channel, ...args) {\n   if (typeof channel !== 'string') {\n     throw new Error('Missing required channel argument');\n-  } else if (typeof frameId !== 'number') {\n-    throw new Error('Missing required frameId argument');\n+  } else if (!(typeof frame === 'number' || Array.isArray(frame))) {\n+    throw new Error('Missing required frame argument (must be number or array)');\n   }\n \n-  return this._sendToFrame(true /* internal */, frameId, channel, args);\n+  return this._sendToFrame(true /* internal */, frame, channel, args);\n };\n \n // Following methods are mapped to webFrame.\n@@ -456,8 +456,9 @@ WebContents.prototype._callWindowOpenHandler = function (event: any, url: string\n };\n \n const addReplyToEvent = (event: any) => {\n+  const { processId, frameId } = event;\n   event.reply = (...args: any[]) => {\n-    event.sender.sendToFrame(event.frameId, ...args);\n+    event.sender.sendToFrame([processId, frameId], ...args);\n   };\n };\n "
        },
        {
          "filename": "lib/browser/remote/server.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -20,7 +20,7 @@ const FUNCTION_PROPERTIES = [\n ];\n \n type RendererFunctionId = [string, number] // [contextId, funcId]\n-type FinalizerInfo = { id: RendererFunctionId, webContents: electron.WebContents, frameId: number };\n+type FinalizerInfo = { id: RendererFunctionId, webContents: electron.WebContents, frameId: [number, number] };\n type CallIntoRenderer = (...args: any[]) => void\n \n // The remote functions in renderer processes.\n@@ -43,7 +43,7 @@ function getCachedRendererFunction (id: RendererFunctionId): CallIntoRenderer |\n     if (deref !== undefined) return deref;\n   }\n }\n-function setCachedRendererFunction (id: RendererFunctionId, wc: electron.WebContents, frameId: number, value: CallIntoRenderer) {\n+function setCachedRendererFunction (id: RendererFunctionId, wc: electron.WebContents, frameId: [number, number], value: CallIntoRenderer) {\n   // eslint-disable-next-line no-undef\n   const wr = new WeakRef<CallIntoRenderer>(value);\n   const mapKey = id[0] + '~' + id[1];\n@@ -220,7 +220,7 @@ const fakeConstructor = (constructor: Function, name: string) =>\n   });\n \n // Convert array of meta data from renderer into array of real values.\n-const unwrapArgs = function (sender: electron.WebContents, frameId: number, contextId: string, args: any[]) {\n+const unwrapArgs = function (sender: electron.WebContents, frameId: [number, number], contextId: string, args: any[]) {\n   const metaToValue = function (meta: MetaTypeFromRenderer): any {\n     switch (meta.type) {\n       case 'nativeimage':\n@@ -423,7 +423,7 @@ handleRemoteCommand(IPC_MESSAGES.BROWSER_GET_CURRENT_WEB_CONTENTS, function (eve\n });\n \n handleRemoteCommand(IPC_MESSAGES.BROWSER_CONSTRUCTOR, function (event, contextId, id, args) {\n-  args = unwrapArgs(event.sender, event.frameId, contextId, args);\n+  args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);\n   const constructor = objectsRegistry.get(id);\n \n   if (constructor == null) {\n@@ -434,7 +434,7 @@ handleRemoteCommand(IPC_MESSAGES.BROWSER_CONSTRUCTOR, function (event, contextId\n });\n \n handleRemoteCommand(IPC_MESSAGES.BROWSER_FUNCTION_CALL, function (event, contextId, id, args) {\n-  args = unwrapArgs(event.sender, event.frameId, contextId, args);\n+  args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);\n   const func = objectsRegistry.get(id);\n \n   if (func == null) {\n@@ -451,7 +451,7 @@ handleRemoteCommand(IPC_MESSAGES.BROWSER_FUNCTION_CALL, function (event, context\n });\n \n handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_CONSTRUCTOR, function (event, contextId, id, method, args) {\n-  args = unwrapArgs(event.sender, event.frameId, contextId, args);\n+  args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);\n   const object = objectsRegistry.get(id);\n \n   if (object == null) {\n@@ -462,7 +462,7 @@ handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_CONSTRUCTOR, function (event, co\n });\n \n handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_CALL, function (event, contextId, id, method, args) {\n-  args = unwrapArgs(event.sender, event.frameId, contextId, args);\n+  args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);\n   const object = objectsRegistry.get(id);\n \n   if (object == null) {\n@@ -479,7 +479,7 @@ handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_CALL, function (event, contextId\n });\n \n handleRemoteCommand(IPC_MESSAGES.BROWSER_MEMBER_SET, function (event, contextId, id, name, args) {\n-  args = unwrapArgs(event.sender, event.frameId, contextId, args);\n+  args = unwrapArgs(event.sender, [event.processId, event.frameId], contextId, args);\n   const obj = objectsRegistry.get(id);\n \n   if (obj == null) {"
        },
        {
          "filename": "shell/browser/api/electron_api_web_contents.cc",
          "status": "modified",
          "additions": 22,
          "deletions": 9,
          "patch": "@@ -2708,7 +2708,7 @@ bool WebContents::SendIPCMessageWithSender(bool internal,\n }\n \n bool WebContents::SendIPCMessageToFrame(bool internal,\n-                                        int32_t frame_id,\n+                                        v8::Local<v8::Value> frame,\n                                         const std::string& channel,\n                                         v8::Local<v8::Value> args) {\n   v8::Isolate* isolate = JavascriptEnvironment::GetIsolate();\n@@ -2718,17 +2718,30 @@ bool WebContents::SendIPCMessageToFrame(bool internal,\n         gin::StringToV8(isolate, \"Failed to serialize arguments\")));\n     return false;\n   }\n-  auto frames = web_contents()->GetAllFrames();\n-  auto iter = std::find_if(frames.begin(), frames.end(), [frame_id](auto* f) {\n-    return f->GetRoutingID() == frame_id;\n-  });\n-  if (iter == frames.end())\n-    return false;\n-  if (!(*iter)->IsRenderFrameLive())\n+  int32_t frame_id;\n+  int32_t process_id;\n+  if (gin::ConvertFromV8(isolate, frame, &frame_id)) {\n+    process_id = web_contents()->GetMainFrame()->GetProcess()->GetID();\n+  } else {\n+    std::vector<int32_t> id_pair;\n+    if (gin::ConvertFromV8(isolate, frame, &id_pair) && id_pair.size() == 2) {\n+      process_id = id_pair[0];\n+      frame_id = id_pair[1];\n+    } else {\n+      isolate->ThrowException(v8::Exception::Error(gin::StringToV8(\n+          isolate,\n+          \"frameId must be a number or a pair of [processId, frameId]\")));\n+      return false;\n+    }\n+  }\n+\n+  auto* rfh = content::RenderFrameHost::FromID(process_id, frame_id);\n+  if (!rfh || !rfh->IsRenderFrameLive() ||\n+      content::WebContents::FromRenderFrameHost(rfh) != web_contents())\n     return false;\n \n   mojo::AssociatedRemote<mojom::ElectronRenderer> electron_renderer;\n-  (*iter)->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);\n+  rfh->GetRemoteAssociatedInterfaces()->GetInterface(&electron_renderer);\n   electron_renderer->Message(internal, channel, std::move(message),\n                              0 /* sender_id */);\n   return true;"
        },
        {
          "filename": "shell/browser/api/electron_api_web_contents.h",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -258,7 +258,7 @@ class WebContents : public gin::Wrappable<WebContents>,\n                                 int32_t sender_id = 0);\n \n   bool SendIPCMessageToFrame(bool internal,\n-                             int32_t frame_id,\n+                             v8::Local<v8::Value> frame,\n                              const std::string& channel,\n                              v8::Local<v8::Value> args);\n "
        },
        {
          "filename": "shell/common/gin_helper/event_emitter.cc",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -5,6 +5,7 @@\n #include \"shell/common/gin_helper/event_emitter.h\"\n \n #include \"content/public/browser/render_frame_host.h\"\n+#include \"content/public/browser/render_process_host.h\"\n #include \"shell/browser/api/event.h\"\n #include \"shell/common/gin_helper/dictionary.h\"\n #include \"shell/common/gin_helper/object_template_builder.h\"\n@@ -67,8 +68,10 @@ v8::Local<v8::Object> CreateNativeEvent(\n   Dictionary dict(isolate, event);\n   dict.Set(\"sender\", sender);\n   // Should always set frameId even when callback is null.\n-  if (frame)\n+  if (frame) {\n     dict.Set(\"frameId\", frame->GetRoutingID());\n+    dict.Set(\"processId\", frame->GetProcess()->GetID());\n+  }\n   return event;\n }\n "
        },
        {
          "filename": "spec-main/api-ipc-main-spec.ts",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@ import * as path from 'path';\n import * as cp from 'child_process';\n import { closeAllWindows } from './window-helpers';\n import { emittedOnce } from './events-helpers';\n+import { defer } from './spec-helpers';\n import { ipcMain, BrowserWindow } from 'electron/main';\n \n describe('ipc main module', () => {\n@@ -59,5 +60,30 @@ describe('ipc main module', () => {\n       output = JSON.parse(output);\n       expect(output).to.deep.equal(['error']);\n     });\n+\n+    it('can be replied to', async () => {\n+      ipcMain.on('test-echo', (e, arg) => {\n+        e.reply('test-echo', arg);\n+      });\n+      defer(() => {\n+        ipcMain.removeAllListeners('test-echo');\n+      });\n+\n+      const w = new BrowserWindow({\n+        show: false,\n+        webPreferences: {\n+          nodeIntegration: true\n+        }\n+      });\n+      w.loadURL('about:blank');\n+      const v = await w.webContents.executeJavaScript(`new Promise((resolve, reject) => {\n+        const { ipcRenderer } = require('electron')\n+        ipcRenderer.send('test-echo', 'hello')\n+        ipcRenderer.on('test-echo', (e, v) => {\n+          resolve(v)\n+        })\n+      })`);\n+      expect(v).to.equal('hello');\n+    });\n   });\n });"
        },
        {
          "filename": "spec-main/fixtures/snapshots/proxy-window-open.snapshot.txt",
          "status": "modified",
          "additions": 10,
          "deletions": 5,
          "patch": "@@ -3,7 +3,8 @@\n     \"top=5,left=10,resizable=no\",\n     {\n       \"sender\": \"[WebContents]\",\n-      \"frameId\": 1\n+      \"frameId\": 1,\n+      \"processId\": \"placeholder-process-id\"\n     },\n     \"about:blank\",\n     \"frame name\",\n@@ -37,7 +38,8 @@\n     \"zoomFactor=2,resizable=0,x=0,y=10\",\n     {\n       \"sender\": \"[WebContents]\",\n-      \"frameId\": 1\n+      \"frameId\": 1,\n+      \"processId\": \"placeholder-process-id\"\n     },\n     \"about:blank\",\n     \"frame name\",\n@@ -70,7 +72,8 @@\n     \"backgroundColor=gray,webPreferences=0,x=100,y=100\",\n     {\n       \"sender\": \"[WebContents]\",\n-      \"frameId\": 1\n+      \"frameId\": 1,\n+      \"processId\": \"placeholder-process-id\"\n     },\n     \"about:blank\",\n     \"frame name\",\n@@ -103,7 +106,8 @@\n     \"x=50,y=20,title=sup\",\n     {\n       \"sender\": \"[WebContents]\",\n-      \"frameId\": 1\n+      \"frameId\": 1,\n+      \"processId\": \"placeholder-process-id\"\n     },\n     \"about:blank\",\n     \"frame name\",\n@@ -134,7 +138,8 @@\n     \"show=false,top=1,left=1\",\n     {\n       \"sender\": \"[WebContents]\",\n-      \"frameId\": 1\n+      \"frameId\": 1,\n+      \"processId\": \"placeholder-process-id\"\n     },\n     \"about:blank\",\n     \"frame name\","
        },
        {
          "filename": "spec-main/guest-window-manager-spec.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -189,6 +189,9 @@ function stringifySnapshots (snapshots: any, pretty = false) {\n     if (key === 'openerId' && typeof value === 'number') {\n       return 'placeholder-opener-id';\n     }\n+    if (key === 'processId' && typeof value === 'number') {\n+      return 'placeholder-process-id';\n+    }\n     if (key === 'returnValue') {\n       return 'placeholder-guest-contents-id';\n     }"
        },
        {
          "filename": "typings/internal-electron.d.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -68,8 +68,8 @@ declare namespace Electron {\n     _callWindowOpenHandler(event: any, url: string, frameName: string, rawFeatures: string): Electron.BrowserWindowConstructorOptions | null;\n     _setNextChildWebPreferences(prefs: Partial<Electron.BrowserWindowConstructorOptions['webPreferences']> & Pick<Electron.BrowserWindowConstructorOptions, 'backgroundColor'>): void;\n     _send(internal: boolean, channel: string, args: any): boolean;\n-    _sendToFrame(internal: boolean, frameId: number, channel: string, args: any): boolean;\n-    _sendToFrameInternal(frameId: number, channel: string, ...args: any[]): boolean;\n+    _sendToFrame(internal: boolean, frameId: number | [number, number], channel: string, args: any): boolean;\n+    _sendToFrameInternal(frameId: number | [number, number], channel: string, ...args: any[]): boolean;\n     _postMessage(channel: string, message: any, transfer?: any[]): void;\n     _sendInternal(channel: string, ...args: any[]): void;\n     _printToPDF(options: any): Promise<Buffer>;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 9,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5680c628b6718385bbd975b51ec2640aa7df226b",
            "date": "2025-01-14T03:36:03Z",
            "author_login": "wujinli"
          },
          {
            "sha": "e57b69f106ae9c53a527038db4e8222692fa0ce7",
            "date": "2025-01-13T22:15:24Z",
            "author_login": "clavin"
          },
          {
            "sha": "19ee4464c211a0cef3bc5070fbd7b8bd0d5c3c7d",
            "date": "2025-01-11T00:21:08Z",
            "author_login": "mlaurencin"
          },
          {
            "sha": "7d05b7847943a01da3188523e720b17e67d47944",
            "date": "2025-01-10T16:52:34Z",
            "author_login": "electron-roller[bot]"
          },
          {
            "sha": "062d14e553fa85b14ca67b221911e82c5bc1bd12",
            "date": "2025-01-09T02:46:17Z",
            "author_login": "ckerr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-668",
    "description": "The Electron framework lets you write cross-platform desktop applications using JavaScript, HTML and CSS. In affected versions of Electron IPC messages sent from the main process to a subframe in the renderer process, through webContents.sendToFrame, event.reply or when using the remote module, can in some cases be delivered to the wrong frame. If your app uses remote, calls webContents.sendToFrame, or calls event.reply in an IPC message handler then it is impacted by this issue. This has been fixed in versions 9.4.0, 10.2.0, 11.1.0, and 12.0.0-beta.9. There are no workarounds for this issue.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-01-28T19:15:13.003",
    "last_modified": "2024-11-21T05:19:43.327",
    "fix_date": "2020-12-09T20:48:16Z"
  },
  "references": [
    {
      "url": "https://github.com/electron/electron/commit/07a1c2a3e5845901f7e2eda9506695be58edc73c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/pull/26875",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/releases/tag/v9.4.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/security/advisories/GHSA-hvf8-h2qh-37m9",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.electronjs.org/releases/stable?version=9#9.4.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/commit/07a1c2a3e5845901f7e2eda9506695be58edc73c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/pull/26875",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/releases/tag/v9.4.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/electron/electron/security/advisories/GHSA-hvf8-h2qh-37m9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.electronjs.org/releases/stable?version=9#9.4.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:13.173463",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "electron",
    "owner": "electron",
    "created_at": "2013-04-12T01:47:36Z",
    "updated_at": "2025-01-14T12:00:37Z",
    "pushed_at": "2025-01-14T12:17:40Z",
    "size": 160685,
    "stars": 115159,
    "forks": 15727,
    "open_issues": 986,
    "watchers": 115159,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1-3-x",
      "1-4-x",
      "1-5-x",
      "1-6-x",
      "1-7-x",
      "1-8-x",
      "2-0-x",
      "2-1-x",
      "3-0-x",
      "3-1-x",
      "4-0-x",
      "4-1-x",
      "4-2-x",
      "5-0-x",
      "6-0-x",
      "6-1-x",
      "7-0-x",
      "7-1-x",
      "7-2-x",
      "7-3-x",
      "8-x-y",
      "9-x-y",
      "10-x-y",
      "11-x-y",
      "12-x-y",
      "13-x-y",
      "14-x-y",
      "15-x-y",
      "16-x-y",
      "17-x-y"
    ],
    "languages": {
      "C++": 3784754,
      "TypeScript": 2172126,
      "Objective-C++": 404368,
      "JavaScript": 152129,
      "Python": 131385,
      "Objective-C": 44933,
      "HTML": 12057,
      "Shell": 8704,
      "Batchfile": 2794,
      "C": 2472,
      "CSS": 2369
    },
    "commit_activity": {
      "total_commits_last_year": 1162,
      "avg_commits_per_week": 22.346153846153847,
      "days_active_last_year": 245
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T12:58:58.367079"
  }
}