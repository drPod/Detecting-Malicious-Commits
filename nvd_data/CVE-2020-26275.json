{
  "cve_id": "CVE-2020-26275",
  "github_data": {
    "repository": "jupyter-server/jupyter_server",
    "fix_commit": "85e4abccf6ea9321d29153f73b0bd72ccb3a6bca",
    "related_commits": [
      "85e4abccf6ea9321d29153f73b0bd72ccb3a6bca",
      "85e4abccf6ea9321d29153f73b0bd72ccb3a6bca"
    ],
    "patch_url": "https://github.com/jupyter-server/jupyter_server/commit/85e4abccf6ea9321d29153f73b0bd72ccb3a6bca.patch",
    "fix_commit_details": {
      "sha": "85e4abccf6ea9321d29153f73b0bd72ccb3a6bca",
      "commit_date": "2020-12-16T22:03:59Z",
      "author": {
        "login": "Zsailer",
        "type": "User",
        "stats": {
          "total_commits": 433,
          "average_weekly_commits": 0.4942922374429224,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 120
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-9f66-54xg-pc2c",
        "length": 78,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 114,
        "additions": 108,
        "deletions": 6
      },
      "files": [
        {
          "filename": "jupyter_server/auth/login.py",
          "status": "modified",
          "additions": 13,
          "deletions": 6,
          "patch": "@@ -36,14 +36,19 @@ def _redirect_safe(self, url, default=None):\n         \"\"\"\n         if default is None:\n             default = self.base_url\n-        if not url.startswith(self.base_url):\n+        # protect chrome users from mishandling unescaped backslashes.\n+        # \\ is not valid in urls, but some browsers treat it as /\n+        # instead of %5C, causing `\\\\` to behave as `//`\n+        url = url.replace(\"\\\\\", \"%5C\")\n+        parsed = urlparse(url)\n+        if parsed.netloc or not (parsed.path + \"/\").startswith(self.base_url):\n             # require that next_url be absolute path within our path\n             allow = False\n             # OR pass our cross-origin check\n-            if '://' in url:\n+            if parsed.netloc:\n                 # if full URL, run our cross-origin check:\n-                parsed = urlparse(url.lower())\n                 origin = '%s://%s' % (parsed.scheme, parsed.netloc)\n+                origin = origin.lower()\n                 if self.allow_origin:\n                     allow = self.allow_origin == origin\n                 elif self.allow_origin_pat:\n@@ -77,9 +82,11 @@ def post(self):\n                 self.set_login_cookie(self, uuid.uuid4().hex)\n             elif self.token and self.token == typed_password:\n                 self.set_login_cookie(self, uuid.uuid4().hex)\n-                if new_password and self.settings.get('allow_password_change'):\n-                    config_dir = self.settings.get('config_dir')\n-                    config_file = os.path.join(config_dir, 'jupyter_server_config.json')\n+                if new_password and self.settings.get(\"allow_password_change\"):\n+                    config_dir = self.settings.get(\"config_dir\")\n+                    config_file = os.path.join(\n+                        config_dir, \"jupyter_notebook_config.json\"\n+                    )\n                     set_password(new_password, config_file=config_file)\n                     self.log.info(\"Wrote hashed password to %s\" % config_file)\n             else:"
        },
        {
          "filename": "tests/auth/test_login.py",
          "status": "added",
          "additions": 95,
          "deletions": 0,
          "patch": "@@ -0,0 +1,95 @@\n+\"\"\"Tests for login redirects\"\"\"\n+\n+from functools import partial\n+from urllib.parse import urlencode\n+\n+import pytest\n+from tornado.httpclient import HTTPClientError\n+from tornado.httputil import url_concat, parse_cookie\n+\n+from jupyter_server.utils import url_path_join\n+\n+\n+# override default config to ensure a non-empty base url is used\n+@pytest.fixture\n+def jp_base_url():\n+    return \"/a%40b/\"\n+\n+\n+@pytest.fixture\n+def jp_server_config(jp_base_url):\n+    return {\n+        \"ServerApp\": {\n+            \"base_url\": jp_base_url,\n+        },\n+    }\n+\n+\n+async def _login(jp_serverapp, http_server_client, jp_base_url, next):\n+    # first: request login page with no creds\n+    login_url = url_path_join(jp_base_url, \"login\")\n+    first = await http_server_client.fetch(login_url)\n+    cookie_header = first.headers[\"Set-Cookie\"]\n+    cookies = parse_cookie(cookie_header)\n+\n+    # second, submit login form with credentials\n+    try:\n+        resp = await http_server_client.fetch(\n+            url_concat(login_url, {\"next\": next}),\n+            method=\"POST\",\n+            body=urlencode(\n+                {\n+                    \"password\": jp_serverapp.token,\n+                    \"_xsrf\": cookies.get(\"_xsrf\", \"\"),\n+                }\n+            ),\n+            headers={\"Cookie\": cookie_header},\n+            follow_redirects=False,\n+        )\n+    except HTTPClientError as e:\n+        if e.code != 302:\n+            raise\n+        return e.response.headers[\"Location\"]\n+    else:\n+        assert resp.code == 302, \"Should have returned a redirect!\"\n+\n+\n+@pytest.fixture\n+def login(jp_serverapp, http_server_client, jp_base_url):\n+    \"\"\"Fixture to return a function to login to a Jupyter server\n+\n+    by submitting the login page form\n+    \"\"\"\n+    yield partial(_login, jp_serverapp, http_server_client, jp_base_url)\n+\n+\n+@pytest.mark.parametrize(\n+    \"bad_next\",\n+    (\n+        r\"\\\\tree\",\n+        \"//some-host\",\n+        \"//host{base_url}tree\",\n+        \"https://google.com\",\n+        \"/absolute/not/base_url\",\n+    ),\n+)\n+async def test_next_bad(login, jp_base_url, bad_next):\n+    bad_next = bad_next.format(base_url=jp_base_url)\n+    url = await login(bad_next)\n+    assert url == jp_base_url\n+\n+\n+@pytest.mark.parametrize(\n+    \"next_path\",\n+    (\n+        \"tree/\",\n+        \"//{base_url}tree\",\n+        \"notebooks/notebook.ipynb\",\n+        \"tree//something\",\n+    ),\n+)\n+async def test_next_ok(login, jp_base_url, next_path):\n+    next_path = next_path.format(base_url=jp_base_url)\n+    expected = jp_base_url + next_path\n+    actual = await login(next=expected)\n+    assert actual == expected"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "952782bc9636baa74f4a03966e1c14b43808d703",
            "date": "2024-12-20T13:02:28Z",
            "author_login": "minrk"
          },
          {
            "sha": "8a6f60774599b4d72ad449f98ab2214d2d035bb4",
            "date": "2024-12-20T13:02:26Z",
            "author_login": "minrk"
          },
          {
            "sha": "f23b3392624001c8fba6623e19f526a98b4a07ba",
            "date": "2024-12-20T12:52:39Z",
            "author_login": "minrk"
          },
          {
            "sha": "219597175e8275e7f3e958952a4254aedc046859",
            "date": "2024-12-20T12:23:45Z",
            "author_login": "minrk"
          },
          {
            "sha": "e74da85b1ed78151e62311f3610660315847145d",
            "date": "2024-12-20T12:06:13Z",
            "author_login": "cjwatson"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-601",
    "description": "The Jupyter Server provides the backend (i.e. the core services, APIs, and REST endpoints) for Jupyter web applications like Jupyter notebook, JupyterLab, and Voila. In Jupyter Server before version 1.1.1, an open redirect vulnerability could cause the jupyter server to redirect the browser to a different malicious website. All jupyter servers running without a base_url prefix are technically affected, however, these maliciously crafted links can only be reasonably made for known jupyter server hosts. A link to your jupyter server may *appear* safe, but ultimately redirect to a spoofed server on the public internet. This same vulnerability was patched in upstream notebook v5.7.8. This is fixed in jupyter_server 1.1.1. If upgrade is not available, a workaround can be to run your server on a url prefix: \"jupyter server --ServerApp.base_url=/jupyter/\".",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-12-21T18:15:15.353",
    "last_modified": "2024-11-21T05:19:43.843",
    "fix_date": "2020-12-16T22:03:59Z"
  },
  "references": [
    {
      "url": "https://advisory.checkmarx.net/advisory/CX-2020-4291",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyter-server/jupyter_server/commit/85e4abccf6ea9321d29153f73b0bd72ccb3a6bca",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyter-server/jupyter_server/security/advisories/GHSA-9f66-54xg-pc2c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/jupyter-server/",
      "source": "security-advisories@github.com",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://advisory.checkmarx.net/advisory/CX-2020-4291",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyter-server/jupyter_server/commit/85e4abccf6ea9321d29153f73b0bd72ccb3a6bca",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyter-server/jupyter_server/security/advisories/GHSA-9f66-54xg-pc2c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/jupyter-server/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:10.531014",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jupyter_server",
    "owner": "jupyter-server",
    "created_at": "2016-09-21T19:18:45Z",
    "updated_at": "2025-01-08T11:04:52Z",
    "pushed_at": "2025-01-06T21:30:38Z",
    "size": 25887,
    "stars": 496,
    "forks": 313,
    "open_issues": 205,
    "watchers": 496,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.x",
      "1.0.x",
      "main"
    ],
    "languages": {
      "Python": 1075364,
      "HTML": 10136,
      "CSS": 1414,
      "JavaScript": 528
    },
    "commit_activity": {
      "total_commits_last_year": 76,
      "avg_commits_per_week": 1.4615384615384615,
      "days_active_last_year": 31
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T15:10:39.648352"
  }
}