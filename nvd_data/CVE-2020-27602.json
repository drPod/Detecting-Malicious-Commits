{
  "cve_id": "CVE-2020-27602",
  "github_data": {
    "repository": "bigbluebutton/bigbluebutton",
    "fix_commit": "4bfd924c64da2681f4c037026021f47eb189d717",
    "related_commits": [
      "4bfd924c64da2681f4c037026021f47eb189d717",
      "4bfd924c64da2681f4c037026021f47eb189d717"
    ],
    "patch_url": "https://github.com/bigbluebutton/bigbluebutton/commit/4bfd924c64da2681f4c037026021f47eb189d717.patch",
    "fix_commit_details": {
      "sha": "4bfd924c64da2681f4c037026021f47eb189d717",
      "commit_date": "2020-04-29T03:33:45Z",
      "author": {
        "login": "TiagoJacobs",
        "type": "User",
        "stats": {
          "total_commits": 92,
          "average_weekly_commits": 0.10623556581986143,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 47
        }
      },
      "commit_message": {
        "title": "Refactor connection definition of userId to wait for validateAuthToken",
        "length": 70,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 115,
        "additions": 97,
        "deletions": 18
      },
      "files": [
        {
          "filename": "bigbluebutton-html5/imports/api/users/server/handlers/validateAuthToken.js",
          "status": "modified",
          "additions": 50,
          "deletions": 1,
          "patch": "@@ -2,6 +2,9 @@ import { check } from 'meteor/check';\n import Logger from '/imports/startup/server/logger';\n import Users from '/imports/api/users';\n import userJoin from './userJoin';\n+import pendingAuthenticationsStore from '../store/pendingAuthentications';\n+import createDummyUser from '../modifiers/createDummyUser';\n+import setConnectionIdAndAuthToken from '../modifiers/setConnectionIdAndAuthToken';\n \n const clearOtherSessions = (sessionUserId, current = false) => {\n   const serverSessions = Meteor.server.sessions;\n@@ -12,12 +15,58 @@ const clearOtherSessions = (sessionUserId, current = false) => {\n };\n \n export default function handleValidateAuthToken({ body }, meetingId) {\n-  const { userId, valid, waitForApproval } = body;\n+  const { userId, valid, authToken, waitForApproval } = body;\n \n   check(userId, String);\n+  check(authToken, String);\n   check(valid, Boolean);\n   check(waitForApproval, Boolean);\n \n+  const pendingAuths = pendingAuthenticationsStore.take(meetingId, userId, authToken);\n+\n+  if(!valid) {\n+    pendingAuths.forEach ( \n+      pendingAuth => {\n+        try {\n+          const {methodInvocationObject} = pendingAuth;\n+          const connectionId = methodInvocationObject.connection.id;\n+\n+          methodInvocationObject.connection.close();\n+          Logger.info(`Closed connection ${connectionId} due to invalid auth token.`);\n+        } catch (e) {\n+          Logger.error(`Error closing socket for meetingId '${meetingId}', userId '${userId}', authToken ${authToken}`);\n+        }\n+      }\n+    );\n+    \n+    return;\n+  }\n+\n+  if(valid) {\n+    // Define user ID on connections\n+    pendingAuths.forEach ( \n+        pendingAuth => {\n+            const {methodInvocationObject} = pendingAuth;\n+\n+            /* Logic migrated from validateAuthToken method ( postponed to only run in case of success response ) - Begin */\n+            const sessionId = `${meetingId}--${userId}`;\n+            methodInvocationObject.setUserId(sessionId);\n+\n+            const User = Users.findOne({\n+                meetingId,\n+                userId: userId,\n+            });\n+        \n+            if (!User) {\n+                createDummyUser(meetingId, userId, authToken);\n+            }\n+        \n+            setConnectionIdAndAuthToken(meetingId, userId, methodInvocationObject.connection.id, authToken);\n+            /* End of logic migrated from validateAuthToken */\n+        }\n+    );\n+  }\n+\n   const selector = {\n     meetingId,\n     userId,"
        },
        {
          "filename": "bigbluebutton-html5/imports/api/users/server/methods/validateAuthToken.js",
          "status": "modified",
          "additions": 4,
          "deletions": 17,
          "patch": "@@ -1,35 +1,22 @@\n import { Meteor } from 'meteor/meteor';\n import RedisPubSub from '/imports/startup/server/redis';\n import Logger from '/imports/startup/server/logger';\n-import Users from '/imports/api/users';\n-import createDummyUser from '../modifiers/createDummyUser';\n-import setConnectionIdAndAuthToken from '../modifiers/setConnectionIdAndAuthToken';\n+import pendingAuthenticationsStore from '../store/pendingAuthentications';\n \n export default function validateAuthToken(meetingId, requesterUserId, requesterToken) {\n   const REDIS_CONFIG = Meteor.settings.private.redis;\n   const CHANNEL = REDIS_CONFIG.channels.toAkkaApps;\n   const EVENT_NAME = 'ValidateAuthTokenReqMsg';\n \n-  const sessionId = `${meetingId}--${requesterUserId}`;\n-  this.setUserId(sessionId);\n-\n-  const User = Users.findOne({\n-    meetingId,\n-    userId: requesterUserId,\n-  });\n-\n-  if (!User) {\n-    createDummyUser(meetingId, requesterUserId, requesterToken);\n-  }\n-\n-  setConnectionIdAndAuthToken(meetingId, requesterUserId, this.connection.id, requesterToken);\n+  // Store reference of methodInvocationObject ( to postpone the connection userId definition )\n+  pendingAuthenticationsStore.add(meetingId, requesterUserId, requesterToken, this);\n \n   const payload = {\n     userId: requesterUserId,\n     authToken: requesterToken,\n   };\n \n-  Logger.info(`User '${requesterUserId}' is trying to validate auth token for meeting '${meetingId}'`);\n+  Logger.info(`User '${requesterUserId}' is trying to validate auth token for meeting '${meetingId}' from connection '${this.connection.id}'`);\n \n   return RedisPubSub.publishUserMessage(CHANNEL, EVENT_NAME, meetingId, requesterUserId, payload);\n }"
        },
        {
          "filename": "bigbluebutton-html5/imports/api/users/server/store/pendingAuthentications.js",
          "status": "added",
          "additions": 43,
          "deletions": 0,
          "patch": "@@ -0,0 +1,43 @@\n+import Logger from '/imports/startup/server/logger';\n+\n+class PendingAuthentitcations {\n+    constructor () {\n+        Logger.debug(\"PendingAuthentitcations :: constructor\");\n+        this.store = [];\n+    }\n+\n+    generateKey (meetingId, userId, authToken) {\n+        // Protect against separator injection\n+        meetingId = meetingId.replace(/ /g, '');\n+        userId    = userId.replace(/ /g, '');\n+        authToken = authToken.replace(/ /g, '');\n+\n+        // Space separated key\n+        return '${meetingId} ${userId} ${authToken}';\n+    }\n+\n+    add (meetingId, userId, authToken, methodInvocationObject) {\n+        Logger.debug(\"PendingAuthentitcations :: add\", {meetingId, userId, authToken});\n+        this.store.push({\n+            key: this.generateKey(meetingId, userId, authToken),\n+            meetingId, userId, authToken, methodInvocationObject\n+        });\n+    }\n+\n+    take (meetingId, userId, authToken) {\n+        Logger.debug(\"PendingAuthentitcations :: take\", {meetingId, userId, authToken});\n+        const key = this.generateKey(meetingId, userId, authToken);\n+        \n+        // find matches\n+        const matches = this.store.filter( e => e.key === key );\n+        \n+        // remove matches (if any)\n+        if(matches.length) { \n+            this.store = this.store.filter( e => e.key !== key ) ;\n+        }\n+\n+        // return matches\n+        return matches;\n+    }\n+}\n+export default new PendingAuthentitcations();\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2a54e3d959a4ca4b7bf38fe26799d2577b504015",
            "date": "2025-01-14T20:26:32Z",
            "author_login": "antobinary"
          },
          {
            "sha": "92580b13d6aa9f288f8c5daaef021f3867ca6fb9",
            "date": "2025-01-14T20:09:21Z",
            "author_login": "prlanzarin"
          },
          {
            "sha": "64a0fa6b5b132a8408e64d5c0961a5871e498e1c",
            "date": "2025-01-14T20:02:08Z",
            "author_login": "transifex-integration[bot]"
          },
          {
            "sha": "bebeef69855aa9ac341706278cc1fb8a185a6c9a",
            "date": "2025-01-14T19:05:46Z",
            "author_login": "prlanzarin"
          },
          {
            "sha": "12ae891ac7b321a93d48ecb8f953e4674f4faed9",
            "date": "2025-01-14T19:01:19Z",
            "author_login": "prlanzarin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-74",
    "description": "BigBlueButton before 2.2.7 does not have a protection mechanism for separator injection in meetingId, userId, and authToken.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-29T03:15:14.073",
    "last_modified": "2024-11-21T05:21:26.163",
    "fix_date": "2020-04-29T03:33:45Z"
  },
  "references": [
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/commit/4bfd924c64da2681f4c037026021f47eb189d717",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/compare/v2.2.6...v2.2.7",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/commit/4bfd924c64da2681f4c037026021f47eb189d717",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bigbluebutton/bigbluebutton/compare/v2.2.6...v2.2.7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:41.298453",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bigbluebutton",
    "owner": "bigbluebutton",
    "created_at": "2010-05-25T01:42:41Z",
    "updated_at": "2025-01-14T12:12:39Z",
    "pushed_at": "2025-01-14T12:12:29Z",
    "size": 893040,
    "stars": 8626,
    "forks": 5969,
    "open_issues": 743,
    "watchers": 8626,
    "has_security_policy": false,
    "default_branch": "v3.0.x-release",
    "protected_branches": [],
    "languages": {
      "JavaScript": 4126026,
      "Scala": 1661584,
      "TypeScript": 1609907,
      "Java": 1170092,
      "Ruby": 394574,
      "Shell": 281919,
      "Groovy": 165624,
      "CSS": 162616,
      "Go": 113680,
      "PLpgSQL": 96927,
      "Python": 75857,
      "HTML": 26837,
      "Batchfile": 2375,
      "Gherkin": 925,
      "Dockerfile": 59,
      "PostScript": 36
    },
    "commit_activity": {
      "total_commits_last_year": 3379,
      "avg_commits_per_week": 64.98076923076923,
      "days_active_last_year": 265
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-14T12:54:33.084574"
  }
}