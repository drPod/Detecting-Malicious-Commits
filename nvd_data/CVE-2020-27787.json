{
  "cve_id": "CVE-2020-27787",
  "github_data": {
    "repository": "upx/upx",
    "fix_commit": "e2f60adc95334f47e286838dac33160819c5d74d",
    "related_commits": [
      "e2f60adc95334f47e286838dac33160819c5d74d",
      "e2f60adc95334f47e286838dac33160819c5d74d"
    ],
    "patch_url": "https://github.com/upx/upx/commit/e2f60adc95334f47e286838dac33160819c5d74d.patch",
    "fix_commit_details": {
      "sha": "e2f60adc95334f47e286838dac33160819c5d74d",
      "commit_date": "2020-01-15T02:45:52Z",
      "author": {
        "login": "jreiser",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Detect 0==DT_SYMTAB in invert_pt_dynamic()",
        "length": 107,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 16,
        "additions": 8,
        "deletions": 8
      },
      "files": [
        {
          "filename": "src/p_lx_elf.cpp",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -1639,8 +1639,8 @@ PackLinuxElf32::invert_pt_dynamic(Elf32_Dyn const *dynp)\n         unsigned const *const buckets = &hashtab[2];\n         unsigned const *const chains = &buckets[nbucket]; (void)chains;\n \n-        unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);\n-        if (!nbucket\n+        unsigned const v_sym = !x_sym ? 0 : get_te32(&dynp0[-1+ x_sym].d_val);\n+        if (!nbucket || !v_sym\n         || (nbucket>>31) || (file_size/sizeof(unsigned)) <= (2*nbucket)  // FIXME: weak\n         || ((v_hsh < v_sym) && (v_sym - v_hsh) < (sizeof(unsigned)*2  // headers\n                 + sizeof(*buckets)*nbucket  // buckets\n@@ -1670,8 +1670,8 @@ PackLinuxElf32::invert_pt_dynamic(Elf32_Dyn const *dynp)\n         unsigned     const *const hasharr = &buckets[n_bucket]; (void)hasharr;\n       //unsigned     const *const gashend = &hasharr[n_bucket];  // minimum\n \n-        unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);\n-        if (!n_bucket || !n_bitmask\n+        unsigned const v_sym = !x_sym ? 0 : get_te32(&dynp0[-1+ x_sym].d_val);\n+        if (!n_bucket || !n_bitmask || !v_sym\n         || (-1+ n_bitmask) & n_bitmask  // not a power of 2\n         || 8*sizeof(unsigned) <= gnu_shift  // shifted result always == 0\n         || (n_bucket>>30)  // fie on fuzzers\n@@ -5139,8 +5139,8 @@ PackLinuxElf64::invert_pt_dynamic(Elf64_Dyn const *dynp)\n         unsigned const *const buckets = &hashtab[2];\n         unsigned const *const chains = &buckets[nbucket]; (void)chains;\n \n-        unsigned const v_sym = get_te32(&dynp0[-1+ x_sym].d_val);\n-        if (!nbucket\n+        unsigned const v_sym = !x_sym ? 0 : get_te32(&dynp0[-1+ x_sym].d_val);\n+        if (!nbucket || !v_sym\n         || (nbucket>>31) || (file_size/sizeof(unsigned)) <= (2*nbucket)  // FIXME: weak\n         || ((v_hsh < v_sym) && (v_sym - v_hsh) < (sizeof(unsigned)*2  // headers\n                 + sizeof(*buckets)*nbucket  // buckets\n@@ -5170,8 +5170,8 @@ PackLinuxElf64::invert_pt_dynamic(Elf64_Dyn const *dynp)\n         unsigned     const *const hasharr = &buckets[n_bucket]; (void)hasharr;\n       //unsigned     const *const gashend = &hasharr[n_bucket];  // minimum\n \n-        upx_uint64_t const v_sym = get_te64(&dynp0[-1+ x_sym].d_val);\n-        if (!n_bucket || !n_bitmask\n+        upx_uint64_t const v_sym = !x_sym ? 0 : get_te64(&dynp0[-1+ x_sym].d_val);\n+        if (!n_bucket || !n_bitmask || !v_sym\n         || (-1+ n_bitmask) & n_bitmask  // not a power of 2\n         || 8*sizeof(upx_uint64_t) <= gnu_shift  // shifted result always == 0\n         || (n_bucket>>30)  // fie on fuzzers"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e4668e5328953a895503832c66b04c93226064f0",
            "date": "2025-01-08T11:57:52Z",
            "author_login": "markus-oberhumer"
          },
          {
            "sha": "a846e483be53ab79b34881fca6d50280af2bccfe",
            "date": "2025-01-02T20:05:59Z",
            "author_login": "jreiser"
          },
          {
            "sha": "f6e3df69ebf797c16e6c92bfe12e7885e0019e44",
            "date": "2025-01-02T19:47:34Z",
            "author_login": "jreiser"
          },
          {
            "sha": "1a6c1f058945e76574d59f3be053af1345b73f5c",
            "date": "2024-12-31T00:49:31Z",
            "author_login": "jreiser"
          },
          {
            "sha": "e3e5d8a3a5167474878994e814cf1d409523cf22",
            "date": "2024-12-23T19:20:26Z",
            "author_login": "jreiser"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-119",
    "description": "A Segmentaation fault was found in UPX in invert_pt_dynamic() function in p_lx_elf.cpp. An attacker with a crafted input file allows invalid memory address access that could lead to a denial of service.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-18T19:15:14.210",
    "last_modified": "2024-11-21T05:21:50.063",
    "fix_date": "2020-01-15T02:45:52Z"
  },
  "references": [
    {
      "url": "https://github.com/upx/upx/commit/e2f60adc95334f47e286838dac33160819c5d74d",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/upx/upx/issues/333",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/upx/upx/commit/e2f60adc95334f47e286838dac33160819c5d74d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/upx/upx/issues/333",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.236210",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "upx",
    "owner": "upx",
    "created_at": "2016-08-31T11:23:13Z",
    "updated_at": "2025-01-14T04:43:54Z",
    "pushed_at": "2025-01-08T12:34:20Z",
    "size": 73091,
    "stars": 14864,
    "forks": 1390,
    "open_issues": 32,
    "watchers": 14864,
    "has_security_policy": false,
    "default_branch": "devel",
    "protected_branches": [
      "devel",
      "master"
    ],
    "languages": {
      "C++": 2385512,
      "Assembly": 1058372,
      "C": 545304,
      "Makefile": 121245,
      "Python": 72385,
      "CMake": 52429,
      "Shell": 47946,
      "Dockerfile": 5493,
      "sed": 498
    },
    "commit_activity": {
      "total_commits_last_year": 297,
      "avg_commits_per_week": 5.711538461538462,
      "days_active_last_year": 138
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:34:15.569044"
  }
}