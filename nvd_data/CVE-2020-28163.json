{
  "cve_id": "CVE-2020-28163",
  "github_data": {
    "repository": "davea42/libdwarf-code",
    "fix_commit": "faf99408e3f9f706fc3809dd400e831f989778d3",
    "related_commits": [
      "faf99408e3f9f706fc3809dd400e831f989778d3",
      "faf99408e3f9f706fc3809dd400e831f989778d3"
    ],
    "patch_url": "https://github.com/davea42/libdwarf-code/commit/faf99408e3f9f706fc3809dd400e831f989778d3.patch",
    "fix_commit_details": {
      "sha": "faf99408e3f9f706fc3809dd400e831f989778d3",
      "commit_date": "2020-10-28T22:56:06Z",
      "author": {
        "login": "davea42",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "\tmodified:   libdwarf/dwarf_print_lines.c",
        "length": 432,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 72,
        "additions": 47,
        "deletions": 25
      },
      "files": [
        {
          "filename": "libdwarf/ChangeLog",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -1,3 +1,13 @@\n+2020-10-28: David Anderson\n+    * dwarf_print_lines.c: In case of corrupted\n+      DWARF5 line header the fi_file_name field\n+      for a file entry can be null. Now\n+      we print a <no file name> string in that case\n+      to avoid passing a null to dwarfstring_append.\n+      Dwarfbug DW202010-003.\n+      Also some lines longer than libdwarf standard\n+      were shortened, but a few long lines really\n+      must remain.\n 2020-10-28: David Anderson\n     * dwarf_ranges.c: Altered lines longer than libdwarf\n       standard."
        },
        {
          "filename": "libdwarf/dwarf_print_lines.c",
          "status": "modified",
          "additions": 37,
          "deletions": 25,
          "patch": "@@ -54,8 +54,10 @@ print_line_header(Dwarf_Debug dbg,\n     Dwarf_Bool is_actuals_tab)\n {\n if (!is_single_tab) {\n-    /* Ugly indenting follows, it makes lines shorter to see them better.\n-        Best to use a wider text window to really see how it looks.*/\n+    /*  Ugly indenting follows, it makes lines shorter\n+        to see them better.\n+        Best to use a wider text window to really\n+        see how it looks.*/\n if (is_actuals_tab) {\n _dwarf_printf(dbg,\"\\nActuals Table\\n\");\n _dwarf_printf(dbg,\n@@ -102,13 +104,15 @@ print_line_detail(\n     if(!is_single_table && is_actuals_table) {\n         dwarfstring_append_printf_s(&m1,\"%-15s \",(char *)prefix);\n         dwarfstring_append_printf_i(&m1,\"%3d \",opcode);\n-        dwarfstring_append_printf_u(&m1,\"0x%\" DW_PR_XZEROS DW_PR_DUx ,\n+        dwarfstring_append_printf_u(&m1,\"0x%\" DW_PR_XZEROS DW_PR_DUx,\n             regs->lr_address);\n         dwarfstring_append_printf_u(&m1,\"/%01u\",regs->lr_op_index);\n         dwarfstring_append_printf_u(&m1,\" %5lu\", regs->lr_line);\n         dwarfstring_append_printf_u(&m1,\" %3d\",regs->lr_isa);\n-        dwarfstring_append_printf_i(&m1,\"   %1d\", regs->lr_basic_block);\n-        dwarfstring_append_printf_i(&m1,\"%1d\\n\",  regs->lr_end_sequence);\n+        dwarfstring_append_printf_i(&m1,\"   %1d\",\n+            regs->lr_basic_block);\n+        dwarfstring_append_printf_i(&m1,\"%1d\\n\",\n+            regs->lr_end_sequence);\n         _dwarf_printf(dbg,dwarfstring_string(&m1));\n         dwarfstring_destructor(&m1);\n         return;\n@@ -138,9 +142,11 @@ print_line_detail(\n                 \"   x%02\" DW_PR_DUx ,\n                 regs->lr_discriminator); /* DWARF4 */\n             dwarfstring_append_printf_u(&m1,\n-                \"  x%02\" DW_PR_DUx , regs->lr_call_context); /* EXPERIMENTAL */\n+                \"  x%02\" DW_PR_DUx,\n+                regs->lr_call_context); /* EXPERIMENTAL */\n             dwarfstring_append_printf_u(&m1,\n-                \"  x%02\" DW_PR_DUx , regs->lr_subprogram); /* EXPERIMENTAL */\n+                \"  x%02\" DW_PR_DUx ,\n+                regs->lr_subprogram); /* EXPERIMENTAL */\n             dwarfstring_append_printf_i(&m1,\n                 \"  %1d\", regs->lr_is_stmt);\n             dwarfstring_append_printf_i(&m1,\n@@ -236,7 +242,8 @@ print_include_directory_details(Dwarf_Debug dbg,\n                 tname = \"<unknown type>\";\n             }\n             dwarfstring_append_printf_u (&m4,\n-                \" type 0x%\" DW_PR_XZEROS DW_PR_DUx ,valpair->up_first);\n+                \" type 0x%\" DW_PR_XZEROS DW_PR_DUx,\n+                valpair->up_first);\n             dwarfstring_append_printf_s (&m4,\n                 \" %-20s\\n\",(char *)tname);\n             res = dwarf_get_FORM_name(valpair->up_second,&fname);\n@@ -327,20 +334,22 @@ print_just_file_entry_details(Dwarf_Debug dbg,\n         if (line_context->lc_file_entry_count > 9) {\n             dwarfstring_append_printf_u(&m3,\n                 \"  file[%2u] \",fiu);\n-            dwarfstring_append_printf_s(&m3,\n-                \"%-20s \",\n-                (char *) fe->fi_file_name);\n-            dwarfstring_append_printf_u(&m3,\n-                \"(file-number: %u)\\n\",\n-                filenum);\n         } else {\n             dwarfstring_append_printf_u(&m3,\n                 \"  file[%u]  \", fiu);\n-            dwarfstring_append_printf_s(&m3,\n-                \"%-20s \",(char *)fe->fi_file_name);\n-            dwarfstring_append_printf_u(&m3,\n-                \"(file-number: %u)\\n\",filenum);\n         }\n+        /*  DWARF5 can have a null fi_file_name\n+            if  the format code in the\n+            line table header is unknown, such\n+            as in a corrupt object file. */\n+        dwarfstring_append_printf_s(&m3,\n+            \"%-20s \",\n+            fe->fi_file_name?\n+            (char *) fe->fi_file_name:\n+            \"<no file name>\");\n+        dwarfstring_append_printf_u(&m3,\n+            \"(file-number: %u)\\n\",\n+            filenum);\n         _dwarf_printf(dbg,dwarfstring_string(&m3));\n         dwarfstring_reset(&m3);\n         if (fe->fi_dir_index_present) {\n@@ -509,8 +518,8 @@ _dwarf_internal_printlines(Dwarf_Die die,\n     Dwarf_Small *line_ptr = 0;\n     Dwarf_Small *orig_line_ptr = 0;\n \n-    /*  Pointer to a DW_AT_stmt_list attribute in case it exists in the\n-        die. */\n+    /*  Pointer to a DW_AT_stmt_list attribute in case\n+        it exists in the die. */\n     Dwarf_Attribute stmt_list_attr = 0;\n \n     /*  Pointer to DW_AT_comp_dir attribute in die. */\n@@ -568,7 +577,8 @@ _dwarf_internal_printlines(Dwarf_Die die,\n     }\n \n     address_size = _dwarf_get_address_size(dbg, die);\n-    resattr = dwarf_attr(die, DW_AT_stmt_list, &stmt_list_attr, error);\n+    resattr = dwarf_attr(die, DW_AT_stmt_list, &stmt_list_attr,\n+        error);\n     if (resattr != DW_DLV_OK) {\n         return resattr;\n     }\n@@ -600,7 +610,8 @@ _dwarf_internal_printlines(Dwarf_Die die,\n     section_start =  dbg->de_debug_line.dss_data;\n     {\n         Dwarf_Unsigned fission_size = 0;\n-        int resfis = _dwarf_get_fission_addition_die(die, DW_SECT_LINE,\n+        int resfis = _dwarf_get_fission_addition_die(die,\n+            DW_SECT_LINE,\n             &fission_offset,&fission_size,error);\n         if(resfis != DW_DLV_OK) {\n             dwarf_dealloc(dbg,stmt_list_attr, DW_DLA_ATTR);\n@@ -612,8 +623,8 @@ _dwarf_internal_printlines(Dwarf_Die die,\n     line_ptr = orig_line_ptr;\n     dwarf_dealloc(dbg, stmt_list_attr, DW_DLA_ATTR);\n \n-    /*  If die has DW_AT_comp_dir attribute, get the string that names\n-        the compilation directory. */\n+    /*  If die has DW_AT_comp_dir attribute, get the string\n+        that names the compilation directory. */\n     resattr = dwarf_attr(die, DW_AT_comp_dir, &comp_dir_attr, error);\n     if (resattr == DW_DLV_ERROR) {\n         return resattr;\n@@ -907,7 +918,8 @@ print_actuals_and_locals(Dwarf_Debug dbg,\n                 is_actuals_table = true;\n                 /* Read Actuals */\n \n-                print_line_header(dbg, is_single_table, is_actuals_table);\n+                print_line_header(dbg, is_single_table,\n+                    is_actuals_table);\n                 res = read_line_table_program(dbg,\n                     line_ptr_actuals, line_ptr_end, orig_line_ptr,\n                     section_start,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ed74b438dcbbf74759a15324c93d924191823ea7",
            "date": "2025-01-08T16:46:57Z",
            "author_login": "davea42"
          },
          {
            "sha": "85df8598586f0020cabc61d301679cea718e9071",
            "date": "2025-01-03T23:26:32Z",
            "author_login": "davea42"
          },
          {
            "sha": "dd06108cc6beea4ae1be2eaf1953328ffab313d7",
            "date": "2025-01-03T23:11:30Z",
            "author_login": "davea42"
          },
          {
            "sha": "8de7d149d6e10f06dc03f50741350aa1d75adaa6",
            "date": "2025-01-03T23:05:15Z",
            "author_login": "davea42"
          },
          {
            "sha": "22250afb0ade2fef537629fb428ab305707cf3dc",
            "date": "2025-01-03T22:51:55Z",
            "author_login": "davea42"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "libdwarf before 20201201 allows a dwarf_print_lines.c NULL pointer dereference and application crash via a DWARF5 line-table header that has an invalid FORM for a pathname.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-04-16T00:15:07.313",
    "last_modified": "2024-11-21T05:22:25.297",
    "fix_date": "2020-10-28T22:56:06Z"
  },
  "references": [
    {
      "url": "http://web.archive.org/web/20190601140703/https://sourceforge.net/projects/libdwarf/",
      "source": "cve@mitre.org",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2026000",
      "source": "cve@mitre.org",
      "tags": [
        "Issue Tracking",
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/davea42/libdwarf-code/commit/faf99408e3f9f706fc3809dd400e831f989778d3",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.prevanders.net/dwarfbug.html#DW202010-003",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://web.archive.org/web/20190601140703/https://sourceforge.net/projects/libdwarf/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2026000",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/davea42/libdwarf-code/commit/faf99408e3f9f706fc3809dd400e831f989778d3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://www.prevanders.net/dwarfbug.html#DW202010-003",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:11.793465",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "libdwarf-code",
    "owner": "davea42",
    "created_at": "2021-05-13T22:28:28Z",
    "updated_at": "2025-01-14T06:13:32Z",
    "pushed_at": "2025-01-08T16:51:12Z",
    "size": 119213,
    "stars": 186,
    "forks": 72,
    "open_issues": 1,
    "watchers": 186,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "C": 5268374,
      "HTML": 370020,
      "C++": 229587,
      "Shell": 49342,
      "CMake": 43031,
      "Python": 42860,
      "Makefile": 32614,
      "Meson": 25330,
      "M4": 20654
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:07:46.695109"
  }
}