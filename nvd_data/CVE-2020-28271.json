{
  "cve_id": "CVE-2020-28271",
  "github_data": {
    "repository": "sharpred/deepHas",
    "fix_commit": "2fe011713a6178c50f7deb6f039a8e5435981e20",
    "related_commits": [
      "2fe011713a6178c50f7deb6f039a8e5435981e20",
      "2fe011713a6178c50f7deb6f039a8e5435981e20"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "2fe011713a6178c50f7deb6f039a8e5435981e20",
      "commit_date": "2020-10-27T09:44:05Z",
      "author": {
        "login": "sharpred",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix vulnerability reported by whitesource software",
        "length": 50,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 94,
        "additions": 80,
        "deletions": 14
      },
      "files": [
        {
          "filename": "deepHas.js",
          "status": "modified",
          "additions": 17,
          "deletions": 12,
          "patch": "@@ -8,7 +8,7 @@ var indexFalse,\n     set;\n \n function indexer(set) {\n-    return function(obj, i) {\n+    return function (obj, i) {\n         \"use strict\";\n         try {\n             if (obj && i && obj.hasOwnProperty(i)) {\n@@ -18,7 +18,7 @@ function indexer(set) {\n                 return obj[i];\n             }\n             return;\n-        } catch(ex) {\n+        } catch (ex) {\n             console.error(ex);\n             return;\n         }\n@@ -31,15 +31,15 @@ indexFalse = indexer(false);\n function reduce(obj, str) {\n     \"use strict\";\n     try {\n-        if ( typeof str !== \"string\") {\n+        if (typeof str !== \"string\") {\n             return;\n         }\n-        if ( typeof obj !== \"object\") {\n+        if (typeof obj !== \"object\") {\n             return;\n         }\n         return str.split('.').reduce(indexFalse, obj);\n \n-    } catch(ex) {\n+    } catch (ex) {\n         console.error(ex);\n         return;\n     }\n@@ -49,21 +49,26 @@ function reduce(obj, str) {\n function add(obj, str, val) {\n     \"use strict\";\n     try {\n-        if ( typeof str !== \"string\") {\n+        if (typeof str !== \"string\") {\n             return;\n         }\n-        if ( typeof obj !== \"object\") {\n+        if (str.indexOf('__proto__') != -1) {\n+            throw \"cannot modify prototype property\";\n+        }\n+        if (typeof obj !== \"object\") {\n             return;\n         }\n         if (!val) {\n             return;\n         }\n         var items = str.split('.');\n+        console.log(str);\n         var initial = items.slice(0, items.length - 1);\n         var last = items.slice(items.length - 1);\n         var test = initial.reduce(indexTrue, obj);\n         test[last] = val;\n-    } catch(ex) {\n+\n+    } catch (ex) {\n         console.error(ex);\n         return;\n     }\n@@ -73,11 +78,11 @@ function has(target, path) {\n     \"use strict\";\n     try {\n         var test = reduce(target, path);\n-        if ( typeof test !== \"undefined\") {\n+        if (typeof test !== \"undefined\") {\n             return true;\n         }\n         return false;\n-    } catch(ex) {\n+    } catch (ex) {\n         console.error(ex);\n         return;\n     }\n@@ -87,7 +92,7 @@ function get(target, path) {\n     \"use strict\";\n     try {\n         return reduce(target, path);\n-    } catch(ex) {\n+    } catch (ex) {\n         console.error(ex);\n         return;\n     }\n@@ -97,7 +102,7 @@ function set(target, path, val) {\n     \"use strict\";\n     try {\n         return add(target, path, val);\n-    } catch(ex) {\n+    } catch (ex) {\n         console.error(ex);\n         return;\n     }"
        },
        {
          "filename": "package-lock.json",
          "status": "added",
          "additions": 45,
          "deletions": 0,
          "patch": "@@ -0,0 +1,45 @@\n+{\n+  \"name\": \"deephas\",\n+  \"version\": \"1.0.5\",\n+  \"lockfileVersion\": 1,\n+  \"requires\": true,\n+  \"dependencies\": {\n+    \"should\": {\n+      \"version\": \"8.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/should/-/should-8.0.1.tgz\",\n+      \"integrity\": \"sha1-OjpxF9RfKaNnvBKch4owPsHvZAo=\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"should-equal\": \"0.5.0\",\n+        \"should-format\": \"0.3.1\",\n+        \"should-type\": \"0.2.0\"\n+      },\n+      \"dependencies\": {\n+        \"should-equal\": {\n+          \"version\": \"0.5.0\",\n+          \"resolved\": \"https://registry.npmjs.org/should-equal/-/should-equal-0.5.0.tgz\",\n+          \"integrity\": \"sha1-x5fxNfMGf+tp6+zbMGscP+IbPm8=\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"should-type\": \"0.2.0\"\n+          }\n+        },\n+        \"should-format\": {\n+          \"version\": \"0.3.1\",\n+          \"resolved\": \"https://registry.npmjs.org/should-format/-/should-format-0.3.1.tgz\",\n+          \"integrity\": \"sha1-LLt4JGFnCs5CkrKx7EaNuM+Z4zA=\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"should-type\": \"0.2.0\"\n+          }\n+        },\n+        \"should-type\": {\n+          \"version\": \"0.2.0\",\n+          \"resolved\": \"https://registry.npmjs.org/should-type/-/should-type-0.2.0.tgz\",\n+          \"integrity\": \"sha1-ZwfvlVKdmJ3MCY/gdTqx+RNrt/Y=\",\n+          \"dev\": true\n+        }\n+      }\n+    }\n+  }\n+}"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"deephas\",\n-  \"version\": \"1.0.5\",\n+  \"version\": \"1.0.6\",\n   \"description\": \"get, set or test for a value in a javascript object\",\n   \"main\": \"deepHas.js\",\n   \"scripts\": {"
        },
        {
          "filename": "poc.js",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+var dh = require(\"./deepHas\");\n+var obj = {};\n+console.log(obj.isAdmin);\n+dh.set(obj,'__proto__.isAdmin','true');\n+console.log(obj.isAdmin);\n\\ No newline at end of file"
        },
        {
          "filename": "runTests.sh",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -2,4 +2,5 @@\n node tests/testHas.js\n node tests/testGet.js\n node tests/testExports.js\n-node tests/testSet.js\n\\ No newline at end of file\n+node tests/testSet.js\n+node tests/testVulnerability.js\n\\ No newline at end of file"
        },
        {
          "filename": "tests/testVulnerability.js",
          "status": "added",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -0,0 +1,10 @@\n+var dh = require(\"../deepHas\"),\n+    should = require(\"should\"),\n+    obj;\n+\n+obj = {};\n+\n+dh.set(obj,'__proto__.isAdmin',true);\n+\n+should.not.exist(obj.isAdmin);\n+obj.hasOwnProperty('isAdmin').should.equal(false);\n\\ No newline at end of file"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 1,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6e5accb0ac07e30bae3718700117e572dac3c6f9",
            "date": "2020-10-27T09:47:37Z",
            "author_login": "sharpred"
          },
          {
            "sha": "2fe011713a6178c50f7deb6f039a8e5435981e20",
            "date": "2020-10-27T09:44:05Z",
            "author_login": "sharpred"
          },
          {
            "sha": "105a15b0bc4b1754a38389d3fefebdd5bcc26f45",
            "date": "2015-12-18T16:56:12Z",
            "author_login": "sharpred"
          },
          {
            "sha": "c31d430c66209e1f79796d14f31e87f00395b04b",
            "date": "2015-12-18T16:55:04Z",
            "author_login": "sharpred"
          },
          {
            "sha": "2b03325487594fe510835e964651a7f7b3198a31",
            "date": "2015-12-18T16:54:31Z",
            "author_login": "sharpred"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-1321",
    "description": "Prototype pollution vulnerability in 'deephas' versions 1.0.0 through 1.0.5 allows attacker to cause a denial of service and may lead to remote code execution.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-11-12T18:15:15.957",
    "last_modified": "2024-11-21T05:22:32.000",
    "fix_date": "2020-10-27T09:44:05Z"
  },
  "references": [
    {
      "url": "https://github.com/sharpred/deepHas/commit/2fe011713a6178c50f7deb6f039a8e5435981e20",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28271",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sharpred/deepHas/commit/2fe011713a6178c50f7deb6f039a8e5435981e20",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28271",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:08.459455",
    "processing_status": "enhanced"
  }
}