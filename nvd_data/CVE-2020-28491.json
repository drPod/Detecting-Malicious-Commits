{
  "cve_id": "CVE-2020-28491",
  "github_data": {
    "repository": "FasterXML/jackson-dataformats-binary",
    "fix_commit": "de072d314af8f5f269c8abec6930652af67bc8e6",
    "related_commits": [
      "de072d314af8f5f269c8abec6930652af67bc8e6",
      "de072d314af8f5f269c8abec6930652af67bc8e6"
    ],
    "patch_url": "https://github.com/FasterXML/jackson-dataformats-binary/commit/de072d314af8f5f269c8abec6930652af67bc8e6.patch",
    "fix_commit_details": {
      "sha": "de072d314af8f5f269c8abec6930652af67bc8e6",
      "commit_date": "2020-12-05T00:27:55Z",
      "author": {
        "login": "cowtowncoder",
        "type": "User",
        "stats": {
          "total_commits": 1063,
          "average_weekly_commits": 2.3362637362637364,
          "total_additions": 1343578,
          "total_deletions": 41768,
          "weeks_active": 235
        }
      },
      "commit_message": {
        "title": "Fix eager allocation aspect of #186",
        "length": 35,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 265,
        "additions": 194,
        "deletions": 71
      },
      "files": [
        {
          "filename": "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORGenerator.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -198,7 +198,7 @@ public int getMask() {\n \n     /**\n      * Number of elements remaining in the current complex structure (if any),\n-     * when writing defined-length Arrays, Objects; marker {@link #INDEFINITE_LENGTH}\n+     * when writing defined-length Arrays, Objects; marker {code INDEFINITE_LENGTH}\n      * otherwise.\n      */\n     protected int _currentRemainingElements = INDEFINITE_LENGTH;"
        },
        {
          "filename": "cbor/src/main/java/com/fasterxml/jackson/dataformat/cbor/CBORParser.java",
          "status": "modified",
          "additions": 89,
          "deletions": 26,
          "patch": "@@ -63,6 +63,10 @@ private Feature(boolean defaultState) {\n     private final static double MATH_POW_2_10 = Math.pow(2, 10);\n     private final static double MATH_POW_2_NEG14 = Math.pow(2, -14);\n \n+    // 2.11.4: [dataformats-binary#186] Avoid OOME/DoS for bigger binary;\n+    //  read only up to 250k\n+    protected final static int LONGEST_NON_CHUNKED_BINARY = 250_000;\n+\n     /*\n     /**********************************************************\n     /* Configuration\n@@ -1706,13 +1710,15 @@ public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IO\n         }\n     }\n \n-    private int _readAndWriteBytes(OutputStream out, int total) throws IOException\n+    private int _readAndWriteBytes(OutputStream out, final int total) throws IOException\n     {\n         int left = total;\n         while (left > 0) {\n             int avail = _inputEnd - _inputPtr;\n             if (_inputPtr >= _inputEnd) {\n-                loadMoreGuaranteed();\n+                if (!loadMore()) {\n+                    _reportIncompleteBinaryRead(total, total-left);\n+                }\n                 avail = _inputEnd - _inputPtr;\n             }\n             int count = Math.min(avail, left);\n@@ -2425,33 +2431,55 @@ private final int _nextChunkedByte2() throws IOException\n         // either way, got it now\n         return _inputBuffer[_inputPtr++];\n     }\n-    \n+\n+    /**\n+     * Helper called to complete reading of binary data (\"byte string\") in\n+     * case contents are needed.\n+     */\n     @SuppressWarnings(\"resource\")\n     protected byte[] _finishBytes(int len) throws IOException\n     {\n+        // Chunked?\n         // First, simple: non-chunked\n-        if (len >= 0) {\n+        if (len <= 0) {\n             if (len == 0) {\n                 return NO_BYTES;\n             }\n-            byte[] b = new byte[len];\n-            if (_inputPtr >= _inputEnd) {\n-                loadMoreGuaranteed();\n+            return _finishChunkedBytes();\n+        }\n+        // Non-chunked, contiguous\n+        if (len > LONGEST_NON_CHUNKED_BINARY) {\n+            // [dataformats-binary#186]: avoid immediate allocation for longest\n+            return _finishLongContiguousBytes(len);\n+        }\n+\n+        final byte[] b = new byte[len];\n+        final int expLen = len;\n+        if (_inputPtr >= _inputEnd) {\n+            if (!loadMore()) {\n+                _reportIncompleteBinaryRead(expLen, 0);\n             }\n-            int ptr = 0;\n-            while (true) {\n-                int toAdd = Math.min(len, _inputEnd - _inputPtr);\n-                System.arraycopy(_inputBuffer, _inputPtr, b, ptr, toAdd);\n-                _inputPtr += toAdd;\n-                ptr += toAdd;\n-                len -= toAdd;\n-                if (len <= 0) {\n-                    return b;\n-                }\n-                loadMoreGuaranteed();\n+        }\n+\n+        int ptr = 0;\n+        while (true) {\n+            int toAdd = Math.min(len, _inputEnd - _inputPtr);\n+            System.arraycopy(_inputBuffer, _inputPtr, b, ptr, toAdd);\n+            _inputPtr += toAdd;\n+            ptr += toAdd;\n+            len -= toAdd;\n+            if (len <= 0) {\n+                return b;\n+            }\n+            if (!loadMore()) {\n+                _reportIncompleteBinaryRead(expLen, ptr);\n             }\n         }\n+    }\n \n+    // @since 2.12\n+    protected byte[] _finishChunkedBytes() throws IOException\n+    {\n         // or, if not, chunked...\n         ByteArrayBuilder bb = _getByteArrayBuilder();\n         while (true) {\n@@ -2468,14 +2496,17 @@ protected byte[] _finishBytes(int len) throws IOException\n                 throw _constructError(\"Mismatched chunk in chunked content: expected \"+CBORConstants.MAJOR_TYPE_BYTES\n                         +\" but encountered \"+type);\n             }\n-            len = _decodeExplicitLength(ch & 0x1F);\n+            int len = _decodeExplicitLength(ch & 0x1F);\n             if (len < 0) {\n                 throw _constructError(\"Illegal chunked-length indicator within chunked-length value (type \"+CBORConstants.MAJOR_TYPE_BYTES+\")\");\n             }\n+            final int chunkLen = len;\n             while (len > 0) {\n                 int avail = _inputEnd - _inputPtr;\n                 if (_inputPtr >= _inputEnd) {\n-                    loadMoreGuaranteed();\n+                    if (!loadMore()) {\n+                        _reportIncompleteBinaryRead(chunkLen, chunkLen-len);\n+                    }\n                     avail = _inputEnd - _inputPtr;\n                 }\n                 int count = Math.min(avail, len);\n@@ -2486,7 +2517,33 @@ protected byte[] _finishBytes(int len) throws IOException\n         }\n         return bb.toByteArray();\n     }\n-    \n+\n+    // @since 2.12\n+    protected byte[] _finishLongContiguousBytes(final int expLen) throws IOException\n+    {\n+        int left = expLen;\n+\n+        // 04-Dec-2020, tatu: Let's NOT use recycled instance since we have much\n+        //   longer content and there is likely less benefit of trying to recycle\n+        //   segments\n+        try (final ByteArrayBuilder bb = new ByteArrayBuilder(LONGEST_NON_CHUNKED_BINARY >> 1)) {\n+            while (left > 0) {\n+                int avail = _inputEnd - _inputPtr;\n+                if (avail <= 0) {\n+                    if (!loadMore()) {\n+                        _reportIncompleteBinaryRead(expLen, expLen-left);\n+                    }\n+                    avail = _inputEnd - _inputPtr;\n+                }\n+                int count = Math.min(avail, left);\n+                bb.write(_inputBuffer, _inputPtr, count);\n+                _inputPtr += count;\n+                left -= count;        \n+            }\n+            return bb.toByteArray();\n+        }\n+    }\n+\n     protected final JsonToken _decodeFieldName() throws IOException\n     {     \n         if (_inputPtr >= _inputEnd) {\n@@ -2635,9 +2692,8 @@ protected final void _decodeNonStringName(int ch) throws IOException\n         } else if (type == CBORConstants.MAJOR_TYPE_INT_NEG) {\n             name = _numberToName(ch, true);\n         } else if (type == CBORConstants.MAJOR_TYPE_BYTES) {\n-            /* 08-Sep-2014, tatu: As per [Issue#5], there are codecs\n-             *   (f.ex. Perl module \"CBOR::XS\") that use Binary data...\n-             */\n+            // 08-Sep-2014, tatu: As per [Issue#5], there are codecs\n+            //   (f.ex. Perl module \"CBOR::XS\") that use Binary data...\n             final int blen = _decodeExplicitLength(ch & 0x1F);\n             byte[] b = _finishBytes(blen);\n             // TODO: Optimize, if this becomes commonly used & bottleneck; we have\n@@ -3204,7 +3260,7 @@ private final int _decodeChunkedUTF8_4(int c) throws IOException\n     /**********************************************************\n      */\n \n-    protected final boolean loadMore() throws IOException\n+    protected boolean loadMore() throws IOException\n     {\n         if (_inputStream != null) {\n             _currInputProcessed += _inputEnd;\n@@ -3225,7 +3281,7 @@ protected final boolean loadMore() throws IOException\n         return false;\n     }\n \n-    protected final void loadMoreGuaranteed() throws IOException {\n+    protected void loadMoreGuaranteed() throws IOException {\n         if (!loadMore()) { _reportInvalidEOF(); }\n     }\n     \n@@ -3351,6 +3407,13 @@ protected void _reportInvalidOther(int mask, int ptr) throws JsonParseException\n         _reportInvalidOther(mask);\n     }\n \n+    // @since 2.12\n+    protected void _reportIncompleteBinaryRead(int expLen, int actLen) throws IOException\n+    {\n+        _reportInvalidEOF(String.format(\" for Binary value: expected %d bytes, only found %d\",\n+                expLen, actLen), _currToken);\n+    }\n+\n     /*\n     /**********************************************************\n     /* Internal methods, other"
        },
        {
          "filename": "cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/BrokenLongBinary186Test.java",
          "status": "added",
          "additions": 93,
          "deletions": 0,
          "patch": "@@ -0,0 +1,93 @@\n+package com.fasterxml.jackson.dataformat.cbor;\n+\n+import java.io.ByteArrayOutputStream;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.JsonToken;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+// Mostly for [dataformats-binary#186]: corrupt encoding indicating humongous payload\n+public class BrokenLongBinary186Test extends CBORTestBase\n+{\n+    private final ObjectMapper MAPPER = cborMapper();\n+\n+    /*\n+    /**********************************************************************\n+    /* First regular, read-it-all access, from non-chunked\n+    /**********************************************************************\n+     */\n+\n+    // [dataformats-binary#186]\n+    public void testCorruptVeryLongBinary() throws Exception {\n+        // Let's do about 2 GB to likely trigger failure\n+        _testCorruptLong(1_999_999_999, 95000);\n+    }\n+\n+    // [dataformats-binary#186]\n+    public void testCorruptQuiteLongBinary() throws Exception {\n+        // Value below limit for chunked handling\n+        _testCorruptLong(CBORParser.LONGEST_NON_CHUNKED_BINARY >> 1, 37);\n+    }\n+\n+    private void _testCorruptLong(int allegedLength, int actualIncluded) throws Exception\n+    {\n+        JsonParser p = MAPPER.createParser(_createBrokenDoc(allegedLength, actualIncluded));\n+        assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, p.nextToken());\n+        try {\n+            p.getBinaryValue();\n+            fail(\"Should fail\");\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"Unexpected end-of-input for Binary value\");\n+            verifyException(e, \"expected \"+allegedLength+\" bytes, only found \"+actualIncluded);\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* And then \"streaming\" access\n+    /**********************************************************************\n+     */\n+\n+    // [dataformats-binary#186]\n+    public void testQuiteLongStreaming() throws Exception\n+    {\n+        // Can try bit shorter here, like 500 megs\n+        final int allegedLength = 500_000_000;\n+        \n+        JsonParser p = MAPPER.createParser(_createBrokenDoc(allegedLength, 72000));\n+        assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, p.nextToken());\n+        try {\n+            ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+            p.readBinaryValue(bytes);\n+            fail(\"Should fail\");\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"Unexpected end-of-input for Binary value\");\n+            verifyException(e, \"expected \"+allegedLength+\" bytes, only found 72000\");\n+        }\n+    }\n+\n+    private byte[] _createBrokenDoc(int allegedLength, int actualIncluded) throws Exception\n+    {\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+\n+        if (allegedLength > 0xFFFF) {\n+            bytes.write((byte) (CBORConstants.PREFIX_TYPE_BYTES | CBORConstants.SUFFIX_UINT32_ELEMENTS));\n+            bytes.write((byte) (allegedLength >> 24));\n+            bytes.write((byte) (allegedLength >> 16));\n+            bytes.write((byte) (allegedLength >> 8));\n+            bytes.write((byte) allegedLength);\n+        } else { // assume shorter\n+            bytes.write((byte) (CBORConstants.PREFIX_TYPE_BYTES | CBORConstants.SUFFIX_UINT16_ELEMENTS));\n+            bytes.write((byte) (allegedLength >> 8));\n+            bytes.write((byte) allegedLength);\n+        }\n+        // but only include couple of bytes\n+        for (int i = 0; i < actualIncluded; ++i) {\n+            bytes.write((byte) i);\n+        }\n+        return bytes.toByteArray();\n+    }\n+\n+}"
        },
        {
          "filename": "cbor/src/test/java/com/fasterxml/jackson/dataformat/cbor/failing/BrokenLongBinary186Test.java",
          "status": "removed",
          "additions": 0,
          "deletions": 42,
          "patch": "@@ -1,42 +0,0 @@\n-package com.fasterxml.jackson.dataformat.cbor.failing;\n-\n-import com.fasterxml.jackson.core.JsonParser;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.core.JsonToken;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.dataformat.cbor.CBORConstants;\n-import com.fasterxml.jackson.dataformat.cbor.CBORTestBase;\n-\n-// Mostly for [dataformats-binary#186]: corrupt encoding indicating humongous payload\n-public class BrokenLongBinary186Test extends CBORTestBase\n-{\n-    private final ObjectMapper MAPPER = cborMapper();\n-\n-    // [dataformats-binary#186]\n-    public void testCorruptVeryLongBinary() throws Exception\n-    {\n-        // Let's do 999,999,999 bytes to likely trigger failure\n-        final int LONG_LEN = 999_999_999;\n-        byte[] DOC = new byte[] {\n-                        (byte) (CBORConstants.PREFIX_TYPE_BYTES | CBORConstants.SUFFIX_UINT32_ELEMENTS),\n-                        (byte) (LONG_LEN >> 24),\n-                        (byte) (LONG_LEN >> 16),\n-                        (byte) (LONG_LEN >> 8),\n-                        (byte) LONG_LEN,\n-                        // but only include 2 bytes\n-                        0, 0\n-        };\n-        JsonParser p = MAPPER.createParser(DOC);\n-        assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, p.nextToken());\n-        try {\n-            p.getBinaryValue();\n-            fail(\"Should fail\");\n-        } catch (JsonProcessingException e) {\n-//            e.printStackTrace();\n-\n-            // 01-Dec-2020, tatu: Need to decide what kind of exception should be\n-            //    produced...\n-            verifyException(e, \"foobar\");\n-        }\n-    }\n-}"
        },
        {
          "filename": "release-notes/CREDITS-2.x",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -116,8 +116,11 @@ John (iziamos@github)\n  (2.10.0)\n \n Paul Adolph (padolph@github)\n-* Reported #185: Internal parsing of tagged arrays can lead to stack overflow\n+* Reported #185: (cbor) Internal parsing of tagged arrays can lead to stack overflow\n  (2.10.1)\n+* Reported #186: (cbor) Eager allocation of byte buffer can cause `java.lang.OutOfMemoryError`\n+   exception\n+ (2.11.4)\n \n Yanming Zhou (quaff@github)\n * Reported #188: Unexpected `MismatchedInputException` for `byte[]` value bound to `String`"
        },
        {
          "filename": "release-notes/VERSION-2.x",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -8,9 +8,15 @@ Project: jackson-datatypes-binaryModules:\n === Releases ===\n ------------------------------------------------------------------------\n \n+2.11.4 (not yet released)\n+\n+#186: (cbor) Eager allocation of byte buffer can cause `java.lang.OutOfMemoryError`\n+   exception\n+ (reported by Paul A)\n+\n 2.11.3 (02-Oct-2020)\n \n-#219: Cache record names to avoid hitting class loader\n+#219: (avro) Cache record names to avoid hitting class loader\n  (contributed by Marcos P)\n \n 2.11.2 (02-Aug-2020)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "529eb4e47526ff1b183f087f5e86e631ac0cc821",
            "date": "2025-01-14T03:59:11Z",
            "author_login": "cowtowncoder"
          },
          {
            "sha": "d0c292fc8a31742e83d761c34dd19287a6b3e287",
            "date": "2025-01-14T03:59:06Z",
            "author_login": "JooHyukKim"
          },
          {
            "sha": "146befdd36467319350ea877e63db635497a0e53",
            "date": "2025-01-14T03:58:45Z",
            "author_login": "cowtowncoder"
          },
          {
            "sha": "dacbaf56f8afe9c3b0200c237eada46f7635233a",
            "date": "2025-01-14T03:53:01Z",
            "author_login": "cowtowncoder"
          },
          {
            "sha": "3d0188929d968326907428d425fff0103208a43a",
            "date": "2025-01-14T03:41:26Z",
            "author_login": "JooHyukKim"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-770",
    "description": "This affects the package com.fasterxml.jackson.dataformat:jackson-dataformat-cbor from 0 and before 2.11.4, from 2.12.0-rc1 and before 2.12.1. Unchecked allocation of byte buffer can cause a java.lang.OutOfMemoryError exception.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-02-18T16:15:13.207",
    "last_modified": "2024-11-21T05:22:53.697",
    "fix_date": "2020-12-05T00:27:55Z"
  },
  "references": [
    {
      "url": "https://github.com/FasterXML/jackson-dataformats-binary/commit/de072d314af8f5f269c8abec6930652af67bc8e6",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FasterXML/jackson-dataformats-binary/issues/186",
      "source": "report@snyk.io",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONDATAFORMAT-1047329",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FasterXML/jackson-dataformats-binary/commit/de072d314af8f5f269c8abec6930652af67bc8e6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FasterXML/jackson-dataformats-binary/issues/186",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONDATAFORMAT-1047329",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:16.795227",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jackson-dataformats-binary",
    "owner": "FasterXML",
    "created_at": "2016-05-03T04:54:56Z",
    "updated_at": "2025-01-14T03:59:19Z",
    "pushed_at": "2025-01-14T04:06:16Z",
    "size": 11494,
    "stars": 318,
    "forks": 138,
    "open_issues": 81,
    "watchers": 318,
    "has_security_policy": false,
    "default_branch": "2.19",
    "protected_branches": [],
    "languages": {
      "Java": 2947998,
      "RPC": 33940,
      "Shell": 452
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:19:00.043985"
  }
}