{
  "cve_id": "CVE-2020-35534",
  "github_data": {
    "repository": "LibRaw/LibRaw",
    "fix_commit": "e41f331e90b383e3208cefb74e006df44bf3a4b8",
    "related_commits": [
      "e41f331e90b383e3208cefb74e006df44bf3a4b8",
      "e41f331e90b383e3208cefb74e006df44bf3a4b8"
    ],
    "patch_url": "https://github.com/LibRaw/LibRaw/commit/e41f331e90b383e3208cefb74e006df44bf3a4b8.patch",
    "fix_commit_details": {
      "sha": "e41f331e90b383e3208cefb74e006df44bf3a4b8",
      "commit_date": "2020-04-26T15:00:55Z",
      "author": {
        "login": "alextutubalin",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "CR3 decoder: use mempool for memory",
        "length": 35,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 53,
        "additions": 45,
        "deletions": 8
      },
      "files": [
        {
          "filename": "libraw/libraw_const.h",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -26,6 +26,11 @@ it under the terms of the one of two licenses as you choose:\n #ifndef LIBRAW_NO_IOSPACE_CHECK\n #define LIBRAW_IOSPACE_CHECK\n #endif\n+#ifndef LIBRAW_NO_CR3_MEMPOOL\n+#define LIBRAW_CR3_MEMPOOL\n+#endif\n+\n+\n /* LibRaw uses own memory pool management, with LIBRAW_MSIZE (512)\n entries. It is enough for parsing/decoding non-damaged files, but\n may overflow on specially crafted files (eg. with many string values"
        },
        {
          "filename": "src/decoders/crx.cpp",
          "status": "modified",
          "additions": 40,
          "deletions": 8,
          "patch": "@@ -153,6 +153,10 @@ struct CrxImage\n   int16_t *outBufs[4]; // one per plane\r\n   int16_t *planeBuf;\r\n   LibRaw_abstract_datastream *input;\r\n+#ifdef LIBRAW_CR3_MEMPOOL\r\n+  libraw_memmgr memmgr;\r\n+  CrxImage() : memmgr(0){}\r\n+#endif\r\n };\r\n \r\n enum TileFlags\r\n@@ -1737,14 +1741,22 @@ void crxConvertPlaneLine(CrxImage *img, int imageRow, int imageCol = 0,\n   }\r\n }\r\n \r\n-int crxParamInit(CrxBandParam **param, uint64_t subbandMdatOffset,\r\n+int crxParamInit(\r\n+#ifdef LIBRAW_CR3_MEMPOOL\r\n+\tlibraw_memmgr&  mm,\r\n+#endif\t\r\n+\tCrxBandParam **param, uint64_t subbandMdatOffset,\r\n                  uint64_t subbandDataSize, uint32_t subbandWidth,\r\n                  uint32_t subbandHeight, int32_t supportsPartial,\r\n                  uint32_t roundedBitsMask, LibRaw_abstract_datastream *input)\r\n {\r\n   int32_t progrDataSize = supportsPartial ? 0 : sizeof(int32_t) * subbandWidth;\r\n   int32_t paramLength = 2 * subbandWidth + 4;\r\n-  uint8_t *paramBuf = (uint8_t *)calloc(\r\n+  uint8_t *paramBuf = (uint8_t *)\r\n+#ifdef LIBRAW_CR3_MEMPOOL\r\n+\t  mm.\r\n+#endif\r\n+\t  calloc(\r\n       1, sizeof(CrxBandParam) + sizeof(int32_t) * paramLength + progrDataSize);\r\n \r\n   if (!paramBuf)\r\n@@ -1813,7 +1825,11 @@ int crxSetupSubbandData(CrxImage *img, CrxPlaneComp *planeComp,\n   }\r\n \r\n   // buffer allocation\r\n-  planeComp->compBuf = (uint8_t *)malloc(compDataSize);\r\n+  planeComp->compBuf = (uint8_t *)\r\n+#ifdef LIBRAW_CR3_MEMPOOL\r\n+\t  img->memmgr.\r\n+#endif\r\n+\t  malloc(compDataSize);\r\n   if (!planeComp->compBuf)\r\n     return -1;\r\n \r\n@@ -1895,7 +1911,11 @@ int crxSetupSubbandData(CrxImage *img, CrxPlaneComp *planeComp,\n         roundedBitsMask = planeComp->roundedBitsMask;\r\n         supportsPartial = 1;\r\n       }\r\n-      if (crxParamInit(&subbands[subbandNum].bandParam,\r\n+      if (crxParamInit(\r\n+#ifdef LIBRAW_CR3_MEMPOOL\r\n+\t\t  img->memmgr,\r\n+#endif\r\n+\t\t  &subbands[subbandNum].bandParam,\r\n                        subbands[subbandNum].mdatOffset,\r\n                        subbands[subbandNum].dataSize,\r\n                        subbands[subbandNum].width, subbands[subbandNum].height,\r\n@@ -2087,10 +2107,14 @@ int crxReadImageHeaders(crx_data_header_t *hdr, CrxImage *img, uint8_t *mdatPtr,\n \r\n   if (!img->tiles)\r\n   {\r\n-    img->tiles = (CrxTile *)malloc(\r\n+    img->tiles = (CrxTile *)\r\n+#ifdef LIBRAW_CR3_MEMPOOL\r\n+\t\timg->memmgr.\r\n+#endif\r\n+\t\tcalloc(\r\n         sizeof(CrxTile) * nTiles +\r\n         sizeof(CrxPlaneComp) * nTiles * img->nPlanes +\r\n-        sizeof(CrxSubband) * nTiles * img->nPlanes * img->subbandCount);\r\n+        sizeof(CrxSubband) * nTiles * img->nPlanes * img->subbandCount,1);\r\n     if (!img->tiles)\r\n       return -1;\r\n \r\n@@ -2282,7 +2306,11 @@ int crxSetupImageData(crx_data_header_t *hdr, CrxImage *img, int16_t *outBuf,\n   if (img->encType == 3 && img->nPlanes == 4 && img->nBits > 8)\r\n   {\r\n     img->planeBuf =\r\n-        (int16_t *)malloc(img->planeHeight * img->planeWidth * img->nPlanes *\r\n+        (int16_t *)\r\n+#ifdef LIBRAW_CR3_MEMPOOL\r\n+\t\timg->memmgr.\r\n+#endif\r\n+\t\tmalloc(img->planeHeight * img->planeWidth * img->nPlanes *\r\n                           ((img->samplePrecision + 7) >> 3));\r\n     if (!img->planeBuf)\r\n       return -1;\r\n@@ -2335,6 +2363,9 @@ int crxSetupImageData(crx_data_header_t *hdr, CrxImage *img, int16_t *outBuf,\n \r\n int crxFreeImageData(CrxImage *img)\r\n {\r\n+#ifdef LIBRAW_CR3_MEMPOOL\r\n+\timg->memmgr.cleanup();\r\n+#else\r\n   CrxTile *tile = img->tiles;\r\n   int nTiles = img->tileRows * img->tileCols;\r\n \r\n@@ -2353,9 +2384,10 @@ int crxFreeImageData(CrxImage *img)\n     free(img->planeBuf);\r\n     img->planeBuf = 0;\r\n   }\r\n-\r\n+#endif\r\n   return 0;\r\n }\r\n+\r\n void LibRaw::crxLoadDecodeLoop(void *img, int nPlanes)\r\n {\r\n #ifdef LIBRAW_USE_OPENMP\r"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cc118c1c1869e2559dbd0c7639d219154cc46e40",
            "date": "2024-11-30T15:36:46Z",
            "author_login": "alextutubalin"
          },
          {
            "sha": "9bcb8a1d9593ba67e4eb67fed716efc5e1353d5c",
            "date": "2024-09-18T09:07:43Z",
            "author_login": "alextutubalin"
          },
          {
            "sha": "bf1a9140e0d032c0f3d5eccbe2b7aa4e7167e287",
            "date": "2024-09-16T08:49:24Z",
            "author_login": "alextutubalin"
          },
          {
            "sha": "77a46b31978a2381e61df524dc9b6670a1f22321",
            "date": "2024-09-16T08:45:25Z",
            "author_login": "alextutubalin"
          },
          {
            "sha": "4f5a4cfb3724eb57386efad362b998b68a10eba7",
            "date": "2024-09-14T17:32:15Z",
            "author_login": "alextutubalin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "In LibRaw, there is a memory corruption vulnerability within the \"crxFreeSubbandData()\" function (libraw\\src\\decoders\\crx.cpp) when processing cr3 files.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-09-01T18:15:08.970",
    "last_modified": "2024-11-21T05:27:31.093",
    "fix_date": "2020-04-26T15:00:55Z"
  },
  "references": [
    {
      "url": "https://github.com/LibRaw/LibRaw/commit/e41f331e90b383e3208cefb74e006df44bf3a4b8",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/LibRaw/LibRaw/issues/279",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/LibRaw/LibRaw/commit/e41f331e90b383e3208cefb74e006df44bf3a4b8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/LibRaw/LibRaw/issues/279",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.069900",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "LibRaw",
    "owner": "LibRaw",
    "created_at": "2010-10-11T18:01:13Z",
    "updated_at": "2025-01-14T03:39:50Z",
    "pushed_at": "2024-11-30T15:42:21Z",
    "size": 14433,
    "stars": 1172,
    "forks": 287,
    "open_issues": 2,
    "watchers": 1172,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 2012970,
      "C": 18819,
      "M4": 8267,
      "QMake": 6245,
      "Makefile": 5329,
      "Shell": 1869,
      "Perl": 1289
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:49:33.251436"
  }
}