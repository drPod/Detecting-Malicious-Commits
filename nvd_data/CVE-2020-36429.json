{
  "cve_id": "CVE-2020-36429",
  "github_data": {
    "repository": "open62541/open62541",
    "fix_commit": "c800e2987b10bb3af6ef644b515b5d6392f8861d",
    "related_commits": [
      "c800e2987b10bb3af6ef644b515b5d6392f8861d",
      "c800e2987b10bb3af6ef644b515b5d6392f8861d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "c800e2987b10bb3af6ef644b515b5d6392f8861d",
      "commit_date": "2020-05-19T13:13:20Z",
      "author": {
        "login": "jpfr",
        "type": "User",
        "stats": {
          "total_commits": 5912,
          "average_weekly_commits": 10.175559380378658,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 521
        }
      },
      "commit_message": {
        "title": "fix(json): Check max recursion depth in more places",
        "length": 51,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 13,
        "additions": 9,
        "deletions": 4
      },
      "files": [
        {
          "filename": "src/ua_types_encoding_json.c",
          "status": "modified",
          "additions": 9,
          "deletions": 4,
          "patch": "@@ -108,6 +108,8 @@ static WRITE_JSON_ELEMENT(Quote) {\n \n WRITE_JSON_ELEMENT(ObjStart) {\n     /* increase depth, save: before first key-value no comma needed. */\n+    if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)\n+        return UA_STATUSCODE_BADENCODINGERROR;\n     ctx->depth++;\n     ctx->commaNeeded[ctx->depth] = false;\n     return writeChar(ctx, '{');\n@@ -121,7 +123,10 @@ WRITE_JSON_ELEMENT(ObjEnd) {\n \n WRITE_JSON_ELEMENT(ArrStart) {\n     /* increase depth, save: before first array entry no comma needed. */\n-    ctx->commaNeeded[++ctx->depth] = false;\n+    if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)\n+        return UA_STATUSCODE_BADENCODINGERROR;\n+    ctx->depth++;\n+    ctx->commaNeeded[ctx->depth] = false;\n     return writeChar(ctx, '[');\n }\n \n@@ -1124,7 +1129,7 @@ addMultiArrayContentJSON(CtxJson *ctx, void* array, const UA_DataType *type,\n                          size_t *index, UA_UInt32 *arrayDimensions, size_t dimensionIndex, \n                          size_t dimensionSize) {\n     /* Check the recursion limit */\n-    if(ctx->depth > UA_JSON_ENCODING_MAX_RECURSION)\n+    if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)\n         return UA_STATUSCODE_BADENCODINGERROR;\n     \n     /* Stop recursion: The inner Arrays are written */\n@@ -1382,7 +1387,7 @@ ENCODE_JSON(DiagnosticInfo) {\n static status\n encodeJsonStructure(const void *src, const UA_DataType *type, CtxJson *ctx) {\n     /* Check the recursion limit */\n-    if(ctx->depth > UA_JSON_ENCODING_MAX_RECURSION)\n+    if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)\n         return UA_STATUSCODE_BADENCODINGERROR;\n     ctx->depth++;\n \n@@ -3153,7 +3158,7 @@ decodeJsonStructure(void *dst, const UA_DataType *type, CtxJson *ctx,\n                     ParseCtx *parseCtx, UA_Boolean moveToken) {\n     (void) moveToken;\n     /* Check the recursion limit */\n-    if(ctx->depth > UA_JSON_ENCODING_MAX_RECURSION)\n+    if(ctx->depth >= UA_JSON_ENCODING_MAX_RECURSION)\n         return UA_STATUSCODE_BADENCODINGERROR;\n     ctx->depth++;\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "115325d44bb91af5264cd18d0ae2df5906a4c943",
            "date": "2025-01-25T20:44:34Z",
            "author_login": "jpfr"
          },
          {
            "sha": "59eff2c2b054f918102410e42f1326fed16d27ce",
            "date": "2025-01-24T13:26:34Z",
            "author_login": "NoelGraf"
          },
          {
            "sha": "d49cb241babb9c68535c740e5d11c2dea5aba56c",
            "date": "2025-01-24T11:42:50Z",
            "author_login": "NoelGraf"
          },
          {
            "sha": "575d0adca79a90b939befa34cb8790ca92c61fd8",
            "date": "2025-01-21T12:39:11Z",
            "author_login": "marwinglaser"
          },
          {
            "sha": "6be6e248660950635cf40d7d7374947e6510411f",
            "date": "2025-01-20T18:12:16Z",
            "author_login": "marwinglaser"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-787",
    "description": "Variant_encodeJson in open62541 1.x before 1.0.4 has an out-of-bounds write for a large recursion depth.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-07-20T07:15:07.773",
    "last_modified": "2024-11-21T05:29:29.450",
    "fix_date": "2020-05-19T13:13:20Z"
  },
  "references": [
    {
      "url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=20578",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/google/oss-fuzz-vulns/blob/main/vulns/open62541/OSV-2020-153.yaml",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open62541/open62541/commit/c800e2987b10bb3af6ef644b515b5d6392f8861d",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open62541/open62541/compare/v1.0.3...v1.0.4",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=20578",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/google/oss-fuzz-vulns/blob/main/vulns/open62541/OSV-2020-153.yaml",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open62541/open62541/commit/c800e2987b10bb3af6ef644b515b5d6392f8861d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/open62541/open62541/compare/v1.0.3...v1.0.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:02.316737",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "open62541",
    "owner": "open62541",
    "created_at": "2013-12-20T08:45:05Z",
    "updated_at": "2025-01-26T02:20:59Z",
    "pushed_at": "2025-01-25T23:16:52Z",
    "size": 58709,
    "stars": 2678,
    "forks": 1275,
    "open_issues": 1054,
    "watchers": 2678,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "0.1",
      "0.2",
      "0.3",
      "1.0",
      "1.1",
      "1.2",
      "1.3",
      "1.3.3.1",
      "1.4",
      "master"
    ],
    "languages": {
      "C": 7740771,
      "Python": 241422,
      "CMake": 181369,
      "Shell": 80896,
      "C++": 51600,
      "PowerShell": 12471,
      "Yacc": 5639,
      "Dockerfile": 3016
    },
    "commit_activity": {
      "total_commits_last_year": 1167,
      "avg_commits_per_week": 22.442307692307693,
      "days_active_last_year": 255
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mpl-2.0"
    },
    "collected_at": "2025-01-26T08:28:06.469743"
  }
}