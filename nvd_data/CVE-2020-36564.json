{
  "cve_id": "CVE-2020-36564",
  "github_data": {
    "repository": "justinas/nosurf",
    "fix_commit": "4d86df7a4affa1fa50ab39fb09aac56c3ce9c314",
    "related_commits": [
      "4d86df7a4affa1fa50ab39fb09aac56c3ce9c314",
      "4d86df7a4affa1fa50ab39fb09aac56c3ce9c314"
    ],
    "patch_url": "https://github.com/justinas/nosurf/commit/4d86df7a4affa1fa50ab39fb09aac56c3ce9c314.patch",
    "fix_commit_details": {
      "sha": "4d86df7a4affa1fa50ab39fb09aac56c3ce9c314",
      "commit_date": "2020-08-30T15:00:32Z",
      "author": {
        "login": "justinas",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #60 from aeneasr/fix-verify",
        "length": 124,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 82,
        "additions": 74,
        "deletions": 8
      },
      "files": [
        {
          "filename": "token.go",
          "status": "modified",
          "additions": 16,
          "deletions": 8,
          "patch": "@@ -58,17 +58,24 @@ func b64decode(data string) []byte {\n // Supports masked tokens. realToken comes from Token(r) and\n // sentToken is token sent unusual way.\n func VerifyToken(realToken, sentToken string) bool {\n-\tr := b64decode(realToken)\n+\tr, err := base64.StdEncoding.DecodeString(realToken)\n+\tif err != nil {\n+\t\treturn false\n+\t}\n \tif len(r) == 2*tokenLength {\n \t\tr = unmaskToken(r)\n \t}\n-\ts := b64decode(sentToken)\n+\ts, err := base64.StdEncoding.DecodeString(sentToken)\n+\tif err != nil {\n+\t\treturn false\n+\t}\n \tif len(s) == 2*tokenLength {\n \t\ts = unmaskToken(s)\n \t}\n-\treturn subtle.ConstantTimeCompare(r, s) == 1\n+\treturn tokensEqual(r, s)\n }\n \n+// verifyToken expects the realToken to be unmasked and the sentToken to be masked\n func verifyToken(realToken, sentToken []byte) bool {\n \trealN := len(realToken)\n \tsentN := len(sentToken)\n@@ -77,15 +84,16 @@ func verifyToken(realToken, sentToken []byte) bool {\n \t// sentN == 2*tokenLength means the token is masked.\n \n \tif realN == tokenLength && sentN == 2*tokenLength {\n-\t\treturn verifyMasked(realToken, sentToken)\n+\t\treturn tokensEqual(realToken, unmaskToken(sentToken))\n \t}\n \treturn false\n }\n \n-// Verifies the masked token\n-func verifyMasked(realToken, sentToken []byte) bool {\n-\tsentPlain := unmaskToken(sentToken)\n-\treturn subtle.ConstantTimeCompare(realToken, sentPlain) == 1\n+// tokensEqual expects both tokens to be unmasked\n+func tokensEqual(realToken, sentToken []byte) bool {\n+\treturn len(realToken) == tokenLength &&\n+\t\tlen(sentToken) == tokenLength &&\n+\t\tsubtle.ConstantTimeCompare(realToken, sentToken) == 1\n }\n \n func checkForPRNG() {"
        },
        {
          "filename": "token_test.go",
          "status": "modified",
          "additions": 58,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@ package nosurf\n \n import (\n \t\"crypto/rand\"\n+\t\"encoding/base64\"\n \t\"testing\"\n )\n \n@@ -70,3 +71,60 @@ func TestVerifiesMaskedTokenCorrectly(t *testing.T) {\n \t\tt.Errorf(\"VerifyToken returned a false positive\")\n \t}\n }\n+\n+func TestVerifyTokenBase64Invalid(t *testing.T) {\n+\tfor _, pairs := range [][]string{\n+\t\t{\"foo\", \"bar\"},\n+\t\t{\"foo\", \"\"},\n+\t\t{\"\", \"bar\"},\n+\t\t{\"\", \"\"},\n+\t} {\n+\t\tif VerifyToken(pairs[0], pairs[1]) {\n+\t\t\tt.Errorf(\"VerifyToken returned a false positive for: %v\", pairs)\n+\t\t}\n+\t}\n+}\n+\n+func TestVerifyTokenUnMasked(t *testing.T) {\n+\tfor i, tc := range []struct {\n+\t\treal  string\n+\t\tsend  string\n+\t\tvalid bool\n+\t}{\n+\t\t{\n+\t\t\treal:  \"qwertyuiopasdfghjklzxcvbnm123456\",\n+\t\t\tsend:  \"qwertyuiopasdfghjklzxcvbnm123456\",\n+\t\t\tvalid: true,\n+\t\t},\n+\t\t{\n+\t\t\treal: \"qwertyuiopasdfghjklzxcvbnm123456\",\n+\t\t\tsend: \"qwertyuiopasdfghjklzxcvbnm123456\" +\n+\t\t\t\t\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n+\t\t\t\t\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\",\n+\t\t\tvalid: true,\n+\t\t},\n+\t\t{\n+\t\t\treal: \"qwertyuiopasdfghjklzxcvbnm123456\" +\n+\t\t\t\t\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n+\t\t\t\t\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\",\n+\t\t\tsend: \"qwertyuiopasdfghjklzxcvbnm123456\" +\n+\t\t\t\t\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n+\t\t\t\t\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\",\n+\t\t\tvalid: true,\n+\t\t},\n+\t\t{\n+\t\t\treal: \"qwertyuiopasdfghjklzxcvbnm123456\" +\n+\t\t\t\t\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" +\n+\t\t\t\t\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\",\n+\t\t\tsend:  \"qwertyuiopasdfghjklzxcvbnm123456\",\n+\t\t\tvalid: true,\n+\t\t},\n+\t} {\n+\t\tif VerifyToken(\n+\t\t\tbase64.StdEncoding.EncodeToString([]byte(tc.real)),\n+\t\t\tbase64.StdEncoding.EncodeToString([]byte(tc.send)),\n+\t\t) != tc.valid {\n+\t\t\tt.Errorf(\"Verify token returned wrong result for case %d: %+v\", i, tc)\n+\t\t}\n+\t}\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e5c9c1fe2d4f69668ff78f872abf3b396a08673a",
            "date": "2024-04-06T17:55:56Z",
            "author_login": "justinas"
          },
          {
            "sha": "4d86df7a4affa1fa50ab39fb09aac56c3ce9c314",
            "date": "2020-08-30T15:00:32Z",
            "author_login": "justinas"
          },
          {
            "sha": "0bc5e56a715eabf128e0a23f441e4fc447438ce8",
            "date": "2020-08-27T11:27:07Z",
            "author_login": "zepatrik"
          },
          {
            "sha": "ee7691f82e7deaf450bb029227e481cfbbdbfb7d",
            "date": "2020-08-17T18:30:17Z",
            "author_login": "aeneasr"
          },
          {
            "sha": "e51517007dc9daa543fc05e7d63f2636815757a3",
            "date": "2019-11-05T13:56:40Z",
            "author_login": "justinas"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-20",
    "description": "Due to improper validation of caller input, validation is silently disabled if the provided expected token is malformed, causing any user supplied token to be considered valid.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-27T22:15:11.673",
    "last_modified": "2024-11-21T05:29:50.827",
    "fix_date": "2020-08-30T15:00:32Z"
  },
  "references": [
    {
      "url": "https://github.com/justinas/nosurf/commit/4d86df7a4affa1fa50ab39fb09aac56c3ce9c314",
      "source": "security@golang.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/justinas/nosurf/pull/60",
      "source": "security@golang.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2020-0049",
      "source": "security@golang.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/justinas/nosurf/commit/4d86df7a4affa1fa50ab39fb09aac56c3ce9c314",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/justinas/nosurf/pull/60",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2020-0049",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.222097",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "nosurf",
    "owner": "justinas",
    "created_at": "2013-08-22T17:47:34Z",
    "updated_at": "2025-01-14T06:41:24Z",
    "pushed_at": "2024-04-06T18:01:21Z",
    "size": 100,
    "stars": 1607,
    "forks": 126,
    "open_issues": 12,
    "watchers": 1607,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 45455
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T22:51:27.804976"
  }
}