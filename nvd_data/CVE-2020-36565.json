{
  "cve_id": "CVE-2020-36565",
  "github_data": {
    "repository": "labstack/echo",
    "fix_commit": "4422e3b66b9fd498ed1ae1d0242d660d0ed3faaa",
    "related_commits": [
      "4422e3b66b9fd498ed1ae1d0242d660d0ed3faaa",
      "4422e3b66b9fd498ed1ae1d0242d660d0ed3faaa"
    ],
    "patch_url": "https://github.com/labstack/echo/commit/4422e3b66b9fd498ed1ae1d0242d660d0ed3faaa.patch",
    "fix_commit_details": {
      "sha": "4422e3b66b9fd498ed1ae1d0242d660d0ed3faaa",
      "commit_date": "2020-12-15T15:31:52Z",
      "author": {
        "login": "lammel",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #1718 from little-cui/master",
        "length": 114,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 139,
        "additions": 99,
        "deletions": 40
      },
      "files": [
        {
          "filename": "echo.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -49,7 +49,6 @@ import (\n \t\"net/http\"\n \t\"net/url\"\n \t\"os\"\n-\t\"path\"\n \t\"path/filepath\"\n \t\"reflect\"\n \t\"runtime\"\n@@ -486,7 +485,7 @@ func (common) static(prefix, root string, get func(string, HandlerFunc, ...Middl\n \t\t\treturn err\n \t\t}\n \n-\t\tname := filepath.Join(root, path.Clean(\"/\"+p)) // \"/\"+ for security\n+\t\tname := filepath.Join(root, filepath.Clean(\"/\"+p)) // \"/\"+ for security\n \t\tfi, err := os.Stat(name)\n \t\tif err != nil {\n \t\t\t// The access path does not exist"
        },
        {
          "filename": "echo_test.go",
          "status": "modified",
          "additions": 97,
          "deletions": 37,
          "patch": "@@ -60,45 +60,105 @@ func TestEcho(t *testing.T) {\n }\n \n func TestEchoStatic(t *testing.T) {\n-\te := New()\n-\n-\tassert := assert.New(t)\n-\n-\t// OK\n-\te.Static(\"/images\", \"_fixture/images\")\n-\tc, b := request(http.MethodGet, \"/images/walle.png\", e)\n-\tassert.Equal(http.StatusOK, c)\n-\tassert.NotEmpty(b)\n-\n-\t// No file\n-\te.Static(\"/images\", \"_fixture/scripts\")\n-\tc, _ = request(http.MethodGet, \"/images/bolt.png\", e)\n-\tassert.Equal(http.StatusNotFound, c)\n-\n-\t// Directory\n-\te.Static(\"/images\", \"_fixture/images\")\n-\tc, _ = request(http.MethodGet, \"/images/\", e)\n-\tassert.Equal(http.StatusNotFound, c)\n-\n-\t// Directory Redirect\n-\te.Static(\"/\", \"_fixture\")\n-\treq := httptest.NewRequest(http.MethodGet, \"/folder\", nil)\n-\trec := httptest.NewRecorder()\n-\te.ServeHTTP(rec, req)\n-\tassert.Equal(http.StatusMovedPermanently, rec.Code)\n-\tassert.Equal(\"/folder/\", rec.HeaderMap[\"Location\"][0])\n-\n-\t// Directory with index.html\n-\te.Static(\"/\", \"_fixture\")\n-\tc, r := request(http.MethodGet, \"/\", e)\n-\tassert.Equal(http.StatusOK, c)\n-\tassert.Equal(true, strings.HasPrefix(r, \"<!doctype html>\"))\n+\tvar testCases = []struct {\n+\t\tname                 string\n+\t\tgivenPrefix          string\n+\t\tgivenRoot            string\n+\t\twhenURL              string\n+\t\texpectStatus         int\n+\t\texpectHeaderLocation string\n+\t\texpectBodyStartsWith string\n+\t}{\n+\t\t{\n+\t\t\tname:                 \"ok\",\n+\t\t\tgivenPrefix:          \"/images\",\n+\t\t\tgivenRoot:            \"_fixture/images\",\n+\t\t\twhenURL:              \"/images/walle.png\",\n+\t\t\texpectStatus:         http.StatusOK,\n+\t\t\texpectBodyStartsWith: string([]byte{0x89, 0x50, 0x4e, 0x47}),\n+\t\t},\n+\t\t{\n+\t\t\tname:                 \"No file\",\n+\t\t\tgivenPrefix:          \"/images\",\n+\t\t\tgivenRoot:            \"_fixture/scripts\",\n+\t\t\twhenURL:              \"/images/bolt.png\",\n+\t\t\texpectStatus:         http.StatusNotFound,\n+\t\t\texpectBodyStartsWith: \"{\\\"message\\\":\\\"Not Found\\\"}\\n\",\n+\t\t},\n+\t\t{\n+\t\t\tname:                 \"Directory\",\n+\t\t\tgivenPrefix:          \"/images\",\n+\t\t\tgivenRoot:            \"_fixture/images\",\n+\t\t\twhenURL:              \"/images/\",\n+\t\t\texpectStatus:         http.StatusNotFound,\n+\t\t\texpectBodyStartsWith: \"{\\\"message\\\":\\\"Not Found\\\"}\\n\",\n+\t\t},\n+\t\t{\n+\t\t\tname:                 \"Directory Redirect\",\n+\t\t\tgivenPrefix:          \"/\",\n+\t\t\tgivenRoot:            \"_fixture\",\n+\t\t\twhenURL:              \"/folder\",\n+\t\t\texpectStatus:         http.StatusMovedPermanently,\n+\t\t\texpectHeaderLocation: \"/folder/\",\n+\t\t\texpectBodyStartsWith: \"\",\n+\t\t},\n+\t\t{\n+\t\t\tname:                 \"Directory with index.html\",\n+\t\t\tgivenPrefix:          \"/\",\n+\t\t\tgivenRoot:            \"_fixture\",\n+\t\t\twhenURL:              \"/\",\n+\t\t\texpectStatus:         http.StatusOK,\n+\t\t\texpectBodyStartsWith: \"<!doctype html>\",\n+\t\t},\n+\t\t{\n+\t\t\tname:                 \"Sub-directory with index.html\",\n+\t\t\tgivenPrefix:          \"/\",\n+\t\t\tgivenRoot:            \"_fixture\",\n+\t\t\twhenURL:              \"/folder/\",\n+\t\t\texpectStatus:         http.StatusOK,\n+\t\t\texpectBodyStartsWith: \"<!doctype html>\",\n+\t\t},\n+\t\t{\n+\t\t\tname:                 \"do not allow directory traversal (backslash - windows separator)\",\n+\t\t\tgivenPrefix:          \"/\",\n+\t\t\tgivenRoot:            \"_fixture/\",\n+\t\t\twhenURL:              `/..\\\\middleware/basic_auth.go`,\n+\t\t\texpectStatus:         http.StatusNotFound,\n+\t\t\texpectBodyStartsWith: \"{\\\"message\\\":\\\"Not Found\\\"}\\n\",\n+\t\t},\n+\t\t{\n+\t\t\tname:                 \"do not allow directory traversal (slash - unix separator)\",\n+\t\t\tgivenPrefix:          \"/\",\n+\t\t\tgivenRoot:            \"_fixture/\",\n+\t\t\twhenURL:              `/../middleware/basic_auth.go`,\n+\t\t\texpectStatus:         http.StatusNotFound,\n+\t\t\texpectBodyStartsWith: \"{\\\"message\\\":\\\"Not Found\\\"}\\n\",\n+\t\t},\n+\t}\n \n-\t// Sub-directory with index.html\n-\tc, r = request(http.MethodGet, \"/folder/\", e)\n-\tassert.Equal(http.StatusOK, c)\n-\tassert.Equal(true, strings.HasPrefix(r, \"<!doctype html>\"))\n+\tfor _, tc := range testCases {\n+\t\tt.Run(tc.name, func(t *testing.T) {\n+\t\t\te := New()\n+\t\t\te.Static(tc.givenPrefix, tc.givenRoot)\n+\t\t\treq := httptest.NewRequest(http.MethodGet, tc.whenURL, nil)\n+\t\t\trec := httptest.NewRecorder()\n+\t\t\te.ServeHTTP(rec, req)\n+\t\t\tassert.Equal(t, tc.expectStatus, rec.Code)\n+\t\t\tbody := rec.Body.String()\n+\t\t\tif tc.expectBodyStartsWith != \"\" {\n+\t\t\t\tassert.True(t, strings.HasPrefix(body, tc.expectBodyStartsWith))\n+\t\t\t} else {\n+\t\t\t\tassert.Equal(t, \"\", body)\n+\t\t\t}\n \n+\t\t\tif tc.expectHeaderLocation != \"\" {\n+\t\t\t\tassert.Equal(t, tc.expectHeaderLocation, rec.Result().Header[\"Location\"][0])\n+\t\t\t} else {\n+\t\t\t\t_, ok := rec.Result().Header[\"Location\"]\n+\t\t\t\tassert.False(t, ok)\n+\t\t\t}\n+\t\t})\n+\t}\n }\n \n func TestEchoFile(t *testing.T) {"
        },
        {
          "filename": "middleware/static.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -167,7 +167,7 @@ func StaticWithConfig(config StaticConfig) echo.MiddlewareFunc {\n \t\t\tif err != nil {\n \t\t\t\treturn\n \t\t\t}\n-\t\t\tname := filepath.Join(config.Root, path.Clean(\"/\"+p)) // \"/\"+ for security\n+\t\t\tname := filepath.Join(config.Root, filepath.Clean(\"/\"+p)) // \"/\"+ for security\n \n \t\t\tif config.IgnoreBase {\n \t\t\t\troutePath := path.Base(strings.TrimRight(c.Path(), \"/*\"))"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ce0b12ae531b8c6523797af2425c9c0b6d772c4e",
            "date": "2025-01-12T07:28:38Z",
            "author_login": "zhuhaicity"
          },
          {
            "sha": "ee3e1297788e8fc3543489ebc0d4e940be7c6532",
            "date": "2025-01-07T20:06:28Z",
            "author_login": "aldas"
          },
          {
            "sha": "45524e39d60d424d8ac175001eed70d6ace92930",
            "date": "2024-12-19T04:51:34Z",
            "author_login": "aldas"
          },
          {
            "sha": "692bc2abb6e83be2efe45f89f142f59dbca3a6d9",
            "date": "2024-12-12T05:47:56Z",
            "author_login": "aldas"
          },
          {
            "sha": "fd3f07447eddb53e096b0df3be38bbf79123d605",
            "date": "2024-12-11T10:18:50Z",
            "author_login": "aldas"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "Due to improper sanitization of user input on Windows, the static file handler allows for directory traversal, allowing an attacker to read files outside of the target directory that the server has permission to read.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-07T17:15:09.910",
    "last_modified": "2024-11-21T05:29:50.960",
    "fix_date": "2020-12-15T15:31:52Z"
  },
  "references": [
    {
      "url": "https://github.com/labstack/echo/commit/4422e3b66b9fd498ed1ae1d0242d660d0ed3faaa",
      "source": "security@golang.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/labstack/echo/pull/1718",
      "source": "security@golang.org",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2021-0051",
      "source": "security@golang.org",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/labstack/echo/commit/4422e3b66b9fd498ed1ae1d0242d660d0ed3faaa",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/labstack/echo/pull/1718",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2021-0051",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:21.208763",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "echo",
    "owner": "labstack",
    "created_at": "2015-03-01T17:43:01Z",
    "updated_at": "2025-01-14T18:36:33Z",
    "pushed_at": "2025-01-12T07:28:38Z",
    "size": 6255,
    "stars": 30275,
    "forks": 2235,
    "open_issues": 77,
    "watchers": 30275,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 876895,
      "Makefile": 1096,
      "HTML": 244
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T18:50:23.486853"
  }
}