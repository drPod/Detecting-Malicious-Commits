{
  "cve_id": "CVE-2020-36569",
  "github_data": {
    "repository": "nanobox-io/golang-nanoauth",
    "fix_commit": "063a3fb69896acf985759f0fe3851f15973993f3",
    "related_commits": [
      "063a3fb69896acf985759f0fe3851f15973993f3",
      "063a3fb69896acf985759f0fe3851f15973993f3"
    ],
    "patch_url": "https://github.com/nanobox-io/golang-nanoauth/commit/063a3fb69896acf985759f0fe3851f15973993f3.patch",
    "fix_commit_details": {
      "sha": "063a3fb69896acf985759f0fe3851f15973993f3",
      "commit_date": "2020-01-31T13:10:40Z",
      "author": {
        "login": "tylerflint",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #5 from bouk/constant-time-compare",
        "length": 75,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 23,
        "additions": 11,
        "deletions": 12
      },
      "files": [
        {
          "filename": "nanoauth.go",
          "status": "modified",
          "additions": 11,
          "deletions": 12,
          "patch": "@@ -5,7 +5,9 @@\n package nanoauth\n \n import (\n+\t\"crypto/subtle\"\n \t\"crypto/tls\"\n+\t\"errors\"\n \t\"net\"\n \t\"net/http\"\n )\n@@ -22,9 +24,6 @@ type Auth struct {\n var (\n \t// DefaultAuth is the default Auth object\n \tDefaultAuth = &Auth{}\n-\n-\t// whether or not to check auth tokens\n-\tcheck = true\n )\n \n func init() {\n@@ -34,7 +33,7 @@ func init() {\n \n // ServeHTTP is to implement the http.Handler interface. Also let clients know\n // when I have no matching route listeners\n-func (self Auth) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n+func (self *Auth) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n \treqPath := req.URL.Path\n \tskipOnce := false\n \n@@ -51,14 +50,14 @@ func (self Auth) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n \t\tskipOnce = true\n \t}\n \n-\tif !skipOnce && check {\n+\tif !skipOnce {\n \t\tauth := \"\"\n \t\tif auth = req.Header.Get(self.Header); auth == \"\" {\n \t\t\t// check form value (case sensitive) if header not set\n \t\t\tauth = req.FormValue(self.Header)\n \t\t}\n \n-\t\tif auth != self.Token {\n+\t\tif subtle.ConstantTimeCompare([]byte(auth), []byte(self.Token)) == 0 {\n \t\t\trw.WriteHeader(http.StatusUnauthorized)\n \t\t\treturn\n \t\t}\n@@ -69,6 +68,9 @@ func (self Auth) ServeHTTP(rw http.ResponseWriter, req *http.Request) {\n \n // ListenAndServeTLS starts a TLS listener and handles serving https\n func (self *Auth) ListenAndServeTLS(addr, token string, h http.Handler, excludedPaths ...string) error {\n+\tif token == \"\" {\n+\t\treturn errors.New(\"nanoauth: token missing\")\n+\t}\n \tconfig := &tls.Config{\n \t\tCertificates: []tls.Certificate{*self.Certificate},\n \t}\n@@ -78,9 +80,6 @@ func (self *Auth) ListenAndServeTLS(addr, token string, h http.Handler, excluded\n \t\treturn err\n \t}\n \n-\tif token == \"\" {\n-\t\tcheck = false\n-\t}\n \tself.ExcludedPaths = excludedPaths\n \tself.Token = token\n \n@@ -95,14 +94,14 @@ func (self *Auth) ListenAndServeTLS(addr, token string, h http.Handler, excluded\n // ListenAndServe starts a normal tcp listener and handles serving http while\n // still validating the auth token.\n func (self *Auth) ListenAndServe(addr, token string, h http.Handler, excludedPaths ...string) error {\n+\tif token == \"\" {\n+\t\treturn errors.New(\"nanoauth: token missing\")\n+\t}\n \thttpListener, err := net.Listen(\"tcp\", addr)\n \tif err != nil {\n \t\treturn err\n \t}\n \n-\tif token == \"\" {\n-\t\tcheck = false\n-\t}\n \tself.ExcludedPaths = excludedPaths\n \tself.Token = token\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "063a3fb69896acf985759f0fe3851f15973993f3",
            "date": "2020-01-31T13:10:40Z",
            "author_login": "tylerflint"
          },
          {
            "sha": "f6d0792ec349afea59b2f3f92b11412852cbaa27",
            "date": "2020-01-31T09:28:42Z",
            "author_login": "bouk"
          },
          {
            "sha": "bde2d861e7e49caf445873ee2ef999fd6f443de1",
            "date": "2020-01-31T09:12:35Z",
            "author_login": "bouk"
          },
          {
            "sha": "c2ebbac481bb41bf6523e1e5ab2800981483e22b",
            "date": "2019-03-11T15:10:57Z",
            "author_login": "tylerflint"
          },
          {
            "sha": "aa64107565ae4ba9f285aaafecc4e0c57b80892f",
            "date": "2019-03-11T15:10:19Z",
            "author_login": "tylerflint"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-287",
    "description": "Authentication is globally bypassed in github.com/nanobox-io/golang-nanoauth between v0.0.0-20160722212129-ac0cc4484ad4 and v0.0.0-20200131131040-063a3fb69896 if ListenAndServe is called with an empty token.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-27T22:15:11.857",
    "last_modified": "2024-11-21T05:29:51.547",
    "fix_date": "2020-01-31T13:10:40Z"
  },
  "references": [
    {
      "url": "https://github.com/nanobox-io/golang-nanoauth/commit/063a3fb69896acf985759f0fe3851f15973993f3",
      "source": "security@golang.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nanobox-io/golang-nanoauth/pull/5",
      "source": "security@golang.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2020-0004",
      "source": "security@golang.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nanobox-io/golang-nanoauth/commit/063a3fb69896acf985759f0fe3851f15973993f3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nanobox-io/golang-nanoauth/pull/5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2020-0004",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.222539",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "golang-nanoauth",
    "owner": "nanobox-io",
    "created_at": "2015-12-08T17:44:26Z",
    "updated_at": "2022-06-23T20:54:54Z",
    "pushed_at": "2020-01-31T13:10:42Z",
    "size": 22,
    "stars": 5,
    "forks": 5,
    "open_issues": 0,
    "watchers": 5,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Go": 13548
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:14:00.288191"
  }
}