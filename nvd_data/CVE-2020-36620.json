{
  "cve_id": "CVE-2020-36620",
  "github_data": {
    "repository": "Brondahl/EnumStringValues",
    "fix_commit": "c0fc7806beb24883cc2f9543ebc50c0820297307",
    "related_commits": [
      "c0fc7806beb24883cc2f9543ebc50c0820297307",
      "c0fc7806beb24883cc2f9543ebc50c0820297307"
    ],
    "patch_url": "https://github.com/Brondahl/EnumStringValues/commit/c0fc7806beb24883cc2f9543ebc50c0820297307.patch",
    "fix_commit_details": {
      "sha": "c0fc7806beb24883cc2f9543ebc50c0820297307",
      "commit_date": "2020-01-01T21:36:28Z",
      "author": {
        "login": "Brondahl",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Protect against DOS attacks made possible by parsing random invalid enum strings",
        "length": 80,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 32,
        "additions": 24,
        "deletions": 8
      },
      "files": [
        {
          "filename": "EnumStringValues/EnumExtensions.cs",
          "status": "modified",
          "additions": 24,
          "deletions": 8,
          "patch": "@@ -269,15 +269,12 @@ private static bool TryParseStringValueToEnum_ViaCache<TEnumType>(string lowerSt\n     {\r\n       var enumTypeObject = typeof(TEnumType);\r\n \r\n-      var typeAppropriateDictionary = parsedEnumStringsDictionaryByType.GetOrAdd(enumTypeObject, (x) => new ConcurrentDictionary<string, Enum>());\r\n+      var typeAppropriateDictionary = parsedEnumStringsDictionaryByType.GetOrAdd(\r\n+        enumTypeObject, \r\n+        (x) => BuildCacheDictionaryForParseStringValue<TEnumType>()\r\n+      );\r\n \r\n-      var cachedValue = typeAppropriateDictionary.GetOrAdd(lowerStringValue, (str) =>\r\n-      {\r\n-        var parseSucceededForDictionary = TryParseStringValueToEnum_Uncached<TEnumType>(lowerStringValue, out var parsedValueForDictionary);\r\n-        return parseSucceededForDictionary ? (Enum) parsedValueForDictionary : null;\r\n-      });\r\n-\r\n-      if (cachedValue != null)\r\n+      if (typeAppropriateDictionary.TryGetValue(lowerStringValue, out var cachedValue))\r\n       {\r\n         parsedValue = (TEnumType)cachedValue;\r\n         return true;\r\n@@ -292,6 +289,25 @@ private static bool TryParseStringValueToEnum_ViaCache<TEnumType>(string lowerSt\n     /// <summary> Cache for <see cref=\"TryParseStringValueToEnum{TEnumType}\"/> </summary>\r\n     private static ConcurrentDictionary<Type, ConcurrentDictionary<string, Enum>> parsedEnumStringsDictionaryByType;\r\n \r\n+\r\n+    private static ConcurrentDictionary<string, Enum> BuildCacheDictionaryForParseStringValue<TEnumType>() where TEnumType : System.Enum\r\n+    {\r\n+      var dict = new ConcurrentDictionary<string, Enum>();\r\n+\r\n+      foreach (var enumValue in EnumerateValues<TEnumType>())\r\n+      {\r\n+        foreach (var enumString in GetStringValues<TEnumType>(enumValue))\r\n+        {\r\n+            // Add to the dictionary, just overwriting if the string is already present.\r\n+            // This overwrite is legitimate, because we've declared parsing a duplicate string definition to be `undefined behaviour`.\r\n+            dict.AddOrUpdate(enumString.ToLower(), enumValue, ((repeatedString, previousEnumValue) => enumValue));\r\n+        }\r\n+      }\r\n+\r\n+      return dict;\r\n+    }\r\n+\r\n+\r\n     private static bool TryParseStringValueToEnum_Uncached<TEnumType>(this string lowerStringValue, out TEnumType parsedValue) where TEnumType : System.Enum\r\n     {\r\n       foreach (var enumValue in EnumerateValues<TEnumType>())\r"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "989d82a2401e22d3c9fe04c549e4471d8cf44655",
            "date": "2021-12-30T17:35:06Z",
            "author_login": "Brondahl"
          },
          {
            "sha": "b8b6ad9d95bba53c69b8ad90e8e193a745fe9bd3",
            "date": "2020-01-05T19:16:54Z",
            "author_login": "Brondahl"
          },
          {
            "sha": "4685f904e5d249842c4d5351c99e673dbaca54d6",
            "date": "2020-01-05T19:16:37Z",
            "author_login": "Brondahl"
          },
          {
            "sha": "0fc8cd1002e23a20ac0038d2716f6e103ab2df26",
            "date": "2020-01-05T19:16:02Z",
            "author_login": "Brondahl"
          },
          {
            "sha": "457757ad729077d8fb4f0723801b125c2e31f5b6",
            "date": "2020-01-02T12:24:42Z",
            "author_login": "Brondahl"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-400",
    "description": "A vulnerability was found in Brondahl EnumStringValues up to 4.0.0. It has been declared as problematic. This vulnerability affects the function GetStringValuesWithPreferences_Uncache of the file EnumStringValues/EnumExtensions.cs. The manipulation leads to resource consumption. Upgrading to version 4.0.1 is able to address this issue. The name of the patch is c0fc7806beb24883cc2f9543ebc50c0820297307. It is recommended to upgrade the affected component. VDB-216466 is the identifier assigned to this vulnerability.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-21T19:15:11.753",
    "last_modified": "2024-11-21T05:29:54.563",
    "fix_date": "2020-01-01T21:36:28Z"
  },
  "references": [
    {
      "url": "https://github.com/Brondahl/EnumStringValues/commit/c0fc7806beb24883cc2f9543ebc50c0820297307",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Brondahl/EnumStringValues/releases/tag/4.0.1",
      "source": "cna@vuldb.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.216466",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/Brondahl/EnumStringValues/commit/c0fc7806beb24883cc2f9543ebc50c0820297307",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Brondahl/EnumStringValues/releases/tag/4.0.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.216466",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory",
        "VDB Entry"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.192314",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "EnumStringValues",
    "owner": "Brondahl",
    "created_at": "2014-03-25T19:16:21Z",
    "updated_at": "2024-07-05T08:50:26Z",
    "pushed_at": "2022-12-22T03:35:25Z",
    "size": 1913,
    "stars": 21,
    "forks": 3,
    "open_issues": 4,
    "watchers": 21,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C#": 49773
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T18:43:47.884597"
  }
}