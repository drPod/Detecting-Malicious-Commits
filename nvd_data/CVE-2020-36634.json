{
  "cve_id": "CVE-2020-36634",
  "github_data": {
    "repository": "indeedeng/util",
    "fix_commit": "c0952a9db51a880e9544d9fac2a2218a6bfc9c63",
    "related_commits": [
      "c0952a9db51a880e9544d9fac2a2218a6bfc9c63",
      "c0952a9db51a880e9544d9fac2a2218a6bfc9c63"
    ],
    "patch_url": "https://github.com/indeedeng/util/commit/c0952a9db51a880e9544d9fac2a2218a6bfc9c63.patch",
    "fix_commit_details": {
      "sha": "c0952a9db51a880e9544d9fac2a2218a6bfc9c63",
      "commit_date": "2020-07-20T05:49:15Z",
      "author": {
        "login": "deadok22",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "COMMON-3969: Explicit alphanumeric n-gram indexes",
        "length": 172,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 148,
        "additions": 124,
        "deletions": 24
      },
      "files": [
        {
          "filename": "varexport/src/main/java/com/indeed/util/varexport/Variable.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -51,6 +51,11 @@ public String getName() {\n         return name;\n     }\n \n+    /**\n+     * @deprecated do not use this.\n+     * Please implement your own tokenization of variable names, if needed.\n+     */\n+    @Deprecated\n     public String[] getIndexableNames() {\n         return indexableNames;\n     }"
        },
        {
          "filename": "varexport/src/main/java/com/indeed/util/varexport/servlet/ViewExportedVariablesServlet.java",
          "status": "modified",
          "additions": 57,
          "deletions": 24,
          "patch": "@@ -4,7 +4,11 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Joiner;\n import com.google.common.base.Strings;\n-import com.google.common.collect.*;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.SetMultimap;\n+import com.google.common.collect.TreeMultimap;\n import com.indeed.util.varexport.VarExporter;\n import com.indeed.util.varexport.Variable;\n import com.indeed.util.varexport.VariableHost;\n@@ -14,6 +18,7 @@\n import freemarker.template.Template;\n import org.apache.log4j.Logger;\n \n+import javax.annotation.Nullable;\n import javax.servlet.ServletConfig;\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n@@ -25,7 +30,18 @@\n import java.io.PrintWriter;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n-import java.util.*;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.IntStream;\n+import java.util.stream.Stream;\n \n /**\n  * Servlet for displaying variables exported by {@link VarExporter}.\n@@ -287,8 +303,7 @@ public void visit(Variable var) {\n         }\n         root.put(\"vars\", varList);\n         if (withIndex) {\n-            final String varsIndex = buildIndex(varList);\n-            root.put(\"varsIndex\", varsIndex);\n+            root.put(\"varsIndex\", alphanumericNGramIndexesJSON(varList));\n         }\n \n         try {\n@@ -298,19 +313,24 @@ public void visit(Variable var) {\n         }\n     }\n \n-    private String buildIndex(final List<Variable> varList) {\n-        final SetMultimap<String, Integer> uniGram = buildNGramIndex(varList, 1);\n-        final SetMultimap<String, Integer> biGram = buildNGramIndex(varList, 2);\n-        final SetMultimap<String, Integer> triGram = buildNGramIndex(varList, 3);\n+    private String alphanumericNGramIndexesJSON(final List<Variable> varList) {\n+        // The JSON we build here is valid as we only use alphanumeric n-grams\n+\n         final StringBuilder json = new StringBuilder();\n+\n         json.append('{').append('\\n');\n-        json.append(\"\\\"uniGram\\\":\").append('\\n');\n-        appendTo(json, uniGram).append(',').append('\\n');\n+\n+        json.append(\"\\n\\\"uniGram\\\":\").append('\\n');\n+        appendTo(json, buildAlphanumericNGramIndex(varList, 1)).append(',').append('\\n');\n+\n         json.append(\"\\\"biGram\\\":\").append('\\n');\n-        appendTo(json, biGram).append(',').append('\\n');;\n+        appendTo(json, buildAlphanumericNGramIndex(varList, 2)).append(',').append('\\n');;\n+\n         json.append(\"\\\"triGram\\\":\").append('\\n');\n-        appendTo(json, triGram);\n+        appendTo(json, buildAlphanumericNGramIndex(varList, 3));\n+\n         json.append('}');\n+\n         return json.toString();\n     }\n \n@@ -333,19 +353,32 @@ private <K> StringBuilder appendTo(final StringBuilder json, final SetMultimap<K\n         return json;\n     }\n \n-    private SetMultimap<String, Integer> buildNGramIndex(final List<Variable> varList, final int n) {\n-        final TreeMultimap<String, Integer> uniGram = TreeMultimap.create();\n-        for (int index = 0; index < varList.size(); index++) {\n-            final Variable var = varList.get(index);\n-            final String[] indexableNames = var.getIndexableNames();\n-            for (final String indexableName : indexableNames) {\n-                for (int i = 0; i < indexableName.length() - n + 1; i++) {\n-                    final String key = indexableName.substring(i, i + n);\n-                    uniGram.put(key, index);\n-                }\n-            }\n+    @VisibleForTesting\n+    static SetMultimap<String, Integer> buildAlphanumericNGramIndex(final List<Variable> varList, final int n) {\n+        final TreeMultimap<String, Integer> nGramIndex = TreeMultimap.create();\n+        IntStream\n+                .range(0, varList.size())\n+                .forEach(i ->\n+                        alphanumericNGrams(varList.get(i).getName(), n)\n+                                .forEach(ngram -> nGramIndex.put(ngram, i))\n+                );\n+        return nGramIndex;\n+    }\n+\n+    private static final Pattern NON_ALPHANUMERIC = Pattern.compile(\"[^a-z0-9]+\");\n+\n+    @VisibleForTesting\n+    static Stream<String> alphanumericNGrams(@Nullable final String in, final int n) {\n+        if (in == null) {\n+            return Stream.empty();\n         }\n-        return uniGram;\n+        return NON_ALPHANUMERIC\n+                .splitAsStream(in.toLowerCase(Locale.US))\n+                .flatMap(alnumSubString ->\n+                        IntStream\n+                                .rangeClosed(0, alnumSubString.length() - n)\n+                                .mapToObj(i -> alnumSubString.substring(i, i + n))\n+                );\n     }\n \n     private void addVariable(final Variable v, final List<Variable> out) {"
        },
        {
          "filename": "varexport/src/test/java/com/indeed/util/varexport/servlet/ViewExportedVariablesServletTest.java",
          "status": "modified",
          "additions": 62,
          "deletions": 0,
          "patch": "@@ -2,6 +2,8 @@\n \n import com.google.common.base.Strings;\n import com.google.common.collect.Lists;\n+import com.google.common.collect.SetMultimap;\n+import com.google.common.collect.TreeMultimap;\n import com.indeed.util.varexport.Export;\n import com.indeed.util.varexport.ManagedVariable;\n import com.indeed.util.varexport.VarExporter;\n@@ -19,13 +21,16 @@\n import java.io.IOException;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n import static org.easymock.EasyMock.createMock;\n import static org.easymock.EasyMock.expect;\n import static org.easymock.EasyMock.expectLastCall;\n import static org.easymock.EasyMock.replay;\n import static org.easymock.EasyMock.verify;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertThat;\n \n@@ -164,6 +169,63 @@ public void escapesHtmlInVariableNamesAndValues() throws IOException {\n         assertFalse(bodyWriter.toString().contains(unescaped));\n     }\n \n+    @Test\n+    public void buildAlphaNumericNGramIndex() {\n+        final TreeMultimap<String, Integer> expectedTriGramIndex = TreeMultimap.create();\n+        expectedTriGramIndex.put(\"abc\", 0);\n+        expectedTriGramIndex.put(\"bcd\", 0);\n+        expectedTriGramIndex.put(\"bcd\", 1);\n+        expectedTriGramIndex.put(\"zzz\", 2);\n+\n+        final SetMultimap<String, Integer> actualTriGramIndex = ViewExportedVariablesServlet.buildAlphanumericNGramIndex(\n+                Arrays.asList(\n+                        ManagedVariable.builder().setName(\"abcd\").build(),\n+                        ManagedVariable.builder().setName(\"bcd\").build(),\n+                        ManagedVariable.builder().setName(\"zzz\").build()\n+                ),\n+                3\n+        );\n+\n+        assertEquals(expectedTriGramIndex, actualTriGramIndex);\n+    }\n+\n+    @Test\n+    public void alphanumericNGrams() {\n+        assertEquals(0, ViewExportedVariablesServlet.alphanumericNGrams(null, 1).count());\n+        assertEquals(0, ViewExportedVariablesServlet.alphanumericNGrams(\"zzz\", 42).count());\n+\n+        assertEquals(\n+                Arrays.asList(\"m\", \"1\", \"3\", \"b\", \"i\", \"t\", \"r\", \"i\"),\n+                ViewExportedVariablesServlet\n+                        .alphanumericNGrams(\"m1-3-/bi<</tri\", 1)\n+                        .collect(Collectors.toList())\n+        );\n+\n+        assertEquals(\n+                Arrays.asList(\"m1\", \"bi\", \"tr\", \"ri\"),\n+                ViewExportedVariablesServlet\n+                        .alphanumericNGrams(\"m1-3-/bi<</tri\", 2)\n+                        .collect(Collectors.toList())\n+        );\n+\n+        assertEquals(\n+                Arrays.asList(\n+                        \"m1x\",\n+                        \"1x3\",\n+                        \"x3d\",\n+                        \"3dc\",\n+                        \"dca\",\n+                        \"cas\",\n+                        \"ase\",\n+                        \"tri\",\n+                        \"tri\"\n+                ),\n+                ViewExportedVariablesServlet\n+                        .alphanumericNGrams(\"m1x3dCaSe-1-/bi<</tri?tri\", 3)\n+                        .collect(Collectors.toList())\n+        );\n+    }\n+\n     @Before\n     public void setUp() throws Exception {\n         VarExporter.resetGlobal();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e1adf9fa1ad5325a9db493dce7791cd85c63e725",
            "date": "2024-05-17T21:15:13Z",
            "author_login": "mmorrisontx"
          },
          {
            "sha": "3042601f694e2215655283ddd86ae5cc5b69cae1",
            "date": "2023-06-21T21:13:49Z",
            "author_login": "arlaneenalra"
          },
          {
            "sha": "ff614a9a91fa16eac2450b21927f5ca4298ee115",
            "date": "2023-06-13T22:03:05Z",
            "author_login": "arlaneenalra"
          },
          {
            "sha": "c66a8ac6c97a128a0bc9007d31f452895808fbdc",
            "date": "2023-06-13T20:24:05Z",
            "author_login": "arlaneenalra"
          },
          {
            "sha": "2657bebc27aa4e8d203ba9c36bf9c553ca4923b7",
            "date": "2023-05-15T14:32:42Z",
            "author_login": "mkw"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "A vulnerability classified as problematic has been found in Indeed Engineering util up to 1.0.33. Affected is the function visit/appendTo of the file varexport/src/main/java/com/indeed/util/varexport/servlet/ViewExportedVariablesServlet.java. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 1.0.34 is able to address this issue. The name of the patch is c0952a9db51a880e9544d9fac2a2218a6bfc9c63. It is recommended to upgrade the affected component. VDB-216882 is the identifier assigned to this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-12-27T13:15:11.047",
    "last_modified": "2024-11-21T05:29:56.910",
    "fix_date": "2020-07-20T05:49:15Z"
  },
  "references": [
    {
      "url": "https://github.com/indeedeng/util/commit/c0952a9db51a880e9544d9fac2a2218a6bfc9c63",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/indeedeng/util/releases/tag/published%2F1.0.34",
      "source": "cna@vuldb.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.216882",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.216882",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/indeedeng/util/commit/c0952a9db51a880e9544d9fac2a2218a6bfc9c63",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/indeedeng/util/releases/tag/published%2F1.0.34",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.216882",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.216882",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.216346",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "util",
    "owner": "indeedeng",
    "created_at": "2013-09-24T19:54:16Z",
    "updated_at": "2024-09-15T04:48:27Z",
    "pushed_at": "2024-05-17T21:16:04Z",
    "size": 13681,
    "stars": 149,
    "forks": 59,
    "open_issues": 0,
    "watchers": 149,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Java": 838664,
      "C": 44431,
      "FreeMarker": 9077,
      "Makefile": 4324
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T20:24:00.452541"
  }
}