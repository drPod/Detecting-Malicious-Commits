{
  "cve_id": "CVE-2020-36827",
  "github_data": {
    "repository": "amaltsev/XAO-Web",
    "fix_commit": "20dd1d3bc5b811503f5722a16037b60197fe7ef4",
    "related_commits": [
      "20dd1d3bc5b811503f5722a16037b60197fe7ef4",
      "20dd1d3bc5b811503f5722a16037b60197fe7ef4"
    ],
    "patch_url": "https://github.com/amaltsev/XAO-Web/commit/20dd1d3bc5b811503f5722a16037b60197fe7ef4.patch",
    "fix_commit_details": {
      "sha": "20dd1d3bc5b811503f5722a16037b60197fe7ef4",
      "commit_date": "2020-09-18T03:22:22Z",
      "author": {
        "login": "amaltsev",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "1.84 Security fix for json-embed in Web::Action",
        "length": 86,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 38,
        "additions": 27,
        "deletions": 11
      },
      "files": [
        {
          "filename": "Makefile.PL",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -90,11 +90,11 @@ WriteMakefile(\n     'MIN_PERL_VERSION'  => '5.10.1',\n     'LICENSE'           => 'artistic',\n     'CONFIGURE_REQUIRES'=> {\n-        'XAO::Base'                 => 1.27,\n+        'XAO::Base'                 => 1.28,\n         'ExtUtils::MakeMaker'       => 6.64,\n     },\n     'TEST_REQUIRES'     => {\n-        'XAO::Base'                 => 1.27,\n+        'XAO::Base'                 => 1.28,\n     },\n     'PREREQ_PM'     => {\n         'Authen::SASL::SASLprep'    => 1.1,\n@@ -119,7 +119,7 @@ WriteMakefile(\n         'Text::FormatTable'         => 0.01,\n         'Time::HiRes'               => 1.9719,\n         'Unicode::Normalize'        => 1.18,\n-        'XAO::Base'                 => 1.27,\n+        'XAO::Base'                 => 1.28,\n         'XAO::FS'                   => 1.21,\n     },\n     META_MERGE => {"
        },
        {
          "filename": "Web.pm",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -15,7 +15,7 @@ use XAO::Errors qw(XAO::Web);\n # XAO::Web version number. Hand changed with every release!\n #\n use vars qw($VERSION);\n-$VERSION='1.83';\n+$VERSION='1.84';\n \n ###############################################################################\n "
        },
        {
          "filename": "lib/XAO/DO/Web/Action.pm",
          "status": "modified",
          "additions": 10,
          "deletions": 1,
          "patch": "@@ -316,7 +316,16 @@ sub display_data ($@) {\n         # are then encoded into bytes of the page final encoding.\n         # JSON's to_json() call is exactly that, character output.\n         #\n-        $self->textout(to_json($data));\n+        my $json=to_json($data);\n+\n+        # The data is typically embedded in a <script>...</script> set\n+        # of tags, so if the content of a data field has </script> then\n+        # that would close the outer script tag allowing that content to\n+        # execute in the page context. Bad bad bad.\n+        #\n+        $json =~ s/([<>])/'\\\\u' . sprintf('%04x',ord($1))/esg;\n+\n+        $self->textout($json);\n     }\n     elsif($format eq 'xml' || $format eq 'xml-embed') {\n         my $xml_sub=$self->get_mode_sub('xml',$args->{'xmlmode'} || $args->{'mode'},$args->{'mode'});"
        },
        {
          "filename": "t/testcases/Web/Page.pm",
          "status": "modified",
          "additions": 13,
          "deletions": 6,
          "patch": "@@ -723,6 +723,8 @@ sub test_unicode_transparency {\n     use utf8;\n     binmode STDERR, ':utf8';\n \n+    my $byte2122=Encode::encode('utf8',\"\\x{2122}\");\n+\n     # By default, mainly for backwards compatibility, the template\n     # engine operates on bytes, not characters. Thus we expect bytes\n     # back even when we supply unicode.\n@@ -854,18 +856,23 @@ sub test_unicode_transparency {\n         },\n         c15c => {\n             template    => qq(<%Page template='&#8482;'%>),\n-            expect      => Encode::encode_utf8('\u2122'),\n+            expect      => $byte2122,\n         },\n         #\n         d1a => {\n-            template    => qq(<script><%MyAction datamode='test-alt' arg='Foo\\x{2122}' format='json-embed'%></script>),\n-            expect      => qr/Foo\\x{2122}/,\n+            objname     => 'Web::MyAction',\n+            args        => { datamode => 'test-alt', format => 'json-embed', arg => qq(Foo\\x{2122}) },\n+            expect      => qr/Foo$byte2122/,\n         },\n         d1b => {\n             charmode    => 1,\n             template    => qq(<script><%MyAction datamode='test-alt' arg='Foo\\x{2122}' format='json-embed'%></script>),\n             expect      => qr/Foo\\x{2122}/,\n         },\n+        d1c => {\n+            template    => qq(<script><%MyAction datamode='test-alt' arg='</script><script>alert(1);' format='json-embed'%></script>),\n+            expect      => qr/\\\\u003c\\/script\\\\u003e\\\\u003cscript\\\\u003ealert/,\n+        },\n         #\n         e1 => {\n             template    => \"<\\$FOO\\$>\\x00\\x01\\x02\",\n@@ -928,7 +935,7 @@ sub test_unicode_transparency {\n \n         $self->siteconfig->put('/xao/page/character_mode' => $test->{'charmode'});\n \n-        my $page=XAO::Objects->new(objname => 'Web::Page');\n+        my $page=XAO::Objects->new(objname => $test->{'objname'} || 'Web::Page');\n \n         my $template=$test->{'template'};\n         my $got=$page->expand({template => $template},$test->{'args'});\n@@ -950,7 +957,7 @@ sub test_unicode_transparency {\n         }\n \n         if(ref $expect eq 'Regexp') {\n-            $self->assert($got =~ $expect,\n+            $self->assert($got =~ $expect ? 1 : 0,\n                 \"Test $tname - expected to match '$expect', got '$got'\");\n         }\n         else {\n@@ -976,7 +983,7 @@ sub test_expand {\n         '<$TEST/f$>'    => '\\'&quot;!@#$%^&amp;*()_-=[]\\\\&lt;&gt;? ',\n         '<$TEST/q$>'    => '\\'%22!@%23$%25^%26*()_-%3d[]\\\\%3c%3e%3f%20',\n         '<$TEST/u$>'    => '\\'%22!@%23$%25^%26*()_-%3d[]\\\\%3c%3e%3f%20',\n-        '<$TEST/j$>'    => '\\\\u0027\\\\\"!@#$%^&*()_-=[]\\\\\\\\<>? ',\n+        '<$TEST/j$>'    => '\\\\u0027\\\\\"!@#$%^&*()_-=[]\\\\\\\\\\\\u003c\\\\u003e? ',\n     );\n     foreach my $template (keys %ttt) {\n         my $got=$page->expand(template => $template,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b82c260d3030d0b1e616c93efe3eb429f1b8dccf",
            "date": "2023-05-22T21:50:01Z",
            "author_login": "amaltsev"
          },
          {
            "sha": "4e0e5603ab6094699db5bca768ba98163fc6d94c",
            "date": "2023-05-22T21:37:26Z",
            "author_login": "amaltsev"
          },
          {
            "sha": "b0c2d1a0ca743abed57e6f8a4d532facb6bea43e",
            "date": "2023-05-22T21:33:26Z",
            "author_login": "amaltsev"
          },
          {
            "sha": "75bcf14956ca9344a3f8b8dd3c75121b8de3c2cc",
            "date": "2023-05-22T21:01:36Z",
            "author_login": "billgerrard"
          },
          {
            "sha": "b7f38e6e5640a8cf617b9e51ce9960f6b9cd41e7",
            "date": "2022-12-08T04:46:26Z",
            "author_login": "amaltsev"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": null,
    "cvss_vector": null,
    "cwe_id": null,
    "description": "The XAO::Web module before 1.84 for Perl mishandles < and > characters in JSON output during use of json-embed in Web::Action.",
    "attack_vector": null,
    "attack_complexity": null
  },
  "temporal_data": {
    "published_date": "2024-03-24T01:15:45.453",
    "last_modified": "2024-11-21T05:30:19.003",
    "fix_date": "2020-09-18T03:22:22Z"
  },
  "references": [
    {
      "url": "https://github.com/amaltsev/XAO-Web/commit/20dd1d3bc5b811503f5722a16037b60197fe7ef4",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://metacpan.org/dist/XAO-Web/changes",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/amaltsev/XAO-Web/commit/20dd1d3bc5b811503f5722a16037b60197fe7ef4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://metacpan.org/dist/XAO-Web/changes",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:07:52.894762",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "XAO-Web",
    "owner": "amaltsev",
    "created_at": "2018-06-13T00:07:12Z",
    "updated_at": "2022-07-02T00:01:54Z",
    "pushed_at": "2023-05-22T21:50:18Z",
    "size": 800,
    "stars": 0,
    "forks": 3,
    "open_issues": 0,
    "watchers": 0,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Perl": 822926,
      "XS": 16318,
      "Dockerfile": 3785,
      "Vim Script": 2409,
      "HTML": 1338,
      "Makefile": 823,
      "Shell": 90
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T21:17:27.885003"
  }
}