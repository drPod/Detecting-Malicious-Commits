{
  "cve_id": "CVE-2020-4038",
  "github_data": {
    "repository": "prisma-labs/graphql-playground",
    "fix_commit": "bf1883db538c97b076801a60677733816cb3cfb7",
    "related_commits": [
      "bf1883db538c97b076801a60677733816cb3cfb7",
      "bf1883db538c97b076801a60677733816cb3cfb7"
    ],
    "patch_url": "https://github.com/prisma-labs/graphql-playground/commit/bf1883db538c97b076801a60677733816cb3cfb7.patch",
    "fix_commit_details": {
      "sha": "bf1883db538c97b076801a60677733816cb3cfb7",
      "commit_date": "2020-06-07T01:17:58Z",
      "author": {
        "login": "acao",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-4852-vrh7-28rf",
        "length": 188,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 539,
        "additions": 447,
        "deletions": 92
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 75,
          "deletions": 43,
          "patch": "@@ -1,6 +1,8 @@\n+> **SECURITY WARNING:** This `graphql-playground-html` and [all of it's middleware dependents](#impacted-packages) in this repository **had a severe XSS Reflection attack vulnerability to unsanitized user input** until version `graphql-playground-html@1.6.20`. Impacted are any and all **user-defined** input to `renderPlaygroundPage()`, `koaPlayground()`,`expressPlayground()`, `koaPlayground()`, or `lambdaPlayground()`. If you used static values, such as `graphql-playground-electron` does in [it's webpack config](https://github.com/prisma-labs/graphql-playground/blob/master/packages/graphql-playground-electron/webpack.config.build.js#L16), you were not vulnerable to the attack. [More Details](./SECURITY.md)\n+\n <p align=\"center\"><img src=\"https://imgur.com/5fzMbyV.png\" width=\"269\"></p>\n \n-[![npm version](https://badge.fury.io/js/graphql-playground-react.svg)](https://badge.fury.io/js/graphql-playground-react) \n+[![npm version](https://badge.fury.io/js/graphql-playground-react.svg)](https://badge.fury.io/js/graphql-playground-react)\n [![prisma-labs](https://circleci.com/gh/prisma-labs/graphql-playground.svg?style=shield)](https://circleci.com/gh/prisma-labs/graphql-playground)\n \n **Future of this repository**: see [the announcement issue](https://github.com/prisma-labs/graphql-playground/issues/1143) for details.\n@@ -25,6 +27,32 @@ $ brew cask install graphql-playground\n - \u2699 GraphQL Config support with multiple Projects & Endpoints\n - \ud83d\udea5 Apollo Tracing support\n \n+## Security Details\n+\n+**NOTE: only _unsanitized user input_ to the functions in these packages is vulnerable** to the recently reported XSS Reflection attack.\n+\n+### Impact\n+\n+The only reason this vulnerability exists is because we are using template strings in `renderPlaygroundPage()` with potentially user defined variables. This allows an attacker to inject html and javascript into a page on execution.\n+\n+Common examples may be user-defined path parameters, query string, unsanitized UI provided values in database, etc that are used to build template strings or passed directly to a `renderPlaygroundPage()` or the matching middleware function equivalent.\n+\n+### Impacted Packages\n+\n+**All versions of these packages are impacted until the ones specified below**, which are now safe for user defined input:\n+\n+- `graphql-playground-html`: **\u2614 safe** @ `1.6.20`\n+- `graphql-playground-express` **\u2614 safe** @ `1.7.15`\n+- `graphql-playground-koa` **\u2614 safe** @ `1.6.14`\n+- `graphql-playground-hapi` **\u2614 safe** @ `1.6.12`\n+- `graphql-playground-lambda` **\u2614 safe** @ `1.7.16`\n+- `graphql-playground-electron` has always been **\u2614 safe** from XSS attacks! This is because configuration is statically defined [it's webpack config](https://github.com/prisma-labs/graphql-playground/blob/master/packages/graphql-playground-electron/webpack.config.build.js#L16)\n+- `graphql-playground-react` is safe because it does not use `renderPlaygroundPage()` anywhere, and thus is not susceptible to template string XSS reflection attacks.\n+\n+### More Information\n+\n+See the [security docs](./SECURITY.md) for more details on how your implementation might be impacted by this vulnerability. It contains safe examples, unsafe examples, workarounds, and more details.\n+\n ## FAQ\n \n ### How is this different from [GraphiQL](https://github.com/graphql/graphiql)?\n@@ -122,12 +150,12 @@ interface ISettings {\n \n ```ts\n interface Tab {\n-\tendpoint: string\n-\tquery: string\n-\tname?: string\n-\tvariables?: string\n-\tresponses?: string[]\n-\theaders?: { [key: string]: string }\n+  endpoint: string\n+  query: string\n+  name?: string\n+  variables?: string\n+  responses?: string[]\n+  headers?: { [key: string]: string }\n }\n ```\n \n@@ -169,8 +197,8 @@ Including Fonts (`1.`)\n \n ```html\n <link\n-\thref=\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|Source+Code+Pro:400,700\"\n-\trel=\"stylesheet\"\n+  href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|Source+Code+Pro:400,700\"\n+  rel=\"stylesheet\"\n />\n ```\n \n@@ -183,10 +211,10 @@ import { Provider } from 'react-redux'\n import { Playground, store } from 'graphql-playground-react'\n \n ReactDOM.render(\n-\t<Provider store={store}>\n-\t\t<Playground endpoint=\"https://api.graph.cool/simple/v1/swapi\" />\n-\t</Provider>,\n-\tdocument.body,\n+  <Provider store={store}>\n+    <Playground endpoint='https://api.graph.cool/simple/v1/swapi' />\n+  </Provider>,\n+  document.body,\n )\n ```\n \n@@ -232,18 +260,18 @@ import lambdaPlayground from 'graphql-playground-middleware-lambda'\n // const lambdaPlayground = require('graphql-playground-middleware-lambda').default\n \n exports.graphqlHandler = function graphqlHandler(event, context, callback) {\n-\tfunction callbackFilter(error, output) {\n-\t\t// eslint-disable-next-line no-param-reassign\n-\t\toutput.headers['Access-Control-Allow-Origin'] = '*'\n-\t\tcallback(error, output)\n-\t}\n-\n-\tconst handler = graphqlLambda({ schema: myGraphQLSchema })\n-\treturn handler(event, context, callbackFilter)\n+  function callbackFilter(error, output) {\n+    // eslint-disable-next-line no-param-reassign\n+    output.headers['Access-Control-Allow-Origin'] = '*'\n+    callback(error, output)\n+  }\n+\n+  const handler = graphqlLambda({ schema: myGraphQLSchema })\n+  return handler(event, context, callbackFilter)\n }\n \n exports.playgroundHandler = lambdaPlayground({\n-\tendpoint: '/dev/graphql',\n+  endpoint: '/dev/graphql',\n })\n ```\n \n@@ -267,6 +295,10 @@ functions:\n           cors: true\n ```\n \n+#### Security Issue\n+\n+There is an [XSS Reflection Vulnerability](./SECURITY.md) when using these middlewares with unsanitized user input before\n+\n ## Development\n \n ```sh\n@@ -285,27 +317,27 @@ These are the available options:\n \n ```ts\n export interface EditorColours {\n-\tproperty: string\n-\tcomment: string\n-\tpunctuation: string\n-\tkeyword: string\n-\tdef: string\n-\tqualifier: string\n-\tattribute: string\n-\tnumber: string\n-\tstring: string\n-\tbuiltin: string\n-\tstring2: string\n-\tvariable: string\n-\tmeta: string\n-\tatom: string\n-\tws: string\n-\tselection: string\n-\tcursorColor: string\n-\teditorBackground: string\n-\tresultBackground: string\n-\tleftDrawerBackground: string\n-\trightDrawerBackground: string\n+  property: string\n+  comment: string\n+  punctuation: string\n+  keyword: string\n+  def: string\n+  qualifier: string\n+  attribute: string\n+  number: string\n+  string: string\n+  builtin: string\n+  string2: string\n+  variable: string\n+  meta: string\n+  atom: string\n+  ws: string\n+  selection: string\n+  cursorColor: string\n+  editorBackground: string\n+  resultBackground: string\n+  leftDrawerBackground: string\n+  rightDrawerBackground: string\n }\n ```\n "
        },
        {
          "filename": "SECURITY.md",
          "status": "added",
          "additions": 132,
          "deletions": 0,
          "patch": "@@ -0,0 +1,132 @@\n+# Known Vulnerabilities\n+\n+## XSS Reflection Vulnerability\n+\n+the origin of the vulnerability is in `renderPlaygroundPage`, found in `graphql-playground-html`\n+\n+### Impact\n+\n+When using\n+\n+- `renderPlaygroundPage()`,\n+- `koaPlayground()`\n+- `expressPlayground()`\n+- `koaPlayground()`\n+- `lambdaPlayground()`\n+- any downstream dependents that use these functions\n+\n+without sanitization of user input, your application is vulnerable to an XSS Reflecton Attack. This is a serious vulnerability that could allow for exfiltration of data or user credentials, or to disrupt systems.\n+\n+### Impacted Packages\n+\n+**All versions of these packages are impacted until those specified below**, which are now safe for user defined input:\n+\n+- `graphql-playground-html`: **\u2614 safe** @ `1.6.20`\n+- `graphql-playground-express` **\u2614 safe** @ `1.7.15`\n+- `graphql-playground-koa` **\u2614 safe** @ `1.6.14`\n+- `graphql-playground-hapi` **\u2614 safe** @ `1.6.12`\n+- `graphql-playground-lambda` **\u2614 safe** @ `1.7.16`\n+\n+### Static input was always safe\n+\n+These examples are safe for _all versions_ **because input is static**\n+\n+with `express` and `renderPlaygroundPage`:\n+\n+```js\n+app.get('/playground', (req) => {\n+  res.html(\n+    renderPlaygroundPage({\n+      endpoint: `/our/graphql`,\n+    }),\n+  )\n+  next()\n+})\n+```\n+\n+with `expressPlayground`:\n+\n+```js\n+// params\n+app.get('/playground', (req) =>\n+  expressPlayground({\n+    endpoint: `/our/graphql`,\n+    settings: { 'editor.theme': req.query.darkMode ? 'dark' : 'light' },\n+  }),\n+)\n+```\n+\n+with `koaPlayground`:\n+\n+```js\n+const koa = require('koa')\n+const koaRouter = require('koa-router')\n+const koaPlayground = require('graphql-playground-middleware-koa')\n+\n+const app = new koa()\n+const router = new koaRouter()\n+\n+router.all('/playground', koaPlayground({ endpoint: '/graphql' }))\n+```\n+\n+### Vulnerable Examples\n+\n+Here are some examples where the vulnerability would be present before the patch, because of unfiltered user input\n+\n+```js\n+const express = require('express')\n+const expressPlayground = require('graphql-playground-middleware-express')\n+  .default\n+\n+const app = express()\n+\n+app.use(express.json())\n+\n+// params\n+app.get('/playground/:id', (req) =>\n+  expressPlayground({\n+    endpoint: `/our/graphql/${req.params.id}`,\n+  }),\n+)\n+\n+// params\n+app.get('/playground', (req) =>\n+  expressPlayground({\n+    endpoint: `/our/graphql`,\n+    // any settings that are unsanitized user input, not just `endpoint`\n+    settings: { 'editor.fontFamily': req.query.font },\n+  }),\n+)\n+```\n+\n+### Workaround\n+\n+To fix this issue without the update, you can sanitize however you want.\n+\n+We suggest using [`xss`](https://www.npmjs.com/package/xss) (what we use for our own fix)\n+\n+For example, with `graphql-playground-middleware-express`:\n+\n+```js\n+const express = require('express')\n+const { filterXSS } = require('xss')\n+const expressPlayground = require('graphql-playground-middleware-express')\n+  .default\n+\n+\n+const app = express()\n+\n+const filter = (val) => filterXSS(val, {\n+  whitelist: [],\n+  stripIgnoreTag: true,\n+  stripIgnoreTagBody: ['script']\n+})\n+\n+// simple example\n+app.get('/playground/:id', (req) =>\n+  expressPlayground({ endpoint: `/graphql/${filter(req.params.id)}` })\n+\n+// advanced params\n+app.get('/playground', (req) =>\n+  expressPlayground(JSON.parse(filter(JSON.stringify(req.query))))\n+```"
        },
        {
          "filename": "packages/graphql-playground-html/README.md",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -1,5 +1,7 @@\n # graphql-playground-html\n \n+> **SECURITY WARNING:** This package and all of it's dependendents had a severe XSS Reflection attack vulnerability until version `1.6.20` of this package. You must sanitize any and all user input values to `renderPlaygroundPage()` values. If you used static values in your middlewares, including ours, you were not vulnerable to the attack.\n+\n This package is being used by the GraphQL Playground middlewares.\n \n For local development, you can `yarn link` this package, then use `yarn link graphql-playground-html` in the"
        },
        {
          "filename": "packages/graphql-playground-html/package.json",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -33,5 +33,7 @@\n   \"typescript\": {\n     \"definition\": \"dist/index.d.ts\"\n   },\n-  \"dependencies\": {}\n+  \"dependencies\": {\n+    \"xss\": \"^1.0.6\"\n+  }\n }"
        },
        {
          "filename": "packages/graphql-playground-html/src/render-playground-page.ts",
          "status": "modified",
          "additions": 49,
          "deletions": 22,
          "patch": "@@ -1,3 +1,5 @@\n+import { filterXSS } from 'xss';\n+\n import getLoadingMarkup from './get-loading-markup'\n \n export interface MiddlewareOptions {\n@@ -72,20 +74,38 @@ export interface Tab {\n   headers?: { [key: string]: string }\n }\n \n+const filter = (val) => {\n+  return filterXSS(val, {\n+    // @ts-ignore\n+    whiteList: [],\n+    stripIgnoreTag: true,\n+    stripIgnoreTagBody: [\"script\"]\n+  })\n+}\n+\n+\n const loading = getLoadingMarkup()\n \n-const getCdnMarkup = ({ version, cdnUrl = '//cdn.jsdelivr.net/npm', faviconUrl }) => `\n-    <link rel=\"stylesheet\" href=\"${cdnUrl}/graphql-playground-react${\n-  version ? `@${version}` : ''\n-}/build/static/css/index.css\" />\n-    ${typeof faviconUrl === 'string' ? `<link rel=\"shortcut icon\" href=\"${faviconUrl}\" />` : ''}\n-    ${faviconUrl === undefined ? `<link rel=\"shortcut icon\" href=\"${cdnUrl}/graphql-playground-react${\n-      version ? `@${version}` : ''\n-    }/build/favicon.png\" />` : ''}\n-    <script src=\"${cdnUrl}/graphql-playground-react${\n-  version ? `@${version}` : ''\n-}/build/static/js/middleware.js\"></script>\n-`\n+const getCdnMarkup = ({ version, cdnUrl = '//cdn.jsdelivr.net/npm', faviconUrl }) => {\n+  const buildCDNUrl = (packageName: string, suffix: string) => filter(`${cdnUrl}/${packageName}/${version ? `@${version}/` : ''}${suffix}` || '')\n+  return `\n+    <link \n+      rel=\"stylesheet\" \n+      href=\"${buildCDNUrl('graphql-playground-react', 'build/static/css/index.css')}\"\n+    />\n+    ${typeof faviconUrl === 'string' ? `<link rel=\"shortcut icon\" href=\"${filter(faviconUrl || '')}\" />` : ''}\n+    ${faviconUrl === undefined ? `<link rel=\"shortcut icon\" href=\"${buildCDNUrl('graphql-playground-react', 'build/favicon.png')}\" />` : ''}\n+    <script \n+      src=\"${buildCDNUrl('graphql-playground-react', 'build/static/js/middleware.js')}\"\n+    ></script>\n+`}\n+\n+\n+const renderConfig = (config) => {\n+  return filterXSS(`<div id=\"config\">${JSON.stringify(config)}</div>`, {\n+    whiteList: { div: ['id'] },\n+  })\n+}\n \n export function renderPlaygroundPage(options: RenderPageOptions) {\n   const extendedOptions: any = {\n@@ -94,7 +114,7 @@ export function renderPlaygroundPage(options: RenderPageOptions) {\n   }\n   // for compatibility\n   if ((options as any).subscriptionsEndpoint) {\n-    extendedOptions.subscriptionEndpoint = (options as any).subscriptionsEndpoint\n+    extendedOptions.subscriptionEndpoint = filter((options as any).subscriptionsEndpoint || '')\n   }\n   if (options.config) {\n     extendedOptions.configString = JSON.stringify(options.config, null, 2)\n@@ -105,6 +125,9 @@ export function renderPlaygroundPage(options: RenderPageOptions) {\n       `WARNING: You didn't provide an endpoint and don't have a .graphqlconfig. Make sure you have at least one of them.`,\n     )\n   }\n+  else if (extendedOptions.endpoint) {\n+    extendedOptions.endpoint = filter(extendedOptions.endpoint || '')\n+  }\n \n   return `\n   <!DOCTYPE html>\n@@ -115,9 +138,9 @@ export function renderPlaygroundPage(options: RenderPageOptions) {\n     <link href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|Source+Code+Pro:400,700\" rel=\"stylesheet\">\n     <title>${extendedOptions.title || 'GraphQL Playground'}</title>\n     ${\n-      extendedOptions.env === 'react' || extendedOptions.env === 'electron'\n-        ? ''\n-        : getCdnMarkup(extendedOptions)\n+    extendedOptions.env === 'react' || extendedOptions.env === 'electron'\n+      ? ''\n+      : getCdnMarkup(extendedOptions)\n     }\n   </head>\n   <body>\n@@ -168,19 +191,23 @@ export function renderPlaygroundPage(options: RenderPageOptions) {\n       }\n     </style>\n     ${loading.container}\n+    ${renderConfig(extendedOptions)}\n     <div id=\"root\" />\n     <script type=\"text/javascript\">\n       window.addEventListener('load', function (event) {\n         ${loading.script}\n   \n         const root = document.getElementById('root');\n         root.classList.add('playgroundIn');\n-  \n-        GraphQLPlayground.init(root, ${JSON.stringify(\n-          extendedOptions,\n-          null,\n-          2,\n-        )})\n+        const configText = document.getElementById('config').innerText\n+        if(configText && configText.length) {\n+          try {\n+            GraphQLPlayground.init(root, JSON.parse(configText))\n+          }\n+          catch(err) {\n+            console.error(\"could not find config\")\n+          }\n+        }\n       })\n     </script>\n   </body>"
        },
        {
          "filename": "packages/graphql-playground-middleware-express/README.md",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -1,6 +1,7 @@\n # graphql-playground-middleware-express\n \n > Express middleware to expose an endpoint for the GraphQL Playground IDE\n+> **SECURITY NOTE**: All versions of `graphql-playground-express` until `1.7.15` or later have a security vulnerability when unsanitized user input is used while invoking `expressPlayground()`. [Read more below](#security-notes)\n \n ## Installation\n \n@@ -29,3 +30,17 @@ const app = express()\n \n app.get('/playground', expressPlayground({ endpoint: '/graphql' }))\n ```\n+\n+## Security Notes\n+\n+All versions before `1.7.15` were vulnerable to user-defined input to `expressPlayground()`. Read more in [the security notes](https://github.com/prisma/graphql-playground/tree/master/SECURITY.md)\n+\n+### Security Upgrade Steps\n+\n+To fix the issue, you can upgrade to `1.6.12` or later. If you aren't able to upgrade, see the security notes for a workaround.\n+\n+**yarn:**\n+`yarn add graphql-playground-express@^1.7.15`\n+\n+**npm:**\n+`npm install --save graphql-playground-express@^1.7.15`"
        },
        {
          "filename": "packages/graphql-playground-middleware-express/examples/basic/index.js",
          "status": "modified",
          "additions": 20,
          "deletions": 15,
          "patch": "@@ -1,6 +1,6 @@\n-const express = require(\"express\");\n-const { ApolloServer, gql } = require(\"apollo-server-express\");\n-const expressPlayground = require(\"../../dist/index\").default;\n+const express = require('express')\n+const { ApolloServer, gql } = require('apollo-server-express')\n+const expressPlayground = require('../../dist/index').default\n \n const typeDefs = gql`\n   type Query {\n@@ -9,22 +9,27 @@ const typeDefs = gql`\n   schema {\n     query: Query\n   }\n-`;\n+`\n const resolvers = {\n   Query: {\n-    hello: () => \"world\"\n-  }\n-};\n+    hello: () => 'world',\n+  },\n+}\n \n-const PORT = 4000;\n+const PORT = 4000\n \n-const server = new ApolloServer({ typeDefs, resolvers });\n-const app = express();\n-server.applyMiddleware({ app });\n+const server = new ApolloServer({ typeDefs, resolvers })\n+const app = express()\n+server.applyMiddleware({ app })\n \n-app.get(\"/playground\", expressPlayground({ endpoint: \"/graphql\" }));\n-app.listen(PORT);\n+app.get(\n+  '/playground',\n+  expressPlayground({\n+    endpoint: '/graphql/</script><script>alert(1)</script><script>',\n+  }),\n+)\n+app.listen(PORT)\n \n console.log(\n-  `Serving the GraphQL Playground on http://localhost:${PORT}/playground`\n-);\n+  `Serving the GraphQL Playground on http://localhost:${PORT}/playground`,\n+)"
        },
        {
          "filename": "packages/graphql-playground-middleware-hapi/README.md",
          "status": "added",
          "additions": 57,
          "deletions": 0,
          "patch": "@@ -0,0 +1,57 @@\n+# graphql-playground-middleware-hapi\n+\n+> Koa middleware to expose an endpoint for the GraphQL Playground IDE\n+> **SECURITY NOTE**: All versions of `graphql-playground-middleware-hapi` until `1.6.12` or later have a security vulnerability when unsanitized user input is used while invoking `hapiPlayground()`. [Read more below](#security-notes)\n+\n+## Installation\n+\n+Using yarn:\n+\n+```console\n+yarn add graphql-playground-middleware-hapi\n+```\n+\n+Or npm:\n+\n+```console\n+npm install graphql-playground-middleware-hapi --save\n+```\n+\n+## Usage\n+\n+See full example in [examples/basic](https://github.com/prisma/graphql-playground/tree/master/packages/graphql-playground-middleware-hapi/examples/basic).\n+\n+minimal example:\n+\n+```js\n+const hapiPlayground = require('graphql-playground-middleware-hapi').default\n+\n+const playground = {\n+  plugin: hapiPlayground,\n+  options: {\n+    path: '/playground',\n+    endpoint: '/graphql',\n+  },\n+}\n+\n+const app = new Hapi.server({\n+  port: 3000,\n+})\n+\n+app.register(playground)\n+;(async () => await app.start())()\n+```\n+\n+## Security Notes\n+\n+All versions before `1.6.12` were vulnerable to user-defined input to `hapiPlayground()`. Read more in [the security notes](https://github.com/prisma/graphql-playground/tree/master/SECURITY.md)\n+\n+### Security Upgrade Steps\n+\n+To fix the issue, you can upgrade to `1.6.12` or later. If you aren't able to upgrade, see the security notes for a workaround.\n+\n+**yarn:**\n+`yarn add graphql-playground-middleware-hapi@^1.6.12`\n+\n+**npm:**\n+`npm install --save graphql-playground-middleware-hapi@^1.6.12`"
        },
        {
          "filename": "packages/graphql-playground-middleware-koa/README.md",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -1,5 +1,7 @@\n # graphql-playground-middleware-koa\n+\n > Koa middleware to expose an endpoint for the GraphQL Playground IDE\n+> **SECURITY NOTE**: All versions of `graphql-playground-koa` until `1.6.14` or later have a security vulnerability when unsanitized user input is used while invoking `koaPlayground()`. [Read more below](#security-notes)\n \n ## Installation\n \n@@ -29,3 +31,17 @@ const router = new koaRouter()\n \n router.all('/playground', koaPlayground({ endpoint: '/graphql' }))\n ```\n+\n+## Security Notes\n+\n+All versions before `1.6.14` were vulnerable to user-defined input to `koaPlayground()`. Read more in [the security notes](https://github.com/prisma/graphql-playground/tree/master/SECURITY.md)\n+\n+### Security Upgrade Steps\n+\n+To fix the issue, you can upgrade to `1.6.14` or later. If you aren't able to upgrade, see the security notes for a workaround.\n+\n+**yarn:**\n+`yarn add graphql-playground-koa@^1.6.14`\n+\n+**npm:**\n+`npm install --save graphql-playground-koa@^1.6.14`"
        },
        {
          "filename": "packages/graphql-playground-middleware-lambda/README.md",
          "status": "added",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -0,0 +1,46 @@\n+# graphql-playground-middleware-lambda\n+\n+> Koa middleware to expose an endpoint for the GraphQL Playground IDE\n+> **SECURITY NOTE**: All versions of `graphql-playground-middleware-lambda` until `1.7.16` or later have a security vulnerability when unsanitized user input is used while invoking `lambdaPlayground()`. [Read more below](#security-notes)\n+\n+## Installation\n+\n+Using yarn:\n+\n+```console\n+yarn add graphql-playground-middleware-lambda\n+```\n+\n+Or npm:\n+\n+```console\n+npm install graphql-playground-middleware-lambda --save\n+```\n+\n+## Usage\n+\n+See full example in [examples/basic](https://github.com/prisma/graphql-playground/tree/master/packages/graphql-playground-middleware-lambda/examples/basic).\n+\n+minimal example:\n+\n+```js\n+const lambdaPlayground = require('graphql-playground-middleware-lambda').default\n+\n+exports.handler = lambdaPlayground({\n+  endpoint: '/dev',\n+})\n+```\n+\n+## Security Notes\n+\n+All versions before `1.7.16` were vulnerable to user-defined input to `lambdaPlayground()`. Read more in [the security notes](https://github.com/prisma/graphql-playground/tree/SECURITY.md)\n+\n+### Security Upgrade Steps\n+\n+To fix the issue, you can upgrade to `1.7.16`. If you aren't able to upgrade, see the security notes for a workaround.\n+\n+**yarn:**\n+`yarn add graphql-playground-middleware-lambda@^1.7.16`\n+\n+**npm:**\n+`npm install --save graphql-playground-middleware-lambda@^1.7.16`"
        },
        {
          "filename": "packages/graphql-playground-middleware-lambda/examples/basic/README.md",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -1,11 +1,16 @@\n # graphql playground serverless example\n \n ## Deploy\n+\n ```\n $ sls deploy\n ```\n \n ## Hosted Example\n+\n This example is also hosted here:\n https://1rp2h4rth8.execute-api.us-east-1.amazonaws.com/dev/playground\n \n+exports.playgroundHandler = lambdaPlayground({\n+endpoint: '/dev',\n+})"
        },
        {
          "filename": "packages/graphql-playground-react/README.md",
          "status": "modified",
          "additions": 13,
          "deletions": 10,
          "patch": "@@ -73,7 +73,10 @@ The GraphQL Playground requires **React 16**.\n Including Fonts (`1.`)\n \n ```html\n-<link href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|Source+Code+Pro:400,700\" rel=\"stylesheet\">\n+<link\n+  href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|Source+Code+Pro:400,700\"\n+  rel=\"stylesheet\"\n+/>\n ```\n \n Including stylesheet and the component (`2., 3.`)\n@@ -84,7 +87,7 @@ import ReactDOM from 'react-dom'\n import Playground from 'graphql-playground'\n \n ReactDOM.render(\n-  <Playground endpoint=\"https://api.graph.cool/simple/v1/swapi\" />,\n+  <Playground endpoint='https://api.graph.cool/simple/v1/swapi' />,\n   document.body,\n )\n ```\n@@ -153,17 +156,17 @@ functions:\n   graphql:\n     handler: handler.graphqlHandler\n     events:\n-    - http:\n-        path: graphql\n-        method: post\n-        cors: true\n+      - http:\n+          path: graphql\n+          method: post\n+          cors: true\n   playground:\n     handler: handler.playgroundHandler\n     events:\n-    - http:\n-        path: playground\n-        method: get\n-        cors: true\n+      - http:\n+          path: playground\n+          method: get\n+          cors: true\n ```\n \n ## Development [![npm version](https://badge.fury.io/js/graphql-playground-react.svg)](https://badge.fury.io/js/graphql-playground-react)"
        },
        {
          "filename": "scripts/build.sh",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,8 +5,8 @@ set -e\n cd packages\n \n packages=(\n-  graphql-playground-react\n   graphql-playground-html\n+  graphql-playground-react\n   # graphql-playground-electron\n   graphql-playground-middleware-express\n   graphql-playground-middleware-hapi"
        },
        {
          "filename": "yarn.lock",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -4601,6 +4601,11 @@ cssesc@^3.0.0:\n   resolved \"https://registry.yarnpkg.com/cssesc/-/cssesc-3.0.0.tgz#37741919903b868565e1c09ea747445cd18983ee\"\n   integrity sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==\n \n+cssfilter@0.0.10:\n+  version \"0.0.10\"\n+  resolved \"https://registry.yarnpkg.com/cssfilter/-/cssfilter-0.0.10.tgz#c6d2672632a2e5c83e013e6864a42ce8defd20ae\"\n+  integrity sha1-xtJnJjKi5cg+AT5oZKQs6N79IK4=\n+\n cssnano@^3.10.0:\n   version \"3.10.0\"\n   resolved \"https://registry.yarnpkg.com/cssnano/-/cssnano-3.10.0.tgz#4f38f6cea2b9b17fa01490f23f1dc68ea65c1c38\"\n@@ -15128,6 +15133,14 @@ xregexp@4.0.0:\n   resolved \"https://registry.yarnpkg.com/xregexp/-/xregexp-4.0.0.tgz#e698189de49dd2a18cc5687b05e17c8e43943020\"\n   integrity sha512-PHyM+sQouu7xspQQwELlGwwd05mXUFqwFYfqPO0cC7x4fxyHnnuetmQr6CjJiafIDoH4MogHb9dOoJzR/Y4rFg==\n \n+xss@^1.0.6:\n+  version \"1.0.6\"\n+  resolved \"https://registry.yarnpkg.com/xss/-/xss-1.0.6.tgz#eaf11e9fc476e3ae289944a1009efddd8a124b51\"\n+  integrity sha512-6Q9TPBeNyoTRxgZFk5Ggaepk/4vUOYdOsIUYvLehcsIZTFjaavbVnsuAkLA5lIFuug5hw8zxcB9tm01gsjph2A==\n+  dependencies:\n+    commander \"^2.9.0\"\n+    cssfilter \"0.0.10\"\n+\n xtend@^4.0.0, xtend@~4.0.1:\n   version \"4.0.2\"\n   resolved \"https://registry.yarnpkg.com/xtend/-/xtend-4.0.2.tgz#bb72779f5fa465186b1f438f674fa347fdb5db54\""
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 11,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "91ed7d8b1c1b76f1bf738b7c97a666360aaab516",
            "date": "2022-05-02T11:02:41Z",
            "author_login": "timsuchanek"
          },
          {
            "sha": "3a09b2e15e12cd1794126e9354e6b2154849f778",
            "date": "2022-04-25T06:15:04Z",
            "author_login": "lethot"
          },
          {
            "sha": "2077b6acad058c8729c73528f6ec2000c64a5b7c",
            "date": "2022-02-21T09:24:59Z",
            "author_login": "jspizziri"
          },
          {
            "sha": "b8a956006835992f12c46b90384a79ab82bcadad",
            "date": "2021-11-04T17:55:09Z",
            "author_login": "acao"
          },
          {
            "sha": "5073062f3834bb8652c0c0e3297ad83ddc8ad867",
            "date": "2021-04-19T19:49:56Z",
            "author_login": "bamorim"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:H/A:N",
    "cwe_id": "CWE-79",
    "description": "GraphQL Playground (graphql-playground-html NPM package) before version 1.6.22 have a severe XSS Reflection attack vulnerability. All unsanitized user input passed into renderPlaygroundPage() method could trigger this vulnerability. This has been patched in graphql-playground-html version 1.6.22. Note that some of the associated dependent middleware packages are also affected including but not limited to graphql-playground-middleware-express before version 1.7.16, graphql-playground-middleware-koa before version 1.6.15, graphql-playground-middleware-lambda before version 1.7.17, and graphql-playground-middleware-hapi before 1.6.13.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-06-08T21:15:09.923",
    "last_modified": "2024-11-21T05:32:11.997",
    "fix_date": "2020-06-07T01:17:58Z"
  },
  "references": [
    {
      "url": "https://github.com/prisma-labs/graphql-playground#security-details",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/prisma-labs/graphql-playground/commit/bf1883db538c97b076801a60677733816cb3cfb7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/prisma-labs/graphql-playground/security/advisories/GHSA-4852-vrh7-28rf",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/prisma-labs/graphql-playground#security-details",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/prisma-labs/graphql-playground/commit/bf1883db538c97b076801a60677733816cb3cfb7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/prisma-labs/graphql-playground/security/advisories/GHSA-4852-vrh7-28rf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.840714",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "graphql-playground",
    "owner": "prisma-labs",
    "created_at": "2017-01-25T13:19:29Z",
    "updated_at": "2025-01-14T12:42:53Z",
    "pushed_at": "2024-03-13T09:24:01Z",
    "size": 7888,
    "stars": 8801,
    "forks": 735,
    "open_issues": 407,
    "watchers": 8801,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 565895,
      "JavaScript": 63765,
      "HTML": 59642,
      "Shell": 3175,
      "CSS": 706
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:02:20.288568"
  }
}