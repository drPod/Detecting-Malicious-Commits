{
  "cve_id": "CVE-2020-4040",
  "github_data": {
    "repository": "bolt/bolt",
    "fix_commit": "b42cbfcf3e3108c46a80581216ba03ef449e419f",
    "related_commits": [
      "b42cbfcf3e3108c46a80581216ba03ef449e419f",
      "b42cbfcf3e3108c46a80581216ba03ef449e419f"
    ],
    "patch_url": "https://github.com/bolt/bolt/commit/b42cbfcf3e3108c46a80581216ba03ef449e419f.patch",
    "fix_commit_details": {
      "sha": "b42cbfcf3e3108c46a80581216ba03ef449e419f",
      "commit_date": "2020-05-07T13:24:47Z",
      "author": {
        "login": "bobdenotter",
        "type": "User",
        "stats": {
          "total_commits": 6357,
          "average_weekly_commits": 9.661094224924012,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 367
        }
      },
      "commit_message": {
        "title": "Merge pull request #7853 from bolt/fix/csrf-check-on-preview",
        "length": 88,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 40,
        "additions": 33,
        "deletions": 7
      },
      "files": [
        {
          "filename": "src/Config.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -311,7 +311,7 @@ protected function parseGeneral()\n             }\n \n             // To remove unacceptable / unwanted extensions from the list of Acceptable File Types\n-            $removeFromAllowedFileTypes = explode('|', 'sh|asp|cgi|php|php3|ph3|php4|ph4|php5|ph5|phtm|phtml');\n+            $removeFromAllowedFileTypes = explode('|', 'sh|asp|cgi|php|php3|ph3|php4|ph4|php5|ph5|phtm|phtml|exe');\n \n             // Create a bag with lowercased extensions\n             $bag = Bag::from($general['accept_file_types']);"
        },
        {
          "filename": "src/Controller/Async/FilesystemManager.php",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -428,6 +428,7 @@ public function renameFolder(Request $request)\n     private function isExtensionChangedAndIsChangeAllowed($oldName, $newName)\n     {\n         $user = $this->getUser();\n+\n         if ($this->users()->hasRole($user['id'], 'root') || $this->users()->hasRole($user['id'], 'admin')) {\n             return true;\n         }\n@@ -465,11 +466,12 @@ private function validateFileExtension($filename)\n         if ($filename[0] === '.') {\n             return false;\n         }\n+\n         // only whitelisted extensions\n         $extension = pathinfo($filename, PATHINFO_EXTENSION);\n         $allowedExtensions = $this->getAllowedUploadExtensions();\n \n-        return $extension === '' || in_array(mb_strtolower($extension), $allowedExtensions);\n+        return in_array(mb_strtolower($extension), $allowedExtensions);\n     }\n \n     /**"
        },
        {
          "filename": "src/Controller/Frontend.php",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -17,6 +17,7 @@\n use Bolt\\Storage\\Repository\\TaxonomyRepository;\n use Bolt\\Translation\\Translator as Trans;\n use Silex\\ControllerCollection;\n+use Symfony\\Component\\HttpFoundation\\JsonResponse;\n use Symfony\\Component\\HttpFoundation\\RedirectResponse;\n use Symfony\\Component\\HttpFoundation\\Request;\n use Symfony\\Component\\HttpFoundation\\Response;\n@@ -203,6 +204,12 @@ public function preview(Request $request, $contenttypeslug)\n             throw new MethodNotAllowedHttpException(['POST'], 'This route only accepts POST requests.');\n         }\n \n+        // Only accept requests with a valid token\n+        $tokenValue = $request->request->get('content_edit', ['_token' => null])['_token'];\n+        if (!$this->isAllowed('dashboard') || !$this->isCsrfTokenValid($tokenValue, 'content_edit')) {\n+            return new Response('Not allowed or invalid CSRF token', Response::HTTP_FORBIDDEN);\n+        }\n+\n         $contenttype = $this->getContentType($contenttypeslug);\n         $formValues = $request->request->all();\n "
        },
        {
          "filename": "tests/phpunit/unit/Controller/Async/FilesystemManagerTest.php",
          "status": "modified",
          "additions": 21,
          "deletions": 3,
          "patch": "@@ -25,9 +25,10 @@ class FilesystemManagerTest extends ControllerUnitTest\n {\n     const FILESYSTEM = 'files';\n \n-    const FILE_NAME = '__phpunit_test_file_delete_me';\n+    const FILE_NAME = '__phpunit_test_file_delete_me.txt';\n     const FILE_NAME_NOT_ALLOWED = '__phpunit_test_file_delete_me.exe';\n-    const FILE_NAME_2 = '__phpunit_test_file_2_delete_me';\n+    const FILE_NAME_NOT_ALLOWED_2 = '__phpunit_test_file_delete_me';\n+    const FILE_NAME_2 = '__phpunit_test_file_2_delete_me.txt';\n     const FOLDER_NAME = '__phpunit_test_folder_delete_me';\n     const FOLDER_NAME_2 = '__phpunit_test_folder_2_delete_me';\n \n@@ -153,6 +154,23 @@ public function testCreateFileInvalidExtension()\n         $this->assertFalse($this->getService('filesystem')->has(self::FILESYSTEM . '://' . self::FILE_NAME_NOT_ALLOWED));\n     }\n \n+    public function testCreateFileInvalidExtension2()\n+    {\n+        $this->setRequest(Request::create('/async/file/create', 'POST', [\n+            'namespace'  => self::FILESYSTEM,\n+            'parentPath' => '',\n+            'filename'   => self::FILE_NAME_NOT_ALLOWED_2,\n+            'token'      => $this->token,\n+        ]));\n+        $response = $this->controller()->createFile($this->getRequest());\n+\n+        $this->assertInstanceOf(JsonResponse::class, $response);\n+        $this->assertEquals(Response::HTTP_BAD_REQUEST, $response->getStatusCode());\n+\n+        // Test whether the new file is not saved\n+        $this->assertFalse($this->getService('filesystem')->has(self::FILESYSTEM . '://' . self::FILE_NAME_NOT_ALLOWED));\n+    }\n+\n     /**\n      * Duplicating a file five times should create FILENAME_copy1-5.EXT. This should work for both regular filenames\n      * and dotfiles.\n@@ -255,7 +273,7 @@ public function testInvalidRename()\n              * Object doesn't exist\n              */\n             $this->createObject($object, $data['old']);\n-            $response = $this->renameObject($object, $data['old'] . '_nonexistent', $data['new']);\n+            $response = $this->renameObject($object, $data['old'] . '_nonexistent.txt', $data['new']);\n \n             $this->assertInstanceOf(JsonResponse::class, $response);\n             $this->assertEquals(Response::HTTP_NOT_FOUND, $response->getStatusCode());"
        },
        {
          "filename": "tests/phpunit/unit/Controller/FrontendTest.php",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -328,8 +328,7 @@ public function testPreview()\n \n         $response = $this->controller()->preview($this->getRequest(), 'pages');\n \n-        $this->assertTrue($response instanceof TemplateView);\n-        $this->assertSame('record.twig', $response->getTemplate());\n+        $this->assertFalse($response instanceof TemplateView);\n     }\n \n     public function testListing()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 5,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "391eecbe988e0cd5c25a7180ab65c82002fe18f3",
            "date": "2023-02-22T13:43:56Z",
            "author_login": "bobdenotter"
          },
          {
            "sha": "83e114674f4a3eb1defc1e30102b173609e08f70",
            "date": "2023-02-22T13:43:17Z",
            "author_login": "bobdenotter"
          },
          {
            "sha": "54999b935df48b7de31d5c4753d5678aa2eacfd0",
            "date": "2023-02-22T13:42:51Z",
            "author_login": "bobdenotter"
          },
          {
            "sha": "99b581926221f1c591d270980143794db7a16eb4",
            "date": "2021-11-12T12:14:26Z",
            "author_login": "bobdenotter"
          },
          {
            "sha": "13ec20f71c586fee7db6b0f86ea5cc6730fd0e20",
            "date": "2021-11-12T11:27:57Z",
            "author_login": "bobdenotter"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-352",
    "description": "Bolt CMS before version 3.7.1 lacked CSRF protection in the preview generating endpoint. Previews are intended to be generated by the admins, developers, chief-editors, and editors, who are authorized to create content in the application. But due to lack of proper CSRF protection, unauthorized users could generate a preview. This has been fixed in Bolt 3.7.1",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-06-08T22:15:10.603",
    "last_modified": "2024-11-21T05:32:12.237",
    "fix_date": "2020-05-07T13:24:47Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/158299/Bolt-CMS-3.7.0-XSS-CSRF-Shell-Upload.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2020/Jul/4",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bolt/bolt/commit/b42cbfcf3e3108c46a80581216ba03ef449e419f",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bolt/bolt/pull/7853",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bolt/bolt/security/advisories/GHSA-2q66-6cc3-6xm8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/158299/Bolt-CMS-3.7.0-XSS-CSRF-Shell-Upload.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2020/Jul/4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bolt/bolt/commit/b42cbfcf3e3108c46a80581216ba03ef449e419f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bolt/bolt/pull/7853",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bolt/bolt/security/advisories/GHSA-2q66-6cc3-6xm8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.840879",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bolt",
    "owner": "bolt",
    "created_at": "2012-06-14T16:07:54Z",
    "updated_at": "2025-01-14T02:39:47Z",
    "pushed_at": "2023-06-27T10:22:08Z",
    "size": 80417,
    "stars": 4161,
    "forks": 817,
    "open_issues": 56,
    "watchers": 4161,
    "has_security_policy": false,
    "default_branch": "3.7",
    "protected_branches": [
      "1.6",
      "1.7",
      "2.0",
      "2.1",
      "2.2",
      "3.x",
      "3.0",
      "3.1",
      "3.2",
      "3.3",
      "3.4",
      "3.5",
      "3.6",
      "3.7",
      "master"
    ],
    "languages": {
      "PHP": 3268063,
      "JavaScript": 596141,
      "Twig": 397445,
      "CSS": 161157,
      "SCSS": 92948,
      "HTML": 18349,
      "Shell": 2618
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:17:46.290962"
  }
}