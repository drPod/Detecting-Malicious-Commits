{
  "cve_id": "CVE-2020-4054",
  "github_data": {
    "repository": "rgrove/sanitize",
    "fix_commit": "a11498de9e283cd457b35ee252983662f7452aa9",
    "related_commits": [
      "a11498de9e283cd457b35ee252983662f7452aa9",
      "a11498de9e283cd457b35ee252983662f7452aa9"
    ],
    "patch_url": "https://github.com/rgrove/sanitize/commit/a11498de9e283cd457b35ee252983662f7452aa9.patch",
    "fix_commit_details": {
      "sha": "a11498de9e283cd457b35ee252983662f7452aa9",
      "commit_date": "2020-06-15T21:27:07Z",
      "author": {
        "login": "rgrove",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix sanitization bypass in HTML foreign content",
        "length": 123,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 56,
        "additions": 45,
        "deletions": 11
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -72,6 +72,11 @@ Sanitize can sanitize the following types of input:\n * Standalone CSS stylesheets\n * Standalone CSS properties\n \n+However, please note that Sanitize _cannot_ fully sanitize the contents of\n+`<math>` or `<svg>` elements, since these elements don't follow the same parsing\n+rules as the rest of HTML. If this is something you need, you may want to look\n+for another solution.\n+\n ### HTML Fragments\n \n A fragment is a snippet of HTML that doesn't contain a root-level `<html>`\n@@ -415,6 +420,12 @@ elements not in this array will be removed.\n ]\n ```\n \n+**Warning:** Sanitize cannot fully sanitize the contents of `<math>` or `<svg>`\n+elements, since these elements don't follow the same parsing rules as the rest\n+of HTML. If you add `math` or `svg` to the allowlist, you must assume that any\n+content inside them will be allowed, even if that content would otherwise be\n+removed by Sanitize.\n+\n #### :parser_options (Hash)\n \n [Parsing options](https://github.com/rubys/nokogumbo/tree/v2.0.1#parsing-options) supplied to `nokogumbo`."
        },
        {
          "filename": "lib/sanitize/config/default.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -74,7 +74,7 @@ module Config\n       # the specified elements (when filtered) will be removed, and the contents\n       # of all other filtered elements will be left behind.\n       :remove_contents => %w[\n-        iframe noembed noframes noscript script style\n+        iframe math noembed noframes noscript plaintext script style svg xmp\n       ],\n \n       # Transformers allow you to filter or alter nodes using custom logic. See"
        },
        {
          "filename": "test/test_clean_element.rb",
          "status": "modified",
          "additions": 20,
          "deletions": 10,
          "patch": "@@ -192,21 +192,16 @@\n         .must_equal ''\n     end\n \n-    it 'should escape the content of removed `plaintext` elements' do\n-      Sanitize.fragment('<plaintext>hello! <script>alert(0)</script>')\n-        .must_equal 'hello! &lt;script&gt;alert(0)&lt;/script&gt;'\n-    end\n-\n-    it 'should escape the content of removed `xmp` elements' do\n-      Sanitize.fragment('<xmp>hello! <script>alert(0)</script></xmp>')\n-        .must_equal 'hello! &lt;script&gt;alert(0)&lt;/script&gt;'\n-    end\n-\n     it 'should not preserve the content of removed `iframe` elements' do\n       Sanitize.fragment('<iframe>hello! <script>alert(0)</script></iframe>')\n         .must_equal ''\n     end\n \n+    it 'should not preserve the content of removed `math` elements' do\n+      Sanitize.fragment('<math>hello! <script>alert(0)</script></math>')\n+        .must_equal ''\n+    end\n+\n     it 'should not preserve the content of removed `noembed` elements' do\n       Sanitize.fragment('<noembed>hello! <script>alert(0)</script></noembed>')\n         .must_equal ''\n@@ -222,6 +217,11 @@\n         .must_equal ''\n     end\n \n+    it 'should not preserve the content of removed `plaintext` elements' do\n+      Sanitize.fragment('<plaintext>hello! <script>alert(0)</script>')\n+        .must_equal ''\n+    end\n+\n     it 'should not preserve the content of removed `script` elements' do\n       Sanitize.fragment('<script>hello! <script>alert(0)</script></script>')\n         .must_equal ''\n@@ -232,6 +232,16 @@\n         .must_equal ''\n     end\n \n+    it 'should not preserve the content of removed `svg` elements' do\n+      Sanitize.fragment('<svg>hello! <script>alert(0)</script></svg>')\n+        .must_equal ''\n+    end\n+\n+    it 'should not preserve the content of removed `xmp` elements' do\n+      Sanitize.fragment('<xmp>hello! <script>alert(0)</script></xmp>')\n+        .must_equal ''\n+    end\n+\n     strings.each do |name, data|\n       it \"should clean #{name} HTML\" do\n         Sanitize.fragment(data[:html]).must_equal(data[:default])"
        },
        {
          "filename": "test/test_malicious_html.rb",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -219,4 +219,17 @@\n       end\n     end\n   end\n+\n+  # https://github.com/rgrove/sanitize/security/advisories/GHSA-p4x4-rw2p-8j8m\n+  describe 'foreign content bypass in relaxed config' do\n+    it 'prevents a sanitization bypass via carefully crafted foreign content' do\n+      %w[iframe noembed noframes noscript plaintext script style xmp].each do |tag_name|\n+        @s.fragment(%[<math><#{tag_name}>/*&lt;/#{tag_name}&gt;&lt;img src onerror=alert(1)>*/]).\n+          must_equal ''\n+\n+        @s.fragment(%[<svg><#{tag_name}>/*&lt;/#{tag_name}&gt;&lt;img src onerror=alert(1)>*/]).\n+          must_equal ''\n+      end\n+    end\n+  end\n end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2dfa666ed5f8c59e1f9efcf0339f1e769876d3df",
            "date": "2024-12-30T22:26:29Z",
            "author_login": "rgrove"
          },
          {
            "sha": "19ee751d1b1c1e9d0335c0438fdb6b389544c45c",
            "date": "2024-12-30T04:50:12Z",
            "author_login": "rgrove"
          },
          {
            "sha": "859c3aa11fdd71829a2424d98346fb8d8d14e522",
            "date": "2024-12-29T05:12:01Z",
            "author_login": "rgrove"
          },
          {
            "sha": "45dbeac426189fca4772bf7221744be86cdd969f",
            "date": "2024-12-29T01:17:23Z",
            "author_login": "rgrove"
          },
          {
            "sha": "010e4e2a6e2423290876db4c5e7bbfa6845d1c3e",
            "date": "2024-12-29T00:57:02Z",
            "author_login": "rgrove"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-79",
    "description": "In Sanitize (RubyGem sanitize) greater than or equal to 3.0.0 and less than 5.2.1, there is a cross-site scripting vulnerability. When HTML is sanitized using Sanitize's \"relaxed\" config, or a custom config that allows certain elements, some content in a math or svg element may not be sanitized correctly even if math and svg are not in the allowlist. You are likely to be vulnerable to this issue if you use Sanitize's relaxed config or a custom config that allows one or more of the following HTML elements: iframe, math, noembed, noframes, noscript, plaintext, script, style, svg, xmp. Using carefully crafted input, an attacker may be able to sneak arbitrary HTML through Sanitize, potentially resulting in XSS (cross-site scripting) or other undesired behavior when that HTML is rendered in a browser. This has been fixed in 5.2.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-06-16T22:15:10.693",
    "last_modified": "2024-11-21T05:32:14.050",
    "fix_date": "2020-06-15T21:27:07Z"
  },
  "references": [
    {
      "url": "https://github.com/rgrove/sanitize/commit/a11498de9e283cd457b35ee252983662f7452aa9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rgrove/sanitize/releases/tag/v5.2.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rgrove/sanitize/security/advisories/GHSA-p4x4-rw2p-8j8m",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/4543-1/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://www.debian.org/security/2020/dsa-4730",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/rgrove/sanitize/commit/a11498de9e283cd457b35ee252983662f7452aa9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rgrove/sanitize/releases/tag/v5.2.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rgrove/sanitize/security/advisories/GHSA-p4x4-rw2p-8j8m",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://usn.ubuntu.com/4543-1/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.debian.org/security/2020/dsa-4730",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.855824",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sanitize",
    "owner": "rgrove",
    "created_at": "2008-12-25T06:03:43Z",
    "updated_at": "2025-01-14T13:00:06Z",
    "pushed_at": "2024-12-30T22:30:26Z",
    "size": 2039,
    "stars": 2036,
    "forks": 142,
    "open_issues": 0,
    "watchers": 2036,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Ruby": 140122
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:13:16.205097"
  }
}