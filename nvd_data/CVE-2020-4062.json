{
  "cve_id": "CVE-2020-4062",
  "github_data": {
    "repository": "cyberark/conjur-oss-helm-chart",
    "fix_commit": "2dab801ed4ab591c626fc6674f306fcf0d004c1e",
    "related_commits": [
      "2dab801ed4ab591c626fc6674f306fcf0d004c1e",
      "2dab801ed4ab591c626fc6674f306fcf0d004c1e"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "2dab801ed4ab591c626fc6674f306fcf0d004c1e",
      "commit_date": "2020-06-18T17:59:55Z",
      "author": {
        "login": "ismarc",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-mg2m-623j-wpxw",
        "length": 81,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 1319,
        "additions": 1200,
        "deletions": 119
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 23,
          "deletions": 2,
          "patch": "@@ -4,7 +4,27 @@ All notable changes to this project will be documented in this file.\n The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\n and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n \n-## [Unreleased]\n+## [v2.0.0] - 2020-06-17\n+\n+### Added\n+- Adds password authentication for the backend Postgres database connection.\n+- Adds TLS support between the Conjur pod and the Postgres pod.\n+- Adds default auto-generation of the Postgres connection password and\n+  TLS certificate.\n+- Adds default auto-rotation of the following for `helm upgrade`:\n+  - Conjur TLS CA signing certificate and signed certificate for Conjur\n+  - Postgres database TLS certificate and key\n+- Adds mechanism for user to set their own TLS CA and signed certificates\n+  for Conjur.\n+ \n+### Changed\n+- Pins default Conjur version to current stable release 1.5.\n+- Sets default pullPolicy for Nginx and Postgres to `Always`.\n+\n+### Fixed\n+- Fixes an issue with the use of persistent volume store so that the\n+  Postgres database contents are preserved across pod resets\n+  and helm upgrades.\n \n ## [v1.3.8] - 2019-12-20\n \n@@ -64,7 +84,8 @@ and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.\n ### Added\n - First version of chart available.\n \n-[Unreleased]: https://github.com/cyberark/conjur-oss-helm-chart/compare/v1.3.8...HEAD\n+[Unreleased]: https://github.com/cyberark/conjur-oss-helm-chart/compare/v2.0.0...HEAD\n+[2.0.0]: https://github.com/cyberark/conjur-oss-helm-chart/compare/v1.3.8...v2.0.0\n [1.3.8]: https://github.com/cyberark/conjur-oss-helm-chart/compare/v1.3.7...v1.3.8\n [1.3.7]: https://github.com/cyberark/conjur-oss-helm-chart/compare/v1.3.6...v1.3.7\n [1.3.6]: https://github.com/cyberark/conjur-oss-helm-chart/compare/v1.3.5...v1.3.6"
        },
        {
          "filename": "conjur-oss/Chart.yaml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,7 +1,7 @@\n apiVersion: v1\n name: conjur-oss\n home: https://www.conjur.org\n-version: 1.3.8\n+version: 2.0.0\n description: A Helm chart for CyberArk Conjur\n icon: https://www.cyberark.com/wp-content/uploads/2015/12/cybr-aim.jpg\n keywords:"
        },
        {
          "filename": "conjur-oss/README.md",
          "status": "modified",
          "additions": 266,
          "deletions": 38,
          "patch": "@@ -1,4 +1,4 @@\n-# conjur-oss\n+# Conjur OSS Helm Chart\n \n [CyberArk Conjur Open Source](https://www.conjur.org) is a powerful secrets management solution,\n tailored specifically to the unique infrastructure requirements of\n@@ -12,88 +12,252 @@ Conjur Open Source is part of the CyberArk Privileged Access Security Solution w\n \n ---\n \n-## Prerequisites\n-\n+## Table of Contents\n+\n+- [Prerequisites and Guidelines](#prerequisites-and-guidelines)\n+- [Installing the Chart](#installing-the-chart)\n+  * [Simple Install](#simple-install)\n+  * [Custom Installation](#custom-installation)\n+    + [Example: Installation Using Command Line Arguments](#example-installation-using-command-line-arguments)\n+    + [Example: Installation Using Custom YAML File](#example-installation-using-custom-yaml-file)\n+  * [Installing Conjur with an External Postgres Database](#installing-conjur-with-an-external-postgres-database)\n+  * [Auto-Generated Configuration](#auto-generated-configuration)\n+- [Upgrading, Modifying, or Migrating a Conjur OSS Helm Deployment](#upgrading-modifying-or-migrating-a-conjur-oss-helm-deployment)\n+- [Configuration](#configuration)\n+  * [PostgreSQL Database Password Restrictions](#postgresql-database-password-restrictions)\n+- [Deleting the Conjur Deployment](#deleting-the-conjur-deployment)\n+  * [Uninstalling the Chart via Helm Delete](#uninstalling-the-chart-via-helm-delete)\n+  * [Cleaning Up Kubernetes Secrets Not Managed by Helm](#cleaning-up-kubernetes-secrets-not-managed-by-helm)\n+- [Contributing](#contributing)\n+\n+## Prerequisites and Guidelines\n+\n+- Installation to an isolated Kubernetes cluster or namespace is highly\n+  recommended in order to facilitate limiting of direct access to Conjur\n+  Kubernetes resources to security administrators. Here, the term isolated\n+  refers to:\n+  * No workloads besides Conjur and its backend database running in the \n+    Kubernetes cluster/namespace.\n+  * Kubernetes and Helm access to the cluster/namespace is limited to\n+    security administrators via Role-Based Access Control (RBAC).\n - Kubernetes 1.7+\n+- Helm v3+. The chart may work with older versions of\n+  Helm but that deployment isn't specifically supported.\n+- Installation on OpenShift is not currently supported.\n+- It is recommended that auto-upgrades of Kubernetes version not be\n+  used in the Kubernetes platform in which Conjur is deployed. Kubernetes\n+  version upgrades should be done in concert with Conjur version upgrades\n+  to ensure compatibility between Conjur and Kubernetes.\n \n ## Installing the Chart\n \n-The Chart can be installed from a GitHub release Chart tarball or from source.\n+The Chart can be installed from a GitHub release Chart tarball or by cloning\n+this GitHub repository.\n \n All releases: https://github.com/cyberark/conjur-oss-helm-chart/releases\n \n-### Simple install\n-\n-Install latest Conjur with integrated Postgres.\n+### Simple Install\n \n-_Note: These commands require Helm v3+ as-written. Remove the deployment name if using Helm v2._\n+To install Conjur with an integrated Postgres database:\n \n ```sh-session\n-$ helm install conjur-oss \\\n-  --set dataKey=\"$(docker run --rm cyberark/conjur data-key generate)\" \\\n-  https://github.com/cyberark/conjur-oss-helm-chart/releases/download/v<VERSION>/conjur-oss-<VERSION>.tgz\n+$  CONJUR_NAMESPACE=<conjur-namespace>\n+$  kubectl create namespace \"$CONJUR_NAMESPACE\"\n+$  DATA_KEY=\"$(docker run --rm cyberark/conjur data-key generate)\"\n+$  HELM_RELEASE=<helm-release>\n+$  helm install \\\n+   -n \"$CONJUR_NAMESPACE\" \\\n+   --set dataKey=\"$DATA_KEY\" \\\n+   \"$HELM_RELEASE\" \\\n+   https://github.com/cyberark/conjur-oss-helm-chart/releases/download/v<VERSION>/conjur-oss-<VERSION>.tgz\n ```\n \n-This will deploy the latest version of `cyberark/conjur`.\n-The Conjur `ClusterIP` service is not exposed outside the cluster.\n+_Note: The configured data key will be used to encrypt sensitive information\n+in Conjur's database. This must be archived in a safe place._\n+\n+_Note: These commands require Helm v3+ as-written. If using Helm v2, use\n+arguments `--name conjur-oss` in place of `conjur-oss`._\n+\n+_Note: It is highly recommended that custom, signed SSL certificates be used\n+rather than using auto-generated certificates for external Conjur access and\n+for integrated Postgres database access (see\n+[Custom Installation](#custom-installation) below).\n+\n Conjur is running HTTPS on port 443 (9443 within the cluster) with a self-signed\n certificate. A PostgreSQL deployment is created to store Conjur state.\n \n-Note that you can also install from source by cloning this repository and running\n+Note that you can also install from source by cloning this repository and running:\n \n ```sh-session\n-helm install conjur-oss \\\n-  --set dataKey=\"$(docker run --rm cyberark/conjur data-key generate)\" \\\n-  ./conjur-oss\n+$  CONJUR_NAMESPACE=<conjur-namespace>\n+$  kubectl create namespace \"$CONJUR_NAMESPACE\"\n+$  DATA_KEY=\"$(docker run --rm cyberark/conjur data-key generate)\"\n+$  HELM_RELEASE=<helm-release>\n+$  helm install \\\n+   -n \"$CONJUR_NAMESPACE\" \\\n+   --set dataKey=\"$DATA_KEY\" \\\n+   \"$HELM_RELEASE\" \\\n+   ./conjur-oss\n ```\n \n ### Custom Installation\n \n-All important chart values can be customized and the following shows how to install\n-a specific version of Conjur, enable additional Kubernetes-API authentications,\n-generate self-signed SSL certificates, expose Conjur outside of the cluster,\n-and configure it to connect to a remote database:\n+All important chart values can be customized. The table in the\n+[Configuration](#configuration) section below describes customizable\n+chart values.\n+\n+Values can be customized either by:\n+- By including `helm install` command line arguments of the form\n+  `--set <key>=<value>` for any non-default configuration values (see the\n+  [Example: Installation Using Command Line Arguments](#example-installation-using-command-line-arguments)\n+  section below.\n+- Creating a custom version of the `values.yaml` file (see the\n+  [Example: Installation Using Custom YAML File](#example-installation-using-custom-yaml-file)\n+  section below).\n+\n+_Note: When using non-default values for Helm install or upgrade,\n+the user is advised:_\n+- _Setting configurable parameters to non-default values may result in a\n+  combination of settings that may not have been tested._\n+- _Using component images other than the defaults may introduce security\n+  vulnerabilities._\n+\n+_Note: It is recommended that any custom chart values that are sensitive in\n+nature should be set on the Helm command line rather than in a custom values\n+file (to avoid the risk of the custom values file not getting deleted after\n+use). An example of how to do this for `database.url` is shown below._\n+\n+#### Example: Installation Using Command Line Arguments\n+The following shows how to install a Conjur deployment with:\n+- A specific version of Conjur\n+- A custom domain name to use for accessing Conjur from outside of the cluster\n \n-**custom-values.yaml**\n+```sh-session\n+$  CONJUR_NAMESPACE=my-conjur-namespace\n+$  kubectl create --namespace \"$CONJUR_NAMESPACE\"\n+$  DATA_KEY=\"$(docker run --rm cyberark/conjur data-key generate)\"\n+$  HELM_ARGS=\"--set dataKey=$DATA_KEY \\\n+              --set image.tag=1.5.1 \\\n+              --set image.pullPolicy=IfNotPresent \\\n+              --set ssl.hostname=custom.domainname.com\n+$  helm install \\\n+   -n \"$CONJUR_NAMESPACE\" \\\n+   $HELM_ARGS \\\n+   conjur-oss \\\n+   https://github.com/cyberark/conjur-oss-helm-chart/releases/download/v<VERSION>/conjur-oss-<VERSION>.tgz\n+```\n+\n+#### Example: Installation Using Custom YAML File\n+The following shows how to install a Conjur deployment with:\n+- A specific version of Conjur\n+- Additional Kubernetes-API authenticators enabled\n+- A custom domain name to use for accessing Conjur from outside of the cluster\n \n-```yaml\n+First, create a custom values file:\n+\n+```sh-session\n+$  DATA_KEY=\"$(docker run --rm cyberark/conjur data-key generate)\"\n+$  cat >custom-values.yaml <<EOT\n authenticators: \"authn-k8s/minikube,authn\"\n-dataKey: \"GENERATED_DATAKEY\"  # docker run --rm -it cyberark/conjur data-key generate\n-databaseUrl: \"postgres://postgres:PASSWORD@POSTGRES_ENDPOINT/postgres\"\n+dataKey: $DATA_KEY\n \n image:\n-  tag: \"1.1.1-stable\"\n+  tag: \"1.5.1\"\n   pullPolicy: IfNotPresent\n \n ssl:\n   hostname: custom.domainname.com\n+EOT\n ```\n \n+Next, deploy Conjur using the `custom-values.yaml` file as follows:\n+\n ```sh-session\n-$ helm install conjur-oss -f custom-values.yaml \\\n-  https://github.com/cyberark/conjur-oss-helm-chart/releases/download/v<VERSION>/conjur-oss-<VERSION>.tgz\n+$  CONJUR_NAMESPACE=my-conjur-namespace\n+$  kubectl create --namespace \"$CONJUR_NAMESPACE\"\n+$  helm install \\\n+   -n \"$CONJUR_NAMESPACE\" \\\n+   -f custom-values.yaml \\\n+   conjur-oss \\\n+   https://github.com/cyberark/conjur-oss-helm-chart/releases/download/v<VERSION>/conjur-oss-<VERSION>.tgz\n ```\n \n *NOTE:* If using the Kubernetes authenticator for Conjur, the `account` value\n-(see [Configuration](#Configuration)) must match the initial Conjur account\n+(see [Configuration](#configuration)) must match the initial Conjur account\n created. For example, given the following command:\n \n ```sh-session\n-$ kubectl exec $POD_NAME --container=conjur-oss conjurctl account create default\n+$  kubectl exec -n \"$CONJUR_NAMESPACE\" \"$POD_NAME\" --container=conjur-oss conjurctl account create default\n ```\n \n The chart value for `account` would be expected to equal `default`.\n \n-## Uninstalling the Chart\n+### Installing Conjur with an External Postgres Database\n \n-To uninstall/delete the `my-release` deployment:\n+You can configure Conjur to use an external (non-integrated) Postgres database\n+by running `helm install` with the following command line argument (or\n+setting the equivalent field in a custom values.yaml file):\n \n ```\n-$ helm delete my-release\n+      --set database.url=<your-database-connection-string>\n ```\n \n-The command removes all the Kubernetes components\n-associated with the chart and deletes the release.\n+If this chart value is not explicitly set, then an integrated Postgres\n+database will be deployed along with Conjur.\n+\n+### Auto-Generated Configuration\n+\n+By default, a `helm install` of the Conjur OSS helm chart will include\n+automatic generation of the following configuration:\n+\n+- Postgres database password (for integrated Postgres database only).\n+\n+  _Note: The database password configuration is not used when an external\n+   Postgres database is configured._\n+\n+  The database password for an integrated Postgres database is automatically\n+  generated if it is not set explicitly. Alternatively, the database password\n+  can be set explicitly by including the following `helm install` command\n+  line argument (or by setting the equivalent field in a custom values.yaml\n+  file):\n+\n+  ```\n+      --set database.password=<your-database-password>\n+  ```\n+\n+- Postgres database SSL certificate and key (for integrated Postgres\n+  database only).\n+  \n+  Alternatively, these values can be set explicitly with the following\n+  `helm install` arguments (or by setting the equivalent field in a custom\n+  values.yaml file):\n+\n+  ```\n+      --set database.ssl.cert=<your-database-ssl-cert>\n+      --set database.ssl.key=<your-database-ssl-key>\n+  ```\n+\n+- Conjur SSL CA signing certificate and SSL self-signed certificate.\n+\n+  Alternatively, these values can be set explicitly with the following\n+  `helm install` arguments:\n+\n+  ```\n+      --set ssl.caCert=<your-ssl-CA-cert>\n+      --set ssl.caKey=<your-ssl-CA-key>\n+      --set ssl.cert=<your-ssl-cert>\n+      --set ssl.key=<your-ssl-key>\n+  ```\n+\n+## Upgrading, Modifying, or Migrating a Conjur OSS Helm Deployment\n+\n+This Helm chart supports modifications or upgrades of a Conjur deployment via\n+`helm upgrade`. This includes tasks such as rotating SSL certificates.\n+\n+For details on how to upgrade or modify an existing Conjur OSS Helm deployment,\n+or migrate Conjur configuration from on Conjur OSS Helm deployment to a new,\n+separate Conjur OSS Helm deployment, please see the\n+[UPGRADING.md](UPGRADING.md) markdown file.\n \n ## Configuration\n \n@@ -104,18 +268,21 @@ The following table lists the configurable parameters of the Conjur OSS chart an\n |`account`|Name of the Conjur account to be used by the Kubernetes authenticator|`\"default\"`|\n |`authenticators`|List of authenticators that Conjur will whitelist and load.|`\"authn\"`|\n |`conjurLabels`|Extra Kubernetes labels to apply to Conjur resources|`{}`|\n-|`databaseUrl`|PostgreSQL connection string. If left blank, a PostgreSQL deployment is created.|`\"\"`|\n+|`database.url`|PostgreSQL connection string. If left blank, an integrated PostgreSQL deployment is created.|`\"\"`|\n+|`database.password`|PostgreSQL database password string. Unused if an external Postgres database is configured. See [PostgreSQL Database Password Restrictions](#postgresql-database-password-restrictions) below.|`\"\"`|\n+|`database.ssl.Cert`|PostgreSQL TLS x509 certificate, base64 encoded.|`\"\"`|\n+|`database.ssl.key`|PostgreSQL TLS private key, base64 encoded.|`\"\"`|\n |`dataKey`|Conjur data key, 32 byte base-64 encoded string for data encryption.|`\"\"`|\n |`deployment.annotations`|Annotations for Conjur deployment|`{}`|\n |`image.repository`|Conjur Docker image repository|`\"cyberark/conjur\"`|\n-|`image.tag`|Conjur Docker image tag|`\"latest\"`|\n+|`image.tag`|Conjur Docker image tag|`\"1.5\"`|\n |`image.pullPolicy`|Pull policy for Conjur Docker image|`\"Always\"`|\n |`nginx.image.repository`|NGINX Docker image repository|`\"nginx\"`|\n |`nginx.image.tag`|NGINX Docker image tag|`\"1.15\"`|\n |`nginx.image.pullPolicy`|Pull policy for NGINX Docker image|`\"IfNotPresent\"`|\n |`postgres.image.pullPolicy`|Pull policy for postgres Docker image|`\"IfNotPresent\"`|\n |`postgres.image.repository`|postgres Docker image repository|`\"postgres\"`|\n-|`postgres.image.tag`|postgres Docker image tag|`\"10.1\"`|\n+|`postgres.image.tag`|postgres Docker image tag|`\"10.12\"`|\n |`postgres.persistentVolume.create`|Create a peristent volume to back the PostgreSQL data|`true`|\n |`postgres.persistentVolume.size`|Size of persistent volume to be created for PostgreSQL|`\"8Gi\"`|\n |`postgres.persistentVolume.storageClass`|Storage class to be used for PostgreSQL persistent volume claim|`nil`|\n@@ -134,6 +301,67 @@ The following table lists the configurable parameters of the Conjur OSS chart an\n |`ssl.hostname`|Hostname and Common Name for generated certificate and ingress|`\"conjur.myorg.com\"`|\n |`postgresLabels`|Extra Kubernetes labels to apply to Conjur PostgreSQL resources|`{}`|\n \n+### PostgreSQL Database Password Restrictions \n+The following restrictions apply to the PostgreSQL database password:\n+\n+- Password must only contain the following:\n+  - Digits (0-9)\n+  - Letters (A-Z,a-z)\n+  - The special characters:\n+    [\"-\", \".\", \"_\", or \"~\"]\n+- Password length must be less than or equal to 64 characters.\n+\n+## Deleting the Conjur Deployment\n+\n+Uninstalling or deleting a Conjur deployment involves two steps:\n+- Running `helm delete` to delete Kubernetes resources that are\n+  managed directly by Helm as part of the Conjur Helm release.\n+- Using `kubectl delete` to delete Kubernetes secrets that are associated\n+  with the Conjur release, but are not managed directly by Helm.\n+\n+### Uninstalling the Chart via Helm Delete\n+To uninstall/delete resources that are associated with a Conjur deployment\n+that are directly managed by Helm, use `helm delete`:\n+\n+```sh-session\n+    $  CONJUR_NAMESPACE=\"<conjur-namespace>\"\n+    $  HELM_RELEASE=\"conjur-oss\"\n+    $  helm delete -n \"$CONJUR_NAMESPACE\" \"$HELM_RELEASE\"\n+```\n+\n+### Cleaning Up Kubernetes Secrets Not Managed by Helm\n+\n+Following a `helm delete` of a Conjur deployment, there may be some\n+residual Kubernetes secrets that have not been deleted. This will happen\n+whenever secrets are created for \"auto-generated\" Conjur configuration.\n+Such secrets are decorated with a \"pre-install\" Helm hook annotation,\n+essentially making these secrets \"self-managed\" from a Helm perspective.\n+The benefit to having these secrets become \"self-managed\" is that it prevents\n+loss of that configuration as a result of `helm upgrade` operations. The\n+downside is that those secrets are no longer cleaned up as part of\n+`helm delete`.\n+\n+The Kubernetes secrets that may need to be manually deleted following\n+`helm delete` are:\n+\n+|Secret Name|Description|When is Manual Deletion Required?|\n+|-----------|-----------|---------------------------------|\n+|`<helm-release>-conjur-database-password`|Database Password|When created (i.e. database URL not explicitly set)|\n+|`<helm-release>-conjur-database-ssl`|Database SSL Certificate|When auto-generated (i.e. not explicitly set)|\n+|`<helm-release>-conjur-database-url`|Database URL|When auto-generated (i.e. not explicitly set)|\n+|`<helm-release>-conjur-data-key`|Data encryption key|Always|\n+|`<helm-release>-conjur-ssl-ca-cert`|Conjur SSL CA Certificate|When auto-generated (i.e. not explicitly set)|\n+|`<helm-release>-conjur-ssl-cert`|Conjur SSL Access Certificate|When auto-generated (i.e. not explicitly set)|\n+\n+To delete the residual \"self-managed\" Kubernetes secrets associated with\n+the Conjur deployment, run the following:\n+\n+```sh-session\n+$  CONJUR_NAMESPACE=\"<conjur-namespace>\"\n+$  HELM_RELEASE=\"conjur-oss\"\n+$  kubectl delete secrets -n \"$CONJUR_NAMESPACE\" --selector=\"release=$HELM_RELEASE\"\n+```\n+\n ## Contributing\n \n This chart is maintained at"
        },
        {
          "filename": "conjur-oss/UPGRADING.md",
          "status": "added",
          "additions": 560,
          "deletions": 0,
          "patch": "@@ -0,0 +1,560 @@\n+# Upgrading, Modifying, or Migrating a Conjur OSS Helm Deployment\n+\n+This guide describes how to upgrade, modify, or migrate data from a\n+[CyberArk Conjur Open Source](https://www.conjur.org) (Conjur OSS)\n+installation that has been deployed using the\n+[Conjur OSS Helm Chart](https://github.com/cyberark/conjur-oss-helm-chart/conjur-oss).\n+\n+There are two main scenarios covered in this document:\n+- Upgrading/Modifying an existing Conjur OSS Helm release\n+- Migrating configuration from an existing Conjur OSS Helm release\n+  to a new Conjur OSS Helm Release\n+\n+For more details about installing Conjur OSS or contributing to Conjur OSS\n+Helm chart development, please refer to the\n+[Conjur OSS Helm Chart repository](https://github.com/cyberark/conjur-oss-helm-chart/conjur-oss).\n+\n+To see what Conjur OSS Helm chart configurations can be upgraded/updated,\n+please refer to the [Configuration](README.md#configuration) section of\n+the Conjur OSS Helm chart [README.md](README.md) file.\n+\n+---\n+\n+## Table of Contents\n+\n+- [Prerequisites and Guidelines](#prerequisites-and-guidelines)\n+- [Upgrading/Modifying a Conjur OSS Helm Release](#upgradingmodifying-a-conjur-oss-helm-release)\n+  * [Running Helm Upgrade](#running-helm-upgrade)\n+    + [Example: Upgrading Conjur Version](#example-upgrading-conjur-version)\n+    + [Example: Upgrading NGINX Version](#example-upgrading-nginx-version)\n+  * [Rotating the SSL Certificate for an Integrated Postgres Database](#rotating-the-ssl-certificate-for-an-integrated-postgres-database)\n+  * [Rotating the Conjur SSL CA and Access Certificates](#rotating-the-conjur-ssl-ca-and-access-certificates)\n+  * [Updating the Database URL for an External Postgres Database](#updating-the-database-url-for-an-external-postgres-database)\n+- [Migrating Conjur OSS Configuration to a New Conjur OSS Helm Release](#migrating-conjur-oss-configuration-to-a-new-conjur-oss-helm-release)\n+  * [Overview](#overview)\n+  * [Assumptions and Limitations](#assumptions-and-limitations)\n+  * [Migrating Conjur OSS Configuration With Integrated Postgres Database](#migrating-conjur-oss-configuration-with-integrated-postgres-database)\n+    + [Step 1: Save Helm State and Kubernetes Secrets Data](#step-1-save-helm-state-and-kubernetes-secrets-data)\n+    + [Step 2: Save Postgres Database State](#step-2-save-postgres-database-state)\n+    + [Step 3: Uninstall Original Conjur OSS Helm Release](#step-3-uninstall-original-conjur-oss-helm-release)\n+    + [Step 4: Helm Install a New Conjur OSS Deployment](#step-4-helm-install-a-new-conjur-oss-deployment)\n+    + [Step 5: Restore the Postgres Database](#step-5-restore-the-postgres-database)\n+    + [Step 6: Redeploy helm chart with updated 'replicaCount'](#step-6-redeploy-helm-chart-with-updated-replicaCount)\n+  * [Migrating Conjur OSS Configuration With External Postgres Database](#migrating-conjur-oss-configuration-with-external-postgres-database)\n+    + [Step 1: Save Helm State and Kubernetes Secrets Data](#step-1-save-helm-state-and-kubernetes-secrets-data)\n+    + [Step 2: Uninstall Original Conjur OSS Helm Release](#step-2-uninstall-original-conjur-oss-helm-release)\n+    + [Step 3: Helm Install a New Conjur OSS Deployment](#step-3-helm-install-a-new-conjur-oss-deployment)\n+\n+## Prerequisites and Guidelines\n+\n+Please refer to the\n+[Prerequisites and Guidelines](README.md#prerequisites-and-guidelines)\n+section of Conjur OSS helm chart [README.md](README.md) file for overall\n+prerequisites and guidelines for using the Conjur OSS helm chart.\n+\n+## Upgrading/Modifying a Conjur OSS Helm Release\n+\n+This Helm chart supports modifications or upgrades of a Conjur deployment via\n+`helm upgrade`. There are three upgrade scenarios to consider, depending on\n+whether there are any major (breaking) version changes for the release\n+components:\n+\n+- Conjur\n+- NGINX\n+- Postgres\n+\n+and depending on whether the Helm chart used for upgrade is different than\n+that used for Helm install:\n+\n+|Component Version Changes|Chart Version Used for Upgrade|Currently Supported?|Notes|\n+|-------------------------|------------------------------|:------------------:|:---:|\n+|Minor (i.e. non-breaking)|Same version as Helm install|**YES**||\n+|Minor (i.e. non-breaking)|Different version than Helm install|**YES**||\n+|Major (breaking)|Same or different than Helm install|**NO**|**Note 1, Note 2**|\n+\n+_**Note 1**: To determine if a version change/bump is considered a breaking change, refer\n+to this repository's `CHANGELOG.md` file for the respective current vs. new\n+helm chart version._\n+\n+_**Note 2**: Details on how upgrades involving breaking changes to Conjur, NGINX,\n+ or PostgreSQL) will be supported in future releases are TBD._\n+\n+### Running Helm Upgrade\n+\n+To perform a Helm upgrade, run the following (replacing `<conjur-namespace>`\n+with your Conjur deployment namespace):\n+\n+```sh-session\n+$  CONJUR_NAMESPACE=\"<conjur-namespace>\"\n+$  HELM_RELEASE=\"conjur-oss\"\n+$  helm upgrade \\\n+   -n \"$CONJUR_NAMESPACE\" \\\n+   --reuse-values \\\n+   --recreate-pods \\\n+   < INSERT YOUR --set CUSTOMIZATION SETTINGS HERE > \\\n+   \"$HELM_RELEASE\" \\\n+   https://github.com/cyberark/conjur-oss-helm-chart/releases/download/v<VERSION>/conjur-oss-<VERSION>.tgz\n+```\n+\n+Or if you've cloned the https://github.com/cyberark/conjur-oss-helm-chart\n+repository (replacing `<conjur-namespace>` with your Conjur deployment namespace):\n+\n+```sh-session\n+$  CONJUR_NAMESPACE=\"<conjur-namespace>\"\n+$  HELM_RELEASE=\"conjur-oss\"\n+$  helm upgrade \\\n+   -n \"$CONJUR_NAMESPACE\" \\\n+   --reuse-values \\\n+   --recreate-pods \\\n+   < INSERT YOUR --set CUSTOMIZATION SETTINGS HERE > \\\n+   \"$HELM_RELEASE\" \\\n+   ./conjur-oss\n+```\n+\n+Some notes:\n+\n+- The `--reuse-values` is required to preserve any non-default values\n+  that were used during your previous `helm install`.\n+- `--recreate-pods` is required to ensure that pods are using the latest\n+  configuration from Kubernetes `secrets` and `configMaps` following\n+  `helm upgrade`.\n+- Custom values that can be set via `--set` are described in the\n+  [Custom Installation](README.md#custom-installation) section of the\n+  [README.md](README.md) file.\n+- The master data key used in the `helm install` is preserved for `helm\n+  upgrade` operations. It is not possible to modify the master data key\n+  via `helm upgrade`.\n+- The database password used by an integrated Postgres database is preserved\n+  for `helm upgrade`. It is not possible to modify the database password\n+  via `helm upgrade`.\n+- By default, the Postgres database SSL self-signed certificate and key are\n+  preserved for `helm upgrade`. To rotate the database SSL certificate and\n+  key, see the\n+  [Rotating the SSL Certificate for an Integrated Postgres Database](#rotating-the-ssl-certificate-for-an-integrated-postgres-database)\n+  section below.\n+- By default, the Conjur CA certificate and self-signed certificate (for\n+  external access) are preserved for `helm upgrade`. To rotate the Conjur\n+  CA and self-signed certificates, see the\n+  [Rotating the Conjur SSL CA and Self-Signed Certificates](#rotating-the-conjur-ssl-ca-and-self-signed-certificates)\n+  section below.\n+\n+#### Example: Upgrading Conjur Version\n+\n+For example, to upgrade the version of Conjur that is used in the Conjur\n+deployment, run the following:\n+\n+```sh-session\n+$  CONJUR_NAMESPACE=\"<conjur-namespace>\"\n+$  HELM_RELEASE=\"conjur-oss\"\n+$  helm upgrade \\\n+   -n \"$CONJUR_NAMESPACE\" \\\n+   --reuse-values \\\n+   --recreate-pods \\\n+   --set image.tag=\"<new-conjur-version>\" \\\n+   \"$HELM_RELEASE\" \\\n+   ./conjur-oss\n+```\n+\n+#### Example: Upgrading NGINX Version\n+\n+For example, to change the version of NGINX that is used in the Conjur\n+deployment, run the following:\n+\n+```sh-session\n+$  CONJUR_NAMESPACE=\"<conjur-namespace>\"\n+$  HELM_RELEASE=\"conjur-oss\"\n+$  helm upgrade \\\n+   -n \"$CONJUR_NAMESPACE\" \\\n+   --reuse-values \\\n+   --recreate-pods \\\n+   --set nginx.image.tag=\"<nginx-version>\" \\\n+   \"$HELM_RELEASE\" \\\n+   ./conjur-oss\n+```\n+\n+### Rotating the SSL Certificate for an Integrated Postgres Database\n+\n+If a Helm deployment of Conjur OSS included the deployment of an integrated\n+Postgres database (i.e. the `database.url` chart value was not explicitly\n+set for `helm install`), then `helm upgrade` operations will by default\n+preserve the self-signed SSL certificate and key used to access the\n+integrated database.\n+\n+Alternatively, the integrated database SSL certificate and key can be\n+manually updated (or \"rotated\") as follows:\n+\n+1. Generate a self-signed certificate and key.\n+\n+2. Delete the Kubernetes secret for the database SSL certificate. (Note:\n+   this is optional if the current database SSL certificate was set\n+   explicitly, but mandatory if the SSL certificate and key were\n+   auto-generated by the Conjur OSS Helm chart):\n+\n+```sh-session\n+$  CONJUR_NAMESPACE=\"<conjur-namespace>\"\n+$  HELM_RELEASE=\"conjur-oss\"\n+$  CERT_SECRET=$(kubectl get secrets \\\n+       -n \"$CONJUR_NAMESPACE\" \\\n+       -l \"app=conjur-oss,release=$HELM_RELEASE\" \\\n+       -o name \\\n+       | grep conjur-database-ssl)\n+$  kubectl delete -n \"$CONJUR_NAMESPACE\" \"$CERT_SECRET\"\n+```\n+\n+3. Run `helm upgrade`, setting the certificate values from Step 1:\n+\n+```sh-session\n+$  helm upgrade \\\n+       -n \"$CONJUR_NAMESPACE\" \\\n+       --reuse-values \\\n+       --recreate-pods \\\n+       --set database.ssl.cert=\"<new-ssl-cert>\" \\\n+       --set database.ssl.key=\"<new-ssl-key>\" \\\n+       \"$HELM_RELEASE\" \\\n+       ./conjur-oss\n+```\n+\n+### Rotating the Conjur SSL CA and Access Certificates\n+\n+By default, a `helm upgrade` operation will preserve the SSL CA certificate\n+and key used for signing and the SSL certificate and key used for\n+external Conjur access.\n+\n+Alternatively, the Conjur SSL CA and SSL access certificates can be manually\n+updated (or \"rotated\") as follows:\n+\n+1. Generate an SSL CA self-signing certificate and key and a self-signed\n+   certificate and key for external Conjur access.\n+\n+2. Delete the Kubernetes secrets for the Conjur CA signing certificate and\n+   the Conjur self-signed certificate. (Note: This step is optional if the\n+   current Conjur CA and self-signed certificates were set explicitly, but\n+   mandatory if these certificates were auto-generated by the Conjur\n+   OSS Helm chart):\n+\n+```sh-session\n+$  CONJUR_NAMESPACE=\"<conjur-namespace>\"\n+$  HELM_RELEASE=\"conjur-oss\"\n+$  CA_SECRET=$(kubectl get secrets \\\n+       -n \"$CONJUR_NAMESPACE\" \\\n+       -l \"app=conjur-oss,release=$HELM_RELEASE\" \\\n+       -o name \\\n+       | grep conjur-ssl-ca-cert)\n+$  kubectl delete -n \"$CONJUR_NAMESPACE\" \"$CA_SECRET\"\n+$  CERT_SECRET=$(kubectl get secrets \\\n+       -n \"$CONJUR_NAMESPACE\" \\\n+       -l \"app=conjur-oss,release=$HELM_RELEASE\" \\\n+       -o name \\\n+       | grep conjur-ssl-cert)\n+$  kubectl delete -n \"$CONJUR_NAMESPACE\" \"$CERT_SECRET\"\n+```\n+\n+3. Run `helm upgrade`, setting the certificate values from Step 1:\n+\n+```sh-session\n+$  helm upgrade \\\n+       -n \"$CONJUR_NAMESPACE\" \\\n+       --reuse-values \\\n+       --recreate-pods \\\n+       --set ssl.caCert=\"<new-ssl-CA-cert>\" \\\n+       --set ssl.caKey=\"<new-ssl-CA-key>\" \\\n+       --set ssl.cert=\"<new-ssl-cert>\" \\\n+       --set ssl.key=\"<new-ssl-key>\" \\\n+       \"$HELM_RELEASE\" \\\n+       ./conjur-oss\n+```\n+\n+### Updating the Database URL for an External Postgres Database\n+\n+If you are using an external Postgres database for your Conjur deployment\n+(i.e. you had explicitly set the `database.url` chart value in your\n+prior `helm install`), then by default any `helm upgrade` operation that\n+uses the `--reuse-values` flag will preserve that `database.url` value.\n+\n+On the other hand, if you need to update the `database.url` connection\n+string for some reason (e.g. the domain name or password for\n+the external Postgres database has been changed), then you **must\n+update the database URL by doing a `helm upgrade` that uses the command\n+line argument `--set \"database.url=<new-database-url>\"`**:\n+\n+```sh-session\n+$  CONJUR_NAMESPACE=\"<conjur-namespace>\"\n+$  HELM_RELEASE=\"conjur-oss\"\n+$  helm upgrade \\\n+       -n \"$CONJUR_NAMESPACE\" \\\n+       --reuse-values \\\n+       --recreate-pods \\\n+       --set \"database.url=<new-database-url>\" \\\n+       \"$HELM_RELEASE\" \\\n+       ./conjur-oss\n+```\n+\n+## Migrating Conjur OSS Configuration to a New Conjur OSS Helm Release\n+\n+### Overview\n+\n+In some cases, it may be desirable to migrate Conjur configuration from\n+one Conjur OSS Helm release to a new, separate Helm release. For example,\n+you may want to migrate your Conjur OSS deployment to a different\n+Kubernetes provider, or you may want to move your Conjur OSS deployment\n+to a more secure Kubernetes environment.\n+\n+This section provides the steps for extracting Conjur configuration from\n+an existing Conjur OSS Helm deployment, and restoring that Conjur configuration\n+on a new, separate Conjur OSS Helm deployment.\n+\n+The backup operation from the original Conjur OSS deployment involves\n+extracting Conjur OSS state from three sources:\n+\n+- Kubernetes secrets\n+- Helm state\n+- Postgres database state\n+\n+The restore operation to the new Conjur OSS deployment involves:\n+\n+- Running `helm init` to restore Helm state and Kubernetes secrets\n+- Postgres restore of Conjur's database state\n+\n+### Assumptions and Limitations\n+\n+- Currently, _the version of Conjur for the new Conjur OSS deployment\n+  **MUST** be the same as the version of Conjur on the original Conjur\n+  OSS deployment_. (Support for migration to different versions of Conjur\n+  may be available in the future, but this will require schema translation\n+  logic that is TBD).\n+- For deployments using an integrated Postgres database, _the **major**\n+  version of Postgres in the new Conjur OSS deployment must be the\n+  same as the **major** version of Postgres in the original deployment_.\n+- For simplicity, the instructions described here will include the\n+  recreation of only a critical **subset** of Helm state from the old Conjur\n+  deployment to new deployment. It is possible to modify the steps to\n+  include transfer of more Helm state, but that is left out-of-scope for\n+  simplicity in these instructions.\n+\n+  The Helm values that are included in the migration described here:\n+  - `account`\n+  - `authenticators`\n+  - `database.password`\n+  - `database.url`\n+  - `dataKey`\n+\n+  The Helm values that are left out for simplicity and brevity are all\n+  other Helm chart values listed in the\n+  [Configuration](README.md#configuration) section of the\n+  [README.md](README.md) file.\n+\n+- _**All instructions that follow assume that you are in the base of\n+  https://github.com/cyberark/conjur-oss-helm-chart repo**_\n+\n+### Migrating Conjur OSS Configuration With Integrated Postgres Database\n+\n+When a Conjur OSS Helm deployment includes an integrated (internal) Postgres\n+database, the procedure for migrating Conjur OSS state to a new Conjur OSS\n+Helm deployment is as follows:\n+\n+#### Step 1: Save Helm State and Kubernetes Secrets Data\n+\n+_This assumes that only Conjur is in the specified namespace.\n+ If not, manually set the `helm_chart_name` variable_\n+\n+(Replace `<conjur-namespace>` with your Conjur deployment namespace.)\n+\n+```sh-session\n+$  namespace=\"<conjur-namespace>\"\n+\n+$  helm_chart_name=$(helm list -n \"$namespace\" -q)\n+$  account=$(helm show values \"$helm_chart_name\" | \\\n+             awk '/^account:/{print $2}' | \\\n+             sed -e 's/^\"//' -e 's/\"$//')\n+$  authenticators=$(kubectl get secret \\\n+             -n \"$namespace\" \\\n+             \"${helm_chart_name}-conjur-authenticators\" \\\n+             -o jsonpath=\"{.data.key }\" | \\\n+             base64 --decode)\n+$  data_key=$(kubectl get secret \\\n+             -n \"$namespace\" \\\n+             \"${helm_chart_name}-conjur-data-key\" \\\n+             -o jsonpath=\"{.data.key }\" | \\\n+             base64 --decode)\n+```\n+\n+Next, check your Conjur OSS chart version:\n+\n+```sh-session\n+$  helm show chart \"$helm_chart_name\"| awk '/^version:/{print $2}'\n+```\n+\n+If your Conjur OSS chart version is 2.0.0 or newer, then you will also need\n+to store the database password:\n+```sh-session\n+$  db_password=$(kubectl get secret \\\n+             -n \"$namespace\" \\\n+             \"${helm_chart_name}-conjur-database-password\" \\\n+             -o jsonpath=\"{.data.key }\" | \\\n+             base64 --decode)\n+```\n+\n+#### Step 2: Save Postgres Database State\n+\n+```sh-session\n+#  Get name of the Postgres pod in the current deployment\n+$  postgres_old_pod=$(kubectl get pods \\\n+             -n \"$namespace\" \\\n+             -l \"app=conjur-oss-postgres\" \\\n+             -o jsonpath=\"{.items[0].metadata.name}\")\n+\n+#  Run the `pg_dump` utility to create a database archive file\n+$  kubectl exec -it \\\n+             -n \"$namespace\" \\\n+             $postgres_old_pod \\\n+             -- pg_dump -U postgres -c -C --column-inserts \\\n+                        --inserts -f /dbdump.tar -F tar\n+\n+#  Copy the database archive file from the Postgres pod to your local machine\n+$  kubectl cp -n \"$namespace\" $postgres_old_pod:dbdump.tar dbdump.tar\n+```\n+\n+#### Step 3: Uninstall Original Conjur OSS Helm Release\n+\n+Run `helm uninstall ...` to delete the original Conjur OSS Helm release\n+and delete any residual, \"self-managed\" Kubernetes secrets.\n+\n+**WARNING: This will remove your old certificates!**\n+\n+```sh-session\n+$  helm uninstall -n \"$namespace\" $helm_chart_name\n+$  kubectl delete secrets -n \"$namespace\" -l release=\"$helm_chart_name\"\n+```\n+\n+#### Step 4: Helm Install a New Conjur OSS Deployment\n+\n+**WARNING: This will possibly change your external service IP!**\n+\n+_This new deployment is unusable in this state as a regular deployment since\n+ the `replicaCount` is temporarily set to 0 (which is intentional). The\n+ `helm upgrade` in [Step 6](#step-6-redeploy-helm-chart-with-updated-replicacount)\n+ below will enable it._\n+\n+```sh-session\n+$  namespace=\"<conjur-namespace>\"\n+$  helm_chart_name=conjur-oss\n+$  helm install \\\n+        -n \"$namespace\" \\\n+        --set account=\"$account\" \\\n+        --set authenticators=\"$authenticators\" \\\n+        --set database.password=\"$db_password\" \\\n+        --set dataKey=\"$data_key\" \\\n+        --set replicaCount=0 \\\n+        $helm_chart_name \\\n+        ./conjur-oss\n+```\n+\n+#### Step 5: Restore the Postgres Database\n+\n+_We use the `template1` part of the connection string to delete and recreate the database.\n+This assumes that database names have not changed between upgrades. Replace `postgres` in the\n+`sed` command if your connection string used a different database name._\n+\n+```sh-session\n+#  Get the name of the Postgres pod in the new deployment\n+$  postgres_new_pod=$(kubectl get pods \\\n+            -n \"$namespace\" \\\n+            -l \"app=conjur-oss-postgres\" \\\n+            -o jsonpath=\"{.items[0].metadata.name}\")\n+\n+#  Copy the database archive file from your local machine to the Postgres \n+#  pod in the new deployment\n+$  kubectl cp -n \"$namespace\" ./dbdump.tar $postgres_new_pod:/dbdump.tar\n+\n+#  Run the `pg_restore` utility to restore the database archive file to\n+#  the Postgres pod.\n+$  pg_restore_connection_string=$(kubectl get secret \\\n+            -n \"$namespace\" \\\n+            ${helm_chart_name}-conjur-database-url \\\n+            -o jsonpath=\"{.data.key}\" | \\\n+            base64 --decode | \\\n+            sed 's/postgres?/template1?/')\n+$  kubectl exec -it -n \"$namespace\" \\\n+            $postgres_new_pod \\\n+            -- pg_restore -C -c -d \"$pg_restore_connection_string\" /dbdump.tar\n+\n+#  Remove the database archive file from the Postgres pod\n+$  kubectl exec -it -n \"$namespace\" \\\n+            $postgres_new_pod \\\n+            -- rm -rf /dbdump.tar\n+```\n+\n+#### Step 6: Redeploy Helm Chart With Updated `replicaCount`\n+\n+```sh-session\n+$  helm upgrade -n \"$namespace\" \\\n+                --reuse-values \\\n+                --recreate-pods \\\n+                --set replicaCount=\"1\" \\\n+                $helm_chart_name \\\n+                ./conjur-oss\n+```\n+\n+### Migrating Conjur OSS Configuration With External Postgres Database\n+\n+When a Conjur OSS Helm deployment includes an external Postgres database,\n+the procedure for migrating Conjur OSS state to a new Conjur OSS Helm\n+deployment is as follows:\n+\n+#### Step 1: Save Helm State and Kubernetes Secrets Data\n+\n+_This assumes that only Conjur is in the specified namespace.\n+ If not, manually set the `helm_chart_name` variable_\n+\n+```sh-session\n+$  namespace=\"<conjur-namespace>\"\n+\n+$  helm_chart_name=$(helm list -n \"$namespace\" -q)\n+$  account=$(helm show values \"$helm_chart_name\" | \\\n+             awk '/^account:/{print $2}' | \\\n+             sed -e 's/^\"//' -e 's/\"$//')\n+$  authenticators=$(kubectl get secret \\\n+             -n \"$namespace\" \\\n+             \"${helm_chart_name}-conjur-authenticators\" \\\n+             -o jsonpath=\"{.data.key }\" | \\\n+             base64 --decode)\n+$  data_key=$(kubectl get secret \\\n+             -n \"$namespace\" \\\n+             \"${helm_chart_name}-conjur-data-key\" \\\n+             -o jsonpath=\"{.data.key }\" | \\\n+             base64 --decode)\n+$  db_url=$(kubectl get secret \\\n+             -n \"$namespace\" \\\n+             \"${helm_chart_name}-conjur-database-url\" \\\n+             -o jsonpath=\"{.data.key }\" | \\\n+             base64 --decode)\n+```\n+\n+#### Step 2: Uninstall Original Conjur OSS Helm Release\n+\n+Run `helm uninstall ...` to delete the original Conjur OSS Helm release\n+and delete any residual, \"self-managed\" Kubernetes secrets.\n+\n+**WARNING: This will remove your old certificates!**\n+\n+```sh-session\n+$  helm uninstall -n \"$namespace\" $helm_chart_name\n+$  kubectl delete secrets -n \"$namespace\" -l release=\"$helm_chart_name\"\n+```\n+\n+#### Step 3: Helm Install a New Conjur OSS Deployment\n+\n+**WARNING: This will possibly change your external service IP!**\n+\n+```sh-session\n+$  namespace=\"<conjur-namespace>\"\n+$  helm_chart_name=conjur-oss\n+$  helm install \\\n+        -n \"$namespace\" \\\n+        --set account=\"$account\" \\\n+        --set authenticators=\"$authenticators\" \\\n+        --set database.url=\"$db_url\" \\\n+        --set dataKey=\"$data_key\" \\\n+        $helm_chart_name \\\n+        ./conjur-oss\n+```"
        },
        {
          "filename": "conjur-oss/templates/NOTES.txt",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -8,7 +8,9 @@\n   It may take 1-10 minutes for the LoadBalancer IP to be available. You can watch\n   the status of the progress by running:\n \n-      kubectl get svc -w {{ template \"conjur-oss.fullname\" . }}-ingress\n+      kubectl get svc \\\n+          --namespace {{ .Release.Namespace }} \\\n+          -w {{ template \"conjur-oss.fullname\" . }}-ingress\n \n   and waiting until you have a value in \"EXTERNAL-IP\" column.\n \n@@ -42,7 +44,10 @@\n       export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} \\\n                                          -l \"app={{ template \"conjur-oss.name\" . }},release={{ .Release.Name }}\" \\\n                                          -o jsonpath=\"{.items[0].metadata.name}\")\n-      kubectl exec $POD_NAME --container={{ .Chart.Name }} conjurctl account create {{ .Values.account | quote }}\n+      kubectl exec --namespace {{ .Release.Namespace }} \\\n+                   $POD_NAME \\\n+                   --container={{ .Chart.Name }} \\\n+                   -- conjurctl account create {{ .Values.account | quote }}\n \n   Note that the conjurctl account create command gives you the\n   public key and admin API key for the account administrator you created."
        },
        {
          "filename": "conjur-oss/templates/_helpers.tpl",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -50,6 +50,28 @@ Generate CA and end user certificate for NGINX\n {{- $_ := set . \"certKey\" ($cert.Key | b64enc) }}\n {{- end -}}\n \n+{{/*\n+Use the database password chart value if provided, or generate a\n+64-character, random, alphanumeric password for the backend database\n+*/}}\n+{{- define \"conjur-oss.database-password\" -}}\n+{{- if .Values.database.password }}\n+{{- $_ := set . \"dbPassword\" (.Values.database.password | trunc 64) }}\n+{{- else }}\n+{{- $_ := set . \"dbPassword\" (randAlphaNum 64) }}\n+{{- end }}\n+{{- end -}}\n+\n+{{/*\n+Generate self-signed certificate for the backend database\n+*/}}\n+{{- define \"conjur-oss.database-cert-gen\" -}}\n+{{- $expiration := .Values.database.ssl.expiration | int -}}\n+{{- $cert := genSelfSignedCert \"pg\" nil nil $expiration -}}\n+{{- $_ := set . \"dbCrt\" ($cert.Cert | b64enc) }}\n+{{- $_ := set . \"dbKey\" ($cert.Key | b64enc) }}\n+{{- end -}}\n+\n {{/*\n Return the most recent RBAC API available\n */}}"
        },
        {
          "filename": "conjur-oss/templates/postgres.yaml",
          "status": "modified",
          "additions": 27,
          "deletions": 6,
          "patch": "@@ -1,4 +1,4 @@\n-{{ if eq .Values.databaseUrl \"\" }}\n+{{ if eq .Values.database.url \"\" }}\n ---\n apiVersion: v1\n kind: Service\n@@ -20,7 +20,7 @@ spec:\n   selector: *AppPostgresServiceLabels\n ---\n apiVersion: apps/v1\n-kind: Deployment\n+kind: StatefulSet\n metadata:\n   name: {{ .Release.Name }}-postgres\n   labels: &AppPostgresLabels\n@@ -34,6 +34,7 @@ metadata:\n {{ toYaml . | indent 4 }}\n {{- end }}\n spec:\n+  serviceName: {{ .Release.Name }}-postgres\n   replicas: 1\n   selector:\n     matchLabels: *AppPostgresLabels\n@@ -47,14 +48,34 @@ spec:\n       - image: \"{{ .Values.postgres.image.repository }}:{{ .Values.postgres.image.tag }}\"\n         imagePullPolicy: {{ .Values.postgres.image.pullPolicy }}\n         name: postgres\n-{{ if .Values.postgres.persistentVolume.create }}\n+        args: [\"-c\", \"ssl=on\", \"-c\", \"ssl_cert_file=/etc/certs/tls.crt\", \"-c\", \"ssl_key_file=/etc/certs/tls.key\"]\n+        env:\n+        - name: POSTGRES_HOST_AUTH_METHOD\n+          value: password\n+        - name: POSTGRES_PASSWORD\n+          valueFrom:\n+            secretKeyRef:\n+              name: {{ .Release.Name }}-conjur-database-password\n+              key: key\n+        - name: PGDATA\n+          value: /var/lib/postgresql/data/pgdata\n         volumeMounts:\n-        - mountPath: \"/var/lib/postgresql\"\n-          name: postgres-data\n+{{ if .Values.postgres.persistentVolume.create }}\n+        - name: postgres-data\n+          mountPath: \"/var/lib/postgresql/data\"\n+{{- end }}\n+        - name: ssl-certs\n+          mountPath: \"/etc/certs\"\n+          readOnly: true\n       volumes:\n+{{ if .Values.postgres.persistentVolume.create }}\n       - name: postgres-data\n         persistentVolumeClaim:\n           claimName: {{ .Release.Name }}-conjur-oss-pvc\n {{- end }}\n----\n+      - name: ssl-certs\n+        secret:\n+          secretName: {{ .Release.Name }}-conjur-database-ssl\n+          # Set file permissions to 0600 (which corresponds to 384 decimal)\n+          defaultMode: 384\n {{ end }}"
        },
        {
          "filename": "conjur-oss/templates/secrets.yaml",
          "status": "modified",
          "additions": 67,
          "deletions": 4,
          "patch": "@@ -31,10 +31,14 @@ metadata:\n {{- with .Values.conjurLabels }}\n {{ toYaml . | indent 4 }}\n {{- end }}\n+  annotations:\n+    helm.sh/hook: pre-install\n+    helm.sh/hook-delete-policy: before-hook-creation\n type: Opaque\n data:\n-  key: \"{{ required \"'dataKey' has no value, it must be provided!\" .Values.dataKey | b64enc }}\"\n+  key: {{ required \"'Values.dataKey' is required for helm install. For helm upgrade, use '--reuse-values' command line flag\" .Values.dataKey | b64enc }}\n ---\n+{{- include \"conjur-oss.database-password\" . }}\n apiVersion: v1\n kind: Secret\n metadata:\n@@ -49,10 +53,69 @@ metadata:\n {{- with .Values.conjurLabels }}\n {{ toYaml . | indent 4 }}\n {{- end }}\n+{{- if not .Values.database.url }}\n+  annotations:\n+    helm.sh/hook: pre-install\n+    helm.sh/hook-delete-policy: before-hook-creation\n+{{- end }}\n type: Opaque\n data:\n-  {{ if .Values.databaseUrl }}\n-  key: {{ .Values.databaseUrl | b64enc }}\n+  {{ if .Values.database.url }}\n+  key: {{ .Values.database.url | b64enc }}\n   {{ else }}\n-  key: {{ printf \"postgres://postgres@%v-postgres/postgres\" .Release.Name | b64enc }}\n+  key: {{ printf \"postgres://postgres:%s@%v-postgres/postgres?sslmode=require\" .dbPassword .Release.Name | b64enc }}\n   {{ end }}\n+\n+{{ if eq .Values.database.url \"\" }}\n+---\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: {{ .Release.Name }}-conjur-database-password\n+  labels:\n+    app: {{ template \"conjur-oss.name\" . }}\n+    chart: {{ template \"conjur-oss.chart\" . }}\n+    release: {{ .Release.Name }}\n+    heritage: {{ .Release.Service }}\n+    app.kubernetes.io/name: {{ .Release.Name }}\n+    app.kubernetes.io/component: service\n+{{- with .Values.conjurLabels }}\n+{{ toYaml . | indent 4 }}\n+{{- end }}\n+  annotations:\n+    helm.sh/hook: pre-install\n+    helm.sh/hook-delete-policy: before-hook-creation\n+type: Opaque\n+data:\n+  key: {{ .dbPassword | b64enc }}\n+---\n+{{- include \"conjur-oss.database-cert-gen\" . }}\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: {{ .Release.Name }}-conjur-database-ssl\n+  labels:\n+    app: {{ template \"conjur-oss.name\" . }}\n+    chart: {{ template \"conjur-oss.chart\" . }}\n+    release: {{ .Release.Name }}\n+    heritage: {{ .Release.Service }}\n+    app.kubernetes.io/name: {{ .Release.Name }}\n+    app.kubernetes.io/component: service\n+{{- with .Values.conjurLabels }}\n+{{ toYaml . | indent 4 }}\n+{{- end }}\n+{{- if not .Values.database.ssl.cert }}\n+  annotations:\n+    helm.sh/hook: pre-install\n+    helm.sh/hook-delete-policy: before-hook-creation\n+{{- end }}\n+type: kubernetes.io/tls\n+data:\n+{{- if .Values.database.ssl.cert }}\n+  tls.crt: {{ .Values.database.ssl.cert }}\n+  tls.key: {{ required \"'Values.database.ssl.key' has no value, it must be provided!\" .Values.database.ssl.key }}\n+{{- else }}\n+  tls.crt: {{ .dbCrt }}\n+  tls.key: {{ .dbKey }}\n+{{- end }}\n+{{ end }}"
        },
        {
          "filename": "conjur-oss/templates/ssl-cert.yaml",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -14,10 +14,20 @@ metadata:\n {{- with .Values.conjurLabels }}\n {{ toYaml . | indent 4 }}\n {{- end }}\n+{{- if not .Values.ssl.caCert }}\n+  annotations:\n+    helm.sh/hook: pre-install\n+    helm.sh/hook-delete-policy: before-hook-creation\n+{{- end }}\n type: kubernetes.io/tls\n data:\n+{{- if .Values.ssl.caCert }}\n+  tls.crt: {{ .Values.ssl.caCert }}\n+  tls.key: {{ required \"'Values.ssl.caKey' must be provided!\" .Values.ssl.caKey }}\n+{{- else }}\n   tls.crt: {{ .caCrt }}\n   tls.key: {{ .caKey }}\n+{{- end }}\n ---\n apiVersion: v1\n kind: Secret\n@@ -33,7 +43,17 @@ metadata:\n {{- with .Values.conjurLabels }}\n {{ toYaml . | indent 4 }}\n {{- end }}\n+{{- if not .Values.ssl.caCert }}\n+  annotations:\n+    helm.sh/hook: pre-install\n+    helm.sh/hook-delete-policy: before-hook-creation\n+{{- end }}\n type: kubernetes.io/tls\n data:\n+{{- if .Values.ssl.caCert }}\n+  tls.crt: {{ required \"'Values.ssl.cert' must be provided!\" .Values.ssl.cert }}\n+  tls.key: {{ required \"'Values.ssl.key' must be provided!\" .Values.ssl.key }}\n+{{- else }}\n   tls.crt: {{ .certCrt }}\n   tls.key: {{ .certKey }}\n+{{- end }}"
        },
        {
          "filename": "conjur-oss/values.yaml",
          "status": "modified",
          "additions": 77,
          "deletions": 15,
          "patch": "@@ -1,62 +1,105 @@\n # Default values for conjur-oss.\n \n-# Name of Conjur account to be created\n+\n+# NOTE: It is recommended that any chart values that contain sensitive\n+# information (e.g. database.password, database.url, and SSL certificates\n+# and keys) be set on the command line with a `--set key=value` argument\n+# rather than setting these in a custom values YAML file. This avoids the\n+# risk of leaving around residual values files containing this sensitive\n+# information.\n+\n+\n+# Name of Conjur account to be created. Maps to CONJUR_ACCOUNT env variable\n+# for the Conjur container.\n account: \"default\"\n \n+# Affinity rules to apply to the Conjur pod to indicate to Kubernetes scheduler\n+# which nodes would be most appropriate for Conjur pod placement. See:\n+# https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node\n affinity: {}\n \n-# Conjur whitelisted authenticators. Maps as CONJUR_AUTHENTICATORS env variable.\n+# Conjur whitelisted authenticators, presented as a comma-separated list.\n+# Maps to CONJUR_AUTHENTICATORS env variable for the Conjur container.\n authenticators: \"authn\"\n \n # Additional labels to apply to all conjur resources\n conjurLabels: {}\n \n-# PostgreSQL connection string. If left blank, a PostgreSQL deployment is created.\n-databaseUrl: \"\"\n+database:\n+  # PostgreSQL connection password. If left blank, a pseudo-random,\n+  # 64-character alphanumeric password will be auto-generated.\n+  # Note that this value will be ignored for Helm upgrade operations.\n+  password: \"\"\n+\n+  ssl:\n+    # Backend database SSL certificate and private key. These should be\n+    # base64-encoded strings. If these values are not set, a self-signed\n+    # certificate will be auto-generated.\n+    cert: \"\"\n+    key: \"\"\n+    # Expiration for an auto-generated cert.\n+    expiration: 365 # days\n+\n+  # PostgreSQL connection string. If left blank, a PostgreSQL deployment\n+  # is created. This value will be ignored for Helm upgrade operations\n+  # (i.e. value used for install is reused).\n+  url: \"\"\n \n # Conjur data key, 32 byte base-64 encoded string for data encryption.\n # Generate one with `docker run --rm cyberark/conjur data-key generate`.\n dataKey: \"\"\n \n+# Annotations to apply to the Conjur deployment.\n deployment:\n   annotations: {}\n \n image:\n   pullPolicy: Always\n   repository: cyberark/conjur  # https://hub.docker.com/r/cyberark/conjur/\n-  tag: latest\n-\n-nodeSelector: {}\n+  tag: 1.5\n \n nginx:\n   image:\n-    pullPolicy: IfNotPresent\n+    pullPolicy: Always\n     repository: nginx          # https://hub.docker.com/_/nginx/\n     tag: '1.15'\n \n+# nodeSelector (node selection constraints) to apply to the Conjur pod. Refer to:\n+# https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector\n+nodeSelector: {}\n+\n postgres:\n   image:\n-    pullPolicy: IfNotPresent\n+    pullPolicy: Always\n     repository: postgres       # https://hub.docker.com/_/postgres/\n-    tag: '10.1'\n+    tag: '10.12'\n   persistentVolume:\n     create: true\n     size: 8Gi\n     storageClass:\n \n-# Additional labels to apply to all conjur resources\n+# Additional labels to apply to all postgres-related resources\n postgresLabels: {}\n \n+# Indicates whether the Conjur ClusterRole and ClusterRoleBinding should be\n+# created. This should be set to true, unless there is already a Conjur\n+# deployment in a separate namespace that has already created these\n+# cluster-wide resources.\n rbac:\n   create: true\n \n # Number of Conjur pods to run\n replicaCount: 1\n \n-# We usually recommend not to specify default resources and to leave this as a conscious\n-# choice for the user. This also increases chances charts run on environments with little\n-# resources, such as Minikube. If you do want to specify resources, uncomment the following\n-# lines, adjust them as necessary, and remove the curly braces after 'resources:'.\n+# Conjur container resource limits and requests. It is recommended that\n+# these Conjur-specific limits/requests remain unset, and instead let the\n+# Conjur container resources be constrained by namespace-wide limit ranges\n+# and resource quotas. The namespace-wide resource limitations are\n+# typically set by a cluster administrator to values that make sense for\n+# the host Kubernetes platform.\n+# \n+# If you do want to specify resources, uncomment the following lines, adjust\n+# them as necessary, and remove the curly braces after 'resources:'.\n # limits:\n #  cpu: 100m\n #  memory: 128Mi\n@@ -82,6 +125,14 @@ serviceAccount:\n   name:\n \n ssl:\n+  # Conjur CA certificate and key, and signed certificate and key. These\n+  # should be base64-encoded. If left blank, CA certificate and signed\n+  # certificate will be auto-generated.\n+  caCert: \"\"\n+  caKey: \"\"\n+  cert: \"\"\n+  key: \"\"\n+\n   expiration: 365 # days\n   hostname: \"conjur.myorg.com\"\n   altNames: []\n@@ -92,4 +143,15 @@ test:\n                          # automatically deleted upon test completion,\n                          # regardless of test success or failure.\n \n+serviceAccount:\n+  # Indicates whether Conjur service account should be created or not.\n+  # Typically set to `true`, unless the service account has already been\n+  # created outside of this Helm chart workflow.\n+  create: true\n+  # Suffix to apply to the Conjur service account name.\n+  name:\n+\n+# Tolerations to apply to the Conjur pod to indicate to the Kubernetes\n+# scheduler which nodes should be avoided for Conjur pod placement. See:\n+# https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration\n tolerations: []"
        },
        {
          "filename": "e2e/custom-stuff.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n authenticators: \"authn-k8s/minikube,authn\"\n dataKey: \"GENERATED_DATAKEY\"  # docker run --rm -it cyberark/conjur data-key generate\n-databaseUrl: \"postgres://postgres:PASSWORD@POSTGRES_ENDPOINT/postgres\"\n+database.url: \"postgres://postgres:PASSWORD@POSTGRES_ENDPOINT/postgres\"\n \n image:\n   tag: \"1.0.1-stable\""
        },
        {
          "filename": "e2e/delete-conjur.sh",
          "status": "modified",
          "additions": 24,
          "deletions": 6,
          "patch": "@@ -1,15 +1,19 @@\n-#!/usr/bin/env bash -e\n+#!/usr/bin/env bash\n \n-set -o pipefail\n+set -eo pipefail\n \n-source ../is_helm_v2.sh\n+source ../is-helm-v2.sh\n \n if [ \"$(which jq)\" == \"\" ]; then\n   echo \"ERROR: Could not find jq utility!\"\n   exit 1\n fi\n \n-conjur_releases=$(helm list -c --output=json | jq -r '.Releases[] | select(.Chart | match(\"conjur-oss-.*\")) | .Name')\n+helm_list_args=\"--output=json\"\n+if [ ! -z \"$CONJUR_NAMESPACE\" ]; then\n+  helm_list_args=\"$helm_list_args -n $CONJUR_NAMESPACE\"\n+fi\n+conjur_releases=$(helm list $helm_list_args | jq -r '.[] | select(.chart | match(\"conjur-oss-.*\")) | .name')\n \n if [ \"${conjur_releases}\" == \"\" ]; then\n   echo \"ERROR: Could not find any deployed Conjur releases!\"\n@@ -19,9 +23,23 @@ fi\n for conjur_release in ${conjur_releases}; do\n   echo \"Deleting Conjur release '${conjur_release}'...\"\n   if is_helm_v2; then\n-    helm delete --purge \"${conjur_release}\"\n-  else\n+    helm_del_args=\"$helm_del_args --purge\"\n+  fi\n+  if [ ! -z \"$CONJUR_NAMESPACE\" ]; then\n+    helm_del_args=\"$helm_del_args -n $CONJUR_NAMESPACE\"\n+  fi\n+  if [ -z \"$helm_del_args\" ]; then\n     helm delete \"${conjur_release}\"\n+  else\n+    helm delete $helm_del_args \"${conjur_release}\"\n+  fi\n+  \n+  if [ -z \"$CONJUR_NAMESPACE\" ]; then\n+    kubectl delete secrets --selector=\"release=${conjur_release}\"\n+  else\n+    kubectl delete secrets \\\n+        -n \"$CONJUR_NAMESPACE\" \\\n+        --selector=\"release=${conjur_release}\"\n   fi\n done\n "
        },
        {
          "filename": "e2e/install-conjur-no-pv.sh",
          "status": "modified",
          "additions": 12,
          "deletions": 4,
          "patch": "@@ -1,6 +1,14 @@\n #!/bin/bash -e\n \n-helm install conjur-e2e \\\n-  --set dataKey=\"$(docker run --rm cyberark/conjur data-key generate)\" \\\n-  --set postgres.persistentVolume.create=\"false\" \\\n-  ../conjur-oss\n+data_key=\"$(docker run --rm cyberark/conjur data-key generate)\"\n+helm_args=\"--set dataKey=$data_key \\\n+           --set postgres.persistentVolume.create=false\"\n+\n+if [ ! -z \"$CONJUR_NAMESPACE\" ]; then\n+  if ! kubectl get namespace \"$CONJUR_NAMESPACE\" 2>/dev/null; then\n+    kubectl create namespace \"$CONJUR_NAMESPACE\"\n+  fi\n+  helm_args=\"$helm_args -n $CONJUR_NAMESPACE\"\n+fi\n+\n+helm install $helm_args conjur-e2e ../conjur-oss"
        },
        {
          "filename": "e2e/install-conjur.sh",
          "status": "modified",
          "additions": 11,
          "deletions": 3,
          "patch": "@@ -1,5 +1,13 @@\n #!/bin/bash -e\n \n-helm install conjur-e2e \\\n-  --set dataKey=\"$(docker run --rm cyberark/conjur data-key generate)\" \\\n-  ../conjur-oss\n+data_key=\"$(docker run --rm cyberark/conjur data-key generate)\"\n+helm_args=\"--set dataKey=$data_key\"\n+\n+if [ ! -z \"$CONJUR_NAMESPACE\" ]; then\n+  if ! kubectl get namespace \"$CONJUR_NAMESPACE\" 2>/dev/null; then\n+    kubectl create namespace \"$CONJUR_NAMESPACE\"\n+  fi\n+  helm_args=\"$helm_args -n $CONJUR_NAMESPACE\"\n+fi\n+\n+helm install $helm_args conjur-e2e ../conjur-oss"
        },
        {
          "filename": "e2e/install-helm.sh",
          "status": "removed",
          "additions": 0,
          "deletions": 5,
          "patch": "@@ -1,5 +0,0 @@\n-#!/bin/bash -e\n-\n-kubectl create -f rbac-config.yaml\n-\n-helm init --service-account tiller"
        },
        {
          "filename": "e2e/rbac-config.yaml",
          "status": "removed",
          "additions": 0,
          "deletions": 18,
          "patch": "@@ -1,18 +0,0 @@\n-apiVersion: v1\n-kind: ServiceAccount\n-metadata:\n-  name: tiller\n-  namespace: kube-system\n----\n-apiVersion: rbac.authorization.k8s.io/v1\n-kind: ClusterRoleBinding\n-metadata:\n-  name: tiller\n-roleRef:\n-  apiGroup: rbac.authorization.k8s.io\n-  kind: ClusterRole\n-  name: cluster-admin\n-subjects:\n-  - kind: ServiceAccount\n-    name: tiller\n-    namespace: kube-system"
        },
        {
          "filename": "helm-upgrade.sh",
          "status": "added",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -0,0 +1,31 @@\n+#!/bin/bash\n+\n+set -eo pipefail\n+\n+# USAGE:\n+#      ./helm_upgrade.sh [set-chart-values-arguments]\n+#\n+# Note that for helm upgrades, any settings for the following chart values\n+# will be ignored:\n+#      dataKey\n+#      database.password\n+#      database.url\n+# since these values (and their Kubernetes respective secrets) will remain\n+# unchanged across Helm upgrades.\n+\n+# For Helm upgrade operations, the --reuse-values command line flag must\n+# be used in order to preserve any non-default values that were used\n+# during helm install.\n+#\n+# Also, force the recreation of pods, since Helm isn't aware that pods need\n+# to be started e.g. for when configmaps or secrets are changed.\n+HELM_ARGS=\"$@ --reuse-values --recreate-pods\"\n+\n+if [ ! -z \"$CONJUR_NAMESPACE\" ]; then\n+  HELM_ARGS=\"$HELM_ARGS -n $CONJUR_NAMESPACE\"\n+fi\n+\n+# Find the helm release (it will contain 'conjur-oss-' in its chart name)\n+helm_release=$(helm list --output=json | jq -r '.[] | select(.chart | match(\"conjur-oss-.*\")) | .name')\n+\n+helm upgrade $HELM_ARGS $helm_release ./conjur-oss"
        },
        {
          "filename": "is-helm-v2.sh",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "run.sh",
          "status": "modified",
          "additions": 20,
          "deletions": 8,
          "patch": "@@ -1,18 +1,30 @@\n-#!/bin/bash -e\n+#!/bin/bash\n \n-source ./is_helm_v2.sh\n+set -eo pipefail\n \n-HELM_ARGS=\"$@\"\n+source ./is-helm-v2.sh\n+\n+HELM_RELEASE=${HELM_RELEASE:-conjur-oss}\n \n if [ -z \"$HELM_ARGS\" ]; then\n+  # Generate database data-key\n   data_key=\"$(docker run --rm cyberark/conjur data-key generate)\"\n-  HELM_ARGS=\"--set dataKey=$data_key\"\n+  HELM_ARGS=\"$@ --set dataKey=$data_key\"\n+\n+  if is_helm_v2; then\n+    echo \"Helm version is 2\"\n+    HELM_ARGS=\"$HELM_ARGS --name $HELM_RELEASE\"\n+  else\n+    echo \"Helm version is 3 or newer\"\n+    HELM_ARGS=\"$HELM_ARGS $HELM_RELEASE\"\n+  fi\n fi\n \n-if is_helm_v2; then\n-    HELM_ARGS=\"$HELM_ARGS --name conjur-oss\"\n-else\n-    HELM_ARGS=\"$HELM_ARGS conjur-oss\"\n+if [ ! -z \"$CONJUR_NAMESPACE\" ]; then\n+  if ! kubectl get namespace \"$CONJUR_NAMESPACE\" 2>/dev/null; then\n+    kubectl create namespace \"$CONJUR_NAMESPACE\"\n+  fi\n+  HELM_ARGS=\"$HELM_ARGS -n $CONJUR_NAMESPACE\"\n fi\n \n helm install $HELM_ARGS ./conjur-oss"
        },
        {
          "filename": "test-minimal.sh",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n #!/bin/bash -e\n \n-source ./is_helm_v2.sh\n+source ./is-helm-v2.sh\n \n # This script runs the minimal helm test, without relies on external load\n # balancers or persistent volumes. This is suitable for environment where"
        },
        {
          "filename": "test.sh",
          "status": "modified",
          "additions": 30,
          "deletions": 5,
          "patch": "@@ -1,6 +1,8 @@\n-#!/bin/bash -e\n+#!/bin/bash\n \n-source ./is_helm_v2.sh\n+set -eo pipefail\n+\n+source ./is-helm-v2.sh\n \n # Run Helm test\n #\n@@ -24,6 +26,8 @@ source ./is_helm_v2.sh\n #                         Defaults to false.\n #   HELM_INSTALL_TIMEOUT: Helm install timeout. Defaults to `900` for\n #                         Helm V2 and `900s` for newer versions of Helm.\n+#   CONJUR_NAMESPACE:     Namespace to use for Conjur deployment. The\n+#                         namespace is created if it doesn't exist.\n \n # Command line arguments for this script are passed to `helm test`.\n HELM_TEST_ARGS=\"$@\"\n@@ -47,19 +51,36 @@ fi\n # of the helm test.\n if is_helm_v2; then\n   HELM_TEST_ARGS=\"${HELM_TEST_ARGS} --cleanup\"\n+  HELM_DEL_ARGS=\"${HELM_DEL_ARGS} --purge\"\n+fi\n+\n+if [ ! -z \"$CONJUR_NAMESPACE\" ]; then\n+  if ! kubectl get namespace \"$CONJUR_NAMESPACE\" 2>/dev/null; then\n+    kubectl create namespace \"$CONJUR_NAMESPACE\"\n+  fi\n+  HELM_INSTALL_ARGS=\"${HELM_INSTALL_ARGS} -n $CONJUR_NAMESPACE\"\n+  HELM_TEST_ARGS=\"${HELM_TEST_ARGS} -n $CONJUR_NAMESPACE\"\n+  HELM_DEL_ARGS=\"${HELM_DEL_ARGS} -n $CONJUR_NAMESPACE\"\n fi\n \n RELEASE_NAME=\"helm-chart-test-$(date -u +%Y%m%d-%H%M%S)\"\n+DATABASE_USER=\"postgres\"\n+DATABASE_PASSWORD=\"postgres-password\"\n \n function delete_release() {\n   echo \"==========================================\"\n   echo \"Deleting Conjur Helm release $RELEASE_NAME\"\n   echo \"==========================================\"\n-  if is_helm_v2; then\n-    helm del --purge \"$RELEASE_NAME\"\n+  if [ ! -z \"HELM_DEL_ARGS\" ]; then \n+    helm del \"$HELM_DEL_ARGS \" \"$RELEASE_NAME\"\n   else\n     helm del \"$RELEASE_NAME\"\n   fi\n+  if [ -z \"$CONJUR_NAMESPACE\" ]; then\n+    kubectl delete secrets --selector=release=$RELEASE_NAME\n+  else\n+    kubectl delete secrets -n \"$CONJUR_NAMESPACE\" --selector=release=$RELEASE_NAME\n+  fi\n }\n \n echo \"=======================================================\"\n@@ -89,5 +110,9 @@ helm test $HELM_TEST_ARGS \"$RELEASE_NAME\"\n \n if  [[ (! is_helm_v2) && (\"$HELM_TEST_LOGGING\" == true) ]]; then\n   # Test pod log has been displayed, so it's safe to delete the test pod.\n-  kubectl delete pod -l release=\"$RELEASE_NAME\"\n+  if [ -z \"$CONJUR_NAMESPACE\" ]; then\n+    kubectl delete pod -l release=\"$RELEASE_NAME\"\n+  else\n+    kubectl delete pod -n \"$CONJUR_NAMESPACE\" -l release=\"$RELEASE_NAME\"\n+  fi\n fi"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b1d3c385389ab0b142808db2103490cd6ce89f25",
            "date": "2023-08-30T17:17:25Z",
            "author_login": "john-odonnell"
          },
          {
            "sha": "597347349a1710f0063955665e9094d9b5315ccb",
            "date": "2023-08-30T13:15:59Z",
            "author_login": "john-odonnell"
          },
          {
            "sha": "2ed53cfd7f2c6efb956ffca4b11eaf4b56fe63c1",
            "date": "2023-08-29T22:43:52Z",
            "author_login": "john-odonnell"
          },
          {
            "sha": "9bcaff4aaf7ad5afb08905ffd8c91d71bb05fc6e",
            "date": "2023-05-11T19:08:15Z",
            "author_login": "juniortaeza"
          },
          {
            "sha": "9f1d51a5d8bd1112be604eb5d1be06971a86ee7d",
            "date": "2023-05-10T18:05:41Z",
            "author_login": "juniortaeza"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-284",
    "description": "In Conjur OSS Helm Chart before 2.0.0, a recently identified critical vulnerability resulted in the installation of the Conjur Postgres database with an open port. This allows an attacker to gain full read & write access to the Conjur Postgres database, including escalating the attacker's privileges to assume full control. A malicious actor who knows the IP address and port number of the Postgres database and has access into the Kubernetes cluster where Conjur runs can gain full read & write access to the Postgres database. This enables the attacker to write a policy that allows full access to retrieve any secret. This Helm chart is a method to install Conjur OSS into a Kubernetes environment. Hence, the systems impacted are only Conjur OSS systems that were deployed using this chart. Other deployments including Docker and the CyberArk Dynamic Access Provider (DAP) are not affected. To remediate this vulnerability, clone the latest Helm Chart and follow the upgrade instructions. If you are not able to fully remediate this vulnerability immediately, you can mitigate some of the risk by making sure Conjur OSS is deployed on an isolated Kubernetes cluster or namespace. The term \"isolated\" refers to: - No other workloads besides Conjur OSS and its backend database are running in that Kubernetes cluster/namespace. - Kubernetes and helm access to the cluster/namespace is limited to security administrators via Role-Based Access Control (RBAC).",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-06-22T16:15:11.650",
    "last_modified": "2024-11-21T05:32:14.537",
    "fix_date": "2020-06-18T17:59:55Z"
  },
  "references": [
    {
      "url": "https://github.com/cyberark/conjur-oss-helm-chart/commit/2dab801ed4ab591c626fc6674f306fcf0d004c1e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cyberark/conjur-oss-helm-chart/security/advisories/GHSA-mg2m-623j-wpxw",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cyberark/conjur-oss-helm-chart/commit/2dab801ed4ab591c626fc6674f306fcf0d004c1e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cyberark/conjur-oss-helm-chart/security/advisories/GHSA-mg2m-623j-wpxw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.866018",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "conjur-oss-helm-chart",
    "owner": "cyberark",
    "created_at": "2018-07-23T17:25:57Z",
    "updated_at": "2024-10-14T21:57:15Z",
    "pushed_at": "2023-10-17T17:53:51Z",
    "size": 311,
    "stars": 28,
    "forks": 23,
    "open_issues": 31,
    "watchers": 28,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "152-add-sample-validator-ids",
      "159-fix-rbac-deprec-warn",
      "atlantis-migration",
      "fix-conjur-ns-in-example",
      "fix-fips",
      "fix-gh-actions",
      "jwt-edge-image",
      "main",
      "master",
      "poc-openshift",
      "postgres-subchart",
      "rev-proxy-selectable",
      "upgrade-pipeline-branch"
    ],
    "languages": {
      "Shell": 15923,
      "Mustache": 3582,
      "Dockerfile": 1313
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:25:03.358849"
  }
}