{
  "cve_id": "CVE-2020-4074",
  "github_data": {
    "repository": "PrestaShop/PrestaShop",
    "fix_commit": "30b6a7bdaca9cb940d3ce462906dbb062499fc30",
    "related_commits": [
      "30b6a7bdaca9cb940d3ce462906dbb062499fc30",
      "30b6a7bdaca9cb940d3ce462906dbb062499fc30"
    ],
    "patch_url": "https://github.com/PrestaShop/PrestaShop/commit/30b6a7bdaca9cb940d3ce462906dbb062499fc30.patch",
    "fix_commit_details": {
      "sha": "30b6a7bdaca9cb940d3ce462906dbb062499fc30",
      "commit_date": "2020-06-29T12:20:40Z",
      "author": {
        "login": "matks",
        "type": "User",
        "stats": {
          "total_commits": 2114,
          "average_weekly_commits": 2.9401947148817804,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 261
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-ccvh-jh5x-mpg4",
        "length": 68,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 410,
        "additions": 404,
        "deletions": 6
      },
      "files": [
        {
          "filename": "classes/Context.php",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -359,6 +359,8 @@ public function updateCustomer(Customer $customer)\n         $this->cookie->id_cart = (int) $this->cart->id;\n         $this->cookie->write();\n         $this->cart->autosetProductAddress();\n+\n+        $this->cookie->registerSession(new CustomerSession());\n     }\n \n     /**"
        },
        {
          "filename": "classes/Cookie.php",
          "status": "modified",
          "additions": 91,
          "deletions": 1,
          "patch": "@@ -24,6 +24,8 @@\n  * International Registered Trademark & Property of PrestaShop SA\n  */\n use Defuse\\Crypto\\Key;\n+use PrestaShop\\PrestaShop\\Core\\Exception\\CoreException;\n+use PrestaShop\\PrestaShop\\Core\\Session\\SessionInterface;\n \n class CookieCore\n {\n@@ -246,7 +248,8 @@ public function isLoggedBack()\n      */\n     public function logout()\n     {\n-        $this->_content = array();\n+        $this->deleteSession();\n+        $this->_content = [];\n         $this->encryptAndSetCookie();\n         unset($_COOKIE[$this->_name]);\n         $this->_modified = true;\n@@ -453,4 +456,91 @@ public function exists()\n     {\n         return isset($_COOKIE[$this->_name]);\n     }\n+\n+    /**\n+     * Register a new session\n+     *\n+     * @param SessionInterface $session\n+     */\n+    public function registerSession(SessionInterface $session)\n+    {\n+        if (isset($this->id_employee)) {\n+            $session->setUserId((int) $this->id_employee);\n+        } elseif (isset($this->id_customer)) {\n+            $session->setUserId((int) $this->id_customer);\n+        } else {\n+            throw new CoreException('Invalid user id');\n+        }\n+\n+        $session->setToken(sha1(time() . uniqid()));\n+        $session->add();\n+\n+        $this->session_id = $session->getId();\n+        $this->session_token = $session->getToken();\n+    }\n+\n+    /**\n+     * Delete session\n+     *\n+     * @return bool\n+     */\n+    public function deleteSession()\n+    {\n+        if (!isset($this->session_id)) {\n+            return false;\n+        }\n+\n+        $session = $this->getSession($this->session_id);\n+        if ($session !== null) {\n+            $session->delete();\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Check if this session is still alive\n+     *\n+     * @return bool\n+     */\n+    public function isSessionAlive()\n+    {\n+        if (!isset($this->session_id, $this->session_token)) {\n+            return false;\n+        }\n+\n+        $session = $this->getSession($this->session_id);\n+\n+        return\n+            $session !== null\n+            && $session->getToken() === $this->session_token\n+            && (\n+                (int) $this->id_employee === $session->getUserId()\n+                || (int) $this->id_customer === $session->getUserId()\n+            )\n+        ;\n+    }\n+\n+    /**\n+     * Retrieve session based on a session id and the employee or\n+     * customer id\n+     *\n+     * @return SessionInterface|null\n+     */\n+    public function getSession($sessionId)\n+    {\n+        if (isset($this->id_employee)) {\n+            $session = new EmployeeSession($sessionId);\n+        } elseif (isset($this->id_customer)) {\n+            $session = new CustomerSession($sessionId);\n+        }\n+\n+        if (!empty($session->getId())) {\n+            return $session;\n+        }\n+\n+        return null;\n+    }\n }"
        },
        {
          "filename": "classes/Customer.php",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -1187,7 +1187,13 @@ public function isLogged($withGuest = false)\n         }\n \n         /* Customer is valid only if it can be load and if object password is the same as database one */\n-        return $this->logged == 1 && $this->id && Validate::isUnsignedId($this->id) && Customer::checkPassword($this->id, $this->passwd);\n+        return\n+            $this->logged == 1\n+            && $this->id\n+            && Validate::isUnsignedId($this->id)\n+            && Customer::checkPassword($this->id, $this->passwd)\n+            && Context::getContext()->cookie->isSessionAlive()\n+        ;\n     }\n \n     /**"
        },
        {
          "filename": "classes/CustomerSession.php",
          "status": "added",
          "additions": 89,
          "deletions": 0,
          "patch": "@@ -0,0 +1,89 @@\n+<?php\n+/**\n+ * 2007-2020 PrestaShop SA and Contributors\n+ *\n+ * NOTICE OF LICENSE\n+ *\n+ * This source file is subject to the Open Software License (OSL 3.0)\n+ * that is bundled with this package in the file LICENSE.txt.\n+ * It is also available through the world-wide-web at this URL:\n+ * https://opensource.org/licenses/OSL-3.0\n+ * If you did not receive a copy of the license and are unable to\n+ * obtain it through the world-wide-web, please send an email\n+ * to license@prestashop.com so we can send you a copy immediately.\n+ *\n+ * DISCLAIMER\n+ *\n+ * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n+ * versions in the future. If you wish to customize PrestaShop for your\n+ * needs please refer to https://www.prestashop.com for more information.\n+ *\n+ * @author    PrestaShop SA <contact@prestashop.com>\n+ * @copyright 2007-2020 PrestaShop SA and Contributors\n+ * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n+ * International Registered Trademark & Property of PrestaShop SA\n+ */\n+use PrestaShop\\PrestaShop\\Core\\Session\\SessionInterface;\n+\n+class CustomerSessionCore extends ObjectModel implements SessionInterface\n+{\n+    public $id;\n+\n+    /** @var Id Customer */\n+    public $id_customer;\n+\n+    /** @var string Token */\n+    public $token;\n+\n+    /**\n+     * @see ObjectModel::$definition\n+     */\n+    public static $definition = [\n+        'table' => 'customer_session',\n+        'primary' => 'id_customer_session',\n+        'fields' => [\n+            'id_customer' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => true],\n+            'token' => ['type' => self::TYPE_STRING, 'validate' => 'isSha1', 'size' => 40, 'copy_post' => false],\n+        ],\n+    ];\n+\n+    /**\n+     * {@inheritdoc}\n+     */\n+    public function getId()\n+    {\n+        return $this->id;\n+    }\n+\n+    /**\n+     * {@inheritdoc}\n+     */\n+    public function setUserId($idCustomer)\n+    {\n+        $this->id_customer = (int) $idCustomer;\n+    }\n+\n+    /**\n+     * {@inheritdoc}\n+     */\n+    public function getUserId()\n+    {\n+        return (int) $this->id_customer;\n+    }\n+\n+    /**\n+     * {@inheritdoc}\n+     */\n+    public function setToken($token)\n+    {\n+        $this->token = (string) $token;\n+    }\n+\n+    /**\n+     * {@inheritdoc}\n+     */\n+    public function getToken()\n+    {\n+        return $this->token;\n+    }\n+}"
        },
        {
          "filename": "classes/Employee.php",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -480,8 +480,16 @@ public function isLoggedBack()\n         if (!Cache::isStored('isLoggedBack' . $this->id)) {\n             /* Employee is valid only if it can be load and if cookie password is the same as database one */\n             $result = (\n-                $this->id && Validate::isUnsignedId($this->id) && Context::getContext()->cookie && Employee::checkPassword($this->id, Context::getContext()->cookie->passwd)\n-                    && (!isset(Context::getContext()->cookie->remote_addr) || Context::getContext()->cookie->remote_addr == ip2long(Tools::getRemoteAddr()) || !Configuration::get('PS_COOKIE_CHECKIP'))\n+                $this->id\n+                && Validate::isUnsignedId($this->id)\n+                && Context::getContext()->cookie\n+                && Context::getContext()->cookie->isSessionAlive()\n+                && Employee::checkPassword($this->id, Context::getContext()->cookie->passwd)\n+                && (\n+                    !isset(Context::getContext()->cookie->remote_addr)\n+                    || Context::getContext()->cookie->remote_addr == ip2long(Tools::getRemoteAddr())\n+                    || !Configuration::get('PS_COOKIE_CHECKIP')\n+                )\n             );\n             Cache::store('isLoggedBack' . $this->id, $result);\n \n@@ -500,6 +508,7 @@ public function logout()\n             Context::getContext()->cookie->logout();\n             Context::getContext()->cookie->write();\n         }\n+\n         $this->id = null;\n     }\n "
        },
        {
          "filename": "classes/EmployeeSession.php",
          "status": "added",
          "additions": 89,
          "deletions": 0,
          "patch": "@@ -0,0 +1,89 @@\n+<?php\n+/**\n+ * 2007-2020 PrestaShop SA and Contributors\n+ *\n+ * NOTICE OF LICENSE\n+ *\n+ * This source file is subject to the Open Software License (OSL 3.0)\n+ * that is bundled with this package in the file LICENSE.txt.\n+ * It is also available through the world-wide-web at this URL:\n+ * https://opensource.org/licenses/OSL-3.0\n+ * If you did not receive a copy of the license and are unable to\n+ * obtain it through the world-wide-web, please send an email\n+ * to license@prestashop.com so we can send you a copy immediately.\n+ *\n+ * DISCLAIMER\n+ *\n+ * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n+ * versions in the future. If you wish to customize PrestaShop for your\n+ * needs please refer to https://www.prestashop.com for more information.\n+ *\n+ * @author    PrestaShop SA <contact@prestashop.com>\n+ * @copyright 2007-2020 PrestaShop SA and Contributors\n+ * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n+ * International Registered Trademark & Property of PrestaShop SA\n+ */\n+use PrestaShop\\PrestaShop\\Core\\Session\\SessionInterface;\n+\n+class EmployeeSessionCore extends ObjectModel implements SessionInterface\n+{\n+    public $id;\n+\n+    /** @var int Id Employee */\n+    public $id_employee;\n+\n+    /** @var string Token */\n+    public $token;\n+\n+    /**\n+     * @see ObjectModel::$definition\n+     */\n+    public static $definition = [\n+        'table' => 'employee_session',\n+        'primary' => 'id_employee_session',\n+        'fields' => [\n+            'id_employee' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId', 'required' => true],\n+            'token' => ['type' => self::TYPE_STRING, 'validate' => 'isSha1', 'size' => 40, 'copy_post' => false],\n+        ],\n+    ];\n+\n+    /**\n+     * {@inheritdoc}\n+     */\n+    public function getId()\n+    {\n+        return $this->id;\n+    }\n+\n+    /**\n+     * {@inheritdoc}\n+     */\n+    public function setUserId($idEmployee)\n+    {\n+        $this->id_employee = (int) $idEmployee;\n+    }\n+\n+    /**\n+     * {@inheritdoc}\n+     */\n+    public function getUserId()\n+    {\n+        return (int) $this->id_employee;\n+    }\n+\n+    /**\n+     * {@inheritdoc}\n+     */\n+    public function setToken($token)\n+    {\n+        $this->token = (string) $token;\n+    }\n+\n+    /**\n+     * {@inheritdoc}\n+     */\n+    public function getToken()\n+    {\n+        return $this->token;\n+    }\n+}"
        },
        {
          "filename": "classes/form/CustomerPersister.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -55,9 +55,9 @@ public function save(Customer $customer, $clearTextPassword, $newPassword = '',\n     {\n         if ($customer->id) {\n             return $this->update($customer, $clearTextPassword, $newPassword, $passwordRequired);\n-        } else {\n-            return $this->create($customer, $clearTextPassword);\n         }\n+\n+        return $this->create($customer, $clearTextPassword);\n     }\n \n     private function update(Customer $customer, $clearTextPassword, $newPassword, $passwordRequired = true)"
        },
        {
          "filename": "controllers/admin/AdminLoginController.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -213,6 +213,7 @@ public function processLogin()\n                 $cookie->profile = $this->context->employee->id_profile;\n                 $cookie->passwd = $this->context->employee->passwd;\n                 $cookie->remote_addr = $this->context->employee->remote_addr;\n+                $cookie->registerSession(new EmployeeSession());\n \n                 if (!Tools::getValue('stay_logged_in')) {\n                     $cookie->last_activity = time();"
        },
        {
          "filename": "install-dev/data/db_structure.sql",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -2829,3 +2829,17 @@ CREATE TABLE IF NOT EXISTS `PREFIX_cms_role_lang` (\n     `id_cms_role`, `id_lang`, id_shop\n   )\n ) ENGINE=ENGINE_TYPE DEFAULT CHARSET=utf8;\n+\n+CREATE TABLE `PREFIX_employee_session` (\n+  `id_employee_session` int(11) unsigned NOT NULL auto_increment,\n+  `id_employee` int(10) unsigned DEFAULT NULL,\n+  `token` varchar(40) DEFAULT NULL,\n+  PRIMARY KEY `id_employee_session` (`id_employee_session`)\n+) ENGINE=ENGINE_TYPE DEFAULT CHARSET=utf8 COLLATION;\n+\n+CREATE TABLE `PREFIX_customer_session` (\n+  `id_customer_session` int(11) unsigned NOT NULL auto_increment,\n+  `id_customer` int(10) unsigned DEFAULT NULL,\n+  `token` varchar(40) DEFAULT NULL,\n+  PRIMARY KEY `id_customer_session` (`id_customer_session`)\n+) ENGINE=ENGINE_TYPE DEFAULT CHARSET=utf8 COLLATION;"
        },
        {
          "filename": "install-dev/upgrade/sql/1.7.6.6.sql",
          "status": "added",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -0,0 +1,16 @@\n+SET SESSION sql_mode='';\n+SET NAMES 'utf8';\n+\n+CREATE TABLE `PREFIX_employee_session` (\n+  `id_employee_session` int(11) unsigned NOT NULL auto_increment,\n+  `id_employee` int(10) unsigned DEFAULT NULL,\n+  `token` varchar(40) DEFAULT NULL,\n+  PRIMARY KEY `id_employee_session` (`id_employee_session`)\n+) ENGINE=ENGINE_TYPE DEFAULT CHARSET=utf8 COLLATION;\n+\n+CREATE TABLE `PREFIX_customer_session` (\n+  `id_customer_session` int(11) unsigned NOT NULL auto_increment,\n+  `id_customer` int(10) unsigned DEFAULT NULL,\n+  `token` varchar(40) DEFAULT NULL,\n+  PRIMARY KEY `id_customer_session` (`id_customer_session`)\n+) ENGINE=ENGINE_TYPE DEFAULT CHARSET=utf8 COLLATION;"
        },
        {
          "filename": "src/Core/Session/SessionInterface.php",
          "status": "added",
          "additions": 82,
          "deletions": 0,
          "patch": "@@ -0,0 +1,82 @@\n+<?php\n+/**\n+ * 2007-2020 PrestaShop SA and Contributors\n+ *\n+ * NOTICE OF LICENSE\n+ *\n+ * This source file is subject to the Open Software License (OSL 3.0)\n+ * that is bundled with this package in the file LICENSE.txt.\n+ * It is also available through the world-wide-web at this URL:\n+ * https://opensource.org/licenses/OSL-3.0\n+ * If you did not receive a copy of the license and are unable to\n+ * obtain it through the world-wide-web, please send an email\n+ * to license@prestashop.com so we can send you a copy immediately.\n+ *\n+ * DISCLAIMER\n+ *\n+ * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n+ * versions in the future. If you wish to customize PrestaShop for your\n+ * needs please refer to https://www.prestashop.com for more information.\n+ *\n+ * @author    PrestaShop SA <contact@prestashop.com>\n+ * @copyright 2007-2020 PrestaShop SA and Contributors\n+ * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n+ * International Registered Trademark & Property of PrestaShop SA\n+ */\n+\n+namespace PrestaShop\\PrestaShop\\Core\\Session;\n+\n+/**\n+ * SessionInterface is used to store/access to the session token used by customers and employees\n+ */\n+interface SessionInterface\n+{\n+    /**\n+     * Returns session id\n+     *\n+     * @return int\n+     */\n+    public function getId();\n+\n+    /**\n+     * Set session user id\n+     *\n+     * @param int $id\n+\n+     * @return void\n+     */\n+    public function setUserId($id);\n+\n+    /**\n+     * Returns session user id\n+     *\n+     * @return int\n+     */\n+    public function getUserId();\n+\n+    /**\n+     * Set session token\n+     *\n+     * @param string $string\n+     *\n+     * @return void\n+     */\n+    public function setToken($string);\n+\n+    /**\n+     * Returns session token\n+     *\n+     * @return string\n+     */\n+    public function getToken();\n+\n+    /**\n+     * Adds current object to the database.\n+     */\n+    public function add();\n+\n+    /**\n+     * Deletes current object from database.\n+     */\n+    public function delete();\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ec433fcf5603cc11c33b8ce76940ffca39dfa7ab",
            "date": "2025-01-14T08:52:42Z",
            "author_login": "Progi1984"
          },
          {
            "sha": "2efb789589029b6a04a5a629ba45b71b8f37fd6c",
            "date": "2025-01-13T16:37:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "18e642c26a83c05e0a67b05c86385afd070b68fb",
            "date": "2025-01-13T16:11:19Z",
            "author_login": "Progi1984"
          },
          {
            "sha": "9641d8eca066dce510c61ff7298ee98a77f8bf3d",
            "date": "2025-01-13T16:08:47Z",
            "author_login": "Progi1984"
          },
          {
            "sha": "aca73a664e3f3b5873379124794b41d49741ab2e",
            "date": "2025-01-13T06:36:38Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:L",
    "cwe_id": "CWE-287",
    "description": "In PrestaShop from version 1.5.0.0 and before version 1.7.6.6, the authentication system is malformed and an attacker is able to forge requests and execute admin commands. The problem is fixed in 1.7.6.6.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-07-02T17:15:12.763",
    "last_modified": "2024-11-21T05:32:15.397",
    "fix_date": "2020-06-29T12:20:40Z"
  },
  "references": [
    {
      "url": "https://github.com/PrestaShop/PrestaShop/commit/30b6a7bdaca9cb940d3ce462906dbb062499fc30",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-ccvh-jh5x-mpg4",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/PrestaShop/PrestaShop/commit/30b6a7bdaca9cb940d3ce462906dbb062499fc30",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-ccvh-jh5x-mpg4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:01.353135",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "PrestaShop",
    "owner": "PrestaShop",
    "created_at": "2012-11-19T16:41:31Z",
    "updated_at": "2025-01-14T08:52:52Z",
    "pushed_at": "2025-01-14T09:09:53Z",
    "size": 763335,
    "stars": 8320,
    "forks": 4829,
    "open_issues": 2738,
    "watchers": 8320,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "1.7.7.x",
      "1.7.8.x",
      "8.0.x",
      "8.1.x",
      "8.2.x",
      "9.0.x",
      "develop"
    ],
    "languages": {
      "PHP": 29053069,
      "TypeScript": 9773631,
      "Gherkin": 2649810,
      "Twig": 2491625,
      "HTML": 1695839,
      "JavaScript": 1449413,
      "Smarty": 993383,
      "SCSS": 499157,
      "Vue": 331001,
      "CSS": 163083,
      "Less": 19680,
      "Shell": 15677,
      "Makefile": 1814,
      "Dockerfile": 1141
    },
    "commit_activity": {
      "total_commits_last_year": 3038,
      "avg_commits_per_week": 58.42307692307692,
      "days_active_last_year": 281
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:11:29.329599"
  }
}