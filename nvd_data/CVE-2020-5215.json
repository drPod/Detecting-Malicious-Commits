{
  "cve_id": "CVE-2020-5215",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "5ac1b9e24ff6afc465756edf845d2e9660bd34bf",
    "related_commits": [
      "5ac1b9e24ff6afc465756edf845d2e9660bd34bf",
      "5ac1b9e24ff6afc465756edf845d2e9660bd34bf"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "5ac1b9e24ff6afc465756edf845d2e9660bd34bf",
      "commit_date": "2019-12-20T23:33:46Z",
      "author": {
        "login": "mihaimaruseac",
        "type": "User",
        "stats": {
          "total_commits": 1591,
          "average_weekly_commits": 3.300829875518672,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 215
        }
      },
      "commit_message": {
        "title": "Fix segfault when attempting to convert string to float16.",
        "length": 224,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 107,
        "additions": 95,
        "deletions": 12
      },
      "files": [
        {
          "filename": "tensorflow/python/BUILD",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -1839,6 +1839,17 @@ py_library(\n     ],\n )\n \n+tf_py_test(\n+    name = \"framework_constant_op_test\",\n+    size = \"small\",\n+    srcs = [\"framework/constant_op_test.py\"],\n+    main = \"framework/constant_op_test.py\",\n+    python_version = \"PY3\",\n+    deps = [\n+        \":constant_op\",\n+    ],\n+)\n+\n tf_py_test(\n     name = \"framework_registry_test\",\n     size = \"small\","
        },
        {
          "filename": "tensorflow/python/framework/constant_op_test.py",
          "status": "added",
          "additions": 61,
          "deletions": 0,
          "patch": "@@ -0,0 +1,61 @@\n+# Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ==============================================================================\n+\"\"\"Tests for tensorflow.python.framework.constant_op.\"\"\"\n+\n+from __future__ import absolute_import\n+from __future__ import division\n+from __future__ import print_function\n+\n+from absl.testing import parameterized\n+\n+from tensorflow.python.framework import constant_op\n+from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import ops\n+from tensorflow.python.platform import test\n+\n+\n+class ConstantOpTest(test.TestCase, parameterized.TestCase):\n+\n+  @parameterized.parameters(\n+      dtypes.bfloat16,\n+      dtypes.complex128,\n+      dtypes.complex64,\n+      dtypes.double,\n+      dtypes.float16,\n+      dtypes.float32,\n+      dtypes.float64,\n+      dtypes.half,\n+      dtypes.int16,\n+      dtypes.int32,\n+      dtypes.int64,\n+      dtypes.int8,\n+      dtypes.qint16,\n+      dtypes.qint32,\n+      dtypes.qint8,\n+      dtypes.quint16,\n+      dtypes.quint8,\n+      dtypes.uint16,\n+      dtypes.uint32,\n+      dtypes.uint64,\n+      dtypes.uint8,\n+  )\n+  def test_convert_string_to_number(self, dtype):\n+    with self.assertRaises(TypeError):\n+      constant_op.constant(\"hello\", dtype)\n+\n+\n+if __name__ == \"__main__\":\n+  ops.enable_eager_execution()\n+  test.main()"
        },
        {
          "filename": "tensorflow/python/lib/core/py_seq_tensor.cc",
          "status": "modified",
          "additions": 23,
          "deletions": 12,
          "patch": "@@ -21,6 +21,7 @@ limitations under the License.\n #include \"tensorflow/core/lib/core/errors.h\"\n #include \"tensorflow/core/lib/core/stringpiece.h\"\n #include \"tensorflow/core/lib/strings/str_util.h\"\n+#include \"tensorflow/core/platform/macros.h\"\n #include \"tensorflow/core/platform/types.h\"\n #include \"tensorflow/python/lib/core/numpy.h\"\n #include \"tensorflow/python/lib/core/py_util.h\"\n@@ -396,6 +397,21 @@ typedef Converter<int32> Int32Converter;\n \n // Floating-point support\n \n+// Returns `true` if `out` overflows when converted from `as_double`.\n+template <class T>\n+static inline bool CheckForOverflow(double as_double, T* out) {\n+  return (sizeof(T) < sizeof(double) && std::isinf(*out) &&\n+          std::isfinite(as_double));\n+}\n+\n+// There is no `std::isinf` that takes `Eigen::half` as argument but Eigen\n+// provides `Eigen::half_impl::isinf` instead.\n+template <>\n+inline bool CheckForOverflow<Eigen::half>(double as_double, Eigen::half* out) {\n+  return (sizeof(Eigen::half) < sizeof(double) &&\n+          Eigen::half_impl::isinf(*out) && std::isfinite(as_double));\n+}\n+\n template <class T>\n static const char* ConvertOneFloat(PyObject* v, T* out) {\n   if (PyErr_Occurred()) {\n@@ -405,20 +421,19 @@ static const char* ConvertOneFloat(PyObject* v, T* out) {\n     const double as_double = PyFloat_AS_DOUBLE(v);\n     *out = static_cast<T>(as_double);\n     // Check for overflow\n-    if (TF_PREDICT_FALSE(sizeof(T) < sizeof(double) && std::isinf(*out) &&\n-                         std::isfinite(as_double))) {\n+    if (TF_PREDICT_FALSE(CheckForOverflow<T>(as_double, out))) {\n       return ErrorOutOfRangeDouble;\n     }\n     return nullptr;\n   }\n #if PY_MAJOR_VERSION < 3\n   if (PyInt_Check(v)) {\n-    *out = PyInt_AS_LONG(v);\n+    *out = static_cast<T>(PyInt_AS_LONG(v));\n     return nullptr;\n   }\n #endif\n   if (PyLong_Check(v)) {\n-    *out = PyLong_AsDouble(v);\n+    *out = static_cast<T>(PyLong_AsDouble(v));\n     if (PyErr_Occurred()) return ErrorOutOfRangeDouble;\n     return nullptr;\n   }\n@@ -467,13 +482,7 @@ struct ConverterTraits<Eigen::half> {\n   static const tensorflow::DataType kTypeEnum = DT_HALF;\n \n   static const char* ConvertScalar(PyObject* v, Eigen::half* out) {\n-    // NOTE(nareshmodi): Is there a way to convert to C double without the\n-    // intermediate Python double? This will help with ConvertOneFloat as well.\n-    Safe_PyObjectPtr as_float = make_safe(PyNumber_Float(v));\n-    double v_double = PyFloat_AS_DOUBLE(as_float.get());\n-    *out = Eigen::half(v_double);\n-\n-    return nullptr;\n+    return ConvertOneFloat<Eigen::half>(v, out);\n   }\n };\n \n@@ -613,7 +622,9 @@ Status PySeqToTensor(PyObject* obj, DataType dtype, Tensor* ret) {\n       break;\n \n     case DT_HALF:\n-      RETURN_STRING_AS_STATUS(NumpyHalfConverter::Convert(obj, &state, ret));\n+      if (NumpyHalfConverter::Convert(obj, &state, ret) == nullptr)\n+        return Status::OK();\n+      break;\n \n     case DT_INT64:\n       if (Int64Converter::Convert(obj, &state, ret) == nullptr)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5c27f5f4dc39afdefbd93c2ef266a8c7ab534a98",
            "date": "2025-01-25T18:55:10Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "05df81c283627135b7651c9c7a8fa0035bff2206",
            "date": "2025-01-25T17:06:34Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "4075a7dd74ea543557d1824e16721598e1a6af8d",
            "date": "2025-01-25T17:06:30Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "4d08d96d6a0aea39c5bd90d9728dbcf59008993c",
            "date": "2025-01-25T17:04:34Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "1b58ec4dcd6e5752598dc57d4788119f8ea12e23",
            "date": "2025-01-25T11:39:06Z",
            "author_login": "tensorflower-gardener"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.0,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:L/I:L/A:L",
    "cwe_id": "CWE-754",
    "description": "In TensorFlow before 1.15.2 and 2.0.1, converting a string (from Python) to a tf.float16 value results in a segmentation fault in eager mode as the format checks for this use case are only in the graph mode. This issue can lead to denial of service in inference/training where a malicious attacker can send a data point which contains a string instead of a tf.float16 value. Similar effects can be obtained by manipulating saved models and checkpoints whereby replacing a scalar tf.float16 value with a scalar string will trigger this issue due to automatic conversions. This can be easily reproduced by tf.constant(\"hello\", tf.float16), if eager execution is enabled. This issue is patched in TensorFlow 1.15.1 and 2.0.1 with this vulnerability patched. TensorFlow 2.1.0 was released after we fixed the issue, thus it is not affected. Users are encouraged to switch to TensorFlow 1.15.1, 2.0.1 or 2.1.0.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-01-28T22:15:11.090",
    "last_modified": "2024-11-21T05:33:41.743",
    "fix_date": "2019-12-20T23:33:46Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/5ac1b9e24ff6afc465756edf845d2e9660bd34bf",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-977j-xj7q-2jr9",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/5ac1b9e24ff6afc465756edf845d2e9660bd34bf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-977j-xj7q-2jr9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:37.497896",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-26T06:52:14Z",
    "pushed_at": "2025-01-26T07:27:00Z",
    "size": 1126495,
    "stars": 187418,
    "forks": 74442,
    "open_issues": 6822,
    "watchers": 187418,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101327392,
      "Python": 45791326,
      "MLIR": 10764225,
      "HTML": 7662661,
      "Starlark": 7439181,
      "Go": 2171369,
      "C": 1294440,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 702245,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 38067,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15545,
      "avg_commits_per_week": 298.9423076923077,
      "days_active_last_year": 354
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:37:26.588757"
  }
}