{
  "cve_id": "CVE-2020-5227",
  "github_data": {
    "repository": "lkiesow/python-feedgen",
    "fix_commit": "f57a01b20fa4aaaeccfa417f28e66b4084b9d0cf",
    "related_commits": [
      "f57a01b20fa4aaaeccfa417f28e66b4084b9d0cf",
      "f57a01b20fa4aaaeccfa417f28e66b4084b9d0cf"
    ],
    "patch_url": "https://github.com/lkiesow/python-feedgen/commit/f57a01b20fa4aaaeccfa417f28e66b4084b9d0cf.patch",
    "fix_commit_details": {
      "sha": "f57a01b20fa4aaaeccfa417f28e66b4084b9d0cf",
      "commit_date": "2020-01-28T16:49:08Z",
      "author": {
        "login": "lkiesow",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-g8q7-xv52-hf9f",
        "length": 82,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 360,
        "additions": 180,
        "deletions": 180
      },
      "files": [
        {
          "filename": "feedgen/entry.py",
          "status": "modified",
          "additions": 45,
          "deletions": 48,
          "patch": "@@ -3,7 +3,7 @@\n     feedgen.entry\n     ~~~~~~~~~~~~~\n \n-    :copyright: 2013, Lars Kiesow <lkiesow@uos.de>\n+    :copyright: 2013-2020, Lars Kiesow <lkiesow@uos.de>\n \n     :license: FreeBSD and LGPL, see license.* for more details.\n '''\n@@ -13,18 +13,19 @@\n import dateutil.parser\n import dateutil.tz\n import warnings\n-from lxml import etree\n+\n+from lxml.etree import CDATA  # nosec - adding CDATA entry is safe\n \n from feedgen.compat import string_types\n-from feedgen.util import ensure_format, formatRFC2822\n+from feedgen.util import ensure_format, formatRFC2822, xml_fromstring, xml_elem\n \n \n def _add_text_elm(entry, data, name):\n     \"\"\"Add a text subelement to an entry\"\"\"\n     if not data:\n         return\n \n-    elm = etree.SubElement(entry, name)\n+    elm = xml_elem(name, entry)\n     type_ = data.get('type')\n     if data.get('src'):\n         if name != 'content':\n@@ -34,16 +35,14 @@ def _add_text_elm(entry, data, name):\n     elif data.get(name):\n         # Surround xhtml with a div tag, parse it and embed it\n         if type_ == 'xhtml':\n-            elm.append(etree.fromstring(\n-                '<div xmlns=\"http://www.w3.org/1999/xhtml\">' +\n-                data.get(name) + '</div>'))\n+            xhtml = '<div xmlns=\"http://www.w3.org/1999/xhtml\">' \\\n+                    + data.get(name) + '</div>'\n+            elm.append(xml_fromstring(xhtml))\n         elif type_ == 'CDATA':\n-            elm.text = etree.CDATA(\n-                    data.get(name))\n+            elm.text = CDATA(data.get(name))\n         # Parse XML and embed it\n         elif type_ and (type_.endswith('/xml') or type_.endswith('+xml')):\n-            elm.append(etree.fromstring(\n-                data[name]))\n+            elm.append(xml_fromstring(data[name]))\n         # Embed the text in escaped form\n         elif not type_ or type_.startswith('text') or type_ == 'html':\n             elm.text = data.get(name)\n@@ -102,14 +101,14 @@ def __init__(self):\n \n     def atom_entry(self, extensions=True):\n         '''Create an ATOM entry and return it.'''\n-        entry = etree.Element('entry')\n+        entry = xml_elem('entry')\n         if not (self.__atom_id and self.__atom_title and self.__atom_updated):\n             raise ValueError('Required fields not set')\n-        id = etree.SubElement(entry, 'id')\n+        id = xml_elem('id', entry)\n         id.text = self.__atom_id\n-        title = etree.SubElement(entry, 'title')\n+        title = xml_elem('title', entry)\n         title.text = self.__atom_title\n-        updated = etree.SubElement(entry, 'updated')\n+        updated = xml_elem('updated', entry)\n         updated.text = self.__atom_updated.isoformat()\n \n         # An entry must contain an alternate link if there is no content\n@@ -125,20 +124,20 @@ def atom_entry(self, extensions=True):\n             # Atom requires a name. Skip elements without.\n             if not a.get('name'):\n                 continue\n-            author = etree.SubElement(entry, 'author')\n-            name = etree.SubElement(author, 'name')\n+            author = xml_elem('author', entry)\n+            name = xml_elem('name', author)\n             name.text = a.get('name')\n             if a.get('email'):\n-                email = etree.SubElement(author, 'email')\n+                email = xml_elem('email', author)\n                 email.text = a.get('email')\n             if a.get('uri'):\n-                uri = etree.SubElement(author, 'uri')\n+                uri = xml_elem('uri', author)\n                 uri.text = a.get('uri')\n \n         _add_text_elm(entry, self.__atom_content, 'content')\n \n         for l in self.__atom_link or []:\n-            link = etree.SubElement(entry, 'link', href=l['href'])\n+            link = xml_elem('link', entry, href=l['href'])\n             if l.get('rel'):\n                 link.attrib['rel'] = l['rel']\n             if l.get('type'):\n@@ -153,7 +152,7 @@ def atom_entry(self, extensions=True):\n         _add_text_elm(entry, self.__atom_summary, 'summary')\n \n         for c in self.__atom_category or []:\n-            cat = etree.SubElement(entry, 'category', term=c['term'])\n+            cat = xml_elem('category', entry, term=c['term'])\n             if c.get('scheme'):\n                 cat.attrib['scheme'] = c['scheme']\n             if c.get('label'):\n@@ -164,32 +163,31 @@ def atom_entry(self, extensions=True):\n             # Atom requires a name. Skip elements without.\n             if not c.get('name'):\n                 continue\n-            contrib = etree.SubElement(entry, 'contributor')\n-            name = etree.SubElement(contrib, 'name')\n+            contrib = xml_elem('contributor', entry)\n+            name = xml_elem('name', contrib)\n             name.text = c.get('name')\n             if c.get('email'):\n-                email = etree.SubElement(contrib, 'email')\n+                email = xml_elem('email', contrib)\n                 email.text = c.get('email')\n             if c.get('uri'):\n-                uri = etree.SubElement(contrib, 'uri')\n+                uri = xml_elem('uri', contrib)\n                 uri.text = c.get('uri')\n \n         if self.__atom_published:\n-            published = etree.SubElement(entry, 'published')\n+            published = xml_elem('published', entry)\n             published.text = self.__atom_published.isoformat()\n \n         if self.__atom_rights:\n-            rights = etree.SubElement(entry, 'rights')\n+            rights = xml_elem('rights', entry)\n             rights.text = self.__atom_rights\n \n         if self.__atom_source:\n-            source = etree.SubElement(entry, 'source')\n+            source = xml_elem('source', entry)\n             if self.__atom_source.get('title'):\n-                source_title = etree.SubElement(source, 'title')\n+                source_title = xml_elem('title', source)\n                 source_title.text = self.__atom_source['title']\n             if self.__atom_source.get('link'):\n-                etree.SubElement(source, 'link',\n-                                 href=self.__atom_source['link'])\n+                xml_elem('link', source, href=self.__atom_source['link'])\n \n         if extensions:\n             for ext in self.__extensions.values() or []:\n@@ -200,60 +198,59 @@ def atom_entry(self, extensions=True):\n \n     def rss_entry(self, extensions=True):\n         '''Create a RSS item and return it.'''\n-        entry = etree.Element('item')\n+        entry = xml_elem('item')\n         if not (self.__rss_title or\n                 self.__rss_description or\n                 self.__rss_content):\n             raise ValueError('Required fields not set')\n         if self.__rss_title:\n-            title = etree.SubElement(entry, 'title')\n+            title = xml_elem('title', entry)\n             title.text = self.__rss_title\n         if self.__rss_link:\n-            link = etree.SubElement(entry, 'link')\n+            link = xml_elem('link', entry)\n             link.text = self.__rss_link\n         if self.__rss_description and self.__rss_content:\n-            description = etree.SubElement(entry, 'description')\n+            description = xml_elem('description', entry)\n             description.text = self.__rss_description\n             XMLNS_CONTENT = 'http://purl.org/rss/1.0/modules/content/'\n-            content = etree.SubElement(entry, '{%s}encoded' % XMLNS_CONTENT)\n-            content.text = etree.CDATA(self.__rss_content['content']) \\\n+            content = xml_elem('{%s}encoded' % XMLNS_CONTENT, entry)\n+            content.text = CDATA(self.__rss_content['content']) \\\n                 if self.__rss_content.get('type', '') == 'CDATA' \\\n                 else self.__rss_content['content']\n         elif self.__rss_description:\n-            description = etree.SubElement(entry, 'description')\n+            description = xml_elem('description', entry)\n             description.text = self.__rss_description\n         elif self.__rss_content:\n-            description = etree.SubElement(entry, 'description')\n-            description.text = etree.CDATA(self.__rss_content['content']) \\\n+            description = xml_elem('description', entry)\n+            description.text = CDATA(self.__rss_content['content']) \\\n                 if self.__rss_content.get('type', '') == 'CDATA' \\\n                 else self.__rss_content['content']\n         for a in self.__rss_author or []:\n-            author = etree.SubElement(entry, 'author')\n+            author = xml_elem('author', entry)\n             author.text = a\n         if self.__rss_guid.get('guid'):\n-            guid = etree.SubElement(entry, 'guid')\n+            guid = xml_elem('guid', entry)\n             guid.text = self.__rss_guid['guid']\n             permaLink = str(self.__rss_guid.get('permalink', False)).lower()\n             guid.attrib['isPermaLink'] = permaLink\n         for cat in self.__rss_category or []:\n-            category = etree.SubElement(entry, 'category')\n+            category = xml_elem('category', entry)\n             category.text = cat['value']\n             if cat.get('domain'):\n                 category.attrib['domain'] = cat['domain']\n         if self.__rss_comments:\n-            comments = etree.SubElement(entry, 'comments')\n+            comments = xml_elem('comments', entry)\n             comments.text = self.__rss_comments\n         if self.__rss_enclosure:\n-            enclosure = etree.SubElement(entry, 'enclosure')\n+            enclosure = xml_elem('enclosure', entry)\n             enclosure.attrib['url'] = self.__rss_enclosure['url']\n             enclosure.attrib['length'] = self.__rss_enclosure['length']\n             enclosure.attrib['type'] = self.__rss_enclosure['type']\n         if self.__rss_pubDate:\n-            pubDate = etree.SubElement(entry, 'pubDate')\n+            pubDate = xml_elem('pubDate', entry)\n             pubDate.text = formatRFC2822(self.__rss_pubDate)\n         if self.__rss_source:\n-            source = etree.SubElement(entry, 'source',\n-                                      url=self.__rss_source['url'])\n+            source = xml_elem('source', entry, url=self.__rss_source['url'])\n             source.text = self.__rss_source['title']\n \n         if extensions:"
        },
        {
          "filename": "feedgen/ext/dc.py",
          "status": "modified",
          "additions": 6,
          "deletions": 7,
          "patch": "@@ -13,9 +13,8 @@\n     :license: FreeBSD and LGPL, see license.* for more details.\n '''\n \n-from lxml import etree\n-\n from feedgen.ext.base import BaseExtension\n+from feedgen.util import xml_elem\n \n \n class DcBaseExtension(BaseExtension):\n@@ -45,10 +44,10 @@ def __init__(self):\n     def extend_ns(self):\n         return {'dc': 'http://purl.org/dc/elements/1.1/'}\n \n-    def _extend_xml(self, xml_elem):\n-        '''Extend xml_elem with set DC fields.\n+    def _extend_xml(self, xml_element):\n+        '''Extend xml_element with set DC fields.\n \n-        :param xml_elem: etree element\n+        :param xml_element: etree element\n         '''\n         DCELEMENTS_NS = 'http://purl.org/dc/elements/1.1/'\n \n@@ -58,8 +57,8 @@ def _extend_xml(self, xml_elem):\n                      'identifier']:\n             if hasattr(self, '_dcelem_%s' % elem):\n                 for val in getattr(self, '_dcelem_%s' % elem) or []:\n-                    node = etree.SubElement(xml_elem,\n-                                            '{%s}%s' % (DCELEMENTS_NS, elem))\n+                    node = xml_elem('{%s}%s' % (DCELEMENTS_NS, elem),\n+                                    xml_element)\n                     node.text = val\n \n     def extend_atom(self, atom_feed):"
        },
        {
          "filename": "feedgen/ext/geo_entry.py",
          "status": "modified",
          "additions": 11,
          "deletions": 17,
          "patch": "@@ -12,8 +12,8 @@\n import numbers\n import warnings\n \n-from lxml import etree\n from feedgen.ext.base import BaseEntryExtension\n+from feedgen.util import xml_elem\n \n \n class GeoRSSPolygonInteriorWarning(Warning):\n@@ -86,49 +86,43 @@ def extend_file(self, entry):\n         GEO_NS = 'http://www.georss.org/georss'\n \n         if self.__point:\n-            point = etree.SubElement(entry, '{%s}point' % GEO_NS)\n+            point = xml_elem('{%s}point' % GEO_NS, entry)\n             point.text = self.__point\n \n         if self.__line:\n-            line = etree.SubElement(entry, '{%s}line' % GEO_NS)\n+            line = xml_elem('{%s}line' % GEO_NS, entry)\n             line.text = self.__line\n \n         if self.__polygon:\n-            polygon = etree.SubElement(entry, '{%s}polygon' % GEO_NS)\n+            polygon = xml_elem('{%s}polygon' % GEO_NS, entry)\n             polygon.text = self.__polygon\n \n         if self.__box:\n-            box = etree.SubElement(entry, '{%s}box' % GEO_NS)\n+            box = xml_elem('{%s}box' % GEO_NS, entry)\n             box.text = self.__box\n \n         if self.__featuretypetag:\n-            featuretypetag = etree.SubElement(\n-                entry,\n-                '{%s}featuretypetag' % GEO_NS\n-            )\n+            featuretypetag = xml_elem('{%s}featuretypetag' % GEO_NS, entry)\n             featuretypetag.text = self.__featuretypetag\n \n         if self.__relationshiptag:\n-            relationshiptag = etree.SubElement(\n-                entry,\n-                '{%s}relationshiptag' % GEO_NS\n-            )\n+            relationshiptag = xml_elem('{%s}relationshiptag' % GEO_NS, entry)\n             relationshiptag.text = self.__relationshiptag\n \n         if self.__featurename:\n-            featurename = etree.SubElement(entry, '{%s}featurename' % GEO_NS)\n+            featurename = xml_elem('{%s}featurename' % GEO_NS, entry)\n             featurename.text = self.__featurename\n \n         if self.__elev:\n-            elevation = etree.SubElement(entry, '{%s}elev' % GEO_NS)\n+            elevation = xml_elem('{%s}elev' % GEO_NS, entry)\n             elevation.text = str(self.__elev)\n \n         if self.__floor:\n-            floor = etree.SubElement(entry, '{%s}floor' % GEO_NS)\n+            floor = xml_elem('{%s}floor' % GEO_NS, entry)\n             floor.text = str(self.__floor)\n \n         if self.__radius:\n-            radius = etree.SubElement(entry, '{%s}radius' % GEO_NS)\n+            radius = xml_elem('{%s}radius' % GEO_NS, entry)\n             radius.text = str(self.__radius)\n \n         return entry"
        },
        {
          "filename": "feedgen/ext/media.py",
          "status": "modified",
          "additions": 5,
          "deletions": 7,
          "patch": "@@ -10,10 +10,8 @@\n     :license: FreeBSD and LGPL, see license.* for more details.\n '''\n \n-from lxml import etree\n-\n from feedgen.ext.base import BaseEntryExtension, BaseExtension\n-from feedgen.util import ensure_format\n+from feedgen.util import ensure_format, xml_elem\n \n MEDIA_NS = 'http://search.yahoo.com/mrss/'\n \n@@ -45,10 +43,10 @@ def extend_atom(self, entry):\n             # Define current media:group\n             group = groups.get(media_content.get('group'))\n             if group is None:\n-                group = etree.SubElement(entry, '{%s}group' % MEDIA_NS)\n+                group = xml_elem('{%s}group' % MEDIA_NS, entry)\n                 groups[media_content.get('group')] = group\n             # Add content\n-            content = etree.SubElement(group, '{%s}content' % MEDIA_NS)\n+            content = xml_elem('{%s}content' % MEDIA_NS, group)\n             for attr in ('url', 'fileSize', 'type', 'medium', 'isDefault',\n                          'expression', 'bitrate', 'framerate', 'samplingrate',\n                          'channels', 'duration', 'height', 'width', 'lang'):\n@@ -59,10 +57,10 @@ def extend_atom(self, entry):\n             # Define current media:group\n             group = groups.get(media_thumbnail.get('group'))\n             if group is None:\n-                group = etree.SubElement(entry, '{%s}group' % MEDIA_NS)\n+                group = xml_elem('{%s}group' % MEDIA_NS, entry)\n                 groups[media_thumbnail.get('group')] = group\n             # Add thumbnails\n-            thumbnail = etree.SubElement(group, '{%s}thumbnail' % MEDIA_NS)\n+            thumbnail = xml_elem('{%s}thumbnail' % MEDIA_NS, group)\n             for attr in ('url', 'height', 'width', 'time'):\n                 if media_thumbnail.get(attr):\n                     thumbnail.set(attr, media_thumbnail[attr])"
        },
        {
          "filename": "feedgen/ext/podcast.py",
          "status": "modified",
          "additions": 14,
          "deletions": 19,
          "patch": "@@ -10,11 +10,9 @@\n     :license: FreeBSD and LGPL, see license.* for more details.\n '''\n \n-from lxml import etree\n-\n from feedgen.compat import string_types\n from feedgen.ext.base import BaseExtension\n-from feedgen.util import ensure_format\n+from feedgen.util import ensure_format, xml_elem\n \n \n class PodcastExtension(BaseExtension):\n@@ -47,11 +45,11 @@ def extend_rss(self, rss_feed):\n         channel = rss_feed[0]\n \n         if self.__itunes_author:\n-            author = etree.SubElement(channel, '{%s}author' % ITUNES_NS)\n+            author = xml_elem('{%s}author' % ITUNES_NS, channel)\n             author.text = self.__itunes_author\n \n         if self.__itunes_block is not None:\n-            block = etree.SubElement(channel, '{%s}block' % ITUNES_NS)\n+            block = xml_elem('{%s}block' % ITUNES_NS, channel)\n             block.text = 'yes' if self.__itunes_block else 'no'\n \n         for c in self.__itunes_category or []:\n@@ -60,45 +58,42 @@ def extend_rss(self, rss_feed):\n             category = channel.find(\n                     '{%s}category[@text=\"%s\"]' % (ITUNES_NS, c.get('cat')))\n             if category is None:\n-                category = etree.SubElement(channel,\n-                                            '{%s}category' % ITUNES_NS)\n+                category = xml_elem('{%s}category' % ITUNES_NS, channel)\n                 category.attrib['text'] = c.get('cat')\n \n             if c.get('sub'):\n-                subcategory = etree.SubElement(category,\n-                                               '{%s}category' % ITUNES_NS)\n+                subcategory = xml_elem('{%s}category' % ITUNES_NS, category)\n                 subcategory.attrib['text'] = c.get('sub')\n \n         if self.__itunes_image:\n-            image = etree.SubElement(channel, '{%s}image' % ITUNES_NS)\n+            image = xml_elem('{%s}image' % ITUNES_NS, channel)\n             image.attrib['href'] = self.__itunes_image\n \n         if self.__itunes_explicit in ('yes', 'no', 'clean'):\n-            explicit = etree.SubElement(channel, '{%s}explicit' % ITUNES_NS)\n+            explicit = xml_elem('{%s}explicit' % ITUNES_NS, channel)\n             explicit.text = self.__itunes_explicit\n \n         if self.__itunes_complete in ('yes', 'no'):\n-            complete = etree.SubElement(channel, '{%s}complete' % ITUNES_NS)\n+            complete = xml_elem('{%s}complete' % ITUNES_NS, channel)\n             complete.text = self.__itunes_complete\n \n         if self.__itunes_new_feed_url:\n-            new_feed_url = etree.SubElement(channel,\n-                                            '{%s}new-feed-url' % ITUNES_NS)\n+            new_feed_url = xml_elem('{%s}new-feed-url' % ITUNES_NS, channel)\n             new_feed_url.text = self.__itunes_new_feed_url\n \n         if self.__itunes_owner:\n-            owner = etree.SubElement(channel, '{%s}owner' % ITUNES_NS)\n-            owner_name = etree.SubElement(owner, '{%s}name' % ITUNES_NS)\n+            owner = xml_elem('{%s}owner' % ITUNES_NS, channel)\n+            owner_name = xml_elem('{%s}name' % ITUNES_NS, owner)\n             owner_name.text = self.__itunes_owner.get('name')\n-            owner_email = etree.SubElement(owner, '{%s}email' % ITUNES_NS)\n+            owner_email = xml_elem('{%s}email' % ITUNES_NS, owner)\n             owner_email.text = self.__itunes_owner.get('email')\n \n         if self.__itunes_subtitle:\n-            subtitle = etree.SubElement(channel, '{%s}subtitle' % ITUNES_NS)\n+            subtitle = xml_elem('{%s}subtitle' % ITUNES_NS, channel)\n             subtitle.text = self.__itunes_subtitle\n \n         if self.__itunes_summary:\n-            summary = etree.SubElement(channel, '{%s}summary' % ITUNES_NS)\n+            summary = xml_elem('{%s}summary' % ITUNES_NS, channel)\n             summary.text = self.__itunes_summary\n \n         return rss_feed"
        },
        {
          "filename": "feedgen/ext/podcast_entry.py",
          "status": "modified",
          "additions": 11,
          "deletions": 12,
          "patch": "@@ -10,9 +10,8 @@\n     :license: FreeBSD and LGPL, see license.* for more details.\n '''\n \n-from lxml import etree\n-\n from feedgen.ext.base import BaseEntryExtension\n+from feedgen.util import xml_elem\n \n \n class PodcastEntryExtension(BaseEntryExtension):\n@@ -40,43 +39,43 @@ def extend_rss(self, entry):\n         ITUNES_NS = 'http://www.itunes.com/dtds/podcast-1.0.dtd'\n \n         if self.__itunes_author:\n-            author = etree.SubElement(entry, '{%s}author' % ITUNES_NS)\n+            author = xml_elem('{%s}author' % ITUNES_NS, entry)\n             author.text = self.__itunes_author\n \n         if self.__itunes_block is not None:\n-            block = etree.SubElement(entry, '{%s}block' % ITUNES_NS)\n+            block = xml_elem('{%s}block' % ITUNES_NS, entry)\n             block.text = 'yes' if self.__itunes_block else 'no'\n \n         if self.__itunes_image:\n-            image = etree.SubElement(entry, '{%s}image' % ITUNES_NS)\n+            image = xml_elem('{%s}image' % ITUNES_NS, entry)\n             image.attrib['href'] = self.__itunes_image\n \n         if self.__itunes_duration:\n-            duration = etree.SubElement(entry, '{%s}duration' % ITUNES_NS)\n+            duration = xml_elem('{%s}duration' % ITUNES_NS, entry)\n             duration.text = self.__itunes_duration\n \n         if self.__itunes_explicit in ('yes', 'no', 'clean'):\n-            explicit = etree.SubElement(entry, '{%s}explicit' % ITUNES_NS)\n+            explicit = xml_elem('{%s}explicit' % ITUNES_NS, entry)\n             explicit.text = self.__itunes_explicit\n \n         if self.__itunes_is_closed_captioned is not None:\n-            is_closed_captioned = etree.SubElement(\n-                    entry, '{%s}isClosedCaptioned' % ITUNES_NS)\n+            is_closed_captioned = xml_elem(\n+                    '{%s}isClosedCaptioned' % ITUNES_NS, entry)\n             if self.__itunes_is_closed_captioned:\n                 is_closed_captioned.text = 'yes'\n             else:\n                 is_closed_captioned.text = 'no'\n \n         if self.__itunes_order is not None and self.__itunes_order >= 0:\n-            order = etree.SubElement(entry, '{%s}order' % ITUNES_NS)\n+            order = xml_elem('{%s}order' % ITUNES_NS, entry)\n             order.text = str(self.__itunes_order)\n \n         if self.__itunes_subtitle:\n-            subtitle = etree.SubElement(entry, '{%s}subtitle' % ITUNES_NS)\n+            subtitle = xml_elem('{%s}subtitle' % ITUNES_NS, entry)\n             subtitle.text = self.__itunes_subtitle\n \n         if self.__itunes_summary:\n-            summary = etree.SubElement(entry, '{%s}summary' % ITUNES_NS)\n+            summary = xml_elem('{%s}summary' % ITUNES_NS, entry)\n             summary.text = self.__itunes_summary\n         return entry\n "
        },
        {
          "filename": "feedgen/ext/syndication.py",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -10,17 +10,16 @@\n http://web.resource.org/rss/1.0/modules/syndication/\n '''\n \n-from lxml import etree\n-\n from feedgen.ext.base import BaseExtension\n+from feedgen.util import xml_elem\n \n SYNDICATION_NS = 'http://purl.org/rss/1.0/modules/syndication/'\n PERIOD_TYPE = ('hourly', 'daily', 'weekly', 'monthly', 'yearly')\n \n \n def _set_value(channel, name, value):\n     if value:\n-        newelem = etree.SubElement(channel, '{%s}' % SYNDICATION_NS + name)\n+        newelem = xml_elem('{%s}' % SYNDICATION_NS + name, channel)\n         newelem.text = value\n \n "
        },
        {
          "filename": "feedgen/ext/torrent.py",
          "status": "modified",
          "additions": 8,
          "deletions": 10,
          "patch": "@@ -10,9 +10,8 @@\n     :license: FreeBSD and LGPL, see license.* for more details.\n '''\n \n-from lxml import etree\n-\n from feedgen.ext.base import BaseEntryExtension, BaseExtension\n+from feedgen.util import xml_elem\n \n TORRENT_NS = 'http://xmlns.ezrss.it/0.1/dtd/'\n \n@@ -41,30 +40,29 @@ def extend_rss(self, entry):\n         :param feed: The RSS item XML element to use.\n         '''\n         if self.__torrent_filename:\n-            filename = etree.SubElement(entry, '{%s}filename' % TORRENT_NS)\n+            filename = xml_elem('{%s}filename' % TORRENT_NS, entry)\n             filename.text = self.__torrent_filename\n \n         if self.__torrent_contentlength:\n-            contentlength = etree.SubElement(entry,\n-                                             '{%s}contentlength' % TORRENT_NS)\n+            contentlength = xml_elem('{%s}contentlength' % TORRENT_NS, entry)\n             contentlength.text = self.__torrent_contentlength\n \n         if self.__torrent_infohash:\n-            infohash = etree.SubElement(entry, '{%s}infohash' % TORRENT_NS)\n+            infohash = xml_elem('{%s}infohash' % TORRENT_NS, entry)\n             infohash.text = self.__torrent_infohash\n-            magnet = etree.SubElement(entry, '{%s}magneturi' % TORRENT_NS)\n+            magnet = xml_elem('{%s}magneturi' % TORRENT_NS, entry)\n             magnet.text = 'magnet:?xt=urn:btih:' + self.__torrent_infohash\n \n         if self.__torrent_seeds:\n-            seeds = etree.SubElement(entry, '{%s}seed' % TORRENT_NS)\n+            seeds = xml_elem('{%s}seed' % TORRENT_NS, entry)\n             seeds.text = self.__torrent_seeds\n \n         if self.__torrent_peers:\n-            peers = etree.SubElement(entry, '{%s}peers' % TORRENT_NS)\n+            peers = xml_elem('{%s}peers' % TORRENT_NS, entry)\n             peers.text = self.__torrent_peers\n \n         if self.__torrent_verified:\n-            verified = etree.SubElement(entry, '{%s}verified' % TORRENT_NS)\n+            verified = xml_elem('{%s}verified' % TORRENT_NS, entry)\n             verified.text = self.__torrent_verified\n \n     def filename(self, torrent_filename=None):"
        },
        {
          "filename": "feedgen/feed.py",
          "status": "modified",
          "additions": 56,
          "deletions": 57,
          "patch": "@@ -3,7 +3,7 @@\n     feedgen.feed\n     ~~~~~~~~~~~~\n \n-    :copyright: 2013-2016, Lars Kiesow <lkiesow@uos.de>\n+    :copyright: 2013-2020, Lars Kiesow <lkiesow@uos.de>\n \n     :license: FreeBSD and LGPL, see license.* for more details.\n \n@@ -14,12 +14,12 @@\n \n import dateutil.parser\n import dateutil.tz\n-from lxml import etree\n+from lxml import etree  # nosec - not using this for parsing\n \n import feedgen.version\n from feedgen.compat import string_types\n from feedgen.entry import FeedEntry\n-from feedgen.util import ensure_format, formatRFC2822\n+from feedgen.util import ensure_format, formatRFC2822, xml_elem\n \n _feedgen_version = feedgen.version.version_str\n \n@@ -47,7 +47,7 @@ def __init__(self):\n         self.__atom_contributor = None\n         self.__atom_generator = {\n                 'value': 'python-feedgen',\n-                'uri': 'http://lkiesow.github.io/python-feedgen',\n+                'uri': 'https://lkiesow.github.io/python-feedgen',\n                 'version': feedgen.version.version_str}  # {value*,uri,version}\n         self.__atom_icon = None\n         self.__atom_logo = None\n@@ -95,9 +95,9 @@ def _create_atom(self, extensions=True):\n                 if ext.get('atom'):\n                     nsmap.update(ext['inst'].extend_ns())\n \n-        feed = etree.Element('feed',\n-                             xmlns='http://www.w3.org/2005/Atom',\n-                             nsmap=nsmap)\n+        feed = xml_elem('feed',\n+                        xmlns='http://www.w3.org/2005/Atom',\n+                        nsmap=nsmap)\n         if self.__atom_feed_xml_lang:\n             feed.attrib['{http://www.w3.org/XML/1998/namespace}lang'] = \\\n                     self.__atom_feed_xml_lang\n@@ -108,30 +108,30 @@ def _create_atom(self, extensions=True):\n                       ([] if self.__atom_updated else ['updated'])\n             missing = ', '.join(missing)\n             raise ValueError('Required fields not set (%s)' % missing)\n-        id = etree.SubElement(feed, 'id')\n+        id = xml_elem('id', feed)\n         id.text = self.__atom_id\n-        title = etree.SubElement(feed, 'title')\n+        title = xml_elem('title', feed)\n         title.text = self.__atom_title\n-        updated = etree.SubElement(feed, 'updated')\n+        updated = xml_elem('updated', feed)\n         updated.text = self.__atom_updated.isoformat()\n \n         # Add author elements\n         for a in self.__atom_author or []:\n             # Atom requires a name. Skip elements without.\n             if not a.get('name'):\n                 continue\n-            author = etree.SubElement(feed, 'author')\n-            name = etree.SubElement(author, 'name')\n+            author = xml_elem('author', feed)\n+            name = xml_elem('name', author)\n             name.text = a.get('name')\n             if a.get('email'):\n-                email = etree.SubElement(author, 'email')\n+                email = xml_elem('email', author)\n                 email.text = a.get('email')\n             if a.get('uri'):\n-                uri = etree.SubElement(author, 'uri')\n+                uri = xml_elem('uri', author)\n                 uri.text = a.get('uri')\n \n         for l in self.__atom_link or []:\n-            link = etree.SubElement(feed, 'link', href=l['href'])\n+            link = xml_elem('link', feed, href=l['href'])\n             if l.get('rel'):\n                 link.attrib['rel'] = l['rel']\n             if l.get('type'):\n@@ -144,7 +144,7 @@ def _create_atom(self, extensions=True):\n                 link.attrib['length'] = l['length']\n \n         for c in self.__atom_category or []:\n-            cat = etree.SubElement(feed, 'category', term=c['term'])\n+            cat = xml_elem('category', feed, term=c['term'])\n             if c.get('scheme'):\n                 cat.attrib['scheme'] = c['scheme']\n             if c.get('label'):\n@@ -155,38 +155,38 @@ def _create_atom(self, extensions=True):\n             # Atom requires a name. Skip elements without.\n             if not c.get('name'):\n                 continue\n-            contrib = etree.SubElement(feed, 'contributor')\n-            name = etree.SubElement(contrib, 'name')\n+            contrib = xml_elem('contributor', feed)\n+            name = xml_elem('name', contrib)\n             name.text = c.get('name')\n             if c.get('email'):\n-                email = etree.SubElement(contrib, 'email')\n+                email = xml_elem('email', contrib)\n                 email.text = c.get('email')\n             if c.get('uri'):\n-                uri = etree.SubElement(contrib, 'uri')\n+                uri = xml_elem('uri', contrib)\n                 uri.text = c.get('uri')\n \n         if self.__atom_generator and self.__atom_generator.get('value'):\n-            generator = etree.SubElement(feed, 'generator')\n+            generator = xml_elem('generator', feed)\n             generator.text = self.__atom_generator['value']\n             if self.__atom_generator.get('uri'):\n                 generator.attrib['uri'] = self.__atom_generator['uri']\n             if self.__atom_generator.get('version'):\n                 generator.attrib['version'] = self.__atom_generator['version']\n \n         if self.__atom_icon:\n-            icon = etree.SubElement(feed, 'icon')\n+            icon = xml_elem('icon', feed)\n             icon.text = self.__atom_icon\n \n         if self.__atom_logo:\n-            logo = etree.SubElement(feed, 'logo')\n+            logo = xml_elem('logo', feed)\n             logo.text = self.__atom_logo\n \n         if self.__atom_rights:\n-            rights = etree.SubElement(feed, 'rights')\n+            rights = xml_elem('rights', feed)\n             rights.text = self.__atom_rights\n \n         if self.__atom_subtitle:\n-            subtitle = etree.SubElement(feed, 'subtitle')\n+            subtitle = xml_elem('subtitle', feed)\n             subtitle.text = self.__atom_subtitle\n \n         if extensions:\n@@ -255,8 +255,8 @@ def _create_rss(self, extensions=True):\n         nsmap.update({'atom':  'http://www.w3.org/2005/Atom',\n                       'content': 'http://purl.org/rss/1.0/modules/content/'})\n \n-        feed = etree.Element('rss', version='2.0', nsmap=nsmap)\n-        channel = etree.SubElement(feed, 'channel')\n+        feed = xml_elem('rss', version='2.0', nsmap=nsmap)\n+        channel = xml_elem('channel', feed)\n         if not (self.__rss_title and\n                 self.__rss_link and\n                 self.__rss_description):\n@@ -265,18 +265,17 @@ def _create_rss(self, extensions=True):\n                       ([] if self.__rss_description else ['description'])\n             missing = ', '.join(missing)\n             raise ValueError('Required fields not set (%s)' % missing)\n-        title = etree.SubElement(channel, 'title')\n+        title = xml_elem('title', channel)\n         title.text = self.__rss_title\n-        link = etree.SubElement(channel, 'link')\n+        link = xml_elem('link', channel)\n         link.text = self.__rss_link\n-        desc = etree.SubElement(channel, 'description')\n+        desc = xml_elem('description', channel)\n         desc.text = self.__rss_description\n         for ln in self.__atom_link or []:\n             # It is recommended to include a atom self link in rss documents\u2026\n             if ln.get('rel') == 'self':\n-                selflink = etree.SubElement(\n-                        channel, '{http://www.w3.org/2005/Atom}link',\n-                        href=ln['href'], rel='self')\n+                selflink = xml_elem('{http://www.w3.org/2005/Atom}link',\n+                                    channel, href=ln['href'], rel='self')\n                 if ln.get('type'):\n                     selflink.attrib['type'] = ln['type']\n                 if ln.get('hreflang'):\n@@ -288,82 +287,82 @@ def _create_rss(self, extensions=True):\n                 break\n         if self.__rss_category:\n             for cat in self.__rss_category:\n-                category = etree.SubElement(channel, 'category')\n+                category = xml_elem('category', channel)\n                 category.text = cat['value']\n                 if cat.get('domain'):\n                     category.attrib['domain'] = cat['domain']\n         if self.__rss_cloud:\n-            cloud = etree.SubElement(channel, 'cloud')\n+            cloud = xml_elem('cloud', channel)\n             cloud.attrib['domain'] = self.__rss_cloud.get('domain')\n             cloud.attrib['port'] = self.__rss_cloud.get('port')\n             cloud.attrib['path'] = self.__rss_cloud.get('path')\n             cloud.attrib['registerProcedure'] = self.__rss_cloud.get(\n                     'registerProcedure')\n             cloud.attrib['protocol'] = self.__rss_cloud.get('protocol')\n         if self.__rss_copyright:\n-            copyright = etree.SubElement(channel, 'copyright')\n+            copyright = xml_elem('copyright', channel)\n             copyright.text = self.__rss_copyright\n         if self.__rss_docs:\n-            docs = etree.SubElement(channel, 'docs')\n+            docs = xml_elem('docs', channel)\n             docs.text = self.__rss_docs\n         if self.__rss_generator:\n-            generator = etree.SubElement(channel, 'generator')\n+            generator = xml_elem('generator', channel)\n             generator.text = self.__rss_generator\n         if self.__rss_image:\n-            image = etree.SubElement(channel, 'image')\n-            url = etree.SubElement(image, 'url')\n+            image = xml_elem('image', channel)\n+            url = xml_elem('url', image)\n             url.text = self.__rss_image.get('url')\n-            title = etree.SubElement(image, 'title')\n+            title = xml_elem('title', image)\n             title.text = self.__rss_image.get('title', self.__rss_title)\n-            link = etree.SubElement(image, 'link')\n+            link = xml_elem('link', image)\n             link.text = self.__rss_image.get('link', self.__rss_link)\n             if self.__rss_image.get('width'):\n-                width = etree.SubElement(image, 'width')\n+                width = xml_elem('width', image)\n                 width.text = self.__rss_image.get('width')\n             if self.__rss_image.get('height'):\n-                height = etree.SubElement(image, 'height')\n+                height = xml_elem('height', image)\n                 height.text = self.__rss_image.get('height')\n             if self.__rss_image.get('description'):\n-                description = etree.SubElement(image, 'description')\n+                description = xml_elem('description', image)\n                 description.text = self.__rss_image.get('description')\n         if self.__rss_language:\n-            language = etree.SubElement(channel, 'language')\n+            language = xml_elem('language', channel)\n             language.text = self.__rss_language\n         if self.__rss_lastBuildDate:\n-            lastBuildDate = etree.SubElement(channel, 'lastBuildDate')\n+            lastBuildDate = xml_elem('lastBuildDate', channel)\n \n             lastBuildDate.text = formatRFC2822(self.__rss_lastBuildDate)\n         if self.__rss_managingEditor:\n-            managingEditor = etree.SubElement(channel, 'managingEditor')\n+            managingEditor = xml_elem('managingEditor', channel)\n             managingEditor.text = self.__rss_managingEditor\n         if self.__rss_pubDate:\n-            pubDate = etree.SubElement(channel, 'pubDate')\n+            pubDate = xml_elem('pubDate', channel)\n             pubDate.text = formatRFC2822(self.__rss_pubDate)\n         if self.__rss_rating:\n-            rating = etree.SubElement(channel, 'rating')\n+            rating = xml_elem('rating', channel)\n             rating.text = self.__rss_rating\n         if self.__rss_skipHours:\n-            skipHours = etree.SubElement(channel, 'skipHours')\n+            skipHours = xml_elem('skipHours', channel)\n             for h in self.__rss_skipHours:\n-                hour = etree.SubElement(skipHours, 'hour')\n+                hour = xml_elem('hour', skipHours)\n                 hour.text = str(h)\n         if self.__rss_skipDays:\n-            skipDays = etree.SubElement(channel, 'skipDays')\n+            skipDays = xml_elem('skipDays', channel)\n             for d in self.__rss_skipDays:\n-                day = etree.SubElement(skipDays, 'day')\n+                day = xml_elem('day', skipDays)\n                 day.text = d\n         if self.__rss_textInput:\n-            textInput = etree.SubElement(channel, 'textInput')\n+            textInput = xml_elem('textInput', channel)\n             textInput.attrib['title'] = self.__rss_textInput.get('title')\n             textInput.attrib['description'] = \\\n                 self.__rss_textInput.get('description')\n             textInput.attrib['name'] = self.__rss_textInput.get('name')\n             textInput.attrib['link'] = self.__rss_textInput.get('link')\n         if self.__rss_ttl:\n-            ttl = etree.SubElement(channel, 'ttl')\n+            ttl = xml_elem('ttl', channel)\n             ttl.text = str(self.__rss_ttl)\n         if self.__rss_webMaster:\n-            webMaster = etree.SubElement(channel, 'webMaster')\n+            webMaster = xml_elem('webMaster', channel)\n             webMaster.text = self.__rss_webMaster\n \n         if extensions:"
        },
        {
          "filename": "feedgen/util.py",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -10,6 +10,28 @@\n '''\n import locale\n import sys\n+import lxml  # nosec - we configure a safe parser below\n+\n+# Configure a safe parser which does not allow XML entity expansion\n+parser = lxml.etree.XMLParser(\n+        attribute_defaults=False,\n+        dtd_validation=False,\n+        load_dtd=False,\n+        no_network=True,\n+        recover=False,\n+        remove_pis=True,\n+        resolve_entities=False,\n+        huge_tree=False)\n+\n+\n+def xml_fromstring(xmlstring):\n+    return lxml.etree.fromstring(xmlstring, parser)  # nosec - safe parser\n+\n+\n+def xml_elem(name, parent=None, **kwargs):\n+    if parent is not None:\n+        return lxml.etree.SubElement(parent, name, **kwargs)\n+    return lxml.etree.Element(name, **kwargs)\n \n \n def ensure_format(val, allowed, required, allowed_values=None, defaults=None):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "97260abb1793eb164c458c10b493690beb413f6d",
            "date": "2023-12-25T17:59:03Z",
            "author_login": "lkiesow"
          },
          {
            "sha": "e507e8fbb237108f21144b0b27248caa05c7dc0c",
            "date": "2023-12-25T17:57:29Z",
            "author_login": "lkiesow"
          },
          {
            "sha": "fc5b64a2453fccfee4d2036d2f26578c5f7c7f41",
            "date": "2023-12-25T17:51:18Z",
            "author_login": "lkiesow"
          },
          {
            "sha": "8311a847a7da79a32ef14604947f56c7b9fe318c",
            "date": "2023-12-24T15:17:32Z",
            "author_login": "lkiesow"
          },
          {
            "sha": "cf6af3d1095800b8352e4f6d931c292994eb6062",
            "date": "2023-12-24T14:36:17Z",
            "author_login": "lkiesow"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-776",
    "description": "Feedgen (python feedgen) before 0.9.0 is susceptible to XML Denial of Service attacks. The *feedgen* library allows supplying XML as content for some of the available fields. This XML will be parsed and integrated into the existing XML tree. During this process, feedgen is vulnerable to XML Denial of Service Attacks (e.g. XML Bomb). This becomes a concern in particular if feedgen is used to include content from untrused sources and if XML (including XHTML) is directly included instead of providing plain tex content only. This problem has been fixed in feedgen 0.9.0 which disallows XML entity expansion and external resources.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-01-28T23:15:12.670",
    "last_modified": "2024-11-21T05:33:43.130",
    "fix_date": "2020-01-28T16:49:08Z"
  },
  "references": [
    {
      "url": "https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/november/xml-denial-of-service-attacks-and-defenses",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/lkiesow/python-feedgen/commit/f57a01b20fa4aaaeccfa417f28e66b4084b9d0cf",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/lkiesow/python-feedgen/security/advisories/GHSA-g8q7-xv52-hf9f",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/T6I5ENUYGFNMIH6ZQ62FZ6VU2WD3SIOI/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/november/xml-denial-of-service-attacks-and-defenses",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/lkiesow/python-feedgen/commit/f57a01b20fa4aaaeccfa417f28e66b4084b9d0cf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/lkiesow/python-feedgen/security/advisories/GHSA-g8q7-xv52-hf9f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/T6I5ENUYGFNMIH6ZQ62FZ6VU2WD3SIOI/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:37.498059",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "python-feedgen",
    "owner": "lkiesow",
    "created_at": "2013-05-03T15:14:54Z",
    "updated_at": "2025-01-11T04:04:06Z",
    "pushed_at": "2024-07-04T10:19:12Z",
    "size": 1337,
    "stars": 749,
    "forks": 125,
    "open_issues": 10,
    "watchers": 749,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 213923,
      "Makefile": 1216
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-2-clause"
    },
    "collected_at": "2025-01-14T13:42:38.686721"
  }
}