{
  "cve_id": "CVE-2020-5232",
  "github_data": {
    "repository": "ensdomains/ens",
    "fix_commit": "36e10e71fcddcade88646821e0a57cc6c19e1ecf",
    "related_commits": [
      "36e10e71fcddcade88646821e0a57cc6c19e1ecf",
      "36e10e71fcddcade88646821e0a57cc6c19e1ecf"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "36e10e71fcddcade88646821e0a57cc6c19e1ecf",
      "commit_date": "2020-01-30T01:27:40Z",
      "author": {
        "login": "decanus",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-8f9f-pc5v-9r5h",
        "length": 62,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 715,
        "additions": 441,
        "deletions": 274
      },
      "files": [
        {
          "filename": ".gitignore",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -7,5 +7,3 @@ _templates\n \n # Compiled contract ABIs and binaries\n build/contracts/*\n-# Keep the ENS lll artifact\n-!build/contracts/ENS.lll.json\n\\ No newline at end of file"
        },
        {
          "filename": "build/contracts/ENS.lll.json",
          "status": "removed",
          "additions": 0,
          "deletions": 213,
          "patch": "@@ -1,213 +0,0 @@\n-{\n-  \"contract_name\": \"ENS\",\n-  \"abi\": [\n-    {\n-      \"constant\": true,\n-      \"inputs\": [\n-        {\n-          \"name\": \"node\",\n-          \"type\": \"bytes32\"\n-        }\n-      ],\n-      \"name\": \"resolver\",\n-      \"outputs\": [\n-        {\n-          \"name\": \"\",\n-          \"type\": \"address\"\n-        }\n-      ],\n-      \"payable\": false,\n-      \"type\": \"function\"\n-    },\n-    {\n-      \"constant\": true,\n-      \"inputs\": [\n-        {\n-          \"name\": \"node\",\n-          \"type\": \"bytes32\"\n-        }\n-      ],\n-      \"name\": \"owner\",\n-      \"outputs\": [\n-        {\n-          \"name\": \"\",\n-          \"type\": \"address\"\n-        }\n-      ],\n-      \"payable\": false,\n-      \"type\": \"function\"\n-    },\n-    {\n-      \"constant\": false,\n-      \"inputs\": [\n-        {\n-          \"name\": \"node\",\n-          \"type\": \"bytes32\"\n-        },\n-        {\n-          \"name\": \"label\",\n-          \"type\": \"bytes32\"\n-        },\n-        {\n-          \"name\": \"owner\",\n-          \"type\": \"address\"\n-        }\n-      ],\n-      \"name\": \"setSubnodeOwner\",\n-      \"outputs\": [],\n-      \"payable\": false,\n-      \"type\": \"function\"\n-    },\n-    {\n-      \"constant\": false,\n-      \"inputs\": [\n-        {\n-          \"name\": \"node\",\n-          \"type\": \"bytes32\"\n-        },\n-        {\n-          \"name\": \"ttl\",\n-          \"type\": \"uint64\"\n-        }\n-      ],\n-      \"name\": \"setTTL\",\n-      \"outputs\": [],\n-      \"payable\": false,\n-      \"type\": \"function\"\n-    },\n-    {\n-      \"constant\": true,\n-      \"inputs\": [\n-        {\n-          \"name\": \"node\",\n-          \"type\": \"bytes32\"\n-        }\n-      ],\n-      \"name\": \"ttl\",\n-      \"outputs\": [\n-        {\n-          \"name\": \"\",\n-          \"type\": \"uint64\"\n-        }\n-      ],\n-      \"payable\": false,\n-      \"type\": \"function\"\n-    },\n-    {\n-      \"constant\": false,\n-      \"inputs\": [\n-        {\n-          \"name\": \"node\",\n-          \"type\": \"bytes32\"\n-        },\n-        {\n-          \"name\": \"resolver\",\n-          \"type\": \"address\"\n-        }\n-      ],\n-      \"name\": \"setResolver\",\n-      \"outputs\": [],\n-      \"payable\": false,\n-      \"type\": \"function\"\n-    },\n-    {\n-      \"constant\": false,\n-      \"inputs\": [\n-        {\n-          \"name\": \"node\",\n-          \"type\": \"bytes32\"\n-        },\n-        {\n-          \"name\": \"owner\",\n-          \"type\": \"address\"\n-        }\n-      ],\n-      \"name\": \"setOwner\",\n-      \"outputs\": [],\n-      \"payable\": false,\n-      \"type\": \"function\"\n-    },\n-    {\n-      \"inputs\": [],\n-      \"payable\": false,\n-      \"type\": \"constructor\"\n-    },\n-    {\n-      \"anonymous\": false,\n-      \"inputs\": [\n-        {\n-          \"indexed\": true,\n-          \"name\": \"node\",\n-          \"type\": \"bytes32\"\n-        },\n-        {\n-          \"indexed\": false,\n-          \"name\": \"owner\",\n-          \"type\": \"address\"\n-        }\n-      ],\n-      \"name\": \"Transfer\",\n-      \"type\": \"event\"\n-    },\n-    {\n-      \"anonymous\": false,\n-      \"inputs\": [\n-        {\n-          \"indexed\": true,\n-          \"name\": \"node\",\n-          \"type\": \"bytes32\"\n-        },\n-        {\n-          \"indexed\": true,\n-          \"name\": \"label\",\n-          \"type\": \"bytes32\"\n-        },\n-        {\n-          \"indexed\": false,\n-          \"name\": \"owner\",\n-          \"type\": \"address\"\n-        }\n-      ],\n-      \"name\": \"NewOwner\",\n-      \"type\": \"event\"\n-    },\n-    {\n-      \"anonymous\": false,\n-      \"inputs\": [\n-        {\n-          \"indexed\": true,\n-          \"name\": \"node\",\n-          \"type\": \"bytes32\"\n-        },\n-        {\n-          \"indexed\": false,\n-          \"name\": \"resolver\",\n-          \"type\": \"address\"\n-        }\n-      ],\n-      \"name\": \"NewResolver\",\n-      \"type\": \"event\"\n-    },\n-    {\n-      \"anonymous\": false,\n-      \"inputs\": [\n-        {\n-          \"indexed\": true,\n-          \"name\": \"node\",\n-          \"type\": \"bytes32\"\n-        },\n-        {\n-          \"indexed\": false,\n-          \"name\": \"ttl\",\n-          \"type\": \"uint64\"\n-        }\n-      ],\n-      \"name\": \"NewTTL\",\n-      \"type\": \"event\"\n-    }\n-  ],\n-  \"unlinked_binary\": \"0x3360206000015561021a806100146000396000f3630178b8bf60e060020a600035041415610020576004355460405260206040f35b6302571be360e060020a600035041415610044576020600435015460405260206040f35b6316a25cbd60e060020a600035041415610068576040600435015460405260206040f35b635b0fc9c360e060020a6000350414156100b557602060043501543314151561008f576002565b6024356020600435015560243560405260043560198061020160003960002060206040a2005b6306ab592360e060020a6000350414156101135760206004350154331415156100dc576002565b6044356020600435600052602435602052604060002001556044356040526024356004356021806101e060003960002060206040a3005b631896f70a60e060020a60003504141561015d57602060043501543314151561013a576002565b60243560043555602435604052600435601c806101c460003960002060206040a2005b6314ab903860e060020a6000350414156101aa576020600435015433141515610184576002565b602435604060043501556024356040526004356016806101ae60003960002060206040a2005b6002564e657754544c28627974657333322c75696e743634294e65775265736f6c76657228627974657333322c61646472657373294e65774f776e657228627974657333322c627974657333322c61646472657373295472616e7366657228627974657333322c6164647265737329\",\n-  \"networks\": {},\n-  \"schema_version\": \"0.0.5\",\n-  \"updated_at\": 1491026506835\n-}\n\\ No newline at end of file"
        },
        {
          "filename": "contracts/ENS.lll",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -2,6 +2,8 @@\n ;;; @title The Ethereum Name Service registry.\n ;;; @author Daniel Ellison <daniel@syrinx.net>\n \n+;;; @deprecated This file is only kept as a reference.\n+\n (seq\n \n   ;; --------------------------------------------------------------------------"
        },
        {
          "filename": "contracts/ENS.sol",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -14,13 +14,19 @@ interface ENS {\n     // Logged when the TTL of a node changes\n     event NewTTL(bytes32 indexed node, uint64 ttl);\n \n+    // Logged when an operator is added or removed.\n+    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n \n-    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\n+    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\n+    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\n+    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\n     function setResolver(bytes32 node, address resolver) external;\n     function setOwner(bytes32 node, address owner) external;\n     function setTTL(bytes32 node, uint64 ttl) external;\n+    function setApprovalForAll(address operator, bool approved) external;\n     function owner(bytes32 node) external view returns (address);\n     function resolver(bytes32 node) external view returns (address);\n     function ttl(bytes32 node) external view returns (uint64);\n-\n+    function recordExists(bytes32 node) external view returns (bool);\n+    function isApprovedForAll(address owner, address operator) external view returns (bool);\n }"
        },
        {
          "filename": "contracts/ENSRegistry.sol",
          "status": "modified",
          "additions": 92,
          "deletions": 13,
          "patch": "@@ -6,17 +6,20 @@ import \"./ENS.sol\";\n  * The ENS registry contract.\n  */\n contract ENSRegistry is ENS {\n+\n     struct Record {\n         address owner;\n         address resolver;\n         uint64 ttl;\n     }\n \n     mapping (bytes32 => Record) records;\n+    mapping (address => mapping(address => bool)) operators;\n \n     // Permits modifications only by the owner of the specified node.\n-    modifier only_owner(bytes32 node) {\n-        require(records[node].owner == msg.sender);\n+    modifier authorised(bytes32 node) {\n+        address owner = records[node].owner;\n+        require(owner == msg.sender || operators[owner][msg.sender]);\n         _;\n     }\n \n@@ -27,14 +30,39 @@ contract ENSRegistry is ENS {\n         records[0x0].owner = msg.sender;\n     }\n \n+    /**\n+     * @dev Sets the record for a node.\n+     * @param node The node to update.\n+     * @param owner The address of the new owner.\n+     * @param resolver The address of the resolver.\n+     * @param ttl The TTL in seconds.\n+     */\n+    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external {\n+        setOwner(node, owner);\n+        _setResolverAndTTL(node, resolver, ttl);\n+    }\n+\n+    /**\n+     * @dev Sets the record for a subnode.\n+     * @param node The parent node.\n+     * @param label The hash of the label specifying the subnode.\n+     * @param owner The address of the new owner.\n+     * @param resolver The address of the resolver.\n+     * @param ttl The TTL in seconds.\n+     */\n+    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external {\n+        bytes32 subnode = setSubnodeOwner(node, label, owner);\n+        _setResolverAndTTL(subnode, resolver, ttl);\n+    }\n+\n     /**\n      * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\n      * @param node The node to transfer ownership of.\n      * @param owner The address of the new owner.\n      */\n-    function setOwner(bytes32 node, address owner) external only_owner(node) {\n+    function setOwner(bytes32 node, address owner) public authorised(node) {\n+        _setOwner(node, owner);\n         emit Transfer(node, owner);\n-        records[node].owner = owner;\n     }\n \n     /**\n@@ -43,19 +71,20 @@ contract ENSRegistry is ENS {\n      * @param label The hash of the label specifying the subnode.\n      * @param owner The address of the new owner.\n      */\n-    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external only_owner(node) {\n+    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public authorised(node) returns(bytes32) {\n         bytes32 subnode = keccak256(abi.encodePacked(node, label));\n+        _setOwner(subnode, owner);\n         emit NewOwner(node, label, owner);\n-        records[subnode].owner = owner;\n+        return subnode;\n     }\n \n     /**\n      * @dev Sets the resolver address for the specified node.\n      * @param node The node to update.\n      * @param resolver The address of the resolver.\n      */\n-    function setResolver(bytes32 node, address resolver) external only_owner(node) {\n-        emit NewResolver(node, resolver);   \n+    function setResolver(bytes32 node, address resolver) public authorised(node) {\n+        emit NewResolver(node, resolver);\n         records[node].resolver = resolver;\n     }\n \n@@ -64,26 +93,42 @@ contract ENSRegistry is ENS {\n      * @param node The node to update.\n      * @param ttl The TTL in seconds.\n      */\n-    function setTTL(bytes32 node, uint64 ttl) external only_owner(node) {\n+    function setTTL(bytes32 node, uint64 ttl) public authorised(node) {\n         emit NewTTL(node, ttl);\n         records[node].ttl = ttl;\n     }\n \n+    /**\n+     * @dev Enable or disable approval for a third party (\"operator\") to manage\n+     *  all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.\n+     * @param operator Address to add to the set of authorized operators.\n+     * @param approved True if the operator is approved, false to revoke approval.\n+     */\n+    function setApprovalForAll(address operator, bool approved) external {\n+        operators[msg.sender][operator] = approved;\n+        emit ApprovalForAll(msg.sender, operator, approved);\n+    }\n+\n     /**\n      * @dev Returns the address that owns the specified node.\n      * @param node The specified node.\n      * @return address of the owner.\n      */\n-    function owner(bytes32 node) external view returns (address) {\n-        return records[node].owner;\n+    function owner(bytes32 node) public view returns (address) {\n+        address addr = records[node].owner;\n+        if (addr == address(this)) {\n+            return address(0x0);\n+        }\n+\n+        return addr;\n     }\n \n     /**\n      * @dev Returns the address of the resolver for the specified node.\n      * @param node The specified node.\n      * @return address of the resolver.\n      */\n-    function resolver(bytes32 node) external view returns (address) {\n+    function resolver(bytes32 node) public view returns (address) {\n         return records[node].resolver;\n     }\n \n@@ -92,8 +137,42 @@ contract ENSRegistry is ENS {\n      * @param node The specified node.\n      * @return ttl of the node.\n      */\n-    function ttl(bytes32 node) external view returns (uint64) {\n+    function ttl(bytes32 node) public view returns (uint64) {\n         return records[node].ttl;\n     }\n \n+    /**\n+     * @dev Returns whether a record has been imported to the registry.\n+     * @param node The specified node.\n+     * @return Bool if record exists\n+     */\n+    function recordExists(bytes32 node) public view returns (bool) {\n+        return records[node].owner != address(0x0);\n+    }\n+\n+    /**\n+     * @dev Query if an address is an authorized operator for another address.\n+     * @param owner The address that owns the records.\n+     * @param operator The address that acts on behalf of the owner.\n+     * @return True if `operator` is an approved operator for `owner`, false otherwise.\n+     */\n+    function isApprovedForAll(address owner, address operator) external view returns (bool) {\n+        return operators[owner][operator];\n+    }\n+\n+    function _setOwner(bytes32 node, address owner) internal {\n+        records[node].owner = owner;\n+    }\n+\n+    function _setResolverAndTTL(bytes32 node, address resolver, uint64 ttl) internal {\n+        if(resolver != records[node].resolver) {\n+            records[node].resolver = resolver;\n+            emit NewResolver(node, resolver);\n+        }\n+\n+        if(ttl != records[node].ttl) {\n+            records[node].ttl = ttl;\n+            emit NewTTL(node, ttl);\n+        }\n+    }\n }"
        },
        {
          "filename": "contracts/ENSRegistryWithFallback.sol",
          "status": "added",
          "additions": 67,
          "deletions": 0,
          "patch": "@@ -0,0 +1,67 @@\n+pragma solidity ^0.5.0;\n+\n+import \"./ENS.sol\";\n+import \"./ENSRegistry.sol\";\n+\n+/**\n+ * The ENS registry contract.\n+ */\n+contract ENSRegistryWithFallback is ENSRegistry {\n+\n+    ENS public old;\n+\n+    /**\n+     * @dev Constructs a new ENS registrar.\n+     */\n+    constructor(ENS _old) public ENSRegistry() {\n+        old = _old;\n+    }\n+\n+    /**\n+     * @dev Returns the address of the resolver for the specified node.\n+     * @param node The specified node.\n+     * @return address of the resolver.\n+     */\n+    function resolver(bytes32 node) public view returns (address) {\n+        if (!recordExists(node)) {\n+            return old.resolver(node);\n+        }\n+\n+        return super.resolver(node);\n+    }\n+\n+    /**\n+     * @dev Returns the address that owns the specified node.\n+     * @param node The specified node.\n+     * @return address of the owner.\n+     */\n+    function owner(bytes32 node) public view returns (address) {\n+        if (!recordExists(node)) {\n+            return old.owner(node);\n+        }\n+\n+        return super.owner(node);\n+    }\n+\n+    /**\n+     * @dev Returns the TTL of a node, and any records associated with it.\n+     * @param node The specified node.\n+     * @return ttl of the node.\n+     */\n+    function ttl(bytes32 node) public view returns (uint64) {\n+        if (!recordExists(node)) {\n+            return old.ttl(node);\n+        }\n+\n+        return super.ttl(node);\n+    }\n+\n+    function _setOwner(bytes32 node, address owner) internal {\n+        address addr = owner;\n+        if (addr == address(0x0)) {\n+            addr = address(this);\n+        }\n+\n+        super._setOwner(node, addr);\n+    }\n+}"
        },
        {
          "filename": "package-lock.json",
          "status": "modified",
          "additions": 193,
          "deletions": 32,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"@ensdomains/ens\",\n-  \"version\": \"0.3.10\",\n+  \"version\": \"0.4.0\",\n   \"lockfileVersion\": 1,\n   \"requires\": true,\n   \"dependencies\": {\n@@ -314,10 +314,13 @@\n       \"integrity\": \"sha1-RqoXUftqL5PuXmibsQh9SxTGwgU=\"\n     },\n     \"bindings\": {\n-      \"version\": \"1.3.0\",\n-      \"resolved\": \"https://registry.npmjs.org/bindings/-/bindings-1.3.0.tgz\",\n-      \"integrity\": \"sha512-DpLh5EzMR2kzvX1KIlVC0VkC3iZtHKTgdtZ0a3pglBZdaQFjt5S9g9xd1lE+YvXyfd6mtCeRnrUfOLYiTMlNSw==\",\n-      \"dev\": true\n+      \"version\": \"1.5.0\",\n+      \"resolved\": \"https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz\",\n+      \"integrity\": \"sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"file-uri-to-path\": \"1.0.0\"\n+      }\n     },\n     \"bluebird\": {\n       \"version\": \"3.5.3\",\n@@ -976,6 +979,15 @@\n       \"resolved\": \"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz\",\n       \"integrity\": \"sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=\"\n     },\n+    \"end-of-stream\": {\n+      \"version\": \"1.4.4\",\n+      \"resolved\": \"https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz\",\n+      \"integrity\": \"sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"once\": \"^1.4.0\"\n+      }\n+    },\n     \"enhanced-resolve\": {\n       \"version\": \"3.4.1\",\n       \"resolved\": \"https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-3.4.1.tgz\",\n@@ -1158,11 +1170,11 @@\n       \"integrity\": \"sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=\"\n     },\n     \"eth-ens-namehash\": {\n-      \"version\": \"1.0.2\",\n-      \"resolved\": \"https://registry.npmjs.org/eth-ens-namehash/-/eth-ens-namehash-1.0.2.tgz\",\n-      \"integrity\": \"sha1-Bezda6wtf9e8XKhKmTxrrZ2k7bk=\",\n+      \"version\": \"2.0.8\",\n+      \"resolved\": \"https://registry.npmjs.org/eth-ens-namehash/-/eth-ens-namehash-2.0.8.tgz\",\n+      \"integrity\": \"sha1-IprEbsqG1S4MmR58sq74P/D2i88=\",\n       \"requires\": {\n-        \"idna-uts46\": \"^1.0.1\",\n+        \"idna-uts46-hx\": \"^2.3.1\",\n         \"js-sha3\": \"^0.5.7\"\n       }\n     },\n@@ -1543,6 +1555,12 @@\n       \"integrity\": \"sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=\",\n       \"dev\": true\n     },\n+    \"file-uri-to-path\": {\n+      \"version\": \"1.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz\",\n+      \"integrity\": \"sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==\",\n+      \"dev\": true\n+    },\n     \"filename-regex\": {\n       \"version\": \"2.0.1\",\n       \"resolved\": \"https://registry.npmjs.org/filename-regex/-/filename-regex-2.0.1.tgz\",\n@@ -1690,7 +1708,8 @@\n         \"ansi-regex\": {\n           \"version\": \"2.1.1\",\n           \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz\",\n-          \"integrity\": \"sha1-w7M6te42DYbg5ijwRorn7yfWVN8=\"\n+          \"integrity\": \"sha1-w7M6te42DYbg5ijwRorn7yfWVN8=\",\n+          \"optional\": true\n         },\n         \"aproba\": {\n           \"version\": \"1.2.0\",\n@@ -1711,12 +1730,14 @@\n         \"balanced-match\": {\n           \"version\": \"1.0.0\",\n           \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz\",\n-          \"integrity\": \"sha1-ibTRmasr7kneFk6gK4nORi1xt2c=\"\n+          \"integrity\": \"sha1-ibTRmasr7kneFk6gK4nORi1xt2c=\",\n+          \"optional\": true\n         },\n         \"brace-expansion\": {\n           \"version\": \"1.1.11\",\n           \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n           \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n+          \"optional\": true,\n           \"requires\": {\n             \"balanced-match\": \"^1.0.0\",\n             \"concat-map\": \"0.0.1\"\n@@ -1731,17 +1752,20 @@\n         \"code-point-at\": {\n           \"version\": \"1.1.0\",\n           \"resolved\": \"https://registry.npmjs.org/code-point-at/-/code-point-at-1.1.0.tgz\",\n-          \"integrity\": \"sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c=\"\n+          \"integrity\": \"sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c=\",\n+          \"optional\": true\n         },\n         \"concat-map\": {\n           \"version\": \"0.0.1\",\n           \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n-          \"integrity\": \"sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=\"\n+          \"integrity\": \"sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=\",\n+          \"optional\": true\n         },\n         \"console-control-strings\": {\n           \"version\": \"1.1.0\",\n           \"resolved\": \"https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz\",\n-          \"integrity\": \"sha1-PXz0Rk22RG6mRL9LOVB/mFEAjo4=\"\n+          \"integrity\": \"sha1-PXz0Rk22RG6mRL9LOVB/mFEAjo4=\",\n+          \"optional\": true\n         },\n         \"core-util-is\": {\n           \"version\": \"1.0.2\",\n@@ -1858,7 +1882,8 @@\n         \"inherits\": {\n           \"version\": \"2.0.3\",\n           \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\",\n-          \"integrity\": \"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\"\n+          \"integrity\": \"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\",\n+          \"optional\": true\n         },\n         \"ini\": {\n           \"version\": \"1.3.5\",\n@@ -1870,6 +1895,7 @@\n           \"version\": \"1.0.0\",\n           \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz\",\n           \"integrity\": \"sha1-754xOG8DGn8NZDr4L95QxFfvAMs=\",\n+          \"optional\": true,\n           \"requires\": {\n             \"number-is-nan\": \"^1.0.0\"\n           }\n@@ -1884,19 +1910,22 @@\n           \"version\": \"3.0.4\",\n           \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",\n           \"integrity\": \"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",\n+          \"optional\": true,\n           \"requires\": {\n             \"brace-expansion\": \"^1.1.7\"\n           }\n         },\n         \"minimist\": {\n           \"version\": \"0.0.8\",\n           \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz\",\n-          \"integrity\": \"sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0=\"\n+          \"integrity\": \"sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0=\",\n+          \"optional\": true\n         },\n         \"minipass\": {\n           \"version\": \"2.2.4\",\n           \"resolved\": \"https://registry.npmjs.org/minipass/-/minipass-2.2.4.tgz\",\n           \"integrity\": \"sha512-hzXIWWet/BzWhYs2b+u7dRHlruXhwdgvlTMDKC6Cb1U7ps6Ac6yQlR39xsbjWJE377YTCtKwIXIpJ5oP+j5y8g==\",\n+          \"optional\": true,\n           \"requires\": {\n             \"safe-buffer\": \"^5.1.1\",\n             \"yallist\": \"^3.0.0\"\n@@ -1915,6 +1944,7 @@\n           \"version\": \"0.5.1\",\n           \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz\",\n           \"integrity\": \"sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=\",\n+          \"optional\": true,\n           \"requires\": {\n             \"minimist\": \"0.0.8\"\n           }\n@@ -1995,7 +2025,8 @@\n         \"number-is-nan\": {\n           \"version\": \"1.0.1\",\n           \"resolved\": \"https://registry.npmjs.org/number-is-nan/-/number-is-nan-1.0.1.tgz\",\n-          \"integrity\": \"sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=\"\n+          \"integrity\": \"sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=\",\n+          \"optional\": true\n         },\n         \"object-assign\": {\n           \"version\": \"4.1.1\",\n@@ -2007,6 +2038,7 @@\n           \"version\": \"1.4.0\",\n           \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\n           \"integrity\": \"sha1-WDsap3WWHUsROsF9nFC6753Xa9E=\",\n+          \"optional\": true,\n           \"requires\": {\n             \"wrappy\": \"1\"\n           }\n@@ -2092,7 +2124,8 @@\n         \"safe-buffer\": {\n           \"version\": \"5.1.1\",\n           \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.1.tgz\",\n-          \"integrity\": \"sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==\"\n+          \"integrity\": \"sha512-kKvNJn6Mm93gAczWVJg7wH+wGYWNrDHdWvpUmHyEsgCtIwwo3bqPtV4tR5tuPaUhTOo/kvhVwd8XwwOllGYkbg==\",\n+          \"optional\": true\n         },\n         \"safer-buffer\": {\n           \"version\": \"2.1.2\",\n@@ -2128,6 +2161,7 @@\n           \"version\": \"1.0.2\",\n           \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz\",\n           \"integrity\": \"sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=\",\n+          \"optional\": true,\n           \"requires\": {\n             \"code-point-at\": \"^1.0.0\",\n             \"is-fullwidth-code-point\": \"^1.0.0\",\n@@ -2147,6 +2181,7 @@\n           \"version\": \"3.0.1\",\n           \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz\",\n           \"integrity\": \"sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=\",\n+          \"optional\": true,\n           \"requires\": {\n             \"ansi-regex\": \"^2.0.0\"\n           }\n@@ -2190,12 +2225,14 @@\n         \"wrappy\": {\n           \"version\": \"1.0.2\",\n           \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n-          \"integrity\": \"sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=\"\n+          \"integrity\": \"sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=\",\n+          \"optional\": true\n         },\n         \"yallist\": {\n           \"version\": \"3.0.2\",\n           \"resolved\": \"https://registry.npmjs.org/yallist/-/yallist-3.0.2.tgz\",\n-          \"integrity\": \"sha1-hFK0u36Dx8GI2AQcGoN8dz1ti7k=\"\n+          \"integrity\": \"sha1-hFK0u36Dx8GI2AQcGoN8dz1ti7k=\",\n+          \"optional\": true\n         }\n       }\n     },\n@@ -2498,12 +2535,19 @@\n         \"safer-buffer\": \">= 2.1.2 < 3\"\n       }\n     },\n-    \"idna-uts46\": {\n-      \"version\": \"1.1.0\",\n-      \"resolved\": \"https://registry.npmjs.org/idna-uts46/-/idna-uts46-1.1.0.tgz\",\n-      \"integrity\": \"sha1-vgmLK3wcq/vvh6i4D2JvrDc2auo=\",\n+    \"idna-uts46-hx\": {\n+      \"version\": \"2.3.1\",\n+      \"resolved\": \"https://registry.npmjs.org/idna-uts46-hx/-/idna-uts46-hx-2.3.1.tgz\",\n+      \"integrity\": \"sha512-PWoF9Keq6laYdIRwwCdhTPl60xRqAloYNMQLiyUnG42VjT53oW07BXIRM+NK7eQjzXjAk2gUvX9caRxlnF9TAA==\",\n       \"requires\": {\n-        \"punycode\": \"^2.1.0\"\n+        \"punycode\": \"2.1.0\"\n+      },\n+      \"dependencies\": {\n+        \"punycode\": {\n+          \"version\": \"2.1.0\",\n+          \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-2.1.0.tgz\",\n+          \"integrity\": \"sha1-X4Y+3Im5bbCQdLrXlHvwkFbKTn0=\"\n+        }\n       }\n     },\n     \"ieee754\": {\n@@ -3025,6 +3069,15 @@\n         \"yallist\": \"^2.1.2\"\n       }\n     },\n+    \"map-age-cleaner\": {\n+      \"version\": \"0.1.3\",\n+      \"resolved\": \"https://registry.npmjs.org/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz\",\n+      \"integrity\": \"sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"p-defer\": \"^1.0.0\"\n+      }\n+    },\n     \"map-cache\": {\n       \"version\": \"0.2.2\",\n       \"resolved\": \"https://registry.npmjs.org/map-cache/-/map-cache-0.2.2.tgz\",\n@@ -3334,6 +3387,12 @@\n       \"resolved\": \"https://registry.npmjs.org/next-tick/-/next-tick-1.0.0.tgz\",\n       \"integrity\": \"sha1-yobR/ogoFpsBICCOPchCS524NCw=\"\n     },\n+    \"nice-try\": {\n+      \"version\": \"1.0.5\",\n+      \"resolved\": \"https://registry.npmjs.org/nice-try/-/nice-try-1.0.5.tgz\",\n+      \"integrity\": \"sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==\",\n+      \"dev\": true\n+    },\n     \"node-libs-browser\": {\n       \"version\": \"2.1.0\",\n       \"resolved\": \"https://registry.npmjs.org/node-libs-browser/-/node-libs-browser-2.1.0.tgz\",\n@@ -3553,11 +3612,23 @@\n         \"mem\": \"^1.1.0\"\n       }\n     },\n+    \"p-defer\": {\n+      \"version\": \"1.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/p-defer/-/p-defer-1.0.0.tgz\",\n+      \"integrity\": \"sha1-n26xgvbJqozXQwBKfU+WsZaw+ww=\",\n+      \"dev\": true\n+    },\n     \"p-finally\": {\n       \"version\": \"1.0.0\",\n       \"resolved\": \"https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz\",\n       \"integrity\": \"sha1-P7z7FbiZpEEjs0ttzBi3JDNqLK4=\"\n     },\n+    \"p-is-promise\": {\n+      \"version\": \"2.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/p-is-promise/-/p-is-promise-2.1.0.tgz\",\n+      \"integrity\": \"sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\",\n+      \"dev\": true\n+    },\n     \"p-limit\": {\n       \"version\": \"1.3.0\",\n       \"resolved\": \"https://registry.npmjs.org/p-limit/-/p-limit-1.3.0.tgz\",\n@@ -3794,6 +3865,16 @@\n         \"randombytes\": \"^2.0.1\"\n       }\n     },\n+    \"pump\": {\n+      \"version\": \"3.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/pump/-/pump-3.0.0.tgz\",\n+      \"integrity\": \"sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==\",\n+      \"dev\": true,\n+      \"requires\": {\n+        \"end-of-stream\": \"^1.1.0\",\n+        \"once\": \"^1.3.1\"\n+      }\n+    },\n     \"punycode\": {\n       \"version\": \"2.1.1\",\n       \"resolved\": \"https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz\",\n@@ -5328,9 +5409,9 @@\n       \"integrity\": \"sha1-WFhUf2spB1fulczMZm+1AITEYN0=\"\n     },\n     \"truffle\": {\n-      \"version\": \"5.0.0\",\n-      \"resolved\": \"https://registry.npmjs.org/truffle/-/truffle-5.0.0.tgz\",\n-      \"integrity\": \"sha512-la0TJu+E59Ut62i6cGY0sugeubglDqH5w49a7IrpxZ1nnsDqv6qWB3ibiyYiCp/jr+iI0bLtcr3DKkfQjVDd+g==\",\n+      \"version\": \"5.0.19\",\n+      \"resolved\": \"https://registry.npmjs.org/truffle/-/truffle-5.0.19.tgz\",\n+      \"integrity\": \"sha512-d4fxChHYCjccW33IO/4KLcGqjTDn+mw7vqdGvGi307CMo+KTtns+5c91+1iOKDQcSKiv8SHYgvtyF7cn/+FPAg==\",\n       \"dev\": true,\n       \"requires\": {\n         \"app-module-path\": \"^2.2.0\",\n@@ -5368,6 +5449,19 @@\n           \"integrity\": \"sha512-b0553uYA5YAEGgyYIGYROzKQ7X5RAqedkfjiZxwi0kL1g3bOaBNNZfYkzt/CL0umgD5wc9Jec2FbB98CjkMRvQ==\",\n           \"dev\": true\n         },\n+        \"cross-spawn\": {\n+          \"version\": \"6.0.5\",\n+          \"resolved\": \"https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz\",\n+          \"integrity\": \"sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"nice-try\": \"^1.0.4\",\n+            \"path-key\": \"^2.0.1\",\n+            \"semver\": \"^5.5.0\",\n+            \"shebang-command\": \"^1.2.0\",\n+            \"which\": \"^1.2.9\"\n+          }\n+        },\n         \"debug\": {\n           \"version\": \"3.1.0\",\n           \"resolved\": \"https://registry.npmjs.org/debug/-/debug-3.1.0.tgz\",\n@@ -5389,12 +5483,68 @@\n           \"integrity\": \"sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=\",\n           \"dev\": true\n         },\n+        \"execa\": {\n+          \"version\": \"1.0.0\",\n+          \"resolved\": \"https://registry.npmjs.org/execa/-/execa-1.0.0.tgz\",\n+          \"integrity\": \"sha512-adbxcyWV46qiHyvSp50TKt05tB4tK3HcmF7/nxfAdhnox83seTDbwnaqKO4sXRy7roHAIFqJP/Rw/AuEbX61LA==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"cross-spawn\": \"^6.0.0\",\n+            \"get-stream\": \"^4.0.0\",\n+            \"is-stream\": \"^1.1.0\",\n+            \"npm-run-path\": \"^2.0.0\",\n+            \"p-finally\": \"^1.0.0\",\n+            \"signal-exit\": \"^3.0.0\",\n+            \"strip-eof\": \"^1.0.0\"\n+          }\n+        },\n+        \"get-stream\": {\n+          \"version\": \"4.1.0\",\n+          \"resolved\": \"https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz\",\n+          \"integrity\": \"sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"pump\": \"^3.0.0\"\n+          }\n+        },\n         \"growl\": {\n           \"version\": \"1.10.3\",\n           \"resolved\": \"https://registry.npmjs.org/growl/-/growl-1.10.3.tgz\",\n           \"integrity\": \"sha512-hKlsbA5Vu3xsh1Cg3J7jSmX/WaW6A5oBeqzM88oNbCRQFz+zUaXm6yxS4RVytp1scBoJzSYl4YAEOQIt6O8V1Q==\",\n           \"dev\": true\n         },\n+        \"invert-kv\": {\n+          \"version\": \"2.0.0\",\n+          \"resolved\": \"https://registry.npmjs.org/invert-kv/-/invert-kv-2.0.0.tgz\",\n+          \"integrity\": \"sha512-wPVv/y/QQ/Uiirj/vh3oP+1Ww+AWehmi1g5fFWGPF6IpCBCDVrhgHRMvrLfdYcwDh3QJbGXDW4JAuzxElLSqKA==\",\n+          \"dev\": true\n+        },\n+        \"lcid\": {\n+          \"version\": \"2.0.0\",\n+          \"resolved\": \"https://registry.npmjs.org/lcid/-/lcid-2.0.0.tgz\",\n+          \"integrity\": \"sha512-avPEb8P8EGnwXKClwsNUgryVjllcRqtMYa49NTsbQagYuT1DcXnl1915oxWjoyGrXR6zH/Y0Zc96xWsPcoDKeA==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"invert-kv\": \"^2.0.0\"\n+          }\n+        },\n+        \"mem\": {\n+          \"version\": \"4.3.0\",\n+          \"resolved\": \"https://registry.npmjs.org/mem/-/mem-4.3.0.tgz\",\n+          \"integrity\": \"sha512-qX2bG48pTqYRVmDB37rn/6PT7LcR8T7oAX3bf99u1Tt1nzxYfxkgqDwUwolPlXweM0XzBOBFzSx4kfp7KP1s/w==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"map-age-cleaner\": \"^0.1.1\",\n+            \"mimic-fn\": \"^2.0.0\",\n+            \"p-is-promise\": \"^2.0.0\"\n+          }\n+        },\n+        \"mimic-fn\": {\n+          \"version\": \"2.1.0\",\n+          \"resolved\": \"https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz\",\n+          \"integrity\": \"sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==\",\n+          \"dev\": true\n+        },\n         \"mocha\": {\n           \"version\": \"4.1.0\",\n           \"resolved\": \"https://registry.npmjs.org/mocha/-/mocha-4.1.0.tgz\",\n@@ -5413,6 +5563,17 @@\n             \"supports-color\": \"4.4.0\"\n           }\n         },\n+        \"os-locale\": {\n+          \"version\": \"3.1.0\",\n+          \"resolved\": \"https://registry.npmjs.org/os-locale/-/os-locale-3.1.0.tgz\",\n+          \"integrity\": \"sha512-Z8l3R4wYWM40/52Z+S265okfFj8Kt2cC2MKY+xNi3kFs+XGI7WXu/I309QQQYbRW4ijiZ+yxs9pqEhJh0DqW3Q==\",\n+          \"dev\": true,\n+          \"requires\": {\n+            \"execa\": \"^1.0.0\",\n+            \"lcid\": \"^2.0.0\",\n+            \"mem\": \"^4.0.0\"\n+          }\n+        },\n         \"require-from-string\": {\n           \"version\": \"2.0.2\",\n           \"resolved\": \"https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz\",\n@@ -5452,16 +5613,16 @@\n           }\n         },\n         \"yargs\": {\n-          \"version\": \"11.1.0\",\n-          \"resolved\": \"http://registry.npmjs.org/yargs/-/yargs-11.1.0.tgz\",\n-          \"integrity\": \"sha512-NwW69J42EsCSanF8kyn5upxvjp5ds+t3+udGBeTbFnERA+lF541DDpMawzo4z6W/QrzNM18D+BPMiOBibnFV5A==\",\n+          \"version\": \"11.1.1\",\n+          \"resolved\": \"https://registry.npmjs.org/yargs/-/yargs-11.1.1.tgz\",\n+          \"integrity\": \"sha512-PRU7gJrJaXv3q3yQZ/+/X6KBswZiaQ+zOmdprZcouPYtQgvNU35i+68M4b1ZHLZtYFT5QObFLV+ZkmJYcwKdiw==\",\n           \"dev\": true,\n           \"requires\": {\n             \"cliui\": \"^4.0.0\",\n             \"decamelize\": \"^1.1.1\",\n             \"find-up\": \"^2.1.0\",\n             \"get-caller-file\": \"^1.0.1\",\n-            \"os-locale\": \"^2.0.0\",\n+            \"os-locale\": \"^3.1.0\",\n             \"require-directory\": \"^2.1.1\",\n             \"require-main-filename\": \"^1.0.1\",\n             \"set-blocking\": \"^2.0.0\","
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"name\": \"@ensdomains/ens\",\n-  \"version\": \"0.3.11\",\n+  \"version\": \"0.4.0\",\n   \"description\": \"Implementations for registrars and local resolvers for the Ethereum Name Service\",\n   \"scripts\": {\n     \"test\": \"truffle test\",\n@@ -21,7 +21,7 @@\n   \"homepage\": \"https://github.com/ensdomains/ens#readme\",\n   \"dependencies\": {\n     \"bluebird\": \"^3.5.2\",\n-    \"eth-ens-namehash\": \"^1.0.2\",\n+    \"eth-ens-namehash\": \"^2.0.8\",\n     \"ethereumjs-testrpc\": \"^6.0.3\",\n     \"ganache-cli\": \"^6.1.0\",\n     \"solc\": \"^0.4.20\",\n@@ -32,6 +32,6 @@\n     \"@ensdomains/test-utils\": \"^1.2.0\",\n     \"solidity-coverage\": \"^0.3.5\",\n     \"solium\": \"^1.0.4\",\n-    \"truffle\": \"^5.0.0\"\n+    \"truffle\": \"5.0.19\"\n   }\n }"
        },
        {
          "filename": "test/TestENS.js",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -4,8 +4,7 @@ const sha3 = require('web3-utils').sha3;\n const { exceptions } = require(\"@ensdomains/test-utils\")\n \n let contracts = [\n-    [artifacts.require('ENSRegistry.sol'), 'Solidity'],\n-    [artifacts.require('ENS.lll'), 'LLL']\n+    [artifacts.require('ENSRegistry.sol'), 'Solidity']\n ];\n \n contracts.forEach(function ([ENS, lang]) {\n@@ -87,7 +86,7 @@ contracts.forEach(function ([ENS, lang]) {\n         it('should allow the creation of subnodes', async () => {\n             let result = await ens.setSubnodeOwner('0x0', sha3('eth'), accounts[1], {from: accounts[0]});\n \n-            assert.equal(await ens.owner(namehash('eth')), accounts[1]);\n+            assert.equal(await ens.owner(namehash.hash('eth')), accounts[1]);\n \n             assert.equal(result.logs.length, 1);\n             let args = result.logs[0].args;"
        },
        {
          "filename": "test/TestENSRegistryWithFallback.js",
          "status": "added",
          "additions": 69,
          "deletions": 0,
          "patch": "@@ -0,0 +1,69 @@\n+const namehash = require('eth-ens-namehash');\n+const sha3 = require('web3-utils').sha3;\n+\n+const { exceptions } = require(\"@ensdomains/test-utils\")\n+\n+const ENS = artifacts.require('ENSRegistryWithFallback.sol');\n+\n+const ENSWithoutFallback = artifacts.require(\"ENSRegistry.sol\");\n+\n+contract('ENSRegistryWithFallback', function (accounts) {\n+\n+    let old;\n+    let ens;\n+\n+    beforeEach(async () => {\n+        old = await ENSWithoutFallback.new();\n+        ens = await ENS.new(old.address);\n+    });\n+\n+    it('should allow setting the record', async () => {\n+        let result = await ens.setRecord('0x0', accounts[1], accounts[2], 3600, {from: accounts[0]});\n+        assert.equal(result.logs.length, 3);\n+\n+        assert.equal((await ens.owner('0x0')), accounts[1]);\n+        assert.equal((await ens.resolver('0x0')), accounts[2]);\n+        assert.equal((await ens.ttl('0x0')).toNumber(), 3600);\n+    });\n+\n+    it('should allow setting subnode records', async () => {\n+        let result = await ens.setSubnodeRecord('0x0', sha3('test'), accounts[1], accounts[2], 3600, {from: accounts[0]});\n+\n+        let hash = namehash.hash(\"test\");\n+        assert.equal(await ens.owner(hash), accounts[1]);\n+        assert.equal(await ens.resolver(hash), accounts[2]);\n+        assert.equal((await ens.ttl(hash)).toNumber(), 3600);\n+    });\n+\n+    it('should implement authorisations/operators', async () => {\n+        await ens.setApprovalForAll(accounts[1], true, {from: accounts[0]});\n+        await ens.setOwner(\"0x0\", accounts[2], {from: accounts[1]});\n+        assert.equal(await ens.owner(\"0x0\"), accounts[2]);\n+    });\n+\n+    describe('fallback', async () => {\n+\n+        let hash = namehash.hash('eth');\n+\n+        beforeEach(async () => {\n+            await old.setSubnodeOwner('0x0', sha3('eth'), accounts[0], {from: accounts[0]});\n+        });\n+\n+        it('should use fallback ttl if owner not set', async () => {\n+            let hash = namehash.hash('eth')\n+            await old.setSubnodeOwner('0x0', sha3('eth'), accounts[0], {from: accounts[0]});\n+            await old.setTTL(hash, 3600, {from: accounts[0]});\n+            assert.equal((await ens.ttl(hash)).toNumber(), 3600);\n+        });\n+\n+        it('should use fallback owner if owner not set', async () => {\n+            await old.setOwner(hash, accounts[0], {from: accounts[0]});\n+            assert.equal(await ens.owner(hash), accounts[0]);\n+        });\n+\n+        it('should use fallback resolver if owner not set', async () => {\n+            await old.setResolver(hash, accounts[0], {from: accounts[0]});\n+            assert.equal(await ens.resolver(hash), accounts[0]);\n+        });\n+    });\n+});"
        },
        {
          "filename": "test/TestFIFSRegistrar.js",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -19,7 +19,7 @@ contract('FIFSRegistrar', function (accounts) {\n     it('should allow registration of names', async () => {\n         await registrar.register(sha3('eth'), accounts[0], {from: accounts[0]});\n         assert.equal(await ens.owner('0x0'), registrar.address);\n-        assert.equal(await ens.owner(namehash('eth')), accounts[0]);\n+        assert.equal(await ens.owner(namehash.hash('eth')), accounts[0]);\n     });\n \n     describe('transferring names', async () => {\n@@ -30,7 +30,7 @@ contract('FIFSRegistrar', function (accounts) {\n \n         it('should allow transferring name to your own', async () => {\n             await registrar.register(sha3('eth'), accounts[1], {from: accounts[0]});\n-            assert.equal(await ens.owner(namehash('eth')), accounts[1]);\n+            assert.equal(await ens.owner(namehash.hash('eth')), accounts[1]);\n         });\n \n         it('forbids transferring the name you do not own', async () => {\n@@ -44,4 +44,3 @@ contract('FIFSRegistrar', function (accounts) {\n         });\n     });\n });\n-"
        },
        {
          "filename": "test/TestReverseRegistrar.js",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -11,13 +11,13 @@ contract('ReverseRegistar', function (accounts) {\n     let registrar, resolver, ens;\n \n     beforeEach(async () => {\n-        node = namehash(accounts[0].slice(2).toLowerCase() + \".addr.reverse\");\n+        node = namehash.hash(accounts[0].slice(2).toLowerCase() + \".addr.reverse\");\n         ens = await ENS.new();\n         resolver = await DummyResolver.new();\n         registrar = await ReverseRegistrar.new(ens.address, resolver.address);\n \n         await ens.setSubnodeOwner('0x0', sha3('reverse'), accounts[0], {from: accounts[0]});\n-        await ens.setSubnodeOwner(namehash('reverse'), sha3('addr'), registrar.address, {from: accounts[0]});\n+        await ens.setSubnodeOwner(namehash.hash('reverse'), sha3('addr'), registrar.address, {from: accounts[0]});\n     });\n \n     it('should calculate node hash correctly', async () => {"
        },
        {
          "filename": "test/TestTestRegistrar.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -11,7 +11,7 @@ contract('TestRegistrar', function (accounts) {\n     let registrar, ens;\n \n     beforeEach(async () => {\n-        node = namehash('eth');\n+        node = namehash.hash('eth');\n \n         ens = await ENS.new();\n         registrar = await TestRegistrar.new(ens.address, '0x0');"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 3,
        "dependency_files": 1,
        "test_files": 5,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5ea18f062b1eac4b81145dfed073dfb99b692642",
            "date": "2023-09-27T04:12:02Z",
            "author_login": "LeonmanRolls"
          },
          {
            "sha": "ff0f41747c05f1598973b0fe7ad0d9e09565dfcd",
            "date": "2021-01-27T22:59:06Z",
            "author_login": "ca98am79"
          },
          {
            "sha": "1d52240acf8fd3cd24d8490a2a0d45c08600f05c",
            "date": "2021-01-25T20:34:48Z",
            "author_login": "ca98am79"
          },
          {
            "sha": "fd7794535840385bed5aa79a44ab2ac2bcec44a6",
            "date": "2021-01-25T01:54:16Z",
            "author_login": "Arachnid"
          },
          {
            "sha": "7408ee91f33f605d0f90895fde56e8070694e2da",
            "date": "2021-01-25T00:35:47Z",
            "author_login": "Arachnid"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-285",
    "description": "A user who owns an ENS domain can set a trapdoor, allowing them to transfer ownership to another user, and later regain ownership without the new owners consent or awareness. A new ENS deployment is being rolled out that fixes this vulnerability in the ENS registry.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-01-31T00:15:09.973",
    "last_modified": "2024-11-21T05:33:43.693",
    "fix_date": "2020-01-30T01:27:40Z"
  },
  "references": [
    {
      "url": "https://github.com/ensdomains/ens/commit/36e10e71fcddcade88646821e0a57cc6c19e1ecf",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ensdomains/ens/security/advisories/GHSA-8f9f-pc5v-9r5h",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ensdomains/ens/commit/36e10e71fcddcade88646821e0a57cc6c19e1ecf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ensdomains/ens/security/advisories/GHSA-8f9f-pc5v-9r5h",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:37.504692",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "ens",
    "owner": "ensdomains",
    "created_at": "2016-05-29T11:31:55Z",
    "updated_at": "2025-01-07T19:31:45Z",
    "pushed_at": "2023-09-27T04:12:02Z",
    "size": 3938,
    "stars": 1161,
    "forks": 512,
    "open_issues": 92,
    "watchers": 1161,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "JavaScript": 62764,
      "Solidity": 16633
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-2-clause"
    },
    "collected_at": "2025-01-26T08:30:25.966475"
  }
}