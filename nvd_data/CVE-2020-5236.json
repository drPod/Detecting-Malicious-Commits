{
  "cve_id": "CVE-2020-5236",
  "github_data": {
    "repository": "Pylons/waitress",
    "fix_commit": "6e46f9e3f014d64dd7d1e258eaf626e39870ee1f",
    "related_commits": [
      "6e46f9e3f014d64dd7d1e258eaf626e39870ee1f",
      "6e46f9e3f014d64dd7d1e258eaf626e39870ee1f"
    ],
    "patch_url": "https://github.com/Pylons/waitress/commit/6e46f9e3f014d64dd7d1e258eaf626e39870ee1f.patch",
    "fix_commit_details": {
      "sha": "6e46f9e3f014d64dd7d1e258eaf626e39870ee1f",
      "commit_date": "2020-02-03T05:45:15Z",
      "author": {
        "login": "digitalresistor",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-73m2-3pwg-5fgc",
        "length": 96,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 34,
        "additions": 28,
        "deletions": 6
      },
      "files": [
        {
          "filename": "waitress/rfc7230.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -40,13 +40,13 @@\n #                  field-vchar ]\n \n FIELD_VCHAR = \"[\" + VCHAR + OBS_TEXT + \"]\"\n-FIELD_CONTENT = FIELD_VCHAR + \"([ \\t\" + VCHAR + OBS_TEXT + \"]+\" + FIELD_VCHAR + \"){,1}\"\n-FIELD_VALUE = \"(\" + FIELD_CONTENT + \"){0,}\"\n+# Field content is more greedy than the ABNF, in that it will match the whole value\n+FIELD_CONTENT = FIELD_VCHAR + \"+(?:[ \\t]+\" + FIELD_VCHAR + \"+)*\"\n+# Which allows the field value here to just see if there is even a value in the first place\n+FIELD_VALUE = \"(?:\" + FIELD_CONTENT + \")?\"\n \n HEADER_FIELD = re.compile(\n     tobytes(\n         \"^(?P<name>\" + TOKEN + \"):\" + OWS + \"(?P<value>\" + FIELD_VALUE + \")\" + OWS + \"$\"\n     )\n )\n-\n-OWS_STRIP = re.compile(OWS + \"(?P<value>.*?)\" + OWS)"
        },
        {
          "filename": "waitress/tests/test_parser.py",
          "status": "modified",
          "additions": 24,
          "deletions": 2,
          "patch": "@@ -55,6 +55,7 @@ def test_received_bad_host_header(self):\n \n     def test_received_bad_transfer_encoding(self):\n         from waitress.utilities import ServerNotImplemented\n+\n         data = (\n             b\"GET /foobar HTTP/1.1\\r\\n\"\n             b\"Transfer-Encoding: foo\\r\\n\"\n@@ -211,7 +212,6 @@ def test_parse_header_11_te_chunked(self):\n         self.parser.parse_header(data)\n         self.assertEqual(self.parser.body_rcv.__class__.__name__, \"ChunkedReceiver\")\n \n-\n     def test_parse_header_transfer_encoding_invalid(self):\n         from waitress.parser import TransferEncodingNotImplemented\n \n@@ -377,7 +377,7 @@ def test_parse_header_invalid_folding_spacing(self):\n     def test_parse_header_invalid_chars(self):\n         from waitress.parser import ParsingError\n \n-        data = b\"GET /foobar HTTP/1.1\\r\\nfoo: bar\\r\\n\\foo: \\x0bbaz\\r\\n\"\n+        data = b\"GET /foobar HTTP/1.1\\r\\nfoo: bar\\r\\nfoo: \\x0bbaz\\r\\n\"\n         try:\n             self.parser.parse_header(data)\n         except ParsingError as e:\n@@ -433,6 +433,28 @@ def test_parse_header_multiple_values_extra_space(self):\n         self.assertIn(\"FOO\", self.parser.headers)\n         self.assertEqual(self.parser.headers[\"FOO\"], \"abrowser/0.001 (C O M M E N T)\")\n \n+    def test_parse_header_invalid_backtrack_bad(self):\n+        from waitress.parser import ParsingError\n+\n+        data = b\"GET /foobar HTTP/1.1\\r\\nfoo: bar\\r\\nfoo: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\x10\\r\\n\"\n+        try:\n+            self.parser.parse_header(data)\n+        except ParsingError as e:\n+            self.assertIn(\"Invalid header\", e.args[0])\n+        else:  # pragma: nocover\n+            self.assertTrue(False)\n+\n+    def test_parse_header_short_values(self):\n+        from waitress.parser import ParsingError\n+\n+        data = b\"GET /foobar HTTP/1.1\\r\\none: 1\\r\\ntwo: 22\\r\\n\"\n+        self.parser.parse_header(data)\n+\n+        self.assertIn(\"ONE\", self.parser.headers)\n+        self.assertIn(\"TWO\", self.parser.headers)\n+        self.assertEqual(self.parser.headers[\"ONE\"], \"1\")\n+        self.assertEqual(self.parser.headers[\"TWO\"], \"22\")\n+\n \n class Test_split_uri(unittest.TestCase):\n     def _callFUT(self, uri):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fc592e804a1aed87654c1ad21337dad86582c71f",
            "date": "2024-11-25T01:07:27Z",
            "author_login": "mmerickel"
          },
          {
            "sha": "7a19337321c43b81076da20bc9c4e2e077a7e01c",
            "date": "2024-11-24T19:55:09Z",
            "author_login": "kgaughan"
          },
          {
            "sha": "2a1524a9b5786459786a4b86e5b2f09d1041e53d",
            "date": "2024-11-23T19:40:01Z",
            "author_login": "kgaughan"
          },
          {
            "sha": "b11ae729cc51ca2998a1ad9b4992b34f34ac95e7",
            "date": "2024-11-16T19:46:41Z",
            "author_login": "digitalresistor"
          },
          {
            "sha": "38ffad094b785168aba197f6b6d8df5de713cc2b",
            "date": "2024-11-16T19:39:00Z",
            "author_login": "digitalresistor"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "Waitress version 1.4.2 allows a DOS attack When waitress receives a header that contains invalid characters. When a header like \"Bad-header: xxxxxxxxxxxxxxx\\x10\" is received, it will cause the regular expression engine to catastrophically backtrack causing the process to use 100% CPU time and blocking any other interactions. This allows an attacker to send a single request with an invalid header and take the service offline. This issue was introduced in version 1.4.2 when the regular expression was updated to attempt to match the behaviour required by errata associated with RFC7230. The regular expression that is used to validate incoming headers has been updated in version 1.4.3, it is recommended that people upgrade to the new version of Waitress as soon as possible.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-02-04T03:15:10.750",
    "last_modified": "2024-11-21T05:33:44.180",
    "fix_date": "2020-02-03T05:45:15Z"
  },
  "references": [
    {
      "url": "https://github.com/Pylons/waitress/commit/6e46f9e3f014d64dd7d1e258eaf626e39870ee1f",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Pylons/waitress/security/advisories/GHSA-73m2-3pwg-5fgc",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Pylons/waitress/commit/6e46f9e3f014d64dd7d1e258eaf626e39870ee1f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Pylons/waitress/security/advisories/GHSA-73m2-3pwg-5fgc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:37.509876",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "waitress",
    "owner": "Pylons",
    "created_at": "2011-12-17T06:58:21Z",
    "updated_at": "2025-01-11T21:17:13Z",
    "pushed_at": "2024-11-25T01:07:27Z",
    "size": 1868,
    "stars": 1467,
    "forks": 178,
    "open_issues": 16,
    "watchers": 1467,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 495340
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:00:04.687602"
  }
}