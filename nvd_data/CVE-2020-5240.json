{
  "cve_id": "CVE-2020-5240",
  "github_data": {
    "repository": "labd/wagtail-2fa",
    "fix_commit": "ac23550d33b7436e90e3beea904647907eba5b74",
    "related_commits": [
      "ac23550d33b7436e90e3beea904647907eba5b74",
      "ac23550d33b7436e90e3beea904647907eba5b74"
    ],
    "patch_url": "https://github.com/labd/wagtail-2fa/commit/ac23550d33b7436e90e3beea904647907eba5b74.patch",
    "fix_commit_details": {
      "sha": "ac23550d33b7436e90e3beea904647907eba5b74",
      "commit_date": "2020-02-10T13:58:24Z",
      "author": {
        "login": "nnist",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent unauthorized users managing others' device",
        "length": 312,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 96,
        "additions": 94,
        "deletions": 2
      },
      "files": [
        {
          "filename": "src/wagtail_2fa/views.py",
          "status": "modified",
          "additions": 21,
          "deletions": 0,
          "patch": "@@ -1,3 +1,4 @@\n+from django.core.exceptions import PermissionDenied\n import qrcode\n import qrcode.image.svg\n from django.conf import settings\n@@ -75,6 +76,15 @@ def get_context_data(self, **kwargs):\n         context['user_id'] = int(self.kwargs['user_id'])\n         return context\n \n+    def dispatch(self, request, *args, **kwargs):\n+        if (int(self.kwargs[\"user_id\"]) == request.user.pk or\n+                request.user.has_perm(\"user.change_user\")):\n+            if not self.user_allowed(request.user):\n+                return self.handle_no_permission(request)\n+\n+            return super(OtpRequiredMixin, self).dispatch(request, *args, **kwargs)\n+        raise PermissionDenied\n+\n \n class DeviceCreateView(OtpRequiredMixin, FormView):\n     form_class = forms.DeviceForm\n@@ -134,6 +144,17 @@ def get_queryset(self):\n     def get_success_url(self):\n         return reverse('wagtail_2fa_device_list', kwargs={'user_id': self.request.POST.get('user_id')})\n \n+    def dispatch(self, request, *args, **kwargs):\n+        device = TOTPDevice.objects.get(**self.kwargs)\n+\n+        if device.user.pk == request.user.pk or request.user.has_perm(\"user.change_user\"):\n+            if not self.user_allowed(request.user):\n+                return self.handle_no_permission(request)\n+\n+            return super(OtpRequiredMixin, self).dispatch(request, *args, **kwargs)\n+\n+        raise PermissionDenied\n+\n \n class DeviceQRCodeView(OtpRequiredMixin, View):\n     # require OTP if configured"
        },
        {
          "filename": "tests/test_views.py",
          "status": "modified",
          "additions": 73,
          "deletions": 2,
          "patch": "@@ -1,12 +1,16 @@\n+import pytest\n+from django.core.exceptions import PermissionDenied\n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n from django.test import override_settings\n from unittest.mock import patch\n+from django.http.response import Http404\n \n from django.contrib.auth import get_user_model\n from django.urls import reverse\n from django_otp import DEVICE_ID_SESSION_KEY\n from django_otp.plugins.otp_totp.models import TOTPDevice\n-from wagtail_2fa.views import DeviceListView\n-\n+from wagtail_2fa.views import DeviceListView, DeviceDeleteView, DeviceUpdateView\n \n def test_device_list_view(admin_client, admin_user, django_assert_num_queries):\n     with override_settings(WAGTAIL_2FA_REQUIRED=True):\n@@ -129,3 +133,70 @@ def test_delete_user_device_unauthorized(client, user, monkeypatch):\n         })\n         assert response.status_code == 302\n         assert TOTPDevice.objects.all().count() == 1\n+\n+\n+class TestViewsChangeUserPermission:\n+    \"\"\"Test suite which ensures that:\n+        - users without the change_user permission cannot manage other users' 2FA devices\n+        - users can manage their own devices\n+    \"\"\"\n+\n+    def test_verified_user_has_no_change_user_perm(self, verified_user):\n+        \"\"\"Sanity check.\"\"\"\n+        assert not verified_user.has_perm(\"user.change_user\")\n+\n+    def test_device_list_view_for_own_user_returns_200(self, verified_user, rf):\n+        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n+            request = rf.get('foo')\n+            request.user = verified_user\n+\n+            response = DeviceListView.as_view()(request, user_id=verified_user.id)\n+            assert response.status_code == 200\n+\n+    def test_device_list_view_for_other_user_raises_error(self, user, verified_user, rf):\n+        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n+            request = rf.get('foo')\n+            request.user = verified_user\n+\n+            with pytest.raises(PermissionDenied):\n+                response = DeviceListView.as_view()(request, user_id=user.id)\n+\n+    def test_device_delete_view_for_own_user_returns_200(self, verified_user, rf):\n+        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n+            device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()\n+            request = rf.get('foo')\n+            request.user = verified_user\n+\n+            response = DeviceDeleteView.as_view()(request, pk=device.id)\n+            assert response.status_code == 200\n+\n+    def test_device_delete_view_for_other_user_raises_error(self, user, verified_user, rf):\n+        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n+            other_device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n+\n+            device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()\n+            request = rf.get('foo')\n+            request.user = verified_user\n+\n+            with pytest.raises(PermissionDenied):\n+                response = DeviceDeleteView.as_view()(request, pk=other_device.id)\n+\n+    def test_device_update_view_for_own_user_returns_200(self, verified_user, rf):\n+        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n+            device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()\n+            request = rf.get('foo')\n+            request.user = verified_user\n+\n+            response = DeviceUpdateView.as_view()(request, pk=device.id)\n+            assert response.status_code == 200\n+\n+    def test_device_update_view_for_other_user_raises_error(self, user, verified_user, rf):\n+        with override_settings(WAGTAIL_2FA_REQUIRED=True):\n+            other_device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)\n+\n+            device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()\n+            request = rf.get('foo')\n+            request.user = verified_user\n+\n+            with pytest.raises(Http404):\n+                response = DeviceUpdateView.as_view()(request, pk=other_device.id)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d62fc818ba851fa94f86e76b12f847f1e09d5848",
            "date": "2023-12-20T13:13:53Z",
            "author_login": "davisnando"
          },
          {
            "sha": "66d0a6ad2d01c584f961a256236c3d602da016c7",
            "date": "2023-12-20T13:13:20Z",
            "author_login": "davisnando"
          },
          {
            "sha": "848c77014656e63b0326ab35c54aaf576f769d82",
            "date": "2023-12-20T11:21:51Z",
            "author_login": "davisnando"
          },
          {
            "sha": "8fb0b10537f2adc8ee303f33b67799a2132dbcde",
            "date": "2023-12-20T11:21:16Z",
            "author_login": "davisnando"
          },
          {
            "sha": "e1921405ed4b4d3218f765d705f09222f4d70d28",
            "date": "2023-12-20T10:43:06Z",
            "author_login": "davisnando"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:H/A:N",
    "cwe_id": "CWE-285",
    "description": "In wagtail-2fa before 1.4.1, any user with access to the CMS can view and delete other users 2FA devices by going to the correct path. The user does not require special permissions in order to do so. By deleting the other users device they can disable the target users 2FA devices and potentially compromise the account if they figure out their password. The problem has been patched in version 1.4.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-03-13T22:15:11.217",
    "last_modified": "2024-11-21T05:33:44.687",
    "fix_date": "2020-02-10T13:58:24Z"
  },
  "references": [
    {
      "url": "https://github.com/labd/wagtail-2fa/commit/ac23550d33b7436e90e3beea904647907eba5b74",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/labd/wagtail-2fa/security/advisories/GHSA-9gjv-6qq6-v7qm",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/labd/wagtail-2fa/commit/ac23550d33b7436e90e3beea904647907eba5b74",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/labd/wagtail-2fa/security/advisories/GHSA-9gjv-6qq6-v7qm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:42.265454",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wagtail-2fa",
    "owner": "labd",
    "created_at": "2018-03-16T10:47:56Z",
    "updated_at": "2024-12-29T16:26:18Z",
    "pushed_at": "2024-08-19T12:06:00Z",
    "size": 282,
    "stars": 86,
    "forks": 44,
    "open_issues": 28,
    "watchers": 86,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 64321,
      "HTML": 15459,
      "Makefile": 621
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T17:53:18.843449"
  }
}