{
  "cve_id": "CVE-2020-5245",
  "github_data": {
    "repository": "dropwizard/dropwizard",
    "fix_commit": "28479f743a9d0aab6d0e963fc07f3dd98e8c8236",
    "related_commits": [
      "28479f743a9d0aab6d0e963fc07f3dd98e8c8236",
      "d87d1e4f8e20f6494c0232bf8560c961b46db634",
      "28479f743a9d0aab6d0e963fc07f3dd98e8c8236",
      "d87d1e4f8e20f6494c0232bf8560c961b46db634"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "28479f743a9d0aab6d0e963fc07f3dd98e8c8236",
      "commit_date": "2020-02-20T02:09:06Z",
      "author": {
        "login": "joschi",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Escape EL expressions in ViolationCollector (#3160)",
        "length": 146,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 145,
        "additions": 124,
        "deletions": 21
      },
      "files": [
        {
          "filename": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
          "status": "modified",
          "additions": 75,
          "deletions": 5,
          "patch": "@@ -1,12 +1,16 @@\n package io.dropwizard.validation.selfvalidating;\n \n+import javax.annotation.Nullable;\n import javax.validation.ConstraintValidatorContext;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * This class is a simple wrapper around the ConstraintValidatorContext of hibernate validation.\n  * It collects all the violations of the SelfValidation methods of an object.\n  */\n public class ViolationCollector {\n+    private static final Pattern ESCAPE_PATTERN = Pattern.compile(\"\\\\$\\\\{\");\n \n     private boolean violationOccurred = false;\n     private ConstraintValidatorContext context;\n@@ -17,14 +21,80 @@ public ViolationCollector(ConstraintValidatorContext context) {\n     }\n \n     /**\n-     * Adds a new violation to this collector. This also sets violationOccurred to true.\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n      *\n-     * @param msg the message of the violation\n+     * @param message the message of the violation (any EL expression will be escaped and not parsed)\n      */\n-    public void addViolation(String msg) {\n+    public void addViolation(String message) {\n         violationOccurred = true;\n-        context.buildConstraintViolationWithTemplate(msg)\n-            .addConstraintViolation();\n+        String messageTemplate = escapeEl(message);\n+        context.buildConstraintViolationWithTemplate(messageTemplate)\n+                .addConstraintViolation();\n+    }\n+\n+    /**\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     *\n+     * @param propertyName the name of the property\n+     * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n+     * @since 1.3.19\n+     */\n+    public void addViolation(String propertyName, String message) {\n+        violationOccurred = true;\n+        String messageTemplate = escapeEl(message);\n+        context.buildConstraintViolationWithTemplate(messageTemplate)\n+                .addPropertyNode(propertyName)\n+                .addConstraintViolation();\n+    }\n+\n+    /**\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     *\n+     * @param propertyName the name of the property with the violation\n+     * @param index        the index of the element with the violation\n+     * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n+     * @since 1.3.19\n+     */\n+    public void addViolation(String propertyName, Integer index, String message) {\n+        violationOccurred = true;\n+        String messageTemplate = escapeEl(message);\n+        context.buildConstraintViolationWithTemplate(messageTemplate)\n+                .addPropertyNode(propertyName)\n+                .addBeanNode().inIterable().atIndex(index)\n+                .addConstraintViolation();\n+    }\n+\n+    /**\n+     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n+     *\n+     * @param propertyName the name of the property with the violation\n+     * @param key          the key of the element with the violation\n+     * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n+     * @since 1.3.19\n+     */\n+    public void addViolation(String propertyName, String key, String message) {\n+        violationOccurred = true;\n+        String messageTemplate = escapeEl(message);\n+        context.buildConstraintViolationWithTemplate(messageTemplate)\n+                .addPropertyNode(propertyName)\n+                .addBeanNode().inIterable().atKey(key)\n+                .addConstraintViolation();\n+    }\n+\n+    @Nullable\n+    private String escapeEl(@Nullable String s) {\n+        if (s == null || s.isEmpty()) {\n+            return s;\n+        }\n+\n+        final Matcher m = ESCAPE_PATTERN.matcher(s);\n+        final StringBuffer sb = new StringBuffer(s.length() + 16);\n+        while (m.find()) {\n+            m.appendReplacement(sb, \"\\\\\\\\\\\\${\");\n+        }\n+        m.appendTail(sb);\n+\n+        return sb.toString();\n     }\n \n     /**"
        },
        {
          "filename": "dropwizard-validation/src/test/java/io/dropwizard/validation/SelfValidationTest.java",
          "status": "modified",
          "additions": 49,
          "deletions": 16,
          "patch": "@@ -10,11 +10,11 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n public class SelfValidationTest {\n-\n     private static final String FAILED = \"failed\";\n \n     @SelfValidating\n     public static class FailingExample {\n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void validateFail(ViolationCollector col) {\n             col.addViolation(FAILED);\n@@ -23,6 +23,7 @@ public void validateFail(ViolationCollector col) {\n \n     @SelfValidating\n     public static class DirectContextExample {\n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void validateFail(ViolationCollector col) {\n             col.getContext().buildConstraintViolationWithTemplate(FAILED).addConstraintViolation();\n@@ -51,34 +52,44 @@ public void validateFailAdditionalParameters(ViolationCollector col, int a) {\n             col.addViolation(FAILED);\n         }\n \n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public boolean validateFailReturn(ViolationCollector col) {\n             col.addViolation(FAILED);\n             return true;\n         }\n \n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         private void validateFailPrivate(ViolationCollector col) {\n             col.addViolation(FAILED);\n         }\n     }\n \n-\n     @SelfValidating\n     public static class ComplexExample {\n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void validateFail1(ViolationCollector col) {\n             col.addViolation(FAILED + \"1\");\n         }\n \n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void validateFail2(ViolationCollector col) {\n-            col.addViolation(FAILED + \"2\");\n+            col.addViolation(\"p2\", FAILED);\n         }\n \n+        @SuppressWarnings(\"unused\")\n         @SelfValidation\n         public void validateFail3(ViolationCollector col) {\n-            col.addViolation(FAILED + \"3\");\n+            col.addViolation(\"p\", 3, FAILED);\n+        }\n+\n+        @SuppressWarnings(\"unused\")\n+        @SelfValidation\n+        public void validateFail4(ViolationCollector col) {\n+            col.addViolation(\"p\", \"four\", FAILED);\n         }\n \n         @SuppressWarnings(\"unused\")\n@@ -91,42 +102,54 @@ public void validateCorrect(ViolationCollector col) {\n     public static class NoValidations {\n     }\n \n+    @SelfValidating\n+    public static class InjectionExample {\n+        @SuppressWarnings(\"unused\")\n+        @SelfValidation\n+        public void validateFail(ViolationCollector col) {\n+            col.addViolation(\"${'value'}\");\n+            col.addViolation(\"${'property'}\", \"${'value'}\");\n+            col.addViolation(\"${'property'}\", 1, \"${'value'}\");\n+            col.addViolation(\"${'property'}\", \"${'key'}\", \"${'value'}\");\n+        }\n+    }\n+\n     private final Validator validator = BaseValidator.newValidator();\n \n     @Test\n-    public void failingExample() throws Exception {\n+    public void failingExample() {\n         assertThat(ConstraintViolations.format(validator.validate(new FailingExample())))\n             .containsOnly(\" \" + FAILED);\n     }\n \n     @Test\n-    public void correctExample() throws Exception {\n+    public void correctExample() {\n         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))\n             .isEmpty();\n     }\n \n     @Test\n-    public void multipleTestingOfSameClass() throws Exception {\n+    public void multipleTestingOfSameClass() {\n         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))\n-            .isEmpty();\n+                .isEmpty();\n         assertThat(ConstraintViolations.format(validator.validate(new CorrectExample())))\n             .isEmpty();\n     }\n \n     @Test\n-    public void testDirectContextUsage() throws Exception {\n+    public void testDirectContextUsage() {\n         assertThat(ConstraintViolations.format(validator.validate(new DirectContextExample())))\n             .containsOnly(\" \" + FAILED);\n     }\n \n     @Test\n-    public void complexExample() throws Exception {\n+    public void complexExample() {\n         assertThat(ConstraintViolations.format(validator.validate(new ComplexExample())))\n-            .containsOnly(\n-                \" \" + FAILED + \"1\",\n-                \" \" + FAILED + \"2\",\n-                \" \" + FAILED + \"3\"\n-            );\n+                .containsExactly(\n+                        \" failed1\",\n+                        \"p2 failed\",\n+                        \"p[3] failed\",\n+                        \"p[four] failed\");\n     }\n \n     @Test\n@@ -136,8 +159,18 @@ public void invalidExample() throws Exception {\n     }\n \n     @Test\n-    public void giveWarningIfNoValidationMethods() throws Exception {\n+    public void giveWarningIfNoValidationMethods() {\n         assertThat(ConstraintViolations.format(validator.validate(new NoValidations())))\n             .isEmpty();\n     }\n+\n+    @Test\n+    public void violationMessagesAreEscaped() {\n+        assertThat(ConstraintViolations.format(validator.validate(new InjectionExample()))).containsExactly(\n+                \" ${'value'}\",\n+                \"${'property'} ${'value'}\",\n+                \"${'property'}[${'key'}] ${'value'}\",\n+                \"${'property'}[1] ${'value'}\"\n+        );\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4140ad301e8bdb818b7a5569c4a7deade99dbc14",
            "date": "2025-01-24T21:40:59Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "b6cf7d9c7f237083fdaf0a7be6fb20c9c4bb5e47",
            "date": "2025-01-24T21:20:59Z",
            "author_login": "joschi"
          },
          {
            "sha": "e878e45460fa7c08b694f55e1d0f69702d0aafa8",
            "date": "2025-01-20T08:20:08Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "e852a2de1beb2ba1d38f3fb1318769d7d04a6955",
            "date": "2025-01-20T07:58:10Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "28d7b1c2f59b662c245f121904b1eae06b96e0f1",
            "date": "2025-01-20T06:07:12Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:L",
    "cwe_id": "CWE-74",
    "description": "Dropwizard-Validation before 1.3.19, and 2.0.2 may allow arbitrary code execution on the host system, with the privileges of the Dropwizard service account, by injecting arbitrary Java Expression Language expressions when using the self-validating feature.\n\nThe issue has been fixed in dropwizard-validation 1.3.19 and 2.0.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-02-24T18:15:22.477",
    "last_modified": "2024-11-21T05:33:45.297",
    "fix_date": "2020-02-20T02:09:06Z"
  },
  "references": [
    {
      "url": "https://beanvalidation.org/2.0/spec/#validationapi-message-defaultmessageinterpolation",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.oracle.com/javaee/7/tutorial/jsf-el.htm",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/commit/28479f743a9d0aab6d0e963fc07f3dd98e8c8236",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/commit/d87d1e4f8e20f6494c0232bf8560c961b46db634",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/pull/3157",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/pull/3160",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://beanvalidation.org/2.0/spec/#validationapi-message-defaultmessageinterpolation",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.jboss.org/hibernate/validator/6.1/reference/en-US/html_single/#section-interpolation-with-message-expressions",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.oracle.com/javaee/7/tutorial/jsf-el.htm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/commit/28479f743a9d0aab6d0e963fc07f3dd98e8c8236",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/commit/d87d1e4f8e20f6494c0232bf8560c961b46db634",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/pull/3157",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/pull/3160",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dropwizard/dropwizard/security/advisories/GHSA-3mcp-9wr4-cjqf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:39.864965",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "dropwizard",
    "owner": "dropwizard",
    "created_at": "2011-01-19T19:52:29Z",
    "updated_at": "2025-01-24T21:41:05Z",
    "pushed_at": "2025-01-24T22:01:11Z",
    "size": 112636,
    "stars": 8509,
    "forks": 3442,
    "open_issues": 14,
    "watchers": 8509,
    "has_security_policy": false,
    "default_branch": "release/4.0.x",
    "protected_branches": [
      "master",
      "release/0.7.x",
      "release/0.8.x",
      "release/0.9.x",
      "release/1.0.x",
      "release/1.1.x",
      "release/1.2.x",
      "release/1.3.x",
      "release/2.0.x",
      "release/2.1.x",
      "release/3.0.x",
      "release/4.0.x",
      "release/5.0.x"
    ],
    "languages": {
      "Java": 2835962,
      "Shell": 1642,
      "FreeMarker": 992,
      "Mustache": 569,
      "HTML": 111
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:28:32.643789"
  }
}