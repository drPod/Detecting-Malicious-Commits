{
  "cve_id": "CVE-2020-5248",
  "github_data": {
    "repository": "glpi-project/glpi",
    "fix_commit": "efd14468c92c4da43333aa9735e65fd20cbc7c6c",
    "related_commits": [
      "efd14468c92c4da43333aa9735e65fd20cbc7c6c",
      "efd14468c92c4da43333aa9735e65fd20cbc7c6c"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "efd14468c92c4da43333aa9735e65fd20cbc7c6c",
      "commit_date": "2020-02-06T09:16:01Z",
      "author": {
        "login": "trasher",
        "type": "User",
        "stats": {
          "total_commits": 2852,
          "average_weekly_commits": 2.604566210045662,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 381
        }
      },
      "commit_message": {
        "title": "Deprecate GLPIKEY usage",
        "length": 257,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 437,
        "additions": 406,
        "deletions": 31
      },
      "files": [
        {
          "filename": ".gitignore",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1,4 +1,5 @@\n /config/config_db*\n+/config/glpi.key\n /config/config_path.php\n /config/local_define.php\n /tests/config_db*"
        },
        {
          "filename": "ajax/mailcollector.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -58,7 +58,7 @@\n             if (empty($input[\"passwd\"])) {\n                unset($input[\"passwd\"]);\n             } else {\n-               $input[\"passwd\"] = Toolbox::encrypt(stripslashes($input[\"passwd\"]), GLPIKEY);\n+               $input[\"passwd\"] = Toolbox::encrypt(stripslashes($input[\"passwd\"]));\n             }\n          }\n "
        },
        {
          "filename": "inc/auth.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -664,8 +664,7 @@ function login($login_name, $login_password, $noauto = false, $remember_me = fal\n                   $ds = AuthLdap::connectToServer($ldap_method[\"host\"],\n                                                   $ldap_method[\"port\"],\n                                                   $ldap_method[\"rootdn\"],\n-                                                  Toolbox::decrypt($ldap_method[\"rootdn_passwd\"],\n-                                                                   GLPIKEY),\n+                                                  Toolbox::decrypt($ldap_method[\"rootdn_passwd\"]),\n                                                   $ldap_method[\"use_tls\"],\n                                                   $ldap_method[\"deref_option\"]);\n "
        },
        {
          "filename": "inc/authldap.class.php",
          "status": "modified",
          "additions": 7,
          "deletions": 8,
          "patch": "@@ -192,8 +192,7 @@ function prepareInputForUpdate($input) {\n          if (empty($input[\"rootdn_passwd\"])) {\n             unset($input[\"rootdn_passwd\"]);\n          } else {\n-            $input[\"rootdn_passwd\"] = Toolbox::encrypt(stripslashes($input[\"rootdn_passwd\"]),\n-                                                       GLPIKEY);\n+            $input[\"rootdn_passwd\"] = Toolbox::encrypt(stripslashes($input[\"rootdn_passwd\"]));\n          }\n       }\n \n@@ -1456,7 +1455,7 @@ static function testLDAPConnection($auths_id, $replicate_id = -1) {\n          $port = $config_ldap->fields['port'];\n       }\n       $ds = self::connectToServer($host, $port, $config_ldap->fields['rootdn'],\n-                                  Toolbox::decrypt($config_ldap->fields['rootdn_passwd'], GLPIKEY),\n+                                  Toolbox::decrypt($config_ldap->fields['rootdn_passwd']),\n                                   $config_ldap->fields['use_tls'],\n                                   $config_ldap->fields['deref_option']);\n       if ($ds) {\n@@ -2608,7 +2607,7 @@ function connect() {\n \n       return $this->connectToServer($this->fields['host'], $this->fields['port'],\n                                     $this->fields['rootdn'],\n-                                    Toolbox::decrypt($this->fields['rootdn_passwd'], GLPIKEY),\n+                                    Toolbox::decrypt($this->fields['rootdn_passwd']),\n                                     $this->fields['use_tls'],\n                                     $this->fields['deref_option']);\n    }\n@@ -2669,7 +2668,7 @@ static function tryToConnectToServer($ldap_method, $login, $password) {\n       }\n       $ds = self::connectToServer($ldap_method['host'], $ldap_method['port'],\n                                   $ldap_method['rootdn'],\n-                                  Toolbox::decrypt($ldap_method['rootdn_passwd'], GLPIKEY),\n+                                  Toolbox::decrypt($ldap_method['rootdn_passwd']),\n                                   $ldap_method['use_tls'], $ldap_method['deref_option']);\n \n       // Test with login and password of the user if exists\n@@ -2686,7 +2685,7 @@ static function tryToConnectToServer($ldap_method, $login, $password) {\n          foreach (self::getAllReplicateForAMaster($ldap_method['id']) as $replicate) {\n             $ds = self::connectToServer($replicate[\"host\"], $replicate[\"port\"],\n                                         $ldap_method['rootdn'],\n-                                        Toolbox::decrypt($ldap_method['rootdn_passwd'], GLPIKEY),\n+                                        Toolbox::decrypt($ldap_method['rootdn_passwd']),\n                                         $ldap_method['use_tls'], $ldap_method['deref_option']);\n \n             // Test with login and password of the user\n@@ -3442,7 +3441,7 @@ static function searchUser(AuthLDAP $authldap) {\n \n       if (self::connectToServer($authldap->getField('host'), $authldap->getField('port'),\n                                 $authldap->getField('rootdn'),\n-                                Toolbox::decrypt($authldap->getField('rootdn_passwd'), GLPIKEY),\n+                                Toolbox::decrypt($authldap->getField('rootdn_passwd')),\n                                 $authldap->getField('use_tls'),\n                                 $authldap->getField('deref_option'))) {\n          self::showLdapUsers();\n@@ -3500,7 +3499,7 @@ function prepareInputForAdd($input) {\n       }\n \n       if (isset($input[\"rootdn_passwd\"]) && !empty($input[\"rootdn_passwd\"])) {\n-         $input[\"rootdn_passwd\"] = Toolbox::encrypt(stripslashes($input[\"rootdn_passwd\"]), GLPIKEY);\n+         $input[\"rootdn_passwd\"] = Toolbox::encrypt(stripslashes($input[\"rootdn_passwd\"]));\n       }\n \n       return $input;"
        },
        {
          "filename": "inc/config.class.php",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -151,7 +151,7 @@ function prepareInputForUpdate($input) {\n          if (empty($input[\"smtp_passwd\"])) {\n             unset($input[\"smtp_passwd\"]);\n          } else {\n-            $input[\"smtp_passwd\"] = Toolbox::encrypt(stripslashes($input[\"smtp_passwd\"]), GLPIKEY);\n+            $input[\"smtp_passwd\"] = Toolbox::encrypt(stripslashes($input[\"smtp_passwd\"]));\n          }\n       }\n \n@@ -163,8 +163,7 @@ function prepareInputForUpdate($input) {\n          if (empty($input[\"proxy_passwd\"])) {\n             unset($input[\"proxy_passwd\"]);\n          } else {\n-            $input[\"proxy_passwd\"] = Toolbox::encrypt(stripslashes($input[\"proxy_passwd\"]),\n-                                                      GLPIKEY);\n+            $input[\"proxy_passwd\"] = Toolbox::encrypt(stripslashes($input[\"proxy_passwd\"]));\n          }\n       }\n "
        },
        {
          "filename": "inc/console/security/changekeycommand.class.php",
          "status": "added",
          "additions": 110,
          "deletions": 0,
          "patch": "@@ -0,0 +1,110 @@\n+<?php\n+/**\n+ * ---------------------------------------------------------------------\n+ * GLPI - Gestionnaire Libre de Parc Informatique\n+ * Copyright (C) 2015-2018 Teclib' and contributors.\n+ *\n+ * http://glpi-project.org\n+ *\n+ * based on GLPI - Gestionnaire Libre de Parc Informatique\n+ * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n+ *\n+ * ---------------------------------------------------------------------\n+ *\n+ * LICENSE\n+ *\n+ * This file is part of GLPI.\n+ *\n+ * GLPI is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * GLPI is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n+ * ---------------------------------------------------------------------\n+ */\n+\n+namespace Glpi\\Console\\Security;\n+\n+if (!defined('GLPI_ROOT')) {\n+   die(\"Sorry. You can't access this file directly\");\n+}\n+\n+use Glpi\\Console\\AbstractCommand;\n+use Symfony\\Component\\Console\\Input\\InputInterface;\n+use Symfony\\Component\\Console\\Output\\OutputInterface;\n+use Symfony\\Component\\Console\\Question\\ConfirmationQuestion;\n+use GLPIKey;\n+\n+class ChangekeyCommand extends AbstractCommand {\n+   /**\n+    * Error code returned when unable to renew key.\n+    *\n+    * @var integer\n+    */\n+   const ERROR_UNABLE_TO_RENEW_KEY = 1;\n+\n+   protected function configure() {\n+      parent::configure();\n+\n+      $this->setName('glpi:security:change_key');\n+      $this->setDescription(__('Change password storage key and update values in database.'));\n+   }\n+\n+   protected function execute(InputInterface $input, OutputInterface $output) {\n+      $glpikey = new GLPIKey();\n+\n+      $fields = $glpikey->getFields();\n+      $configs = $glpikey->getConfigs();\n+      $conf_count = 0;\n+      foreach ($configs as $config) {\n+         $conf_count += count($config);\n+      }\n+\n+      $output->writeln(\n+         sprintf(\n+            '<info>' . __('Found %1$s field(s) and %2$s configuration entries requiring migration.') . '</info>',\n+            count($fields),\n+            $conf_count\n+         )\n+      );\n+\n+      if (!$input->getOption('no-interaction')) {\n+         // Ask for confirmation (unless --no-interaction)\n+         $question_helper = $this->getHelper('question');\n+         $run = $question_helper->ask(\n+            $input,\n+            $output,\n+            new ConfirmationQuestion(__('Do you want to continue ?') . ' [Yes/no]', true)\n+         );\n+         if (!$run) {\n+            $output->writeln(\n+               '<comment>' . __('Aborted.') . '</comment>',\n+               OutputInterface::VERBOSITY_VERBOSE\n+            );\n+            return 0;\n+         }\n+      }\n+\n+      $created = $glpikey->generate();\n+      if (!$created) {\n+         $output->writeln(\n+            '<error>' . __('Unable to change security key!') . '</error>',\n+            OutputInterface::VERBOSITY_QUIET\n+         );\n+         return self::ERROR_UNABLE_TO_RENEW_KEY;\n+      }\n+\n+      $this->output->write(PHP_EOL);\n+\n+      $output->writeln('<info>' . __('New security key generated; database updated.') . '</info>');\n+\n+      return 0; // Success\n+   }\n+}"
        },
        {
          "filename": "inc/glpikey.class.php",
          "status": "added",
          "additions": 225,
          "deletions": 0,
          "patch": "@@ -0,0 +1,225 @@\n+<?php\n+/**\n+ * ---------------------------------------------------------------------\n+ * GLPI - Gestionnaire Libre de Parc Informatique\n+ * Copyright (C) 2015-2018 Teclib' and contributors.\n+ *\n+ * http://glpi-project.org\n+ *\n+ * based on GLPI - Gestionnaire Libre de Parc Informatique\n+ * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n+ *\n+ * ---------------------------------------------------------------------\n+ *\n+ * LICENSE\n+ *\n+ * This file is part of GLPI.\n+ *\n+ * GLPI is free software; you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation; either version 2 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * GLPI is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n+ * ---------------------------------------------------------------------\n+ */\n+\n+if (!defined('GLPI_ROOT')) {\n+   die(\"Sorry. You can't access this file directly\");\n+}\n+\n+/**\n+ *  GLPI security key\n+**/\n+class GLPIKey {\n+   /**\n+    * Key file path.\n+    *\n+    * @var string\n+    */\n+   private $keyfile;\n+\n+   /**\n+    * List of crypted DB fields.\n+    *\n+    * @var array\n+    */\n+   protected $fields = [\n+      'glpi_mailcollectors.passwd',\n+      'glpi_authldaps.rootdn_passwd'\n+   ];\n+\n+   /**\n+    * List of crypted configuration values.\n+    * Each key corresponds to a configuration context, and contains list of configs names.\n+    *\n+    * @var array\n+    */\n+   protected $configs = [\n+      'core'   => [\n+         'smtp_passwd',\n+         'proxy_passwd'\n+      ]\n+   ];\n+\n+   public function __construct() {\n+      $this->keyfile = GLPI_CONFIG_DIR . '/glpi.key';\n+   }\n+\n+   /**\n+    * Check if GLPI security key used for decryptable passwords exists\n+    *\n+    * @return string\n+    */\n+   public function keyExists() {\n+      return file_exists($this->keyfile) && !empty($this->get());\n+   }\n+\n+   /**\n+    * Get GLPI security key used for decryptable passwords\n+    *\n+    * @return string\n+    */\n+   public function get() {\n+      $key = GLPIKEY;\n+      if (file_exists($this->keyfile)) {\n+         //load key from existing config file\n+         $key = file_get_contents($this->keyfile);\n+      }\n+      return $key;\n+   }\n+\n+   /**\n+    * Generate GLPI security key used for decryptable passwords\n+    * and update values in DB if necessary.\n+    *\n+    * @return boolean\n+    */\n+   public function generate() {\n+      global $DB;\n+\n+      $current_key = file_exists($this->keyfile) ? $this->get() : GLPIKEY;\n+\n+      $success = (bool)file_put_contents($this->keyfile, Toolbox::getRandomString(50));\n+      if (!$success) {\n+         return false;\n+      }\n+\n+      if ($DB instanceof DBmysql) {\n+         return $this->migrateFieldsInDb($current_key)\n+            && $this->migrateConfigsInDb($current_key);\n+      }\n+\n+      return true;\n+   }\n+\n+   /**\n+    * Get fields\n+    *\n+    * @return array\n+    */\n+   public function getFields() {\n+      global $PLUGIN_HOOKS;\n+\n+      $fields = $this->fields;\n+      if (isset($PLUGIN_HOOKS['secured_fields'])) {\n+         foreach ($PLUGIN_HOOKS['secured_fields'] as $plugfields) {\n+            $fields = array_merge($fields, $plugfields);\n+         }\n+      }\n+\n+      return $fields;\n+   }\n+\n+   /**\n+    * Get configs\n+    *\n+    * @return array\n+    */\n+   public function getConfigs() {\n+      global $PLUGIN_HOOKS;\n+\n+      $configs = $this->configs;\n+\n+      if (isset($PLUGIN_HOOKS['secured_configs'])) {\n+         foreach ($PLUGIN_HOOKS['secured_configs'] as $plugin => $plugconfigs) {\n+            $configs['plugin:' . $plugin] = $plugconfigs;\n+         }\n+      }\n+\n+      return $configs;\n+   }\n+\n+   /**\n+    * Migrate fields in database\n+    *\n+    * @param string $current_key Current key\n+    *\n+    * @return void\n+    */\n+   protected function migrateFieldsInDb($current_key) {\n+      global $DB;\n+\n+      $success = true;\n+\n+      foreach ($this->getFields() as $field) {\n+         list($table, $column) = explode('.', $field);\n+\n+         $iterator = $DB->request([\n+            'SELECT' => ['id', $column],\n+            'FROM'   => $table\n+         ]);\n+\n+         while ($success && $row = $iterator->next()) {\n+            $pass = Toolbox::encrypt(Toolbox::decrypt($row[$column], $current_key));\n+            $success = $DB->update(\n+               $table,\n+               [$field  => $pass],\n+               ['id'    => $row['id']]\n+            );\n+         }\n+      }\n+\n+      return $success;\n+   }\n+\n+   /**\n+    * Migrate configurations in database\n+    *\n+    * @param string $current_key Current key\n+    *\n+    * @return boolean\n+    */\n+   protected function migrateConfigsInDb($current_key) {\n+      global $DB;\n+\n+      $success = true;\n+\n+      foreach ($this->getConfigs() as $context => $names) {\n+         $iterator = $DB->request([\n+            'FROM'   => Config::getTable(),\n+            'WHERE'  => [\n+               'context'   => $context,\n+               'name'      => $names\n+            ]\n+         ]);\n+\n+         while ($success && $row = $iterator->next()) {\n+            $pass = Toolbox::encrypt(Toolbox::decrypt($row['value'], $current_key));\n+            $success = $DB->update(\n+               Config::getTable(),\n+               ['value' => $pass],\n+               ['id'    => $row['id']]\n+            );\n+         }\n+      }\n+\n+      return $success;\n+   }\n+}"
        },
        {
          "filename": "inc/glpimailer.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -65,7 +65,7 @@ function __construct() {\n          if ($CFG_GLPI['smtp_username'] != '') {\n             $this->SMTPAuth = true;\n             $this->Username = $CFG_GLPI['smtp_username'];\n-            $this->Password = Toolbox::decrypt($CFG_GLPI['smtp_passwd'], GLPIKEY);\n+            $this->Password = Toolbox::decrypt($CFG_GLPI['smtp_passwd']);\n          }\n \n          if ($CFG_GLPI['smtp_mode'] == MAIL_SMTPSSL) {"
        },
        {
          "filename": "inc/mailcollector.class.php",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -145,7 +145,7 @@ function prepareInputForUpdate($input) {\n          if (empty($input[\"passwd\"])) {\n             unset($input[\"passwd\"]);\n          } else {\n-            $input[\"passwd\"] = Toolbox::encrypt(stripslashes($input[\"passwd\"]), GLPIKEY);\n+            $input[\"passwd\"] = Toolbox::encrypt(stripslashes($input[\"passwd\"]));\n          }\n       }\n \n@@ -174,7 +174,7 @@ function prepareInputForAdd($input) {\n          if (empty($input[\"passwd\"])) {\n             unset($input[\"passwd\"]);\n          } else {\n-            $input[\"passwd\"] = Toolbox::encrypt(stripslashes($input[\"passwd\"]), GLPIKEY);\n+            $input[\"passwd\"] = Toolbox::encrypt(stripslashes($input[\"passwd\"]));\n          }\n       }\n \n@@ -1218,14 +1218,14 @@ function connect() {\n \n       if ($this->fields['use_kerberos']) {\n          $this->marubox = @imap_open($this->fields['host'], $this->fields['login'],\n-                                     Toolbox::decrypt($this->fields['passwd'], GLPIKEY),\n+                                     Toolbox::decrypt($this->fields['passwd']),\n                                      CL_EXPUNGE, 1);\n       } else {\n          $try_options = [['DISABLE_AUTHENTICATOR' => 'GSSAPI'],\n                               ['DISABLE_AUTHENTICATOR' => 'PLAIN']];\n          foreach ($try_options as $option) {\n             $this->marubox = @imap_open($this->fields['host'], $this->fields['login'],\n-                                        Toolbox::decrypt($this->fields['passwd'], GLPIKEY),\n+                                        Toolbox::decrypt($this->fields['passwd']),\n                                         CL_EXPUNGE, 1, $option);\n             if (is_resource($this->marubox)) {\n                break;"
        },
        {
          "filename": "inc/rssfeed.class.php",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -880,8 +880,7 @@ static function getRSSFeed($url, $cache_duration = DAY_TIMESTAMP) {\n          if (!empty($CFG_GLPI[\"proxy_user\"])) {\n             $prx_opt[CURLOPT_HTTPAUTH]     = CURLAUTH_ANYSAFE;\n             $prx_opt[CURLOPT_PROXYUSERPWD] = $CFG_GLPI[\"proxy_user\"].\":\".\n-                                             Toolbox::decrypt($CFG_GLPI[\"proxy_passwd\"],\n-                                                              GLPIKEY);\n+                                             Toolbox::decrypt($CFG_GLPI[\"proxy_passwd\"]);\n          }\n          $feed->set_curl_options($prx_opt);\n       }"
        },
        {
          "filename": "inc/toolbox.class.php",
          "status": "modified",
          "additions": 28,
          "deletions": 3,
          "patch": "@@ -239,7 +239,15 @@ static function decodeFromUtf8($string, $to_charset = \"ISO-8859-1\") {\n     *\n     * @return encrypted string\n    **/\n-   static function encrypt($string, $key) {\n+   static function encrypt($string, $key = null) {\n+\n+      if ($key === null) {\n+         $key = self::getGlpiSecKey();\n+      }\n+\n+      if ($key === GLPIKEY && !defined('TU_USER')) {\n+         self::deprecated('Using GLPIKEY is not secure!');\n+      }\n \n       $result = '';\n       for ($i=0; $i<strlen($string); $i++) {\n@@ -260,7 +268,11 @@ static function encrypt($string, $key) {\n     *\n     * @return decrypted string\n    **/\n-   static function decrypt($string, $key) {\n+   static function decrypt($string, $key = null) {\n+\n+      if ($key === null) {\n+         $key = self::getGlpiSecKey();\n+      }\n \n       $result = '';\n       $string = base64_decode($string);\n@@ -275,6 +287,19 @@ static function decrypt($string, $key) {\n       return Toolbox::unclean_cross_side_scripting_deep($result);\n    }\n \n+   /**\n+    * Get GLPI security key used for decryptable passwords\n+    *\n+    * Will read key from config/glpi.key if present.\n+    * For 9.4 branch, this will defaults to GLPIKEY.\n+    *\n+    * @return string\n+    */\n+   public static function getGlpiSecKey() {\n+      $glpikey = new GLPIKey();\n+      return $glpikey->get();\n+   }\n+\n \n    /**\n     * Prevent from XSS\n@@ -1737,7 +1762,7 @@ public static function callCurl($url, array $eopts = [], &$msgerr = null) {\n          if (!empty($CFG_GLPI[\"proxy_user\"])) {\n             $opts += [\n                CURLOPT_PROXYAUTH    => CURLAUTH_BASIC,\n-               CURLOPT_PROXYUSERPWD => $CFG_GLPI[\"proxy_user\"] . \":\" . self::decrypt($CFG_GLPI[\"proxy_passwd\"], GLPIKEY),\n+               CURLOPT_PROXYUSERPWD => $CFG_GLPI[\"proxy_user\"] . \":\" . self::decrypt($CFG_GLPI[\"proxy_passwd\"]),\n             ];\n          }\n "
        },
        {
          "filename": "inc/update.class.php",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -163,7 +163,8 @@ public function doUpdates($current_version = null) {\n       $updir = __DIR__ . \"/../install/\";\n \n       if (isCommandLine() && version_compare($current_version, '0.72.3', 'lt')) {\n-         die('Upgrade from command line is not supported before 0.72.3!');\n+         echo 'Upgrade from command line is not supported before 0.72.3!';\n+         die(1);\n       }\n \n       // Update process desactivate all plugins\n@@ -500,6 +501,12 @@ public function doUpdates($current_version = null) {\n       $crontask_telemetry->getFromDBbyName(\"Telemetry\", \"telemetry\");\n       $crontask_telemetry->resetDate();\n       $crontask_telemetry->resetState();\n+\n+      //generate security key if missing, and update db\n+      $glpikey = new GLPIKey();\n+      if (!$glpikey->keyExists() && !$glpikey->generate()) {\n+         $this->migration->displayWarning(__('Unable to create security key file!'), true);\n+      }\n    }\n \n    /**"
        },
        {
          "filename": "install/install.php",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -375,6 +375,18 @@ function next_form() {\n       Html::closeForm();\n    }\n \n+   //create security key\n+   $glpikey = new GLPIKey();\n+   $secured = $glpikey->keyExists();\n+   if (!$secured) {\n+      $secured = $glpikey->generate();\n+   }\n+   if (!$secured) {\n+      echo \"<p><strong>\".__('Security key cannot be generated!').\"</strong></p>\";\n+      prev_form($host, $user, $password);\n+      return;\n+   }\n+\n    //Check if the port is in url\n    $hostport = explode(\":\", $host);\n    if (count($hostport) < 2) {"
        },
        {
          "filename": "status.php",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -104,8 +104,7 @@\n       foreach ($ldap_methods as $method) {\n          echo \" \".$method['name'];\n          if (AuthLDAP::tryToConnectToServer($method, $method[\"rootdn\"],\n-                                            Toolbox::decrypt($method[\"rootdn_passwd\"],\n-                                            GLPIKEY))) {\n+                                            Toolbox::decrypt($method[\"rootdn_passwd\"]))) {\n             echo \"_OK\";\n          } else {\n             echo \"_PROBLEM\";"
        },
        {
          "filename": "tests/functionnal/AuthLdap.php",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -159,16 +159,16 @@ public function testPrepareInputForUpdate() {\n       $input    = ['name' => 'ldap', 'rootdn_passwd' => $password];\n       $result   = $ldap->prepareInputForUpdate($input);\n \n-      //Expected value to be encrypted using GLPIKEY key\n-      $expected = \\Toolbox::encrypt(stripslashes($password), GLPIKEY);\n+      //Expected value to be encrypted using current  key\n+      $expected = \\Toolbox::encrypt(stripslashes($password));\n       $this->string($result['rootdn_passwd'])->isIdenticalTo($expected);\n \n       $password = 'tot\\'o';\n       $input    = ['name' => 'ldap', 'rootdn_passwd' => $password];\n       $result   = $ldap->prepareInputForUpdate($input);\n \n-      //Expected value to be encrypted using GLPIKEY key\n-      $expected = \\Toolbox::encrypt(stripslashes($password), GLPIKEY);\n+      //Expected value to be encrypted using current key\n+      $expected = \\Toolbox::encrypt(stripslashes($password));\n       $this->string($result['rootdn_passwd'])->isIdenticalTo($expected);\n \n       $input['_blank_passwd'] = 1;"
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5a624f930481f0039c20e22e9778e782313f3640",
            "date": "2025-01-24T09:49:09Z",
            "author_login": "AdrienClairembault"
          },
          {
            "sha": "576fcd05dfe4e32fe8e49a3d0827ddc73aa8392b",
            "date": "2025-01-09T17:17:44Z",
            "author_login": "Pierstoval"
          },
          {
            "sha": "b52e5de3baf5082bb252defefae17a120229037a",
            "date": "2025-01-23T11:15:31Z",
            "author_login": "cedric-anne"
          },
          {
            "sha": "9762ec135889abc6269d38ec12721857a7c958ce",
            "date": "2025-01-23T09:46:49Z",
            "author_login": "cedric-anne"
          },
          {
            "sha": "be2b2f5b21d0a5d4167b531c7427e988d591eb98",
            "date": "2025-01-23T10:04:19Z",
            "author_login": "cconard96"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-798",
    "description": "GLPI before before version 9.4.6 has a vulnerability involving a default encryption key. GLPIKEY is public and is used on every instance. This means anyone can decrypt sensitive data stored using this key. It is possible to change the key before installing GLPI. But on existing instances, data must be reencrypted with the new key. Problem is we can not know which columns or rows in the database are using that; espcially from plugins. Changing the key without updating data would lend in bad password sent from glpi; but storing them again from the UI will work.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-05-12T16:15:11.157",
    "last_modified": "2024-11-21T05:33:45.710",
    "fix_date": "2020-02-06T09:16:01Z"
  },
  "references": [
    {
      "url": "https://github.com/glpi-project/glpi/commit/efd14468c92c4da43333aa9735e65fd20cbc7c6c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-j222-j9mf-h6j9",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/commit/efd14468c92c4da43333aa9735e65fd20cbc7c6c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-j222-j9mf-h6j9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:44.987784",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "glpi",
    "owner": "glpi-project",
    "created_at": "2015-07-16T07:20:21Z",
    "updated_at": "2025-01-26T05:58:47Z",
    "pushed_at": "2025-01-24T10:46:36Z",
    "size": 865198,
    "stars": 4474,
    "forks": 1331,
    "open_issues": 211,
    "watchers": 4474,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0.70/bugfixes",
      "0.71/bugfixes",
      "0.72/bugfixes",
      "0.78/bugfixes",
      "0.80/bugfixes",
      "0.83/bugfixes",
      "0.84/bugfixes",
      "0.85/bugfixes",
      "0.90/bugfixes",
      "9.1/bugfixes",
      "9.2/bugfixes",
      "9.3/bugfixes",
      "9.4/bugfixes",
      "9.5/bugfixes",
      "10.0/bugfixes",
      "main"
    ],
    "languages": {
      "PHP": 25004471,
      "Twig": 1868598,
      "JavaScript": 1403814,
      "SCSS": 382484,
      "Vue": 188168,
      "Shell": 24779,
      "Makefile": 2692,
      "CSS": 1716,
      "Dockerfile": 638
    },
    "commit_activity": {
      "total_commits_last_year": 1725,
      "avg_commits_per_week": 33.17307692307692,
      "days_active_last_year": 256
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-26T07:40:26.623509"
  }
}