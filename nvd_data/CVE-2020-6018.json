{
  "cve_id": "CVE-2020-6018",
  "github_data": {
    "repository": "ValveSoftware/GameNetworkingSockets",
    "fix_commit": "bea84e2844b647532a9b7fbc3a6a8989d66e49e3",
    "related_commits": [
      "bea84e2844b647532a9b7fbc3a6a8989d66e49e3",
      "bea84e2844b647532a9b7fbc3a6a8989d66e49e3"
    ],
    "patch_url": "https://github.com/ValveSoftware/GameNetworkingSockets/commit/bea84e2844b647532a9b7fbc3a6a8989d66e49e3.patch",
    "fix_commit_details": {
      "sha": "bea84e2844b647532a9b7fbc3a6a8989d66e49e3",
      "commit_date": "2020-09-03T22:05:55Z",
      "author": {
        "login": "zpostfacto",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Check if output buffer is too small.",
        "length": 210,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 27,
        "additions": 20,
        "deletions": 7
      },
      "files": [
        {
          "filename": "src/common/crypto_libsodium.cpp",
          "status": "modified",
          "additions": 20,
          "deletions": 7,
          "patch": "@@ -50,18 +50,25 @@ bool AES_GCM_EncryptContext::Encrypt(\n \tvoid *pEncryptedDataAndTag, uint32 *pcbEncryptedDataAndTag,\n \tconst void *pAdditionalAuthenticationData, size_t cbAuthenticationData\n ) {\n-    unsigned long long pcbEncryptedDataAndTag_longlong = *pcbEncryptedDataAndTag;\n \n+\t// Make sure caller's buffer is big enough to hold the result.\n+\tif ( cbPlaintextData + crypto_aead_aes256gcm_ABYTES > *pcbEncryptedDataAndTag )\n+\t{\n+\t\t*pcbEncryptedDataAndTag = 0;\n+\t\treturn false;\n+\t}\n+\n+    unsigned long long cbEncryptedDataAndTag_longlong;\n     crypto_aead_aes256gcm_encrypt_afternm(\n-\t\tstatic_cast<unsigned char*>( pEncryptedDataAndTag ), &pcbEncryptedDataAndTag_longlong,\n+\t\tstatic_cast<unsigned char*>( pEncryptedDataAndTag ), &cbEncryptedDataAndTag_longlong,\n \t\tstatic_cast<const unsigned char*>( pPlaintextData ), cbPlaintextData,\n \t\tstatic_cast<const unsigned char*>(pAdditionalAuthenticationData), cbAuthenticationData,\n \t\tnullptr,\n \t\tstatic_cast<const unsigned char*>( pIV ),\n \t\tstatic_cast<const crypto_aead_aes256gcm_state*>( m_ctx )\n \t);\n \n-    *pcbEncryptedDataAndTag = pcbEncryptedDataAndTag_longlong;\n+    *pcbEncryptedDataAndTag = cbEncryptedDataAndTag_longlong;\n \n     return true;\n }\n@@ -72,17 +79,23 @@ bool AES_GCM_DecryptContext::Decrypt(\n \tvoid *pPlaintextData, uint32 *pcbPlaintextData,\n \tconst void *pAdditionalAuthenticationData, size_t cbAuthenticationData\n ) {\n-    unsigned long long pcbPlaintextData_longlong;\n-\n+\t// Make sure caller's buffer is big enough to hold the result\n+\tif ( cbEncryptedDataAndTag > *pcbPlaintextData + crypto_aead_aes256gcm_ABYTES )\n+\t{\n+\t\t*pcbPlaintextData = 0;\n+\t\treturn false;\n+\t}\n+\n+    unsigned long long cbPlaintextData_longlong;\n     const int nDecryptResult = crypto_aead_aes256gcm_decrypt_afternm(\n-\t\tstatic_cast<unsigned char*>( pPlaintextData ), &pcbPlaintextData_longlong,\n+\t\tstatic_cast<unsigned char*>( pPlaintextData ), &cbPlaintextData_longlong,\n \t\tnullptr,\n \t\tstatic_cast<const unsigned char*>( pEncryptedDataAndTag ), cbEncryptedDataAndTag,\n \t\tstatic_cast<const unsigned char*>( pAdditionalAuthenticationData ), cbAuthenticationData,\n \t\tstatic_cast<const unsigned char*>( pIV ), static_cast<const crypto_aead_aes256gcm_state*>( m_ctx )\n \t);\n \n-    *pcbPlaintextData = pcbPlaintextData_longlong;\n+    *pcbPlaintextData = cbPlaintextData_longlong;\n \n     return nDecryptResult == 0;\n }"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "725e273c7442bac7a8bc903c0b210b1c15c34d92",
            "date": "2022-12-29T11:23:57Z",
            "author_login": "LilyWangLL"
          },
          {
            "sha": "405e2bfc759d239024c07852d570bcf248ca5e57",
            "date": "2024-09-29T20:55:53Z",
            "author_login": "TTimo"
          },
          {
            "sha": "538ae81ec96e8612f5cbf173662fac2ad937449f",
            "date": "2024-09-29T20:33:45Z",
            "author_login": "TTimo"
          },
          {
            "sha": "8343dd9c4a57f0eb0ce1f24003a3461fb65cbf60",
            "date": "2024-09-22T22:14:15Z",
            "author_login": "TTimo"
          },
          {
            "sha": "e449ea68279bdde7b0fccf74122e1d665a0c783d",
            "date": "2024-09-29T20:14:54Z",
            "author_login": "TTimo"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-120",
    "description": "Valve's Game Networking Sockets prior to version v1.2.0 improperly handles long encrypted messages in function AES_GCM_DecryptContext::Decrypt() when compiled using libsodium, leading to a Stack-Based Buffer Overflow and resulting in a memory corruption and possibly even a remote code execution.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-12-02T01:15:12.967",
    "last_modified": "2024-11-21T05:34:59.493",
    "fix_date": "2020-09-03T22:05:55Z"
  },
  "references": [
    {
      "url": "https://github.com/ValveSoftware/GameNetworkingSockets/commit/bea84e2844b647532a9b7fbc3a6a8989d66e49e3",
      "source": "cve@checkpoint.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://research.checkpoint.com/2020/game-on-finding-vulnerabilities-in-valves-steam-sockets/",
      "source": "cve@checkpoint.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ValveSoftware/GameNetworkingSockets/commit/bea84e2844b647532a9b7fbc3a6a8989d66e49e3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://research.checkpoint.com/2020/game-on-finding-vulnerabilities-in-valves-steam-sockets/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:08.485816",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "GameNetworkingSockets",
    "owner": "ValveSoftware",
    "created_at": "2018-03-21T18:43:20Z",
    "updated_at": "2025-01-14T00:45:56Z",
    "pushed_at": "2024-09-30T16:34:18Z",
    "size": 15982,
    "stars": 8389,
    "forks": 630,
    "open_issues": 48,
    "watchers": 8389,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 2289979,
      "C": 64082,
      "CMake": 60298,
      "Python": 14633,
      "Shell": 2011
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T16:27:27.084484"
  }
}