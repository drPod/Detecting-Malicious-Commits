{
  "cve_id": "CVE-2020-6859",
  "github_data": {
    "repository": "ultimatemember/ultimatemember",
    "fix_commit": "249682559012734a4f7d71f52609b2f301ea55b1",
    "related_commits": [
      "249682559012734a4f7d71f52609b2f301ea55b1",
      "249682559012734a4f7d71f52609b2f301ea55b1"
    ],
    "patch_url": "https://github.com/ultimatemember/ultimatemember/commit/249682559012734a4f7d71f52609b2f301ea55b1.patch",
    "fix_commit_details": {
      "sha": "249682559012734a4f7d71f52609b2f301ea55b1",
      "commit_date": "2020-01-08T13:19:24Z",
      "author": {
        "login": "nikitasinelnikov",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "- fixed vulnerability with uploading cover/profile photo for other user ID;",
        "length": 159,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 798,
        "additions": 309,
        "deletions": 489
      },
      "files": [
        {
          "filename": "includes/admin/core/class-admin-settings.php",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -120,6 +120,7 @@ function same_page_update_ajax() {\n \n \t\t\t\t//member directory data\n \t\t\t\t$metakeys[] = 'um_member_directory_data';\n+\t\t\t\t$metakeys[] = '_um_verified';\n \n \t\t\t\t$skip_fields = UM()->builtin()->get_fields_without_metakey();\n \t\t\t\t$skip_fields = array_merge( $skip_fields, UM()->member_directory()->core_search_fields );"
        },
        {
          "filename": "includes/core/class-files.php",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -287,6 +287,12 @@ function ajax_resize_image() {\n \t\t\t}\n \n \t\t\t$user_id = empty( $_REQUEST['user_id'] ) ? get_current_user_id() : $_REQUEST['user_id'];\n+\n+\t\t\tif ( ! UM()->roles()->um_current_user_can( 'edit', $user_id ) ) {\n+\t\t\t\t$ret['error'] = esc_js( __( 'You haven\\'t ability to edit this user', 'ultimate-member' ) );\n+\t\t\t\twp_send_json_error( $ret );\n+\t\t\t}\n+\n \t\t\t$image_path = um_is_file_owner( $src, $user_id, true );\n \t\t\tif ( ! $image_path ) {\n \t\t\t\twp_send_json_error( esc_js( __( 'Invalid file ownership', 'ultimate-member' ) ) );\n@@ -319,6 +325,11 @@ function ajax_image_upload() {\n \t\t\tUM()->fields()->set_id = $_POST['set_id'];\n \t\t\tUM()->fields()->set_mode = $_POST['set_mode'];\n \n+\t\t\tif ( ! UM()->roles()->um_current_user_can( 'edit', $user_id ) ) {\n+\t\t\t\t$ret['error'] = __( 'You haven\\'t ability to edit this user', 'ultimate-member' );\n+\t\t\t\twp_send_json_error( $ret );\n+\t\t\t}\n+\n \t\t\t/**\n \t\t\t * UM hook\n \t\t\t *"
        },
        {
          "filename": "includes/core/class-member-directory-meta.php",
          "status": "modified",
          "additions": 287,
          "deletions": 479,
          "patch": "@@ -18,9 +18,12 @@ class Member_Directory_Meta extends Member_Directory {\n \t\t/**\n \t\t * @var string\n \t\t */\n-\t\tvar $sql_where = '';\n-\t\tvar $meta_iteration = 1;\n \t\tvar $joins = array();\n+\t\tvar $where_clauses = array();\n+\n+\t\tvar $roles = array();\n+\t\tvar $general_meta_joined = false;\n+\n \t\tvar $sql_limit = '';\n \t\tvar $sql_order = '';\n \n@@ -172,6 +175,246 @@ function on_update_usermeta( $meta_id, $object_id, $meta_key, $_meta_value ) {\n \t\t}\n \n \n+\t\t/**\n+\t\t * @param $directory_data\n+\t\t * @param $field\n+\t\t * @param $value\n+\t\t * @param $i\n+\t\t * @param bool $is_default\n+\t\t */\n+\t\tfunction handle_filter_query( $directory_data, $field, $value, $i, $is_default = false ) {\n+\t\t\tglobal $wpdb;\n+\n+\t\t\t$blog_id = get_current_blog_id();\n+\n+\t\t\tswitch ( $field ) {\n+\t\t\t\tdefault:\n+\n+\t\t\t\t\t$filter_type = $this->filter_types[ $field ];\n+\n+\t\t\t\t\t/**\n+\t\t\t\t\t * UM hook\n+\t\t\t\t\t *\n+\t\t\t\t\t * @type filter\n+\t\t\t\t\t * @title um_query_args_{$field}__filter\n+\t\t\t\t\t * @description Change field's query for search at Members Directory\n+\t\t\t\t\t * @input_vars\n+\t\t\t\t\t * [{\"var\":\"$field_query\",\"type\":\"array\",\"desc\":\"Field query\"}]\n+\t\t\t\t\t * @change_log\n+\t\t\t\t\t * [\"Since: 2.0\"]\n+\t\t\t\t\t * @usage\n+\t\t\t\t\t * <?php add_filter( 'um_query_args_{$field}__filter_meta', 'function_name', 10, 4 ); ?>\n+\t\t\t\t\t * @example\n+\t\t\t\t\t * <?php\n+\t\t\t\t\t * add_filter( 'um_query_args_{$field}__filter_meta', 'my_query_args_filter', 10, 4 );\n+\t\t\t\t\t * function my_query_args_filter( $field_query ) {\n+\t\t\t\t\t *     // your code here\n+\t\t\t\t\t *     return $field_query;\n+\t\t\t\t\t * }\n+\t\t\t\t\t * ?>\n+\t\t\t\t\t */\n+\t\t\t\t\t$skip_default = apply_filters( \"um_query_args_{$field}__filter_meta\", false, $this, $field, $value, $filter_type, $is_default );\n+\n+\t\t\t\t\tif ( ! $skip_default ) {\n+\n+\t\t\t\t\t\tswitch ( $filter_type ) {\n+\t\t\t\t\t\t\tdefault:\n+\n+\t\t\t\t\t\t\t\tdo_action( \"um_query_args_{$field}_{$filter_type}__filter_meta\", $field, $value, $filter_type, $i, $is_default );\n+\t\t\t\t\t\t\t\tbreak;\n+\n+\t\t\t\t\t\t\tcase 'text':\n+\n+\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n+\n+\t\t\t\t\t\t\t\t$value = trim( stripslashes( $value ) );\n+\n+\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"umm{$i}.um_key = %s AND umm{$i}.um_value = %s\", $field, $value );\n+\n+\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tbreak;\n+\n+\t\t\t\t\t\t\tcase 'select':\n+\t\t\t\t\t\t\t\tif ( ! is_array( $value ) ) {\n+\t\t\t\t\t\t\t\t\t$value = array( $value );\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n+\n+\t\t\t\t\t\t\t\t$values_array = array();\n+\t\t\t\t\t\t\t\tforeach ( $value as $single_val ) {\n+\t\t\t\t\t\t\t\t\t$single_val = stripslashes( $single_val );\n+\n+\t\t\t\t\t\t\t\t\t$values_array[] = $wpdb->prepare( \"umm{$i}.um_value LIKE %s\", '%\"' . trim( $single_val ) . '\"%' );\n+\t\t\t\t\t\t\t\t\t$values_array[] = $wpdb->prepare( \"umm{$i}.um_value LIKE %s\", '%' . serialize( strval( trim( $single_val ) ) ) . '%' );\n+\t\t\t\t\t\t\t\t\t$values_array[] = $wpdb->prepare( \"umm{$i}.um_value = %s\", trim( $single_val ) );\n+\n+\t\t\t\t\t\t\t\t\tif ( is_numeric( $single_val ) ) {\n+\t\t\t\t\t\t\t\t\t\t$values_array[] = $wpdb->prepare( \"umm{$i}.um_value LIKE %s\", '%' . serialize( intval( trim( $single_val ) ) ) . '%' );\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t$values = implode( ' OR ', $values_array );\n+\n+\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = %s AND ( {$values} ) )\", $field );\n+\n+\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 'slider':\n+\n+\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n+\n+\t\t\t\t\t\t\t\t$min = min( $value );\n+\t\t\t\t\t\t\t\t$max = max( $value );\n+\n+\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = %s AND umm{$i}.um_value BETWEEN %d AND %d )\", $field, $min, $max );\n+\n+\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 'datepicker':\n+\n+\t\t\t\t\t\t\t\t$offset = 0;\n+\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n+\t\t\t\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\t$gmt_offset = get_post_meta( $directory_data['form_id'], '_um_search_filters_gmt', true );\n+\t\t\t\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n+\t\t\t\t\t\t\t\t\t\t$offset = $gmt_offset;\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n+\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n+\t\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', $from_date );\n+\t\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', $to_date );\n+\n+\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n+\n+\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = %s AND umm{$i}.um_value BETWEEN %s AND %s )\", $field, $from_date, $to_date );\n+\n+\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $from_date, $to_date );\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\tcase 'timepicker':\n+\n+\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n+\t\t\t\t\t\t\t\tif ( $value[0] == $value[1] ) {\n+\t\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = %s AND umm{$i}.um_value = %s )\", $field, $value[0] );\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = %s AND CAST( umm{$i}.um_value AS TIME ) BETWEEN %s AND %s )\", $field, $value[0], $value[1] );\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 'role':\n+\t\t\t\t\t$value = array_map( 'strtolower', $value );\n+\n+\t\t\t\t\tif ( empty( $this->roles ) && ! is_multisite() ) {\n+\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n+\t\t\t\t\t\t$this->roles = $value;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t$roles_clauses = array();\n+\t\t\t\t\tforeach ( $value as $role ) {\n+\t\t\t\t\t\t$roles_clauses[] = $wpdb->prepare( \"umm_roles.um_value LIKE %s\", '%\"' . $role . '\"%' );\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t$this->where_clauses[] = '( ' . implode( ' OR ', $roles_clauses ) . ' )';\n+\n+\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 'birth_date':\n+\n+\t\t\t\t\t$from_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ), date( 'Y', time() - min( $value ) * YEAR_IN_SECONDS ) ) );\n+\t\t\t\t\t$to_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ) + 1, date( 'Y', time() - ( max( $value ) + 1 ) * YEAR_IN_SECONDS ) ) );\n+\n+\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n+\n+\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = 'birth_date' AND umm{$i}.um_value BETWEEN %s AND %s )\", $from_date, $to_date );\n+\n+\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $to_date, $from_date );\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 'user_registered':\n+\n+\t\t\t\t\t$offset = 0;\n+\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n+\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t$gmt_offset = get_post_meta( $directory_data['form_id'], '_um_search_filters_gmt', true );\n+\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n+\t\t\t\t\t\t\t$offset = $gmt_offset;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t$from_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', min( $value ) ) . \"+$offset hours\" ) );\n+\t\t\t\t\t$to_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', max( $value ) ) . \"+$offset hours\" ) );\n+\n+\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"u.user_registered BETWEEN %s AND %s\", $from_date, $to_date );\n+\n+\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase 'last_login':\n+\n+\t\t\t\t\t$offset = 0;\n+\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n+\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t$gmt_offset = get_post_meta( $directory_data['form_id'], '_um_search_filters_gmt', true );\n+\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n+\t\t\t\t\t\t\t$offset = $gmt_offset;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n+\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n+\n+\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm{$i} ON umm{$i}.user_id = u.ID\";\n+\n+\t\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm{$i}.um_key = '_um_last_login' AND umm{$i}.um_value BETWEEN %s AND %s )\", $from_date, $to_date );\n+\n+\t\t\t\t\tif ( ! $is_default ) {\n+\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\n \t\t/**\n \t\t * Main Query function for getting members via AJAX\n \t\t */\n@@ -206,7 +449,7 @@ function ajax_get_members() {\n \t\t\t\t\t}\n \n \t\t\t\t\tif ( ! empty( $users_array ) ) {\n-\t\t\t\t\t\t$this->sql_where .= \" AND u.ID IN ( '\" . implode( \"','\", $users_array ) . \"' )\";\n+\t\t\t\t\t\t$this->where_clauses[] = \"u.ID IN ( '\" . implode( \"','\", $users_array ) . \"' )\";\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n@@ -223,67 +466,72 @@ function ajax_get_members() {\n \t\t\t}\n \n \t\t\tif ( ! UM()->roles()->um_user_can( 'can_edit_everyone' ) ) {\n-\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_general ON umm_general.user_id = u.ID\";\n-\n-\t\t\t\t$this->sql_where .= \" AND ( umm_general.um_key = 'um_member_directory_data' AND \n+\t\t\t\tif ( ! $this->general_meta_joined ) {\n+\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_general ON umm_general.user_id = u.ID\";\n+\t\t\t\t\t$this->general_meta_joined = true;\n+\t\t\t\t}\n+\t\t\t\t$this->where_clauses[] = \"( umm_general.um_key = 'um_member_directory_data' AND \n \t\t\t\tumm_general.um_value LIKE '%s:14:\\\"account_status\\\";s:8:\\\"approved\\\";%' AND umm_general.um_value LIKE '%s:15:\\\"hide_in_members\\\";b:0;%'{$profile_photo_where}{$cover_photo_where} )\";\n \t\t\t} else {\n \t\t\t\tif ( ! empty( $cover_photo_where ) || ! empty( $profile_photo_where ) ) {\n-\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_general ON umm_general.user_id = u.ID\";\n-\n-\t\t\t\t\t$this->sql_where .= \" AND ( umm_general.um_key = 'um_member_directory_data'{$profile_photo_where}{$cover_photo_where} )\";\n+\t\t\t\t\tif ( ! $this->general_meta_joined ) {\n+\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_general ON umm_general.user_id = u.ID\";\n+\t\t\t\t\t\t$this->general_meta_joined = true;\n+\t\t\t\t\t}\n+\t\t\t\t\t$this->where_clauses[] = \"( umm_general.um_key = 'um_member_directory_data'{$profile_photo_where}{$cover_photo_where} )\";\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\t$roles = array();\n+\t\t\t//$this->roles = array();\n \t\t\tif ( UM()->roles()->um_user_can( 'can_view_all' ) ) {\n \t\t\t\t$view_roles = um_user( 'can_view_roles' );\n \n \t\t\t\tif ( ! $view_roles ) {\n \t\t\t\t\t$view_roles = array();\n \t\t\t\t}\n \n-\t\t\t\t$roles = array_merge( $roles, maybe_unserialize( $view_roles ) );\n+\t\t\t\t$this->roles = array_merge( $this->roles, maybe_unserialize( $view_roles ) );\n \t\t\t}\n \n \t\t\tif ( ! empty( $directory_data['roles'] ) ) {\n-\t\t\t\tif ( ! empty( $roles ) ) {\n-\t\t\t\t\t$roles = array_intersect( $roles, maybe_unserialize( $directory_data['roles'] ) );\n+\t\t\t\tif ( ! empty( $this->roles ) ) {\n+\t\t\t\t\t$this->roles = array_intersect( $this->roles, maybe_unserialize( $directory_data['roles'] ) );\n \t\t\t\t} else {\n-\t\t\t\t\t$roles = array_merge( $roles, maybe_unserialize( $directory_data['roles'] ) );\n+\t\t\t\t\t$this->roles = array_merge( $this->roles, maybe_unserialize( $directory_data['roles'] ) );\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif ( ! empty( $roles ) ) {\n+\t\t\tif ( ! empty( $this->roles ) ) {\n \t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n \n \t\t\t\t$roles_clauses = array();\n-\t\t\t\tforeach ( $roles as $role ) {\n-\t\t\t\t\t$roles_clauses[] = \"umm_roles.um_value LIKE '%\\\"\" . $role . \"\\\"%'\";\n+\t\t\t\tforeach ( $this->roles as $role ) {\n+\t\t\t\t\t$roles_clauses[] = $wpdb->prepare( 'umm_roles.um_value LIKE %s', '%\"' . $role . '\"%' );\n \t\t\t\t}\n \n-\t\t\t\t$roles_search = implode( ' OR ', $roles_clauses );\n-\n-\t\t\t\t$this->sql_where .= \" AND ( {$roles_search} )\";\n+\t\t\t\t$this->where_clauses[] = '( ' . implode( ' OR ', $roles_clauses ) . ' )';\n \t\t\t} else {\n \t\t\t\tif ( is_multisite() ) {\n \t\t\t\t\t// select users who have capabilities for current blog\n \t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n-\t\t\t\t\t$this->sql_where .= \" AND umm_roles.um_value IS NOT NULL \";\n+\t\t\t\t\t$this->where_clauses[] = \"umm_roles.um_value IS NOT NULL\";\n \t\t\t\t}\n \t\t\t}\n \n \n \t\t\tif ( ! empty( $_POST['search'] ) ) {\n+\t\t\t\t$search_line = trim( stripslashes( $_POST['search'] ) );\n+\n \t\t\t\t$searches = array();\n \t\t\t\tforeach ( $this->core_search_fields as $field ) {\n-\t\t\t\t\t$searches[] = $wpdb->prepare( \"u.{$field} LIKE %s\", '%' . trim( $_POST['search'] ) . '%' );\n+\t\t\t\t\t$searches[] = $wpdb->prepare( \"u.{$field} LIKE %s\", '%' . $search_line . '%' );\n \t\t\t\t}\n \n \t\t\t\t$core_search = implode( ' OR ', $searches );\n \n \t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_search ON umm_search.user_id = u.ID\";\n-\t\t\t\t$this->sql_where .= \" AND ( umm_search.um_value = '\" . trim( $_POST['search'] ) . \"' OR umm_search.um_value LIKE '%\" . trim( $_POST['search'] ) . \"%' OR umm_search.um_value LIKE '%\" . trim( serialize( strval( $_POST['search'] ) ) ) . \"%' OR {$core_search})\";\n+\n+\t\t\t\t$this->where_clauses[] = $wpdb->prepare( \"( umm_search.um_value = %s OR umm_search.um_value LIKE %s OR umm_search.um_value LIKE %s OR {$core_search})\", $search_line, '%' . $search_line . '%', '%' . serialize( strval( $search_line ) ) . '%' );\n \n \t\t\t\t$this->is_search = true;\n \t\t\t}\n@@ -313,209 +561,7 @@ function ajax_get_members() {\n \t\t\t\t\t\tcontinue;\n \t\t\t\t\t}\n \n-\t\t\t\t\tswitch ( $field ) {\n-\t\t\t\t\t\tdefault:\n-\n-\t\t\t\t\t\t\t$filter_type = $this->filter_types[ $field ];\n-\n-\t\t\t\t\t\t\t/**\n-\t\t\t\t\t\t\t * UM hook\n-\t\t\t\t\t\t\t *\n-\t\t\t\t\t\t\t * @type filter\n-\t\t\t\t\t\t\t * @title um_query_args_{$field}__filter\n-\t\t\t\t\t\t\t * @description Change field's query for search at Members Directory\n-\t\t\t\t\t\t\t * @input_vars\n-\t\t\t\t\t\t\t * [{\"var\":\"$field_query\",\"type\":\"array\",\"desc\":\"Field query\"}]\n-\t\t\t\t\t\t\t * @change_log\n-\t\t\t\t\t\t\t * [\"Since: 2.0\"]\n-\t\t\t\t\t\t\t * @usage\n-\t\t\t\t\t\t\t * <?php add_filter( 'um_query_args_{$field}__filter', 'function_name', 10, 1 ); ?>\n-\t\t\t\t\t\t\t * @example\n-\t\t\t\t\t\t\t * <?php\n-\t\t\t\t\t\t\t * add_filter( 'um_query_args_{$field}__filter', 'my_query_args_filter', 10, 1 );\n-\t\t\t\t\t\t\t * function my_query_args_filter( $field_query ) {\n-\t\t\t\t\t\t\t *     // your code here\n-\t\t\t\t\t\t\t *     return $field_query;\n-\t\t\t\t\t\t\t * }\n-\t\t\t\t\t\t\t * ?>\n-\t\t\t\t\t\t\t */\n-\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}__filter\", false, $field, $value, $filter_type );\n-\n-\t\t\t\t\t\t\tif ( ! $field_query ) {\n-\n-\t\t\t\t\t\t\t\tswitch ( $filter_type ) {\n-\t\t\t\t\t\t\t\t\tdefault:\n-\n-\t\t\t\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}_{$filter_type}__filter\", false, $field, $value, $filter_type );\n-\n-\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t\tcase 'text':\n-\n-\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t\t\t\t$value = trim( stripslashes( $value ) );\n-\n-\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND umm\" . $i . \".um_value = '{$value}' )\";\n-\n-\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n-\n-\t\t\t\t\t\t\t\t\t\tbreak;\n-\n-\t\t\t\t\t\t\t\t\tcase 'select':\n-\t\t\t\t\t\t\t\t\t\tif ( is_array( $value ) ) {\n-\n-\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t\t\t\t\t$values_array = array();\n-\t\t\t\t\t\t\t\t\t\t\tforeach ( $value as $single_val ) {\n-\t\t\t\t\t\t\t\t\t\t\t\t$single_val = stripslashes( $single_val );\n-\n-\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"umm\" . $i . \".um_value LIKE '%\\\"\" . trim( $single_val ) . \"\\\"%'\";\n-\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"umm\" . $i . \".um_value LIKE '%\" . serialize( strval( trim( $single_val ) ) ) . \"%'\";\n-\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"umm\" . $i . \".um_value = '\" . trim( $single_val ) . \"'\";\n-\n-\t\t\t\t\t\t\t\t\t\t\t\tif ( is_numeric( $single_val ) ) {\n-\t\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"umm\" . $i . \".um_value LIKE '%\" . serialize( intval( trim( $single_val ) ) ) . \"%'\";\n-\t\t\t\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t\t\t\t$values = implode( ' OR ', $values_array );\n-\n-\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND ( {$values} ) )\";\n-\t\t\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n-\n-\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t\tcase 'slider':\n-\n-\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t\t\t\t$min = min( $value );\n-\t\t\t\t\t\t\t\t\t\t$max = max( $value );\n-\n-\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND umm\" . $i . \".um_value BETWEEN {$min} AND {$max} )\";\n-\n-\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n-\n-\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t\tcase 'datepicker':\n-\n-\t\t\t\t\t\t\t\t\t\t$offset = 0;\n-\t\t\t\t\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n-\t\t\t\t\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n-\t\t\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n-\t\t\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n-\t\t\t\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', $from_date );\n-\t\t\t\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', $to_date );\n-\n-\n-\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND umm\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n-\n-\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $from_date, $to_date );\n-\n-\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t\tcase 'timepicker':\n-\n-\t\t\t\t\t\t\t\t\t\tif ( $value[0] == $value[1] ) {\n-\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n-\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND umm\" . $i . \".um_value = '{$value[0]}' )\";\n-\t\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n-\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '{$field}' AND CAST( umm\" . $i . \".um_value AS TIME ) BETWEEN {$value[0]} AND {$value[1]} )\";\n-\t\t\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n-\n-\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\tif ( ! empty( $field_query ) && $field_query !== true ) {\n-\t\t\t\t\t\t\t\t$this->query_args['meta_query'] = array_merge( $this->query_args['meta_query'], array( $field_query ) );\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 'role':\n-\t\t\t\t\t\t\t$value = array_map( 'strtolower', $value );\n-\n-\t\t\t\t\t\t\tif ( ! empty( $roles ) || is_multisite() ) {\n-\t\t\t\t\t\t\t\t$roles_clauses = array();\n-\t\t\t\t\t\t\t\tforeach ( $value as $role ) {\n-\t\t\t\t\t\t\t\t\t$roles_clauses[] = \"umm_roles.um_value LIKE '%\\\"\" . $role . \"\\\"%'\";\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t$roles_search = implode( ' OR ', $roles_clauses );\n-\n-\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( {$roles_search} )\";\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n-\n-\t\t\t\t\t\t\t\t$roles = $value;\n-\n-\t\t\t\t\t\t\t\t$roles_clauses = array();\n-\t\t\t\t\t\t\t\tforeach ( $value as $role ) {\n-\t\t\t\t\t\t\t\t\t$roles_clauses[] = \"umm_roles.um_value LIKE '%\\\"\" . $role . \"\\\"%'\";\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t$roles_search = implode( ' OR ', $roles_clauses );\n-\n-\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( {$roles_search} )\";\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n-\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 'birth_date':\n-\n-\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ), date( 'Y', time() - min( $value ) * YEAR_IN_SECONDS ) ) );\n-\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ) + 1, date( 'Y', time() - ( max( $value ) + 1 ) * YEAR_IN_SECONDS ) ) );\n-\n-\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = 'birth_date' AND umm\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n-\n-\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = array( $to_date, $from_date );\n-\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 'user_registered':\n-\n-\t\t\t\t\t\t\t$offset = 0;\n-\t\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n-\t\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t$from_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', min( $value ) ) . \"+$offset hours\" ) );\n-\t\t\t\t\t\t\t$to_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', max( $value ) ) . \"+$offset hours\" ) );\n-\n-\t\t\t\t\t\t\t$this->sql_where .= \" AND ( u.user_registered BETWEEN {$from_date} AND {$to_date} )\";\n-\n-\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n-\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 'last_login':\n-\n-\t\t\t\t\t\t\t$offset = 0;\n-\t\t\t\t\t\t\tif ( isset( $_POST['gmt_offset'] ) && is_numeric( $_POST['gmt_offset'] ) ) {\n-\t\t\t\t\t\t\t\t$offset = (int) $_POST['gmt_offset'];\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n-\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n-\n-\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm\" . $i . \" ON umm\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t$this->sql_where .= \" AND ( umm\" . $i . \".um_key = '_um_last_login' AND umm\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n-\n-\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n-\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n+\t\t\t\t\t$this->handle_filter_query( $directory_data, $field, $value, $i );\n \n \t\t\t\t\t$i++;\n \t\t\t\t}\n@@ -529,199 +575,11 @@ function ajax_get_members() {\n \t\t\t\t\t$default_filters = maybe_unserialize( $directory_data['search_filters'] );\n \t\t\t\t}\n \n-\t\t\t\t$gmt_offset = get_post_meta( $directory_data['form_id'], '_um_search_filters_gmt', true );\n-\n \t\t\t\tif ( ! empty( $default_filters ) ) {\n \t\t\t\t\t$i = 1;\n \t\t\t\t\tforeach ( $default_filters as $field => $value ) {\n-\t\t\t\t\t\t//unable default filter in case if we select other value in frontend filters\n-\t\t//\t\t\t\tif ( in_array( $field, array_keys( $this->custom_filters_in_query ) ) ) {\n-\t\t//\t\t\t\t\tcontinue;\n-\t\t//\t\t\t\t}\n-\n-\t\t\t\t\t\tswitch ( $field ) {\n-\t\t\t\t\t\t\tdefault:\n-\n-\t\t\t\t\t\t\t\t$filter_type = $this->filter_types[ $field ];\n-\n-\t\t\t\t\t\t\t\t/**\n-\t\t\t\t\t\t\t\t * UM hook\n-\t\t\t\t\t\t\t\t *\n-\t\t\t\t\t\t\t\t * @type filter\n-\t\t\t\t\t\t\t\t * @title um_query_args_{$field}__filter\n-\t\t\t\t\t\t\t\t * @description Change field's query for search at Members Directory\n-\t\t\t\t\t\t\t\t * @input_vars\n-\t\t\t\t\t\t\t\t * [{\"var\":\"$field_query\",\"type\":\"array\",\"desc\":\"Field query\"}]\n-\t\t\t\t\t\t\t\t * @change_log\n-\t\t\t\t\t\t\t\t * [\"Since: 2.0\"]\n-\t\t\t\t\t\t\t\t * @usage\n-\t\t\t\t\t\t\t\t * <?php add_filter( 'um_query_args_{$field}__filter', 'function_name', 10, 1 ); ?>\n-\t\t\t\t\t\t\t\t * @example\n-\t\t\t\t\t\t\t\t * <?php\n-\t\t\t\t\t\t\t\t * add_filter( 'um_query_args_{$field}__filter', 'my_query_args_filter', 10, 1 );\n-\t\t\t\t\t\t\t\t * function my_query_args_filter( $field_query ) {\n-\t\t\t\t\t\t\t\t *     // your code here\n-\t\t\t\t\t\t\t\t *     return $field_query;\n-\t\t\t\t\t\t\t\t * }\n-\t\t\t\t\t\t\t\t * ?>\n-\t\t\t\t\t\t\t\t */\n-\t\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}__filter\", false, $field, $value, $filter_type );\n-\n-\t\t\t\t\t\t\t\tif ( ! $field_query ) {\n-\n-\t\t\t\t\t\t\t\t\tswitch ( $filter_type ) {\n-\t\t\t\t\t\t\t\t\t\tdefault:\n-\n-\t\t\t\t\t\t\t\t\t\t\t$field_query = apply_filters( \"um_query_args_{$field}_{$filter_type}__filter\", false, $field, $value, $filter_type );\n-\n-\t\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t\t\tcase 'text':\n-\n-\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t\t\t\t\t$value = trim( stripslashes( $value ) );\n-\n-\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND ummd\" . $i . \".um_value = '{$value}' )\";\n-\n-\t\t\t\t\t\t\t\t\t\t\t$this->custom_filters_in_query[ $field ] = $value;\n-\n-\t\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t\t\tcase 'select':\n-\t\t\t\t\t\t\t\t\t\t\tif ( ! is_array( $value ) ) {\n-\t\t\t\t\t\t\t\t\t\t\t\t$value = array( $value );\n-\t\t\t\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t\t\t\t\t$values_array = array();\n-\t\t\t\t\t\t\t\t\t\t\tforeach ( $value as $single_val ) {\n-\t\t\t\t\t\t\t\t\t\t\t\t$single_val = stripslashes( $single_val );\n-\n-\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"ummd\" . $i . \".um_value LIKE '%\\\"\" . trim( $single_val ) . \"\\\"%'\";\n-\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"ummd\" . $i . \".um_value LIKE '%\" . serialize( strval( trim( $single_val ) ) ) . \"%'\";\n-\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"ummd\" . $i . \".um_value = '\" . trim( $single_val ) . \"'\";\n-\n-\t\t\t\t\t\t\t\t\t\t\t\tif ( is_numeric( $single_val ) ) {\n-\t\t\t\t\t\t\t\t\t\t\t\t\t$values_array[] = \"ummd\" . $i . \".um_value LIKE '%\" . serialize( intval( trim( $single_val ) ) ) . \"%'\";\n-\t\t\t\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t\t\t\t$values = implode( ' OR ', $values_array );\n-\n-\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND ( {$values} ) )\";\n-\n-\t\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t\t\tcase 'slider':\n-\n-\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t\t\t\t\t$min = min( $value );\n-\t\t\t\t\t\t\t\t\t\t\t$max = max( $value );\n-\n-\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND ummd\" . $i . \".um_value BETWEEN {$min} AND {$max} )\";\n-\n-\t\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t\t\tcase 'datepicker':\n-\n-\t\t\t\t\t\t\t\t\t\t\t$offset = 0;\n-\t\t\t\t\t\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n-\t\t\t\t\t\t\t\t\t\t\t\t$offset = $gmt_offset;\n-\t\t\t\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n-\t\t\t\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n-\t\t\t\t\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', $from_date );\n-\t\t\t\t\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', $to_date );\n-\n-\n-\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND ummd\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n-\n-\t\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t\t\tcase 'timepicker':\n-\n-\t\t\t\t\t\t\t\t\t\t\tif ( $value[0] == $value[1] ) {\n-\t\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n-\t\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND ummd\" . $i . \".um_value = '{$value[0]}' )\";\n-\t\t\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n-\t\t\t\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '{$field}' AND CAST( ummd\" . $i . \".um_value AS TIME ) BETWEEN {$value[0]} AND {$value[1]} )\";\n-\t\t\t\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\tcase 'role':\n-//\t\t\t\t\t\t\t\t$value = explode( '||', $value );\n-//\t\t\t\t\t\t\t\t$value = array_map( 'strtolower', $value );\n-\n-\t\t\t\t\t\t\t\t$value = array_map( 'strtolower', $value );\n-\n-\t\t\t\t\t\t\t\tif ( ! empty( $roles ) || is_multisite() ) {\n-\t\t\t\t\t\t\t\t\t$roles_clauses = array();\n-\t\t\t\t\t\t\t\t\tforeach ( $value as $role ) {\n-\t\t\t\t\t\t\t\t\t\t$roles_clauses[] = \"umm_roles.um_value LIKE '%\\\"\" . $role . \"\\\"%'\";\n-\t\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t\t$roles_search = implode( ' OR ', $roles_clauses );\n-\n-\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( {$roles_search} )\";\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata umm_roles ON ( umm_roles.user_id = u.ID AND umm_roles.um_key = '\" . $wpdb->get_blog_prefix( $blog_id ) . \"capabilities' )\";\n-\n-\t\t\t\t\t\t\t\t\t$roles = $value;\n-\n-\t\t\t\t\t\t\t\t\t$roles_clauses = array();\n-\t\t\t\t\t\t\t\t\tforeach ( $value as $role ) {\n-\t\t\t\t\t\t\t\t\t\t$roles_clauses[] = \"umm_roles.um_value LIKE '%\\\"\" . $role . \"\\\"%'\";\n-\t\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t\t$roles_search = implode( ' OR ', $roles_clauses );\n-\n-\t\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( {$roles_search} )\";\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\tcase 'birth_date':\n-\t\t\t\t\t\t\t\t$from_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ), date( 'Y', time() - min( $value ) * YEAR_IN_SECONDS ) ) );\n-\t\t\t\t\t\t\t\t$to_date = date( 'Y/m/d', mktime( 0,0,0, date( 'm', time() ), date( 'd', time() ) + 1, date( 'Y', time() - ( max( $value ) + 1 ) * YEAR_IN_SECONDS ) ) );\n-\n-\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = 'birth_date' AND ummd\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n-\n \n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\tcase 'user_registered':\n-\t\t\t\t\t\t\t\t$offset = 0;\n-\t\t\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n-\t\t\t\t\t\t\t\t\t$offset = $gmt_offset;\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t$from_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', min( $value ) ) . \"+$offset hours\" ) );\n-\t\t\t\t\t\t\t\t$to_date = date( 'Y-m-d H:s:i', strtotime( date( 'Y-m-d H:s:i', max( $value ) ) . \"+$offset hours\" ) );\n-\n-\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( u.user_registered BETWEEN {$from_date} AND {$to_date} )\";\n-\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\tcase 'last_login':\n-\t\t\t\t\t\t\t\t$offset = 0;\n-\t\t\t\t\t\t\t\tif ( is_numeric( $gmt_offset ) ) {\n-\t\t\t\t\t\t\t\t\t$offset = $gmt_offset;\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t$from_date = (int) min( $value ) + ( $offset * HOUR_IN_SECONDS ); // client time zone offset\n-\t\t\t\t\t\t\t\t$to_date   = (int) max( $value ) + ( $offset * HOUR_IN_SECONDS ) + DAY_IN_SECONDS - 1; // time 23:59\n-\n-\t\t\t\t\t\t\t\t$this->joins[] = \"LEFT JOIN {$wpdb->prefix}um_metadata ummd\" . $i . \" ON ummd\" . $i . \".user_id = u.ID\";\n-\n-\t\t\t\t\t\t\t\t$this->sql_where .= \" AND ( ummd\" . $i . \".um_key = '_um_last_login' AND ummd\" . $i . \".um_value BETWEEN {$from_date} AND {$to_date} )\";\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\t$this->handle_filter_query( $directory_data, $field, $value, $i, true );\n \n \t\t\t\t\t\t$i++;\n \t\t\t\t\t}\n@@ -820,7 +678,7 @@ function ajax_get_members() {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\t$this->sql_order = apply_filters( 'um_modify_sortby_parameter', $this->sql_order, $sortby );\n+\t\t\t$this->sql_order = apply_filters( 'um_modify_sortby_parameter_meta', $this->sql_order, $sortby );\n \n \n \t\t\t$profiles_per_page = $directory_data['profiles_per_page'];\n@@ -841,16 +699,26 @@ function ajax_get_members() {\n \t\t\t\t$this->sql_limit .= $wpdb->prepare( 'LIMIT %d, %d', $query_number * ( $query_paged - 1 ), $number );\n \t\t\t}\n \n-\t\t\t$sql_join = implode( ' ', $this->joins );\n-\n \t\t\tdo_action( 'um_pre_users_query', $this, $directory_data, $sortby );\n \n+\t\t\t$sql_join = implode( ' ', $this->joins );\n+\t\t\t$sql_where = implode( ' AND ', $this->where_clauses );\n+\t\t\t$sql_where = ! empty( $sql_where ) ? ' AND ' . $sql_where : '';\n+\n \t\t\tglobal $wpdb;\n+\n+\t\t\t/*var_dump( \"SELECT SQL_CALC_FOUND_ROWS DISTINCT u.ID\n+\t\t\t\tFROM {$wpdb->users} AS u\n+\t\t\t\t{$sql_join}\n+\t\t\t\tWHERE 1=1 {$sql_where}\n+\t\t\t\t{$this->sql_order}\n+\t\t\t\t{$this->sql_limit}\" );*/\n+\n \t\t\t$user_ids = $wpdb->get_col(\n \t\t\t\t\"SELECT SQL_CALC_FOUND_ROWS DISTINCT u.ID \n \t\t\t\tFROM {$wpdb->users} AS u\n \t\t\t\t{$sql_join}\n-\t\t\t\tWHERE 1=1 {$this->sql_where}\n+\t\t\t\tWHERE 1=1 {$sql_where}\n \t\t\t\t{$this->sql_order}\n \t\t\t\t{$this->sql_limit}\"\n \t\t\t);\n@@ -876,65 +744,5 @@ function ajax_get_members() {\n \n \t\t\twp_send_json_success( array( 'pagination' => $pagination_data, 'users' => $users, 'is_search' => $this->is_search ) );\n \t\t}\n-\n-\n-\t\t/**\n-\t\t * Get data array for pagination\n-\t\t *\n-\t\t *\n-\t\t * @param array $directory_data\n-\t\t * @param int $total_users\n-\t\t *\n-\t\t * @return array\n-\t\t */\n-\t\tfunction calculate_pagination( $directory_data, $total_users ) {\n-\n-\t\t\t$current_page = ! empty( $_POST['page'] ) ? $_POST['page'] : 1;\n-\n-\t\t\t$total_users = ( ! empty( $directory_data['max_users'] ) && $directory_data['max_users'] <= $total_users ) ? $directory_data['max_users'] : $total_users;\n-\n-\t\t\t// number of profiles for mobile\n-\t\t\t$profiles_per_page = $directory_data['profiles_per_page'];\n-\t\t\tif ( UM()->mobile()->isMobile() && isset( $directory_data['profiles_per_page_mobile'] ) ) {\n-\t\t\t\t$profiles_per_page = $directory_data['profiles_per_page_mobile'];\n-\t\t\t}\n-\n-\t\t\t$total_pages = 1;\n-\t\t\tif ( ! empty( $profiles_per_page ) ) {\n-\t\t\t\t$total_pages = ceil( $total_users / $profiles_per_page );\n-\t\t\t}\n-\n-\t\t\tif ( ! empty( $total_pages ) ) {\n-\t\t\t\t$index1 = 0 - ( $current_page - 2 ) + 1;\n-\t\t\t\t$to = $current_page + 2;\n-\t\t\t\tif ( $index1 > 0 ) {\n-\t\t\t\t\t$to += $index1;\n-\t\t\t\t}\n-\n-\t\t\t\t$index2 = $total_pages - ( $current_page + 2 );\n-\t\t\t\t$from = $current_page - 2;\n-\t\t\t\tif ( $index2 < 0 ) {\n-\t\t\t\t\t$from += $index2;\n-\t\t\t\t}\n-\n-\t\t\t\t$pages_to_show = range(\n-\t\t\t\t\t( $from > 0 ) ? $from : 1,\n-\t\t\t\t\t( $to <= $total_pages ) ? $to : $total_pages\n-\t\t\t\t);\n-\t\t\t}\n-\n-\n-\t\t\t$pagination_data = array(\n-\t\t\t\t'pages_to_show' => ( ! empty( $pages_to_show ) && count( $pages_to_show ) > 1 ) ? array_values( $pages_to_show ) : array(),\n-\t\t\t\t'current_page'  => $current_page,\n-\t\t\t\t'total_pages'   => $total_pages,\n-\t\t\t\t'total_users'   => $total_users,\n-\t\t\t);\n-\n-\t\t\t$pagination_data['header'] = $this->convert_tags( $directory_data['header'], $pagination_data );\n-\t\t\t$pagination_data['header_single'] = $this->convert_tags( $directory_data['header_single'], $pagination_data );\n-\n-\t\t\treturn $pagination_data;\n-\t\t}\n \t}\n }\n\\ No newline at end of file"
        },
        {
          "filename": "includes/core/class-member-directory.php",
          "status": "modified",
          "additions": 9,
          "deletions": 9,
          "patch": "@@ -1252,20 +1252,20 @@ function general_search() {\n \t\t\t\t$meta_query = array(\n \t\t\t\t\t'relation' => 'OR',\n \t\t\t\t\tarray(\n-\t\t\t\t\t\t'value'     => trim( $_POST['search'] ),\n+\t\t\t\t\t\t'value'     => trim( stripslashes( $_POST['search'] ) ),\n \t\t\t\t\t\t'compare'   => '=',\n \t\t\t\t\t),\n \t\t\t\t\tarray(\n-\t\t\t\t\t\t'value'     => trim( $_POST['search'] ),\n+\t\t\t\t\t\t'value'     => trim( stripslashes( $_POST['search'] ) ),\n \t\t\t\t\t\t'compare'   => 'LIKE',\n \t\t\t\t\t),\n \t\t\t\t\tarray(\n-\t\t\t\t\t\t'value'     => trim( serialize( strval( $_POST['search'] ) ) ),\n+\t\t\t\t\t\t'value'     => trim( serialize( strval( stripslashes( $_POST['search'] ) ) ) ),\n \t\t\t\t\t\t'compare'   => 'LIKE',\n \t\t\t\t\t),\n \t\t\t\t);\n \n-\t\t\t\t$meta_query = apply_filters( 'um_member_directory_general_search_meta_query', $meta_query, $_POST['search'] );\n+\t\t\t\t$meta_query = apply_filters( 'um_member_directory_general_search_meta_query', $meta_query, stripslashes( $_POST['search'] ) );\n \n \t\t\t\t$this->query_args['meta_query'][] = $meta_query;\n \n@@ -1290,7 +1290,7 @@ function general_search() {\n \t\tfunction change_meta_sql( $sql, $queries, $type, $primary_table, $primary_id_column, $context ) {\n \t\t\tif ( ! empty( $_POST['search'] ) ) {\n \t\t\t\tglobal $wpdb;\n-\t\t\t\t$search = trim( $_POST['search'] );\n+\t\t\t\t$search = trim( stripslashes( $_POST['search'] ) );\n \t\t\t\tif ( ! empty( $search ) ) {\n \n \t\t\t\t\t$meta_value = '%' . $wpdb->esc_like( $search ) . '%';\n@@ -1870,15 +1870,15 @@ function default_filters( $directory_data ) {\n \t\t *\n \t\t *\n \t\t * @param array $directory_data\n-\t\t * @param \\WP_User_Query $result\n+\t\t * @param int $total_users\n \t\t *\n \t\t * @return array\n \t\t */\n-\t\tfunction calculate_pagination( $directory_data, $result ) {\n+\t\tfunction calculate_pagination( $directory_data, $total_users ) {\n \n \t\t\t$current_page = ! empty( $_POST['page'] ) ? $_POST['page'] : 1;\n \n-\t\t\t$total_users = ( ! empty( $directory_data['max_users'] ) && $directory_data['max_users'] <= $result->total_users ) ? $directory_data['max_users'] : $result->total_users;\n+\t\t\t$total_users = ( ! empty( $directory_data['max_users'] ) && $directory_data['max_users'] <= $total_users ) ? $directory_data['max_users'] : $total_users;\n \n \t\t\t// number of profiles for mobile\n \t\t\t$profiles_per_page = $directory_data['profiles_per_page'];\n@@ -2292,7 +2292,7 @@ function ajax_get_members() {\n \t\t\t */\n \t\t\tdo_action( 'um_user_after_query', $this->query_args, $user_query );\n \n-\t\t\t$pagination_data = $this->calculate_pagination( $directory_data, $user_query );\n+\t\t\t$pagination_data = $this->calculate_pagination( $directory_data, $user_query->total_users );\n \n \t\t\t$user_ids = ! empty( $user_query->results ) ? array_unique( $user_query->results ) : array();\n "
        },
        {
          "filename": "templates/members.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -75,7 +75,7 @@\n $show_search = empty( $args['roles_can_search'] ) || ( ! empty( $priority_user_role ) && in_array( $priority_user_role, $args['roles_can_search'] ) );\n $search_from_url = '';\n if ( $search && $show_search ) {\n-\t$search_from_url = ! empty( $_GET[ 'search_' . $unique_hash ] ) ? $_GET[ 'search_' . $unique_hash ] : '';\n+\t$search_from_url = ! empty( $_GET[ 'search_' . $unique_hash ] ) ? stripslashes( $_GET[ 'search_' . $unique_hash ] ) : '';\n }\n \n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0d490d7d3a01173de0f93c5ce30640ebcc6a4899",
            "date": "2025-01-14T13:51:46Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "c1171d51b228acc1b033c943b57aeee951465bc2",
            "date": "2025-01-14T13:51:21Z",
            "author_login": "nikitasinelnikov"
          },
          {
            "sha": "2cc28857572ec01465dd7d4c8248414f501f18a3",
            "date": "2025-01-14T13:42:27Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "e72b5bdf7542603dfc73062cc74ed8e3b8ea786b",
            "date": "2025-01-14T13:42:05Z",
            "author_login": "nikitasinelnikov"
          },
          {
            "sha": "980de8a8009b65a8f3666c7928c17308213d3de5",
            "date": "2025-01-14T13:40:11Z",
            "author_login": "nikitasinelnikov"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-639",
    "description": "Multiple Insecure Direct Object Reference vulnerabilities in includes/core/class-files.php in the Ultimate Member plugin through 2.1.2 for WordPress allow remote attackers to change other users' profiles and cover photos via a modified user_id parameter. This is related to ajax_image_upload and ajax_resize_image.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-01-13T17:15:11.743",
    "last_modified": "2024-11-21T05:36:18.543",
    "fix_date": "2020-01-08T13:19:24Z"
  },
  "references": [
    {
      "url": "https://github.com/ultimatemember/ultimatemember/blob/627bbb0fae81ac34c60b43f0867eadcf8e1bc523/includes/core/class-files.php#L269",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ultimatemember/ultimatemember/blob/627bbb0fae81ac34c60b43f0867eadcf8e1bc523/includes/core/class-files.php#L310",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ultimatemember/ultimatemember/commit/249682559012734a4f7d71f52609b2f301ea55b1",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://wordpress.org/plugins/ultimate-member/#developers",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://wpvulndb.com/vulnerabilities/10041",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ultimatemember/ultimatemember/blob/627bbb0fae81ac34c60b43f0867eadcf8e1bc523/includes/core/class-files.php#L269",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ultimatemember/ultimatemember/blob/627bbb0fae81ac34c60b43f0867eadcf8e1bc523/includes/core/class-files.php#L310",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ultimatemember/ultimatemember/commit/249682559012734a4f7d71f52609b2f301ea55b1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://wordpress.org/plugins/ultimate-member/#developers",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://wpvulndb.com/vulnerabilities/10041",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:37.469736",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ultimatemember",
    "owner": "ultimatemember",
    "created_at": "2014-12-15T21:01:15Z",
    "updated_at": "2025-01-14T13:51:51Z",
    "pushed_at": "2025-01-14T13:55:29Z",
    "size": 96670,
    "stars": 250,
    "forks": 185,
    "open_issues": 226,
    "watchers": 250,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 2612829,
      "CSS": 584477,
      "JavaScript": 573541,
      "Sass": 81556,
      "Shell": 1231
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T14:07:45.735123"
  }
}