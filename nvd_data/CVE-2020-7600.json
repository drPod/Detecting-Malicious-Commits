{
  "cve_id": "CVE-2020-7600",
  "github_data": {
    "repository": "diegohaz/querymen",
    "fix_commit": "1987fefcb3b7508253a29502a008d5063a873cef",
    "related_commits": [
      "1987fefcb3b7508253a29502a008d5063a873cef",
      "1987fefcb3b7508253a29502a008d5063a873cef"
    ],
    "patch_url": "https://github.com/diegohaz/querymen/commit/1987fefcb3b7508253a29502a008d5063a873cef.patch",
    "fix_commit_details": {
      "sha": "1987fefcb3b7508253a29502a008d5063a873cef",
      "commit_date": "2020-03-12T17:17:17Z",
      "author": {
        "login": "diegohaz",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix prototype pollution vulnerability (#77)",
        "length": 98,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 28,
        "additions": 25,
        "deletions": 3
      },
      "files": [
        {
          "filename": ".travis.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -1,7 +1,6 @@\n language: node_js\n services: mongodb\n node_js:\n-  - v5\n-  - v4\n+  - v6\n after_script:\n   - 'npm run coveralls'"
        },
        {
          "filename": "src/index.js",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -19,6 +19,14 @@ export let handlers = {\n  * @param {Function} [fn] - Set the handler method.\n  */\n export function handler (type, name, fn) {\n+  if (\n+    type === 'constructor' ||\n+    type === '__proto__' ||\n+    name === 'constructor' ||\n+    name === '__proto__'\n+  ) {\n+    return\n+  }\n   if (arguments.length > 2) {\n     handlers[type][name] = fn\n   }"
        },
        {
          "filename": "test/index.js",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -42,6 +42,21 @@ const route = (...args) => {\n   return app\n }\n \n+test('Prototype pollution', (t) => {\n+  const { toString } = {}\n+\n+  querymen.handler('__proto__', 'toString', 'JHU')\n+  t.ok({}.toString === toString, 'should not be vulnerable to prototype pollution')\n+\n+  querymen.handler('formatters', '__proto__', { toString: 'JHU' })\n+  t.ok({}.toString === toString, 'should not be vulnerable to prototype pollution')\n+\n+  querymen.handler('validators', '__proto__', { toString: 'JHU' })\n+  t.ok({}.toString === toString, 'should not be vulnerable to prototype pollution')\n+\n+  t.end()\n+})\n+\n test('Querymen handler', (t) => {\n   t.notOk(querymen.parser('testParser'), 'should not get nonexistent parser')\n   t.notOk(querymen.formatter('testFormatter'), 'should not get nonexistent formatter')"
        },
        {
          "filename": "test/querymen-schema.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -29,7 +29,7 @@ test('QuerymenSchema add', (t) => {\n   t.same(add('123,456', [Number]), [123, 456], 'should add a param with type option number array')\n   t.same(add('123,0', [Boolean]), [true, false], 'should add a param with type option boolean array')\n   t.same(add('2016,2017', [Date]), [new Date('2016'), new Date('2017')], 'should add a param with type option date array')\n-  t.same(add('123,456', [RegExp]), [/123/i, /123/i], 'should add a param with type option regexp array')\n+  t.same(add('123,456', [RegExp]), [/123/i, /456/i], 'should add a param with type option regexp array')\n   t.end()\n })\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "436c11d647556c8be9ada3176d87152ddf8f9975",
            "date": "2022-06-14T14:31:43Z",
            "author_login": "tguelcan"
          },
          {
            "sha": "d420dbe72ec900cd9665e4aa2cc39b7d79ccefaa",
            "date": "2020-03-12T17:18:00Z",
            "author_login": "diegohaz"
          },
          {
            "sha": "1987fefcb3b7508253a29502a008d5063a873cef",
            "date": "2020-03-12T17:17:17Z",
            "author_login": "diegohaz"
          },
          {
            "sha": "fecef6e7f63cc66ac9f33684bf6547bd83ea9705",
            "date": "2018-02-07T17:41:30Z",
            "author_login": "jorgeluisrezende"
          },
          {
            "sha": "74a634c83d1435d3fa3e56a688577712e23f7f3f",
            "date": "2017-08-22T14:10:55Z",
            "author_login": "diegohaz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-1321",
    "description": "querymen prior to 2.1.4 allows modification of object properties. The parameters of exported function handler(type, name, fn) can be controlled by users without any sanitization. This could be abused for Prototype Pollution attacks.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-03-12T23:15:12.453",
    "last_modified": "2024-11-21T05:37:27.140",
    "fix_date": "2020-03-12T17:17:17Z"
  },
  "references": [
    {
      "url": "https://github.com/diegohaz/querymen/commit/1987fefcb3b7508253a29502a008d5063a873cef",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-QUERYMEN-559867",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/diegohaz/querymen/commit/1987fefcb3b7508253a29502a008d5063a873cef",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-QUERYMEN-559867",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:42.263790",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "querymen",
    "owner": "diegohaz",
    "created_at": "2016-04-17T15:55:45Z",
    "updated_at": "2024-12-21T20:35:48Z",
    "pushed_at": "2023-02-17T22:38:56Z",
    "size": 92,
    "stars": 129,
    "forks": 35,
    "open_issues": 27,
    "watchers": 129,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 48023
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:42:02.772236"
  }
}