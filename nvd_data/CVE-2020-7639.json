{
  "cve_id": "CVE-2020-7639",
  "github_data": {
    "repository": "eivindfjeldstad/dot",
    "fix_commit": "774e4b0c97ca35d2ae40df2cd14428d37dd07a0b",
    "related_commits": [
      "774e4b0c97ca35d2ae40df2cd14428d37dd07a0b",
      "774e4b0c97ca35d2ae40df2cd14428d37dd07a0b"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "774e4b0c97ca35d2ae40df2cd14428d37dd07a0b",
      "commit_date": "2020-02-22T18:36:16Z",
      "author": {
        "login": "eivindfjeldstad",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent prototype pollution",
        "length": 27,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 77,
        "additions": 65,
        "deletions": 12
      },
      "files": [
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 31,
          "deletions": 5,
          "patch": "@@ -8,18 +8,21 @@\n  * @api public\n  */\n \n-exports.set = function (obj, path, val) {\n+exports.set = function(obj, path, val) {\n   var segs = path.split('.');\n   var attr = segs.pop();\n   var src = obj;\n \n   for (var i = 0; i < segs.length; i++) {\n     var seg = segs[i];\n+    if (!isSafe(obj, seg)) return src;\n     obj[seg] = obj[seg] || {};\n     obj = obj[seg];\n   }\n \n-  obj[attr] = val;\n+  if (isSafe(obj, attr)) {\n+    obj[attr] = val;\n+  }\n \n   return src;\n };\n@@ -33,7 +36,7 @@ exports.set = function (obj, path, val) {\n  * @api public\n  */\n \n-exports.get = function (obj, path) {\n+exports.get = function(obj, path) {\n   var segs = path.split('.');\n   var attr = segs.pop();\n \n@@ -55,19 +58,42 @@ exports.get = function (obj, path) {\n  * @api public\n  */\n \n-exports.delete = function (obj, path) {\n+exports.delete = function(obj, path) {\n   var segs = path.split('.');\n   var attr = segs.pop();\n \n   for (var i = 0; i < segs.length; i++) {\n     var seg = segs[i];\n     if (!obj[seg]) return;\n+    if (!isSafe(obj, seg)) return;\n     obj = obj[seg];\n   }\n \n+  if (!isSafe(obj, attr)) return;\n+\n   if (Array.isArray(obj)) {\n-    obj.splice(path, 1);\n+    obj.splice(attr, 1);\n   } else {\n     delete obj[attr];\n   }\n };\n+\n+function isSafe(obj, prop) {\n+  if (isObject(obj)) {\n+    return obj[prop] === undefined || hasOwnProperty(obj, prop);\n+  }\n+\n+  if (Array.isArray(obj)) {\n+    return !isNaN(parseInt(prop, 10));\n+  }\n+\n+  return false;\n+}\n+\n+function hasOwnProperty(obj, prop) {\n+  return Object.prototype.hasOwnProperty.call(obj, prop);\n+}\n+\n+function isObject(obj) {\n+  return Object.prototype.toString.call(obj) === '[object Object]';\n+}"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -3,7 +3,7 @@\n   \"publishConfig\": {\n     \"access\": \"public\"\n   },\n-  \"version\": \"1.0.2\",\n+  \"version\": \"1.0.3\",\n   \"description\": \"Get and set object properties with dot notation\",\n   \"main\": \"index.js\",\n   \"scripts\": {"
        },
        {
          "filename": "test/index.js",
          "status": "modified",
          "additions": 33,
          "deletions": 6,
          "patch": "@@ -1,33 +1,60 @@\n var assert = require('assert');\n var dot = require('..');\n \n-var tests = module.exports = {\n-  'test set': function () {\n+var tests = (module.exports = {\n+  'test set': function() {\n     var obj = {};\n     var ret = dot.set(obj, 'cool.aid', 'rocks');\n     assert(obj.cool.aid === 'rocks');\n     assert(obj === ret);\n   },\n \n-  'test get': function () {\n+  'test get': function() {\n     var obj = {};\n     obj.cool = {};\n     obj.cool.aid = 'rocks';\n     var value = dot.get(obj, 'cool.aid');\n     assert(value === 'rocks');\n   },\n \n-  'test delete': function () {\n+  'test delete': function() {\n     var obj = {};\n     obj.cool = {};\n     obj.cool.aid = 'rocks';\n     obj.cool.hello = ['world'];\n     dot.delete(obj, 'cool.aid');\n     dot.delete(obj, 'cool.hello.0');\n-    assert(!obj.cool.hasOwnProperty('aid'))\n+    assert(!obj.cool.hasOwnProperty('aid'));\n     assert(obj.cool.hello.length == 0);\n+  },\n+\n+  'test prototype pollution': function() {\n+    var obj = {};\n+    obj.cool = {};\n+    obj.cool.aid = 'rocks';\n+    obj.cool.hello = ['world'];\n+    dot.set(obj, '__proto__', 'test');\n+    dot.set(obj, '__proto__.toString', 'test');\n+    dot.set(obj, 'toString', 'test');\n+    dot.set(obj, 'cool.hello.__proto__', 'test');\n+    dot.set(obj, 'cool.hello.__proto__.toString', 'test');\n+    dot.set(obj, 'cool.hello.toString', 'test');\n+    assert(obj.__proto__ === {}.__proto__);\n+    assert(obj.toString === Object.prototype.toString);\n+    assert(obj.cool.hello.__proto__ === [].__proto__);\n+    assert(obj.cool.hello.toString === Array.prototype.toString);\n+    dot.delete(obj, '__proto__.toString', 'test');\n+    dot.delete(obj, '__proto__', 'test');\n+    dot.delete(obj, 'toString', 'test');\n+    dot.delete(obj, 'cool.hello.__proto__.toString', 'test');\n+    dot.delete(obj, 'cool.hello.__proto__', 'test');\n+    dot.delete(obj, 'cool.hello.toString', 'test');\n+    assert(obj.__proto__ === {}.__proto__);\n+    assert(obj.toString === Object.prototype.toString);\n+    assert(obj.cool.hello.__proto__ === [].__proto__);\n+    assert(obj.cool.hello.toString === Array.prototype.toString);\n   }\n-}\n+});\n \n for (var t in tests) {\n   tests[t]();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "774e4b0c97ca35d2ae40df2cd14428d37dd07a0b",
            "date": "2020-02-22T18:36:16Z",
            "author_login": "eivindfjeldstad"
          },
          {
            "sha": "2d9fa8271cb6cd6ac2f734b82028621b3114f85b",
            "date": "2019-10-21T00:05:33Z",
            "author_login": "eivindfjeldstad"
          },
          {
            "sha": "8e800bd112f12fac555b90d99e0453a5eca3f65f",
            "date": "2019-10-21T00:04:55Z",
            "author_login": "eivindfjeldstad"
          },
          {
            "sha": "a30b73ca221c95f9f7d22dc218e5f43b5c469410",
            "date": "2019-10-20T13:42:07Z",
            "author_login": "eivindfjeldstad"
          },
          {
            "sha": "0240b00f9f2a4008a815b778099f51a08a744aa3",
            "date": "2019-10-20T13:41:28Z",
            "author_login": "eivindfjeldstad"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-1321",
    "description": "eivindfjeldstad-dot below 1.0.3 is vulnerable to Prototype Pollution.The function 'set' could be tricked into adding or modifying properties of 'Object.prototype' using a '__proto__' payload.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-04-06T13:15:12.987",
    "last_modified": "2024-11-21T05:37:31.193",
    "fix_date": "2020-02-22T18:36:16Z"
  },
  "references": [
    {
      "url": "https://github.com/eivindfjeldstad/dot/commit/774e4b0c97ca35d2ae40df2cd14428d37dd07a0b",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-EIVIFJDOT-564435",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eivindfjeldstad/dot/commit/774e4b0c97ca35d2ae40df2cd14428d37dd07a0b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-EIVIFJDOT-564435",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:42.318783",
    "processing_status": "enhanced"
  }
}