{
  "cve_id": "CVE-2020-7667",
  "github_data": {
    "repository": "sassoftware/go-rpmutils",
    "fix_commit": "a64058cf21b8aada501bba923c9aab66fb6febf0",
    "related_commits": [
      "a64058cf21b8aada501bba923c9aab66fb6febf0",
      "a64058cf21b8aada501bba923c9aab66fb6febf0"
    ],
    "patch_url": "https://github.com/sassoftware/go-rpmutils/commit/a64058cf21b8aada501bba923c9aab66fb6febf0.patch",
    "fix_commit_details": {
      "sha": "a64058cf21b8aada501bba923c9aab66fb6febf0",
      "commit_date": "2020-06-12T15:15:04Z",
      "author": {
        "login": "mtharp",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent cpio.Extract from writing into parent directories",
        "length": 57,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 51,
        "additions": 43,
        "deletions": 8
      },
      "files": [
        {
          "filename": "cpio/extract.go",
          "status": "modified",
          "additions": 17,
          "deletions": 8,
          "patch": "@@ -21,6 +21,8 @@ import (\n \t\"io\"\n \t\"os\"\n \t\"path\"\n+\t\"path/filepath\"\n+\t\"strings\"\n \n \t\"github.com/sassoftware/go-rpmutils/fileutil\"\n )\n@@ -39,7 +41,9 @@ const (\n \tS_ISSOCK = 0140000 // Socket\n )\n \n+// Extract the contents of a cpio stream from r to the destination directory dest\n func Extract(rs io.Reader, dest string) error {\n+\tdest = filepath.Clean(filepath.FromSlash(dest))\n \tlinkMap := make(map[int][]string)\n \n \tstream := NewCpioStream(rs)\n@@ -54,16 +58,21 @@ func Extract(rs io.Reader, dest string) error {\n \t\t\tbreak\n \t\t}\n \n-\t\ttarget := path.Join(dest, path.Clean(entry.Header.filename))\n-\t\tparent := path.Dir(target)\n-\n+\t\t// sanitize path\n+\t\ttarget := path.Clean(entry.Header.filename)\n+\t\tfor strings.HasPrefix(target, \"../\") {\n+\t\t\ttarget = target[3:]\n+\t\t}\n+\t\ttarget = filepath.Join(dest, filepath.FromSlash(target))\n+\t\tif !strings.HasPrefix(target, dest+string(filepath.Separator)) && dest != target {\n+\t\t\t// this shouldn't happen due to the sanitization above but always check\n+\t\t\treturn fmt.Errorf(\"invalid cpio path %q\", entry.Header.filename)\n+\t\t}\n \t\t// Create the parent directory if it doesn't exist.\n-\t\tif _, err := os.Stat(parent); os.IsNotExist(err) {\n-\t\t\tif err := os.MkdirAll(parent, 0755); err != nil {\n-\t\t\t\treturn err\n-\t\t\t}\n+\t\tparent := filepath.Dir(target)\n+\t\tif err := os.MkdirAll(parent, 0755); err != nil {\n+\t\t\treturn err\n \t\t}\n-\n \t\t// FIXME: Need a makedev implementation in go.\n \n \t\tswitch entry.Header.Mode() &^ 07777 {"
        },
        {
          "filename": "cpio/extract_test.go",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -19,6 +19,7 @@ package cpio\n import (\n \t\"io/ioutil\"\n \t\"os\"\n+\t\"path/filepath\"\n \t\"testing\"\n \t\"testing/iotest\"\n \n@@ -58,6 +59,27 @@ func TestExtract(t *testing.T) {\n \t}\n }\n \n+func TestExtractDotdot(t *testing.T) {\n+\tsetupLogging()\n+\tf, err := os.Open(\"../testdata/dotdot.cpio\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer f.Close()\n+\ttmpdir, err := ioutil.TempDir(\"\", \"cpio\")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tdefer os.RemoveAll(tmpdir)\n+\terr = Extract(f, tmpdir)\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif _, err := os.Stat(filepath.Join(tmpdir, \"aaaaaaaaa\")); err != nil {\n+\t\tt.Error(\"expected file with ../ to extract into top of destdir:\", err)\n+\t}\n+}\n+\n var _format = logging.MustStringFormatter(\n \t`%{color}%{time:15:04:05.000} %{shortfunc} \u25b6 %{level:.4s} %{id:03x}%{color:reset} %{message}`,\n )"
        },
        {
          "filename": "rpmutils_test.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@ func TestReadHeader(t *testing.T) {\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n+\tdefer f.Close()\n \n \thdr, err := ReadHeader(iotest.HalfReader(f))\n \tif err != nil {\n@@ -62,6 +63,7 @@ func TestPayloadReader(t *testing.T) {\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n+\tdefer f.Close()\n \n \trpm, err := ReadRpm(iotest.HalfReader(f))\n \tif err != nil {\n@@ -92,6 +94,7 @@ func TestExpandPayload(t *testing.T) {\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n+\tdefer f.Close()\n \n \trpm, err := ReadRpm(iotest.HalfReader(f))\n \tif err != nil {\n@@ -102,6 +105,7 @@ func TestExpandPayload(t *testing.T) {\n \tif err != nil {\n \t\tt.Fatal(err)\n \t}\n+\tdefer os.RemoveAll(tmpdir)\n \n \tif err := rpm.ExpandPayload(tmpdir); err != nil {\n \t\tt.Fatal(err)"
        },
        {
          "filename": "testdata/dotdot.cpio",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9cc5954158feca305db4b0cd5c903959a0239bec",
            "date": "2024-05-07T15:38:15Z",
            "author_login": "mtharp"
          },
          {
            "sha": "ff1ec0744cfce49aae9d31dc1d3f7652e587e66a",
            "date": "2024-05-07T15:34:01Z",
            "author_login": "mtharp"
          },
          {
            "sha": "48bac67d78956903df963d74fd318f9ad4adce08",
            "date": "2024-04-17T21:31:44Z",
            "author_login": "mtharp"
          },
          {
            "sha": "6cde7dad4cf40a1a6485a8cdd6f39a5ec27c516b",
            "date": "2024-04-17T15:15:02Z",
            "author_login": "mtharp"
          },
          {
            "sha": "6356a5a73e206dc86e075e19106ac912ad08c5f2",
            "date": "2024-03-16T16:30:58Z",
            "author_login": "drscream"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-22",
    "description": "In package github.com/sassoftware/go-rpmutils/cpio before version 0.1.0, the CPIO extraction functionality doesn't sanitize the paths of the archived files for leading and non-leading \"..\" which leads in file extraction outside of the current directory. Note: the fixing commit was applied to all affected versions which were re-released.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-06-24T12:15:12.677",
    "last_modified": "2024-11-21T05:37:34.447",
    "fix_date": "2020-06-12T15:15:04Z"
  },
  "references": [
    {
      "url": "https://github.com/sassoftware/go-rpmutils/commit/a64058cf21b8aada501bba923c9aab66fb6febf0",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSASSOFTWAREGORPMUTILSCPIO-570427",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sassoftware/go-rpmutils/commit/a64058cf21b8aada501bba923c9aab66fb6febf0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMSASSOFTWAREGORPMUTILSCPIO-570427",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.872903",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "go-rpmutils",
    "owner": "sassoftware",
    "created_at": "2016-05-24T21:00:55Z",
    "updated_at": "2024-11-22T21:36:35Z",
    "pushed_at": "2024-05-07T15:41:23Z",
    "size": 181,
    "stars": 53,
    "forks": 44,
    "open_issues": 4,
    "watchers": 53,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 101958
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T21:37:43.810409"
  }
}