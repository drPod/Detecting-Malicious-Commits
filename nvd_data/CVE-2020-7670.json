{
  "cve_id": "CVE-2020-7670",
  "github_data": {
    "repository": "ohler55/agoo",
    "fix_commit": "23d03535cf7b50d679a60a953a0cae9519a4a130",
    "related_commits": [
      "23d03535cf7b50d679a60a953a0cae9519a4a130",
      "23d03535cf7b50d679a60a953a0cae9519a4a130"
    ],
    "patch_url": "https://github.com/ohler55/agoo/commit/23d03535cf7b50d679a60a953a0cae9519a4a130.patch",
    "fix_commit_details": {
      "sha": "23d03535cf7b50d679a60a953a0cae9519a4a130",
      "commit_date": "2020-11-08T00:07:47Z",
      "author": {
        "login": "ohler55",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Remote addr (#99)",
        "length": 59,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 159,
        "additions": 113,
        "deletions": 46
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -2,6 +2,16 @@\n \n All changes to the Agoo gem are documented here. Releases follow semantic versioning.\n \n+## [2.14.0] - 2020-11-07\n+\n+### Added\n+\n+- REMOTE_ADDR element added to requests/env argument to `call()`.\n+\n+- Added check for multiple Content-Length headers.\n+\n+- Multiple occurrances of a header are now passed to the Rack `call()` method as an array.\n+\n ## [2.13.0] - 2020-07-05\n \n ### Added"
        },
        {
          "filename": "ext/agoo/con.c",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -63,6 +63,22 @@ agoo_con_create(agooErr err, int sock, uint64_t id, agooBind b) {\n     if (NULL == (c = (agooCon)AGOO_CALLOC(1, sizeof(struct _agooCon)))) {\n \tAGOO_ERR_MEM(err, \"Connection\");\n     } else {\n+\t// It would be better to get this information in server.c after\n+\t// accept() but that does not work on macOS so instead a call to\n+\t// getpeername() is used instead.\n+\tstruct sockaddr_storage\taddr;\n+\tsocklen_t\t\tlen = sizeof(addr);\n+\n+\tgetpeername(sock, (struct sockaddr*)&addr, &len);\n+\tif (addr.ss_family == AF_INET) {\n+\t    struct sockaddr_in\t*s = (struct sockaddr_in*)&addr;\n+\n+\t    inet_ntop(AF_INET, &s->sin_addr, c->remote, sizeof(c->remote));\n+\t} else {\n+\t    struct sockaddr_in6\t*s = (struct sockaddr_in6*)&addr;\n+\n+\t    inet_ntop(AF_INET6, &s->sin6_addr, c->remote, sizeof(c->remote));\n+\t}\n \tc->sock = sock;\n \tc->id = id;\n \tc->timeout = dtime() + CON_TIMEOUT;\n@@ -437,6 +453,7 @@ con_header_read(agooCon c, size_t *mlenp) {\n     c->req->method = method;\n     c->req->upgrade = AGOO_UP_NONE;\n     c->req->up = NULL;\n+    memcpy(c->req->remote, c->remote, sizeof(c->remote));\n     c->req->path.start = c->req->msg + (path.start - c->buf);\n     c->req->path.len = (int)(path.end - path.start);\n     c->req->query.start = c->req->msg + (query - c->buf);"
        },
        {
          "filename": "ext/agoo/con.h",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@\n #ifndef AGOO_CON_H\n #define AGOO_CON_H\n \n+#include <arpa/inet.h>\n #include <poll.h>\n #include <pthread.h>\n #include <stdbool.h>\n@@ -45,6 +46,7 @@ typedef struct _agooCon {\n     struct _agooBind\t\t*bind;\n     struct pollfd\t\t*pp;\n     uint64_t\t\t\tid;\n+    char\t\t\tremote[INET6_ADDRSTRLEN];\n     char\t\t\tbuf[MAX_HEADER_SIZE];\n     size_t\t\t\tbcnt;\n "
        },
        {
          "filename": "ext/agoo/http.c",
          "status": "modified",
          "additions": 20,
          "deletions": 35,
          "patch": "@@ -26,7 +26,7 @@ typedef struct _cache {\n struct _cache\t\tkey_cache;\n \n // The rack spec indicates the characters (),/:;<=>?@[]{} are invalid which\n-// clearly is not consisten with RFC7230 so stick with the RFC.\n+// clearly is not consistent with RFC7230 so stick with the RFC.\n static char\t\theader_value_chars[256] = \"\\\n xxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxx\\\n oooooooooooooooooooooooooooooooo\\\n@@ -50,7 +50,6 @@ static const char\t*header_keys[] = {\n     \"Accept-Encoding\",\n     \"Accept-Features\",\n     \"Accept-Language\",\n-    \"Accept-Language\",\n     \"Accept-Patch\",\n     \"Accept-Post\",\n     \"Accept-Ranges\",\n@@ -74,7 +73,6 @@ static const char\t*header_keys[] = {\n     \"Approved\",\n     \"Archive\",\n     \"Archived-At\",\n-    \"Archived-At\",\n     \"Article-Names\",\n     \"Article-Updates\",\n     \"Authentication-Control\",\n@@ -99,36 +97,27 @@ static const char\t*header_keys[] = {\n     \"Cc\",\n     \"Close\",\n     \"Comments\",\n-    \"Comments\",\n     \"Compliance\",\n     \"Connection\",\n     \"Content-Alternative\",\n     \"Content-Base\",\n-    \"Content-Base\",\n     \"Content-Description\",\n     \"Content-Disposition\",\n-    \"Content-Disposition\",\n     \"Content-Duration\",\n     \"Content-Encoding\",\n     \"Content-ID\",\n-    \"Content-ID\",\n     \"Content-Identifier\",\n     \"Content-Language\",\n-    \"Content-Language\",\n     \"Content-Length\",\n     \"Content-Location\",\n-    \"Content-Location\",\n-    \"Content-MD5\",\n     \"Content-MD5\",\n     \"Content-Range\",\n     \"Content-Return\",\n     \"Content-Script-Type\",\n     \"Content-Style-Type\",\n     \"Content-Transfer-Encoding\",\n-    \"Content-Transfer-Encoding\",\n     \"Content-Translation-Type\",\n     \"Content-Type\",\n-    \"Content-Type\",\n     \"Content-Version\",\n     \"Content-features\",\n     \"Control\",\n@@ -141,8 +130,7 @@ static const char\t*header_keys[] = {\n     \"DAV\",\n     \"DKIM-Signature\",\n     \"DL-Expansion-History\",\n-    \"Date\",\n-    \"Date\",\n+    \"DNT\",\n     \"Date\",\n     \"Date-Received\",\n     \"Default-Style\",\n@@ -182,24 +170,20 @@ static const char\t*header_keys[] = {\n     \"Downgraded-Sender\",\n     \"Downgraded-To\",\n     \"EDIINT-Features\",\n-    \"EDIINT-Features\",\n     \"ETag\",\n     \"Eesst-Version\",\n     \"Encoding\",\n     \"Encrypted\",\n     \"Errors-To\",\n     \"Expect\",\n     \"Expires\",\n-    \"Expires\",\n-    \"Expires\",\n     \"Expiry-Date\",\n     \"Ext\",\n     \"Followup-To\",\n     \"Form-Sub\",\n     \"Forwarded\",\n     \"From\",\n-    \"From\",\n-    \"From\",\n+    \"Front-End-Https\",\n     \"Generate-Delivery-Report\",\n     \"GetProfile\",\n     \"HTTP2-Settings\",\n@@ -219,10 +203,8 @@ static const char\t*header_keys[] = {\n     \"Injection-Date\",\n     \"Injection-Info\",\n     \"Jabber-ID\",\n-    \"Jabber-ID\",\n     \"Keep-Alive\",\n     \"Keywords\",\n-    \"Keywords\",\n     \"Label\",\n     \"Language\",\n     \"Last-Modified\",\n@@ -240,7 +222,6 @@ static const char\t*header_keys[] = {\n     \"Location\",\n     \"Lock-Token\",\n     \"MIME-Version\",\n-    \"MIME-Version\",\n     \"MMHS-Acp127-Message-Identifier\",\n     \"MMHS-Authorizing-Users\",\n     \"MMHS-Codress-Message-Indicator\",\n@@ -262,8 +243,6 @@ static const char\t*header_keys[] = {\n     \"Memento-Datetime\",\n     \"Message-Context\",\n     \"Message-ID\",\n-    \"Message-ID\",\n-    \"Message-ID\",\n     \"Message-Type\",\n     \"Meter\",\n     \"Method-Check\",\n@@ -279,7 +258,6 @@ static const char\t*header_keys[] = {\n     \"Optional-WWW-Authenticate\",\n     \"Ordering-Type\",\n     \"Organization\",\n-    \"Organization\",\n     \"Origin\",\n     \"Original-Encoded-Information-Types\",\n     \"Original-From\",\n@@ -292,7 +270,6 @@ static const char\t*header_keys[] = {\n     \"P3P\",\n     \"PEP\",\n     \"PICS-Label\",\n-    \"PICS-Label\",\n     \"Path\",\n     \"Pep-Info\",\n     \"Position\",\n@@ -311,6 +288,7 @@ static const char\t*header_keys[] = {\n     \"Proxy-Authenticate\",\n     \"Proxy-Authentication-Info\",\n     \"Proxy-Authorization\",\n+    \"Proxy-Connection\",\n     \"Proxy-Features\",\n     \"Proxy-Instruction\",\n     \"Public\",\n@@ -321,13 +299,11 @@ static const char\t*header_keys[] = {\n     \"Received-SPF\",\n     \"Redirect-Ref\",\n     \"References\",\n-    \"References\",\n     \"Referer\",\n     \"Referer-Root\",\n     \"Relay-Version\",\n     \"Reply-By\",\n     \"Reply-To\",\n-    \"Reply-To\",\n     \"Require-Recipient-Valid-Since\",\n     \"Resent-Bcc\",\n     \"Resent-Cc\",\n@@ -345,6 +321,7 @@ static const char\t*header_keys[] = {\n     \"SIO-Label-History\",\n     \"SLUG\",\n     \"Safe\",\n+    \"Save-Data\",\n     \"Schedule-Reply\",\n     \"Schedule-Tag\",\n     \"Sec-WebSocket-Accept\",\n@@ -367,11 +344,9 @@ static const char\t*header_keys[] = {\n     \"Strict-Transport-Security\",\n     \"SubOK\",\n     \"Subject\",\n-    \"Subject\",\n     \"Subst\",\n     \"Summary\",\n     \"Supersedes\",\n-    \"Supersedes\",\n     \"Surrogate-Capability\",\n     \"Surrogate-Control\",\n     \"TCN\",\n@@ -390,9 +365,9 @@ static const char\t*header_keys[] = {\n     \"UA-Windowpixels\",\n     \"URI\",\n     \"Upgrade\",\n+    \"Upgrade-Insecure-Requests\",\n     \"Urgency\",\n     \"User-Agent\",\n-    \"User-Agent\",\n     \"VBR-Info\",\n     \"Variant-Vary\",\n     \"Vary\",\n@@ -401,22 +376,32 @@ static const char\t*header_keys[] = {\n     \"WWW-Authenticate\",\n     \"Want-Digest\",\n     \"Warning\",\n-    \"X-Archived-At\",\n+    \"X-ATT-DeviceId\",\n     \"X-Archived-At\",\n     \"X-Content-Type-Options\",\n+    \"X-Correlation-ID\",\n+    \"X-Csrf-Token\",\n     \"X-Device-Accept\",\n     \"X-Device-Accept-Charset\",\n     \"X-Device-Accept-Encoding\",\n     \"X-Device-Accept-Language\",\n     \"X-Device-User-Agent\",\n+    \"X-Forwarded-For\",\n+    \"X-Forwarded-Host\",\n+    \"X-Forwarded-Proto\",\n     \"X-Frame-Options\",\n+    \"X-Http-Method-Override\",\n     \"X-Mittente\",\n     \"X-PGP-Sig\",\n+    \"X-Request-ID\",\n+    \"X-Requested-With\",\n     \"X-Ricevuta\",\n     \"X-Riferimento-Message-ID\",\n     \"X-TipoRicevuta\",\n     \"X-Trasporto\",\n+    \"X-UIDH\",\n     \"X-VerificaSicurezza\",\n+    \"X-Wap-Profile\",\n     \"X-XSS-Protection\",\n     \"X400-Content-Identifier\",\n     \"X400-Content-Return\",\n@@ -469,7 +454,7 @@ key_set(const char *key) {\n     int64_t\th = calc_hash(key, &len);\n     Slot\t*bucket = get_bucketp(h);\n     Slot\ts;\n-    \n+\n     if (NULL != (s = (Slot)AGOO_MALLOC(sizeof(struct _slot)))) {\n \ts->hash = h;\n \ts->klen = len;\n@@ -482,7 +467,7 @@ key_set(const char *key) {\n void\n agoo_http_init() {\n     const char\t**kp = header_keys;\n-    \n+\n     memset(&key_cache, 0, sizeof(struct _cache));\n     for (; NULL != *kp; kp++) {\n \tkey_set(*kp);\n@@ -550,7 +535,7 @@ agoo_http_header_ok(agooErr err, const char *key, int klen, const char *value, i\n const char*\n agoo_http_code_message(int code) {\n     const char\t*msg = \"\";\n-    \n+\n     switch (code) {\n     case 100:\tmsg = \"Continue\";\t\t\t\tbreak;\n     case 101:\tmsg = \"Switching Protocols\";\t\t\tbreak;"
        },
        {
          "filename": "ext/agoo/req.h",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -3,6 +3,7 @@\n #ifndef AGOO_REQ_H\n #define AGOO_REQ_H\n \n+#include <arpa/inet.h>\n #include <stdint.h>\n \n #include \"hook.h\"\n@@ -32,6 +33,7 @@ typedef struct _agooReq {\n     struct _agooStr\t\tquery;\n     struct _agooStr\t\theader;\n     struct _agooStr\t\tbody;\n+    char\t\t\tremote[INET6_ADDRSTRLEN];\n     void\t\t\t*env;\n     agooHook\t\t\thook;\n     size_t\t\t\tmlen;   // allocated msg length"
        },
        {
          "filename": "ext/agoo/request.c",
          "status": "modified",
          "additions": 53,
          "deletions": 4,
          "patch": "@@ -43,6 +43,7 @@ static VALUE\track_upgrade_val = Qundef;\n static VALUE\track_url_scheme_val = Qundef;\n static VALUE\track_version_val = Qundef;\n static VALUE\track_version_val_val = Qundef;\n+static VALUE\tremote_addr_val = Qundef;\n static VALUE\trequest_method_val = Qundef;\n static VALUE\tscript_name_val = Qundef;\n static VALUE\tserver_name_val = Qundef;\n@@ -96,6 +97,27 @@ method(VALUE self) {\n     return req_method((agooReq)DATA_PTR(self));\n }\n \n+static VALUE\n+req_remote_addr(agooReq r) {\n+\n+    if (NULL == r) {\n+\trb_raise(rb_eArgError, \"Request is no longer valid.\");\n+    }\n+    return rb_str_new(r->remote, strlen(r->remote));\n+}\n+\n+/* Document-method: remote_addr\n+ *\n+ * call-seq: remote_addr()\n+ *\n+ * Returns the remote address.\n+ */\n+static VALUE\n+remote_addr(VALUE self) {\n+    return req_remote_addr((agooReq)DATA_PTR(self));\n+}\n+\n+\n static VALUE\n req_script_name(agooReq r) {\n     // The logic is a bit tricky here and for path_info. If the HTTP path is /\n@@ -366,14 +388,29 @@ rack_run_once(VALUE self) {\n \n static void\n add_header_value(VALUE hh, const char *key, int klen, const char *val, int vlen) {\n+    VALUE\tv;\n+\n     if (sizeof(content_type) - 1 == klen && 0 == strncasecmp(key, content_type, sizeof(content_type) - 1)) {\n-\trb_hash_aset(hh, content_type_val, rb_str_new(val, vlen));\n+\tif (Qnil == (v = rb_hash_lookup2(hh, content_type_val, Qnil))) {\n+\t    rb_hash_aset(hh, content_type_val, rb_str_new(val, vlen));\n+\t} else {\n+\t    volatile VALUE\ta = rb_ary_new();\n+\n+\t    rb_ary_push(a, v);\n+\t    rb_ary_push(a, rb_str_new(val, vlen));\n+\t    rb_hash_aset(hh, content_type_val, a);\n+\t}\n     } else if (sizeof(content_length) - 1 == klen && 0 == strncasecmp(key, content_length, sizeof(content_length) - 1)) {\n-\trb_hash_aset(hh, content_length_val, rb_str_new(val, vlen));\n+\tif (Qnil == (v = rb_hash_lookup2(hh, content_length_val, Qnil))) {\n+\t    rb_hash_aset(hh, content_length_val, rb_str_new(val, vlen));\n+\t} else {\n+\t    rb_raise(rb_eArgError, \"Multiple Content-Length headers.\");\n+\t}\n     } else {\n \tchar\t\thkey[1024];\n \tchar\t\t*k = hkey;\n \tvolatile VALUE\tsval = rb_str_new(val, vlen);\n+\tvolatile VALUE\tkval;\n \n \tstrcpy(hkey, \"HTTP_\");\n \tk = hkey + 5;\n@@ -392,7 +429,16 @@ add_header_value(VALUE hh, const char *key, int klen, const char *val, int vlen)\n \t\t*k = toupper(*k);\n \t    }\n \t}\n-\trb_hash_aset(hh, rb_str_new(hkey, klen + 5), sval);\n+\tkval = rb_str_new(hkey, klen + 5);\n+\tif (Qnil == (v = rb_hash_lookup2(hh, kval, Qnil))) {\n+\t    rb_hash_aset(hh, kval, sval);\n+\t} else {\n+\t    volatile VALUE\ta = rb_ary_new();\n+\n+\t    rb_ary_push(a, v);\n+\t    rb_ary_push(a, sval);\n+\t    rb_hash_aset(hh, kval, a);\n+\t}\n     }\n }\n \n@@ -545,8 +591,9 @@ request_env(agooReq req, VALUE self) {\n \trb_hash_aset(env, script_name_val, req_script_name(req));\n \trb_hash_aset(env, path_info_val, req_path_info(req));\n \trb_hash_aset(env, query_string_val, req_query_string(req));\n-\trb_hash_aset(env, server_name_val, req_server_name(req));\n+\trb_hash_aset(env, remote_addr_val, req_remote_addr(req));\n \trb_hash_aset(env, server_port_val, req_server_port(req));\n+\trb_hash_aset(env, server_name_val, req_server_name(req));\n \tfill_headers(req, env);\n \trb_hash_aset(env, rack_version_val, rack_version_val_val);\n \trb_hash_aset(env, rack_url_scheme_val, req_rack_url_scheme(req));\n@@ -663,6 +710,7 @@ request_init(VALUE mod) {\n     rb_define_method(req_class, \"query_string\", query_string, 0);\n     rb_define_method(req_class, \"server_name\", server_name, 0);\n     rb_define_method(req_class, \"server_port\", server_port, 0);\n+    rb_define_method(req_class, \"remote_addr\", remote_addr, 0);\n     rb_define_method(req_class, \"rack_version\", rack_version, 0);\n     rb_define_method(req_class, \"rack_url_scheme\", rack_url_scheme, 0);\n     rb_define_method(req_class, \"rack_input\", rack_input, 0);\n@@ -713,6 +761,7 @@ request_init(VALUE mod) {\n     rack_upgrade_val = rb_str_new_cstr(\"rack.upgrade?\");\trb_gc_register_address(&rack_upgrade_val);\n     rack_url_scheme_val = rb_str_new_cstr(\"rack.url_scheme\");\trb_gc_register_address(&rack_url_scheme_val);\n     rack_version_val = rb_str_new_cstr(\"rack.version\");\t\trb_gc_register_address(&rack_version_val);\n+    remote_addr_val = rb_str_new_cstr(\"REMOTE_ADDR\");\t\trb_gc_register_address(&remote_addr_val);\n     request_method_val = rb_str_new_cstr(\"REQUEST_METHOD\");\trb_gc_register_address(&request_method_val);\n     script_name_val = rb_str_new_cstr(\"SCRIPT_NAME\");\t\trb_gc_register_address(&script_name_val);\n     server_name_val = rb_str_new_cstr(\"SERVER_NAME\");\t\trb_gc_register_address(&server_name_val);"
        },
        {
          "filename": "ext/agoo/server.c",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -160,8 +160,8 @@ listen_loop(void *x) {\n \t\t    //fcntl(client_sock, F_SETFL, FNDELAY);\n \t\t    setsockopt(client_sock, SOL_SOCKET, SO_KEEPALIVE, &optval, sizeof(optval));\n \t\t    setsockopt(client_sock, IPPROTO_TCP, TCP_NODELAY, &optval, sizeof(optval));\n-\t\t    agoo_log_cat(&agoo_con_cat, \"Server with pid %d accepted connection %llu on %s [%d]\",\n-\t\t\t\t getpid(), (unsigned long long)cnt, b->id, con->sock);\n+\t\t    agoo_log_cat(&agoo_con_cat, \"Server with pid %d accepted connection %llu on %s [%d] from %s\",\n+\t\t\t\t getpid(), (unsigned long long)cnt, b->id, con->sock, con->remote);\n \n \t\t    con_cnt = atomic_fetch_add(&agoo_server.con_cnt, 1);\n \t\t    if (agoo_server.loop_max > agoo_server.loop_cnt && agoo_server.loop_cnt * LOOP_UP < con_cnt) {"
        },
        {
          "filename": "ext/agoo/websocket.c",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -189,6 +189,7 @@ agoo_ws_create_req(agooCon c, long mlen) {\n     c->req->method = (AGOO_WS_OP_BIN == op) ? AGOO_ON_BIN : AGOO_ON_MSG;\n     c->req->upgrade = AGOO_UP_NONE;\n     c->req->up = c->up;\n+    memcpy(c->req->remote, c->remote, sizeof(c->remote));\n     c->req->res = NULL;\n     if (c->up->on_msg) {\n \tc->req->hook = agoo_hook_create(AGOO_NONE, NULL, c->up->ctx, PUSH_HOOK, &agoo_server.eval_queue);"
        },
        {
          "filename": "lib/agoo/version.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,5 +1,5 @@\n \n module Agoo\n   # Agoo version.\n-  VERSION = '2.13.0'\n+  VERSION = '2.14.0'\n end"
        },
        {
          "filename": "test/base_handler_test.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -82,7 +82,7 @@ def setup\n     GC.start\n     Agoo::shutdown\n   }\n-  \n+\n   def test_eval\n     uri = URI('http://localhost:6470/tellme?a=1')\n     req = Net::HTTP::Get.new(uri)\n@@ -132,13 +132,13 @@ def test_post\n     req['Accept-Encoding'] = '*'\n     req['Accept'] = 'application/json'\n     req['User-Agent'] = 'Ruby'\n-    \n+\n     res = Net::HTTP.start(uri.hostname, uri.port) { |h|\n       h.request(req)\n     }\n     assert_equal(Net::HTTPNoContent, res.class)\n   end\n-  \n+\n   def test_put\n     uri = URI('http://localhost:6470/makeme')\n     req = Net::HTTP::Put.new(uri)\n@@ -147,7 +147,7 @@ def test_put\n     req['Accept'] = 'application/json'\n     req['User-Agent'] = 'Ruby'\n     req.body = 'hello'\n-    \n+\n     res = Net::HTTP.start(uri.hostname, uri.port) { |h|\n       h.request(req)\n     }"
        },
        {
          "filename": "test/rack_handler_test.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -105,6 +105,7 @@ def test_eval\n       \"PATH_INFO\" => \"/tellme\",\n       \"QUERY_STRING\" => \"a=1\",\n       \"REQUEST_METHOD\" => \"GET\",\n+      \"REMOTE_ADDR\" => \"127.0.0.1\",\n       \"SCRIPT_NAME\" => \"\",\n       \"SERVER_NAME\" => \"localhost\",\n       \"SERVER_PORT\" => \"6467\","
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "30ff2da09d75385261e28d5a5893ca397e3f621f",
            "date": "2024-10-20T14:38:50Z",
            "author_login": "ohler55"
          },
          {
            "sha": "886bb0f8502e0ffaa735b593331f151dc5ea3ec4",
            "date": "2024-10-20T14:37:35Z",
            "author_login": "ohler55"
          },
          {
            "sha": "7c352c77cd8127ded28652c1bbba918a0afb449e",
            "date": "2024-10-16T21:20:26Z",
            "author_login": "alistairjevans"
          },
          {
            "sha": "6313376fc300265c8cce241bee01613e2794661f",
            "date": "2024-07-28T22:17:07Z",
            "author_login": "ohler55"
          },
          {
            "sha": "6bf95fd291d120eed1a20efa18ac6698b5e3d678",
            "date": "2024-07-28T21:57:37Z",
            "author_login": "ohler55"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-444",
    "description": "agoo prior to 2.14.0 allows request smuggling attacks where agoo is used as a backend and a frontend proxy also being vulnerable. HTTP pipelining issues and request smuggling attacks might be possible due to incorrect Content-Length and Transfer encoding header parsing. It is possible to conduct HTTP request smuggling attacks where `agoo` is used as part of a chain of backend servers due to insufficient `Content-Length` and `Transfer Encoding` parsing.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-06-10T16:15:10.540",
    "last_modified": "2024-11-21T05:37:34.810",
    "fix_date": "2020-11-08T00:07:47Z"
  },
  "references": [
    {
      "url": "https://github.com/ohler55/agoo/commit/23d03535cf7b50d679a60a953a0cae9519a4a130",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://github.com/ohler55/agoo/issues/88",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://snyk.io/vuln/SNYK-RUBY-AGOO-569137",
      "source": "report@snyk.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ohler55/agoo/commit/23d03535cf7b50d679a60a953a0cae9519a4a130",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/ohler55/agoo/issues/88",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://snyk.io/vuln/SNYK-RUBY-AGOO-569137",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:47.843594",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "agoo",
    "owner": "ohler55",
    "created_at": "2017-12-22T03:51:02Z",
    "updated_at": "2025-01-10T22:11:12Z",
    "pushed_at": "2024-10-20T14:47:02Z",
    "size": 1037,
    "stars": 910,
    "forks": 40,
    "open_issues": 3,
    "watchers": 910,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "C": 586217,
      "Ruby": 96236,
      "HTML": 3208,
      "Shell": 1085
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T21:25:30.929345"
  }
}