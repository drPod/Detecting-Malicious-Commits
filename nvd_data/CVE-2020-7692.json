{
  "cve_id": "CVE-2020-7692",
  "github_data": {
    "repository": "googleapis/google-oauth-java-client",
    "fix_commit": "13433cd7dd06267fc261f0b1d4764f8e3432c824",
    "related_commits": [
      "13433cd7dd06267fc261f0b1d4764f8e3432c824",
      "13433cd7dd06267fc261f0b1d4764f8e3432c824"
    ],
    "patch_url": "https://github.com/googleapis/google-oauth-java-client/commit/13433cd7dd06267fc261f0b1d4764f8e3432c824.patch",
    "fix_commit_details": {
      "sha": "13433cd7dd06267fc261f0b1d4764f8e3432c824",
      "commit_date": "2020-06-29T19:57:20Z",
      "author": {
        "login": "StFS",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "feat: add PKCE support to AuthorizationCodeFlow (#470)",
        "length": 1134,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 470,
        "additions": 466,
        "deletions": 4
      },
      "files": [
        {
          "filename": "google-oauth-client/src/main/java/com/google/api/client/auth/oauth2/AuthorizationCodeFlow.java",
          "status": "modified",
          "additions": 98,
          "deletions": 3,
          "patch": "@@ -17,10 +17,14 @@\n import com.google.api.client.auth.oauth2.Credential.AccessMethod;\n import com.google.api.client.http.GenericUrl;\n import com.google.api.client.http.HttpExecuteInterceptor;\n+import com.google.api.client.http.HttpRequest;\n import com.google.api.client.http.HttpRequestInitializer;\n import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.UrlEncodedContent;\n import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.util.Base64;\n import com.google.api.client.util.Beta;\n+import com.google.api.client.util.Data;\n import com.google.api.client.util.Clock;\n import com.google.api.client.util.Joiner;\n import com.google.api.client.util.Lists;\n@@ -29,8 +33,12 @@\n import com.google.api.client.util.store.DataStoreFactory;\n \n import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Map;\n \n import static com.google.api.client.util.Strings.isNullOrEmpty;\n \n@@ -85,6 +93,9 @@ public class AuthorizationCodeFlow {\n   /** Authorization server encoded URL. */\n   private final String authorizationServerEncodedUrl;\n \n+  /** The Proof Key for Code Exchange (PKCE) or {@code null} if this flow should not use PKCE. */\n+  private final PKCE pkce;\n+\n   /** Credential persistence store or {@code null} for none. */\n   @Beta\n   @Deprecated\n@@ -159,6 +170,7 @@ protected AuthorizationCodeFlow(Builder builder) {\n     clock = Preconditions.checkNotNull(builder.clock);\n     credentialCreatedListener = builder.credentialCreatedListener;\n     refreshListeners = Collections.unmodifiableCollection(builder.refreshListeners);\n+    pkce = builder.pkce;\n   }\n \n   /**\n@@ -182,8 +194,13 @@ public void doGet(HttpServletRequest request, HttpServletResponse response) thro\n    * </pre>\n    */\n   public AuthorizationCodeRequestUrl newAuthorizationUrl() {\n-    return new AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId).setScopes(\n-        scopes);\n+    AuthorizationCodeRequestUrl url = new  AuthorizationCodeRequestUrl(authorizationServerEncodedUrl, clientId);\n+    url.setScopes(scopes);\n+    if (pkce != null) {\n+      url.setCodeChallenge(pkce.getChallenge());\n+      url.setCodeChallengeMethod(pkce.getChallengeMethod());\n+    }\n+    return url;\n   }\n \n   /**\n@@ -206,9 +223,20 @@ static TokenResponse requestAccessToken(AuthorizationCodeFlow flow, String code)\n    * @param authorizationCode authorization code.\n    */\n   public AuthorizationCodeTokenRequest newTokenRequest(String authorizationCode) {\n+    HttpExecuteInterceptor pkceClientAuthenticationWrapper = new HttpExecuteInterceptor() {\n+      @Override\n+      public void intercept(HttpRequest request) throws IOException {\n+        clientAuthentication.intercept(request);\n+        if (pkce != null) {\n+          Map<String, Object> data = Data.mapOf(UrlEncodedContent.getContent(request).getData());\n+          data.put(\"code_verifier\", pkce.getVerifier());\n+        }\n+      }\n+    };\n+\n     return new AuthorizationCodeTokenRequest(transport, jsonFactory,\n         new GenericUrl(tokenServerEncodedUrl), authorizationCode).setClientAuthentication(\n-        clientAuthentication).setRequestInitializer(requestInitializer).setScopes(scopes);\n+        pkceClientAuthenticationWrapper).setRequestInitializer(requestInitializer).setScopes(scopes);\n   }\n \n   /**\n@@ -412,6 +440,61 @@ public interface CredentialCreatedListener {\n     void onCredentialCreated(Credential credential, TokenResponse tokenResponse) throws IOException;\n   }\n \n+  /**\n+   * An implementation of <a href=\"https://tools.ietf.org/html/rfc7636\">Proof Key for Code Exchange</a>\n+   * which, according to the <a href=\"https://tools.ietf.org/html/rfc8252#section-6\">OAuth 2.0 for Native Apps RFC</a>,\n+   * is mandatory for public native apps.\n+   */\n+  private static class PKCE {\n+    private final String verifier;\n+    private String challenge;\n+    private String challengeMethod;\n+\n+    public PKCE() {\n+      verifier = generateVerifier();\n+      generateChallenge(verifier);\n+    }\n+\n+    private static String generateVerifier() {\n+      SecureRandom sr = new SecureRandom();\n+      byte[] code = new byte[32];\n+      sr.nextBytes(code);\n+      return Base64.encodeBase64URLSafeString(code);\n+    }\n+\n+    /**\n+     * Create the PKCE code verifier. It uses the S256 method but\n+     * falls back to using the 'plain' method in the unlikely case\n+     * that the SHA-256 MessageDigest algorithm implementation can't be\n+     * loaded.\n+     */\n+    private void generateChallenge(String verifier) {\n+      try {\n+        byte[] bytes = verifier.getBytes();\n+        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+        md.update(bytes, 0, bytes.length);\n+        byte[] digest = md.digest();\n+        challenge = Base64.encodeBase64URLSafeString(digest);\n+        challengeMethod = \"S256\";\n+      } catch (NoSuchAlgorithmException e) {\n+        challenge = verifier;\n+        challengeMethod = \"plain\";\n+      }\n+    }\n+\n+    public String getVerifier() {\n+      return verifier;\n+    }\n+\n+    public String getChallenge() {\n+      return challenge;\n+    }\n+\n+    public String getChallengeMethod() {\n+      return challengeMethod;\n+    }\n+  }\n+\n   /**\n    * Authorization code flow builder.\n    *\n@@ -448,6 +531,8 @@ public static class Builder {\n     /** Authorization server encoded URL. */\n     String authorizationServerEncodedUrl;\n \n+    PKCE pkce;\n+\n     /** Credential persistence store or {@code null} for none. */\n     @Deprecated\n     @Beta\n@@ -784,6 +869,16 @@ public Builder setRequestInitializer(HttpRequestInitializer requestInitializer)\n       return this;\n     }\n \n+    /**\n+     * Enables Proof Key for Code Exchange (PKCE) for this Athorization Code Flow.\n+     * @since 1.31\n+     */\n+    @Beta\n+    public Builder enablePKCE() {\n+      this.pkce = new PKCE();\n+      return this;\n+    }\n+\n     /**\n      * Sets the collection of scopes.\n      *"
        },
        {
          "filename": "google-oauth-client/src/main/java/com/google/api/client/auth/oauth2/AuthorizationCodeRequestUrl.java",
          "status": "modified",
          "additions": 54,
          "deletions": 0,
          "patch": "@@ -14,6 +14,8 @@\n \n package com.google.api.client.auth.oauth2;\n \n+import com.google.api.client.util.Key;\n+\n import java.util.Collection;\n import java.util.Collections;\n \n@@ -52,6 +54,20 @@ public void doGet(HttpServletRequest request, HttpServletResponse response) thro\n  */\n public class AuthorizationCodeRequestUrl extends AuthorizationRequestUrl {\n \n+  /**\n+   * The PKCE <a href=\"https://tools.ietf.org/html/rfc7636#section-4.3\">Code Challenge</a>.\n+   * @since 1.31\n+   */\n+  @Key(\"code_challenge\")\n+  String codeChallenge;\n+\n+  /**\n+   * The PKCE <a href=\"https://tools.ietf.org/html/rfc7636#section-4.3\">Code Challenge Method</a>.\n+   * @since 1.31\n+   */\n+  @Key(\"code_challenge_method\")\n+  String codeChallengeMethod;\n+\n   /**\n    * @param authorizationServerEncodedUrl authorization server encoded URL\n    * @param clientId client identifier\n@@ -60,6 +76,44 @@ public AuthorizationCodeRequestUrl(String authorizationServerEncodedUrl, String\n     super(authorizationServerEncodedUrl, clientId, Collections.singleton(\"code\"));\n   }\n \n+  /**\n+   * Get the code challenge (<a href=\"https://tools.ietf.org/html/rfc7636#section-4.3\">details</a>).\n+   *\n+   * @since 1.31\n+   */\n+  public String getCodeChallenge() {\n+    return codeChallenge;\n+  }\n+\n+  /**\n+   * Get the code challenge method (<a href=\"https://tools.ietf.org/html/rfc7636#section-4.3\">details</a>).\n+   *\n+   * @since 1.31\n+   */\n+  public String getCodeChallengeMethod() {\n+    return codeChallengeMethod;\n+  }\n+\n+  /**\n+   * Set the code challenge (<a href=\"https://tools.ietf.org/html/rfc7636#section-4.3\">details</a>).\n+   * @param codeChallenge the code challenge.\n+   *\n+   * @since 1.31\n+   */\n+  public void setCodeChallenge(String codeChallenge) {\n+    this.codeChallenge = codeChallenge;\n+  }\n+\n+  /**\n+   * Set the code challenge method (<a href=\"https://tools.ietf.org/html/rfc7636#section-4.3\">details</a>).\n+   * @param codeChallengeMethod the code challenge method.\n+   *\n+   * @since 1.31\n+   */\n+  public void setCodeChallengeMethod(String codeChallengeMethod) {\n+    this.codeChallengeMethod = codeChallengeMethod;\n+  }\n+\n   @Override\n   public AuthorizationCodeRequestUrl setResponseTypes(Collection<String> responseTypes) {\n     return (AuthorizationCodeRequestUrl) super.setResponseTypes(responseTypes);"
        },
        {
          "filename": "google-oauth-client/src/test/java/com/google/api/client/auth/oauth2/AuthorizationCodeFlowTest.java",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -23,6 +23,8 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n \n /**\n  * Tests {@link AuthorizationCodeFlow}.\n@@ -123,4 +125,24 @@ public void subsetTestNewAuthorizationUrl(Collection<String> scopes) {\n       assertEquals(Joiner.on(' ').join(scopes), url.getScopes());\n     }\n   }\n+\n+  public void testPKCE() {\n+    AuthorizationCodeFlow flow =\n+        new AuthorizationCodeFlow.Builder(BearerToken.queryParameterAccessMethod(),\n+            new AccessTokenTransport(),\n+            new JacksonFactory(),\n+            TOKEN_SERVER_URL,\n+            new BasicAuthentication(CLIENT_ID, CLIENT_SECRET),\n+            CLIENT_ID,\n+            \"https://example.com\")\n+        .enablePKCE()\n+        .build();\n+\n+    AuthorizationCodeRequestUrl url = flow.newAuthorizationUrl();\n+    assertNotNull(url.getCodeChallenge());\n+    assertNotNull(url.getCodeChallengeMethod());\n+    Set<String> methods = new HashSet<>(Arrays.asList(\"plain\", \"s256\"));\n+    assertTrue(methods.contains(url.getCodeChallengeMethod().toLowerCase()));\n+    assertTrue(url.getCodeChallenge().length() > 0);\n+  }\n }"
        },
        {
          "filename": "pom.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -65,6 +65,7 @@\n     <module>google-oauth-client-java6</module>\n     <module>google-oauth-client-jetty</module>\n     <module>samples/dailymotion-cmdline-sample</module>\n+    <module>samples/keycloak-pkce-cmdline-sample</module>\n \n     <!-- For deployment reasons, a deployable artifact must be the last one. -->\n     <module>google-oauth-client-assembly</module>"
        },
        {
          "filename": "samples/dailymotion-cmdline-sample/README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -6,7 +6,7 @@\n \n ## Command-Line Instructions\n \n-**Prerequisites:** install [Java 6 or higher][install-java], [git][install-git], and\n+**Prerequisites:** install [Java 7 or higher][install-java], [git][install-git], and\n [Maven][install-maven]. You may need to set your `JAVA_HOME`.\n \n 1. Check out the sample code:"
        },
        {
          "filename": "samples/keycloak-pkce-cmdline-sample/README.md",
          "status": "added",
          "additions": 42,
          "deletions": 0,
          "patch": "@@ -0,0 +1,42 @@\n+# Instructions for the Keycloak OAuth2 with PKCE Command-Line Sample\n+\n+## Browse Online\n+\n+[Browse Source][browse-source], or main file [PKCESample.java][main-source].\n+\n+## Command-Line Instructions\n+\n+**Prerequisites:** install [Java 7 or higher][install-java], [git][install-git], and\n+[Maven][install-maven]. You may need to set your `JAVA_HOME`. \n+You'll also need [Docker][install-docker].\n+\n+1. Check out the sample code:\n+\n+    ```bash\n+    git clone https://github.com/google/google-oauth-java-client.git\n+    cd google-oauth-java-client\n+    ```\n+\n+2. Run keycloak in a docker container:\n+\n+   ```\n+   docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:10.0.1 \n+   ```\n+\n+3. Run the sample:\n+\n+    ```bash\n+    mvn install\n+    mvn exec:java -pl samples/keycloak-pkce-cmdline-sample\n+    ```\n+   \n+   This will open up the Keycloak login page where you can log in with the username/password specified\n+   when running the Keycloak docker container above (`admin / admin`). Once you log in, the application\n+   will print out a message that it successfully obtained an access token.\n+\n+[browse-source]: https://github.com/google/google-oauth-java-client/tree/dev/samples/keycloak-pkce-cmdline-sample\n+[main-source]: https://github.com/google/google-oauth-java-client/blob/dev/samples/keycloak-pkce-cmdline-sample/src/main/java/com/google/api/services/samples/keycloak/cmdline/PKCESample.java\n+[install-java]: https://java.com/\n+[install-git]: https://git-scm.com\n+[install-maven]: https://maven.apache.org\n+[install-docker]: https://docs.docker.com/get-docker/\n\\ No newline at end of file"
        },
        {
          "filename": "samples/keycloak-pkce-cmdline-sample/pom.xml",
          "status": "added",
          "additions": 104,
          "deletions": 0,
          "patch": "@@ -0,0 +1,104 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>com.google.oauth-client</groupId>\n+    <artifactId>google-oauth-client-parent</artifactId>\n+    <version>1.30.7-SNAPSHOT</version><!-- {x-version-update:google-oauth-client:current} -->\n+    <relativePath>../../pom.xml</relativePath>\n+  </parent>\n+  <artifactId>keycloak-pkce-cmdline-sample</artifactId>\n+  <name>Example for obtaining OAuth2 tokens with PKCE verification using the Authorization Code Flow against Keycloak.</name>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>exec-maven-plugin</artifactId>\n+        <version>1.6.0</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>java</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <mainClass>com.google.api.services.samples.keycloak.cmdline.PKCESample</mainClass>\n+          <systemProperties>\n+            <systemProperty>\n+              <key>java.util.logging.config.file</key>\n+              <value>logging.properties</value>\n+            </systemProperty>\n+          </systemProperties>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+        <version>2.6</version>\n+        <configuration>\n+          <configLocation>../checkstyle.xml</configLocation>\n+          <consoleOutput>true</consoleOutput>\n+          <failOnViolation>false</failOnViolation>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>findbugs-maven-plugin</artifactId>\n+        <version>3.0.5</version>\n+        <configuration>\n+          <excludeFilterFile>../../findbugs-exclude.xml</excludeFilterFile>\n+          <failOnError>false</failOnError>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>check</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-deploy-plugin</artifactId>\n+        <version>2.8.2</version>\n+        <configuration>\n+          <skip>true</skip>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.sonatype.plugins</groupId>\n+        <artifactId>nexus-staging-maven-plugin</artifactId>\n+        <version>1.6.8</version>\n+        <configuration>\n+          <skipNexusStagingDeployMojo>true</skipNexusStagingDeployMojo>\n+        </configuration>\n+      </plugin>\n+    </plugins>\n+    <finalName>${project.artifactId}-${project.version}</finalName>\n+  </build>\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.google.oauth-client</groupId>\n+      <artifactId>google-oauth-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.oauth-client</groupId>\n+      <artifactId>google-oauth-client-jetty</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.http-client</groupId>\n+      <artifactId>google-http-client-jackson2</artifactId>\n+    </dependency>\n+  </dependencies>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+</project>"
        },
        {
          "filename": "samples/keycloak-pkce-cmdline-sample/scripts/initialize-keycloak.sh",
          "status": "added",
          "additions": 44,
          "deletions": 0,
          "patch": "@@ -0,0 +1,44 @@\n+#!/bin/sh\n+# Copyright 2020 Google LLC\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\n+#Start keycloak server before running this script:\n+# docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:10.0.1\n+\n+# The following script will create a new public client in the running keycloak server\n+# in which PKCE is required for obtaining an authorization token via the authorization\n+# code flow. Once this script has been run, the PKCESample.java sample application can\n+# be run.\n+\n+KEYCLOAK_BASE_URL=\"http://localhost:8080/auth\"\n+KEYCLOAK_REALM=\"master\"\n+KEYCLOAK_URL=\"${KEYCLOAK_BASE_URL}/realms/${KEYCLOAK_REALM}\"\n+\n+KEYCLOAK_CLIENT_ID=\"admin\"\n+KEYCLOAK_CLIENT_SECRET=\"admin\"\n+\n+export TKN=$(curl -s -X POST \"${KEYCLOAK_URL}/protocol/openid-connect/token\" \\\n+ -H \"Content-Type: application/x-www-form-urlencoded\" \\\n+ -d \"username=${KEYCLOAK_CLIENT_ID}\" \\\n+ -d \"password=${KEYCLOAK_CLIENT_SECRET}\" \\\n+ -d 'grant_type=password' \\\n+ -d 'client_id=admin-cli' | jq -r '.access_token')\n+\n+curl -s -X POST \"${KEYCLOAK_URL}/clients-registrations/default\" \\\n+ -d '{ \"clientId\": \"pkce-test-client\", \"publicClient\": true, \"redirectUris\": [\"http://127.0.0.1*\"], \"attributes\": {\"pkce.code.challenge.method\": \"S256\"} }' \\\n+ -H \"Content-Type:application/json\" \\\n+ -H \"Authorization: bearer ${TKN}\" \n+\n+ \n\\ No newline at end of file"
        },
        {
          "filename": "samples/keycloak-pkce-cmdline-sample/src/main/java/com/google/api/services/samples/keycloak/cmdline/PKCESample.java",
          "status": "added",
          "additions": 100,
          "deletions": 0,
          "patch": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) 2020 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.google.api.services.samples.keycloak.cmdline;\n+\n+import com.google.api.client.auth.oauth2.AuthorizationCodeFlow;\n+import com.google.api.client.auth.oauth2.BearerToken;\n+import com.google.api.client.auth.oauth2.ClientParametersAuthentication;\n+import com.google.api.client.auth.oauth2.Credential;\n+import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;\n+import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;\n+import com.google.api.client.http.GenericUrl;\n+import com.google.api.client.http.HttpTransport;\n+import com.google.api.client.http.javanet.NetHttpTransport;\n+import com.google.api.client.json.JsonFactory;\n+import com.google.api.client.json.jackson2.JacksonFactory;\n+import com.google.api.client.util.store.DataStoreFactory;\n+import com.google.api.client.util.store.MemoryDataStoreFactory;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+/**\n+ * A sample application that demonstrates how the Google OAuth2 library can be used to authenticate\n+ * against a locally running Keycloak server with a registered public client where using\n+ * <a href=\"https://tools.ietf.org/html/rfc7636\">PKCE</a> is required.\n+ *\n+ * Please note that before running this sample application, a local Keycloak server must be running\n+ * and a PKCE enabled client must have been defined. Please see\n+ * <code>samples/keycloak-pkce-cmdline-sample/scripts/initialize-keycloak.sh</code> for further\n+ * information.\n+ *\n+ * @author Stefan Freyr Stefansson\n+ */\n+public class PKCESample {\n+    /**\n+     * Global instance of the {@link DataStoreFactory}. The best practice is to make it a single\n+     * globally shared instance across your application.\n+     */\n+    private static DataStoreFactory DATA_STORE_FACTORY;\n+\n+    /** OAuth 2 scope. */\n+    private static final String SCOPE = \"email\";\n+\n+    /** Global instance of the HTTP transport. */\n+    private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();\n+\n+    /** Global instance of the JSON factory. */\n+    static final JsonFactory JSON_FACTORY = new JacksonFactory();\n+\n+    private static final String TOKEN_SERVER_URL = \"http://127.0.0.1:8080/auth/realms/master/protocol/openid-connect/token\";\n+    private static final String AUTHORIZATION_SERVER_URL = \"http://127.0.0.1:8080/auth/realms/master/protocol/openid-connect/auth\";\n+\n+    /** Authorizes the installed application to access user's protected data. */\n+    private static Credential authorize() throws Exception {\n+        // set up authorization code flow\n+        String clientId = \"pkce-test-client\";\n+        AuthorizationCodeFlow flow = new AuthorizationCodeFlow.Builder(\n+                BearerToken.authorizationHeaderAccessMethod(),\n+                HTTP_TRANSPORT,\n+                JSON_FACTORY,\n+                new GenericUrl(TOKEN_SERVER_URL),\n+                new ClientParametersAuthentication(clientId, null),\n+                clientId,\n+                AUTHORIZATION_SERVER_URL)\n+                .setScopes(Arrays.asList(SCOPE))\n+                .enablePKCE()\n+                .setDataStoreFactory(DATA_STORE_FACTORY).build();\n+        // authorize\n+        LocalServerReceiver receiver = new LocalServerReceiver.Builder().setHost(\"127.0.0.1\").build();\n+        return new AuthorizationCodeInstalledApp(flow, receiver).authorize(\"user\");\n+    }\n+\n+    public static void main(String[] args) {\n+        try {\n+            DATA_STORE_FACTORY = new MemoryDataStoreFactory();\n+            final Credential credential = authorize();\n+            System.out.println(\"Successfully obtained credential from Keycloak running on localhost.\");\n+            final String accessToken = credential.getAccessToken();\n+            System.out.println(\"Retrieved an access token of length \" + accessToken.length());\n+            return;\n+        } catch (IOException e) {\n+            System.err.println(e.getMessage());\n+        } catch (Throwable t) {\n+            t.printStackTrace();\n+        }\n+        System.exit(1);\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 7,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 7,
        "max_directory_depth": 12
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b67665781ebb88a4ce209d6658970939808675a9",
            "date": "2025-01-09T17:59:56Z",
            "author_login": "suztomo"
          },
          {
            "sha": "9ff0f6bc57e4449f2877d3a3d5ac8e8adbc326e9",
            "date": "2025-01-09T00:31:44Z",
            "author_login": "suztomo"
          },
          {
            "sha": "8e6ce3aeea86c3019677d599f0e0d82ffdadbd04",
            "date": "2024-12-23T20:20:36Z",
            "author_login": "suztomo"
          },
          {
            "sha": "b57299ea9d1d299cb9612a9f19d4c86fe138017a",
            "date": "2024-12-11T16:19:26Z",
            "author_login": "release-please[bot]"
          },
          {
            "sha": "c215f7fb5c4f47f297e9aa8674600a485bb4e2d9",
            "date": "2024-10-30T20:17:27Z",
            "author_login": "zhumin8"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-863",
    "description": "PKCE support is not implemented in accordance with the RFC for OAuth 2.0 for Native Apps. Without the use of PKCE, the authorization code returned by an authorization server is not enough to guarantee that the client that issued the initial authorization request is the one that will be authorized. An attacker is able to obtain the authorization code using a malicious app on the client-side and use it to gain authorization to the protected resource. This affects the package com.google.oauth-client:google-oauth-client before 1.31.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-07-09T14:15:11.107",
    "last_modified": "2024-11-21T05:37:37.350",
    "fix_date": "2020-06-29T19:57:20Z"
  },
  "references": [
    {
      "url": "https://github.com/googleapis/google-oauth-java-client/commit/13433cd7dd06267fc261f0b1d4764f8e3432c824",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/googleapis/google-oauth-java-client/issues/469",
      "source": "report@snyk.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/r3db6ac73e0558d64f0b664f2fa4ef0a865e57c5de20f8321d3b48678%40%3Ccommits.druid.apache.org%3E",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/reae8909b264d1103f321b9ce1623c10c1ddc77dba9790247f2c0c90f%40%3Ccommits.druid.apache.org%3E",
      "source": "report@snyk.io",
      "tags": []
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-COMGOOGLEOAUTHCLIENT-575276",
      "source": "report@snyk.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://tools.ietf.org/html/rfc7636%23section-1",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://tools.ietf.org/html/rfc8252%23section-8.1",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/googleapis/google-oauth-java-client/commit/13433cd7dd06267fc261f0b1d4764f8e3432c824",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/googleapis/google-oauth-java-client/issues/469",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/r3db6ac73e0558d64f0b664f2fa4ef0a865e57c5de20f8321d3b48678%40%3Ccommits.druid.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/reae8909b264d1103f321b9ce1623c10c1ddc77dba9790247f2c0c90f%40%3Ccommits.druid.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-COMGOOGLEOAUTHCLIENT-575276",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://tools.ietf.org/html/rfc7636%23section-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://tools.ietf.org/html/rfc8252%23section-8.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:01.358854",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "google-oauth-java-client",
    "owner": "googleapis",
    "created_at": "2014-10-28T17:32:31Z",
    "updated_at": "2025-01-12T17:27:31Z",
    "pushed_at": "2025-01-13T16:20:52Z",
    "size": 4436,
    "stars": 621,
    "forks": 273,
    "open_issues": 43,
    "watchers": 621,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.31.4-sp",
      "1.32.x",
      "1.33.x"
    ],
    "languages": {
      "Java": 470588,
      "Shell": 14978,
      "Batchfile": 801
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:15:05.645864"
  }
}