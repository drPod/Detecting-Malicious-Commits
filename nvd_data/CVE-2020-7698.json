{
  "cve_id": "CVE-2020-7698",
  "github_data": {
    "repository": "Gerapy/Gerapy",
    "fix_commit": "e8446605eb2424717418eae199ec7aad573da2d2",
    "related_commits": [
      "e8446605eb2424717418eae199ec7aad573da2d2",
      "e8446605eb2424717418eae199ec7aad573da2d2"
    ],
    "patch_url": "https://github.com/Gerapy/Gerapy/commit/e8446605eb2424717418eae199ec7aad573da2d2.patch",
    "fix_commit_details": {
      "sha": "e8446605eb2424717418eae199ec7aad573da2d2",
      "commit_date": "2020-07-06T14:57:10Z",
      "author": {
        "login": "Germey",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "to b1",
        "length": 5,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 119,
        "additions": 50,
        "deletions": 69
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -8,9 +8,6 @@\n ![Docker Pulls](https://img.shields.io/docker/pulls/germey/gerapy)\n ![PyPI - License](https://img.shields.io/pypi/l/gerapy)\n \n-\n-> \u6ce8\uff1a\u4ece Gerapy 2.x \u5f00\u59cb\uff0c\u5176\u5b9a\u4f4d\u53d1\u751f\u6539\u53d8\uff0c\u4e0d\u518d\u652f\u6301 Scrapyd\uff0c\u8f6c\u800c\u652f\u6301 Docker\u3001Kubernetes \u7684\u90e8\u7f72\uff0c\u53e6\u5916\u5f00\u53d1\u8fd8\u4f1a\u8fc1\u79fb\u5230 Scrapy \u53ef\u89c6\u5316\u914d\u7f6e\u548c\u667a\u80fd\u89e3\u6790\u65b9\u9762\uff0c\u656c\u8bf7\u671f\u5f85\u3002\n-\n Distributed Crawler Management Framework Based on Scrapy, Scrapyd, Scrapyd-Client, Scrapyd-API, Django and Vue.js.\n \n ## Documentation"
        },
        {
          "filename": "gerapy/__version__.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-VERSION = (0, 9, '3a3')\n+VERSION = (0, 9, '3b1')\n \n __version__ = '.'.join(map(str, VERSION))\n "
        },
        {
          "filename": "gerapy/server/core/views.py",
          "status": "modified",
          "additions": 47,
          "deletions": 63,
          "patch": "@@ -1,3 +1,4 @@\n+import re\n from pathlib import Path\n from urllib.parse import unquote\n import base64\n@@ -251,6 +252,8 @@ def project_configure(request, project_name):\n         configuration = json.dumps(data.get('configuration'), ensure_ascii=False)\n         project.update(**{'configuration': configuration})\n         \n+        # for safe protection\n+        project_name = re.sub('[\\!\\@\\#\\$\\;\\&\\*\\~\\\"\\'\\{\\}\\]\\[\\-\\+\\%\\^]+', '', project_name)\n         # execute generate cmd\n         cmd = ' '.join(['gerapy', 'generate', project_name])\n         p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n@@ -634,17 +637,15 @@ def job_list(request, client_id, project_name):\n     if request.method == 'GET':\n         client = Client.objects.get(id=client_id)\n         scrapyd = get_scrapyd(client)\n-        try:\n-            result = scrapyd.list_jobs(project_name)\n-            jobs = []\n-            statuses = ['pending', 'running', 'finished']\n-            for status in statuses:\n-                for job in result.get(status):\n-                    job['status'] = status\n-                    jobs.append(job)\n-            return JsonResponse(jobs)\n-        except ConnectionError:\n-            return JsonResponse({'message': 'Connect Error'}, status=500)\n+        result = scrapyd.list_jobs(project_name)\n+        jobs = []\n+        statuses = ['pending', 'running', 'finished']\n+        for status in statuses:\n+            for job in result.get(status):\n+                job['status'] = status\n+                jobs.append(job)\n+        return JsonResponse(jobs)\n+    \n \n \n @api_view(['GET'])\n@@ -663,21 +664,18 @@ def job_log(request, client_id, project_name, spider_name, job_id):\n         client = Client.objects.get(id=client_id)\n         # get log url\n         url = log_url(client.ip, client.port, project_name, spider_name, job_id)\n-        try:\n-            # get last 1000 bytes of log\n-            response = requests.get(url, timeout=5, headers={\n-                'Range': 'bytes=-1000'\n-            }, auth=(client.username, client.password) if client.auth else None)\n-            # Get encoding\n-            encoding = response.apparent_encoding\n-            # log not found\n-            if response.status_code == 404:\n-                return JsonResponse({'message': 'Log Not Found'}, status=404)\n-            # bytes to string\n-            text = response.content.decode(encoding, errors='replace')\n-            return HttpResponse(text)\n-        except requests.ConnectionError:\n-            return JsonResponse({'message': 'Load Log Error'}, status=500)\n+        # get last 1000 bytes of log\n+        response = requests.get(url, timeout=5, headers={\n+            'Range': 'bytes=-1000'\n+        }, auth=(client.username, client.password) if client.auth else None)\n+        # Get encoding\n+        encoding = response.apparent_encoding\n+        # log not found\n+        if response.status_code == 404:\n+            return JsonResponse({'message': 'Log Not Found'}, status=404)\n+        # bytes to string\n+        text = response.content.decode(encoding, errors='replace')\n+        return HttpResponse(text)\n \n \n @api_view(['GET'])\n@@ -693,38 +691,29 @@ def job_cancel(request, client_id, project_name, job_id):\n     \"\"\"\n     if request.method == 'GET':\n         client = Client.objects.get(id=client_id)\n-        try:\n-            scrapyd = get_scrapyd(client)\n-            result = scrapyd.cancel(project_name, job_id)\n-            return JsonResponse(result)\n-        except ConnectionError:\n-            return JsonResponse({'message': 'Connect Error'})\n+        scrapyd = get_scrapyd(client)\n+        result = scrapyd.cancel(project_name, job_id)\n+        return JsonResponse(result)\n \n \n @api_view(['GET'])\n @permission_classes([IsAuthenticated])\n def del_version(request, client_id, project, version):\n     if request.method == 'GET':\n         client = Client.objects.get(id=client_id)\n-        try:\n-            scrapyd = get_scrapyd(client)\n-            result = scrapyd.delete_version(project=project, version=version)\n-            return JsonResponse(result)\n-        except ConnectionError:\n-            return JsonResponse({'message': 'Connect Error'})\n+        scrapyd = get_scrapyd(client)\n+        result = scrapyd.delete_version(project=project, version=version)\n+        return JsonResponse(result)\n \n \n @api_view(['GET'])\n @permission_classes([IsAuthenticated])\n def del_project(request, client_id, project):\n     if request.method == 'GET':\n         client = Client.objects.get(id=client_id)\n-        try:\n-            scrapyd = get_scrapyd(client)\n-            result = scrapyd.delete_project(project=project)\n-            return JsonResponse(result)\n-        except ConnectionError:\n-            return JsonResponse({'message': 'Connect Error'})\n+        scrapyd = get_scrapyd(client)\n+        result = scrapyd.delete_project(project=project)\n+        return JsonResponse(result)\n \n \n @api_view(['POST'])\n@@ -829,18 +818,16 @@ def task_remove(request, task_id):\n     :return:\n     \"\"\"\n     if request.method == 'POST':\n-        try:\n-            # delete job from DjangoJob\n-            task = Task.objects.get(id=task_id)\n-            clients = clients_of_task(task)\n-            for client in clients:\n-                job_id = get_job_id(client, task)\n-                DjangoJob.objects.filter(name=job_id).delete()\n-            # delete task\n-            Task.objects.filter(id=task_id).delete()\n-            return JsonResponse({'result': '1'})\n-        except:\n-            return JsonResponse({'result': '0'})\n+        # delete job from DjangoJob\n+        task = Task.objects.get(id=task_id)\n+        clients = clients_of_task(task)\n+        for client in clients:\n+            job_id = get_job_id(client, task)\n+            DjangoJob.objects.filter(name=job_id).delete()\n+        # delete task\n+        Task.objects.filter(id=task_id).delete()\n+        return JsonResponse({'result': '1'})\n+    \n \n \n @api_view(['GET'])\n@@ -915,10 +902,7 @@ def render_html(request):\n         url = unquote(base64.b64decode(url).decode('utf-8'))\n         js = request.GET.get('js', 0)\n         script = request.GET.get('script')\n-        try:\n-            response = requests.get(url, timeout=5)\n-            response.encoding = response.apparent_encoding\n-            html = process_html(response.text)\n-            return HttpResponse(html)\n-        except Exception as e:\n-            return JsonResponse({'message': e.args}, status=500)\n+        response = requests.get(url, timeout=5)\n+        response.encoding = response.apparent_encoding\n+        html = process_html(response.text)\n+        return HttpResponse(html)"
        },
        {
          "filename": "requirements.txt",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -5,12 +5,12 @@ django-cors-headers==3.2.0\n django-apscheduler==0.3.0\n furl==2.1.0\n jinja2==2.10.1\n-scrapy>=1.4.0\n+scrapy==1.5.0\n scrapy-redis==0.6.8\n scrapy-splash==0.7.2\n python-scrapyd-api==2.1.2\n redis==2.10.5\n-requests>=2.20.0\n+requests==2.20.0\n pymongo==3.9.0\n pymysql==0.7.10\n pyquery==1.2.17"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7c4eda875563f5d0342a3650959e0502bc279d77",
            "date": "2024-09-07T00:49:42Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "311dcbc87065580943f8b0475e55b9233ae0f181",
            "date": "2024-07-07T03:31:46Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0e7fa3c02b08ad5c7873f57758257155ea67b442",
            "date": "2024-05-23T17:19:34Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e5662e2b18a0c163562f5bf090d0af962b271759",
            "date": "2024-05-11T19:10:39Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2d09c5cd8af999038a9c823f70e5a74d8d95ebd6",
            "date": "2024-05-11T19:09:10Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "This affects the package Gerapy from 0 and before 0.9.3. The input being passed to Popen, via the project_configure endpoint, isn\u2019t being sanitized.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-07-29T13:15:10.397",
    "last_modified": "2024-11-21T05:37:38.073",
    "fix_date": "2020-07-06T14:57:10Z"
  },
  "references": [
    {
      "url": "https://github.com/Gerapy/Gerapy/commit/e8446605eb2424717418eae199ec7aad573da2d2",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-PYTHON-GERAPY-572470",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Gerapy/Gerapy/commit/e8446605eb2424717418eae199ec7aad573da2d2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-PYTHON-GERAPY-572470",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:01.379969",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Gerapy",
    "owner": "Gerapy",
    "created_at": "2017-06-30T03:58:27Z",
    "updated_at": "2025-01-13T09:19:03Z",
    "pushed_at": "2024-10-29T22:08:29Z",
    "size": 38367,
    "stars": 3373,
    "forks": 642,
    "open_issues": 72,
    "watchers": 3373,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 1719745,
      "Vue": 185910,
      "JavaScript": 27475,
      "SCSS": 10276,
      "HTML": 3111,
      "Dockerfile": 1844,
      "Shell": 153
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:29:50.851240"
  }
}