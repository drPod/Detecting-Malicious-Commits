{
  "cve_id": "CVE-2020-7708",
  "github_data": {
    "repository": "Irrelon/irrelon-path",
    "fix_commit": "8a126b160c1a854ae511659c111413ad9910ebe3",
    "related_commits": [
      "8a126b160c1a854ae511659c111413ad9910ebe3",
      "8a126b160c1a854ae511659c111413ad9910ebe3"
    ],
    "patch_url": "https://github.com/Irrelon/irrelon-path/commit/8a126b160c1a854ae511659c111413ad9910ebe3.patch",
    "fix_commit_details": {
      "sha": "8a126b160c1a854ae511659c111413ad9910ebe3",
      "commit_date": "2020-08-18T14:10:45Z",
      "author": {
        "login": "Irrelon",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fixed functions with prototype pollution vulnerability",
        "length": 54,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 49,
        "additions": 40,
        "deletions": 9
      },
      "files": [
        {
          "filename": "dist/Path.js",
          "status": "modified",
          "additions": 16,
          "deletions": 4,
          "patch": "@@ -451,6 +451,8 @@ var set = function set(obj, path, val) {\n \n \n   if (isNonCompositePath(internalPath)) {\n+    // Do not allow prototype pollution\n+    if (internalPath === \"__proto__\") return obj;\n     obj = decouple(obj, options);\n     obj[options.transformKey(unEscape(internalPath))] = val;\n     return obj;\n@@ -459,7 +461,9 @@ var set = function set(obj, path, val) {\n   var newObj = decouple(obj, options);\n   var pathParts = split(internalPath);\n   var pathPart = pathParts.shift();\n-  var transformedPathPart = options.transformKey(pathPart);\n+  var transformedPathPart = options.transformKey(pathPart); // Do not allow prototype pollution\n+\n+  if (transformedPathPart === \"__proto__\") return obj;\n   var childPart = newObj[transformedPathPart];\n \n   if ((0, _typeof2[\"default\"])(childPart) !== \"object\") {\n@@ -519,8 +523,12 @@ var unSet = function unSet(obj, path) {\n   var newObj = decouple(obj, options); // Path has no dot-notation, set key/value\n \n   if (isNonCompositePath(internalPath)) {\n-    if (newObj.hasOwnProperty(unEscape(internalPath))) {\n-      delete newObj[options.transformKey(unEscape(internalPath))];\n+    var unescapedPath = unEscape(internalPath); // Do not allow prototype pollution\n+\n+    if (unescapedPath === \"__proto__\") return obj;\n+\n+    if (newObj.hasOwnProperty(unescapedPath)) {\n+      delete newObj[options.transformKey(unescapedPath)];\n       return newObj;\n     }\n \n@@ -530,7 +538,9 @@ var unSet = function unSet(obj, path) {\n \n   var pathParts = split(internalPath);\n   var pathPart = pathParts.shift();\n-  var transformedPathPart = options.transformKey(unEscape(pathPart));\n+  var transformedPathPart = options.transformKey(unEscape(pathPart)); // Do not allow prototype pollution\n+\n+  if (transformedPathPart === \"__proto__\") return obj;\n   var childPart = newObj[transformedPathPart];\n \n   if (!childPart) {\n@@ -618,6 +628,7 @@ var pushVal = function pushVal(obj, path, val) {\n   path = clean(path);\n   var pathParts = split(path);\n   var part = pathParts.shift();\n+  if (part === \"__proto__\") return obj;\n \n   if (pathParts.length) {\n     // Generate the path part in the object if it does not already exist\n@@ -671,6 +682,7 @@ var pullVal = function pullVal(obj, path, val) {\n   path = clean(path);\n   var pathParts = split(path);\n   var part = pathParts.shift();\n+  if (part === \"__proto__\") return obj;\n \n   if (pathParts.length) {\n     // Generate the path part in the object if it does not already exist"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n \t\"name\": \"@irrelon/path\",\n-\t\"version\": \"4.6.8\",\n+\t\"version\": \"4.7.0\",\n \t\"description\": \"A powerful JSON path processor. Allows you to drill into and manipulate JSON objects with a simple dot-delimited path format e.g. \\\"obj.name\\\".\",\n \t\"main\": \"./src/Path.js\",\n \t\"scripts\": {"
        },
        {
          "filename": "src/Path.js",
          "status": "modified",
          "additions": 23,
          "deletions": 4,
          "patch": "@@ -400,6 +400,9 @@ const set = (obj, path, val, options = {}) => {\n \t\n \t// Path has no dot-notation, set key/value\n \tif (isNonCompositePath(internalPath)) {\n+\t\t// Do not allow prototype pollution\n+\t\tif (internalPath === \"__proto__\") return obj;\n+\n \t\tobj = decouple(obj, options);\n \t\tobj[options.transformKey(unEscape(internalPath))] = val;\n \t\treturn obj;\n@@ -409,6 +412,10 @@ const set = (obj, path, val, options = {}) => {\n \tconst pathParts = split(internalPath);\n \tconst pathPart = pathParts.shift();\n \tconst transformedPathPart = options.transformKey(pathPart);\n+\n+\t// Do not allow prototype pollution\n+\tif (transformedPathPart === \"__proto__\") return obj;\n+\n \tlet childPart = newObj[transformedPathPart];\n \t\n \tif (typeof childPart !== \"object\") {\n@@ -470,19 +477,27 @@ const unSet = (obj, path, options = {}, tracking = {}) => {\n \t\n \t// Path has no dot-notation, set key/value\n \tif (isNonCompositePath(internalPath)) {\n-\t\tif (newObj.hasOwnProperty(unEscape(internalPath))) {\n-\t\t\tdelete newObj[options.transformKey(unEscape(internalPath))];\n+\t\tconst unescapedPath = unEscape(internalPath);\n+\n+\t\t// Do not allow prototype pollution\n+\t\tif (unescapedPath === \"__proto__\") return obj;\n+\n+\t\tif (newObj.hasOwnProperty(unescapedPath)) {\n+\t\t\tdelete newObj[options.transformKey(unescapedPath)];\n \t\t\treturn newObj;\n \t\t}\n \t\t\n \t\ttracking.returnOriginal = true;\n \t\treturn obj;\n \t}\n \t\n-\t\n \tconst pathParts = split(internalPath);\n \tconst pathPart = pathParts.shift();\n \tconst transformedPathPart = options.transformKey(unEscape(pathPart));\n+\n+\t// Do not allow prototype pollution\n+\tif (transformedPathPart === \"__proto__\") return obj;\n+\n \tlet childPart = newObj[transformedPathPart];\n \t\n \tif (!childPart) {\n@@ -563,7 +578,9 @@ const pushVal = (obj, path, val, options = {}) => {\n \t\n \tconst pathParts = split(path);\n \tconst part = pathParts.shift();\n-\t\n+\n+\tif (part === \"__proto__\") return obj;\n+\n \tif (pathParts.length) {\n \t\t// Generate the path part in the object if it does not already exist\n \t\tobj[part] = decouple(obj[part], options) || {};\n@@ -613,6 +630,8 @@ const pullVal = (obj, path, val, options = {strict: true}) => {\n \t\n \tconst pathParts = split(path);\n \tconst part = pathParts.shift();\n+\n+\tif (part === \"__proto__\") return obj;\n \t\n \tif (pathParts.length) {\n \t\t// Generate the path part in the object if it does not already exist"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c59481b07f46172419c8331192fbc881c16c97cf",
            "date": "2024-12-04T14:30:19Z",
            "author_login": "Irrelon"
          },
          {
            "sha": "fd96cdf79c36ab29a8be2c34a508ce2e7fe2bbde",
            "date": "2024-11-18T10:48:51Z",
            "author_login": "Irrelon"
          },
          {
            "sha": "72b823af3d35ff31918b596fcbae135105704aa2",
            "date": "2024-10-28T14:46:57Z",
            "author_login": "Irrelon"
          },
          {
            "sha": "25e272b1bdcf5c11671d0dffee94cc127587e7c4",
            "date": "2024-10-28T13:57:16Z",
            "author_login": "Irrelon"
          },
          {
            "sha": "b91db66a20122bf508191b88666aa0eea030f060",
            "date": "2024-10-28T13:09:14Z",
            "author_login": "Irrelon"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-1321",
    "description": "The package irrelon-path before 4.7.0; the package @irrelon/path before 4.7.0 are vulnerable to Prototype Pollution via the set, unSet, pushVal and pullVal functions.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-08-18T15:15:12.333",
    "last_modified": "2024-11-21T05:37:39.210",
    "fix_date": "2020-08-18T14:10:45Z"
  },
  "references": [
    {
      "url": "https://github.com/Irrelon/irrelon-path/commit/8a126b160c1a854ae511659c111413ad9910ebe3",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-IRRELONPATH-598672",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-IRRELONPATH-598673",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Irrelon/irrelon-path/commit/8a126b160c1a854ae511659c111413ad9910ebe3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-IRRELONPATH-598672",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-IRRELONPATH-598673",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:03.797900",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "irrelon-path",
    "owner": "Irrelon",
    "created_at": "2017-12-01T12:11:26Z",
    "updated_at": "2024-12-04T14:33:11Z",
    "pushed_at": "2024-12-04T14:30:28Z",
    "size": 1212,
    "stars": 6,
    "forks": 5,
    "open_issues": 11,
    "watchers": 6,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "TypeScript": 169464,
      "JavaScript": 70581
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T19:54:03.569848"
  }
}