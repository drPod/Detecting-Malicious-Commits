{
  "cve_id": "CVE-2020-7736",
  "github_data": {
    "repository": "b-heilman/bmoor",
    "fix_commit": "7d4a086a1dc3ef11ed0b323824d02348734b7da5",
    "related_commits": [
      "7d4a086a1dc3ef11ed0b323824d02348734b7da5",
      "7d4a086a1dc3ef11ed0b323824d02348734b7da5"
    ],
    "patch_url": "https://github.com/b-heilman/bmoor/commit/7d4a086a1dc3ef11ed0b323824d02348734b7da5.patch",
    "fix_commit_details": {
      "sha": "7d4a086a1dc3ef11ed0b323824d02348734b7da5",
      "commit_date": "2020-09-17T04:24:17Z",
      "author": {
        "login": "b-heilman",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: prototype pollution",
        "length": 24,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 286,
        "additions": 178,
        "deletions": 108
      },
      "files": [
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\r\n   \"name\": \"bmoor\",\r\n-  \"version\": \"0.8.11\",\r\n+  \"version\": \"0.8.12\",\r\n   \"author\": \"Brian Heilman <das.ist.junk@gmail.com>\",\r\n   \"description\": \"A basic foundation for other libraries, establishing useful patterbs, and letting them be more.\",\r\n   \"license\": \"MIT\",\r"
        },
        {
          "filename": "src/core.js",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -184,6 +184,10 @@ function set( root, space, value ){\n \tfor( i = 0, c = space.length; i < c; i++ ){\r\n \t\tnextSpace = space[ i ];\r\n \t\t\t\r\n+\t\tif (nextSpace === '__proto__'){\r\n+\t\t\treturn null;\r\n+\t\t}\r\n+\r\n \t\tif ( isUndefined(curSpace[nextSpace]) ){\r\n \t\t\tcurSpace[ nextSpace ] = {};\r\n \t\t}\r\n@@ -197,6 +201,10 @@ function set( root, space, value ){\n }\r\n \r\n function _makeSetter( property, next ){\r\n+\tif (property === '__proto__'){\r\n+\t\tthrow new Error('unable to access __proto__');\r\n+\t}\r\n+\r\n \tif ( next ){\r\n \t\treturn function setter( ctx, value ){\r\n \t\t\tvar t = ctx[property];\r\n@@ -250,6 +258,10 @@ function get( root, path ){\n \t\tfor( i = 0, c = space.length; i < c; i++ ){\r\n \t\t\tnextSpace = space[i];\r\n \t\t\t\t\r\n+\t\t\tif (nextSpace === '__proto__'){\r\n+\t\t\t\treturn null;\r\n+\t\t\t}\r\n+\r\n \t\t\tif ( isUndefined(curSpace[nextSpace]) ){\r\n \t\t\t\treturn;\r\n \t\t\t}\r\n@@ -262,6 +274,10 @@ function get( root, path ){\n }\r\n \r\n function _makeGetter( property, next ){\r\n+\tif (property === '__proto__'){\r\n+\t\tthrow new Error('unable to access __proto__');\r\n+\t}\r\n+\r\n \tif (next){\r\n \t\treturn function getter( obj ){\r\n \t\t\ttry {\r"
        },
        {
          "filename": "src/core.spec.js",
          "status": "modified",
          "additions": 106,
          "deletions": 54,
          "patch": "@@ -4,75 +4,127 @@ const {expect} = require('chai');\n const bmoor = require('./index.js');\n \n describe('Testing object setting/getting', function() {\n-\tit('should have get working', function(){\n-\t\tvar t = {\n-\t\t\t\teins : 1,\n-\t\t\t\tzwei: {\n-\t\t\t\t\tdrei: 3\n-\t\t\t\t}\n-\t\t\t};\n \n-\t\texpect( bmoor.get(t,'eins') ).to.equal(1);\n-\t\texpect( bmoor.get(t,'zwei.drei') ).to.equal(3);\n-\t});\n+\tdescribe('::get', function(){\n+\t\tit('should be working', function(){\n+\t\t\tvar t = {\n+\t\t\t\t\teins : 1,\n+\t\t\t\t\tzwei: {\n+\t\t\t\t\t\tdrei: 3\n+\t\t\t\t\t}\n+\t\t\t\t};\n \n-\tit('should have get working with empty strings', function(){\n-\t\tvar t = {\n-\t\t\t\teins : 1,\n-\t\t\t\tzwei: {\n-\t\t\t\t\tdrei: 3\n-\t\t\t\t}\n-\t\t\t};\n+\t\t\texpect( bmoor.get(t,'eins') ).to.equal(1);\n+\t\t\texpect( bmoor.get(t,'zwei.drei') ).to.equal(3);\n+\t\t});\n \n-\t\texpect( bmoor.get(t,'') ).to.equal(t);\n-\t});\n+\t\tit('should be working with empty strings', function(){\n+\t\t\tvar t = {\n+\t\t\t\t\teins : 1,\n+\t\t\t\t\tzwei: {\n+\t\t\t\t\t\tdrei: 3\n+\t\t\t\t\t}\n+\t\t\t\t};\n \n-\tit('should have makeGetter working', function(){\n-\t\tvar t = {\n-\t\t\t\teins : 1,\n-\t\t\t\tzwei: {\n-\t\t\t\t\tdrei: 3\n-\t\t\t\t}\n-\t\t\t},\n-\t\t\tf1 = bmoor.makeGetter('eins'),\n-\t\t\tf2 = bmoor.makeGetter('zwei.drei');\n+\t\t\texpect( bmoor.get(t,'') ).to.equal(t);\n+\t\t});\n \n-\t\texpect( f1(t) ).to.equal(1);\n-\t\texpect( f2(t) ).to.equal(3);\n+\t\tit('should not allow __proto__', function(){\n+\t\t\tvar t = bmoor.get({}, '__proto__');\n+\t\t\t\n+\t\t\texpect(t)\n+\t\t\t.to.equal(null);\n+\t\t});\n \t});\n+\t\n+\tdescribe('::makeGetter', function(){\n+\t\tit('should be working', function(){\n+\t\t\tvar t = {\n+\t\t\t\t\teins : 1,\n+\t\t\t\t\tzwei: {\n+\t\t\t\t\t\tdrei: 3\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tf1 = bmoor.makeGetter('eins'),\n+\t\t\t\tf2 = bmoor.makeGetter('zwei.drei');\n \n-\tit('should have makeGetter working with empty strings', function(){\n-\t\tvar t = {\n-\t\t\t\teins : 1,\n-\t\t\t\tzwei: {\n-\t\t\t\t\tdrei: 3\n-\t\t\t\t}\n-\t\t\t},\n-\t\t\tf1 = bmoor.makeGetter('');\n+\t\t\texpect( f1(t) ).to.equal(1);\n+\t\t\texpect( f2(t) ).to.equal(3);\n+\t\t});\n \n-\t\texpect( f1(t) ).to.equal(t);\n-\t});\n+\t\tit('should fail with __proto__', function(){\n+\t\t\tlet failed = false;\n \n-\tit('should have set working', function(){\n-\t\tvar t = {};\n+\t\t\ttry {\n+\t\t\t\tbmoor.makeGetter('__proto__.polluted');\n+\t\t\t} catch(ex){\n+\t\t\t\tfailed = true;\n+\t\t\t}\n+\n+\t\t\texpect(failed)\n+\t\t\t.to.equal(true);\n+\t\t});\n \n-\t\tbmoor.set(t,'eins',1);\n-\t\tbmoor.set(t,'zwei.drei',3);\n+\t\tit('should work with empty strings', function(){\n+\t\t\tvar t = {\n+\t\t\t\t\teins : 1,\n+\t\t\t\t\tzwei: {\n+\t\t\t\t\t\tdrei: 3\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\tf1 = bmoor.makeGetter('');\n+\n+\t\t\texpect( f1(t) ).to.equal(t);\n+\t\t});\n+\t});\t\n \n-\t\texpect( t.eins ).to.equal(1);\n-\t\texpect( t.zwei.drei ).to.equal(3);\n+\tdescribe('::set', function(){\n+\t\tit('should be working working', function(){\n+\t\t\tvar t = {};\n+\n+\t\t\tbmoor.set(t,'eins',1);\n+\t\t\tbmoor.set(t,'zwei.drei',3);\n+\n+\t\t\texpect( t.eins ).to.equal(1);\n+\t\t\texpect( t.zwei.drei ).to.equal(3);\n+\t\t});\n+\n+\t\tit('should not allow __proto__', function(){\n+\t\t\tvar t = {};\n+\n+\t\t\tbmoor.set(t,'__proto__.polluted', true);\n+\t\t\t\n+\t\t\texpect( t.polluted )\n+\t\t\t.to.not.equal(true);\n+\t\t});\n \t});\n \n-\tit('should have makeSetter working', function(){\n-\t\tvar t = {},\n-\t\t\tf1 = bmoor.makeSetter('eins'),\n-\t\t\tf2 = bmoor.makeSetter('zwei.drei');\n+\tdescribe('::makeSetter', function(){\n+\t\tit('should actually work', function(){\n+\t\t\tvar t = {},\n+\t\t\t\tf1 = bmoor.makeSetter('eins'),\n+\t\t\t\tf2 = bmoor.makeSetter('zwei.drei');\n \n-\t\tf1(t,1);\n-\t\tf2(t,3);\n+\t\t\tf1(t,1);\n+\t\t\tf2(t,3);\n \n-\t\texpect( t.eins ).to.equal(1);\n-\t\texpect( t.zwei.drei ).to.equal(3);\n+\t\t\texpect( t.eins ).to.equal(1);\n+\t\t\texpect( t.zwei.drei ).to.equal(3);\n+\t\t});\n+\n+\t\tit('should fail with __proto__', function(){\n+\t\t\tlet failed = false;\n+\n+\t\t\ttry {\n+\t\t\t\tbmoor.makeGetter('__proto__.polluted');\n+\t\t\t} catch(ex){\n+\t\t\t\tfailed = true;\n+\t\t\t}\n+\t\t\t\t\n+\n+\t\t\texpect(failed)\n+\t\t\t.to.equal(true);\n+\t\t});\n \t});\n \n \tit('should have del working', function(){"
        },
        {
          "filename": "src/object.spec.js",
          "status": "modified",
          "additions": 55,
          "deletions": 53,
          "patch": "@@ -5,42 +5,44 @@ describe('bmoor.object', function() {\n \t\r\n \tconst bmoor = require('./index.js');\r\n \r\n-\tit('should operate explode correctly', function(){\r\n-\t\tvar t = {\r\n-\t\t\t'eins.zwei': 12,\r\n-\t\t\t'eins.drei': 13,\r\n-\t\t\t'fier': 4\r\n-\t\t};\r\n-\r\n-\t\texpect(bmoor.object.explode(t))\r\n-\t\t.to.deep.equal({\r\n-\t\t\teins: {\r\n-\t\t\t\tzwei: 12,\r\n-\t\t\t\tdrei: 13\r\n-\t\t\t},\r\n-\t\t\tfier: 4\r\n-\t\t});\r\n-\t});\r\n-\r\n-\tit('should operate makeExploder correctly', function(){\r\n-\t\tvar t = {\r\n+\tdescribe('::explode', function(){\r\n+\t\tit('should operate explode correctly', function(){\r\n+\t\t\tvar t = {\r\n \t\t\t\t'eins.zwei': 12,\r\n \t\t\t\t'eins.drei': 13,\r\n \t\t\t\t'fier': 4\r\n-\t\t\t},\r\n-\t\t\texplode = bmoor.object.makeExploder( Object.keys(t) );\r\n+\t\t\t};\r\n+\r\n+\t\t\texpect(bmoor.object.explode(t))\r\n+\t\t\t.to.deep.equal({\r\n+\t\t\t\teins: {\r\n+\t\t\t\t\tzwei: 12,\r\n+\t\t\t\t\tdrei: 13\r\n+\t\t\t\t},\r\n+\t\t\t\tfier: 4\r\n+\t\t\t});\r\n+\t\t});\r\n+\r\n+\t\tit('should operate makeExploder correctly', function(){\r\n+\t\t\tvar t = {\r\n+\t\t\t\t\t'eins.zwei': 12,\r\n+\t\t\t\t\t'eins.drei': 13,\r\n+\t\t\t\t\t'fier': 4\r\n+\t\t\t\t},\r\n+\t\t\t\texplode = bmoor.object.makeExploder( Object.keys(t) );\r\n \r\n-\t\texpect(explode(t))\r\n-\t\t.to.deep.equal({\r\n-\t\t\teins: {\r\n-\t\t\t\tzwei: 12,\r\n-\t\t\t\tdrei: 13\r\n-\t\t\t},\r\n-\t\t\tfier: 4\r\n+\t\t\texpect(explode(t))\r\n+\t\t\t.to.deep.equal({\r\n+\t\t\t\teins: {\r\n+\t\t\t\t\tzwei: 12,\r\n+\t\t\t\t\tdrei: 13\r\n+\t\t\t\t},\r\n+\t\t\t\tfier: 4\r\n+\t\t\t});\r\n \t\t});\r\n \t});\r\n \r\n-\tdescribe(':: implode', function(){\r\n+\tdescribe('::implode', function(){\r\n \t\tit('should operate correctly', function(){\r\n \t\t\tvar t = {\r\n \t\t\t\ttime: {\r\n@@ -113,32 +115,32 @@ describe('bmoor.object', function() {\n \t\t\t\t]\r\n \t\t\t});\r\n \t\t});\r\n-\t});\r\n \r\n-\tit('should operate implode correctly - with an ignore', function(){\r\n-\t\tvar t = {\r\n-\t\t\ttime: {\r\n-\t\t\t\tstart: 99,\r\n-\t\t\t\tstop: 100\r\n-\t\t\t},\r\n-\t\t\tid: 'woot',\r\n-\t\t\tfoo: {\r\n-\t\t\t\tbar: {\r\n-\t\t\t\t\thello: 'world'\r\n+\t\tit('should operate implode correctly - with an ignore', function(){\r\n+\t\t\tvar t = {\r\n+\t\t\t\ttime: {\r\n+\t\t\t\t\tstart: 99,\r\n+\t\t\t\t\tstop: 100\r\n+\t\t\t\t},\r\n+\t\t\t\tid: 'woot',\r\n+\t\t\t\tfoo: {\r\n+\t\t\t\t\tbar: {\r\n+\t\t\t\t\t\thello: 'world'\r\n+\t\t\t\t\t}\r\n \t\t\t\t}\r\n-\t\t\t}\r\n-\t\t};\r\n+\t\t\t};\r\n \r\n-\t\texpect(bmoor.object.implode(t, {\r\n-\t\t\tignore: {\r\n-\t\t\t\ttime:{\r\n-\t\t\t\t\tstart:true\r\n-\t\t\t\t},\r\n-\t\t\t\tid: true,\r\n-\t\t\t\tfoo: true\r\n-\t\t\t}\r\n-\t\t})).to.deep.equal({\r\n-\t\t\t'time.stop': 100\r\n+\t\t\texpect(bmoor.object.implode(t, {\r\n+\t\t\t\tignore: {\r\n+\t\t\t\t\ttime:{\r\n+\t\t\t\t\t\tstart:true\r\n+\t\t\t\t\t},\r\n+\t\t\t\t\tid: true,\r\n+\t\t\t\t\tfoo: true\r\n+\t\t\t\t}\r\n+\t\t\t})).to.deep.equal({\r\n+\t\t\t\t'time.stop': 100\r\n+\t\t\t});\r\n \t\t});\r\n \t});\r\n \r\n@@ -177,4 +179,4 @@ describe('bmoor.object', function() {\n \t\t\t});\r\n \t\t});\r\n \t});\r\n-});\n\\ No newline at end of file\n+});\r"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "37ca5771e7e38088879c2d7171e649220fb05da5",
            "date": "2022-03-28T03:21:19Z",
            "author_login": "b-heilman"
          },
          {
            "sha": "6c85b6cf3f9bd46a66c8b3ee92e17ded8822d7ad",
            "date": "2022-03-27T21:35:44Z",
            "author_login": "b-heilman"
          },
          {
            "sha": "433936f27ab5bb10912c6c17f478d38a52e81739",
            "date": "2022-03-27T18:30:31Z",
            "author_login": "b-heilman"
          },
          {
            "sha": "29b0162cc1dc1791fc060891f568b0ae29bc542b",
            "date": "2022-01-25T03:54:42Z",
            "author_login": "b-heilman"
          },
          {
            "sha": "4bdc9943436fafe362d456e77ae262591a6fea1c",
            "date": "2021-10-13T00:28:56Z",
            "author_login": "b-heilman"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-1321",
    "description": "The package bmoor before 0.8.12 are vulnerable to Prototype Pollution via the set function.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-10-02T10:15:12.903",
    "last_modified": "2024-11-21T05:37:42.343",
    "fix_date": "2020-09-17T04:24:17Z"
  },
  "references": [
    {
      "url": "https://github.com/b-heilman/bmoor/commit/7d4a086a1dc3ef11ed0b323824d02348734b7da5",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-BMOOR-598664",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/b-heilman/bmoor/commit/7d4a086a1dc3ef11ed0b323824d02348734b7da5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-BMOOR-598664",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.164807",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bmoor",
    "owner": "b-heilman",
    "created_at": "2012-07-02T11:27:14Z",
    "updated_at": "2021-10-13T00:29:27Z",
    "pushed_at": "2023-07-19T04:56:53Z",
    "size": 1463,
    "stars": 2,
    "forks": 3,
    "open_issues": 1,
    "watchers": 2,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "JavaScript": 90708
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:08:01.013581"
  }
}