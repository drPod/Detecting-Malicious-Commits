{
  "cve_id": "CVE-2020-7748",
  "github_data": {
    "repository": "TypedProject/tsed",
    "fix_commit": "1395773ddac35926cf058fc6da9fb8e82266761b",
    "related_commits": [
      "1395773ddac35926cf058fc6da9fb8e82266761b",
      "1395773ddac35926cf058fc6da9fb8e82266761b"
    ],
    "patch_url": "https://github.com/TypedProject/tsed/commit/1395773ddac35926cf058fc6da9fb8e82266761b.patch",
    "fix_commit_details": {
      "sha": "1395773ddac35926cf058fc6da9fb8e82266761b",
      "commit_date": "2020-10-18T06:23:59Z",
      "author": {
        "login": "Romakita",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: Use objectKeys to prevent prototype pollution",
        "length": 50,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 59,
        "additions": 28,
        "deletions": 31
      },
      "files": [
        {
          "filename": "packages/common/src/converters/components/MapConverter.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,3 +1,4 @@\n+import {objectKeys} from \"@tsed/core\";\n import {Converter} from \"../decorators/converter\";\n import {IConverter, IDeserializer, ISerializer} from \"../interfaces/index\";\n \n@@ -19,7 +20,7 @@ export class MapConverter implements IConverter {\n   deserialize<T>(data: any, target: any, baseType: T, deserializer: IDeserializer): Map<string, T> {\n     const obj = new Map<string, T>();\n \n-    Object.keys(data).forEach((key) => {\n+    objectKeys(data).forEach((key) => {\n       obj.set(key, deserializer(data[key], baseType) as T);\n     });\n "
        },
        {
          "filename": "packages/common/src/converters/components/SetConverter.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,3 +1,4 @@\n+import {objectKeys} from \"@tsed/core\";\n import {Converter} from \"../decorators/converter\";\n import {IConverter, IDeserializer, ISerializer} from \"../interfaces/index\";\n \n@@ -19,7 +20,7 @@ export class SetConverter implements IConverter {\n   deserialize<T>(data: any, target: any, baseType: T, deserializer: IDeserializer): Set<T> {\n     const obj = new Set<T>();\n \n-    Object.keys(data).forEach((key) => {\n+    objectKeys(data).forEach((key) => {\n       obj.add(deserializer(data[key], baseType) as T);\n     });\n "
        },
        {
          "filename": "packages/common/src/converters/services/ConverterService.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1,4 +1,4 @@\n-import {getClass, isArrayOrArrayClass, isEmpty, isPrimitiveOrPrimitiveClass, Metadata, Type} from \"@tsed/core\";\n+import {getClass, isArrayOrArrayClass, isEmpty, isPrimitiveOrPrimitiveClass, Metadata, objectKeys, Type} from \"@tsed/core\";\n import {Configuration, Injectable, InjectorService} from \"@tsed/di\";\n import {IConverterSettings} from \"../../config/interfaces/IConverterSettings\";\n import {PropertyMetadata} from \"../../mvc/models/PropertyMetadata\";\n@@ -101,7 +101,7 @@ export class ConverterService {\n \n     const plainObject: any = {};\n     const properties = PropertyMetadata.getProperties(options.type || obj, {withIgnoredProps});\n-    const keys = properties.size ? Array.from(properties.keys()) : Object.keys(obj);\n+    const keys = properties.size ? Array.from(properties.keys()) : objectKeys(obj);\n \n     keys.forEach((propertyKey) => {\n       if (typeof obj[propertyKey] !== \"function\") {\n@@ -179,7 +179,7 @@ export class ConverterService {\n     const instance = new targetType();\n     const properties = PropertyMetadata.getProperties(targetType);\n \n-    Object.keys(obj).forEach((propertyName: string) => {\n+    objectKeys(obj).forEach((propertyName: string) => {\n       const propertyMetadata = ConverterService.getPropertyMetadata(properties, propertyName);\n \n       return this.convertProperty(obj, instance, propertyName, propertyMetadata, options);"
        },
        {
          "filename": "packages/core/src/utils/cleanObject.ts",
          "status": "modified",
          "additions": 13,
          "deletions": 11,
          "patch": "@@ -1,17 +1,19 @@\n+import {isProtectedKey} from \"./isProtectedKey\";\n /**\n  * Remove undefined value\n  * @param obj\n  */\n-\n export function cleanObject(obj: any): any {\n-  return Object.entries(obj).reduce(\n-    (obj, [key, value]) =>\n-      value === undefined\n-        ? obj\n-        : {\n-            ...obj,\n-            [key]: value\n-          },\n-    {}\n-  );\n+  return Object.entries(obj).reduce((obj, [key, value]) => {\n+    if (isProtectedKey(key)) {\n+      return obj;\n+    }\n+\n+    return value === undefined\n+      ? obj\n+      : {\n+          ...obj,\n+          [key]: value\n+        };\n+  }, {});\n }"
        },
        {
          "filename": "packages/json-mapper/src/components/MapMapper.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,3 +1,4 @@\n+import {objectKeys} from \"@tsed/core\";\n import {JsonMapper} from \"../decorators/jsonMapper\";\n import {JsonMapperCtx, JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n \n@@ -12,7 +13,7 @@ export class MapMapper implements JsonMapperMethods {\n   deserialize<T = any, C = Map<string, T>>(data: {[key: string]: any}, ctx: JsonMapperCtx<T, C>): Map<string, T> {\n     const obj = new Map<string, T>();\n \n-    Object.keys(data).forEach((key) => {\n+    objectKeys(data).forEach((key) => {\n       obj.set(key, ctx.next(data[key]) as T);\n     });\n "
        },
        {
          "filename": "packages/json-mapper/src/components/SetMapper.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,3 +1,4 @@\n+import {objectKeys} from \"@tsed/core\";\n import {JsonMapper} from \"../decorators/jsonMapper\";\n import {JsonMapperCtx, JsonMapperMethods} from \"../interfaces/JsonMapperMethods\";\n \n@@ -12,7 +13,7 @@ export class SetMapper implements JsonMapperMethods {\n   deserialize<T>(data: any, ctx: JsonMapperCtx): Set<T> {\n     const obj = new Set<T>();\n \n-    Object.keys(data).forEach((key) => {\n+    objectKeys(data).forEach((key) => {\n       obj.add(ctx.next(data[key]));\n     });\n "
        },
        {
          "filename": "packages/json-mapper/src/utils/deserialize.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,4 +1,4 @@\n-import {isArray, isEmpty, isNil, MetadataTypes, nameOf, Type} from \"@tsed/core\";\n+import {isArray, isEmpty, isNil, MetadataTypes, nameOf, objectKeys, Type} from \"@tsed/core\";\n import {getPropertiesStores, JsonEntityStore, JsonHookContext, JsonSchema} from \"@tsed/schema\";\n import \"../components\";\n import {JsonMapperContext} from \"../domain/JsonMapperContext\";\n@@ -77,7 +77,7 @@ export function plainObjectToClass<T = any>(src: any, options: JsonDeserializerO\n   const {type, store = JsonEntityStore.from(type), ...next} = options;\n   const propertiesMap = getPropertiesStores(store);\n \n-  let keys = Object.keys(src);\n+  let keys = objectKeys(src);\n   const additionalProperties = propertiesMap.size ? !!store.schema.get(\"additionalProperties\") || options.additionalProperties : true;\n   const out: any = new type(src);\n "
        },
        {
          "filename": "packages/mongoose/src/utils/cleanProps.ts",
          "status": "removed",
          "additions": 0,
          "deletions": 8,
          "patch": "@@ -1,8 +0,0 @@\n-export const cleanProps = (src: any) =>\n-  Object.keys(src).reduce((obj: any, k: any) => {\n-    if (src[k] !== undefined) {\n-      obj[k] = src[k];\n-    }\n-\n-    return obj;\n-  }, {});"
        },
        {
          "filename": "packages/mongoose/src/utils/createSchema.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -1,10 +1,9 @@\n import {ConverterService, IConverterOptions, JsonSchema, PropertyMetadata} from \"@tsed/common\";\n-import {getClass, Store, Type} from \"@tsed/core\";\n+import {cleanObject, getClass, Store, Type} from \"@tsed/core\";\n import * as mongoose from \"mongoose\";\n import {SchemaDefinition, SchemaTypeOpts} from \"mongoose\";\n import {MONGOOSE_SCHEMA} from \"../constants\";\n import {MongooseSchemaOptions} from \"../interfaces\";\n-import {cleanProps} from \"./cleanProps\";\n import {schemaOptions} from \"./schemaOptions\";\n \n const MONGOOSE_RESERVED_KEYS = [\"_id\"];\n@@ -132,7 +131,7 @@ export function createSchemaTypeOptions(propertyMetadata: PropertyMetadata): Sch\n     schemaTypeOptions = {...schemaTypeOptions, type: getSchema(propertyMetadata.type)};\n   }\n \n-  schemaTypeOptions = cleanProps({...schemaTypeOptions, ...rawMongooseSchema});\n+  schemaTypeOptions = cleanObject({...schemaTypeOptions, ...rawMongooseSchema});\n \n   if (propertyMetadata.isCollection) {\n     if (propertyMetadata.isArray) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "68f358a0395cd80006bc87af836f332543453299",
            "date": "2025-01-10T07:21:57Z",
            "author_login": "ochrstn"
          },
          {
            "sha": "36590f5182d0cfe09254a7423178b624de2dbcc6",
            "date": "2025-01-10T07:17:11Z",
            "author_login": "ochrstn"
          },
          {
            "sha": "acdbbeda93cc9574d266dfcda6d560d4a1c967ec",
            "date": "2025-01-10T07:15:07Z",
            "author_login": "ochrstn"
          },
          {
            "sha": "3fc67219056bdfd4ae9ad9445a965a770088d148",
            "date": "2025-01-13T13:16:52Z",
            "author_login": "semantic-release-bot"
          },
          {
            "sha": "01dc13df5e7133fad2bd724c74d8c6c20a008b93",
            "date": "2025-01-12T08:33:22Z",
            "author_login": "Romakita"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-1321",
    "description": "This affects the package @tsed/core before 5.65.7. This vulnerability relates to the deepExtend function which is used as part of the utils directory. Depending on if user input is provided, an attacker can overwrite and pollute the object prototype of a program.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-10-20T11:15:12.583",
    "last_modified": "2024-11-21T05:37:43.720",
    "fix_date": "2020-10-18T06:23:59Z"
  },
  "references": [
    {
      "url": "https://github.com/TypedProject/tsed/blob/production/packages/core/src/utils/deepExtends.ts%23L36",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/TypedProject/tsed/commit/1395773ddac35926cf058fc6da9fb8e82266761b",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-TSEDCORE-1019382",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/TypedProject/tsed/blob/production/packages/core/src/utils/deepExtends.ts%23L36",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/TypedProject/tsed/commit/1395773ddac35926cf058fc6da9fb8e82266761b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-TSEDCORE-1019382",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:06.185594",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tsed",
    "owner": "TypedProject",
    "created_at": "2016-02-21T18:38:47Z",
    "updated_at": "2025-01-14T10:39:21Z",
    "pushed_at": "2025-01-14T10:43:54Z",
    "size": 83793,
    "stars": 2887,
    "forks": 287,
    "open_issues": 49,
    "watchers": 2887,
    "has_security_policy": false,
    "default_branch": "production",
    "protected_branches": [],
    "languages": {
      "TypeScript": 3735962,
      "JavaScript": 60632,
      "EJS": 26930,
      "HTML": 3710,
      "CSS": 3280,
      "Shell": 230
    },
    "commit_activity": {
      "total_commits_last_year": 647,
      "avg_commits_per_week": 12.442307692307692,
      "days_active_last_year": 175
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:24:48.365816"
  }
}