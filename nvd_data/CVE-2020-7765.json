{
  "cve_id": "CVE-2020-7765",
  "github_data": {
    "repository": "firebase/firebase-js-sdk",
    "fix_commit": "9cf727fcc3d049551b16ae0698ac33dc2fe45ada",
    "related_commits": [
      "9cf727fcc3d049551b16ae0698ac33dc2fe45ada",
      "9cf727fcc3d049551b16ae0698ac33dc2fe45ada"
    ],
    "patch_url": "https://github.com/firebase/firebase-js-sdk/commit/9cf727fcc3d049551b16ae0698ac33dc2fe45ada.patch",
    "fix_commit_details": {
      "sha": "9cf727fcc3d049551b16ae0698ac33dc2fe45ada",
      "commit_date": "2020-10-27T21:28:49Z",
      "author": {
        "login": "Feiyang1",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent __proto__ pollution in util.deepExtend (#4001)",
        "length": 171,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 86,
        "additions": 53,
        "deletions": 33
      },
      "files": [
        {
          "filename": ".changeset/fuzzy-impalas-brake.md",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+---\n+\"@firebase/util\": patch\n+---\n+\n+Do not merge `__proto__` in `deepExtend` to prevent `__proto__` pollution."
        },
        {
          "filename": "packages/util/src/deepCopy.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 4,
          "patch": "@@ -33,6 +33,8 @@ export function deepCopy<T>(value: T): T {\n  *\n  * Note that the target can be a function, in which case the properties in\n  * the source Object are copied onto it as static properties of the Function.\n+ *\n+ * Note: we don't merge __proto__ to prevent prototype pollution\n  */\n export function deepExtend(target: unknown, source: unknown): unknown {\n   if (!(source instanceof Object)) {\n@@ -62,14 +64,19 @@ export function deepExtend(target: unknown, source: unknown): unknown {\n   }\n \n   for (const prop in source) {\n-    if (!source.hasOwnProperty(prop)) {\n+    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n+    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n       continue;\n     }\n-    (target as { [key: string]: unknown })[prop] = deepExtend(\n-      (target as { [key: string]: unknown })[prop],\n-      (source as { [key: string]: unknown })[prop]\n+    (target as Record<string, unknown>)[prop] = deepExtend(\n+      (target as Record<string, unknown>)[prop],\n+      (source as Record<string, unknown>)[prop]\n     );\n   }\n \n   return target;\n }\n+\n+function isValidKey(key: string): boolean {\n+  return key !== '__proto__';\n+}"
        },
        {
          "filename": "packages/util/test/deepCopy.test.ts",
          "status": "modified",
          "additions": 37,
          "deletions": 29,
          "patch": "@@ -14,78 +14,77 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-import { assert } from 'chai';\n+import { expect } from 'chai';\n import { deepCopy, deepExtend } from '../src/deepCopy';\n \n describe('deepCopy()', () => {\n   it('Scalars', () => {\n-    assert.strictEqual(deepCopy(true), true);\n-    assert.strictEqual(deepCopy(123), 123);\n-    assert.strictEqual(deepCopy('abc'), 'abc');\n+    expect(deepCopy(true)).to.equal(true);\n+    expect(deepCopy(123)).to.equal(123);\n+    expect(deepCopy('abc')).to.equal('abc');\n   });\n \n   it('Date', () => {\n     const d = new Date();\n-    assert.deepEqual(deepCopy(d), d);\n+    expect(deepCopy(d)).to.deep.equal(d);\n   });\n \n   it('Object', () => {\n-    assert.deepEqual(deepCopy({}), {});\n-    assert.deepEqual(deepCopy({ a: 123 }), { a: 123 });\n-    assert.deepEqual(deepCopy({ a: { b: 123 } }), { a: { b: 123 } });\n+    expect(deepCopy({})).to.deep.equal({});\n+    expect(deepCopy({ a: 123 })).to.deep.equal({ a: 123 });\n+    expect(deepCopy({ a: { b: 123 } })).to.deep.equal({ a: { b: 123 } });\n   });\n \n   it('Array', () => {\n-    assert.deepEqual(deepCopy([]), []);\n-    assert.deepEqual(deepCopy([123, 456]), [123, 456]);\n-    assert.deepEqual(deepCopy([123, [456]]), [123, [456]]);\n+    expect(deepCopy([])).to.deep.equal([]);\n+    expect(deepCopy([123, 456])).to.deep.equal([123, 456]);\n+    expect(deepCopy([123, [456]])).to.deep.equal([123, [456]]);\n   });\n });\n \n describe('deepExtend', () => {\n   it('Scalars', () => {\n-    assert.strictEqual(deepExtend(1, true), true);\n-    assert.strictEqual(deepExtend(undefined, 123), 123);\n-    assert.strictEqual(deepExtend('was', 'abc'), 'abc');\n+    expect(deepExtend(1, true)).to.equal(true);\n+    expect(deepExtend(undefined, 123)).to.equal(123);\n+    expect(deepExtend('was', 'abc')).to.equal('abc');\n   });\n \n   it('Date', () => {\n     const d = new Date();\n-    assert.deepEqual(deepExtend(new Date(), d), d);\n+    expect(deepExtend(new Date(), d)).to.deep.equal(d);\n   });\n \n   it('Object', () => {\n-    assert.deepEqual(deepExtend({ old: 123 }, {}), { old: 123 });\n-    assert.deepEqual(deepExtend({ old: 123 }, { s: 'hello' }), {\n+    expect(deepExtend({ old: 123 }, {})).to.deep.equal({ old: 123 });\n+    expect(deepExtend({ old: 123 }, { s: 'hello' })).to.deep.equal({\n       old: 123,\n       s: 'hello'\n     });\n-    assert.deepEqual(\n-      deepExtend({ old: 123, a: { c: 'in-old' } }, { a: { b: 123 } }),\n-      { old: 123, a: { b: 123, c: 'in-old' } }\n-    );\n+    expect(\n+      deepExtend({ old: 123, a: { c: 'in-old' } }, { a: { b: 123 } })\n+    ).to.deep.equal({ old: 123, a: { b: 123, c: 'in-old' } });\n   });\n \n   it('Array', () => {\n-    assert.deepEqual(deepExtend([1], []), []);\n-    assert.deepEqual(deepExtend([1], [123, 456]), [123, 456]);\n-    assert.deepEqual(deepExtend([1], [123, [456]]), [123, [456]]);\n+    expect(deepExtend([1], [])).to.deep.equal([]);\n+    expect(deepExtend([1], [123, 456])).to.deep.equal([123, 456]);\n+    expect(deepExtend([1], [123, [456]])).to.deep.equal([123, [456]]);\n   });\n \n   it('Array is copied - not referenced', () => {\n     const o1 = { a: [1] };\n     const o2 = { a: [2] };\n \n-    assert.deepEqual(deepExtend(o1, o2), { a: [2] });\n+    expect(deepExtend(o1, o2)).to.deep.equal({ a: [2] });\n     o2.a.push(3);\n-    assert.deepEqual(o1, { a: [2] });\n+    expect(o1).to.deep.equal({ a: [2] });\n   });\n \n   it('Array with undefined elements', () => {\n     const a: any = [];\n     a[3] = '3';\n     const b = deepExtend(undefined, a);\n-    assert.deepEqual(b, [, , , '3']);\n+    expect(b).to.deep.equal([, , , '3']);\n   });\n \n   it('Function', () => {\n@@ -100,7 +99,16 @@ describe('deepExtend', () => {\n       },\n       { a: source }\n     );\n-    assert.deepEqual({ a: source }, target);\n-    assert.strictEqual(source, target.a);\n+    expect({ a: source }).to.deep.equal(target);\n+    expect(source).to.equal(target.a);\n+  });\n+\n+  it('does not extend property __proto__', () => {\n+    const src = JSON.parse('{ \"__proto__\": { \"polluted\": \"polluted\" } }');\n+    const a: Record<string, unknown> = {};\n+    deepExtend(a, src);\n+\n+    expect(a.__proto__).to.equal(Object.prototype);\n+    expect(a.polluted).to.be.undefined;\n   });\n });"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0755a723db80edd204d904ea1d05b95eadb2c5fa",
            "date": "2025-01-10T20:55:15Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "d16a4874b71ae21ef54e85fc1b43fc92319f7ef1",
            "date": "2025-01-10T00:26:57Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "a0e0a1c2cfd1c6b5fceb2da364afd2c2b3e13545",
            "date": "2025-01-09T19:40:37Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "c19a051ce490398f49fbf9bdb7181a986b66fa14",
            "date": "2025-01-09T18:17:03Z",
            "author_login": "maneesht"
          },
          {
            "sha": "a133053305095ac85bbf30200107e2a7a593aa77",
            "date": "2025-01-09T17:48:17Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": null,
    "description": "This affects the package @firebase/util before 0.3.4. This vulnerability relates to the deepExtend function within the DeepCopy.ts file. Depending on if user input is provided, an attacker can overwrite and pollute the object prototype of a program.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2020-11-16T12:15:14.320",
    "last_modified": "2024-11-21T05:37:45.650",
    "fix_date": "2020-10-27T21:28:49Z"
  },
  "references": [
    {
      "url": "https://github.com/firebase/firebase-js-sdk/commit/9cf727fcc3d049551b16ae0698ac33dc2fe45ada",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/firebase/firebase-js-sdk/pull/4001",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-FIREBASEUTIL-1038324",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/firebase/firebase-js-sdk/commit/9cf727fcc3d049551b16ae0698ac33dc2fe45ada",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/firebase/firebase-js-sdk/pull/4001",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-FIREBASEUTIL-1038324",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:08.462157",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "firebase-js-sdk",
    "owner": "firebase",
    "created_at": "2017-04-24T21:52:11Z",
    "updated_at": "2025-01-12T19:37:16Z",
    "pushed_at": "2025-01-14T13:56:41Z",
    "size": 138767,
    "stars": 4882,
    "forks": 900,
    "open_issues": 652,
    "watchers": 4882,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 9956051,
      "JavaScript": 541664,
      "HTML": 130937,
      "CSS": 49401,
      "HCL": 11724,
      "Handlebars": 7011,
      "Shell": 6543
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:12:56.610261"
  }
}