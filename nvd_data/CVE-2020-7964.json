{
  "cve_id": "CVE-2020-7964",
  "github_data": {
    "repository": "mirumee/saleor",
    "fix_commit": "233b8890c60fa6d90daf99e4d90fea85867732c3",
    "related_commits": [
      "233b8890c60fa6d90daf99e4d90fea85867732c3",
      "233b8890c60fa6d90daf99e4d90fea85867732c3"
    ],
    "patch_url": "https://github.com/mirumee/saleor/commit/233b8890c60fa6d90daf99e4d90fea85867732c3.patch",
    "fix_commit_details": {
      "sha": "233b8890c60fa6d90daf99e4d90fea85867732c3",
      "commit_date": "2020-01-23T16:14:14Z",
      "author": {
        "login": "maarcingebala",
        "type": "User",
        "stats": {
          "total_commits": 3907,
          "average_weekly_commits": 6.271268057784912,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 365
        }
      },
      "commit_message": {
        "title": "Merge pull request #5192 from maarcingebala/fix-checkout-attach-user-permissions",
        "length": 132,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 77,
        "additions": 64,
        "deletions": 13
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -54,6 +54,7 @@ All notable, unreleased changes to this project will be documented in this file.\n - Drop gettext occurrences - #5189 by @IKarbowiak\n - Fix `product_created` webhook - #5187 by @dzkb\n - Drop unused resolver `resolve_availability` - #5190 by @maarcingebala\n+- Fix permission for `checkoutCustomerAttach` mutation - #5192 by @maarcingebala\n \n ## 2.9.0\n "
        },
        {
          "filename": "saleor/graphql/checkout/mutations.py",
          "status": "modified",
          "additions": 34,
          "deletions": 7,
          "patch": "@@ -5,6 +5,7 @@\n from django.core.exceptions import ObjectDoesNotExist, ValidationError\n from django.db import transaction\n from django.db.models import Prefetch\n+from graphql_jwt.exceptions import PermissionDenied\n \n from ...account.error_codes import AccountErrorCode\n from ...checkout import models\n@@ -35,7 +36,7 @@\n from ...product import models as product_models\n from ...warehouse.availability import check_stock_quantity, get_available_quantity\n from ..account.i18n import I18nMixin\n-from ..account.types import AddressInput, User\n+from ..account.types import AddressInput\n from ..core.mutations import (\n     BaseMutation,\n     ClearMetaBaseMutation,\n@@ -404,22 +405,39 @@ class CheckoutCustomerAttach(BaseMutation):\n \n     class Arguments:\n         checkout_id = graphene.ID(required=True, description=\"ID of the checkout.\")\n-        customer_id = graphene.ID(required=True, description=\"The ID of the customer.\")\n+        customer_id = graphene.ID(\n+            required=False,\n+            description=(\n+                \"The ID of the customer. DEPRECATED: This field is deprecated and will \"\n+                \"be removed in Saleor 2.11. To identify a customer you should \"\n+                \"authenticate with JWT token.\"\n+            ),\n+        )\n \n     class Meta:\n         description = \"Sets the customer as the owner of the checkout.\"\n         error_type_class = CheckoutError\n         error_type_field = \"checkout_errors\"\n \n     @classmethod\n-    def perform_mutation(cls, _root, info, checkout_id, customer_id):\n+    def check_permissions(cls, context):\n+        return context.user.is_authenticated\n+\n+    @classmethod\n+    def perform_mutation(cls, _root, info, checkout_id, customer_id=None):\n         checkout = cls.get_node_or_error(\n             info, checkout_id, only_type=Checkout, field=\"checkout_id\"\n         )\n-        customer = cls.get_node_or_error(\n-            info, customer_id, only_type=User, field=\"customer_id\"\n-        )\n-        checkout.user = customer\n+\n+        # Check if provided customer_id matches with the authenticated user and raise\n+        # error if it doesn't. This part can be removed when `customer_id` field is\n+        # removed.\n+        if customer_id:\n+            current_user_id = graphene.Node.to_global_id(\"User\", info.context.user.id)\n+            if current_user_id != customer_id:\n+                raise PermissionDenied()\n+\n+        checkout.user = info.context.user\n         checkout.save(update_fields=[\"user\", \"last_change\"])\n         return CheckoutCustomerAttach(checkout=checkout)\n \n@@ -435,11 +453,20 @@ class Meta:\n         error_type_class = CheckoutError\n         error_type_field = \"checkout_errors\"\n \n+    @classmethod\n+    def check_permissions(cls, context):\n+        return context.user.is_authenticated\n+\n     @classmethod\n     def perform_mutation(cls, _root, info, checkout_id):\n         checkout = cls.get_node_or_error(\n             info, checkout_id, only_type=Checkout, field=\"checkout_id\"\n         )\n+\n+        # Raise error if the current user doesn't own the checkout of the given ID.\n+        if checkout.user and checkout.user != info.context.user:\n+            raise PermissionDenied()\n+\n         checkout.user = None\n         checkout.save(update_fields=[\"user\", \"last_change\"])\n         return CheckoutCustomerDetach(checkout=checkout)"
        },
        {
          "filename": "saleor/graphql/schema.graphql",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2288,7 +2288,7 @@ type Mutation {\n   checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate\n   checkoutComplete(checkoutId: ID!, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete\n   checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate\n-  checkoutCustomerAttach(checkoutId: ID!, customerId: ID!): CheckoutCustomerAttach\n+  checkoutCustomerAttach(checkoutId: ID!, customerId: ID): CheckoutCustomerAttach\n   checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach\n   checkoutEmailUpdate(checkoutId: ID, email: String!): CheckoutEmailUpdate\n   checkoutLineDelete(checkoutId: ID!, lineId: ID): CheckoutLineDelete"
        },
        {
          "filename": "tests/api/test_checkout.py",
          "status": "modified",
          "additions": 28,
          "deletions": 5,
          "patch": "@@ -8,6 +8,7 @@\n from django.core.exceptions import ValidationError\n from prices import Money, TaxedMoney\n \n+from saleor.account.models import User\n from saleor.checkout import calculations\n from saleor.checkout.error_codes import CheckoutErrorCode\n from saleor.checkout.models import Checkout\n@@ -25,7 +26,7 @@\n from saleor.shipping import ShippingMethodType\n from saleor.shipping.models import ShippingMethod\n from saleor.warehouse.models import Stock\n-from tests.api.utils import get_graphql_content\n+from tests.api.utils import assert_no_permission, get_graphql_content\n \n \n @pytest.fixture\n@@ -851,7 +852,9 @@ def test_checkout_line_delete_by_zero_quantity(\n     mocked_update_shipping_method.assert_called_once_with(checkout, mock.ANY)\n \n \n-def test_checkout_customer_attach(user_api_client, checkout_with_item, customer_user):\n+def test_checkout_customer_attach(\n+    api_client, user_api_client, checkout_with_item, customer_user\n+):\n     checkout = checkout_with_item\n     assert checkout.user is None\n \n@@ -871,16 +874,26 @@ def test_checkout_customer_attach(user_api_client, checkout_with_item, customer_\n     \"\"\"\n     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)\n     customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n-\n     variables = {\"checkoutId\": checkout_id, \"customerId\": customer_id}\n+\n+    # Mutation should fail for unauthenticated customers\n+    response = api_client.post_graphql(query, variables)\n+    assert_no_permission(response)\n+\n+    # Mutation should succeed for authenticated customer\n     response = user_api_client.post_graphql(query, variables)\n     content = get_graphql_content(response)\n-\n     data = content[\"data\"][\"checkoutCustomerAttach\"]\n     assert not data[\"errors\"]\n     checkout.refresh_from_db()\n     assert checkout.user == customer_user\n \n+    # Mutation with ID of a different user should fail as well\n+    other_customer = User.objects.create_user(\"othercustomer@example.com\", \"password\")\n+    variables[\"customerId\"] = graphene.Node.to_global_id(\"User\", other_customer.pk)\n+    response = user_api_client.post_graphql(query, variables)\n+    assert_no_permission(response)\n+\n \n MUTATION_CHECKOUT_CUSTOMER_DETACH = \"\"\"\n     mutation checkoutCustomerDetach($checkoutId: ID!) {\n@@ -904,16 +917,26 @@ def test_checkout_customer_detach(user_api_client, checkout_with_item, customer_\n \n     checkout_id = graphene.Node.to_global_id(\"Checkout\", checkout.pk)\n     variables = {\"checkoutId\": checkout_id}\n+\n+    # Mutation should succeed if the user owns this checkout.\n     response = user_api_client.post_graphql(\n         MUTATION_CHECKOUT_CUSTOMER_DETACH, variables\n     )\n     content = get_graphql_content(response)\n-\n     data = content[\"data\"][\"checkoutCustomerDetach\"]\n     assert not data[\"errors\"]\n     checkout.refresh_from_db()\n     assert checkout.user is None\n \n+    # Mutation should fail when user calling it doesn't own the checkout.\n+    other_user = User.objects.create_user(\"othercustomer@example.com\", \"password\")\n+    checkout.user = other_user\n+    checkout.save()\n+    response = user_api_client.post_graphql(\n+        MUTATION_CHECKOUT_CUSTOMER_DETACH, variables\n+    )\n+    assert_no_permission(response)\n+\n \n MUTATION_CHECKOUT_SHIPPING_ADDRESS_UPDATE = \"\"\"\n     mutation checkoutShippingAddressUpdate("
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "486877e53e05c27b4691647d1e0e7cc0f47e91bf",
            "date": "2025-01-14T09:18:31Z",
            "author_login": "patrys"
          },
          {
            "sha": "23b8d28989445f33ed35363156a8b675eb610472",
            "date": "2025-01-13T12:06:01Z",
            "author_login": "patrys"
          },
          {
            "sha": "789e33510a4225f20a0ccc9634ff7b49bb9ca912",
            "date": "2025-01-13T14:36:25Z",
            "author_login": "korycins"
          },
          {
            "sha": "83efad25c0813b7b3fe2741781a263e22ff84e1a",
            "date": "2025-01-13T08:42:38Z",
            "author_login": "szczecha"
          },
          {
            "sha": "5f8b1cc4db2d54295193eb92d7b862164ce197ce",
            "date": "2025-01-10T13:13:49Z",
            "author_login": "korycins"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-306",
    "description": "An issue was discovered in Mirumee Saleor 2.x before 2.9.1. Incorrect access control in the checkoutCustomerAttach mutations allows attackers to attach their checkouts to any user ID and consequently leak user data (e.g., name, address, and previous orders of any other customer).",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2020-01-24T20:15:11.050",
    "last_modified": "2024-11-21T05:38:06.100",
    "fix_date": "2020-01-23T16:14:14Z"
  },
  "references": [
    {
      "url": "https://github.com/mirumee/saleor/commit/233b8890c60fa6d90daf99e4d90fea85867732c3",
      "source": "cve@mitre.org",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mirumee/saleor/releases/tag/2.9.1",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/mirumee/saleor/commit/233b8890c60fa6d90daf99e4d90fea85867732c3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/mirumee/saleor/releases/tag/2.9.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:00:37.487408",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "saleor",
    "owner": "mirumee",
    "created_at": "2013-02-12T16:46:39Z",
    "updated_at": "2025-01-14T09:18:44Z",
    "pushed_at": "2025-01-14T14:09:35Z",
    "size": 264902,
    "stars": 20990,
    "forks": 5549,
    "open_issues": 341,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.20"
    ],
    "languages": {
      "Python": 22045293,
      "HTML": 249642,
      "Dockerfile": 2521,
      "Shell": 439,
      "Makefile": 121
    },
    "commit_activity": {
      "total_commits_last_year": 715,
      "avg_commits_per_week": 13.75,
      "days_active_last_year": 208
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T14:09:55.406724"
  }
}