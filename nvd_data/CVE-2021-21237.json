{
  "cve_id": "CVE-2021-21237",
  "github_data": {
    "repository": "git-lfs/git-lfs",
    "fix_commit": "fc664697ed2c2081ee9633010de0a7f9debea72a",
    "related_commits": [
      "fc664697ed2c2081ee9633010de0a7f9debea72a",
      "fc664697ed2c2081ee9633010de0a7f9debea72a"
    ],
    "patch_url": "https://github.com/git-lfs/git-lfs/commit/fc664697ed2c2081ee9633010de0a7f9debea72a.patch",
    "fix_commit_details": {
      "sha": "fc664697ed2c2081ee9633010de0a7f9debea72a",
      "commit_date": "2021-01-13T18:00:18Z",
      "author": {
        "login": "bk2204",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-cx3w-xqmc-84g5",
        "length": 61,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 93,
        "additions": 80,
        "deletions": 13
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -1,5 +1,29 @@\n # Git LFS Changelog\n \n+## 2.13.2 (13 Jan 2020)\n+\n+This release introduces a security fix for Windows systems, which has been\n+assigned CVE-2021-21237.\n+\n+On Windows, if Git LFS operates on a malicious repository with a git.bat or\n+git.exe file in the current directory, that program is executed, permitting the\n+attacker to execute arbitrary code.  This security problem does not affect Unix\n+systems.  This is the same issue as CVE-2020-27955, but the fix for that issue\n+was incomplete and certain options can still cause the problem to occur.\n+\n+This occurs because on Windows, Go includes (and prefers) the current directory\n+when the name of a command run does not contain a directory separator.  This has\n+been solved by always using PATH to pre-resolve paths before handing them to Go.\n+\n+We would like to extend a special thanks to the following open-source\n+contributors:\n+\n+* @Ry0taK for reporting this to us responsibly\n+\n+### Bugs\n+\n+* Use subprocess for invoking all commands (@bk2204)\n+\n ## 2.13.1 (11 Dec 2020)\n \n This release fixes a bug in our build tooling that prevents our release process"
        },
        {
          "filename": "commands/commands.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -7,7 +7,6 @@ import (\n \t\"log\"\n \t\"net\"\n \t\"os\"\n-\t\"os/exec\"\n \t\"path/filepath\"\n \t\"strings\"\n \t\"sync\"\n@@ -282,7 +281,7 @@ func PipeMediaCommand(name string, args ...string) error {\n }\n \n func PipeCommand(name string, args ...string) error {\n-\tcmd := exec.Command(name, args...)\n+\tcmd := subprocess.ExecCommand(name, args...)\n \tcmd.Stdin = os.Stdin\n \tcmd.Stderr = os.Stderr\n \tcmd.Stdout = os.Stdout"
        },
        {
          "filename": "config/version.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -13,7 +13,7 @@ var (\n )\n \n const (\n-\tVersion = \"2.13.1\"\n+\tVersion = \"2.13.2\"\n )\n \n func init() {"
        },
        {
          "filename": "creds/creds.go",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -11,6 +11,7 @@ import (\n \n \t\"github.com/git-lfs/git-lfs/config\"\n \t\"github.com/git-lfs/git-lfs/errors\"\n+\t\"github.com/git-lfs/git-lfs/subprocess\"\n \t\"github.com/rubyist/tracerx\"\n )\n \n@@ -232,7 +233,7 @@ func (a *AskPassCredentialHelper) getFromProgram(valueType credValueType, u *url\n \n \t// 'cmd' will run the GIT_ASKPASS (or core.askpass) command prompting\n \t// for the desired valueType (`Username` or `Password`)\n-\tcmd := exec.Command(a.Program, a.args(fmt.Sprintf(\"%s for %q\", valueString, u))...)\n+\tcmd := subprocess.ExecCommand(a.Program, a.args(fmt.Sprintf(\"%s for %q\", valueString, u))...)\n \tcmd.Stderr = &err\n \tcmd.Stdout = &value\n \n@@ -292,7 +293,7 @@ func (h *commandCredentialHelper) Approve(creds Creds) error {\n \n func (h *commandCredentialHelper) exec(subcommand string, input Creds) (Creds, error) {\n \toutput := new(bytes.Buffer)\n-\tcmd := exec.Command(\"git\", \"credential\", subcommand)\n+\tcmd := subprocess.ExecCommand(\"git\", \"credential\", subcommand)\n \tcmd.Stdin = bufferCreds(input)\n \tcmd.Stdout = output\n \t/*"
        },
        {
          "filename": "debian/changelog",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -1,3 +1,9 @@\n+git-lfs (2.13.2) stable; urgency=low\n+\n+  * New upstream version\n+\n+ -- brian m. carlson <bk2204@github.com>  Wed, 13 Jan 2021 14:29:00 -0000\n+\n git-lfs (2.13.1) stable; urgency=low\n \n   * New upstream version"
        },
        {
          "filename": "lfs/extension.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -8,10 +8,10 @@ import (\n \t\"hash\"\n \t\"io\"\n \t\"os\"\n-\t\"os/exec\"\n \t\"strings\"\n \n \t\"github.com/git-lfs/git-lfs/config\"\n+\t\"github.com/git-lfs/git-lfs/subprocess\"\n )\n \n type pipeRequest struct {\n@@ -33,7 +33,7 @@ type pipeExtResult struct {\n }\n \n type extCommand struct {\n-\tcmd    *exec.Cmd\n+\tcmd    *subprocess.Cmd\n \tout    io.WriteCloser\n \terr    *bytes.Buffer\n \thasher hash.Hash\n@@ -75,7 +75,7 @@ func pipeExtensions(cfg *config.Configuration, request *pipeRequest) (response p\n \t\t\targ := strings.Replace(value, \"%f\", request.fileName, -1)\n \t\t\targs = append(args, arg)\n \t\t}\n-\t\tcmd := exec.Command(name, args...)\n+\t\tcmd := subprocess.ExecCommand(name, args...)\n \t\tec := &extCommand{cmd: cmd, result: &pipeExtResult{name: e.Name}}\n \t\textcmds = append(extcmds, ec)\n \t}"
        },
        {
          "filename": "lfshttp/ssh.go",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -4,7 +4,6 @@ import (\n \t\"bytes\"\n \t\"encoding/json\"\n \t\"fmt\"\n-\t\"os/exec\"\n \t\"path/filepath\"\n \t\"regexp\"\n \t\"strings\"\n@@ -83,7 +82,7 @@ func (c *sshAuthClient) Resolve(e Endpoint, method string) (sshAuthResponse, err\n \t}\n \n \texe, args := sshGetLFSExeAndArgs(c.os, c.git, e, method)\n-\tcmd := exec.Command(exe, args...)\n+\tcmd := subprocess.ExecCommand(exe, args...)\n \n \t// Save stdout and stderr in separate buffers\n \tvar outbuf, errbuf bytes.Buffer"
        },
        {
          "filename": "rpm/SPECS/git-lfs.spec",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,5 +1,5 @@\n Name:           git-lfs\n-Version:        2.13.1\n+Version:        2.13.2\n Release:        1%{?dist}\n Summary:        Git extension for versioning large files\n "
        },
        {
          "filename": "t/t-path.sh",
          "status": "modified",
          "additions": 38,
          "deletions": 0,
          "patch": "@@ -21,3 +21,41 @@ begin_test \"does not look in current directory for git\"\n   ! grep -q 'exploit' output.log\n )\n end_test\n+\n+begin_test \"does not look in current directory for git with credential helper\"\n+(\n+  set -e\n+\n+  reponame=\"$(basename \"$0\" \".sh\")-credentials\"\n+  setup_remote_repo \"$reponame\"\n+\n+  clone_repo \"$reponame\" credentials-1\n+  export PATH=\"$(echo \"$PATH\" | sed -e \"s/:.:/:/g\" -e \"s/::/:/g\")\"\n+\n+  printf \"#!/bin/sh\\necho exploit >&2\\ntouch exploit\\n\" > git\n+  chmod +x git || true\n+  printf \"echo exploit 1>&2\\r\\necho >exploit\" > git.bat\n+\n+  git lfs track \"*.dat\"\n+  printf abc > z.dat\n+  git add z.dat\n+  git add .gitattributes\n+  git add git git.bat\n+  git commit -m \"Add files\"\n+\n+  git push origin HEAD\n+  cd ..\n+\n+  unset GIT_ASKPASS SSH_ASKPASS\n+\n+  # This needs to succeed.  If it fails, that could be because our malicious\n+  # \"git\" is broken but got invoked anyway.\n+  GIT_LFS_SKIP_SMUDGE=1 clone_repo \"$reponame\" credentials-2\n+\n+  git lfs pull | tee output.log\n+\n+  ! grep -q 'exploit' output.log\n+  [ ! -f ../exploit ]\n+  [ ! -f exploit ]\n+)\n+end_test"
        },
        {
          "filename": "versioninfo.json",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -4,7 +4,7 @@\n \t\t\"FileVersion\": {\n \t\t\t\"Major\": 2,\n \t\t\t\"Minor\": 13,\n-\t\t\t\"Patch\": 1,\n+\t\t\t\"Patch\": 2,\n \t\t\t\"Build\": 0\n \t\t}\n \t},\n@@ -13,7 +13,7 @@\n \t\t\"FileDescription\": \"Git LFS\",\n \t\t\"LegalCopyright\": \"GitHub, Inc. and Git LFS contributors\",\n \t\t\"ProductName\": \"Git Large File Storage (LFS)\",\n-\t\t\"ProductVersion\": \"2.13.1\"\n+\t\t\"ProductVersion\": \"2.13.2\"\n \t},\n \t\"IconPath\": \"script/windows-installer/git-lfs-logo.ico\"\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 9,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e4df48288edb0fae2f985fd88ad847dd98e532ec",
            "date": "2025-01-13T05:56:18Z",
            "author_login": "chrisd8088"
          },
          {
            "sha": "2528e151d5f566bd71748620845e74fda135f62e",
            "date": "2025-01-12T07:08:18Z",
            "author_login": "m3ka24"
          },
          {
            "sha": "4c817889b5de2d0d4e48c014adc27bee41b042de",
            "date": "2025-01-02T19:45:44Z",
            "author_login": "chrisd8088"
          },
          {
            "sha": "626de10ef008ec77bbe7a0af20be3f05f778f329",
            "date": "2024-12-22T02:29:31Z",
            "author_login": "fedirz"
          },
          {
            "sha": "38d645f063a9c0f157763175df0ecae8653e6eb3",
            "date": "2024-12-20T01:17:03Z",
            "author_login": "chrisd8088"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-426",
    "description": "Git LFS is a command line extension for managing large files with Git. On Windows, if Git LFS operates on a malicious repository with a git.bat or git.exe file in the current directory, that program would be executed, permitting the attacker to execute arbitrary code. This does not affect Unix systems. This is the result of an incomplete fix for CVE-2020-27955. This issue occurs because on Windows, Go includes (and prefers) the current directory when the name of a command run does not contain a directory separator. Other than avoiding untrusted repositories or using a different operating system, there is no workaround. This is fixed in v2.13.2.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-01-15T18:15:15.980",
    "last_modified": "2024-11-21T05:47:50.287",
    "fix_date": "2021-01-13T18:00:18Z"
  },
  "references": [
    {
      "url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-27955",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/git-lfs/git-lfs/commit/fc664697ed2c2081ee9633010de0a7f9debea72a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/git-lfs/git-lfs/releases/tag/v2.13.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/git-lfs/git-lfs/security/advisories/GHSA-cx3w-xqmc-84g5",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-27955",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/git-lfs/git-lfs/commit/fc664697ed2c2081ee9633010de0a7f9debea72a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/git-lfs/git-lfs/releases/tag/v2.13.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/git-lfs/git-lfs/security/advisories/GHSA-cx3w-xqmc-84g5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:13.151371",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "git-lfs",
    "owner": "git-lfs",
    "created_at": "2013-09-22T22:03:28Z",
    "updated_at": "2025-01-14T09:18:16Z",
    "pushed_at": "2025-01-13T05:56:19Z",
    "size": 20047,
    "stars": 13159,
    "forks": 2060,
    "open_issues": 415,
    "watchers": 13159,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 1427285,
      "Shell": 827387,
      "Makefile": 29442,
      "Ruby": 14261,
      "Inno Setup": 9061,
      "Batchfile": 107
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:42:06.765061"
  }
}