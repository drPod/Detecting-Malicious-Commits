{
  "cve_id": "CVE-2021-21242",
  "github_data": {
    "repository": "theonedev/onedev",
    "fix_commit": "f864053176c08f59ef2d97fea192ceca46a4d9be",
    "related_commits": [
      "f864053176c08f59ef2d97fea192ceca46a4d9be",
      "f864053176c08f59ef2d97fea192ceca46a4d9be"
    ],
    "patch_url": "https://github.com/theonedev/onedev/commit/f864053176c08f59ef2d97fea192ceca46a4d9be.patch",
    "fix_commit_details": {
      "sha": "f864053176c08f59ef2d97fea192ceca46a4d9be",
      "commit_date": "2020-11-18T05:06:37Z",
      "author": {
        "login": "robinshine",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Do not use deserialized AttachmentSupport from client side to avoid security vulnerabilities",
        "length": 92,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 146,
        "additions": 62,
        "deletions": 84
      },
      "files": [
        {
          "filename": "server-core/src/main/java/io/onedev/server/CoreModule.java",
          "status": "modified",
          "additions": 0,
          "deletions": 3,
          "patch": "@@ -272,7 +272,6 @@\n import io.onedev.server.web.avatar.AvatarManager;\n import io.onedev.server.web.avatar.DefaultAvatarManager;\n import io.onedev.server.web.component.diff.DiffRenderer;\n-import io.onedev.server.web.component.markdown.AttachmentUploadServlet;\n import io.onedev.server.web.component.markdown.SourcePositionTrackExtension;\n import io.onedev.server.web.component.markdown.emoji.EmojiExtension;\n import io.onedev.server.web.component.taskbutton.TaskButton;\n@@ -557,8 +556,6 @@ private void configureWeb() {\n \t\tbind(EditSupportRegistry.class).to(DefaultEditSupportRegistry.class);\n \t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\n \n-\t\tbind(AttachmentUploadServlet.class);\n-\t\t\n \t\tcontributeFromPackage(EditSupport.class, EditSupport.class);\n \t\t\n \t\tbind(org.apache.wicket.protocol.http.WebApplication.class).to(WebApplication.class);"
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/web/BaseUrlMapper.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -93,6 +93,7 @@\n import io.onedev.server.web.page.project.setting.build.ActionAuthorizationsPage;\n import io.onedev.server.web.page.project.setting.build.BuildPreservationsPage;\n import io.onedev.server.web.page.project.setting.build.JobSecretsPage;\n+import io.onedev.server.web.page.project.setting.general.GeneralProjectSettingPage;\n import io.onedev.server.web.page.project.setting.tagprotection.TagProtectionsPage;\n import io.onedev.server.web.page.project.setting.webhook.WebHooksPage;\n import io.onedev.server.web.page.project.stats.ProjectContribsPage;\n@@ -260,7 +261,7 @@ private void addProjectPages() {\n \t\tadd(new DynamicPathPageMapper(\"projects/${project}/builds/${build}/artifacts\", BuildArtifactsPage.class));\n \t\tadd(new DynamicPathPageMapper(\"projects/${project}/builds/${build}/invalid\", InvalidBuildPage.class));\n \t\t\n-\t\tadd(new DynamicPathPageMapper(\"projects/${project}/settings/general\", GeneralSecuritySettingPage.class));\n+\t\tadd(new DynamicPathPageMapper(\"projects/${project}/settings/general\", GeneralProjectSettingPage.class));\n \t\tadd(new DynamicPathPageMapper(\"projects/${project}/settings/authorizations\", ProjectAuthorizationsPage.class));\n \t\tadd(new DynamicPathPageMapper(\"projects/${project}/settings/avatar-edit\", AvatarEditPage.class));\n \t\tadd(new DynamicPathPageMapper(\"projects/${project}/settings/branch-protection\", BranchProtectionsPage.class));"
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/web/component/markdown/AttachmentUploadServlet.java",
          "status": "removed",
          "additions": 0,
          "deletions": 48,
          "patch": "@@ -1,48 +0,0 @@\n-package io.onedev.server.web.component.markdown;\n-\n-import java.io.IOException;\n-import java.net.URLDecoder;\n-import java.net.URLEncoder;\n-import java.nio.charset.StandardCharsets;\n-\n-import javax.inject.Singleton;\n-import javax.servlet.ServletException;\n-import javax.servlet.http.HttpServlet;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import org.apache.commons.lang3.SerializationUtils;\n-import org.apache.wicket.util.crypt.Base64;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import io.onedev.server.persistence.annotation.Sessional;\n-\n-@SuppressWarnings(\"serial\")\n-@Singleton\n-public class AttachmentUploadServlet extends HttpServlet {\n-\n-\tprivate static final Logger logger = LoggerFactory.getLogger(AttachmentUploadServlet.class);\n-\t\n-\t@Sessional\n-\t@Override\n-\tprotected void doPost(HttpServletRequest request, HttpServletResponse response)\n-\t\t\tthrows ServletException, IOException {\n-\t\tString fileName = URLDecoder.decode(request.getHeader(\"File-Name\"), StandardCharsets.UTF_8.name());\n-\t\tAttachmentSupport attachmentSuppport = (AttachmentSupport) SerializationUtils\n-\t\t\t\t.deserialize(Base64.decodeBase64(request.getHeader(\"Attachment-Support\")));\n-\t\ttry {\n-\t\t\tString attachmentName = attachmentSuppport.saveAttachment(fileName, request.getInputStream());\n-\t\t\tresponse.getWriter().print(URLEncoder.encode(attachmentName, StandardCharsets.UTF_8.name()));\n-\t\t\tresponse.setStatus(HttpServletResponse.SC_OK);\n-\t\t} catch (Exception e) {\n-\t\t\tlogger.error(\"Error uploading attachment.\", e);\n-\t\t\tif (e.getMessage() != null)\n-\t\t\t\tresponse.getWriter().print(e.getMessage());\n-\t\t\telse\n-\t\t\t\tresponse.getWriter().print(\"Internal server error\");\n-\t\t\tresponse.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n-\t\t}\n-\t}\n-\t\n-}"
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/web/component/markdown/MarkdownEditor.java",
          "status": "modified",
          "additions": 46,
          "deletions": 18,
          "patch": "@@ -2,9 +2,11 @@\n \n import static org.apache.wicket.ajax.attributes.CallbackParameter.explicit;\n \n+import java.io.IOException;\n import java.io.Serializable;\n import java.io.UnsupportedEncodingException;\n import java.net.URLDecoder;\n+import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.HashMap;\n@@ -13,8 +15,9 @@\n \n import javax.annotation.Nullable;\n import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n \n-import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.text.StringEscapeUtils;\n import org.apache.wicket.AttributeModifier;\n@@ -41,7 +44,8 @@\n import org.apache.wicket.request.http.WebRequest;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.request.resource.PackageResourceReference;\n-import org.apache.wicket.util.crypt.Base64;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.unbescape.javascript.JavaScriptEscape;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n@@ -72,6 +76,8 @@ public class MarkdownEditor extends FormComponentPanel<String> {\n \n \tprotected static final int ATWHO_LIMIT = 10;\n \t\n+\tprivate static final Logger logger = LoggerFactory.getLogger(MarkdownEditor.class);\n+\t\n \tprivate final boolean compactMode;\n \t\n \tprivate final boolean initialSplit;\n@@ -82,7 +88,9 @@ public class MarkdownEditor extends FormComponentPanel<String> {\n \t\n \tprivate TextArea<String> input;\n \n-\tprivate AbstractPostAjaxBehavior ajaxBehavior;\n+\tprivate AbstractPostAjaxBehavior actionBehavior;\n+\t\n+\tprivate AbstractPostAjaxBehavior attachmentUploadBehavior;\n \t\n \t/**\n \t * @param id \n@@ -251,7 +259,7 @@ public void renderHead(IHeaderResponse response) {\n \t\t\n \t\tcontainer.add(new WebMarkupContainer(\"canAttachFile\").setVisible(getAttachmentSupport()!=null));\n \t\t\n-\t\tcontainer.add(ajaxBehavior = new AbstractPostAjaxBehavior() {\n+\t\tcontainer.add(actionBehavior = new AbstractPostAjaxBehavior() {\n \n \t\t\t@Override\n \t\t\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes) {\n@@ -452,13 +460,42 @@ protected void onClosed() {\n \t\t\t\t\tString replaceMessage = params.getParameterValue(\"param2\").toString();\n \t\t\t\t\tString url = getAttachmentSupport().getAttachmentUrl(name);\n \t\t\t\t\tinsertUrl(target, isWebSafeImage(name), url, name, replaceMessage);\n+\t\t\t\t\t\n \t\t\t\t\tbreak;\n \t\t\t\tdefault:\n \t\t\t\t\tthrow new IllegalStateException(\"Unknown action: \" + action);\n \t\t\t\t}\t\t\n \t\t\t}\n \t\t\t\n \t\t});\n+\t\t\n+\t\tcontainer.add(attachmentUploadBehavior = new AbstractPostAjaxBehavior() {\n+\t\t\t\n+\t\t\t@Override\n+\t\t\tprotected void respond(AjaxRequestTarget target) {\n+\t\t\t\tPreconditions.checkNotNull(getAttachmentSupport(), \"Unexpected attachment upload request\");\n+\t\t\t\tHttpServletRequest request = (HttpServletRequest) RequestCycle.get().getRequest().getContainerRequest();\n+\t\t\t\tHttpServletResponse response = (HttpServletResponse) RequestCycle.get().getResponse().getContainerResponse();\n+\t\t\t\ttry {\n+\t\t\t\t\tString fileName = URLDecoder.decode(request.getHeader(\"File-Name\"), StandardCharsets.UTF_8.name());\n+\t\t\t\t\tString attachmentName = getAttachmentSupport().saveAttachment(fileName, request.getInputStream());\n+\t\t\t\t\tresponse.getWriter().print(URLEncoder.encode(attachmentName, StandardCharsets.UTF_8.name()));\n+\t\t\t\t\tresponse.setStatus(HttpServletResponse.SC_OK);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tlogger.error(\"Error uploading attachment.\", e);\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tif (e.getMessage() != null)\n+\t\t\t\t\t\t\tresponse.getWriter().print(e.getMessage());\n+\t\t\t\t\t\telse\n+\t\t\t\t\t\t\tresponse.getWriter().print(\"Internal server error\");\n+\t\t\t\t\t} catch (IOException e2) {\n+\t\t\t\t\t\tthrow new RuntimeException(e2);\n+\t\t\t\t\t}\n+\t\t\t\t\tresponse.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t\n+\t\t});\n \t}\n \t\n \t@Override\n@@ -476,18 +513,9 @@ public void renderHead(IHeaderResponse response) {\n \t\tsuper.renderHead(response);\n \t\tresponse.render(JavaScriptHeaderItem.forReference(new MarkdownResourceReference()));\n \t\t\n-\t\tString encodedAttachmentSupport;\n-\t\tif (getAttachmentSupport() != null) {\n-\t\t\tencodedAttachmentSupport = Base64.encodeBase64String(SerializationUtils.serialize(getAttachmentSupport()));\n-\t\t\tencodedAttachmentSupport = StringUtils.deleteWhitespace(encodedAttachmentSupport);\n-\t\t\tencodedAttachmentSupport = StringEscapeUtils.escapeEcmaScript(encodedAttachmentSupport);\n-\t\t\tencodedAttachmentSupport = \"'\" + encodedAttachmentSupport + \"'\";\n-\t\t} else {\n-\t\t\tencodedAttachmentSupport = \"undefined\";\n-\t\t}\n-\t\t\n-\t\tString callback = ajaxBehavior.getCallbackFunction(explicit(\"action\"), explicit(\"param1\"), explicit(\"param2\"), \n+\t\tString actionCallback = actionBehavior.getCallbackFunction(explicit(\"action\"), explicit(\"param1\"), explicit(\"param2\"), \n \t\t\t\texplicit(\"param3\")).toString();\n+\t\tString attachmentUploadUrl = attachmentUploadBehavior.getCallbackUrl().toString();\n \t\t\n \t\tString autosaveKey = getAutosaveKey();\n \t\tif (autosaveKey != null)\n@@ -497,10 +525,10 @@ public void renderHead(IHeaderResponse response) {\n \t\t\n \t\tString script = String.format(\"onedev.server.markdown.onDomReady('%s', %s, %d, %s, %d, %b, %b, '%s', %s);\", \n \t\t\t\tcontainer.getMarkupId(), \n-\t\t\t\tcallback, \n+\t\t\t\tactionCallback, \n \t\t\t\tATWHO_LIMIT, \n-\t\t\t\tencodedAttachmentSupport, \n-\t\t\t\tgetAttachmentSupport()!=null?getAttachmentSupport().getAttachmentMaxSize():0,\n+\t\t\t\tgetAttachmentSupport()!=null? \"'\" + attachmentUploadUrl + \"'\": \"undefined\", \n+\t\t\t\tgetAttachmentSupport()!=null? getAttachmentSupport().getAttachmentMaxSize(): 0,\n \t\t\t\tgetUserMentionSupport() != null,\n \t\t\t\tgetReferenceSupport() != null, \n \t\t\t\tJavaScriptEscape.escapeJavaScript(ProjectNameValidator.PATTERN.pattern()),"
        },
        {
          "filename": "server-core/src/main/java/io/onedev/server/web/component/markdown/markdown.js",
          "status": "modified",
          "additions": 13,
          "deletions": 6,
          "patch": "@@ -14,7 +14,7 @@ onedev.server.markdown = {\n \t\t    $input[0].dispatchEvent(evt);\n \t\t}\n \t},\n-\tonDomReady: function(containerId, callback, atWhoLimit, attachmentSupport, \n+\tonDomReady: function(containerId, callback, atWhoLimit, attachmentUploadUrl, \n \t\t\tattachmentMaxSize, canMentionUser, canReferenceEntity, \n \t\t\tprojectNamePattern, autosaveKey) {\n \t\tvar $container = $(\"#\" + containerId);\n@@ -417,7 +417,7 @@ onedev.server.markdown = {\n \t\t    });\t\t\n \t    }\n \t    \n-\t    if (attachmentSupport) {\n+\t    if (attachmentUploadUrl) {\n \t    \tvar inputEl = $input[0];\n \t    \t\n \t\t\tinputEl.addEventListener(\"paste\", function(e) {\n@@ -482,20 +482,27 @@ onedev.server.markdown = {\n \t\t\t\t\t}\n \t\t\t\t\t\n \t\t\t\t\txhr.onload = function() {\n+\t\t\t\t\t\tvar response = xhr.responseText;\n+\t\t\t\t\t\tvar index = response.indexOf(\"<?xml\");\n+\t\t\t\t\t\tif (index != -1)\n+\t\t\t\t\t\t\tresponse = response.substring(0, index);\n \t\t\t\t\t\tif (xhr.status == 200) { \n-\t\t\t\t\t\t\tcallback(\"insertUrl\", xhr.responseText, xhr.replaceMessage);\n+\t\t\t\t\t\t\tcallback(\"insertUrl\", response, xhr.replaceMessage);\n \t\t\t\t\t\t} else { \n \t\t\t\t\t\t\tonedev.server.markdown.updateUploadMessage($input, \n-\t\t\t\t\t\t\t\t\t\"!!\" + xhr.responseText + \"!!\", xhr.replaceMessage);\n+\t\t\t\t\t\t\t\t\t\"!!\" + response + \"!!\", xhr.replaceMessage);\n \t\t\t\t\t\t}\n \t\t\t\t\t};\n \t\t\t\t\txhr.onerror = function() {\n \t\t\t\t\t\tonedev.server.markdown.updateUploadMessage($input, \n \t\t\t\t\t\t\t\t\"!!Unable to connect to server!!\", xhr.replaceMessage);\n \t\t\t\t\t};\n-\t\t\t\t\txhr.open(\"POST\", \"/attachment_upload\", true);\n+\t\t\t\t\t\n+\t\t\t\t\txhr.open(\"POST\", attachmentUploadUrl, true);\n \t\t\t\t\txhr.setRequestHeader(\"File-Name\", encodeURIComponent(file.name));\n-\t\t\t\t\txhr.setRequestHeader(\"Attachment-Support\", attachmentSupport);\n+\t\t\t\t\txhr.setRequestHeader(\"Wicket-Ajax\", \"true\");\n+\t\t\t\t\txhr.setRequestHeader(\"Wicket-Ajax-BaseURL\", Wicket.Ajax.baseUrl);\n+\t\t\t\t\t\n \t\t\t\t\txhr.send(file);\n \t\t\t\t}\n \t\t\t}"
        },
        {
          "filename": "server-product/src/main/java/io/onedev/server/product/ProductServletConfigurator.java",
          "status": "modified",
          "additions": 1,
          "deletions": 8,
          "patch": "@@ -26,7 +26,6 @@\n import io.onedev.server.util.jetty.FileAssetServlet;\n import io.onedev.server.util.jetty.ServletConfigurator;\n import io.onedev.server.web.asset.icon.IconScope;\n-import io.onedev.server.web.component.markdown.AttachmentUploadServlet;\n import io.onedev.server.web.img.ImageScope;\n import io.onedev.server.web.websocket.WebSocketManager;\n \n@@ -44,17 +43,14 @@ public class ProductServletConfigurator implements ServletConfigurator {\n \t\n \tprivate final WicketServlet wicketServlet;\n \t\n-\tprivate final AttachmentUploadServlet attachmentUploadServlet;\n-\t\n \tprivate final ServletContainer jerseyServlet;\n \n \tprivate final WebSocketManager webSocketManager;\n \t\n \t@Inject\n \tpublic ProductServletConfigurator(ServerConfig serverConfig, ShiroFilter shiroFilter, GitFilter gitFilter, \n \t\t\tGitPreReceiveCallback preReceiveServlet, GitPostReceiveCallback postReceiveServlet, \n-\t\t\tWicketServlet wicketServlet, WebSocketManager webSocketManager, \n-\t\t\tAttachmentUploadServlet attachmentUploadServlet, ServletContainer jerseyServlet) {\n+\t\t\tWicketServlet wicketServlet, WebSocketManager webSocketManager, ServletContainer jerseyServlet) {\n \t\tthis.serverConfig = serverConfig;\n \t\tthis.shiroFilter = shiroFilter;\n         this.gitFilter = gitFilter;\n@@ -63,7 +59,6 @@ public ProductServletConfigurator(ServerConfig serverConfig, ShiroFilter shiroFi\n \t\tthis.wicketServlet = wicketServlet;\n \t\tthis.webSocketManager = webSocketManager;\n \t\tthis.jerseyServlet = jerseyServlet;\n-\t\tthis.attachmentUploadServlet = attachmentUploadServlet;\n \t}\n \t\n \t@Override\n@@ -88,8 +83,6 @@ public void configure(ServletContextHandler context) {\n \t\t */\n \t\tcontext.addServlet(new ServletHolder(wicketServlet), \"/\");\n \t\t\n-\t\tcontext.addServlet(new ServletHolder(attachmentUploadServlet), \"/attachment_upload\");\n-\t\t\n \t\tcontext.addServlet(new ServletHolder(new ClasspathAssetServlet(ImageScope.class)), \"/img/*\");\n \t\tcontext.addServlet(new ServletHolder(new ClasspathAssetServlet(IconScope.class)), \"/icon/*\");\n \t\t"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "10e2c31d03935064a014dfb1464fa7bc146be9e0",
            "date": "2025-01-11T23:54:45Z",
            "author_login": "robinshine"
          },
          {
            "sha": "715386eb735489c08616f9e1c3dc56f58a5457c3",
            "date": "2025-01-11T01:12:03Z",
            "author_login": "robinshine"
          },
          {
            "sha": "be37d8fc32b9c3c4d7b11d3af8051be8911ee390",
            "date": "2025-01-09T14:35:55Z",
            "author_login": "robinshine"
          },
          {
            "sha": "f61d99124dd571668a8836354672903717ced5ca",
            "date": "2025-01-06T03:25:54Z",
            "author_login": "sususweet"
          },
          {
            "sha": "4c37f0dd4e0336e64f22fa04929d67188ee70bd4",
            "date": "2025-01-06T02:48:57Z",
            "author_login": "sususweet"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 10.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-74",
    "description": "OneDev is an all-in-one devops platform. In OneDev before version 4.0.3, there is a critical vulnerability which can lead to pre-auth remote code execution. AttachmentUploadServlet deserializes untrusted data from the `Attachment-Support` header. This Servlet does not enforce any authentication or authorization checks. This issue may lead to pre-auth remote code execution. This issue was fixed in 4.0.3 by removing AttachmentUploadServlet and not using deserialization",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-01-15T21:15:13.227",
    "last_modified": "2024-11-21T05:47:50.890",
    "fix_date": "2020-11-18T05:06:37Z"
  },
  "references": [
    {
      "url": "https://github.com/theonedev/onedev/commit/f864053176c08f59ef2d97fea192ceca46a4d9be",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/theonedev/onedev/security/advisories/GHSA-5q3q-f373-2jv8",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/theonedev/onedev/commit/f864053176c08f59ef2d97fea192ceca46a4d9be",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/theonedev/onedev/security/advisories/GHSA-5q3q-f373-2jv8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:13.151825",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "onedev",
    "owner": "theonedev",
    "created_at": "2018-11-06T02:57:01Z",
    "updated_at": "2025-01-14T10:30:38Z",
    "pushed_at": "2025-01-11T23:54:59Z",
    "size": 226316,
    "stars": 13579,
    "forks": 872,
    "open_issues": 0,
    "watchers": 13579,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Java": 11067283,
      "JavaScript": 730260,
      "HTML": 381307,
      "CSS": 180682,
      "Shell": 116784,
      "ANTLR": 46591,
      "Smarty": 17174,
      "Python": 5761,
      "Mustache": 3983,
      "Dockerfile": 125
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:48:17.966345"
  }
}