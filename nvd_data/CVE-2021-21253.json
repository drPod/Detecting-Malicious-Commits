{
  "cve_id": "CVE-2021-21253",
  "github_data": {
    "repository": "dbijaya/OnlineVotingSystem",
    "fix_commit": "0181cb0272857696c8eb3e44fcf6cb014ff90f09",
    "related_commits": [
      "0181cb0272857696c8eb3e44fcf6cb014ff90f09",
      "0181cb0272857696c8eb3e44fcf6cb014ff90f09"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "0181cb0272857696c8eb3e44fcf6cb014ff90f09",
      "commit_date": "2021-01-10T15:05:50Z",
      "author": {
        "login": "luchua-bc",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add a salt to SHA-256 hash",
        "length": 26,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 107,
        "additions": 74,
        "deletions": 33
      },
      "files": [
        {
          "filename": "src/com/bijay/onlinevotingsystem/controller/AdminLoginController.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -18,7 +18,6 @@\n public class AdminLoginController extends HttpServlet {\n \tprivate static final long serialVersionUID = 1L;\n \tAdminDao adminDao = new AdminDaoImpl();\n-\tSHA256 sha = new SHA256();\n \n \tprotected void doGet(HttpServletRequest request, HttpServletResponse response)\n \t\t\tthrows ServletException, IOException {\n@@ -36,7 +35,7 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t\t// to get values from the login page\n \t\tString userName = request.getParameter(\"aname\");\n-\t\tString password = sha.getSHA(request.getParameter(\"pass\"));\n+\t\tString password = request.getParameter(\"pass\");\n \t\t// String password = request.getParameter(\"pass\");\n \t\tString rememberMe = request.getParameter(\"remember-me\");\n \n@@ -72,4 +71,4 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \t\t\trd.include(request, response);\n \t\t}\n \t}\n-}\n\\ No newline at end of file\n+}"
        },
        {
          "filename": "src/com/bijay/onlinevotingsystem/controller/SHA256.java",
          "status": "modified",
          "additions": 59,
          "deletions": 20,
          "patch": "@@ -1,37 +1,76 @@\n package com.bijay.onlinevotingsystem.controller;\n \n-import java.math.BigInteger;\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.util.Base64;\n \n public class SHA256 {\n+\tprivate static final String SSHA_PREFIX = \"{SSHA}\";\n+\tprivate static final int SSHA_256_LENGTH = 32; // SHA-256 is 32 bytes long\n+\tprivate static final int SALT_LENGTH = 16; // Use a 16 byte salt\n \n \tpublic String getSHA(String password) {\n-\n \t\ttry {\n-\t\t\t// Static getInstance method is called with hashing SHA\n-\t\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n-\n-\t\t\t// digest() method called\n-\t\t\t// to calculate message digest of an input\n-\t\t\t// and return array of byte\n-\t\t\tbyte[] messageDigest = md.digest(password.getBytes());\n-\n-\t\t\t// Convert byte array into signum representation\n-\t\t\tBigInteger no = new BigInteger(1, messageDigest);\n-\n-\t\t\t// Convert message digest into hex value\n-\t\t\tString hashPass = no.toString(16);\n-\n-\t\t\twhile (hashPass.length() < 32) {\n-\t\t\t\thashPass = \"0\" + hashPass;\n-\t\t\t}\n-\t\t\treturn hashPass;\n+\t\t\tbyte[] salt = getSalt();\n+\t\t\tString cipher = getCipher(password, salt);\n+\t\t\t\n+\t\t\treturn cipher;\n \n \t\t\t// For specifying wrong message digest algorithms\n \t\t} catch (NoSuchAlgorithmException e) {\n \t\t\te.printStackTrace();\n \t\t\treturn null;\n \t\t}\n \t}\n+\n+\tpublic static boolean validatePassword(String password, String cipherText) {\n+\t\tboolean isValid = false;\n+\t\ttry {\n+\t\t\tString cipher = cipherText.substring(SSHA_PREFIX.length());\n+\t\t\n+\t\t\tbyte[] cipherBytes = Base64.getDecoder().decode(cipher.getBytes());\n+\t\t\tbyte[] salt = new byte[SALT_LENGTH];\n+\t\t\tSystem.arraycopy(cipherBytes, SSHA_256_LENGTH, salt, 0, SALT_LENGTH);\n+\n+\t\t\tString result = getCipher(password, salt);\n+\t\t\t//Compare the newly hashed password taking the same salt with the input hash\n+\t\t\tisValid = result.equals(cipherText);\n+\t\t} catch (NoSuchAlgorithmException e) {\n+\t\t\te.printStackTrace();\n+\t\t}\n+\t\treturn isValid;\n+\t}\n+\t\n+\tprivate static byte[] getSalt() throws NoSuchAlgorithmException {\n+\t\tSecureRandom random = new SecureRandom();\n+\t\tbyte[] salt = new byte[SALT_LENGTH];\n+\t\trandom.nextBytes(salt);\n+\t\treturn salt;\n+\t}\n+\n+\tprivate static String getCipher(String password, byte[] salt) throws NoSuchAlgorithmException {\n+\t\t// Static getInstance method is called with hashing SHA\n+\t\tMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n+\t\tmd.update(salt);\n+\t\n+\t\tbyte[] passBytes = password.getBytes();\n+\t\tbyte[] allBytes = new byte[passBytes.length + SALT_LENGTH];\n+\t\tSystem.arraycopy(passBytes, 0, allBytes, 0, passBytes.length);\n+\t\tSystem.arraycopy(salt, 0, allBytes, passBytes.length, SALT_LENGTH);\n+\t\n+\t\t\t\n+\t\tbyte[] cipherBytes = new byte[SSHA_256_LENGTH + SALT_LENGTH];\n+\t\t\t\n+\t\t// digest() method called\n+\t\t// to calculate message digest of an input\n+\t\t// and return array of byte\n+\t\tbyte[] messageDigest = md.digest(allBytes);\n+\t\n+\t\tSystem.arraycopy(messageDigest, 0, cipherBytes, 0, SSHA_256_LENGTH);\n+\t\tSystem.arraycopy(salt, 0, cipherBytes, SSHA_256_LENGTH, SALT_LENGTH);\n+\t\t\n+\t\tString result = SSHA_PREFIX + Base64.getEncoder().encodeToString(cipherBytes);\n+\t\treturn result;\n+\t}\n }"
        },
        {
          "filename": "src/com/bijay/onlinevotingsystem/controller/VoterLoginController.java",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -21,7 +21,6 @@\n public class VoterLoginController extends HttpServlet {\n \tprivate static final long serialVersionUID = 1L;\n \tVoterDao voterDao = new VoterDaoImpl();\n-\tSHA256 sha = new SHA256();\n \n \tprivate String host;\n \tprivate String port;\n@@ -76,7 +75,7 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \t\totp = r.nextInt(max - min) + min;\n \n \t\tString userName = request.getParameter(\"uname\");\n-\t\tString password = sha.getSHA(request.getParameter(\"pass\"));\n+\t\tString password = request.getParameter(\"pass\");\n \t\tString vemail = request.getParameter(\"vmail\");\n \n \t\tString recipient = vemail;\n@@ -119,4 +118,4 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \t\t\t */\n \t\t}\n \t}\n-}\n\\ No newline at end of file\n+}"
        },
        {
          "filename": "src/com/bijay/onlinevotingsystem/dao/AdminDaoImpl.java",
          "status": "modified",
          "additions": 6,
          "deletions": 3,
          "patch": "@@ -6,6 +6,9 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import javax.crypto.Cipher;\n+\n+import com.bijay.onlinevotingsystem.controller.SHA256;\n import com.bijay.onlinevotingsystem.dto.Admin;\n import com.bijay.onlinevotingsystem.util.DbUtil;\n \n@@ -98,14 +101,14 @@ public void updateAdminInfo(Admin admin) {\n \t@Override\n \tpublic boolean loginValidate(String userName, String password) {\n \n-\t\tString sql = \"select * from admin_table where admin_name=? and password=?\";\n+\t\tString sql = \"select * from admin_table where admin_name=?\";\n \t\ttry {\n \t\t\tps=DbUtil.getConnection().prepareStatement(sql);\n \t\t\tps.setString(1, userName);\n-\t\t\tps.setString(2,password);\n \t\t\tResultSet rs =ps.executeQuery();\n \t\t\tif (rs.next()) {\n-\t\t\t\treturn true;\n+\t\t\t\tString cipherText = rs.getString(\"password\");\n+\t\t\t\treturn SHA256.validatePassword(password, cipherText);\n \t\t\t}\n \t\t} catch (SQLException | ClassNotFoundException e) {\n \t\t\te.printStackTrace();"
        },
        {
          "filename": "src/com/bijay/onlinevotingsystem/dao/VoterDaoImpl.java",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -7,6 +7,7 @@\n import java.util.List;\n import java.sql.Date;\n \n+import com.bijay.onlinevotingsystem.controller.SHA256;\n import com.bijay.onlinevotingsystem.dto.Voter;\n import com.bijay.onlinevotingsystem.util.DbUtil;\n \n@@ -80,15 +81,15 @@ public void deleteVoterInfo(int id) {\n \n \t@Override\n \tpublic boolean loginValidate(String userName, String password, String email) {\n-\t\tString sql = \"select * from voter_table where voter_name=? and password=? and email=?\";\n+\t\tString sql = \"select * from voter_table where voter_name=? and email=?\";\n \t\ttry {\n \t\t\tps = DbUtil.getConnection().prepareStatement(sql);\n \t\t\tps.setString(1, userName);\n-\t\t\tps.setString(2, password);\n-\t\t\tps.setString(3, email);\n+\t\t\tps.setString(2, email);\n \t\t\tResultSet rs = ps.executeQuery();\n \t\t\tif (rs.next()) {\n-\t\t\t\treturn true;\n+\t\t\t\tString cipherText = rs.getString(\"password\");\n+\t\t\t\treturn SHA256.validatePassword(password, cipherText);\n \t\t\t}\n \t\t} catch (ClassNotFoundException | SQLException e) {\n \t\t\te.printStackTrace();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "117405d243e34559cc41a80c537b357f5281a8a4",
            "date": "2021-09-07T03:58:19Z",
            "author_login": "bijaythapaa"
          },
          {
            "sha": "7dda9d3abe913112dcfc0ac9a464cb4bc32fcbe5",
            "date": "2021-01-17T12:05:25Z",
            "author_login": "bijaythapaa"
          },
          {
            "sha": "bd4e6bcaa662803e749c72844f53f41c0d04e031",
            "date": "2021-01-10T15:35:14Z",
            "author_login": "luchua-bc"
          },
          {
            "sha": "0181cb0272857696c8eb3e44fcf6cb014ff90f09",
            "date": "2021-01-10T15:05:50Z",
            "author_login": "luchua-bc"
          },
          {
            "sha": "2f1223545c611f7cfa6e32957995b5aff5d1204d",
            "date": "2021-01-05T15:29:26Z",
            "author_login": "bijaythapaa"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-759",
    "description": "OnlineVotingSystem is an open source project hosted on GitHub. OnlineVotingSystem before version 1.1.2 hashes user passwords without a salt, which is vulnerable to dictionary attacks. Therefore there is a threat of security breach in the voting system. Without a salt, it is much easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables to crack passwords. This problem is fixed and published in version 1.1.2. A long randomly generated salt is added to the password hash function to better protect passwords stored in the voting system.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-01-21T15:15:14.580",
    "last_modified": "2024-11-21T05:47:52.163",
    "fix_date": "2021-01-10T15:05:50Z"
  },
  "references": [
    {
      "url": "https://github.com/dbijaya/OnlineVotingSystem/commit/0181cb0272857696c8eb3e44fcf6cb014ff90f09",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dbijaya/OnlineVotingSystem/security/advisories/GHSA-wwg8-372v-v332",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dbijaya/OnlineVotingSystem/commit/0181cb0272857696c8eb3e44fcf6cb014ff90f09",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dbijaya/OnlineVotingSystem/security/advisories/GHSA-wwg8-372v-v332",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:13.160973",
    "processing_status": "enhanced"
  }
}