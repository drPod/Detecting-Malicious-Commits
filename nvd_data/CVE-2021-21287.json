{
  "cve_id": "CVE-2021-21287",
  "github_data": {
    "repository": "minio/minio",
    "fix_commit": "eb6871ecd960d570f70698877209e6db181bf276",
    "related_commits": [
      "eb6871ecd960d570f70698877209e6db181bf276",
      "eb6871ecd960d570f70698877209e6db181bf276"
    ],
    "patch_url": "https://github.com/minio/minio/commit/eb6871ecd960d570f70698877209e6db181bf276.patch",
    "fix_commit_details": {
      "sha": "eb6871ecd960d570f70698877209e6db181bf276",
      "commit_date": "2021-01-25T18:15:03Z",
      "author": {
        "login": "harshavardhana",
        "type": "User",
        "stats": {
          "total_commits": 4369,
          "average_weekly_commits": 8.181647940074907,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 489
        }
      },
      "commit_message": {
        "title": "fix: LoginSTS should be an inline implementation (#11337)",
        "length": 555,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 70,
        "additions": 42,
        "deletions": 28
      },
      "files": [
        {
          "filename": "cmd/api-errors.go",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -2125,6 +2125,12 @@ func toAPIError(ctx context.Context, err error) APIError {\n \t\t\t\tHTTPStatusCode: e.Response().StatusCode,\n \t\t\t}\n \t\t\t// Add more Gateway SDKs here if any in future.\n+\t\tdefault:\n+\t\t\tapiErr = APIError{\n+\t\t\t\tCode:           apiErr.Code,\n+\t\t\t\tDescription:    fmt.Sprintf(\"%s: cause(%v)\", apiErr.Description, err),\n+\t\t\t\tHTTPStatusCode: apiErr.HTTPStatusCode,\n+\t\t\t}\n \t\t}\n \t}\n "
        },
        {
          "filename": "cmd/web-handlers.go",
          "status": "modified",
          "additions": 36,
          "deletions": 28,
          "patch": "@@ -20,7 +20,6 @@ import (\n \t\"context\"\n \t\"crypto/subtle\"\n \t\"encoding/json\"\n-\t\"encoding/xml\"\n \t\"errors\"\n \t\"fmt\"\n \t\"io\"\n@@ -2202,54 +2201,61 @@ type LoginSTSArgs struct {\n \tToken string `json:\"token\" form:\"token\"`\n }\n \n+var errSTSNotInitialized = errors.New(\"STS API not initialized, please configure STS support\")\n+\n // LoginSTS - STS user login handler.\n func (web *webAPIHandlers) LoginSTS(r *http.Request, args *LoginSTSArgs, reply *LoginRep) error {\n \tctx := newWebContext(r, args, \"WebLoginSTS\")\n \n-\tv := url.Values{}\n-\tv.Set(\"Action\", webIdentity)\n-\tv.Set(\"WebIdentityToken\", args.Token)\n-\tv.Set(\"Version\", stsAPIVersion)\n-\n-\tscheme := \"http\"\n-\tif sourceScheme := handlers.GetSourceScheme(r); sourceScheme != \"\" {\n-\t\tscheme = sourceScheme\n-\t}\n-\tif globalIsTLS {\n-\t\tscheme = \"https\"\n+\tif globalOpenIDValidators == nil {\n+\t\treturn toJSONError(ctx, errSTSNotInitialized)\n \t}\n \n-\tu := &url.URL{\n-\t\tScheme: scheme,\n-\t\tHost:   r.Host,\n+\tv, err := globalOpenIDValidators.Get(\"jwt\")\n+\tif err != nil {\n+\t\tlogger.LogIf(ctx, err)\n+\t\treturn toJSONError(ctx, errSTSNotInitialized)\n \t}\n \n-\tu.RawQuery = v.Encode()\n-\n-\treq, err := http.NewRequest(http.MethodPost, u.String(), nil)\n+\tm, err := v.Validate(args.Token, \"\")\n \tif err != nil {\n \t\treturn toJSONError(ctx, err)\n \t}\n \n-\tclnt := &http.Client{\n-\t\tTransport: NewGatewayHTTPTransport(),\n+\t// JWT has requested a custom claim with policy value set.\n+\t// This is a MinIO STS API specific value, this value should\n+\t// be set and configured on your identity provider as part of\n+\t// JWT custom claims.\n+\tvar policyName string\n+\tpolicySet, ok := iampolicy.GetPoliciesFromClaims(m, iamPolicyClaimNameOpenID())\n+\tif ok {\n+\t\tpolicyName = globalIAMSys.CurrentPolicies(strings.Join(policySet.ToSlice(), \",\"))\n \t}\n-\tresp, err := clnt.Do(req)\n+\tif policyName == \"\" && globalPolicyOPA == nil {\n+\t\treturn toJSONError(ctx, fmt.Errorf(\"%s claim missing from the JWT token, credentials will not be generated\", iamPolicyClaimNameOpenID()))\n+\t}\n+\tm[iamPolicyClaimNameOpenID()] = policyName\n+\n+\tsecret := globalActiveCred.SecretKey\n+\tcred, err := auth.GetNewCredentialsWithMetadata(m, secret)\n \tif err != nil {\n \t\treturn toJSONError(ctx, err)\n \t}\n-\tdefer xhttp.DrainBody(resp.Body)\n \n-\tif resp.StatusCode != http.StatusOK {\n-\t\treturn toJSONError(ctx, errors.New(resp.Status))\n+\t// Set the newly generated credentials.\n+\tif err = globalIAMSys.SetTempUser(cred.AccessKey, cred, policyName); err != nil {\n+\t\treturn toJSONError(ctx, err)\n \t}\n \n-\ta := AssumeRoleWithWebIdentityResponse{}\n-\tif err = xml.NewDecoder(resp.Body).Decode(&a); err != nil {\n-\t\treturn toJSONError(ctx, err)\n+\t// Notify all other MinIO peers to reload temp users\n+\tfor _, nerr := range globalNotificationSys.LoadUser(cred.AccessKey, true) {\n+\t\tif nerr.Err != nil {\n+\t\t\tlogger.GetReqInfo(ctx).SetTags(\"peerAddress\", nerr.Host.String())\n+\t\t\tlogger.LogIf(ctx, nerr.Err)\n+\t\t}\n \t}\n \n-\treply.Token = a.Result.Credentials.SessionToken\n+\treply.Token = cred.SessionToken\n \treply.UIVersion = browser.UIVersion\n \treturn nil\n }\n@@ -2304,6 +2310,8 @@ func toWebAPIError(ctx context.Context, err error) APIError {\n \t\t\tHTTPStatusCode: http.StatusBadRequest,\n \t\t\tDescription:    err.Error(),\n \t\t}\n+\tcase errSTSNotInitialized:\n+\t\treturn APIError(stsErrCodes.ToSTSErr(ErrSTSNotInitialized))\n \tcase errServerNotInitialized:\n \t\treturn APIError{\n \t\t\tCode:           \"XMinioServerNotInitialized\","
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4952bdb77035e8142b2f0fc5b86181aeb1d3e82e",
            "date": "2025-01-14T19:53:02Z",
            "author_login": "poornas"
          },
          {
            "sha": "00b2ef29323e786a8958bf0bedced133cb06245f",
            "date": "2025-01-08T11:09:24Z",
            "author_login": "vadmeste"
          },
          {
            "sha": "4536ecfaa4d81dd3f648616094a4936162089db8",
            "date": "2025-01-06T15:51:54Z",
            "author_login": "klauspost"
          },
          {
            "sha": "43a74029685512ce9b1b76c053d48b43fc8d64fc",
            "date": "2025-01-03T05:34:47Z",
            "author_login": "harshavardhana"
          },
          {
            "sha": "330dca9a354cdf445d71979170bbe3d27971d127",
            "date": "2024-12-21T04:24:45Z",
            "author_login": "allanrogerr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "MinIO is a High Performance Object Storage released under Apache License v2.0. In MinIO before version RELEASE.2021-01-30T00-20-58Z there is a server-side request forgery vulnerability. The target application may have functionality for importing data from a URL, publishing data to a URL, or otherwise reading data from a URL that can be tampered with. The attacker modifies the calls to this functionality by supplying a completely different URL or by manipulating how URLs are built (path traversal etc.). In a Server-Side Request Forgery (SSRF) attack, the attacker can abuse functionality on the server to read or update internal resources. The attacker can supply or modify a URL which the code running on the server will read or submit data, and by carefully selecting the URLs, the attacker may be able to read server configuration such as AWS metadata, connect to internal services like HTTP enabled databases, or perform post requests towards internal services which are not intended to be exposed. This is fixed in version RELEASE.2021-01-30T00-20-58Z, all users are advised to upgrade. As a workaround you can disable the browser front-end with \"MINIO_BROWSER=off\" environment variable.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-02-01T18:15:13.890",
    "last_modified": "2024-11-21T05:47:56.277",
    "fix_date": "2021-01-25T18:15:03Z"
  },
  "references": [
    {
      "url": "https://github.com/minio/minio/commit/eb6871ecd960d570f70698877209e6db181bf276",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/pull/11337",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/releases/tag/RELEASE.2021-01-30T00-20-58Z",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/security/advisories/GHSA-m4qq-5f7c-693q",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/commit/eb6871ecd960d570f70698877209e6db181bf276",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/pull/11337",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/releases/tag/RELEASE.2021-01-30T00-20-58Z",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/minio/minio/security/advisories/GHSA-m4qq-5f7c-693q",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:13.177400",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "minio",
    "owner": "minio",
    "created_at": "2015-01-14T19:23:58Z",
    "updated_at": "2025-01-14T10:52:24Z",
    "pushed_at": "2025-01-08T11:09:25Z",
    "size": 131770,
    "stars": 49440,
    "forks": 5609,
    "open_issues": 33,
    "watchers": 49440,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "release"
    ],
    "languages": {
      "Go": 8661217,
      "Shell": 72203,
      "Makefile": 11634,
      "Mustache": 6628,
      "Smarty": 872,
      "Dockerfile": 229
    },
    "commit_activity": {
      "total_commits_last_year": 949,
      "avg_commits_per_week": 18.25,
      "days_active_last_year": 271
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T12:53:58.932687"
  }
}