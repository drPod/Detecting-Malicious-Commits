{
  "cve_id": "CVE-2021-21290",
  "github_data": {
    "repository": "netty/netty",
    "fix_commit": "c735357bf29d07856ad171c6611a2e1a0e0000ec",
    "related_commits": [
      "c735357bf29d07856ad171c6611a2e1a0e0000ec",
      "c735357bf29d07856ad171c6611a2e1a0e0000ec"
    ],
    "patch_url": "https://github.com/netty/netty/commit/c735357bf29d07856ad171c6611a2e1a0e0000ec.patch",
    "fix_commit_details": {
      "sha": "c735357bf29d07856ad171c6611a2e1a0e0000ec",
      "commit_date": "2021-02-08T10:44:05Z",
      "author": {
        "login": "normanmaurer",
        "type": "User",
        "stats": {
          "total_commits": 3013,
          "average_weekly_commits": 3.507566938300349,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 506
        }
      },
      "commit_message": {
        "title": "Use Files.createTempFile(...) to ensure the file is created with proper permissions",
        "length": 916,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 67,
        "additions": 47,
        "deletions": 20
      },
      "files": [
        {
          "filename": "buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -4551,7 +4551,7 @@ private void testGetReadOnlyDst(boolean direct) {\n \n     @Test\n     public void testReadBytesAndWriteBytesWithFileChannel() throws IOException {\n-        File file = File.createTempFile(\"file-channel\", \".tmp\");\n+        File file = PlatformDependent.createTempFile(\"file-channel\", \".tmp\", null);\n         RandomAccessFile randomAccessFile = null;\n         try {\n             randomAccessFile = new RandomAccessFile(file, \"rw\");\n@@ -4594,7 +4594,7 @@ public void testReadBytesAndWriteBytesWithFileChannel() throws IOException {\n \n     @Test\n     public void testGetBytesAndSetBytesWithFileChannel() throws IOException {\n-        File file = File.createTempFile(\"file-channel\", \".tmp\");\n+        File file = PlatformDependent.createTempFile(\"file-channel\", \".tmp\", null);\n         RandomAccessFile randomAccessFile = null;\n         try {\n             randomAccessFile = new RandomAccessFile(file, \"rw\");"
        },
        {
          "filename": "buffer/src/test/java/io/netty/buffer/ReadOnlyDirectByteBufferBufTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -306,7 +306,7 @@ public void testWrapBufferRoundTrip() {\n \n     @Test\n     public void testWrapMemoryMapped() throws Exception {\n-        File file = File.createTempFile(\"netty-test\", \"tmp\");\n+        File file = PlatformDependent.createTempFile(\"netty-test\", \"tmp\", null);\n         FileChannel output = null;\n         FileChannel input = null;\n         ByteBuf b1 = null;"
        },
        {
          "filename": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -19,6 +19,7 @@\n import io.netty.handler.codec.http.HttpConstants;\n import io.netty.util.internal.EmptyArrays;\n import io.netty.util.internal.ObjectUtil;\n+import io.netty.util.internal.PlatformDependent;\n import io.netty.util.internal.logging.InternalLogger;\n import io.netty.util.internal.logging.InternalLoggerFactory;\n \n@@ -88,9 +89,9 @@ private File tempFile() throws IOException {\n         File tmpFile;\n         if (getBaseDirectory() == null) {\n             // create a temporary file\n-            tmpFile = File.createTempFile(getPrefix(), newpostfix);\n+            tmpFile = PlatformDependent.createTempFile(getPrefix(), newpostfix, null);\n         } else {\n-            tmpFile = File.createTempFile(getPrefix(), newpostfix, new File(\n+            tmpFile = PlatformDependent.createTempFile(getPrefix(), newpostfix, new File(\n                     getBaseDirectory()));\n         }\n         if (deleteOnExit()) {"
        },
        {
          "filename": "codec-http/src/test/java/io/netty/handler/codec/http/HttpChunkedInputTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -25,6 +25,7 @@\n import io.netty.handler.stream.ChunkedNioStream;\n import io.netty.handler.stream.ChunkedStream;\n import io.netty.handler.stream.ChunkedWriteHandler;\n+import io.netty.util.internal.PlatformDependent;\n import org.junit.Test;\n \n import java.io.ByteArrayInputStream;\n@@ -46,7 +47,7 @@ public class HttpChunkedInputTest {\n \n         FileOutputStream out = null;\n         try {\n-            TMP = File.createTempFile(\"netty-chunk-\", \".tmp\");\n+            TMP = PlatformDependent.createTempFile(\"netty-chunk-\", \".tmp\", null);\n             TMP.deleteOnExit();\n             out = new FileOutputStream(TMP);\n             out.write(BYTES);"
        },
        {
          "filename": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpDataTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -39,7 +39,7 @@ public class AbstractDiskHttpDataTest {\n     public void testGetChunk() throws Exception {\n         TestHttpData test = new TestHttpData(\"test\", UTF_8, 0);\n         try {\n-            File tmpFile = File.createTempFile(UUID.randomUUID().toString(), \".tmp\");\n+            File tmpFile = PlatformDependent.createTempFile(UUID.randomUUID().toString(), \".tmp\", null);\n             tmpFile.deleteOnExit();\n             FileOutputStream fos = new FileOutputStream(tmpFile);\n             byte[] bytes = new byte[4096];"
        },
        {
          "filename": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -43,7 +43,7 @@ public class AbstractMemoryHttpDataTest {\n     public void testSetContentFromFile() throws Exception {\n         TestHttpData test = new TestHttpData(\"test\", UTF_8, 0);\n         try {\n-            File tmpFile = File.createTempFile(UUID.randomUUID().toString(), \".tmp\");\n+            File tmpFile = PlatformDependent.createTempFile(UUID.randomUUID().toString(), \".tmp\", null);\n             tmpFile.deleteOnExit();\n             FileOutputStream fos = new FileOutputStream(tmpFile);\n             byte[] bytes = new byte[4096];\n@@ -70,7 +70,7 @@ public void testSetContentFromFile() throws Exception {\n     public void testRenameTo() throws Exception {\n         TestHttpData test = new TestHttpData(\"test\", UTF_8, 0);\n         try {\n-            File tmpFile = File.createTempFile(UUID.randomUUID().toString(), \".tmp\");\n+            File tmpFile = PlatformDependent.createTempFile(UUID.randomUUID().toString(), \".tmp\", null);\n             tmpFile.deleteOnExit();\n             final int totalByteCount = 4096;\n             byte[] bytes = new byte[totalByteCount];"
        },
        {
          "filename": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/DiskFileUploadTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -273,7 +273,7 @@ public void setSetContentFromFileExceptionally() throws Exception {\n             assertEquals(maxSize, f1.length());\n             byte[] bytes = new byte[8];\n             PlatformDependent.threadLocalRandom().nextBytes(bytes);\n-            File tmpFile = File.createTempFile(UUID.randomUUID().toString(), \".tmp\");\n+            File tmpFile = PlatformDependent.createTempFile(UUID.randomUUID().toString(), \".tmp\", null);\n             tmpFile.deleteOnExit();\n             FileOutputStream fos = new FileOutputStream(tmpFile);\n             try {"
        },
        {
          "filename": "common/src/main/java/io/netty/util/internal/NativeLibraryLoader.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -177,7 +177,7 @@ public static void load(String originalName, ClassLoader loader) {\n             String prefix = libname.substring(0, index);\n             String suffix = libname.substring(index);\n \n-            tmpFile = File.createTempFile(prefix, suffix, WORKDIR);\n+            tmpFile = PlatformDependent.createTempFile(prefix, suffix, WORKDIR);\n             in = url.openStream();\n             out = new FileOutputStream(tmpFile);\n "
        },
        {
          "filename": "common/src/main/java/io/netty/util/internal/PlatformDependent.java",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -38,6 +38,7 @@\n import java.lang.reflect.Method;\n import java.nio.ByteBuffer;\n import java.nio.ByteOrder;\n+import java.nio.file.Files;\n import java.security.AccessController;\n import java.security.PrivilegedAction;\n import java.util.Arrays;\n@@ -1389,6 +1390,24 @@ public static Set<String> normalizedLinuxClassifiers() {\n         return LINUX_OS_CLASSIFIERS;\n     }\n \n+    @SuppressJava6Requirement(reason = \"Guarded by version check\")\n+    public static File createTempFile(String prefix, String suffix, File directory) throws IOException {\n+        if (javaVersion() >= 7) {\n+            if (directory == null) {\n+                return Files.createTempFile(prefix, suffix).toFile();\n+            }\n+            return Files.createTempFile(directory.toPath(), prefix, suffix).toFile();\n+        }\n+        if (directory == null) {\n+            return File.createTempFile(prefix, suffix);\n+        }\n+        File file = File.createTempFile(prefix, suffix, directory);\n+        // Try to adjust the perms, if this fails there is not much else we can do...\n+        file.setReadable(false, false);\n+        file.setReadable(true, true);\n+        return file;\n+    }\n+\n     /**\n      * Adds only those classifier strings to <tt>dest</tt> which are present in <tt>allowed</tt>.\n      *"
        },
        {
          "filename": "handler/src/main/java/io/netty/handler/ssl/util/SelfSignedCertificate.java",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -20,6 +20,7 @@\n import io.netty.buffer.Unpooled;\n import io.netty.handler.codec.base64.Base64;\n import io.netty.util.CharsetUtil;\n+import io.netty.util.internal.PlatformDependent;\n import io.netty.util.internal.SystemPropertyUtil;\n import io.netty.util.internal.ThrowableUtil;\n import io.netty.util.internal.logging.InternalLogger;\n@@ -30,6 +31,7 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n+import java.nio.file.Files;\n import java.security.KeyPair;\n import java.security.KeyPairGenerator;\n import java.security.NoSuchAlgorithmException;\n@@ -330,7 +332,7 @@ static String[] newSelfSignedCertificate(\n             wrappedBuf.release();\n         }\n \n-        File keyFile = File.createTempFile(\"keyutil_\" + fqdn + '_', \".key\");\n+        File keyFile = PlatformDependent.createTempFile(\"keyutil_\" + fqdn + '_', \".key\", null);\n         keyFile.deleteOnExit();\n \n         OutputStream keyOut = new FileOutputStream(keyFile);\n@@ -361,7 +363,7 @@ static String[] newSelfSignedCertificate(\n             wrappedBuf.release();\n         }\n \n-        File certFile = File.createTempFile(\"keyutil_\" + fqdn + '_', \".crt\");\n+        File certFile = PlatformDependent.createTempFile(\"keyutil_\" + fqdn + '_', \".crt\", null);\n         certFile.deleteOnExit();\n \n         OutputStream certOut = new FileOutputStream(certFile);"
        },
        {
          "filename": "handler/src/test/java/io/netty/handler/stream/ChunkedWriteHandlerTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -26,6 +26,7 @@\n import io.netty.channel.embedded.EmbeddedChannel;\n import io.netty.util.CharsetUtil;\n import io.netty.util.ReferenceCountUtil;\n+import io.netty.util.internal.PlatformDependent;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -55,7 +56,7 @@ public class ChunkedWriteHandlerTest {\n \n         FileOutputStream out = null;\n         try {\n-            TMP = File.createTempFile(\"netty-chunk-\", \".tmp\");\n+            TMP = PlatformDependent.createTempFile(\"netty-chunk-\", \".tmp\", null);\n             TMP.deleteOnExit();\n             out = new FileOutputStream(TMP);\n             out.write(BYTES);"
        },
        {
          "filename": "handler/src/test/java/io/netty/handler/traffic/FileRegionThrottleTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -32,6 +32,7 @@\n import io.netty.channel.socket.nio.NioSocketChannel;\n import io.netty.handler.codec.LineBasedFrameDecoder;\n import io.netty.util.CharsetUtil;\n+import io.netty.util.internal.PlatformDependent;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n@@ -61,7 +62,7 @@ public static void beforeClass() throws IOException {\n             BYTES[i] = (byte) r.nextInt(255);\n         }\n \n-        tmp = File.createTempFile(\"netty-traffic\", \".tmp\");\n+        tmp = PlatformDependent.createTempFile(\"netty-traffic\", \".tmp\", null);\n         tmp.deleteOnExit();\n         FileOutputStream out = null;\n         try {"
        },
        {
          "filename": "testsuite/src/main/java/io/netty/testsuite/transport/socket/SocketFileRegionTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -102,7 +102,7 @@ public void testFileRegionVoidPromiseNotAutoRead(ServerBootstrap sb, Bootstrap c\n     }\n \n     public void testFileRegionCountLargerThenFile(ServerBootstrap sb, Bootstrap cb) throws Throwable {\n-        File file = File.createTempFile(\"netty-\", \".tmp\");\n+        File file = PlatformDependent.createTempFile(\"netty-\", \".tmp\", null);\n         file.deleteOnExit();\n \n         final FileOutputStream out = new FileOutputStream(file);\n@@ -136,7 +136,7 @@ private static void testFileRegion0(\n         cb.option(ChannelOption.AUTO_READ, autoRead);\n \n         final int bufferSize = 1024;\n-        final File file = File.createTempFile(\"netty-\", \".tmp\");\n+        final File file = PlatformDependent.createTempFile(\"netty-\", \".tmp\", null);\n         file.deleteOnExit();\n \n         final FileOutputStream out = new FileOutputStream(file);"
        },
        {
          "filename": "transport-native-epoll/src/test/java/io/netty/channel/epoll/EpollSpliceTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -28,6 +28,7 @@\n import io.netty.channel.SimpleChannelInboundHandler;\n import io.netty.channel.unix.FileDescriptor;\n import io.netty.util.NetUtil;\n+import io.netty.util.internal.PlatformDependent;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -192,7 +193,7 @@ public void operationComplete(ChannelFuture future) throws Exception {\n     @Test(timeout = 10000)\n     public void spliceToFile() throws Throwable {\n         EventLoopGroup group = new EpollEventLoopGroup(1);\n-        File file = File.createTempFile(\"netty-splice\", null);\n+        File file = PlatformDependent.createTempFile(\"netty-splice\", null, null);\n         file.deleteOnExit();\n \n         SpliceHandler sh = new SpliceHandler(file);"
        },
        {
          "filename": "transport-native-unix-common-tests/src/main/java/io/netty/channel/unix/tests/UnixTestUtils.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -17,6 +17,7 @@\n \n import io.netty.channel.unix.DomainSocketAddress;\n import io.netty.channel.unix.Socket;\n+import io.netty.util.internal.PlatformDependent;\n \n import java.io.File;\n import java.io.IOException;\n@@ -26,7 +27,7 @@ public static DomainSocketAddress newSocketAddress() {\n         try {\n             File file;\n             do {\n-                file = File.createTempFile(\"NETTY\", \"UDS\");\n+                file = PlatformDependent.createTempFile(\"NETTY\", \"UDS\", null);\n                 if (!file.delete()) {\n                     throw new IOException(\"failed to delete: \" + file);\n                 }"
        },
        {
          "filename": "transport/src/test/java/io/netty/channel/DefaultFileRegionTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -39,7 +39,7 @@ public class DefaultFileRegionTest {\n     }\n \n     private static File newFile() throws IOException {\n-        File file = File.createTempFile(\"netty-\", \".tmp\");\n+        File file = PlatformDependent.createTempFile(\"netty-\", \".tmp\", null);\n         file.deleteOnExit();\n \n         final FileOutputStream out = new FileOutputStream(file);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 12,
        "unique_directories": 12,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5194d1306ef9fef002878673bbb7b3463e32387f",
            "date": "2025-01-14T07:19:29Z",
            "author_login": "netty-project-bot"
          },
          {
            "sha": "3b036489e24eb2a1e3bb45022a02a09eceaa8293",
            "date": "2025-01-14T07:19:25Z",
            "author_login": "netty-project-bot"
          },
          {
            "sha": "28a81c687725f6d3403341656b26a8b70391402f",
            "date": "2025-01-13T20:42:26Z",
            "author_login": "normanmaurer"
          },
          {
            "sha": "1bd459ac11ff8486641e619abdd732c7bbd94c70",
            "date": "2025-01-13T20:24:00Z",
            "author_login": "normanmaurer"
          },
          {
            "sha": "ad00d19e5d1b488bb04c5da56571b1484ff547ef",
            "date": "2025-01-13T19:10:08Z",
            "author_login": "normanmaurer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.2,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-378",
    "description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method \"File.createTempFile\" on unix-like systems creates a random file, but, by default will create this file with the permissions \"-rw-r--r--\". Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty's \"AbstractDiskHttpData\" is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own \"java.io.tmpdir\" when you start the JVM or use \"DefaultHttpDataFactory.setBaseDir(...)\" to set the directory to something that is only readable by the current user.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-02-08T20:15:12.433",
    "last_modified": "2024-11-21T05:47:56.677",
    "fix_date": "2021-02-08T10:44:05Z"
  },
  "references": [
    {
      "url": "https://github.com/netty/netty/commit/c735357bf29d07856ad171c6611a2e1a0e0000ec",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/r0053443ce19ff125981559f8c51cf66e3ab4350f47812b8cf0733a05%40%3Cdev.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r02e467123d45006a1dda20a38349e9c74c3a4b53e2e07be0939ecb3f%40%3Cdev.ranger.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r0857b613604c696bf9743f0af047360baaded48b1c75cf6945a083c5%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r10308b625e49d4e9491d7e079606ca0df2f0a4d828f1ad1da64ba47b%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r1908a34b9cc7120e5c19968a116ddbcffea5e9deb76c2be4fa461904%40%3Cdev.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2748097ea4b774292539cf3de6e3b267fc7a88d6c8ec40f4e2e87bd4%40%3Cdev.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2936730ef0a06e724b96539bc7eacfcd3628987c16b1b99c790e7b87%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2fda4dab73097051977f2ab818f75e04fbcb15bb1003c8530eac1059%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r326ec431f06eab7cb7113a7a338e59731b8d556d05258457f12bac1b%40%3Cdev.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r4efed2c501681cb2e8d629da16e48d9eac429624fd4c9a8c6b8e7020%40%3Cdev.tinkerpop.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r584cf871f188c406d8bd447ff4e2fd9817fca862436c064d0951a071%40%3Ccommits.pulsar.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r59bac5c09f7a4179b9e2460e8f41c278aaf3b9a21cc23678eb893e41%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5bf303d7c04da78f276765da08559fdc62420f1df539b277ca31f63b%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5c701840aa2845191721e39821445e1e8c59711e71942b7796a6ec29%40%3Cusers.activemq.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5e4a540089760c8ecc2c411309d74264f1dad634ad93ad583ca16214%40%3Ccommits.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5e66e286afb5506cdfe9bbf68a323e8d09614f6d1ddc806ed0224700%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r71dbb66747ff537640bb91eb0b2b24edef21ac07728097016f58b01f%40%3Ccommits.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r743149dcc8db1de473e6bff0b3ddf10140a7357bc2add75f7d1fbb12%40%3Cdev.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r790c2926efcd062067eb18fde2486527596d7275381cfaff2f7b3890%40%3Cissues.bookkeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r7bb3cdc192e9a6f863d3ea05422f09fa1ae2b88d4663e63696ee7ef5%40%3Cdev.ranger.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r9924ef9357537722b28d04c98a189750b80694a19754e5057c34ca48%40%3Ccommits.pulsar.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra0fc2b4553dd7aaf75febb61052b7f1243ac3a180a71c01f29093013%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra503756ced78fdc2136bd33e87cb7553028645b261b1f5c6186a121e%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb06c1e766aa45ee422e8261a8249b561784186483e8f742ea627bda4%40%3Cdev.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb51d6202ff1a773f96eaa694b7da4ad3f44922c40b3d4e1a19c2f325%40%3Ccommits.pulsar.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb592033a2462548d061a83ac9449c5ff66098751748fcd1e2d008233%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rc0087125cb15b4b78e44000f841cd37fefedfda942fd7ddf3ad1b528%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rc488f80094872ad925f0c73d283d4c00d32def81977438e27a3dc2bb%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rcd163e421273e8dca1c71ea298dce3dd11b41d51c3a812e0394e6a5d%40%3Ccommits.pulsar.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rdba4f78ac55f803893a1a2265181595e79e3aa027e2e651dfba98c18%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2021/02/msg00016.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20220210-0011/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2021/dsa-4885",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com//security-alerts/cpujul2021.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuApr2021.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2022.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuoct2021.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/netty/netty/commit/c735357bf29d07856ad171c6611a2e1a0e0000ec",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/netty/netty/security/advisories/GHSA-5mcr-gq6c-3hq2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/r0053443ce19ff125981559f8c51cf66e3ab4350f47812b8cf0733a05%40%3Cdev.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r02e467123d45006a1dda20a38349e9c74c3a4b53e2e07be0939ecb3f%40%3Cdev.ranger.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r0857b613604c696bf9743f0af047360baaded48b1c75cf6945a083c5%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r10308b625e49d4e9491d7e079606ca0df2f0a4d828f1ad1da64ba47b%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r1908a34b9cc7120e5c19968a116ddbcffea5e9deb76c2be4fa461904%40%3Cdev.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2748097ea4b774292539cf3de6e3b267fc7a88d6c8ec40f4e2e87bd4%40%3Cdev.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2936730ef0a06e724b96539bc7eacfcd3628987c16b1b99c790e7b87%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2fda4dab73097051977f2ab818f75e04fbcb15bb1003c8530eac1059%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r326ec431f06eab7cb7113a7a338e59731b8d556d05258457f12bac1b%40%3Cdev.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r4efed2c501681cb2e8d629da16e48d9eac429624fd4c9a8c6b8e7020%40%3Cdev.tinkerpop.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r584cf871f188c406d8bd447ff4e2fd9817fca862436c064d0951a071%40%3Ccommits.pulsar.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r59bac5c09f7a4179b9e2460e8f41c278aaf3b9a21cc23678eb893e41%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5bf303d7c04da78f276765da08559fdc62420f1df539b277ca31f63b%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5c701840aa2845191721e39821445e1e8c59711e71942b7796a6ec29%40%3Cusers.activemq.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5e4a540089760c8ecc2c411309d74264f1dad634ad93ad583ca16214%40%3Ccommits.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5e66e286afb5506cdfe9bbf68a323e8d09614f6d1ddc806ed0224700%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r71dbb66747ff537640bb91eb0b2b24edef21ac07728097016f58b01f%40%3Ccommits.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r743149dcc8db1de473e6bff0b3ddf10140a7357bc2add75f7d1fbb12%40%3Cdev.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r790c2926efcd062067eb18fde2486527596d7275381cfaff2f7b3890%40%3Cissues.bookkeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r7bb3cdc192e9a6f863d3ea05422f09fa1ae2b88d4663e63696ee7ef5%40%3Cdev.ranger.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r9924ef9357537722b28d04c98a189750b80694a19754e5057c34ca48%40%3Ccommits.pulsar.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra0fc2b4553dd7aaf75febb61052b7f1243ac3a180a71c01f29093013%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra503756ced78fdc2136bd33e87cb7553028645b261b1f5c6186a121e%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb06c1e766aa45ee422e8261a8249b561784186483e8f742ea627bda4%40%3Cdev.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb51d6202ff1a773f96eaa694b7da4ad3f44922c40b3d4e1a19c2f325%40%3Ccommits.pulsar.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb592033a2462548d061a83ac9449c5ff66098751748fcd1e2d008233%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rc0087125cb15b4b78e44000f841cd37fefedfda942fd7ddf3ad1b528%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rc488f80094872ad925f0c73d283d4c00d32def81977438e27a3dc2bb%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rcd163e421273e8dca1c71ea298dce3dd11b41d51c3a812e0394e6a5d%40%3Ccommits.pulsar.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rdba4f78ac55f803893a1a2265181595e79e3aa027e2e651dfba98c18%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2021/02/msg00016.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20220210-0011/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2021/dsa-4885",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com//security-alerts/cpujul2021.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuApr2021.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2022.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuoct2021.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:13.188522",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "netty",
    "owner": "netty",
    "created_at": "2010-11-09T09:22:21Z",
    "updated_at": "2025-01-14T09:10:40Z",
    "pushed_at": "2025-01-14T12:48:52Z",
    "size": 92623,
    "stars": 33671,
    "forks": 15993,
    "open_issues": 609,
    "watchers": 33671,
    "has_security_policy": false,
    "default_branch": "4.1",
    "protected_branches": [
      "3.2",
      "3.5",
      "3.6",
      "3.7",
      "3.8",
      "3.9",
      "3.10",
      "main"
    ],
    "languages": {
      "Java": 19621935,
      "C": 228044,
      "HTML": 21029,
      "Shell": 18570,
      "JavaScript": 16232,
      "Makefile": 1814,
      "Groovy": 1755,
      "Dockerfile": 1116,
      "CSS": 49
    },
    "commit_activity": {
      "total_commits_last_year": 406,
      "avg_commits_per_week": 7.8076923076923075,
      "days_active_last_year": 156
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:57:47.084896"
  }
}