{
  "cve_id": "CVE-2021-21295",
  "github_data": {
    "repository": "netty/netty",
    "fix_commit": "89c241e3b1795ff257af4ad6eadc616cb2fb3dc4",
    "related_commits": [
      "89c241e3b1795ff257af4ad6eadc616cb2fb3dc4",
      "89c241e3b1795ff257af4ad6eadc616cb2fb3dc4"
    ],
    "patch_url": "https://github.com/netty/netty/commit/89c241e3b1795ff257af4ad6eadc616cb2fb3dc4.patch",
    "fix_commit_details": {
      "sha": "89c241e3b1795ff257af4ad6eadc616cb2fb3dc4",
      "commit_date": "2021-03-09T07:20:09Z",
      "author": {
        "login": "normanmaurer",
        "type": "User",
        "stats": {
          "total_commits": 3013,
          "average_weekly_commits": 3.507566938300349,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 506
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-wm47-8v5p-wjpj",
        "length": 670,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 362,
        "additions": 312,
        "deletions": 50
      },
      "files": [
        {
          "filename": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
          "status": "modified",
          "additions": 7,
          "deletions": 41,
          "patch": "@@ -16,7 +16,6 @@\n package io.netty.handler.codec.http;\n \n import static io.netty.util.internal.ObjectUtil.checkPositive;\n-import static io.netty.util.internal.StringUtil.COMMA;\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.Unpooled;\n@@ -630,49 +629,16 @@ private State readHeaders(ByteBuf buffer) {\n         value = null;\n \n         List<String> contentLengthFields = headers.getAll(HttpHeaderNames.CONTENT_LENGTH);\n-\n         if (!contentLengthFields.isEmpty()) {\n+            HttpVersion version = message.protocolVersion();\n+            boolean isHttp10OrEarlier = version.majorVersion() < 1 || (version.majorVersion() == 1\n+                    && version.minorVersion() == 0);\n             // Guard against multiple Content-Length headers as stated in\n             // https://tools.ietf.org/html/rfc7230#section-3.3.2:\n-            //\n-            // If a message is received that has multiple Content-Length header\n-            //   fields with field-values consisting of the same decimal value, or a\n-            //   single Content-Length header field with a field value containing a\n-            //   list of identical decimal values (e.g., \"Content-Length: 42, 42\"),\n-            //   indicating that duplicate Content-Length header fields have been\n-            //   generated or combined by an upstream message processor, then the\n-            //   recipient MUST either reject the message as invalid or replace the\n-            //   duplicated field-values with a single valid Content-Length field\n-            //   containing that decimal value prior to determining the message body\n-            //   length or forwarding the message.\n-            boolean multipleContentLengths =\n-                    contentLengthFields.size() > 1 || contentLengthFields.get(0).indexOf(COMMA) >= 0;\n-            if (multipleContentLengths && message.protocolVersion() == HttpVersion.HTTP_1_1) {\n-                if (allowDuplicateContentLengths) {\n-                    // Find and enforce that all Content-Length values are the same\n-                    String firstValue = null;\n-                    for (String field : contentLengthFields) {\n-                        String[] tokens = COMMA_PATTERN.split(field, -1);\n-                        for (String token : tokens) {\n-                            String trimmed = token.trim();\n-                            if (firstValue == null) {\n-                                firstValue = trimmed;\n-                            } else if (!trimmed.equals(firstValue)) {\n-                                throw new IllegalArgumentException(\n-                                        \"Multiple Content-Length values found: \" + contentLengthFields);\n-                            }\n-                        }\n-                    }\n-                    // Replace the duplicated field-values with a single valid Content-Length field\n-                    headers.set(HttpHeaderNames.CONTENT_LENGTH, firstValue);\n-                    contentLength = Long.parseLong(firstValue);\n-                } else {\n-                    // Reject the message as invalid\n-                    throw new IllegalArgumentException(\n-                            \"Multiple Content-Length values found: \" + contentLengthFields);\n-                }\n-            } else {\n-                contentLength = Long.parseLong(contentLengthFields.get(0));\n+            contentLength = HttpUtil.normalizeAndGetContentLength(contentLengthFields,\n+                    isHttp10OrEarlier, allowDuplicateContentLengths);\n+            if (contentLength != -1) {\n+                headers.set(HttpHeaderNames.CONTENT_LENGTH, contentLength);\n             }\n         }\n "
        },
        {
          "filename": "codec-http/src/main/java/io/netty/handler/codec/http/HttpUtil.java",
          "status": "modified",
          "additions": 86,
          "deletions": 0,
          "patch": "@@ -24,10 +24,14 @@\n import java.util.Iterator;\n import java.util.List;\n \n+import io.netty.handler.codec.Headers;\n import io.netty.util.AsciiString;\n import io.netty.util.CharsetUtil;\n import io.netty.util.NetUtil;\n import io.netty.util.internal.ObjectUtil;\n+import io.netty.util.internal.UnstableApi;\n+\n+import static io.netty.util.internal.StringUtil.COMMA;\n \n /**\n  * Utility methods useful in the HTTP context.\n@@ -36,6 +40,7 @@ public final class HttpUtil {\n \n     private static final AsciiString CHARSET_EQUALS = AsciiString.of(HttpHeaderValues.CHARSET + \"=\");\n     private static final AsciiString SEMICOLON = AsciiString.cached(\";\");\n+    private static final String COMMA_STRING = String.valueOf(COMMA);\n \n     private HttpUtil() { }\n \n@@ -530,4 +535,85 @@ public static String formatHostnameForHttp(InetSocketAddress addr) {\n         }\n         return hostString;\n     }\n+\n+    /**\n+     * Validates, and optionally extracts the content length from headers. This method is not intended for\n+     * general use, but is here to be shared between HTTP/1 and HTTP/2 parsing.\n+     *\n+     * @param contentLengthFields the content-length header fields.\n+     * @param isHttp10OrEarlier {@code true} if we are handling HTTP/1.0 or earlier\n+     * @param allowDuplicateContentLengths {@code true}  if multiple, identical-value content lengths should be allowed.\n+     * @return the normalized content length from the headers or {@code -1} if the fields were empty.\n+     * @throws IllegalArgumentException if the content-length fields are not valid\n+     */\n+    @UnstableApi\n+    public static long normalizeAndGetContentLength(\n+            List<? extends CharSequence> contentLengthFields, boolean isHttp10OrEarlier,\n+            boolean allowDuplicateContentLengths) {\n+        if (contentLengthFields.isEmpty()) {\n+            return -1;\n+        }\n+\n+        // Guard against multiple Content-Length headers as stated in\n+        // https://tools.ietf.org/html/rfc7230#section-3.3.2:\n+        //\n+        // If a message is received that has multiple Content-Length header\n+        //   fields with field-values consisting of the same decimal value, or a\n+        //   single Content-Length header field with a field value containing a\n+        //   list of identical decimal values (e.g., \"Content-Length: 42, 42\"),\n+        //   indicating that duplicate Content-Length header fields have been\n+        //   generated or combined by an upstream message processor, then the\n+        //   recipient MUST either reject the message as invalid or replace the\n+        //   duplicated field-values with a single valid Content-Length field\n+        //   containing that decimal value prior to determining the message body\n+        //   length or forwarding the message.\n+        String firstField = contentLengthFields.get(0).toString();\n+        boolean multipleContentLengths =\n+                contentLengthFields.size() > 1 || firstField.indexOf(COMMA) >= 0;\n+\n+        if (multipleContentLengths && !isHttp10OrEarlier) {\n+            if (allowDuplicateContentLengths) {\n+                // Find and enforce that all Content-Length values are the same\n+                String firstValue = null;\n+                for (CharSequence field : contentLengthFields) {\n+                    String[] tokens = field.toString().split(COMMA_STRING, -1);\n+                    for (String token : tokens) {\n+                        String trimmed = token.trim();\n+                        if (firstValue == null) {\n+                            firstValue = trimmed;\n+                        } else if (!trimmed.equals(firstValue)) {\n+                            throw new IllegalArgumentException(\n+                                    \"Multiple Content-Length values found: \" + contentLengthFields);\n+                        }\n+                    }\n+                }\n+                // Replace the duplicated field-values with a single valid Content-Length field\n+                firstField = firstValue;\n+            } else {\n+                // Reject the message as invalid\n+                throw new IllegalArgumentException(\n+                        \"Multiple Content-Length values found: \" + contentLengthFields);\n+            }\n+        }\n+        // Ensure we not allow sign as part of the content-length:\n+        // See https://github.com/squid-cache/squid/security/advisories/GHSA-qf3v-rc95-96j5\n+        if (!Character.isDigit(firstField.charAt(0))) {\n+            // Reject the message as invalid\n+            throw new IllegalArgumentException(\n+                    \"Content-Length value is not a number: \" + firstField);\n+        }\n+        try {\n+            final long value = Long.parseLong(firstField);\n+            if (value < 0) {\n+                // Reject the message as invalid\n+                throw new IllegalArgumentException(\n+                        \"Content-Length value must be >=0: \" + value);\n+            }\n+            return value;\n+        } catch (NumberFormatException e) {\n+            // Reject the message as invalid\n+            throw new IllegalArgumentException(\n+                    \"Content-Length value is not a number: \" + firstField, e);\n+        }\n+    }\n }"
        },
        {
          "filename": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java",
          "status": "modified",
          "additions": 91,
          "deletions": 9,
          "patch": "@@ -16,8 +16,11 @@\n \n import io.netty.buffer.ByteBuf;\n import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n import io.netty.handler.codec.http.HttpStatusClass;\n+import io.netty.handler.codec.http.HttpUtil;\n import io.netty.handler.codec.http2.Http2Connection.Endpoint;\n+import io.netty.util.internal.SystemPropertyUtil;\n import io.netty.util.internal.UnstableApi;\n import io.netty.util.internal.logging.InternalLogger;\n import io.netty.util.internal.logging.InternalLoggerFactory;\n@@ -49,6 +52,8 @@\n  */\n @UnstableApi\n public class DefaultHttp2ConnectionDecoder implements Http2ConnectionDecoder {\n+    private static final boolean VALIDATE_CONTENT_LENGTH =\n+            SystemPropertyUtil.getBoolean(\"io.netty.http2.validateContentLength\", true);\n     private static final InternalLogger logger = InternalLoggerFactory.getInstance(DefaultHttp2ConnectionDecoder.class);\n     private Http2FrameListener internalFrameListener = new PrefaceFrameListener();\n     private final Http2Connection connection;\n@@ -59,6 +64,7 @@ public class DefaultHttp2ConnectionDecoder implements Http2ConnectionDecoder {\n     private final Http2PromisedRequestVerifier requestVerifier;\n     private final Http2SettingsReceivedConsumer settingsReceivedConsumer;\n     private final boolean autoAckPing;\n+    private final Http2Connection.PropertyKey contentLengthKey;\n \n     public DefaultHttp2ConnectionDecoder(Http2Connection connection,\n                                          Http2ConnectionEncoder encoder,\n@@ -125,6 +131,7 @@ public DefaultHttp2ConnectionDecoder(Http2Connection connection,\n             settingsReceivedConsumer = (Http2SettingsReceivedConsumer) encoder;\n         }\n         this.connection = checkNotNull(connection, \"connection\");\n+        contentLengthKey = this.connection.newKey();\n         this.frameReader = checkNotNull(frameReader, \"frameReader\");\n         this.encoder = checkNotNull(encoder, \"encoder\");\n         this.requestVerifier = checkNotNull(requestVerifier, \"requestVerifier\");\n@@ -223,6 +230,23 @@ void onUnknownFrame0(ChannelHandlerContext ctx, byte frameType, int streamId, Ht\n         listener.onUnknownFrame(ctx, frameType, streamId, flags, payload);\n     }\n \n+    // See https://tools.ietf.org/html/rfc7540#section-8.1.2.6\n+    private void verifyContentLength(Http2Stream stream, int data, boolean isEnd) throws Http2Exception {\n+        if (!VALIDATE_CONTENT_LENGTH) {\n+            return;\n+        }\n+        ContentLength contentLength = stream.getProperty(contentLengthKey);\n+        if (contentLength != null) {\n+            try {\n+                contentLength.increaseReceivedBytes(connection.isServer(), stream.id(), data, isEnd);\n+            } finally {\n+                if (isEnd) {\n+                    stream.removeProperty(contentLengthKey);\n+                }\n+            }\n+        }\n+    }\n+\n     /**\n      * Handles all inbound frames from the network.\n      */\n@@ -232,7 +256,8 @@ public int onDataRead(final ChannelHandlerContext ctx, int streamId, ByteBuf dat\n                               boolean endOfStream) throws Http2Exception {\n             Http2Stream stream = connection.stream(streamId);\n             Http2LocalFlowController flowController = flowController();\n-            int bytesToReturn = data.readableBytes() + padding;\n+            int readable = data.readableBytes();\n+            int bytesToReturn = readable + padding;\n \n             final boolean shouldIgnore;\n             try {\n@@ -259,7 +284,6 @@ public int onDataRead(final ChannelHandlerContext ctx, int streamId, ByteBuf dat\n                 // All bytes have been consumed.\n                 return bytesToReturn;\n             }\n-\n             Http2Exception error = null;\n             switch (stream.state()) {\n                 case OPEN:\n@@ -287,6 +311,8 @@ public int onDataRead(final ChannelHandlerContext ctx, int streamId, ByteBuf dat\n                     throw error;\n                 }\n \n+                verifyContentLength(stream, readable, endOfStream);\n+\n                 // Call back the application and retrieve the number of bytes that have been\n                 // immediately processed.\n                 bytesToReturn = listener.onDataRead(ctx, streamId, data, padding, endOfStream);\n@@ -367,14 +393,34 @@ public void onHeadersRead(ChannelHandlerContext ctx, int streamId, Http2Headers\n                             stream.state());\n             }\n \n-            stream.headersReceived(isInformational);\n-            encoder.flowController().updateDependencyTree(streamId, streamDependency, weight, exclusive);\n-\n-            listener.onHeadersRead(ctx, streamId, headers, streamDependency, weight, exclusive, padding, endOfStream);\n+            if (!stream.isHeadersReceived()) {\n+                // extract the content-length header\n+                List<? extends CharSequence> contentLength = headers.getAll(HttpHeaderNames.CONTENT_LENGTH);\n+                if (contentLength != null && !contentLength.isEmpty()) {\n+                    try {\n+                        long cLength = HttpUtil.normalizeAndGetContentLength(contentLength, false, true);\n+                        if (cLength != -1) {\n+                            headers.setLong(HttpHeaderNames.CONTENT_LENGTH, cLength);\n+                            stream.setProperty(contentLengthKey, new ContentLength(cLength));\n+                        }\n+                    } catch (IllegalArgumentException e) {\n+                        throw streamError(stream.id(), PROTOCOL_ERROR,\n+                                \"Multiple content-length headers received\", e);\n+                    }\n+                }\n+            }\n \n-            // If the headers completes this stream, close it.\n-            if (endOfStream) {\n-                lifecycleManager.closeStreamRemote(stream, ctx.newSucceededFuture());\n+            stream.headersReceived(isInformational);\n+            try {\n+                verifyContentLength(stream, 0, endOfStream);\n+                encoder.flowController().updateDependencyTree(streamId, streamDependency, weight, exclusive);\n+                listener.onHeadersRead(ctx, streamId, headers, streamDependency,\n+                        weight, exclusive, padding, endOfStream);\n+            } finally {\n+                // If the headers completes this stream, close it.\n+                if (endOfStream) {\n+                    lifecycleManager.closeStreamRemote(stream, ctx.newSucceededFuture());\n+                }\n             }\n         }\n \n@@ -736,4 +782,40 @@ public void onUnknownFrame(ChannelHandlerContext ctx, byte frameType, int stream\n             onUnknownFrame0(ctx, frameType, streamId, flags, payload);\n         }\n     }\n+\n+    private static final class ContentLength {\n+        private final long expected;\n+        private long seen;\n+\n+        ContentLength(long expected) {\n+            this.expected = expected;\n+        }\n+\n+        void increaseReceivedBytes(boolean server, int streamId, int bytes, boolean isEnd) throws Http2Exception {\n+            seen += bytes;\n+            // Check for overflow\n+            if (seen < 0) {\n+                throw streamError(streamId, PROTOCOL_ERROR,\n+                        \"Received amount of data did overflow and so not match content-length header %d\", expected);\n+            }\n+            // Check if we received more data then what was advertised via the content-length header.\n+            if (seen > expected) {\n+                throw streamError(streamId, PROTOCOL_ERROR,\n+                        \"Received amount of data %d does not match content-length header %d\", seen, expected);\n+            }\n+\n+            if (isEnd) {\n+                if (seen == 0 && !server) {\n+                    // This may be a response to a HEAD request, let's just allow it.\n+                    return;\n+                }\n+\n+                // Check that we really saw what was told via the content-length header.\n+                if (expected > seen) {\n+                    throw streamError(streamId, PROTOCOL_ERROR,\n+                            \"Received amount of data %d does not match content-length header %d\", seen, expected);\n+                }\n+            }\n+        }\n+    }\n }"
        },
        {
          "filename": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoderTest.java",
          "status": "modified",
          "additions": 128,
          "deletions": 0,
          "patch": "@@ -21,17 +21,21 @@\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.ChannelPromise;\n import io.netty.channel.DefaultChannelPromise;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n import io.netty.handler.codec.http.HttpResponseStatus;\n import junit.framework.AssertionFailedError;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.mockito.invocation.InvocationOnMock;\n import org.mockito.stubbing.Answer;\n \n import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.Map;\n import java.util.concurrent.atomic.AtomicInteger;\n \n import static io.netty.buffer.Unpooled.EMPTY_BUFFER;\n@@ -134,6 +138,21 @@ public void setup() throws Exception {\n         when(stream.id()).thenReturn(STREAM_ID);\n         when(stream.state()).thenReturn(OPEN);\n         when(stream.open(anyBoolean())).thenReturn(stream);\n+\n+        final Map<Object, Object> properties = new IdentityHashMap<Object, Object>();\n+        when(stream.getProperty(ArgumentMatchers.<Http2Connection.PropertyKey>any())).thenAnswer(new Answer<Object>() {\n+            @Override\n+            public Object answer(InvocationOnMock invocationOnMock) {\n+                return properties.get(invocationOnMock.getArgument(0));\n+            }\n+        });\n+        when(stream.setProperty(ArgumentMatchers.<Http2Connection.PropertyKey>any(), any())).then(new Answer<Object>() {\n+            @Override\n+            public Object answer(InvocationOnMock invocationOnMock) {\n+                return properties.put(invocationOnMock.getArgument(0), invocationOnMock.getArgument(1));\n+            }\n+        });\n+\n         when(pushStream.id()).thenReturn(PUSH_STREAM_ID);\n         doAnswer(new Answer<Boolean>() {\n             @Override\n@@ -774,6 +793,115 @@ public void goAwayShouldReadShouldUpdateConnectionState() throws Exception {\n         verify(listener).onGoAwayRead(eq(ctx), eq(1), eq(2L), eq(EMPTY_BUFFER));\n     }\n \n+    @Test(expected = Http2Exception.StreamException.class)\n+    public void dataContentLengthMissmatch() throws Exception {\n+        dataContentLengthInvalid(false);\n+    }\n+\n+    @Test(expected = Http2Exception.StreamException.class)\n+    public void dataContentLengthInvalid() throws Exception {\n+        dataContentLengthInvalid(true);\n+    }\n+\n+    private void dataContentLengthInvalid(boolean negative) throws Exception {\n+        final ByteBuf data = dummyData();\n+        int padding = 10;\n+        int processedBytes = data.readableBytes() + padding;\n+        mockFlowControl(processedBytes);\n+        try {\n+            decode().onHeadersRead(ctx, STREAM_ID, new DefaultHttp2Headers()\n+                    .setLong(HttpHeaderNames.CONTENT_LENGTH, negative ? -1L : 1L), padding, false);\n+            decode().onDataRead(ctx, STREAM_ID, data, padding, true);\n+            verify(localFlow).receiveFlowControlledFrame(eq(stream), eq(data), eq(padding), eq(true));\n+            verify(localFlow).consumeBytes(eq(stream), eq(processedBytes));\n+\n+            verify(listener, times(1)).onHeadersRead(eq(ctx), anyInt(),\n+                    any(Http2Headers.class), eq(0), eq(DEFAULT_PRIORITY_WEIGHT), eq(false),\n+                    eq(padding), eq(false));\n+            // Verify that the event was absorbed and not propagated to the observer.\n+            verify(listener, never()).onDataRead(eq(ctx), anyInt(), any(ByteBuf.class), anyInt(), anyBoolean());\n+        } finally {\n+            data.release();\n+        }\n+    }\n+\n+    @Test(expected = Http2Exception.StreamException.class)\n+    public void headersContentLengthPositiveSign() throws Exception {\n+        headersContentLengthSign(\"+1\");\n+    }\n+\n+    @Test(expected = Http2Exception.StreamException.class)\n+    public void headersContentLengthNegativeSign() throws Exception {\n+        headersContentLengthSign(\"-1\");\n+    }\n+\n+    private void headersContentLengthSign(String length) throws Exception {\n+        int padding = 10;\n+        when(connection.isServer()).thenReturn(true);\n+        decode().onHeadersRead(ctx, STREAM_ID, new DefaultHttp2Headers()\n+                .set(HttpHeaderNames.CONTENT_LENGTH, length), padding, false);\n+\n+        // Verify that the event was absorbed and not propagated to the observer.\n+        verify(listener, never()).onHeadersRead(eq(ctx), anyInt(),\n+                any(Http2Headers.class), anyInt(), anyShort(), anyBoolean(), anyInt(), anyBoolean());\n+    }\n+\n+    @Test(expected = Http2Exception.StreamException.class)\n+    public void headersContentLengthMissmatch() throws Exception {\n+        headersContentLength(false);\n+    }\n+\n+    @Test(expected = Http2Exception.StreamException.class)\n+    public void headersContentLengthInvalid() throws Exception {\n+        headersContentLength(true);\n+    }\n+\n+    private void headersContentLength(boolean negative) throws Exception {\n+        int padding = 10;\n+        when(connection.isServer()).thenReturn(true);\n+        decode().onHeadersRead(ctx, STREAM_ID, new DefaultHttp2Headers()\n+                .setLong(HttpHeaderNames.CONTENT_LENGTH, negative ? -1L : 1L), padding, true);\n+\n+        // Verify that the event was absorbed and not propagated to the observer.\n+        verify(listener, never()).onHeadersRead(eq(ctx), anyInt(),\n+                any(Http2Headers.class), anyInt(), anyShort(), anyBoolean(), anyInt(), anyBoolean());\n+    }\n+\n+    @Test\n+    public void multipleHeadersContentLengthSame() throws Exception {\n+        multipleHeadersContentLength(true);\n+    }\n+\n+    @Test(expected = Http2Exception.StreamException.class)\n+    public void multipleHeadersContentLengthDifferent() throws Exception {\n+        multipleHeadersContentLength(false);\n+    }\n+\n+    private void multipleHeadersContentLength(boolean same) throws Exception {\n+        int padding = 10;\n+        when(connection.isServer()).thenReturn(true);\n+        Http2Headers headers = new DefaultHttp2Headers();\n+        if (same) {\n+            headers.addLong(HttpHeaderNames.CONTENT_LENGTH, 0);\n+            headers.addLong(HttpHeaderNames.CONTENT_LENGTH, 0);\n+        } else {\n+            headers.addLong(HttpHeaderNames.CONTENT_LENGTH, 0);\n+            headers.addLong(HttpHeaderNames.CONTENT_LENGTH, 1);\n+        }\n+\n+        decode().onHeadersRead(ctx, STREAM_ID, headers, padding, true);\n+\n+        if (same) {\n+            verify(listener, times(1)).onHeadersRead(eq(ctx), anyInt(),\n+                    any(Http2Headers.class), anyInt(), anyShort(), anyBoolean(), anyInt(), anyBoolean());\n+            assertEquals(1, headers.getAll(HttpHeaderNames.CONTENT_LENGTH).size());\n+        } else {\n+            // Verify that the event was absorbed and not propagated to the observer.\n+            verify(listener, never()).onHeadersRead(eq(ctx), anyInt(),\n+                    any(Http2Headers.class), anyInt(), anyShort(), anyBoolean(), anyInt(), anyBoolean());\n+        }\n+    }\n+\n     private static ByteBuf dummyData() {\n         // The buffer is purposely 8 bytes so it will even work for a ping frame.\n         return wrappedBuffer(\"abcdefgh\".getBytes(UTF_8));"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5194d1306ef9fef002878673bbb7b3463e32387f",
            "date": "2025-01-14T07:19:29Z",
            "author_login": "netty-project-bot"
          },
          {
            "sha": "3b036489e24eb2a1e3bb45022a02a09eceaa8293",
            "date": "2025-01-14T07:19:25Z",
            "author_login": "netty-project-bot"
          },
          {
            "sha": "28a81c687725f6d3403341656b26a8b70391402f",
            "date": "2025-01-13T20:42:26Z",
            "author_login": "normanmaurer"
          },
          {
            "sha": "1bd459ac11ff8486641e619abdd732c7bbd94c70",
            "date": "2025-01-13T20:24:00Z",
            "author_login": "normanmaurer"
          },
          {
            "sha": "ad00d19e5d1b488bb04c5da56571b1484ff547ef",
            "date": "2025-01-13T19:10:08Z",
            "author_login": "normanmaurer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-444",
    "description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channel's pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-03-09T19:15:12.657",
    "last_modified": "2024-11-21T05:47:57.530",
    "fix_date": "2021-03-09T07:20:09Z"
  },
  "references": [
    {
      "url": "https://github.com/Netflix/zuul/pull/980",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/netty/netty/commit/89c241e3b1795ff257af4ad6eadc616cb2fb3dc4",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/netty/netty/security/advisories/GHSA-wm47-8v5p-wjpj",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/r02e467123d45006a1dda20a38349e9c74c3a4b53e2e07be0939ecb3f%40%3Cdev.ranger.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r040a5e4d9cca2f98354b58a70b27099672276f66995c4e2e39545d0b%40%3Cissues.hbase.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r04a3e0d9f53421fb946c60cc54762b7151dc692eb4e39970a7579052%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r0b09f3e31e004fe583f677f7afa46bd30110904576c13c5ac818ac2c%40%3Cissues.flink.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r15f66ada9a5faf4bac69d9e7c4521cedfefa62df9509881603791969%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r16c4b55ac82be72f28adad4f8061477e5f978199d5725691dcc82c24%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r1908a34b9cc7120e5c19968a116ddbcffea5e9deb76c2be4fa461904%40%3Cdev.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r1bca0b81193b74a451fc6d687ab58ef3a1f5ec40f6c61561d8dd9509%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r22adb45fe902aeafcd0a1c4db13984224a667676c323c66db3af38a1%40%3Ccommits.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r22b2f34447d71c9a0ad9079b7860323d5584fb9b40eb42668c21eaf1%40%3Cissues.hbase.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r268850f26639ebe249356ed6d8edb54ee8943be6f200f770784fb190%40%3Cissues.hbase.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r27b7e5a588ec826b15f38c40be500c50073400019ce7b8adfd07fece%40%3Cissues.hbase.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2936730ef0a06e724b96539bc7eacfcd3628987c16b1b99c790e7b87%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2e93ce23e04c3f0a61e987d1111d0695cb668ac4ec4edbf237bd3e80%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r312ce5bd3c6bf08c138349b507b6f1c25fe9cf40b6f2b0014c9d12b1%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r32b0b640ad2be3b858f0af51c68a7d5c5a66a462c8bbb93699825cd3%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r33eb06b05afbc7df28d31055cae0cb3fd36cab808c884bf6d680bea5%40%3Cdev.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r393a339ab0b63ef9e6502253eeab26e7643b3e69738d5948b2b1d064%40%3Cissues.hbase.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r3c293431c781696681abbfe1c573c2d9dcdae6fd3ff330ea22f0433f%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r3c4596b9b37f5ae91628ccf169d33cd5a0da4b16b6c39d5bad8e03f3%40%3Cdev.jackrabbit.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r3ff9e735ca33612d900607dc139ebd38a64cadc6bce292e53eb86d7f%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r490ca5611c150d193b320a2608209180713b7c68e501b67b0cffb925%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r4ea2f1a9d79d4fc1896e085f31fb60a21b1770d0a26a5250f849372d%40%3Cissues.kudu.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5232e33a1f3b310a3e083423f736f3925ebdb150844d60ac582809f8%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5470456cf1409a99893ae9dd57439799f6dc1a60fda90e11570f66fe%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r57245853c7245baab09eae08728c52b58fd77666538092389cc3e882%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r584cf871f188c406d8bd447ff4e2fd9817fca862436c064d0951a071%40%3Ccommits.pulsar.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r59bac5c09f7a4179b9e2460e8f41c278aaf3b9a21cc23678eb893e41%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5baac01f9e06c40ff7aab209d5751b3b58802c63734e33324b70a06a%40%3Cissues.flink.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5e66e286afb5506cdfe9bbf68a323e8d09614f6d1ddc806ed0224700%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5fc5786cdd640b1b0a3c643237ce0011f0a08a296b11c0e2c669022c%40%3Cdev.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r602e98daacc98934f097f07f2eed6eb07c18bfc1949c8489dc7bfcf5%40%3Cissues.flink.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r67c4f90658fde875521c949448c54c98517beecdc7f618f902c620ec%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r67e6a636cbc1958383a1cd72b7fd0cd7493360b1dd0e6c12f5761798%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r6a122c25e352eb134d01e7f4fc4d345a491c5ee9453fef6fc754d15b%40%3Ccommits.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r6a29316d758db628a1df49ca219d64caf493999b52cc77847bfba675%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r6aee7e3566cb3e51eeed2fd8786704d91f80a7581e00a787ba9f37f6%40%3Cissues.hbase.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r6d32fc3cd547f7c9a288a57c7f525f5d00a00d5d163613e0d10a23ef%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r70cebada51bc6d49138272437d8a28fe971d0197334ef906b575044c%40%3Ccommits.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r790c2926efcd062067eb18fde2486527596d7275381cfaff2f7b3890%40%3Cissues.bookkeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r7bb3cdc192e9a6f863d3ea05422f09fa1ae2b88d4663e63696ee7ef5%40%3Cdev.ranger.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r837bbcbf12e335e83ab448b1bd2c1ad7e86efdc14034b23811422e6a%40%3Ccommits.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r855b4b6814ac829ce2d48dd9d8138d07f33387e710de798ee92c011e%40%3Cissues.flink.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r86cd38a825ab2344f3e6cad570528852f29a4ffdf56ab67d75c36edf%40%3Cissues.hbase.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r8bcaf7821247b1836b10f6a1a3a3212b06272fd4cde4a859de1b78cf%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r8db1d7b3b9acc9e8d2776395e280eb9615dd7790e1da8c57039963de%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r9051e4f484a970b5566dc1870ecd9c1eb435214e2652cf3ea4d0c0cc%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r905b92099998291956eebf4f1c5d95f5a0cbcece2946cc46d32274fd%40%3Cdev.hbase.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r96ce18044880c33634c4b3fcecc57b8b90673c9364d63eba00385523%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r9924ef9357537722b28d04c98a189750b80694a19754e5057c34ca48%40%3Ccommits.pulsar.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra64d56a8a331ffd7bdcd24a9aaaeeedeacd5d639f5a683389123f898%40%3Cdev.flink.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra655e5cec74d1ddf62adacb71d398abd96f3ea2c588f6bbf048348eb%40%3Cissues.kudu.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra83096bcbfe6e1f4d54449f8a013117a0536404e9d307ab4a0d34f81%40%3Cissues.hbase.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra96c74c37ed7252f78392e1ad16442bd16ae72a4d6c8db50dd55c88b%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/racc191a1f70a4f13155e8002c61bddef2870b26441971c697436ad5d%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rae198f44c3f7ac5264045e6ba976be1703cff38dcf1609916e50210d%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb06c1e766aa45ee422e8261a8249b561784186483e8f742ea627bda4%40%3Cdev.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb51d6202ff1a773f96eaa694b7da4ad3f44922c40b3d4e1a19c2f325%40%3Ccommits.pulsar.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb523bb6c60196c5f58514b86a8585c2069a4852039b45de3818b29d2%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb592033a2462548d061a83ac9449c5ff66098751748fcd1e2d008233%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb95d42ce220ed4a4683aa17833b5006d657bc4254bc5cb03cd5e6bfb%40%3Cissues.hbase.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rbadcbcb50195f00bbd196403865ced521ca70787999583c07be38d0e%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rbed09768f496244a2e138dbbe6d2847ddf796c9c8ef9e50f2e3e30d9%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rc0087125cb15b4b78e44000f841cd37fefedfda942fd7ddf3ad1b528%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rc165e36ca7cb5417aec3f21bbc4ec00fb38ecebdd96a82cfab9bd56f%40%3Cjira.kafka.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rc73b8dd01b1be276d06bdf07883ecd93fe1a01f139a99ef30ba4308c%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rca0978b634a0c3ebee4126ec29c7f570b165fae3f8f3658754c1cbd3%40%3Cissues.kudu.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rcd163e421273e8dca1c71ea298dce3dd11b41d51c3a812e0394e6a5d%40%3Ccommits.pulsar.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rcf3752209a8b04996373bf57fdc808b3bfaa2be8702698a0323641f8%40%3Ccommits.hbase.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rcfc154eb2de23d2dc08a56100341161e1a40a8ea86c693735437e8f2%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rcfc535afd413d9934d6ee509dce234dac41fa3747a7555befb17447e%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rd25c88aad0e76240dd09f0eb34bdab924933946429e068a167adcb73%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rd4a6b7dec38ea6cd28b6f94bd4b312629a52b80be3786d5fb0e474bc%40%3Cissues.kudu.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rd8f72411fb75b98d366400ae789966373b5c3eb3f511e717caf3e49e%40%3Cissues.flink.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rdb4db3f5a9c478ca52a7b164680b88877a5a9c174e7047676c006b2c%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rdc096e13ac4501ea2e2b03a197682a313b85d3d3ec89d5ae5551b384%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rddbb4f8d5db23265bb63d14ef4b3723b438abc1589f877db11d35450%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/re4f70b62843e92163fab03b65e2aa8078693293a0c36f1cc260079ed%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/re6207ebe2ca4d44f2a6deee695ad6f27fd29d78980f1d46ed1574f91%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/re7c69756a102bebce8b8681882844a53e2f23975a189363e68ad0324%40%3Cissues.flink.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/reafc834062486adfc7be5bb8f7b7793be0d33f483678a094c3f9d468%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rf36f1114e84a3379b20587063686148e2d5a39abc0b8a66ff2a9087a%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rf87b870a22aa5c77c27900967b518a71a7d954c2952860fce3794b60%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rf934292a4a1c189827f625d567838d2c1001e4739b158638d844105b%40%3Cissues.kudu.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rfff6ff8ffb31e8a32619c79774def44b6ffbb037c128c5ad3eab7171%40%3Cissues.zookeeper.apache.org%3E",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20210604-0003/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2021/dsa-4885",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2022.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Netflix/zuul/pull/980",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/netty/netty/commit/89c241e3b1795ff257af4ad6eadc616cb2fb3dc4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/netty/netty/security/advisories/GHSA-wm47-8v5p-wjpj",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/r02e467123d45006a1dda20a38349e9c74c3a4b53e2e07be0939ecb3f%40%3Cdev.ranger.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r040a5e4d9cca2f98354b58a70b27099672276f66995c4e2e39545d0b%40%3Cissues.hbase.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r04a3e0d9f53421fb946c60cc54762b7151dc692eb4e39970a7579052%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r0b09f3e31e004fe583f677f7afa46bd30110904576c13c5ac818ac2c%40%3Cissues.flink.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r15f66ada9a5faf4bac69d9e7c4521cedfefa62df9509881603791969%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r16c4b55ac82be72f28adad4f8061477e5f978199d5725691dcc82c24%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r1908a34b9cc7120e5c19968a116ddbcffea5e9deb76c2be4fa461904%40%3Cdev.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r1bca0b81193b74a451fc6d687ab58ef3a1f5ec40f6c61561d8dd9509%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r22adb45fe902aeafcd0a1c4db13984224a667676c323c66db3af38a1%40%3Ccommits.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r22b2f34447d71c9a0ad9079b7860323d5584fb9b40eb42668c21eaf1%40%3Cissues.hbase.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r268850f26639ebe249356ed6d8edb54ee8943be6f200f770784fb190%40%3Cissues.hbase.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r27b7e5a588ec826b15f38c40be500c50073400019ce7b8adfd07fece%40%3Cissues.hbase.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2936730ef0a06e724b96539bc7eacfcd3628987c16b1b99c790e7b87%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r2e93ce23e04c3f0a61e987d1111d0695cb668ac4ec4edbf237bd3e80%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r312ce5bd3c6bf08c138349b507b6f1c25fe9cf40b6f2b0014c9d12b1%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r32b0b640ad2be3b858f0af51c68a7d5c5a66a462c8bbb93699825cd3%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r33eb06b05afbc7df28d31055cae0cb3fd36cab808c884bf6d680bea5%40%3Cdev.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r393a339ab0b63ef9e6502253eeab26e7643b3e69738d5948b2b1d064%40%3Cissues.hbase.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r3c293431c781696681abbfe1c573c2d9dcdae6fd3ff330ea22f0433f%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r3c4596b9b37f5ae91628ccf169d33cd5a0da4b16b6c39d5bad8e03f3%40%3Cdev.jackrabbit.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r3ff9e735ca33612d900607dc139ebd38a64cadc6bce292e53eb86d7f%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r490ca5611c150d193b320a2608209180713b7c68e501b67b0cffb925%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r4ea2f1a9d79d4fc1896e085f31fb60a21b1770d0a26a5250f849372d%40%3Cissues.kudu.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5232e33a1f3b310a3e083423f736f3925ebdb150844d60ac582809f8%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5470456cf1409a99893ae9dd57439799f6dc1a60fda90e11570f66fe%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r57245853c7245baab09eae08728c52b58fd77666538092389cc3e882%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r584cf871f188c406d8bd447ff4e2fd9817fca862436c064d0951a071%40%3Ccommits.pulsar.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r59bac5c09f7a4179b9e2460e8f41c278aaf3b9a21cc23678eb893e41%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5baac01f9e06c40ff7aab209d5751b3b58802c63734e33324b70a06a%40%3Cissues.flink.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5e66e286afb5506cdfe9bbf68a323e8d09614f6d1ddc806ed0224700%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r5fc5786cdd640b1b0a3c643237ce0011f0a08a296b11c0e2c669022c%40%3Cdev.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r602e98daacc98934f097f07f2eed6eb07c18bfc1949c8489dc7bfcf5%40%3Cissues.flink.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r67c4f90658fde875521c949448c54c98517beecdc7f618f902c620ec%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r67e6a636cbc1958383a1cd72b7fd0cd7493360b1dd0e6c12f5761798%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r6a122c25e352eb134d01e7f4fc4d345a491c5ee9453fef6fc754d15b%40%3Ccommits.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r6a29316d758db628a1df49ca219d64caf493999b52cc77847bfba675%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r6aee7e3566cb3e51eeed2fd8786704d91f80a7581e00a787ba9f37f6%40%3Cissues.hbase.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r6d32fc3cd547f7c9a288a57c7f525f5d00a00d5d163613e0d10a23ef%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r70cebada51bc6d49138272437d8a28fe971d0197334ef906b575044c%40%3Ccommits.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r790c2926efcd062067eb18fde2486527596d7275381cfaff2f7b3890%40%3Cissues.bookkeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r7bb3cdc192e9a6f863d3ea05422f09fa1ae2b88d4663e63696ee7ef5%40%3Cdev.ranger.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r837bbcbf12e335e83ab448b1bd2c1ad7e86efdc14034b23811422e6a%40%3Ccommits.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r855b4b6814ac829ce2d48dd9d8138d07f33387e710de798ee92c011e%40%3Cissues.flink.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r86cd38a825ab2344f3e6cad570528852f29a4ffdf56ab67d75c36edf%40%3Cissues.hbase.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r8bcaf7821247b1836b10f6a1a3a3212b06272fd4cde4a859de1b78cf%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r8db1d7b3b9acc9e8d2776395e280eb9615dd7790e1da8c57039963de%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r9051e4f484a970b5566dc1870ecd9c1eb435214e2652cf3ea4d0c0cc%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r905b92099998291956eebf4f1c5d95f5a0cbcece2946cc46d32274fd%40%3Cdev.hbase.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r96ce18044880c33634c4b3fcecc57b8b90673c9364d63eba00385523%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r9924ef9357537722b28d04c98a189750b80694a19754e5057c34ca48%40%3Ccommits.pulsar.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra64d56a8a331ffd7bdcd24a9aaaeeedeacd5d639f5a683389123f898%40%3Cdev.flink.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra655e5cec74d1ddf62adacb71d398abd96f3ea2c588f6bbf048348eb%40%3Cissues.kudu.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra83096bcbfe6e1f4d54449f8a013117a0536404e9d307ab4a0d34f81%40%3Cissues.hbase.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/ra96c74c37ed7252f78392e1ad16442bd16ae72a4d6c8db50dd55c88b%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/racc191a1f70a4f13155e8002c61bddef2870b26441971c697436ad5d%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rae198f44c3f7ac5264045e6ba976be1703cff38dcf1609916e50210d%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb06c1e766aa45ee422e8261a8249b561784186483e8f742ea627bda4%40%3Cdev.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb51d6202ff1a773f96eaa694b7da4ad3f44922c40b3d4e1a19c2f325%40%3Ccommits.pulsar.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb523bb6c60196c5f58514b86a8585c2069a4852039b45de3818b29d2%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb592033a2462548d061a83ac9449c5ff66098751748fcd1e2d008233%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rb95d42ce220ed4a4683aa17833b5006d657bc4254bc5cb03cd5e6bfb%40%3Cissues.hbase.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rbadcbcb50195f00bbd196403865ced521ca70787999583c07be38d0e%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rbed09768f496244a2e138dbbe6d2847ddf796c9c8ef9e50f2e3e30d9%40%3Cnotifications.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rc0087125cb15b4b78e44000f841cd37fefedfda942fd7ddf3ad1b528%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rc165e36ca7cb5417aec3f21bbc4ec00fb38ecebdd96a82cfab9bd56f%40%3Cjira.kafka.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rc73b8dd01b1be276d06bdf07883ecd93fe1a01f139a99ef30ba4308c%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rca0978b634a0c3ebee4126ec29c7f570b165fae3f8f3658754c1cbd3%40%3Cissues.kudu.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rcd163e421273e8dca1c71ea298dce3dd11b41d51c3a812e0394e6a5d%40%3Ccommits.pulsar.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rcf3752209a8b04996373bf57fdc808b3bfaa2be8702698a0323641f8%40%3Ccommits.hbase.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rcfc154eb2de23d2dc08a56100341161e1a40a8ea86c693735437e8f2%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rcfc535afd413d9934d6ee509dce234dac41fa3747a7555befb17447e%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rd25c88aad0e76240dd09f0eb34bdab924933946429e068a167adcb73%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rd4a6b7dec38ea6cd28b6f94bd4b312629a52b80be3786d5fb0e474bc%40%3Cissues.kudu.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rd8f72411fb75b98d366400ae789966373b5c3eb3f511e717caf3e49e%40%3Cissues.flink.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rdb4db3f5a9c478ca52a7b164680b88877a5a9c174e7047676c006b2c%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rdc096e13ac4501ea2e2b03a197682a313b85d3d3ec89d5ae5551b384%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rddbb4f8d5db23265bb63d14ef4b3723b438abc1589f877db11d35450%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/re4f70b62843e92163fab03b65e2aa8078693293a0c36f1cc260079ed%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/re6207ebe2ca4d44f2a6deee695ad6f27fd29d78980f1d46ed1574f91%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/re7c69756a102bebce8b8681882844a53e2f23975a189363e68ad0324%40%3Cissues.flink.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/reafc834062486adfc7be5bb8f7b7793be0d33f483678a094c3f9d468%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rf36f1114e84a3379b20587063686148e2d5a39abc0b8a66ff2a9087a%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rf87b870a22aa5c77c27900967b518a71a7d954c2952860fce3794b60%40%3Ccommits.servicecomb.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rf934292a4a1c189827f625d567838d2c1001e4739b158638d844105b%40%3Cissues.kudu.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/rfff6ff8ffb31e8a32619c79774def44b6ffbb037c128c5ad3eab7171%40%3Cissues.zookeeper.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20210604-0003/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2021/dsa-4885",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2022.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:16.828145",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "netty",
    "owner": "netty",
    "created_at": "2010-11-09T09:22:21Z",
    "updated_at": "2025-01-14T09:10:40Z",
    "pushed_at": "2025-01-14T12:48:52Z",
    "size": 92623,
    "stars": 33671,
    "forks": 15993,
    "open_issues": 609,
    "watchers": 33671,
    "has_security_policy": false,
    "default_branch": "4.1",
    "protected_branches": [
      "3.2",
      "3.5",
      "3.6",
      "3.7",
      "3.8",
      "3.9",
      "3.10",
      "main"
    ],
    "languages": {
      "Java": 19621935,
      "C": 228044,
      "HTML": 21029,
      "Shell": 18570,
      "JavaScript": 16232,
      "Makefile": 1814,
      "Groovy": 1755,
      "Dockerfile": 1116,
      "CSS": 49
    },
    "commit_activity": {
      "total_commits_last_year": 406,
      "avg_commits_per_week": 7.8076923076923075,
      "days_active_last_year": 156
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:57:47.084896"
  }
}