{
  "cve_id": "CVE-2021-21298",
  "github_data": {
    "repository": "node-red/node-red",
    "fix_commit": "74db3e17d075f23d9c95d7871586cf461524c456",
    "related_commits": [
      "74db3e17d075f23d9c95d7871586cf461524c456",
      "74db3e17d075f23d9c95d7871586cf461524c456"
    ],
    "patch_url": "https://github.com/node-red/node-red/commit/74db3e17d075f23d9c95d7871586cf461524c456.patch",
    "fix_commit_details": {
      "sha": "74db3e17d075f23d9c95d7871586cf461524c456",
      "commit_date": "2021-02-01T13:39:39Z",
      "author": {
        "login": "knolleary",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Restrict project file access to inside the project directory",
        "length": 60,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 39,
        "additions": 36,
        "deletions": 3
      },
      "files": [
        {
          "filename": "packages/node_modules/@node-red/runtime/lib/storage/localfilesystem/projects/Project.js",
          "status": "modified",
          "additions": 19,
          "deletions": 1,
          "patch": "@@ -305,6 +305,9 @@ Project.prototype.update = function (user, data) {\n                 return Promise.reject(\"Invalid package file: \"+data.files.package)\n             }\n             var root = data.files.package.substring(0,data.files.package.length-12);\n+            if (/^\\.\\./.test(fspath.relative(this.path,fspath.join(this.path,data.files.package)))) {\n+                return Promise.reject(\"Invalid package file: \"+data.files.package)\n+            }\n             this.paths.root = root;\n             this.paths['package.json'] = data.files.package;\n             globalProjectSettings.projects[this.name].rootPath = root;\n@@ -322,12 +325,18 @@ Project.prototype.update = function (user, data) {\n         }\n \n         if (data.files.hasOwnProperty('flow') && this.package['node-red'].settings.flowFile !== data.files.flow.substring(this.paths.root.length)) {\n+            if (/^\\.\\./.test(fspath.relative(this.path,fspath.join(this.path,data.files.flow)))) {\n+                return Promise.reject(\"Invalid flow file: \"+data.files.flow)\n+            }\n             this.paths.flowFile = data.files.flow;\n             this.package['node-red'].settings.flowFile = data.files.flow.substring(this.paths.root.length);\n             savePackage = true;\n             flowFilesChanged = true;\n         }\n         if (data.files.hasOwnProperty('credentials') && this.package['node-red'].settings.credentialsFile !== data.files.credentials.substring(this.paths.root.length)) {\n+            if (/^\\.\\./.test(fspath.relative(this.path,fspath.join(this.path,data.files.credentials)))) {\n+                return Promise.reject(\"Invalid credentials file: \"+data.files.credentials)\n+            }\n             this.paths.credentialsFile = data.files.credentials;\n             this.package['node-red'].settings.credentialsFile = data.files.credentials.substring(this.paths.root.length);\n             // Don't know if the credSecret is invalid or not so clear the flag\n@@ -490,6 +499,10 @@ Project.prototype.getFile = function (filePath,treeish) {\n     if (treeish !== \"_\") {\n         return gitTools.getFile(this.path, filePath, treeish);\n     } else {\n+        let fullPath = fspath.join(this.path,filePath);\n+        if (/^\\.\\./.test(fspath.relative(this.path,fullPath))) {\n+            throw new Error(\"Invalid file name\")\n+        }\n         return fs.readFile(fspath.join(this.path,filePath),\"utf8\");\n     }\n };\n@@ -639,6 +652,11 @@ Project.prototype.pull = function (user,remoteBranchName,setRemote,allowUnrelate\n \n Project.prototype.resolveMerge = function (file,resolutions) {\n     var filePath = fspath.join(this.path,file);\n+\n+    if (/^\\.\\./.test(fspath.relative(this.path,filePath))) {\n+        throw new Error(\"Invalid file name\")\n+    }\n+\n     var self = this;\n     if (typeof resolutions === 'string') {\n         return util.writeFile(filePath, resolutions).then(function() {\n@@ -1062,7 +1080,7 @@ function loadProject(projectPath) {\n function init(_settings, _runtime) {\n     settings = _settings;\n     runtime = _runtime;\n-    projectsDir = fspath.join(settings.userDir,\"projects\");\n+    projectsDir = fspath.resolve(fspath.join(settings.userDir,\"projects\"));\n     authCache.init();\n }\n "
        },
        {
          "filename": "packages/node_modules/@node-red/runtime/lib/storage/localfilesystem/projects/index.js",
          "status": "modified",
          "additions": 17,
          "deletions": 2,
          "patch": "@@ -110,7 +110,7 @@ function init(_settings, _runtime) {\n                     globalGitUser = gitConfig.user;\n                     Projects.init(settings,runtime);\n                     sshTools.init(settings);\n-                    projectsDir = fspath.join(settings.userDir,\"projects\");\n+                    projectsDir = fspath.resolve(fspath.join(settings.userDir,\"projects\"));\n                     if (!settings.readOnly) {\n                         return fs.ensureDir(projectsDir)\n                         //TODO: this is accessing settings from storage directly as settings\n@@ -207,9 +207,16 @@ function getBackupFilename(filename) {\n }\n \n function loadProject(name) {\n+    let fullPath = fspath.resolve(fspath.join(projectsDir,name));\n     var projectPath = name;\n     if (projectPath.indexOf(fspath.sep) === -1) {\n-        projectPath = fspath.join(projectsDir,name);\n+        projectPath = fullPath;\n+    } else {\n+        // Ensure this project dir is under projectsDir;\n+        let relativePath = fspath.relative(projectsDir,fullPath);\n+        if (/^\\.\\./.test(relativePath)) {\n+            throw new Error(\"Invalid project name\")\n+        }\n     }\n     return Projects.load(projectPath).then(function(project) {\n         activeProject = project;\n@@ -234,6 +241,10 @@ function deleteProject(user, name) {\n         throw e;\n     }\n     var projectPath = fspath.join(projectsDir,name);\n+    let relativePath = fspath.relative(projectsDir,projectPath);\n+    if (/^\\.\\./.test(relativePath)) {\n+        throw new Error(\"Invalid project name\")\n+    }\n     return Projects.delete(user, projectPath);\n }\n \n@@ -392,6 +403,10 @@ function createProject(user, metadata) {\n         metadata.files.credentialSecret = currentEncryptionKey;\n     }\n     metadata.path = fspath.join(projectsDir,metadata.name);\n+    if (/^\\.\\./.test(fspath.relative(projectsDir,metadata.path))) {\n+        throw new Error(\"Invalid project name\")\n+    }\n+\n     return Projects.create(user, metadata).then(function(p) {\n         return setActiveProject(user, p.name);\n     }).then(function() {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3838e4e605b848189ef3156afd300fc68c208e9a",
            "date": "2025-01-13T16:44:29Z",
            "author_login": "knolleary"
          },
          {
            "sha": "3da22882e9eb8281bdd50bd397857d3b74aa6b02",
            "date": "2025-01-07T16:30:35Z",
            "author_login": "natcl"
          },
          {
            "sha": "1e8f840993052b16427e2556545fe6ea40a409d1",
            "date": "2024-12-20T11:12:47Z",
            "author_login": "knolleary"
          },
          {
            "sha": "4845a1f7ebdcecd3091fe35328eb55fa0ea2eed2",
            "date": "2024-12-20T11:06:08Z",
            "author_login": "knolleary"
          },
          {
            "sha": "a0952d9a07f2b0b3766c341c520218254bfa0166",
            "date": "2024-12-20T11:04:58Z",
            "author_login": "knolleary"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "Node-Red is a low-code programming for event-driven applications built using nodejs. Node-RED 1.2.7 and earlier has a vulnerability which allows arbitrary path traversal via the Projects API. If the Projects feature is enabled, a user with `projects.read` permission is able to access any file via the Projects API. The issue has been patched in Node-RED 1.2.8. The vulnerability applies only to the Projects feature which is not enabled by default in Node-RED. The primary workaround is not give untrusted users read access to the Node-RED editor.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-02-26T17:15:12.337",
    "last_modified": "2024-11-21T05:47:58.150",
    "fix_date": "2021-02-01T13:39:39Z"
  },
  "references": [
    {
      "url": "https://github.com/node-red/node-red/commit/74db3e17d075f23d9c95d7871586cf461524c456",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/node-red/node-red/releases/tag/1.2.8",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/node-red/node-red/security/advisories/GHSA-m33v-338h-4v9f",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/%40node-red/runtime",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/node-red/node-red/commit/74db3e17d075f23d9c95d7871586cf461524c456",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/node-red/node-red/releases/tag/1.2.8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/node-red/node-red/security/advisories/GHSA-m33v-338h-4v9f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/%40node-red/runtime",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:16.808678",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "node-red",
    "owner": "node-red",
    "created_at": "2013-09-05T13:30:47Z",
    "updated_at": "2025-01-14T06:27:19Z",
    "pushed_at": "2025-01-13T16:44:29Z",
    "size": 59367,
    "stars": 20222,
    "forks": 3465,
    "open_issues": 412,
    "watchers": 20222,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 2534646,
      "HTML": 5974,
      "Shell": 265,
      "CSS": 44
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:35:20.049819"
  }
}