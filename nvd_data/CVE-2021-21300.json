{
  "cve_id": "CVE-2021-21300",
  "github_data": {
    "repository": "git/git",
    "fix_commit": "684dd4c2b414bcf648505e74498a608f28de4592",
    "related_commits": [
      "684dd4c2b414bcf648505e74498a608f28de4592",
      "684dd4c2b414bcf648505e74498a608f28de4592"
    ],
    "patch_url": "https://github.com/git/git/commit/684dd4c2b414bcf648505e74498a608f28de4592.patch",
    "fix_commit_details": {
      "sha": "684dd4c2b414bcf648505e74498a608f28de4592",
      "commit_date": "2020-12-10T13:27:55Z",
      "author": {
        "login": "matheustavares",
        "type": "User",
        "stats": {
          "total_commits": 96,
          "average_weekly_commits": 0.09311348205625607,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 35
        }
      },
      "commit_message": {
        "title": "checkout: fix bug that makes checkout follow symlinks in leading path",
        "length": 3377,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 144,
        "additions": 141,
        "deletions": 3
      },
      "files": [
        {
          "filename": "cache.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1569,6 +1569,7 @@ extern int has_symlink_leading_path(const char *name, int len);\n extern int threaded_has_symlink_leading_path(struct cache_def *, const char *, int);\n extern int check_leading_path(const char *name, int len);\n extern int has_dirs_only_path(const char *name, int len, int prefix_len);\n+extern void invalidate_lstat_cache(void);\n extern void schedule_dir_for_removal(const char *name, int len);\n extern void remove_scheduled_dirs(void);\n "
        },
        {
          "filename": "compat/mingw.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -283,6 +283,8 @@ int mingw_rmdir(const char *pathname)\n \t       ask_yes_no_if_possible(\"Deletion of directory '%s' failed. \"\n \t\t\t\"Should I try again?\", pathname))\n \t       ret = _wrmdir(wpathname);\n+\tif (!ret)\n+\t\tinvalidate_lstat_cache();\n \treturn ret;\n }\n "
        },
        {
          "filename": "git-compat-util.h",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -338,6 +338,11 @@ typedef uintmax_t timestamp_t;\n #define _PATH_DEFPATH \"/usr/local/bin:/usr/bin:/bin\"\n #endif\n \n+int lstat_cache_aware_rmdir(const char *path);\n+#if !defined(__MINGW32__) && !defined(_MSC_VER)\n+#define rmdir lstat_cache_aware_rmdir\n+#endif\n+\n #ifndef has_dos_drive_prefix\n static inline int git_has_dos_drive_prefix(const char *path)\n {"
        },
        {
          "filename": "symlinks.c",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": "@@ -267,6 +267,13 @@ int has_dirs_only_path(const char *name, int len, int prefix_len)\n  */\n static int threaded_has_dirs_only_path(struct cache_def *cache, const char *name, int len, int prefix_len)\n {\n+\t/*\n+\t * Note: this function is used by the checkout machinery, which also\n+\t * takes care to properly reset the cache when it performs an operation\n+\t * that would leave the cache outdated. If this function starts caching\n+\t * anything else besides FL_DIR, remember to also invalidate the cache\n+\t * when creating or deleting paths that might be in the cache.\n+\t */\n \treturn lstat_cache(cache, name, len,\n \t\t\t   FL_DIR|FL_FULLPATH, prefix_len) &\n \t\tFL_DIR;\n@@ -321,3 +328,20 @@ void remove_scheduled_dirs(void)\n {\n \tdo_remove_scheduled_dirs(0);\n }\n+\n+void invalidate_lstat_cache(void)\n+{\n+\treset_lstat_cache(&default_cache);\n+}\n+\n+#undef rmdir\n+int lstat_cache_aware_rmdir(const char *path)\n+{\n+\t/* Any change in this function must be made also in `mingw_rmdir()` */\n+\tint ret = rmdir(path);\n+\n+\tif (!ret)\n+\t\tinvalidate_lstat_cache();\n+\n+\treturn ret;\n+}"
        },
        {
          "filename": "t/t0021-conversion.sh",
          "status": "modified",
          "additions": 45,
          "deletions": 0,
          "patch": "@@ -817,4 +817,49 @@ test_expect_success PERL 'invalid file in delayed checkout' '\n \tgrep \"error: external filter .* signaled that .unfiltered. is now available although it has not been delayed earlier\" git-stderr.log\n '\n \n+for mode in 'case' 'utf-8'\n+do\n+\tcase \"$mode\" in\n+\tcase)\tdir='A' symlink='a' mode_prereq='CASE_INSENSITIVE_FS' ;;\n+\tutf-8)\n+\t\tdir=$(printf \"\\141\\314\\210\") symlink=$(printf \"\\303\\244\")\n+\t\tmode_prereq='UTF8_NFD_TO_NFC' ;;\n+\tesac\n+\n+\ttest_expect_success PERL,SYMLINKS,$mode_prereq \\\n+\t\"delayed checkout with $mode-collision don't write to the wrong place\" '\n+\t\ttest_config_global filter.delay.process \\\n+\t\t\t\"\\\"$TEST_ROOT/rot13-filter.pl\\\" --always-delay delayed.log clean smudge delay\" &&\n+\t\ttest_config_global filter.delay.required true &&\n+\n+\t\tgit init $mode-collision &&\n+\t\t(\n+\t\t\tcd $mode-collision &&\n+\t\t\tmkdir target-dir &&\n+\n+\t\t\tempty_oid=$(printf \"\" | git hash-object -w --stdin) &&\n+\t\t\tsymlink_oid=$(printf \"%s\" \"$PWD/target-dir\" | git hash-object -w --stdin) &&\n+\t\t\tattr_oid=$(echo \"$dir/z filter=delay\" | git hash-object -w --stdin) &&\n+\n+\t\t\tcat >objs <<-EOF &&\n+\t\t\t100644 blob $empty_oid\t$dir/x\n+\t\t\t100644 blob $empty_oid\t$dir/y\n+\t\t\t100644 blob $empty_oid\t$dir/z\n+\t\t\t120000 blob $symlink_oid\t$symlink\n+\t\t\t100644 blob $attr_oid\t.gitattributes\n+\t\t\tEOF\n+\n+\t\t\tgit update-index --index-info <objs &&\n+\t\t\tgit commit -m \"test commit\"\n+\t\t) &&\n+\n+\t\tgit clone $mode-collision $mode-collision-cloned &&\n+\t\t# Make sure z was really delayed\n+\t\tgrep \"IN: smudge $dir/z .* \\\\[DELAYED\\\\]\" $mode-collision-cloned/delayed.log &&\n+\n+\t\t# Should not create $dir/z at $symlink/z\n+\t\ttest_path_is_missing $mode-collision/target-dir/z\n+\t'\n+done\n+\n test_done"
        },
        {
          "filename": "t/t0021/rot13-filter.pl",
          "status": "modified",
          "additions": 18,
          "deletions": 3,
          "patch": "@@ -2,9 +2,15 @@\n # Example implementation for the Git filter protocol version 2\n # See Documentation/gitattributes.txt, section \"Filter Protocol\"\n #\n-# The first argument defines a debug log file that the script write to.\n-# All remaining arguments define a list of supported protocol\n-# capabilities (\"clean\", \"smudge\", etc).\n+# Usage: rot13-filter.pl [--always-delay] <log path> <capabilities>\n+#\n+# Log path defines a debug log file that the script writes to. The\n+# subsequent arguments define a list of supported protocol capabilities\n+# (\"clean\", \"smudge\", etc).\n+#\n+# When --always-delay is given all pathnames with the \"can-delay\" flag\n+# that don't appear on the list bellow are delayed with a count of 1\n+# (see more below).\n #\n # This implementation supports special test cases:\n # (1) If data with the pathname \"clean-write-fail.r\" is processed with\n@@ -53,6 +59,13 @@ sub gitperllib {\n use Git::Packet;\n \n my $MAX_PACKET_CONTENT_SIZE = 65516;\n+\n+my $always_delay = 0;\n+if ( $ARGV[0] eq '--always-delay' ) {\n+\t$always_delay = 1;\n+\tshift @ARGV;\n+}\n+\n my $log_file                = shift @ARGV;\n my @capabilities            = @ARGV;\n \n@@ -134,6 +147,8 @@ sub rot13 {\n \t\t\tif ( $buffer eq \"can-delay=1\" ) {\n \t\t\t\tif ( exists $DELAY{$pathname} and $DELAY{$pathname}{\"requested\"} == 0 ) {\n \t\t\t\t\t$DELAY{$pathname}{\"requested\"} = 1;\n+\t\t\t\t} elsif ( !exists $DELAY{$pathname} and $always_delay ) {\n+\t\t\t\t\t$DELAY{$pathname} = { \"requested\" => 1, \"count\" => 1 };\n \t\t\t\t}\n \t\t\t} else {\n \t\t\t\tdie \"Unknown message '$buffer'\";"
        },
        {
          "filename": "t/t2006-checkout-index-basic.sh",
          "status": "modified",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -21,4 +21,50 @@ test_expect_success 'checkout-index -h in broken repository' '\n \ttest_i18ngrep \"[Uu]sage\" broken/usage\n '\n \n+for mode in 'case' 'utf-8'\n+do\n+\tcase \"$mode\" in\n+\tcase)\tdir='A' symlink='a' mode_prereq='CASE_INSENSITIVE_FS' ;;\n+\tutf-8)\n+\t\tdir=$(printf \"\\141\\314\\210\") symlink=$(printf \"\\303\\244\")\n+\t\tmode_prereq='UTF8_NFD_TO_NFC' ;;\n+\tesac\n+\n+\ttest_expect_success SYMLINKS,$mode_prereq \\\n+\t\"checkout-index with $mode-collision don't write to the wrong place\" '\n+\t\tgit init $mode-collision &&\n+\t\t(\n+\t\t\tcd $mode-collision &&\n+\t\t\tmkdir target-dir &&\n+\n+\t\t\tempty_obj_hex=$(git hash-object -w --stdin </dev/null) &&\n+\t\t\tsymlink_hex=$(printf \"%s\" \"$PWD/target-dir\" | git hash-object -w --stdin) &&\n+\n+\t\t\tcat >objs <<-EOF &&\n+\t\t\t100644 blob ${empty_obj_hex}\t${dir}/x\n+\t\t\t100644 blob ${empty_obj_hex}\t${dir}/y\n+\t\t\t100644 blob ${empty_obj_hex}\t${dir}/z\n+\t\t\t120000 blob ${symlink_hex}\t${symlink}\n+\t\t\tEOF\n+\n+\t\t\tgit update-index --index-info <objs &&\n+\n+\t\t\t# Note: the order is important here to exercise the\n+\t\t\t# case where the file at ${dir} has its type changed by\n+\t\t\t# the time Git tries to check out ${dir}/z.\n+\t\t\t#\n+\t\t\t# Also, we use core.precomposeUnicode=false because we\n+\t\t\t# want Git to treat the UTF-8 paths transparently on\n+\t\t\t# Mac OS, matching what is in the index.\n+\t\t\t#\n+\t\t\tgit -c core.precomposeUnicode=false checkout-index -f \\\n+\t\t\t\t${dir}/x ${dir}/y ${symlink} ${dir}/z &&\n+\n+\t\t\t# Should not create ${dir}/z at ${symlink}/z\n+\t\t\ttest_path_is_missing target-dir/z\n+\n+\t\t)\n+\t'\n+done\n+\n test_done"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "757161efcca150a9a96b312d9e780a071e601a03",
            "date": "2025-01-13T21:02:01Z",
            "author_login": "gitster"
          },
          {
            "sha": "46afc2ba91a3c7fa8f1591c0a6a1b7c4ad0d2a07",
            "date": "2025-01-13T21:00:48Z",
            "author_login": "gitster"
          },
          {
            "sha": "f93ff170b93a1782659637824b25923245ac9dd1",
            "date": "2025-01-13T20:57:19Z",
            "author_login": "gitster"
          },
          {
            "sha": "65faad6d841c29d4545e9cf3676d75f4e6e4872c",
            "date": "2025-01-13T20:55:26Z",
            "author_login": "gitster"
          },
          {
            "sha": "fbe8d3079d4a96aeb4e4529cc93cc0043b759a05",
            "date": "2025-01-10T17:20:20Z",
            "author_login": "gitster"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-59",
    "description": "Git is an open-source distributed revision control system. In affected versions of Git a specially crafted repository that contains symbolic links as well as files using a clean/smudge filter such as Git LFS, may cause just-checked out script to be executed while cloning onto a case-insensitive file system such as NTFS, HFS+ or APFS (i.e. the default file systems on Windows and macOS). Note that clean/smudge filters have to be configured for that. Git for Windows configures Git LFS by default, and is therefore vulnerable. The problem has been patched in the versions published on Tuesday, March 9th, 2021. As a workaound, if symbolic link support is disabled in Git (e.g. via `git config --global core.symlinks false`), the described attack won't work. Likewise, if no clean/smudge filters such as Git LFS are configured globally (i.e. _before_ cloning), the attack is foiled. As always, it is best to avoid cloning repositories from untrusted sources. The earliest impacted version is 2.14.2. The fix versions are: 2.30.1, 2.29.3, 2.28.1, 2.27.1, 2.26.3, 2.25.5, 2.24.4, 2.23.4, 2.22.5, 2.21.4, 2.20.5, 2.19.6, 2.18.5, 2.17.62.17.6.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-03-09T20:15:13.260",
    "last_modified": "2024-11-21T05:47:58.407",
    "fix_date": "2020-12-10T13:27:55Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/163978/Git-LFS-Clone-Command-Execution.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2021/Apr/60",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2021/03/09/3",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://git-scm.com/docs/git-config#Documentation/git-config.txt-coresymlinks",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://git-scm.com/docs/gitattributes#_filter",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/git/git/commit/684dd4c2b414bcf648505e74498a608f28de4592",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/git/git/security/advisories/GHSA-8prw-h3cq-mghm",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/10/msg00014.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/BBPNGLQSYJHLZZ37BO42YY6S5OTIF4L4/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LCLJJLKKMS5WRFO6C475AOUZTWQLIARX/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LMXX2POK5X576BSDWSXGU7EIK6I72ERU/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lore.kernel.org/git/xmqqim6019yd.fsf%40gitster.c.googlers.com/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202104-01",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT212320",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/163978/Git-LFS-Clone-Command-Execution.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2021/Apr/60",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2021/03/09/3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://git-scm.com/docs/git-config#Documentation/git-config.txt-coresymlinks",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://git-scm.com/docs/gitattributes#_filter",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/git/git/commit/684dd4c2b414bcf648505e74498a608f28de4592",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/git/git/security/advisories/GHSA-8prw-h3cq-mghm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/10/msg00014.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/BBPNGLQSYJHLZZ37BO42YY6S5OTIF4L4/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LCLJJLKKMS5WRFO6C475AOUZTWQLIARX/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LMXX2POK5X576BSDWSXGU7EIK6I72ERU/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lore.kernel.org/git/xmqqim6019yd.fsf%40gitster.c.googlers.com/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202104-01",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT212320",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:16.829568",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "git",
    "owner": "git",
    "created_at": "2008-07-23T14:21:26Z",
    "updated_at": "2025-01-14T14:01:56Z",
    "pushed_at": "2025-01-13T19:45:30Z",
    "size": 271691,
    "stars": 53164,
    "forks": 25796,
    "open_issues": 201,
    "watchers": 53164,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 11381600,
      "Shell": 8590199,
      "Perl": 1166701,
      "Tcl": 852369,
      "Python": 183463,
      "Makefile": 168746,
      "Meson": 106388,
      "JavaScript": 49713,
      "CMake": 46584,
      "M4": 38265,
      "Roff": 26859,
      "C++": 26403,
      "SmPL": 15676,
      "Go": 15064,
      "CSS": 10664,
      "Batchfile": 9822,
      "Emacs Lisp": 660,
      "PowerShell": 478,
      "ReScript": 92
    },
    "commit_activity": {
      "total_commits_last_year": 3693,
      "avg_commits_per_week": 71.01923076923077,
      "days_active_last_year": 312
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:39:36.932072"
  }
}