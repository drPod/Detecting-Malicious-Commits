{
  "cve_id": "CVE-2021-21301",
  "github_data": {
    "repository": "wireapp/wire-ios",
    "fix_commit": "7e3c30120066c9b10e50cc0d20012d0849c33a40",
    "related_commits": [
      "7e3c30120066c9b10e50cc0d20012d0849c33a40",
      "7e3c30120066c9b10e50cc0d20012d0849c33a40"
    ],
    "patch_url": "https://github.com/wireapp/wire-ios/commit/7e3c30120066c9b10e50cc0d20012d0849c33a40.patch",
    "fix_commit_details": {
      "sha": "7e3c30120066c9b10e50cc0d20012d0849c33a40",
      "commit_date": "2021-02-02T08:15:56Z",
      "author": {
        "login": "David-Henner",
        "type": "User",
        "stats": {
          "total_commits": 564,
          "average_weekly_commits": 1.2181425485961124,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 175
        }
      },
      "commit_message": {
        "title": "[Fix] video capture state (#4879)",
        "length": 182,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 136,
        "additions": 130,
        "deletions": 6
      },
      "files": [
        {
          "filename": "Wire-iOS Tests/Calling/SelfVideoPreviewViewTests.swift",
          "status": "added",
          "additions": 109,
          "deletions": 0,
          "patch": "@@ -0,0 +1,109 @@\n+//\n+// Wire\n+// Copyright (C) 2021 Wire Swiss GmbH\n+//\n+// This program is free software: you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation, either version 3 of the License, or\n+// (at your option) any later version.\n+//\n+// This program is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this program. If not, see http://www.gnu.org/licenses/.\n+//\n+\n+import Foundation\n+import XCTest\n+import avs\n+\n+@testable import Wire\n+\n+class MockAVSVideoPreview: AVSVideoPreview {\n+    var isCapturing: Bool = false\n+    \n+    override func startVideoCapture() {\n+        isCapturing = true\n+    }\n+    \n+    override func stopVideoCapture() {\n+        isCapturing = false\n+    }\n+}\n+\n+class SelfVideoPreviewViewTests: XCTestCase {\n+    var sut: SelfVideoPreviewView!\n+    var stubProvider = VideoStreamStubProvider()\n+    var previewViewMock = MockAVSVideoPreview()\n+    \n+    override func setUp() {\n+        super.setUp()\n+        \n+        let stream = stubProvider.videoStream().stream\n+        sut = SelfVideoPreviewView(stream: stream, isCovered: false, shouldShowActiveSpeakerFrame: false)\n+        sut.previewView = previewViewMock\n+    }\n+    \n+    override func tearDown() {\n+        sut = nil\n+        super.tearDown()\n+    }\n+    \n+    func testCapturerState_ForVideoState_Started() {\n+        // Given\n+        previewViewMock.isCapturing = false\n+\n+        // When\n+        sut.stream = stubProvider.videoStream(videoState: .started).stream\n+\n+        // Then\n+        XCTAssertTrue(previewViewMock.isCapturing)\n+    }\n+    \n+    func testCapturerState_ForVideoState_Stopped() {\n+        // Given\n+        previewViewMock.isCapturing = false\n+        \n+        // When\n+        sut.stream = stubProvider.videoStream(videoState: .stopped).stream\n+        \n+        // Then\n+        XCTAssertFalse(previewViewMock.isCapturing)\n+    }\n+    \n+    func testCapturerState_ForVideoState_Paused() {\n+        // Given\n+        previewViewMock.isCapturing = false\n+        \n+        // When\n+        sut.stream = stubProvider.videoStream(videoState: .paused).stream\n+        \n+        // Then\n+        XCTAssertFalse(previewViewMock.isCapturing)\n+    }\n+    \n+    func testCapturerState_ForVideoState_BadConnection() {\n+        // Given\n+        previewViewMock.isCapturing = false\n+        \n+        // When\n+        sut.stream = stubProvider.videoStream(videoState: .badConnection).stream\n+        \n+        // Then\n+        XCTAssertFalse(previewViewMock.isCapturing)\n+    }\n+    \n+    func testCapturerState_ForVideoState_ScreenSharing() {\n+        // Given\n+        previewViewMock.isCapturing = false\n+        \n+        // When\n+        sut.stream = stubProvider.videoStream(videoState: .screenSharing).stream\n+        \n+        // Then\n+        XCTAssertFalse(previewViewMock.isCapturing)\n+    }\n+}"
        },
        {
          "filename": "Wire-iOS.xcodeproj/project.pbxproj",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -453,6 +453,7 @@\n \t\t636B716C23C39D6700B624D6 /* AppLockViewControllerSnapshotTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 636B716923C39D0600B624D6 /* AppLockViewControllerSnapshotTests.swift */; };\n \t\t636E57BD2386BFD9005B4FD8 /* AvailabilityStringBuilderTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 636E57BC2386BFD9005B4FD8 /* AvailabilityStringBuilderTests.swift */; };\n \t\t6370DA212577934C00B5C8F1 /* PulsingIconImageViewTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6370DA202577934C00B5C8F1 /* PulsingIconImageViewTests.swift */; };\n+\t\t6372A0F225C8438B000CCB2D /* SelfVideoPreviewViewTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6372A0F125C8438A000CCB2D /* SelfVideoPreviewViewTests.swift */; };\n \t\t6372AAA72492719100C5F307 /* GridCell.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6372AAA62492719100C5F307 /* GridCell.swift */; };\n \t\t6372AAAA249A4F2600C5F307 /* Int+Even.swift in Sources */ = {isa = PBXBuildFile; fileRef = 6372AAA9249A4F2600C5F307 /* Int+Even.swift */; };\n \t\t638332EA250282D200D18F42 /* OrientationDelta.swift in Sources */ = {isa = PBXBuildFile; fileRef = 638332E9250282D200D18F42 /* OrientationDelta.swift */; };\n@@ -2072,6 +2073,7 @@\n \t\t636B716923C39D0600B624D6 /* AppLockViewControllerSnapshotTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AppLockViewControllerSnapshotTests.swift; sourceTree = \"<group>\"; };\n \t\t636E57BC2386BFD9005B4FD8 /* AvailabilityStringBuilderTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = AvailabilityStringBuilderTests.swift; sourceTree = \"<group>\"; };\n \t\t6370DA202577934C00B5C8F1 /* PulsingIconImageViewTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = PulsingIconImageViewTests.swift; sourceTree = \"<group>\"; };\n+\t\t6372A0F125C8438A000CCB2D /* SelfVideoPreviewViewTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = SelfVideoPreviewViewTests.swift; sourceTree = \"<group>\"; };\n \t\t6372AAA62492719100C5F307 /* GridCell.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = GridCell.swift; sourceTree = \"<group>\"; };\n \t\t6372AAA9249A4F2600C5F307 /* Int+Even.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = \"Int+Even.swift\"; sourceTree = \"<group>\"; };\n \t\t638332E9250282D200D18F42 /* OrientationDelta.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = OrientationDelta.swift; sourceTree = \"<group>\"; };\n@@ -4243,6 +4245,7 @@\n \t\t\t\t6340EF95237AE93500EF8506 /* VoiceChannelVideoStreamArrangmentTests.swift */,\n \t\t\t\t6340660825B204B100C0B4BA /* VideoStreamStubProvider.swift */,\n \t\t\t\t6391628B24F6A39D0054962E /* VideoPreviewViewTests.swift */,\n+\t\t\t\t6372A0F125C8438A000CCB2D /* SelfVideoPreviewViewTests.swift */,\n \t\t\t\t16A94AF5209B04A5008A5718 /* GridViewTests.swift */,\n \t\t\t\t164B533B20A0A5E800EC8265 /* CallInfoConfigurationTests.swift */,\n \t\t\t\tD58192042091F34E003BA7EC /* CallActionsViewTests.swift */,\n@@ -8524,6 +8527,7 @@\n \t\t\t\tEFB23D0B1FC853CF0055B866 /* AccessoryTextFieldValidationTests.swift in Sources */,\n \t\t\t\tEEAC654C206BD64700365C0C /* LinkInteractionTextViewTests.swift in Sources */,\n \t\t\t\t5501FFAB22B28F330050D8FC /* MockSelfLegalHoldSubject.swift in Sources */,\n+\t\t\t\t6372A0F225C8438B000CCB2D /* SelfVideoPreviewViewTests.swift in Sources */,\n \t\t\t\t5E8FFC0621ECCC7C0052DF03 /* AuthenticationInterfaceBuilderTests.swift in Sources */,\n \t\t\t\t5EE115E1204EEC7D002AD6C2 /* CallQualityControllerTests.swift in Sources */,\n \t\t\t\tEFE043992149CE8D00BC3079 /* ContactsViewControllerSnapshotTests.swift in Sources */,"
        },
        {
          "filename": "Wire-iOS/Sources/UserInterface/Calling/VideoGridView/SelfVideoPreviewView.swift",
          "status": "modified",
          "additions": 13,
          "deletions": 2,
          "patch": "@@ -22,8 +22,15 @@ import avs\n \n final class SelfVideoPreviewView: BaseVideoPreviewView {\n     \n-    private let previewView = AVSVideoPreview()\n+    var previewView = AVSVideoPreview()\n         \n+    override var stream: Stream {\n+        didSet {\n+            guard stream != oldValue else { return }\n+            updateCaptureState()\n+        }\n+    }\n+    \n     deinit {\n         stopCapture()\n     }\n@@ -54,10 +61,14 @@ final class SelfVideoPreviewView: BaseVideoPreviewView {\n         super.didMoveToWindow()\n         \n         if window != nil {\n-            startCapture()\n+            updateCaptureState()\n         }\n     }\n     \n+    private func updateCaptureState() {\n+        stream.videoState == .some(.started) ? startCapture() : stopCapture()\n+    }\n+    \n     func startCapture() {\n         previewView.startVideoCapture()\n     }"
        },
        {
          "filename": "Wire-iOS/Sources/UserInterface/Calling/VideoGridView/VideoGridViewController.swift",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -184,10 +184,10 @@ final class VideoGridViewController: UIViewController {\n     }\n \n     private func updateSelfPreview() {\n-        guard\n-            let selfStreamId = ZMUser.selfUser()?.selfStreamId,\n-            let selfStream = stream(with: selfStreamId)\n-        else {\n+        guard let selfStreamId = ZMUser.selfUser()?.selfStreamId else { return }\n+\n+        guard let selfStream = stream(with: selfStreamId) else {\n+            (viewCache[selfStreamId] as? SelfVideoPreviewView)?.stopCapture()\n             return\n         }\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "480e9f2cd7dafb8b0fc6359689f4cff7a2a5293c",
            "date": "2025-01-14T11:23:53Z",
            "author_login": "netbe"
          },
          {
            "sha": "76cbca64ffed45db88600cbb0ae3b706aebdd4db",
            "date": "2025-01-10T09:26:16Z",
            "author_login": "caldrian"
          },
          {
            "sha": "db1b5e9da1d5803eacefea197889bd9d57409253",
            "date": "2025-01-10T09:14:17Z",
            "author_login": "caldrian"
          },
          {
            "sha": "c1d77fe5e9a0e10902f06bdd3d6655d1966db9f5",
            "date": "2025-01-10T09:06:29Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "a38e7d343b260bd1451686c4449ab44db582a556",
            "date": "2025-01-10T08:16:37Z",
            "author_login": "johnxnguyen"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Wire is an open-source collaboration platform. In Wire for iOS (iPhone and iPad) before version 3.75 there is a vulnerability where the video capture isn't stopped in a scenario where a user first has their camera enabled and then disables it. It's a privacy issue because video is streamed to the call when the user believes it is disabled. It impacts all users in video calls. This is fixed in version 3.75.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-02-11T18:15:16.910",
    "last_modified": "2024-11-21T05:47:58.573",
    "fix_date": "2021-02-02T08:15:56Z"
  },
  "references": [
    {
      "url": "https://github.com/wireapp/wire-ios/commit/7e3c30120066c9b10e50cc0d20012d0849c33a40",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-ios/pull/4879",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-ios/security/advisories/GHSA-7fg4-x8vj-qvxf",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-ios/commit/7e3c30120066c9b10e50cc0d20012d0849c33a40",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-ios/pull/4879",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-ios/security/advisories/GHSA-7fg4-x8vj-qvxf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:13.196561",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wire-ios",
    "owner": "wireapp",
    "created_at": "2022-12-22T10:26:59Z",
    "updated_at": "2025-01-14T11:54:19Z",
    "pushed_at": "2025-01-14T11:55:23Z",
    "size": 1664518,
    "stars": 74,
    "forks": 15,
    "open_issues": 28,
    "watchers": 74,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "chore/add-sz-app",
      "develop",
      "epic/prepare-for-universal-backups-WPB-14616"
    ],
    "languages": {
      "Swift": 21138814,
      "Objective-C": 3355652,
      "Ruby": 40970,
      "C": 25452,
      "Shell": 19696,
      "Python": 853
    },
    "commit_activity": {
      "total_commits_last_year": 1669,
      "avg_commits_per_week": 32.09615384615385,
      "days_active_last_year": 237
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:37:27.324669"
  }
}