{
  "cve_id": "CVE-2021-21316",
  "github_data": {
    "repository": "SAP/less-openui5",
    "fix_commit": "c0d3a8572974a20ea6cee42da11c614a54f100e8",
    "related_commits": [
      "c0d3a8572974a20ea6cee42da11c614a54f100e8",
      "c0d3a8572974a20ea6cee42da11c614a54f100e8"
    ],
    "patch_url": "https://github.com/SAP/less-openui5/commit/c0d3a8572974a20ea6cee42da11c614a54f100e8.patch",
    "fix_commit_details": {
      "sha": "c0d3a8572974a20ea6cee42da11c614a54f100e8",
      "commit_date": "2021-01-29T09:48:58Z",
      "author": {
        "login": "matz3",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[BREAKING] Security: Disable JavaScript execution in Less.js",
        "length": 327,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 219,
        "additions": 144,
        "deletions": 75
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -149,7 +149,10 @@ lib2\n Type: `object`\n \n Options for the [less](http://lesscss.org) parser (`less.Parser`).  \n-**Note:** Default of `relativeUrls` option is changed from `false` to `true`.\n+\n+**Note**\n+- Default of `relativeUrls` option is changed from `false` to `true`.\n+- Option `javascriptEnabled` has been removed. JavaScript is always disabled and cannot be enabled.\n \n ##### compiler\n "
        },
        {
          "filename": "lib/thirdparty/less/README.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -3,3 +3,7 @@\n This folder contains the `lib/less` sub-folder of [v1.6.3](https://github.com/less/less.js/tree/v1.6.3/lib/less) of the [less.js project](https://github.com/less/less.js) with commit [`ccd8ebbfdfa300b6e748e8d7c12e3dbb0efd8371`](https://github.com/less/less.js/commit/ccd8ebbfdfa300b6e748e8d7c12e3dbb0efd8371) applied on top of it to resolve https://github.com/SAP/less-openui5/issues/24.\n \n The files `browser.js` and `rhino.js` have been removed, as they are not relevant for the Node.js implementation.\n+\n+The file `tree/javascript.js` has been removed to disable JavaScript execution.\n+\n+Modifications within the files are marked with `/* BEGIN MODIFICATION */` and `/* END MODIFICATION */` comments."
        },
        {
          "filename": "lib/thirdparty/less/env.js",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -14,7 +14,9 @@\n         'compress',         // option - whether to compress\n         'processImports',   // option - whether to process imports. if false then imports will not be imported\n         'syncImport',       // option - whether to import synchronously\n-        'javascriptEnabled',// option - whether JavaScript is enabled. if undefined, defaults to true\n+        /* BEGIN MODIFICATION */\n+        // Removed 'javascriptEnabled'\n+        /* END MODIFICATION */\n         'mime',             // browser only - mime type for sheet import\n         'useFileCache',     // browser only - whether to use the per file session cache\n         'currentFileInfo'   // information about the current file - for error reporting and importing and making urls relative etc."
        },
        {
          "filename": "lib/thirdparty/less/functions.js",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -213,7 +213,11 @@ tree.functions = {\n         }\n     },\n     e: function (str) {\n-        return new(tree.Anonymous)(str instanceof tree.JavaScript ? str.evaluated : str);\n+        /* BEGIN MODIFICATION */\n+        // Removed handling of tree.JavaScript\n+        return new(tree.Anonymous)(str);\n+        /* END MODIFICATION */\n+\n     },\n     escape: function (str) {\n         return new(tree.Anonymous)(encodeURI(str.value).replace(/=/g, \"%3D\").replace(/:/g, \"%3A\").replace(/#/g, \"%23\").replace(/;/g, \"%3B\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\"));"
        },
        {
          "filename": "lib/thirdparty/less/index.js",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -112,7 +112,9 @@ require('./tree/mixin');\n require('./tree/comment');\n require('./tree/anonymous');\n require('./tree/value');\n-require('./tree/javascript');\n+/* BEGIN MODIFICATION */\n+// Removed require('./tree/javascript');\n+/* END MODIFICATION */\n require('./tree/assignment');\n require('./tree/condition');\n require('./tree/paren');"
        },
        {
          "filename": "lib/thirdparty/less/lessc_helper.js",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -31,7 +31,9 @@ var lessc_helper = {\n         console.log(\"  -M, --depends            Output a makefile import dependency list to stdout\");\n         console.log(\"  --no-color               Disable colorized output.\");\n         console.log(\"  --no-ie-compat           Disable IE compatibility checks.\");\n-        console.log(\"  --no-js                  Disable JavaScript in less files\");\n+        /* BEGIN MODIFICATION */\n+        // Removed --no-js option\n+        /* END MODIFICATION */\n         console.log(\"  -l, --lint               Syntax check only (lint).\");\n         console.log(\"  -s, --silent             Suppress output of error messages.\");\n         console.log(\"  --strict-imports         Force evaluation of imports.\");"
        },
        {
          "filename": "lib/thirdparty/less/parser.js",
          "status": "modified",
          "additions": 7,
          "deletions": 11,
          "patch": "@@ -993,27 +993,23 @@ less.Parser = function Parser(env) {\n                     }\n                 },\n \n+                /* BEGIN MODIFICATION */\n+                // Removed support for javascript\n+\n                 //\n-                // JavaScript code to be evaluated\n+                // JavaScript code (disabled)\n                 //\n                 //     `window.location.href`\n                 //\n                 javascript: function () {\n-                    var str, j = i, e;\n+                    var j = i, e;\n \n                     if (input.charAt(j) === '~') { j++; e = true; } // Escaped strings\n                     if (input.charAt(j) !== '`') { return; }\n-                    if (env.javascriptEnabled !== undefined && !env.javascriptEnabled) {\n-                        error(\"You are using JavaScript, which has been disabled.\");\n-                    }\n-\n-                    if (e) { $char('~'); }\n \n-                    str = $re(/^`([^`]*)`/);\n-                    if (str) {\n-                        return new(tree.JavaScript)(str[1], i, e);\n-                    }\n+                    error(\"You are using JavaScript, which has been disabled.\");\n                 }\n+                /* END MODIFICATION */\n             },\n \n             //"
        },
        {
          "filename": "lib/thirdparty/less/tree/javascript.js",
          "status": "removed",
          "additions": 0,
          "deletions": 58,
          "patch": "@@ -1,58 +0,0 @@\n-(function (tree) {\n-\n-tree.JavaScript = function (string, index, escaped) {\n-    this.escaped = escaped;\n-    this.expression = string;\n-    this.index = index;\n-};\n-tree.JavaScript.prototype = {\n-    type: \"JavaScript\",\n-    eval: function (env) {\n-        var result,\n-            that = this,\n-            context = {};\n-\n-        var expression = this.expression.replace(/@\\{([\\w-]+)\\}/g, function (_, name) {\n-            return tree.jsify(new(tree.Variable)('@' + name, that.index).eval(env));\n-        });\n-\n-        try {\n-            expression = new(Function)('return (' + expression + ')');\n-        } catch (e) {\n-            throw { message: \"JavaScript evaluation error: \" + e.message + \" from `\" + expression + \"`\" ,\n-                    index: this.index };\n-        }\n-\n-        var variables = env.frames[0].variables();\n-        for (var k in variables) {\n-            if (variables.hasOwnProperty(k)) {\n-                /*jshint loopfunc:true */\n-                context[k.slice(1)] = {\n-                    value: variables[k].value,\n-                    toJS: function () {\n-                        return this.value.eval(env).toCSS();\n-                    }\n-                };\n-            }\n-        }\n-\n-        try {\n-            result = expression.call(context);\n-        } catch (e) {\n-            throw { message: \"JavaScript evaluation error: '\" + e.name + ': ' + e.message.replace(/[\"]/g, \"'\") + \"'\" ,\n-                    index: this.index };\n-        }\n-        if (typeof(result) === 'number') {\n-            return new(tree.Dimension)(result);\n-        } else if (typeof(result) === 'string') {\n-            return new(tree.Quoted)('\"' + result + '\"', result, this.escaped, this.index);\n-        } else if (Array.isArray(result)) {\n-            return new(tree.Anonymous)(result.join(', '));\n-        } else {\n-            return new(tree.Anonymous)(result);\n-        }\n-    }\n-};\n-\n-})(require('../tree'));\n-"
        },
        {
          "filename": "lib/thirdparty/less/tree/quoted.js",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -22,7 +22,13 @@ tree.Quoted.prototype = {\n     eval: function (env) {\n         var that = this;\n         var value = this.value.replace(/`([^`]+)`/g, function (_, exp) {\n-            return new(tree.JavaScript)(exp, that.index, true).eval(env).value;\n+            /* BEGIN MODIFICATION */\n+            // Removed support for javascript\n+            const error = new Error(\"You are using JavaScript, which has been disabled.\");\n+            error.index = that.index;\n+            error.type = \"Syntax\";\n+            throw error;\n+            /* END MODIFICATION */\n         }).replace(/@\\{([\\w-]+)\\}/g, function (_, name) {\n             var v = new(tree.Variable)('@' + name, that.index, that.currentFileInfo).eval(env, true);\n             return (v instanceof tree.Quoted) ? v.value : v.toCSS();"
        },
        {
          "filename": "test/test.js",
          "status": "modified",
          "additions": 108,
          "deletions": 0,
          "patch": "@@ -419,6 +419,114 @@ describe(\"error handling\", function() {\n \t\t\tassert.ok(err);\n \t\t});\n \t});\n+\n+\tit(\"should throw error when using inline JavaScript\", function() {\n+\t\tconst lessInput = `.rule {\n+\t@var: \\`(function(){ return \"Cat\"; })()\\`;\n+\tcolor: @var;\n+}`;\n+\t\treturn new Builder().build({\n+\t\t\tlessInput\n+\t\t}).then(function(res) {\n+\t\t\t// no resolve\n+\t\t\tassert.ok(false, `Expected build to fail but finished with content:\\n${res.css}`);\n+\t\t}, function(err) {\n+\t\t\tassert.equal(err.message, \"You are using JavaScript, which has been disabled.\");\n+\t\t\tassert.ok(err);\n+\t\t});\n+\t});\n+\n+\tit(\"should throw error when using quoted inline JavaScript\", function() {\n+\t\tconst lessInput = `.rule {\n+\t@var: \"\\`(function(){ return 'Cat'; })()\\`\";\n+\tcolor: @var;\n+}`;\n+\t\treturn new Builder().build({\n+\t\t\tlessInput\n+\t\t}).then(function(res) {\n+\t\t\t// no resolve\n+\t\t\tassert.ok(false, `Expected build to fail but finished with content:\\n${res.css}`);\n+\t\t}, function(err) {\n+\t\t\tassert.equal(err.message, \"You are using JavaScript, which has been disabled.\");\n+\t\t\tassert.ok(err);\n+\t\t});\n+\t});\n+\n+\tit(\"should throw error when using inline JavaScript with parser option javascriptEnabled: true\", function() {\n+\t\tconst lessInput = `.rule {\n+\t@var: \\`(function(){ return \"Cat\"; })()\\`;\n+\tcolor: @var;\n+}`;\n+\t\treturn new Builder().build({\n+\t\t\tlessInput,\n+\t\t\tparser: {\n+\t\t\t\tjavascriptEnabled: true\n+\t\t\t}\n+\t\t}).then(function(res) {\n+\t\t\t// no resolve\n+\t\t\tassert.ok(false, `Expected build to fail but finished with content:\\n${res.css}`);\n+\t\t}, function(err) {\n+\t\t\tassert.equal(err.message, \"You are using JavaScript, which has been disabled.\");\n+\t\t\tassert.ok(err);\n+\t\t});\n+\t});\n+\n+\tit(\"should throw error when using quoted inline JavaScript with parser option javascriptEnabled: true\", function() {\n+\t\tconst lessInput = `.rule {\n+\t@var: \"\\`(function(){ return 'Cat'; })()\\`\";\n+\tcolor: @var;\n+}`;\n+\t\treturn new Builder().build({\n+\t\t\tlessInput,\n+\t\t\tparser: {\n+\t\t\t\tjavascriptEnabled: true\n+\t\t\t}\n+\t\t}).then(function(res) {\n+\t\t\t// no resolve\n+\t\t\tassert.ok(false, `Expected build to fail but finished with content:\\n${res.css}`);\n+\t\t}, function(err) {\n+\t\t\tassert.equal(err.message, \"You are using JavaScript, which has been disabled.\");\n+\t\t\tassert.ok(err);\n+\t\t});\n+\t});\n+\n+\tit(\"should throw error when using inline JavaScript with parser option javascriptEnabled: false\", function() {\n+\t\tconst lessInput = `.rule {\n+\t@var: \\`(function(){ return \"Cat\"; })()\\`;\n+\tcolor: @var;\n+}`;\n+\t\treturn new Builder().build({\n+\t\t\tlessInput,\n+\t\t\tparser: {\n+\t\t\t\tjavascriptEnabled: false\n+\t\t\t}\n+\t\t}).then(function(res) {\n+\t\t\t// no resolve\n+\t\t\tassert.ok(false, `Expected build to fail but finished with content:\\n${res.css}`);\n+\t\t}, function(err) {\n+\t\t\tassert.equal(err.message, \"You are using JavaScript, which has been disabled.\");\n+\t\t\tassert.ok(err);\n+\t\t});\n+\t});\n+\n+\tit(\"should throw error when using quoted inline JavaScript with parser option javascriptEnabled: false\", function() {\n+\t\tconst lessInput = `.rule {\n+\t@var: \"\\`(function(){ return 'Cat'; })()\\`\";\n+\tcolor: @var;\n+}`;\n+\t\treturn new Builder().build({\n+\t\t\tlessInput,\n+\t\t\tparser: {\n+\t\t\t\tjavascriptEnabled: false\n+\t\t\t}\n+\t\t}).then(function(res) {\n+\t\t\t// no resolve\n+\t\t\tassert.ok(false, `Expected build to fail but finished with content:\\n${res.css}`);\n+\t\t}, function(err) {\n+\t\t\tassert.equal(err.message, \"You are using JavaScript, which has been disabled.\");\n+\t\t\tassert.ok(err);\n+\t\t});\n+\t});\n });\n \n function assertLessToRtlCssEqual(filename) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4bbd9eba90fb075dd94c081d701c020ce33506eb",
            "date": "2025-01-12T03:24:10Z",
            "author_login": "matz3"
          },
          {
            "sha": "095d2432473f8222760d0cff9fc34ab54e0fa665",
            "date": "2024-12-29T03:23:46Z",
            "author_login": "RandomByte"
          },
          {
            "sha": "5a7a2d8c831b6819725b65e176b1c9a8d8abb0d0",
            "date": "2024-12-22T03:23:39Z",
            "author_login": "RandomByte"
          },
          {
            "sha": "993cd96bc415c3e35ab2a32421b77a818cc5e0c3",
            "date": "2024-12-15T03:24:36Z",
            "author_login": "RandomByte"
          },
          {
            "sha": "e3609232b4e29c9286a115e3b211d35c15cdd84c",
            "date": "2024-12-08T03:23:37Z",
            "author_login": "RandomByte"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.3,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:N/I:H/A:N",
    "cwe_id": "CWE-74",
    "description": "less-openui5 is an npm package which enables building OpenUI5 themes with Less.js. In less-openui5 before version 0.10., when processing theming resources (i.e. `*.less` files) with less-openui5 that originate from an untrusted source, those resources might contain JavaScript code which will be executed in the context of the build process. While this is a feature of the Less.js library it is an unexpected behavior in the context of OpenUI5 and SAPUI5 development. Especially in the context of UI5 Tooling which relies on less-openui5. An attacker might create a library or theme-library containing a custom control or theme, hiding malicious JavaScript code in one of the .less files. Refer to the referenced GHSA-3crj-w4f5-gwh4 for examples. Starting with Less.js version 3.0.0, the Inline JavaScript feature is disabled by default. less-openui5 however currently uses a fork of Less.js v1.6.3. Note that disabling the Inline JavaScript feature in Less.js versions 1.x, still evaluates code has additional double codes around it. We decided to remove the inline JavaScript evaluation feature completely from the code of our Less.js fork. This fix is available in less-openui5 version 0.10.0.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-02-16T18:15:12.490",
    "last_modified": "2024-11-21T05:48:00.423",
    "fix_date": "2021-01-29T09:48:58Z"
  },
  "references": [
    {
      "url": "http://lesscss.org/usage/#less-options-enable-inline-javascript-deprecated-",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SAP/less-openui5/commit/c0d3a8572974a20ea6cee42da11c614a54f100e8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SAP/less-openui5/releases/tag/v0.10.0",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SAP/less-openui5/security/advisories/GHSA-3crj-w4f5-gwh4",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/less-openui5",
      "source": "security-advisories@github.com",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://lesscss.org/usage/#less-options-enable-inline-javascript-deprecated-",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SAP/less-openui5/commit/c0d3a8572974a20ea6cee42da11c614a54f100e8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SAP/less-openui5/releases/tag/v0.10.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SAP/less-openui5/security/advisories/GHSA-3crj-w4f5-gwh4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/less-openui5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:16.790540",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "less-openui5",
    "owner": "SAP",
    "created_at": "2014-10-08T14:49:54Z",
    "updated_at": "2025-01-12T03:24:23Z",
    "pushed_at": "2025-01-12T03:24:20Z",
    "size": 1522,
    "stars": 29,
    "forks": 13,
    "open_issues": 9,
    "watchers": 29,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 166488,
      "CSS": 80834,
      "Less": 1130
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T19:22:06.282748"
  }
}