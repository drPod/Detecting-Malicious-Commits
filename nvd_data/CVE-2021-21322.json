{
  "cve_id": "CVE-2021-21322",
  "github_data": {
    "repository": "fastify/fastify-http-proxy",
    "fix_commit": "02d9b43c770aa16bc44470edecfaeb7c17985016",
    "related_commits": [
      "02d9b43c770aa16bc44470edecfaeb7c17985016",
      "02d9b43c770aa16bc44470edecfaeb7c17985016"
    ],
    "patch_url": "https://github.com/fastify/fastify-http-proxy/commit/02d9b43c770aa16bc44470edecfaeb7c17985016.patch",
    "fix_commit_details": {
      "sha": "02d9b43c770aa16bc44470edecfaeb7c17985016",
      "commit_date": "2021-02-19T17:50:00Z",
      "author": {
        "login": "mcollina",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-c4qr-gmr9-v23w",
        "length": 137,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 203,
        "additions": 184,
        "deletions": 19
      },
      "files": [
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 37,
          "deletions": 18,
          "patch": "@@ -53,22 +53,8 @@ function proxyWebSockets (source, target) {\n   target.on('unexpected-response', () => close(1011, 'unexpected response'))\n }\n \n-function createWebSocketUrl (options, request) {\n-  const source = new URL(request.url, 'http://127.0.0.1')\n-\n-  const target = new URL(\n-    options.rewritePrefix || options.prefix || source.pathname,\n-    options.upstream\n-  )\n-\n-  target.search = source.search\n-\n-  return target\n-}\n-\n-function setupWebSocketProxy (fastify, options) {\n+function setupWebSocketProxy (fastify, options, rewritePrefix) {\n   const server = new WebSocket.Server({\n-    path: options.prefix,\n     server: fastify.server,\n     ...options.wsServerOptions\n   })\n@@ -93,13 +79,46 @@ function setupWebSocketProxy (fastify, options) {\n   })\n \n   server.on('connection', (source, request) => {\n-    const url = createWebSocketUrl(options, request)\n+    if (fastify.prefix && !request.url.startsWith(fastify.prefix)) {\n+      fastify.log.debug({ url: request.url }, 'not matching prefix')\n+      source.close()\n+      return\n+    }\n+\n+    const url = createWebSocketUrl(request)\n \n     const target = new WebSocket(url, options.wsClientOptions)\n \n     fastify.log.debug({ url: url.href }, 'proxy websocket')\n     proxyWebSockets(source, target)\n   })\n+\n+  function createWebSocketUrl (request) {\n+    const source = new URL(request.url, 'http://127.0.0.1')\n+\n+    const target = new URL(\n+      source.pathname.replace(fastify.prefix, rewritePrefix),\n+      options.upstream\n+    )\n+\n+    target.search = source.search\n+\n+    return target\n+  }\n+}\n+\n+function generateRewritePrefix (prefix, opts) {\n+  if (!prefix) {\n+    return ''\n+  }\n+\n+  let rewritePrefix = opts.rewritePrefix || new URL(opts.upstream).pathname\n+\n+  if (!prefix.endsWith('/') && rewritePrefix.endsWith('/')) {\n+    rewritePrefix = rewritePrefix.slice(0, -1)\n+  }\n+\n+  return rewritePrefix\n }\n \n async function httpProxy (fastify, opts) {\n@@ -108,7 +127,7 @@ async function httpProxy (fastify, opts) {\n   }\n \n   const preHandler = opts.preHandler || opts.beforeHandler\n-  const rewritePrefix = opts.rewritePrefix || ''\n+  const rewritePrefix = generateRewritePrefix(fastify.prefix, opts)\n \n   const fromOpts = Object.assign({}, opts)\n   fromOpts.base = opts.upstream\n@@ -164,7 +183,7 @@ async function httpProxy (fastify, opts) {\n   }\n \n   if (opts.websocket) {\n-    setupWebSocketProxy(fastify, opts)\n+    setupWebSocketProxy(fastify, opts, rewritePrefix)\n   }\n }\n "
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -33,6 +33,7 @@\n     \"express-http-proxy\": \"^1.6.2\",\n     \"fast-proxy\": \"^1.7.0\",\n     \"fastify\": \"^3.0.0\",\n+    \"fastify-websocket\": \"^3.0.0\",\n     \"got\": \"^11.5.1\",\n     \"http-errors\": \"^1.8.0\",\n     \"http-proxy\": \"^1.17.0\","
        },
        {
          "filename": "test/test.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -179,7 +179,7 @@ async function run () {\n       async preHandler (request, reply) {\n         t.deepEqual(reply.context.config, {\n           foo: 'bar',\n-          url: '/*',\n+          url: '/',\n           method: [\n             'DELETE',\n             'GET',"
        },
        {
          "filename": "test/ws-prefix-rewrite.js",
          "status": "added",
          "additions": 145,
          "deletions": 0,
          "patch": "@@ -0,0 +1,145 @@\n+'use strict'\n+\n+const t = require('tap')\n+const { once } = require('events')\n+\n+const Fastify = require('fastify')\n+const fastifyWebSocket = require('fastify-websocket')\n+const proxy = require('..')\n+const WebSocket = require('ws')\n+const got = require('got')\n+\n+const level = 'warn'\n+\n+async function proxyServer (t, backendURL, backendPath, proxyOptions, wrapperOptions) {\n+  const frontend = Fastify({ logger: { level } })\n+  const registerProxy = async fastify => {\n+    fastify.register(proxy, {\n+      upstream: backendURL + backendPath,\n+      ...proxyOptions\n+    })\n+  }\n+\n+  t.comment('starting proxy to ' + backendURL + backendPath)\n+\n+  if (wrapperOptions) {\n+    await frontend.register(registerProxy, wrapperOptions)\n+  } else {\n+    await registerProxy(frontend)\n+  }\n+\n+  return [frontend, await frontend.listen(0)]\n+}\n+\n+async function processRequest (t, frontendURL, path, expected) {\n+  const url = new URL(path, frontendURL)\n+  t.comment('ws connecting to ' + url.toString())\n+  const ws = new WebSocket(url)\n+  let wsResult, gotResult\n+\n+  try {\n+    await once(ws, 'open')\n+    t.pass('socket connected')\n+\n+    const [buf] = await Promise.race([once(ws, 'message'), once(ws, 'close')])\n+    if (buf instanceof Buffer) {\n+      wsResult = buf.toString()\n+    } else {\n+      t.comment('websocket closed')\n+      wsResult = 'error'\n+    }\n+  } catch (e) {\n+    wsResult = 'error'\n+    ws.terminate()\n+  }\n+\n+  try {\n+    const result = await got(url)\n+    gotResult = result.body\n+  } catch (e) {\n+    gotResult = 'error'\n+  }\n+\n+  t.is(wsResult, expected)\n+  t.is(gotResult, expected)\n+}\n+\n+async function handleProxy (info, { backendPath, proxyOptions, wrapperOptions }, expected, ...paths) {\n+  t.test(info, async function (t) {\n+    const backend = Fastify({ logger: { level } })\n+    await backend.register(fastifyWebSocket)\n+\n+    backend.get('/*', {\n+      handler: (req, reply) => {\n+        reply.send(req.url)\n+      },\n+      wsHandler: (conn, req) => {\n+        conn.write(req.url)\n+        conn.end()\n+      }\n+    })\n+\n+    t.teardown(() => backend.close())\n+\n+    const backendURL = await backend.listen(0)\n+\n+    const [frontend, frontendURL] = await proxyServer(t, backendURL, backendPath, proxyOptions, wrapperOptions)\n+\n+    t.teardown(() => frontend.close())\n+\n+    for (const path of paths) {\n+      await processRequest(t, frontendURL, path, expected(path))\n+    }\n+\n+    t.end()\n+  })\n+}\n+\n+handleProxy(\n+  'no prefix to `/`',\n+  {\n+    backendPath: '/',\n+    proxyOptions: { websocket: true }\n+  },\n+  path => path,\n+  '/',\n+  '/pub',\n+  '/pub/'\n+)\n+\n+handleProxy(\n+  '`/pub/` to `/`',\n+  {\n+    backendPath: '/',\n+    proxyOptions: { websocket: true, prefix: '/pub/' }\n+  },\n+  path => path.startsWith('/pub/') ? path.replace('/pub/', '/') : 'error',\n+  '/',\n+  '/pub/',\n+  '/pub/test'\n+)\n+\n+handleProxy(\n+  '`/pub/` to `/public/`',\n+  {\n+    backendPath: '/public/',\n+    proxyOptions: { websocket: true, prefix: '/pub/' }\n+  },\n+  path => path.startsWith('/pub/') ? path.replace('/pub/', '/public/') : 'error',\n+  '/',\n+  '/pub/',\n+  '/pub/test'\n+)\n+\n+handleProxy(\n+  'wrapped `/pub/` to `/public/`',\n+  {\n+    backendPath: '/public/',\n+    proxyOptions: { websocket: true },\n+    wrapperOptions: { prefix: '/pub/' }\n+  },\n+  path => path.startsWith('/pub/') ? path.replace('/pub/', '/public/') : 'error',\n+  '/',\n+  '/pub/',\n+  '/pub/test'\n+)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c996f112e0b52ec471b4259387b57321f3c3cb22",
            "date": "2025-01-12T10:48:29Z",
            "author_login": "cwolter97"
          },
          {
            "sha": "54f4e8f3950379cd31fee53ce216d4cfc62e749d",
            "date": "2025-01-11T12:00:19Z",
            "author_login": "Fdawgs"
          },
          {
            "sha": "3da6b22efd5053e44a47f488e2e836a2a3c34ec2",
            "date": "2025-01-11T08:54:36Z",
            "author_login": "Fdawgs"
          },
          {
            "sha": "954a6425a534fc1ebc2bf5f573a89a77f2b3ea84",
            "date": "2025-01-07T19:04:42Z",
            "author_login": "Fdawgs"
          },
          {
            "sha": "59ed388c95cd2e2d95a884a867369cf7fe791a64",
            "date": "2025-01-07T09:08:36Z",
            "author_login": "Fdawgs"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 10.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-20",
    "description": "fastify-http-proxy is an npm package which is a fastify plugin for proxying your http requests to another server, with hooks. By crafting a specific URL, it is possible to escape the prefix of the proxied backend service. If the base url of the proxied server is `/pub/`, a user expect that accessing `/priv` on the target service would not be possible. In affected versions, it is possible. This is fixed in version 4.3.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-03-02T04:15:12.597",
    "last_modified": "2024-11-21T05:48:01.163",
    "fix_date": "2021-02-19T17:50:00Z"
  },
  "references": [
    {
      "url": "https://github.com/fastify/fastify-http-proxy/commit/02d9b43c770aa16bc44470edecfaeb7c17985016",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/fastify/fastify-http-proxy/security/advisories/GHSA-c4qr-gmr9-v23w",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/fastify-http-proxy",
      "source": "security-advisories@github.com",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/fastify/fastify-http-proxy/commit/02d9b43c770aa16bc44470edecfaeb7c17985016",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/fastify/fastify-http-proxy/security/advisories/GHSA-c4qr-gmr9-v23w",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/fastify-http-proxy",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:16.815825",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "fastify-http-proxy",
    "owner": "fastify",
    "created_at": "2017-12-25T11:10:54Z",
    "updated_at": "2025-01-13T20:38:16Z",
    "pushed_at": "2025-01-12T10:48:29Z",
    "size": 369,
    "stars": 349,
    "forks": 94,
    "open_issues": 7,
    "watchers": 349,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "JavaScript": 72343,
      "TypeScript": 2336
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:59:42.930904"
  }
}