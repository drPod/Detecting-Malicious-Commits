{
  "cve_id": "CVE-2021-21368",
  "github_data": {
    "repository": "mcollina/msgpack5",
    "fix_commit": "d4e6cb956ae51c8bb2828e71c7c1107c340cf1e8",
    "related_commits": [
      "d4e6cb956ae51c8bb2828e71c7c1107c340cf1e8",
      "d4e6cb956ae51c8bb2828e71c7c1107c340cf1e8"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "d4e6cb956ae51c8bb2828e71c7c1107c340cf1e8",
      "commit_date": "2021-03-05T10:18:34Z",
      "author": {
        "login": "mcollina",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-gmjw-49p4-pcfm",
        "length": 100,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 65,
        "additions": 64,
        "deletions": 1
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -111,6 +111,7 @@ options:\n - `compatibilityMode`, a boolean that enables \"compatibility mode\" which doesn't use str 8 format. Defaults to false.\n - `disableTimestampEncoding`, a boolean that when set disables the encoding of Dates into the [timestamp extension type](https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type). Defaults to false.\n - `preferMap`, a boolean that forces all maps to be decoded to `Map`s rather than plain objects. This ensures that `decode(encode(new Map())) instanceof Map` and that iteration order is preserved. Defaults to false.\n+- `protoAction`, a string which can be `error|ignore|remove` that determines what happens when decoding a plain object with a `__proto__` property which would cause prototype poisoning. `error` (default) throws an error, `remove` removes the property, `ignore` (not recommended) allows the property, thereby causing prototype poisoning on the decoded object.\n \n -------------------------------------------------------\n <a name=\"encode\"></a>"
        },
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -19,7 +19,9 @@ function msgpack (options) {\n     // if true, skips encoding Dates using the msgpack\n     // timestamp ext format (-1)\n     disableTimestampEncoding: false,\n-    preferMap: false\n+    preferMap: false,\n+    // options.protoAction: 'error' (default) / 'remove' / 'ignore'\n+    protoAction: 'error'\n   }\n \n   decodingTypes.set(DateCodec.type, DateCodec.decode)"
        },
        {
          "filename": "lib/decoder.js",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -187,6 +187,17 @@ module.exports = function buildDecode (decodingTypes, options) {\n       for (let i = 0; i < 2 * length; i += 2) {\n         const key = result[i]\n         const val = result[i + 1]\n+\n+        if (key === '__proto__') {\n+          if (options.protoAction === 'error') {\n+            throw new SyntaxError('Object contains forbidden prototype property')\n+          }\n+\n+          if (options.protoAction === 'remove') {\n+            continue\n+          }\n+        }\n+\n         object[key] = val\n       }\n       return [object, consumedBytes]"
        },
        {
          "filename": "test/object-prototype-poisoning.js",
          "status": "added",
          "additions": 49,
          "deletions": 0,
          "patch": "@@ -0,0 +1,49 @@\n+'use strict'\n+\n+var test = require('tape').test\n+var msgpack = require('../')\n+\n+test('decode throws when object has forbidden __proto__ property', function (t) {\n+  const encoder = msgpack()\n+\n+  const payload = { hello: 'world' }\n+  Object.defineProperty(payload, '__proto__', {\n+    value: { polluted: true },\n+    enumerable: true\n+  })\n+\n+  const encoded = encoder.encode(payload)\n+\n+  t.throws(() => encoder.decode(encoded), /Object contains forbidden prototype property/)\n+  t.end()\n+})\n+\n+test('decode ignores forbidden __proto__ property if protoAction is \"ignore\"', function (t) {\n+  const encoder = msgpack({ protoAction: 'ignore' })\n+\n+  const payload = { hello: 'world' }\n+  Object.defineProperty(payload, '__proto__', {\n+    value: { polluted: true },\n+    enumerable: true\n+  })\n+\n+  const decoded = encoder.decode(encoder.encode(payload))\n+\n+  t.equal(decoded.polluted, true)\n+  t.end()\n+})\n+\n+test('decode removes forbidden __proto__ property if protoAction is \"remove\"', function (t) {\n+  const encoder = msgpack({ protoAction: 'remove' })\n+\n+  const payload = { hello: 'world' }\n+  Object.defineProperty(payload, '__proto__', {\n+    value: { polluted: true },\n+    enumerable: true\n+  })\n+\n+  const decoded = encoder.decode(encoder.encode(payload))\n+\n+  t.equal(decoded.polluted, undefined)\n+  t.end()\n+})"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2a1f2ac231920ec77cb722dee622c950a308b195",
            "date": "2024-02-12T09:03:13Z",
            "author_login": "mcollina"
          },
          {
            "sha": "a690317941b6b3a7960aed928eb02fb266d3277d",
            "date": "2022-12-08T16:40:47Z",
            "author_login": "leandroandrade"
          },
          {
            "sha": "5cfdf2d7a66ebe0ef07f51d07ed3ec4d81273735",
            "date": "2022-07-15T08:21:57Z",
            "author_login": "mcollina"
          },
          {
            "sha": "c118cd38c7a18b136521090d61924b2303f2b994",
            "date": "2022-07-15T08:20:03Z",
            "author_login": "cigui"
          },
          {
            "sha": "d5c914691e6a880b84ccb7c9de23cf0ea25a9b19",
            "date": "2022-06-07T16:06:37Z",
            "author_login": "mcollina"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:L/I:H/A:H",
    "cwe_id": "CWE-915",
    "description": "msgpack5 is a msgpack v5 implementation for node.js and the browser. In msgpack5 before versions 3.6.1, 4.5.1, and 5.2.1 there is a \"Prototype Poisoning\" vulnerability. When msgpack5 decodes a map containing a key \"__proto__\", it assigns the decoded value to __proto__. Object.prototype.__proto__ is an accessor property for the receiver's prototype. If the value corresponding to the key __proto__ decodes to an object or null, msgpack5 sets the decoded object's prototype to that value. An attacker who can submit crafted MessagePack data to a service can use this to produce values that appear to be of other types; may have unexpected prototype properties and methods (for example length, numeric properties, and push et al if __proto__'s value decodes to an Array); and/or may throw unexpected exceptions when used (for example if the __proto__ value decodes to a Map or Date). Other unexpected behavior might be produced for other types. There is no effect on the global prototype. This \"prototype poisoning\" is sort of a very limited inversion of a prototype pollution attack. Only the decoded value's prototype is affected, and it can only be set to msgpack5 values (though if the victim makes use of custom codecs, anything could be a msgpack5 value). We have not found a way to escalate this to true prototype pollution (absent other bugs in the consumer's code). This has been fixed in msgpack5 version 3.6.1, 4.5.1, and 5.2.1. See the referenced GitHub Security Advisory for an example and more details.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-03-12T17:15:12.863",
    "last_modified": "2024-11-21T05:48:12.740",
    "fix_date": "2021-03-05T10:18:34Z"
  },
  "references": [
    {
      "url": "https://github.com/mcollina/msgpack5/commit/d4e6cb956ae51c8bb2828e71c7c1107c340cf1e8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mcollina/msgpack5/releases/tag/v3.6.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mcollina/msgpack5/releases/tag/v4.5.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mcollina/msgpack5/releases/tag/v5.2.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mcollina/msgpack5/security/advisories/GHSA-gmjw-49p4-pcfm",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/msgpack5",
      "source": "security-advisories@github.com",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mcollina/msgpack5/commit/d4e6cb956ae51c8bb2828e71c7c1107c340cf1e8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mcollina/msgpack5/releases/tag/v3.6.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mcollina/msgpack5/releases/tag/v4.5.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mcollina/msgpack5/releases/tag/v5.2.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mcollina/msgpack5/security/advisories/GHSA-gmjw-49p4-pcfm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.npmjs.com/package/msgpack5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:16.837878",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "msgpack5",
    "owner": "mcollina",
    "created_at": "2014-07-17T07:46:48Z",
    "updated_at": "2025-01-22T09:10:11Z",
    "pushed_at": "2024-02-12T09:03:13Z",
    "size": 663,
    "stars": 495,
    "forks": 77,
    "open_issues": 15,
    "watchers": 495,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 129797,
      "HTML": 22012
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:14:44.475103"
  }
}