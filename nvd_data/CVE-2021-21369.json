{
  "cve_id": "CVE-2021-21369",
  "github_data": {
    "repository": "hyperledger/besu",
    "fix_commit": "06e35a58c07a30c0fbdc0aae45a3e8b06b53c022",
    "related_commits": [
      "06e35a58c07a30c0fbdc0aae45a3e8b06b53c022",
      "06e35a58c07a30c0fbdc0aae45a3e8b06b53c022"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "06e35a58c07a30c0fbdc0aae45a3e8b06b53c022",
      "commit_date": "2020-06-25T23:07:11Z",
      "author": {
        "login": "macfarla",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Improvements to authenticated JSON-RPC permissions checking (#1144)",
        "length": 207,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 120,
        "additions": 95,
        "deletions": 25
      },
      "files": [
        {
          "filename": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/authentication/AuthenticationUtils.java",
          "status": "modified",
          "additions": 23,
          "deletions": 19,
          "patch": "@@ -37,27 +37,31 @@ public static boolean isPermitted(\n \n     AtomicBoolean foundMatchingPermission = new AtomicBoolean();\n \n-    if (authenticationService.isPresent()) {\n-      if (optionalUser.isPresent()) {\n-        User user = optionalUser.get();\n-        for (String perm : jsonRpcMethod.getPermissions()) {\n-          user.isAuthorized(\n-              perm,\n-              (authed) -> {\n-                if (authed.result()) {\n-                  LOG.trace(\n-                      \"user {} authorized : {} via permission {}\",\n-                      user,\n-                      jsonRpcMethod.getName(),\n-                      perm);\n-                  foundMatchingPermission.set(true);\n-                }\n-              });\n+    if (authenticationService.isEmpty()) {\n+      // no auth provider configured thus anything is permitted\n+      return true;\n+    }\n+\n+    if (optionalUser.isPresent()) {\n+      User user = optionalUser.get();\n+      for (String perm : jsonRpcMethod.getPermissions()) {\n+        user.isAuthorized(\n+            perm,\n+            (authed) -> {\n+              if (authed.result()) {\n+                LOG.trace(\n+                    \"user {} authorized : {} via permission {}\",\n+                    user,\n+                    jsonRpcMethod.getName(),\n+                    perm);\n+                foundMatchingPermission.set(true);\n+              }\n+            });\n+        // exit if a matching permission was found, no need to keep checking\n+        if (foundMatchingPermission.get()) {\n+          return foundMatchingPermission.get();\n         }\n       }\n-    } else {\n-      // no auth provider configured thus anything is permitted\n-      foundMatchingPermission.set(true);\n     }\n \n     if (!foundMatchingPermission.get()) {"
        },
        {
          "filename": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/JsonRpcMethod.java",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -23,7 +23,7 @@\n public interface JsonRpcMethod {\n \n   /**\n-   * Standardised JSON-RPC method name.\n+   * Standardized JSON-RPC method name.\n    *\n    * @return identification of the JSON-RPC method.\n    */\n@@ -38,15 +38,17 @@ public interface JsonRpcMethod {\n   JsonRpcResponse response(JsonRpcRequestContext request);\n \n   /**\n-   * The list of Permissions that correspond to this JSON-RPC method. e.g. [net/*, net/listening]\n+   * The list of Permissions that correspond to this JSON-RPC method.\n+   *\n+   * <p>e.g. [*:*, net:*, net:listening]\n    *\n    * @return list of permissions that match this method.\n    */\n   default List<String> getPermissions() {\n     List<String> permissions = new ArrayList<>();\n     permissions.add(\"*:*\");\n-    permissions.add(this.getName().replace('_', ':'));\n     permissions.add(this.getName().substring(0, this.getName().indexOf('_')) + \":*\");\n+    permissions.add(this.getName().replace('_', ':'));\n     return permissions;\n   };\n }"
        },
        {
          "filename": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpServiceLoginTest.java",
          "status": "modified",
          "additions": 62,
          "deletions": 2,
          "patch": "@@ -393,7 +393,7 @@ public void checkJsonRpcMethodsAvailableWithGoodCredentialsAndPermissions() thro\n                     AuthenticationUtils.isPermitted(\n                         service.authenticationService, Optional.of(user), ethBlockNumber))\n                 .isTrue();\n-            // eth/accounts not permitted\n+            // eth/accounts NOT permitted\n             assertThat(\n                     AuthenticationUtils.isPermitted(\n                         service.authenticationService, Optional.of(user), ethAccounts))\n@@ -407,7 +407,7 @@ public void checkJsonRpcMethodsAvailableWithGoodCredentialsAndPermissions() thro\n                     AuthenticationUtils.isPermitted(\n                         service.authenticationService, Optional.of(user), web3Sha3))\n                 .isTrue();\n-            // no net permissions\n+            // NO net permissions\n             assertThat(\n                     AuthenticationUtils.isPermitted(\n                         service.authenticationService, Optional.of(user), netVersion))\n@@ -416,6 +416,66 @@ public void checkJsonRpcMethodsAvailableWithGoodCredentialsAndPermissions() thro\n     }\n   }\n \n+  @Test\n+  public void checkJsonRpcMethodsAvailableWithGoodCredentialsAndAllPermissions()\n+      throws IOException {\n+    final RequestBody body =\n+        RequestBody.create(JSON, \"{\\\"username\\\":\\\"adminuser\\\",\\\"password\\\":\\\"pegasys\\\"}\");\n+    final Request request = new Request.Builder().post(body).url(baseUrl + \"/login\").build();\n+    try (final Response resp = client.newCall(request).execute()) {\n+      assertThat(resp.code()).isEqualTo(200);\n+      assertThat(resp.message()).isEqualTo(\"OK\");\n+      assertThat(resp.body().contentType()).isNotNull();\n+      assertThat(resp.body().contentType().type()).isEqualTo(\"application\");\n+      assertThat(resp.body().contentType().subtype()).isEqualTo(\"json\");\n+      final String bodyString = resp.body().string();\n+      assertThat(bodyString).isNotNull();\n+      assertThat(bodyString).isNotBlank();\n+\n+      final JsonObject respBody = new JsonObject(bodyString);\n+      final String token = respBody.getString(\"token\");\n+      assertThat(token).isNotNull();\n+\n+      final JsonRpcMethod ethAccounts = new EthAccounts();\n+      final JsonRpcMethod netVersion = new NetVersion(Optional.of(BigInteger.valueOf(123)));\n+      final JsonRpcMethod ethBlockNumber = new EthBlockNumber(blockchainQueries);\n+      final JsonRpcMethod web3Sha3 = new Web3Sha3();\n+      final JsonRpcMethod web3ClientVersion = new Web3ClientVersion(\"777\");\n+\n+      // adminuser has *:* permissions so everything should be allowed\n+      jwtAuth.authenticate(\n+          new JsonObject().put(\"jwt\", token),\n+          (r) -> {\n+            assertThat(r.succeeded()).isTrue();\n+            final User user = r.result();\n+            // single eth/blockNumber method permitted\n+            Assertions.assertThat(\n+                    AuthenticationUtils.isPermitted(\n+                        service.authenticationService, Optional.of(user), ethBlockNumber))\n+                .isTrue();\n+            // eth/accounts IS permitted\n+            assertThat(\n+                    AuthenticationUtils.isPermitted(\n+                        service.authenticationService, Optional.of(user), ethAccounts))\n+                .isTrue();\n+            // allowed by *:*\n+            assertThat(\n+                    AuthenticationUtils.isPermitted(\n+                        service.authenticationService, Optional.of(user), web3ClientVersion))\n+                .isTrue();\n+            assertThat(\n+                    AuthenticationUtils.isPermitted(\n+                        service.authenticationService, Optional.of(user), web3Sha3))\n+                .isTrue();\n+            // YES net permissions\n+            assertThat(\n+                    AuthenticationUtils.isPermitted(\n+                        service.authenticationService, Optional.of(user), netVersion))\n+                .isTrue();\n+          });\n+    }\n+  }\n+\n   @Test\n   public void checkPermissionsWithEmptyUser() {\n     final JsonRpcMethod ethAccounts = new EthAccounts();"
        },
        {
          "filename": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/NetListeningTest.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -69,7 +69,7 @@ public void shouldReturnFalseWhenNetworkIsNotListening() {\n   @Test\n   public void getPermissions() {\n     List<String> permissions = method.getPermissions();\n-    assertThat(permissions).containsExactlyInAnyOrder(\"net:*\", \"net:listening\", \"*:*\");\n+    assertThat(permissions).containsExactly(\"*:*\", \"net:*\", \"net:listening\");\n   }\n \n   private JsonRpcRequestContext netListeningRequest() {"
        },
        {
          "filename": "ethereum/api/src/test/resources/JsonRpcHttpService/auth.toml",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -2,3 +2,7 @@\n password = \"$2a$10$l3GA7K8g6rJ/Yv.YFSygCuI9byngpEzxgWS9qEg5emYDZomQW7fGC\"\n permissions = [\"fakePermission\",\"eth:blockNumber\",\"eth:subscribe\",\"web3:*\"]\n privacyPublicKey = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\"\n+[Users.adminuser]\n+password = \"$2a$10$l3GA7K8g6rJ/Yv.YFSygCuI9byngpEzxgWS9qEg5emYDZomQW7fGC\"\n+permissions = [\"*:*\"]\n+privacyPublicKey = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\""
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 5,
        "max_directory_depth": 13
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "846e4834b84b7d6b83bd963390435a320724d6e5",
            "date": "2025-01-24T10:00:07Z",
            "author_login": "matkt"
          },
          {
            "sha": "b150b103e28053d30351eb73f117d23121a04204",
            "date": "2025-01-23T22:29:13Z",
            "author_login": "Gabriel-Trintinalia"
          },
          {
            "sha": "09581eac20da52d99f3cc60f1c8d91956049c208",
            "date": "2025-01-23T21:32:19Z",
            "author_login": "jflo"
          },
          {
            "sha": "8bc9e3f9fde5b85e9891f812f4aa5d4133a6e785",
            "date": "2025-01-23T20:00:02Z",
            "author_login": "jflo"
          },
          {
            "sha": "7840e8b4fb2b97c83a318cdcafa040e8a56de60f",
            "date": "2025-01-23T06:08:03Z",
            "author_login": "daniellehrner"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "Hyperledger Besu is an open-source, MainNet compatible, Ethereum client written in Java. In Besu before version 1.5.1 there is a denial-of-service vulnerability involving the HTTP JSON-RPC API service. If username and password authentication is enabled for the HTTP JSON-RPC API service, then prior to making any requests to an API endpoint the requestor must use the login endpoint to obtain a JSON web token (JWT) using their credentials. A single user can readily overload the login endpoint with invalid requests (incorrect password). As the supplied password is checked for validity on the main vertx event loop and takes a relatively long time this can cause the processing of other valid requests to fail. A valid username is required for this vulnerability to be exposed. This has been fixed in version 1.5.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-03-09T18:15:18.047",
    "last_modified": "2024-11-21T05:48:12.877",
    "fix_date": "2020-06-25T23:07:11Z"
  },
  "references": [
    {
      "url": "https://github.com/hyperledger/besu/blob/master/CHANGELOG.md#151",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/besu/commit/06e35a58c07a30c0fbdc0aae45a3e8b06b53c022",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/besu/pull/1144",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/besu/security/advisories/GHSA-qgfj-mjpc-7w3q",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/besu/blob/master/CHANGELOG.md#151",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/besu/commit/06e35a58c07a30c0fbdc0aae45a3e8b06b53c022",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/besu/pull/1144",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hyperledger/besu/security/advisories/GHSA-qgfj-mjpc-7w3q",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:16.827621",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "besu",
    "owner": "hyperledger",
    "created_at": "2019-09-04T21:11:20Z",
    "updated_at": "2025-01-25T02:06:24Z",
    "pushed_at": "2025-01-24T10:55:46Z",
    "size": 90907,
    "stars": 1556,
    "forks": 879,
    "open_issues": 270,
    "watchers": 1556,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "23.4.4-branch",
      "4844-devnet-5b",
      "5561migrate-tests-to-Junit5",
      "CloseServerSocket",
      "TransactionValidatorService",
      "add-peer-dns",
      "besu-for-fleet",
      "bump_web3j",
      "eip-4844-interop",
      "github_ci",
      "main",
      "mega-eof",
      "pectra-devnet-4",
      "pectra-devnet-5",
      "reduceRetries",
      "release-23.1.x",
      "release-23.4.x",
      "release-23.7.x",
      "release-23.10.x",
      "release-23.10.2",
      "release-23.10.3",
      "release-24.1.x",
      "release-24.1.1",
      "release-24.1.2",
      "release-24.2.0",
      "release-24.3.0-hotfix",
      "release-24.3.2-hotfix",
      "release-24.3.3-hotfix",
      "release-24.4.0",
      "release-24.5.0-rc1"
    ],
    "languages": {
      "Java": 21578116,
      "Shell": 53284,
      "Solidity": 29940,
      "JavaScript": 10498,
      "Dockerfile": 4476,
      "Smarty": 1667,
      "Batchfile": 43
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:35:19.563099"
  }
}