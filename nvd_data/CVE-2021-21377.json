{
  "cve_id": "CVE-2021-21377",
  "github_data": {
    "repository": "ome/omero-web",
    "fix_commit": "952f8e5d28532fbb14fb665982211329d137908c",
    "related_commits": [
      "952f8e5d28532fbb14fb665982211329d137908c",
      "952f8e5d28532fbb14fb665982211329d137908c"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "952f8e5d28532fbb14fb665982211329d137908c",
      "commit_date": "2021-03-17T08:35:48Z",
      "author": {
        "login": "jburel",
        "type": "User",
        "stats": {
          "total_commits": 1646,
          "average_weekly_commits": 1.6121449559255632,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 210
        }
      },
      "commit_message": {
        "title": "SV commits",
        "length": 10,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 216,
        "additions": 84,
        "deletions": 132
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -22,6 +22,10 @@\n - Fix partial loading of annotations ([#256](https://github.com/ome/omero-web/pull/256))\n - Fix ignored limit in webgateway/table endpoint ([#268](https://github.com/ome/omero-web/pull/268))\n \n+- Security vulnerability fixes for\n+  [2021-SV1](https://www.openmicroscopy.org/security/advisories/2021-SV1-user-context/),\n+  [2021-SV2](https://www.openmicroscopy.org/security/advisories/2021-SV2-url-validation/)\n+\n 5.8.1 (September 2020)\n ----------------------\n "
        },
        {
          "filename": "omeroweb/decorators.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -582,7 +582,8 @@ def __getattr__(self, name):\n \n     def prepare_context(self, request, context, *args, **kwargs):\n         \"\"\" Hook for adding additional data to the context dict \"\"\"\n-        pass\n+        context[\"html\"] = context.get(\"html\", {})\n+        context[\"html\"][\"meta_referrer\"] = settings.HTML_META_REFERRER\n \n     def __call__(ctx, f):\n         \"\"\" Here we wrap the view method f and return the wrapped method \"\"\""
        },
        {
          "filename": "omeroweb/settings.py",
          "status": "modified",
          "additions": 30,
          "deletions": 0,
          "patch": "@@ -508,6 +508,12 @@ def leave_none_unset_int(s):\n         leave_none_unset,\n         \"The name to use for session cookies\",\n     ],\n+    \"omero.web.session_cookie_path\": [\n+        \"SESSION_COOKIE_PATH\",\n+        None,\n+        leave_none_unset,\n+        \"The path to use for session cookies\",\n+    ],\n     \"omero.web.session_cookie_secure\": [\n         \"SESSION_COOKIE_SECURE\",\n         \"false\",\n@@ -866,6 +872,16 @@ def leave_none_unset_int(s):\n             ' {\"experimenter\": -1}}\\'``'\n         ),\n     ],\n+    \"omero.web.redirect_allowed_hosts\": [\n+        \"REDIRECT_ALLOWED_HOSTS\",\n+        \"[]\",\n+        json.loads,\n+        (\n+            \"If you wish to allow redirects to an external site, \"\n+            \"the domains must be listed here. \"\n+            'For example [\"openmicroscopy.org\"].'\n+        ),\n+    ],\n     \"omero.web.login.show_client_downloads\": [\n         \"SHOW_CLIENT_DOWNLOADS\",\n         \"true\",\n@@ -1022,6 +1038,20 @@ def leave_none_unset_int(s):\n             \"will be authorized to make cross-site HTTP requests.\"\n         ),\n     ],\n+    \"omero.web.html_meta_referrer\": [\n+        \"HTML_META_REFERRER\",\n+        \"origin-when-crossorigin\",\n+        str,\n+        (\n+            \"Default content for the HTML Meta referrer tag. \"\n+            \"See https://www.w3.org/TR/referrer-policy/#referrer-policies for \"\n+            \"allowed values and https://caniuse.com/#feat=referrer-policy for \"\n+            \"browser compatibility. \"\n+            \"Warning: Internet Explorer 11 does not support the default value \"\n+            'of this setting, you may want to change this to \"origin\" after '\n+            \"reviewing the linked documentation.\"\n+        ),\n+    ],\n     \"omero.web.x_frame_options\": [\n         \"X_FRAME_OPTIONS\",\n         \"SAMEORIGIN\","
        },
        {
          "filename": "omeroweb/webclient/decorators.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -35,7 +35,6 @@\n \n from omeroweb.webclient.forms import GlobalSearchForm\n from omeroweb.utils import reverse_with_params\n-from omeroweb.webgateway.marshal import eventContextMarshal\n \n logger = logging.getLogger(__name__)\n \n@@ -116,6 +115,8 @@ def prepare_context(self, request, context, *args, **kwargs):\n         context.\n         \"\"\"\n \n+        super(render_response, self).prepare_context(request, context, *args, **kwargs)\n+\n         # we expect @login_required to pass us 'conn', but just in case...\n         if \"conn\" not in kwargs:\n             return\n@@ -134,7 +135,6 @@ def prepare_context(self, request, context, *args, **kwargs):\n         public_user = omeroweb.decorators.is_public_user(request)\n         if public_user is not None:\n             context[\"ome\"][\"is_public_user\"] = public_user\n-        context[\"ome\"][\"eventContext\"] = eventContextMarshal(conn.getEventContext())\n         context[\"ome\"][\"user\"] = conn.getUser\n         context[\"ome\"][\"user_id\"] = request.session.get(\"user_id\", conn.getUserId())\n         context[\"ome\"][\"group_id\"] = request.session.get(\"group_id\", None)"
        },
        {
          "filename": "omeroweb/webclient/forms.py",
          "status": "modified",
          "additions": 0,
          "deletions": 18,
          "patch": "@@ -37,7 +37,6 @@\n from .custom_forms import AnnotationModelMultipleChoiceField\n from .custom_forms import ObjectModelMultipleChoiceField\n from omeroweb.webadmin.custom_forms import ExperimenterModelMultipleChoiceField\n-from omeroweb.webadmin.custom_forms import GroupModelMultipleChoiceField\n from omeroweb.webadmin.custom_forms import GroupModelChoiceField\n from omeroweb.webclient.webclient_utils import formatPercentFraction\n \n@@ -127,23 +126,6 @@ def clean_expiration(self):\n         return self.cleaned_data[\"expiration\"]\n \n \n-class BasketShareForm(ShareForm):\n-    def __init__(self, *args, **kwargs):\n-        super(BasketShareForm, self).__init__(*args, **kwargs)\n-\n-        try:\n-            self.fields[\"image\"] = GroupModelMultipleChoiceField(\n-                queryset=kwargs[\"initial\"][\"images\"],\n-                initial=kwargs[\"initial\"][\"selected\"],\n-                widget=forms.SelectMultiple(attrs={\"size\": 10}),\n-            )\n-        except Exception:\n-            self.fields[\"image\"] = GroupModelMultipleChoiceField(\n-                queryset=kwargs[\"initial\"][\"images\"],\n-                widget=forms.SelectMultiple(attrs={\"size\": 10}),\n-            )\n-\n-\n class ContainerForm(NonASCIIForm):\n \n     name = forms.CharField(max_length=250, widget=forms.TextInput(attrs={\"size\": 45}))"
        },
        {
          "filename": "omeroweb/webclient/static/webclient/javascript/ome.tree.js",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1151,8 +1151,8 @@ $(function() {\n \n                 var userId = WEBCLIENT.active_user.id,\n                     // admin may be viewing a Group that they are not a member of\n-                    memberOfGroup = WEBCLIENT.eventContext.memberOfGroups.indexOf(WEBCLIENT.active_group_id) > -1,\n-                    writeOwned = WEBCLIENT.eventContext.adminPrivileges.indexOf(\"WriteOwned\") > -1,\n+                    memberOfGroup = WEBCLIENT.member_of_groups.indexOf(WEBCLIENT.active_group_id) > -1,\n+                    writeOwned = WEBCLIENT.current_admin_privileges.indexOf(\"WriteOwned\") > -1,\n                     allMembers = userId === -1,\n                     // canCreate if looking at your own data or 'All Members' OR User's data && writeOwned\n                     canCreate = (userId === WEBCLIENT.USER.id || (allMembers && memberOfGroup) ||"
        },
        {
          "filename": "omeroweb/webclient/templates/webclient/base/base_container.html",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -166,7 +166,7 @@\n         WEBCLIENT.active_group_id = {{ active_group.id }};\n         WEBCLIENT.USER = {'id': {{ ome.user.id }}, 'fullName': \"{{ ome.user.getFullName }}\"};\n         WEBCLIENT.active_user = {'id': {{ ome.user_id }}, 'fullName': \"{{ active_user.getFullName }}\"};\n-        WEBCLIENT.eventContext = {{ ome.eventContext|json_dumps|safe }};\n+        WEBCLIENT.member_of_groups = {{ member_of_groups|json_dumps|safe }};\n         WEBCLIENT.isAdmin = {% if ome.user.isAdmin %}true{% else %}false{% endif %};\n         WEBCLIENT.CAN_CREATE = {{ ome.can_create|json_dumps|safe }};\n         WEBCLIENT.current_admin_privileges = {{ current_admin_privileges|json_dumps|safe }};"
        },
        {
          "filename": "omeroweb/webclient/templates/webclient/base/includes/toolbar_forms.html",
          "status": "modified",
          "additions": 10,
          "deletions": 59,
          "patch": "@@ -3,7 +3,7 @@\n \n {% comment %}\n <!--\n-  Copyright (C) 2011 University of Dundee & Open Microscopy Environment.\n+  Copyright (C) 2011-2021 University of Dundee & Open Microscopy Environment.\n   All rights reserved.\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU Affero General Public License as\n@@ -25,82 +25,33 @@\n if (typeof OME === \"undefined\") { OME={}; }\n \n     OME.createShare = function() {\n-\n-        var productListQuery = [];\n-\n-        // we do inst.get_selected() here, since we then get objects\n-        // instead of ids for some reason?\n-        var inst = $.jstree.reference('#dataTree');\n-        data = inst.get_selected(true);\n-        data.forEach(function(node){\n-            productListQuery.push(node.type + \"=\" + node.data.id);\n-        });\n-\n-        var query = '{% url 'manage_action_containers' \"add\" \"share\" %}' + \"?\"+productListQuery.join(\"&\");\n         $(\"#create_share_form\").dialog(\"open\");\n-        $(\"#create_share_form\").attr(\"action\", query)\n-        $(\"#create_share_form\").load(query);\n         return false;\n     }\n \n     $(document).ready(function(){\n \n-        // AJAX handling of create-discussion form\n-        $(\"#create_share_form\").ajaxForm({\n-            success: function(html) {\n-                if (html.indexOf(\"shareId\") > -1) {\n-                    var shareId = html.replace(\"shareId:\", \"\");\n-                    $(\"#create_share_form\").dialog( \"close\" );\n-                    $(\"#shareCreatedId\").text(shareId);\n-                    $(\"#share_dialog_form\").dialog(\"open\").show();\n-                } else {\n-                    $(\"#create_share_form\").html(html);\n-                }\n-            },\n-        });\n-\n-        $(\"#share_dialog_form\").dialog({\n-            autoOpen: false,\n-            resizable: true,\n-            height: 150,\n-            width:300,\n-            modal: true,\n-            buttons: {\n-                \"OK\": function() {\n-                    $( this ).dialog( \"close\" );\n-                }\n-            }\n-        });\n-\n         $(\"#create_share_form\").dialog({\n+            title: \"Shares not supported\",\n             autoOpen: false,\n             resizable: true,\n-            height: 600,\n+            height: 250,\n             width:450,\n             modal: true,\n             buttons: {\n-                \"Accept\": function() {\n-                    // simply submit the form\n-                    $(\"#create_share_form\").submit();\n-                },\n-                \"Cancel\": function() {\n+                \"OK\": function() {\n                     $( this ).dialog( \"close\" );\n                 }\n             }\n         });\n-\n-\n     });\n </script>\n \n \n-\n-<!-- hidden form for creating share - shown in dialog & loaded by AJAX -->\n-<form id=\"create_share_form\" action=\"#\" method=\"post\" title=\"Create Share\" class=\"standard_form\">{% csrf_token %}\n-</form>\n-\n-<form id=\"share_dialog_form\" action=\"#\" title=\"Create Share\" style=\"display:none\">\n-    <p style=\"font-size: 120%; font-weight: bold\">\n-        Share <span id=\"shareCreatedId\"></span> was created successfully.\n+<!-- hidden dialog -->\n+<div id=\"create_share_form\" style=\"display:none\">\n+    <p>Share functionality is no longer supported.</p>\n+    <p>Please see <a target=\"_blank\" href=\"https://www.openmicroscopy.org/omero/features/share/\">Sharing your data in OMERO</a>\n+        for alternative workflows.\n     </p>\n-</form>\n+</div>"
        },
        {
          "filename": "omeroweb/webclient/templates/webclient/data/containers.html",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -208,9 +208,9 @@\n             // If we are filtering to show another user's data,\n             // we 'should' have writeOwned privilege\n \n-            var writeOwned = WEBCLIENT.eventContext.adminPrivileges.indexOf(\"WriteOwned\") > -1;\n+            var writeOwned = WEBCLIENT.current_admin_privileges.indexOf(\"WriteOwned\") > -1;\n             var $f = $(\"#new-container-form\");\n-            var memberOfGroup = WEBCLIENT.eventContext.memberOfGroups.indexOf(WEBCLIENT.active_group_id) > -1;\n+            var memberOfGroup = WEBCLIENT.member_of_groups.indexOf(WEBCLIENT.active_group_id) > -1;\n \n             // clear fields\n             $(\"input[name='owner']\", $f).val(\"\");\n@@ -289,8 +289,8 @@\n \n             // We 'canCreate' top level items, E.g. Project, Dataset, Screen, if the current userId is self or 'All Members'\n             var userId = {{ ome.user_id }},\n-                memberOfGroup = WEBCLIENT.eventContext.memberOfGroups.indexOf(WEBCLIENT.active_group_id) > -1,\n-                writeOwned = WEBCLIENT.eventContext.adminPrivileges.indexOf(\"WriteOwned\") > -1,\n+                memberOfGroup = WEBCLIENT.member_of_groups.indexOf(WEBCLIENT.active_group_id) > -1,\n+                writeOwned = WEBCLIENT.current_admin_privileges.indexOf(\"WriteOwned\") > -1,\n                 allMembers = userId === -1,\n                 // canCreate if looking at your own data or 'All Members' OR User's data with writeOwned\n                 canCreate = (userId === WEBCLIENT.USER.id || (allMembers && memberOfGroup) ||"
        },
        {
          "filename": "omeroweb/webclient/templates/webclient/public/public.html",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -489,7 +489,15 @@\n \n <div class=\"left_panel_tree_container\">\n \n-    <div id=\"tree_details\" class=\"left_panel_tree\">\n+    <div style=\"height: 110px; padding: 15px; box-sizing: border-box;\">\n+        <p>Creating new shares is no longer supported. Previously created shares are shown below.</p>\n+        <p>Please see <a target=\"_blank\" href=\"https://www.openmicroscopy.org/omero/features/share/\">Sharing your data in\n+                OMERO</a>\n+            for alternative workflows.\n+        </p>\n+    </div>\n+\n+    <div id=\"tree_details\" class=\"left_panel_tree\" style=\"height: calc(100% - 110px)\">\n         <div class=\"datashareTree\" id=\"dataTree\"></div>\n     </div>\n "
        },
        {
          "filename": "omeroweb/webclient/views.py",
          "status": "modified",
          "additions": 17,
          "deletions": 42,
          "patch": "@@ -35,6 +35,7 @@\n import warnings\n from past.builtins import unicode\n from future.utils import bytes_to_native_str\n+from django.utils.http import is_safe_url\n \n from time import time\n \n@@ -67,7 +68,7 @@\n \n from omeroweb.webclient.webclient_utils import _formatReport, _purgeCallback\n from .forms import GlobalSearchForm, ContainerForm\n-from .forms import ShareForm, BasketShareForm\n+from .forms import ShareForm\n from .forms import ContainerNameForm, ContainerDescriptionForm\n from .forms import CommentAnnotationForm, TagsAnnotationForm\n from .forms import MetadataFilterForm, MetadataDetectorForm\n@@ -176,6 +177,17 @@ def get_bool_or_default(request, name, default):\n     return toBoolean(request.GET.get(name, default))\n \n \n+def validate_redirect_url(url):\n+    \"\"\"\n+    Returns a URL is safe to redirect to.\n+    If url is a different host, not in settings.REDIRECT_ALLOWED_HOSTS\n+    we return webclient index URL.\n+    \"\"\"\n+    if not is_safe_url(url, allowed_hosts=settings.REDIRECT_ALLOWED_HOSTS):\n+        url = reverse(\"webindex\")\n+    return url\n+\n+\n ##############################################################################\n # custom index page\n \n@@ -257,6 +269,8 @@ def handle_logged_in(self, request, conn, connector):\n                 url = parse_url(settings.LOGIN_REDIRECT)\n             except Exception:\n                 url = reverse(\"webindex\")\n+        else:\n+            url = validate_redirect_url(url)\n         return HttpResponseRedirect(url)\n \n     def handle_not_logged_in(self, request, error=None, form=None):\n@@ -335,6 +349,7 @@ def change_active_group(request, conn=None, url=None, **kwargs):\n     \"\"\"\n     switch_active_group(request)\n     url = url or reverse(\"webindex\")\n+    url = validate_redirect_url(url)\n     return HttpResponseRedirect(url)\n \n \n@@ -534,6 +549,7 @@ def _load_template(request, menu, conn=None, url=None, **kwargs):\n     context[\"thumbnails_batch\"] = settings.THUMBNAILS_BATCH\n     context[\"current_admin_privileges\"] = conn.getCurrentAdminPrivileges()\n     context[\"leader_of_groups\"] = conn.getEventContext().leaderOfGroups\n+    context[\"member_of_groups\"] = conn.getEventContext().memberOfGroups\n \n     return context\n \n@@ -2871,47 +2887,6 @@ def manage_action_containers(\n                 d.update({e[0]: unicode(e[1])})\n             rdict = {\"bad\": \"true\", \"errs\": d}\n             return JsonResponse(rdict)\n-    elif action == \"add\":\n-        template = \"webclient/public/share_form.html\"\n-        experimenters = list(conn.getExperimenters())\n-        experimenters.sort(key=lambda x: x.getOmeName().lower())\n-        if o_type == \"share\":\n-            img_ids = request.GET.getlist(\"image\", request.POST.getlist(\"image\"))\n-            if request.method == \"GET\" and len(img_ids) == 0:\n-                return HttpResponse(\"No images specified\")\n-            images_to_share = list(conn.getObjects(\"Image\", img_ids))\n-            if request.method == \"POST\":\n-                form = BasketShareForm(\n-                    initial={\"experimenters\": experimenters, \"images\": images_to_share},\n-                    data=request.POST.copy(),\n-                )\n-                if form.is_valid():\n-                    images = form.cleaned_data[\"image\"]\n-                    message = form.cleaned_data[\"message\"]\n-                    expiration = form.cleaned_data[\"expiration\"]\n-                    members = form.cleaned_data[\"members\"]\n-                    # guests = request.POST['guests']\n-                    enable = form.cleaned_data[\"enable\"]\n-                    host = \"%s?server=%i\" % (\n-                        request.build_absolute_uri(\n-                            reverse(\"load_template\", args=[\"public\"])\n-                        ),\n-                        int(conn.server_id),\n-                    )\n-                    shareId = manager.createShare(\n-                        host, images, message, members, enable, expiration\n-                    )\n-                    return HttpResponse(\"shareId:%s\" % shareId)\n-            else:\n-                initial = {\n-                    \"experimenters\": experimenters,\n-                    \"images\": images_to_share,\n-                    \"enable\": True,\n-                    \"selected\": request.GET.getlist(\"image\"),\n-                }\n-                form = BasketShareForm(initial=initial)\n-        template = \"webclient/public/share_form.html\"\n-        context = {\"manager\": manager, \"form\": form}\n \n     elif action == \"edit\":\n         # form for editing Shares only"
        },
        {
          "filename": "omeroweb/webgateway/templates/webgateway/core_html.html",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -25,6 +25,7 @@\n \n <head>\n     <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\n+    <meta name=\"referrer\" content=\"{{ html.meta_referrer|default:\"origin-when-crossorigin\" }}\">\n \n     {% block link %}\n \t\t<link rel=\"stylesheet\" href=\"{% static \"webgateway/css/reset.css\"|add:url_suffix %}\" type=\"text/css\" />   "
        },
        {
          "filename": "omeroweb/webgateway/views.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -2960,10 +2960,10 @@ def _table_query(request, fileid, conn=None, query=None, lazy=False, **kwargs):\n             limit = (\n                 int(request.GET.get(\"limit\"))\n                 if request.GET.get(\"limit\") is not None\n-                else None\n+                else rows\n             )\n         range_start = offset\n-        range_size = kwargs.get(\"limit\", rows)\n+        range_size = limit\n         range_end = min(rows, range_start + range_size)\n \n         if query == \"*\":"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 10,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "96d113830f31142cb272c5a486b048cd185c51bd",
            "date": "2024-12-14T18:56:27Z",
            "author_login": "jburel"
          },
          {
            "sha": "7ca7b766522f4cbc823490273007a47a79774090",
            "date": "2024-11-24T21:30:58Z",
            "author_login": "jburel"
          },
          {
            "sha": "a1483bf008b05162b21f92d286133d501083acd7",
            "date": "2024-11-22T13:46:07Z",
            "author_login": "jburel"
          },
          {
            "sha": "ca710df681e3492d113fcad08e05df1f82e17791",
            "date": "2024-11-20T13:50:36Z",
            "author_login": "knabar"
          },
          {
            "sha": "cbf9730529bf9839d3dd252f507be03ea59dae2a",
            "date": "2024-11-20T13:26:40Z",
            "author_login": "knabar"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-601",
    "description": "OMERO.web is open source Django-based software for managing microscopy imaging. OMERO.web before version 5.9.0 supports redirection to a given URL after performing login or switching the group context. These URLs are not validated, allowing redirection to untrusted sites. OMERO.web 5.9.0 adds URL validation before redirecting. External URLs are not considered valid, unless specified in the omero.web.redirect_allowed_hosts setting.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-03-23T16:15:14.283",
    "last_modified": "2024-11-21T05:48:13.900",
    "fix_date": "2021-03-17T08:35:48Z"
  },
  "references": [
    {
      "url": "https://github.com/ome/omero-web/blob/master/CHANGELOG.md#590-march-2021",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ome/omero-web/commit/952f8e5d28532fbb14fb665982211329d137908c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ome/omero-web/security/advisories/GHSA-g4rf-pc26-6hmr",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/omero-web/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.openmicroscopy.org/security/advisories/2021-SV2/",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/ome/omero-web/blob/master/CHANGELOG.md#590-march-2021",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ome/omero-web/commit/952f8e5d28532fbb14fb665982211329d137908c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ome/omero-web/security/advisories/GHSA-g4rf-pc26-6hmr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pypi.org/project/omero-web/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.openmicroscopy.org/security/advisories/2021-SV2/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:16.856680",
    "processing_status": "enhanced"
  }
}