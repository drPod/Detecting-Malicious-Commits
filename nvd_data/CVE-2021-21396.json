{
  "cve_id": "CVE-2021-21396",
  "github_data": {
    "repository": "wireapp/wire-server",
    "fix_commit": "7ba2bf4140282557cf215e0b2c354d4d08cd3421",
    "related_commits": [
      "7ba2bf4140282557cf215e0b2c354d4d08cd3421",
      "7ba2bf4140282557cf215e0b2c354d4d08cd3421"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "7ba2bf4140282557cf215e0b2c354d4d08cd3421",
      "commit_date": "2021-03-02T11:14:30Z",
      "author": {
        "login": "akshaymankar",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Return PubClient instead of Client from /users/list-clients (#1391)",
        "length": 67,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 44,
        "additions": 28,
        "deletions": 16
      },
      "files": [
        {
          "filename": "libs/wire-api/src/Wire/API/User/Client.hs",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -312,8 +312,9 @@ data PubClient = PubClient\n   { pubClientId :: ClientId,\n     pubClientClass :: Maybe ClientClass\n   }\n-  deriving stock (Eq, Show, Generic)\n+  deriving stock (Eq, Show, Generic, Ord)\n   deriving (Arbitrary) via (GenericUniform PubClient)\n+  deriving (ToSchema) via (CustomSwagger '[FieldLabelModifier (StripPrefix \"pubClient\", LowerCase)] PubClient)\n \n modelPubClient :: Doc.Model\n modelPubClient = Doc.defineModel \"PubClient\" $ do"
        },
        {
          "filename": "libs/wire-api/src/Wire/API/UserMap.hs",
          "status": "modified",
          "additions": 11,
          "deletions": 7,
          "patch": "@@ -15,11 +15,10 @@ import Data.Typeable (typeRep)\n import Imports\n import Test.QuickCheck (Arbitrary (..))\n import Wire.API.Arbitrary (generateExample, mapOf')\n-import Wire.API.User.Client (Client)\n \n newtype UserMap a = UserMap {userMap :: Map UserId a}\n   deriving stock (Eq, Show)\n-  deriving newtype (Semigroup, Monoid, ToJSON, FromJSON)\n+  deriving newtype (Semigroup, Monoid, ToJSON, FromJSON, Functor)\n \n instance Arbitrary a => Arbitrary (UserMap a) where\n   arbitrary = UserMap <$> mapOf' arbitrary arbitrary\n@@ -30,17 +29,22 @@ newtype QualifiedUserMap a = QualifiedUserMap\n   deriving stock (Eq, Show)\n   deriving newtype (Semigroup, Monoid, ToJSON, FromJSON)\n \n+instance Functor QualifiedUserMap where\n+  fmap f (QualifiedUserMap qMap) =\n+    QualifiedUserMap $ f <$$> qMap\n+\n instance Arbitrary a => Arbitrary (QualifiedUserMap a) where\n   arbitrary = QualifiedUserMap <$> mapOf' arbitrary arbitrary\n \n-instance ToSchema (UserMap (Set Client)) where\n+instance (Typeable a, ToSchema a, ToJSON a, Arbitrary a) => ToSchema (UserMap (Set a)) where\n   declareNamedSchema _ = do\n-    mapSch <- declareSchema (Proxy @(Map UserId (Set Client)))\n+    mapSch <- declareSchema (Proxy @(Map UserId (Set a)))\n+    let valueTypeName = Text.pack $ show $ typeRep $ Proxy @a\n     return $\n-      NamedSchema (Just \"UserMap (Set Client)\") $\n+      NamedSchema (Just $ \"UserMap (Set \" <> valueTypeName <> \")\") $\n         mapSch\n-          & description ?~ \"Map of UserId to (Set Client)\"\n-          & example ?~ toJSON (Map.singleton (generateExample @UserId) (Set.singleton (generateExample @Client)))\n+          & description ?~ \"Map of UserId to (Set \" <> valueTypeName <> \")\"\n+          & example ?~ toJSON (Map.singleton (generateExample @UserId) (Set.singleton (generateExample @a)))\n \n instance (Typeable a, ToSchema (UserMap a)) => ToSchema (QualifiedUserMap a) where\n   declareNamedSchema _ = do"
        },
        {
          "filename": "libs/wire-api/test/unit/Test/Wire/API/Swagger.hs",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -37,10 +37,12 @@ tests =\n       testToJSON @User.SelfProfile,\n       testToJSON @Handle.UserHandleInfo,\n       testToJSON @Client.Client,\n-      testToJSON @(Client.UserClientMap (Maybe Prekey.Prekey)),\n-      testToJSON @Client.UserClients,\n+      testToJSON @Client.PubClient,\n       testToJSON @(UserMap.UserMap (Set Client.Client)),\n+      testToJSON @(UserMap.UserMap (Set Client.PubClient)),\n       testToJSON @(UserMap.QualifiedUserMap (Set Client.Client)),\n+      testToJSON @(Client.UserClientMap (Maybe Prekey.Prekey)),\n+      testToJSON @Client.UserClients,\n       testToJSON @Prekey.Prekey,\n       testToJSON @Prekey.PrekeyBundle,\n       testToJSON @Prekey.ClientPrekey,"
        },
        {
          "filename": "services/brig/src/Brig/API/Public.hs",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -71,6 +71,7 @@ import qualified Data.Map.Strict as Map\n import Data.Misc (IpAddr (..))\n import Data.Qualified (Qualified (..), partitionRemoteOrLocalIds)\n import Data.Range\n+import qualified Data.Set as Set\n import Data.Swagger\n   ( ApiKeyLocation (..),\n     ApiKeyParams (..),\n@@ -306,7 +307,7 @@ type ListClientsBulk =\n     :> \"users\"\n     :> \"list-clients\"\n     :> Servant.ReqBody '[Servant.JSON] (Range 1 MaxUsersForListClientsBulk [Qualified UserId])\n-    :> Post '[Servant.JSON] (Public.QualifiedUserMap (Set Public.Client))\n+    :> Post '[Servant.JSON] (Public.QualifiedUserMap (Set Public.PubClient))\n \n type GetUsersPrekeysClientUnqualified =\n   Summary \"(deprecated) Get a prekey for a specific client of a user.\"\n@@ -1148,9 +1149,9 @@ getClientH (zusr ::: clt ::: _) =\n     Just c -> json c\n     Nothing -> setStatus status404 empty\n \n-listClientsBulk :: UserId -> Range 1 MaxUsersForListClientsBulk [Qualified UserId] -> Handler (Public.QualifiedUserMap (Set Public.Client))\n-listClientsBulk _zusr limitedUids =\n-  API.lookupClientsBulk (fromRange limitedUids) !>> clientError\n+listClientsBulk :: UserId -> Range 1 MaxUsersForListClientsBulk [Qualified UserId] -> Handler (Public.QualifiedUserMap (Set Public.PubClient))\n+listClientsBulk _zusr limitedUids = do\n+  Set.map API.pubClient <$$> API.lookupClientsBulk (fromRange limitedUids) !>> clientError\n \n getClient :: UserId -> ClientId -> Handler (Maybe Public.Client)\n getClient zusr clientId = do"
        },
        {
          "filename": "services/brig/test/integration/API/User/Client.hs",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -178,12 +178,16 @@ testListClientsBulk opts brig = do\n \n   let domain = Opt.setFederationDomain $ Opt.optSettings opts\n   uid3 <- userId <$> randomUser brig\n-  let expectedResponse :: QualifiedUserMap (Set Client) =\n+  let mkPubClient cl = PubClient (clientId cl) (clientClass cl)\n+  let expectedResponse :: QualifiedUserMap (Set PubClient) =\n         QualifiedUserMap $\n           Map.singleton\n             domain\n             ( UserMap $\n-                Map.fromList [(uid1, Set.fromList [c11, c12, c13]), (uid2, Set.fromList [c21, c22])]\n+                Map.fromList\n+                  [ (uid1, Set.fromList $ mkPubClient <$> [c11, c12, c13]),\n+                    (uid2, Set.fromList $ mkPubClient <$> [c21, c22])\n+                  ]\n             )\n   post\n     ( brig"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 5,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "690b8941b15149025e615dc473b6bb73d0f480dc",
            "date": "2025-01-24T10:52:55Z",
            "author_login": "pcapriotti"
          },
          {
            "sha": "81ae37ea263a070f31368466130f44dc79417d09",
            "date": "2025-01-24T09:24:18Z",
            "author_login": "pcapriotti"
          },
          {
            "sha": "bc2c43ca7e1d84047165115c04d97741b78c5642",
            "date": "2025-01-23T16:56:51Z",
            "author_login": "supersven"
          },
          {
            "sha": "64d4f043536963e9553170b9ed9a423656ca3375",
            "date": "2025-01-22T07:42:35Z",
            "author_login": "fisx"
          },
          {
            "sha": "0b236a6560a3fe228dae5898a0b840b573b23922",
            "date": "2025-01-21T09:19:27Z",
            "author_login": "battermann"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "wire-server is an open-source back end for Wire, a secure collaboration platform. In wire-server from version 2021-02-16 and before version 2021-03-02, the client metadata of all users was exposed in the `GET /users/list-clients` endpoint. The endpoint could be used by any logged in user who could request client details of any other user (no connection required) as far as they can find their User ID. The exposed metadata included id, class, type, location, time, and cookie. A user on a Wire backend could use this endpoint to find registration time and location for each device for a given list of users. As a workaround, remove `/list-clients` from nginx config. This has been fixed in version 2021-03-02.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-03-26T22:15:12.947",
    "last_modified": "2024-11-21T05:48:16.390",
    "fix_date": "2021-03-02T11:14:30Z"
  },
  "references": [
    {
      "url": "https://github.com/wireapp/wire-server/commit/7ba2bf4140282557cf215e0b2c354d4d08cd3421",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-server/releases/tag/v2021-03-02",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-server/security/advisories/GHSA-qx8q-rhq2-rg4j",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-server/commit/7ba2bf4140282557cf215e0b2c354d4d08cd3421",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-server/releases/tag/v2021-03-02",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-server/security/advisories/GHSA-qx8q-rhq2-rg4j",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:33.500286",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "wire-server",
    "owner": "wireapp",
    "created_at": "2017-02-14T10:42:59Z",
    "updated_at": "2025-01-24T10:53:00Z",
    "pushed_at": "2025-01-24T16:21:50Z",
    "size": 69630,
    "stars": 2652,
    "forks": 325,
    "open_issues": 141,
    "watchers": 2652,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "Haskell": 12434005,
      "HTML": 2542469,
      "Nix": 365072,
      "Shell": 128277,
      "Python": 79336,
      "Smarty": 52585,
      "Rust": 48416,
      "Makefile": 47259,
      "Mustache": 15835,
      "C": 12943,
      "jq": 10188,
      "DIGITAL Command Language": 2530,
      "JavaScript": 1883,
      "Dockerfile": 1192
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-26T07:41:33.781484"
  }
}