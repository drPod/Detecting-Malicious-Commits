{
  "cve_id": "CVE-2021-21422",
  "github_data": {
    "repository": "mongo-express/mongo-express",
    "fix_commit": "f5e0d4931f856f032f22664b5e5901d5950cfd4b",
    "related_commits": [
      "f5e0d4931f856f032f22664b5e5901d5950cfd4b",
      "f5e0d4931f856f032f22664b5e5901d5950cfd4b"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "f5e0d4931f856f032f22664b5e5901d5950cfd4b",
      "commit_date": "2021-03-05T04:00:26Z",
      "author": {
        "login": "dozoisch",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-7p8h-86p5-wv3p",
        "length": 78,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 48,
        "additions": 32,
        "deletions": 16
      },
      "files": [
        {
          "filename": "lib/filters.js",
          "status": "modified",
          "additions": 9,
          "deletions": 8,
          "patch": "@@ -66,9 +66,9 @@ exports.to_display = function (input) {\n     && input._id\n   ) {\n     retHTML += '<div class=\"tooDamnBig\" doc_id=\"' + encodeURIComponent(JSON.stringify(input._id)) + '\" '\n-      + 'doc_prop=\"' + input.attribu + '\" title=\"Max prop size: ' + input.maxSize + '\">';\n+      + 'doc_prop=\"' + entifyGTLTAmp(input.attribu) + '\" title=\"Max prop size: ' + input.maxSize + '\">';\n     retHTML += input.display + '<br>~' + input.humanSz;\n-    retHTML += '<br>Preview:' + input.preview;\n+    retHTML += '<br>Preview:' + entifyGTLTAmp(input.preview);\n     retHTML += '<br>Click to fetch this property';\n     retHTML += '</div>';\n     return retHTML;\n@@ -87,9 +87,9 @@ exports.to_display = function (input) {\n     && input._id\n   ) {\n     retHTML += '<div class=\"tooDamnBig\" doc_id=\"' + encodeURIComponent(JSON.stringify(input._id)) + '\" '\n-      + 'doc_prop=\"' + input.attribu + '\" title=\"Max row size: ' + input.maxSize + '\">';\n-    retHTML += input.display + '<br>' + input.attribu + ': ~' + input.humanSz;\n-    retHTML += '<br>Preview:' + input.preview;\n+      + 'doc_prop=\"' + entifyGTLTAmp(input.attribu) + '\" title=\"Max row size: ' + input.maxSize + '\">';\n+    retHTML += input.display + '<br>' + entifyGTLTAmp(input.attribu) + ': ~' + input.humanSz;\n+    retHTML += '<br>Preview:' +  entifyGTLTAmp(input.preview);\n     retHTML += '<br>Click to fetch this property';\n     retHTML += '</div>';\n     return retHTML;\n@@ -105,7 +105,7 @@ exports.to_display = function (input) {\n       || input.substr(0, 23) === 'data:image/jpeg;base64,'\n     )\n   )  {\n-    return '<img src=\"' + input + '\" style=\"max-height:100%; max-width:100%; \"/>';\n+    return '<img src=\"' + entifyGTLTAmp(input) + '\" style=\"max-height:100%; max-width:100%; \"/>';\n   }\n \n   // Audio inline\n@@ -116,7 +116,7 @@ exports.to_display = function (input) {\n       || input.substr(0, 22) === 'data:audio/mp3;base64,'\n     )\n   )  {\n-    return '<audio controls style=\"width:45px;\" src=\"' + input + '\">Your browser does not support the audio element.</audio>';\n+    return '<audio controls style=\"width:45px;\" src=\"' + entifyGTLTAmp(input) + '\">Your browser does not support the audio element.</audio>';\n   }\n \n   // Video inline\n@@ -128,7 +128,8 @@ exports.to_display = function (input) {\n       ||  input.substr(0, 22) === 'data:video/ogv;base64,'\n     )\n   )  {\n-    return '<video controls><source type=\"' + input.substring(input.indexOf(':') + 1, input.indexOf(';')) + '\" src=\"' + input + '\"/>'\n+    const videoFormat = input.match(/^data:(.*);base64/)[1];\n+    return '<video controls><source type=\"' + videoFormat + '\" src=\"' + entifyGTLTAmp(input) + '\"/>'\n       + 'Your browser does not support the video element.</video>';\n   }\n "
        },
        {
          "filename": "lib/scripts/collection.js",
          "status": "modified",
          "additions": 15,
          "deletions": 8,
          "patch": "@@ -1,6 +1,7 @@\n import $ from 'jquery';\n import renderjson from 'renderjson';\n import CodeMirror from './codeMirrorLoader';\n+import escapeHtml from './escapeHtml';\n \n function getParameterByName(name) {\n   name = name.replace(/\\[/, '\\\\[').replace(/[\\]]/, '\\\\]');\n@@ -137,7 +138,7 @@ $(() => {\n     // Set the element with spinner for now\n     target.html(spinner);\n \n-    $.get(`${makeCollectionUrl()}${encodeURIComponent(_id)}/${prop}`, function (input) {\n+    function renderProp(input) {\n       // Images inline\n       if (\n         typeof input === 'string'\n@@ -148,7 +149,7 @@ $(() => {\n           || input.substr(0, 23) === 'data:image/jpeg;base64,'\n         )\n       )  {\n-        input = '<img src=\"' + input + '\" style=\"max-height:100%; max-width:100%; \"/>';\n+        return `<img src=\"${escapeHtml(input)}\" style=\"max-height:100%; max-width:100%; \"/>`;\n       }\n \n       // Audio inline\n@@ -160,7 +161,7 @@ $(() => {\n           || input.substr(0, 22) === 'data:audio/mp3;base64,'\n         )\n       )  {\n-        input = '<audio controls style=\"width:45px;\" src=\"' + input + '\">Your browser does not support the audio element.</audio>';\n+        return `<audio controls style=\"width:45px;\" src=\"${escapeHtml(input)}\">Your browser does not support the audio element.</audio>`;\n       }\n \n       // Video inline\n@@ -172,16 +173,22 @@ $(() => {\n           ||  input.substr(0, 22) === 'data:video/ogv;base64,'\n         )\n       )  {\n-        input = '<video controls><source type=\"' + input.substring(input.indexOf(':') + 1, input.indexOf(';')) + '\" src=\"' + input + '\"/>'\n-          + 'Your browser does not support the video element.</video>';\n+        const videoFormat = input.match(/^data:(.*);base64/)[1];\n+        return `<video controls><source type=\"${escapeHtml(videoFormat)}\" src=\"${escapeHtml(input)}\"/>\n+          + 'Your browser does not support the video element.</video>`;\n       }\n-\n       if (typeof input === 'object' && (input.toString() === '[object Object]' || input.toString().substr(0, 7) === '[object')) {\n-        input = renderjson(input);\n+        return renderjson(input);\n       }\n \n+      // treat unknown data as escaped string\n+      return escapeHtml(input.toString());\n+    }\n+\n+    $.get(`${makeCollectionUrl()}${encodeURIComponent(_id)}/${prop}`, function (prop) {\n+      prop = renderProp(prop);\n       // Set the element with gotten datas\n-      target.parent().html(input);\n+      target.parent().html(prop);\n \n       // Set original scroll position\n       $('.tableWrapper').scrollLeft(leftScroll);"
        },
        {
          "filename": "lib/scripts/escapeHtml.js",
          "status": "added",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -0,0 +1,8 @@\n+export default function (html) {\n+  // Turn < ? > into HTML entities, so data doesn't get interpreted by the browser\n+  return html.replace(/&/g, '&amp;')\n+    .replace(/</g, '&lt;')\n+    .replace(/>/g, '&gt;')\n+    .replace(/\"/g, '&quot;')\n+    .replace(/'/g, '&apos;');\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "375246760a0b44eac07ea7319100e7885366f31a",
            "date": "2025-01-20T20:20:06Z",
            "author_login": "rtritto"
          },
          {
            "sha": "d832372cd21043800df1a85813363dfdce9bf5ba",
            "date": "2025-01-13T23:00:11Z",
            "author_login": "SleepyDeb"
          },
          {
            "sha": "7740aff75f853bde62a80a0018a9212c195223a6",
            "date": "2025-01-09T19:28:43Z",
            "author_login": "rtritto"
          },
          {
            "sha": "2d772f27ed9689f2c826d098cb5071cfdd5a7179",
            "date": "2025-01-09T19:19:23Z",
            "author_login": "rtritto"
          },
          {
            "sha": "85859dcbee9da330216242114bfb758c1450ccd7",
            "date": "2025-01-09T19:01:21Z",
            "author_login": "rtritto"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-79",
    "description": "mongo-express is a web-based MongoDB admin interface, written with Node.js and express. 1: As mentioned in this issue: https://github.com/mongo-express/mongo-express/issues/577, when the content of a cell grows larger than supported size, clicking on a row will show full document unescaped, however this needs admin interaction on cell. 2: Data cells identified as media will be rendered as media, without being sanitized. Example of different renders: image, audio, video, etc. As an example of type 1 attack, an unauthorized user who only can send a large amount of data in a field of a document may use a payload with embedded javascript. This could send an export of a collection to the attacker without even an admin knowing. Other types of attacks such as dropping a database\\collection are possible.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-06-21T19:15:07.947",
    "last_modified": "2024-11-21T05:48:19.780",
    "fix_date": "2021-03-05T04:00:26Z"
  },
  "references": [
    {
      "url": "https://github.com/mongo-express/mongo-express/commit/f5e0d4931f856f032f22664b5e5901d5950cfd4b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mongo-express/mongo-express/issues/577",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mongo-express/mongo-express/security/advisories/GHSA-7p8h-86p5-wv3p",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mongo-express/mongo-express/commit/f5e0d4931f856f032f22664b5e5901d5950cfd4b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mongo-express/mongo-express/issues/577",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mongo-express/mongo-express/security/advisories/GHSA-7p8h-86p5-wv3p",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:59.746247",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "mongo-express",
    "owner": "mongo-express",
    "created_at": "2012-04-23T20:11:25Z",
    "updated_at": "2025-01-25T21:03:04Z",
    "pushed_at": "2025-01-25T16:38:16Z",
    "size": 14982,
    "stars": 5648,
    "forks": 969,
    "open_issues": 157,
    "watchers": 5648,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "JavaScript": 129445,
      "HTML": 48319,
      "CSS": 1730,
      "Dockerfile": 1362
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:07:10.637524"
  }
}