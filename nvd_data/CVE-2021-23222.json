{
  "cve_id": "CVE-2021-23222",
  "github_data": {
    "repository": "postgres/postgres",
    "fix_commit": "160c0258802d10b0600d7671b1bbea55d8e17d45",
    "related_commits": [
      "160c0258802d10b0600d7671b1bbea55d8e17d45",
      "160c0258802d10b0600d7671b1bbea55d8e17d45"
    ],
    "patch_url": "https://github.com/postgres/postgres/commit/160c0258802d10b0600d7671b1bbea55d8e17d45.patch",
    "fix_commit_details": {
      "sha": "160c0258802d10b0600d7671b1bbea55d8e17d45",
      "commit_date": "2021-11-08T16:14:56Z",
      "author": {
        "login": "tglsfdc",
        "type": "User",
        "stats": {
          "total_commits": 4988,
          "average_weekly_commits": 3.3498992612491607,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 459
        }
      },
      "commit_message": {
        "title": "libpq: reject extraneous data after SSL or GSS encryption handshake.",
        "length": 1143,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 54,
        "additions": 54,
        "deletions": 0
      },
      "files": [
        {
          "filename": "doc/src/sgml/protocol.sgml",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -1477,6 +1477,20 @@ SELCT 1/0;<!-- this typo is intentional -->\n     and proceed without requesting <acronym>SSL</acronym>.\n    </para>\n \n+   <para>\n+    When <acronym>SSL</acronym> encryption can be performed, the server\n+    is expected to send only the single <literal>S</literal> byte and then\n+    wait for the frontend to initiate an <acronym>SSL</acronym> handshake.\n+    If additional bytes are available to read at this point, it likely\n+    means that a man-in-the-middle is attempting to perform a\n+    buffer-stuffing attack\n+    (<ulink url=\"https://www.postgresql.org/support/security/CVE-2021-23222/\">CVE-2021-23222</ulink>).\n+    Frontends should be coded either to read exactly one byte from the\n+    socket before turning the socket over to their SSL library, or to\n+    treat it as a protocol violation if they find they have read additional\n+    bytes.\n+   </para>\n+\n    <para>\n     An initial SSLRequest can also be used in a connection that is being\n     opened to send a CancelRequest message.\n@@ -1539,6 +1553,20 @@ SELCT 1/0;<!-- this typo is intentional -->\n     encryption.\n    </para>\n \n+   <para>\n+    When <acronym>GSSAPI</acronym> encryption can be performed, the server\n+    is expected to send only the single <literal>G</literal> byte and then\n+    wait for the frontend to initiate a <acronym>GSSAPI</acronym> handshake.\n+    If additional bytes are available to read at this point, it likely\n+    means that a man-in-the-middle is attempting to perform a\n+    buffer-stuffing attack\n+    (<ulink url=\"https://www.postgresql.org/support/security/CVE-2021-23222/\">CVE-2021-23222</ulink>).\n+    Frontends should be coded either to read exactly one byte from the\n+    socket before turning the socket over to their GSSAPI library, or to\n+    treat it as a protocol violation if they find they have read additional\n+    bytes.\n+   </para>\n+\n    <para>\n     An initial GSSENCRequest can also be used in a connection that is being\n     opened to send a CancelRequest message."
        },
        {
          "filename": "src/interfaces/libpq/fe-connect.c",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -3097,6 +3097,19 @@ PQconnectPoll(PGconn *conn)\n \t\t\t\tpollres = pqsecure_open_client(conn);\n \t\t\t\tif (pollres == PGRES_POLLING_OK)\n \t\t\t\t{\n+\t\t\t\t\t/*\n+\t\t\t\t\t * At this point we should have no data already buffered.\n+\t\t\t\t\t * If we do, it was received before we performed the SSL\n+\t\t\t\t\t * handshake, so it wasn't encrypted and indeed may have\n+\t\t\t\t\t * been injected by a man-in-the-middle.\n+\t\t\t\t\t */\n+\t\t\t\t\tif (conn->inCursor != conn->inEnd)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tappendPQExpBufferStr(&conn->errorMessage,\n+\t\t\t\t\t\t\t\t\t\t\t libpq_gettext(\"received unencrypted data after SSL response\\n\"));\n+\t\t\t\t\t\tgoto error_return;\n+\t\t\t\t\t}\n+\n \t\t\t\t\t/* SSL handshake done, ready to send startup packet */\n \t\t\t\t\tconn->status = CONNECTION_MADE;\n \t\t\t\t\treturn PGRES_POLLING_WRITING;\n@@ -3196,6 +3209,19 @@ PQconnectPoll(PGconn *conn)\n \t\t\t\tpollres = pqsecure_open_gss(conn);\n \t\t\t\tif (pollres == PGRES_POLLING_OK)\n \t\t\t\t{\n+\t\t\t\t\t/*\n+\t\t\t\t\t * At this point we should have no data already buffered.\n+\t\t\t\t\t * If we do, it was received before we performed the GSS\n+\t\t\t\t\t * handshake, so it wasn't encrypted and indeed may have\n+\t\t\t\t\t * been injected by a man-in-the-middle.\n+\t\t\t\t\t */\n+\t\t\t\t\tif (conn->inCursor != conn->inEnd)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tappendPQExpBufferStr(&conn->errorMessage,\n+\t\t\t\t\t\t\t\t\t\t\t libpq_gettext(\"received unencrypted data after GSSAPI encryption response\\n\"));\n+\t\t\t\t\t\tgoto error_return;\n+\t\t\t\t\t}\n+\n \t\t\t\t\t/* All set for startup packet */\n \t\t\t\t\tconn->status = CONNECTION_MADE;\n \t\t\t\t\treturn PGRES_POLLING_WRITING;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4cb560b53f8f9e9a94d593f9416c107ed8202110",
            "date": "2025-01-14T13:50:54Z",
            "author_login": "deanrasheed"
          },
          {
            "sha": "2355e51110e7c687c125a5958f12a462931de996",
            "date": "2025-01-14T13:23:24Z",
            "author_login": "deanrasheed"
          },
          {
            "sha": "af8cd1639ab298ba8fae62cd9583f1c10a5068e1",
            "date": "2025-01-14T12:28:49Z",
            "author_login": "hlinnaka"
          },
          {
            "sha": "ce9a74707d4cf7768cff06298d09c7f7e823341d",
            "date": "2025-01-14T06:17:22Z",
            "author_login": "michaelpq"
          },
          {
            "sha": "720e529840d5a1087a34db445f624c5ece46eb38",
            "date": "2025-01-14T06:12:56Z",
            "author_login": "michaelpq"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-522",
    "description": "A man-in-the-middle attacker can inject false responses to the client's first few queries, despite the use of SSL certificate verification and encryption.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-03-02T23:15:08.517",
    "last_modified": "2024-11-21T05:51:23.930",
    "fix_date": "2021-11-08T16:14:56Z"
  },
  "references": [
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2022675",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://git.postgresql.org/gitweb/?p=postgresql.git%3Ba=commitdiff%3Bh=d83cdfdca9d918bbbd6bb209139b94c954da7228",
      "source": "secalert@redhat.com",
      "tags": []
    },
    {
      "url": "https://github.com/postgres/postgres/commit/160c0258802d10b0600d7671b1bbea55d8e17d45",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202211-04",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.postgresql.org/support/security/CVE-2021-23222/",
      "source": "secalert@redhat.com",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2022675",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://git.postgresql.org/gitweb/?p=postgresql.git%3Ba=commitdiff%3Bh=d83cdfdca9d918bbbd6bb209139b94c954da7228",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/postgres/postgres/commit/160c0258802d10b0600d7671b1bbea55d8e17d45",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202211-04",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.postgresql.org/support/security/CVE-2021-23222/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.769051",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "postgres",
    "owner": "postgres",
    "created_at": "2010-09-21T11:35:45Z",
    "updated_at": "2025-01-14T12:23:23Z",
    "pushed_at": "2025-01-14T06:28:38Z",
    "size": 608320,
    "stars": 16634,
    "forks": 4693,
    "open_issues": 1,
    "watchers": 16634,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 47031174,
      "PLpgSQL": 3927896,
      "Perl": 2290426,
      "Yacc": 697711,
      "Makefile": 362302,
      "Meson": 359391,
      "Python": 270469,
      "Lex": 229520,
      "M4": 185355,
      "Ruby": 164128,
      "Shell": 75722,
      "C++": 55705,
      "PLSQL": 55013,
      "Roff": 17748,
      "XS": 6998,
      "Emacs Lisp": 4164,
      "DTrace": 3452,
      "Assembly": 2468,
      "Starlark": 1640,
      "sed": 581
    },
    "commit_activity": {
      "total_commits_last_year": 2526,
      "avg_commits_per_week": 48.57692307692308,
      "days_active_last_year": 333
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:07:40.608433"
  }
}