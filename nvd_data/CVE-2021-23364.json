{
  "cve_id": "CVE-2021-23364",
  "github_data": {
    "repository": "browserslist/browserslist",
    "fix_commit": "c091916910dfe0b5fd61caad96083c6709b02d98",
    "related_commits": [
      "c091916910dfe0b5fd61caad96083c6709b02d98",
      "c091916910dfe0b5fd61caad96083c6709b02d98"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "c091916910dfe0b5fd61caad96083c6709b02d98",
      "commit_date": "2021-04-08T05:24:32Z",
      "author": {
        "login": "ai",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix unsafe regexp",
        "length": 17,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 263,
        "additions": 148,
        "deletions": 115
      },
      "files": [
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 137,
          "deletions": 105,
          "patch": "@@ -614,6 +614,68 @@ browserslist.coverage = function (browsers, stats) {\n   }, 0)\n }\n \n+function nodeQuery (context, version) {\n+  var nodeReleases = jsReleases.filter(function (i) {\n+    return i.name === 'nodejs'\n+  })\n+  var matched = nodeReleases.filter(function (i) {\n+    return isVersionsMatch(i.version, version)\n+  })\n+  if (matched.length === 0) {\n+    if (context.ignoreUnknownVersions) {\n+      return []\n+    } else {\n+      throw new BrowserslistError('Unknown version ' + version + ' of Node.js')\n+    }\n+  }\n+  return ['node ' + matched[matched.length - 1].version]\n+}\n+\n+function sinceQuery (context, year, month, date) {\n+  year = parseInt(year)\n+  month = parseInt(month || '01') - 1\n+  date = parseInt(date || '01')\n+  return filterByYear(Date.UTC(year, month, date, 0, 0, 0), context)\n+}\n+\n+function coverQuery (context, coverage, statMode) {\n+  coverage = parseFloat(coverage)\n+  var usage = browserslist.usage.global\n+  if (statMode) {\n+    if (statMode.match(/^my\\s+stats$/)) {\n+      if (!context.customUsage) {\n+        throw new BrowserslistError(\n+          'Custom usage statistics was not provided'\n+        )\n+      }\n+      usage = context.customUsage\n+    } else {\n+      var place\n+      if (statMode.length === 2) {\n+        place = statMode.toUpperCase()\n+      } else {\n+        place = statMode.toLowerCase()\n+      }\n+      env.loadCountry(browserslist.usage, place, browserslist.data)\n+      usage = browserslist.usage[place]\n+    }\n+  }\n+  var versions = Object.keys(usage).sort(function (a, b) {\n+    return usage[b] - usage[a]\n+  })\n+  var coveraged = 0\n+  var result = []\n+  var version\n+  for (var i = 0; i <= versions.length; i++) {\n+    version = versions[i]\n+    if (usage[version] === 0) break\n+    coveraged += usage[version]\n+    result.push(version)\n+    if (coveraged >= coverage) break\n+  }\n+  return result\n+}\n+\n var QUERIES = [\n   {\n     regexp: /^last\\s+(\\d+)\\s+major\\s+versions?$/i,\n@@ -669,9 +731,11 @@ var QUERIES = [\n   {\n     regexp: /^last\\s+(\\d+)\\s+electron\\s+versions?$/i,\n     select: function (context, versions) {\n-      return Object.keys(e2c).slice(-versions).map(function (i) {\n-        return 'chrome ' + e2c[i]\n-      })\n+      return Object.keys(e2c)\n+        .slice(-versions)\n+        .map(function (i) {\n+          return 'chrome ' + e2c[i]\n+        })\n     }\n   },\n   {\n@@ -709,9 +773,11 @@ var QUERIES = [\n     regexp: /^unreleased\\s+(\\w+)\\s+versions?$/i,\n     select: function (context, name) {\n       var data = checkName(name, context)\n-      return data.versions.filter(function (v) {\n-        return data.released.indexOf(v) === -1\n-      }).map(nameMapper(data.name))\n+      return data.versions\n+        .filter(function (v) {\n+          return data.released.indexOf(v) === -1\n+        })\n+        .map(nameMapper(data.name))\n     }\n   },\n   {\n@@ -721,13 +787,16 @@ var QUERIES = [\n     }\n   },\n   {\n-    regexp: /^since (\\d+)(?:-(\\d+))?(?:-(\\d+))?$/i,\n-    select: function (context, year, month, date) {\n-      year = parseInt(year)\n-      month = parseInt(month || '01') - 1\n-      date = parseInt(date || '01')\n-      return filterByYear(Date.UTC(year, month, date, 0, 0, 0), context)\n-    }\n+    regexp: /^since (\\d+)$/i,\n+    select: sinceQuery\n+  },\n+  {\n+    regexp: /^since (\\d+)-(\\d+)$/i,\n+    select: sinceQuery\n+  },\n+  {\n+    regexp: /^since (\\d+)-(\\d+)-(\\d+)$/i,\n+    select: sinceQuery\n   },\n   {\n     regexp: /^(>=?|<=?)\\s*(\\d*\\.?\\d+)%$/,\n@@ -849,45 +918,12 @@ var QUERIES = [\n     }\n   },\n   {\n-    regexp: /^cover\\s+(\\d*\\.?\\d+)%(\\s+in\\s+(my\\s+stats|(alt-)?\\w\\w))?$/,\n-    select: function (context, coverage, statMode) {\n-      coverage = parseFloat(coverage)\n-      var usage = browserslist.usage.global\n-      if (statMode) {\n-        if (statMode.match(/^\\s+in\\s+my\\s+stats$/)) {\n-          if (!context.customUsage) {\n-            throw new BrowserslistError(\n-              'Custom usage statistics was not provided'\n-            )\n-          }\n-          usage = context.customUsage\n-        } else {\n-          var match = statMode.match(/\\s+in\\s+((alt-)?\\w\\w)/)\n-          var place = match[1]\n-          if (place.length === 2) {\n-            place = place.toUpperCase()\n-          } else {\n-            place = place.toLowerCase()\n-          }\n-          env.loadCountry(browserslist.usage, place, browserslist.data)\n-          usage = browserslist.usage[place]\n-        }\n-      }\n-      var versions = Object.keys(usage).sort(function (a, b) {\n-        return usage[b] - usage[a]\n-      })\n-      var coveraged = 0\n-      var result = []\n-      var version\n-      for (var i = 0; i <= versions.length; i++) {\n-        version = versions[i]\n-        if (usage[version] === 0) break\n-        coveraged += usage[version]\n-        result.push(version)\n-        if (coveraged >= coverage) break\n-      }\n-      return result\n-    }\n+    regexp: /^cover\\s+(\\d*\\.?\\d+)%$/,\n+    select: coverQuery\n+  },\n+  {\n+    regexp: /^cover\\s+(\\d*\\.?\\d+)%\\s+in\\s+(my\\s+stats|(alt-)?\\w\\w)$/,\n+    select: coverQuery\n   },\n   {\n     regexp: /^supports\\s+([\\w-]+)$/,\n@@ -916,31 +952,26 @@ var QUERIES = [\n       }\n       from = parseFloat(from)\n       to = parseFloat(to)\n-      return Object.keys(e2c).filter(function (i) {\n-        var parsed = parseFloat(i)\n-        return parsed >= from && parsed <= to\n-      }).map(function (i) {\n-        return 'chrome ' + e2c[i]\n-      })\n+      return Object.keys(e2c)\n+        .filter(function (i) {\n+          var parsed = parseFloat(i)\n+          return parsed >= from && parsed <= to\n+        })\n+        .map(function (i) {\n+          return 'chrome ' + e2c[i]\n+        })\n     }\n   },\n   {\n     regexp: /^node\\s+([\\d.]+)\\s*-\\s*([\\d.]+)$/i,\n     select: function (context, from, to) {\n-      var nodeVersions = jsReleases.filter(function (i) {\n-        return i.name === 'nodejs'\n-      }).map(function (i) {\n-        return i.version\n-      })\n-      var semverRegExp = /^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){0,2}$/\n-      if (!semverRegExp.test(from)) {\n-        throw new BrowserslistError(\n-          'Unknown version ' + from + ' of Node.js')\n-      }\n-      if (!semverRegExp.test(to)) {\n-        throw new BrowserslistError(\n-          'Unknown version ' + to + ' of Node.js')\n-      }\n+      var nodeVersions = jsReleases\n+        .filter(function (i) {\n+          return i.name === 'nodejs'\n+        })\n+        .map(function (i) {\n+          return i.version\n+        })\n       return nodeVersions\n         .filter(semverFilterLoose('>=', from))\n         .filter(semverFilterLoose('<=', to))\n@@ -976,11 +1007,13 @@ var QUERIES = [\n   {\n     regexp: /^node\\s*(>=?|<=?)\\s*([\\d.]+)$/i,\n     select: function (context, sign, version) {\n-      var nodeVersions = jsReleases.filter(function (i) {\n-        return i.name === 'nodejs'\n-      }).map(function (i) {\n-        return i.version\n-      })\n+      var nodeVersions = jsReleases\n+        .filter(function (i) {\n+          return i.name === 'nodejs'\n+        })\n+        .map(function (i) {\n+          return i.version\n+        })\n       return nodeVersions\n         .filter(generateSemverFilter(sign, version))\n         .map(function (v) {\n@@ -1022,30 +1055,23 @@ var QUERIES = [\n       var chrome = e2c[versionToUse]\n       if (!chrome) {\n         throw new BrowserslistError(\n-          'Unknown version ' + version + ' of electron')\n+          'Unknown version ' + version + ' of electron'\n+        )\n       }\n       return ['chrome ' + chrome]\n     }\n   },\n   {\n-    regexp: /^node\\s+(\\d+(\\.\\d+)?(\\.\\d+)?)$/i,\n-    select: function (context, version) {\n-      var nodeReleases = jsReleases.filter(function (i) {\n-        return i.name === 'nodejs'\n-      })\n-      var matched = nodeReleases.filter(function (i) {\n-        return isVersionsMatch(i.version, version)\n-      })\n-      if (matched.length === 0) {\n-        if (context.ignoreUnknownVersions) {\n-          return []\n-        } else {\n-          throw new BrowserslistError(\n-            'Unknown version ' + version + ' of Node.js')\n-        }\n-      }\n-      return ['node ' + matched[matched.length - 1].version]\n-    }\n+    regexp: /^node\\s+(\\d+)$/i,\n+    select: nodeQuery\n+  },\n+  {\n+    regexp: /^node\\s+(\\d+\\.\\d+)$/i,\n+    select: nodeQuery\n+  },\n+  {\n+    regexp: /^node\\s+(\\d+\\.\\d+\\.\\d+)$/i,\n+    select: nodeQuery\n   },\n   {\n     regexp: /^current\\s+node$/i,\n@@ -1057,13 +1083,17 @@ var QUERIES = [\n     regexp: /^maintained\\s+node\\s+versions$/i,\n     select: function (context) {\n       var now = Date.now()\n-      var queries = Object.keys(jsEOL).filter(function (key) {\n-        return now < Date.parse(jsEOL[key].end) &&\n-          now > Date.parse(jsEOL[key].start) &&\n-          isEolReleased(key)\n-      }).map(function (key) {\n-        return 'node ' + key.slice(1)\n-      })\n+      var queries = Object.keys(jsEOL)\n+        .filter(function (key) {\n+          return (\n+            now < Date.parse(jsEOL[key].end) &&\n+            now > Date.parse(jsEOL[key].start) &&\n+            isEolReleased(key)\n+          )\n+        })\n+        .map(function (key) {\n+          return 'node ' + key.slice(1)\n+        })\n       return resolve(queries, context)\n     }\n   },\n@@ -1100,7 +1130,8 @@ var QUERIES = [\n           return []\n         } else {\n           throw new BrowserslistError(\n-            'Unknown version ' + version + ' of ' + name)\n+            'Unknown version ' + version + ' of ' + name\n+          )\n         }\n       }\n       return [data.name + ' ' + version]\n@@ -1142,7 +1173,8 @@ var QUERIES = [\n     select: function (context, name) {\n       if (byName(name, context)) {\n         throw new BrowserslistError(\n-          'Specify versions in Browserslist query for browser ' + name)\n+          'Specify versions in Browserslist query for browser ' + name\n+        )\n       } else {\n         throw unknownQuery(name)\n       }"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 9,
          "deletions": 2,
          "patch": "@@ -94,9 +94,16 @@\n   \"eslintConfig\": {\n     \"extends\": \"@logux/eslint-config/browser\",\n     \"rules\": {\n-      \"security/detect-unsafe-regex\": \"off\",\n       \"global-require\": \"off\"\n-    }\n+    },\n+    \"overrides\": [\n+      {\n+        \"files\": \"test/**/*\",\n+        \"rules\": {\n+          \"security/detect-unsafe-regex\": \"off\"\n+        }\n+      }\n+    ]\n   },\n   \"eslintIgnore\": [\n     \"test/fixtures\""
        },
        {
          "filename": "test/node.test.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 8,
          "patch": "@@ -25,14 +25,8 @@ it('throws on malformed Node.js version', () => {\n     browserslist('node 8.01')\n   }).toThrow(/Unknown/)\n   expect(() => {\n-    browserslist('node 6 - 8.a')\n-  }).toThrow(/Unknown/)\n-  expect(() => {\n-    browserslist('node 6.6.6.6 - 8')\n-  }).toThrow(/Unknown/)\n-  expect(() => {\n-    browserslist('node 6 - 8.01')\n-  }).toThrow(/Unknown/)\n+    browserslist(\"node 6 - 8.a\");\n+  }).toThrow(/Unknown/);\n })\n \n it('return empty array on unknown Node.js version with special flag', () => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 1,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5219070d4c092db236f75fcc0aafb28425ecb69a",
            "date": "2025-01-08T11:44:10Z",
            "author_login": "ai"
          },
          {
            "sha": "1b999cbd13a653debd3f1f0c8a69d71a3dd519e7",
            "date": "2025-01-08T11:36:18Z",
            "author_login": "thoughtspile"
          },
          {
            "sha": "442e4ac67930117d380fb6b5faa27d9bd6006ac6",
            "date": "2025-01-08T11:28:21Z",
            "author_login": "ai"
          },
          {
            "sha": "a6bbfc5782212bd2878656300e3f57aa9a6669ec",
            "date": "2025-01-08T11:27:53Z",
            "author_login": "ai"
          },
          {
            "sha": "a687422d65d39b006ca53960dabd323017684840",
            "date": "2025-01-08T11:23:38Z",
            "author_login": "ai"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-1333",
    "description": "The package browserslist from 4.0.0 and before 4.16.5 are vulnerable to Regular Expression Denial of Service (ReDoS) during parsing of queries.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-04-28T16:15:08.133",
    "last_modified": "2024-11-21T05:51:34.887",
    "fix_date": "2021-04-08T05:24:32Z"
  },
  "references": [
    {
      "url": "https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js%23L472-L474",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/browserslist/browserslist/pull/593",
      "source": "report@snyk.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1277182",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-BROWSERSLIST-1090194",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/browserslist/browserslist/blob/e82f32d1d4100d6bc79ea0b6b6a2d281a561e33c/index.js%23L472-L474",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/browserslist/browserslist/commit/c091916910dfe0b5fd61caad96083c6709b02d98",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/browserslist/browserslist/pull/593",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1277182",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-BROWSERSLIST-1090194",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:57.051829",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "browserslist",
    "owner": "browserslist",
    "created_at": "2014-12-13T19:35:45Z",
    "updated_at": "2025-01-26T03:17:40Z",
    "pushed_at": "2025-01-08T11:44:12Z",
    "size": 4360,
    "stars": 13123,
    "forks": 720,
    "open_issues": 42,
    "watchers": 13123,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "JavaScript": 134578
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:53:15.058686"
  }
}