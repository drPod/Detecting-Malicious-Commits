{
  "cve_id": "CVE-2021-23423",
  "github_data": {
    "repository": "tabatkins/bikeshed",
    "fix_commit": "b2f668fca204260b1cad28d5078e93471cb6b2dd",
    "related_commits": [
      "b2f668fca204260b1cad28d5078e93471cb6b2dd",
      "b2f668fca204260b1cad28d5078e93471cb6b2dd"
    ],
    "patch_url": "https://github.com/tabatkins/bikeshed/commit/b2f668fca204260b1cad28d5078e93471cb6b2dd.patch",
    "fix_commit_details": {
      "sha": "b2f668fca204260b1cad28d5078e93471cb6b2dd",
      "commit_date": "2021-08-07T00:41:38Z",
      "author": {
        "login": "tabatkins",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Prevent escaping the source doc's folder, or running arbitrary code, without explicit opt-in at the command-line.",
        "length": 113,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 77,
        "additions": 60,
        "deletions": 17
      },
      "files": [
        {
          "filename": "bikeshed/InputSource.py",
          "status": "modified",
          "additions": 13,
          "deletions": 6,
          "patch": "@@ -13,6 +13,7 @@\n import requests\n import tenacity\n \n+from . import config\n from .Line import Line\n \n \n@@ -38,17 +39,17 @@ class InputSource:\n     manager for temporarily switching to the directory of a file InputSource.\n     \"\"\"\n \n-    def __new__(cls, sourceName: str):\n+    def __new__(cls, sourceName: str, **kwargs):\n         \"\"\"Dispatches to the right subclass.\"\"\"\n         if cls != InputSource:\n             # Only take control of calls to InputSource(...) itself.\n             return super().__new__(cls)\n \n         if sourceName == \"-\":\n-            return StdinInputSource(sourceName)\n+            return StdinInputSource(sourceName, **kwargs)\n         if sourceName.startswith(\"https:\"):\n-            return UrlInputSource(sourceName)\n-        return FileInputSource(sourceName)\n+            return UrlInputSource(sourceName, **kwargs)\n+        return FileInputSource(sourceName, **kwargs)\n \n     @abstractmethod\n     def __str__(self) -> str:\n@@ -157,11 +158,17 @@ def relative(self, relativePath) -> UrlInputSource:\n \n \n class FileInputSource(InputSource):\n-    def __init__(self, sourceName: str):\n+    def __init__(self, sourceName: str, *, chroot: bool, chrootPath: Optional[str] = None):\n         self.sourceName = sourceName\n+        self.chrootPath = chrootPath\n         self.type = \"file\"\n         self.content = None\n \n+        if chroot and self.chrootPath is None:\n+            self.chrootPath = self.directory()\n+        if self.chrootPath is not None:\n+            self.sourceName = config.chrootPath(self.chrootPath, self.sourceName)\n+\n     def __str__(self) -> str:\n         return self.sourceName\n \n@@ -179,7 +186,7 @@ def directory(self) -> str:\n         return os.path.dirname(os.path.abspath(self.sourceName))\n \n     def relative(self, relativePath) -> FileInputSource:\n-        return FileInputSource(os.path.join(self.directory(), relativePath))\n+        return FileInputSource(os.path.join(self.directory(), relativePath), chroot=False, chrootPath=self.chrootPath)\n \n     def cheaplyExists(self, relativePath) -> bool:\n         return os.access(self.relative(relativePath).sourceName, os.R_OK)"
        },
        {
          "filename": "bikeshed/Spec.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -58,7 +58,7 @@ def __init__(\n                 \"No input file specified, and no *.bs or *.src.html files found in current directory.\\nPlease specify an input file, or use - to pipe from STDIN.\"\n             )\n             return\n-        self.inputSource = InputSource(inputFilename)\n+        self.inputSource = InputSource(inputFilename, chroot=constants.chroot)\n         self.transitiveDependencies = set()\n         self.debug = debug\n         self.token = token"
        },
        {
          "filename": "bikeshed/cli.py",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -75,6 +75,18 @@ def main():\n         choices=[\"nothing\", \"fatal\", \"link-error\", \"warning\", \"everything\"],\n         help=\"Determines what sorts of errors cause Bikeshed to die (quit immediately with an error status code). Default is 'fatal'; the -f flag is a shorthand for 'nothing'\",\n     )\n+    argparser.add_argument(\n+        \"--allow-nonlocal-files\",\n+        dest=\"allowNonlocalFiles\",\n+        action=\"store_true\",\n+        help=\"Allows Bikeshed to see/include files from folders higher than the one your source document is in.\"\n+    )\n+    argparser.add_argument(\n+        \"--allow-execute\",\n+        dest=\"allowExecute\",\n+        action=\"store_true\",\n+        help=\"Allow some features to execute arbitrary code from outside the Bikeshed codebase.\"\n+    )\n \n     subparsers = argparser.add_subparsers(title=\"Subcommands\", dest=\"subparserName\")\n \n@@ -444,6 +456,8 @@ def main():\n             constants.printMode = \"console\"\n     else:\n         constants.printMode = options.printMode\n+    constants.chroot = not options.allowNonlocalFiles\n+    constants.executeCode = options.allowExecute\n \n     update.fixupDataFiles()\n     if options.subparserName == \"update\":"
        },
        {
          "filename": "bikeshed/config/main.py",
          "status": "modified",
          "additions": 16,
          "deletions": 1,
          "patch": "@@ -4,6 +4,9 @@\n \n import lxml\n \n+from .. import constants\n+from .. import messages\n+\n \n def englishFromList(items, conjunction=\"or\"):\n     # Format a list of strings into an English list.\n@@ -168,7 +171,19 @@ def flatten(arr):\n \n def scriptPath(*pathSegs):\n     startPath = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))\n-    return os.path.join(startPath, *pathSegs)\n+    path = os.path.join(startPath, *pathSegs)\n+    return path\n+\n+\n+def chrootPath(chrootPath, path):\n+    chrootPath = os.path.abspath(chrootPath)\n+    path = os.path.abspath(path)\n+    if not path.startswith(chrootPath):\n+        messages.die(f\"Attempted to access a file ({path}) outside the source document's directory ({chrootPath}). See --allow-nonlocal-files.\")\n+        raise Exception()\n+    else:\n+        return path\n+\n \n \n def doEvery(s, action, lastTime=None):"
        },
        {
          "filename": "bikeshed/config/retrieve.py",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -63,7 +63,7 @@ def _fail(self, location, str, okayToFail):\n )\n \n \n-def retrieveBoilerplateFile(doc, name, group=None, status=None, error=True):\n+def retrieveBoilerplateFile(doc, name, group=None, status=None, error=True, allowLocal=True):\n     # Looks in three or four locations, in order:\n     # the folder the spec source is in, the group's boilerplate folder, the megagroup's boilerplate folder, and the generic boilerplate folder.\n     # In each location, it first looks for the file specialized on status, and then for the generic file.\n@@ -77,7 +77,7 @@ def retrieveBoilerplateFile(doc, name, group=None, status=None, error=True):\n             status = doc.md.rawStatus\n     megaGroup, status = splitStatus(status)\n \n-    searchLocally = doc.md.localBoilerplate[name]\n+    searchLocally = allowLocal and doc.md.localBoilerplate[name]\n \n     def boilerplatePath(*segs):\n         return scriptPath(\"boilerplate\", *segs)\n@@ -101,13 +101,13 @@ def boilerplatePath(*segs):\n                 # We should remove this after giving specs time to react to the warning:\n                 sources.append(doc.inputSource.relative(f))\n     if group:\n-        sources.append(InputSource(boilerplatePath(group, statusFile)))\n-        sources.append(InputSource(boilerplatePath(group, genericFile)))\n+        sources.append(InputSource(boilerplatePath(group, statusFile), chroot=False))\n+        sources.append(InputSource(boilerplatePath(group, genericFile), chroot=False))\n     if megaGroup:\n-        sources.append(InputSource(boilerplatePath(megaGroup, statusFile)))\n-        sources.append(InputSource(boilerplatePath(megaGroup, genericFile)))\n-    sources.append(InputSource(boilerplatePath(statusFile)))\n-    sources.append(InputSource(boilerplatePath(genericFile)))\n+        sources.append(InputSource(boilerplatePath(megaGroup, statusFile), chroot=False))\n+        sources.append(InputSource(boilerplatePath(megaGroup, genericFile), chroot=False))\n+    sources.append(InputSource(boilerplatePath(statusFile), chroot=False))\n+    sources.append(InputSource(boilerplatePath(genericFile), chroot=False))\n \n     # Watch all the possible sources, not just the one that got used, because if\n     # an earlier one appears, we want to rebuild."
        },
        {
          "filename": "bikeshed/constants.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -9,6 +9,8 @@\n biblioDisplay = StringEnum(\"index\", \"inline\")\n specClass = None\n testAnnotationURL = \"https://test.csswg.org/harness/annotate.js\"\n+chroot = True\n+executeCode = False\n \n \n def errorLevelAt(target):"
        },
        {
          "filename": "bikeshed/extensions.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,8 +1,9 @@\n from . import config\n+from . import constants\n from .h import *  # noqa: F401\n from .messages import *  # noqa: F401\n \n \n def load(doc):\n-    code = config.retrieveBoilerplateFile(doc, \"bs-extensions\")\n+    code = config.retrieveBoilerplateFile(doc, \"bs-extensions\", allowLocal=constants.executeCode)\n     exec(code, globals())"
        },
        {
          "filename": "bikeshed/inlineTags/__init__.py",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1,11 +1,15 @@\n from subprocess import PIPE, Popen\n \n+from .. import constants\n from ..h import *\n from ..messages import *\n \n \n def processTags(doc):\n     for el in findAll(\"[data-span-tag]\", doc):\n+        if not constants.executeCode:\n+            die(\"Found an inline code tag, but arbitrary code execution isn't allowed. See the --allow-execute flag.\")\n+            return\n         tag = el.get(\"data-span-tag\")\n         if tag not in doc.md.inlineTagCommands:\n             die(\"Unknown inline tag '{0}' found:\\n  {1}\", tag, outerHTML(el), el=el)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fe09b4ee01d32a40f612fc28e6c41610df5eb0e4",
            "date": "2025-01-10T23:27:30Z",
            "author_login": "tabatkins"
          },
          {
            "sha": "c6b030ad0b521acdde0ed01a9eda89d1431a4e58",
            "date": "2025-01-10T23:27:25Z",
            "author_login": "tabatkins"
          },
          {
            "sha": "a8e792e2288865db3fa18e0b3a8fe9a1f21cf519",
            "date": "2025-01-10T21:02:58Z",
            "author_login": "jyasskin"
          },
          {
            "sha": "44b770a86873a8206734ed56897e19e8e9544a0b",
            "date": "2025-01-10T20:49:51Z",
            "author_login": "jyasskin"
          },
          {
            "sha": "91ab8a9a28bbdc965d734a772e346ae2e07ce43b",
            "date": "2025-01-10T20:48:56Z",
            "author_login": "jyasskin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "This affects the package bikeshed before 3.0.0. This can occur when an untrusted source file containing include, include-code or include-raw block is processed. The contents of arbitrary files could be disclosed in the HTML output.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-08-16T08:15:11.393",
    "last_modified": "2024-11-21T05:51:43.930",
    "fix_date": "2021-08-07T00:41:38Z"
  },
  "references": [
    {
      "url": "https://github.com/tabatkins/bikeshed/commit/b2f668fca204260b1cad28d5078e93471cb6b2dd",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-PYTHON-BIKESHED-1537647",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tabatkins/bikeshed/commit/b2f668fca204260b1cad28d5078e93471cb6b2dd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-PYTHON-BIKESHED-1537647",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:05.084161",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "bikeshed",
    "owner": "tabatkins",
    "created_at": "2013-02-26T00:43:52Z",
    "updated_at": "2025-01-14T00:16:12Z",
    "pushed_at": "2025-01-10T23:28:57Z",
    "size": 654179,
    "stars": 1138,
    "forks": 201,
    "open_issues": 454,
    "watchers": 1138,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "HTML": 112040287,
      "Bikeshed": 22092955,
      "Python": 994411,
      "CSS": 39112,
      "JavaScript": 35955,
      "Emacs Lisp": 7559,
      "Dockerfile": 945,
      "Shell": 226,
      "Bluespec": 73
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "cc0-1.0"
    },
    "collected_at": "2025-01-14T13:34:59.571924"
  }
}