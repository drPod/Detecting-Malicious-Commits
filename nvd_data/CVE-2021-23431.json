{
  "cve_id": "CVE-2021-23431",
  "github_data": {
    "repository": "laurent22/joplin",
    "fix_commit": "19b45de2981c09f6f387498ef96d32b4811eba5e",
    "related_commits": [
      "19b45de2981c09f6f387498ef96d32b4811eba5e",
      "19b45de2981c09f6f387498ef96d32b4811eba5e"
    ],
    "patch_url": "https://github.com/laurent22/joplin/commit/19b45de2981c09f6f387498ef96d32b4811eba5e.patch",
    "fix_commit_details": {
      "sha": "19b45de2981c09f6f387498ef96d32b4811eba5e",
      "commit_date": "2021-07-24T16:45:30Z",
      "author": {
        "login": "laurent22",
        "type": "User",
        "stats": {
          "total_commits": 7916,
          "average_weekly_commits": 18.366589327146173,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 392
        }
      },
      "commit_message": {
        "title": "Server: Added form tokens to prevent CSRF attacks",
        "length": 49,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 98,
        "additions": 82,
        "deletions": 16
      },
      "files": [
        {
          "filename": "packages/server/src/app.ts",
          "status": "modified",
          "additions": 13,
          "deletions": 1,
          "patch": "@@ -135,7 +135,19 @@ async function main() {\n \t\t\tawait next();\n \t\t} catch (error) {\n \t\t\tctx.status = error.httpCode || 500;\n-\t\t\tctx.body = JSON.stringify({ error: error.message });\n+\n+\t\t\t// Since this is a low level error, rendering a view might fail too,\n+\t\t\t// so catch this and default to rendering JSON.\n+\t\t\ttry {\n+\t\t\t\tctx.body = await ctx.joplin.services.mustache.renderView({\n+\t\t\t\t\tname: 'error',\n+\t\t\t\t\ttitle: 'Error',\n+\t\t\t\t\tpath: 'index/error',\n+\t\t\t\t\tcontent: { error },\n+\t\t\t\t});\n+\t\t\t} catch (anotherError) {\n+\t\t\t\tctx.body = { error: anotherError.message };\n+\t\t\t}\n \t\t}\n \t});\n "
        },
        {
          "filename": "packages/server/src/routes/index/upgrade.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -10,6 +10,7 @@ import { bodyFields } from '../../utils/requestUtils';\n import { NotificationKey } from '../../models/NotificationModel';\n import { AccountType } from '../../models/UserModel';\n import { ErrorBadRequest } from '../../utils/errors';\n+import { createCsrfTag } from '../../utils/csrf';\n \n interface FormFields {\n \tupgrade_button: string;\n@@ -21,7 +22,7 @@ function upgradeUrl() {\n \treturn `${config().baseUrl}/upgrade`;\n }\n \n-router.get('upgrade', async (_path: SubPath, _ctx: AppContext) => {\n+router.get('upgrade', async (_path: SubPath, ctx: AppContext) => {\n \tinterface PlanRow {\n \t\tbasicLabel: string;\n \t\tproLabel: string;\n@@ -51,6 +52,7 @@ router.get('upgrade', async (_path: SubPath, _ctx: AppContext) => {\n \t\tbasicPrice: plans.basic.price,\n \t\tproPrice: plans.pro.price,\n \t\tpostUrl: upgradeUrl(),\n+\t\tcsrfTag: await createCsrfTag(ctx),\n \t};\n \tview.cssFiles = ['index/upgrade'];\n \treturn view;"
        },
        {
          "filename": "packages/server/src/routes/index/users.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -17,6 +17,7 @@ import { getCanShareFolder, totalSizeClass } from '../../models/utils/user';\n import { yesNoDefaultOptions } from '../../utils/views/select';\n import { confirmUrl } from '../../utils/urlUtils';\n import { cancelSubscription, updateSubscriptionType } from '../../utils/stripe';\n+import { createCsrfTag } from '../../utils/csrf';\n \n export interface CheckRepeatPasswordInput {\n \tpassword: string;\n@@ -146,6 +147,7 @@ router.get('users/:id', async (path: SubPath, ctx: AppContext, user: User = null\n \tview.content.error = error;\n \tview.content.postUrl = postUrl;\n \tview.content.showDisableButton = !isNew && !!owner.is_admin && owner.id !== user.id && user.enabled;\n+\tview.content.csrfTag = await createCsrfTag(ctx);\n \n \tif (subscription) {\n \t\tview.content.subscription = subscription;"
        },
        {
          "filename": "packages/server/src/utils/csrf.ts",
          "status": "added",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -0,0 +1,37 @@\n+import { ErrorForbidden } from './errors';\n+import { escapeHtml } from './htmlUtils';\n+import { bodyFields, isApiRequest } from './requestUtils';\n+import { AppContext } from './types';\n+\n+interface BodyWithCsrfToken {\n+\t_csrf: string;\n+}\n+\n+export async function csrfCheck(ctx: AppContext, isPublicRoute: boolean) {\n+\tif (isApiRequest(ctx)) return;\n+\tif (isPublicRoute) return;\n+\tif (!['POST', 'PUT'].includes(ctx.method)) return;\n+\tif (ctx.path === '/logout') return;\n+\n+\tconst userId = ctx.joplin.owner ? ctx.joplin.owner.id : '';\n+\tif (!userId) return;\n+\n+\tconst fields = await bodyFields<BodyWithCsrfToken>(ctx.req);\n+\tif (!fields._csrf) throw new ErrorForbidden('CSRF token is missing');\n+\n+\tif (!(await ctx.joplin.models.token().isValid(userId, fields._csrf))) {\n+\t\tthrow new ErrorForbidden(`Invalid CSRF token: ${fields._csrf}`);\n+\t}\n+\n+\tawait ctx.joplin.models.token().deleteByValue(userId, fields._csrf);\n+}\n+\n+export async function createCsrfToken(ctx: AppContext) {\n+\tif (!ctx.joplin.owner) throw new Error('Cannot create CSRF token without a user');\n+\treturn ctx.joplin.models.token().generate(ctx.joplin.owner.id);\n+}\n+\n+export async function createCsrfTag(ctx: AppContext) {\n+\tconst token = await createCsrfToken(ctx);\n+\treturn `<input type=\"hidden\" name=\"_csrf\" value=\"${escapeHtml(token)}\"/>`;\n+}"
        },
        {
          "filename": "packages/server/src/utils/requestUtils.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -22,6 +22,8 @@ export async function formParse(req: any): Promise<FormParseResult> {\n \t\treturn output;\n \t}\n \n+\tif (req.__parsed) return req.__parsed;\n+\n \t// Note that for Formidable to work, the content-type must be set in the\n \t// headers\n \treturn new Promise((resolve: Function, reject: Function) => {\n@@ -32,7 +34,13 @@ export async function formParse(req: any): Promise<FormParseResult> {\n \t\t\t\treturn;\n \t\t\t}\n \n-\t\t\tresolve({ fields, files });\n+\t\t\t// Formidable seems to be doing some black magic and once a request\n+\t\t\t// has been parsed it cannot be parsed again. Doing so will do\n+\t\t\t// nothing, the code will just end there, or maybe wait\n+\t\t\t// indefinitely. So we cache the result on success and return it if\n+\t\t\t// some code somewhere tries again to parse the form.\n+\t\t\treq.__parsed = { fields, files };\n+\t\t\tresolve(req.__parsed);\n \t\t});\n \t});\n }"
        },
        {
          "filename": "packages/server/src/utils/routeUtils.ts",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -4,6 +4,7 @@ import { ErrorBadRequest, ErrorForbidden, ErrorNotFound } from './errors';\n import Router from './Router';\n import { AppContext, HttpMethod, RouteType } from './types';\n import { URL } from 'url';\n+import { csrfCheck } from './csrf';\n \n const { ltrimSlashes, rtrimSlashes } = require('@joplin/lib/path-utils');\n \n@@ -188,10 +189,14 @@ export async function execRequest(routes: Routers, ctx: AppContext) {\n \tconst endPoint = match.route.findEndPoint(ctx.request.method as HttpMethod, match.subPath.schema);\n \tif (ctx.URL && !isValidOrigin(ctx.URL.origin, baseUrl(endPoint.type), endPoint.type)) throw new ErrorNotFound(`Invalid origin: ${ctx.URL.origin}`, 'invalidOrigin');\n \n+\tconst isPublicRoute = match.route.isPublic(match.subPath.schema);\n+\n \t// This is a generic catch-all for all private end points - if we\n \t// couldn't get a valid session, we exit now. Individual end points\n \t// might have additional permission checks depending on the action.\n-\tif (!match.route.isPublic(match.subPath.schema) && !ctx.joplin.owner) throw new ErrorForbidden();\n+\tif (!isPublicRoute && !ctx.joplin.owner) throw new ErrorForbidden();\n+\n+\tawait csrfCheck(ctx, isPublicRoute);\n \n \treturn endPoint.handler(match.subPath, ctx);\n }"
        },
        {
          "filename": "packages/server/src/views/index/upgrade.mustache",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1,7 +1,8 @@\n <h1 class=\"title\">Upgrade your account</h1>\n-<p class=\"subtitle\">Upgrading to a Pro account to get the following benefits.</p>\n+<p class=\"subtitle\">Upgrade to a Pro account to get the following benefits.</p>\n \n <form id=\"upgrade_form\" action=\"{{{postUrl}}}\" method=\"POST\">\n+\t{{{csrfTag}}}\n \t<table class=\"table is-hoverable user-props-table\">\n \t\t<tbody>\n \t\t\t<tr>"
        },
        {
          "filename": "packages/server/src/views/index/user.mustache",
          "status": "modified",
          "additions": 10,
          "deletions": 11,
          "patch": "@@ -4,6 +4,7 @@\n \n \t<div class=\"block\">\n \t\t{{> errorBanner}}\n+\t\t{{{csrfTag}}}\n \t\t<input type=\"hidden\" name=\"id\" value=\"{{user.id}}\"/>\n \t\t<input type=\"hidden\" name=\"is_new\" value=\"{{isNew}}\"/>\n \t\t<div class=\"field\">\n@@ -94,11 +95,11 @@\n \t\t</div>\n \t</div>\n \n-\t<h1 class=\"title\">Your subscription</h1>\n+\t{{#subscription}}\n+\t\t<h1 class=\"title\">Your subscription</h1>\n \n-\t<div class=\"block\">\n-\t\t{{#global.owner.is_admin}}\n-\t\t\t{{#subscription}}\n+\t\t<div class=\"block\">\n+\t\t\t{{#global.owner.is_admin}}\n \t\t\t\t<div class=\"control block\">\n \t\t\t\t\t<p class=\"block\">Stripe Subscription ID: <a href=\"https://dashboard.stripe.com/subscriptions/{{subscription.stripe_subscription_id}}\">{{subscription.stripe_subscription_id}}</a></p>\n \t\t\t\t\t{{#showUpdateSubscriptionBasic}}\n@@ -111,11 +112,9 @@\n \t\t\t\t\t\t<input type=\"submit\" name=\"cancel_subscription_button\" class=\"button is-danger\" value=\"Cancel subscription\" />\n \t\t\t\t\t{{/showCancelSubscription}}\n \t\t\t\t</div>\n-\t\t\t{{/subscription}}\n-\t\t{{/global.owner.is_admin}}\n+\t\t\t{{/global.owner.is_admin}}\n \n-\t\t{{^global.owner.is_admin}}\n-\t\t\t{{#subscription}}\n+\t\t\t{{^global.owner.is_admin}}\n \t\t\t\t<div class=\"control block\">\n \t\t\t\t\t{{#showUpdateSubscriptionPro}}\n \t\t\t\t\t\t<a href=\"{{{global.baseUrl}}}/upgrade\" class=\"button is-warning block\">Upgrade to Pro</a>\n@@ -125,9 +124,9 @@\n \t\t\t\t\t\t<input type=\"submit\" id=\"user_cancel_subscription_button\" name=\"user_cancel_subscription_button\" class=\"button is-danger\" value=\"Cancel subscription\" />\n \t\t\t\t\t{{/showCancelSubscription}}\n \t\t\t\t</div>\n-\t\t\t{{/subscription}}\n-\t\t{{/global.owner.is_admin}}\n-\t</div>\n+\t\t\t{{/global.owner.is_admin}}\n+\t\t</div>\n+\t{{/subscription}}\n \n </form>\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5c711df2e42dc16e8819f76346be9b0d7e3ebbf3",
            "date": "2025-01-14T18:23:59Z",
            "author_login": "joplinbot"
          },
          {
            "sha": "e520a695a65485f97b0e472fecf94355114294dd",
            "date": "2025-01-14T11:52:17Z",
            "author_login": "laurent22"
          },
          {
            "sha": "5ee8a9a45493683c72a36b52e1460b5acdd4f1ac",
            "date": "2025-01-14T11:35:49Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "6b73879512ac93c6e6b45f8f6ad42fcd8226ab4a",
            "date": "2025-01-14T00:51:08Z",
            "author_login": "joplinbot"
          },
          {
            "sha": "f08235f05cfbcda9aeae889f5557ad853636fe69",
            "date": "2025-01-13T18:23:39Z",
            "author_login": "joplinbot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-352",
    "description": "The package joplin before 2.3.2 are vulnerable to Cross-site Request Forgery (CSRF) due to missing CSRF checks in various forms.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-08-24T08:15:22.463",
    "last_modified": "2024-11-21T05:51:44.820",
    "fix_date": "2021-07-24T16:45:30Z"
  },
  "references": [
    {
      "url": "https://github.com/laurent22/joplin/commit/19b45de2981c09f6f387498ef96d32b4811eba5e",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-JOPLIN-1325537",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/laurent22/joplin/commit/19b45de2981c09f6f387498ef96d32b4811eba5e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-JOPLIN-1325537",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:05.105739",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "joplin",
    "owner": "laurent22",
    "created_at": "2017-01-16T21:49:41Z",
    "updated_at": "2025-01-14T15:10:49Z",
    "pushed_at": "2025-01-14T11:35:50Z",
    "size": 503857,
    "stars": 47169,
    "forks": 5133,
    "open_issues": 448,
    "watchers": 47169,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [
      "dev"
    ],
    "languages": {
      "TypeScript": 8591793,
      "JavaScript": 2399283,
      "Rust": 424402,
      "HTML": 236595,
      "CSS": 134921,
      "Java": 126765,
      "Mustache": 75056,
      "Objective-C": 47291,
      "Handlebars": 31635,
      "Shell": 29681,
      "SCSS": 26747,
      "Kotlin": 17183,
      "Ruby": 4892,
      "Objective-C++": 3082,
      "MDX": 1722,
      "Starlark": 1318,
      "C": 419,
      "Swift": 370,
      "Batchfile": 138
    },
    "commit_activity": {
      "total_commits_last_year": 1661,
      "avg_commits_per_week": 31.942307692307693,
      "days_active_last_year": 280
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:27:16.286244"
  }
}