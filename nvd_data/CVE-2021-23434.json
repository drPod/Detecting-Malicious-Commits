{
  "cve_id": "CVE-2021-23434",
  "github_data": {
    "repository": "mariocasciaro/object-path",
    "fix_commit": "7bdf4abefd102d16c163d633e8994ef154cab9eb",
    "related_commits": [
      "7bdf4abefd102d16c163d633e8994ef154cab9eb",
      "7bdf4abefd102d16c163d633e8994ef154cab9eb"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "7bdf4abefd102d16c163d633e8994ef154cab9eb",
      "commit_date": "2021-08-27T14:38:05Z",
      "author": {
        "login": "mariocasciaro",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix prototype pollution when path components are not strings",
        "length": 60,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 21,
        "additions": 19,
        "deletions": 2
      },
      "files": [
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -111,6 +111,9 @@\n         return set(obj, path.split('.').map(getKey), value, doNotReplace);\n       }\n       var currentPath = path[0];\n+      if (typeof currentPath !== 'string' && typeof currentPath !== 'number') {\n+        currentPath = String(currentPath)\n+      }\n       var currentValue = getShallowProperty(obj, currentPath);\n       if (options.includeInheritedProps && (currentPath === '__proto__' ||\n         (currentPath === 'constructor' && typeof currentValue === 'function'))) {"
        },
        {
          "filename": "test.js",
          "status": "modified",
          "additions": 16,
          "deletions": 2,
          "patch": "@@ -241,12 +241,18 @@ describe('set', function () {\n     objectPath.set({}, '__proto__.injected', 'this is bad')\n     expect(Object.prototype.injected).to.be.undefined\n \n+    objectPath.set({}, [['__proto__'], 'injected'], 'this is bad')\n+    expect(Object.prototype.injected).to.be.undefined\n+\n     function Clazz() {}\n     Clazz.prototype.test = 'original'\n \n     objectPath.set(new Clazz(), '__proto__.test', 'this is bad')\n     expect(Clazz.prototype.test).to.be.equal('original')\n \n+    objectPath.set(new Clazz(), [['__proto__'], 'test'], 'this is bad')\n+    expect(Clazz.prototype.test).to.be.equal('original')\n+\n     objectPath.set(new Clazz(), 'constructor.prototype.test', 'this is bad')\n     expect(Clazz.prototype.test).to.be.equal('original')\n   })\n@@ -256,6 +262,11 @@ describe('set', function () {\n       .to.throw('For security reasons')\n     expect(Object.prototype.injected).to.be.undefined\n \n+    expect(function() {\n+      objectPath.withInheritedProps.set({}, [['__proto__'], 'injected'], 'this is bad')\n+      expect(Object.prototype.injected).to.be.undefined\n+    }).to.throw('For security reasons')\n+\n     function Clazz() {}\n     Clazz.prototype.test = 'original'\n \n@@ -267,8 +278,11 @@ describe('set', function () {\n       .to.throw('For security reasons')\n     expect(Clazz.prototype.test).to.be.equal('original')\n \n-    const obj = {}\n-    expect(function() {objectPath.withInheritedProps.set(obj, 'constructor.prototype.injected', 'this is OK')})\n+    expect(function() {objectPath.withInheritedProps.set({}, 'constructor.prototype.injected', 'this is OK')})\n+      .to.throw('For security reasons')\n+    expect(Object.prototype.injected).to.be.undefined\n+\n+    expect(function() {objectPath.withInheritedProps.set({}, [['constructor'], 'prototype', 'injected'], 'this is bad')})\n       .to.throw('For security reasons')\n     expect(Object.prototype.injected).to.be.undefined\n   })"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e6bb638ffdd431176701b3e9024f80050d0ef0a6",
            "date": "2021-09-16T11:00:33Z",
            "author_login": "mariocasciaro"
          },
          {
            "sha": "4f0903fd7c832d12ccbe0d9c3d7e25d985e9e884",
            "date": "2021-09-16T11:00:15Z",
            "author_login": "mariocasciaro"
          },
          {
            "sha": "43a926f5bcba44e522456b0e2b4b341de32c4a19",
            "date": "2021-08-27T14:48:36Z",
            "author_login": "mariocasciaro"
          },
          {
            "sha": "3864273ee91712b0ea49e1f6553fd954195f8664",
            "date": "2021-08-27T14:48:27Z",
            "author_login": "mariocasciaro"
          },
          {
            "sha": "94f92d8932fce12eeff853116646160477c6ce11",
            "date": "2021-08-27T14:39:11Z",
            "author_login": "mariocasciaro"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-843",
    "description": "This affects the package object-path before 0.11.6. A type confusion vulnerability can lead to a bypass of CVE-2020-15256 when the path components used in the path parameter are arrays. In particular, the condition currentPath === '__proto__' returns false if currentPath is ['__proto__']. This is because the === operator returns always false when the type of the operands is different.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-08-27T17:15:06.910",
    "last_modified": "2024-11-21T05:51:45.147",
    "fix_date": "2021-08-27T14:38:05Z"
  },
  "references": [
    {
      "url": "https://github.com/mariocasciaro/object-path%230116",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/mariocasciaro/object-path/commit/7bdf4abefd102d16c163d633e8994ef154cab9eb",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/01/msg00031.html",
      "source": "report@snyk.io",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1570423",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-OBJECTPATH-1569453",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mariocasciaro/object-path%230116",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link"
      ]
    },
    {
      "url": "https://github.com/mariocasciaro/object-path/commit/7bdf4abefd102d16c163d633e8994ef154cab9eb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/01/msg00031.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1570423",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-OBJECTPATH-1569453",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:05.114718",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "object-path",
    "owner": "mariocasciaro",
    "created_at": "2013-09-20T01:00:11Z",
    "updated_at": "2025-01-24T22:38:23Z",
    "pushed_at": "2023-01-06T15:12:32Z",
    "size": 432,
    "stars": 1065,
    "forks": 84,
    "open_issues": 34,
    "watchers": 1065,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 50591
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:49:11.569470"
  }
}