{
  "cve_id": "CVE-2021-23784",
  "github_data": {
    "repository": "lukeed/tempura",
    "fix_commit": "58a5c3671e2f36b26810e77ead9e0dd471902f9b",
    "related_commits": [
      "58a5c3671e2f36b26810e77ead9e0dd471902f9b",
      "58a5c3671e2f36b26810e77ead9e0dd471902f9b"
    ],
    "patch_url": "https://github.com/lukeed/tempura/commit/58a5c3671e2f36b26810e77ead9e0dd471902f9b.patch",
    "fix_commit_details": {
      "sha": "58a5c3671e2f36b26810e77ead9e0dd471902f9b",
      "commit_date": "2021-08-25T16:27:47Z",
      "author": {
        "login": "lukeed",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "break: ensure `esc` always returns a string;",
        "length": 85,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 37,
        "additions": 23,
        "deletions": 14
      },
      "files": [
        {
          "filename": "docs/api.md",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -6,14 +6,18 @@\n \n \n ### tempura.esc(value)\n-Returns: `string` or `typeof value`\n+Returns: `string`\n \n #### value\n Type: `string` or `unknown`\n \n The value to be HTML-escaped. The following special characters are escaped: `\"`, `&`, and `<`.\n \n-> **Note:** Any non-`string` values are returned as is.\n+> **Note:** Any non-`string` values are coerced to a strings!\n+>  * `null` and `undefined` become `\"\"`\n+>  * `{ foo: 123 }` becomes `\"[object Object]\"`\n+>  * `[1, 2, 3]` becomes `\"1,2,3\"`\n+>  * `123` becomes `\"123\"`\n \n \n ### tempura.compile(input, options?)"
        },
        {
          "filename": "src/$index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -7,7 +7,7 @@ const ESCAPE = /[&\"<]/g, CHARS = {\n import { gen } from './$utils';\n \n export function esc(value) {\n-\tif (typeof value !== 'string') return value;\n+\tvalue = (value == null) ? '' : '' + value;\n \tlet last=ESCAPE.lastIndex=0, tmp=0, out='';\n \twhile (ESCAPE.test(value)) {\n \t\ttmp = ESCAPE.lastIndex - 1;"
        },
        {
          "filename": "src/index.d.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -12,7 +12,7 @@ export interface Options {\n \tasync?: boolean;\n }\n \n-export function esc<T=unknown>(value: T): T|string;\n+export function esc(value: string|unknown): string;\n export function transform(input: string, options?: Options & { format?: 'esm' | 'cjs' }): string;\n \n type CompileOptions = Options & { escape?: typeof esc };"
        },
        {
          "filename": "test/$index.js",
          "status": "modified",
          "additions": 15,
          "deletions": 10,
          "patch": "@@ -263,16 +263,21 @@ esc('should be a function', () => {\n \tassert.type(tempura.esc, 'function');\n });\n \n-esc('should echo non-string inputs', () => {\n-\t// @ts-ignore\n-\tassert.is(tempura.esc(), undefined);\n-\tassert.is(tempura.esc(null), null);\n-\tassert.is(tempura.esc(false), false);\n-\tassert.is(tempura.esc(123), 123);\n-\tassert.is(tempura.esc(0), 0);\n-\n-\tassert.equal(tempura.esc([1, 2, 3]), [1, 2, 3]);\n-\tassert.equal(tempura.esc({ foo: 1 }), { foo: 1 });\n+esc('should convert non-string inputs to string', () => {\n+\tassert.is(tempura.esc(), '');\n+\tassert.is(tempura.esc(null), '');\n+\n+\tassert.is(tempura.esc(false), 'false');\n+\tassert.is(tempura.esc(123), '123');\n+\tassert.is(tempura.esc(0), '0');\n+\n+\tassert.equal(tempura.esc([1, 2, 3]), '1,2,3');\n+\tassert.equal(tempura.esc({ foo: 1 }), '[object Object]');\n+});\n+\n+esc('should prevent xss scripting in array', () => {\n+\tlet output = tempura.esc(['<img src=x onerror=\"alert(1)\" />']);\n+\tassert.is(output, '&ltimg src=x onerror=&quot;alert(1)&quot; />');\n });\n \n esc('should return string from string input', () => {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "8e67621995910e9e83fae3f7175c8cf5d55f7bc1",
            "date": "2024-07-12T21:24:50Z",
            "author_login": "lukeed"
          },
          {
            "sha": "3a3521e43b7908d9ae4f16b00ee0fe3968df331c",
            "date": "2024-07-12T21:19:53Z",
            "author_login": "aldy505"
          },
          {
            "sha": "e1c6a38da65876751b54a26d8a6371d6cf587459",
            "date": "2024-01-20T17:30:58Z",
            "author_login": "lukeed"
          },
          {
            "sha": "b0dfe58b33d773b7f63ad40ba7429f1d58b74b4e",
            "date": "2024-01-20T17:30:19Z",
            "author_login": "lukeed"
          },
          {
            "sha": "86c7bd4d4f9b03c6191debdf44d4b3e9c4b7efff",
            "date": "2021-10-26T15:15:34Z",
            "author_login": "lukeed"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "This affects the package tempura before 0.4.0. If the input to the esc function is of type object (i.e an array) it is returned without being escaped/sanitized, leading to a potential Cross-Site Scripting vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-03T18:15:08.180",
    "last_modified": "2024-11-21T05:51:53.267",
    "fix_date": "2021-08-25T16:27:47Z"
  },
  "references": [
    {
      "url": "https://github.com/lukeed/tempura/commit/58a5c3671e2f36b26810e77ead9e0dd471902f9b",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lukeed/tempura/releases/tag/v0.4.0",
      "source": "report@snyk.io",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-TEMPURA-1569633",
      "source": "report@snyk.io",
      "tags": [
        "Exploit",
        "Mitigation",
        "Patch",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/lukeed/tempura/commit/58a5c3671e2f36b26810e77ead9e0dd471902f9b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lukeed/tempura/releases/tag/v0.4.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://snyk.io/vuln/SNYK-JS-TEMPURA-1569633",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mitigation",
        "Patch",
        "Third Party Advisory",
        "VDB Entry"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.867092",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tempura",
    "owner": "lukeed",
    "created_at": "2020-12-10T07:30:42Z",
    "updated_at": "2025-01-08T07:49:24Z",
    "pushed_at": "2024-07-12T21:24:52Z",
    "size": 111,
    "stars": 533,
    "forks": 10,
    "open_issues": 12,
    "watchers": 533,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 38332,
      "Handlebars": 415
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:01:55.649792"
  }
}