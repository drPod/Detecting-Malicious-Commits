{
  "cve_id": "CVE-2021-23900",
  "github_data": {
    "repository": "OWASP/json-sanitizer",
    "fix_commit": "a37f594f7378a1c76b3283e0dab9e1ab1dc0247e",
    "related_commits": [
      "a37f594f7378a1c76b3283e0dab9e1ab1dc0247e",
      "a37f594f7378a1c76b3283e0dab9e1ab1dc0247e"
    ],
    "patch_url": "https://github.com/OWASP/json-sanitizer/commit/a37f594f7378a1c76b3283e0dab9e1ab1dc0247e.patch",
    "fix_commit_details": {
      "sha": "a37f594f7378a1c76b3283e0dab9e1ab1dc0247e",
      "commit_date": "2021-01-12T22:31:19Z",
      "author": {
        "login": "mikesamuel",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Tests for fixes for previously undisclosed vulnerabilities",
        "length": 352,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 145,
        "additions": 144,
        "deletions": 1
      },
      "files": [
        {
          "filename": "src/test/java/com/google/json/FuzzyTest.java",
          "status": "modified",
          "additions": 43,
          "deletions": 0,
          "patch": "@@ -62,6 +62,32 @@ public static final void testSanitizerLikesFuzzyWuzzyInputs()\n         String sanitized0 = JsonSanitizer.sanitize(fuzzyWuzzyString);\n         String sanitized1 = JsonSanitizer.sanitize(sanitized0);\n         // Test idempotence.\n+        if (!sanitized0.equals(sanitized1)) {\n+          int commonPrefixLen = 0;\n+          int minLength = Math.min(sanitized0.length(), sanitized1.length());\n+          while (commonPrefixLen < minLength) {\n+            if (sanitized0.charAt(commonPrefixLen) != sanitized1.charAt(commonPrefixLen)) {\n+              break;\n+            }\n+            ++commonPrefixLen;\n+          }\n+\n+          int right0 = sanitized0.length();\n+          int right1 = sanitized1.length();\n+          while (right0 > commonPrefixLen && right1 > commonPrefixLen) {\n+            if (sanitized0.charAt(right0 - 1) != sanitized1.charAt(right1 - 1)) {\n+              break;\n+            }\n+            --right0;\n+            --right1;\n+          }\n+\n+          int commonSuffixLen = sanitized0.length() - right0;\n+\n+          System.err.println(\"Difference at \" + commonPrefixLen + \" to -\" + commonSuffixLen);\n+          System.err.println(\"Before: \" + excerpt(sanitized0, commonPrefixLen, right0));\n+          System.err.println(\"After:  \" + excerpt(sanitized0, commonPrefixLen, right1));\n+        }\n         assertEquals(fuzzyWuzzyString + \"  =>  \" + sanitized0, sanitized0,\n                      sanitized1);\n       } catch (Throwable th) {\n@@ -90,6 +116,23 @@ private static void hexDump(byte[] bytes, Appendable app)\n       app.append(\"0123456789ABCDEF\".charAt((b >>> 0) & 0xf));\n     }\n   }\n+\n+  private static String excerpt(String s, int left, int right) {\n+    int leftIncl = left - 10;\n+    boolean ellipseLeft = leftIncl > 0;\n+    if (!ellipseLeft) { leftIncl = 0; }\n+\n+    int rightIncl = right + 10;\n+    boolean ellipseRight = s.length() > rightIncl;\n+    if (!ellipseRight) {\n+      rightIncl = s.length();\n+    }\n+\n+    return s.substring(leftIncl, rightIncl)\n+            .replace(\"\\r\", \"\\\\r\")\n+            .replace(\"\\n\", \"\\\\n\")\n+            .replace(\"\\\\\", \"\\\\\\\\\");\n+  }\n }\n \n final class FuzzyStringGenerator implements Iterable<String> {"
        },
        {
          "filename": "src/test/java/com/google/json/JsonSanitizerTest.java",
          "status": "modified",
          "additions": 101,
          "deletions": 1,
          "patch": "@@ -16,6 +16,8 @@\n \n import static com.google.json.JsonSanitizer.DEFAULT_NESTING_DEPTH;\n import static com.google.json.JsonSanitizer.sanitize;\n+\n+import java.util.Locale;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import junit.framework.TestCase;\n@@ -198,7 +200,7 @@ public static final void testMaximumNestingLevelAssignment() {\n   }\n \n   @Test\n-  public static final void testClosedArray() {\n+  public static final void testUnopenedArray() {\n     // Discovered by fuzzer with seed -Dfuzz.seed=df3b4778ce54d00a\n     assertSanitized(\"-1742461140214282\", \"\\ufeff-01742461140214282]\");\n   }\n@@ -228,4 +230,102 @@ public static final void testHtmlParserStateChanges() {\n \n     assertSanitized(\"\\\"\\\\u003c!--\\\\u003cscript>\\\"\", \"\\\"<!--<script>\\\"\");\n   }\n+\n+  @Test\n+  public static final void testLongOctalNumberWithBadDigits() {\n+    // Found by Fabian Meumertzheim using CI Fuzz (https://www.code-intelligence.com)\n+    assertEquals(\n+            \"-888888888888888888888\",\n+            JsonSanitizer.sanitize(\"-0888888888888888888888\")\n+    );\n+  }\n+\n+  @Test\n+  public static final void testLongNumberInUnclosedInputWithU80() {\n+    // Found by Fabian Meumertzheim using CI Fuzz (https://www.code-intelligence.com)\n+    assertEquals(\n+            \"{\\\"\\\":{\\\"\\\":{\\\"\\\":{\\\"\\\":{\\\"\\\":{\\\"\\\":{\\\"x80\\\":{\\\"\\\":{\\\"\\\":[-400557869725698078427]}}}}}}}}}\",\n+            JsonSanitizer.sanitize(\"{{{{{{{\\\\x80{{([-053333333304233333333333\")\n+    );\n+  }\n+\n+  @Test\n+  public static final void testSlashFour() {\n+    // Found by Fabian Meumertzheim using CI Fuzz (https://www.code-intelligence.com)\n+    assertEquals(\"\\\"y\\\\u0004\\\"\", JsonSanitizer.sanitize(\"y\\\\4\")); // \"y\\4\"\n+  }\n+\n+  @Test\n+  public static final void testUnterminatedObject() {\n+    // Found by Fabian Meumertzheim using CI Fuzz (https://www.code-intelligence.com)\n+    String input = \"?\\u0000\\u0000\\u0000{{\\u0000\\ufffd\\u0003]ve{R]\\u00000\\ufffd\\u0016&e{\\u0003]\\ufffda<!.b<!<!cc1x\\u0000\\u00005{281<\\u0000.{t\\u0001\\ufffd5\\ufffd{5\\ufffd\\ufffd0\\ufffd15\\r\\ufffd\\u0000\\u0000\\u0000~~-0081273222428822883223759,55\\ufffd\\u0000\\ufffd\\t\\u0000\\ufffd\";\n+    String got = JsonSanitizer.sanitize(input);\n+    String want = \"{\\\"\\\":{},\\\"ve\\\":{\\\"R\\\":null},\\\"0\\\":\\\"e\\\",\\\"\\\":{},\\\"a<!.b<!<!cc1x\\\":5,\\\"\\\":{\\\"281\\\":0.0,\\\"\\\":{\\\"t\\\":5,\\\"\\\":{\\\"5\\\":0,\\\"15\\\"\\r:-81273222428822883223759,\\\"55\\\"\\t:null}}}}\";\n+    assertEquals(want, got);\n+  }\n+\n+  @Test\n+  public static final void testCrash1() {\n+    // Found by Fabian Meumertzheim using CI Fuzz (https://www.code-intelligence.com)\n+    String input = \"?\\u0000\\u0000\\u0000{{\\u0000\\ufffd\\u0003]ve{R]\\u00000\\ufffd\\ufffd\\u0016&e{\\u0003]\\ufffda<!.b<!<!c\\u00005{281<\\u0000.{t\\u0001\\ufffd5\\ufffd{515\\r[\\u0000\\u0000\\u0000~~-008127322242\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd23759,551x\\u0000\\u00006{281<\\u0000.{t\\u0001\\ufffd5\\ufffd{5\\ufffd\\ufffd0\\ufffd15\\r[\\u0000\\u0000\\u0000~~-0081273222428822883223759,\\ufffd\";\n+    String want = \"{\\\"\\\":{},\\\"ve\\\":{\\\"R\\\":null},\\\"0\\\":\\\"e\\\",\\\"\\\":{},\\\"a<!.b<!<!c\\\":5,\\\"\\\":{\\\"281\\\":0.0,\\\"\\\":{\\\"t\\\":5,\\\"\\\":{\\\"515\\\"\\r:[-8127322242,23759,551,6,{\\\"281\\\":0.0,\\\"\\\":{\\\"t\\\":5,\\\"\\\":{\\\"5\\\":0,\\\"15\\\"\\r:[-81273222428822883223759]}}}]}}}}\";\n+    String got = JsonSanitizer.sanitize(input);\n+    assertEquals(want, got);\n+  }\n+\n+  @Test\n+  public static final void testDisallowedSubstrings() {\n+    // Found by Fabian Meumertzheim using CI Fuzz (https://www.code-intelligence.com)\n+    String[] inputs = {\n+            \"x<\\\\script>\",\n+            \"x</\\\\script>\",\n+            \"x</sc\\\\ript>\",\n+            \"x<\\\\163cript>\",\n+            \"x</\\\\163cript>\",\n+            \"x<\\\\123cript>\",\n+            \"x</\\\\123cript>\",\n+            \"u\\\\u\\\\uu\\ufffd\\ufffd\\\\u7u\\\\u\\\\u\\\\u\\ufffdu<\\\\script>5\",\n+            \"z\\\\<\\\\!--\",\n+            \"z\\\\<!\\\\--\",\n+            \"z\\\\<!-\\\\-\",\n+            \"z\\\\<\\\\!--\",\n+            \"\\\"\\\\]]\\\\>\",\n+    };\n+    for (String input : inputs) {\n+      String out = JsonSanitizer.sanitize(input).toLowerCase(Locale.ROOT);\n+      assertFalse(out, out.contains(\"<!--\"));\n+      assertFalse(out, out.contains(\"-->\"));\n+      assertFalse(out, out.contains(\"<script\"));\n+      assertFalse(out, out.contains(\"</script\"));\n+      assertFalse(out, out.contains(\"]]>\"));\n+      assertFalse(out, out.contains(\"<![cdata[\"));\n+    }\n+  }\n+\n+  @Test\n+  public static final void testXssPayload() {\n+    // Found by Fabian Meumertzheim using CI Fuzz (https://www.code-intelligence.com)\n+    String input = \"x</\\\\script>u\\\\u\\\\uu\\ufffd\\ufffd\\\\u7u\\\\u\\\\u\\\\u\\ufffdu<\\\\script>5+alert(1)//\";\n+    assertEquals(\n+            \"\\\"x\\\\u003c/script>uuuu\\uFFFD\\uFFFDu7uuuu\\uFFFDu\\\\u003cscript>5+alert(1)//\\\"\",\n+            JsonSanitizer.sanitize(input)\n+    );\n+  }\n+\n+  @Test\n+  public static final void testInvalidOutput() {\n+    // Found by Fabian Meumertzheim using CI Fuzz (https://www.code-intelligence.com)\n+    String input = \"\\u0010{'\\u0000\\u0000'\\\"\\u0000\\\"{.\\ufffd-0X29295909049550970,\\n\\n0\";\n+    String want = \"{\\\"\\\\u0000\\\\u0000\\\":\\\"\\\\u0000\\\",\\\"\\\":{\\\"0\\\":-47455995597866469744,\\n\\n\\\"0\\\":null}}\";\n+    String got = JsonSanitizer.sanitize(input);\n+    assertEquals(want, got);\n+  }\n+\n+  @Test\n+  public static final void testBadNumber() {\n+    String input = \"\u00b60x.\\\\\u8e434\\\\\u00c0906\";\n+    String want = \"0.0\";\n+    String got = JsonSanitizer.sanitize(input);\n+    assertEquals(want, got);\n+  }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 1,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "fc612ab374de73d03864d56fb87b6a103b234489",
            "date": "2021-05-13T16:16:43Z",
            "author_login": "mikesamuel"
          },
          {
            "sha": "55fb5a0cdf05720d2591501a98d00f7df6250226",
            "date": "2021-05-12T15:15:12Z",
            "author_login": "mikesamuel"
          },
          {
            "sha": "3c41873bb623d04f103c4c689c4efd44fa1eb03f",
            "date": "2021-05-12T15:14:13Z",
            "author_login": "mikesamuel"
          },
          {
            "sha": "74a49ac3356d6e05ea4246c2fe1ae7e17cac3090",
            "date": "2021-05-12T15:09:22Z",
            "author_login": "mikesamuel"
          },
          {
            "sha": "c8bc28cb835d8e461665966962ccc5fd565043b1",
            "date": "2021-05-12T14:58:46Z",
            "author_login": "mikesamuel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": null,
    "description": "OWASP json-sanitizer before 1.2.2 can output invalid JSON or throw an undeclared exception for crafted input. This may lead to denial of service if the application is not prepared to handle these situations.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-01-13T16:15:14.490",
    "last_modified": "2024-11-21T05:52:01.793",
    "fix_date": "2021-01-12T22:31:19Z"
  },
  "references": [
    {
      "url": "https://github.com/OWASP/json-sanitizer/commit/a37f594f7378a1c76b3283e0dab9e1ab1dc0247e",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/OWASP/json-sanitizer/compare/v1.2.1...v1.2.2",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://groups.google.com/g/json-sanitizer-support/c/dAW1AeNMoA0",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/OWASP/json-sanitizer/commit/a37f594f7378a1c76b3283e0dab9e1ab1dc0247e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/OWASP/json-sanitizer/compare/v1.2.1...v1.2.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://groups.google.com/g/json-sanitizer-support/c/dAW1AeNMoA0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:13.145782",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "json-sanitizer",
    "owner": "OWASP",
    "created_at": "2015-04-24T18:39:53Z",
    "updated_at": "2024-12-08T23:22:07Z",
    "pushed_at": "2023-11-22T18:08:29Z",
    "size": 761,
    "stars": 208,
    "forks": 50,
    "open_issues": 8,
    "watchers": 208,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 89691,
      "Shell": 2739
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:35:17.330472"
  }
}