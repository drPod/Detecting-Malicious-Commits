{
  "cve_id": "CVE-2021-25914",
  "github_data": {
    "repository": "FireBlinkLTD/object-collider",
    "fix_commit": "321f75a7f8e7b3393e5b7dd6dd9ab26ede5906e5",
    "related_commits": [
      "321f75a7f8e7b3393e5b7dd6dd9ab26ede5906e5",
      "321f75a7f8e7b3393e5b7dd6dd9ab26ede5906e5"
    ],
    "patch_url": "https://github.com/FireBlinkLTD/object-collider/commit/321f75a7f8e7b3393e5b7dd6dd9ab26ede5906e5.patch",
    "fix_commit_details": {
      "sha": "321f75a7f8e7b3393e5b7dd6dd9ab26ede5906e5",
      "commit_date": "2021-02-24T16:07:19Z",
      "author": {
        "login": "vlad-tkachenko",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: __proto__ property merge",
        "length": 29,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 66,
        "additions": 44,
        "deletions": 22
      },
      "files": [
        {
          "filename": "src/utils/CollideUtil.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 8,
          "patch": "@@ -25,7 +25,7 @@ export function collide(arg1: any, arg2: any, modifiers?: ICollideModifiers, sta\n  * @param startPath the entry path to start modifier path generation. Default value: $\n  * @returns collide result\n  */\n-export function collideUnsafe(arg1: any, arg2: any,  modifiers?: ICollideModifiers, startPath: string = '$'): any {\n+export function collideUnsafe(arg1: any, arg2: any, modifiers?: ICollideModifiers, startPath = '$'): any {\n     if (arg2 === undefined) {\n         return arg1;\n     }\n@@ -78,14 +78,15 @@ function collideObjects(obj1: any, obj2: any, path: string, modifiers?: ICollide\n \n     for (const key of Object.keys(obj2)) {\n         const subPath = path + '.' + key;\n-\n-        if (obj1[key] === undefined) {\n-            obj1[key] = obj2[key];\n-        } else {\n-            if (modifiers && modifiers[subPath]) {\n-                obj1[key] = modifiers[subPath](obj1[key], obj2[key]);\n+        if (key !== '__proto__') {\n+            if (obj1[key] === undefined) {\n+                obj1[key] = obj2[key];\n             } else {\n-                obj1[key] = collideUnsafe(obj1[key], obj2[key], modifiers, subPath);\n+                if (modifiers && modifiers[subPath]) {\n+                    obj1[key] = modifiers[subPath](obj1[key], obj2[key]);\n+                } else {\n+                    obj1[key] = collideUnsafe(obj1[key], obj2[key], modifiers, subPath);\n+                }\n             }\n         }\n     }"
        },
        {
          "filename": "test/unit/CollideUtilTestSuite.ts",
          "status": "modified",
          "additions": 35,
          "deletions": 14,
          "patch": "@@ -62,20 +62,17 @@ class CollideUtilTestSuite {\n             override: 11,\n         };\n \n-        collideUnsafe(\n-            obj1,\n-            {\n-                array: [3, 4],\n-                obj: {\n-                    b: false,\n-                    d: 'd',\n-                    e: 1,\n-                    n: null,\n-                    array: [12, 13, 14],\n-                },\n-                override: 111,\n+        collideUnsafe(obj1, {\n+            array: [3, 4],\n+            obj: {\n+                b: false,\n+                d: 'd',\n+                e: 1,\n+                n: null,\n+                array: [12, 13, 14],\n             },\n-        );\n+            override: 111,\n+        });\n \n         assert.deepStrictEqual(obj1, {\n             array: [1, 2, 3, 4],\n@@ -164,7 +161,7 @@ class CollideUtilTestSuite {\n                 '#.custom.obj': (a: any, b: any) => Object.assign(a, b),\n                 '#.custom.override': (a: any) => a,\n             },\n-            '#.custom'\n+            '#.custom',\n         );\n \n         assert.deepStrictEqual(result, {\n@@ -259,4 +256,28 @@ class CollideUtilTestSuite {\n             collide({ a: [1, 2] }, { a: true });\n         }).to.throw('Unable to collide. Collide value at path $.a is not an array.');\n     }\n+\n+    @test()\n+    async testWithPrototypePollution(): Promise<void> {\n+        const collideWith = JSON.parse(`{\n+            \"__proto__\": {\n+                \"vulnerable\": \"yes\"\n+            },\n+            \"array\": [3, 4]\n+        }`);\n+\n+        console.log(collideWith);\n+\n+        const result = collide(\n+            {\n+                array: [1, 2],\n+            },\n+            collideWith,\n+        );\n+\n+        assert.ok(!result.vulnerable);\n+        assert.deepStrictEqual(result, {\n+            array: [1, 2, 3, 4],\n+        });\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4c9e0c3394b4d54855f3dae9825cdd93ea238d1b",
            "date": "2023-12-01T10:57:28Z",
            "author_login": "vlad-tkachenko"
          },
          {
            "sha": "781c3c9a43cd5391d667e840b8fb0d7b8a5371ee",
            "date": "2023-12-01T10:51:24Z",
            "author_login": "vlad-tkachenko"
          },
          {
            "sha": "cac9f97b11d5394cf0404e94b0e4c276ecf9a62a",
            "date": "2023-12-01T10:47:50Z",
            "author_login": "vlad-tkachenko"
          },
          {
            "sha": "64e3c2401eb9a0eb6ef0768bfa48720e8f2cbe9e",
            "date": "2023-12-01T10:41:07Z",
            "author_login": "vlad-tkachenko"
          },
          {
            "sha": "c5c5204aa666b11cee137a6634b94c3439d5395d",
            "date": "2023-12-01T10:34:52Z",
            "author_login": "vlad-tkachenko"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-1321",
    "description": "Prototype pollution vulnerability in 'object-collider' versions 1.0.0 through 1.0.3 allows attacker to cause a denial of service and may lead to remote code execution.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-03-01T18:15:19.957",
    "last_modified": "2024-11-21T05:55:35.780",
    "fix_date": "2021-02-24T16:07:19Z"
  },
  "references": [
    {
      "url": "https://github.com/FireBlinkLTD/object-collider/commit/321f75a7f8e7b3393e5b7dd6dd9ab26ede5906e5",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25914",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FireBlinkLTD/object-collider/commit/321f75a7f8e7b3393e5b7dd6dd9ab26ede5906e5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25914",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:16.813887",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "object-collider",
    "owner": "FireBlinkLTD",
    "created_at": "2019-01-14T18:32:47Z",
    "updated_at": "2023-12-07T07:54:28Z",
    "pushed_at": "2024-06-16T09:57:33Z",
    "size": 702,
    "stars": 3,
    "forks": 3,
    "open_issues": 1,
    "watchers": 3,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "TypeScript": 10751,
      "JavaScript": 244,
      "Shell": 71
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T17:39:19.724866"
  }
}