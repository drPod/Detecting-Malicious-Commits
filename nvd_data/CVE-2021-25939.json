{
  "cve_id": "CVE-2021-25939",
  "github_data": {
    "repository": "arangodb/arangodb",
    "fix_commit": "d7b35a6884c6b2802d34d79fb2a79fb2c9ec2175",
    "related_commits": [
      "d7b35a6884c6b2802d34d79fb2a79fb2c9ec2175",
      "d9b7f019d2435f107b19a59190bf9cc27d5f34dd",
      "d7b35a6884c6b2802d34d79fb2a79fb2c9ec2175",
      "d9b7f019d2435f107b19a59190bf9cc27d5f34dd"
    ],
    "patch_url": "https://github.com/arangodb/arangodb/commit/d7b35a6884c6b2802d34d79fb2a79fb2c9ec2175.patch",
    "fix_commit_details": {
      "sha": "d7b35a6884c6b2802d34d79fb2a79fb2c9ec2175",
      "commit_date": "2021-12-30T03:34:00Z",
      "author": {
        "login": "jsteemann",
        "type": "User",
        "stats": {
          "total_commits": 18359,
          "average_weekly_commits": 26.568740955137482,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 623
        }
      },
      "commit_message": {
        "title": "[APM-78] Disable installation from remote URL (#15292) (#15343)",
        "length": 211,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 319,
        "additions": 316,
        "deletions": 3
      },
      "files": [
        {
          "filename": "CHANGELOG",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1,6 +1,10 @@\n v3.9.0 (XXXX-XX-XX)\n -------------------\n \n+* APM-78: Added startup security option `--foxx.allow-install-from-remote` to\n+  allow installing Foxx apps from remote URLs other than Github. The option is\n+  turned off by default.\n+\n * Fixed BTS-693: Sort-limit rule now always ensures proper LIMIT node placement\n   to avoid possible invalid results in the fullCount data\n "
        },
        {
          "filename": "arangod/GeneralServer/ServerSecurityFeature.cpp",
          "status": "modified",
          "additions": 16,
          "deletions": 1,
          "patch": "@@ -37,7 +37,8 @@ ServerSecurityFeature::ServerSecurityFeature(\n     : ApplicationFeature(server, \"ServerSecurity\"),\n       _enableFoxxApi(true),\n       _enableFoxxStore(true),\n-      _hardenedRestApi(false) {\n+      _hardenedRestApi(false),\n+      _foxxAllowInstallFromRemote(false) {\n   setOptional(false);\n   startsAfter<application_features::GreetingsFeaturePhase>();\n }\n@@ -68,6 +69,16 @@ void ServerSecurityFeature::collectOptions(\n                       arangodb::options::Flags::OnCoordinator,\n                       arangodb::options::Flags::OnSingle))\n       .setIntroducedIn(30500);\n+  options\n+      ->addOption(\n+          \"--foxx.allow-install-from-remote\",\n+          \"allow installing Foxx apps from remote URLs other than Github\",\n+          new BooleanParameter(&_foxxAllowInstallFromRemote),\n+          arangodb::options::makeFlags(\n+              arangodb::options::Flags::DefaultNoComponents,\n+              arangodb::options::Flags::OnCoordinator,\n+              arangodb::options::Flags::OnSingle))\n+      .setIntroducedIn(30805);\n }\n \n bool ServerSecurityFeature::isFoxxApiDisabled() const {\n@@ -95,3 +106,7 @@ bool ServerSecurityFeature::canAccessHardenedApi() const {\n   }\n   return allowAccess;\n }\n+\n+bool ServerSecurityFeature::foxxAllowInstallFromRemote() const {\n+  return _foxxAllowInstallFromRemote;\n+}"
        },
        {
          "filename": "arangod/GeneralServer/ServerSecurityFeature.h",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -39,11 +39,13 @@ class ServerSecurityFeature final\n   bool isFoxxApiDisabled() const;\n   bool isFoxxStoreDisabled() const;\n   bool canAccessHardenedApi() const;\n+  bool foxxAllowInstallFromRemote() const;\n \n  private:\n   bool _enableFoxxApi;\n   bool _enableFoxxStore;\n   bool _hardenedRestApi;\n+  bool _foxxAllowInstallFromRemote;\n };\n \n }  // namespace arangodb"
        },
        {
          "filename": "arangod/V8Server/v8-actions.cpp",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -1911,6 +1911,19 @@ static void JS_IsFoxxStoreDisabled(\n   TRI_V8_TRY_CATCH_END\n }\n \n+static void JS_FoxxAllowInstallFromRemote(\n+    v8::FunctionCallbackInfo<v8::Value> const& args) {\n+  TRI_V8_TRY_CATCH_BEGIN(isolate)\n+  v8::HandleScope scope(isolate);\n+\n+  TRI_GET_GLOBALS();\n+  ServerSecurityFeature& security =\n+      v8g->_server.getFeature<ServerSecurityFeature>();\n+  TRI_V8_RETURN_BOOL(security.foxxAllowInstallFromRemote());\n+\n+  TRI_V8_TRY_CATCH_END\n+}\n+\n static void JS_RunInRestrictedContext(\n     v8::FunctionCallbackInfo<v8::Value> const& args) {\n   TRI_V8_TRY_CATCH_BEGIN(isolate)\n@@ -1998,6 +2011,10 @@ void TRI_InitV8ServerUtils(v8::Isolate* isolate) {\n   TRI_AddGlobalFunctionVocbase(\n       isolate, TRI_V8_ASCII_STRING(isolate, \"SYS_IS_FOXX_STORE_DISABLED\"),\n       JS_IsFoxxStoreDisabled, true);\n+  TRI_AddGlobalFunctionVocbase(\n+      isolate,\n+      TRI_V8_ASCII_STRING(isolate, \"SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE\"),\n+      JS_FoxxAllowInstallFromRemote, true);\n   TRI_AddGlobalFunctionVocbase(\n       isolate, TRI_V8_ASCII_STRING(isolate, \"SYS_RUN_IN_RESTRICTED_CONTEXT\"),\n       JS_RunInRestrictedContext, true);"
        },
        {
          "filename": "etc/testing/arangod-common.conf",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -9,6 +9,9 @@ role = true\n force-sync-properties = false\n extended-names-databases = true\n \n+[foxx]\n+allow-install-from-remote = true\n+\n [javascript]\n allow-admin-execute = true\n startup-directory = @TOP_DIR@/js"
        },
        {
          "filename": "js/actions/_admin/foxx/app.js",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -83,6 +83,7 @@ function resolveAppInfo (appInfo, refresh) {\n     return {source: `${baseUrl}${splitted[1]}/archive/${splitted[2] || 'master'}.zip`};\n   }\n   if (/^https?:/i.test(appInfo)) {\n+    FoxxManager.validateInstallUrl(appInfo);\n     return {source: appInfo};\n   }\n   if (/^uploads[/\\\\]tmp-/.test(appInfo)) {"
        },
        {
          "filename": "js/apps/system/_admin/aardvark/APP/aardvark.js",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -90,6 +90,7 @@ router.get('/config.js', function (req, res) {\n       statisticsInAllDatabases: internal.enabledStatisticsInAllDatabases(),\n       foxxStoreEnabled: !internal.isFoxxStoreDisabled(),\n       foxxApiEnabled: !internal.isFoxxApiDisabled(),\n+      foxxAllowInstallFromRemote: internal.foxxAllowInstallFromRemote(),\n       clusterApiJwtPolicy: internal.clusterApiJwtPolicy(),\n       minReplicationFactor: internal.minReplicationFactor,\n       maxReplicationFactor: internal.maxReplicationFactor,"
        },
        {
          "filename": "js/apps/system/_admin/aardvark/APP/frontend/js/arango/arango.js",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -581,6 +581,10 @@\n       if (!frontendConfig.foxxStoreEnabled) {\n         delete menus.Store;\n       }\n+      \n+      if (!frontendConfig.foxxAllowInstallFromRemote) {\n+        delete menus.Remote;\n+      }\n \n       menus[activeKey].active = true;\n       if (disabled) {"
        },
        {
          "filename": "js/apps/system/_admin/aardvark/APP/frontend/js/routers/router.js",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1135,6 +1135,10 @@\n           this.navigate('#dashboard', { trigger: true });\n           return;\n         }\n+        if (!frontendConfig.foxxAllowInstallFromRemote) {\n+          this.navigate('#services/install/upload', { trigger: true });\n+          return;\n+        }\n         window.modalView.clearValidators();\n         if (this.serviceUrlView) {\n           this.serviceUrlView.remove();"
        },
        {
          "filename": "js/server/bootstrap/modules/internal.js",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -181,15 +181,20 @@\n   // / @brief expose configuration\n   // //////////////////////////////////////////////////////////////////////////////\n \n-  if (global.SYS_IS_FOXX_API_DISABLED) {\n+  if (typeof global.SYS_IS_FOXX_API_DISABLED !== 'undefined') {\n     exports.isFoxxApiDisabled = global.SYS_IS_FOXX_API_DISABLED;\n     delete global.SYS_IS_FOXX_API_DISABLED;\n   }\n \n-  if (global.SYS_IS_FOXX_STORE_DISABLED) {\n+  if (typeof global.SYS_IS_FOXX_STORE_DISABLED !== 'undefined') {\n     exports.isFoxxStoreDisabled = global.SYS_IS_FOXX_STORE_DISABLED;\n     delete global.SYS_IS_FOXX_STORE_DISABLED;\n   }\n+ \n+  if (typeof global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE !== 'undefined') {\n+    exports.foxxAllowInstallFromRemote = global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE;\n+    delete global.SYS_FOXX_ALLOW_INSTALL_FROM_REMOTE;\n+  }\n \n   if (global.SYS_CLUSTER_API_JWT_POLICY) {\n     exports.clusterApiJwtPolicy = global.SYS_CLUSTER_API_JWT_POLICY;"
        },
        {
          "filename": "js/server/modules/@arangodb/foxx/manager.js",
          "status": "modified",
          "additions": 30,
          "deletions": 0,
          "patch": "@@ -78,6 +78,33 @@ function isFoxxmaster () {\n   return global.ArangoServerState.isFoxxmaster();\n }\n \n+function validateInstallUrl (url) {\n+  if (!internal.foxxAllowInstallFromRemote()) {\n+    // check if a user-defined install baseurl exists\n+    let baseUrl = require('process').env.FOXX_BASE_URL;\n+    let invalid = false;\n+    if (baseUrl) {\n+      if (!url.startsWith(baseUrl)) {\n+        // install url does not start with FOXX_BASE_URL\n+        invalid = true;\n+      }\n+    } else {\n+      const checkRegex = /^https?:\\/\\/([^:\\.]+:[^@\\.]*@)?(www\\.)?github\\.com\\//i;\n+      invalid = !checkRegex.test(url);\n+    }\n+\n+    if (invalid) {\n+      throw new ArangoError({\n+        errorNum: errors.ERROR_FORBIDDEN.code,\n+        errorMessage: dd`\n+          ${errors.ERROR_FORBIDDEN.message}\n+          Installing apps from remote URLs is disabled\n+        `\n+      });\n+    }\n+  }\n+}\n+\n // Startup and self-heal\n \n function selfHealAll (skipReloadRouting) {\n@@ -562,6 +589,8 @@ function _prepareService (serviceInfo, legacy = false) {\n       _buildServiceBundleFromScript(tempServicePath, tempBundlePath, serviceInfo);\n     } else if (/^https?:/i.test(serviceInfo)) {\n       // Remote path\n+      // check if we are allowed to install from this remote URL or not\n+      validateInstallUrl(serviceInfo);\n       const tempFile = downloadServiceBundleFromRemote(serviceInfo);\n       try {\n         _buildServiceFromFile(tempServicePath, tempBundlePath, tempFile);\n@@ -1112,6 +1141,7 @@ exports.commitLocalState = commitLocalState;\n exports._createServiceBundle = createServiceBundle;\n exports._resetCache = () => GLOBAL_SERVICE_MAP.clear();\n exports._mountPoints = getMountPoints;\n+exports.validateInstallUrl = validateInstallUrl;\n \n // -------------------------------------------------\n // Exports from Foxx utils module"
        },
        {
          "filename": "tests/js/client/server_parameters/foxx-allow-install-from-remote-off.js",
          "status": "added",
          "additions": 131,
          "deletions": 0,
          "patch": "@@ -0,0 +1,131 @@\n+/*jshint globalstrict:false, strict:false */\n+/* global getOptions, assertEqual, assertTrue, assertFalse, arango */\n+\n+////////////////////////////////////////////////////////////////////////////////\n+/// DISCLAIMER\n+///\n+/// Copyright 2010-2012 triagens GmbH, Cologne, Germany\n+///\n+/// Licensed under the Apache License, Version 2.0 (the \"License\");\n+/// you may not use this file except in compliance with the License.\n+/// You may obtain a copy of the License at\n+///\n+///     http://www.apache.org/licenses/LICENSE-2.0\n+///\n+/// Unless required by applicable law or agreed to in writing, software\n+/// distributed under the License is distributed on an \"AS IS\" BASIS,\n+/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+/// See the License for the specific language governing permissions and\n+/// limitations under the License.\n+///\n+/// Copyright holder is ArangoDB Inc, Cologne, Germany\n+///\n+/// @author Jan Steemann\n+/// @author Copyright 2021, ArangoDB Inc, Cologne, Germany\n+////////////////////////////////////////////////////////////////////////////////\n+\n+if (getOptions === true) {\n+  return {\n+    'foxx.allow-install-from-remote': 'false',\n+  };\n+}\n+const jsunity = require('jsunity');\n+const errors = require('@arangodb').errors;\n+const db = require('internal').db;\n+const FoxxManager = require('@arangodb/foxx/manager');\n+\n+function testSuite() {\n+  const mount = \"/test123\";\n+\n+  return {\n+    testInstallViaAardvarkOk: function() {\n+      const urls = [\n+        \"http://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",\n+        \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",\n+        \"http://www.github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",\n+        \"https://www.github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",\n+      ];\n+      urls.forEach((url) => {\n+        try {\n+          let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });\n+          assertFalse(res.error, url);\n+        } finally {\n+          try {\n+            FoxxManager.uninstall(mount);\n+          } catch (err) {}\n+        }\n+      });\n+    },\n+\n+    testInstallViaAardvarkFail: function() {\n+      const urls = [\n+        \"http://some.other.domain/foo/bar\",\n+        \"https://some.other.domain/foo/bar\",\n+        \"https://github.com.some.deceptive.site/foo/bar\",\n+        \"https://some.deceptive.github.com.site/foo/bar\",\n+        \"https://github.com.evil/foo/bar\",\n+      ];\n+      urls.forEach((url) => {\n+        try {\n+          let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });\n+          assertTrue(res.error, url);\n+          assertEqual(403, res.code);\n+        } finally {\n+          try {\n+            FoxxManager.uninstall(mount);\n+          } catch (err) {}\n+        }\n+      });\n+    },\n+    \n+    testInstallViaFoxxAPIOld: function() {\n+      // note: installing from Github is still allowed here\n+      const urls = [\n+        \"http://some.other.domain/foo/bar\",\n+        \"https://some.other.domain/foo/bar\",\n+        \"https://github.com.some.deceptive.site/foo/bar\",\n+        \"https://some.deceptive.github.com.site/foo/bar\",\n+        \"https://github.com.evil/foo/bar\",\n+      ];\n+      urls.forEach((url) => {\n+        try {\n+          let res = arango.POST(\"/_admin/foxx/install\", { appInfo: url, mount });\n+          assertTrue(res.error);\n+          assertEqual(403, res.code);\n+          assertEqual(11, res.errorNum);\n+        } finally {\n+          try {\n+            FoxxManager.uninstall(mount);\n+          } catch (err) {}\n+        }\n+      });\n+    },\n+    \n+    testInstallViaFoxxAPINew: function() {\n+      // note: installing from Github is still allowed here\n+      const urls = [\n+        \"http://some.other.domain/foo/bar\",\n+        \"https://some.other.domain/foo/bar\",\n+        \"https://github.com.some.deceptive.site/foo/bar\",\n+        \"https://some.deceptive.github.com.site/foo/bar\",\n+        \"https://github.com.evil/foo/bar\",\n+      ];\n+      urls.forEach((url) => {\n+        try {\n+          let res = arango.POST(`/_api/foxx?mount=${mount}`, { source: url });\n+          assertTrue(res.error);\n+          assertEqual(403, res.code);\n+          assertEqual(11, res.errorNum);\n+        } finally {\n+          try {\n+            FoxxManager.uninstall(mount);\n+          } catch (err) {}\n+        }\n+      });\n+    },\n+    \n+  };\n+}\n+\n+jsunity.run(testSuite);\n+return jsunity.done();"
        },
        {
          "filename": "tests/js/client/server_parameters/foxx-allow-install-from-remote-on.js",
          "status": "added",
          "additions": 96,
          "deletions": 0,
          "patch": "@@ -0,0 +1,96 @@\n+/*jshint globalstrict:false, strict:false */\n+/* global getOptions, assertEqual, assertFalse, arango */\n+\n+////////////////////////////////////////////////////////////////////////////////\n+/// DISCLAIMER\n+///\n+/// Copyright 2010-2012 triagens GmbH, Cologne, Germany\n+///\n+/// Licensed under the Apache License, Version 2.0 (the \"License\");\n+/// you may not use this file except in compliance with the License.\n+/// You may obtain a copy of the License at\n+///\n+///     http://www.apache.org/licenses/LICENSE-2.0\n+///\n+/// Unless required by applicable law or agreed to in writing, software\n+/// distributed under the License is distributed on an \"AS IS\" BASIS,\n+/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+/// See the License for the specific language governing permissions and\n+/// limitations under the License.\n+///\n+/// Copyright holder is ArangoDB Inc, Cologne, Germany\n+///\n+/// @author Jan Steemann\n+/// @author Copyright 2021, ArangoDB Inc, Cologne, Germany\n+////////////////////////////////////////////////////////////////////////////////\n+\n+if (getOptions === true) {\n+  return {\n+    'foxx.allow-install-from-remote': 'true',\n+  };\n+}\n+const jsunity = require('jsunity');\n+const errors = require('@arangodb').errors;\n+const db = require('internal').db;\n+const FoxxManager = require('@arangodb/foxx/manager');\n+\n+function testSuite() {\n+  const mount = \"/test123\";\n+\n+  return {\n+    testInstallViaAardvark: function() {\n+      const urls = [\n+        \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",\n+      ];\n+      urls.forEach((url) => {\n+        try {\n+          let res = arango.PUT(`/_admin/aardvark/foxxes/url?mount=${mount}`, { url });\n+          assertFalse(res.error);\n+          assertEqual(\"itzpapalotl\", res.name);\n+        } finally {\n+          try {\n+            FoxxManager.uninstall(mount);\n+          } catch (err) {}\n+        }\n+      });\n+    },\n+    \n+    testInstallViaFoxxAPIOld: function() {\n+      const urls = [\n+        \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",\n+      ];\n+      urls.forEach((url) => {\n+        try {\n+          let res = arango.POST(\"/_admin/foxx/install\", { appInfo: url, mount });\n+          assertFalse(res.error);\n+          assertEqual(\"itzpapalotl\", res.name);\n+        } finally {\n+          try {\n+            FoxxManager.uninstall(mount);\n+          } catch (err) {}\n+        }\n+      });\n+    },\n+    \n+    testInstallViaFoxxAPINew: function() {\n+      const urls = [\n+        \"https://github.com/arangodb-foxx/demo-itzpapalotl/archive/refs/heads/master.zip\",\n+      ];\n+      urls.forEach((url) => {\n+        try {\n+          let res = arango.POST(`/_api/foxx?mount=${mount}`, { source: url });\n+          assertFalse(res.error);\n+          assertEqual(\"itzpapalotl\", res.name);\n+        } finally {\n+          try {\n+            FoxxManager.uninstall(mount);\n+          } catch (err) {}\n+        }\n+      });\n+    },\n+    \n+  };\n+}\n+\n+jsunity.run(testSuite);\n+return jsunity.done();"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 11,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e1e9972d5acd8565986585c0e12082df7db4e91a",
            "date": "2025-01-13T15:21:07Z",
            "author_login": "neunhoef"
          },
          {
            "sha": "0cb58d2da64087a4312f4ee550f60ae8d27e3205",
            "date": "2025-01-13T12:08:41Z",
            "author_login": "maierlars"
          },
          {
            "sha": "434dfd80142a00d73c019fa7f5b1f3c11d359716",
            "date": "2025-01-10T13:14:26Z",
            "author_login": "dothebart"
          },
          {
            "sha": "6ddc2979eaafbee853a38d759453f2cc71ffa706",
            "date": "2025-01-10T12:39:07Z",
            "author_login": "maierlars"
          },
          {
            "sha": "5819061e81338aafd27765a34f8ed8b5da489f0a",
            "date": "2025-01-10T10:05:06Z",
            "author_login": "maierlars"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-918",
    "description": "In ArangoDB, versions v3.7.0 through v3.9.0-alpha.1 have a feature which allows downloading a Foxx service from a publicly available URL. This feature does not enforce proper filtering of requests performed internally, which can be abused by a highly-privileged attacker to perform blind SSRF and send internal requests to localhost.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-09T13:15:08.447",
    "last_modified": "2024-11-21T05:55:38.513",
    "fix_date": "2021-12-30T03:34:00Z"
  },
  "references": [
    {
      "url": "https://github.com/arangodb/arangodb/commit/d7b35a6884c6b2802d34d79fb2a79fb2c9ec2175",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/arangodb/arangodb/commit/d9b7f019d2435f107b19a59190bf9cc27d5f34dd",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25939",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/arangodb/arangodb/commit/d7b35a6884c6b2802d34d79fb2a79fb2c9ec2175",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/arangodb/arangodb/commit/d9b7f019d2435f107b19a59190bf9cc27d5f34dd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25939",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.151530",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "arangodb",
    "owner": "arangodb",
    "created_at": "2011-10-26T06:42:00Z",
    "updated_at": "2025-01-14T10:45:30Z",
    "pushed_at": "2025-01-14T14:20:59Z",
    "size": 2850311,
    "stars": 13643,
    "forks": 838,
    "open_issues": 786,
    "watchers": 13643,
    "has_security_policy": false,
    "default_branch": "devel",
    "protected_branches": [
      "0.3",
      "0.4",
      "0.5",
      "0.6",
      "1.0",
      "1.1",
      "1.2",
      "1.3",
      "1.4",
      "2.0",
      "2.1",
      "2.2",
      "2.3",
      "2.4",
      "2.5",
      "2.6",
      "2.7",
      "2.8",
      "3.0",
      "3.0.16",
      "3.1",
      "3.1.9",
      "3.1.10.1",
      "3.1.15",
      "3.2",
      "3.2.1",
      "3.2.3",
      "3.2.11.2",
      "3.2.11.3",
      "3.2.11.5"
    ],
    "languages": {
      "C++": 37716231,
      "JavaScript": 33924507,
      "TypeScript": 727187,
      "NASL": 717725,
      "CMake": 309766,
      "Python": 309196,
      "SCSS": 245566,
      "C": 243441,
      "CSS": 196570,
      "EJS": 138767,
      "Shell": 125651,
      "Yacc": 100222,
      "LLVM": 15994,
      "HTML": 11585,
      "PowerShell": 7819,
      "Dockerfile": 5596,
      "Makefile": 551,
      "Max": 437,
      "Batchfile": 109
    },
    "commit_activity": {
      "total_commits_last_year": 857,
      "avg_commits_per_week": 16.48076923076923,
      "days_active_last_year": 211
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:42:28.443850"
  }
}