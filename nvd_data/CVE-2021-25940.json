{
  "cve_id": "CVE-2021-25940",
  "github_data": {
    "repository": "arangodb/arangodb",
    "fix_commit": "e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
    "related_commits": [
      "e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
      "e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3"
    ],
    "patch_url": "https://github.com/arangodb/arangodb/commit/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3.patch",
    "fix_commit_details": {
      "sha": "e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
      "commit_date": "2021-07-01T09:36:14Z",
      "author": {
        "login": "jsteemann",
        "type": "User",
        "stats": {
          "total_commits": 18359,
          "average_weekly_commits": 26.568740955137482,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 623
        }
      },
      "commit_message": {
        "title": "Revive startup parameter `--server.session-timeout` (#14118)",
        "length": 114,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 198,
        "additions": 155,
        "deletions": 43
      },
      "files": [
        {
          "filename": "CHANGELOG",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -1,6 +1,13 @@\n devel\n -----\n \n+* Revive startup parameter `--server.session-timeout` to control the timeout\n+  for web interface sessions and other sessions that are based on JWTs created\n+  by the `/_open/auth` API.\n+  \n+  This PR also changes the default session timeout for web interface sessions\n+  to one hour. Older versions of ArangoDB had longer session timeouts.\n+\n * Add prefix parameter to LEVENSHTEIN_MATCH function in ArangoSearch\n \n * Removed redirects from /_admin/cluster* to /_admin/cluster/*. Adjusted"
        },
        {
          "filename": "arangod/GeneralServer/AuthenticationFeature.cpp",
          "status": "modified",
          "additions": 27,
          "deletions": 4,
          "patch": "@@ -57,7 +57,8 @@ AuthenticationFeature::AuthenticationFeature(application_features::ApplicationSe\n       _authenticationSystemOnly(true),\n       _localAuthentication(true),\n       _active(true),\n-      _authenticationTimeout(0.0) {\n+      _authenticationTimeout(0.0),\n+      _sessionTimeout(static_cast<double>(1 * std::chrono::hours(1) / std::chrono::seconds(1))) { // 1 hour\n   setOptional(false);\n   startsAfter<application_features::BasicFeaturePhaseServer>();\n \n@@ -89,10 +90,23 @@ void AuthenticationFeature::collectOptions(std::shared_ptr<ProgramOptions> optio\n       \"--server.authentication-timeout\",\n       \"timeout for the authentication cache in seconds (0 = indefinitely)\",\n       new DoubleParameter(&_authenticationTimeout));\n+  \n+  options->addOption(\"--server.session-timeout\",\n+                     \"timeout in seconds for web interface JWT sessions\",\n+                     new DoubleParameter(&_sessionTimeout),\n+                     arangodb::options::makeFlags(\n+                       arangodb::options::Flags::DefaultNoComponents,\n+                       arangodb::options::Flags::OnCoordinator,\n+                       arangodb::options::Flags::OnSingle))\n+                     .setIntroducedIn(30900);\n \n   options->addOption(\"--server.local-authentication\",\n                      \"enable authentication using the local user database\",\n-                     new BooleanParameter(&_localAuthentication));\n+                     new BooleanParameter(&_localAuthentication),\n+                     arangodb::options::makeFlags(\n+                       arangodb::options::Flags::DefaultNoComponents,\n+                       arangodb::options::Flags::OnCoordinator,\n+                       arangodb::options::Flags::OnSingle));\n \n   options->addOption(\n       \"--server.authentication-system-only\",\n@@ -102,10 +116,13 @@ void AuthenticationFeature::collectOptions(std::shared_ptr<ProgramOptions> optio\n #ifdef ARANGODB_HAVE_DOMAIN_SOCKETS\n   options->addOption(\"--server.authentication-unix-sockets\",\n                      \"authentication for requests via UNIX domain sockets\",\n-                     new BooleanParameter(&_authenticationUnixSockets));\n+                     new BooleanParameter(&_authenticationUnixSockets),\n+                     arangodb::options::makeFlags(\n+                       arangodb::options::Flags::DefaultNoOs,\n+                       arangodb::options::Flags::OsLinux,\n+                       arangodb::options::Flags::OsMac));\n #endif\n \n-  // Maybe deprecate this option in devel\n   options\n       ->addOption(\"--server.jwt-secret\",\n                   \"secret to use when doing jwt authentication\",\n@@ -151,6 +168,12 @@ void AuthenticationFeature::validateOptions(std::shared_ptr<ProgramOptions> opti\n       FATAL_ERROR_EXIT();\n     }\n   }\n+  \n+  if (_sessionTimeout <= 1.0) {\n+    LOG_TOPIC(\"85046\", FATAL, arangodb::Logger::AUTHENTICATION)\n+        << \"--server.session-timeout has an invalid value: \" << _sessionTimeout;\n+    FATAL_ERROR_EXIT();\n+  }\n \n   if (options->processingResult().touched(\"server.jwt-secret\")) {\n     LOG_TOPIC(\"1aaae\", WARN, arangodb::Logger::AUTHENTICATION)"
        },
        {
          "filename": "arangod/GeneralServer/AuthenticationFeature.h",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -72,6 +72,8 @@ class AuthenticationFeature final : public application_features::ApplicationFeat\n   /// verification only secrets\n   std::pair<std::string, std::vector<std::string>> jwtSecrets() const;\n #endif\n+\n+  double sessionTimeout() const { return _sessionTimeout; }\n   \n   // load secrets from file(s)\n   [[nodiscard]] Result loadJwtSecretsFromFile();\n@@ -91,6 +93,7 @@ class AuthenticationFeature final : public application_features::ApplicationFeat\n   bool _localAuthentication;\n   bool _active;\n   double _authenticationTimeout;\n+  double _sessionTimeout;\n   \n   mutable std::mutex _jwtSecretsLock;\n "
        },
        {
          "filename": "arangod/RestHandler/RestAuthHandler.cpp",
          "status": "modified",
          "additions": 29,
          "deletions": 27,
          "patch": "@@ -27,12 +27,12 @@\n #include <velocypack/Builder.h>\n #include <velocypack/velocypack-aliases.h>\n \n+#include \"Basics/ScopeGuard.h\"\n #include \"Basics/StringUtils.h\"\n #include \"GeneralServer/AuthenticationFeature.h\"\n #include \"Logger/LogMacros.h\"\n #include \"Logger/Logger.h\"\n #include \"Logger/LoggerStream.h\"\n-#include \"Ssl/SslInterface.h\"\n #include \"Utils/Events.h\"\n \n using namespace arangodb;\n@@ -41,15 +41,7 @@ using namespace arangodb::rest;\n \n RestAuthHandler::RestAuthHandler(application_features::ApplicationServer& server,\n                                  GeneralRequest* request, GeneralResponse* response)\n-    : RestVocbaseBaseHandler(server, request, response),\n-      _validFor(60 * 60 * 24 * 30) {}\n-\n-std::string RestAuthHandler::generateJwt(std::string const& username,\n-                                         std::string const& password) {\n-  AuthenticationFeature* af = AuthenticationFeature::instance();\n-  TRI_ASSERT(af != nullptr);\n-  return fuerte::jwt::generateUserToken(af->tokenCache().jwtSecret(), username, _validFor);\n-}\n+    : RestVocbaseBaseHandler(server, request, response) {}\n \n RestStatus RestAuthHandler::execute() {\n   auto const type = _request->requestType();\n@@ -75,23 +67,36 @@ RestStatus RestAuthHandler::execute() {\n     return badRequest();\n   }\n \n-  _username = usernameSlice.copyString();\n+  std::string const username = usernameSlice.copyString();\n   std::string const password = passwordSlice.copyString();\n \n+  bool isValid = false;\n+\n+  auto guard = scopeGuard([&]() {\n+    try {\n+      if (isValid) {\n+        events::LoggedIn(*_request, username);\n+      } else {\n+        events::CredentialsBad(*_request, username);\n+      }\n+    } catch (...) {\n+      // nothing we can do\n+    }\n+  });\n+  \n   auth::UserManager* um = AuthenticationFeature::instance()->userManager();\n   if (um == nullptr) {\n     std::string msg = \"This server does not support users\";\n     LOG_TOPIC(\"2e7d4\", ERR, Logger::AUTHENTICATION) << msg;\n     generateError(rest::ResponseCode::UNAUTHORIZED, TRI_ERROR_HTTP_UNAUTHORIZED, msg);\n-  } else if (um->checkPassword(_username, password)) {\n+  } else if (um->checkPassword(username, password)) {\n     VPackBuilder resultBuilder;\n     {\n       VPackObjectBuilder b(&resultBuilder);\n-      std::string jwt = generateJwt(_username, password);\n-      resultBuilder.add(\"jwt\", VPackValue(jwt));\n+      resultBuilder.add(\"jwt\", VPackValue(generateJwt(username)));\n     }\n \n-    _isValid = true;\n+    isValid = true;\n     generateDocument(resultBuilder.slice(), true, &VPackOptions::Defaults);\n   } else {\n     // mop: rfc 2616 10.4.2 (if credentials wrong 401)\n@@ -101,20 +106,17 @@ RestStatus RestAuthHandler::execute() {\n   return RestStatus::DONE;\n }\n \n+std::string RestAuthHandler::generateJwt(std::string const& username) const {\n+  AuthenticationFeature* af = AuthenticationFeature::instance();\n+  TRI_ASSERT(af != nullptr);\n+  return fuerte::jwt::generateUserToken(\n+      af->tokenCache().jwtSecret(), \n+      username, \n+      std::chrono::seconds(uint64_t(af->sessionTimeout())));\n+}\n+\n RestStatus RestAuthHandler::badRequest() {\n   generateError(rest::ResponseCode::BAD, TRI_ERROR_HTTP_BAD_PARAMETER,\n                 \"invalid JSON\");\n   return RestStatus::DONE;\n }\n-\n-void RestAuthHandler::shutdownExecute(bool isFinalized) noexcept {\n-  try {\n-    if (_isValid) {\n-      events::LoggedIn(*_request, _username);\n-    } else {\n-      events::CredentialsBad(*_request, _username);\n-    }\n-  } catch (...) {\n-  }\n-  RestVocbaseBaseHandler::shutdownExecute(isFinalized);\n-}"
        },
        {
          "filename": "arangod/RestHandler/RestAuthHandler.h",
          "status": "modified",
          "additions": 1,
          "deletions": 8,
          "patch": "@@ -33,21 +33,14 @@ class RestAuthHandler : public RestVocbaseBaseHandler {\n  public:\n   RestAuthHandler(application_features::ApplicationServer&, GeneralRequest*, GeneralResponse*);\n \n-  std::string generateJwt(std::string const&, std::string const&);\n-\n  public:\n   char const* name() const override final { return \"RestAuthHandler\"; }\n   RequestLane lane() const override final { return RequestLane::CLIENT_SLOW; }\n   RestStatus execute() override;\n-  void shutdownExecute(bool isFinalized) noexcept override;\n \n  private:\n+  std::string generateJwt(std::string const& username) const;\n   RestStatus badRequest();\n-\n- private:\n-  std::string _username;\n-  bool _isValid = false;\n-  std::chrono::seconds _validFor;\n };\n }  // namespace arangodb\n "
        },
        {
          "filename": "arangod/RestServer/ServerFeature.cpp",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -103,10 +103,6 @@ void ServerFeature::collectOptions(std::shared_ptr<ProgramOptions> options) {\n   options->addObsoleteOption(\"--vst.maxsize\", \"maximal size (in bytes) \"\n                              \"for a VelocyPack chunk\", true);\n   \n-  options->addObsoleteOption(\n-      \"--server.session-timeout\",\n-      \"timeout of web interface server sessions (in seconds)\", true);\n-\n   // add obsolete MMFiles WAL options (obsoleted in 3.7)\n   options->addSection(\"wal\", \"WAL of the MMFiles engine\", \"\", true, true);\n   options->addObsoleteOption(\"--wal.allow-oversize-entries\","
        },
        {
          "filename": "tests/js/client/server_parameters/test-server-session-timeout.js",
          "status": "added",
          "additions": 88,
          "deletions": 0,
          "patch": "@@ -0,0 +1,88 @@\n+/*jshint globalstrict:false, strict:false */\n+/* global getOptions, assertEqual, arango */\n+\n+////////////////////////////////////////////////////////////////////////////////\n+/// @brief test for server parameters\n+///\n+/// DISCLAIMER\n+///\n+/// Copyright 2010-2012 triagens GmbH, Cologne, Germany\n+///\n+/// Licensed under the Apache License, Version 2.0 (the \"License\");\n+/// you may not use this file except in compliance with the License.\n+/// You may obtain a copy of the License at\n+///\n+///     http://www.apache.org/licenses/LICENSE-2.0\n+///\n+/// Unless required by applicable law or agreed to in writing, software\n+/// distributed under the License is distributed on an \"AS IS\" BASIS,\n+/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+/// See the License for the specific language governing permissions and\n+/// limitations under the License.\n+///\n+/// Copyright holder is ArangoDB Inc, Cologne, Germany\n+///\n+/// @author Jan Steemann\n+/// @author Copyright 2019, ArangoDB Inc, Cologne, Germany\n+////////////////////////////////////////////////////////////////////////////////\n+\n+if (getOptions === true) {\n+  return {\n+    'server.session-timeout': '5',\n+    'server.authentication': 'true',\n+    'server.jwt-secret': 'haxxmann',\n+  };\n+}\n+const jsunity = require('jsunity');\n+const request = require('@arangodb/request');\n+\n+function testSuite() {\n+  let baseUrl = function () {\n+    return arango.getEndpoint().replace(/^tcp:/, 'http:').replace(/^ssl:/, 'https:');\n+  };\n+\n+  return {\n+    testSessionTimeout: function() {\n+      let result = request.get(baseUrl() + \"/_api/version\");\n+      // no access\n+      assertEqual(401, result.statusCode);\n+\n+      result = request.post({\n+        url: baseUrl() + \"/_open/auth\", \n+        body: {\n+          username: \"root\",\n+          password: \"\"\n+        },\n+        json: true\n+      });\n+\n+      assertEqual(200, result.statusCode);\n+      const jwt = result.json.jwt;\n+      \n+      result = request.get({\n+        url: baseUrl() + \"/_api/version\",\n+        auth: {\n+          bearer: jwt,\n+        }\n+      });\n+\n+      // access granted\n+      assertEqual(200, result.statusCode);\n+\n+      require(\"internal\").sleep(7);\n+\n+      result = request.get({\n+        url: baseUrl() + \"/_api/version\",\n+        auth: {\n+          bearer: jwt,\n+        }\n+      });\n+\n+      // JWT expired\n+      assertEqual(401, result.statusCode);\n+    },\n+  };\n+}\n+\n+jsunity.run(testSuite);\n+return jsunity.done();"
        }
      ],
      "file_patterns": {
        "security_files": 4,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 5,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e1e9972d5acd8565986585c0e12082df7db4e91a",
            "date": "2025-01-13T15:21:07Z",
            "author_login": "neunhoef"
          },
          {
            "sha": "0cb58d2da64087a4312f4ee550f60ae8d27e3205",
            "date": "2025-01-13T12:08:41Z",
            "author_login": "maierlars"
          },
          {
            "sha": "434dfd80142a00d73c019fa7f5b1f3c11d359716",
            "date": "2025-01-10T13:14:26Z",
            "author_login": "dothebart"
          },
          {
            "sha": "6ddc2979eaafbee853a38d759453f2cc71ffa706",
            "date": "2025-01-10T12:39:07Z",
            "author_login": "maierlars"
          },
          {
            "sha": "5819061e81338aafd27765a34f8ed8b5da489f0a",
            "date": "2025-01-10T10:05:06Z",
            "author_login": "maierlars"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-613",
    "description": "In ArangoDB, versions v3.7.6 through v3.8.3 are vulnerable to Insufficient Session Expiration. When a user\u2019s password is changed by the administrator, the session isn\u2019t invalidated, allowing a malicious user to still be logged in and perform arbitrary actions within the system.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-16T10:15:06.783",
    "last_modified": "2024-11-21T05:55:38.640",
    "fix_date": "2021-07-01T09:36:14Z"
  },
  "references": [
    {
      "url": "https://github.com/arangodb/arangodb/commit/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25940",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/arangodb/arangodb/commit/e9c6ee9dcca7b9b4fbcd02a0b323d205bee838d3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25940",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.790680",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "arangodb",
    "owner": "arangodb",
    "created_at": "2011-10-26T06:42:00Z",
    "updated_at": "2025-01-14T10:45:30Z",
    "pushed_at": "2025-01-14T14:20:59Z",
    "size": 2850311,
    "stars": 13643,
    "forks": 838,
    "open_issues": 786,
    "watchers": 13643,
    "has_security_policy": false,
    "default_branch": "devel",
    "protected_branches": [
      "0.3",
      "0.4",
      "0.5",
      "0.6",
      "1.0",
      "1.1",
      "1.2",
      "1.3",
      "1.4",
      "2.0",
      "2.1",
      "2.2",
      "2.3",
      "2.4",
      "2.5",
      "2.6",
      "2.7",
      "2.8",
      "3.0",
      "3.0.16",
      "3.1",
      "3.1.9",
      "3.1.10.1",
      "3.1.15",
      "3.2",
      "3.2.1",
      "3.2.3",
      "3.2.11.2",
      "3.2.11.3",
      "3.2.11.5"
    ],
    "languages": {
      "C++": 37716231,
      "JavaScript": 33924507,
      "TypeScript": 727187,
      "NASL": 717725,
      "CMake": 309766,
      "Python": 309196,
      "SCSS": 245566,
      "C": 243441,
      "CSS": 196570,
      "EJS": 138767,
      "Shell": 125651,
      "Yacc": 100222,
      "LLVM": 15994,
      "HTML": 11585,
      "PowerShell": 7819,
      "Dockerfile": 5596,
      "Makefile": 551,
      "Max": 437,
      "Batchfile": 109
    },
    "commit_activity": {
      "total_commits_last_year": 857,
      "avg_commits_per_week": 16.48076923076923,
      "days_active_last_year": 211
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:42:28.443850"
  }
}