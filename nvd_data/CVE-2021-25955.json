{
  "cve_id": "CVE-2021-25955",
  "github_data": {
    "repository": "Dolibarr/dolibarr",
    "fix_commit": "796b2d201acb9938b903fb2afa297db289ecc93e",
    "related_commits": [
      "796b2d201acb9938b903fb2afa297db289ecc93e",
      "796b2d201acb9938b903fb2afa297db289ecc93e"
    ],
    "patch_url": "https://github.com/Dolibarr/dolibarr/commit/796b2d201acb9938b903fb2afa297db289ecc93e.patch",
    "fix_commit_details": {
      "sha": "796b2d201acb9938b903fb2afa297db289ecc93e",
      "commit_date": "2021-06-29T16:17:27Z",
      "author": {
        "login": "eldy",
        "type": "User",
        "stats": {
          "total_commits": 81587,
          "average_weekly_commits": 68.79173693086004,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 1074
        }
      },
      "commit_message": {
        "title": "Enhance the sanitizing.",
        "length": 23,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 27,
        "additions": 16,
        "deletions": 11
      },
      "files": [
        {
          "filename": "htdocs/core/lib/functions.lib.php",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -778,8 +778,12 @@ function checkVal($out = '', $check = 'alphanohtml', $filter = null, $options =\n \t\t\tdo {\n \t\t\t\t$oldstringtoclean = $out;\n \n-\t\t\t\t// We replace chars encoded with numeric HTML entities with real char (to avoid to have numeric entities used for obfuscation of injections)\n-\t\t\t\t$out = preg_replace_callback('/&#(x?[0-9][0-9a-f]+);/i', 'realCharForNumericEntities', $out);\n+\t\t\t\t// We replace chars from a/A to z/Z encoded with numeric HTML entities with the real char so we won't loose the chars at the next step.\n+\t\t\t\t// No need to use a loop here, this step is not to sanitize (this is done at next step, this is to try to save chars, even if they are\n+\t\t\t\t// using a non coventionnel way to be encoded, to not have them sanitized just after)\n+\t\t\t\t$out = preg_replace_callback('/&#(x?[0-9][0-9a-f]+;?)/i', 'realCharForNumericEntities', $out);\n+\n+\t\t\t\t// Now we remove all remaining HTML entities staring with a number. We don't want such entities.\n \t\t\t\t$out = preg_replace('/&#x?[0-9]+/i', '', $out);\t// For example if we have j&#x61vascript with an entities without the ; to hide the 'a' of 'javascript'.\n \n \t\t\t\t$out = dol_string_onlythesehtmltags($out, 0, 1, 1);"
        },
        {
          "filename": "htdocs/main.inc.php",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -53,25 +53,26 @@\n \n /**\n  * Return the real char for a numeric entities.\n- * This function is required by testSqlAndScriptInject().\n+ * WARNING: This function is required by testSqlAndScriptInject() and the GETPOST 'restricthtml'. Regex calling must be similar.\n  *\n  * @param\tstring\t\t$matches\t\t\tString of numeric entity\n  * @return\tstring\t\t\t\t\t\t\tNew value\n  */\n function realCharForNumericEntities($matches)\n {\n \t$newstringnumentity = $matches[1];\n+\t//print  '$newstringnumentity='.$newstringnumentity;\n \n \tif (preg_match('/^x/i', $newstringnumentity)) {\n-\t\t$newstringnumentity = hexdec(preg_replace('/^x/i', '', $newstringnumentity));\n+\t\t$newstringnumentity = hexdec(preg_replace('/;$/', '', preg_replace('/^x/i', '', $newstringnumentity)));\n \t}\n \n-\t// The numeric value we don't want as entities\n+\t// The numeric value we don't want as entities because they encode ascii char, and why using html entities on ascii except for haking ?\n \tif (($newstringnumentity >= 65 && $newstringnumentity <= 90) || ($newstringnumentity >= 97 && $newstringnumentity <= 122)) {\n \t\treturn chr((int) $newstringnumentity);\n \t}\n \n-\treturn '&#'.$matches[1];\n+\treturn '&#'.$matches[1];\t// Value will be unchanged because regex was /&#(  )/\n }\n \n /**"
        },
        {
          "filename": "test/phpunit/SecurityTest.php",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -345,7 +345,7 @@ public function testGETPOST()\n \t\t$_GET[\"param5\"]=\"a_1-b\";\n \t\t$_POST[\"param6\"]=\"&quot;&gt;<svg o&#110;load='console.log(&quot;123&quot;)'&gt;\";\n \t\t$_POST[\"param6b\"]='<<<../>../>../svg><<<../>../>../animate =alert(1)>abc';\n-\t\t$_GET[\"param7\"]='\"c:\\this is a path~1\\aaa&#110;\" abc<bad>def</bad>';\n+\t\t$_GET[\"param7\"]='\"c:\\this is a path~1\\aaa&#110; &#x&#x31;&#x31;&#x30;;\" abc<bad>def</bad>';\n \t\t$_POST[\"param8a\"]=\"Hacker<svg o&#110;load='console.log(&quot;123&quot;)'\";\t// html tag is not closed so it is not detected as html tag but is still harmfull\n \t\t$_POST['param8b']='<img src=x onerror=alert(document.location) t=';\t\t// this is html obfuscated by non closing tag\n \t\t$_POST['param8c']='< with space after is ok';\n@@ -479,20 +479,20 @@ public function testGETPOST()\n \t\t$this->assertEquals('&quot;&gt;', $result);\n \n \t\t$result=GETPOST(\"param7\", 'restricthtml');\n-\t\tprint __METHOD__.\" result=\".$result.\"\\n\";\n-\t\t$this->assertEquals('\"c:\\this is a path~1\\aaan\" abcdef', $result);\n+\t\tprint __METHOD__.\" result param7 = \".$result.\"\\n\";\n+\t\t$this->assertEquals('\"c:\\this is a path~1\\aaan &#x;;;;\" abcdef', $result);\n \n \t\t$result=GETPOST(\"param12\", 'restricthtml');\n \t\tprint __METHOD__.\" result=\".$result.\"\\n\";\n \t\t$this->assertEquals(trim($_POST[\"param12\"]), $result, 'Test a string with DOCTYPE and restricthtml');\n \n \t\t$result=GETPOST(\"param13\", 'restricthtml');\n \t\tprint __METHOD__.\" result=\".$result.\"\\n\";\n-\t\t$this->assertEquals('n n &gt; &lt; &quot; <a href=\\\"alert(document.domain)\\\">XSS</a>', $result, 'Test that HTML entities are decoded with restricthtml, but only for common alpha chars');\n+\t\t$this->assertEquals('n n &gt; &lt; &quot; <a href=\\\"alert(document.domain)\\\">XSS</a>', $result, 'Test 13 that HTML entities are decoded with restricthtml, but only for common alpha chars');\n \n \t\t$result=GETPOST(\"param13b\", 'restricthtml');\n \t\tprint __METHOD__.\" result=\".$result.\"\\n\";\n-\t\t$this->assertEquals('n n &gt; &lt; &quot; <a href=\\\"jvascript:alert(document.domain)\\\">XSS</a>', $result, 'Test that HTML entities are decoded with restricthtml, but only for common alpha chars');\n+\t\t$this->assertEquals('n n &gt; &lt; &quot; <a href=\\\"alert(document.domain)\\\">XSS</a>', $result, 'Test 13b that HTML entities are decoded with restricthtml, but only for common alpha chars');\n \n \t\t// Special test for GETPOST of backtopage, backtolist or backtourl parameter\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1198ae576900a672d95bc4750dbdffb80d5cd30e",
            "date": "2025-01-14T11:03:57Z",
            "author_login": "eldy"
          },
          {
            "sha": "84940c6f84946601d0d3bc3912ab1fedd2f0f456",
            "date": "2025-01-14T11:02:52Z",
            "author_login": "eldy"
          },
          {
            "sha": "ad36bdadad6e158a2043d88d98ff58cf2c7cd863",
            "date": "2025-01-14T08:26:48Z",
            "author_login": "eldy"
          },
          {
            "sha": "2edee4dba19d198be86aa986a354b78c765beb3c",
            "date": "2025-01-14T08:26:09Z",
            "author_login": "eldy"
          },
          {
            "sha": "a3fd2ad245fd01f60508aef183a35771ca9946f9",
            "date": "2025-01-14T06:40:08Z",
            "author_login": "hregis"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-79",
    "description": "In \u201cDolibarr ERP CRM\u201d, WYSIWYG Editor module, v2.8.1 to v13.0.2 are affected by a stored XSS vulnerability that allows low privileged application users to store malicious scripts in the \u201cPrivate Note\u201d field at \u201c/adherents/note.php?id=1\u201d endpoint. These scripts are executed in a victim\u2019s browser when they open the page containing the vulnerable field. In the worst case, the victim who inadvertently triggers the attack is a highly privileged administrator. The injected scripts can extract the Session ID, which can lead to full Account takeover of the admin and due to other vulnerability (Improper Access Control on Private notes) a low privileged user can update the private notes which could lead to privilege escalation.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-08-15T21:15:06.907",
    "last_modified": "2024-11-21T05:55:40.140",
    "fix_date": "2021-06-29T16:17:27Z"
  },
  "references": [
    {
      "url": "https://github.com/Dolibarr/dolibarr/commit/796b2d201acb9938b903fb2afa297db289ecc93e",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25955",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Dolibarr/dolibarr/commit/796b2d201acb9938b903fb2afa297db289ecc93e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25955",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:05.083120",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "dolibarr",
    "owner": "Dolibarr",
    "created_at": "2011-06-26T21:55:03Z",
    "updated_at": "2025-01-14T11:04:10Z",
    "pushed_at": "2025-01-14T11:04:06Z",
    "size": 1507317,
    "stars": 5629,
    "forks": 2830,
    "open_issues": 1162,
    "watchers": 5629,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "18.0"
    ],
    "languages": {
      "PHP": 72587948,
      "JavaScript": 19205220,
      "CSS": 416812,
      "SCSS": 227818,
      "Less": 206987,
      "Shell": 115721,
      "Perl": 111381,
      "Inno Setup": 72215,
      "HTML": 36084,
      "Promela": 24625,
      "PLpgSQL": 23627,
      "Gherkin": 10705,
      "Makefile": 8752,
      "C++": 8363,
      "Batchfile": 4681,
      "Python": 4235,
      "Dockerfile": 3723
    },
    "commit_activity": {
      "total_commits_last_year": 12583,
      "avg_commits_per_week": 241.98076923076923,
      "days_active_last_year": 350
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:10:40.684709"
  }
}