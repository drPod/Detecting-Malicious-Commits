{
  "cve_id": "CVE-2021-25963",
  "github_data": {
    "repository": "shuup/shuup",
    "fix_commit": "75714c37e32796eb7cbb0d977af5bcaa26573588",
    "related_commits": [
      "75714c37e32796eb7cbb0d977af5bcaa26573588",
      "75714c37e32796eb7cbb0d977af5bcaa26573588"
    ],
    "patch_url": "https://github.com/shuup/shuup/commit/75714c37e32796eb7cbb0d977af5bcaa26573588.patch",
    "fix_commit_details": {
      "sha": "75714c37e32796eb7cbb0d977af5bcaa26573588",
      "commit_date": "2021-07-06T23:26:15Z",
      "author": {
        "login": "chessbr",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "General: fix critical views that can be subject of XSS attacks",
        "length": 173,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 39,
        "additions": 28,
        "deletions": 11
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -8,6 +8,15 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0\n \n List all changes after the last release here (newer on top). Each change on a separate bullet point line\n \n+### Fixed\n+\n+- General: fix critical vulnerability on views that were returning not escaped content making it open to XSS attacks\n+\n+### Changed\n+\n+- Admin: hide email template button based on permission\n+- Reports: improve log when an importer fails\n+\n ## [2.10.8] - 2021-06-30\n \n ### Changed"
        },
        {
          "filename": "shuup/admin/utils/urls.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -16,6 +16,7 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.http.response import HttpResponseForbidden\n from django.utils.encoding import force_str, force_text\n+from django.utils.html import escape\n from django.utils.http import urlencode\n from django.utils.translation import ugettext_lazy as _\n \n@@ -64,7 +65,7 @@ def _get_unauth_response(self, request, reason):\n             # Instead of redirecting to the login page, let the user know what's wrong with\n             # a helpful link.\n             raise (\n-                Problem(_(\"Can't view this page. %(reason)s\") % {\"reason\": reason}).with_link(\n+                Problem(_(\"Can't view this page. %(reason)s\") % {\"reason\": escape(reason)}).with_link(\n                     url=resp.url, title=_(\"Log in with different credentials...\")\n                 )\n             )"
        },
        {
          "filename": "shuup/core/basket/command_dispatcher.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -11,6 +11,7 @@\n from django.core.exceptions import ValidationError\n from django.http import HttpResponseRedirect, JsonResponse\n from django.shortcuts import redirect\n+from django.utils.html import escape\n from django.utils.translation import ugettext_lazy as _\n \n from shuup.apps.provides import get_provide_objects\n@@ -68,7 +69,7 @@ def handle(self, command, kwargs=None):\n         try:\n             handler = self.get_command_handler(command)\n             if not handler or not callable(handler):\n-                raise Problem(_(\"Error! Invalid command `%s`.\") % command)\n+                raise Problem(_(\"Error! Invalid command `%s`.\") % escape(command))\n             kwargs.pop(\"csrfmiddlewaretoken\", None)  # The CSRF token should never be passed as a kwarg\n             kwargs.pop(\"command\", None)  # Nor the command\n             kwargs.update(request=self.request, basket=self.basket)"
        },
        {
          "filename": "shuup/front/checkout/_process.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -9,6 +9,7 @@\n from collections import OrderedDict\n from django.core.exceptions import ImproperlyConfigured\n from django.http.response import Http404\n+from django.utils.html import escape\n \n from shuup.front.basket import get_basket\n from shuup.utils.django_compat import reverse\n@@ -75,7 +76,7 @@ def get_current_phase(self, requested_phase_identifier):\n                     return phase\n             if not phase.should_skip() and not phase.is_valid():  # A past phase is not valid, that's the current one\n                 return phase\n-        raise Http404(\"Error! Phase with identifier `%s` not found.\" % requested_phase_identifier)  # pragma: no cover\n+        raise Http404(\"Error! Phase with identifier `%s` not found.\" % escape(requested_phase_identifier))\n \n     def _get_next_phase(self, phases, current_phase, target_phase):\n         found = False"
        },
        {
          "filename": "shuup/front/urls.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -10,6 +10,7 @@\n from django.conf.urls import url\n from django.contrib.auth.decorators import login_required\n from django.http.response import HttpResponse\n+from django.utils.html import escape\n from django.views.decorators.csrf import csrf_exempt\n from django.views.i18n import set_language\n from itertools import chain\n@@ -37,7 +38,7 @@\n \n \n def _not_here_yet(request, *args, **kwargs):\n-    return HttpResponse(\"Not here yet: %s (%r, %r)\" % (request.path, args, kwargs), status=410)\n+    return HttpResponse(\"Not here yet: %s (%r, %r)\" % (request.path, escape(args), escape(kwargs)), status=410)\n \n \n # Use a different js catalog function in front urlpatterns to prevent forcing"
        },
        {
          "filename": "shuup/utils/excs.py",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -1,4 +1,5 @@\n from django.core.exceptions import ValidationError\n+from django.utils.html import escape\n \n from shuup.utils.django_compat import force_text\n \n@@ -61,10 +62,10 @@ def extract_messages(obj_list):\n     for obj in obj_list:\n         if isinstance(obj, ValidationError):\n             for msg in obj.messages:\n-                yield force_text(msg)\n+                yield escape(force_text(msg))\n             continue\n         if isinstance(obj, Exception):\n             if len(obj.args):\n-                yield force_text(obj.args[0])\n+                yield escape(force_text(obj.args[0]))\n                 continue\n-        yield force_text(obj)\n+        yield escape(force_text(obj))"
        },
        {
          "filename": "shuup/xtheme/urls.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -19,7 +19,7 @@\n \n urlpatterns = [\n     url(r\"^xtheme/editor/$\", EditorView.as_view(), name=\"xtheme_editor\"),\n-    url(r\"^xtheme/(?P<view>.+)/*$\", extra_view_dispatch, name=\"xtheme_extra_view\"),\n+    url(r\"^xtheme/(?P<view>.+)/?$\", extra_view_dispatch, name=\"xtheme_extra_view\"),\n     url(r\"^xtheme/$\", command_dispatch, name=\"xtheme\"),\n     url(\n         r\"^xtheme-prod-hl/(?P<plugin_type>.*)/(?P<cutoff_days>\\d+)/(?P<count>\\d+)/(?P<cache_timeout>\\d+)/$\","
        },
        {
          "filename": "shuup/xtheme/views/command.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -6,6 +6,7 @@\n # This source code is licensed under the OSL-3.0 license found in the\n # LICENSE file in the root directory of this source tree.\n from django.http.response import HttpResponseRedirect\n+from django.utils.html import escape\n \n from shuup.utils.excs import Problem\n from shuup.xtheme.editing import set_edit_mode\n@@ -42,4 +43,4 @@ def command_dispatch(request):\n         response = handle_command(request, command)\n         if response:\n             return response\n-    raise Problem(\"Error! Unknown command: `%r`\" % command)\n+    raise Problem(\"Error! Unknown command: `%r`\" % escape(command))"
        },
        {
          "filename": "shuup/xtheme/views/editor.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -8,6 +8,7 @@\n import json\n from django.http.response import HttpResponse, HttpResponseRedirect\n from django.middleware.csrf import get_token\n+from django.utils.html import escape\n from django.utils.http import urlencode\n from django.utils.translation import ugettext_lazy as _\n from django.views.generic import TemplateView\n@@ -70,7 +71,7 @@ def post(self, request, *args, **kwargs):  # doccov: ignore\n         if command:\n             dispatcher = getattr(self, \"dispatch_%s\" % command, None)\n             if not callable(dispatcher):\n-                raise Problem(_(\"Unknown command: `%s`.\") % command)\n+                raise Problem(_(\"Unknown command: `%s`.\") % escape(command))\n             dispatch_kwargs = dict(request.POST.items())\n             rv = dispatcher(**dispatch_kwargs)\n             if rv:"
        },
        {
          "filename": "shuup/xtheme/views/extra.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -8,6 +8,7 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.core.signals import setting_changed\n from django.http.response import HttpResponseNotFound\n+from django.utils.html import escape\n \n from shuup.xtheme._theme import get_current_theme\n \n@@ -56,6 +57,6 @@ def extra_view_dispatch(request, view):\n     theme = getattr(request, \"theme\", None) or get_current_theme(request.shop)\n     view_func = get_view_by_name(theme, view)\n     if not view_func:\n-        msg = \"Error! %s/%s: Not found.\" % (getattr(theme, \"identifier\", None), view)\n+        msg = \"Error! %s/%s: Not found.\" % (getattr(theme, \"identifier\", None), escape(view))\n         return HttpResponseNotFound(msg)\n     return view_func(request)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 8,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "25f78cfe370109b9885b903e503faac295c7b7f2",
            "date": "2021-08-18T22:32:03Z",
            "author_login": "chessbr"
          },
          {
            "sha": "546a5666f400e855f3f0b7a12ad4cabc4b201cf4",
            "date": "2021-08-18T19:37:32Z",
            "author_login": "chessbr"
          },
          {
            "sha": "8aaa23ac9a0732ca4da310865b7fc767041c5ba3",
            "date": "2021-08-18T12:24:50Z",
            "author_login": "chessbr"
          },
          {
            "sha": "9cfc9a957475c8139507b024fc8184e5bc194571",
            "date": "2021-08-17T18:28:47Z",
            "author_login": "chessbr"
          },
          {
            "sha": "3cfdac7d0d3d40c7b770b97a833a8c94cd97d0b6",
            "date": "2021-08-17T13:28:21Z",
            "author_login": "chessbr"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "In Shuup, versions 1.6.0 through 2.10.8 are vulnerable to reflected Cross-Site Scripting (XSS) that allows execution of arbitrary javascript code on a victim browser. This vulnerability exists due to the error page contents not escaped.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-30T08:15:06.357",
    "last_modified": "2024-11-21T05:55:41.190",
    "fix_date": "2021-07-06T23:26:15Z"
  },
  "references": [
    {
      "url": "https://github.com/shuup/shuup/commit/75714c37e32796eb7cbb0d977af5bcaa26573588",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25963",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shuup/shuup/commit/75714c37e32796eb7cbb0d977af5bcaa26573588",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25963",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.796876",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "shuup",
    "owner": "shuup",
    "created_at": "2015-06-03T12:53:21Z",
    "updated_at": "2025-01-14T14:26:03Z",
    "pushed_at": "2024-03-13T23:45:42Z",
    "size": 30596,
    "stars": 2268,
    "forks": 1111,
    "open_issues": 178,
    "watchers": 2268,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 6452519,
      "Jinja": 686415,
      "JavaScript": 377938,
      "SCSS": 139197,
      "Less": 126515,
      "CSS": 1746,
      "Dockerfile": 1228,
      "HTML": 464
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T16:41:59.883538"
  }
}