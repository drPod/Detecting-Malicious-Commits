{
  "cve_id": "CVE-2021-25974",
  "github_data": {
    "repository": "publify/publify",
    "fix_commit": "fefd5f76302adcc425b2b6e7e7d23587cfc0083e",
    "related_commits": [
      "fefd5f76302adcc425b2b6e7e7d23587cfc0083e",
      "fefd5f76302adcc425b2b6e7e7d23587cfc0083e"
    ],
    "patch_url": "https://github.com/publify/publify/commit/fefd5f76302adcc425b2b6e7e7d23587cfc0083e.patch",
    "fix_commit_details": {
      "sha": "fefd5f76302adcc425b2b6e7e7d23587cfc0083e",
      "commit_date": "2021-10-10T08:35:58Z",
      "author": {
        "login": "mvz",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Ensure all Content html is sanitized",
        "length": 199,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 143,
        "additions": 102,
        "deletions": 41
      },
      "files": [
        {
          "filename": "publify_core/app/helpers/base_helper.rb",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -240,10 +240,15 @@ def fetch_html_content_for_feeds(item, this_blog)\n   end\n \n   def nofollowify_links(string)\n+    raise ArgumentError, \"string\", \"must be html_safe\" unless string.html_safe?\n+\n     if this_blog.dofollowify\n       string\n     else\n-      string.gsub(/<a(.*?)>/i, '<a\\1 rel=\"nofollow\">')\n+      followify_scrubber = Loofah::Scrubber.new do |node|\n+        node.set_attribute \"rel\", \"nofollow\" if node.name == \"a\"\n+      end\n+      sanitize h(string), scrubber: followify_scrubber\n     end\n   end\n "
        },
        {
          "filename": "publify_core/app/models/content_base.rb",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -5,6 +5,12 @@ def self.included(base)\n     base.extend ClassMethods\n   end\n \n+  class ContentTextHelpers\n+    include ActionView::Helpers::UrlHelper\n+    include ActionView::Helpers::TextHelper\n+    include ActionView::Helpers::SanitizeHelper\n+  end\n+\n   attr_accessor :just_changed_published_status\n   alias just_changed_published_status? just_changed_published_status\n \n@@ -39,10 +45,10 @@ def generate_html(field, text = nil)\n     html_postprocess(field, html).to_s\n   end\n \n-  # Post-process the HTML.  This is a noop by default, but Comment overrides it\n-  # to enforce HTML sanity.\n+  # Post-process the HTML\n   def html_postprocess(_field, html)\n-    html\n+    helper = ContentTextHelpers.new\n+    helper.sanitize html\n   end\n \n   def html_preprocess(_field, html)"
        },
        {
          "filename": "publify_core/app/models/feedback.rb",
          "status": "modified",
          "additions": 0,
          "deletions": 6,
          "patch": "@@ -11,12 +11,6 @@ class Feedback < ApplicationRecord\n   include PublifyGuid\n   include ContentBase\n \n-  class ContentTextHelpers\n-    include ActionView::Helpers::UrlHelper\n-    include ActionView::Helpers::TextHelper\n-    include ActionView::Helpers::SanitizeHelper\n-  end\n-\n   validate :feedback_not_closed, on: :create\n   validates :article, presence: true\n "
        },
        {
          "filename": "publify_core/app/views/articles/_article_excerpt.html.erb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@\n       <p><%= link_to_permalink article, t('.continue_reading') %></p>\n     </div>\n   <% else %>\n-    <%= raw article.html(:body) %>\n+    <%= article.html(:body) %>\n     <% if article.extended? %>\n       <div class=\"extended\">\n         <p><%= link_to_permalink article, t('.continue_reading') %></p>"
        },
        {
          "filename": "publify_core/app/views/articles/_full_article_content.html.erb",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,4 +1,4 @@\n <% cache article do %>\n-  <%= raw article.html(:body) %>\n-  <%= raw article.html(:extended) %>\n+  <%= article.html(:body) %>\n+  <%= article.html(:extended) %>\n <% end %>"
        },
        {
          "filename": "publify_core/app/views/articles/view_page.html.erb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,3 +1,3 @@\n <div id=\"viewpage\">\n-  <%= raw html @page %>\n+  <%= html @page %>\n </div>"
        },
        {
          "filename": "publify_core/app/views/comments/_comment.html.erb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -6,7 +6,7 @@\n     <%= t('.said') %> <%= display_date_and_time comment.created_at %>:\n     </p>\n     <div class=\"content\">\n-      <%= raw nofollowify_links comment.generate_html(:body) %>\n+      <%= nofollowify_links comment.generate_html(:body) %>\n       <% unless comment.published? %>\n         <div class=\"spamwarning\">\n           <%= t('.this_comment_has_been_flagged_for_moderator_approval') %>"
        },
        {
          "filename": "publify_core/app/views/notes/_note.html.erb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,7 +1,7 @@\n <% cache [note, note.user] do %>\n   <article class='status'>\n     <%= author_picture note %>\n-    <div class='p-name entry-title e-content entry-content article'><%= raw note.html(:body) %></div>\n+    <div class='p-name entry-title e-content entry-content article'><%= note.html(:body) %></div>\n     <footer>\n       <small>\n         <%= link_to_permalink(note, display_date_and_time(note.published_at)) %> |"
        },
        {
          "filename": "publify_core/app/views/notes/index.html.erb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2,7 +2,7 @@\n   <% for note in @notes %>\n   <div class='h-entry hentry h-as-note'>\n     <article>\n-      <p class='p-name entry-title e-content entry-content article'><%= raw note.html(:body) %></p>\n+      <p class='p-name entry-title e-content entry-content article'><%= note.html(:body) %></p>\n       <footer>\n         <small><%= link_to_permalink(note, display_date_and_time(note.published_at)) %></small>\n       </footer>"
        },
        {
          "filename": "publify_core/spec/helpers/base_helper_spec.rb",
          "status": "modified",
          "additions": 19,
          "deletions": 5,
          "patch": "@@ -160,6 +160,8 @@ def parse_request(_contents, _request_params)\n   end\n \n   describe \"#nofollowify_links\" do\n+    let(:original_html) { '<a href=\"http://myblog.net\">my blog</a>'.html_safe }\n+\n     before do\n       @blog = create :blog\n     end\n@@ -168,16 +170,28 @@ def parse_request(_contents, _request_params)\n       @blog.dofollowify = false\n       @blog.save\n \n-      expect(nofollowify_links('<a href=\"http://myblog.net\">my blog</a>')).\n-        to eq('<a href=\"http://myblog.net\" rel=\"nofollow\">my blog</a>')\n+      result = nofollowify_links(original_html)\n+\n+      aggregate_failures do\n+        expect(result).to eq('<a href=\"http://myblog.net\" rel=\"nofollow\">my blog</a>')\n+        expect(result).to be_html_safe\n+      end\n     end\n \n-    it \"with dofollowify enabled, links should be nofollowed\" do\n+    it \"with dofollowify enabled, links should be not nofollowed\" do\n       @blog.dofollowify = true\n       @blog.save\n \n-      expect(nofollowify_links('<a href=\"http://myblog.net\">my blog</a>')).\n-        to eq('<a href=\"http://myblog.net\">my blog</a>')\n+      result = nofollowify_links(original_html)\n+\n+      aggregate_failures do\n+        expect(result).to eq('<a href=\"http://myblog.net\">my blog</a>')\n+        expect(result).to be_html_safe\n+      end\n+    end\n+\n+    it \"does not accept unsafe html\" do\n+      expect { nofollowify_links(\"just an unsafe string\") }.to raise_error ArgumentError\n     end\n   end\n "
        },
        {
          "filename": "publify_core/spec/models/article_spec.rb",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -398,6 +398,14 @@\n     end\n   end\n \n+  describe \"#html\" do\n+    let(:article) { build_stubbed :article }\n+\n+    it \"returns an html_safe string\" do\n+      expect(article.html).to be_html_safe\n+    end\n+  end\n+\n   describe \"#comment_url\" do\n     it \"renders complete url of comment\" do\n       article = build_stubbed(:article, id: 123)"
        },
        {
          "filename": "publify_core/spec/models/comment_spec.rb",
          "status": "modified",
          "additions": 37,
          "deletions": 2,
          "patch": "@@ -257,10 +257,45 @@ def valid_comment(options = {})\n     end\n   end\n \n-  describe \"#generate_html\" do\n+  describe \"#html\" do\n     it \"renders email addresses in the body\" do\n       comment = build_stubbed(:comment, body: \"foo@example.com\")\n-      expect(comment.generate_html(:body)).to match(/mailto:/)\n+      expect(comment.html).to match(/mailto:/)\n+    end\n+\n+    it \"returns an html_safe string\" do\n+      comment = build_stubbed(:comment, body: \"Just a comment\")\n+      expect(comment.html).to be_html_safe\n+    end\n+\n+    context \"with an evil comment\" do\n+      let(:comment) { build_stubbed :comment, body: \"Test foo <script>do_evil();</script>\" }\n+      let(:blog) { comment.article.blog }\n+\n+      [\"\", \"textile\", \"markdown\", \"smartypants\", \"markdown smartypants\"].each do |filter|\n+        it \"rejects xss attempt with filter '#{filter}'\" do\n+          blog.comment_text_filter = filter\n+\n+          ActiveSupport::Deprecation.silence do\n+            assert comment.html(:body) !~ /<script>/\n+          end\n+        end\n+      end\n+    end\n+\n+    context \"with a markdown comment with italic and bold\" do\n+      let(:comment) { build(:comment, body: \"Comment body _italic_ **bold**\") }\n+      let(:blog) { comment.article.blog }\n+\n+      it \"converts the comment markup to html\" do\n+        blog.comment_text_filter = \"markdown\"\n+        result = comment.html\n+\n+        aggregate_failures do\n+          expect(result).to match(%r{<em>italic</em>})\n+          expect(result).to match(%r{<strong>bold</strong>})\n+        end\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "publify_core/spec/models/content_spec.rb",
          "status": "modified",
          "additions": 0,
          "deletions": 15,
          "patch": "@@ -144,19 +144,4 @@\n       it { expect(content.author_name).to eq(author.login) }\n     end\n   end\n-\n-  describe \"#generate_html\" do\n-    context \"with a blog with markdown filter\" do\n-      let!(:blog) { create(:blog, comment_text_filter: \"markdown\") }\n-\n-      context \"comment with italic and bold\" do\n-        let(:comment) { build(:comment, body: \"Comment body _italic_ **bold**\") }\n-\n-        it \"converts the comment markup to HTML\" do\n-          expect(comment.generate_html(:body)).to match(%r{<em>italic</em>})\n-          expect(comment.generate_html(:body)).to match(%r{<strong>bold</strong>})\n-        end\n-      end\n-    end\n-  end\n end"
        },
        {
          "filename": "publify_core/spec/models/note_spec.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -255,6 +255,13 @@\n         it { expect(note.twitter_message.length).to eq(140) }\n       end\n     end\n+\n+    describe \"#html\" do\n+      it \"returns an html_safe string\" do\n+        note = build(:note, body: \"A test tweet with a #hashtag\")\n+        expect(note.html).to be_html_safe\n+      end\n+    end\n   end\n \n   context \"with a dofollowify blog\" do"
        },
        {
          "filename": "publify_core/spec/models/page_spec.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -89,4 +89,11 @@\n       it { expect(page.redirect).to be_blank }\n     end\n   end\n+\n+  describe \"#html\" do\n+    it \"returns an html_safe string\" do\n+      page = build(:page)\n+      expect(page.html).to be_html_safe\n+    end\n+  end\n end"
        },
        {
          "filename": "themes/bootstrap-2/views/articles/view_page.html.erb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,2 +1,2 @@\n <h1 class='page-header'><%= link_to_permalink(@page, @page.title) %></h1>\n-<%= raw @page.html %>\n+<%= @page.html %>"
        },
        {
          "filename": "themes/bootstrap-2/views/comments/_comment.html.erb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@\n       <%= t('.by') %> <%= comment.url.blank? ? h(comment.author) : nofollowified_link_to(h(comment.author), comment.url) %>\n       <%= display_date_and_time comment.created_at %>\n     </h4>\n-    <%= raw comment.html %>\n+    <%= comment.html %>\n     <%- unless comment.published? %>\n       <div class=\"spamwarning\"><%= t('.this_comment_has_been_flagged_for_moderator_approval') %></div>\n     <%- end %>"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 9,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9514eaf5293956182bd58e70ae01b1a3b0633614",
            "date": "2025-01-12T11:19:19Z",
            "author_login": "mvz"
          },
          {
            "sha": "b13b6d705822f34c48d96813ec2dd5a3a66782eb",
            "date": "2025-01-10T09:41:19Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "bc406080b2baff54e26f00a4ca36ac5a7c2ce36f",
            "date": "2024-12-28T11:33:09Z",
            "author_login": "mvz"
          },
          {
            "sha": "7c73543d855d0b2cac1baa690c7eb4c6cf6a49dd",
            "date": "2024-12-25T10:01:38Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "effb2f66c060b40d482885333c474c41c7bf5b1b",
            "date": "2024-12-13T14:31:38Z",
            "author_login": "mvz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "In Publify, versions v8.0 to v9.2.4 are vulnerable to stored XSS. A user with a \u201cpublisher\u201d role is able to inject and execute arbitrary JavaScript code while creating a page/article.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-10T11:15:07.573",
    "last_modified": "2024-11-21T05:55:42.667",
    "fix_date": "2021-10-10T08:35:58Z"
  },
  "references": [
    {
      "url": "https://github.com/publify/publify/commit/fefd5f76302adcc425b2b6e7e7d23587cfc0083e",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25974",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/publify/publify/commit/fefd5f76302adcc425b2b6e7e7d23587cfc0083e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25974",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.884525",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "publify",
    "owner": "publify",
    "created_at": "2008-10-23T14:45:23Z",
    "updated_at": "2025-01-12T11:19:26Z",
    "pushed_at": "2025-01-12T11:19:21Z",
    "size": 32806,
    "stars": 1828,
    "forks": 3689,
    "open_issues": 86,
    "watchers": 1828,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Less": 189139,
      "Ruby": 136723,
      "HTML": 16246,
      "CSS": 1115
    },
    "commit_activity": {
      "total_commits_last_year": 41,
      "avg_commits_per_week": 0.7884615384615384,
      "days_active_last_year": 30
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T12:55:41.326580"
  }
}