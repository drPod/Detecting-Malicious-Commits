{
  "cve_id": "CVE-2021-25978",
  "github_data": {
    "repository": "apostrophecms/apostrophe",
    "fix_commit": "c8b94ee9c79468f1ce28e31966cb0e0839165e59",
    "related_commits": [
      "c8b94ee9c79468f1ce28e31966cb0e0839165e59",
      "c8b94ee9c79468f1ce28e31966cb0e0839165e59"
    ],
    "patch_url": "https://github.com/apostrophecms/apostrophe/commit/c8b94ee9c79468f1ce28e31966cb0e0839165e59.patch",
    "fix_commit_details": {
      "sha": "c8b94ee9c79468f1ce28e31966cb0e0839165e59",
      "commit_date": "2021-09-07T20:14:18Z",
      "author": {
        "login": "boutell",
        "type": "User",
        "stats": {
          "total_commits": 2652,
          "average_weekly_commits": 4.340425531914893,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 205
        }
      },
      "commit_message": {
        "title": "sanitize SVG uploads, including previous uploads",
        "length": 48,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 73,
        "additions": 72,
        "deletions": 1
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -1,5 +1,11 @@\n # Changelog\n \n+## 3.3.2 - 2021-09-07\n+\n+### Security\n+\n+Users with permission to upload SVG files were previously able to do so even if they contained XSS attacks. In Apostrophe 3.x, the general public so far never has access to upload SVG files, so the risk is minor but could be used to phish access from an admin user uploading a file. While Apostrophe typically displays SVG files using the `img` tag, which ignores XSS vectors, an XSS attack could still be carried out if the image were opened directly via the Apostrophe media library's convenience link for doing so. Beginning in version 3.3.2 all SVG uploads are sanitized via DOMPurify to remove XSS attack vectors. In addition, all existing SVG attachments not already validated are passed through DOMPurify during a migration upon deployment of version 3.3.2. \n+\n ## 3.3.1 - 2021-09-01\n \n ### Fixes"
        },
        {
          "filename": "modules/@apostrophecms/attachment/index.js",
          "status": "modified",
          "additions": 63,
          "deletions": 1,
          "patch": "@@ -2,6 +2,8 @@ const _ = require('lodash');\n const path = require('path');\n const fs = require('fs');\n const Promise = require('bluebird');\n+const createDOMPurify = require('dompurify');\n+const { JSDOM } = require('jsdom');\n \n module.exports = {\n   options: { alias: 'attachment' },\n@@ -108,6 +110,7 @@ module.exports = {\n     await self.db.createIndex({ docIds: 1 });\n     await self.db.createIndex({ archivedDocIds: 1 });\n     self.addLegacyMigrations();\n+    self.addSvgSanitizationMigration();\n   },\n \n   tasks(self) {\n@@ -402,6 +405,16 @@ module.exports = {\n         }\n         info.length = await self.apos.util.fileLength(file.path);\n         info.md5 = await self.apos.util.md5File(file.path);\n+        if (info.extension === 'svg') {\n+          try {\n+            await self.sanitizeSvg(file, info);\n+          } catch (e) {\n+            // Currently DOMPurify passes invalid SVG content without comment as long\n+            // as it's not an SVG XSS attack vector, but make provision to report\n+            // a relevant error if that changes\n+            throw self.apos.error('invalid', req.t('apostrophe:fileInvalid'));\n+          }\n+        }\n         if (self.isSized(extension)) {\n           // For images we correct automatically for common file extension mistakes\n           const result = await Promise.promisify(self.uploadfs.copyImageIn)(file.path, '/attachments/' + info._id + '-' + info.name, { sizes: self.imageSizes });\n@@ -423,6 +436,20 @@ module.exports = {\n         await self.db.insertOne(info);\n         return info;\n       },\n+      // Given a path to a local svg file, sanitize any XSS attack vectors that\n+      // may be present in the file. The caller is responsible for catching any\n+      // exception thrown and treating that as an invalid file but there is no\n+      // guarantee that invalid SVG files will be detected or cleaned up, only\n+      // XSS attacks.\n+      async sanitizeSvg(path) {\n+        const readFile = require('util').promisify(fs.readFile);\n+        const writeFile = require('util').promisify(fs.writeFile);\n+        const window = new JSDOM('').window;\n+        const DOMPurify = createDOMPurify(window);\n+        const dirty = await readFile(path);\n+        const clean = DOMPurify.sanitize(dirty);\n+        return writeFile(path, clean);\n+      },\n       getFileGroup(extension) {\n         return _.find(self.fileGroups, function (group) {\n           const candidate = group.extensionMaps[extension] || extension;\n@@ -707,7 +734,10 @@ module.exports = {\n         const batchSize = 100;\n         let lastId = '';\n         while (true) {\n-          const docs = await self.db.find({ _id: { $gt: lastId } }).limit(batchSize).sort({ _id: 1 }).toArray();\n+          const docs = await self.db.find({\n+            ...(criteria || {}),\n+            _id: { $gt: lastId }\n+          }).limit(batchSize).sort({ _id: 1 }).toArray();\n           if (!docs.length) {\n             return;\n           }\n@@ -1071,6 +1101,38 @@ module.exports = {\n           return bulk.execute();\n         }\n       },\n+      async addSvgSanitizationMigration() {\n+        self.apos.migration.add('svg-sanitization', async () => {\n+          return self.each({\n+            extension: 'svg',\n+            sanitized: {\n+              $ne: true\n+            },\n+          }, 1, async attachment => {\n+            const tempFile = self.uploadfs.getTempPath() + '/' + self.apos.util.generateId() + '.' + attachment.extension;\n+            const copyIn = require('util').promisify(self.uploadfs.copyIn);\n+            const copyOut = require('util').promisify(self.uploadfs.copyOut);\n+            const uploadfsPath = self.url(attachment, { uploadfsPath: true });\n+            try {\n+              await copyOut(uploadfsPath, tempFile);\n+              await self.sanitizeSvg(tempFile);\n+              await copyIn(tempFile, uploadfsPath);\n+              await self.db.update({\n+                _id: attachment._id\n+              }, {\n+                $set: {\n+                  sanitized: true\n+                }\n+              });\n+            } catch (e) {\n+              console.error(e);\n+              // This condition shouldn't occur, but do warn the operator if it does\n+              // (possibly on input that is not really an SVG file at all)\n+              self.apos.util.error(`Warning: unable to sanitize SVG file ${uploadfsPath}`);\n+            }\n+          });\n+        });\n+      },\n       ...require('./lib/legacy-migrations')(self)\n     };\n   },"
        },
        {
          "filename": "modules/@apostrophecms/i18n/i18n/en.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -128,6 +128,7 @@\n   \"fileTag\": \"File Tag\",\n   \"fileTags\": \"File Tags\",\n   \"fileTypeNotAccepted\": \"File type was not accepted. Allowed extensions: {{ extensions }}\",\n+  \"fileInvalid\": \"File was not accepted. It may be corrupted or its content may not match its file extension.\",\n   \"files\": \"Files\",\n   \"filter\": \"Filter\",\n   \"filterByTag\": \"Filter by Tag\","
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -57,6 +57,7 @@\n     \"dayjs\": \"^1.9.8\",\n     \"debounce-async\": \"0.0.2\",\n     \"deep-get-set\": \"^1.1.1\",\n+    \"dompurify\": \"^2.3.1\",\n     \"eslint-plugin-promise\": \"^5.1.0\",\n     \"express\": \"^4.16.4\",\n     \"express-bearer-token\": \"^2.4.0\",\n@@ -70,6 +71,7 @@\n     \"i18next-http-middleware\": \"^3.1.4\",\n     \"import-fresh\": \"^3.3.0\",\n     \"is-wsl\": \"^2.2.0\",\n+    \"jsdom\": \"^17.0.0\",\n     \"klona\": \"^2.0.4\",\n     \"launder\": \"^1.4.0\",\n     \"lodash\": \"^4.17.20\","
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "64559bf681135904ede6e6f727b7b0182f6c2da4",
            "date": "2025-01-09T13:35:33Z",
            "author_login": "ValJed"
          },
          {
            "sha": "2dc106c707b769e8c7c048e96938317ce436d8f8",
            "date": "2025-01-09T09:17:45Z",
            "author_login": "ValJed"
          },
          {
            "sha": "ed26feef1eb2a5bf8e687a7f6e192f5a39e52242",
            "date": "2025-01-07T14:50:09Z",
            "author_login": "myovchev"
          },
          {
            "sha": "07df80561095e9f3115d5d81f55ccb519b1963ab",
            "date": "2025-01-06T15:42:30Z",
            "author_login": "stuartromanek"
          },
          {
            "sha": "5e978e6e2095771a60b37aa9d530cab0559e2294",
            "date": "2024-12-29T21:35:36Z",
            "author_login": "boutell"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Apostrophe CMS versions between 2.63.0 to 3.3.1 are vulnerable to Stored XSS where an editor uploads an SVG file that contains malicious JavaScript onto the Images module, which triggers XSS once viewed.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-07T18:15:07.620",
    "last_modified": "2024-11-21T05:55:43.207",
    "fix_date": "2021-09-07T20:14:18Z"
  },
  "references": [
    {
      "url": "https://github.com/apostrophecms/apostrophe/commit/c8b94ee9c79468f1ce28e31966cb0e0839165e59",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/apostrophecms/apostrophe/commit/c8b94ee9c79468f1ce28e31966cb0e0839165e59",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.879843",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "apostrophe",
    "owner": "apostrophecms",
    "created_at": "2013-02-08T20:04:02Z",
    "updated_at": "2025-01-12T15:50:58Z",
    "pushed_at": "2025-01-13T17:03:34Z",
    "size": 38442,
    "stars": 4378,
    "forks": 595,
    "open_issues": 122,
    "watchers": 4378,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "0.4",
      "0.5"
    ],
    "languages": {
      "JavaScript": 2851277,
      "Vue": 789578,
      "SCSS": 32872,
      "HTML": 27647,
      "Shell": 344,
      "CSS": 27
    },
    "commit_activity": {
      "total_commits_last_year": 665,
      "avg_commits_per_week": 12.788461538461538,
      "days_active_last_year": 178
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T16:29:14.448309"
  }
}