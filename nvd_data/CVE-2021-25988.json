{
  "cve_id": "CVE-2021-25988",
  "github_data": {
    "repository": "ifmeorg/ifme",
    "fix_commit": "720a47015e46ad387b3219fed7ebfb14ec3c854c",
    "related_commits": [
      "720a47015e46ad387b3219fed7ebfb14ec3c854c",
      "720a47015e46ad387b3219fed7ebfb14ec3c854c"
    ],
    "patch_url": "https://github.com/ifmeorg/ifme/commit/720a47015e46ad387b3219fed7ebfb14ec3c854c.patch",
    "fix_commit_details": {
      "sha": "720a47015e46ad387b3219fed7ebfb14ec3c854c",
      "commit_date": "2021-11-18T20:34:40Z",
      "author": {
        "login": "julianguyen",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[#2052] Fix stored XSS in Notifications",
        "length": 39,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 173,
        "additions": 136,
        "deletions": 37
      },
      "files": [
        {
          "filename": "app/controllers/notifications_controller.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -46,6 +46,7 @@ def convert_to_hash(string_obj)\n   def render_notification(notification)\n     uniqueid = notification[:uniqueid]\n     data = convert_to_hash(notification[:data])\n+    data[:email] = User.find(data[:user_id]).email # In case data[:name] is invalid\n     case data[:type]\n     when /comment/ then comment_link(uniqueid, data)\n     when /accepted_ally_request/ then accepted_ally_link(uniqueid, data)"
        },
        {
          "filename": "app/helpers/notifications_helper.rb",
          "status": "modified",
          "additions": 9,
          "deletions": 5,
          "patch": "@@ -6,7 +6,7 @@ def comment_link(uniqueid, data)\n     i18n_key = data[:cutoff] ? 'truncated' : 'full'\n     notification = t(\n       \"notifications.comment.#{i18n_key}\",\n-      name: data[:user],\n+      name: name_or_email(data),\n       comment: strip_tags(data[:comment]),\n       typename: data[:typename]\n     )\n@@ -16,15 +16,15 @@ def comment_link(uniqueid, data)\n   def accepted_ally_link(uniqueid, data)\n     notification = t(\n       'notifications.ally.accepted',\n-      name: data[:user]\n+      name: name_or_email(data)\n     )\n     link = \"/profile?uid=#{data[:uid]}\"\n     notification_link(uniqueid, link, notification)\n   end\n \n   def new_ally_request_link(uniqueid, data)\n     link = \"/profile?uid=#{data[:uid]}\"\n-    link_html = \"<a href=\\\"#{link}\\\">#{data[:user]}</a>\"\n+    link_html = \"<a href=\\\"#{link}\\\">#{name_or_email(data)}</a>\"\n     # rubocop:disable Layout/LineLength\n     \"<div id=\\\"#{uniqueid}\\\"><div>#{t('notifications.ally.sent_html', link_to_user: link_html)}</div>#{request_actions(data[:user_id])}</div>\"\n     # rubocop:enable Layout/LineLength\n@@ -33,7 +33,7 @@ def new_ally_request_link(uniqueid, data)\n   def group_link(uniqueid, data)\n     notification = t(\n       \"notifications.group.#{data[:type]}\",\n-      name: data[:user],\n+      name: name_or_email(data),\n       group_name: data[:group]\n     )\n     link = \"/groups/#{data[:group_id]}\"\n@@ -43,7 +43,7 @@ def group_link(uniqueid, data)\n   def meeting_link(uniqueid, data)\n     notification = t(\n       \"notifications.meeting.#{data[:type]}\",\n-      name: data[:user],\n+      name: name_or_email(data),\n       group_name: data[:group],\n       meeting_name: data[:typename]\n     )\n@@ -97,4 +97,8 @@ def comment_for_type(data)\n   def notification_link(uniqueid, link, notification)\n     \"<a id=\\\"#{uniqueid}\\\" href=\\\"#{link}\\\">#{notification}</a>\"\n   end\n+\n+  def name_or_email(data)\n+    sanitize(data[:user]).presence || data[:email]\n+  end\n end"
        },
        {
          "filename": "spec/factories/notification.rb",
          "status": "modified",
          "additions": 9,
          "deletions": 14,
          "patch": "@@ -1,22 +1,17 @@\n # frozen_string_literal: true\n-data = {\n-  cutoff: false,\n-  user: 'Julia Nguyen',\n-  comment: 'Hello',\n-  typename: 'typename',\n-  type: 'type_comment_moment',\n-  typeid: 1,\n-  commentable_id: 1\n-}\n \n FactoryBot.define do\n   factory :notification do\n+    data = {\n+      cutoff: false,\n+      user: 'Almond Butters',\n+      comment: 'Hello',\n+      typename: 'typename',\n+      type: 'type_comment_moment',\n+      typeid: 1,\n+      commentable_id: 1,\n+    }\n     uniqueid { 'MyString' }\n     data { data.to_json }\n-    user_id { 1 }\n-\n-    trait :with_user do\n-      association :user, factory: :user\n-    end\n   end\n end"
        },
        {
          "filename": "spec/helpers/notifications_helper_spec.rb",
          "status": "modified",
          "additions": 96,
          "deletions": 11,
          "patch": "@@ -4,7 +4,7 @@\n   let(:uniqueid) { 'uniqueid' }\n \n   describe '#comment_link' do\n-    it 'returns correct link' do\n+    it 'returns the correct link' do\n       data = {\n         cutoff: false,\n         user: 'Julia Nguyen',\n@@ -16,27 +16,60 @@\n       }\n       expect(comment_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/moments/1\">Julia Nguyen commented \"Hello\" on typename</a>')\n     end\n+\n+    it 'sanitizes and returns the correct link' do\n+      data = {\n+        cutoff: false,\n+        user: '<IFRAME SRC=\"javascript:alert(document.domain);\"></IFRAME>',\n+        email: 'julia@example.com',\n+        comment: 'Hello',\n+        typename: 'typename',\n+        type: 'type_comment_moment',\n+        typeid: 1,\n+        commentable_id: 1\n+      }\n+      expect(comment_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/moments/1\">julia@example.com commented \"Hello\" on typename</a>')\n+    end\n   end\n \n   describe '#accepted_ally_link' do\n-    it 'returns correct link' do\n+    it 'returns the correct link' do\n       data = {\n         user: 'Julia Nguyen',\n         uid: 'uid'\n       }\n       expect(accepted_ally_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/profile?uid=uid\">Julia Nguyen accepted your ally request!</a>')\n     end\n+\n+    it 'sanitizes and returns the correct link' do\n+      data = {\n+        user: '<IFRAME SRC=\"javascript:alert(document.domain);\"></IFRAME>',\n+        email: 'julia@example.com',\n+        uid: 'uid'\n+      }\n+      expect(accepted_ally_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/profile?uid=uid\">julia@example.com accepted your ally request!</a>')\n+    end\n   end\n \n   describe '#new_ally_request_link' do\n-    it 'returns correct link' do\n+    it 'returns the correct link' do\n       data = {\n         user: 'Julia Nguyen',\n         uid: 'uid',\n         user_id: 1\n       }\n       expect(new_ally_request_link(uniqueid, data)).to eq('<div id=\"uniqueid\"><div>&lt;a href=&quot;/profile?uid=uid&quot;&gt;Julia Nguyen&lt;/a&gt; sent an ally request!</div><div><a rel=\"nofollow\" data-method=\"post\" href=\"/allies/add?ally_id=1\">Accept</a> | <a data-confirm=\"Are you sure?\" rel=\"nofollow\" data-method=\"post\" href=\"/allies/remove?ally_id=1\">Reject</a></div></div>')\n     end\n+\n+    it 'sanitizes and returns the correct link' do\n+      data = {\n+        user: '<IFRAME SRC=\"javascript:alert(document.domain);\"></IFRAME>',\n+        email: 'julia@example.com',\n+        uid: 'uid',\n+        user_id: 1\n+      }\n+      expect(new_ally_request_link(uniqueid, data)).to eq('<div id=\"uniqueid\"><div>&lt;a href=&quot;/profile?uid=uid&quot;&gt;julia@example.com&lt;/a&gt; sent an ally request!</div><div><a rel=\"nofollow\" data-method=\"post\" href=\"/allies/add?ally_id=1\">Accept</a> | <a data-confirm=\"Are you sure?\" rel=\"nofollow\" data-method=\"post\" href=\"/allies/remove?ally_id=1\">Reject</a></div></div>')\n+    end\n   end\n \n   describe '#group_link' do\n@@ -48,32 +81,57 @@\n         group_id: 1\n       }\n     end\n+    let(:dirty_data) do\n+      {\n+        type: type,\n+        user: '<IFRAME SRC=\"javascript:alert(document.domain);\"></IFRAME>',\n+        email: 'julia@example.com',\n+        group: 'Group name',\n+        group_id: 1\n+      }\n+    end\n     context 'type is new_group' do\n       let(:type) { 'new_group' }\n-      it 'returns correct link' do\n+      it 'returns the correct link' do\n         expect(group_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/groups/1\">Julia Nguyen created a group \"Group name\"</a>')\n       end\n+\n+      it 'sanitizes and returns the correct link' do\n+        expect(group_link(uniqueid, dirty_data)).to eq('<a id=\"uniqueid\" href=\"/groups/1\">julia@example.com created a group \"Group name\"</a>')\n+      end\n     end\n \n     context 'type is new_group_member' do\n       let(:type) { 'new_group_member' }\n-      it 'returns correct link' do\n+      it 'returns the correct link' do\n         expect(group_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/groups/1\">Julia Nguyen joined your group \"Group name\"</a>')\n       end\n+\n+      it 'sanitizes and returns the correct link' do\n+        expect(group_link(uniqueid, dirty_data)).to eq('<a id=\"uniqueid\" href=\"/groups/1\">julia@example.com joined your group \"Group name\"</a>')\n+      end\n     end\n \n     context 'type is add_group_leader' do\n       let(:type) { 'add_group_leader' }\n-      it 'returns correct link' do\n+      it 'returns the correct link' do\n         expect(group_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/groups/1\">Julia Nguyen became a leader of \"Group name\"</a>')\n       end\n+\n+      it 'sanitizes and returns the correct link' do\n+        expect(group_link(uniqueid, dirty_data)).to eq('<a id=\"uniqueid\" href=\"/groups/1\">julia@example.com became a leader of \"Group name\"</a>')\n+      end\n     end\n \n     context 'type is remove_group_leader' do\n       let(:type) { 'remove_group_leader' }\n-      it 'returns correct link' do\n+      it 'returns the correct link' do\n         expect(group_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/groups/1\">Julia Nguyen is no longer a leader of \"Group name\"</a>')\n       end\n+\n+      it 'sanitizes and returns the correct link' do\n+        expect(group_link(uniqueid, dirty_data)).to eq('<a id=\"uniqueid\" href=\"/groups/1\">julia@example.com is no longer a leader of \"Group name\"</a>')\n+      end\n     end\n   end\n \n@@ -88,32 +146,59 @@\n         typeid: 1\n       }\n     end\n+    let(:dirty_data) do\n+      {\n+        type: type,\n+        user: '<IFRAME SRC=\"javascript:alert(document.domain);\"></IFRAME>',\n+        email: 'julia@example.com',\n+        group: 'Group name',\n+        typename: 'Meeting name',\n+        group_id: 1,\n+        typeid: 1\n+      }\n+    end\n     context 'type is new_meeting' do\n       let(:type) { 'new_meeting' }\n-      it 'returns correct link' do\n+      it 'returns the correct link' do\n         expect(meeting_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/meetings/1\">Julia Nguyen created a new meeting \"Meeting name\" for \"Group name\"</a>')\n       end\n+\n+      it 'sanitizes and returns the correct link' do\n+        expect(meeting_link(uniqueid, dirty_data)).to eq('<a id=\"uniqueid\" href=\"/meetings/1\">julia@example.com created a new meeting \"Meeting name\" for \"Group name\"</a>')\n+      end\n     end\n \n     context 'type is remove_meeting' do\n       let(:type) { 'remove_meeting' }\n-      it 'returns correct link' do\n+      it 'returns the correct link' do\n         expect(meeting_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/groups/1\">Julia Nguyen has cancelled \"Meeting name\" for \"Group name\"</a>')\n       end\n+\n+      it 'sanitizes and returns the correct link' do\n+        expect(meeting_link(uniqueid, dirty_data)).to eq('<a id=\"uniqueid\" href=\"/groups/1\">julia@example.com has cancelled \"Meeting name\" for \"Group name\"</a>')\n+      end\n     end\n \n     context 'type is update_meeting' do\n       let(:type) { 'update_meeting' }\n-      it 'returns correct link' do\n+      it 'returns the correct link' do\n         expect(meeting_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/meetings/1\">Julia Nguyen has updated \"Meeting name\" for \"Group name\"</a>')\n       end\n+\n+      it 'sanitizes and returns the correct link' do\n+        expect(meeting_link(uniqueid, dirty_data)).to eq('<a id=\"uniqueid\" href=\"/meetings/1\">julia@example.com has updated \"Meeting name\" for \"Group name\"</a>')\n+      end\n     end\n \n     context 'type is join_meeting' do\n       let(:type) { 'join_meeting' }\n-      it 'returns correct link' do\n+      it 'returns the correct link' do\n         expect(meeting_link(uniqueid, data)).to eq('<a id=\"uniqueid\" href=\"/meetings/1\">Julia Nguyen has joined \"Meeting name\" for \"Group name\"</a>')\n       end\n+\n+      it 'sanitizes and returns the correct link' do\n+        expect(meeting_link(uniqueid, dirty_data)).to eq('<a id=\"uniqueid\" href=\"/meetings/1\">julia@example.com has joined \"Meeting name\" for \"Group name\"</a>')\n+      end\n     end\n   end\n end"
        },
        {
          "filename": "spec/models/notification_spec.rb",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -13,6 +13,8 @@\n #\n \n describe Notification do\n+  let(:user) { create(:user1) }\n+\n   context 'with relations' do\n     it { is_expected.to belong_to :user }\n   end\n@@ -24,7 +26,7 @@\n   end\n \n   it 'is valid with valid attributes' do\n-    notification = build(:notification)\n+    notification = build(:notification, user: user)\n \n     expect(notification).to be_valid\n   end"
        },
        {
          "filename": "spec/requests/notifications_spec.rb",
          "status": "modified",
          "additions": 18,
          "deletions": 6,
          "patch": "@@ -195,16 +195,28 @@\n   describe '#fetch_notifications' do\n     let(:user) { create(:user1) }\n     let(:other_user) { create(:user2) }\n-    let!(:other_user_notification) { create(:notification, user: other_user) }\n-\n     context 'when the user is signed in' do\n-      let!(:notification) { create(:notification, user: user) }\n-      let!(:notification_two) { create(:notification, user: user) }\n+      let!(:notification) {\n+        create(\n+          :notification,\n+          user: user,\n+          data: {\n+            cutoff: false,\n+            user: 'Almond Butters',\n+            comment: 'Hello',\n+            typename: 'typename',\n+            type: 'type_comment_moment',\n+            typeid: 1,\n+            commentable_id: 1,\n+            user_id: other_user.id\n+          }.to_json\n+        )\n+      }\n       let(:notification_link) do\n-        '<a id=\"MyString\" href=\"/moments/1\">Julia Nguyen commented \"Hello\" on typename</a>'\n+        '<a id=\"MyString\" href=\"/moments/1\">Almond Butters commented \"Hello\" on typename</a>'\n       end\n       let(:expected_result) do\n-        { fetch_notifications: [notification_link, notification_link] }.to_json\n+        { fetch_notifications: [notification_link] }.to_json\n       end\n \n       before do"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 6,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "85f0149c027ed5441305423956655f733daf20f3",
            "date": "2025-01-05T01:38:17Z",
            "author_login": "julianguyen"
          },
          {
            "sha": "3034e96225f095a01dfdcd3ab961aef960ff614e",
            "date": "2024-12-11T01:51:52Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "dc27b421f360cdf39e019bdfdce2d96225d69e90",
            "date": "2024-12-11T00:58:29Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3cd19128ce5520a43a83ec485866e561d4f24383",
            "date": "2024-12-09T07:28:29Z",
            "author_login": "julianguyen"
          },
          {
            "sha": "3c6c6de6648b5069e456865044950d7fa0542f43",
            "date": "2024-12-09T03:32:18Z",
            "author_login": "julianguyen"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "In \u201cifme\u201d, versions 1.0.0 to v7.31.4 are vulnerable against stored XSS vulnerability (notifications section) which can be directly triggered by sending an ally request to the admin.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-12-29T09:15:09.150",
    "last_modified": "2024-11-21T05:55:44.560",
    "fix_date": "2021-11-18T20:34:40Z"
  },
  "references": [
    {
      "url": "https://github.com/ifmeorg/ifme/commit/720a47015e46ad387b3219fed7ebfb14ec3c854c",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25988",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ifmeorg/ifme/commit/720a47015e46ad387b3219fed7ebfb14ec3c854c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25988",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.034262",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ifme",
    "owner": "ifmeorg",
    "created_at": "2014-04-19T06:58:25Z",
    "updated_at": "2025-01-12T12:04:33Z",
    "pushed_at": "2025-01-05T01:39:03Z",
    "size": 86066,
    "stars": 1499,
    "forks": 753,
    "open_issues": 33,
    "watchers": 1499,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Ruby": 858246,
      "JavaScript": 351103,
      "HTML": 86355,
      "SCSS": 84697,
      "Shell": 2659,
      "Dockerfile": 803,
      "Procfile": 50
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:43:49.883549"
  }
}