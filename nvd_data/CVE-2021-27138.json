{
  "cve_id": "CVE-2021-27138",
  "github_data": {
    "repository": "u-boot/u-boot",
    "fix_commit": "3f04db891a353f4b127ed57279279f851c6b4917",
    "related_commits": [
      "3f04db891a353f4b127ed57279279f851c6b4917",
      "79af75f7776fc20b0d7eb6afe1e27c00fdb4b9b4",
      "b6f4c757959f8850e1299a77c8e5713da78e8ec0",
      "3f04db891a353f4b127ed57279279f851c6b4917",
      "79af75f7776fc20b0d7eb6afe1e27c00fdb4b9b4",
      "b6f4c757959f8850e1299a77c8e5713da78e8ec0"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "3f04db891a353f4b127ed57279279f851c6b4917",
      "commit_date": "2021-02-16T00:08:12Z",
      "author": {
        "login": "sjg20",
        "type": "User",
        "stats": {
          "total_commits": 10097,
          "average_weekly_commits": 9.918467583497053,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 469
        }
      },
      "commit_message": {
        "title": "image: Check for unit addresses in FITs",
        "length": 344,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 65,
        "additions": 57,
        "deletions": 8
      },
      "files": [
        {
          "filename": "common/image-fit.c",
          "status": "modified",
          "additions": 52,
          "deletions": 4,
          "patch": "@@ -1568,6 +1568,34 @@ int fit_image_check_comp(const void *fit, int noffset, uint8_t comp)\n \treturn (comp == image_comp);\n }\n \n+/**\n+ * fdt_check_no_at() - Check for nodes whose names contain '@'\n+ *\n+ * This checks the parent node and all subnodes recursively\n+ *\n+ * @fit: FIT to check\n+ * @parent: Parent node to check\n+ * @return 0 if OK, -EADDRNOTAVAIL is a node has a name containing '@'\n+ */\n+static int fdt_check_no_at(const void *fit, int parent)\n+{\n+\tconst char *name;\n+\tint node;\n+\tint ret;\n+\n+\tname = fdt_get_name(fit, parent, NULL);\n+\tif (!name || strchr(name, '@'))\n+\t\treturn -EADDRNOTAVAIL;\n+\n+\tfdt_for_each_subnode(node, fit, parent) {\n+\t\tret = fdt_check_no_at(fit, node);\n+\t\tif (ret)\n+\t\t\treturn ret;\n+\t}\n+\n+\treturn 0;\n+}\n+\n int fit_check_format(const void *fit, ulong size)\n {\n \tint ret;\n@@ -1589,10 +1617,27 @@ int fit_check_format(const void *fit, ulong size)\n \t\tif (size == IMAGE_SIZE_INVAL)\n \t\t\tsize = fdt_totalsize(fit);\n \t\tret = fdt_check_full(fit, size);\n+\t\tif (ret)\n+\t\t\tret = -EINVAL;\n+\n+\t\t/*\n+\t\t * U-Boot stopped using unit addressed in 2017. Since libfdt\n+\t\t * can match nodes ignoring any unit address, signature\n+\t\t * verification can see the wrong node if one is inserted with\n+\t\t * the same name as a valid node but with a unit address\n+\t\t * attached. Protect against this by disallowing unit addresses.\n+\t\t */\n+\t\tif (!ret && CONFIG_IS_ENABLED(FIT_SIGNATURE)) {\n+\t\t\tret = fdt_check_no_at(fit, 0);\n \n+\t\t\tif (ret) {\n+\t\t\t\tlog_debug(\"FIT check error %d\\n\", ret);\n+\t\t\t\treturn ret;\n+\t\t\t}\n+\t\t}\n \t\tif (ret) {\n \t\t\tlog_debug(\"FIT check error %d\\n\", ret);\n-\t\t\treturn -EINVAL;\n+\t\t\treturn ret;\n \t\t}\n \t}\n \n@@ -1955,10 +2000,13 @@ int fit_image_load(bootm_headers_t *images, ulong addr,\n \tprintf(\"## Loading %s from FIT Image at %08lx ...\\n\", prop_name, addr);\n \n \tbootstage_mark(bootstage_id + BOOTSTAGE_SUB_FORMAT);\n-\tif (fit_check_format(fit, IMAGE_SIZE_INVAL)) {\n-\t\tprintf(\"Bad FIT %s image format!\\n\", prop_name);\n+\tret = fit_check_format(fit, IMAGE_SIZE_INVAL);\n+\tif (ret) {\n+\t\tprintf(\"Bad FIT %s image format! (err=%d)\\n\", prop_name, ret);\n+\t\tif (CONFIG_IS_ENABLED(FIT_SIGNATURE) && ret == -EADDRNOTAVAIL)\n+\t\t\tprintf(\"Signature checking prevents use of unit addresses (@) in nodes\\n\");\n \t\tbootstage_error(bootstage_id + BOOTSTAGE_SUB_FORMAT);\n-\t\treturn -ENOEXEC;\n+\t\treturn ret;\n \t}\n \tbootstage_mark(bootstage_id + BOOTSTAGE_SUB_FORMAT_OK);\n \tif (fit_uname) {"
        },
        {
          "filename": "test/py/tests/test_vboot.py",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -232,8 +232,8 @@ def test_with_algo(sha_algo, padding, sign_options):\n         util.run_and_log(cons, [fit_check_sign, '-f', fit, '-k', dtb])\n \n         if full_test:\n-            # Make sure that U-Boot checks that the config is in the list of hashed\n-            # nodes. If it isn't, a security bypass is possible.\n+            # Make sure that U-Boot checks that the config is in the list of\n+            # hashed nodes. If it isn't, a security bypass is possible.\n             ffit = '%stest.forged.fit' % tmpdir\n             shutil.copyfile(fit, ffit)\n             with open(ffit, 'rb') as fd:\n@@ -263,10 +263,11 @@ def test_with_algo(sha_algo, padding, sign_options):\n             shutil.copyfile(fit, efit)\n             vboot_evil.add_evil_node(fit, efit, evil_kernel, 'kernel@')\n \n+            msg = 'Signature checking prevents use of unit addresses (@) in nodes'\n             util.run_and_log_expect_exception(\n                 cons, [fit_check_sign, '-f', efit, '-k', dtb],\n-                1, 'Node name contains @')\n-            run_bootm(sha_algo, 'evil kernel@', 'Bad Data Hash', False, efit)\n+                1, msg)\n+            run_bootm(sha_algo, 'evil kernel@', msg, False, efit)\n \n         # Create a new properly signed fit and replace header bytes\n         make_fit('sign-configs-%s%s.its' % (sha_algo, padding))"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "292278d6828e6c8c6ae11bc8658586d1acc411d4",
            "date": "2025-01-25T22:27:30Z",
            "author_login": "trini"
          },
          {
            "sha": "1135dc50a3e1192ee6b68e788e716c6548dc7a50",
            "date": "2024-12-16T23:38:53Z",
            "author_login": "sjg20"
          },
          {
            "sha": "bd7883f3467645359f72647f78abffbdd5a236fa",
            "date": "2024-12-14T18:20:23Z",
            "author_login": "sjg20"
          },
          {
            "sha": "dd7138dde7703e10d096c241f27c2c1f75fdd4d0",
            "date": "2024-12-14T18:20:22Z",
            "author_login": "sjg20"
          },
          {
            "sha": "64d5a0550a148c9266f5f66538f0d56bb2278bef",
            "date": "2024-12-14T18:20:21Z",
            "author_login": "sjg20"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": null,
    "description": "The boot loader in Das U-Boot before 2021.04-rc2 mishandles use of unit addresses in a FIT.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-02-17T23:15:13.717",
    "last_modified": "2024-11-21T05:57:23.420",
    "fix_date": "2021-02-16T00:08:12Z"
  },
  "references": [
    {
      "url": "https://github.com/u-boot/u-boot/commit/3f04db891a353f4b127ed57279279f851c6b4917",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/u-boot/u-boot/commit/79af75f7776fc20b0d7eb6afe1e27c00fdb4b9b4",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/u-boot/u-boot/commit/b6f4c757959f8850e1299a77c8e5713da78e8ec0",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/u-boot/u-boot/commit/3f04db891a353f4b127ed57279279f851c6b4917",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/u-boot/u-boot/commit/79af75f7776fc20b0d7eb6afe1e27c00fdb4b9b4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/u-boot/u-boot/commit/b6f4c757959f8850e1299a77c8e5713da78e8ec0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:16.793723",
    "processing_status": "enhanced"
  }
}