{
  "cve_id": "CVE-2021-28793",
  "github_data": {
    "repository": "vscode-restructuredtext/vscode-restructuredtext",
    "fix_commit": "1dd3e878a5559e3dfe0e48f145c90418b208c5af",
    "related_commits": [
      "1dd3e878a5559e3dfe0e48f145c90418b208c5af",
      "1dd3e878a5559e3dfe0e48f145c90418b208c5af"
    ],
    "patch_url": "https://github.com/vscode-restructuredtext/vscode-restructuredtext/commit/1dd3e878a5559e3dfe0e48f145c90418b208c5af.patch",
    "fix_commit_details": {
      "sha": "1dd3e878a5559e3dfe0e48f145c90418b208c5af",
      "commit_date": "2021-04-05T22:39:11Z",
      "author": {
        "login": "lextm",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Patch to address workspace security issue.",
        "length": 42,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 375,
        "additions": 323,
        "deletions": 52
      },
      "files": [
        {
          "filename": "package-lock.json",
          "status": "modified",
          "additions": 23,
          "deletions": 9,
          "patch": "@@ -1287,18 +1287,32 @@\n       }\n     },\n     \"elliptic\": {\n-      \"version\": \"6.5.3\",\n-      \"resolved\": \"https://registry.npmjs.org/elliptic/-/elliptic-6.5.3.tgz\",\n-      \"integrity\": \"sha512-IMqzv5wNQf+E6aHeIqATs0tOLeOTwj1QKbRcS3jBbYkl5oLAserA8yJTT7/VyHUYG91PRmPyeQDObKLPpeS4dw==\",\n+      \"version\": \"6.5.4\",\n+      \"resolved\": \"https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz\",\n+      \"integrity\": \"sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==\",\n       \"dev\": true,\n       \"requires\": {\n-        \"bn.js\": \"^4.4.0\",\n-        \"brorand\": \"^1.0.1\",\n+        \"bn.js\": \"^4.11.9\",\n+        \"brorand\": \"^1.1.0\",\n         \"hash.js\": \"^1.0.0\",\n-        \"hmac-drbg\": \"^1.0.0\",\n-        \"inherits\": \"^2.0.1\",\n-        \"minimalistic-assert\": \"^1.0.0\",\n-        \"minimalistic-crypto-utils\": \"^1.0.0\"\n+        \"hmac-drbg\": \"^1.0.1\",\n+        \"inherits\": \"^2.0.4\",\n+        \"minimalistic-assert\": \"^1.0.1\",\n+        \"minimalistic-crypto-utils\": \"^1.0.1\"\n+      },\n+      \"dependencies\": {\n+        \"bn.js\": {\n+          \"version\": \"4.12.0\",\n+          \"resolved\": \"https://registry.npmjs.org/bn.js/-/bn.js-4.12.0.tgz\",\n+          \"integrity\": \"sha512-c98Bf3tPniI+scsdk237ku1Dc3ujXQTSgyiPUDEOe7tRkhrqridvh8klBv0HCEso1OLOYcHuCv/cS6DNxKH+ZA==\",\n+          \"dev\": true\n+        },\n+        \"inherits\": {\n+          \"version\": \"2.0.4\",\n+          \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\n+          \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\",\n+          \"dev\": true\n+        }\n       }\n     },\n     \"emoji-regex\": {"
        },
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -240,6 +240,11 @@\n         \"command\": \"restructuredtext.preview.toggleLock\",\n         \"title\": \"%restructuredtext.preview.toggleLock.title%\",\n         \"category\": \"reStructuredText\"\n+      },\n+      {\n+        \"command\": \"restructuredtext.workspace.isTrusted.toggle\",\n+        \"title\": \"reStructuredText: Toggle Workspace Trust Flag\",\n+        \"description\": \"Toggle the workspace trust flag. Workspace settings that determine tool locations are disabled by default in untrusted workspaces.\"\n       }\n     ],\n     \"menus\": {"
        },
        {
          "filename": "src/config.ts",
          "status": "added",
          "additions": 151,
          "deletions": 0,
          "patch": "@@ -0,0 +1,151 @@\n+/* eslint-disable @typescript-eslint/no-explicit-any */\n+/*---------------------------------------------------------\n+ * Copyright 2021 The Go Authors. All rights reserved.\n+ * Licensed under the MIT License. See LICENSE in the project root for license information.\n+ *--------------------------------------------------------*/\n+\n+import vscode = require('vscode');\n+import { getFromWorkspaceState, updateWorkspaceState } from './stateUtils';\n+\n+const WORKSPACE_IS_TRUSTED_KEY = 'WORKSPACE_IS_TRUSTED_KEY';\n+const SECURITY_SENSITIVE_CONFIG: string[] = [\n+    'sphinxBuildPath',\n+    'linter.executablePath'\n+];\n+\n+export async function initConfig(ctx: vscode.ExtensionContext) {\n+    const isTrusted = getFromWorkspaceState(WORKSPACE_IS_TRUSTED_KEY, false);\n+    if (isTrusted !== defaultConfig.workspaceIsTrusted()) {\n+        defaultConfig.toggleWorkspaceIsTrusted();\n+    }\n+    ctx.subscriptions.push(vscode.commands.registerCommand('restructuredtext.workspace.isTrusted.toggle', toggleWorkspaceIsTrusted));\n+\n+    if (isTrusted) {\n+        return;\n+    }\n+    const ignored = ignoredWorkspaceConfig(vscode.workspace.getConfiguration('restructuredtext'), SECURITY_SENSITIVE_CONFIG);\n+    if (ignored.length === 0) {\n+        return;\n+    }\n+    const ignoredSettings = ignored.map((x) => `\"restructuredtext.${x}\"`).join(',');\n+    const val = await vscode.window.showWarningMessage(\n+        `Some workspace/folder-level settings (${ignoredSettings}) from the untrusted workspace are disabled ` +\n+        'by default. If this workspace is trusted, explicitly enable the workspace/folder-level settings ' +\n+        'by running the \"reStructuredText: Toggle Workspace Trust Flag\" command.',\n+        'OK',\n+        'Trust This Workspace',\n+        'More Info'\n+    );\n+    switch (val) {\n+        case 'Trust This Workspace':\n+            await toggleWorkspaceIsTrusted();\n+            break;\n+        case 'More Info':\n+            vscode.env.openExternal(\n+                vscode.Uri.parse('https://docs.restructuredtext.net/articles/configuration.html#security')\n+            );\n+            break;\n+        default:\n+            break;\n+    }\n+}\n+\n+function ignoredWorkspaceConfig(cfg: vscode.WorkspaceConfiguration, keys: string[]) {\n+    return keys.filter((key) => {\n+        const inspect = cfg.inspect(key);\n+        return inspect.workspaceValue !== undefined || inspect.workspaceFolderValue !== undefined;\n+    });\n+}\n+\n+async function toggleWorkspaceIsTrusted() {\n+    const v = defaultConfig.toggleWorkspaceIsTrusted();\n+    await updateWorkspaceState(WORKSPACE_IS_TRUSTED_KEY, v);\n+}\n+\n+// reStructuredText extension configuration for a workspace.\n+export class Configuration {\n+    constructor(private _workspaceIsTrusted = false, private getConfiguration = vscode.workspace.getConfiguration) { }\n+\n+    public toggleWorkspaceIsTrusted() {\n+        this._workspaceIsTrusted = !this._workspaceIsTrusted;\n+        return this._workspaceIsTrusted;\n+    }\n+\n+    // returns a Proxied vscode.WorkspaceConfiguration, which prevents\n+    // from using the workspace configuration if the workspace is untrusted.\n+    public get(section: string, uri?: vscode.Uri): vscode.WorkspaceConfiguration {\n+        const cfg = this.getConfiguration(section, uri);\n+        if (section !== 'restructuredtext' || this._workspaceIsTrusted) {\n+            return cfg;\n+        }\n+        return new WrappedConfiguration(cfg);\n+    }\n+\n+    public workspaceIsTrusted(): boolean {\n+        return this._workspaceIsTrusted;\n+    }\n+}\n+\n+const defaultConfig = new Configuration();\n+\n+// Returns the workspace Configuration used by the extension.\n+export function DefaultConfig() {\n+    return defaultConfig;\n+}\n+\n+// wrappedConfiguration wraps vscode.WorkspaceConfiguration.\n+// tslint:disable-next-line: max-classes-per-file\n+class WrappedConfiguration implements vscode.WorkspaceConfiguration {\n+    constructor(private readonly _wrapped: vscode.WorkspaceConfiguration) {\n+        // set getters for direct setting access (e.g. cfg.gopath), but don't overwrite _wrapped.\n+        const desc = Object.getOwnPropertyDescriptors(_wrapped);\n+        for (const prop in desc) {\n+            // TODO(hyangah): find a better way to exclude WrappedConfiguration's members.\n+            // These methods are defined by WrappedConfiguration.\n+            if (typeof prop === 'string' && !['get', 'has', 'inspect', 'update', '_wrapped'].includes(prop)) {\n+                const d = desc[prop];\n+                if (SECURITY_SENSITIVE_CONFIG.includes(prop)) {\n+                    const inspect = this._wrapped.inspect(prop);\n+                    d.value = inspect.globalValue ?? inspect.defaultValue;\n+                }\n+                Object.defineProperty(this, prop, desc[prop]);\n+            }\n+        }\n+    }\n+\n+    public get(section: any, defaultValue?: any) {\n+        if (SECURITY_SENSITIVE_CONFIG.includes(section)) {\n+            const inspect = this._wrapped.inspect(section);\n+            return inspect.globalValue ?? defaultValue ?? inspect.defaultValue;\n+        }\n+        return this._wrapped.get(section, defaultValue);\n+    }\n+    public has(section: string) {\n+        return this._wrapped.has(section);\n+    }\n+    public inspect<T>(section: string) {\n+        return this._wrapped.inspect<T>(section);\n+    }\n+    public update(\n+        section: string,\n+        value: any,\n+        configurationTarget?: boolean | vscode.ConfigurationTarget,\n+        overrideInLanguage?: boolean\n+    ): Thenable<void> {\n+        return this._wrapped.update(section, value, configurationTarget, overrideInLanguage);\n+    }\n+}\n+\n+export function getConfig(section: string, uri?: vscode.Uri) {\n+    if (!uri) {\n+        if (vscode.window.activeTextEditor) {\n+            uri = vscode.window.activeTextEditor.document.uri;\n+        } else {\n+            uri = null;\n+        }\n+    }\n+    return defaultConfig.get(section, uri);\n+}\n+\n+// True if the extension is running in known cloud-based IDEs.\n+export const IsInCloudIDE = process.env.CLOUD_SHELL === 'true' || process.env.CODESPACES === 'true';"
        },
        {
          "filename": "src/extension.ts",
          "status": "modified",
          "additions": 46,
          "deletions": 38,
          "patch": "@@ -9,56 +9,64 @@ import * as commands from './commands/index';\n import { RSTContentProvider } from './features/previewContentProvider';\n import { RSTPreviewManager } from './features/previewManager';\n import { Logger } from './logger';\n-import { ExtensionContentSecurityPolicyArbiter, PreviewSecuritySelector } from './security';\n import { Python } from './python';\n import { RSTEngine } from './rstEngine';\n+import { ExtensionContentSecurityPolicyArbiter, PreviewSecuritySelector } from './security';\n \n import * as listEditing from './features/listEditing';\n+import { rstDocumentSymbolProvider } from './features/rstDocumentSymbolProvider';\n import RstLintingProvider from './features/rstLinter';\n import { underline } from './features/underline';\n import { Configuration } from './features/utils/configuration';\n import RstTransformerStatus from './features/utils/statusBar';\n import * as RstLanguageServer from './rstLsp/extension';\n-import { rstDocumentSymbolProvider } from './features/rstDocumentSymbolProvider';\n+import { setGlobalState, setWorkspaceState } from './stateUtils';\n+import { initConfig } from './config';\n \n-let extensionPath = \"\";\n+let extensionPath = '';\n \n export function getExtensionPath(): string {\n-\treturn extensionPath;\n+    return extensionPath;\n }\n \n export async function activate(context: vscode.ExtensionContext): Promise<{ initializationFinished: Promise<void> }> {\n-\textensionPath = context.extensionPath;\n \n-\tconst logger = new Logger();\n-\tlogger.log('Please visit https://docs.restructuredtext.net to learn how to configure the extension.');\n+    setGlobalState(context.globalState);\n+    setWorkspaceState(context.workspaceState);\n+\n+    await initConfig(context);\n+\n+    extensionPath = context.extensionPath;\n \n-\tconst conflicting = Configuration.getConflictingExtensions();\n-\tfor (const element of conflicting) {\n-\t\tconst found = vscode.extensions.getExtension(element);\n-\t\tif (found) {\n-\t\t\tconst message = `Found conflicting extension ${element}. Please uninstall it.`;\n+    const logger = new Logger();\n+    logger.log('Please visit https://docs.restructuredtext.net to learn how to configure the extension.');\n+\n+    const conflicting = Configuration.getConflictingExtensions();\n+    for (const element of conflicting) {\n+        const found = vscode.extensions.getExtension(element);\n+        if (found) {\n+            const message = `Found conflicting extension ${element}. Please uninstall it.`;\n             logger.log(message);\n-\t\t\tvscode.window.showErrorMessage(message);\n-\t\t}\n-\t}\n+            vscode.window.showErrorMessage(message);\n+        }\n+    }\n \n     await logPlatform(logger);\n-\tconst disableLsp = Configuration.getLanguageServerDisabled();\n+    const disableLsp = Configuration.getLanguageServerDisabled();\n \n     const python: Python = new Python(logger);\n \n-\t// activate language services\n-\tconst rstLspPromise = RstLanguageServer.activate(context, logger, disableLsp, python);\n+    // activate language services\n+    const rstLspPromise = RstLanguageServer.activate(context, logger, disableLsp, python);\n \n     // Section creation support.\n-\tcontext.subscriptions.push(\n-\t\tvscode.commands.registerTextEditorCommand('restructuredtext.features.underline.underline', underline),\n-\t\tvscode.commands.registerTextEditorCommand('restructuredtext.features.underline.underlineReverse',\n-\t\t\t(textEditor, edit) => underline(textEditor, edit, true)),\n-\t);\n+    context.subscriptions.push(\n+        vscode.commands.registerTextEditorCommand('restructuredtext.features.underline.underline', underline),\n+        vscode.commands.registerTextEditorCommand('restructuredtext.features.underline.underlineReverse',\n+            (textEditor, edit) => underline(textEditor, edit, true)),\n+    );\n \n-\t// Linter support\n+    // Linter support\n     if (!Configuration.getLinterDisabled()) {\n         const linter = new RstLintingProvider(logger, python);\n         linter.activate(context.subscriptions);\n@@ -76,7 +84,7 @@ export async function activate(context: vscode.ExtensionContext): Promise<{ init\n \n         vscode.window.onDidChangeActiveTextEditor(status.update, status, context.subscriptions);\n         status.update();\n-\t\n+\n         const cspArbiter = new ExtensionContentSecurityPolicyArbiter(context.globalState, context.workspaceState);\n \n         const engine: RSTEngine = new RSTEngine(python, logger, status);\n@@ -104,7 +112,7 @@ export async function activate(context: vscode.ExtensionContext): Promise<{ init\n             previewManager.updateConfiguration();\n         }));\n     }\n-    \n+\n     // DocumentSymbolProvider Demo, for Outline View Test\n     let disposableRstDSP = vscode.languages.registerDocumentSymbolProvider(\n         { scheme: 'file', language: 'restructuredtext' }, new rstDocumentSymbolProvider()\n@@ -113,23 +121,23 @@ export async function activate(context: vscode.ExtensionContext): Promise<{ init\n \n     listEditing.activate(context);\n \n-\treturn {\n-\t\tinitializationFinished: Promise.all([rstLspPromise])\n-\t\t\t.then((promiseResult) => {\n-\t\t\t\t// This promise resolver simply swallows the result of Promise.all.\n-\t\t\t\t// When we decide we want to expose this level of detail\n-\t\t\t\t// to other extensions then we will design that return type and implement it here.\n-\t\t\t}),\n-\t};\n+    return {\n+        initializationFinished: Promise.all([rstLspPromise])\n+            .then((promiseResult) => {\n+                // This promise resolver simply swallows the result of Promise.all.\n+                // When we decide we want to expose this level of detail\n+                // to other extensions then we will design that return type and implement it here.\n+            }),\n+    };\n }\n \n async function logPlatform(logger: Logger): Promise<void> {\n-\tconst os = require('os');\n+    const os = require('os');\n     let platform = os.platform();\n     logger.log(`OS is ${platform}`);\n-\tif (platform === 'darwin' || platform === 'win32') {\n-\t\treturn;\n-\t}\n+    if (platform === 'darwin' || platform === 'win32') {\n+        return;\n+    }\n \n     const osInfo = require('linux-os-info');\n     const result = await osInfo();"
        },
        {
          "filename": "src/features/utils/configuration.ts",
          "status": "modified",
          "additions": 7,
          "deletions": 5,
          "patch": "@@ -1,10 +1,11 @@\n 'use strict';\n \n-import {\n-    Uri, workspace, WorkspaceFolder, extensions, WorkspaceConfiguration\n-} from 'vscode';\n import * as fs from 'fs';\n import * as path from 'path';\n+import {\n+    extensions, Uri, workspace, WorkspaceConfiguration, WorkspaceFolder\n+} from 'vscode';\n+import { getConfig } from '../../config';\n import { Constants } from './constants';\n \n export class Configuration {\n@@ -154,13 +155,14 @@ export class Configuration {\n     private static loadAnySetting<T>(\n         configSection: string, defaultValue: T, resource: Uri, header: string = 'restructuredtext',\n     ): T {\n-        return workspace.getConfiguration(header, resource).get(configSection, defaultValue);\n+        // return workspace.getConfiguration(header, resource).get(configSection, defaultValue);\n+        return getConfig(header, resource).get(configSection, defaultValue);\n     }\n \n     private static async saveAnySetting<T>(\n         configSection: string, value: T, resource: Uri, header: string = 'restructuredtext',\n     ): Promise<T> {\n-        await workspace.getConfiguration(header, resource).update(configSection, value);\n+        await getConfig(header, resource).update(configSection, value);\n         return value;\n     }\n "
        },
        {
          "filename": "src/stateUtils.ts",
          "status": "added",
          "additions": 91,
          "deletions": 0,
          "patch": "@@ -0,0 +1,91 @@\n+/* eslint-disable @typescript-eslint/no-explicit-any */\n+/*---------------------------------------------------------\n+ * Copyright (C) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See LICENSE in the project root for license information.\n+ *--------------------------------------------------------*/\n+\n+import vscode = require('vscode');\n+\n+let globalState: vscode.Memento;\n+let workspaceState: vscode.Memento;\n+\n+export function getFromGlobalState(key: string, defaultValue?: any): any {\n+\tif (!globalState) {\n+\t\treturn defaultValue;\n+\t}\n+\treturn globalState.get(key, defaultValue);\n+}\n+\n+export function updateGlobalState(key: string, value: any) {\n+\tif (!globalState) {\n+\t\treturn;\n+\t}\n+\treturn globalState.update(key, value);\n+}\n+\n+export function setGlobalState(state: vscode.Memento) {\n+\tglobalState = state;\n+}\n+\n+export function getGlobalState() {\n+\treturn globalState;\n+}\n+\n+export function resetGlobalState() {\n+\tresetStateQuickPick(globalState, updateGlobalState);\n+}\n+\n+export function getFromWorkspaceState(key: string, defaultValue?: any) {\n+\tif (!workspaceState) {\n+\t\treturn defaultValue;\n+\t}\n+\treturn workspaceState.get(key, defaultValue);\n+}\n+\n+export function updateWorkspaceState(key: string, value: any) {\n+\tif (!workspaceState) {\n+\t\treturn;\n+\t}\n+\treturn workspaceState.update(key, value);\n+}\n+\n+export function setWorkspaceState(state: vscode.Memento) {\n+\tworkspaceState = state;\n+}\n+\n+export function getWorkspaceState(): vscode.Memento {\n+\treturn workspaceState;\n+}\n+\n+export function resetWorkspaceState() {\n+\tresetStateQuickPick(workspaceState, updateWorkspaceState);\n+}\n+\n+export function getMementoKeys(state: vscode.Memento): string[] {\n+\tif (!state) {\n+\t\treturn [];\n+\t}\n+\t// tslint:disable-next-line: no-empty\n+\tif ((state as any)._value) {\n+\t\tconst keys = Object.keys((state as any)._value);\n+\t\t// Filter out keys with undefined values, so they are not shown\n+\t\t// in the quick pick menu.\n+\t\treturn keys.filter((key) => state.get(key) !== undefined);\n+\t}\n+\treturn [];\n+}\n+\n+async function resetStateQuickPick(state: vscode.Memento, updateFn: (key: string, value: any) => {}) {\n+\tconst items = await vscode.window.showQuickPick(getMementoKeys(state), {\n+\t\tcanPickMany: true,\n+\t\tplaceHolder: 'Select the keys to reset.'\n+\t});\n+\tresetItemsState(items, updateFn);\n+}\n+\n+export function resetItemsState(items: string[], updateFn: (key: string, value: any) => {}) {\n+\tif (!items) {\n+\t\treturn;\n+\t}\n+\titems.forEach((item) => updateFn(item, undefined));\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 4,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ad9570c41fca49800c73f1adda821b338c5450c1",
            "date": "2024-12-05T01:33:27Z",
            "author_login": "lextm"
          },
          {
            "sha": "66c0fd109668ddc4738acd318c6fa99dc43621f5",
            "date": "2024-12-05T01:30:55Z",
            "author_login": "lextm"
          },
          {
            "sha": "3e337b10d9eb08753b6a1d2dbc3f06d083dcadca",
            "date": "2024-10-29T00:59:35Z",
            "author_login": "lextm"
          },
          {
            "sha": "fbbfe3251e62ff086ffebe19f0e9768c8a4fcf53",
            "date": "2024-10-29T00:59:15Z",
            "author_login": "lextm"
          },
          {
            "sha": "7b683c9468ae9de9e1f5dfa05fd0cf110e6336b6",
            "date": "2024-10-29T00:33:09Z",
            "author_login": "lextm"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-863",
    "description": "vscode-restructuredtext before 146.0.0 contains an incorrect access control vulnerability, where a crafted project folder could execute arbitrary binaries via crafted workspace configuration.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-04-20T13:15:12.493",
    "last_modified": "2024-11-21T06:00:12.807",
    "fix_date": "2021-04-05T22:39:11Z"
  },
  "references": [
    {
      "url": "https://github.com/vscode-restructuredtext/vscode-restructuredtext/commit/1dd3e878a5559e3dfe0e48f145c90418b208c5af",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vscode-restructuredtext/vscode-restructuredtext/releases",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vscode-restructuredtext/vscode-restructuredtext/releases/tag/147.0.0",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuln.ryotak.me/advisories/37",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vscode-restructuredtext/vscode-restructuredtext/commit/1dd3e878a5559e3dfe0e48f145c90418b208c5af",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vscode-restructuredtext/vscode-restructuredtext/releases",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vscode-restructuredtext/vscode-restructuredtext/releases/tag/147.0.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuln.ryotak.me/advisories/37",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:33.545296",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vscode-restructuredtext",
    "owner": "vscode-restructuredtext",
    "created_at": "2015-11-25T13:07:01Z",
    "updated_at": "2025-01-12T05:15:51Z",
    "pushed_at": "2024-12-05T01:37:34Z",
    "size": 3830,
    "stars": 350,
    "forks": 92,
    "open_issues": 14,
    "watchers": 350,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "TypeScript": 179140,
      "Python": 12708,
      "HTML": 9986,
      "JavaScript": 1419,
      "Batchfile": 192
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:32:05.491768"
  }
}