{
  "cve_id": "CVE-2021-29418",
  "github_data": {
    "repository": "rs/node-netmask",
    "fix_commit": "3f19a056c4eb808ea4a29f234274c67bc5a848f4",
    "related_commits": [
      "3f19a056c4eb808ea4a29f234274c67bc5a848f4",
      "3f19a056c4eb808ea4a29f234274c67bc5a848f4"
    ],
    "patch_url": "https://github.com/rs/node-netmask/commit/3f19a056c4eb808ea4a29f234274c67bc5a848f4.patch",
    "fix_commit_details": {
      "sha": "3f19a056c4eb808ea4a29f234274c67bc5a848f4",
      "commit_date": "2021-03-29T11:12:05Z",
      "author": {
        "login": "rs",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Rewrite byte parsing in full JS without depending on parseInt",
        "length": 178,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 67,
        "additions": 50,
        "deletions": 17
      },
      "files": [
        {
          "filename": "lib/netmask.coffee",
          "status": "modified",
          "additions": 47,
          "deletions": 17,
          "patch": "@@ -6,27 +6,57 @@ long2ip = (long) ->\n     return [a, b, c, d].join('.')\n \n ip2long = (ip) ->\n-    b = (ip + '').split('.');\n-    if b.length is 0 or b.length > 4 then throw new Error('Invalid IP')\n-    for byte, i in b\n-        if byte and byte[0] == '0'\n-            if byte.length > 2 and (byte[1] == 'x' or byte[1] == 'x')\n-                # make sure 0x prefixed bytes are parsed as hex\n-                byte = parseInt(byte, 16)\n-            else\n-                # make sure 0 prefixed bytes are parsed as octal\n-                byte = parseInt(byte, 8)\n-        else if byte and (byte[0] == ' ' or byte[byte.length-1] == ' ')\n-            throw new Error('Invalid IP')\n-        else\n-            byte = parseInt(byte, 10)\n-        if isNaN(byte) then throw new Error(\"Invalid byte: #{byte}\")\n-        if byte < 0 or byte > 255 then throw new Error(\"Invalid byte: #{byte}\")\n-        b[i] = byte\n+    b = []\n+    for i in [0..3]\n+        if ip.length == 0\n+            break\n+        if i > 0\n+            if ip[0] != '.'\n+                throw new Error('Invalid IP')\n+            ip = ip.substring(1)\n+        [n, c] = atob(ip)\n+        ip = ip.substring(c)\n+        b.push(n)\n+    if ip.length != 0\n+        throw new Error('Invalid IP')\n     while b.length < 4\n         b.unshift(0)\n     return (b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3]) >>> 0\n \n+atob = (s) ->\n+    n = 0\n+    base = 10\n+    dmax = '9'\n+    i = 0\n+    if s.length > 1 and s[i] == '0'\n+        if s[i+1] == 'x' or s[i+1] == 'X'\n+            i+=2\n+            base = 16\n+        else if '0' <= s[i+1] and s[i+1] <= '7'\n+            i++\n+            base = 8\n+            dmax = '7'\n+    start = i\n+    chr = (b) -> return b.charCodeAt(0)\n+    while s.length > 0\n+        if '0' <= s[i] and s[i] <= dmax\n+            n = n*base + (chr(s[i])-chr('0'))\n+        else if base == 16\n+            if 'a' <= s[i] and s[i] <= 'f'\n+                n = n*base + (10+chr(s[i])-chr('a'))\n+            else if 'A' <= s[i] and s[i] <= 'F'\n+                n = n*base + (10+chr(s[i])-chr('A'))\n+            else\n+                break\n+        else\n+            break\n+        if n > 0xFF\n+            throw new Error('byte overflow')\n+        i++\n+    if i == start\n+        throw new Error('empty octet')\n+    return [n, i]\n+\n class Netmask\n     constructor: (net, mask) ->\n         throw new Error(\"Missing `net' parameter\") unless typeof net is 'string'"
        },
        {
          "filename": "test/badnets.coffee",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -35,11 +35,14 @@ vows.describe('IPs with bytes greater than 255')\n vows.describe('Invalid IP format')\n     .addBatch\n         ' 1.2.3.4': shouldFailWithError 'Invalid net'\n+        '  1.2.3.4': shouldFailWithError 'Invalid net'\n         '1. 2.3.4': shouldFailWithError 'Invalid net'\n         '1.2. 3.4': shouldFailWithError 'Invalid net'\n         '1.2.3. 4': shouldFailWithError 'Invalid net'\n         '1.2.3.4 ': shouldFailWithError 'Invalid net'\n         '1 .2.3.4': shouldFailWithError 'Invalid net'\n+        '018.0.0.0': shouldFailWithError 'Invalid net'\n+        '0xfg.0.0.0': shouldFailWithError 'Invalid net'\n     .export(module)\n \n vows.describe('Ranges that are a power-of-two big, but are not legal blocks')"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "879e53d17bf290443ccc7f09389eb0edbdf92f3c",
            "date": "2024-02-15T23:34:50Z",
            "author_login": "rs"
          },
          {
            "sha": "4bfde0be877bbb0118f7ce895fc21be987eaa377",
            "date": "2024-02-15T23:16:48Z",
            "author_login": "ai"
          },
          {
            "sha": "d496bbc5035fbe0997b78b545095c0c234c699b4",
            "date": "2023-10-23T22:28:16Z",
            "author_login": "rs"
          },
          {
            "sha": "09e7029339b12b98c1d59a3f08914d6615a780c4",
            "date": "2023-10-23T18:08:55Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "c2770574ef7b324a0ce383fa81600e8dcf5ee492",
            "date": "2023-10-03T22:30:48Z",
            "author_login": "rs"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-20",
    "description": "The netmask package before 2.0.1 for Node.js mishandles certain unexpected characters in an IP address string, such as an octal digit of 9. This (in some situations) allows attackers to bypass access control that is based on IP addresses. NOTE: this issue exists because of an incomplete fix for CVE-2021-28918.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-03-30T07:15:13.113",
    "last_modified": "2024-11-21T06:01:03.680",
    "fix_date": "2021-03-29T11:12:05Z"
  },
  "references": [
    {
      "url": "https://github.com/rs/node-netmask/commit/3f19a056c4eb808ea4a29f234274c67bc5a848f4",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20210604-0001/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuln.ryotak.me/advisories/6",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rs/node-netmask/commit/3f19a056c4eb808ea4a29f234274c67bc5a848f4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20210604-0001/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuln.ryotak.me/advisories/6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:33.502476",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "node-netmask",
    "owner": "rs",
    "created_at": "2012-04-05T06:51:16Z",
    "updated_at": "2024-10-27T02:21:47Z",
    "pushed_at": "2024-02-15T23:34:51Z",
    "size": 57,
    "stars": 254,
    "forks": 43,
    "open_issues": 10,
    "watchers": 254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "CoffeeScript": 14902,
      "JavaScript": 4292
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:30:25.565859"
  }
}