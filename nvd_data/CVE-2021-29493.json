{
  "cve_id": "CVE-2021-29493",
  "github_data": {
    "repository": "kennnyshiwa/kennnyshiwa-cogs",
    "fix_commit": "5a84d60018468e5c0346f7ee74b2b4650a6dade7",
    "related_commits": [
      "5a84d60018468e5c0346f7ee74b2b4650a6dade7",
      "5a84d60018468e5c0346f7ee74b2b4650a6dade7"
    ],
    "patch_url": "https://github.com/kennnyshiwa/kennnyshiwa-cogs/commit/5a84d60018468e5c0346f7ee74b2b4650a6dade7.patch",
    "fix_commit_details": {
      "sha": "5a84d60018468e5c0346f7ee74b2b4650a6dade7",
      "commit_date": "2021-05-06T01:13:11Z",
      "author": {
        "login": "kennnyshiwa",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix some shit",
        "length": 13,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 244,
        "additions": 158,
        "deletions": 86
      },
      "files": [
        {
          "filename": "tickets/core.py",
          "status": "modified",
          "additions": 132,
          "deletions": 62,
          "patch": "@@ -4,8 +4,19 @@\n import random\n \n \n-class TicketsCore:\n+class SafeMember:\n+    def __init__(self, member: discord.Member):\n+        self.name = member.name\n+        self.mention = member.mention\n+\n+    def __str__(self):\n+        return self.name\n+\n+    def __getattr__(self, name):\n+        return \"\"\n \n+\n+class TicketsCore:\n     async def red_delete_data_for_user(self, **kwargs):\n         \"\"\" Nothing to delete \"\"\"\n         return\n@@ -15,53 +26,78 @@ def __init__(self, bot):\n \n         self.config = Config.get_conf(self, identifier=2134287593)\n         default_guild = {\n-            'category': None,\n-            'closed_category': None,\n-            'ticket_role': None,\n-            'default_message_ticket_channel': None,\n-            'sessions': {}\n+            \"category\": None,\n+            \"closed_category\": None,\n+            \"ticket_role\": None,\n+            \"default_message_ticket_channel\": None,\n+            \"sessions\": {},\n         }\n         self.config.register_guild(**default_guild)\n \n-        self.ticket_info_format = '\\n\\n**[{datetime}]** [{author}]\\n{information}'\n+        self.ticket_info_format = \"\\n\\n**[{datetime}]** [{author}]\\n{information}\"\n \n     async def create_ticket(self, context):\n         guild = context.guild\n         author = context.author\n \n-        ticket_role = [role for role in guild.roles if await self.config.guild(guild).ticket_role() == role.id]\n+        ticket_role = [\n+            role\n+            for role in guild.roles\n+            if await self.config.guild(guild).ticket_role() == role.id\n+        ]\n \n         if ticket_role:\n             ticket_role = ticket_role[0]\n         category_channel = await self.config.guild(guild).category()\n-        default_message_ticket_channel = await self.config.guild(guild).default_message_ticket_channel()\n-\n-        if category_channel and category_channel in [category.id for category in guild.categories]:\n-            n1 = 10**10\n+        default_message_ticket_channel = await self.config.guild(\n+            guild\n+        ).default_message_ticket_channel()\n+\n+        if category_channel and category_channel in [\n+            category.id for category in guild.categories\n+        ]:\n+            n1 = 10 ** 10\n             n2 = n1 * 10 - 1\n             ticket_id = int(random.randint(n1, n2))\n-            ticket_channel = await guild.create_text_channel('{}-{}'.format(author.display_name, ticket_id),\n-                                                             category=self.bot.get_channel(category_channel))\n-\n-            await ticket_channel.set_permissions(author, read_messages=True, send_messages=True)\n-            await ticket_channel.set_permissions(guild.me, read_messages=True, send_messages=True, manage_channels=True)\n-\n-            await ticket_channel.edit(topic=self.ticket_info_format.format(ticket=ticket_id,\n-                                      datetime=datetime.utcnow().strftime('%d/%m/%Y %H:%M:%S'),\n-                                      author=author.display_name,\n-                                      information='Ticket opened'))\n+            ticket_channel = await guild.create_text_channel(\n+                \"{}-{}\".format(author.display_name, ticket_id),\n+                category=self.bot.get_channel(category_channel),\n+            )\n+\n+            await ticket_channel.set_permissions(\n+                author, read_messages=True, send_messages=True\n+            )\n+            await ticket_channel.set_permissions(\n+                guild.me, read_messages=True, send_messages=True, manage_channels=True\n+            )\n+\n+            await ticket_channel.edit(\n+                topic=self.ticket_info_format.format(\n+                    ticket=ticket_id,\n+                    datetime=datetime.utcnow().strftime(\"%d/%m/%Y %H:%M:%S\"),\n+                    author=author.display_name,\n+                    information=\"Ticket opened\",\n+                )\n+            )\n \n             if default_message_ticket_channel:\n-                await ticket_channel.send(default_message_ticket_channel.format(member=author,\n-                                                                                channel=ticket_channel,\n-                                                                                origin=context.channel,\n-                                                                                ticket_role=ticket_role))\n+                try:\n+                    await ticket_channel.send(\n+                        default_message_ticket_channel.format(\n+                            member=SafeMember(author),\n+                            channel=ticket_channel,\n+                            origin=context.channel,\n+                            ticket_role=ticket_role,\n+                        )\n+                    )\n+                except:\n+                    return \"Oops there has been an unexpected error with your new ticket message. Please contact the bot owner for assistance\"\n \n             async with self.config.guild(guild).sessions() as session:\n-                    session.update({ticket_channel.id: author.id})\n+                session.update({ticket_channel.id: author.id})\n \n         else:\n-            return 'Naughty! You need to run the setup first.'\n+            return \"Naughty! You need to run the setup first.\"\n \n     async def update_ticket(self, context, status):\n         try:\n@@ -75,15 +111,20 @@ async def update_ticket(self, context, status):\n \n         sessions = await self.config.guild(guild).sessions()\n \n-        if str(channel.id) in sessions and await self.config.guild(guild).ticket_role() in [role.id for role in author.roles]:\n-\n-            ticket_id = str(channel.name).split('-')[1]\n-            await channel.edit(topic=channel.topic+self.ticket_info_format.format(\n-                                ticket=ticket_id,\n-                                datetime=datetime.utcnow().strftime('%d/%m/%Y %H:%M:%S'),\n-                                author=author.display_name,\n-                                information=status)\n-                               )\n+        if str(channel.id) in sessions and await self.config.guild(\n+            guild\n+        ).ticket_role() in [role.id for role in author.roles]:\n+\n+            ticket_id = str(channel.name).split(\"-\")[1]\n+            await channel.edit(\n+                topic=channel.topic\n+                + self.ticket_info_format.format(\n+                    ticket=ticket_id,\n+                    datetime=datetime.utcnow().strftime(\"%d/%m/%Y %H:%M:%S\"),\n+                    author=author.display_name,\n+                    information=status,\n+                )\n+            )\n \n     async def close_ticket(self, context):\n         try:\n@@ -98,65 +139,94 @@ async def close_ticket(self, context):\n         sessions = await self.config.guild(guild).sessions()\n \n         if str(channel.id) not in sessions:\n-            return await channel.send(\"Make sure you are doing this within the ticket channel that you want to close.\")\n-        if await self.config.guild(guild).ticket_role() not in [role.id for role in author.roles]:\n-            return await channel.send(\"You do not have the proper role to manage tickets\")\n+            return await channel.send(\n+                \"Make sure you are doing this within the ticket channel that you want to close.\"\n+            )\n+        if await self.config.guild(guild).ticket_role() not in [\n+            role.id for role in author.roles\n+        ]:\n+            return await channel.send(\n+                \"You do not have the proper role to manage tickets\"\n+            )\n         else:\n             member = guild.get_member(sessions[str(channel.id)])\n-            ticket_id = str(channel.name).split('-')[1]\n+            ticket_id = str(channel.name).split(\"-\")[1]\n \n             closed_category = await self.config.guild(guild).closed_category()\n             closed_category = self.bot.get_channel(closed_category)\n \n-            await channel.set_permissions(member, read_messages=True, send_messages=False)\n-            await channel.edit(category=closed_category,\n-                               topic=channel.topic+self.ticket_info_format.format(\n-                                    ticket=ticket_id,\n-                                    datetime=datetime.utcnow().strftime('%d/%m/%Y %H:%M:%S'),\n-                                    author=author.display_name,\n-                                    information='Ticket closed'))\n+            await channel.set_permissions(\n+                member, read_messages=True, send_messages=False\n+            )\n+            await channel.edit(\n+                category=closed_category,\n+                topic=channel.topic\n+                + self.ticket_info_format.format(\n+                    ticket=ticket_id,\n+                    datetime=datetime.utcnow().strftime(\"%d/%m/%Y %H:%M:%S\"),\n+                    author=author.display_name,\n+                    information=\"Ticket closed\",\n+                ),\n+            )\n \n             async with self.config.guild(guild).sessions() as session:\n-                    session.pop(channel.id, None)\n+                session.pop(channel.id, None)\n \n     async def purge_tickets(self, context):\n         try:\n             guild = context.guild\n-            closed_channels = [channel for channel in guild.channels if channel.category_id == await self.config.guild(guild).closed_category()]\n+            closed_channels = [\n+                channel\n+                for channel in guild.channels\n+                if channel.category_id\n+                == await self.config.guild(guild).closed_category()\n+            ]\n             for channel in closed_channels:\n                 await channel.delete()\n \n-            return 'All closed tickets removed!'\n+            return \"All closed tickets removed!\"\n         except discord.Forbidden:\n-            return 'I need permissions to manage channels.'\n+            return \"I need permissions to manage channels.\"\n \n     async def set_default_message_ticket_channel(self, context, message):\n         guild = context.guild\n \n         await self.config.guild(guild).default_message_ticket_channel.set(message)\n \n-        return 'Your default message has been set.'\n+        return \"Your default message has been set.\"\n \n     async def automatic_setup(self, context):\n         guild = context.guild\n \n         try:\n             overwrites = {\n-                guild.default_role: discord.PermissionOverwrite(send_messages=False, read_messages=False),\n+                guild.default_role: discord.PermissionOverwrite(\n+                    send_messages=False, read_messages=False\n+                ),\n             }\n \n-            category_channel = await guild.create_category('Tickets', overwrites=overwrites)\n-            closed_category_channel = await guild.create_category('Closed Tickets', overwrites=overwrites)\n+            category_channel = await guild.create_category(\n+                \"Tickets\", overwrites=overwrites\n+            )\n+            closed_category_channel = await guild.create_category(\n+                \"Closed Tickets\", overwrites=overwrites\n+            )\n \n-            ticket_role = await guild.create_role(name='Ticket')\n+            ticket_role = await guild.create_role(name=\"Ticket\")\n \n-            await category_channel.set_permissions(ticket_role, read_messages=True, send_messages=True)\n-            await closed_category_channel.set_permissions(ticket_role, read_messages=True, send_messages=True)\n+            await category_channel.set_permissions(\n+                ticket_role, read_messages=True, send_messages=True\n+            )\n+            await closed_category_channel.set_permissions(\n+                ticket_role, read_messages=True, send_messages=True\n+            )\n \n             await self.config.guild(guild).category.set(category_channel.id)\n-            await self.config.guild(guild).closed_category.set(closed_category_channel.id)\n+            await self.config.guild(guild).closed_category.set(\n+                closed_category_channel.id\n+            )\n             await self.config.guild(guild).ticket_role.set(ticket_role.id)\n \n-            return ':tada: Fabulous! You\\'re all done! Now add the `Ticket` role to anyone who you deem good enough to handle tickets. And if you care, you can change the name of the role and category if you _really_ want to.'\n+            return \":tada: Fabulous! You're all done! Now add the `Ticket` role to anyone who you deem good enough to handle tickets. And if you care, you can change the name of the role and category if you _really_ want to.\"\n         except discord.Forbidden:\n-            return 'That didn\\'t go well... I need permissions to manage channels and manage roles. :rolling_eyes:'\n+            return \"That didn't go well... I need permissions to manage channels and manage roles. :rolling_eyes:\""
        },
        {
          "filename": "tickets/tickets.py",
          "status": "modified",
          "additions": 26,
          "deletions": 24,
          "patch": "@@ -1,71 +1,73 @@\n from redbot.core import commands\n from .core import TicketsCore\n+import re\n \n BaseCog = getattr(commands, \"Cog\", object)\n \n+\n class Tickets(BaseCog):\n     def __init__(self, bot):\n         self.bot = bot\n         self.core = TicketsCore(bot)\n \n-    @commands.group(name='ticket')\n+    @commands.group(name=\"ticket\")\n     async def ticket(self, context):\n-        '''\n+        \"\"\"\n         Tickets!\n-        '''\n+        \"\"\"\n \n-    @ticket.command(name='new')\n+    @ticket.command(name=\"new\")\n     async def ticket_new(self, context):\n-        '''\n+        \"\"\"\n         Create a new ticket\n-        '''\n+        \"\"\"\n         if context.invoked_subcommand is None:\n             message = await self.core.create_ticket(context)\n             if message:\n                 await context.send(message)\n \n-    @ticket.command(name='update')\n+    @ticket.command(name=\"update\")\n     async def ticket_update(self, context, *, status: str):\n-        '''\n+        \"\"\"\n         Update the status of a ticket\n-        '''\n+        \"\"\"\n         await self.core.update_ticket(context, status)\n \n-    @ticket.command(name='close')\n+    @ticket.command(name=\"close\")\n     async def ticket_close(self, context):\n-        '''\n+        \"\"\"\n         Close a ticket, must be run in the ticket channel you want to close\n-        '''\n+        \"\"\"\n         await self.core.close_ticket(context)\n \n-    @ticket.group(name='set')\n+    @ticket.group(name=\"set\")\n     @commands.has_permissions(administrator=True)\n     async def ticket_set(self, context):\n-        '''\n+        \"\"\"\n         Settings\n-        '''\n+        \"\"\"\n \n-    @ticket_set.command(name='purge')\n+    @ticket_set.command(name=\"purge\")\n     async def ticket_set_purge(self, context):\n-        '''\n+        \"\"\"\n         Delete all closed tickets\n-        '''\n+        \"\"\"\n         message = await self.core.purge_tickets(context)\n         await context.send(message)\n \n-    @ticket_set.command(name='message')\n+    @ticket_set.command(name=\"message\")\n     @commands.has_permissions(administrator=True)\n     async def ticket_set_message(self, context, *, message: str):\n-        '''\n+        \"\"\"\n         Set the default message when a new ticket has been created (markdown safe)\n-        '''\n+        \"\"\"\n         message = await self.core.set_default_message_ticket_channel(context, message)\n         await context.send(message)\n \n-    @ticket_set.command(name='setup')\n+    @ticket_set.command(name=\"setup\")\n     async def ticket_setup(self, context):\n-        '''\n+        \"\"\"\n         Automatic setup, will create two categories for open and closed tickets, and a ticket role for people to be able to manage tickets.\n-        '''\n+        \"\"\"\n         message = await self.core.automatic_setup(context)\n         await context.send(message)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c28552b440c5cbef537b2759c81d49bde155dec3",
            "date": "2021-05-27T03:19:21Z",
            "author_login": "kennnyshiwa"
          },
          {
            "sha": "86911bfe615fdc5832e9e7e7930637d0b6a8a9c8",
            "date": "2021-05-06T01:13:17Z",
            "author_login": "kennnyshiwa"
          },
          {
            "sha": "5a84d60018468e5c0346f7ee74b2b4650a6dade7",
            "date": "2021-05-06T01:13:11Z",
            "author_login": "kennnyshiwa"
          },
          {
            "sha": "619b89930e4ac4a0d8a9c701daf08f4400a54b05",
            "date": "2021-04-14T11:31:03Z",
            "author_login": "kennnyshiwa"
          },
          {
            "sha": "e0757362fb427dcb1a8eaa10534f3fe81deb0b30",
            "date": "2021-04-12T01:32:46Z",
            "author_login": "issy"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-94",
    "description": "Kennnyshiwa-cogs contains cogs for Red Discordbot. An RCE exploit has been found in the Tickets module of kennnyshiwa-cogs. This exploit allows discord users to craft a message that can reveal sensitive and harmful information. Users can upgrade to version 5a84d60018468e5c0346f7ee74b2b4650a6dade7 to receive a patch or, as a workaround, unload tickets to render the exploit unusable.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-05-06T20:15:09.867",
    "last_modified": "2024-11-21T06:01:15.033",
    "fix_date": "2021-05-06T01:13:11Z"
  },
  "references": [
    {
      "url": "https://github.com/kennnyshiwa/kennnyshiwa-cogs/commit/5a84d60018468e5c0346f7ee74b2b4650a6dade7",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/kennnyshiwa/kennnyshiwa-cogs/security/advisories/GHSA-f4j2-2cwr-h473",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/kennnyshiwa/kennnyshiwa-cogs/commit/5a84d60018468e5c0346f7ee74b2b4650a6dade7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/kennnyshiwa/kennnyshiwa-cogs/security/advisories/GHSA-f4j2-2cwr-h473",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:57.069025",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "kennnyshiwa-cogs",
    "owner": "kennnyshiwa",
    "created_at": "2019-02-24T18:53:59Z",
    "updated_at": "2024-01-24T13:26:07Z",
    "pushed_at": "2022-05-25T21:20:29Z",
    "size": 297,
    "stars": 19,
    "forks": 16,
    "open_issues": 11,
    "watchers": 19,
    "has_security_policy": false,
    "default_branch": "v3-cogs",
    "protected_branches": [],
    "languages": {
      "Python": 119290
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T17:15:48.530402"
  }
}