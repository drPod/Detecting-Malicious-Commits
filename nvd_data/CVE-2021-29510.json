{
  "cve_id": "CVE-2021-29510",
  "github_data": {
    "repository": "samuelcolvin/pydantic",
    "fix_commit": "7e83fdd2563ffac081db7ecdf1affa65ef38c468",
    "related_commits": [
      "7e83fdd2563ffac081db7ecdf1affa65ef38c468",
      "7e83fdd2563ffac081db7ecdf1affa65ef38c468"
    ],
    "patch_url": "https://github.com/samuelcolvin/pydantic/commit/7e83fdd2563ffac081db7ecdf1affa65ef38c468.patch",
    "fix_commit_details": {
      "sha": "7e83fdd2563ffac081db7ecdf1affa65ef38c468",
      "commit_date": "2021-05-11T17:08:48Z",
      "author": {
        "login": "samuelcolvin",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-5jqp-qgf6-3pvh",
        "length": 149,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 55,
        "additions": 51,
        "deletions": 4
      },
      "files": [
        {
          "filename": "changes/2776-samuelcolvin.md",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -0,0 +1,2 @@\n+**Security fix:** Fix `date` and `datetime` parsing so passing either `'infinity'` or `float('inf')` \n+(or their negative values) does not cause an infinite loop."
        },
        {
          "filename": "pydantic/datetime_parse.py",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -58,6 +58,8 @@\n # if greater than this, the number is in ms, if less than or equal it's in seconds\n # (in seconds this is 11th October 2603, in ms it's 20th August 1970)\n MS_WATERSHED = int(2e10)\n+# slightly more than datetime.max in ns - (datetime.max - EPOCH).total_seconds() * 1e9\n+MAX_NUMBER = int(3e20)\n StrBytesIntFloat = Union[str, bytes, int, float]\n \n \n@@ -73,6 +75,11 @@ def get_numeric(value: StrBytesIntFloat, native_expected_type: str) -> Union[Non\n \n \n def from_unix_seconds(seconds: Union[int, float]) -> datetime:\n+    if seconds > MAX_NUMBER:\n+        return datetime.max\n+    elif seconds < -MAX_NUMBER:\n+        return datetime.min\n+\n     while abs(seconds) > MS_WATERSHED:\n         seconds /= 1000\n     dt = EPOCH + timedelta(seconds=seconds)"
        },
        {
          "filename": "tests/test_datetime_parse.py",
          "status": "modified",
          "additions": 42,
          "deletions": 4,
          "patch": "@@ -42,11 +42,20 @@ def create_tz(minutes):\n         (1_549_316_052_104, date(2019, 2, 4)),  # nowish in ms\n         (1_549_316_052_104_324, date(2019, 2, 4)),  # nowish in \u03bcs\n         (1_549_316_052_104_324_096, date(2019, 2, 4)),  # nowish in ns\n+        ('infinity', date(9999, 12, 31)),\n+        ('inf', date(9999, 12, 31)),\n+        (float('inf'), date(9999, 12, 31)),\n+        ('infinity ', date(9999, 12, 31)),\n+        (int('1' + '0' * 100), date(9999, 12, 31)),\n+        (1e1000, date(9999, 12, 31)),\n+        ('-infinity', date(1, 1, 1)),\n+        ('-inf', date(1, 1, 1)),\n+        ('nan', ValueError),\n     ],\n )\n def test_date_parsing(value, result):\n-    if result == errors.DateError:\n-        with pytest.raises(errors.DateError):\n+    if type(result) == type and issubclass(result, Exception):\n+        with pytest.raises(result):\n             parse_date(value)\n     else:\n         assert parse_date(value) == result\n@@ -123,11 +132,19 @@ def test_time_parsing(value, result):\n         (1_549_316_052_104, datetime(2019, 2, 4, 21, 34, 12, 104_000, tzinfo=timezone.utc)),  # nowish in ms\n         (1_549_316_052_104_324, datetime(2019, 2, 4, 21, 34, 12, 104_324, tzinfo=timezone.utc)),  # nowish in \u03bcs\n         (1_549_316_052_104_324_096, datetime(2019, 2, 4, 21, 34, 12, 104_324, tzinfo=timezone.utc)),  # nowish in ns\n+        ('infinity', datetime(9999, 12, 31, 23, 59, 59, 999999)),\n+        ('inf', datetime(9999, 12, 31, 23, 59, 59, 999999)),\n+        ('inf ', datetime(9999, 12, 31, 23, 59, 59, 999999)),\n+        (1e50, datetime(9999, 12, 31, 23, 59, 59, 999999)),\n+        (float('inf'), datetime(9999, 12, 31, 23, 59, 59, 999999)),\n+        ('-infinity', datetime(1, 1, 1, 0, 0)),\n+        ('-inf', datetime(1, 1, 1, 0, 0)),\n+        ('nan', ValueError),\n     ],\n )\n def test_datetime_parsing(value, result):\n-    if result == errors.DateTimeError:\n-        with pytest.raises(errors.DateTimeError):\n+    if type(result) == type and issubclass(result, Exception):\n+        with pytest.raises(result):\n             parse_datetime(value)\n     else:\n         assert parse_datetime(value) == result\n@@ -251,3 +268,24 @@ class Model(BaseModel):\n         'type': 'value_error.unicodedecode',\n         'msg': \"'utf-8' codec can't decode byte 0x81 in position 0: invalid start byte\",\n     }\n+\n+\n+def test_nan():\n+    class Model(BaseModel):\n+        dt: datetime\n+        d: date\n+\n+    with pytest.raises(ValidationError) as exc_info:\n+        Model(dt='nan', d='nan')\n+    assert exc_info.value.errors() == [\n+        {\n+            'loc': ('dt',),\n+            'msg': 'cannot convert float NaN to integer',\n+            'type': 'value_error',\n+        },\n+        {\n+            'loc': ('d',),\n+            'msg': 'cannot convert float NaN to integer',\n+            'type': 'value_error',\n+        },\n+    ]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7506b1c9d1aa72ab988501a88c9884748ba4fe7a",
            "date": "2025-01-14T11:30:26Z",
            "author_login": "thomasfrimannkoren"
          },
          {
            "sha": "db061c2c520568bdd19e00acc491da184b5ea3a9",
            "date": "2025-01-14T09:42:39Z",
            "author_login": "Viicos"
          },
          {
            "sha": "8ef33a0bf51988b4364db14a9732e5eeb0617652",
            "date": "2025-01-10T19:13:06Z",
            "author_login": "Viicos"
          },
          {
            "sha": "e9ff00c91dda4a85a29cc4cece1b6a97b97167a1",
            "date": "2025-01-10T18:10:02Z",
            "author_login": "sydney-runkle"
          },
          {
            "sha": "aac7a534934ffaf0c57475f662877b986161b6f3",
            "date": "2025-01-10T17:39:01Z",
            "author_login": "sydney-runkle"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.3,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-835",
    "description": "Pydantic is a data validation and settings management using Python type hinting. In affected versions passing either `'infinity'`, `'inf'` or `float('inf')` (or their negatives) to `datetime` or `date` fields causes validation to run forever with 100% CPU usage (on one CPU). Pydantic has been patched with fixes available in the following versions: v1.8.2, v1.7.4, v1.6.2. All these versions are available on pypi(https://pypi.org/project/pydantic/#history), and will be available on conda-forge(https://anaconda.org/conda-forge/pydantic) soon. See the changelog(https://pydantic-docs.helpmanual.io/) for details. If you absolutely can't upgrade, you can work around this risk using a validator(https://pydantic-docs.helpmanual.io/usage/validators/) to catch these values. This is not an ideal solution (in particular you'll need a slightly different function for datetimes), instead of a hack like this you should upgrade pydantic. If you are not using v1.8.x, v1.7.x or v1.6.x and are unable to upgrade to a fixed version of pydantic, please create an issue at https://github.com/samuelcolvin/pydantic/issues requesting a back-port, and we will endeavour to release a patch for earlier versions of pydantic.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-05-13T19:15:08.023",
    "last_modified": "2024-11-21T06:01:16.707",
    "fix_date": "2021-05-11T17:08:48Z"
  },
  "references": [
    {
      "url": "https://github.com/samuelcolvin/pydantic/commit/7e83fdd2563ffac081db7ecdf1affa65ef38c468",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/S2HT266L6Q7H6ICP7DFGXOGBJHNNKMKB/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/UEFWM7DYKD2ZHE7R5YT5EQWJPV4ZKYRB/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/UMKAJX4O6IGBBCE32CO2G7PZQCCQSBLV/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/samuelcolvin/pydantic/commit/7e83fdd2563ffac081db7ecdf1affa65ef38c468",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/samuelcolvin/pydantic/security/advisories/GHSA-5jqp-qgf6-3pvh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/S2HT266L6Q7H6ICP7DFGXOGBJHNNKMKB/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/UEFWM7DYKD2ZHE7R5YT5EQWJPV4ZKYRB/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/UMKAJX4O6IGBBCE32CO2G7PZQCCQSBLV/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:57.080552",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pydantic",
    "owner": "samuelcolvin",
    "created_at": "2017-05-03T21:23:58Z",
    "updated_at": "2025-01-14T19:41:25Z",
    "pushed_at": "2025-01-14T11:32:34Z",
    "size": 184602,
    "stars": 21997,
    "forks": 1966,
    "open_issues": 483,
    "watchers": 21997,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.10.X-fixes",
      "docs-update",
      "main"
    ],
    "languages": {
      "Python": 3602291,
      "Makefile": 4558,
      "Shell": 1851
    },
    "commit_activity": {
      "total_commits_last_year": 706,
      "avg_commits_per_week": 13.576923076923077,
      "days_active_last_year": 218
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:51:17.009027"
  }
}