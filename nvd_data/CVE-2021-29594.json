{
  "cve_id": "CVE-2021-29594",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "ff489d95a9006be080ad14feb378f2b4dac35552",
    "related_commits": [
      "ff489d95a9006be080ad14feb378f2b4dac35552",
      "ff489d95a9006be080ad14feb378f2b4dac35552"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/ff489d95a9006be080ad14feb378f2b4dac35552.patch",
    "fix_commit_details": {
      "sha": "ff489d95a9006be080ad14feb378f2b4dac35552",
      "commit_date": "2021-04-28T19:37:35Z",
      "author": {
        "login": "mihaimaruseac",
        "type": "User",
        "stats": {
          "total_commits": 1590,
          "average_weekly_commits": 3.3125,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 214
        }
      },
      "commit_message": {
        "title": "Prevent division by 0.",
        "length": 105,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 8,
        "additions": 6,
        "deletions": 2
      },
      "files": [
        {
          "filename": "tensorflow/lite/kernels/conv.cc",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -545,6 +545,7 @@ TfLiteStatus Prepare(KernelType kernel_type, TfLiteContext* context,\n     // Only one scale factor per batch is typically necessary. See optimized\n     // implementation for why we need to allocate for the height of the inputs\n     // flattened to 2D.\n+    TF_LITE_ENSURE(context, channels_in != 0);\n     const int height = NumElements(input) / channels_in;\n     int scaling_dims[1] = {height};\n     if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {\n@@ -587,6 +588,7 @@ TfLiteStatus Prepare(KernelType kernel_type, TfLiteContext* context,\n       input_offsets->type = kTfLiteInt32;\n       input_offsets->allocation_type = kTfLiteArenaRw;\n       // See above comment for the need to allocate for height of inputs.\n+      TF_LITE_ENSURE(context, channels_in != 0);\n       const int height = NumElements(input) / channels_in;\n       const int input_offset_dims[1] = {height};\n       if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1,\n@@ -886,8 +888,9 @@ TfLiteStatus EvalHybridPerChannel(TfLiteContext* context, TfLiteNode* node,\n   CalculateActivationRange(params->activation, &output_activation_min,\n                            &output_activation_max);\n \n-  const int input_size = NumElements(input) / SizeOfDimension(input, 0);\n   const int batch_size = SizeOfDimension(input, 0);\n+  TF_LITE_ENSURE(context, batch_size != 0);\n+  const int input_size = NumElements(input) / batch_size;\n   TfLiteTensor* quantized_input_tensor;\n   TF_LITE_ENSURE_OK(context,\n                     GetTemporarySafe(context, node, data->input_quantized_index,\n@@ -989,8 +992,9 @@ TfLiteStatus EvalHybrid(TfLiteContext* context, TfLiteNode* node,\n   CalculateActivationRange(params->activation, &output_activation_min,\n                            &output_activation_max);\n \n-  const int input_size = NumElements(input) / SizeOfDimension(input, 0);\n   const int batch_size = SizeOfDimension(input, 0);\n+  TF_LITE_ENSURE(context, batch_size != 0);\n+  const int input_size = NumElements(input) / batch_size;\n \n   const float* input_ptr = GetTensorData<float>(input);\n   TfLiteTensor* quantized_input_tensor;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c141307fbd02349cf4d83f9a73bdba73fcba9b87",
            "date": "2025-01-14T14:26:56Z",
            "author_login": "mooskagh"
          },
          {
            "sha": "9263c01097f54dbb932ac56d6d87a61a93409221",
            "date": "2025-01-14T14:18:52Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "e7f7cefc7d284c486f84596811d07bb5cd0890ca",
            "date": "2025-01-14T14:16:10Z",
            "author_login": "krasimirgg"
          },
          {
            "sha": "fd41705e0ad7a123a9d01b8be2a3b34b3266493e",
            "date": "2025-01-14T13:33:52Z",
            "author_login": "loislo"
          },
          {
            "sha": "af5275c5731565cbf2a2c01ee418a8cf62388431",
            "date": "2025-01-14T12:48:20Z",
            "author_login": "akuegel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 2.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-369",
    "description": "TensorFlow is an end-to-end open source platform for machine learning. TFLite's convolution code(https://github.com/tensorflow/tensorflow/blob/09c73bca7d648e961dd05898292d91a8322a9d45/tensorflow/lite/kernels/conv.cc) has multiple division where the divisor is controlled by the user and not checked to be non-zero. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-05-14T20:15:15.160",
    "last_modified": "2024-11-21T06:01:27.200",
    "fix_date": "2021-04-28T19:37:35Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/ff489d95a9006be080ad14feb378f2b4dac35552",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3qgw-p4fm-x7gf",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/ff489d95a9006be080ad14feb378f2b4dac35552",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3qgw-p4fm-x7gf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:57.095897",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}