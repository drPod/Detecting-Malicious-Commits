{
  "cve_id": "CVE-2021-30022",
  "github_data": {
    "repository": "gpac/gpac",
    "fix_commit": "51cdb67ff7c5f1242ac58c5aa603ceaf1793b788",
    "related_commits": [
      "51cdb67ff7c5f1242ac58c5aa603ceaf1793b788",
      "51cdb67ff7c5f1242ac58c5aa603ceaf1793b788"
    ],
    "patch_url": "https://github.com/gpac/gpac/commit/51cdb67ff7c5f1242ac58c5aa603ceaf1793b788.patch",
    "fix_commit_details": {
      "sha": "51cdb67ff7c5f1242ac58c5aa603ceaf1793b788",
      "commit_date": "2021-03-29T07:34:02Z",
      "author": {
        "login": "jeanlf",
        "type": "User",
        "stats": {
          "total_commits": 11740,
          "average_weekly_commits": 11.521099116781159,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 832
        }
      },
      "commit_message": {
        "title": "add safety in avc/hevc/vvc sps/pps/vps ID check - cf #1720 #1721 #1722",
        "length": 70,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 27,
        "additions": 12,
        "deletions": 15
      },
      "files": [
        {
          "filename": "src/media_tools/av_parsers.c",
          "status": "modified",
          "additions": 12,
          "deletions": 15,
          "patch": "@@ -5115,10 +5115,7 @@ static s32 gf_avc_read_sps_bs_internal(GF_BitStream *bs, AVCState *avc, u32 subs\n \tby subset SPS. According to the SVC standard, subset SPS can have the same sps_id\n \tthan its base layer, but it does not refer to the same SPS. */\n \tsps_id = gf_bs_read_ue_log(bs, \"sps_id\") + GF_SVC_SSPS_ID_SHIFT * subseq_sps;\n-\tif (sps_id >= 32) {\n-\t\treturn -1;\n-\t}\n-\tif (sps_id < 0) {\n+\tif ((sps_id < 0) || (sps_id >= 32)) {\n \t\treturn -1;\n \t}\n \n@@ -5447,15 +5444,15 @@ static s32 gf_avc_read_pps_bs_internal(GF_BitStream *bs, AVCState *avc, u32 nal_\n \t\tgf_bs_read_int_log(bs, 5, \"nal_unit_type\");\n \t}\n \tpps_id = gf_bs_read_ue_log(bs, \"pps_id\");\n-\tif (pps_id >= 255) {\n+\tif ((pps_id<0) || (pps_id >= 255)) {\n \t\treturn -1;\n \t}\n \tpps = &avc->pps[pps_id];\n \tpps->id = pps_id;\n \n \tif (!pps->status) pps->status = 1;\n \tpps->sps_id = gf_bs_read_ue_log(bs, \"sps_id\");\n-\tif (pps->sps_id >= 32) {\n+\tif ((pps->sps_id<0) || (pps->sps_id >= 32)) {\n \t\tpps->sps_id = 0;\n \t\treturn -1;\n \t}\n@@ -6843,7 +6840,7 @@ s32 hevc_parse_slice_segment(GF_BitStream *bs, HEVCState *hevc, HEVCSliceInfo *s\n \t}\n \n \tpps_id = gf_bs_read_ue_log(bs, \"pps_id\");\n-\tif (pps_id >= 64)\n+\tif ((pps_id<0) || (pps_id >= 64))\n \t\treturn -1;\n \n \tpps = &hevc->pps[pps_id];\n@@ -7666,7 +7663,7 @@ static s32 gf_hevc_read_vps_bs_internal(GF_BitStream *bs, HEVCState *hevc, Bool\n \t//nalu header already parsed\n \tvps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");\n \n-\tif (vps_id >= 16) return -1;\n+\tif ((vps_id<0) || (vps_id >= 16)) return -1;\n \n \tvps = &hevc->vps[vps_id];\n \tvps->bit_pos_vps_extensions = -1;\n@@ -7895,7 +7892,7 @@ static s32 gf_hevc_read_sps_bs_internal(GF_BitStream *bs, HEVCState *hevc, u8 la\n \n \t//nalu header already parsed\n \tvps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");\n-\tif (vps_id >= 16) {\n+\tif ((vps_id<0) || (vps_id >= 16)) {\n \t\treturn -1;\n \t}\n \tmemset(&ptl, 0, sizeof(ptl));\n@@ -8210,7 +8207,7 @@ static s32 gf_hevc_read_pps_bs_internal(GF_BitStream *bs, HEVCState *hevc)\n \t\tpps->state = 1;\n \t}\n \tpps->sps_id = gf_bs_read_ue_log(bs, \"sps_id\");\n-\tif (pps->sps_id >= 16) {\n+\tif ((pps->sps_id<0) || (pps->sps_id >= 16)) {\n \t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] wrong SPS ID %d in PPS\\n\", pps->sps_id));\n \t\tpps->sps_id=0;\n \t\treturn -1;\n@@ -9360,7 +9357,7 @@ static s32 gf_media_vvc_read_vps_bs_internal(GF_BitStream *bs, VVCState *vvc, Bo\n \n \t//nalu header already parsed\n \tvps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");\n-\tif (vps_id >= 16) return -1;\n+\tif ((vps_id<0) || (vps_id >= 16)) return -1;\n \tif (!vps_id) {\n \t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] VPS ID 0 is forbidden\\n\"));\n \t\treturn -1;\n@@ -9451,11 +9448,11 @@ static s32 gf_media_vvc_read_sps_bs_internal(GF_BitStream *bs, VVCState *vvc, u8\n \tif (vui_flag_pos) *vui_flag_pos = 0;\n \n \tsps_id = gf_bs_read_int_log(bs, 4, \"sps_id\");\n-\tif (sps_id >= 16) {\n+\tif ((sps_id<0) || (sps_id >= 16)) {\n \t\treturn -1;\n \t}\n \tvps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");\n-\tif (vps_id >= 16) {\n+\tif ((vps_id<0) || (vps_id >= 16)) {\n \t\treturn -1;\n \t}\n \tif (!vps_id && !vvc->vps[0].state) {\n@@ -9657,7 +9654,7 @@ static s32 gf_media_vvc_read_pps_bs_internal(GF_BitStream *bs, VVCState *vvc)\n \t\tpps->state = 1;\n \t}\n \tpps->sps_id = gf_bs_read_int_log(bs, 4, \"sps_id\");\n-\tif (pps->sps_id >= 16) {\n+\tif ((pps->sps_id<0) || (pps->sps_id >= 16)) {\n \t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] wrong SPS ID %d in PPS\\n\", pps->sps_id));\n \t\tpps->sps_id=0;\n \t\treturn -1;\n@@ -9725,7 +9722,7 @@ s32 vvc_parse_picture_header(GF_BitStream *bs, VVCState *vvc, VVCSliceInfo *si)\n \t\tsi->intra_slice_allowed_flag = gf_bs_read_int_log(bs, 1, \"intra_slice_allowed_flag\");\n \n \tpps_id = gf_bs_read_ue_log(bs, \"pps_id\");\n-\tif (pps_id >= 64)\n+\tif ((pps_id<0) || (pps_id >= 64))\n \t\treturn -1;\n \tsi->pps = &vvc->pps[pps_id];\n \tsi->sps = &vvc->sps[si->pps->sps_id];"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e075efa1bd0984e0e87f6752f1e5b991ba3a7cf7",
            "date": "2025-01-14T15:00:34Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "7af1bfcdc25dd74e158437abd13858281ae1bea0",
            "date": "2025-01-14T12:33:00Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "08572e41a7eae3d7e4329bf88a455ba6cb209936",
            "date": "2025-01-14T12:18:43Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "5f2c53efbc58ecfb01885c73b9507413efde6c81",
            "date": "2025-01-14T11:46:01Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "f2082beb80c470f4eaf2bb0421b56e8adcde303a",
            "date": "2025-01-14T11:45:02Z",
            "author_login": "aureliendavid"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-190",
    "description": "There is a integer overflow in media_tools/av_parsers.c in the gf_avc_read_pps_bs_internal in GPAC 1.0.1. pps_id may be a negative number, so it will not return. However, avc->pps only has 255 unit, so there is an overflow, which results a crash.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-04-19T20:15:14.647",
    "last_modified": "2024-11-21T06:03:14.247",
    "fix_date": "2021-03-29T07:34:02Z"
  },
  "references": [
    {
      "url": "https://github.com/gpac/gpac/commit/51cdb67ff7c5f1242ac58c5aa603ceaf1793b788",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/issues/1720",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/commit/51cdb67ff7c5f1242ac58c5aa603ceaf1793b788",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/issues/1720",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:33.544328",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gpac",
    "owner": "gpac",
    "created_at": "2014-05-03T11:29:57Z",
    "updated_at": "2025-01-14T12:51:06Z",
    "pushed_at": "2025-01-14T12:51:01Z",
    "size": 148655,
    "stars": 2857,
    "forks": 539,
    "open_issues": 84,
    "watchers": 2857,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29230795,
      "JavaScript": 1164507,
      "C++": 591365,
      "Roff": 570792,
      "Python": 185337,
      "Makefile": 105620,
      "HTML": 100652,
      "Java": 92437,
      "GLSL": 90260,
      "Objective-C": 24884,
      "Shell": 21810,
      "NSIS": 17560,
      "Rez": 13704,
      "CSS": 4998,
      "Batchfile": 4898,
      "Dockerfile": 3216,
      "Nix": 1229
    },
    "commit_activity": {
      "total_commits_last_year": 1273,
      "avg_commits_per_week": 24.48076923076923,
      "days_active_last_year": 239
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:56:58.367536"
  }
}