{
  "cve_id": "CVE-2021-30080",
  "github_data": {
    "repository": "beego/beego",
    "fix_commit": "d5df5e470d0a8ed291930ae802fd7e6b95226519",
    "related_commits": [
      "d5df5e470d0a8ed291930ae802fd7e6b95226519",
      "d5df5e470d0a8ed291930ae802fd7e6b95226519"
    ],
    "patch_url": "https://github.com/beego/beego/commit/d5df5e470d0a8ed291930ae802fd7e6b95226519.patch",
    "fix_commit_details": {
      "sha": "d5df5e470d0a8ed291930ae802fd7e6b95226519",
      "commit_date": "2021-01-25T15:49:18Z",
      "author": {
        "login": "flycash",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix BUG: /abc.html/aaa match /abc/aaa",
        "length": 37,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 23,
        "additions": 19,
        "deletions": 4
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1,4 +1,5 @@\n # developing\n+- Fix: /abc.html/aaa match /abc/aaa. [4459](https://github.com/beego/beego/pull/4459)\n - ORM mock. [4407](https://github.com/beego/beego/pull/4407)\n - Add sonar check and ignore test. [4432](https://github.com/beego/beego/pull/4432) [4433](https://github.com/beego/beego/pull/4433)\n - Update changlog.yml to check every PR to develop branch.[4427](https://github.com/beego/beego/pull/4427)"
        },
        {
          "filename": "server/web/tree.go",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -342,8 +342,9 @@ func (t *Tree) match(treePattern string, pattern string, wildcardValues []string\n \tif runObject == nil && len(t.fixrouters) > 0 {\n \t\t// Filter the .json .xml .html extension\n \t\tfor _, str := range allowSuffixExt {\n-\t\t\tif strings.HasSuffix(seg, str) {\n+\t\t\tif strings.HasSuffix(seg, str) && strings.HasSuffix(treePattern, seg){\n \t\t\t\tfor _, subTree := range t.fixrouters {\n+\t\t\t\t\t// strings.HasSuffix(treePattern, seg) avoid cases: /aaa.html/bbb could access /aaa/bbb\n \t\t\t\t\tif subTree.prefix == seg[:len(seg)-len(str)] {\n \t\t\t\t\t\trunObject = subTree.match(treePattern, pattern, wildcardValues, ctx)\n \t\t\t\t\t\tif runObject != nil {"
        },
        {
          "filename": "server/web/tree_test.go",
          "status": "modified",
          "additions": 16,
          "deletions": 3,
          "patch": "@@ -17,6 +17,7 @@ package web\n import (\n \t\"strings\"\n \t\"testing\"\n+\t\"time\"\n \n \t\"github.com/beego/beego/v2/server/web/context\"\n )\n@@ -49,7 +50,7 @@ func notMatchTestInfo(pattern, url string) testInfo {\n }\n \n func init() {\n-\trouters = make([]testInfo, 0)\n+\trouters = make([]testInfo, 0, 128)\n \t// match example\n \trouters = append(routers, matchTestInfo(\"/topic/?:auth:int\", \"/topic\", nil))\n \trouters = append(routers, matchTestInfo(\"/topic/?:auth:int\", \"/topic/123\", map[string]string{\":auth\": \"123\"}))\n@@ -108,12 +109,23 @@ func init() {\n \trouters = append(routers, notMatchTestInfo(\"/read_:id:int\\\\.htm\", \"/read_222_htm\"))\n \trouters = append(routers, notMatchTestInfo(\"/read_:id:int\\\\.htm\", \" /read_262shtm\"))\n \n+\t// test .html, .json not suffix\n+\tconst abcHtml = \"/suffix/abc.html\"\n+\trouters = append(routers, notMatchTestInfo(abcHtml, \"/suffix.html/abc\"))\n+\trouters = append(routers, matchTestInfo(\"/suffix/abc\", abcHtml, nil))\n+\trouters = append(routers, matchTestInfo(\"/suffix/*\", abcHtml, nil))\n+\trouters = append(routers, notMatchTestInfo(\"/suffix/*\", \"/suffix.html/a\"))\n+\tconst abcSuffix = \"/abc/suffix/*\"\n+\trouters = append(routers, notMatchTestInfo(abcSuffix, \"/abc/suffix.html/a\"))\n+\trouters = append(routers, matchTestInfo(abcSuffix, \"/abc/suffix/a\", nil))\n+\trouters = append(routers, notMatchTestInfo(abcSuffix, \"/abc.j/suffix/a\"))\n+\n }\n \n func TestTreeRouters(t *testing.T) {\n \tfor _, r := range routers {\n-\t\tshouldMatch := r.shouldMatchOrNot\n \n+\t\tshouldMatch := r.shouldMatchOrNot\n \t\ttr := NewTree()\n \t\ttr.AddRouter(r.pattern, \"astaxie\")\n \t\tctx := context.NewContext()\n@@ -122,7 +134,7 @@ func TestTreeRouters(t *testing.T) {\n \t\t\tif obj != nil {\n \t\t\t\tt.Fatal(\"pattern:\", r.pattern, \", should not match\", r.requestUrl)\n \t\t\t} else {\n-\t\t\t\treturn\n+\t\t\t\tcontinue\n \t\t\t}\n \t\t}\n \t\tif obj == nil || obj.(string) != \"astaxie\" {\n@@ -138,6 +150,7 @@ func TestTreeRouters(t *testing.T) {\n \t\t\t}\n \t\t}\n \t}\n+\ttime.Sleep(time.Second)\n }\n \n func TestStaticPath(t *testing.T) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5da7cabb59da29cf8739f6e31016f7144ee3f46f",
            "date": "2025-01-12T06:57:51Z",
            "author_login": "zhuhaicity"
          },
          {
            "sha": "a21efb561349426790388c030e4732f41db63f2f",
            "date": "2025-01-01T02:25:23Z",
            "author_login": "flycash"
          },
          {
            "sha": "e7fa4835f71f47ab1d13afd638cebf661800d5a4",
            "date": "2024-12-08T14:30:41Z",
            "author_login": "Stone-afk"
          },
          {
            "sha": "bb72dc27ac3970e51d38ee52fc3dc1465ae25b9d",
            "date": "2024-11-19T15:28:37Z",
            "author_login": "flycash"
          },
          {
            "sha": "b510342640c946adf6755071196e9fac98d23ad0",
            "date": "2024-11-18T10:38:46Z",
            "author_login": "lengpucheng"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": null,
    "description": "An issue was discovered in the route lookup process in beego before 1.12.11 that allows attackers to bypass access control.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-04-05T16:15:12.123",
    "last_modified": "2024-11-21T06:03:18.297",
    "fix_date": "2021-01-25T15:49:18Z"
  },
  "references": [
    {
      "url": "https://github.com/beego/beego/commit/d5df5e470d0a8ed291930ae802fd7e6b95226519",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/beego/beego/releases/tag/v1.12.11",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/beego/beego/commit/d5df5e470d0a8ed291930ae802fd7e6b95226519",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/beego/beego/releases/tag/v1.12.11",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:02.102238",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "beego",
    "owner": "beego",
    "created_at": "2012-02-29T02:32:08Z",
    "updated_at": "2025-01-14T14:46:26Z",
    "pushed_at": "2025-01-12T07:08:35Z",
    "size": 11851,
    "stars": 31768,
    "forks": 5626,
    "open_issues": 11,
    "watchers": 31768,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 1831956,
      "Makefile": 2990,
      "Shell": 559,
      "Smarty": 359
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:47:43.889980"
  }
}