{
  "cve_id": "CVE-2021-30145",
  "github_data": {
    "repository": "mpv-player/mpv",
    "fix_commit": "d0c530919d8cd4d7a774e38ab064e0fabdae34e6",
    "related_commits": [
      "d0c530919d8cd4d7a774e38ab064e0fabdae34e6",
      "d0c530919d8cd4d7a774e38ab064e0fabdae34e6"
    ],
    "patch_url": "https://github.com/mpv-player/mpv/commit/d0c530919d8cd4d7a774e38ab064e0fabdae34e6.patch",
    "fix_commit_details": {
      "sha": "d0c530919d8cd4d7a774e38ab064e0fabdae34e6",
      "commit_date": "2021-04-04T11:11:15Z",
      "author": {
        "login": "avih",
        "type": "User",
        "stats": {
          "total_commits": 188,
          "average_weekly_commits": 0.25336927223719674,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 89
        }
      },
      "commit_message": {
        "title": "demux_mf: improve format string processing",
        "length": 811,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 39,
        "additions": 37,
        "deletions": 2
      },
      "files": [
        {
          "filename": "demux/demux_mf.c",
          "status": "modified",
          "additions": 37,
          "deletions": 2,
          "patch": "@@ -121,7 +121,8 @@ static mf_t *open_mf_pattern(void *talloc_ctx, struct demuxer *d, char *filename\n         goto exit_mf;\n     }\n \n-    char *fname = talloc_size(mf, strlen(filename) + 32);\n+    size_t fname_avail = strlen(filename) + 32;\n+    char *fname = talloc_size(mf, fname_avail);\n \n #if HAVE_GLOB\n     if (!strchr(filename, '%')) {\n@@ -148,10 +149,44 @@ static mf_t *open_mf_pattern(void *talloc_ctx, struct demuxer *d, char *filename\n     }\n #endif\n \n+    // We're using arbitrary user input as printf format with 1 int argument.\n+    // Any format which uses exactly 1 int argument would be valid, but for\n+    // simplicity we reject all conversion specifiers except %% and simple\n+    // integer specifier: %[.][NUM]d where NUM is 1-3 digits (%.d is valid)\n+    const char *f = filename;\n+    int MAXDIGS = 3, nspec = 0, bad_spec = 0, c;\n+\n+    while (nspec < 2 && (c = *f++)) {\n+        if (c != '%')\n+            continue;\n+        if (*f != '%') {\n+            nspec++;  // conversion specifier which isn't %%\n+            if (*f == '.')\n+                f++;\n+            for (int ndig = 0; mp_isdigit(*f) && ndig < MAXDIGS; ndig++, f++)\n+                /* no-op */;\n+            if (*f != 'd') {\n+                bad_spec++;  // not int, or beyond our validation capacity\n+                break;\n+            }\n+        }\n+        // *f is '%' or 'd'\n+        f++;\n+    }\n+\n+    // nspec==0 (zero specifiers) is rejected because fname wouldn't advance.\n+    if (bad_spec || nspec != 1) {\n+        mp_err(log, \"unsupported expr format: '%s'\\n\", filename);\n+        goto exit_mf;\n+    }\n+\n     mp_info(log, \"search expr: %s\\n\", filename);\n \n     while (error_count < 5) {\n-        sprintf(fname, filename, count++);\n+        if (snprintf(fname, fname_avail, filename, count++) >= fname_avail) {\n+            mp_err(log, \"format result too long: '%s'\\n\", filename);\n+            goto exit_mf;\n+        }\n         if (!mp_path_exists(fname)) {\n             error_count++;\n             mp_verbose(log, \"file not found: '%s'\\n\", fname);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ca211b5b8830a74fecae115ba18b62878348342c",
            "date": "2025-01-10T12:50:20Z",
            "author_login": "guidocella"
          },
          {
            "sha": "f049a1e91c840754159dc86eb5b19ea15d311a75",
            "date": "2025-01-08T23:52:50Z",
            "author_login": "llyyr"
          },
          {
            "sha": "7a59a12b764369cebda0e5097401856a8c0e0a6a",
            "date": "2024-12-31T09:26:10Z",
            "author_login": "guidocella"
          },
          {
            "sha": "b530b402bf5adcfd024bb3e500cc86845a80d7e5",
            "date": "2024-12-05T18:18:02Z",
            "author_login": "guidocella"
          },
          {
            "sha": "0c3c4a315b6383be066f5824401be57e676412bf",
            "date": "2024-12-10T22:09:02Z",
            "author_login": "guidocella"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-134",
    "description": "A format string vulnerability in mpv through 0.33.0 allows user-assisted remote attackers to achieve code execution via a crafted m3u playlist file.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-05-18T14:15:07.377",
    "last_modified": "2024-11-21T06:03:23.427",
    "fix_date": "2021-04-04T11:11:15Z"
  },
  "references": [
    {
      "url": "https://devel0pment.de/?p=2217",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mpv-player/mpv/commit/d0c530919d8cd4d7a774e38ab064e0fabdae34e6",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mpv-player/mpv/releases/tag/v0.33.1",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://mpv.io",
      "source": "cve@mitre.org",
      "tags": [
        "Product",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202107-46",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://devel0pment.de/?p=2217",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mpv-player/mpv/commit/d0c530919d8cd4d7a774e38ab064e0fabdae34e6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/mpv-player/mpv/releases/tag/v0.33.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://mpv.io",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202107-46",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:57.106596",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "mpv",
    "owner": "mpv-player",
    "created_at": "2012-10-13T08:08:44Z",
    "updated_at": "2025-01-14T17:09:37Z",
    "pushed_at": "2025-01-10T13:06:17Z",
    "size": 106930,
    "stars": 29319,
    "forks": 2959,
    "open_issues": 976,
    "watchers": 29319,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C": 6695376,
      "Lua": 396852,
      "Swift": 188294,
      "Meson": 80626,
      "Python": 54824,
      "Objective-C": 51306,
      "Shell": 29833,
      "JavaScript": 29576,
      "C++": 22002,
      "PowerShell": 15989
    },
    "commit_activity": {
      "total_commits_last_year": 1925,
      "avg_commits_per_week": 37.01923076923077,
      "days_active_last_year": 323
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T17:16:25.245010"
  }
}