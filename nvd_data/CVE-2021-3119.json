{
  "cve_id": "CVE-2021-3119",
  "github_data": {
    "repository": "sqlcipher/sqlcipher",
    "fix_commit": "cb71f53e8cea4802509f182fa5bead0ac6ab0e7f",
    "related_commits": [
      "cb71f53e8cea4802509f182fa5bead0ac6ab0e7f",
      "cb71f53e8cea4802509f182fa5bead0ac6ab0e7f"
    ],
    "patch_url": "https://github.com/sqlcipher/sqlcipher/commit/cb71f53e8cea4802509f182fa5bead0ac6ab0e7f.patch",
    "fix_commit_details": {
      "sha": "cb71f53e8cea4802509f182fa5bead0ac6ab0e7f",
      "commit_date": "2021-01-13T22:24:33Z",
      "author": {
        "login": "sjlombardo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix sqlcipher_export handling of NULL parameters",
        "length": 48,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 48,
        "additions": 45,
        "deletions": 3
      },
      "files": [
        {
          "filename": "src/crypto.c",
          "status": "modified",
          "additions": 19,
          "deletions": 3,
          "patch": "@@ -1075,13 +1075,29 @@ void sqlcipher_exportFunc(sqlite3_context *context, int argc, sqlite3_value **ar\n     goto end_of_export;\n   }\n \n-  targetDb = (const char*) sqlite3_value_text(argv[0]);\n-  sourceDb = (argc == 2) ? (char *) sqlite3_value_text(argv[1]) : \"main\";\n+  if(sqlite3_value_type(argv[0]) == SQLITE_NULL) {\n+    rc = SQLITE_ERROR;\n+    pzErrMsg = sqlite3_mprintf(\"target database can't be NULL\");\n+    goto end_of_export;\n+  }\n+\n+  targetDb = (const char*) sqlite3_value_text(argv[0]); \n+  sourceDb = \"main\";\n+\n+  if(argc == 2) {\n+    if(sqlite3_value_type(argv[1]) == SQLITE_NULL) {\n+      rc = SQLITE_ERROR;\n+      pzErrMsg = sqlite3_mprintf(\"target database can't be NULL\");\n+      goto end_of_export;\n+    }\n+    sourceDb = (char *) sqlite3_value_text(argv[1]);\n+  }\n+\n \n   /* if the name of the target is not main, but the index returned is zero \n      there is a mismatch and we should not proceed */\n   targetDb_idx =  sqlcipher_find_db_index(db, targetDb);\n-  if(targetDb_idx == 0 && sqlite3StrICmp(\"main\", targetDb) != 0) {\n+  if(targetDb_idx == 0 && targetDb != NULL && sqlite3StrICmp(\"main\", targetDb) != 0) {\n     rc = SQLITE_ERROR;\n     pzErrMsg = sqlite3_mprintf(\"unknown database %s\", targetDb);\n     goto end_of_export;"
        },
        {
          "filename": "test/sqlcipher-compatibility.test",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -444,6 +444,32 @@ do_test export-error {\n db close\n file delete -force test.db\n \n+# verify sqlcipher_export with NULL parameters\n+do_test export-nulls {\n+  sqlite_orig db test.db\n+\n+  catchsql {\n+    SELECT sqlcipher_export(NULL);\n+  }\n+\n+} {1 {target database can't be NULL}}\n+db close\n+file delete -force test.db\n+\n+do_test export-nulls {\n+  sqlite_orig db test.db\n+\n+  catchsql {\n+    SELECT sqlcipher_export('main', NULL);\n+  }\n+\n+} {1 {target database can't be NULL}}\n+db close\n+file delete -force test.db\n+\n+\n+# use the sqlcipher_export function\n+\n # use the sqlcipher_export function\n # to copy a complicated database. \n # tests autoincrement fields,"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c5bd336ece77922433aaf6d6fe8cf203b0c299d5",
            "date": "2024-08-13T21:15:26Z",
            "author_login": "sjlombardo"
          },
          {
            "sha": "c579558bd123b54cf287617a7b395b8bb3643c31",
            "date": "2024-08-13T20:43:33Z",
            "author_login": "sjlombardo"
          },
          {
            "sha": "495260331d84c653b384f0bb1f5503ca99d6d750",
            "date": "2024-08-13T20:34:00Z",
            "author_login": "sjlombardo"
          },
          {
            "sha": "686e3b83401318ca4b101022c076dd818886283e",
            "date": "2024-08-13T20:24:48Z",
            "author_login": "sjlombardo"
          },
          {
            "sha": "7b5ca787a57e1679b39173815c6c4389108a32f9",
            "date": "2024-08-07T15:19:57Z",
            "author_login": "sjlombardo"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "Zetetic SQLCipher 4.x before 4.4.3 has a NULL pointer dereferencing issue related to sqlcipher_export in crypto.c and sqlite3StrICmp in sqlite3.c. This may allow an attacker to perform a remote denial of service attack. For example, an SQL injection can be used to execute the crafted SQL command sequence, which causes a segmentation fault.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-03-25T23:15:13.257",
    "last_modified": "2024-11-21T06:20:55.580",
    "fix_date": "2021-01-13T22:24:33Z"
  },
  "references": [
    {
      "url": "https://github.com/sqlcipher/sqlcipher/commit/cb71f53e8cea4802509f182fa5bead0ac6ab0e7f#diff-9305215a9a0ea69300281fc4af90bc7f3437e34a0e1745d030213152993ddae4",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.telekom.com/resource/blob/621186/3fb50ca7a4a97728be18717ed7b0062c/dl-210308-critical-dos-vulnerability-in-sqlcipher-sql-command-processing-data.pdf",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/sqlcipher/sqlcipher/commit/cb71f53e8cea4802509f182fa5bead0ac6ab0e7f#diff-9305215a9a0ea69300281fc4af90bc7f3437e34a0e1745d030213152993ddae4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.telekom.com/resource/blob/621186/3fb50ca7a4a97728be18717ed7b0062c/dl-210308-critical-dos-vulnerability-in-sqlcipher-sql-command-processing-data.pdf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:33.496839",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sqlcipher",
    "owner": "sqlcipher",
    "created_at": "2008-07-30T17:20:41Z",
    "updated_at": "2025-01-13T02:17:31Z",
    "pushed_at": "2024-08-20T13:18:47Z",
    "size": 54600,
    "stars": 6402,
    "forks": 1289,
    "open_issues": 11,
    "watchers": 6402,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 13743735,
      "Tcl": 977138,
      "JavaScript": 876699,
      "Java": 471221,
      "Shell": 370079,
      "Makefile": 222849,
      "M4": 179340,
      "HTML": 94812,
      "Yacc": 76703,
      "Batchfile": 37908,
      "C#": 23719,
      "C++": 14127,
      "Roff": 4805,
      "CSS": 3629,
      "Objective-C": 156
    },
    "commit_activity": {
      "total_commits_last_year": 53,
      "avg_commits_per_week": 1.0192307692307692,
      "days_active_last_year": 32
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:03:25.411567"
  }
}