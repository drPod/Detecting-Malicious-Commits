{
  "cve_id": "CVE-2021-3155",
  "github_data": {
    "repository": "snapcore/snapd",
    "fix_commit": "6bcaeeccd16ed8298a301dd92f6907f88c24cc85",
    "related_commits": [
      "6bcaeeccd16ed8298a301dd92f6907f88c24cc85",
      "7d2a966620002149891446a53cf114804808dcca",
      "6bcaeeccd16ed8298a301dd92f6907f88c24cc85",
      "7d2a966620002149891446a53cf114804808dcca"
    ],
    "patch_url": "https://github.com/snapcore/snapd/commit/6bcaeeccd16ed8298a301dd92f6907f88c24cc85.patch",
    "fix_commit_details": {
      "sha": "6bcaeeccd16ed8298a301dd92f6907f88c24cc85",
      "commit_date": "2021-05-31T07:11:35Z",
      "author": {
        "login": "mvo5",
        "type": "User",
        "stats": {
          "total_commits": 15195,
          "average_weekly_commits": 28.77840909090909,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 437
        }
      },
      "commit_message": {
        "title": "Merge pull request #9897 from anonymouse64/bugfix/lp-1910298-part-1",
        "length": 130,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 182,
        "additions": 170,
        "deletions": 12
      },
      "files": [
        {
          "filename": "cmd/snap/cmd_userd.go",
          "status": "modified",
          "additions": 35,
          "deletions": 0,
          "patch": "@@ -24,10 +24,12 @@ import (\n \t\"fmt\"\n \t\"os\"\n \t\"os/signal\"\n+\t\"path/filepath\"\n \t\"syscall\"\n \n \t\"github.com/jessevdk/go-flags\"\n \n+\t\"github.com/snapcore/snapd/dirs\"\n \t\"github.com/snapcore/snapd/i18n\"\n \t\"github.com/snapcore/snapd/snapdtool\"\n \t\"github.com/snapcore/snapd/usersession/agent\"\n@@ -60,12 +62,45 @@ func init() {\n \tcmd.hidden = true\n }\n \n+var osChmod = os.Chmod\n+\n+func maybeFixupUsrSnapPermissions() error {\n+\tusr, err := userCurrent()\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tusrSnapDir := filepath.Join(usr.HomeDir, dirs.UserHomeSnapDir)\n+\n+\t// restrict the user's \"snap dir\", i.e. /home/$USER/snap, to be private with\n+\t// permissions o0700 so that other users cannot read the data there, some\n+\t// snaps such as chromium etc may store secrets inside this directory\n+\t// note that this operation is safe since `userd --autostart` runs as the\n+\t// user so there is no issue with this modification being performed as root,\n+\t// and being vulnerable to symlink switching attacks, etc.\n+\tif err := osChmod(usrSnapDir, 0700); err != nil {\n+\t\t// if the dir doesn't exist for some reason (i.e. maybe this user has\n+\t\t// never used snaps but snapd is still installed) then ignore the error\n+\t\tif !os.IsNotExist(err) {\n+\t\t\treturn fmt.Errorf(\"cannot restrict user snap home dir %q: %v\", usrSnapDir, err)\n+\t\t}\n+\t}\n+\n+\treturn nil\n+}\n+\n func (x *cmdUserd) Execute(args []string) error {\n \tif len(args) > 0 {\n \t\treturn ErrExtraArgs\n \t}\n \n \tif x.Autostart {\n+\t\t// autostart is called when starting the graphical session, use that as\n+\t\t// an opportunity to fix ~/snap permission bits\n+\t\tif err := maybeFixupUsrSnapPermissions(); err != nil {\n+\t\t\tfmt.Fprintf(Stderr, \"failure fixing ~/snap permissions: %v\\n\", err)\n+\t\t}\n+\n \t\treturn x.runAutostart()\n \t}\n "
        },
        {
          "filename": "cmd/snap/cmd_userd_test.go",
          "status": "modified",
          "additions": 86,
          "deletions": 0,
          "patch": "@@ -25,6 +25,9 @@ import (\n \t\"net\"\n \t\"net/http\"\n \t\"os\"\n+\t\"os/user\"\n+\t\"path\"\n+\t\"path/filepath\"\n \t\"strings\"\n \t\"syscall\"\n \t\"time\"\n@@ -36,6 +39,7 @@ import (\n \t\"github.com/snapcore/snapd/logger\"\n \t\"github.com/snapcore/snapd/osutil\"\n \t\"github.com/snapcore/snapd/testutil\"\n+\t\"github.com/snapcore/snapd/usersession/autostart\"\n )\n \n type userdSuite struct {\n@@ -192,3 +196,85 @@ func (s *userdSuite) TestSignalNotify(c *C) {\n \t\tc.Fatal(\"signal not received within 5s\")\n \t}\n }\n+\n+func (s *userdSuite) TestAutostartSessionAppsRestrictsPermissions(c *C) {\n+\tuserDir := path.Join(c.MkDir(), \"home\")\n+\tmockUserCurrent := func() (*user.User, error) {\n+\t\treturn &user.User{HomeDir: userDir}, nil\n+\t}\n+\tr := snap.MockUserCurrent(mockUserCurrent)\n+\tdefer r()\n+\n+\tr = autostart.MockUserCurrent(mockUserCurrent)\n+\tdefer r()\n+\n+\t// first make the \"snap\" dir permissive with 0755 perms\n+\terr := os.MkdirAll(filepath.Join(userDir, \"snap\"), 0755)\n+\tc.Assert(err, IsNil)\n+\n+\t// make sure the perms are as we expect them if somehow the dir already\n+\t// existed, MkdirAll wouldn't have changed the perms\n+\tst, err := os.Stat(filepath.Join(userDir, \"snap\"))\n+\tc.Assert(err, IsNil)\n+\tc.Assert(st.Mode()&os.ModePerm, Equals, os.FileMode(0755))\n+\n+\t// run autostart\n+\targs, err := snap.Parser(snap.Client()).ParseArgs([]string{\"userd\", \"--autostart\"})\n+\tc.Assert(err, IsNil)\n+\tc.Assert(args, DeepEquals, []string{})\n+\n+\t// make sure that the directory was restricted\n+\tst, err = os.Stat(filepath.Join(userDir, \"snap\"))\n+\tc.Assert(err, IsNil)\n+\tc.Assert(st.Mode()&os.ModePerm, Equals, os.FileMode(0700))\n+}\n+\n+func (s *userdSuite) TestAutostartSessionAppsLogsWhenItCannotRestrictPermissions(c *C) {\n+\tuserDir := path.Join(c.MkDir(), \"home\")\n+\tmockUserCurrent := func() (*user.User, error) {\n+\t\treturn &user.User{HomeDir: userDir}, nil\n+\t}\n+\tr := snap.MockUserCurrent(mockUserCurrent)\n+\tdefer r()\n+\n+\tr = autostart.MockUserCurrent(mockUserCurrent)\n+\tdefer r()\n+\n+\tr = snap.MockOsChmod(func(name string, mode os.FileMode) error {\n+\t\tc.Assert(name, Equals, filepath.Join(userDir, \"snap\"))\n+\t\tc.Assert(mode, Equals, os.FileMode(0700))\n+\n+\t\treturn fmt.Errorf(\"cannot os.Chmod because the test says so\")\n+\t})\n+\tdefer r()\n+\n+\t// run autostart\n+\targs, err := snap.Parser(snap.Client()).ParseArgs([]string{\"userd\", \"--autostart\"})\n+\tc.Assert(err, IsNil)\n+\tc.Assert(args, DeepEquals, []string{})\n+\n+\tc.Assert(s.stderr.String(), testutil.Contains, \"cannot os.Chmod because the test says so\")\n+}\n+\n+func (s *userdSuite) TestAutostartSessionAppsRestrictsPermissionsNoCreateSnapDir(c *C) {\n+\tuserDir := path.Join(c.MkDir(), \"home\")\n+\tmockUserCurrent := func() (*user.User, error) {\n+\t\treturn &user.User{HomeDir: userDir}, nil\n+\t}\n+\tr := snap.MockUserCurrent(mockUserCurrent)\n+\tdefer r()\n+\n+\tr = autostart.MockUserCurrent(mockUserCurrent)\n+\tdefer r()\n+\n+\t// ensure that the \"snap\" dir doesn't already exist\n+\tc.Assert(filepath.Join(userDir, \"snap\"), testutil.FileAbsent)\n+\n+\t// run autostart\n+\targs, err := snap.Parser(snap.Client()).ParseArgs([]string{\"userd\", \"--autostart\"})\n+\tc.Assert(err, IsNil)\n+\tc.Assert(args, DeepEquals, []string{})\n+\n+\t// make sure that the directory was not created\n+\tc.Assert(filepath.Join(userDir, \"snap\"), testutil.FileAbsent)\n+}"
        },
        {
          "filename": "cmd/snap/export_test.go",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -400,3 +400,11 @@ func MockSnapdWaitForFullSystemReboot(t time.Duration) (restore func()) {\n \t\tsnapdWaitForFullSystemReboot = old\n \t}\n }\n+\n+func MockOsChmod(f func(string, os.FileMode) error) (restore func()) {\n+\told := osChmod\n+\tosChmod = f\n+\treturn func() {\n+\t\tosChmod = old\n+\t}\n+}"
        },
        {
          "filename": "tests/main/snap-user-dir-perms-fixed/task.yaml",
          "status": "added",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -0,0 +1,31 @@\n+summary: Ensure snap userd autostart fixes up directory permissions of ~/snap\n+\n+# don't run on trusty, tests.session does not work on trusty due to the\n+# lack of user session support there\n+systems:\n+  - -ubuntu-14.04-64\n+\n+environment:\n+  USER/root: root\n+  USER/test: test\n+  HOMEDIR/root: /root/snap\n+  HOMEDIR/test: /home/test/snap\n+\n+prepare: |\n+  # Prepare for using sessions as the given user\n+  tests.session prepare -u \"$USER\"\n+\n+execute: |\n+  # set permissive permissions on the user's home dir\n+  tests.session -u \"$USER\" exec mkdir -p \"$HOMEDIR\"\n+  tests.session -u \"$USER\" exec chmod 0777 \"$HOMEDIR\"\n+\n+  # run autostart\n+  tests.session -u \"$USER\" exec snap userd --autostart\n+\n+  # check the permissions are fixed up now\n+  tests.session -u \"$USER\" exec stat -c \"%a\" \"$HOMEDIR\" | MATCH 700\n+\n+restore: |\n+  # Restore after using sessions as the given user\n+  tests.session restore -u \"$USER\""
        },
        {
          "filename": "usersession/autostart/autostart.go",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -33,6 +33,7 @@ import (\n \n \t\"github.com/snapcore/snapd/dirs\"\n \t\"github.com/snapcore/snapd/logger\"\n+\t\"github.com/snapcore/snapd/osutil\"\n \t\"github.com/snapcore/snapd/snap\"\n \t\"github.com/snapcore/snapd/strutil\"\n \t\"github.com/snapcore/snapd/strutil/shlex\"\n@@ -226,6 +227,15 @@ func makeStdStreams(identifier string) (stdout *os.File, stderr *os.File) {\n \n var userCurrent = user.Current\n \n+func MockUserCurrent(f func() (*user.User, error)) (restore func()) {\n+\tosutil.MustBeTestBinary(\"mocking can only be done in tests\")\n+\told := userCurrent\n+\tuserCurrent = f\n+\treturn func() {\n+\t\tuserCurrent = old\n+\t}\n+}\n+\n // AutostartSessionApps starts applications which have placed their desktop\n // files in $SNAP_USER_DATA/.config/autostart\n //"
        },
        {
          "filename": "usersession/autostart/export_test.go",
          "status": "modified",
          "additions": 0,
          "deletions": 12,
          "patch": "@@ -19,23 +19,11 @@\n \n package autostart\n \n-import (\n-\t\"os/user\"\n-)\n-\n var (\n \tLoadAutostartDesktopFile = loadAutostartDesktopFile\n \tAutostartCmd             = autostartCmd\n )\n \n-func MockUserCurrent(f func() (*user.User, error)) func() {\n-\torigUserCurrent := userCurrent\n-\tuserCurrent = f\n-\treturn func() {\n-\t\tuserCurrent = origUserCurrent\n-\t}\n-}\n-\n func MockCurrentDesktop(current string) func() {\n \told := currentDesktop\n \tcurrentDesktop = splitSkippingEmpty(current, ':')"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "41b3b2be04842e08322713e36638684a0c74bb0b",
            "date": "2025-01-14T12:43:22Z",
            "author_login": "bboozzoo"
          },
          {
            "sha": "e2ff00fea3578c22103487f8e851a913e0c135c5",
            "date": "2025-01-14T08:04:48Z",
            "author_login": "maykathm"
          },
          {
            "sha": "3b68396cb05f389d9094addaefdef18363beae8f",
            "date": "2025-01-13T21:55:56Z",
            "author_login": "alfonsosanchezbeato"
          },
          {
            "sha": "58dd030489126d1984045cbdccf087190475e2a0",
            "date": "2025-01-13T19:12:02Z",
            "author_login": "olivercalder"
          },
          {
            "sha": "d0a017b0e0d7a3ea0b4c27394de8b0e9c8db8a13",
            "date": "2025-01-13T14:51:15Z",
            "author_login": "sespiros"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-276",
    "description": "snapd 2.54.2 and earlier created ~/snap directories in user home directories without specifying owner-only permissions. This could allow a local attacker to read information that should have been private. Fixed in snapd versions 2.54.3+18.04, 2.54.3+20.04 and 2.54.3+21.10.1",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-17T23:15:07.337",
    "last_modified": "2024-11-21T06:21:00.923",
    "fix_date": "2021-05-31T07:11:35Z"
  },
  "references": [
    {
      "url": "https://github.com/snapcore/snapd/commit/6bcaeeccd16ed8298a301dd92f6907f88c24cc85",
      "source": "security@ubuntu.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/snapcore/snapd/commit/7d2a966620002149891446a53cf114804808dcca",
      "source": "security@ubuntu.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://ubuntu.com/security/notices/USN-5292-1",
      "source": "security@ubuntu.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/snapcore/snapd/commit/6bcaeeccd16ed8298a301dd92f6907f88c24cc85",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/snapcore/snapd/commit/7d2a966620002149891446a53cf114804808dcca",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://ubuntu.com/security/notices/USN-5292-1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.726629",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "snapd",
    "owner": "snapcore",
    "created_at": "2015-10-21T11:51:46Z",
    "updated_at": "2025-01-14T12:43:28Z",
    "pushed_at": "2025-01-14T12:43:23Z",
    "size": 161408,
    "stars": 1915,
    "forks": 591,
    "open_issues": 142,
    "watchers": 1915,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "fde-manager-features",
      "master",
      "release/2.16",
      "release/2.17",
      "release/2.17.1",
      "release/2.18",
      "release/2.18.1",
      "release/2.19.1",
      "release/2.20",
      "release/2.20.1",
      "release/2.21",
      "release/2.22",
      "release/2.23",
      "release/2.24",
      "release/2.25",
      "release/2.26",
      "release/2.27"
    ],
    "languages": {
      "Go": 27089545,
      "C": 807343,
      "Shell": 615686,
      "Python": 226099,
      "Makefile": 104313,
      "M4": 13227,
      "Tcl": 1269,
      "HTML": 980,
      "Meson": 295,
      "Roff": 12
    },
    "commit_activity": {
      "total_commits_last_year": 1621,
      "avg_commits_per_week": 31.173076923076923,
      "days_active_last_year": 250
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T14:16:07.730623"
  }
}