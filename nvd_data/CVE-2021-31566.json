{
  "cve_id": "CVE-2021-31566",
  "github_data": {
    "repository": "libarchive/libarchive",
    "fix_commit": "b41daecb5ccb4c8e3b2c53fd6147109fc12c3043",
    "related_commits": [
      "b41daecb5ccb4c8e3b2c53fd6147109fc12c3043",
      "b41daecb5ccb4c8e3b2c53fd6147109fc12c3043"
    ],
    "patch_url": "https://github.com/libarchive/libarchive/commit/b41daecb5ccb4c8e3b2c53fd6147109fc12c3043.patch",
    "fix_commit_details": {
      "sha": "b41daecb5ccb4c8e3b2c53fd6147109fc12c3043",
      "commit_date": "2021-08-19T23:50:27Z",
      "author": {
        "login": "mmatuska",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Do not follow symlinks when processing the fixup list",
        "length": 186,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 103,
        "additions": 102,
        "deletions": 1
      },
      "files": [
        {
          "filename": "Makefile.am",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -560,6 +560,7 @@ libarchive_test_SOURCES= \\\n \tlibarchive/test/test_write_disk.c \\\n \tlibarchive/test/test_write_disk_appledouble.c \\\n \tlibarchive/test/test_write_disk_failures.c \\\n+\tlibarchive/test/test_write_disk_fixup.c \\\n \tlibarchive/test/test_write_disk_hardlink.c \\\n \tlibarchive/test/test_write_disk_hfs_compression.c \\\n \tlibarchive/test/test_write_disk_lookup.c \\"
        },
        {
          "filename": "libarchive/archive_write_disk_posix.c",
          "status": "modified",
          "additions": 23,
          "deletions": 1,
          "patch": "@@ -2461,6 +2461,7 @@ _archive_write_disk_close(struct archive *_a)\n {\n \tstruct archive_write_disk *a = (struct archive_write_disk *)_a;\n \tstruct fixup_entry *next, *p;\n+\tstruct stat st;\n \tint fd, ret;\n \n \tarchive_check_magic(&a->archive, ARCHIVE_WRITE_DISK_MAGIC,\n@@ -2478,6 +2479,20 @@ _archive_write_disk_close(struct archive *_a)\n \t\t    (TODO_TIMES | TODO_MODE_BASE | TODO_ACLS | TODO_FFLAGS)) {\n \t\t\tfd = open(p->name,\n \t\t\t    O_WRONLY | O_BINARY | O_NOFOLLOW | O_CLOEXEC);\n+\t\t\tif (fd == -1) {\n+\t\t\t\t/* If we cannot lstat, skip entry */\n+\t\t\t\tif (lstat(p->name, &st) != 0)\n+\t\t\t\t\tgoto skip_fixup_entry;\n+\t\t\t\t/*\n+\t\t\t\t * If we deal with a symbolic link, mark\n+\t\t\t\t * it in the fixup mode to ensure no\n+\t\t\t\t * modifications are made to its target.\n+\t\t\t\t */\n+\t\t\t\tif (S_ISLNK(st.st_mode)) {\n+\t\t\t\t\tp->mode &= ~S_IFMT;\n+\t\t\t\t\tp->mode |= S_IFLNK;\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \t\tif (p->fixup & TODO_TIMES) {\n \t\t\tset_times(a, fd, p->mode, p->name,\n@@ -2492,7 +2507,12 @@ _archive_write_disk_close(struct archive *_a)\n \t\t\t\tfchmod(fd, p->mode);\n \t\t\telse\n #endif\n-\t\t\tchmod(p->name, p->mode);\n+#ifdef HAVE_LCHMOD\n+\t\t\tlchmod(p->name, p->mode);\n+#else\n+\t\t\tif (!S_ISLNK(p->mode))\n+\t\t\t\tchmod(p->name, p->mode);\n+#endif\n \t\t}\n \t\tif (p->fixup & TODO_ACLS)\n \t\t\tarchive_write_disk_set_acls(&a->archive, fd,\n@@ -2503,6 +2523,7 @@ _archive_write_disk_close(struct archive *_a)\n \t\tif (p->fixup & TODO_MAC_METADATA)\n \t\t\tset_mac_metadata(a, p->name, p->mac_metadata,\n \t\t\t\t\t p->mac_metadata_size);\n+skip_fixup_entry:\n \t\tnext = p->next;\n \t\tarchive_acl_clear(&p->acl);\n \t\tfree(p->mac_metadata);\n@@ -2643,6 +2664,7 @@ new_fixup(struct archive_write_disk *a, const char *pathname)\n \tfe->next = a->fixup_list;\n \ta->fixup_list = fe;\n \tfe->fixup = 0;\n+\tfe->mode = 0;\n \tfe->name = strdup(pathname);\n \treturn (fe);\n }"
        },
        {
          "filename": "libarchive/test/CMakeLists.txt",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -209,6 +209,7 @@ IF(ENABLE_TEST)\n     test_write_disk.c\n     test_write_disk_appledouble.c\n     test_write_disk_failures.c\n+    test_write_disk_fixup.c\n     test_write_disk_hardlink.c\n     test_write_disk_hfs_compression.c\n     test_write_disk_lookup.c"
        },
        {
          "filename": "libarchive/test/test_write_disk_fixup.c",
          "status": "added",
          "additions": 77,
          "deletions": 0,
          "patch": "@@ -0,0 +1,77 @@\n+/*-\n+ * Copyright (c) 2021 Martin Matuska\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n+ * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,\n+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+#include \"test.h\"\n+\n+/*\n+ * Test fixup entries don't follow symlinks\n+ */\n+DEFINE_TEST(test_write_disk_fixup)\n+{\n+\tstruct archive *ad;\n+\tstruct archive_entry *ae;\n+\tint r;\n+\n+\tif (!canSymlink()) {\n+\t\tskipping(\"Symlinks not supported\");\n+\t\treturn;\n+\t}\n+\n+\t/* Write entries to disk. */\n+\tassert((ad = archive_write_disk_new()) != NULL);\n+\n+\t/*\n+\t * Create a file\n+\t */\n+\tassertMakeFile(\"victim\", 0600, \"a\");\n+\n+\t/*\n+\t * Create a directory and a symlink with the same name\n+\t */\n+\n+\t/* Directory: dir */\n+        assert((ae = archive_entry_new()) != NULL);\n+        archive_entry_copy_pathname(ae, \"dir\");\n+        archive_entry_set_mode(ae, AE_IFDIR | 0606);\n+\tassertEqualIntA(ad, 0, archive_write_header(ad, ae));\n+\tassertEqualIntA(ad, 0, archive_write_finish_entry(ad));\n+        archive_entry_free(ae);\n+\n+\t/* Symbolic Link: dir -> foo */\n+\tassert((ae = archive_entry_new()) != NULL);\n+\tarchive_entry_copy_pathname(ae, \"dir\");\n+\tarchive_entry_set_mode(ae, AE_IFLNK | 0777);\n+\tarchive_entry_set_size(ae, 0);\n+\tarchive_entry_copy_symlink(ae, \"victim\");\n+\tassertEqualIntA(ad, 0, r = archive_write_header(ad, ae));\n+\tif (r >= ARCHIVE_WARN)\n+\t\tassertEqualIntA(ad, 0, archive_write_finish_entry(ad));\n+\tarchive_entry_free(ae);\n+\n+\tassertEqualInt(ARCHIVE_OK, archive_write_free(ad));\n+\n+\t/* Test the entries on disk. */\n+\tassertIsSymlink(\"dir\", \"victim\", 0);\n+\tassertFileMode(\"victim\", 0600);\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "42565b88b5cc7441239269902a9d1735fd9ca0e2",
            "date": "2025-01-07T00:44:40Z",
            "author_login": "gperciva"
          },
          {
            "sha": "743bbe97693f648e05dc428a770fefed5f1a7d3f",
            "date": "2025-01-01T23:36:17Z",
            "author_login": "mostynb"
          },
          {
            "sha": "7708713b634eb2f72ffe484b565a5a87f58e8cb3",
            "date": "2025-01-01T23:30:37Z",
            "author_login": "mostynb"
          },
          {
            "sha": "a186d9662b4e3bc2e0f39d3248f9c1244c4346cb",
            "date": "2025-01-01T18:56:51Z",
            "author_login": "thesamesam"
          },
          {
            "sha": "14b8803c40d36fe1f0c8b3bb2846d865e3adcfce",
            "date": "2025-01-01T16:31:35Z",
            "author_login": "CookiePLMonster"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-59",
    "description": "An improper link resolution flaw can occur while extracting an archive leading to changing modes, times, access control lists, and flags of a file outside of the archive. An attacker may provide a malicious archive to a victim user, who would trigger this flaw when trying to extract the archive. A local attacker may use this flaw to gain more privileges in a system.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-23T16:15:09.337",
    "last_modified": "2024-11-21T06:05:55.217",
    "fix_date": "2021-08-19T23:50:27Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/security/cve/CVE-2021-31566",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2024237",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/libarchive/libarchive/commit/b41daecb5ccb4c8e3b2c53fd6147109fc12c3043",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/libarchive/libarchive/issues/1566",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/11/msg00030.html",
      "source": "secalert@redhat.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/security/cve/CVE-2021-31566",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2024237",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/libarchive/libarchive/commit/b41daecb5ccb4c8e3b2c53fd6147109fc12c3043",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/libarchive/libarchive/issues/1566",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/11/msg00030.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.284590",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "libarchive",
    "owner": "libarchive",
    "created_at": "2012-01-19T18:16:02Z",
    "updated_at": "2025-01-13T10:21:51Z",
    "pushed_at": "2025-01-07T00:44:40Z",
    "size": 27999,
    "stars": 3098,
    "forks": 776,
    "open_issues": 485,
    "watchers": 3098,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master",
      "patch/3.5",
      "patch/3.7"
    ],
    "languages": {
      "C": 7080834,
      "Roff": 378587,
      "CMake": 140517,
      "M4": 123454,
      "Makefile": 75578,
      "Shell": 52106,
      "C++": 28869,
      "Batchfile": 12189,
      "Dockerfile": 792
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:03:25.247306"
  }
}