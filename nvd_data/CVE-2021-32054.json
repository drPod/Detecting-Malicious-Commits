{
  "cve_id": "CVE-2021-32054",
  "github_data": {
    "repository": "FirelyTeam/spark",
    "fix_commit": "9c79320059f92d8aa4fbd6cc4fa8f9d5d6ba9941",
    "related_commits": [
      "9c79320059f92d8aa4fbd6cc4fa8f9d5d6ba9941",
      "9c79320059f92d8aa4fbd6cc4fa8f9d5d6ba9941"
    ],
    "patch_url": "https://github.com/FirelyTeam/spark/commit/9c79320059f92d8aa4fbd6cc4fa8f9d5d6ba9941.patch",
    "fix_commit_details": {
      "sha": "9c79320059f92d8aa4fbd6cc4fa8f9d5d6ba9941",
      "commit_date": "2021-05-07T12:40:15Z",
      "author": {
        "login": "kennethmyhra",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "refactor: Add constants for HTTP Header field names",
        "length": 162,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 36,
        "additions": 28,
        "deletions": 8
      },
      "files": [
        {
          "filename": "src/Spark.Engine/Core/HttpHeaderName.cs",
          "status": "added",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -0,0 +1,15 @@\n+\ufeffnamespace Spark.Engine.Core\n+{\n+    internal static class HttpHeaderName\n+    {\n+        public const string ACCEPT = \"Accept\";\n+        public const string CONTENT_DISPOSITION = \"Content-Disposition\";\n+        public const string CONTENT_LOCATION = \"Content-Location\";\n+        public const string CONTENT_TYPE = \"Content-Type\";\n+        public const string ETAG = \"ETag\";\n+        public const string LOCATION = \"Location\";\n+        public const string LAST_MODIFIED = \"Last-Modified\";\n+\n+        public const string X_CONTENT_TYPE = \"X-Content-Type\";\n+    }\n+}"
        },
        {
          "filename": "src/Spark.Engine/Extensions/HttpRequestFhirExtensions.cs",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -158,17 +158,17 @@ internal static void AcquireHeaders(this HttpResponse response, FhirResponse fhi\n         {\n             if (fhirResponse.Key != null)\n             {\n-                response.Headers.Add(\"ETag\", ETag.Create(fhirResponse.Key.VersionId)?.ToString());\n+                response.Headers.Add(HttpHeaderName.ETAG, ETag.Create(fhirResponse.Key.VersionId)?.ToString());\n \n                 Uri location = fhirResponse.Key.ToUri();\n-                response.Headers.Add(\"Location\", location.OriginalString);\n+                response.Headers.Add(HttpHeaderName.LOCATION, location.OriginalString);\n \n                 if (response.Body != null)\n                 {\n-                    response.Headers.Add(\"Content-Location\", location.OriginalString);\n+                    response.Headers.Add(HttpHeaderName.CONTENT_LOCATION, location.OriginalString);\n                     if (fhirResponse.Resource != null && fhirResponse.Resource.Meta != null)\n                     {\n-                        response.Headers.Add(\"Last-Modified\", fhirResponse.Resource.Meta.LastUpdated.Value.ToString(\"R\"));\n+                        response.Headers.Add(HttpHeaderName.LAST_MODIFIED, fhirResponse.Resource.Meta.LastUpdated.Value.ToString(\"R\"));\n                     }\n                 }\n             }\n@@ -192,6 +192,10 @@ internal static void AcquireHeaders(this HttpResponseMessage response, FhirRespo\n                     {\n                         response.Content.Headers.LastModified = fhirResponse.Resource.Meta.LastUpdated;\n                     }\n+                    if(fhirResponse.Resource is Binary)\n+                    {\n+                        response.Content.Headers.Add(HttpHeaderName.CONTENT_DISPOSITION, \"attachment\");\n+                    }\n                 }\n             }\n         }"
        },
        {
          "filename": "src/Spark.Engine/Formatters/NetCore/BinaryOutputFormatter.cs",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -37,6 +37,7 @@ public override async Task WriteResponseBodyAsync(OutputFormatterWriteContext co\n                 }\n                 if (binary == null) return;\n \n+                context.HttpContext.Response.Headers.Add(HttpHeaderName.CONTENT_DISPOSITION, \"attachment\");\n                 context.HttpContext.Response.ContentType = binary.ContentType;\n \n                 Stream stream = new MemoryStream(binary.Data);"
        },
        {
          "filename": "src/Spark.Engine/Handlers/NetCore/FormatTypeHandler.cs",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -25,11 +25,11 @@ public async Task InvokeAsync(HttpContext context)\n                 ResourceFormat accepted = ContentType.GetResourceFormatFromFormatParam(format);\n                 if (accepted != ResourceFormat.Unknown)\n                 {\n-                    if (context.Request.Headers.ContainsKey(\"Accept\")) context.Request.Headers.Remove(\"Accept\");\n+                    if (context.Request.Headers.ContainsKey(HttpHeaderName.ACCEPT)) context.Request.Headers.Remove(HttpHeaderName.ACCEPT);\n                     if (accepted == ResourceFormat.Json)\n-                        context.Request.Headers.Add(\"Accept\", new StringValues(ContentType.JSON_CONTENT_HEADER));\n+                        context.Request.Headers.Add(HttpHeaderName.ACCEPT, new StringValues(ContentType.JSON_CONTENT_HEADER));\n                     else\n-                        context.Request.Headers.Add(\"Accept\", new StringValues(ContentType.XML_CONTENT_HEADER));\n+                        context.Request.Headers.Add(HttpHeaderName.ACCEPT, new StringValues(ContentType.XML_CONTENT_HEADER));\n                 }\n             }\n \n@@ -38,7 +38,7 @@ public async Task InvokeAsync(HttpContext context)\n                 if (!HttpRequestExtensions.IsContentTypeHeaderFhirMediaType(context.Request.ContentType))\n                 {\n                     string contentType = context.Request.ContentType;\n-                    context.Request.Headers.Add(\"X-Content-Type\", contentType);\n+                    context.Request.Headers.Add(HttpHeaderName.X_CONTENT_TYPE, contentType);\n                     context.Request.ContentType = FhirMediaType.OctetStreamMimeType;\n                 }\n             }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6ce1c9e949392c95c766c786fbf02bc9edb114b4",
            "date": "2024-12-23T11:56:07Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "d2a642c3b2e2ca1d91a26d6a54cb7c8c3a98ad62",
            "date": "2024-12-23T04:47:01Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "8bcc822f4529e8ac58353353d73a98ae5856fae3",
            "date": "2024-12-20T07:44:59Z",
            "author_login": "kennethmyhra"
          },
          {
            "sha": "51f380b3784f65d69fb35866e1a0a6e462a5e5d3",
            "date": "2024-12-20T07:44:05Z",
            "author_login": "kennethmyhra"
          },
          {
            "sha": "a6866a9ba4d04891432d271581bf75e7d5710f78",
            "date": "2024-12-05T07:52:26Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-706",
    "description": "Firely/Incendi Spark before 1.5.5-r4 lacks Content-Disposition headers in certain situations, which may cause crafted files to be delivered to clients such that they are rendered directly in a victim's web browser.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-05-14T21:15:07.490",
    "last_modified": "2024-11-21T06:06:46.483",
    "fix_date": "2021-05-07T12:40:15Z"
  },
  "references": [
    {
      "url": "https://github.com/FirelyTeam/spark/commit/9c79320059f92d8aa4fbd6cc4fa8f9d5d6ba9941",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FirelyTeam/spark/compare/v1.5.4-r4...v1.5.5-r4",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FirelyTeam/spark/releases/tag/v1.5.5-r4",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FirelyTeam/spark/commit/9c79320059f92d8aa4fbd6cc4fa8f9d5d6ba9941",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FirelyTeam/spark/compare/v1.5.4-r4...v1.5.5-r4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/FirelyTeam/spark/releases/tag/v1.5.5-r4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:57.100133",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "spark",
    "owner": "FirelyTeam",
    "created_at": "2014-02-27T15:03:09Z",
    "updated_at": "2025-01-01T23:26:08Z",
    "pushed_at": "2025-01-14T04:50:44Z",
    "size": 294537,
    "stars": 261,
    "forks": 166,
    "open_issues": 49,
    "watchers": 261,
    "has_security_policy": false,
    "default_branch": "r4/master",
    "protected_branches": [
      "dstu1/master",
      "master",
      "r4b/master",
      "r4/master",
      "stu3/master"
    ],
    "languages": {
      "C#": 850789,
      "HTML": 10337,
      "XSLT": 10017,
      "JavaScript": 1837,
      "Shell": 1636,
      "Dockerfile": 868,
      "Batchfile": 106
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T17:56:50.206018"
  }
}