{
  "cve_id": "CVE-2021-32132",
  "github_data": {
    "repository": "gpac/gpac",
    "fix_commit": "e74be5976a6fee059c638050a237893f7e9a3b23",
    "related_commits": [
      "e74be5976a6fee059c638050a237893f7e9a3b23",
      "e74be5976a6fee059c638050a237893f7e9a3b23"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "e74be5976a6fee059c638050a237893f7e9a3b23",
      "commit_date": "2021-04-22T08:59:53Z",
      "author": {
        "login": "jeanlf",
        "type": "User",
        "stats": {
          "total_commits": 11743,
          "average_weekly_commits": 11.501469147894221,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 833
        }
      },
      "commit_message": {
        "title": "fixed #1753",
        "length": 11,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 85,
        "additions": 59,
        "deletions": 26
      },
      "files": [
        {
          "filename": "include/gpac/internal/isomedia_dev.h",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -599,6 +599,13 @@ typedef struct\n \t\t}\\\n \t\t__ptr->size -= bytes; \\\n \n+#define ISOM_DECREASE_SIZE_GOTO_EXIT(__ptr, bytes)\tif (__ptr->size < (bytes) ) {\\\n+\t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[isom] not enough bytes in box %s: %d left, reading %d (file %s, line %d)\\n\", gf_4cc_to_str(__ptr->type), (u32) __ptr->size, (bytes), __FILE__, __LINE__ )); \\\n+\t\t\te = GF_ISOM_INVALID_FILE; \\\n+\t\t\tgoto exit;\\\n+\t\t}\\\n+\t\t__ptr->size -= bytes; \\\n+\n \n #define ISOM_DECREASE_SIZE_NO_ERR(__ptr, bytes)\tif (__ptr->size < (bytes) ) {\\\n \t\t\tGF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[isom] not enough bytes in box %s: %d left, reading %d (file %s, line %d), skipping box\\n\", gf_4cc_to_str(__ptr->type), (u32) __ptr->size, (bytes), __FILE__, __LINE__ )); \\"
        },
        {
          "filename": "src/isomedia/box_code_adobe.c",
          "status": "modified",
          "additions": 52,
          "deletions": 26,
          "patch": "@@ -80,7 +80,7 @@ GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n \tu32 tmp_strsize;\n \tchar *tmp_str;\n \tBool zfound=GF_FALSE;\n-\tGF_Err e;\n+\tGF_Err e = GF_OK;\n \n \tISOM_DECREASE_SIZE(ptr, 25)\n \tptr->bootstrapinfo_version = gf_bs_read_u32(bs);\n@@ -100,7 +100,7 @@ GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n \tmemset(tmp_str, 0, sizeof(char)*tmp_strsize);\n \n \twhile (tmp_strsize) {\n-\t\tISOM_DECREASE_SIZE(ptr, 1)\n+\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n \t\ttmp_str[i] = gf_bs_read_u8(bs);\n \t\ttmp_strsize--;\n \t\tif (!tmp_str[i]) {\n@@ -109,20 +109,22 @@ GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n \t\t}\n \t\ti++;\n \t}\n-\tif (!zfound)\n-\t\treturn GF_ISOM_INVALID_FILE;\n+\tif (!zfound) {\n+\t\te = GF_ISOM_INVALID_FILE;\n+\t\tgoto exit;\n+\t}\n \tif (i) {\n \t\tptr->movie_identifier = gf_strdup(tmp_str);\n \t}\n \n-\tISOM_DECREASE_SIZE(ptr, 1)\n+\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n \tptr->server_entry_count = gf_bs_read_u8(bs);\n \tfor (i=0; i<ptr->server_entry_count; i++) {\n \t\tint j=0;\n \t\tzfound = GF_FALSE;\n \t\ttmp_strsize=(u32)ptr->size;\n \t\twhile (tmp_strsize) {\n-\t\t\tISOM_DECREASE_SIZE(ptr, 1)\n+\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n \t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n \t\t\ttmp_strsize--;\n \t\t\tif (!tmp_str[j]) {\n@@ -131,21 +133,27 @@ GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n \t\t\t}\n \t\t\tj++;\n \t\t}\n-\t\tif (!zfound)\n-\t\t\treturn GF_ISOM_INVALID_FILE;\n+\t\tif (!zfound) {\n+\t\t\te = GF_ISOM_INVALID_FILE;\n+\t\t\tgoto exit;\n+\t\t}\n \t\tif (j) {\n \t\t\tgf_list_insert(ptr->server_entry_table, gf_strdup(tmp_str), i);\n \t\t}\n \t}\n+\tif (ptr->server_entry_count != gf_list_count(ptr->server_entry_table)) {\n+\t\te = GF_ISOM_INVALID_FILE;\n+\t\tgoto exit;\n+\t}\n \n-\tISOM_DECREASE_SIZE(ptr, 1)\n+\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n \tptr->quality_entry_count = gf_bs_read_u8(bs);\n \tfor (i=0; i<ptr->quality_entry_count; i++) {\n \t\tint j=0;\n \t\tzfound = GF_FALSE;\n \t\ttmp_strsize=(u32)ptr->size;\n \t\twhile (tmp_strsize) {\n-\t\t\tISOM_DECREASE_SIZE(ptr, 1)\n+\t\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n \t\t\ttmp_str[j] = gf_bs_read_u8(bs);\n \t\t\ttmp_strsize--;\n \t\t\tif (!tmp_str[j]) {\n@@ -155,18 +163,24 @@ GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n \t\t\tj++;\n \t\t}\n \n-\t\tif (!zfound)\n-\t\t\treturn GF_ISOM_INVALID_FILE;\n+\t\tif (!zfound) {\n+\t\t\te = GF_ISOM_INVALID_FILE;\n+\t\t\tgoto exit;\n+\t\t}\n \t\tif (j) {\n \t\t\tgf_list_insert(ptr->quality_entry_table, gf_strdup(tmp_str), i);\n \t\t}\n \t}\n+\tif (ptr->quality_entry_count != gf_list_count(ptr->quality_entry_table)) {\n+\t\te = GF_ISOM_INVALID_FILE;\n+\t\tgoto exit;\n+\t}\n \n \ti=0;\n \ttmp_strsize=(u32)ptr->size;\n \tzfound = GF_FALSE;\n \twhile (tmp_strsize) {\n-\t\tISOM_DECREASE_SIZE(ptr, 1)\n+\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n \t\ttmp_str[i] = gf_bs_read_u8(bs);\n \t\ttmp_strsize--;\n \t\tif (!tmp_str[i]) {\n@@ -175,8 +189,11 @@ GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n \t\t}\n \t\ti++;\n \t}\n-\tif (!zfound)\n-\t\treturn GF_ISOM_INVALID_FILE;\n+\tif (!zfound) {\n+\t\te = GF_ISOM_INVALID_FILE;\n+\t\tgoto exit;\n+\t}\n+\n \tif (i) {\n \t\tptr->drm_data = gf_strdup(tmp_str);\n \t}\n@@ -185,7 +202,7 @@ GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n \ttmp_strsize=(u32)ptr->size;\n \tzfound = GF_FALSE;\n \twhile (tmp_strsize) {\n-\t\tISOM_DECREASE_SIZE(ptr, 1)\n+\t\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n \t\ttmp_str[i] = gf_bs_read_u8(bs);\n \t\ttmp_strsize--;\n \t\tif (!tmp_str[i]) {\n@@ -194,41 +211,50 @@ GF_Err abst_box_read(GF_Box *s, GF_BitStream *bs)\n \t\t}\n \t\ti++;\n \t}\n-\tif (!zfound)\n-\t\treturn GF_ISOM_INVALID_FILE;\n+\tif (!zfound) {\n+\t\te = GF_ISOM_INVALID_FILE;\n+\t\tgoto exit;\n+\t}\n+\n \tif (i) {\n \t\tptr->meta_data = gf_strdup(tmp_str);\n \t}\n \n-\tISOM_DECREASE_SIZE(ptr, 1)\n+\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n \tptr->segment_run_table_count = gf_bs_read_u8(bs);\n \tfor (i=0; i<ptr->segment_run_table_count; i++) {\n \t\tGF_AdobeSegmentRunTableBox *asrt = NULL;\n \t\te = gf_isom_box_parse((GF_Box **)&asrt, bs);\n \t\tif (e) {\n \t\t\tif (asrt) gf_isom_box_del((GF_Box*)asrt);\n-\t\t\tgf_free(tmp_str);\n-\t\t\treturn e;\n+\t\t\tgoto exit;\n \t\t}\n \t\tgf_list_add(ptr->segment_run_table_entries, asrt);\n \t}\n+\tif (ptr->segment_run_table_count != gf_list_count(ptr->segment_run_table_entries)) {\n+\t\te = GF_ISOM_INVALID_FILE;\n+\t\tgoto exit;\n+\t}\n \n-\tISOM_DECREASE_SIZE(ptr, 1)\n+\tISOM_DECREASE_SIZE_GOTO_EXIT(ptr, 1)\n \tptr->fragment_run_table_count = gf_bs_read_u8(bs);\n \tfor (i=0; i<ptr->fragment_run_table_count; i++) {\n \t\tGF_AdobeFragmentRunTableBox *afrt = NULL;\n \t\te = gf_isom_box_parse((GF_Box **)&afrt, bs);\n \t\tif (e) {\n \t\t\tif (afrt) gf_isom_box_del((GF_Box*)afrt);\n-\t\t\tgf_free(tmp_str);\n-\t\t\treturn e;\n+\t\t\tgoto exit;\n \t\t}\n \t\tgf_list_add(ptr->fragment_run_table_entries, afrt);\n \t}\n+\tif (ptr->fragment_run_table_count != gf_list_count(ptr->fragment_run_table_entries)) {\n+\t\te = GF_ISOM_INVALID_FILE;\n+\t\tgoto exit;\n+\t}\n \n+exit:\n \tgf_free(tmp_str);\n-\n-\treturn GF_OK;\n+\treturn e;\n }\n \n GF_Box *abst_box_new()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c5d9ff66f5774d9c2abef9069544b3a5228227c0",
            "date": "2025-01-23T17:17:00Z",
            "author_login": "rbouqueau"
          },
          {
            "sha": "ca802c463137bd497be16a623aa24eeea3a7b448",
            "date": "2025-01-23T14:31:26Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "ea54ea8df17e408119fd5d9aca5582b0d712c369",
            "date": "2025-01-23T14:31:03Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "5ff728a44c4a71eae0ae0ff4bb494e52beb68ac7",
            "date": "2025-01-23T14:34:18Z",
            "author_login": "jeanlf"
          },
          {
            "sha": "7529a44d9797a640672e25c3dbb6247e1e30ab6b",
            "date": "2025-01-09T13:57:28Z",
            "author_login": "jeanlf"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "The abst_box_size function in GPAC 1.0.1 allows attackers to cause a denial of service (NULL pointer dereference) via a crafted file in the MP4Box command.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-13T15:15:24.477",
    "last_modified": "2024-11-21T06:06:51.580",
    "fix_date": "2021-04-22T08:59:53Z"
  },
  "references": [
    {
      "url": "https://github.com/gpac/gpac/commit/e74be5976a6fee059c638050a237893f7e9a3b23",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/issues/1753",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/commit/e74be5976a6fee059c638050a237893f7e9a3b23",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/issues/1753",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.749534",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "gpac",
    "owner": "gpac",
    "created_at": "2014-05-03T11:29:57Z",
    "updated_at": "2025-01-24T03:35:30Z",
    "pushed_at": "2025-01-25T22:34:55Z",
    "size": 148900,
    "stars": 2868,
    "forks": 541,
    "open_issues": 87,
    "watchers": 2868,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29236526,
      "JavaScript": 1166250,
      "C++": 591365,
      "Roff": 570704,
      "Python": 185337,
      "Makefile": 105620,
      "HTML": 100652,
      "Java": 92437,
      "GLSL": 90260,
      "Objective-C": 24884,
      "Shell": 21810,
      "NSIS": 17560,
      "Rez": 13704,
      "CSS": 4998,
      "Batchfile": 4898,
      "Dockerfile": 3216,
      "Nix": 1229
    },
    "commit_activity": {
      "total_commits_last_year": 1277,
      "avg_commits_per_week": 24.557692307692307,
      "days_active_last_year": 239
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-26T07:37:36.451192"
  }
}