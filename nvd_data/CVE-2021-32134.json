{
  "cve_id": "CVE-2021-32134",
  "github_data": {
    "repository": "gpac/gpac",
    "fix_commit": "328c6d682698fdb9878dbb4f282963d42c538c01",
    "related_commits": [
      "328c6d682698fdb9878dbb4f282963d42c538c01",
      "328c6d682698fdb9878dbb4f282963d42c538c01"
    ],
    "patch_url": "https://github.com/gpac/gpac/commit/328c6d682698fdb9878dbb4f282963d42c538c01.patch",
    "fix_commit_details": {
      "sha": "328c6d682698fdb9878dbb4f282963d42c538c01",
      "commit_date": "2021-04-23T12:35:56Z",
      "author": {
        "login": "jeanlf",
        "type": "User",
        "stats": {
          "total_commits": 11740,
          "average_weekly_commits": 11.521099116781159,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 832
        }
      },
      "commit_message": {
        "title": "fixed #1756",
        "length": 11,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 39,
        "additions": 36,
        "deletions": 3
      },
      "files": [
        {
          "filename": "src/isomedia/box_code_base.c",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -4111,15 +4111,13 @@ GF_Box *mp4s_box_new()\n {\n \tISOM_DECL_BOX_ALLOC(GF_MPEGSampleEntryBox, GF_ISOM_BOX_TYPE_MP4S);\n \tgf_isom_sample_entry_init((GF_SampleEntryBox*)tmp);\n-\ttmp->internal_type = GF_ISOM_SAMPLE_ENTRY_MP4S;\n \treturn (GF_Box *)tmp;\n }\n \n GF_Box *encs_box_new()\n {\n \tISOM_DECL_BOX_ALLOC(GF_MPEGSampleEntryBox, GF_ISOM_BOX_TYPE_ENCS);\n \tgf_isom_sample_entry_init((GF_SampleEntryBox*)tmp);\n-\ttmp->internal_type = GF_ISOM_SAMPLE_ENTRY_MP4S;\n \treturn (GF_Box *)tmp;\n }\n "
        },
        {
          "filename": "src/isomedia/media.c",
          "status": "modified",
          "additions": 35,
          "deletions": 1,
          "patch": "@@ -181,8 +181,11 @@ GF_Err Media_GetESD(GF_MediaBox *mdia, u32 sampleDescIndex, GF_ESD **out_esd, Bo\n \t\tbreak;\n \t}\n \n+\n \tswitch (type) {\n \tcase GF_ISOM_BOX_TYPE_MP4V:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\tESDa = ((GF_MPEGVisualSampleEntryBox*)entry)->esd;\n \t\tif (ESDa) esd = (GF_ESD *) ESDa->desc;\n \t\t/*avc1 encrypted*/\n@@ -202,10 +205,14 @@ GF_Err Media_GetESD(GF_MediaBox *mdia, u32 sampleDescIndex, GF_ESD **out_esd, Bo\n \tcase GF_ISOM_BOX_TYPE_DVHE:\n \tcase GF_ISOM_BOX_TYPE_VVC1:\n \tcase GF_ISOM_BOX_TYPE_VVI1:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\tesd = ((GF_MPEGVisualSampleEntryBox*) entry)->emul_esd;\n \t\tbreak;\n \tcase GF_ISOM_BOX_TYPE_SVC1:\n \tcase GF_ISOM_BOX_TYPE_MVC1:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\tif ((mdia->mediaTrack->extractor_mode & 0x0000FFFF) != GF_ISOM_NALU_EXTRACT_INSPECT)\n \t\t\tAVC_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*) entry, mdia);\n \t\telse\n@@ -214,22 +221,30 @@ GF_Err Media_GetESD(GF_MediaBox *mdia, u32 sampleDescIndex, GF_ESD **out_esd, Bo\n \t\tbreak;\n \tcase GF_ISOM_BOX_TYPE_LHE1:\n \tcase GF_ISOM_BOX_TYPE_LHV1:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\tif ((mdia->mediaTrack->extractor_mode & 0x0000FFFF) != GF_ISOM_NALU_EXTRACT_INSPECT)\n \t\t\tHEVC_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*) entry, mdia);\n \t\telse\n \t\t\tHEVC_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*) entry, NULL);\n \t\tesd = ((GF_MPEGVisualSampleEntryBox*) entry)->emul_esd;\n \t\tbreak;\n \tcase GF_ISOM_BOX_TYPE_AV01:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\tAV1_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*)entry, mdia);\n \t\tesd = ((GF_MPEGVisualSampleEntryBox*)entry)->emul_esd;\n \t\tbreak;\n \tcase GF_ISOM_BOX_TYPE_VP08:\n \tcase GF_ISOM_BOX_TYPE_VP09:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\tVP9_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*)entry, mdia);\n \t\tesd = ((GF_MPEGVisualSampleEntryBox*)entry)->emul_esd;\n \t\tbreak;\n \tcase GF_ISOM_BOX_TYPE_MP4A:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n         {\n             GF_MPEGAudioSampleEntryBox *ase = (GF_MPEGAudioSampleEntryBox*)entry;\n             ESDa = ase->esd;\n@@ -270,6 +285,9 @@ GF_Err Media_GetESD(GF_MediaBox *mdia, u32 sampleDescIndex, GF_ESD **out_esd, Bo\n #ifndef GPAC_DISABLE_TTXT\n \tcase GF_ISOM_BOX_TYPE_TX3G:\n \tcase GF_ISOM_BOX_TYPE_TEXT:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_MP4S)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n+\n \t\tif (!true_desc_only && mdia->mediaTrack->moov->mov->convert_streaming_text) {\n \t\t\tGF_Err e = gf_isom_get_ttxt_esd(mdia, out_esd);\n \t\t\tif (e) return e;\n@@ -280,6 +298,8 @@ GF_Err Media_GetESD(GF_MediaBox *mdia, u32 sampleDescIndex, GF_ESD **out_esd, Bo\n #endif\n #ifndef GPAC_DISABLE_VTT\n \tcase GF_ISOM_BOX_TYPE_WVTT:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_MP4S)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t{\n \t\tGF_WebVTTSampleEntryBox*vtte = (GF_WebVTTSampleEntryBox*)entry;\n \t\tesd =  gf_odf_desc_esd_new(2);\n@@ -304,13 +324,18 @@ GF_Err Media_GetESD(GF_MediaBox *mdia, u32 sampleDescIndex, GF_ESD **out_esd, Bo\n \tcase GF_ISOM_SUBTYPE_3GP_EVRC:\n \tcase GF_ISOM_SUBTYPE_3GP_QCELP:\n \tcase GF_ISOM_SUBTYPE_3GP_SMV:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\tif (!true_desc_only) {\n \t\t\tGF_Err e = gf_isom_get_3gpp_audio_esd(mdia->information->sampleTable, type, (GF_GenericAudioSampleEntryBox*)entry, out_esd);\n \t\t\tif (e) return e;\n \t\t\tbreak;\n \t\t} else return GF_ISOM_INVALID_MEDIA;\n \n-\tcase GF_ISOM_SUBTYPE_OPUS: {\n+\tcase GF_ISOM_SUBTYPE_OPUS:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n+\t{\n \t\tGF_OpusSpecificBox *e = ((GF_MPEGAudioSampleEntryBox*)entry)->cfg_opus;\n \t\tGF_BitStream *bs_out;\n \t\tif (!e) {\n@@ -331,6 +356,8 @@ GF_Err Media_GetESD(GF_MediaBox *mdia, u32 sampleDescIndex, GF_ESD **out_esd, Bo\n \t\tbreak;\n \t}\n \tcase GF_ISOM_SUBTYPE_3GP_H263:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\tif (true_desc_only) {\n \t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\t} else {\n@@ -342,6 +369,8 @@ GF_Err Media_GetESD(GF_MediaBox *mdia, u32 sampleDescIndex, GF_ESD **out_esd, Bo\n \t\t}\n \n \tcase GF_ISOM_SUBTYPE_MP3:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\tif (true_desc_only) {\n \t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\t} else {\n@@ -353,6 +382,8 @@ GF_Err Media_GetESD(GF_MediaBox *mdia, u32 sampleDescIndex, GF_ESD **out_esd, Bo\n \t\t}\n \n \tcase GF_ISOM_SUBTYPE_LSR1:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_MP4S)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\tif (true_desc_only) {\n \t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\t} else {\n@@ -371,6 +402,9 @@ GF_Err Media_GetESD(GF_MediaBox *mdia, u32 sampleDescIndex, GF_ESD **out_esd, Bo\n \tcase GF_ISOM_SUBTYPE_MH3D_MHA2:\n \tcase GF_ISOM_SUBTYPE_MH3D_MHM1:\n \tcase GF_ISOM_SUBTYPE_MH3D_MHM2:\n+\t\tif (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)\n+\t\t\treturn GF_ISOM_INVALID_MEDIA;\n+\n \t\tif (true_desc_only) {\n \t\t\treturn GF_ISOM_INVALID_MEDIA;\n \t\t} else {"
        },
        {
          "filename": "src/isomedia/sample_descs.c",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -45,6 +45,7 @@ void gf_isom_sample_entry_predestroy(GF_SampleEntryBox *ptr)\n \n void gf_isom_sample_entry_init(GF_SampleEntryBox *ent)\n {\n+\tent->internal_type = GF_ISOM_SAMPLE_ENTRY_MP4S;\n }\n \n void gf_isom_video_sample_entry_init(GF_VisualSampleEntryBox *ent)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e075efa1bd0984e0e87f6752f1e5b991ba3a7cf7",
            "date": "2025-01-14T15:00:34Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "7af1bfcdc25dd74e158437abd13858281ae1bea0",
            "date": "2025-01-14T12:33:00Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "08572e41a7eae3d7e4329bf88a455ba6cb209936",
            "date": "2025-01-14T12:18:43Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "5f2c53efbc58ecfb01885c73b9507413efde6c81",
            "date": "2025-01-14T11:46:01Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "f2082beb80c470f4eaf2bb0421b56e8adcde303a",
            "date": "2025-01-14T11:45:02Z",
            "author_login": "aureliendavid"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "The gf_odf_desc_copy function in GPAC 1.0.1 allows attackers to cause a denial of service (NULL pointer dereference) via a crafted file in the MP4Box command.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-13T14:15:07.720",
    "last_modified": "2024-11-21T06:06:51.723",
    "fix_date": "2021-04-23T12:35:56Z"
  },
  "references": [
    {
      "url": "https://github.com/gpac/gpac/commit/328c6d682698fdb9878dbb4f282963d42c538c01",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/issues/1756",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/commit/328c6d682698fdb9878dbb4f282963d42c538c01",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/issues/1756",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.748822",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gpac",
    "owner": "gpac",
    "created_at": "2014-05-03T11:29:57Z",
    "updated_at": "2025-01-14T12:51:06Z",
    "pushed_at": "2025-01-14T12:51:01Z",
    "size": 148655,
    "stars": 2857,
    "forks": 539,
    "open_issues": 84,
    "watchers": 2857,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29230795,
      "JavaScript": 1164507,
      "C++": 591365,
      "Roff": 570792,
      "Python": 185337,
      "Makefile": 105620,
      "HTML": 100652,
      "Java": 92437,
      "GLSL": 90260,
      "Objective-C": 24884,
      "Shell": 21810,
      "NSIS": 17560,
      "Rez": 13704,
      "CSS": 4998,
      "Batchfile": 4898,
      "Dockerfile": 3216,
      "Nix": 1229
    },
    "commit_activity": {
      "total_commits_last_year": 1273,
      "avg_commits_per_week": 24.48076923076923,
      "days_active_last_year": 239
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:56:58.367536"
  }
}