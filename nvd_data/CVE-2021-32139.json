{
  "cve_id": "CVE-2021-32139",
  "github_data": {
    "repository": "gpac/gpac",
    "fix_commit": "d527325a9b72218612455a534a508f9e1753f76e",
    "related_commits": [
      "d527325a9b72218612455a534a508f9e1753f76e",
      "d527325a9b72218612455a534a508f9e1753f76e"
    ],
    "patch_url": "https://github.com/gpac/gpac/commit/d527325a9b72218612455a534a508f9e1753f76e.patch",
    "fix_commit_details": {
      "sha": "d527325a9b72218612455a534a508f9e1753f76e",
      "commit_date": "2021-04-30T08:13:24Z",
      "author": {
        "login": "jeanlf",
        "type": "User",
        "stats": {
          "total_commits": 11740,
          "average_weekly_commits": 11.521099116781159,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 832
        }
      },
      "commit_message": {
        "title": "fixed #1768",
        "length": 11,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 138,
        "additions": 84,
        "deletions": 54
      },
      "files": [
        {
          "filename": "src/isomedia/box_code_3gpp.c",
          "status": "modified",
          "additions": 11,
          "deletions": 3,
          "patch": "@@ -347,10 +347,16 @@ GF_Err text_box_read(GF_Box *s, GF_BitStream *bs)\n \tu16 pSize;\n \tGF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;\n \n-\tISOM_DECREASE_SIZE(ptr, 51);\n-\n+\tISOM_DECREASE_SIZE(ptr, 8);\n \te = gf_isom_base_sample_entry_read((GF_SampleEntryBox *)ptr, bs);\n \tif (e) return e;\n+\t//some weird text entries are not QT text nor 3gpp, cf issue #1030\n+\tif (!ptr->size) {\n+\t\tptr->textJustification = 1;\n+\t\treturn GF_OK;\n+\t}\n+\tISOM_DECREASE_SIZE(ptr, 43);\n+\n \n \tptr->displayFlags = gf_bs_read_u32(bs);\t\t\t/*Display flags*/\n \tptr->textJustification = gf_bs_read_u32(bs);\t/*Text justification*/\n@@ -472,6 +478,7 @@ GF_Err text_box_write(GF_Box *s, GF_BitStream *bs)\n \tif (e) return e;\n \tgf_bs_write_data(bs, ptr->reserved, 6);\n \tgf_bs_write_u16(bs, ptr->dataReferenceIndex);\n+\n \tgf_bs_write_u32(bs, ptr->displayFlags);\t\t\t/*Display flags*/\n \tgf_bs_write_u32(bs, ptr->textJustification);\t/*Text justification*/\n \tgf_bs_write_data(bs, ptr->background_color, 6);\t/*Background color*/\n@@ -503,8 +510,9 @@ GF_Err text_box_size(GF_Box *s)\n {\n \tGF_TextSampleEntryBox *ptr = (GF_TextSampleEntryBox*)s;\n \n+\ts->size += 8;\n \t/*base + this + string length*/\n-\ts->size += 51 + 1;\n+\ts->size += 43 + 1;\n \tif (ptr->textName)\n \t\ts->size += strlen(ptr->textName);\n \treturn GF_OK;"
        },
        {
          "filename": "src/isomedia/box_funcs.c",
          "status": "modified",
          "additions": 0,
          "deletions": 10,
          "patch": "@@ -250,8 +250,6 @@ GF_Err gf_isom_box_parse_ex(GF_Box **outBox, GF_BitStream *bs, u32 parent_type,\n \n \tpayload_start = gf_bs_get_position(bs);\n \n-retry_unknown_box:\n-\n \tend = gf_bs_available(bs);\n \tif (size - hdr_size > end ) {\n \t\tnewBox->size = size - hdr_size - end;\n@@ -305,14 +303,6 @@ GF_Err gf_isom_box_parse_ex(GF_Box **outBox, GF_BitStream *bs, u32 parent_type,\n \t\tgf_isom_box_del(newBox);\n \t\t*outBox = NULL;\n \n-\t\tif (parent_type==GF_ISOM_BOX_TYPE_STSD) {\n-\t\t\tnewBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_UNKNOWN);\n-\t\t\tif (!newBox) return GF_OUT_OF_MEM;\n-\t\t\t((GF_UnknownBox *)newBox)->original_4cc = type;\n-\t\t\tnewBox->size = size;\n-\t\t\tgf_bs_seek(bs, payload_start);\n-\t\t\tgoto retry_unknown_box;\n-\t\t}\n \t\tif (!skip_logs) {\n \t\t\tGF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Read Box \\\"%s\\\" (start \"LLU\") failed (%s) - skipping\\n\", gf_4cc_to_str(type), start, gf_error_to_string(e)));\n \t\t}"
        },
        {
          "filename": "src/isomedia/tx3g.c",
          "status": "modified",
          "additions": 73,
          "deletions": 41,
          "patch": "@@ -28,14 +28,29 @@\n \n #ifndef GPAC_DISABLE_ISOM\n \n+static u32 rgb_48_to_32(char *val)\n+{\n+\tu32 res = 0x0;\n+\tu32 i;\n+\n+\tfor (i=0; i<3; i++) {\n+\t\tu32 v = val[2*i];\n+\t\tv<<=8;\n+\t\tv|=val[2*i + 1];\n+\t\tv/=0xFF;\n+\n+\t\tres <<= 8;\n+\t\tres |= v;\n+\t}\n+\treturn res;\n+}\n \n GF_Err gf_isom_get_text_description(GF_ISOFile *movie, u32 trackNumber, u32 descriptionIndex, GF_TextSampleDescriptor **out_desc)\n {\n \tGF_TrackBox *trak;\n \tu32 i;\n-\tBool is_qt_text = GF_FALSE;\n-\tGF_Tx3gSampleEntryBox *txt;\n-\n+\tGF_Tx3gSampleEntryBox *txt = NULL;\n+\tGF_TextSampleEntryBox *qt_txt = NULL;\n \tif (!descriptionIndex || !out_desc) return GF_BAD_PARAM;\n \n \ttrak = gf_isom_get_track_from_file(movie, trackNumber);\n@@ -55,28 +70,36 @@ GF_Err gf_isom_get_text_description(GF_ISOFile *movie, u32 trackNumber, u32 desc\n \tcase GF_ISOM_BOX_TYPE_TX3G:\n \t\tbreak;\n \tcase GF_ISOM_BOX_TYPE_TEXT:\n-\t\tis_qt_text = GF_TRUE;\n+\t\tqt_txt = (GF_TextSampleEntryBox *)txt;\n+\t\ttxt = NULL;\n \t\tbreak;\n \tdefault:\n \t\treturn GF_BAD_PARAM;\n \t}\n \n \t(*out_desc) = (GF_TextSampleDescriptor *) gf_odf_desc_new(GF_ODF_TX3G_TAG);\n \tif (! (*out_desc) ) return GF_OUT_OF_MEM;\n-\t(*out_desc)->back_color = txt->back_color;\n-\t(*out_desc)->default_pos = txt->default_box;\n-\t(*out_desc)->default_style = txt->default_style;\n-\t(*out_desc)->displayFlags = txt->displayFlags;\n-\t(*out_desc)->vert_justif = txt->vertical_justification;\n-\t(*out_desc)->horiz_justif = txt->horizontal_justification;\n-\tif (is_qt_text) {\n-\t\tGF_TextSampleEntryBox *qt_txt = (GF_TextSampleEntryBox *) txt;\n+\n+\tif (qt_txt) {\n+\t\t(*out_desc)->back_color = rgb_48_to_32(qt_txt->background_color);\n+\t\t(*out_desc)->default_pos = qt_txt->default_box;\n+\t\t(*out_desc)->default_style.style_flags = qt_txt->fontFace;\n+\t\t(*out_desc)->default_style.text_color = rgb_48_to_32(qt_txt->foreground_color);\n+\t\t(*out_desc)->displayFlags = qt_txt->displayFlags;\n+\t\t(*out_desc)->vert_justif = -1;\n+\t\t(*out_desc)->horiz_justif = qt_txt->textJustification;\n \t\tif (qt_txt->textName) {\n \t\t\t(*out_desc)->font_count = 1;\n \t\t\t(*out_desc)->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord));\n \t\t\t(*out_desc)->fonts[0].fontName = gf_strdup(qt_txt->textName);\n \t\t}\n \t} else {\n+\t\t(*out_desc)->back_color = txt->back_color;\n+\t\t(*out_desc)->default_pos = txt->default_box;\n+\t\t(*out_desc)->default_style = txt->default_style;\n+\t\t(*out_desc)->displayFlags = txt->displayFlags;\n+\t\t(*out_desc)->vert_justif = txt->vertical_justification;\n+\t\t(*out_desc)->horiz_justif = txt->horizontal_justification;\n \t\t(*out_desc)->font_count = txt->font_table->entry_count;\n \t\t(*out_desc)->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord) * txt->font_table->entry_count);\n \t\tfor (i=0; i<txt->font_table->entry_count; i++) {\n@@ -695,56 +718,65 @@ GF_TextSample *gf_isom_parse_text_sample_from_data(u8 *data, u32 dataLength)\n #define SAMPLE_INDEX_OFFSET\t\t129\n \n \n-static void gf_isom_write_tx3g(GF_Tx3gSampleEntryBox *a, GF_BitStream *bs, u32 sidx, u32 sidx_offset)\n+static void gf_isom_write_tx3g(GF_Tx3gSampleEntryBox *_a, GF_BitStream *bs, u32 sidx, u32 sidx_offset)\n {\n \tu32 size, j, fount_count;\n-\tBool is_qt_text = (a->type==GF_ISOM_BOX_TYPE_TEXT) ? GF_TRUE : GF_FALSE;\n \tconst char *qt_fontname = NULL;\n \tvoid gpp_write_rgba(GF_BitStream *bs, u32 col);\n \tvoid gpp_write_box(GF_BitStream *bs, GF_BoxRecord *rec);\n \tvoid gpp_write_style(GF_BitStream *bs, GF_StyleRecord *rec);\n \n+\tGF_TextSampleEntryBox *qt = (_a->type==GF_ISOM_BOX_TYPE_TEXT) ? (GF_TextSampleEntryBox *)_a : NULL;\n+\tGF_Tx3gSampleEntryBox *ttxt = (_a->type!=GF_ISOM_BOX_TYPE_TEXT) ? (GF_Tx3gSampleEntryBox *)_a : NULL;\n \n \tif (sidx_offset) gf_bs_write_u8(bs, sidx + sidx_offset);\n \n \t/*SINCE WINCE HAS A READONLY VERSION OF MP4 WE MUST DO IT BY HAND*/\n \tsize = 8 + 18 + 8 + 12;\n \tsize += 8 + 2;\n \tfount_count = 0;\n-\tif (is_qt_text) {\n-\t\tGF_TextSampleEntryBox *qt = (GF_TextSampleEntryBox *)a;\n-\t\tif (qt->textName) {\n-\t\t\tqt_fontname = qt->textName;\n-\t\t\tfount_count = 1;\n-\t\t}\n-\t} else {\n-\t\tif (a->font_table) {\n-\t\t\tfount_count = a->font_table->entry_count;\n-\t\t\tfor (j=0; j<fount_count; j++) {\n-\t\t\t\tsize += 3;\n-\t\t\t\tif (a->font_table->fonts[j].fontName) size += (u32) strlen(a->font_table->fonts[j].fontName);\n-\t\t\t}\n+\tif (qt && qt->textName) {\n+\t\tqt_fontname = qt->textName;\n+\t\tfount_count = 1;\n+\t} else if (ttxt && ttxt->font_table) {\n+\t\tfount_count = ttxt->font_table->entry_count;\n+\t\tfor (j=0; j<fount_count; j++) {\n+\t\t\tsize += 3;\n+\t\t\tif (ttxt->font_table->fonts[j].fontName)\n+\t\t\t\tsize += (u32) strlen(ttxt->font_table->fonts[j].fontName);\n \t\t}\n \t}\n \t/*write TextSampleEntry box*/\n \tgf_bs_write_u32(bs, size);\n-\tgf_bs_write_u32(bs, a->type);\n-\tgf_bs_write_data(bs, a->reserved, 6);\n-\tgf_bs_write_u16(bs, a->dataReferenceIndex);\n-\tgf_bs_write_u32(bs, a->displayFlags);\n-\tgf_bs_write_u8(bs, a->horizontal_justification);\n-\tgf_bs_write_u8(bs, a->vertical_justification);\n-\tgpp_write_rgba(bs, a->back_color);\n-\tgpp_write_box(bs, &a->default_box);\n-\tgpp_write_style(bs, &a->default_style);\n+\tgf_bs_write_u32(bs, GF_ISOM_BOX_TYPE_TX3G);\n+\tgf_bs_write_data(bs, _a->reserved, 6);\n+\tgf_bs_write_u16(bs, _a->dataReferenceIndex);\n+\tgf_bs_write_u32(bs, _a->displayFlags);\n+\tif (qt) {\n+\t\tGF_StyleRecord sr;\n+\t\tmemset(&sr, 0, sizeof(GF_StyleRecord));\n+\t\tgf_bs_write_u8(bs, qt->textJustification);\n+\t\tgf_bs_write_u8(bs, (u8) -1);\n+\t\tgpp_write_rgba(bs, rgb_48_to_32(qt->background_color) );\n+\t\tgpp_write_box(bs, &qt->default_box);\n+\t\tsr.text_color = rgb_48_to_32(qt->foreground_color);\n+\t\tsr.style_flags = qt->fontFace;\n+\t\tgpp_write_style(bs, &sr);\n+\t} else {\n+\t\tgf_bs_write_u8(bs, ttxt->horizontal_justification);\n+\t\tgf_bs_write_u8(bs, ttxt->vertical_justification);\n+\t\tgpp_write_rgba(bs, ttxt->back_color);\n+\t\tgpp_write_box(bs, &ttxt->default_box);\n+\t\tgpp_write_style(bs, &ttxt->default_style);\n+\t}\n \t/*write font table box*/\n \tsize -= (8 + 18 + 8 + 12);\n \tgf_bs_write_u32(bs, size);\n \tgf_bs_write_u32(bs, GF_ISOM_BOX_TYPE_FTAB);\n \n \tgf_bs_write_u16(bs, fount_count);\n \tfor (j=0; j<fount_count; j++) {\n-\t\tif (is_qt_text) {\n+\t\tif (qt) {\n \t\t\tgf_bs_write_u16(bs, 0);\n \t\t\tif (qt_fontname) {\n \t\t\t\tu32 len = (u32) strlen(qt_fontname);\n@@ -754,11 +786,11 @@ static void gf_isom_write_tx3g(GF_Tx3gSampleEntryBox *a, GF_BitStream *bs, u32 s\n \t\t\t\tgf_bs_write_u8(bs, 0);\n \t\t\t}\n \t\t} else {\n-\t\t\tgf_bs_write_u16(bs, a->font_table->fonts[j].fontID);\n-\t\t\tif (a->font_table->fonts[j].fontName) {\n-\t\t\t\tu32 len = (u32) strlen(a->font_table->fonts[j].fontName);\n+\t\t\tgf_bs_write_u16(bs, ttxt->font_table->fonts[j].fontID);\n+\t\t\tif (ttxt->font_table->fonts[j].fontName) {\n+\t\t\t\tu32 len = (u32) strlen(ttxt->font_table->fonts[j].fontName);\n \t\t\t\tgf_bs_write_u8(bs, len);\n-\t\t\t\tgf_bs_write_data(bs, a->font_table->fonts[j].fontName, len);\n+\t\t\t\tgf_bs_write_data(bs, ttxt->font_table->fonts[j].fontName, len);\n \t\t\t} else {\n \t\t\t\tgf_bs_write_u8(bs, 0);\n \t\t\t}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e075efa1bd0984e0e87f6752f1e5b991ba3a7cf7",
            "date": "2025-01-14T15:00:34Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "7af1bfcdc25dd74e158437abd13858281ae1bea0",
            "date": "2025-01-14T12:33:00Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "08572e41a7eae3d7e4329bf88a455ba6cb209936",
            "date": "2025-01-14T12:18:43Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "5f2c53efbc58ecfb01885c73b9507413efde6c81",
            "date": "2025-01-14T11:46:01Z",
            "author_login": "aureliendavid"
          },
          {
            "sha": "f2082beb80c470f4eaf2bb0421b56e8adcde303a",
            "date": "2025-01-14T11:45:02Z",
            "author_login": "aureliendavid"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "The gf_isom_vp_config_get function in GPAC 1.0.1 allows attackers to cause a denial of service (NULL pointer dereference) via a crafted file in the MP4Box command.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-13T20:15:08.453",
    "last_modified": "2024-11-21T06:06:52.417",
    "fix_date": "2021-04-30T08:13:24Z"
  },
  "references": [
    {
      "url": "https://github.com/gpac/gpac/commit/d527325a9b72218612455a534a508f9e1753f76e",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/issues/1768",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/commit/d527325a9b72218612455a534a508f9e1753f76e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gpac/gpac/issues/1768",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.751313",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gpac",
    "owner": "gpac",
    "created_at": "2014-05-03T11:29:57Z",
    "updated_at": "2025-01-14T12:51:06Z",
    "pushed_at": "2025-01-14T12:51:01Z",
    "size": 148655,
    "stars": 2857,
    "forks": 539,
    "open_issues": 84,
    "watchers": 2857,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29230795,
      "JavaScript": 1164507,
      "C++": 591365,
      "Roff": 570792,
      "Python": 185337,
      "Makefile": 105620,
      "HTML": 100652,
      "Java": 92437,
      "GLSL": 90260,
      "Objective-C": 24884,
      "Shell": 21810,
      "NSIS": 17560,
      "Rez": 13704,
      "CSS": 4998,
      "Batchfile": 4898,
      "Dockerfile": 3216,
      "Nix": 1229
    },
    "commit_activity": {
      "total_commits_last_year": 1273,
      "avg_commits_per_week": 24.48076923076923,
      "days_active_last_year": 239
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-14T12:56:58.367536"
  }
}