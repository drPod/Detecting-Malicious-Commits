{
  "cve_id": "CVE-2021-32665",
  "github_data": {
    "repository": "wireapp/wire-ios",
    "fix_commit": "bf9db85886b12a20c8374f55b7c4a610e8ae9220",
    "related_commits": [
      "bf9db85886b12a20c8374f55b7c4a610e8ae9220",
      "bf9db85886b12a20c8374f55b7c4a610e8ae9220"
    ],
    "patch_url": "https://github.com/wireapp/wire-ios/commit/bf9db85886b12a20c8374f55b7c4a610e8ae9220.patch",
    "fix_commit_details": {
      "sha": "bf9db85886b12a20c8374f55b7c4a610e8ae9220",
      "commit_date": "2021-05-07T12:53:00Z",
      "author": {
        "login": "typfel",
        "type": "User",
        "stats": {
          "total_commits": 2349,
          "average_weekly_commits": 5.073434125269978,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 276
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-hjfc-36rw-8gvp",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 43,
        "additions": 32,
        "deletions": 11
      },
      "files": [
        {
          "filename": "Source/Model/Conversation/ZMConversation+Participants.swift",
          "status": "modified",
          "additions": 8,
          "deletions": 3,
          "patch": "@@ -173,7 +173,7 @@ extension ZMConversation {\n         \n         if !addedRoles.isEmpty {\n             self.checkIfArchivedStatusChanged(addedSelfUser: addedSelfUser)\n-            self.checkIfVerificationLevelChanged(addedUsers: Set(addedRoles.map { $0.user}))\n+            self.checkIfVerificationLevelChanged(addedUsers: Set(addedRoles.map { $0.user}),  addedSelfUser: addedSelfUser)\n         }\n     }\n \n@@ -216,8 +216,13 @@ extension ZMConversation {\n         }\n     }\n     \n-    private func checkIfVerificationLevelChanged(addedUsers: Set<ZMUser>) {\n-        self.decreaseSecurityLevelIfNeededAfterDiscovering(clients: Set(addedUsers.flatMap { $0.clients }), causedBy: addedUsers)\n+    private func checkIfVerificationLevelChanged(addedUsers: Set<ZMUser>, addedSelfUser: Bool) {\n+        let clients = Set(addedUsers.flatMap { $0.clients })\n+        self.decreaseSecurityLevelIfNeededAfterDiscovering(clients: clients, causedBy: addedUsers)\n+\n+        if addedSelfUser {\n+            self.increaseSecurityLevelIfNeededAfterTrusting(clients: clients)\n+        }\n     }\n     \n     /// Remove participants to the conversation. The method will decide on its own whether"
        },
        {
          "filename": "Source/Model/Conversation/ZMConversation+SecurityLevel.swift",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -206,11 +206,13 @@ extension ZMConversation {\n     }\n \n     private func increaseSecurityLevelIfNeeded(for cause: SecurityChangeCause) {\n-        guard securityLevel != .secure &&\n+        guard\n+            securityLevel != .secure &&\n             allUsersTrusted &&\n             allParticipantsHaveClients &&\n-            conversationType != .connection else {\n-                return\n+            conversationType.isOne(of: .group, .oneOnOne, .invalid)\n+        else {\n+            return\n         }\n \n         securityLevel = .secure"
        },
        {
          "filename": "Tests/Source/Model/Conversation/ZMConversationTests+SecurityLevel.swift",
          "status": "modified",
          "additions": 18,
          "deletions": 2,
          "patch": "@@ -977,7 +977,7 @@ class ZMConversationTests_SecurityLevel: ZMConversationTestsBase {\n         let otherUnverifiedUsers = self.setupUnverifiedUsers(count: 1)\n         \n         // THEN\n-        XCTAssertEqual(conversation.allMessages.count, 2)\n+        XCTAssertEqual(conversation.allMessages.count, 4)\n         guard let lastMessage1 = conversation.lastMessage as? ZMSystemMessage else {\n             return XCTFail()\n         }\n@@ -988,7 +988,7 @@ class ZMConversationTests_SecurityLevel: ZMConversationTestsBase {\n         _ = self.simulateAdding(users: otherUnverifiedUsers, conversation: conversation, by: selfUser)\n         \n         // THEN\n-        XCTAssertEqual(conversation.allMessages.count, 3)\n+        XCTAssertEqual(conversation.allMessages.count, 5)\n         guard let lastMessage2 = conversation.lastMessage as? ZMSystemMessage else {\n             return XCTFail()\n         }\n@@ -1012,4 +1012,20 @@ class ZMConversationTests_SecurityLevel: ZMConversationTestsBase {\n         XCTAssertEqual(conversation.securityLevel, .secure)\n     }\n \n+    func testThatSecurityLevelIsIncreased_WhenAddingSelfUserToAnExistingConversation() {\n+        // given\n+        let selfUser = ZMUser.selfUser(in: self.uiMOC)\n+        self.createSelfClient(onMOC: self.uiMOC)\n+        let conversation = ZMConversation.insertNewObject(in: self.uiMOC)\n+        conversation.conversationType = .group\n+        conversation.remoteIdentifier = UUID()\n+\n+\n+        // when\n+        conversation.addParticipantAndUpdateConversationState(user: selfUser, role: nil)\n+\n+        // then\n+        XCTAssertEqual(conversation.securityLevel, .secure)\n+    }\n+\n }"
        },
        {
          "filename": "Tests/Source/Model/User/ZMUserLegalHoldTests.swift",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -90,9 +90,7 @@ class ZMUserLegalHoldTests: ModelObjectsTests {\n         // THEN\n         XCTAssertEqual(selfUser.legalHoldStatus, .enabled)\n         XCTAssertTrue(selfUser.needsToAcknowledgeLegalHoldStatus)\n-\n-        let lastMessage = conversation.lastMessage as? ZMSystemMessage\n-        XCTAssertEqual(lastMessage?.systemMessageType, .legalHoldEnabled)\n+        XCTAssertTrue(conversation.allMessages.contains(where: { ($0 as? ZMSystemMessage)?.systemMessageType == .legalHoldEnabled }))\n         XCTAssertTrue(conversation.isUnderLegalHold)\n     }\n "
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "480e9f2cd7dafb8b0fc6359689f4cff7a2a5293c",
            "date": "2025-01-14T11:23:53Z",
            "author_login": "netbe"
          },
          {
            "sha": "76cbca64ffed45db88600cbb0ae3b706aebdd4db",
            "date": "2025-01-10T09:26:16Z",
            "author_login": "caldrian"
          },
          {
            "sha": "db1b5e9da1d5803eacefea197889bd9d57409253",
            "date": "2025-01-10T09:14:17Z",
            "author_login": "caldrian"
          },
          {
            "sha": "c1d77fe5e9a0e10902f06bdd3d6655d1966db9f5",
            "date": "2025-01-10T09:06:29Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "a38e7d343b260bd1451686c4449ab44db582a556",
            "date": "2025-01-10T08:16:37Z",
            "author_login": "johnxnguyen"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-345",
    "description": "wire-ios is the iOS version of Wire, an open-source secure messaging app. wire-ios versions 3.8.0 and earlier have a bug in which a conversation could be incorrectly set to \"unverified. This occurs when: - Self user is added to a new conversation - Self user is added to an existing conversation - All the participants in the conversation were previously marked as verified. The vulnerability is patched in wire-ios version 3.8.1. As a workaround, one can unverify & verify a device in the conversation.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-06-03T21:15:07.997",
    "last_modified": "2024-11-21T06:07:29.323",
    "fix_date": "2021-05-07T12:53:00Z"
  },
  "references": [
    {
      "url": "https://github.com/wireapp/wire-ios-data-model/commit/bf9db85886b12a20c8374f55b7c4a610e8ae9220",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-ios/security/advisories/GHSA-mc65-7w99-c6qv",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-ios-data-model/commit/bf9db85886b12a20c8374f55b7c4a610e8ae9220",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-ios/security/advisories/GHSA-mc65-7w99-c6qv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:57.139117",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "wire-ios",
    "owner": "wireapp",
    "created_at": "2022-12-22T10:26:59Z",
    "updated_at": "2025-01-14T11:54:19Z",
    "pushed_at": "2025-01-14T11:55:23Z",
    "size": 1664518,
    "stars": 74,
    "forks": 15,
    "open_issues": 28,
    "watchers": 74,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "chore/add-sz-app",
      "develop",
      "epic/prepare-for-universal-backups-WPB-14616"
    ],
    "languages": {
      "Swift": 21138814,
      "Objective-C": 3355652,
      "Ruby": 40970,
      "C": 25452,
      "Shell": 19696,
      "Python": 853
    },
    "commit_activity": {
      "total_commits_last_year": 1669,
      "avg_commits_per_week": 32.09615384615385,
      "days_active_last_year": 237
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T13:37:27.324669"
  }
}