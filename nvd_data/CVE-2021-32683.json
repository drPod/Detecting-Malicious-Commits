{
  "cve_id": "CVE-2021-32683",
  "github_data": {
    "repository": "wireapp/wire-webapp",
    "fix_commit": "056e39d327bb10c1b0958dfbea0c39752692a1b0",
    "related_commits": [
      "056e39d327bb10c1b0958dfbea0c39752692a1b0",
      "056e39d327bb10c1b0958dfbea0c39752692a1b0"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "056e39d327bb10c1b0958dfbea0c39752692a1b0",
      "commit_date": "2021-05-07T12:02:26Z",
      "author": {
        "login": "bennycode",
        "type": "User",
        "stats": {
          "total_commits": 1042,
          "average_weekly_commits": 2.336322869955157,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 217
        }
      },
      "commit_message": {
        "title": "refactor: Remove jpeg-large support",
        "length": 35,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 24,
        "additions": 18,
        "deletions": 6
      },
      "files": [
        {
          "filename": "src/page/template/content/conversation/input-bar.htm",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -101,7 +101,7 @@\n \n               <label id=\"conversation-input-bar-photo\" class=\"controls-right-button button-icon-large\">\n                 <image-icon></image-icon>\n-                <input data-bind=\"attr: {accept: allowedImageTypes}, file_select: uploadImages\" type=\"file\" multiple=\"multiple\" data-uie-name=\"do-share-image\"/>\n+                <input data-bind=\"attr: {accept: acceptedImageTypes}, file_select: uploadImages\" type=\"file\" multiple=\"multiple\" data-uie-name=\"do-share-image\"/>\n               </label>\n \n               <label id=\"conversation-input-bar-files\" class=\"controls-right-button button-icon-large\" data-bind=\"attr: {title: t('tooltipConversationFile')}\">"
        },
        {
          "filename": "src/script/Config.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -105,7 +105,8 @@ export class Configuration {\n   /** measured in pixel */\n   readonly SCROLL_TO_LAST_MESSAGE_THRESHOLD = 100;\n \n-  readonly ALLOWED_IMAGE_TYPES = ['image/bmp', 'image/gif', 'image/jpeg', 'image/jpg', 'image/png', '.jpg-large'];\n+  /** Image MIME types */\n+  readonly ALLOWED_IMAGE_TYPES = ['image/bmp', 'image/gif', 'image/jpeg', 'image/jpg', 'image/png'];\n }\n \n let instance: Configuration;"
        },
        {
          "filename": "src/script/components/asset/imageAsset.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -24,6 +24,7 @@ import type {MediumImage} from '../../entity/message/MediumImage';\n import {viewportObserver} from '../../ui/viewportObserver';\n import {AbstractAssetTransferStateTracker} from './AbstractAssetTransferStateTracker';\n import './AssetLoader';\n+import {Config} from '../../Config';\n \n interface Params {\n   asset: MediumImage;\n@@ -60,8 +61,16 @@ class ImageAssetComponent extends AbstractAssetTransferStateTracker {\n         if (this.isVisible() && asset.resource()) {\n           this.assetRepository\n             .load(asset.resource())\n-            .then(blob => {\n-              this.imageUrl(window.URL.createObjectURL(blob));\n+            .then((blob: Blob) => {\n+              const allowedImageTypes = [\n+                'application/octet-stream', // Octet-stream is required to paste images from clipboard\n+                ...Config.getConfig().ALLOWED_IMAGE_TYPES,\n+              ];\n+              if (allowedImageTypes.includes(blob.type)) {\n+                this.imageUrl(window.URL.createObjectURL(blob));\n+              } else {\n+                throw new Error(`Unsupported image type \"${blob.type}\".`);\n+              }\n             })\n             .catch(error => console.error(error));\n         }"
        },
        {
          "filename": "src/script/view_model/content/InputBarViewModel.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -104,7 +104,8 @@ export class InputBarViewModel {\n   readonly renderMessage: typeof renderMessage;\n   readonly input: ko.Observable<string>;\n   private readonly showAvailabilityTooltip: ko.PureComputed<boolean>;\n-  readonly allowedImageTypes: string;\n+  /** MIME types and file extensions are accepted */\n+  readonly acceptedImageTypes: string;\n   readonly allowedFileTypes: string;\n \n   static get CONFIG() {\n@@ -130,7 +131,7 @@ export class InputBarViewModel {\n   ) {\n     this.shadowInput = null;\n     this.textarea = null;\n-    this.allowedImageTypes = Config.getConfig().ALLOWED_IMAGE_TYPES.join(',');\n+    this.acceptedImageTypes = Config.getConfig().ALLOWED_IMAGE_TYPES.join(',');\n     this.allowedFileTypes = Config.getConfig().FEATURE.ALLOWED_FILE_UPLOAD_EXTENSIONS.join(',');\n \n     this.selectionStart = ko.observable(0);"
        },
        {
          "filename": "src/worker/image-worker.js",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -33,6 +33,7 @@ self.addEventListener('message', (/** @type {MessageEvent<Data>} */ event) => {\n     MAX_FILE_SIZE = 1024 * 1024;\n   }\n \n+  // Unfortunately, Jimp doesn't support MIME type \"image/webp\": https://github.com/oliver-moran/jimp/issues/144\n   Jimp.read(event.data.buffer).then(image => {\n     if (event.data.useProfileImageSize) {\n       image.cover(MAX_SIZE, MAX_SIZE);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b9afe5515aa54dc49a5af31aa575d8eb9757753b",
            "date": "2025-01-24T16:52:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "9715d898b2438699857ef114f9cc031899babba2",
            "date": "2025-01-24T16:52:33Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "9e9e8ccc81c011769baf8ac19198c22f1bc356c1",
            "date": "2025-01-24T13:17:19Z",
            "author_login": "thisisamir98"
          },
          {
            "sha": "edf5a76b7a522ec0038bb974aec75b0cf4e61177",
            "date": "2025-01-24T12:54:39Z",
            "author_login": "thisisamir98"
          },
          {
            "sha": "905175b7b564cdf35a7dbd05c49fe7d157525214",
            "date": "2025-01-24T12:14:26Z",
            "author_login": "otto-the-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-79",
    "description": "wire-webapp is the web version of Wire, an open-source messenger. A cross-site scripting vulnerability exists in wire-webapp prior to version 2021-06-01-production.0. If a user is instructed to open an image in a new tab (right click -> open in new tab, or copy the URL and paste it in the URL bar), an the image payload is executed on the domain hosting the app (app.wire.com). In particular, if an image contains malicious code in addition to the actual picture, this code is executed on app.wire.com. This allows the attacker to fully control the user account. The vulnerability was patched in version 2021-06-01-production.0. As a workaround, users should not try to open image URLs.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-06-15T20:15:13.953",
    "last_modified": "2024-11-21T06:07:31.507",
    "fix_date": "2021-05-07T12:02:26Z"
  },
  "references": [
    {
      "url": "https://github.com/wireapp/wire-webapp/commit/056e39d327bb10c1b0958dfbea0c39752692a1b0",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-webapp/security/advisories/GHSA-382j-mmc8-m5rw",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-webapp/commit/056e39d327bb10c1b0958dfbea0c39752692a1b0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wireapp/wire-webapp/security/advisories/GHSA-382j-mmc8-m5rw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:59.732783",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "wire-webapp",
    "owner": "wireapp",
    "created_at": "2016-07-21T15:34:05Z",
    "updated_at": "2025-01-24T16:52:56Z",
    "pushed_at": "2025-01-24T21:40:16Z",
    "size": 185204,
    "stars": 1150,
    "forks": 292,
    "open_issues": 69,
    "watchers": 1150,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [],
    "languages": {
      "JavaScript": 7174442,
      "TypeScript": 5734826,
      "Less": 312328,
      "Shell": 16243,
      "HTML": 13071,
      "EJS": 10888,
      "CSS": 4737,
      "GLSL": 1710,
      "Mustache": 815,
      "Dockerfile": 320,
      "Procfile": 23
    },
    "commit_activity": {
      "total_commits_last_year": 1816,
      "avg_commits_per_week": 34.92307692307692,
      "days_active_last_year": 280
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-26T07:36:40.434360"
  }
}