{
  "cve_id": "CVE-2021-32710",
  "github_data": {
    "repository": "shopware/platform",
    "fix_commit": "010c0154bea57c1fca73277c7431d029db7a972e",
    "related_commits": [
      "010c0154bea57c1fca73277c7431d029db7a972e",
      "010c0154bea57c1fca73277c7431d029db7a972e"
    ],
    "patch_url": "https://github.com/shopware/platform/commit/010c0154bea57c1fca73277c7431d029db7a972e.patch",
    "fix_commit_details": {
      "sha": "010c0154bea57c1fca73277c7431d029db7a972e",
      "commit_date": "2021-02-23T10:32:52Z",
      "author": {
        "login": "taltholtmann",
        "type": "User",
        "stats": {
          "total_commits": 741,
          "average_weekly_commits": 1.904884318766067,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 154
        }
      },
      "commit_message": {
        "title": "NEXT-13664 - Fix session handling",
        "length": 33,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 68,
        "additions": 39,
        "deletions": 29
      },
      "files": [
        {
          "filename": "changelog/_unreleased/2021-02-23-fix-session-handling-on-logouts.md",
          "status": "added",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -0,0 +1,9 @@\n+---\n+title: Fix session handling on logouts\n+issue: NEXT-13664\n+author: Timo Altholtmann\n+---\n+# Storefront\n+*  Changed behaviour of the setting `invalidateSessionOnLogOut` in `loginRegistration.xml` which can be found under settings -> login / registration.\n+* The session of the user now gets invalidated on every logout, regardless of the value of this setting. This settings controls only, if the cart gets saved on logout.\n+___"
        },
        {
          "filename": "src/Core/System/Resources/config/loginRegistration.xml",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -111,8 +111,8 @@\n \n         <input-field type=\"bool\">\n             <name>invalidateSessionOnLogOut</name>\n-            <label>Clear session data on log out</label>\n-            <label lang=\"de-DE\">Sitzungsdaten bei Abmeldung l\u00f6schen</label>\n+            <label>Clear and delete cart on log out</label>\n+            <label lang=\"de-DE\">Warenkorb bei Abmeldung l\u00f6schen</label>\n             <helpText>When the setting is activated, the cart won't be saved and can't be restored after login.</helpText>\n             <helpText lang=\"de-DE\">Wenn die Einstellung aktiviert ist, wird der Warenkorb nicht gespeichert und kann nach der Anmeldung nicht wiederhergestellt werden.</helpText>\n         </input-field>"
        },
        {
          "filename": "src/Storefront/Controller/AuthController.php",
          "status": "modified",
          "additions": 0,
          "deletions": 13,
          "patch": "@@ -24,7 +24,6 @@\n use Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag;\n use Shopware\\Core\\Framework\\Validation\\Exception\\ConstraintViolationException;\n use Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n-use Shopware\\Core\\System\\SystemConfig\\SystemConfigService;\n use Shopware\\Storefront\\Framework\\Routing\\RequestTransformer;\n use Shopware\\Storefront\\Page\\Account\\Login\\AccountLoginPageLoader;\n use Symfony\\Component\\HttpFoundation\\Request;\n@@ -67,11 +66,6 @@ class AuthController extends StorefrontController\n      */\n     private $logoutRoute;\n \n-    /**\n-     * @var SystemConfigService\n-     */\n-    private $systemConfig;\n-\n     /**\n      * @var CartService\n      */\n@@ -83,7 +77,6 @@ public function __construct(\n         AbstractSendPasswordRecoveryMailRoute $sendPasswordRecoveryMailRoute,\n         AbstractResetPasswordRoute $resetPasswordRoute,\n         AbstractLoginRoute $loginRoute,\n-        SystemConfigService $systemConfig,\n         AbstractLogoutRoute $logoutRoute,\n         CartService $cartService\n     ) {\n@@ -93,7 +86,6 @@ public function __construct(\n         $this->resetPasswordRoute = $resetPasswordRoute;\n         $this->loginRoute = $loginRoute;\n         $this->logoutRoute = $logoutRoute;\n-        $this->systemConfig = $systemConfig;\n         $this->cartService = $cartService;\n     }\n \n@@ -168,11 +160,6 @@ public function logout(Request $request, SalesChannelContext $context): Response\n \n         try {\n             $this->logoutRoute->logout($context);\n-            $salesChannelId = $context->getSalesChannel()->getId();\n-            if ($request->hasSession() && $this->systemConfig->get('core.loginRegistration.invalidateSessionOnLogOut', $salesChannelId)) {\n-                $request->getSession()->invalidate();\n-            }\n-\n             $this->addFlash('success', $this->trans('account.logoutSucceeded'));\n \n             $parameters = [];"
        },
        {
          "filename": "src/Storefront/DependencyInjection/controller.xml",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -57,7 +57,6 @@\n             <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SendPasswordRecoveryMailRoute\"/>\n             <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ResetPasswordRoute\"/>\n             <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoginRoute\"/>\n-            <argument type=\"service\" id=\"Shopware\\Core\\System\\SystemConfig\\SystemConfigService\"/>\n             <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LogoutRoute\"/>\n             <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService\"/>\n             <call method=\"setContainer\">"
        },
        {
          "filename": "src/Storefront/Framework/Routing/StorefrontSubscriber.php",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -200,14 +200,14 @@ public function updateSessionAfterLogin(CustomerLoginEvent $event): void\n         $this->updateSession($token);\n     }\n \n-    public function updateSessionAfterLogout(CustomerLogoutEvent $event): void\n+    public function updateSessionAfterLogout(): void\n     {\n-        $newToken = $event->getSalesChannelContext()->getToken();\n+        $newToken = Random::getAlphanumericString(32);\n \n-        $this->updateSession($newToken);\n+        $this->updateSession($newToken, true);\n     }\n \n-    public function updateSession(string $token): void\n+    public function updateSession(string $token, bool $destroyOldSession = false): void\n     {\n         $master = $this->requestStack->getMasterRequest();\n         if (!$master) {\n@@ -222,7 +222,7 @@ public function updateSession(string $token): void\n         }\n \n         $session = $master->getSession();\n-        $session->migrate();\n+        $session->migrate($destroyOldSession);\n         $session->set('sessionId', $session->getId());\n \n         $session->set(PlatformRequest::HEADER_CONTEXT_TOKEN, $token);"
        },
        {
          "filename": "src/Storefront/Resources/config/packages/test/framework.yaml",
          "status": "added",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -0,0 +1,6 @@\n+framework:\n+    test: true\n+    session:\n+        storage_id: session.storage.mock_file\n+    profiler:\n+        collect: false"
        },
        {
          "filename": "src/Storefront/Test/Controller/AuthControllerTest.php",
          "status": "modified",
          "additions": 17,
          "deletions": 8,
          "patch": "@@ -118,16 +118,14 @@ public function testDoNotLogoutWhenSalesChannelIdChangedIfCustomerScopeIsOff():\n         static::assertEquals($contextToken, $browser->getRequest()->getSession()->get('sw-context-token'));\n     }\n \n-    public function testSessionIsInvalidatedOnLogOutIsDeactivated(): void\n+    public function testSessionIsInvalidatedOnLogoutAndInvalidateSettingFalse(): void\n     {\n         $systemConfig = $this->getContainer()->get(SystemConfigService::class);\n         $systemConfig->set('core.loginRegistration.invalidateSessionOnLogOut', false);\n \n         $browser = $this->login();\n \n-        $session = $browser->getRequest()->getSession();\n-        $contextToken = $session->get('sw-context-token');\n-        $sessionId = $session->getId();\n+        $sessionCookie = $browser->getCookieJar()->get('session-');\n \n         $browser->request('GET', '/account/logout', []);\n         $response = $browser->getResponse();\n@@ -136,14 +134,25 @@ public function testSessionIsInvalidatedOnLogOutIsDeactivated(): void\n         $browser->request('GET', '/', []);\n         $response = $browser->getResponse();\n         static::assertSame(200, $response->getStatusCode(), $response->getContent());\n+        $session = $browser->getRequest()->getSession();\n+\n+        // Close the old session\n+        $session->save();\n+        // Set previous session id\n+        $session->setId($sessionCookie->getValue());\n+        // Set previous session cookie\n+        $browser->getCookieJar()->set($sessionCookie);\n \n+        // Try opening account page\n+        $browser->request('GET', $_SERVER['APP_URL'] . '/account', []);\n+        $response = $browser->getResponse();\n         $session = $browser->getRequest()->getSession();\n \n-        $newContextToken = $session->get('sw-context-token');\n-        static::assertNotEquals($contextToken, $newContextToken);\n+        // Expect the session to have the same value as the initial session\n+        static::assertSame($session->getId(), $sessionCookie->getValue());\n \n-        $newSessionId = $session->getId();\n-        static::assertNotEquals($sessionId, $newSessionId);\n+        // Expect a redirect response, since the old session should be destroyed\n+        static::assertSame(302, $response->getStatusCode(), $response->getContent());\n     }\n \n     public function testRedirectToAccountPageAfterLogin(): void"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 7,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a87d38f4e4ab920afb728d396a4fdff6dd1ed893",
            "date": "2025-01-14T12:59:02Z",
            "author_login": "Bird87ZA"
          },
          {
            "sha": "e957d7150a872944c008a7169bf5f8d97889b355",
            "date": "2025-01-14T11:55:14Z",
            "author_login": "shyim"
          },
          {
            "sha": "02af717865eb1d240850314ad103fc276dbb56f8",
            "date": "2025-01-14T10:50:49Z",
            "author_login": "akf-bw"
          },
          {
            "sha": "17723a093f9cf2c4617a471091ef4607da1d8769",
            "date": "2025-01-14T10:29:25Z",
            "author_login": "jleifeld"
          },
          {
            "sha": "9b977d57e54a9275be40804a7dd7cca05c0f748c",
            "date": "2025-01-14T10:24:01Z",
            "author_login": "frobel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.9,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-384",
    "description": "Shopware is an open source eCommerce platform. Potential session hijacking of store customers in versions below 6.3.5.2. We recommend to update to the current version 6.3.5.2. You can get the update to 6.3.5.2 regularly via the Auto-Updater or directly via the download overview. For older versions of 6.1 and 6.2, corresponding security measures are also available via a plugin. For the full range of functions, we recommend updating to the latest Shopware version.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-06-24T20:15:09.030",
    "last_modified": "2024-11-21T06:07:34.690",
    "fix_date": "2021-02-23T10:32:52Z"
  },
  "references": [
    {
      "url": "https://github.com/shopware/platform/commit/010c0154bea57c1fca73277c7431d029db7a972e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/security/advisories/GHSA-h9q8-5gv2-v6mg",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/commit/010c0154bea57c1fca73277c7431d029db7a972e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/security/advisories/GHSA-h9q8-5gv2-v6mg",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:59.758840",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "shopware",
    "owner": "shopware",
    "created_at": "2018-05-03T13:00:31Z",
    "updated_at": "2025-01-14T12:59:07Z",
    "pushed_at": "2025-01-14T13:28:13Z",
    "size": 289410,
    "stars": 2894,
    "forks": 1042,
    "open_issues": 911,
    "watchers": 2894,
    "has_security_policy": false,
    "default_branch": "trunk",
    "protected_branches": [
      "6.4",
      "6.5.x"
    ],
    "languages": {
      "PHP": 33467815,
      "JavaScript": 12727064,
      "Twig": 5566016,
      "TypeScript": 1850093,
      "SCSS": 1033491,
      "CSS": 135217,
      "Vue": 32178,
      "Shell": 30871,
      "HTML": 26015,
      "Nix": 4972,
      "Groovy": 3900,
      "Dockerfile": 2862,
      "Smarty": 1216
    },
    "commit_activity": {
      "total_commits_last_year": 4219,
      "avg_commits_per_week": 81.13461538461539,
      "days_active_last_year": 285
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:37:45.571181"
  }
}