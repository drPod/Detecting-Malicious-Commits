{
  "cve_id": "CVE-2021-32716",
  "github_data": {
    "repository": "shopware/platform",
    "fix_commit": "b5c3ce3e93bd121324d72aa9d367cb636ff1c0eb",
    "related_commits": [
      "b5c3ce3e93bd121324d72aa9d367cb636ff1c0eb",
      "b5c3ce3e93bd121324d72aa9d367cb636ff1c0eb"
    ],
    "patch_url": "https://github.com/shopware/platform/commit/b5c3ce3e93bd121324d72aa9d367cb636ff1c0eb.patch",
    "fix_commit_details": {
      "sha": "b5c3ce3e93bd121324d72aa9d367cb636ff1c0eb",
      "commit_date": "2021-05-11T09:17:56Z",
      "author": {
        "login": "shyim",
        "type": "User",
        "stats": {
          "total_commits": 2463,
          "average_weekly_commits": 6.331619537275064,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 240
        }
      },
      "commit_message": {
        "title": "NEXT-15183 - Add Dangerfile",
        "length": 27,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 347,
        "additions": 341,
        "deletions": 6
      },
      "files": [
        {
          "filename": ".gitlab-ci.yml",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -59,6 +59,14 @@ default:\n \n # stage: unit\n \n+Danger:\n+    stage: unit\n+    image: node:14\n+    before_script: []\n+    script:\n+        - npm install danger gitlab\n+        - node node_modules/.bin/danger ci --base trunk\n+\n PHP Full:\n     image: $DEV_IMAGE\n     stage: unit"
        },
        {
          "filename": "dangerfile.js",
          "status": "added",
          "additions": 54,
          "deletions": 0,
          "patch": "@@ -0,0 +1,54 @@\n+const GitlabClient = require('gitlab');\n+\n+const api = new GitlabClient.Gitlab({\n+    token: process.env['DANGER_GITLAB_API_TOKEN'],\n+    host: process.env['DANGER_GITLAB_HOST']\n+});\n+\n+const addLabel = (labels) => {\n+    const currentLabels = danger.gitlab.mr.labels;\n+\n+    for (const label of labels) {\n+        currentLabels.push(label);\n+    }\n+\n+    api.MergeRequests.edit(1, process.env['CI_MERGE_REQUEST_IID'], {\n+        'labels': currentLabels.join(',')\n+    })\n+};\n+\n+const removeLabel = (labels) => {\n+    const currentLabels = danger.gitlab.mr.labels;\n+\n+    for (const label of labels) {\n+        const index = currentLabels.indexOf(label);\n+        if (index > -1) {\n+            currentLabels.splice(index, 1);\n+        }\n+\n+        api.MergeRequests.edit(1, process.env['CI_MERGE_REQUEST_IID'], {\n+            'labels': currentLabels.join(',')\n+        })\n+    }\n+};\n+\n+const hasStoreApiRouteChanges = () => {\n+    for (let file of danger.git.modified_files) {\n+        if (file.includes('SalesChannel') && file.includes('Route.php') && !file.includes('/Test/')) {\n+            return true;\n+        }\n+    }\n+\n+    for (let file of danger.git.created_files) {\n+        if (file.includes('SalesChannel') && file.includes('Route.php') && !file.includes('/Test/')) {\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+if (hasStoreApiRouteChanges()) {\n+    warn('Store-API Route has been modified. @Reviewers please review carefully!')\n+    addLabel(['Security-Audit Required']);\n+}"
        },
        {
          "filename": "src/Core/Checkout/DependencyInjection/order.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -95,6 +95,7 @@\n \n         <service id=\"Shopware\\Core\\Checkout\\Order\\SalesChannel\\CancelOrderRoute\" public=\"true\">\n             <argument type=\"service\" id=\"Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService\"/>\n+            <argument type=\"service\" id=\"order.repository\"/>\n         </service>\n \n         <service id=\"Shopware\\Core\\Checkout\\Order\\SalesChannel\\SetPaymentOrderRoute\" public=\"true\">"
        },
        {
          "filename": "src/Core/Checkout/Order/SalesChannel/CancelOrderRoute.php",
          "status": "modified",
          "additions": 34,
          "deletions": 6,
          "patch": "@@ -3,10 +3,16 @@\n namespace Shopware\\Core\\Checkout\\Order\\SalesChannel;\n \n use OpenApi\\Annotations as OA;\n+use Shopware\\Core\\Checkout\\Cart\\Exception\\CustomerNotLoggedInException;\n+use Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepositoryInterface;\n+use Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\EntityNotFoundException;\n+use Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\n+use Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Filter\\EqualsFilter;\n use Shopware\\Core\\Framework\\Plugin\\Exception\\DecorationPatternException;\n use Shopware\\Core\\Framework\\Routing\\Annotation\\LoginRequired;\n use Shopware\\Core\\Framework\\Routing\\Annotation\\RouteScope;\n use Shopware\\Core\\Framework\\Routing\\Annotation\\Since;\n+use Shopware\\Core\\Framework\\Routing\\Exception\\InvalidRequestParameterException;\n use Shopware\\Core\\System\\SalesChannel\\SalesChannelContext;\n use Symfony\\Component\\HttpFoundation\\ParameterBag;\n use Symfony\\Component\\HttpFoundation\\Request;\n@@ -17,14 +23,14 @@\n  */\n class CancelOrderRoute extends AbstractCancelOrderRoute\n {\n-    /**\n-     * @var OrderService\n-     */\n-    private $orderService;\n+    private OrderService $orderService;\n+\n+    private EntityRepositoryInterface $orderRepository;\n \n-    public function __construct(OrderService $orderService)\n+    public function __construct(OrderService $orderService, EntityRepositoryInterface $orderRepository)\n     {\n         $this->orderService = $orderService;\n+        $this->orderRepository = $orderRepository;\n     }\n \n     public function getDecorated(): AbstractCancelOrderRoute\n@@ -56,13 +62,35 @@ public function getDecorated(): AbstractCancelOrderRoute\n      */\n     public function cancel(Request $request, SalesChannelContext $context): CancelOrderRouteResponse\n     {\n+        $orderId = $request->get('orderId', null);\n+\n+        if ($orderId === null) {\n+            throw new InvalidRequestParameterException('orderId');\n+        }\n+\n+        $this->verify($orderId, $context);\n+\n         $newState = $this->orderService->orderStateTransition(\n-            $request->get('orderId'),\n+            $orderId,\n             'cancel',\n             new ParameterBag(),\n             $context->getContext()\n         );\n \n         return new CancelOrderRouteResponse($newState);\n     }\n+\n+    private function verify(string $orderId, SalesChannelContext $context): void\n+    {\n+        if ($context->getCustomer() === null) {\n+            throw new CustomerNotLoggedInException();\n+        }\n+\n+        $criteria = new Criteria([$orderId]);\n+        $criteria->addFilter(new EqualsFilter('orderCustomer.customerId', $context->getCustomer()->getId()));\n+\n+        if ($this->orderRepository->searchIds($criteria, $context->getContext())->firstId() === null) {\n+            throw new EntityNotFoundException('order', $orderId);\n+        }\n+    }\n }"
        },
        {
          "filename": "src/Core/Checkout/Test/Order/SalesChannel/CancelOrderRouteTest.php",
          "status": "added",
          "additions": 229,
          "deletions": 0,
          "patch": "@@ -0,0 +1,229 @@\n+<?php declare(strict_types=1);\n+\n+namespace Shopware\\Core\\Checkout\\Test\\Order\\SalesChannel;\n+\n+use PHPUnit\\Framework\\TestCase;\n+use Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItem;\n+use Shopware\\Core\\Checkout\\Cart\\Price\\Struct\\CalculatedPrice;\n+use Shopware\\Core\\Checkout\\Cart\\Price\\Struct\\CartPrice;\n+use Shopware\\Core\\Checkout\\Cart\\Price\\Struct\\QuantityPriceDefinition;\n+use Shopware\\Core\\Checkout\\Cart\\Tax\\Struct\\CalculatedTaxCollection;\n+use Shopware\\Core\\Checkout\\Cart\\Tax\\Struct\\TaxRuleCollection;\n+use Shopware\\Core\\Checkout\\Order\\OrderEntity;\n+use Shopware\\Core\\Checkout\\Test\\Customer\\SalesChannel\\CustomerTestTrait;\n+use Shopware\\Core\\Defaults;\n+use Shopware\\Core\\Framework\\Context;\n+use Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityRepositoryInterface;\n+use Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Criteria;\n+use Shopware\\Core\\Framework\\Test\\IdsCollection;\n+use Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;\n+use Shopware\\Core\\Framework\\Test\\TestDataCollection;\n+use Shopware\\Core\\Framework\\Uuid\\Uuid;\n+use Symfony\\Bundle\\FrameworkBundle\\KernelBrowser;\n+use Symfony\\Component\\HttpFoundation\\Response;\n+\n+class CancelOrderRouteTest extends TestCase\n+{\n+    use IntegrationTestBehaviour;\n+    use CustomerTestTrait;\n+\n+    private KernelBrowser $browser;\n+\n+    private EntityRepositoryInterface $customerRepository;\n+\n+    private IdsCollection $ids;\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+\n+        $this->customerRepository = $this->getContainer()->get('customer.repository');\n+        $this->ids = new TestDataCollection();\n+\n+        $this->browser = $this->createCustomSalesChannelBrowser([\n+            'id' => $this->ids->create('sales-channel'),\n+        ]);\n+\n+        $this->assignSalesChannelContext($this->browser);\n+\n+        $email = Uuid::randomHex() . '@example.com';\n+        $customerId = $this->createCustomer('shopware', $email);\n+\n+        $this->ids->set('order-1', $this->createOrder($this->ids, $customerId));\n+        $this->ids->set('order-2', $this->createOrder($this->ids, $this->createCustomer('test', 'test-other@test.de')));\n+\n+        $this->browser\n+            ->request(\n+                'POST',\n+                '/store-api/account/login',\n+                [\n+                    'email' => $email,\n+                    'password' => 'shopware',\n+                ]\n+            );\n+\n+        $response = json_decode($this->browser->getResponse()->getContent(), true);\n+\n+        $this->browser->setServerParameter('HTTP_SW_CONTEXT_TOKEN', $response['contextToken']);\n+    }\n+\n+    public function testCancelMyOwnOrder(): void\n+    {\n+        $this->browser\n+            ->request(\n+                'POST',\n+                '/store-api/order/state/cancel',\n+                [\n+                    'orderId' => $this->ids->get('order-1'),\n+                ]\n+            );\n+\n+        $response = json_decode($this->browser->getResponse()->getContent(), true);\n+\n+        static::assertSame(Response::HTTP_OK, $this->browser->getResponse()->getStatusCode());\n+        static::assertSame('cancelled', $response['technicalName']);\n+\n+        $criteria = new Criteria([$this->ids->get('order-1')]);\n+        $criteria->addAssociation('stateMachineState');\n+\n+        /** @var OrderEntity $order */\n+        $order = $this->getContainer()->get('order.repository')->search($criteria, Context::createDefaultContext())->first();\n+\n+        static::assertSame('cancelled', $order->getStateMachineState()->getTechnicalName());\n+    }\n+\n+    public function testCancelRandomOrder(): void\n+    {\n+        $this->browser\n+            ->request(\n+                'POST',\n+                '/store-api/order/state/cancel',\n+                [\n+                    'orderId' => Uuid::randomHex(),\n+                ]\n+            );\n+\n+        $response = json_decode($this->browser->getResponse()->getContent(), true);\n+\n+        static::assertSame(Response::HTTP_NOT_FOUND, $this->browser->getResponse()->getStatusCode());\n+        static::assertSame('FRAMEWORK__ENTITY_NOT_FOUND', $response['errors'][0]['code']);\n+    }\n+\n+    public function testCancelOtherUsersOrder(): void\n+    {\n+        $this->browser\n+            ->request(\n+                'POST',\n+                '/store-api/order/state/cancel',\n+                [\n+                    'orderId' => $this->ids->get('order-2'),\n+                ]\n+            );\n+\n+        $response = json_decode($this->browser->getResponse()->getContent(), true);\n+\n+        static::assertSame(Response::HTTP_NOT_FOUND, $this->browser->getResponse()->getStatusCode());\n+        static::assertSame('FRAMEWORK__ENTITY_NOT_FOUND', $response['errors'][0]['code']);\n+    }\n+\n+    public function testCancelWithoutLogin(): void\n+    {\n+        $this->browser = $this->createCustomSalesChannelBrowser([\n+            'id' => Uuid::randomHex(),\n+        ]);\n+\n+        $this->browser\n+            ->request(\n+                'POST',\n+                '/store-api/order/state/cancel',\n+                [\n+                    'orderId' => $this->ids->get('order-2'),\n+                ]\n+            );\n+\n+        $response = json_decode($this->browser->getResponse()->getContent(), true);\n+\n+        static::assertSame(Response::HTTP_FORBIDDEN, $this->browser->getResponse()->getStatusCode());\n+        static::assertSame('CHECKOUT__CUSTOMER_NOT_LOGGED_IN', $response['errors'][0]['code']);\n+    }\n+\n+    private function createOrder(IdsCollection $ids, string $customerId): string\n+    {\n+        $id = Uuid::randomHex();\n+\n+        $this->getContainer()->get('order.repository')->create(\n+            [[\n+                'id' => $id,\n+                'orderDateTime' => (new \\DateTimeImmutable())->format(Defaults::STORAGE_DATE_TIME_FORMAT),\n+                'price' => new CartPrice(10, 10, 10, new CalculatedTaxCollection(), new TaxRuleCollection(), CartPrice::TAX_STATE_NET),\n+                'shippingCosts' => new CalculatedPrice(10, 10, new CalculatedTaxCollection(), new TaxRuleCollection()),\n+                'orderCustomer' => [\n+                    'customerId' => $customerId,\n+                    'email' => 'test@example.com',\n+                    'salutationId' => $this->getValidSalutationId(),\n+                    'firstName' => 'Max',\n+                    'lastName' => 'Mustermann',\n+                ],\n+                'stateId' => $this->getStateMachineState(),\n+                'paymentMethodId' => $this->getValidPaymentMethodId(),\n+                'currencyId' => Defaults::CURRENCY,\n+                'currencyFactor' => 1.0,\n+                'salesChannelId' => Defaults::SALES_CHANNEL,\n+                'billingAddressId' => $billingAddressId = Uuid::randomHex(),\n+                'addresses' => [\n+                    [\n+                        'id' => $billingAddressId,\n+                        'salutationId' => $this->getValidSalutationId(),\n+                        'firstName' => 'Max',\n+                        'lastName' => 'Mustermann',\n+                        'street' => 'Ebbinghoff 10',\n+                        'zipcode' => '48624',\n+                        'city' => 'Sch\u00f6ppingen',\n+                        'countryId' => $this->getValidCountryId(),\n+                    ],\n+                ],\n+                'lineItems' => [\n+                    [\n+                        'id' => $ids->get('VoucherA'),\n+                        'type' => LineItem::PROMOTION_LINE_ITEM_TYPE,\n+                        'code' => $ids->get('VoucherA'),\n+                        'identifier' => $ids->get('VoucherA'),\n+                        'quantity' => 1,\n+                        'payload' => ['promotionId' => $ids->get('voucherA')],\n+                        'label' => 'label',\n+                        'price' => new CalculatedPrice(200, 200, new CalculatedTaxCollection(), new TaxRuleCollection()),\n+                        'priceDefinition' => new QuantityPriceDefinition(200, new TaxRuleCollection(), 2),\n+                    ],\n+                    [\n+                        'id' => $ids->get('VoucherC'),\n+                        'type' => LineItem::PROMOTION_LINE_ITEM_TYPE,\n+                        'code' => $ids->get('VoucherC'),\n+                        'identifier' => $ids->get('VoucherC'),\n+                        'payload' => ['promotionId' => $ids->get('voucherB')],\n+                        'quantity' => 1,\n+                        'label' => 'label',\n+                        'price' => new CalculatedPrice(200, 200, new CalculatedTaxCollection(), new TaxRuleCollection()),\n+                        'priceDefinition' => new QuantityPriceDefinition(200, new TaxRuleCollection(), 2),\n+                    ],\n+                    [\n+                        'id' => $ids->get('VoucherB'),\n+                        'type' => LineItem::PROMOTION_LINE_ITEM_TYPE,\n+                        'code' => $ids->get('VoucherB'),\n+                        'identifier' => $ids->get('VoucherB'),\n+                        'payload' => ['promotionId' => $ids->get('voucherB')],\n+                        'quantity' => 1,\n+                        'label' => 'label',\n+                        'price' => new CalculatedPrice(200, 200, new CalculatedTaxCollection(), new TaxRuleCollection()),\n+                        'priceDefinition' => new QuantityPriceDefinition(200, new TaxRuleCollection(), 2),\n+                    ],\n+                ],\n+                'deliveries' => [],\n+                'context' => '{}',\n+                'payload' => '{}',\n+            ]],\n+            Context::createDefaultContext()\n+        );\n+\n+        return $id;\n+    }\n+}"
        },
        {
          "filename": "src/Core/Framework/Test/TestCaseBase/BasicTestDataBehaviour.php",
          "status": "modified",
          "additions": 15,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@\n \n namespace Shopware\\Core\\Framework\\Test\\TestCaseBase;\n \n+use Shopware\\Core\\Checkout\\Order\\OrderStates;\n use Shopware\\Core\\Checkout\\Payment\\PaymentMethodEntity;\n use Shopware\\Core\\Checkout\\Shipping\\ShippingMethodEntity;\n use Shopware\\Core\\Defaults;\n@@ -180,4 +181,18 @@ protected function getValidTaxId(): string\n \n         return $repository->searchIds($criteria, Context::createDefaultContext())->getIds()[0];\n     }\n+\n+    protected function getStateMachineState(string $stateMachine = OrderStates::STATE_MACHINE, string $state = OrderStates::STATE_OPEN): string\n+    {\n+        /** @var EntityRepositoryInterface $repository */\n+        $repository = $this->getContainer()->get('state_machine_state.repository');\n+\n+        $criteria = new Criteria();\n+        $criteria\n+            ->setLimit(1)\n+            ->addFilter(new EqualsFilter('technicalName', $state))\n+            ->addFilter(new EqualsFilter('stateMachine.technicalName', $stateMachine));\n+\n+        return $repository->searchIds($criteria, Context::createDefaultContext())->getIds()[0];\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 5,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a87d38f4e4ab920afb728d396a4fdff6dd1ed893",
            "date": "2025-01-14T12:59:02Z",
            "author_login": "Bird87ZA"
          },
          {
            "sha": "e957d7150a872944c008a7169bf5f8d97889b355",
            "date": "2025-01-14T11:55:14Z",
            "author_login": "shyim"
          },
          {
            "sha": "02af717865eb1d240850314ad103fc276dbb56f8",
            "date": "2025-01-14T10:50:49Z",
            "author_login": "akf-bw"
          },
          {
            "sha": "17723a093f9cf2c4617a471091ef4607da1d8769",
            "date": "2025-01-14T10:29:25Z",
            "author_login": "jleifeld"
          },
          {
            "sha": "9b977d57e54a9275be40804a7dd7cca05c0f748c",
            "date": "2025-01-14T10:24:01Z",
            "author_login": "frobel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Shopware is an open source eCommerce platform. In versions prior to 6.4.1.1 the admin api has exposed some internal hidden fields when an association has been loaded with a to many reference. Users are recommend to update to version 6.4.1.1. You can get the update to 6.4.1.1 regularly via the Auto-Updater or directly via the download overview. For older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-06-24T21:15:08.007",
    "last_modified": "2024-11-21T06:07:35.340",
    "fix_date": "2021-05-11T09:17:56Z"
  },
  "references": [
    {
      "url": "https://docs.shopware.com/en/shopware-6-en/security-updates/security-update-06-2021",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/commit/b5c3ce3e93bd121324d72aa9d367cb636ff1c0eb",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/security/advisories/GHSA-gpmh-g94g-qrhr",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.shopware.com/en/shopware-6-en/security-updates/security-update-06-2021",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/commit/b5c3ce3e93bd121324d72aa9d367cb636ff1c0eb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/security/advisories/GHSA-gpmh-g94g-qrhr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:59.759482",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "shopware",
    "owner": "shopware",
    "created_at": "2018-05-03T13:00:31Z",
    "updated_at": "2025-01-14T12:59:07Z",
    "pushed_at": "2025-01-14T13:28:13Z",
    "size": 289410,
    "stars": 2894,
    "forks": 1042,
    "open_issues": 911,
    "watchers": 2894,
    "has_security_policy": false,
    "default_branch": "trunk",
    "protected_branches": [
      "6.4",
      "6.5.x"
    ],
    "languages": {
      "PHP": 33467815,
      "JavaScript": 12727064,
      "Twig": 5566016,
      "TypeScript": 1850093,
      "SCSS": 1033491,
      "CSS": 135217,
      "Vue": 32178,
      "Shell": 30871,
      "HTML": 26015,
      "Nix": 4972,
      "Groovy": 3900,
      "Dockerfile": 2862,
      "Smarty": 1216
    },
    "commit_activity": {
      "total_commits_last_year": 4219,
      "avg_commits_per_week": 81.13461538461539,
      "days_active_last_year": 285
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:37:45.571181"
  }
}