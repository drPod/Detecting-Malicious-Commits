{
  "cve_id": "CVE-2021-32839",
  "github_data": {
    "repository": "andialbrecht/sqlparse",
    "fix_commit": "8238a9e450ed1524e40cb3a8b0b3c00606903aeb",
    "related_commits": [
      "8238a9e450ed1524e40cb3a8b0b3c00606903aeb",
      "8238a9e450ed1524e40cb3a8b0b3c00606903aeb"
    ],
    "patch_url": "https://github.com/andialbrecht/sqlparse/commit/8238a9e450ed1524e40cb3a8b0b3c00606903aeb.patch",
    "fix_commit_details": {
      "sha": "8238a9e450ed1524e40cb3a8b0b3c00606903aeb",
      "commit_date": "2021-09-07T10:27:28Z",
      "author": {
        "login": "andialbrecht",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Optimize regular expression for identifying line breaks in comments.",
        "length": 68,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 22,
        "additions": 21,
        "deletions": 1
      },
      "files": [
        {
          "filename": "sqlparse/filters/others.py",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -22,7 +22,10 @@ def get_next_comment():\n         def _get_insert_token(token):\n             \"\"\"Returns either a whitespace or the line breaks from token.\"\"\"\n             # See issue484 why line breaks should be preserved.\n-            m = re.search(r'((\\r\\n|\\r|\\n)+) *$', token.value)\n+            # Note: The actual value for a line break is replaced by \\n\n+            # in SerializerUnicode which will be executed in the\n+            # postprocessing state.\n+            m = re.search(r'((\\r|\\n)+) *$', token.value)\n             if m is not None:\n                 return sql.Token(T.Whitespace.Newline, m.groups()[0])\n             else:"
        },
        {
          "filename": "tests/test_format.py",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -84,6 +84,23 @@ def test_strip_comments_multi(self):\n         res = sqlparse.format(sql, strip_comments=True)\n         assert res == 'select (select 2)'\n \n+    def test_strip_comments_preserves_linebreak(self):\n+        sql = 'select * -- a comment\\r\\nfrom foo'\n+        res = sqlparse.format(sql, strip_comments=True)\n+        assert res == 'select *\\nfrom foo'\n+        sql = 'select * -- a comment\\nfrom foo'\n+        res = sqlparse.format(sql, strip_comments=True)\n+        assert res == 'select *\\nfrom foo'\n+        sql = 'select * -- a comment\\rfrom foo'\n+        res = sqlparse.format(sql, strip_comments=True)\n+        assert res == 'select *\\nfrom foo'\n+        sql = 'select * -- a comment\\r\\n\\r\\nfrom foo'\n+        res = sqlparse.format(sql, strip_comments=True)\n+        assert res == 'select *\\n\\nfrom foo'\n+        sql = 'select * -- a comment\\n\\nfrom foo'\n+        res = sqlparse.format(sql, strip_comments=True)\n+        assert res == 'select *\\n\\nfrom foo'\n+\n     def test_strip_ws(self):\n         f = lambda sql: sqlparse.format(sql, strip_whitespace=True)\n         s = 'select\\n* from      foo\\n\\twhere  ( 1 = 2 )\\n'"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "38c065b86ac43f76ffd319747e57096ed78bfa63",
            "date": "2024-12-10T12:06:05Z",
            "author_login": "andialbrecht"
          },
          {
            "sha": "ec0af5bf6345750d84274bc5c857d4a75b88619b",
            "date": "2024-12-10T12:04:13Z",
            "author_login": "andialbrecht"
          },
          {
            "sha": "c81cdf9117726b7d679991d816fcca08d3627d15",
            "date": "2024-12-10T08:50:27Z",
            "author_login": "andialbrecht"
          },
          {
            "sha": "a31245eb1ceb292ad220a66b57de1fccd6f8917b",
            "date": "2024-12-10T08:43:57Z",
            "author_login": "andialbrecht"
          },
          {
            "sha": "bbd8f51d57da96bc07229995192a45514237eb4d",
            "date": "2024-11-21T13:59:34Z",
            "author_login": "living180"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "sqlparse is a non-validating SQL parser module for Python. In sqlparse versions 0.4.0 and 0.4.1 there is a regular Expression Denial of Service in sqlparse vulnerability. The regular expression may cause exponential backtracking on strings containing many repetitions of '\\r\\n' in SQL comments. Only the formatting feature that removes comments from SQL statements is affected by this regular expression. As a workaround don't use the sqlformat.format function with keyword strip_comments=True or the --strip-comments command line flag when using the sqlformat command line tool. The issues has been fixed in sqlparse 0.4.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-20T17:15:09.067",
    "last_modified": "2024-11-21T06:07:51.463",
    "fix_date": "2021-09-07T10:27:28Z"
  },
  "references": [
    {
      "url": "https://github.com/andialbrecht/sqlparse/commit/8238a9e450ed1524e40cb3a8b0b3c00606903aeb",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/andialbrecht/sqlparse/security/advisories/GHSA-p5w8-wqhj-9hhf",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/andialbrecht/sqlparse/commit/8238a9e450ed1524e40cb3a8b0b3c00606903aeb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/andialbrecht/sqlparse/security/advisories/GHSA-p5w8-wqhj-9hhf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.779967",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "sqlparse",
    "owner": "andialbrecht",
    "created_at": "2012-04-18T19:33:21Z",
    "updated_at": "2025-01-14T02:17:16Z",
    "pushed_at": "2024-12-10T12:06:07Z",
    "size": 1518,
    "stars": 3794,
    "forks": 703,
    "open_issues": 250,
    "watchers": 3794,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 234389,
      "PLpgSQL": 3680,
      "Makefile": 546
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T19:11:27.886349"
  }
}