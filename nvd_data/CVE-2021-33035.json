{
  "cve_id": "CVE-2021-33035",
  "github_data": {
    "repository": "apache/openoffice",
    "fix_commit": "efddaef0151af3be16078cc4d88c6bae0f911e56",
    "related_commits": [
      "efddaef0151af3be16078cc4d88c6bae0f911e56",
      "efddaef0151af3be16078cc4d88c6bae0f911e56"
    ],
    "patch_url": "https://github.com/apache/openoffice/commit/efddaef0151af3be16078cc4d88c6bae0f911e56.patch",
    "fix_commit_details": {
      "sha": "efddaef0151af3be16078cc4d88c6bae0f911e56",
      "commit_date": "2021-05-15T19:27:35Z",
      "author": {
        "login": "ardovm",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "add useful checks",
        "length": 17,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 45,
        "additions": 45,
        "deletions": 0
      },
      "files": [
        {
          "filename": "main/connectivity/source/drivers/dbase/DTable.cxx",
          "status": "modified",
          "additions": 45,
          "deletions": 0,
          "patch": "@@ -896,6 +896,10 @@ sal_Bool ODbaseTable::fetchRow(OValueRefRow& _rRow,const OSQLColumns & _rCols, s\n         else if ( DataType::TIMESTAMP == nType )\n         {\n             sal_Int32 nDate = 0,nTime = 0;\n+            OSL_ENSURE(nLen == 8, \"Invalid length for date field\");\n+            if (nLen != 8) {\n+                return false;\n+            }\n \t\t\tmemcpy(&nDate, pData, 4);\n             memcpy(&nTime, pData+ 4, 4);\n             if ( !nDate && !nTime )\n@@ -911,13 +915,21 @@ sal_Bool ODbaseTable::fetchRow(OValueRefRow& _rRow,const OSQLColumns & _rCols, s\n         }\n         else if ( DataType::INTEGER == nType )\n         {\n+            OSL_ENSURE(nLen == 4, \"Invalid length for integer field\");\n+            if (nLen != 4) {\n+                return false;\n+            }\n             sal_Int32 nValue = 0;\n \t\t\tmemcpy(&nValue, pData, nLen);\n             *(_rRow->get())[i] = nValue;\n         }\n         else if ( DataType::DOUBLE == nType )\n         {\n             double d = 0.0;\n+            OSL_ENSURE(nLen == 8, \"Invalid length for double field\");\n+            if (nLen != 8) {\n+                return false;\n+            }\n             if (getBOOL((*aIter)->getPropertyValue(OMetaConnection::getPropMap().getNameByIndex(PROPERTY_ID_ISCURRENCY)))) // Currency wird gesondert behandelt\n             {\n                 sal_Int64 nValue = 0;\n@@ -959,6 +971,10 @@ sal_Bool ODbaseTable::fetchRow(OValueRefRow& _rRow,const OSQLColumns & _rCols, s\n \t\t\t{\n \t\t\t\tcase DataType::DATE:\n \t\t\t\t{\n+                    OSL_ENSURE(nLen == 8, \"Invalid length for date field\");\n+                    if (nLen != 8) {\n+                        return false;\n+                    }\n \t\t\t\t\tif (aStr.Len() != nLen)\n \t\t\t\t\t{\n \t\t\t\t\t\t(_rRow->get())[i]->setNull();\n@@ -978,6 +994,10 @@ sal_Bool ODbaseTable::fetchRow(OValueRefRow& _rRow,const OSQLColumns & _rCols, s\n \t\t\t\tbreak;\n \t\t\t\tcase DataType::BIT:\n \t\t\t\t{\n+                    OSL_ENSURE(nLen == 1, \"Invalid length for bit field\");\n+                    if (nLen != 1) {\n+                        return false;\n+                    }\n \t\t\t\t\tsal_Bool b;\n \t\t\t\t\tswitch (* ((const char *)pData))\n \t\t\t\t\t{\n@@ -1873,6 +1893,11 @@ sal_Bool ODbaseTable::UpdateBuffer(OValueRefVector& rRow, OValueRefRow pOrgRow,c\n \t\t\t{\n                 case DataType::TIMESTAMP:\n                     {\n+                        OSL_ENSURE(nLen == 8, \"Invalid length for timestamp field\");\n+                        if (nLen != 8) {\n+                            bHadError = true;\n+                            break;\n+                        }\n                         sal_Int32 nJulianDate = 0, nJulianTime = 0;\n                         lcl_CalcJulDate(nJulianDate,nJulianTime,rRow.get()[nPos]->getValue());\n                         // Genau 8 Byte kopieren:\n@@ -1882,6 +1907,11 @@ sal_Bool ODbaseTable::UpdateBuffer(OValueRefVector& rRow, OValueRefRow pOrgRow,c\n                     break;\n \t\t\t\tcase DataType::DATE:\n \t\t\t\t{\n+                    OSL_ENSURE(nLen == 8, \"Invalid length for date field\");\n+                    if (nLen != 8) {\n+                        bHadError = true;\n+                        break;\n+                    }\n \t\t\t\t\t::com::sun::star::util::Date aDate;\n \t\t\t\t\tif(rRow.get()[nPos]->getValue().getTypeKind() == DataType::DOUBLE)\n \t\t\t\t\t\taDate = ::dbtools::DBTypeConversion::toDate(rRow.get()[nPos]->getValue().getDouble());\n@@ -1900,12 +1930,22 @@ sal_Bool ODbaseTable::UpdateBuffer(OValueRefVector& rRow, OValueRefRow pOrgRow,c\n \t\t\t\t} break;\n                 case DataType::INTEGER:\n                     {\n+                        OSL_ENSURE(nLen == 4, \"Invalid length for integer field\");\n+                        if (nLen != 4) {\n+                            bHadError = true;\n+                            break;\n+                        }\n                         sal_Int32 nValue = rRow.get()[nPos]->getValue();\n                         memcpy(pData,&nValue,nLen);\n                     }\n                     break;\n                 case DataType::DOUBLE:\n                     {\n+                        OSL_ENSURE(nLen == 8, \"Invalid length for double field\");\n+                        if (nLen != 8) {\n+                            bHadError = true;\n+                            break;\n+                        }\n                         const double d = rRow.get()[nPos]->getValue();\n                         m_pColumns->getByIndex(i) >>= xCol;\n                         \n@@ -1958,6 +1998,11 @@ sal_Bool ODbaseTable::UpdateBuffer(OValueRefVector& rRow, OValueRefRow pOrgRow,c\n \t\t\t\t\t}\n \t\t\t\t} break;\n \t\t\t\tcase DataType::BIT:\n+                    OSL_ENSURE(nLen == 1, \"Invalid length for bit field\");\n+                    if (nLen != 1) {\n+                        bHadError = true;\n+                        break;\n+                    }\n \t\t\t\t\t*pData = rRow.get()[nPos]->getValue().getBool() ? 'T' : 'F';\n \t\t\t\t\tbreak;\n                 case DataType::LONGVARBINARY:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5fc772444d1ca43c498be6e8a55b1413a98f7002",
            "date": "2025-01-14T15:50:15Z",
            "author_login": "Pilot-Pirx"
          },
          {
            "sha": "eed36da692a6e12fe28192f487545745411ead90",
            "date": "2025-01-13T22:46:39Z",
            "author_login": "jbampton"
          },
          {
            "sha": "3fe80fe07dc49d76077cbcd305003388ef5bc6c0",
            "date": "2025-01-12T20:34:08Z",
            "author_login": "Pilot-Pirx"
          },
          {
            "sha": "7cb8b6bd5029939e595a634553bf3d6741661649",
            "date": "2025-01-11T23:18:19Z",
            "author_login": "Pilot-Pirx"
          },
          {
            "sha": "1a922a2853313aa519308538da98ce1f6a7d377b",
            "date": "2025-01-11T12:06:50Z",
            "author_login": "Pilot-Pirx"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-120",
    "description": "Apache OpenOffice opens dBase/DBF documents and shows the contents as spreadsheets. DBF are database files with data organized in fields. When reading DBF data the size of certain fields is not checked: the data is just copied into local variables. A carefully crafted document could overflow the allocated space, leading to the execution of arbitrary code by altering the contents of the program stack. This issue affects Apache OpenOffice up to and including version 4.1.10",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-23T08:15:06.747",
    "last_modified": "2024-11-21T06:08:10.070",
    "fix_date": "2021-05-15T19:27:35Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2021/10/07/3",
      "source": "security@apache.org",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/apache/openoffice/commit/efddaef0151af3be16078cc4d88c6bae0f911e56#diff-ea66e734dd358922aba12ad4ba39c96bdc6cbde587d07dbc63d04daa0a30e90f",
      "source": "security@apache.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/r1ab8532e11f41bc7ca057ac7e39cab25f2e1f9d5f4929788ae21c8b9%40%3Cusers.openoffice.apache.org%3E",
      "source": "security@apache.org",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r929c0c6a53cad64a1007b878342756badbb05ddd9b8f31a6d0b424cb%40%3Cannounce.apache.org%3E",
      "source": "security@apache.org",
      "tags": []
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2021/10/07/3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/apache/openoffice/commit/efddaef0151af3be16078cc4d88c6bae0f911e56#diff-ea66e734dd358922aba12ad4ba39c96bdc6cbde587d07dbc63d04daa0a30e90f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.apache.org/thread.html/r1ab8532e11f41bc7ca057ac7e39cab25f2e1f9d5f4929788ae21c8b9%40%3Cusers.openoffice.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.apache.org/thread.html/r929c0c6a53cad64a1007b878342756badbb05ddd9b8f31a6d0b424cb%40%3Cannounce.apache.org%3E",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.783694",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openoffice",
    "owner": "apache",
    "created_at": "2013-11-13T08:00:13Z",
    "updated_at": "2025-01-14T15:50:42Z",
    "pushed_at": "2025-01-14T15:51:57Z",
    "size": 2354096,
    "stars": 980,
    "forks": 319,
    "open_issues": 11,
    "watchers": 980,
    "has_security_policy": false,
    "default_branch": "trunk",
    "protected_branches": [],
    "languages": {
      "C++": 235507391,
      "Java": 29244655,
      "Makefile": 6800171,
      "XSLT": 6439772,
      "PostScript": 6277491,
      "C": 4458818,
      "Perl": 3207829,
      "CSS": 1600887,
      "HTML": 935201,
      "VBA": 576142,
      "Visual Basic 6.0": 345046,
      "C#": 329778,
      "Objective-C++": 312723,
      "Python": 300334,
      "M4": 267836,
      "Shell": 254961,
      "Yacc": 213027,
      "Objective-C": 183064,
      "Assembly": 99478,
      "Visual Basic .NET": 97223,
      "JavaScript": 67829,
      "Lex": 58441,
      "Mathematica": 48994,
      "Scilab": 40225,
      "Awk": 36964,
      "Batchfile": 28793,
      "Prolog": 23959,
      "Pawn": 23782,
      "Raku": 20772,
      "Pascal": 19316,
      "VBScript": 18567,
      "Roff": 14884,
      "LLVM": 13074,
      "AppleScript": 12805,
      "Classic ASP": 10331,
      "NSIS": 10074,
      "AMPL": 9399,
      "FreeBASIC": 8550,
      "Emacs Lisp": 5625,
      "PHP": 1779,
      "Rich Text Format": 1680,
      "SourcePawn": 968,
      "sed": 133
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T17:14:46.685903"
  }
}