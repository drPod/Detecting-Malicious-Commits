{
  "cve_id": "CVE-2021-33194",
  "github_data": {
    "repository": "golang/net",
    "fix_commit": "37e1c6afe02340126705deced573a85ab75209d7",
    "related_commits": [
      "37e1c6afe02340126705deced573a85ab75209d7",
      "37e1c6afe02340126705deced573a85ab75209d7"
    ],
    "patch_url": "https://github.com/golang/net/commit/37e1c6afe02340126705deced573a85ab75209d7.patch",
    "fix_commit_details": {
      "sha": "37e1c6afe02340126705deced573a85ab75209d7",
      "commit_date": "2021-04-18T11:15:27Z",
      "author": {
        "login": "nigeltao",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "html: ignore templates nested within foreign content",
        "length": 390,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 46,
        "additions": 45,
        "deletions": 1
      },
      "files": [
        {
          "filename": "html/parse.go",
          "status": "modified",
          "additions": 23,
          "deletions": 1,
          "patch": "@@ -663,6 +663,24 @@ func inHeadIM(p *parser) bool {\n \t\t\t// Ignore the token.\n \t\t\treturn true\n \t\tcase a.Template:\n+\t\t\t// TODO: remove this divergence from the HTML5 spec.\n+\t\t\t//\n+\t\t\t// We don't handle all of the corner cases when mixing foreign\n+\t\t\t// content (i.e. <math> or <svg>) with <template>. Without this\n+\t\t\t// early return, we can get into an infinite loop, possibly because\n+\t\t\t// of the \"TODO... further divergence\" a little below.\n+\t\t\t//\n+\t\t\t// As a workaround, if we are mixing foreign content and templates,\n+\t\t\t// just ignore the rest of the HTML. Foreign content is rare and a\n+\t\t\t// relatively old HTML feature. Templates are also rare and a\n+\t\t\t// relatively new HTML feature. Their combination is very rare.\n+\t\t\tfor _, e := range p.oe {\n+\t\t\t\tif e.Namespace != \"\" {\n+\t\t\t\t\tp.im = ignoreTheRemainingTokens\n+\t\t\t\t\treturn true\n+\t\t\t\t}\n+\t\t\t}\n+\n \t\t\tp.addElement()\n \t\t\tp.afe = append(p.afe, &scopeMarker)\n \t\t\tp.framesetOK = false\n@@ -683,7 +701,7 @@ func inHeadIM(p *parser) bool {\n \t\t\tif !p.oe.contains(a.Template) {\n \t\t\t\treturn true\n \t\t\t}\n-\t\t\t// TODO: remove this divergence from the HTML5 spec.\n+\t\t\t// TODO: remove this further divergence from the HTML5 spec.\n \t\t\t//\n \t\t\t// See https://bugs.chromium.org/p/chromium/issues/detail?id=829668\n \t\t\tp.generateImpliedEndTags()\n@@ -2127,6 +2145,10 @@ func afterAfterFramesetIM(p *parser) bool {\n \treturn true\n }\n \n+func ignoreTheRemainingTokens(p *parser) bool {\n+\treturn true\n+}\n+\n const whitespaceOrNUL = whitespace + \"\\x00\"\n \n // Section 12.2.6.5"
        },
        {
          "filename": "html/parse_test.go",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -267,6 +267,9 @@ func TestParser(t *testing.T) {\n \t\t\t\tif err != nil {\n \t\t\t\t\tt.Fatal(err)\n \t\t\t\t}\n+\t\t\t\tif parseTestBlacklist[ta.text] {\n+\t\t\t\t\tcontinue\n+\t\t\t\t}\n \n \t\t\t\terr = testParseCase(ta.text, ta.want, ta.context, ParseOptionEnableScripting(ta.scripting))\n \n@@ -379,6 +382,14 @@ func testParseCase(text, want, context string, opts ...ParseOption) (err error)\n \treturn nil\n }\n \n+// Some test inputs are simply skipped - we would otherwise fail the test. We\n+// blacklist such inputs from the parse test.\n+var parseTestBlacklist = map[string]bool{\n+\t// See the a.Template TODO in inHeadIM.\n+\t`<math><template><mo><template>`:                                     true,\n+\t`<template><svg><foo><template><foreignObject><div></template><div>`: true,\n+}\n+\n // Some test input result in parse trees are not 'well-formed' despite\n // following the HTML5 recovery algorithms. Rendering and re-parsing such a\n // tree will not result in an exact clone of that tree. We blacklist such\n@@ -454,6 +465,17 @@ func TestParseFragmentWithNilContext(t *testing.T) {\n \tParseFragment(strings.NewReader(\"<p>hello</p>\"), nil)\n }\n \n+func TestParseFragmentForeignContentTemplates(t *testing.T) {\n+\tsrcs := []string{\n+\t\t\"<math><html><template><mn><template></template></template>\",\n+\t\t\"<math><math><head><mi><template>\",\n+\t}\n+\tfor _, src := range srcs {\n+\t\t// The next line shouldn't infinite-loop.\n+\t\tParseFragment(strings.NewReader(src), nil)\n+\t}\n+}\n+\n func BenchmarkParser(b *testing.B) {\n \tbuf, err := ioutil.ReadFile(\"testdata/go1.html\")\n \tif err != nil {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "56691ee141895759d9bc5ad694c9c81df7934b4a",
            "date": "2025-01-13T19:22:16Z",
            "author_login": "neild"
          },
          {
            "sha": "7ad0ebf002fad4b30b24867e6bca9dd78e16f0b9",
            "date": "2025-01-10T17:16:41Z",
            "author_login": "neild"
          },
          {
            "sha": "f6b2e53bb7397c5d967e80de365783e8aab53ca2",
            "date": "2024-12-17T18:49:59Z",
            "author_login": "neild"
          },
          {
            "sha": "78717f922ac1826b56217f6a109428286f498eb9",
            "date": "2024-12-17T18:47:28Z",
            "author_login": "neild"
          },
          {
            "sha": "84b528b4a5ab08fa75a2005d5b99aaeadea4bfc0",
            "date": "2024-12-17T18:46:17Z",
            "author_login": "neild"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-835",
    "description": "golang.org/x/net before v0.0.0-20210520170846-37e1c6afe023 allows attackers to cause a denial of service (infinite loop) via crafted ParseFragment input.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-05-26T15:15:08.217",
    "last_modified": "2024-11-21T06:08:29.390",
    "fix_date": "2021-04-18T11:15:27Z"
  },
  "references": [
    {
      "url": "https://github.com/golang/net/commit/37e1c6afe02340126705deced573a85ab75209d7",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://groups.google.com/g/golang-announce/c/wPunbCPkWUg",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/4CHKSFMHZVOBCZSSVRE3UEYNKARTBMTM/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/golang/net/commit/37e1c6afe02340126705deced573a85ab75209d7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://groups.google.com/g/golang-announce/c/wPunbCPkWUg",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/4CHKSFMHZVOBCZSSVRE3UEYNKARTBMTM/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:01:57.122338",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "net",
    "owner": "golang",
    "created_at": "2014-12-04T04:03:57Z",
    "updated_at": "2025-01-14T08:16:46Z",
    "pushed_at": "2025-01-14T00:11:29Z",
    "size": 10897,
    "stars": 2897,
    "forks": 1168,
    "open_issues": 55,
    "watchers": 2897,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 4014631,
      "Assembly": 1736,
      "Dockerfile": 797,
      "Shell": 679
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:26:02.609785"
  }
}