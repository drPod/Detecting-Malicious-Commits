{
  "cve_id": "CVE-2021-36376",
  "github_data": {
    "repository": "dandavison/delta",
    "fix_commit": "f01846bd443aaf92fdd5ac20f461beac3f6ee3fd",
    "related_commits": [
      "f01846bd443aaf92fdd5ac20f461beac3f6ee3fd",
      "f01846bd443aaf92fdd5ac20f461beac3f6ee3fd"
    ],
    "patch_url": "https://github.com/dandavison/delta/commit/f01846bd443aaf92fdd5ac20f461beac3f6ee3fd.patch",
    "fix_commit_details": {
      "sha": "f01846bd443aaf92fdd5ac20f461beac3f6ee3fd",
      "commit_date": "2021-07-10T14:52:06Z",
      "author": {
        "login": "dandavison",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Do not resolve executables as relative path from current directory (#658)",
        "length": 239,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 227,
        "additions": 161,
        "deletions": 66
      },
      "files": [
        {
          "filename": "Cargo.lock",
          "status": "modified",
          "additions": 57,
          "deletions": 0,
          "patch": "@@ -95,6 +95,17 @@ version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ea27d8d5fd867b17523bf6788b1175fa9867f34669d057e9adaf76e27bcea44b\"\n \n+[[package]]\n+name = \"bstr\"\n+version = \"0.2.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a40b47ad93e1a5404e6c18dec46b628214fee441c70f4ab5d6942142cc268a3d\"\n+dependencies = [\n+ \"lazy_static\",\n+ \"memchr\",\n+ \"regex-automata\",\n+]\n+\n [[package]]\n name = \"bytelines\"\n version = \"2.2.2\"\n@@ -272,6 +283,7 @@ dependencies = [\n  \"dirs-next\",\n  \"error-chain\",\n  \"git2\",\n+ \"grep-cli\",\n  \"itertools\",\n  \"lazy_static\",\n  \"pathdiff\",\n@@ -298,6 +310,36 @@ dependencies = [\n  \"url\",\n ]\n \n+[[package]]\n+name = \"globset\"\n+version = \"0.4.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"10463d9ff00a2a068db14231982f5132edebad0d7660cd956a1c30292dbcbfbd\"\n+dependencies = [\n+ \"aho-corasick\",\n+ \"bstr\",\n+ \"fnv\",\n+ \"log\",\n+ \"regex\",\n+]\n+\n+[[package]]\n+name = \"grep-cli\"\n+version = \"0.1.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2dd110c34bb4460d0de5062413b773e385cbf8a85a63fc535590110a09e79e8a\"\n+dependencies = [\n+ \"atty\",\n+ \"bstr\",\n+ \"globset\",\n+ \"lazy_static\",\n+ \"log\",\n+ \"regex\",\n+ \"same-file\",\n+ \"termcolor\",\n+ \"winapi-util\",\n+]\n+\n [[package]]\n name = \"hashbrown\"\n version = \"0.8.2\"\n@@ -600,6 +642,12 @@ dependencies = [\n  \"regex-syntax\",\n ]\n \n+[[package]]\n+name = \"regex-automata\"\n+version = \"0.1.10\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\n+\n [[package]]\n name = \"regex-syntax\"\n version = \"0.6.22\"\n@@ -724,6 +772,15 @@ dependencies = [\n  \"yaml-rust\",\n ]\n \n+[[package]]\n+name = \"termcolor\"\n+version = \"1.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2dfed899f0eb03f32ee8c6a0aabdb8a7949659e3466561fc0adf54e26d88c5f4\"\n+dependencies = [\n+ \"winapi-util\",\n+]\n+\n [[package]]\n name = \"terminal_size\"\n version = \"0.1.15\""
        },
        {
          "filename": "Cargo.toml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -23,6 +23,7 @@ box_drawing = \"0.1.2\"\n bytelines = \"2.2.2\"\n console = \"0.14.1\"\n dirs-next = \"2.0.0\"\n+grep-cli = \"0.1.6\"\n itertools = \"0.10.1\"\n lazy_static = \"1.4\"\n pathdiff = \"0.2.0\""
        },
        {
          "filename": "src/bat_utils/less.rs",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -1,8 +1,12 @@\n use std::process::Command;\n \n pub fn retrieve_less_version() -> Option<usize> {\n-    let cmd = Command::new(\"less\").arg(\"--version\").output().ok()?;\n-    parse_less_version(&cmd.stdout)\n+    if let Ok(less_path) = grep_cli::resolve_binary(\"less\") {\n+        let cmd = Command::new(less_path).arg(\"--version\").output().ok()?;\n+        parse_less_version(&cmd.stdout)\n+    } else {\n+        None\n+    }\n }\n \n fn parse_less_version(output: &[u8]) -> Option<usize> {"
        },
        {
          "filename": "src/bat_utils/output.rs",
          "status": "modified",
          "additions": 92,
          "deletions": 63,
          "patch": "@@ -77,78 +77,35 @@ impl OutputType {\n         let pagerflags =\n             shell_words::split(&pager).chain_err(|| \"Could not parse pager command.\")?;\n \n-        match pagerflags.split_first() {\n+        Ok(match pagerflags.split_first() {\n             Some((pager_name, args)) => {\n                 let pager_path = PathBuf::from(pager_name);\n \n                 let is_less = pager_path.file_stem() == Some(&OsString::from(\"less\"));\n \n-                let mut process = if is_less {\n-                    let mut p = Command::new(&pager_path);\n-                    if args.is_empty() || replace_arguments_to_less {\n-                        p.args(vec![\"--RAW-CONTROL-CHARS\"]);\n-\n-                        // Passing '--no-init' fixes a bug with '--quit-if-one-screen' in older\n-                        // versions of 'less'. Unfortunately, it also breaks mouse-wheel support.\n-                        //\n-                        // See: http://www.greenwoodsoftware.com/less/news.530.html\n-                        //\n-                        // For newer versions (530 or 558 on Windows), we omit '--no-init' as it\n-                        // is not needed anymore.\n-                        match retrieve_less_version() {\n-                            None => {\n-                                p.arg(\"--no-init\");\n-                            }\n-                            Some(version)\n-                                if (version < 530 || (cfg!(windows) && version < 558)) =>\n-                            {\n-                                p.arg(\"--no-init\");\n-                            }\n-                            _ => {}\n-                        }\n-\n-                        if quit_if_one_screen {\n-                            p.arg(\"--quit-if-one-screen\");\n-                        }\n-                    } else {\n-                        p.args(args);\n-                    }\n-                    p.env(\"LESSCHARSET\", \"UTF-8\");\n-                    p\n+                let process = if is_less {\n+                    _make_process_from_less_path(\n+                        pager_path,\n+                        args,\n+                        replace_arguments_to_less,\n+                        quit_if_one_screen,\n+                        config,\n+                    )\n                 } else {\n-                    if pager_path.file_stem() == Some(&OsString::from(\"delta\")) {\n-                        eprintln!(\n-                            \"\\\n-It looks like you have set delta as the value of $PAGER. \\\n-This would result in a non-terminating recursion. \\\n-delta is not an appropriate value for $PAGER \\\n-(but it is an appropriate value for $GIT_PAGER).\"\n-                        );\n-                        std::process::exit(1);\n-                    }\n-                    let mut p = Command::new(&pager_path);\n-                    p.args(args);\n-                    p\n+                    _make_process_from_pager_path(pager_path, args)\n                 };\n-                if is_less && config.navigate {\n-                    if let Ok(hist_file) =\n-                        navigate::copy_less_hist_file_and_append_navigate_regexp(config)\n-                    {\n-                        process.env(\"LESSHISTFILE\", hist_file);\n-                        if config.show_themes {\n-                            process.arg(\"+n\");\n-                        }\n-                    }\n+                if let Some(mut process) = process {\n+                    process\n+                        .stdin(Stdio::piped())\n+                        .spawn()\n+                        .map(OutputType::Pager)\n+                        .unwrap_or_else(|_| OutputType::stdout())\n+                } else {\n+                    OutputType::stdout()\n                 }\n-                Ok(process\n-                    .env(\"LESSANSIENDCHARS\", \"mK\")\n-                    .stdin(Stdio::piped())\n-                    .spawn()\n-                    .map(OutputType::Pager)\n-                    .unwrap_or_else(|_| OutputType::stdout()))\n             }\n-            None => Ok(OutputType::stdout()),\n-        }\n+            None => OutputType::stdout(),\n+        })\n     }\n \n     fn stdout() -> Self {\n@@ -166,6 +123,78 @@ delta is not an appropriate value for $PAGER \\\n     }\n }\n \n+fn _make_process_from_less_path(\n+    less_path: PathBuf,\n+    args: &[String],\n+    replace_arguments_to_less: bool,\n+    quit_if_one_screen: bool,\n+    config: &config::Config,\n+) -> Option<Command> {\n+    if let Ok(less_path) = grep_cli::resolve_binary(less_path) {\n+        let mut p = Command::new(&less_path);\n+        if args.is_empty() || replace_arguments_to_less {\n+            p.args(vec![\"--RAW-CONTROL-CHARS\"]);\n+\n+            // Passing '--no-init' fixes a bug with '--quit-if-one-screen' in older\n+            // versions of 'less'. Unfortunately, it also breaks mouse-wheel support.\n+            //\n+            // See: http://www.greenwoodsoftware.com/less/news.530.html\n+            //\n+            // For newer versions (530 or 558 on Windows), we omit '--no-init' as it\n+            // is not needed anymore.\n+            match retrieve_less_version() {\n+                None => {\n+                    p.arg(\"--no-init\");\n+                }\n+                Some(version) if (version < 530 || (cfg!(windows) && version < 558)) => {\n+                    p.arg(\"--no-init\");\n+                }\n+                _ => {}\n+            }\n+\n+            if quit_if_one_screen {\n+                p.arg(\"--quit-if-one-screen\");\n+            }\n+        } else {\n+            p.args(args);\n+        }\n+        p.env(\"LESSCHARSET\", \"UTF-8\");\n+        p.env(\"LESSANSIENDCHARS\", \"mK\");\n+        if config.navigate {\n+            if let Ok(hist_file) = navigate::copy_less_hist_file_and_append_navigate_regexp(config)\n+            {\n+                p.env(\"LESSHISTFILE\", hist_file);\n+                if config.show_themes {\n+                    p.arg(\"+n\");\n+                }\n+            }\n+        }\n+        Some(p)\n+    } else {\n+        None\n+    }\n+}\n+\n+fn _make_process_from_pager_path(pager_path: PathBuf, args: &[String]) -> Option<Command> {\n+    if pager_path.file_stem() == Some(&OsString::from(\"delta\")) {\n+        eprintln!(\n+            \"\\\n+It looks like you have set delta as the value of $PAGER. \\\n+This would result in a non-terminating recursion. \\\n+delta is not an appropriate value for $PAGER \\\n+(but it is an appropriate value for $GIT_PAGER).\"\n+        );\n+        std::process::exit(1);\n+    }\n+    if let Ok(pager_path) = grep_cli::resolve_binary(pager_path) {\n+        let mut p = Command::new(&pager_path);\n+        p.args(args);\n+        Some(p)\n+    } else {\n+        None\n+    }\n+}\n+\n impl Drop for OutputType {\n     fn drop(&mut self) {\n         if let OutputType::Pager(ref mut command) = *self {"
        },
        {
          "filename": "src/main.rs",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -132,7 +132,11 @@ You can also use delta to diff two files: `delta file_A file_B`.\"\n     let diff_command = \"git\";\n     let minus_file = minus_file.unwrap_or_else(die);\n     let plus_file = plus_file.unwrap_or_else(die);\n-    let mut diff_process = process::Command::new(PathBuf::from(diff_command))\n+    let diff_command_path = match grep_cli::resolve_binary(PathBuf::from(diff_command)) {\n+        Ok(path) => path,\n+        Err(_) => return config.error_exit_code,\n+    };\n+    let mut diff_process = process::Command::new(diff_command_path)\n         .args(&[\"diff\", \"--no-index\"])\n         .args(&[minus_file, plus_file])\n         .stdout(process::Stdio::piped())"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d4017ea9cbf3a1223c88953c61a33d0f20334524",
            "date": "2025-01-14T14:17:56Z",
            "author_login": "ernstki"
          },
          {
            "sha": "e3e9222175a8ff6c9228d8ebb996331e02d49c02",
            "date": "2024-12-22T02:23:22Z",
            "author_login": "chenrui333"
          },
          {
            "sha": "d10095bc732a7675295d3389152675ccc41e8240",
            "date": "2025-01-09T21:50:21Z",
            "author_login": "th1000s"
          },
          {
            "sha": "ef3e1be569bf076f035327342939bd9d7c8908bd",
            "date": "2024-12-09T22:09:29Z",
            "author_login": "th1000s"
          },
          {
            "sha": "440cdd35dcdab4dc6c00231935411910be628983",
            "date": "2024-12-02T22:21:08Z",
            "author_login": "th1000s"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-427",
    "description": "dandavison delta before 0.8.3 on Windows resolves an executable's pathname as a relative path from the current directory.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-07-13T13:15:09.283",
    "last_modified": "2024-11-21T06:13:38.323",
    "fix_date": "2021-07-10T14:52:06Z"
  },
  "references": [
    {
      "url": "https://github.com/dandavison/delta/commit/f01846bd443aaf92fdd5ac20f461beac3f6ee3fd",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dandavison/delta/releases/tag/0.8.3",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuln.ryotak.me/advisories/54",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dandavison/delta/commit/f01846bd443aaf92fdd5ac20f461beac3f6ee3fd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dandavison/delta/releases/tag/0.8.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuln.ryotak.me/advisories/54",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:02.301720",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "delta",
    "owner": "dandavison",
    "created_at": "2019-06-24T15:00:13Z",
    "updated_at": "2025-01-14T17:37:41Z",
    "pushed_at": "2025-01-14T14:17:56Z",
    "size": 10667,
    "stars": 25061,
    "forks": 405,
    "open_issues": 295,
    "watchers": 25061,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Rust": 1031588,
      "Shell": 44777,
      "Makefile": 3434,
      "Dockerfile": 327,
      "Python": 131
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T18:39:32.524889"
  }
}