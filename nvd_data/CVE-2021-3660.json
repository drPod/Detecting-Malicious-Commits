{
  "cve_id": "CVE-2021-3660",
  "github_data": {
    "repository": "cockpit-project/cockpit",
    "fix_commit": "8d9bc10d8128aae03dfde62fd00075fe492ead10",
    "related_commits": [
      "8d9bc10d8128aae03dfde62fd00075fe492ead10",
      "8d9bc10d8128aae03dfde62fd00075fe492ead10"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "8d9bc10d8128aae03dfde62fd00075fe492ead10",
      "commit_date": "2021-09-14T07:02:33Z",
      "author": {
        "login": "martinpitt",
        "type": "User",
        "stats": {
          "total_commits": 5007,
          "average_weekly_commits": 8.51530612244898,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 396
        }
      },
      "commit_message": {
        "title": "common: Restrict frame embedding to same origin",
        "length": 918,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 39,
        "additions": 22,
        "deletions": 17
      },
      "files": [
        {
          "filename": "doc/guide/embedding.xml",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -5,7 +5,9 @@\n   <title>Embedding and Integrating Cockpit</title>\n \n   <para>Cockpit can be embedded in other web applications either as a whole or specific\n-    Cockpit components can be integrated.</para>\n+    Cockpit components can be integrated. Due to frame security policy restrictions,\n+    this only works if Cockpit and the web application have the <emphasis>same origin</emphasis>;\n+    this is commonly achieved by running both from a common reverse proxy.</para>\n \n   <section id=\"embedding-full\">\n     <title>Embedding the Cockpit Interface</title>"
        },
        {
          "filename": "pkg/base1/test-http.js",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -208,6 +208,7 @@ QUnit.test(\"headers\", function (assert) {\n                     \"Referrer-Policy\": \"no-referrer\",\n                     \"X-DNS-Prefetch-Control\": \"off\",\n                     \"X-Content-Type-Options\": \"nosniff\",\n+                    \"X-Frame-Options\": \"sameorigin\",\n                     \"Cross-Origin-Resource-Policy\": \"same-origin\",\n                 }, \"got back headers\");\n             })\n@@ -250,6 +251,7 @@ QUnit.test(\"connection headers\", function (assert) {\n                     \"Referrer-Policy\": \"no-referrer\",\n                     \"X-DNS-Prefetch-Control\": \"off\",\n                     \"X-Content-Type-Options\": \"nosniff\",\n+                    \"X-Frame-Options\": \"sameorigin\",\n                     \"Cross-Origin-Resource-Policy\": \"same-origin\",\n                 }, \"got back combined headers\");\n             })"
        },
        {
          "filename": "src/bridge/test-httpstream.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -34,7 +34,7 @@\n extern gboolean cockpit_webserver_want_certificate;\n \n /* JSON dict snippet for headers that are present in every request */\n-#define STATIC_HEADERS \"\\\"Cross-Origin-Resource-Policy\\\":\\\"same-origin\\\",\\\"Referrer-Policy\\\":\\\"no-referrer\\\",\\\"X-Content-Type-Options\\\":\\\"nosniff\\\",\\\"X-DNS-Prefetch-Control\\\":\\\"off\\\"\"\n+#define STATIC_HEADERS \"\\\"Cross-Origin-Resource-Policy\\\":\\\"same-origin\\\",\\\"Referrer-Policy\\\":\\\"no-referrer\\\",\\\"X-Content-Type-Options\\\":\\\"nosniff\\\",\\\"X-DNS-Prefetch-Control\\\":\\\"off\\\",\\\"X-Frame-Options\\\":\\\"sameorigin\\\"\"\n \n static void\n on_closed_set_flag (CockpitChannel *channel,"
        },
        {
          "filename": "src/bridge/test-packages.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -47,7 +47,7 @@\n #define CHECKSUM_CSP            \"80921dc3cde9ff9f2acd2a5851f9b2a3b25ea7b4577128461d9e32fbdd671e16\"\n \n /* JSON dict snippet for headers that are present in every request */\n-#define STATIC_HEADERS \"\\\"X-DNS-Prefetch-Control\\\":\\\"off\\\",\\\"Referrer-Policy\\\":\\\"no-referrer\\\",\\\"X-Content-Type-Options\\\":\\\"nosniff\\\",\\\"Cross-Origin-Resource-Policy\\\": \\\"same-origin\\\"\"\n+#define STATIC_HEADERS \"\\\"X-DNS-Prefetch-Control\\\":\\\"off\\\",\\\"Referrer-Policy\\\":\\\"no-referrer\\\",\\\"X-Content-Type-Options\\\":\\\"nosniff\\\",\\\"Cross-Origin-Resource-Policy\\\": \\\"same-origin\\\",\\\"X-Frame-Options\\\": \\\"sameorigin\\\"\"\n #define STATIC_HEADERS_CACHECONTROL STATIC_HEADERS \",\\\"Cache-Control\\\":\\\"no-cache, no-store\\\"\"\n \n extern const gchar **cockpit_bridge_data_dirs;"
        },
        {
          "filename": "src/common/cockpitwebresponse.c",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -747,6 +747,7 @@ enum {\n     HEADER_REFERRER_POLICY = 1 << 5,\n     HEADER_CONTENT_TYPE_OPTIONS = 1 << 6,\n     HEADER_CROSS_ORIGIN_RESOURCE_POLICY = 1 << 7,\n+    HEADER_X_FRAME_OPTIONS = 1 << 8,\n };\n \n static GString *\n@@ -789,6 +790,8 @@ append_header (GString *string,\n     return HEADER_CONTENT_TYPE_OPTIONS;\n   if (g_ascii_strcasecmp (\"Cross-Origin-Resource-Policy\", name) == 0)\n     return HEADER_CROSS_ORIGIN_RESOURCE_POLICY;\n+  if (g_ascii_strcasecmp (\"X-Frame-Options\", name) == 0)\n+    return HEADER_X_FRAME_OPTIONS;\n   if (g_ascii_strcasecmp (\"Content-Length\", name) == 0 ||\n       g_ascii_strcasecmp (\"Transfer-Encoding\", name) == 0 ||\n       g_ascii_strcasecmp (\"Connection\", name) == 0)\n@@ -900,6 +903,9 @@ finish_headers (CockpitWebResponse *self,\n    * be able to read any resource. This does *not* affect embedding with <iframe> */\n   if ((seen & HEADER_CROSS_ORIGIN_RESOURCE_POLICY) == 0)\n     g_string_append (string, \"Cross-Origin-Resource-Policy: same-origin\\r\\n\");\n+  /* This is the counterpart for iframe embedding, line of defence against clickjacking */\n+  if ((seen & HEADER_X_FRAME_OPTIONS) == 0)\n+    g_string_append (string, \"X-Frame-Options: sameorigin\\r\\n\");\n \n   g_string_append (string, \"\\r\\n\");\n   return g_string_free_to_bytes (string);"
        },
        {
          "filename": "src/common/test-webresponse.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -35,7 +35,7 @@\n #include <string.h>\n \n /* headers that are present in every request */\n-#define STATIC_HEADERS \"X-DNS-Prefetch-Control: off\\r\\nReferrer-Policy: no-referrer\\r\\nX-Content-Type-Options: nosniff\\r\\nCross-Origin-Resource-Policy: same-origin\\r\\n\\r\\n\"\n+#define STATIC_HEADERS \"X-DNS-Prefetch-Control: off\\r\\nReferrer-Policy: no-referrer\\r\\nX-Content-Type-Options: nosniff\\r\\nCross-Origin-Resource-Policy: same-origin\\r\\nX-Frame-Options: sameorigin\\r\\n\\r\\n\"\n static gchar *srcdir;\n \n typedef struct {"
        },
        {
          "filename": "src/ws/test-channelresponse.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -53,7 +53,7 @@\n #define PASSWORD \"this is the password\"\n \n /* headers that are present in every request */\n-#define STATIC_HEADERS \"X-Content-Type-Options: nosniff\\r\\nX-DNS-Prefetch-Control: off\\r\\nReferrer-Policy: no-referrer\\r\\nCross-Origin-Resource-Policy: same-origin\\r\\n\"\n+#define STATIC_HEADERS \"X-Content-Type-Options: nosniff\\r\\nX-DNS-Prefetch-Control: off\\r\\nReferrer-Policy: no-referrer\\r\\nCross-Origin-Resource-Policy: same-origin\\r\\nX-Frame-Options: sameorigin\\r\\n\"\n \n typedef struct {\n   CockpitWebService *service;"
        },
        {
          "filename": "test/verify/check-connection",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -411,8 +411,9 @@ class TestConnection(MachineCase):\n         self.assertIn(\n             \"default-src 'self' https://127.0.0.1:9090; connect-src 'self' https://127.0.0.1:9090 wss://127.0.0.1:9090\", headers)\n         self.assertIn(\"Access-Control-Allow-Origin: https://127.0.0.1:9090\", headers)\n-        # CORP is also set for dynamic paths\n+        # CORP and Frame-Options are also set for dynamic paths\n         self.assertIn(\"Cross-Origin-Resource-Policy: same-origin\", headers)\n+        self.assertIn(\"X-Frame-Options: sameorigin\", headers)\n \n         self.allow_journal_messages(\n             \".*Peer failed to perform TLS handshake\",\n@@ -627,6 +628,7 @@ class TestConnection(MachineCase):\n         self.assertIn(\"HTTP/1.1 200 OK\\r\\n\", headers)\n         self.assertIn(\"Content-Type: text/html\\r\\n\", headers)\n         self.assertIn(\"Cross-Origin-Resource-Policy: same-origin\\r\\n\", headers)\n+        self.assertIn(\"X-Frame-Options: sameorigin\\r\\n\", headers)\n         # login.html is not always accessible as a file (e.g. on CoreOS), so just assert a reasonable content length\n         self.assertIn(\"Content-Length: \", headers)\n         length = int(headers.split('Content-Length: ', 1)[1].split()[0])"
        },
        {
          "filename": "test/verify/check-embed",
          "status": "modified",
          "additions": 4,
          "deletions": 11,
          "patch": "@@ -94,20 +94,13 @@ Shell=/shell/index.html\n         b.open(\"http://localhost:12346/index.html\")\n         b.set_val(\"#embed-address\", \"http://{0}:{1}\".format(m.web_address, m.web_port))\n         b.click(\"#embed-full\")\n-        # FIXME (#16122): we should not even get that far, frame loading should already be blocked here\n         b.wait_visible(\"iframe[name='embed-full'][loaded]\")\n         b.switch_to_frame(\"embed-full\")\n \n-        # second line of defense: existing login cookie does not work (default browser protection)\n-        b.wait_visible(\"#login\")\n-        b.set_val(\"#login-user-input\", \"admin\")\n-        b.set_val(\"#login-password-input\", \"foobar\")\n-        b.click('#login-button')\n-        b.expect_load_frame(\"embed-full\")\n-\n-        # third line of defense: login succeeds and creates a PAM session; but loading session UI does not\n-        # (again, due to default browser protection)\n-        b.wait_visible(\"#login\")\n+        # X-Frame-Options sameorigin blocks frame\n+        if b.cdp.browser == \"firefox\":\n+            b.wait_visible(\"body.neterror\")\n+        self.assertFalse(b.is_present(\"#login\"))\n \n \n if __name__ == '__main__':"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 7,
        "unique_directories": 6,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "53b9468f22c5b8a0c9ace490d9859a14ee2afd09",
            "date": "2025-01-23T12:45:19Z",
            "author_login": "mvollmer"
          },
          {
            "sha": "fa91d69378d44616cf2b276fcbbcdd6b982b117a",
            "date": "2025-01-20T14:52:33Z",
            "author_login": "martinpitt"
          },
          {
            "sha": "73719925b9664db4976dd80468f05f8d3f4b49bd",
            "date": "2025-01-20T14:51:00Z",
            "author_login": "martinpitt"
          },
          {
            "sha": "5f9d464443dcff8660677fd2955d21fc91586098",
            "date": "2025-01-20T16:29:15Z",
            "author_login": "Venefilyn"
          },
          {
            "sha": "2d0d42108957d3e60c1c22f2e17d83d8667a9920",
            "date": "2025-01-20T15:50:24Z",
            "author_login": "Venefilyn"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-1021",
    "description": "Cockpit (and its plugins) do not seem to protect itself against clickjacking. It is possible to render a page from a cockpit server via another website, inside an <iFrame> HTML entry. This may be used by a malicious website in clickjacking or similar attacks.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-10T17:42:55.647",
    "last_modified": "2024-11-21T06:22:05.833",
    "fix_date": "2021-09-14T07:02:33Z"
  },
  "references": [
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1980688",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cockpit-project/cockpit/commit/8d9bc10d8128aae03dfde62fd00075fe492ead10",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cockpit-project/cockpit/issues/16122",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1980688",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cockpit-project/cockpit/commit/8d9bc10d8128aae03dfde62fd00075fe492ead10",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cockpit-project/cockpit/issues/16122",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.790710",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "cockpit",
    "owner": "cockpit-project",
    "created_at": "2013-11-01T17:36:46Z",
    "updated_at": "2025-01-26T03:35:20Z",
    "pushed_at": "2025-01-24T09:03:54Z",
    "size": 215475,
    "stars": 11563,
    "forks": 1138,
    "open_issues": 381,
    "watchers": 11563,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "rhel-7.9",
      "rhel-8"
    ],
    "languages": {
      "JavaScript": 2650041,
      "Python": 2234129,
      "C": 1498835,
      "TypeScript": 425124,
      "SCSS": 163407,
      "Shell": 109639,
      "HTML": 79439,
      "Makefile": 29416,
      "CSS": 13757,
      "M4": 12843,
      "Roff": 10508,
      "Dockerfile": 655
    },
    "commit_activity": {
      "total_commits_last_year": 1449,
      "avg_commits_per_week": 27.865384615384617,
      "days_active_last_year": 285
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-2.1"
    },
    "collected_at": "2025-01-26T07:55:55.307287"
  }
}