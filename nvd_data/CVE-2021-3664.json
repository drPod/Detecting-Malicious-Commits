{
  "cve_id": "CVE-2021-3664",
  "github_data": {
    "repository": "unshiftio/url-parse",
    "fix_commit": "81ab967889b08112d3356e451bf03e6aa0cbb7e0",
    "related_commits": [
      "81ab967889b08112d3356e451bf03e6aa0cbb7e0",
      "81ab967889b08112d3356e451bf03e6aa0cbb7e0"
    ],
    "patch_url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0.patch",
    "fix_commit_details": {
      "sha": "81ab967889b08112d3356e451bf03e6aa0cbb7e0",
      "commit_date": "2021-07-23T16:31:42Z",
      "author": {
        "login": "lpinca",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[fix] Ignore slashes after the protocol for special URLs",
        "length": 79,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 117,
        "additions": 107,
        "deletions": 10
      },
      "files": [
        {
          "filename": "index.js",
          "status": "modified",
          "additions": 44,
          "deletions": 7,
          "patch": "@@ -98,6 +98,24 @@ function lolcation(loc) {\n   return finaldestination;\n }\n \n+/**\n+ * Check whether a protocol scheme is special.\n+ *\n+ * @param {String} The protocol scheme of the URL\n+ * @return {Boolean} `true` if the protocol scheme is special, else `false`\n+ * @private\n+ */\n+function isSpecial(scheme) {\n+  return (\n+    scheme === 'file:' ||\n+    scheme === 'ftp:' ||\n+    scheme === 'http:' ||\n+    scheme === 'https:' ||\n+    scheme === 'ws:' ||\n+    scheme === 'wss:'\n+  );\n+}\n+\n /**\n  * @typedef ProtocolExtract\n  * @type Object\n@@ -110,16 +128,32 @@ function lolcation(loc) {\n  * Extract protocol information from a URL with/without double slash (\"//\").\n  *\n  * @param {String} address URL we want to extract from.\n+ * @param {Object} location\n  * @return {ProtocolExtract} Extracted information.\n  * @private\n  */\n-function extractProtocol(address) {\n+function extractProtocol(address, location) {\n   address = trimLeft(address);\n+  location = location || {};\n \n-  var match = protocolre.exec(address)\n-    , protocol = match[1] ? match[1].toLowerCase() : ''\n-    , slashes = !!(match[2] && match[2].length >= 2)\n-    , rest =  match[2] && match[2].length === 1 ? '/' + match[3] : match[3];\n+  var match = protocolre.exec(address);\n+  var protocol = match[1] ? match[1].toLowerCase() : '';\n+  var rest = match[2] ? match[2] + match[3] : match[3];\n+  var slashes = !!(match[2] && match[2].length >= 2);\n+\n+  if (protocol === 'file:') {\n+    if (slashes) {\n+      rest = rest.slice(2);\n+    }\n+  } else if (isSpecial(protocol)) {\n+    rest = match[3];\n+  } else if (protocol) {\n+    if (rest.indexOf('//') === 0) {\n+      rest = rest.slice(2);\n+    }\n+  } else if (slashes && location.hostname) {\n+    rest = match[3];\n+  }\n \n   return {\n     protocol: protocol,\n@@ -214,7 +248,7 @@ function Url(address, location, parser) {\n   //\n   // Extract protocol information before running the instructions.\n   //\n-  extracted = extractProtocol(address || '');\n+  extracted = extractProtocol(address || '', location);\n   relative = !extracted.protocol && !extracted.slashes;\n   url.slashes = extracted.slashes || relative && location.slashes;\n   url.protocol = extracted.protocol || location.protocol || '';\n@@ -224,7 +258,10 @@ function Url(address, location, parser) {\n   // When the authority component is absent the URL starts with a path\n   // component.\n   //\n-  if (!extracted.slashes || url.protocol === 'file:') {\n+  if (\n+    url.protocol === 'file:' ||\n+    (!extracted.slashes && !isSpecial(extracted.protocol))\n+  ) {\n     instructions[3] = [/(.*)/, 'pathname'];\n   }\n "
        },
        {
          "filename": "test/test.js",
          "status": "modified",
          "additions": 63,
          "deletions": 3,
          "patch": "@@ -93,7 +93,7 @@ describe('url-parse', function () {\n       assume(parse.extractProtocol('//foo/bar')).eql({\n         slashes: true,\n         protocol: '',\n-        rest: 'foo/bar'\n+        rest: '//foo/bar'\n       });\n     });\n \n@@ -283,7 +283,7 @@ describe('url-parse', function () {\n     assume(parsed.href).equals('http://what-is-up.com/');\n   });\n \n-  it('does not see a slash after the protocol as path', function () {\n+  it('ignores slashes after the protocol for special URLs', function () {\n     var url = 'https:\\\\/github.com/foo/bar'\n       , parsed = parse(url);\n \n@@ -292,11 +292,59 @@ describe('url-parse', function () {\n     assume(parsed.pathname).equals('/foo/bar');\n \n     url = 'https:/\\\\/\\\\/\\\\github.com/foo/bar';\n+    parsed = parse(url);\n     assume(parsed.host).equals('github.com');\n     assume(parsed.hostname).equals('github.com');\n     assume(parsed.pathname).equals('/foo/bar');\n+\n+    url = 'https:/github.com/foo/bar';\n+    parsed = parse(url);\n+    assume(parsed.host).equals('github.com');\n+    assume(parsed.pathname).equals('/foo/bar');\n+\n+    url = 'https:\\\\github.com/foo/bar';\n+    parsed = parse(url);\n+    assume(parsed.host).equals('github.com');\n+    assume(parsed.pathname).equals('/foo/bar');\n+\n+    url = 'https:github.com/foo/bar';\n+    parsed = parse(url);\n+    assume(parsed.host).equals('github.com');\n+    assume(parsed.pathname).equals('/foo/bar');\n+\n+    url = 'https:github.com/foo/bar';\n+    parsed = parse(url);\n+    assume(parsed.host).equals('github.com');\n+    assume(parsed.pathname).equals('/foo/bar');\n   });\n \n+  it('handles slashes after the protocol for non special URLs', function () {\n+    var url = 'foo:example.com'\n+      , parsed = parse(url);\n+\n+    assume(parsed.hostname).equals('');\n+    assume(parsed.pathname).equals('example.com');\n+    assume(parsed.href).equals('foo:example.com');\n+\n+    url = 'foo:/example.com';\n+    parsed = parse(url);\n+    assume(parsed.hostname).equals('');\n+    assume(parsed.pathname).equals('/example.com');\n+    assume(parsed.href).equals('foo:/example.com');\n+\n+    url = 'foo://example.com';\n+    parsed = parse(url);\n+    assume(parsed.hostname).equals('example.com');\n+    assume(parsed.pathname).equals('/');\n+    assume(parsed.href).equals('foo://example.com/');\n+\n+    url = 'foo:///example.com';\n+    parsed = parse(url);\n+    assume(parsed.hostname).equals('');\n+    assume(parsed.pathname).equals('/example.com');\n+    assume(parsed.href).equals('foo:///example.com');\n+  })\n+\n   describe('origin', function () {\n     it('generates an origin property', function () {\n       var url = 'http://google.com:80/pathname'\n@@ -440,7 +488,7 @@ describe('url-parse', function () {\n     });\n \n     it('handles the file: protocol', function () {\n-      var slashes = ['', '/', '//', '///', '////', '/////'];\n+      var slashes = ['', '/', '//', '///'];\n       var data;\n       var url;\n \n@@ -451,6 +499,18 @@ describe('url-parse', function () {\n         assume(data.href).equals('file:///');\n       }\n \n+      url = 'file:////';\n+      data = parse(url);\n+      assume(data.protocol).equals('file:');\n+      assume(data.pathname).equals('//');\n+      assume(data.href).equals(url);\n+\n+      url = 'file://///';\n+      data = parse(url);\n+      assume(data.protocol).equals('file:');\n+      assume(data.pathname).equals('///');\n+      assume(data.href).equals(url);\n+\n       url = 'file:///Users/foo/BAR/baz.pdf';\n       data = parse(url);\n       assume(data.protocol).equals('file:');"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "877225add9c3a2e33ef20ebef94dd397a0965666",
            "date": "2023-01-04T21:10:39Z",
            "author_login": "lpinca"
          },
          {
            "sha": "4487d3160453185c146c582adabab8ff1c09ab91",
            "date": "2022-08-13T18:28:16Z",
            "author_login": "lpinca"
          },
          {
            "sha": "66610bbcdfaa406c97d692e819c26f69e486473c",
            "date": "2022-08-13T18:27:56Z",
            "author_login": "lpinca"
          },
          {
            "sha": "5d8e5e310a86a062fd5ffac392990c67d8a74401",
            "date": "2022-08-13T18:20:35Z",
            "author_login": "lpinca"
          },
          {
            "sha": "5a52bdda35b0c5ee14bfaf9169354d88ac61e218",
            "date": "2022-05-13T18:18:58Z",
            "author_login": "lpinca"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-601",
    "description": "url-parse is vulnerable to URL Redirection to Untrusted Site",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-07-26T12:15:08.907",
    "last_modified": "2024-11-21T06:22:06.470",
    "fix_date": "2021-07-23T16:31:42Z"
  },
  "references": [
    {
      "url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/1625557993985-unshiftio/url-parse",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/02/msg00030.html",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/unshiftio/url-parse/commit/81ab967889b08112d3356e451bf03e6aa0cbb7e0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/1625557993985-unshiftio/url-parse",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/02/msg00030.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:02.339276",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "url-parse",
    "owner": "unshiftio",
    "created_at": "2014-10-13T13:50:59Z",
    "updated_at": "2024-12-31T02:45:51Z",
    "pushed_at": "2023-01-04T21:12:05Z",
    "size": 233,
    "stars": 1032,
    "forks": 107,
    "open_issues": 12,
    "watchers": 1032,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 67671,
      "HTML": 761
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:24:10.289367"
  }
}