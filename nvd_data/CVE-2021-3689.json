{
  "cve_id": "CVE-2021-3689",
  "github_data": {
    "repository": "yiisoft/yii2",
    "fix_commit": "13f27e4d920a05d53236139e8b07007acd046a46",
    "related_commits": [
      "13f27e4d920a05d53236139e8b07007acd046a46",
      "13f27e4d920a05d53236139e8b07007acd046a46"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "13f27e4d920a05d53236139e8b07007acd046a46",
      "commit_date": "2021-08-09T07:25:36Z",
      "author": {
        "login": "samdark",
        "type": "User",
        "stats": {
          "total_commits": 3616,
          "average_weekly_commits": 5.0152565880721225,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 405
        }
      },
      "commit_message": {
        "title": "Fix #18817: Use `paragonie/random_compat` for random bytes and int generation",
        "length": 77,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 438,
        "additions": 85,
        "deletions": 353
      },
      "files": [
        {
          "filename": "composer.json",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -78,7 +78,8 @@\n         \"bower-asset/jquery\": \"3.6.*@stable | 3.5.*@stable | 3.4.*@stable | 3.3.*@stable | 3.2.*@stable | 3.1.*@stable | 2.2.*@stable | 2.1.*@stable | 1.11.*@stable | 1.12.*@stable\",\n         \"bower-asset/inputmask\": \"~3.2.2 | ~3.3.5\",\n         \"bower-asset/punycode\": \"1.3.*\",\n-        \"bower-asset/yii2-pjax\": \"~2.0.1\"\n+        \"bower-asset/yii2-pjax\": \"~2.0.1\",\n+        \"paragonie/random_compat\": \">=1\"\n     },\n     \"require-dev\": {\n         \"cweagans/composer-patches\": \"^1.7\","
        },
        {
          "filename": "composer.lock",
          "status": "modified",
          "additions": 56,
          "deletions": 56,
          "patch": "@@ -4,7 +4,7 @@\n         \"Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies\",\n         \"This file is @generated automatically\"\n     ],\n-    \"content-hash\": \"7e41c6fc0175fd049e0e52c4e8b25e5c\",\n+    \"content-hash\": \"8f9a4d7e645592f806605d32d676f54e\",\n     \"packages\": [\n         {\n             \"name\": \"bower-asset/inputmask\",\n@@ -199,6 +199,60 @@\n             },\n             \"time\": \"2020-06-29T00:56:53+00:00\"\n         },\n+        {\n+            \"name\": \"paragonie/random_compat\",\n+            \"version\": \"v2.0.20\",\n+            \"source\": {\n+                \"type\": \"git\",\n+                \"url\": \"https://github.com/paragonie/random_compat.git\",\n+                \"reference\": \"0f1f60250fccffeaf5dda91eea1c018aed1adc2a\"\n+            },\n+            \"dist\": {\n+                \"type\": \"zip\",\n+                \"url\": \"https://api.github.com/repos/paragonie/random_compat/zipball/0f1f60250fccffeaf5dda91eea1c018aed1adc2a\",\n+                \"reference\": \"0f1f60250fccffeaf5dda91eea1c018aed1adc2a\",\n+                \"shasum\": \"\"\n+            },\n+            \"require\": {\n+                \"php\": \">=5.2.0\"\n+            },\n+            \"require-dev\": {\n+                \"phpunit/phpunit\": \"4.*|5.*\"\n+            },\n+            \"suggest\": {\n+                \"ext-libsodium\": \"Provides a modern crypto API that can be used to generate random bytes.\"\n+            },\n+            \"type\": \"library\",\n+            \"autoload\": {\n+                \"files\": [\n+                    \"lib/random.php\"\n+                ]\n+            },\n+            \"notification-url\": \"https://packagist.org/downloads/\",\n+            \"license\": [\n+                \"MIT\"\n+            ],\n+            \"authors\": [\n+                {\n+                    \"name\": \"Paragon Initiative Enterprises\",\n+                    \"email\": \"security@paragonie.com\",\n+                    \"homepage\": \"https://paragonie.com\"\n+                }\n+            ],\n+            \"description\": \"PHP 5.x polyfill for random_bytes() and random_int() from PHP 7\",\n+            \"keywords\": [\n+                \"csprng\",\n+                \"polyfill\",\n+                \"pseudorandom\",\n+                \"random\"\n+            ],\n+            \"support\": {\n+                \"email\": \"info@paragonie.com\",\n+                \"issues\": \"https://github.com/paragonie/random_compat/issues\",\n+                \"source\": \"https://github.com/paragonie/random_compat\"\n+            },\n+            \"time\": \"2021-04-17T09:33:01+00:00\"\n+        },\n         {\n             \"name\": \"yiisoft/yii2-composer\",\n             \"version\": \"2.0.10\",\n@@ -891,60 +945,6 @@\n             },\n             \"time\": \"2015-09-13T19:01:00+00:00\"\n         },\n-        {\n-            \"name\": \"paragonie/random_compat\",\n-            \"version\": \"v2.0.20\",\n-            \"source\": {\n-                \"type\": \"git\",\n-                \"url\": \"https://github.com/paragonie/random_compat.git\",\n-                \"reference\": \"0f1f60250fccffeaf5dda91eea1c018aed1adc2a\"\n-            },\n-            \"dist\": {\n-                \"type\": \"zip\",\n-                \"url\": \"https://api.github.com/repos/paragonie/random_compat/zipball/0f1f60250fccffeaf5dda91eea1c018aed1adc2a\",\n-                \"reference\": \"0f1f60250fccffeaf5dda91eea1c018aed1adc2a\",\n-                \"shasum\": \"\"\n-            },\n-            \"require\": {\n-                \"php\": \">=5.2.0\"\n-            },\n-            \"require-dev\": {\n-                \"phpunit/phpunit\": \"4.*|5.*\"\n-            },\n-            \"suggest\": {\n-                \"ext-libsodium\": \"Provides a modern crypto API that can be used to generate random bytes.\"\n-            },\n-            \"type\": \"library\",\n-            \"autoload\": {\n-                \"files\": [\n-                    \"lib/random.php\"\n-                ]\n-            },\n-            \"notification-url\": \"https://packagist.org/downloads/\",\n-            \"license\": [\n-                \"MIT\"\n-            ],\n-            \"authors\": [\n-                {\n-                    \"name\": \"Paragon Initiative Enterprises\",\n-                    \"email\": \"security@paragonie.com\",\n-                    \"homepage\": \"https://paragonie.com\"\n-                }\n-            ],\n-            \"description\": \"PHP 5.x polyfill for random_bytes() and random_int() from PHP 7\",\n-            \"keywords\": [\n-                \"csprng\",\n-                \"polyfill\",\n-                \"pseudorandom\",\n-                \"random\"\n-            ],\n-            \"support\": {\n-                \"email\": \"info@paragonie.com\",\n-                \"issues\": \"https://github.com/paragonie/random_compat/issues\",\n-                \"source\": \"https://github.com/paragonie/random_compat\"\n-            },\n-            \"time\": \"2021-04-17T09:33:01+00:00\"\n-        },\n         {\n             \"name\": \"phpdocumentor/reflection-docblock\",\n             \"version\": \"2.0.5\",\n@@ -2919,5 +2919,5 @@\n     \"platform-overrides\": {\n         \"php\": \"5.4\"\n     },\n-    \"plugin-api-version\": \"2.0.0\"\n+    \"plugin-api-version\": \"2.1.0\"\n }"
        },
        {
          "filename": "framework/CHANGELOG.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@ Yii Framework 2 Change Log\n 2.0.43 under development\n ------------------------\n \n+- Enh #18817: Use `paragonie/random_compat` for random bytes and int generation (samdark)\n - Bug #14663: Do not convert int to string if database type of a column is numeric (egorrishe)\n - Bug #18650: Refactor `framework/assets/yii.activeForm.js` arrow function into traditional function for IE11 compatibility (marcovtwout)\n - Bug #18749: Fix `yii\\web\\ErrorHandler::encodeHtml()` to support strings with invalid UTF symbols (vjik)"
        },
        {
          "filename": "framework/base/Security.php",
          "status": "modified",
          "additions": 1,
          "deletions": 88,
          "patch": "@@ -116,14 +116,6 @@ protected function shouldUseLibreSSL()\n         return $this->_useLibreSSL;\n     }\n \n-    /**\n-     * @return bool if operating system is Windows\n-     */\n-    private function isWindows()\n-    {\n-        return DIRECTORY_SEPARATOR !== '/';\n-    }\n-\n     /**\n      * Encrypts data using a password.\n      * Derives keys for encryption and authentication from the password using PBKDF2 and a random salt,\n@@ -471,8 +463,6 @@ public function validateData($data, $key, $rawHash = false)\n         return false;\n     }\n \n-    private $_randomFile;\n-\n     /**\n      * Generates specified number of random bytes.\n      * Note that output may not be ASCII.\n@@ -493,84 +483,7 @@ public function generateRandomKey($length = 32)\n             throw new InvalidArgumentException('First parameter ($length) must be greater than 0');\n         }\n \n-        // always use random_bytes() if it is available\n-        if (function_exists('random_bytes')) {\n-            return random_bytes($length);\n-        }\n-\n-        // The recent LibreSSL RNGs are faster and likely better than /dev/urandom.\n-        // Since 5.4.0, openssl_random_pseudo_bytes() reads from CryptGenRandom on Windows instead\n-        // of using OpenSSL library. LibreSSL is OK everywhere but don't use OpenSSL on non-Windows.\n-        if (function_exists('openssl_random_pseudo_bytes')\n-            && ($this->shouldUseLibreSSL() || $this->isWindows())\n-        ) {\n-            $key = openssl_random_pseudo_bytes($length, $cryptoStrong);\n-            if ($cryptoStrong === false) {\n-                throw new Exception(\n-                    'openssl_random_pseudo_bytes() set $crypto_strong false. Your PHP setup is insecure.'\n-                );\n-            }\n-            if ($key !== false && StringHelper::byteLength($key) === $length) {\n-                return $key;\n-            }\n-        }\n-\n-        // mcrypt_create_iv() does not use libmcrypt. Since PHP 5.3.7 it directly reads\n-        // CryptGenRandom on Windows. Elsewhere it directly reads /dev/urandom.\n-        if (function_exists('mcrypt_create_iv')) {\n-            $key = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);\n-            if (StringHelper::byteLength($key) === $length) {\n-                return $key;\n-            }\n-        }\n-\n-        // If not on Windows, try to open a random device.\n-        if ($this->_randomFile === null && !$this->isWindows()) {\n-            // urandom is a symlink to random on FreeBSD.\n-            $device = PHP_OS === 'FreeBSD' ? '/dev/random' : '/dev/urandom';\n-            // Check random device for special character device protection mode. Use lstat()\n-            // instead of stat() in case an attacker arranges a symlink to a fake device.\n-            $lstat = @lstat($device);\n-            if ($lstat !== false && ($lstat['mode'] & 0170000) === 020000) {\n-                $this->_randomFile = fopen($device, 'rb') ?: null;\n-\n-                if (is_resource($this->_randomFile)) {\n-                    // Reduce PHP stream buffer from default 8192 bytes to optimize data\n-                    // transfer from the random device for smaller values of $length.\n-                    // This also helps to keep future randoms out of user memory space.\n-                    $bufferSize = 8;\n-\n-                    if (function_exists('stream_set_read_buffer')) {\n-                        stream_set_read_buffer($this->_randomFile, $bufferSize);\n-                    }\n-                    // stream_set_read_buffer() isn't implemented on HHVM\n-                    if (function_exists('stream_set_chunk_size')) {\n-                        stream_set_chunk_size($this->_randomFile, $bufferSize);\n-                    }\n-                }\n-            }\n-        }\n-\n-        if (is_resource($this->_randomFile)) {\n-            $buffer = '';\n-            $stillNeed = $length;\n-            while ($stillNeed > 0) {\n-                $someBytes = fread($this->_randomFile, $stillNeed);\n-                if ($someBytes === false) {\n-                    break;\n-                }\n-                $buffer .= $someBytes;\n-                $stillNeed -= StringHelper::byteLength($someBytes);\n-                if ($stillNeed === 0) {\n-                    // Leaving file pointer open in order to make next generation faster by reusing it.\n-                    return $buffer;\n-                }\n-            }\n-            fclose($this->_randomFile);\n-            $this->_randomFile = null;\n-        }\n-\n-        throw new Exception('Unable to generate a random key');\n+        return random_bytes($length);\n     }\n \n     /**"
        },
        {
          "filename": "framework/caching/DbCache.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -276,7 +276,8 @@ protected function deleteValue($key)\n      */\n     public function gc($force = false)\n     {\n-        if ($force || mt_rand(0, 1000000) < $this->gcProbability) {\n+\n+        if ($force || random_int(0, 1000000) < $this->gcProbability) {\n             $this->db->createCommand()\n                 ->delete($this->cacheTable, '[[expire]] > 0 AND [[expire]] < ' . time())\n                 ->execute();"
        },
        {
          "filename": "framework/caching/FileCache.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -245,7 +245,7 @@ protected function flushValues()\n      */\n     public function gc($force = false, $expiredOnly = true)\n     {\n-        if ($force || mt_rand(0, 1000000) < $this->gcProbability) {\n+        if ($force || random_int(0, 1000000) < $this->gcProbability) {\n             $this->gcRecursive($this->cachePath, $expiredOnly);\n         }\n     }"
        },
        {
          "filename": "framework/captcha/CaptchaAction.php",
          "status": "modified",
          "additions": 9,
          "deletions": 8,
          "patch": "@@ -214,16 +214,17 @@ protected function generateVerifyCode()\n         if ($this->maxLength > 20) {\n             $this->maxLength = 20;\n         }\n-        $length = mt_rand($this->minLength, $this->maxLength);\n+\n+        $length = random_int($this->minLength, $this->maxLength);\n \n         $letters = 'bcdfghjklmnpqrstvwxyz';\n         $vowels = 'aeiou';\n         $code = '';\n         for ($i = 0; $i < $length; ++$i) {\n-            if ($i % 2 && mt_rand(0, 10) > 2 || !($i % 2) && mt_rand(0, 10) > 9) {\n-                $code .= $vowels[mt_rand(0, 4)];\n+            if ($i % 2 && random_int(0, 10) > 2 || !($i % 2) && random_int(0, 10) > 9) {\n+                $code .= $vowels[random_int(0, 4)];\n             } else {\n-                $code .= $letters[mt_rand(0, 20)];\n+                $code .= $letters[random_int(0, 20)];\n             }\n         }\n \n@@ -298,8 +299,8 @@ protected function renderImageByGD($code)\n         $x = 10;\n         $y = round($this->height * 27 / 40);\n         for ($i = 0; $i < $length; ++$i) {\n-            $fontSize = (int) (mt_rand(26, 32) * $scale * 0.8);\n-            $angle = mt_rand(-10, 10);\n+            $fontSize = (int) (random_int(26, 32) * $scale * 0.8);\n+            $angle = random_int(-10, 10);\n             $letter = $code[$i];\n             $box = imagettftext($image, $fontSize, $angle, $x, $y, $foreColor, $this->fontFile, $letter);\n             $x = $box[2] + $this->offset;\n@@ -341,9 +342,9 @@ protected function renderImageByImagick($code)\n         for ($i = 0; $i < $length; ++$i) {\n             $draw = new \\ImagickDraw();\n             $draw->setFont($this->fontFile);\n-            $draw->setFontSize((int) (mt_rand(26, 32) * $scale * 0.8));\n+            $draw->setFontSize((int) (random_int(26, 32) * $scale * 0.8));\n             $draw->setFillColor($foreColor);\n-            $image->annotateImage($draw, $x, $y, mt_rand(-10, 10), $code[$i]);\n+            $image->annotateImage($draw, $x, $y, random_int(-10, 10), $code[$i]);\n             $fontMetrics = $image->queryFontMetrics($draw, $code[$i]);\n             $x += (int) $fontMetrics['textWidth'] + $this->offset;\n         }"
        },
        {
          "filename": "framework/composer.json",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -73,7 +73,8 @@\n         \"bower-asset/jquery\": \"3.6.*@stable | 3.5.*@stable | 3.4.*@stable | 3.3.*@stable | 3.2.*@stable | 3.1.*@stable | 2.2.*@stable | 2.1.*@stable | 1.11.*@stable | 1.12.*@stable\",\n         \"bower-asset/inputmask\": \"~3.2.2 | ~3.3.5\",\n         \"bower-asset/punycode\": \"1.3.*\",\n-        \"bower-asset/yii2-pjax\": \"~2.0.1\"\n+        \"bower-asset/yii2-pjax\": \"~2.0.1\",\n+        \"paragonie/random_compat\": \">=1\"\n     },\n     \"autoload\": {\n         \"psr-4\": {\"yii\\\\\": \"\"}"
        },
        {
          "filename": "framework/mail/BaseMailer.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -343,7 +343,7 @@ public function generateMessageFileName()\n     {\n         $time = microtime(true);\n \n-        return date('Ymd-His-', $time) . sprintf('%04d', (int) (($time - (int) $time) * 10000)) . '-' . sprintf('%04d', mt_rand(0, 10000)) . '.eml';\n+        return date('Ymd-His-', $time) . sprintf('%04d', (int) (($time - (int) $time) * 10000)) . '-' . sprintf('%04d', random_int(0, 10000)) . '.eml';\n     }\n \n     /**"
        },
        {
          "filename": "tests/framework/base/SecurityTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 189,
          "patch": "@@ -5,53 +5,7 @@\n  * @license http://www.yiiframework.com/license/\n  */\n \n-namespace yii\\base {\n-\n-    /**\n-     * emulate availability of functions, to test different branches of Security class\n-     * where different execution paths are chosen based on calling function_exists.\n-     *\n-     * This function overrides function_exists from the root namespace in yii\\base.\n-     * @param string $name\n-     */\n-    function function_exists($name)\n-    {\n-        if (isset(\\yiiunit\\framework\\base\\SecurityTest::$functions[$name])) {\n-            return \\yiiunit\\framework\\base\\SecurityTest::$functions[$name];\n-        }\n-\n-        return \\function_exists($name);\n-    }\n-    /**\n-     * Emulate chunked reading of fread(), to test different branches of Security class\n-     * where different execution paths are chosen based on the return value of fopen/fread.\n-     *\n-     * This function overrides fopen and fread from the root namespace in yii\\base.\n-     * @param string $filename\n-     * @param mixed $mode\n-     */\n-    function fopen($filename, $mode)\n-    {\n-        if (\\yiiunit\\framework\\base\\SecurityTest::$fopen !== null) {\n-            return \\yiiunit\\framework\\base\\SecurityTest::$fopen;\n-        }\n-\n-        return \\fopen($filename, $mode);\n-    }\n-    function fread($handle, $length)\n-    {\n-        if (\\yiiunit\\framework\\base\\SecurityTest::$fread !== null) {\n-            return \\yiiunit\\framework\\base\\SecurityTest::$fread;\n-        }\n-        if (\\yiiunit\\framework\\base\\SecurityTest::$fopen !== null) {\n-            return $length < 8 ? \\str_repeat('s', $length) : 'test1234';\n-        }\n-\n-        return \\fread($handle, $length);\n-    }\n-} // closing namespace yii\\base;\n-\n-namespace yiiunit\\framework\\base {\n+namespace yiiunit\\framework\\base;\n \n use yii\\base\\Security;\n use yiiunit\\TestCase;\n@@ -63,44 +17,18 @@ class SecurityTest extends TestCase\n {\n     const CRYPT_VECTORS = 'old';\n \n-    /**\n-     * @var array set of functions for which a fake return value for `function_exists()` is provided.\n-     */\n-    public static $functions = [];\n-    /**\n-     * @var resource|false|null fake return value for fopen() in \\yii\\base namespace. Normal behavior if this is null.\n-     */\n-    public static $fopen;\n-    public static $fread;\n-\n     /**\n      * @var ExposedSecurity\n      */\n     protected $security;\n \n     protected function setUp()\n     {\n-        static::$functions = [];\n-        static::$fopen = null;\n-        static::$fread = null;\n         parent::setUp();\n         $this->security = new ExposedSecurity();\n         $this->security->derivationIterations = 1000; // speed up test running\n     }\n \n-    protected function tearDown()\n-    {\n-        static::$functions = [];\n-        static::$fopen = null;\n-        static::$fread = null;\n-        parent::tearDown();\n-    }\n-\n-    private function isWindows()\n-    {\n-        return DIRECTORY_SEPARATOR !== '/';\n-    }\n-\n     // Tests :\n \n     public function testHashData()\n@@ -893,76 +821,8 @@ public function testRandomKeyInvalidInput($input)\n         $key1 = $this->security->generateRandomKey($input);\n     }\n \n-    /**\n-     * Test the case where opening /dev/urandom fails.\n-     */\n-    public function testRandomKeyNoOptions()\n-    {\n-        static::$functions = ['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false];\n-        static::$fopen = false;\n-        $this->expectException('yii\\base\\Exception');\n-        $this->expectExceptionMessage('Unable to generate a random key');\n-\n-        $this->security->generateRandomKey(42);\n-    }\n-\n-    /**\n-     * Test the case where reading from /dev/urandom fails.\n-     */\n-    public function testRandomKeyFreadFailure()\n-    {\n-        static::$functions = ['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false];\n-        static::$fread = false;\n-        $this->expectException('yii\\base\\Exception');\n-        $this->expectExceptionMessage('Unable to generate a random key');\n-\n-        $this->security->generateRandomKey(42);\n-    }\n-\n-    /**\n-     * returns a set of different combinations of functions available.\n-     */\n-    public function randomKeyVariants()\n+    public function testGenerateRandomKey()\n     {\n-        return [\n-            [['random_bytes' => true,  'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => true]],\n-            [['random_bytes' => true,  'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => false]],\n-            [['random_bytes' => true,  'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => true]],\n-            [['random_bytes' => true,  'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false]],\n-            [['random_bytes' => false, 'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => true]],\n-            [['random_bytes' => false, 'openssl_random_pseudo_bytes' => true,  'mcrypt_create_iv' => false]],\n-            [['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => true]],\n-            [['random_bytes' => false, 'openssl_random_pseudo_bytes' => false, 'mcrypt_create_iv' => false]],\n-        ];\n-    }\n-\n-    /**\n-     * @dataProvider randomKeyVariants\n-     * @param array $functions\n-     */\n-    public function testGenerateRandomKey($functions)\n-    {\n-        foreach ($functions as $fun => $available) {\n-            if ($available && !\\function_exists($fun)) {\n-                $this->markTestSkipped(\"Can not test generateRandomKey() branch that includes $fun, because it is not available on your system.\");\n-            }\n-        }\n-        // there is no /dev/urandom on windows so we expect this to fail\n-        if ($this->isWindows() && $functions['random_bytes'] === false && $functions['openssl_random_pseudo_bytes'] === false && $functions['mcrypt_create_iv'] === false) {\n-            $this->expectException('yii\\base\\Exception');\n-            $this->expectExceptionMessage('Unable to generate a random key');\n-        }\n-        // Function mcrypt_create_iv() is deprecated since PHP 7.1\n-        if (version_compare(PHP_VERSION, '7.1.0alpha', '>=') && $functions['random_bytes'] === false && $functions['mcrypt_create_iv'] === true) {\n-            if ($functions['openssl_random_pseudo_bytes'] === false) {\n-                $this->markTestSkipped('Function mcrypt_create_iv() is deprecated as of PHP 7.1');\n-            } elseif (!$this->security->shouldUseLibreSSL() && !$this->isWindows()) {\n-                $this->markTestSkipped('Function openssl_random_pseudo_bytes need LibreSSL version >=2.1.5 or Windows system on server');\n-            }\n-        }\n-\n-        static::$functions = $functions;\n-\n         // test various string lengths\n         for ($length = 1; $length < 64; $length++) {\n             $key1 = $this->security->generateRandomKey($length);\n@@ -985,16 +845,6 @@ public function testGenerateRandomKey($functions)\n         $this->assertInternalType('string', $key2);\n         $this->assertEquals($length, strlen($key2));\n         $this->assertNotEquals($key1, $key2);\n-\n-        // force /dev/urandom reading loop to deal with chunked data\n-        // the above test may have read everything in one run.\n-        // not sure if this can happen in real life but if it does\n-        // we should be prepared\n-        static::$fopen = fopen('php://memory', 'rwb');\n-        $length = 1024 * 1024;\n-        $key1 = $this->security->generateRandomKey($length);\n-        $this->assertInternalType('string', $key1);\n-        $this->assertEquals($length, strlen($key1));\n     }\n \n     protected function randTime(Security $security, $count, $length, $message)\n@@ -1010,42 +860,6 @@ protected function randTime(Security $security, $count, $length, $message)\n         fwrite(STDERR, \"$message: $count x $length B = $nbytes B in $milisec ms => $rate MB/s\\n\");\n     }\n \n-    public function testGenerateRandomKeySpeed()\n-    {\n-        self::markTestSkipped('Comment markTestSkipped in testGenerateRandomKeySpeed() in order to get RNG benchmark.');\n-        $tests = [\n-            \"function_exists('random_bytes')\",\n-            \"defined('OPENSSL_VERSION_TEXT') ? OPENSSL_VERSION_TEXT : null\",\n-            'PHP_VERSION_ID',\n-            'PHP_OS',\n-            \"function_exists('mcrypt_create_iv') ? bin2hex(mcrypt_create_iv(4, MCRYPT_DEV_URANDOM)) : null\",\n-            'DIRECTORY_SEPARATOR',\n-            \"ini_get('open_basedir')\",\n-        ];\n-        if ($this->isWindows()) {\n-            $tests[] = \"sprintf('%o', lstat(PHP_OS === 'FreeBSD' ? '/dev/random' : '/dev/urandom')['mode'] & 0170000)\";\n-            $tests[] = \"bin2hex(file_get_contents(PHP_OS === 'FreeBSD' ? '/dev/random' : '/dev/urandom', false, null, 0, 8))\";\n-        }\n-        foreach ($tests as $i => $test) {\n-            $result = eval('return ' . $test . ';');\n-            fwrite(STDERR, sprintf(\"%2d %s ==> %s\\n\", $i + 1, $test, var_export($result, true)));\n-        }\n-\n-        foreach ([16, 2000, 262144] as $block) {\n-            $security = new Security();\n-            foreach (range(1, 10) as $nth) {\n-                $this->randTime($security, 1, $block, \"Call $nth\");\n-            }\n-            unset($security);\n-        }\n-\n-        $security = new Security();\n-        $this->randTime($security, 10000, 16, 'Rate test');\n-\n-        $security = new Security();\n-        $this->randTime($security, 10000, 5000, 'Rate test');\n-    }\n-\n     public function testGenerateRandomString()\n     {\n         $length = 21;\n@@ -1305,4 +1119,3 @@ public function maskProvider()\n         ];\n     }\n }\n-} // closing namespace yiiunit\\framework\\base;"
        },
        {
          "filename": "tests/framework/validators/FileValidatorTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -324,7 +324,7 @@ protected function createTestFiles($params = [])\n             $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n             $randomString = '';\n             for ($i = 0; $i < $len; $i++) {\n-                $randomString .= $characters[rand(0, strlen($characters) - 1)];\n+                $randomString .= $characters[random_int(0, strlen($characters) - 1)];\n             }\n \n             return $randomString;\n@@ -340,7 +340,7 @@ protected function createTestFiles($params = [])\n             if (is_readable($tempName)) {\n                 $size = filesize($tempName);\n             } else {\n-                $size = isset($param['size']) ? $param['size'] : rand(\n+                $size = isset($param['size']) ? $param['size'] : random_int(\n                     1,\n                     $this->sizeToBytes(ini_get('upload_max_filesize'))\n                 );"
        },
        {
          "filename": "tests/framework/web/UploadedFileTest.php",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -7,6 +7,7 @@\n \n namespace yiiunit\\framework\\web;\n \n+use Yii;\n use yii\\web\\UploadedFile;\n use yiiunit\\framework\\web\\mocks\\UploadedFileMock;\n use yiiunit\\framework\\web\\stubs\\ModelStub;\n@@ -28,21 +29,21 @@ protected function setUp()\n     private function generateFakeFileData()\n     {\n         return [\n-            'name' => md5(mt_rand()),\n-            'tmp_name' => md5(mt_rand()),\n+            'name' => md5(random_int(0, PHP_INT_MAX)),\n+            'tmp_name' => md5(random_int(0, PHP_INT_MAX)),\n             'type' => 'image/jpeg',\n-            'size' => mt_rand(1000, 10000),\n+            'size' => random_int(1000, 10000),\n             'error' => '0',\n         ];\n     }\n \n     private function generateTempFileData()\n     {\n         return [\n-            'name' => md5(mt_rand()),\n+            'name' => md5(random_int(0, PHP_INT_MAX)),\n             'tmp_name' => tempnam(sys_get_temp_dir(), ''),\n             'type' => 'image/jpeg',\n-            'size' => mt_rand(1000, 10000),\n+            'size' => random_int(1000, 10000),\n             'error' => '0',\n         ];\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 9,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d1463078a669bf07d7537522a6aee2e692461f4a",
            "date": "2025-01-17T08:12:35Z",
            "author_login": "mtangoo"
          },
          {
            "sha": "a05f60beeff0ba6c9c6c7461a0c89f41cc054fab",
            "date": "2025-01-16T14:26:30Z",
            "author_login": "pamparam83"
          },
          {
            "sha": "b0b7832235a706625fca00221039227f15dde18f",
            "date": "2025-01-14T11:07:19Z",
            "author_login": "mtangoo"
          },
          {
            "sha": "fd866da415125233b4628fcae5c8a2cc4c61e143",
            "date": "2025-01-12T21:44:34Z",
            "author_login": "xepozz"
          },
          {
            "sha": "f94017ce4c2c2f83065f5079dc250e788265fa4e",
            "date": "2025-01-06T14:53:58Z",
            "author_login": "xcopy"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-1241",
    "description": "yii2 is vulnerable to Use of Predictable Algorithm in Random Number Generator",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-08-10T11:15:09.640",
    "last_modified": "2024-11-21T06:22:09.677",
    "fix_date": "2021-08-09T07:25:36Z"
  },
  "references": [
    {
      "url": "https://github.com/yiisoft/yii2/commit/13f27e4d920a05d53236139e8b07007acd046a46",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/50aad1d4-eb00-4573-b8a4-dbe38e2c229f",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/yiisoft/yii2/commit/13f27e4d920a05d53236139e8b07007acd046a46",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/50aad1d4-eb00-4573-b8a4-dbe38e2c229f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:02.375490",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "yii2",
    "owner": "yiisoft",
    "created_at": "2012-02-13T15:32:36Z",
    "updated_at": "2025-01-25T14:20:38Z",
    "pushed_at": "2025-01-17T08:12:35Z",
    "size": 81393,
    "stars": 14260,
    "forks": 6886,
    "open_issues": 525,
    "watchers": 14260,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "2.2",
      "master"
    ],
    "languages": {
      "PHP": 7803899,
      "JavaScript": 282198,
      "PLSQL": 20760,
      "TSQL": 18884,
      "HTML": 14463,
      "Hack": 4074,
      "Dockerfile": 3216,
      "Shell": 2070,
      "Batchfile": 1090,
      "CSS": 20
    },
    "commit_activity": {
      "total_commits_last_year": 167,
      "avg_commits_per_week": 3.2115384615384617,
      "days_active_last_year": 84
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T08:06:10.707450"
  }
}