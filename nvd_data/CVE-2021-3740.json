{
  "cve_id": "CVE-2021-3740",
  "github_data": {
    "repository": "chatwoot/chatwoot",
    "fix_commit": "6fdd4a29969be8423f31890b807d27d13627c50c",
    "related_commits": [
      "6fdd4a29969be8423f31890b807d27d13627c50c"
    ],
    "patch_url": "https://github.com/chatwoot/chatwoot/commit/6fdd4a29969be8423f31890b807d27d13627c50c.patch",
    "fix_commit_details": {
      "sha": "6fdd4a29969be8423f31890b807d27d13627c50c",
      "commit_date": "2021-09-01T09:38:05Z",
      "author": {
        "login": "sojan-official",
        "type": "User",
        "stats": {
          "total_commits": 985,
          "average_weekly_commits": 3.4683098591549295,
          "total_additions": 411274,
          "total_deletions": 113389,
          "weeks_active": 252
        }
      },
      "commit_message": {
        "title": "chore: Security Improvements to the API (#2893)",
        "length": 463,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 83,
        "additions": 60,
        "deletions": 23
      },
      "files": [
        {
          "filename": "app/builders/messages/message_builder.rb",
          "status": "modified",
          "additions": 14,
          "deletions": 10,
          "patch": "@@ -15,21 +15,25 @@ def initialize(user, conversation, params)\n \n   def perform\n     @message = @conversation.messages.build(message_params)\n-    if @attachments.present?\n-      @attachments.each do |uploaded_attachment|\n-        attachment = @message.attachments.new(\n-          account_id: @message.account_id,\n-          file_type: file_type(uploaded_attachment&.content_type)\n-        )\n-        attachment.file.attach(uploaded_attachment)\n-      end\n-    end\n-    @message.save\n+    process_attachments\n+    @message.save!\n     @message\n   end\n \n   private\n \n+  def process_attachments\n+    return if @attachments.blank?\n+\n+    @attachments.each do |uploaded_attachment|\n+      @message.attachments.build(\n+        account_id: @message.account_id,\n+        file_type: file_type(uploaded_attachment&.content_type),\n+        file: uploaded_attachment\n+      )\n+    end\n+  end\n+\n   def message_type\n     if @conversation.inbox.channel_type != 'Channel::Api' && @message_type == 'incoming'\n       raise StandardError, 'Incoming messages are only allowed in Api inboxes'"
        },
        {
          "filename": "app/controllers/api/v1/widget/messages_controller.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 5,
          "patch": "@@ -8,8 +8,8 @@ def index\n \n   def create\n     @message = conversation.messages.new(message_params)\n-    @message.save\n     build_attachment\n+    @message.save!\n   end\n \n   def update\n@@ -29,13 +29,12 @@ def build_attachment\n     return if params[:message][:attachments].blank?\n \n     params[:message][:attachments].each do |uploaded_attachment|\n-      attachment = @message.attachments.new(\n+      @message.attachments.new(\n         account_id: @message.account_id,\n-        file_type: helpers.file_type(uploaded_attachment&.content_type)\n+        file_type: helpers.file_type(uploaded_attachment&.content_type),\n+        file: uploaded_attachment\n       )\n-      attachment.file.attach(uploaded_attachment)\n     end\n-    @message.save!\n   end\n \n   def set_conversation"
        },
        {
          "filename": "app/controllers/public/api/v1/inboxes/messages_controller.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 5,
          "patch": "@@ -7,8 +7,8 @@ def index\n \n   def create\n     @message = @conversation.messages.new(message_params)\n-    @message.save\n     build_attachment\n+    @message.save!\n   end\n \n   def update\n@@ -23,13 +23,12 @@ def build_attachment\n     return if params[:attachments].blank?\n \n     params[:attachments].each do |uploaded_attachment|\n-      attachment = @message.attachments.new(\n+      @message.attachments.new(\n         account_id: @message.account_id,\n-        file_type: helpers.file_type(uploaded_attachment&.content_type)\n+        file_type: helpers.file_type(uploaded_attachment&.content_type),\n+        file: uploaded_attachment\n       )\n-      attachment.file.attach(uploaded_attachment)\n     end\n-    @message.save!\n   end\n \n   def message_finder_params"
        },
        {
          "filename": "app/helpers/file_type_helper.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -3,12 +3,12 @@ def file_type(content_type)\n     return :image if [\n       'image/jpeg',\n       'image/png',\n-      'image/svg+xml',\n       'image/gif',\n       'image/tiff',\n       'image/bmp'\n     ].include?(content_type)\n \n+    return :video if content_type.include?('video/')\n     return :audio if content_type.include?('audio/')\n \n     :file"
        },
        {
          "filename": "app/javascript/dashboard/components/widgets/WootWriter/ReplyBottomPanel.vue",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -11,10 +11,11 @@\n         @click=\"toggleEmojiPicker\"\n       />\n \n+      <!-- ensure the same validations for attachment types are implemented in  backend models as well -->\n       <file-upload\n         ref=\"upload\"\n         :size=\"4096 * 4096\"\n-        accept=\"image/*, application/pdf, audio/mpeg, video/mp4, audio/ogg, text/csv\"\n+        accept=\"image/png, image/jpeg, image/gif, image/bmp, image/tiff, application/pdf, audio/mpeg, video/mp4, audio/ogg, text/csv\"\n         :drop=\"true\"\n         :drop-directory=\"false\"\n         @input-file=\"onFileUpload\""
        },
        {
          "filename": "app/javascript/dashboard/components/widgets/forms/AvatarUploader.vue",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -20,12 +20,13 @@\n         id=\"file\"\n         ref=\"file\"\n         type=\"file\"\n-        accept=\"image/*\"\n+        accept=\"image/png, image/jpeg, image/gif\"\n         @change=\"handleImageUpload\"\n       />\n       <slot></slot>\n     </label>\n   </div>\n+\n </template>\n \n <script>"
        },
        {
          "filename": "app/models/attachment.rb",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -20,6 +20,7 @@ class Attachment < ApplicationRecord\n   belongs_to :account\n   belongs_to :message\n   has_one_attached :file\n+  validate :acceptable_file\n \n   enum file_type: [:image, :audio, :video, :file, :location, :fallback]\n \n@@ -76,4 +77,22 @@ def base_data\n       account_id: account_id\n     }\n   end\n+\n+  def should_validate_file?\n+    return unless file.attached?\n+    # we are only limiting attachment types in case of website widget\n+    return unless message.inbox.channel_type == 'Channel::WebWidget'\n+\n+    true\n+  end\n+\n+  def acceptable_file\n+    should_validate_file?\n+\n+    errors.add(:file, 'is too big') if file.byte_size > 40.megabytes\n+\n+    acceptable_types = ['image/png', 'image/jpeg', 'image/gif', 'image/bmp', 'image/tiff', 'application/pdf', 'audio/mpeg', 'video/mp4', 'audio/ogg',\n+                        'text/csv'].freeze\n+    errors.add(:file, 'filetype not supported') unless acceptable_types.include?(file.content_type)\n+  end\n end"
        },
        {
          "filename": "app/models/concerns/avatarable.rb",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -6,6 +6,7 @@ module Avatarable\n \n   included do\n     has_one_attached :avatar\n+    validate :acceptable_avatar\n   end\n \n   def avatar_url\n@@ -18,4 +19,13 @@ def avatar_url\n \n     ''\n   end\n+\n+  def acceptable_avatar\n+    return unless avatar.attached?\n+\n+    errors.add(:avatar, 'is too big') if avatar.byte_size > 15.megabytes\n+\n+    acceptable_types = ['image/jpeg', 'image/png', 'image/gif'].freeze\n+    errors.add(:avatar, 'filetype not supported') unless acceptable_types.include?(avatar.content_type)\n+  end\n end"
        },
        {
          "filename": "config/initializers/devise_token_auth.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -9,6 +9,10 @@\n   # determines how long tokens will remain valid after they are issued.\n   config.token_lifespan = 2.months\n \n+  # By default, old tokens are not invalidated when password is changed.\n+  # Enable this option if you want to make passwords updates to logout other devices.\n+  config.remove_tokens_after_password_reset = true\n+\n   # Sets the max number of concurrent devices per user, which is 10 by default.\n   # After this limit is reached, the oldest tokens will be removed.\n   # config.max_number_of_devices = 10"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 9,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7b31b5ad6ea77fa9eb8ef86acab4743312a2974f",
            "date": "2025-01-14T19:14:13Z",
            "author_login": "scmmishra"
          },
          {
            "sha": "b3d0d466eeeff13acba6662d233a8491825185b4",
            "date": "2025-01-14T19:13:16Z",
            "author_login": "iamsivin"
          },
          {
            "sha": "0c01303db0a3a1f4f79bd6fe40a84c11a5500d0a",
            "date": "2025-01-14T16:30:56Z",
            "author_login": "chatwoot-bot"
          },
          {
            "sha": "91dd92e318fc3e5f4614fce66897a786cd972fe8",
            "date": "2025-01-14T14:15:42Z",
            "author_login": "vishnu-narayanan"
          },
          {
            "sha": "03a938eb6092c988a1fb4e90cb3bfcbc34a26a81",
            "date": "2025-01-14T14:13:56Z",
            "author_login": "vishnu-narayanan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.8,
    "cvss_vector": "CVSS:3.1/AV:A/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-384",
    "description": "A Session Fixation vulnerability exists in chatwoot/chatwoot versions prior to 2.4.0. The application does not invalidate existing sessions on other devices when a user changes their password, allowing old sessions to persist. This can lead to unauthorized access if an attacker has obtained a session token.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2024-11-15T11:15:04.987",
    "last_modified": "2024-11-15T19:35:02.440",
    "fix_date": "2021-09-01T09:38:05Z"
  },
  "references": [
    {
      "url": "https://github.com/chatwoot/chatwoot/commit/6fdd4a29969be8423f31890b807d27d13627c50c",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://huntr.com/bounties/1625470476437-chatwoot/chatwoot",
      "source": "security@huntr.dev",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:09:29.302407",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "chatwoot",
    "owner": "chatwoot",
    "created_at": "2019-08-14T06:50:51Z",
    "updated_at": "2025-01-14T12:56:36Z",
    "pushed_at": "2025-01-14T11:50:33Z",
    "size": 151937,
    "stars": 21934,
    "forks": 3740,
    "open_issues": 937,
    "watchers": 21934,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "3.x"
    ],
    "languages": {
      "Ruby": 2998525,
      "Vue": 2505452,
      "JavaScript": 2090105,
      "HTML": 162143,
      "SCSS": 105806,
      "Shell": 37442,
      "Liquid": 11120,
      "TypeScript": 5496,
      "Dockerfile": 4503,
      "Makefile": 1114,
      "Procfile": 283
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:00:34.446910"
  }
}