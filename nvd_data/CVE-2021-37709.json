{
  "cve_id": "CVE-2021-37709",
  "github_data": {
    "repository": "shopware/platform",
    "fix_commit": "a9f52abb6eb503654c492b6b2076f8d924831fec",
    "related_commits": [
      "a9f52abb6eb503654c492b6b2076f8d924831fec",
      "a9f52abb6eb503654c492b6b2076f8d924831fec"
    ],
    "patch_url": "https://github.com/shopware/platform/commit/a9f52abb6eb503654c492b6b2076f8d924831fec.patch",
    "fix_commit_details": {
      "sha": "a9f52abb6eb503654c492b6b2076f8d924831fec",
      "commit_date": "2021-07-29T09:15:25Z",
      "author": {
        "login": "shyim",
        "type": "User",
        "stats": {
          "total_commits": 2463,
          "average_weekly_commits": 6.331619537275064,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 240
        }
      },
      "commit_message": {
        "title": "NEXT-15675 - Improve file download",
        "length": 34,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 285,
        "additions": 243,
        "deletions": 42
      },
      "files": [
        {
          "filename": "changelog/_unreleased/2021-07-29-improve-file-download.md",
          "status": "added",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -0,0 +1,9 @@\n+---\n+title: Improve file download\n+issue: NEXT-15675\n+---\n+# Administration\n+* Replaced method `getDownloadUrl` with `openDownload` in components:\n+    - `sw-import-export-activity`\n+    - `sw-import-export-activity-detail-modal`\n+    - `sw-import-export-progress`"
        },
        {
          "filename": "src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity-detail-modal/index.js",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -42,8 +42,17 @@ Shopware.Component.register('sw-import-export-activity-detail-modal', {\n             return format.fileSize(size);\n         },\n \n-        getDownloadUrl(file) {\n-            return this.importExport.getDownloadUrl(file.id, file.accessToken);\n+        /**\n+         * @deprecated tag:v6.5.0.0 - Remove unused method, use openDownload instead\n+         */\n+        getDownloadUrl() {\n+            Shopware.Utils.debug.error('The method getDownloadUrl has been replaced with openDownload.');\n+\n+            return '';\n+        },\n+\n+        async openDownload(id) {\n+            return window.open(await this.importExport.getDownloadUrl(id), '_blank');\n         },\n \n         getStateLabel(state) {"
        },
        {
          "filename": "src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity-detail-modal/sw-import-export-activity-detail-modal.html.twig",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -84,7 +84,7 @@\n                 variant=\"ghost\"\n                 class=\"sw-import-export-activity-detail-modal__download-failed\"\n                 size=\"small\"\n-                :link=\"getDownloadUrl(logEntity.invalidRecordsLog.file)\"\n+                @click=\"openDownload(logEntity.invalidRecordsLog.file)\"\n             >\n                 {{ $tc('sw-import-export.activity.detail.labelDownloadInvalidFile') }}\n             </sw-button>\n@@ -107,8 +107,8 @@\n                 </template>\n                 {% block sw_import_export_edit_profile_modal_invalid_records_download %}\n                 <a\n-                    :href=\"getDownloadUrl(logEntity.file)\"\n                     class=\"sw-import-export-activity-detail-modal__download\"\n+                    @click=\"openDownload(logEntity.file)\"\n                 >\n                     {{ $tc('sw-import-export.activity.detail.labelDownloadFile') }}\n                 </a>\n@@ -122,7 +122,7 @@\n             variant=\"ghost\"\n             class=\"sw-import-export-activity-detail-modal__download-button\"\n             size=\"small\"\n-            :link=\"getDownloadUrl(logEntity.file)\"\n+            @click=\"openDownload(logEntity.file)\"\n         >\n             {{ $tc('sw-import-export.activity.detail.labelDownloadFile') }}\n         </sw-button>"
        },
        {
          "filename": "src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity/index.js",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -158,8 +158,17 @@ Shopware.Component.register('sw-import-export-activity', {\n             this.selectedLog = null;\n         },\n \n-        getDownloadUrl(id, accessToken) {\n-            return this.importExport.getDownloadUrl(id, accessToken);\n+        /**\n+         * @deprecated tag:v6.5.0.0 - Remove unused method, use openDownload instead\n+         */\n+        getDownloadUrl() {\n+            Shopware.Utils.debug.error('The method getDownloadUrl has been replaced with openDownload.');\n+\n+            return '';\n+        },\n+\n+        async openDownload(id) {\n+            return window.open(await this.importExport.getDownloadUrl(id), '_blank');\n         },\n \n         saveSelectedProfile() {"
        },
        {
          "filename": "src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-activity/sw-import-export-activity.html.twig",
          "status": "modified",
          "additions": 4,
          "deletions": 6,
          "patch": "@@ -80,9 +80,8 @@\n             {% endblock %}\n             {% block sw_import_export_activity_listing_actions_download_file %}\n             <a\n-                class=\"sw-import-export-activity__download-action sw-external-link\"\n-                :href=\"getDownloadUrl(item.fileId, item.file.accessToken)\"\n-                target=\"_blank\"\n+                class=\"sw-import-export-activity__download-action\"\n+                @click=\"openDownload(item.fileId)\"\n             >\n                 <sw-context-menu-item>\n                     {{ $tc('sw-import-export.activity.contextMenu.downloadFile') }}\n@@ -97,9 +96,8 @@\n             {% block sw_import_export_activity_listing_actions_download_invalid %}\n             <template v-if=\"item.invalidRecordsLog\">\n                 <a\n-                    class=\"sw-import-export-activity__download-action sw-external-link\"\n-                    :href=\"getDownloadUrl(item.invalidRecordsLog.fileId, item.invalidRecordsLog.file.accessToken)\"\n-                    target=\"_blank\"\n+                    class=\"sw-import-export-activity__download-action\"\n+                    @click=\"openDownload(item.invalidRecordsLog.fileId)\"\n                 >\n                     <sw-context-menu-item>\n                         {{ $tc('sw-import-export.activity.contextMenu.downloadInvalidFile') }}"
        },
        {
          "filename": "src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-progress/index.js",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -131,8 +131,17 @@ Shopware.Component.register('sw-import-export-progress', {\n     },\n \n     methods: {\n-        getDownloadUrl(id, accessToken) {\n-            return this.importExport.getDownloadUrl(id, accessToken);\n+        /**\n+         * @deprecated tag:v6.5.0.0 - Remove unused method, use openDownload instead\n+         */\n+        getDownloadUrl() {\n+            Shopware.Utils.debug.error('The method getDownloadUrl has been replaced with openDownload.');\n+\n+            return '';\n+        },\n+\n+        async openDownload(id) {\n+            return window.open(await this.importExport.getDownloadUrl(id), '_blank');\n         },\n \n         onShowLog(item) {"
        },
        {
          "filename": "src/Administration/Resources/app/administration/src/module/sw-import-export/component/sw-import-export-progress/sw-import-export-progress.html.twig",
          "status": "modified",
          "additions": 2,
          "deletions": 5,
          "patch": "@@ -110,10 +110,7 @@\n                         <sw-button variant=\"primary\"\n                                    size=\"small\"\n                                    class=\"sw-import-export-progress__stats-list-failure-download\"\n-                                   :link=\"getDownloadUrl(\n-                                                       logEntry.invalidRecordsLog.file.id,\n-                                                       logEntry.invalidRecordsLog.file.accessToken\n-                                                        )\">\n+                                   @click=\"openDownload(logEntry.invalidRecordsLog.file.id)\">\n                             {{  $tc('sw-import-export.progress.downloadFailedLabel')  }}\n                         </sw-button>\n                     </template>\n@@ -125,7 +122,7 @@\n                 variant=\"primary\"\n                 class=\"sw-import-export-progress__download-action\"\n                 size=\"small\"\n-                :link=\"getDownloadUrl(logEntry.file.id, logEntry.file.accessToken)\"\n+                @click=\"openDownload(logEntry.file.id)\"\n             >\n                 {{ $tc('sw-import-export.progress.downloadFileLabel') }}\n             </sw-button>"
        },
        {
          "filename": "src/Administration/Resources/app/administration/src/module/sw-import-export/service/importExport.service.js",
          "status": "modified",
          "additions": 8,
          "deletions": 3,
          "patch": "@@ -36,12 +36,17 @@ export default class ImportExportService extends ApiService {\n      * Download the export file\n      *\n      * @param fileId {Entity} File entity\n-     * @param accessToken\n      * @returns {string}\n      */\n-    getDownloadUrl(fileId, accessToken) {\n+    async getDownloadUrl(fileId) {\n+        const accessTokenResponse = await this.httpClient.post(\n+            `/_action/import-export/file/prepare-download/${fileId}`,\n+            {},\n+            { headers: this.getBasicHeaders() },\n+        );\n+\n         return `${Shopware.Context.api.apiPath}/_action/${this.getApiBasePath()}/` +\n-            `file/download?fileId=${fileId}&accessToken=${accessToken}`;\n+            `file/download?fileId=${fileId}&accessToken=${accessTokenResponse.data.accessToken}`;\n     }\n \n     /**"
        },
        {
          "filename": "src/Administration/Resources/app/administration/src/module/sw-import-export/view/sw-import-export-view-profiles/sw-import-export-view-profiles.html.twig",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -20,10 +20,10 @@\n \n             {% block sw_import_export_view_profile_profiles_toolbar_add_new_profile %}\n             <sw-button\n+                v-tooltip=\"createTooltip\"\n                 class=\"sw-import-export-view-profiles__create-action\"\n                 variant=\"ghost\"\n                 :disabled=\"isLoading || isNotSystemLanguage\"\n-                v-tooltip=\"createTooltip\"\n                 size=\"small\"\n                 @click=\"onAddNewProfile\"\n             >"
        },
        {
          "filename": "src/Core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileDefinition.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -41,7 +41,7 @@ protected function defineFields(): FieldCollection\n             (new DateTimeField('expire_date', 'expireDate'))->addFlags(new Required()),\n             new IntField('size', 'size'),\n             new OneToOneAssociationField('log', 'id', 'file_id', ImportExportLogDefinition::class, false),\n-            (new StringField('access_token', 'accessToken'))->addFlags(new Required()),\n+            new StringField('access_token', 'accessToken'),\n         ]);\n     }\n }"
        },
        {
          "filename": "src/Core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileEntity.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -37,7 +37,7 @@ class ImportExportFileEntity extends Entity\n     protected $log;\n \n     /**\n-     * @var string\n+     * @var string|null\n      */\n     protected $accessToken;\n \n@@ -91,12 +91,12 @@ public function setLog(ImportExportLogEntity $log): void\n         $this->log = $log;\n     }\n \n-    public function getAccessToken(): string\n+    public function getAccessToken(): ?string\n     {\n         return $this->accessToken;\n     }\n \n-    public function setAccessToken(string $accessToken): void\n+    public function setAccessToken(?string $accessToken): void\n     {\n         $this->accessToken = $accessToken;\n     }"
        },
        {
          "filename": "src/Core/Content/ImportExport/Controller/ImportExportActionController.php",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -154,6 +154,17 @@ public function process(Request $request, Context $context): JsonResponse\n         return new JsonResponse(['progress' => $progress->jsonSerialize()]);\n     }\n \n+    /**\n+     * @Since(\"6.4.3.1\")\n+     * @Route(\"/api/_action/import-export/file/prepare-download/{fileId}\", name=\"api.action.import_export.file.prepare-download\", methods={\"POST\"})\n+     */\n+    public function prepareDownload(string $fileId, Context $context): Response\n+    {\n+        $token = $this->downloadService->regenerateToken($context, $fileId);\n+\n+        return new JsonResponse(['accessToken' => $token]);\n+    }\n+\n     /**\n      * @Since(\"6.0.0.0\")\n      * @Route(\"/api/_action/import-export/file/download\", name=\"api.action.import_export.file.download\", defaults={\"auth_required\"=false}, methods={\"GET\"})"
        },
        {
          "filename": "src/Core/Content/ImportExport/Service/DownloadService.php",
          "status": "modified",
          "additions": 28,
          "deletions": 11,
          "patch": "@@ -18,37 +18,43 @@\n  */\n class DownloadService\n {\n-    /**\n-     * @var FilesystemInterface\n-     */\n-    private $filesystem;\n+    private FilesystemInterface $filesystem;\n \n-    /**\n-     * @var EntityRepositoryInterface\n-     */\n-    private $fileRepository;\n+    private EntityRepositoryInterface $fileRepository;\n \n     public function __construct(FilesystemInterface $filesystem, EntityRepositoryInterface $fileRepository)\n     {\n         $this->filesystem = $filesystem;\n         $this->fileRepository = $fileRepository;\n     }\n \n-    public function regenerateToken(Context $context, string $fileId): void\n+    public function regenerateToken(Context $context, string $fileId): string\n     {\n+        $token = ImportExportFileEntity::generateAccessToken();\n+\n         $this->fileRepository->update(\n-            [['id' => $fileId, 'accessToken' => ImportExportFileEntity::generateAccessToken()]],\n+            [['id' => $fileId, 'accessToken' => $token]],\n             $context\n         );\n+\n+        return $token;\n     }\n \n     public function createFileResponse(Context $context, string $fileId, string $accessToken): Response\n     {\n         $entity = $this->findFile($context, $fileId);\n-        if ($entity->getAccessToken() !== $accessToken) {\n+\n+        $fileAccessToken = (string) $entity->getAccessToken();\n+\n+        if ($fileAccessToken === '' || $entity->getAccessToken() !== $accessToken || !$this->isModifiedRecently($entity)) {\n             throw new InvalidFileAccessTokenException();\n         }\n \n+        $this->fileRepository->update(\n+            [['id' => $fileId, 'accessToken' => null]],\n+            $context\n+        );\n+\n         $headers = [\n             'Content-Disposition' => HeaderUtils::makeDisposition(\n                 'attachment',\n@@ -78,4 +84,15 @@ private function findFile(Context $context, string $fileId): ImportExportFileEnt\n \n         return $entity;\n     }\n+\n+    private function isModifiedRecently(ImportExportFileEntity $entity): bool\n+    {\n+        if ($entity->getUpdatedAt() === null) {\n+            return false;\n+        }\n+\n+        $diff = time() - $entity->getUpdatedAt()->getTimestamp();\n+\n+        return $diff < 300;\n+    }\n }"
        },
        {
          "filename": "src/Core/Content/ImportExport/Service/ImportExportService.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -219,7 +219,7 @@ private function storeFile(Context $context, \\DateTimeInterface $expireDate, ?st\n             'path' => $path,\n             'size' => $this->filesystem->getSize($path),\n             'expireDate' => $expireDate,\n-            'accessToken' => ImportExportFileEntity::generateAccessToken(),\n+            'accessToken' => null,\n         ];\n \n         $this->fileRepository->create([$fileData], $context);"
        },
        {
          "filename": "src/Core/Content/Test/ImportExport/Service/DownloadServiceTest.php",
          "status": "modified",
          "additions": 69,
          "deletions": 2,
          "patch": "@@ -2,8 +2,11 @@\n \n namespace Shopware\\Core\\Content\\Test\\ImportExport\\Service;\n \n+use Doctrine\\DBAL\\Connection;\n use PHPUnit\\Framework\\TestCase;\n+use Shopware\\Core\\Content\\ImportExport\\Exception\\InvalidFileAccessTokenException;\n use Shopware\\Core\\Content\\ImportExport\\Service\\DownloadService;\n+use Shopware\\Core\\Defaults;\n use Shopware\\Core\\Framework\\Context;\n use Shopware\\Core\\Framework\\Test\\TestCaseBase\\IntegrationTestBehaviour;\n use Shopware\\Core\\Framework\\Uuid\\Uuid;\n@@ -24,18 +27,82 @@ public function testUtf8Filename(): void\n             'originalName' => $asciiName . ' \u00f6\u00e4\u00fc\u00df',\n             'path' => 'test.csv',\n             'expireDate' => new \\DateTime(),\n-            'accessToken' => 'token',\n         ];\n         $filesystem->put($fileData['path'], $fileData['originalName']);\n         $context = Context::createDefaultContext();\n         $fileRepository->create([$fileData], $context);\n \n         $downloadService = new DownloadService($filesystem, $fileRepository);\n+        $accessToken = $downloadService->regenerateToken($context, $fileData['id']);\n \n-        $response = $downloadService->createFileResponse($context, $fileData['id'], 'token');\n+        $response = $downloadService->createFileResponse($context, $fileData['id'], $accessToken);\n         static::assertStringContainsString($asciiName, $response->headers->get('Content-Disposition'));\n \n         $response->sendContent();\n         $this->expectOutputString($fileData['originalName']);\n     }\n+\n+    public function testDownloadWithInvalidAccessToken(): void\n+    {\n+        $filesystem = $this->getContainer()->get('shopware.filesystem.private');\n+        $fileRepository = $this->getContainer()->get('import_export_file.repository');\n+\n+        $asciiName = 'Name with non-ascii chars';\n+\n+        $fileData = [\n+            'id' => Uuid::randomHex(),\n+            'originalName' => $asciiName . ' \u00f6\u00e4\u00fc\u00df',\n+            'path' => 'test.csv',\n+            'expireDate' => new \\DateTime(),\n+            'accessToken' => 'token',\n+        ];\n+        $filesystem->put($fileData['path'], $fileData['originalName']);\n+        $context = Context::createDefaultContext();\n+        $fileRepository->create([$fileData], $context);\n+\n+        $downloadService = new DownloadService($filesystem, $fileRepository);\n+\n+        static::expectException(InvalidFileAccessTokenException::class);\n+\n+        $downloadService->createFileResponse($context, $fileData['id'], 'token');\n+    }\n+\n+    public function testDownloadWithExpiredAccessToken(): void\n+    {\n+        $filesystem = $this->getContainer()->get('shopware.filesystem.private');\n+        $fileRepository = $this->getContainer()->get('import_export_file.repository');\n+\n+        $asciiName = 'Name with non-ascii chars';\n+\n+        $fileData = [\n+            'id' => Uuid::randomHex(),\n+            'originalName' => $asciiName . ' \u00f6\u00e4\u00fc\u00df',\n+            'path' => 'test.csv',\n+            'expireDate' => new \\DateTime(),\n+            'accessToken' => 'token',\n+        ];\n+        $filesystem->put($fileData['path'], $fileData['originalName']);\n+        $context = Context::createDefaultContext();\n+        $fileRepository->create([$fileData], $context);\n+\n+        $downloadService = new DownloadService($filesystem, $fileRepository);\n+\n+        $validToken = $downloadService->regenerateToken($context, $fileData['id']);\n+\n+        // Expire it\n+        $connection = $this->getContainer()->get(Connection::class);\n+        $connection->update(\n+            'import_export_file',\n+            [\n+                'updated_at' => date(Defaults::STORAGE_DATE_TIME_FORMAT, strtotime('-6minutes')),\n+            ],\n+            [\n+                'id' => Uuid::fromHexToBytes($fileData['id']),\n+            ]\n+        );\n+\n+        static::expectException(InvalidFileAccessTokenException::class);\n+\n+        $downloadService->createFileResponse($context, $fileData['id'], $validToken);\n+    }\n }"
        },
        {
          "filename": "src/Core/Migration/Migration1627540693MakeAccessTokenNullable.php",
          "status": "added",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -0,0 +1,10 @@\n+<?php declare(strict_types=1);\n+\n+namespace Shopware\\Core\\Migration;\n+\n+/**\n+ * @deprecated tag:v6.5.0 - Will be deleted. Migrations are now namespaced by major version\n+ */\n+class Migration1627540693MakeAccessTokenNullable extends \\Shopware\\Core\\Migration\\V6_4\\Migration1627540693MakeAccessTokenNullable\n+{\n+}"
        },
        {
          "filename": "src/Core/Migration/Test/Migration1627540693MakeAccessTokenNullableTest.php",
          "status": "added",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -0,0 +1,37 @@\n+<?php declare(strict_types=1);\n+\n+namespace Shopware\\Core\\Migration\\Test;\n+\n+use Doctrine\\DBAL\\Connection;\n+use PHPUnit\\Framework\\TestCase;\n+use Shopware\\Core\\Framework\\Test\\TestCaseBase\\KernelTestBehaviour;\n+use Shopware\\Core\\Migration\\V6_4\\Migration1627540693MakeAccessTokenNullable;\n+\n+class Migration1627540693MakeAccessTokenNullableTest extends TestCase\n+{\n+    use KernelTestBehaviour;\n+\n+    public function testMigrate(): void\n+    {\n+        $connection = $this->getContainer()->get(Connection::class);\n+\n+        // Make it not nullable\n+        $connection->executeStatement('ALTER TABLE `import_export_file` CHANGE `access_token` `access_token` varchar(255) COLLATE \\'utf8mb4_unicode_ci\\' NOT NULL AFTER `created_at`;');\n+\n+        $m = new Migration1627540693MakeAccessTokenNullable();\n+        $m->update($connection);\n+\n+        $columns = $connection->getSchemaManager()->listTableColumns('import_export_file');\n+\n+        $foundColumn = false;\n+        foreach ($columns as $column) {\n+            if ($column->getName() === 'access_token') {\n+                $foundColumn = true;\n+\n+                static::assertFalse($column->getNotnull());\n+            }\n+        }\n+\n+        static::assertTrue($foundColumn, 'Could not find column access_token');\n+    }\n+}"
        },
        {
          "filename": "src/Core/Migration/V6_4/Migration1627540693MakeAccessTokenNullable.php",
          "status": "added",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -0,0 +1,23 @@\n+<?php declare(strict_types=1);\n+\n+namespace Shopware\\Core\\Migration\\V6_4;\n+\n+use Doctrine\\DBAL\\Connection;\n+use Shopware\\Core\\Framework\\Migration\\MigrationStep;\n+\n+class Migration1627540693MakeAccessTokenNullable extends MigrationStep\n+{\n+    public function getCreationTimestamp(): int\n+    {\n+        return 1627540693;\n+    }\n+\n+    public function update(Connection $connection): void\n+    {\n+        $connection->executeStatement('ALTER TABLE `import_export_file` CHANGE `access_token` `access_token` varchar(255) COLLATE \\'utf8mb4_unicode_ci\\' NULL AFTER `created_at`;');\n+    }\n+\n+    public function updateDestructive(Connection $connection): void\n+    {\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 13,
        "max_directory_depth": 10
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a87d38f4e4ab920afb728d396a4fdff6dd1ed893",
            "date": "2025-01-14T12:59:02Z",
            "author_login": "Bird87ZA"
          },
          {
            "sha": "e957d7150a872944c008a7169bf5f8d97889b355",
            "date": "2025-01-14T11:55:14Z",
            "author_login": "shyim"
          },
          {
            "sha": "02af717865eb1d240850314ad103fc276dbb56f8",
            "date": "2025-01-14T10:50:49Z",
            "author_login": "akf-bw"
          },
          {
            "sha": "17723a093f9cf2c4617a471091ef4607da1d8769",
            "date": "2025-01-14T10:29:25Z",
            "author_login": "jleifeld"
          },
          {
            "sha": "9b977d57e54a9275be40804a7dd7cca05c0f748c",
            "date": "2025-01-14T10:24:01Z",
            "author_login": "frobel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-532",
    "description": "Shopware is an open source eCommerce platform. Versions prior to 6.4.3.1 contain a vulnerability involving an insecure direct object reference of log files of the Import/Export feature. Version 6.4.3.1 contains a patch. As workarounds for older versions of 6.1, 6.2, and 6.3, corresponding security measures are also available via a plugin.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-08-16T22:15:08.130",
    "last_modified": "2024-11-21T06:15:45.713",
    "fix_date": "2021-07-29T09:15:25Z"
  },
  "references": [
    {
      "url": "https://github.com/shopware/platform/commit/a9f52abb6eb503654c492b6b2076f8d924831fec",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/security/advisories/GHSA-54gp-qff8-946c",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/commit/a9f52abb6eb503654c492b6b2076f8d924831fec",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopware/platform/security/advisories/GHSA-54gp-qff8-946c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:05.087730",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "shopware",
    "owner": "shopware",
    "created_at": "2018-05-03T13:00:31Z",
    "updated_at": "2025-01-14T12:59:07Z",
    "pushed_at": "2025-01-14T13:28:13Z",
    "size": 289410,
    "stars": 2894,
    "forks": 1042,
    "open_issues": 911,
    "watchers": 2894,
    "has_security_policy": false,
    "default_branch": "trunk",
    "protected_branches": [
      "6.4",
      "6.5.x"
    ],
    "languages": {
      "PHP": 33467815,
      "JavaScript": 12727064,
      "Twig": 5566016,
      "TypeScript": 1850093,
      "SCSS": 1033491,
      "CSS": 135217,
      "Vue": 32178,
      "Shell": 30871,
      "HTML": 26015,
      "Nix": 4972,
      "Groovy": 3900,
      "Dockerfile": 2862,
      "Smarty": 1216
    },
    "commit_activity": {
      "total_commits_last_year": 4219,
      "avg_commits_per_week": 81.13461538461539,
      "days_active_last_year": 285
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:37:45.571181"
  }
}