{
  "cve_id": "CVE-2021-3772",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "32f8807a48ae55be0e76880cfe8607a18b5bb0df",
    "related_commits": [
      "32f8807a48ae55be0e76880cfe8607a18b5bb0df",
      "32f8807a48ae55be0e76880cfe8607a18b5bb0df"
    ],
    "patch_url": "https://github.com/torvalds/linux/commit/32f8807a48ae55be0e76880cfe8607a18b5bb0df.patch",
    "fix_commit_details": {
      "sha": "32f8807a48ae55be0e76880cfe8607a18b5bb0df",
      "commit_date": "2021-10-22T19:36:47Z",
      "author": {
        "login": "kuba-moo",
        "type": "User",
        "stats": {
          "total_commits": 3971,
          "average_weekly_commits": 3.339781328847771,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 254
        }
      },
      "commit_message": {
        "title": "Merge branch 'sctp-enhancements-for-the-verification-tag'",
        "length": 1949,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 139,
        "additions": 85,
        "deletions": 54
      },
      "files": [
        {
          "filename": "net/sctp/sm_statefuns.c",
          "status": "modified",
          "additions": 85,
          "deletions": 54,
          "patch": "@@ -156,6 +156,12 @@ static enum sctp_disposition __sctp_sf_do_9_1_abort(\n \t\t\t\t\tvoid *arg,\n \t\t\t\t\tstruct sctp_cmd_seq *commands);\n \n+static enum sctp_disposition\n+__sctp_sf_do_9_2_reshutack(struct net *net, const struct sctp_endpoint *ep,\n+\t\t\t   const struct sctp_association *asoc,\n+\t\t\t   const union sctp_subtype type, void *arg,\n+\t\t\t   struct sctp_cmd_seq *commands);\n+\n /* Small helper function that checks if the chunk length\n  * is of the appropriate length.  The 'required_length' argument\n  * is set to be the size of a specific chunk we are testing.\n@@ -337,6 +343,14 @@ enum sctp_disposition sctp_sf_do_5_1B_init(struct net *net,\n \tif (!chunk->singleton)\n \t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n \n+\t/* Make sure that the INIT chunk has a valid length.\n+\t * Normally, this would cause an ABORT with a Protocol Violation\n+\t * error, but since we don't have an association, we'll\n+\t * just discard the packet.\n+\t */\n+\tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_init_chunk)))\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n+\n \t/* If the packet is an OOTB packet which is temporarily on the\n \t * control endpoint, respond with an ABORT.\n \t */\n@@ -351,14 +365,6 @@ enum sctp_disposition sctp_sf_do_5_1B_init(struct net *net,\n \tif (chunk->sctp_hdr->vtag != 0)\n \t\treturn sctp_sf_tabort_8_4_8(net, ep, asoc, type, arg, commands);\n \n-\t/* Make sure that the INIT chunk has a valid length.\n-\t * Normally, this would cause an ABORT with a Protocol Violation\n-\t * error, but since we don't have an association, we'll\n-\t * just discard the packet.\n-\t */\n-\tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_init_chunk)))\n-\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n-\n \t/* If the INIT is coming toward a closing socket, we'll send back\n \t * and ABORT.  Essentially, this catches the race of INIT being\n \t * backloged to the socket at the same time as the user issues close().\n@@ -704,6 +710,9 @@ enum sctp_disposition sctp_sf_do_5_1D_ce(struct net *net,\n \tstruct sock *sk;\n \tint error = 0;\n \n+\tif (asoc && !sctp_vtag_verify(chunk, asoc))\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n+\n \t/* If the packet is an OOTB packet which is temporarily on the\n \t * control endpoint, respond with an ABORT.\n \t */\n@@ -718,7 +727,8 @@ enum sctp_disposition sctp_sf_do_5_1D_ce(struct net *net,\n \t * in sctp_unpack_cookie().\n \t */\n \tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_chunkhdr)))\n-\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n+\t\treturn sctp_sf_violation_chunklen(net, ep, asoc, type, arg,\n+\t\t\t\t\t\t  commands);\n \n \t/* If the endpoint is not listening or if the number of associations\n \t * on the TCP-style socket exceed the max backlog, respond with an\n@@ -1524,20 +1534,16 @@ static enum sctp_disposition sctp_sf_do_unexpected_init(\n \tif (!chunk->singleton)\n \t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n \n+\t/* Make sure that the INIT chunk has a valid length. */\n+\tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_init_chunk)))\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n+\n \t/* 3.1 A packet containing an INIT chunk MUST have a zero Verification\n \t * Tag.\n \t */\n \tif (chunk->sctp_hdr->vtag != 0)\n \t\treturn sctp_sf_tabort_8_4_8(net, ep, asoc, type, arg, commands);\n \n-\t/* Make sure that the INIT chunk has a valid length.\n-\t * In this case, we generate a protocol violation since we have\n-\t * an association established.\n-\t */\n-\tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_init_chunk)))\n-\t\treturn sctp_sf_violation_chunklen(net, ep, asoc, type, arg,\n-\t\t\t\t\t\t  commands);\n-\n \tif (SCTP_INPUT_CB(chunk->skb)->encap_port != chunk->transport->encap_port)\n \t\treturn sctp_sf_new_encap_port(net, ep, asoc, type, arg, commands);\n \n@@ -1882,9 +1888,9 @@ static enum sctp_disposition sctp_sf_do_dupcook_a(\n \t * its peer.\n \t*/\n \tif (sctp_state(asoc, SHUTDOWN_ACK_SENT)) {\n-\t\tdisposition = sctp_sf_do_9_2_reshutack(net, ep, asoc,\n-\t\t\t\tSCTP_ST_CHUNK(chunk->chunk_hdr->type),\n-\t\t\t\tchunk, commands);\n+\t\tdisposition = __sctp_sf_do_9_2_reshutack(net, ep, asoc,\n+\t\t\t\t\t\t\t SCTP_ST_CHUNK(chunk->chunk_hdr->type),\n+\t\t\t\t\t\t\t chunk, commands);\n \t\tif (SCTP_DISPOSITION_NOMEM == disposition)\n \t\t\tgoto nomem;\n \n@@ -2202,9 +2208,11 @@ enum sctp_disposition sctp_sf_do_5_2_4_dupcook(\n \t * enough for the chunk header.  Cookie length verification is\n \t * done later.\n \t */\n-\tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_chunkhdr)))\n-\t\treturn sctp_sf_violation_chunklen(net, ep, asoc, type, arg,\n-\t\t\t\t\t\t  commands);\n+\tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_chunkhdr))) {\n+\t\tif (!sctp_vtag_verify(chunk, asoc))\n+\t\t\tasoc = NULL;\n+\t\treturn sctp_sf_violation_chunklen(net, ep, asoc, type, arg, commands);\n+\t}\n \n \t/* \"Decode\" the chunk.  We have no optional parameters so we\n \t * are in good shape.\n@@ -2341,7 +2349,7 @@ enum sctp_disposition sctp_sf_shutdown_pending_abort(\n \t */\n \tif (SCTP_ADDR_DEL ==\n \t\t    sctp_bind_addr_state(&asoc->base.bind_addr, &chunk->dest))\n-\t\treturn sctp_sf_discard_chunk(net, ep, asoc, type, arg, commands);\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n \n \tif (!sctp_err_chunk_valid(chunk))\n \t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n@@ -2387,7 +2395,7 @@ enum sctp_disposition sctp_sf_shutdown_sent_abort(\n \t */\n \tif (SCTP_ADDR_DEL ==\n \t\t    sctp_bind_addr_state(&asoc->base.bind_addr, &chunk->dest))\n-\t\treturn sctp_sf_discard_chunk(net, ep, asoc, type, arg, commands);\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n \n \tif (!sctp_err_chunk_valid(chunk))\n \t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n@@ -2657,7 +2665,7 @@ enum sctp_disposition sctp_sf_do_9_1_abort(\n \t */\n \tif (SCTP_ADDR_DEL ==\n \t\t    sctp_bind_addr_state(&asoc->base.bind_addr, &chunk->dest))\n-\t\treturn sctp_sf_discard_chunk(net, ep, asoc, type, arg, commands);\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n \n \tif (!sctp_err_chunk_valid(chunk))\n \t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n@@ -2970,13 +2978,11 @@ enum sctp_disposition sctp_sf_do_9_2_shut_ctsn(\n  * that belong to this association, it should discard the INIT chunk and\n  * retransmit the SHUTDOWN ACK chunk.\n  */\n-enum sctp_disposition sctp_sf_do_9_2_reshutack(\n-\t\t\t\t\tstruct net *net,\n-\t\t\t\t\tconst struct sctp_endpoint *ep,\n-\t\t\t\t\tconst struct sctp_association *asoc,\n-\t\t\t\t\tconst union sctp_subtype type,\n-\t\t\t\t\tvoid *arg,\n-\t\t\t\t\tstruct sctp_cmd_seq *commands)\n+static enum sctp_disposition\n+__sctp_sf_do_9_2_reshutack(struct net *net, const struct sctp_endpoint *ep,\n+\t\t\t   const struct sctp_association *asoc,\n+\t\t\t   const union sctp_subtype type, void *arg,\n+\t\t\t   struct sctp_cmd_seq *commands)\n {\n \tstruct sctp_chunk *chunk = arg;\n \tstruct sctp_chunk *reply;\n@@ -3010,6 +3016,26 @@ enum sctp_disposition sctp_sf_do_9_2_reshutack(\n \treturn SCTP_DISPOSITION_NOMEM;\n }\n \n+enum sctp_disposition\n+sctp_sf_do_9_2_reshutack(struct net *net, const struct sctp_endpoint *ep,\n+\t\t\t const struct sctp_association *asoc,\n+\t\t\t const union sctp_subtype type, void *arg,\n+\t\t\t struct sctp_cmd_seq *commands)\n+{\n+\tstruct sctp_chunk *chunk = arg;\n+\n+\tif (!chunk->singleton)\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n+\n+\tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_init_chunk)))\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n+\n+\tif (chunk->sctp_hdr->vtag != 0)\n+\t\treturn sctp_sf_tabort_8_4_8(net, ep, asoc, type, arg, commands);\n+\n+\treturn __sctp_sf_do_9_2_reshutack(net, ep, asoc, type, arg, commands);\n+}\n+\n /*\n  * sctp_sf_do_ecn_cwr\n  *\n@@ -3662,6 +3688,9 @@ enum sctp_disposition sctp_sf_ootb(struct net *net,\n \n \tSCTP_INC_STATS(net, SCTP_MIB_OUTOFBLUES);\n \n+\tif (asoc && !sctp_vtag_verify(chunk, asoc))\n+\t\tasoc = NULL;\n+\n \tch = (struct sctp_chunkhdr *)chunk->chunk_hdr;\n \tdo {\n \t\t/* Report violation if the chunk is less then minimal */\n@@ -3777,12 +3806,6 @@ static enum sctp_disposition sctp_sf_shut_8_4_5(\n \n \tSCTP_INC_STATS(net, SCTP_MIB_OUTCTRLCHUNKS);\n \n-\t/* If the chunk length is invalid, we don't want to process\n-\t * the reset of the packet.\n-\t */\n-\tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_chunkhdr)))\n-\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n-\n \t/* We need to discard the rest of the packet to prevent\n \t * potential boomming attacks from additional bundled chunks.\n \t * This is documented in SCTP Threats ID.\n@@ -3810,6 +3833,9 @@ enum sctp_disposition sctp_sf_do_8_5_1_E_sa(struct net *net,\n {\n \tstruct sctp_chunk *chunk = arg;\n \n+\tif (!sctp_vtag_verify(chunk, asoc))\n+\t\tasoc = NULL;\n+\n \t/* Make sure that the SHUTDOWN_ACK chunk has a valid length. */\n \tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_chunkhdr)))\n \t\treturn sctp_sf_violation_chunklen(net, ep, asoc, type, arg,\n@@ -3845,6 +3871,11 @@ enum sctp_disposition sctp_sf_do_asconf(struct net *net,\n \t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n \t}\n \n+\t/* Make sure that the ASCONF ADDIP chunk has a valid length.  */\n+\tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_addip_chunk)))\n+\t\treturn sctp_sf_violation_chunklen(net, ep, asoc, type, arg,\n+\t\t\t\t\t\t  commands);\n+\n \t/* ADD-IP: Section 4.1.1\n \t * This chunk MUST be sent in an authenticated way by using\n \t * the mechanism defined in [I-D.ietf-tsvwg-sctp-auth]. If this chunk\n@@ -3853,13 +3884,7 @@ enum sctp_disposition sctp_sf_do_asconf(struct net *net,\n \t */\n \tif (!asoc->peer.asconf_capable ||\n \t    (!net->sctp.addip_noauth && !chunk->auth))\n-\t\treturn sctp_sf_discard_chunk(net, ep, asoc, type, arg,\n-\t\t\t\t\t     commands);\n-\n-\t/* Make sure that the ASCONF ADDIP chunk has a valid length.  */\n-\tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_addip_chunk)))\n-\t\treturn sctp_sf_violation_chunklen(net, ep, asoc, type, arg,\n-\t\t\t\t\t\t  commands);\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n \n \thdr = (struct sctp_addiphdr *)chunk->skb->data;\n \tserial = ntohl(hdr->serial);\n@@ -3988,6 +4013,12 @@ enum sctp_disposition sctp_sf_do_asconf_ack(struct net *net,\n \t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n \t}\n \n+\t/* Make sure that the ADDIP chunk has a valid length.  */\n+\tif (!sctp_chunk_length_valid(asconf_ack,\n+\t\t\t\t     sizeof(struct sctp_addip_chunk)))\n+\t\treturn sctp_sf_violation_chunklen(net, ep, asoc, type, arg,\n+\t\t\t\t\t\t  commands);\n+\n \t/* ADD-IP, Section 4.1.2:\n \t * This chunk MUST be sent in an authenticated way by using\n \t * the mechanism defined in [I-D.ietf-tsvwg-sctp-auth]. If this chunk\n@@ -3996,14 +4027,7 @@ enum sctp_disposition sctp_sf_do_asconf_ack(struct net *net,\n \t */\n \tif (!asoc->peer.asconf_capable ||\n \t    (!net->sctp.addip_noauth && !asconf_ack->auth))\n-\t\treturn sctp_sf_discard_chunk(net, ep, asoc, type, arg,\n-\t\t\t\t\t     commands);\n-\n-\t/* Make sure that the ADDIP chunk has a valid length.  */\n-\tif (!sctp_chunk_length_valid(asconf_ack,\n-\t\t\t\t     sizeof(struct sctp_addip_chunk)))\n-\t\treturn sctp_sf_violation_chunklen(net, ep, asoc, type, arg,\n-\t\t\t\t\t\t  commands);\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n \n \taddip_hdr = (struct sctp_addiphdr *)asconf_ack->skb->data;\n \trcvd_serial = ntohl(addip_hdr->serial);\n@@ -4575,6 +4599,9 @@ enum sctp_disposition sctp_sf_discard_chunk(struct net *net,\n {\n \tstruct sctp_chunk *chunk = arg;\n \n+\tif (asoc && !sctp_vtag_verify(chunk, asoc))\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n+\n \t/* Make sure that the chunk has a valid length.\n \t * Since we don't know the chunk type, we use a general\n \t * chunkhdr structure to make a comparison.\n@@ -4642,6 +4669,9 @@ enum sctp_disposition sctp_sf_violation(struct net *net,\n {\n \tstruct sctp_chunk *chunk = arg;\n \n+\tif (!sctp_vtag_verify(chunk, asoc))\n+\t\treturn sctp_sf_pdiscard(net, ep, asoc, type, arg, commands);\n+\n \t/* Make sure that the chunk has a valid length. */\n \tif (!sctp_chunk_length_valid(chunk, sizeof(struct sctp_chunkhdr)))\n \t\treturn sctp_sf_violation_chunklen(net, ep, asoc, type, arg,\n@@ -6348,6 +6378,7 @@ static struct sctp_packet *sctp_ootb_pkt_new(\n \t\t * yet.\n \t\t */\n \t\tswitch (chunk->chunk_hdr->type) {\n+\t\tcase SCTP_CID_INIT:\n \t\tcase SCTP_CID_INIT_ACK:\n \t\t{\n \t\t\tstruct sctp_initack_chunk *initack;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c3812b15000cc5b7b17c7238f8b12f6a22df0b1d",
            "date": "2025-01-14T18:07:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "79a1d390f879563119bf2848b621bc7eed228c7d",
            "date": "2025-01-14T17:54:57Z",
            "author_login": "torvalds"
          },
          {
            "sha": "c45323b7560ec87c37c729b703c86ee65f136d75",
            "date": "2025-01-13T17:03:18Z",
            "author_login": "torvalds"
          },
          {
            "sha": "34c8e74cd6667ef5da90d448a1af702c4b873bd3",
            "date": "2025-01-13T08:52:08Z",
            "author_login": "YageGeng"
          },
          {
            "sha": "cbc5dde0a461240046e8a41c43d7c3b76d5db952",
            "date": "2025-01-10T15:28:21Z",
            "author_login": "rikvanriel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:H",
    "cwe_id": "CWE-354",
    "description": "A flaw was found in the Linux SCTP stack. A blind attacker may be able to kill an existing SCTP association through invalid chunks if the attacker knows the IP-addresses and port numbers being used and the attacker can send packets with spoofed IP addresses.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-03-02T23:15:09.127",
    "last_modified": "2024-11-21T06:22:23.343",
    "fix_date": "2021-10-22T19:36:47Z"
  },
  "references": [
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2000694",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=32f8807a48ae55be0e76880cfe8607a18b5bb0df",
      "source": "secalert@redhat.com",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/32f8807a48ae55be0e76880cfe8607a18b5bb0df",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/03/msg00012.html",
      "source": "secalert@redhat.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20221007-0001/",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://ubuntu.com/security/CVE-2021-3772",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5096",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2000694",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=32f8807a48ae55be0e76880cfe8607a18b5bb0df",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/32f8807a48ae55be0e76880cfe8607a18b5bb0df",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/03/msg00012.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20221007-0001/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://ubuntu.com/security/CVE-2021-3772",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2022/dsa-5096",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.769570",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}