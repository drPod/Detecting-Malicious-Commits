{
  "cve_id": "CVE-2021-38203",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "1cb3db1cf383a3c7dbda1aa0ce748b0958759947",
    "related_commits": [
      "1cb3db1cf383a3c7dbda1aa0ce748b0958759947",
      "1cb3db1cf383a3c7dbda1aa0ce748b0958759947"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "1cb3db1cf383a3c7dbda1aa0ce748b0958759947",
      "commit_date": "2021-06-29T13:43:05Z",
      "author": {
        "login": "fdmanana",
        "type": "User",
        "stats": {
          "total_commits": 1504,
          "average_weekly_commits": 1.2628043660789252,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 415
        }
      },
      "commit_message": {
        "title": "btrfs: fix deadlock with concurrent chunk allocations involving system chunks",
        "length": 3763,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 70,
        "additions": 1,
        "deletions": 69
      },
      "files": [
        {
          "filename": "fs/btrfs/block-group.c",
          "status": "modified",
          "additions": 1,
          "deletions": 57,
          "patch": "@@ -3377,7 +3377,6 @@ static u64 get_profile_num_devs(struct btrfs_fs_info *fs_info, u64 type)\n  */\n void check_system_chunk(struct btrfs_trans_handle *trans, u64 type)\n {\n-\tstruct btrfs_transaction *cur_trans = trans->transaction;\n \tstruct btrfs_fs_info *fs_info = trans->fs_info;\n \tstruct btrfs_space_info *info;\n \tu64 left;\n@@ -3392,7 +3391,6 @@ void check_system_chunk(struct btrfs_trans_handle *trans, u64 type)\n \tlockdep_assert_held(&fs_info->chunk_mutex);\n \n \tinfo = btrfs_find_space_info(fs_info, BTRFS_BLOCK_GROUP_SYSTEM);\n-again:\n \tspin_lock(&info->lock);\n \tleft = info->total_bytes - btrfs_space_info_used(info, true);\n \tspin_unlock(&info->lock);\n@@ -3411,58 +3409,6 @@ void check_system_chunk(struct btrfs_trans_handle *trans, u64 type)\n \n \tif (left < thresh) {\n \t\tu64 flags = btrfs_system_alloc_profile(fs_info);\n-\t\tu64 reserved = atomic64_read(&cur_trans->chunk_bytes_reserved);\n-\n-\t\t/*\n-\t\t * If there's not available space for the chunk tree (system\n-\t\t * space) and there are other tasks that reserved space for\n-\t\t * creating a new system block group, wait for them to complete\n-\t\t * the creation of their system block group and release excess\n-\t\t * reserved space. We do this because:\n-\t\t *\n-\t\t * *) We can end up allocating more system chunks than necessary\n-\t\t *    when there are multiple tasks that are concurrently\n-\t\t *    allocating block groups, which can lead to exhaustion of\n-\t\t *    the system array in the superblock;\n-\t\t *\n-\t\t * *) If we allocate extra and unnecessary system block groups,\n-\t\t *    despite being empty for a long time, and possibly forever,\n-\t\t *    they end not being added to the list of unused block groups\n-\t\t *    because that typically happens only when deallocating the\n-\t\t *    last extent from a block group - which never happens since\n-\t\t *    we never allocate from them in the first place. The few\n-\t\t *    exceptions are when mounting a filesystem or running scrub,\n-\t\t *    which add unused block groups to the list of unused block\n-\t\t *    groups, to be deleted by the cleaner kthread.\n-\t\t *    And even when they are added to the list of unused block\n-\t\t *    groups, it can take a long time until they get deleted,\n-\t\t *    since the cleaner kthread might be sleeping or busy with\n-\t\t *    other work (deleting subvolumes, running delayed iputs,\n-\t\t *    defrag scheduling, etc);\n-\t\t *\n-\t\t * This is rare in practice, but can happen when too many tasks\n-\t\t * are allocating blocks groups in parallel (via fallocate())\n-\t\t * and before the one that reserved space for a new system block\n-\t\t * group finishes the block group creation and releases the space\n-\t\t * reserved in excess (at btrfs_create_pending_block_groups()),\n-\t\t * other tasks end up here and see free system space temporarily\n-\t\t * not enough for updating the chunk tree.\n-\t\t *\n-\t\t * We unlock the chunk mutex before waiting for such tasks and\n-\t\t * lock it again after the wait, otherwise we would deadlock.\n-\t\t * It is safe to do so because allocating a system chunk is the\n-\t\t * first thing done while allocating a new block group.\n-\t\t */\n-\t\tif (reserved > trans->chunk_bytes_reserved) {\n-\t\t\tconst u64 min_needed = reserved - thresh;\n-\n-\t\t\tmutex_unlock(&fs_info->chunk_mutex);\n-\t\t\twait_event(cur_trans->chunk_reserve_wait,\n-\t\t\t   atomic64_read(&cur_trans->chunk_bytes_reserved) <=\n-\t\t\t   min_needed);\n-\t\t\tmutex_lock(&fs_info->chunk_mutex);\n-\t\t\tgoto again;\n-\t\t}\n \n \t\t/*\n \t\t * Ignore failure to create system chunk. We might end up not\n@@ -3477,10 +3423,8 @@ void check_system_chunk(struct btrfs_trans_handle *trans, u64 type)\n \t\tret = btrfs_block_rsv_add(fs_info->chunk_root,\n \t\t\t\t\t  &fs_info->chunk_block_rsv,\n \t\t\t\t\t  thresh, BTRFS_RESERVE_NO_FLUSH);\n-\t\tif (!ret) {\n-\t\t\tatomic64_add(thresh, &cur_trans->chunk_bytes_reserved);\n+\t\tif (!ret)\n \t\t\ttrans->chunk_bytes_reserved += thresh;\n-\t\t}\n \t}\n }\n "
        },
        {
          "filename": "fs/btrfs/transaction.c",
          "status": "modified",
          "additions": 0,
          "deletions": 5,
          "patch": "@@ -260,7 +260,6 @@ static inline int extwriter_counter_read(struct btrfs_transaction *trans)\n void btrfs_trans_release_chunk_metadata(struct btrfs_trans_handle *trans)\n {\n \tstruct btrfs_fs_info *fs_info = trans->fs_info;\n-\tstruct btrfs_transaction *cur_trans = trans->transaction;\n \n \tif (!trans->chunk_bytes_reserved)\n \t\treturn;\n@@ -269,8 +268,6 @@ void btrfs_trans_release_chunk_metadata(struct btrfs_trans_handle *trans)\n \n \tbtrfs_block_rsv_release(fs_info, &fs_info->chunk_block_rsv,\n \t\t\t\ttrans->chunk_bytes_reserved, NULL);\n-\tatomic64_sub(trans->chunk_bytes_reserved, &cur_trans->chunk_bytes_reserved);\n-\tcond_wake_up(&cur_trans->chunk_reserve_wait);\n \ttrans->chunk_bytes_reserved = 0;\n }\n \n@@ -386,8 +383,6 @@ static noinline int join_transaction(struct btrfs_fs_info *fs_info,\n \tspin_lock_init(&cur_trans->dropped_roots_lock);\n \tINIT_LIST_HEAD(&cur_trans->releasing_ebs);\n \tspin_lock_init(&cur_trans->releasing_ebs_lock);\n-\tatomic64_set(&cur_trans->chunk_bytes_reserved, 0);\n-\tinit_waitqueue_head(&cur_trans->chunk_reserve_wait);\n \tlist_add_tail(&cur_trans->list, &fs_info->trans_list);\n \textent_io_tree_init(fs_info, &cur_trans->dirty_pages,\n \t\t\tIO_TREE_TRANS_DIRTY_PAGES, fs_info->btree_inode);"
        },
        {
          "filename": "fs/btrfs/transaction.h",
          "status": "modified",
          "additions": 0,
          "deletions": 7,
          "patch": "@@ -96,13 +96,6 @@ struct btrfs_transaction {\n \n \tspinlock_t releasing_ebs_lock;\n \tstruct list_head releasing_ebs;\n-\n-\t/*\n-\t * The number of bytes currently reserved, by all transaction handles\n-\t * attached to this transaction, for metadata extents of the chunk tree.\n-\t */\n-\tatomic64_t chunk_bytes_reserved;\n-\twait_queue_head_t chunk_reserve_wait;\n };\n \n #define __TRANS_FREEZABLE\t(1U << 0)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-667",
    "description": "btrfs in the Linux kernel before 5.13.4 allows attackers to cause a denial of service (deadlock) via processes that trigger allocation of new system chunks during times when there is a shortage of free space in the system space_info.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-08-08T20:15:07.217",
    "last_modified": "2024-11-21T06:16:39.090",
    "fix_date": "2021-06-29T13:43:05Z"
  },
  "references": [
    {
      "url": "https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.13.4",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/1cb3db1cf383a3c7dbda1aa0ce748b0958759947",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20210902-0010/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.13.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/1cb3db1cf383a3c7dbda1aa0ce748b0958759947",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20210902-0010/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:02.369612",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}