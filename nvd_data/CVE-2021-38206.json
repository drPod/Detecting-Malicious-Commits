{
  "cve_id": "CVE-2021-38206",
  "github_data": {
    "repository": "torvalds/linux",
    "fix_commit": "bddc0c411a45d3718ac535a070f349be8eca8d48",
    "related_commits": [
      "bddc0c411a45d3718ac535a070f349be8eca8d48",
      "bddc0c411a45d3718ac535a070f349be8eca8d48"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "bddc0c411a45d3718ac535a070f349be8eca8d48",
      "commit_date": "2021-05-30T13:32:26Z",
      "author": {
        "login": "vanhoefm",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "mac80211: Fix NULL ptr deref for injected rate info",
        "length": 1744,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 59,
        "additions": 42,
        "deletions": 17
      },
      "files": [
        {
          "filename": "include/net/mac80211.h",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -6392,7 +6392,12 @@ bool ieee80211_tx_prepare_skb(struct ieee80211_hw *hw,\n \n /**\n  * ieee80211_parse_tx_radiotap - Sanity-check and parse the radiotap header\n- *\t\t\t\t of injected frames\n+ *\t\t\t\t of injected frames.\n+ *\n+ * To accurately parse and take into account rate and retransmission fields,\n+ * you must initialize the chandef field in the ieee80211_tx_info structure\n+ * of the skb before calling this function.\n+ *\n  * @skb: packet injected by userspace\n  * @dev: the &struct device of this 802.11 device\n  */"
        },
        {
          "filename": "net/mac80211/tx.c",
          "status": "modified",
          "additions": 36,
          "deletions": 16,
          "patch": "@@ -2014,6 +2014,26 @@ void ieee80211_xmit(struct ieee80211_sub_if_data *sdata,\n \tieee80211_tx(sdata, sta, skb, false);\n }\n \n+static bool ieee80211_validate_radiotap_len(struct sk_buff *skb)\n+{\n+\tstruct ieee80211_radiotap_header *rthdr =\n+\t\t(struct ieee80211_radiotap_header *)skb->data;\n+\n+\t/* check for not even having the fixed radiotap header part */\n+\tif (unlikely(skb->len < sizeof(struct ieee80211_radiotap_header)))\n+\t\treturn false; /* too short to be possibly valid */\n+\n+\t/* is it a header version we can trust to find length from? */\n+\tif (unlikely(rthdr->it_version))\n+\t\treturn false; /* only version 0 is supported */\n+\n+\t/* does the skb contain enough to deliver on the alleged length? */\n+\tif (unlikely(skb->len < ieee80211_get_radiotap_len(skb->data)))\n+\t\treturn false; /* skb too short for claimed rt header extent */\n+\n+\treturn true;\n+}\n+\n bool ieee80211_parse_tx_radiotap(struct sk_buff *skb,\n \t\t\t\t struct net_device *dev)\n {\n@@ -2022,8 +2042,6 @@ bool ieee80211_parse_tx_radiotap(struct sk_buff *skb,\n \tstruct ieee80211_radiotap_header *rthdr =\n \t\t(struct ieee80211_radiotap_header *) skb->data;\n \tstruct ieee80211_tx_info *info = IEEE80211_SKB_CB(skb);\n-\tstruct ieee80211_supported_band *sband =\n-\t\tlocal->hw.wiphy->bands[info->band];\n \tint ret = ieee80211_radiotap_iterator_init(&iterator, rthdr, skb->len,\n \t\t\t\t\t\t   NULL);\n \tu16 txflags;\n@@ -2036,17 +2054,8 @@ bool ieee80211_parse_tx_radiotap(struct sk_buff *skb,\n \tu8 vht_mcs = 0, vht_nss = 0;\n \tint i;\n \n-\t/* check for not even having the fixed radiotap header part */\n-\tif (unlikely(skb->len < sizeof(struct ieee80211_radiotap_header)))\n-\t\treturn false; /* too short to be possibly valid */\n-\n-\t/* is it a header version we can trust to find length from? */\n-\tif (unlikely(rthdr->it_version))\n-\t\treturn false; /* only version 0 is supported */\n-\n-\t/* does the skb contain enough to deliver on the alleged length? */\n-\tif (unlikely(skb->len < ieee80211_get_radiotap_len(skb->data)))\n-\t\treturn false; /* skb too short for claimed rt header extent */\n+\tif (!ieee80211_validate_radiotap_len(skb))\n+\t\treturn false;\n \n \tinfo->flags |= IEEE80211_TX_INTFL_DONT_ENCRYPT |\n \t\t       IEEE80211_TX_CTL_DONTFRAG;\n@@ -2186,6 +2195,9 @@ bool ieee80211_parse_tx_radiotap(struct sk_buff *skb,\n \t\treturn false;\n \n \tif (rate_found) {\n+\t\tstruct ieee80211_supported_band *sband =\n+\t\t\tlocal->hw.wiphy->bands[info->band];\n+\n \t\tinfo->control.flags |= IEEE80211_TX_CTRL_RATE_INJECT;\n \n \t\tfor (i = 0; i < IEEE80211_TX_MAX_RATES; i++) {\n@@ -2199,7 +2211,7 @@ bool ieee80211_parse_tx_radiotap(struct sk_buff *skb,\n \t\t} else if (rate_flags & IEEE80211_TX_RC_VHT_MCS) {\n \t\t\tieee80211_rate_set_vht(info->control.rates, vht_mcs,\n \t\t\t\t\t       vht_nss);\n-\t\t} else {\n+\t\t} else if (sband) {\n \t\t\tfor (i = 0; i < sband->n_bitrates; i++) {\n \t\t\t\tif (rate * 5 != sband->bitrates[i].bitrate)\n \t\t\t\t\tcontinue;\n@@ -2236,8 +2248,8 @@ netdev_tx_t ieee80211_monitor_start_xmit(struct sk_buff *skb,\n \tinfo->flags = IEEE80211_TX_CTL_REQ_TX_STATUS |\n \t\t      IEEE80211_TX_CTL_INJECTED;\n \n-\t/* Sanity-check and process the injection radiotap header */\n-\tif (!ieee80211_parse_tx_radiotap(skb, dev))\n+\t/* Sanity-check the length of the radiotap header */\n+\tif (!ieee80211_validate_radiotap_len(skb))\n \t\tgoto fail;\n \n \t/* we now know there is a radiotap header with a length we can use */\n@@ -2351,6 +2363,14 @@ netdev_tx_t ieee80211_monitor_start_xmit(struct sk_buff *skb,\n \tieee80211_select_queue_80211(sdata, skb, hdr);\n \tskb_set_queue_mapping(skb, ieee80211_ac_from_tid(skb->priority));\n \n+\t/*\n+\t * Process the radiotap header. This will now take into account the\n+\t * selected chandef above to accurately set injection rates and\n+\t * retransmissions.\n+\t */\n+\tif (!ieee80211_parse_tx_radiotap(skb, dev))\n+\t\tgoto fail_rcu;\n+\n \t/* remove the injection radiotap header */\n \tskb_pull(skb, len_rthdr);\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "aa22f4da2a46b484a257d167c67a2adc1b7aaf68",
            "date": "2025-01-26T00:23:38Z",
            "author_login": "torvalds"
          },
          {
            "sha": "eda061cccd146fcbe71051bb4aa5a8672b71216e",
            "date": "2025-01-26T00:19:10Z",
            "author_login": "torvalds"
          },
          {
            "sha": "08de7f9d4d39fd9aa5e747a13acc891214fa2d5f",
            "date": "2025-01-26T00:12:07Z",
            "author_login": "torvalds"
          },
          {
            "sha": "647d69605c70368d54fc012fce8a43e8e5955b04",
            "date": "2025-01-26T00:03:40Z",
            "author_login": "torvalds"
          },
          {
            "sha": "184a0997fb77f4a9527fc867fcd16806776c27ce",
            "date": "2025-01-25T23:59:46Z",
            "author_login": "torvalds"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "The mac80211 subsystem in the Linux kernel before 5.12.13, when a device supporting only 5 GHz is used, allows attackers to cause a denial of service (NULL pointer dereference in the radiotap parser) by injecting a frame with 802.11a rates.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-08-08T20:15:07.320",
    "last_modified": "2024-11-21T06:16:39.677",
    "fix_date": "2021-05-30T13:32:26Z"
  },
  "references": [
    {
      "url": "https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.12.13",
      "source": "cve@mitre.org",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/bddc0c411a45d3718ac535a070f349be8eca8d48",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.12.13",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/torvalds/linux/commit/bddc0c411a45d3718ac535a070f349be8eca8d48",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:02.370056",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "linux",
    "owner": "torvalds",
    "created_at": "2011-09-04T22:48:12Z",
    "updated_at": "2025-01-14T12:39:03Z",
    "pushed_at": "2025-01-13T17:27:04Z",
    "size": 5361369,
    "stars": 185823,
    "forks": 54743,
    "open_issues": 437,
    "watchers": 185823,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1326937103,
      "Assembly": 9568292,
      "Shell": 5072004,
      "Python": 2974128,
      "Makefile": 2713905,
      "Perl": 1253637,
      "Rust": 807711,
      "Roff": 202277,
      "C++": 173382,
      "SmPL": 165946,
      "Yacc": 127472,
      "Lex": 71321,
      "Awk": 69539,
      "Jinja": 30138,
      "UnrealScript": 16848,
      "Gherkin": 10172,
      "M4": 3329,
      "MATLAB": 2482,
      "sed": 2433,
      "Clojure": 2411,
      "XS": 1239,
      "RPC": 962
    },
    "commit_activity": {
      "total_commits_last_year": 46007,
      "avg_commits_per_week": 884.75,
      "days_active_last_year": 359
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T12:53:59.486675"
  }
}