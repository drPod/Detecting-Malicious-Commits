{
  "cve_id": "CVE-2021-3827",
  "github_data": {
    "repository": "keycloak/keycloak",
    "fix_commit": "44000caaf5051d7f218d1ad79573bd3d175cad0d",
    "related_commits": [
      "44000caaf5051d7f218d1ad79573bd3d175cad0d",
      "44000caaf5051d7f218d1ad79573bd3d175cad0d"
    ],
    "patch_url": "https://github.com/keycloak/keycloak/commit/44000caaf5051d7f218d1ad79573bd3d175cad0d.patch",
    "fix_commit_details": {
      "sha": "44000caaf5051d7f218d1ad79573bd3d175cad0d",
      "commit_date": "2021-10-04T13:26:29Z",
      "author": {
        "login": "mhajas",
        "type": "User",
        "stats": {
          "total_commits": 464,
          "average_weekly_commits": 0.7694859038142621,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 252
        }
      },
      "commit_message": {
        "title": "KEYCLOAK-19177 Disable ECP flow by default for all Saml clients; ecp flow creates only transient users sessions",
        "length": 111,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 139,
        "additions": 135,
        "deletions": 4
      },
      "files": [
        {
          "filename": "services/src/main/java/org/keycloak/protocol/saml/SamlClient.java",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -120,6 +120,14 @@ public void setForceNameIDFormat(boolean val) {\n         client.setAttribute(SamlConfigAttributes.SAML_FORCE_NAME_ID_FORMAT_ATTRIBUTE, Boolean.toString(val));\n     }\n \n+    public boolean allowECPFlow() {\n+        return \"true\".equals(resolveAttribute(SamlConfigAttributes.SAML_ALLOW_ECP_FLOW));\n+    }\n+\n+    public void setAllowECPFlow(boolean val) {\n+        client.setAttribute(SamlConfigAttributes.SAML_ALLOW_ECP_FLOW, Boolean.toString(val));\n+    }\n+\n     public boolean forceArtifactBinding(){\n         return \"true\".equals(resolveAttribute(SamlConfigAttributes.SAML_ARTIFACT_BINDING));\n     }"
        },
        {
          "filename": "services/src/main/java/org/keycloak/protocol/saml/SamlConfigAttributes.java",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -44,4 +44,5 @@ public interface SamlConfigAttributes {\n     String SAML_ENCRYPTION_PRIVATE_KEY_ATTRIBUTE = \"saml.encryption.\" + CertificateInfoHelper.PRIVATE_KEY;\n     String SAML_ASSERTION_LIFESPAN = \"saml.assertion.lifespan\";\n     String SAML_ARTIFACT_BINDING_IDENTIFIER = \"saml.artifact.binding.identifier\";\n+    String SAML_ALLOW_ECP_FLOW = \"saml.allow.ecp.flow\";\n }"
        },
        {
          "filename": "services/src/main/java/org/keycloak/protocol/saml/SamlProtocolFactory.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -154,6 +154,10 @@ public void setupClientDefaults(ClientRepresentation clientRep, ClientModel newC\n             client.setForceNameIDFormat(false);\n         }\n \n+        if (rep.getAllowEcpFlow() == null) {\n+            client.setAllowECPFlow(false);\n+        }\n+\n         if (rep.getSamlServerSignature() == null) {\n             client.setRequiresRealmSignature(true);\n         }"
        },
        {
          "filename": "services/src/main/java/org/keycloak/protocol/saml/SamlRepresentationAttributes.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -61,6 +61,11 @@ public String getForceNameIDFormat() {\n         return getAttributes().get(SamlConfigAttributes.SAML_FORCE_NAME_ID_FORMAT_ATTRIBUTE);\n     }\n \n+    public String getAllowEcpFlow() {\n+        if (getAttributes() == null) return null;\n+        return getAttributes().get(SamlConfigAttributes.SAML_ALLOW_ECP_FLOW);\n+    }\n+\n     public String getSamlArtifactBinding() {\n         if (getAttributes() == null) return null;\n         return getAttributes().get(SamlConfigAttributes.SAML_ARTIFACT_BINDING);"
        },
        {
          "filename": "services/src/main/java/org/keycloak/protocol/saml/profile/ecp/SamlEcpProfileService.java",
          "status": "modified",
          "additions": 10,
          "deletions": 1,
          "patch": "@@ -26,6 +26,7 @@\n import org.keycloak.models.UserSessionModel;\n import org.keycloak.models.utils.DefaultAuthenticationFlows;\n import org.keycloak.protocol.saml.JaxrsSAML2BindingBuilder;\n+import org.keycloak.protocol.saml.SamlClient;\n import org.keycloak.protocol.saml.SamlConfigAttributes;\n import org.keycloak.protocol.saml.SamlProtocol;\n import org.keycloak.protocol.saml.SamlService;\n@@ -36,6 +37,7 @@\n import org.keycloak.saml.common.exceptions.ConfigurationException;\n import org.keycloak.saml.common.exceptions.ProcessingException;\n import org.keycloak.saml.validators.DestinationValidator;\n+import org.keycloak.services.managers.AuthenticationManager;\n import org.keycloak.sessions.AuthenticationSessionModel;\n import org.w3c.dom.Document;\n \n@@ -44,7 +46,6 @@\n import javax.xml.soap.SOAPHeaderElement;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.Map;\n import java.util.Objects;\n \n /**\n@@ -79,6 +80,12 @@ protected boolean isDestinationRequired() {\n \n                 @Override\n                 protected Response loginRequest(String relayState, AuthnRequestType requestAbstractType, ClientModel client) {\n+                    // Do not allow ECP login when client does not support it\n+                    if (!new SamlClient(client).allowECPFlow()) {\n+                        logger.errorf(\"Client %s is not allowed to execute ECP flow\", client.getClientId());\n+                        throw new RuntimeException(\"Client is not allowed to use ECP profile.\");\n+                    }\n+\n                     // force passive authentication when executing this profile\n                     requestAbstractType.setIsPassive(true);\n                     requestAbstractType.setDestination(session.getContext().getUri().getAbsolutePath());\n@@ -99,6 +106,8 @@ protected Response loginRequest(String relayState, AuthnRequestType requestAbstr\n \n     @Override\n     protected Response newBrowserAuthentication(AuthenticationSessionModel authSession, boolean isPassive, boolean redirectToAuthentication, SamlProtocol samlProtocol) {\n+        // Saml ECP flow creates only TRANSIENT user sessions\n+        authSession.setClientNote(AuthenticationManager.USER_SESSION_PERSISTENT_STATE, UserSessionModel.SessionPersistenceState.TRANSIENT.toString());\n         return super.newBrowserAuthentication(authSession, isPassive, redirectToAuthentication, createEcpSamlProtocol());\n     }\n "
        },
        {
          "filename": "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/saml/SOAPBindingTest.java",
          "status": "modified",
          "additions": 78,
          "deletions": 1,
          "patch": "@@ -17,17 +17,34 @@\n package org.keycloak.testsuite.saml;\n \n import org.junit.Test;\n+import org.keycloak.dom.saml.v2.SAML2Object;\n+import org.keycloak.dom.saml.v2.assertion.AuthnStatementType;\n import org.keycloak.dom.saml.v2.protocol.ResponseType;\n import org.keycloak.dom.saml.v2.protocol.StatusResponseType;\n+import org.keycloak.models.RealmModel;\n+import org.keycloak.models.UserSessionModel;\n import org.keycloak.protocol.saml.SamlConfigAttributes;\n+import org.keycloak.saml.common.constants.JBossSAMLURIConstants;\n import org.keycloak.saml.processing.core.saml.v2.common.SAMLDocumentHolder;\n import org.keycloak.testsuite.updaters.ClientAttributeUpdater;\n import org.keycloak.testsuite.util.SamlClientBuilder;\n \n+import javax.ws.rs.core.Response;\n+import javax.xml.soap.MessageFactory;\n+import javax.xml.soap.SOAPException;\n+import javax.xml.soap.SOAPMessage;\n+\n+import java.io.IOException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.not;\n-import static org.junit.Assert.assertThat;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.keycloak.testsuite.util.Matchers.isSamlResponse;\n+import static org.keycloak.testsuite.util.Matchers.statusCodeIsHC;\n import static org.keycloak.testsuite.util.SamlClient.Binding.POST;\n import static org.keycloak.testsuite.util.SamlClient.Binding.SOAP;\n \n@@ -214,4 +231,64 @@ public void soapBindingLogoutWithoutSignatureMissingDestinationTest() {\n \n         assertThat(response.getSamlObject(), instanceOf(StatusResponseType.class));\n     }\n+\n+    @Test\n+    public void soapBindingIsNotPossibleForClientsWithSamlEcpFlowAttributeFalse() {\n+        // Disable ECP_FLOW_ENABLED switch\n+        getCleanup().addCleanup(ClientAttributeUpdater.forClient(adminClient, REALM_NAME, SAML_CLIENT_ID_ECP_SP)\n+                .setAttribute(SamlConfigAttributes.SAML_ALLOW_ECP_FLOW, \"false\")\n+                .setAttribute(SamlConfigAttributes.SAML_SERVER_SIGNATURE, \"false\")\n+                .setAttribute(SamlConfigAttributes.SAML_CLIENT_SIGNATURE_ATTRIBUTE, \"false\")\n+                .update());\n+\n+        new SamlClientBuilder()\n+                .authnRequest(getAuthServerSamlEndpoint(REALM_NAME), SAML_CLIENT_ID_ECP_SP, SAML_ASSERTION_CONSUMER_URL_ECP_SP, SOAP)\n+                .basicAuthentication(bburkeUser)\n+                .build()\n+                .execute(response -> {\n+                    assertThat(response, statusCodeIsHC(Response.Status.INTERNAL_SERVER_ERROR));\n+\n+                    try {\n+                        MessageFactory messageFactory = MessageFactory.newInstance();\n+                        SOAPMessage soapMessage = messageFactory.createMessage(null, response.getEntity().getContent());\n+                        String faultDetail = soapMessage.getSOAPBody().getFault().getDetail().getValue();\n+                        assertThat(faultDetail, is(equalTo(\"Client is not allowed to use ECP profile.\")));\n+                    } catch (SOAPException | IOException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                });\n+\n+    }\n+\n+    @Test\n+    public void ecpFlowCreatesTransientSessions() {\n+        // Disable ECP_FLOW_ENABLED switch\n+        getCleanup().addCleanup(ClientAttributeUpdater.forClient(adminClient, REALM_NAME, SAML_CLIENT_ID_ECP_SP)\n+                .setAttribute(SamlConfigAttributes.SAML_SERVER_SIGNATURE, \"false\")\n+                .setAttribute(SamlConfigAttributes.SAML_CLIENT_SIGNATURE_ATTRIBUTE, \"false\")\n+                .update());\n+\n+        // Successfully login using ECP flow\n+        SAML2Object samlObject = new SamlClientBuilder()\n+                .authnRequest(getAuthServerSamlEndpoint(REALM_NAME), SAML_CLIENT_ID_ECP_SP, SAML_ASSERTION_CONSUMER_URL_ECP_SP, SOAP)\n+                .basicAuthentication(bburkeUser)\n+                .build()\n+                .executeAndTransform(SOAP::extractResponse).getSamlObject();\n+\n+        assertThat(samlObject, isSamlResponse(JBossSAMLURIConstants.STATUS_SUCCESS));\n+        ResponseType loginResp1 = (ResponseType) samlObject;\n+        AuthnStatementType sessionId = (AuthnStatementType) loginResp1.getAssertions().get(0).getAssertion().getStatements().iterator().next();\n+\n+        String userSessionId = sessionId.getSessionIndex().split(\"::\")[0];\n+\n+        // Test that the user session with the given ID does not exist\n+        testingClient.server().run(session -> {\n+            RealmModel realmByName = session.realms().getRealmByName(REALM_NAME);\n+            UserSessionModel userSession = session.sessions().getUserSession(realmByName, userSessionId);\n+\n+            assertThat(userSession, nullValue());\n+        });\n+\n+\n+    }\n }"
        },
        {
          "filename": "testsuite/integration-arquillian/tests/base/src/test/resources/adapter-test/keycloak-saml/testsaml.json",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -716,7 +716,8 @@\n                 \"saml.signature.algorithm\": \"RSA_SHA256\",\n                 \"saml.client.signature\": \"true\",\n                 \"saml.authnstatement\": \"true\",\n-                \"saml.signing.certificate\": \"MIIB1DCCAT0CBgFJGP5dZDANBgkqhkiG9w0BAQsFADAwMS4wLAYDVQQDEyVodHRwOi8vbG9jYWxob3N0OjgwODAvc2FsZXMtcG9zdC1zaWcvMB4XDTE0MTAxNjEyNDQyM1oXDTI0MTAxNjEyNDYwM1owMDEuMCwGA1UEAxMlaHR0cDovL2xvY2FsaG9zdDo4MDgwL3NhbGVzLXBvc3Qtc2lnLzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA1RvGu8RjemSJA23nnMksoHA37MqY1DDTxOECY4rPAd9egr7GUNIXE0y1MokaR5R2crNpN8RIRwR8phQtQDjXL82c6W+NLQISxztarQJ7rdNJIYwHY0d5ri1XRpDP8zAuxubPYiMAVYcDkIcvlbBpwh/dRM5I2eElRK+eSiaMkCUCAwEAATANBgkqhkiG9w0BAQsFAAOBgQCLms6htnPaY69k1ntm9a5jgwSn/K61cdai8R8B0ccY7zvinn9AfRD7fiROQpFyY29wKn8WCLrJ86NBXfgFUGyR5nLNHVy3FghE36N2oHy53uichieMxffE6vhkKJ4P8ChfJMMOZlmCPsQPDvjoAghHt4mriFiQgRdPgIy/zDjSNw==\"\n+                \"saml.signing.certificate\": \"MIIB1DCCAT0CBgFJGP5dZDANBgkqhkiG9w0BAQsFADAwMS4wLAYDVQQDEyVodHRwOi8vbG9jYWxob3N0OjgwODAvc2FsZXMtcG9zdC1zaWcvMB4XDTE0MTAxNjEyNDQyM1oXDTI0MTAxNjEyNDYwM1owMDEuMCwGA1UEAxMlaHR0cDovL2xvY2FsaG9zdDo4MDgwL3NhbGVzLXBvc3Qtc2lnLzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA1RvGu8RjemSJA23nnMksoHA37MqY1DDTxOECY4rPAd9egr7GUNIXE0y1MokaR5R2crNpN8RIRwR8phQtQDjXL82c6W+NLQISxztarQJ7rdNJIYwHY0d5ri1XRpDP8zAuxubPYiMAVYcDkIcvlbBpwh/dRM5I2eElRK+eSiaMkCUCAwEAATANBgkqhkiG9w0BAQsFAAOBgQCLms6htnPaY69k1ntm9a5jgwSn/K61cdai8R8B0ccY7zvinn9AfRD7fiROQpFyY29wKn8WCLrJ86NBXfgFUGyR5nLNHVy3FghE36N2oHy53uichieMxffE6vhkKJ4P8ChfJMMOZlmCPsQPDvjoAghHt4mriFiQgRdPgIy/zDjSNw==\",\n+                \"saml.allow.ecp.flow\": \"true\"\n             }\n         },\n         {"
        },
        {
          "filename": "testsuite/integration-arquillian/tests/other/console/src/main/java/org/keycloak/testsuite/console/page/clients/settings/ClientSettingsForm.java",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -4,6 +4,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.keycloak.protocol.saml.SamlConfigAttributes;\n import org.keycloak.representations.idm.ClientRepresentation;\n import org.keycloak.testsuite.console.page.clients.CreateClientForm;\n import org.keycloak.testsuite.console.page.fragment.OnOffSwitch;\n@@ -262,6 +263,7 @@ public class SAMLClientSettingsForm extends Form {\n         public static final String SAML_ASSERTION_CONSUMER_URL_REDIRECT = \"saml_assertion_consumer_url_redirect\";\n         public static final String SAML_FORCE_NAME_ID_FORMAT = \"saml_force_name_id_format\";\n         public static final String SAML_NAME_ID_FORMAT = \"saml_name_id_format\";\n+        public static final String SAML_ALLOW_ECP_FLOW = SamlConfigAttributes.SAML_ALLOW_ECP_FLOW;\n         public static final String SAML_SIGNATURE_CANONICALIZATION_METHOD = \"saml_signature_canonicalization_method\";\n         public static final String SAML_SINGLE_LOGOUT_SERVICE_URL_POST = \"saml_single_logout_service_url_post\";\n         public static final String SAML_SINGLE_LOGOUT_SERVICE_URL_REDIRECT = \"saml_single_logout_service_url_redirect\";"
        },
        {
          "filename": "testsuite/integration-arquillian/tests/other/console/src/test/java/org/keycloak/testsuite/console/clients/AbstractClientTest.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -23,10 +23,10 @@\n import static org.keycloak.testsuite.auth.page.login.OIDCLogin.SAML;\n import static org.keycloak.testsuite.console.page.clients.settings.ClientSettingsForm.SAMLClientSettingsForm.SAML_AUTHNSTATEMENT;\n import static org.keycloak.testsuite.console.page.clients.settings.ClientSettingsForm.SAMLClientSettingsForm.SAML_CLIENT_SIGNATURE;\n+import static org.keycloak.testsuite.console.page.clients.settings.ClientSettingsForm.SAMLClientSettingsForm.SAML_ALLOW_ECP_FLOW;\n import static org.keycloak.testsuite.console.page.clients.settings.ClientSettingsForm.SAMLClientSettingsForm.SAML_FORCE_NAME_ID_FORMAT;\n import static org.keycloak.testsuite.console.page.clients.settings.ClientSettingsForm.SAMLClientSettingsForm.SAML_FORCE_POST_BINDING;\n import static org.keycloak.testsuite.console.page.clients.settings.ClientSettingsForm.SAMLClientSettingsForm.SAML_NAME_ID_FORMAT;\n-import static org.keycloak.testsuite.console.page.clients.settings.ClientSettingsForm.SAMLClientSettingsForm.SAML_ONETIMEUSE_CONDITION;\n import static org.keycloak.testsuite.console.page.clients.settings.ClientSettingsForm.SAMLClientSettingsForm.SAML_SERVER_SIGNATURE;\n import static org.keycloak.testsuite.console.page.clients.settings.ClientSettingsForm.SAMLClientSettingsForm.SAML_SIGNATURE_ALGORITHM;\n import static org.keycloak.testsuite.util.AttributesAssert.assertEqualsBooleanAttributes;\n@@ -89,6 +89,7 @@ public static Map<String, String> getSAMLAttributes() {\n         attributes.put(SAML_SIGNATURE_ALGORITHM, \"RSA_SHA256\");\n         attributes.put(SAML_FORCE_NAME_ID_FORMAT, \"false\");\n         attributes.put(SAML_NAME_ID_FORMAT, \"username\");\n+        attributes.put(SAML_ALLOW_ECP_FLOW, \"false\");\n         attributes.put(SamlConfigAttributes.SAML_ARTIFACT_BINDING_IDENTIFIER, ArtifactBindingUtils.computeArtifactBindingIdentifierString(\"saml\"));\n         return attributes;\n     }"
        },
        {
          "filename": "themes/src/main/resources/theme/base/admin/messages/admin-messages_en.properties",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -371,6 +371,8 @@ front-channel-logout-session-required.tooltip=Specifying whether a sid (session\n \n force-name-id-format=Force Name ID Format\n force-name-id-format.tooltip=Ignore requested NameID subject format and use admin console configured one.\n+allow-ecp-flow=Allow ECP Flow\n+allow-ecp-flow.tooltip=This client is allowed to use ECP flow for authenticating users.\n name-id-format=Name ID Format\n name-id-format.tooltip=The name ID format to use for the subject.\n mapper.nameid.format.tooltip=Name ID Format using Mapper"
        },
        {
          "filename": "themes/src/main/resources/theme/base/admin/resources/js/controllers/clients.js",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -1197,6 +1197,7 @@ module.controller('ClientDetailCtrl', function($scope, realm, client, flows, $ro\n     $scope.samlEncrypt = false;\n     $scope.samlForcePostBinding = false;\n     $scope.samlForceNameIdFormat = false;\n+    $scope.samlAllowECPFlow = false;\n     $scope.samlXmlKeyNameTranformer = $scope.xmlKeyNameTranformers[1];\n     $scope.disableAuthorizationTab = !client.authorizationServicesEnabled;\n     $scope.disableServiceAccountRolesTab = !client.serviceAccountsEnabled;\n@@ -1351,6 +1352,13 @@ module.controller('ClientDetailCtrl', function($scope, realm, client, flows, $ro\n                 $scope.samlForceNameIdFormat = false;\n             }\n         }\n+        if ($scope.client.attributes[\"saml.allow.ecp.flow\"]) {\n+            if ($scope.client.attributes[\"saml.allow.ecp.flow\"] == \"true\") {\n+                $scope.samlAllowECPFlow = true;\n+            } else {\n+                $scope.samlAllowECPFlow = false;\n+            }\n+        }\n         if ($scope.client.attributes[\"saml.multivalued.roles\"]) {\n             if ($scope.client.attributes[\"saml.multivalued.roles\"] == \"true\") {\n                 $scope.samlMultiValuedRoles = true;\n@@ -1961,6 +1969,12 @@ module.controller('ClientDetailCtrl', function($scope, realm, client, flows, $ro\n         } else {\n             $scope.clientEdit.attributes[\"saml_force_name_id_format\"] = \"false\";\n \n+        }\n+        if ($scope.samlAllowECPFlow == true) {\n+            $scope.clientEdit.attributes[\"saml.allow.ecp.flow\"] = \"true\";\n+        } else {\n+            $scope.clientEdit.attributes[\"saml.allow.ecp.flow\"] = \"false\";\n+\n         }\n         if ($scope.samlMultiValuedRoles == true) {\n             $scope.clientEdit.attributes[\"saml.multivalued.roles\"] = \"true\";"
        },
        {
          "filename": "themes/src/main/resources/theme/base/admin/resources/partials/client-detail.html",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -299,6 +299,13 @@\n                 </div>\n                 <kc-tooltip>{{:: 'force-name-id-format.tooltip' | translate}}</kc-tooltip>\n             </div>\n+            <div class=\"form-group clearfix block\" data-ng-show=\"protocol == 'saml'\">\n+                <label class=\"col-md-2 control-label\" for=\"samlAllowECPFlow\">{{:: 'allow-ecp-flow' | translate}}</label>\n+                <div class=\"col-sm-6\">\n+                    <input ng-model=\"samlAllowECPFlow\" ng-click=\"switchChange()\" name=\"samlAllowECPFlow\" id=\"samlAllowECPFlow\" onoffswitch on-text=\"{{:: 'onText' | translate}}\" off-text=\"{{:: 'offText' | translate}}\"/>\n+                </div>\n+                <kc-tooltip>{{:: 'allow-ecp-flow.tooltip' | translate}}</kc-tooltip>\n+            </div>\n             <div class=\"form-group\" data-ng-show=\"protocol == 'saml'\">\n                 <label class=\"col-md-2 control-label\" for=\"samlNameIdFormat\">{{:: 'name-id-format' | translate}}</label>\n                 <div class=\"col-sm-6\">"
        }
      ],
      "file_patterns": {
        "security_files": 9,
        "config_files": 3,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 9,
        "max_directory_depth": 15
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "388fa5a3ebae20d1bdf8f92ee3ad29fbe438a622",
            "date": "2025-01-14T13:32:03Z",
            "author_login": "stianst"
          },
          {
            "sha": "01f5a8c1c3e97944f8919c11338b1cebed9056ee",
            "date": "2025-01-14T12:20:01Z",
            "author_login": "stianst"
          },
          {
            "sha": "53a2ed6fdbd8673e9b914f650e598cd9122763e6",
            "date": "2025-01-14T12:02:51Z",
            "author_login": "SebastEnn"
          },
          {
            "sha": "8ddf94ca3b0a3c34fe1441fe24cf90a063d3ae3f",
            "date": "2025-01-14T11:22:01Z",
            "author_login": "Yogu"
          },
          {
            "sha": "6322554da02c5fd425ebfcbb5f1c25ca2cbc158d",
            "date": "2025-01-13T17:15:20Z",
            "author_login": "ahus1"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-287",
    "description": "A flaw was found in keycloak, where the default ECP binding flow allows other authentication flows to be bypassed. By exploiting this behavior, an attacker can bypass the MFA authentication by sending a SOAP request with an AuthnRequest and Authorization header with the user's credentials. The highest threat from this vulnerability is to confidentiality and integrity.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-08-23T16:15:10.030",
    "last_modified": "2024-11-21T06:22:33.163",
    "fix_date": "2021-10-04T13:26:29Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/security/cve/CVE-2021-3827",
      "source": "secalert@redhat.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2007512",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/keycloak/keycloak/commit/44000caaf5051d7f218d1ad79573bd3d175cad0d",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keycloak/keycloak/security/advisories/GHSA-4pc7-vqv5-5r3v",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/security/cve/CVE-2021-3827",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2007512",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/keycloak/keycloak/commit/44000caaf5051d7f218d1ad79573bd3d175cad0d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/keycloak/keycloak/security/advisories/GHSA-4pc7-vqv5-5r3v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:14.285991",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "keycloak",
    "owner": "keycloak",
    "created_at": "2013-07-02T13:38:51Z",
    "updated_at": "2025-01-14T13:32:13Z",
    "pushed_at": "2025-01-14T14:08:52Z",
    "size": 519673,
    "stars": 24649,
    "forks": 6948,
    "open_issues": 1920,
    "watchers": 24649,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main",
      "release/22.0",
      "release/24.0",
      "release/26.0",
      "release/26.1"
    ],
    "languages": {
      "Java": 35124416,
      "TypeScript": 3242946,
      "FreeMarker": 278229,
      "JavaScript": 136844,
      "CSS": 44624,
      "Shell": 35073,
      "XSLT": 31908,
      "HTML": 10031,
      "mupad": 8593,
      "Mustache": 5212,
      "Groovy": 4915,
      "Dockerfile": 4760,
      "Batchfile": 2651,
      "Fluent": 217
    },
    "commit_activity": {
      "total_commits_last_year": 3682,
      "avg_commits_per_week": 70.8076923076923,
      "days_active_last_year": 292
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:10:04.689797"
  }
}