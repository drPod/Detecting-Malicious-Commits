{
  "cve_id": "CVE-2021-3830",
  "github_data": {
    "repository": "btcpayserver/btcpayserver",
    "fix_commit": "fc4e47cec608cc3dba24b19d0145ac69320b975e",
    "related_commits": [
      "fc4e47cec608cc3dba24b19d0145ac69320b975e",
      "fc4e47cec608cc3dba24b19d0145ac69320b975e"
    ],
    "patch_url": "https://github.com/btcpayserver/btcpayserver/commit/fc4e47cec608cc3dba24b19d0145ac69320b975e.patch",
    "fix_commit_details": {
      "sha": "fc4e47cec608cc3dba24b19d0145ac69320b975e",
      "commit_date": "2021-09-09T12:51:28Z",
      "author": {
        "login": "NicolasDorier",
        "type": "User",
        "stats": {
          "total_commits": 3521,
          "average_weekly_commits": 9.169270833333334,
          "total_additions": 433020,
          "total_deletions": 300833,
          "weeks_active": 334
        }
      },
      "commit_message": {
        "title": "Add CSP at the website level (#2863)",
        "length": 36,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 314,
        "additions": 224,
        "deletions": 90
      },
      "files": [
        {
          "filename": "BTCPayServer.Tests/BTCPayServerTester.cs",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -134,7 +134,7 @@ public async Task StartAsync()\n             config.AppendLine($\"torrcfile={TestUtils.GetTestDataFullPath(\"Tor/torrc\")}\");\n             config.AppendLine($\"socksendpoint={SocksEndpoint}\");\n             config.AppendLine($\"debuglog=debug.log\");\n-\n+            config.AppendLine($\"nocsp={NoCSP.ToString().ToLowerInvariant()}\");\n \n             if (!string.IsNullOrEmpty(SSHPassword) && string.IsNullOrEmpty(SSHKeyFile))\n                 config.AppendLine($\"sshpassword={SSHPassword}\");\n@@ -283,6 +283,8 @@ public T GetService<T>()\n         public string SSHPassword { get; internal set; }\n         public string SSHKeyFile { get; internal set; }\n         public string SSHConnection { get; set; }\n+        public bool NoCSP { get; set; }\n+\n         public T GetController<T>(string userId = null, string storeId = null, bool isAdmin = false) where T : Controller\n         {\n             var context = new DefaultHttpContext();"
        },
        {
          "filename": "BTCPayServer.Tests/SeleniumTester.cs",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -38,6 +38,7 @@ public static SeleniumTester Create([CallerMemberNameAttribute] string scope = n\n \n         public async Task StartAsync()\n         {\n+            Server.PayTester.NoCSP = true;\n             await Server.StartAsync();\n \n             var windowSize = (Width: 1200, Height: 1000);"
        },
        {
          "filename": "BTCPayServer/Components/NotificationsDropdown/Default.cshtml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -67,7 +67,7 @@ else\n @if (!disabled)\n {\n \n-    <script type=\"text/javascript\">\n+    <script type=\"text/javascript\" csp-sha256>\n \n     var supportsWebSockets = 'WebSocket' in window && window.WebSocket.CLOSING === 2;\n "
        },
        {
          "filename": "BTCPayServer/Configuration/DefaultConfiguration.cs",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@ protected override CommandLineApplication CreateCommandLineApplicationCore()\n             app.Option(\"--chains | -c\", $\"Chains to support as a comma separated (default: btc; available: {chains})\", CommandOptionType.SingleValue);\n             app.Option(\"--postgres\", $\"Connection string to a PostgreSQL database\", CommandOptionType.SingleValue);\n             app.Option(\"--mysql\", $\"Connection string to a MySQL database\", CommandOptionType.SingleValue);\n+            app.Option(\"--nocsp\", $\"Disable CSP (default false)\", CommandOptionType.BoolValue);\n             app.Option(\"--sqlitefile\", $\"File name to an SQLite database file inside the data directory\", CommandOptionType.SingleValue);\n             app.Option(\"--externalservices\", $\"Links added to external services inside Server Settings / Services under the format service1:path2;service2:path2.(default: empty)\", CommandOptionType.SingleValue);\n             app.Option(\"--bundlejscss\", $\"Bundle JavaScript and CSS files for better performance (default: true)\", CommandOptionType.SingleValue);"
        },
        {
          "filename": "BTCPayServer/Filters/ContentSecurityPolicyAttribute.cs",
          "status": "modified",
          "additions": 78,
          "deletions": 63,
          "patch": "@@ -7,13 +7,32 @@\n namespace BTCPayServer.Filters\n {\n     public interface IContentSecurityPolicy : IFilterMetadata { }\n+    public enum CSPTemplate\n+    {\n+        AntiXSS\n+    }\n     public class ContentSecurityPolicyAttribute : Attribute, IActionFilter, IContentSecurityPolicy\n     {\n-        public void OnActionExecuted(ActionExecutedContext context)\n+        public ContentSecurityPolicyAttribute()\n         {\n \n         }\n+        public ContentSecurityPolicyAttribute(CSPTemplate template)\n+        {\n+            if (template == CSPTemplate.AntiXSS)\n+            {\n+                AutoSelf = false;\n+                FixWebsocket = false;\n+                UnsafeInline = false;\n+                ScriptSrc = \"'self' 'unsafe-eval'\"; // unsafe-eval needed for vue\n+            }\n+        }\n+\n+        public void OnActionExecuted(ActionExecutedContext context)\n+        {\n \n+        }\n+        public bool Enabled { get; set; } = true;\n         public bool AutoSelf { get; set; } = true;\n         public bool UnsafeInline { get; set; } = true;\n         public bool FixWebsocket { get; set; } = true;\n@@ -22,83 +41,79 @@ public void OnActionExecuted(ActionExecutedContext context)\n         public string DefaultSrc { get; set; }\n         public string StyleSrc { get; set; }\n         public string ScriptSrc { get; set; }\n+        public string ManifestSrc { get; set; }\n \n         public void OnActionExecuting(ActionExecutingContext context)\n         {\n-            if (context.IsEffectivePolicy<IContentSecurityPolicy>(this))\n+            if (!context.IsEffectivePolicy<IContentSecurityPolicy>(this) || !Enabled)\n+                return;\n+            var policies = context.HttpContext.RequestServices.GetService(typeof(ContentSecurityPolicies)) as ContentSecurityPolicies;\n+            if (policies == null)\n+                return;\n+            if (DefaultSrc != null)\n             {\n-                var policies = context.HttpContext.RequestServices.GetService(typeof(ContentSecurityPolicies)) as ContentSecurityPolicies;\n-                if (policies == null)\n-                    return;\n-                if (DefaultSrc != null)\n-                {\n-                    policies.Add(new ConsentSecurityPolicy(\"default-src\", DefaultSrc));\n-                }\n-                if (UnsafeInline)\n-                {\n-                    policies.Add(new ConsentSecurityPolicy(\"script-src\", \"'unsafe-inline'\"));\n-                }\n-                if (!string.IsNullOrEmpty(FontSrc))\n-                {\n-                    policies.Add(new ConsentSecurityPolicy(\"font-src\", FontSrc));\n-                }\n+                policies.Add(new ConsentSecurityPolicy(\"default-src\", DefaultSrc));\n+            }\n+            if (UnsafeInline)\n+            {\n+                policies.Add(new ConsentSecurityPolicy(\"script-src\", \"'unsafe-inline'\"));\n+            }\n+            if (!string.IsNullOrEmpty(FontSrc))\n+            {\n+                policies.Add(new ConsentSecurityPolicy(\"font-src\", FontSrc));\n+            }\n+            if (!string.IsNullOrEmpty(ManifestSrc))\n+            {\n+                policies.Add(new ConsentSecurityPolicy(\"manifest-src\", FontSrc));\n+            }\n \n-                if (!string.IsNullOrEmpty(ImgSrc))\n-                {\n-                    policies.Add(new ConsentSecurityPolicy(\"img-src\", ImgSrc));\n-                }\n+            if (!string.IsNullOrEmpty(ImgSrc))\n+            {\n+                policies.Add(new ConsentSecurityPolicy(\"img-src\", ImgSrc));\n+            }\n \n-                if (!string.IsNullOrEmpty(StyleSrc))\n-                {\n-                    policies.Add(new ConsentSecurityPolicy(\"style-src\", StyleSrc));\n-                }\n+            if (!string.IsNullOrEmpty(StyleSrc))\n+            {\n+                policies.Add(new ConsentSecurityPolicy(\"style-src\", StyleSrc));\n+            }\n \n-                if (!string.IsNullOrEmpty(ScriptSrc))\n-                {\n-                    policies.Add(new ConsentSecurityPolicy(\"script-src\", ScriptSrc));\n-                }\n+            if (!string.IsNullOrEmpty(ScriptSrc))\n+            {\n+                policies.Add(new ConsentSecurityPolicy(\"script-src\", ScriptSrc));\n+            }\n \n-                if (FixWebsocket && AutoSelf) // Self does not match wss:// and ws:// :(\n-                {\n-                    var request = context.HttpContext.Request;\n+            if (FixWebsocket && AutoSelf) // Self does not match wss:// and ws:// :(\n+            {\n+                var request = context.HttpContext.Request;\n \n-                    var url = string.Concat(\n-                            request.Scheme.Equals(\"http\", StringComparison.OrdinalIgnoreCase) ? \"ws\" : \"wss\",\n-                            \"://\",\n-                            request.Host.ToUriComponent(),\n-                            request.PathBase.ToUriComponent());\n-                    policies.Add(new ConsentSecurityPolicy(\"connect-src\", url));\n-                }\n+                var url = string.Concat(\n+                        request.Scheme.Equals(\"http\", StringComparison.OrdinalIgnoreCase) ? \"ws\" : \"wss\",\n+                        \"://\",\n+                        request.Host.ToUriComponent(),\n+                        request.PathBase.ToUriComponent());\n+                policies.Add(new ConsentSecurityPolicy(\"connect-src\", url));\n+            }\n \n-                context.HttpContext.Response.OnStarting(() =>\n+            context.HttpContext.Response.OnStarting(() =>\n+            {\n+                if (!policies.HasRules)\n+                    return Task.CompletedTask;\n+                if (AutoSelf)\n                 {\n-                    if (!policies.HasRules)\n-                        return Task.CompletedTask;\n-                    if (AutoSelf)\n+                    bool hasSelf = false;\n+                    foreach (var group in policies.Rules.GroupBy(p => p.Name))\n                     {\n-                        bool hasSelf = false;\n-                        foreach (var group in policies.Rules.GroupBy(p => p.Name))\n+                        hasSelf = group.Any(g => g.Value.Contains(\"'self'\", StringComparison.OrdinalIgnoreCase));\n+                        if (!hasSelf && !group.Any(g => g.Value.Contains(\"'none'\", StringComparison.OrdinalIgnoreCase) ||\n+                                           g.Value.Contains(\"*\", StringComparison.OrdinalIgnoreCase)))\n                         {\n-                            hasSelf = group.Any(g => g.Value.Contains(\"'self'\", StringComparison.OrdinalIgnoreCase));\n-                            if (!hasSelf && !group.Any(g => g.Value.Contains(\"'none'\", StringComparison.OrdinalIgnoreCase) ||\n-                                               g.Value.Contains(\"*\", StringComparison.OrdinalIgnoreCase)))\n-                            {\n-                                policies.Add(new ConsentSecurityPolicy(group.Key, \"'self'\"));\n-                                hasSelf = true;\n-                            }\n-                            if (hasSelf)\n-                            {\n-                                foreach (var authorized in policies.Authorized)\n-                                {\n-                                    policies.Add(new ConsentSecurityPolicy(group.Key, authorized));\n-                                }\n-                            }\n+                            policies.Add(new ConsentSecurityPolicy(group.Key, \"'self'\"));\n                         }\n                     }\n-                    context.HttpContext.Response.SetHeader(\"Content-Security-Policy\", policies.ToString());\n-                    return Task.CompletedTask;\n-                });\n-            }\n+                }\n+                context.HttpContext.Response.SetHeader(\"Content-Security-Policy\", policies.ToString());\n+                return Task.CompletedTask;\n+            });\n         }\n     }\n }"
        },
        {
          "filename": "BTCPayServer/Hosting/Startup.cs",
          "status": "modified",
          "additions": 2,
          "deletions": 8,
          "patch": "@@ -114,14 +114,8 @@ public void ConfigureServices(IServiceCollection services)\n                 o.Filters.Add(new XXSSProtectionAttribute());\n                 o.Filters.Add(new ReferrerPolicyAttribute(\"same-origin\"));\n                 o.ModelBinderProviders.Insert(0, new ModelBinders.DefaultModelBinderProvider());\n-                //o.Filters.Add(new ContentSecurityPolicyAttribute()\n-                //{\n-                //    FontSrc = \"'self' https://fonts.gstatic.com/\",\n-                //    ImgSrc = \"'self' data:\",\n-                //    DefaultSrc = \"'none'\",\n-                //    StyleSrc = \"'self' 'unsafe-inline'\",\n-                //    ScriptSrc = \"'self' 'unsafe-inline'\"\n-                //});\n+                if (!Configuration.GetOrDefault<bool>(\"nocsp\", false))\n+                    o.Filters.Add(new ContentSecurityPolicyAttribute(CSPTemplate.AntiXSS));\n         })\n             .ConfigureApiBehaviorOptions(options =>\n             {"
        },
        {
          "filename": "BTCPayServer/Security/ContentSecurityPolicies.cs",
          "status": "modified",
          "additions": 7,
          "deletions": 14,
          "patch": "@@ -9,6 +9,8 @@ public class ConsentSecurityPolicy\n     {\n         public ConsentSecurityPolicy(string name, string value)\n         {\n+            if (value.Contains(';', StringComparison.OrdinalIgnoreCase))\n+                throw new FormatException();\n             _Value = value;\n             _Name = name;\n         }\n@@ -67,6 +69,10 @@ public ContentSecurityPolicies()\n         }\n \n         readonly HashSet<ConsentSecurityPolicy> _Policies = new HashSet<ConsentSecurityPolicy>();\n+        public void Add(string name, string value)\n+        {\n+            Add(new ConsentSecurityPolicy(name, value));\n+        }\n         public void Add(ConsentSecurityPolicy policy)\n         {\n             if (_Policies.Any(p => p.Name == policy.Name && p.Value == policy.Name))\n@@ -87,16 +93,12 @@ public override string ToString()\n                 {\n                     value.Append(';');\n                 }\n-                List<string> values = new List<string>();\n+                HashSet<string> values = new HashSet<string>();\n                 values.Add(group.Key);\n                 foreach (var v in group)\n                 {\n                     values.Add(v.Value);\n                 }\n-                foreach (var i in authorized)\n-                {\n-                    values.Add(i);\n-                }\n                 value.Append(String.Join(\" \", values.OfType<object>().ToArray()));\n                 firstGroup = false;\n             }\n@@ -105,16 +107,7 @@ public override string ToString()\n \n         internal void Clear()\n         {\n-            authorized.Clear();\n             _Policies.Clear();\n         }\n-\n-        readonly HashSet<string> authorized = new HashSet<string>();\n-        internal void AddAllAuthorized(string v)\n-        {\n-            authorized.Add(v);\n-        }\n-\n-        public IEnumerable<string> Authorized => authorized;\n     }\n }"
        },
        {
          "filename": "BTCPayServer/TagHelpers.cs",
          "status": "added",
          "additions": 128,
          "deletions": 0,
          "patch": "@@ -0,0 +1,128 @@\n+using System;\n+using System.Collections.Generic;\n+using System.Globalization;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using BTCPayServer.Security;\n+using BTCPayServer.Services;\n+using Microsoft.AspNetCore.Razor.TagHelpers;\n+using NBitcoin;\n+using NBitcoin.Crypto;\n+\n+namespace BTCPayServer.TagHelpers\n+{\n+    [HtmlTargetElement(\"srv-model\")]\n+    public class SrvModel : TagHelper\n+    {\n+        private readonly Safe _safe;\n+        private readonly ContentSecurityPolicies _csp;\n+\n+        public SrvModel(Safe safe, ContentSecurityPolicies csp)\n+        {\n+            _safe = safe;\n+            _csp = csp;\n+        }\n+        public string VarName { get; set; } = \"srvModel\";\n+        public object Model { get; set; }\n+        public override void Process(TagHelperContext context, TagHelperOutput output)\n+        {\n+            output.TagName = \"script\";\n+            output.TagMode = TagMode.StartTagAndEndTag;\n+            output.Attributes.Add(new TagHelperAttribute(\"type\", \"text/javascript\"));\n+            var nonce = RandomUtils.GetUInt256().ToString().Substring(0, 32);\n+            output.Attributes.Add(new TagHelperAttribute(\"nonce\", nonce));\n+            _csp.Add(\"script-src\", $\"'nonce-{nonce}'\");\n+            output.Content.SetHtmlContent($\"var {VarName} = {_safe.Json(Model)};\");\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Add a nonce-* so the inline-script can pass CSP rule when they are rendered server-side\n+    /// </summary>\n+    [HtmlTargetElement(\"script\")]\n+    public class CSPInlineScriptTagHelper : TagHelper\n+    {\n+        private readonly ContentSecurityPolicies _csp;\n+\n+        public CSPInlineScriptTagHelper(ContentSecurityPolicies csp)\n+        {\n+            _csp = csp;\n+        }\n+\n+        public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)\n+        {\n+            if (output.Attributes.ContainsName(\"src\"))\n+                return;\n+            if (output.Attributes.TryGetAttribute(\"type\", out var attr))\n+            {\n+                if (attr.Value?.ToString() != \"text/javascript\")\n+                    return;\n+            }\n+            if (output.Attributes.ContainsName(\"csp-sha256\"))\n+            {\n+                var sha = CSPEventTagHelper.GetSha256((await output.GetChildContentAsync(true)).GetContent());\n+                _csp.Add(\"script-src\", $\"'sha256-{sha}'\");\n+                output.Attributes.RemoveAll(\"csp-sha256\");\n+            }\n+            else\n+            {\n+                var nonce = RandomUtils.GetUInt256().ToString().Substring(0, 32);\n+                output.Attributes.Add(new TagHelperAttribute(\"nonce\", nonce));\n+                _csp.Add(\"script-src\", $\"'nonce-{nonce}'\");\n+            }\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Add 'unsafe-hashes' and sha256- to allow inline event handlers in CSP\n+    /// </summary>\n+    [HtmlTargetElement(Attributes = \"onclick\")]\n+    [HtmlTargetElement(Attributes = \"onkeypress\")]\n+    [HtmlTargetElement(Attributes = \"onchange\")]\n+    [HtmlTargetElement(Attributes = \"onsubmit\")]\n+    [HtmlTargetElement(Attributes = \"href\")]\n+    public class CSPEventTagHelper : TagHelper\n+    {\n+        public const string EventNames = \"onclick,onkeypress,onchange,onsubmit\";\n+        private readonly ContentSecurityPolicies _csp;\n+\n+        readonly static HashSet<string> EventSet = EventNames.Split(',')\n+                                                    .ToHashSet();\n+        public CSPEventTagHelper(ContentSecurityPolicies csp)\n+        {\n+            _csp = csp;\n+        }\n+        public override void Process(TagHelperContext context, TagHelperOutput output)\n+        {\n+            foreach (var attr in output.Attributes)\n+            {\n+                var n = attr.Name.ToLowerInvariant();\n+                if (EventSet.Contains(n))\n+                {\n+                    Allow(attr.Value.ToString());\n+                }\n+                else if (n == \"href\")\n+                {\n+                    var v = attr.Value.ToString();\n+                    if (v.StartsWith(\"javascript:\", StringComparison.OrdinalIgnoreCase))\n+                    {\n+                        Allow(v);\n+                    }\n+                }\n+            }\n+        }\n+\n+        private void Allow(string v)\n+        {\n+            var sha = GetSha256(v);\n+            _csp.Add(\"script-src\", $\"'unsafe-hashes'\");\n+            _csp.Add(\"script-src\", $\"'sha256-{sha}'\");\n+        }\n+\n+        public static string GetSha256(string script)\n+        {\n+            return Convert.ToBase64String(Hashes.SHA256(Encoding.UTF8.GetBytes(script.Replace(\"\\r\\n\", \"\\n\", StringComparison.Ordinal))));\n+        }\n+    }\n+}"
        },
        {
          "filename": "BTCPayServer/Views/Invoice/PosData.cshtml",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1,7 +1,7 @@\n @model (Dictionary<string, object> Items, int Level)\n \n @functions{\n-    void DisplayValue(object value)\n+    async Task DisplayValue(object value)\n     {\n         if (value is string str && str.StartsWith(\"http\"))\n         {\n@@ -25,7 +25,7 @@\n                     <th class=\"w-150px\">@key</th>\n                 }\n                 <td>\n-                    @{ DisplayValue(value); }\n+                    @{ await DisplayValue(value); }\n                 </td>\n             }\n             else if (value is Dictionary<string, object>subItems)\n@@ -35,7 +35,7 @@\n                 {\n                     <th class=\"w-150px\">@key</th>\n                     <td>\n-                        @{ DisplayValue(subItems.First().Value); }\n+                        @{ await DisplayValue(subItems.First().Value); }\n                     </td>\n                 }\n                 else"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 8,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e1f47b273812f462eac59acb457e4932629b5564",
            "date": "2025-01-13T03:41:13Z",
            "author_login": "NicolasDorier"
          },
          {
            "sha": "9d8a231274a8187ba2c8cc64328d775a6a1497cd",
            "date": "2025-01-10T15:16:17Z",
            "author_login": "NicolasDorier"
          },
          {
            "sha": "5a8c959b6baf0d8ed66167ecd263a945325da6d3",
            "date": "2025-01-10T15:15:04Z",
            "author_login": "NicolasDorier"
          },
          {
            "sha": "e0a51537a1b11ccd0057014a77f4288ddd8d799d",
            "date": "2025-01-10T11:21:33Z",
            "author_login": "NicolasDorier"
          },
          {
            "sha": "d2c52c10bdfa57a621aea392e75558e07bdd73b0",
            "date": "2025-01-10T10:16:48Z",
            "author_login": "NicolasDorier"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "btcpayserver is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-26T09:15:09.843",
    "last_modified": "2024-11-21T06:22:33.717",
    "fix_date": "2021-09-09T12:51:28Z"
  },
  "references": [
    {
      "url": "https://github.com/btcpayserver/btcpayserver/commit/fc4e47cec608cc3dba24b19d0145ac69320b975e",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0fcdee5f-1f07-47ce-b650-ea8b4a7d35d8",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/btcpayserver/btcpayserver/commit/fc4e47cec608cc3dba24b19d0145ac69320b975e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0fcdee5f-1f07-47ce-b650-ea8b4a7d35d8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.787162",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "btcpayserver",
    "owner": "btcpayserver",
    "created_at": "2017-08-18T12:57:05Z",
    "updated_at": "2025-01-14T11:48:10Z",
    "pushed_at": "2025-01-13T17:17:36Z",
    "size": 58479,
    "stars": 6524,
    "forks": 1678,
    "open_issues": 93,
    "watchers": 6524,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C#": 5340493,
      "HTML": 1244587,
      "JavaScript": 243284,
      "CSS": 96829,
      "Shell": 25361,
      "PowerShell": 3706,
      "Dockerfile": 3563,
      "PLpgSQL": 2402
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:13:37.806553"
  }
}