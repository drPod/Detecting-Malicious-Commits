{
  "cve_id": "CVE-2021-3837",
  "github_data": {
    "repository": "openwhyd/openwhyd",
    "fix_commit": "102a97bb082edc831cf35d27f9e5c4f55f10ae85",
    "related_commits": [
      "102a97bb082edc831cf35d27f9e5c4f55f10ae85",
      "102a97bb082edc831cf35d27f9e5c4f55f10ae85"
    ],
    "patch_url": "https://github.com/openwhyd/openwhyd/commit/102a97bb082edc831cf35d27f9e5c4f55f10ae85.patch",
    "fix_commit_details": {
      "sha": "102a97bb082edc831cf35d27f9e5c4f55f10ae85",
      "commit_date": "2021-12-26T20:17:12Z",
      "author": {
        "login": "adrienjoly",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix(security): Make login redirects more secure (#519)",
        "length": 699,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 81,
        "additions": 76,
        "deletions": 5
      },
      "files": [
        {
          "filename": "app/controllers/api/login.js",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -1,6 +1,8 @@\n /**\n  * login controller, to authenticate users\n  */\n+const snip = require('../../snip.js');\n+const config = require('../../models/config.js');\n var emailModel = require('../../models/email.js');\n var userModel = require('../../models/user.js');\n var notifEmails = require('../../models/notifEmails.js');\n@@ -60,7 +62,12 @@ exports.handleRequest = function (request, form, response, ignorePassword) {\n     userModel[form.email.indexOf('@') > -1 ? 'fetchByEmail' : 'fetchByHandle'](\n       form.email,\n       function (dbUser) {\n-        if (!dbUser) {\n+        if (\n+          form.redirect &&\n+          snip.getSafeOpenwhydURL(form.redirect, config.urlPrefix) === false\n+        ) {\n+          form.error = 'Unsafe redirect target';\n+        } else if (!dbUser) {\n           form.error = \"Are you sure? We don't recognize your email address!\";\n         } else if (form.action == 'forgot') {\n           notifEmails.sendPasswordReset(dbUser._id, dbUser.pwd, form.redirect);"
        },
        {
          "filename": "app/models/logging.js",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -261,9 +261,8 @@ http.ServerResponse.prototype.redirect = function (url) {\n };\n \n http.ServerResponse.prototype.safeRedirect = function (url) {\n-  const fullURL = new URL(url, config.urlPrefix);\n-  if (`${fullURL.protocol}//${fullURL.host}` !== config.urlPrefix)\n-    return this.forbidden();\n+  const safeURL = snip.getSafeOpenwhydURL(url, config.urlPrefix);\n+  if (safeURL === false) return this.forbidden();\n   this.redirect(url);\n };\n "
        },
        {
          "filename": "app/snip.js",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -109,6 +109,13 @@ exports.sanitizeJsStringInHtml = function (str) {\n   return exports.htmlEntities(exports.addSlashes(str || ''));\n };\n \n+exports.getSafeOpenwhydURL = function (url, safeUrlPrefix) {\n+  if (typeof url !== 'string' || url.includes('<script')) return false;\n+  const fullURL = new URL(url, safeUrlPrefix);\n+  if (`${fullURL.protocol}//${fullURL.host}` !== safeUrlPrefix) return false;\n+  else return fullURL;\n+};\n+\n var timeScales = [\n   { 'minute(s)': 60 },\n   { 'hour(s)': 60 },"
        },
        {
          "filename": "test/api/security.api.tests.js",
          "status": "modified",
          "additions": 59,
          "deletions": 1,
          "patch": "@@ -12,7 +12,65 @@ const loginAs = promisify(apiClient.loginAs);\n before(cleanup);\n \n describe('security', () => {\n-  describe('Open Redirect', () => {\n+  describe('Open Redirect from /login', () => {\n+    it('should allow redirect to /stream', async () => {\n+      const target = `/stream`;\n+      const { response } = await postRaw(null, `/login`, {\n+        action: 'login',\n+        email: ADMIN_USER.email,\n+        md5: ADMIN_USER.md5,\n+        redirect: target,\n+      });\n+      assert(\n+        response.body.includes(`window.location.href=\"${target}\"`) === true,\n+        `page body should include redirect to ${target}`\n+      );\n+    });\n+\n+    it('should NOT allow redirect to other domain', async () => {\n+      const target = `https://google.com`;\n+      const { response } = await postRaw(null, `/login`, {\n+        action: 'login',\n+        email: ADMIN_USER.email,\n+        md5: ADMIN_USER.md5,\n+        redirect: target,\n+      });\n+      assert(\n+        response.body.includes(`window.location.href=\"${target}\"`) === false,\n+        `page body should NOT include redirect to ${target}`\n+      );\n+    });\n+\n+    it('should NOT allow javascript in redirect URL', async () => {\n+      const target = `javascript:alert()`;\n+      const { response } = await postRaw(null, `/login`, {\n+        action: 'login',\n+        email: ADMIN_USER.email,\n+        md5: ADMIN_USER.md5,\n+        redirect: target,\n+      });\n+      assert(\n+        response.body.includes(`window.location.href=\"${target}\"`) === false,\n+        `page body should NOT include redirect to ${target}`\n+      );\n+    });\n+\n+    it('should NOT allow script element in redirect URL', async () => {\n+      const target = `<script>alert(document.cookie)</script>`;\n+      const { response } = await postRaw(null, `/login`, {\n+        action: 'login',\n+        email: ADMIN_USER.email,\n+        md5: ADMIN_USER.md5,\n+        redirect: target,\n+      });\n+      assert(\n+        response.body.includes(`window.location.href=\"${target}\"`) === false,\n+        `page body should NOT include redirect to ${target}`\n+      );\n+    });\n+  });\n+\n+  describe('Open Redirect from /consent', () => {\n     it('should allow redirect to /stream', async () => {\n       const target = `/stream`;\n       const { jar } = await loginAs(ADMIN_USER);"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "889386208daa0880e48df519cbec3a7fd69440eb",
            "date": "2025-01-11T15:09:40Z",
            "author_login": "semantic-release-bot"
          },
          {
            "sha": "eb54c64a6738dbfddd2b0cd656c59037793bef35",
            "date": "2025-01-11T15:06:43Z",
            "author_login": "adrienjoly"
          },
          {
            "sha": "65fd6f3f4396ff43e0c400582dd667be7b78a283",
            "date": "2025-01-11T09:57:00Z",
            "author_login": "semantic-release-bot"
          },
          {
            "sha": "2db763851ba07f2bfc870c468861a36daf9cca6e",
            "date": "2025-01-11T09:54:06Z",
            "author_login": "adrienjoly"
          },
          {
            "sha": "dcf0ec95bac4a4a95c28b035e037842fc8fc30ba",
            "date": "2025-01-05T11:33:11Z",
            "author_login": "semantic-release-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-285",
    "description": "openwhyd is vulnerable to Improper Authorization",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-03T15:15:08.480",
    "last_modified": "2024-11-21T06:22:36.013",
    "fix_date": "2021-12-26T20:17:12Z"
  },
  "references": [
    {
      "url": "https://github.com/openwhyd/openwhyd/commit/102a97bb082edc831cf35d27f9e5c4f55f10ae85",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d66f90d6-1b5f-440d-8be6-cdffc9d4587e",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openwhyd/openwhyd/commit/102a97bb082edc831cf35d27f9e5c4f55f10ae85",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d66f90d6-1b5f-440d-8be6-cdffc9d4587e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.043906",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openwhyd",
    "owner": "openwhyd",
    "created_at": "2016-07-18T09:46:19Z",
    "updated_at": "2025-01-11T15:09:44Z",
    "pushed_at": "2025-01-11T15:09:41Z",
    "size": 45987,
    "stars": 403,
    "forks": 74,
    "open_issues": 68,
    "watchers": 403,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "JavaScript": 1393011,
      "HTML": 442405,
      "CSS": 191387,
      "TypeScript": 72923,
      "Shell": 29462,
      "Makefile": 9432,
      "Dockerfile": 1549,
      "Python": 1372,
      "Gnuplot": 1289
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T19:30:37.974723"
  }
}