{
  "cve_id": "CVE-2021-3852",
  "github_data": {
    "repository": "weseek/growi",
    "fix_commit": "863bfd7f622f413bd159b9446166fb1ce78ec863",
    "related_commits": [
      "863bfd7f622f413bd159b9446166fb1ce78ec863",
      "863bfd7f622f413bd159b9446166fb1ce78ec863"
    ],
    "patch_url": "https://github.com/weseek/growi/commit/863bfd7f622f413bd159b9446166fb1ce78ec863.patch",
    "fix_commit_details": {
      "sha": "863bfd7f622f413bd159b9446166fb1ce78ec863",
      "commit_date": "2021-10-08T11:19:17Z",
      "author": {
        "login": "yuki-takei",
        "type": "User",
        "stats": {
          "total_commits": 15406,
          "average_weekly_commits": 28.424354243542435,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 398
        }
      },
      "commit_message": {
        "title": "imprv: Permissions to operate comment (#4466)",
        "length": 151,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 65,
        "additions": 30,
        "deletions": 35
      },
      "files": [
        {
          "filename": "packages/app/src/client/services/CommentContainer.js",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": "@@ -132,11 +132,9 @@ export default class CommentContainer extends Container {\n     return this.appContainer.apiPost('/comments.update', {\n       commentForm: {\n         comment,\n-        page_id: pageId,\n-        revision_id: revisionId,\n         is_markdown: isMarkdown,\n+        revision_id: revisionId,\n         comment_id: commentId,\n-        author,\n       },\n     })\n       .then((res) => {"
        },
        {
          "filename": "packages/app/src/components/PageComment/Comment.jsx",
          "status": "modified",
          "additions": 1,
          "deletions": 5,
          "patch": "@@ -73,10 +73,6 @@ class Comment extends React.PureComponent {\n     interceptorManager.process('postRenderCommentHtml', this.currentRenderingContext);\n   }\n \n-  checkPermissionToControlComment() {\n-    return this.props.appContainer.isAdmin || this.isCurrentUserEqualsToAuthor();\n-  }\n-\n   isCurrentUserEqualsToAuthor() {\n     const { creator } = this.props.comment;\n     if (creator == null) {\n@@ -210,7 +206,7 @@ class Comment extends React.PureComponent {\n                   </UncontrolledTooltip>\n                 </span>\n               </div>\n-              {this.checkPermissionToControlComment() && (\n+              {this.isCurrentUserEqualsToAuthor() && (\n                 <CommentControl\n                   onClickDeleteBtn={this.deleteBtnClickedHandler}\n                   onClickEditBtn={() => this.setState({ isReEdit: true })}"
        },
        {
          "filename": "packages/app/src/server/models/comment.js",
          "status": "modified",
          "additions": 0,
          "deletions": 10,
          "patch": "@@ -65,16 +65,6 @@ module.exports = function(crowi) {\n     }));\n   };\n \n-  commentSchema.statics.updateCommentsByPageId = function(comment, isMarkdown, commentId) {\n-    const Comment = this;\n-\n-    return Comment.findOneAndUpdate(\n-      { _id: commentId },\n-      { $set: { comment, isMarkdown } },\n-    );\n-\n-  };\n-\n   commentSchema.statics.removeCommentsByPageId = function(pageId) {\n     const Comment = this;\n "
        },
        {
          "filename": "packages/app/src/server/routes/comment.js",
          "status": "modified",
          "additions": 28,
          "deletions": 17,
          "patch": "@@ -310,10 +310,10 @@ module.exports = function(crowi, app) {\n    *                            $ref: '#/components/schemas/Page/properties/_id'\n    *                          revision_id:\n    *                            $ref: '#/components/schemas/Revision/properties/_id'\n+   *                          comment_id:\n+   *                            $ref: '#/components/schemas/Comment/properties/_id'\n    *                          comment:\n    *                            $ref: '#/components/schemas/Comment/properties/comment'\n-   *                          comment_position:\n-   *                            $ref: '#/components/schemas/Comment/properties/commentPosition'\n    *                required:\n    *                  - form\n    *        responses:\n@@ -340,33 +340,41 @@ module.exports = function(crowi, app) {\n   api.update = async function(req, res) {\n     const { commentForm } = req.body;\n \n-    const pageId = commentForm.page_id;\n-    const comment = commentForm.comment;\n+    const commentStr = commentForm.comment;\n     const isMarkdown = commentForm.is_markdown;\n     const commentId = commentForm.comment_id;\n-    const author = commentForm.author;\n+    const revision = commentForm.revision_id;\n \n-    if (comment === '') {\n+    if (commentStr === '') {\n       return res.json(ApiResponse.error('Comment text is required'));\n     }\n \n     if (commentId == null) {\n       return res.json(ApiResponse.error('\\'comment_id\\' is undefined'));\n     }\n \n-    if (author !== req.user.username) {\n-      return res.json(ApiResponse.error('Only the author can edit'));\n-    }\n-\n-    // check whether accessible\n-    const isAccessible = await Page.isAccessiblePageByViewer(pageId, req.user);\n-    if (!isAccessible) {\n-      return res.json(ApiResponse.error('Current user is not accessible to this page.'));\n-    }\n-\n     let updatedComment;\n     try {\n-      updatedComment = await Comment.updateCommentsByPageId(comment, isMarkdown, commentId);\n+      const comment = await Comment.findById(commentId).exec();\n+\n+      if (comment == null) {\n+        throw new Error('This comment does not exist.');\n+      }\n+\n+      // check whether accessible\n+      const pageId = comment.page;\n+      const isAccessible = await Page.isAccessiblePageByViewer(pageId, req.user);\n+      if (!isAccessible) {\n+        throw new Error('Current user is not accessible to this page.');\n+      }\n+      if (req.user.id !== comment.creator.toString()) {\n+        throw new Error('Current user is not operatable to this comment.');\n+      }\n+\n+      updatedComment = await Comment.findOneAndUpdate(\n+        { _id: commentId },\n+        { $set: { comment: commentStr, isMarkdown, revision } },\n+      );\n     }\n     catch (err) {\n       logger.error(err);\n@@ -438,6 +446,9 @@ module.exports = function(crowi, app) {\n       if (!isAccessible) {\n         throw new Error('Current user is not accessible to this page.');\n       }\n+      if (req.user.id !== comment.creator.toString()) {\n+        throw new Error('Current user is not operatable to this comment.');\n+      }\n \n       await comment.removeWithReplies();\n       await Page.updateCommentCount(comment.page);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "cc7a2bc97103363624ca3942ef6fd76797fe4481",
            "date": "2025-01-09T02:31:12Z",
            "author_login": "mergify[bot]"
          },
          {
            "sha": "ac27a76d8819144271ba189a5dc338729846f0d3",
            "date": "2025-01-09T01:47:43Z",
            "author_login": "miya"
          },
          {
            "sha": "7606aac4f2b083a6e52683279e5dc5f629ea635e",
            "date": "2025-01-08T09:11:05Z",
            "author_login": "miya"
          },
          {
            "sha": "d43bb399570ed04ab3163fff8ba6bca3de1c09f9",
            "date": "2025-01-08T07:41:01Z",
            "author_login": "miya"
          },
          {
            "sha": "903e5c6e5d178930181916d2b5f0a7994e2a9004",
            "date": "2025-01-08T07:40:42Z",
            "author_login": "miya"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-639",
    "description": "growi is vulnerable to Authorization Bypass Through User-Controlled Key",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-12T11:15:08.140",
    "last_modified": "2024-11-21T06:22:39.397",
    "fix_date": "2021-10-08T11:19:17Z"
  },
  "references": [
    {
      "url": "https://github.com/weseek/growi/commit/863bfd7f622f413bd159b9446166fb1ce78ec863",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d44def81-2834-4031-9037-e923975c3852",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/weseek/growi/commit/863bfd7f622f413bd159b9446166fb1ce78ec863",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d44def81-2834-4031-9037-e923975c3852",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.069976",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "growi",
    "owner": "weseek",
    "created_at": "2017-02-16T17:15:47Z",
    "updated_at": "2025-01-09T02:31:17Z",
    "pushed_at": "2025-01-10T10:29:36Z",
    "size": 153070,
    "stars": 1336,
    "forks": 218,
    "open_issues": 74,
    "watchers": 1336,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "dev/4.5.x",
      "dev/5.1.x",
      "dev/6.0.x",
      "dev/6.1.x",
      "dev/6.2.x",
      "dev/6.3.x",
      "dev/7.0.x"
    ],
    "languages": {
      "TypeScript": 3883371,
      "JavaScript": 1623383,
      "SCSS": 165562,
      "EJS": 28044,
      "Dockerfile": 3421,
      "HCL": 2058,
      "Shell": 1906,
      "HTML": 501
    },
    "commit_activity": {
      "total_commits_last_year": 4948,
      "avg_commits_per_week": 95.15384615384616,
      "days_active_last_year": 270
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:19:46.286133"
  }
}