{
  "cve_id": "CVE-2021-3859",
  "github_data": {
    "repository": "undertow-io/undertow",
    "fix_commit": "e43f0ada3f4da6e8579e0020cec3cb1a81e487c2",
    "related_commits": [
      "e43f0ada3f4da6e8579e0020cec3cb1a81e487c2",
      "e43f0ada3f4da6e8579e0020cec3cb1a81e487c2"
    ],
    "patch_url": "https://github.com/undertow-io/undertow/commit/e43f0ada3f4da6e8579e0020cec3cb1a81e487c2.patch",
    "fix_commit_details": {
      "sha": "e43f0ada3f4da6e8579e0020cec3cb1a81e487c2",
      "commit_date": "2021-09-16T12:18:16Z",
      "author": {
        "login": "rmartinc",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[UNDERTOW-1979] CVE-2021-3859 continuation frames are not read correctly",
        "length": 72,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 324,
        "additions": 321,
        "deletions": 3
      },
      "files": [
        {
          "filename": "core/src/main/java/io/undertow/protocols/http2/HpackEncoder.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -163,6 +163,7 @@ public State encode(HeaderMap headers, ByteBuffer target) {\n             if (headers != currentHeaders) {\n                 throw new IllegalStateException();\n             }\n+            it = headers.fiNext(it);\n         }\n         while (it != -1) {\n             HeaderValues values = headers.fiCurrent(it);\n@@ -239,7 +240,6 @@ public State encode(HeaderMap headers, ByteBuffer target) {\n                         }\n                     }\n                     if(overflowing) {\n-                        it = headers.fiNext(it);\n                         this.headersIterator = it;\n                         this.overflowLength = current.position();\n                         return State.OVERFLOW;"
        },
        {
          "filename": "core/src/main/java/io/undertow/protocols/http2/Http2Channel.java",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -538,6 +538,16 @@ protected AbstractHttp2StreamSourceChannel createChannelImpl(FrameHeaderData fra\n \n     @Override\n     protected FrameHeaderData parseFrame(ByteBuffer data) throws IOException {\n+        Http2FrameHeaderParser frameParser;\n+        do {\n+            frameParser = parseFrameNoContinuation(data);\n+            // if the frame requires continuation and there is remaining data in the buffer\n+            // it should be consumed cos spec ensures the next frame is the continuation\n+        } while(frameParser != null && frameParser.getContinuationParser() != null && data.hasRemaining());\n+        return frameParser;\n+    }\n+\n+    private Http2FrameHeaderParser parseFrameNoContinuation(ByteBuffer data) throws IOException {\n         if (prefaceCount < PREFACE_BYTES.length) {\n             while (data.hasRemaining() && prefaceCount < PREFACE_BYTES.length) {\n                 if (data.get() != PREFACE_BYTES[prefaceCount]) {\n@@ -575,10 +585,8 @@ protected FrameHeaderData parseFrame(ByteBuffer data) throws IOException {\n         }\n         if (frameParser.getContinuationParser() != null) {\n             this.continuationParser = frameParser.getContinuationParser();\n-            return null;\n         }\n         return frameParser;\n-\n     }\n \n     protected void lastDataRead() {"
        },
        {
          "filename": "core/src/test/java/io/undertow/client/http/H2CUpgradeContinuationTestCase.java",
          "status": "added",
          "additions": 310,
          "deletions": 0,
          "patch": "@@ -0,0 +1,310 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2021 Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.undertow.client.http;\n+\n+import io.undertow.Undertow;\n+import io.undertow.UndertowOptions;\n+import io.undertow.client.ClientCallback;\n+import io.undertow.client.ClientConnection;\n+import io.undertow.client.ClientExchange;\n+import io.undertow.client.ClientRequest;\n+import io.undertow.client.ClientResponse;\n+import io.undertow.client.UndertowClient;\n+import io.undertow.connector.ByteBufferPool;\n+import io.undertow.io.Receiver;\n+import io.undertow.io.Sender;\n+import io.undertow.protocols.ssl.UndertowXnioSsl;\n+import io.undertow.server.DefaultByteBufferPool;\n+import io.undertow.server.HttpHandler;\n+import io.undertow.server.HttpServerExchange;\n+import io.undertow.server.handlers.PathHandler;\n+import io.undertow.server.protocol.http2.Http2UpgradeHandler;\n+import io.undertow.testutils.DebuggingSlicePool;\n+import io.undertow.testutils.DefaultServer;\n+import io.undertow.testutils.HttpOneOnly;\n+import io.undertow.util.AttachmentKey;\n+import io.undertow.util.HeaderValues;\n+import io.undertow.util.Headers;\n+import io.undertow.util.HttpString;\n+import io.undertow.util.Methods;\n+import io.undertow.util.StatusCodes;\n+import io.undertow.util.StringReadChannelListener;\n+import io.undertow.util.StringWriteChannelListener;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.xnio.ChannelListeners;\n+import org.xnio.IoUtils;\n+import org.xnio.OptionMap;\n+import org.xnio.Options;\n+import org.xnio.Xnio;\n+import org.xnio.XnioWorker;\n+import org.xnio.channels.StreamSinkChannel;\n+\n+/**\n+ * <p>Test that uses H2C upgrade and tries to send different number of headers\n+ * for a GET/POST request. The idea is that the byte buffer used in the client\n+ * and server is small. That way when sending a big number of headers the\n+ * HEADERS frame is not enough to contain all the data and some CONTINUATION\n+ * frames are needed. The test method also tries with different sizes of DATA\n+ * to force several DATA frames to be sent when using POST method.</p>\n+ *\n+ * @author rmartinc\n+ */\n+@RunWith(DefaultServer.class)\n+@HttpOneOnly\n+public class H2CUpgradeContinuationTestCase {\n+\n+    private static final String HEADER_PREFFIX = \"custom-header-\";\n+    private static final String ECHO_PATH = \"/echo\";\n+    private static final AttachmentKey<String> RESPONSE_BODY = AttachmentKey.create(String.class);\n+\n+    private static ByteBufferPool smallPool;\n+    private static XnioWorker worker;\n+    private static Undertow server;\n+\n+    /**\n+     * Just a handler that receives the request and sends back all the custom\n+     * headers received and (if data received) returns the same data (empty\n+     * response otherwise).\n+     * @param exchange The HttpServerExchange\n+     */\n+    private static void sendEchoResponse(final HttpServerExchange exchange) {\n+        exchange.setStatusCode(StatusCodes.OK);\n+        // add the custom headers received\n+        for (HeaderValues header : exchange.getRequestHeaders()) {\n+            if (header.getFirst().startsWith(HEADER_PREFFIX)) {\n+                exchange.getResponseHeaders().putAll(header.getHeaderName(), header.subList(0, header.size()));\n+            }\n+        }\n+        // response using echo or empty string\n+        if (exchange.getRequestContentLength() > 0) {\n+            exchange.getRequestReceiver().receiveFullString(new Receiver.FullStringCallback() {\n+                @Override\n+                public void handle(HttpServerExchange exchange, String message) {\n+                    exchange.getResponseSender().send(message);\n+                }\n+            });\n+        } else {\n+            final Sender sender = exchange.getResponseSender();\n+            sender.send(\"\");\n+        }\n+    }\n+\n+    /**\n+     * Initializes the server with the H2C handler and adds the echo handler to\n+     * manage the requests.\n+     * @throws IOException Some error\n+     */\n+    @BeforeClass\n+    public static void beforeClass() throws IOException {\n+        // server and client pool is using 1024 for the buffer size\n+        smallPool = new DebuggingSlicePool(new DefaultByteBufferPool(true, 1024, 1000, 10, 100));\n+\n+        final PathHandler path = new PathHandler()\n+                .addExactPath(ECHO_PATH, new HttpHandler() {\n+                    @Override\n+                    public void handleRequest(HttpServerExchange exchange) throws Exception {\n+                        sendEchoResponse(exchange);\n+                    }\n+                });\n+\n+        server = Undertow.builder()\n+                .setByteBufferPool(smallPool)\n+                .addHttpListener(DefaultServer.getHostPort(\"default\") + 1, DefaultServer.getHostAddress(\"default\"), new Http2UpgradeHandler(path))\n+                .setSocketOption(Options.REUSE_ADDRESSES, true)\n+                .build();\n+        server.start();\n+\n+        // Create xnio worker\n+        final Xnio xnio = Xnio.getInstance();\n+        final XnioWorker xnioWorker = xnio.createWorker(null, OptionMap.builder()\n+                .set(Options.WORKER_IO_THREADS, 8)\n+                .set(Options.TCP_NODELAY, true)\n+                .set(Options.KEEP_ALIVE, true)\n+                .getMap());\n+        worker = xnioWorker;\n+    }\n+\n+    /**\n+     * Stops server and worker.\n+     */\n+    @AfterClass\n+    public static void afterClass() {\n+        if (server != null) {\n+            server.stop();\n+        }\n+        if (worker != null) {\n+            worker.shutdown();\n+        }\n+        if (smallPool != null) {\n+            smallPool.close();\n+            smallPool = null;\n+        }\n+    }\n+\n+    /**\n+     * Method that sends a GET or POST request adding count number of custom\n+     * headers and sending contentLength data. GET is used if no content length\n+     * is passed, POST if contentLength is greater than 0.\n+     * @param connection The connection to use\n+     * @param requestCount The number of requests to send\n+     * @param headersCount The number of custom headers to send\n+     * @param contentLength The content length to send (POST method used if >0)\n+     * @throws Exception Some error\n+     */\n+    private void sendRequest(ClientConnection connection, int requestCount, int headersCount, int contentLength) throws Exception {\n+        final CountDownLatch latch = new CountDownLatch(requestCount);\n+        final List<ClientResponse> responses = new CopyOnWriteArrayList<>();\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < contentLength; i++) {\n+            sb.append(i % 10);\n+        }\n+        final String content = sb.length() > 0? sb.toString() : null;\n+        connection.getIoThread().execute(new Runnable() {\n+            @Override\n+            public void run() {\n+                for (int i = 0; i < requestCount; i++) {\n+                    final ClientRequest request = new ClientRequest()\n+                            .setMethod(contentLength > 0 ? Methods.POST : Methods.GET)\n+                            .setPath(ECHO_PATH);\n+                    request.getRequestHeaders().put(Headers.HOST, DefaultServer.getHostAddress());\n+                    if (contentLength > 0) {\n+                        request.getRequestHeaders().put(Headers.CONTENT_LENGTH, contentLength);\n+                    }\n+                    for (int j = 0; j < headersCount; j++) {\n+                        request.getRequestHeaders().put(new HttpString(HEADER_PREFFIX + j), HEADER_PREFFIX + j);\n+                    }\n+                    connection.sendRequest(request, createClientCallback(responses, latch, content));\n+                }\n+            }\n+        });\n+\n+        latch.await(10, TimeUnit.SECONDS);\n+\n+        Assert.assertEquals(\"No responses received from server in 10s\", requestCount, responses.size());\n+        for (int i = 0; i < requestCount; i++) {\n+            Assert.assertEquals(\"Response \" + i + \" code was not OK\", StatusCodes.OK, responses.get(i).getResponseCode());\n+            Assert.assertEquals(\"Incorrect data received for response \" + i, contentLength > 0 ? content : \"\", responses.get(i).getAttachment(RESPONSE_BODY));\n+            int headersReturned = 0;\n+            for (HeaderValues header : responses.get(i).getResponseHeaders()) {\n+                if (header.getFirst().startsWith(HEADER_PREFFIX)) {\n+                    headersReturned += header.size();\n+                }\n+            }\n+            Assert.assertEquals(\"Incorrect number of headers returned for response \" + i, headersCount, headersReturned);\n+        }\n+    }\n+\n+    /**\n+     * The real test that sends several GET and POST requests with different\n+     * number of headers and different content length.\n+     * @throws Exception  Some error\n+     */\n+    @Test\n+    public void testDifferentSizes() throws Exception {\n+        final UndertowClient client = UndertowClient.getInstance();\n+\n+        // the client connection uses the small byte-buffer of 1024 to force the continuation frames\n+        final ClientConnection connection = client.connect(\n+                new URI(\"http://\" + DefaultServer.getHostAddress() + \":\" + (DefaultServer.getHostPort(\"default\") + 1)),\n+                worker, new UndertowXnioSsl(worker.getXnio(), OptionMap.EMPTY, DefaultServer.getClientSSLContext()),\n+                smallPool, OptionMap.create(UndertowOptions.ENABLE_HTTP2, true)).get();\n+        try {\n+            // the first request triggers the upgrade to H2C\n+            sendRequest(connection, 1, 0, 0);\n+            // send several requests with different sizes for headers and data\n+            sendRequest(connection, 10, 10, 0);\n+            sendRequest(connection, 10, 100, 0);\n+            sendRequest(connection, 10, 150, 0);\n+            sendRequest(connection, 10, 1, 10);\n+            sendRequest(connection, 10, 0, 2000);\n+            sendRequest(connection, 10, 150, 2000);\n+        } finally {\n+            IoUtils.safeClose(connection);\n+        }\n+    }\n+\n+    /**\n+     * Create the callback to receive the response and assign it to the list.\n+     * @param responses The list where the response will be added\n+     * @param latch The latch to count down when the response is received\n+     * @param message The message to send if it's a POST message (if null nothing is send)\n+     * @return The created callback\n+     */\n+    private static ClientCallback<ClientExchange> createClientCallback(final List<ClientResponse> responses, final CountDownLatch latch, String message) {\n+        return new ClientCallback<ClientExchange>() {\n+            @Override\n+            public void completed(ClientExchange result) {\n+                if (message != null) {\n+                    new StringWriteChannelListener(message).setup(result.getRequestChannel());\n+                }\n+                result.setResponseListener(new ClientCallback<ClientExchange>() {\n+                    @Override\n+                    public void completed(final ClientExchange result) {\n+                        responses.add(result.getResponse());\n+                        new StringReadChannelListener(result.getConnection().getBufferPool()) {\n+\n+                            @Override\n+                            protected void stringDone(String string) {\n+                                result.getResponse().putAttachment(RESPONSE_BODY, string);\n+                                latch.countDown();\n+                            }\n+\n+                            @Override\n+                            protected void error(IOException e) {\n+                                e.printStackTrace();\n+                                latch.countDown();\n+                            }\n+                        }.setup(result.getResponseChannel());\n+                    }\n+\n+                    @Override\n+                    public void failed(IOException e) {\n+                        e.printStackTrace();\n+                        latch.countDown();\n+                    }\n+                });\n+                try {\n+                    result.getRequestChannel().shutdownWrites();\n+                    if (!result.getRequestChannel().flush()) {\n+                        result.getRequestChannel().getWriteSetter().set(ChannelListeners.<StreamSinkChannel>flushingChannelListener(null, null));\n+                        result.getRequestChannel().resumeWrites();\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                    latch.countDown();\n+                }\n+            }\n+\n+            @Override\n+            public void failed(IOException e) {\n+                e.printStackTrace();\n+                latch.countDown();\n+            }\n+        };\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6ae61c6af88d2a8341922ccd0de98926e8349543",
            "date": "2024-12-06T13:14:17Z",
            "author_login": "baranowb"
          },
          {
            "sha": "e9c4ed891ba910e557ce8ee1491d57635cfe6a22",
            "date": "2024-12-04T11:29:37Z",
            "author_login": "ropalka"
          },
          {
            "sha": "84c2d6ca66c7a4882f4de212a621c0682bbe8635",
            "date": "2024-12-04T09:33:21Z",
            "author_login": "fl4via"
          },
          {
            "sha": "a4720e31097e51d1dc72596ccbb9e0e7c90e3bf3",
            "date": "2024-11-28T08:56:47Z",
            "author_login": "baranowb"
          },
          {
            "sha": "29fc22ca79cf4f0a96c0e9d141f418a25455e8cb",
            "date": "2024-11-27T07:41:41Z",
            "author_login": "baranowb"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-214",
    "description": "A flaw was found in Undertow that tripped the client-side invocation timeout with certain calls made over HTTP2. This flaw allows an attacker to carry out denial of service attacks.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-26T16:15:09.623",
    "last_modified": "2024-11-21T06:22:40.440",
    "fix_date": "2021-09-16T12:18:16Z"
  },
  "references": [
    {
      "url": "https://access.redhat.com/security/cve/CVE-2021-3859",
      "source": "secalert@redhat.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2010378",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/undertow-io/undertow/commit/e43f0ada3f4da6e8579e0020cec3cb1a81e487c2",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/undertow-io/undertow/pull/1296",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://issues.redhat.com/browse/UNDERTOW-1979",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20221201-0004/",
      "source": "secalert@redhat.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://access.redhat.com/security/cve/CVE-2021-3859",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2010378",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/undertow-io/undertow/commit/e43f0ada3f4da6e8579e0020cec3cb1a81e487c2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/undertow-io/undertow/pull/1296",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://issues.redhat.com/browse/UNDERTOW-1979",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20221201-0004/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.025187",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "undertow",
    "owner": "undertow-io",
    "created_at": "2012-07-19T00:52:44Z",
    "updated_at": "2025-01-06T03:33:15Z",
    "pushed_at": "2024-12-06T13:14:17Z",
    "size": 27427,
    "stars": 3615,
    "forks": 1009,
    "open_issues": 64,
    "watchers": 3615,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.0.x",
      "1.1.x",
      "1.2.x",
      "1.3.x",
      "1.4.x",
      "1.4.18.x",
      "main"
    ],
    "languages": {
      "Java": 8854425,
      "HTML": 1782,
      "Shell": 86
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:58:25.169097"
  }
}