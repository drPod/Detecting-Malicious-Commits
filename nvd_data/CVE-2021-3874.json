{
  "cve_id": "CVE-2021-3874",
  "github_data": {
    "repository": "bookstackapp/bookstack",
    "fix_commit": "7224fbcc89f00f2b71644e36bb1b1d96addd1d5a",
    "related_commits": [
      "7224fbcc89f00f2b71644e36bb1b1d96addd1d5a",
      "7224fbcc89f00f2b71644e36bb1b1d96addd1d5a"
    ],
    "patch_url": "https://github.com/bookstackapp/bookstack/commit/7224fbcc89f00f2b71644e36bb1b1d96addd1d5a.patch",
    "fix_commit_details": {
      "sha": "7224fbcc89f00f2b71644e36bb1b1d96addd1d5a",
      "commit_date": "2021-10-08T16:47:14Z",
      "author": {
        "login": "ssddanbrown",
        "type": "User",
        "stats": {
          "total_commits": 3432,
          "average_weekly_commits": 6.905432595573441,
          "total_additions": 633335,
          "total_deletions": 385989,
          "weeks_active": 420
        }
      },
      "commit_message": {
        "title": "Added protections against path traversal in file system operations",
        "length": 651,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 146,
        "additions": 92,
        "deletions": 54
      },
      "files": [
        {
          "filename": "app/Config/filesystems.php",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -37,9 +37,14 @@\n             'root'   => public_path(),\n         ],\n \n-        'local_secure' => [\n+        'local_secure_attachments' => [\n             'driver' => 'local',\n-            'root'   => storage_path(),\n+            'root'   => storage_path('uploads/files/'),\n+        ],\n+\n+        'local_secure_images' => [\n+            'driver' => 'local',\n+            'root'   => storage_path('uploads/images/'),\n         ],\n \n         's3' => ["
        },
        {
          "filename": "app/Uploads/AttachmentService.php",
          "status": "modified",
          "additions": 41,
          "deletions": 36,
          "patch": "@@ -9,6 +9,7 @@\n use Illuminate\\Contracts\\Filesystem\\Filesystem as FileSystemInstance;\n use Illuminate\\Support\\Facades\\Log;\n use Illuminate\\Support\\Str;\n+use League\\Flysystem\\Util;\n use Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\n \n class AttachmentService\n@@ -27,15 +28,39 @@ public function __construct(FileSystem $fileSystem)\n      * Get the storage that will be used for storing files.\n      */\n     protected function getStorage(): FileSystemInstance\n+    {\n+        return $this->fileSystem->disk($this->getStorageDiskName());\n+    }\n+\n+    /**\n+     * Get the name of the storage disk to use.\n+     */\n+    protected function getStorageDiskName(): string\n     {\n         $storageType = config('filesystems.attachments');\n \n-        // Override default location if set to local public to ensure not visible.\n-        if ($storageType === 'local') {\n-            $storageType = 'local_secure';\n+        // Change to our secure-attachment disk if any of the local options\n+        // are used to prevent escaping that location.\n+        if ($storageType === 'local' || $storageType === 'local_secure') {\n+            $storageType = 'local_secure_attachments';\n+        }\n+\n+        return $storageType;\n+    }\n+\n+    /**\n+     * Change the originally provided path to fit any disk-specific requirements.\n+     * This also ensures the path is kept to the expected root folders.\n+     */\n+    protected function adjustPathForStorageDisk(string $path): string\n+    {\n+        $path = Util::normalizePath(str_replace('uploads/files/', '', $path));\n+\n+        if ($this->getStorageDiskName() === 'local_secure_attachments') {\n+            return $path;\n         }\n \n-        return $this->fileSystem->disk($storageType);\n+        return 'uploads/files/' . $path;\n     }\n \n     /**\n@@ -45,26 +70,21 @@ protected function getStorage(): FileSystemInstance\n      */\n     public function getAttachmentFromStorage(Attachment $attachment): string\n     {\n-        return $this->getStorage()->get($attachment->path);\n+        return $this->getStorage()->get($this->adjustPathForStorageDisk($attachment->path));\n     }\n \n     /**\n      * Store a new attachment upon user upload.\n-     *\n-     * @param UploadedFile $uploadedFile\n-     * @param int          $page_id\n-     *\n      * @throws FileUploadException\n-     *\n-     * @return Attachment\n      */\n-    public function saveNewUpload(UploadedFile $uploadedFile, $page_id)\n+    public function saveNewUpload(UploadedFile $uploadedFile, int $page_id): Attachment\n     {\n         $attachmentName = $uploadedFile->getClientOriginalName();\n         $attachmentPath = $this->putFileInStorage($uploadedFile);\n-        $largestExistingOrder = Attachment::where('uploaded_to', '=', $page_id)->max('order');\n+        $largestExistingOrder = Attachment::query()->where('uploaded_to', '=', $page_id)->max('order');\n \n-        $attachment = Attachment::forceCreate([\n+        /** @var Attachment $attachment */\n+        $attachment = Attachment::query()->forceCreate([\n             'name'        => $attachmentName,\n             'path'        => $attachmentPath,\n             'extension'   => $uploadedFile->getClientOriginalExtension(),\n@@ -78,17 +98,12 @@ public function saveNewUpload(UploadedFile $uploadedFile, $page_id)\n     }\n \n     /**\n-     * Store a upload, saving to a file and deleting any existing uploads\n+     * Store an upload, saving to a file and deleting any existing uploads\n      * attached to that file.\n      *\n-     * @param UploadedFile $uploadedFile\n-     * @param Attachment   $attachment\n-     *\n      * @throws FileUploadException\n-     *\n-     * @return Attachment\n      */\n-    public function saveUpdatedUpload(UploadedFile $uploadedFile, Attachment $attachment)\n+    public function saveUpdatedUpload(UploadedFile $uploadedFile, Attachment $attachment): Attachment\n     {\n         if (!$attachment->external) {\n             $this->deleteFileInStorage($attachment);\n@@ -159,9 +174,6 @@ public function updateFile(Attachment $attachment, array $requestData): Attachme\n \n     /**\n      * Delete a File from the database and storage.\n-     *\n-     * @param Attachment $attachment\n-     *\n      * @throws Exception\n      */\n     public function deleteFile(Attachment $attachment)\n@@ -179,45 +191,38 @@ public function deleteFile(Attachment $attachment)\n     /**\n      * Delete a file from the filesystem it sits on.\n      * Cleans any empty leftover folders.\n-     *\n-     * @param Attachment $attachment\n      */\n     protected function deleteFileInStorage(Attachment $attachment)\n     {\n         $storage = $this->getStorage();\n-        $dirPath = dirname($attachment->path);\n+        $dirPath = $this->adjustPathForStorageDisk(dirname($attachment->path));\n \n-        $storage->delete($attachment->path);\n+        $storage->delete($this->adjustPathForStorageDisk($attachment->path));\n         if (count($storage->allFiles($dirPath)) === 0) {\n             $storage->deleteDirectory($dirPath);\n         }\n     }\n \n     /**\n      * Store a file in storage with the given filename.\n-     *\n-     * @param UploadedFile $uploadedFile\n-     *\n      * @throws FileUploadException\n-     *\n-     * @return string\n      */\n-    protected function putFileInStorage(UploadedFile $uploadedFile)\n+    protected function putFileInStorage(UploadedFile $uploadedFile): string\n     {\n         $attachmentData = file_get_contents($uploadedFile->getRealPath());\n \n         $storage = $this->getStorage();\n         $basePath = 'uploads/files/' . date('Y-m-M') . '/';\n \n         $uploadFileName = Str::random(16) . '.' . $uploadedFile->getClientOriginalExtension();\n-        while ($storage->exists($basePath . $uploadFileName)) {\n+        while ($storage->exists($this->adjustPathForStorageDisk($basePath . $uploadFileName))) {\n             $uploadFileName = Str::random(3) . $uploadFileName;\n         }\n \n         $attachmentPath = $basePath . $uploadFileName;\n \n         try {\n-            $storage->put($attachmentPath, $attachmentData);\n+            $storage->put($this->adjustPathForStorageDisk($attachmentPath), $attachmentData);\n         } catch (Exception $e) {\n             Log::error('Error when attempting file upload:' . $e->getMessage());\n "
        },
        {
          "filename": "app/Uploads/ImageService.php",
          "status": "modified",
          "additions": 44,
          "deletions": 16,
          "patch": "@@ -14,6 +14,7 @@\n use Illuminate\\Support\\Str;\n use Intervention\\Image\\Exception\\NotSupportedException;\n use Intervention\\Image\\ImageManager;\n+use League\\Flysystem\\Util;\n use Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\n \n class ImageService\n@@ -38,16 +39,43 @@ public function __construct(Image $image, ImageManager $imageTool, FileSystem $f\n     /**\n      * Get the storage that will be used for storing images.\n      */\n-    protected function getStorage(string $type = ''): FileSystemInstance\n+    protected function getStorage(string $imageType = ''): FileSystemInstance\n+    {\n+        return $this->fileSystem->disk($this->getStorageDiskName($imageType));\n+    }\n+\n+    /**\n+     * Change the originally provided path to fit any disk-specific requirements.\n+     * This also ensures the path is kept to the expected root folders.\n+     */\n+    protected function adjustPathForStorageDisk(string $path, string $imageType = ''): string\n+    {\n+        $path = Util::normalizePath(str_replace('uploads/images/', '', $path));\n+\n+        if ($this->getStorageDiskName($imageType) === 'local_secure_images') {\n+            return $path;\n+        }\n+\n+        return 'uploads/images/' . $path;\n+    }\n+\n+    /**\n+     * Get the name of the storage disk to use.\n+     */\n+    protected function getStorageDiskName(string $imageType): string\n     {\n         $storageType = config('filesystems.images');\n \n         // Ensure system images (App logo) are uploaded to a public space\n-        if ($type === 'system' && $storageType === 'local_secure') {\n+        if ($imageType === 'system' && $storageType === 'local_secure') {\n             $storageType = 'local';\n         }\n \n-        return $this->fileSystem->disk($storageType);\n+        if ($storageType === 'local_secure') {\n+            $storageType = 'local_secure_images';\n+        }\n+\n+        return $storageType;\n     }\n \n     /**\n@@ -104,7 +132,7 @@ public function saveNew(string $imageName, string $imageData, string $type, int\n \n         $imagePath = '/uploads/images/' . $type . '/' . date('Y-m') . '/';\n \n-        while ($storage->exists($imagePath . $fileName)) {\n+        while ($storage->exists($this->adjustPathForStorageDisk($imagePath . $fileName, $type))) {\n             $fileName = Str::random(3) . $fileName;\n         }\n \n@@ -114,7 +142,7 @@ public function saveNew(string $imageName, string $imageData, string $type, int\n         }\n \n         try {\n-            $this->saveImageDataInPublicSpace($storage, $fullPath, $imageData);\n+            $this->saveImageDataInPublicSpace($storage, $this->adjustPathForStorageDisk($fullPath, $type), $imageData);\n         } catch (Exception $e) {\n             \\Log::error('Error when attempting image upload:' . $e->getMessage());\n \n@@ -216,13 +244,13 @@ public function getThumbnail(Image $image, $width = 220, $height = 220, $keepRat\n         }\n \n         $storage = $this->getStorage($image->type);\n-        if ($storage->exists($thumbFilePath)) {\n+        if ($storage->exists($this->adjustPathForStorageDisk($thumbFilePath, $image->type))) {\n             return $this->getPublicUrl($thumbFilePath);\n         }\n \n-        $thumbData = $this->resizeImage($storage->get($imagePath), $width, $height, $keepRatio);\n+        $thumbData = $this->resizeImage($storage->get($this->adjustPathForStorageDisk($imagePath, $image->type)), $width, $height, $keepRatio);\n \n-        $this->saveImageDataInPublicSpace($storage, $thumbFilePath, $thumbData);\n+        $this->saveImageDataInPublicSpace($storage, $this->adjustPathForStorageDisk($thumbFilePath, $image->type), $thumbData);\n         $this->cache->put('images-' . $image->id . '-' . $thumbFilePath, $thumbFilePath, 60 * 60 * 72);\n \n         return $this->getPublicUrl($thumbFilePath);\n@@ -279,10 +307,8 @@ protected function resizeImage(string $imageData, $width = 220, $height = null,\n      */\n     public function getImageData(Image $image): string\n     {\n-        $imagePath = $image->path;\n         $storage = $this->getStorage();\n-\n-        return $storage->get($imagePath);\n+        return $storage->get($this->adjustPathForStorageDisk($image->path, $image->type));\n     }\n \n     /**\n@@ -292,17 +318,18 @@ public function getImageData(Image $image): string\n      */\n     public function destroy(Image $image)\n     {\n-        $this->destroyImagesFromPath($image->path);\n+        $this->destroyImagesFromPath($image->path, $image->type);\n         $image->delete();\n     }\n \n     /**\n      * Destroys an image at the given path.\n      * Searches for image thumbnails in addition to main provided path.\n      */\n-    protected function destroyImagesFromPath(string $path): bool\n+    protected function destroyImagesFromPath(string $path, string $imageType): bool\n     {\n-        $storage = $this->getStorage();\n+        $path = $this->adjustPathForStorageDisk($path, $imageType);\n+        $storage = $this->getStorage($imageType);\n \n         $imageFolder = dirname($path);\n         $imageFileName = basename($path);\n@@ -326,7 +353,7 @@ protected function destroyImagesFromPath(string $path): bool\n     }\n \n     /**\n-     * Check whether or not a folder is empty.\n+     * Check whether a folder is empty.\n      */\n     protected function isFolderEmpty(FileSystemInstance $storage, string $path): bool\n     {\n@@ -374,7 +401,7 @@ public function deleteUnusedImages(bool $checkRevisions = true, bool $dryRun = t\n     }\n \n     /**\n-     * Convert a image URI to a Base64 encoded string.\n+     * Convert an image URI to a Base64 encoded string.\n      * Attempts to convert the URL to a system storage url then\n      * fetch the data from the disk or storage location.\n      * Returns null if the image data cannot be fetched from storage.\n@@ -388,6 +415,7 @@ public function imageUriToBase64(string $uri): ?string\n             return null;\n         }\n \n+        $storagePath = $this->adjustPathForStorageDisk($storagePath);\n         $storage = $this->getStorage();\n         $imageData = null;\n         if ($storage->exists($storagePath)) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "786a434c03faa996e630f4a0a523567d3b093f43",
            "date": "2025-01-14T14:56:43Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "25c4f4b02ba06f66f5239de48ae005f895146f8d",
            "date": "2025-01-14T14:53:10Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "481580be172a4813ee98ad1b945d12d731e71cdb",
            "date": "2025-01-13T16:51:07Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "593645acfe8521db97d7469c92546c8529703969",
            "date": "2025-01-13T14:30:53Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "b9751807e7bad4b7d477b6977f630881f730abad",
            "date": "2025-01-13T13:27:32Z",
            "author_login": "ssddanbrown"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-22",
    "description": "bookstack is vulnerable to Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-10-15T14:15:07.757",
    "last_modified": "2024-11-21T06:22:41.867",
    "fix_date": "2021-10-08T16:47:14Z"
  },
  "references": [
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/7224fbcc89f00f2b71644e36bb1b1d96addd1d5a",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/ac268a17-72b5-446f-a09a-9945ef58607a",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/7224fbcc89f00f2b71644e36bb1b1d96addd1d5a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/ac268a17-72b5-446f-a09a-9945ef58607a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.831590",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "BookStack",
    "owner": "bookstackapp",
    "created_at": "2015-08-29T10:26:44Z",
    "updated_at": "2025-01-14T12:14:34Z",
    "pushed_at": "2025-01-13T20:16:47Z",
    "size": 41179,
    "stars": 15786,
    "forks": 1978,
    "open_issues": 598,
    "watchers": 15786,
    "has_security_policy": false,
    "default_branch": "development",
    "protected_branches": [
      "release"
    ],
    "languages": {
      "PHP": 7963438,
      "TypeScript": 1856418,
      "Blade": 444101,
      "JavaScript": 287858,
      "SCSS": 139395,
      "Dockerfile": 1282,
      "Shell": 347
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:05:28.288711"
  }
}