{
  "cve_id": "CVE-2021-3889",
  "github_data": {
    "repository": "bfabiszewski/libmobi",
    "fix_commit": "bec783e6212439a335ba6e8df7ab8ed610ca9a21",
    "related_commits": [
      "bec783e6212439a335ba6e8df7ab8ed610ca9a21",
      "bec783e6212439a335ba6e8df7ab8ed610ca9a21"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "bec783e6212439a335ba6e8df7ab8ed610ca9a21",
      "commit_date": "2021-09-18T19:55:27Z",
      "author": {
        "login": "bfabiszewski",
        "type": "User",
        "stats": {
          "total_commits": 370,
          "average_weekly_commits": 0.6548672566371682,
          "total_additions": 50522,
          "total_deletions": 10757,
          "weeks_active": 78
        }
      },
      "commit_message": {
        "title": "Fix potential out-of-buffer read while parsing corrupt file, closes #35, #36",
        "length": 76,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 12,
        "additions": 8,
        "deletions": 4
      },
      "files": [
        {
          "filename": "src/compression.c",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -141,7 +141,10 @@ static MOBI_RET mobi_decompress_huffman_internal(MOBIBuffer *buf_out, MOBIBuffer\n         if (!(t1 & 0x80)) {\n             /* get offset from mincode, maxcode tables */\n             while (code < huffcdic->mincode_table[code_length]) {\n-                code_length++;\n+                if (++code_length >= HUFF_CODETABLE_SIZE) {\n+                    debug_print(\"Wrong offset to mincode table: %hhu\\n\", code_length);\n+                    return MOBI_DATA_CORRUPT;\n+                }\n             }\n             maxcode = huffcdic->maxcode_table[code_length];\n         }"
        },
        {
          "filename": "src/compression.h",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -20,6 +20,7 @@\n \n /* FIXME: what is the reasonable value? */\n #define MOBI_HUFFMAN_MAXDEPTH 20 /**< Maximal recursion level for huffman decompression routine */\n+#define HUFF_CODETABLE_SIZE 33 /**< Size of min- and maxcode tables */\n \n \n /**\n@@ -30,8 +31,8 @@ typedef struct {\n     size_t index_read; /**< Number of indices parsed, used by parser */\n     size_t code_length; /**< Code length value stored in CDIC record header */\n     uint32_t table1[256]; /**< Table of big-endian indices from HUFF record data1 */\n-    uint32_t mincode_table[33]; /**< Table of big-endian mincodes from HUFF record data2 */\n-    uint32_t maxcode_table[33]; /**< Table of big-endian maxcodes from HUFF record data2 */\n+    uint32_t mincode_table[HUFF_CODETABLE_SIZE]; /**< Table of big-endian mincodes from HUFF record data2 */\n+    uint32_t maxcode_table[HUFF_CODETABLE_SIZE]; /**< Table of big-endian maxcodes from HUFF record data2 */\n     uint16_t *symbol_offsets; /**< Index of symbol offsets parsed from CDIC records (index_count entries) */\n     unsigned char **symbols; /**< Array of pointers to start of symbols data in each CDIC record (index = number of CDIC record) */\n } MOBIHuffCdic;"
        },
        {
          "filename": "src/read.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -589,7 +589,7 @@ MOBI_RET mobi_parse_huff(MOBIHuffCdic *huffcdic, const MOBIPdbRecord *record) {\n     /* read 32 mincode-maxcode pairs from data2 big-endian */\n     huffcdic->mincode_table[0] = 0;\n     huffcdic->maxcode_table[0] = 0xFFFFFFFF;\n-    for (int i = 1; i < 33; i++) {\n+    for (int i = 1; i < HUFF_CODETABLE_SIZE; i++) {\n         const uint32_t mincode = mobi_buffer_get32(buf);\n         const uint32_t maxcode = mobi_buffer_get32(buf);\n         huffcdic->mincode_table[i] =  mincode << (32 - i);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "906274205c11944b628da1c553b255acb1af7c55",
            "date": "2024-10-29T17:49:48Z",
            "author_login": "bfabiszewski"
          },
          {
            "sha": "3c7ae6436b54cc3d18955e40f1e8de7d59497ede",
            "date": "2024-10-29T17:23:57Z",
            "author_login": "bfabiszewski"
          },
          {
            "sha": "ea137c29818b3ff6ab6968a83dfed89716acecfb",
            "date": "2024-07-04T16:27:48Z",
            "author_login": "bfabiszewski"
          },
          {
            "sha": "2e15b158fdd81ebd0f8dd2febfd1aaa80f73c238",
            "date": "2024-06-17T19:14:36Z",
            "author_login": "bfabiszewski"
          },
          {
            "sha": "85dcfe803fc2a21020ddcf15c3eb66b93d388add",
            "date": "2024-06-17T06:10:16Z",
            "author_login": "bfabiszewski"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:H",
    "cwe_id": "CWE-823",
    "description": "libmobi is vulnerable to Use of Out-of-range Pointer Offset",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-10-19T13:15:11.977",
    "last_modified": "2024-11-21T06:22:43.107",
    "fix_date": "2021-09-18T19:55:27Z"
  },
  "references": [
    {
      "url": "https://github.com/bfabiszewski/libmobi/commit/bec783e6212439a335ba6e8df7ab8ed610ca9a21",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/efb3e261-3f7d-4a45-8114-e0ace6b21516",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bfabiszewski/libmobi/commit/bec783e6212439a335ba6e8df7ab8ed610ca9a21",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/efb3e261-3f7d-4a45-8114-e0ace6b21516",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.836450",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "libmobi",
    "owner": "bfabiszewski",
    "created_at": "2014-05-14T10:23:18Z",
    "updated_at": "2025-01-21T10:14:23Z",
    "pushed_at": "2024-10-29T17:50:02Z",
    "size": 48334,
    "stars": 431,
    "forks": 70,
    "open_issues": 2,
    "watchers": 431,
    "has_security_policy": false,
    "default_branch": "public",
    "protected_branches": [],
    "languages": {
      "C": 977087,
      "M4": 13279,
      "Roff": 8058,
      "CMake": 7485,
      "Shell": 5517,
      "Makefile": 4701
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-26T07:50:37.927326"
  }
}