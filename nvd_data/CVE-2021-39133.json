{
  "cve_id": "CVE-2021-39133",
  "github_data": {
    "repository": "rundeck/rundeck",
    "fix_commit": "67c4eedeaf9509fc0b255aff15977a5229ef13b9",
    "related_commits": [
      "67c4eedeaf9509fc0b255aff15977a5229ef13b9",
      "67c4eedeaf9509fc0b255aff15977a5229ef13b9"
    ],
    "patch_url": "https://github.com/rundeck/rundeck/commit/67c4eedeaf9509fc0b255aff15977a5229ef13b9.patch",
    "fix_commit_details": {
      "sha": "67c4eedeaf9509fc0b255aff15977a5229ef13b9",
      "commit_date": "2021-08-13T16:26:03Z",
      "author": {
        "login": "gschueler",
        "type": "User",
        "stats": {
          "total_commits": 13216,
          "average_weekly_commits": 17.739597315436242,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 673
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-3jmw-c69h-426c",
        "length": 99,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 271,
        "additions": 241,
        "deletions": 30
      },
      "files": [
        {
          "filename": "rundeckapp/grails-app/controllers/rundeck/controllers/PluginController.groovy",
          "status": "modified",
          "additions": 34,
          "deletions": 5,
          "patch": "@@ -13,24 +13,31 @@ import com.dtolabs.rundeck.core.plugins.configuration.PluginAdapterUtility\n import grails.converters.JSON\n import groovy.transform.CompileStatic\n import org.springframework.web.multipart.MultipartFile\n+import org.springframework.web.multipart.MultipartHttpServletRequest\n import org.springframework.web.servlet.support.RequestContextUtils\n+import rundeck.services.ApiService\n import rundeck.services.FrameworkService\n import rundeck.services.PluginApiService\n import rundeck.services.PluginService\n import rundeck.services.UiPluginService\n-import rundeck.services.feature.FeatureService\n \n+import javax.servlet.http.HttpServletResponse\n import java.text.SimpleDateFormat\n \n import static org.springframework.http.HttpStatus.NOT_FOUND\n \n class PluginController extends ControllerBase {\n     private static final String RELATIVE_PLUGIN_UPLOAD_DIR = \"var/tmp/pluginUpload\"\n     private static final SimpleDateFormat PLUGIN_DATE_FMT = new SimpleDateFormat(\"EEE MMM dd hh:mm:ss Z yyyy\")\n+    static def allowedMethods = [\n+        installPlugin: ['POST'],\n+        uploadPlugin: ['POST']\n+    ]\n     UiPluginService uiPluginService\n     PluginService pluginService\n     PluginApiService pluginApiService\n     FrameworkService frameworkService\n+    ApiService apiService\n     def featureService\n     AppAuthContextProcessor rundeckAuthContextProcessor\n     AuthorizedServicesProvider rundeckAuthorizedServicesProvider\n@@ -422,13 +429,31 @@ class PluginController extends ControllerBase {\n             stream.close()\n         }\n     }\n+    protected boolean requireAjaxFormToken(){\n+        boolean valid = false\n+        withForm {\n+            g.refreshFormTokensHeader()\n+            valid = true\n+        }.invalidToken {\n+        }\n+        if (!valid) {\n+            apiService.renderErrorFormat(response, [\n+                status: HttpServletResponse.SC_BAD_REQUEST,\n+                code: 'request.error.invalidtoken.message',\n+            ])\n+        }\n+        return valid\n+    }\n \n     def uploadPlugin() {\n \n         if(featureService.featurePresent(Features.PLUGIN_SECURITY)){\n             renderErrorCodeAsJson(\"plugin.error.unauthorized.upload\")\n             return\n         }\n+        if(!requireAjaxFormToken()){\n+            return\n+        }\n \n         AuthContext authContext = rundeckAuthContextProcessor.getAuthContextForSubject(session.subject)\n         boolean authorized = rundeckAuthContextProcessor.authorizeApplicationResourceType(authContext,\n@@ -438,15 +463,16 @@ class PluginController extends ControllerBase {\n             renderErrorCodeAsJson(\"request.error.unauthorized.title\")\n             return\n         }\n-        if(!params.pluginFile || params.pluginFile.isEmpty()) {\n+        if(!(request instanceof MultipartHttpServletRequest && request.getFile('pluginFile'))){\n             renderErrorCodeAsJson(\"plugin.error.missing.upload.file\")\n             return\n         }\n+        def file = request.getFile('pluginFile')\n         ensureUploadLocation()\n-        File tmpFile = new File(frameworkService.getRundeckFramework().baseDir,RELATIVE_PLUGIN_UPLOAD_DIR+\"/\"+params.pluginFile.originalFilename)\n+        File tmpFile = new File(frameworkService.getRundeckFramework().baseDir,RELATIVE_PLUGIN_UPLOAD_DIR+\"/\"+file.originalFilename)\n         if(tmpFile.exists()) tmpFile.delete()\n-        tmpFile << ((MultipartFile)params.pluginFile).inputStream\n-        def errors = validateAndCopyPlugin(params.pluginFile.originalFilename, tmpFile)\n+        tmpFile << file.inputStream\n+        def errors = validateAndCopyPlugin(file.originalFilename, tmpFile)\n         tmpFile.delete()\n         def msg = [:]\n         if(!errors.isEmpty()) {\n@@ -459,6 +485,9 @@ class PluginController extends ControllerBase {\n     }\n \n     def installPlugin() {\n+        if(!requireAjaxFormToken()){\n+            return\n+        }\n         AuthContext authContext = rundeckAuthContextProcessor.getAuthContextForSubject(session.subject)\n         boolean authorized = rundeckAuthContextProcessor.authorizeApplicationResourceType(authContext,\n                                                                                \"system\","
        },
        {
          "filename": "rundeckapp/grails-spa/packages/ui/src/pages/repository/components/PluginURLUploadForm.vue",
          "status": "modified",
          "additions": 29,
          "deletions": 17,
          "patch": "@@ -18,7 +18,7 @@\n   </div>\n </template>\n <script>\n-import axios from \"axios\";\n+import {client} from \"@rundeck/ui-trellis/lib/modules/rundeckClient\"\n export default {\n   name: \"PluginUrlUploadForm\",\n   data() {\n@@ -32,26 +32,38 @@ export default {\n         loadingMessage: \"Installing\",\n         loadingSpinner: true\n       });\n-      axios({\n-        method: \"post\",\n-        headers: {\n-          \"x-rundeck-ajax\": true\n+      client.sendRequest({\n+        baseUrl: window._rundeck.rdBase,\n+        pathTemplate: `/plugin/installPlugin`,\n+        queryParameters: {\n+          pluginUrl: this.pluginURL\n         },\n-        url: `${window._rundeck.rdBase}plugin/installPlugin?pluginUrl=${\n-          this.pluginURL\n-        }`,\n-        withCredentials: true\n+        method: 'POST'\n       }).then(response => {\n-        this.$store.dispatch(\"overlay/openOverlay\");\n-        if (response.data.err) {\n+        if (response.status === 200) {\n+          this.$store.dispatch(\"overlay/openOverlay\");\n+          if (response.parsedBody.err) {\n+            this.$alert({\n+              title: \"Error Uploading\",\n+              content: response.parsedBody.err\n+            });\n+          } else {\n+            this.$alert({\n+              title: \"Plugin Installed\",\n+              content: response.parsedBody.msg\n+            });\n+          }\n+        }else if (response.status >= 300) {\n+          this.$store.dispatch(\"overlay/openOverlay\");\n+          let message = `Error: ${response.status}`\n+          if (response.parsedBody && response.parsedBody.message) {\n+            message = response.parsedBody.message\n+          }else if (response.parsedBody && response.parsedBody.error) {\n+            message = response.parsedBody.error\n+          }\n           this.$alert({\n             title: \"Error Uploading\",\n-            content: response.data.err\n-          });\n-        } else {\n-          this.$alert({\n-            title: \"Plugin Installed\",\n-            content: response.data.msg\n+            content: message\n           });\n         }\n       });"
        },
        {
          "filename": "rundeckapp/grails-spa/packages/ui/src/pages/repository/components/PluginUploadForm.vue",
          "status": "modified",
          "additions": 17,
          "deletions": 1,
          "patch": "@@ -27,6 +27,7 @@\n <script>\n import { mapState, mapActions } from \"vuex\";\n import axios from \"axios\";\n+import {client} from \"@rundeck/ui-trellis/lib/modules/rundeckClient\"\n export default {\n   name: \"UploadPluginForm\",\n   computed: {\n@@ -52,17 +53,22 @@ export default {\n         loadingMessage: \"Installing\",\n         loadingSpinner: true\n       });\n+      //use axios instead of RundeckClient, to allow multipart form with file upload\n       axios({\n         method: \"post\",\n         headers: {\n           \"x-rundeck-ajax\": true,\n-          \"Content-Type\": \"multipart/form-data\"\n+          \"Content-Type\": \"multipart/form-data\",\n+          \"X-RUNDECK-TOKEN-KEY\": client.token,\n+          \"X-RUNDECK-TOKEN-URI\": client.uri\n         },\n         data: formData,\n         url: `${window._rundeck.rdBase}plugin/uploadPlugin`,\n         withCredentials: true\n       }).then(response => {\n         this.$store.dispatch(\"overlay/openOverlay\");\n+        client.token = response.headers['x-rundeck-token-key'] || client.token\n+        client.uri = response.headers['x-rundeck-token-uri'] || client.uri\n         if (response.data.err) {\n           this.$alert({\n             title: \"Error Uploading\",\n@@ -74,6 +80,16 @@ export default {\n             content: response.data.msg\n           });\n         }\n+      }).catch(result=>{\n+        this.$store.dispatch(\"overlay/openOverlay\");\n+        let message=result.message\n+        if(result.response && result.response.data && result.response.data.message){\n+          message=result.response.data.message\n+        }\n+        this.$alert({\n+          title: \"Error Uploading\",\n+          content: message\n+        });\n       });\n     },\n     handleFilesUploads() {"
        },
        {
          "filename": "rundeckapp/src/test/groovy/rundeck/controllers/PluginControllerSpec.groovy",
          "status": "modified",
          "additions": 161,
          "deletions": 7,
          "patch": "@@ -18,14 +18,20 @@ import com.dtolabs.rundeck.core.plugins.configuration.Validator\n import com.dtolabs.rundeck.plugins.notification.NotificationPlugin\n import com.dtolabs.rundeck.core.plugins.DescribedPlugin\n import grails.testing.web.controllers.ControllerUnitTest\n+import org.grails.web.servlet.mvc.SynchronizerTokensHolder\n import org.rundeck.app.authorization.AppAuthContextProcessor\n+import rundeck.UtilityTagLib\n+import rundeck.services.ApiService\n import rundeck.services.FrameworkService\n import rundeck.services.PluginApiService\n import rundeck.services.PluginApiServiceSpec\n import rundeck.services.PluginService\n import rundeck.services.UiPluginService\n import rundeck.services.FrameworkService\n import spock.lang.Specification\n+import spock.lang.Unroll\n+\n+import javax.servlet.http.HttpServletResponse\n \n class PluginControllerSpec extends Specification implements ControllerUnitTest<PluginController> {\n \n@@ -40,6 +46,12 @@ class PluginControllerSpec extends Specification implements ControllerUnitTest<P\n \"actions.entry[dbd3da9c_1].config.actions.type\":\"\",\"actions.entry[dbd3da9c_1].config.actions.config.stringvalue\":\"asdf\",\n \"actions.entry[dbd3da9c_1].config.actions\":\"{stringvalue=asdf}\"},\"report\":{}}'''\n \n+    def setup(){\n+        grailsApplication.config.clear()\n+        grailsApplication.config.rundeck.security.useHMacRequestTokens = 'false'\n+        mockTagLib(UtilityTagLib)\n+    }\n+\n     void \"validate\"() {\n         given:\n             request.content = json.bytes\n@@ -319,8 +331,10 @@ class PluginControllerSpec extends Specification implements ControllerUnitTest<P\n \n         controller.rundeckAuthContextProcessor = Mock(AppAuthContextProcessor)\n         messageSource.addMessage(\"plugin.error.missing.upload.file\",Locale.ENGLISH,\"A plugin file must be specified\")\n-\n+        controller.apiService=Mock(ApiService)\n         when:\n+        request.method='POST'\n+        setupFormTokens(params)\n         controller.uploadPlugin()\n \n         then:\n@@ -339,6 +353,7 @@ class PluginControllerSpec extends Specification implements ControllerUnitTest<P\n         messageSource.addMessage(\"plugin.error.unauthorized.upload\",Locale.ENGLISH,\"Unable to upload plugins\")\n \n         when:\n+            request.method='POST'\n         controller.uploadPlugin()\n \n         then:\n@@ -350,10 +365,12 @@ class PluginControllerSpec extends Specification implements ControllerUnitTest<P\n         setup:\n         controller.frameworkService = Mock(FrameworkService)\n \n-            controller.rundeckAuthContextProcessor = Mock(AppAuthContextProcessor)\n+        controller.rundeckAuthContextProcessor = Mock(AppAuthContextProcessor)\n         messageSource.addMessage(\"plugin.error.missing.url\",Locale.ENGLISH,\"The plugin URL is required\")\n-\n+        controller.apiService=Mock(ApiService)\n         when:\n+        request.method='POST'\n+        setupFormTokens(params)\n         controller.installPlugin()\n \n         then:\n@@ -375,9 +392,10 @@ class PluginControllerSpec extends Specification implements ControllerUnitTest<P\n         }\n         fwksvc.getRundeckFramework() >> fwk\n         controller.frameworkService = fwksvc\n-\n-\n+        controller.apiService=Mock(ApiService)\n         when:\n+        request.method='POST'\n+        setupFormTokens(params)\n         !uploaded.exists()\n         def pluginInputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(PLUGIN_FILE)\n         request.addFile(new GrailsMockMultipartFile(\"pluginFile\",PLUGIN_FILE,\"application/octet-stream\",pluginInputStream))\n@@ -393,6 +411,65 @@ class PluginControllerSpec extends Specification implements ControllerUnitTest<P\n         cleanup:\n         uploaded.delete()\n     }\n+    @Unroll\n+    void \"upload plugin requires POST method\"() {\n+        setup:\n+        def fwksvc = Mock(FrameworkService)\n+\n+        controller.featureService = Mock(FeatureService)\n+            controller.rundeckAuthContextProcessor = Mock(AppAuthContextProcessor)\n+        def fwk = Mock(Framework) {\n+            getBaseDir() >> uploadTestBaseDir\n+            getLibextDir() >> uploadTestTargetDir\n+        }\n+        fwksvc.getRundeckFramework() >> fwk\n+        controller.frameworkService = fwksvc\n+        controller.apiService=Mock(ApiService)\n+        when: \"request made without POST method\"\n+        request.method=method\n+        setupFormTokens(params)\n+        controller.uploadPlugin()\n+\n+        then:\n+        response.status==405\n+        where:\n+            method << ['get', 'put', 'delete', 'head']\n+    }\n+    void \"upload plugin requires synch token\"() {\n+        setup:\n+            File uploaded = new File(uploadTestTargetDir,PLUGIN_FILE)\n+            def fwksvc = Mock(FrameworkService)\n+\n+            controller.featureService = Mock(FeatureService)\n+            controller.rundeckAuthContextProcessor = Mock(AppAuthContextProcessor)\n+            def fwk = Mock(Framework) {\n+                getBaseDir() >> uploadTestBaseDir\n+                getLibextDir() >> uploadTestTargetDir\n+            }\n+            fwksvc.getRundeckFramework() >> fwk\n+            controller.frameworkService = fwksvc\n+            controller.apiService=Mock(ApiService)\n+        when: \"request made without synch token\"\n+            request.method='POST'\n+            !uploaded.exists()\n+            def pluginInputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(PLUGIN_FILE)\n+            request.addFile(new GrailsMockMultipartFile(\"pluginFile\",PLUGIN_FILE,\"application/octet-stream\",pluginInputStream))\n+            controller.uploadPlugin()\n+\n+        then:\n+            0 * controller.rundeckAuthContextProcessor.getAuthContextForSubject(_)\n+            1 * controller.featureService.featurePresent(_) >> false\n+            0 * controller.rundeckAuthContextProcessor.authorizeApplicationResourceType(_,_,_) >> true\n+            response.text != '{\"msg\":\"done\"}'\n+            !uploaded.exists()\n+            1 * controller.apiService.renderErrorFormat(_,{\n+                it.status== HttpServletResponse.SC_BAD_REQUEST\n+                it.code== 'request.error.invalidtoken.message'\n+            })\n+\n+        cleanup:\n+            uploaded.delete()\n+    }\n \n     void \"install plugin\"() {\n         setup:\n@@ -406,8 +483,10 @@ class PluginControllerSpec extends Specification implements ControllerUnitTest<P\n         }\n         fwksvc.getRundeckFramework() >> fwk\n         controller.frameworkService = fwksvc\n-\n+        controller.apiService=Mock(ApiService)\n         when:\n+        request.method='POST'\n+        setupFormTokens(params)\n         !installed.exists()\n         def pluginUrl = Thread.currentThread().getContextClassLoader().getResource(PLUGIN_FILE)\n         params.pluginUrl = pluginUrl.toString()\n@@ -422,15 +501,90 @@ class PluginControllerSpec extends Specification implements ControllerUnitTest<P\n         cleanup:\n         installed.delete()\n     }\n+    @Unroll\n+    void \"install plugin requires POST method\"() {\n+        setup:\n+        File installed = new File(uploadTestTargetDir,PLUGIN_FILE)\n+        def fwksvc = Mock(FrameworkService)\n+\n+            controller.rundeckAuthContextProcessor = Mock(AppAuthContextProcessor)\n+        def fwk = Mock(Framework) {\n+            getBaseDir() >> uploadTestBaseDir\n+            getLibextDir() >> uploadTestTargetDir\n+        }\n+        fwksvc.getRundeckFramework() >> fwk\n+        controller.frameworkService = fwksvc\n+        controller.apiService=Mock(ApiService)\n+        when: \"request made without POST method\"\n+        request.method=method\n+        setupFormTokens(params)\n+        !installed.exists()\n+        def pluginUrl = Thread.currentThread().getContextClassLoader().getResource(PLUGIN_FILE)\n+        params.pluginUrl = pluginUrl.toString()\n+        controller.installPlugin()\n+\n+        then:\n+            response.status==405\n+            0 * controller.rundeckAuthContextProcessor.getAuthContextForSubject(_)\n+            0 * controller.rundeckAuthContextProcessor.authorizeApplicationResourceType(_,_,_) >> true\n+            response.text != '{\"msg\":\"done\"}'\n+            !installed.exists()\n+\n+        cleanup:\n+        installed.delete()\n+        where:\n+            method << ['get', 'put', 'delete', 'head']\n+    }\n+\n+    void \"install plugin requires synch token\"() {\n+        setup:\n+        File installed = new File(uploadTestTargetDir,PLUGIN_FILE)\n+        def fwksvc = Mock(FrameworkService)\n+\n+            controller.rundeckAuthContextProcessor = Mock(AppAuthContextProcessor)\n+        def fwk = Mock(Framework) {\n+            getBaseDir() >> uploadTestBaseDir\n+            getLibextDir() >> uploadTestTargetDir\n+        }\n+        fwksvc.getRundeckFramework() >> fwk\n+        controller.frameworkService = fwksvc\n+        controller.apiService=Mock(ApiService)\n+        when: \"request made without synch token\"\n+        request.method='POST'\n+        !installed.exists()\n+        def pluginUrl = Thread.currentThread().getContextClassLoader().getResource(PLUGIN_FILE)\n+        params.pluginUrl = pluginUrl.toString()\n+        controller.installPlugin()\n+\n+        then:\n+            1 * controller.apiService.renderErrorFormat(_,{\n+                it.status== HttpServletResponse.SC_BAD_REQUEST\n+                it.code== 'request.error.invalidtoken.message'\n+            })\n+            0 * controller.rundeckAuthContextProcessor.getAuthContextForSubject(_)\n+            0 * controller.rundeckAuthContextProcessor.authorizeApplicationResourceType(_,_,_) >> true\n+            response.text != '{\"msg\":\"done\"}'\n+            !installed.exists()\n+        cleanup:\n+        installed.delete()\n+    }\n+\n+    protected setupFormTokens(params) {\n+        def token = SynchronizerTokensHolder.store(session)\n+        params[SynchronizerTokensHolder.TOKEN_KEY] = token.generateToken('/test')\n+        params[SynchronizerTokensHolder.TOKEN_URI] = '/test'\n+    }\n \n     void \"unauthorized install plugin fails\"() {\n         setup:\n         controller.frameworkService = Mock(FrameworkService)\n \n             controller.rundeckAuthContextProcessor = Mock(AppAuthContextProcessor)\n         messageSource.addMessage(\"request.error.unauthorized.title\",Locale.ENGLISH,\"Unauthorized\")\n-\n+        controller.apiService=Mock(ApiService)\n         when:\n+        request.method='POST'\n+        setupFormTokens(params)\n         def pluginUrl = Thread.currentThread().getContextClassLoader().getResource(PLUGIN_FILE)\n         params.pluginUrl = pluginUrl.toString()\n         controller.installPlugin()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "18c3e7526419be2fb9fa701182c23c27f4213cd1",
            "date": "2025-01-13T17:26:17Z",
            "author_login": "gschueler"
          },
          {
            "sha": "6ba1dc647393f2e202dbcc45a1872bd6033364b6",
            "date": "2025-01-10T14:08:03Z",
            "author_login": "Jesus-Osuna-M"
          },
          {
            "sha": "20a6ccd8911198af7a971c558f960dd735d5f024",
            "date": "2025-01-10T13:26:16Z",
            "author_login": "alexander-variacode"
          },
          {
            "sha": "4b9b7fd03334bee9741068aefb3ee224afe97120",
            "date": "2025-01-07T20:50:25Z",
            "author_login": "carlosrfranco"
          },
          {
            "sha": "be5fd9b38fe2c0f273e068f2d072a3ef1d8cfe21",
            "date": "2025-01-06T21:20:15Z",
            "author_login": "smartinellibenedetti"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.2,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-352",
    "description": "Rundeck is an open source automation service with a web console, command line tools and a WebAPI. Prior to version 3.3.14 and version 3.4.3, a user with `admin` access to the `system` resource type is potentially vulnerable to a CSRF attack that could cause the server to run untrusted code on all Rundeck editions. Patches are available in Rundeck versions 3.4.3 and 3.3.14.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-08-30T20:15:07.730",
    "last_modified": "2024-11-21T06:18:39.390",
    "fix_date": "2021-08-13T16:26:03Z"
  },
  "references": [
    {
      "url": "https://github.com/rundeck/rundeck/commit/67c4eedeaf9509fc0b255aff15977a5229ef13b9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rundeck/rundeck/security/advisories/GHSA-3jmw-c69h-426c",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rundeck/rundeck/commit/67c4eedeaf9509fc0b255aff15977a5229ef13b9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rundeck/rundeck/security/advisories/GHSA-3jmw-c69h-426c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:05.119902",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rundeck",
    "owner": "rundeck",
    "created_at": "2010-09-03T22:11:25Z",
    "updated_at": "2025-01-14T13:56:13Z",
    "pushed_at": "2025-01-14T16:17:08Z",
    "size": 214435,
    "stars": 5615,
    "forks": 930,
    "open_issues": 749,
    "watchers": 5615,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Groovy": 13302212,
      "Java": 4739121,
      "JavaScript": 2256651,
      "Vue": 978967,
      "TypeScript": 592929,
      "SCSS": 557900,
      "Shell": 140078,
      "CSS": 104081,
      "Less": 38211,
      "Dockerfile": 15647,
      "MDX": 12941,
      "HTML": 8218,
      "EJS": 7552,
      "Makefile": 3562,
      "Batchfile": 417
    },
    "commit_activity": {
      "total_commits_last_year": 1964,
      "avg_commits_per_week": 37.76923076923077,
      "days_active_last_year": 243
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:24:32.773771"
  }
}