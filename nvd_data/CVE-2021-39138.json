{
  "cve_id": "CVE-2021-39138",
  "github_data": {
    "repository": "parse-community/parse-server",
    "fix_commit": "147bd9a3dc43391e92c36e05d5db860b04ca27db",
    "related_commits": [
      "147bd9a3dc43391e92c36e05d5db860b04ca27db",
      "147bd9a3dc43391e92c36e05d5db860b04ca27db"
    ],
    "patch_url": "https://github.com/parse-community/parse-server/commit/147bd9a3dc43391e92c36e05d5db860b04ca27db.patch",
    "fix_commit_details": {
      "sha": "147bd9a3dc43391e92c36e05d5db860b04ca27db",
      "commit_date": "2021-08-18T15:56:25Z",
      "author": {
        "login": "cbaker6",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-23r4-5mxp-c7g5",
        "length": 122,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 117,
        "additions": 65,
        "deletions": 52
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -1,7 +1,12 @@\n ## Parse Server Changelog\n \n ### master\n-[Full Changelog](https://github.com/parse-community/parse-server/compare/4.5.0...master)\n+[Full Changelog](https://github.com/parse-community/parse-server/compare/4.5.1...master)\n+\n+### 4.5.1\n+[Full Changelog](https://github.com/parse-community/parse-server/compare/4.5.0...4.5.1)\n+\n+- SECURITY FIX: Fixes incorrect session property `authProvider: password` of anonymous users. When signing up an anonymous user, the session field `createdWith` indicates incorrectly that the session has been created using username and password with `authProvider: password`, instead of an anonymous sign-up with `authProvider: anonymous`. This fixes the issue by setting the correct `authProvider: anonymous` for future sign-ups of anonymous users. This fix does not fix incorrect `authProvider: password` for existing sessions of anonymous users. Consider this if your app logic depends on the `authProvider` field. (Corey Baker) [GHSA-23r4-5mxp-c7g5](https://github.com/parse-community/parse-server/security/advisories/GHSA-23r4-5mxp-c7g5)\n \n ### 4.5.0\n [Full Changelog](https://github.com/parse-community/parse-server/compare/4.4.0...4.5.0)"
        },
        {
          "filename": "spec/ParseUser.spec.js",
          "status": "modified",
          "additions": 55,
          "deletions": 51,
          "patch": "@@ -2374,59 +2374,63 @@ describe('Parse.User testing', () => {\n       });\n   });\n \n-  it('user get session from token on signup', done => {\n-    Promise.resolve()\n-      .then(() => {\n-        return Parse.User.signUp('finn', 'human', { foo: 'bar' });\n-      })\n-      .then(user => {\n-        request({\n-          headers: {\n-            'X-Parse-Application-Id': 'test',\n-            'X-Parse-Session-Token': user.getSessionToken(),\n-            'X-Parse-REST-API-Key': 'rest',\n-          },\n-          url: 'http://localhost:8378/1/sessions/me',\n-        }).then(response => {\n-          const b = response.data;\n-          expect(typeof b.sessionToken).toEqual('string');\n-          expect(typeof b.createdWith).toEqual('object');\n-          expect(b.createdWith.action).toEqual('signup');\n-          expect(typeof b.user).toEqual('object');\n-          expect(b.user.objectId).toEqual(user.id);\n-          done();\n-        });\n-      });\n+  it('user get session from token on signup', async () => {\n+    const user = await Parse.User.signUp('finn', 'human', { foo: 'bar' });\n+    const response = await request({\n+      headers: {\n+        'X-Parse-Application-Id': 'test',\n+        'X-Parse-Session-Token': user.getSessionToken(),\n+        'X-Parse-REST-API-Key': 'rest',\n+      },\n+      url: 'http://localhost:8378/1/sessions/me',\n+    });\n+    const data = response.data;\n+    expect(typeof data.sessionToken).toEqual('string');\n+    expect(typeof data.createdWith).toEqual('object');\n+    expect(data.createdWith.action).toEqual('signup');\n+    expect(data.createdWith.authProvider).toEqual('password');\n+    expect(typeof data.user).toEqual('object');\n+    expect(data.user.objectId).toEqual(user.id);\n   });\n \n-  it('user get session from token on login', done => {\n-    Promise.resolve()\n-      .then(() => {\n-        return Parse.User.signUp('finn', 'human', { foo: 'bar' });\n-      })\n-      .then(() => {\n-        return Parse.User.logOut().then(() => {\n-          return Parse.User.logIn('finn', 'human');\n-        });\n-      })\n-      .then(user => {\n-        request({\n-          headers: {\n-            'X-Parse-Application-Id': 'test',\n-            'X-Parse-Session-Token': user.getSessionToken(),\n-            'X-Parse-REST-API-Key': 'rest',\n-          },\n-          url: 'http://localhost:8378/1/sessions/me',\n-        }).then(response => {\n-          const b = response.data;\n-          expect(typeof b.sessionToken).toEqual('string');\n-          expect(typeof b.createdWith).toEqual('object');\n-          expect(b.createdWith.action).toEqual('login');\n-          expect(typeof b.user).toEqual('object');\n-          expect(b.user.objectId).toEqual(user.id);\n-          done();\n-        });\n-      });\n+  it('user get session from token on username/password login', async () => {\n+    await Parse.User.signUp('finn', 'human', { foo: 'bar' });\n+    await Parse.User.logOut();\n+    const user = await Parse.User.logIn('finn', 'human');\n+    const response = await request({\n+      headers: {\n+        'X-Parse-Application-Id': 'test',\n+        'X-Parse-Session-Token': user.getSessionToken(),\n+        'X-Parse-REST-API-Key': 'rest',\n+      },\n+      url: 'http://localhost:8378/1/sessions/me',\n+    });\n+    const data = response.data;\n+    expect(typeof data.sessionToken).toEqual('string');\n+    expect(typeof data.createdWith).toEqual('object');\n+    expect(data.createdWith.action).toEqual('login');\n+    expect(data.createdWith.authProvider).toEqual('password');\n+    expect(typeof data.user).toEqual('object');\n+    expect(data.user.objectId).toEqual(user.id);\n+  });\n+\n+  it('user get session from token on anonymous login', async () => {\n+    const user = await Parse.AnonymousUtils.logIn();\n+    const response = await request({\n+      headers: {\n+        'X-Parse-Application-Id': 'test',\n+        'X-Parse-Session-Token': user.getSessionToken(),\n+        'X-Parse-REST-API-Key': 'rest',\n+      },\n+      url: 'http://localhost:8378/1/sessions/me',\n+    });\n+    const data = response.data;\n+    expect(typeof data.sessionToken).toEqual('string');\n+    expect(typeof data.createdWith).toEqual('object');\n+    expect(data.createdWith.action).toEqual('login');\n+    expect(data.createdWith.authProvider).toEqual('anonymous');\n+    expect(typeof data.user).toEqual('object');\n+    expect(data.user.objectId).toEqual(user.id);\n   });\n \n   it('user update session with other field', done => {"
        },
        {
          "filename": "src/RestWrite.js",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -857,6 +857,10 @@ RestWrite.prototype.createSessionToken = async function () {\n     return;\n   }\n \n+  if (this.storage['authProvider'] == null && this.data.authData) {\n+    this.storage['authProvider'] = Object.keys(this.data.authData).join(',');\n+  }\n+\n   const { sessionData, createSession } = Auth.createSession(this.config, {\n     userId: this.objectId(),\n     createdWith: {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "28b3edee4e76679dedee9fe115283110fd952678",
            "date": "2025-01-13T15:19:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "1b61cab81c4206ce135f1239f17a53dabbc698d7",
            "date": "2025-01-13T14:47:17Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "a0efad88d2177f027ee3709beba13282a6ca9d35",
            "date": "2025-01-12T20:55:48Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "bb1daafef0f5f0b6a9c9b33c9d7e0529fd49afbf",
            "date": "2025-01-12T18:53:43Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3f0f29b4dfaf6038cb0f0dd205cfa8e1cf92c0c4",
            "date": "2025-01-12T14:04:34Z",
            "author_login": "semantic-release-bot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-287",
    "description": "Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. Developers can use the REST API to signup users and also allow users to login anonymously. Prior to version 4.5.1, when an anonymous user is first signed up using REST, the server creates session incorrectly. Particularly, the `authProvider` field in `_Session` class under `createdWith` shows the user logged in creating a password. If a developer later depends on the `createdWith` field to provide a different level of access between a password user and anonymous user, the server incorrectly classified the session type as being created with a `password`. The server does not currently use `createdWith` to make decisions about internal functions, so if a developer is not using `createdWith` directly, they are not affected. The vulnerability only affects users who depend on `createdWith` by using it directly. The issue is patched in Parse Server version 4.5.1. As a workaround, do not use the `createdWith` Session field to make decisions if one allows anonymous login.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-08-19T16:15:12.483",
    "last_modified": "2024-11-21T06:18:40.330",
    "fix_date": "2021-08-18T15:56:25Z"
  },
  "references": [
    {
      "url": "https://github.com/parse-community/parse-server/commit/147bd9a3dc43391e92c36e05d5db860b04ca27db",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/releases/tag/4.5.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/security/advisories/GHSA-23r4-5mxp-c7g5",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/commit/147bd9a3dc43391e92c36e05d5db860b04ca27db",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/releases/tag/4.5.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/parse-community/parse-server/security/advisories/GHSA-23r4-5mxp-c7g5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:05.094526",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "parse-server",
    "owner": "parse-community",
    "created_at": "2016-01-28T18:29:14Z",
    "updated_at": "2025-01-13T16:51:06Z",
    "pushed_at": "2025-01-14T11:16:34Z",
    "size": 73208,
    "stars": 20994,
    "forks": 4781,
    "open_issues": 474,
    "watchers": 20994,
    "has_security_policy": false,
    "default_branch": "alpha",
    "protected_branches": [
      "alpha",
      "beta",
      "release",
      "release-4.x.x",
      "release-5.x.x",
      "release-6.x.x",
      "release-7.x.x"
    ],
    "languages": {
      "JavaScript": 4248231,
      "HTML": 25876,
      "Shell": 7825,
      "Handlebars": 2113,
      "Dockerfile": 1211
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:26:59.166995"
  }
}