{
  "cve_id": "CVE-2021-3915",
  "github_data": {
    "repository": "bookstackapp/bookstack",
    "fix_commit": "ae155d67454d6b9f6c93b2bb457aaa4b2eb1a9ed",
    "related_commits": [
      "ae155d67454d6b9f6c93b2bb457aaa4b2eb1a9ed",
      "ae155d67454d6b9f6c93b2bb457aaa4b2eb1a9ed"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "ae155d67454d6b9f6c93b2bb457aaa4b2eb1a9ed",
      "commit_date": "2021-10-31T17:58:56Z",
      "author": {
        "login": "ssddanbrown",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Added safe mime sniffing to prevent serving HTML",
        "length": 88,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 112,
        "additions": 106,
        "deletions": 6
      },
      "files": [
        {
          "filename": "app/Http/Controllers/Controller.php",
          "status": "modified",
          "additions": 9,
          "deletions": 6,
          "patch": "@@ -5,6 +5,7 @@\n use BookStack\\Facades\\Activity;\n use BookStack\\Interfaces\\Loggable;\n use BookStack\\Model;\n+use BookStack\\Util\\WebSafeMimeSniffer;\n use finfo;\n use Illuminate\\Foundation\\Bus\\DispatchesJobs;\n use Illuminate\\Foundation\\Validation\\ValidatesRequests;\n@@ -117,8 +118,9 @@ protected function jsonError(string $messageText = '', int $statusCode = 500): J\n     protected function downloadResponse(string $content, string $fileName): Response\n     {\n         return response()->make($content, 200, [\n-            'Content-Type'        => 'application/octet-stream',\n-            'Content-Disposition' => 'attachment; filename=\"' . $fileName . '\"',\n+            'Content-Type'           => 'application/octet-stream',\n+            'Content-Disposition'    => 'attachment; filename=\"' . $fileName . '\"',\n+            'X-Content-Type-Options' => 'nosniff',\n         ]);\n     }\n \n@@ -128,12 +130,13 @@ protected function downloadResponse(string $content, string $fileName): Response\n      */\n     protected function inlineDownloadResponse(string $content, string $fileName): Response\n     {\n-        $finfo = new finfo(FILEINFO_MIME_TYPE);\n-        $mime = $finfo->buffer($content) ?: 'application/octet-stream';\n+\n+        $mime = (new WebSafeMimeSniffer)->sniff($content);\n \n         return response()->make($content, 200, [\n-            'Content-Type'        => $mime,\n-            'Content-Disposition' => 'inline; filename=\"' . $fileName . '\"',\n+            'Content-Type'           => $mime,\n+            'Content-Disposition'    => 'inline; filename=\"' . $fileName . '\"',\n+            'X-Content-Type-Options' => 'nosniff',\n         ]);\n     }\n "
        },
        {
          "filename": "app/Util/WebSafeMimeSniffer.php",
          "status": "added",
          "additions": 65,
          "deletions": 0,
          "patch": "@@ -0,0 +1,65 @@\n+<?php\n+\n+namespace BookStack\\Util;\n+\n+use finfo;\n+\n+/**\n+ * Helper class to sniff out the mime-type of content resulting in\n+ * a mime-type that's relatively safe to serve to a browser.\n+ */\n+class WebSafeMimeSniffer\n+{\n+\n+    /**\n+     * @var string[]\n+     */\n+    protected $safeMimes = [\n+        'application/json',\n+        'application/octet-stream',\n+        'application/pdf',\n+        'image/bmp',\n+        'image/jpeg',\n+        'image/png',\n+        'image/gif',\n+        'image/webp',\n+        'image/avif',\n+        'image/heic',\n+        'text/css',\n+        'text/csv',\n+        'text/javascript',\n+        'text/json',\n+        'text/plain',\n+        'video/x-msvideo',\n+        'video/mp4',\n+        'video/mpeg',\n+        'video/ogg',\n+        'video/webm',\n+        'video/vp9',\n+        'video/h264',\n+        'video/av1',\n+    ];\n+\n+    /**\n+     * Sniff the mime-type from the given file content while running the result\n+     * through an allow-list to ensure a web-safe result.\n+     * Takes the content as a reference since the value may be quite large.\n+     */\n+    public function sniff(string &$content): string\n+    {\n+        $fInfo = new finfo(FILEINFO_MIME_TYPE);\n+        $mime = $fInfo->buffer($content) ?: 'application/octet-stream';\n+\n+        if (in_array($mime, $this->safeMimes)) {\n+            return $mime;\n+        }\n+\n+        [$category] = explode('/', $mime, 2);\n+        if ($category === 'text') {\n+            return 'text/plain';\n+        }\n+\n+        return 'application/octet-stream';\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "tests/Uploads/AttachmentTest.php",
          "status": "modified",
          "additions": 32,
          "deletions": 0,
          "patch": "@@ -9,6 +9,7 @@\n use BookStack\\Uploads\\AttachmentService;\n use Illuminate\\Http\\UploadedFile;\n use Tests\\TestCase;\n+use Tests\\TestResponse;\n \n class AttachmentTest extends TestCase\n {\n@@ -44,6 +45,20 @@ protected function createAttachment(Page $page): Attachment\n         return Attachment::query()->latest()->first();\n     }\n \n+    /**\n+     * Create a new upload attachment from the given data.\n+     */\n+    protected function createUploadAttachment(Page $page, string $filename, string $content, string $mimeType): Attachment\n+    {\n+        $file = tmpfile();\n+        $filePath = stream_get_meta_data($file)['uri'];\n+        file_put_contents($filePath, $content);\n+        $upload = new UploadedFile($filePath, $filename, $mimeType, null, true);\n+\n+        $this->call('POST', '/attachments/upload', ['uploaded_to' => $page->id], [], ['file' => $upload], []);\n+        return $page->attachments()->latest()->firstOrFail();\n+    }\n+\n     /**\n      * Delete all uploaded files.\n      * To assist with cleanup.\n@@ -305,7 +320,24 @@ public function test_file_access_with_open_query_param_provides_inline_response_\n         // http-foundation/Response does some 'fixing' of responses to add charsets to text responses.\n         $attachmentGet->assertHeader('Content-Type', 'text/plain; charset=UTF-8');\n         $attachmentGet->assertHeader('Content-Disposition', 'inline; filename=\"upload_test_file.txt\"');\n+        $attachmentGet->assertHeader('X-Content-Type-Options', 'nosniff');\n \n         $this->deleteUploads();\n     }\n+\n+    public function test_html_file_access_with_open_forces_plain_content_type()\n+    {\n+        $page = Page::query()->first();\n+        $this->asAdmin();\n+\n+        $attachment = $this->createUploadAttachment($page, 'test_file.html', '<html></html><p>testing</p>', 'text/html');\n+\n+        $attachmentGet = $this->get($attachment->getUrl(true));\n+        // http-foundation/Response does some 'fixing' of responses to add charsets to text responses.\n+        $attachmentGet->assertHeader('Content-Type', 'text/plain; charset=UTF-8');\n+        $attachmentGet->assertHeader('Content-Disposition', 'inline; filename=\"test_file.html\"');\n+\n+        $this->deleteUploads();\n+    }\n+\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "786a434c03faa996e630f4a0a523567d3b093f43",
            "date": "2025-01-14T14:56:43Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "25c4f4b02ba06f66f5239de48ae005f895146f8d",
            "date": "2025-01-14T14:53:10Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "481580be172a4813ee98ad1b945d12d731e71cdb",
            "date": "2025-01-13T16:51:07Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "593645acfe8521db97d7469c92546c8529703969",
            "date": "2025-01-13T14:30:53Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "b9751807e7bad4b7d477b6977f630881f730abad",
            "date": "2025-01-13T13:27:32Z",
            "author_login": "ssddanbrown"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-434",
    "description": "bookstack is vulnerable to Unrestricted Upload of File with Dangerous Type",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-13T10:15:07.927",
    "last_modified": "2024-11-21T06:22:45.997",
    "fix_date": "2021-10-31T17:58:56Z"
  },
  "references": [
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/ae155d67454d6b9f6c93b2bb457aaa4b2eb1a9ed",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/fcb65f2d-257a-46f4-bac9-f6ded5649079",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/ae155d67454d6b9f6c93b2bb457aaa4b2eb1a9ed",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/fcb65f2d-257a-46f4-bac9-f6ded5649079",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.893064",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "BookStack",
    "owner": "bookstackapp",
    "created_at": "2015-08-29T10:26:44Z",
    "updated_at": "2025-01-26T05:18:24Z",
    "pushed_at": "2025-01-22T20:39:48Z",
    "size": 43528,
    "stars": 15869,
    "forks": 1989,
    "open_issues": 616,
    "watchers": 15869,
    "has_security_policy": false,
    "default_branch": "development",
    "protected_branches": [
      "release"
    ],
    "languages": {
      "PHP": 7967773,
      "TypeScript": 1856418,
      "Blade": 444101,
      "JavaScript": 287858,
      "SCSS": 139395,
      "Dockerfile": 1282,
      "Shell": 347
    },
    "commit_activity": {
      "total_commits_last_year": 414,
      "avg_commits_per_week": 7.961538461538462,
      "days_active_last_year": 198
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T07:35:18.402097"
  }
}