{
  "cve_id": "CVE-2021-39164",
  "github_data": {
    "repository": "matrix-org/synapse",
    "fix_commit": "cb35df940a",
    "related_commits": [
      "cb35df940a",
      "cb35df940a"
    ],
    "patch_url": "https://github.com/matrix-org/synapse/commit/cb35df940a.patch",
    "fix_commit_details": {
      "sha": "cb35df940a",
      "commit_date": "2021-08-31T10:24:09Z",
      "author": {
        "login": "reivilibre",
        "type": "User",
        "stats": {
          "total_commits": 574,
          "average_weekly_commits": 1.0532110091743119,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 113
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-jj53-8fmw-f2w2",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 61,
        "additions": 59,
        "deletions": 2
      },
      "files": [
        {
          "filename": "synapse/groups/groups_server.py",
          "status": "modified",
          "additions": 16,
          "deletions": 2,
          "patch": "@@ -332,6 +332,13 @@ async def get_rooms_in_group(\n             requester_user_id, group_id\n         )\n \n+        # Note! room_results[\"is_public\"] is about whether the room is considered\n+        # public from the group's point of view. (i.e. whether non-group members\n+        # should be able to see the room is in the group).\n+        # This is not the same as whether the room itself is public (in the sense\n+        # of being visible in the room directory).\n+        # As such, room_results[\"is_public\"] itself is not sufficient to determine\n+        # whether any given user is permitted to see the room's metadata.\n         room_results = await self.store.get_rooms_in_group(\n             group_id, include_private=is_user_in_group\n         )\n@@ -341,8 +348,15 @@ async def get_rooms_in_group(\n             room_id = room_result[\"room_id\"]\n \n             joined_users = await self.store.get_users_in_room(room_id)\n+\n+            # check the user is actually allowed to see the room before showing it to them\n+            allow_private = requester_user_id in joined_users\n+\n             entry = await self.room_list_handler.generate_room_entry(\n-                room_id, len(joined_users), with_alias=False, allow_private=True\n+                room_id,\n+                len(joined_users),\n+                with_alias=False,\n+                allow_private=allow_private,\n             )\n \n             if not entry:\n@@ -354,7 +368,7 @@ async def get_rooms_in_group(\n \n         chunk.sort(key=lambda e: -e[\"num_joined_members\"])\n \n-        return {\"chunk\": chunk, \"total_room_count_estimate\": len(room_results)}\n+        return {\"chunk\": chunk, \"total_room_count_estimate\": len(chunk)}\n \n \n class GroupsServerHandler(GroupsServerWorkerHandler):"
        },
        {
          "filename": "tests/rest/client/v2_alpha/test_groups.py",
          "status": "added",
          "additions": 43,
          "deletions": 0,
          "patch": "@@ -0,0 +1,43 @@\n+from synapse.rest.client.v1 import room\n+from synapse.rest.client.v2_alpha import groups\n+\n+from tests import unittest\n+from tests.unittest import override_config\n+\n+\n+class GroupsTestCase(unittest.HomeserverTestCase):\n+    user_id = \"@alice:test\"\n+    room_creator_user_id = \"@bob:test\"\n+\n+    servlets = [room.register_servlets, groups.register_servlets]\n+\n+    @override_config({\"enable_group_creation\": True})\n+    def test_rooms_limited_by_visibility(self):\n+        group_id = \"+spqr:test\"\n+\n+        # Alice creates a group\n+        channel = self.make_request(\"POST\", \"/create_group\", {\"localpart\": \"spqr\"})\n+        self.assertEquals(channel.code, 200, msg=channel.text_body)\n+        self.assertEquals(channel.json_body, {\"group_id\": group_id})\n+\n+        # Bob creates a private room\n+        room_id = self.helper.create_room_as(self.room_creator_user_id, is_public=False)\n+        self.helper.auth_user_id = self.room_creator_user_id\n+        self.helper.send_state(\n+            room_id, \"m.room.name\", {\"name\": \"bob's secret room\"}, tok=None\n+        )\n+        self.helper.auth_user_id = self.user_id\n+\n+        # Alice adds the room to her group.\n+        channel = self.make_request(\n+            \"PUT\", f\"/groups/{group_id}/admin/rooms/{room_id}\", {}\n+        )\n+        self.assertEquals(channel.code, 200, msg=channel.text_body)\n+        self.assertEquals(channel.json_body, {})\n+\n+        # Alice now tries to retrieve the room list of the space.\n+        channel = self.make_request(\"GET\", f\"/groups/{group_id}/rooms\")\n+        self.assertEquals(channel.code, 200, msg=channel.text_body)\n+        self.assertEquals(\n+            channel.json_body, {\"chunk\": [], \"total_room_count_estimate\": 0}\n+        )"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "be65a8ec0195955c15fdb179c9158b187638e39a",
            "date": "2023-12-13T14:50:56Z",
            "author_login": "wrjlewis"
          },
          {
            "sha": "66fc265578f4501307edcac2514892ecdf791fc9",
            "date": "2023-12-13T14:47:34Z",
            "author_login": "wrjlewis"
          },
          {
            "sha": "025951bc3b6ddc0a6487ac045cc00a35a9d7eaaa",
            "date": "2023-12-13T14:46:11Z",
            "author_login": "erikjohnston"
          },
          {
            "sha": "70c020b532821f898aaa07c35c5d5ab59055ae1c",
            "date": "2023-12-12T20:32:48Z",
            "author_login": "erikjohnston"
          },
          {
            "sha": "e1f8440c8959719a417fbf1bdda11406cfdf523d",
            "date": "2023-11-21T19:26:47Z",
            "author_login": "clokep"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Matrix is an ecosystem for open federated Instant Messaging and Voice over IP. In versions 1.41.0 and prior, unauthorised users can access the membership (list of members, with their display names) of a room if they know the ID of the room. The vulnerability is limited to rooms with `shared` history visibility. Furthermore, the unauthorised user must be using an account on a vulnerable homeserver that is in the room. Server administrators should upgrade to 1.41.1 or later in order to receive the patch. One workaround is available. Administrators of servers that use a reverse proxy could, with potentially unacceptable loss of functionality, block the endpoints: `/_matrix/client/r0/rooms/{room_id}/members` with `at` query parameter, and `/_matrix/client/unstable/rooms/{room_id}/members` with `at` query parameter.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-08-31T17:15:08.267",
    "last_modified": "2024-11-21T06:18:45.903",
    "fix_date": "2021-08-31T10:24:09Z"
  },
  "references": [
    {
      "url": "https://github.com/matrix-org/synapse/commit/cb35df940a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/matrix-org/synapse/releases/tag/v1.41.1",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/matrix-org/synapse/security/advisories/GHSA-3x4c-pq33-4w3q",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/2VHDEPCZ22GJFMZCWA2XZAGPOEV72POF/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PXT7ID7DNBRN2TVTETU3SYQHJKEG6PXN/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/matrix-org/synapse/commit/cb35df940a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/matrix-org/synapse/releases/tag/v1.41.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/matrix-org/synapse/security/advisories/GHSA-3x4c-pq33-4w3q",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/2VHDEPCZ22GJFMZCWA2XZAGPOEV72POF/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PXT7ID7DNBRN2TVTETU3SYQHJKEG6PXN/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:05.124050",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "synapse",
    "owner": "matrix-org",
    "created_at": "2014-08-11T15:51:42Z",
    "updated_at": "2025-01-14T04:04:49Z",
    "pushed_at": "2024-04-26T15:47:23Z",
    "size": 429495,
    "stars": 11851,
    "forks": 2122,
    "open_issues": 1529,
    "watchers": 11851,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "Python": 11907179,
      "Rust": 95720,
      "HTML": 64571,
      "Shell": 59187,
      "Perl": 28191,
      "Nix": 12267,
      "Dockerfile": 12096,
      "JavaScript": 11988,
      "Jinja": 7942,
      "CSS": 6211,
      "Makefile": 634,
      "Gherkin": 308,
      "Lua": 241
    },
    "commit_activity": {
      "total_commits_last_year": 1,
      "avg_commits_per_week": 0.019230769230769232,
      "days_active_last_year": 1
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:52:33.725944"
  }
}