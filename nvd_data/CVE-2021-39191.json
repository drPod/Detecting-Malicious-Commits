{
  "cve_id": "CVE-2021-39191",
  "github_data": {
    "repository": "zmartzone/mod_auth_openidc",
    "fix_commit": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "related_commits": [
      "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
      "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
      "commit_date": "2021-09-03T08:41:21Z",
      "author": {
        "login": "zandbelt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "apply OIDCRedirectURLsAllowed setting to target_link_uri",
        "length": 160,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 202,
        "additions": 109,
        "deletions": 93
      },
      "files": [
        {
          "filename": "AUTHORS",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -73,5 +73,7 @@ reporting bugs, providing fixes, suggesting useful features or other:\n \tSteffen Greber <https://github.com/codemaker219>\n \tIain Heggie <https://github.com/iainh>\n \tDirk Kok <https://github.com/Foxite>\n+\tMeheni https://github.com/Meheni\n+\n \n "
        },
        {
          "filename": "ChangeLog",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -1,5 +1,7 @@\n 09/03/2021\n - don't apply authz in discovery process; fixes 2.4.9.3\n+- apply OIDCRedirectURLsAllowed setting to target_link_uri; closes #672; thanks @Meheni\n+- release 2.4.9.4\n \n 08/26/2021\n - don't apply authz to the redirect URI; fixes ac5686495a51bc93e257e42bfdc9c9c46252feb1"
        },
        {
          "filename": "auth_openidc.conf",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -918,8 +918,9 @@\n #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]\n \n # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and\n-# other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value\n-# on session management based logins through the OP iframe, e.g.:\n+# other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value\n+# on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in\n+# 3rd-party initiated logins, e.g.:\n #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app\n # or:\n #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$ "
        },
        {
          "filename": "configure.ac",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])\n+AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])\n \n AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())\n "
        },
        {
          "filename": "src/mod_auth_openidc.c",
          "status": "modified",
          "additions": 101,
          "deletions": 90,
          "patch": "@@ -2457,6 +2457,96 @@ static int oidc_target_link_uri_matches_configuration(request_rec *r,\n \treturn TRUE;\n }\n \n+#define OIDC_MAX_URL_LENGTH 8192 * 2\n+\n+static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,\n+\t\tconst char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,\n+\t\tchar **err_desc) {\n+\tapr_uri_t uri;\n+\tconst char *c_host = NULL;\n+\tapr_hash_index_t *hi = NULL;\n+\tsize_t i = 0;\n+\tchar *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);\n+\n+\t// replace potentially harmful backslashes with forward slashes\n+\tfor (i = 0; i < strlen(url); i++)\n+\t\tif (url[i] == '\\\\')\n+\t\t\turl[i] = '/';\n+\n+\tif (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {\n+\t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");\n+\t\t*err_desc = apr_psprintf(r->pool, \"not a valid URL value: %s\", url);\n+\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n+\t\treturn FALSE;\n+\t}\n+\n+\tif (c->redirect_urls_allowed != NULL) {\n+\t\tfor (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =\n+\t\t\t\tapr_hash_next(hi)) {\n+\t\t\tapr_hash_this(hi, (const void**) &c_host, NULL, NULL);\n+\t\t\tif (oidc_util_regexp_first_match(r->pool, url, c_host,\n+\t\t\t\t\tNULL, err_str) == TRUE)\n+\t\t\t\tbreak;\n+\t\t}\n+\t\tif (hi == NULL) {\n+\t\t\t*err_str = apr_pstrdup(r->pool, \"URL not allowed\");\n+\t\t\t*err_desc =\n+\t\t\t\t\tapr_psprintf(r->pool,\n+\t\t\t\t\t\t\t\"value does not match the list of allowed redirect URLs: %s\",\n+\t\t\t\t\t\t\turl);\n+\t\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n+\t\t\treturn FALSE;\n+\t\t}\n+\t} else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {\n+\t\tc_host = oidc_get_current_url_host(r);\n+\t\tif ((strstr(c_host, uri.hostname) == NULL)\n+\t\t\t\t|| (strstr(uri.hostname, c_host) == NULL)) {\n+\t\t\t*err_str = apr_pstrdup(r->pool, \"Invalid Request\");\n+\t\t\t*err_desc =\n+\t\t\t\t\tapr_psprintf(r->pool,\n+\t\t\t\t\t\t\t\"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",\n+\t\t\t\t\t\t\tapr_uri_unparse(r->pool, &uri, 0), c_host);\n+\t\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n+\t\t\treturn FALSE;\n+\t\t}\n+\t}\n+\n+\tif ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {\n+\t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");\n+\t\t*err_desc =\n+\t\t\t\tapr_psprintf(r->pool,\n+\t\t\t\t\t\t\"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",\n+\t\t\t\t\t\turl);\n+\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n+\t\treturn FALSE;\n+\t} else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {\n+\t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");\n+\t\t*err_desc = apr_psprintf(r->pool,\n+\t\t\t\t\"No hostname was parsed and starting with '//': %s\", url);\n+\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n+\t\treturn FALSE;\n+\t} else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {\n+\t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");\n+\t\t*err_desc = apr_psprintf(r->pool,\n+\t\t\t\t\"No hostname was parsed and starting with '/\\\\': %s\", url);\n+\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n+\t\treturn FALSE;\n+\t}\n+\n+\t/* validate the URL to prevent HTTP header splitting */\n+\tif (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {\n+\t\t*err_str = apr_pstrdup(r->pool, \"Invalid URL\");\n+\t\t*err_desc =\n+\t\t\t\tapr_psprintf(r->pool,\n+\t\t\t\t\t\t\"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",\n+\t\t\t\t\t\turl);\n+\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n+\t\treturn FALSE;\n+\t}\n+\n+\treturn TRUE;\n+}\n+\n /*\n  * handle a response from an IDP discovery page and/or handle 3rd-party initiated SSO\n  */\n@@ -2467,6 +2557,8 @@ static int oidc_handle_discovery_response(request_rec *r, oidc_cfg *c) {\n \t\t\t*auth_request_params = NULL, *csrf_cookie, *csrf_query = NULL,\n \t\t\t*user = NULL, *path_scopes;\n \toidc_provider_t *provider = NULL;\n+\tchar *error_str = NULL;\n+\tchar *error_description = NULL;\n \n \toidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);\n \toidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);\n@@ -2510,7 +2602,7 @@ static int oidc_handle_discovery_response(request_rec *r, oidc_cfg *c) {\n \t\ttarget_link_uri = c->default_sso_url;\n \t}\n \n-\t/* do open redirect prevention */\n+\t/* do open redirect prevention, step 1 */\n \tif (oidc_target_link_uri_matches_configuration(r, c, target_link_uri)\n \t\t\t== FALSE) {\n \t\treturn oidc_util_html_send_error(r, c->error_template,\n@@ -2519,6 +2611,14 @@ static int oidc_handle_discovery_response(request_rec *r, oidc_cfg *c) {\n \t\t\t\tHTTP_UNAUTHORIZED);\n \t}\n \n+\t/* do input validation on the target_link_uri parameter value, step 2 */\n+\tif (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,\n+\t\t\t&error_description) == FALSE) {\n+\t\treturn oidc_util_html_send_error(r, c->error_template, error_str,\n+\t\t\t\terror_description,\n+\t\t\t\tHTTP_UNAUTHORIZED);\n+\t}\n+\n \t/* see if this is a static setup */\n \tif (c->metadata_dir == NULL) {\n \t\tif ((oidc_provider_static_config(r, c, &provider) == TRUE)\n@@ -2947,95 +3047,6 @@ static int oidc_handle_logout_backchannel(request_rec *r, oidc_cfg *cfg) {\n \treturn rc;\n }\n \n-#define OIDC_MAX_URL_LENGTH 8192 * 2\n-\n-static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,\n-\t\tconst char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,\n-\t\tchar **err_desc) {\n-\tapr_uri_t uri;\n-\tconst char *c_host = NULL;\n-\tapr_hash_index_t *hi = NULL;\n-\tsize_t i = 0;\n-\tchar *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);\n-\n-\t// replace potentially harmful backslashes with forward slashes\n-\tfor (i = 0; i < strlen(url); i++)\n-\t\tif (url[i] == '\\\\')\n-\t\t\turl[i] = '/';\n-\n-\tif (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {\n-\t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");\n-\t\t*err_desc = apr_psprintf(r->pool, \"not a valid URL value: %s\", url);\n-\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n-\t\treturn FALSE;\n-\t}\n-\n-\tif (c->redirect_urls_allowed != NULL) {\n-\t\tfor (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =\n-\t\t\t\tapr_hash_next(hi)) {\n-\t\t\tapr_hash_this(hi, (const void**) &c_host, NULL, NULL);\n-\t\t\tif (oidc_util_regexp_first_match(r->pool, url, c_host,\n-\t\t\t\t\tNULL, err_str) == TRUE)\n-\t\t\t\tbreak;\n-\t\t}\n-\t\tif (hi == NULL) {\n-\t\t\t*err_str = apr_pstrdup(r->pool, \"URL not allowed\");\n-\t\t\t*err_desc =\n-\t\t\t\t\tapr_psprintf(r->pool,\n-\t\t\t\t\t\t\t\"value does not match the list of allowed redirect URLs: %s\",\n-\t\t\t\t\t\t\turl);\n-\t\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n-\t\t\treturn FALSE;\n-\t\t}\n-\t} else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {\n-\t\tc_host = oidc_get_current_url_host(r);\n-\t\tif ((strstr(c_host, uri.hostname) == NULL)\n-\t\t\t\t|| (strstr(uri.hostname, c_host) == NULL)) {\n-\t\t\t*err_str = apr_pstrdup(r->pool, \"Invalid Request\");\n-\t\t\t*err_desc =\n-\t\t\t\t\tapr_psprintf(r->pool,\n-\t\t\t\t\t\t\t\"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",\n-\t\t\t\t\t\t\tapr_uri_unparse(r->pool, &uri, 0), c_host);\n-\t\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n-\t\t\treturn FALSE;\n-\t\t}\n-\t}\n-\n-\tif ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {\n-\t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");\n-\t\t*err_desc =\n-\t\t\t\tapr_psprintf(r->pool,\n-\t\t\t\t\t\t\"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",\n-\t\t\t\t\t\turl);\n-\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n-\t\treturn FALSE;\n-\t} else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {\n-\t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");\n-\t\t*err_desc = apr_psprintf(r->pool,\n-\t\t\t\t\"No hostname was parsed and starting with '//': %s\", url);\n-\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n-\t\treturn FALSE;\n-\t} else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {\n-\t\t*err_str = apr_pstrdup(r->pool, \"Malformed URL\");\n-\t\t*err_desc = apr_psprintf(r->pool,\n-\t\t\t\t\"No hostname was parsed and starting with '/\\\\': %s\", url);\n-\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n-\t\treturn FALSE;\n-\t}\n-\n-\t/* validate the URL to prevent HTTP header splitting */\n-\tif (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {\n-\t\t*err_str = apr_pstrdup(r->pool, \"Invalid URL\");\n-\t\t*err_desc =\n-\t\t\t\tapr_psprintf(r->pool,\n-\t\t\t\t\t\t\"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",\n-\t\t\t\t\t\turl);\n-\t\toidc_error(r, \"%s: %s\", *err_str, *err_desc);\n-\t\treturn FALSE;\n-\t}\n-\n-\treturn TRUE;\n-}\n \n /*\n  * perform (single) logout"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b134a74af260fa5bdb1508d6d6a730d05e7afa65",
            "date": "2025-01-24T11:19:55Z",
            "author_login": "zandbelt"
          },
          {
            "sha": "8ebf6fd62b0b864d7fe4159672a0be679bc47fe4",
            "date": "2025-01-19T16:38:52Z",
            "author_login": "zandbelt"
          },
          {
            "sha": "bd7bb505fea0e76adb3f8eadeeb66c4d38a0b1dc",
            "date": "2025-01-17T18:38:07Z",
            "author_login": "zandbelt"
          },
          {
            "sha": "4d4b8e0c42b4edc3a3a343103a4f5393a3187868",
            "date": "2025-01-02T11:11:02Z",
            "author_login": "zandbelt"
          },
          {
            "sha": "afa23358b3c52c448f0d6a7d0853deec26042425",
            "date": "2025-01-02T10:48:45Z",
            "author_login": "ahus1"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.7,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:N/I:L/A:N",
    "cwe_id": "CWE-601",
    "description": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-03T14:15:07.210",
    "last_modified": "2024-11-21T06:18:50.737",
    "fix_date": "2021-09-03T08:41:21Z"
  },
  "references": [
    {
      "url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zmartzone/mod_auth_openidc/issues/672",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/zmartzone/mod_auth_openidc/releases/tag/v2.4.9.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/zmartzone/mod_auth_openidc/security/advisories/GHSA-2pgf-8h6h-gqg2",
      "source": "security-advisories@github.com",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/07/msg00020.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/32RGPW5LZDLDTB7MKZIGAHPSLFOUNWR5/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RHXO4O4G2UQS7X6OQJCVZKHZAQ7SAIFB/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zmartzone/mod_auth_openidc/issues/672",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit"
      ]
    },
    {
      "url": "https://github.com/zmartzone/mod_auth_openidc/releases/tag/v2.4.9.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://github.com/zmartzone/mod_auth_openidc/security/advisories/GHSA-2pgf-8h6h-gqg2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/07/msg00020.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/32RGPW5LZDLDTB7MKZIGAHPSLFOUNWR5/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RHXO4O4G2UQS7X6OQJCVZKHZAQ7SAIFB/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:05.130934",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "mod_auth_openidc",
    "owner": "zmartzone",
    "created_at": "2014-03-27T18:54:06Z",
    "updated_at": "2025-01-24T11:20:03Z",
    "pushed_at": "2025-01-24T11:19:58Z",
    "size": 6283,
    "stars": 1005,
    "forks": 328,
    "open_issues": 0,
    "watchers": 1005,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 1219253,
      "M4": 5581,
      "Makefile": 3452,
      "Shell": 62
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:35:15.533172"
  }
}