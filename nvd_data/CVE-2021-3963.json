{
  "cve_id": "CVE-2021-3963",
  "github_data": {
    "repository": "kevinpapst/kimai2",
    "fix_commit": "95796ab2560ad93f44068a88f0fad758c2053514",
    "related_commits": [
      "95796ab2560ad93f44068a88f0fad758c2053514",
      "95796ab2560ad93f44068a88f0fad758c2053514"
    ],
    "patch_url": "https://github.com/kevinpapst/kimai2/commit/95796ab2560ad93f44068a88f0fad758c2053514.patch",
    "fix_commit_details": {
      "sha": "95796ab2560ad93f44068a88f0fad758c2053514",
      "commit_date": "2021-11-16T09:17:26Z",
      "author": {
        "login": "kevinpapst",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "improve csrf handling (#2936)",
        "length": 29,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 150,
        "additions": 119,
        "deletions": 31
      },
      "files": [
        {
          "filename": "src/Controller/CustomerController.php",
          "status": "modified",
          "additions": 25,
          "deletions": 5,
          "patch": "@@ -41,6 +41,8 @@\n use Symfony\\Component\\HttpFoundation\\Request;\n use Symfony\\Component\\HttpFoundation\\Response;\n use Symfony\\Component\\Routing\\Annotation\\Route;\n+use Symfony\\Component\\Security\\Csrf\\CsrfToken;\n+use Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\n \n /**\n  * Controller used to manage customer in the admin part of the site.\n@@ -157,13 +159,21 @@ public function teamPermissionsAction(Customer $customer, Request $request)\n     }\n \n     /**\n-     * @Route(path=\"/{id}/comment_delete\", name=\"customer_comment_delete\", methods={\"GET\"})\n+     * @Route(path=\"/{id}/comment_delete/{token}\", name=\"customer_comment_delete\", methods={\"GET\"})\n      * @Security(\"is_granted('edit', comment.getCustomer()) and is_granted('comments', comment.getCustomer())\")\n      */\n-    public function deleteCommentAction(CustomerComment $comment)\n+    public function deleteCommentAction(CustomerComment $comment, string $token, CsrfTokenManagerInterface $csrfTokenManager)\n     {\n         $customerId = $comment->getCustomer()->getId();\n \n+        if (!$csrfTokenManager->isTokenValid(new CsrfToken('customer.delete_comment', $token))) {\n+            $this->flashError('action.csrf.error');\n+\n+            return $this->redirectToRoute('customer_details', ['id' => $customerId]);\n+        }\n+\n+        $csrfTokenManager->refreshToken($token);\n+\n         try {\n             $this->repository->deleteComment($comment);\n         } catch (\\Exception $ex) {\n@@ -196,19 +206,29 @@ public function addCommentAction(Customer $customer, Request $request)\n     }\n \n     /**\n-     * @Route(path=\"/{id}/comment_pin\", name=\"customer_comment_pin\", methods={\"GET\"})\n+     * @Route(path=\"/{id}/comment_pin/{token}\", name=\"customer_comment_pin\", methods={\"GET\"})\n      * @Security(\"is_granted('edit', comment.getCustomer()) and is_granted('comments', comment.getCustomer())\")\n      */\n-    public function pinCommentAction(CustomerComment $comment)\n+    public function pinCommentAction(CustomerComment $comment, string $token, CsrfTokenManagerInterface $csrfTokenManager)\n     {\n+        $customerId = $comment->getCustomer()->getId();\n+\n+        if (!$csrfTokenManager->isTokenValid(new CsrfToken('customer.pin_comment', $token))) {\n+            $this->flashError('action.csrf.error');\n+\n+            return $this->redirectToRoute('customer_details', ['id' => $customerId]);\n+        }\n+\n+        $csrfTokenManager->refreshToken($token);\n+\n         $comment->setPinned(!$comment->isPinned());\n         try {\n             $this->repository->saveComment($comment);\n         } catch (\\Exception $ex) {\n             $this->flashUpdateException($ex);\n         }\n \n-        return $this->redirectToRoute('customer_details', ['id' => $comment->getCustomer()->getId()]);\n+        return $this->redirectToRoute('customer_details', ['id' => $customerId]);\n     }\n \n     /**"
        },
        {
          "filename": "src/Controller/DoctorController.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -64,7 +64,7 @@ public function __construct(string $projectDirectory, string $kernelEnvironment,\n     public function deleteLogfileAction(string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n     {\n         if (!$csrfTokenManager->isTokenValid(new CsrfToken('doctor.flush_log', $token))) {\n-            $this->flashError('action.delete.error');\n+            $this->flashError('action.csrf.error');\n \n             return $this->redirectToRoute('doctor');\n         }"
        },
        {
          "filename": "src/Controller/InvoiceController.php",
          "status": "modified",
          "additions": 11,
          "deletions": 3,
          "patch": "@@ -260,7 +260,7 @@ public function changeStatusAction(Invoice $invoice, string $status, Request $re\n     public function deleteInvoiceAction(Invoice $invoice, string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n     {\n         if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.delete', $token))) {\n-            $this->flashError('action.delete.error');\n+            $this->flashError('action.csrf.error');\n \n             return $this->redirectToRoute('admin_invoice_list');\n         }\n@@ -451,11 +451,19 @@ public function createTemplateAction(Request $request, ?InvoiceTemplate $copyFro\n     }\n \n     /**\n-     * @Route(path=\"/template/{id}/delete\", name=\"admin_invoice_template_delete\", methods={\"GET\", \"POST\"})\n+     * @Route(path=\"/template/{id}/delete/{token}\", name=\"admin_invoice_template_delete\", methods={\"GET\", \"POST\"})\n      * @Security(\"is_granted('manage_invoice_template')\")\n      */\n-    public function deleteTemplate(InvoiceTemplate $template): Response\n+    public function deleteTemplate(InvoiceTemplate $template, string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n     {\n+        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.delete_template', $token))) {\n+            $this->flashError('action.csrf.error');\n+\n+            return $this->redirectToRoute('admin_invoice_template');\n+        }\n+\n+        $csrfTokenManager->refreshToken($token);\n+\n         try {\n             $this->templateRepository->removeTemplate($template);\n             $this->flashSuccess('action.delete.success');"
        },
        {
          "filename": "src/Controller/PermissionController.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -209,7 +209,7 @@ public function createRole(Request $request): Response\n     public function deleteRole(Role $role, string $csrfToken, UserRepository $userRepository, CsrfTokenManagerInterface $csrfTokenManager): Response\n     {\n         if (!$this->isCsrfTokenValid(self::TOKEN_NAME, $csrfToken)) {\n-            $this->flashUpdateException(new \\Exception('Invalid CSRF token'));\n+            $this->flashError('action.csrf.error');\n \n             return $this->redirectToRoute('admin_user_permissions');\n         }"
        },
        {
          "filename": "src/Controller/ProjectController.php",
          "status": "modified",
          "additions": 25,
          "deletions": 5,
          "patch": "@@ -43,6 +43,8 @@\n use Symfony\\Component\\Form\\FormInterface;\n use Symfony\\Component\\HttpFoundation\\Request;\n use Symfony\\Component\\Routing\\Annotation\\Route;\n+use Symfony\\Component\\Security\\Csrf\\CsrfToken;\n+use Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\n \n /**\n  * Controller used to manage projects.\n@@ -179,13 +181,21 @@ public function createAction(Request $request, ?Customer $customer = null)\n     }\n \n     /**\n-     * @Route(path=\"/{id}/comment_delete\", name=\"project_comment_delete\", methods={\"GET\"})\n+     * @Route(path=\"/{id}/comment_delete/{token}\", name=\"project_comment_delete\", methods={\"GET\"})\n      * @Security(\"is_granted('edit', comment.getProject()) and is_granted('comments', comment.getProject())\")\n      */\n-    public function deleteCommentAction(ProjectComment $comment)\n+    public function deleteCommentAction(ProjectComment $comment, string $token, CsrfTokenManagerInterface $csrfTokenManager)\n     {\n         $projectId = $comment->getProject()->getId();\n \n+        if (!$csrfTokenManager->isTokenValid(new CsrfToken('project.delete_comment', $token))) {\n+            $this->flashError('action.csrf.error');\n+\n+            return $this->redirectToRoute('project_details', ['id' => $projectId]);\n+        }\n+\n+        $csrfTokenManager->refreshToken($token);\n+\n         try {\n             $this->repository->deleteComment($comment);\n         } catch (\\Exception $ex) {\n@@ -218,19 +228,29 @@ public function addCommentAction(Project $project, Request $request)\n     }\n \n     /**\n-     * @Route(path=\"/{id}/comment_pin\", name=\"project_comment_pin\", methods={\"GET\"})\n+     * @Route(path=\"/{id}/comment_pin/{token}\", name=\"project_comment_pin\", methods={\"GET\"})\n      * @Security(\"is_granted('edit', comment.getProject()) and is_granted('comments', comment.getProject())\")\n      */\n-    public function pinCommentAction(ProjectComment $comment)\n+    public function pinCommentAction(ProjectComment $comment, string $token, CsrfTokenManagerInterface $csrfTokenManager)\n     {\n+        $projectId = $comment->getProject()->getId();\n+\n+        if (!$csrfTokenManager->isTokenValid(new CsrfToken('project.pin_comment', $token))) {\n+            $this->flashError('action.csrf.error');\n+\n+            return $this->redirectToRoute('project_details', ['id' => $projectId]);\n+        }\n+\n+        $csrfTokenManager->refreshToken($token);\n+\n         $comment->setPinned(!$comment->isPinned());\n         try {\n             $this->repository->saveComment($comment);\n         } catch (\\Exception $ex) {\n             $this->flashUpdateException($ex);\n         }\n \n-        return $this->redirectToRoute('project_details', ['id' => $comment->getProject()->getId()]);\n+        return $this->redirectToRoute('project_details', ['id' => $projectId]);\n     }\n \n     /**"
        },
        {
          "filename": "src/EventSubscriber/Actions/InvoiceTemplateSubscriber.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -36,7 +36,7 @@ public function onActions(PageActionsEvent $event): void\n             }\n             $event->addAction('edit', ['url' => $this->path('admin_invoice_template_edit', ['id' => $template->getId()]), 'class' => 'modal-ajax-form']);\n             $event->addAction('copy', ['url' => $this->path('admin_invoice_template_copy', ['id' => $template->getId()])]);\n-            $event->addDelete($this->path('admin_invoice_template_delete', ['id' => $template->getId()]), false);\n+            $event->addDelete($this->path('admin_invoice_template_delete', ['id' => $template->getId(), 'token' => $payload['token']]), false);\n         }\n     }\n }"
        },
        {
          "filename": "templates/customer/details.html.twig",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -139,7 +139,7 @@\n     {% if comments is not null %}\n         {% set options = {'form': commentForm, 'comments': comments} %}\n         {% if can_edit %}\n-            {% set options = options|merge({'route_pin': 'customer_comment_pin', 'route_delete': 'customer_comment_delete'}) %}\n+            {% set options = options|merge({'route_pin': 'customer_comment_pin', 'route_delete': 'customer_comment_delete', 'csrf_delete': 'customer.delete_comment', 'csrf_pin': 'customer.pin_comment'}) %}\n         {% endif %}\n         {{ include('embeds/comments.html.twig', options) }}\n     {% endif %}"
        },
        {
          "filename": "templates/embeds/comments.html.twig",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1,4 +1,4 @@\n-{% embed '@AdminLTE/Widgets/box-widget.html.twig' with {'form': form, 'comments': comments, 'route_pin': route_pin|default(null), 'route_delete': route_delete|default(null), 'delete_by_user': delete_by_user|default(false)} %}\n+{% embed '@AdminLTE/Widgets/box-widget.html.twig' with {'form': form, 'comments': comments, 'route_pin': route_pin|default(null), 'route_delete': route_delete|default(null), 'delete_by_user': delete_by_user|default(false), 'csrf_delete': csrf_token(csrf_delete), 'csrf_pin': csrf_token(csrf_pin)} %}\n     {% import \"macros/widgets.html.twig\" as widgets %}\n     {% block box_title %}{{ 'label.comment'|trans }}{% endblock %}\n     {% block box_attributes %}id=\"comments_box\"{% endblock %}\n@@ -24,12 +24,12 @@\n                         </span>\n                         <span class=\"pull-right\">\n                         {% if route_pin is not null %}\n-                            <a href=\"{{ path(route_pin, {'id': comment.id}) }}\" class=\"btn btn-default btn-xs {% if comment.pinned %}active{% endif %}\"><i class=\"{{ 'pin'|icon }}\"></i></a>\n+                            <a href=\"{{ path(route_pin, {'id': comment.id, 'token': csrf_pin}) }}\" class=\"btn btn-default btn-xs {% if comment.pinned %}active{% endif %}\"><i class=\"{{ 'pin'|icon }}\"></i></a>\n                         {% elseif comment.pinned %}\n                             <i class=\"{{ 'pin'|icon }}\"></i>\n                         {% endif %}\n                         {% if route_delete is not null and ((not delete_by_user) or (delete_by_user and comment.createdBy.id == app.user.id)) %}\n-                            <a href=\"{{ path(route_delete, {'id': comment.id}) }}\" class=\"confirmation-link btn btn-default btn-xs\" data-question=\"confirm.delete\"><i class=\"{{ 'delete'|icon }}\"></i></a>\n+                            <a href=\"{{ path(route_delete, {'id': comment.id, 'token': csrf_delete}) }}\" class=\"confirmation-link btn btn-default btn-xs\" data-question=\"confirm.delete\"><i class=\"{{ 'delete'|icon }}\"></i></a>\n                         {% endif %}\n                         </span>\n                     </div>"
        },
        {
          "filename": "templates/invoice/actions.html.twig",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -30,6 +30,6 @@\n \n {% macro invoice_template(template, view) %}\n     {% import \"macros/widgets.html.twig\" as widgets %}\n-    {% set event = actions(app.user, 'invoice_template', view, {'template': template}) %}\n+    {% set event = actions(app.user, 'invoice_template', view, {'template': template, 'token': csrf_token('invoice.delete_template')}) %}\n     {{ widgets.table_actions(event.actions) }}\n {% endmacro %}"
        },
        {
          "filename": "templates/project/details.html.twig",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -144,7 +144,7 @@\n     {% if comments is not null %}\n         {% set options = {'form': commentForm, 'comments': comments} %}\n         {% if can_edit %}\n-            {% set options = options|merge({'route_pin': 'project_comment_pin', 'route_delete': 'project_comment_delete'}) %}\n+            {% set options = options|merge({'route_pin': 'project_comment_pin', 'route_delete': 'project_comment_delete', 'csrf_delete': 'project.delete_comment', 'csrf_pin': 'project.pin_comment'}) %}\n         {% endif %}\n         {{ include('embeds/comments.html.twig', options) }}\n     {% endif %}"
        },
        {
          "filename": "tests/Controller/CustomerControllerTest.php",
          "status": "modified",
          "additions": 30,
          "deletions": 4,
          "patch": "@@ -176,21 +176,45 @@ public function testDeleteCommentAction()\n         ]);\n         $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n         $client->followRedirect();\n+\n+        $token = self::$container->get('security.csrf.token_manager')->getToken('customer.delete_comment');\n+\n         $node = $client->getCrawler()->filter('div.box#comments_box .direct-chat-msg');\n         self::assertStringContainsString('Blah foo bar', $node->html());\n         $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.confirmation-link');\n-        self::assertStringEndsWith('/comment_delete', $node->attr('href'));\n+        self::assertStringEndsWith('/comment_delete/' . $token, $node->attr('href'));\n \n         $comments = $this->getEntityManager()->getRepository(CustomerComment::class)->findAll();\n         $id = $comments[0]->getId();\n \n-        $this->request($client, '/admin/customer/' . $id . '/comment_delete');\n+        $this->request($client, '/admin/customer/' . $id . '/comment_delete/' . $token);\n         $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n         $client->followRedirect();\n         $node = $client->getCrawler()->filter('div.box#comments_box .box-body');\n         self::assertStringContainsString('There were no comments posted yet', $node->html());\n     }\n \n+    public function testDeleteCommentActionWithoutToken()\n+    {\n+        $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n+        $this->assertAccessIsGranted($client, '/admin/customer/1/details');\n+        $form = $client->getCrawler()->filter('form[name=customer_comment_form]')->form();\n+        $client->submit($form, [\n+            'customer_comment_form' => [\n+                'message' => 'Blah foo bar',\n+            ]\n+        ]);\n+        $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n+        $client->followRedirect();\n+\n+        $comments = $this->getEntityManager()->getRepository(CustomerComment::class)->findAll();\n+        $id = $comments[0]->getId();\n+\n+        $this->request($client, '/admin/customer/' . $id . '/comment_delete');\n+\n+        $this->assertRouteNotFound($client);\n+    }\n+\n     public function testPinCommentAction()\n     {\n         $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n@@ -211,12 +235,14 @@ public function testPinCommentAction()\n         $comments = $this->getEntityManager()->getRepository(CustomerComment::class)->findAll();\n         $id = $comments[0]->getId();\n \n-        $this->request($client, '/admin/customer/' . $id . '/comment_pin');\n+        $token = self::$container->get('security.csrf.token_manager')->getToken('customer.pin_comment');\n+\n+        $this->request($client, '/admin/customer/' . $id . '/comment_pin/' . $token);\n         $this->assertIsRedirect($client, $this->createUrl('/admin/customer/1/details'));\n         $client->followRedirect();\n         $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.btn.active');\n         self::assertEquals(1, $node->count());\n-        self::assertEquals($this->createUrl('/admin/customer/' . $id . '/comment_pin'), $node->attr('href'));\n+        self::assertEquals($this->createUrl('/admin/customer/' . $id . '/comment_pin/' . $token), $node->attr('href'));\n     }\n \n     public function testCreateDefaultTeamAction()"
        },
        {
          "filename": "tests/Controller/InvoiceControllerTest.php",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -395,7 +395,9 @@ public function testDeleteTemplateAction()\n         $template = $this->importFixture($fixture);\n         $id = $template[0]->getId();\n \n-        $this->request($client, '/invoice/template/' . $id . '/delete');\n+        $token = self::$container->get('security.csrf.token_manager')->getToken('invoice.delete_template');\n+\n+        $this->request($client, '/invoice/template/' . $id . '/delete/' . $token);\n         $this->assertIsRedirect($client, '/invoice/template');\n         $client->followRedirect();\n "
        },
        {
          "filename": "tests/Controller/ProjectControllerTest.php",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -261,8 +261,10 @@ public function testDeleteCommentAction()\n         $comments = $this->getEntityManager()->getRepository(ProjectComment::class)->findAll();\n         $id = $comments[0]->getId();\n \n-        self::assertEquals($this->createUrl('/admin/project/' . $id . '/comment_delete'), $node->attr('href'));\n-        $this->request($client, '/admin/project/' . $id . '/comment_delete');\n+        $token = self::$container->get('security.csrf.token_manager')->getToken('project.delete_comment');\n+\n+        self::assertEquals($this->createUrl('/admin/project/' . $id . '/comment_delete/' . $token), $node->attr('href'));\n+        $this->request($client, '/admin/project/' . $id . '/comment_delete/' . $token);\n         $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n         $client->followRedirect();\n         $node = $client->getCrawler()->filter('div.box#comments_box .box-body');\n@@ -289,12 +291,14 @@ public function testPinCommentAction()\n         $comments = $this->getEntityManager()->getRepository(ProjectComment::class)->findAll();\n         $id = $comments[0]->getId();\n \n-        $this->request($client, '/admin/project/' . $id . '/comment_pin');\n+        $token = self::$container->get('security.csrf.token_manager')->getToken('project.pin_comment');\n+\n+        $this->request($client, '/admin/project/' . $id . '/comment_pin/' . $token);\n         $this->assertIsRedirect($client, $this->createUrl('/admin/project/1/details'));\n         $client->followRedirect();\n         $node = $client->getCrawler()->filter('div.box#comments_box .box-body a.btn.active');\n         self::assertEquals(1, $node->count());\n-        self::assertEquals($this->createUrl('/admin/project/' . $id . '/comment_pin'), $node->attr('href'));\n+        self::assertEquals($this->createUrl('/admin/project/' . $id . '/comment_pin/' . $token), $node->attr('href'));\n     }\n \n     public function testCreateDefaultTeamAction()"
        },
        {
          "filename": "translations/flashmessages.de.xlf",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -54,6 +54,10 @@\n         <source>action.upload.error</source>\n         <target>Die Datei konnte nicht hochgeladen bzw. gespeichert werden: %reason%</target>\n       </trans-unit>\n+      <trans-unit resname=\"action.csrf.error\" id=\"bOE_q5R\">\n+        <source>action.csrf.error</source>\n+        <target>Die Aktion konnte nicht durchgef\u00fchrt werden: ung\u00fcltiges Sicherheitstoken.</target>\n+      </trans-unit>\n     </body>\n   </file>\n </xliff>"
        },
        {
          "filename": "translations/flashmessages.en.xlf",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -54,6 +54,10 @@\n         <source>action.upload.error</source>\n         <target>The file could not be uploaded or saved: %reason%</target>\n       </trans-unit>\n+      <trans-unit resname=\"action.csrf.error\" id=\"bOE_q5R\">\n+        <source>action.csrf.error</source>\n+        <target>The action could not be performed: invalid security token.</target>\n+      </trans-unit>\n     </body>\n   </file>\n </xliff>"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 8,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c07979e3a937d8b9b7a6243cc7c0c2b5d3a2fa47",
            "date": "2025-01-10T09:02:14Z",
            "author_login": "kernie"
          },
          {
            "sha": "23e8dcf49540c63cfb8284d641a7e403bc4aafb9",
            "date": "2025-01-09T11:16:45Z",
            "author_login": "weblate"
          },
          {
            "sha": "4332ef95a2074a4adcc42465c46328f240d66a66",
            "date": "2024-12-22T21:50:42Z",
            "author_login": "kevinpapst"
          },
          {
            "sha": "4fdfb6f4787b62220824a58b9f94e62baf95af0f",
            "date": "2024-12-22T18:15:32Z",
            "author_login": "weblate"
          },
          {
            "sha": "136104d4b0c75102f3843725ce2a9bdb902dccd9",
            "date": "2024-12-22T17:36:47Z",
            "author_login": "kevinpapst"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-352",
    "description": "kimai2 is vulnerable to Cross-Site Request Forgery (CSRF)",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-19T12:15:09.110",
    "last_modified": "2024-11-21T06:23:14.597",
    "fix_date": "2021-11-16T09:17:26Z"
  },
  "references": [
    {
      "url": "https://github.com/kevinpapst/kimai2/commit/95796ab2560ad93f44068a88f0fad758c2053514",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/3abf308b-7dbd-4864-b1a9-5c45b876def8",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/kevinpapst/kimai2/commit/95796ab2560ad93f44068a88f0fad758c2053514",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/3abf308b-7dbd-4864-b1a9-5c45b876def8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.796984",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "kimai",
    "owner": "kevinpapst",
    "created_at": "2016-10-20T17:06:34Z",
    "updated_at": "2025-01-14T08:20:46Z",
    "pushed_at": "2025-01-10T09:02:15Z",
    "size": 50694,
    "stars": 3449,
    "forks": 598,
    "open_issues": 272,
    "watchers": 3449,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "PHP": 4845183,
      "Twig": 576073,
      "JavaScript": 197888,
      "SCSS": 30758,
      "CSS": 29133,
      "Dockerfile": 12004,
      "Shell": 9034
    },
    "commit_activity": {
      "total_commits_last_year": 141,
      "avg_commits_per_week": 2.7115384615384617,
      "days_active_last_year": 67
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:04:59.247091"
  }
}