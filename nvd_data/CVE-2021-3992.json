{
  "cve_id": "CVE-2021-3992",
  "github_data": {
    "repository": "kevinpapst/kimai2",
    "fix_commit": "ff9acab0fc81f0e9490462739ef15fe4ab028ea5",
    "related_commits": [
      "ff9acab0fc81f0e9490462739ef15fe4ab028ea5",
      "ff9acab0fc81f0e9490462739ef15fe4ab028ea5"
    ],
    "patch_url": "https://github.com/kevinpapst/kimai2/commit/ff9acab0fc81f0e9490462739ef15fe4ab028ea5.patch",
    "fix_commit_details": {
      "sha": "ff9acab0fc81f0e9490462739ef15fe4ab028ea5",
      "commit_date": "2021-11-21T15:41:03Z",
      "author": {
        "login": "kevinpapst",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "improve permissison handling in invoice screen (#2965)",
        "length": 54,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 307,
        "additions": 183,
        "deletions": 124
      },
      "files": [
        {
          "filename": "assets/js/plugins/KimaiForm.js",
          "status": "modified",
          "additions": 12,
          "deletions": 36,
          "patch": "@@ -33,46 +33,22 @@ export default class KimaiForm extends KimaiPlugin {\n         this.getContainer().getPlugin('date-range-picker').destroyDateRangePicker(formSelector);\n     }\n \n-    getFormData(form) {\n+    /**\n+     * @param {HTMLFormElement} form\n+     * @param {Object} overwrites\n+     * @returns {string}\n+     */\n+    convertFormDataToQueryString(form, overwrites = {})\n+    {\n         let serialized = [];\n+        let data = new FormData(form);\n \n-        // Loop through each field in the form\n-        for (let i = 0; i < form.elements.length; i++) {\n-\n-            let field = form.elements[i];\n-\n-            // Don't serialize a couple of field types (button and submit are important to exclude, eg. invoice preview would fail otherwise)\n-            if (!field.name || field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button') {\n-                continue;\n-            }\n-\n-            // If a multi-select, get all selections\n-            if (field.type === 'select-multiple') {\n-                for (var n = 0; n < field.options.length; n++) {\n-                    if (!field.options[n].selected) {\n-                        continue;\n-                    }\n-                    serialized.push({\n-                        name: field.name,\n-                        value: field.options[n].value\n-                    });\n-                }\n-            } else if ((field.type !== 'checkbox' && field.type !== 'radio') || field.checked) {\n-                serialized.push({\n-                    name: field.name,\n-                    value: field.value\n-                });\n-            }\n+        for (const key in overwrites) {\n+            data.set(key, overwrites[key]);\n         }\n \n-        return serialized;\n-    }\n-\n-    convertFormDataToQueryString(formData) {\n-        let serialized = [];\n-\n-        for (let row of formData) {\n-            serialized.push(encodeURIComponent(row.name) + \"=\" + encodeURIComponent(row.value));\n+        for (let row of data) {\n+            serialized.push(encodeURIComponent(row[0]) + \"=\" + encodeURIComponent(row[1]));\n         }\n \n         return serialized.join('&');"
        },
        {
          "filename": "public/build/app.8609d161.js",
          "status": "added",
          "additions": 2,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "public/build/app.8609d161.js.LICENSE.txt",
          "status": "renamed",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "public/build/app.920ba43e.js",
          "status": "removed",
          "additions": 0,
          "deletions": 2,
          "patch": null
        },
        {
          "filename": "public/build/entrypoints.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -3,7 +3,7 @@\n     \"app\": {\n       \"js\": [\n         \"build/runtime.b8e7bb04.js\",\n-        \"build/app.920ba43e.js\"\n+        \"build/app.8609d161.js\"\n       ],\n       \"css\": [\n         \"build/app.3bc2b4d9.css\""
        },
        {
          "filename": "public/build/manifest.json",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n {\n   \"build/app.css\": \"build/app.3bc2b4d9.css\",\n-  \"build/app.js\": \"build/app.920ba43e.js\",\n+  \"build/app.js\": \"build/app.8609d161.js\",\n   \"build/invoice.css\": \"build/invoice.ff32661a.css\",\n   \"build/invoice.js\": \"build/invoice.19f36eca.js\",\n   \"build/invoice-pdf.css\": \"build/invoice-pdf.9a7468ef.css\","
        },
        {
          "filename": "src/Controller/InvoiceController.php",
          "status": "modified",
          "additions": 73,
          "deletions": 63,
          "patch": "@@ -48,21 +48,9 @@\n  */\n final class InvoiceController extends AbstractController\n {\n-    /**\n-     * @var ServiceInvoice\n-     */\n     private $service;\n-    /**\n-     * @var InvoiceTemplateRepository\n-     */\n     private $templateRepository;\n-    /**\n-     * @var InvoiceRepository\n-     */\n     private $invoiceRepository;\n-    /**\n-     * @var EventDispatcherInterface\n-     */\n     private $dispatcher;\n \n     public function __construct(ServiceInvoice $service, InvoiceTemplateRepository $templateRepository, InvoiceRepository $invoiceRepository, EventDispatcherInterface $dispatcher)\n@@ -130,10 +118,11 @@ public function indexAction(Request $request, SystemConfiguration $configuration\n     }\n \n     /**\n-     * @Route(path=\"/preview/{customer}/{template}\", name=\"invoice_preview\", methods={\"GET\"})\n-     * @Security(\"is_granted('view_invoice')\")\n+     * @Route(path=\"/preview/{customer}\", name=\"invoice_preview\", methods={\"GET\"})\n+     * @Security(\"is_granted('access', customer)\")\n+     * @Security(\"is_granted('create_invoice')\")\n      */\n-    public function previewAction(Customer $customer, InvoiceTemplate $template, Request $request, SystemConfiguration $configuration): Response\n+    public function previewAction(Customer $customer, Request $request, SystemConfiguration $configuration): Response\n     {\n         if (!$this->templateRepository->hasTemplate()) {\n             return $this->redirectToRoute('invoice');\n@@ -143,10 +132,8 @@ public function previewAction(Customer $customer, InvoiceTemplate $template, Req\n         $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n         $form->submit($request->query->all(), false);\n \n-        if ($form->isValid() && $this->isGranted('create_invoice')) {\n+        if ($form->isValid()) {\n             try {\n-                $query->setTemplate($template);\n-                $query->setCustomers([$customer]);\n                 $model = $this->service->createModel($query);\n \n                 return $this->service->renderInvoiceWithModel($model, $this->dispatcher);\n@@ -156,12 +143,15 @@ public function previewAction(Customer $customer, InvoiceTemplate $template, Req\n             }\n         }\n \n+        $this->flashFormError($form);\n+\n         return $this->redirectToRoute('invoice');\n     }\n \n     /**\n      * @Route(path=\"/save-invoice/{customer}/{template}\", name=\"invoice_create\", methods={\"GET\"})\n-     * @Security(\"is_granted('view_invoice')\")\n+     * @Security(\"is_granted('access', customer)\")\n+     * @Security(\"is_granted('create_invoice')\")\n      */\n     public function createInvoiceAction(Customer $customer, InvoiceTemplate $template, Request $request, SystemConfiguration $configuration): Response\n     {\n@@ -173,62 +163,22 @@ public function createInvoiceAction(Customer $customer, InvoiceTemplate $templat\n         $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n         $form->submit($request->query->all(), false);\n \n-        if ($form->isValid() && $this->isGranted('create_invoice')) {\n+        if ($form->isValid()) {\n             $query->setTemplate($template);\n             $query->setCustomers([$customer]);\n \n             return $this->renderInvoice($query, $request);\n         }\n \n-        return $this->redirectToRoute('invoice');\n-    }\n-\n-    private function getDefaultQuery(): InvoiceQuery\n-    {\n-        $factory = $this->getDateTimeFactory();\n-        $begin = $factory->getStartOfMonth();\n-        $end = $factory->getEndOfMonth();\n-\n-        $query = new InvoiceQuery();\n-        $query->setBegin($begin);\n-        $query->setEnd($end);\n-        // limit access to data from teams\n-        $query->setCurrentUser($this->getUser());\n-\n-        if (!$this->isGranted('view_other_timesheet')) {\n-            // limit access to own data\n-            $query->setUser($this->getUser());\n-        }\n-\n-        return $query;\n-    }\n-\n-    private function renderInvoice(InvoiceQuery $query, Request $request)\n-    {\n-        // use the current request locale as fallback, if no translation was configured\n-        if (null !== $query->getTemplate() && null === $query->getTemplate()->getLanguage()) {\n-            $query->getTemplate()->setLanguage($request->getLocale());\n-        }\n-\n-        try {\n-            $invoices = $this->service->createInvoices($query, $this->dispatcher);\n-\n-            $this->flashSuccess('action.update.success');\n-\n-            if (\\count($invoices) === 1) {\n-                return $this->redirectToRoute('admin_invoice_list', ['id' => $invoices[0]->getId()]);\n-            }\n-\n-            return $this->redirectToRoute('admin_invoice_list');\n-        } catch (Exception $ex) {\n-            $this->flashUpdateException($ex);\n-        }\n+        $this->flashFormError($form);\n \n         return $this->redirectToRoute('invoice');\n     }\n \n     /**\n      * @Route(path=\"/change-status/{id}/{status}\", name=\"admin_invoice_status\", methods={\"GET\", \"POST\"})\n+     * @Security(\"is_granted('access', invoice.getCustomer())\")\n+     * @Security(\"is_granted('create_invoice')\")\n      */\n     public function changeStatusAction(Invoice $invoice, string $status, Request $request): Response\n     {\n@@ -256,6 +206,8 @@ public function changeStatusAction(Invoice $invoice, string $status, Request $re\n \n     /**\n      * @Route(path=\"/delete/{id}/{token}\", name=\"admin_invoice_delete\", methods={\"GET\"})\n+     * @Security(\"is_granted('access', invoice.getCustomer())\")\n+     * @Security(\"is_granted('delete_invoice')\")\n      */\n     public function deleteInvoiceAction(Invoice $invoice, string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n     {\n@@ -279,6 +231,8 @@ public function deleteInvoiceAction(Invoice $invoice, string $token, CsrfTokenMa\n \n     /**\n      * @Route(path=\"/download/{id}\", name=\"admin_invoice_download\", methods={\"GET\"})\n+     * @Security(\"is_granted('access', invoice.getCustomer())\")\n+     * @Security(\"is_granted('create_invoice')\")\n      */\n     public function downloadAction(Invoice $invoice): Response\n     {\n@@ -295,6 +249,7 @@ public function downloadAction(Invoice $invoice): Response\n \n     /**\n      * @Route(path=\"/show/{page}\", defaults={\"page\": 1}, requirements={\"page\": \"[1-9]\\d*\"}, name=\"admin_invoice_list\", methods={\"GET\"})\n+     * @Security(\"is_granted('view_invoice')\")\n      */\n     public function showInvoicesAction(Request $request, int $page): Response\n     {\n@@ -325,6 +280,7 @@ public function showInvoicesAction(Request $request, int $page): Response\n \n     /**\n      * @Route(path=\"/export\", name=\"invoice_export\", methods={\"GET\"})\n+     * @Security(\"is_granted('view_invoice')\")\n      */\n     public function exportAction(Request $request, AnnotatedObjectExporter $exporter)\n     {\n@@ -474,6 +430,60 @@ public function deleteTemplate(InvoiceTemplate $template, string $token, CsrfTok\n         return $this->redirectToRoute('admin_invoice_template');\n     }\n \n+    private function getDefaultQuery(): InvoiceQuery\n+    {\n+        $factory = $this->getDateTimeFactory();\n+        $begin = $factory->getStartOfMonth();\n+        $end = $factory->getEndOfMonth();\n+\n+        $query = new InvoiceQuery();\n+        $query->setBegin($begin);\n+        $query->setEnd($end);\n+        // limit access to data from teams\n+        $query->setCurrentUser($this->getUser());\n+\n+        if (!$this->isGranted('view_other_timesheet')) {\n+            // limit access to own data\n+            $query->setUser($this->getUser());\n+        }\n+\n+        return $query;\n+    }\n+\n+    private function renderInvoice(InvoiceQuery $query, Request $request)\n+    {\n+        // use the current request locale as fallback, if no translation was configured\n+        if (null !== $query->getTemplate() && null === $query->getTemplate()->getLanguage()) {\n+            $query->getTemplate()->setLanguage($request->getLocale());\n+        }\n+\n+        try {\n+            $invoices = $this->service->createInvoices($query, $this->dispatcher);\n+\n+            $this->flashSuccess('action.update.success');\n+\n+            if (\\count($invoices) === 1) {\n+                return $this->redirectToRoute('admin_invoice_list', ['id' => $invoices[0]->getId()]);\n+            }\n+\n+            return $this->redirectToRoute('admin_invoice_list');\n+        } catch (Exception $ex) {\n+            $this->flashUpdateException($ex);\n+        }\n+\n+        return $this->redirectToRoute('invoice');\n+    }\n+\n+    private function flashFormError(FormInterface $form): void\n+    {\n+        $err = '';\n+        foreach ($form->getErrors(true, true) as $error) {\n+            $err .= PHP_EOL . '[' . $error->getOrigin()->getName() . '] ' . $error->getMessage();\n+        }\n+\n+        $this->flashError('action.update.error', ['%reason%' => $err]);\n+    }\n+\n     private function renderTemplateForm(InvoiceTemplate $template, Request $request): Response\n     {\n         $editForm = $this->createEditForm($template);"
        },
        {
          "filename": "src/Repository/CustomerRepository.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -241,7 +241,8 @@ public function getQueryBuilderForFormType(CustomerFormTypeQuery $query): QueryB\n \n         $outerQuery = $qb->expr()->orX();\n \n-        if ($query->hasCustomers()) {\n+        // this is a risk, as a user can manipulate the query and inject IDs that would be hidden otherwise\n+        if ($query->isAllowCustomerPreselect() && $query->hasCustomers()) {\n             $outerQuery->add($qb->expr()->in('c.id', ':customer'));\n             $qb->setParameter('customer', $query->getCustomers());\n         }"
        },
        {
          "filename": "src/Repository/Query/CustomerFormTypeQuery.php",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -20,6 +20,7 @@ final class CustomerFormTypeQuery extends BaseFormTypeQuery\n      * @var Customer|null\n      */\n     private $customerToIgnore;\n+    private $allowCustomerPreselect = false;\n \n     /**\n      * @param Customer|int|null $customer\n@@ -34,6 +35,16 @@ public function __construct($customer = null)\n         }\n     }\n \n+    public function isAllowCustomerPreselect(): bool\n+    {\n+        return $this->allowCustomerPreselect;\n+    }\n+\n+    public function setAllowCustomerPreselect(bool $allowCustomerPreselect): void\n+    {\n+        $this->allowCustomerPreselect = $allowCustomerPreselect;\n+    }\n+\n     /**\n      * @return Customer|null\n      */"
        },
        {
          "filename": "src/Voter/CustomerVoter.php",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -34,6 +34,7 @@ final class CustomerVoter extends Voter\n         'comments',\n         'comments_create',\n         'details',\n+        'access',\n     ];\n \n     private $permissionManager;\n@@ -75,6 +76,22 @@ protected function voteOnAttribute($attribute, $subject, TokenInterface $token)\n             return false;\n         }\n \n+        // this is a virtual permission, only meant to be used by developer\n+        // it checks if access to the given customer is potentially possible\n+        if ($attribute === 'access') {\n+            if ($subject->getTeams()->count() === 0) {\n+                return true;\n+            }\n+\n+            foreach ($subject->getTeams() as $team) {\n+                if ($user->isInTeam($team)) {\n+                    return true;\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n         if ($this->permissionManager->hasRolePermission($user, $attribute . '_customer')) {\n             return true;\n         }"
        },
        {
          "filename": "src/Voter/UserVoter.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -29,7 +29,6 @@ final class UserVoter extends Voter\n         'preferences',\n         'api-token',\n         'hourly-rate',\n-        // teams_own_profile could be merged with view_team_member\n         'view_team_member',\n     ];\n "
        },
        {
          "filename": "templates/invoice/index.html.twig",
          "status": "modified",
          "additions": 10,
          "deletions": 10,
          "patch": "@@ -109,8 +109,8 @@\n                                 </td>\n                                 <td class=\"w-min text-center\">\n                                     {{ widgets.action_button('show', {'url': '#invoice_preview_details_' ~ model.customer.id, 'title': 'timesheet.all'|trans, 'class': 'btn btn-sm hidden-xs hidden-sm'}, 'link') }}\n-                                    {{ widgets.action_button('print', {'url': '#', 'onclick': 'return singleInvoice(this)', 'title': 'button.preview'|trans, 'target': '_blank', 'class': 'btn btn-sm', 'attr': {'data-href': path('invoice_preview', {'customer': model.customer.id, 'template': model.template.id})}}) }}\n-                                    {{ widgets.action_button('save', {'url': '#', 'onclick': 'return singleInvoice(this)', 'title': 'action.save'|trans, 'class': 'btn btn-sm', 'attr': {'data-href': path('invoice_create', {'customer': model.customer.id, 'template': model.template.id})}}, 'success') }}\n+                                    {{ widgets.action_button('print', {'url': '#', 'onclick': 'return singleInvoice(this)', 'title': 'button.preview'|trans, 'target': '_blank', 'class': 'btn btn-sm', 'attr': {'data-customer': model.customer.id, 'data-template': model.template.id, 'data-href': path('invoice_preview', {'customer': model.customer.id})}}) }}\n+                                    {{ widgets.action_button('save', {'url': '#', 'onclick': 'return singleInvoice(this)', 'title': 'action.save'|trans, 'class': 'btn btn-sm', 'attr': {'data-customer': model.customer.id, 'data-template': model.template.id, 'data-href': path('invoice_create', {'customer': model.customer.id, 'template': model.template.id})}}, 'success') }}\n                                 </td>\n                                 <td class=\"w-min text-right hidden-xs\">\n                                     {{ model.calculator.timeWorked|duration(isDecimal) }}\n@@ -214,20 +214,20 @@\n \n         function singleInvoice(link)\n         {\n-            let formPlugin = kimai.getPlugin('form');\n-            let data = formPlugin.getFormData(document.getElementById('{{ formId }}'));\n-            let uri = formPlugin.convertFormDataToQueryString(data);\n-            let baseUrl = link.getAttribute('data-href');\n-            link.href = baseUrl + '?' + uri;\n+            const formPlugin = kimai.getPlugin('form');\n+            const overwrites = {'customers[]': link.dataset['customer'], 'template': link.dataset['template']};\n+            const uri = formPlugin.convertFormDataToQueryString(document.getElementById('{{ formId }}'), overwrites);\n+\n+            link.href = link.dataset['href'] + '?' + uri;\n \n             return true;\n         }\n \n         function saveAllInvoices(link)\n         {\n-            let formPlugin = kimai.getPlugin('form');\n-            let data = formPlugin.getFormData(document.getElementById('{{ formId }}'));\n-            let uri = formPlugin.convertFormDataToQueryString(data);\n+            const formPlugin = kimai.getPlugin('form');\n+            const uri = formPlugin.convertFormDataToQueryString(document.getElementById('{{ formId }}'));\n+\n             link.href = '{{ path('invoice') }}?createInvoice=true&' + uri;\n \n             return true;"
        },
        {
          "filename": "tests/Controller/InvoiceControllerTest.php",
          "status": "modified",
          "additions": 5,
          "deletions": 9,
          "patch": "@@ -207,7 +207,7 @@ public function testCreateAction()\n         }\n     }\n \n-    public function testPrintAction()\n+    public function testPreviewAction()\n     {\n         $client = $this->getClientForAuthenticatedUser(User::ROLE_TEAMLEAD);\n \n@@ -233,17 +233,19 @@ public function testPrintAction()\n         $params = [\n             'daterange' => $dateRange,\n             'projects' => [1],\n+            'template' => $id,\n+            'customers[]' => 1\n         ];\n \n-        $action = '/invoice/preview/1/' . $id . '?' . http_build_query($params);\n+        $action = '/invoice/preview/1?' . http_build_query($params);\n         $this->request($client, $action);\n         $this->assertTrue($client->getResponse()->isSuccessful());\n         $node = $client->getCrawler()->filter('body');\n         $this->assertEquals(1, $node->count());\n         $this->assertEquals('invoice_print', $node->getIterator()[0]->getAttribute('class'));\n     }\n \n-    public function testCreateActionAsAdminWithDownloadAndStatusChangeAndDelete()\n+    public function testCreateActionAsAdminWithDownloadAndStatusChange()\n     {\n         $client = $this->getClientForAuthenticatedUser(User::ROLE_ADMIN);\n \n@@ -352,12 +354,6 @@ public function testCreateActionAsAdminWithDownloadAndStatusChangeAndDelete()\n         $this->assertIsRedirect($client, '/invoice/show');\n         $client->followRedirect();\n         $this->assertTrue($client->getResponse()->isSuccessful());\n-\n-        // this does not delete the invoice, because the token is wrong\n-        $this->request($client, '/invoice/delete/' . $id . '/fghfkjhgkjhg');\n-        $this->assertIsRedirect($client, '/invoice/show');\n-        $client->followRedirect();\n-        $this->assertTrue($client->getResponse()->isSuccessful());\n     }\n \n     public function testEditTemplateAction()"
        },
        {
          "filename": "tests/Repository/Query/CustomerFormTypeQueryTest.php",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -25,6 +25,9 @@ public function testQuery()\n         $this->assertBaseQuery($sut);\n \n         $customer = new Customer();\n+        self::assertFalse($sut->isAllowCustomerPreselect());\n+        $sut->setAllowCustomerPreselect(true);\n+        self::assertTrue($sut->isAllowCustomerPreselect());\n         self::assertNull($sut->getCustomerToIgnore());\n         self::assertInstanceOf(CustomerFormTypeQuery::class, $sut->setCustomerToIgnore($customer));\n         self::assertSame($customer, $sut->getCustomerToIgnore());"
        },
        {
          "filename": "tests/Voter/CustomerVoterTest.php",
          "status": "modified",
          "additions": 46,
          "deletions": 0,
          "patch": "@@ -118,4 +118,50 @@ public function testTeamMember()\n \n         $this->assertVote($user, $customer, 'edit', VoterInterface::ACCESS_GRANTED);\n     }\n+\n+    public function testAccess()\n+    {\n+        // ALLOW: customer has no teams\n+        $this->assertVote(new User(), new Customer(), 'access', VoterInterface::ACCESS_GRANTED);\n+\n+        // ALLOW: customer has no teams\n+        $user = new User();\n+        $user->addTeam(new Team());\n+        $this->assertVote($user, new Customer(), 'access', VoterInterface::ACCESS_GRANTED);\n+\n+        // ALLOW: user and customer are in the same team (as teamlead)\n+        $team = new Team();\n+        $user = new User();\n+        $team->addTeamlead($user);\n+\n+        $customer = new Customer();\n+        $customer->addTeam($team);\n+\n+        $this->assertVote($user, $customer, 'access', VoterInterface::ACCESS_GRANTED);\n+\n+        // ALLOW: user and customer are in the same team (as member)\n+        $team = new Team();\n+        $user = new User();\n+        $user->addTeam(new Team());\n+        $user->addTeam($team);\n+\n+        $customer = new Customer();\n+        $customer->addTeam($team);\n+\n+        $this->assertVote($user, $customer, 'access', VoterInterface::ACCESS_GRANTED);\n+\n+        // DENY: customer has a team, user not\n+        $customer = new Customer();\n+        $customer->addTeam(new Team());\n+\n+        $this->assertVote(new User(), $customer, 'access', VoterInterface::ACCESS_DENIED);\n+\n+        // DENY: user and customer has a team are not in the same team\n+        $user = new User();\n+        $user->addTeam(new Team());\n+        $customer = new Customer();\n+        $customer->addTeam(new Team());\n+\n+        $this->assertVote($user, $customer, 'access', VoterInterface::ACCESS_DENIED);\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 10,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c07979e3a937d8b9b7a6243cc7c0c2b5d3a2fa47",
            "date": "2025-01-10T09:02:14Z",
            "author_login": "kernie"
          },
          {
            "sha": "23e8dcf49540c63cfb8284d641a7e403bc4aafb9",
            "date": "2025-01-09T11:16:45Z",
            "author_login": "weblate"
          },
          {
            "sha": "4332ef95a2074a4adcc42465c46328f240d66a66",
            "date": "2024-12-22T21:50:42Z",
            "author_login": "kevinpapst"
          },
          {
            "sha": "4fdfb6f4787b62220824a58b9f94e62baf95af0f",
            "date": "2024-12-22T18:15:32Z",
            "author_login": "weblate"
          },
          {
            "sha": "136104d4b0c75102f3843725ce2a9bdb902dccd9",
            "date": "2024-12-22T17:36:47Z",
            "author_login": "kevinpapst"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-284",
    "description": "kimai2 is vulnerable to Improper Access Control",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-12-01T11:15:08.037",
    "last_modified": "2024-11-21T06:23:19.783",
    "fix_date": "2021-11-21T15:41:03Z"
  },
  "references": [
    {
      "url": "https://github.com/kevinpapst/kimai2/commit/ff9acab0fc81f0e9490462739ef15fe4ab028ea5",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a0c438fb-c8e1-40cf-acc6-c8a532b80b93",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/kevinpapst/kimai2/commit/ff9acab0fc81f0e9490462739ef15fe4ab028ea5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a0c438fb-c8e1-40cf-acc6-c8a532b80b93",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.810870",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "kimai",
    "owner": "kevinpapst",
    "created_at": "2016-10-20T17:06:34Z",
    "updated_at": "2025-01-14T08:20:46Z",
    "pushed_at": "2025-01-10T09:02:15Z",
    "size": 50694,
    "stars": 3449,
    "forks": 598,
    "open_issues": 272,
    "watchers": 3449,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "PHP": 4845183,
      "Twig": 576073,
      "JavaScript": 197888,
      "SCSS": 30758,
      "CSS": 29133,
      "Dockerfile": 12004,
      "Shell": 9034
    },
    "commit_activity": {
      "total_commits_last_year": 141,
      "avg_commits_per_week": 2.7115384615384617,
      "days_active_last_year": 67
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:04:59.247091"
  }
}