{
  "cve_id": "CVE-2021-4026",
  "github_data": {
    "repository": "bookstackapp/bookstack",
    "fix_commit": "b4fa82e3298a15443ca40bff205b7a16a1031d92",
    "related_commits": [
      "b4fa82e3298a15443ca40bff205b7a16a1031d92",
      "b4fa82e3298a15443ca40bff205b7a16a1031d92"
    ],
    "patch_url": "https://github.com/bookstackapp/bookstack/commit/b4fa82e3298a15443ca40bff205b7a16a1031d92.patch",
    "fix_commit_details": {
      "sha": "b4fa82e3298a15443ca40bff205b7a16a1031d92",
      "commit_date": "2021-11-30T00:06:17Z",
      "author": {
        "login": "ssddanbrown",
        "type": "User",
        "stats": {
          "total_commits": 3432,
          "average_weekly_commits": 6.905432595573441,
          "total_additions": 633335,
          "total_deletions": 385989,
          "weeks_active": 420
        }
      },
      "commit_message": {
        "title": "Fixed related permissions query not considering drafts",
        "length": 356,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 123,
        "additions": 88,
        "deletions": 35
      },
      "files": [
        {
          "filename": "app/Actions/ActivityService.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -133,7 +133,7 @@ public function entityActivity(Entity $entity, int $count = 20, int $page = 1):\n     }\n \n     /**\n-     * Get latest activity for a user, Filtering out similar items.\n+     * Get the latest activity for a user, Filtering out similar items.\n      */\n     public function userActivity(User $user, int $count = 20, int $page = 0): array\n     {"
        },
        {
          "filename": "app/Auth/Permissions/PermissionService.php",
          "status": "modified",
          "additions": 56,
          "deletions": 32,
          "patch": "@@ -602,25 +602,35 @@ public function enforceEntityRestrictions(Entity $entity, Builder $query, string\n \n     /**\n      * Filter items that have entities set as a polymorphic relation.\n+     * For simplicity, this will not return results attached to draft pages.\n+     * Draft pages should never really have related items though.\n      *\n      * @param Builder|QueryBuilder $query\n      */\n     public function filterRestrictedEntityRelations($query, string $tableName, string $entityIdColumn, string $entityTypeColumn, string $action = 'view')\n     {\n         $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn, 'entityTypeColumn' => $entityTypeColumn];\n-\n-        $q = $query->where(function ($query) use ($tableDetails, $action) {\n-            $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {\n-                /** @var Builder $permissionQuery */\n-                $permissionQuery->select(['role_id'])->from('joint_permissions')\n-                    ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])\n-                    ->whereColumn('joint_permissions.entity_type', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])\n-                    ->where('action', '=', $action)\n-                    ->whereIn('role_id', $this->getCurrentUserRoles())\n-                    ->where(function (QueryBuilder $query) {\n-                        $this->addJointHasPermissionCheck($query, $this->currentUser()->id);\n-                    });\n-            });\n+        $pageMorphClass = (new Page())->getMorphClass();\n+\n+        $q = $query->whereExists(function ($permissionQuery) use (&$tableDetails, $action) {\n+            /** @var Builder $permissionQuery */\n+            $permissionQuery->select(['role_id'])->from('joint_permissions')\n+                ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])\n+                ->whereColumn('joint_permissions.entity_type', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'])\n+                ->where('joint_permissions.action', '=', $action)\n+                ->whereIn('joint_permissions.role_id', $this->getCurrentUserRoles())\n+                ->where(function (QueryBuilder $query) {\n+                    $this->addJointHasPermissionCheck($query, $this->currentUser()->id);\n+                });\n+        })->where(function ($query) use ($tableDetails, $pageMorphClass) {\n+            /** @var Builder $query */\n+            $query->where($tableDetails['entityTypeColumn'], '!=', $pageMorphClass)\n+                ->orWhereExists(function(QueryBuilder $query) use ($tableDetails, $pageMorphClass) {\n+                    $query->select('id')->from('pages')\n+                        ->whereColumn('pages.id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])\n+                        ->where($tableDetails['tableName'] . '.' . $tableDetails['entityTypeColumn'], '=', $pageMorphClass)\n+                        ->where('pages.draft', '=', false);\n+                });\n         });\n \n         $this->clean();\n@@ -634,25 +644,39 @@ public function filterRestrictedEntityRelations($query, string $tableName, strin\n      */\n     public function filterRelatedEntity(string $entityClass, Builder $query, string $tableName, string $entityIdColumn): Builder\n     {\n-        $tableDetails = ['tableName' => $tableName, 'entityIdColumn' => $entityIdColumn];\n-        $morphClass = app($entityClass)->getMorphClass();\n-\n-        $q = $query->where(function ($query) use ($tableDetails, $morphClass) {\n-            $query->where(function ($query) use (&$tableDetails, $morphClass) {\n-                $query->whereExists(function ($permissionQuery) use (&$tableDetails, $morphClass) {\n-                    /** @var Builder $permissionQuery */\n-                    $permissionQuery->select('id')->from('joint_permissions')\n-                        ->whereColumn('joint_permissions.entity_id', '=', $tableDetails['tableName'] . '.' . $tableDetails['entityIdColumn'])\n-                        ->where('entity_type', '=', $morphClass)\n-                        ->where('action', '=', 'view')\n-                        ->whereIn('role_id', $this->getCurrentUserRoles())\n-                        ->where(function (QueryBuilder $query) {\n-                            $this->addJointHasPermissionCheck($query, $this->currentUser()->id);\n-                        });\n+        $fullEntityIdColumn = $tableName . '.' . $entityIdColumn;\n+        $instance = new $entityClass;\n+        $morphClass = $instance->getMorphClass();\n+\n+        $existsQuery = function($permissionQuery) use ($fullEntityIdColumn, $morphClass) {\n+            /** @var Builder $permissionQuery */\n+            $permissionQuery->select('joint_permissions.role_id')->from('joint_permissions')\n+                ->whereColumn('joint_permissions.entity_id', '=', $fullEntityIdColumn)\n+                ->where('joint_permissions.entity_type', '=', $morphClass)\n+                ->where('joint_permissions.action', '=', 'view')\n+                ->whereIn('joint_permissions.role_id', $this->getCurrentUserRoles())\n+                ->where(function (QueryBuilder $query) {\n+                    $this->addJointHasPermissionCheck($query, $this->currentUser()->id);\n                 });\n-            })->orWhere($tableDetails['entityIdColumn'], '=', 0);\n+        };\n+\n+        $q = $query->where(function ($query) use ($existsQuery, $fullEntityIdColumn) {\n+            $query->whereExists($existsQuery)\n+                ->orWhere($fullEntityIdColumn, '=', 0);\n         });\n \n+        if ($instance instanceof Page) {\n+            // Prevent visibility of non-owned draft pages\n+            $q->whereExists(function(QueryBuilder $query) use ($fullEntityIdColumn) {\n+                $query->select('id')->from('pages')\n+                    ->whereColumn('pages.id', '=', $fullEntityIdColumn)\n+                    ->where(function (QueryBuilder $query) {\n+                        $query->where('pages.draft', '=', false)\n+                            ->orWhere('pages.owned_by', '=', $this->currentUser()->id);\n+                    });\n+            });\n+        }\n+\n         $this->clean();\n \n         return $q;\n@@ -666,9 +690,9 @@ public function filterRelatedEntity(string $entityClass, Builder $query, string\n      */\n     protected function addJointHasPermissionCheck($query, int $userIdToCheck)\n     {\n-        $query->where('has_permission', '=', true)->orWhere(function ($query) use ($userIdToCheck) {\n-            $query->where('has_permission_own', '=', true)\n-                ->where('owned_by', '=', $userIdToCheck);\n+        $query->where('joint_permissions.has_permission', '=', true)->orWhere(function ($query) use ($userIdToCheck) {\n+            $query->where('joint_permissions.has_permission_own', '=', true)\n+                ->where('joint_permissions.owned_by', '=', $userIdToCheck);\n         });\n     }\n "
        },
        {
          "filename": "app/Exceptions/Handler.php",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -4,6 +4,7 @@\n \n use Exception;\n use Illuminate\\Auth\\AuthenticationException;\n+use Illuminate\\Database\\Eloquent\\ModelNotFoundException;\n use Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\n use Illuminate\\Http\\JsonResponse;\n use Illuminate\\Http\\Request;\n@@ -75,15 +76,20 @@ protected function isApiRequest(Request $request): bool\n     /**\n      * Render an exception when the API is in use.\n      */\n-    protected function renderApiException(Exception $e): JsonResponse\n+    protected function renderApiException(Throwable $e): JsonResponse\n     {\n-        $code = $e->getCode() === 0 ? 500 : $e->getCode();\n+        $code = 500;\n         $headers = [];\n+\n         if ($e instanceof HttpException) {\n             $code = $e->getStatusCode();\n             $headers = $e->getHeaders();\n         }\n \n+        if ($e instanceof ModelNotFoundException) {\n+            $code = 404;\n+        }\n+\n         $responseData = [\n             'error' => [\n                 'message' => $e->getMessage(),"
        },
        {
          "filename": "tests/Api/AttachmentsApiTest.php",
          "status": "modified",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -224,6 +224,29 @@ public function test_read_endpoint_for_file_attachment()\n         unlink(storage_path($attachment->path));\n     }\n \n+    public function test_attachment_not_visible_on_other_users_draft()\n+    {\n+        $this->actingAsApiAdmin();\n+        $editor = $this->getEditor();\n+\n+        /** @var Page $page */\n+        $page = Page::query()->first();\n+        $page->draft = true;\n+        $page->owned_by = $editor;\n+        $page->save();\n+        $this->regenEntityPermissions($page);\n+\n+        $attachment = $this->createAttachmentForPage($page, [\n+            'name'  => 'my attachment',\n+            'path'  => 'https://example.com',\n+            'order' => 1,\n+        ]);\n+\n+        $resp = $this->getJson(\"{$this->baseEndpoint}/{$attachment->id}\");\n+\n+        $resp->assertStatus(404);\n+    }\n+\n     public function test_update_endpoint()\n     {\n         $this->actingAsApiAdmin();"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "786a434c03faa996e630f4a0a523567d3b093f43",
            "date": "2025-01-14T14:56:43Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "25c4f4b02ba06f66f5239de48ae005f895146f8d",
            "date": "2025-01-14T14:53:10Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "481580be172a4813ee98ad1b945d12d731e71cdb",
            "date": "2025-01-13T16:51:07Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "593645acfe8521db97d7469c92546c8529703969",
            "date": "2025-01-13T14:30:53Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "b9751807e7bad4b7d477b6977f630881f730abad",
            "date": "2025-01-13T13:27:32Z",
            "author_login": "ssddanbrown"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-284",
    "description": "bookstack is vulnerable to Improper Access Control",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-30T20:15:07.690",
    "last_modified": "2024-11-21T06:36:44.937",
    "fix_date": "2021-11-30T00:06:17Z"
  },
  "references": [
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/b4fa82e3298a15443ca40bff205b7a16a1031d92",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c6dfa80d-43e6-4b49-95af-cc031bb66b1d",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/b4fa82e3298a15443ca40bff205b7a16a1031d92",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c6dfa80d-43e6-4b49-95af-cc031bb66b1d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.809611",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "BookStack",
    "owner": "bookstackapp",
    "created_at": "2015-08-29T10:26:44Z",
    "updated_at": "2025-01-14T12:14:34Z",
    "pushed_at": "2025-01-13T20:16:47Z",
    "size": 41179,
    "stars": 15786,
    "forks": 1978,
    "open_issues": 598,
    "watchers": 15786,
    "has_security_policy": false,
    "default_branch": "development",
    "protected_branches": [
      "release"
    ],
    "languages": {
      "PHP": 7963438,
      "TypeScript": 1856418,
      "Blade": 444101,
      "JavaScript": 287858,
      "SCSS": 139395,
      "Dockerfile": 1282,
      "Shell": 347
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:05:28.288711"
  }
}