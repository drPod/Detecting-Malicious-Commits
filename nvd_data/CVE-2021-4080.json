{
  "cve_id": "CVE-2021-4080",
  "github_data": {
    "repository": "crater-invoice/crater",
    "fix_commit": "cdc913d16cf624aee852bc9163a7c6ffc8d1da9d",
    "related_commits": [
      "cdc913d16cf624aee852bc9163a7c6ffc8d1da9d",
      "cdc913d16cf624aee852bc9163a7c6ffc8d1da9d"
    ],
    "patch_url": "https://github.com/crater-invoice/crater/commit/cdc913d16cf624aee852bc9163a7c6ffc8d1da9d.patch",
    "fix_commit_details": {
      "sha": "cdc913d16cf624aee852bc9163a7c6ffc8d1da9d",
      "commit_date": "2021-12-29T12:33:20Z",
      "author": {
        "login": "theWorstComrade",
        "type": "User",
        "stats": {
          "total_commits": 4,
          "average_weekly_commits": 0.014760147601476014,
          "total_additions": 272,
          "total_deletions": 15,
          "weeks_active": 4
        }
      },
      "commit_message": {
        "title": "Unrestricted php file upload fix (#681)",
        "length": 105,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 184,
        "additions": 176,
        "deletions": 8
      },
      "files": [
        {
          "filename": "app/Http/Controllers/V1/Admin/Expense/ExpensesController.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -39,7 +39,7 @@ public function index(Request $request)\n     /**\n      * Store a newly created resource in storage.\n      *\n-     * @param  \\Illuminate\\Http\\Request $request\n+     * @param  \\Crater\\Http\\Requests\\ExpenseRequest $request\n      * @return \\Illuminate\\Http\\JsonResponse\n      */\n     public function store(ExpenseRequest $request)\n@@ -67,7 +67,7 @@ public function show(Expense $expense)\n     /**\n      * Update the specified resource in storage.\n      *\n-     * @param  \\Illuminate\\Http\\Request $request\n+     * @param  \\Crater\\Http\\Requests\\ExpenseRequest $request\n      * @param  \\Crater\\Models\\Expense $expense\n      * @return \\Illuminate\\Http\\JsonResponse\n      */"
        },
        {
          "filename": "app/Http/Controllers/V1/Admin/Expense/UploadReceiptController.php",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -5,17 +5,18 @@\n use Crater\\Http\\Controllers\\Controller;\n use Crater\\Models\\Expense;\n use Illuminate\\Http\\Request;\n+use Crater\\Http\\Requests\\ExpenseRequest;\n \n class UploadReceiptController extends Controller\n {\n     /**\n      * Upload the expense receipts to storage.\n      *\n-     * @param  \\Illuminate\\Http\\Request $request\n+     * @param  \\Crater\\Http\\Requests\\ExpenseRequest $request\n      * @param  Expense $expense\n      * @return \\Illuminate\\Http\\JsonResponse\n      */\n-    public function __invoke(Request $request, Expense $expense)\n+    public function __invoke(ExpenseRequest $request, Expense $expense)\n     {\n         $this->authorize('update', $expense);\n "
        },
        {
          "filename": "app/Http/Controllers/V1/Admin/Settings/CompanyController.php",
          "status": "modified",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -9,6 +9,8 @@\n use Crater\\Http\\Resources\\UserResource;\n use Crater\\Models\\Company;\n use Illuminate\\Http\\Request;\n+use Crater\\Http\\Requests\\AvatarRequest;\n+use Crater\\Http\\Requests\\CompanyLogoRequest;\n \n class CompanyController extends Controller\n {\n@@ -58,10 +60,10 @@ public function updateCompany(CompanyRequest $request)\n     /**\n      * Upload the company logo to storage.\n      *\n-     * @param  \\Illuminate\\Http\\Request $request\n+     * @param  \\Crater\\Http\\Requests\\CompanyLogoRequest $request\n      * @return \\Illuminate\\Http\\JsonResponse\n      */\n-    public function uploadCompanyLogo(Request $request)\n+    public function uploadCompanyLogo(CompanyLogoRequest $request)\n     {\n         $company = Company::find($request->header('company'));\n \n@@ -89,10 +91,10 @@ public function uploadCompanyLogo(Request $request)\n     /**\n      * Upload the Admin Avatar to public storage.\n      *\n-     * @param  \\Illuminate\\Http\\Request $request\n+     * @param  \\Crater\\Http\\Requests\\AvatarRequest $request\n      * @return \\Illuminate\\Http\\JsonResponse\n      */\n-    public function uploadAvatar(Request $request)\n+    public function uploadAvatar(AvatarRequest $request)\n     {\n         $user = auth()->user();\n "
        },
        {
          "filename": "app/Http/Requests/AvatarRequest.php",
          "status": "added",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -0,0 +1,40 @@\n+<?php\n+\n+namespace Crater\\Http\\Requests;\n+\n+use Crater\\Rules\\Base64Mime;\n+use Illuminate\\Foundation\\Http\\FormRequest;\n+\n+class AvatarRequest extends FormRequest\n+{\n+    /**\n+     * Determine if the user is authorized to make this request.\n+     *\n+     * @return bool\n+     */\n+    public function authorize()\n+    {\n+        return true;\n+    }\n+\n+    /**\n+     * Get the validation rules that apply to the request.\n+     *\n+     * @return array\n+     */\n+    public function rules()\n+    {\n+        return [\n+            'admin_avatar' => [\n+                'nullable',\n+                'file',\n+                'mimes:gif,jpg,png',\n+                'max:20000'\n+            ],\n+            'avatar' => [\n+                'nullable',\n+                new Base64Mime(['gif', 'jpg', 'png'])\n+            ]\n+        ];\n+    }\n+}"
        },
        {
          "filename": "app/Http/Requests/CompanyLogoRequest.php",
          "status": "added",
          "additions": 34,
          "deletions": 0,
          "patch": "@@ -0,0 +1,34 @@\n+<?php\n+\n+namespace Crater\\Http\\Requests;\n+\n+use Crater\\Rules\\Base64Mime;\n+use Illuminate\\Foundation\\Http\\FormRequest;\n+\n+class CompanyLogoRequest extends FormRequest\n+{\n+    /**\n+     * Determine if the user is authorized to make this request.\n+     *\n+     * @return bool\n+     */\n+    public function authorize()\n+    {\n+        return true;\n+    }\n+\n+    /**\n+     * Get the validation rules that apply to the request.\n+     *\n+     * @return array\n+     */\n+    public function rules()\n+    {\n+        return [\n+            'company_logo' => [\n+                'nullable',\n+                new Base64Mime(['gif', 'jpg', 'png'])\n+            ]\n+        ];\n+    }\n+}"
        },
        {
          "filename": "app/Http/Requests/ExpenseRequest.php",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -51,6 +51,12 @@ public function rules()\n             'currency_id' => [\n                 'required'\n             ],\n+            'attachment_receipt' => [\n+                'nullable',\n+                'file',\n+                'mimes:jpg,png,pdf,doc,docx,xls,xlsx,ppt,pptx',\n+                'max:20000'\n+            ]\n         ];\n \n         if ($companyCurrency && $this->currency_id) {"
        },
        {
          "filename": "app/Rules/Base64Mime.php",
          "status": "added",
          "additions": 85,
          "deletions": 0,
          "patch": "@@ -0,0 +1,85 @@\n+<?php\n+\n+namespace Crater\\Rules;\n+\n+use Illuminate\\Contracts\\Validation\\Rule;\n+\n+class Base64Mime implements Rule\n+{\n+    private $attribute;\n+    private $extensions;\n+\n+    /**\n+     * Create a new rule instance.\n+     *\n+     * @return void\n+     */\n+    public function __construct(array $extensions)\n+    {\n+        $this->extensions = $extensions;\n+    }\n+\n+    /**\n+     * Determine if the validation rule passes.\n+     *\n+     * @param  string  $attribute\n+     * @param  mixed  $value\n+     * @return bool\n+     */\n+    public function passes($attribute, $value)\n+    {\n+        $this->attribute = $attribute;\n+\n+        try {\n+            $data = json_decode($value)->data;\n+        } catch (\\Exception $e) {\n+            return False;\n+        }\n+\n+        $pattern = '/^data:\\w+\\/[\\w\\+]+;base64,[\\w\\+\\=\\/]+$/';\n+\n+        if(!preg_match($pattern, $data)) {\n+            return False;\n+        }\n+\n+        $data = explode(',', $data);\n+\n+        if(!isset($data[1]) || empty($data[1])) {\n+            return False;\n+        }\n+\n+        try {\n+            $data = base64_decode($data[1]);\n+            $f = finfo_open();\n+            $result = finfo_buffer($f, $data, FILEINFO_EXTENSION);\n+\n+            if($result === '???')\n+                return False;\n+\n+            if(strpos($result, '/')) {\n+                foreach(explode('/', $result) as $ext) {\n+                    if(in_array($ext, $this->extensions))\n+                        return True;\n+                }\n+            } else {\n+                if(in_array($result, $this->extensions))\n+                    return True;\n+            }\n+        } catch (\\Exception $e) {\n+            return False;\n+        }\n+        \n+        return False;\n+\n+    }\n+\n+    /**\n+     * Get the validation error message.\n+     *\n+     * @return string\n+     */\n+    public function message()\n+    {\n+        return 'The ' . $this->attribute . ' must be a json with file of type: ' . implode(', ', $this->extensions) . ' encoded in base64.';\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "05d5ce26fdd8d9466009163444e944259bc0cc2a",
            "date": "2023-02-19T06:12:34Z",
            "author_login": "adampatterson"
          },
          {
            "sha": "393fe20010d4ddbc4eb49e739000f55d8d7e0b8b",
            "date": "2022-12-17T12:50:51Z",
            "author_login": "ashermiddleton"
          },
          {
            "sha": "57bdbd2897a98f11ff5030d01edde5f9b8806686",
            "date": "2022-12-17T12:49:49Z",
            "author_login": "daramayis"
          },
          {
            "sha": "7447cc24f93e85670f393cb36f0f4ea4619fce73",
            "date": "2022-11-21T13:05:59Z",
            "author_login": "daramayis"
          },
          {
            "sha": "889d22d92c9cca9234d079b354c0af75be84aab2",
            "date": "2022-11-03T13:59:16Z",
            "author_login": "DResthal"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-434",
    "description": "crater is vulnerable to Unrestricted Upload of File with Dangerous Type",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-12T14:15:07.690",
    "last_modified": "2024-11-21T06:36:51.837",
    "fix_date": "2021-12-29T12:33:20Z"
  },
  "references": [
    {
      "url": "https://github.com/crater-invoice/crater/commit/cdc913d16cf624aee852bc9163a7c6ffc8d1da9d",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d7453360-baca-4e56-985f-481275fa38db",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/crater-invoice/crater/commit/cdc913d16cf624aee852bc9163a7c6ffc8d1da9d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d7453360-baca-4e56-985f-481275fa38db",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.070121",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "crater",
    "owner": "crater-invoice",
    "created_at": "2019-11-20T07:09:02Z",
    "updated_at": "2025-01-14T02:28:29Z",
    "pushed_at": "2024-08-10T09:32:07Z",
    "size": 45705,
    "stars": 7906,
    "forks": 1585,
    "open_issues": 423,
    "watchers": 7906,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "PHP": 1612436,
      "Vue": 1358337,
      "JavaScript": 273611,
      "Blade": 119394,
      "Dockerfile": 5011,
      "Shell": 1507,
      "TypeScript": 328
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0.0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:11:09.725073"
  }
}