{
  "cve_id": "CVE-2021-41082",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "27bad28c530c89acab35a56b945b6a3924280f4b",
    "related_commits": [
      "27bad28c530c89acab35a56b945b6a3924280f4b",
      "ddb458343dc39a7a8c99467dcd809b444514fe2c",
      "27bad28c530c89acab35a56b945b6a3924280f4b",
      "ddb458343dc39a7a8c99467dcd809b444514fe2c"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/27bad28c530c89acab35a56b945b6a3924280f4b.patch",
    "fix_commit_details": {
      "sha": "27bad28c530c89acab35a56b945b6a3924280f4b",
      "commit_date": "2021-09-15T03:32:10Z",
      "author": {
        "login": "tgxworld",
        "type": "User",
        "stats": {
          "total_commits": 4679,
          "average_weekly_commits": 6.7518037518037515,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 404
        }
      },
      "commit_message": {
        "title": "Partially revert \"PERF: Improve query performance all inbox private messages. (#14304)\" (#14344)",
        "length": 322,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 70,
        "additions": 40,
        "deletions": 30
      },
      "files": [
        {
          "filename": "app/controllers/topics_controller.rb",
          "status": "modified",
          "additions": 4,
          "deletions": 8,
          "patch": "@@ -973,7 +973,7 @@ def private_message_reset_new\n \n     topic_ids = TopicsBulkAction.new(\n       current_user,\n-      topic_scope.distinct(false).pluck(:id),\n+      topic_scope.pluck(:id),\n       type: \"dismiss_topics\"\n     ).perform!\n \n@@ -1245,11 +1245,7 @@ def bulk_unread_topic_ids\n     if inbox = params[:private_message_inbox]\n       filter = private_message_filter(topic_query, inbox)\n       topic_query.options[:limit] = false\n-\n-      topic_query\n-        .filter_private_messages_unread(current_user, filter)\n-        .distinct(false)\n-        .pluck(:id)\n+      topics = topic_query.filter_private_messages_unread(current_user, filter)\n     else\n       topics = TopicQuery.unread_filter(topic_query.joined_topic_user, staff: guardian.is_staff?).listable_topics\n       topics = TopicQuery.tracked_filter(topics, current_user.id) if params[:tracked].to_s == \"true\"\n@@ -1268,9 +1264,9 @@ def bulk_unread_topic_ids\n       if params[:tag_name].present?\n         topics = topics.joins(:tags).where(\"tags.name\": params[:tag_name])\n       end\n-\n-      topics.pluck(:id)\n     end\n+\n+    topics.pluck(:id)\n   end\n \n   def private_message_filter(topic_query, inbox)"
        },
        {
          "filename": "lib/topic_query/private_message_lists.rb",
          "status": "modified",
          "additions": 36,
          "deletions": 22,
          "patch": "@@ -145,18 +145,25 @@ def private_messages_for(user, type)\n       elsif type == :all\n         group_ids = group_with_messages_ids(user)\n \n-        result = result.joins(<<~SQL)\n-        LEFT JOIN topic_allowed_users tau\n-          ON tau.topic_id = topics.id\n-          AND tau.user_id = #{user.id.to_i}\n-        LEFT JOIN topic_allowed_groups tag\n-          ON tag.topic_id = topics.id\n-          #{group_ids.present? ? \"AND tag.group_id IN (#{group_ids.join(\",\")})\" : \"\"}\n-        SQL\n-\n-        result = result\n-          .where(\"tag.topic_id IS NOT NULL OR tau.topic_id IS NOT NULL\")\n-          .distinct\n+        result =\n+        if group_ids.present?\n+          result.where(<<~SQL)\n+            topics.id IN (\n+              SELECT topic_id\n+              FROM topic_allowed_users\n+              WHERE user_id = #{user.id.to_i}\n+              UNION ALL\n+              SELECT topic_id FROM topic_allowed_groups\n+              WHERE group_id IN (#{group_ids.join(\",\")})\n+            )\n+          SQL\n+        else\n+          result.joins(<<~SQL)\n+          INNER JOIN topic_allowed_users tau\n+            ON tau.topic_id = topics.id\n+            AND tau.user_id = #{user.id.to_i}\n+          SQL\n+        end\n       end\n \n       result = result.joins(\"LEFT OUTER JOIN topic_users AS tu ON (topics.id = tu.topic_id AND tu.user_id = #{user.id.to_i})\")\n@@ -238,23 +245,30 @@ def filter_archived(list, user, archived: true)\n       # query here as it can easily lead to an inefficient query.\n       group_ids = group_with_messages_ids(user)\n \n-      list = list.joins(<<~SQL)\n-      LEFT JOIN group_archived_messages gm\n-        ON gm.topic_id = topics.id\n-        #{group_ids.present? ? \"AND gm.group_id IN (#{group_ids.join(\",\")})\" : \"\"}\n-      LEFT JOIN user_archived_messages um\n-        ON um.user_id = #{user.id.to_i}\n-        AND um.topic_id = topics.id\n-      SQL\n+      if group_ids.present?\n+        list = list.joins(<<~SQL)\n+          LEFT JOIN group_archived_messages gm\n+            ON gm.topic_id = topics.id\n+            AND gm.group_id IN (#{group_ids.join(\",\")})\n+          LEFT JOIN user_archived_messages um\n+            ON um.user_id = #{user.id.to_i}\n+            AND um.topic_id = topics.id\n+        SQL\n \n-      list =\n         if archived\n           list.where(\"um.user_id IS NOT NULL OR gm.topic_id IS NOT NULL\")\n         else\n           list.where(\"um.user_id IS NULL AND gm.topic_id IS NULL\")\n         end\n+      else\n+        list = list.joins(<<~SQL)\n+          LEFT JOIN user_archived_messages um\n+          ON um.user_id = #{user.id.to_i}\n+          AND um.topic_id = topics.id\n+        SQL\n \n-      list\n+        list.where(\"um.user_id IS #{archived ? \"NOT NULL\" : \"NULL\"}\")\n+      end\n     end\n \n     def not_archived(list, user)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "496a739788d58a7f1c6bd59643d062ae37e982a0",
            "date": "2025-01-14T15:19:49Z",
            "author_login": "discourse-translator-bot"
          },
          {
            "sha": "a89086f7996f95024827df61fb0d86a516b269f6",
            "date": "2025-01-14T15:19:19Z",
            "author_login": "markvanlan"
          },
          {
            "sha": "473e37e7b3dcb254548a04695fb5e5f56a6de33b",
            "date": "2025-01-14T14:32:50Z",
            "author_login": "CvX"
          },
          {
            "sha": "eb64db828e116edbacdf10266f8102ed7028a2f2",
            "date": "2025-01-14T13:28:46Z",
            "author_login": "renato"
          },
          {
            "sha": "7330cfa76a6e6ab7bf90702fb1db5e1a37a2eca1",
            "date": "2025-01-14T13:28:16Z",
            "author_login": "awesomerobot"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Discourse is a platform for community discussion. In affected versions any private message that includes a group had its title and participating user exposed to users that do not have access to the private messages. However, access control for the private messages was not compromised as users were not able to view the posts in the leaked private message despite seeing it in their inbox. The problematic commit was reverted around 32 minutes after it was made. Users are encouraged to upgrade to the latest commit if they are running Discourse against the `tests-passed` branch.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-20T21:15:07.523",
    "last_modified": "2024-11-21T06:25:24.973",
    "fix_date": "2021-09-15T03:32:10Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/27bad28c530c89acab35a56b945b6a3924280f4b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/ddb458343dc39a7a8c99467dcd809b444514fe2c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-vm3x-w6jm-j9vv",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/27bad28c530c89acab35a56b945b6a3924280f4b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/ddb458343dc39a7a8c99467dcd809b444514fe2c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-vm3x-w6jm-j9vv",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.780750",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}