{
  "cve_id": "CVE-2021-41083",
  "github_data": {
    "repository": "justingit/dada-mail",
    "fix_commit": "d4d3d86d08c816b4da75a5ef45abc12188772459",
    "related_commits": [
      "d4d3d86d08c816b4da75a5ef45abc12188772459",
      "d4d3d86d08c816b4da75a5ef45abc12188772459"
    ],
    "patch_url": "https://github.com/justingit/dada-mail/commit/d4d3d86d08c816b4da75a5ef45abc12188772459.patch",
    "fix_commit_details": {
      "sha": "d4d3d86d08c816b4da75a5ef45abc12188772459",
      "commit_date": "2021-09-20T00:02:02Z",
      "author": {
        "login": "justingit",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "This adds CSRF protection to the profiles.",
        "length": 42,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 182,
        "additions": 138,
        "deletions": 44
      },
      "files": [
        {
          "filename": "dada/DADA/App.pm",
          "status": "modified",
          "additions": 47,
          "deletions": 24,
          "patch": "@@ -15086,14 +15086,11 @@ sub profile_login {\n         }\n     }\n \n-    if (   $DADA::Config::PROFILE_OPTIONS->{enabled} != 1) {\n+    if ( $DADA::Config::PROFILE_OPTIONS->{enabled} != 1) {\n         return $self->default();\n \n     }\n-\n-    if ( $DADA::Config::PROFILE_OPTIONS->{enabled} != 1 ) {\n-        return $self->default();\n-    }\n+\t\n     require DADA::Profile;\n     ###\n     my $all_errors = [];\n@@ -15109,7 +15106,6 @@ sub profile_login {\n     my $prof_sess = DADA::Profile::Session->new;\n \n     if ( $q->param('process') != 1 ) {\n-\n         if (   $prof_sess->is_logged_in( { -cgi_obj => $q } )\n             && $q->param('logged_out') != 1 )\n         {\n@@ -15118,13 +15114,20 @@ sub profile_login {\n                 -url => $DADA::Config::PROGRAM_URL . '/profile/' );\n         }\n         else {\n-            my $scrn              = '';\n+\t\t\tmy $scrn              = '';\n             my $using_captcha     = 0;\n \n             if ( $DADA::Config::PROFILE_OPTIONS->{enable_captcha} == 1 ) {\n                 $using_captcha = can_use_Google_reCAPTCHA();\n             }\n \n+\t\t\tmy $auth_state;\n+\t\t    if ( $DADA::Config::DISABLE_OUTSIDE_LOGINS == 1 ) {\n+\t\t        require DADA::Security::SimpleAuthStringState;\n+\t\t        my $sast = DADA::Security::SimpleAuthStringState->new;\n+\t\t        $auth_state = $sast->make_state;\n+\t\t    }\n+\n             $scrn = DADA::Template::Widgets::wrap_screen(\n                 {\n                     -screen => 'profile_login.tmpl',\n@@ -15167,6 +15170,9 @@ sub profile_login {\n                         removal         => scalar $q->param('removal') || '',\n                         WHOLE_URL       => $whole_url,\n \t\t\t\t\t\t\n+\t\t                auth_state      => $auth_state,\n+\t\t\t\t\t\t\n+\t\t\t\t\t\t\n \t\t\t\t\t\t# This should probably be deprecated, as I'm handling this in \n \t\t\t\t\t\t# DADA::Template::Widgets, now\n                         %{ DADA::Profile::feature_enabled() }\n@@ -15180,19 +15186,20 @@ sub profile_login {\n     else {\n         my ( $status, $errors ) = $prof_sess->validate_profile_login(\n             {\n-                -email    => xss_filter( scalar $q->param('login_email') ),\n-                -password => xss_filter( scalar $q->param('login_password') ),\n+                -email      => xss_filter( scalar $q->param('login_email') ),\n+                -password   => xss_filter( scalar $q->param('login_password') ),\n+\t\t\t\t-auth_state => xss_filter( scalar $q->param('auth_state') ),\n \n             },\n         );\n \n         if ( $status == 1 ) {\n             my $cookie = $prof_sess->login(\n                 {\n-                    -email => xss_filter( scalar $q->param('login_email') ),\n-                    -password =>\n-                      xss_filter( scalar $q->param('login_password') ),\n-                },\n+                    -email           => xss_filter( scalar $q->param('login_email') ),\n+                    -password        => xss_filter( scalar $q->param('login_password') ),\t\t\t\t\t\n+                \t-skip_validation => 1, \n+\t\t\t\t},\n             );\n \n             #DEV: encoding?\n@@ -15397,18 +15404,31 @@ sub profile {\n     if (   $DADA::Config::PROFILE_OPTIONS->{enabled} != 1) {\n         return $self->default();\n     }\n+\t\n+\t\n+\t\n \n     require DADA::Profile::Session;\n     my $prof_sess = DADA::Profile::Session->new;\n \n-    if ( $prof_sess->is_logged_in( { -cgi_obj => $q } ) ) {\n-        my $email = $prof_sess->get( { -cgi_obj => $q } );\n+    if ($prof_sess->is_logged_in( { -cgi_obj => $q } ) ) {\n+\t\t\n+\t\tif(length($q->param('process')) > 0) { \n+\t\t\n+\t\t\tif($prof_sess->check_csrf($q) == 0){\n+\t\t\t\t$prof_sess->logout;\n+\t\t\t\t$q->param('flavor', 'profile_login');\n+\t\t\t\treturn $self->profile_login();\n+\t\t\t}\n+\t\t}\n+\t\t\n+        my $prof_data = $prof_sess->get( { -cgi_obj => $q } );\n \n         require DADA::Profile::Fields;\n         require DADA::Profile;\n \n-        my $prof = DADA::Profile->new( { -email => $email } );\n-        my $dpf = DADA::Profile::Fields->new( { -email => $email } );\n+        my $prof = DADA::Profile->new( { -email => $prof_data->{email} } );\n+        my $dpf = DADA::Profile::Fields->new( { -email => $prof_data->{email} } );\n         my $subscriber_fields =\n           $dpf->{manager}->fields( { -show_hidden_fields => 0, } );\n         my $field_attr   = $dpf->{manager}->get_all_field_attributes;\n@@ -15614,7 +15634,7 @@ sub profile {\n             my $dps = DADA::Profile::Settings->new({-list => $list});\n             my $r   = $dps->save(\n                 {\n-                    -email   => $email,\n+                    -email   => $prof_data->{email},\n                     -setting => 'delivery_prefs',\n                     -value   => $delivery_prefs,\n                 }\n@@ -15682,7 +15702,7 @@ sub profile {\n                 my $dasu = DADA::App::Subscriptions::Unsub->new(\n                     { -list => $i->{list} } );\n                 my $unsub_link = $dasu->unsub_link(\n-                    { -email => $email, -mid => '00000000000000' } );\n+                    { -email => $prof_data->{email}, -mid => '00000000000000' } );\n \n                 my $digest_timeframe =\n                   formatted_runtime( $ls->param('digest_schedule') );\n@@ -15695,7 +15715,7 @@ sub profile {\n \t\t\t\t);\n                 my $s   = $dps->fetch(\n                     {\n-                        -email => $email,\n+                        -email => $prof_data->{email},\n                     }\n                 );\n                 my $delivery_prefs = $s->{delivery_prefs} || 'individual';\n@@ -15722,7 +15742,8 @@ sub profile {\n                     -vars   => {\n                         errors => scalar $q->param('errors')\n                           || 0,\n-                        'profile.email'   => $email,\n+                        'profile.email'   => $prof_data->{email},\n+\t\t\t\t\t\tcsrf_token        => $prof_data->{token},\n                         subscriber_fields => $fields,\n                         subscriptions     => $filled,\n                         has_subscriptions => $has_subscriptions,\n@@ -15749,7 +15770,7 @@ sub profile {\n                           $DADA::Config::PROFILE_OPTIONS->{gravatar_options}\n                           ->{enable_gravators},\n                         gravatar_img_url =>\n-                          gravatar_img_url( { -email => $email, } ),\n+                          gravatar_img_url( { -email => $prof_data->{email}, } ),\n                         protected_directories => $protected_directories,\n                         WHOLE_URL             => $whole_url,\n                         %{ DADA::Profile::feature_enabled() },\n@@ -16014,8 +16035,10 @@ sub profile_update_email {\n             my $prof_sess = DADA::Profile::Session->new;\n             my $cookie    = $prof_sess->login(\n                 {\n-                    -email   => $profile_info->{'profile.update_email'},\n-                    -no_pass => 1,\n+                    -email           => $profile_info->{'profile.update_email'},\n+                    -no_pass         => 1,\n+                \t-skip_validation => 1, \n+\t\t\t\t\t\n                 }\n             );\n "
        },
        {
          "filename": "dada/DADA/Profile/Session.pm",
          "status": "modified",
          "additions": 65,
          "deletions": 10,
          "patch": "@@ -90,13 +90,20 @@ sub _login_cookie {\n \n     require CGI::Session;\n \n+\tuse DADA::Security::Password; \n+\n+\tmy $token = DADA::Security::Password::generate_rand_string(undef, 41); \n+\n     my $session = new CGI::Session( $self->{dsn}, $q, $self->{dsn_args} );\n \n-    $session->param( 'email',      cased($args->{ -email }) );\n-    $session->param( '_logged_in', 1 );\n+       $session->param( 'email',      cased($args->{ -email }) );\n+       $session->param( '_logged_in', 1 );\n+       $session->param( 'token',      $token);\n+\t\n \n-    $session->expire( $DADA::Config::COOKIE_PARAMS{ -expires } );\n-    $session->expire( '_logged_in', $DADA::Config::COOKIE_PARAMS{ -expires } );\n+\t    $session->expire( $DADA::Config::COOKIE_PARAMS{ -expires } );\n+\t    $session->expire( '_logged_in', $DADA::Config::COOKIE_PARAMS{ -expires } );\n+\t    $session->expire( 'token', $DADA::Config::COOKIE_PARAMS{ -expires } );\n \n     $cookie = $q->cookie( \n \t\t%{$DADA::Config::PROFILE_OPTIONS->{cookie_params}},\n@@ -106,10 +113,6 @@ sub _login_cookie {\n \t\t) : ()\n \t\t\n \t\t);\n-\n-    # My proposal to address the situation is quit relying on flush() happen\n-    # automatically, and recommend that people use an explicit flush()\n-    # instead, which works reliably for everyone.\n     $session->flush();\n \n     return $cookie;\n@@ -124,7 +127,16 @@ sub login {\n \trequire CGI; \n \tmy $q = new CGI; \n \n-    my ( $status, $errors ) = $self->validate_profile_login($args);\n+\tmy ($status, $errors);\n+\t\n+\tif($args->{-skip_validation} == 0){ \n+\t    ( $status, $errors ) = $self->validate_profile_login($args);\n+\t}\n+\telse { \n+\t\t$status = 1; \n+\t\t$errors = {};\n+\t}\n+\t\n     if ( $status == 0 ) {\n         croak \"login failed.\";\n     }\n@@ -182,6 +194,20 @@ sub validate_profile_login {\n         incorrect_pass => 0,\n     };\n \n+\n+    require DADA::Security::SimpleAuthStringState;\n+    my $sast       = DADA::Security::SimpleAuthStringState->new;\n+    my $auth_state = $args->{-auth_state};\n+\n+    if ( $DADA::Config::DISABLE_OUTSIDE_LOGINS == 1 ) {\n+        if ( $sast->check_state($auth_state) != 1 ) {\n+\t        $status = 0;\n+\t        $errors->{invalid_form} = 1;\n+        }\n+\n+    }\n+\n+\n     require DADA::Profile;\n     my $prof = DADA::Profile->new(\n \t\t{ \n@@ -217,6 +243,30 @@ sub validate_profile_login {\n \n }\n \n+sub check_csrf { \n+\tmy $self = shift; \n+\tmy $q    = shift; \n+\t\n+    my $s = CGI::Session->load( $self->{dsn}, $q, $self->{dsn_args} )\n+      or croak 'failed to load session: ' . CGI::Session->errstr();\n+\t\n+      if ( $s->is_expired ) {\n+          return 0;\n+      }\n+\n+      if ( $s->is_empty ) {\n+          return 0;\n+      }\n+\t\n+\t  if($q->param('csrf_token') eq $s->param('token') ){ \n+\t\t  return 1; \n+\t  }\n+\t  else { \n+\t\t  return 0; \n+\t  }\n+\t\n+\n+}\n sub is_logged_in {\n \n     my $self = shift;\n@@ -230,6 +280,8 @@ sub is_logged_in {\n         $q = new CGI;\n \n     }\n+\t\n+\t\n     my $s = CGI::Session->load( $self->{dsn}, $q, $self->{dsn_args} )\n       or croak 'failed to load session: ' . CGI::Session->errstr();\n \n@@ -272,7 +324,10 @@ sub get {\n     require CGI::Session;\n \n     my $session = new CGI::Session( $self->{dsn}, $q, $self->{dsn_args} );\n-    return $session->param('email');\n+    return {\n+\t\temail => $session->param('email'), \n+\t\ttoken => $session->param('token'),\n+\t}; \n \n }\n "
        },
        {
          "filename": "dada/DADA/Template/Widgets.pm",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -1250,7 +1250,7 @@ sub profile_widget {\n \t\n \t\n     my $scr              = '';\n-    my $email            = '';\n+    my $prof_data        = {};\n     my $is_logged_in     = 0;\n     my $profiles_enabled = $DADA::Config::PROFILE_OPTIONS->{enabled};\n     if (   $DADA::Config::PROFILE_OPTIONS->{enabled} != 1)\n@@ -1261,7 +1261,7 @@ sub profile_widget {\n \t\tif(defined($prof_sess_obj)){ \n \t\t\tif ( $prof_sess_obj->is_logged_in( { -cgi_obj => $q } ) ) {\n                 $is_logged_in = 1;\n-                $email = $prof_sess_obj->get( { -cgi_obj => $q } );\n+                $prof_data = $prof_sess_obj->get( { -cgi_obj => $q } );\n \t\t\t}\n \t\t}\n \t\telse {\n@@ -1273,7 +1273,7 @@ sub profile_widget {\n \t            my $prof_sess = DADA::Profile::Session->new;\n \t            if ( $prof_sess->is_logged_in( { -cgi_obj => $q } ) ) {\n \t                $is_logged_in = 1;\n-\t                $email = $prof_sess->get( { -cgi_obj => $q } );\n+\t\t\t\t\t$prof_data = $prof_sess->get( { -cgi_obj => $q } );\n \t            }\n \t        }\n \t\t}\n@@ -1285,11 +1285,11 @@ sub profile_widget {\n             -vars   => {\n                 profiles_enabled  => $profiles_enabled,\n                 is_logged_in      => $is_logged_in,\n-                'profile.email'   => $email,\n+                'profile.email'   => $prof_data->{email},\n                 gravators_enabled => $DADA::Config::PROFILE_OPTIONS->{gravatar_options}->{enable_gravators},\n                 gravatar_img_url => gravatar_img_url(\n                     {\n-                        -email                => $email,\n+                        -email                => $prof_data->{email},\n                         -size => 45,\n                     }\n                 ),"
        },
        {
          "filename": "dada/templates/profile_home.tmpl",
          "status": "modified",
          "additions": 12,
          "deletions": 5,
          "patch": "@@ -254,10 +254,11 @@\n         <legend>Delivery Preferences:</legend>\n         <form action=\"<!-- tmpl_var S_PROGRAM_URL -->\" method=\"post\"> \n \n-            <input type=\"hidden\" name=\"flavor\"        value=\"profile\" > \n-            <input type=\"hidden\" name=\"process\"  value=\"profile_delivery_preferences\" > \n-            <input type=\"hidden\" name=\"list\"     value=\"<!-- tmpl_var list_settings.list -->\" > \n-\n+            <input type=\"hidden\" name=\"flavor\"     value=\"profile\" > \n+            <input type=\"hidden\" name=\"process\"    value=\"profile_delivery_preferences\" > \n+            <input type=\"hidden\" name=\"list\"       value=\"<!-- tmpl_var list_settings.list -->\" > \n+\t\t\t<input type=\"hidden\" name=\"csrf_token\" value=\"<!-- tmpl_var csrf_token -->\">\n+\t\t\t\n \t\t\t<div class=\"row\">\n \t\t\t\t<div class=\"small-10 medium-5 large-4 columns\">\t \n \t\t\t\t\t\n@@ -346,8 +347,10 @@\n \t\t\t\t\t\t\t<div class=\"content-box section-box\">\n \n \t\t\t\t                <form action=\"<!-- tmpl_var PROGRAM_URL -->\" method=\"post\" accept-charset=\"<!-- tmpl_var HTML_CHARSET -->\" id=\"membership_profile_fields\"> \n-\t\t\t\t                    <input type=\"hidden\" name=\"flavor\"        value=\"profile\" > \n+\t\t\t\t                    <input type=\"hidden\" name=\"flavor\"   value=\"profile\" > \n \t\t\t\t                    <input type=\"hidden\" name=\"process\"  value=\"edit_subscriber_fields\" > \n+\t\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"csrf_token\" value=\"<!-- tmpl_var csrf_token -->\">\n+\t\t\t\t\t\t\t\t\t\n \t\t\t\t                    <!-- tmpl_loop subscriber_fields --> \n \n \t\t\t\t\t\t\t\t\t\t<div class=\"row\">\n@@ -425,6 +428,8 @@\n \t\t\t\t            <form action=\"<!-- tmpl_var PROGRAM_URL -->\" method=\"post\" accept-charset=\"<!-- tmpl_var HTML_CHARSET -->\"> \n \t\t\t\t                <input type=\"hidden\" name=\"flavor\"        value=\"profile\" > \n \t\t\t\t                <input type=\"hidden\" name=\"process\"  value=\"update_email\" >\n+\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"csrf_token\" value=\"<!-- tmpl_var csrf_token -->\">\n+\t\t\t\t\t\t\t\t\n \t\t\t                    <!-- tmpl_if errors_update_email --> \n \t\t\t                        <!-- tmpl_if error_invalid_email --> \n \t\t\t                            <p class=\"error\"> \n@@ -471,6 +476,7 @@\n \t\t\t\t\t\t\t<form action=\"<!-- tmpl_var PROGRAM_URL -->\" method=\"post\" accept-charset=\"<!-- tmpl_var HTML_CHARSET -->\"> \n \t\t\t\t                <input type=\"hidden\" name=\"flavor\"        value=\"profile\" > \n \t\t\t\t                <input type=\"hidden\" name=\"process\"  value=\"change_password\" >\n+\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"csrf_token\" value=\"<!-- tmpl_var csrf_token -->\">\n \n \t\t\t\t                <!-- tmpl_if errors_change_password --> \n \t\t\t\t                        <p class=\"error\">\n@@ -513,6 +519,7 @@\n \t\t\t\t            <form action=\"<!-- tmpl_var PROGRAM_URL -->\" method=\"post\" accept-charset=\"<!-- tmpl_var HTML_CHARSET -->\"> \n \t\t\t\t                <input type=\"hidden\" name=\"flavor\"        value=\"profile\" > \n \t\t\t\t                <input type=\"hidden\" name=\"process\"  value=\"delete_profile\" >\n+\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"csrf_token\" value=\"<!-- tmpl_var csrf_token -->\">\n         \n \t\t\t\t\t\t\t\t<div class=\"alert-box info radius\">\n \t\t\t\t\t\t\t        Deleting your profile will remove all your profile information, but "
        },
        {
          "filename": "dada/templates/profile_login.tmpl",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -194,6 +194,15 @@\n \t\t\t\t\t\t<input type=\"hidden\" name=\"flavor\" value=\"profile_login\" > \n \t\t\t\t\t\t<input type=\"hidden\" name=\"process\" value=\"1\" > \n \t\t\t\t\t\t\n+\t\t\t\t\t\t<!-- tmpl_if DISABLE_OUTSIDE_LOGINS --> \n+\t\t\t\t\t\t\t<input \n+\t\t\t\t\t\t\t\ttype=\"hidden\" \n+\t\t\t\t\t\t\t\tname=\"auth_state\" \n+\t\t\t\t\t\t\t\tvalue=\"<!-- tmpl_var auth_state -->\"\n+\t\t\t\t\t\t\t> \n+\t\t\t\t\t\t<!--/tmpl_if--> \n+\t\t\t\t\t\t\n+\t\t\t\t\t\t\n \t\t\t\t\t\t<div class=\"row\">\n \t\t\t\t\t\t\t<div class=\"small-12 columns\">\n \t\t\t\t\t\t\t\t<label for=\"login_email\">"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a4e7e65506245ff8620470e61e4e474ab01c5886",
            "date": "2023-11-06T17:24:22Z",
            "author_login": "justingit"
          },
          {
            "sha": "2818ac480be455acc5d7909024c4f80969159582",
            "date": "2023-09-16T20:17:26Z",
            "author_login": "justingit"
          },
          {
            "sha": "dada733eb01dae1ddf89cba755e71c1f9708014f",
            "date": "2023-09-16T20:12:49Z",
            "author_login": "justingit"
          },
          {
            "sha": "a206b61c63cfda86c678d3e60a8ab5f926e750ab",
            "date": "2023-09-16T19:39:36Z",
            "author_login": "justingit"
          },
          {
            "sha": "e433ed464dcb18693fde154ac1eadf7479d4022b",
            "date": "2023-09-16T19:19:18Z",
            "author_login": "justingit"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-352",
    "description": "Dada Mail is a web-based e-mail list management system. In affected versions a bad actor could give someone a carefully crafted web page via email, SMS, etc, that - when visited, allows them control of the list control panel as if the bad actor was logged in themselves. This includes changing any mailing list password, as well as the Dada Mail Root Password - which could effectively shut out actual list owners of the mailing list and allow the bad actor complete and unfettered control of your mailing list. This vulnerability also affects profile logins. For this vulnerability to work, the target of the bad actor would need to be logged into the list control panel themselves. This CSRF vulnerability in Dada Mail affects all versions of Dada Mail v11.15.1 and below. Although we know of no known CSRF exploits that have happened in the wild, this vulnerability has been confirmed by our testing, and by a third party. Users are advised to update to version 11.16.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-20T22:15:07.617",
    "last_modified": "2024-11-21T06:25:25.153",
    "fix_date": "2021-09-20T00:02:02Z"
  },
  "references": [
    {
      "url": "https://github.com/justingit/dada-mail/commit/d4d3d86d08c816b4da75a5ef45abc12188772459",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/justingit/dada-mail/security/advisories/GHSA-344m-p829-2r38",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/justingit/dada-mail/commit/d4d3d86d08c816b4da75a5ef45abc12188772459",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/justingit/dada-mail/security/advisories/GHSA-344m-p829-2r38",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.781060",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "dada-mail",
    "owner": "justingit",
    "created_at": "2008-12-11T05:39:19Z",
    "updated_at": "2025-01-10T10:03:52Z",
    "pushed_at": "2024-03-17T20:23:59Z",
    "size": 33582,
    "stars": 174,
    "forks": 41,
    "open_issues": 161,
    "watchers": 174,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Perl": 4077459,
      "JavaScript": 190132,
      "HTML": 52969,
      "PHP": 5163,
      "CSS": 3488,
      "Rich Text Format": 2906
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T16:01:08.689494"
  }
}