{
  "cve_id": "CVE-2021-41088",
  "github_data": {
    "repository": "elves/elvish",
    "fix_commit": "ccc2750037bbbfafe9c1b7a78eadd3bd16e81fe5",
    "related_commits": [
      "ccc2750037bbbfafe9c1b7a78eadd3bd16e81fe5",
      "ccc2750037bbbfafe9c1b7a78eadd3bd16e81fe5"
    ],
    "patch_url": "https://github.com/elves/elvish/commit/ccc2750037bbbfafe9c1b7a78eadd3bd16e81fe5.patch",
    "fix_commit_details": {
      "sha": "ccc2750037bbbfafe9c1b7a78eadd3bd16e81fe5",
      "commit_date": "2021-09-21T22:45:09Z",
      "author": {
        "login": "xiaq",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Remove the experimental web UI.",
        "length": 180,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 457,
        "additions": 0,
        "deletions": 457
      },
      "files": [
        {
          "filename": "cmd/withweb/elvish/main.go",
          "status": "removed",
          "additions": 0,
          "deletions": 22,
          "patch": "@@ -1,22 +0,0 @@\n-// Command elvish is an alternative main program of Elvish that includes the web\n-// subprogram.\n-package main\n-\n-import (\n-\t\"os\"\n-\n-\t\"src.elv.sh/pkg/buildinfo\"\n-\t\"src.elv.sh/pkg/daemon\"\n-\t\"src.elv.sh/pkg/daemon/client\"\n-\t\"src.elv.sh/pkg/prog\"\n-\t\"src.elv.sh/pkg/shell\"\n-\t\"src.elv.sh/pkg/web\"\n-)\n-\n-func main() {\n-\tos.Exit(prog.Run(\n-\t\t[3]*os.File{os.Stdin, os.Stdout, os.Stderr}, os.Args,\n-\t\tprog.Composite(\n-\t\t\tbuildinfo.Program, daemon.Program, web.Program,\n-\t\t\tshell.Program{ActivateDaemon: client.Activate})))\n-}"
        },
        {
          "filename": "pkg/web/main.html.go",
          "status": "removed",
          "additions": 0,
          "deletions": 233,
          "patch": "@@ -1,233 +0,0 @@\n-package web\n-\n-const mainPageHTML = `<html>\n-\n-  <body class=\"light\">\n-    <div id=\"content\">\n-      <div id=\"scrollback\">\n-        <div id=\"progress\"></div>\n-      </div>\n-\n-      <div id=\"cmd\" class=\"cmd\">\n-        <span id=\"prompt\" class=\"prompt\">&gt;&gt;</span>\n-        <textarea id=\"buffer\" class=\"buffer\" rows=\"1\"></textarea>\n-      </div>\n-\n-      <div id=\"theme-switchers\" class=\"flex\">\n-        <span class=\"theme-switcher\" id=\"dark-theme\">dark</span>\n-        <span class=\"theme-switcher\" id=\"light-theme\">light</span>\n-      </div>\n-\n-    </div>\n-  </body>\n-\n-  <style>\n-    /* Colors are taken from Material palette. */\n-\n-    /* Global styles */\n-\n-    * {\n-      margin: 0;\n-      padding: 0;\n-      font: 12pt monospace;\n-    }\n-\n-    #content {\n-      margin: 20px;\n-      padding: 20px;\n-    }\n-\n-    /* Scrollback */\n-\n-    .exception {\n-      font-weight: bold;\n-    }\n-\n-    .server-error {\n-      font-style: italic;\n-    }\n-\n-    /* Command line */\n-\n-    .cmd {\n-      display: flex;\n-      width: 100%;\n-    }\n-\n-    .cmd > .prompt {\n-      display: inline-block;\n-      margin-right: 1em;\n-    }\n-\n-    .cmd > .buffer {\n-      flex: 1;\n-    }\n-\n-    /* Theme switcher */\n-\n-    #theme-switchers {\n-      display: flex;\n-      margin-top: 0.4em;\n-    }\n-\n-    .theme-switcher {\n-      cursor: pointer;\n-      padding: 0 1em;\n-      border: 1px solid;\n-    }\n-\n-    #light-theme {\n-      color: black;\n-      background-color: white;\n-      border-color: black;\n-    }\n-\n-    #dark-theme {\n-      color: white;\n-      background-color: black;\n-      border-color: white;\n-    }\n-\n-    /* Color schemes. Color values from Material palette. */\n-\n-    body.light {\n-      background: #EEEEEE; /* grey 200 */\n-    }\n-\n-    .light * {\n-      color: black;\n-      background: white;\n-    }\n-\n-    .light #content {\n-      background: white;\n-    }\n-\n-    .light .cmd > .prompt {\n-      color: #1565C0; /* blue 800 */\n-    }\n-\n-    .light .cmd > #prompt {\n-      color: #2E7D32; /* green 800 */\n-    }\n-\n-    .light .error {\n-      color: #C62828; /* red 800 */\n-    }\n-\n-\n-    .dark * {\n-      color: white;\n-      background: black;\n-    }\n-\n-    body.dark {\n-      background: #212121; /* grey 900 */\n-    }\n-\n-    .dark #content {\n-      background: black;\n-    }\n-\n-    .dark .cmd > .prompt {\n-      color: #90CAF9; /* blue 200 */\n-    }\n-\n-    .dark .cmd > #prompt {\n-      color: #A5D6A7; /* green 200 */\n-    }\n-\n-    .dark .error {\n-      color: #EF9A9A; /* red 200 */\n-    }\n-\n-  </style>\n-\n-  <script>\n-    // TODO(xiaq): Stream results.\n-    var $prompt = document.getElementById('prompt'),\n-        $buffer = document.getElementById('buffer'),\n-        $scrollback = document.getElementById('scrollback'),\n-        $progress = document.getElementById('progress');\n-\n-    /* Theme switchers. */\n-    document.getElementById('dark-theme').onclick = function() {\n-      document.body.className = 'dark';\n-    };\n-\n-    document.getElementById('light-theme').onclick = function() {\n-      document.body.className = 'light';\n-    };\n-\n-    $buffer.addEventListener('keypress', function(e) {\n-      if (e.keyCode == 13 &&\n-          !e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey) {\n-        e.preventDefault();\n-        execute();\n-      }\n-    });\n-\n-    function execute() {\n-      var code = $buffer.value;\n-      addToScrollbackInner(freezeCmd());\n-      $buffer.value = '';\n-      $progress.innerText = 'executing...';\n-\n-      var req = new XMLHttpRequest();\n-      req.onloadend = function() {\n-        $progress.innerText = '';\n-      };\n-      req.onload = function() {\n-        var res = JSON.parse(req.responseText);\n-        addToScrollback('output', res.OutBytes);\n-        if (res.OutValues) {\n-          for (var v of res.OutValues) {\n-            addToScrollback('output-value', v);\n-          }\n-        }\n-        addToScrollback('error', res.ErrBytes);\n-        addToScrollback('error exception', res.Err);\n-      };\n-      req.onerror = function() {\n-        addToScrollback('error server-error', req.responseText\n-          || req.statusText\n-          || (req.status == req.UNSENT && \"lost connection\")\n-          || \"unknown error\");\n-      };\n-      req.open('POST', '/execute');\n-      req.send(code);\n-    }\n-\n-    function addToScrollback(className, innerText) {\n-      var div = document.createElement('div');\n-      div.className = className;\n-      div.innerText = innerText;\n-\n-      addToScrollbackInner(div);\n-    }\n-\n-    function addToScrollbackInner(element) {\n-      $scrollback.insertBefore(element, $progress);\n-      window.scrollTo(0, document.body.scrollHeight);\n-    }\n-\n-    function freezeCmd() {\n-      var cmd = document.createElement('div'),\n-          prompt = document.createElement('span'),\n-          buffer = document.createElement('span');\n-      cmd.className = 'cmd';\n-      prompt.className = 'prompt';\n-      prompt.innerText = $prompt.innerText;\n-      buffer.className = 'buffer';\n-      buffer.innerText = $buffer.value;\n-      cmd.appendChild(prompt);\n-      cmd.appendChild(buffer);\n-      return cmd;\n-    }\n-\n-  </script>\n-\n-</html>\n-`\n-\n-// vim: se ft=html si et sw=2 ts=2 sts=2:"
        },
        {
          "filename": "pkg/web/web.go",
          "status": "removed",
          "additions": 0,
          "deletions": 183,
          "patch": "@@ -1,183 +0,0 @@\n-// Package web is the entry point for the backend of the web interface of\n-// Elvish.\n-package web\n-\n-import (\n-\t\"encoding/json\"\n-\t\"fmt\"\n-\t\"io\"\n-\t\"log\"\n-\t\"net/http\"\n-\t\"os\"\n-\n-\t\"src.elv.sh/pkg/eval\"\n-\t\"src.elv.sh/pkg/parse\"\n-\t\"src.elv.sh/pkg/prog\"\n-\t\"src.elv.sh/pkg/shell\"\n-)\n-\n-// Program is the web subprogram.\n-var Program prog.Program = program{}\n-\n-type program struct{}\n-\n-func (program) Run(fds [3]*os.File, f *prog.Flags, args []string) error {\n-\tif !f.Web {\n-\t\treturn prog.ErrNotSuitable\n-\t}\n-\tif len(args) > 0 {\n-\t\treturn prog.BadUsage(\"arguments are not allowed with -web\")\n-\t}\n-\tif f.CodeInArg {\n-\t\treturn prog.BadUsage(\"-c cannot be used together with -web\")\n-\t}\n-\tp := Web{Port: f.Port}\n-\treturn p.Main(fds, nil)\n-}\n-\n-type Web struct {\n-\tPort int\n-}\n-\n-type httpHandler struct {\n-\tev *eval.Evaler\n-}\n-\n-type ExecuteResponse struct {\n-\tOutBytes  string\n-\tOutValues []interface{}\n-\tErrBytes  string\n-\tErr       string\n-}\n-\n-func (web *Web) Main(fds [3]*os.File, _ []string) error {\n-\trestore := shell.IncSHLVL()\n-\tdefer restore()\n-\tev := shell.MakeEvaler(fds[2])\n-\n-\th := httpHandler{ev}\n-\n-\thttp.HandleFunc(\"/\", h.handleMainPage)\n-\thttp.HandleFunc(\"/execute\", h.handleExecute)\n-\taddr := fmt.Sprintf(\"localhost:%d\", web.Port)\n-\tlog.Println(\"going to listen\", addr)\n-\terr := http.ListenAndServe(addr, nil)\n-\n-\tlog.Println(err)\n-\treturn nil\n-}\n-\n-func (h httpHandler) handleMainPage(w http.ResponseWriter, r *http.Request) {\n-\t_, err := w.Write([]byte(mainPageHTML))\n-\tif err != nil {\n-\t\tlog.Println(\"cannot write response:\", err)\n-\t}\n-}\n-\n-func (h httpHandler) handleExecute(w http.ResponseWriter, r *http.Request) {\n-\tbytes, err := io.ReadAll(r.Body)\n-\tif err != nil {\n-\t\tlog.Println(\"cannot read request body:\", err)\n-\t\treturn\n-\t}\n-\tcode := string(bytes)\n-\n-\toutBytes, outValues, errBytes, err := evalAndCollect(h.ev, code)\n-\terrText := \"\"\n-\tif err != nil {\n-\t\terrText = err.Error()\n-\t}\n-\tresponseBody, err := json.Marshal(\n-\t\t&ExecuteResponse{string(outBytes), outValues, string(errBytes), errText})\n-\tif err != nil {\n-\t\tlog.Println(\"cannot marshal response body:\", err)\n-\t}\n-\n-\t_, err = w.Write(responseBody)\n-\tif err != nil {\n-\t\tlog.Println(\"cannot write response:\", err)\n-\t}\n-}\n-\n-const (\n-\toutFileBufferSize = 1024\n-\toutChanBufferSize = 32\n-)\n-\n-// evalAndCollect evaluates a piece of code with null stdin, and stdout and\n-// stderr connected to pipes (value part of stderr being a blackhole), and\n-// return the results collected on stdout and stderr, and the possible error\n-// that occurred.\n-func evalAndCollect(ev *eval.Evaler, code string) (\n-\toutBytes []byte, outValues []interface{}, errBytes []byte, err error) {\n-\n-\toutFile, chanOutBytes := makeBytesWriterAndCollect()\n-\toutChan, chanOutValues := makeValuesWriterAndCollect()\n-\terrFile, chanErrBytes := makeBytesWriterAndCollect()\n-\n-\tports := []*eval.Port{\n-\t\teval.DummyInputPort,\n-\t\t{File: outFile, Chan: outChan},\n-\t\t{File: errFile, Chan: eval.BlackholeChan},\n-\t}\n-\terr = ev.Eval(\n-\t\tparse.Source{Name: \"[web]\", Code: code}, eval.EvalCfg{Ports: ports})\n-\n-\toutFile.Close()\n-\tclose(outChan)\n-\terrFile.Close()\n-\treturn <-chanOutBytes, <-chanOutValues, <-chanErrBytes, err\n-}\n-\n-// makeBytesWriterAndCollect makes an in-memory file that can be written to, and\n-// the written bytes will be collected in a byte slice that will be put on a\n-// channel as soon as the writer is closed.\n-func makeBytesWriterAndCollect() (*os.File, <-chan []byte) {\n-\tr, w, err := os.Pipe()\n-\t// os.Pipe returns error only on resource exhaustion.\n-\tif err != nil {\n-\t\tpanic(err)\n-\t}\n-\tchanCollected := make(chan []byte)\n-\n-\tgo func() {\n-\t\tvar (\n-\t\t\tcollected []byte\n-\t\t\tbuf       [outFileBufferSize]byte\n-\t\t)\n-\t\tfor {\n-\t\t\tn, err := r.Read(buf[:])\n-\t\t\tcollected = append(collected, buf[:n]...)\n-\t\t\tif err != nil {\n-\t\t\t\tif err != io.EOF {\n-\t\t\t\t\tlog.Println(\"error when reading output pipe:\", err)\n-\t\t\t\t}\n-\t\t\t\tbreak\n-\t\t\t}\n-\t\t}\n-\t\tr.Close()\n-\t\tchanCollected <- collected\n-\t}()\n-\n-\treturn w, chanCollected\n-}\n-\n-// makeValuesWriterAndCollect makes a Value channel for writing, and the written\n-// values will be collected in a Value slice that will be put on a channel as\n-// soon as the writer is closed.\n-func makeValuesWriterAndCollect() (chan interface{}, <-chan []interface{}) {\n-\tchanValues := make(chan interface{}, outChanBufferSize)\n-\tchanCollected := make(chan []interface{})\n-\n-\tgo func() {\n-\t\tvar collected []interface{}\n-\t\tfor {\n-\t\t\tfor v := range chanValues {\n-\t\t\t\tcollected = append(collected, v)\n-\t\t\t}\n-\t\t\tchanCollected <- collected\n-\t\t}\n-\t}()\n-\n-\treturn chanValues, chanCollected\n-}"
        },
        {
          "filename": "pkg/web/web_test.go",
          "status": "removed",
          "additions": 0,
          "deletions": 19,
          "patch": "@@ -1,19 +0,0 @@\n-package web\n-\n-import (\n-\t\"testing\"\n-\n-\t. \"src.elv.sh/pkg/prog/progtest\"\n-)\n-\n-func TestProgram(t *testing.T) {\n-\tTest(t, Program,\n-\t\tThatElvish(\"-web\", \"x\").\n-\t\t\tExitsWith(2).\n-\t\t\tWritesStderrContaining(\"arguments are not allowed with -web\"),\n-\n-\t\tThatElvish(\"-web\", \"-c\").\n-\t\t\tExitsWith(2).\n-\t\t\tWritesStderrContaining(\"-c cannot be used together with -web\"),\n-\t)\n-}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "dad2f5cb138c849d17d4b7dfc44ffeba89671cef",
            "date": "2024-12-21T11:47:53Z",
            "author_login": "alexandear"
          },
          {
            "sha": "3e41d2913fc6ada46d34f18166c0a1cd8b828c3e",
            "date": "2024-12-21T12:19:57Z",
            "author_login": "alexandear"
          },
          {
            "sha": "1ecd68dad65367ae73aca6003d0face776180343",
            "date": "2025-01-05T22:23:19Z",
            "author_login": "xiaq"
          },
          {
            "sha": "5aafdd5329da158db088322b85c686237b2303b4",
            "date": "2024-11-18T09:06:09Z",
            "author_login": "MrOverlord"
          },
          {
            "sha": "d078bc11b7142e672429c787f7d4448f682f63df",
            "date": "2024-11-18T09:04:50Z",
            "author_login": "MrOverlord"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-668",
    "description": "Elvish is a programming language and interactive shell, combined into one package. In versions prior to 0.14.0 Elvish's web UI backend (started by `elvish -web`) hosts an endpoint that allows executing the code sent from the web UI. The backend does not check the origin of requests correctly. As a result, if the user has the web UI backend open and visits a compromised or malicious website, the website can send arbitrary code to the endpoint in localhost. All Elvish releases from 0.14.0 onward no longer include the the web UI, although it is still possible for the user to build a version from source that includes the web UI. The issue can be patched for previous versions by removing the web UI (found in web, pkg/web or pkg/prog/web, depending on the exact version).",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-09-23T20:15:07.720",
    "last_modified": "2024-11-21T06:25:25.967",
    "fix_date": "2021-09-21T22:45:09Z"
  },
  "references": [
    {
      "url": "https://github.com/elves/elvish/commit/ccc2750037bbbfafe9c1b7a78eadd3bd16e81fe5",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/elves/elvish/security/advisories/GHSA-fpv6-f8jw-rc3r",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/elves/elvish/commit/ccc2750037bbbfafe9c1b7a78eadd3bd16e81fe5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/elves/elvish/security/advisories/GHSA-fpv6-f8jw-rc3r",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.785151",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "elvish",
    "owner": "elves",
    "created_at": "2013-06-16T08:43:32Z",
    "updated_at": "2025-01-14T11:04:56Z",
    "pushed_at": "2025-01-05T22:35:21Z",
    "size": 15865,
    "stars": 5799,
    "forks": 309,
    "open_issues": 322,
    "watchers": 5799,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 1689673,
      "Elvish": 185983,
      "HTML": 25472,
      "CSS": 22895,
      "TypeScript": 18241,
      "JavaScript": 8114,
      "Shell": 6023,
      "Python": 5810,
      "Makefile": 3756,
      "Nix": 1828,
      "Dockerfile": 253
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-2-clause"
    },
    "collected_at": "2025-01-14T17:42:52.930513"
  }
}