{
  "cve_id": "CVE-2021-41092",
  "github_data": {
    "repository": "docker/cli",
    "fix_commit": "893e52cf4ba4b048d72e99748e0f86b2767c6c6b",
    "related_commits": [
      "893e52cf4ba4b048d72e99748e0f86b2767c6c6b",
      "893e52cf4ba4b048d72e99748e0f86b2767c6c6b"
    ],
    "patch_url": "https://github.com/docker/cli/commit/893e52cf4ba4b048d72e99748e0f86b2767c6c6b.patch",
    "fix_commit_details": {
      "sha": "893e52cf4ba4b048d72e99748e0f86b2767c6c6b",
      "commit_date": "2021-09-09T18:40:54Z",
      "author": {
        "login": "thaJeztah",
        "type": "User",
        "stats": {
          "total_commits": 3753,
          "average_weekly_commits": 6.38265306122449,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 442
        }
      },
      "commit_message": {
        "title": "Merge pull request #2 from moby/cli-ghsa-99pg-grm5-qq3v-default-authconfig-20.10",
        "length": 138,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 44,
        "additions": 27,
        "deletions": 17
      },
      "files": [
        {
          "filename": "cli/command/registry.go",
          "status": "modified",
          "additions": 7,
          "deletions": 8,
          "patch": "@@ -63,17 +63,14 @@ func RegistryAuthenticationPrivilegedFunc(cli Cli, index *registrytypes.IndexInf\n \t\tindexServer := registry.GetAuthConfigKey(index)\n \t\tisDefaultRegistry := indexServer == ElectAuthServer(context.Background(), cli)\n \t\tauthConfig, err := GetDefaultAuthConfig(cli, true, indexServer, isDefaultRegistry)\n-\t\tif authConfig == nil {\n-\t\t\tauthConfig = &types.AuthConfig{}\n-\t\t}\n \t\tif err != nil {\n \t\t\tfmt.Fprintf(cli.Err(), \"Unable to retrieve stored credentials for %s, error: %s.\\n\", indexServer, err)\n \t\t}\n-\t\terr = ConfigureAuth(cli, \"\", \"\", authConfig, isDefaultRegistry)\n+\t\terr = ConfigureAuth(cli, \"\", \"\", &authConfig, isDefaultRegistry)\n \t\tif err != nil {\n \t\t\treturn \"\", err\n \t\t}\n-\t\treturn EncodeAuthToBase64(*authConfig)\n+\t\treturn EncodeAuthToBase64(authConfig)\n \t}\n }\n \n@@ -92,7 +89,7 @@ func ResolveAuthConfig(ctx context.Context, cli Cli, index *registrytypes.IndexI\n \n // GetDefaultAuthConfig gets the default auth config given a serverAddress\n // If credentials for given serverAddress exists in the credential store, the configuration will be populated with values in it\n-func GetDefaultAuthConfig(cli Cli, checkCredStore bool, serverAddress string, isDefaultRegistry bool) (*types.AuthConfig, error) {\n+func GetDefaultAuthConfig(cli Cli, checkCredStore bool, serverAddress string, isDefaultRegistry bool) (types.AuthConfig, error) {\n \tif !isDefaultRegistry {\n \t\tserverAddress = registry.ConvertToHostname(serverAddress)\n \t}\n@@ -101,13 +98,15 @@ func GetDefaultAuthConfig(cli Cli, checkCredStore bool, serverAddress string, is\n \tif checkCredStore {\n \t\tauthconfig, err = cli.ConfigFile().GetAuthConfig(serverAddress)\n \t\tif err != nil {\n-\t\t\treturn nil, err\n+\t\t\treturn types.AuthConfig{\n+\t\t\t\tServerAddress: serverAddress,\n+\t\t\t}, err\n \t\t}\n \t}\n \tauthconfig.ServerAddress = serverAddress\n \tauthconfig.IdentityToken = \"\"\n \tres := types.AuthConfig(authconfig)\n-\treturn &res, nil\n+\treturn res, nil\n }\n \n // ConfigureAuth handles prompting of user's username and password if needed"
        },
        {
          "filename": "cli/command/registry/login.go",
          "status": "modified",
          "additions": 5,
          "deletions": 8,
          "patch": "@@ -114,22 +114,19 @@ func runLogin(dockerCli command.Cli, opts loginOptions) error { //nolint: gocycl\n \tvar response registrytypes.AuthenticateOKBody\n \tisDefaultRegistry := serverAddress == authServer\n \tauthConfig, err := command.GetDefaultAuthConfig(dockerCli, opts.user == \"\" && opts.password == \"\", serverAddress, isDefaultRegistry)\n-\tif authConfig == nil {\n-\t\tauthConfig = &types.AuthConfig{}\n-\t}\n \tif err == nil && authConfig.Username != \"\" && authConfig.Password != \"\" {\n-\t\tresponse, err = loginWithCredStoreCreds(ctx, dockerCli, authConfig)\n+\t\tresponse, err = loginWithCredStoreCreds(ctx, dockerCli, &authConfig)\n \t}\n \tif err != nil || authConfig.Username == \"\" || authConfig.Password == \"\" {\n-\t\terr = command.ConfigureAuth(dockerCli, opts.user, opts.password, authConfig, isDefaultRegistry)\n+\t\terr = command.ConfigureAuth(dockerCli, opts.user, opts.password, &authConfig, isDefaultRegistry)\n \t\tif err != nil {\n \t\t\treturn err\n \t\t}\n \n-\t\tresponse, err = clnt.RegistryLogin(ctx, *authConfig)\n+\t\tresponse, err = clnt.RegistryLogin(ctx, authConfig)\n \t\tif err != nil && client.IsErrConnectionFailed(err) {\n \t\t\t// If the server isn't responding (yet) attempt to login purely client side\n-\t\t\tresponse, err = loginClientSide(ctx, *authConfig)\n+\t\t\tresponse, err = loginClientSide(ctx, authConfig)\n \t\t}\n \t\t// If we (still) have an error, give up\n \t\tif err != nil {\n@@ -152,7 +149,7 @@ func runLogin(dockerCli command.Cli, opts loginOptions) error { //nolint: gocycl\n \t\t}\n \t}\n \n-\tif err := creds.Store(configtypes.AuthConfig(*authConfig)); err != nil {\n+\tif err := creds.Store(configtypes.AuthConfig(authConfig)); err != nil {\n \t\treturn errors.Errorf(\"Error saving credentials: %v\", err)\n \t}\n "
        },
        {
          "filename": "cli/command/registry_test.go",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -145,7 +145,21 @@ func TestGetDefaultAuthConfig(t *testing.T) {\n \t\t\tassert.Check(t, is.Equal(tc.expectedErr, err.Error()))\n \t\t} else {\n \t\t\tassert.NilError(t, err)\n-\t\t\tassert.Check(t, is.DeepEqual(tc.expectedAuthConfig, *authconfig))\n+\t\t\tassert.Check(t, is.DeepEqual(tc.expectedAuthConfig, authconfig))\n \t\t}\n \t}\n }\n+\n+func TestGetDefaultAuthConfig_HelperError(t *testing.T) {\n+\tcli := test.NewFakeCli(&fakeClient{})\n+\terrBuf := new(bytes.Buffer)\n+\tcli.SetErr(errBuf)\n+\tcli.ConfigFile().CredentialsStore = \"fake-does-not-exist\"\n+\tserverAddress := \"test-server-address\"\n+\texpectedAuthConfig := types.AuthConfig{\n+\t\tServerAddress: serverAddress,\n+\t}\n+\tauthconfig, err := GetDefaultAuthConfig(cli, true, serverAddress, serverAddress == \"https://index.docker.io/v1/\")\n+\tassert.Check(t, is.DeepEqual(expectedAuthConfig, authconfig))\n+\tassert.Check(t, is.ErrorContains(err, \"docker-credential-fake-does-not-exist\"))\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "15e4848a0eb01eb5d9f949c48c0871c9c170ade5",
            "date": "2025-01-14T15:24:58Z",
            "author_login": "thaJeztah"
          },
          {
            "sha": "3d9b861165a1e5d51170013fa8fed3270c8f44f8",
            "date": "2025-01-14T14:18:35Z",
            "author_login": "thaJeztah"
          },
          {
            "sha": "25bdd5ced612c90c314d928d5c2626e584e1b047",
            "date": "2025-01-14T14:13:42Z",
            "author_login": "thaJeztah"
          },
          {
            "sha": "5896278838f14a8b95583fb7c72c25f724239368",
            "date": "2025-01-14T14:07:58Z",
            "author_login": "thaJeztah"
          },
          {
            "sha": "aa540679e435f8d7325457785781ce48826757d7",
            "date": "2025-01-14T13:08:30Z",
            "author_login": "thaJeztah"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:C/C:H/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Docker CLI is the command line interface for the docker container runtime. A bug was found in the Docker CLI where running `docker login my-private-registry.example.com` with a misconfigured configuration file (typically `~/.docker/config.json`) listing a `credsStore` or `credHelpers` that could not be executed would result in any provided credentials being sent to `registry-1.docker.io` rather than the intended private registry. This bug has been fixed in Docker CLI 20.10.9. Users should update to this version as soon as possible. For users unable to update ensure that any configured credsStore or credHelpers entries in the configuration file reference an installed credential helper that is executable and on the PATH.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-10-04T20:15:07.757",
    "last_modified": "2024-11-21T06:25:26.783",
    "fix_date": "2021-09-09T18:40:54Z"
  },
  "references": [
    {
      "url": "https://cert-portal.siemens.com/productcert/pdf/ssa-222547.pdf",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://github.com/docker/cli/commit/893e52cf4ba4b048d72e99748e0f86b2767c6c6b",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/docker/cli/security/advisories/GHSA-99pg-grm5-qq3v",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/B5Q6G6I4W5COQE25QMC7FJY3I3PAYFBB/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZNFADTCHHYWVM6W4NJ6CB4FNFM2VMBIB/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://cert-portal.siemens.com/productcert/pdf/ssa-222547.pdf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/docker/cli/commit/893e52cf4ba4b048d72e99748e0f86b2767c6c6b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/docker/cli/security/advisories/GHSA-99pg-grm5-qq3v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/B5Q6G6I4W5COQE25QMC7FJY3I3PAYFBB/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ZNFADTCHHYWVM6W4NJ6CB4FNFM2VMBIB/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.810216",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cli",
    "owner": "docker",
    "created_at": "2017-04-12T05:27:42Z",
    "updated_at": "2025-01-14T15:25:02Z",
    "pushed_at": "2025-01-14T15:24:58Z",
    "size": 190553,
    "stars": 5037,
    "forks": 1950,
    "open_issues": 884,
    "watchers": 5037,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "18.06",
      "18.09",
      "19.03",
      "20.10",
      "23.0",
      "24.0",
      "25.0",
      "26.0",
      "26.1",
      "27.x",
      "master"
    ],
    "languages": {
      "Go": 2859981,
      "Shell": 314153,
      "Dockerfile": 9436,
      "Makefile": 8445,
      "HCL": 3887
    },
    "commit_activity": {
      "total_commits_last_year": 1102,
      "avg_commits_per_week": 21.192307692307693,
      "days_active_last_year": 255
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T16:12:45.246060"
  }
}