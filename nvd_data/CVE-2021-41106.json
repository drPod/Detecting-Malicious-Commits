{
  "cve_id": "CVE-2021-41106",
  "github_data": {
    "repository": "lcobucci/jwt",
    "fix_commit": "8175de5b841fbe3fd97d2d49b3fc15c4ecb39a73",
    "related_commits": [
      "8175de5b841fbe3fd97d2d49b3fc15c4ecb39a73",
      "c45bb8b961a8e742d8f6b88ef5ff1bd5cca5d01c",
      "8175de5b841fbe3fd97d2d49b3fc15c4ecb39a73",
      "c45bb8b961a8e742d8f6b88ef5ff1bd5cca5d01c"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "8175de5b841fbe3fd97d2d49b3fc15c4ecb39a73",
      "commit_date": "2021-09-27T13:36:39Z",
      "author": {
        "login": "lcobucci",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Ensure key contents is used for all hashing algorithms",
        "length": 584,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 89,
        "additions": 64,
        "deletions": 25
      },
      "files": [
        {
          "filename": "docs/configuration.md",
          "status": "modified",
          "additions": 1,
          "deletions": 4,
          "patch": "@@ -41,10 +41,8 @@ Or provide a file path:\n \n ```php\n use Lcobucci\\JWT\\Signer\\Key\\InMemory;\n-use Lcobucci\\JWT\\Signer\\Key\\LocalFileReference;\n \n $key = InMemory::file(__DIR__ . '/path-to-my-key-stored-in-a-file.pem'); // this reads the file and keeps its contents in memory\n-$key = LocalFileReference::file(__DIR__ . '/path-to-my-key-stored-in-a-file.pem'); // this just keeps a reference to file\n ```\n \n #### For symmetric algorithms\n@@ -78,13 +76,12 @@ This means that it's fine to distribute your **public key**. However, the **priv\n ```php\n use Lcobucci\\JWT\\Configuration;\n use Lcobucci\\JWT\\Signer;\n-use Lcobucci\\JWT\\Signer\\Key\\LocalFileReference;\n use Lcobucci\\JWT\\Signer\\Key\\InMemory;\n \n $configuration = Configuration::forAsymmetricSigner(\n     // You may use RSA or ECDSA and all their variations (256, 384, and 512)\n     new Signer\\Rsa\\Sha256(),\n-    LocalFileReference::file(__DIR__ . '/my-private-key.pem'),\n+    InMemory::file(__DIR__ . '/my-private-key.pem'),\n     InMemory::base64Encoded('mBC5v1sOKVvbdEitdSBenu59nfNfhwkedkJVNabosTw=')\n     // You may also override the JOSE encoder/decoder if needed by providing extra arguments here\n );"
        },
        {
          "filename": "docs/upgrading.md",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -96,9 +96,8 @@ You can find more information on how to use the configuration object, [here](con\n ### Use new `Key` objects\n \n `Lcobucci\\JWT\\Signer\\Key` has been converted to an interface in `v4.0`.\n-We provide two new implementations: `Lcobucci\\JWT\\Signer\\Key\\InMemory` and `Lcobucci\\JWT\\Signer\\Key\\LocalFileReference`.\n \n-`Lcobucci\\JWT\\Signer\\Key\\InMemory` is a drop-in replacement of the behaviour for `Lcobucci\\JWT\\Signer\\Key` in `v3.x`.\n+We provide `Lcobucci\\JWT\\Signer\\Key\\InMemory`, a drop-in replacement of the behaviour for `Lcobucci\\JWT\\Signer\\Key` in `v3.x`.\n You will need to pick the appropriated named constructor to migrate your code:\n \n ```diff"
        },
        {
          "filename": "phpstan.neon.dist",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -6,3 +6,4 @@ parameters:\n \n     ignoreErrors:\n         - '#.*OpenSSLAsymmetricKey.*#'\n+        - '#Call to method .* of deprecated class Lcobucci\\\\JWT\\\\Signer\\\\Key\\\\LocalFileReference#'"
        },
        {
          "filename": "src/Signer/Key/LocalFileReference.php",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -9,12 +9,14 @@\n use function strpos;\n use function substr;\n \n+/** @deprecated please use {@see InMemory} instead */\n final class LocalFileReference implements Key\n {\n     private const PATH_PREFIX = 'file://';\n \n     private string $path;\n     private string $passphrase;\n+    private string $contents;\n \n     private function __construct(string $path, string $passphrase)\n     {\n@@ -38,7 +40,11 @@ public static function file(string $path, string $passphrase = ''): self\n \n     public function contents(): string\n     {\n-        return self::PATH_PREFIX . $this->path;\n+        if (! isset($this->contents)) {\n+            $this->contents = InMemory::file($this->path)->contents();\n+        }\n+\n+        return $this->contents;\n     }\n \n     public function passphrase(): string"
        },
        {
          "filename": "test/functional/HmacTokenTest.php",
          "status": "modified",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -7,12 +7,17 @@\n use Lcobucci\\JWT\\Signer\\Hmac\\Sha256;\n use Lcobucci\\JWT\\Signer\\Hmac\\Sha512;\n use Lcobucci\\JWT\\Signer\\Key\\InMemory;\n+use Lcobucci\\JWT\\Signer\\Key\\LocalFileReference;\n use Lcobucci\\JWT\\Token;\n use Lcobucci\\JWT\\Validation\\Constraint\\SignedWith;\n use Lcobucci\\JWT\\Validation\\RequiredConstraintsViolated;\n use PHPUnit\\Framework\\TestCase;\n \n use function assert;\n+use function file_put_contents;\n+use function is_string;\n+use function sys_get_temp_dir;\n+use function tempnam;\n \n /**\n  * @covers \\Lcobucci\\JWT\\Configuration\n@@ -131,4 +136,39 @@ public function everythingShouldWorkWhenUsingATokenGeneratedByOtherLibs(): void\n         self::assertTrue($this->config->validator()->validate($token, $constraint));\n         self::assertEquals('world', $token->claims()->get('hello'));\n     }\n+\n+    /** @test */\n+    public function signatureValidationWithLocalFileKeyReferenceWillOperateWithKeyContents(): void\n+    {\n+        $key = tempnam(sys_get_temp_dir(), 'key');\n+        assert(is_string($key));\n+\n+        file_put_contents($key, 'just a dummy key');\n+\n+        $validKey      = LocalFileReference::file($key);\n+        $invalidKey    = InMemory::plainText('file://' . $key);\n+        $signer        = new Sha256();\n+        $configuration = Configuration::forSymmetricSigner($signer, $validKey);\n+        $validator     = $configuration->validator();\n+\n+        $token = $configuration->builder()\n+            ->withClaim('foo', 'bar')\n+            ->getToken($configuration->signer(), $configuration->signingKey());\n+\n+        self::assertFalse(\n+            $validator->validate(\n+                $token,\n+                new SignedWith($signer, $invalidKey)\n+            ),\n+            'Token cannot be validated against the **path** of the key'\n+        );\n+\n+        self::assertTrue(\n+            $validator->validate(\n+                $token,\n+                new SignedWith($signer, $validKey)\n+            ),\n+            'Token can be validated against the **contents** of the key'\n+        );\n+    }\n }"
        },
        {
          "filename": "test/unit/Signer/EcdsaTest.php",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -56,6 +56,7 @@ private function getSigner(): Ecdsa\n      *\n      * @uses \\Lcobucci\\JWT\\Signer\\Ecdsa::__construct\n      * @uses \\Lcobucci\\JWT\\Signer\\Key\\LocalFileReference\n+     * @uses \\Lcobucci\\JWT\\Signer\\Key\\InMemory\n      */\n     public function signShouldReturnTheAHashBasedOnTheOpenSslSignature(): void\n     {\n@@ -88,6 +89,7 @@ public function signShouldReturnTheAHashBasedOnTheOpenSslSignature(): void\n      *\n      * @uses \\Lcobucci\\JWT\\Signer\\Ecdsa::__construct\n      * @uses \\Lcobucci\\JWT\\Signer\\Key\\LocalFileReference\n+     * @uses \\Lcobucci\\JWT\\Signer\\Key\\InMemory\n      */\n     public function verifyShouldDelegateToEcdsaSignerUsingPublicKey(): void\n     {"
        },
        {
          "filename": "test/unit/Signer/Key/LocalFileReferenceTest.php",
          "status": "modified",
          "additions": 8,
          "deletions": 18,
          "patch": "@@ -6,7 +6,11 @@\n use org\\bovigo\\vfs\\vfsStream;\n use PHPUnit\\Framework\\TestCase;\n \n-/** @coversDefaultClass \\Lcobucci\\JWT\\Signer\\Key\\LocalFileReference */\n+/**\n+ * @coversDefaultClass \\Lcobucci\\JWT\\Signer\\Key\\LocalFileReference\n+ *\n+ * @uses \\Lcobucci\\JWT\\Signer\\Key\\InMemory\n+ */\n final class LocalFileReferenceTest extends TestCase\n {\n     /** @before */\n@@ -33,20 +37,6 @@ public function thereShouldBeNoReferenceToAFileThatDoesNotExist(): void\n         LocalFileReference::file(vfsStream::url('root/test2.pem'));\n     }\n \n-    /**\n-     * @test\n-     *\n-     * @covers ::file\n-     * @covers ::__construct\n-     * @covers ::contents\n-     */\n-    public function pathShouldBeNormalised(): void\n-    {\n-        $key = LocalFileReference::file('file://' . vfsStream::url('root/test.pem'));\n-\n-        self::assertSame('file://vfs://root/test.pem', $key->contents());\n-    }\n-\n     /**\n      * @test\n      *\n@@ -55,11 +45,11 @@ public function pathShouldBeNormalised(): void\n      * @covers ::contents\n      * @covers ::passphrase\n      */\n-    public function contentsShouldReturnOnlyTheReferenceToTheFile(): void\n+    public function pathShouldBeNormalised(): void\n     {\n-        $key = LocalFileReference::file(vfsStream::url('root/test.pem'), 'test');\n+        $key = LocalFileReference::file('file://' . vfsStream::url('root/test.pem'), 'test');\n \n-        self::assertSame('file://vfs://root/test.pem', $key->contents());\n+        self::assertSame('testing', $key->contents());\n         self::assertSame('test', $key->passphrase());\n     }\n }"
        },
        {
          "filename": "test/unit/Signer/RsaTest.php",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -30,6 +30,7 @@ final class RsaTest extends TestCase\n      * @covers \\Lcobucci\\JWT\\Signer\\OpenSSL\n      *\n      * @uses \\Lcobucci\\JWT\\Signer\\Key\\LocalFileReference\n+     * @uses \\Lcobucci\\JWT\\Signer\\Key\\InMemory\n      */\n     public function signShouldReturnAValidOpensslSignature(): void\n     {\n@@ -100,6 +101,7 @@ public function signShouldRaiseAnExceptionWhenKeyIsNotParseable(): void\n      * @covers \\Lcobucci\\JWT\\Signer\\InvalidKeyProvided\n      *\n      * @uses \\Lcobucci\\JWT\\Signer\\Key\\LocalFileReference\n+     * @uses \\Lcobucci\\JWT\\Signer\\Key\\InMemory\n      */\n     public function signShouldRaiseAnExceptionWhenKeyTypeIsNotRsa(): void\n     {\n@@ -119,6 +121,7 @@ public function signShouldRaiseAnExceptionWhenKeyTypeIsNotRsa(): void\n      * @covers \\Lcobucci\\JWT\\Signer\\OpenSSL\n      *\n      * @uses \\Lcobucci\\JWT\\Signer\\Key\\LocalFileReference\n+     * @uses \\Lcobucci\\JWT\\Signer\\Key\\InMemory\n      */\n     public function verifyShouldReturnTrueWhenSignatureIsValid(): void\n     {\n@@ -161,6 +164,7 @@ public function verifyShouldRaiseAnExceptionWhenKeyIsNotParseable(): void\n      * @covers \\Lcobucci\\JWT\\Signer\\InvalidKeyProvided\n      *\n      * @uses \\Lcobucci\\JWT\\Signer\\Key\\LocalFileReference\n+     * @uses \\Lcobucci\\JWT\\Signer\\Key\\InMemory\n      */\n     public function verifyShouldRaiseAnExceptionWhenKeyTypeIsNotRsa(): void\n     {"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 6,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f9fd918753cddbbb841da2bb358db33415c2183c",
            "date": "2025-01-24T17:38:53Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "b5239faf4de99b30e00852fdd89b7efb6aa0b90f",
            "date": "2025-01-23T21:59:34Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "70b1ce2136c0978bbc822971e974fc6a543c6dd1",
            "date": "2025-01-22T17:42:42Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "8a455be323a7656adca64cf79efb0031fba1e29a",
            "date": "2025-01-21T19:04:21Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "27d63e603041560b86cd2ec60e23ab8f8ab28587",
            "date": "2025-01-19T13:40:42Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.4,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-345",
    "description": "JWT is a library to work with JSON Web Token and JSON Web Signature. Prior to versions 3.4.6, 4.0.4, and 4.1.5, users of HMAC-based algorithms (HS256, HS384, and HS512) combined with `Lcobucci\\JWT\\Signer\\Key\\LocalFileReference` as key are having their tokens issued/validated using the file path as hashing key - instead of the contents. The HMAC hashing functions take any string as input and, since users can issue and validate tokens, users are lead to believe that everything works properly. Versions 3.4.6, 4.0.4, and 4.1.5 have been patched to always load the file contents, deprecated the `Lcobucci\\JWT\\Signer\\Key\\LocalFileReference`, and suggest `Lcobucci\\JWT\\Signer\\Key\\InMemory` as the alternative. As a workaround, use `Lcobucci\\JWT\\Signer\\Key\\InMemory` instead of `Lcobucci\\JWT\\Signer\\Key\\LocalFileReference` to create the instances of one's keys.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-28T21:15:07.370",
    "last_modified": "2024-11-21T06:25:28.933",
    "fix_date": "2021-09-27T13:36:39Z"
  },
  "references": [
    {
      "url": "https://github.com/lcobucci/jwt/commit/8175de5b841fbe3fd97d2d49b3fc15c4ecb39a73",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lcobucci/jwt/commit/c45bb8b961a8e742d8f6b88ef5ff1bd5cca5d01c",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lcobucci/jwt/security/advisories/GHSA-7322-jrq4-x5hf",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lcobucci/jwt/commit/8175de5b841fbe3fd97d2d49b3fc15c4ecb39a73",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lcobucci/jwt/commit/c45bb8b961a8e742d8f6b88ef5ff1bd5cca5d01c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lcobucci/jwt/security/advisories/GHSA-7322-jrq4-x5hf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.793909",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "jwt",
    "owner": "lcobucci",
    "created_at": "2014-03-05T19:23:23Z",
    "updated_at": "2025-01-24T21:45:40Z",
    "pushed_at": "2025-01-24T21:45:57Z",
    "size": 3078,
    "stars": 7344,
    "forks": 601,
    "open_issues": 11,
    "watchers": 7344,
    "has_security_policy": false,
    "default_branch": "5.5.x",
    "protected_branches": [
      "3.4.x",
      "4.0.x",
      "4.1.x",
      "4.2.x",
      "4.3.x",
      "4.4.x",
      "5.0.x",
      "5.1.x",
      "5.2.x",
      "5.3.x",
      "5.4.x",
      "5.5.x",
      "6.0.x"
    ],
    "languages": {
      "PHP": 302583,
      "Makefile": 1249
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T08:07:48.708480"
  }
}