{
  "cve_id": "CVE-2021-41135",
  "github_data": {
    "repository": "cosmos/cosmos-sdk",
    "fix_commit": "68ab790a761e80d3674f821794cf18ccbfed45ee",
    "related_commits": [
      "68ab790a761e80d3674f821794cf18ccbfed45ee",
      "68ab790a761e80d3674f821794cf18ccbfed45ee"
    ],
    "patch_url": "https://github.com/cosmos/cosmos-sdk/commit/68ab790a761e80d3674f821794cf18ccbfed45ee.patch",
    "fix_commit_details": {
      "sha": "68ab790a761e80d3674f821794cf18ccbfed45ee",
      "commit_date": "2021-10-12T14:40:49Z",
      "author": {
        "login": "robert-zaremba",
        "type": "User",
        "stats": {
          "total_commits": 239,
          "average_weekly_commits": 0.5106837606837606,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 94
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-2p6r-37p9-89p2",
        "length": 187,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 64,
        "additions": 54,
        "deletions": 10
      },
      "files": [
        {
          "filename": "x/authz/authorization_grant.go",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -10,7 +10,11 @@ import (\n )\n \n // NewGrant returns new Grant\n-func NewGrant(a Authorization, expiration time.Time) (Grant, error) {\n+func NewGrant( /*blockTime time.Time, */ a Authorization, expiration time.Time) (Grant, error) {\n+\t// TODO: add this for 0.45\n+\t// if !expiration.After(blockTime) {\n+\t// \treturn Grant{}, sdkerrors.ErrInvalidRequest.Wrapf(\"expiration must be after the current block time (%v), got %v\", blockTime.Format(time.RFC3339), expiration.Format(time.RFC3339))\n+\t// }\n \tg := Grant{\n \t\tExpiration: expiration,\n \t}\n@@ -51,10 +55,6 @@ func (g Grant) GetAuthorization() Authorization {\n }\n \n func (g Grant) ValidateBasic() error {\n-\tif g.Expiration.Unix() < time.Now().Unix() {\n-\t\treturn sdkerrors.Wrap(ErrInvalidExpirationTime, \"Time can't be in the past\")\n-\t}\n-\n \tav := g.Authorization.GetCachedValue()\n \ta, ok := av.(Authorization)\n \tif !ok {"
        },
        {
          "filename": "x/authz/authorization_grant_test.go",
          "status": "added",
          "additions": 44,
          "deletions": 0,
          "patch": "@@ -0,0 +1,44 @@\n+package authz\n+\n+import (\n+\t\"testing\"\n+\t\"time\"\n+\n+\t// banktypes \"github.com/cosmos/cosmos-sdk/x/bank/types\"\n+\t\"github.com/stretchr/testify/require\"\n+)\n+\n+func expecError(r *require.Assertions, expected string, received error) {\n+\tif expected == \"\" {\n+\t\tr.NoError(received)\n+\t} else {\n+\t\tr.Error(received)\n+\t\tr.Contains(received.Error(), expected)\n+\t}\n+}\n+\n+func TestNewGrant(t *testing.T) {\n+\t// ba := banktypes.NewSendAuthorization(sdk.NewCoins(sdk.NewInt64Coin(\"foo\", 123)))\n+\ta := NewGenericAuthorization(\"some-type\")\n+\tvar tcs = []struct {\n+\t\ttitle     string\n+\t\ta         Authorization\n+\t\tblockTime time.Time\n+\t\texpire    time.Time\n+\t\terr       string\n+\t}{\n+\t\t// {\"wrong expire time (1)\", a, time.Unix(10, 0), time.Unix(8, 0), \"expiration must be after\"},\n+\t\t// {\"wrong expire time (2)\", a, time.Unix(10, 0), time.Unix(10, 0), \"expiration must be after\"},\n+\t\t{\"good expire time (1)\", a, time.Unix(10, 0), time.Unix(10, 1), \"\"},\n+\t\t{\"good expire time (2)\", a, time.Unix(10, 0), time.Unix(11, 0), \"\"},\n+\t}\n+\n+\tfor _, tc := range tcs {\n+\t\tt.Run(tc.title, func(t *testing.T) {\n+\t\t\t// _, err := NewGrant(tc.blockTime, tc.a, tc.expire)\n+\t\t\t_, err := NewGrant(tc.a, tc.expire)\n+\t\t\texpecError(require.New(t), tc.err, err)\n+\t\t})\n+\t}\n+\n+}"
        },
        {
          "filename": "x/authz/client/testutil/tx.go",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -127,11 +127,11 @@ func (s *IntegrationTestSuite) TestCLITxGrantAuthorization() {\n \t\t\t\t\"send\",\n \t\t\t\tfmt.Sprintf(\"--%s=100steak\", cli.FlagSpendLimit),\n \t\t\t\tfmt.Sprintf(\"--%s=%s\", flags.FlagFrom, val.Address.String()),\n-\t\t\t\tfmt.Sprintf(\"--%s=true\", flags.FlagGenerateOnly),\n+\t\t\t\tfmt.Sprintf(\"--%s=true\", flags.FlagSkipConfirmation),\n \t\t\t\tfmt.Sprintf(\"--%s=%d\", cli.FlagExpiration, pastHour),\n \t\t\t},\n-\t\t\t0,\n-\t\t\ttrue,\n+\t\t\t0xd,\n+\t\t\tfalse, // TODO: enable in v0.45\n \t\t},\n \t\t{\n \t\t\t\"fail with error invalid msg-type\","
        },
        {
          "filename": "x/authz/keeper/msg_server.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -10,7 +10,7 @@ import (\n \n var _ authz.MsgServer = Keeper{}\n \n-// GrantAuthorization implements the MsgServer.Grant method.\n+// GrantAuthorization implements the MsgServer.Grant method to create a new grant.\n func (k Keeper) Grant(goCtx context.Context, msg *authz.MsgGrant) (*authz.MsgGrantResponse, error) {\n \tctx := sdk.UnwrapSDKContext(goCtx)\n \tgrantee, err := sdk.AccAddressFromBech32(msg.Grantee)"
        },
        {
          "filename": "x/authz/msgs_test.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -80,7 +80,7 @@ func TestMsgGrantAuthorization(t *testing.T) {\n \t\t{\"nil granter and grantee address\", nil, nil, &banktypes.SendAuthorization{SpendLimit: coinsPos}, time.Now(), false, false},\n \t\t{\"nil authorization\", granter, grantee, nil, time.Now(), true, false},\n \t\t{\"valid test case\", granter, grantee, &banktypes.SendAuthorization{SpendLimit: coinsPos}, time.Now().AddDate(0, 1, 0), false, true},\n-\t\t{\"past time\", granter, grantee, &banktypes.SendAuthorization{SpendLimit: coinsPos}, time.Now().AddDate(0, 0, -1), false, false},\n+\t\t{\"past time\", granter, grantee, &banktypes.SendAuthorization{SpendLimit: coinsPos}, time.Now().AddDate(0, 0, -1), false, true}, // TODO need 0.45\n \t}\n \tfor i, tc := range tests {\n \t\tmsg, err := authz.NewMsgGrant("
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "80552a69c40e093877d06074a0de2166f4b78171",
            "date": "2025-01-14T14:45:45Z",
            "author_login": "julienrbrt"
          },
          {
            "sha": "dfb5cc29f2f853dff8e38cae0ee7c7995a463b75",
            "date": "2025-01-14T14:33:52Z",
            "author_login": "caseylove"
          },
          {
            "sha": "5fb5ddaa1ce3b1d7c209a276ff4241d2404328e4",
            "date": "2025-01-14T11:56:31Z",
            "author_login": "luchenhan"
          },
          {
            "sha": "d2aa3c25be6d9bc1af18c8cd980daa13b78ac553",
            "date": "2025-01-14T10:21:06Z",
            "author_login": "hidewrong"
          },
          {
            "sha": "ec744ec88a5f7f5573de0f0a380b3a3a22e0b6ab",
            "date": "2025-01-14T10:19:37Z",
            "author_login": "caseylove"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-754",
    "description": "The Cosmos-SDK is a framework for building blockchain applications in Golang. Affected versions of the SDK were vulnerable to a consensus halt due to non-deterministic behaviour in a ValidateBasic method in the x/authz module. The MsgGrant of the x/authz module contains a Grant field which includes a user-defined expiration time for when the authorization grant expires. In Grant.ValidateBasic(), that time is compared to the node\u2019s local clock time. Any chain running an affected version of the SDK with the authz module enabled could be halted by anyone with the ability to send transactions on that chain. Recovery would require applying the patch and rolling back the latest block. Users are advised to update to version 0.44.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-10-20T18:15:07.807",
    "last_modified": "2024-11-21T06:25:33.550",
    "fix_date": "2021-10-12T14:40:49Z"
  },
  "references": [
    {
      "url": "https://forum.cosmos.network/t/cosmos-sdk-vulnerability-retrospective-security-advisory-jackfruit-october-12-2021/5349",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/cosmos/cosmos-sdk/commit/68ab790a761e80d3674f821794cf18ccbfed45ee",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-2p6r-37p9-89p2",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://forum.cosmos.network/t/cosmos-sdk-vulnerability-retrospective-security-advisory-jackfruit-october-12-2021/5349",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/cosmos/cosmos-sdk/commit/68ab790a761e80d3674f821794cf18ccbfed45ee",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/cosmos/cosmos-sdk/security/advisories/GHSA-2p6r-37p9-89p2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.840769",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cosmos-sdk",
    "owner": "cosmos",
    "created_at": "2016-02-06T07:15:53Z",
    "updated_at": "2025-01-14T14:52:41Z",
    "pushed_at": "2025-01-14T14:55:12Z",
    "size": 325517,
    "stars": 6404,
    "forks": 3750,
    "open_issues": 287,
    "watchers": 6404,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Go": 10944806,
      "C": 666190,
      "Java": 30290,
      "Sage": 30188,
      "Assembly": 28453,
      "M4": 25931,
      "Makefile": 25278,
      "Shell": 22255,
      "Dockerfile": 6944,
      "Python": 3403,
      "Nix": 1493,
      "Gherkin": 1299
    },
    "commit_activity": {
      "total_commits_last_year": 2467,
      "avg_commits_per_week": 47.44230769230769,
      "days_active_last_year": 299
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:02:25.965395"
  }
}