{
  "cve_id": "CVE-2021-41140",
  "github_data": {
    "repository": "discourse/discourse-reactions",
    "fix_commit": "213d90b82fd15c4186ebc290fee18817d9727d0d",
    "related_commits": [
      "213d90b82fd15c4186ebc290fee18817d9727d0d",
      "213d90b82fd15c4186ebc290fee18817d9727d0d"
    ],
    "patch_url": "https://github.com/discourse/discourse-reactions/commit/213d90b82fd15c4186ebc290fee18817d9727d0d.patch",
    "fix_commit_details": {
      "sha": "213d90b82fd15c4186ebc290fee18817d9727d0d",
      "commit_date": "2021-10-11T02:03:38Z",
      "author": {
        "login": "lis2",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "SECURITY: leaking PMs and secure categories topics (#110)",
        "length": 134,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 87,
        "additions": 86,
        "deletions": 1
      },
      "files": [
        {
          "filename": "app/controllers/discourse_reactions/custom_reactions_controller.rb",
          "status": "modified",
          "additions": 39,
          "deletions": 1,
          "patch": "@@ -32,11 +32,14 @@ def reactions_given\n       raise Discourse::NotFound unless guardian.can_see_profile?(user)\n \n       reaction_users = DiscourseReactions::ReactionUser\n-        .joins(:reaction, :post)\n+        .joins(:reaction, post: :topic)\n+        .joins(\"LEFT JOIN categories ON categories.id = topics.category_id\")\n         .includes(:user, :post, :reaction)\n         .where(user_id: user.id)\n         .where('discourse_reactions_reactions.reaction_users_count IS NOT NULL')\n \n+      reaction_users = secure_reaction_users!(reaction_users)\n+\n       if params[:before_reaction_user_id]\n         reaction_users = reaction_users\n           .where('discourse_reactions_reaction_users.id < ?', params[:before_reaction_user_id].to_i)\n@@ -187,5 +190,40 @@ def publish_change_to_clients!(post)\n \n       MessageBus.publish(\"/topic/#{post.topic.id}/reactions\", message)\n     end\n+\n+    def secure_reaction_users!(reaction_users)\n+      if !guardian.can_see_private_messages?(current_user.id) || !guardian.user\n+        reaction_users = reaction_users.where(\"topics.archetype <> :private_message\", private_message: archetype::private_message)\n+      else\n+        unless guardian.is_admin?\n+          sql = <<~SQL\n+            topics.archetype <> :private_message OR\n+            EXISTS (\n+              SELECT 1 FROM topic_allowed_users tu WHERE tu.topic_id = topics.id AND tu.user_id = :current_user_id\n+            ) OR\n+            EXISTS (\n+              SELECT 1 FROM topic_allowed_groups tg WHERE tg.topic_id = topics.id AND tg.group_id IN (\n+                SELECT group_id FROM group_users gu WHERE gu.user_id = :current_user_id\n+              )\n+            )\n+          SQL\n+\n+          reaction_users = reaction_users.where(sql, private_message: Archetype::private_message, current_user_id: guardian.user.id)\n+        end\n+      end\n+\n+      unless guardian.is_admin?\n+        allowed = guardian.secure_category_ids\n+        if allowed.present?\n+          reaction_users = reaction_users.where(\"(categories.read_restricted IS NULL OR\n+                         NOT categories.read_restricted OR\n+                        (categories.read_restricted and categories.id in (:categories)) )\", categories: guardian.secure_category_ids)\n+        else\n+          reaction_users = reaction_users.where(\"(categories.read_restricted IS NULL OR NOT categories.read_restricted)\")\n+        end\n+      end\n+\n+      reaction_users\n+    end\n   end\n end"
        },
        {
          "filename": "spec/requests/custom_reactions_controller_spec.rb",
          "status": "modified",
          "additions": 47,
          "deletions": 0,
          "patch": "@@ -1,6 +1,8 @@\n # frozen_string_literal: true\n \n require 'rails_helper'\n+require_relative '../fabricators/reaction_fabricator.rb'\n+require_relative '../fabricators/reaction_user_fabricator.rb'\n \n describe DiscourseReactions::CustomReactionsController do\n   fab!(:post_1) { Fabricate(:post) }\n@@ -109,6 +111,17 @@\n   end\n \n   context '#reactions_given' do\n+    fab!(:private_topic) { Fabricate(:private_message_topic, user: user_2) }\n+    fab!(:private_post) { Fabricate(:post, topic: private_topic) }\n+    fab!(:secure_group) { Fabricate(:group) }\n+    fab!(:secure_category) { Fabricate(:private_category, group: secure_group) }\n+    fab!(:secure_topic) { Fabricate(:topic, category: secure_category) }\n+    fab!(:secure_post) { Fabricate(:post, topic: secure_topic) }\n+    fab!(:private_reaction) { Fabricate(:reaction, post: private_post, reaction_value: \"hugs\") }\n+    fab!(:secure_reaction) { Fabricate(:reaction, post: secure_post, reaction_value: \"hugs\") }\n+    fab!(:private_topic_reaction_user) { Fabricate(:reaction_user, reaction: private_reaction, user: user_2, post: private_post) }\n+    fab!(:secure_topic_reaction_user) { Fabricate(:reaction_user, reaction: secure_reaction, user: user_2, post: secure_post) }\n+\n     it 'returns reactions given by a user' do\n       sign_in(user_1)\n \n@@ -121,6 +134,40 @@\n       expect(parsed[0]['reaction']['id']).to eq(reaction_1.id)\n     end\n \n+    it 'does not return reactions for private messages' do\n+      sign_in(user_1)\n+\n+      get \"/discourse-reactions/posts/reactions.json\", params: { username: user_2.username }\n+      parsed = response.parsed_body\n+      expect(response.parsed_body.map { |reaction| reaction[\"post_id\"] }).not_to include(private_post.id)\n+\n+      sign_in(user_2)\n+\n+      get \"/discourse-reactions/posts/reactions.json\", params: { username: user_2.username }\n+      parsed = response.parsed_body\n+      expect(response.parsed_body.map { |reaction| reaction[\"post_id\"] }).to include(private_post.id)\n+    end\n+\n+    it 'does not return reactions for secure categories' do\n+      secure_group.add(user_2)\n+      sign_in(user_1)\n+\n+      get \"/discourse-reactions/posts/reactions.json\", params: { username: user_2.username }\n+      parsed = response.parsed_body\n+      expect(response.parsed_body.map { |reaction| reaction[\"post_id\"] }).not_to include(secure_post.id)\n+\n+      secure_group.add(user_1)\n+      get \"/discourse-reactions/posts/reactions.json\", params: { username: user_2.username }\n+      parsed = response.parsed_body\n+      expect(response.parsed_body.map { |reaction| reaction[\"post_id\"] }).to include(secure_post.id)\n+\n+      sign_in(user_2)\n+\n+      get \"/discourse-reactions/posts/reactions.json\", params: { username: user_2.username }\n+      parsed = response.parsed_body\n+      expect(response.parsed_body.map { |reaction| reaction[\"post_id\"] }).to include(secure_post.id)\n+    end\n+\n     context 'a post with one of your reactions has been deleted' do\n       fab!(:deleted_post) { Fabricate(:post) }\n       fab!(:kept_post) { Fabricate(:post) }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d34356646221897bdb9cffa11613a802fe1c93d6",
            "date": "2025-01-09T16:42:43Z",
            "author_login": "davidtaylorhq"
          },
          {
            "sha": "c754dc988b243cecea8f82f413f1037a62537237",
            "date": "2025-01-03T13:02:29Z",
            "author_login": "discourse-translator-bot"
          },
          {
            "sha": "fac3464f47008e20c96bd08b1bfaf13131a38db0",
            "date": "2024-12-30T19:22:49Z",
            "author_login": "megothss"
          },
          {
            "sha": "9ed228b02da0297a29d902abab37c5f34626c691",
            "date": "2024-12-09T08:27:55Z",
            "author_login": "OsamaSayegh"
          },
          {
            "sha": "433a07a5e426a63b8e189e41470b3eec21ca750a",
            "date": "2024-12-04T01:44:47Z",
            "author_login": "tyb-talks"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-668",
    "description": "Discourse-reactions is a plugin for the Discourse platform that allows user to add their reactions to the post. In affected versions reactions given by user to secure topics and private messages are visible. This issue is patched in version 0.2 of discourse-reaction. Users who are unable to update are advised to disable the Discourse-reactions plugin in admin panel.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-10-19T18:15:08.030",
    "last_modified": "2024-11-21T06:25:34.477",
    "fix_date": "2021-10-11T02:03:38Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse-reactions/commit/213d90b82fd15c4186ebc290fee18817d9727d0d",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-reactions/security/advisories/GHSA-9358-hwg5-jrmh",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-reactions/commit/213d90b82fd15c4186ebc290fee18817d9727d0d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse-reactions/security/advisories/GHSA-9358-hwg5-jrmh",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.838693",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse-reactions",
    "owner": "discourse",
    "created_at": "2020-12-01T19:35:29Z",
    "updated_at": "2025-01-09T16:42:47Z",
    "pushed_at": "2025-01-09T16:42:45Z",
    "size": 1254,
    "stars": 37,
    "forks": 19,
    "open_issues": 3,
    "watchers": 37,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Ruby": 164790,
      "JavaScript": 97692,
      "SCSS": 10233,
      "Handlebars": 1832
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T19:19:26.765965"
  }
}