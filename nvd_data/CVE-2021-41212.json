{
  "cve_id": "CVE-2021-41212",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8",
    "related_commits": [
      "fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8",
      "fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8",
      "commit_date": "2021-09-30T22:52:09Z",
      "author": {
        "login": "edloper",
        "type": "User",
        "stats": {
          "total_commits": 359,
          "average_weekly_commits": 0.7448132780082988,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 97
        }
      },
      "commit_message": {
        "title": "Fix null pointer exception in shape inference function when tf.ragged.cross() is called with invalid inputs.",
        "length": 191,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 42,
        "additions": 40,
        "deletions": 2
      },
      "files": [
        {
          "filename": "tensorflow/core/ops/ragged_array_ops.cc",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -99,6 +99,13 @@ REGISTER_OP(\"RaggedCross\")\n       int dense_start = num_ragged * 2 + num_sparse * 3;\n       for (int i = 0; i < dense_types.size(); ++i) {\n         ShapeHandle dense_input = c->input(i + dense_start);\n+        int32 rank = c->Rank(dense_input);\n+        if (rank == InferenceContext::kUnknownRank) {\n+          continue;\n+        } else if (rank != 2) {\n+          return errors::InvalidArgument(\n+              \"tf.ragged.cross only supports inputs with rank=2\");\n+        }\n         int64_t batch_size = c->Value(c->Dim(dense_input, 0));\n         if (batch_size != InferenceContext::kUnknownDim) {\n           ShapeHandle row_splits = c->Vector(batch_size + 1);"
        },
        {
          "filename": "tensorflow/python/ops/ragged/ragged_cross_op_test.py",
          "status": "modified",
          "additions": 33,
          "deletions": 2,
          "patch": "@@ -18,10 +18,12 @@\n \n import numpy as np\n \n+from tensorflow.python.eager import def_function\n from tensorflow.python.framework import dtypes\n from tensorflow.python.framework import errors\n from tensorflow.python.framework import ops\n from tensorflow.python.framework import sparse_tensor\n+from tensorflow.python.framework import tensor_spec\n from tensorflow.python.framework import test_util\n from tensorflow.python.ops import sparse_ops\n from tensorflow.python.ops.ragged import ragged_array_ops\n@@ -358,6 +360,16 @@ def testRaggedCrossLargeBatch(self):\n                   dense_const([[2], [3]])],\n           exception=(ValueError, errors.InvalidArgumentError),\n           message='inputs must all have the same batch dimension size'),\n+      dict(\n+          testcase_name='3DDenseTensor',\n+          inputs=[dense_const([[[1]]])],\n+          exception=(ValueError, errors.InvalidArgumentError),\n+          message='tf.ragged.cross only supports inputs with rank=2'),\n+      dict(\n+          testcase_name='0DDenseTensor',\n+          inputs=[dense_const(1)],\n+          exception=(ValueError, errors.InvalidArgumentError),\n+          message='tf.ragged.cross only supports inputs with rank=2'),\n   ])\n   def testStaticError(self, inputs, exception=ValueError, message=None):\n     with self.assertRaisesRegex(exception, message):\n@@ -368,17 +380,36 @@ def testStaticError(self, inputs, exception=ValueError, message=None):\n           testcase_name='3DRaggedTensor',\n           inputs=[ragged_const([[[1]]], ragged_rank=1)],\n           message='tf.ragged.cross only supports inputs with rank=2'),\n+      dict(\n+          testcase_name='0DDenseTensor',\n+          inputs=[dense_const(1)],\n+          signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],\n+          exception=(ValueError, errors.InvalidArgumentError),\n+          message='tf.ragged.cross only supports inputs with rank=2'),\n+      dict(\n+          testcase_name='1DDenseTensor',\n+          inputs=[dense_const([1])],\n+          signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],\n+          exception=(ValueError, errors.InvalidArgumentError),\n+          message='tf.ragged.cross only supports inputs with rank=2'),\n       dict(\n           testcase_name='3DDenseTensor',\n           inputs=[dense_const([[[1]]])],\n+          signature=[[tensor_spec.TensorSpec(None, dtypes.int32)]],\n+          exception=(ValueError, errors.InvalidArgumentError),\n           message='tf.ragged.cross only supports inputs with rank=2'),\n   ])\n   def testRuntimeError(self,\n                        inputs,\n                        exception=errors.InvalidArgumentError,\n-                       message=None):\n+                       message=None,\n+                       signature=None):\n+    @def_function.function(input_signature=signature)\n+    def fn(x):\n+      return ragged_array_ops.cross(x)\n+\n     with self.assertRaisesRegex(exception, message):\n-      self.evaluate(ragged_array_ops.cross(inputs))\n+      self.evaluate(fn(inputs))\n \n   def _ragged_to_sparse(self, t):\n     if ragged_tensor.is_ragged(t):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5c27f5f4dc39afdefbd93c2ef266a8c7ab534a98",
            "date": "2025-01-25T18:55:10Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "05df81c283627135b7651c9c7a8fa0035bff2206",
            "date": "2025-01-25T17:06:34Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "4075a7dd74ea543557d1824e16721598e1a6af8d",
            "date": "2025-01-25T17:06:30Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "4d08d96d6a0aea39c5bd90d9728dbcf59008993c",
            "date": "2025-01-25T17:04:34Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "1b58ec4dcd6e5752598dc57d4788119f8ea12e23",
            "date": "2025-01-25T11:39:06Z",
            "author_login": "tensorflower-gardener"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
    "cwe_id": "CWE-125",
    "description": "TensorFlow is an open source platform for machine learning. In affected versions the shape inference code for `tf.ragged.cross` can trigger a read outside of bounds of heap allocated array. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-05T21:15:08.877",
    "last_modified": "2024-11-21T06:25:47.387",
    "fix_date": "2021-09-30T22:52:09Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fr77-rrx3-cp7g",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/fa6b7782fbb14aa08d767bc799c531f5e1fb3bb8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fr77-rrx3-cp7g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.875824",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-26T06:52:14Z",
    "pushed_at": "2025-01-26T07:27:00Z",
    "size": 1126495,
    "stars": 187418,
    "forks": 74442,
    "open_issues": 6822,
    "watchers": 187418,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101327392,
      "Python": 45791326,
      "MLIR": 10764225,
      "HTML": 7662661,
      "Starlark": 7439181,
      "Go": 2171369,
      "C": 1294440,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 702245,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 38067,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15545,
      "avg_commits_per_week": 298.9423076923077,
      "days_active_last_year": 354
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:37:26.588757"
  }
}