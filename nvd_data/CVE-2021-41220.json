{
  "cve_id": "CVE-2021-41220",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "ca38dab9d3ee66c5de06f11af9a4b1200da5ef75",
    "related_commits": [
      "ca38dab9d3ee66c5de06f11af9a4b1200da5ef75",
      "ca38dab9d3ee66c5de06f11af9a4b1200da5ef75"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75.patch",
    "fix_commit_details": {
      "sha": "ca38dab9d3ee66c5de06f11af9a4b1200da5ef75",
      "commit_date": "2021-10-04T23:09:45Z",
      "author": {
        "login": "crccw",
        "type": "User",
        "stats": {
          "total_commits": 324,
          "average_weekly_commits": 0.675,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 74
        }
      },
      "commit_message": {
        "title": "Fix undefined behavior in CollectiveReduceV2 and others",
        "length": 181,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 88,
        "additions": 77,
        "deletions": 11
      },
      "files": [
        {
          "filename": "tensorflow/core/kernels/collective_ops.cc",
          "status": "modified",
          "additions": 14,
          "deletions": 11,
          "patch": "@@ -494,15 +494,17 @@ class CollectiveOpV2Kernel : public AsyncOpKernel {\n                               const Tensor& group_size, const Tensor& group_key,\n                               const Tensor& instance_key) {\n     if (group_size.dims() > 0) {\n-      return errors::Internal(\"Unexpected dimensions on input group_size, got \",\n-                              group_size.shape().DebugString());\n+      return errors::InvalidArgument(\n+          \"Unexpected dimensions on input group_size, got \",\n+          group_size.shape().DebugString());\n     }\n     if (group_key.dims() > 0) {\n-      return errors::Internal(\"Unexpected dimensions on input group_key, got \",\n-                              group_key.shape().DebugString());\n+      return errors::InvalidArgument(\n+          \"Unexpected dimensions on input group_key, got \",\n+          group_key.shape().DebugString());\n     }\n     if (instance_key.dims() > 0) {\n-      return errors::Internal(\n+      return errors::InvalidArgument(\n           \"Unexpected dimensions on input instance_key, got \",\n           instance_key.shape().DebugString());\n     }\n@@ -625,7 +627,7 @@ class CollectiveReduceV2OpKernel : public CollectiveOpV2Kernel {\n                                               /*group_size*/ c->input(1),\n                                               /*group_key*/ c->input(2),\n                                               /*instance_key*/ c->input(3)),\n-                         done);\n+                         done_with_cleanup);\n     col_params->instance.shape = c->input(0).shape();\n     col_params->merge_op = merge_op_.get();\n     col_params->final_op = final_op_.get();\n@@ -855,14 +857,15 @@ class CollectiveInitializeCommunicatorOpKernel : public AsyncOpKernel {\n \n   Status CheckInputs(Tensor group_size_t, Tensor group_key_t) {\n     if (group_size_t.dims() > 0) {\n-      return errors::Internal(\n+      return errors::InvalidArgument(\n           \"Unexpected dimensions on input group_size. \"\n           \"It shoulbe a scalar, got tensor with shape \",\n           group_size_t.shape().DebugString());\n     }\n     if (group_key_t.dims() > 0) {\n-      return errors::Internal(\"Unexpected dimensions on input group_key, got \",\n-                              group_key_t.shape().DebugString());\n+      return errors::InvalidArgument(\n+          \"Unexpected dimensions on input group_key, got \",\n+          group_key_t.shape().DebugString());\n     }\n \n     auto group_size = group_size_t.unaligned_flat<int32>()(0);\n@@ -1084,7 +1087,7 @@ class CollectiveReduceV3OpKernel : public CollectiveOpV3Kernel {\n     };\n     core::RefCountPtr<CollectiveGroupResource> resource;\n     OP_REQUIRES_OK_ASYNC(c, LookupResource(c, HandleFromInput(c, 1), &resource),\n-                         done);\n+                         done_with_cleanup);\n \n     Tensor group_assignment = c->input(2);\n \n@@ -1134,7 +1137,7 @@ class CollectiveAllToAllV3OpKernel : public CollectiveOpV3Kernel {\n     };\n     core::RefCountPtr<CollectiveGroupResource> resource;\n     OP_REQUIRES_OK_ASYNC(c, LookupResource(c, HandleFromInput(c, 1), &resource),\n-                         done);\n+                         done_with_cleanup);\n \n     Tensor group_assignment = c->input(2);\n "
        },
        {
          "filename": "tensorflow/python/kernel_tests/collective_ops_test.py",
          "status": "modified",
          "additions": 63,
          "deletions": 0,
          "patch": "@@ -1182,6 +1182,69 @@ def f():\n     self.assertAllEqual(self.evaluate(f()), [[3.], [3.]])\n \n \n+@combinations.generate(\n+    combinations.times(\n+        combinations.combine(collective_op=[\n+            combinations.NamedObject('all_reduce_v2',\n+                                     CollectiveOpsV2.all_reduce),\n+            combinations.NamedObject('all_gather_v2',\n+                                     CollectiveOpsV2.all_gather)\n+        ]), device_combination))\n+class InvalidInputTest(test.TestCase, parameterized.TestCase):\n+\n+  def setUp(self):\n+    _setup_context()\n+    super().setUp()\n+\n+  def testInvalidGroupKey(self, collective_op, device, communication):\n+    dev0 = '/device:%s:0' % device\n+    group_size = 2\n+    group_key = [100]\n+    instance_key = 100\n+    in_tensor = constant_op.constant([1.])\n+\n+    with self.assertRaises(errors.InvalidArgumentError):\n+      with ops.device(dev0):\n+        collective_op(\n+            in_tensor,\n+            group_size,\n+            group_key,\n+            instance_key,\n+            communication_hint=communication)\n+\n+  def testInvalidGroupSize(self, collective_op, device, communication):\n+    dev0 = '/device:%s:0' % device\n+    group_size = -2\n+    group_key = 100\n+    instance_key = 100\n+    in_tensor = constant_op.constant([1.])\n+\n+    with self.assertRaises(errors.InvalidArgumentError):\n+      with ops.device(dev0):\n+        collective_op(\n+            in_tensor,\n+            group_size,\n+            group_key,\n+            instance_key,\n+            communication_hint=communication)\n+\n+  def testInvalidInstanceKey(self, collective_op, device, communication):\n+    dev0 = '/device:%s:0' % device\n+    group_size = 2\n+    group_key = 100\n+    instance_key = [100]\n+    in_tensor = constant_op.constant([1.])\n+\n+    with self.assertRaises(errors.InvalidArgumentError):\n+      with ops.device(dev0):\n+        collective_op(\n+            in_tensor,\n+            group_size,\n+            group_key,\n+            instance_key,\n+            communication_hint=communication)\n+\n+\n class CollectiveOpsV3Test(test.TestCase, parameterized.TestCase):\n \n   def setUp(self):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "142a83c2d5dcfe1c08795c2f3939c9eb02687597",
            "date": "2025-01-14T22:43:34Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "359517872b9281259b49f7186a9de6382598d7ee",
            "date": "2025-01-14T22:18:13Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "d93cc4f4f767f0d4a72f2fafcc59005be939c019",
            "date": "2025-01-14T20:36:32Z",
            "author_login": "sdasgup3"
          },
          {
            "sha": "d4e4516cc7d11a68a81a82227f3a432f7ab350a0",
            "date": "2025-01-14T19:59:15Z",
            "author_login": "ddunl"
          },
          {
            "sha": "65367823d999b6a36a685617100a7bb6ce03add4",
            "date": "2025-01-14T19:58:00Z",
            "author_login": "sdasgup3"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-416",
    "description": "TensorFlow is an open source platform for machine learning. In affected versions the async implementation of `CollectiveReduceV2` suffers from a memory leak and a use after free. This occurs due to the asynchronous computation and the fact that objects that have been `std::move()`d from are still accessed. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, as this version is the only one that is also affected.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-05T23:15:08.350",
    "last_modified": "2024-11-21T06:25:48.677",
    "fix_date": "2021-10-04T23:09:45Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gpfh-jvf9-7wg5",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/ca38dab9d3ee66c5de06f11af9a4b1200da5ef75",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gpfh-jvf9-7wg5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.878419",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}