{
  "cve_id": "CVE-2021-41223",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "aab9998916c2ffbd8f0592059fad352622f89cda",
    "related_commits": [
      "aab9998916c2ffbd8f0592059fad352622f89cda",
      "aab9998916c2ffbd8f0592059fad352622f89cda"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "aab9998916c2ffbd8f0592059fad352622f89cda",
      "commit_date": "2021-09-29T20:00:50Z",
      "author": {
        "login": "reedwm",
        "type": "User",
        "stats": {
          "total_commits": 534,
          "average_weekly_commits": 1.107883817427386,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 221
        }
      },
      "commit_message": {
        "title": "Add shape checks to FusedBatchNorm kernels.",
        "length": 126,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 161,
        "additions": 154,
        "deletions": 7
      },
      "files": [
        {
          "filename": "tensorflow/core/kernels/fused_batch_norm_op.cc",
          "status": "modified",
          "additions": 31,
          "deletions": 7,
          "patch": "@@ -1340,18 +1340,20 @@ class FusedBatchNormOpBase : public OpKernel {\n         errors::InvalidArgument(\"offset must have the same number of elements \"\n                                 \"as the channels of x, got \",\n                                 offset.NumElements(), \" and \", num_channels));\n-    if (estimated_mean.NumElements() != 0) {\n+    if (!is_training_ || exponential_avg_factor_ != 1.) {\n+      std::string prefix_msg = is_training_ ? \"When exponential_avg_factor != 1\"\n+                                            : \"When is_training=false\";\n       OP_REQUIRES(context, estimated_mean.NumElements() == num_channels,\n                   errors::InvalidArgument(\n-                      \"mean must be empty or have the same number of \"\n-                      \"elements as the channels of x, got \",\n+                      prefix_msg,\n+                      \", mean must have the same number \"\n+                      \"of elements as the channels of x, got \",\n                       estimated_mean.NumElements(), \" and \", num_channels));\n-    }\n-    if (estimated_variance.NumElements() != 0) {\n       OP_REQUIRES(context, estimated_variance.NumElements() == num_channels,\n                   errors::InvalidArgument(\n-                      \"variance must be empty or have the same number of \"\n-                      \"elements as the channels of x, got \",\n+                      prefix_msg,\n+                      \", variance must have the same \"\n+                      \"number of elements as the channels of x, got \",\n                       estimated_variance.NumElements(), \" and \", num_channels));\n     }\n \n@@ -1543,6 +1545,11 @@ class FusedBatchNormGradOpBase : public OpKernel {\n                 errors::InvalidArgument(\n                     \"saved variance must be 1-dimensional\",\n                     saved_maybe_inv_var_or_pop_var.shape().DebugString()));\n+    OP_REQUIRES(\n+        context, x.shape() == y_backprop.shape(),\n+        errors::InvalidArgument(\n+            \"x and y_backprop must have same shape, but x has shape \",\n+            x.shape(), \" and y_backprop has shape \", y_backprop.shape()));\n     if (use_activation) {\n       OP_REQUIRES(\n           context, x.dim_size(3) % 4 == 0,\n@@ -1569,6 +1576,23 @@ class FusedBatchNormGradOpBase : public OpKernel {\n                   errors::InvalidArgument(\"Error during tensor copy.\"));\n     }\n \n+    const auto num_channels = GetTensorDim(x, tensor_format_, 'C');\n+    OP_REQUIRES(\n+        context, scale.NumElements() == num_channels,\n+        errors::InvalidArgument(\"scale must have the same number of elements \"\n+                                \"as the channels of x, got \",\n+                                scale.NumElements(), \" and \", num_channels));\n+    OP_REQUIRES(\n+        context, saved_mean_or_pop_mean.NumElements() == num_channels,\n+        errors::InvalidArgument(\"reserve_space_1 must have the same number of \"\n+                                \"elements as the channels of x, got \",\n+                                scale.NumElements(), \" and \", num_channels));\n+    OP_REQUIRES(\n+        context, saved_maybe_inv_var_or_pop_var.NumElements() == num_channels,\n+        errors::InvalidArgument(\"reserve_space_2 must have the same number of \"\n+                                \"elements as the channels of x, got \",\n+                                scale.NumElements(), \" and \", num_channels));\n+\n     Tensor* x_backprop = nullptr;\n     auto alloc_shape = use_reshape ? dest_shape : x_shape;\n     OP_REQUIRES_OK(context,"
        },
        {
          "filename": "tensorflow/python/ops/nn_fused_batchnorm_test.py",
          "status": "modified",
          "additions": 123,
          "deletions": 0,
          "patch": "@@ -16,10 +16,13 @@\n \n import numpy as np\n \n+from tensorflow.python.eager import context\n from tensorflow.python.framework import constant_op\n from tensorflow.python.framework import dtypes\n+from tensorflow.python.framework import errors_impl\n from tensorflow.python.framework import test_util\n from tensorflow.python.ops import array_ops\n+from tensorflow.python.ops import gen_nn_ops\n from tensorflow.python.ops import gradient_checker\n from tensorflow.python.ops import gradients_impl\n from tensorflow.python.ops import math_ops\n@@ -694,6 +697,126 @@ def test5dBatchNormFollowedByRelu(self):\n     y_ref = np.maximum(y_ref, 0.)\n     self.assertAllClose(y_ref, y_val, atol=1e-3)\n \n+  def testEagerShapeErrors(self):\n+    with context.eager_mode():\n+      x = array_ops.ones((2, 2, 2, 2))\n+      scale = array_ops.ones((3,))\n+      offset = array_ops.ones((2,))\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          'scale must have the same number of elements'):\n+        nn_impl.fused_batch_norm(x, scale, offset)\n+\n+      x = array_ops.ones((2, 2, 2, 2))\n+      scale = array_ops.ones((2,))\n+      offset = array_ops.ones((3,))\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          'offset must have the same number of elements'):\n+        nn_impl.fused_batch_norm(x, scale, offset)\n+\n+      x = array_ops.ones((2, 2, 2, 2))\n+      scale = array_ops.ones((2,))\n+      offset = array_ops.ones((2,))\n+      mean = array_ops.ones((0,))\n+      variance = array_ops.ones((2,))\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          'When is_training=false, mean must have the same number of elements'):\n+        nn_impl.fused_batch_norm(\n+            x, scale, offset, mean=mean, variance=variance, is_training=False)\n+\n+      x = array_ops.ones((2, 2, 2, 2))\n+      scale = array_ops.ones((2,))\n+      offset = array_ops.ones((2,))\n+      mean = array_ops.ones((2,))\n+      variance = array_ops.ones((0,))\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          'When is_training=false, variance must have the same number of '\n+          'elements'):\n+        nn_impl.fused_batch_norm(\n+            x, scale, offset, mean=mean, variance=variance, is_training=False)\n+\n+      x = array_ops.ones((2, 2, 2, 2))\n+      scale = array_ops.ones((2,))\n+      offset = array_ops.ones((2,))\n+      mean = array_ops.ones((0,))\n+      variance = array_ops.ones((2,))\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          'When exponential_avg_factor != 1, mean must have the same number of '\n+          'elements'):\n+        nn_impl.fused_batch_norm(\n+            x,\n+            scale,\n+            offset,\n+            mean=mean,\n+            variance=variance,\n+            exponential_avg_factor=0.5)\n+\n+      x = array_ops.ones((2, 2, 2, 2))\n+      scale = array_ops.ones((2,))\n+      offset = array_ops.ones((2,))\n+      mean = array_ops.ones((2,))\n+      variance = array_ops.ones((0,))\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          'When exponential_avg_factor != 1, variance must have the same '\n+          'number of elements'):\n+        nn_impl.fused_batch_norm(\n+            x,\n+            scale,\n+            offset,\n+            mean=mean,\n+            variance=variance,\n+            exponential_avg_factor=0.5)\n+\n+  def testEagerShapeGradErrors(self):\n+    with context.eager_mode():\n+      y_backprop = array_ops.ones((2, 2, 2, 3))\n+      x = array_ops.ones((2, 2, 2, 2))\n+      scale = array_ops.ones((2,))\n+      reserve_space_1 = array_ops.ones((2,))\n+      reserve_space_2 = array_ops.ones((2,))\n+      with self.assertRaisesRegex(errors_impl.InvalidArgumentError,\n+                                  'x and y_backprop must have same shape,'):\n+        gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,\n+                                            reserve_space_1, reserve_space_2)\n+\n+      y_backprop = array_ops.ones((2, 2, 2, 2))\n+      x = array_ops.ones((2, 2, 2, 2))\n+      scale = array_ops.ones((3,))\n+      reserve_space_1 = array_ops.ones((2,))\n+      reserve_space_2 = array_ops.ones((2,))\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          'scale must have the same number of elements'):\n+        gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,\n+                                            reserve_space_1, reserve_space_2)\n+\n+      y_backprop = array_ops.ones((2, 2, 2, 2))\n+      x = array_ops.ones((2, 2, 2, 2))\n+      scale = array_ops.ones((2,))\n+      reserve_space_1 = array_ops.ones((3,))\n+      reserve_space_2 = array_ops.ones((2,))\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          'reserve_space_1 must have the same number of elements'):\n+        gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,\n+                                            reserve_space_1, reserve_space_2)\n+\n+      y_backprop = array_ops.ones((2, 2, 2, 2))\n+      x = array_ops.ones((2, 2, 2, 2))\n+      scale = array_ops.ones((2,))\n+      reserve_space_1 = array_ops.ones((2,))\n+      reserve_space_2 = array_ops.ones((3,))\n+      with self.assertRaisesRegex(\n+          errors_impl.InvalidArgumentError,\n+          'reserve_space_2 must have the same number of elements'):\n+        gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,\n+                                            reserve_space_1, reserve_space_2)\n+\n \n if __name__ == '__main__':\n   test.main()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5c27f5f4dc39afdefbd93c2ef266a8c7ab534a98",
            "date": "2025-01-25T18:55:10Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "05df81c283627135b7651c9c7a8fa0035bff2206",
            "date": "2025-01-25T17:06:34Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "4075a7dd74ea543557d1824e16721598e1a6af8d",
            "date": "2025-01-25T17:06:30Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "4d08d96d6a0aea39c5bd90d9728dbcf59008993c",
            "date": "2025-01-25T17:04:34Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "1b58ec4dcd6e5752598dc57d4788119f8ea12e23",
            "date": "2025-01-25T11:39:06Z",
            "author_login": "tensorflower-gardener"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.1,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H",
    "cwe_id": "CWE-125",
    "description": "TensorFlow is an open source platform for machine learning. In affected versions the implementation of `FusedBatchNorm` kernels is vulnerable to a heap OOB access. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-05T21:15:09.203",
    "last_modified": "2024-11-21T06:25:49.143",
    "fix_date": "2021-09-29T20:00:50Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f54p-f6jp-4rhr",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-f54p-f6jp-4rhr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.876560",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-26T06:52:14Z",
    "pushed_at": "2025-01-26T07:27:00Z",
    "size": 1126495,
    "stars": 187418,
    "forks": 74442,
    "open_issues": 6822,
    "watchers": 187418,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101327392,
      "Python": 45791326,
      "MLIR": 10764225,
      "HTML": 7662661,
      "Starlark": 7439181,
      "Go": 2171369,
      "C": 1294440,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 702245,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 38067,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15545,
      "avg_commits_per_week": 298.9423076923077,
      "days_active_last_year": 354
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T07:37:26.588757"
  }
}