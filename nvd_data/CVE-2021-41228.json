{
  "cve_id": "CVE-2021-41228",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "8b202f08d52e8206af2bdb2112a62fafbc546ec7",
    "related_commits": [
      "8b202f08d52e8206af2bdb2112a62fafbc546ec7",
      "8b202f08d52e8206af2bdb2112a62fafbc546ec7"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7.patch",
    "fix_commit_details": {
      "sha": "8b202f08d52e8206af2bdb2112a62fafbc546ec7",
      "commit_date": "2021-09-30T20:35:10Z",
      "author": {
        "login": "k-w-w",
        "type": "User",
        "stats": {
          "total_commits": 405,
          "average_weekly_commits": 0.84375,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 184
        }
      },
      "commit_message": {
        "title": "Remove use of `eval` when evaluating the input example.",
        "length": 209,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 39,
        "additions": 29,
        "deletions": 10
      },
      "files": [
        {
          "filename": "RELEASE.md",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -249,6 +249,8 @@\n         endpoint.\n *   TF SavedModel:\n     *   Custom gradients are now saved by default. See `tf.saved_model.SaveOptions` to disable this.\n+    *   The saved_model_cli's `--input_examples` inputs are now restricted to\n+        python literals to avoid code injection.\n *   XLA:\n     * Added a new API that allows custom call functions to signal errors. The\n       old API will be deprecated in a future release. See"
        },
        {
          "filename": "tensorflow/python/tools/saved_model_cli.py",
          "status": "modified",
          "additions": 19,
          "deletions": 7,
          "patch": "@@ -20,6 +20,7 @@\n \"\"\"\n \n import argparse\n+import ast\n import os\n import re\n import sys\n@@ -521,16 +522,18 @@ def preprocess_inputs_arg_string(inputs_str):\n   return input_dict\n \n \n-def preprocess_input_exprs_arg_string(input_exprs_str):\n+def preprocess_input_exprs_arg_string(input_exprs_str, safe=True):\n   \"\"\"Parses input arg into dictionary that maps input key to python expression.\n \n   Parses input string in the format of 'input_key=<python expression>' into a\n   dictionary that maps each input_key to its python expression.\n \n   Args:\n     input_exprs_str: A string that specifies python expression for input keys.\n-    Each input is separated by semicolon. For each input key:\n+      Each input is separated by semicolon. For each input key:\n         'input_key=<python expression>'\n+    safe: Whether to evaluate the python expression as literals or allow\n+      arbitrary calls (e.g. numpy usage).\n \n   Returns:\n     A dictionary that maps input keys to their values.\n@@ -545,8 +548,15 @@ def preprocess_input_exprs_arg_string(input_exprs_str):\n       raise RuntimeError('--input_exprs \"%s\" format is incorrect. Please follow'\n                          '\"<input_key>=<python expression>\"' % input_exprs_str)\n     input_key, expr = input_raw.split('=', 1)\n-    # ast.literal_eval does not work with numpy expressions\n-    input_dict[input_key] = eval(expr)  # pylint: disable=eval-used\n+    if safe:\n+      try:\n+        input_dict[input_key] = ast.literal_eval(expr)\n+      except:\n+        raise RuntimeError(\n+            f'Expression \"{expr}\" is not a valid python literal.')\n+    else:\n+      # ast.literal_eval does not work with numpy expressions\n+      input_dict[input_key] = eval(expr)  # pylint: disable=eval-used\n   return input_dict\n \n \n@@ -659,7 +669,7 @@ def load_inputs_from_input_arg_string(inputs_str, input_exprs_str,\n   tensor_key_feed_dict = {}\n \n   inputs = preprocess_inputs_arg_string(inputs_str)\n-  input_exprs = preprocess_input_exprs_arg_string(input_exprs_str)\n+  input_exprs = preprocess_input_exprs_arg_string(input_exprs_str, safe=False)\n   input_examples = preprocess_input_examples_arg_string(input_examples_str)\n \n   for input_tensor_key, (filename, variable_name) in inputs.items():\n@@ -923,8 +933,10 @@ def add_run_subparser(subparsers):\n   parser_run.add_argument('--inputs', type=str, default='', help=msg)\n   msg = ('Specifying inputs by python expressions, in the format of'\n          ' \"<input_key>=\\'<python expression>\\'\", separated by \\';\\'. '\n-         'numpy module is available as \\'np\\'. '\n-         'Will override duplicate input keys from --inputs option.')\n+         'numpy module is available as \\'np\\'. Please note that the expression '\n+         'will be evaluated as-is, and is susceptible to code injection. '\n+         'When this is set, the value will override duplicate input keys from '\n+         '--inputs option.')\n   parser_run.add_argument('--input_exprs', type=str, default='', help=msg)\n   msg = (\n       'Specifying tf.Example inputs as list of dictionaries. For example: '"
        },
        {
          "filename": "tensorflow/python/tools/saved_model_cli_test.py",
          "status": "modified",
          "additions": 8,
          "deletions": 3,
          "patch": "@@ -382,7 +382,7 @@ def testInputPreProcessFormats(self):\n     input_expr_str = 'input3=np.zeros([2,2]);input4=[4,5]'\n     input_dict = saved_model_cli.preprocess_inputs_arg_string(input_str)\n     input_expr_dict = saved_model_cli.preprocess_input_exprs_arg_string(\n-        input_expr_str)\n+        input_expr_str, safe=False)\n     self.assertTrue(input_dict['input1'] == ('/path/file.txt', 'ab3'))\n     self.assertTrue(input_dict['input2'] == ('file2', None))\n     print(input_expr_dict['input3'])\n@@ -418,6 +418,11 @@ def testInputPreProcessExamplesWithStrAndBytes(self):\n           }\n     \"\"\", feature)\n \n+  def testInputPreprocessExampleWithCodeInjection(self):\n+    input_examples_str = 'inputs=os.system(\"echo hacked\")'\n+    with self.assertRaisesRegex(RuntimeError, 'not a valid python literal.'):\n+      saved_model_cli.preprocess_input_examples_arg_string(input_examples_str)\n+\n   def testInputPreProcessFileNames(self):\n     input_str = (r'inputx=C:\\Program Files\\data.npz[v:0];'\n                  r'input:0=c:\\PROGRA~1\\data.npy')\n@@ -434,8 +439,8 @@ def testInputPreProcessErrorBadFormat(self):\n     with self.assertRaises(RuntimeError):\n       saved_model_cli.preprocess_inputs_arg_string(input_str)\n     input_str = 'inputx:np.zeros((5))'\n-    with self.assertRaises(RuntimeError):\n-      saved_model_cli.preprocess_input_exprs_arg_string(input_str)\n+    with self.assertRaisesRegex(RuntimeError, 'format is incorrect'):\n+      saved_model_cli.preprocess_input_exprs_arg_string(input_str, safe=False)\n \n   def testInputParserNPY(self):\n     x0 = np.array([[1], [2]])"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "36cbae5466dbf356d91cf56127b2ab2ccd5a8b1f",
            "date": "2025-01-14T19:54:19Z",
            "author_login": "penpornk"
          },
          {
            "sha": "0a99598a8f76735ac32b5466385b0f5af08a06bb",
            "date": "2025-01-14T19:45:23Z",
            "author_login": "wangpengmit"
          },
          {
            "sha": "df078d626d561e6ae8f34d4702cbead44a3cbf82",
            "date": "2025-01-14T19:36:18Z",
            "author_login": "tensorflower-gardener"
          },
          {
            "sha": "2a6c919b732bc36a8aa444c03c455a5ba7376ad5",
            "date": "2025-01-14T19:00:47Z",
            "author_login": "sdasgup3"
          },
          {
            "sha": "ea89878e945fdb95ec85b5d396d45b70a42d268e",
            "date": "2025-01-14T19:00:19Z",
            "author_login": "eunjaekim-0"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "TensorFlow is an open source platform for machine learning. In affected versions TensorFlow's `saved_model_cli` tool is vulnerable to a code injection as it calls `eval` on user supplied strings. This can be used by attackers to run arbitrary code on the plaform where the CLI tool runs. However, given that the tool is always run manually, the impact of this is not severe. We have patched this by adding a `safe` flag which defaults to `True` and an explicit warning for users. The fix will be included in TensorFlow 2.7.0. We will also cherrypick this commit on TensorFlow 2.6.1, TensorFlow 2.5.2, and TensorFlow 2.4.4, as these are also affected and still in supported range.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-11-05T23:15:08.663",
    "last_modified": "2024-11-21T06:25:49.960",
    "fix_date": "2021-09-30T20:35:10Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3rcw-9p9x-582v",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/8b202f08d52e8206af2bdb2112a62fafbc546ec7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-3rcw-9p9x-582v",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.879202",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}