{
  "cve_id": "CVE-2021-41250",
  "github_data": {
    "repository": "python-discord/bot",
    "fix_commit": "67390298852513d13e0213870e50fb3cff1424e0",
    "related_commits": [
      "67390298852513d13e0213870e50fb3cff1424e0",
      "67390298852513d13e0213870e50fb3cff1424e0"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "67390298852513d13e0213870e50fb3cff1424e0",
      "commit_date": "2021-11-05T12:31:05Z",
      "author": {
        "login": "HassanAbouelela",
        "type": "User",
        "stats": {
          "total_commits": 199,
          "average_weekly_commits": 0.5437158469945356,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 53
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-j8c3-8x46-8pp6",
        "length": 645,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 44,
        "additions": 40,
        "deletions": 4
      },
      "files": [
        {
          "filename": "bot/exts/filters/filtering.py",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -496,10 +496,6 @@ async def _has_watch_regex_match(self, text: str) -> Tuple[Union[bool, re.Match]\n \n         text = self.clean_input(text)\n \n-        # Make sure it's not a URL\n-        if URL_RE.search(text):\n-            return False, None\n-\n         watchlist_patterns = self._get_filterlist_items('filter_token', allowed=False)\n         for pattern in watchlist_patterns:\n             match = re.search(pattern, text, flags=re.IGNORECASE)"
        },
        {
          "filename": "tests/bot/exts/filters/test_filtering.py",
          "status": "added",
          "additions": 40,
          "deletions": 0,
          "patch": "@@ -0,0 +1,40 @@\n+import unittest\n+from unittest.mock import patch\n+\n+from bot.exts.filters import filtering\n+from tests.helpers import MockBot, autospec\n+\n+\n+class FilteringCogTests(unittest.IsolatedAsyncioTestCase):\n+    \"\"\"Tests the `Filtering` cog.\"\"\"\n+\n+    def setUp(self):\n+        \"\"\"Instantiate the bot and cog.\"\"\"\n+        self.bot = MockBot()\n+        with patch(\"bot.utils.scheduling.create_task\", new=lambda task, **_: task.close()):\n+            self.cog = filtering.Filtering(self.bot)\n+\n+    @autospec(filtering.Filtering, \"_get_filterlist_items\", pass_mocks=False, return_value=[\"TOKEN\"])\n+    async def test_token_filter(self):\n+        \"\"\"Ensure that a filter token is correctly detected in a message.\"\"\"\n+        messages = {\n+            \"\": False,\n+            \"no matches\": False,\n+            \"TOKEN\": True,\n+\n+            # See advisory https://github.com/python-discord/bot/security/advisories/GHSA-j8c3-8x46-8pp6\n+            \"https://google.com TOKEN\": True,\n+            \"https://google.com something else\": False,\n+        }\n+\n+        for message, match in messages.items():\n+            with self.subTest(input=message, match=match):\n+                result, _ = await self.cog._has_watch_regex_match(message)\n+\n+                self.assertEqual(\n+                    match,\n+                    bool(result),\n+                    msg=f\"Hit was {'expected' if match else 'not expected'} for this input.\"\n+                )\n+                if result:\n+                    self.assertEqual(\"TOKEN\", result.group())"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c642d3d2687b4b7dc35076630c8ab7cc1264fef6",
            "date": "2025-01-18T22:10:54Z",
            "author_login": "ChrisLovering"
          },
          {
            "sha": "4517729efb6ed9ffb8b34bbf48125f16131ee05b",
            "date": "2025-01-06T15:18:34Z",
            "author_login": "ChrisLovering"
          },
          {
            "sha": "a6a104cfa49c7f817b5e518410b6829af8400866",
            "date": "2025-01-18T19:17:40Z",
            "author_login": "mbaruh"
          },
          {
            "sha": "b237eef91cb48c8be2df5c215ac67f75e5c5b394",
            "date": "2025-01-18T18:10:06Z",
            "author_login": "ChrisLovering"
          },
          {
            "sha": "e1945dcfe17cf621f97620843845a30bfe06c813",
            "date": "2025-01-18T18:09:50Z",
            "author_login": "ChrisLovering"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-20",
    "description": "Python discord bot is the community bot for the Python Discord community. In affected versions when a non-blacklisted URL and an otherwise triggering filter token is included in the same message the token filter does not trigger. This means that by including any non-blacklisted URL moderation filters can be bypassed. This issue has been resolved in commit 67390298852513d13e0213870e50fb3cff1424e0",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-05T23:15:08.790",
    "last_modified": "2024-11-21T06:25:53.327",
    "fix_date": "2021-11-05T12:31:05Z"
  },
  "references": [
    {
      "url": "https://github.com/python-discord/bot/commit/67390298852513d13e0213870e50fb3cff1424e0",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/python-discord/bot/security/advisories/GHSA-j8c3-8x46-8pp6",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/python-discord/bot/commit/67390298852513d13e0213870e50fb3cff1424e0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/python-discord/bot/security/advisories/GHSA-j8c3-8x46-8pp6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.879525",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "bot",
    "owner": "python-discord",
    "created_at": "2018-02-03T12:20:25Z",
    "updated_at": "2025-01-25T10:16:37Z",
    "pushed_at": "2025-01-24T12:48:52Z",
    "size": 17949,
    "stars": 1388,
    "forks": 687,
    "open_issues": 111,
    "watchers": 1388,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 1562435,
      "Dockerfile": 410
    },
    "commit_activity": {
      "total_commits_last_year": 401,
      "avg_commits_per_week": 7.711538461538462,
      "days_active_last_year": 115
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:33:40.313949"
  }
}