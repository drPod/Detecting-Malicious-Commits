{
  "cve_id": "CVE-2021-41264",
  "github_data": {
    "repository": "OpenZeppelin/openzeppelin-contracts",
    "fix_commit": "024cc50df478d2e8f78539819749e94d6df60592",
    "related_commits": [
      "024cc50df478d2e8f78539819749e94d6df60592",
      "024cc50df478d2e8f78539819749e94d6df60592"
    ],
    "patch_url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/024cc50df478d2e8f78539819749e94d6df60592.patch",
    "fix_commit_details": {
      "sha": "024cc50df478d2e8f78539819749e94d6df60592",
      "commit_date": "2021-09-14T19:50:27Z",
      "author": {
        "login": "Amxx",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Restrict upgrade to proxy context in UUPSUpgradeable",
        "length": 179,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 26,
        "additions": 23,
        "deletions": 3
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1,5 +1,9 @@\n # Changelog\n \n+## 4.3.2\n+\n+ * `UUPSUpgradeable`: Add modifiers to prevent `upgradeTo` and `upgradeToAndCall` being executed on any contract that is not the active ERC1967 proxy. This prevents these functions being called on implementation contracts or minimal ERC1167 clones, in particular.\n+\n ## 4.3.1 (2021-08-26)\n \n  * `TimelockController`: Add additional isOperationReady check."
        },
        {
          "filename": "contracts/proxy/utils/UUPSUpgradeable.sol",
          "status": "modified",
          "additions": 19,
          "deletions": 3,
          "patch": "@@ -17,16 +17,32 @@ import \"../ERC1967/ERC1967Upgrade.sol\";\n  * _Available since v4.1._\n  */\n abstract contract UUPSUpgradeable is ERC1967Upgrade {\n+    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n+    address private immutable __self = address(this);\n+\n+    /**\n+     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n+     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n+     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n+     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n+     * fail.\n+     */\n+    modifier onlyProxy() {\n+        require(address(this) != __self, \"Function must be called through delegatecall\");\n+        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n+        _;\n+    }\n+\n     /**\n      * @dev Upgrade the implementation of the proxy to `newImplementation`.\n      *\n      * Calls {_authorizeUpgrade}.\n      *\n      * Emits an {Upgraded} event.\n      */\n-    function upgradeTo(address newImplementation) external virtual {\n+    function upgradeTo(address newImplementation) external virtual onlyProxy {\n         _authorizeUpgrade(newImplementation);\n-        _upgradeToAndCallSecure(newImplementation, bytes(\"\"), false);\n+        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\n     }\n \n     /**\n@@ -37,7 +53,7 @@ abstract contract UUPSUpgradeable is ERC1967Upgrade {\n      *\n      * Emits an {Upgraded} event.\n      */\n-    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual {\n+    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n         _authorizeUpgrade(newImplementation);\n         _upgradeToAndCallSecure(newImplementation, data, true);\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "96b40d02c3fe836ffa19b6ed9217c3719c996f78",
            "date": "2025-01-10T20:59:14Z",
            "author_login": "ernestognw"
          },
          {
            "sha": "13781c1f4982908d40d8936f58c36d5227e168a7",
            "date": "2025-01-10T16:43:28Z",
            "author_login": "Amxx"
          },
          {
            "sha": "2e27a0c74b228215d73be24a90260789c9cdb4ae",
            "date": "2025-01-10T16:43:11Z",
            "author_login": "arr00"
          },
          {
            "sha": "352ab136878f652658f8f4e3d70b4087563653c4",
            "date": "2025-01-10T01:48:32Z",
            "author_login": "Amxx"
          },
          {
            "sha": "7b74442c5e87ea51dde41c7f18a209fa5154f1a4",
            "date": "2025-01-09T16:16:31Z",
            "author_login": "github-actions[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-665",
    "description": "OpenZeppelin Contracts is a library for smart contract development. In affected versions upgradeable contracts using `UUPSUpgradeable` may be vulnerable to an attack affecting uninitialized implementation contracts. A fix is included in version 4.3.2 of `@openzeppelin/contracts` and `@openzeppelin/contracts-upgradeable`. For users unable to upgrade; initialize implementation contracts using `UUPSUpgradeable` by invoking the initializer function (usually called `initialize`). An example is provided [in the forum](https://forum.openzeppelin.com/t/security-advisory-initialize-uups-implementation-contracts/15301).",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-12T18:15:07.733",
    "last_modified": "2024-11-21T06:25:55.170",
    "fix_date": "2021-09-14T19:50:27Z"
  },
  "references": [
    {
      "url": "https://forum.openzeppelin.com/t/security-advisory-initialize-uups-implementation-contracts/15301",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Mitigation",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/024cc50df478d2e8f78539819749e94d6df60592",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5vp3-v4hc-gx76",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://forum.openzeppelin.com/t/security-advisory-initialize-uups-implementation-contracts/15301",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Mitigation",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/commit/024cc50df478d2e8f78539819749e94d6df60592",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5vp3-v4hc-gx76",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.890991",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openzeppelin-contracts",
    "owner": "OpenZeppelin",
    "created_at": "2016-08-01T20:54:54Z",
    "updated_at": "2025-01-14T13:39:35Z",
    "pushed_at": "2025-01-13T16:34:19Z",
    "size": 47412,
    "stars": 25188,
    "forks": 11862,
    "open_issues": 289,
    "watchers": 25188,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "audit/M-01",
      "audit/2023-03",
      "audit/2023-06",
      "audit/2023-07-10",
      "audit/2023-07-24",
      "audit/2023-08-01",
      "audit/2023-08-07",
      "docs-org",
      "docs-v2.x",
      "docs-v3.x",
      "docs-v4.x",
      "docs-v5.x",
      "master",
      "next-v5.0",
      "release-v2.3.0",
      "release-v2.4.0",
      "release-v2.5.0",
      "release-v3.0.0",
      "release-v3.1.0",
      "release-v3.2.0-solc-0.7",
      "release-v3.2.0",
      "release-v3.3-solc-0.7"
    ],
    "languages": {
      "Solidity": 1279163,
      "JavaScript": 1230104,
      "Python": 170889,
      "Ruby": 95064,
      "Shell": 9208,
      "Makefile": 1714
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:42:13.725104"
  }
}