{
  "cve_id": "CVE-2021-41265",
  "github_data": {
    "repository": "dpgaspar/Flask-AppBuilder",
    "fix_commit": "eba517aab121afa3f3f2edb011ec6bc4efd61fbc",
    "related_commits": [
      "eba517aab121afa3f3f2edb011ec6bc4efd61fbc",
      "eba517aab121afa3f3f2edb011ec6bc4efd61fbc"
    ],
    "patch_url": "https://github.com/dpgaspar/Flask-AppBuilder/commit/eba517aab121afa3f3f2edb011ec6bc4efd61fbc.patch",
    "fix_commit_details": {
      "sha": "eba517aab121afa3f3f2edb011ec6bc4efd61fbc",
      "commit_date": "2021-10-12T14:31:20Z",
      "author": {
        "login": "dpgaspar",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "chore: improve schema validation (#1712)",
        "length": 40,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 140,
        "additions": 96,
        "deletions": 44
      },
      "files": [
        {
          "filename": "docs/config.rst",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -202,6 +202,9 @@ Use config.py to configure the following parameters. By default it will use SQLL\n | AUTH_ROLE_PUBLIC                       | Special Role that holds the public         |   No      |\n |                                        | permissions, no authentication needed.     |           |\n +----------------------------------------+--------------------------------------------+-----------+\n+| AUTH_API_LOGIN_ALLOW_MULTIPLE_PROVIDERS| Allow REST API login with alternative auth |   No      |\n+| True|False                             | providers (default False)                  |           |           |\n++----------------------------------------+--------------------------------------------+-----------+\n | APP_NAME                               | The name of your application.              |   No      |\n +----------------------------------------+--------------------------------------------+-----------+\n | APP_THEME                              | Various themes for you to choose           |   No      |"
        },
        {
          "filename": "flask_appbuilder/security/api.py",
          "status": "modified",
          "additions": 28,
          "deletions": 34,
          "patch": "@@ -1,24 +1,20 @@\n-from flask import request\n+from flask import request, Response\n+from flask_appbuilder.api import BaseApi, safe\n+from flask_appbuilder.const import (\n+    API_SECURITY_ACCESS_TOKEN_KEY,\n+    API_SECURITY_PROVIDER_DB,\n+    API_SECURITY_PROVIDER_LDAP,\n+    API_SECURITY_VERSION,\n+)\n+from flask_appbuilder.security.schemas import login_post\n+from flask_appbuilder.views import expose\n from flask_jwt_extended import (\n     create_access_token,\n     create_refresh_token,\n     get_jwt_identity,\n     jwt_refresh_token_required,\n )\n-\n-from ..api import BaseApi, safe\n-from ..const import (\n-    API_SECURITY_ACCESS_TOKEN_KEY,\n-    API_SECURITY_PASSWORD_KEY,\n-    API_SECURITY_PROVIDER_DB,\n-    API_SECURITY_PROVIDER_KEY,\n-    API_SECURITY_PROVIDER_LDAP,\n-    API_SECURITY_REFRESH_KEY,\n-    API_SECURITY_REFRESH_TOKEN_KEY,\n-    API_SECURITY_USERNAME_KEY,\n-    API_SECURITY_VERSION,\n-)\n-from ..views import expose\n+from marshmallow import ValidationError\n \n \n class SecurityApi(BaseApi):\n@@ -35,7 +31,7 @@ def add_apispec_components(self, api_spec):\n \n     @expose(\"/login\", methods=[\"POST\"])\n     @safe\n-    def login(self):\n+    def login(self) -> Response:\n         \"\"\"Login endpoint for the API returns a JWT and optionally a refresh token\n         ---\n         post:\n@@ -88,20 +84,20 @@ def login(self):\n         \"\"\"\n         if not request.is_json:\n             return self.response_400(message=\"Request payload is not JSON\")\n-        username = request.json.get(API_SECURITY_USERNAME_KEY, None)\n-        password = request.json.get(API_SECURITY_PASSWORD_KEY, None)\n-        provider = request.json.get(API_SECURITY_PROVIDER_KEY, None)\n-        refresh = request.json.get(API_SECURITY_REFRESH_KEY, False)\n-        if not username or not password or not provider:\n-            return self.response_400(message=\"Missing required parameter\")\n+        try:\n+            login_payload = login_post.load(request.json)\n+        except ValidationError as error:\n+            return self.response_400(message=error.messages)\n+\n         # AUTH\n-        if provider == API_SECURITY_PROVIDER_DB:\n-            user = self.appbuilder.sm.auth_user_db(username, password)\n-        elif provider == API_SECURITY_PROVIDER_LDAP:\n-            user = self.appbuilder.sm.auth_user_ldap(username, password)\n-        else:\n-            return self.response_400(\n-                message=\"Provider {} not supported\".format(provider)\n+        user = None\n+        if login_payload[\"provider\"] == API_SECURITY_PROVIDER_DB:\n+            user = self.appbuilder.sm.auth_user_db(\n+                login_payload[\"username\"], login_payload[\"password\"]\n+            )\n+        elif login_payload[\"provider\"] == API_SECURITY_PROVIDER_LDAP:\n+            user = self.appbuilder.sm.auth_user_ldap(\n+                login_payload[\"username\"], login_payload[\"password\"]\n             )\n         if not user:\n             return self.response_401()\n@@ -111,16 +107,14 @@ def login(self):\n         resp[API_SECURITY_ACCESS_TOKEN_KEY] = create_access_token(\n             identity=user.id, fresh=True\n         )\n-        if refresh:\n-            resp[API_SECURITY_REFRESH_TOKEN_KEY] = create_refresh_token(\n-                identity=user.id\n-            )\n+        if \"refresh\" in login_payload:\n+            login_payload[\"refresh\"] = create_refresh_token(identity=user.id)\n         return self.response(200, **resp)\n \n     @expose(\"/refresh\", methods=[\"POST\"])\n     @jwt_refresh_token_required\n     @safe\n-    def refresh(self):\n+    def refresh(self) -> Response:\n         \"\"\"\n             Security endpoint for the refresh token, so we can obtain a new\n             token without forcing the user to login again"
        },
        {
          "filename": "flask_appbuilder/security/manager.py",
          "status": "modified",
          "additions": 20,
          "deletions": 10,
          "patch": "@@ -3,7 +3,7 @@\n import json\n import logging\n import re\n-from typing import Dict, List, Optional, Set, Tuple\n+from typing import Any, Dict, List, Optional, Set, Tuple\n \n from flask import g, session, url_for\n from flask_babel import lazy_gettext as _\n@@ -219,6 +219,7 @@ def __init__(self, appbuilder):\n         # Role Mapping\n         app.config.setdefault(\"AUTH_ROLES_MAPPING\", {})\n         app.config.setdefault(\"AUTH_ROLES_SYNC_AT_LOGIN\", False)\n+        app.config.setdefault(\"AUTH_API_LOGIN_ALLOW_MULTIPLE_PROVIDERS\", False)\n \n         # LDAP Config\n         if self.auth_type == AUTH_LDAP:\n@@ -330,6 +331,11 @@ def get_roles_from_keys(self, role_keys: List[str]) -> Set[role_model]:\n                         )\n         return _roles\n \n+    @property\n+    def auth_type_provider_name(self) -> Optional[str]:\n+        provider_to_auth_type = {AUTH_DB: \"db\", AUTH_LDAP: \"ldap\"}\n+        return provider_to_auth_type.get(self.auth_type)\n+\n     @property\n     def get_url_for_registeruser(self):\n         return url_for(\n@@ -346,39 +352,43 @@ def get_register_user_datamodel(self):\n         return self.registerusermodelview.datamodel\n \n     @property\n-    def builtin_roles(self):\n+    def builtin_roles(self) -> Dict[str, Any]:\n         return self._builtin_roles\n \n     @property\n-    def auth_type(self):\n+    def api_login_allow_multiple_providers(self):\n+        return self.appbuilder.get_app.config[\"AUTH_API_LOGIN_ALLOW_MULTIPLE_PROVIDERS\"]\n+\n+    @property\n+    def auth_type(self) -> int:\n         return self.appbuilder.get_app.config[\"AUTH_TYPE\"]\n \n     @property\n-    def auth_username_ci(self):\n+    def auth_username_ci(self) -> str:\n         return self.appbuilder.get_app.config.get(\"AUTH_USERNAME_CI\", True)\n \n     @property\n-    def auth_role_admin(self):\n+    def auth_role_admin(self) -> str:\n         return self.appbuilder.get_app.config[\"AUTH_ROLE_ADMIN\"]\n \n     @property\n-    def auth_role_public(self):\n+    def auth_role_public(self) -> str:\n         return self.appbuilder.get_app.config[\"AUTH_ROLE_PUBLIC\"]\n \n     @property\n-    def auth_ldap_server(self):\n+    def auth_ldap_server(self) -> str:\n         return self.appbuilder.get_app.config[\"AUTH_LDAP_SERVER\"]\n \n     @property\n-    def auth_ldap_use_tls(self):\n+    def auth_ldap_use_tls(self) -> bool:\n         return self.appbuilder.get_app.config[\"AUTH_LDAP_USE_TLS\"]\n \n     @property\n-    def auth_user_registration(self):\n+    def auth_user_registration(self) -> bool:\n         return self.appbuilder.get_app.config[\"AUTH_USER_REGISTRATION\"]\n \n     @property\n-    def auth_user_registration_role(self):\n+    def auth_user_registration_role(self) -> str:\n         return self.appbuilder.get_app.config[\"AUTH_USER_REGISTRATION_ROLE\"]\n \n     @property"
        },
        {
          "filename": "flask_appbuilder/security/schemas.py",
          "status": "added",
          "additions": 45,
          "deletions": 0,
          "patch": "@@ -0,0 +1,45 @@\n+from typing import Union\n+\n+from flask import current_app\n+from flask_appbuilder.const import (\n+    API_SECURITY_PROVIDER_DB,\n+    API_SECURITY_PROVIDER_LDAP,\n+    AUTH_DB,\n+    AUTH_LDAP,\n+)\n+from marshmallow import fields, Schema, ValidationError\n+from marshmallow.validate import Length, OneOf\n+\n+\n+provider_to_auth_type = {\"db\": AUTH_DB, \"ldap\": AUTH_LDAP}\n+\n+\n+def validate_password(value: Union[bytes, bytearray, str]) -> None:\n+    if not value:\n+        raise ValidationError(\"Password is required\")\n+    if len(value) == 1 and value.encode()[0] == 0:\n+        raise ValidationError(\"Password null is not allowed\")\n+\n+\n+def validate_provider(value: Union[bytes, bytearray, str]) -> None:\n+    if not current_app.appbuilder.sm.api_login_allow_multiple_providers:\n+        provider_name = current_app.appbuilder.sm.auth_type_provider_name\n+        if provider_name and provider_name != value:\n+            raise ValidationError(\"Alternative authentication provider is not allowed\")\n+\n+\n+class LoginPost(Schema):\n+    username = fields.String(required=True, allow_none=False, validate=Length(min=1))\n+    password = fields.String(\n+        validate=validate_password, required=True, allow_none=False\n+    )\n+    provider = fields.String(\n+        validate=[\n+            OneOf([API_SECURITY_PROVIDER_DB, API_SECURITY_PROVIDER_LDAP]),\n+            validate_provider,\n+        ]\n+    )\n+    refresh = fields.Boolean(required=False)\n+\n+\n+login_post = LoginPost()"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "418ab8a93907669be4ccbb99d7aefa5283f3e013",
            "date": "2024-12-17T16:33:17Z",
            "author_login": "dpgaspar"
          },
          {
            "sha": "fab9013003a41c4e80da04f072201a8c7cc99187",
            "date": "2024-10-23T12:29:25Z",
            "author_login": "dpgaspar"
          },
          {
            "sha": "4ca96e9722a692e8640acd18e605fad9702521a9",
            "date": "2024-10-23T10:13:32Z",
            "author_login": "dpgaspar"
          },
          {
            "sha": "a374c14ceaa6c9c4fb4b87dd8b082a7f5e94ad00",
            "date": "2024-10-23T09:14:18Z",
            "author_login": "CodeWithEmad"
          },
          {
            "sha": "1d27eb42a4f9b6e19fb3c025327b4110b175eccb",
            "date": "2024-09-02T17:10:23Z",
            "author_login": "dpgaspar"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-287",
    "description": "Flask-AppBuilder is a development framework built on top of Flask. Verions prior to 3.3.4 contain an improper authentication vulnerability in the REST API. The issue allows for a malicious actor with a carefully crafted request to successfully authenticate and gain access to existing protected REST API endpoints. This only affects non database authentication types and new REST API endpoints. Users should upgrade to Flask-AppBuilder 3.3.4 to receive a patch.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-12-09T17:15:07.963",
    "last_modified": "2024-11-21T06:25:55.307",
    "fix_date": "2021-10-12T14:31:20Z"
  },
  "references": [
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/commit/eba517aab121afa3f3f2edb011ec6bc4efd61fbc",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/releases/tag/v3.3.4",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/security/advisories/GHSA-m3rf-7m4w-r66q",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/commit/eba517aab121afa3f3f2edb011ec6bc4efd61fbc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/releases/tag/v3.3.4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/dpgaspar/Flask-AppBuilder/security/advisories/GHSA-m3rf-7m4w-r66q",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.828969",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Flask-AppBuilder",
    "owner": "dpgaspar",
    "created_at": "2013-11-09T21:13:29Z",
    "updated_at": "2025-01-14T13:18:32Z",
    "pushed_at": "2024-12-17T16:33:17Z",
    "size": 44116,
    "stars": 4739,
    "forks": 1377,
    "open_issues": 221,
    "watchers": 4739,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 1112522,
      "HTML": 91928,
      "JavaScript": 14409,
      "CSS": 11547,
      "Shell": 3075
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T15:14:27.090468"
  }
}