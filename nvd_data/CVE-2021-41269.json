{
  "cve_id": "CVE-2021-41269",
  "github_data": {
    "repository": "jmrozanec/cron-utils",
    "fix_commit": "cfd2880f80e62ea74b92fa83474c2aabdb9899da",
    "related_commits": [
      "cfd2880f80e62ea74b92fa83474c2aabdb9899da",
      "d6707503ec2f20947f79e38f861dba93b39df9da",
      "cfd2880f80e62ea74b92fa83474c2aabdb9899da",
      "d6707503ec2f20947f79e38f861dba93b39df9da"
    ],
    "patch_url": "https://github.com/jmrozanec/cron-utils/commit/cfd2880f80e62ea74b92fa83474c2aabdb9899da.patch",
    "fix_commit_details": {
      "sha": "cfd2880f80e62ea74b92fa83474c2aabdb9899da",
      "commit_date": "2021-10-30T13:12:11Z",
      "author": {
        "login": "jmrozanec",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #494 from NielsDoucet/RCE-fix",
        "length": 76,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 27,
        "additions": 18,
        "deletions": 9
      },
      "files": [
        {
          "filename": "src/main/java/com/cronutils/parser/CronParser.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -128,7 +128,7 @@ public Cron parse(final String expression) {\n                 }\n                 return new SingleCron(cronDefinition, results).validate();\n             } catch (final IllegalArgumentException e) {\n-                throw new IllegalArgumentException(String.format(\"Failed to parse '%s'. %s\", expression, e.getMessage()), e);\n+                throw new IllegalArgumentException(String.format(\"Failed to parse cron expression. %s\", e.getMessage()), e);\n             }\n         }\n     }"
        },
        {
          "filename": "src/test/java/com/cronutils/Issue418Test.java",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -5,6 +5,7 @@\n import com.cronutils.model.definition.CronDefinitionBuilder;\n import com.cronutils.model.time.ExecutionTime;\n import com.cronutils.parser.CronParser;\n+import org.hamcrest.core.StringEndsWith;\n import org.junit.Test;\n \n import java.time.LocalDate;\n@@ -13,8 +14,8 @@\n import java.time.ZonedDateTime;\n import java.util.Optional;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.hamcrest.core.StringEndsWith.endsWith;\n+import static org.junit.Assert.*;\n \n public class Issue418Test {\n \n@@ -59,7 +60,7 @@ public void testInvalidWeekDayStart() {\n             parser.parse(\"0 0 2 ? * 0/7 *\");\n             fail(\"Expected exception for invalid expression\");\n         } catch (IllegalArgumentException expected) {\n-            assertEquals(\"Failed to parse '0 0 2 ? * 0/7 *'. Value 0 not in range [1, 7]\", expected.getMessage());\n+            assertThat(expected.getMessage(), endsWith(\"Value 0 not in range [1, 7]\"));\n         }\n     }\n \n@@ -71,7 +72,7 @@ public void testInvalidWeekDayEnd() {\n             parser.parse(\"0 0 2 ? * 1/8 *\");\n             fail(\"Expected exception for invalid expression\");\n         } catch (IllegalArgumentException expected) {\n-            assertEquals(\"Failed to parse '0 0 2 ? * 1/8 *'. Period 8 not in range [1, 7]\", expected.getMessage());\n+            assertThat(expected.getMessage(), endsWith(\"Period 8 not in range [1, 7]\"));\n         }\n     }\n }"
        },
        {
          "filename": "src/test/java/com/cronutils/parser/CronParserQuartzIntegrationTest.java",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -20,16 +20,19 @@\n import com.cronutils.model.definition.CronDefinitionBuilder;\n import com.cronutils.model.field.expression.FieldExpressionFactory;\n import com.cronutils.model.time.ExecutionTime;\n+import org.hamcrest.core.StringEndsWith;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.internal.matchers.ThrowableMessageMatcher;\n import org.junit.rules.ExpectedException;\n \n import java.time.ZonedDateTime;\n import java.util.Locale;\n import java.util.Optional;\n \n import static org.junit.Assert.*;\n+import static org.junit.internal.matchers.ThrowableMessageMatcher.hasMessage;\n \n public class CronParserQuartzIntegrationTest {\n \n@@ -248,9 +251,7 @@ public void testReportedErrorContainsSameExpressionAsProvided() {\n     public void testMissingExpressionAndInvalidCharsInErrorMessage() {\n         thrown.expect(IllegalArgumentException.class);\n         final String cronexpression = \"* * -1 * * ?\";\n-        thrown.expectMessage(\n-                String.format(\"Failed to parse '%s'. Invalid expression! Expression: -1 does not describe a range. Negative numbers are not allowed.\",\n-                        cronexpression));\n+        thrown.expect(hasMessage(StringEndsWith.endsWith(\"Invalid expression! Expression: -1 does not describe a range. Negative numbers are not allowed.\")));\n         assertNotNull(ExecutionTime.forCron(parser.parse(cronexpression)));\n     }\n "
        },
        {
          "filename": "src/test/java/com/cronutils/validation/CronValidatorTest.java",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -4,6 +4,8 @@\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import javax.validation.ConstraintViolation;\n import javax.validation.Validation;\n@@ -16,6 +18,8 @@\n @RunWith(Parameterized.class)\n public class CronValidatorTest {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(CronValidatorTest.class);\n+\n     private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();\n \n     private final String expression;\n@@ -38,14 +42,17 @@ public static Object[] expressions() {\n                 {\"0 0 0 25 12 ?\", true},\n                 {\"0 0 0 L 12 ?\", false},\n                 {\"1,2, * * * * *\", false},\n-                {\"1- * * * * *\", false}\n+                {\"1- * * * * *\", false},\n+                // Verification for RCE security vulnerability fix: https://github.com/jmrozanec/cron-utils/issues/461\n+                {\"java.lang.Runtime.getRuntime().exec('touch /tmp/pwned'); // 4 5 [${''.getClass().forName('javax.script.ScriptEngineManager').newInstance().getEngineByName('js').eval(validatedValue)}]\", false}\n         };\n     }\n \n     @Test\n     public void validateExamples() {\n         TestPojo testPojo = new TestPojo(expression);\n         Set<ConstraintViolation<TestPojo>> violations = validator.validate(testPojo);\n+        violations.stream().map(ConstraintViolation::getMessage).forEach(LOGGER::info);\n \n         if (valid) {\n             assertTrue(violations.isEmpty());"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d31697ec4c30d4f43a1b528e5781d1d00ea1c967",
            "date": "2023-03-26T16:32:07Z",
            "author_login": "jmrozanec"
          },
          {
            "sha": "a3d31f7445376b19d1337c604d3d3b7e986302cc",
            "date": "2023-03-26T16:23:55Z",
            "author_login": "jmrozanec"
          },
          {
            "sha": "2633b8079febfe253b31e591e0cde17331cc3bdd",
            "date": "2023-03-26T16:20:26Z",
            "author_login": "jmrozanec"
          },
          {
            "sha": "f77e3f9b7cb7007d36fd3e2a5d3a541484c00349",
            "date": "2023-03-21T07:01:30Z",
            "author_login": "jmrozanec"
          },
          {
            "sha": "056ba137ce8da29fb186eb30a0cc3635cdc95175",
            "date": "2023-03-21T05:56:40Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 10.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "cron-utils is a Java library to define, parse, validate, migrate crons as well as get human readable descriptions for them. In affected versions A template Injection was identified in cron-utils enabling attackers to inject arbitrary Java EL expressions, leading to unauthenticated Remote Code Execution (RCE) vulnerability. Versions up to 9.1.2 are susceptible to this vulnerability. Please note, that only projects using the @Cron annotation to validate untrusted Cron expressions are affected. The issue was patched and a new version was released. Please upgrade to version 9.1.6. There are no known workarounds known.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-15T21:15:07.393",
    "last_modified": "2024-11-21T06:25:55.860",
    "fix_date": "2021-10-30T13:12:11Z"
  },
  "references": [
    {
      "url": "https://github.com/jmrozanec/cron-utils/commit/cfd2880f80e62ea74b92fa83474c2aabdb9899da",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jmrozanec/cron-utils/commit/d6707503ec2f20947f79e38f861dba93b39df9da",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jmrozanec/cron-utils/issues/461",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jmrozanec/cron-utils/security/advisories/GHSA-p9m8-27x8-rg87",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jmrozanec/cron-utils/commit/cfd2880f80e62ea74b92fa83474c2aabdb9899da",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jmrozanec/cron-utils/commit/d6707503ec2f20947f79e38f861dba93b39df9da",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jmrozanec/cron-utils/issues/461",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jmrozanec/cron-utils/security/advisories/GHSA-p9m8-27x8-rg87",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.790158",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cron-utils",
    "owner": "jmrozanec",
    "created_at": "2014-08-08T03:55:20Z",
    "updated_at": "2025-01-13T14:50:48Z",
    "pushed_at": "2024-07-23T08:48:20Z",
    "size": 2567,
    "stars": 1160,
    "forks": 265,
    "open_issues": 49,
    "watchers": 1160,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 869575
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:37:12.528798"
  }
}