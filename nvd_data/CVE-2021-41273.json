{
  "cve_id": "CVE-2021-41273",
  "github_data": {
    "repository": "pterodactyl/panel",
    "fix_commit": "bf9cbe2c6d5266c6914223e067c56175de7fc3a5",
    "related_commits": [
      "bf9cbe2c6d5266c6914223e067c56175de7fc3a5",
      "bf9cbe2c6d5266c6914223e067c56175de7fc3a5"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "bf9cbe2c6d5266c6914223e067c56175de7fc3a5",
      "commit_date": "2021-11-17T04:02:18Z",
      "author": {
        "login": "DaneEveritt",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add consistent CSRF token verification to API endpoints; address security concern with non-CSRF protected endpoints",
        "length": 115,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 73,
        "additions": 59,
        "deletions": 14
      },
      "files": [
        {
          "filename": "app/Http/Kernel.php",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -75,6 +75,7 @@ class Kernel extends HttpKernel\n             ApiSubstituteBindings::class,\n             'api..key:' . ApiKey::TYPE_APPLICATION,\n             AuthenticateApplicationUser::class,\n+            VerifyCsrfToken::class,\n             AuthenticateIPAccess::class,\n         ],\n         'client-api' => [\n@@ -85,6 +86,7 @@ class Kernel extends HttpKernel\n             SubstituteClientApiBindings::class,\n             'api..key:' . ApiKey::TYPE_ACCOUNT,\n             AuthenticateIPAccess::class,\n+            VerifyCsrfToken::class,\n             // This is perhaps a little backwards with the Client API, but logically you'd be unable\n             // to create/get an API key without first enabling 2FA on the account, so I suppose in the\n             // end it makes sense."
        },
        {
          "filename": "app/Http/Middleware/Api/AuthenticateKey.php",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -8,6 +8,7 @@\n use Pterodactyl\\Models\\User;\n use Pterodactyl\\Models\\ApiKey;\n use Illuminate\\Auth\\AuthManager;\n+use Illuminate\\Support\\Facades\\Session;\n use Illuminate\\Contracts\\Encryption\\Encrypter;\n use Symfony\\Component\\HttpKernel\\Exception\\HttpException;\n use Pterodactyl\\Exceptions\\Repository\\RecordNotFoundException;\n@@ -55,7 +56,7 @@ public function __construct(ApiKeyRepositoryInterface $repository, AuthManager $\n     public function handle(Request $request, Closure $next, int $keyType)\n     {\n         if (is_null($request->bearerToken()) && is_null($request->user())) {\n-            throw new HttpException(401, null, null, ['WWW-Authenticate' => 'Bearer']);\n+            throw new HttpException(401, 'A bearer token or valid user session cookie must be provided to access this endpoint.', null, ['WWW-Authenticate' => 'Bearer']);\n         }\n \n         // This is a request coming through using cookies, we have an authenticated user"
        },
        {
          "filename": "app/Http/Middleware/VerifyCsrfToken.php",
          "status": "modified",
          "additions": 34,
          "deletions": 7,
          "patch": "@@ -2,18 +2,45 @@\n \n namespace Pterodactyl\\Http\\Middleware;\n \n+use Closure;\n+use Pterodactyl\\Models\\ApiKey;\n use Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as BaseVerifier;\n \n class VerifyCsrfToken extends BaseVerifier\n {\n     /**\n-     * The URIs that should be excluded from CSRF verification.\n+     * The URIs that should be excluded from CSRF verification. These are\n+     * never hit by the front-end, and require specific token validation\n+     * to work.\n      *\n-     * @var array\n+     * @var string[]\n      */\n-    protected $except = [\n-        'remote/*',\n-        'daemon/*',\n-        'api/*',\n-    ];\n+    protected $except = ['remote/*', 'daemon/*'];\n+\n+    /**\n+     * Manually apply CSRF protection to routes depending on the authentication\n+     * mechanism being used. If the API request is using an API key that exists\n+     * in the database we can safely ignore CSRF protections, since that would be\n+     * a manually initiated request by a user or server.\n+     *\n+     * All other requests should go through the standard CSRF protections that\n+     * Laravel affords us. This code will be removed in v2 since we have switched\n+     * to using Sanctum for the API endpoints, which handles that for us automatically.\n+     *\n+     * @param \\Illuminate\\Http\\Request $request\n+     * @param \\Closure $next\n+     * @return mixed\n+     *\n+     * @throws \\Illuminate\\Session\\TokenMismatchException\n+     */\n+    public function handle($request, Closure $next)\n+    {\n+        $key = $request->attributes->get('api_key');\n+\n+        if ($key instanceof ApiKey && $key->exists) {\n+            return $next($request);\n+        }\n+\n+        return parent::handle($request, $next);\n+    }\n }"
        },
        {
          "filename": "resources/scripts/api/http.ts",
          "status": "modified",
          "additions": 12,
          "deletions": 1,
          "patch": "@@ -7,10 +7,21 @@ const http: AxiosInstance = axios.create({\n         'X-Requested-With': 'XMLHttpRequest',\n         Accept: 'application/json',\n         'Content-Type': 'application/json',\n-        'X-CSRF-Token': (window as any).X_CSRF_TOKEN as string || '',\n     },\n });\n \n+http.interceptors.request.use(req => {\n+    const cookies = document.cookie.split(';').reduce((obj, val) => {\n+        const [ key, value ] = val.trim().split('=').map(decodeURIComponent);\n+\n+        return { ...obj, [key]: value };\n+    }, {} as Record<string, string>);\n+\n+    req.headers['X-XSRF-TOKEN'] = cookies['XSRF-TOKEN'] || 'nil';\n+\n+    return req;\n+});\n+\n http.interceptors.request.use(req => {\n     if (!req.url?.endsWith('/resources') && (req.url?.indexOf('_debugbar') || -1) < 0) {\n         store.getActions().progress.startContinuous();"
        },
        {
          "filename": "resources/views/admin/nodes/view/configuration.blade.php",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -70,7 +70,11 @@\n     @parent\n     <script>\n     $('#configTokenBtn').on('click', function (event) {\n-        $.getJSON('{{ route('admin.nodes.view.configuration.token', $node->id) }}').done(function (data) {\n+        $.ajax({\n+            method: 'POST',\n+            url: '{{ route('admin.nodes.view.configuration.token', $node->id) }}',\n+            headers: { 'X-CSRF-TOKEN': '{{ csrf_token() }}' },\n+        }).done(function (data) {\n             swal({\n                 type: 'success',\n                 title: 'Token created.',"
        },
        {
          "filename": "resources/views/admin/settings/mail.blade.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -145,9 +145,9 @@ function testSettings() {\n                 showLoaderOnConfirm: true\n             }, function () {\n                 $.ajax({\n-                    method: 'GET',\n+                    method: 'POST',\n                     url: '/admin/settings/mail/test',\n-                    headers: { 'X-CSRF-Token': $('input[name=\"_token\"]').val() }\n+                    headers: { 'X-CSRF-TOKEN': $('input[name=\"_token\"]').val() }\n                 }).fail(function (jqXHR) {\n                     showErrorDialog(jqXHR, 'test');\n                 }).done(function () {"
        },
        {
          "filename": "routes/admin.php",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -66,8 +66,8 @@\n Route::group(['prefix' => 'settings'], function () {\n     Route::get('/', 'Settings\\IndexController@index')->name('admin.settings');\n     Route::get('/mail', 'Settings\\MailController@index')->name('admin.settings.mail');\n-    Route::get('/mail/test', 'Settings\\MailController@test')->name('admin.settings.mail.test');\n     Route::get('/advanced', 'Settings\\AdvancedController@index')->name('admin.settings.advanced');\n+    Route::post('/mail/test', 'Settings\\MailController@test')->name('admin.settings.mail.test');\n \n     Route::patch('/', 'Settings\\IndexController@update');\n     Route::patch('/mail', 'Settings\\MailController@update');\n@@ -153,12 +153,12 @@\n     Route::get('/view/{node}/allocation', 'Nodes\\NodeViewController@allocations')->name('admin.nodes.view.allocation');\n     Route::get('/view/{node}/servers', 'Nodes\\NodeViewController@servers')->name('admin.nodes.view.servers');\n     Route::get('/view/{node}/system-information', 'Nodes\\SystemInformationController');\n-    Route::get('/view/{node}/settings/token', 'NodeAutoDeployController')->name('admin.nodes.view.configuration.token');\n \n     Route::post('/new', 'NodesController@store');\n     Route::post('/view/{node}/allocation', 'NodesController@createAllocation');\n     Route::post('/view/{node}/allocation/remove', 'NodesController@allocationRemoveBlock')->name('admin.nodes.view.allocation.removeBlock');\n     Route::post('/view/{node}/allocation/alias', 'NodesController@allocationSetAlias')->name('admin.nodes.view.allocation.setAlias');\n+    Route::post('/view/{node}/settings/token', 'NodeAutoDeployController')->name('admin.nodes.view.configuration.token');\n \n     Route::patch('/view/{node}/settings', 'NodesController@updateSettings');\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 7,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9cac00cd550f407e06925562309705243f9c600e",
            "date": "2025-01-12T21:56:50Z",
            "author_login": "matthewpi"
          },
          {
            "sha": "90ae588721cb4658cce1cb22073adc6684bae492",
            "date": "2024-11-15T02:20:51Z",
            "author_login": "matthewpi"
          },
          {
            "sha": "955dd2796d1fee7dcd499b161f010c312c6d49d4",
            "date": "2024-11-15T02:03:51Z",
            "author_login": "matthewpi"
          },
          {
            "sha": "de3b1efb6991c9039d2e86bb395072ab5c30d90c",
            "date": "2024-10-27T19:50:37Z",
            "author_login": "matthewpi"
          },
          {
            "sha": "706db62c64d180f224f56c62953172c27daa5826",
            "date": "2024-10-24T18:04:30Z",
            "author_login": "matthewpi"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L",
    "cwe_id": "CWE-352",
    "description": "Pterodactyl is an open-source game server management panel built with PHP 7, React, and Go. Due to improperly configured CSRF protections on two routes, a malicious user could execute a CSRF-based attack against the following endpoints: Sending a test email and Generating a node auto-deployment token. At no point would any data be exposed to the malicious user, this would simply trigger email spam to an administrative user, or generate a single auto-deployment token unexpectedly. This token is not revealed to the malicious user, it is simply created unexpectedly in the system. This has been addressed in release `1.6.6`. Users may optionally manually apply the fixes released in v1.6.6 to patch their own systems.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-17T20:15:10.400",
    "last_modified": "2024-11-21T06:25:56.407",
    "fix_date": "2021-11-17T04:02:18Z"
  },
  "references": [
    {
      "url": "https://github.com/pterodactyl/panel/commit/bf9cbe2c6d5266c6914223e067c56175de7fc3a5",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pterodactyl/panel/security/advisories/GHSA-wwgq-9jhf-qgw6",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pterodactyl/panel/commit/bf9cbe2c6d5266c6914223e067c56175de7fc3a5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pterodactyl/panel/security/advisories/GHSA-wwgq-9jhf-qgw6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.794103",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "panel",
    "owner": "pterodactyl",
    "created_at": "2015-12-06T18:37:08Z",
    "updated_at": "2025-01-26T03:28:36Z",
    "pushed_at": "2025-01-12T22:03:33Z",
    "size": 27615,
    "stars": 7079,
    "forks": 1835,
    "open_issues": 351,
    "watchers": 7079,
    "has_security_policy": false,
    "default_branch": "1.0-develop",
    "protected_branches": [
      "0.7-develop",
      "1.0-develop",
      "develop"
    ],
    "languages": {
      "PHP": 1658453,
      "TypeScript": 558694,
      "Blade": 313257,
      "CSS": 33788,
      "JavaScript": 28750,
      "Nix": 3938,
      "Dockerfile": 2022
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T08:15:43.505762"
  }
}