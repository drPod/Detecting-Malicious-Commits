{
  "cve_id": "CVE-2021-41275",
  "github_data": {
    "repository": "spree/spree_auth_devise",
    "fix_commit": "adf6ed4cd94d66091776b5febd4ff3767362de63",
    "related_commits": [
      "adf6ed4cd94d66091776b5febd4ff3767362de63",
      "adf6ed4cd94d66091776b5febd4ff3767362de63"
    ],
    "patch_url": "https://github.com/spree/spree_auth_devise/commit/adf6ed4cd94d66091776b5febd4ff3767362de63.patch",
    "fix_commit_details": {
      "sha": "adf6ed4cd94d66091776b5febd4ff3767362de63",
      "commit_date": "2021-11-17T11:29:01Z",
      "author": {
        "login": "damianlegawiec",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[PATCH] Fix account takeover through CSRF attack",
        "length": 1508,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 49,
        "additions": 48,
        "deletions": 1
      },
      "files": [
        {
          "filename": "lib/controllers/frontend/spree/users_controller.rb",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -1,14 +1,18 @@\n class Spree::UsersController < Spree::StoreController\n   before_action :set_current_order, except: :show\n-  prepend_before_action :load_object, only: [:show, :edit, :update]\n   prepend_before_action :authorize_actions, only: :new\n \n   include Spree::Core::ControllerHelpers\n \n   def show\n+    load_object\n     @orders = @user.orders.for_store(current_store).complete.order('completed_at desc')\n   end\n \n+  def edit\n+    load_object\n+  end\n+\n   def create\n     @user = Spree.user_class.new(user_params)\n     if @user.save\n@@ -24,6 +28,7 @@ def create\n   end\n \n   def update\n+    load_object\n     if @user.update(user_params)\n       if params[:user][:password].present?\n         # this logic needed b/c devise wants to log us out after password changes"
        },
        {
          "filename": "spec/requests/spree/frontend/user_update_spec.rb",
          "status": "added",
          "additions": 42,
          "deletions": 0,
          "patch": "@@ -0,0 +1,42 @@\n+# frozen_string_literal: true\n+\n+RSpec.feature 'User update', type: :request do\n+  context 'CSRF protection' do\n+    %i[exception reset_session null_session].each do |strategy|\n+      # Completely clean the configuration of forgery protection for the\n+      # controller and reset it after the expectations. However, besides `:with`,\n+      # the options given to `protect_from_forgery` are processed on the fly.\n+      # I.e., there's no way to retain them. The initial setup corresponds to the\n+      # dummy application, which uses the default Rails skeleton in that regard.\n+      # So, if at some point Rails changed the given options, we should update it\n+      # here.\n+      around do |example|\n+        controller = Spree::UsersController\n+        old_allow_forgery_protection_value = controller.allow_forgery_protection\n+        old_forgery_protection_strategy = controller.forgery_protection_strategy\n+        controller.skip_forgery_protection\n+        controller.allow_forgery_protection = true\n+        controller.protect_from_forgery with: strategy\n+\n+        example.run\n+\n+        controller.allow_forgery_protection = old_allow_forgery_protection_value\n+        controller.forgery_protection_strategy = old_forgery_protection_strategy\n+      end\n+\n+      it \"is not possible to take account over with the #{strategy} forgery protection strategy\" do\n+        user = create(:user, email: 'legit@mail.com', password: 'password')\n+\n+        post '/login', params: \"spree_user[email]=legit@mail.com&spree_user[password]=password\"\n+        begin\n+          put '/users/123456', params: 'user[email]=hacked@example.com'\n+        rescue\n+          # testing that the account is not compromised regardless of any raised\n+          # exception\n+        end\n+\n+        expect(user.reload.email).to eq('legit@mail.com')\n+      end\n+    end\n+  end\n+end"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c493a6e428a9c621bef99c7711f607d605dd5cae",
            "date": "2024-06-12T13:24:06Z",
            "author_login": "damianlegawiec"
          },
          {
            "sha": "f3066b767d38c14d5c73fa9e0d1388ed89d41696",
            "date": "2024-06-12T13:22:51Z",
            "author_login": "henrikbjorn"
          },
          {
            "sha": "2dcc5280cf1bcba4d3b08574f1651d18c58026ca",
            "date": "2024-05-22T14:07:20Z",
            "author_login": "damianlegawiec"
          },
          {
            "sha": "167f2892a0b57aaafccc931ba31d55735bd7e0e9",
            "date": "2024-04-23T10:34:16Z",
            "author_login": "damianlegawiec"
          },
          {
            "sha": "f5af568f2edaf65daaefef2888ca770170fdee09",
            "date": "2024-04-23T10:28:08Z",
            "author_login": "damianlegawiec"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N",
    "cwe_id": "CWE-352",
    "description": "spree_auth_devise is an open source library which provides authentication and authorization services for use with the Spree storefront framework by using an underlying Devise authentication framework. In affected versions spree_auth_devise is subject to a CSRF vulnerability that allows user account takeover. All applications using any version of the frontend component of spree_auth_devise are affected if protect_from_forgery method is both: Executed whether as: A before_action callback (the default). A prepend_before_action (option prepend: true given) before the :load_object hook in Spree::UserController (most likely order to find). Configured to use :null_session or :reset_session strategies (:null_session is the default in case the no strategy is given, but rails --new generated skeleton use :exception). Users are advised to update their spree_auth_devise gem. For users unable to update it may be possible to change your strategy to :exception. Please see the linked GHSA for more workaround details. ### Impact CSRF vulnerability that allows user account takeover. All applications using any version of the frontend component of `spree_auth_devise` are affected if `protect_from_forgery` method is both: * Executed whether as: * A before_action callback (the default) * A prepend_before_action (option prepend: true given) before the :load_object hook in Spree::UserController (most likely order to find). * Configured to use :null_session or :reset_session strategies (:null_session is the default in case the no strategy is given, but rails --new generated skeleton use :exception). That means that applications that haven't been configured differently from what it's generated with Rails aren't affected. Thanks @waiting-for-dev for reporting and providing a patch \ufffd\ufffd ### Patches Spree 4.3 users should update to spree_auth_devise 4.4.1 Spree 4.2 users should update to spree_auth_devise 4.2.1 ### Workarounds If possible, change your strategy to :exception: ```ruby class ApplicationController < ActionController::Base protect_from_forgery with: :exception end ``` Add the following to`config/application.rb `to at least run the `:exception` strategy on the affected controller: ```ruby config.after_initialize do Spree::UsersController.protect_from_forgery with: :exception end ``` ### References https://github.com/solidusio/solidus_auth_devise/security/advisories/GHSA-xm34-v85h-9pg2",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-17T20:15:10.527",
    "last_modified": "2024-11-21T06:25:56.670",
    "fix_date": "2021-11-17T11:29:01Z"
  },
  "references": [
    {
      "url": "https://github.com/spree/spree_auth_devise/commit/adf6ed4cd94d66091776b5febd4ff3767362de63",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/spree/spree_auth_devise/security/advisories/GHSA-26xx-m4q2-xhq8",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/spree/spree_auth_devise/commit/adf6ed4cd94d66091776b5febd4ff3767362de63",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/spree/spree_auth_devise/security/advisories/GHSA-26xx-m4q2-xhq8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.794367",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "spree_auth_devise",
    "owner": "spree",
    "created_at": "2012-05-20T23:57:25Z",
    "updated_at": "2025-01-07T19:28:44Z",
    "pushed_at": "2024-07-21T04:27:18Z",
    "size": 1563,
    "stars": 140,
    "forks": 495,
    "open_issues": 46,
    "watchers": 140,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 118479,
      "HTML": 11897
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T15:56:10.205802"
  }
}