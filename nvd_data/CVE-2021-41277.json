{
  "cve_id": "CVE-2021-41277",
  "github_data": {
    "repository": "metabase/metabase",
    "fix_commit": "042a36e49574c749f944e19cf80360fd3dc322f0",
    "related_commits": [
      "042a36e49574c749f944e19cf80360fd3dc322f0",
      "042a36e49574c749f944e19cf80360fd3dc322f0"
    ],
    "patch_url": "https://github.com/metabase/metabase/commit/042a36e49574c749f944e19cf80360fd3dc322f0.patch",
    "fix_commit_details": {
      "sha": "042a36e49574c749f944e19cf80360fd3dc322f0",
      "commit_date": "2021-09-21T18:14:03Z",
      "author": {
        "login": "noahmoss",
        "type": "User",
        "stats": {
          "total_commits": 480,
          "average_weekly_commits": 0.9230769230769231,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 161
        }
      },
      "commit_message": {
        "title": "GeoJSON URL validation fix (#17990)",
        "length": 35,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 35,
        "additions": 23,
        "deletions": 12
      },
      "files": [
        {
          "filename": "src/metabase/api/geojson.clj",
          "status": "modified",
          "additions": 10,
          "deletions": 7,
          "patch": "@@ -58,11 +58,13 @@\n       (throw (ex-info (invalid-location-msg) {:status-code 400, :url url-string} e)))))\n \n (defn- valid-geojson-url?\n+  [url]\n+  (or (io/resource url)\n+      (valid-url? url)))\n+\n+(defn- valid-geojson-urls?\n   [geojson]\n-  (every? (fn [[_ {:keys [url]}]]\n-            (or\n-             (io/resource url)\n-             (valid-url? url)))\n+  (every? (fn [[_ {:keys [url]}]] (valid-geojson-url? url))\n           geojson))\n \n (defn- validate-geojson\n@@ -72,7 +74,7 @@\n     (s/validate CustomGeoJSON geojson)\n     (catch Throwable e\n       (throw (ex-info (tru \"Invalid custom GeoJSON\") {:status-code 400} e))))\n-  (or (valid-geojson-url? geojson)\n+  (or (valid-geojson-urls? geojson)\n       (throw (ex-info (invalid-location-msg) {:status-code 400}))))\n \n (defsetting custom-geojson\n@@ -107,9 +109,10 @@\n   This behaves similarly to /api/geojson/:key but doesn't require the custom map to be saved to the DB first.\"\n   [{{:keys [url]} :params} respond raise]\n   {url su/NonBlankString}\n+  (api/check-superuser)\n   (let [decoded-url (rc/url-decode url)]\n-    (or (io/resource decoded-url)\n-        (valid-url? decoded-url))\n+    (when-not (valid-geojson-url? decoded-url)\n+      (raise (ex-info (invalid-location-msg) {:status-code 400})))\n     (try\n       (with-open [reader (io/reader (or (io/resource decoded-url)\n                                         decoded-url))"
        },
        {
          "filename": "test/metabase/api/geojson_test.clj",
          "status": "modified",
          "additions": 13,
          "deletions": 5,
          "patch": "@@ -100,10 +100,18 @@\n     (testing \"test the endpoint that fetches JSON files given a URL\"\n       (is (= {:type        \"Point\"\n               :coordinates [37.77986 -122.429]}\n-             ((mt/user->client :rasta) :get 200 \"geojson\" :url test-geojson-url))))\n+             ((mt/user->client :crowberto) :get 200 \"geojson\" :url test-geojson-url))))\n     (testing \"error is returned if URL connection fails\"\n       (is (= \"GeoJSON URL failed to load\"\n-             ((mt/user->client :rasta) :get 400 \"geojson\" :url test-broken-geojson-url))))))\n+             ((mt/user->client :crowberto) :get 400 \"geojson\" :url test-broken-geojson-url))))\n+    (testing \"error is returned if URL is invalid\"\n+      (is (= (str \"Invalid GeoJSON file location: must either start with http:// or https:// or be a relative path to \"\n+                  \"a file on the classpath. URLs referring to hosts that supply internal hosting metadata are \"\n+                  \"prohibited.\")\n+             ((mt/user->client :crowberto) :get 400 \"geojson\" :url \"file://tmp\"))))\n+    (testing \"cannot be called by non-admins\"\n+      (is (= \"You don't have permissions to do that.\"\n+             ((mt/user->client :rasta) :get 403 \"geojson\" :url test-geojson-url))))))\n \n (deftest key-proxy-endpoint-test\n   (testing \"GET /api/geojson/:key\"\n@@ -120,9 +128,9 @@\n         (is (= {:type        \"Point\"\n                 :coordinates [37.77986 -122.429]}\n                (client/client :get 200 \"geojson/middle-earth\"))))\n-        (testing \"try fetching an invalid key; should fail\"\n-          (is (= \"Invalid custom GeoJSON key: invalid-key\"\n-                 ((mt/user->client :rasta) :get 400 \"geojson/invalid-key\")))))\n+      (testing \"try fetching an invalid key; should fail\"\n+        (is (= \"Invalid custom GeoJSON key: invalid-key\"\n+               ((mt/user->client :rasta) :get 400 \"geojson/invalid-key\")))))\n     (mt/with-temporary-setting-values [custom-geojson test-broken-custom-geojson]\n       (testing \"fetching a broken URL should fail\"\n         (is (= \"GeoJSON URL failed to load\""
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "199d4c25571e5f0b67e30cb538b1c806e94b860b",
            "date": "2025-01-14T15:32:07Z",
            "author_login": "lbrdnk"
          },
          {
            "sha": "bdfa366fe5770e5d8a142b6c9c13e5e16cb553b4",
            "date": "2025-01-14T15:27:00Z",
            "author_login": "crisptrutski"
          },
          {
            "sha": "ad00b9478b6f8bb670017b03c12dcddba5f11781",
            "date": "2025-01-14T15:19:14Z",
            "author_login": "piranha"
          },
          {
            "sha": "19eaa8bf780d447787d4b938cd00364c1869857d",
            "date": "2025-01-14T14:11:36Z",
            "author_login": "alxnddr"
          },
          {
            "sha": "9586bca50a232c33db2edeb52d8a3ea90b6d259a",
            "date": "2025-01-14T14:07:04Z",
            "author_login": "sanex3339"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 10.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:L",
    "cwe_id": "CWE-200",
    "description": "Metabase is an open source data analytics platform. In affected versions a security issue has been discovered with the custom GeoJSON map (`admin->settings->maps->custom maps->add a map`) support and potential local file inclusion (including environment variables). URLs were not validated prior to being loaded. This issue is fixed in a new maintenance release (0.40.5 and 1.40.5), and any subsequent release after that. If you\u2019re unable to upgrade immediately, you can mitigate this by including rules in your reverse proxy or load balancer or WAF to provide a validation filter before the application.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-11-17T20:15:10.587",
    "last_modified": "2024-11-21T06:25:56.970",
    "fix_date": "2021-09-21T18:14:03Z"
  },
  "references": [
    {
      "url": "https://github.com/metabase/metabase/commit/042a36e49574c749f944e19cf80360fd3dc322f0",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/metabase/metabase/security/advisories/GHSA-w73v-6p7p-fpfr",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/metabase/metabase/commit/042a36e49574c749f944e19cf80360fd3dc322f0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/metabase/metabase/security/advisories/GHSA-w73v-6p7p-fpfr",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.794525",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "metabase",
    "owner": "metabase",
    "created_at": "2015-02-02T19:25:47Z",
    "updated_at": "2025-01-14T12:20:54Z",
    "pushed_at": "2025-01-14T13:18:45Z",
    "size": 777657,
    "stars": 39367,
    "forks": 5236,
    "open_issues": 4325,
    "watchers": 39367,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Clojure": 20744855,
      "TypeScript": 13846494,
      "JavaScript": 6474139,
      "CSS": 153621,
      "MDX": 54241,
      "Handlebars": 31849,
      "Shell": 26088,
      "Emacs Lisp": 5571,
      "HTML": 5501,
      "Dockerfile": 4301,
      "Mustache": 1273
    },
    "commit_activity": {
      "total_commits_last_year": 5183,
      "avg_commits_per_week": 99.67307692307692,
      "days_active_last_year": 290
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:22:24.052195"
  }
}