{
  "cve_id": "CVE-2021-4139",
  "github_data": {
    "repository": "pimcore/pimcore",
    "fix_commit": "d5c3e876d910784000335061c3bd24d301351245",
    "related_commits": [
      "d5c3e876d910784000335061c3bd24d301351245",
      "d5c3e876d910784000335061c3bd24d301351245"
    ],
    "patch_url": "https://github.com/pimcore/pimcore/commit/d5c3e876d910784000335061c3bd24d301351245.patch",
    "fix_commit_details": {
      "sha": "d5c3e876d910784000335061c3bd24d301351245",
      "commit_date": "2021-12-20T12:50:00Z",
      "author": {
        "login": "dvesh3",
        "type": "User",
        "stats": {
          "total_commits": 1771,
          "average_weekly_commits": 3.520874751491054,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 254
        }
      },
      "commit_message": {
        "title": "[Classification Store] Properly escape values on grids & titles",
        "length": 63,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 51,
        "additions": 31,
        "deletions": 20
      },
      "files": [
        {
          "filename": "bundles/AdminBundle/Controller/Admin/DataObject/ClassificationstoreController.php",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1476,19 +1476,19 @@ public function storetreeAction(Request $request)\n         foreach ($list as $item) {\n             $resultItem = [\n                 'id' => $item->getId(),\n-                'text' => $item->getName(),\n+                'text' => htmlspecialchars($item->getName(), ENT_QUOTES),\n                 'expandable' => false,\n                 'leaf' => true,\n                 'expanded' => true,\n-                'description' => $item->getDescription(),\n+                'description' => htmlspecialchars($item->getDescription(), ENT_QUOTES),\n                 'iconCls' => 'pimcore_icon_classificationstore',\n             ];\n \n             $resultItem['qtitle'] = 'ID: ' . $item->getId();\n \n             if ($item->getDescription()) {\n             }\n-            $resultItem['qtip'] = $item->getDescription() ? $item->getDescription() : ' ';\n+            $resultItem['qtip'] = $item->getDescription() ? htmlspecialchars($item->getDescription(), ENT_QUOTES) : ' ';\n             $result[] = $resultItem;\n         }\n "
        },
        {
          "filename": "bundles/AdminBundle/Resources/public/js/pimcore/helpers/generic-grid.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -138,5 +138,5 @@ pimcore.helpers.grid.buildDefaultPagingToolbar = function (store, options) {\n };\n \n pimcore.helpers.grid.getTranslationColumnRenderer = function (value, metaData, record, rowIndex, colIndex, store) {\n-    return t(value);\n+    return Ext.util.Format.htmlEncode(t(value));\n };"
        },
        {
          "filename": "bundles/AdminBundle/Resources/public/js/pimcore/object/classificationstore/collectionsPanel.js",
          "status": "modified",
          "additions": 9,
          "deletions": 5,
          "patch": "@@ -116,8 +116,10 @@ pimcore.object.classificationstore.collectionsPanel = Class.create({\n         });\n \n         gridColumns.push({text: t(\"group_id\"), flex: 60, sortable: true, dataIndex: 'groupId', filter: 'string'});\n-        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'groupName', filter: 'string'});\n-        gridColumns.push({text: t(\"description\"), flex: 200, sortable: true, dataIndex: 'groupDescription', filter: 'string'});\n+        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'groupName', filter: 'string',\n+            renderer: Ext.util.Format.htmlEncode});\n+        gridColumns.push({text: t(\"description\"), flex: 200, sortable: true, dataIndex: 'groupDescription', filter: 'string',\n+            renderer: Ext.util.Format.htmlEncode});\n \n         gridColumns.push({text: t('sorter'), width: 150, sortable: true, dataIndex: 'sorter',\n             tooltip: t(\"classificationstore_tooltip_sorter\"),\n@@ -264,8 +266,10 @@ pimcore.object.classificationstore.collectionsPanel = Class.create({\n \n         //gridColumns.push({text: t(\"store\"), flex: 60, sortable: true, dataIndex: 'storeId', filter: 'string'});\n         gridColumns.push({text: \"ID\", flex: 60, sortable: true, dataIndex: 'id', filter: 'string'});\n-        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'name', editor: new Ext.form.TextField({}), filter: 'string'});\n-        gridColumns.push({text: t(\"description\"), flex: 300, sortable: true, dataIndex: 'description', editor: new Ext.form.TextField({}), filter: 'string'});\n+        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'name', editor: new Ext.form.TextField({}), filter: 'string',\n+            renderer: Ext.util.Format.htmlEncode});\n+        gridColumns.push({text: t(\"description\"), flex: 300, sortable: true, dataIndex: 'description', editor: new Ext.form.TextField({}), filter: 'string',\n+            renderer: Ext.util.Format.htmlEncode});\n \n         var dateRenderer =  function(d) {\n             if (d !== undefined) {\n@@ -359,7 +363,7 @@ pimcore.object.classificationstore.collectionsPanel = Class.create({\n                     if (selected.length > 0) {\n                         var record = selected[0];\n                         var collectionId = record.data.id;\n-                        var collectionName = record.data.name;\n+                        var collectionName = Ext.util.Format.htmlEncode(record.data.name);\n \n                         this.collectionId = collectionId;\n "
        },
        {
          "filename": "bundles/AdminBundle/Resources/public/js/pimcore/object/classificationstore/groupsPanel.js",
          "status": "modified",
          "additions": 9,
          "deletions": 5,
          "patch": "@@ -119,8 +119,10 @@ pimcore.object.classificationstore.groupsPanel = Class.create({\n \n \n         gridColumns.push({text: t(\"key_id\"), flex: 60, sortable: true, dataIndex: 'keyId', filter: 'string'});\n-        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'keyName', filter: 'string'});\n-        gridColumns.push({text: t(\"description\"), flex: 200, sortable: true, dataIndex: 'keyDescription', filter: 'string'});\n+        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'keyName', filter: 'string',\n+            renderer: Ext.util.Format.htmlEncode});\n+        gridColumns.push({text: t(\"description\"), flex: 200, sortable: true, dataIndex: 'keyDescription', filter: 'string',\n+            renderer: Ext.util.Format.htmlEncode});\n \n         gridColumns.push(mandatoryCheck);\n         gridColumns.push({text: t('sorter'), width: 150, sortable: true, dataIndex: 'sorter',\n@@ -269,8 +271,10 @@ pimcore.object.classificationstore.groupsPanel = Class.create({\n         //gridColumns.push({text: t(\"store\"), width: 60, sortable: true, dataIndex: 'storeId', filter: 'string'});\n         gridColumns.push({text: \"ID\", width: 60, sortable: true, dataIndex: 'id', filter: 'string'});\n         gridColumns.push({text: t(\"parent_id\"), width: 160, sortable: true, dataIndex: 'parentId', hidden: true, editor: new Ext.form.TextField({})});\n-        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'name', editor: new Ext.form.TextField({}), filter: 'string'});\n-        gridColumns.push({text: t(\"description\"), flex: 300, sortable: true, dataIndex: 'description', editor: new Ext.form.TextField({}), filter: 'string'});\n+        gridColumns.push({text: t(\"name\"), flex: 200, sortable: true, dataIndex: 'name', editor: new Ext.form.TextField({}), filter: 'string',\n+            renderer: Ext.util.Format.htmlEncode});\n+        gridColumns.push({text: t(\"description\"), flex: 300, sortable: true, dataIndex: 'description', editor: new Ext.form.TextField({}), filter: 'string',\n+            renderer: Ext.util.Format.htmlEncode});\n \n         var dateRenderer =  function(d) {\n             if (d !== undefined) {\n@@ -365,7 +369,7 @@ pimcore.object.classificationstore.groupsPanel = Class.create({\n                     if (selected.length > 0) {\n                         var record = selected[0];\n                         var groupId = record.data.id;\n-                        var groupName = record.data.name;\n+                        var groupName = Ext.util.Format.htmlEncode(record.data.name);\n \n                         this.groupId = groupId;\n "
        },
        {
          "filename": "bundles/AdminBundle/Resources/public/js/pimcore/object/classificationstore/propertiesPanel.js",
          "status": "modified",
          "additions": 7,
          "deletions": 4,
          "patch": "@@ -125,13 +125,16 @@ pimcore.object.classificationstore.propertiespanel = Class.create({\n                 sortable: true,\n                 dataIndex: 'name',\n                 filter: 'string',\n-                editor: new Ext.form.TextField({})\n+                editor: new Ext.form.TextField({}),\n+                renderer: Ext.util.Format.htmlEncode\n             }\n \n         );\n \n-        gridColumns.push({text: t(\"title\"), width: 200, sortable: false, dataIndex: 'title',editor: new Ext.form.TextField({}), filter: 'string'});\n-        gridColumns.push({text: t(\"description\"), width: 300, sortable: true, dataIndex: 'description',editor: new Ext.form.TextField({}), filter: 'string'});\n+        gridColumns.push({text: t(\"title\"), width: 200, sortable: false, dataIndex: 'title',editor: new Ext.form.TextField({}), filter: 'string',\n+            renderer: Ext.util.Format.htmlEncode});\n+        gridColumns.push({text: t(\"description\"), width: 300, sortable: true, dataIndex: 'description',editor: new Ext.form.TextField({}), filter: 'string',\n+            renderer: Ext.util.Format.htmlEncode});\n         gridColumns.push({text: t(\"definition\"), width: 300, sortable: true, hidden: true, dataIndex: 'definition',editor: new Ext.form.TextField({})});\n         gridColumns.push({text: t(\"type\"), width: 150, sortable: true, dataIndex: 'type', filter: 'string',\n             editor: new Ext.form.ComboBox({\n@@ -285,7 +288,7 @@ pimcore.object.classificationstore.propertiespanel = Class.create({\n         var definition = data.data.definition;\n         if (definition) {\n             definition = Ext.util.JSON.decode(definition);\n-            definition.name = data.data.name;\n+            definition.name = Ext.util.Format.htmlEncode(data.data.name);\n         } else {\n             definition = {\n                 name: data.data.name"
        },
        {
          "filename": "bundles/AdminBundle/Resources/public/js/pimcore/object/classificationstore/storeTree.js",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -166,8 +166,8 @@ pimcore.object.classificationstore.storeTree = Class.create({\n                 \"click\": function() {\n                     var data = {\n                         id: record.data.id,\n-                        name: record.data.text,\n-                        description: record.data.description\n+                        name: Ext.util.Format.htmlDecode(record.data.text),\n+                        description: Ext.util.Format.htmlDecode(record.data.description)\n                     }\n                     var panel = new pimcore.object.classificationstore.storeConfiguration(data, this.applyConfig.bind(this));\n                     panel.show();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a3c7544d81bc772dc53f7ea0e99c6eac37c59114",
            "date": "2025-01-14T13:54:55Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "081e73f14983613ed43e6ea9e40450063392b289",
            "date": "2025-01-14T13:53:00Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "bf1081a2c9a7de74ca965aa802ea07ac4e022b28",
            "date": "2025-01-14T13:52:39Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "7a232e673e963325610264dc760d8d0dbdd7a0d1",
            "date": "2025-01-14T13:52:17Z",
            "author_login": "herbertroth"
          },
          {
            "sha": "cf380cd040bdbb134e62dd1fa9cb3954def8a595",
            "date": "2025-01-14T13:50:40Z",
            "author_login": "herbertroth"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-79",
    "description": "pimcore is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-12-21T13:15:07.340",
    "last_modified": "2024-11-21T06:36:59.190",
    "fix_date": "2021-12-20T12:50:00Z"
  },
  "references": [
    {
      "url": "https://github.com/pimcore/pimcore/commit/d5c3e876d910784000335061c3bd24d301351245",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/6ec59e43-095f-4ba3-8b75-e92250da8e3a",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/pimcore/pimcore/commit/d5c3e876d910784000335061c3bd24d301351245",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/6ec59e43-095f-4ba3-8b75-e92250da8e3a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.013414",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pimcore",
    "owner": "pimcore",
    "created_at": "2011-11-01T09:16:14Z",
    "updated_at": "2025-01-14T09:15:55Z",
    "pushed_at": "2025-01-13T14:41:25Z",
    "size": 524212,
    "stars": 3455,
    "forks": 1448,
    "open_issues": 480,
    "watchers": 3455,
    "has_security_policy": false,
    "default_branch": "11.x",
    "protected_branches": [
      "11.x",
      "11.5"
    ],
    "languages": {
      "PHP": 6722485,
      "JavaScript": 330727,
      "Twig": 9213,
      "CSS": 2342,
      "HTML": 687,
      "Shell": 538
    },
    "commit_activity": {
      "total_commits_last_year": 619,
      "avg_commits_per_week": 11.903846153846153,
      "days_active_last_year": 182
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:01:17.566039"
  }
}