{
  "cve_id": "CVE-2021-41580",
  "github_data": {
    "repository": "jaredhanson/passport-oauth2",
    "fix_commit": "8e3bcdff145a2219033bd782fc517229fe3e05ea",
    "related_commits": [
      "8e3bcdff145a2219033bd782fc517229fe3e05ea",
      "8e3bcdff145a2219033bd782fc517229fe3e05ea"
    ],
    "patch_url": "https://github.com/jaredhanson/passport-oauth2/commit/8e3bcdff145a2219033bd782fc517229fe3e05ea.patch",
    "fix_commit_details": {
      "sha": "8e3bcdff145a2219033bd782fc517229fe3e05ea",
      "commit_date": "2021-09-24T21:26:10Z",
      "author": {
        "login": "jaredhanson",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Add test case and avoid parsing internal OAuth error when it doesn't exist.",
        "length": 75,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 42,
        "additions": 41,
        "deletions": 1
      },
      "files": [
        {
          "filename": "lib/strategy.js",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -174,7 +174,8 @@ OAuth2Strategy.prototype.authenticate = function(req, options) {\n \n       self._oauth2.getOAuthAccessToken(code, params,\n         function(err, accessToken, refreshToken, params) {\n-          if (err || !accessToken) { return self.error(self._createOAuthError('Failed to obtain access token', err)); }\n+          if (err) { return self.error(self._createOAuthError('Failed to obtain access token', err)); }\n+          if (!accessToken) { return self.error(new Error('Failed to obtain access token')); }\n \n           self._loadUserProfile(accessToken, function(err, profile) {\n             if (err) { return self.error(err); }"
        },
        {
          "filename": "test/oauth2.test.js",
          "status": "modified",
          "additions": 39,
          "deletions": 0,
          "patch": "@@ -1256,6 +1256,45 @@ describe('OAuth2Strategy', function() {\n       });\n     }); // that errors due to token request error, in node-oauth object literal form with text body\n     \n+    describe('that errors due to not receiving an access token', function() {\n+      var strategy = new OAuth2Strategy({\n+        authorizationURL: 'https://www.example.com/oauth2/authorize',\n+        tokenURL: 'https://www.example.com/oauth2/token',\n+        clientID: 'ABC123',\n+        clientSecret: 'secret',\n+        callbackURL: 'https://www.example.net/auth/example/callback',\n+      },\n+      function(accessToken, refreshToken, params, profile, done) {\n+        return done(new Error('something went wrong'));\n+      });\n+  \n+      strategy._oauth2.getOAuthAccessToken = function(code, options, callback) {\n+        return callback(null, undefined, undefined, undefined);\n+      }\n+  \n+  \n+      var err;\n+  \n+      before(function(done) {\n+        chai.passport.use(strategy)\n+          .error(function(e) {\n+            err = e;\n+            done();\n+          })\n+          .req(function(req) {\n+            req.query = {};\n+            req.query.code = 'SplxlOBeZQQYbYS6WxSbIA';\n+          })\n+          .authenticate();\n+      });\n+\n+      it('should error', function() {\n+        expect(err).to.be.an.instanceof(Error);\n+        expect(err).to.not.be.an.instanceof(InternalOAuthError)\n+        expect(err.message).to.equal('Failed to obtain access token');\n+      });\n+    }); // that errors due to not receiving an access token\n+    \n     describe('that errors due to verify callback supplying error', function() {\n       var strategy = new OAuth2Strategy({\n         authorizationURL: 'https://www.example.com/oauth2/authorize',"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "be9bf58cee75938c645a9609f0cc87c4c724e7c8",
            "date": "2024-02-02T23:10:36Z",
            "author_login": "jaredhanson"
          },
          {
            "sha": "ccb45ac3d1d84e851f36315d465cdce43525d26c",
            "date": "2024-02-02T23:08:40Z",
            "author_login": "jaredhanson"
          },
          {
            "sha": "ff637ae79256c247e2b493e723af1f8dbea71df8",
            "date": "2024-02-02T23:07:31Z",
            "author_login": "jaredhanson"
          },
          {
            "sha": "cff8b199670e3c6e2ef14166433cd02f71937031",
            "date": "2024-02-02T22:54:24Z",
            "author_login": "jaredhanson"
          },
          {
            "sha": "ea9e99adda82dff67502654347589866fea80eb2",
            "date": "2023-03-02T22:41:12Z",
            "author_login": "jaredhanson"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": null,
    "description": "The passport-oauth2 package before 1.6.1 for Node.js mishandles the error condition of failure to obtain an access token. This is exploitable in certain use cases where an OAuth identity provider uses an HTTP 200 status code for authentication-failure error reports, and an application grants authorization upon simply receiving the access token (i.e., does not try to use the token). NOTE: the passport-oauth2 vendor does not consider this a passport-oauth2 vulnerability",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-09-27T07:15:06.803",
    "last_modified": "2024-11-21T06:26:27.813",
    "fix_date": "2021-09-24T21:26:10Z"
  },
  "references": [
    {
      "url": "https://github.com/jaredhanson/passport-oauth2/commit/8e3bcdff145a2219033bd782fc517229fe3e05ea",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jaredhanson/passport-oauth2/compare/v1.6.0...v1.6.1",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jaredhanson/passport-oauth2/pull/144",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jaredhanson/passport-oauth2/commit/8e3bcdff145a2219033bd782fc517229fe3e05ea",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jaredhanson/passport-oauth2/compare/v1.6.0...v1.6.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jaredhanson/passport-oauth2/pull/144",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.788249",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "passport-oauth2",
    "owner": "jaredhanson",
    "created_at": "2013-08-13T19:28:58Z",
    "updated_at": "2025-01-11T07:34:11Z",
    "pushed_at": "2024-02-28T17:52:26Z",
    "size": 192,
    "stars": 608,
    "forks": 345,
    "open_issues": 94,
    "watchers": 608,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 260907,
      "Makefile": 121
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:51:04.852352"
  }
}