{
  "cve_id": "CVE-2021-4173",
  "github_data": {
    "repository": "vim/vim",
    "fix_commit": "9c23f9bb5fe435b28245ba8ac65aa0ca6b902c04",
    "related_commits": [
      "9c23f9bb5fe435b28245ba8ac65aa0ca6b902c04",
      "9c23f9bb5fe435b28245ba8ac65aa0ca6b902c04"
    ],
    "patch_url": "https://github.com/vim/vim/commit/9c23f9bb5fe435b28245ba8ac65aa0ca6b902c04.patch",
    "fix_commit_details": {
      "sha": "9c23f9bb5fe435b28245ba8ac65aa0ca6b902c04",
      "commit_date": "2021-12-26T14:23:22Z",
      "author": {
        "login": "brammool",
        "type": "User",
        "stats": {
          "total_commits": 16567,
          "average_weekly_commits": 15.411162790697674,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 874
        }
      },
      "commit_message": {
        "title": "patch 8.2.3902: Vim9: double free with nested :def function",
        "length": 222,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 88,
        "additions": 62,
        "deletions": 26
      },
      "files": [
        {
          "filename": "src/proto/userfunc.pro",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -38,7 +38,7 @@ char_u *untrans_function_name(char_u *name);\n char_u *get_scriptlocal_funcname(char_u *funcname);\n char_u *save_function_name(char_u **name, int *is_global, int skip, int flags, funcdict_T *fudi);\n void list_functions(regmatch_T *regmatch);\n-ufunc_T *define_function(exarg_T *eap, char_u *name_arg);\n+ufunc_T *define_function(exarg_T *eap, char_u *name_arg, char_u **line_to_free);\n void ex_function(exarg_T *eap);\n void ex_defcompile(exarg_T *eap);\n int eval_fname_script(char_u *p);"
        },
        {
          "filename": "src/testdir/test_vim9_func.vim",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -1669,6 +1669,26 @@ def Test_error_in_nested_function()\n   assert_fails('FuncWithForwardCall()', 'E1096:', '', 1, 'FuncWithForwardCall')\n enddef\n \n+def Test_nested_functin_with_nextcmd()\n+  var lines =<< trim END\n+      vim9script\n+      # Define an outer function\n+      def FirstFunction()\n+        # Define an inner function\n+        def SecondFunction()\n+          # the function has a body, a double free is detected.\n+          AAAAA\n+\n+         # enddef followed by | or } followed by # one or more characters\n+         enddef|BBBB\n+      enddef\n+\n+      # Compile all functions\n+      defcompile\n+  END\n+  CheckScriptFailure(lines, 'E476: Invalid command: AAAAA')\n+enddef\n+\n def Test_return_type_wrong()\n   CheckScriptFailure([\n         'def Func(): number',"
        },
        {
          "filename": "src/userfunc.c",
          "status": "modified",
          "additions": 16,
          "deletions": 10,
          "patch": "@@ -720,12 +720,14 @@ get_function_body(\n \t}\n \telse\n \t{\n-\t    vim_free(*line_to_free);\n \t    if (eap->getline == NULL)\n \t\ttheline = getcmdline(':', 0L, indent, getline_options);\n \t    else\n \t\ttheline = eap->getline(':', eap->cookie, indent,\n \t\t\t\t\t\t\t      getline_options);\n+\t    if (*eap->cmdlinep == *line_to_free)\n+\t\t*eap->cmdlinep = theline;\n+\t    vim_free(*line_to_free);\n \t    *line_to_free = theline;\n \t}\n \tif (KeyTyped)\n@@ -837,7 +839,8 @@ get_function_body(\n \t\t\t// we can simply point into it, otherwise we need to\n \t\t\t// change \"eap->cmdlinep\".\n \t\t\teap->nextcmd = nextcmd;\n-\t\t\tif (*line_to_free != NULL)\n+\t\t\tif (*line_to_free != NULL\n+\t\t\t\t\t    && *eap->cmdlinep != *line_to_free)\n \t\t\t{\n \t\t\t    vim_free(*eap->cmdlinep);\n \t\t\t    *eap->cmdlinep = *line_to_free;\n@@ -1161,7 +1164,7 @@ lambda_function_body(\n \t}\n \tif (ga_grow(gap, 1) == FAIL || ga_grow(freegap, 1) == FAIL)\n \t    goto erret;\n-\tif (cmdline != NULL)\n+\tif (eap.nextcmd != NULL)\n \t    // more is following after the \"}\", which was skipped\n \t    last = cmdline;\n \telse\n@@ -1175,7 +1178,7 @@ lambda_function_body(\n \t((char_u **)freegap->ga_data)[freegap->ga_len++] = pnl;\n     }\n \n-    if (cmdline != NULL)\n+    if (eap.nextcmd != NULL)\n     {\n \tgarray_T *tfgap = &evalarg->eval_tofree_ga;\n \n@@ -1187,6 +1190,8 @@ lambda_function_body(\n \t{\n \t    ((char_u **)(tfgap->ga_data))[tfgap->ga_len++] = cmdline;\n \t    evalarg->eval_using_cmdline = TRUE;\n+\t    if (cmdline == line_to_free)\n+\t\tline_to_free = NULL;\n \t}\n     }\n     else\n@@ -3988,9 +3993,8 @@ list_functions(regmatch_T *regmatch)\n  * Returns a pointer to the function or NULL if no function defined.\n  */\n     ufunc_T *\n-define_function(exarg_T *eap, char_u *name_arg)\n+define_function(exarg_T *eap, char_u *name_arg, char_u **line_to_free)\n {\n-    char_u\t*line_to_free = NULL;\n     int\t\tj;\n     int\t\tc;\n     int\t\tsaved_did_emsg;\n@@ -4258,7 +4262,7 @@ define_function(exarg_T *eap, char_u *name_arg)\n     if (get_function_args(&p, ')', &newargs,\n \t\t\teap->cmdidx == CMD_def ? &argtypes : NULL, FALSE,\n \t\t\t NULL, &varargs, &default_args, eap->skip,\n-\t\t\t eap, &line_to_free) == FAIL)\n+\t\t\t eap, line_to_free) == FAIL)\n \tgoto errret_2;\n     whitep = p;\n \n@@ -4368,7 +4372,7 @@ define_function(exarg_T *eap, char_u *name_arg)\n \n     // Do not define the function when getting the body fails and when\n     // skipping.\n-    if (get_function_body(eap, &newlines, line_arg, &line_to_free) == FAIL\n+    if (get_function_body(eap, &newlines, line_arg, line_to_free) == FAIL\n \t    || eap->skip)\n \tgoto erret;\n \n@@ -4660,7 +4664,6 @@ define_function(exarg_T *eap, char_u *name_arg)\n     }\n ret_free:\n     ga_clear_strings(&argtypes);\n-    vim_free(line_to_free);\n     vim_free(fudi.fd_newkey);\n     if (name != name_arg)\n \tvim_free(name);\n@@ -4676,7 +4679,10 @@ define_function(exarg_T *eap, char_u *name_arg)\n     void\n ex_function(exarg_T *eap)\n {\n-    (void)define_function(eap, NULL);\n+    char_u *line_to_free = NULL;\n+\n+    (void)define_function(eap, NULL, &line_to_free);\n+    vim_free(line_to_free);\n }\n \n /*"
        },
        {
          "filename": "src/version.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -749,6 +749,8 @@ static char *(features[]) =\n \n static int included_patches[] =\n {   /* Add new patch number below this line */\n+/**/\n+    3902,\n /**/\n     3901,\n /**/"
        },
        {
          "filename": "src/vim9compile.c",
          "status": "modified",
          "additions": 20,
          "deletions": 14,
          "patch": "@@ -812,11 +812,13 @@ func_needs_compiling(ufunc_T *ufunc, compiletype_T compile_type)\n  * Compile a nested :def command.\n  */\n     static char_u *\n-compile_nested_function(exarg_T *eap, cctx_T *cctx)\n+compile_nested_function(exarg_T *eap, cctx_T *cctx, char_u **line_to_free)\n {\n     int\t\tis_global = *eap->arg == 'g' && eap->arg[1] == ':';\n     char_u\t*name_start = eap->arg;\n     char_u\t*name_end = to_name_end(eap->arg, TRUE);\n+    int\t\toff;\n+    char_u\t*func_name;\n     char_u\t*lambda_name;\n     ufunc_T\t*ufunc;\n     int\t\tr = FAIL;\n@@ -866,7 +868,17 @@ compile_nested_function(exarg_T *eap, cctx_T *cctx)\n     lambda_name = vim_strsave(get_lambda_name());\n     if (lambda_name == NULL)\n \treturn NULL;\n-    ufunc = define_function(eap, lambda_name);\n+\n+    // This may free the current line, make a copy of the name.\n+    off = is_global ? 2 : 0;\n+    func_name = vim_strnsave(name_start + off, name_end - name_start - off);\n+    if (func_name == NULL)\n+    {\n+\tr = FAIL;\n+\tgoto theend;\n+    }\n+\n+    ufunc = define_function(eap, lambda_name, line_to_free);\n \n     if (ufunc == NULL)\n     {\n@@ -911,21 +923,14 @@ compile_nested_function(exarg_T *eap, cctx_T *cctx)\n \n     if (is_global)\n     {\n-\tchar_u *func_name = vim_strnsave(name_start + 2,\n-\t\t\t\t\t\t    name_end - name_start - 2);\n-\n-\tif (func_name == NULL)\n-\t    r = FAIL;\n-\telse\n-\t{\n-\t    r = generate_NEWFUNC(cctx, lambda_name, func_name);\n-\t    lambda_name = NULL;\n-\t}\n+\tr = generate_NEWFUNC(cctx, lambda_name, func_name);\n+\tfunc_name = NULL;\n+\tlambda_name = NULL;\n     }\n     else\n     {\n \t// Define a local variable for the function reference.\n-\tlvar_T\t*lvar = reserve_local(cctx, name_start, name_end - name_start,\n+\tlvar_T\t*lvar = reserve_local(cctx, func_name, name_end - name_start,\n \t\t\t\t\t\t    TRUE, ufunc->uf_func_type);\n \n \tif (lvar == NULL)\n@@ -937,6 +942,7 @@ compile_nested_function(exarg_T *eap, cctx_T *cctx)\n \n theend:\n     vim_free(lambda_name);\n+    vim_free(func_name);\n     return r == FAIL ? NULL : (char_u *)\"\";\n }\n \n@@ -2861,7 +2867,7 @@ compile_def_function(\n \t    case CMD_def:\n \t    case CMD_function:\n \t\t    ea.arg = p;\n-\t\t    line = compile_nested_function(&ea, &cctx);\n+\t\t    line = compile_nested_function(&ea, &cctx, &line_to_free);\n \t\t    break;\n \n \t    case CMD_return:"
        },
        {
          "filename": "src/vim9execute.c",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -3345,10 +3345,12 @@ exec_instructions(ectx_T *ectx)\n \t\telse\n \t\t{\n \t\t    exarg_T ea;\n+\t\t    char_u  *line_to_free = NULL;\n \n \t\t    CLEAR_FIELD(ea);\n \t\t    ea.cmd = ea.arg = iptr->isn_arg.string;\n-\t\t    define_function(&ea, NULL);\n+\t\t    define_function(&ea, NULL, &line_to_free);\n+\t\t    vim_free(line_to_free);\n \t\t}\n \t\tbreak;\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "30377e0fe084496911e108cbb33c84cf075e6e33",
            "date": "2025-01-13T07:23:24Z",
            "author_login": "denilsonsa"
          },
          {
            "sha": "221c53202da1e9a2a30d081a46eacdeb220be443",
            "date": "2025-01-13T06:54:33Z",
            "author_login": "dkearns"
          },
          {
            "sha": "8e92db4ea22f010d402df9d34071022a4aa8cef5",
            "date": "2025-01-13T06:30:11Z",
            "author_login": "yegappan"
          },
          {
            "sha": "3a0cc36c69744a7727ce34311d39d2d9d8ddc6f9",
            "date": "2025-01-13T06:27:43Z",
            "author_login": "zeertzjq"
          },
          {
            "sha": "c200f53cbb03fa11e489a27791d5b9dfc34a6564",
            "date": "2025-01-12T19:02:04Z",
            "author_login": "Konfekt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-416",
    "description": "vim is vulnerable to Use After Free",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-12-27T13:15:07.653",
    "last_modified": "2024-11-21T06:37:04.030",
    "fix_date": "2021-12-26T14:23:22Z"
  },
  "references": [
    {
      "url": "http://seclists.org/fulldisclosure/2022/Jul/14",
      "source": "security@huntr.dev",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2022/Mar/29",
      "source": "security@huntr.dev",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2022/May/35",
      "source": "security@huntr.dev",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2022/01/15/1",
      "source": "security@huntr.dev",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vim/vim/commit/9c23f9bb5fe435b28245ba8ac65aa0ca6b902c04",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a1b236b9-89fb-4ccf-9689-ba11b471e766",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/2EY2VFBU3YGGWI5BW4XKT3F37MYGEQUD/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/3FH2J57GDA2WMBS6J56F6QQRA6BXQQFZ/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202208-32",
      "source": "security@huntr.dev",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT213183",
      "source": "security@huntr.dev",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT213256",
      "source": "security@huntr.dev",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT213343",
      "source": "security@huntr.dev",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2022/Jul/14",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2022/Mar/29",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2022/May/35",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2022/01/15/1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vim/vim/commit/9c23f9bb5fe435b28245ba8ac65aa0ca6b902c04",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a1b236b9-89fb-4ccf-9689-ba11b471e766",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/2EY2VFBU3YGGWI5BW4XKT3F37MYGEQUD/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/3FH2J57GDA2WMBS6J56F6QQRA6BXQQFZ/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202208-32",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT213183",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT213256",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://support.apple.com/kb/HT213343",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.029507",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vim",
    "owner": "vim",
    "created_at": "2015-08-18T21:03:56Z",
    "updated_at": "2025-01-14T08:58:33Z",
    "pushed_at": "2025-01-13T07:25:13Z",
    "size": 153925,
    "stars": 37215,
    "forks": 5529,
    "open_issues": 1516,
    "watchers": 37215,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Vim Script": 20025864,
      "C": 14374546,
      "Roff": 576344,
      "Makefile": 490522,
      "C++": 246793,
      "NSIS": 180936,
      "M4": 159971,
      "Java": 85446,
      "Shell": 71333,
      "PostScript": 64070,
      "Module Management System": 56375,
      "Python": 51761,
      "XS": 51261,
      "Ruby": 40309,
      "JavaScript": 37774,
      "NewLisp": 37431,
      "Raku": 34258,
      "Emacs Lisp": 30304,
      "Perl": 29735,
      "SystemVerilog": 27883,
      "Smalltalk": 25762,
      "Awk": 19481,
      "Batchfile": 18475,
      "Objective-C": 13147,
      "DIGITAL Command Language": 10835,
      "HTML": 6885,
      "Prolog": 4336,
      "KRL": 4206,
      "MATLAB": 1970,
      "Thrift": 1670,
      "OpenEdge ABL": 1490,
      "sed": 826,
      "Tcl": 745,
      "Lua": 738,
      "BitBake": 388
    },
    "commit_activity": {
      "total_commits_last_year": 1872,
      "avg_commits_per_week": 36.0,
      "days_active_last_year": 324
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "vim"
    },
    "collected_at": "2025-01-14T12:54:52.772009"
  }
}