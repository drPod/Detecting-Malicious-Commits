{
  "cve_id": "CVE-2021-4194",
  "github_data": {
    "repository": "bookstackapp/bookstack",
    "fix_commit": "cb0d674a71449de883713db2fcdccb6e108992ad",
    "related_commits": [
      "cb0d674a71449de883713db2fcdccb6e108992ad",
      "cb0d674a71449de883713db2fcdccb6e108992ad"
    ],
    "patch_url": "https://github.com/bookstackapp/bookstack/commit/cb0d674a71449de883713db2fcdccb6e108992ad.patch",
    "fix_commit_details": {
      "sha": "cb0d674a71449de883713db2fcdccb6e108992ad",
      "commit_date": "2022-01-06T12:03:15Z",
      "author": {
        "login": "ssddanbrown",
        "type": "User",
        "stats": {
          "total_commits": 3432,
          "average_weekly_commits": 6.905432595573441,
          "total_additions": 633335,
          "total_deletions": 385989,
          "weeks_active": 420
        }
      },
      "commit_message": {
        "title": "Merge branch 'sort_changes'",
        "length": 45,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 613,
        "additions": 451,
        "deletions": 162
      },
      "files": [
        {
          "filename": "app/Entities/Repos/ChapterRepo.php",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -10,6 +10,7 @@\n use BookStack\\Entities\\Tools\\TrashCan;\n use BookStack\\Exceptions\\MoveOperationException;\n use BookStack\\Exceptions\\NotFoundException;\n+use BookStack\\Exceptions\\PermissionsException;\n use BookStack\\Facades\\Activity;\n use Exception;\n \n@@ -85,15 +86,19 @@ public function destroy(Chapter $chapter)\n      * 'book:<id>' (book:5).\n      *\n      * @throws MoveOperationException\n+     * @throws PermissionsException\n      */\n     public function move(Chapter $chapter, string $parentIdentifier): Book\n     {\n-        /** @var Book $parent */\n         $parent = $this->findParentByIdentifier($parentIdentifier);\n         if (is_null($parent)) {\n             throw new MoveOperationException('Book to move chapter into not found');\n         }\n \n+        if (!userCan('chapter-create', $parent)) {\n+            throw new PermissionsException('User does not have permission to create a chapter within the chosen book');\n+        }\n+\n         $chapter->changeBook($parent->id);\n         $chapter->rebuildPermissions();\n         Activity::add(ActivityType::CHAPTER_MOVE, $chapter);"
        },
        {
          "filename": "app/Entities/Repos/PageRepo.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -328,7 +328,7 @@ public function restoreRevision(Page $page, int $revisionId): Page\n     public function move(Page $page, string $parentIdentifier): Entity\n     {\n         $parent = $this->findParentByIdentifier($parentIdentifier);\n-        if ($parent === null) {\n+        if (is_null($parent)) {\n             throw new MoveOperationException('Book or chapter to move page into not found');\n         }\n "
        },
        {
          "filename": "app/Entities/Tools/BookContents.php",
          "status": "modified",
          "additions": 154,
          "deletions": 59,
          "patch": "@@ -7,7 +7,6 @@\n use BookStack\\Entities\\Models\\Chapter;\n use BookStack\\Entities\\Models\\Entity;\n use BookStack\\Entities\\Models\\Page;\n-use BookStack\\Exceptions\\SortOperationException;\n use Illuminate\\Support\\Collection;\n \n class BookContents\n@@ -107,111 +106,207 @@ protected function getPages(bool $showDrafts = false, bool $getPageContent = fal\n     }\n \n     /**\n-     * Sort the books content using the given map.\n-     * The map is a single-dimension collection of objects in the following format:\n-     *   {\n-     *     +\"id\": \"294\" (ID of item)\n-     *     +\"sort\": 1 (Sort order index)\n-     *     +\"parentChapter\": false (ID of parent chapter, as string, or false)\n-     *     +\"type\": \"page\" (Entity type of item)\n-     *     +\"book\": \"1\" (Id of book to place item in)\n-     *   }.\n-     *\n+     * Sort the books content using the given sort map.\n      * Returns a list of books that were involved in the operation.\n      *\n-     * @throws SortOperationException\n+     * @returns Book[]\n      */\n-    public function sortUsingMap(Collection $sortMap): Collection\n+    public function sortUsingMap(BookSortMap $sortMap): array\n     {\n         // Load models into map\n-        $this->loadModelsIntoSortMap($sortMap);\n-        $booksInvolved = $this->getBooksInvolvedInSort($sortMap);\n+        $modelMap = $this->loadModelsFromSortMap($sortMap);\n+\n+        // Sort our changes from our map to be chapters first\n+        // Since they need to be process to ensure book alignment for child page changes.\n+        $sortMapItems = $sortMap->all();\n+        usort($sortMapItems, function(BookSortMapItem $itemA, BookSortMapItem $itemB) {\n+            $aScore = $itemA->type === 'page' ? 2 : 1;\n+            $bScore = $itemB->type === 'page' ? 2 : 1;\n+            return $aScore - $bScore;\n+        });\n \n         // Perform the sort\n-        $sortMap->each(function ($mapItem) {\n-            $this->applySortUpdates($mapItem);\n-        });\n+        foreach ($sortMapItems as $item) {\n+            $this->applySortUpdates($item, $modelMap);\n+        }\n+\n+        /** @var Book[] $booksInvolved */\n+        $booksInvolved = array_values(array_filter($modelMap, function (string $key) {\n+            return strpos($key, 'book:') === 0;\n+        }, ARRAY_FILTER_USE_KEY));\n \n-        // Update permissions and activity.\n-        $booksInvolved->each(function (Book $book) {\n+        // Update permissions of books involved\n+        foreach ($booksInvolved as $book) {\n             $book->rebuildPermissions();\n-        });\n+        }\n \n         return $booksInvolved;\n     }\n \n     /**\n      * Using the given sort map item, detect changes for the related model\n-     * and update it if required.\n+     * and update it if required. Changes where permissions are lacking will\n+     * be skipped and not throw an error.\n+     *\n+     * @param array<string, Entity> $modelMap\n      */\n-    protected function applySortUpdates(\\stdClass $sortMapItem)\n+    protected function applySortUpdates(BookSortMapItem $sortMapItem, array $modelMap): void\n     {\n         /** @var BookChild $model */\n-        $model = $sortMapItem->model;\n+        $model = $modelMap[$sortMapItem->type . ':' . $sortMapItem->id] ?? null;\n+        if (!$model) {\n+            return;\n+        }\n+\n+        $priorityChanged = $model->priority !== $sortMapItem->sort;\n+        $bookChanged = $model->book_id !== $sortMapItem->parentBookId;\n+        $chapterChanged = ($model instanceof Page) && $model->chapter_id !== $sortMapItem->parentChapterId;\n+\n+        // Stop if there's no change\n+        if (!$priorityChanged && !$bookChanged && !$chapterChanged) {\n+            return;\n+        }\n+\n+        $currentParentKey =  'book:' . $model->book_id;\n+        if ($model instanceof Page && $model->chapter_id) {\n+             $currentParentKey = 'chapter:' . $model->chapter_id;\n+        }\n \n-        $priorityChanged = intval($model->priority) !== intval($sortMapItem->sort);\n-        $bookChanged = intval($model->book_id) !== intval($sortMapItem->book);\n-        $chapterChanged = ($model instanceof Page) && intval($model->chapter_id) !== $sortMapItem->parentChapter;\n+        $currentParent = $modelMap[$currentParentKey] ?? null;\n+        /** @var Book $newBook */\n+        $newBook = $modelMap['book:' . $sortMapItem->parentBookId] ?? null;\n+        /** @var ?Chapter $newChapter */\n+        $newChapter = $sortMapItem->parentChapterId ? ($modelMap['chapter:' . $sortMapItem->parentChapterId] ?? null) : null;\n \n+        if (!$this->isSortChangePermissible($sortMapItem, $model, $currentParent, $newBook, $newChapter)) {\n+            return;\n+        }\n+\n+        // Action the required changes\n         if ($bookChanged) {\n-            $model->changeBook($sortMapItem->book);\n+            $model->changeBook($newBook->id);\n         }\n \n         if ($chapterChanged) {\n-            $model->chapter_id = intval($sortMapItem->parentChapter);\n-            $model->save();\n+            $model->chapter_id = $newChapter->id ?? 0;\n         }\n \n         if ($priorityChanged) {\n-            $model->priority = intval($sortMapItem->sort);\n+            $model->priority = $sortMapItem->sort;\n+        }\n+\n+        if ($chapterChanged || $priorityChanged) {\n             $model->save();\n         }\n     }\n \n     /**\n-     * Load models from the database into the given sort map.\n+     * Check if the current user has permissions to apply the given sorting change.\n+     * Is quite complex since items can gain a different parent change. Acts as a:\n+     * - Update of old parent element (Change of content/order).\n+     * - Update of sorted/moved element.\n+     * - Deletion of element (Relative to parent upon move).\n+     * - Creation of element within parent (Upon move to new parent).\n      */\n-    protected function loadModelsIntoSortMap(Collection $sortMap): void\n+    protected function isSortChangePermissible(BookSortMapItem $sortMapItem, BookChild $model, ?Entity $currentParent, ?Entity $newBook, ?Entity $newChapter): bool\n     {\n-        $keyMap = $sortMap->keyBy(function (\\stdClass $sortMapItem) {\n-            return  $sortMapItem->type . ':' . $sortMapItem->id;\n-        });\n-        $pageIds = $sortMap->where('type', '=', 'page')->pluck('id');\n-        $chapterIds = $sortMap->where('type', '=', 'chapter')->pluck('id');\n+        // Stop if we can't see the current parent or new book.\n+        if (!$currentParent || !$newBook) {\n+            return false;\n+        }\n \n-        $pages = Page::visible()->whereIn('id', $pageIds)->get();\n-        $chapters = Chapter::visible()->whereIn('id', $chapterIds)->get();\n+        $hasNewParent = $newBook->id !== $model->book_id || ($model instanceof Page && $model->chapter_id !== ($sortMapItem->parentChapterId ?? 0));\n+        if ($model instanceof Chapter) {\n+            $hasPermission = userCan('book-update', $currentParent)\n+                && userCan('book-update', $newBook)\n+                && userCan('chapter-update', $model)\n+                && (!$hasNewParent || userCan('chapter-create', $newBook))\n+                && (!$hasNewParent || userCan('chapter-delete', $model));\n \n-        foreach ($pages as $page) {\n-            $sortItem = $keyMap->get('page:' . $page->id);\n-            $sortItem->model = $page;\n+            if (!$hasPermission) {\n+                return false;\n+            }\n         }\n \n-        foreach ($chapters as $chapter) {\n-            $sortItem = $keyMap->get('chapter:' . $chapter->id);\n-            $sortItem->model = $chapter;\n+        if ($model instanceof Page) {\n+            $parentPermission = ($currentParent instanceof Chapter) ? 'chapter-update' : 'book-update';\n+            $hasCurrentParentPermission = userCan($parentPermission, $currentParent);\n+\n+            // This needs to check if there was an intended chapter location in the original sort map\n+            // rather than inferring from the $newChapter since that variable may be null\n+            // due to other reasons (Visibility).\n+            $newParent = $sortMapItem->parentChapterId ? $newChapter : $newBook;\n+            if (!$newParent) {\n+                return false;\n+            }\n+\n+            $hasPageEditPermission = userCan('page-update', $model);\n+            $newParentInRightLocation = ($newParent instanceof Book || $newParent->book_id === $newBook->id);\n+            $newParentPermission = ($newParent instanceof Chapter) ? 'chapter-update' : 'book-update';\n+            $hasNewParentPermission = userCan($newParentPermission, $newParent);\n+\n+            $hasDeletePermissionIfMoving = (!$hasNewParent || userCan('page-delete', $model));\n+            $hasCreatePermissionIfMoving = (!$hasNewParent || userCan('page-create', $newParent));\n+\n+            $hasPermission = $hasCurrentParentPermission\n+                && $newParentInRightLocation\n+                && $hasNewParentPermission\n+                && $hasPageEditPermission\n+                && $hasDeletePermissionIfMoving\n+                && $hasCreatePermissionIfMoving;\n+\n+            if (!$hasPermission) {\n+                return false;\n+            }\n         }\n+\n+        return true;\n     }\n \n     /**\n-     * Get the books involved in a sort.\n-     * The given sort map should have its models loaded first.\n-     *\n-     * @throws SortOperationException\n+     * Load models from the database into the given sort map.\n+     * @return array<string, Entity>\n      */\n-    protected function getBooksInvolvedInSort(Collection $sortMap): Collection\n+    protected function loadModelsFromSortMap(BookSortMap $sortMap): array\n     {\n-        $bookIdsInvolved = collect([$this->book->id]);\n-        $bookIdsInvolved = $bookIdsInvolved->concat($sortMap->pluck('book'));\n-        $bookIdsInvolved = $bookIdsInvolved->concat($sortMap->pluck('model.book_id'));\n-        $bookIdsInvolved = $bookIdsInvolved->unique()->toArray();\n+        $modelMap = [];\n+        $ids = [\n+            'chapter' => [],\n+            'page' => [],\n+            'book' => [],\n+        ];\n+\n+        foreach ($sortMap->all() as $sortMapItem) {\n+            $ids[$sortMapItem->type][] = $sortMapItem->id;\n+            $ids['book'][] = $sortMapItem->parentBookId;\n+            if ($sortMapItem->parentChapterId) {\n+                $ids['chapter'][] = $sortMapItem->parentChapterId;\n+            }\n+        }\n+\n+        $pages = Page::visible()->whereIn('id', array_unique($ids['page']))->get(Page::$listAttributes);\n+        /** @var Page $page */\n+        foreach ($pages as $page) {\n+            $modelMap['page:' . $page->id] = $page;\n+            $ids['book'][] = $page->book_id;\n+            if ($page->chapter_id) {\n+                $ids['chapter'][] = $page->chapter_id;\n+            }\n+        }\n \n-        $books = Book::hasPermission('update')->whereIn('id', $bookIdsInvolved)->get();\n+        $chapters = Chapter::visible()->whereIn('id', array_unique($ids['chapter']))->get();\n+        /** @var Chapter $chapter */\n+        foreach ($chapters as $chapter) {\n+            $modelMap['chapter:' . $chapter->id] = $chapter;\n+            $ids['book'][] = $chapter->book_id;\n+        }\n \n-        if (count($books) !== count($bookIdsInvolved)) {\n-            throw new SortOperationException('Could not find all books requested in sort operation');\n+        $books = Book::visible()->whereIn('id', array_unique($ids['book']))->get();\n+        /** @var Book $book */\n+        foreach ($books as $book) {\n+            $modelMap['book:' . $book->id] = $book;\n         }\n \n-        return $books;\n+        return $modelMap;\n     }\n }"
        },
        {
          "filename": "app/Entities/Tools/BookSortMap.php",
          "status": "added",
          "additions": 45,
          "deletions": 0,
          "patch": "@@ -0,0 +1,45 @@\n+<?php\n+\n+namespace BookStack\\Entities\\Tools;\n+\n+class BookSortMap\n+{\n+    /**\n+     * @var BookSortMapItem[]\n+     */\n+    protected $mapData = [];\n+\n+    public function addItem(BookSortMapItem $mapItem): void\n+    {\n+        $this->mapData[] = $mapItem;\n+    }\n+\n+    /**\n+     * @return BookSortMapItem[]\n+     */\n+    public function all(): array\n+    {\n+        return $this->mapData;\n+    }\n+\n+    public static function fromJson(string $json): self\n+    {\n+        $map = new static();\n+        $mapData = json_decode($json);\n+\n+        foreach ($mapData as $mapDataItem) {\n+            $item = new BookSortMapItem(\n+                intval($mapDataItem->id),\n+                intval($mapDataItem->sort),\n+                $mapDataItem->parentChapter ? intval($mapDataItem->parentChapter) : null,\n+                $mapDataItem->type,\n+                intval($mapDataItem->book)\n+            );\n+\n+            $map->addItem($item);\n+        }\n+\n+        return $map;\n+    }\n+\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "app/Entities/Tools/BookSortMapItem.php",
          "status": "added",
          "additions": 44,
          "deletions": 0,
          "patch": "@@ -0,0 +1,44 @@\n+<?php\n+\n+namespace BookStack\\Entities\\Tools;\n+\n+class BookSortMapItem\n+{\n+\n+    /**\n+     * @var int\n+     */\n+    public $id;\n+\n+    /**\n+     * @var int\n+     */\n+    public $sort;\n+\n+    /**\n+     * @var ?int\n+     */\n+    public $parentChapterId;\n+\n+    /**\n+     * @var string\n+     */\n+    public $type;\n+\n+    /**\n+     * @var int\n+     */\n+    public $parentBookId;\n+\n+\n+    public function __construct(int $id, int $sort, ?int $parentChapterId, string $type, int $parentBookId)\n+    {\n+        $this->id = $id;\n+        $this->sort = $sort;\n+        $this->parentChapterId = $parentChapterId;\n+        $this->type = $type;\n+        $this->parentBookId = $parentBookId;\n+    }\n+\n+\n+}\n\\ No newline at end of file"
        },
        {
          "filename": "app/Exceptions/SortOperationException.php",
          "status": "removed",
          "additions": 0,
          "deletions": 9,
          "patch": "@@ -1,9 +0,0 @@\n-<?php\n-\n-namespace BookStack\\Exceptions;\n-\n-use Exception;\n-\n-class SortOperationException extends Exception\n-{\n-}"
        },
        {
          "filename": "app/Http/Controllers/BookSortController.php",
          "status": "modified",
          "additions": 6,
          "deletions": 13,
          "patch": "@@ -3,10 +3,9 @@\n namespace BookStack\\Http\\Controllers;\n \n use BookStack\\Actions\\ActivityType;\n-use BookStack\\Entities\\Models\\Book;\n use BookStack\\Entities\\Repos\\BookRepo;\n use BookStack\\Entities\\Tools\\BookContents;\n-use BookStack\\Exceptions\\SortOperationException;\n+use BookStack\\Entities\\Tools\\BookSortMap;\n use BookStack\\Facades\\Activity;\n use Illuminate\\Http\\Request;\n \n@@ -59,20 +58,14 @@ public function update(Request $request, string $bookSlug)\n             return redirect($book->getUrl());\n         }\n \n-        $sortMap = collect(json_decode($request->get('sort-tree')));\n+        $sortMap = BookSortMap::fromJson($request->get('sort-tree'));\n         $bookContents = new BookContents($book);\n-        $booksInvolved = collect();\n-\n-        try {\n-            $booksInvolved = $bookContents->sortUsingMap($sortMap);\n-        } catch (SortOperationException $exception) {\n-            $this->showPermissionError();\n-        }\n+        $booksInvolved = $bookContents->sortUsingMap($sortMap);\n \n         // Rebuild permissions and add activity for involved books.\n-        $booksInvolved->each(function (Book $book) {\n-            Activity::add(ActivityType::BOOK_SORT, $book);\n-        });\n+        foreach ($booksInvolved as $bookInvolved) {\n+            Activity::add(ActivityType::BOOK_SORT, $bookInvolved);\n+        }\n \n         return redirect($book->getUrl());\n     }"
        },
        {
          "filename": "app/Http/Controllers/ChapterController.php",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@\n use BookStack\\Entities\\Tools\\PermissionsUpdater;\n use BookStack\\Exceptions\\MoveOperationException;\n use BookStack\\Exceptions\\NotFoundException;\n+use BookStack\\Exceptions\\PermissionsException;\n use Illuminate\\Http\\Request;\n use Illuminate\\Validation\\ValidationException;\n use Throwable;\n@@ -180,6 +181,8 @@ public function move(Request $request, string $bookSlug, string $chapterSlug)\n \n         try {\n             $newBook = $this->chapterRepo->move($chapter, $entitySelection);\n+        } catch (PermissionsException $exception) {\n+            $this->showPermissionError();\n         } catch (MoveOperationException $exception) {\n             $this->showErrorNotification(trans('errors.selected_book_not_found'));\n "
        },
        {
          "filename": "app/Http/Controllers/PageController.php",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -412,11 +412,9 @@ public function move(Request $request, string $bookSlug, string $pageSlug)\n \n         try {\n             $parent = $this->pageRepo->move($page, $entitySelection);\n+        } catch (PermissionsException $exception) {\n+            $this->showPermissionError();\n         } catch (Exception $exception) {\n-            if ($exception instanceof PermissionsException) {\n-                $this->showPermissionError();\n-            }\n-\n             $this->showErrorNotification(trans('errors.selected_book_chapter_not_found'));\n \n             return redirect()->back();"
        },
        {
          "filename": "tests/Entity/SortTest.php",
          "status": "modified",
          "additions": 190,
          "deletions": 30,
          "patch": "@@ -33,17 +33,17 @@ public function test_drafts_do_not_show_up()\n \n     public function test_page_move_into_book()\n     {\n-        $page = Page::first();\n+        $page = Page::query()->first();\n         $currentBook = $page->book;\n-        $newBook = Book::where('id', '!=', $currentBook->id)->first();\n+        $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();\n \n         $resp = $this->asEditor()->get($page->getUrl('/move'));\n         $resp->assertSee('Move Page');\n \n         $movePageResp = $this->put($page->getUrl('/move'), [\n             'entity_selection' => 'book:' . $newBook->id,\n         ]);\n-        $page = Page::find($page->id);\n+        $page = Page::query()->find($page->id);\n \n         $movePageResp->assertRedirect($page->getUrl());\n         $this->assertTrue($page->book->id == $newBook->id, 'Page book is now the new book');\n@@ -55,15 +55,15 @@ public function test_page_move_into_book()\n \n     public function test_page_move_into_chapter()\n     {\n-        $page = Page::first();\n+        $page = Page::query()->first();\n         $currentBook = $page->book;\n-        $newBook = Book::where('id', '!=', $currentBook->id)->first();\n+        $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();\n         $newChapter = $newBook->chapters()->first();\n \n         $movePageResp = $this->actingAs($this->getEditor())->put($page->getUrl('/move'), [\n             'entity_selection' => 'chapter:' . $newChapter->id,\n         ]);\n-        $page = Page::find($page->id);\n+        $page = Page::query()->find($page->id);\n \n         $movePageResp->assertRedirect($page->getUrl());\n         $this->assertTrue($page->book->id == $newBook->id, 'Page parent is now the new chapter');\n@@ -74,9 +74,9 @@ public function test_page_move_into_chapter()\n \n     public function test_page_move_from_chapter_to_book()\n     {\n-        $oldChapter = Chapter::first();\n+        $oldChapter = Chapter::query()->first();\n         $page = $oldChapter->pages()->first();\n-        $newBook = Book::where('id', '!=', $oldChapter->book_id)->first();\n+        $newBook = Book::query()->where('id', '!=', $oldChapter->book_id)->first();\n \n         $movePageResp = $this->actingAs($this->getEditor())->put($page->getUrl('/move'), [\n             'entity_selection' => 'book:' . $newBook->id,\n@@ -110,17 +110,17 @@ public function test_page_move_requires_create_permissions_on_parent()\n             'entity_selection' => 'book:' . $newBook->id,\n         ]);\n \n-        $page = Page::find($page->id);\n+        $page = Page::query()->find($page->id);\n         $movePageResp->assertRedirect($page->getUrl());\n \n         $this->assertTrue($page->book->id == $newBook->id, 'Page book is now the new book');\n     }\n \n     public function test_page_move_requires_delete_permissions()\n     {\n-        $page = Page::first();\n+        $page = Page::query()->first();\n         $currentBook = $page->book;\n-        $newBook = Book::where('id', '!=', $currentBook->id)->first();\n+        $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();\n         $editor = $this->getEditor();\n \n         $this->setEntityRestrictions($newBook, ['view', 'update', 'create', 'delete'], $editor->roles->all());\n@@ -138,17 +138,17 @@ public function test_page_move_requires_delete_permissions()\n             'entity_selection' => 'book:' . $newBook->id,\n         ]);\n \n-        $page = Page::find($page->id);\n+        $page = Page::query()->find($page->id);\n         $movePageResp->assertRedirect($page->getUrl());\n         $this->assertTrue($page->book->id == $newBook->id, 'Page book is now the new book');\n     }\n \n     public function test_chapter_move()\n     {\n-        $chapter = Chapter::first();\n+        $chapter = Chapter::query()->first();\n         $currentBook = $chapter->book;\n         $pageToCheck = $chapter->pages->first();\n-        $newBook = Book::where('id', '!=', $currentBook->id)->first();\n+        $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();\n \n         $chapterMoveResp = $this->asEditor()->get($chapter->getUrl('/move'));\n         $chapterMoveResp->assertSee('Move Chapter');\n@@ -157,25 +157,25 @@ public function test_chapter_move()\n             'entity_selection' => 'book:' . $newBook->id,\n         ]);\n \n-        $chapter = Chapter::find($chapter->id);\n+        $chapter = Chapter::query()->find($chapter->id);\n         $moveChapterResp->assertRedirect($chapter->getUrl());\n         $this->assertTrue($chapter->book->id === $newBook->id, 'Chapter Book is now the new book');\n \n         $newBookResp = $this->get($newBook->getUrl());\n         $newBookResp->assertSee('moved chapter');\n         $newBookResp->assertSee($chapter->name);\n \n-        $pageToCheck = Page::find($pageToCheck->id);\n+        $pageToCheck = Page::query()->find($pageToCheck->id);\n         $this->assertTrue($pageToCheck->book_id === $newBook->id, 'Chapter child page\\'s book id has changed to the new book');\n         $pageCheckResp = $this->get($pageToCheck->getUrl());\n         $pageCheckResp->assertSee($newBook->name);\n     }\n \n     public function test_chapter_move_requires_delete_permissions()\n     {\n-        $chapter = Chapter::first();\n+        $chapter = Chapter::query()->first();\n         $currentBook = $chapter->book;\n-        $newBook = Book::where('id', '!=', $currentBook->id)->first();\n+        $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();\n         $editor = $this->getEditor();\n \n         $this->setEntityRestrictions($newBook, ['view', 'update', 'create', 'delete'], $editor->roles->all());\n@@ -193,7 +193,32 @@ public function test_chapter_move_requires_delete_permissions()\n             'entity_selection' => 'book:' . $newBook->id,\n         ]);\n \n-        $chapter = Chapter::find($chapter->id);\n+        $chapter = Chapter::query()->find($chapter->id);\n+        $moveChapterResp->assertRedirect($chapter->getUrl());\n+        $this->assertTrue($chapter->book->id == $newBook->id, 'Page book is now the new book');\n+    }\n+\n+    public function test_chapter_move_requires_create_permissions_in_new_book()\n+    {\n+        $chapter = Chapter::query()->first();\n+        $currentBook = $chapter->book;\n+        $newBook = Book::query()->where('id', '!=', $currentBook->id)->first();\n+        $editor = $this->getEditor();\n+\n+        $this->setEntityRestrictions($newBook, ['view', 'update', 'delete'], [$editor->roles->first()]);\n+        $this->setEntityRestrictions($chapter, ['view', 'update', 'create', 'delete'], [$editor->roles->first()]);\n+\n+        $moveChapterResp = $this->actingAs($editor)->put($chapter->getUrl('/move'), [\n+            'entity_selection' => 'book:' . $newBook->id,\n+        ]);\n+        $this->assertPermissionError($moveChapterResp);\n+\n+        $this->setEntityRestrictions($newBook, ['view', 'update', 'create', 'delete'], [$editor->roles->first()]);\n+        $moveChapterResp = $this->put($chapter->getUrl('/move'), [\n+            'entity_selection' => 'book:' . $newBook->id,\n+        ]);\n+\n+        $chapter = Chapter::query()->find($chapter->id);\n         $moveChapterResp->assertRedirect($chapter->getUrl());\n         $this->assertTrue($chapter->book->id == $newBook->id, 'Page book is now the new book');\n     }\n@@ -239,39 +264,174 @@ public function test_book_sort()\n         // Create request data\n         $reqData = [\n             [\n-                'id'            => $chapterToMove->id,\n-                'sort'          => 0,\n+                'id' => $chapterToMove->id,\n+                'sort' => 0,\n                 'parentChapter' => false,\n-                'type'          => 'chapter',\n-                'book'          => $newBook->id,\n+                'type' => 'chapter',\n+                'book' => $newBook->id,\n             ],\n         ];\n         foreach ($pagesToMove as $index => $page) {\n             $reqData[] = [\n-                'id'            => $page->id,\n-                'sort'          => $index,\n+                'id' => $page->id,\n+                'sort' => $index,\n                 'parentChapter' => $index === count($pagesToMove) - 1 ? $chapterToMove->id : false,\n-                'type'          => 'page',\n-                'book'          => $newBook->id,\n+                'type' => 'page',\n+                'book' => $newBook->id,\n             ];\n         }\n \n         $sortResp = $this->asEditor()->put($newBook->getUrl() . '/sort', ['sort-tree' => json_encode($reqData)]);\n         $sortResp->assertRedirect($newBook->getUrl());\n         $sortResp->assertStatus(302);\n         $this->assertDatabaseHas('chapters', [\n-            'id'       => $chapterToMove->id,\n-            'book_id'  => $newBook->id,\n+            'id' => $chapterToMove->id,\n+            'book_id' => $newBook->id,\n             'priority' => 0,\n         ]);\n         $this->assertTrue($newBook->chapters()->count() === 1);\n         $this->assertTrue($newBook->chapters()->first()->pages()->count() === 1);\n \n         $checkPage = $pagesToMove[1];\n-        $checkResp = $this->get(Page::find($checkPage->id)->getUrl());\n+        $checkResp = $this->get($checkPage->refresh()->getUrl());\n         $checkResp->assertSee($newBook->name);\n     }\n \n+    public function test_book_sort_makes_no_changes_if_new_chapter_does_not_align_with_new_book()\n+    {\n+        /** @var Page $page */\n+        $page = Page::query()->where('chapter_id', '!=', 0)->first();\n+        $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();\n+\n+        $sortData = [\n+            'id' => $page->id,\n+            'sort' => 0,\n+            'parentChapter' => $otherChapter->id,\n+            'type' => 'page',\n+            'book' => $page->book_id,\n+        ];\n+        $this->asEditor()->put($page->book->getUrl('/sort'), ['sort-tree' => json_encode([$sortData])])->assertRedirect();\n+\n+        $this->assertDatabaseHas('pages', [\n+            'id' => $page->id, 'chapter_id' => $page->chapter_id, 'book_id' => $page->book_id,\n+        ]);\n+    }\n+\n+    public function test_book_sort_makes_no_changes_if_no_view_permissions_on_new_chapter()\n+    {\n+        /** @var Page $page */\n+        $page = Page::query()->where('chapter_id', '!=', 0)->first();\n+        /** @var Chapter $otherChapter */\n+        $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();\n+        $this->setEntityRestrictions($otherChapter);\n+\n+        $sortData = [\n+            'id' => $page->id,\n+            'sort' => 0,\n+            'parentChapter' => $otherChapter->id,\n+            'type' => 'page',\n+            'book' => $otherChapter->book_id,\n+        ];\n+        $this->asEditor()->put($page->book->getUrl('/sort'), ['sort-tree' => json_encode([$sortData])])->assertRedirect();\n+\n+        $this->assertDatabaseHas('pages', [\n+            'id' => $page->id, 'chapter_id' => $page->chapter_id, 'book_id' => $page->book_id,\n+        ]);\n+    }\n+\n+    public function test_book_sort_makes_no_changes_if_no_view_permissions_on_new_book()\n+    {\n+        /** @var Page $page */\n+        $page = Page::query()->where('chapter_id', '!=', 0)->first();\n+        /** @var Chapter $otherChapter */\n+        $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();\n+        $editor = $this->getEditor();\n+        $this->setEntityRestrictions($otherChapter->book, ['update', 'delete'], [$editor->roles()->first()]);\n+\n+        $sortData = [\n+            'id' => $page->id,\n+            'sort' => 0,\n+            'parentChapter' => $otherChapter->id,\n+            'type' => 'page',\n+            'book' => $otherChapter->book_id,\n+        ];\n+        $this->actingAs($editor)->put($page->book->getUrl('/sort'), ['sort-tree' => json_encode([$sortData])])->assertRedirect();\n+\n+        $this->assertDatabaseHas('pages', [\n+            'id' => $page->id, 'chapter_id' => $page->chapter_id, 'book_id' => $page->book_id,\n+        ]);\n+    }\n+\n+    public function test_book_sort_makes_no_changes_if_no_update_or_create_permissions_on_new_chapter()\n+    {\n+        /** @var Page $page */\n+        $page = Page::query()->where('chapter_id', '!=', 0)->first();\n+        /** @var Chapter $otherChapter */\n+        $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();\n+        $editor = $this->getEditor();\n+        $this->setEntityRestrictions($otherChapter, ['view', 'delete'], [$editor->roles()->first()]);\n+\n+        $sortData = [\n+            'id' => $page->id,\n+            'sort' => 0,\n+            'parentChapter' => $otherChapter->id,\n+            'type' => 'page',\n+            'book' => $otherChapter->book_id,\n+        ];\n+        $this->actingAs($editor)->put($page->book->getUrl('/sort'), ['sort-tree' => json_encode([$sortData])])->assertRedirect();\n+\n+        $this->assertDatabaseHas('pages', [\n+            'id' => $page->id, 'chapter_id' => $page->chapter_id, 'book_id' => $page->book_id,\n+        ]);\n+    }\n+\n+    public function test_book_sort_makes_no_changes_if_no_update_permissions_on_moved_item()\n+    {\n+        /** @var Page $page */\n+        $page = Page::query()->where('chapter_id', '!=', 0)->first();\n+        /** @var Chapter $otherChapter */\n+        $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();\n+        $editor = $this->getEditor();\n+        $this->setEntityRestrictions($page, ['view', 'delete'], [$editor->roles()->first()]);\n+\n+        $sortData = [\n+            'id' => $page->id,\n+            'sort' => 0,\n+            'parentChapter' => $otherChapter->id,\n+            'type' => 'page',\n+            'book' => $otherChapter->book_id,\n+        ];\n+        $this->actingAs($editor)->put($page->book->getUrl('/sort'), ['sort-tree' => json_encode([$sortData])])->assertRedirect();\n+\n+        $this->assertDatabaseHas('pages', [\n+            'id' => $page->id, 'chapter_id' => $page->chapter_id, 'book_id' => $page->book_id,\n+        ]);\n+    }\n+\n+    public function test_book_sort_makes_no_changes_if_no_delete_permissions_on_moved_item()\n+    {\n+        /** @var Page $page */\n+        $page = Page::query()->where('chapter_id', '!=', 0)->first();\n+        /** @var Chapter $otherChapter */\n+        $otherChapter = Chapter::query()->where('book_id', '!=', $page->book_id)->first();\n+        $editor = $this->getEditor();\n+        $this->setEntityRestrictions($page, ['view', 'update'], [$editor->roles()->first()]);\n+\n+        $sortData = [\n+            'id' => $page->id,\n+            'sort' => 0,\n+            'parentChapter' => $otherChapter->id,\n+            'type' => 'page',\n+            'book' => $otherChapter->book_id,\n+        ];\n+        $this->actingAs($editor)->put($page->book->getUrl('/sort'), ['sort-tree' => json_encode([$sortData])])->assertRedirect();\n+\n+        $this->assertDatabaseHas('pages', [\n+            'id' => $page->id, 'chapter_id' => $page->chapter_id, 'book_id' => $page->book_id,\n+        ]);\n+    }\n+\n+\n     public function test_book_sort_item_returns_book_content()\n     {\n         $books = Book::all();"
        },
        {
          "filename": "tests/Permissions/EntityPermissionsTest.php",
          "status": "modified",
          "additions": 0,
          "deletions": 45,
          "patch": "@@ -670,51 +670,6 @@ public function test_book_sort_view_permission()\n         $this->actingAs($this->user)->get($firstBook->getUrl('/sort'));\n     }\n \n-    public function test_book_sort_permission()\n-    {\n-        /** @var Book $firstBook */\n-        $firstBook = Book::query()->first();\n-        /** @var Book $secondBook */\n-        $secondBook = Book::query()->find(2);\n-\n-        $this->setRestrictionsForTestRoles($firstBook, ['view', 'update']);\n-        $this->setRestrictionsForTestRoles($secondBook, ['view']);\n-\n-        $firstBookChapter = $this->newChapter(['name' => 'first book chapter'], $firstBook);\n-        $secondBookChapter = $this->newChapter(['name' => 'second book chapter'], $secondBook);\n-\n-        // Create request data\n-        $reqData = [\n-            [\n-                'id'            => $firstBookChapter->id,\n-                'sort'          => 0,\n-                'parentChapter' => false,\n-                'type'          => 'chapter',\n-                'book'          => $secondBook->id,\n-            ],\n-        ];\n-\n-        // Move chapter from first book to a second book\n-        $this->actingAs($this->user)->put($firstBook->getUrl() . '/sort', ['sort-tree' => json_encode($reqData)])\n-            ->assertRedirect('/');\n-        $this->get('/')->assertSee('You do not have permission');\n-\n-        $reqData = [\n-            [\n-                'id'            => $secondBookChapter->id,\n-                'sort'          => 0,\n-                'parentChapter' => false,\n-                'type'          => 'chapter',\n-                'book'          => $firstBook->id,\n-            ],\n-        ];\n-\n-        // Move chapter from second book to first book\n-        $this->actingAs($this->user)->put($firstBook->getUrl() . '/sort', ['sort-tree' => json_encode($reqData)])\n-                ->assertRedirect('/');\n-        $this->get('/')->assertSee('You do not have permission');\n-    }\n-\n     public function test_can_create_page_if_chapter_has_permissions_when_book_not_visible()\n     {\n         /** @var Book $book */"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 6,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "786a434c03faa996e630f4a0a523567d3b093f43",
            "date": "2025-01-14T14:56:43Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "25c4f4b02ba06f66f5239de48ae005f895146f8d",
            "date": "2025-01-14T14:53:10Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "481580be172a4813ee98ad1b945d12d731e71cdb",
            "date": "2025-01-13T16:51:07Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "593645acfe8521db97d7469c92546c8529703969",
            "date": "2025-01-13T14:30:53Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "b9751807e7bad4b7d477b6977f630881f730abad",
            "date": "2025-01-13T13:27:32Z",
            "author_login": "ssddanbrown"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-284",
    "description": "bookstack is vulnerable to Improper Access Control",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-06T18:15:07.920",
    "last_modified": "2024-11-21T06:37:07.213",
    "fix_date": "2022-01-06T12:03:15Z"
  },
  "references": [
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/cb0d674a71449de883713db2fcdccb6e108992ad",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0bc8b3f7-9057-4eb7-a989-24cd5689f114",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/cb0d674a71449de883713db2fcdccb6e108992ad",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0bc8b3f7-9057-4eb7-a989-24cd5689f114",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.054479",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "BookStack",
    "owner": "bookstackapp",
    "created_at": "2015-08-29T10:26:44Z",
    "updated_at": "2025-01-14T12:14:34Z",
    "pushed_at": "2025-01-13T20:16:47Z",
    "size": 41179,
    "stars": 15786,
    "forks": 1978,
    "open_issues": 598,
    "watchers": 15786,
    "has_security_policy": false,
    "default_branch": "development",
    "protected_branches": [
      "release"
    ],
    "languages": {
      "PHP": 7963438,
      "TypeScript": 1856418,
      "Blade": 444101,
      "JavaScript": 287858,
      "SCSS": 139395,
      "Dockerfile": 1282,
      "Shell": 347
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:05:28.288711"
  }
}