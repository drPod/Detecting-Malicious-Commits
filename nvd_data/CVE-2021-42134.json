{
  "cve_id": "CVE-2021-42134",
  "github_data": {
    "repository": "adamghill/django-unicorn",
    "fix_commit": "3a832a9e3f6455ddd3b87f646247269918ad10c6",
    "related_commits": [
      "3a832a9e3f6455ddd3b87f646247269918ad10c6",
      "3a832a9e3f6455ddd3b87f646247269918ad10c6"
    ],
    "patch_url": "https://github.com/adamghill/django-unicorn/commit/3a832a9e3f6455ddd3b87f646247269918ad10c6.patch",
    "fix_commit_details": {
      "sha": "3a832a9e3f6455ddd3b87f646247269918ad10c6",
      "commit_date": "2021-10-09T02:09:35Z",
      "author": {
        "login": "adamghill",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "More complete handling for preventing XSS attacks.",
        "length": 50,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 179,
        "additions": 116,
        "deletions": 63
      },
      "files": [
        {
          "filename": "django_unicorn/components/unicorn_template_response.py",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -1,10 +1,10 @@\n import logging\n \n from django.template.response import TemplateResponse\n-from django.utils.safestring import mark_safe\n \n import orjson\n from bs4 import BeautifulSoup\n+from bs4.dammit import EntitySubstitution\n from bs4.element import Tag\n from bs4.formatter import HTMLFormatter\n \n@@ -22,6 +22,9 @@ class UnsortedAttributes(HTMLFormatter):\n     Prevent beautifulsoup from re-ordering attributes.\n     \"\"\"\n \n+    def __init__(self):\n+        super().__init__(entity_substitution=EntitySubstitution.substitute_html)\n+\n     def attributes(self, tag: Tag):\n         for k, v in tag.attrs.items():\n             yield k, v\n@@ -115,7 +118,6 @@ def render(self):\n                     root_element.insert_after(t)\n \n         rendered_template = UnicornTemplateResponse._desoupify(soup)\n-        rendered_template = mark_safe(rendered_template)\n         self.component.rendered(rendered_template)\n \n         response.content = rendered_template"
        },
        {
          "filename": "django_unicorn/components/unicorn_view.py",
          "status": "modified",
          "additions": 0,
          "deletions": 21,
          "patch": "@@ -10,7 +10,6 @@\n from django.core.exceptions import ImproperlyConfigured\n from django.db.models import Model\n from django.http import HttpRequest\n-from django.utils.html import conditional_escape\n from django.views.generic.base import TemplateView\n \n from cachetools.lru import LRUCache\n@@ -341,14 +340,6 @@ def get_frontend_context_variables(self) -> str:\n                     if field_name in frontend_context_variables:\n                         del frontend_context_variables[field_name]\n \n-        safe_fields = []\n-        # Keep a list of fields that are safe to not sanitize from `frontend_context_variables`\n-        if hasattr(self, \"Meta\") and hasattr(self.Meta, \"safe\"):\n-            if isinstance(self.Meta.safe, Sequence):\n-                for field_name in self.Meta.safe:\n-                    if field_name in frontend_context_variables:\n-                        safe_fields.append(field_name)\n-\n         # Add cleaned values to `frontend_content_variables` based on the widget in form's fields\n         form = self._get_form(attributes)\n \n@@ -372,18 +363,6 @@ def get_frontend_context_variables(self) -> str:\n                         ):\n                             frontend_context_variables[key] = value\n \n-        for (\n-            frontend_context_variable_key,\n-            frontend_context_variable_value,\n-        ) in frontend_context_variables.items():\n-            if (\n-                isinstance(frontend_context_variable_value, str)\n-                and frontend_context_variable_key not in safe_fields\n-            ):\n-                frontend_context_variables[frontend_context_variable_key] = escape(\n-                    frontend_context_variable_value\n-                )\n-\n         encoded_frontend_context_variables = serializer.dumps(\n             frontend_context_variables\n         )"
        },
        {
          "filename": "django_unicorn/views/__init__.py",
          "status": "modified",
          "additions": 16,
          "deletions": 1,
          "patch": "@@ -1,11 +1,12 @@\n import copy\n import logging\n from functools import wraps\n-from typing import Dict\n+from typing import Dict, Sequence\n \n from django.core.cache import caches\n from django.http import HttpRequest, JsonResponse\n from django.http.response import HttpResponseNotModified\n+from django.utils.safestring import mark_safe\n from django.views.decorators.csrf import csrf_protect\n from django.views.decorators.http import require_POST\n \n@@ -126,6 +127,20 @@ def _process_component_request(\n     # Re-load frontend context variables to deal with non-serializable properties\n     component_request.data = orjson.loads(component.get_frontend_context_variables())\n \n+    # Get set of attributes that should be marked as `safe`\n+    safe_fields = []\n+    if hasattr(component, \"Meta\") and hasattr(component.Meta, \"safe\"):\n+        if isinstance(component.Meta.safe, Sequence):\n+            for field_name in component.Meta.safe:\n+                if field_name in component._attributes().keys():\n+                    safe_fields.append(field_name)\n+\n+    # Mark safe attributes as such before rendering\n+    for field_name in safe_fields:\n+        value = getattr(component, field_name)\n+        if isinstance(value, str):\n+            setattr(component, field_name, mark_safe(value))\n+\n     # Send back all available data for reset or refresh actions\n     updated_data = component_request.data\n "
        },
        {
          "filename": "tests/components/test_component.py",
          "status": "modified",
          "additions": 0,
          "deletions": 33,
          "patch": "@@ -82,39 +82,6 @@ def test_get_frontend_context_variables(component):\n     assert frontend_context_variables_dict.get(\"name\") == \"World\"\n \n \n-def test_get_frontend_context_variables_xss(component):\n-    # Set component.name to a potential XSS attack\n-    component.name = '<a><style>@keyframes x{}</style><a style=\"animation-name:x\" onanimationend=\"alert(1)\"></a>'\n-\n-    frontend_context_variables = component.get_frontend_context_variables()\n-    frontend_context_variables_dict = orjson.loads(frontend_context_variables)\n-    assert len(frontend_context_variables_dict) == 1\n-    assert (\n-        frontend_context_variables_dict.get(\"name\")\n-        == \"&lt;a&gt;&lt;style&gt;@keyframes x{}&lt;/style&gt;&lt;a style=&quot;animation-name:x&quot; onanimationend=&quot;alert(1)&quot;&gt;&lt;/a&gt;\"\n-    )\n-\n-\n-def test_get_frontend_context_variables_safe(component):\n-    # Set component.name to a potential XSS attack\n-    component.name = '<a><style>@keyframes x{}</style><a style=\"animation-name:x\" onanimationend=\"alert(1)\"></a>'\n-\n-    class Meta:\n-        safe = [\n-            \"name\",\n-        ]\n-\n-    setattr(component, \"Meta\", Meta())\n-\n-    frontend_context_variables = component.get_frontend_context_variables()\n-    frontend_context_variables_dict = orjson.loads(frontend_context_variables)\n-    assert len(frontend_context_variables_dict) == 1\n-    assert (\n-        frontend_context_variables_dict.get(\"name\")\n-        == '<a><style>@keyframes x{}</style><a style=\"animation-name:x\" onanimationend=\"alert(1)\"></a>'\n-    )\n-\n-\n def test_get_context_data(component):\n     context_data = component.get_context_data()\n     assert ("
        },
        {
          "filename": "tests/components/test_unicorn_template_response.py",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -1,7 +1,10 @@\n import pytest\n from bs4 import BeautifulSoup\n \n-from django_unicorn.components.unicorn_template_response import get_root_element\n+from django_unicorn.components.unicorn_template_response import (\n+    UnicornTemplateResponse,\n+    get_root_element,\n+)\n \n \n def test_get_root_element():\n@@ -44,3 +47,14 @@ def test_get_root_element_no_element():\n         actual = get_root_element(soup)\n \n         assert str(actual) == expected\n+\n+\n+def test_desoupify():\n+    html = \"<div>&lt;a&gt;&lt;style&gt;@keyframes x{}&lt;/style&gt;&lt;a style=&quot;animation-name:x&quot; onanimationend=&quot;alert(1)&quot;&gt;&lt;/a&gt;!\\n</div>\\n\\n<script type=\\\"application/javascript\\\">\\n  window.addEventListener('DOMContentLoaded', (event) => {\\n    Unicorn.addEventListener('updated', (component) => console.log('got updated', component));\\n  });\\n</script>\"\n+    expected = \"<div>&lt;a&gt;&lt;style&gt;@keyframes x{}&lt;/style&gt;&lt;a style=\\\"animation-name:x\\\" onanimationend=\\\"alert(1)\\\"&gt;&lt;/a&gt;!\\n</div>\\n<script type=\\\"application/javascript\\\">\\n  window.addEventListener('DOMContentLoaded', (event) => {\\n    Unicorn.addEventListener('updated', (component) => console.log('got updated', component));\\n  });\\n</script>\"\n+\n+    soup = BeautifulSoup(html, \"html.parser\")\n+\n+    actual = UnicornTemplateResponse._desoupify(soup)\n+\n+    assert expected == actual"
        },
        {
          "filename": "tests/templates/test_component_kwargs.html",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,3 +1,3 @@\n <div>\n-    ->{{ hello }}<-\n+  <b>{{ hello }}</b>\n </div>\n\\ No newline at end of file"
        },
        {
          "filename": "tests/templates/test_component_kwargs_with_html_entity.html",
          "status": "added",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -0,0 +1,3 @@\n+<div>\n+  ->{{ hello }}<-\n+</div>\n\\ No newline at end of file"
        },
        {
          "filename": "tests/templates/test_component_variable.html",
          "status": "added",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -0,0 +1,3 @@\n+<div>\n+  {{ hello }}\n+</div>\n\\ No newline at end of file"
        },
        {
          "filename": "tests/templatetags/test_unicorn_render.py",
          "status": "modified",
          "additions": 23,
          "deletions": 2,
          "patch": "@@ -23,6 +23,15 @@ def __init__(self, *args, **kwargs):\n         self.hello = kwargs.get(\"test_kwarg\")\n \n \n+class FakeComponentKwargsWithHtmlEntity(UnicornView):\n+    template_name = \"templates/test_component_kwargs_with_html_entity.html\"\n+    hello = \"world\"\n+\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(**kwargs)\n+        self.hello = kwargs.get(\"test_kwarg\")\n+\n+\n class FakeComponentModel(UnicornView):\n     template_name = \"templates/test_component_model.html\"\n     model_id = None\n@@ -55,7 +64,7 @@ def test_unicorn_render_kwarg():\n     context = {}\n     actual = unicorn_node.render(context)\n \n-    assert \"->tested!<-\" in actual\n+    assert \"<b>tested!</b>\" in actual\n \n \n def test_unicorn_render_context_variable():\n@@ -67,7 +76,19 @@ def test_unicorn_render_context_variable():\n     context = {\"test_var\": {\"nested\": \"variable!\"}}\n     actual = unicorn_node.render(context)\n \n-    assert \"->variable!<-\" in actual\n+    assert \"<b>variable!</b>\" in actual\n+\n+\n+def test_unicorn_render_with_invalid_html():\n+    token = Token(\n+        TokenType.TEXT,\n+        \"unicorn 'tests.templatetags.test_unicorn_render.FakeComponentKwargsWithHtmlEntity' test_kwarg=test_var.nested\",\n+    )\n+    unicorn_node = unicorn(None, token)\n+    context = {\"test_var\": {\"nested\": \"variable!\"}}\n+    actual = unicorn_node.render(context)\n+\n+    assert \"-&gt;variable!&lt;-\" in actual\n \n \n def test_unicorn_render_parent(settings):"
        },
        {
          "filename": "tests/views/message/test_sync_input.py",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -1,5 +1,3 @@\n-import orjson\n-\n from tests.views.message.utils import post_and_get_response\n \n "
        },
        {
          "filename": "tests/views/test_process_component_request.py",
          "status": "added",
          "additions": 51,
          "deletions": 0,
          "patch": "@@ -0,0 +1,51 @@\n+from django_unicorn.components import UnicornView\n+from tests.views.message.utils import post_and_get_response\n+\n+\n+class FakeComponent(UnicornView):\n+    template_name = \"templates/test_component_variable.html\"\n+\n+    hello = \"\"\n+\n+\n+class FakeComponentSafe(UnicornView):\n+    template_name = \"templates/test_component_variable.html\"\n+\n+    hello = \"\"\n+\n+    class Meta:\n+        safe = (\"hello\",)\n+\n+\n+def test_html_entities_encoded(client):\n+    data = {\"hello\": \"test\"}\n+    action_queue = [\n+        {\"payload\": {\"name\": \"hello\", \"value\": \"<b>test1</b>\"}, \"type\": \"syncInput\",}\n+    ]\n+    response = post_and_get_response(\n+        client,\n+        url=\"/message/tests.views.test_process_component_request.FakeComponent\",\n+        data=data,\n+        action_queue=action_queue,\n+    )\n+\n+    assert not response[\"errors\"]\n+    assert response[\"data\"].get(\"hello\") == \"<b>test1</b>\"\n+    assert \"&lt;b&gt;test1&lt;/b&gt;\" in response[\"dom\"]\n+\n+\n+def test_safe_html_entities_not_encoded(client):\n+    data = {\"hello\": \"test\"}\n+    action_queue = [\n+        {\"payload\": {\"name\": \"hello\", \"value\": \"<b>test1</b>\"}, \"type\": \"syncInput\",}\n+    ]\n+    response = post_and_get_response(\n+        client,\n+        url=\"/message/tests.views.test_process_component_request.FakeComponentSafe\",\n+        data=data,\n+        action_queue=action_queue,\n+    )\n+\n+    assert not response[\"errors\"]\n+    assert response[\"data\"].get(\"hello\") == \"<b>test1</b>\"\n+    assert \"<b>test1</b>\" in response[\"dom\"]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 8,
        "unique_directories": 7,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e30dc9b17496d0127095d52d65f7e4a3fda2a114",
            "date": "2024-07-29T02:34:22Z",
            "author_login": "adamghill"
          },
          {
            "sha": "204ab0418b85f911cbb632f548dcf63f8a4d8a64",
            "date": "2024-07-28T22:02:39Z",
            "author_login": "adamghill"
          },
          {
            "sha": "da29359d5f6dc30fa133b15e6ca8fc4bd417b5e2",
            "date": "2024-07-28T21:49:15Z",
            "author_login": "adamghill"
          },
          {
            "sha": "7d65d2f430bb6cf5bba98b8bf7790caa8a1d2b1c",
            "date": "2024-07-26T01:34:25Z",
            "author_login": "adamghill"
          },
          {
            "sha": "5163ba7edc516b6907d80183294f8c21eeb333b0",
            "date": "2024-07-28T21:25:26Z",
            "author_login": "adamghill"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "The Unicorn framework before 0.36.1 for Django allows XSS via a component. NOTE: this issue exists because of an incomplete fix for CVE-2021-42053.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-10-11T01:15:06.883",
    "last_modified": "2024-11-21T06:27:19.863",
    "fix_date": "2021-10-09T02:09:35Z"
  },
  "references": [
    {
      "url": "https://github.com/adamghill/django-unicorn/commit/3a832a9e3f6455ddd3b87f646247269918ad10c6",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/adamghill/django-unicorn/compare/0.36.0...0.36.1",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/adamghill/django-unicorn/commit/3a832a9e3f6455ddd3b87f646247269918ad10c6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/adamghill/django-unicorn/compare/0.36.0...0.36.1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:07.820192",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "django-unicorn",
    "owner": "adamghill",
    "created_at": "2020-07-11T23:17:06Z",
    "updated_at": "2025-01-11T10:18:10Z",
    "pushed_at": "2024-10-15T19:17:34Z",
    "size": 5178,
    "stars": 2434,
    "forks": 120,
    "open_issues": 93,
    "watchers": 2434,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Python": 385133,
      "JavaScript": 153400,
      "HTML": 32749,
      "CSS": 60
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T18:42:37.484440"
  }
}