{
  "cve_id": "CVE-2021-4231",
  "github_data": {
    "repository": "angular/angular",
    "fix_commit": "ba8da742e3b243e8f43d4c63aa842b44e14f2b09",
    "related_commits": [
      "ba8da742e3b243e8f43d4c63aa842b44e14f2b09",
      "ba8da742e3b243e8f43d4c63aa842b44e14f2b09"
    ],
    "patch_url": "https://github.com/angular/angular/commit/ba8da742e3b243e8f43d4c63aa842b44e14f2b09.patch",
    "fix_commit_details": {
      "sha": "ba8da742e3b243e8f43d4c63aa842b44e14f2b09",
      "commit_date": "2021-01-22T18:05:17Z",
      "author": {
        "login": "mhevery",
        "type": "User",
        "stats": {
          "total_commits": 752,
          "average_weekly_commits": 1.3925925925925926,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 215
        }
      },
      "commit_message": {
        "title": "fix(core): fix possible XSS attack in development through SSR (#40525)",
        "length": 566,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 107,
        "additions": 76,
        "deletions": 31
      },
      "files": [
        {
          "filename": "packages/core/src/util/dom.ts",
          "status": "modified",
          "additions": 25,
          "deletions": 11,
          "patch": "@@ -6,15 +6,27 @@\n  * found in the LICENSE file at https://angular.io/license\n  */\n \n-const END_COMMENT = /-->/g;\n-const END_COMMENT_ESCAPED = '-\\u200B-\\u200B>';\n+/**\n+ * Disallowed strings in the comment.\n+ *\n+ * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n+ */\n+const COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;\n+/**\n+ * Delimiter in the disallowed strings which needs to be wrapped with zero with character.\n+ */\n+const COMMENT_DELIMITER = /(<|>)/;\n+const COMMENT_DELIMITER_ESCAPED = '\\u200B$1\\u200B';\n \n /**\n- * Escape the content of the strings so that it can be safely inserted into a comment node.\n+ * Escape the content of comment strings so that it can be safely inserted into a comment node.\n  *\n  * The issue is that HTML does not specify any way to escape comment end text inside the comment.\n- * `<!-- The way you close a comment is with \"-->\". -->`. Above the `\"-->\"` is meant to be text not\n- * an end to the comment. This can be created programmatically through DOM APIs.\n+ * Consider: `<!-- The way you close a comment is with \">\", and \"->\" at the beginning or by \"-->\" or\n+ * \"--!>\" at the end. -->`. Above the `\"-->\"` is meant to be text not an end to the comment. This\n+ * can be created programmatically through DOM APIs. (`<!--` are also disallowed.)\n+ *\n+ * see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n  *\n  * ```\n  * div.innerHTML = div.innerHTML\n@@ -25,13 +37,15 @@ const END_COMMENT_ESCAPED = '-\\u200B-\\u200B>';\n  * opening up the application for XSS attack. (In SSR we programmatically create comment nodes which\n  * may contain such text and expect them to be safe.)\n  *\n- * This function escapes the comment text by looking for the closing char sequence `-->` and replace\n- * it with `-_-_>` where the `_` is a zero width space `\\u200B`. The result is that if a comment\n- * contains `-->` text it will render normally but it will not cause the HTML parser to close the\n- * comment.\n+ * This function escapes the comment text by looking for comment delimiters (`<` and `>`) and\n+ * surrounding them with `_>_` where the `_` is a zero width space `\\u200B`. The result is that if a\n+ * comment contains any of the comment start/end delimiters (such as `<!--`, `-->` or `--!>`) the\n+ * text it will render normally but it will not cause the HTML parser to close/open the comment.\n  *\n- * @param value text to make safe for comment node by escaping the comment close character sequence\n+ * @param value text to make safe for comment node by escaping the comment open/close character\n+ *     sequence.\n  */\n export function escapeCommentText(value: string): string {\n-  return value.replace(END_COMMENT, END_COMMENT_ESCAPED);\n+  return value.replace(\n+      COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));\n }\n\\ No newline at end of file"
        },
        {
          "filename": "packages/core/test/acceptance/security_spec.ts",
          "status": "modified",
          "additions": 27,
          "deletions": 18,
          "patch": "@@ -11,24 +11,33 @@ import {TestBed} from '@angular/core/testing';\n \n \n describe('comment node text escaping', () => {\n-  it('should not be possible to do XSS through comment reflect data', () => {\n-    @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})\n-    class XSSComp {\n-      xssValue: string = '--> --><script>\"evil\"</script>';\n-    }\n+  // see: https://html.spec.whatwg.org/multipage/syntax.html#comments\n+  ['>',         // self closing\n+   '-->',       // standard closing\n+   '--!>',      // alternate closing\n+   '<!-- -->',  // embedded comment.\n+  ].forEach((xssValue) => {\n+    it('should not be possible to do XSS through comment reflect data when writing: ' + xssValue,\n+       () => {\n+         @Component({template: `<div><span *ngIf=\"xssValue\"></span><div>`})\n+         class XSSComp {\n+           // ngIf serializes the `xssValue` into a comment for debugging purposes.\n+           xssValue: string = xssValue + '<script>\"evil\"</script>';\n+         }\n \n-    TestBed.configureTestingModule({declarations: [XSSComp]});\n-    const fixture = TestBed.createComponent(XSSComp);\n-    fixture.detectChanges();\n-    const div = fixture.nativeElement.querySelector('div') as HTMLElement;\n-    // Serialize into a string to mimic SSR serialization.\n-    const html = div.innerHTML;\n-    // This must be escaped or we have XSS.\n-    expect(html).not.toContain('--><script');\n-    // Now parse it back into DOM (from string)\n-    div.innerHTML = html;\n-    // Verify that we did not accidentally deserialize the `<script>`\n-    const script = div.querySelector('script');\n-    expect(script).toBeFalsy();\n+         TestBed.configureTestingModule({declarations: [XSSComp]});\n+         const fixture = TestBed.createComponent(XSSComp);\n+         fixture.detectChanges();\n+         const div = fixture.nativeElement.querySelector('div') as HTMLElement;\n+         // Serialize into a string to mimic SSR serialization.\n+         const html = div.innerHTML;\n+         // This must be escaped or we have XSS.\n+         expect(html).not.toContain('--><script');\n+         // Now parse it back into DOM (from string)\n+         div.innerHTML = html;\n+         // Verify that we did not accidentally deserialize the `<script>`\n+         const script = div.querySelector('script');\n+         expect(script).toBeFalsy();\n+       });\n   });\n });\n\\ No newline at end of file"
        },
        {
          "filename": "packages/core/test/util/dom_spec.ts",
          "status": "modified",
          "additions": 24,
          "deletions": 2,
          "patch": "@@ -14,13 +14,35 @@ describe('comment node text escaping', () => {\n       expect(escapeCommentText('text')).toEqual('text');\n     });\n \n+    it('should escape \"<\" or \">\"', () => {\n+      expect(escapeCommentText('<!--')).toEqual('\\u200b<\\u200b!--');\n+      expect(escapeCommentText('<!--<!--')).toEqual('\\u200b<\\u200b!--\\u200b<\\u200b!--');\n+      expect(escapeCommentText('>')).toEqual('\\u200b>\\u200b');\n+      expect(escapeCommentText('>-->')).toEqual('\\u200b>\\u200b--\\u200b>\\u200b');\n+    });\n+\n     it('should escape end marker', () => {\n-      expect(escapeCommentText('before-->after')).toEqual('before-\\u200b-\\u200b>after');\n+      expect(escapeCommentText('before-->after')).toEqual('before--\\u200b>\\u200bafter');\n     });\n \n     it('should escape multiple markers', () => {\n       expect(escapeCommentText('before-->inline-->after'))\n-          .toEqual('before-\\u200b-\\u200b>inline-\\u200b-\\u200b>after');\n+          .toEqual('before--\\u200b>\\u200binline--\\u200b>\\u200bafter');\n+    });\n+\n+    it('should caver the spec', () => {\n+      // https://html.spec.whatwg.org/multipage/syntax.html#comments\n+      expect(escapeCommentText('>')).toEqual('\\u200b>\\u200b');\n+      expect(escapeCommentText('->')).toEqual('-\\u200b>\\u200b');\n+      expect(escapeCommentText('<!--')).toEqual('\\u200b<\\u200b!--');\n+      expect(escapeCommentText('-->')).toEqual('--\\u200b>\\u200b');\n+      expect(escapeCommentText('--!>')).toEqual('--!\\u200b>\\u200b');\n+      expect(escapeCommentText('<!-')).toEqual('\\u200b<\\u200b!-');\n+\n+      // Things which are OK\n+      expect(escapeCommentText('.>')).toEqual('.>');\n+      expect(escapeCommentText('.->')).toEqual('.->');\n+      expect(escapeCommentText('<!-.')).toEqual('<!-.');\n     });\n   });\n });"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "412ac303bc926d8e929361cc776505bb0d8b4da4",
            "date": "2025-01-13T21:39:14Z",
            "author_login": "AndrewKushnir"
          },
          {
            "sha": "e77df146206e640d8684c2270a3b9538aeb14381",
            "date": "2025-01-13T21:39:00Z",
            "author_login": "AndrewKushnir"
          },
          {
            "sha": "0bb81c5ab4e869691c3bf2e87d2f2a17c3d9e53e",
            "date": "2025-01-10T15:15:38Z",
            "author_login": "hawkgs"
          },
          {
            "sha": "47e48b44dcc5a4d41f9b371a1dc00aebf7fa1812",
            "date": "2025-01-13T19:26:58Z",
            "author_login": "arturovt"
          },
          {
            "sha": "065e1187fce66b201732eadf8f6683a3a79664fa",
            "date": "2025-01-13T06:56:42Z",
            "author_login": "AleksanderBodurri"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "A vulnerability was found in Angular up to 11.0.4/11.1.0-next.2. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. Upgrading to version 11.0.5 and 11.1.0-next.3 is able to address this issue. The name of the patch is ba8da742e3b243e8f43d4c63aa842b44e14f2b09. It is recommended to upgrade the affected component.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-26T14:15:07.953",
    "last_modified": "2024-11-21T06:37:11.870",
    "fix_date": "2021-01-22T18:05:17Z"
  },
  "references": [
    {
      "url": "https://github.com/angular/angular/commit/ba8da742e3b243e8f43d4c63aa842b44e14f2b09",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/angular/angular/issues/40136",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-ANGULARCORE-1070902",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.181356",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/angular/angular/commit/ba8da742e3b243e8f43d4c63aa842b44e14f2b09",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/angular/angular/issues/40136",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-ANGULARCORE-1070902",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.181356",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.163601",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "angular",
    "owner": "angular",
    "created_at": "2014-09-18T16:12:01Z",
    "updated_at": "2025-01-14T11:33:07Z",
    "pushed_at": "2025-01-13T22:38:25Z",
    "size": 521608,
    "stars": 96642,
    "forks": 25721,
    "open_issues": 1727,
    "watchers": 96642,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "2.0.x",
      "2.1.x",
      "2.2.x",
      "2.3.x",
      "2.4.x",
      "4.0.x",
      "4.1.x",
      "4.2.x",
      "4.3.x",
      "4.4.x",
      "5.0.x",
      "5.1.x",
      "5.2.x",
      "5.2x",
      "6.0.x",
      "6.1.x",
      "7.0.x",
      "7.1.x",
      "7.2.x",
      "8.0.x",
      "8.1.x",
      "8.2.x",
      "9.0.x",
      "9.1.x",
      "10.0.x",
      "10.1.x",
      "10.2.x",
      "11.0.x",
      "11.1.x",
      "11.2.x"
    ],
    "languages": {
      "TypeScript": 28120342,
      "JavaScript": 2289941,
      "Starlark": 735770,
      "HTML": 410100,
      "CSS": 256031,
      "SCSS": 177390,
      "Shell": 35333,
      "Nix": 5430,
      "Less": 80
    },
    "commit_activity": {
      "total_commits_last_year": 2750,
      "avg_commits_per_week": 52.88461538461539,
      "days_active_last_year": 345
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T14:13:57.567114"
  }
}