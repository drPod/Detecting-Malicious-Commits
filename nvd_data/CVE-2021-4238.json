{
  "cve_id": "CVE-2021-4238",
  "github_data": {
    "repository": "Masterminds/goutils",
    "fix_commit": "869801f20f9f1e7ecdbdb6422049d8241270d5e1",
    "related_commits": [
      "869801f20f9f1e7ecdbdb6422049d8241270d5e1",
      "869801f20f9f1e7ecdbdb6422049d8241270d5e1"
    ],
    "patch_url": "https://github.com/Masterminds/goutils/commit/869801f20f9f1e7ecdbdb6422049d8241270d5e1.patch",
    "fix_commit_details": {
      "sha": "869801f20f9f1e7ecdbdb6422049d8241270d5e1",
      "commit_date": "2021-01-28T21:00:48Z",
      "author": {
        "login": "technosophos",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Remove unnecessary checks on a value that is already definitely an alphanum",
        "length": 133,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 113,
        "additions": 78,
        "deletions": 35
      },
      "files": [
        {
          "filename": "cryptorandomstringutils.go",
          "status": "modified",
          "additions": 2,
          "deletions": 19,
          "patch": "@@ -21,7 +21,6 @@ import (\n \t\"fmt\"\n \t\"math\"\n \t\"math/big\"\n-\t\"regexp\"\n \t\"unicode\"\n )\n \n@@ -102,24 +101,8 @@ func CryptoRandomAlphaNumeric(count int) (string, error) {\n \tif count == 0 {\n \t\treturn \"\", nil\n \t}\n-\tRandomString, err := CryptoRandom(count, 0, 0, true, true)\n-\tif err != nil {\n-\t\treturn \"\", fmt.Errorf(\"Error: %s\", err)\n-\t}\n-\tmatch, err := regexp.MatchString(\"([0-9]+)\", RandomString)\n-\tif err != nil {\n-\t\tpanic(err)\n-\t}\n-\n-\tif !match {\n-\t\t//Get the position between 0 and the length of the string-1  to insert a random number\n-\t\tposition := getCryptoRandomInt(count)\n-\t\t//Insert a random number between [0-9] in the position\n-\t\tRandomString = RandomString[:position] + string('0' + getCryptoRandomInt(10)) + RandomString[position + 1:]\n-\t\treturn RandomString, err\n-\t}\n-\treturn RandomString, err\n \n+\treturn CryptoRandom(count, 0, 0, true, true)\n }\n \n /*\n@@ -204,7 +187,7 @@ func CryptoRandom(count int, start int, end int, letters bool, numbers bool, cha\n \t\tif chars == nil {\n \t\t\tch = rune(getCryptoRandomInt(gap) + int64(start))\n \t\t} else {\n-\t\t\tch = chars[getCryptoRandomInt(gap) + int64(start)]\n+\t\t\tch = chars[getCryptoRandomInt(gap)+int64(start)]\n \t\t}\n \n \t\tif letters && unicode.IsLetter(ch) || numbers && unicode.IsDigit(ch) || !letters && !numbers {"
        },
        {
          "filename": "cryptorandomstringutils_test.go",
          "status": "modified",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -1,6 +1,8 @@\n package goutils\n \n import (\n+\t\"regexp\"\n+\t\"strconv\"\n \t\"testing\"\n \t\"unicode/utf8\"\n )\n@@ -74,3 +76,38 @@ func TestCryptoRandomAlphaNumeric(t *testing.T) {\n \t\t}\n \t}\n }\n+\n+func TestCryptoRandAlphaNumeric_FuzzOnlyNumeric(t *testing.T) {\n+\n+\t// Testing for a reported regression in which some versions produced\n+\t// a predictably small set of chars.\n+\titers := 1000\n+\tcharlen := 0\n+\tfor i := 0; i < 16; i++ {\n+\t\tnumOnly := 0\n+\t\tcharlen++\n+\t\tfor i := 0; i < iters; i++ {\n+\t\t\tout, err := CryptoRandomAlphaNumeric(charlen)\n+\t\t\tprintln(out)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Fatal(\"func failed to produce a random thinger\")\n+\t\t\t}\n+\t\t\tif _, err := strconv.Atoi(out); err == nil {\n+\t\t\t\tnumOnly++\n+\t\t\t}\n+\n+\t\t\tm, err := regexp.MatchString(\"^[0-9a-zA-Z]+$\", out)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Fatal(err)\n+\t\t\t}\n+\t\t\tif !m {\n+\t\t\t\tt.Fatal(\"Character is not alphanum\")\n+\t\t\t}\n+\t\t}\n+\n+\t\tif numOnly == iters {\n+\t\t\tt.Fatalf(\"Got %d numeric-only random sequences\", numOnly)\n+\t\t}\n+\t}\n+\n+}"
        },
        {
          "filename": "randomstringutils.go",
          "status": "modified",
          "additions": 2,
          "deletions": 16,
          "patch": "@@ -20,7 +20,6 @@ import (\n \t\"fmt\"\n \t\"math\"\n \t\"math/rand\"\n-\t\"regexp\"\n \t\"time\"\n \t\"unicode\"\n )\n@@ -75,12 +74,10 @@ func RandomNumeric(count int) (string, error) {\n \n /*\n RandomAlphabetic creates a random string whose length is the number of characters specified.\n-Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.\n+Characters will be chosen from the set of alphabetic characters.\n \n Parameters:\n \tcount - the length of random string to create\n-\tletters - if true, generated string may include alphabetic characters\n-\tnumbers - if true, generated string may include numeric characters\n \n Returns:\n \tstring - the random string\n@@ -106,19 +103,8 @@ func RandomAlphaNumeric(count int) (string, error) {\n \tif err != nil {\n \t\treturn \"\", fmt.Errorf(\"Error: %s\", err)\n \t}\n-\tmatch, err := regexp.MatchString(\"([0-9]+)\", RandomString)\n-\tif err != nil {\n-\t\tpanic(err)\n-\t}\n \n-\tif !match {\n-\t\t//Get the position between 0 and the length of the string-1  to insert a random number\n-\t\tposition := rand.Intn(count)\n-\t\t//Insert a random number between [0-9] in the position\n-\t\tRandomString = RandomString[:position] + string('0'+rand.Intn(10)) + RandomString[position+1:]\n-\t\treturn RandomString, err\n-\t}\n-\treturn RandomString, err\n+\treturn RandomString[:count], nil\n \n }\n "
        },
        {
          "filename": "randomstringutils_test.go",
          "status": "modified",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -3,6 +3,8 @@ package goutils\n import (\n \t\"fmt\"\n \t\"math/rand\"\n+\t\"regexp\"\n+\t\"strconv\"\n \t\"testing\"\n )\n \n@@ -76,3 +78,38 @@ func ExampleRandomSeed() {\n \t// H_I;E\n \t// 2b2ca\n }\n+\n+func TestRandAlphaNumeric_FuzzOnlyNumeric(t *testing.T) {\n+\n+\t// Testing for a reported regression in which some versions produced\n+\t// a predictably small set of chars.\n+\titers := 1000\n+\tcharlen := 0\n+\tfor i := 0; i < 16; i++ {\n+\t\tnumOnly := 0\n+\t\tcharlen++\n+\t\tfor i := 0; i < iters; i++ {\n+\t\t\tout, err := RandomAlphaNumeric(charlen)\n+\t\t\tprintln(out)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Fatal(\"func failed to produce a random thinger\")\n+\t\t\t}\n+\t\t\tif _, err := strconv.Atoi(out); err == nil {\n+\t\t\t\tnumOnly++\n+\t\t\t}\n+\n+\t\t\tm, err := regexp.MatchString(\"^[0-9a-zA-Z]+$\", out)\n+\t\t\tif err != nil {\n+\t\t\t\tt.Fatal(err)\n+\t\t\t}\n+\t\t\tif !m {\n+\t\t\t\tt.Fatal(\"Character is not alphanum\")\n+\t\t\t}\n+\t\t}\n+\n+\t\tif numOnly == iters {\n+\t\t\tt.Fatalf(\"Got %d numeric-only random sequences\", numOnly)\n+\t\t}\n+\t}\n+\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 1,
        "max_directory_depth": 0
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f1923532a168b8203bfe956d8cd3b17ebece5982",
            "date": "2021-02-04T20:06:53Z",
            "author_login": "technosophos"
          },
          {
            "sha": "c707277dd3958db7f25d0f5182b5622c5bb9f953",
            "date": "2021-01-28T22:57:58Z",
            "author_login": "technosophos"
          },
          {
            "sha": "869801f20f9f1e7ecdbdb6422049d8241270d5e1",
            "date": "2021-01-28T21:00:48Z",
            "author_login": "technosophos"
          },
          {
            "sha": "864fea799ab6516ec883dc052a9a0b15f1e529dd",
            "date": "2020-06-16T18:03:55Z",
            "author_login": "technosophos"
          },
          {
            "sha": "740ce87c3876f39c1aebbabf108d48a2c894c31d",
            "date": "2020-06-16T06:44:46Z",
            "author_login": "chiseok"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:H",
    "cwe_id": "CWE-331",
    "description": "Randomly-generated alphanumeric strings contain significantly less entropy than expected. The RandomAlphaNumeric and CryptoRandomAlphaNumeric functions always return strings containing at least one digit from 0 to 9. This significantly reduces the amount of entropy in short strings generated by these functions.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-12-27T22:15:12.073",
    "last_modified": "2024-11-21T06:37:12.600",
    "fix_date": "2021-01-28T21:00:48Z"
  },
  "references": [
    {
      "url": "https://github.com/Masterminds/goutils/commit/869801f20f9f1e7ecdbdb6422049d8241270d5e1",
      "source": "security@golang.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2022-0411",
      "source": "security@golang.org",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Masterminds/goutils/commit/869801f20f9f1e7ecdbdb6422049d8241270d5e1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://pkg.go.dev/vuln/GO-2022-0411",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.222948",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "goutils",
    "owner": "Masterminds",
    "created_at": "2014-03-06T22:02:45Z",
    "updated_at": "2024-12-11T02:18:31Z",
    "pushed_at": "2021-02-04T20:16:33Z",
    "size": 166,
    "stars": 100,
    "forks": 26,
    "open_issues": 4,
    "watchers": 100,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 52391
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:29:12.766612"
  }
}