{
  "cve_id": "CVE-2021-4287",
  "github_data": {
    "repository": "ReFirmLabs/binwalk",
    "fix_commit": "fa0c0bd59b8588814756942fe4cb5452e76c1dcd",
    "related_commits": [
      "fa0c0bd59b8588814756942fe4cb5452e76c1dcd",
      "fa0c0bd59b8588814756942fe4cb5452e76c1dcd"
    ],
    "patch_url": "https://github.com/ReFirmLabs/binwalk/commit/fa0c0bd59b8588814756942fe4cb5452e76c1dcd.patch",
    "fix_commit_details": {
      "sha": "fa0c0bd59b8588814756942fe4cb5452e76c1dcd",
      "commit_date": "2021-09-10T17:46:40Z",
      "author": {
        "login": "eacmen",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request #556 from ReFirmLabs/unpriv_user_exec",
        "length": 98,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 212,
        "additions": 173,
        "deletions": 39
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -7,10 +7,17 @@\n \n Binwalk is a fast, easy to use tool for analyzing, reverse engineering, and extracting firmware images.\n \n+\n+### *** Extraction Security Notice ***\n+\n+Prior to Binwalk v2.3.3, extracted archives could create symlinks which point anywhere on the file system, potentially resulting in a directory traversal attack if subsequent extraction utilties blindly follow these symlinks. More generically, Binwalk makes use of many third-party extraction utilties which may have unpatched security issues; Binwalk v2.3.3 and later allows external extraction tools to be run as an unprivileged user using the `run-as` command line option (this requires Binwalk itself to be run with root privileges). Additionally, Binwalk v2.3.3 and later will refuse to perform extraction as root unless `--run-as=root` is specified.\n+\n+\n ### *** Python 2.7 Deprecation Notice ***\n \n Even though many major Linux distros are still shipping Python 2.7 as the default interpreter in their currently stable release, we are making the difficult decision to move binwalk support exclusively to Python 3. This is likely to make many upset and others rejoice. If you need to install binwalk into a Python 2.7 environment we will be creating a tag `python27` that will be a snapshot of `master` before all of these major changes are made. Thank you for being patient with us through this transition process.\n \n+\n ### Installation and Usage\n \n * [Installation](./INSTALL.md)"
        },
        {
          "filename": "setup.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -12,7 +12,7 @@\n from distutils.dir_util import remove_tree\n \n MODULE_NAME = \"binwalk\"\n-MODULE_VERSION = \"2.3.2\"\n+MODULE_VERSION = \"2.3.3\"\n SCRIPT_NAME = MODULE_NAME\n MODULE_DIRECTORY = os.path.dirname(os.path.realpath(__file__))\n "
        },
        {
          "filename": "src/binwalk/modules/extractor.py",
          "status": "modified",
          "additions": 132,
          "deletions": 36,
          "patch": "@@ -4,12 +4,14 @@\n \n import os\n import re\n+import pwd\n import stat\n import shlex\n import tempfile\n import subprocess\n import binwalk.core.common\n from binwalk.core.compat import *\n+from binwalk.core.exceptions import ModuleException\n from binwalk.core.module import Module, Option, Kwarg\n from binwalk.core.common import file_size, file_md5, unique_file_name, BlockFile\n \n@@ -87,11 +89,20 @@ class Extractor(Module):\n                type=int,\n                kwargs={'max_count': 0},\n                description='Limit the number of extracted files'),\n+        Option(short='0',\n+               long='run-as',\n+               type=str,\n+               kwargs={'runas_user': 0},\n+               description=\"Execute external extraction utilities with the specified user's privileges\"),\n         #Option(short='u',\n         #       long='limit',\n         #       type=int,\n         #       kwargs={'recursive_max_size': 0},\n         #       description=\"Limit the total size of all extracted files\"),\n+        Option(short='1',\n+               long='preserve-symlinks',\n+               kwargs={'do_not_sanitize_symlinks': True},\n+               description=\"Do not sanitize extracted symlinks that point outside the extraction directory (dangerous)\"),\n         Option(short='r',\n                long='rm',\n                kwargs={'remove_after_execute': True},\n@@ -111,16 +122,43 @@ class Extractor(Module):\n         Kwarg(name='recursive_max_size', default=None),\n         Kwarg(name='max_count', default=None),\n         Kwarg(name='base_directory', default=None),\n+        Kwarg(name='do_not_sanitize_symlinks', default=False),\n         Kwarg(name='remove_after_execute', default=False),\n         Kwarg(name='load_default_rules', default=False),\n         Kwarg(name='run_extractors', default=True),\n         Kwarg(name='extract_into_subdirs', default=False),\n         Kwarg(name='manual_rules', default=[]),\n         Kwarg(name='matryoshka', default=0),\n         Kwarg(name='enabled', default=False),\n+        Kwarg(name='runas_user', default=None),\n     ]\n \n     def load(self):\n+        self.runas_uid = None\n+        self.runas_gid = None\n+\n+        if self.enabled is True:\n+            if self.runas_user is None:\n+                # Get some info about the current user we're running under\n+                user_info = pwd.getpwuid(os.getuid())\n+\n+                # Don't run as root, unless explicitly instructed to\n+                if user_info.pw_uid == 0:\n+                    raise ModuleException(\"Binwalk extraction uses many third party utilities, which may not be secure. If you wish to have extraction utilities executed as the current user, use '--run-as=%s' (binwalk itself must be run as root).\" % user_info.pw_name)\n+\n+                # Run external applications as the current user\n+                self.runas_uid = user_info.pw_uid\n+                self.runas_gid = user_info.pw_gid\n+            else:\n+                # Run external applications as the specified user\n+                user_info = pwd.getpwnam(self.runas_user)\n+                self.runas_uid = user_info.pw_uid\n+                self.runas_gid = user_info.pw_gid\n+\n+                # Make sure we'll have permissions to switch to the different user\n+                if self.runas_uid != os.getuid() and os.getuid() != 0:\n+                    raise ModuleException(\"In order to execute third party applications as %s, binwalk must be run with root privileges.\" % self.runas_user)\n+\n         # Holds a list of extraction rules loaded either from a file or when\n         # manually specified.\n         self.extract_rules = []\n@@ -148,8 +186,8 @@ def load(self):\n             self.config.verbose = True\n \n     def add_pending(self, f):\n-        # Ignore symlinks\n-        if os.path.islink(f):\n+        # Ignore symlinks, don't add new files unless recursion was requested\n+        if os.path.islink(f) or not self.matryoshka:\n             return\n \n         # Get the file mode to check and see if it's a block/char device\n@@ -260,30 +298,34 @@ def callback(self, r):\n \n                     # If recursion was specified, and the file is not the same\n                     # one we just dd'd\n-                    if (self.matryoshka and\n-                        file_path != dd_file_path and\n-                        scan_extracted_files and\n-                            self.directory in real_file_path):\n-                        # If the recursion level of this file is less than or\n-                        # equal to our desired recursion level\n-                        if len(real_file_path.split(self.directory)[1].split(os.path.sep)) <= self.matryoshka:\n-                            # If this is a directory and we are supposed to process directories for this extractor,\n-                            # then add all files under that directory to the\n-                            # list of pending files.\n-                            if os.path.isdir(file_path):\n-                                for root, dirs, files in os.walk(file_path):\n-                                    for f in files:\n-                                        full_path = os.path.join(root, f)\n-                                        self.add_pending(full_path)\n-                            # If it's just a file, it to the list of pending\n-                            # files\n-                            else:\n-                                self.add_pending(file_path)\n+                    if file_path != dd_file_path:\n+                        # Symlinks can cause security issues if they point outside the extraction directory.\n+                        self.symlink_sanitizer(file_path, extraction_directory)\n+\n+                        # If this is a directory and we are supposed to process directories for this extractor,\n+                        # then add all files under that directory to the\n+                        # list of pending files.\n+                        if os.path.isdir(file_path):\n+                            for root, dirs, files in os.walk(file_path):\n+                                # Symlinks can cause security issues if they point outside the extraction directory.\n+                                self.symlink_sanitizer([os.path.join(root, x) for x in dirs+files], extraction_directory)\n+\n+                                for f in files:\n+                                    full_path = os.path.join(root, f)\n+\n+                                    # If the recursion level of this file is less than or equal to our desired recursion level\n+                                    if len(real_file_path.split(self.directory)[1].split(os.path.sep)) <= self.matryoshka:\n+                                        if scan_extracted_files and self.directory in real_file_path:\n+                                                self.add_pending(full_path)\n+\n+                        # If it's just a file, it to the list of pending\n+                        # files\n+                        elif scan_extracted_files and self.directory in real_file_path:\n+                            self.add_pending(file_path)\n \n                 # Update the last directory listing for the next time we\n                 # extract a file to this same output directory\n-                self.last_directory_listing[\n-                    extraction_directory] = directory_listing\n+                self.last_directory_listing[extraction_directory] = directory_listing\n \n     def append_rule(self, r):\n         self.extract_rules.append(r.copy())\n@@ -534,6 +576,9 @@ def build_output_directory(self, path):\n         else:\n             output_directory = self.extraction_directories[path]\n \n+        # Make sure run-as user can access this directory\n+        os.chown(output_directory, self.runas_uid, self.runas_gid)\n+\n         return output_directory\n \n     def cleanup_extracted_files(self, tf=None):\n@@ -826,6 +871,9 @@ def _dd(self, file_name, offset, size, extension, output_file_name=None):\n             # Cleanup\n             fdout.close()\n             fdin.close()\n+\n+            # Make sure run-as user can access this file\n+            os.chown(fname, self.runas_uid, self.runas_gid)\n         except KeyboardInterrupt as e:\n             raise e\n         except Exception as e:\n@@ -846,7 +894,6 @@ def execute(self, cmd, fname, codes=[0, None]):\n \n         Returns True on success, False on failure, or None if the external extraction utility could not be found.\n         '''\n-        tmp = None\n         rval = 0\n         retval = True\n         command_list = []\n@@ -865,16 +912,10 @@ def execute(self, cmd, fname, codes=[0, None]):\n                     retval = False\n                     binwalk.core.common.warning(\"Internal extractor '%s' failed with exception: '%s'\" % (str(cmd), str(e)))\n             elif cmd:\n-                # If not in debug mode, create a temporary file to redirect\n-                # stdout and stderr to\n-                if not binwalk.core.common.DEBUG:\n-                    tmp = tempfile.TemporaryFile()\n-\n                 # Generate unique file paths for all paths in the current\n                 # command that are surrounded by UNIQUE_PATH_DELIMITER\n                 while self.UNIQUE_PATH_DELIMITER in cmd:\n-                    need_unique_path = cmd.split(self.UNIQUE_PATH_DELIMITER)[\n-                        1].split(self.UNIQUE_PATH_DELIMITER)[0]\n+                    need_unique_path = cmd.split(self.UNIQUE_PATH_DELIMITER)[1].split(self.UNIQUE_PATH_DELIMITER)[0]\n                     unique_path = binwalk.core.common.unique_file_name(need_unique_path)\n                     cmd = cmd.replace(self.UNIQUE_PATH_DELIMITER + need_unique_path + self.UNIQUE_PATH_DELIMITER, unique_path)\n \n@@ -885,9 +926,10 @@ def execute(self, cmd, fname, codes=[0, None]):\n                     # command with fname\n                     command = command.strip().replace(self.FILE_NAME_PLACEHOLDER, fname)\n \n-                    binwalk.core.common.debug(\"subprocess.call(%s, stdout=%s, stderr=%s)\" % (command, str(tmp), str(tmp)))\n-                    rval = subprocess.call(shlex.split(command), stdout=tmp, stderr=tmp)\n+                    # Execute external extractor\n+                    rval = self.shell_call(command)\n \n+                    # Check the return value to see if extraction was successful or not\n                     if rval in codes:\n                         retval = True\n                     else:\n@@ -909,7 +951,61 @@ def execute(self, cmd, fname, codes=[0, None]):\n             binwalk.core.common.warning(\"Extractor.execute failed to run external extractor '%s': %s, '%s' might not be installed correctly\" % (str(cmd), str(e), str(cmd)))\n             retval = None\n \n-        if tmp is not None:\n-            tmp.close()\n-\n         return (retval, '&&'.join(command_list))\n+\n+    def shell_call(self, command):\n+        # If not in debug mode, redirect output to /dev/null\n+        if not binwalk.core.common.DEBUG:\n+            tmp = subprocess.DEVNULL\n+        else:\n+            tmp = None\n+\n+        # If a run-as user is not the current user, we'll need to switch privileges to that user account\n+        if self.runas_uid != os.getuid():\n+            binwalk.core.common.debug(\"Switching privileges to %s (%d:%d)\" % (self.runas_user, self.runas_uid, self.runas_gid))\n+            \n+            # Fork a child process\n+            child_pid = os.fork()\n+            if child_pid is 0:\n+                # Switch to the run-as user privileges, if one has been set\n+                if self.runas_uid is not None and self.runas_gid is not None:\n+                    os.setgid(self.runas_uid)\n+                    os.setuid(self.runas_gid)\n+        else:\n+            # child_pid of None indicates that no os.fork() occured\n+            child_pid = None\n+            \n+        # If we're the child, or there was no os.fork(), execute the command\n+        if child_pid in [0, None]:\n+            binwalk.core.common.debug(\"subprocess.call(%s, stdout=%s, stderr=%s)\" % (command, str(tmp), str(tmp)))\n+            rval = subprocess.call(shlex.split(command), stdout=tmp, stderr=tmp)\n+\n+        # A true child process should exit with the subprocess exit value\n+        if child_pid is 0:\n+            sys.exit(rval)\n+        # If no os.fork() happened, just return the subprocess exit value\n+        elif child_pid is None:\n+            return rval\n+        # Else, os.fork() happened and we're the parent. Wait and return the child's exit value.\n+        else:\n+            return os.wait()[1]\n+\n+    def symlink_sanitizer(self, file_list, extraction_directory):\n+        # User can disable this if desired\n+        if self.do_not_sanitize_symlinks is True:\n+            return \n+\n+        # Allows either a single file path, or a list of file paths to be passed in for sanitization.\n+        if type(file_list) is not list:\n+            file_list = [file_list]\n+\n+        # Sanitize any files in the list that are symlinks outside of the specified extraction directory.\n+        for file_name in file_list:\n+            if os.path.islink(file_name):\n+                linktarget = os.path.realpath(file_name)\n+                binwalk.core.common.debug(\"Analysing symlink: %s -> %s\" % (file_name, linktarget))\n+\n+                if not linktarget.startswith(extraction_directory) and linktarget != os.devnull:\n+                    binwalk.core.common.warning(\"Symlink points outside of the extraction directory: %s -> %s; changing link target to %s for security purposes.\" % (file_name, linktarget, os.devnull))\n+                    os.remove(file_name)\n+                    os.symlink(os.devnull, file_name)"
        },
        {
          "filename": "testing/tests/input-vectors/dirtraversal.tar",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "testing/tests/test_dirtraversal.py",
          "status": "added",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -0,0 +1,33 @@\n+import os\n+import binwalk\n+from nose.tools import eq_, ok_, assert_equal, assert_not_equal\n+\n+def test_dirtraversal():\n+    '''\n+    Test: Open dirtraversal.tar, scan for signatures.\n+    Verify that dangerous symlinks have been sanitized.\n+    '''\n+    bad_symlink_file_list = ['foo', 'bar', 'subdir/foo2', 'subdir/bar2']\n+    good_symlink_file_list = ['subdir/README_link', 'README2_link']\n+\n+    input_vector_file = os.path.join(os.path.dirname(__file__),\n+                                     \"input-vectors\",\n+                                     \"dirtraversal.tar\")\n+\n+    output_directory = os.path.join(os.path.dirname(__file__),\n+                                    \"input-vectors\",\n+                                    \"_dirtraversal.tar.extracted\")\n+\n+    scan_result = binwalk.scan(input_vector_file,\n+                               signature=True,\n+                               extract=True,\n+                               quiet=True)[0]\n+\n+    # Make sure the bad symlinks have been sanitized and the\n+    # good symlinks have not been sanitized.\n+    for symlink in bad_symlink_file_list:\n+        linktarget = os.path.realpath(os.path.join(output_directory, symlink))\n+        assert_equal(linktarget, os.devnull)\n+    for symlink in good_symlink_file_list:\n+        linktarget = os.path.realpath(os.path.join(output_directory, symlink))\n+        assert_not_equal(linktarget, os.devnull)"
        },
        {
          "filename": "testing/tests/test_firmware_zip.py",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -10,8 +10,6 @@ def test_firmware_zip():\n     '''\n     expected_results = [\n \t[0, 'Zip archive data, at least v1.0 to extract, name: dir655_revB_FW_203NA/'],\n-\t[51, 'Zip archive data, at least v2.0 to extract, compressed size: 6395868, uncompressed size: 6422554, name: dir655_revB_FW_203NA/DIR655B1_FW203NAB02.bin'],\n-\t[6395993, 'Zip archive data, at least v2.0 to extract, compressed size: 14243, uncompressed size: 61440, name: dir655_revB_FW_203NA/dir655_revB_release_notes_203NA.doc'],\n \t[6410581, 'End of Zip archive, footer length: 22'],\n \n     ]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 4,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "ab6636c542f88da454146a369c698330f2ec4529",
            "date": "2025-01-07T18:40:41Z",
            "author_login": "devttys0"
          },
          {
            "sha": "1d01a5f5ee471b0ea4f441ee0058509c486a058a",
            "date": "2025-01-07T17:45:48Z",
            "author_login": "rhilseth"
          },
          {
            "sha": "2f6ca77de2098e20f924ad765702a7cfe1ed5d5c",
            "date": "2025-01-06T20:30:05Z",
            "author_login": "devttys0"
          },
          {
            "sha": "a1df68bfb81ce0d033ff146ac2882a59ec617cb6",
            "date": "2025-01-06T20:28:20Z",
            "author_login": "devttys0"
          },
          {
            "sha": "9b14423623bf0128d69be329bd5a3dfb0f5a88fa",
            "date": "2025-01-06T20:17:17Z",
            "author_login": "devttys0"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-61",
    "description": "A vulnerability, which was classified as problematic, was found in ReFirm Labs binwalk up to 2.3.2. Affected is an unknown function of the file src/binwalk/modules/extractor.py of the component Archive Extraction Handler. The manipulation leads to symlink following. It is possible to launch the attack remotely. Upgrading to version 2.3.3 is able to address this issue. The name of the patch is fa0c0bd59b8588814756942fe4cb5452e76c1dcd. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216876.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-12-27T11:15:10.640",
    "last_modified": "2024-11-21T06:37:19.477",
    "fix_date": "2021-09-10T17:46:40Z"
  },
  "references": [
    {
      "url": "https://github.com/ReFirmLabs/binwalk/commit/fa0c0bd59b8588814756942fe4cb5452e76c1dcd",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ReFirmLabs/binwalk/pull/556",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ReFirmLabs/binwalk/releases/tag/v2.3.3",
      "source": "cna@vuldb.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.216876",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.216876",
      "source": "cna@vuldb.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ReFirmLabs/binwalk/commit/fa0c0bd59b8588814756942fe4cb5452e76c1dcd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ReFirmLabs/binwalk/pull/556",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/ReFirmLabs/binwalk/releases/tag/v2.3.3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.216876",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.216876",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:23.215634",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "binwalk",
    "owner": "ReFirmLabs",
    "created_at": "2013-11-15T20:45:40Z",
    "updated_at": "2025-01-14T15:51:44Z",
    "pushed_at": "2025-01-07T18:40:42Z",
    "size": 51532,
    "stars": 11831,
    "forks": 1589,
    "open_issues": 38,
    "watchers": 11831,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Rust": 794275,
      "Dockerfile": 1244,
      "Shell": 1062
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T16:13:51.012782"
  }
}