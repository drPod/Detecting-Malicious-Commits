{
  "cve_id": "CVE-2021-4325",
  "github_data": {
    "repository": "nhn/tui.chart",
    "fix_commit": "1a3f455d17df379e11b501bb5ba1dd1bcc41d63e",
    "related_commits": [
      "1a3f455d17df379e11b501bb5ba1dd1bcc41d63e",
      "1a3f455d17df379e11b501bb5ba1dd1bcc41d63e"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "1a3f455d17df379e11b501bb5ba1dd1bcc41d63e",
      "commit_date": "2021-03-12T01:26:15Z",
      "author": {
        "login": "arjunshibu",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: Security fix for Cross-Site Scripting Vulnerability in the legend fields",
        "length": 216,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 220,
        "additions": 218,
        "deletions": 2
      },
      "files": [
        {
          "filename": "apps/chart/src/component/tooltip.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -14,6 +14,7 @@ import { isBoolean, isNumber, isString } from '@src/helpers/utils';\n import { SeriesDataType, TooltipTemplateFunc, TooltipFormatter } from '@t/options';\n import { TooltipTheme } from '@t/theme';\n import { getTranslateString } from '@src/helpers/style';\n+import sanitizeHtml from '@src/helpers/htmlSanitizer';\n \n type TooltipInfoModels = { [key in TooltipModelName]: TooltipInfo[] };\n \n@@ -140,8 +141,8 @@ export default class Tooltip extends Component {\n     this.tooltipContainerEl.innerHTML = this.templateFunc(\n       model,\n       {\n-        header: tooltipTemplates.defaultHeader(model, this.theme),\n-        body: getBodyTemplate(model.templateType)(model, this.theme),\n+        header: sanitizeHtml(tooltipTemplates.defaultHeader(model, this.theme), true),\n+        body: sanitizeHtml(getBodyTemplate(model.templateType)(model, this.theme), true),\n       },\n       this.theme\n     );"
        },
        {
          "filename": "apps/chart/src/helpers/dom.ts",
          "status": "added",
          "additions": 59,
          "deletions": 0,
          "patch": "@@ -0,0 +1,59 @@\n+/**\n+ * @fileoverview DOM Utils\n+ * @author NHN FE Development Lab <dl_javascript@nhn.com>\n+ */\n+import { toArray } from './utils';\n+\n+/**\n+ * Find nodes matching by selector\n+ * @param {HTMLElement} element - target element\n+ * @param {string} selector - selector to find nodes\n+ * @returns {Array.<Node>} found nodes\n+ * @ignore\n+ */\n+export function findNodes(element: HTMLElement, selector: string) {\n+  const nodeList = toArray(element.querySelectorAll(selector));\n+\n+  if (nodeList.length) {\n+    return nodeList;\n+  }\n+\n+  return [];\n+}\n+\n+/**\n+ * Removes target node from parent node\n+ * @param {Node} node - target node\n+ * @ignore\n+ */\n+export function removeNode(node: Node) {\n+  if (node.parentNode) {\n+    node.parentNode.removeChild(node);\n+  }\n+}\n+\n+/**\n+ * Finalize html result\n+ * @param {Element} html root element\n+ * @param {boolean} needHtmlText pass true if need html text\n+ * @returns {string|DocumentFragment} result\n+ * @ignore\n+ */\n+export function finalizeHtml(html: Element, needHtmlText: boolean) {\n+  let result;\n+\n+  if (needHtmlText) {\n+    result = html.innerHTML;\n+  } else {\n+    const frag = document.createDocumentFragment();\n+    const childNodes = toArray(html.childNodes);\n+    const { length } = childNodes;\n+\n+    for (let i = 0; i < length; i += 1) {\n+      frag.appendChild(childNodes[i]);\n+    }\n+    result = frag;\n+  }\n+\n+  return result;\n+}"
        },
        {
          "filename": "apps/chart/src/helpers/htmlSanitizer.ts",
          "status": "added",
          "additions": 129,
          "deletions": 0,
          "patch": "@@ -0,0 +1,129 @@\n+/**\n+ * @fileoverview Implements htmlSanitizer\n+ * @author NHN FE Development Lab <dl_javascript@nhn.com>\n+ */\n+import { finalizeHtml, findNodes, removeNode } from './dom';\n+import { isString, toArray } from './utils';\n+\n+const HTML_ATTR_LIST_RX = new RegExp(\n+  '^(abbr|align|alt|axis|bgcolor|border|cellpadding|cellspacing|class|clear|' +\n+    'color|cols|compact|coords|dir|face|headers|height|hreflang|hspace|' +\n+    'ismap|lang|language|nohref|nowrap|rel|rev|rows|rules|' +\n+    'scope|scrolling|shape|size|span|start|summary|tabindex|target|title|type|' +\n+    'valign|value|vspace|width|checked|mathvariant|encoding|id|name|' +\n+    'background|cite|href|longdesc|src|usemap|xlink:href|data-+|checked|style)',\n+  'g'\n+);\n+\n+const SVG_ATTR_LIST_RX = new RegExp(\n+  '^(accent-height|accumulate|additive|alphabetic|arabic-form|ascent|' +\n+    'baseProfile|bbox|begin|by|calcMode|cap-height|class|color|color-rendering|content|' +\n+    'cx|cy|d|dx|dy|descent|display|dur|end|fill|fill-rule|font-family|font-size|font-stretch|' +\n+    'font-style|font-variant|font-weight|from|fx|fy|g1|g2|glyph-name|gradientUnits|hanging|' +\n+    'height|horiz-adv-x|horiz-origin-x|ideographic|k|keyPoints|keySplines|keyTimes|lang|' +\n+    'marker-end|marker-mid|marker-start|markerHeight|markerUnits|markerWidth|mathematical|' +\n+    'max|min|offset|opacity|orient|origin|overline-position|overline-thickness|panose-1|' +\n+    'path|pathLength|points|preserveAspectRatio|r|refX|refY|repeatCount|repeatDur|' +\n+    'requiredExtensions|requiredFeatures|restart|rotate|rx|ry|slope|stemh|stemv|stop-color|' +\n+    'stop-opacity|strikethrough-position|strikethrough-thickness|stroke|stroke-dasharray|' +\n+    'stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|' +\n+    'stroke-width|systemLanguage|target|text-anchor|to|transform|type|u1|u2|underline-position|' +\n+    'underline-thickness|unicode|unicode-range|units-per-em|values|version|viewBox|visibility|' +\n+    'width|widths|x|x-height|x1|x2|xlink:actuate|xlink:arcrole|xlink:role|xlink:show|xlink:title|' +\n+    'xlink:type|xml:base|xml:lang|xml:space|xmlns|xmlns:xlink|y|y1|y2|zoomAndPan)',\n+  'g'\n+);\n+\n+const XSS_ATTR_RX = /href|src|background/gi;\n+const XSS_VALUE_RX = /((java|vb|live)script|x):/gi;\n+const ON_EVENT_RX = /^on\\S+/;\n+\n+/**\n+ * htmlSanitizer\n+ * @param {string} html - html\n+ * @param {boolean} [needHtmlText] - pass true if need html text\n+ * @returns {string} - result\n+ * @ignore\n+ */\n+function htmlSanitizer(html: string, needHtmlText: boolean) {\n+  const root = document.createElement('div');\n+\n+  if (isString(html)) {\n+    html = html.replace(/<!--[\\s\\S]*?-->/g, '');\n+    root.innerHTML = html;\n+  } else {\n+    root.appendChild(html);\n+  }\n+\n+  removeUnnecessaryTags(root);\n+  leaveOnlyWhitelistAttribute(root);\n+\n+  return finalizeHtml(root, needHtmlText);\n+}\n+\n+/**\n+ * Removes unnecessary tags.\n+ * @param {HTMLElement} html - root element\n+ * @private\n+ */\n+function removeUnnecessaryTags(html: HTMLElement) {\n+  const removedTags = findNodes(\n+    html,\n+    'script, iframe, textarea, form, button, select, input, meta, style, link, title, embed, object, details, summary'\n+  );\n+\n+  removedTags.forEach((node) => {\n+    removeNode(node);\n+  });\n+}\n+\n+/**\n+ * Checks whether the attribute and value that causing XSS or not.\n+ * @param {string} attrName - name of attribute\n+ * @param {string} attrValue - value of attirbute\n+ * @private\n+ */\n+function isXSSAttribute(attrName: string, attrValue: string) {\n+  return attrName.match(XSS_ATTR_RX) && attrValue.match(XSS_VALUE_RX);\n+}\n+\n+/**\n+ * Removes attributes of blacklist from node.\n+ * @param {HTMLElement} node - node to remove attributes\n+ * @param {Array<NodeList>} blacklistAttrs - attributes of blacklist\n+ * @private\n+ */\n+function removeBlacklistAttributes(node: HTMLElement, blacklistAttrs: Array<NodeList>) {\n+  toArray(blacklistAttrs).forEach(({ name }) => {\n+    if (ON_EVENT_RX.test(name)) {\n+      node[name] = null;\n+    }\n+\n+    if (node.getAttribute(name)) {\n+      node.removeAttribute(name);\n+    }\n+  });\n+}\n+\n+/**\n+ * Leaves only white list attributes.\n+ * @param {HTMLElement} html - root element\n+ * @private\n+ */\n+function leaveOnlyWhitelistAttribute(html: HTMLElement) {\n+  findNodes(html, '*').forEach((node) => {\n+    const { attributes } = node;\n+    const blacklist = toArray(attributes).filter((attr) => {\n+      const { name, value } = attr;\n+      const htmlAttr = name.match(HTML_ATTR_LIST_RX);\n+      const svgAttr = name.match(SVG_ATTR_LIST_RX);\n+      const xssAttr = htmlAttr && isXSSAttribute(name, value);\n+\n+      return (!htmlAttr && !svgAttr) || xssAttr;\n+    });\n+\n+    removeBlacklistAttributes(node, blacklist);\n+  });\n+}\n+\n+export default htmlSanitizer;"
        },
        {
          "filename": "apps/chart/src/helpers/utils.ts",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -54,6 +54,19 @@ export function forEach<T extends object, K extends Extract<keyof T, string>, V\n   }\n }\n \n+export function forEachArray(arr: NodeList, iteratee: Function, context: any) {\n+  var index = 0;\n+  var len = arr.length;\n+\n+  context = context || null;\n+\n+  for (; index < len; index += 1) {\n+    if (iteratee.call(context, arr[index], index, arr) === false) {\n+      break;\n+    }\n+  }\n+}\n+\n export function range(start: number, stop?: number, step?: number) {\n   if (isUndefined(stop)) {\n     stop = start || 0;\n@@ -76,6 +89,20 @@ export function range(start: number, stop?: number, step?: number) {\n   return arr;\n }\n \n+export function toArray(arrayLike: any): Array<any> {\n+  var arr;\n+  try {\n+    arr = Array.prototype.slice.call(arrayLike);\n+  } catch (e) {\n+    arr = [];\n+    forEachArray(arrayLike, function(value) {\n+      arr.push(value);\n+    }, null);\n+  }\n+\n+  return arr;\n+}\n+\n export function includes<T>(arr: T[], searchItem: T, searchIndex?: number) {\n   if (typeof searchIndex === 'number' && arr[searchIndex] !== searchItem) {\n     return false;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "e70ec64e3ed86d82d43a2edda3b84efea3eb3fcf",
            "date": "2023-07-19T05:39:28Z",
            "author_login": "heenakwag"
          },
          {
            "sha": "70de804593c2f39ffcf4432bf60a5858606889c3",
            "date": "2023-07-19T00:03:26Z",
            "author_login": "heenakwag"
          },
          {
            "sha": "9a7134442444c18dcbef26ea8987c2ed543f50fa",
            "date": "2023-07-19T00:01:28Z",
            "author_login": "heenakwag"
          },
          {
            "sha": "e0fe142cd52ebc4a48d39f339969256d9fba0b4d",
            "date": "2022-12-21T03:09:33Z",
            "author_login": "jwlee1108"
          },
          {
            "sha": "8076899d06261b64157dbb324ce5504c09b723ea",
            "date": "2022-12-21T03:09:22Z",
            "author_login": "jwlee1108"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "A vulnerability, which was classified as problematic, has been found in NHN TOAST UI Chart 4.1.4. This issue affects some unknown processing of the component Legend Handler. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 4.2.0 is able to address this issue. The identifier of the patch is 1a3f455d17df379e11b501bb5ba1dd1bcc41d63e. It is recommended to upgrade the affected component. The identifier VDB-221501 was assigned to this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-02-22T00:15:11.113",
    "last_modified": "2024-11-21T06:37:25.337",
    "fix_date": "2021-03-12T01:26:15Z"
  },
  "references": [
    {
      "url": "https://github.com/nhn/tui.chart/commit/1a3f455d17df379e11b501bb5ba1dd1bcc41d63e",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nhn/tui.chart/pull/604",
      "source": "cna@vuldb.com",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/nhn/tui.chart/releases/tag/v4.2.0",
      "source": "cna@vuldb.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.221501",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.221501",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nhn/tui.chart/commit/1a3f455d17df379e11b501bb5ba1dd1bcc41d63e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/nhn/tui.chart/pull/604",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking"
      ]
    },
    {
      "url": "https://github.com/nhn/tui.chart/releases/tag/v4.2.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.221501",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.221501",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:04.091407",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "tui.chart",
    "owner": "nhn",
    "created_at": "2015-07-31T01:18:56Z",
    "updated_at": "2025-01-21T20:47:44Z",
    "pushed_at": "2023-10-05T00:37:48Z",
    "size": 88663,
    "stars": 5358,
    "forks": 326,
    "open_issues": 24,
    "watchers": 5358,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.11",
      "main"
    ],
    "languages": {
      "TypeScript": 1784666,
      "HTML": 840435,
      "JavaScript": 26512,
      "CSS": 5084
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-26T08:27:08.479321"
  }
}