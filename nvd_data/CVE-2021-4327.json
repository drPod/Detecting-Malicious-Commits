{
  "cve_id": "CVE-2021-4327",
  "github_data": {
    "repository": "SerenityOS/serenity",
    "fix_commit": "f6c6047e49f1517778f5565681fb64750b14bf60",
    "related_commits": [
      "f6c6047e49f1517778f5565681fb64750b14bf60",
      "f6c6047e49f1517778f5565681fb64750b14bf60"
    ],
    "patch_url": "https://github.com/SerenityOS/serenity/commit/f6c6047e49f1517778f5565681fb64750b14bf60.patch",
    "fix_commit_details": {
      "sha": "f6c6047e49f1517778f5565681fb64750b14bf60",
      "commit_date": "2021-01-27T06:50:46Z",
      "author": {
        "login": "awesomekling",
        "type": "User",
        "stats": {
          "total_commits": 16368,
          "average_weekly_commits": 49.90243902439025,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 314
        }
      },
      "commit_message": {
        "title": "LibJS: Add overflow checks when creating TypedArray from ArrayBuffer",
        "length": 107,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 35,
        "additions": 28,
        "deletions": 7
      },
      "files": [
        {
          "filename": "Userland/Libraries/LibJS/Runtime/TypedArray.cpp",
          "status": "modified",
          "additions": 23,
          "deletions": 7,
          "patch": "@@ -54,7 +54,7 @@ static void initialize_typed_array_from_array_buffer(GlobalObject& global_object\n     }\n     // FIXME: 8. If IsDetachedBuffer(buffer) is true, throw a TypeError exception.\n     auto buffer_byte_length = array_buffer.byte_length();\n-    size_t new_byte_length;\n+    Checked<size_t> new_byte_length;\n     if (length.is_undefined()) {\n         if (buffer_byte_length % element_size != 0) {\n             vm.throw_exception<RangeError>(global_object, ErrorType::TypedArrayInvalidBufferLength, typed_array.class_name(), element_size, buffer_byte_length);\n@@ -64,18 +64,34 @@ static void initialize_typed_array_from_array_buffer(GlobalObject& global_object\n             vm.throw_exception<RangeError>(global_object, ErrorType::TypedArrayOutOfRangeByteOffset, offset, buffer_byte_length);\n             return;\n         }\n-        new_byte_length = buffer_byte_length - offset;\n+        new_byte_length = buffer_byte_length;\n+        new_byte_length -= offset;\n     } else {\n-        new_byte_length = new_length * element_size;\n-        if (offset + new_byte_length > buffer_byte_length) {\n-            vm.throw_exception<RangeError>(global_object, ErrorType::TypedArrayOutOfRangeByteOffsetOrLength, offset, offset + new_byte_length, buffer_byte_length);\n+        new_byte_length = new_length;\n+        new_byte_length *= element_size;\n+\n+        Checked<size_t> new_byte_end = new_byte_length;\n+        new_byte_end += offset;\n+\n+        if (new_byte_end.has_overflow()) {\n+            vm.throw_exception<RangeError>(global_object, ErrorType::InvalidLength, \"typed array\");\n+            return;\n+        }\n+\n+        if (new_byte_end.value() > buffer_byte_length) {\n+            vm.throw_exception<RangeError>(global_object, ErrorType::TypedArrayOutOfRangeByteOffsetOrLength, offset, new_byte_end.value(), buffer_byte_length);\n             return;\n         }\n     }\n+    if (new_byte_length.has_overflow()) {\n+        vm.throw_exception<RangeError>(global_object, ErrorType::InvalidLength, \"typed array\");\n+        return;\n+    }\n+\n     typed_array.set_viewed_array_buffer(&array_buffer);\n-    typed_array.set_byte_length(new_byte_length);\n+    typed_array.set_byte_length(new_byte_length.value());\n     typed_array.set_byte_offset(offset);\n-    typed_array.set_array_length(new_byte_length / element_size);\n+    typed_array.set_array_length(new_byte_length.value() / element_size);\n }\n \n void TypedArrayBase::visit_edges(Visitor& visitor)"
        },
        {
          "filename": "Userland/Libraries/LibJS/Tests/builtins/TypedArray/typed-array-from-ArrayBuffer-bad-offset.js",
          "status": "added",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -0,0 +1,5 @@\n+test(\"construct Uint32Array with zero-length ArrayBuffer and overflowing offset\", () => {\n+    expect(() => new Uint32Array(new ArrayBuffer(0), 4, 1024 * 1024 * 1024 - 1)).toThrow(\n+        RangeError\n+    );\n+});"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6127f031081827bae32076085d105bc7b10671ca",
            "date": "2025-01-12T16:37:48Z",
            "author_login": "spholz"
          },
          {
            "sha": "60bb8edd7bb28ce378c9c723c29d75cc9fcd3bbe",
            "date": "2025-01-10T19:10:42Z",
            "author_login": "spholz"
          },
          {
            "sha": "980bc4ddf013acb72b3a8861ad51727054c2f879",
            "date": "2025-01-10T19:17:58Z",
            "author_login": "spholz"
          },
          {
            "sha": "e88594005bbe474291870c1cf9ed87dc0d8b72cd",
            "date": "2025-01-13T14:33:56Z",
            "author_login": "spholz"
          },
          {
            "sha": "0d11e70cfeb0a77fcc4cb351d5af5e81209ed1fd",
            "date": "2025-01-10T17:53:29Z",
            "author_login": "spholz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
    "cwe_id": "CWE-190",
    "description": "A vulnerability was found in SerenityOS. It has been rated as critical. Affected by this issue is the function initialize_typed_array_from_array_buffer in the library Userland/Libraries/LibJS/Runtime/TypedArray.cpp. The manipulation leads to integer overflow. The exploit has been disclosed to the public and may be used. Continious delivery with rolling releases is used by this product. Therefore, no version details of affected nor updated releases are available. The patch is identified as f6c6047e49f1517778f5565681fb64750b14bf60. It is recommended to apply a patch to fix this issue. VDB-222074 is the identifier assigned to this vulnerability.",
    "attack_vector": "ADJACENT_NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-03-01T11:15:12.817",
    "last_modified": "2024-11-21T06:37:25.653",
    "fix_date": "2021-01-27T06:50:46Z"
  },
  "references": [
    {
      "url": "https://devcraft.io/2021/02/11/serenityos-writing-a-full-chain-exploit.html",
      "source": "cna@vuldb.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SerenityOS/serenity/commit/f6c6047e49f1517778f5565681fb64750b14bf60",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.222074",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.222074",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://devcraft.io/2021/02/11/serenityos-writing-a-full-chain-exploit.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/SerenityOS/serenity/commit/f6c6047e49f1517778f5565681fb64750b14bf60",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.222074",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://vuldb.com/?id.222074",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:05:06.788585",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "serenity",
    "owner": "SerenityOS",
    "created_at": "2018-12-02T19:28:41Z",
    "updated_at": "2025-01-14T10:21:35Z",
    "pushed_at": "2025-01-13T23:16:43Z",
    "size": 235144,
    "stars": 30959,
    "forks": 3205,
    "open_issues": 733,
    "watchers": 30959,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C++": 45614077,
      "JavaScript": 2388122,
      "HTML": 1772086,
      "CMake": 436652,
      "Shell": 419673,
      "C": 413743,
      "Objective-C++": 237909,
      "Game Maker Language": 227939,
      "Python": 206707,
      "Assembly": 55972,
      "CSS": 31427,
      "Objective-C": 13832,
      "Dockerfile": 2690,
      "Nix": 1940,
      "Zig": 1475,
      "Lua": 1121,
      "GLSL": 533,
      "Makefile": 219,
      "NASL": 197
    },
    "commit_activity": {
      "total_commits_last_year": 6164,
      "avg_commits_per_week": 118.53846153846153,
      "days_active_last_year": 356
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-2-clause"
    },
    "collected_at": "2025-01-14T14:51:53.328396"
  }
}