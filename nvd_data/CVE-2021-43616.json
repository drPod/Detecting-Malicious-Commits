{
  "cve_id": "CVE-2021-43616",
  "github_data": {
    "repository": "npm/cli",
    "fix_commit": "457e0ae61bbc55846f5af44afa4066921923490f",
    "related_commits": [
      "457e0ae61bbc55846f5af44afa4066921923490f",
      "457e0ae61bbc55846f5af44afa4066921923490f"
    ],
    "patch_url": "https://github.com/npm/cli/commit/457e0ae61bbc55846f5af44afa4066921923490f.patch",
    "fix_commit_details": {
      "sha": "457e0ae61bbc55846f5af44afa4066921923490f",
      "commit_date": "2022-02-03T03:10:22Z",
      "author": {
        "login": "ruyadorno",
        "type": "User",
        "stats": {
          "total_commits": 406,
          "average_weekly_commits": 0.5178571428571429,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 74
        }
      },
      "commit_message": {
        "title": "fix(ci): lock file validation",
        "length": 393,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 304,
        "additions": 304,
        "deletions": 0
      },
      "files": [
        {
          "filename": "lib/commands/ci.js",
          "status": "modified",
          "additions": 23,
          "deletions": 0,
          "patch": "@@ -6,6 +6,7 @@ const runScript = require('@npmcli/run-script')\n const fs = require('fs')\n const readdir = util.promisify(fs.readdir)\n const log = require('../utils/log-shim.js')\n+const validateLockfile = require('../utils/validate-lockfile.js')\n \n const removeNodeModules = async where => {\n   const rimrafOpts = { glob: false }\n@@ -55,6 +56,28 @@ class CI extends ArboristWorkspaceCmd {\n       }),\n       removeNodeModules(where),\n     ])\n+\n+    // retrieves inventory of packages from loaded virtual tree (lock file)\n+    const virtualInventory = new Map(arb.virtualTree.inventory)\n+\n+    // build ideal tree step needs to come right after retrieving the virtual\n+    // inventory since it's going to erase the previous ref to virtualTree\n+    await arb.buildIdealTree()\n+\n+    // verifies that the packages from the ideal tree will match\n+    // the same versions that are present in the virtual tree (lock file)\n+    // throws a validation error in case of mismatches\n+    const errors = validateLockfile(virtualInventory, arb.idealTree.inventory)\n+    if (errors.length) {\n+      throw new Error(\n+        '`npm ci` can only install packages when your package.json and ' +\n+        'package-lock.json or npm-shrinkwrap.json are in sync. Please ' +\n+        'update your lock file with `npm install` ' +\n+        'before continuing.\\n\\n' +\n+        errors.join('\\n') + '\\n'\n+      )\n+    }\n+\n     await arb.reify(opts)\n \n     const ignoreScripts = this.npm.config.get('ignore-scripts')"
        },
        {
          "filename": "lib/utils/validate-lockfile.js",
          "status": "added",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -0,0 +1,29 @@\n+// compares the inventory of package items in the tree\n+// that is about to be installed (idealTree) with the inventory\n+// of items stored in the package-lock file (virtualTree)\n+//\n+// Returns empty array if no errors found or an array populated\n+// with an entry for each validation error found.\n+function validateLockfile (virtualTree, idealTree) {\n+  const errors = []\n+\n+  // loops through the inventory of packages resulted by ideal tree,\n+  // for each package compares the versions with the version stored in the\n+  // package-lock and adds an error to the list in case of mismatches\n+  for (const [key, entry] of idealTree.entries()) {\n+    const lock = virtualTree.get(key)\n+\n+    if (!lock) {\n+      errors.push(`Missing: ${entry.name}@${entry.version} from lock file`)\n+      continue\n+    }\n+\n+    if (entry.version !== lock.version) {\n+      errors.push(`Invalid: lock file's ${lock.name}@${lock.version} does ` +\n+      `not satisfy ${entry.name}@${entry.version}`)\n+    }\n+  }\n+  return errors\n+}\n+\n+module.exports = validateLockfile"
        },
        {
          "filename": "smoke-tests/index.js",
          "status": "modified",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -21,6 +21,7 @@ t.cleanSnapshot = s =>\n     .replace(/\\r\\n/g, '\\n')\n     .replace(/ \\(in a browser\\)/g, '')\n     .replace(/^npm@.* /gm, 'npm ')\n+    .replace(/^.*debug-[0-9]+.log$/gm, '')\n \n // setup server\n const { start, stop, registry } = require('./server.js')\n@@ -320,3 +321,31 @@ t.test('npm update --save', async t => {\n     'should have expected update --save lockfile result'\n   )\n })\n+\n+t.test('npm ci', async t => {\n+  await exec(`${npmBin} uninstall abbrev`)\n+  await exec(`${npmBin} install abbrev@1.0.4 --save-exact`)\n+\n+  t.equal(\n+    JSON.parse(readFile('package-lock.json')).packages['node_modules/abbrev'].version,\n+    '1.0.4',\n+    'should have stored exact installed version'\n+  )\n+\n+  await exec(`${npmBin} pkg set \"dependencies.abbrev=^1.1.1\"`)\n+\n+  try {\n+    const npmOpts = [\n+      `--registry=${registry}`,\n+      `--cache=\"${cacheLocation}\"`,\n+      `--userconfig=\"${userconfigLocation}\"`,\n+      '--no-audit',\n+      '--no-update-notifier',\n+      '--loglevel=error',\n+    ].join(' ')\n+    const npmBin = `\"${process.execPath}\" \"${npmLocation}\" ${npmOpts}`\n+    await exec(`${npmBin} ci`)\n+  } catch (err) {\n+    t.matchSnapshot(err.stderr, 'should throw mismatch deps in lock file error')\n+  }\n+})"
        },
        {
          "filename": "tap-snapshots/smoke-tests/index.js.test.cjs",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -40,6 +40,17 @@ Configuration fields: npm help 7 config\n \n npm {CWD}\n \n+`\n+\n+exports[`smoke-tests/index.js TAP npm ci > should throw mismatch deps in lock file error 1`] = `\n+npm ERR! \\`npm ci\\` can only install packages when your package.json and package-lock.json or npm-shrinkwrap.json are in sync. Please update your lock file with \\`npm install\\` before continuing.\n+npm ERR! \n+npm ERR! Invalid: lock file's abbrev@1.0.4 does not satisfy abbrev@1.1.1\n+npm ERR! \n+\n+npm ERR! A complete log of this run can be found in:\n+\n+\n `\n \n exports[`smoke-tests/index.js TAP npm diff > should have expected diff output 1`] = `"
        },
        {
          "filename": "tap-snapshots/test/lib/commands/ci.js.test.cjs",
          "status": "added",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -0,0 +1,13 @@\n+/* IMPORTANT\n+ * This snapshot file is auto-generated, but designed for humans.\n+ * It should be checked into source control and tracked carefully.\n+ * Re-generate by setting TAP_SNAPSHOT=1 and running tests.\n+ * Make sure to inspect the output below.  Do not ignore changes!\n+ */\n+'use strict'\n+exports[`test/lib/commands/ci.js TAP should throw error when ideal inventory mismatches virtual > must match snapshot 1`] = `\n+\\`npm ci\\` can only install packages when your package.json and package-lock.json or npm-shrinkwrap.json are in sync. Please update your lock file with \\`npm install\\` before continuing.\n+\n+Invalid: lock file's foo@1.0.0 does not satisfy foo@2.0.0\n+\n+`"
        },
        {
          "filename": "tap-snapshots/test/lib/utils/validate-lockfile.js.test.cjs",
          "status": "added",
          "additions": 35,
          "deletions": 0,
          "patch": "@@ -0,0 +1,35 @@\n+/* IMPORTANT\n+ * This snapshot file is auto-generated, but designed for humans.\n+ * It should be checked into source control and tracked carefully.\n+ * Re-generate by setting TAP_SNAPSHOT=1 and running tests.\n+ * Make sure to inspect the output below.  Do not ignore changes!\n+ */\n+'use strict'\n+exports[`test/lib/utils/validate-lockfile.js TAP extra inventory items on idealTree > should have missing entries error 1`] = `\n+Array [\n+  \"Missing: baz@3.0.0 from lock file\",\n+]\n+`\n+\n+exports[`test/lib/utils/validate-lockfile.js TAP extra inventory items on virtualTree > should have no errors if finding virtualTree extra items 1`] = `\n+Array []\n+`\n+\n+exports[`test/lib/utils/validate-lockfile.js TAP identical inventory for both idealTree and virtualTree > should have no errors on identical inventories 1`] = `\n+Array []\n+`\n+\n+exports[`test/lib/utils/validate-lockfile.js TAP mismatching versions on inventory > should have errors for each mismatching version 1`] = `\n+Array [\n+  \"Invalid: lock file's foo@1.0.0 does not satisfy foo@2.0.0\",\n+  \"Invalid: lock file's bar@2.0.0 does not satisfy bar@3.0.0\",\n+]\n+`\n+\n+exports[`test/lib/utils/validate-lockfile.js TAP missing virtualTree inventory > should have errors for each mismatching version 1`] = `\n+Array [\n+  \"Missing: foo@1.0.0 from lock file\",\n+  \"Missing: bar@2.0.0 from lock file\",\n+  \"Missing: baz@3.0.0 from lock file\",\n+]\n+`"
        },
        {
          "filename": "test/lib/commands/ci.js",
          "status": "modified",
          "additions": 82,
          "deletions": 0,
          "patch": "@@ -19,6 +19,17 @@ t.test('should ignore scripts with --ignore-scripts', async t => {\n       this.reify = () => {\n         REIFY_CALLED = true\n       }\n+      this.buildIdealTree = () => {}\n+      this.virtualTree = {\n+        inventory: new Map([\n+          ['foo', { name: 'foo', version: '1.0.0' }],\n+        ]),\n+      }\n+      this.idealTree = {\n+        inventory: new Map([\n+          ['foo', { name: 'foo', version: '1.0.0' }],\n+        ]),\n+      }\n     },\n   })\n \n@@ -99,6 +110,17 @@ t.test('should use Arborist and run-script', async t => {\n       this.reify = () => {\n         t.ok(true, 'reify is called')\n       }\n+      this.buildIdealTree = () => {}\n+      this.virtualTree = {\n+        inventory: new Map([\n+          ['foo', { name: 'foo', version: '1.0.0' }],\n+        ]),\n+      }\n+      this.idealTree = {\n+        inventory: new Map([\n+          ['foo', { name: 'foo', version: '1.0.0' }],\n+        ]),\n+      }\n     },\n     rimraf: (path, ...args) => {\n       actualRimrafs++\n@@ -138,6 +160,17 @@ t.test('should pass flatOptions to Arborist.reify', async t => {\n       this.reify = async (options) => {\n         t.equal(options.production, true, 'should pass flatOptions to Arborist.reify')\n       }\n+      this.buildIdealTree = () => {}\n+      this.virtualTree = {\n+        inventory: new Map([\n+          ['foo', { name: 'foo', version: '1.0.0' }],\n+        ]),\n+      }\n+      this.idealTree = {\n+        inventory: new Map([\n+          ['foo', { name: 'foo', version: '1.0.0' }],\n+        ]),\n+      }\n     },\n   })\n   const npm = mockNpm({\n@@ -218,6 +251,17 @@ t.test('should remove existing node_modules before installing', async t => {\n         const nodeModules = contents.filter((path) => path.startsWith('node_modules'))\n         t.same(nodeModules, ['node_modules'], 'should only have the node_modules directory')\n       }\n+      this.buildIdealTree = () => {}\n+      this.virtualTree = {\n+        inventory: new Map([\n+          ['foo', { name: 'foo', version: '1.0.0' }],\n+        ]),\n+      }\n+      this.idealTree = {\n+        inventory: new Map([\n+          ['foo', { name: 'foo', version: '1.0.0' }],\n+        ]),\n+      }\n     },\n   })\n \n@@ -231,3 +275,41 @@ t.test('should remove existing node_modules before installing', async t => {\n \n   await ci.exec(null)\n })\n+\n+t.test('should throw error when ideal inventory mismatches virtual', async t => {\n+  const CI = t.mock('../../../lib/commands/ci.js', {\n+    '../../../lib/utils/reify-finish.js': async () => {},\n+    '@npmcli/run-script': ({ event }) => {},\n+    '@npmcli/arborist': function () {\n+      this.loadVirtual = async () => {}\n+      this.reify = () => {}\n+      this.buildIdealTree = () => {}\n+      this.virtualTree = {\n+        inventory: new Map([\n+          ['foo', { name: 'foo', version: '1.0.0' }],\n+        ]),\n+      }\n+      this.idealTree = {\n+        inventory: new Map([\n+          ['foo', { name: 'foo', version: '2.0.0' }],\n+        ]),\n+      }\n+    },\n+  })\n+\n+  const npm = mockNpm({\n+    globalDir: 'path/to/node_modules/',\n+    prefix: 'foo',\n+    config: {\n+      global: false,\n+      'ignore-scripts': true,\n+    },\n+  })\n+  const ci = new CI(npm)\n+\n+  try {\n+    await ci.exec([])\n+  } catch (err) {\n+    t.matchSnapshot(err.message)\n+  }\n+})"
        },
        {
          "filename": "test/lib/utils/validate-lockfile.js",
          "status": "added",
          "additions": 82,
          "deletions": 0,
          "patch": "@@ -0,0 +1,82 @@\n+const t = require('tap')\n+const validateLockfile = require('../../../lib/utils/validate-lockfile.js')\n+\n+t.test('identical inventory for both idealTree and virtualTree', async t => {\n+  t.matchSnapshot(\n+    validateLockfile(\n+      new Map([\n+        ['foo', { name: 'foo', version: '1.0.0' }],\n+        ['bar', { name: 'bar', version: '2.0.0' }],\n+      ]),\n+      new Map([\n+        ['foo', { name: 'foo', version: '1.0.0' }],\n+        ['bar', { name: 'bar', version: '2.0.0' }],\n+      ])\n+    ),\n+    'should have no errors on identical inventories'\n+  )\n+})\n+\n+t.test('extra inventory items on idealTree', async t => {\n+  t.matchSnapshot(\n+    validateLockfile(\n+      new Map([\n+        ['foo', { name: 'foo', version: '1.0.0' }],\n+        ['bar', { name: 'bar', version: '2.0.0' }],\n+      ]),\n+      new Map([\n+        ['foo', { name: 'foo', version: '1.0.0' }],\n+        ['bar', { name: 'bar', version: '2.0.0' }],\n+        ['baz', { name: 'baz', version: '3.0.0' }],\n+      ])\n+    ),\n+    'should have missing entries error'\n+  )\n+})\n+\n+t.test('extra inventory items on virtualTree', async t => {\n+  t.matchSnapshot(\n+    validateLockfile(\n+      new Map([\n+        ['foo', { name: 'foo', version: '1.0.0' }],\n+        ['bar', { name: 'bar', version: '2.0.0' }],\n+        ['baz', { name: 'baz', version: '3.0.0' }],\n+      ]),\n+      new Map([\n+        ['foo', { name: 'foo', version: '1.0.0' }],\n+        ['bar', { name: 'bar', version: '2.0.0' }],\n+      ])\n+    ),\n+    'should have no errors if finding virtualTree extra items'\n+  )\n+})\n+\n+t.test('mismatching versions on inventory', async t => {\n+  t.matchSnapshot(\n+    validateLockfile(\n+      new Map([\n+        ['foo', { name: 'foo', version: '1.0.0' }],\n+        ['bar', { name: 'bar', version: '2.0.0' }],\n+      ]),\n+      new Map([\n+        ['foo', { name: 'foo', version: '2.0.0' }],\n+        ['bar', { name: 'bar', version: '3.0.0' }],\n+      ])\n+    ),\n+    'should have errors for each mismatching version'\n+  )\n+})\n+\n+t.test('missing virtualTree inventory', async t => {\n+  t.matchSnapshot(\n+    validateLockfile(\n+      new Map([]),\n+      new Map([\n+        ['foo', { name: 'foo', version: '1.0.0' }],\n+        ['bar', { name: 'bar', version: '2.0.0' }],\n+        ['baz', { name: 'baz', version: '3.0.0' }],\n+      ])\n+    ),\n+    'should have errors for each mismatching version'\n+  )\n+})"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 6,
        "unique_directories": 8,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "866b5ee3ae5ed508ecbe832d01f5ebd6b00f6789",
            "date": "2025-01-14T17:26:50Z",
            "author_login": "reggi"
          },
          {
            "sha": "7f6c9973dc9a4dfebd76e52e060a9d8496b8bd98",
            "date": "2025-01-03T18:06:05Z",
            "author_login": "wraithgar"
          },
          {
            "sha": "1764a37f1913b6a0811a85d89e029fc1dc79da54",
            "date": "2025-01-03T18:05:44Z",
            "author_login": "wraithgar"
          },
          {
            "sha": "ab9ddc0413374fbf4879da535f82e03bc4e62cf3",
            "date": "2024-12-20T16:55:56Z",
            "author_login": "bdehamer"
          },
          {
            "sha": "f7da341322c2f860156e8144b208583596504479",
            "date": "2024-12-16T18:12:35Z",
            "author_login": "wraithgar"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-345",
    "description": "The npm ci command in npm 7.x and 8.x through 8.1.3 proceeds with an installation even if dependency information in package-lock.json differs from package.json. This behavior is inconsistent with the documentation, and makes it easier for attackers to install malware that was supposed to have been blocked by an exact version match requirement in package-lock.json. NOTE: The npm team believes this is not a vulnerability. It would require someone to socially engineer package.json which has different dependencies than package-lock.json. That user would have to have file system or write access to change dependencies. The npm team states preventing malicious actors from socially engineering or gaining file system access is outside the scope of the npm CLI.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-11-13T18:15:07.537",
    "last_modified": "2024-11-21T06:29:31.227",
    "fix_date": "2022-02-03T03:10:22Z"
  },
  "references": [
    {
      "url": "https://docs.npmjs.com/cli/v7/commands/npm-ci",
      "source": "cve@mitre.org",
      "tags": [
        "Product",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://docs.npmjs.com/cli/v8/commands/npm-ci",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/icatalina/CVE-2021-43616",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/cli/commit/457e0ae61bbc55846f5af44afa4066921923490f",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/cli/issues/2701",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/cli/issues/2701#issuecomment-972900511",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://github.com/npm/cli/issues/2701#issuecomment-979054224",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/NXNVFKOF5ZYH5NIRWHKN6O6UBCHDV6FE/",
      "source": "cve@mitre.org",
      "tags": []
    },
    {
      "url": "https://medium.com/cider-sec/this-time-we-were-lucky-85c0dcac94a0",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20211210-0002/",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://docs.npmjs.com/cli/v7/commands/npm-ci",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://docs.npmjs.com/cli/v8/commands/npm-ci",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/icatalina/CVE-2021-43616",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/cli/commit/457e0ae61bbc55846f5af44afa4066921923490f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/cli/issues/2701",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/npm/cli/issues/2701#issuecomment-972900511",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://github.com/npm/cli/issues/2701#issuecomment-979054224",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/NXNVFKOF5ZYH5NIRWHKN6O6UBCHDV6FE/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://medium.com/cider-sec/this-time-we-were-lucky-85c0dcac94a0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20211210-0002/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:31.893222",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "cli",
    "owner": "npm",
    "created_at": "2018-07-05T23:26:52Z",
    "updated_at": "2025-01-14T13:53:49Z",
    "pushed_at": "2025-01-06T21:33:28Z",
    "size": 166341,
    "stars": 8627,
    "forks": 3264,
    "open_issues": 672,
    "watchers": 8627,
    "has_security_policy": false,
    "default_branch": "latest",
    "protected_branches": [
      "latest",
      "release/v6",
      "release/v7",
      "release/v8",
      "release/v9",
      "release/v10"
    ],
    "languages": {
      "JavaScript": 13393104,
      "Handlebars": 23344,
      "Shell": 11038,
      "PowerShell": 1526,
      "Batchfile": 1180
    },
    "commit_activity": {
      "total_commits_last_year": 533,
      "avg_commits_per_week": 10.25,
      "days_active_last_year": 108
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:21:07.649621"
  }
}