{
  "cve_id": "CVE-2021-43791",
  "github_data": {
    "repository": "zulip/zulip",
    "fix_commit": "a014ef75a3a0ed7f24ebb157632ba58751e732c6",
    "related_commits": [
      "a014ef75a3a0ed7f24ebb157632ba58751e732c6",
      "a014ef75a3a0ed7f24ebb157632ba58751e732c6"
    ],
    "patch_url": "https://github.com/zulip/zulip/commit/a014ef75a3a0ed7f24ebb157632ba58751e732c6.patch",
    "fix_commit_details": {
      "sha": "a014ef75a3a0ed7f24ebb157632ba58751e732c6",
      "commit_date": "2021-11-29T15:20:59Z",
      "author": {
        "login": "mateuszmandera",
        "type": "User",
        "stats": {
          "total_commits": 1273,
          "average_weekly_commits": 1.9675425038639875,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 268
        }
      },
      "commit_message": {
        "title": "CVE-2021-43791: Validate confirmation keys in /accounts/register/ codepath.",
        "length": 477,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 86,
        "additions": 56,
        "deletions": 30
      },
      "files": [
        {
          "filename": "confirmation/models.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -170,9 +170,9 @@ def __init__(\n \n \n _properties = {\n-    Confirmation.USER_REGISTRATION: ConfirmationType(\"check_prereg_key_and_redirect\"),\n+    Confirmation.USER_REGISTRATION: ConfirmationType(\"get_prereg_key_and_redirect\"),\n     Confirmation.INVITATION: ConfirmationType(\n-        \"check_prereg_key_and_redirect\", validity_in_days=settings.INVITATION_LINK_VALIDITY_DAYS\n+        \"get_prereg_key_and_redirect\", validity_in_days=settings.INVITATION_LINK_VALIDITY_DAYS\n     ),\n     Confirmation.EMAIL_CHANGE: ConfirmationType(\"confirm_email_change\"),\n     Confirmation.UNSUBSCRIBE: ConfirmationType(\n@@ -182,7 +182,7 @@ def __init__(\n     Confirmation.MULTIUSE_INVITE: ConfirmationType(\n         \"join\", validity_in_days=settings.INVITATION_LINK_VALIDITY_DAYS\n     ),\n-    Confirmation.REALM_CREATION: ConfirmationType(\"check_prereg_key_and_redirect\"),\n+    Confirmation.REALM_CREATION: ConfirmationType(\"get_prereg_key_and_redirect\"),\n     Confirmation.REALM_REACTIVATION: ConfirmationType(\"realm_reactivation\"),\n }\n "
        },
        {
          "filename": "zerver/tests/test_signup.py",
          "status": "modified",
          "additions": 16,
          "deletions": 6,
          "patch": "@@ -855,7 +855,7 @@ def test_register(self) -> None:\n         with queries_captured() as queries, cache_tries_captured() as cache_tries:\n             self.register(self.nonreg_email(\"test\"), \"test\")\n         # Ensure the number of queries we make is not O(streams)\n-        self.assert_length(queries, 89)\n+        self.assert_length(queries, 91)\n \n         # We can probably avoid a couple cache hits here, but there doesn't\n         # seem to be any O(N) behavior.  Some of the cache hits are related\n@@ -2014,8 +2014,7 @@ def test_confirmation_key_of_wrong_type(self) -> None:\n         # Verify that using the wrong type doesn't work in the main confirm code path\n         email_change_url = create_confirmation_link(prereg_user, Confirmation.EMAIL_CHANGE)\n         email_change_key = email_change_url.split(\"/\")[-1]\n-        url = \"/accounts/do_confirm/\" + email_change_key\n-        result = self.client_get(url)\n+        result = self.client_post(\"/accounts/register/\", {\"key\": email_change_key})\n         self.assertEqual(result.status_code, 404)\n         self.assert_in_response(\n             \"Whoops. We couldn't find your confirmation link in the system.\", result\n@@ -2032,8 +2031,17 @@ def test_confirmation_expired(self) -> None:\n         with patch(\"confirmation.models.timezone_now\", return_value=date_sent):\n             url = create_confirmation_link(prereg_user, Confirmation.USER_REGISTRATION)\n \n-        target_url = \"/\" + url.split(\"/\", 3)[3]\n-        result = self.client_get(target_url)\n+        key = url.split(\"/\")[-1]\n+        confirmation_link_path = \"/\" + url.split(\"/\", 3)[3]\n+        # Both the confirmation link and submitting the key to the registration endpoint\n+        # directly will return the appropriate error.\n+        result = self.client_get(confirmation_link_path)\n+        self.assertEqual(result.status_code, 404)\n+        self.assert_in_response(\n+            \"Whoops. The confirmation link has expired or been deactivated.\", result\n+        )\n+\n+        result = self.client_post(\"/accounts/register/\", {\"key\": key})\n         self.assertEqual(result.status_code, 404)\n         self.assert_in_response(\n             \"Whoops. The confirmation link has expired or been deactivated.\", result\n@@ -2124,7 +2132,9 @@ def test_confirmation_obj_not_exist_error(self) -> None:\n             url, {\"key\": registration_key, \"from_confirmation\": 1, \"full_nme\": \"alice\"}\n         )\n         self.assertEqual(response.status_code, 404)\n-        self.assert_in_response(\"The registration link has expired or is not valid.\", response)\n+        self.assert_in_response(\n+            \"Whoops. We couldn't find your confirmation link in the system.\", response\n+        )\n \n         registration_key = confirmation_link.split(\"/\")[-1]\n         response = self.client_post("
        },
        {
          "filename": "zerver/views/registration.py",
          "status": "modified",
          "additions": 34,
          "deletions": 18,
          "patch": "@@ -1,6 +1,6 @@\n import logging\n import urllib\n-from typing import Any, Dict, List, Optional\n+from typing import Any, Dict, List, Optional, Union\n from urllib.parse import urlencode\n \n from django.conf import settings\n@@ -94,10 +94,36 @@\n \n \n @has_request_variables\n-def check_prereg_key_and_redirect(\n+def get_prereg_key_and_redirect(\n     request: HttpRequest, confirmation_key: str, full_name: Optional[str] = REQ(default=None)\n ) -> HttpResponse:\n-    confirmation = Confirmation.objects.filter(confirmation_key=confirmation_key).first()\n+    key_check_result = check_prereg_key(request, confirmation_key)\n+    if isinstance(key_check_result, HttpResponse):\n+        return key_check_result\n+    # confirm_preregistrationuser.html just extracts the confirmation_key\n+    # (and GET parameters) and redirects to /accounts/register, so that the\n+    # user can enter their information on a cleaner URL.\n+    return render(\n+        request,\n+        \"confirmation/confirm_preregistrationuser.html\",\n+        context={\"key\": confirmation_key, \"full_name\": full_name},\n+    )\n+\n+\n+def check_prereg_key(\n+    request: HttpRequest, confirmation_key: str\n+) -> Union[Confirmation, HttpResponse]:\n+    \"\"\"\n+    Checks if the Confirmation key is valid, returning the Confirmation object in case of success\n+    and an appropriate error page otherwise.\n+    \"\"\"\n+    try:\n+        confirmation: Optional[Confirmation] = Confirmation.objects.get(\n+            confirmation_key=confirmation_key\n+        )\n+    except Confirmation.DoesNotExist:\n+        confirmation = None\n+\n     if confirmation is None or confirmation.type not in [\n         Confirmation.USER_REGISTRATION,\n         Confirmation.INVITATION,\n@@ -117,14 +143,7 @@ def check_prereg_key_and_redirect(\n     except ConfirmationKeyException as exception:\n         return render_confirmation_key_error(request, exception)\n \n-    # confirm_preregistrationuser.html just extracts the confirmation_key\n-    # (and GET parameters) and redirects to /accounts/register, so that the\n-    # user can enter their information on a cleaner URL.\n-    return render(\n-        request,\n-        \"confirmation/confirm_preregistrationuser.html\",\n-        context={\"key\": confirmation_key, \"full_name\": full_name},\n-    )\n+    return confirmation\n \n \n @require_post\n@@ -139,15 +158,12 @@ def accounts_register(\n         default=None, converter=to_converted_or_fallback(to_non_negative_int, None)\n     ),\n ) -> HttpResponse:\n-    try:\n-        confirmation = Confirmation.objects.get(confirmation_key=key)\n-    except Confirmation.DoesNotExist:\n-        return render(request, \"zerver/confirmation_link_expired_error.html\", status=404)\n+    key_check_result = check_prereg_key(request, key)\n+    if isinstance(key_check_result, HttpResponse):\n+        return key_check_result\n \n-    prereg_user = confirmation.content_object\n+    prereg_user = key_check_result.content_object\n     assert prereg_user is not None\n-    if prereg_user.status == confirmation_settings.STATUS_REVOKED:\n-        return render(request, \"zerver/confirmation_link_expired_error.html\", status=404)\n     email = prereg_user.email\n     realm_creation = prereg_user.realm_creation\n     password_required = prereg_user.password_required"
        },
        {
          "filename": "zproject/urls.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -128,9 +128,9 @@\n     accounts_home,\n     accounts_home_from_multiuse_invite,\n     accounts_register,\n-    check_prereg_key_and_redirect,\n     create_realm,\n     find_account,\n+    get_prereg_key_and_redirect,\n     realm_redirect,\n )\n from zerver.views.report import (\n@@ -559,8 +559,8 @@\n     path(\"accounts/register/\", accounts_register, name=\"accounts_register\"),\n     path(\n         \"accounts/do_confirm/<confirmation_key>\",\n-        check_prereg_key_and_redirect,\n-        name=\"check_prereg_key_and_redirect\",\n+        get_prereg_key_and_redirect,\n+        name=\"get_prereg_key_and_redirect\",\n     ),\n     path(\n         \"accounts/confirm_new_email/<confirmation_key>\","
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6a44364a69e5c00d7f5aa1f80ea0afdc1128c901",
            "date": "2025-01-14T06:21:14Z",
            "author_login": "amanagr"
          },
          {
            "sha": "6d495a270ef54806e24db3a6d28f3aba69f3f134",
            "date": "2025-01-14T14:12:45Z",
            "author_login": "amanagr"
          },
          {
            "sha": "2aff7ce9b5e114d25dd09d1d7ca464f2a12822e5",
            "date": "2025-01-13T23:34:39Z",
            "author_login": "andersk"
          },
          {
            "sha": "f223251ffe5ffb5044d3a1d285198d3e056d137f",
            "date": "2025-01-13T23:26:37Z",
            "author_login": "andersk"
          },
          {
            "sha": "653b0b0436baca494b5a794270b6637ac7c9827a",
            "date": "2025-01-13T23:31:03Z",
            "author_login": "andersk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-613",
    "description": "Zulip is an open source group chat application that combines real-time chat with threaded conversations. In affected versions expiration dates on the confirmation objects associated with email invitations were not enforced properly in the new account registration flow. A confirmation link takes a user to the check_prereg_key_and_redirect endpoint, before getting redirected to POST to /accounts/register/. The problem was that validation was happening in the check_prereg_key_and_redirect part and not in /accounts/register/ - meaning that one could submit an expired confirmation key and be able to register. The issue is fixed in Zulip 4.8. There are no known workarounds and users are advised to upgrade as soon as possible.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-12-02T01:15:07.423",
    "last_modified": "2024-11-21T06:29:47.840",
    "fix_date": "2021-11-29T15:20:59Z"
  },
  "references": [
    {
      "url": "https://github.com/zulip/zulip/commit/a014ef75a3a0ed7f24ebb157632ba58751e732c6",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zulip/zulip/security/advisories/GHSA-wj76-pcqr-mf9f",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zulip/zulip/commit/a014ef75a3a0ed7f24ebb157632ba58751e732c6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zulip/zulip/security/advisories/GHSA-wj76-pcqr-mf9f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.815109",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "zulip",
    "owner": "zulip",
    "created_at": "2015-09-25T16:37:25Z",
    "updated_at": "2025-01-14T13:31:30Z",
    "pushed_at": "2025-01-14T02:34:21Z",
    "size": 495185,
    "stars": 21946,
    "forks": 8107,
    "open_issues": 2487,
    "watchers": 21946,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "1.4.x",
      "1.5.x",
      "1.8.x",
      "1.9.x",
      "2.0.x",
      "2.1.x",
      "3.x",
      "3.1-with-bmemcached",
      "4.x",
      "4.0-rc1-branch",
      "5.x",
      "5.x-user-sharding",
      "5.0-rc1-branch",
      "5.0-rc2-branch",
      "6.x",
      "6.0-beta1-branch",
      "6.0-rc1-branch",
      "7.x",
      "7.0-beta1-branch",
      "7.0-beta2-branch",
      "8.x",
      "9.x",
      "buddy-list-prep",
      "chat.zulip.org",
      "dockertest",
      "main",
      "s3-compatible-uploads",
      "zulip-cloud-current"
    ],
    "languages": {
      "Python": 14193798,
      "TypeScript": 4055572,
      "JavaScript": 2278673,
      "HTML": 957053,
      "CSS": 942085,
      "Handlebars": 597145,
      "Shell": 161466,
      "Puppet": 137563,
      "Perl": 10353,
      "Dockerfile": 4219,
      "Ruby": 3794,
      "Emacs Lisp": 157
    },
    "commit_activity": {
      "total_commits_last_year": 6397,
      "avg_commits_per_week": 123.01923076923077,
      "days_active_last_year": 356
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T13:44:17.890508"
  }
}