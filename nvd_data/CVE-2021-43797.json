{
  "cve_id": "CVE-2021-43797",
  "github_data": {
    "repository": "netty/netty",
    "fix_commit": "07aa6b5938a8b6ed7a6586e066400e2643897323",
    "related_commits": [
      "07aa6b5938a8b6ed7a6586e066400e2643897323",
      "07aa6b5938a8b6ed7a6586e066400e2643897323"
    ],
    "patch_url": "https://github.com/netty/netty/commit/07aa6b5938a8b6ed7a6586e066400e2643897323.patch",
    "fix_commit_details": {
      "sha": "07aa6b5938a8b6ed7a6586e066400e2643897323",
      "commit_date": "2021-12-09T13:49:43Z",
      "author": {
        "login": "normanmaurer",
        "type": "User",
        "stats": {
          "total_commits": 3013,
          "average_weekly_commits": 3.507566938300349,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 506
        }
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-wx5j-54mm-rqqq",
        "length": 318,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 181,
        "additions": 171,
        "deletions": 10
      },
      "files": [
        {
          "filename": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -367,6 +367,10 @@ public HttpHeaders copy() {\n \n     private static void validateHeaderNameElement(byte value) {\n         switch (value) {\n+        case 0x1c:\n+        case 0x1d:\n+        case 0x1e:\n+        case 0x1f:\n         case 0x00:\n         case '\\t':\n         case '\\n':\n@@ -391,6 +395,10 @@ private static void validateHeaderNameElement(byte value) {\n \n     private static void validateHeaderNameElement(char value) {\n         switch (value) {\n+        case 0x1c:\n+        case 0x1d:\n+        case 0x1e:\n+        case 0x1f:\n         case 0x00:\n         case '\\t':\n         case '\\n':"
        },
        {
          "filename": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -824,7 +824,7 @@ private void splitHeader(AppendableCharSequence sb) {\n         int valueStart;\n         int valueEnd;\n \n-        nameStart = findNonWhitespace(sb, 0, false);\n+        nameStart = findNonWhitespace(sb, 0);\n         for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {\n             char ch = sb.charAtUnsafe(nameEnd);\n             // https://tools.ietf.org/html/rfc7230#section-3.2.4\n@@ -859,7 +859,7 @@ private void splitHeader(AppendableCharSequence sb) {\n         }\n \n         name = sb.subStringUnsafe(nameStart, nameEnd);\n-        valueStart = findNonWhitespace(sb, colonEnd, true);\n+        valueStart = findNonWhitespace(sb, colonEnd);\n         if (valueStart == length) {\n             value = EMPTY_VALUE;\n         } else {\n@@ -898,12 +898,12 @@ private static boolean isSPLenient(char c) {\n         return c == ' ' || c == (char) 0x09 || c == (char) 0x0B || c == (char) 0x0C || c == (char) 0x0D;\n     }\n \n-    private static int findNonWhitespace(AppendableCharSequence sb, int offset, boolean validateOWS) {\n+    private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n         for (int result = offset; result < sb.length(); ++result) {\n             char c = sb.charAtUnsafe(result);\n             if (!Character.isWhitespace(c)) {\n                 return result;\n-            } else if (validateOWS && !isOWS(c)) {\n+            } else if (!isOWS(c)) {\n                 // Only OWS is supported for whitespace\n                 throw new IllegalArgumentException(\"Invalid separator, only a single space or horizontal tab allowed,\" +\n                         \" but received a '\" + c + \"' (0x\" + Integer.toHexString(c) + \")\");"
        },
        {
          "filename": "codec-http/src/test/java/io/netty/handler/codec/http/HttpRequestDecoderTest.java",
          "status": "modified",
          "additions": 81,
          "deletions": 6,
          "patch": "@@ -15,6 +15,7 @@\n  */\n package io.netty.handler.codec.http;\n \n+import io.netty.buffer.ByteBuf;\n import io.netty.buffer.Unpooled;\n import io.netty.channel.embedded.EmbeddedChannel;\n import io.netty.handler.codec.TooLongFrameException;\n@@ -357,6 +358,75 @@ public void testTooLargeHeaders() {\n         assertFalse(channel.finish());\n     }\n \n+    @Test\n+    public void testHeaderNameStartsWithControlChar1c() {\n+        testHeaderNameStartsWithControlChar(0x1c);\n+    }\n+\n+    @Test\n+    public void testHeaderNameStartsWithControlChar1d() {\n+        testHeaderNameStartsWithControlChar(0x1d);\n+    }\n+\n+    @Test\n+    public void testHeaderNameStartsWithControlChar1e() {\n+        testHeaderNameStartsWithControlChar(0x1e);\n+    }\n+\n+    @Test\n+    public void testHeaderNameStartsWithControlChar1f() {\n+        testHeaderNameStartsWithControlChar(0x1f);\n+    }\n+\n+    @Test\n+    public void testHeaderNameStartsWithControlChar0c() {\n+        testHeaderNameStartsWithControlChar(0x0c);\n+    }\n+\n+    private void testHeaderNameStartsWithControlChar(int controlChar) {\n+        ByteBuf requestBuffer = Unpooled.buffer();\n+        requestBuffer.writeCharSequence(\"GET /some/path HTTP/1.1\\r\\n\" +\n+                \"Host: netty.io\\r\\n\", CharsetUtil.US_ASCII);\n+        requestBuffer.writeByte(controlChar);\n+        requestBuffer.writeCharSequence(\"Transfer-Encoding: chunked\\r\\n\\r\\n\", CharsetUtil.US_ASCII);\n+        testInvalidHeaders0(requestBuffer);\n+    }\n+\n+    @Test\n+    public void testHeaderNameEndsWithControlChar1c() {\n+        testHeaderNameEndsWithControlChar(0x1c);\n+    }\n+\n+    @Test\n+    public void testHeaderNameEndsWithControlChar1d() {\n+        testHeaderNameEndsWithControlChar(0x1d);\n+    }\n+\n+    @Test\n+    public void testHeaderNameEndsWithControlChar1e() {\n+        testHeaderNameEndsWithControlChar(0x1e);\n+    }\n+\n+    @Test\n+    public void testHeaderNameEndsWithControlChar1f() {\n+        testHeaderNameEndsWithControlChar(0x1f);\n+    }\n+\n+    @Test\n+    public void testHeaderNameEndsWithControlChar0c() {\n+        testHeaderNameEndsWithControlChar(0x0c);\n+    }\n+\n+    private void testHeaderNameEndsWithControlChar(int controlChar) {\n+        ByteBuf requestBuffer = Unpooled.buffer();\n+        requestBuffer.writeCharSequence(\"GET /some/path HTTP/1.1\\r\\n\" +\n+                \"Host: netty.io\\r\\n\", CharsetUtil.US_ASCII);\n+        requestBuffer.writeCharSequence(\"Transfer-Encoding\", CharsetUtil.US_ASCII);\n+        requestBuffer.writeByte(controlChar);\n+        requestBuffer.writeCharSequence(\": chunked\\r\\n\\r\\n\", CharsetUtil.US_ASCII);\n+        testInvalidHeaders0(requestBuffer);\n+    }\n+\n     @Test\n     public void testWhitespace() {\n         String requestStr = \"GET /some/path HTTP/1.1\\r\\n\" +\n@@ -366,19 +436,19 @@ public void testWhitespace() {\n     }\n \n     @Test\n-    public void testWhitespaceBeforeTransferEncoding01() {\n+    public void testWhitespaceInTransferEncoding01() {\n         String requestStr = \"GET /some/path HTTP/1.1\\r\\n\" +\n-                \" Transfer-Encoding : chunked\\r\\n\" +\n+                \"Transfer-Encoding : chunked\\r\\n\" +\n                 \"Content-Length: 1\\r\\n\" +\n                 \"Host: netty.io\\r\\n\\r\\n\" +\n                 \"a\";\n         testInvalidHeaders0(requestStr);\n     }\n \n     @Test\n-    public void testWhitespaceBeforeTransferEncoding02() {\n+    public void testWhitespaceInTransferEncoding02() {\n         String requestStr = \"POST / HTTP/1.1\" +\n-                \" Transfer-Encoding : chunked\\r\\n\" +\n+                \"Transfer-Encoding : chunked\\r\\n\" +\n                 \"Host: target.com\" +\n                 \"Content-Length: 65\\r\\n\\r\\n\" +\n                 \"0\\r\\n\\r\\n\" +\n@@ -475,6 +545,7 @@ public void testContentLengthHeaderAndChunked() {\n         assertTrue(request.headers().contains(\"Transfer-Encoding\", \"chunked\", false));\n         assertFalse(request.headers().contains(\"Content-Length\"));\n         LastHttpContent c = channel.readInbound();\n+        c.release();\n         assertFalse(channel.finish());\n     }\n \n@@ -499,11 +570,15 @@ public void testHttpMessageDecoderResult() {\n     }\n \n     private static void testInvalidHeaders0(String requestStr) {\n+        testInvalidHeaders0(Unpooled.copiedBuffer(requestStr, CharsetUtil.US_ASCII));\n+    }\n+\n+    private static void testInvalidHeaders0(ByteBuf requestBuffer) {\n         EmbeddedChannel channel = new EmbeddedChannel(new HttpRequestDecoder());\n-        assertTrue(channel.writeInbound(Unpooled.copiedBuffer(requestStr, CharsetUtil.US_ASCII)));\n+        assertTrue(channel.writeInbound(requestBuffer));\n         HttpRequest request = channel.readInbound();\n+        assertThat(request.decoderResult().cause(), instanceOf(IllegalArgumentException.class));\n         assertTrue(request.decoderResult().isFailure());\n-        assertTrue(request.decoderResult().cause() instanceof IllegalArgumentException);\n         assertFalse(channel.finish());\n     }\n }"
        },
        {
          "filename": "codec-http/src/test/java/io/netty/handler/codec/http/HttpResponseDecoderTest.java",
          "status": "modified",
          "additions": 78,
          "deletions": 0,
          "patch": "@@ -799,4 +799,82 @@ public void testHttpMessageDecoderResult() {\n         c.release();\n         assertFalse(channel.finish());\n     }\n+\n+    @Test\n+    public void testHeaderNameStartsWithControlChar1c() {\n+        testHeaderNameStartsWithControlChar(0x1c);\n+    }\n+\n+    @Test\n+    public void testHeaderNameStartsWithControlChar1d() {\n+        testHeaderNameStartsWithControlChar(0x1d);\n+    }\n+\n+    @Test\n+    public void testHeaderNameStartsWithControlChar1e() {\n+        testHeaderNameStartsWithControlChar(0x1e);\n+    }\n+\n+    @Test\n+    public void testHeaderNameStartsWithControlChar1f() {\n+        testHeaderNameStartsWithControlChar(0x1f);\n+    }\n+\n+    @Test\n+    public void testHeaderNameStartsWithControlChar0c() {\n+        testHeaderNameStartsWithControlChar(0x0c);\n+    }\n+\n+    private void testHeaderNameStartsWithControlChar(int controlChar) {\n+        ByteBuf responseBuffer = Unpooled.buffer();\n+        responseBuffer.writeCharSequence(\"HTTP/1.1 200 OK\\r\\n\" +\n+                \"Host: netty.io\\r\\n\", CharsetUtil.US_ASCII);\n+        responseBuffer.writeByte(controlChar);\n+        responseBuffer.writeCharSequence(\"Transfer-Encoding: chunked\\r\\n\\r\\n\", CharsetUtil.US_ASCII);\n+        testInvalidHeaders0(responseBuffer);\n+    }\n+\n+    @Test\n+    public void testHeaderNameEndsWithControlChar1c() {\n+        testHeaderNameEndsWithControlChar(0x1c);\n+    }\n+\n+    @Test\n+    public void testHeaderNameEndsWithControlChar1d() {\n+        testHeaderNameEndsWithControlChar(0x1d);\n+    }\n+\n+    @Test\n+    public void testHeaderNameEndsWithControlChar1e() {\n+        testHeaderNameEndsWithControlChar(0x1e);\n+    }\n+\n+    @Test\n+    public void testHeaderNameEndsWithControlChar1f() {\n+        testHeaderNameEndsWithControlChar(0x1f);\n+    }\n+\n+    @Test\n+    public void testHeaderNameEndsWithControlChar0c() {\n+        testHeaderNameEndsWithControlChar(0x0c);\n+    }\n+\n+    private void testHeaderNameEndsWithControlChar(int controlChar) {\n+        ByteBuf responseBuffer = Unpooled.buffer();\n+        responseBuffer.writeCharSequence(\"HTTP/1.1 200 OK\\r\\n\" +\n+                \"Host: netty.io\\r\\n\", CharsetUtil.US_ASCII);\n+        responseBuffer.writeCharSequence(\"Transfer-Encoding\", CharsetUtil.US_ASCII);\n+        responseBuffer.writeByte(controlChar);\n+        responseBuffer.writeCharSequence(\": chunked\\r\\n\\r\\n\", CharsetUtil.US_ASCII);\n+        testInvalidHeaders0(responseBuffer);\n+    }\n+\n+    private static void testInvalidHeaders0(ByteBuf responseBuffer) {\n+        EmbeddedChannel channel = new EmbeddedChannel(new HttpResponseDecoder());\n+        assertTrue(channel.writeInbound(responseBuffer));\n+        HttpResponse response = channel.readInbound();\n+        assertThat(response.decoderResult().cause(), instanceOf(IllegalArgumentException.class));\n+        assertTrue(response.decoderResult().isFailure());\n+        assertFalse(channel.finish());\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "5194d1306ef9fef002878673bbb7b3463e32387f",
            "date": "2025-01-14T07:19:29Z",
            "author_login": "netty-project-bot"
          },
          {
            "sha": "3b036489e24eb2a1e3bb45022a02a09eceaa8293",
            "date": "2025-01-14T07:19:25Z",
            "author_login": "netty-project-bot"
          },
          {
            "sha": "28a81c687725f6d3403341656b26a8b70391402f",
            "date": "2025-01-13T20:42:26Z",
            "author_login": "normanmaurer"
          },
          {
            "sha": "1bd459ac11ff8486641e619abdd732c7bbd94c70",
            "date": "2025-01-13T20:24:00Z",
            "author_login": "normanmaurer"
          },
          {
            "sha": "ad00d19e5d1b488bb04c5da56571b1484ff547ef",
            "date": "2025-01-13T19:10:08Z",
            "author_login": "normanmaurer"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-444",
    "description": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. Netty prior to version 4.1.71.Final skips control chars when they are present at the beginning / end of the header name. It should instead fail fast as these are not allowed by the spec and could lead to HTTP request smuggling. Failing to do the validation might cause netty to \"sanitize\" header names before it forward these to another remote system when used as proxy. This remote system can't see the invalid usage anymore, and therefore does not do the validation itself. Users should upgrade to version 4.1.71.Final.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-12-09T19:15:07.960",
    "last_modified": "2024-11-21T06:29:48.490",
    "fix_date": "2021-12-09T13:49:43Z"
  },
  "references": [
    {
      "url": "https://github.com/netty/netty/commit/07aa6b5938a8b6ed7a6586e066400e2643897323",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/netty/netty/security/advisories/GHSA-wx5j-54mm-rqqq",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/01/msg00008.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20220107-0003/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2023/dsa-5316",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2022.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/netty/netty/commit/07aa6b5938a8b6ed7a6586e066400e2643897323",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/netty/netty/security/advisories/GHSA-wx5j-54mm-rqqq",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2023/01/msg00008.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20220107-0003/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.debian.org/security/2023/dsa-5316",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2022.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.829260",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "netty",
    "owner": "netty",
    "created_at": "2010-11-09T09:22:21Z",
    "updated_at": "2025-01-14T09:10:40Z",
    "pushed_at": "2025-01-14T12:48:52Z",
    "size": 92623,
    "stars": 33671,
    "forks": 15993,
    "open_issues": 609,
    "watchers": 33671,
    "has_security_policy": false,
    "default_branch": "4.1",
    "protected_branches": [
      "3.2",
      "3.5",
      "3.6",
      "3.7",
      "3.8",
      "3.9",
      "3.10",
      "main"
    ],
    "languages": {
      "Java": 19621935,
      "C": 228044,
      "HTML": 21029,
      "Shell": 18570,
      "JavaScript": 16232,
      "Makefile": 1814,
      "Groovy": 1755,
      "Dockerfile": 1116,
      "CSS": 49
    },
    "commit_activity": {
      "total_commits_last_year": 406,
      "avg_commits_per_week": 7.8076923076923075,
      "days_active_last_year": 156
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:57:47.084896"
  }
}