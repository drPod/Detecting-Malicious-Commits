{
  "cve_id": "CVE-2021-43814",
  "github_data": {
    "repository": "rizinorg/rizin",
    "fix_commit": "aa6917772d2f32e5a7daab25a46c72df0b5ea406",
    "related_commits": [
      "aa6917772d2f32e5a7daab25a46c72df0b5ea406",
      "aa6917772d2f32e5a7daab25a46c72df0b5ea406"
    ],
    "patch_url": "https://github.com/rizinorg/rizin/commit/aa6917772d2f32e5a7daab25a46c72df0b5ea406.patch",
    "fix_commit_details": {
      "sha": "aa6917772d2f32e5a7daab25a46c72df0b5ea406",
      "commit_date": "2021-12-10T14:43:12Z",
      "author": {
        "login": "thestr4ng3r",
        "type": "User",
        "stats": {
          "total_commits": 944,
          "average_weekly_commits": 1.445635528330781,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 230
        }
      },
      "commit_message": {
        "title": "Fix oob write for dwarf with abbrev with count 0 (Fix #2083) (#2086)",
        "length": 68,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 48,
        "additions": 31,
        "deletions": 17
      },
      "files": [
        {
          "filename": "librz/bin/dwarf.c",
          "status": "modified",
          "additions": 23,
          "deletions": 17,
          "patch": "@@ -1220,9 +1220,13 @@ static int init_die(RzBinDwarfDie *die, ut64 abbr_code, ut64 attr_count) {\n \tif (!die) {\n \t\treturn -1;\n \t}\n-\tdie->attr_values = calloc(sizeof(RzBinDwarfAttrValue), attr_count);\n-\tif (!die->attr_values) {\n-\t\treturn -1;\n+\tif (attr_count) {\n+\t\tdie->attr_values = calloc(sizeof(RzBinDwarfAttrValue), attr_count);\n+\t\tif (!die->attr_values) {\n+\t\t\treturn -1;\n+\t\t}\n+\t} else {\n+\t\tdie->attr_values = NULL;\n \t}\n \tdie->abbrev_code = abbr_code;\n \tdie->capacity = attr_count;\n@@ -1726,25 +1730,27 @@ static const ut8 *parse_die(const ut8 *buf, const ut8 *buf_end, RzBinDwarfDebugI\n \tsize_t i;\n \tconst char *comp_dir = NULL;\n \tut64 line_info_offset = UT64_MAX;\n-\tfor (i = 0; i < abbrev->count - 1; i++) {\n-\t\tmemset(&die->attr_values[i], 0, sizeof(die->attr_values[i]));\n+\tif (abbrev->count) {\n+\t\tfor (i = 0; i < abbrev->count - 1; i++) {\n+\t\t\tmemset(&die->attr_values[i], 0, sizeof(die->attr_values[i]));\n \n-\t\tbuf = parse_attr_value(buf, buf_end - buf, &abbrev->defs[i],\n-\t\t\t&die->attr_values[i], hdr, debug_str, debug_str_len, big_endian);\n+\t\t\tbuf = parse_attr_value(buf, buf_end - buf, &abbrev->defs[i],\n+\t\t\t\t&die->attr_values[i], hdr, debug_str, debug_str_len, big_endian);\n \n-\t\tRzBinDwarfAttrValue *attribute = &die->attr_values[i];\n+\t\t\tRzBinDwarfAttrValue *attribute = &die->attr_values[i];\n \n-\t\tif (attribute->attr_name == DW_AT_comp_dir && (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string) && attribute->string.content) {\n-\t\t\tcomp_dir = attribute->string.content;\n-\t\t}\n-\t\tif (attribute->attr_name == DW_AT_stmt_list) {\n-\t\t\tif (attribute->kind == DW_AT_KIND_CONSTANT) {\n-\t\t\t\tline_info_offset = attribute->uconstant;\n-\t\t\t} else if (attribute->kind == DW_AT_KIND_REFERENCE) {\n-\t\t\t\tline_info_offset = attribute->reference;\n+\t\t\tif (attribute->attr_name == DW_AT_comp_dir && (attribute->attr_form == DW_FORM_strp || attribute->attr_form == DW_FORM_string) && attribute->string.content) {\n+\t\t\t\tcomp_dir = attribute->string.content;\n+\t\t\t}\n+\t\t\tif (attribute->attr_name == DW_AT_stmt_list) {\n+\t\t\t\tif (attribute->kind == DW_AT_KIND_CONSTANT) {\n+\t\t\t\t\tline_info_offset = attribute->uconstant;\n+\t\t\t\t} else if (attribute->kind == DW_AT_KIND_REFERENCE) {\n+\t\t\t\t\tline_info_offset = attribute->reference;\n+\t\t\t\t}\n \t\t\t}\n+\t\t\tdie->count++;\n \t\t}\n-\t\tdie->count++;\n \t}\n \n \t// If this is a compilation unit dir attribute, we want to cache it so the line info parsing"
        },
        {
          "filename": "test/db/formats/elf/crash",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -25,3 +25,11 @@ nth vaddr bind type lib name\n []\n EOF\n RUN\n+\n+NAME=ELF/Dwarf: abbrev empty\n+FILE=bins/elf/dwarf_fuzzed_abbrev_empty\n+CMDS=<<EOF\n+aaa\n+EOF\n+EXPECT=\n+RUN"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "380a94d6198218299932c9530c864813c2b81216",
            "date": "2025-01-14T15:05:22Z",
            "author_login": "kazarmy"
          },
          {
            "sha": "79814e46b635640a43e416593b3553f8a7a75174",
            "date": "2025-01-13T14:22:23Z",
            "author_login": "kazarmy"
          },
          {
            "sha": "124a2b13862a6e0d92ab202bf452724a297699ba",
            "date": "2025-01-12T21:57:00Z",
            "author_login": "kazarmy"
          },
          {
            "sha": "09525b3d2a3b57df3e3fc6d210883b17f8117763",
            "date": "2025-01-12T12:32:00Z",
            "author_login": "kazarmy"
          },
          {
            "sha": "ae0aa42125552d2f233c114338b0b817cee53f40",
            "date": "2025-01-11T13:09:59Z",
            "author_login": "kazarmy"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.7,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-787",
    "description": "Rizin is a UNIX-like reverse engineering framework and command-line toolset. In versions up to and including 0.3.1 there is a heap-based out of bounds write in parse_die() when reversing an AMD64 ELF binary with DWARF debug info. When a malicious AMD64 ELF binary is opened by a victim user, Rizin may crash or execute unintended actions. No workaround are known and users are advised to upgrade.",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-12-13T20:15:07.640",
    "last_modified": "2024-11-21T06:29:50.923",
    "fix_date": "2021-12-10T14:43:12Z"
  },
  "references": [
    {
      "url": "https://github.com/rizinorg/rizin/commit/aa6917772d2f32e5a7daab25a46c72df0b5ea406",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rizinorg/rizin/issues/2083",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rizinorg/rizin/security/advisories/GHSA-hqqp-vjcm-mw8r",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rizinorg/rizin/commit/aa6917772d2f32e5a7daab25a46c72df0b5ea406",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rizinorg/rizin/issues/2083",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rizinorg/rizin/security/advisories/GHSA-hqqp-vjcm-mw8r",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.835708",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "rizin",
    "owner": "rizinorg",
    "created_at": "2020-09-30T09:15:56Z",
    "updated_at": "2025-01-13T14:22:29Z",
    "pushed_at": "2025-01-13T17:45:02Z",
    "size": 152997,
    "stars": 2766,
    "forks": 373,
    "open_issues": 461,
    "watchers": 2766,
    "has_security_policy": false,
    "default_branch": "dev",
    "protected_branches": [
      "dev"
    ],
    "languages": {
      "C": 30788662,
      "C++": 381011,
      "Meson": 197580,
      "Python": 66911,
      "Roff": 41775,
      "JavaScript": 15280,
      "Shell": 6013,
      "CMake": 5683,
      "Pawn": 5193,
      "Perl": 4737,
      "Rust": 3262,
      "Dockerfile": 2896,
      "Assembly": 1148,
      "R": 539,
      "Gnuplot": 431
    },
    "commit_activity": {
      "total_commits_last_year": 561,
      "avg_commits_per_week": 10.788461538461538,
      "days_active_last_year": 216
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-14T13:02:45.407116"
  }
}