{
  "cve_id": "CVE-2021-43822",
  "github_data": {
    "repository": "jackalope/jackalope-doctrine-dbal",
    "fix_commit": "9d179a36d320330ddb303ea3a7c98d3a33d231db",
    "related_commits": [
      "9d179a36d320330ddb303ea3a7c98d3a33d231db",
      "9d179a36d320330ddb303ea3a7c98d3a33d231db"
    ],
    "patch_url": "https://github.com/jackalope/jackalope-doctrine-dbal/commit/9d179a36d320330ddb303ea3a7c98d3a33d231db.patch",
    "fix_commit_details": {
      "sha": "9d179a36d320330ddb303ea3a7c98d3a33d231db",
      "commit_date": "2021-12-13T15:21:32Z",
      "author": {
        "login": "dbu",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-ph98-v78f-jqrm",
        "length": 100,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 227,
        "additions": 175,
        "deletions": 52
      },
      "files": [
        {
          "filename": "src/Jackalope/Transport/DoctrineDBAL/Query/QOMWalker.php",
          "status": "modified",
          "additions": 89,
          "deletions": 50,
          "patch": "@@ -385,28 +385,28 @@ public function walkJoinSource(QOM\\JoinInterface $source, $root = true)\n \n         switch ($source->getJoinType()) {\n             case QOM\\QueryObjectModelConstantsInterface::JCR_JOIN_TYPE_INNER:\n-                $sql .= \"INNER JOIN phpcr_nodes $rightAlias \";\n+                $sql .= sprintf(\"INNER JOIN phpcr_nodes %s \", $rightAlias);\n                 break;\n             case QOM\\QueryObjectModelConstantsInterface::JCR_JOIN_TYPE_LEFT_OUTER:\n-                $sql .= \"LEFT JOIN phpcr_nodes $rightAlias \";\n+                $sql .= sprintf(\"LEFT JOIN phpcr_nodes %s \", $rightAlias);\n                 break;\n             case QOM\\QueryObjectModelConstantsInterface::JCR_JOIN_TYPE_RIGHT_OUTER:\n-                $sql .= \"RIGHT JOIN phpcr_nodes $rightAlias \";\n+                $sql .= sprintf(\"RIGHT JOIN phpcr_nodes %s \", $rightAlias);\n                 break;\n         }\n \n-        $sql .= \"ON ( $leftAlias.workspace_name = $rightAlias.workspace_name AND $nodeTypeClause \";\n+        $sql .= sprintf(\"ON ( %s.workspace_name = %s.workspace_name AND %s \", $leftAlias, $rightAlias, $nodeTypeClause);\n         $sql .= 'AND ' . $this->walkJoinCondition($source->getLeft(), $source->getRight(), $source->getJoinCondition()) . ' ';\n         $sql .= ') '; // close on-clause\n \n \n         if ($root) { // The method call is not recursed when $root is true, so we can add a WHERE clause\n             // TODO: revise this part for alternatives\n-            $sql .= \"WHERE $leftAlias.workspace_name = ? AND $leftAlias.type IN ('\" . $left->getNodeTypeName() . \"'\";\n+            $sql .= sprintf(\"WHERE %s.workspace_name = ? AND %s.type IN ('%s'\", $leftAlias, $leftAlias, $left->getNodeTypeName());\n             $subTypes = $this->nodeTypeManager->getSubtypes($left->getNodeTypeName());\n             foreach ($subTypes as $subType) {\n                 /* @var $subType NodeTypeInterface */\n-                $sql .= \", '\" . $subType->getName() . \"'\";\n+                $sql .= sprintf(\", '%s'\", $subType->getName());\n             }\n             $sql .= ')';\n         }\n@@ -455,7 +455,7 @@ public function walkChildNodeJoinCondition(QOM\\ChildNodeJoinConditionInterface $\n         $leftAlias = $this->getTableAlias($condition->getParentSelectorName());\n         $concatExpression = $this->platform->getConcatExpression(\"$leftAlias.path\", \"'/%'\");\n \n-        return \"($rightAlias.path LIKE \" . $concatExpression . \" AND $rightAlias.depth = $leftAlias.depth + 1) \";\n+        return sprintf(\"(%s.path LIKE %s AND %s.depth = %s.depth + 1) \", $rightAlias, $concatExpression, $rightAlias, $leftAlias);\n     }\n \n     /**\n@@ -469,7 +469,7 @@ public function walkDescendantNodeJoinCondition(QOM\\DescendantNodeJoinConditionI\n         $leftAlias = $this->getTableAlias($condition->getAncestorSelectorName());\n         $concatExpression = $this->platform->getConcatExpression(\"$leftAlias.path\", \"'/%'\");\n \n-        return \"$rightAlias.path LIKE \" . $concatExpression . \" \";\n+        return sprintf(\"%s.path LIKE %s \", $rightAlias, $concatExpression);\n     }\n \n     /**\n@@ -521,7 +521,7 @@ public function walkConstraint(QOM\\ConstraintInterface $constraint)\n             return $this->walkFullTextSearchConstraint($constraint);\n         }\n \n-        throw new InvalidQueryException(\"Constraint \" . get_class($constraint) . \" not yet supported.\");\n+        throw new InvalidQueryException(sprintf(\"Constraint %s not yet supported.\", get_class($constraint)));\n     }\n \n     /**\n@@ -531,7 +531,11 @@ public function walkConstraint(QOM\\ConstraintInterface $constraint)\n      */\n     public function walkSameNodeConstraint(QOM\\SameNodeInterface $constraint)\n     {\n-        return $this->getTableAlias($constraint->getSelectorName()) . \".path = '\" . $constraint->getPath() . \"'\";\n+        return sprintf(\n+            \"%s.path = '%s'\",\n+            $this->getTableAlias($constraint->getSelectorName()),\n+            $constraint->getPath()\n+        );\n     }\n \n     /**\n@@ -541,7 +545,10 @@ public function walkSameNodeConstraint(QOM\\SameNodeInterface $constraint)\n      */\n     public function walkFullTextSearchConstraint(QOM\\FullTextSearchInterface $constraint)\n     {\n-        return $this->sqlXpathExtractValue($this->getTableAlias($constraint->getSelectorName()), $constraint->getPropertyName()).' LIKE '. $this->conn->quote('%'.$constraint->getFullTextSearchExpression().'%');\n+        return sprintf('%s LIKE %s',\n+            $this->sqlXpathExtractValue($this->getTableAlias($constraint->getSelectorName()), $constraint->getPropertyName()),\n+            $this->conn->quote('%'.$constraint->getFullTextSearchExpression().'%')\n+        );\n     }\n \n     /**\n@@ -568,7 +575,11 @@ public function walkDescendantNodeConstraint(QOM\\DescendantNodeInterface $constr\n             throw new InvalidQueryException(\"Trailing slash in $ancestorPath\");\n         }\n \n-        return $this->getTableAlias($constraint->getSelectorName()) . \".path LIKE '\" . $ancestorPath . \"/%'\";\n+        return sprintf(\n+            \"%s.path LIKE '%s/%%'\",\n+            $this->getTableAlias($constraint->getSelectorName()),\n+            addcslashes($ancestorPath, \"'\")\n+        );\n     }\n \n     /**\n@@ -578,7 +589,11 @@ public function walkDescendantNodeConstraint(QOM\\DescendantNodeInterface $constr\n      */\n     public function walkChildNodeConstraint(QOM\\ChildNodeInterface $constraint)\n     {\n-        return $this->getTableAlias($constraint->getSelectorName()) . \".parent = '\" . $constraint->getParentPath() . \"'\";\n+        return sprintf(\n+            \"%s.parent = '%s'\",\n+            $this->getTableAlias($constraint->getSelectorName()),\n+            addcslashes($constraint->getParentPath(), \"'\")\n+        );\n     }\n \n     /**\n@@ -588,7 +603,11 @@ public function walkChildNodeConstraint(QOM\\ChildNodeInterface $constraint)\n      */\n     public function walkAndConstraint(QOM\\AndInterface $constraint)\n     {\n-        return \"(\" . $this->walkConstraint($constraint->getConstraint1()) . \" AND \" . $this->walkConstraint($constraint->getConstraint2()) . \")\";\n+        return sprintf(\n+            \"(%s AND %s)\",\n+            $this->walkConstraint($constraint->getConstraint1()),\n+            $this->walkConstraint($constraint->getConstraint2())\n+        );\n     }\n \n     /**\n@@ -598,7 +617,11 @@ public function walkAndConstraint(QOM\\AndInterface $constraint)\n      */\n     public function walkOrConstraint(QOM\\OrInterface $constraint)\n     {\n-        return \"(\" . $this->walkConstraint($constraint->getConstraint1()) . \" OR \" . $this->walkConstraint($constraint->getConstraint2()) . \")\";\n+        return sprintf(\n+            \"(%s OR %s)\",\n+            $this->walkConstraint($constraint->getConstraint1()),\n+            $this->walkConstraint($constraint->getConstraint2())\n+        );\n     }\n \n     /**\n@@ -608,7 +631,10 @@ public function walkOrConstraint(QOM\\OrInterface $constraint)\n      */\n     public function walkNotConstraint(QOM\\NotInterface $constraint)\n     {\n-        return \"NOT (\" . $this->walkConstraint($constraint->getConstraint()) . \")\";\n+        return sprintf(\n+            \"NOT (%s)\",\n+            $this->walkConstraint($constraint->getConstraint())\n+        );\n     }\n \n     /**\n@@ -670,9 +696,16 @@ public function walkComparisonConstraint(QOM\\ComparisonInterface $constraint)\n                     $literal = implode(':', $parts);\n                 }\n \n-                return $this->platform->getConcatExpression(\"$alias.namespace\", \"(CASE $alias.namespace WHEN '' THEN '' ELSE ':' END)\", \"$alias.local_name\") . \" \" .\n-                    $operator . \" \" .\n-                    $this->conn->quote($literal);\n+                return sprintf(\n+                    '%s %s %s',\n+                    $this->platform->getConcatExpression(\n+                        sprintf(\"%s.namespace\", $alias),\n+                        sprintf(\"(CASE %s.namespace WHEN '' THEN '' ELSE ':' END)\", $alias),\n+                        sprintf(\"%s.local_name\", $alias)\n+                    ),\n+                    $operator,\n+                    $this->conn->quote($literal)\n+                ) ;\n             }\n \n             if ('jcr:path' !== $operand->getPropertyName() && 'jcr:uuid' !== $operand->getPropertyName()) {\n@@ -687,10 +720,12 @@ public function walkComparisonConstraint(QOM\\ComparisonInterface $constraint)\n             }\n         }\n \n-        return\n-            $this->walkOperand($operator1) . ' ' .\n-            $operator . ' ' .\n-            $this->walkOperand($operator2);\n+        return sprintf(\n+            '%s %s %s',\n+            $this->walkOperand($operator1),\n+            $operator,\n+            $this->walkOperand($operator2)\n+        );\n     }\n \n     /**\n@@ -723,10 +758,10 @@ public function walkNumComparisonConstraint(QOM\\PropertyValueInterface $property\n \n         if ($this->platform instanceof MySQLPlatform && '=' === $operator) {\n             return sprintf(\n-                '0 != FIND_IN_SET(\"%s\", REPLACE(EXTRACTVALUE(%s.props, \\'//sv:property[@sv:name=\"%s\"]/sv:value\\'), \" \", \",\"))',\n+                '0 != FIND_IN_SET(\"%s\", REPLACE(EXTRACTVALUE(%s.props, \\'//sv:property[@sv:name=%s]/sv:value\\'), \" \", \",\"))',\n                 $literalOperand->getLiteralValue(),\n                 $alias,\n-                $property\n+                Xpath::escape($property)\n             );\n         }\n \n@@ -787,14 +822,18 @@ public function walkOperand(QOM\\OperandInterface $operand)\n             $selectorName = $operand->getSelectorName();\n             $alias = $this->getTableAlias($selectorName);\n \n-            return $this->platform->getConcatExpression(\"$alias.namespace\", \"(CASE $alias.namespace WHEN '' THEN '' ELSE ':' END)\", \"$alias.local_name\");\n+            return $this->platform->getConcatExpression(\n+                sprintf(\"%s.namespace\", $alias),\n+                sprintf(\"(CASE %s.namespace WHEN '' THEN '' ELSE ':' END)\", $alias),\n+                sprintf(\"%s.local_name\", $alias)\n+            );\n         }\n \n         if ($operand instanceof QOM\\NodeLocalNameInterface) {\n             $selectorName = $operand->getSelectorName();\n             $alias = $this->getTableAlias($selectorName);\n \n-            return \"$alias.local_name\";\n+            return sprintf(\"%s.local_name\", $alias);\n         }\n \n         if ($operand instanceof QOM\\LowerCaseInterface) {\n@@ -813,10 +852,10 @@ public function walkOperand(QOM\\OperandInterface $operand)\n             $alias = $this->getTableAlias($operand->getSelectorName() . '.' . $operand->getPropertyName());\n             $property = $operand->getPropertyName();\n             if ($property === 'jcr:path') {\n-                return \"$alias.path\";\n+                return sprintf(\"%s.path\", $alias);\n             }\n             if ($property === \"jcr:uuid\") {\n-                return \"$alias.identifier\";\n+                return sprintf(\"%s.identifier\", $alias);\n             }\n \n             return $this->sqlXpathExtractValue($alias, $property);\n@@ -829,7 +868,7 @@ public function walkOperand(QOM\\OperandInterface $operand)\n             return $this->sqlXpathExtractValueAttribute($alias, $property, 'length');\n         }\n \n-        throw new InvalidQueryException(\"Dynamic operand \" . get_class($operand) . \" not yet supported.\");\n+        throw new InvalidQueryException(sprintf(\"Dynamic operand %s not yet supported.\", get_class($operand)));\n     }\n \n     /**\n@@ -920,18 +959,18 @@ private function getLiteralValue(QOM\\LiteralInterface $operand)\n     private function sqlXpathValueExists($alias, $property)\n     {\n         if ($this->platform instanceof MySQLPlatform) {\n-            return \"EXTRACTVALUE($alias.props, 'count(//sv:property[@sv:name=\\\"\" . $property . \"\\\"]/sv:value[1])') = 1\";\n+            return sprintf(\"EXTRACTVALUE(%s.props, 'count(//sv:property[@sv:name=%s]/sv:value[1])') = 1\", $alias, Xpath::escape($property));\n         }\n \n         if ($this->platform instanceof PostgreSQL94Platform || $this->platform instanceof PostgreSqlPlatform) {\n-            return \"xpath_exists('//sv:property[@sv:name=\\\"\" . $property . \"\\\"]/sv:value[1]', CAST($alias.props AS xml), \".$this->sqlXpathPostgreSQLNamespaces().\") = 't'\";\n+            return sprintf(\"xpath_exists('//sv:property[@sv:name=%s]/sv:value[1]', CAST(%s.props AS xml), \".$this->sqlXpathPostgreSQLNamespaces().\") = 't'\", Xpath::escape($property), $alias);\n         }\n \n         if ($this->platform instanceof SqlitePlatform) {\n-            return \"EXTRACTVALUE($alias.props, 'count(//sv:property[@sv:name=\\\"\" . $property . \"\\\"]/sv:value[1])') = 1\";\n+            return sprintf(\"EXTRACTVALUE(%s.props, 'count(//sv:property[@sv:name=%s]/sv:value[1])') = 1\", $alias, Xpath::escape($property));\n         }\n \n-        throw new NotImplementedException(\"Xpath evaluations cannot be executed with '\" . $this->platform->getName() . \"' yet.\");\n+        throw new NotImplementedException(sprintf(\"Xpath evaluations cannot be executed with '%s' yet.\", $this->platform->getName()));\n     }\n \n     /**\n@@ -945,44 +984,44 @@ private function sqlXpathValueExists($alias, $property)\n     private function sqlXpathExtractValue($alias, $property, $column = 'props')\n     {\n         if ($this->platform instanceof MySQLPlatform) {\n-            return \"EXTRACTVALUE($alias.$column, '//sv:property[@sv:name=\\\"\" . $property . \"\\\"]/sv:value[1]')\";\n+            return sprintf(\"EXTRACTVALUE(%s.%s, '//sv:property[@sv:name=%s]/sv:value[1]')\", $alias, $column, Xpath::escape($property));\n         }\n \n         if ($this->platform instanceof PostgreSQL94Platform || $this->platform instanceof PostgreSqlPlatform) {\n-            return \"(xpath('//sv:property[@sv:name=\\\"\" . $property . \"\\\"]/sv:value[1]/text()', CAST($alias.$column AS xml), \".$this->sqlXpathPostgreSQLNamespaces().\"))[1]::text\";\n+            return sprintf(\"(xpath('//sv:property[@sv:name=%s]/sv:value[1]/text()', CAST(%s.%s AS xml), %s))[1]::text\", Xpath::escape($property), $alias, $column, $this->sqlXpathPostgreSQLNamespaces());\n         }\n \n         if ($this->platform instanceof SqlitePlatform) {\n-            return \"EXTRACTVALUE($alias.$column, '//sv:property[@sv:name=\\\"\" . $property . \"\\\"]/sv:value[1]')\";\n+            return sprintf(\"EXTRACTVALUE(%s.%s, '//sv:property[@sv:name=%s]/sv:value[1]')\", $alias, $column, Xpath::escape($property));\n         }\n \n-        throw new NotImplementedException(\"Xpath evaluations cannot be executed with '\" . $this->platform->getName() . \"' yet.\");\n+        throw new NotImplementedException(sprintf(\"Xpath evaluations cannot be executed with '%s' yet.\", $this->platform->getName()));\n     }\n \n     private function sqlXpathExtractNumValue($alias, $property)\n     {\n         if ($this->platform instanceof PostgreSQL94Platform || $this->platform instanceof PostgreSqlPlatform) {\n-            return \"(xpath('//sv:property[@sv:name=\\\"\" . $property . \"\\\"]/sv:value[1]/text()', CAST($alias.props AS xml), \".$this->sqlXpathPostgreSQLNamespaces().\"))[1]::text::int\";\n+            return sprintf(\"(xpath('//sv:property[@sv:name=%s]/sv:value[1]/text()', CAST(%s.props AS xml), %s))[1]::text::int\", Xpath::escape($property), $alias, $this->sqlXpathPostgreSQLNamespaces());\n         }\n \n-        return 'CAST(' . $this->sqlXpathExtractValue($alias, $property) . ' AS DECIMAL)';\n+        return sprintf('CAST(%s AS DECIMAL)', $this->sqlXpathExtractValue($alias, $property));\n     }\n \n     private function sqlXpathExtractValueAttribute($alias, $property, $attribute, $valueIndex = 1)\n     {\n         if ($this->platform instanceof MySQLPlatform) {\n-            return sprintf(\"EXTRACTVALUE(%s.props, '//sv:property[@sv:name=\\\"%s\\\"]/sv:value[%d]/@%s')\", $alias, $property, $valueIndex, $attribute);\n+            return sprintf(\"EXTRACTVALUE(%s.props, '//sv:property[@sv:name=%s]/sv:value[%d]/@%s')\", $alias, Xpath::escape($property), $valueIndex, $attribute);\n         }\n \n         if ($this->platform instanceof PostgreSQL94Platform || $this->platform instanceof PostgreSqlPlatform) {\n-            return sprintf(\"CAST((xpath('//sv:property[@sv:name=\\\"%s\\\"]/sv:value[%d]/@%s', CAST(%s.props AS xml), %s))[1]::text AS bigint)\", $property, $valueIndex, $attribute, $alias, $this->sqlXpathPostgreSQLNamespaces());\n+            return sprintf(\"CAST((xpath('//sv:property[@sv:name=%s]/sv:value[%d]/@%s', CAST(%s.props AS xml), %s))[1]::text AS bigint)\", Xpath::escape($property), $valueIndex, $attribute, $alias, $this->sqlXpathPostgreSQLNamespaces());\n         }\n \n         if ($this->platform instanceof SqlitePlatform) {\n-            return sprintf(\"EXTRACTVALUE(%s.props, '//sv:property[@sv:name=\\\"%s\\\"]/sv:value[%d]/@%s')\", $alias, $property, $valueIndex, $attribute);\n+            return sprintf(\"EXTRACTVALUE(%s.props, '//sv:property[@sv:name=%s]/sv:value[%d]/@%s')\", $alias, Xpath::escape($property), $valueIndex, $attribute);\n         }\n \n-        throw new NotImplementedException(\"Xpath evaluations cannot be executed with '\" . $this->platform->getName() . \"' yet.\");\n+        throw new NotImplementedException(sprintf(\"Xpath evaluations cannot be executed with '%s' yet.\", $this->platform->getName()));\n     }\n \n     /**\n@@ -1001,15 +1040,15 @@ private function sqlXpathComparePropertyValue($alias, $property, $value, $operat\n         $expression = null;\n \n         if ($this->platform instanceof MySQLPlatform) {\n-            $expression = \"EXTRACTVALUE($alias.props, 'count(//sv:property[@sv:name=\\\"\" . $property . \"\\\"]/sv:value[text()%s%s]) > 0')\";\n+            $expression = sprintf(\"EXTRACTVALUE(%s.props, 'count(//sv:property[@sv:name=%s]/sv:value[text()%%s%%s]) > 0')\", $alias, Xpath::escape($property));\n             // mysql does not escape the backslashes for us, while postgres and sqlite do\n             $value = Xpath::escapeBackslashes($value);\n         } elseif ($this->platform instanceof PostgreSQL94Platform || $this->platform instanceof PostgreSqlPlatform) {\n-            $expression = \"xpath_exists('//sv:property[@sv:name=\\\"\" . $property . \"\\\"]/sv:value[text()%s%s]', CAST($alias.props AS xml), \".$this->sqlXpathPostgreSQLNamespaces().\") = 't'\";\n+            $expression = sprintf(\"xpath_exists('//sv:property[@sv:name=%s]/sv:value[text()%s%s]', CAST(%%s.props AS xml), %%s) = 't'\", Xpath::escape($property), $alias, $this->sqlXpathPostgreSQLNamespaces());\n         } elseif ($this->platform instanceof SqlitePlatform) {\n-            $expression = \"EXTRACTVALUE($alias.props, 'count(//sv:property[@sv:name=\\\"\" . $property . \"\\\"]/sv:value[text()%s%s]) > 0')\";\n+            $expression = sprintf(\"EXTRACTVALUE(%s.props, 'count(//sv:property[@sv:name=%s]/sv:value[text()%%s%%s]) > 0')\", $alias, Xpath::escape($property));\n         } else {\n-            throw new NotImplementedException(\"Xpath evaluations cannot be executed with '\" . $this->platform->getName() . \"' yet.\");\n+            throw new NotImplementedException(sprintf(\"Xpath evaluations cannot be executed with '%s' yet.\", $this->platform->getName()));\n         }\n \n         return sprintf($expression, $this->walkOperator($operator), Xpath::escape($value));\n@@ -1031,12 +1070,12 @@ private function sqlXpathPostgreSQLNamespaces()\n      */\n     private function sqlNodeTypeClause($alias, QOM\\SelectorInterface $source)\n     {\n-        $sql = \"$alias.type IN ('\" . $source->getNodeTypeName() .\"'\";\n+        $sql = sprintf(\"%s.type IN ('%s'\", $alias, $source->getNodeTypeName());\n \n         $subTypes = $this->nodeTypeManager->getSubtypes($source->getNodeTypeName());\n         foreach ($subTypes as $subType) {\n             /* @var $subType NodeTypeInterface */\n-            $sql .= \", '\" . $subType->getName() . \"'\";\n+            $sql .= sprintf(\", '%s'\", $subType->getName());\n         }\n         $sql .= ')';\n "
        },
        {
          "filename": "tests/Jackalope/Transport/DoctrineDBAL/ClientTest.php",
          "status": "modified",
          "additions": 86,
          "deletions": 2,
          "patch": "@@ -9,9 +9,11 @@\n use Jackalope\\Test\\FunctionalTestCase;\n use PDO;\n use PHPCR\\PropertyType;\n+use PHPCR\\Query\\QOM\\QueryObjectModelConstantsInterface;\n use PHPCR\\Query\\QueryInterface;\n use PHPCR\\Util\\NodeHelper;\n use PHPCR\\Util\\PathHelper;\n+use PHPCR\\Util\\QOM\\QueryBuilder;\n use PHPCR\\ValueFormatException;\n use ReflectionClass;\n \n@@ -435,6 +437,7 @@ public function provideOrder()\n                         'value' => 'CCC',\n                     ],\n                 ],\n+                'value',\n                 'value DESC',\n                 ['three', 'two', 'one'],\n             ],\n@@ -453,6 +456,7 @@ public function provideOrder()\n                     ],\n                 ],\n                 'value',\n+                'value',\n                 ['three', 'two', 'one'],\n             ],\n \n@@ -470,6 +474,7 @@ public function provideOrder()\n                     ],\n                 ],\n                 'value',\n+                'value',\n                 ['one', 'three', 'two'],\n             ],\n \n@@ -487,6 +492,7 @@ public function provideOrder()\n                     ],\n                 ],\n                 'value',\n+                'value',\n                 ['two', 'three', 'one'],\n             ],\n \n@@ -510,16 +516,71 @@ public function provideOrder()\n                         'value' => 5.05,\n                     ],\n                 ],\n+                'value',\n                 'title, value ASC',\n                 ['two', 'one', 'four', 'three'],\n             ],\n+\n+            // property with double quotes\n+            [\n+                [\n+                    'one' => [\n+                        'val\"ue' => 'AAA',\n+                    ],\n+                    'two' => [\n+                        'val\"ue' => 'BBB',\n+                    ],\n+                    'three' => [\n+                        'val\"ue' => 'CCC',\n+                    ],\n+                ],\n+                'val\"ue',\n+                'val\"ue DESC',\n+                ['three', 'two', 'one'],\n+            ],\n+\n+            // property with single quotes\n+            [\n+                [\n+                    'one' => [\n+                        'val\\'ue' => 'AAA',\n+                    ],\n+                    'two' => [\n+                        'val\\'ue' => 'BBB',\n+                    ],\n+                    'three' => [\n+                        'val\\'ue' => 'CCC',\n+                    ],\n+                ],\n+                'val\\'ue',\n+                'val\\'ue DESC',\n+                ['three', 'two', 'one'],\n+            ],\n+\n+            // property with semicolon quotes\n+            [\n+                [\n+                    'one' => [\n+                        'val;ue' => 'AAA',\n+                    ],\n+                    'two' => [\n+                        'val;ue' => 'BBB',\n+                    ],\n+                    'three' => [\n+                        'val;ue' => 'CCC',\n+                    ],\n+                ],\n+                'val;ue',\n+                'val;ue DESC',\n+                ['three', 'two', 'one'],\n+            ],\n         ];\n     }\n \n     /**\n      * @dataProvider provideOrder\n      */\n-    public function testOrder($nodes, $orderBy, $expectedOrder)\n+    public function testOrder($nodes, $propertyName, $orderBy, $expectedOrder)\n     {\n         $rootNode = $this->session->getNode('/');\n \n@@ -533,7 +594,30 @@ public function testOrder($nodes, $orderBy, $expectedOrder)\n         $this->session->save();\n \n         $qm = $this->session->getWorkspace()->getQueryManager();\n-        $query = $qm->createQuery('SELECT * FROM [nt:unstructured] WHERE value IS NOT NULL ORDER BY ' . $orderBy, QueryInterface::JCR_SQL2);\n+        $qf = $qm->getQOMFactory();\n+        $qb = new QueryBuilder($qf);\n+        $qb->from(\n+            $qb->qomf()->selector('a', 'nt:unstructured')\n+        );\n+        $qb->where($qf->comparison(\n+            $qf->propertyValue('a', $propertyName),\n+            QueryObjectModelConstantsInterface::JCR_OPERATOR_NOT_EQUAL_TO,\n+            $qf->literal('NULL')\n+        ));\n+\n+        $orderBys = explode(',', $orderBy);\n+        foreach ($orderBys as $orderByItem) {\n+            $orderByParts = explode(' ', trim($orderByItem));\n+            $propertyName = $orderByParts[0];\n+            $order = isset($orderByParts[1]) ? $orderByParts[1] : 'ASC';\n+\n+            $qb->addOrderBy(\n+                $qb->qomf()->propertyValue('a', $propertyName),\n+                $order\n+            );\n+        }\n+\n+        $query = $qb->getQuery();\n         $result = $query->execute();\n \n         $rows = $result->getRows();"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "42023a95b5b15a8a002bf8a5ff5d9301ee07c9b8",
            "date": "2024-07-09T05:52:28Z",
            "author_login": "dbu"
          },
          {
            "sha": "8cddf1fe23bec02578845ab03b72f6451ebc34ff",
            "date": "2024-07-09T05:48:24Z",
            "author_login": "dbu"
          },
          {
            "sha": "a56dba2829e5589b616fa7ea701677ef8524d536",
            "date": "2024-05-07T08:27:53Z",
            "author_login": "dbu"
          },
          {
            "sha": "55d35719bad199fe2516ba94c5a8a7c2f6479000",
            "date": "2024-05-06T15:16:59Z",
            "author_login": "dbu"
          },
          {
            "sha": "254bc3bf5da0c851f51ab2ce63e3a68c7422333c",
            "date": "2024-05-06T14:58:47Z",
            "author_login": "dbu"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-89",
    "description": "Jackalope Doctrine-DBAL is an implementation of the PHP Content Repository API (PHPCR) using a relational database to persist data. In affected versions users can provoke SQL injections if they can specify a node name or query. Upgrade to version 1.7.4 to resolve this issue. If that is not possible, you can escape all places where `$property` is used to filter `sv:name` in the class `Jackalope\\Transport\\DoctrineDBAL\\Query\\QOMWalker`: `XPath::escape($property)`. Node names and xpaths can contain `\"` or `;` according to the JCR specification. The jackalope component that translates the query object model into doctrine dbal queries does not properly escape the names and paths, so that a accordingly crafted node name can lead to an SQL injection. If queries are never done from user input, or if you validate the user input to not contain `;`, you are not affected.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2021-12-13T20:15:07.757",
    "last_modified": "2024-11-21T06:29:52.117",
    "fix_date": "2021-12-13T15:21:32Z"
  },
  "references": [
    {
      "url": "https://github.com/jackalope/jackalope-doctrine-dbal/commit/9d179a36d320330ddb303ea3a7c98d3a33d231db",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jackalope/jackalope-doctrine-dbal/security/advisories/GHSA-ph98-v78f-jqrm",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jackalope/jackalope-doctrine-dbal/commit/9d179a36d320330ddb303ea3a7c98d3a33d231db",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jackalope/jackalope-doctrine-dbal/security/advisories/GHSA-ph98-v78f-jqrm",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.835980",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "jackalope-doctrine-dbal",
    "owner": "jackalope",
    "created_at": "2012-02-17T14:35:21Z",
    "updated_at": "2024-12-18T11:30:45Z",
    "pushed_at": "2024-07-09T05:53:18Z",
    "size": 9684,
    "stars": 147,
    "forks": 61,
    "open_issues": 39,
    "watchers": 147,
    "has_security_policy": false,
    "default_branch": "2.x",
    "protected_branches": [
      "1.x",
      "2.x"
    ],
    "languages": {
      "PHP": 305927
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T18:43:19.972146"
  }
}