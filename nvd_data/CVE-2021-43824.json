{
  "cve_id": "CVE-2021-43824",
  "github_data": {
    "repository": "envoyproxy/envoy",
    "fix_commit": "9371333230b1a6e1be2eccf4868771e11af6253a",
    "related_commits": [
      "9371333230b1a6e1be2eccf4868771e11af6253a",
      "9371333230b1a6e1be2eccf4868771e11af6253a"
    ],
    "patch_url": "https://github.com/envoyproxy/envoy/commit/9371333230b1a6e1be2eccf4868771e11af6253a.patch",
    "fix_commit_details": {
      "sha": "9371333230b1a6e1be2eccf4868771e11af6253a",
      "commit_date": "2022-02-01T19:55:20Z",
      "author": {
        "login": "yanavlasov",
        "type": "User",
        "stats": {
          "total_commits": 353,
          "average_weekly_commits": 0.800453514739229,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 163
        }
      },
      "commit_message": {
        "title": "CVE-2021-43824",
        "length": 166,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 62,
        "additions": 62,
        "deletions": 0
      },
      "files": [
        {
          "filename": "docs/root/version_history/current.rst",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -27,6 +27,7 @@ Bug Fixes\n * access_log: fix memory leak when reopening an access log fails. Access logs will now try to be reopened on each subsequent flush attempt after a failure.\n * data plane: fixing error handling where writing to a socket failed while under the stack of processing. This should genreally affect HTTP/3. This behavioral change can be reverted by setting ``envoy.reloadable_features.allow_upstream_inline_write`` to false.\n * eds: fix the eds cluster update by allowing update on the locality of the cluster endpoints. This behavioral change can be temporarily reverted by setting runtime guard ``envoy.reloadable_features.support_locality_update_on_eds_cluster_endpoints`` to false.\n+* jwt_authn: fixed the crash when a CONNECT request is sent to JWT filter configured with regex match on the Host header.\n * tcp_proxy: fix a crash that occurs when configured for :ref:`upstream tunneling <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.tunneling_config>` and the downstream connection disconnects while the the upstream connection or http/2 stream is still being established.\n * tls: fix a bug while matching a certificate SAN with an exact value in ``match_typed_subject_alt_names`` of a listener where wildcard ``*`` character is not the only character of the dns label. Example, ``baz*.example.net`` and ``*baz.example.net`` and ``b*z.example.net`` will match ``baz1.example.net`` and ``foobaz.example.net`` and ``buzz.example.net``, respectively.\n * upstream: fix stack overflow when a cluster with large number of idle connections is removed."
        },
        {
          "filename": "source/extensions/filters/http/jwt_authn/matcher.cc",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -117,6 +117,9 @@ class RegexMatcherImpl : public BaseMatcherImpl {\n \n   bool matches(const Http::RequestHeaderMap& headers) const override {\n     if (BaseMatcherImpl::matchRoute(headers)) {\n+      if (headers.Path() == nullptr) {\n+        return false;\n+      }\n       const Http::HeaderString& path = headers.Path()->value();\n       const absl::string_view query_string = Http::Utility::findQueryStringStart(path);\n       absl::string_view path_view = path.getStringView();"
        },
        {
          "filename": "test/extensions/filters/http/jwt_authn/filter_integration_test.cc",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -326,6 +326,33 @@ TEST_P(LocalJwksIntegrationTest, FilterStateRequirement) {\n   }\n }\n \n+// Verify that JWT config with RegEx matcher can handle CONNECT requests.\n+TEST_P(LocalJwksIntegrationTest, ConnectRequestWithRegExMatch) {\n+  config_helper_.prependFilter(getAuthFilterConfig(ExampleConfigWithRegEx, true));\n+  initialize();\n+\n+  codec_client_ = makeHttpConnection(lookupPort(\"http\"));\n+\n+  auto encoder_decoder = codec_client_->startRequest(Http::TestRequestHeaderMapImpl{\n+      {\":method\", \"CONNECT\"},\n+      {\":authority\", \"host.com:80\"},\n+      {\"authorization\", \"Bearer \" + std::string(GoodToken)},\n+  });\n+  request_encoder_ = &encoder_decoder.first;\n+  auto response = std::move(encoder_decoder.second);\n+\n+  if (downstreamProtocol() == Http::CodecType::HTTP1) {\n+    // Because CONNECT requests for HTTP/1 do not include a path, they will fail\n+    // to find a route match and return a 404.\n+    ASSERT_TRUE(response->waitForEndStream());\n+    ASSERT_TRUE(response->complete());\n+    EXPECT_EQ(\"404\", response->headers().getStatusValue());\n+  } else {\n+    ASSERT_TRUE(response->waitForReset());\n+    ASSERT_TRUE(codec_client_->waitForDisconnect());\n+  }\n+}\n+\n // The test case with a fake upstream for remote Jwks server.\n class RemoteJwksIntegrationTest : public HttpProtocolIntegrationTest {\n public:"
        },
        {
          "filename": "test/extensions/filters/http/jwt_authn/test_common.h",
          "status": "modified",
          "additions": 31,
          "deletions": 0,
          "patch": "@@ -85,6 +85,37 @@ const char ExampleConfig[] = R\"(\n bypass_cors_preflight: true\n )\";\n \n+const char ExampleConfigWithRegEx[] = R\"(\n+providers:\n+  example_provider:\n+    issuer: https://example.com\n+    audiences:\n+    - example_service\n+    - http://example_service1\n+    - https://example_service2/\n+    remote_jwks:\n+      http_uri:\n+        uri: https://pubkey_server/pubkey_path\n+        cluster: pubkey_cluster\n+        timeout:\n+          seconds: 5\n+      cache_duration:\n+        seconds: 600\n+    forward_payload_header: sec-istio-auth-userinfo\n+rules:\n+- match:\n+    safe_regex:\n+      google_re2: {}\n+      regex: \"/somethig/.*\"\n+  requires:\n+    provider_name: \"example_provider\"\n+- match:\n+    path: \"/\"\n+  requires:\n+    provider_name: \"example_provider\"\n+bypass_cors_preflight: true\n+)\";\n+\n // The name of provider for above config.\n const char ProviderName[] = \"example_provider\";\n "
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a5cf609225dfd223ec734cdc2d9a2cb33e58cacc",
            "date": "2025-01-14T20:58:08Z",
            "author_login": "phlax"
          },
          {
            "sha": "b0f43d67aa25c1b03c97186a200cc187f4c22db3",
            "date": "2025-01-14T17:27:17Z",
            "author_login": "publish-envoy[bot]"
          },
          {
            "sha": "c93cf7af47f7e24c83b563d3b956074333bc4bf7",
            "date": "2025-01-14T17:23:07Z",
            "author_login": "phlax"
          },
          {
            "sha": "078dae3549912e632c3776a5e9a4679226093276",
            "date": "2025-01-14T14:27:08Z",
            "author_login": "agrawroh"
          },
          {
            "sha": "7b20933ee263eb9aeaceee6bc309b80b997cbbb2",
            "date": "2025-01-14T14:13:49Z",
            "author_login": "phlax"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "Envoy is an open source edge and service proxy, designed for cloud-native applications. In affected versions a crafted request crashes Envoy when a CONNECT request is sent to JWT filter configured with regex match. This provides a denial of service attack vector. The only workaround is to not use regex in the JWT filter. Users are advised to upgrade.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-22T23:15:10.813",
    "last_modified": "2024-11-21T06:29:52.380",
    "fix_date": "2022-02-01T19:55:20Z"
  },
  "references": [
    {
      "url": "https://github.com/envoyproxy/envoy/commit/9371333230b1a6e1be2eccf4868771e11af6253a",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-vj5m-rch8-5r2p",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/commit/9371333230b1a6e1be2eccf4868771e11af6253a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-vj5m-rch8-5r2p",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.740132",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "envoy",
    "owner": "envoyproxy",
    "created_at": "2016-08-08T15:07:24Z",
    "updated_at": "2025-01-14T12:22:22Z",
    "pushed_at": "2025-01-14T05:36:17Z",
    "size": 240648,
    "stars": 25321,
    "forks": 4848,
    "open_issues": 1639,
    "watchers": 25321,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C++": 48293036,
      "Starlark": 3105942,
      "Java": 1320095,
      "Python": 605206,
      "Assembly": 327095,
      "Kotlin": 309606,
      "Swift": 250537,
      "Shell": 229801,
      "Go": 183281,
      "Rust": 107190,
      "JavaScript": 66339,
      "C": 61597,
      "Objective-C++": 55490,
      "Objective-C": 48840,
      "Jinja": 47798,
      "Smarty": 3528,
      "CSS": 2927,
      "HTML": 1522,
      "Emacs Lisp": 966,
      "Dockerfile": 960,
      "Thrift": 748,
      "PureBasic": 472,
      "Batchfile": 439,
      "Makefile": 303
    },
    "commit_activity": {
      "total_commits_last_year": 3286,
      "avg_commits_per_week": 63.19230769230769,
      "days_active_last_year": 303
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:55:59.245540"
  }
}