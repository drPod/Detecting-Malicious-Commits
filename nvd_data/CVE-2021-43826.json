{
  "cve_id": "CVE-2021-43826",
  "github_data": {
    "repository": "envoyproxy/envoy",
    "fix_commit": "ce0ae309057a216aba031aff81c445c90c6ef145",
    "related_commits": [
      "ce0ae309057a216aba031aff81c445c90c6ef145",
      "ce0ae309057a216aba031aff81c445c90c6ef145"
    ],
    "patch_url": "https://github.com/envoyproxy/envoy/commit/ce0ae309057a216aba031aff81c445c90c6ef145.patch",
    "fix_commit_details": {
      "sha": "ce0ae309057a216aba031aff81c445c90c6ef145",
      "commit_date": "2022-02-01T19:53:42Z",
      "author": {
        "login": "yanavlasov",
        "type": "User",
        "stats": {
          "total_commits": 353,
          "average_weekly_commits": 0.800453514739229,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 163
        }
      },
      "commit_message": {
        "title": "CVE-2021-43826",
        "length": 64,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 75,
        "additions": 74,
        "deletions": 1
      },
      "files": [
        {
          "filename": "docs/root/version_history/current.rst",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -27,6 +27,7 @@ Bug Fixes\n * access_log: fix memory leak when reopening an access log fails. Access logs will now try to be reopened on each subsequent flush attempt after a failure.\n * data plane: fixing error handling where writing to a socket failed while under the stack of processing. This should genreally affect HTTP/3. This behavioral change can be reverted by setting ``envoy.reloadable_features.allow_upstream_inline_write`` to false.\n * eds: fix the eds cluster update by allowing update on the locality of the cluster endpoints. This behavioral change can be temporarily reverted by setting runtime guard ``envoy.reloadable_features.support_locality_update_on_eds_cluster_endpoints`` to false.\n+* tcp_proxy: fix a crash that occurs when configured for :ref:`upstream tunneling <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.tunneling_config>` and the downstream connection disconnects while the the upstream connection or http/2 stream is still being established.\n * tls: fix a bug while matching a certificate SAN with an exact value in ``match_typed_subject_alt_names`` of a listener where wildcard ``*`` character is not the only character of the dns label. Example, ``baz*.example.net`` and ``*baz.example.net`` and ``b*z.example.net`` will match ``baz1.example.net`` and ``foobaz.example.net`` and ``buzz.example.net``, respectively.\n * upstream: fix stack overflow when a cluster with large number of idle connections is removed.\n * xray: fix the AWS X-Ray tracer extension to not sample the trace if ``sampled=`` keyword is not present in the header ``x-amzn-trace-id``."
        },
        {
          "filename": "source/common/tcp_proxy/tcp_proxy.cc",
          "status": "modified",
          "additions": 9,
          "deletions": 1,
          "patch": "@@ -520,8 +520,14 @@ Network::FilterStatus Filter::onNewConnection() {\n }\n \n void Filter::onDownstreamEvent(Network::ConnectionEvent event) {\n+  if (event == Network::ConnectionEvent::LocalClose ||\n+      event == Network::ConnectionEvent::RemoteClose) {\n+    downstream_closed_ = true;\n+  }\n+\n   ENVOY_CONN_LOG(trace, \"on downstream event {}, has upstream = {}\", read_callbacks_->connection(),\n                  static_cast<int>(event), upstream_ == nullptr);\n+\n   if (upstream_) {\n     Tcp::ConnectionPool::ConnectionDataPtr conn_data(upstream_->onDownstreamEvent(event));\n     if (conn_data != nullptr &&\n@@ -570,7 +576,9 @@ void Filter::onUpstreamEvent(Network::ConnectionEvent event) {\n             Upstream::Outlier::Result::LocalOriginConnectFailed);\n       }\n \n-      initializeUpstreamConnection();\n+      if (!downstream_closed_) {\n+        initializeUpstreamConnection();\n+      }\n     } else {\n       if (read_callbacks_->connection().state() == Network::Connection::State::Open) {\n         read_callbacks_->connection().close(Network::ConnectionCloseType::FlushWrite);"
        },
        {
          "filename": "source/common/tcp_proxy/tcp_proxy.h",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -401,6 +401,7 @@ class Filter : public Network::ReadFilter,\n   Network::Socket::OptionsSharedPtr upstream_options_;\n   uint32_t connect_attempts_{};\n   bool connecting_{};\n+  bool downstream_closed_{};\n };\n \n // This class deals with an upstream connection that needs to finish flushing, when the downstream"
        },
        {
          "filename": "test/integration/tcp_tunneling_integration_test.cc",
          "status": "modified",
          "additions": 63,
          "deletions": 0,
          "patch": "@@ -816,6 +816,69 @@ TEST_P(TcpTunnelingIntegrationTest, ResetStreamTest) {\n   tcp_client_->waitForDisconnect();\n }\n \n+TEST_P(TcpTunnelingIntegrationTest, UpstreamConnectingDownstreamDisconnect) {\n+  if (upstreamProtocol() == Http::CodecType::HTTP1) {\n+    return;\n+  }\n+\n+#if defined(WIN32)\n+  // TODO(ggreenway): figure out why this test fails on Windows and remove this disable.\n+  // Failing tests:\n+  // IpAndHttpVersions/TcpTunnelingIntegrationTest.UpstreamConnectingDownstreamDisconnect/IPv4_HttpDownstream_Http3UpstreamBareHttp2,\n+  // IpAndHttpVersions/TcpTunnelingIntegrationTest.UpstreamConnectingDownstreamDisconnect/IPv6_HttpDownstream_Http2UpstreamWrappedHttp2,\n+  // Times out at the end of the test on `ASSERT_TRUE(upstream_request_->waitForReset());`.\n+  return;\n+#endif\n+\n+  config_helper_.addConfigModifier([&](envoy::config::bootstrap::v3::Bootstrap& bootstrap) -> void {\n+    envoy::extensions::filters::network::tcp_proxy::v3::TcpProxy proxy_config;\n+    proxy_config.set_stat_prefix(\"tcp_stats\");\n+    proxy_config.set_cluster(\"cluster_0\");\n+    proxy_config.mutable_tunneling_config()->set_hostname(\"host.com:80\");\n+\n+    // Enable retries. The crash is due to retrying after the downstream connection is closed, which\n+    // can't occur if retries are not enabled.\n+    proxy_config.mutable_max_connect_attempts()->set_value(2);\n+\n+    auto* listeners = bootstrap.mutable_static_resources()->mutable_listeners();\n+    for (auto& listener : *listeners) {\n+      if (listener.name() != \"tcp_proxy\") {\n+        continue;\n+      }\n+      auto* filter_chain = listener.mutable_filter_chains(0);\n+      auto* filter = filter_chain->mutable_filters(0);\n+      filter->mutable_typed_config()->PackFrom(proxy_config);\n+\n+      // Use TLS because it will respond to a TCP half-close during handshake by closing the\n+      // connection.\n+      envoy::extensions::transport_sockets::tls::v3::DownstreamTlsContext tls_context;\n+      ConfigHelper::initializeTls({}, *tls_context.mutable_common_tls_context());\n+      filter_chain->mutable_transport_socket()->set_name(\"envoy.transport_sockets.tls\");\n+      filter_chain->mutable_transport_socket()->mutable_typed_config()->PackFrom(tls_context);\n+\n+      break;\n+    }\n+  });\n+\n+  enableHalfClose(false);\n+  initialize();\n+\n+  IntegrationTcpClientPtr tcp_client = makeTcpConnection(lookupPort(\"tcp_proxy\"));\n+\n+  // Wait for the request for a connection, but don't send a response back yet. This ensures that\n+  // tcp_proxy is stuck in `connecting_`.\n+  ASSERT_TRUE(fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_));\n+  ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));\n+  ASSERT_TRUE(upstream_request_->waitForHeadersComplete());\n+\n+  // Close the client connection. The TLS transport socket will detect this even while\n+  // `readDisable(true)` on the connection, and will raise a `RemoteClose` event.\n+  tcp_client->close();\n+\n+  ASSERT_TRUE(upstream_request_->waitForReset());\n+  ASSERT_TRUE(fake_upstream_connection_->close());\n+}\n+\n TEST_P(TcpTunnelingIntegrationTest, TestIdletimeoutWithLargeOutstandingData) {\n   enableHalfClose(false);\n   config_helper_.setBufferLimits(1024, 1024);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "078dae3549912e632c3776a5e9a4679226093276",
            "date": "2025-01-14T14:27:08Z",
            "author_login": "agrawroh"
          },
          {
            "sha": "7b20933ee263eb9aeaceee6bc309b80b997cbbb2",
            "date": "2025-01-14T14:13:49Z",
            "author_login": "phlax"
          },
          {
            "sha": "03cb8d59f80a2a75d9e1289c909e5979a79ace91",
            "date": "2025-01-13T06:31:54Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3487b225f48717dd5a2babb5f921df4353633cee",
            "date": "2025-01-13T06:10:11Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "acdcfc6ac262ee4087a652532b93922550efb061",
            "date": "2025-01-10T07:01:57Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-416",
    "description": "Envoy is an open source edge and service proxy, designed for cloud-native applications. In affected versions of Envoy a crash occurs when configured for :ref:`upstream tunneling <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.tunneling_config>` and the downstream connection disconnects while the the upstream connection or http/2 stream is still being established. There are no workarounds for this issue. Users are advised to upgrade.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-22T23:15:10.957",
    "last_modified": "2024-11-21T06:29:52.647",
    "fix_date": "2022-02-01T19:53:42Z"
  },
  "references": [
    {
      "url": "https://github.com/envoyproxy/envoy/commit/ce0ae309057a216aba031aff81c445c90c6ef145",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-cmx3-fvgf-83mf",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/commit/ce0ae309057a216aba031aff81c445c90c6ef145",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-cmx3-fvgf-83mf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.740410",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "envoy",
    "owner": "envoyproxy",
    "created_at": "2016-08-08T15:07:24Z",
    "updated_at": "2025-01-14T12:22:22Z",
    "pushed_at": "2025-01-14T05:36:17Z",
    "size": 240648,
    "stars": 25321,
    "forks": 4848,
    "open_issues": 1639,
    "watchers": 25321,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C++": 48293036,
      "Starlark": 3105942,
      "Java": 1320095,
      "Python": 605206,
      "Assembly": 327095,
      "Kotlin": 309606,
      "Swift": 250537,
      "Shell": 229801,
      "Go": 183281,
      "Rust": 107190,
      "JavaScript": 66339,
      "C": 61597,
      "Objective-C++": 55490,
      "Objective-C": 48840,
      "Jinja": 47798,
      "Smarty": 3528,
      "CSS": 2927,
      "HTML": 1522,
      "Emacs Lisp": 966,
      "Dockerfile": 960,
      "Thrift": 748,
      "PureBasic": 472,
      "Batchfile": 439,
      "Makefile": 303
    },
    "commit_activity": {
      "total_commits_last_year": 3286,
      "avg_commits_per_week": 63.19230769230769,
      "days_active_last_year": 303
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:55:59.245540"
  }
}