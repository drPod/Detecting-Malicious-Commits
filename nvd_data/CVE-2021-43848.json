{
  "cve_id": "CVE-2021-43848",
  "github_data": {
    "repository": "h2o/h2o",
    "fix_commit": "8c0eca3",
    "related_commits": [
      "8c0eca3",
      "8c0eca3"
    ],
    "patch_url": "https://github.com/h2o/h2o/commit/8c0eca3.patch",
    "fix_commit_details": {
      "sha": "8c0eca3",
      "commit_date": "2021-12-02T04:57:48Z",
      "author": {
        "login": "kazuho",
        "type": "User",
        "stats": {
          "total_commits": 7854,
          "average_weekly_commits": 14.228260869565217,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 465
        }
      },
      "commit_message": {
        "title": "postpone stream shutdown by H3 frame parsers",
        "length": 44,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 20,
        "additions": 11,
        "deletions": 9
      },
      "files": [
        {
          "filename": "lib/http3/server.c",
          "status": "modified",
          "additions": 11,
          "deletions": 9,
          "patch": "@@ -178,7 +178,7 @@ struct st_h2o_http3_server_stream_t {\n     struct {\n         h2o_buffer_t *buf;\n         int (*handle_input)(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,\n-                            const char **err_desc);\n+                            int in_generator, const char **err_desc);\n         uint64_t bytes_left_in_data_frame;\n     } recvbuf;\n     struct {\n@@ -244,9 +244,9 @@ struct st_h2o_http3_server_stream_t {\n static void on_stream_destroy(quicly_stream_t *qs, int err);\n static int retain_sendvecs(struct st_h2o_http3_server_stream_t *stream);\n static int handle_input_post_trailers(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,\n-                                      const char **err_desc);\n+                                      int in_generator, const char **err_desc);\n static int handle_input_expect_data(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,\n-                                    const char **err_desc);\n+                                    int in_generator, const char **err_desc);\n static void tunnel_write(struct st_h2o_http3_server_stream_t *stream);\n static void tunnel_write_delayed(h2o_timer_t *timer);\n \n@@ -834,7 +834,7 @@ static void handle_buffered_input(struct st_h2o_http3_server_stream_t *stream, i\n         while (src != src_end) {\n             int err;\n             const char *err_desc = NULL;\n-            if ((err = stream->recvbuf.handle_input(stream, &src, src_end, &err_desc)) != 0) {\n+            if ((err = stream->recvbuf.handle_input(stream, &src, src_end, in_generator, &err_desc)) != 0) {\n                 if (err == H2O_HTTP3_ERROR_INCOMPLETE) {\n                     if (!quicly_recvstate_transfer_complete(&stream->quic->recvstate))\n                         break;\n@@ -1036,7 +1036,7 @@ static void run_delayed(h2o_timer_t *timer)\n }\n \n int handle_input_post_trailers(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,\n-                               const char **err_desc)\n+                               int in_generator, const char **err_desc)\n {\n     h2o_http3_read_frame_t frame;\n     int ret;\n@@ -1056,7 +1056,7 @@ int handle_input_post_trailers(struct st_h2o_http3_server_stream_t *stream, cons\n }\n \n static int handle_input_expect_data_payload(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src,\n-                                            const uint8_t *src_end, const char **err_desc)\n+                                            const uint8_t *src_end, int in_generator, const char **err_desc)\n {\n     size_t bytes_avail = src_end - *src;\n \n@@ -1079,7 +1079,7 @@ static int handle_input_expect_data_payload(struct st_h2o_http3_server_stream_t\n }\n \n int handle_input_expect_data(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,\n-                             const char **err_desc)\n+                             int in_generator, const char **err_desc)\n {\n     h2o_http3_read_frame_t frame;\n     int ret;\n@@ -1102,7 +1102,7 @@ int handle_input_expect_data(struct st_h2o_http3_server_stream_t *stream, const\n             stream->req.content_length - stream->req.req_body_bytes_received < frame.length) {\n             /* The only viable option here is to reset the stream, as we might have already started streaming the request body\n              * upstream. This behavior is consistent with what we do in HTTP/2. */\n-            shutdown_stream(stream, H2O_HTTP3_ERROR_EARLY_RESPONSE, H2O_HTTP3_ERROR_GENERAL_PROTOCOL, 0);\n+            shutdown_stream(stream, H2O_HTTP3_ERROR_EARLY_RESPONSE, H2O_HTTP3_ERROR_GENERAL_PROTOCOL, in_generator);\n             return 0;\n         }\n         break;\n@@ -1134,8 +1134,10 @@ static int handle_input_expect_headers_send_http_error(struct st_h2o_http3_serve\n }\n \n static int handle_input_expect_headers(struct st_h2o_http3_server_stream_t *stream, const uint8_t **src, const uint8_t *src_end,\n-                                       const char **err_desc)\n+                                       int in_generator, const char **err_desc)\n {\n+    assert(!in_generator); /* this function is processing headers (before generators get assigned), not trailers */\n+\n     struct st_h2o_http3_server_conn_t *conn = get_conn(stream);\n     h2o_http3_read_frame_t frame;\n     int header_exists_map = 0, ret;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "af505adb8f80a849a977ff083d95a528bda7600a",
            "date": "2025-01-12T08:09:42Z",
            "author_login": "kazuho"
          },
          {
            "sha": "a439e8b428f5fe4df77cec3c50b0e7bb497baf8e",
            "date": "2025-01-12T07:22:34Z",
            "author_login": "kazuho"
          },
          {
            "sha": "fe14ac460954434da8342b57c0c6d124860c75ef",
            "date": "2025-01-12T06:22:56Z",
            "author_login": "kazuho"
          },
          {
            "sha": "acab0beacebc7559c0da0f3925d8f4105c29ed13",
            "date": "2025-01-12T05:15:47Z",
            "author_login": "kazuho"
          },
          {
            "sha": "f59d8509da2fc9b5cdbcec5118317a847e6d29db",
            "date": "2025-01-12T05:16:22Z",
            "author_login": "kazuho"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:H",
    "cwe_id": "CWE-908",
    "description": "h2o is an open source http server. In code prior to the `8c0eca3` commit h2o may attempt to access uninitialized memory. When receiving QUIC frames in certain order, HTTP/3 server-side implementation of h2o can be misguided to treat uninitialized memory as HTTP/3 frames that have been received. When h2o is used as a reverse proxy, an attacker can abuse this vulnerability to send internal state of h2o to backend servers controlled by the attacker or third party. Also, if there is an HTTP endpoint that reflects the traffic sent from the client, an attacker can use that reflector to obtain internal state of h2o. This internal state includes traffic of other connections in unencrypted form and TLS session tickets. This vulnerability exists in h2o server with HTTP/3 support, between commit 93af138 and d1f0f65. None of the released versions of h2o are affected by this vulnerability. There are no known workarounds. Users of unreleased versions of h2o using HTTP/3 are advised to upgrade immediately.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-02-01T13:15:09.717",
    "last_modified": "2024-11-21T06:29:55.443",
    "fix_date": "2021-12-02T04:57:48Z"
  },
  "references": [
    {
      "url": "https://github.com/h2o/h2o/commit/8c0eca3",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/h2o/h2o/security/advisories/GHSA-f9xw-j925-m4m4",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/h2o/h2o/commit/8c0eca3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/h2o/h2o/security/advisories/GHSA-f9xw-j925-m4m4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.100452",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "h2o",
    "owner": "h2o",
    "created_at": "2014-08-16T23:59:03Z",
    "updated_at": "2025-01-14T02:47:54Z",
    "pushed_at": "2025-01-12T08:09:42Z",
    "size": 121723,
    "stars": 10968,
    "forks": 849,
    "open_issues": 691,
    "watchers": 10968,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 3167175,
      "Perl": 852069,
      "Mathematica": 212238,
      "Ruby": 66838,
      "Shell": 61760,
      "CMake": 43218,
      "Python": 27144,
      "C++": 24060,
      "PHP": 10137,
      "Makefile": 9686,
      "DTrace": 7182,
      "HTML": 6430,
      "Vim Script": 73,
      "JavaScript": 16
    },
    "commit_activity": {
      "total_commits_last_year": 421,
      "avg_commits_per_week": 8.096153846153847,
      "days_active_last_year": 102
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:02:53.733286"
  }
}