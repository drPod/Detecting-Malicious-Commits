{
  "cve_id": "CVE-2021-43857",
  "github_data": {
    "repository": "Gerapy/Gerapy",
    "fix_commit": "49bcb19be5e0320e7e1535f34fe00f16a3cf3b28",
    "related_commits": [
      "49bcb19be5e0320e7e1535f34fe00f16a3cf3b28",
      "49bcb19be5e0320e7e1535f34fe00f16a3cf3b28"
    ],
    "patch_url": "https://github.com/Gerapy/Gerapy/commit/49bcb19be5e0320e7e1535f34fe00f16a3cf3b28.patch",
    "fix_commit_details": {
      "sha": "49bcb19be5e0320e7e1535f34fe00f16a3cf3b28",
      "commit_date": "2021-12-26T09:50:00Z",
      "author": {
        "login": "Germey",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix remote execute",
        "length": 18,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 96,
        "additions": 56,
        "deletions": 40
      },
      "files": [
        {
          "filename": "gerapy/server/core/views.py",
          "status": "modified",
          "additions": 56,
          "deletions": 40,
          "patch": "@@ -2,7 +2,12 @@\n from pathlib import Path\n from urllib.parse import unquote\n import base64\n-import json, os, requests, time, pytz, pymongo\n+import json\n+import os\n+import requests\n+import time\n+import pytz\n+import pymongo\n from shutil import rmtree\n from requests.exceptions import ConnectionError\n from os.path import join, exists\n@@ -173,7 +178,8 @@ def spider_list(request, client_id, project_name):\n         client = Client.objects.get(id=client_id)\n         scrapyd = get_scrapyd(client)\n         spiders = scrapyd.list_spiders(project_name)\n-        spiders = [{'name': spider, 'id': index + 1} for index, spider in enumerate(spiders)]\n+        spiders = [{'name': spider, 'id': index + 1}\n+                   for index, spider in enumerate(spiders)]\n         return JsonResponse(spiders)\n \n \n@@ -242,23 +248,25 @@ def project_configure(request, project_name):\n     if request.method == 'GET':\n         project = Project.objects.get(name=project_name)\n         project = model_to_dict(project)\n-        project['configuration'] = json.loads(project['configuration']) if project['configuration'] else None\n+        project['configuration'] = json.loads(\n+            project['configuration']) if project['configuration'] else None\n         return JsonResponse(project)\n-    \n+\n     # update configuration\n     elif request.method == 'POST':\n         project = Project.objects.filter(name=project_name)\n         data = json.loads(request.body)\n-        configuration = json.dumps(data.get('configuration'), ensure_ascii=False)\n+        configuration = json.dumps(\n+            data.get('configuration'), ensure_ascii=False)\n         project.update(**{'configuration': configuration})\n-        \n         # for safe protection\n-        project_name = re.sub('[\\!\\@\\#\\$\\;\\&\\*\\~\\\"\\'\\{\\}\\]\\[\\-\\+\\%\\^]+', '', project_name)\n+        project_name = re.sub(\n+            '[\\s\\!\\@\\#\\$\\;\\&\\*\\~\\\"\\'\\{\\}\\]\\[\\-\\+\\%\\^]+', '', project_name)\n         # execute generate cmd\n-        cmd = ' '.join(['gerapy', 'generate', project_name])\n-        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n+        cmd = ['gerapy', 'generate', project_name]\n+        p = Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n         stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n-        \n+\n         if not stderr:\n             return JsonResponse({'status': '1'})\n         else:\n@@ -294,7 +302,8 @@ def project_create(request):\n         data['configurable'] = 1\n         project, result = Project.objects.update_or_create(**data)\n         # generate a single project folder\n-        path = join(os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER)), data['name'])\n+        path = join(os.path.abspath(\n+            join(os.getcwd(), PROJECTS_FOLDER)), data['name'])\n         os.mkdir(path)\n         return JsonResponse(model_to_dict(project))\n \n@@ -334,12 +343,13 @@ def project_clone(request):\n         if not address.startswith('http'):\n             return JsonResponse({'status': False})\n         address = address + '.git' if not address.endswith('.git') else address\n-        cmd = 'git clone {address} {target}'.format(address=address, target=join(PROJECTS_FOLDER, Path(address).stem))\n+        cmd = ['git', 'clone', 'address', join(PROJECTS_FOLDER, Path(address).stem)]\n         logger.debug('clone cmd %s', cmd)\n-        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n+        p = Popen(cmd, shell=False, stdin=PIPE, stdout=PIPE, stderr=PIPE)\n         stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n         logger.debug('clone run result %s', stdout)\n-        if stderr: logger.error(stderr)\n+        if stderr:\n+            logger.error(stderr)\n         return JsonResponse({'status': True}) if not stderr else JsonResponse({'status': False})\n \n \n@@ -393,10 +403,12 @@ def project_version(request, client_id, project_name):\n                 return JsonResponse({'message': 'Connect Error'}, status=500)\n             if len(versions) > 0:\n                 version = versions[-1]\n-                deployed_at = timezone.datetime.fromtimestamp(int(version), tz=pytz.timezone(TIME_ZONE))\n+                deployed_at = timezone.datetime.fromtimestamp(\n+                    int(version), tz=pytz.timezone(TIME_ZONE))\n             else:\n                 deployed_at = None\n-            deploy, result = Deploy.objects.update_or_create(client=client, project=project, deployed_at=deployed_at)\n+            deploy, result = Deploy.objects.update_or_create(\n+                client=client, project=project, deployed_at=deployed_at)\n         # return deploy json info\n         return JsonResponse(model_to_dict(deploy))\n \n@@ -446,7 +458,7 @@ def project_build(request, project_name):\n     # get project folder\n     path = os.path.abspath(join(os.getcwd(), PROJECTS_FOLDER))\n     project_path = join(path, project_name)\n-    \n+\n     # get build version\n     if request.method == 'GET':\n         egg = find_egg(project_path)\n@@ -470,7 +482,7 @@ def project_build(request, project_name):\n         # transfer model to dict then dumps it to json\n         data = model_to_dict(model)\n         return JsonResponse(data)\n-    \n+\n     # build operation manually by clicking button\n     elif request.method == 'POST':\n         data = json.loads(request.body)\n@@ -483,7 +495,8 @@ def project_build(request, project_name):\n         built_at = timezone.now()\n         # if project does not exists in db, create it\n         if not Project.objects.filter(name=project_name):\n-            Project(name=project_name, description=description, built_at=built_at, egg=egg).save()\n+            Project(name=project_name, description=description,\n+                    built_at=built_at, egg=egg).save()\n             model = Project.objects.get(name=project_name)\n         # if project exists, update egg, description, built_at info\n         else:\n@@ -526,17 +539,16 @@ def project_parse(request, project_name):\n         body = data.get('body', '')\n         if args.get('method').lower() != 'get':\n             args['body'] = \"'\" + json.dumps(body, ensure_ascii=False) + \"'\"\n-        \n-        args_cmd = ' '.join(\n-            ['--{arg} {value}'.format(arg=arg, value=value) for arg, value in args.items()])\n-        logger.debug('args cmd %s', args_cmd)\n-        cmd = 'gerapy parse {args_cmd} {project_path} {spider_name}'.format(\n-            args_cmd=args_cmd,\n-            project_path=project_path,\n-            spider_name=spider_name\n-        )\n+\n+        args_array = []\n+        for arg, value in args.items():\n+            args_array.append(f'--{arg}')\n+            args_array.append(f'{value}')\n+        cmd = ['gerapy', 'parse'] + args_array + [project_path] + [spider_name]\n+        print('cmd', cmd)\n         logger.debug('parse cmd %s', cmd)\n-        p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)\n+        p = Popen(cmd, shell=False, stdin=PIPE,\n+                         stdout=PIPE, stderr=PIPE, close_fds=True)\n         stdout, stderr = bytes2str(p.stdout.read()), bytes2str(p.stderr.read())\n         logger.debug('stdout %s, stderr %s', stdout, stderr)\n         if not stderr:\n@@ -645,7 +657,6 @@ def job_list(request, client_id, project_name):\n                 job['status'] = status\n                 jobs.append(job)\n         return JsonResponse(jobs)\n-    \n \n \n @api_view(['GET'])\n@@ -663,7 +674,8 @@ def job_log(request, client_id, project_name, spider_name, job_id):\n     if request.method == 'GET':\n         client = Client.objects.get(id=client_id)\n         # get log url\n-        url = log_url(client.ip, client.port, project_name, spider_name, job_id)\n+        url = log_url(client.ip, client.port,\n+                      project_name, spider_name, job_id)\n         # get last 1000 bytes of log\n         response = requests.get(url, timeout=5, headers={\n             'Range': 'bytes=-1000'\n@@ -765,7 +777,8 @@ def monitor_create(request):\n     if request.method == 'POST':\n         data = json.loads(request.body)\n         data = data['form']\n-        data['configuration'] = json.dumps(data['configuration'], ensure_ascii=False)\n+        data['configuration'] = json.dumps(\n+            data['configuration'], ensure_ascii=False)\n         monitor = Monitor.objects.create(**data)\n         return JsonResponse(model_to_dict(monitor))\n \n@@ -785,7 +798,8 @@ def task_create(request):\n                                    name=data.get('name'),\n                                    spider=data.get('spider'),\n                                    trigger=data.get('trigger'),\n-                                   configuration=json.dumps(data.get('configuration'), ensure_ascii=False),\n+                                   configuration=json.dumps(\n+                                       data.get('configuration'), ensure_ascii=False),\n                                    modified=1)\n         return JsonResponse({'result': '1', 'data': model_to_dict(task)})\n \n@@ -803,7 +817,8 @@ def task_update(request, task_id):\n         task = Task.objects.filter(id=task_id)\n         data = json.loads(request.body)\n         data['clients'] = json.dumps(data.get('clients'), ensure_ascii=False)\n-        data['configuration'] = json.dumps(data.get('configuration'), ensure_ascii=False)\n+        data['configuration'] = json.dumps(\n+            data.get('configuration'), ensure_ascii=False)\n         data['modified'] = 1\n         task.update(**data)\n         return JsonResponse(model_to_dict(Task.objects.get(id=task_id)))\n@@ -823,11 +838,10 @@ def task_remove(request, task_id):\n         clients = clients_of_task(task)\n         for client in clients:\n             job_id = get_job_id(client, task)\n-            DjangoJob.objects.filter(name=job_id).delete()\n+            DjangoJob.objects.filter(id=job_id).delete()\n         # delete task\n         Task.objects.filter(id=task_id).delete()\n         return JsonResponse({'result': '1'})\n-    \n \n \n @api_view(['GET'])\n@@ -875,12 +889,14 @@ def task_status(request, task_id):\n         clients = clients_of_task(task)\n         for client in clients:\n             job_id = get_job_id(client, task)\n-            jobs = DjangoJob.objects.filter(name=job_id)\n+            jobs = DjangoJob.objects.filter(id=job_id)\n             logger.debug('jobs from djangojob %s', jobs)\n             # if job does not exist, for date mode exceed time\n-            if not jobs: continue\n-            job = DjangoJob.objects.get(name=job_id)\n-            executions = serialize('json', DjangoJobExecution.objects.filter(job=job))\n+            if not jobs:\n+                continue\n+            job = DjangoJob.objects.get(id=job_id)\n+            executions = serialize(\n+                'json', DjangoJobExecution.objects.filter(job=job))\n             result.append({\n                 'client': model_to_dict(client),\n                 'next': job.next_run_time,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7c4eda875563f5d0342a3650959e0502bc279d77",
            "date": "2024-09-07T00:49:42Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "311dcbc87065580943f8b0475e55b9233ae0f181",
            "date": "2024-07-07T03:31:46Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "0e7fa3c02b08ad5c7873f57758257155ea67b442",
            "date": "2024-05-23T17:19:34Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e5662e2b18a0c163562f5bf090d0af962b271759",
            "date": "2024-05-11T19:10:39Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "2d09c5cd8af999038a9c823f70e5a74d8d95ebd6",
            "date": "2024-05-11T19:09:10Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "Gerapy is a distributed crawler management framework. Gerapy prior to version 0.9.8 is vulnerable to remote code execution, and this issue is patched in version 0.9.8.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-12-27T19:15:08.683",
    "last_modified": "2024-11-21T06:29:56.617",
    "fix_date": "2021-12-26T09:50:00Z"
  },
  "references": [
    {
      "url": "http://packetstormsecurity.com/files/165459/Gerapy-0.9.7-Remote-Code-Execution.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Gerapy/Gerapy/commit/49bcb19be5e0320e7e1535f34fe00f16a3cf3b28",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Gerapy/Gerapy/issues/219",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Gerapy/Gerapy/security/advisories/GHSA-9w7f-m4j4-j3xw",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://packetstormsecurity.com/files/165459/Gerapy-0.9.7-Remote-Code-Execution.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Gerapy/Gerapy/commit/49bcb19be5e0320e7e1535f34fe00f16a3cf3b28",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Gerapy/Gerapy/issues/219",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/Gerapy/Gerapy/security/advisories/GHSA-9w7f-m4j4-j3xw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.031091",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Gerapy",
    "owner": "Gerapy",
    "created_at": "2017-06-30T03:58:27Z",
    "updated_at": "2025-01-13T09:19:03Z",
    "pushed_at": "2024-10-29T22:08:29Z",
    "size": 38367,
    "stars": 3373,
    "forks": 642,
    "open_issues": 72,
    "watchers": 3373,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 1719745,
      "Vue": 185910,
      "JavaScript": 27475,
      "SCSS": 10276,
      "HTML": 3111,
      "Dockerfile": 1844,
      "Shell": 153
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:29:50.851240"
  }
}