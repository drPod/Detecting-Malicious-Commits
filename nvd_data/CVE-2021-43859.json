{
  "cve_id": "CVE-2021-43859",
  "github_data": {
    "repository": "x-stream/xstream",
    "fix_commit": "e8e88621ba1c85ac3b8620337dd672e0c0c3a846",
    "related_commits": [
      "e8e88621ba1c85ac3b8620337dd672e0c0c3a846",
      "e8e88621ba1c85ac3b8620337dd672e0c0c3a846"
    ],
    "patch_url": "https://github.com/x-stream/xstream/commit/e8e88621ba1c85ac3b8620337dd672e0c0c3a846.patch",
    "fix_commit_details": {
      "sha": "e8e88621ba1c85ac3b8620337dd672e0c0c3a846",
      "commit_date": "2021-12-27T00:24:08Z",
      "author": {
        "login": "joehni",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Describe and fix CVE-2021-43859.",
        "length": 32,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 589,
        "additions": 568,
        "deletions": 21
      },
      "files": [
        {
          "filename": "xstream-distribution/src/content/CVE-2021-43859.html",
          "status": "added",
          "additions": 199,
          "deletions": 0,
          "patch": "@@ -0,0 +1,199 @@\n+<html>\n+<!--\n+ Copyright (C) 2021 XStream committers.\n+ All rights reserved.\n+ \n+ The software in this package is published under the terms of the BSD\n+ style license a copy of which has been included with this distribution in\n+ the LICENSE.txt file.\n+ \n+ Created on 23. December 2021 by Joerg Schaible\n+ -->\n+  <head>\n+    <title>CVE-2021-43859</title>\n+  </head>\n+  <body>\n+\n+    <h2 id=\"vulnerability\">Vulnerability</h2>\n+    \n+    <p>CVE-2021-43859: XStream can cause a Denial of Service by injecting highly recursive collections or maps.</p>\n+    \n+    <h2 id=\"affected_versions\">Affected Versions</h2>\n+    \n+    <p>All versions until and including version 1.4.18 are affected.</p>\n+\n+    <h2 id=\"description\">Description</h2>\n+    \n+    <p>The processed stream at unmarshalling time contains type information to recreate the formerly written objects.\n+    XStream creates therefore new instances based on these type information.  An attacker can manipulate the processed\n+    input stream and replace or inject objects, that result in exponential recursively hashcode calculation, causing a denial\n+    of service.</p>\n+\n+    <h2 id=\"reproduction\">Steps to Reproduce</h2>\n+\n+    <p>The attack uses the hashcode implementation of collection types in the Java runtime. Following types are affected with\n+    lastest Java versions available in December 2021:</p>\n+    <ul>\n+    \t<li>java.util.HashMap</li>\n+\t\t<li>java.util.HashSet</li>\n+\t\t<li>java.util.Hashtable</li>\n+ \t\t<li>java.util.LinkedHashMap</li>\n+\t\t<li>java.util.LinkedHashSet</li>\n+\t\t<li>java.util.Stack (older Java revisions only)</li>\n+\t\t<li>java.util.Vector (older Java revisions only)</li>\n+\t\t<li>Other third party collection implementations that use their element's hash code may also be affected</li> \n+    </ul>\n+    <p>Create a simple HashSet and use XStream to marshal it to XML.  Replace the XML with following snippet, increase the\n+    depth of the structure and unmarshal it with XStream:</p>\n+<div class=\"Source XML\"><pre>&lt;set&gt;\n+  &lt;set&gt;\n+    &lt;string&gt;a&lt;/string&gt;\n+    &lt;set&gt;\n+      &lt;string&gt;a&lt;/string&gt;\n+      &lt;set&gt;\n+        &lt;string&gt;a&lt;/string&gt;\n+      &lt;/set&gt;\n+      &lt;set&gt;\n+        &lt;string&gt;b&lt;/string&gt;\n+      &lt;/set&gt;\n+    &lt;/set&gt;\n+    &lt;set&gt;\n+      &lt;set reference=&quot;../../set/set&quot;/&gt;\n+      &lt;string&gt;b&lt;/string&gt;\n+      &lt;set reference=&quot;../../set/set[2]&quot;/&gt;\n+    &lt;/set&gt;\n+  &lt;/set&gt;\n+  &lt;set&gt;\n+    &lt;set reference=&quot;../../set/set&quot;/&gt;\n+    &lt;string&gt;b&lt;/string&gt;\n+    &lt;set reference=&quot;../../set/set[2]&quot;/&gt;\n+  &lt;/set&gt;\n+&lt;/set&gt;\n+</pre></div>\n+<div class=\"Source Java\"><pre>XStream xstream = new XStream();\n+xstream.fromXML(xml);\n+</pre></div>\n+    <p>Create a simple HashMap and use XStream to marshal it to XML.  Replace the XML with following snippet, increase the\n+    depth of the structure and unmarshal it with XStream:</p>\n+<div class=\"Source XML\"><pre>&lt;map&gt;\n+  &lt;entry&gt;\n+    &lt;map&gt;\n+      &lt;entry&gt;\n+        &lt;string&gt;a&lt;/string&gt;\n+        &lt;string&gt;b&lt;/string&gt;\n+      &lt;/entry&gt;\n+      &lt;entry&gt;\n+        &lt;map&gt;\n+          &lt;entry&gt;\n+            &lt;string&gt;a&lt;/string&gt;\n+            &lt;string&gt;b&lt;/string&gt;\n+          &lt;/entry&gt;\n+          &lt;entry&gt;\n+            &lt;map&gt;\n+              &lt;entry&gt;\n+                &lt;string&gt;a&lt;/string&gt;\n+                &lt;string&gt;b&lt;/string&gt;\n+              &lt;/entry&gt;\n+            &lt;/map&gt;\n+            &lt;map&gt;\n+              &lt;entry&gt;\n+                &lt;string&gt;c&lt;/string&gt;\n+                &lt;string&gt;d&lt;/string&gt;\n+              &lt;/entry&gt;\n+            &lt;/map&gt;\n+          &lt;/entry&gt;\n+          &lt;entry&gt;\n+            &lt;map reference=&quot;../../entry[2]/map[2]&quot;/&gt;\n+            &lt;map reference=&quot;../../entry[2]/map&quot;/&gt;\n+          &lt;/entry&gt;\n+        &lt;/map&gt;\n+        &lt;map&gt;\n+          &lt;entry&gt;\n+            &lt;string&gt;c&lt;/string&gt;\n+            &lt;string&gt;d&lt;/string&gt;\n+          &lt;/entry&gt;\n+          &lt;entry&gt;\n+            &lt;map reference=&quot;../../../entry[2]/map&quot;/&gt;\n+            &lt;map reference=&quot;../../../entry[2]/map[2]&quot;/&gt;\n+          &lt;/entry&gt;\n+          &lt;entry&gt;\n+            &lt;map reference=&quot;../../../entry[2]/map[2]&quot;/&gt;\n+            &lt;map reference=&quot;../../../entry[2]/map&quot;/&gt;\n+          &lt;/entry&gt;\n+        &lt;/map&gt;\n+      &lt;/entry&gt;\n+      &lt;entry&gt;\n+        &lt;map reference=&quot;../../entry[2]/map[2]&quot;/&gt;\n+        &lt;map reference=&quot;../../entry[2]/map&quot;/&gt;\n+      &lt;/entry&gt;\n+    &lt;/map&gt;\n+    &lt;map&gt;\n+      &lt;entry&gt;\n+        &lt;string&gt;c&lt;/string&gt;\n+        &lt;string&gt;d&lt;/string&gt;\n+      &lt;/entry&gt;\n+      &lt;entry&gt;\n+        &lt;map reference=&quot;../../../entry[2]/map&quot;/&gt;\n+        &lt;map reference=&quot;../../../entry[2]/map[2]&quot;/&gt;\n+      &lt;/entry&gt;\n+      &lt;entry&gt;\n+        &lt;map reference=&quot;../../../entry[2]/map[2]&quot;/&gt;\n+        &lt;map reference=&quot;../../../entry[2]/map&quot;/&gt;\n+      &lt;/entry&gt;\n+    &lt;/map&gt;\n+  &lt;/entry&gt;\n+  &lt;entry&gt;\n+    &lt;map reference=&quot;../../entry[2]/map[2]&quot;/&gt;\n+    &lt;map reference=&quot;../../entry[2]/map&quot;/&gt;\n+  &lt;/entry&gt;\n+&lt;/map&gt;\n+</pre></div>\n+<div class=\"Source Java\"><pre>XStream xstream = new XStream();\n+xstream.fromXML(xml);\n+</pre></div>\n+\n+    <p>As soon as the XML is unmarshalled, the hash codes of the elements are calculated and the calculation time increases\n+    exponentially due to the highly recursive structure.</p>\n+\n+    <p>Note, this example uses XML, but the attack can be performed for any supported format, that supports references, i.e.\n+    JSON is not affected.</p>\n+\n+    <h2 id=\"impact\">Impact</h2>\n+\n+    <p>The vulnerability may allow a remote attacker to allocate 100% CPU time on the target system depending on CPU\n+    type or parallel execution of such a payload resulting in a denial of service only by manipulating the processed\n+    input stream.</p>\n+\n+    <h2 id=\"workarounds\">Workarounds</h2>\n+\n+    <p>If your object graph does not use referenced elements at all, you may simply set the NO_REFERENCE mode:</p>\n+\n+<div class=\"Source Java\"><pre>XStream xstream = new XStream();\n+xstream.setMode(XStream.NO_REFERENCES);\n+</pre></div>\n+\n+    <p>If your object graph contains neither a Hashtable, HashMap nor a HashSet (or one of the linked variants of it) then you\n+    can use the security framework to deny the usage of these types:</p>\n+\n+<div class=\"Source Java\"><pre>XStream xstream = new XStream();\n+xstream.denyTypes(new Class[]{\n+\tjava.util.HashMap.class, java.util.HashSet.class, java.util.Hashtable.class, java.util.LinkedHashMap.class, java.util.LinkedHashSet.class\n+});\n+</pre></div>\n+\n+    <p>Unfortunately these types are very common. If you only use HashMap or HashSet and your XML refers these only as default\n+    map or set, you may additionally change the default implementation of java.util.Map and java.util.Set at unmarshalling time:</p>\n+\n+<div class=\"Source Java\"><pre>xstream.addDefaultImplementation(java.util.TreeMap.class, java.util.Map.class);\n+xstream.addDefaultImplementation(java.util.TreeSet.class, java.util.Set.class);\n+</pre></div>\n+\n+    <p>However, this implies that your application does not care about the implementation of the map and all elements are comparable.</p>\n+\n+    <h2 id=\"credits\">Credits</h2>\n+    \n+    <p>r00t4dm at Cloud-Penetrating Arrow Lab found and reported the issue to XStream and provided the required information to\n+    reproduce it.</p>\n+    \n+      </body>\n+ </html>"
        },
        {
          "filename": "xstream-distribution/src/content/changes.html",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -39,6 +39,20 @@ <h1 id=\"upcoming-1.4.x\">Upcoming 1.4.x maintenance release</h1>\n \n \t<p>Not yet released.</p>\n \n+\t<p class=\"highlight\">This maintenance release addresses the security vulnerability\n+\t<a href=\"CVE-2021-43859.html\">CVE-2021-43859</a>, when unmarshalling highly recursive collections or maps causing a\n+\tDenial of Service.</p>\n+\n+\t<h2>API changes</h2>\n+\n+\t<ul>\n+\t\t<li>Added c.t.x.XStream.COLLECTION_UPDATE_LIMIT and c.t.x.XStream.COLLECTION_UPDATE_SECONDS.</li>\n+\t\t<li>Added c.t.x.XStream.setCollectionUpdateLimit(int).</li>\n+\t\t<li>Added c.t.x.core.SecurityUtils.</li>\n+\t\t<li>Added c.t.x.security.AbstractSecurityException and c.t.x.security.InputManipulationException.</li>\n+\t\t<li>c.t.x.security.InputManipulationException derives now from c.t.x.security.AbstractSecurityException.</li>\n+\t</ul>\n+\n \t<h1 id=\"1.4.18\">1.4.18</h1>\n \n \t<p>Released August 22, 2021.</p>"
        },
        {
          "filename": "xstream-distribution/src/content/security.html",
          "status": "modified",
          "additions": 34,
          "deletions": 6,
          "patch": "@@ -30,13 +30,13 @@\n \tcontext of the server running the XStream process or cause a denial of service by crashing the application or\n \tmanage to enter an endless loop consuming 100% of CPU cycles.</p>\n   \n-    <p class=highlight>Note: XStream supports other data formats than XML, e.g. JSON. Those formats can be used for\n-    the same attacks.</p>\n+    <p class=highlight>Note: XStream supports other data formats than XML, e.g. JSON. Those formats can usually be used\n+    for the same attacks.</p>\n  \n-\t<p>Note, that the XML data can be manipulated on different levels.  For example, manipulating values on existing\n- \tobjects (such as a price value), accessing private data, or breaking the format and causing the XML parser to fail.\n- \tThe latter case will raise an\u00a0exception, but the former case must be handled by validity checks in any application\n- \twhich processes user-supplied XML.</p>\n+\t<p>The XML data can be manipulated on different levels.  For example, manipulating values on existing objects (such\n+\tas a price value), accessing private data, or breaking the format and causing the XML parser to fail.  The latter\n+\tcase will raise an\u00a0exception, but the former case must be handled by validity checks in any application which\n+\tprocesses user-supplied XML.</p>\n \n     <h2 id=\"CVEs\">Documented Vulnerabilities</h2>\n \n@@ -49,6 +49,14 @@ <h2 id=\"CVEs\">Documented Vulnerabilities</h2>\n         <th>CVE</th>\n         <th>Description</th>\n       </tr>\n+      <tr>\n+        <th>Version 1.4.18</th>\n+        <td></td>\n+      </tr>\n+      <tr>\n+        <th><a href=\"CVE-2021-43859.html\">CVE-2021-43859</a></th>\n+        <td>XStream can cause a Denial of Service by injecting highly recursive collections or maps.</td>\n+      </tr>\n       <tr>\n         <th>Version 1.4.17</th>\n         <td></td>\n@@ -258,6 +266,16 @@ <h2 id=\"implicit\">Implicit Security</h2>\n     because no-one can assure, that no other vulnerability is found.  A better approach is the usage of a whitelist\n     i.e. the allowed class types are setup explicitly. This is the default for XStream 1.4.18 (see below).</p>\n     \n+    <p>XStream supports references to objects already occuring on the object graph in an earlier location.  This allows\n+    an attacker to create a highly recursive object structure.  Some collections or maps calculate the position of a\n+    member based on the data of the member itself.  This is true for sorting collections or maps, but also for\n+    collections or maps based on the hash code of the individual members.  The calculation time for the member's\n+    position can increase exponentially depending on the recursive depth of the structure and cause therefore a Denial\n+    of Service.  Therefore XStream measures the time consumed to add an element to a collection or map since version\n+    1.4.19.  Normally this operation is performed in a view milliseconds, but if adding elements take longer than a\n+    second, then the time is accumulated and an exception is thrown if it exceeds a definable limit (20 seconds by\n+    default).</p>   \n+    \n     <h2 id=\"explicit\">Explicit Security</h2>\n  \u00a0\u00a0\u00a0\u00a0\n \t<p>Starting with XStream 1.4.7, it is possible to define <a href=\"#framework\">permissions</a> for types, to check\n@@ -285,6 +303,16 @@ <h2 id=\"explicit\">Explicit Security</h2>\n \t<p class=highlight>Apart from value manipulations, this implementation still allows the injection of allowed\n \tobjects at wrong locations, e.g. inserting an integer into a list of strings.</p>\n     \n+    <p>To avoid an attack based on the position of an element in a collection or map, you should also use XStream's\n+    default converters for 3rd party or own implementations of collections or maps.  Own custom converters of such\n+    types should measure the time to add an element at deserialization time using the following sequence in the\n+    implementation of the unmarshal method:<div class=\"Source Java\">\n+<pre>// unmarshal element of collection \n+long now = System.currentTimeMillis();\n+// add element here, e.g. list.add(element);\n+SecurityUtils.checkForCollectionDoSAttack(context, now);\n+</pre></div></p>   \n+    \n     <h2 id=\"validation\">XML Validation</h2>\n \n \t<p>XML itself supports input validation using a schema and a validating parser.  With XStream, you can use e.g. a"
        },
        {
          "filename": "xstream-distribution/src/content/website.xml",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -89,6 +89,7 @@\n         <page>CVE-2021-39152.html</page>\n         <page>CVE-2021-39153.html</page>\n         <page>CVE-2021-39154.html</page>\n+        <page>CVE-2021-43859.html</page>\n         <page>CVE-2020-26217.html</page>\n         <page>CVE-2020-26258.html</page>\n         <page>CVE-2020-26259.html</page>"
        },
        {
          "filename": "xstream/src/java/com/thoughtworks/xstream/XStream.java",
          "status": "modified",
          "additions": 40,
          "deletions": 2,
          "patch": "@@ -151,6 +151,7 @@\n import com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper;\n import com.thoughtworks.xstream.security.AnyTypePermission;\n import com.thoughtworks.xstream.security.ArrayTypePermission;\n+import com.thoughtworks.xstream.security.InputManipulationException;\n import com.thoughtworks.xstream.security.ExplicitTypePermission;\n import com.thoughtworks.xstream.security.InterfaceTypePermission;\n import com.thoughtworks.xstream.security.NoPermission;\n@@ -295,6 +296,8 @@ public class XStream {\n \n     // CAUTION: The sequence of the fields is intentional for an optimal XML output of a\n     // self-serialization!\n+    private int collectionUpdateLimit = 20;\n+\n     private ReflectionProvider reflectionProvider;\n     private HierarchicalStreamDriver hierarchicalStreamDriver;\n     private ClassLoaderReference classLoaderReference;\n@@ -329,6 +332,9 @@ public class XStream {\n     public static final int PRIORITY_LOW = -10;\n     public static final int PRIORITY_VERY_LOW = -20;\n \n+    public static final String COLLECTION_UPDATE_LIMIT = \"XStreamCollectionUpdateLimit\";\n+    public static final String COLLECTION_UPDATE_SECONDS = \"XStreamCollectionUpdateSeconds\";\n+\n     private static final String ANNOTATION_MAPPER_TYPE = \"com.thoughtworks.xstream.mapper.AnnotationMapper\";\n     private static final Pattern IGNORE_ALL = Pattern.compile(\".*\");\n \n@@ -1182,6 +1188,23 @@ public void setMarshallingStrategy(MarshallingStrategy marshallingStrategy) {\n         this.marshallingStrategy = marshallingStrategy;\n     }\n \n+    /**\n+     * Set time limit for adding elements to collections or maps.\n+     * \n+     * Manipulated content may be used to create recursive hash code calculations or sort operations. An\n+     * {@link InputManipulationException} is thrown, it the summed up time to add elements to collections or maps\n+     * exceeds the provided limit.\n+     * \n+     * Note, that the time to add an individual element is calculated in seconds, not milliseconds. However, attacks\n+     * typically use objects with exponential growing calculation times.\n+     * \n+     * @param maxSeconds limit in seconds or 0 to disable check\n+     * @since upcoming\n+     */\n+    public void setCollectionUpdateLimit(int maxSeconds) {\n+        collectionUpdateLimit = maxSeconds;\n+    }\n+\n     /**\n      * Serialize an object to a pretty-printed XML String.\n      *\n@@ -1388,6 +1411,13 @@ public Object unmarshal(HierarchicalStreamReader reader, Object root) {\n      */\n     public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {\n         try {\n+            if (collectionUpdateLimit >= 0) {\n+                if (dataHolder == null) {\n+                    dataHolder = new MapBackedDataHolder();\n+                }\n+                dataHolder.put(COLLECTION_UPDATE_LIMIT, new Integer(collectionUpdateLimit));\n+                dataHolder.put(COLLECTION_UPDATE_SECONDS, new Integer(0));\n+            }\n             return marshallingStrategy.unmarshal(root, reader, dataHolder, converterLookup, mapper);\n         } catch (ConversionException e) {\n             Package pkg = getClass().getPackage();\n@@ -2053,15 +2083,23 @@ public ObjectInputStream createObjectInputStream(final HierarchicalStreamReader\n      * @see #createObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader)\n      * @since 1.4.10\n      */\n-    public ObjectInputStream createObjectInputStream(final HierarchicalStreamReader reader, final DataHolder dataHolder)\n+    public ObjectInputStream createObjectInputStream(final HierarchicalStreamReader reader, DataHolder dataHolder)\n             throws IOException {\n+        if (collectionUpdateLimit >= 0) {\n+            if (dataHolder == null) {\n+                dataHolder = new MapBackedDataHolder();\n+            }\n+            dataHolder.put(COLLECTION_UPDATE_LIMIT, new Integer(collectionUpdateLimit));\n+            dataHolder.put(COLLECTION_UPDATE_SECONDS, new Integer(0));\n+        }\n+        final DataHolder dh = dataHolder;\n         return new CustomObjectInputStream(new CustomObjectInputStream.StreamCallback() {\n             public Object readFromStream() throws EOFException {\n                 if (!reader.hasMoreChildren()) {\n                     throw new EOFException();\n                 }\n                 reader.moveDown();\n-                final Object result = unmarshal(reader, null, dataHolder);\n+                final Object result = unmarshal(reader, null, dh);\n                 reader.moveUp();\n                 return result;\n             }"
        },
        {
          "filename": "xstream/src/java/com/thoughtworks/xstream/converters/collections/CollectionConverter.java",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n /*\n  * Copyright (C) 2003, 2004, 2005 Joe Walnes.\n- * Copyright (C) 2006, 2007, 2010, 2011, 2013, 2018 XStream Committers.\n+ * Copyright (C) 2006, 2007, 2010, 2011, 2013, 2018, 2021 XStream Committers.\n  * All rights reserved.\n  *\n  * The software in this package is published under the terms of the BSD\n@@ -13,6 +13,7 @@\n \n import com.thoughtworks.xstream.converters.MarshallingContext;\n import com.thoughtworks.xstream.converters.UnmarshallingContext;\n+import com.thoughtworks.xstream.core.SecurityUtils;\n import com.thoughtworks.xstream.io.HierarchicalStreamReader;\n import com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n import com.thoughtworks.xstream.mapper.Mapper;\n@@ -96,7 +97,10 @@ protected void populateCollection(HierarchicalStreamReader reader, Unmarshalling\n     protected void addCurrentElementToCollection(HierarchicalStreamReader reader, UnmarshallingContext context,\n         Collection collection, Collection target) {\n         final Object item = readItem(reader, context, collection); // call readBareItem when deprecated method is removed\n+\n+        long now = System.currentTimeMillis();\n         target.add(item);\n+        SecurityUtils.checkForCollectionDoSAttack(context, now);\n     }\n \n     protected Object createCollection(Class type) {"
        },
        {
          "filename": "xstream/src/java/com/thoughtworks/xstream/converters/collections/MapConverter.java",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n /*\n  * Copyright (C) 2003, 2004, 2005 Joe Walnes.\n- * Copyright (C) 2006, 2007, 2008, 2010, 2011, 2012, 2013, 2018 XStream Committers.\n+ * Copyright (C) 2006, 2007, 2008, 2010, 2011, 2012, 2013, 2018, 2021 XStream Committers.\n  * All rights reserved.\n  *\n  * The software in this package is published under the terms of the BSD\n@@ -13,6 +13,7 @@\n \n import com.thoughtworks.xstream.converters.MarshallingContext;\n import com.thoughtworks.xstream.converters.UnmarshallingContext;\n+import com.thoughtworks.xstream.core.SecurityUtils;\n import com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper;\n import com.thoughtworks.xstream.io.HierarchicalStreamReader;\n import com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n@@ -104,7 +105,10 @@ protected void putCurrentEntryIntoMap(HierarchicalStreamReader reader, Unmarshal\n         Map map, Map target) {\n         final Object key = readCompleteItem(reader, context, map);\n         final Object value = readCompleteItem(reader, context, map);\n+\n+        long now = System.currentTimeMillis();\n         target.put(key, value);\n+        SecurityUtils.checkForCollectionDoSAttack(context, now);\n     }\n \n     protected Object createCollection(Class type) {"
        },
        {
          "filename": "xstream/src/java/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (C) 2013, 2016, 2018 XStream Committers.\n+ * Copyright (C) 2013, 2016, 2018, 2021 XStream Committers.\n  * All rights reserved.\n  *\n  * The software in this package is published under the terms of the BSD\n@@ -21,6 +21,7 @@\n import com.thoughtworks.xstream.converters.UnmarshallingContext;\n import com.thoughtworks.xstream.converters.collections.MapConverter;\n import com.thoughtworks.xstream.core.JVM;\n+import com.thoughtworks.xstream.core.SecurityUtils;\n import com.thoughtworks.xstream.core.util.HierarchicalStreams;\n import com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper;\n import com.thoughtworks.xstream.io.HierarchicalStreamReader;\n@@ -339,7 +340,9 @@ protected void populateMap(HierarchicalStreamReader reader, UnmarshallingContext\n                 value = valueConverter.fromString(reader.getValue());\n             }\n \n+            long now = System.currentTimeMillis();\n             target.put(key, value);\n+            SecurityUtils.checkForCollectionDoSAttack(context, now);\n \n             if (entryName != null) {\n                 reader.moveUp();"
        },
        {
          "filename": "xstream/src/java/com/thoughtworks/xstream/core/SecurityUtils.java",
          "status": "added",
          "additions": 56,
          "deletions": 0,
          "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (C) 2021 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ *\n+ * Created on 21. September 2021 by Joerg Schaible\n+ */\n+package com.thoughtworks.xstream.core;\n+\n+import com.thoughtworks.xstream.XStream;\n+import com.thoughtworks.xstream.converters.ConversionException;\n+import com.thoughtworks.xstream.converters.UnmarshallingContext;\n+import com.thoughtworks.xstream.security.InputManipulationException;\n+\n+\n+/**\n+ * Utility functions for security issues.\n+ *\n+ * @author J&ouml;rg Schaible\n+ * @since upcoming\n+ */\n+public class SecurityUtils {\n+\n+    /**\n+     * Check the consumed time adding elements to collections or maps.\n+     * \n+     * Every custom converter should call this method after an unmarshalled element has been added to a collection or\n+     * map. In case of an attack the operation will take too long, because the calculation of the hash code or the\n+     * comparison of the elements in the collection operate on recursive structures.  \n+     * \n+     * @param context the unmarshalling context\n+     * @param start the timestamp just before the element was added to the collection or map\n+     * @since upcoming\n+     */\n+    public static void checkForCollectionDoSAttack(final UnmarshallingContext context, final long start) {\n+        final int diff = (int)((System.currentTimeMillis() - start) / 1000);\n+        if (diff > 0) {\n+            final Integer secondsUsed = (Integer)context.get(XStream.COLLECTION_UPDATE_SECONDS);\n+            if (secondsUsed != null) {\n+                final Integer limit = (Integer)context.get(XStream.COLLECTION_UPDATE_LIMIT);\n+                if (limit == null) {\n+                    throw new ConversionException(\"Missing limit for updating collections.\");\n+                }\n+                final int seconds = secondsUsed.intValue() + diff;\n+                if (seconds > limit.intValue()) {\n+                    throw new InputManipulationException(\n+                        \"Denial of Service attack assumed. Adding elements to collections or maps exceeds \" + limit.intValue() + \" seconds.\");\n+                }\n+                context.put(XStream.COLLECTION_UPDATE_SECONDS, new Integer(seconds));\n+            }\n+        }\n+    }\n+}"
        },
        {
          "filename": "xstream/src/java/com/thoughtworks/xstream/core/TreeUnmarshaller.java",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -26,6 +26,7 @@\n import com.thoughtworks.xstream.core.util.PrioritizedList;\n import com.thoughtworks.xstream.io.HierarchicalStreamReader;\n import com.thoughtworks.xstream.mapper.Mapper;\n+import com.thoughtworks.xstream.security.AbstractSecurityException;\n \n \n public class TreeUnmarshaller implements UnmarshallingContext {\n@@ -74,6 +75,8 @@ protected Object convert(Object parent, Class type, Converter converter) {\n         } catch (final ConversionException conversionException) {\n             addInformationTo(conversionException, type, converter, parent);\n             throw conversionException;\n+        } catch (AbstractSecurityException e) {\n+            throw e;\n         } catch (RuntimeException e) {\n             ConversionException conversionException = new ConversionException(e);\n             addInformationTo(conversionException, type, converter, parent);"
        },
        {
          "filename": "xstream/src/java/com/thoughtworks/xstream/security/AbstractSecurityException.java",
          "status": "added",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright (C) 2021 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * Created on 21. September 2021 by Joerg Schaible\n+ */\n+package com.thoughtworks.xstream.security;\n+\n+import com.thoughtworks.xstream.XStreamException;\n+\n+\n+/**\n+ * General base class for a Security Exception in XStream.\n+ * \n+ * @author J&ouml;rg Schaible\n+ * @since upcoming\n+ */\n+public abstract class AbstractSecurityException extends XStreamException {\n+    private static final long serialVersionUID = 20210921L;\n+\n+    /**\n+     * Constructs a SecurityException.\n+     * @param message the exception message\n+     * @since upcoming\n+     */\n+    public AbstractSecurityException(final String message) {\n+        super(message);\n+    }\n+}"
        },
        {
          "filename": "xstream/src/java/com/thoughtworks/xstream/security/ForbiddenClassException.java",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -1,20 +1,18 @@\n /*\n- * Copyright (C) 2014 XStream Committers.\n+ * Copyright (C) 2014, 2021 XStream Committers.\n  * All rights reserved.\n  *\n  * Created on 08. January 2014 by Joerg Schaible\n  */\n package com.thoughtworks.xstream.security;\n \n-import com.thoughtworks.xstream.XStreamException;\n-\n /**\n  * Exception thrown for a forbidden class.\n  * \n  * @author J&ouml;rg Schaible\n  * @since 1.4.7\n  */\n-public class ForbiddenClassException extends XStreamException {\n+public class ForbiddenClassException extends AbstractSecurityException {\n \n     /**\n      * Construct a ForbiddenClassException."
        },
        {
          "filename": "xstream/src/java/com/thoughtworks/xstream/security/InputManipulationException.java",
          "status": "added",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright (C) 2021 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * Created on 21. September 2021 by Joerg Schaible\n+ */\n+package com.thoughtworks.xstream.security;\n+\n+\n+/**\n+ * Class for a Security Exception assuming input manipulation in XStream.\n+ * \n+ * @author J&ouml;rg Schaible\n+ * @since upcoming\n+ */\n+public class InputManipulationException extends AbstractSecurityException {\n+    private static final long serialVersionUID = 20210921L;\n+\n+    /**\n+     * Constructs a SecurityException.\n+     * @param message the exception message\n+     * @since upcoming\n+     */\n+    public InputManipulationException(final String message) {\n+        super(message);\n+    }\n+}"
        },
        {
          "filename": "xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java",
          "status": "modified",
          "additions": 149,
          "deletions": 6,
          "patch": "@@ -17,13 +17,20 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.Map;\n+import java.util.Set;\n \n-import com.thoughtworks.xstream.XStreamException;\n import com.thoughtworks.xstream.converters.ConversionException;\n import com.thoughtworks.xstream.core.JVM;\n import com.thoughtworks.xstream.security.AnyTypePermission;\n import com.thoughtworks.xstream.security.ForbiddenClassException;\n+import com.thoughtworks.xstream.security.InputManipulationException;\n import com.thoughtworks.xstream.security.ProxyTypePermission;\n \n \n@@ -56,9 +63,9 @@ public void testCannotInjectEventHandler() {\n \n         try {\n             xstream.fromXML(xml);\n-            fail(\"Thrown \" + XStreamException.class.getName() + \" expected\");\n-        } catch (final XStreamException e) {\n-            assertTrue(e.getMessage().indexOf(EventHandler.class.getName()) > 0);\n+            fail(\"Thrown \" + ForbiddenClassException.class.getName() + \" expected\");\n+        } catch (final ForbiddenClassException e) {\n+            // OK\n         }\n         assertEquals(0, BUFFER.length());\n     }\n@@ -126,7 +133,7 @@ public void exec() {\n     public void testInstanceOfVoid() {\n         try {\n             xstream.fromXML(\"<void/>\");\n-            fail(\"Thrown \" + ConversionException.class.getName() + \" expected\");\n+            fail(\"Thrown \" + ForbiddenClassException.class.getName() + \" expected\");\n         } catch (final ForbiddenClassException e) {\n             // OK\n         }\n@@ -163,7 +170,7 @@ public void testCannotUseJaxwsInputStreamToDeleteFile() {\n             xstream.aliasType(\"is\", InputStream.class);\n             try {\n                 xstream.fromXML(xml);\n-                fail(\"Thrown \" + ConversionException.class.getName() + \" expected\");\n+                fail(\"Thrown \" + ForbiddenClassException.class.getName() + \" expected\");\n             } catch (final ForbiddenClassException e) {\n                 // OK\n             }\n@@ -261,4 +268,140 @@ public void testExplicitlyUnmarshalEndlessByteArryInputStream() {\n             assertEquals(\"ArrayIndexOutOfBoundsException expected reading invalid stream\", 5, i);\n         }\n     }\n+\n+    public void testDoSAttackWithHashSet() {\n+        final Set set = new HashSet();\n+        Set s1 = set;\n+        Set s2 = new HashSet();\n+        for (int i = 0; i < 30; i++) {\n+            final Set t1 = new HashSet();\n+            final Set t2 = new HashSet();\n+            t1.add(\"a\");\n+            t2.add(\"b\");\n+            s1.add(t1);\n+            s1.add(t2);\n+            s2.add(t2);\n+            s2.add(t1);\n+            s1 = t1;\n+            s2 = t2;\n+        }\n+\n+        xstream.setCollectionUpdateLimit(5);\n+        final String xml = xstream.toXML(set);\n+        try {\n+            \n+            xstream.fromXML(xml);\n+            fail(\"Thrown \" + InputManipulationException.class.getName() + \" expected\");\n+        } catch (final InputManipulationException e) {\n+            assertTrue(\"Limit expected in message\", e.getMessage().contains(\"exceeds 5 seconds\"));\n+        }\n+    }\n+\n+    public void testDoSAttackWithLinkedHashSet() {\n+        final Set set = new LinkedHashSet();\n+        Set s1 = set;\n+        Set s2 = new LinkedHashSet();\n+        for (int i = 0; i < 30; i++) {\n+            final Set t1 = new LinkedHashSet();\n+            final Set t2 = new LinkedHashSet();\n+            t1.add(\"a\");\n+            t2.add(\"b\");\n+            s1.add(t1);\n+            s1.add(t2);\n+            s2.add(t2);\n+            s2.add(t1);\n+            s1 = t1;\n+            s2 = t2;\n+        }\n+\n+        xstream.setCollectionUpdateLimit(5);\n+        final String xml = xstream.toXML(set);\n+        try {\n+            xstream.fromXML(xml);\n+            fail(\"Thrown \" + InputManipulationException.class.getName() + \" expected\");\n+        } catch (final InputManipulationException e) {\n+            assertTrue(\"Limit expected in message\", e.getMessage().contains(\"exceeds 5 seconds\"));\n+        }\n+    }\n+\n+    public void testDoSAttackWithHashMap() {\n+        final Map map = new HashMap();\n+        Map m1 = map;\n+        Map m2 = new HashMap();\n+        for (int i = 0; i < 25; i++) {\n+            final Map t1 = new HashMap();\n+            final Map t2 = new HashMap();\n+            t1.put(\"a\", \"b\");\n+            t2.put(\"c\", \"d\");\n+            m1.put(t1, t2);\n+            m1.put(t2, t1);\n+            m2.put(t2, t1);\n+            m2.put(t1, t2);\n+            m1 = t1;\n+            m2 = t2;\n+        }\n+        xstream.setCollectionUpdateLimit(5);\n+\n+        final String xml = xstream.toXML(map);\n+        try {\n+            xstream.fromXML(xml);\n+            fail(\"Thrown \" + InputManipulationException.class.getName() + \" expected\");\n+        } catch (InputManipulationException e) {\n+            assertTrue(\"Limit expected in message\", e.getMessage().contains(\"exceeds 5 seconds\"));\n+        }\n+    }\n+\n+    public void testDoSAttackWithLinkedHashMap() {\n+        final Map map = new LinkedHashMap();\n+        Map m1 = map;\n+        Map m2 = new LinkedHashMap();\n+        for (int i = 0; i < 25; i++) {\n+            final Map t1 = new LinkedHashMap();\n+            final Map t2 = new LinkedHashMap();\n+            t1.put(\"a\", \"b\");\n+            t2.put(\"c\", \"d\");\n+            m1.put(t1, t2);\n+            m1.put(t2, t1);\n+            m2.put(t2, t1);\n+            m2.put(t1, t2);\n+            m1 = t1;\n+            m2 = t2;\n+        }\n+\n+        xstream.setCollectionUpdateLimit(5);\n+        final String xml = xstream.toXML(map);\n+        try {\n+            xstream.fromXML(xml);\n+            fail(\"Thrown \" + InputManipulationException.class.getName() + \" expected\");\n+        } catch (final InputManipulationException e) {\n+            assertTrue(\"Limit expected in message\", e.getMessage().contains(\"exceeds 5 seconds\"));\n+        }\n+    }\n+\n+    public void testDoSAttackWithHashtable() {\n+        final Map map = new Hashtable();\n+        Map m1 = map;\n+        Map m2 = new Hashtable();\n+        for (int i = 0; i < 100; i++) {\n+            final Map t1 = new Hashtable();\n+            final Map t2 = new Hashtable();\n+            t1.put(\"a\", \"b\");\n+            t2.put(\"c\", \"d\");\n+            m1.put(t1, t2);\n+            m1.put(t2, t1);\n+            m2.put(t2, t1);\n+            m2.put(t1, t2);\n+            m1 = t1;\n+            m2 = t2;\n+        }\n+\n+        xstream.setCollectionUpdateLimit(5);\n+        final String xml = xstream.toXML(map);\n+        try {\n+            xstream.fromXML(xml);\n+            fail(\"Thrown \" + InputManipulationException.class.getName() + \" expected\");\n+        } catch (final InputManipulationException e) {\n+            assertTrue(\"Limit expected in message\", e.getMessage().contains(\"exceeds 5 seconds\"));\n+        }\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 6,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 7,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "9cbe8891fe698e4aeec1aca4b13d8ec868ccdf0a",
            "date": "2024-12-27T22:39:35Z",
            "author_login": "joehni"
          },
          {
            "sha": "d987316a7b4d7c48cbf0dd1396dde3853488b80b",
            "date": "2023-05-02T23:25:06Z",
            "author_login": "basil"
          },
          {
            "sha": "ab4a1729543e47f66889d2331ea65cca30dc7138",
            "date": "2024-11-06T20:15:41Z",
            "author_login": "joehni"
          },
          {
            "sha": "43e7156241a8cd176390ae853b472393724b55ed",
            "date": "2024-10-18T09:33:48Z",
            "author_login": "joehni"
          },
          {
            "sha": "9eef78cd85c51d3c77d6ee1061ee6df91f1dd36b",
            "date": "2024-11-06T18:11:09Z",
            "author_login": "joehni"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "XStream is an open source java library to serialize objects to XML and back again. Versions prior to 1.4.19 may allow a remote attacker to allocate 100% CPU time on the target system depending on CPU type or parallel execution of such a payload resulting in a denial of service only by manipulating the processed input stream. XStream 1.4.19 monitors and accumulates the time it takes to add elements to collections and throws an exception if a set threshold is exceeded. Users are advised to upgrade as soon as possible. Users unable to upgrade may set the NO_REFERENCE mode to prevent recursion. See GHSA-rmr5-cpv2-vgjf for further details on a workaround if an upgrade is not possible.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-01T12:15:08.080",
    "last_modified": "2024-11-21T06:29:56.893",
    "fix_date": "2021-12-27T00:24:08Z"
  },
  "references": [
    {
      "url": "http://www.openwall.com/lists/oss-security/2022/02/09/1",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/x-stream/xstream/commit/e8e88621ba1c85ac3b8620337dd672e0c0c3a846",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/x-stream/xstream/security/advisories/GHSA-rmr5-cpv2-vgjf",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/02/msg00018.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/VACQYG356OHUTD5WQGAQ4L2TTFTAV3SJ/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/XODFRE2ZL64FICBJDOPWOLPTSSAI4U7X/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2022.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://x-stream.github.io/CVE-2021-43859.html",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    },
    {
      "url": "http://www.openwall.com/lists/oss-security/2022/02/09/1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/x-stream/xstream/commit/e8e88621ba1c85ac3b8620337dd672e0c0c3a846",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/x-stream/xstream/security/advisories/GHSA-rmr5-cpv2-vgjf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/02/msg00018.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/VACQYG356OHUTD5WQGAQ4L2TTFTAV3SJ/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/XODFRE2ZL64FICBJDOPWOLPTSSAI4U7X/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpuapr2022.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.oracle.com/security-alerts/cpujul2022.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://x-stream.github.io/CVE-2021-43859.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.099546",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "xstream",
    "owner": "x-stream",
    "created_at": "2015-03-14T15:57:12Z",
    "updated_at": "2024-12-27T22:39:45Z",
    "pushed_at": "2024-12-27T22:39:39Z",
    "size": 21741,
    "stars": 749,
    "forks": 228,
    "open_issues": 37,
    "watchers": 749,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 2852082,
      "HTML": 711607,
      "CSS": 7028,
      "Batchfile": 2073,
      "Shell": 1714,
      "XSLT": 1128
    },
    "commit_activity": {
      "total_commits_last_year": 20,
      "avg_commits_per_week": 0.38461538461538464,
      "days_active_last_year": 12
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:03:10.131861"
  }
}