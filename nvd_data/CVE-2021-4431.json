{
  "cve_id": "CVE-2021-4431",
  "github_data": {
    "repository": "msyk/FMDataAPI",
    "fix_commit": "3bd1709a8f7b1720529bf5dfc9855ad609f436cf",
    "related_commits": [
      "3bd1709a8f7b1720529bf5dfc9855ad609f436cf",
      "3bd1709a8f7b1720529bf5dfc9855ad609f436cf"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "3bd1709a8f7b1720529bf5dfc9855ad609f436cf",
      "commit_date": "2021-08-27T14:21:27Z",
      "author": {
        "login": "matsuo",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix XSS in FMDataAPI_Sample.php",
        "length": 31,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 106,
        "additions": 53,
        "deletions": 53
      },
      "files": [
        {
          "filename": "samples/FMDataAPI_Sample.php",
          "status": "modified",
          "additions": 53,
          "deletions": 53,
          "patch": "@@ -42,76 +42,76 @@\n \n     // Metadata API is the new feature of FMS18.\n     $pInfo = var_export($fmdb->getProductInfo(), true);\n-    echo \"Product Info: {$pInfo}<hr>\";\n+    echo htmlspecialchars(\"Product Info: {$pInfo}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n     $pInfo = var_export($fmdb->getDatabaseNames(), true);\n-    echo \"Database Names: {$pInfo}<hr>\";\n+    echo htmlspecialchars(\"Database Names: {$pInfo}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n     $pInfo = var_export($fmdb->getLayoutNames(), true);\n-    echo \"Layout Names: {$pInfo}<hr>\";\n+    echo htmlspecialchars(\"Layout Names: {$pInfo}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n     $pInfo = var_export($fmdb->getScriptNames(), true);\n-    echo \"Script Names: {$pInfo}<hr>\";\n+    echo htmlspecialchars(\"Script Names: {$pInfo}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n     $result = $fmdb->person_layout->getMetadata();\n     $pInfo = var_export($result, true);\n-    echo \"Layout Metadata: {$pInfo}<hr>\";\n+    echo htmlspecialchars(\"Layout Metadata: {$pInfo}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n     $result = $fmdb->person_layout->getMetadataOld();\n     $pInfo = var_export($result, true);\n-    echo \"Layout Metadata (Old): {$pInfo}<hr>\";\n+    echo htmlspecialchars(\"Layout Metadata (Old): {$pInfo}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n \n     // The FMDataAPI has the property as the same name of layout. This sample database has the 'person_layout' layout,\n     // so '$fmdb->person_layout' refers FMLayout object fo the proxy of the layout. FMLayout class has the 'query' method\n     // and returns FileMakerRelation class's object. The condition spefied in parameter is same as FileMaker's Find Record API.\n     $result = $fmdb->person_layout->query(/*array(array(\"id\" => \">1\"))*/);\n \n     // The 'httpStatus()' method returns the HTTP status code in the latest response.\n-    echo \"HTTP Status: {$fmdb->httpStatus()}<hr>\";\n+    echo htmlspecialchars(\"HTTP Status: {$fmdb->httpStatus()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n \n     // The following two methods return the error code and message of the latest API call which is submitted in query() method.\n     // You can check API calling succeed or fail if error code is or isn't 0 every after API calling methods.\n-    echo \"Error Code: {$fmdb->errorCode()}<hr>\";\n-    echo \"Error Message: {$fmdb->errorMessage()}<hr>\";\n+    echo htmlspecialchars(\"Error Code: {$fmdb->errorCode()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+    echo htmlspecialchars(\"Error Message: {$fmdb->errorMessage()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n \n     // If the query is succeed, the following information can be detected.\n-    echo \"Target Table: {$fmdb->getTargetTable()}<hr>\";\n-    echo \"Total Count: {$fmdb->getTotalCount()}<hr>\";\n-    echo \"Found Count: {$fmdb->getFoundCount()}<hr>\";\n-    echo \"Returned Count: {$fmdb->getReturnedCount()}<hr>\";\n+    echo htmlspecialchars(\"Target Table: {$fmdb->getTargetTable()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+    echo htmlspecialchars(\"Total Count: {$fmdb->getTotalCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+    echo htmlspecialchars(\"Found Count: {$fmdb->getFoundCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+    echo htmlspecialchars(\"Returned Count: {$fmdb->getReturnedCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n \n     // The FileMakerRelation class implements the Iterator interface and it can repeat with 'foreach.'\n     // The $record also refers a FileMakerRelation object but it is for single record.\n     // This layout has fields as like 'id', 'name', 'mail' and so on, and the field name can be handle\n     // as a property name of the the record referring with $record.\n     if (!is_null($result)) {\n         // If the query is succeed, the following information can be detected.\n-        echo \"Target Table: {$result->getTargetTable()}<hr>\";\n-        echo \"Total Count: {$result->getTotalCount()}<hr>\";\n-        echo \"Found Count: {$result->getFoundCount()}<hr>\";\n-        echo \"Returned Count: {$result->getReturnedCount()}<hr>\";\n+        echo htmlspecialchars(\"Target Table: {$result->getTargetTable()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+        echo htmlspecialchars(\"Total Count: {$result->getTotalCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+        echo htmlspecialchars(\"Found Count: {$result->getFoundCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+        echo htmlspecialchars(\"Returned Count: {$result->getReturnedCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n         foreach ($result as $record) {\n-            echo \"id: {$record->id},\";\n-            echo \"name: {$record->name},\";\n-            echo \"mail: {$record->mail}<hr>\";\n+            echo htmlspecialchars(\"id: {$record->id},\", ENT_QUOTES, \"UTF-8\");\n+            echo htmlspecialchars(\"name: {$record->name},\", ENT_QUOTES, \"UTF-8\");\n+            echo htmlspecialchars(\"mail: {$record->mail}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n             // If you named field name as not variable friendly, you can use field('field_name') method or\n             // set the name to any variable such as $fname = 'field_name'; echo $record->$fname;.\n \n             // In case of a related field but outside of portal, the field method is available as below:\n             // echo $record->field(\"summary\", \"contact_to\");\n \n             // A portal name property returns records of portal as FileMakerRelation object.\n-            $contacts = $record->contact_to;\n+            $contacts = $record->Contact;\n \n             // If the query is succeed, the following information can be detected.\n-            echo \"Target Table: {$contacts->getTargetTable()}<hr>\";\n-            echo \"Total Count: {$contacts->getTotalCount()}<hr>\";\n-            echo \"Found Count: {$contacts->getFoundCount()}<hr>\";\n-            echo \"Returned Count: {$contacts->getReturnedCount()}<hr>\";\n+            echo htmlspecialchars(\"Target Table: {$contacts->getTargetTable()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+            echo htmlspecialchars(\"Total Count: {$contacts->getTotalCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+            echo htmlspecialchars(\"Found Count: {$contacts->getFoundCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+            echo htmlspecialchars(\"Returned Count: {$contacts->getReturnedCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n \n             // You can repeat with foreach for the portal records.\n             foreach ($contacts as $item) {\n                 // Technically portal field has to be refered as \"contact_to::id\" but it can be an indentifier in PHP.\n                 // In this case you can call field method as like 'field(\"summary\", \"contact_to\").'\n                 // If the field belongs to the table occurrence for the portal, you can refer the field as like '$item->id.'\n                 // If the field belongs to another table occurrence, you have to call the 'field()' method.\n-                echo \"[PORTAL(contact_to)] id: {$item->field(\"id\", \"contact_to\")},\";\n-                echo \"summary: {$item->field(\"summary\", \"contact_to\")}<hr>\";\n+                echo htmlspecialchars(\"[PORTAL(contact_to)] id: {$item->field(\"id\", \"contact_to\")},\", ENT_QUOTES, \"UTF-8\");\n+                echo htmlspecialchars(\"summary: {$item->field(\"summary\", \"contact_to\")}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n                 // If the object name of the portal is blank, it can be referred as the table occurrence name.\n                 // If the object name is specified, you have to access with the object name and it means you have to\n                 // call 'field()' method to get the value.\n@@ -127,14 +127,14 @@\n         // record and you can get the field value with the propaty having the same field name.\n         // The portal can be done with same way. The 'next()' method steps forward the pointer of current record.\n         for ($i = 0; $i < $result->count(); $i++) {\n-            echo \"id: {$result->id},\";\n-            echo \"name: {$result->name},\";\n-            echo \"mail: {$result->mail}<hr>\";\n-            $contacts = $result->contact_to;\n+            echo htmlspecialchars(\"id: {$result->id},\", ENT_QUOTES, \"UTF-8\");\n+            echo htmlspecialchars(\"name: {$result->name},\", ENT_QUOTES, \"UTF-8\");\n+            echo htmlspecialchars(\"mail: {$result->mail}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+            $contacts = $result->Contact;\n \n             for ($j = 0; $j < $contacts->count(); $j++) {\n-                echo \"[PORTAL(contact_to)] id: {$contacts->field(\"id\", \"contact_to\")},\";\n-                echo \"summary: {$contacts->field(\"summary\", \"contact_to\")}<hr>\";\n+                echo htmlspecialchars(\"[PORTAL(contact_to)] id: {$contacts->field(\"id\", \"contact_to\")},\", ENT_QUOTES, \"UTF-8\");\n+                echo htmlspecialchars(\"summary: {$contacts->field(\"summary\", \"contact_to\")}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n                 $contacts->next();\n             }\n             $result->next();\n@@ -149,9 +149,9 @@\n     $result = $fmdb->postalcode->getRecord($recId);\n     if (!is_null($result)) {\n         foreach ($result as $record) {\n-            echo \"f3: {$record->f3},\";\n-            echo \"f7: {$record->f7},\";\n-            echo \"f8: {$record->f8}<hr>\";\n+            echo htmlspecialchars(\"f3: {$record->f3},\", ENT_QUOTES, \"UTF-8\");\n+            echo htmlspecialchars(\"f7: {$record->f7},\", ENT_QUOTES, \"UTF-8\");\n+            echo htmlspecialchars(\"f8: {$record->f8}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n             echo \"<hr>\";\n         }\n     }\n@@ -162,9 +162,9 @@\n     $result = $fmdb->postalcode->getRecord($recId);\n     if (!is_null($result)) {\n         foreach ($result as $record) {\n-            echo \"f3: {$record->f3},\";\n-            echo \"f7: {$record->f7},\";\n-            echo \"f8: {$record->f8}<hr>\";\n+            echo htmlspecialchars(\"f3: {$record->f3},\", ENT_QUOTES, \"UTF-8\");\n+            echo htmlspecialchars(\"f7: {$record->f7},\", ENT_QUOTES, \"UTF-8\");\n+            echo htmlspecialchars(\"f8: {$record->f8}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n             echo \"<hr>\";\n         }\n     }\n@@ -174,23 +174,23 @@\n     // Call script\n     $result = $fmdb->person_layout->query(null, null, -1, 1, null, [\"script\" => \"TestScript\", \"script.param\" => \"ok\"]);\n     if (!is_null($result)) {\n-        echo \"Script Error: {$fmdb->person_layout->getScriptError()}<hr>\";\n-        echo \"Script Result: {$fmdb->person_layout->getScriptResult()}<hr>\";\n+        echo htmlspecialchars(\"Script Error: {$fmdb->person_layout->getScriptError()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+        echo htmlspecialchars(\"Script Result: {$fmdb->person_layout->getScriptResult()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n     }\n     $result = $fmdb->person_layout->query(null, null, -1, 1, null, [\"script.prerequest\" => \"TestScript\", \"script.prerequest.param\" => \"ok\"]);\n     if (!is_null($result)) {\n-        echo \"Script Error: {$fmdb->person_layout->getScriptErrorPrerequest()}<hr>\";\n-        echo \"Script Result: {$fmdb->person_layout->getScriptResultPrerequest()}<hr>\";\n+        echo htmlspecialchars(\"Script Error: {$fmdb->person_layout->getScriptErrorPrerequest()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+        echo htmlspecialchars(\"Script Result: {$fmdb->person_layout->getScriptResultPrerequest()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n     }\n     $result = $fmdb->person_layout->query(null, null, -1, 1, null, [\"script\" => \"TestScript\", \"script.param\" => \"not\"]);\n     if (!is_null($result)) {\n-        echo \"Script Error: {$fmdb->person_layout->getScriptError()}<hr>\";\n-        echo \"Script Result: {$fmdb->person_layout->getScriptResult()}<hr>\";\n+        echo htmlspecialchars(\"Script Error: {$fmdb->person_layout->getScriptError()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+        echo htmlspecialchars(\"Script Result: {$fmdb->person_layout->getScriptResult()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n     }\n     $result = $fmdb->person_layout->query(null, null, -1, 1);\n     if (!is_null($result)) {\n-        echo \"Script Error: {$fmdb->person_layout->getScriptError()}<hr>\";\n-        echo \"Script Result: {$fmdb->person_layout->getScriptResult()}<hr>\";\n+        echo htmlspecialchars(\"Script Error: {$fmdb->person_layout->getScriptError()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+        echo htmlspecialchars(\"Script Result: {$fmdb->person_layout->getScriptResult()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n     }\n \n     // A new record is created in \"testtable\" table.\n@@ -203,14 +203,14 @@\n     // https://localhost/Streaming_SSL/MainDB/6A4A253F7CE33465DCDFBFF0704B34C0993D54AD85702396920E85249BD0271A.jpg?RCType=EmbeddedRCFileProcessor\n     // This url can get the content of the container field, and it means you can download with file_put_content() function and so on.\n     $result = $fmdb->testtable->getRecord($recId);\n-    echo \"Target Table(getRecord): {$result->getTargetTable()}<hr>\";\n-    echo \"Total Count(getRecord): {$result->getTotalCount()}<hr>\";\n-    echo \"Found Count(getRecord): {$result->getFoundCount()}<hr>\";\n-    echo \"Returned Count(getRecord): {$result->getReturnedCount()}<hr>\";\n+    echo htmlspecialchars(\"Target Table(getRecord): {$result->getTargetTable()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+    echo htmlspecialchars(\"Total Count(getRecord): {$result->getTotalCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+    echo htmlspecialchars(\"Found Count(getRecord): {$result->getFoundCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n+    echo htmlspecialchars(\"Returned Count(getRecord): {$result->getReturnedCount()}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n \n     if (!is_null($result)) {\n         foreach ($result as $record) {\n-            echo \"vc1: {$record->vc1}<hr>\";\n+            echo htmlspecialchars(\"vc1: {$record->vc1}\", ENT_QUOTES, \"UTF-8\") . \"<hr>\";\n             echo \"<p><img src='data:image/jpeg;base64,\" . $record->getContainerData('vc1') . \"'></p>\";\n         }\n     }\n@@ -266,5 +266,5 @@\n         }\n     }\n } catch (Exception $e) {\n-    echo '<div><h3>\u4f8b\u5916\u767a\u751f</h3>', $e->getMessage(), \"<div>\";\n+    echo '<div><h3>\u4f8b\u5916\u767a\u751f</h3>', htmlspecialchars($e->getMessage(), ENT_QUOTES, \"UTF-8\"), \"<div>\";\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "2de610cc1b09e5c5d08d8027e28a777912226a04",
            "date": "2024-11-24T03:52:13Z",
            "author_login": "msyk"
          },
          {
            "sha": "3f6cf32567081f09e480d1de491691178e28b808",
            "date": "2024-11-24T00:29:47Z",
            "author_login": "matsuo"
          },
          {
            "sha": "b289a904e36bffc4d887c5fec05572371caf14d6",
            "date": "2024-11-15T23:51:49Z",
            "author_login": "msyk"
          },
          {
            "sha": "d8c035c6f0be88ffac76dd724bd5ae3cc4f58478",
            "date": "2024-11-15T21:00:35Z",
            "author_login": "matsuo"
          },
          {
            "sha": "f231da262eaa449703627595b929629974f2e6e2",
            "date": "2024-11-14T23:37:26Z",
            "author_login": "msyk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "A vulnerability classified as problematic has been found in msyk FMDataAPI up to 22. Affected is an unknown function of the file FMDataAPI_Sample.php. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 23 is able to address this issue. The patch is identified as 3bd1709a8f7b1720529bf5dfc9855ad609f436cf. It is recommended to upgrade the affected component. VDB-244494 is the identifier assigned to this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2023-11-07T11:15:10.070",
    "last_modified": "2024-11-21T06:37:42.740",
    "fix_date": "2021-08-27T14:21:27Z"
  },
  "references": [
    {
      "url": "https://github.com/msyk/FMDataAPI/commit/3bd1709a8f7b1720529bf5dfc9855ad609f436cf",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/msyk/FMDataAPI/pull/54",
      "source": "cna@vuldb.com",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/msyk/FMDataAPI/releases/tag/23",
      "source": "cna@vuldb.com",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.244494",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://vuldb.com/?id.244494",
      "source": "cna@vuldb.com",
      "tags": [
        "Permissions Required",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://github.com/msyk/FMDataAPI/commit/3bd1709a8f7b1720529bf5dfc9855ad609f436cf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch"
      ]
    },
    {
      "url": "https://github.com/msyk/FMDataAPI/pull/54",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/msyk/FMDataAPI/releases/tag/23",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes"
      ]
    },
    {
      "url": "https://vuldb.com/?ctiid.244494",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory",
        "VDB Entry"
      ]
    },
    {
      "url": "https://vuldb.com/?id.244494",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Permissions Required",
        "Third Party Advisory",
        "VDB Entry"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:06:36.994332",
    "processing_status": "enhanced"
  }
}