{
  "cve_id": "CVE-2021-44878",
  "github_data": {
    "repository": "pac4j/pac4j",
    "fix_commit": "22b82ffd702a132d9f09da60362fc6264fc281ae",
    "related_commits": [
      "22b82ffd702a132d9f09da60362fc6264fc281ae",
      "22b82ffd702a132d9f09da60362fc6264fc281ae"
    ],
    "patch_url": "https://github.com/pac4j/pac4j/commit/22b82ffd702a132d9f09da60362fc6264fc281ae.patch",
    "fix_commit_details": {
      "sha": "22b82ffd702a132d9f09da60362fc6264fc281ae",
      "commit_date": "2021-12-06T08:09:36Z",
      "author": {
        "login": "leleuj",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "reinforce security on OIDC",
        "length": 26,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 131,
        "additions": 119,
        "deletions": 12
      },
      "files": [
        {
          "filename": "documentation/docs/clients/openid-connect.md",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -145,3 +145,9 @@ The additional param `TokenExpirationAdvance` allows to set the time in seconds,\n ```java\n config.setTokenExpirationAdvance(10);\n ```\n+\n+Since version 5.2 and to reinforce security, the `none` alogithm for ID tokens (meaning no signature validation) must be explictly accepted by using:\n+\n+```java\n+config.setAllowUnsignedIdTokens(true);\n+```"
        },
        {
          "filename": "documentation/docs/release-notes.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -6,6 +6,7 @@ title: Release notes&#58;\n **v5.2**:\n \n - The JEE core components are now in the `pac4j-jee` dependency (and no longer in the `pac4j-core` dependency)\n+- Reinforce security on the OIDC protocol support: the `none` algorithm must be explicitly accepted on client side (`allowUnsignedIdTokens`)\n \n **v5.1.5**:\n "
        },
        {
          "filename": "pac4j-oidc/src/main/java/org/pac4j/oidc/config/OidcConfiguration.java",
          "status": "modified",
          "additions": 11,
          "deletions": 1,
          "patch": "@@ -140,6 +140,8 @@ public class OidcConfiguration extends BaseClientConfiguration {\n \n     private TokenValidator tokenValidator;\n \n+    private boolean allowUnsignedIdTokens;\n+\n     @Override\n     protected void internalInit() {\n         // checks\n@@ -486,6 +488,14 @@ public void setMappedClaims(Map<String, String> mappedClaims) {\n         this.mappedClaims = mappedClaims;\n     }\n \n+    public boolean isAllowUnsignedIdTokens() {\n+        return allowUnsignedIdTokens;\n+    }\n+\n+    public void setAllowUnsignedIdTokens(final boolean allowUnsignedIdTokens) {\n+        this.allowUnsignedIdTokens = allowUnsignedIdTokens;\n+    }\n+\n     @Override\n     public String toString() {\n         return toNiceString(this.getClass(), \"clientId\", clientId, \"secret\", \"[protected]\",\n@@ -495,6 +505,6 @@ public String toString() {\n             \"connectTimeout\", connectTimeout, \"readTimeout\", readTimeout, \"resourceRetriever\", resourceRetriever,\n             \"responseType\", responseType, \"responseMode\", responseMode, \"logoutUrl\", logoutUrl,\n             \"withState\", withState, \"stateGenerator\", stateGenerator, \"logoutHandler\", logoutHandler,\n-            \"tokenValidator\", tokenValidator, \"mappedClaims\", mappedClaims);\n+            \"tokenValidator\", tokenValidator, \"mappedClaims\", mappedClaims, \"allowUnsignedIdTokens\", allowUnsignedIdTokens);\n     }\n }"
        },
        {
          "filename": "pac4j-oidc/src/main/java/org/pac4j/oidc/credentials/authenticator/UserInfoOidcAuthenticator.java",
          "status": "modified",
          "additions": 3,
          "deletions": 6,
          "patch": "@@ -6,8 +6,6 @@\n import java.io.IOException;\n import java.util.Map;\n \n-import javax.naming.AuthenticationException;\n-\n import org.pac4j.core.context.WebContext;\n import org.pac4j.core.context.session.SessionStore;\n import org.pac4j.core.credentials.Credentials;\n@@ -99,9 +97,8 @@ private JWTClaimsSet fetchOidcProfile(BearerAccessToken accessToken) {\n                 httpResponse.getContent());\n             final var userInfoResponse = UserInfoResponse.parse(httpResponse);\n             if (userInfoResponse instanceof UserInfoErrorResponse) {\n-                logger.error(\"Bad User Info response, error={}\",\n-                    ((UserInfoErrorResponse) userInfoResponse).getErrorObject().toJSONObject());\n-                throw new AuthenticationException();\n+                throw new TechnicalException(\"Bad User Info response, error=\"\n+                    + ((UserInfoErrorResponse) userInfoResponse).getErrorObject().toJSONObject());\n             } else {\n                 final var userInfoSuccessResponse = (UserInfoSuccessResponse) userInfoResponse;\n                 final JWTClaimsSet userInfoClaimsSet;\n@@ -112,7 +109,7 @@ private JWTClaimsSet fetchOidcProfile(BearerAccessToken accessToken) {\n                 }\n                 return userInfoClaimsSet;\n             }\n-        } catch (IOException | ParseException | java.text.ParseException | AuthenticationException e) {\n+        } catch (IOException | ParseException | java.text.ParseException e) {\n             throw new TechnicalException(e);\n         }\n     }"
        },
        {
          "filename": "pac4j-oidc/src/main/java/org/pac4j/oidc/profile/creator/TokenValidator.java",
          "status": "modified",
          "additions": 10,
          "deletions": 5,
          "patch": "@@ -51,13 +51,13 @@ public TokenValidator(final OidcConfiguration configuration) {\n         final var _clientID = new ClientID(configuration.getClientId());\n \n         for (var jwsAlgorithm : jwsAlgorithms) {\n-            if (\"none\".equals(jwsAlgorithm.getName())) {\n-                jwsAlgorithm = null;\n-            }\n-\n             // build validator\n             final IDTokenValidator idTokenValidator;\n-            if (jwsAlgorithm == null) {\n+            if (\"none\".equals(jwsAlgorithm.getName())) {\n+                if (!configuration.isAllowUnsignedIdTokens()) {\n+                    throw new TechnicalException(\"Unsigned ID tokens are not allowed\");\n+                }\n+                logger.warn(\"Allowing unsigned ID tokens\");\n                 idTokenValidator = new IDTokenValidator(configuration.findProviderMetadata().getIssuer(), _clientID);\n             } else if (CommonHelper.isNotBlank(configuration.getSecret()) && (JWSAlgorithm.HS256.equals(jwsAlgorithm) ||\n                 JWSAlgorithm.HS384.equals(jwsAlgorithm) || JWSAlgorithm.HS512.equals(jwsAlgorithm))) {\n@@ -112,4 +112,9 @@ public IDTokenClaimsSet validate(final JWT idToken, final Nonce expectedNonce)\n             throw new TechnicalException(\"Unable to validate the ID token\");\n         }\n     }\n+\n+    // for tests\n+    List<IDTokenValidator> getIdTokenValidators() {\n+        return idTokenValidators;\n+    }\n }"
        },
        {
          "filename": "pac4j-oidc/src/test/java/org/pac4j/oidc/profile/creator/TokenValidatorTests.java",
          "status": "added",
          "additions": 88,
          "deletions": 0,
          "patch": "@@ -0,0 +1,88 @@\n+package org.pac4j.oidc.profile.creator;\n+\n+import com.nimbusds.jose.JWSAlgorithm;\n+import com.nimbusds.oauth2.sdk.id.Issuer;\n+import com.nimbusds.openid.connect.sdk.op.OIDCProviderMetadata;\n+import com.nimbusds.openid.connect.sdk.validators.IDTokenValidator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.pac4j.core.exception.TechnicalException;\n+import org.pac4j.core.util.TestsConstants;\n+import org.pac4j.core.util.TestsHelper;\n+import org.pac4j.oidc.config.OidcConfiguration;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.mockito.Mockito.*;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Tests {@link TokenValidator}.\n+ *\n+ * @author Jerome LELEU\n+ * @since 5.2.0\n+ */\n+public final class TokenValidatorTests implements TestsConstants {\n+\n+    private OidcConfiguration configuration;\n+\n+    private List<JWSAlgorithm> algorithms;\n+\n+    @Before\n+    public void setUp() throws URISyntaxException {\n+        configuration = mock(OidcConfiguration.class);\n+        final OIDCProviderMetadata metadata = mock(OIDCProviderMetadata.class);\n+        when(metadata.getIssuer()).thenReturn(new Issuer(PAC4J_URL));\n+        when(metadata.getJWKSetURI()).thenReturn(new URI(PAC4J_BASE_URL));\n+        when(configuration.findProviderMetadata()).thenReturn(metadata);\n+        when(configuration.getClientId()).thenReturn(ID);\n+        when(configuration.getSecret()).thenReturn(SECRET);\n+        algorithms = new ArrayList<>();\n+        when(metadata.getIDTokenJWSAlgs()).thenReturn(algorithms);\n+    }\n+\n+    @Test\n+    public void testNoAlgoDefinedAtProvider() {\n+        TestsHelper.expectException(() -> new TokenValidator(configuration), TechnicalException.class,\n+            \"There must at least one JWS algorithm supported on the OpenID Connect provider side\");\n+    }\n+\n+    @Test\n+    public void testNoneAlgoNotAllowed() {\n+        algorithms.add(JWSAlgorithm.parse(\"none\"));\n+        TestsHelper.expectException(() -> new TokenValidator(configuration), TechnicalException.class,\n+            \"Unsigned ID tokens are not allowed\");\n+    }\n+\n+    @Test\n+    public void testNoneAlgoAllowed() {\n+        algorithms.add(JWSAlgorithm.parse(\"none\"));\n+        when(configuration.isAllowUnsignedIdTokens()).thenReturn(true);\n+        final TokenValidator validator = new TokenValidator(configuration);\n+        final List<IDTokenValidator> validators = validator.getIdTokenValidators();\n+        assertEquals(1, validators.size());\n+        assertTrue(validators.get(0) instanceof IDTokenValidator);\n+    }\n+\n+    @Test\n+    public void testTwoAlgorithms() {\n+        algorithms.add(JWSAlgorithm.HS256);\n+        algorithms.add(JWSAlgorithm.RS256);\n+        final TokenValidator validator = new TokenValidator(configuration);\n+        final List<IDTokenValidator> validators = validator.getIdTokenValidators();\n+        assertEquals(2, validators.size());\n+    }\n+\n+    @Test\n+    public void testTwoAlgorithmsOnePreferred() {\n+        algorithms.add(JWSAlgorithm.HS256);\n+        algorithms.add(JWSAlgorithm.RS256);\n+        when(configuration.getPreferredJwsAlgorithm()).thenReturn(JWSAlgorithm.HS256);\n+        final TokenValidator validator = new TokenValidator(configuration);\n+        final List<IDTokenValidator> validators = validator.getIdTokenValidators();\n+        assertEquals(1, validators.size());\n+    }\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 6,
        "max_directory_depth": 9
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "6aa1a60f645846664d7faab94d8b8466800d84a1",
            "date": "2025-01-14T01:08:39Z",
            "author_login": "mergify[bot]"
          },
          {
            "sha": "c8f499d6aedca78d4dba102ae8a76a7081fc73c2",
            "date": "2025-01-14T01:02:31Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "2f9397fb38343d87328db85486ea9b03832a98f4",
            "date": "2025-01-10T22:13:26Z",
            "author_login": "mergify[bot]"
          },
          {
            "sha": "f472db245a9150a56fc737c2d6efc3233bf038ef",
            "date": "2025-01-10T22:07:43Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "3985d77aaff5a04cdb414c9835c6109ab5a811d8",
            "date": "2025-01-10T22:06:59Z",
            "author_login": "mergify[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-347",
    "description": "If an OpenID Connect provider supports the \"none\" algorithm (i.e., tokens with no signature), pac4j v5.3.0 (and prior) does not refuse it without an explicit configuration on its side or for the \"idtoken\" response type which is not secure and violates the OpenID Core Specification. The \"none\" algorithm does not require any signature verification when validating the ID tokens, which allows the attacker to bypass the token validation by injecting a malformed ID token using \"none\" as the value of \"alg\" key in the header with an empty signature value.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-06T13:15:08.180",
    "last_modified": "2024-11-21T06:31:38.873",
    "fix_date": "2021-12-06T08:09:36Z"
  },
  "references": [
    {
      "url": "https://github.com/pac4j/pac4j/commit/22b82ffd702a132d9f09da60362fc6264fc281ae",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://openid.net/specs/openid-connect-core-1_0.html#IDToken",
      "source": "cve@mitre.org",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.pac4j.org/blog/cve_2021_44878_is_this_serious.html",
      "source": "cve@mitre.org",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/pac4j/pac4j/commit/22b82ffd702a132d9f09da60362fc6264fc281ae",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://openid.net/specs/openid-connect-core-1_0.html#IDToken",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Product",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.pac4j.org/blog/cve_2021_44878_is_this_serious.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.051834",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "pac4j",
    "owner": "pac4j",
    "created_at": "2012-01-28T17:04:12Z",
    "updated_at": "2025-01-14T01:08:44Z",
    "pushed_at": "2025-01-14T01:09:11Z",
    "size": 68323,
    "stars": 2447,
    "forks": 692,
    "open_issues": 0,
    "watchers": 2447,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Java": 2672756,
      "Shell": 1609
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T15:50:35.329262"
  }
}