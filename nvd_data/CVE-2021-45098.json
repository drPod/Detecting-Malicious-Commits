{
  "cve_id": "CVE-2021-45098",
  "github_data": {
    "repository": "OISF/suricata",
    "fix_commit": "50e2b973eeec7172991bf8f544ab06fb782b97df",
    "related_commits": [
      "50e2b973eeec7172991bf8f544ab06fb782b97df",
      "50e2b973eeec7172991bf8f544ab06fb782b97df"
    ],
    "patch_url": "https://github.com/OISF/suricata/commit/50e2b973eeec7172991bf8f544ab06fb782b97df.patch",
    "fix_commit_details": {
      "sha": "50e2b973eeec7172991bf8f544ab06fb782b97df",
      "commit_date": "2021-10-05T12:48:27Z",
      "author": {
        "login": "victorjulien",
        "type": "User",
        "stats": {
          "total_commits": 7714,
          "average_weekly_commits": 8.969767441860466,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 725
        }
      },
      "commit_message": {
        "title": "stream/tcp: handle RST with MD5 or AO header",
        "length": 710,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 43,
        "additions": 42,
        "deletions": 1
      },
      "files": [
        {
          "filename": "src/decode-tcp.c",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -183,6 +183,26 @@ static void DecodeTCPOptions(Packet *p, const uint8_t *pkt, uint16_t pktlen)\n                         ENGINE_SET_EVENT(p,TCP_OPT_INVALID_LEN);\n                     }\n                     break;\n+                /* RFC 2385 MD5 option */\n+                case TCP_OPT_MD5:\n+                    SCLogDebug(\"MD5 option, len %u\", olen);\n+                    if (olen != 18) {\n+                        ENGINE_SET_INVALID_EVENT(p,TCP_OPT_INVALID_LEN);\n+                    } else {\n+                        /* we can't validate the option as the key is out of band */\n+                        p->tcpvars.md5_option_present = true;\n+                    }\n+                    break;\n+                /* RFC 5925 AO option */\n+                case TCP_OPT_AO:\n+                    SCLogDebug(\"AU option, len %u\", olen);\n+                    if (olen < 4) {\n+                        ENGINE_SET_INVALID_EVENT(p,TCP_OPT_INVALID_LEN);\n+                    } else {\n+                        /* we can't validate the option as the key is out of band */\n+                        p->tcpvars.ao_option_present = true;\n+                    }\n+                    break;\n             }\n \n             pkt += olen;"
        },
        {
          "filename": "src/decode-tcp.h",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -54,6 +54,8 @@\n #define TCP_OPT_TFO                          0x22   /* TCP Fast Open */\n #define TCP_OPT_EXP1                         0xfd   /* Experimental, could be TFO */\n #define TCP_OPT_EXP2                         0xfe   /* Experimental, could be TFO */\n+#define TCP_OPT_MD5                          0x13   /* 19: RFC 2385 TCP MD5 option */\n+#define TCP_OPT_AO                           0x1d   /* 29: RFC 5925 TCP AO option */\n \n #define TCP_OPT_SACKOK_LEN                   2\n #define TCP_OPT_WS_LEN                       3\n@@ -153,6 +155,8 @@ typedef struct TCPHdr_\n typedef struct TCPVars_\n {\n     /* commonly used and needed opts */\n+    bool md5_option_present;\n+    bool ao_option_present;\n     bool ts_set;\n     uint32_t ts_val;    /* host-order */\n     uint32_t ts_ecr;    /* host-order */"
        },
        {
          "filename": "src/stream-tcp.c",
          "status": "modified",
          "additions": 18,
          "deletions": 1,
          "patch": "@@ -4433,6 +4433,9 @@ static int StreamTcpPacketStateClosed(ThreadVars *tv, Packet *p,\n         if (ostream->flags & STREAMTCP_STREAM_FLAG_RST_RECV) {\n             if (StreamTcpStateDispatch(tv, p, stt, ssn, &stt->pseudo_queue, ssn->pstate) < 0)\n                 return -1;\n+            /* if state is still \"closed\", it wasn't updated by our dispatch. */\n+            if (ssn->state == TCP_CLOSED)\n+                ssn->state = ssn->pstate;\n         }\n     }\n     return 0;\n@@ -5410,7 +5413,6 @@ TmEcode StreamTcpThreadDeinit(ThreadVars *tv, void *data)\n \n static int StreamTcpValidateRst(TcpSession *ssn, Packet *p)\n {\n-\n     uint8_t os_policy;\n \n     if (ssn->flags & STREAMTCP_FLAG_TIMESTAMP) {\n@@ -5448,6 +5450,21 @@ static int StreamTcpValidateRst(TcpSession *ssn, Packet *p)\n         }\n     }\n \n+    /* RFC 2385 md5 signature header or RFC 5925 TCP AO headerpresent. Since we can't\n+     * validate these (requires key that is set/transfered out of band), we can't know\n+     * if the RST will be accepted or rejected by the end host. We accept it, but keep\n+     * tracking if the sender of it ignores it, which would be a sign of injection. */\n+    if (p->tcpvars.md5_option_present || p->tcpvars.ao_option_present) {\n+        TcpStream *receiver_stream;\n+        if (PKT_IS_TOSERVER(p)) {\n+            receiver_stream = &ssn->server;\n+        } else {\n+            receiver_stream = &ssn->client;\n+        }\n+        SCLogDebug(\"ssn %p: setting STREAMTCP_STREAM_FLAG_RST_RECV on receiver stream\", ssn);\n+        receiver_stream->flags |= STREAMTCP_STREAM_FLAG_RST_RECV;\n+    }\n+\n     if (ssn->flags & STREAMTCP_FLAG_ASYNC) {\n         if (PKT_IS_TOSERVER(p)) {\n             if (SEQ_GEQ(TCP_GET_SEQ(p), ssn->client.next_seq)) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "078c6469a0cf44ebef934fa11e5f41de08e046be",
            "date": "2025-01-08T21:03:24Z",
            "author_login": "AkakiAlice"
          },
          {
            "sha": "b1c2643c87b0caeeccfd314842c6967119aa7d17",
            "date": "2024-11-07T20:46:33Z",
            "author_login": "AkakiAlice"
          },
          {
            "sha": "637708acb476cdae526b870e4301e22197da1869",
            "date": "2025-01-13T12:39:21Z",
            "author_login": "catenacyber"
          },
          {
            "sha": "a92212d6e504b535c63ce8d234bf4804c7b8dcca",
            "date": "2025-01-10T16:27:55Z",
            "author_login": "catenacyber"
          },
          {
            "sha": "eab212b0be760daa2689bcb6e2d05c12fd708682",
            "date": "2025-01-10T15:57:51Z",
            "author_login": "catenacyber"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": null,
    "description": "An issue was discovered in Suricata before 6.0.4. It is possible to bypass/evade any HTTP-based signature by faking an RST TCP packet with random TCP options of the md5header from the client side. After the three-way handshake, it's possible to inject an RST ACK with a random TCP md5header option. Then, the client can send an HTTP GET request with a forbidden URL. The server will ignore the RST ACK and send the response HTTP packet for the client's request. These packets will not trigger a Suricata reject action.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2021-12-16T05:15:08.727",
    "last_modified": "2024-11-21T06:31:57.093",
    "fix_date": "2021-10-05T12:48:27Z"
  },
  "references": [
    {
      "url": "https://forum.suricata.io/t/suricata-6-0-4-and-5-0-8-released/1942",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/OISF/suricata/commit/50e2b973eeec7172991bf8f544ab06fb782b97df",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/OISF/suricata/releases",
      "source": "cve@mitre.org",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://redmine.openinfosecfoundation.org/issues/4710",
      "source": "cve@mitre.org",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://forum.suricata.io/t/suricata-6-0-4-and-5-0-8-released/1942",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/OISF/suricata/commit/50e2b973eeec7172991bf8f544ab06fb782b97df",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/OISF/suricata/releases",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://redmine.openinfosecfoundation.org/issues/4710",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Vendor Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:34.846490",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "suricata",
    "owner": "OISF",
    "created_at": "2012-08-14T08:30:06Z",
    "updated_at": "2025-01-14T12:53:46Z",
    "pushed_at": "2025-01-14T06:40:06Z",
    "size": 74648,
    "stars": 4847,
    "forks": 1483,
    "open_issues": 74,
    "watchers": 4847,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "main-7.0.x",
      "master",
      "master-3.2.x",
      "master-4.0.x",
      "master-4.1.x",
      "master-5.0.x",
      "master-6.0.x"
    ],
    "languages": {
      "C": 13993560,
      "Rust": 3470702,
      "M4": 118208,
      "Python": 103285,
      "Shell": 46705,
      "Makefile": 45461,
      "Perl": 36748,
      "SmPL": 5503,
      "Lua": 1583,
      "Dockerfile": 1044
    },
    "commit_activity": {
      "total_commits_last_year": 1056,
      "avg_commits_per_week": 20.307692307692307,
      "days_active_last_year": 254
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T14:41:46.043023"
  }
}