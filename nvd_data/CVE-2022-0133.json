{
  "cve_id": "CVE-2022-0133",
  "github_data": {
    "repository": "chocobozzz/peertube",
    "fix_commit": "795212f7acc690c88c86d0fab8772f6564d59cb8",
    "related_commits": [
      "795212f7acc690c88c86d0fab8772f6564d59cb8",
      "795212f7acc690c88c86d0fab8772f6564d59cb8"
    ],
    "patch_url": "https://github.com/chocobozzz/peertube/commit/795212f7acc690c88c86d0fab8772f6564d59cb8.patch",
    "fix_commit_details": {
      "sha": "795212f7acc690c88c86d0fab8772f6564d59cb8",
      "commit_date": "2022-01-06T12:27:29Z",
      "author": {
        "login": "Chocobozzz",
        "type": "User",
        "stats": {
          "total_commits": 7381,
          "average_weekly_commits": 17.657894736842106,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 332
        }
      },
      "commit_message": {
        "title": "Prevent caption listing of private videos",
        "length": 41,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 108,
        "additions": 86,
        "deletions": 22
      },
      "files": [
        {
          "filename": "server/controllers/api/videos/captions.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -48,7 +48,7 @@ export {\n // ---------------------------------------------------------------------------\n \n async function listVideoCaptions (req: express.Request, res: express.Response) {\n-  const data = await VideoCaptionModel.listVideoCaptions(res.locals.videoId.id)\n+  const data = await VideoCaptionModel.listVideoCaptions(res.locals.onlyVideo.id)\n \n   return res.json(getFormattedObjects(data, data.length))\n }"
        },
        {
          "filename": "server/controllers/api/videos/files.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -10,13 +10,15 @@ import {\n   ensureUserHasRight,\n   videoFileMetadataGetValidator,\n   videoFilesDeleteHLSValidator,\n-  videoFilesDeleteWebTorrentValidator\n+  videoFilesDeleteWebTorrentValidator,\n+  videosGetValidator\n } from '../../../middlewares'\n \n const lTags = loggerTagsFactory('api', 'video')\n const filesRouter = express.Router()\n \n filesRouter.get('/:id/metadata/:videoFileId',\n+  asyncMiddleware(videosGetValidator),\n   asyncMiddleware(videoFileMetadataGetValidator),\n   asyncMiddleware(getVideoFileMetadata)\n )"
        },
        {
          "filename": "server/middlewares/validators/shared/videos.ts",
          "status": "modified",
          "additions": 30,
          "deletions": 3,
          "patch": "@@ -1,16 +1,20 @@\n-import { Response } from 'express'\n+import { Request, Response } from 'express'\n import { loadVideo, VideoLoadType } from '@server/lib/model-loaders'\n+import { authenticatePromiseIfNeeded } from '@server/middlewares/auth'\n+import { VideoModel } from '@server/models/video/video'\n import { VideoChannelModel } from '@server/models/video/video-channel'\n import { VideoFileModel } from '@server/models/video/video-file'\n import {\n   MUser,\n   MUserAccountId,\n+  MVideo,\n   MVideoAccountLight,\n   MVideoFormattableDetails,\n   MVideoFullLight,\n   MVideoId,\n   MVideoImmutable,\n-  MVideoThumbnail\n+  MVideoThumbnail,\n+  MVideoWithRights\n } from '@server/types/models'\n import { HttpStatusCode, UserRight } from '@shared/models'\n \n@@ -89,6 +93,27 @@ async function doesVideoChannelOfAccountExist (channelId: number, user: MUserAcc\n   return true\n }\n \n+async function checkCanSeeVideoIfPrivate (req: Request, res: Response, video: MVideo, authenticateInQuery = false) {\n+  if (!video.requiresAuth()) return true\n+\n+  const videoWithRights = await VideoModel.loadAndPopulateAccountAndServerAndTags(video.id)\n+\n+  return checkCanSeePrivateVideo(req, res, videoWithRights, authenticateInQuery)\n+}\n+\n+async function checkCanSeePrivateVideo (req: Request, res: Response, video: MVideoWithRights, authenticateInQuery = false) {\n+  await authenticatePromiseIfNeeded(req, res, authenticateInQuery)\n+\n+  const user = res.locals.oauth ? res.locals.oauth.token.User : null\n+\n+  // Only the owner or a user that have blocklist rights can see the video\n+  if (!user || !user.canGetVideo(video)) {\n+    return false\n+  }\n+\n+  return true\n+}\n+\n function checkUserCanManageVideo (user: MUser, video: MVideoAccountLight, right: UserRight, res: Response, onlyOwned = true) {\n   // Retrieve the user who did the request\n   if (onlyOwned && video.isOwned() === false) {\n@@ -120,5 +145,7 @@ export {\n   doesVideoChannelOfAccountExist,\n   doesVideoExist,\n   doesVideoFileOfVideoExist,\n-  checkUserCanManageVideo\n+  checkUserCanManageVideo,\n+  checkCanSeeVideoIfPrivate,\n+  checkCanSeePrivateVideo\n }"
        },
        {
          "filename": "server/middlewares/validators/videos/video-captions.ts",
          "status": "modified",
          "additions": 19,
          "deletions": 3,
          "patch": "@@ -1,11 +1,18 @@\n import express from 'express'\n import { body, param } from 'express-validator'\n-import { UserRight } from '../../../../shared'\n+import { HttpStatusCode, UserRight } from '../../../../shared'\n import { isVideoCaptionFile, isVideoCaptionLanguageValid } from '../../../helpers/custom-validators/video-captions'\n import { cleanUpReqFiles } from '../../../helpers/express-utils'\n import { logger } from '../../../helpers/logger'\n import { CONSTRAINTS_FIELDS, MIMETYPES } from '../../../initializers/constants'\n-import { areValidationErrors, checkUserCanManageVideo, doesVideoCaptionExist, doesVideoExist, isValidVideoIdParam } from '../shared'\n+import {\n+  areValidationErrors,\n+  checkCanSeeVideoIfPrivate,\n+  checkUserCanManageVideo,\n+  doesVideoCaptionExist,\n+  doesVideoExist,\n+  isValidVideoIdParam\n+} from '../shared'\n \n const addVideoCaptionValidator = [\n   isValidVideoIdParam('videoId'),\n@@ -64,7 +71,16 @@ const listVideoCaptionsValidator = [\n     logger.debug('Checking listVideoCaptions parameters', { parameters: req.params })\n \n     if (areValidationErrors(req, res)) return\n-    if (!await doesVideoExist(req.params.videoId, res, 'id')) return\n+    if (!await doesVideoExist(req.params.videoId, res, 'only-video')) return\n+\n+    const video = res.locals.onlyVideo\n+\n+    if (!await checkCanSeeVideoIfPrivate(req, res, video)) {\n+      return res.fail({\n+        status: HttpStatusCode.FORBIDDEN_403,\n+        message: 'Cannot list captions of private/internal/blocklisted video'\n+      })\n+    }\n \n     return next()\n   }"
        },
        {
          "filename": "server/middlewares/validators/videos/videos.ts",
          "status": "modified",
          "additions": 6,
          "deletions": 13,
          "patch": "@@ -51,9 +51,9 @@ import { CONSTRAINTS_FIELDS, OVERVIEWS } from '../../../initializers/constants'\n import { isLocalVideoAccepted } from '../../../lib/moderation'\n import { Hooks } from '../../../lib/plugins/hooks'\n import { VideoModel } from '../../../models/video/video'\n-import { authenticatePromiseIfNeeded } from '../../auth'\n import {\n   areValidationErrors,\n+  checkCanSeePrivateVideo,\n   checkUserCanManageVideo,\n   doesVideoChannelOfAccountExist,\n   doesVideoExist,\n@@ -317,19 +317,12 @@ const videosCustomGetValidator = (\n \n       // Video private or blacklisted\n       if (video.requiresAuth()) {\n-        await authenticatePromiseIfNeeded(req, res, authenticateInQuery)\n+        if (await checkCanSeePrivateVideo(req, res, video, authenticateInQuery)) return next()\n \n-        const user = res.locals.oauth ? res.locals.oauth.token.User : null\n-\n-        // Only the owner or a user that have blocklist rights can see the video\n-        if (!user || !user.canGetVideo(video)) {\n-          return res.fail({\n-            status: HttpStatusCode.FORBIDDEN_403,\n-            message: 'Cannot get this private/internal or blocklisted video'\n-          })\n-        }\n-\n-        return next()\n+        return res.fail({\n+          status: HttpStatusCode.FORBIDDEN_403,\n+          message: 'Cannot get this private/internal or blocklisted video'\n+        })\n       }\n \n       // Video is public, anyone can access it"
        },
        {
          "filename": "server/tests/api/check-params/video-captions.ts",
          "status": "modified",
          "additions": 27,
          "deletions": 1,
          "patch": "@@ -11,14 +11,15 @@ import {\n   PeerTubeServer,\n   setAccessTokensToServers\n } from '@shared/extra-utils'\n-import { HttpStatusCode, VideoCreateResult } from '@shared/models'\n+import { HttpStatusCode, VideoCreateResult, VideoPrivacy } from '@shared/models'\n \n describe('Test video captions API validator', function () {\n   const path = '/api/v1/videos/'\n \n   let server: PeerTubeServer\n   let userAccessToken: string\n   let video: VideoCreateResult\n+  let privateVideo: VideoCreateResult\n \n   // ---------------------------------------------------------------\n \n@@ -30,6 +31,7 @@ describe('Test video captions API validator', function () {\n     await setAccessTokensToServers([ server ])\n \n     video = await server.videos.upload()\n+    privateVideo = await server.videos.upload({ attributes: { privacy: VideoPrivacy.PRIVATE } })\n \n     {\n       const user = {\n@@ -204,8 +206,32 @@ describe('Test video captions API validator', function () {\n       })\n     })\n \n+    it('Should fail with a private video without token', async function () {\n+      await makeGetRequest({\n+        url: server.url,\n+        path: path + privateVideo.shortUUID + '/captions',\n+        expectedStatus: HttpStatusCode.UNAUTHORIZED_401\n+      })\n+    })\n+\n+    it('Should fail with another user token', async function () {\n+      await makeGetRequest({\n+        url: server.url,\n+        token: userAccessToken,\n+        path: path + privateVideo.shortUUID + '/captions',\n+        expectedStatus: HttpStatusCode.FORBIDDEN_403\n+      })\n+    })\n+\n     it('Should success with the correct parameters', async function () {\n       await makeGetRequest({ url: server.url, path: path + video.shortUUID + '/captions', expectedStatus: HttpStatusCode.OK_200 })\n+\n+      await makeGetRequest({\n+        url: server.url,\n+        path: path + privateVideo.shortUUID + '/captions',\n+        token: server.accessToken,\n+        expectedStatus: HttpStatusCode.OK_200\n+      })\n     })\n   })\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 4,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c31084ce5bc31a5ab0d1bfb014afe509e9d9e7a1",
            "date": "2025-01-04T16:19:34Z",
            "author_login": "zbirkenbuel"
          },
          {
            "sha": "4967d25d4619bf98dd30ddf68b780e683a844ba2",
            "date": "2025-01-14T12:27:18Z",
            "author_login": "Chocobozzz"
          },
          {
            "sha": "1a568cc65c3938a2832d4816cd5f34807b0f06f8",
            "date": "2025-01-14T12:25:17Z",
            "author_login": "Khyvodul"
          },
          {
            "sha": "e4b6021310447c5723cb08b5a11347f425d177d9",
            "date": "2025-01-14T10:37:03Z",
            "author_login": "Chocobozzz"
          },
          {
            "sha": "e0960c53a99e1d328f89bc726ee81c3f943cc904",
            "date": "2025-01-14T10:32:04Z",
            "author_login": "Chocobozzz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-284",
    "description": "peertube is vulnerable to Improper Access Control",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-10T14:12:27.957",
    "last_modified": "2024-11-21T06:37:58.310",
    "fix_date": "2022-01-06T12:27:29Z"
  },
  "references": [
    {
      "url": "https://github.com/chocobozzz/peertube/commit/795212f7acc690c88c86d0fab8772f6564d59cb8",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/80aabdc1-89fe-47b8-87ca-9d68107fc0b4",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/chocobozzz/peertube/commit/795212f7acc690c88c86d0fab8772f6564d59cb8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/80aabdc1-89fe-47b8-87ca-9d68107fc0b4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.060338",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "PeerTube",
    "owner": "chocobozzz",
    "created_at": "2015-10-29T22:09:42Z",
    "updated_at": "2025-01-14T12:54:05Z",
    "pushed_at": "2025-01-14T12:54:00Z",
    "size": 345923,
    "stars": 13329,
    "forks": 1538,
    "open_issues": 625,
    "watchers": 13329,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "master"
    ],
    "languages": {
      "TypeScript": 8063880,
      "HTML": 587956,
      "SCSS": 274504,
      "Shell": 34475,
      "Pug": 22110,
      "JavaScript": 12518,
      "Dockerfile": 332
    },
    "commit_activity": {
      "total_commits_last_year": 1307,
      "avg_commits_per_week": 25.134615384615383,
      "days_active_last_year": 233
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:52:13.645385"
  }
}