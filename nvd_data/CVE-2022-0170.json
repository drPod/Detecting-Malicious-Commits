{
  "cve_id": "CVE-2022-0170",
  "github_data": {
    "repository": "chocobozzz/peertube",
    "fix_commit": "84c8d9866890f479faf0168c29be5eb7816ccc8e",
    "related_commits": [
      "84c8d9866890f479faf0168c29be5eb7816ccc8e",
      "84c8d9866890f479faf0168c29be5eb7816ccc8e"
    ],
    "patch_url": "https://github.com/chocobozzz/peertube/commit/84c8d9866890f479faf0168c29be5eb7816ccc8e.patch",
    "fix_commit_details": {
      "sha": "84c8d9866890f479faf0168c29be5eb7816ccc8e",
      "commit_date": "2022-01-10T15:07:21Z",
      "author": {
        "login": "Chocobozzz",
        "type": "User",
        "stats": {
          "total_commits": 7381,
          "average_weekly_commits": 17.657894736842106,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 332
        }
      },
      "commit_message": {
        "title": "Don't display comments of private/internal videos",
        "length": 49,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 86,
        "additions": 84,
        "deletions": 2
      },
      "files": [
        {
          "filename": "server/middlewares/validators/videos/video-comments.ts",
          "status": "modified",
          "additions": 22,
          "deletions": 1,
          "patch": "@@ -9,7 +9,14 @@ import { logger } from '../../../helpers/logger'\n import { AcceptResult, isLocalVideoCommentReplyAccepted, isLocalVideoThreadAccepted } from '../../../lib/moderation'\n import { Hooks } from '../../../lib/plugins/hooks'\n import { MCommentOwnerVideoReply, MVideo, MVideoFullLight } from '../../../types/models/video'\n-import { areValidationErrors, doesVideoCommentExist, doesVideoCommentThreadExist, doesVideoExist, isValidVideoIdParam } from '../shared'\n+import {\n+  areValidationErrors,\n+  checkCanSeeVideoIfPrivate,\n+  doesVideoCommentExist,\n+  doesVideoCommentThreadExist,\n+  doesVideoExist,\n+  isValidVideoIdParam\n+} from '../shared'\n \n const listVideoCommentsValidator = [\n   query('isLocal')\n@@ -48,6 +55,13 @@ const listVideoCommentThreadsValidator = [\n     if (areValidationErrors(req, res)) return\n     if (!await doesVideoExist(req.params.videoId, res, 'only-video')) return\n \n+    if (!await checkCanSeeVideoIfPrivate(req, res, res.locals.onlyVideo)) {\n+      return res.fail({\n+        status: HttpStatusCode.FORBIDDEN_403,\n+        message: 'Cannot list comments of private/internal/blocklisted video'\n+      })\n+    }\n+\n     return next()\n   }\n ]\n@@ -65,6 +79,13 @@ const listVideoThreadCommentsValidator = [\n     if (!await doesVideoExist(req.params.videoId, res, 'only-video')) return\n     if (!await doesVideoCommentThreadExist(req.params.threadId, res.locals.onlyVideo, res)) return\n \n+    if (!await checkCanSeeVideoIfPrivate(req, res, res.locals.onlyVideo)) {\n+      return res.fail({\n+        status: HttpStatusCode.FORBIDDEN_403,\n+        message: 'Cannot list threads of private/internal/blocklisted video'\n+      })\n+    }\n+\n     return next()\n   }\n ]"
        },
        {
          "filename": "server/tests/api/check-params/video-comments.ts",
          "status": "modified",
          "additions": 62,
          "deletions": 1,
          "patch": "@@ -14,7 +14,7 @@ import {\n   PeerTubeServer,\n   setAccessTokensToServers\n } from '@shared/extra-utils'\n-import { HttpStatusCode, VideoCreateResult } from '@shared/models'\n+import { HttpStatusCode, VideoCreateResult, VideoPrivacy } from '@shared/models'\n \n const expect = chai.expect\n \n@@ -26,6 +26,8 @@ describe('Test video comments API validator', function () {\n   let userAccessToken: string\n   let userAccessToken2: string\n   let commentId: number\n+  let privateCommentId: number\n+  let privateVideo: VideoCreateResult\n \n   // ---------------------------------------------------------------\n \n@@ -41,12 +43,21 @@ describe('Test video comments API validator', function () {\n       pathThread = '/api/v1/videos/' + video.uuid + '/comment-threads'\n     }\n \n+    {\n+      privateVideo = await server.videos.upload({ attributes: { privacy: VideoPrivacy.PRIVATE } })\n+    }\n+\n     {\n       const created = await server.comments.createThread({ videoId: video.uuid, text: 'coucou' })\n       commentId = created.id\n       pathComment = '/api/v1/videos/' + video.uuid + '/comments/' + commentId\n     }\n \n+    {\n+      const created = await server.comments.createThread({ videoId: privateVideo.uuid, text: 'coucou' })\n+      privateCommentId = created.id\n+    }\n+\n     {\n       const user = { username: 'user1', password: 'my super password' }\n       await server.users.create({ username: user.username, password: user.password })\n@@ -80,6 +91,32 @@ describe('Test video comments API validator', function () {\n         expectedStatus: HttpStatusCode.NOT_FOUND_404\n       })\n     })\n+\n+    it('Should fail with a private video without token', async function () {\n+      await makeGetRequest({\n+        url: server.url,\n+        path: '/api/v1/videos/' + privateVideo.shortUUID + '/comment-threads',\n+        expectedStatus: HttpStatusCode.UNAUTHORIZED_401\n+      })\n+    })\n+\n+    it('Should fail with another user token', async function () {\n+      await makeGetRequest({\n+        url: server.url,\n+        token: userAccessToken,\n+        path: '/api/v1/videos/' + privateVideo.shortUUID + '/comment-threads',\n+        expectedStatus: HttpStatusCode.FORBIDDEN_403\n+      })\n+    })\n+\n+    it('Should succeed with the correct params', async function () {\n+      await makeGetRequest({\n+        url: server.url,\n+        token: server.accessToken,\n+        path: '/api/v1/videos/' + privateVideo.shortUUID + '/comment-threads',\n+        expectedStatus: HttpStatusCode.OK_200\n+      })\n+    })\n   })\n \n   describe('When listing comments of a thread', function () {\n@@ -99,7 +136,31 @@ describe('Test video comments API validator', function () {\n       })\n     })\n \n+    it('Should fail with a private video without token', async function () {\n+      await makeGetRequest({\n+        url: server.url,\n+        path: '/api/v1/videos/' + privateVideo.shortUUID + '/comment-threads/' + privateCommentId,\n+        expectedStatus: HttpStatusCode.UNAUTHORIZED_401\n+      })\n+    })\n+\n+    it('Should fail with another user token', async function () {\n+      await makeGetRequest({\n+        url: server.url,\n+        token: userAccessToken,\n+        path: '/api/v1/videos/' + privateVideo.shortUUID + '/comment-threads/' + privateCommentId,\n+        expectedStatus: HttpStatusCode.FORBIDDEN_403\n+      })\n+    })\n+\n     it('Should success with the correct params', async function () {\n+      await makeGetRequest({\n+        url: server.url,\n+        token: server.accessToken,\n+        path: '/api/v1/videos/' + privateVideo.shortUUID + '/comment-threads/' + privateCommentId,\n+        expectedStatus: HttpStatusCode.OK_200\n+      })\n+\n       await makeGetRequest({\n         url: server.url,\n         path: '/api/v1/videos/' + video.shortUUID + '/comment-threads/' + commentId,"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c31084ce5bc31a5ab0d1bfb014afe509e9d9e7a1",
            "date": "2025-01-04T16:19:34Z",
            "author_login": "zbirkenbuel"
          },
          {
            "sha": "4967d25d4619bf98dd30ddf68b780e683a844ba2",
            "date": "2025-01-14T12:27:18Z",
            "author_login": "Chocobozzz"
          },
          {
            "sha": "1a568cc65c3938a2832d4816cd5f34807b0f06f8",
            "date": "2025-01-14T12:25:17Z",
            "author_login": "Khyvodul"
          },
          {
            "sha": "e4b6021310447c5723cb08b5a11347f425d177d9",
            "date": "2025-01-14T10:37:03Z",
            "author_login": "Chocobozzz"
          },
          {
            "sha": "e0960c53a99e1d328f89bc726ee81c3f943cc904",
            "date": "2025-01-14T10:32:04Z",
            "author_login": "Chocobozzz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-284",
    "description": "peertube is vulnerable to Improper Access Control",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-11T16:15:07.860",
    "last_modified": "2024-11-21T06:38:03.863",
    "fix_date": "2022-01-10T15:07:21Z"
  },
  "references": [
    {
      "url": "https://github.com/chocobozzz/peertube/commit/84c8d9866890f479faf0168c29be5eb7816ccc8e",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/f2a003fc-b911-43b6-81ec-f856cdfeaefc",
      "source": "security@huntr.dev",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/chocobozzz/peertube/commit/84c8d9866890f479faf0168c29be5eb7816ccc8e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/f2a003fc-b911-43b6-81ec-f856cdfeaefc",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.068068",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "PeerTube",
    "owner": "chocobozzz",
    "created_at": "2015-10-29T22:09:42Z",
    "updated_at": "2025-01-14T12:54:05Z",
    "pushed_at": "2025-01-14T12:54:00Z",
    "size": 345923,
    "stars": 13329,
    "forks": 1538,
    "open_issues": 625,
    "watchers": 13329,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "master"
    ],
    "languages": {
      "TypeScript": 8063880,
      "HTML": 587956,
      "SCSS": 274504,
      "Shell": 34475,
      "Pug": 22110,
      "JavaScript": 12518,
      "Dockerfile": 332
    },
    "commit_activity": {
      "total_commits_last_year": 1307,
      "avg_commits_per_week": 25.134615384615383,
      "days_active_last_year": 233
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:52:13.645385"
  }
}