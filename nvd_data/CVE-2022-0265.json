{
  "cve_id": "CVE-2022-0265",
  "github_data": {
    "repository": "hazelcast/hazelcast",
    "fix_commit": "4d6b666cd0291abd618c3b95cdbb51aa4208e748",
    "related_commits": [
      "4d6b666cd0291abd618c3b95cdbb51aa4208e748",
      "4d6b666cd0291abd618c3b95cdbb51aa4208e748"
    ],
    "patch_url": "https://github.com/hazelcast/hazelcast/commit/4d6b666cd0291abd618c3b95cdbb51aa4208e748.patch",
    "fix_commit_details": {
      "sha": "4d6b666cd0291abd618c3b95cdbb51aa4208e748",
      "commit_date": "2022-01-19T08:37:38Z",
      "author": {
        "login": "kwart",
        "type": "User",
        "stats": {
          "total_commits": 368,
          "average_weekly_commits": 0.44987775061124696,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 190
        }
      },
      "commit_message": {
        "title": "Add helper method to XmlUtil to enable XXE protection in the SAXParserFactory and XMLInputFactory (#20407)",
        "length": 106,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 261,
        "additions": 213,
        "deletions": 48
      },
      "files": [
        {
          "filename": "hazelcast/src/main/java/com/hazelcast/internal/config/AbstractXmlConfigRootTagRecognizer.java",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -18,6 +18,7 @@\n \n import com.hazelcast.config.ConfigRecognizer;\n import com.hazelcast.config.ConfigStream;\n+import com.hazelcast.internal.util.XmlUtil;\n import com.hazelcast.logging.ILogger;\n import com.hazelcast.logging.Logger;\n import org.xml.sax.Attributes;\n@@ -54,7 +55,7 @@ public class AbstractXmlConfigRootTagRecognizer implements ConfigRecognizer {\n \n     public AbstractXmlConfigRootTagRecognizer(String expectedRootNode) throws Exception {\n         this.expectedRootNode = expectedRootNode;\n-        SAXParserFactory factory = SAXParserFactory.newInstance();\n+        SAXParserFactory factory = XmlUtil.getSAXParserFactory();\n         saxParser = factory.newSAXParser();\n     }\n "
        },
        {
          "filename": "hazelcast/src/main/java/com/hazelcast/internal/util/XmlUtil.java",
          "status": "modified",
          "additions": 69,
          "deletions": 44,
          "patch": "@@ -25,6 +25,8 @@\n import javax.xml.XMLConstants;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.stream.XMLInputFactory;\n import javax.xml.transform.ErrorListener;\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Source;\n@@ -41,7 +43,10 @@\n import com.hazelcast.logging.Logger;\n \n /**\n- * Utility class for XML processing.\n+ * Utility class for XML processing. It contains several methods to retrieve XML processing factories with XXE protection\n+ * enabled (based on recommendation in the\n+ * <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html\">OWASP XXE prevention\n+ * cheat-sheet</a>).\n  */\n public final class XmlUtil {\n \n@@ -55,6 +60,7 @@ public final class XmlUtil {\n      */\n     public static final String SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES = \"hazelcast.ignoreXxeProtectionFailures\";\n \n+    private static final String FEATURES_DISALLOW_DOCTYPE = \"http://apache.org/xml/features/disallow-doctype-decl\";\n     private static final ILogger LOGGER = Logger.getLogger(XmlUtil.class);\n \n     private XmlUtil() {\n@@ -68,7 +74,7 @@ private XmlUtil() {\n     public static DocumentBuilderFactory getNsAwareDocumentBuilderFactory() throws ParserConfigurationException {\n         DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n         dbf.setNamespaceAware(true);\n-        setFeature(dbf, \"http://apache.org/xml/features/disallow-doctype-decl\");\n+        setFeature(dbf, FEATURES_DISALLOW_DOCTYPE);\n         return dbf;\n     }\n \n@@ -92,6 +98,24 @@ public static SchemaFactory getSchemaFactory() throws SAXException {\n         return schemaFactory;\n     }\n \n+    /**\n+     * Returns {@link SAXParserFactory} with XXE protection enabled.\n+     */\n+    public static SAXParserFactory getSAXParserFactory() throws ParserConfigurationException, SAXException {\n+        SAXParserFactory factory = SAXParserFactory.newInstance();\n+        setFeature(factory, FEATURES_DISALLOW_DOCTYPE);\n+        return factory;\n+    }\n+\n+    /**\n+     * Returns {@link XMLInputFactory} with XXE protection enabled.\n+     */\n+    public static XMLInputFactory getXMLInputFactory() {\n+        XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n+        setProperty(xmlInputFactory, XMLInputFactory.SUPPORT_DTD, false);\n+        return xmlInputFactory;\n+    }\n+\n     /**\n      * Formats given XML String with the given indentation used. If the {@code input} XML string is {@code null}, or\n      * {@code indent} parameter is negative, or XML transformation fails, then the original value is returned unchanged. The\n@@ -166,62 +190,63 @@ static void setAttribute(TransformerFactory transformerFactory, String attribute\n         try {\n             transformerFactory.setAttribute(attributeName, \"\");\n         } catch (IllegalArgumentException iae) {\n-            if (Boolean.getBoolean(SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES)) {\n-                LOGGER.warning(\"Enabling XXE protection failed. The attribute \" + attributeName\n-                        + \" is not supported by the TransformerFactory. The \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n-                        + \" system property is used so the XML processing continues in the UNSECURE mode\"\n-                        + \" with XXE protection disabled!!!\");\n-            } else {\n-                LOGGER.severe(\"Enabling XXE protection failed. The attribute \" + attributeName\n-                        + \" is not supported by the TransformerFactory. This usually mean an outdated XML processor\"\n-                        + \" is present on the classpath (e.g. Xerces, Xalan). If you are not able to resolve the issue by\"\n-                        + \" fixing the classpath, the \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n-                        + \" system property can be used to disable XML External Entity protections.\"\n-                        + \" We don't recommend disabling the XXE as such the XML processor configuration is unsecure!!!\", iae);\n-                throw iae;\n-            }\n+            printWarningAndRethrowEventually(iae, TransformerFactory.class, \"attribute \" + attributeName);\n         }\n     }\n \n     static void setFeature(DocumentBuilderFactory dbf, String featureName) throws ParserConfigurationException {\n         try {\n             dbf.setFeature(featureName, true);\n         } catch (ParserConfigurationException e) {\n-            if (Boolean.getBoolean(SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES)) {\n-                LOGGER.warning(\"Enabling XXE protection failed. The feature \" + featureName\n-                        + \" is not supported by the DocumentBuilderFactory. The \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n-                        + \" system property is used so the XML processing continues in the UNSECURE mode\"\n-                        + \" with XXE protection disabled!!!\");\n-            } else {\n-                LOGGER.severe(\"Enabling XXE protection failed. The feature \" + featureName\n-                        + \" is not supported by the DocumentBuilderFactory. This usually mean an outdated XML processor\"\n-                        + \" is present on the classpath (e.g. Xerces, Xalan). If you are not able to resolve the issue by\"\n-                        + \" fixing the classpath, the \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n-                        + \" system property can be used to disable XML External Entity protections.\"\n-                        + \" We don't recommend disabling the XXE as such the XML processor configuration is unsecure!!!\", e);\n-                throw e;\n-            }\n+            printWarningAndRethrowEventually(e, DocumentBuilderFactory.class, \"feature \" + featureName);\n+        }\n+    }\n+\n+    static void setFeature(SAXParserFactory saxParserFactory, String featureName)\n+            throws ParserConfigurationException, SAXException {\n+        try {\n+            saxParserFactory.setFeature(featureName, true);\n+        } catch (SAXException e) {\n+            printWarningAndRethrowEventually(e, SAXParserFactory.class, \"feature \" + featureName);\n+        } catch (ParserConfigurationException e) {\n+            printWarningAndRethrowEventually(e, SAXParserFactory.class, \"feature \" + featureName);\n         }\n     }\n \n     static void setProperty(SchemaFactory schemaFactory, String propertyName) throws SAXException {\n         try {\n             schemaFactory.setProperty(propertyName, \"\");\n         } catch (SAXException e) {\n-            if (Boolean.getBoolean(SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES)) {\n-                LOGGER.warning(\"Enabling XXE protection failed. The property \" + propertyName\n-                        + \" is not supported by the SchemaFactory. The \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n-                        + \" system property is used so the XML processing continues in the UNSECURE mode\"\n-                        + \" with XXE protection disabled!!!\");\n-            } else {\n-                LOGGER.severe(\"Enabling XXE protection failed. The property \" + propertyName\n-                        + \" is not supported by the SchemaFactory. This usually mean an outdated XML processor\"\n-                        + \" is present on the classpath (e.g. Xerces, Xalan). If you are not able to resolve the issue by\"\n-                        + \" fixing the classpath, the \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n-                        + \" system property can be used to disable XML External Entity protections.\"\n-                        + \" We don't recommend disabling the XXE as such the XML processor configuration is unsecure!!!\", e);\n-                throw e;\n-            }\n+            printWarningAndRethrowEventually(e, SchemaFactory.class, \"property \" + propertyName);\n+        }\n+    }\n+\n+    static void setProperty(XMLInputFactory xmlInputFactory, String propertyName, Object value) {\n+        try {\n+            xmlInputFactory.setProperty(propertyName, value);\n+        } catch (IllegalArgumentException e) {\n+            printWarningAndRethrowEventually(e, XMLInputFactory.class, \"property \" + propertyName);\n+        }\n+    }\n+\n+    private static <T extends Exception> void printWarningAndRethrowEventually(T cause, Class<?> clazz, String objective)\n+            throws T {\n+        String className = clazz.getSimpleName();\n+        if (Boolean.getBoolean(SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES)) {\n+            LOGGER.warning(\"Enabling XXE protection failed. The \" + objective + \" is not supported by the \" + className\n+                    + \". The \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n+                    + \" system property is used so the XML processing continues in the UNSECURE mode\"\n+                    + \" with XXE protection disabled!!!\");\n+        } else {\n+            LOGGER.severe(\n+                    \"Enabling XXE protection failed. The \" + objective + \" is not supported by the \" + className\n+                            + \". This usually mean an outdated XML processor\"\n+                            + \" is present on the classpath (e.g. Xerces, Xalan). If you are not able to resolve the issue by\"\n+                            + \" fixing the classpath, the \" + SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES\n+                            + \" system property can be used to disable XML External Entity protections.\"\n+                            + \" We don't recommend disabling the XXE as such the XML processor configuration is unsecure!\",\n+                    cause);\n+            throw cause;\n         }\n     }\n "
        },
        {
          "filename": "hazelcast/src/test/java/com/hazelcast/internal/util/XmlUtilTest.java",
          "status": "modified",
          "additions": 142,
          "deletions": 3,
          "patch": "@@ -18,19 +18,39 @@\n \n import static com.hazelcast.internal.util.XmlUtil.SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES;\n import static com.hazelcast.internal.util.XmlUtil.format;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertThrows;\n \n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import javax.xml.stream.XMLEventReader;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.validation.SchemaFactory;\n \n+import org.fusesource.hawtbuf.ByteArrayInputStream;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.junit.runner.RunWith;\n+import org.xml.sax.HandlerBase;\n import org.xml.sax.SAXException;\n \n import com.hazelcast.test.HazelcastSerialClassRunner;\n@@ -45,6 +65,30 @@ public class XmlUtilTest {\n     public OverridePropertyRule ignoreXxeFailureProp = OverridePropertyRule\n             .clear(SYSTEM_PROPERTY_IGNORE_XXE_PROTECTION_FAILURES);\n \n+    private DummyServer server;\n+\n+    @Before\n+    public void before() throws IOException {\n+        server = new DummyServer();\n+        server.start();\n+    }\n+\n+    @After\n+    public void after() {\n+        server.stop();\n+    }\n+\n+    @Test\n+    public void testUnprotectedXxe() throws Exception {\n+        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+        try {\n+            db.parse(new ByteArrayInputStream(server.getTestXml().getBytes(UTF_8)));\n+        } catch (Exception e) {\n+            // not important if it fails\n+        }\n+        assertThat(server.getHits(), Matchers.greaterThan(0));\n+    }\n+\n     @Test\n     public void testFormat() throws Exception {\n         assertEquals(\"<a> <b>c</b></a>\", format(\"<a><b>c</b></a>\", 1).replaceAll(\"[\\r\\n]\", \"\"));\n@@ -54,9 +98,9 @@ public void testFormat() throws Exception {\n         assertThrows(IllegalArgumentException.class, () -> format(\"<a><b>c</b></a>\", 0));\n \n         // check if the XXE protection is enabled\n-        String xxeAttack = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\" + \"  <!DOCTYPE test [\\n\"\n-                + \"    <!ENTITY xxe SYSTEM \\\"file:///etc/passwd\\\">\\n\" + \"  ]>\" + \"<a><b>&xxe;</b></a>\";\n-        assertEquals(xxeAttack, format(xxeAttack, 1));\n+        String xml = server.getTestXml();\n+        assertEquals(xml, format(xml, 1));\n+        assertEquals(0, server.getHits());\n \n         // wrongly formatted XML\n         assertEquals(\"<a><b>c</b><a>\", format(\"<a><b>c</b><a>\", 1));\n@@ -94,4 +138,99 @@ public void testGetDocumentBuilderFactory() throws Exception {\n         ignoreXxeFailureProp.setOrClearProperty(\"true\");\n         XmlUtil.setFeature(dbf, \"test://no-such-feature\");\n     }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    @Test\n+    public void testGetSAXParserFactory() throws Exception {\n+        SAXParserFactory saxParserFactory = XmlUtil.getSAXParserFactory();\n+        assertNotNull(saxParserFactory);\n+        // check if the XXE protection is enabled\n+        SAXParser saxParser = saxParserFactory.newSAXParser();\n+        assertThrows(SAXException.class,\n+                () -> saxParser.parse(new ByteArrayInputStream(server.getTestXml().getBytes(UTF_8)), new HandlerBase()));\n+        assertEquals(0, server.getHits());\n+\n+        assertThrows(SAXException.class, () -> XmlUtil.setFeature(saxParserFactory, \"test://no-such-feature\"));\n+        ignoreXxeFailureProp.setOrClearProperty(\"false\");\n+        assertThrows(SAXException.class, () -> XmlUtil.setFeature(saxParserFactory, \"test://no-such-feature\"));\n+        ignoreXxeFailureProp.setOrClearProperty(\"true\");\n+        XmlUtil.setFeature(saxParserFactory, \"test://no-such-feature\");\n+    }\n+\n+    @Test\n+    public void testGetXmlInputFactory() throws Exception {\n+        XMLInputFactory xmlInputFactory = XmlUtil.getXMLInputFactory();\n+        assertNotNull(xmlInputFactory);\n+        // check if the XXE protection is enabled\n+        assertThrows(XMLStreamException.class,\n+                () -> staxReadEvents(xmlInputFactory.createXMLEventReader(new StringReader(server.getTestXml()))));\n+        assertEquals(0, server.getHits());\n+\n+        assertThrows(IllegalArgumentException.class,\n+                () -> XmlUtil.setProperty(xmlInputFactory, \"test://no-such-property\", false));\n+        ignoreXxeFailureProp.setOrClearProperty(\"false\");\n+        assertThrows(IllegalArgumentException.class,\n+                () -> XmlUtil.setProperty(xmlInputFactory, \"test://no-such-property\", false));\n+        ignoreXxeFailureProp.setOrClearProperty(\"true\");\n+        XmlUtil.setProperty(xmlInputFactory, \"test://no-such-feature\", false);\n+    }\n+\n+    private void staxReadEvents(XMLEventReader reader) throws XMLStreamException {\n+        try {\n+            while (reader.hasNext()) {\n+                reader.nextEvent();\n+            }\n+        } finally {\n+            reader.close();\n+        }\n+    }\n+\n+    static class DummyServer implements Runnable {\n+        private static final String XXE_TEST_STR_TEMPLATE = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\"\n+                + \"  <!DOCTYPE test [\\n\" + \"    <!ENTITY xxe SYSTEM \\\"%s\\\">\\n\" + \"  ]>\" + \"<a><b>&xxe;</b></a>\";\n+\n+        private final ServerSocket serverSocket;\n+        private final AtomicInteger counter = new AtomicInteger();\n+\n+        DummyServer() throws IOException {\n+            serverSocket = new ServerSocket(0, 5, InetAddress.getLoopbackAddress());\n+        }\n+\n+        public void start() {\n+            new Thread(this, \"DummyServer-acceptor\").start();\n+        }\n+\n+        public String getUrlString() {\n+            return \"http://127.0.0.1:\" + serverSocket.getLocalPort();\n+        }\n+\n+        public String getTestXml() {\n+            return String.format(XXE_TEST_STR_TEMPLATE, getUrlString());\n+        }\n+\n+        public int getHits() {\n+            return counter.get();\n+        }\n+\n+        public void stop() {\n+            try {\n+                serverSocket.close();\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+\n+        @Override\n+        public void run() {\n+            while (true) {\n+                try (Socket socket = serverSocket.accept()) {\n+                    System.out.println(\">> connection accepted: \" + socket);\n+                    counter.incrementAndGet();\n+                } catch (Exception e) {\n+                    System.out.println(\">> stopping the server. Cause: \" + e.getClass().getName());\n+                    return;\n+                }\n+            }\n+        }\n+    }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c3618afb446e8a6ddb0fbf65770ff43a17cac7a4",
            "date": "2025-01-14T16:01:41Z",
            "author_login": "steinv"
          },
          {
            "sha": "b0f136983e2fcb07a2e22d38cbd40da2d9581c30",
            "date": "2025-01-14T09:51:38Z",
            "author_login": "shultseva"
          },
          {
            "sha": "983095e29c85f48c4ea57b42520dae37e5bc729c",
            "date": "2025-01-14T07:47:54Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e98435b5cfe030cf88e365c46faa851bb136a4e2",
            "date": "2025-01-13T10:00:39Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "dde50f773945e3bd8266c865502e84050674cb82",
            "date": "2025-01-13T07:03:21Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-611",
    "description": "Improper Restriction of XML External Entity Reference in GitHub repository hazelcast/hazelcast in 5.1-BETA-1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-03T22:15:08.577",
    "last_modified": "2024-11-21T06:38:15.933",
    "fix_date": "2022-01-19T08:37:38Z"
  },
  "references": [
    {
      "url": "https://github.com/hazelcast/hazelcast/commit/4d6b666cd0291abd618c3b95cdbb51aa4208e748",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d63972a2-b910-480a-a86b-d1f75d24d563",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hazelcast/hazelcast/commit/4d6b666cd0291abd618c3b95cdbb51aa4208e748",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d63972a2-b910-480a-a86b-d1f75d24d563",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.775936",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "hazelcast",
    "owner": "hazelcast",
    "created_at": "2012-03-21T12:25:18Z",
    "updated_at": "2025-01-14T09:54:13Z",
    "pushed_at": "2025-01-14T09:54:08Z",
    "size": 414004,
    "stars": 6210,
    "forks": 1859,
    "open_issues": 1210,
    "watchers": 6210,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Java": 75077211,
      "FreeMarker": 144168,
      "Shell": 39321,
      "Python": 4714,
      "Batchfile": 4339,
      "C": 3721,
      "Kotlin": 1562
    },
    "commit_activity": {
      "total_commits_last_year": 1721,
      "avg_commits_per_week": 33.09615384615385,
      "days_active_last_year": 244
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:01:20.208028"
  }
}