{
  "cve_id": "CVE-2022-0274",
  "github_data": {
    "repository": "orchardcms/orchardcore",
    "fix_commit": "218f25ddfadb66a54de7a82dffe3ab2e4ab7c4b4",
    "related_commits": [
      "218f25ddfadb66a54de7a82dffe3ab2e4ab7c4b4",
      "218f25ddfadb66a54de7a82dffe3ab2e4ab7c4b4"
    ],
    "patch_url": "https://github.com/orchardcms/orchardcore/commit/218f25ddfadb66a54de7a82dffe3ab2e4ab7c4b4.patch",
    "fix_commit_details": {
      "sha": "218f25ddfadb66a54de7a82dffe3ab2e4ab7c4b4",
      "commit_date": "2022-01-18T19:03:05Z",
      "author": {
        "login": "sebastienros",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix localization and sanitization usages (#11034)",
        "length": 49,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 165,
        "additions": 144,
        "deletions": 21
      },
      "files": [
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.ContentFields/Drivers/LinkFieldDisplayDriver.cs",
          "status": "modified",
          "additions": 18,
          "deletions": 4,
          "patch": "@@ -1,4 +1,5 @@\n using System;\n+using System.Text.Encodings.Web;\n using System.Threading.Tasks;\n using Microsoft.AspNetCore.Mvc.Infrastructure;\n using Microsoft.AspNetCore.Mvc.Routing;\n@@ -11,6 +12,7 @@\n using OrchardCore.ContentManagement.Metadata.Models;\n using OrchardCore.DisplayManagement.ModelBinding;\n using OrchardCore.DisplayManagement.Views;\n+using OrchardCore.Infrastructure.Html;\n using OrchardCore.Mvc.ModelBinding;\n \n namespace OrchardCore.ContentFields.Drivers\n@@ -20,15 +22,21 @@ public class LinkFieldDisplayDriver : ContentFieldDisplayDriver<LinkField>\n         private readonly IUrlHelperFactory _urlHelperFactory;\n         private readonly IActionContextAccessor _actionContextAccessor;\n         private readonly IStringLocalizer S;\n+        private readonly IHtmlSanitizerService _htmlSanitizerService;\n+        private readonly HtmlEncoder _htmlencoder;\n \n         public LinkFieldDisplayDriver(\n             IUrlHelperFactory urlHelperFactory,\n             IActionContextAccessor actionContextAccessor,\n-            IStringLocalizer<LinkFieldDisplayDriver> localizer)\n+            IStringLocalizer<LinkFieldDisplayDriver> localizer,\n+            IHtmlSanitizerService htmlSanitizerService,\n+            HtmlEncoder htmlencoder)\n         {\n             _urlHelperFactory = urlHelperFactory;\n             _actionContextAccessor = actionContextAccessor;\n             S = localizer;\n+            _htmlSanitizerService = htmlSanitizerService;\n+            _htmlencoder = htmlencoder;\n         }\n \n         public override IDisplayResult Display(LinkField field, BuildFieldDisplayContext context)\n@@ -91,6 +99,15 @@ public override async Task<IDisplayResult> UpdateAsync(LinkField field, IUpdateM\n                 {\n                     updater.ModelState.AddModelError(Prefix, nameof(field.Url), S[\"{0} is an invalid url.\", field.Url]);\n                 }\n+                else\n+                {\n+                    var link = $\"<a href=\\\"{_htmlencoder.Encode(urlToValidate)}\\\"></a>\";\n+\n+                    if (!String.Equals(link, _htmlSanitizerService.Sanitize(link), StringComparison.OrdinalIgnoreCase))\n+                    {\n+                        updater.ModelState.AddModelError(Prefix, nameof(field.Url), S[\"{0} is an invalid url.\", field.Url]);\n+                    }\n+                }\n \n                 // Validate Text\n                 if (settings.LinkTextMode == LinkTextMode.Required && String.IsNullOrWhiteSpace(field.Text))\n@@ -101,9 +118,6 @@ public override async Task<IDisplayResult> UpdateAsync(LinkField field, IUpdateM\n                 {\n                     updater.ModelState.AddModelError(Prefix, nameof(field.Text), S[\"The text default value is required for {0}.\", context.PartFieldDefinition.DisplayName()]);\n                 }\n-\n-                // Run this through a sanitizer in case someone puts html in it.\n-                // No settings.\n             }\n \n             return Edit(field, context);"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Contents/AuditTrail/Controllers/AuditTrailContentController.cs",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -111,12 +111,15 @@ public async Task<ActionResult> Restore(string auditTrailEventId)\n             }\n \n             var result = await _contentManager.RestoreAsync(contentItem);\n+\n             if (!result.Succeeded)\n             {\n                 await _notifier.WarningAsync(H[\"'{0}' was not restored, the version is not valid.\", contentItem.DisplayText]);\n+\n                 foreach (var error in result.Errors)\n                 {\n-                    await _notifier.WarningAsync(new LocalizedHtmlString(error.ErrorMessage, error.ErrorMessage));\n+                    // Pass ErrorMessage as an argument to ensure it is encoded\n+                    await _notifier.WarningAsync(new LocalizedHtmlString(nameof(AuditTrailContentController.Restore), \"{0}\", false, error.ErrorMessage));\n                 }\n \n                 return RedirectToAction(\"Index\", \"Admin\", new { area = \"OrchardCore.AuditTrail\" });"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Menu/Drivers/HtmlMenuItemPartDisplayDriver.cs",
          "status": "modified",
          "additions": 49,
          "deletions": 1,
          "patch": "@@ -1,4 +1,9 @@\n+using System;\n+using System.Text.Encodings.Web;\n using System.Threading.Tasks;\n+using Microsoft.AspNetCore.Mvc.Infrastructure;\n+using Microsoft.AspNetCore.Mvc.Routing;\n+using Microsoft.Extensions.Localization;\n using OrchardCore.ContentManagement.Display.ContentDisplay;\n using OrchardCore.ContentManagement.Display.Models;\n using OrchardCore.DisplayManagement.ModelBinding;\n@@ -12,11 +17,25 @@ namespace OrchardCore.Menu.Drivers\n {\n     public class HtmlMenuItemPartDisplayDriver : ContentPartDisplayDriver<HtmlMenuItemPart>\n     {\n+        private readonly IUrlHelperFactory _urlHelperFactory;\n+        private readonly IActionContextAccessor _actionContextAccessor;\n         private readonly IHtmlSanitizerService _htmlSanitizerService;\n+        private readonly HtmlEncoder _htmlencoder;\n+        private readonly IStringLocalizer S;\n \n-        public HtmlMenuItemPartDisplayDriver(IHtmlSanitizerService htmlSanitizerService)\n+        public HtmlMenuItemPartDisplayDriver(\n+            IUrlHelperFactory urlHelperFactory,\n+            IActionContextAccessor actionContextAccessor,\n+            IStringLocalizer<HtmlMenuItemPartDisplayDriver> localizer,\n+            IHtmlSanitizerService htmlSanitizerService,\n+            HtmlEncoder htmlencoder\n+            )\n         {\n+            _urlHelperFactory = urlHelperFactory;\n+            _actionContextAccessor = actionContextAccessor;\n             _htmlSanitizerService = htmlSanitizerService;\n+            _htmlencoder = htmlencoder;\n+            S = localizer;\n         }\n \n         public override IDisplayResult Display(HtmlMenuItemPart part, BuildPartDisplayContext context)\n@@ -62,6 +81,35 @@ public override async Task<IDisplayResult> UpdateAsync(HtmlMenuItemPart part, IU\n                 part.ContentItem.DisplayText = model.Name;\n                 part.Html = settings.SanitizeHtml ? _htmlSanitizerService.Sanitize(model.Html) : model.Html;\n                 part.Url = model.Url;\n+\n+                var urlToValidate = part.Url;\n+\n+                if (!String.IsNullOrEmpty(urlToValidate))\n+                {\n+                    urlToValidate = urlToValidate.Split('#', 2)[0];\n+\n+                    if (urlToValidate.StartsWith(\"~/\", StringComparison.Ordinal))\n+                    {\n+                        var urlHelper = _urlHelperFactory.GetUrlHelper(_actionContextAccessor.ActionContext);\n+                        urlToValidate = urlHelper.Content(urlToValidate);\n+                    }\n+\n+                    urlToValidate = urlToValidate.ToUriComponents();\n+\n+                    if (!Uri.IsWellFormedUriString(urlToValidate, UriKind.RelativeOrAbsolute))\n+                    {\n+                        updater.ModelState.AddModelError(nameof(part.Url), S[\"{0} is an invalid url.\", part.Url]);\n+                    }\n+                    else\n+                    {\n+                        var link = $\"<a href=\\\"{_htmlencoder.Encode(urlToValidate)}\\\"></a>\";\n+\n+                        if (!String.Equals(link, _htmlSanitizerService.Sanitize(link), StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            updater.ModelState.AddModelError(nameof(part.Url), S[\"{0} is an invalid url.\", part.Url]);\n+                        }\n+                    }\n+                }\n             }\n \n             return Edit(part, context);"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Menu/Drivers/LinkMenuItemPartDisplayDriver.cs",
          "status": "modified",
          "additions": 57,
          "deletions": 0,
          "patch": "@@ -1,15 +1,41 @@\n+using System;\n+using System.Text.Encodings.Web;\n using System.Threading.Tasks;\n+using Microsoft.AspNetCore.Mvc.Infrastructure;\n+using Microsoft.AspNetCore.Mvc.Routing;\n+using Microsoft.Extensions.Localization;\n using OrchardCore.ContentManagement.Display.ContentDisplay;\n using OrchardCore.ContentManagement.Display.Models;\n using OrchardCore.DisplayManagement.ModelBinding;\n using OrchardCore.DisplayManagement.Views;\n+using OrchardCore.Infrastructure.Html;\n using OrchardCore.Menu.Models;\n using OrchardCore.Menu.ViewModels;\n \n namespace OrchardCore.Menu.Drivers\n {\n     public class LinkMenuItemPartDisplayDriver : ContentPartDisplayDriver<LinkMenuItemPart>\n     {\n+        private readonly IUrlHelperFactory _urlHelperFactory;\n+        private readonly IActionContextAccessor _actionContextAccessor;\n+        private readonly IHtmlSanitizerService _htmlSanitizerService;\n+        private readonly HtmlEncoder _htmlencoder;\n+        private readonly IStringLocalizer S;\n+\n+        public LinkMenuItemPartDisplayDriver(\n+            IUrlHelperFactory urlHelperFactory,\n+            IActionContextAccessor actionContextAccessor,\n+            IStringLocalizer<LinkMenuItemPartDisplayDriver> localizer,\n+            IHtmlSanitizerService htmlSanitizerService,\n+            HtmlEncoder htmlencoder\n+            )\n+        {\n+            _urlHelperFactory = urlHelperFactory;\n+            _actionContextAccessor = actionContextAccessor; \n+            _htmlSanitizerService = htmlSanitizerService;\n+            _htmlencoder = htmlencoder;\n+            S = localizer;\n+        }\n \n         public override IDisplayResult Display(LinkMenuItemPart part, BuildPartDisplayContext context)\n         {\n@@ -45,11 +71,42 @@ public override async Task<IDisplayResult> UpdateAsync(LinkMenuItemPart part, IU\n             {\n                 part.Url = model.Url;\n                 part.ContentItem.DisplayText = model.Name;\n+\n                 // This code can be removed in a later release.\n #pragma warning disable 0618\n                 part.Name = model.Name;\n #pragma warning restore 0618\n+\n+                var urlToValidate = part.Url;\n+\n+                if (!String.IsNullOrEmpty(urlToValidate))\n+                {\n+                    urlToValidate = urlToValidate.Split('#', 2)[0];\n+\n+                    if (urlToValidate.StartsWith(\"~/\", StringComparison.Ordinal))\n+                    {\n+                        var urlHelper = _urlHelperFactory.GetUrlHelper(_actionContextAccessor.ActionContext);\n+                        urlToValidate = urlHelper.Content(urlToValidate);\n+                    }\n+\n+                    urlToValidate = urlToValidate.ToUriComponents();\n+\n+                    if (!Uri.IsWellFormedUriString(urlToValidate, UriKind.RelativeOrAbsolute))\n+                    {\n+                        updater.ModelState.AddModelError(nameof(part.Url), S[\"{0} is an invalid url.\", part.Url]);\n+                    }\n+                    else\n+                    {\n+                        var link = $\"<a href=\\\"{_htmlencoder.Encode(urlToValidate)}\\\"></a>\";\n+\n+                        if (!String.Equals(link, _htmlSanitizerService.Sanitize(link), StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            updater.ModelState.AddModelError(nameof(part.Url), S[\"{0} is an invalid url.\", part.Url]);\n+                        }\n+                    }\n+                }\n             }\n+\n             return Edit(part);\n         }\n     }"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Users/Workflows/Activities/RegisterUserTask.cs",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -134,15 +134,14 @@ public override async Task<ActivityExecutionResult> ExecuteAsync(WorkflowExecuti\n                     workflowContext.Properties[\"EmailConfirmationUrl\"] = uri;\n \n                     var subject = await _expressionEvaluator.EvaluateAsync(ConfirmationEmailSubject, workflowContext, null);\n-                    var localizedSubject = new LocalizedString(nameof(RegisterUserTask), subject);\n \n                     var body = await _expressionEvaluator.EvaluateAsync(ConfirmationEmailTemplate, workflowContext, _htmlEncoder);\n-                    var localizedBody = new LocalizedHtmlString(nameof(RegisterUserTask), body);\n+\n                     var message = new MailMessage()\n                     {\n                         To = email,\n-                        Subject = localizedSubject.ResourceNotFound ? subject : localizedSubject.Value,\n-                        Body = localizedBody.IsResourceNotFound ? body : localizedBody.Value,\n+                        Subject = subject,\n+                        Body = body,\n                         IsBodyHtml = true\n                     };\n                     var smtpService = _httpContextAccessor.HttpContext.RequestServices.GetService<ISmtpService>();"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Workflows/Activities/NotifyTask.cs",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -55,6 +55,8 @@ public override IEnumerable<Outcome> GetPossibleOutcomes(WorkflowExecutionContex\n         public override async Task<ActivityExecutionResult> ExecuteAsync(WorkflowExecutionContext workflowContext, ActivityContext activityContext)\n         {\n             var message = await _expressionEvaluator.EvaluateAsync(Message, workflowContext, _htmlEncoder);\n+\n+            // The notification message can contain HTML by design\n             await _notifier.AddAsync(NotificationType, new LocalizedHtmlString(nameof(NotifyTask), message));\n \n             return Outcomes(\"Done\");"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Workflows/Views/Items/UserTaskEvent.Fields.Design.cshtml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -8,7 +8,7 @@\n @if (Model.Activity.Actions.Any())\n {\n     <span>@T[\"Request any user action of <em>{0}</em>\", string.Join(\", \", Model.Activity.Actions)]</span><br />\n-    <span>@T[\"Required roles: <em>{0}</em>\", Model.Activity.Roles.Any() ? new LocalizedHtmlString(\"RequiredRoles\", string.Join(\", \", Model.Activity.Roles)) : T[\"Any\"]]</span>\n+    <span>@T[\"Required roles: <em>{0}</em>\", Model.Activity.Roles.Any() ? Html.Raw(Html.Encode(string.Join(\", \", Model.Activity.Roles))) : T[\"Any\"]]</span>\n }\n else\n {"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Workflows/Views/Workflow/Details.cshtml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -44,7 +44,7 @@\n                     </div>\n                     <div class=\"col\">\n                         <label>@T[\"Status\"]</label>\n-                        <span>@Model.Workflow.Status.GetLocalizedStatus(T)</span>\n+                        <span>@T.GetLocalizedStatus(Model.Workflow.Status)</span>\n                     </div>\n                     @if (Model.Workflow.Status == WorkflowStatus.Faulted)\n                     {"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Workflows/Views/Workflow/Index.cshtml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -104,7 +104,7 @@\n                                 <span class=\"hint\">@T[\"Created {0}\", (object)(await DisplayAsync(await New.TimeSpan(Utc: entry.Workflow.CreatedUtc)))]</span>\n                                 <div class=\"info\">\n                                     <span class=\"badge badge-@statusCss\">\n-                                        @entry.Workflow.Status.GetLocalizedStatus(T)\n+                                        @T.GetLocalizedStatus(entry.Workflow.Status)\n                                     </span>\n                                 </div>\n                             </div>"
        },
        {
          "filename": "src/OrchardCore/OrchardCore.Workflows.Abstractions/Helpers/ActivityExtensions.cs",
          "status": "modified",
          "additions": 8,
          "deletions": 8,
          "patch": "@@ -8,8 +8,6 @@ namespace OrchardCore.Workflows.Helpers\n {\n     public static class ActivityExtensions\n     {\n-        private static IHtmlLocalizer H;\n-\n         public static bool IsEvent(this IActivity activity)\n         {\n             return activity is IEvent;\n@@ -18,14 +16,16 @@ public static bool IsEvent(this IActivity activity)\n         public static LocalizedHtmlString GetTitleOrDefault(this IActivity activity, Func<LocalizedHtmlString> defaultTitle)\n         {\n             var title = activity.As<ActivityMetadata>().Title;\n-            return !string.IsNullOrEmpty(title) ? new LocalizedHtmlString(title, title) : defaultTitle();\n+\n+            // A string used in LocalizedHtmlString won't be encoded so it needs to be pre-encoded.\n+            // Passing the title as an argument so it uses the HtmlEncoder when rendered\n+            // Another options would be to use new LocalizedHtmlString(Html.Encode(title)) but it's not available in the current context\n+\n+            return !string.IsNullOrEmpty(title) ? new LocalizedHtmlString(nameof(ActivityExtensions.GetTitleOrDefault), \"{0}\", false, title) : defaultTitle();\n         }\n \n-        public static LocalizedHtmlString GetLocalizedStatus(this WorkflowStatus status, IHtmlLocalizer localizer)\n+        public static LocalizedHtmlString GetLocalizedStatus(this IHtmlLocalizer H, WorkflowStatus status)\n         {\n-            // Field for PoExtractor compatibility\n-            H = localizer;\n-\n             return status switch\n             {\n                 WorkflowStatus.Aborted => H[\"Aborted\"],\n@@ -36,7 +36,7 @@ public static LocalizedHtmlString GetLocalizedStatus(this WorkflowStatus status,\n                 WorkflowStatus.Idle => H[\"Idle\"],\n                 WorkflowStatus.Resuming => H[\"Resuming\"],\n                 WorkflowStatus.Starting => H[\"Starting\"],\n-                _ => new LocalizedHtmlString(status.ToString(), status.ToString()),\n+                _ => throw new NotSupportedException(),\n             };\n         }\n     }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 8,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "4cf9052d82220b361b560fae4abacdf7d8af6f0e",
            "date": "2025-01-14T21:05:06Z",
            "author_login": "jbytes1027"
          },
          {
            "sha": "00423068a774965f660f48956e0da027e1978cc1",
            "date": "2025-01-14T20:37:47Z",
            "author_login": "hishamco"
          },
          {
            "sha": "c42af0f5609a903e93fb2ac1b813454b8508827c",
            "date": "2025-01-14T16:07:26Z",
            "author_login": "infofromca"
          },
          {
            "sha": "852eeb1dd0fe87431717409a856fd605236776d2",
            "date": "2025-01-13T15:30:14Z",
            "author_login": "AndreySurkov"
          },
          {
            "sha": "b8570a880c1eecb78f0bc5be6a295d4d9bab6cc9",
            "date": "2025-01-13T15:22:25Z",
            "author_login": "allcontributors[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in NuGet OrchardCore.Application.Cms.Targets prior to 1.2.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-19T18:15:08.083",
    "last_modified": "2024-11-21T06:38:17.080",
    "fix_date": "2022-01-18T19:03:05Z"
  },
  "references": [
    {
      "url": "https://github.com/orchardcms/orchardcore/commit/218f25ddfadb66a54de7a82dffe3ab2e4ab7c4b4",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a82a714a-9b71-475e-bfc3-43326fcaf764",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/orchardcms/orchardcore/commit/218f25ddfadb66a54de7a82dffe3ab2e4ab7c4b4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a82a714a-9b71-475e-bfc3-43326fcaf764",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.043757",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "OrchardCore",
    "owner": "orchardcms",
    "created_at": "2014-11-19T22:29:26Z",
    "updated_at": "2025-01-14T08:07:37Z",
    "pushed_at": "2025-01-14T03:14:48Z",
    "size": 259058,
    "stars": 7521,
    "forks": 2421,
    "open_issues": 959,
    "watchers": 7521,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C#": 9168616,
      "JavaScript": 2538544,
      "HTML": 1798441,
      "CSS": 1435890,
      "SCSS": 228444,
      "Pug": 56076,
      "Liquid": 44352,
      "TypeScript": 41344,
      "PHP": 2484,
      "Dockerfile": 865
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T14:19:20.528633"
  }
}