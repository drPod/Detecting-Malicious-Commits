{
  "cve_id": "CVE-2022-0476",
  "github_data": {
    "repository": "radareorg/radare2",
    "fix_commit": "27fe8031782d3a06c3998eaa94354867864f9f1b",
    "related_commits": [
      "27fe8031782d3a06c3998eaa94354867864f9f1b",
      "27fe8031782d3a06c3998eaa94354867864f9f1b"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "27fe8031782d3a06c3998eaa94354867864f9f1b",
      "commit_date": "2022-02-21T17:01:56Z",
      "author": {
        "login": "radare",
        "type": "User",
        "stats": {
          "total_commits": 16378,
          "average_weekly_commits": 19.61437125748503,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 786
        }
      },
      "commit_message": {
        "title": "Fix DoS in the minidump parser ##crash",
        "length": 98,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 34,
        "additions": 20,
        "deletions": 14
      },
      "files": [
        {
          "filename": "libr/bin/format/mdmp/mdmp.c",
          "status": "modified",
          "additions": 20,
          "deletions": 14,
          "patch": "@@ -369,9 +369,15 @@ static bool r_bin_mdmp_init_hdr(struct r_bin_mdmp_obj *obj) {\n \treturn true;\n }\n \n-static void read_module(RBuffer *b, ut64 addr, struct minidump_module *module) {\n+static struct minidump_module *read_module(RBuffer *b, ut64 addr) {\n \tst64 o_addr = r_buf_seek (b, 0, R_BUF_CUR);\n-\tr_buf_seek (b, addr, R_BUF_SET);\n+\tif (r_buf_seek (b, addr, R_BUF_SET) == -1) {\n+\t\treturn NULL;\n+\t}\n+\tstruct minidump_module *module = R_NEW0 (struct minidump_module);\n+\tif (!module) {\n+\t\treturn NULL;\n+\t}\n \tmodule->base_of_image = r_buf_read_le64 (b);\n \tmodule->size_of_image = r_buf_read_le32 (b);\n \tmodule->check_sum = r_buf_read_le32 (b);\n@@ -397,6 +403,7 @@ static void read_module(RBuffer *b, ut64 addr, struct minidump_module *module) {\n \tmodule->reserved_0 = r_buf_read_le64 (b);\n \tmodule->reserved_1 = r_buf_read_le64 (b);\n \tr_buf_seek (b, o_addr, R_BUF_SET);\n+\treturn module;\n }\n \n static void read_memory64_list(RBuffer *b, ut64 addr, struct minidump_memory64_list *memory64_list) {\n@@ -477,12 +484,11 @@ static bool r_bin_mdmp_init_directory_entry(struct r_bin_mdmp_obj *obj, struct m\n \t\t\t0);\n \n \t\toffset = entry->location.rva + sizeof (module_list);\n-\t\tfor (i = 0; i < module_list.number_of_modules; i++) {\n-\t\t\tstruct minidump_module *module = R_NEW (struct minidump_module);\n+\t\tfor (i = 0; i < module_list.number_of_modules && offset < obj->size; i++) {\n+\t\t\tstruct minidump_module *module = read_module (obj->b, offset);\n \t\t\tif (!module) {\n-\t\t\t\tbreak;\n+\t\t\t\tbreak;\t\n \t\t\t}\n-\t\t\tread_module (obj->b, offset, module);\n \t\t\tr_list_append (obj->streams.modules, module);\n \t\t\toffset += sizeof (*module);\n \t\t}\n@@ -503,7 +509,7 @@ static bool r_bin_mdmp_init_directory_entry(struct r_bin_mdmp_obj *obj, struct m\n \t\t\t0);\n \n \t\toffset = entry->location.rva + sizeof (memory_list);\n-\t\tfor (i = 0; i < memory_list.number_of_memory_ranges; i++) {\n+\t\tfor (i = 0; i < memory_list.number_of_memory_ranges && offset < obj->size; i++) {\n \t\t\tstruct minidump_memory_descriptor *desc = R_NEW (struct minidump_memory_descriptor);\n \t\t\tif (!desc) {\n \t\t\t\tbreak;\n@@ -586,7 +592,7 @@ static bool r_bin_mdmp_init_directory_entry(struct r_bin_mdmp_obj *obj, struct m\n \t\t\t0);\n \n \t\toffset = entry->location.rva + sizeof (thread_ex_list);\n-\t\tfor (i = 0; i < thread_ex_list.number_of_threads; i++) {\n+\t\tfor (i = 0; i < thread_ex_list.number_of_threads && offset < obj->size; i++) {\n \t\t\tstruct minidump_thread_ex *thread = R_NEW (struct minidump_thread_ex);\n \t\t\tif (!thread) {\n \t\t\t\tbreak;\n@@ -613,7 +619,7 @@ static bool r_bin_mdmp_init_directory_entry(struct r_bin_mdmp_obj *obj, struct m\n \n \t\tobj->streams.memories64.base_rva = memory64_list.base_rva;\n \t\toffset = entry->location.rva + sizeof (memory64_list);\n-\t\tfor (i = 0; i < memory64_list.number_of_memory_ranges; i++) {\n+\t\tfor (i = 0; i < memory64_list.number_of_memory_ranges && offset < obj->size; i++) {\n \t\t\tstruct minidump_memory_descriptor64 *desc = R_NEW (struct minidump_memory_descriptor64);\n \t\t\tif (!desc) {\n \t\t\t\tbreak;\n@@ -708,7 +714,7 @@ static bool r_bin_mdmp_init_directory_entry(struct r_bin_mdmp_obj *obj, struct m\n \t\t\t\"SizeOfHeader SizeOfEntry NumberOfEntries\", 0);\n \n \t\toffset = entry->location.rva + sizeof (unloaded_module_list);\n-\t\tfor (i = 0; i < unloaded_module_list.number_of_entries; i++) {\n+\t\tfor (i = 0; i < unloaded_module_list.number_of_entries && offset < obj->size; i++) {\n \t\t\tstruct minidump_unloaded_module *module = R_NEW (struct minidump_unloaded_module);\n \t\t\tif (!module) {\n \t\t\t\tbreak;\n@@ -763,7 +769,7 @@ static bool r_bin_mdmp_init_directory_entry(struct r_bin_mdmp_obj *obj, struct m\n \t\t\t0);\n \n \t\toffset = entry->location.rva + sizeof (memory_info_list);\n-\t\tfor (i = 0; i < memory_info_list.number_of_entries; i++) {\n+\t\tfor (i = 0; i < memory_info_list.number_of_entries && offset < obj->size; i++) {\n \t\t\tstruct minidump_memory_info *info = R_NEW (struct minidump_memory_info);\n \t\t\tif (!info) {\n \t\t\t\tbreak;\n@@ -793,7 +799,7 @@ static bool r_bin_mdmp_init_directory_entry(struct r_bin_mdmp_obj *obj, struct m\n \t\t\t\"SizeOfHeader SizeOfEntry NumberOfEntries\", 0);\n \n \t\toffset = entry->location.rva + sizeof (thread_info_list);\n-\t\tfor (i = 0; i < thread_info_list.number_of_entries; i++) {\n+\t\tfor (i = 0; i < thread_info_list.number_of_entries && offset < obj->size; i++) {\n \t\t\tstruct minidump_thread_info *info = R_NEW (struct minidump_thread_info);\n \t\t\tif (!info) {\n \t\t\t\tbreak;\n@@ -819,7 +825,7 @@ static bool r_bin_mdmp_init_directory_entry(struct r_bin_mdmp_obj *obj, struct m\n \t\t\t\"SizeOfHeader SizeOfEntry NumberOfEntries Reserved\", 0);\n \n \t\toffset = entry->location.rva + sizeof (handle_operation_list);\n-\t\tfor (i = 0; i < handle_operation_list.number_of_entries; i++) {\n+\t\tfor (i = 0; i < handle_operation_list.number_of_entries && offset < obj->size; i++) {\n \t\t\tstruct avrf_handle_operation *op = R_NEW (struct avrf_handle_operation);\n \t\t\tif (!op) {\n \t\t\t\tbreak;\n@@ -849,7 +855,7 @@ static bool r_bin_mdmp_init_directory_entry(struct r_bin_mdmp_obj *obj, struct m\n \t\t\t\"TokenListSize TokenListEntries ListHeaderSize ElementHeaderSize\", 0);\n \n \t\toffset = entry->location.rva + sizeof (token_info_list);\n-\t\tfor (i = 0; i < token_info_list.number_of_entries; i++) {\n+\t\tfor (i = 0; i < token_info_list.number_of_entries && offset < obj->size; i++) {\n \t\t\tstruct minidump_token_info *info = R_NEW (struct minidump_token_info);\n \t\t\tif (!info) {\n \t\t\t\tbreak;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a7952c1e8041ec75e4e97559f0e5a62ed788d34a",
            "date": "2025-01-24T20:15:44Z",
            "author_login": "trufae"
          },
          {
            "sha": "40fe8e885d09148f4ef6d76dbd73b7e829123267",
            "date": "2025-01-24T18:59:45Z",
            "author_login": "radare"
          },
          {
            "sha": "8741d91143a8b3e54df0804142d12d4f95d16afc",
            "date": "2025-01-24T16:34:02Z",
            "author_login": "radare"
          },
          {
            "sha": "be8877140891d1c33721a136d26007a0df5b61db",
            "date": "2025-01-24T16:34:02Z",
            "author_login": "jukuisma"
          },
          {
            "sha": "3704f48fea7e2edc41e51cde95dd009c4c9bd00a",
            "date": "2025-01-24T16:29:42Z",
            "author_login": "jukuisma"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "Denial of Service in GitHub repository radareorg/radare2 prior to 5.6.4.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-23T17:15:21.090",
    "last_modified": "2024-11-21T06:38:43.227",
    "fix_date": "2022-02-21T17:01:56Z"
  },
  "references": [
    {
      "url": "https://github.com/radareorg/radare2/commit/27fe8031782d3a06c3998eaa94354867864f9f1b",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/81ddfbda-6c9f-4b69-83ff-85b15141e35d",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/BZTIMAS53YT66FUS4QHQAFRJOBMUFG6D/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/E6YBRQ3UCFWJVSOYIKPVUDASZ544TFND/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/radareorg/radare2/commit/27fe8031782d3a06c3998eaa94354867864f9f1b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/81ddfbda-6c9f-4b69-83ff-85b15141e35d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/BZTIMAS53YT66FUS4QHQAFRJOBMUFG6D/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/E6YBRQ3UCFWJVSOYIKPVUDASZ544TFND/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.742942",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "radare2",
    "owner": "radareorg",
    "created_at": "2012-07-03T07:42:26Z",
    "updated_at": "2025-01-26T01:36:40Z",
    "pushed_at": "2025-01-24T20:15:44Z",
    "size": 180125,
    "stars": 21051,
    "forks": 3034,
    "open_issues": 875,
    "watchers": 21051,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29151635,
      "Makefile": 261654,
      "Shell": 144962,
      "Meson": 123696,
      "C++": 86180,
      "HTML": 55704,
      "Rebol": 54153,
      "Python": 38146,
      "Roff": 36722,
      "JavaScript": 23584,
      "CSS": 19465,
      "Batchfile": 8970,
      "Perl": 6449,
      "sed": 4448,
      "R": 1960,
      "Rez": 1386,
      "Assembly": 939,
      "Vala": 839,
      "Wren": 460,
      "Gnuplot": 429,
      "C#": 164,
      "Dart": 125,
      "Rascal": 45
    },
    "commit_activity": {
      "total_commits_last_year": 1630,
      "avg_commits_per_week": 31.346153846153847,
      "days_active_last_year": 297
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:35:47.834479"
  }
}