{
  "cve_id": "CVE-2022-0496",
  "github_data": {
    "repository": "openscad/openscad",
    "fix_commit": "00a4692989c4e2f191525f73f24ad8727bacdf41",
    "related_commits": [
      "00a4692989c4e2f191525f73f24ad8727bacdf41",
      "770e3234cbfe66edbc0333f796b46d36a74aa652",
      "00a4692989c4e2f191525f73f24ad8727bacdf41",
      "770e3234cbfe66edbc0333f796b46d36a74aa652"
    ],
    "patch_url": "https://github.com/openscad/openscad/commit/00a4692989c4e2f191525f73f24ad8727bacdf41.patch",
    "fix_commit_details": {
      "sha": "00a4692989c4e2f191525f73f24ad8727bacdf41",
      "commit_date": "2022-02-05T17:38:31Z",
      "author": {
        "login": "t-paul",
        "type": "User",
        "stats": {
          "total_commits": 1951,
          "average_weekly_commits": 2.5109395109395107,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 332
        }
      },
      "commit_message": {
        "title": "CVE-2022-0496 Out-of-bounds memory access in DXF loader.",
        "length": 190,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 27,
        "additions": 23,
        "deletions": 4
      },
      "files": [
        {
          "filename": "src/dxfdata.cc",
          "status": "modified",
          "additions": 23,
          "deletions": 4,
          "patch": "@@ -441,6 +441,11 @@ DxfData::DxfData(double fn, double fs, double fa,\n \t\t\t\tauto lv = grid.data(this->points[lines[idx].idx[j]][0], this->points[lines[idx].idx[j]][1]);\n \t\t\t\tfor (size_t ki = 0; ki < lv.size(); ++ki) {\n \t\t\t\t\tint k = lv.at(ki);\n+                    if (k < 0 || k >= lines.size()) {\n+                        LOG(message_group::Warning,Location::NONE,\"\",\n+                            \"Bad DXF line index in %1$s.\",QuotedString(boostfs_uncomplete(filename, fs::current_path()).generic_string()));\n+                        continue;\n+                    }\n \t\t\t\t\tif (k == idx || lines[k].disabled) continue;\n \t\t\t\t\tgoto next_open_path_j;\n \t\t\t\t}\n@@ -466,13 +471,20 @@ DxfData::DxfData(double fn, double fs, double fa,\n \t\t\tauto lv = grid.data(ref_point[0], ref_point[1]);\n \t\t\tfor (size_t ki = 0; ki < lv.size(); ++ki) {\n \t\t\t\tint k = lv.at(ki);\n+                if (k < 0 || k >= lines.size()) {\n+                    LOG(message_group::Warning,Location::NONE,\"\",\n+                        \"Bad DXF line index in %1$s.\",QuotedString(boostfs_uncomplete(filename, fs::current_path()).generic_string()));\n+                    continue;\n+                }\n \t\t\t\tif (lines[k].disabled) continue;\n-\t\t\t\tif (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[0]][0], this->points[lines[k].idx[0]][1])) {\n+                auto idk0 = lines[k].idx[0];    // make it easier to read and debug\n+                auto idk1 = lines[k].idx[1];\n+\t\t\t\tif (grid.eq(ref_point[0], ref_point[1], this->points[idk0][0], this->points[idk0][1])) {\n \t\t\t\t\tcurrent_line = k;\n \t\t\t\t\tcurrent_point = 0;\n \t\t\t\t\tgoto found_next_line_in_open_path;\n \t\t\t\t}\n-\t\t\t\tif (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {\n+\t\t\t\tif (grid.eq(ref_point[0], ref_point[1], this->points[idk1][0], this->points[idk1][1])) {\n \t\t\t\t\tcurrent_line = k;\n \t\t\t\t\tcurrent_point = 1;\n \t\t\t\t\tgoto found_next_line_in_open_path;\n@@ -501,13 +513,20 @@ DxfData::DxfData(double fn, double fs, double fa,\n \t\t\tauto lv = grid.data(ref_point[0], ref_point[1]);\n \t\t\tfor (size_t ki = 0; ki < lv.size(); ++ki) {\n \t\t\t\tint k = lv.at(ki);\n+                if (k < 0 || k >= lines.size()) {\n+                    LOG(message_group::Warning,Location::NONE,\"\",\n+                        \"Bad DXF line index in %1$s.\",QuotedString(boostfs_uncomplete(filename, fs::current_path()).generic_string()));\n+                    continue;\n+                }\n \t\t\t\tif (lines[k].disabled) continue;\n-\t\t\t\tif (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[0]][0], this->points[lines[k].idx[0]][1])) {\n+                auto idk0 = lines[k].idx[0];    // make it easier to read and debug\n+                auto idk1 = lines[k].idx[1];\n+\t\t\t\tif (grid.eq(ref_point[0], ref_point[1], this->points[idk0][0], this->points[idk0][1])) {\n \t\t\t\t\tcurrent_line = k;\n \t\t\t\t\tcurrent_point = 0;\n \t\t\t\t\tgoto found_next_line_in_closed_path;\n \t\t\t\t}\n-\t\t\t\t\tif (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {\n+                if (grid.eq(ref_point[0], ref_point[1], this->points[idk1][0], this->points[idk1][1])) {\n \t\t\t\t\tcurrent_line = k;\n \t\t\t\t\tcurrent_point = 1;\n \t\t\t\t\tgoto found_next_line_in_closed_path;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0e6f663d74f09036917af07de459dd37286345af",
            "date": "2025-01-13T19:06:49Z",
            "author_login": "t-paul"
          },
          {
            "sha": "d2c5ecac9cf0bb80f05fd60282d31b59d3230e6e",
            "date": "2025-01-13T02:12:18Z",
            "author_login": "t-paul"
          },
          {
            "sha": "3d2d3f20c0577bdcbaafd302c75e755990fae863",
            "date": "2025-01-12T21:02:16Z",
            "author_login": "kintel"
          },
          {
            "sha": "b03ba8c16d592039720d9f9429030378579daf8e",
            "date": "2025-01-12T20:34:48Z",
            "author_login": "t-paul"
          },
          {
            "sha": "d72d3bc41dc2a81522f1fe94354f1ecbff5bc54e",
            "date": "2025-01-12T18:59:22Z",
            "author_login": "t-paul"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-119",
    "description": "A vulnerbiility was found in Openscad, where a DXF-format drawing with particular (not necessarily malformed!) properties may cause an out-of-bounds memory access when imported using import().",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-08-29T15:15:09.597",
    "last_modified": "2024-11-21T06:38:46.770",
    "fix_date": "2022-02-05T17:38:31Z"
  },
  "references": [
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2050695",
      "source": "secalert@redhat.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openscad/openscad/commit/00a4692989c4e2f191525f73f24ad8727bacdf41",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openscad/openscad/commit/770e3234cbfe66edbc0333f796b46d36a74aa652",
      "source": "secalert@redhat.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openscad/openscad/issues/4037",
      "source": "secalert@redhat.com",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://bugzilla.redhat.com/show_bug.cgi?id=2050695",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openscad/openscad/commit/00a4692989c4e2f191525f73f24ad8727bacdf41",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openscad/openscad/commit/770e3234cbfe66edbc0333f796b46d36a74aa652",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/openscad/openscad/issues/4037",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:39.053316",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "openscad",
    "owner": "openscad",
    "created_at": "2010-11-03T20:25:33Z",
    "updated_at": "2025-01-14T11:56:56Z",
    "pushed_at": "2025-01-14T00:22:34Z",
    "size": 76670,
    "stars": 7305,
    "forks": 1240,
    "open_issues": 969,
    "watchers": 7305,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 4491530,
      "C": 1680727,
      "OpenSCAD": 297073,
      "Shell": 203025,
      "CMake": 182080,
      "Python": 98346,
      "POV-Ray SDL": 62616,
      "NSIS": 40501,
      "JavaScript": 37271,
      "HTML": 31808,
      "Yacc": 24566,
      "Lex": 14325,
      "Objective-C++": 7366,
      "CSS": 5120,
      "GLSL": 1458,
      "Makefile": 1370,
      "Batchfile": 359
    },
    "commit_activity": {
      "total_commits_last_year": 411,
      "avg_commits_per_week": 7.903846153846154,
      "days_active_last_year": 166
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T16:27:53.815328"
  }
}