{
  "cve_id": "CVE-2022-0527",
  "github_data": {
    "repository": "chatwoot/chatwoot",
    "fix_commit": "a737f89c473e64f9abdf8ff13a3e64edefa28877",
    "related_commits": [
      "a737f89c473e64f9abdf8ff13a3e64edefa28877",
      "a737f89c473e64f9abdf8ff13a3e64edefa28877"
    ],
    "patch_url": "https://github.com/chatwoot/chatwoot/commit/a737f89c473e64f9abdf8ff13a3e64edefa28877.patch",
    "fix_commit_details": {
      "sha": "a737f89c473e64f9abdf8ff13a3e64edefa28877",
      "commit_date": "2022-02-04T09:08:18Z",
      "author": {
        "login": "muhsin-k",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: Ongoing campaign URL validation (#3890)",
        "length": 44,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 67,
        "additions": 54,
        "deletions": 13
      },
      "files": [
        {
          "filename": "app/controllers/api/v1/accounts/campaigns_controller.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -18,7 +18,7 @@ def destroy\n   def show; end\n \n   def update\n-    @campaign.update(campaign_params)\n+    @campaign.update!(campaign_params)\n   end\n \n   private"
        },
        {
          "filename": "app/models/campaign.rb",
          "status": "modified",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -33,12 +33,14 @@\n #  fk_rails_...  (account_id => accounts.id) ON DELETE => cascade\n #  fk_rails_...  (inbox_id => inboxes.id) ON DELETE => cascade\n #\n+require 'uri'\n class Campaign < ApplicationRecord\n   validates :account_id, presence: true\n   validates :inbox_id, presence: true\n   validates :title, presence: true\n   validates :message, presence: true\n   validate :validate_campaign_inbox\n+  validate :validate_url\n   validate :prevent_completed_campaign_from_update, on: :update\n   belongs_to :account\n   belongs_to :inbox\n@@ -86,6 +88,21 @@ def ensure_correct_campaign_attributes\n     end\n   end\n \n+  def validate_url\n+    return unless trigger_rules['url']\n+\n+    errors.add(:url, 'invalid') if inbox.inbox_type == 'Website' && !url_valid?(trigger_rules['url'])\n+  end\n+\n+  def url_valid?(url)\n+    url = begin\n+      URI.parse(url)\n+    rescue StandardError\n+      false\n+    end\n+    url.is_a?(URI::HTTP) || url.is_a?(URI::HTTPS)\n+  end\n+\n   def prevent_completed_campaign_from_update\n     errors.add :status, 'The campaign is already completed' if !campaign_status_changed? && completed?\n   end"
        },
        {
          "filename": "spec/builders/campaigns/campaign_conversation_builder_spec.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@\n   let(:inbox) { create(:inbox, account: account) }\n   let(:contact) { create(:contact, account: account, identifier: '123') }\n   let(:contact_inbox) { create(:contact_inbox, contact: contact, inbox: inbox) }\n-  let(:campaign) { create(:campaign, inbox: inbox, account: account) }\n+  let(:campaign) { create(:campaign, inbox: inbox, account: account, trigger_rules: { url: 'https://test.com' }) }\n \n   describe '#perform' do\n     it 'creates a conversation with campaign id and message with campaign message' do"
        },
        {
          "filename": "spec/controllers/api/v1/accounts/campaigns_controller_spec.rb",
          "status": "modified",
          "additions": 23,
          "deletions": 4,
          "patch": "@@ -15,7 +15,7 @@\n     context 'when it is an authenticated user' do\n       let(:agent) { create(:user, account: account, role: :agent) }\n       let(:administrator) { create(:user, account: account, role: :administrator) }\n-      let!(:campaign) { create(:campaign, account: account) }\n+      let!(:campaign) { create(:campaign, account: account, trigger_rules: { url: 'https://test.com' }) }\n \n       it 'returns unauthorized for agents' do\n         get \"/api/v1/accounts/#{account.id}/campaigns\",\n@@ -38,7 +38,7 @@\n   end\n \n   describe 'GET /api/v1/accounts/{account.id}/campaigns/:id' do\n-    let(:campaign) { create(:campaign, account: account) }\n+    let(:campaign) { create(:campaign, account: account, trigger_rules: { url: 'https://test.com' }) }\n \n     context 'when it is an unauthenticated user' do\n       it 'returns unauthorized' do\n@@ -107,6 +107,25 @@\n         expect(JSON.parse(response.body, symbolize_names: true)[:title]).to eq('test')\n       end\n \n+      it 'creates a new ongoing campaign' do\n+        post \"/api/v1/accounts/#{account.id}/campaigns\",\n+             params: { inbox_id: inbox.id, title: 'test', message: 'test message', trigger_rules: { url: 'https://test.com' } },\n+             headers: administrator.create_new_auth_token,\n+             as: :json\n+\n+        expect(response).to have_http_status(:success)\n+        expect(JSON.parse(response.body, symbolize_names: true)[:title]).to eq('test')\n+      end\n+\n+      it 'throws error when invalid url provided for ongoing campaign' do\n+        post \"/api/v1/accounts/#{account.id}/campaigns\",\n+             params: { inbox_id: inbox.id, title: 'test', message: 'test message', trigger_rules: { url: 'javascript' } },\n+             headers: administrator.create_new_auth_token,\n+             as: :json\n+\n+        expect(response).to have_http_status(:unprocessable_entity)\n+      end\n+\n       it 'creates a new oneoff campaign' do\n         twilio_sms = create(:channel_twilio_sms, account: account)\n         twilio_inbox = create(:inbox, channel: twilio_sms)\n@@ -133,7 +152,7 @@\n \n   describe 'PATCH /api/v1/accounts/{account.id}/campaigns/:id' do\n     let(:inbox) { create(:inbox, account: account) }\n-    let!(:campaign) { create(:campaign, account: account) }\n+    let!(:campaign) { create(:campaign, account: account, trigger_rules: { url: 'https://test.com' }) }\n \n     context 'when it is an unauthenticated user' do\n       it 'returns unauthorized' do\n@@ -172,7 +191,7 @@\n \n   describe 'DELETE /api/v1/accounts/{account.id}/campaigns/:id' do\n     let(:inbox) { create(:inbox, account: account) }\n-    let!(:campaign) { create(:campaign, account: account) }\n+    let!(:campaign) { create(:campaign, account: account, trigger_rules: { url: 'https://test.com' }) }\n \n     context 'when it is an unauthenticated user' do\n       it 'returns unauthorized' do"
        },
        {
          "filename": "spec/controllers/api/v1/accounts/inboxes_controller_spec.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -133,7 +133,7 @@\n       let(:agent) { create(:user, account: account, role: :agent) }\n       let(:administrator) { create(:user, account: account, role: :administrator) }\n \n-      let!(:campaign) { create(:campaign, account: account, inbox: inbox) }\n+      let!(:campaign) { create(:campaign, account: account, inbox: inbox, trigger_rules: { url: 'https://test.com' }) }\n \n       it 'returns unauthorized for agents' do\n         get \"/api/v1/accounts/#{account.id}/inboxes/#{inbox.id}/campaigns\",\n@@ -145,7 +145,7 @@\n \n       it 'returns all campaigns belonging to the inbox to administrators' do\n         # create a random campaign\n-        create(:campaign, account: account)\n+        create(:campaign, account: account, trigger_rules: { url: 'https://test.com' })\n         get \"/api/v1/accounts/#{account.id}/inboxes/#{inbox.id}/campaigns\",\n             headers: administrator.create_new_auth_token,\n             as: :json"
        },
        {
          "filename": "spec/controllers/api/v1/widget/campaigns_controller_spec.rb",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -3,8 +3,8 @@\n RSpec.describe '/api/v1/widget/campaigns', type: :request do\n   let(:account) { create(:account) }\n   let(:web_widget) { create(:channel_widget, account: account) }\n-  let!(:campaign_1) { create(:campaign, inbox: web_widget.inbox, enabled: true, account: account) }\n-  let!(:campaign_2) { create(:campaign, inbox: web_widget.inbox, enabled: false, account: account) }\n+  let!(:campaign_1) { create(:campaign, inbox: web_widget.inbox, enabled: true, account: account, trigger_rules: { url: 'https://test.com' }) }\n+  let!(:campaign_2) { create(:campaign, inbox: web_widget.inbox, enabled: false, account: account, trigger_rules: { url: 'https://test.com' }) }\n \n   describe 'GET /api/v1/widget/campaigns' do\n     let(:params) { { website_token: web_widget.website_token } }"
        },
        {
          "filename": "spec/listeners/campaign_listener_spec.rb",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@\n   let(:inbox) { create(:inbox, account: account) }\n   let(:contact) { create(:contact, account: account, identifier: '123') }\n   let(:contact_inbox) { create(:contact_inbox, contact: contact, inbox: inbox) }\n-  let(:campaign) { create(:campaign, inbox: inbox, account: account) }\n+  let(:campaign) { create(:campaign, inbox: inbox, account: account, trigger_rules: { url: 'https://test.com' }) }\n \n   let!(:event) do\n     Events::Base.new('campaign_triggered', Time.zone.now,"
        },
        {
          "filename": "spec/models/campaign_spec.rb",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -9,7 +9,10 @@\n   end\n \n   describe '.before_create' do\n-    let(:campaign) { build(:campaign, display_id: nil) }\n+    let(:account) { create(:account) }\n+    let(:website_channel) { create(:channel_widget, account: account) }\n+    let(:website_inbox) { create(:inbox, channel: website_channel, account: account) }\n+    let(:campaign) { build(:campaign, inbox: website_inbox, display_id: nil, trigger_rules: { url: 'https://test.com' }) }\n \n     before do\n       campaign.save\n@@ -37,7 +40,9 @@\n   end\n \n   context 'when a campaign is completed' do\n-    let!(:campaign) { create(:campaign, campaign_status: :completed) }\n+    let(:account) { create(:account) }\n+    let(:web_widget) { create(:channel_widget, account: account) }\n+    let!(:campaign) { create(:campaign, inbox: web_widget.inbox, campaign_status: :completed, trigger_rules: { url: 'https://test.com' }) }\n \n     it 'would prevent further updates' do\n       campaign.title = 'new name'"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 7,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "0c01303db0a3a1f4f79bd6fe40a84c11a5500d0a",
            "date": "2025-01-14T16:30:56Z",
            "author_login": "chatwoot-bot"
          },
          {
            "sha": "91dd92e318fc3e5f4614fce66897a786cd972fe8",
            "date": "2025-01-14T14:15:42Z",
            "author_login": "vishnu-narayanan"
          },
          {
            "sha": "03a938eb6092c988a1fb4e90cb3bfcbc34a26a81",
            "date": "2025-01-14T14:13:56Z",
            "author_login": "vishnu-narayanan"
          },
          {
            "sha": "26187c3ebf399ccec2e041d80a908fa94d8672c1",
            "date": "2025-01-14T10:58:29Z",
            "author_login": "scmmishra"
          },
          {
            "sha": "bffc24d119ac133f937ddce76b14dfc43d6d5ebc",
            "date": "2025-01-14T07:18:30Z",
            "author_login": "iamsivin"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in GitHub repository chatwoot/chatwoot prior to 2.2.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-09T05:15:09.377",
    "last_modified": "2024-11-21T06:38:50.760",
    "fix_date": "2022-02-04T09:08:18Z"
  },
  "references": [
    {
      "url": "https://github.com/chatwoot/chatwoot/commit/a737f89c473e64f9abdf8ff13a3e64edefa28877",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a2f598f6-c142-449a-96f8-b4b2f7a9e228",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/chatwoot/chatwoot/commit/a737f89c473e64f9abdf8ff13a3e64edefa28877",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a2f598f6-c142-449a-96f8-b4b2f7a9e228",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.151207",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "chatwoot",
    "owner": "chatwoot",
    "created_at": "2019-08-14T06:50:51Z",
    "updated_at": "2025-01-14T12:56:36Z",
    "pushed_at": "2025-01-14T11:50:33Z",
    "size": 151937,
    "stars": 21934,
    "forks": 3740,
    "open_issues": 937,
    "watchers": 21934,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "3.x"
    ],
    "languages": {
      "Ruby": 2998525,
      "Vue": 2505452,
      "JavaScript": 2090105,
      "HTML": 162143,
      "SCSS": 105806,
      "Shell": 37442,
      "Liquid": 11120,
      "TypeScript": 5496,
      "Dockerfile": 4503,
      "Makefile": 1114,
      "Procfile": 283
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:00:34.446910"
  }
}