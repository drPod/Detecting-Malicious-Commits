{
  "cve_id": "CVE-2022-0528",
  "github_data": {
    "repository": "transloadit/uppy",
    "fix_commit": "267c34045a1e62c98406d8c31261c604a11e544a",
    "related_commits": [
      "267c34045a1e62c98406d8c31261c604a11e544a",
      "267c34045a1e62c98406d8c31261c604a11e544a"
    ],
    "patch_url": "https://github.com/transloadit/uppy/commit/267c34045a1e62c98406d8c31261c604a11e544a.patch",
    "fix_commit_details": {
      "sha": "267c34045a1e62c98406d8c31261c604a11e544a",
      "commit_date": "2022-02-25T16:22:18Z",
      "author": {
        "login": "mifi",
        "type": "User",
        "stats": {
          "total_commits": 270,
          "average_weekly_commits": 0.5636743215031316,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 110
        }
      },
      "commit_message": {
        "title": "replace debug",
        "length": 245,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 70,
        "additions": 54,
        "deletions": 16
      },
      "files": [
        {
          "filename": ".env.example",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -11,6 +11,9 @@ COMPANION_PORT=3020\n COMPANION_CLIENT_ORIGINS=\n COMPANION_SECRET=development\n \n+# NOTE: Only enable this in development. Enabling it in production is a security risk\n+COMPANION_ALLOW_LOCAL_URLS=true\n+\n COMPANION_DROPBOX_KEY=***\n COMPANION_DROPBOX_SECRET=***\n "
        },
        {
          "filename": "bin/companion.sh",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@ else\n     COMPANION_PORT=3020 \\\n     COMPANION_CLIENT_ORIGINS=\"\" \\\n     COMPANION_SECRET=\"development\" \\\n+    COMPANION_ALLOW_LOCAL_URLS=\"true\" \\\n     nodemon --watch packages/@uppy/companion/src --exec node ./packages/@uppy/companion/src/standalone/start-server.js\n fi\n "
        },
        {
          "filename": "packages/@uppy/companion/src/companion.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -41,7 +41,7 @@ const defaultOptions = {\n       expires: ms('5 minutes') / 1000,\n     },\n   },\n-  debug: true,\n+  allowLocalUrls: false,\n   logClientVersion: true,\n   periodicPingUrls: [],\n   streamingUpload: false,"
        },
        {
          "filename": "packages/@uppy/companion/src/server/controllers/url.js",
          "status": "modified",
          "additions": 10,
          "deletions": 10,
          "patch": "@@ -11,17 +11,17 @@ const logger = require('../logger')\n  * Validates that the download URL is secure\n  *\n  * @param {string} url the url to validate\n- * @param {boolean} debug whether the server is running in debug mode\n+ * @param {boolean} ignoreTld whether to allow local addresses\n  */\n-const validateURL = (url, debug) => {\n+const validateURL = (url, ignoreTld) => {\n   if (!url) {\n     return false\n   }\n \n   const validURLOpts = {\n     protocols: ['http', 'https'],\n     require_protocol: true,\n-    require_tld: !debug,\n+    require_tld: !ignoreTld,\n   }\n   if (!validator.isURL(url, validURLOpts)) {\n     return false\n@@ -83,13 +83,13 @@ const downloadURL = async (url, blockLocalIPs, traceId) => {\n const meta = async (req, res) => {\n   try {\n     logger.debug('URL file import handler running', null, req.id)\n-    const { debug } = req.companion.options\n-    if (!validateURL(req.body.url, debug)) {\n+    const { allowLocalUrls } = req.companion.options\n+    if (!validateURL(req.body.url, allowLocalUrls)) {\n       logger.debug('Invalid request body detected. Exiting url meta handler.', null, req.id)\n       return res.status(400).json({ error: 'Invalid request body' })\n     }\n \n-    const urlMeta = await getURLMeta(req.body.url, !debug)\n+    const urlMeta = await getURLMeta(req.body.url, !allowLocalUrls)\n     return res.json(urlMeta)\n   } catch (err) {\n     logger.error(err, 'controller.url.meta.error', req.id)\n@@ -107,20 +107,20 @@ const meta = async (req, res) => {\n  */\n const get = async (req, res) => {\n   logger.debug('URL file import handler running', null, req.id)\n-  const { debug } = req.companion.options\n-  if (!validateURL(req.body.url, debug)) {\n+  const { allowLocalUrls } = req.companion.options\n+  if (!validateURL(req.body.url, allowLocalUrls)) {\n     logger.debug('Invalid request body detected. Exiting url import handler.', null, req.id)\n     res.status(400).json({ error: 'Invalid request body' })\n     return\n   }\n \n   async function getSize () {\n-    const { size } = await getURLMeta(req.body.url, !debug)\n+    const { size } = await getURLMeta(req.body.url, !allowLocalUrls)\n     return size\n   }\n \n   async function download () {\n-    return downloadURL(req.body.url, !debug, req.id)\n+    return downloadURL(req.body.url, !allowLocalUrls, req.id)\n   }\n \n   function onUnhandledError (err) {"
        },
        {
          "filename": "packages/@uppy/companion/src/server/logger.js",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -112,7 +112,6 @@ exports.error = (msg, tag, traceId, shouldLogStackTrace) => {\n  * @param {string=} traceId a unique id to easily trace logs tied to a request\n  */\n exports.debug = (msg, tag, traceId) => {\n-  // @todo: this function should depend on companion's debug option instead\n   if (process.env.NODE_ENV !== 'production') {\n     // @ts-ignore\n     log(msg, tag, 'debug', traceId, chalk.bold.blue)"
        },
        {
          "filename": "packages/@uppy/companion/src/server/provider/facebook/index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -127,7 +127,7 @@ class Facebook extends Provider {\n           return done(err)\n         }\n \n-        getURLMeta(this._getMediaUrl(body))\n+        getURLMeta(this._getMediaUrl(body), true)\n           .then(({ size }) => done(null, size))\n           .catch((err2) => {\n             logger.error(err2, 'provider.facebook.size.error')"
        },
        {
          "filename": "packages/@uppy/companion/src/server/provider/instagram/graph/index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -118,7 +118,7 @@ class Instagram extends Provider {\n           return done(err)\n         }\n \n-        getURLMeta(body.media_url)\n+        getURLMeta(body.media_url, true)\n           .then(({ size }) => done(null, size))\n           .catch((err2) => {\n             logger.error(err2, 'provider.instagram.size.error')"
        },
        {
          "filename": "packages/@uppy/companion/src/server/provider/unsplash/index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -129,7 +129,7 @@ class Unsplash extends SearchProvider {\n         return\n       }\n \n-      getURLMeta(body.links.download)\n+      getURLMeta(body.links.download, true)\n         .then(({ size }) => done(null, size))\n         .catch((err2) => {\n           logger.error(err2, 'provider.unsplash.size.error')"
        },
        {
          "filename": "packages/@uppy/companion/src/standalone/helper.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -106,7 +106,7 @@ const getConfigFromEnv = () => {\n     uploadUrls: uploadUrls ? uploadUrls.split(',') : null,\n     secret: getSecret('COMPANION_SECRET') || generateSecret(),\n     preAuthSecret: getSecret('COMPANION_PREAUTH_SECRET') || generateSecret(),\n-    debug: process.env.NODE_ENV && process.env.NODE_ENV !== 'production',\n+    allowLocalUrls: process.env.COMPANION_ALLOW_LOCAL_URLS === 'true',\n     // cookieDomain is kind of a hack to support distributed systems. This should be improved but we never got so far.\n     cookieDomain: process.env.COMPANION_COOKIE_DOMAIN,\n     multipleInstances: true,"
        },
        {
          "filename": "packages/@uppy/companion/test/__tests__/companion.js",
          "status": "modified",
          "additions": 28,
          "deletions": 0,
          "patch": "@@ -171,6 +171,34 @@ it('periodically pings', (done) => {\n   })\n }, 1000)\n \n+it('respects allowLocalUrls', async () => {\n+  const server = getServer()\n+  const url = 'http://localhost/'\n+\n+  let res\n+\n+  res = await request(server)\n+    .post('/url/meta')\n+    .send({ url })\n+    .expect(400)\n+\n+  expect(res.body).toEqual({ error: 'Invalid request body' })\n+\n+  res = await request(server)\n+    .post('/url/get')\n+    .send({\n+      fileId: url,\n+      metadata: {},\n+      endpoint: 'http://url.myendpoint.com/files',\n+      protocol: 'tus',\n+      size: null,\n+      url,\n+    })\n+    .expect(400)\n+\n+  expect(res.body).toEqual({ error: 'Invalid request body' })\n+}, 1000)\n+\n afterAll(() => {\n   nock.cleanAll()\n   nock.restore()"
        },
        {
          "filename": "packages/@uppy/companion/test/mockserver.js",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -11,6 +11,7 @@ const defaultEnv = {\n   COMPANION_HIDE_WELCOME: 'false',\n \n   COMPANION_STREAMING_UPLOAD: 'true',\n+  COMPANION_ALLOW_LOCAL_URLS : 'false',\n \n   COMPANION_PROTOCOL: 'http',\n   COMPANION_DATADIR: './test/output',"
        },
        {
          "filename": "website/src/docs/companion.md",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -246,6 +246,9 @@ export COMPANION_UPLOAD_URLS=\"http://tusd.tusdemo.net/files/,https://tusd.tusdem\n # corresponds to the streamingUpload option\n export COMPANION_STREAMING_UPLOAD=true\n \n+# corresponds to the allowLocalUrls option\n+export COMPANION_ALLOW_LOCAL_URLS=false\n+\n # corresponds to the maxFileSize option\n export COMPANION_MAX_FILE_SIZE=\"100000000\"\n \n@@ -309,6 +312,7 @@ const options = {\n   debug: true,\n   metrics: false,\n   streamingUpload: true,\n+  allowLocalUrls: false,\n   maxFileSize: 100000000,\n   periodicPingUrls: [],\n   periodicPingInterval: 60000,\n@@ -359,6 +363,8 @@ const options = {\n \n 18. **periodicPingStaticPayload(optional)** - A `JSON.stringify`-able JavaScript Object that will be sent as part of the JSON body in the period ping requests.\n \n+19. **allowLocalUrls(optional)** - A boolean flag to tell Companion whether to allow requesting local URLs. Note: Only enable this in development. **Enabling it in production is a security risk.**\n+\n ### Provider Redirect URIs\n \n When generating your provider API keys on their corresponding developer platforms (e.g [Google Developer Console](https://console.developers.google.com/)), you\u2019d need to provide a `redirect URI` for the OAuth authorization process. In general the redirect URI for each provider takes the format:"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 12,
        "max_directory_depth": 8
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "16b1670addc3f8a55214d9b2e12731bdb2528486",
            "date": "2025-01-14T12:52:32Z",
            "author_login": "Murderlon"
          },
          {
            "sha": "4d7448a9070e3d1f0f42d3b42c76e5cc4c5f1f6e",
            "date": "2025-01-14T12:51:21Z",
            "author_login": "Murderlon"
          },
          {
            "sha": "a2f1b0c14f8e2a7357d52bbe426312ed800d372a",
            "date": "2025-01-13T12:47:05Z",
            "author_login": "Murderlon"
          },
          {
            "sha": "f2932192fe43e1c4ab5beeffd3fbb03177c68a71",
            "date": "2025-01-13T10:13:54Z",
            "author_login": "Murderlon"
          },
          {
            "sha": "3832d685c73ee52a9d1b4970e8f8318c15de5e85",
            "date": "2025-01-13T09:50:47Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-918",
    "description": "Server-Side Request Forgery (SSRF) in GitHub repository transloadit/uppy prior to 3.3.1.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-03T07:15:06.973",
    "last_modified": "2024-11-21T06:38:50.880",
    "fix_date": "2022-02-25T16:22:18Z"
  },
  "references": [
    {
      "url": "https://github.com/transloadit/uppy/commit/267c34045a1e62c98406d8c31261c604a11e544a",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8b060cc3-2420-468e-8293-b9216620175b",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/transloadit/uppy/commit/267c34045a1e62c98406d8c31261c604a11e544a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8b060cc3-2420-468e-8293-b9216620175b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.772446",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "uppy",
    "owner": "transloadit",
    "created_at": "2015-11-16T12:32:33Z",
    "updated_at": "2025-01-14T12:52:39Z",
    "pushed_at": "2025-01-14T12:53:47Z",
    "size": 404253,
    "stars": 29375,
    "forks": 2016,
    "open_issues": 159,
    "watchers": 29375,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 1465870,
      "JavaScript": 454241,
      "SCSS": 99458,
      "Svelte": 5791,
      "HTML": 5199,
      "Shell": 5146,
      "Makefile": 2843,
      "Dockerfile": 1107,
      "Vue": 382
    },
    "commit_activity": {
      "total_commits_last_year": 648,
      "avg_commits_per_week": 12.461538461538462,
      "days_active_last_year": 141
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:46:06.450691"
  }
}