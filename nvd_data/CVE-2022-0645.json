{
  "cve_id": "CVE-2022-0645",
  "github_data": {
    "repository": "posthog/posthog",
    "fix_commit": "859d8ed9ac7c5026db09714a26c85c1458abb038",
    "related_commits": [
      "859d8ed9ac7c5026db09714a26c85c1458abb038",
      "859d8ed9ac7c5026db09714a26c85c1458abb038"
    ],
    "patch_url": "https://github.com/posthog/posthog/commit/859d8ed9ac7c5026db09714a26c85c1458abb038.patch",
    "fix_commit_details": {
      "sha": "859d8ed9ac7c5026db09714a26c85c1458abb038",
      "commit_date": "2022-03-29T13:29:57Z",
      "author": {
        "login": "mariusandra",
        "type": "User",
        "stats": {
          "total_commits": 1969,
          "average_weekly_commits": 7.5440613026819925,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 217
        }
      },
      "commit_message": {
        "title": "fix(toolbar): only redirect to hosts in app_urls (#9268)",
        "length": 132,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 48,
        "additions": 35,
        "deletions": 13
      },
      "files": [
        {
          "filename": "posthog/api/decide.py",
          "status": "modified",
          "additions": 17,
          "deletions": 10,
          "patch": "@@ -20,23 +20,30 @@\n \n \n def on_permitted_domain(team: Team, request: HttpRequest) -> bool:\n+    origin = parse_domain(request.headers.get(\"Origin\"))\n+    referer = parse_domain(request.headers.get(\"Referer\"))\n+    return hostname_in_app_urls(team, origin) or hostname_in_app_urls(team, referer)\n+\n+\n+def hostname_in_app_urls(team: Team, hostname: Optional[str]) -> bool:\n+    if not hostname:\n+        return False\n+\n     permitted_domains = [\"127.0.0.1\", \"localhost\"]\n \n     for url in team.app_urls:\n-        hostname = parse_domain(url)\n-        if hostname:\n-            permitted_domains.append(hostname)\n+        host = parse_domain(url)\n+        if host:\n+            permitted_domains.append(host)\n \n-    origin = parse_domain(request.headers.get(\"Origin\"))\n-    referer = parse_domain(request.headers.get(\"Referer\"))\n     for permitted_domain in permitted_domains:\n         if \"*\" in permitted_domain:\n-            pattern = \"^{}$\".format(permitted_domain.replace(\".\", \"\\\\.\").replace(\"*\", \"(.*)\"))\n-            if (origin and re.search(pattern, origin)) or (referer and re.search(pattern, referer)):\n-                return True\n-        else:\n-            if permitted_domain == origin or permitted_domain == referer:\n+            pattern = \"^{}$\".format(re.escape(permitted_domain).replace(\"\\\\*\", \"(.*)\"))\n+            if re.search(pattern, hostname):\n                 return True\n+        elif permitted_domain == hostname:\n+            return True\n+\n     return False\n \n "
        },
        {
          "filename": "posthog/test/test_urls.py",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -56,6 +56,15 @@ def test_unauthenticated_routes_get_loaded_on_the_frontend(self):\n         self.assertEqual(response.status_code, status.HTTP_200_OK)\n \n     def test_authorize_and_redirect_domain(self):\n+        self.team.app_urls = [\"https://domain.com\", \"https://not.com\"]\n+        self.team.save()\n+\n+        response = self.client.get(\n+            \"/authorize_and_redirect/?redirect=https://not-permitted.com\", HTTP_REFERER=\"https://not-permitted.com\"\n+        )\n+        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)\n+        self.assertTrue(\"Can only redirect to a permitted domain.\" in str(response.content))\n+\n         response = self.client.get(\n             \"/authorize_and_redirect/?redirect=https://domain.com\", HTTP_REFERER=\"https://not.com\"\n         )"
        },
        {
          "filename": "posthog/urls.py",
          "status": "modified",
          "additions": 9,
          "deletions": 3,
          "patch": "@@ -1,8 +1,8 @@\n-from typing import Any, Callable, List, Optional\n+from typing import Any, Callable, List, Optional, cast\n from urllib.parse import urlparse\n \n from django.conf import settings\n-from django.http import HttpResponse\n+from django.http import HttpRequest, HttpResponse\n from django.urls import URLPattern, include, path, re_path\n from django.views.decorators import csrf\n from django.views.decorators.csrf import csrf_exempt\n@@ -21,7 +21,9 @@\n     signup,\n     user,\n )\n+from posthog.api.decide import hostname_in_app_urls\n from posthog.demo import demo\n+from posthog.models import User\n \n from .utils import render_template\n from .views import health, login_required, preflight_check, robots_txt, security_txt, sso_login, stats\n@@ -50,15 +52,19 @@ def home(request, *args, **kwargs):\n     return render_template(\"index.html\", request)\n \n \n-def authorize_and_redirect(request):\n+def authorize_and_redirect(request: HttpRequest) -> HttpResponse:\n     if not request.GET.get(\"redirect\"):\n         return HttpResponse(\"You need to pass a url to ?redirect=\", status=401)\n     if not request.META.get(\"HTTP_REFERER\"):\n         return HttpResponse('You need to make a request that includes the \"Referer\" header.', status=400)\n \n+    current_team = cast(User, request.user).team\n     referer_url = urlparse(request.META[\"HTTP_REFERER\"])\n     redirect_url = urlparse(request.GET[\"redirect\"])\n \n+    if not current_team or not hostname_in_app_urls(current_team, redirect_url.hostname):\n+        return HttpResponse(f\"Can only redirect to a permitted domain.\", status=400)\n+\n     if referer_url.hostname != redirect_url.hostname:\n         return HttpResponse(f\"Can only redirect to the same domain as the referer: {referer_url.hostname}\", status=400)\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d04b6efe2374a42e18dfba87d26d48732978d315",
            "date": "2025-01-14T22:37:45Z",
            "author_login": "zlwaterfield"
          },
          {
            "sha": "bbd7e1f4c5bf01a79ca85f5751ee97aedd1fd799",
            "date": "2025-01-14T22:03:53Z",
            "author_login": "fuziontech"
          },
          {
            "sha": "cb7547d0218310020e1d540762dde18284ff1126",
            "date": "2025-01-14T19:46:44Z",
            "author_login": "phixMe"
          },
          {
            "sha": "2881a1ca2e9b58f676e95c2b710cd9b1341beae2",
            "date": "2025-01-14T19:43:32Z",
            "author_login": "posthog-bot"
          },
          {
            "sha": "54fd105db64588f6730df06b4793ede268f4b705",
            "date": "2025-01-14T18:20:05Z",
            "author_login": "lucasheriques"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-601",
    "description": "Open redirect vulnerability via endpoint authorize_and_redirect/?redirect= in GitHub repository posthog/posthog prior to 1.34.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-04-19T12:15:15.943",
    "last_modified": "2024-11-21T06:39:06.017",
    "fix_date": "2022-03-29T13:29:57Z"
  },
  "references": [
    {
      "url": "https://github.com/posthog/posthog/commit/859d8ed9ac7c5026db09714a26c85c1458abb038",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c13258a2-30e3-4261-9a3b-2f39c49a8bd6",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/posthog/posthog/commit/859d8ed9ac7c5026db09714a26c85c1458abb038",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/c13258a2-30e3-4261-9a3b-2f39c49a8bd6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:04.393698",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "posthog",
    "owner": "posthog",
    "created_at": "2020-01-23T22:46:58Z",
    "updated_at": "2025-01-14T22:37:49Z",
    "pushed_at": "2025-01-14T22:37:47Z",
    "size": 1482496,
    "stars": 23200,
    "forks": 1431,
    "open_issues": 1656,
    "watchers": 23200,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 20117034,
      "TypeScript": 16958628,
      "Rust": 1284396,
      "C++": 664465,
      "JavaScript": 288907,
      "SCSS": 283999,
      "HTML": 98890,
      "Shell": 81804,
      "Go": 37960,
      "Perl": 35898,
      "MDX": 29788,
      "ANTLR": 23258,
      "Dockerfile": 13228,
      "PLpgSQL": 9521,
      "EJS": 4605,
      "Smarty": 1517,
      "C": 285
    },
    "commit_activity": {
      "total_commits_last_year": 6931,
      "avg_commits_per_week": 133.28846153846155,
      "days_active_last_year": 302
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T22:45:23.648838"
  }
}