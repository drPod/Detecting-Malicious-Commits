{
  "cve_id": "CVE-2022-0664",
  "github_data": {
    "repository": "gravitl/netmaker",
    "fix_commit": "9bee12642986cb9534e268447b70e6f0f03c59cf",
    "related_commits": [
      "9bee12642986cb9534e268447b70e6f0f03c59cf",
      "9bee12642986cb9534e268447b70e6f0f03c59cf"
    ],
    "patch_url": "https://github.com/gravitl/netmaker/commit/9bee12642986cb9534e268447b70e6f0f03c59cf.patch",
    "fix_commit_details": {
      "sha": "9bee12642986cb9534e268447b70e6f0f03c59cf",
      "commit_date": "2022-02-16T02:50:47Z",
      "author": {
        "login": "0xdcarns",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "hotfix 2",
        "length": 8,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 43,
        "additions": 20,
        "deletions": 23
      },
      "files": [
        {
          "filename": "logic/jwts.go",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -17,7 +17,11 @@ var jwtSecretKey []byte\n func SetJWTSecret() {\n \tcurrentSecret, jwtErr := FetchJWTSecret()\n \tif jwtErr != nil {\n-\t\tjwtSecretKey = []byte(RandomString(64)) // 512 bit random password\n+\t\tnewValue, err := GenerateCryptoString(64)\n+\t\tif err != nil {\n+\t\t\tlogger.FatalLog(\"something went wrong when generating JWT signature\")\n+\t\t}\n+\t\tjwtSecretKey = []byte(newValue) // 512 bit random password\n \t\tif err := StoreJWTSecret(string(jwtSecretKey)); err != nil {\n \t\t\tlogger.FatalLog(\"something went wrong when configuring JWT authentication\")\n \t\t}"
        },
        {
          "filename": "logic/util.go",
          "status": "modified",
          "additions": 15,
          "deletions": 22,
          "patch": "@@ -2,9 +2,11 @@\n package logic\n \n import (\n+\tcrand \"crypto/rand\"\n \t\"encoding/base64\"\n \t\"encoding/json\"\n \t\"fmt\"\n+\t\"math/big\"\n \t\"math/rand\"\n \t\"net\"\n \t\"os\"\n@@ -85,29 +87,20 @@ func SetNetworkNodesLastModified(networkName string) error {\n \treturn nil\n }\n \n-// // GetNode - fetches a node from database\n-// func GetNode(macaddress string, network string) (models.Node, error) {\n-// \tvar node models.Node\n-\n-// \tkey, err := GetRecordKey(macaddress, network)\n-// \tif err != nil {\n-// \t\treturn node, err\n-// \t}\n-// \tdata, err := database.FetchRecord(database.NODES_TABLE_NAME, key)\n-// \tif err != nil {\n-// \t\tif data == \"\" {\n-// \t\t\tdata, _ = database.FetchRecord(database.DELETED_NODES_TABLE_NAME, key)\n-// \t\t\terr = json.Unmarshal([]byte(data), &node)\n-// \t\t}\n-// \t\treturn node, err\n-// \t}\n-// \tif err = json.Unmarshal([]byte(data), &node); err != nil {\n-// \t\treturn node, err\n-// \t}\n-// \tSetNodeDefaults(&node)\n+// GenerateCryptoString - generates random string of n length\n+func GenerateCryptoString(n int) (string, error) {\n+\tconst chars = \"123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-\"\n+\tret := make([]byte, n)\n+\tfor i := range ret {\n+\t\tnum, err := crand.Int(crand.Reader, big.NewInt(int64(len(chars))))\n+\t\tif err != nil {\n+\t\t\treturn \"\", err\n+\t\t}\n+\t\tret[i] = chars[num.Int64()]\n+\t}\n \n-// \treturn node, err\n-// }\n+\treturn string(ret), nil\n+}\n \n // DeleteNodeByID - deletes a node from database or moves into delete nodes table\n func DeleteNodeByID(node *models.Node, exterminate bool) error {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "bfaac66a5df82c483eb7d55e16a3988a7d574d6b",
            "date": "2025-01-14T05:09:20Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "81f8f3ee7be89c3a2bd2be6f5a8b8c04bd57e0d4",
            "date": "2025-01-10T11:26:00Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "5ae74739069debc9e8b500239a4269c960c38ec5",
            "date": "2025-01-10T07:51:47Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "26300dc9ed2ae5790253141ec884b104ef7c637b",
            "date": "2025-01-10T07:51:14Z",
            "author_login": "abhishek9686"
          },
          {
            "sha": "d47be71f3388c2792ae708531177cb2362ea326f",
            "date": "2025-01-10T07:50:37Z",
            "author_login": "abhishek9686"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-321",
    "description": "Use of Hard-coded Cryptographic Key in Go github.com/gravitl/netmaker prior to 0.8.5,0.9.4,0.10.0,0.10.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-18T14:15:07.987",
    "last_modified": "2024-11-21T06:39:08.263",
    "fix_date": "2022-02-16T02:50:47Z"
  },
  "references": [
    {
      "url": "https://github.com/gravitl/netmaker/commit/9bee12642986cb9534e268447b70e6f0f03c59cf",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/29898a42-fd4f-4b5b-a8e3-ab573cb87eac",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gravitl/netmaker/commit/9bee12642986cb9534e268447b70e6f0f03c59cf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/29898a42-fd4f-4b5b-a8e3-ab573cb87eac",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.729278",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "netmaker",
    "owner": "gravitl",
    "created_at": "2021-03-25T15:33:08Z",
    "updated_at": "2025-01-14T07:58:58Z",
    "pushed_at": "2025-01-14T10:13:45Z",
    "size": 276029,
    "stars": 9655,
    "forks": 555,
    "open_issues": 177,
    "watchers": 9655,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 1060295,
      "Shell": 83822,
      "Dockerfile": 441
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:50:17.648713"
  }
}