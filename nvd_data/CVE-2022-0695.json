{
  "cve_id": "CVE-2022-0695",
  "github_data": {
    "repository": "radareorg/radare2",
    "fix_commit": "634b886e84a5c568d243e744becc6b3223e089cf",
    "related_commits": [
      "634b886e84a5c568d243e744becc6b3223e089cf",
      "634b886e84a5c568d243e744becc6b3223e089cf"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "634b886e84a5c568d243e744becc6b3223e089cf",
      "commit_date": "2022-02-23T21:54:54Z",
      "author": {
        "login": "radare",
        "type": "User",
        "stats": {
          "total_commits": 16378,
          "average_weekly_commits": 19.61437125748503,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 786
        }
      },
      "commit_message": {
        "title": "Fix DoS in PE/QNX/DYLDCACHE/PSX parsers ##crash",
        "length": 97,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 44,
        "additions": 20,
        "deletions": 24
      },
      "files": [
        {
          "filename": "libr/bin/format/pe/pe.c",
          "status": "modified",
          "additions": 8,
          "deletions": 10,
          "patch": "@@ -1,4 +1,4 @@\n-/* radare - LGPL - Copyright 2008-2021 nibble, pancake, inisider */\n+/* radare - LGPL - Copyright 2008-2022 nibble, pancake, inisider */\n \n #include <stdio.h>\n #include <stdlib.h>\n@@ -278,15 +278,13 @@ struct r_bin_pe_addr_t *PE_(check_msvcseh)(RBinPEObj *pe) {\n }\n \n struct r_bin_pe_addr_t *PE_(check_mingw)(RBinPEObj *pe) {\n-\tstruct r_bin_pe_addr_t* entry;\n \tbool sw = false;\n-\tut8 b[1024];\n+\tut8 b[1024] = {0};\n \tsize_t n = 0;\n \tif (!pe || !pe->b) {\n \t\treturn 0LL;\n \t}\n-\tentry = PE_(r_bin_pe_get_entrypoint) (pe);\n-\tZERO_FILL (b);\n+\tstruct r_bin_pe_addr_t* entry = PE_(r_bin_pe_get_entrypoint) (pe);\n \tif (r_buf_read_at (pe->b, entry->paddr, b, sizeof (b)) < 0) {\n \t\tpe_printf (\"Warning: Cannot read entry at 0x%08\"PFMT64x \"\\n\", entry->paddr);\n \t\tfree (entry);\n@@ -339,11 +337,11 @@ struct r_bin_pe_addr_t *PE_(check_unknow)(RBinPEObj *pe) {\n \tif (!pe || !pe->b) {\n \t\treturn 0LL;\n \t}\n-\tut8 b[512];\n+\tut8 b[512] = {0};\n \tZERO_FILL (b);\n \tentry = PE_ (r_bin_pe_get_entrypoint) (pe);\n \t// option2: /x 8bff558bec83ec20\n-\tif (r_buf_read_at (pe->b, entry->paddr, b, 512) < 1) {\n+\tif (r_buf_read_at (pe->b, entry->paddr, b, sizeof (b)) != sizeof (b)) {\n \t\tpe_printf (\"Warning: Cannot read entry at 0x%08\"PFMT64x\"\\n\", entry->paddr);\n \t\tfree (entry);\n \t\treturn NULL;\n@@ -537,7 +535,8 @@ static int bin_pe_parse_imports(RBinPEObj* pe,\n \t\t\t\tif (len < 1) {\n \t\t\t\t\tpe_printf (\"Warning: read (import name)\\n\");\n \t\t\t\t\tgoto error;\n-\t\t\t\t} else if (!*name) {\n+\t\t\t\t}\n+\t\t\t\tif (!*name) {\n \t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\tname[PE_NAME_LENGTH] = '\\0';\n@@ -1258,7 +1257,6 @@ static bool bin_pe_init_metadata_hdr(RBinPEObj* pe) {\n \t// read the header after the string\n \trr = r_buf_fread_at (pe->b, metadata_directory + 16 + metadata->VersionStringLength,\n \t\t(ut8*) (&metadata->Flags), pe->big_endian? \"2S\": \"2s\", 1);\n-\n \tif (rr < 1) {\n \t\tgoto fail;\n \t}\n@@ -1820,7 +1818,7 @@ static Var* Pe_r_bin_pe_parse_var(RBinPEObj* pe, PE_DWord* curAddr) {\n \t\tfree_Var (var);\n \t\treturn NULL;\n \t}\n-\tif (r_buf_read_at (pe->b, *curAddr, (ut8*) var->szKey, TRANSLATION_UTF_16_LEN) < 1) {\n+\tif (r_buf_read_at (pe->b, *curAddr, (ut8*) var->szKey, TRANSLATION_UTF_16_LEN) != TRANSLATION_UTF_16_LEN) {\n \t\tpe_printf (\"Warning: read (Var szKey)\\n\");\n \t\tfree_Var (var);\n \t\treturn NULL;"
        },
        {
          "filename": "libr/bin/p/bin_dyldcache.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -587,7 +587,7 @@ static ut64 estimate_slide(RBinFile *bf, RDyldCache *cache, ut64 value_mask, ut6\n \t\tint n_classes = classlist_sample_size / 8;\n \t\tut64 sect_offset = sections[classlist_idx].offset + bin->hdr_offset;\n \n-\t\tif (r_buf_fread_at (cache->buf, sect_offset, (ut8*) classlist, \"l\", n_classes) < classlist_sample_size) {\n+\t\tif (r_buf_fread_at (cache->buf, sect_offset, (ut8*) classlist, \"l\", n_classes) != classlist_sample_size) {\n \t\t\tgoto next_bin;\n \t\t}\n "
        },
        {
          "filename": "libr/bin/p/bin_psxexe.c",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -57,7 +57,7 @@ static RList* sections(RBinFile* bf) {\n \t\treturn NULL;\n \t}\n \n-\tif (r_buf_fread_at (bf->buf, 0, (ut8*)&psxheader, \"8c17i\", 1) < sizeof (psxexe_header)) {\n+\tif (r_buf_fread_at (bf->buf, 0, (ut8*)&psxheader, \"8c17i\", 1) != sizeof (psxexe_header)) {\n \t\teprintf (\"Truncated Header\\n\");\n \t\tfree (sect);\n \t\tr_list_free (ret);\n@@ -93,7 +93,7 @@ static RList* entries(RBinFile* bf) {\n \t\treturn NULL;\n \t}\n \n-\tif (r_buf_fread_at (bf->buf, 0, (ut8*)&psxheader, \"8c17i\", 1) < sizeof (psxexe_header)) {\n+\tif (r_buf_fread_at (bf->buf, 0, (ut8*)&psxheader, \"8c17i\", 1) != sizeof (psxexe_header)) {\n \t\teprintf (\"PSXEXE Header truncated\\n\");\n \t\tr_list_free (ret);\n \t\tfree (addr);"
        },
        {
          "filename": "libr/bin/p/bin_qnx.c",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -7,7 +7,7 @@ static int lmf_header_load(lmf_header *lmfh, RBuffer *buf, Sdb *db) {\n \tif (r_buf_size (buf) < sizeof (lmf_header)) {\n \t\treturn false;\n \t}\n-\tif (r_buf_fread_at (buf, QNX_HEADER_ADDR, (ut8 *) lmfh, \"iiiiiiiicccciiiicc\", 1) < QNX_HDR_SIZE) {\n+\tif (r_buf_fread_at (buf, QNX_HEADER_ADDR, (ut8 *) lmfh, \"iiiiiiiicccciiiicc\", 1) != QNX_HDR_SIZE) {\n \t\treturn false;\n \t}\n \tr_strf_buffer (32);\n@@ -64,15 +64,15 @@ static bool load_buffer(RBinFile *bf, void **bin_obj, RBuffer *buf, ut64 loadadd\n \t\tgoto beach;\n \t}\n \t// Read the first record\n-\tif (r_buf_fread_at (bf->buf, 0, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {\n+\tif (r_buf_fread_at (bf->buf, 0, (ut8 *)&lrec, \"ccss\", 1) != QNX_RECORD_SIZE) {\n \t\tgoto beach;\n \t}\n \t// Load the header\n \tlmf_header_load (&qo->lmfh, bf->buf, qo->kv);\n \toffset += lrec.data_nbytes;\n \n \tfor (;;) {\n-\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lrec, \"ccss\", 1) < QNX_RECORD_SIZE) {\n+\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lrec, \"ccss\", 1) != QNX_RECORD_SIZE) {\n \t\t\tgoto beach;\n \t\t}\n \t\toffset += sizeof (lmf_record);\n@@ -84,7 +84,7 @@ static bool load_buffer(RBinFile *bf, void **bin_obj, RBuffer *buf, ut64 loadadd\n \t\t\tif (!ptr) {\n \t\t\t\tgoto beach;\n \t\t\t}\n-\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lres, \"ssss\", 1) < sizeof (lmf_resource)) {\n+\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&lres, \"ssss\", 1) != sizeof (lmf_resource)) {\n \t\t\t\tgoto beach;\n \t\t\t}\n \t\t\tptr->name = strdup (\"LMF_RESOURCE\");\n@@ -95,7 +95,7 @@ static bool load_buffer(RBinFile *bf, void **bin_obj, RBuffer *buf, ut64 loadadd\n \t\t \tr_list_append (sections, ptr);\n \t\t} else if (lrec.rec_type == LMF_LOAD_REC) {\n \t\t\tRBinSection *ptr = R_NEW0 (RBinSection);\n-\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {\n+\t\t\tif (r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {\n \t\t\t\tgoto beach;\n \t\t\t}\n \t\t\tif (!ptr) {\n@@ -110,15 +110,15 @@ static bool load_buffer(RBinFile *bf, void **bin_obj, RBuffer *buf, ut64 loadadd\n \t\t \tr_list_append (sections, ptr);\n \t\t} else if (lrec.rec_type == LMF_FIXUP_REC) {\n \t\t\tRBinReloc *ptr = R_NEW0 (RBinReloc);\n-\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {\n+\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {\n \t\t\t\tgoto beach;\n \t\t\t}\n \t\t\tptr->vaddr = ptr->paddr = ldata.offset;\n \t\t\tptr->type = 'f'; // \"LMF_FIXUP\";\n \t\t\tr_list_append (fixups, ptr);\n \t\t} else if (lrec.rec_type == LMF_8087_FIXUP_REC) {\n \t\t\tRBinReloc *ptr = R_NEW0 (RBinReloc);\n-\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) < sizeof (lmf_data)) {\n+\t\t\tif (!ptr || r_buf_fread_at (bf->buf, offset, (ut8 *)&ldata, \"si\", 1) != sizeof (lmf_data)) {\n \t\t\t\tgoto beach;\n \t\t\t}\n \t\t\tptr->vaddr = ptr->paddr = ldata.offset;"
        },
        {
          "filename": "libr/util/buf.c",
          "status": "modified",
          "additions": 2,
          "deletions": 4,
          "patch": "@@ -516,10 +516,9 @@ static st64 buf_format(RBuffer *dst, RBuffer *src, const char *fmt, int n) {\n \t\t\t\tut32 d3;\n \t\t\t\tut64 d4;\n \t\t\t\tst64 r = r_buf_read (src, tmp, tsize);\n-\t\t\t\tif (r < tsize) {\n+\t\t\t\tif (r != tsize) {\n \t\t\t\t\treturn -1;\n \t\t\t\t}\n-\n \t\t\t\tswitch (tsize) {\n \t\t\t\tcase 1:\n \t\t\t\t\td1 = r_read_ble8 (tmp);\n@@ -566,7 +565,7 @@ R_API st64 r_buf_fread_at(RBuffer *b, ut64 addr, ut8 *buf, const char *fmt, int\n \t\treturn r;\n \t}\n \tr = r_buf_fread (b, buf, fmt, n);\n-\tr_buf_seek (b, o_addr, R_BUF_SET);\n+\t(void)r_buf_seek (b, o_addr, R_BUF_SET);\n \treturn r;\n }\n \n@@ -598,7 +597,6 @@ R_API st64 r_buf_read_at(RBuffer *b, ut64 addr, ut8 *buf, ut64 len) {\n \tif (r < 0) {\n \t\treturn r;\n \t}\n-\n \tr = r_buf_read (b, buf, len);\n \tr_buf_seek (b, o_addr, R_BUF_SET);\n \treturn r;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a7952c1e8041ec75e4e97559f0e5a62ed788d34a",
            "date": "2025-01-24T20:15:44Z",
            "author_login": "trufae"
          },
          {
            "sha": "40fe8e885d09148f4ef6d76dbd73b7e829123267",
            "date": "2025-01-24T18:59:45Z",
            "author_login": "radare"
          },
          {
            "sha": "8741d91143a8b3e54df0804142d12d4f95d16afc",
            "date": "2025-01-24T16:34:02Z",
            "author_login": "radare"
          },
          {
            "sha": "be8877140891d1c33721a136d26007a0df5b61db",
            "date": "2025-01-24T16:34:02Z",
            "author_login": "jukuisma"
          },
          {
            "sha": "3704f48fea7e2edc41e51cde95dd009c4c9bd00a",
            "date": "2025-01-24T16:29:42Z",
            "author_login": "jukuisma"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-400",
    "description": "Denial of Service in GitHub repository radareorg/radare2 prior to 5.6.4.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-24T13:15:07.803",
    "last_modified": "2024-11-21T06:39:12.293",
    "fix_date": "2022-02-23T21:54:54Z"
  },
  "references": [
    {
      "url": "https://github.com/radareorg/radare2/commit/634b886e84a5c568d243e744becc6b3223e089cf",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/bdbddc0e-fb06-4211-a90b-7cbedcee2bea",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/BZTIMAS53YT66FUS4QHQAFRJOBMUFG6D/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/E6YBRQ3UCFWJVSOYIKPVUDASZ544TFND/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/radareorg/radare2/commit/634b886e84a5c568d243e744becc6b3223e089cf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/bdbddc0e-fb06-4211-a90b-7cbedcee2bea",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/BZTIMAS53YT66FUS4QHQAFRJOBMUFG6D/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/E6YBRQ3UCFWJVSOYIKPVUDASZ544TFND/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.744025",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "radare2",
    "owner": "radareorg",
    "created_at": "2012-07-03T07:42:26Z",
    "updated_at": "2025-01-26T01:36:40Z",
    "pushed_at": "2025-01-24T20:15:44Z",
    "size": 180125,
    "stars": 21051,
    "forks": 3034,
    "open_issues": 875,
    "watchers": 21051,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29151635,
      "Makefile": 261654,
      "Shell": 144962,
      "Meson": 123696,
      "C++": 86180,
      "HTML": 55704,
      "Rebol": 54153,
      "Python": 38146,
      "Roff": 36722,
      "JavaScript": 23584,
      "CSS": 19465,
      "Batchfile": 8970,
      "Perl": 6449,
      "sed": 4448,
      "R": 1960,
      "Rez": 1386,
      "Assembly": 939,
      "Vala": 839,
      "Wren": 460,
      "Gnuplot": 429,
      "C#": 164,
      "Dart": 125,
      "Rascal": 45
    },
    "commit_activity": {
      "total_commits_last_year": 1630,
      "avg_commits_per_week": 31.346153846153847,
      "days_active_last_year": 297
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-26T07:35:47.834479"
  }
}