{
  "cve_id": "CVE-2022-0696",
  "github_data": {
    "repository": "vim/vim",
    "fix_commit": "0f6e28f686dbb59ab3b562408ab9b2234797b9b1",
    "related_commits": [
      "0f6e28f686dbb59ab3b562408ab9b2234797b9b1",
      "0f6e28f686dbb59ab3b562408ab9b2234797b9b1"
    ],
    "patch_url": "https://github.com/vim/vim/commit/0f6e28f686dbb59ab3b562408ab9b2234797b9b1.patch",
    "fix_commit_details": {
      "sha": "0f6e28f686dbb59ab3b562408ab9b2234797b9b1",
      "commit_date": "2022-02-20T20:49:35Z",
      "author": {
        "login": "brammool",
        "type": "User",
        "stats": {
          "total_commits": 16567,
          "average_weekly_commits": 15.411162790697674,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 874
        }
      },
      "commit_message": {
        "title": "patch 8.2.4428: crash when switching tabpage while in the cmdline window",
        "length": 210,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 67,
        "additions": 35,
        "deletions": 32
      },
      "files": [
        {
          "filename": "src/evalvars.c",
          "status": "modified",
          "additions": 2,
          "deletions": 12,
          "patch": "@@ -2199,12 +2199,7 @@ get_user_var_name(expand_T *xp, int idx)\n     }\n \n     // b: variables\n-    ht =\n-#ifdef FEAT_CMDWIN\n-\t// In cmdwin, the alternative buffer should be used.\n-\tis_in_cmdwin() ? &prevwin->w_buffer->b_vars->dv_hashtab :\n-#endif\n-\t&curbuf->b_vars->dv_hashtab;\n+    ht = &prevwin_curwin()->w_buffer->b_vars->dv_hashtab;\n     if (bdone < ht->ht_used)\n     {\n \tif (bdone++ == 0)\n@@ -2217,12 +2212,7 @@ get_user_var_name(expand_T *xp, int idx)\n     }\n \n     // w: variables\n-    ht =\n-#ifdef FEAT_CMDWIN\n-\t// In cmdwin, the alternative window should be used.\n-\tis_in_cmdwin() ? &prevwin->w_vars->dv_hashtab :\n-#endif\n-\t&curwin->w_vars->dv_hashtab;\n+    ht = &prevwin_curwin()->w_vars->dv_hashtab;\n     if (wdone < ht->ht_used)\n     {\n \tif (wdone++ == 0)"
        },
        {
          "filename": "src/proto/window.pro",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -1,4 +1,5 @@\n /* window.c */\n+win_T *prevwin_curwin(void);\n void do_window(int nchar, long Prenum, int xchar);\n void get_wincmd_addr_type(char_u *arg, exarg_T *eap);\n int win_split(int size, int flags);"
        },
        {
          "filename": "src/usercmd.c",
          "status": "modified",
          "additions": 4,
          "deletions": 20,
          "patch": "@@ -141,11 +141,7 @@ find_ucmd(\n     /*\n      * Look for buffer-local user commands first, then global ones.\n      */\n-    gap =\n-#ifdef FEAT_CMDWIN\n-\tis_in_cmdwin() ? &prevwin->w_buffer->b_ucmds :\n-#endif\n-\t&curbuf->b_ucmds;\n+    gap = &prevwin_curwin()->w_buffer->b_ucmds;\n     for (;;)\n     {\n \tfor (j = 0; j < gap->ga_len; ++j)\n@@ -358,11 +354,7 @@ expand_user_command_name(int idx)\n get_user_commands(expand_T *xp UNUSED, int idx)\n {\n     // In cmdwin, the alternative buffer should be used.\n-    buf_T *buf =\n-#ifdef FEAT_CMDWIN\n-\tis_in_cmdwin() ? prevwin->w_buffer :\n-#endif\n-\tcurbuf;\n+    buf_T *buf = prevwin_curwin()->w_buffer;\n \n     if (idx < buf->b_ucmds.ga_len)\n \treturn USER_CMD_GA(&buf->b_ucmds, idx)->uc_name;\n@@ -386,11 +378,7 @@ get_user_command_name(int idx, int cmdidx)\n     if (cmdidx == CMD_USER_BUF)\n     {\n \t// In cmdwin, the alternative buffer should be used.\n-\tbuf_T *buf =\n-#ifdef FEAT_CMDWIN\n-\t\t    is_in_cmdwin() ? prevwin->w_buffer :\n-#endif\n-\t\t    curbuf;\n+\tbuf_T *buf = prevwin_curwin()->w_buffer;\n \n \tif (idx < buf->b_ucmds.ga_len)\n \t    return USER_CMD_GA(&buf->b_ucmds, idx)->uc_name;\n@@ -478,11 +466,7 @@ uc_list(char_u *name, size_t name_len)\n     garray_T\t*gap;\n \n     // In cmdwin, the alternative buffer should be used.\n-    gap =\n-#ifdef FEAT_CMDWIN\n-\t    is_in_cmdwin() ? &prevwin->w_buffer->b_ucmds :\n-#endif\n-\t    &curbuf->b_ucmds;\n+    gap = &prevwin_curwin()->w_buffer->b_ucmds;\n     for (;;)\n     {\n \tfor (i = 0; i < gap->ga_len; ++i)"
        },
        {
          "filename": "src/version.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -750,6 +750,8 @@ static char *(features[]) =\n \n static int included_patches[] =\n {   /* Add new patch number below this line */\n+/**/\n+    4428,\n /**/\n     4427,\n /**/"
        },
        {
          "filename": "src/window.c",
          "status": "modified",
          "additions": 26,
          "deletions": 0,
          "patch": "@@ -110,6 +110,21 @@ log_frame_layout(frame_T *frame)\n }\n #endif\n \n+/*\n+ * Return the current window, unless in the cmdline window and \"prevwin\" is\n+ * set, then return \"prevwin\".\n+ */\n+    win_T *\n+prevwin_curwin(void)\n+{\n+    return\n+#ifdef FEAT_CMDWIN\n+\t// In cmdwin, the alternative buffer should be used.\n+\tis_in_cmdwin() && prevwin != NULL ? prevwin :\n+#endif\n+\tcurwin;\n+}\n+\n /*\n  * All CTRL-W window commands are handled here, called from normal_cmd().\n  */\n@@ -3927,6 +3942,14 @@ win_new_tabpage(int after)\n     tabpage_T\t*newtp;\n     int\t\tn;\n \n+#ifdef FEAT_CMDWIN\n+    if (cmdwin_type != 0)\n+    {\n+\temsg(_(e_invalid_in_cmdline_window));\n+\treturn FAIL;\n+    }\n+#endif\n+\n     newtp = alloc_tabpage();\n     if (newtp == NULL)\n \treturn FAIL;\n@@ -4301,6 +4324,7 @@ goto_tabpage(int n)\n \ttext_locked_msg();\n \treturn;\n     }\n+    CHECK_CMDWIN;\n \n     // If there is only one it can't work.\n     if (first_tabpage->tp_next == NULL)\n@@ -4368,6 +4392,8 @@ goto_tabpage_tp(\n     int\t\ttrigger_enter_autocmds,\n     int\t\ttrigger_leave_autocmds)\n {\n+    CHECK_CMDWIN;\n+\n     // Don't repeat a message in another tab page.\n     set_keep_msg(NULL, 0);\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "30377e0fe084496911e108cbb33c84cf075e6e33",
            "date": "2025-01-13T07:23:24Z",
            "author_login": "denilsonsa"
          },
          {
            "sha": "221c53202da1e9a2a30d081a46eacdeb220be443",
            "date": "2025-01-13T06:54:33Z",
            "author_login": "dkearns"
          },
          {
            "sha": "8e92db4ea22f010d402df9d34071022a4aa8cef5",
            "date": "2025-01-13T06:30:11Z",
            "author_login": "yegappan"
          },
          {
            "sha": "3a0cc36c69744a7727ce34311d39d2d9d8ddc6f9",
            "date": "2025-01-13T06:27:43Z",
            "author_login": "zeertzjq"
          },
          {
            "sha": "c200f53cbb03fa11e489a27791d5b9dfc34a6564",
            "date": "2025-01-12T19:02:04Z",
            "author_login": "Konfekt"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "NULL Pointer Dereference in GitHub repository vim/vim prior to 8.2.4428.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-21T20:15:08.230",
    "last_modified": "2024-11-21T06:39:12.430",
    "fix_date": "2022-02-20T20:49:35Z"
  },
  "references": [
    {
      "url": "http://seclists.org/fulldisclosure/2022/Oct/28",
      "source": "security@huntr.dev",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2022/Oct/41",
      "source": "security@huntr.dev",
      "tags": [
        "Mailing List",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vim/vim/commit/0f6e28f686dbb59ab3b562408ab9b2234797b9b1",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/7416c2cb-1809-4834-8989-e84ff033f15f",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/11/msg00032.html",
      "source": "security@huntr.dev",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/7ZLEHVP4LNAGER4ZDGUDS5V5YVQD6INF/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://support.apple.com/kb/HT213488",
      "source": "security@huntr.dev",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2022/Oct/28",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://seclists.org/fulldisclosure/2022/Oct/41",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/vim/vim/commit/0f6e28f686dbb59ab3b562408ab9b2234797b9b1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/7416c2cb-1809-4834-8989-e84ff033f15f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/11/msg00032.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/7ZLEHVP4LNAGER4ZDGUDS5V5YVQD6INF/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://support.apple.com/kb/HT213488",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.738209",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vim",
    "owner": "vim",
    "created_at": "2015-08-18T21:03:56Z",
    "updated_at": "2025-01-14T08:58:33Z",
    "pushed_at": "2025-01-13T07:25:13Z",
    "size": 153925,
    "stars": 37215,
    "forks": 5529,
    "open_issues": 1516,
    "watchers": 37215,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Vim Script": 20025864,
      "C": 14374546,
      "Roff": 576344,
      "Makefile": 490522,
      "C++": 246793,
      "NSIS": 180936,
      "M4": 159971,
      "Java": 85446,
      "Shell": 71333,
      "PostScript": 64070,
      "Module Management System": 56375,
      "Python": 51761,
      "XS": 51261,
      "Ruby": 40309,
      "JavaScript": 37774,
      "NewLisp": 37431,
      "Raku": 34258,
      "Emacs Lisp": 30304,
      "Perl": 29735,
      "SystemVerilog": 27883,
      "Smalltalk": 25762,
      "Awk": 19481,
      "Batchfile": 18475,
      "Objective-C": 13147,
      "DIGITAL Command Language": 10835,
      "HTML": 6885,
      "Prolog": 4336,
      "KRL": 4206,
      "MATLAB": 1970,
      "Thrift": 1670,
      "OpenEdge ABL": 1490,
      "sed": 826,
      "Tcl": 745,
      "Lua": 738,
      "BitBake": 388
    },
    "commit_activity": {
      "total_commits_last_year": 1872,
      "avg_commits_per_week": 36.0,
      "days_active_last_year": 324
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "vim"
    },
    "collected_at": "2025-01-14T12:54:52.772009"
  }
}