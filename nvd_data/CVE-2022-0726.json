{
  "cve_id": "CVE-2022-0726",
  "github_data": {
    "repository": "chocobozzz/peertube",
    "fix_commit": "6ea9295b8f5dd7cc254202a79aad61c666cc4259",
    "related_commits": [
      "6ea9295b8f5dd7cc254202a79aad61c666cc4259",
      "6ea9295b8f5dd7cc254202a79aad61c666cc4259"
    ],
    "patch_url": "https://github.com/chocobozzz/peertube/commit/6ea9295b8f5dd7cc254202a79aad61c666cc4259.patch",
    "fix_commit_details": {
      "sha": "6ea9295b8f5dd7cc254202a79aad61c666cc4259",
      "commit_date": "2022-02-22T13:16:34Z",
      "author": {
        "login": "Chocobozzz",
        "type": "User",
        "stats": {
          "total_commits": 7381,
          "average_weekly_commits": 17.657894736842106,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 332
        }
      },
      "commit_message": {
        "title": "Check video privacy when creating comments/rates",
        "length": 48,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 82,
        "additions": 75,
        "deletions": 7
      },
      "files": [
        {
          "filename": "server/middlewares/validators/videos/video-comments.ts",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -100,6 +100,14 @@ const addVideoCommentThreadValidator = [\n \n     if (areValidationErrors(req, res)) return\n     if (!await doesVideoExist(req.params.videoId, res)) return\n+\n+    if (!await checkCanSeeVideoIfPrivate(req, res, res.locals.videoAll)) {\n+      return res.fail({\n+        status: HttpStatusCode.FORBIDDEN_403,\n+        message: 'Cannot access to this ressource'\n+      })\n+    }\n+\n     if (!isVideoCommentsEnabled(res.locals.videoAll, res)) return\n     if (!await isVideoCommentAccepted(req, res, res.locals.videoAll, false)) return\n \n@@ -119,6 +127,14 @@ const addVideoCommentReplyValidator = [\n \n     if (areValidationErrors(req, res)) return\n     if (!await doesVideoExist(req.params.videoId, res)) return\n+\n+    if (!await checkCanSeeVideoIfPrivate(req, res, res.locals.videoAll)) {\n+      return res.fail({\n+        status: HttpStatusCode.FORBIDDEN_403,\n+        message: 'Cannot access to this ressource'\n+      })\n+    }\n+\n     if (!isVideoCommentsEnabled(res.locals.videoAll, res)) return\n     if (!await doesVideoCommentExist(req.params.commentId, res.locals.videoAll, res)) return\n     if (!await isVideoCommentAccepted(req, res, res.locals.videoAll, true)) return"
        },
        {
          "filename": "server/middlewares/validators/videos/video-rates.ts",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -8,7 +8,7 @@ import { isRatingValid } from '../../../helpers/custom-validators/video-rates'\n import { isVideoRatingTypeValid } from '../../../helpers/custom-validators/videos'\n import { logger } from '../../../helpers/logger'\n import { AccountVideoRateModel } from '../../../models/account/account-video-rate'\n-import { areValidationErrors, doesVideoExist, isValidVideoIdParam } from '../shared'\n+import { areValidationErrors, checkCanSeeVideoIfPrivate, doesVideoExist, isValidVideoIdParam } from '../shared'\n \n const videoUpdateRateValidator = [\n   isValidVideoIdParam('id'),\n@@ -21,6 +21,13 @@ const videoUpdateRateValidator = [\n     if (areValidationErrors(req, res)) return\n     if (!await doesVideoExist(req.params.id, res)) return\n \n+    if (!await checkCanSeeVideoIfPrivate(req, res, res.locals.videoAll)) {\n+      return res.fail({\n+        status: HttpStatusCode.FORBIDDEN_403,\n+        message: 'Cannot access to this ressource'\n+      })\n+    }\n+\n     return next()\n   }\n ]"
        },
        {
          "filename": "server/tests/api/check-params/video-comments.ts",
          "status": "modified",
          "additions": 33,
          "deletions": 6,
          "patch": "@@ -19,10 +19,14 @@ const expect = chai.expect\n describe('Test video comments API validator', function () {\n   let pathThread: string\n   let pathComment: string\n+\n   let server: PeerTubeServer\n+\n   let video: VideoCreateResult\n+\n   let userAccessToken: string\n   let userAccessToken2: string\n+\n   let commentId: number\n   let privateCommentId: number\n   let privateVideo: VideoCreateResult\n@@ -203,9 +207,8 @@ describe('Test video comments API validator', function () {\n \n     it('Should fail with an incorrect video', async function () {\n       const path = '/api/v1/videos/ba708d62-e3d7-45d9-9d73-41b9097cc02d/comment-threads'\n-      const fields = {\n-        text: 'super comment'\n-      }\n+      const fields = { text: 'super comment' }\n+\n       await makePostBodyRequest({\n         url: server.url,\n         path,\n@@ -215,10 +218,21 @@ describe('Test video comments API validator', function () {\n       })\n     })\n \n+    it('Should fail with a private video of another user', async function () {\n+      const fields = { text: 'super comment' }\n+\n+      await makePostBodyRequest({\n+        url: server.url,\n+        path: '/api/v1/videos/' + privateVideo.shortUUID + '/comment-threads',\n+        token: userAccessToken,\n+        fields,\n+        expectedStatus: HttpStatusCode.FORBIDDEN_403\n+      })\n+    })\n+\n     it('Should succeed with the correct parameters', async function () {\n-      const fields = {\n-        text: 'super comment'\n-      }\n+      const fields = { text: 'super comment' }\n+\n       await makePostBodyRequest({\n         url: server.url,\n         path: pathThread,\n@@ -230,6 +244,7 @@ describe('Test video comments API validator', function () {\n   })\n \n   describe('When adding a comment to a thread', function () {\n+\n     it('Should fail with a non authenticated user', async function () {\n       const fields = {\n         text: 'text'\n@@ -276,6 +291,18 @@ describe('Test video comments API validator', function () {\n       })\n     })\n \n+    it('Should fail with a private video of another user', async function () {\n+      const fields = { text: 'super comment' }\n+\n+      await makePostBodyRequest({\n+        url: server.url,\n+        path: '/api/v1/videos/' + privateVideo.uuid + '/comments/' + privateCommentId,\n+        token: userAccessToken,\n+        fields,\n+        expectedStatus: HttpStatusCode.FORBIDDEN_403\n+      })\n+    })\n+\n     it('Should fail with an incorrect comment', async function () {\n       const path = '/api/v1/videos/' + video.uuid + '/comments/124'\n       const fields = {"
        },
        {
          "filename": "server/tests/api/check-params/videos.ts",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -28,6 +28,7 @@ describe('Test videos API validator', function () {\n   let channelId: number\n   let channelName: string\n   let video: VideoCreateResult\n+  let privateVideo: VideoCreateResult\n \n   // ---------------------------------------------------------------\n \n@@ -49,6 +50,10 @@ describe('Test videos API validator', function () {\n       channelName = body.videoChannels[0].name\n       accountName = body.account.name + '@' + body.account.host\n     }\n+\n+    {\n+      privateVideo = await server.videos.quickUpload({ name: 'private video', privacy: VideoPrivacy.PRIVATE })\n+    }\n   })\n \n   describe('When listing videos', function () {\n@@ -783,6 +788,19 @@ describe('Test videos API validator', function () {\n       await makePutBodyRequest({ url: server.url, path: path + videoId + '/rate', token: server.accessToken, fields })\n     })\n \n+    it('Should fail with a private video of another user', async function () {\n+      const fields = {\n+        rating: 'like'\n+      }\n+      await makePutBodyRequest({\n+        url: server.url,\n+        path: path + privateVideo.uuid + '/rate',\n+        token: userAccessToken,\n+        fields,\n+        expectedStatus: HttpStatusCode.FORBIDDEN_403\n+      })\n+    })\n+\n     it('Should succeed with the correct parameters', async function () {\n       const fields = {\n         rating: 'like'"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c31084ce5bc31a5ab0d1bfb014afe509e9d9e7a1",
            "date": "2025-01-04T16:19:34Z",
            "author_login": "zbirkenbuel"
          },
          {
            "sha": "4967d25d4619bf98dd30ddf68b780e683a844ba2",
            "date": "2025-01-14T12:27:18Z",
            "author_login": "Chocobozzz"
          },
          {
            "sha": "1a568cc65c3938a2832d4816cd5f34807b0f06f8",
            "date": "2025-01-14T12:25:17Z",
            "author_login": "Khyvodul"
          },
          {
            "sha": "e4b6021310447c5723cb08b5a11347f425d177d9",
            "date": "2025-01-14T10:37:03Z",
            "author_login": "Chocobozzz"
          },
          {
            "sha": "e0960c53a99e1d328f89bc726ee81c3f943cc904",
            "date": "2025-01-14T10:32:04Z",
            "author_login": "Chocobozzz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N",
    "cwe_id": "CWE-862",
    "description": "Missing Authorization in GitHub repository chocobozzz/peertube prior to 4.1.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-23T14:15:07.930",
    "last_modified": "2024-11-21T06:39:16.173",
    "fix_date": "2022-02-22T13:16:34Z"
  },
  "references": [
    {
      "url": "https://github.com/chocobozzz/peertube/commit/6ea9295b8f5dd7cc254202a79aad61c666cc4259",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8928ab08-7fcb-475e-8da7-18e8412c1ac3",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/chocobozzz/peertube/commit/6ea9295b8f5dd7cc254202a79aad61c666cc4259",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8928ab08-7fcb-475e-8da7-18e8412c1ac3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.742325",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "PeerTube",
    "owner": "chocobozzz",
    "created_at": "2015-10-29T22:09:42Z",
    "updated_at": "2025-01-14T12:54:05Z",
    "pushed_at": "2025-01-14T12:54:00Z",
    "size": 345923,
    "stars": 13329,
    "forks": 1538,
    "open_issues": 625,
    "watchers": 13329,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "master"
    ],
    "languages": {
      "TypeScript": 8063880,
      "HTML": 587956,
      "SCSS": 274504,
      "Shell": 34475,
      "Pug": 22110,
      "JavaScript": 12518,
      "Dockerfile": 332
    },
    "commit_activity": {
      "total_commits_last_year": 1307,
      "avg_commits_per_week": 25.134615384615383,
      "days_active_last_year": 233
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:52:13.645385"
  }
}