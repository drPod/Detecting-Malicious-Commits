{
  "cve_id": "CVE-2022-0820",
  "github_data": {
    "repository": "orchardcms/orchardcore",
    "fix_commit": "b7096af1028d8f909f63dd076d1bbd573913a92d",
    "related_commits": [
      "b7096af1028d8f909f63dd076d1bbd573913a92d",
      "b7096af1028d8f909f63dd076d1bbd573913a92d"
    ],
    "patch_url": "https://github.com/orchardcms/orchardcore/commit/b7096af1028d8f909f63dd076d1bbd573913a92d.patch",
    "fix_commit_details": {
      "sha": "b7096af1028d8f909f63dd076d1bbd573913a92d",
      "commit_date": "2022-03-10T18:03:52Z",
      "author": {
        "login": "sebastienros",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix missing permission checks and encoding. (#11344)",
        "length": 52,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 166,
        "additions": 118,
        "deletions": 48
      },
      "files": [
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.ContentFields/Controllers/LocalizationSetContentPickerAdminController.cs",
          "status": "modified",
          "additions": 18,
          "deletions": 7,
          "patch": "@@ -1,6 +1,7 @@\n using System.Collections.Generic;\n using System.Linq;\n using System.Threading.Tasks;\n+using Microsoft.AspNetCore.Authorization;\n using Microsoft.AspNetCore.Mvc;\n using OrchardCore.Admin;\n using OrchardCore.ContentFields.Settings;\n@@ -9,9 +10,11 @@\n using OrchardCore.ContentManagement;\n using OrchardCore.ContentManagement.Metadata;\n using OrchardCore.ContentManagement.Records;\n+using OrchardCore.Contents;\n using OrchardCore.Modules;\n using YesSql;\n using YesSql.Services;\n+using IHttpContextAccessor = Microsoft.AspNetCore.Http.IHttpContextAccessor;\n \n namespace OrchardCore.ContentFields.Controllers\n {\n@@ -23,18 +26,23 @@ public class LocalizationSetContentPickerAdminController : Controller\n         private readonly IContentLocalizationManager _contentLocalizationManager;\n         private readonly IContentManager _contentManager;\n         private readonly ISession _session;\n+        private readonly IAuthorizationService _authorizationService;\n+        private readonly IHttpContextAccessor _httpContextAccessor;\n \n         public LocalizationSetContentPickerAdminController(\n             IContentDefinitionManager contentDefinitionManager,\n             IContentLocalizationManager contentLocalizationManager,\n             IContentManager contentManager,\n-            ISession session\n-            )\n+            ISession session,\n+            IAuthorizationService authorizationService,\n+            IHttpContextAccessor httpContextAccessor)\n         {\n             _contentDefinitionManager = contentDefinitionManager;\n             _contentLocalizationManager = contentLocalizationManager;\n             _contentManager = contentManager;\n             _session = session;\n+            _authorizationService = authorizationService;\n+            _httpContextAccessor = httpContextAccessor;\n         }\n \n         [HttpGet]\n@@ -71,12 +79,15 @@ public async Task<IActionResult> SearchLocalizationSets(string part, string fiel\n \n             foreach (var contentItem in cleanedContentItems)\n             {\n-                results.Add(new VueMultiselectItemViewModel\n+                if (await _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, CommonPermissions.ViewContent, contentItem))\n                 {\n-                    Id = contentItem.Key, //localization set\n-                    DisplayText = contentItem.Value.ToString(),\n-                    HasPublished = await _contentManager.HasPublishedVersionAsync(contentItem.Value)\n-                });\n+                    results.Add(new VueMultiselectItemViewModel\n+                    {\n+                        Id = contentItem.Key, //localization set\n+                        DisplayText = contentItem.Value.ToString(),\n+                        HasPublished = await _contentManager.HasPublishedVersionAsync(contentItem.Value)\n+                    });\n+                }\n             }\n \n             return new ObjectResult(results);"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Demo/Controllers/ContentController.cs",
          "status": "modified",
          "additions": 25,
          "deletions": 1,
          "patch": "@@ -1,10 +1,13 @@\n using System.Threading.Tasks;\n+using Microsoft.AspNetCore.Authorization;\n using Microsoft.AspNetCore.Mvc;\n using OrchardCore.Admin;\n using OrchardCore.ContentManagement;\n using OrchardCore.ContentManagement.Display;\n+using OrchardCore.Contents;\n using OrchardCore.DisplayManagement.ModelBinding;\n using YesSql;\n+using IHttpContextAccessor = Microsoft.AspNetCore.Http.IHttpContextAccessor;\n \n namespace OrchardCore.Demo.Controllers\n {\n@@ -14,17 +17,23 @@ public class ContentController : Controller\n         private readonly IContentManager _contentManager;\n         private readonly ISession _session;\n         private readonly IUpdateModelAccessor _updateModelAccessor;\n+        private readonly IAuthorizationService _authorizationService;\n+        private readonly IHttpContextAccessor _httpContextAccessor;\n \n         public ContentController(\n             IContentManager contentManager,\n             IContentItemDisplayManager contentDisplay,\n             ISession session,\n-            IUpdateModelAccessor updateModelAccessor)\n+            IUpdateModelAccessor updateModelAccessor,\n+            IAuthorizationService authorizationService,\n+            IHttpContextAccessor httpContextAccessor)\n         {\n             _contentManager = contentManager;\n             _contentDisplay = contentDisplay;\n             _session = session;\n             _updateModelAccessor = updateModelAccessor;\n+            _authorizationService = authorizationService;\n+            _httpContextAccessor = httpContextAccessor;\n         }\n \n         public async Task<ActionResult> Display(string contentItemId)\n@@ -36,6 +45,11 @@ public async Task<ActionResult> Display(string contentItemId)\n                 return NotFound();\n             }\n \n+            if (!await _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, CommonPermissions.ViewContent, contentItem))\n+            {\n+                return Forbid();\n+            }\n+\n             var shape = await _contentDisplay.BuildDisplayAsync(contentItem, _updateModelAccessor.ModelUpdater);\n             return View(shape);\n         }\n@@ -50,6 +64,11 @@ public async Task<ActionResult> Edit(string contentItemId)\n                 return NotFound();\n             }\n \n+            if (!await _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, CommonPermissions.EditContent, contentItem))\n+            {\n+                return Forbid();\n+            }\n+\n             var shape = await _contentDisplay.BuildEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n             return View(shape);\n         }\n@@ -64,6 +83,11 @@ public async Task<ActionResult> EditPost(string contentItemId)\n                 return NotFound();\n             }\n \n+            if (!await _authorizationService.AuthorizeAsync(_httpContextAccessor.HttpContext.User, CommonPermissions.EditContent, contentItem))\n+            {\n+                return Forbid();\n+            }\n+\n             var shape = await _contentDisplay.UpdateEditorAsync(contentItem, _updateModelAccessor.ModelUpdater, false);\n \n             if (!ModelState.IsValid)"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Features/Controllers/AdminController.cs",
          "status": "modified",
          "additions": 10,
          "deletions": 0,
          "patch": "@@ -112,6 +112,11 @@ public async Task<ActionResult> Features(BulkActionViewModel model, bool? force)\n         [HttpPost]\n         public async Task<IActionResult> Disable(string id)\n         {\n+            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageFeatures))\n+            {\n+                return Forbid();\n+            }\n+\n             var feature = (await _shellFeaturesManager.GetAvailableFeaturesAsync())\n                 .FirstOrDefault(f => !f.IsTheme() && f.Id == id);\n \n@@ -134,6 +139,11 @@ public async Task<IActionResult> Disable(string id)\n         [HttpPost]\n         public async Task<IActionResult> Enable(string id)\n         {\n+            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageFeatures))\n+            {\n+                return Forbid();\n+            }\n+\n             var feature = (await _shellFeaturesManager.GetAvailableFeaturesAsync())\n                 .FirstOrDefault(f => !f.IsTheme() && f.Id == id);\n "
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Roles/Controllers/AdminController.cs",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -85,6 +85,11 @@ public async Task<IActionResult> Create()\n         [HttpPost]\n         public async Task<IActionResult> Create(CreateRoleViewModel model)\n         {\n+            if (!await _authorizationService.AuthorizeAsync(User, Permissions.ManageRoles))\n+            {\n+                return Forbid();\n+            }\n+\n             if (ModelState.IsValid)\n             {\n                 model.RoleName = model.RoleName.Trim();"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Seo/Drivers/SeoContentDriver.cs",
          "status": "modified",
          "additions": 51,
          "deletions": 35,
          "patch": "@@ -1,4 +1,6 @@\n using System;\n+using System.Text.Encodings.Web;\n+using System.Text.Json;\n using System.Threading.Tasks;\n using Microsoft.AspNetCore.Html;\n using OrchardCore.ContentManagement;\n@@ -21,20 +23,23 @@ public class SeoContentDriver : ContentDisplayDriver\n         private readonly IPageTitleBuilder _pageTitleBuilder;\n         private readonly IResourceManager _resourceManager;\n         private readonly IShortcodeService _shortcodeService;\n+        private readonly HtmlEncoder _htmlEncoder;\n \n         private bool _primaryContentRendered { get; set; }\n \n         public SeoContentDriver(\n             IContentManager contentManager,\n             IPageTitleBuilder pageTitleBuilder,\n             IResourceManager resourceManager,\n-            IShortcodeService shortcodeService\n+            IShortcodeService shortcodeService,\n+            HtmlEncoder htmlEncoder\n             )\n         {\n             _contentManager = contentManager;\n             _pageTitleBuilder = pageTitleBuilder;\n             _resourceManager = resourceManager;\n             _shortcodeService = shortcodeService;\n+            _htmlEncoder = htmlEncoder;\n         }\n \n         public override async Task<IDisplayResult> DisplayAsync(ContentItem contentItem, BuildDisplayContext context)\n@@ -60,17 +65,22 @@ public override async Task<IDisplayResult> DisplayAsync(ContentItem contentItem,\n                 return null;\n             }\n \n+            var shortCodeContext = new Context\n+            {\n+                [\"ContentItem\"] = contentItem\n+            };\n+\n             if (!String.IsNullOrEmpty(aspect.PageTitle))\n             {\n-                _pageTitleBuilder.SetFixedTitle(new HtmlString(await RenderAsync(aspect.PageTitle, contentItem)));\n+                _pageTitleBuilder.SetFixedTitle(new HtmlString(_htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.PageTitle, shortCodeContext))));\n             }\n \n             if (!String.IsNullOrEmpty(aspect.MetaDescription))\n             {\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Name = \"description\",\n-                    Content = await RenderAsync(aspect.MetaDescription, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.MetaDescription, shortCodeContext))\n                 });\n             }\n \n@@ -79,7 +89,7 @@ public override async Task<IDisplayResult> DisplayAsync(ContentItem contentItem,\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Name = \"keywords\",\n-                    Content = await RenderAsync(aspect.MetaKeywords, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.MetaKeywords, shortCodeContext))\n                 });\n             }\n \n@@ -97,19 +107,19 @@ public override async Task<IDisplayResult> DisplayAsync(ContentItem contentItem,\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Name = \"robots\",\n-                    Content = await RenderAsync(aspect.MetaRobots, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.MetaRobots, shortCodeContext))\n                 });\n             }\n \n             foreach (var customMetaTag in aspect.CustomMetaTags)\n             {\n                 // Generate a new meta entry as the builder is preopulated.\n                 _resourceManager.RegisterMeta(new MetaEntry(\n-                    await RenderAsync(customMetaTag.Name, contentItem),\n-                    await RenderAsync(customMetaTag.Property, contentItem),\n-                    await RenderAsync(customMetaTag.Content, contentItem),\n-                    await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n-                    await RenderAsync(customMetaTag.Charset, contentItem)));\n+                    _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(customMetaTag.Name, shortCodeContext)),\n+                    _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(customMetaTag.Property, shortCodeContext)),\n+                    _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(customMetaTag.Content, shortCodeContext)),\n+                    _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(customMetaTag.HttpEquiv, shortCodeContext)),\n+                    _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(customMetaTag.Charset, shortCodeContext))));\n             }\n \n             // OpenGraph.\n@@ -118,7 +128,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Property = \"og:type\",\n-                    Content = await RenderAsync(aspect.OpenGraphType, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphType, shortCodeContext))\n                 });\n             }\n \n@@ -127,7 +137,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Property = \"og:title\",\n-                    Content = await RenderAsync(aspect.OpenGraphTitle, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphTitle, shortCodeContext))\n                 });\n             }\n \n@@ -136,7 +146,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Property = \"og:description\",\n-                    Content = await RenderAsync(aspect.OpenGraphDescription, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphDescription, shortCodeContext))\n                 });\n             }\n \n@@ -145,7 +155,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Property = \"og:image\",\n-                    Content = await RenderAsync(aspect.OpenGraphImage, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphImage, shortCodeContext))\n                 });\n             }\n \n@@ -154,7 +164,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Property = \"og:image:alt\",\n-                    Content = await RenderAsync(aspect.OpenGraphImageAlt, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphImageAlt, shortCodeContext))\n                 });\n             }\n \n@@ -163,7 +173,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Property = \"og:url\",\n-                    Content = await RenderAsync(aspect.OpenGraphUrl, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphUrl, shortCodeContext))\n                 });\n             }\n \n@@ -172,7 +182,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Property = \"og:site_name\",\n-                    Content = await RenderAsync(aspect.OpenGraphSiteName, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphSiteName, shortCodeContext))\n                 });\n             }\n \n@@ -181,7 +191,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Property = \"fb:app_id\",\n-                    Content = await RenderAsync(aspect.OpenGraphAppId, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphAppId, shortCodeContext))\n                 });\n             }\n \n@@ -190,7 +200,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Property = \"og:locale\",\n-                    Content = await RenderAsync(aspect.OpenGraphLocale, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.OpenGraphLocale, shortCodeContext))\n                 });\n             }\n \n@@ -200,7 +210,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Property = \"twitter:card\",\n-                    Content = await RenderAsync(aspect.TwitterCard, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterCard, shortCodeContext))\n                 });\n             }\n \n@@ -209,7 +219,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Property = \"twitter:site\",\n-                    Content = await RenderAsync(aspect.TwitterSite, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterSite, shortCodeContext))\n                 });\n             }\n \n@@ -218,7 +228,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Name = \"twitter:title\",\n-                    Content = await RenderAsync(aspect.TwitterTitle, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterTitle, shortCodeContext))\n                 });\n             }\n \n@@ -227,7 +237,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Name = \"twitter:description\",\n-                    Content = await RenderAsync(aspect.TwitterDescription, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterDescription, shortCodeContext))\n                 });\n             }\n \n@@ -236,7 +246,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Name = \"twitter:image\",\n-                    Content = await RenderAsync(aspect.TwitterImage, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterImage, shortCodeContext))\n                 });\n             }\n \n@@ -245,7 +255,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Name = \"twitter:image:alt\",\n-                    Content = await RenderAsync(aspect.TwitterImageAlt, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterImageAlt, shortCodeContext))\n                 });\n             }\n \n@@ -254,7 +264,7 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Name = \"twitter:creator\",\n-                    Content = await RenderAsync(aspect.TwitterCreator, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterCreator, shortCodeContext))\n                 });\n             }\n \n@@ -263,23 +273,29 @@ await RenderAsync(customMetaTag.HttpEquiv, contentItem),\n                 _resourceManager.RegisterMeta(new MetaEntry\n                 {\n                     Name = \"twitter:url\",\n-                    Content = await RenderAsync(aspect.TwitterUrl, contentItem)\n+                    Content = _htmlEncoder.Encode(await _shortcodeService.ProcessAsync(aspect.TwitterUrl, shortCodeContext))\n                 });\n             }\n \n             if (!String.IsNullOrEmpty(aspect.GoogleSchema))\n             {\n-                _resourceManager.RegisterHeadScript(new HtmlString($\"<script type=\\\"application/ld+json\\\">\\n{aspect.GoogleSchema}\\n</script>\"));\n+                var json = await _shortcodeService.ProcessAsync(aspect.GoogleSchema, shortCodeContext);\n+\n+                try\n+                {\n+                    // Validate json format\n+                    JsonDocument.Parse(json);\n+                }\n+                catch\n+                {\n+                    json = \"{ \\\"error\\\": \\\"Invalid JSON content in SEO settings\\\" }\";\n+                }\n+\n+                _resourceManager.RegisterHeadScript(new HtmlString($\"<script type=\\\"application/ld+json\\\">\\n{json}\\n</script>\"));\n+\n             }\n \n             return null;\n         }\n-\n-        private ValueTask<string> RenderAsync(string template, ContentItem contentItem)\n-            => _shortcodeService.ProcessAsync(template,\n-                    new Context\n-                    {\n-                        [\"ContentItem\"] = contentItem\n-                    });\n     }\n }"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Shortcodes/Controllers/AdminController.cs",
          "status": "modified",
          "additions": 7,
          "deletions": 3,
          "patch": "@@ -11,6 +11,7 @@\n using Newtonsoft.Json;\n using OrchardCore.DisplayManagement;\n using OrchardCore.DisplayManagement.Notify;\n+using OrchardCore.Infrastructure.Html;\n using OrchardCore.Liquid;\n using OrchardCore.Modules;\n using OrchardCore.Navigation;\n@@ -33,6 +34,7 @@ public class AdminController : Controller\n         private readonly INotifier _notifier;\n         private readonly IStringLocalizer S;\n         private readonly IHtmlLocalizer H;\n+        private readonly IHtmlSanitizerService _htmlSanitizerService;\n         private readonly dynamic New;\n \n         public AdminController(\n@@ -43,7 +45,8 @@ public AdminController(\n             INotifier notifier,\n             IShapeFactory shapeFactory,\n             IStringLocalizer<AdminController> stringLocalizer,\n-            IHtmlLocalizer<AdminController> htmlLocalizer\n+            IHtmlLocalizer<AdminController> htmlLocalizer,\n+            IHtmlSanitizerService htmlSanitizerService\n             )\n         {\n             _authorizationService = authorizationService;\n@@ -54,6 +57,7 @@ IHtmlLocalizer<AdminController> htmlLocalizer\n             New = shapeFactory;\n             S = stringLocalizer;\n             H = htmlLocalizer;\n+            _htmlSanitizerService = htmlSanitizerService;\n         }\n \n         public async Task<IActionResult> Index(ContentOptions options, PagerParameters pagerParameters)\n@@ -159,7 +163,7 @@ public async Task<IActionResult> CreatePost(ShortcodeTemplateViewModel model, st\n                 {\n                     Content = model.Content,\n                     Hint = model.Hint,\n-                    Usage = model.Usage,\n+                    Usage = _htmlSanitizerService.Sanitize(model.Usage),\n                     DefaultValue = model.DefaultValue,\n                     Categories = JsonConvert.DeserializeObject<string[]>(model.SelectedCategories)\n                 };\n@@ -256,7 +260,7 @@ public async Task<IActionResult> Edit(string sourceName, ShortcodeTemplateViewMo\n                 {\n                     Content = model.Content,\n                     Hint = model.Hint,\n-                    Usage = model.Usage,\n+                    Usage = _htmlSanitizerService.Sanitize(model.Usage),\n                     DefaultValue = model.DefaultValue,\n                     Categories = JsonConvert.DeserializeObject<string[]>(model.SelectedCategories)\n                 };"
        },
        {
          "filename": "src/OrchardCore.Modules/OrchardCore.Tenants/Controllers/FeatureProfilesController.cs",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -40,8 +40,8 @@ public FeatureProfilesController(\n             ISiteService siteService,\n             INotifier notifier,\n             IShapeFactory shapeFactory,\n-            IStringLocalizer<AdminController> stringLocalizer,\n-            IHtmlLocalizer<AdminController> htmlLocalizer\n+            IStringLocalizer<FeatureProfilesController> stringLocalizer,\n+            IHtmlLocalizer<FeatureProfilesController> htmlLocalizer\n             )\n         {\n             _authorizationService = authorizationService;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 7,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "852eeb1dd0fe87431717409a856fd605236776d2",
            "date": "2025-01-13T15:30:14Z",
            "author_login": "AndreySurkov"
          },
          {
            "sha": "b8570a880c1eecb78f0bc5be6a295d4d9bab6cc9",
            "date": "2025-01-13T15:22:25Z",
            "author_login": "allcontributors[bot]"
          },
          {
            "sha": "c5ed89716f35b916baa82d8b6d920c3a782ab648",
            "date": "2025-01-13T14:58:54Z",
            "author_login": "jeff-techstension"
          },
          {
            "sha": "657c0da16226c9a934bb371d9366a32f40b16cff",
            "date": "2025-01-12T16:37:41Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "1d29ab161f6911473910711dac8b868ed62a1386",
            "date": "2025-01-12T16:37:21Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in GitHub repository orchardcms/orchardcore prior to 1.3.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-11T00:15:07.693",
    "last_modified": "2024-11-21T06:39:27.757",
    "fix_date": "2022-03-10T18:03:52Z"
  },
  "references": [
    {
      "url": "https://github.com/orchardcms/orchardcore/commit/b7096af1028d8f909f63dd076d1bbd573913a92d",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d00e7175-4764-4962-ae0d-a66501dda2e6",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/orchardcms/orchardcore/commit/b7096af1028d8f909f63dd076d1bbd573913a92d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/d00e7175-4764-4962-ae0d-a66501dda2e6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:01.986103",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "OrchardCore",
    "owner": "orchardcms",
    "created_at": "2014-11-19T22:29:26Z",
    "updated_at": "2025-01-14T08:07:37Z",
    "pushed_at": "2025-01-14T03:14:48Z",
    "size": 259058,
    "stars": 7521,
    "forks": 2421,
    "open_issues": 959,
    "watchers": 7521,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C#": 9168616,
      "JavaScript": 2538544,
      "HTML": 1798441,
      "CSS": 1435890,
      "SCSS": 228444,
      "Pug": 56076,
      "Liquid": 44352,
      "TypeScript": 41344,
      "PHP": 2484,
      "Dockerfile": 865
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T14:19:20.528633"
  }
}