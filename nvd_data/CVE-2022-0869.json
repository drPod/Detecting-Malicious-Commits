{
  "cve_id": "CVE-2022-0869",
  "github_data": {
    "repository": "nitely/spirit",
    "fix_commit": "8f32f89654d6c30d56e0dd167059d32146fb32ef",
    "related_commits": [
      "8f32f89654d6c30d56e0dd167059d32146fb32ef",
      "8f32f89654d6c30d56e0dd167059d32146fb32ef"
    ],
    "patch_url": "https://github.com/nitely/spirit/commit/8f32f89654d6c30d56e0dd167059d32146fb32ef.patch",
    "fix_commit_details": {
      "sha": "8f32f89654d6c30d56e0dd167059d32146fb32ef",
      "commit_date": "2022-02-23T08:16:32Z",
      "author": {
        "login": "nitely",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix unsafe redirect (#308)",
        "length": 26,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 175,
        "additions": 111,
        "deletions": 64
      },
      "files": [
        {
          "filename": "spirit/admin/views.py",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -1,12 +1,13 @@\n # -*- coding: utf-8 -*-\n \n-from django.shortcuts import render, redirect\n+from django.shortcuts import render\n from django.contrib import messages\n from django.utils.translation import gettext as _\n from django.contrib.auth import get_user_model\n \n import spirit\n import django\n+from spirit.core.utils.http import safe_redirect\n from spirit.category.models import Category\n from spirit.comment.flag.models import CommentFlag\n from spirit.comment.like.models import CommentLike\n@@ -25,7 +26,7 @@ def config_basic(request):\n     if is_post(request) and form.is_valid():\n         form.save()\n         messages.info(request, _(\"Settings updated!\"))\n-        return redirect(request.GET.get(\"next\", request.get_full_path()))\n+        return safe_redirect(request, \"next\", request.get_full_path())\n     return render(\n         request=request,\n         template_name='spirit/admin/config_basic.html',"
        },
        {
          "filename": "spirit/comment/flag/views.py",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -1,9 +1,10 @@\n # -*- coding: utf-8 -*-\n \n from django.contrib.auth.decorators import login_required\n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n \n-from ...core.utils.views import is_post, post_data\n+from spirit.core.utils.http import safe_redirect\n+from spirit.core.utils.views import is_post, post_data\n from ..models import Comment\n from .forms import FlagForm\n \n@@ -18,7 +19,7 @@ def create(request, comment_id):\n \n     if is_post(request) and form.is_valid():\n         form.save()\n-        return redirect(request.POST.get('next', comment.get_absolute_url()))\n+        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,"
        },
        {
          "filename": "spirit/comment/like/views.py",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -1,9 +1,10 @@\n # -*- coding: utf-8 -*-\n \n from django.contrib.auth.decorators import login_required\n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n from django.urls import reverse\n \n+from spirit.core.utils.http import safe_redirect\n from spirit.core.utils.views import is_post, post_data, is_ajax\n from spirit.core.utils import json_response\n from spirit.comment.models import Comment\n@@ -28,7 +29,7 @@ def create(request, comment_id):\n         if is_ajax(request):\n             return json_response({'url_delete': like.get_delete_url()})\n \n-        return redirect(request.POST.get('next', comment.get_absolute_url()))\n+        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,\n@@ -52,7 +53,8 @@ def delete(request, pk):\n                 kwargs={'comment_id': like.comment.pk})\n             return json_response({'url_create': url, })\n \n-        return redirect(request.POST.get('next', like.comment.get_absolute_url()))\n+        return safe_redirect(\n+            request, 'next', like.comment.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,"
        },
        {
          "filename": "spirit/comment/poll/views.py",
          "status": "modified",
          "additions": 7,
          "deletions": 6,
          "patch": "@@ -1,7 +1,7 @@\n # -*- coding: utf-8 -*-\n \n from django.contrib.auth.decorators import login_required\n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n from django.views.decorators.http import require_POST\n from django.contrib import messages\n from django.contrib.auth.views import redirect_to_login\n@@ -10,8 +10,9 @@\n \n from djconfig import config\n \n-from ...core import utils\n-from ...core.utils.paginator import yt_paginate\n+from spirit.core.utils.http import safe_redirect\n+from spirit.core import utils\n+from spirit.core.utils.paginator import yt_paginate\n from .models import CommentPoll, CommentPollChoice, CommentPollVote\n from .forms import PollVoteManyForm\n \n@@ -35,7 +36,7 @@ def close_or_open(request, pk, close=True):\n      .filter(pk=poll.pk)\n      .update(close_at=close_at))\n \n-    return redirect(request.GET.get('next', poll.get_absolute_url()))\n+    return safe_redirect(request, 'next', poll.get_absolute_url())\n \n \n @require_POST\n@@ -55,10 +56,10 @@ def vote(request, pk):\n         CommentPollChoice.decrease_vote_count(poll=poll, voter=request.user)\n         form.save_m2m()\n         CommentPollChoice.increase_vote_count(poll=poll, voter=request.user)\n-        return redirect(request.POST.get('next', poll.get_absolute_url()))\n+        return safe_redirect(request, 'next', poll.get_absolute_url(), method='POST')\n \n     messages.error(request, utils.render_form_errors(form))\n-    return redirect(request.POST.get('next', poll.get_absolute_url()))\n+    return safe_redirect(request, 'next', poll.get_absolute_url(), method='POST')\n \n \n @login_required"
        },
        {
          "filename": "spirit/comment/views.py",
          "status": "modified",
          "additions": 7,
          "deletions": 7,
          "patch": "@@ -8,6 +8,7 @@\n \n from djconfig import config\n \n+from spirit.core.utils.http import safe_redirect\n from spirit.core.utils.views import is_post, post_data, is_ajax\n from spirit.core.utils.ratelimit.decorators import ratelimit\n from spirit.core.utils.decorators import moderator_required\n@@ -41,15 +42,14 @@ def publish(request, topic_id, pk=None):\n     if is_post(request) and not request.is_limited() and form.is_valid():\n         if not user.st.update_post_hash(form.get_comment_hash()):\n             # Hashed comment may have not been saved yet\n-            return redirect(\n-                request.POST.get('next', None) or\n-                Comment\n+            default_url = lambda: (Comment\n                 .get_last_for_topic(topic_id)\n                 .get_absolute_url())\n+            return safe_redirect(request, 'next', default_url, method='POST')\n \n         comment = form.save()\n         comment_posted(comment=comment, mentions=form.mentions)\n-        return redirect(request.POST.get('next', comment.get_absolute_url()))\n+        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,\n@@ -67,7 +67,7 @@ def update(request, pk):\n         pre_comment_update(comment=Comment.objects.get(pk=comment.pk))\n         comment = form.save()\n         post_comment_update(comment=comment)\n-        return redirect(request.POST.get('next', comment.get_absolute_url()))\n+        return safe_redirect(request, 'next', comment.get_absolute_url(), method='POST')\n     return render(\n         request=request,\n         template_name='spirit/comment/update.html',\n@@ -81,7 +81,7 @@ def delete(request, pk, remove=True):\n         (Comment.objects\n          .filter(pk=pk)\n          .update(is_removed=remove))\n-        return redirect(request.GET.get('next', comment.get_absolute_url()))\n+        return safe_redirect(request, 'next', comment.get_absolute_url())\n     return render(\n         request=request,\n         template_name='spirit/comment/moderate.html',\n@@ -104,7 +104,7 @@ def move(request, topic_id):\n     else:\n         messages.error(request, render_form_errors(form))\n \n-    return redirect(request.POST.get('next', topic.get_absolute_url()))\n+    return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n \n \n def find(request, pk):"
        },
        {
          "filename": "spirit/core/utils/decorators.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -4,9 +4,9 @@\n \n from django.core.exceptions import PermissionDenied\n from django.contrib.auth.views import redirect_to_login\n-from django.shortcuts import redirect\n \n from spirit.core.conf import settings\n+from spirit.core.utils.http import safe_redirect\n \n \n def moderator_required(view_func):\n@@ -48,7 +48,7 @@ def guest_only(view_func):\n     @wraps(view_func)\n     def wrapper(request, *args, **kwargs):\n         if request.user.is_authenticated:\n-            return redirect(request.GET.get('next', request.user.st.get_absolute_url()))\n+            return safe_redirect(request, 'next', request.user.st.get_absolute_url())\n \n         return view_func(request, *args, **kwargs)\n "
        },
        {
          "filename": "spirit/core/utils/http.py",
          "status": "added",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -0,0 +1,29 @@\n+# -*- coding: utf-8 -*-\n+\n+from django.shortcuts import redirect\n+from django.utils.encoding import iri_to_uri\n+\n+try:\n+    from django.utils.http import url_has_allowed_host_and_scheme\n+except ImportError:\n+    from django.utils.http import is_safe_url as url_has_allowed_host_and_scheme\n+\n+\n+def _resolve_lazy_url(url):\n+    if callable(url):\n+        return url()\n+    return url\n+\n+\n+def safe_redirect(request, key, default_url='', method='GET'):\n+    next = (\n+        getattr(request, method).get(key, None) or\n+        _resolve_lazy_url(default_url)\n+    )\n+    url_is_safe = url_has_allowed_host_and_scheme(\n+        url=next, allowed_hosts=None)\n+        #allowed_hosts=settings.ALLOWED_HOSTS,\n+        #require_https=request.is_secure())\n+    if url_is_safe:\n+        return redirect(iri_to_uri(next))\n+    return redirect('/')"
        },
        {
          "filename": "spirit/topic/favorite/views.py",
          "status": "modified",
          "additions": 4,
          "deletions": 4,
          "patch": "@@ -2,14 +2,14 @@\n \n from django.contrib.auth.decorators import login_required\n from django.shortcuts import get_object_or_404\n-from django.shortcuts import redirect\n from django.views.decorators.http import require_POST\n from django.contrib import messages\n \n from .models import TopicFavorite\n from .forms import FavoriteForm\n from ..models import Topic\n-from ...core import utils\n+from spirit.core import utils\n+from spirit.core.utils.http import safe_redirect\n \n \n @require_POST\n@@ -23,12 +23,12 @@ def create(request, topic_id):\n     else:\n         messages.error(request, utils.render_form_errors(form))\n \n-    return redirect(request.POST.get('next', topic.get_absolute_url()))\n+    return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n \n \n @require_POST\n @login_required\n def delete(request, pk):\n     favorite = get_object_or_404(TopicFavorite, pk=pk, user=request.user)\n     favorite.delete()\n-    return redirect(request.POST.get('next', favorite.topic.get_absolute_url()))\n+    return safe_redirect(request, 'next', favorite.topic.get_absolute_url(), method='POST')"
        },
        {
          "filename": "spirit/topic/moderate/views.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -1,10 +1,11 @@\n # -*- coding: utf-8 -*-\n \n from django.utils import timezone\n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n from django.contrib import messages\n from django.utils.translation import gettext as _\n \n+from spirit.core.utils.http import safe_redirect\n from spirit.core.utils.views import is_post\n from spirit.core.utils.decorators import moderator_required\n from spirit.comment.models import Comment\n@@ -33,8 +34,7 @@ def _moderate(request, pk, field_name, to_value, action=None, message=None):\n         if message is not None:\n             messages.info(request, message)\n \n-        return redirect(request.POST.get(\n-            'next', topic.get_absolute_url()))\n+        return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,"
        },
        {
          "filename": "spirit/topic/notification/views.py",
          "status": "modified",
          "additions": 7,
          "deletions": 6,
          "patch": "@@ -3,7 +3,7 @@\n import json\n \n from django.contrib.auth.decorators import login_required\n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n from django.views.decorators.http import require_POST\n from django.http import Http404, HttpResponse\n from django.contrib import messages\n@@ -18,6 +18,7 @@\n from spirit.core.utils.paginator import yt_paginate\n from spirit.core.utils.paginator.infinite_paginator import paginate\n from spirit.core.utils.views import is_ajax\n+from spirit.core.utils.http import safe_redirect\n from spirit.topic.models import Topic\n from .models import TopicNotification\n from .forms import NotificationForm, NotificationCreationForm\n@@ -39,7 +40,7 @@ def create(request, topic_id):\n     else:\n         messages.error(request, utils.render_form_errors(form))\n \n-    return redirect(request.POST.get('next', topic.get_absolute_url()))\n+    return safe_redirect(request, 'next', topic.get_absolute_url(), method='POST')\n \n \n @require_POST\n@@ -53,8 +54,8 @@ def update(request, pk):\n     else:\n         messages.error(request, utils.render_form_errors(form))\n \n-    return redirect(request.POST.get(\n-        'next', notification.topic.get_absolute_url()))\n+    return safe_redirect(\n+        request, 'next', notification.topic.get_absolute_url(), method='POST')\n \n \n @login_required\n@@ -124,5 +125,5 @@ def mark_all_as_read(request):\n         .for_access(request.user)\n         .filter(is_read=False)\n         .update(is_read=True))\n-    return redirect(request.POST.get(\n-        'next', reverse('spirit:topic:notification:index')))\n+    return safe_redirect(\n+        request, 'next', reverse('spirit:topic:notification:index'), method='POST')"
        },
        {
          "filename": "spirit/topic/private/views.py",
          "status": "modified",
          "additions": 17,
          "deletions": 14,
          "patch": "@@ -10,14 +10,15 @@\n \n from djconfig import config\n \n-from ...core.conf import settings\n-from ...core import utils\n-from ...core.utils.views import is_post, post_data\n-from ...core.utils.paginator import paginate, yt_paginate\n-from ...core.utils.ratelimit.decorators import ratelimit\n-from ...comment.forms import CommentForm\n-from ...comment.utils import comment_posted\n-from ...comment.models import Comment\n+from spirit.core.conf import settings\n+from spirit.core import utils\n+from spirit.core.utils.http import safe_redirect\n+from spirit.core.utils.views import is_post, post_data\n+from spirit.core.utils.paginator import paginate, yt_paginate\n+from spirit.core.utils.ratelimit.decorators import ratelimit\n+from spirit.comment.forms import CommentForm\n+from spirit.comment.utils import comment_posted\n+from spirit.comment.models import Comment\n from ..models import Topic\n from ..utils import topic_viewed\n from .utils import notify_access\n@@ -50,9 +51,8 @@ def publish(request, user_id=None):\n             all([tform.is_valid(), cform.is_valid(), tpform.is_valid()]) and\n             not request.is_limited()):\n         if not user.st.update_post_hash(tform.get_topic_hash()):\n-            return redirect(\n-                request.POST.get('next', None) or\n-                tform.category.get_absolute_url())\n+            return safe_redirect(\n+                request, 'next', lambda: tform.category.get_absolute_url(), method='POST')\n \n         # wrap in transaction.atomic?\n         topic = tform.save()\n@@ -123,7 +123,8 @@ def create_access(request, topic_id):\n     else:\n         messages.error(request, utils.render_form_errors(form))\n \n-    return redirect(request.POST.get('next', topic_private.get_absolute_url()))\n+    return safe_redirect(\n+        request, 'next', topic_private.get_absolute_url(), method='POST')\n \n \n @login_required\n@@ -136,7 +137,8 @@ def delete_access(request, pk):\n         if request.user.pk == topic_private.user_id:\n             return redirect(reverse(\"spirit:topic:private:index\"))\n \n-        return redirect(request.POST.get('next', topic_private.get_absolute_url()))\n+        return safe_redirect(\n+            request, 'next', topic_private.get_absolute_url(), method='POST')\n \n     return render(\n         request=request,\n@@ -160,7 +162,8 @@ def join_in(request, topic_id):\n     if is_post(request) and form.is_valid():\n         topic_private = form.save()\n         notify_access(user=form.get_user(), topic_private=topic_private)\n-        return redirect(request.POST.get('next', topic.get_absolute_url()))\n+        return safe_redirect(\n+            request, 'next', topic.get_absolute_url(), method='POST')\n     return render(\n         request=request,\n         template_name='spirit/topic/private/join.html',"
        },
        {
          "filename": "spirit/topic/views.py",
          "status": "modified",
          "additions": 5,
          "deletions": 4,
          "patch": "@@ -6,6 +6,7 @@\n \n from djconfig import config\n \n+from spirit.core.utils.http import safe_redirect\n from spirit.core.utils.views import is_post, post_data\n from spirit.core.utils.paginator import paginate, yt_paginate\n from spirit.core.utils.ratelimit.decorators import ratelimit\n@@ -38,9 +39,9 @@ def publish(request, category_id=None):\n             all([form.is_valid(), cform.is_valid()]) and\n             not request.is_limited()):\n         if not user.st.update_post_hash(form.get_topic_hash()):\n-            return redirect(\n-                request.POST.get('next', None) or\n-                form.get_category().get_absolute_url())\n+            default_url = lambda: form.get_category().get_absolute_url()\n+            return safe_redirect(\n+                request, 'next', default_url, method='POST')\n         # wrap in transaction.atomic?\n         topic = form.save()\n         cform.topic = topic\n@@ -66,7 +67,7 @@ def update(request, pk):\n         if topic.category_id != category_id:\n             Comment.create_moderation_action(\n                 user=request.user, topic=topic, action=Comment.MOVED)\n-        return redirect(request.POST.get('next', topic.get_absolute_url()))\n+        return safe_redirect(request,'next', topic.get_absolute_url(), method='POST')\n     return render(\n         request=request,\n         template_name='spirit/topic/update.html',"
        },
        {
          "filename": "spirit/user/admin/views.py",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -1,15 +1,16 @@\n # -*- coding: utf-8 -*-\n \n-from django.shortcuts import render, redirect, get_object_or_404\n+from django.shortcuts import render, get_object_or_404\n from django.contrib.auth import get_user_model\n from django.contrib import messages\n from django.utils.translation import gettext as _\n \n from djconfig import config\n \n-from ...core.utils.views import is_post, post_data\n-from ...core.utils.paginator import yt_paginate\n-from ...core.utils.decorators import administrator_required\n+from spirit.core.utils.http import safe_redirect\n+from spirit.core.utils.views import is_post, post_data\n+from spirit.core.utils.paginator import yt_paginate\n+from spirit.core.utils.decorators import administrator_required\n from .forms import UserForm, UserProfileForm\n \n User = get_user_model()\n@@ -24,7 +25,7 @@ def edit(request, user_id):\n         uform.save()\n         form.save()\n         messages.info(request, _(\"This profile has been updated!\"))\n-        return redirect(request.GET.get(\"next\", request.get_full_path()))\n+        return safe_redirect(request, \"next\", request.get_full_path())\n     return render(\n         request=request,\n         template_name='spirit/user/admin/edit.html',"
        },
        {
          "filename": "spirit/user/auth/tests/tests.py",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -55,6 +55,11 @@ def test_login_redirect(self):\n         response = self.client.get(reverse('spirit:user:auth:login') + '?next=/fakepath/')\n         self.assertRedirects(response, '/fakepath/', status_code=302, target_status_code=404)\n \n+    def test_login_open_redirect(self):\n+        utils.login(self)\n+        response = self.client.get(reverse('spirit:user:auth:login') + '?next=https%3A%2F%2Fevil.com')\n+        self.assertRedirects(response, '/', status_code=302)\n+\n     @override_settings(ST_CASE_INSENSITIVE_EMAILS=True)\n     def test_login_email_case_insensitive(self):\n         \"\"\""
        },
        {
          "filename": "spirit/user/auth/views.py",
          "status": "modified",
          "additions": 7,
          "deletions": 5,
          "patch": "@@ -9,6 +9,7 @@\n from django.urls import reverse_lazy\n \n from spirit.core.conf import settings\n+from spirit.core.utils.http import safe_redirect\n from spirit.core.utils.views import is_post, post_data\n from spirit.core.utils.ratelimit.decorators import ratelimit\n from spirit.user.utils.email import send_activation_email\n@@ -62,7 +63,8 @@ class _CustomLoginView(django_views.LoginView):\n def custom_login(request, **kwargs):\n     # Currently, Django 1.5 login view does not redirect somewhere if the user is logged in\n     if request.user.is_authenticated:\n-        return redirect(request.GET.get('next', request.user.st.get_absolute_url()))\n+        return safe_redirect(\n+            request, 'next', request.user.st.get_absolute_url())\n \n     if request.method == \"POST\" and request.is_limited():\n         return redirect(request.get_full_path())\n@@ -73,7 +75,7 @@ def custom_login(request, **kwargs):\n # TODO: @login_required ?\n def custom_logout(request, **kwargs):\n     if not request.user.is_authenticated:\n-        return redirect(request.GET.get('next', reverse(settings.LOGIN_URL)))\n+        return safe_redirect(request, 'next', reverse(settings.LOGIN_URL))\n \n     if request.method == 'POST':\n         return _logout_view(request, **kwargs)\n@@ -93,7 +95,7 @@ def custom_password_reset(request, **kwargs):\n # TODO: @guest_only\n def register(request, registration_form=RegistrationForm):\n     if request.user.is_authenticated:\n-        return redirect(request.GET.get('next', reverse('spirit:user:update')))\n+        return safe_redirect(request, 'next', reverse('spirit:user:update'))\n \n     form = registration_form(data=post_data(request))\n     if (is_post(request) and\n@@ -109,7 +111,7 @@ def register(request, registration_form=RegistrationForm):\n         # TODO: email-less activation\n         # if not settings.REGISTER_EMAIL_ACTIVATION_REQUIRED:\n         # login(request, user)\n-        # return redirect(request.GET.get('next', reverse('spirit:user:update')))\n+        # return safe_redirect(request, 'next', reverse('spirit:user:update'))\n \n         return redirect(reverse(settings.LOGIN_URL))\n     return render(\n@@ -135,7 +137,7 @@ def registration_activation(request, pk, token):\n # TODO: @guest_only\n def resend_activation_email(request):\n     if request.user.is_authenticated:\n-        return redirect(request.GET.get('next', reverse('spirit:user:update')))\n+        return safe_redirect(request, 'next', reverse('spirit:user:update'))\n \n     form = ResendActivationForm(data=post_data(request))\n     if is_post(request):"
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 14,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "069e82ae07266d1748c5497dc7e22a4d2b46654c",
            "date": "2024-03-27T00:01:34Z",
            "author_login": "nitely"
          },
          {
            "sha": "ad4f4a14e04153e03ccfff766de066e5dff1f138",
            "date": "2023-11-04T21:12:43Z",
            "author_login": "nitely"
          },
          {
            "sha": "9a304a57de021108d9225b87f35ad6395d5d56d3",
            "date": "2023-05-24T09:19:48Z",
            "author_login": "nitely"
          },
          {
            "sha": "186a8091c1e9576708d849a3a909ac37778ccb2e",
            "date": "2023-04-06T00:40:12Z",
            "author_login": "nitely"
          },
          {
            "sha": "4d6168c3b234e0f000959bfe5f6b86fbe90239c4",
            "date": "2023-04-06T00:25:37Z",
            "author_login": "nitely"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-601",
    "description": "Multiple Open Redirect in GitHub repository nitely/spirit prior to 0.12.3.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-06T10:15:08.003",
    "last_modified": "2024-11-21T06:39:34.060",
    "fix_date": "2022-02-23T08:16:32Z"
  },
  "references": [
    {
      "url": "https://github.com/nitely/spirit/commit/8f32f89654d6c30d56e0dd167059d32146fb32ef",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/ed335a88-f68c-4e4d-ac85-f29a51b03342",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nitely/spirit/commit/8f32f89654d6c30d56e0dd167059d32146fb32ef",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/ed335a88-f68c-4e4d-ac85-f29a51b03342",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.782857",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Spirit",
    "owner": "nitely",
    "created_at": "2014-05-09T21:31:33Z",
    "updated_at": "2025-01-12T16:52:43Z",
    "pushed_at": "2024-03-27T00:01:34Z",
    "size": 12048,
    "stars": 1168,
    "forks": 332,
    "open_issues": 40,
    "watchers": 1168,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Python": 862045,
      "CSS": 207949,
      "HTML": 171485,
      "CoffeeScript": 105109,
      "SCSS": 94771,
      "JavaScript": 2759,
      "Makefile": 731
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T21:02:49.248321"
  }
}