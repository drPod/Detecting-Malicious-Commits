{
  "cve_id": "CVE-2022-0870",
  "github_data": {
    "repository": "gogs/gogs",
    "fix_commit": "91f2cde5e95f146bfe4765e837e7282df6c7cabb",
    "related_commits": [
      "91f2cde5e95f146bfe4765e837e7282df6c7cabb",
      "91f2cde5e95f146bfe4765e837e7282df6c7cabb"
    ],
    "patch_url": "https://github.com/gogs/gogs/commit/91f2cde5e95f146bfe4765e837e7282df6c7cabb.patch",
    "fix_commit_details": {
      "sha": "91f2cde5e95f146bfe4765e837e7282df6c7cabb",
      "commit_date": "2022-03-08T03:34:53Z",
      "author": {
        "login": "michaellrowley",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "security: fix SSRF in repository migration (#6812)",
        "length": 153,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 147,
        "additions": 109,
        "deletions": 38
      },
      "files": [
        {
          "filename": "internal/form/repo.go",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -13,6 +13,7 @@ import (\n \t\"gopkg.in/macaron.v1\"\n \n \t\"gogs.io/gogs/internal/db\"\n+\t\"gogs.io/gogs/internal/netutil\"\n )\n \n // _______________________________________    _________.______________________ _______________.___.\n@@ -67,6 +68,11 @@ func (f MigrateRepo) ParseRemoteAddr(user *db.User) (string, error) {\n \t\tif err != nil {\n \t\t\treturn \"\", db.ErrInvalidCloneAddr{IsURLError: true}\n \t\t}\n+\n+\t\tif netutil.IsLocalHostname(u.Hostname()) {\n+\t\t\treturn \"\", db.ErrInvalidCloneAddr{IsURLError: true}\n+\t\t}\n+\n \t\tif len(f.AuthUsername)+len(f.AuthPassword) > 0 {\n \t\t\tu.User = url.UserPassword(f.AuthUsername, f.AuthPassword)\n \t\t}"
        },
        {
          "filename": "internal/netutil/netutil.go",
          "status": "added",
          "additions": 64,
          "deletions": 0,
          "patch": "@@ -0,0 +1,64 @@\n+// Copyright 2022 The Gogs Authors. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+package netutil\n+\n+import (\n+\t\"fmt\"\n+\t\"net\"\n+)\n+\n+var localCIDRs []*net.IPNet\n+\n+func init() {\n+\t// Parsing hardcoded CIDR strings should never fail, if in case it does, let's\n+\t// fail it at start.\n+\trawCIDRs := []string{\n+\t\t// https://datatracker.ietf.org/doc/html/rfc5735:\n+\t\t\"127.0.0.0/8\",        // Loopback\n+\t\t\"0.0.0.0/8\",          // \"This\" network\n+\t\t\"100.64.0.0/10\",      // Shared address space\n+\t\t\"169.254.0.0/16\",     // Link local\n+\t\t\"172.16.0.0/12\",      // Private-use networks\n+\t\t\"192.0.0.0/24\",       // IETF Protocol assignments\n+\t\t\"192.0.2.0/24\",       // TEST-NET-1\n+\t\t\"192.88.99.0/24\",     // 6to4 Relay anycast\n+\t\t\"192.168.0.0/16\",     // Private-use networks\n+\t\t\"198.18.0.0/15\",      // Network interconnect\n+\t\t\"198.51.100.0/24\",    // TEST-NET-2\n+\t\t\"203.0.113.0/24\",     // TEST-NET-3\n+\t\t\"255.255.255.255/32\", // Limited broadcast\n+\n+\t\t// https://datatracker.ietf.org/doc/html/rfc1918:\n+\t\t\"10.0.0.0/8\", // Private-use networks\n+\n+\t\t// https://datatracker.ietf.org/doc/html/rfc6890:\n+\t\t\"::1/128\",   // Loopback\n+\t\t\"FC00::/7\",  // Unique local address\n+\t\t\"FE80::/10\", // Multicast address\n+\t}\n+\tfor _, raw := range rawCIDRs {\n+\t\t_, cidr, err := net.ParseCIDR(raw)\n+\t\tif err != nil {\n+\t\t\tpanic(fmt.Sprintf(\"parse CIDR %q: %v\", raw, err))\n+\t\t}\n+\t\tlocalCIDRs = append(localCIDRs, cidr)\n+\t}\n+}\n+\n+// IsLocalHostname returns true if given hostname is a known local address.\n+func IsLocalHostname(hostname string) bool {\n+\tips, err := net.LookupIP(hostname)\n+\tif err != nil {\n+\t\treturn true\n+\t}\n+\tfor _, ip := range ips {\n+\t\tfor _, cidr := range localCIDRs {\n+\t\t\tif cidr.Contains(ip) {\n+\t\t\t\treturn true\n+\t\t\t}\n+\t\t}\n+\t}\n+\treturn false\n+}"
        },
        {
          "filename": "internal/netutil/netutil_test.go",
          "status": "added",
          "additions": 36,
          "deletions": 0,
          "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2022 The Gogs Authors. All rights reserved.\n+// Use of this source code is governed by a MIT-style\n+// license that can be found in the LICENSE file.\n+\n+package netutil\n+\n+import (\n+\t\"testing\"\n+\n+\t\"github.com/stretchr/testify/assert\"\n+)\n+\n+func TestIsLocalHostname(t *testing.T) {\n+\ttests := []struct {\n+\t\thostname string\n+\t\twant     bool\n+\t}{\n+\t\t{hostname: \"localhost\", want: true},\n+\t\t{hostname: \"127.0.0.1\", want: true},\n+\t\t{hostname: \"::1\", want: true},\n+\t\t{hostname: \"0:0:0:0:0:0:0:1\", want: true},\n+\t\t{hostname: \"fuf.me\", want: true},\n+\t\t{hostname: \"127.0.0.95\", want: true},\n+\t\t{hostname: \"0.0.0.0\", want: true},\n+\t\t{hostname: \"192.168.123.45\", want: true},\n+\n+\t\t{hostname: \"gogs.io\", want: false},\n+\t\t{hostname: \"google.com\", want: false},\n+\t\t{hostname: \"165.232.140.255\", want: false},\n+\t}\n+\tfor _, test := range tests {\n+\t\tt.Run(\"\", func(t *testing.T) {\n+\t\t\tassert.Equal(t, test.want, IsLocalHostname(test.hostname))\n+\t\t})\n+\t}\n+}"
        },
        {
          "filename": "internal/route/repo/webhook.go",
          "status": "modified",
          "additions": 3,
          "deletions": 19,
          "patch": "@@ -20,6 +20,7 @@ import (\n \t\"gogs.io/gogs/internal/db\"\n \t\"gogs.io/gogs/internal/db/errors\"\n \t\"gogs.io/gogs/internal/form\"\n+\t\"gogs.io/gogs/internal/netutil\"\n )\n \n const (\n@@ -118,24 +119,7 @@ func WebhooksNew(c *context.Context, orCtx *orgRepoContext) {\n \tc.Success(orCtx.TmplNew)\n }\n \n-var localHostnames = []string{\n-\t\"localhost\",\n-\t\"127.0.0.1\",\n-\t\"::1\",\n-\t\"0:0:0:0:0:0:0:1\",\n-}\n-\n-// isLocalHostname returns true if given hostname is a known local address.\n-func isLocalHostname(hostname string) bool {\n-\tfor _, local := range localHostnames {\n-\t\tif hostname == local {\n-\t\t\treturn true\n-\t\t}\n-\t}\n-\treturn false\n-}\n-\n-func validateWebhook(actor *db.User, l macaron.Locale, w *db.Webhook) (field string, msg string, ok bool) {\n+func validateWebhook(actor *db.User, l macaron.Locale, w *db.Webhook) (field, msg string, ok bool) {\n \tif !actor.IsAdmin {\n \t\t// \ud83d\udea8 SECURITY: Local addresses must not be allowed by non-admins to prevent SSRF,\n \t\t// see https://github.com/gogs/gogs/issues/5366 for details.\n@@ -144,7 +128,7 @@ func validateWebhook(actor *db.User, l macaron.Locale, w *db.Webhook) (field str\n \t\t\treturn \"PayloadURL\", l.Tr(\"repo.settings.webhook.err_cannot_parse_payload_url\", err), false\n \t\t}\n \n-\t\tif isLocalHostname(payloadURL.Hostname()) {\n+\t\tif netutil.IsLocalHostname(payloadURL.Hostname()) {\n \t\t\treturn \"PayloadURL\", l.Tr(\"repo.settings.webhook.err_cannot_use_local_addresses\"), false\n \t\t}\n \t}"
        },
        {
          "filename": "internal/route/repo/webhook_test.go",
          "status": "modified",
          "additions": 0,
          "deletions": 19,
          "patch": "@@ -13,25 +13,6 @@ import (\n \t\"gogs.io/gogs/internal/mocks\"\n )\n \n-func Test_isLocalHostname(t *testing.T) {\n-\ttests := []struct {\n-\t\thostname string\n-\t\twant     bool\n-\t}{\n-\t\t{hostname: \"localhost\", want: true},\n-\t\t{hostname: \"127.0.0.1\", want: true},\n-\t\t{hostname: \"::1\", want: true},\n-\t\t{hostname: \"0:0:0:0:0:0:0:1\", want: true},\n-\n-\t\t{hostname: \"gogs.io\", want: false},\n-\t}\n-\tfor _, test := range tests {\n-\t\tt.Run(\"\", func(t *testing.T) {\n-\t\t\tassert.Equal(t, test.want, isLocalHostname(test.hostname))\n-\t\t})\n-\t}\n-}\n-\n func Test_validateWebhook(t *testing.T) {\n \tl := &mocks.Locale{\n \t\tMockLang: \"en\","
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "96d5d622b8d55c426861df74de8b88dc9870d36f",
            "date": "2025-01-02T00:46:13Z",
            "author_login": "unknwon"
          },
          {
            "sha": "b59e943aa65316a74a6c0a51941ffd7263744f5c",
            "date": "2025-01-02T00:41:24Z",
            "author_login": "MarcUs7i"
          },
          {
            "sha": "371a6092ded5250757fd9d62adc0eb220faea360",
            "date": "2025-01-01T16:18:34Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e6896eb3935e49242424b58ea082b3cfc4502caa",
            "date": "2025-01-01T16:11:51Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6c04a1ce7c754e295b0cd2f6963a79fe1bfb6688",
            "date": "2025-01-01T15:37:55Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "Server-Side Request Forgery (SSRF) in GitHub repository gogs/gogs prior to 0.12.5.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-11T11:15:07.897",
    "last_modified": "2024-11-21T06:39:34.190",
    "fix_date": "2022-03-08T03:34:53Z"
  },
  "references": [
    {
      "url": "https://github.com/gogs/gogs/commit/91f2cde5e95f146bfe4765e837e7282df6c7cabb",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/327797d7-ae41-498f-9bff-cc0bf98cf531",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/gogs/gogs/commit/91f2cde5e95f146bfe4765e837e7282df6c7cabb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/327797d7-ae41-498f-9bff-cc0bf98cf531",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:01.988188",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "gogs",
    "owner": "gogs",
    "created_at": "2014-02-12T01:57:08Z",
    "updated_at": "2025-01-14T08:26:37Z",
    "pushed_at": "2025-01-02T00:46:14Z",
    "size": 207255,
    "stars": 45328,
    "forks": 4884,
    "open_issues": 940,
    "watchers": 45328,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Go": 1511466,
      "Less": 60542,
      "JavaScript": 47845,
      "Shell": 26321,
      "Batchfile": 932,
      "Dockerfile": 890,
      "Procfile": 33
    },
    "commit_activity": {
      "total_commits_last_year": 105,
      "avg_commits_per_week": 2.019230769230769,
      "days_active_last_year": 55
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T12:56:32.136099"
  }
}