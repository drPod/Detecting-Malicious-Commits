{
  "cve_id": "CVE-2022-0877",
  "github_data": {
    "repository": "bookstackapp/bookstack",
    "fix_commit": "856fca8289b7370cafa033ea21c408e7d4303fd6",
    "related_commits": [
      "856fca8289b7370cafa033ea21c408e7d4303fd6",
      "856fca8289b7370cafa033ea21c408e7d4303fd6"
    ],
    "patch_url": "https://github.com/bookstackapp/bookstack/commit/856fca8289b7370cafa033ea21c408e7d4303fd6.patch",
    "fix_commit_details": {
      "sha": "856fca8289b7370cafa033ea21c408e7d4303fd6",
      "commit_date": "2022-03-07T14:27:41Z",
      "author": {
        "login": "ssddanbrown",
        "type": "User",
        "stats": {
          "total_commits": 3432,
          "average_weekly_commits": 6.905432595573441,
          "total_additions": 633335,
          "total_deletions": 385989,
          "weeks_active": 420
        }
      },
      "commit_message": {
        "title": "Updated CSP with frame-src rules",
        "length": 265,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 200,
        "additions": 154,
        "deletions": 46
      },
      "files": [
        {
          "filename": ".env.example.complete",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -331,6 +331,13 @@ ALLOW_UNTRUSTED_SERVER_FETCHING=false\n # Setting this option will also auto-adjust cookies to be SameSite=None.\n ALLOWED_IFRAME_HOSTS=null\n \n+# A list of sources/hostnames that can be loaded within iframes within BookStack.\n+# Space separated if multiple. BookStack host domain is auto-inferred.\n+# Can be set to a lone \"*\" to allow all sources for iframe content (Not advised).\n+# Defaults to a set of common services.\n+# Current host and source for the \"DRAWIO\" setting will be auto-appended to the sources configured.\n+ALLOWED_IFRAME_SOURCES=\"https://*.draw.io https://*.youtube.com https://*.youtube-nocookie.com https://*.vimeo.com\"\n+\n # The default and maximum item-counts for listing API requests.\n API_DEFAULT_ITEM_COUNT=100\n API_MAX_ITEM_COUNT=500"
        },
        {
          "filename": "app/Config/app.php",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -57,6 +57,13 @@\n     // Space separated if multiple. BookStack host domain is auto-inferred.\n     'iframe_hosts' => env('ALLOWED_IFRAME_HOSTS', null),\n \n+    // A list of sources/hostnames that can be loaded within iframes within BookStack.\n+    // Space separated if multiple. BookStack host domain is auto-inferred.\n+    // Can be set to a lone \"*\" to allow all sources for iframe content (Not advised).\n+    // Defaults to a set of common services.\n+    // Current host and source for the \"DRAWIO\" setting will be auto-appended to the sources configured.\n+    'iframe_sources' => env('ALLOWED_IFRAME_SOURCES', 'https://*.draw.io https://*.youtube.com https://*.youtube-nocookie.com https://*.vimeo.com'),\n+\n     // Application timezone for back-end date functions.\n     'timezone' => env('APP_TIMEZONE', 'UTC'),\n "
        },
        {
          "filename": "app/Entities/Tools/ExportFormatter.php",
          "status": "modified",
          "additions": 14,
          "deletions": 8,
          "patch": "@@ -7,6 +7,7 @@\n use BookStack\\Entities\\Models\\Page;\n use BookStack\\Entities\\Tools\\Markdown\\HtmlToMarkdown;\n use BookStack\\Uploads\\ImageService;\n+use BookStack\\Util\\CspService;\n use DOMDocument;\n use DOMElement;\n use DOMXPath;\n@@ -15,16 +16,18 @@\n \n class ExportFormatter\n {\n-    protected $imageService;\n-    protected $pdfGenerator;\n+    protected ImageService $imageService;\n+    protected PdfGenerator $pdfGenerator;\n+    protected CspService $cspService;\n \n     /**\n      * ExportService constructor.\n      */\n-    public function __construct(ImageService $imageService, PdfGenerator $pdfGenerator)\n+    public function __construct(ImageService $imageService, PdfGenerator $pdfGenerator, CspService $cspService)\n     {\n         $this->imageService = $imageService;\n         $this->pdfGenerator = $pdfGenerator;\n+        $this->cspService = $cspService;\n     }\n \n     /**\n@@ -37,8 +40,9 @@ public function pageToContainedHtml(Page $page)\n     {\n         $page->html = (new PageContent($page))->render();\n         $pageHtml = view('pages.export', [\n-            'page'   => $page,\n-            'format' => 'html',\n+            'page'       => $page,\n+            'format'     => 'html',\n+            'cspContent' => $this->cspService->getCspMetaTagValue(),\n         ])->render();\n \n         return $this->containHtml($pageHtml);\n@@ -56,9 +60,10 @@ public function chapterToContainedHtml(Chapter $chapter)\n             $page->html = (new PageContent($page))->render();\n         });\n         $html = view('chapters.export', [\n-            'chapter' => $chapter,\n-            'pages'   => $pages,\n-            'format'  => 'html',\n+            'chapter'    => $chapter,\n+            'pages'      => $pages,\n+            'format'     => 'html',\n+            'cspContent' => $this->cspService->getCspMetaTagValue(),\n         ])->render();\n \n         return $this->containHtml($html);\n@@ -76,6 +81,7 @@ public function bookToContainedHtml(Book $book)\n             'book'         => $book,\n             'bookChildren' => $bookTree,\n             'format'       => 'html',\n+            'cspContent'   => $this->cspService->getCspMetaTagValue(),\n         ])->render();\n \n         return $this->containHtml($html);"
        },
        {
          "filename": "app/Http/Middleware/ApplyCspRules.php",
          "status": "modified",
          "additions": 3,
          "deletions": 8,
          "patch": "@@ -8,10 +8,7 @@\n \n class ApplyCspRules\n {\n-    /**\n-     * @var CspService\n-     */\n-    protected $cspService;\n+    protected CspService $cspService;\n \n     public function __construct(CspService $cspService)\n     {\n@@ -35,10 +32,8 @@ public function handle($request, Closure $next)\n \n         $response = $next($request);\n \n-        $this->cspService->setFrameAncestors($response);\n-        $this->cspService->setScriptSrc($response);\n-        $this->cspService->setObjectSrc($response);\n-        $this->cspService->setBaseUri($response);\n+        $cspHeader = $this->cspService->getCspHeader();\n+        $response->headers->set('Content-Security-Policy', $cspHeader, false);\n \n         return $response;\n     }"
        },
        {
          "filename": "app/Util/CspService.php",
          "status": "modified",
          "additions": 77,
          "deletions": 25,
          "patch": "@@ -3,12 +3,10 @@\n namespace BookStack\\Util;\n \n use Illuminate\\Support\\Str;\n-use Symfony\\Component\\HttpFoundation\\Response;\n \n class CspService\n {\n-    /** @var string */\n-    protected $nonce;\n+    protected string $nonce;\n \n     public function __construct(string $nonce = '')\n     {\n@@ -24,13 +22,51 @@ public function getNonce(): string\n     }\n \n     /**\n-     * Sets CSP 'script-src' headers to restrict the forms of script that can\n-     * run on the page.\n+     * Get the CSP headers for the application\n      */\n-    public function setScriptSrc(Response $response)\n+    public function getCspHeader(): string\n+    {\n+        $headers = [\n+            $this->getFrameAncestors(),\n+            $this->getFrameSrc(),\n+            $this->getScriptSrc(),\n+            $this->getObjectSrc(),\n+            $this->getBaseUri(),\n+        ];\n+\n+        return implode('; ', array_filter($headers));\n+    }\n+\n+    /**\n+     * Get the CSP rules for the application for a HTML meta tag.\n+     */\n+    public function getCspMetaTagValue(): string\n+    {\n+        $headers = [\n+            $this->getFrameSrc(),\n+            $this->getScriptSrc(),\n+            $this->getObjectSrc(),\n+            $this->getBaseUri(),\n+        ];\n+\n+        return implode('; ', array_filter($headers));\n+    }\n+\n+    /**\n+     * Check if the user has configured some allowed iframe hosts.\n+     */\n+    public function allowedIFrameHostsConfigured(): bool\n+    {\n+        return count($this->getAllowedIframeHosts()) > 0;\n+    }\n+\n+    /**\n+     * Create CSP 'script-src' rule to restrict the forms of script that can run on the page.\n+     */\n+    protected function getScriptSrc(): string\n     {\n         if (config('app.allow_content_scripts')) {\n-            return;\n+            return '';\n         }\n \n         $parts = [\n@@ -40,51 +76,50 @@ public function setScriptSrc(Response $response)\n             '\\'strict-dynamic\\'',\n         ];\n \n-        $value = 'script-src ' . implode(' ', $parts);\n-        $response->headers->set('Content-Security-Policy', $value, false);\n+        return 'script-src ' . implode(' ', $parts);\n     }\n \n     /**\n-     * Sets CSP \"frame-ancestors\" headers to restrict the hosts that BookStack can be\n-     * iframed within. Also adjusts the cookie samesite options so that cookies will\n-     * operate in the third-party context.\n+     * Create CSP \"frame-ancestors\" rule to restrict the hosts that BookStack can be iframed within.\n      */\n-    public function setFrameAncestors(Response $response)\n+    protected function getFrameAncestors(): string\n     {\n         $iframeHosts = $this->getAllowedIframeHosts();\n         array_unshift($iframeHosts, \"'self'\");\n-        $cspValue = 'frame-ancestors ' . implode(' ', $iframeHosts);\n-        $response->headers->set('Content-Security-Policy', $cspValue, false);\n+        return 'frame-ancestors ' . implode(' ', $iframeHosts);\n     }\n \n     /**\n-     * Check if the user has configured some allowed iframe hosts.\n+     * Creates CSP \"frame-src\" rule to restrict what hosts/sources can be loaded\n+     * within iframes to provide an allow-list-style approach to iframe content.\n      */\n-    public function allowedIFrameHostsConfigured(): bool\n+    protected function getFrameSrc(): string\n     {\n-        return count($this->getAllowedIframeHosts()) > 0;\n+        $iframeHosts = $this->getAllowedIframeSources();\n+        array_unshift($iframeHosts, \"'self'\");\n+        return 'frame-src ' . implode(' ', $iframeHosts);\n     }\n \n     /**\n-     * Sets CSP 'object-src' headers to restrict the types of dynamic content\n+     * Creates CSP 'object-src' rule to restrict the types of dynamic content\n      * that can be embedded on the page.\n      */\n-    public function setObjectSrc(Response $response)\n+    protected function getObjectSrc(): string\n     {\n         if (config('app.allow_content_scripts')) {\n-            return;\n+            return '';\n         }\n \n-        $response->headers->set('Content-Security-Policy', 'object-src \\'self\\'', false);\n+        return \"object-src 'self'\";\n     }\n \n     /**\n-     * Sets CSP 'base-uri' headers to restrict what base tags can be set on\n+     * Creates CSP 'base-uri' rule to restrict what base tags can be set on\n      * the page to prevent manipulation of relative links.\n      */\n-    public function setBaseUri(Response $response)\n+    protected function getBaseUri(): string\n     {\n-        $response->headers->set('Content-Security-Policy', 'base-uri \\'self\\'', false);\n+        return \"base-uri 'self'\";\n     }\n \n     protected function getAllowedIframeHosts(): array\n@@ -93,4 +128,21 @@ protected function getAllowedIframeHosts(): array\n \n         return array_filter(explode(' ', $hosts));\n     }\n+\n+    protected function getAllowedIframeSources(): array\n+    {\n+        $sources = config('app.iframe_sources', '');\n+        $hosts = array_filter(explode(' ', $sources));\n+\n+        // Extract drawing service url to allow embedding if active\n+        $drawioConfigValue = config('services.drawio');\n+        if ($drawioConfigValue) {\n+            $drawioSource = is_string($drawioConfigValue) ? $drawioConfigValue : 'https://embed.diagrams.net/';\n+            $drawioSourceParsed = parse_url($drawioSource);\n+            $drawioHost = $drawioSourceParsed['scheme'] . '://' . $drawioSourceParsed['host'];\n+            $hosts[] = $drawioHost;\n+        }\n+\n+        return $hosts;\n+    }\n }"
        },
        {
          "filename": "resources/views/layouts/export.blade.php",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -4,6 +4,10 @@\n     <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n     <title>@yield('title')</title>\n \n+    @if($cspContent ?? false)\n+        <meta http-equiv=\"Content-Security-Policy\" content=\"{{ $cspContent }}\">\n+    @endif\n+\n     @include('common.export-styles', ['format' => $format, 'engine' => $engine ?? ''])\n     @include('common.export-custom-head')\n </head>"
        },
        {
          "filename": "tests/Entity/ExportTest.php",
          "status": "modified",
          "additions": 15,
          "deletions": 1,
          "patch": "@@ -268,7 +268,7 @@ public function test_exports_removes_scripts_from_custom_head()\n         foreach ($entities as $entity) {\n             $resp = $this->asEditor()->get($entity->getUrl('/export/html'));\n             $resp->assertDontSee('window.donkey');\n-            $resp->assertDontSee('script');\n+            $resp->assertDontSee('<script', false);\n             $resp->assertSee('.my-test-class { color: red; }');\n         }\n     }\n@@ -448,4 +448,18 @@ public function test_wkhtmltopdf_only_used_when_allow_untrusted_is_true()\n         $resp = $this->get($page->getUrl('/export/pdf'));\n         $resp->assertStatus(500); // Bad response indicates wkhtml usage\n     }\n+\n+    public function test_html_exports_contain_csp_meta_tag()\n+    {\n+        $entities = [\n+            Page::query()->first(),\n+            Book::query()->first(),\n+            Chapter::query()->first(),\n+        ];\n+\n+        foreach ($entities as $entity) {\n+            $resp = $this->asEditor()->get($entity->getUrl('/export/html'));\n+            $resp->assertElementExists('head meta[http-equiv=\"Content-Security-Policy\"][content*=\"script-src \"]');\n+        }\n+    }\n }"
        },
        {
          "filename": "tests/SecurityHeaderTest.php",
          "status": "modified",
          "additions": 27,
          "deletions": 4,
          "patch": "@@ -119,6 +119,25 @@ public function test_base_uri_csp_header_set()\n         $this->assertEquals('base-uri \\'self\\'', $scriptHeader);\n     }\n \n+    public function test_frame_src_csp_header_set()\n+    {\n+        $resp = $this->get('/');\n+        $scriptHeader = $this->getCspHeader($resp, 'frame-src');\n+        $this->assertEquals('frame-src \\'self\\' https://*.draw.io https://*.youtube.com https://*.youtube-nocookie.com https://*.vimeo.com', $scriptHeader);\n+    }\n+\n+    public function test_frame_src_csp_header_has_drawio_host_added()\n+    {\n+        config()->set([\n+            'app.iframe_sources' => 'https://example.com',\n+            'services.drawio'   => 'https://diagrams.example.com/testing?cat=dog',\n+        ]);\n+\n+        $resp = $this->get('/');\n+        $scriptHeader = $this->getCspHeader($resp, 'frame-src');\n+        $this->assertEquals('frame-src \\'self\\' https://example.com https://diagrams.example.com', $scriptHeader);\n+    }\n+\n     public function test_cache_control_headers_are_strict_on_responses_when_logged_in()\n     {\n         $this->asEditor();\n@@ -133,10 +152,14 @@ public function test_cache_control_headers_are_strict_on_responses_when_logged_i\n      */\n     protected function getCspHeader(TestResponse $resp, string $type): string\n     {\n-        $cspHeaders = collect($resp->headers->all('Content-Security-Policy'));\n+        $cspHeaders = explode('; ', $resp->headers->get('Content-Security-Policy'));\n+\n+        foreach ($cspHeaders as $cspHeader) {\n+            if (strpos($cspHeader, $type) === 0) {\n+                return $cspHeader;\n+            }\n+        }\n \n-        return $cspHeaders->filter(function ($val) use ($type) {\n-            return strpos($val, $type) === 0;\n-        })->first() ?? '';\n+        return '';\n     }\n }"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 8,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "786a434c03faa996e630f4a0a523567d3b093f43",
            "date": "2025-01-14T14:56:43Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "25c4f4b02ba06f66f5239de48ae005f895146f8d",
            "date": "2025-01-14T14:53:10Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "481580be172a4813ee98ad1b945d12d731e71cdb",
            "date": "2025-01-13T16:51:07Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "593645acfe8521db97d7469c92546c8529703969",
            "date": "2025-01-13T14:30:53Z",
            "author_login": "ssddanbrown"
          },
          {
            "sha": "b9751807e7bad4b7d477b6977f630881f730abad",
            "date": "2025-01-13T13:27:32Z",
            "author_login": "ssddanbrown"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Stored in GitHub repository bookstackapp/bookstack prior to v22.02.3.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-08T13:15:08.153",
    "last_modified": "2024-11-21T06:39:34.917",
    "fix_date": "2022-03-07T14:27:41Z"
  },
  "references": [
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/856fca8289b7370cafa033ea21c408e7d4303fd6",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/b04df4e3-ae5a-4dc6-81ec-496248b15f3c",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/bookstackapp/bookstack/commit/856fca8289b7370cafa033ea21c408e7d4303fd6",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/b04df4e3-ae5a-4dc6-81ec-496248b15f3c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.784587",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "BookStack",
    "owner": "bookstackapp",
    "created_at": "2015-08-29T10:26:44Z",
    "updated_at": "2025-01-14T12:14:34Z",
    "pushed_at": "2025-01-13T20:16:47Z",
    "size": 41179,
    "stars": 15786,
    "forks": 1978,
    "open_issues": 598,
    "watchers": 15786,
    "has_security_policy": false,
    "default_branch": "development",
    "protected_branches": [
      "release"
    ],
    "languages": {
      "PHP": 7963438,
      "TypeScript": 1856418,
      "Blade": 444101,
      "JavaScript": 287858,
      "SCSS": 139395,
      "Dockerfile": 1282,
      "Shell": 347
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:05:28.288711"
  }
}