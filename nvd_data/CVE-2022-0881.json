{
  "cve_id": "CVE-2022-0881",
  "github_data": {
    "repository": "chocobozzz/peertube",
    "fix_commit": "0c058f256a195b92f124be10109c95d1fbe93ad8",
    "related_commits": [
      "0c058f256a195b92f124be10109c95d1fbe93ad8",
      "0c058f256a195b92f124be10109c95d1fbe93ad8"
    ],
    "patch_url": "https://github.com/chocobozzz/peertube/commit/0c058f256a195b92f124be10109c95d1fbe93ad8.patch",
    "fix_commit_details": {
      "sha": "0c058f256a195b92f124be10109c95d1fbe93ad8",
      "commit_date": "2022-03-07T16:16:54Z",
      "author": {
        "login": "Chocobozzz",
        "type": "User",
        "stats": {
          "total_commits": 7381,
          "average_weekly_commits": 17.657894736842106,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 332
        }
      },
      "commit_message": {
        "title": "Remove exif tags when processing images",
        "length": 39,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 79,
        "additions": 67,
        "deletions": 12
      },
      "files": [
        {
          "filename": ".github/actions/reusable-prepare-peertube-run/action.yml",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -8,7 +8,7 @@ runs:\n     - name: Setup system dependencies\n       shell: bash\n       run: |\n-        sudo apt-get install postgresql-client-common redis-tools parallel\n+        sudo apt-get install postgresql-client-common redis-tools parallel libimage-exiftool-perl\n         wget --quiet --no-check-certificate \"https://download.cpy.re/ffmpeg/ffmpeg-release-4.3.1-64bit-static.tar.xz\"\n         tar xf ffmpeg-release-4.3.1-64bit-static.tar.xz\n         mkdir -p $HOME/bin"
        },
        {
          "filename": "server/helpers/image-utils.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -80,6 +80,8 @@ async function autoResize (options: {\n   const sourceIsPortrait = sourceImage.getWidth() < sourceImage.getHeight()\n   const destIsPortraitOrSquare = newSize.width <= newSize.height\n \n+  removeExif(sourceImage)\n+\n   if (sourceIsPortrait && !destIsPortraitOrSquare) {\n     const baseImage = sourceImage.cloneQuiet().cover(newSize.width, newSize.height)\n                                               .color([ { apply: 'shade', params: [ 50 ] } ])\n@@ -106,6 +108,7 @@ function skipProcessing (options: {\n   const { sourceImage, newSize, imageBytes, inputExt, outputExt } = options\n   const { width, height } = newSize\n \n+  if (hasExif(sourceImage)) return false\n   if (sourceImage.getWidth() > width || sourceImage.getHeight() > height) return false\n   if (inputExt !== outputExt) return false\n \n@@ -116,3 +119,11 @@ function skipProcessing (options: {\n \n   return imageBytes <= 15 * kB\n }\n+\n+function hasExif (image: Jimp) {\n+  return !!(image.bitmap as any).exifBuffer\n+}\n+\n+function removeExif (image: Jimp) {\n+  (image.bitmap as any).exifBuffer = null\n+}"
        },
        {
          "filename": "server/tests/fixtures/exif.jpg",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "server/tests/fixtures/exif.png",
          "status": "added",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "server/tests/helpers/image.ts",
          "status": "modified",
          "additions": 48,
          "deletions": 10,
          "patch": "@@ -4,6 +4,7 @@ import 'mocha'\n import { expect } from 'chai'\n import { readFile, remove } from 'fs-extra'\n import { join } from 'path'\n+import { execPromise } from '@server/helpers/core-utils'\n import { buildAbsoluteFixturePath, root } from '@shared/core-utils'\n import { processImage } from '../../../server/helpers/image-utils'\n \n@@ -20,40 +21,77 @@ async function checkBuffers (path1: string, path2: string, equals: boolean) {\n   }\n }\n \n+async function hasTitleExif (path: string) {\n+  const result = JSON.parse(await execPromise(`exiftool -json ${path}`))\n+\n+  return result[0]?.Title === 'should be removed'\n+}\n+\n describe('Image helpers', function () {\n   const imageDestDir = join(root(), 'test-images')\n-  const imageDest = join(imageDestDir, 'test.jpg')\n+\n+  const imageDestJPG = join(imageDestDir, 'test.jpg')\n+  const imageDestPNG = join(imageDestDir, 'test.png')\n+\n   const thumbnailSize = { width: 223, height: 122 }\n \n   it('Should skip processing if the source image is okay', async function () {\n     const input = buildAbsoluteFixturePath('thumbnail.jpg')\n-    await processImage(input, imageDest, thumbnailSize, true)\n+    await processImage(input, imageDestJPG, thumbnailSize, true)\n \n-    await checkBuffers(input, imageDest, true)\n+    await checkBuffers(input, imageDestJPG, true)\n   })\n \n   it('Should not skip processing if the source image does not have the appropriate extension', async function () {\n     const input = buildAbsoluteFixturePath('thumbnail.png')\n-    await processImage(input, imageDest, thumbnailSize, true)\n+    await processImage(input, imageDestJPG, thumbnailSize, true)\n \n-    await checkBuffers(input, imageDest, false)\n+    await checkBuffers(input, imageDestJPG, false)\n   })\n \n   it('Should not skip processing if the source image does not have the appropriate size', async function () {\n     const input = buildAbsoluteFixturePath('preview.jpg')\n-    await processImage(input, imageDest, thumbnailSize, true)\n+    await processImage(input, imageDestJPG, thumbnailSize, true)\n \n-    await checkBuffers(input, imageDest, false)\n+    await checkBuffers(input, imageDestJPG, false)\n   })\n \n   it('Should not skip processing if the source image does not have the appropriate size', async function () {\n     const input = buildAbsoluteFixturePath('thumbnail-big.jpg')\n-    await processImage(input, imageDest, thumbnailSize, true)\n+    await processImage(input, imageDestJPG, thumbnailSize, true)\n+\n+    await checkBuffers(input, imageDestJPG, false)\n+  })\n+\n+  it('Should strip exif for a jpg file that can not be copied', async function () {\n+    const input = buildAbsoluteFixturePath('exif.jpg')\n+    expect(await hasTitleExif(input)).to.be.true\n+\n+    await processImage(input, imageDestJPG, { width: 100, height: 100 }, true)\n+    await checkBuffers(input, imageDestJPG, false)\n+\n+    expect(await hasTitleExif(imageDestJPG)).to.be.false\n+  })\n+\n+  it('Should strip exif for a jpg file that could be copied', async function () {\n+    const input = buildAbsoluteFixturePath('exif.jpg')\n+    expect(await hasTitleExif(input)).to.be.true\n+\n+    await processImage(input, imageDestJPG, thumbnailSize, true)\n+    await checkBuffers(input, imageDestJPG, false)\n+\n+    expect(await hasTitleExif(imageDestJPG)).to.be.false\n+  })\n+\n+  it('Should strip exif for png', async function () {\n+    const input = buildAbsoluteFixturePath('exif.png')\n+    expect(await hasTitleExif(input)).to.be.true\n \n-    await checkBuffers(input, imageDest, false)\n+    await processImage(input, imageDestPNG, thumbnailSize, true)\n+    expect(await hasTitleExif(imageDestPNG)).to.be.false\n   })\n \n   after(async function () {\n-    await remove(imageDest)\n+    await remove(imageDestDir)\n   })\n })"
        },
        {
          "filename": "support/doc/development/tests.md",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -31,6 +31,12 @@ $ sudo docker run -p 9444:9000 chocobozzz/s3-ninja\n $ sudo docker run -p 10389:10389 chocobozzz/docker-test-openldap\n ```\n \n+Ensure you also have these commands:\n+\n+```\n+$ exiftool --help\n+```\n+\n ### Test\n \n To run all test suites:\n@@ -39,7 +45,7 @@ To run all test suites:\n $ npm run test # See scripts/test.sh to run a particular suite\n ```\n \n-Most of tests can be runned using:\n+Most of tests can be run using:\n \n ```bash\n TS_NODE_TRANSPILE_ONLY=true npm run mocha -- --timeout 30000 --exit -r ts-node/register -r tsconfig-paths/register --bail server/tests/api/videos/video-transcoder.ts"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 4,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c31084ce5bc31a5ab0d1bfb014afe509e9d9e7a1",
            "date": "2025-01-04T16:19:34Z",
            "author_login": "zbirkenbuel"
          },
          {
            "sha": "4967d25d4619bf98dd30ddf68b780e683a844ba2",
            "date": "2025-01-14T12:27:18Z",
            "author_login": "Chocobozzz"
          },
          {
            "sha": "1a568cc65c3938a2832d4816cd5f34807b0f06f8",
            "date": "2025-01-14T12:25:17Z",
            "author_login": "Khyvodul"
          },
          {
            "sha": "e4b6021310447c5723cb08b5a11347f425d177d9",
            "date": "2025-01-14T10:37:03Z",
            "author_login": "Chocobozzz"
          },
          {
            "sha": "e0960c53a99e1d328f89bc726ee81c3f943cc904",
            "date": "2025-01-14T10:32:04Z",
            "author_login": "Chocobozzz"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-922",
    "description": "Insecure Storage of Sensitive Information in GitHub repository chocobozzz/peertube prior to 4.1.1.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-09T09:15:07.117",
    "last_modified": "2024-11-21T06:39:35.450",
    "fix_date": "2022-03-07T16:16:54Z"
  },
  "references": [
    {
      "url": "https://github.com/chocobozzz/peertube/commit/0c058f256a195b92f124be10109c95d1fbe93ad8",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/2628431e-6a98-4063-a0e3-a8b1d9ebaa9c",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/chocobozzz/peertube/commit/0c058f256a195b92f124be10109c95d1fbe93ad8",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/2628431e-6a98-4063-a0e3-a8b1d9ebaa9c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.786391",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "PeerTube",
    "owner": "chocobozzz",
    "created_at": "2015-10-29T22:09:42Z",
    "updated_at": "2025-01-14T12:54:05Z",
    "pushed_at": "2025-01-14T12:54:00Z",
    "size": 345923,
    "stars": 13329,
    "forks": 1538,
    "open_issues": 625,
    "watchers": 13329,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "master"
    ],
    "languages": {
      "TypeScript": 8063880,
      "HTML": 587956,
      "SCSS": 274504,
      "Shell": 34475,
      "Pug": 22110,
      "JavaScript": 12518,
      "Dockerfile": 332
    },
    "commit_activity": {
      "total_commits_last_year": 1307,
      "avg_commits_per_week": 25.134615384615383,
      "days_active_last_year": 233
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:52:13.645385"
  }
}