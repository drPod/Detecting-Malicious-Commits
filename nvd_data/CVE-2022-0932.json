{
  "cve_id": "CVE-2022-0932",
  "github_data": {
    "repository": "saleor/saleor",
    "fix_commit": "521dfd6394f3926a77c60d8633c058e16d0f916d",
    "related_commits": [
      "521dfd6394f3926a77c60d8633c058e16d0f916d",
      "521dfd6394f3926a77c60d8633c058e16d0f916d"
    ],
    "patch_url": "https://github.com/saleor/saleor/commit/521dfd6394f3926a77c60d8633c058e16d0f916d.patch",
    "fix_commit_details": {
      "sha": "521dfd6394f3926a77c60d8633c058e16d0f916d",
      "commit_date": "2022-03-01T08:33:10Z",
      "author": {
        "login": "IKarbowiak",
        "type": "User",
        "stats": {
          "total_commits": 1615,
          "average_weekly_commits": 2.592295345104334,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 213
        }
      },
      "commit_message": {
        "title": "Require manage orders for fetching `user.orders` (#9128)",
        "length": 214,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 115,
        "additions": 104,
        "deletions": 11
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -6,6 +6,9 @@ All notable, unreleased changes to this project will be documented in this file.\n # Unreleased\n \n ### Breaking changes\n+- Require manage orders for fetching `user.orders` - #9128 by @IKarbowiak\n+  - only staff with `manage orders` and can fetch customer orders\n+  - the customer can fetch his own orders, except drafts\n \n ### Other changes\n - Filter Customer/Order/Sale/Product/ProductVariant by datetime of last modification - #9137 by @rafalp"
        },
        {
          "filename": "saleor/graphql/account/tests/benchmark/test_account.py",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -105,7 +105,9 @@ def test_query_staff_user(\n     user_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n     variables = {\"id\": user_id}\n     response = staff_api_client.post_graphql(\n-        query, variables, permissions=[permission_manage_staff]\n+        query,\n+        variables,\n+        permissions=[permission_manage_staff, permission_manage_orders],\n     )\n     content = get_graphql_content(response)\n     data = content[\"data\"][\"user\"]\n@@ -352,10 +354,13 @@ def test_delete_staff_members(\n def test_customers_query(\n     staff_api_client,\n     permission_manage_users,\n+    permission_manage_orders,\n     users_for_customers_benchmarks,\n     count_queries,\n ):\n-    staff_api_client.user.user_permissions.set([permission_manage_users])\n+    staff_api_client.user.user_permissions.set(\n+        [permission_manage_users, permission_manage_orders]\n+    )\n     content = get_graphql_content(staff_api_client.post_graphql(CUSTOMERS_QUERY))\n     assert content[\"data\"][\"customers\"] is not None\n "
        },
        {
          "filename": "saleor/graphql/account/tests/test_account.py",
          "status": "modified",
          "additions": 87,
          "deletions": 6,
          "patch": "@@ -181,6 +181,7 @@ def test_query_customer_user(\n     gift_card_expiry_date,\n     address,\n     permission_manage_users,\n+    permission_manage_orders,\n     media_root,\n     settings,\n ):\n@@ -199,7 +200,9 @@ def test_query_customer_user(\n     query = FULL_USER_QUERY\n     ID = graphene.Node.to_global_id(\"User\", customer_user.id)\n     variables = {\"id\": ID}\n-    staff_api_client.user.user_permissions.add(permission_manage_users)\n+    staff_api_client.user.user_permissions.add(\n+        permission_manage_users, permission_manage_orders\n+    )\n     response = staff_api_client.post_graphql(query, variables)\n     content = get_graphql_content(response)\n     data = content[\"data\"][\"user\"]\n@@ -268,6 +271,7 @@ def test_query_customer_user_with_orders(\n     customer_user,\n     order_list,\n     permission_manage_users,\n+    permission_manage_orders,\n ):\n     # given\n     query = FULL_USER_QUERY\n@@ -291,24 +295,61 @@ def test_query_customer_user_with_orders(\n \n     # when\n     response = staff_api_client.post_graphql(\n-        query, variables, permissions=[permission_manage_users]\n+        query,\n+        variables,\n+        permissions=[permission_manage_users, permission_manage_orders],\n     )\n \n     # then\n     content = get_graphql_content(response)\n     user = content[\"data\"][\"user\"]\n     assert {order[\"node\"][\"id\"] for order in user[\"orders\"][\"edges\"]} == {\n-        graphene.Node.to_global_id(\"Order\", order.pk)\n-        for order in [order_unfulfilled, order_unconfirmed]\n+        graphene.Node.to_global_id(\"Order\", order.pk) for order in order_list\n     }\n \n \n+def test_query_customer_user_with_orders_no_manage_orders_perm(\n+    staff_api_client,\n+    customer_user,\n+    order_list,\n+    permission_manage_users,\n+):\n+    # given\n+    query = FULL_USER_QUERY\n+    order_unfulfilled = order_list[0]\n+    order_unfulfilled.user = customer_user\n+\n+    order_unconfirmed = order_list[1]\n+    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n+    order_unconfirmed.user = customer_user\n+\n+    order_draft = order_list[2]\n+    order_draft.status = OrderStatus.DRAFT\n+    order_draft.user = customer_user\n+\n+    Order.objects.bulk_update(\n+        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n+    )\n+\n+    id = graphene.Node.to_global_id(\"User\", customer_user.id)\n+    variables = {\"id\": id}\n+\n+    # when\n+    response = staff_api_client.post_graphql(\n+        query, variables, permissions=[permission_manage_users]\n+    )\n+\n+    # then\n+    assert_no_permission(response)\n+\n+\n def test_query_customer_user_app(\n     app_api_client,\n     customer_user,\n     address,\n     permission_manage_users,\n     permission_manage_staff,\n+    permission_manage_orders,\n     media_root,\n     app,\n ):\n@@ -327,7 +368,9 @@ def test_query_customer_user_app(\n     query = FULL_USER_QUERY\n     ID = graphene.Node.to_global_id(\"User\", customer_user.id)\n     variables = {\"id\": ID}\n-    app.permissions.add(permission_manage_staff, permission_manage_users)\n+    app.permissions.add(\n+        permission_manage_staff, permission_manage_users, permission_manage_orders\n+    )\n     response = app_api_client.post_graphql(query, variables)\n \n     content = get_graphql_content(response)\n@@ -365,6 +408,41 @@ def test_query_customer_user_app_no_permission(\n     assert_no_permission(response)\n \n \n+def test_query_customer_user_with_orders_by_app_no_manage_orders_perm(\n+    app_api_client,\n+    customer_user,\n+    order_list,\n+    permission_manage_users,\n+):\n+    # given\n+    query = FULL_USER_QUERY\n+    order_unfulfilled = order_list[0]\n+    order_unfulfilled.user = customer_user\n+\n+    order_unconfirmed = order_list[1]\n+    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n+    order_unconfirmed.user = customer_user\n+\n+    order_draft = order_list[2]\n+    order_draft.status = OrderStatus.DRAFT\n+    order_draft.user = customer_user\n+\n+    Order.objects.bulk_update(\n+        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n+    )\n+\n+    id = graphene.Node.to_global_id(\"User\", customer_user.id)\n+    variables = {\"id\": id}\n+\n+    # when\n+    response = app_api_client.post_graphql(\n+        query, variables, permissions=[permission_manage_users]\n+    )\n+\n+    # then\n+    assert_no_permission(response)\n+\n+\n def test_query_staff_user(\n     staff_api_client,\n     staff_user,\n@@ -993,6 +1071,7 @@ def test_user_with_cancelled_fulfillments(\n     staff_api_client,\n     customer_user,\n     permission_manage_users,\n+    permission_manage_orders,\n     fulfilled_order_with_cancelled_fulfillment,\n ):\n     query = \"\"\"\n@@ -1013,7 +1092,9 @@ def test_user_with_cancelled_fulfillments(\n     \"\"\"\n     user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n     variables = {\"id\": user_id}\n-    staff_api_client.user.user_permissions.add(permission_manage_users)\n+    staff_api_client.user.user_permissions.add(\n+        permission_manage_users, permission_manage_orders\n+    )\n     response = staff_api_client.post_graphql(query, variables)\n     content = get_graphql_content(response)\n     order_id = graphene.Node.to_global_id("
        },
        {
          "filename": "saleor/graphql/account/types.py",
          "status": "modified",
          "additions": 7,
          "deletions": 3,
          "patch": "@@ -364,9 +364,13 @@ def resolve_orders(root: models.User, info, **kwargs):\n         def _resolve_orders(orders):\n             requester = get_user_or_app_from_context(info.context)\n             if not requester.has_perm(OrderPermissions.MANAGE_ORDERS):\n-                orders = list(\n-                    filter(lambda order: order.status != OrderStatus.DRAFT, orders)\n-                )\n+                # allow fetch requestor orders (except drafts)\n+                if root == info.context.user:\n+                    orders = list(\n+                        filter(lambda order: order.status != OrderStatus.DRAFT, orders)\n+                    )\n+                else:\n+                    raise PermissionDenied()\n \n             return create_connection_slice(\n                 orders, info, kwargs, OrderCountableConnection"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 4,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "486877e53e05c27b4691647d1e0e7cc0f47e91bf",
            "date": "2025-01-14T09:18:31Z",
            "author_login": "patrys"
          },
          {
            "sha": "23b8d28989445f33ed35363156a8b675eb610472",
            "date": "2025-01-13T12:06:01Z",
            "author_login": "patrys"
          },
          {
            "sha": "789e33510a4225f20a0ccc9634ff7b49bb9ca912",
            "date": "2025-01-13T14:36:25Z",
            "author_login": "korycins"
          },
          {
            "sha": "83efad25c0813b7b3fe2741781a263e22ff84e1a",
            "date": "2025-01-13T08:42:38Z",
            "author_login": "szczecha"
          },
          {
            "sha": "5f8b1cc4db2d54295193eb92d7b862164ce197ce",
            "date": "2025-01-10T13:13:49Z",
            "author_login": "korycins"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
    "cwe_id": "CWE-862",
    "description": "Missing Authorization in GitHub repository saleor/saleor prior to 3.1.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-11T15:15:09.857",
    "last_modified": "2024-11-21T06:39:41.500",
    "fix_date": "2022-03-01T08:33:10Z"
  },
  "references": [
    {
      "url": "https://github.com/saleor/saleor/commit/521dfd6394f3926a77c60d8633c058e16d0f916d",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/88ae4cbc-c697-401b-8b04-7dc4e03ad8eb",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/saleor/saleor/commit/521dfd6394f3926a77c60d8633c058e16d0f916d",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/88ae4cbc-c697-401b-8b04-7dc4e03ad8eb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:01.989119",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "saleor",
    "owner": "saleor",
    "created_at": "2013-02-12T16:46:39Z",
    "updated_at": "2025-01-14T09:18:44Z",
    "pushed_at": "2025-01-14T13:41:59Z",
    "size": 264902,
    "stars": 20990,
    "forks": 5549,
    "open_issues": 341,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "3.20"
    ],
    "languages": {
      "Python": 22045293,
      "HTML": 249642,
      "Dockerfile": 2521,
      "Shell": 439,
      "Makefile": 121
    },
    "commit_activity": {
      "total_commits_last_year": 715,
      "avg_commits_per_week": 13.75,
      "days_active_last_year": 208
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-14T13:42:28.369369"
  }
}