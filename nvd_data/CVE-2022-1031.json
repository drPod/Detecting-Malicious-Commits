{
  "cve_id": "CVE-2022-1031",
  "github_data": {
    "repository": "radareorg/radare2",
    "fix_commit": "a7ce29647fcb38386d7439696375e16e093d6acb",
    "related_commits": [
      "a7ce29647fcb38386d7439696375e16e093d6acb",
      "a7ce29647fcb38386d7439696375e16e093d6acb"
    ],
    "patch_url": "https://github.com/radareorg/radare2/commit/a7ce29647fcb38386d7439696375e16e093d6acb.patch",
    "fix_commit_details": {
      "sha": "a7ce29647fcb38386d7439696375e16e093d6acb",
      "commit_date": "2022-03-21T16:48:44Z",
      "author": {
        "login": "radare",
        "type": "User",
        "stats": {
          "total_commits": 16353,
          "average_weekly_commits": 19.631452581032413,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 785
        }
      },
      "commit_message": {
        "title": "Fix UAF in aaaa on arm/thumb switching ##crash",
        "length": 366,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 15,
        "additions": 12,
        "deletions": 3
      },
      "files": [
        {
          "filename": "libr/anal/fcn.c",
          "status": "modified",
          "additions": 11,
          "deletions": 2,
          "patch": "@@ -815,7 +815,7 @@ static int fcn_recurse(RAnal *anal, RAnalFunction *fcn, ut64 addr, ut64 len, int\n \t\t\t// note, we have still increased size of basic block\n \t\t\t// (and function)\n \t\t\tif (anal->verbose) {\n-\t\t\t\teprintf(\"Enter branch delay at 0x%08\"PFMT64x \". bb->sz=%\"PFMT64u\"\\n\", at - oplen, bb->size);\n+\t\t\t\teprintf (\"Enter branch delay at 0x%08\"PFMT64x \". bb->sz=%\"PFMT64u\"\\n\", at - oplen, bb->size);\n \t\t\t}\n \t\t\tdelay.idx = idx - oplen;\n \t\t\tdelay.cnt = op->delay;\n@@ -882,6 +882,12 @@ static int fcn_recurse(RAnal *anal, RAnalFunction *fcn, ut64 addr, ut64 len, int\n \t\t\t// swapped parameters wtf\n \t\t\tr_anal_xrefs_set (anal, op->addr, op->ptr, R_ANAL_REF_TYPE_DATA);\n \t\t}\n+\t\tif (anal->opt.vars && !varset) {\n+\t\t\t// XXX uses op.src/dst and fails because regprofile invalidates the regitems\n+\t\t\t// lets just call this BEFORE retpoline() to avoid such issue\n+\t\t\tr_anal_extract_vars (anal, fcn, op);\n+\t\t}\n+\t\t// this call may cause regprofile changes which cause ranalop.regitem references to be invalid\n \t\tanalyze_retpoline (anal, op);\n \t\tswitch (op->type & R_ANAL_OP_TYPE_MASK) {\n \t\tcase R_ANAL_OP_TYPE_CMOV:\n@@ -973,7 +979,7 @@ static int fcn_recurse(RAnal *anal, RAnalFunction *fcn, ut64 addr, ut64 len, int\n \t\t\t\tfcn->bp_off = fcn->stack - op->src[0]->delta;\n \t\t\t}\n \t\t\tif (op->dst && op->dst->reg && op->dst->reg->name && op->ptr > 0 && op->ptr != UT64_MAX) {\n-\t\t\t\tfree(last_reg_mov_lea_name);\n+\t\t\t\tfree (last_reg_mov_lea_name);\n \t\t\t\tif ((last_reg_mov_lea_name = strdup(op->dst->reg->name))) {\n \t\t\t\t\tlast_reg_mov_lea_val = op->ptr;\n \t\t\t\t\tlast_is_reg_mov_lea = true;\n@@ -1404,10 +1410,13 @@ static int fcn_recurse(RAnal *anal, RAnalFunction *fcn, ut64 addr, ut64 len, int\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+#if 0\n \t\tif (anal->opt.vars && !varset) {\n \t\t\t// XXX uses op.src/dst and fails because regprofile invalidates the regitems\n+\t\t\t// we must ranalop in here to avoid uaf\n \t\t\tr_anal_extract_vars (anal, fcn, op);\n \t\t}\n+#endif\n \t\tif (op->type != R_ANAL_OP_TYPE_MOV && op->type != R_ANAL_OP_TYPE_CMOV && op->type != R_ANAL_OP_TYPE_LEA) {\n \t\t\tlast_is_reg_mov_lea = false;\n \t\t}"
        },
        {
          "filename": "libr/anal/var.c",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1048,7 +1048,7 @@ static void extract_arg(RAnal *anal, RAnalFunction *fcn, RAnalOp *op, const char\n \t\tfree (vartype);\n \t} else {\n \t\tst64 frame_off = -(ptr + fcn->bp_off);\n-\t\tif (maxstackframe != 0 && (frame_off > maxstackframe || frame_off < -maxstackframe)) {\n+\t\tif (maxstackframe > 0 && (frame_off > maxstackframe || frame_off < -maxstackframe)) {\n \t\t\tgoto beach;\n \t\t}\n \t\tRAnalVar *var = get_stack_var (fcn, frame_off);"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "a7e958f9ebdf9771c36e8376078f027792981fea",
            "date": "2025-01-14T17:22:24Z",
            "author_login": "radare"
          },
          {
            "sha": "0f85675c7a5d542a89318b62d4a4bc997e595e03",
            "date": "2025-01-14T11:01:39Z",
            "author_login": "radare"
          },
          {
            "sha": "92d45a6034fe60123adc23bf49b398809fe36d25",
            "date": "2025-01-14T11:11:00Z",
            "author_login": "radare"
          },
          {
            "sha": "07be136859c56f96a692c8d5d1a3531345f16a0c",
            "date": "2025-01-14T10:46:07Z",
            "author_login": "radare"
          },
          {
            "sha": "05ebe2e92fc1905702201106228b285c80bd958b",
            "date": "2025-01-14T10:28:47Z",
            "author_login": "radare"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-416",
    "description": "Use After Free in op_is_set_bp in GitHub repository radareorg/radare2 prior to 5.6.6.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-03-22T20:15:07.593",
    "last_modified": "2024-11-21T06:39:53.603",
    "fix_date": "2022-03-21T16:48:44Z"
  },
  "references": [
    {
      "url": "https://github.com/radareorg/radare2/commit/a7ce29647fcb38386d7439696375e16e093d6acb",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/37da2cd6-0b46-4878-a32e-acbfd8f6f457",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/radareorg/radare2/commit/a7ce29647fcb38386d7439696375e16e093d6acb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/37da2cd6-0b46-4878-a32e-acbfd8f6f457",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:02.051777",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "radare2",
    "owner": "radareorg",
    "created_at": "2012-07-03T07:42:26Z",
    "updated_at": "2025-01-14T11:39:09Z",
    "pushed_at": "2025-01-14T11:39:05Z",
    "size": 182812,
    "stars": 20990,
    "forks": 3027,
    "open_issues": 874,
    "watchers": 20990,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C": 29143253,
      "Makefile": 262919,
      "Shell": 145034,
      "Meson": 123192,
      "C++": 82794,
      "HTML": 55704,
      "Rebol": 54153,
      "Python": 38146,
      "Roff": 36722,
      "JavaScript": 23584,
      "CSS": 19465,
      "Batchfile": 8970,
      "Perl": 6449,
      "sed": 4448,
      "R": 1960,
      "Rez": 1386,
      "Assembly": 939,
      "Vala": 839,
      "Wren": 460,
      "Gnuplot": 429,
      "C#": 164,
      "Dart": 125,
      "Rascal": 45
    },
    "commit_activity": {
      "total_commits_last_year": 1594,
      "avg_commits_per_week": 30.653846153846153,
      "days_active_last_year": 294
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:04:16.054007"
  }
}