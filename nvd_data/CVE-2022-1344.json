{
  "cve_id": "CVE-2022-1344",
  "github_data": {
    "repository": "causefx/organizr",
    "fix_commit": "a09d834d995599756b62016af7026d2408ecf43a",
    "related_commits": [
      "a09d834d995599756b62016af7026d2408ecf43a",
      "a09d834d995599756b62016af7026d2408ecf43a"
    ],
    "patch_url": "https://github.com/causefx/organizr/commit/a09d834d995599756b62016af7026d2408ecf43a.patch",
    "fix_commit_details": {
      "sha": "a09d834d995599756b62016af7026d2408ecf43a",
      "commit_date": "2022-04-11T16:52:22Z",
      "author": {
        "login": "causefx",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "added sanitizeUserString and sanitizeEmail functions",
        "length": 191,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 88,
        "additions": 83,
        "deletions": 5
      },
      "files": [
        {
          "filename": "api/classes/organizr.class.php",
          "status": "modified",
          "additions": 69,
          "deletions": 3,
          "patch": "@@ -1895,7 +1895,7 @@ public function uploadImage()\n \t\t\t$tempFile = $_FILES['file']['tmp_name'];\n \t\t\t$targetPath = $this->root . DIRECTORY_SEPARATOR . 'data' . DIRECTORY_SEPARATOR . 'userTabs' . DIRECTORY_SEPARATOR;\n \t\t\t$this->makeDir($targetPath);\n-\t\t\t$targetFile = $targetPath . $_FILES['file']['name'];\n+\t\t\t$targetFile = $targetPath . $this->sanitizeUserString($_FILES['file']['name']);\n \t\t\t$this->setAPIResponse(null, pathinfo($_FILES['file']['name'], PATHINFO_BASENAME) . ' has been uploaded', null);\n \t\t\treturn move_uploaded_file($tempFile, $targetFile);\n \t\t}\n@@ -4873,7 +4873,7 @@ public function addTab($array)\n \t\t$array['type'] = ($array['type']) ?? 1;\n \t\t$array['order'] = ($array['order']) ?? $this->getNextTabOrder() + 1;\n \t\tif (array_key_exists('name', $array)) {\n-\t\t\t$array['name'] = htmlspecialchars($array['name']);\n+\t\t\t$array['name'] = $this->sanitizeUserString($array['name']);\n \t\t\tif ($this->isTabNameTaken($array['name'])) {\n \t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $array['name'] . ' is already taken', 409);\n \t\t\t\treturn false;\n@@ -4923,7 +4923,7 @@ public function updateTab($id, $array)\n \t\t\treturn false;\n \t\t}\n \t\tif (array_key_exists('name', $array)) {\n-\t\t\t$array['name'] = htmlspecialchars($array['name']);\n+\t\t\t$array['name'] = $this->sanitizeUserString($array['name']);\n \t\t\tif ($this->isTabNameTaken($array['name'], $id)) {\n \t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $array['name'] . ' is already taken', 409);\n \t\t\t\treturn false;\n@@ -4995,6 +4995,7 @@ public function addCategory($array)\n \t\t$array['order'] = ($array['order']) ?? $this->getNextCategoryOrder() + 1;\n \t\t$array['category_id'] = ($array['category_id']) ?? $this->getNextCategoryId() + 1;\n \t\tif (array_key_exists('category', $array)) {\n+\t\t\t$array['category'] = $this->sanitizeUserString($array['category']);\n \t\t\tif ($this->isCategoryNameTaken($array['category'])) {\n \t\t\t\t$this->setAPIResponse('error', 'Category name: ' . $array['category'] . ' is already taken', 409);\n \t\t\t\treturn false;\n@@ -5005,6 +5006,9 @@ public function addCategory($array)\n \t\t}\n \t\tif (!array_key_exists('image', $array)) {\n \t\t\t$this->setAPIResponse('error', 'Category image was not supplied', 422);\n+\t\t\treturn false;\n+\t\t} else {\n+\t\t\t$array['image'] = $this->sanitizeUserString($array['image']);\n \t\t}\n \t\t$response = [\n \t\t\tarray(\n@@ -5039,11 +5043,15 @@ public function updateCategory($id, $array)\n \t\t\treturn false;\n \t\t}\n \t\tif (array_key_exists('category', $array)) {\n+\t\t\t$array['category'] = $this->sanitizeUserString($array['category']);\n \t\t\tif ($this->isCategoryNameTaken($array['category'], $id)) {\n \t\t\t\t$this->setAPIResponse('error', 'Category name: ' . $array['category'] . ' is already taken', 409);\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}\n+\t\tif (array_key_exists('image', $array)) {\n+\t\t\t$array['image'] = $this->sanitizeUserString($array['image']);\n+\t\t}\n \t\tif (array_key_exists('default', $array)) {\n \t\t\tif ($array['default']) {\n \t\t\t\t$this->clearCategoryDefault();\n@@ -6184,6 +6192,21 @@ public function allEmbyUsers($newOnly = false)\n \t\treturn false;\n \t}\n \n+\tpublic function validateEmail($email)\n+\t{\n+\t\treturn filter_var(trim($email), FILTER_VALIDATE_EMAIL);\n+\t}\n+\n+\tpublic function sanitizeEmail($email)\n+\t{\n+\t\treturn filter_var(trim($email), FILTER_SANITIZE_EMAIL);\n+\t}\n+\n+\tpublic function sanitizeUserString($string)\n+\t{\n+\t\treturn htmlspecialchars(trim($string));\n+\t}\n+\n \tpublic function updateUser($id, $array)\n \t{\n \t\tif (!$id) {\n@@ -6211,6 +6234,7 @@ public function updateUser($id, $array)\n \t\t\t\t$this->setAPIResponse('error', 'Username was set but empty', 409);\n \t\t\t\treturn false;\n \t\t\t}\n+\t\t\t$array['username'] = $this->sanitizeUserString($array['username']);\n \t\t\tif ($this->usernameTaken($array['username'], $array['username'], $id)) {\n \t\t\t\t$this->setAPIResponse('error', 'Username: ' . $array['username'] . ' is already taken', 409);\n \t\t\t\treturn false;\n@@ -6221,6 +6245,12 @@ public function updateUser($id, $array)\n \t\t\t\t$this->setAPIResponse('error', 'Email was set but empty', 409);\n \t\t\t\treturn false;\n \t\t\t}\n+\t\t\tif ($this->validateEmail($array['email'])) {\n+\t\t\t\t$array['email'] = $this->sanitizeEmail($array['email']);\n+\t\t\t} else {\n+\t\t\t\t$this->setResponse(409, 'Email is not a valid email', ['email' => $array['email']]);\n+\t\t\t\treturn false;\n+\t\t\t}\n \t\t\tif ($this->usernameTaken($array['email'], $array['email'], $id)) {\n \t\t\t\t$this->setAPIResponse('error', 'Email: ' . $array['email'] . ' is already taken', 409);\n \t\t\t\treturn false;\n@@ -6260,6 +6290,9 @@ public function updateUser($id, $array)\n \t\t\t}\n \t\t\t$array['password'] = password_hash($array['password'], PASSWORD_BCRYPT);\n \t\t}\n+\t\tif (array_key_exists('image', $array)) {\n+\t\t\t$array['image'] = $this->sanitizeUserString($array['image']);\n+\t\t}\n \t\tif (array_key_exists('register_date', $array)) {\n \t\t\t$this->setAPIResponse('error', 'Cannot update register date', 409);\n \t\t\treturn false;\n@@ -6317,10 +6350,30 @@ public function addUser($array)\n \t\t\t$this->setAPIResponse('error', 'Username was not supplied', 409);\n \t\t\treturn false;\n \t\t}\n+\t\tif ($username == '') {\n+\t\t\t$this->setResponse(409, 'Username was set but empty');\n+\t\t\treturn false;\n+\t\t} else {\n+\t\t\t$username = $this->sanitizeUserString($username);\n+\t\t}\n \t\tif (!$password) {\n \t\t\t$this->setAPIResponse('error', 'Password was not supplied', 409);\n \t\t\treturn false;\n \t\t}\n+\t\tif (!$email) {\n+\t\t\t$this->setAPIResponse('error', 'Email was set not supplied', 409);\n+\t\t\treturn false;\n+\t\t}\n+\t\tif ($email == '') {\n+\t\t\t$this->setAPIResponse('error', 'Email was set but empty', 409);\n+\t\t\treturn false;\n+\t\t}\n+\t\tif ($this->validateEmail($email)) {\n+\t\t\t$email = $this->sanitizeEmail($email);\n+\t\t} else {\n+\t\t\t$this->setResponse(409, 'Email is not a valid email', ['email' => $email]);\n+\t\t\treturn false;\n+\t\t}\n \t\t$this->setLoggerChannel('User Management');\n \t\tif ($this->createUser($username, $password, $email)) {\n \t\t\t$this->logger->info('Account created for [' . $username . ']');\n@@ -6340,10 +6393,21 @@ public function createUser($username, $password, $email = null)\n \t\t\t$this->setAPIResponse('error', 'Username was set but empty', 409);\n \t\t\treturn false;\n \t\t}\n+\t\t$username = $this->sanitizeUserString($username);\n \t\tif (!$password) {\n \t\t\t$this->setAPIResponse('error', 'Password was set but empty', 409);\n \t\t\treturn false;\n \t\t}\n+\t\tif ($email == '') {\n+\t\t\t$this->setAPIResponse('error', 'Email was set but empty', 409);\n+\t\t\treturn false;\n+\t\t}\n+\t\tif ($this->validateEmail($email)) {\n+\t\t\t$email = $this->sanitizeEmail($email);\n+\t\t} else {\n+\t\t\t$this->setResponse(409, 'Email is not a valid email', ['email' => $email]);\n+\t\t\treturn false;\n+\t\t}\n \t\tif ($this->usernameTaken($username, $email)) {\n \t\t\t$this->setAPIResponse('error', 'Username: ' . $username . ' or Email: ' . $email . ' is already taken', 409);\n \t\t\treturn false;\n@@ -6397,6 +6461,7 @@ public function updateGroup($id, $array)\n \t\t\t\t$this->setAPIResponse('error', 'Group was set but empty', 409);\n \t\t\t\treturn false;\n \t\t\t}\n+\t\t\t$array['group'] = $this->sanitizeUserString($array['group']);\n \t\t\tif ($this->isGroupNameTaken($array['group'], $id)) {\n \t\t\t\t$this->setAPIResponse('error', 'Group name: ' . $array['group'] . ' is already taken', 409);\n \t\t\t\treturn false;\n@@ -6476,6 +6541,7 @@ public function addGroup($array)\n \t\t$array['default'] = ($array['default']) ?? 0;\n \t\t$array['group_id'] = $this->getNextGroupOrder() + 1;\n \t\tif (array_key_exists('group', $array)) {\n+\t\t\t$array['group'] = $this->sanitizeUserString($array['group']);\n \t\t\tif ($this->isGroupNameTaken($array['group'])) {\n \t\t\t\t$this->setAPIResponse('error', 'Group name: ' . $array['group'] . ' is already taken', 409);\n \t\t\t\treturn false;"
        },
        {
          "filename": "api/functions/log-functions.php",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -212,7 +212,7 @@ public function setLoggerChannel($channel = 'Organizr', $username = null)\n \t\tif ($this->hasDB()) {\n \t\t\t$setLogger = false;\n \t\t\tif ($username) {\n-\t\t\t\t$username = htmlspecialchars($username);\n+\t\t\t\t$username = $this->sanitizeUserString($username);\n \t\t\t}\n \t\t\tif ($this->logger) {\n \t\t\t\tif ($channel) {"
        },
        {
          "filename": "api/functions/organizr-functions.php",
          "status": "modified",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -216,7 +216,6 @@ public function approvedFileExtension($filename, $type = 'image')\n \t\t\t\tcase 'png':\n \t\t\t\tcase 'jpeg':\n \t\t\t\tcase 'jpg':\n-\t\t\t\tcase 'svg':\n \t\t\t\t\treturn true;\n \t\t\t\tdefault:\n \t\t\t\t\treturn false;"
        },
        {
          "filename": "api/plugins/bookmark/plugin.php",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -570,6 +570,7 @@ public function _addTab($array)\n \t\t$array['enabled'] = ($array['enabled']) ?? 0;\n \t\t$array['order'] = ($array['order']) ?? $this->_getNextBookmarkTabOrder() + 1;\n \t\tif (array_key_exists('name', $array)) {\n+\t\t\t$array['name'] = $this->sanitizeUserString($array['name']);\n \t\t\tif ($this->_isBookmarkTabNameTaken($array['name'])) {\n \t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $array['name'] . ' is already taken', 409);\n \t\t\t\treturn false;\n@@ -585,8 +586,11 @@ public function _addTab($array)\n \t\tif (!array_key_exists('image', $array)) {\n \t\t\t$this->setAPIResponse('error', 'Tab image was not supplied', 422);\n \t\t\treturn false;\n+\t\t} else {\n+\t\t\t$array['image'] = $this->sanitizeUserString($array['image']);\n \t\t}\n \t\tif (array_key_exists('background_color', $array)) {\n+\t\t\t$array['background_color'] = $this->sanitizeUserString($array['background_color']);\n \t\t\tif (!$this->_checkColorHexCode($array['background_color'])) {\n \t\t\t\t$this->setAPIResponse('error', 'Tab background color is invalid', 422);\n \t\t\t\treturn false;\n@@ -596,6 +600,7 @@ public function _addTab($array)\n \t\t\treturn false;\n \t\t}\n \t\tif (array_key_exists('text_color', $array)) {\n+\t\t\t$array['text_color'] = $this->sanitizeUserString($array['text_color']);\n \t\t\tif (!$this->_checkColorHexCode($array['text_color'])) {\n \t\t\t\t$this->setAPIResponse('error', 'Tab text color is invalid', 422);\n \t\t\t\treturn false;\n@@ -636,23 +641,29 @@ public function _updateTab($id, $array)\n \t\t\treturn false;\n \t\t}\n \t\tif (array_key_exists('name', $array)) {\n+\t\t\t$array['name'] = $this->sanitizeUserString($array['name']);\n \t\t\tif ($this->_isBookmarkTabNameTaken($array['name'], $id)) {\n \t\t\t\t$this->setAPIResponse('error', 'Tab name: ' . $array['name'] . ' is already taken', 409);\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}\n \t\tif (array_key_exists('background_color', $array)) {\n+\t\t\t$array['background_color'] = $this->sanitizeUserString($array['background_color']);\n \t\t\tif (!$this->_checkColorHexCode($array['background_color'])) {\n \t\t\t\t$this->setAPIResponse('error', 'Tab background color is invalid', 422);\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}\n \t\tif (array_key_exists('text_color', $array)) {\n+\t\t\t$array['text_color'] = $this->sanitizeUserString($array['text_color']);\n \t\t\tif (!$this->_checkColorHexCode($array['text_color'])) {\n \t\t\t\t$this->setAPIResponse('error', 'Tab text color is invalid', 422);\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}\n+\t\tif (array_key_exists('image', $array)) {\n+\t\t\t$array['image'] = $this->sanitizeUserString($array['image']);\n+\t\t}\n \t\t$response = [\n \t\t\tarray(\n \t\t\t\t'function' => 'query',\n@@ -871,6 +882,7 @@ public function _addCategory($array)\n \t\t$array['order'] = ($array['order']) ?? $this->_getNextBookmarkCategoryOrder() + 1;\n \t\t$array['category_id'] = ($array['category_id']) ?? $this->_getNextBookmarkCategoryId() + 1;\n \t\tif (array_key_exists('category', $array)) {\n+\t\t\t$array['category'] = $this->sanitizeUserString($array['category']);\n \t\t\tif ($this->_isBookmarkCategoryNameTaken($array['category'])) {\n \t\t\t\t$this->setAPIResponse('error', 'Category name: ' . $array['category'] . ' is already taken', 409);\n \t\t\t\treturn false;\n@@ -913,6 +925,7 @@ public function _updateCategory($id, $array)\n \t\t\treturn false;\n \t\t}\n \t\tif (array_key_exists('category', $array)) {\n+\t\t\t$array['category'] = $this->sanitizeUserString($array['category']);\n \t\t\tif ($this->_isBookmarkCategoryNameTaken($array['category'], $id)) {\n \t\t\t\t$this->setAPIResponse('error', 'Category name: ' . $array['category'] . ' is already taken', 409);\n \t\t\t\treturn false;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b8344ba52dc91c5159914e5d9a536d9ae0a38a3c",
            "date": "2024-04-16T13:55:35Z",
            "author_login": "causefx"
          },
          {
            "sha": "c7e88e26482483a76540b5166138692cc914069d",
            "date": "2024-04-16T13:54:57Z",
            "author_login": "causefx"
          },
          {
            "sha": "b34d076956bf57ac414728d3fe503e493fb2416b",
            "date": "2024-04-16T13:53:49Z",
            "author_login": "allcontributors[bot]"
          },
          {
            "sha": "46052cd5e114e954f680caa40c934ba600014467",
            "date": "2024-04-16T13:53:48Z",
            "author_login": "allcontributors[bot]"
          },
          {
            "sha": "bb61a7728516a5229d48db091765182ec2866969",
            "date": "2024-04-16T13:53:05Z",
            "author_login": "causefx"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H",
    "cwe_id": "CWE-79",
    "description": "Stored XSS due to no sanitization in the filename in GitHub repository causefx/organizr prior to 2.1.1810. This allows attackers to execute malicious scripts in the user's browser and it can lead to session hijacking, sensitive data exposure, and worse.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-04-13T18:15:09.950",
    "last_modified": "2024-11-21T06:40:32.130",
    "fix_date": "2022-04-11T16:52:22Z"
  },
  "references": [
    {
      "url": "https://github.com/causefx/organizr/commit/a09d834d995599756b62016af7026d2408ecf43a",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/35f66966-af13-4f07-9734-0c50fdfc3a8c",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/causefx/organizr/commit/a09d834d995599756b62016af7026d2408ecf43a",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/35f66966-af13-4f07-9734-0c50fdfc3a8c",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:04.379245",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Organizr",
    "owner": "causefx",
    "created_at": "2016-12-29T02:10:38Z",
    "updated_at": "2025-01-14T07:03:08Z",
    "pushed_at": "2024-06-28T13:39:23Z",
    "size": 62114,
    "stars": 5255,
    "forks": 294,
    "open_issues": 22,
    "watchers": 5255,
    "has_security_policy": false,
    "default_branch": "v2-master",
    "protected_branches": [],
    "languages": {
      "PHP": 3274635,
      "JavaScript": 926571,
      "Less": 618268,
      "SCSS": 110584,
      "HTML": 3436,
      "Batchfile": 2318,
      "Shell": 1294
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-3.0"
    },
    "collected_at": "2025-01-14T14:33:18.207894"
  }
}