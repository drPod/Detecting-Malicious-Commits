{
  "cve_id": "CVE-2022-1432",
  "github_data": {
    "repository": "octoprint/octoprint",
    "fix_commit": "6d259d7e6f5b0de9a1c762831537a386e53978d3",
    "related_commits": [
      "6d259d7e6f5b0de9a1c762831537a386e53978d3",
      "6d259d7e6f5b0de9a1c762831537a386e53978d3"
    ],
    "patch_url": "https://github.com/octoprint/octoprint/commit/6d259d7e6f5b0de9a1c762831537a386e53978d3.patch",
    "fix_commit_details": {
      "sha": "6d259d7e6f5b0de9a1c762831537a386e53978d3",
      "commit_date": "2022-05-11T14:40:07Z",
      "author": {
        "login": "foosel",
        "type": "User",
        "stats": {
          "total_commits": 5543,
          "average_weekly_commits": 8.103801169590643,
          "total_additions": 928157,
          "total_deletions": 648688,
          "weeks_active": 498
        }
      },
      "commit_message": {
        "title": "\ud83d\udd12\ufe0f Fix XSS in webcam stream test",
        "length": 32,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 116,
        "additions": 80,
        "deletions": 36
      },
      "files": [
        {
          "filename": "src/octoprint/static/js/app/helpers.js",
          "status": "modified",
          "additions": 63,
          "deletions": 30,
          "patch": "@@ -1542,41 +1542,74 @@ var copyToClipboard = function (text) {\n     temp.remove();\n };\n \n-var determineWebcamStreamType = function (streamUrl) {\n-    if (streamUrl) {\n-        if (streamUrl.startsWith(\"webrtc\")) {\n-            return \"webrtc\";\n-        }\n+var getExternalHostUrl = function () {\n+    var loc = window.location;\n+    var port = \"\";\n+    if (\n+        (loc.protocol === \"http:\" && loc.port !== \"80\") ||\n+        (loc.protocol === \"https:\" && loc.port !== \"443\")\n+    ) {\n+        port = \":\" + loc.port;\n+    }\n+    return loc.protocol + \"//\" + loc.hostname + port;\n+};\n \n-        var lastDotPosition = streamUrl.lastIndexOf(\".\");\n-        var firstQuotationSignPosition = streamUrl.indexOf(\"?\");\n-        if (\n-            lastDotPosition != -1 &&\n-            firstQuotationSignPosition != -1 &&\n-            lastDotPosition >= firstQuotationSignPosition\n-        ) {\n-            throw \"Malformed URL. Cannot determine stream type.\";\n-        }\n+var validateWebcamUrl = function (streamUrl) {\n+    if (!streamUrl) {\n+        return false;\n+    }\n \n-        // If we have found a dot, try to extract the extension.\n-        if (lastDotPosition > -1) {\n-            if (firstQuotationSignPosition > -1) {\n-                var extension = streamUrl.slice(\n-                    lastDotPosition + 1,\n-                    firstQuotationSignPosition - 1\n-                );\n-            } else {\n-                var extension = streamUrl.slice(lastDotPosition + 1);\n-            }\n-            if (extension.toLowerCase() == \"m3u8\") {\n-                return \"hls\";\n-            }\n-        }\n-        // By default, 'mjpg' is the stream type.\n-        return \"mjpg\";\n+    var lower = streamUrl.toLowerCase();\n+    var toParse = streamUrl;\n+\n+    if (lower.startsWith(\"//\")) {\n+        // protocol relative\n+        toParse = window.location.protocol + streamUrl;\n+    } else if (lower.startsWith(\"/\")) {\n+        // host relative\n+        toParse = getExternalHostUrl() + streamUrl;\n+    } else if (\n+        lower.startsWith(\"http:\") ||\n+        lower.startsWith(\"https:\") ||\n+        lower.startsWith(\"webrtc:\")\n+    ) {\n+        // absolute & http/https/webrtc\n+        toParse = streamUrl;\n     } else {\n+        return false;\n+    }\n+\n+    try {\n+        return new URL(toParse);\n+    } catch (e) {\n+        return false;\n+    }\n+};\n+\n+var determineWebcamStreamType = function (streamUrl) {\n+    if (!streamUrl) {\n         throw \"Empty streamUrl. Cannot determine stream type.\";\n     }\n+\n+    var parsed = validateWebcamUrl(streamUrl);\n+    if (!parsed) {\n+        throw \"Invalid streamUrl. Cannot determine stream type.\";\n+    }\n+\n+    if (parsed.protocol === \"webrtc:\") {\n+        return \"webrtc\";\n+    }\n+\n+    var lastDotPosition = parsed.pathname.lastIndexOf(\".\");\n+    if (lastDotPosition !== -1) {\n+        var extension = parsed.pathname.substring(lastDotPosition + 1);\n+        if (extension.toLowerCase() === \"m3u8\") {\n+            return \"hls\";\n+        }\n+    }\n+\n+    // By default, 'mjpg' is the stream type.\n+    return \"mjpg\";\n };\n \n var saveToLocalStorage = function (key, data) {"
        },
        {
          "filename": "src/octoprint/static/js/app/viewmodels/settings.js",
          "status": "modified",
          "additions": 15,
          "deletions": 4,
          "patch": "@@ -319,6 +319,10 @@ $(function () {\n                 return \"\";\n             }\n         });\n+        self.webcam_streamValid = ko.pureComputed(function () {\n+            var url = self.webcam_streamUrl();\n+            return !url || validateWebcamUrl(url);\n+        });\n \n         self.server_onlineCheckText = ko.observable();\n         self.server_onlineCheckOk = ko.observable(false);\n@@ -450,12 +454,19 @@ $(function () {\n             var text = gettext(\n                 \"If you see your webcam stream below, the entered stream URL is ok.\"\n             );\n-            var streamType = self.webcam_streamType();\n+\n+            var streamType;\n+            try {\n+                streamType = self.webcam_streamType();\n+            } catch (e) {\n+                streamType = \"\";\n+            }\n+\n             var webcam_element;\n             var webrtc_peer_connection;\n-            if (streamType == \"mjpg\") {\n+            if (streamType === \"mjpg\") {\n                 webcam_element = $('<img src=\"' + self.webcam_streamUrl() + '\">');\n-            } else if (streamType == \"hls\") {\n+            } else if (streamType === \"hls\") {\n                 webcam_element = $(\n                     '<video id=\"webcam_hls\" muted autoplay style=\"width: 100%\"/>'\n                 );\n@@ -467,7 +478,7 @@ $(function () {\n                     hls.loadSource(self.webcam_streamUrl());\n                     hls.attachMedia(video_element);\n                 }\n-            } else if (isWebRTCAvailable() && streamType == \"webrtc\") {\n+            } else if (isWebRTCAvailable() && streamType === \"webrtc\") {\n                 webcam_element = $(\n                     '<video id=\"webcam_webrtc\" muted autoplay playsinline controls style=\"width: 100%\"/>'\n                 );"
        },
        {
          "filename": "src/octoprint/templates/snippets/settings/webcam/webcamStreamUrl.jinja2",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,9 +1,9 @@\n-<div class=\"control-group\" title=\"{{ _('URL to embed into the UI for live viewing of the webcam stream')|edq }}\">\n+<div class=\"control-group\" title=\"{{ _('URL to embed into the UI for live viewing of the webcam stream')|edq }}\" data-bind=\"css: { error: !webcam_streamValid() }\">\n     <label class=\"control-label\" for=\"settings-webcamStreamUrl\">{{ _('Stream URL') }}</label>\n     <div class=\"controls\">\n         <div class=\"input-append\">\n             <input type=\"text\" class=\"input-block-level\" data-bind=\"value: webcam_streamUrl, valueUpdate: 'afterkeydown'\" id=\"settings-webcamStreamUrl\">\n-            <button class=\"btn\" type=\"button\" data-bind=\"click: testWebcamStreamUrl, enable: webcam_streamUrl() && !testWebcamStreamUrlBusy(), css: {disabled: !webcam_streamUrl() || testWebcamStreamUrlBusy()}\"><i class=\"fas fa-spinner fa-spin\" data-bind=\"visible: testWebcamStreamUrlBusy\"></i> {{ _('Test') }}</button>\n+            <button class=\"btn\" type=\"button\" data-bind=\"click: testWebcamStreamUrl, enable: !testWebcamStreamUrlBusy() && webcam_streamValid(), css: {disabled: testWebcamStreamUrlBusy() || !webcam_streamValid()}\"><i class=\"fas fa-spinner fa-spin\" data-bind=\"visible: testWebcamStreamUrlBusy\"></i> {{ _('Test') }}</button>\n         </div>\n         <span class=\"help-block\">\n             <p>{% trans %}Needs to be reachable from the browser displaying the OctoPrint UI, used to embed the webcam stream into the page.{% endtrans %}</p>"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d79a0d20f3f1c7f2edb56dedda3b70267a937e65",
            "date": "2025-01-07T16:26:18Z",
            "author_login": "foosel"
          },
          {
            "sha": "b47f001b81a042069bf8c5f51a28a2642aa02497",
            "date": "2025-01-07T16:17:19Z",
            "author_login": "foosel"
          },
          {
            "sha": "51eae276d8c15208dd9cbe4a9da4b8a688f80a14",
            "date": "2025-01-07T15:55:37Z",
            "author_login": "foosel"
          },
          {
            "sha": "2a2a9921e6b79da220d3e66fde43cacd62a5a4ad",
            "date": "2024-11-06T08:34:42Z",
            "author_login": "foosel"
          },
          {
            "sha": "9701568a6f3dcf356e5e800a49da6ffac128cae5",
            "date": "2024-11-04T09:42:39Z",
            "author_login": "foosel"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Generic in GitHub repository octoprint/octoprint prior to 1.8.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-05-18T14:15:08.193",
    "last_modified": "2024-11-21T06:40:43.340",
    "fix_date": "2022-05-11T14:40:07Z"
  },
  "references": [
    {
      "url": "https://github.com/octoprint/octoprint/commit/6d259d7e6f5b0de9a1c762831537a386e53978d3",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/cb545c63-a3c1-4d57-8f06-e4593ab389bf",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/octoprint/octoprint/commit/6d259d7e6f5b0de9a1c762831537a386e53978d3",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/cb545c63-a3c1-4d57-8f06-e4593ab389bf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.130386",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "OctoPrint",
    "owner": "octoprint",
    "created_at": "2012-12-31T12:20:57Z",
    "updated_at": "2025-01-13T21:11:23Z",
    "pushed_at": "2025-01-09T00:15:57Z",
    "size": 56449,
    "stars": 8399,
    "forks": 1673,
    "open_issues": 271,
    "watchers": 8399,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "devel",
      "maintenance",
      "master",
      "rc/devel",
      "rc/maintenance"
    ],
    "languages": {
      "Python": 3030267,
      "JavaScript": 1731194,
      "G-code": 1651044,
      "Jinja": 479315,
      "HTML": 51198,
      "Less": 49667,
      "CSS": 7021
    },
    "commit_activity": {
      "total_commits_last_year": 149,
      "avg_commits_per_week": 2.8653846153846154,
      "days_active_last_year": 56
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:58:01.727927"
  }
}