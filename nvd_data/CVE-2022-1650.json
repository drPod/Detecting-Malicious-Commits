{
  "cve_id": "CVE-2022-1650",
  "github_data": {
    "repository": "eventsource/eventsource",
    "fix_commit": "10ee0c4881a6ba2fe65ec18ed195ac35889583c4",
    "related_commits": [
      "10ee0c4881a6ba2fe65ec18ed195ac35889583c4",
      "10ee0c4881a6ba2fe65ec18ed195ac35889583c4"
    ],
    "patch_url": "https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4.patch",
    "fix_commit_details": {
      "sha": "10ee0c4881a6ba2fe65ec18ed195ac35889583c4",
      "commit_date": "2022-05-11T10:10:49Z",
      "author": {
        "login": "rexxars",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: strip sensitive headers on redirect to different origin",
        "length": 60,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 91,
        "additions": 81,
        "deletions": 10
      },
      "files": [
        {
          "filename": "lib/eventsource.js",
          "status": "modified",
          "additions": 38,
          "deletions": 10,
          "patch": "@@ -32,6 +32,8 @@ function hasBom (buf) {\n  **/\n function EventSource (url, eventSourceInitDict) {\n   var readyState = EventSource.CONNECTING\n+  var headers = eventSourceInitDict && eventSourceInitDict.headers\n+  var hasNewOrigin = false\n   Object.defineProperty(this, 'readyState', {\n     get: function () {\n       return readyState\n@@ -53,11 +55,12 @@ function EventSource (url, eventSourceInitDict) {\n     readyState = EventSource.CONNECTING\n     _emit('error', new Event('error', {message: message}))\n \n-    // The url may have been changed by a temporary\n-    // redirect. If that's the case, revert it now.\n+    // The url may have been changed by a temporary redirect. If that's the case,\n+    // revert it now, and flag that we are no longer pointing to a new origin\n     if (reconnectUrl) {\n       url = reconnectUrl\n       reconnectUrl = null\n+      hasNewOrigin = false\n     }\n     setTimeout(function () {\n       if (readyState !== EventSource.CONNECTING || self.connectionInProgress) {\n@@ -70,9 +73,9 @@ function EventSource (url, eventSourceInitDict) {\n \n   var req\n   var lastEventId = ''\n-  if (eventSourceInitDict && eventSourceInitDict.headers && eventSourceInitDict.headers['Last-Event-ID']) {\n-    lastEventId = eventSourceInitDict.headers['Last-Event-ID']\n-    delete eventSourceInitDict.headers['Last-Event-ID']\n+  if (headers && headers['Last-Event-ID']) {\n+    lastEventId = headers['Last-Event-ID']\n+    delete headers['Last-Event-ID']\n   }\n \n   var discardTrailingNewline = false\n@@ -86,9 +89,10 @@ function EventSource (url, eventSourceInitDict) {\n     var isSecure = options.protocol === 'https:'\n     options.headers = { 'Cache-Control': 'no-cache', 'Accept': 'text/event-stream' }\n     if (lastEventId) options.headers['Last-Event-ID'] = lastEventId\n-    if (eventSourceInitDict && eventSourceInitDict.headers) {\n-      for (var i in eventSourceInitDict.headers) {\n-        var header = eventSourceInitDict.headers[i]\n+    if (headers) {\n+      var reqHeaders = hasNewOrigin ? removeUnsafeHeaders(headers) : headers\n+      for (var i in reqHeaders) {\n+        var header = reqHeaders[i]\n         if (header) {\n           options.headers[i] = header\n         }\n@@ -148,13 +152,17 @@ function EventSource (url, eventSourceInitDict) {\n \n       // Handle HTTP redirects\n       if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n-        if (!res.headers.location) {\n+        var location = res.headers.location\n+        if (!location) {\n           // Server sent redirect response without Location header.\n           _emit('error', new Event('error', {status: res.statusCode, message: res.statusMessage}))\n           return\n         }\n+        var prevOrigin = new URL(url).origin\n+        var nextOrigin = new URL(location).origin\n+        hasNewOrigin = prevOrigin !== nextOrigin\n         if (res.statusCode === 307) reconnectUrl = url\n-        url = res.headers.location\n+        url = location\n         process.nextTick(connect)\n         return\n       }\n@@ -463,3 +471,23 @@ function MessageEvent (type, eventInitDict) {\n     }\n   }\n }\n+\n+/**\n+ * Returns a new object of headers that does not include any authorization and cookie headers\n+ *\n+ * @param {Object} headers An object of headers ({[headerName]: headerValue})\n+ * @return {Object} a new object of headers\n+ * @api private\n+ */\n+function removeUnsafeHeaders (headers) {\n+  var safe = {}\n+  for (var key in headers) {\n+    if (/^(cookie|authorization)$/i.test(key)) {\n+      continue\n+    }\n+\n+    safe[key] = headers[key]\n+  }\n+\n+  return safe\n+}"
        },
        {
          "filename": "test/eventsource_test.js",
          "status": "modified",
          "additions": 43,
          "deletions": 0,
          "patch": "@@ -581,6 +581,49 @@ describe('HTTP Request', function () {\n       })\n     })\n \n+    it('follows http ' + status + ' redirects, drops sensitive headers on origin change', function (done) {\n+      var redirectSuffix = '/foobar'\n+      var clientRequestedRedirectUrl = false\n+      var receivedHeaders = {}\n+      createServer(function (err, server) {\n+        if (err) return done(err)\n+\n+        var newServerUrl = server.url.replace('http://localhost', 'http://127.0.0.1')\n+\n+        server.on('request', function (req, res) {\n+          if (req.url === '/') {\n+            res.writeHead(status, {\n+              'Connection': 'Close',\n+              'Location': newServerUrl + redirectSuffix\n+            })\n+            res.end()\n+          } else if (req.url === redirectSuffix) {\n+            clientRequestedRedirectUrl = true\n+            receivedHeaders = req.headers\n+            res.writeHead(200, {'Content-Type': 'text/event-stream'})\n+            res.end()\n+          }\n+        })\n+\n+        var es = new EventSource(server.url, {\n+          headers: {\n+            keep: 'me',\n+            authorization: 'Bearer someToken',\n+            cookie: 'some-cookie=yep'\n+          }\n+        })\n+\n+        es.onopen = function () {\n+          assert.ok(clientRequestedRedirectUrl)\n+          assert.equal(newServerUrl + redirectSuffix, es.url)\n+          assert.equal(receivedHeaders.keep, 'me', 'safe header no longer present')\n+          assert.equal(typeof receivedHeaders.authorization, 'undefined', 'authorization header still present')\n+          assert.equal(typeof receivedHeaders.cookie, 'undefined', 'cookie header still present')\n+          server.close(done)\n+        }\n+      })\n+    })\n+\n     it('causes error event when response is ' + status + ' with missing location', function (done) {\n       createServer(function (err, server) {\n         if (err) return done(err)"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "340ec411deb152a1eb7253390d1caa17933f637f",
            "date": "2024-12-13T00:25:57Z",
            "author_login": "rexxars"
          },
          {
            "sha": "1c532a7caa9e70a1f9c24a02ba6d8f96506163b5",
            "date": "2024-12-13T00:19:48Z",
            "author_login": "rexxars"
          },
          {
            "sha": "5e08e28f257af542cd27b9059100f15c80083f80",
            "date": "2024-12-13T00:13:35Z",
            "author_login": "semantic-release-bot"
          },
          {
            "sha": "d3b684996f9653ebe59454cef7e8437c0a31c9b8",
            "date": "2024-12-13T00:10:01Z",
            "author_login": "rexxars"
          },
          {
            "sha": "101028dc991df6d7d85e34393ed23e522ceb4772",
            "date": "2024-12-10T17:32:00Z",
            "author_login": "rexxars"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-212",
    "description": "Improper Removal of Sensitive Information Before Storage or Transfer in GitHub repository eventsource/eventsource prior to v2.0.2.\n\n",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-12T11:15:07.290",
    "last_modified": "2024-11-21T06:41:10.613",
    "fix_date": "2022-05-11T10:10:49Z"
  },
  "references": [
    {
      "url": "https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/dc9e467f-be5d-4945-867d-1044d27e9b8e",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/12/msg00021.html",
      "source": "security@huntr.dev",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/dc9e467f-be5d-4945-867d-1044d27e9b8e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.debian.org/debian-lts-announce/2022/12/msg00021.html",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mailing List",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.105957",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "eventsource",
    "owner": "eventsource",
    "created_at": "2012-02-08T12:03:28Z",
    "updated_at": "2025-01-14T01:52:44Z",
    "pushed_at": "2024-12-13T00:26:03Z",
    "size": 1525,
    "stars": 933,
    "forks": 252,
    "open_issues": 2,
    "watchers": 933,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 90760,
      "HTML": 935
    },
    "commit_activity": {
      "total_commits_last_year": 23,
      "avg_commits_per_week": 0.4423076923076923,
      "days_active_last_year": 4
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T15:54:39.247926"
  }
}