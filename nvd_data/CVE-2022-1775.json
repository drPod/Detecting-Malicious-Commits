{
  "cve_id": "CVE-2022-1775",
  "github_data": {
    "repository": "polonel/trudesk",
    "fix_commit": "13dd6c61fc85fa773b4065f075fceda563129c53",
    "related_commits": [
      "13dd6c61fc85fa773b4065f075fceda563129c53",
      "13dd6c61fc85fa773b4065f075fceda563129c53"
    ],
    "patch_url": "https://github.com/polonel/trudesk/commit/13dd6c61fc85fa773b4065f075fceda563129c53.patch",
    "fix_commit_details": {
      "sha": "13dd6c61fc85fa773b4065f075fceda563129c53",
      "commit_date": "2022-05-18T04:18:45Z",
      "author": {
        "login": "polonel",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "refactor(accounts): password security enhancements",
        "length": 50,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 923,
        "additions": 579,
        "deletions": 344
      },
      "files": [
        {
          "filename": "package.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -32,6 +32,7 @@\n     \"body-parser\": \"1.19.2\",\n     \"busboy\": \"1.4.0\",\n     \"chance\": \"1.1.8\",\n+    \"check-password-strength\": \"2.0.5\",\n     \"cheerio\": \"1.0.0-rc.10\",\n     \"clone\": \"2.1.2\",\n     \"clsx\": \"1.1.1\","
        },
        {
          "filename": "src/client/components/Nav/Sidebar/index.jsx",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -280,6 +280,12 @@ class Sidebar extends React.Component {\n                     href='/settings'\n                     active={activeSubItem === 'settings-general'}\n                   />\n+                  <SubmenuItem\n+                    text='Accounts'\n+                    icon='tune'\n+                    href='/settings/accounts'\n+                    active={activeSubItem === 'settings-accounts'}\n+                  />\n                   <SubmenuItem\n                     text='Appearance'\n                     icon='style'"
        },
        {
          "filename": "src/client/containers/Modals/CreateAccountModal.jsx",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -203,9 +203,9 @@ class CreateAccountModal extends React.Component {\n                   name={'password_confirmation'}\n                   value={this.password}\n                   onChange={e => this.onInputChanged(e, 'password')}\n-                  data-validation={'length'}\n-                  data-validation-length={'min6'}\n-                  data-validation-error-msg={'Password must contain at least 6 characters.'}\n+                  data-validation={this.props.common.accountsPasswordComplexity ? 'length' : 'none'}\n+                  data-validation-length={'min8'}\n+                  data-validation-error-msg={'Password must contain at least 8 characters.'}\n                 />\n               </div>\n               <div className='uk-float-left uk-width-1-2'>"
        },
        {
          "filename": "src/client/containers/Settings/Accounts/index.jsx",
          "status": "added",
          "additions": 146,
          "deletions": 0,
          "patch": "@@ -0,0 +1,146 @@\n+/*\n+ *       .                             .o8                     oooo\n+ *    .o8                             \"888                     `888\n+ *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n+ *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n+ *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n+ *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n+ *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n+ *  ========================================================================\n+ *  Author:     Chris Brame\n+ *  Updated:    5/17/22 2:20 PM\n+ *  Copyright (c) 2014-2022. All rights reserved.\n+ */\n+\n+import React from 'react'\n+import PropTypes from 'prop-types'\n+import { connect } from 'react-redux'\n+import { updateSetting, updateMultipleSettings } from 'actions/settings'\n+\n+import Button from 'components/Button'\n+import SettingItem from 'components/Settings/SettingItem'\n+\n+import helpers from 'lib/helpers'\n+import axios from 'axios'\n+import Log from '../../../logger'\n+import EnableSwitch from 'components/Settings/EnableSwitch'\n+import { observer } from 'mobx-react'\n+import { makeObservable, observable } from 'mobx'\n+import UIKit from 'uikit'\n+\n+@observer\n+class AccountsSettingsContainer extends React.Component {\n+  @observable passwordComplexityEnabled = false\n+  @observable allowUserRegistrationEnabled = false\n+\n+  constructor (props) {\n+    super(props)\n+\n+    makeObservable(this)\n+\n+    this.state = {\n+      restarting: false\n+    }\n+\n+    this.restartServer = this.restartServer.bind(this)\n+  }\n+\n+  componentDidMount () {\n+    // helpers.UI.inputs()\n+  }\n+\n+  componentDidUpdate (prevProps) {\n+    // helpers.UI.reRenderInputs()\n+    if (prevProps.settings !== this.props.settings) {\n+      if (this.passwordComplexityEnabled !== this.getSetting('accountsPasswordComplexity'))\n+        this.passwordComplexityEnabled = this.getSetting('accountsPasswordComplexity')\n+      if (this.allowUserRegistrationEnabled !== this.getSetting('allowUserRegistration'))\n+        this.allowUserRegistrationEnabled = this.getSetting('allowUserRegistration')\n+    }\n+  }\n+\n+  restartServer () {\n+    this.setState({ restarting: true })\n+\n+    const token = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n+    axios\n+      .post(\n+        '/api/v1/admin/restart',\n+        {},\n+        {\n+          headers: {\n+            'CSRF-TOKEN': token\n+          }\n+        }\n+      )\n+      .catch(error => {\n+        helpers.hideLoader()\n+        Log.error(error.responseText)\n+        Log.error('Unable to restart server. Server must run under PM2 and Account must have admin rights.')\n+        helpers.UI.showSnackbar('Unable to restart server. Are you an Administrator?', true)\n+      })\n+      .then(() => {\n+        this.setState({ restarting: false })\n+      })\n+  }\n+\n+  getSetting (stateName) {\n+    return this.props.settings.getIn(['settings', stateName, 'value'])\n+      ? this.props.settings.getIn(['settings', stateName, 'value'])\n+      : ''\n+  }\n+\n+  updateSetting (stateName, name, value) {\n+    this.props.updateSetting({ stateName, name, value })\n+  }\n+\n+  render () {\n+    const { active } = this.props\n+    return (\n+      <div className={active ? 'active' : 'hide'}>\n+        <SettingItem\n+          title='Allow User Registration'\n+          subtitle='Allow users to create accounts on the login screen.'\n+          component={\n+            <EnableSwitch\n+              stateName='allowUserRegistration'\n+              label='Enable'\n+              checked={this.allowUserRegistrationEnabled}\n+              onChange={e => {\n+                this.updateSetting('allowUserRegistration', 'allowUserRegistration:enable', e.target.checked)\n+              }}\n+            />\n+          }\n+        />\n+        <SettingItem\n+          title={'Password Complexity'}\n+          subtitle={'Require users passwords to meet minimum password complexity'}\n+          tooltip={'Minimum 8 characters with uppercase and numeric.'}\n+          component={\n+            <EnableSwitch\n+              stateName={'accountsPasswordComplexity'}\n+              label={'Enable'}\n+              checked={this.passwordComplexityEnabled}\n+              onChange={e => {\n+                this.updateSetting('accountsPasswordComplexity', 'accountsPasswordComplexity:enable', e.target.checked)\n+              }}\n+            />\n+          }\n+        />\n+      </div>\n+    )\n+  }\n+}\n+\n+AccountsSettingsContainer.propTypes = {\n+  active: PropTypes.bool.isRequired,\n+  updateSetting: PropTypes.func.isRequired,\n+  updateMultipleSettings: PropTypes.func.isRequired,\n+  settings: PropTypes.object.isRequired\n+}\n+\n+const mapStateToProps = state => ({\n+  settings: state.settings.settings\n+})\n+\n+export default connect(mapStateToProps, { updateSetting, updateMultipleSettings })(AccountsSettingsContainer)"
        },
        {
          "filename": "src/client/containers/Settings/General/index.jsx",
          "status": "modified",
          "additions": 0,
          "deletions": 16,
          "patch": "@@ -94,17 +94,6 @@ class GeneralSettings extends React.Component {\n       />\n     )\n \n-    const AllowUserRegistration = (\n-      <EnableSwitch\n-        stateName='allowUserRegistration'\n-        label='Enable'\n-        checked={this.getSettingsValue('allowUserRegistration')}\n-        onChange={e => {\n-          this.updateSetting('allowUserRegistration', 'allowUserRegistration:enable', e.target.checked)\n-        }}\n-      />\n-    )\n-\n     return (\n       <div className={active ? 'active' : 'hide'}>\n         <SettingItem\n@@ -184,11 +173,6 @@ class GeneralSettings extends React.Component {\n             </ZoneBox>\n           </Zone>\n         </SettingItem>\n-        <SettingItem\n-          title='Allow User Registration'\n-          subtitle='Allow users to create accounts on the login screen.'\n-          component={AllowUserRegistration}\n-        />\n       </div>\n     )\n   }"
        },
        {
          "filename": "src/client/containers/Settings/SettingsContainer.jsx",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -21,6 +21,7 @@ import { fetchSettings } from 'actions/settings'\n import Menu from 'components/Settings/Menu'\n import MenuItem from 'components/Settings/MenuItem'\n import GeneralSettings from './General'\n+import AccountsSettings from './Accounts'\n import AppearanceSettings from './Appearance'\n import PermissionsSettingsContainer from './Permissions'\n import TicketsSettings from './Tickets'\n@@ -89,6 +90,13 @@ class SettingsContainer extends React.Component {\n                   this.onMenuItemClick(e, 'general')\n                 }}\n               />\n+              <MenuItem\n+                title='Accounts'\n+                active={this.state.activeCategory === 'settings-accounts'}\n+                onClick={e => {\n+                  this.onMenuItemClick(e, 'accounts')\n+                }}\n+              />\n               <MenuItem\n                 title='Appearance'\n                 active={this.state.activeCategory === 'settings-appearance'}\n@@ -156,6 +164,7 @@ class SettingsContainer extends React.Component {\n           <div className='page-wrapper full-height scrollable no-overflow-x' ref={i => (this.page = i)}>\n             <div className='settings-wrap'>\n               <GeneralSettings active={this.state.activeCategory === 'settings-general'} />\n+              <AccountsSettings active={this.state.activeCategory === 'settings-accounts'} />\n               <AppearanceSettings active={this.state.activeCategory === 'settings-appearance'} />\n               <PermissionsSettingsContainer active={this.state.activeCategory === 'settings-permissions'} />\n               <TicketsSettings active={this.state.activeCategory === 'settings-tickets'} />"
        },
        {
          "filename": "src/client/sagas/accounts/index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -80,6 +80,7 @@ function * saveEditAccount ({ payload }) {\n   } catch (error) {\n     let errorText = ''\n     if (error.response) errorText = error.response.data.error\n+    if (errorText.message) errorText = errorText.message\n     helpers.UI.showSnackbar(`Error: ${errorText}`, true)\n     Log.error(errorText, error.response || error)\n     yield put({ type: SAVE_EDIT_ACCOUNT.ERROR, error })"
        },
        {
          "filename": "src/controllers/api/apiUtils.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -24,7 +24,7 @@ apiUtils.sendApiSuccess = function (res, object) {\n }\n \n apiUtils.sendApiError = function (res, errorNum, error) {\n-  return res.status(errorNum).json({ success: false, error: error })\n+  return res.status(errorNum).json({ success: false, error })\n }\n apiUtils.sendApiError_InvalidPostData = function (res) {\n   return apiUtils.sendApiError(res, 400, 'Invalid Post Data')"
        },
        {
          "filename": "src/controllers/api/v1/users.js",
          "status": "modified",
          "additions": 111,
          "deletions": 51,
          "patch": "@@ -14,12 +14,14 @@\n \n const async = require('async')\n const _ = require('lodash')\n-const winston = require('winston')\n+const winston = require('../../../logger')\n const permissions = require('../../../permissions')\n const emitter = require('../../../emitter')\n const UserSchema = require('../../../models/user')\n const groupSchema = require('../../../models/group')\n const notificationSchema = require('../../../models/notification')\n+const SettingUtil = require('../../../settings/settingsUtil')\n+const Chance = require('chance')\n \n const apiUsers = {}\n \n@@ -147,7 +149,7 @@ apiUsers.getWithLimit = function (req, res) {\n      \"error\": \"Invalid Post Data\"\n  }\n  */\n-apiUsers.create = function (req, res) {\n+apiUsers.create = async function (req, res) {\n   const response = {}\n   response.success = true\n \n@@ -174,65 +176,91 @@ apiUsers.create = function (req, res) {\n   if (postData.aPass !== postData.aPassConfirm)\n     return res.status(400).json({ success: false, error: 'Invalid Password Match' })\n \n-  const Chance = require('chance')\n-  const chance = new Chance()\n+  async.series(\n+    [\n+      function (next) {\n+        SettingUtil.getSettings(function (err, content) {\n+          if (err) return next(err)\n+          const settings = content.data.settings\n+          if (settings.accountsPasswordComplexity.value) {\n+            const passwordComplexity = require('../../../settings/passwordComplexity')\n+            if (!passwordComplexity.validate(postData.aPass))\n+              return next({ message: 'Password does not meet minimum requirements.' })\n \n-  const account = new UserSchema({\n-    username: postData.aUsername,\n-    password: postData.aPass,\n-    fullname: postData.aFullname,\n-    email: postData.aEmail,\n-    accessToken: chance.hash(),\n-    role: postData.aRole\n-  })\n+            return next()\n+          }\n \n-  if (postData.aTitle) {\n-    account.title = postData.aTitle\n-  }\n+          return next()\n+        })\n+      },\n+      function (next) {\n+        const chance = new Chance()\n+\n+        const account = new UserSchema({\n+          username: postData.aUsername,\n+          password: postData.aPass,\n+          fullname: postData.aFullname,\n+          email: postData.aEmail,\n+          accessToken: chance.hash(),\n+          role: postData.aRole\n+        })\n \n-  account.save(function (err, a) {\n-    if (err) {\n-      response.success = false\n-      response.error = err\n-      winston.debug(response)\n-      return res.status(400).json(response)\n-    }\n+        if (postData.aTitle) {\n+          account.title = postData.aTitle\n+        }\n \n-    a.populate('role', function (err, populatedAccount) {\n-      if (err) return res.status(500).json({ success: false, error: err })\n+        account.save(function (err, a) {\n+          if (err) return next(err)\n \n-      response.account = populatedAccount.toObject()\n-      delete response.account.password\n+          a.populate('role', function (err, populatedAccount) {\n+            if (err) return next(err)\n \n-      const groups = []\n+            response.account = populatedAccount.toObject()\n+            delete response.account.password\n \n-      async.each(\n-        postData.aGrps,\n-        function (id, done) {\n-          if (_.isUndefined(id)) return done(null)\n-          groupSchema.getGroupById(id, function (err, grp) {\n-            if (err) return done(err)\n-            if (!grp) return done('Invalid Group (' + id + ') - Group not found. Check Group ID')\n+            const groups = []\n \n-            grp.addMember(a._id, function (err, success) {\n-              if (err) return done(err)\n+            async.each(\n+              postData.aGrps,\n+              function (id, done) {\n+                if (_.isUndefined(id)) return done()\n+                groupSchema.getGroupById(id, function (err, grp) {\n+                  if (err) return done(err)\n+                  if (!grp) return done({ message: `Invalid Group (${id}) - Group not found. Check Group ID.` })\n+\n+                  grp.addMember(a._id, function (err, success) {\n+                    if (err) return done(err)\n+\n+                    grp.save(function (err) {\n+                      if (err) return done(err)\n+                      groups.push(grp)\n+                      done(null, success)\n+                    })\n+                  })\n+                })\n+              },\n+              function (e) {\n+                if (e) return next(e)\n+                response.account.groups = groups\n \n-              grp.save(function (err) {\n-                if (err) return done(err)\n-                groups.push(grp)\n-                done(null, success)\n-              })\n-            })\n+                return next()\n+              }\n+            )\n           })\n-        },\n-        function (err) {\n-          if (err) return res.status(400).json({ success: false, error: err })\n-          response.account.groups = groups\n-          return res.json(response)\n-        }\n-      )\n-    })\n-  })\n+        })\n+      }\n+    ],\n+    function (e) {\n+      if (e) {\n+        response.success = false\n+        response.error = e\n+        winston.debug(response)\n+        return res.status(400).json(response)\n+      }\n+\n+      return res.json(response)\n+    }\n+  )\n }\n \n /**\n@@ -295,6 +323,20 @@ apiUsers.createPublicAccount = function (req, res) {\n           return next(null, roleDefault)\n         })\n       },\n+      function (roleDefault, next) {\n+        SettingSchema.getSetting('accountsPasswordComplexity:enable', function (err, passwordComplexitySetting) {\n+          if (err) return next(err)\n+          if (!passwordComplexitySetting || passwordComplexitySetting.value === true) {\n+            const passwordComplexity = require('../../../settings/passwordComplexity')\n+            if (!passwordComplexity.validate(postData.user.password))\n+              return next({ message: 'Password does not minimum requirements.' })\n+\n+            return next(null, roleDefault)\n+          }\n+\n+          return next(null, roleDefault)\n+        })\n+      },\n       function (roleDefault, next) {\n         const UserSchema = require('../../../models/user')\n         user = new UserSchema({\n@@ -397,8 +439,20 @@ apiUsers.update = function (req, res) {\n     obj.groups = [obj.groups]\n   }\n \n+  let passwordComplexityEnabled = true\n+\n   async.series(\n     {\n+      settings: function (done) {\n+        var SettingUtil = require('../../../settings/settingsUtil')\n+        SettingUtil.getSettings(function (err, content) {\n+          if (err) return done(err)\n+          var settings = content.data.settings\n+          passwordComplexityEnabled = settings.accountsPasswordComplexity.value\n+\n+          return done()\n+        })\n+      },\n       user: function (done) {\n         UserSchema.getUserByUsername(username, function (err, user) {\n           if (err) return done(err)\n@@ -413,6 +467,12 @@ apiUsers.update = function (req, res) {\n             !_.isEmpty(obj.passconfirm)\n           ) {\n             if (obj.password === obj.passconfirm) {\n+              if (passwordComplexityEnabled) {\n+                // check Password Complexity\n+                const passwordComplexity = require('../../../settings/passwordComplexity')\n+                if (!passwordComplexity.validate(obj.password)) return done('Password does not meet requirements')\n+              }\n+\n               user.password = obj.password\n               passwordUpdated = true\n             }"
        },
        {
          "filename": "src/controllers/api/v2/accounts.js",
          "status": "modified",
          "additions": 155,
          "deletions": 245,
          "patch": "@@ -14,111 +14,80 @@\n \n const _ = require('lodash')\n const async = require('async')\n+const winston = require('../../../logger')\n const Chance = require('chance')\n const apiUtil = require('../apiUtils')\n const User = require('../../../models/user')\n const Group = require('../../../models/group')\n const Team = require('../../../models/team')\n const Department = require('../../../models/department')\n+const passwordComplexity = require('../../../settings/passwordComplexity')\n \n const accountsApi = {}\n \n-accountsApi.create = function (req, res) {\n+accountsApi.create = async function (req, res) {\n   const postData = req.body\n   if (!postData) return apiUtil.sendApiError_InvalidPostData(res)\n \n   let savedId = null\n   const chance = new Chance()\n-  async.series(\n-    {\n-      user: function (next) {\n-        User.create(\n-          {\n-            username: postData.username,\n-            email: postData.email,\n-            password: postData.password,\n-            fullname: postData.fullname,\n-            title: postData.title,\n-            role: postData.role,\n-            accessToken: chance.hash()\n-          },\n-          function (err, user) {\n-            if (err) return apiUtil.sendApiError(res, 500, err.message)\n \n-            savedId = user._id\n-\n-            return user.populate('role', next)\n-          }\n-        )\n-      },\n-      groups: function (next) {\n-        if (!postData.groups) return next(null, [])\n-\n-        Group.getGroups(postData.groups, function (err, groups) {\n-          if (err) return next(err)\n-\n-          async.each(\n-            groups,\n-            function (group, callback) {\n-              group.addMember(savedId, function (err) {\n-                if (err) return callback(err)\n-                group.save(callback)\n-              })\n-            },\n-            function (err) {\n-              if (err) return next(err)\n-\n-              return next(null, groups)\n-            }\n-          )\n-        })\n-      },\n-      teams: function (next) {\n-        if (!postData.teams) return next()\n-\n-        Team.getTeamsByIds(postData.teams, function (err, teams) {\n-          if (err) return next(err)\n-\n-          async.each(\n-            teams,\n-            function (team, callback) {\n-              team.addMember(savedId, function () {\n-                team.save(callback)\n-              })\n-            },\n-            function (err) {\n-              if (err) return next(err)\n+  try {\n+    let user = await User.create({\n+      username: postData.username,\n+      email: postData.email,\n+      password: postData.password,\n+      fullname: postData.fullname,\n+      title: postData.title,\n+      role: postData.role,\n+      accessToken: chance.hash()\n+    })\n+\n+    savedId = user._id\n+\n+    const userPopulated = await user.populate('role')\n+\n+    let groups = []\n+    if (postData.groups) {\n+      groups = await Group.getGroups(postData.groups)\n+      for (const group in groups) {\n+        await group.addMember(savedId)\n+        await group.save()\n+      }\n+    }\n \n-              return next(null, teams)\n-            }\n-          )\n-        })\n-      },\n-      departments: function (next) {\n-        Department.getUserDepartments(savedId, next)\n+    let teams = []\n+    if (postData.teams) {\n+      const dbTeams = await Team.getTeamsByIds(postData.teams)\n+      for (const team of dbTeams) {\n+        await team.addMember(savedId)\n+        await team.save()\n       }\n-    },\n-    function (err, results) {\n-      if (err) return apiUtil.sendApiError(res, 500, err.message)\n \n-      const user = results.user.toJSON()\n-      user.groups = results.groups.map(function (g) {\n-        return { _id: g._id, name: g.name }\n-      })\n+      teams = dbTeams\n+    }\n \n-      if ((user.role.isAgent || user.role.isAdmin) && results.teams) {\n-        user.teams = results.teams.map(function (t) {\n-          return { _id: t._id, name: t.name }\n-        })\n+    const departments = await Department.getUserDepartments(savedId)\n+    user = userPopulated.toJSON()\n+    user.groups = groups.map(g => {\n+      return { _id: g._id, name: g.name }\n+    })\n \n-        user.departments = results.departments.map(function (d) {\n-          return { _id: d._id, name: d.name }\n-        })\n-      }\n+    if ((user.role.isAgent || user.role.isAdmin) && teams.length > 0) {\n+      user.teams = teams.map(t => {\n+        return { _id: t._id, name: t.name }\n+      })\n \n-      return apiUtil.sendApiSuccess(res, { account: user })\n+      user.departments = departments.map(d => {\n+        return { _id: d._id, name: d.name }\n+      })\n     }\n-  )\n+\n+    return apiUtil.sendApiSuccess(res, { account: user })\n+  } catch (e) {\n+    winston.warn(e)\n+    return apiUtil.sendApiError(res, 500, e.message)\n+  }\n }\n \n accountsApi.get = function (req, res) {\n@@ -241,183 +210,124 @@ accountsApi.get = function (req, res) {\n   }\n }\n \n-accountsApi.update = function (req, res) {\n-  var username = req.params.username\n-  var postData = req.body\n+accountsApi.update = async function (req, res) {\n+  const username = req.params.username\n+  const postData = req.body\n   if (!username || !postData) return apiUtil.sendApiError_InvalidPostData(res)\n \n   let passwordUpdated = false\n \n-  async.series(\n-    {\n-      user: function (next) {\n-        User.getByUsername(username, function (err, user) {\n-          if (err) return next(err)\n-          if (!user) return next({ message: 'Invalid User' })\n-\n-          postData._id = user._id\n-\n-          if (\n-            !_.isUndefined(postData.password) &&\n-            !_.isEmpty(postData.password) &&\n-            !_.isUndefined(postData.passwordConfirm) &&\n-            !_.isEmpty(postData.passwordConfirm)\n-          ) {\n-            if (postData.password === postData.passwordConfirm) {\n-              user.password = postData.password\n-              passwordUpdated = true\n-            }\n-          }\n-\n-          if (!_.isUndefined(postData.fullname) && postData.fullname.length > 0) user.fullname = postData.fullname\n-          if (!_.isUndefined(postData.email) && postData.email.length > 0) user.email = postData.email\n-          if (!_.isUndefined(postData.title) && postData.title.length > 0) user.title = postData.title\n-          if (!_.isUndefined(postData.role) && postData.role.length > 0) user.role = postData.role\n-\n-          user.save(function (err, user) {\n-            if (err) return next(err)\n-\n-            user.populate('role', function (err, populatedUser) {\n-              if (err) return next(err)\n-              var resUser = apiUtil.stripUserFields(populatedUser)\n-\n-              return next(null, resUser)\n-            })\n-          })\n-        })\n-      },\n-      groups: function (next) {\n-        if (!postData.groups) return Group.getAllGroupsOfUser(postData._id, next)\n-\n-        var userGroups = []\n-        Group.getAllGroups(function (err, groups) {\n-          if (err) return next(err)\n-          async.each(\n-            groups,\n-            function (grp, callback) {\n-              if (_.includes(postData.groups, grp._id.toString())) {\n-                if (grp.isMember(postData._id)) {\n-                  userGroups.push(grp)\n-                  return callback()\n-                }\n-                grp.addMember(postData._id, function (err, result) {\n-                  if (err) return callback(err)\n-\n-                  if (result) {\n-                    grp.save(function (err) {\n-                      if (err) return callback(err)\n-                      userGroups.push(grp)\n-                      return callback()\n-                    })\n-                  } else {\n-                    return callback()\n-                  }\n-                })\n-              } else {\n-                // Remove Member from group\n-                grp.removeMember(postData._id, function (err, result) {\n-                  if (err) return callback(err)\n-                  if (result) {\n-                    grp.save(function (err) {\n-                      if (err) return callback(err)\n-\n-                      return callback()\n-                    })\n-                  } else {\n-                    return callback()\n-                  }\n-                })\n-              }\n-            },\n-            function (err) {\n-              if (err) return next(err)\n+  try {\n+    // SETTINGS\n+    const SettingsUtil = require('../../../settings/settingsUtil')\n+    const settingsContent = await SettingsUtil.getSettings()\n+    const settings = settingsContent.data.settings\n+    const passwordComplexityEnabled = settings.accountsPasswordComplexity.value\n+\n+    // USER\n+    let user = await User.getByUsername(username)\n+    if (!user) throw new Error('Invalid User')\n+\n+    postData._id = user._id\n+    if (\n+      !_.isUndefined(postData.password) &&\n+      !_.isEmpty(postData.password) &&\n+      !_.isUndefined(postData.passwordConfirm) &&\n+      !_.isEmpty(postData.passwordConfirm)\n+    ) {\n+      if (postData.password === postData.passwordConfirm) {\n+        if (passwordComplexityEnabled) {\n+          if (!passwordComplexity.validate(postData.password)) throw new Error('Password does not meet requirements')\n+        }\n+\n+        user.password = postData.password\n+        passwordUpdated = true\n+      } else throw new Error('Password and Confirm Password do not match.')\n+    }\n \n-              return next(null, userGroups)\n+    if (!_.isUndefined(postData.fullname) && postData.fullname.length > 0) user.fullname = postData.fullname\n+    if (!_.isUndefined(postData.email) && postData.email.length > 0) user.email = postData.email\n+    if (!_.isUndefined(postData.title) && postData.title.length > 0) user.title = postData.title\n+    if (!_.isUndefined(postData.role) && postData.role.length > 0) user.role = postData.role\n+\n+    user = await user.save()\n+    const populatedUser = await user.populate('role')\n+    const resUser = apiUtil.stripUserFields(populatedUser)\n+\n+    // GROUPS\n+    let groups = []\n+    if (!postData.groups) groups = await Group.getAllGroupsOfUser(postData._id)\n+    else {\n+      const allGroups = await Group.getAllGroups()\n+      for (const g of allGroups) {\n+        if (_.includes(postData.groups, g._id.toString())) {\n+          if (g.isMember(postData._id)) {\n+            groups.push(g)\n+          } else {\n+            const result = await g.addMember(postData._id)\n+            if (result) {\n+              await g.save()\n+              groups.push(g)\n             }\n-          )\n-        })\n-      },\n-      teams: function (next) {\n-        if (!postData.teams) return Team.getTeamsOfUser(postData._id, next)\n-\n-        var userTeams = []\n-        Team.getTeams(function (err, teams) {\n-          if (err) return next(err)\n-          async.each(\n-            teams,\n-            function (team, callback) {\n-              if (_.includes(postData.teams, team._id.toString())) {\n-                if (team.isMember(postData._id)) {\n-                  userTeams.push(team)\n-                  return callback()\n-                }\n-                team.addMember(postData._id, function (err, result) {\n-                  if (err) return callback(err)\n-\n-                  if (result) {\n-                    team.save(function (err) {\n-                      if (err) return callback(err)\n-                      userTeams.push(team)\n-                      return callback()\n-                    })\n-                  } else {\n-                    return callback()\n-                  }\n-                })\n-              } else {\n-                // Remove Member from group\n-                team.removeMember(postData._id, function (err, result) {\n-                  if (err) return callback(err)\n-                  if (result) {\n-                    team.save(function (err) {\n-                      if (err) return callback(err)\n-\n-                      return callback()\n-                    })\n-                  } else {\n-                    return callback()\n-                  }\n-                })\n-              }\n-            },\n-            function (err) {\n-              if (err) return next(err)\n+          }\n+        } else {\n+          const result = await g.removeMember(postData._id)\n+          if (result) await g.save()\n+        }\n+      }\n+    }\n \n-              return next(null, userTeams)\n+    // TEAMS\n+    let teams = []\n+    if (!postData.teams) {\n+      teams = await Team.getTeamsOfUser(postData._id)\n+    } else {\n+      const allTeams = await Team.getTeams()\n+      for (const t of allTeams) {\n+        if (_.includes(postData.teams, t._id.toString())) {\n+          if (t.isMember(postData._id)) teams.push(t)\n+          else {\n+            const result = await t.addMember(postData._id)\n+            if (result) {\n+              await t.save()\n+              teams.push(t)\n             }\n-          )\n-        })\n-      },\n-      departments: function (next) {\n-        Department.getUserDepartments(postData._id, next)\n+          }\n+        } else {\n+          const result = await t.removeMember(postData._id)\n+          if (result) await t.save()\n+        }\n       }\n-    },\n-    async function (err, results) {\n-      if (err) return apiUtil.sendApiError(res, 500, err.message)\n+    }\n \n-      var user = results.user.toJSON()\n-      user.groups = results.groups.map(function (g) {\n-        return { _id: g._id, name: g.name }\n-      })\n+    // DEPARTMENTS\n+    const departments = await Department.getUserDepartments(postData._id)\n \n-      if ((user.role.isAgent || user.role.isAdmin) && results.teams) {\n-        user.teams = results.teams.map(function (t) {\n-          return { _id: t._id, name: t.name }\n-        })\n+    user = resUser.toJSON()\n+    user.groups = groups.map(g => {\n+      return { _id: g._id, name: g.name }\n+    })\n \n-        user.departments = results.departments.map(function (d) {\n-          return { _id: d._id, name: d.name }\n-        })\n-      }\n+    if ((user.role.isAgent || user.role.isAdmin) && teams.length > 0) {\n+      user.teams = teams.map(t => {\n+        return { _id: t._id, name: t.name }\n+      })\n \n-      if (passwordUpdated) {\n-        const Session = require('../../../models/session')\n-        await Session.destroy(user._id)\n-      }\n+      user.departments = departments.map(d => {\n+        return { _id: d._id, name: d.name }\n+      })\n+    }\n \n-      return apiUtil.sendApiSuccess(res, { user: user })\n+    if (passwordUpdated) {\n+      const Session = require('../../../models/session')\n+      await Session.destroy(user._id)\n     }\n-  )\n+\n+    return apiUtil.sendApiSuccess(res, { user })\n+  } catch (e) {\n+    const error = { name: e.name, message: e.message }\n+    return apiUtil.sendApiError(res, 400, error)\n+  }\n }\n \n module.exports = accountsApi"
        },
        {
          "filename": "src/controllers/settings.js",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -76,6 +76,14 @@ settingsController.general = function (req, res) {\n   renderView(res, content)\n }\n \n+settingsController.accounts = function (req, res) {\n+  if (!checkPerms(req, 'settings:view')) return res.redirect('/')\n+\n+  const content = initViewContent('accounts', req)\n+\n+  renderView(res, content)\n+}\n+\n settingsController.appearance = function (req, res) {\n   if (!checkPerms(req, 'settings:view')) return res.redirect('/')\n "
        },
        {
          "filename": "src/helpers/viewdata/index.js",
          "status": "modified",
          "additions": 10,
          "deletions": 1,
          "patch": "@@ -17,6 +17,7 @@ const _ = require('lodash')\n const winston = require('../../logger')\n const moment = require('moment')\n const settingSchema = require('../../models/setting')\n+const settingsUtil = require('../../settings/settingsUtil')\n \n const viewController = {}\n const viewdata = {}\n@@ -356,7 +357,6 @@ viewController.getData = function (request, cb) {\n         })\n       },\n       function (callback) {\n-        const settingsUtil = require('../../settings/settingsUtil')\n         settingsUtil.getSettings(function (err, res) {\n           if (err) return callback(err)\n \n@@ -365,6 +365,15 @@ viewController.getData = function (request, cb) {\n           return callback()\n         })\n       },\n+      function (callback) {\n+        settingsUtil.getSettings(function (err, res) {\n+          if (err) return callback(err)\n+\n+          viewdata.accountsPasswordComplexity = res.data.settings.accountsPasswordComplexity.value\n+\n+          return callback()\n+        })\n+      },\n       function (callback) {\n         viewController.getPluginsInfo(request, function (err, data) {\n           if (err) return callback(err)"
        },
        {
          "filename": "src/models/department.js",
          "status": "modified",
          "additions": 16,
          "deletions": 9,
          "patch": "@@ -48,16 +48,23 @@ departmentSchema.statics.getDepartmentsByTeam = function (teamIds, callback) {\n     .exec(callback)\n }\n \n-departmentSchema.statics.getUserDepartments = function (userId, callback) {\n-  var self = this\n-\n-  Teams.getTeamsOfUser(userId, function (err, teams) {\n-    if (err) return callback(err)\n+departmentSchema.statics.getUserDepartments = async function (userId, callback) {\n+  const self = this\n+  return new Promise((resolve, reject) => {\n+    ;(async () => {\n+      try {\n+        const teams = await Teams.getTeamsOfUser(userId)\n+        const exec = self.model(COLLECTION).find({ teams: { $in: teams } })\n+        if (typeof callback === 'function') {\n+          return exec.exec(callback)\n+        }\n \n-    return self\n-      .model(COLLECTION)\n-      .find({ teams: { $in: teams } })\n-      .exec(callback)\n+        const departments = await exec.exec()\n+        return resolve(departments)\n+      } catch (e) {\n+        return reject(e)\n+      }\n+    })()\n   })\n }\n "
        },
        {
          "filename": "src/models/group.js",
          "status": "modified",
          "additions": 27,
          "deletions": 8,
          "patch": "@@ -165,14 +165,33 @@ groupSchema.statics.getAllPublicGroups = function (callback) {\n   return q.exec(callback)\n }\n \n-groupSchema.statics.getGroups = function (groupIds, callback) {\n-  if (_.isUndefined(groupIds)) return callback('Invalid Array of Group IDs - GroupSchema.GetGroups()')\n-\n-  this.model(COLLECTION)\n-    .find({ _id: { $in: groupIds } })\n-    .populate('members', '_id username fullname email role preferences image title deleted')\n-    .sort('name')\n-    .exec(callback)\n+groupSchema.statics.getGroups = async function (groupIds, callback) {\n+  return new Promise((resolve, reject) => {\n+    ;(async () => {\n+      if (_.isUndefined(groupIds)) {\n+        if (typeof callback === 'function') return callback('Invalid Array of Group IDs - GroupSchema.GetGroups()')\n+        return reject(new Error('Invalid Array of Group IDs - GroupSchema.GetGroups()'))\n+      }\n+\n+      try {\n+        const exec = this.model(COLLECTION)\n+          .find({ _id: { $in: groupIds } })\n+          .populate('members', '_id username fullname email role preferences image title deleted')\n+          .sort('name')\n+\n+        if (typeof callback === 'function') {\n+          return exec.exec(callback)\n+        }\n+\n+        const groups = await exec.exec()\n+\n+        return resolve(groups)\n+      } catch (e) {\n+        if (typeof callback === 'function') return callback(e)\n+        return reject(e)\n+      }\n+    })()\n+  })\n }\n \n groupSchema.statics.getAllGroupsOfUser = function (userId, callback) {"
        },
        {
          "filename": "src/models/team.js",
          "status": "modified",
          "additions": 13,
          "deletions": 8,
          "patch": "@@ -45,17 +45,22 @@ teamSchema.pre('save', function (next) {\n   return next()\n })\n \n-teamSchema.methods.addMember = function (memberId, callback) {\n-  if (_.isUndefined(memberId)) return callback('Invalid MemberId - TeamSchema.AddMember()')\n+teamSchema.methods.addMember = async function (memberId, callback) {\n+  return new Promise((resolve, reject) => {\n+    ;(async () => {\n+      if (_.isUndefined(memberId)) {\n+        if (typeof callback === 'function') return callback({ message: 'Invalid MemberId - TeamSchema.AddMember()' })\n+        return reject(new Error('Invalid MemberId - TeamSchema.AddMember()'))\n+      }\n \n-  if (this.members === null) this.members = []\n+      if (this.members === null) this.members = []\n \n-  if (isMember(this.members, memberId)) return callback(null, false)\n+      this.members.push(memberId)\n+      this.members = _.uniq(this.members)\n \n-  this.members.push(memberId)\n-  this.members = _.uniq(this.members)\n-\n-  return callback(null, true)\n+      return resolve(true)\n+    })()\n+  })\n }\n \n teamSchema.methods.removeMember = function (memberId, callback) {"
        },
        {
          "filename": "src/public/js/angularjs/controllers/profile.js",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -91,8 +91,13 @@ define([\n             })\n           })\n           .error(function (e) {\n-            $log.log('[trudesk:profile:updateUser] - ' + e.error.message)\n-            helpers.UI.showSnackbar('Error ' + e.error.message, true)\n+            if (e.error.message) {\n+              $log.log('[trudesk:profile:updateUser] - ' + e.error.message)\n+              helpers.UI.showSnackbar('Error ' + e.error.message, true)\n+            } else {\n+              $log.log('[trudesk:profile:updateUser] - ' + e.error)\n+              helpers.UI.showSnackbar('Error: ' + e.error, true)\n+            }\n           })\n       }\n "
        },
        {
          "filename": "src/public/js/vendor/formvalidator/jquery.form-validator.js",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -2061,6 +2061,13 @@\n       //   errorMessageKey: '' // not used\n     })\n \n+    $.formUtils.addValidator({\n+      name: 'none',\n+      validatorFunction: function(value, $el, config, language, $form) {\n+        return true\n+      }\n+    })\n+\n     $.formUtils.addValidator({\n       name: 'confirmation',\n       validatorFunction: function (value, $el, config, language, $form) {"
        },
        {
          "filename": "src/routes/index.js",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -283,6 +283,7 @@ function mainRoutes (router, middleware, controllers) {\n \n   router.get('/settings', middleware.redirectToLogin, middleware.loadCommonData, controllers.settings.general)\n   router.get('/settings/general', middleware.redirectToLogin, middleware.loadCommonData, controllers.settings.general)\n+  router.get('/settings/accounts', middleware.redirectToLogin, middleware.loadCommonData, controllers.settings.accounts)\n   router.get(\n     '/settings/appearance',\n     middleware.redirectToLogin,"
        },
        {
          "filename": "src/settings/passwordComplexity.js",
          "status": "added",
          "additions": 50,
          "deletions": 0,
          "patch": "@@ -0,0 +1,50 @@\n+/*\n+ *       .                             .o8                     oooo\n+ *    .o8                             \"888                     `888\n+ *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n+ *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n+ *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n+ *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n+ *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n+ *  ========================================================================\n+ *  Author:     Chris Brame\n+ *  Updated:    5/17/22 6:33 PM\n+ *  Copyright (c) 2014-2022. All rights reserved.\n+ */\n+\n+const { passwordStrength } = require('check-password-strength')\n+const passwordComplexityOptions = [\n+  {\n+    id: 0,\n+    value: 'Too weak',\n+    minDiversity: 0,\n+    minLength: 0\n+  },\n+  {\n+    id: 1,\n+    value: 'Weak',\n+    minDiversity: 2,\n+    minLength: 6\n+  },\n+  {\n+    id: 2,\n+    value: 'Medium',\n+    minDiversity: 3,\n+    minLength: 8\n+  },\n+  {\n+    id: 3,\n+    value: 'Strong',\n+    minDiversity: 4,\n+    minLength: 10\n+  }\n+]\n+\n+const passwordComplexity = {}\n+\n+passwordComplexity.validate = password => {\n+  const response = passwordStrength(password, passwordComplexityOptions)\n+  return !(response.id === 0 || response.id === 1)\n+}\n+\n+module.exports = passwordComplexity"
        },
        {
          "filename": "src/settings/settingsUtil.js",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -122,6 +122,8 @@ util.getSettings = async callback => {\n \n         s.maintenanceMode = parseSetting(settings, 'maintenanceMode:enable', false)\n \n+        s.accountsPasswordComplexity = parseSetting(settings, 'accountsPasswordComplexity:enable', true)\n+\n         const types = await ticketTypeSchema.getTypes()\n         content.data.ticketTypes = _.sortBy(types, o => o.name)\n "
        },
        {
          "filename": "yarn.lock",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -3878,6 +3878,11 @@ check-error@^1.0.2:\n   resolved \"https://registry.yarnpkg.com/check-error/-/check-error-1.0.2.tgz#574d312edd88bb5dd8912e9286dd6c0aed4aac82\"\n   integrity sha1-V00xLt2Iu13YkS6Sht1sCu1KrII=\n \n+check-password-strength@2.0.5:\n+  version \"2.0.5\"\n+  resolved \"https://registry.yarnpkg.com/check-password-strength/-/check-password-strength-2.0.5.tgz#bb10da01d24bd69e5e629c5cea2a6b729e5061af\"\n+  integrity sha512-b61T/+4OIGWSMRxJUsYOY44Cf9w7orIt2OQmF/WgH16qbJKIT1jG3XHx3jP+o090eH7rq13DRleKgXCiROBzMQ==\n+\n cheerio-select@^1.5.0:\n   version \"1.5.0\"\n   resolved \"https://registry.yarnpkg.com/cheerio-select/-/cheerio-select-1.5.0.tgz#faf3daeb31b17c5e1a9dabcee288aaf8aafa5823\""
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 7,
        "dependency_files": 1,
        "test_files": 0,
        "unique_directories": 17,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "29f3f1698f341e3d8fcc4f4eb5340ee43427fe63",
            "date": "2024-07-24T22:49:58Z",
            "author_login": "polonel"
          },
          {
            "sha": "64436f82e01b4b7b326d9bd8b8e39f06490b56de",
            "date": "2024-07-24T22:48:33Z",
            "author_login": "polonel"
          },
          {
            "sha": "92008c62b5c381c0dbb9af4deac41bd567537f88",
            "date": "2024-07-24T22:39:02Z",
            "author_login": "polonel"
          },
          {
            "sha": "605ba8a04c7487d349282291085bf2e9ff0a9dae",
            "date": "2024-07-24T21:32:24Z",
            "author_login": "polonel"
          },
          {
            "sha": "517aee8d5224419f9e7dc53b268c544dc71057e7",
            "date": "2024-07-24T15:15:40Z",
            "author_login": "kareem-abdul"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-521",
    "description": "Weak Password Requirements in GitHub repository polonel/trudesk prior to 1.2.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-20T23:15:44.173",
    "last_modified": "2024-11-21T06:41:26.520",
    "fix_date": "2022-05-18T04:18:45Z"
  },
  "references": [
    {
      "url": "https://github.com/polonel/trudesk/commit/13dd6c61fc85fa773b4065f075fceda563129c53",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0966043c-602f-463e-a6e5-9a1745f4fbfa",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/polonel/trudesk/commit/13dd6c61fc85fa773b4065f075fceda563129c53",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/0966043c-602f-463e-a6e5-9a1745f4fbfa",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:07.143401",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "trudesk",
    "owner": "polonel",
    "created_at": "2014-07-14T20:57:48Z",
    "updated_at": "2025-01-08T13:34:07Z",
    "pushed_at": "2025-01-05T20:16:48Z",
    "size": 84271,
    "stars": 1336,
    "forks": 456,
    "open_issues": 12,
    "watchers": 1336,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "develop",
      "master"
    ],
    "languages": {
      "JavaScript": 11363842,
      "CSS": 583680,
      "SCSS": 507907,
      "Handlebars": 361791,
      "Sass": 209119,
      "HTML": 78238,
      "TypeScript": 14435,
      "Dockerfile": 838,
      "Makefile": 694,
      "Shell": 412
    },
    "commit_activity": {
      "total_commits_last_year": 7,
      "avg_commits_per_week": 0.1346153846153846,
      "days_active_last_year": 2
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T13:07:34.211075"
  }
}