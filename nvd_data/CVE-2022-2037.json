{
  "cve_id": "CVE-2022-2037",
  "github_data": {
    "repository": "tooljet/tooljet",
    "fix_commit": "fadf025365823cbbc739a1313791c0a04621972b",
    "related_commits": [
      "fadf025365823cbbc739a1313791c0a04621972b",
      "fadf025365823cbbc739a1313791c0a04621972b"
    ],
    "patch_url": "https://github.com/tooljet/tooljet/commit/fadf025365823cbbc739a1313791c0a04621972b.patch",
    "fix_commit_details": {
      "sha": "fadf025365823cbbc739a1313791c0a04621972b",
      "commit_date": "2022-06-02T09:50:51Z",
      "author": {
        "login": "gsmithun4",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "[BUG] Account level security issue (#3150)",
        "length": 312,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 1331,
        "additions": 788,
        "deletions": 543
      },
      "files": [
        {
          "filename": "frontend/src/App/App.jsx",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -142,6 +142,20 @@ class App extends React.Component {\n                 />\n               )}\n             />\n+            <Route\n+              path=\"/invitations/:token/workspaces/:organizationToken\"\n+              render={(props) => (\n+                <Redirect\n+                  to={{\n+                    pathname: '/confirm',\n+                    state: {\n+                      token: props.match.params.token,\n+                      organizationToken: props.match.params.organizationToken,\n+                    },\n+                  }}\n+                />\n+              )}\n+            />\n             <Route path=\"/confirm\" component={ConfirmationPage} />\n             <Route\n               path=\"/organization-invitations/:token\""
        },
        {
          "filename": "frontend/src/ConfirmationPage/ConfirmationPage.jsx",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -1,5 +1,5 @@\n import React from 'react';\n-import { userService } from '@/_services';\n+import { appService } from '@/_services';\n import { toast } from 'react-hot-toast';\n \n class ConfirmationPage extends React.Component {\n@@ -23,7 +23,7 @@ class ConfirmationPage extends React.Component {\n \n   setPassword = (e) => {\n     e.preventDefault();\n-    const token = this.props.location.state.token;\n+    const { token, organizationToken } = this.props.location.state;\n     const { password, organization, role, firstName, lastName, password_confirmation } = this.state;\n     this.setState({ isLoading: true });\n \n@@ -43,9 +43,10 @@ class ConfirmationPage extends React.Component {\n       return;\n     }\n \n-    userService\n+    appService\n       .setPasswordFromToken({\n         token,\n+        organizationToken,\n         password,\n         organization,\n         role,"
        },
        {
          "filename": "frontend/src/ConfirmationPage/OrganizationInvitationPage.jsx",
          "status": "modified",
          "additions": 54,
          "deletions": 55,
          "patch": "@@ -1,5 +1,5 @@\n import React from 'react';\n-import { userService } from '@/_services';\n+import { appService } from '@/_services';\n import { toast } from 'react-hot-toast';\n \n class OrganizationInvitationPage extends React.Component {\n@@ -42,21 +42,22 @@ class OrganizationInvitationPage extends React.Component {\n       }\n     }\n \n-    userService\n+    appService\n       .acceptInvite({\n         token,\n         password,\n       })\n-      .then(() => {\n+      .then((response) => {\n         this.setState({ isLoading: false });\n-        toast.success(`Added to the workspace${isSetPassword ? ' and password has been set ' : ' '}successfully.`, {\n-          position: 'top-center',\n+        response.json().then((data) => {\n+          if (!response.ok) {\n+            return toast.error(data?.message || 'Error while setting up your account.', { position: 'top-center' });\n+          }\n+          toast.success(`Added to the workspace${isSetPassword ? ' and password has been set ' : ' '}successfully.`, {\n+            position: 'top-center',\n+          });\n+          this.props.history.push('/login');\n         });\n-        this.props.history.push('/login');\n-      })\n-      .catch(({ error }) => {\n-        this.setState({ isLoading: false });\n-        toast.error(error, { position: 'top-center' });\n       });\n   };\n \n@@ -73,7 +74,7 @@ class OrganizationInvitationPage extends React.Component {\n           </div>\n           <form className=\"card card-md\" action=\".\" method=\"get\" autoComplete=\"off\">\n             <div className=\"card-body\">\n-              {!this.single_organization && (\n+              {!this.single_organization ? (\n                 <>\n                   <h2 className=\"card-title text-center mb-2\">Already have an account?</h2>\n                   <div className=\"mb-3\">\n@@ -85,53 +86,51 @@ class OrganizationInvitationPage extends React.Component {\n                       Accept invite\n                     </button>\n                   </div>\n-                  <div className=\"org-invite-or\">\n-                    <h2>\n-                      <span>OR</span>\n-                    </h2>\n+                </>\n+              ) : (\n+                <>\n+                  <h2 className=\"card-title text-center mb-4\">Set up your account</h2>\n+                  <div className=\"mb-3\">\n+                    <label className=\"form-label\">Password</label>\n+                    <div className=\"input-group input-group-flat\">\n+                      <input\n+                        onChange={this.handleChange}\n+                        name=\"password\"\n+                        type=\"password\"\n+                        className=\"form-control\"\n+                        autoComplete=\"off\"\n+                      />\n+                      <span className=\"input-group-text\"></span>\n+                    </div>\n+                  </div>\n+                  <div className=\"mb-3\">\n+                    <label className=\"form-label\">Confirm Password</label>\n+                    <div className=\"input-group input-group-flat\">\n+                      <input\n+                        onChange={this.handleChange}\n+                        name=\"password_confirmation\"\n+                        type=\"password\"\n+                        className=\"form-control\"\n+                        autoComplete=\"off\"\n+                      />\n+                      <span className=\"input-group-text\"></span>\n+                    </div>\n+                  </div>\n+                  <div className=\"form-footer\">\n+                    <p>\n+                      By clicking the button below, you agree to our{' '}\n+                      <a href=\"https://tooljet.io/terms\">Terms and Conditions</a>.\n+                    </p>\n+                    <button\n+                      className={`btn mt-2 btn-primary w-100 ${isLoading ? ' btn-loading' : ''}`}\n+                      onClick={(e) => this.acceptInvite(e, true)}\n+                      disabled={isLoading}\n+                    >\n+                      Finish account setup and accept invite\n+                    </button>\n                   </div>\n                 </>\n               )}\n-              <h2 className=\"card-title text-center mb-4\">Set up your account</h2>\n-              <div className=\"mb-3\">\n-                <label className=\"form-label\">Password</label>\n-                <div className=\"input-group input-group-flat\">\n-                  <input\n-                    onChange={this.handleChange}\n-                    name=\"password\"\n-                    type=\"password\"\n-                    className=\"form-control\"\n-                    autoComplete=\"off\"\n-                  />\n-                  <span className=\"input-group-text\"></span>\n-                </div>\n-              </div>\n-              <div className=\"mb-3\">\n-                <label className=\"form-label\">Confirm Password</label>\n-                <div className=\"input-group input-group-flat\">\n-                  <input\n-                    onChange={this.handleChange}\n-                    name=\"password_confirmation\"\n-                    type=\"password\"\n-                    className=\"form-control\"\n-                    autoComplete=\"off\"\n-                  />\n-                  <span className=\"input-group-text\"></span>\n-                </div>\n-              </div>\n-              <div className=\"form-footer\">\n-                <p>\n-                  By clicking the button below, you agree to our{' '}\n-                  <a href=\"https://tooljet.io/terms\">Terms and Conditions</a>.\n-                </p>\n-                <button\n-                  className={`btn mt-2 btn-primary w-100 ${isLoading ? ' btn-loading' : ''}`}\n-                  onClick={(e) => this.acceptInvite(e, true)}\n-                  disabled={isLoading}\n-                >\n-                  Finish account setup and accept invite\n-                </button>\n-              </div>\n             </div>\n           </form>\n         </div>"
        },
        {
          "filename": "frontend/src/ManageOrgUsers/ManageOrgUsers.jsx",
          "status": "modified",
          "additions": 0,
          "deletions": 7,
          "patch": "@@ -2,7 +2,6 @@ import React from 'react';\n import { authenticationService, organizationService, organizationUserService } from '@/_services';\n import { Header } from '@/_components';\n import { toast } from 'react-hot-toast';\n-import { history } from '@/_helpers';\n import { CopyToClipboard } from 'react-copy-to-clipboard';\n import ReactTooltip from 'react-tooltip';\n \n@@ -26,7 +25,6 @@ class ManageOrgUsers extends React.Component {\n   }\n \n   validateEmail(email) {\n-    console.log(email);\n     const re =\n       /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n     return re.test(String(email).toLowerCase());\n@@ -168,11 +166,6 @@ class ManageOrgUsers extends React.Component {\n     }\n   };\n \n-  logout = () => {\n-    authenticationService.logout();\n-    history.push('/login');\n-  };\n-\n   generateInvitationURL = (user) => window.location.origin + '/organization-invitations/' + user.invitation_token;\n \n   invitationLinkCopyHandler = () => {"
        },
        {
          "filename": "frontend/src/_services/app.service.js",
          "status": "modified",
          "additions": 27,
          "deletions": 0,
          "patch": "@@ -19,6 +19,8 @@ export const appService = {\n   setVisibility,\n   setMaintenance,\n   setSlug,\n+  setPasswordFromToken,\n+  acceptInvite,\n };\n \n function getConfig() {\n@@ -126,3 +128,28 @@ function setSlug(appId, slug) {\n   const requestOptions = { method: 'PUT', headers: authHeader(), body: JSON.stringify({ app: { slug: slug } }) };\n   return fetch(`${config.apiUrl}/apps/${appId}`, requestOptions).then(handleResponse);\n }\n+\n+function setPasswordFromToken({ token, password, organization, role, firstName, lastName, organizationToken }) {\n+  const body = {\n+    token,\n+    organizationToken,\n+    password,\n+    organization,\n+    role,\n+    first_name: firstName,\n+    last_name: lastName,\n+  };\n+\n+  const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(body) };\n+  return fetch(`${config.apiUrl}/set-password-from-token`, requestOptions).then(handleResponse);\n+}\n+\n+function acceptInvite({ token, password }) {\n+  const body = {\n+    token,\n+    password,\n+  };\n+\n+  const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(body) };\n+  return fetch(`${config.apiUrl}/accept-invite`, requestOptions);\n+}"
        },
        {
          "filename": "frontend/src/_services/user.service.js",
          "status": "modified",
          "additions": 0,
          "deletions": 26,
          "patch": "@@ -5,10 +5,8 @@ export const userService = {\n   getAll,\n   createUser,\n   deleteUser,\n-  setPasswordFromToken,\n   updateCurrentUser,\n   changePassword,\n-  acceptInvite,\n   getAvatar,\n   updateAvatar,\n };\n@@ -53,30 +51,6 @@ function deleteUser(id) {\n   return fetch(`${config.apiUrl}/users/${id}`, requestOptions).then(handleResponse);\n }\n \n-function setPasswordFromToken({ token, password, organization, role, firstName, lastName }) {\n-  const body = {\n-    token,\n-    password,\n-    organization,\n-    role,\n-    first_name: firstName,\n-    last_name: lastName,\n-  };\n-\n-  const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(body) };\n-  return fetch(`${config.apiUrl}/users/set_password_from_token`, requestOptions).then(handleResponse);\n-}\n-\n-function acceptInvite({ token, password }) {\n-  const body = {\n-    token,\n-    password,\n-  };\n-\n-  const requestOptions = { method: 'POST', headers: authHeader(), body: JSON.stringify(body) };\n-  return fetch(`${config.apiUrl}/users/accept-invite`, requestOptions).then(handleResponse);\n-}\n-\n function updateCurrentUser(firstName, lastName) {\n   const body = { first_name: firstName, last_name: lastName };\n   const requestOptions = { method: 'PATCH', headers: authHeader(), body: JSON.stringify(body) };"
        },
        {
          "filename": "server/src/controllers/app.controller.ts",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -3,6 +3,10 @@ import { User } from 'src/decorators/user.decorator';\n import { JwtAuthGuard } from '../../src/modules/auth/jwt-auth.guard';\n import { AppAuthenticationDto, AppForgotPasswordDto, AppPasswordResetDto } from '@dto/app-authentication.dto';\n import { AuthService } from '../services/auth.service';\n+import { MultiOrganizationGuard } from 'src/modules/auth/multi-organization.guard';\n+import { SignupDisableGuard } from 'src/modules/auth/signup-disable.guard';\n+import { CreateUserDto } from '@dto/user.dto';\n+import { AcceptInviteDto } from '@dto/accept-organization-invite.dto';\n \n @Controller()\n export class AppController {\n@@ -22,6 +26,20 @@ export class AppController {\n     return await this.authService.switchOrganization(organizationId, user);\n   }\n \n+  @UseGuards(MultiOrganizationGuard, SignupDisableGuard)\n+  @Post('set-password-from-token')\n+  async create(@Body() userCreateDto: CreateUserDto) {\n+    await this.authService.setupAccountFromInvitationToken(userCreateDto);\n+    return {};\n+  }\n+\n+  @Post('accept-invite')\n+  async acceptInvite(@Body() acceptInviteDto: AcceptInviteDto) {\n+    await this.authService.acceptOrganizationInvite(acceptInviteDto);\n+    return {};\n+  }\n+\n+  @UseGuards(MultiOrganizationGuard, SignupDisableGuard)\n   @Post('signup')\n   async signup(@Body() appAuthDto: AppAuthenticationDto) {\n     return this.authService.signup(appAuthDto.email);"
        },
        {
          "filename": "server/src/controllers/organization_users.controller.ts",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -8,17 +8,21 @@ import { CheckPolicies } from 'src/modules/casl/check_policies.decorator';\n import { User as UserEntity } from 'src/entities/user.entity';\n import { User } from 'src/decorators/user.decorator';\n import { InviteNewUserDto } from '../dto/invite-new-user.dto';\n+import { OrganizationsService } from '@services/organizations.service';\n \n @Controller('organization_users')\n export class OrganizationUsersController {\n-  constructor(private organizationUsersService: OrganizationUsersService) {}\n+  constructor(\n+    private organizationUsersService: OrganizationUsersService,\n+    private organizationsService: OrganizationsService\n+  ) {}\n \n   // Endpoint for inviting new organization users\n   @UseGuards(JwtAuthGuard, PoliciesGuard)\n   @CheckPolicies((ability: AppAbility) => ability.can('inviteUser', UserEntity))\n   @Post()\n   async create(@User() user, @Body() inviteNewUserDto: InviteNewUserDto) {\n-    const result = await this.organizationUsersService.inviteNewUser(user, inviteNewUserDto);\n+    const result = await this.organizationsService.inviteNewUser(user, inviteNewUserDto);\n     return decamelizeKeys({ users: result });\n   }\n "
        },
        {
          "filename": "server/src/controllers/users.controller.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 20,
          "patch": "@@ -1,32 +1,16 @@\n-import { Body, Controller, Post, Patch, UseGuards, UseInterceptors, Req, UploadedFile } from '@nestjs/common';\n+import { Body, Controller, Post, Patch, UseGuards, UseInterceptors, UploadedFile } from '@nestjs/common';\n import { Express } from 'express';\n import { FileInterceptor } from '@nestjs/platform-express';\n import { JwtAuthGuard } from 'src/modules/auth/jwt-auth.guard';\n import { PasswordRevalidateGuard } from 'src/modules/auth/password-revalidate.guard';\n import { UsersService } from 'src/services/users.service';\n import { User } from 'src/decorators/user.decorator';\n-import { SignupDisableGuard } from 'src/modules/auth/signup-disable.guard';\n-import { CreateUserDto, UpdateUserDto } from '@dto/user.dto';\n-import { AcceptInviteDto } from '@dto/accept-organization-invite.dto';\n-import { MultiOrganizationGuard } from 'src/modules/auth/multi-organization.guard';\n+import { UpdateUserDto } from '@dto/user.dto';\n \n @Controller('users')\n export class UsersController {\n   constructor(private usersService: UsersService) {}\n \n-  @UseGuards(MultiOrganizationGuard, SignupDisableGuard)\n-  @Post('set_password_from_token')\n-  async create(@Body() userCreateDto: CreateUserDto) {\n-    await this.usersService.setupAccountFromInvitationToken(userCreateDto);\n-    return {};\n-  }\n-\n-  @Post('accept-invite')\n-  async acceptInvite(@Body() acceptInviteDto: AcceptInviteDto) {\n-    await this.usersService.acceptOrganizationInvite(acceptInviteDto);\n-    return {};\n-  }\n-\n   @UseGuards(JwtAuthGuard)\n   @Patch('update')\n   async update(@User() user, @Body() updateUserDto: UpdateUserDto) {\n@@ -42,8 +26,8 @@ export class UsersController {\n   @Post('avatar')\n   @UseGuards(JwtAuthGuard)\n   @UseInterceptors(FileInterceptor('file'))\n-  async addAvatar(@Req() req, @UploadedFile() file: Express.Multer.File) {\n-    return this.usersService.addAvatar(req.user.id, file.buffer, file.originalname);\n+  async addAvatar(@User() user, @UploadedFile() file: Express.Multer.File) {\n+    return this.usersService.addAvatar(user.id, file.buffer, file.originalname);\n   }\n \n   @UseGuards(JwtAuthGuard, PasswordRevalidateGuard)"
        },
        {
          "filename": "server/src/dto/accept-organization-invite.dto.ts",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,4 +1,4 @@\n-import { IsString, IsOptional, IsNotEmpty } from 'class-validator';\n+import { IsString, IsNotEmpty, IsOptional } from 'class-validator';\n \n export class AcceptInviteDto {\n   @IsString()"
        },
        {
          "filename": "server/src/dto/user.dto.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -26,6 +26,11 @@ export class CreateUserDto {\n   @IsNotEmpty()\n   password: string;\n \n+  @IsString()\n+  @IsOptional()\n+  @IsNotEmpty()\n+  organizationToken: string;\n+\n   @IsString()\n   @IsNotEmpty()\n   token: string;"
        },
        {
          "filename": "server/src/services/auth.service.ts",
          "status": "modified",
          "additions": 146,
          "deletions": 4,
          "patch": "@@ -1,4 +1,10 @@\n-import { Injectable, NotAcceptableException, NotFoundException, UnauthorizedException } from '@nestjs/common';\n+import {\n+  BadRequestException,\n+  Injectable,\n+  NotAcceptableException,\n+  NotFoundException,\n+  UnauthorizedException,\n+} from '@nestjs/common';\n import { UsersService } from './users.service';\n import { OrganizationsService } from './organizations.service';\n import { JwtService } from '@nestjs/jwt';\n@@ -9,12 +15,23 @@ import { decamelizeKeys } from 'humps';\n import { Organization } from 'src/entities/organization.entity';\n import { ConfigService } from '@nestjs/config';\n import { SSOConfigs } from 'src/entities/sso_config.entity';\n+import { InjectRepository } from '@nestjs/typeorm';\n+import { Repository } from 'typeorm';\n+import { OrganizationUser } from 'src/entities/organization_user.entity';\n+import { CreateUserDto } from '@dto/user.dto';\n+import { AcceptInviteDto } from '@dto/accept-organization-invite.dto';\n const bcrypt = require('bcrypt');\n const uuid = require('uuid');\n \n @Injectable()\n export class AuthService {\n   constructor(\n+    @InjectRepository(User)\n+    private usersRepository: Repository<User>,\n+    @InjectRepository(OrganizationUser)\n+    private organizationUsersRepository: Repository<OrganizationUser>,\n+    @InjectRepository(Organization)\n+    private organizationsRepository: Repository<Organization>,\n     private usersService: UsersService,\n     private jwtService: JwtService,\n     private organizationsService: OrganizationsService,\n@@ -32,8 +49,8 @@ export class AuthService {\n     }\n   }\n \n-  private async validateUser(email: string, password: string, organisationId?: string): Promise<User> {\n-    const user = await this.usersService.findByEmail(email, organisationId);\n+  private async validateUser(email: string, password: string, organizationId?: string): Promise<User> {\n+    const user = await this.usersService.findByEmail(email, organizationId);\n \n     if (!user) return null;\n \n@@ -169,10 +186,19 @@ export class AuthService {\n \n   async signup(email: string) {\n     const existingUser = await this.usersService.findByEmail(email);\n-    if (existingUser?.invitationToken || existingUser?.organizationUsers?.some((ou) => ou.status === 'active')) {\n+    if (existingUser?.organizationUsers?.some((ou) => ou.status === 'active')) {\n       throw new NotAcceptableException('Email already exists');\n     }\n \n+    if (existingUser?.invitationToken) {\n+      await this.emailService.sendWelcomeEmail(\n+        existingUser.email,\n+        existingUser.firstName,\n+        existingUser.invitationToken\n+      );\n+      return;\n+    }\n+\n     let organization: Organization;\n     // Check if the configs allows user signups\n     if (this.configService.get<string>('DISABLE_MULTI_WORKSPACE') === 'true') {\n@@ -215,4 +241,120 @@ export class AuthService {\n       });\n     }\n   }\n+\n+  async setupAccountFromInvitationToken(userCreateDto: CreateUserDto) {\n+    const {\n+      organization,\n+      password,\n+      token,\n+      role,\n+      first_name: firstName,\n+      last_name: lastName,\n+      organizationToken,\n+    } = userCreateDto;\n+\n+    if (!token) {\n+      throw new BadRequestException('Invalid token');\n+    }\n+\n+    const user: User = await this.usersRepository.findOne({ where: { invitationToken: token } });\n+\n+    if (!user?.organizationUsers) {\n+      throw new BadRequestException('Invalid invitation link');\n+    }\n+    const organizationUser: OrganizationUser = user.organizationUsers.find(\n+      (ou) => ou.organizationId === user.defaultOrganizationId\n+    );\n+\n+    if (!organizationUser) {\n+      throw new BadRequestException('Invalid invitation link');\n+    }\n+\n+    await this.usersRepository.save(\n+      Object.assign(user, {\n+        firstName,\n+        lastName,\n+        password,\n+        role,\n+        invitationToken: null,\n+      })\n+    );\n+\n+    await this.organizationUsersRepository.save(\n+      Object.assign(organizationUser, {\n+        invitationToken: null,\n+        status: 'active',\n+      })\n+    );\n+\n+    if (organization) {\n+      await this.organizationsRepository.update(user.defaultOrganizationId, {\n+        name: organization,\n+      });\n+    }\n+\n+    if (this.configService.get<string>('DISABLE_MULTI_WORKSPACE') !== 'true' && organizationToken) {\n+      const organizationUser = await this.organizationUsersRepository.findOne({\n+        where: { invitationToken: organizationToken },\n+      });\n+\n+      if (organizationUser) {\n+        await this.organizationUsersRepository.save(\n+          Object.assign(organizationUser, {\n+            invitationToken: null,\n+            status: 'active',\n+          })\n+        );\n+      }\n+    }\n+  }\n+\n+  async acceptOrganizationInvite(acceptInviteDto: AcceptInviteDto) {\n+    const { password, token } = acceptInviteDto;\n+\n+    if (this.configService.get<string>('DISABLE_MULTI_WORKSPACE') === 'true' && !password) {\n+      throw new BadRequestException('Please enter password');\n+    }\n+    const organizationUser = await this.organizationUsersRepository.findOne({\n+      where: { invitationToken: token },\n+      relations: ['user'],\n+    });\n+\n+    if (!organizationUser?.user) {\n+      throw new BadRequestException('Invalid invitation link');\n+    }\n+    const user: User = organizationUser.user;\n+\n+    if (this.configService.get<string>('DISABLE_MULTI_WORKSPACE') !== 'true' && user.invitationToken) {\n+      // User sign up link send - not activated account\n+      this.emailService\n+        .sendWelcomeEmail(\n+          user.email,\n+          `${user.firstName} ${user.lastName}`,\n+          user.invitationToken,\n+          organizationUser.invitationToken\n+        )\n+        .catch((err) => console.error('Error while sending welcome mail', err));\n+      throw new UnauthorizedException(\n+        'User not exist in the workspace, Please setup your account using link shared via email'\n+      );\n+    }\n+\n+    if (this.configService.get<string>('DISABLE_MULTI_WORKSPACE') === 'true') {\n+      // set new password\n+      await this.usersRepository.save(\n+        Object.assign(user, {\n+          ...(password ? { password } : {}),\n+          invitationToken: null,\n+        })\n+      );\n+    }\n+\n+    await this.organizationUsersRepository.save(\n+      Object.assign(organizationUser, {\n+        invitationToken: null,\n+        status: 'active',\n+      })\n+    );\n+  }\n }"
        },
        {
          "filename": "server/src/services/email.service.ts",
          "status": "modified",
          "additions": 20,
          "deletions": 4,
          "patch": "@@ -53,9 +53,18 @@ export class EmailService {\n     return hostname?.endsWith('/') ? hostname.slice(0, -1) : hostname;\n   }\n \n-  async sendWelcomeEmail(to: string, name: string, invitationtoken: string) {\n+  async sendWelcomeEmail(\n+    to: string,\n+    name: string,\n+    invitationtoken: string,\n+    organizationInvitationToken?: string,\n+    organizationName?: string,\n+    sender?: string\n+  ) {\n     const subject = 'Welcome to ToolJet';\n-    const inviteUrl = `${this.TOOLJET_HOST}/invitations/${invitationtoken}`;\n+    const inviteUrl = `${this.TOOLJET_HOST}/invitations/${invitationtoken}${\n+      organizationInvitationToken ? `/workspaces/${organizationInvitationToken}` : ''\n+    }`;\n     const html = `\n       <!DOCTYPE html>\n       <html>\n@@ -64,6 +73,13 @@ export class EmailService {\n         </head>\n         <body>\n           <p>Hi ${name || ''},</p>\n+          ${\n+            organizationInvitationToken && sender && organizationName\n+              ? `<span>\n+              ${sender} has invited you to use ToolJet workspace: ${organizationName}.\n+            </span>`\n+              : ''\n+          }\n           <span>\n             Please use the link below to set up your account and get started.\n           </span>\n@@ -86,7 +102,7 @@ export class EmailService {\n     name: string,\n     sender: string,\n     invitationtoken: string,\n-    organisationName: string\n+    organizationName: string\n   ) {\n     const subject = 'Welcome to ToolJet';\n     const inviteUrl = `${this.TOOLJET_HOST}/organization-invitations/${invitationtoken}`;\n@@ -100,7 +116,7 @@ export class EmailService {\n           <p>Hi ${name || ''},</p>\n           <br>\n           <span>\n-          ${sender} has invited you to use ToolJet workspace ${organisationName}. Use the link below to set up your account and get started.\n+          ${sender} has invited you to use ToolJet workspace: ${organizationName}. Use the link below to set up your account and get started.\n           </span>\n           <br>\n           <a href=\"${inviteUrl}\">${inviteUrl}</a>"
        },
        {
          "filename": "server/src/services/organization_users.service.ts",
          "status": "modified",
          "additions": 0,
          "deletions": 41,
          "patch": "@@ -8,7 +8,6 @@ import { BadRequestException } from '@nestjs/common';\n import { EmailService } from './email.service';\n import { Organization } from 'src/entities/organization.entity';\n import { GroupPermission } from 'src/entities/group_permission.entity';\n-import { InviteNewUserDto } from '@dto/invite-new-user.dto';\n const uuid = require('uuid');\n \n @Injectable()\n@@ -24,46 +23,6 @@ export class OrganizationUsersService {\n     return await this.organizationUsersRepository.findOne({ where: { id } });\n   }\n \n-  async inviteNewUser(currentUser: User, inviteNewUserDto: InviteNewUserDto): Promise<OrganizationUser> {\n-    const userParams = <User>{\n-      firstName: inviteNewUserDto.first_name,\n-      lastName: inviteNewUserDto.last_name,\n-      email: inviteNewUserDto.email,\n-    };\n-\n-    let user = await this.usersService.findByEmail(userParams.email);\n-\n-    if (user?.organizationUsers?.some((ou) => ou.organizationId === currentUser.organizationId)) {\n-      throw new BadRequestException('User with such email already exists.');\n-    }\n-\n-    if (user?.invitationToken) {\n-      // user sign up not completed, name will be empty - updating name\n-      await this.usersService.update(user.id, { firstName: userParams.firstName, lastName: userParams.lastName });\n-    }\n-\n-    user = await this.usersService.create(userParams, currentUser.organizationId, ['all_users'], user);\n-\n-    const currentOrganization: Organization = (\n-      await this.organizationUsersRepository.findOne({\n-        where: { userId: currentUser.id, organizationId: currentUser.organizationId },\n-        relations: ['organization'],\n-      })\n-    )?.organization;\n-\n-    const organizationUser: OrganizationUser = await this.create(user, currentOrganization, true);\n-\n-    await this.emailService.sendOrganizationUserWelcomeEmail(\n-      user.email,\n-      user.firstName,\n-      currentUser.firstName,\n-      organizationUser.invitationToken,\n-      currentOrganization.name\n-    );\n-\n-    return organizationUser;\n-  }\n-\n   async create(user: User, organization: Organization, isInvite?: boolean): Promise<OrganizationUser> {\n     return await this.organizationUsersRepository.save(\n       this.organizationUsersRepository.create({"
        },
        {
          "filename": "server/src/services/organizations.service.ts",
          "status": "modified",
          "additions": 85,
          "deletions": 1,
          "patch": "@@ -7,10 +7,13 @@ import { User } from 'src/entities/user.entity';\n import { cleanObject } from 'src/helpers/utils.helper';\n import { createQueryBuilder, Repository } from 'typeorm';\n import { OrganizationUser } from '../entities/organization_user.entity';\n+import { EmailService } from './email.service';\n import { EncryptionService } from './encryption.service';\n import { GroupPermissionsService } from './group_permissions.service';\n import { OrganizationUsersService } from './organization_users.service';\n import { UsersService } from './users.service';\n+import { InviteNewUserDto } from '@dto/invite-new-user.dto';\n+import { ConfigService } from '@nestjs/config';\n \n @Injectable()\n export class OrganizationsService {\n@@ -26,7 +29,9 @@ export class OrganizationsService {\n     private usersService: UsersService,\n     private organizationUserService: OrganizationUsersService,\n     private groupPermissionService: GroupPermissionsService,\n-    private encryptionService: EncryptionService\n+    private encryptionService: EncryptionService,\n+    private emailService: EmailService,\n+    private configService: ConfigService\n   ) {}\n \n   async create(name: string, user?: User): Promise<Organization> {\n@@ -308,4 +313,83 @@ export class OrganizationsService {\n     await this.decryptSecret(result?.configs);\n     return result;\n   }\n+\n+  async inviteNewUser(currentUser: User, inviteNewUserDto: InviteNewUserDto): Promise<OrganizationUser> {\n+    const userParams = <User>{\n+      firstName: inviteNewUserDto.first_name,\n+      lastName: inviteNewUserDto.last_name,\n+      email: inviteNewUserDto.email,\n+    };\n+\n+    let user = await this.usersService.findByEmail(userParams.email);\n+    let defaultOrganisation: Organization,\n+      shouldSendWelcomeMail = false;\n+\n+    if (user?.organizationUsers?.some((ou) => ou.organizationId === currentUser.organizationId)) {\n+      throw new BadRequestException('User with such email already exists.');\n+    }\n+\n+    if (user?.invitationToken) {\n+      // user sign up not completed, name will be empty - updating name\n+      await this.usersService.update(user.id, { firstName: userParams.firstName, lastName: userParams.lastName });\n+    }\n+\n+    if (!user && this.configService.get<string>('DISABLE_MULTI_WORKSPACE') !== 'true') {\n+      // User not exist\n+      shouldSendWelcomeMail = true;\n+      // Create default organization\n+      defaultOrganisation = await this.create('Untitled workspace');\n+    }\n+    user = await this.usersService.create(\n+      userParams,\n+      currentUser.organizationId,\n+      ['all_users'],\n+      user,\n+      true,\n+      defaultOrganisation?.id\n+    );\n+\n+    if (defaultOrganisation) {\n+      // Setting up default organization\n+      await this.organizationUserService.create(user, defaultOrganisation, true);\n+      await this.usersService.attachUserGroup(['all_users', 'admin'], defaultOrganisation.id, user.id);\n+    }\n+\n+    const currentOrganization: Organization = (\n+      await this.organizationUsersRepository.findOne({\n+        where: { userId: currentUser.id, organizationId: currentUser.organizationId },\n+        relations: ['organization'],\n+      })\n+    )?.organization;\n+\n+    const organizationUser: OrganizationUser = await this.organizationUserService.create(\n+      user,\n+      currentOrganization,\n+      true\n+    );\n+\n+    if (shouldSendWelcomeMail) {\n+      this.emailService\n+        .sendWelcomeEmail(\n+          user.email,\n+          user.firstName,\n+          user.invitationToken,\n+          organizationUser.invitationToken,\n+          currentOrganization.name,\n+          `${currentUser.firstName} ${currentUser.lastName}`\n+        )\n+        .catch((err) => console.error('Error while sending welcome mail', err));\n+    } else {\n+      this.emailService\n+        .sendOrganizationUserWelcomeEmail(\n+          user.email,\n+          user.firstName,\n+          `${currentUser.firstName} ${currentUser.lastName}`,\n+          organizationUser.invitationToken,\n+          currentOrganization.name\n+        )\n+        .catch((err) => console.error('Error while sending welcome mail', err));\n+    }\n+    return organizationUser;\n+  }\n }"
        },
        {
          "filename": "server/src/services/users.service.ts",
          "status": "modified",
          "additions": 12,
          "deletions": 107,
          "patch": "@@ -2,7 +2,6 @@ import { Injectable, InternalServerErrorException } from '@nestjs/common';\n import { InjectRepository } from '@nestjs/typeorm';\n import { User } from '../entities/user.entity';\n import { FilesService } from '../services/files.service';\n-import { Organization } from 'src/entities/organization.entity';\n import { App } from 'src/entities/app.entity';\n import { Connection, createQueryBuilder, EntityManager, getManager, getRepository, In, Repository } from 'typeorm';\n import { OrganizationUser } from '../entities/organization_user.entity';\n@@ -11,7 +10,6 @@ import { UserGroupPermission } from 'src/entities/user_group_permission.entity';\n import { GroupPermission } from 'src/entities/group_permission.entity';\n import { BadRequestException } from '@nestjs/common';\n import { cleanObject } from 'src/helpers/utils.helper';\n-import { CreateUserDto } from '@dto/user.dto';\n import { CreateFileDto } from '@dto/create-file.dto';\n const uuid = require('uuid');\n const bcrypt = require('bcrypt');\n@@ -25,8 +23,6 @@ export class UsersService {\n     private usersRepository: Repository<User>,\n     @InjectRepository(OrganizationUser)\n     private organizationUsersRepository: Repository<OrganizationUser>,\n-    @InjectRepository(Organization)\n-    private organizationsRepository: Repository<Organization>,\n     @InjectRepository(App)\n     private appsRepository: Repository<App>\n   ) {}\n@@ -65,7 +61,8 @@ export class UsersService {\n     organizationId: string,\n     groups?: string[],\n     existingUser?: User,\n-    isInvite?: boolean\n+    isInvite?: boolean,\n+    defaultOrganizationId?: string\n   ): Promise<User> {\n     const password = uuid.v4();\n \n@@ -80,24 +77,23 @@ export class UsersService {\n           lastName,\n           password,\n           invitationToken: isInvite ? uuid.v4() : null,\n-          defaultOrganizationId: organizationId,\n+          defaultOrganizationId: defaultOrganizationId || organizationId,\n           createdAt: new Date(),\n           updatedAt: new Date(),\n         });\n         await manager.save(user);\n       } else {\n-        if (isInvite) {\n-          // user already invited to an organization, but not active - user tries to sign up\n-          await manager.save(\n-            Object.assign(existingUser, {\n-              invitationToken: uuid.v4(),\n-              defaultOrganizationId: organizationId,\n-            })\n-          );\n-        }\n         user = existingUser;\n       }\n+    });\n+\n+    await this.attachUserGroup(groups, organizationId, user.id);\n+\n+    return user;\n+  }\n \n+  async attachUserGroup(groups, organizationId, userId) {\n+    await getManager().transaction(async (manager) => {\n       for (const group of groups) {\n         const orgGroupPermission = await manager.findOne(GroupPermission, {\n           where: {\n@@ -109,16 +105,14 @@ export class UsersService {\n         if (orgGroupPermission) {\n           const userGroupPermission = manager.create(UserGroupPermission, {\n             groupPermissionId: orgGroupPermission.id,\n-            userId: user.id,\n+            userId: userId,\n           });\n           await manager.save(userGroupPermission);\n         } else {\n           throw new BadRequestException(`${group} group does not exist for current organization`);\n         }\n       }\n     });\n-\n-    return user;\n   }\n \n   async status(user: User) {\n@@ -144,95 +138,6 @@ export class UsersService {\n     return { user, newUserCreated };\n   }\n \n-  async setupAccountFromInvitationToken(userCreateDto: CreateUserDto) {\n-    const { organization, password, token, role, first_name: firstName, last_name: lastName } = userCreateDto;\n-\n-    if (!token) {\n-      throw new BadRequestException('Invalid token');\n-    }\n-\n-    const user: User = await this.usersRepository.findOne({ where: { invitationToken: token } });\n-\n-    if (!user?.organizationUsers) {\n-      throw new BadRequestException('Invalid invitation link');\n-    }\n-    const organizationUser: OrganizationUser = user.organizationUsers.find(\n-      (ou) => ou.organizationId === user.defaultOrganizationId\n-    );\n-\n-    if (!organizationUser) {\n-      throw new BadRequestException('Invalid invitation link');\n-    }\n-\n-    await this.usersRepository.save(\n-      Object.assign(user, {\n-        firstName,\n-        lastName,\n-        password,\n-        role,\n-        invitationToken: null,\n-      })\n-    );\n-\n-    await this.organizationUsersRepository.save(\n-      Object.assign(organizationUser, {\n-        invitationToken: null,\n-        status: 'active',\n-      })\n-    );\n-\n-    if (organization) {\n-      await this.organizationsRepository.update(user.defaultOrganizationId, {\n-        name: organization,\n-      });\n-    }\n-  }\n-\n-  async acceptOrganizationInvite(params: any) {\n-    const { password, token } = params;\n-\n-    const organizationUser = await this.organizationUsersRepository.findOne({\n-      where: { invitationToken: token },\n-      relations: ['user'],\n-    });\n-\n-    if (!organizationUser?.user) {\n-      throw new BadRequestException('Invalid invitation link');\n-    }\n-    const user: User = organizationUser.user;\n-\n-    if (user.invitationToken) {\n-      // User sign up link send - not activated account\n-      const defaultOrganizationUser = await this.organizationUsersRepository.findOne({\n-        where: { organizationId: user.defaultOrganizationId, status: 'invited' },\n-      });\n-\n-      if (defaultOrganizationUser) {\n-        await this.organizationUsersRepository.save(\n-          Object.assign(defaultOrganizationUser, {\n-            invitationToken: null,\n-            status: 'active',\n-          })\n-        );\n-      }\n-    }\n-\n-    // set new password if entered\n-    await this.usersRepository.save(\n-      Object.assign(user, {\n-        ...(password ? { password } : {}),\n-        invitationToken: null,\n-      })\n-    );\n-\n-    await this.organizationUsersRepository.save(\n-      Object.assign(organizationUser, {\n-        invitationToken: null,\n-        status: 'active',\n-      })\n-    );\n-  }\n-\n   async updateDefaultOrganization(user: User, organizationId: string) {\n     await this.usersRepository.update(user.id, { defaultOrganizationId: organizationId });\n   }"
        },
        {
          "filename": "server/test/controllers/app.e2e-spec.ts",
          "status": "modified",
          "additions": 390,
          "deletions": 2,
          "patch": "@@ -1,13 +1,14 @@\n /* eslint-disable @typescript-eslint/no-unused-vars */\n import * as request from 'supertest';\n import { INestApplication } from '@nestjs/common';\n-import { getManager, Repository } from 'typeorm';\n+import { getManager, Repository, Not } from 'typeorm';\n import { User } from 'src/entities/user.entity';\n import { clearDB, createUser, authHeaderForUser, createNestAppInstanceWithEnvMock } from '../test.helper';\n import { OrganizationUser } from 'src/entities/organization_user.entity';\n import { Organization } from 'src/entities/organization.entity';\n import { SSOConfigs } from 'src/entities/sso_config.entity';\n import { EmailService } from '@services/email.service';\n+import { v4 as uuidv4 } from 'uuid';\n \n describe('Authentication', () => {\n   let app: INestApplication;\n@@ -172,7 +173,7 @@ describe('Authentication', () => {\n       });\n       it('should not create new users', async () => {\n         const response = await request(app.getHttpServer()).post('/api/signup').send({ email: 'test@tooljet.io' });\n-        expect(response.statusCode).toBe(406);\n+        expect(response.statusCode).toBe(403);\n       });\n     });\n     describe('sign up enabled and authorization', () => {\n@@ -466,6 +467,393 @@ describe('Authentication', () => {\n     });\n   });\n \n+  describe('POST /api/set-password-from-token', () => {\n+    beforeEach(() => {\n+      jest.spyOn(mockConfig, 'get').mockImplementation((key: string) => {\n+        switch (key) {\n+          case 'DISABLE_MULTI_WORKSPACE':\n+            return 'false';\n+          default:\n+            return process.env[key];\n+        }\n+      });\n+    });\n+    it('should allow users to setup account after sign up using  Multi-Workspace', async () => {\n+      const invitationToken = uuidv4();\n+      const userData = await createUser(app, {\n+        email: 'signup@tooljet.io',\n+        invitationToken,\n+        status: 'invited',\n+      });\n+      const { user, organization } = userData;\n+\n+      const response = await request(app.getHttpServer()).post('/api/set-password-from-token').send({\n+        first_name: 'signupuser',\n+        last_name: 'user',\n+        organization: 'org1',\n+        password: uuidv4(),\n+        token: invitationToken,\n+        role: 'developer',\n+      });\n+\n+      expect(response.statusCode).toBe(201);\n+\n+      const updatedUser = await getManager().findOneOrFail(User, { where: { email: user.email } });\n+      expect(updatedUser.firstName).toEqual('signupuser');\n+      expect(updatedUser.lastName).toEqual('user');\n+      expect(updatedUser.defaultOrganizationId).toEqual(organization.id);\n+      const organizationUser = await getManager().findOneOrFail(OrganizationUser, { where: { userId: user.id } });\n+      expect(organizationUser.status).toEqual('active');\n+    });\n+\n+    it('should return error if required params are not present - Multi-Workspace', async () => {\n+      const invitationToken = uuidv4();\n+      await createUser(app, {\n+        email: 'signup@tooljet.io',\n+        invitationToken,\n+        status: 'invited',\n+      });\n+\n+      const response = await request(app.getHttpServer()).post('/api/set-password-from-token');\n+\n+      expect(response.statusCode).toBe(400);\n+      expect(response.body.message).toStrictEqual([\n+        'password should not be empty',\n+        'password must be a string',\n+        'token should not be empty',\n+        'token must be a string',\n+      ]);\n+    });\n+\n+    it('should allow users to setup account for single organization only once', async () => {\n+      jest.spyOn(mockConfig, 'get').mockImplementation((key: string) => {\n+        switch (key) {\n+          case 'DISABLE_MULTI_WORKSPACE':\n+            return 'true';\n+          default:\n+            return process.env[key];\n+        }\n+      });\n+      const invitationToken = uuidv4();\n+      await createUser(app, {\n+        email: 'signup@tooljet.io',\n+        invitationToken,\n+        status: 'invited',\n+      });\n+\n+      let response = await request(app.getHttpServer()).post('/api/set-password-from-token').send({\n+        first_name: 'signupuser',\n+        last_name: 'user',\n+        organization: 'org1',\n+        password: uuidv4(),\n+        token: invitationToken,\n+        role: 'developer',\n+      });\n+\n+      expect(response.statusCode).toBe(201);\n+\n+      await createUser(app, {\n+        email: 'signup2@tooljet.io',\n+        invitationToken,\n+        status: 'invited',\n+      });\n+\n+      response = await request(app.getHttpServer()).post('/api/set-password-from-token').send({\n+        first_name: 'signupuser2',\n+        last_name: 'user2',\n+        organization: 'org1',\n+        password: uuidv4(),\n+        token: invitationToken,\n+        role: 'developer',\n+      });\n+\n+      expect(response.statusCode).toBe(403);\n+    });\n+\n+    it('should not allow users to setup account for Multi-Workspace and sign up disabled', async () => {\n+      jest.spyOn(mockConfig, 'get').mockImplementation((key: string) => {\n+        switch (key) {\n+          case 'DISABLE_SIGNUPS':\n+            return 'true';\n+          default:\n+            return process.env[key];\n+        }\n+      });\n+      const invitationToken = uuidv4();\n+      await createUser(app, {\n+        email: 'signup@tooljet.io',\n+        invitationToken,\n+        status: 'invited',\n+      });\n+\n+      const response = await request(app.getHttpServer()).post('/api/set-password-from-token').send({\n+        first_name: 'signupuser',\n+        last_name: 'user',\n+        organization: 'org1',\n+        password: uuidv4(),\n+        token: invitationToken,\n+        role: 'developer',\n+      });\n+\n+      expect(response.statusCode).toBe(403);\n+    });\n+\n+    it('should allow users to sign up and setup account if already invited to an organization but not setup the account', async () => {\n+      const { organization: org, user: adminUser } = await createUser(app, {\n+        email: 'admin@tooljet.io',\n+      });\n+\n+      await request(app.getHttpServer())\n+        .post(`/api/organization_users/`)\n+        .set('Authorization', authHeaderForUser(adminUser))\n+        .send({ email: 'invited@tooljet.io' })\n+        .expect(201);\n+\n+      const signUpResponse = await request(app.getHttpServer())\n+        .post('/api/signup')\n+        .send({ email: 'invited@tooljet.io' });\n+\n+      expect(signUpResponse.statusCode).toBe(201);\n+\n+      const invitedUserDetails = await getManager().findOneOrFail(User, { where: { email: 'invited@tooljet.io' } });\n+\n+      expect(invitedUserDetails.defaultOrganizationId).not.toBe(org.id);\n+\n+      const response = await request(app.getHttpServer()).post('/api/set-password-from-token').send({\n+        first_name: 'signupuser',\n+        last_name: 'user',\n+        organization: 'org1',\n+        password: uuidv4(),\n+        token: invitedUserDetails.invitationToken,\n+        role: 'developer',\n+      });\n+\n+      expect(response.statusCode).toBe(201);\n+      const updatedUser = await getManager().findOneOrFail(User, { where: { email: 'invited@tooljet.io' } });\n+      expect(updatedUser.firstName).toEqual('signupuser');\n+      expect(updatedUser.lastName).toEqual('user');\n+      expect(updatedUser.defaultOrganizationId).not.toBe(org.id);\n+      const organizationUser = await getManager().findOneOrFail(OrganizationUser, {\n+        where: { userId: Not(adminUser.id), organizationId: org.id },\n+      });\n+      const defaultOrganizationUser = await getManager().findOneOrFail(OrganizationUser, {\n+        where: { userId: Not(adminUser.id), organizationId: invitedUserDetails.defaultOrganizationId },\n+      });\n+      expect(organizationUser.status).toEqual('invited');\n+      expect(defaultOrganizationUser.status).toEqual('active');\n+\n+      const acceptInviteResponse = await request(app.getHttpServer()).post('/api/accept-invite').send({\n+        token: organizationUser.invitationToken,\n+      });\n+\n+      expect(acceptInviteResponse.statusCode).toBe(201);\n+\n+      const organizationUserUpdated = await getManager().findOneOrFail(OrganizationUser, {\n+        where: { userId: Not(adminUser.id), organizationId: org.id },\n+      });\n+      expect(organizationUserUpdated.status).toEqual('active');\n+    });\n+\n+    it('should allow users setup account and accept invite', async () => {\n+      const { organization: org, user: adminUser } = await createUser(app, {\n+        email: 'admin@tooljet.io',\n+      });\n+\n+      await request(app.getHttpServer())\n+        .post(`/api/organization_users/`)\n+        .set('Authorization', authHeaderForUser(adminUser))\n+        .send({ email: 'invited@tooljet.io' })\n+        .expect(201);\n+\n+      const invitedUserDetails = await getManager().findOneOrFail(User, { where: { email: 'invited@tooljet.io' } });\n+\n+      expect(invitedUserDetails.defaultOrganizationId).not.toBe(org.id);\n+\n+      const organizationUserBeforeUpdate = await getManager().findOneOrFail(OrganizationUser, {\n+        where: { userId: Not(adminUser.id), organizationId: org.id },\n+      });\n+\n+      const response = await request(app.getHttpServer()).post('/api/set-password-from-token').send({\n+        first_name: 'signupuser',\n+        last_name: 'user',\n+        organization: 'org1',\n+        password: uuidv4(),\n+        token: invitedUserDetails.invitationToken,\n+        organizationToken: organizationUserBeforeUpdate.invitationToken,\n+        role: 'developer',\n+      });\n+\n+      expect(response.statusCode).toBe(201);\n+      const updatedUser = await getManager().findOneOrFail(User, { where: { email: 'invited@tooljet.io' } });\n+      expect(updatedUser.firstName).toEqual('signupuser');\n+      expect(updatedUser.lastName).toEqual('user');\n+      expect(updatedUser.defaultOrganizationId).not.toBe(org.id);\n+      const organizationUser = await getManager().findOneOrFail(OrganizationUser, {\n+        where: { userId: Not(adminUser.id), organizationId: org.id },\n+      });\n+      const defaultOrganizationUser = await getManager().findOneOrFail(OrganizationUser, {\n+        where: { userId: Not(adminUser.id), organizationId: invitedUserDetails.defaultOrganizationId },\n+      });\n+      expect(organizationUser.status).toEqual('active');\n+      expect(defaultOrganizationUser.status).toEqual('active');\n+\n+      const acceptInviteResponse = await request(app.getHttpServer()).post('/api/accept-invite').send({\n+        token: organizationUser.invitationToken,\n+      });\n+\n+      expect(acceptInviteResponse.statusCode).toBe(400);\n+    });\n+\n+    it('should not allow users to setup account if already invited to an organization and trying to accept invite before setting up account', async () => {\n+      const { organization: org, user: adminUser } = await createUser(app, {\n+        email: 'admin@tooljet.io',\n+      });\n+\n+      await request(app.getHttpServer())\n+        .post(`/api/organization_users/`)\n+        .set('Authorization', authHeaderForUser(adminUser))\n+        .send({ email: 'invited@tooljet.io' })\n+        .expect(201);\n+\n+      const signUpResponse = await request(app.getHttpServer())\n+        .post('/api/signup')\n+        .send({ email: 'invited@tooljet.io' });\n+\n+      expect(signUpResponse.statusCode).toBe(201);\n+\n+      const invitedUserDetails = await getManager().findOneOrFail(User, { where: { email: 'invited@tooljet.io' } });\n+      const orgUser = await getManager().findOneOrFail(OrganizationUser, {\n+        where: { userId: invitedUserDetails.id, organizationId: org.id },\n+      });\n+\n+      expect(invitedUserDetails.defaultOrganizationId).not.toBe(org.id);\n+\n+      const acceptInviteResponse = await request(app.getHttpServer()).post('/api/accept-invite').send({\n+        token: orgUser.invitationToken,\n+      });\n+\n+      expect(acceptInviteResponse.statusCode).toBe(401);\n+\n+      const organizationUser = await getManager().findOneOrFail(OrganizationUser, {\n+        where: { userId: invitedUserDetails.id, organizationId: org.id },\n+      });\n+      const defaultOrganizationUser = await getManager().findOneOrFail(OrganizationUser, {\n+        where: { userId: invitedUserDetails.id, organizationId: invitedUserDetails.defaultOrganizationId },\n+      });\n+      expect(organizationUser.status).toEqual('invited');\n+      expect(defaultOrganizationUser.status).toEqual('invited');\n+\n+      const response = await request(app.getHttpServer()).post('/api/set-password-from-token').send({\n+        first_name: 'signupuser',\n+        last_name: 'user',\n+        organization: 'org1',\n+        password: uuidv4(),\n+        token: invitedUserDetails.invitationToken,\n+        role: 'developer',\n+      });\n+\n+      expect(response.statusCode).toBe(201);\n+    });\n+  });\n+\n+  describe('POST /api/accept-invite', () => {\n+    describe('Multi-Worlspace Enabled', () => {\n+      beforeEach(() => {\n+        jest.spyOn(mockConfig, 'get').mockImplementation((key: string) => {\n+          switch (key) {\n+            case 'DISABLE_MULTI_WORKSPACE':\n+              return 'false';\n+            default:\n+              return process.env[key];\n+          }\n+        });\n+      });\n+\n+      it('should allow users to accept invitation when Multi-Workspace is enabled', async () => {\n+        const userData = await createUser(app, {\n+          email: 'organizationUser@tooljet.io',\n+          status: 'invited',\n+        });\n+\n+        const { user, orgUser } = userData;\n+\n+        const response = await request(app.getHttpServer()).post('/api/accept-invite').send({\n+          token: orgUser.invitationToken,\n+        });\n+\n+        expect(response.statusCode).toBe(201);\n+\n+        const organizationUser = await getManager().findOneOrFail(OrganizationUser, { where: { userId: user.id } });\n+        expect(organizationUser.status).toEqual('active');\n+      });\n+\n+      it('should not allow users to accept invitation when user sign up is not completed', async () => {\n+        const userData = await createUser(app, {\n+          email: 'organizationUser@tooljet.io',\n+          invitationToken: uuidv4(),\n+          status: 'invited',\n+        });\n+        const { user, orgUser } = userData;\n+\n+        const response = await request(app.getHttpServer()).post('/api/accept-invite').send({\n+          token: orgUser.invitationToken,\n+        });\n+\n+        expect(response.statusCode).toBe(401);\n+        expect(response.body.message).toBe(\n+          'User not exist in the workspace, Please setup your account using link shared via email'\n+        );\n+      });\n+    });\n+\n+    describe('Multi-Worlspace Disabled', () => {\n+      beforeEach(() => {\n+        jest.spyOn(mockConfig, 'get').mockImplementation((key: string) => {\n+          switch (key) {\n+            case 'DISABLE_MULTI_WORKSPACE':\n+              return 'true';\n+            default:\n+              return process.env[key];\n+          }\n+        });\n+      });\n+\n+      it('should allow users to accept invitation when Multi-Workspace is disabled', async () => {\n+        const userData = await createUser(app, {\n+          email: 'organizationUser@tooljet.io',\n+          status: 'invited',\n+        });\n+        const { user, orgUser } = userData;\n+\n+        const response = await request(app.getHttpServer()).post('/api/accept-invite').send({\n+          token: orgUser.invitationToken,\n+          password: uuidv4(),\n+        });\n+\n+        expect(response.statusCode).toBe(201);\n+\n+        const organizationUser = await getManager().findOneOrFail(OrganizationUser, { where: { userId: user.id } });\n+        expect(organizationUser.status).toEqual('active');\n+      });\n+\n+      it('should not allow users to accept invitation when user not entered password for single workspace', async () => {\n+        const userData = await createUser(app, {\n+          email: 'organizationUser@tooljet.io',\n+          invitationToken: uuidv4(),\n+          status: 'invited',\n+        });\n+        const { orgUser } = userData;\n+\n+        const response = await request(app.getHttpServer()).post('/api/accept-invite').send({\n+          token: orgUser.invitationToken,\n+        });\n+\n+        expect(response.statusCode).toBe(400);\n+        expect(response.body.message).toBe('Please enter password');\n+      });\n+    });\n+  });\n+\n   afterAll(async () => {\n     await app.close();\n   });"
        },
        {
          "filename": "server/test/controllers/users.e2e-spec.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 270,
          "patch": "@@ -1,22 +1,19 @@\n import * as request from 'supertest';\n import { INestApplication } from '@nestjs/common';\n-import { authHeaderForUser, clearDB, createUser, createNestAppInstanceWithEnvMock } from '../test.helper';\n+import { authHeaderForUser, clearDB, createUser, createNestAppInstance } from '../test.helper';\n import { getManager } from 'typeorm';\n import { User } from 'src/entities/user.entity';\n-import { v4 as uuidv4 } from 'uuid';\n-import { OrganizationUser } from 'src/entities/organization_user.entity';\n const path = require('path');\n \n describe('users controller', () => {\n   let app: INestApplication;\n-  let mockConfig;\n \n   beforeEach(async () => {\n     await clearDB();\n   });\n \n   beforeAll(async () => {\n-    ({ app, mockConfig } = await createNestAppInstanceWithEnvMock());\n+    app = await createNestAppInstance();\n   });\n \n   afterEach(() => {\n@@ -82,271 +79,6 @@ describe('users controller', () => {\n     });\n   });\n \n-  describe('POST /api/users/set_password_from_token', () => {\n-    it('should allow users to setup account after sign up using  Multi-Workspace', async () => {\n-      const invitationToken = uuidv4();\n-      const userData = await createUser(app, {\n-        email: 'signup@tooljet.io',\n-        invitationToken,\n-        status: 'invited',\n-      });\n-      const { user, organization } = userData;\n-\n-      const response = await request(app.getHttpServer()).post('/api/users/set_password_from_token').send({\n-        first_name: 'signupuser',\n-        last_name: 'user',\n-        organization: 'org1',\n-        password: uuidv4(),\n-        token: invitationToken,\n-        role: 'developer',\n-      });\n-\n-      expect(response.statusCode).toBe(201);\n-\n-      const updatedUser = await getManager().findOneOrFail(User, { where: { email: user.email } });\n-      expect(updatedUser.firstName).toEqual('signupuser');\n-      expect(updatedUser.lastName).toEqual('user');\n-      expect(updatedUser.defaultOrganizationId).toEqual(organization.id);\n-      const organizationUser = await getManager().findOneOrFail(OrganizationUser, { where: { userId: user.id } });\n-      expect(organizationUser.status).toEqual('active');\n-    });\n-\n-    it('should return error if required params are not present - Multi-Workspace', async () => {\n-      const invitationToken = uuidv4();\n-      await createUser(app, {\n-        email: 'signup@tooljet.io',\n-        invitationToken,\n-        status: 'invited',\n-      });\n-\n-      const response = await request(app.getHttpServer()).post('/api/users/set_password_from_token');\n-\n-      expect(response.statusCode).toBe(400);\n-      expect(response.body.message).toStrictEqual([\n-        'password should not be empty',\n-        'password must be a string',\n-        'token should not be empty',\n-        'token must be a string',\n-      ]);\n-    });\n-\n-    it('should allow users to setup account for single organization only once', async () => {\n-      jest.spyOn(mockConfig, 'get').mockImplementation((key: string) => {\n-        switch (key) {\n-          case 'DISABLE_MULTI_WORKSPACE':\n-            return 'true';\n-          default:\n-            return process.env[key];\n-        }\n-      });\n-      const invitationToken = uuidv4();\n-      await createUser(app, {\n-        email: 'signup@tooljet.io',\n-        invitationToken,\n-        status: 'invited',\n-      });\n-\n-      let response = await request(app.getHttpServer()).post('/api/users/set_password_from_token').send({\n-        first_name: 'signupuser',\n-        last_name: 'user',\n-        organization: 'org1',\n-        password: uuidv4(),\n-        token: invitationToken,\n-        role: 'developer',\n-      });\n-\n-      expect(response.statusCode).toBe(201);\n-\n-      await createUser(app, {\n-        email: 'signup2@tooljet.io',\n-        invitationToken,\n-        status: 'invited',\n-      });\n-\n-      response = await request(app.getHttpServer()).post('/api/users/set_password_from_token').send({\n-        first_name: 'signupuser2',\n-        last_name: 'user2',\n-        organization: 'org1',\n-        password: uuidv4(),\n-        token: invitationToken,\n-        role: 'developer',\n-      });\n-\n-      expect(response.statusCode).toBe(403);\n-    });\n-\n-    it('should not allow users to setup account for Multi-Workspace and sign up disabled', async () => {\n-      jest.spyOn(mockConfig, 'get').mockImplementation((key: string) => {\n-        switch (key) {\n-          case 'DISABLE_SIGNUPS':\n-            return 'true';\n-          default:\n-            return process.env[key];\n-        }\n-      });\n-      const invitationToken = uuidv4();\n-      await createUser(app, {\n-        email: 'signup@tooljet.io',\n-        invitationToken,\n-        status: 'invited',\n-      });\n-\n-      const response = await request(app.getHttpServer()).post('/api/users/set_password_from_token').send({\n-        first_name: 'signupuser',\n-        last_name: 'user',\n-        organization: 'org1',\n-        password: uuidv4(),\n-        token: invitationToken,\n-        role: 'developer',\n-      });\n-\n-      expect(response.statusCode).toBe(403);\n-    });\n-\n-    it('should allow users to setup account if already invited to an organization but not activated', async () => {\n-      const org = (\n-        await createUser(app, {\n-          email: 'admin@tooljet.io',\n-        })\n-      ).organization;\n-      const invitedUser = await createUser(app, {\n-        email: 'invited@tooljet.io',\n-        status: 'invited',\n-        organization: org,\n-      });\n-\n-      const signUpResponse = await request(app.getHttpServer())\n-        .post('/api/signup')\n-        .send({ email: 'invited@tooljet.io' });\n-\n-      expect(signUpResponse.statusCode).toBe(201);\n-\n-      const invitedUserDetails = await getManager().findOneOrFail(User, { where: { email: invitedUser.user.email } });\n-\n-      expect(invitedUserDetails.defaultOrganizationId).not.toBe(org.id);\n-\n-      const response = await request(app.getHttpServer()).post('/api/users/set_password_from_token').send({\n-        first_name: 'signupuser',\n-        last_name: 'user',\n-        organization: 'org1',\n-        password: uuidv4(),\n-        token: invitedUserDetails.invitationToken,\n-        role: 'developer',\n-      });\n-\n-      expect(response.statusCode).toBe(201);\n-      const updatedUser = await getManager().findOneOrFail(User, { where: { email: invitedUser.user.email } });\n-      expect(updatedUser.firstName).toEqual('signupuser');\n-      expect(updatedUser.lastName).toEqual('user');\n-      expect(updatedUser.defaultOrganizationId).not.toBe(org.id);\n-      const organizationUser = await getManager().findOneOrFail(OrganizationUser, {\n-        where: { userId: invitedUser.user.id, organizationId: org.id },\n-      });\n-      const defaultOrganizationUser = await getManager().findOneOrFail(OrganizationUser, {\n-        where: { userId: invitedUser.user.id, organizationId: invitedUserDetails.defaultOrganizationId },\n-      });\n-      expect(organizationUser.status).toEqual('invited');\n-      expect(defaultOrganizationUser.status).toEqual('active');\n-    });\n-\n-    it('should not allow users to setup account if already invited to an organization and activated account through invite link after sign up', async () => {\n-      const { organization: org } = await createUser(app, {\n-        email: 'admin@tooljet.io',\n-      });\n-      const invitedUser = await createUser(app, {\n-        email: 'invited@tooljet.io',\n-        status: 'invited',\n-        organization: org,\n-      });\n-\n-      const signUpResponse = await request(app.getHttpServer())\n-        .post('/api/signup')\n-        .send({ email: 'invited@tooljet.io' });\n-\n-      expect(signUpResponse.statusCode).toBe(201);\n-\n-      const invitedUserDetails = await getManager().findOneOrFail(User, { where: { email: invitedUser.user.email } });\n-\n-      expect(invitedUserDetails.defaultOrganizationId).not.toBe(org.id);\n-\n-      const acceptInviteResponse = await request(app.getHttpServer()).post('/api/users/accept-invite').send({\n-        token: invitedUser.orgUser.invitationToken,\n-        password: 'new-password',\n-      });\n-\n-      expect(acceptInviteResponse.statusCode).toBe(201);\n-\n-      const organizationUser = await getManager().findOneOrFail(OrganizationUser, {\n-        where: { userId: invitedUser.user.id, organizationId: org.id },\n-      });\n-      const defaultOrganizationUser = await getManager().findOneOrFail(OrganizationUser, {\n-        where: { userId: invitedUser.user.id, organizationId: invitedUserDetails.defaultOrganizationId },\n-      });\n-      expect(organizationUser.status).toEqual('active');\n-      expect(defaultOrganizationUser.status).toEqual('active');\n-\n-      const updatedUser = await getManager().findOneOrFail(User, { where: { email: invitedUser.user.email } });\n-      expect(updatedUser.defaultOrganizationId).toBe(defaultOrganizationUser.organizationId);\n-\n-      const response = await request(app.getHttpServer()).post('/api/users/set_password_from_token').send({\n-        first_name: 'signupuser',\n-        last_name: 'user',\n-        organization: 'org1',\n-        password: uuidv4(),\n-        token: invitedUserDetails.invitationToken,\n-        role: 'developer',\n-      });\n-\n-      expect(response.statusCode).toBe(400);\n-    });\n-  });\n-\n-  describe('POST /api/users/accept-invite', () => {\n-    it('should allow users to accept invitation when Multi-Workspace is enabled', async () => {\n-      const userData = await createUser(app, {\n-        email: 'organizationUser@tooljet.io',\n-        status: 'invited',\n-      });\n-      const { user, orgUser } = userData;\n-\n-      const response = await request(app.getHttpServer()).post('/api/users/accept-invite').send({\n-        token: orgUser.invitationToken,\n-        password: uuidv4(),\n-      });\n-\n-      expect(response.statusCode).toBe(201);\n-\n-      const organizationUser = await getManager().findOneOrFail(OrganizationUser, { where: { userId: user.id } });\n-      expect(organizationUser.status).toEqual('active');\n-    });\n-\n-    it('should allow users to accept invitation when Multi-Workspace is disabled', async () => {\n-      jest.spyOn(mockConfig, 'get').mockImplementation((key: string) => {\n-        switch (key) {\n-          case 'DISABLE_MULTI_WORKSPACE':\n-            return 'true';\n-          default:\n-            return process.env[key];\n-        }\n-      });\n-      const userData = await createUser(app, {\n-        email: 'organizationUser@tooljet.io',\n-        status: 'invited',\n-      });\n-      const { user, orgUser } = userData;\n-\n-      const response = await request(app.getHttpServer()).post('/api/users/accept-invite').send({\n-        token: orgUser.invitationToken,\n-        password: uuidv4(),\n-      });\n-\n-      expect(response.statusCode).toBe(201);\n-\n-      const organizationUser = await getManager().findOneOrFail(OrganizationUser, { where: { userId: user.id } });\n-      expect(organizationUser.status).toEqual('active');\n-    });\n-  });\n-\n   describe('POST /api/users/avatar', () => {\n     it('should allow users to add a avatar', async () => {\n       const userData = await createUser(app, { email: 'admin@tooljet.io' });"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 8,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "7e8573d12f791daa11130bbb28240faa50ed37f6",
            "date": "2025-01-10T06:58:10Z",
            "author_login": "johnsoncherian"
          },
          {
            "sha": "e8a9aaf07b45b8cc1a4c89c9ef1e1d9c12669189",
            "date": "2025-01-09T07:17:42Z",
            "author_login": "amanregu"
          },
          {
            "sha": "d7ae19b24f6926c1ee44185ff8e9bc52ff9ad678",
            "date": "2025-01-08T14:12:25Z",
            "author_login": "RudraPratik30"
          },
          {
            "sha": "222c25f93c557d417e2ea4c137402fdd79088cd5",
            "date": "2025-01-08T07:10:00Z",
            "author_login": "PriteshKiri"
          },
          {
            "sha": "d6c8b9c6ec63702382503cd64079b6f13d28df1d",
            "date": "2025-01-06T14:23:34Z",
            "author_login": "slancerk"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-1125",
    "description": "Excessive Attack Surface in GitHub repository tooljet/tooljet prior to v1.16.0.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-09T17:15:09.760",
    "last_modified": "2024-11-21T07:00:12.900",
    "fix_date": "2022-06-02T09:50:51Z"
  },
  "references": [
    {
      "url": "https://github.com/tooljet/tooljet/commit/fadf025365823cbbc739a1313791c0a04621972b",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/4431ef84-93f2-4bc5-bc1a-97d7f229b28e",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tooljet/tooljet/commit/fadf025365823cbbc739a1313791c0a04621972b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/4431ef84-93f2-4bc5-bc1a-97d7f229b28e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.425347",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "ToolJet",
    "owner": "tooljet",
    "created_at": "2021-03-30T08:51:34Z",
    "updated_at": "2025-01-14T11:02:48Z",
    "pushed_at": "2025-01-13T13:44:06Z",
    "size": 1415933,
    "stars": 33669,
    "forks": 4363,
    "open_issues": 1082,
    "watchers": 33669,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "JavaScript": 5181340,
      "TypeScript": 1928640,
      "SCSS": 835109,
      "HTML": 31625,
      "Shell": 25589,
      "EJS": 17681,
      "Dockerfile": 15959,
      "Handlebars": 11680,
      "MDX": 11289,
      "CSS": 3790,
      "HCL": 1872,
      "Procfile": 62,
      "Batchfile": 61
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:26:36.929498"
  }
}