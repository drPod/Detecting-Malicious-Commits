{
  "cve_id": "CVE-2022-2054",
  "github_data": {
    "repository": "nuitka/nuitka",
    "fix_commit": "09647745d7cbb6ff32f9fa948f19d5558b32bcad",
    "related_commits": [
      "09647745d7cbb6ff32f9fa948f19d5558b32bcad",
      "09647745d7cbb6ff32f9fa948f19d5558b32bcad"
    ],
    "patch_url": "https://github.com/nuitka/nuitka/commit/09647745d7cbb6ff32f9fa948f19d5558b32bcad.patch",
    "fix_commit_details": {
      "sha": "09647745d7cbb6ff32f9fa948f19d5558b32bcad",
      "commit_date": "2022-06-09T13:06:57Z",
      "author": {
        "login": "kayhayen",
        "type": "User",
        "stats": {
          "total_commits": 14687,
          "average_weekly_commits": 19.982312925170067,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 555
        }
      },
      "commit_message": {
        "title": "Cleanup, avoid using \"eval\" where \"ast.literal_eval\" can be used.",
        "length": 65,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 28,
        "additions": 12,
        "deletions": 16
      },
      "files": [
        {
          "filename": "nuitka/__main__.py",
          "status": "modified",
          "additions": 6,
          "deletions": 8,
          "patch": "@@ -25,6 +25,7 @@\n # Note: This avoids imports at all costs, such that initial startup doesn't do more\n # than necessary, until re-execution has been decided.\n \n+import ast\n import os\n import sys\n \n@@ -41,8 +42,8 @@ def main():\n \n     if \"NUITKA_PYTHONPATH\" in os.environ:\n         # Restore the PYTHONPATH gained from the site module, that we chose not\n-        # to have imported. pylint: disable=eval-used\n-        sys.path = eval(os.environ[\"NUITKA_PYTHONPATH\"])\n+        # to have imported during compilation.\n+        sys.path = ast.literal_eval(os.environ[\"NUITKA_PYTHONPATH\"])\n         del os.environ[\"NUITKA_PYTHONPATH\"]\n     else:\n         # Remove path element added for being called via \"__main__.py\", this can\n@@ -101,20 +102,17 @@ def main():\n \n     if \"NUITKA_NAMESPACES\" in os.environ:\n         # Restore the detected name space packages, that were force loaded in\n-        # site.py, and will need a free pass later on. pylint: disable=eval-used\n-\n+        # site.py, and will need a free pass later on\n         from nuitka.importing.PreloadedPackages import setPreloadedPackagePaths\n \n-        setPreloadedPackagePaths(eval(os.environ[\"NUITKA_NAMESPACES\"]))\n+        setPreloadedPackagePaths(ast.literal_eval(os.environ[\"NUITKA_NAMESPACES\"]))\n         del os.environ[\"NUITKA_NAMESPACES\"]\n \n     if \"NUITKA_PTH_IMPORTED\" in os.environ:\n         # Restore the packages that the \".pth\" files asked to import.\n-        # pylint: disable=eval-used\n-\n         from nuitka.importing.PreloadedPackages import setPthImportedPackages\n \n-        setPthImportedPackages(eval(os.environ[\"NUITKA_PTH_IMPORTED\"]))\n+        setPthImportedPackages(ast.literal_eval(os.environ[\"NUITKA_PTH_IMPORTED\"]))\n         del os.environ[\"NUITKA_PTH_IMPORTED\"]\n \n     # Now the real main program of Nuitka can take over."
        },
        {
          "filename": "nuitka/build/SconsCaching.py",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -19,6 +19,7 @@\n \n \"\"\"\n \n+import ast\n import os\n import platform\n import re\n@@ -382,9 +383,7 @@ def checkCachingSuccess(source_dir):\n         if clcache_stats_filename is not None and os.path.exists(\n             clcache_stats_filename\n         ):\n-            stats = eval(  # lazy, pylint: disable=eval-used\n-                getFileContents(clcache_stats_filename)\n-            )\n+            stats = ast.literal_eval(getFileContents(clcache_stats_filename))\n \n             clcache_hit = stats[\"CacheHits\"]\n             clcache_miss = stats[\"CacheMisses\"]"
        },
        {
          "filename": "nuitka/nodes/NodeBases.py",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -25,6 +25,7 @@\n \n # from abc import abstractmethod\n \n+import ast\n from abc import abstractmethod\n \n from nuitka import Options, Tracing, TreeXML, Variables\n@@ -1175,9 +1176,7 @@ def fromXML(provider, xml, source_ref=None):\n     kind, node_class, args, source_ref = extractKindAndArgsFromXML(xml, source_ref)\n \n     if \"constant\" in args:\n-        # TODO: Try and reduce/avoid this, use marshal and/or pickle from a file\n-        # global stream     instead. For now, this will do. pylint: disable=eval-used\n-        args[\"constant\"] = eval(args[\"constant\"])\n+        args[\"constant\"] = ast.literal_eval(args[\"constant\"])\n \n     if kind in (\n         \"ExpressionFunctionBody\","
        },
        {
          "filename": "nuitka/plugins/PluginBase.py",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -26,6 +26,7 @@\n it being used.\n \"\"\"\n \n+import ast\n import inspect\n import os\n import sys\n@@ -845,9 +846,8 @@ def queryRuntimeInformationMultiple(self, info_name, setup_codes, values):\n \n         NamedTupleResult = namedtuple(info_name, keys)\n \n-        # We are being lazy here, the code is trusted, pylint: disable=eval-used\n         self._runtime_information_cache[info_name] = NamedTupleResult(\n-            *(eval(value) for value in feedback)\n+            *(ast.literal_eval(value) for value in feedback)\n         )\n \n         return self._runtime_information_cache[info_name]"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "d5b6e1bc1850363a3eabbeec9021b6af56a80390",
            "date": "2025-01-06T10:12:22Z",
            "author_login": "Oblynx"
          },
          {
            "sha": "cae1c2247c012e7f3c8e8010bb8956ebce2d05a6",
            "date": "2024-12-24T10:05:02Z",
            "author_login": "kayhayen"
          },
          {
            "sha": "45e4bc53f0345a808424c79961b5502ba6036092",
            "date": "2024-12-24T11:20:33Z",
            "author_login": "kayhayen"
          },
          {
            "sha": "b4904cb666d9f4acb7472d023817c5d15b2d548e",
            "date": "2024-12-24T10:00:39Z",
            "author_login": "kayhayen"
          },
          {
            "sha": "96a03a1ca875a73b8481b80bc8d481bc9f0f3e1e",
            "date": "2024-12-24T10:00:05Z",
            "author_login": "kayhayen"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.4,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-94",
    "description": "Code Injection in GitHub repository nuitka/nuitka prior to 0.9.\n\n",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-12T14:15:08.527",
    "last_modified": "2024-11-21T07:00:14.547",
    "fix_date": "2022-06-09T13:06:57Z"
  },
  "references": [
    {
      "url": "https://github.com/nuitka/nuitka/commit/09647745d7cbb6ff32f9fa948f19d5558b32bcad",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/ea4a842c-c48c-4aae-a599-3305125c63a7",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nuitka/nuitka/commit/09647745d7cbb6ff32f9fa948f19d5558b32bcad",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/ea4a842c-c48c-4aae-a599-3305125c63a7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.431335",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "Nuitka",
    "owner": "nuitka",
    "created_at": "2013-04-23T15:40:33Z",
    "updated_at": "2025-01-14T13:47:34Z",
    "pushed_at": "2025-01-13T11:25:26Z",
    "size": 61494,
    "stars": 12360,
    "forks": 657,
    "open_issues": 147,
    "watchers": 12360,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [],
    "languages": {
      "Python": 14804566,
      "C": 8994652,
      "Jinja": 331808,
      "C++": 95464,
      "Dockerfile": 4517,
      "Batchfile": 1985,
      "Shell": 1547
    },
    "commit_activity": {
      "total_commits_last_year": 4739,
      "avg_commits_per_week": 91.13461538461539,
      "days_active_last_year": 225
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:44:41.168028"
  }
}