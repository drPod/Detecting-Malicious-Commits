{
  "cve_id": "CVE-2022-2064",
  "github_data": {
    "repository": "nocodb/nocodb",
    "fix_commit": "c9b5111b25aea2781e19395a8e9107ddbd235a2b",
    "related_commits": [
      "c9b5111b25aea2781e19395a8e9107ddbd235a2b",
      "c9b5111b25aea2781e19395a8e9107ddbd235a2b"
    ],
    "patch_url": "https://github.com/nocodb/nocodb/commit/c9b5111b25aea2781e19395a8e9107ddbd235a2b.patch",
    "fix_commit_details": {
      "sha": "c9b5111b25aea2781e19395a8e9107ddbd235a2b",
      "commit_date": "2022-06-13T11:28:54Z",
      "author": {
        "login": "pranavxc",
        "type": "User",
        "stats": {
          "total_commits": 5675,
          "average_weekly_commits": 15.053050397877984,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 179
        }
      },
      "commit_message": {
        "title": "Merge pull request #2338 from nocodb/fix/insufficient-session-expiration",
        "length": 110,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 120,
        "additions": 101,
        "deletions": 19
      },
      "files": [
        {
          "filename": "packages/nc-gui/pages/user/settings/index.vue",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -227,8 +227,10 @@ export default {\n               newPassword: this.passwordDetails.newPassword\n             }\n           )\n-          this.$toast.success('Password changed successfully.').goAway(3000)\n+          this.$toast.success('Password changed successfully. Please login again.').goAway(3000)\n           this.$refs.formType[0].reset()\n+          await this.$store.dispatch('users/ActSignOut')\n+          this.$router.push('/user/authentication/signin')\n         } catch (e) {\n           this.$toast\n             .error(await this._extractSdkResponseErrorMsg(e))"
        },
        {
          "filename": "packages/nc-gui/plugins/axiosInterceptor.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -77,7 +77,7 @@ export default ({ store, $axios, redirect, $toast, route, app }) => {\n           redirect('/')\n         } else {\n           $toast.clear()\n-          $toast.info('Token expired please login to continue', {\n+          $toast.info('Token Expired. Please login again.', {\n             position: 'bottom-center'\n           }).goAway(5000)\n           redirect('/user/authentication/signin')"
        },
        {
          "filename": "packages/nocodb/src/lib/meta/api/userApi/initStrategies.ts",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -53,7 +53,8 @@ export function initStrategies(router): void {\n       firstname,\n       lastname,\n       isAuthorized,\n-      isPublicBase\n+      isPublicBase,\n+      token_version\n     },\n     done\n   ) {\n@@ -72,7 +73,8 @@ export function initStrategies(router): void {\n       provider,\n       firstname,\n       lastname,\n-      roles\n+      roles,\n+      token_version\n     });\n   });\n \n@@ -100,11 +102,17 @@ export function initStrategies(router): void {\n         );\n \n         if (cachedVal) {\n+          if (cachedVal.token_version !== jwtPayload.token_version) {\n+            return done(new Error('Token Expired. Please login again.'));\n+          }\n           return done(null, cachedVal);\n         }\n \n         User.getByEmail(jwtPayload?.email)\n           .then(async user => {\n+            if (user.token_version !== jwtPayload.token_version) {\n+              return done(new Error('Token Expired. Please login again.'));\n+            }\n             if (req.ncProjectId) {\n               // this.xcMeta\n               //   .metaGet(req.ncProjectId, null, 'nc_projects_users', {"
        },
        {
          "filename": "packages/nocodb/src/lib/meta/api/userApi/userApis.ts",
          "status": "modified",
          "additions": 34,
          "deletions": 9,
          "patch": "@@ -71,7 +71,8 @@ export async function signup(req: Request, res: Response<TableType>) {\n         password,\n         email_verification_token,\n         invite_token: null,\n-        invite_token_expires: null\n+        invite_token_expires: null,\n+        email: user.email\n       });\n     } else {\n       NcError.badRequest('User already exist');\n@@ -95,14 +96,17 @@ export async function signup(req: Request, res: Response<TableType>) {\n       }\n     }\n \n+    const token_version = randomTokenString();\n+\n     await User.insert({\n       firstname,\n       lastname,\n       email,\n       salt,\n       password,\n       email_verification_token,\n-      roles\n+      roles,\n+      token_version\n     });\n   }\n   user = await User.getByEmail(email);\n@@ -126,7 +130,8 @@ export async function signup(req: Request, res: Response<TableType>) {\n   await promisify((req as any).login.bind(req))(user);\n   const refreshToken = randomTokenString();\n   await User.update(user.id, {\n-    refresh_token: refreshToken\n+    refresh_token: refreshToken,\n+    email: user.email\n   });\n \n   setTokenCookie(res, refreshToken);\n@@ -148,7 +153,8 @@ export async function signup(req: Request, res: Response<TableType>) {\n         firstname: user.firstname,\n         lastname: user.lastname,\n         id: user.id,\n-        roles: user.roles\n+        roles: user.roles,\n+        token_version: user.token_version\n       },\n       Noco.getConfig().auth.jwt.secret,\n       Noco.getConfig().auth.jwt.options\n@@ -178,8 +184,15 @@ async function successfulSignIn({\n     await promisify((req as any).login.bind(req))(user);\n     const refreshToken = randomTokenString();\n \n+    let token_version = user.token_version;\n+    if (!token_version) {\n+      token_version = randomTokenString();\n+    }\n+\n     await User.update(user.id, {\n-      refresh_token: refreshToken\n+      refresh_token: refreshToken,\n+      email: user.email,\n+      token_version\n     });\n     setTokenCookie(res, refreshToken);\n \n@@ -198,7 +211,8 @@ async function successfulSignIn({\n           firstname: user.firstname,\n           lastname: user.lastname,\n           id: user.id,\n-          roles: user.roles\n+          roles: user.roles,\n+          token_version\n         },\n \n         Noco.getConfig().auth.jwt.secret,\n@@ -249,6 +263,7 @@ async function googleSignin(req, res, next) {\n function randomTokenString(): string {\n   return crypto.randomBytes(40).toString('hex');\n }\n+\n function setTokenCookie(res, token): void {\n   // create http only cookie with refresh token that expires in 7 days\n   const cookieOptions = {\n@@ -285,7 +300,8 @@ async function passwordChange(req: Request<any, any>, res): Promise<any> {\n   await User.update(user.id, {\n     salt,\n     password,\n-    email: user.email\n+    email: user.email,\n+    token_version: null\n   });\n \n   Audit.insert({\n@@ -311,8 +327,10 @@ async function passwordForgot(req: Request<any, any>, res): Promise<any> {\n   if (user) {\n     const token = uuidv4();\n     await User.update(user.id, {\n+      email: user.email,\n       reset_password_token: token,\n-      reset_password_expires: new Date(Date.now() + 60 * 60 * 1000)\n+      reset_password_expires: new Date(Date.now() + 60 * 60 * 1000),\n+      token_version: null\n     });\n     try {\n       const template = (await import('./ui/emailTemplates/forgotPassword'))\n@@ -363,6 +381,9 @@ async function tokenValidate(req, res): Promise<any> {\n   if (user.reset_password_expires < new Date()) {\n     NcError.badRequest('Password reset url expired');\n   }\n+  if (!user.token_version) {\n+    NcError.badRequest('Token Expired. Please login again.');\n+  }\n   res.json(true);\n }\n \n@@ -389,8 +410,10 @@ async function passwordReset(req, res): Promise<any> {\n   await User.update(user.id, {\n     salt,\n     password,\n+    email: user.email,\n     reset_password_expires: null,\n-    reset_password_token: ''\n+    reset_password_token: '',\n+    token_version: null\n   });\n \n   Audit.insert({\n@@ -416,6 +439,7 @@ async function emailVerification(req, res): Promise<any> {\n   }\n \n   await User.update(user.id, {\n+    email: user.email,\n     email_verification_token: '',\n     email_verified: true\n   });\n@@ -446,6 +470,7 @@ async function refreshToken(req, res): Promise<any> {\n     const refreshToken = randomTokenString();\n \n     await User.update(user.id, {\n+      email: user.email,\n       refresh_token: refreshToken\n     });\n "
        },
        {
          "filename": "packages/nocodb/src/lib/meta/helpers/ncMetaAclMw.ts",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -2,10 +2,11 @@ import projectAcl from '../../utils/projectAcl';\n import { NextFunction, Request, Response } from 'express';\n import catchError, { NcError } from './catchError';\n import extractProjectIdAndAuthenticate from './extractProjectIdAndAuthenticate';\n+\n export default function(handlerFn, permissionName) {\n   return [\n     extractProjectIdAndAuthenticate,\n-    catchError(function authMiddleware(req, _res, next) {\n+    catchError(async function authMiddleware(req, _res, next) {\n       const roles = req?.session?.passport?.user?.roles;\n       if (\n         !("
        },
        {
          "filename": "packages/nocodb/src/lib/migrations/XcMigrationSourcev2.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -4,6 +4,7 @@ import * as nc_013_sync_source from './v2/nc_013_sync_source';\n import * as nc_014_alter_column_data_types from './v2/nc_014_alter_column_data_types';\n import * as nc_015_add_meta_col_in_column_table from './v2/nc_015_add_meta_col_in_column_table';\n import * as nc_016_alter_hooklog_payload_types from './v2/nc_016_alter_hooklog_payload_types';\n+import * as nc_017_add_user_token_version_column from './v2/nc_017_add_user_token_version_column';\n \n // Create a custom migration source class\n export default class XcMigrationSourcev2 {\n@@ -18,7 +19,8 @@ export default class XcMigrationSourcev2 {\n       'nc_013_sync_source',\n       'nc_014_alter_column_data_types',\n       'nc_015_add_meta_col_in_column_table',\n-      'nc_016_alter_hooklog_payload_types'\n+      'nc_016_alter_hooklog_payload_types',\n+      'nc_017_add_user_token_version_column'\n     ]);\n   }\n \n@@ -40,6 +42,8 @@ export default class XcMigrationSourcev2 {\n         return nc_015_add_meta_col_in_column_table;\n       case 'nc_016_alter_hooklog_payload_types':\n         return nc_016_alter_hooklog_payload_types;\n+      case 'nc_017_add_user_token_version_column':\n+        return nc_017_add_user_token_version_column;\n     }\n   }\n }"
        },
        {
          "filename": "packages/nocodb/src/lib/migrations/v2/nc_017_add_user_token_version_column.ts",
          "status": "added",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -0,0 +1,37 @@\n+import Knex from 'knex';\n+\n+const up = async (knex: Knex) => {\n+  await knex.schema.alterTable('nc_users_v2', table => {\n+    table.string('token_version');\n+  });\n+};\n+\n+const down = async knex => {\n+  await knex.schema.alterTable('nc_users_v2', table => {\n+    table.dropColumns('token_version');\n+  });\n+};\n+\n+export { up, down };\n+\n+/**\n+ * @copyright Copyright (c) 2021, Xgene Cloud Ltd\n+ *\n+ * @author Wing-Kam Wong <wingkwong.code@gmail.com>\n+ *\n+ * @license GNU AGPL version 3 or any later version\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU Affero General Public License as\n+ * published by the Free Software Foundation, either version 3 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU Affero General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Affero General Public License\n+ * along with this program. If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ */"
        },
        {
          "filename": "packages/nocodb/src/lib/models/User.ts",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -22,6 +22,7 @@ export default class User implements UserType {\n   email_verification_token?: string;\n   email_verified: boolean;\n   roles?: string;\n+  token_version?: string;\n \n   constructor(data: User) {\n     Object.assign(this, data);\n@@ -43,7 +44,8 @@ export default class User implements UserType {\n       'reset_password_token',\n       'email_verification_token',\n       'email_verified',\n-      'roles'\n+      'roles',\n+      'token_version'\n     ]);\n     const { id } = await ncMeta.metaInsert2(\n       null,\n@@ -71,7 +73,8 @@ export default class User implements UserType {\n       'reset_password_token',\n       'email_verification_token',\n       'email_verified',\n-      'roles'\n+      'roles',\n+      'token_version'\n     ]);\n     // get existing cache\n     const keys = ["
        },
        {
          "filename": "packages/nocodb/src/lib/v1-legacy/rest/RestAuthCtrl.ts",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -42,7 +42,8 @@ passport.serializeUser(function(\n     firstname,\n     lastname,\n     isAuthorized,\n-    isPublicBase\n+    isPublicBase,\n+    token_version\n   },\n   done\n ) {\n@@ -61,7 +62,8 @@ passport.serializeUser(function(\n     provider,\n     firstname,\n     lastname,\n-    roles\n+    roles,\n+    token_version\n   });\n });\n "
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 8,
        "max_directory_depth": 7
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c2f50efbb9e57e954a4fde07cf618bbfd0fc8704",
            "date": "2025-01-14T11:59:45Z",
            "author_login": "mertmit"
          },
          {
            "sha": "51edd98b9e26a5625a4d3e0b1d3ff09d8442e819",
            "date": "2025-01-14T10:55:55Z",
            "author_login": "pranavxc"
          },
          {
            "sha": "df0bffd0ccaadb5db69999529ec27fa75c2fa452",
            "date": "2025-01-14T09:53:04Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "adfc02d7d49f88e9b7dac823915fbda400cb8d6c",
            "date": "2025-01-14T09:51:26Z",
            "author_login": "github-actions[bot]"
          },
          {
            "sha": "4ac6769eba67ba3ad52d2c37b68058eb0905fc8e",
            "date": "2025-01-14T09:51:23Z",
            "author_login": "pranavxc"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-613",
    "description": "Insufficient Session Expiration in GitHub repository nocodb/nocodb prior to 0.91.7+.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-13T12:15:08.270",
    "last_modified": "2024-11-21T07:00:15.583",
    "fix_date": "2022-06-13T11:28:54Z"
  },
  "references": [
    {
      "url": "https://github.com/nocodb/nocodb/commit/c9b5111b25aea2781e19395a8e9107ddbd235a2b",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/39523d51-fc5c-48b8-a082-171da79761bb",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/nocodb/nocodb/commit/c9b5111b25aea2781e19395a8e9107ddbd235a2b",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/39523d51-fc5c-48b8-a082-171da79761bb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.432508",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "nocodb",
    "owner": "nocodb",
    "created_at": "2017-10-29T18:51:48Z",
    "updated_at": "2025-01-14T13:56:54Z",
    "pushed_at": "2025-01-14T12:15:11Z",
    "size": 1247095,
    "stars": 50834,
    "forks": 3497,
    "open_issues": 754,
    "watchers": 50834,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop"
    ],
    "languages": {
      "TypeScript": 8293660,
      "Vue": 3668346,
      "JavaScript": 756191,
      "PLpgSQL": 101494,
      "Shell": 56477,
      "SCSS": 42238,
      "CSS": 25579,
      "TSQL": 15401,
      "Dockerfile": 5585,
      "Smarty": 2321
    },
    "commit_activity": {
      "total_commits_last_year": 7073,
      "avg_commits_per_week": 136.01923076923077,
      "days_active_last_year": 334
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T14:16:35.736766"
  }
}