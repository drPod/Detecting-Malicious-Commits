{
  "cve_id": "CVE-2022-2111",
  "github_data": {
    "repository": "inventree/inventree",
    "fix_commit": "26bf51c20a1c9b3130ac5dd2e17649bece5ff84f",
    "related_commits": [
      "26bf51c20a1c9b3130ac5dd2e17649bece5ff84f",
      "26bf51c20a1c9b3130ac5dd2e17649bece5ff84f"
    ],
    "patch_url": "https://github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f.patch",
    "fix_commit_details": {
      "sha": "26bf51c20a1c9b3130ac5dd2e17649bece5ff84f",
      "commit_date": "2022-06-15T10:43:43Z",
      "author": {
        "login": "SchrodingersGat",
        "type": "User",
        "stats": {
          "total_commits": 11996,
          "average_weekly_commits": 29.330073349633253,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 301
        }
      },
      "commit_message": {
        "title": "Back porting of security patches (#3197)",
        "length": 936,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 258,
        "additions": 195,
        "deletions": 63
      },
      "files": [
        {
          "filename": "InvenTree/InvenTree/admin.py",
          "status": "added",
          "additions": 33,
          "deletions": 0,
          "patch": "@@ -0,0 +1,33 @@\n+\"\"\"Admin classes\"\"\"\n+\n+from import_export.resources import ModelResource\n+\n+\n+class InvenTreeResource(ModelResource):\n+    \"\"\"Custom subclass of the ModelResource class provided by django-import-export\"\n+\n+    Ensures that exported data are escaped to prevent malicious formula injection.\n+    Ref: https://owasp.org/www-community/attacks/CSV_Injection\n+    \"\"\"\n+\n+    def export_resource(self, obj):\n+        \"\"\"Custom function to override default row export behaviour.\n+\n+        Specifically, strip illegal leading characters to prevent formula injection\n+        \"\"\"\n+        row = super().export_resource(obj)\n+\n+        illegal_start_vals = ['@', '=', '+', '-', '@', '\\t', '\\r', '\\n']\n+\n+        for idx, val in enumerate(row):\n+            if type(val) is str:\n+                val = val.strip()\n+\n+                # If the value starts with certain 'suspicious' values, remove it!\n+                while len(val) > 0 and val[0] in illegal_start_vals:\n+                    # Remove the first character\n+                    val = val[1:]\n+\n+                row[idx] = val\n+\n+        return row"
        },
        {
          "filename": "InvenTree/InvenTree/static/script/inventree/inventree.js",
          "status": "modified",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -13,6 +13,7 @@\n     inventreeDocReady,\n     inventreeLoad,\n     inventreeSave,\n+    sanitizeData,\n */\n \n function attachClipboard(selector, containerselector, textElement) {\n@@ -273,6 +274,42 @@ function loadBrandIcon(element, name) {\n     }\n }\n \n+\n+/*\n+ * Function to sanitize a (potentially nested) object.\n+ * Iterates through all levels, and sanitizes each primitive string.\n+ *\n+ * Note that this function effectively provides a \"deep copy\" of the provided data,\n+ * and the original data structure is unaltered.\n+ */\n+function sanitizeData(data) {\n+    if (data == null) {\n+        return null;\n+    } else if (Array.isArray(data)) {\n+        // Handle arrays\n+        var arr = [];\n+        data.forEach(function(val) {\n+            arr.push(sanitizeData(val));\n+        });\n+\n+        return arr;\n+    } else if (typeof(data) === 'object') {\n+        // Handle nested structures\n+        var nested = {};\n+        $.each(data, function(k, v) {\n+            nested[k] = sanitizeData(v);\n+        });\n+\n+        return nested;\n+    } else if (typeof(data) === 'string') {\n+        // Perform string replacement\n+        return data.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;').replace(/`/g, '&#x60;');\n+    } else {\n+        return data;\n+    }\n+}\n+\n+\n // Convenience function to determine if an element exists\n $.fn.exists = function() {\n     return this.length !== 0;"
        },
        {
          "filename": "InvenTree/InvenTree/version.py",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -12,7 +12,7 @@\n from InvenTree.api_version import INVENTREE_API_VERSION\n \n # InvenTree software version\n-INVENTREE_SW_VERSION = \"0.7.1\"\n+INVENTREE_SW_VERSION = \"0.7.2\"\n \n \n def inventreeInstanceName():"
        },
        {
          "filename": "InvenTree/build/admin.py",
          "status": "modified",
          "additions": 3,
          "deletions": 4,
          "patch": "@@ -2,16 +2,15 @@\n \n from import_export.admin import ImportExportModelAdmin\n from import_export.fields import Field\n-from import_export.resources import ModelResource\n import import_export.widgets as widgets\n \n from build.models import Build, BuildItem\n-\n+from InvenTree.admin import InvenTreeResource\n import part.models\n \n \n-class BuildResource(ModelResource):\n-    \"\"\"Class for managing import/export of Build data\"\"\"\n+class BuildResource(InvenTreeResource):\n+    \"\"\"Class for managing import/export of Build data.\"\"\"\n     # For some reason, we need to specify the fields individually for this ModelResource,\n     # but we don't for other ones.\n     # TODO: 2022-05-12 - Need to investigate why this is the case!"
        },
        {
          "filename": "InvenTree/company/admin.py",
          "status": "modified",
          "additions": 11,
          "deletions": 17,
          "patch": "@@ -3,17 +3,17 @@\n import import_export.widgets as widgets\n from import_export.admin import ImportExportModelAdmin\n from import_export.fields import Field\n-from import_export.resources import ModelResource\n \n+from InvenTree.admin import InvenTreeResource\n from part.models import Part\n \n from .models import (Company, ManufacturerPart, ManufacturerPartAttachment,\n                      ManufacturerPartParameter, SupplierPart,\n                      SupplierPriceBreak)\n \n \n-class CompanyResource(ModelResource):\n-    \"\"\" Class for managing Company data import/export \"\"\"\n+class CompanyResource(InvenTreeResource):\n+    \"\"\"Class for managing Company data import/export.\"\"\"\n \n     class Meta:\n         model = Company\n@@ -34,10 +34,8 @@ class CompanyAdmin(ImportExportModelAdmin):\n     ]\n \n \n-class SupplierPartResource(ModelResource):\n-    \"\"\"\n-    Class for managing SupplierPart data import/export\n-    \"\"\"\n+class SupplierPartResource(InvenTreeResource):\n+    \"\"\"Class for managing SupplierPart data import/export.\"\"\"\n \n     part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n \n@@ -70,10 +68,8 @@ class SupplierPartAdmin(ImportExportModelAdmin):\n     autocomplete_fields = ('part', 'supplier', 'manufacturer_part',)\n \n \n-class ManufacturerPartResource(ModelResource):\n-    \"\"\"\n-    Class for managing ManufacturerPart data import/export\n-    \"\"\"\n+class ManufacturerPartResource(InvenTreeResource):\n+    \"\"\"Class for managing ManufacturerPart data import/export.\"\"\"\n \n     part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))\n \n@@ -118,10 +114,8 @@ class ManufacturerPartAttachmentAdmin(ImportExportModelAdmin):\n     autocomplete_fields = ('manufacturer_part',)\n \n \n-class ManufacturerPartParameterResource(ModelResource):\n-    \"\"\"\n-    Class for managing ManufacturerPartParameter data import/export\n-    \"\"\"\n+class ManufacturerPartParameterResource(InvenTreeResource):\n+    \"\"\"Class for managing ManufacturerPartParameter data import/export.\"\"\"\n \n     class Meta:\n         model = ManufacturerPartParameter\n@@ -148,8 +142,8 @@ class ManufacturerPartParameterAdmin(ImportExportModelAdmin):\n     autocomplete_fields = ('manufacturer_part',)\n \n \n-class SupplierPriceBreakResource(ModelResource):\n-    \"\"\" Class for managing SupplierPriceBreak data import/export \"\"\"\n+class SupplierPriceBreakResource(InvenTreeResource):\n+    \"\"\"Class for managing SupplierPriceBreak data import/export.\"\"\"\n \n     part = Field(attribute='part', widget=widgets.ForeignKeyWidget(SupplierPart))\n "
        },
        {
          "filename": "InvenTree/order/admin.py",
          "status": "modified",
          "additions": 37,
          "deletions": 24,
          "patch": "@@ -1,9 +1,12 @@\n+\"\"\"Admin functionality for the 'order' app\"\"\"\n+\n from django.contrib import admin\n \n import import_export.widgets as widgets\n from import_export.admin import ImportExportModelAdmin\n from import_export.fields import Field\n-from import_export.resources import ModelResource\n+\n+from InvenTree.admin import InvenTreeResource\n \n from .models import (PurchaseOrder, PurchaseOrderExtraLine,\n                      PurchaseOrderLineItem, SalesOrder, SalesOrderAllocation,\n@@ -13,6 +16,7 @@\n \n # region general classes\n class GeneralExtraLineAdmin:\n+    \"\"\"Admin class template for the 'ExtraLineItem' models\"\"\"\n     list_display = (\n         'order',\n         'quantity',\n@@ -29,18 +33,21 @@ class GeneralExtraLineAdmin:\n \n \n class GeneralExtraLineMeta:\n+    \"\"\"Metaclass template for the 'ExtraLineItem' models\"\"\"\n     skip_unchanged = True\n     report_skipped = False\n     clean_model_instances = True\n # endregion\n \n \n class PurchaseOrderLineItemInlineAdmin(admin.StackedInline):\n+    \"\"\"Inline admin class for the PurchaseOrderLineItem model\"\"\"\n     model = PurchaseOrderLineItem\n     extra = 0\n \n \n class PurchaseOrderAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the PurchaseOrder model\"\"\"\n \n     exclude = [\n         'reference_int',\n@@ -68,6 +75,7 @@ class PurchaseOrderAdmin(ImportExportModelAdmin):\n \n \n class SalesOrderAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the SalesOrder model\"\"\"\n \n     exclude = [\n         'reference_int',\n@@ -90,10 +98,8 @@ class SalesOrderAdmin(ImportExportModelAdmin):\n     autocomplete_fields = ('customer',)\n \n \n-class PurchaseOrderResource(ModelResource):\n-    \"\"\"\n-    Class for managing import / export of PurchaseOrder data\n-    \"\"\"\n+class PurchaseOrderResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of PurchaseOrder data.\"\"\"\n \n     # Add number of line items\n     line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n@@ -102,6 +108,7 @@ class PurchaseOrderResource(ModelResource):\n     overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n \n     class Meta:\n+        \"\"\"Metaclass\"\"\"\n         model = PurchaseOrder\n         skip_unchanged = True\n         clean_model_instances = True\n@@ -110,8 +117,8 @@ class Meta:\n         ]\n \n \n-class PurchaseOrderLineItemResource(ModelResource):\n-    \"\"\" Class for managing import / export of PurchaseOrderLineItem data \"\"\"\n+class PurchaseOrderLineItemResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of PurchaseOrderLineItem data.\"\"\"\n \n     part_name = Field(attribute='part__part__name', readonly=True)\n \n@@ -122,23 +129,24 @@ class PurchaseOrderLineItemResource(ModelResource):\n     SKU = Field(attribute='part__SKU', readonly=True)\n \n     class Meta:\n+        \"\"\"Metaclass\"\"\"\n         model = PurchaseOrderLineItem\n         skip_unchanged = True\n         report_skipped = False\n         clean_model_instances = True\n \n \n-class PurchaseOrderExtraLineResource(ModelResource):\n-    \"\"\" Class for managing import / export of PurchaseOrderExtraLine data \"\"\"\n+class PurchaseOrderExtraLineResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of PurchaseOrderExtraLine data.\"\"\"\n \n     class Meta(GeneralExtraLineMeta):\n+        \"\"\"Metaclass options.\"\"\"\n+\n         model = PurchaseOrderExtraLine\n \n \n-class SalesOrderResource(ModelResource):\n-    \"\"\"\n-    Class for managing import / export of SalesOrder data\n-    \"\"\"\n+class SalesOrderResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of SalesOrder data.\"\"\"\n \n     # Add number of line items\n     line_items = Field(attribute='line_count', widget=widgets.IntegerWidget(), readonly=True)\n@@ -147,6 +155,7 @@ class SalesOrderResource(ModelResource):\n     overdue = Field(attribute='is_overdue', widget=widgets.BooleanWidget(), readonly=True)\n \n     class Meta:\n+        \"\"\"Metaclass options\"\"\"\n         model = SalesOrder\n         skip_unchanged = True\n         clean_model_instances = True\n@@ -155,10 +164,8 @@ class Meta:\n         ]\n \n \n-class SalesOrderLineItemResource(ModelResource):\n-    \"\"\"\n-    Class for managing import / export of SalesOrderLineItem data\n-    \"\"\"\n+class SalesOrderLineItemResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of SalesOrderLineItem data.\"\"\"\n \n     part_name = Field(attribute='part__name', readonly=True)\n \n@@ -169,31 +176,34 @@ class SalesOrderLineItemResource(ModelResource):\n     fulfilled = Field(attribute='fulfilled_quantity', readonly=True)\n \n     def dehydrate_sale_price(self, item):\n-        \"\"\"\n-        Return a string value of the 'sale_price' field, rather than the 'Money' object.\n+        \"\"\"Return a string value of the 'sale_price' field, rather than the 'Money' object.\n+\n         Ref: https://github.com/inventree/InvenTree/issues/2207\n         \"\"\"\n-\n         if item.sale_price:\n             return str(item.sale_price)\n         else:\n             return ''\n \n     class Meta:\n+        \"\"\"Metaclass options\"\"\"\n         model = SalesOrderLineItem\n         skip_unchanged = True\n         report_skipped = False\n         clean_model_instances = True\n \n \n-class SalesOrderExtraLineResource(ModelResource):\n-    \"\"\" Class for managing import / export of SalesOrderExtraLine data \"\"\"\n+class SalesOrderExtraLineResource(InvenTreeResource):\n+    \"\"\"Class for managing import / export of SalesOrderExtraLine data.\"\"\"\n \n     class Meta(GeneralExtraLineMeta):\n+        \"\"\"Metaclass options.\"\"\"\n+\n         model = SalesOrderExtraLine\n \n \n class PurchaseOrderLineItemAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the PurchaseOrderLine model\"\"\"\n \n     resource_class = PurchaseOrderLineItemResource\n \n@@ -210,11 +220,12 @@ class PurchaseOrderLineItemAdmin(ImportExportModelAdmin):\n \n \n class PurchaseOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n-\n+    \"\"\"Admin class for the PurchaseOrderExtraLine model\"\"\"\n     resource_class = PurchaseOrderExtraLineResource\n \n \n class SalesOrderLineItemAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the SalesOrderLine model\"\"\"\n \n     resource_class = SalesOrderLineItemResource\n \n@@ -236,11 +247,12 @@ class SalesOrderLineItemAdmin(ImportExportModelAdmin):\n \n \n class SalesOrderExtraLineAdmin(GeneralExtraLineAdmin, ImportExportModelAdmin):\n-\n+    \"\"\"Admin class for the SalesOrderExtraLine model\"\"\"\n     resource_class = SalesOrderExtraLineResource\n \n \n class SalesOrderShipmentAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the SalesOrderShipment model\"\"\"\n \n     list_display = [\n         'order',\n@@ -258,6 +270,7 @@ class SalesOrderShipmentAdmin(ImportExportModelAdmin):\n \n \n class SalesOrderAllocationAdmin(ImportExportModelAdmin):\n+    \"\"\"Admin class for the SalesOrderAllocation model\"\"\"\n \n     list_display = (\n         'line',"
        },
        {
          "filename": "InvenTree/part/admin.py",
          "status": "modified",
          "additions": 9,
          "deletions": 9,
          "patch": "@@ -3,15 +3,15 @@\n import import_export.widgets as widgets\n from import_export.admin import ImportExportModelAdmin\n from import_export.fields import Field\n-from import_export.resources import ModelResource\n \n import part.models as models\n from company.models import SupplierPart\n+from InvenTree.admin import InvenTreeResource\n from stock.models import StockLocation\n \n \n-class PartResource(ModelResource):\n-    \"\"\" Class for managing Part data import/export \"\"\"\n+class PartResource(InvenTreeResource):\n+    \"\"\"Class for managing Part data import/export.\"\"\"\n \n     # ForeignKey fields\n     category = Field(attribute='category', widget=widgets.ForeignKeyWidget(models.PartCategory))\n@@ -81,8 +81,8 @@ class PartAdmin(ImportExportModelAdmin):\n     ]\n \n \n-class PartCategoryResource(ModelResource):\n-    \"\"\" Class for managing PartCategory data import/export \"\"\"\n+class PartCategoryResource(InvenTreeResource):\n+    \"\"\"Class for managing PartCategory data import/export.\"\"\"\n \n     parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(models.PartCategory))\n \n@@ -157,8 +157,8 @@ class PartTestTemplateAdmin(admin.ModelAdmin):\n     autocomplete_fields = ('part',)\n \n \n-class BomItemResource(ModelResource):\n-    \"\"\" Class for managing BomItem data import/export \"\"\"\n+class BomItemResource(InvenTreeResource):\n+    \"\"\"Class for managing BomItem data import/export.\"\"\"\n \n     level = Field(attribute='level', readonly=True)\n \n@@ -269,8 +269,8 @@ class ParameterTemplateAdmin(ImportExportModelAdmin):\n     search_fields = ('name', 'units')\n \n \n-class ParameterResource(ModelResource):\n-    \"\"\" Class for managing PartParameter data import/export \"\"\"\n+class ParameterResource(InvenTreeResource):\n+    \"\"\"Class for managing PartParameter data import/export.\"\"\"\n \n     part = Field(attribute='part', widget=widgets.ForeignKeyWidget(models.Part))\n "
        },
        {
          "filename": "InvenTree/stock/admin.py",
          "status": "modified",
          "additions": 5,
          "deletions": 5,
          "patch": "@@ -3,19 +3,19 @@\n import import_export.widgets as widgets\n from import_export.admin import ImportExportModelAdmin\n from import_export.fields import Field\n-from import_export.resources import ModelResource\n \n from build.models import Build\n from company.models import Company, SupplierPart\n+from InvenTree.admin import InvenTreeResource\n from order.models import PurchaseOrder, SalesOrder\n from part.models import Part\n \n from .models import (StockItem, StockItemAttachment, StockItemTestResult,\n                      StockItemTracking, StockLocation)\n \n \n-class LocationResource(ModelResource):\n-    \"\"\" Class for managing StockLocation data import/export \"\"\"\n+class LocationResource(InvenTreeResource):\n+    \"\"\"Class for managing StockLocation data import/export.\"\"\"\n \n     parent = Field(attribute='parent', widget=widgets.ForeignKeyWidget(StockLocation))\n \n@@ -65,8 +65,8 @@ class LocationAdmin(ImportExportModelAdmin):\n     ]\n \n \n-class StockItemResource(ModelResource):\n-    \"\"\" Class for managing StockItem data import/export \"\"\"\n+class StockItemResource(InvenTreeResource):\n+    \"\"\"Class for managing StockItem data import/export.\"\"\"\n \n     # Custom managers for ForeignKey fields\n     part = Field(attribute='part', widget=widgets.ForeignKeyWidget(Part))"
        },
        {
          "filename": "InvenTree/templates/js/translated/attachment.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -149,7 +149,7 @@ function loadAttachmentTable(url, options) {\n \n                         var html = `<span class='fas ${icon}'></span> ${filename}`;\n \n-                        return renderLink(html, value);\n+                        return renderLink(html, value, {download: true});\n                     } else if (row.link) {\n                         var html = `<span class='fas fa-link'></span> ${row.link}`;\n                         return renderLink(html, row.link);"
        },
        {
          "filename": "InvenTree/templates/js/translated/forms.js",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -204,6 +204,9 @@ function constructChangeForm(fields, options) {\n         },\n         success: function(data) {\n \n+            // Ensure the data are fully sanitized before we operate on it\n+            data = sanitizeData(data);\n+\n             // An optional function can be provided to process the returned results,\n             // before they are rendered to the form\n             if (options.processResults) {"
        },
        {
          "filename": "InvenTree/templates/js/translated/stock.js",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -1306,7 +1306,8 @@ function loadStockTestResultsTable(table, options) {\n                     var html = value;\n \n                     if (row.attachment) {\n-                        html += `<a href='${row.attachment}'><span class='fas fa-file-alt float-right'></span></a>`;\n+                        var text = `<span class='fas fa-file-alt float-right'></span>`;\n+                        html += renderLink(text, row.attachment, {download: true});\n                     }\n \n                     return html;"
        },
        {
          "filename": "InvenTree/templates/js/translated/tables.js",
          "status": "modified",
          "additions": 53,
          "deletions": 1,
          "patch": "@@ -92,6 +92,13 @@ function renderLink(text, url, options={}) {\n \n     var max_length = options.max_length || -1;\n \n+    var extra = '';\n+\n+    if (options.download) {\n+        var fn = url.split('/').at(-1);\n+        extra += ` download='${fn}'`;\n+    }\n+\n     // Shorten the displayed length if required\n     if ((max_length > 0) && (text.length > max_length)) {\n         var slice_length = (max_length - 3) / 2;\n@@ -102,7 +109,7 @@ function renderLink(text, url, options={}) {\n         text = `${text_start}...${text_end}`;\n     }\n \n-    return '<a href=\"' + url + '\">' + text + '</a>';\n+    return `<a href='${url}'${extra}>${text}</a>`;\n }\n \n \n@@ -282,6 +289,8 @@ $.fn.inventreeTable = function(options) {\n     // Extract query params\n     var filters = options.queryParams || options.filters || {};\n \n+    options.escape = true;\n+\n     // Store the total set of query params\n     options.query_params = filters;\n \n@@ -468,6 +477,49 @@ function customGroupSorter(sortName, sortOrder, sortData) {\n \n     $.extend($.fn.bootstrapTable.defaults, $.fn.bootstrapTable.locales['en-US-custom']);\n \n+    // Enable HTML escaping by default\n+    $.fn.bootstrapTable.escape = true;\n+\n+    // Override the 'calculateObjectValue' function at bootstrap-table.js:3525\n+    // Allows us to escape any nasty HTML tags which are rendered to the DOM\n+    $.fn.bootstrapTable.utils._calculateObjectValue = $.fn.bootstrapTable.utils.calculateObjectValue;\n+\n+    $.fn.bootstrapTable.utils.calculateObjectValue = function escapeCellValue(self, name, args, defaultValue) {\n+\n+        var args_list = [];\n+\n+        if (args) {\n+\n+            args_list.push(args[0]);\n+\n+            if (name && typeof(name) === 'function' && name.name == 'formatter') {\n+                /* This is a custom \"formatter\" function for a particular cell,\n+                * which may side-step regular HTML escaping, and inject malicious code into the DOM.\n+                *\n+                * Here we have access to the 'args' supplied to the custom 'formatter' function,\n+                * which are in the order:\n+                * args = [value, row, index, field]\n+                *\n+                * 'row' is the one we are interested in\n+                */\n+\n+                var row = Object.assign({}, args[1]);\n+\n+                args_list.push(sanitizeData(row));\n+            } else {\n+                args_list.push(args[1]);\n+            }\n+\n+            for (var ii = 2; ii < args.length; ii++) {\n+                args_list.push(args[ii]);\n+            }\n+        }\n+\n+        var value = $.fn.bootstrapTable.utils._calculateObjectValue(self, name, args_list, defaultValue);\n+\n+        return value;\n+    };\n+\n })(jQuery);\n \n $.extend($.fn.treegrid.defaults, {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 8,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "412bba50babdf20ac4008e1896f5e7a438ef8505",
            "date": "2025-01-14T02:42:03Z",
            "author_login": "SchrodingersGat"
          },
          {
            "sha": "46f6450ee156b0c14e5d14d3772a83f084f41e2b",
            "date": "2025-01-13T23:38:48Z",
            "author_login": "SchrodingersGat"
          },
          {
            "sha": "ea1b2e3079dc0545fcd9ade15d1636c396398580",
            "date": "2025-01-13T20:05:21Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "dd5aa5f4e43c8890526328fe3f09b54c17ae154f",
            "date": "2025-01-13T03:31:03Z",
            "author_login": "SchrodingersGat"
          },
          {
            "sha": "b06b762895d976cdb634f7ddfa6b0411248601cf",
            "date": "2025-01-12T03:58:52Z",
            "author_login": "SchrodingersGat"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 8.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-434",
    "description": "Unrestricted Upload of File with Dangerous Type in GitHub repository inventree/inventree prior to 0.7.2.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-17T13:15:13.040",
    "last_modified": "2024-11-21T07:00:20.183",
    "fix_date": "2022-06-15T10:43:43Z"
  },
  "references": [
    {
      "url": "https://github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a0e5c68e-0f75-499b-bd7b-d935fb8c0cd1",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/inventree/inventree/commit/26bf51c20a1c9b3130ac5dd2e17649bece5ff84f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/a0e5c68e-0f75-499b-bd7b-d935fb8c0cd1",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.456699",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "InvenTree",
    "owner": "inventree",
    "created_at": "2017-03-23T01:44:10Z",
    "updated_at": "2025-01-14T11:58:48Z",
    "pushed_at": "2025-01-14T02:46:44Z",
    "size": 196475,
    "stars": 4595,
    "forks": 822,
    "open_issues": 228,
    "watchers": 4595,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 4038541,
      "TypeScript": 1595359,
      "HTML": 51404,
      "Shell": 37446,
      "CSS": 17146,
      "Dockerfile": 6143,
      "JavaScript": 5474,
      "Procfile": 426
    },
    "commit_activity": {
      "total_commits_last_year": 1500,
      "avg_commits_per_week": 28.846153846153847,
      "days_active_last_year": 308
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T20:44:58.684843"
  }
}