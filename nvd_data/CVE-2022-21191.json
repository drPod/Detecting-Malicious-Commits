{
  "cve_id": "CVE-2022-21191",
  "github_data": {
    "repository": "rosen-vladimirov/global-modules-path",
    "fix_commit": "edbdaff077ea0cf295b1469923c06bbccad3c180",
    "related_commits": [
      "edbdaff077ea0cf295b1469923c06bbccad3c180",
      "edbdaff077ea0cf295b1469923c06bbccad3c180"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "edbdaff077ea0cf295b1469923c06bbccad3c180",
      "commit_date": "2023-01-08T17:05:12Z",
      "author": {
        "login": "rosen-vladimirov",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "fix: do not allow command injection",
        "length": 242,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 122,
        "additions": 71,
        "deletions": 51
      },
      "files": [
        {
          "filename": "lib/index.js",
          "status": "modified",
          "additions": 23,
          "deletions": 4,
          "patch": "@@ -25,9 +25,26 @@ const getNpmExecutable = (platform) => {\n \treturn npmExecutableName;\n };\n \n+const spawnSyncWrapper = (command, commandArgs) => {\n+\tconst result = childProcess.spawnSync(command, commandArgs);\n+\tif (!result) {\n+\t\treturn null;\n+\t}\n+\n+\tif (result.error) {\n+\t\tthrow result.error;\n+\t}\n+\n+\tif (result.stdout) {\n+\t\treturn result.stdout.toString().trim();\n+\t}\n+\n+\treturn null;\n+};\n+\n const getNpmPrefix = (pathToNpm) => {\n \ttry {\n-\t\tconst npmPrefixStdout = childProcess.execSync(`${pathToNpm} config get prefix`);\n+\t\tconst npmPrefixStdout = spawnSyncWrapper(pathToNpm, [\"config\", \"get\", \"prefix\"]);\n \t\treturn npmPrefixStdout && npmPrefixStdout.toString().trim();\n \t} catch (err) {\n \t\tconsole.error(err.message);\n@@ -49,6 +66,7 @@ const getPathFromNpmConfig = (platform, packageName) => {\n \n \t\tconst packagePath = path.join(nodeModulesPath, packageName);\n \t\tconst verifiedPath = getVerifiedPath(packagePath, packageName);\n+\n \t\tif (verifiedPath) {\n \t\t\treturn verifiedPath;\n \t\t}\n@@ -107,7 +125,8 @@ const getVerifiedPath = (suggestedPath, packageName) => {\n \n const getPathFromExecutableNameOnWindows = (packageName, executableName) => {\n \ttry {\n-\t\tconst whereResult = (childProcess.execSync(`where ${executableName}`) || \"\").toString().split(\"\\n\");\n+\t\tconst whereResult = (spawnSyncWrapper(\"where\", executableName) || \"\").split(\"\\n\");\n+\n \t\tfor (const line of whereResult) {\n \t\t\tconst pathToExecutable = line && line.trim();\n \n@@ -145,8 +164,8 @@ const getPathFromExecutableNameOnNonWindows = (packageName, executableName) => {\n \n \t\t// whichResult: /usr/local/nvm/versions/node/v4.2.1/bin/mobile-cli-lib\n \t\t// lsLResult: lrwxrwxrwx 1 rvladimirov rvladimirov 52 Oct 20 14:51 /usr/local/nvm/versions/node/v4.2.1/bin/mobile-cli-lib -> ../lib/node_modules/mobile-cli-lib/bin/common-lib.js\n-\t\tconst whichResult = (childProcess.execSync(`which ${executableName}`) || \"\").toString().trim(),\n-\t\t\tlsLResult = (childProcess.execSync(`ls -l \\`which ${executableName}\\``) || \"\").toString().trim();\n+\t\tconst whichResult = spawnSyncWrapper(\"which\", [executableName]);\n+\t\tconst lsLResult = spawnSyncWrapper(\"ls\", [\"-l\", whichResult]);\n \n \t\tif (whichResult && lsLResult) {\n \t\t\tconst regex = new RegExp(`${whichResult}\\\\s+->\\\\s+(.*?)$`),"
        },
        {
          "filename": "test/index.js",
          "status": "modified",
          "additions": 48,
          "deletions": 47,
          "patch": "@@ -12,7 +12,7 @@ let processWrapper = require(\"../lib/process-wrapper\");\n let fs = require(\"fs\"),\n \tchildProcess = require(\"child_process\");\n \n-const originalExecSync = childProcess.execSync;\n+const originalspawnSync = childProcess.spawnSync;\n const originalConsoleError = console.error;\n const originalExistsSync = fs.existsSync;\n const originalReadFileSync = fs.readFileSync;\n@@ -21,7 +21,7 @@ describe(\"getPath\", () => {\n \n \tafterEach(() => {\n \t\tprocessWrapper.getProcessPlatform = () => process.platform;\n-\t\tchildProcess.execSync = originalExecSync;\n+\t\tchildProcess.spawnSync = originalspawnSync;\n \t\tconsole.error = originalConsoleError;\n \t\tfs.existsSync = originalExistsSync;\n \t\tfs.readFileSync = originalReadFileSync;\n@@ -41,9 +41,9 @@ describe(\"getPath\", () => {\n \t\t\t\t\tconst expectedErrorMessage = \"npm throws\";\n \t\t\t\t\tlet errors = [];\n \t\t\t\t\tconsole.error = (message) => errors.push(message);\n-\t\t\t\t\tchildProcess.execSync = (command) => {\n-\t\t\t\t\t\tif (command.indexOf(\"get prefix\") !== -1) {\n-\t\t\t\t\t\t\tthrow new Error(expectedErrorMessage);\n+\t\t\t\t\tchildProcess.spawnSync = (command, commandArgs) => {\n+\t\t\t\t\t\tif (commandArgs.indexOf(\"get\") !== -1 && commandArgs.indexOf(\"prefix\") !== -1) {\n+\t\t\t\t\t\t\treturn { error: new Error(expectedErrorMessage) };\n \t\t\t\t\t\t}\n \t\t\t\t\t};\n \n@@ -59,7 +59,7 @@ describe(\"getPath\", () => {\n \n \t\t\t\t\tfs.existsSync = () => false;\n \n-\t\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\t\tchildProcess.spawnSync = (command) => {\n \t\t\t\t\t\tif (command.indexOf(\"get prefix\") !== -1) {\n \t\t\t\t\t\t\treturn npmConfigPrefix;\n \t\t\t\t\t\t}\n@@ -75,7 +75,7 @@ describe(\"getPath\", () => {\n \t\t\t\t\tconst packageName = \"test1\",\n \t\t\t\t\t\texecutableName = \"test1.js\";\n \n-\t\t\t\t\tchildProcess.execSync = () => null;\n+\t\t\t\t\tchildProcess.spawnSync = () => null;\n \n \t\t\t\t\tconst result = index.getPath(packageName, executableName);\n \t\t\t\t\tassert.deepEqual(result, null);\n@@ -87,9 +87,10 @@ describe(\"getPath\", () => {\n \tconst getCorrectResultFromNpmPrefix = (npmConfigPrefix, packageName) => {\n \t\tfs.existsSync = () => true;\n \t\tfs.readFileSync = () => JSON.stringify({ name: packageName });\n-\t\tchildProcess.execSync = (command) => {\n-\t\t\tif (command.indexOf(\"get prefix\") !== -1) {\n-\t\t\t\treturn npmConfigPrefix;\n+\t\tfs.realpathSync = (p) => p; \n+\t\tchildProcess.spawnSync = (command, commandArgs) => {\n+\t\t\tif (commandArgs.indexOf(\"get\") !== -1 && commandArgs.indexOf(\"prefix\") !== -1) {\n+\t\t\t\treturn { stdout: npmConfigPrefix };\n \t\t\t}\n \t\t};\n \n@@ -105,8 +106,8 @@ describe(\"getPath\", () => {\n \t\tdescribe(\"works correctly when npm prefix is used\", () => {\n \t\t\tit(\"uses npm.cmd for npm executable\", () => {\n \t\t\t\tlet commands = [];\n-\t\t\t\tchildProcess.execSync = (command) => {\n-\t\t\t\t\tcommands.push(command);\n+\t\t\t\tchildProcess.spawnSync = (command, commandArgs) => {\n+\t\t\t\t\tcommands.push(`${command} ${(commandArgs || []).join(\" \")}`);\n \t\t\t\t};\n \n \t\t\t\tindex.getPath(\"test1\");\n@@ -141,9 +142,9 @@ describe(\"getPath\", () => {\n \n \t\t\t\tfs.existsSync = () => true;\n \n-\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\tchildProcess.spawnSync = (command) => {\n \t\t\t\t\tif (command.indexOf(\"where\") !== -1) {\n-\t\t\t\t\t\tthrow new Error(expectedErrorMessage);\n+\t\t\t\t\t\treturn { error: new Error(expectedErrorMessage) };\n \t\t\t\t\t}\n \n \t\t\t\t\treturn null;\n@@ -163,9 +164,9 @@ describe(\"getPath\", () => {\n \n \t\t\t\tfs.existsSync = () => true;\n \n-\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\tchildProcess.spawnSync = (command) => {\n \t\t\t\t\tif (command.indexOf(\"where\") !== -1) {\n-\t\t\t\t\t\treturn whereResult;\n+\t\t\t\t\t\treturn { stdout: whereResult };\n \t\t\t\t\t}\n \n \t\t\t\t\treturn null;\n@@ -194,9 +195,9 @@ describe(\"getPath\", () => {\n \n \t\t\t\tfs.existsSync = (pathToCheck) => pathToCheck !== path.join(executableDirName, \"node_modules\", packageName);\n \n-\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\tchildProcess.spawnSync = (command) => {\n \t\t\t\t\tif (command.indexOf(\"where\") !== -1) {\n-\t\t\t\t\t\treturn whereResult;\n+\t\t\t\t\t\treturn { stdout: whereResult };\n \t\t\t\t\t}\n \n \t\t\t\t\treturn null;\n@@ -233,9 +234,9 @@ describe(\"getPath\", () => {\n \n \t\t\t\tfs.existsSync = (pathToCheck) => pathToCheck !== path.join(executableDirName, \"node_modules\", packageName);\n \n-\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\tchildProcess.spawnSync = (command) => {\n \t\t\t\t\tif (command.indexOf(\"where\") !== -1) {\n-\t\t\t\t\t\treturn whereResult;\n+\t\t\t\t\t\treturn { stdout: whereResult };\n \t\t\t\t\t}\n \n \t\t\t\t\treturn null;\n@@ -284,9 +285,9 @@ describe(\"getPath\", () => {\n \t\t\t\t\treturn \"\";\n \t\t\t\t};\n \n-\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\tchildProcess.spawnSync = (command) => {\n \t\t\t\t\tif (command.indexOf(\"where\") !== -1) {\n-\t\t\t\t\t\treturn whereResult;\n+\t\t\t\t\t\treturn { stdout: whereResult };\n \t\t\t\t\t}\n \n \t\t\t\t\treturn null;\n@@ -316,9 +317,9 @@ describe(\"getPath\", () => {\n \t\t\t\t\treturn \"\";\n \t\t\t\t};\n \n-\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\tchildProcess.spawnSync = (command) => {\n \t\t\t\t\tif (command.indexOf(\"where\") !== -1) {\n-\t\t\t\t\t\treturn whereResult;\n+\t\t\t\t\t\treturn { stdout: whereResult };\n \t\t\t\t\t}\n \n \t\t\t\t\treturn null;\n@@ -354,9 +355,9 @@ describe(\"getPath\", () => {\n \t\t\t\t\treturn \"\";\n \t\t\t\t};\n \n-\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\tchildProcess.spawnSync = (command) => {\n \t\t\t\t\tif (command.indexOf(\"where\") !== -1) {\n-\t\t\t\t\t\treturn whereResult;\n+\t\t\t\t\t\treturn { stdout: whereResult };\n \t\t\t\t\t}\n \n \t\t\t\t\treturn null;\n@@ -380,8 +381,8 @@ describe(\"getPath\", () => {\n \n \t\t\tit(\"uses npm for npm executable\", () => {\n \t\t\t\tlet commands = [];\n-\t\t\t\tchildProcess.execSync = (command) => {\n-\t\t\t\t\tcommands.push(command);\n+\t\t\t\tchildProcess.spawnSync = (command, commandArgs) => {\n+\t\t\t\t\tcommands.push(`${command} ${(commandArgs || []).join(\" \")}`);\n \t\t\t\t};\n \n \t\t\t\tindex.getPath(\"test1\");\n@@ -416,7 +417,7 @@ describe(\"getPath\", () => {\n \n \t\t\t\t\tfs.existsSync = () => true;\n \n-\t\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\t\tchildProcess.spawnSync = (command) => {\n \t\t\t\t\t\tif (command.indexOf(\"which\") !== -1) {\n \t\t\t\t\t\t\tthrow new Error(expectedErrorMessage);\n \t\t\t\t\t\t}\n@@ -440,9 +441,9 @@ describe(\"getPath\", () => {\n \n \t\t\t\t\tfs.existsSync = () => true;\n \n-\t\t\t\t\tchildProcess.execSync = (command) => {\n-\t\t\t\t\t\tif (command.indexOf(\"ls -l\") !== -1) {\n-\t\t\t\t\t\t\tthrow new Error(expectedErrorMessage);\n+\t\t\t\t\tchildProcess.spawnSync = (command) => {\n+\t\t\t\t\t\tif (command === \"ls\") {\n+\t\t\t\t\t\t\treturn { error: new Error(expectedErrorMessage) };\n \t\t\t\t\t\t}\n \n \t\t\t\t\t\treturn null;\n@@ -479,14 +480,14 @@ describe(\"getPath\", () => {\n \t\t\t\t\t\t\treturn filePath;\n \t\t\t\t\t\t};\n \n-\t\t\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\t\t\tchildProcess.spawnSync = (command) => {\n \n-\t\t\t\t\t\t\tif (command.indexOf(\"ls -l\") !== -1) {\n-\t\t\t\t\t\t\t\treturn lsLResult;\n+\t\t\t\t\t\t\tif (command === \"ls\") {\n+\t\t\t\t\t\t\t\treturn { stdout: lsLResult };\n \t\t\t\t\t\t\t}\n \n-\t\t\t\t\t\t\tif (command.indexOf(\"which\") !== -1) {\n-\t\t\t\t\t\t\t\treturn whichResult;\n+\t\t\t\t\t\t\tif (command == \"which\") {\n+\t\t\t\t\t\t\t\treturn { stdout: whichResult };\n \t\t\t\t\t\t\t}\n \n \t\t\t\t\t\t\treturn null;\n@@ -544,14 +545,14 @@ describe(\"getPath\", () => {\n \t\t\t\t\t\t\treturn filePath.indexOf(\"package.json\") !== -1;\n \t\t\t\t\t\t};\n \n-\t\t\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\t\t\tchildProcess.spawnSync = (command) => {\n \n-\t\t\t\t\t\t\tif (command.indexOf(\"ls -l\") !== -1) {\n-\t\t\t\t\t\t\t\treturn lsLResult;\n+\t\t\t\t\t\t\tif (command === \"ls\") {\n+\t\t\t\t\t\t\t\treturn { stdout: lsLResult };\n \t\t\t\t\t\t\t}\n \n-\t\t\t\t\t\t\tif (command.indexOf(\"which\") !== -1) {\n-\t\t\t\t\t\t\t\treturn whichResult;\n+\t\t\t\t\t\t\tif (command == \"which\") {\n+\t\t\t\t\t\t\t\treturn { stdout: whichResult };\n \t\t\t\t\t\t\t}\n \n \t\t\t\t\t\t\treturn null;\n@@ -582,14 +583,14 @@ describe(\"getPath\", () => {\n \t\t\t\t\t\t\treturn filePath.indexOf(\"package.json\") !== -1;\n \t\t\t\t\t\t};\n \n-\t\t\t\t\t\tchildProcess.execSync = (command) => {\n+\t\t\t\t\t\tchildProcess.spawnSync = (command) => {\n \n-\t\t\t\t\t\t\tif (command.indexOf(\"ls -l\") !== -1) {\n-\t\t\t\t\t\t\t\treturn lsLResult;\n+\t\t\t\t\t\t\tif (command === \"ls\") {\n+\t\t\t\t\t\t\t\treturn { stdout: lsLResult };\n \t\t\t\t\t\t\t}\n \n-\t\t\t\t\t\t\tif (command.indexOf(\"which\") !== -1) {\n-\t\t\t\t\t\t\t\treturn whichResult;\n+\t\t\t\t\t\t\tif (command == \"which\") {\n+\t\t\t\t\t\t\t\treturn { stdout: whichResult };\n \t\t\t\t\t\t\t}\n \n \t\t\t\t\t\t\treturn null;"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "14ebe026feb5e3f22713c000be03537dc0a55613",
            "date": "2023-01-08T18:10:38Z",
            "author_login": "rosen-vladimirov"
          },
          {
            "sha": "7e039aeb85053867bfc396bb1db754b8e6bf73a0",
            "date": "2023-01-08T18:02:09Z",
            "author_login": "rosen-vladimirov"
          },
          {
            "sha": "1037fc03332633b4113e7fae9bf177c0581df316",
            "date": "2023-01-08T17:25:31Z",
            "author_login": "rosen-vladimirov"
          },
          {
            "sha": "8ed8d5d7da1ef0de612e2c8c32ea4cb7a5ade7b6",
            "date": "2023-01-08T17:20:49Z",
            "author_login": "rosen-vladimirov"
          },
          {
            "sha": "edbdaff077ea0cf295b1469923c06bbccad3c180",
            "date": "2023-01-08T17:05:12Z",
            "author_login": "rosen-vladimirov"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-78",
    "description": "Versions of the package global-modules-path before 3.0.0 are vulnerable to Command Injection due to missing input sanitization or other checks and sandboxes being employed to the getPath  function.\r\r",
    "attack_vector": "LOCAL",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2023-01-13T05:15:19.150",
    "last_modified": "2024-11-21T06:44:04.130",
    "fix_date": "2023-01-08T17:05:12Z"
  },
  "references": [
    {
      "url": "https://github.com/lorenzomigliorero/npm-node-utils/blob/b55dd81c597db657c9751332bb2242403fd3e26b/index.js%23L186",
      "source": "report@snyk.io",
      "tags": [
        "Broken Link",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rosen-vladimirov/global-modules-path/commit/edbdaff077ea0cf295b1469923c06bbccad3c180",
      "source": "report@snyk.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rosen-vladimirov/global-modules-path/releases/tag/v3.0.0",
      "source": "report@snyk.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-GLOBALMODULESPATH-3167973",
      "source": "report@snyk.io",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lorenzomigliorero/npm-node-utils/blob/b55dd81c597db657c9751332bb2242403fd3e26b/index.js%23L186",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Broken Link",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rosen-vladimirov/global-modules-path/commit/edbdaff077ea0cf295b1469923c06bbccad3c180",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/rosen-vladimirov/global-modules-path/releases/tag/v3.0.0",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.snyk.io/vuln/SNYK-JS-GLOBALMODULESPATH-3167973",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:04:43.548771",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "global-modules-path",
    "owner": "rosen-vladimirov",
    "created_at": "2016-10-24T05:53:41Z",
    "updated_at": "2023-01-04T18:46:18Z",
    "pushed_at": "2023-07-20T04:07:58Z",
    "size": 133,
    "stars": 1,
    "forks": 2,
    "open_issues": 2,
    "watchers": 1,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "JavaScript": 29965,
      "Shell": 210,
      "Batchfile": 202
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-26T08:00:14.425999"
  }
}