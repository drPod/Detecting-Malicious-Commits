{
  "cve_id": "CVE-2022-21654",
  "github_data": {
    "repository": "envoyproxy/envoy",
    "fix_commit": "e9f936d85dc1edc34fabd0a1725ec180f2316353",
    "related_commits": [
      "e9f936d85dc1edc34fabd0a1725ec180f2316353",
      "e9f936d85dc1edc34fabd0a1725ec180f2316353"
    ],
    "patch_url": "https://github.com/envoyproxy/envoy/commit/e9f936d85dc1edc34fabd0a1725ec180f2316353.patch",
    "fix_commit_details": {
      "sha": "e9f936d85dc1edc34fabd0a1725ec180f2316353",
      "commit_date": "2022-02-01T19:57:15Z",
      "author": {
        "login": "yanavlasov",
        "type": "User",
        "stats": {
          "total_commits": 353,
          "average_weekly_commits": 0.800453514739229,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 163
        }
      },
      "commit_message": {
        "title": "CVE-2022-21654",
        "length": 131,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 197,
        "additions": 196,
        "deletions": 1
      },
      "files": [
        {
          "filename": "envoy/ssl/certificate_validation_context_config.h",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -15,6 +15,11 @@\n namespace Envoy {\n namespace Ssl {\n \n+// SECURITY NOTE\n+//\n+// When adding or changing this interface, it is likely that a change is needed to\n+// `DefaultCertValidator::updateDigestForSessionId` in\n+// `source/extensions/transport_sockets/tls/cert_validator/default_validator.cc`.\n class CertificateValidationContextConfig {\n public:\n   virtual ~CertificateValidationContextConfig() = default;"
        },
        {
          "filename": "source/extensions/transport_sockets/tls/cert_validator/cert_validator.h",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -62,7 +62,10 @@ class CertValidator {\n                                     bool handshaker_provides_certificates) PURE;\n \n   /**\n-   * Called when calculation hash for session context ids\n+   * Called when calculation hash for session context ids. This hash MUST include all\n+   * configuration used to validate a peer certificate, so that if this configuration\n+   * is changed, sessions cannot be re-used and must be re-negotiated and re-validated\n+   * using the new settings.\n    *\n    * @param md the store context\n    * @param hash_buffer the buffer used for digest calculation"
        },
        {
          "filename": "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "status": "modified",
          "additions": 29,
          "deletions": 0,
          "patch": "@@ -378,6 +378,35 @@ void DefaultCertValidator::updateDigestForSessionId(bssl::ScopedEVP_MD_CTX& md,\n                               sizeof(std::remove_reference<decltype(hash)>::type::value_type));\n     RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));\n   }\n+\n+  rc = EVP_DigestUpdate(md.get(), &verify_trusted_ca_, sizeof(verify_trusted_ca_));\n+  RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));\n+\n+  if (config_ != nullptr) {\n+    for (const auto& matcher : config_->subjectAltNameMatchers()) {\n+      size_t hash = MessageUtil::hash(matcher);\n+      rc = EVP_DigestUpdate(md.get(), &hash, sizeof(hash));\n+      RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));\n+    }\n+\n+    const std::string& crl = config_->certificateRevocationList();\n+    if (!crl.empty()) {\n+      rc = EVP_DigestUpdate(md.get(), crl.data(), crl.length());\n+      RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));\n+    }\n+\n+    bool allow_expired = config_->allowExpiredCertificate();\n+    rc = EVP_DigestUpdate(md.get(), &allow_expired, sizeof(allow_expired));\n+    RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));\n+\n+    auto trust_chain_verification = config_->trustChainVerification();\n+    rc = EVP_DigestUpdate(md.get(), &trust_chain_verification, sizeof(trust_chain_verification));\n+    RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));\n+\n+    auto only_leaf_crl = config_->onlyVerifyLeafCertificateCrl();\n+    rc = EVP_DigestUpdate(md.get(), &only_leaf_crl, sizeof(only_leaf_crl));\n+    RELEASE_ASSERT(rc == 1, Utility::getLastCryptoError().value_or(\"\"));\n+  }\n }\n \n void DefaultCertValidator::addClientValidationContext(SSL_CTX* ctx, bool require_client_cert) {"
        },
        {
          "filename": "test/extensions/transport_sockets/tls/ssl_socket_test.cc",
          "status": "modified",
          "additions": 158,
          "deletions": 0,
          "patch": "@@ -3373,6 +3373,164 @@ TEST_P(SslSocketTest, TicketSessionResumptionDifferentServerNames) {\n                               client_ctx_yaml, false, GetParam());\n }\n \n+// Sessions cannot be resumed even though the server certificates are the same,\n+// because of the different `verify_certificate_hash` settings.\n+TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertHash) {\n+  const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(\n+  session_ticket_keys:\n+    keys:\n+      filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"\n+  common_tls_context:\n+    tls_certificates:\n+      certificate_chain:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"\n+      private_key:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"\n+    validation_context:\n+      trusted_ca:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n+      verify_certificate_hash:\n+        - \")EOF\",\n+                                                    TEST_SAN_URI_CERT_256_HASH, \"\\\"\");\n+\n+  const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(\n+  session_ticket_keys:\n+    keys:\n+      filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"\n+  common_tls_context:\n+    tls_certificates:\n+      certificate_chain:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"\n+      private_key:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"\n+    validation_context:\n+      trusted_ca:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n+      verify_certificate_hash:\n+        - \"0000000000000000000000000000000000000000000000000000000000000000\"\n+        - \")EOF\",\n+                                                    TEST_SAN_URI_CERT_256_HASH, \"\\\"\");\n+\n+  const std::string client_ctx_yaml = R\"EOF(\n+  common_tls_context:\n+    tls_certificates:\n+      certificate_chain:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"\n+      private_key:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"\n+)EOF\";\n+\n+  testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,\n+                              GetParam());\n+  testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,\n+                              GetParam());\n+}\n+\n+// Sessions cannot be resumed even though the server certificates are the same,\n+// because of the different `verify_certificate_spki` settings.\n+TEST_P(SslSocketTest, TicketSessionResumptionDifferentVerifyCertSpki) {\n+  const std::string server_ctx_yaml1 = absl::StrCat(R\"EOF(\n+  session_ticket_keys:\n+    keys:\n+      filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"\n+  common_tls_context:\n+    tls_certificates:\n+      certificate_chain:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"\n+      private_key:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"\n+    validation_context:\n+      trusted_ca:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n+      verify_certificate_spki:\n+        - \")EOF\",\n+                                                    TEST_SAN_URI_CERT_SPKI, \"\\\"\");\n+\n+  const std::string server_ctx_yaml2 = absl::StrCat(R\"EOF(\n+  session_ticket_keys:\n+    keys:\n+      filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"\n+  common_tls_context:\n+    tls_certificates:\n+      certificate_chain:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"\n+      private_key:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"\n+    validation_context:\n+      trusted_ca:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n+      verify_certificate_spki:\n+        - \"NvqYIYSbgK2vCJpQhObf77vv+bQWtc5ek5RIOwPiC9A=\"\n+        - \")EOF\",\n+                                                    TEST_SAN_URI_CERT_SPKI, \"\\\"\");\n+\n+  const std::string client_ctx_yaml = R\"EOF(\n+  common_tls_context:\n+    tls_certificates:\n+      certificate_chain:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"\n+      private_key:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"\n+)EOF\";\n+\n+  testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,\n+                              GetParam());\n+  testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,\n+                              GetParam());\n+}\n+\n+// Sessions cannot be resumed even though the server certificates are the same,\n+// because of the different `match_subject_alt_names` settings.\n+TEST_P(SslSocketTest, TicketSessionResumptionDifferentMatchSAN) {\n+  const std::string server_ctx_yaml1 = R\"EOF(\n+  session_ticket_keys:\n+    keys:\n+      filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"\n+  common_tls_context:\n+    tls_certificates:\n+      certificate_chain:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"\n+      private_key:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"\n+    validation_context:\n+      trusted_ca:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n+      match_subject_alt_names:\n+        - exact: \"spiffe://lyft.com/test-team\"\n+)EOF\";\n+\n+  const std::string server_ctx_yaml2 = R\"EOF(\n+  session_ticket_keys:\n+    keys:\n+      filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ticket_key_a\"\n+  common_tls_context:\n+    tls_certificates:\n+      certificate_chain:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_cert.pem\"\n+      private_key:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/unittest_key.pem\"\n+    validation_context:\n+      trusted_ca:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n+      match_subject_alt_names:\n+        - prefix: \"spiffe://lyft.com/test-team\"\n+\")EOF\";\n+\n+  const std::string client_ctx_yaml = R\"EOF(\n+  common_tls_context:\n+    tls_certificates:\n+      certificate_chain:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"\n+      private_key:\n+        filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem\"\n+)EOF\";\n+\n+  testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml1, {}, client_ctx_yaml, true,\n+                              GetParam());\n+  testTicketSessionResumption(server_ctx_yaml1, {}, server_ctx_yaml2, {}, client_ctx_yaml, false,\n+                              GetParam());\n+}\n+\n // Sessions can be resumed because the server certificates are different but the CN/SANs and\n // issuer are identical\n TEST_P(SslSocketTest, TicketSessionResumptionDifferentServerCert) {"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "03cb8d59f80a2a75d9e1289c909e5979a79ace91",
            "date": "2025-01-13T06:31:54Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3487b225f48717dd5a2babb5f921df4353633cee",
            "date": "2025-01-13T06:10:11Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "acdcfc6ac262ee4087a652532b93922550efb061",
            "date": "2025-01-10T07:01:57Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "02633ec5db8d6a3f24fa6752dff36b4fb5f0800e",
            "date": "2025-01-10T07:02:42Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "e62004f8710e90e255495ae44caab1a778f01b9e",
            "date": "2025-01-10T07:03:28Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-295",
    "description": "Envoy is an open source edge and service proxy, designed for cloud-native applications. Envoy's tls allows re-use when some cert validation settings have changed from their default configuration. The only workaround for this issue is to ensure that default tls settings are used. Users are advised to upgrade.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-02-22T23:15:11.103",
    "last_modified": "2024-11-21T06:45:09.843",
    "fix_date": "2022-02-01T19:57:15Z"
  },
  "references": [
    {
      "url": "https://github.com/envoyproxy/envoy/commit/e9f936d85dc1edc34fabd0a1725ec180f2316353",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-5j4x-g36v-m283",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/commit/e9f936d85dc1edc34fabd0a1725ec180f2316353",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-5j4x-g36v-m283",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.740549",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "envoy",
    "owner": "envoyproxy",
    "created_at": "2016-08-08T15:07:24Z",
    "updated_at": "2025-01-14T12:22:22Z",
    "pushed_at": "2025-01-14T05:36:17Z",
    "size": 240648,
    "stars": 25321,
    "forks": 4848,
    "open_issues": 1639,
    "watchers": 25321,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C++": 48293036,
      "Starlark": 3105942,
      "Java": 1320095,
      "Python": 605206,
      "Assembly": 327095,
      "Kotlin": 309606,
      "Swift": 250537,
      "Shell": 229801,
      "Go": 183281,
      "Rust": 107190,
      "JavaScript": 66339,
      "C": 61597,
      "Objective-C++": 55490,
      "Objective-C": 48840,
      "Jinja": 47798,
      "Smarty": 3528,
      "CSS": 2927,
      "HTML": 1522,
      "Emacs Lisp": 966,
      "Dockerfile": 960,
      "Thrift": 748,
      "PureBasic": 472,
      "Batchfile": 439,
      "Makefile": 303
    },
    "commit_activity": {
      "total_commits_last_year": 3286,
      "avg_commits_per_week": 63.19230769230769,
      "days_active_last_year": 303
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:55:59.245540"
  }
}