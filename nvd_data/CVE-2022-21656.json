{
  "cve_id": "CVE-2022-21656",
  "github_data": {
    "repository": "envoyproxy/envoy",
    "fix_commit": "bb95af848c939cfe5b5ee33c5b1770558077e64e",
    "related_commits": [
      "bb95af848c939cfe5b5ee33c5b1770558077e64e",
      "bb95af848c939cfe5b5ee33c5b1770558077e64e"
    ],
    "patch_url": "https://github.com/envoyproxy/envoy/commit/bb95af848c939cfe5b5ee33c5b1770558077e64e.patch",
    "fix_commit_details": {
      "sha": "bb95af848c939cfe5b5ee33c5b1770558077e64e",
      "commit_date": "2021-11-24T14:28:02Z",
      "author": {
        "login": "pradeepcrao",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Specify type for matching Subject Alternative Name. (#18628)",
        "length": 109,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 838,
        "additions": 666,
        "deletions": 172
      },
      "files": [
        {
          "filename": "api/envoy/extensions/transport_sockets/tls/v3/common.proto",
          "status": "modified",
          "additions": 35,
          "deletions": 6,
          "patch": "@@ -9,6 +9,7 @@ import \"envoy/type/matcher/v3/string.proto\";\n import \"google/protobuf/any.proto\";\n import \"google/protobuf/wrappers.proto\";\n \n+import \"envoy/annotations/deprecation.proto\";\n import \"udpa/annotations/migrate.proto\";\n import \"udpa/annotations/sensitive.proto\";\n import \"udpa/annotations/status.proto\";\n@@ -268,7 +269,26 @@ message CertificateProviderPluginInstance {\n   string certificate_name = 2;\n }\n \n-// [#next-free-field: 15]\n+// Matcher for subject alternative names, to match both type and value of the SAN.\n+message SubjectAltNameMatcher {\n+  // Indicates the choice of GeneralName as defined in section 4.2.1.5 of RFC 5280 to match\n+  // against.\n+  enum SanType {\n+    SAN_TYPE_UNSPECIFIED = 0;\n+    EMAIL = 1;\n+    DNS = 2;\n+    URI = 3;\n+    IP_ADDRESS = 4;\n+  }\n+\n+  // Specification of type of SAN. Note that the default enum value is an invalid choice.\n+  SanType san_type = 1 [(validate.rules).enum = {defined_only: true not_in: 0}];\n+\n+  // Matcher for SAN value.\n+  type.matcher.v3.StringMatcher matcher = 2 [(validate.rules).message = {required: true}];\n+}\n+\n+// [#next-free-field: 16]\n message CertificateValidationContext {\n   option (udpa.annotations.versioning).previous_message_type =\n       \"envoy.api.v2.auth.CertificateValidationContext\";\n@@ -298,8 +318,8 @@ message CertificateValidationContext {\n   // <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.verify_certificate_spki>`,\n   // :ref:`verify_certificate_hash\n   // <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.verify_certificate_hash>`, or\n-  // :ref:`match_subject_alt_names\n-  // <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_subject_alt_names>`) is also\n+  // :ref:`match_typed_subject_alt_names\n+  // <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_typed_subject_alt_names>`) is also\n   // specified.\n   //\n   // It can optionally contain certificate revocation lists, in which case Envoy will verify\n@@ -406,6 +426,8 @@ message CertificateValidationContext {\n \n   // An optional list of Subject Alternative name matchers. If specified, Envoy will verify that the\n   // Subject Alternative Name of the presented certificate matches one of the specified matchers.\n+  // The matching uses \"any\" semantics, that is to say, the SAN is verified if at least one matcher is\n+  // matched.\n   //\n   // When a certificate has wildcard DNS SAN entries, to match a specific client, it should be\n   // configured with exact match type in the :ref:`string matcher <envoy_v3_api_msg_type.matcher.v3.StringMatcher>`.\n@@ -414,15 +436,22 @@ message CertificateValidationContext {\n   //\n   // .. code-block:: yaml\n   //\n-  //  match_subject_alt_names:\n-  //    exact: \"api.example.com\"\n+  //  match_typed_subject_alt_names:\n+  //  - san_type: DNS\n+  //    matcher:\n+  //      exact: \"api.example.com\"\n   //\n   // .. attention::\n   //\n   //   Subject Alternative Names are easily spoofable and verifying only them is insecure,\n   //   therefore this option must be used together with :ref:`trusted_ca\n   //   <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.trusted_ca>`.\n-  repeated type.matcher.v3.StringMatcher match_subject_alt_names = 9;\n+  repeated SubjectAltNameMatcher match_typed_subject_alt_names = 15;\n+\n+  // This field is deprecated in favor of ref:`match_typed_subject_alt_names\n+  // <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_typed_subject_alt_names>`\n+  repeated type.matcher.v3.StringMatcher match_subject_alt_names = 9\n+      [deprecated = true, (envoy.annotations.deprecated_at_minor_version) = \"3.0\"];\n \n   // [#not-implemented-hide:] Must present signed certificate time-stamp.\n   google.protobuf.BoolValue require_signed_certificate_timestamp = 6;"
        },
        {
          "filename": "api/envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.proto",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -42,7 +42,7 @@ option (udpa.annotations.file_status).package_version_status = ACTIVE;\n // Note that SPIFFE validator inherits and uses the following options from :ref:`CertificateValidationContext <envoy_v3_api_msg_extensions.transport_sockets.tls.v3.CertificateValidationContext>`.\n //\n // - :ref:`allow_expired_certificate <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.allow_expired_certificate>` to allow expired certificates.\n-// - :ref:`match_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_subject_alt_names>` to match **URI** SAN of certificates. Unlike the default validator, SPIFFE validator only matches **URI** SAN (which equals to SVID in SPIFFE terminology) and ignore other SAN types.\n+// - :ref:`match_typed_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_typed_subject_alt_names>` to match **URI** SAN of certificates. Unlike the default validator, SPIFFE validator only matches **URI** SAN (which equals to SVID in SPIFFE terminology) and ignore other SAN types.\n //\n message SPIFFECertValidatorConfig {\n   message TrustDomain {"
        },
        {
          "filename": "configs/envoy_double_proxy.template.yaml",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -149,8 +149,10 @@ static_resources:\n           validation_context:\n             trusted_ca:\n               filename: certs/cacert.pem\n-            match_subject_alt_names:\n-              exact: \"front-proxy.yourcompany.net\"\n+            match_typed_subject_alt_names:\n+            - san_type: DNS\n+              matcher:\n+                exact: \"front-proxy.yourcompany.net\"\n     typed_extension_protocol_options:\n       envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n         \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions\n@@ -188,8 +190,10 @@ static_resources:\n           validation_context:\n             trusted_ca:\n               filename: certs/cacert.pem\n-            match_subject_alt_names:\n-              exact: \"collector-grpc.lightstep.com\"\n+            match_typed_subject_alt_names:\n+            - san_type: DNS\n+              matcher:\n+                exact: \"collector-grpc.lightstep.com\"\n flags_path: \"/etc/envoy/flags\"\n stats_sinks:\n - name: envoy.stat_sinks.statsd"
        },
        {
          "filename": "configs/envoy_service_to_service.template.yaml",
          "status": "modified",
          "additions": 8,
          "deletions": 4,
          "patch": "@@ -350,8 +350,10 @@ static_resources:\n             trusted_ca:\n               filename: certs/cacert.pem\n             {% if host.get('verify_subject_alt_name', False) %}\n-            match_subject_alt_names:\n-              exact: \"{{host['verify_subject_alt_name'] }}\"\n+            match_typed_subject_alt_names:\n+            - san_type: DNS\n+              matcher:\n+                exact: \"{{host['verify_subject_alt_name'] }}\"\n             {% endif %}\n         {% if host.get('sni', False) %}\n         sni: \"{{ host['sni'] }}\"\n@@ -520,8 +522,10 @@ static_resources:\n           validation_context:\n             trusted_ca:\n               filename: certs/cacert.pem\n-            match_subject_alt_names:\n-              exact: \"collector-grpc.lightstep.com\"\n+            match_typed_subject_alt_names:\n+            - san_type: DNS\n+              matcher:\n+                exact: \"collector-grpc.lightstep.com\"\n   - name: cds_cluster\n     connect_timeout: 0.25s\n     type: STRICT_DNS"
        },
        {
          "filename": "docs/root/intro/arch_overview/security/_include/ssl.yaml",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -50,7 +50,9 @@ static_resources:\n             private_key: {\"filename\": \"certs/serverkey.pem\"}\n             ocsp_staple: {\"filename\": \"certs/server_ocsp_resp.der\"}\n           validation_context:\n-            match_subject_alt_names:\n-            - exact: \"foo\"\n+            match_typed_subject_alt_names:\n+            - san_type: DNS\n+              matcher:\n+                exact: \"foo\"\n             trusted_ca:\n               filename: /etc/ssl/certs/ca-certificates.crt"
        },
        {
          "filename": "docs/root/intro/arch_overview/security/ssl.rst",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -76,7 +76,7 @@ Example configuration\n \n */etc/ssl/certs/ca-certificates.crt* is the default path for the system CA bundle on Debian systems.\n :ref:`trusted_ca <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.trusted_ca>` along with\n-:ref:`match_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_subject_alt_names>`\n+:ref:`match_typed_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_typed_subject_alt_names>`\n makes Envoy verify the server identity of *127.0.0.1:1234* as \"foo\" in the same way as e.g. cURL\n does on standard Debian installations. Common paths for system CA bundles on Linux and BSD are:\n "
        },
        {
          "filename": "docs/root/start/quick-start/_include/envoy-demo-tls-client-auth.yaml",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -34,8 +34,10 @@ static_resources:\n             validation_context:\n               trusted_ca:\n                 filename: certs/cacert.pem\n-              match_subject_alt_names:\n-              - exact: proxy-postgres-frontend.example.com\n+              match_typed_subject_alt_names:\n+              - san_type: DNS\n+                matcher:\n+                  exact: proxy-postgres-frontend.example.com\n             tls_certificates:\n             - certificate_chain:\n                 filename: certs/servercert.pem"
        },
        {
          "filename": "docs/root/start/quick-start/_include/envoy-demo-tls-validation.yaml",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -48,5 +48,7 @@ static_resources:\n           validation_context:\n             trusted_ca:\n               filename: certs/cacert.pem\n-            match_subject_alt_names:\n-            - exact: proxy-postgres-backend.example.com\n+            match_typed_subject_alt_names:\n+            - san_type: DNS\n+              matcher:\n+                exact: proxy-postgres-backend.example.com"
        },
        {
          "filename": "docs/root/start/quick-start/securing.rst",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": "@@ -100,7 +100,7 @@ certificate is valid for.\n .. note::\n \n    If the \"Subject Alternative Names\" for a certificate are for a wildcard domain, eg ``*.example.com``,\n-   this is what you should use when matching with ``match_subject_alt_names``.\n+   this is what you should use when matching with ``match_typed_subject_alt_names``.\n \n .. note::\n \n@@ -122,20 +122,20 @@ and specify a mutually trusted certificate authority:\n    :language: yaml\n    :linenos:\n    :lineno-start: 27\n-   :lines: 27-39\n+   :lines: 27-41\n    :emphasize-lines: 6, 8-10\n    :caption: :download:`envoy-demo-tls-client-auth.yaml <_include/envoy-demo-tls-client-auth.yaml>`\n \n You can further restrict the authentication of connecting clients by specifying the allowed\n \"Subject Alternative Names\" in\n-:ref:`match_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_subject_alt_names>`,\n+:ref:`match_typed_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_typed_subject_alt_names>`,\n similar to validating upstream certificates :ref:`described above <start_quick_start_securing_validation>`.\n \n .. literalinclude:: _include/envoy-demo-tls-client-auth.yaml\n    :language: yaml\n    :linenos:\n    :lineno-start: 27\n-   :lines: 27-39\n+   :lines: 27-41\n    :emphasize-lines: 7, 11-12\n    :caption: :download:`envoy-demo-tls-client-auth.yaml <_include/envoy-demo-tls-client-auth.yaml>`\n \n@@ -154,8 +154,8 @@ When connecting to an upstream with client certificates you can set them as foll\n .. literalinclude:: _include/envoy-demo-tls-client-auth.yaml\n    :language: yaml\n    :linenos:\n-   :lineno-start: 44\n-   :lines: 44-68\n+   :lineno-start: 46\n+   :lines: 46-70\n    :emphasize-lines: 20-25\n    :caption: :download:`envoy-demo-tls-client-auth.yaml <_include/envoy-demo-tls-client-auth.yaml>`\n "
        },
        {
          "filename": "docs/root/version_history/current.rst",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -80,6 +80,7 @@ New Features\n * thrift_proxy: add host level success/error metrics where success is a reply of type success and error is any other response to a call.\n * thrift_proxy: support header flags.\n * thrift_proxy: support subset lb when using request or route metadata.\n+* tls: added support for :ref:`match_typed_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_typed_subject_alt_names>` for subject alternative names to enforce specifying the subject alternative name type for the matcher to prevent matching against an unintended type in the certificate.\n * tls: added support for only verifying the leaf CRL in the certificate chain with :ref:`only_verify_leaf_cert_crl <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.only_verify_leaf_cert_crl>`.\n * tls: support loading certificate chain and private key via :ref:`pkcs12 <envoy_v3_api_field_extensions.transport_sockets.tls.v3.TlsCertificate.pkcs12>`.\n * tls_inspector filter: added :ref:`enable_ja3_fingerprinting <envoy_v3_api_field_extensions.filters.listener.tls_inspector.v3.TlsInspector.enable_ja3_fingerprinting>` to create JA3 fingerprint hash from Client Hello message.\n@@ -95,4 +96,5 @@ Deprecated\n * bootstrap: :ref:`dns_resolution_config <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.dns_resolution_config>` is deprecated in favor of :ref:`typed_dns_resolver_config <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.typed_dns_resolver_config>`.\n * cluster: :ref:`dns_resolution_config <envoy_v3_api_field_config.cluster.v3.Cluster.dns_resolution_config>` is deprecated in favor of :ref:`typed_dns_resolver_config <envoy_v3_api_field_config.cluster.v3.Cluster.typed_dns_resolver_config>`.\n * dns_cache: :ref:`dns_resolution_config <envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.dns_resolution_config>` is deprecated in favor of :ref:`typed_dns_resolver_config <envoy_v3_api_field_extensions.common.dynamic_forward_proxy.v3.DnsCacheConfig.typed_dns_resolver_config>`.\n+* tls: :ref:`match_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_subject_alt_names>` has been deprecated in favor of the :ref:`match_typed_subject_alt_names <envoy_v3_api_field_extensions.transport_sockets.tls.v3.CertificateValidationContext.match_typed_subject_alt_names>`.\n * dns_filter: :ref:`dns_resolution_config <envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.dns_resolution_config>` is deprecated in favor of :ref:`typed_dns_resolver_config <envoy_v3_api_field_extensions.filters.udp.dns_filter.v3.DnsFilterConfig.ClientContextConfig.typed_dns_resolver_config>`."
        },
        {
          "filename": "envoy/ssl/certificate_validation_context_config.h",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -7,6 +7,7 @@\n #include \"envoy/api/api.h\"\n #include \"envoy/common/pure.h\"\n #include \"envoy/extensions/transport_sockets/tls/v3/cert.pb.h\"\n+#include \"envoy/extensions/transport_sockets/tls/v3/common.pb.h\"\n #include \"envoy/type/matcher/v3/string.pb.h\"\n \n #include \"absl/types/optional.h\"\n@@ -43,7 +44,7 @@ class CertificateValidationContextConfig {\n   /**\n    * @return The subject alt name matchers to be verified, if enabled.\n    */\n-  virtual const std::vector<envoy::type::matcher::v3::StringMatcher>&\n+  virtual const std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>&\n   subjectAltNameMatchers() const PURE;\n \n   /**"
        },
        {
          "filename": "examples/double-proxy/envoy-backend.yaml",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -26,8 +26,10 @@ static_resources:\n               private_key:\n                 filename: certs/serverkey.pem\n             validation_context:\n-              match_subject_alt_names:\n-              - exact: proxy-postgres-frontend.example.com\n+              match_typed_subject_alt_names:\n+              - san_type: DNS\n+                matcher:\n+                  exact: proxy-postgres-frontend.example.com\n               trusted_ca:\n                 filename: certs/cacert.pem\n "
        },
        {
          "filename": "examples/double-proxy/envoy-frontend.yaml",
          "status": "modified",
          "additions": 4,
          "deletions": 2,
          "patch": "@@ -36,7 +36,9 @@ static_resources:\n             private_key:\n               filename: certs/clientkey.pem\n           validation_context:\n-            match_subject_alt_names:\n-            - exact: proxy-postgres-backend.example.com\n+            match_typed_subject_alt_names:\n+            - san_type: DNS\n+              matcher:\n+                exact: proxy-postgres-backend.example.com\n             trusted_ca:\n               filename: certs/cacert.pem"
        },
        {
          "filename": "source/common/ssl/BUILD",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -32,6 +32,7 @@ envoy_cc_library(\n         \"//envoy/ssl:certificate_validation_context_config_interface\",\n         \"//source/common/common:empty_string\",\n         \"//source/common/config:datasource_lib\",\n+        \"@envoy_api//envoy/config/core/v3:pkg_cc_proto\",\n         \"@envoy_api//envoy/extensions/transport_sockets/tls/v3:pkg_cc_proto\",\n         \"@envoy_api//envoy/type/matcher/v3:pkg_cc_proto\",\n     ],"
        },
        {
          "filename": "source/common/ssl/certificate_validation_context_config_impl.cc",
          "status": "modified",
          "additions": 33,
          "deletions": 2,
          "patch": "@@ -1,10 +1,13 @@\n #include \"source/common/ssl/certificate_validation_context_config_impl.h\"\n \n #include \"envoy/common/exception.h\"\n+#include \"envoy/config/core/v3/extension.pb.h\"\n #include \"envoy/extensions/transport_sockets/tls/v3/cert.pb.h\"\n+#include \"envoy/extensions/transport_sockets/tls/v3/common.pb.h\"\n \n #include \"source/common/common/empty_string.h\"\n #include \"source/common/common/fmt.h\"\n+#include \"source/common/common/logger.h\"\n #include \"source/common/config/datasource.h\"\n \n namespace Envoy {\n@@ -22,8 +25,7 @@ CertificateValidationContextConfigImpl::CertificateValidationContextConfigImpl(\n       certificate_revocation_list_path_(\n           Config::DataSource::getPath(config.crl())\n               .value_or(certificate_revocation_list_.empty() ? EMPTY_STRING : INLINE_STRING)),\n-      subject_alt_name_matchers_(config.match_subject_alt_names().begin(),\n-                                 config.match_subject_alt_names().end()),\n+      subject_alt_name_matchers_(getSubjectAltNameMatchers(config)),\n       verify_certificate_hash_list_(config.verify_certificate_hash().begin(),\n                                     config.verify_certificate_hash().end()),\n       verify_certificate_spki_list_(config.verify_certificate_spki().begin(),\n@@ -51,5 +53,34 @@ CertificateValidationContextConfigImpl::CertificateValidationContextConfigImpl(\n   }\n }\n \n+std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>\n+CertificateValidationContextConfigImpl::getSubjectAltNameMatchers(\n+    const envoy::extensions::transport_sockets::tls::v3::CertificateValidationContext& config) {\n+  if (!config.match_typed_subject_alt_names().empty() &&\n+      !config.match_subject_alt_names().empty()) {\n+    throw EnvoyException(\"SAN-based verification using both match_typed_subject_alt_names and \"\n+                         \"the deprecated match_subject_alt_names is not allowed\");\n+  }\n+  std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>\n+      subject_alt_name_matchers(config.match_typed_subject_alt_names().begin(),\n+                                config.match_typed_subject_alt_names().end());\n+  // Handle deprecated string type san matchers without san type specified, by\n+  // creating a matcher for each supported type.\n+  for (const envoy::type::matcher::v3::StringMatcher& matcher : config.match_subject_alt_names()) {\n+    static constexpr std::array<\n+        envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::SanType, 4>\n+        san_types{envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS,\n+                  envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::URI,\n+                  envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::EMAIL,\n+                  envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::IP_ADDRESS};\n+    for (const auto san_type : san_types) {\n+      subject_alt_name_matchers.emplace_back();\n+      subject_alt_name_matchers.back().set_san_type(san_type);\n+      *subject_alt_name_matchers.back().mutable_matcher() = matcher;\n+    }\n+  }\n+  return subject_alt_name_matchers;\n+}\n+\n } // namespace Ssl\n } // namespace Envoy"
        },
        {
          "filename": "source/common/ssl/certificate_validation_context_config_impl.h",
          "status": "modified",
          "additions": 7,
          "deletions": 2,
          "patch": "@@ -4,6 +4,7 @@\n \n #include \"envoy/api/api.h\"\n #include \"envoy/extensions/transport_sockets/tls/v3/cert.pb.h\"\n+#include \"envoy/extensions/transport_sockets/tls/v3/common.pb.h\"\n #include \"envoy/ssl/certificate_validation_context_config.h\"\n #include \"envoy/type/matcher/v3/string.pb.h\"\n \n@@ -24,7 +25,7 @@ class CertificateValidationContextConfigImpl : public CertificateValidationConte\n   const std::string& certificateRevocationListPath() const final {\n     return certificate_revocation_list_path_;\n   }\n-  const std::vector<envoy::type::matcher::v3::StringMatcher>&\n+  const std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>&\n   subjectAltNameMatchers() const override {\n     return subject_alt_name_matchers_;\n   }\n@@ -51,11 +52,15 @@ class CertificateValidationContextConfigImpl : public CertificateValidationConte\n   bool onlyVerifyLeafCertificateCrl() const override { return only_verify_leaf_cert_crl_; }\n \n private:\n+  static std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>\n+  getSubjectAltNameMatchers(\n+      const envoy::extensions::transport_sockets::tls::v3::CertificateValidationContext& config);\n   const std::string ca_cert_;\n   const std::string ca_cert_path_;\n   const std::string certificate_revocation_list_;\n   const std::string certificate_revocation_list_path_;\n-  const std::vector<envoy::type::matcher::v3::StringMatcher> subject_alt_name_matchers_;\n+  const std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>\n+      subject_alt_name_matchers_;\n   const std::vector<std::string> verify_certificate_hash_list_;\n   const std::vector<std::string> verify_certificate_spki_list_;\n   const bool allow_expired_certificate_;"
        },
        {
          "filename": "source/extensions/transport_sockets/tls/cert_validator/BUILD",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -13,12 +13,14 @@ envoy_cc_library(\n     srcs = [\n         \"default_validator.cc\",\n         \"factory.cc\",\n+        \"san_matcher.cc\",\n         \"utility.cc\",\n     ],\n     hdrs = [\n         \"cert_validator.h\",\n         \"default_validator.h\",\n         \"factory.h\",\n+        \"san_matcher.h\",\n         \"utility.h\",\n     ],\n     external_deps = [\n@@ -35,9 +37,13 @@ envoy_cc_library(\n         \"//source/common/common:hex_lib\",\n         \"//source/common/common:minimal_logger_lib\",\n         \"//source/common/common:utility_lib\",\n+        \"//source/common/config:utility_lib\",\n         \"//source/common/stats:symbol_table_lib\",\n         \"//source/common/stats:utility_lib\",\n         \"//source/extensions/transport_sockets/tls:stats_lib\",\n         \"//source/extensions/transport_sockets/tls:utility_lib\",\n+        \"@envoy_api//envoy/config/core/v3:pkg_cc_proto\",\n+        \"@envoy_api//envoy/extensions/transport_sockets/tls/v3:pkg_cc_proto\",\n+        \"@envoy_api//envoy/type/matcher/v3:pkg_cc_proto\",\n     ],\n )"
        },
        {
          "filename": "source/extensions/transport_sockets/tls/cert_validator/default_validator.cc",
          "status": "modified",
          "additions": 10,
          "deletions": 18,
          "patch": "@@ -18,6 +18,7 @@\n #include \"source/common/common/hex.h\"\n #include \"source/common/common/matchers.h\"\n #include \"source/common/common/utility.h\"\n+#include \"source/common/config/utility.h\"\n #include \"source/common/network/address_impl.h\"\n #include \"source/common/protobuf/utility.h\"\n #include \"source/common/runtime/runtime_features.h\"\n@@ -147,9 +148,9 @@ int DefaultCertValidator::initializeSslContexts(std::vector<SSL_CTX*> contexts,\n   const Envoy::Ssl::CertificateValidationContextConfig* cert_validation_config = config_;\n   if (cert_validation_config != nullptr) {\n     if (!cert_validation_config->subjectAltNameMatchers().empty()) {\n-      for (const envoy::type::matcher::v3::StringMatcher& matcher :\n+      for (const envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher& matcher :\n            cert_validation_config->subjectAltNameMatchers()) {\n-        subject_alt_name_matchers_.push_back(Matchers::StringMatcherImpl(matcher));\n+        subject_alt_name_matchers_.emplace_back(createStringSanMatcher(matcher));\n       }\n       verify_mode = verify_mode_validation_context;\n     }\n@@ -221,8 +222,8 @@ int DefaultCertValidator::doVerifyCertChain(\n \n   // If `trusted_ca` exists, it is already verified in the code above. Thus, we just need to make\n   // sure the verification for other validation context configurations doesn't fail (i.e. either\n-  // `NotValidated` or `Validated`). If `trusted_ca` doesn't exist, we will need to make sure other\n-  // configurations are verified and the verification succeed.\n+  // `NotValidated` or `Validated`). If `trusted_ca` doesn't exist, we will need to make sure\n+  // other configurations are verified and the verification succeed.\n   int validation_status = verify_trusted_ca_\n                               ? validated != Envoy::Ssl::ClientValidationStatus::Failed\n                               : validated == Envoy::Ssl::ClientValidationStatus::Validated;\n@@ -232,8 +233,7 @@ int DefaultCertValidator::doVerifyCertChain(\n \n Envoy::Ssl::ClientValidationStatus DefaultCertValidator::verifyCertificate(\n     X509* cert, const std::vector<std::string>& verify_san_list,\n-    const std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>&\n-        subject_alt_name_matchers) {\n+    const std::vector<SanMatcherPtr>& subject_alt_name_matchers) {\n   Envoy::Ssl::ClientValidationStatus validated = Envoy::Ssl::ClientValidationStatus::NotValidated;\n \n   if (!verify_san_list.empty()) {\n@@ -291,23 +291,15 @@ bool DefaultCertValidator::verifySubjectAltName(X509* cert,\n }\n \n bool DefaultCertValidator::matchSubjectAltName(\n-    X509* cert,\n-    const std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>&\n-        subject_alt_name_matchers) {\n+    X509* cert, const std::vector<SanMatcherPtr>& subject_alt_name_matchers) {\n   bssl::UniquePtr<GENERAL_NAMES> san_names(\n       static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(cert, NID_subject_alt_name, nullptr, nullptr)));\n   if (san_names == nullptr) {\n     return false;\n   }\n-  for (const GENERAL_NAME* general_name : san_names.get()) {\n-    const std::string san = Utility::generalNameAsString(general_name);\n-    for (auto& config_san_matcher : subject_alt_name_matchers) {\n-      // For DNS SAN, if the StringMatcher type is exact, we have to follow DNS matching semantics.\n-      if (general_name->type == GEN_DNS &&\n-                  config_san_matcher.matcher().match_pattern_case() ==\n-                      envoy::type::matcher::v3::StringMatcher::MatchPatternCase::kExact\n-              ? Utility::dnsNameMatch(config_san_matcher.matcher().exact(), absl::string_view(san))\n-              : config_san_matcher.match(san)) {\n+  for (const auto& config_san_matcher : subject_alt_name_matchers) {\n+    for (const GENERAL_NAME* general_name : san_names.get()) {\n+      if (config_san_matcher->match(general_name)) {\n         return true;\n       }\n     }"
        },
        {
          "filename": "source/extensions/transport_sockets/tls/cert_validator/default_validator.h",
          "status": "modified",
          "additions": 8,
          "deletions": 10,
          "patch": "@@ -4,6 +4,7 @@\n #include <deque>\n #include <functional>\n #include <string>\n+#include <utility>\n #include <vector>\n \n #include \"envoy/common/pure.h\"\n@@ -18,6 +19,7 @@\n #include \"source/common/common/matchers.h\"\n #include \"source/common/stats/symbol_table_impl.h\"\n #include \"source/extensions/transport_sockets/tls/cert_validator/cert_validator.h\"\n+#include \"source/extensions/transport_sockets/tls/cert_validator/san_matcher.h\"\n #include \"source/extensions/transport_sockets/tls/stats.h\"\n \n #include \"absl/synchronization/mutex.h\"\n@@ -53,10 +55,9 @@ class DefaultCertValidator : public CertValidator, Logger::Loggable<Logger::Id::\n   Envoy::Ssl::CertificateDetailsPtr getCaCertInformation() const override;\n \n   // Utility functions.\n-  Envoy::Ssl::ClientValidationStatus verifyCertificate(\n-      X509* cert, const std::vector<std::string>& verify_san_list,\n-      const std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>&\n-          subject_alt_name_matchers);\n+  Envoy::Ssl::ClientValidationStatus\n+  verifyCertificate(X509* cert, const std::vector<std::string>& verify_san_list,\n+                    const std::vector<SanMatcherPtr>& subject_alt_name_matchers);\n \n   /**\n    * Verifies certificate hash for pinning. The hash is a hex-encoded SHA-256 of the DER-encoded\n@@ -94,10 +95,8 @@ class DefaultCertValidator : public CertValidator, Logger::Loggable<Logger::Id::\n    * @param subject_alt_name_matchers the configured matchers to match\n    * @return true if the verification succeeds\n    */\n-  static bool matchSubjectAltName(\n-      X509* cert,\n-      const std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>&\n-          subject_alt_name_matchers);\n+  static bool matchSubjectAltName(X509* cert,\n+                                  const std::vector<SanMatcherPtr>& subject_alt_name_matchers);\n \n private:\n   const Envoy::Ssl::CertificateValidationContextConfig* config_;\n@@ -107,8 +106,7 @@ class DefaultCertValidator : public CertValidator, Logger::Loggable<Logger::Id::\n   bool allow_untrusted_certificate_{false};\n   bssl::UniquePtr<X509> ca_cert_;\n   std::string ca_file_path_;\n-  std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>\n-      subject_alt_name_matchers_;\n+  std::vector<SanMatcherPtr> subject_alt_name_matchers_;\n   std::vector<std::vector<uint8_t>> verify_certificate_hash_list_;\n   std::vector<std::vector<uint8_t>> verify_certificate_spki_list_;\n   bool verify_trusted_ca_{false};"
        },
        {
          "filename": "source/extensions/transport_sockets/tls/cert_validator/san_matcher.cc",
          "status": "added",
          "additions": 53,
          "deletions": 0,
          "patch": "@@ -0,0 +1,53 @@\n+#include \"source/extensions/transport_sockets/tls/cert_validator/san_matcher.h\"\n+\n+#include <memory>\n+\n+#include \"envoy/config/core/v3/extension.pb.h\"\n+#include \"envoy/extensions/transport_sockets/tls/v3/common.pb.h\"\n+#include \"envoy/registry/registry.h\"\n+#include \"envoy/ssl/certificate_validation_context_config.h\"\n+\n+#include \"source/extensions/transport_sockets/tls/utility.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace TransportSockets {\n+namespace Tls {\n+\n+bool StringSanMatcher::match(const GENERAL_NAME* general_name) const {\n+  if (general_name->type != general_name_type_) {\n+    return false;\n+  }\n+  // For DNS SAN, if the StringMatcher type is exact, we have to follow DNS matching semantics.\n+  const std::string san = Utility::generalNameAsString(general_name);\n+  return general_name->type == GEN_DNS &&\n+                 matcher_.matcher().match_pattern_case() ==\n+                     envoy::type::matcher::v3::StringMatcher::MatchPatternCase::kExact\n+             ? Utility::dnsNameMatch(matcher_.matcher().exact(), absl::string_view(san))\n+             : matcher_.match(san);\n+}\n+\n+SanMatcherPtr createStringSanMatcher(\n+    envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher const& matcher) {\n+  // Verify that a new san type has not been added.\n+  static_assert(envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::SanType_MAX ==\n+                4);\n+\n+  switch (matcher.san_type()) {\n+  case envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS:\n+    return SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_DNS, matcher.matcher())};\n+  case envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::EMAIL:\n+    return SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_EMAIL, matcher.matcher())};\n+  case envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::URI:\n+    return SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_URI, matcher.matcher())};\n+  case envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::IP_ADDRESS:\n+    return SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_IPADD, matcher.matcher())};\n+  default:\n+    NOT_REACHED_GCOVR_EXCL_LINE;\n+  }\n+}\n+\n+} // namespace Tls\n+} // namespace TransportSockets\n+} // namespace Extensions\n+} // namespace Envoy"
        },
        {
          "filename": "source/extensions/transport_sockets/tls/cert_validator/san_matcher.h",
          "status": "added",
          "additions": 51,
          "deletions": 0,
          "patch": "@@ -0,0 +1,51 @@\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"envoy/config/core/v3/extension.pb.h\"\n+#include \"envoy/extensions/transport_sockets/tls/v3/common.pb.h\"\n+#include \"envoy/ssl/certificate_validation_context_config.h\"\n+#include \"envoy/type/matcher/v3/string.pb.h\"\n+\n+#include \"source/common/common/hash.h\"\n+#include \"source/common/common/matchers.h\"\n+#include \"source/common/protobuf/protobuf.h\"\n+#include \"source/extensions/transport_sockets/tls/utility.h\"\n+\n+#include \"openssl/x509v3.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace TransportSockets {\n+namespace Tls {\n+\n+/** Interface to verify if there is a match in a list of subject alternative\n+ * names.\n+ */\n+class SanMatcher {\n+public:\n+  virtual bool match(GENERAL_NAME const*) const PURE;\n+  virtual ~SanMatcher() = default;\n+};\n+\n+using SanMatcherPtr = std::unique_ptr<SanMatcher>;\n+\n+class StringSanMatcher : public SanMatcher {\n+public:\n+  bool match(const GENERAL_NAME* general_name) const override;\n+  ~StringSanMatcher() override = default;\n+  StringSanMatcher(int general_name_type, envoy::type::matcher::v3::StringMatcher matcher)\n+      : general_name_type_(general_name_type), matcher_(matcher) {}\n+\n+private:\n+  const int general_name_type_;\n+  const Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher> matcher_;\n+};\n+\n+SanMatcherPtr createStringSanMatcher(\n+    const envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher& matcher);\n+\n+} // namespace Tls\n+} // namespace TransportSockets\n+} // namespace Extensions\n+} // namespace Envoy"
        },
        {
          "filename": "source/extensions/transport_sockets/tls/cert_validator/spiffe/spiffe_validator.cc",
          "status": "modified",
          "additions": 12,
          "deletions": 9,
          "patch": "@@ -1,5 +1,6 @@\n #include \"source/extensions/transport_sockets/tls/cert_validator/spiffe/spiffe_validator.h\"\n \n+#include \"envoy/extensions/transport_sockets/tls/v3/common.pb.h\"\n #include \"envoy/extensions/transport_sockets/tls/v3/tls_spiffe_validator_config.pb.h\"\n #include \"envoy/network/transport_socket.h\"\n #include \"envoy/registry/registry.h\"\n@@ -37,7 +38,14 @@ SPIFFEValidator::SPIFFEValidator(const Envoy::Ssl::CertificateValidationContextC\n \n   if (!config->subjectAltNameMatchers().empty()) {\n     for (const auto& matcher : config->subjectAltNameMatchers()) {\n-      subject_alt_name_matchers_.push_back(Matchers::StringMatcherImpl(matcher));\n+      if (matcher.san_type() ==\n+          envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::URI) {\n+        // Only match against URI SAN since SPIFFE specification does not restrict values in other\n+        // SAN types. See the discussion: https://github.com/envoyproxy/envoy/issues/15392\n+        // TODO(pradeepcrao): Throw an exception when a non-URI matcher is encountered after the\n+        // deprecated field match_subject_alt_names is removed\n+        subject_alt_name_matchers_.emplace_back(createStringSanMatcher(matcher));\n+      }\n     }\n   }\n \n@@ -224,15 +232,10 @@ bool SPIFFEValidator::matchSubjectAltName(X509& leaf_cert) {\n   ASSERT(san_names != nullptr,\n          \"san_names should have at least one name after SPIFFE cert validation\");\n \n-  // Only match against URI SAN since SPIFFE specification does not restrict values in other SAN\n-  // types. See the discussion: https://github.com/envoyproxy/envoy/issues/15392\n   for (const GENERAL_NAME* general_name : san_names.get()) {\n-    if (general_name->type == GEN_URI) {\n-      const std::string san = Utility::generalNameAsString(general_name);\n-      for (const auto& config_san_matcher : subject_alt_name_matchers_) {\n-        if (config_san_matcher.match(san)) {\n-          return true;\n-        }\n+    for (const auto& config_san_matcher : subject_alt_name_matchers_) {\n+      if (config_san_matcher->match(general_name)) {\n+        return true;\n       }\n     }\n   }"
        },
        {
          "filename": "source/extensions/transport_sockets/tls/cert_validator/spiffe/spiffe_validator.h",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -17,6 +17,7 @@\n #include \"source/common/common/matchers.h\"\n #include \"source/common/stats/symbol_table_impl.h\"\n #include \"source/extensions/transport_sockets/tls/cert_validator/cert_validator.h\"\n+#include \"source/extensions/transport_sockets/tls/cert_validator/san_matcher.h\"\n #include \"source/extensions/transport_sockets/tls/stats.h\"\n \n #include \"openssl/ssl.h\"\n@@ -67,8 +68,7 @@ class SPIFFEValidator : public CertValidator {\n   bool allow_expired_certificate_{false};\n   std::vector<bssl::UniquePtr<X509>> ca_certs_;\n   std::string ca_file_name_;\n-  std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>\n-      subject_alt_name_matchers_{};\n+  std::vector<SanMatcherPtr> subject_alt_name_matchers_{};\n   absl::flat_hash_map<std::string, X509StorePtr> trust_bundle_stores_;\n \n   SslStats& stats_;"
        },
        {
          "filename": "test/common/quic/envoy_quic_proof_source_test.cc",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -58,7 +58,8 @@ class SignatureVerifier {\n     ON_CALL(cert_validation_ctx_config_, certificateRevocationListPath())\n         .WillByDefault(ReturnRef(path_string));\n     const std::vector<std::string> empty_string_list;\n-    const std::vector<envoy::type::matcher::v3::StringMatcher> san_matchers;\n+    const std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>\n+        san_matchers;\n     ON_CALL(cert_validation_ctx_config_, subjectAltNameMatchers())\n         .WillByDefault(ReturnRef(san_matchers));\n     ON_CALL(cert_validation_ctx_config_, verifyCertificateHashList())"
        },
        {
          "filename": "test/common/quic/envoy_quic_proof_verifier_test.cc",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -75,7 +75,8 @@ class EnvoyQuicProofVerifierTest : public testing::Test {\n   const std::string path_string_{\"some_path\"};\n   const std::string alpn_{\"h2,http/1.1\"};\n   const std::string sig_algs_{\"rsa_pss_rsae_sha256\"};\n-  const std::vector<envoy::type::matcher::v3::StringMatcher> san_matchers_;\n+  const std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>\n+      san_matchers_;\n   const std::string empty_string_;\n   const std::vector<std::string> empty_string_list_;\n   const std::string cert_chain_{quic::test::kTestCertificateChainPem};"
        },
        {
          "filename": "test/common/secret/sds_api_test.cc",
          "status": "modified",
          "additions": 14,
          "deletions": 4,
          "patch": "@@ -665,7 +665,10 @@ TEST_F(SdsApiTest, DefaultCertificateValidationContextTest) {\n   dynamic_cvc->set_allow_expired_certificate(false);\n   dynamic_cvc->mutable_trusted_ca()->set_filename(TestEnvironment::substitute(\n       \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"));\n-  dynamic_cvc->add_match_subject_alt_names()->set_exact(\"second san\");\n+  auto* san_matcher = dynamic_cvc->add_match_typed_subject_alt_names();\n+  san_matcher->mutable_matcher()->set_exact(\"second san\");\n+  san_matcher->set_san_type(\n+      envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS);\n   const std::string dynamic_verify_certificate_spki =\n       \"QGJRPdmx/r5EGOFLb2MTiZp2isyC0Whht7iazhzXaCM=\";\n   dynamic_cvc->add_verify_certificate_spki(dynamic_verify_certificate_spki);\n@@ -681,7 +684,10 @@ TEST_F(SdsApiTest, DefaultCertificateValidationContextTest) {\n   envoy::extensions::transport_sockets::tls::v3::CertificateValidationContext default_cvc;\n   default_cvc.set_allow_expired_certificate(true);\n   default_cvc.mutable_trusted_ca()->set_inline_bytes(\"fake trusted ca\");\n-  default_cvc.add_match_subject_alt_names()->set_exact(\"first san\");\n+  san_matcher = default_cvc.add_match_typed_subject_alt_names();\n+  san_matcher->mutable_matcher()->set_exact(\"first san\");\n+  san_matcher->set_san_type(\n+      envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS);\n   default_cvc.add_verify_certificate_hash(default_verify_certificate_hash);\n   envoy::extensions::transport_sockets::tls::v3::CertificateValidationContext merged_cvc =\n       default_cvc;\n@@ -697,8 +703,12 @@ TEST_F(SdsApiTest, DefaultCertificateValidationContextTest) {\n             cvc_config.caCert());\n   // Verify that repeated fields are concatenated.\n   EXPECT_EQ(2, cvc_config.subjectAltNameMatchers().size());\n-  EXPECT_EQ(\"first san\", cvc_config.subjectAltNameMatchers()[0].exact());\n-  EXPECT_EQ(\"second san\", cvc_config.subjectAltNameMatchers()[1].exact());\n+  EXPECT_EQ(\"first san\", cvc_config.subjectAltNameMatchers()[0].matcher().exact());\n+  EXPECT_EQ(envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS,\n+            cvc_config.subjectAltNameMatchers()[0].san_type());\n+  EXPECT_EQ(\"second san\", cvc_config.subjectAltNameMatchers()[1].matcher().exact());\n+  EXPECT_EQ(envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS,\n+            cvc_config.subjectAltNameMatchers()[1].san_type());\n   // Verify that if dynamic CertificateValidationContext does not set certificate hash list, the new\n   // secret contains hash list from default CertificateValidationContext.\n   EXPECT_EQ(1, cvc_config.verifyCertificateHashList().size());"
        },
        {
          "filename": "test/common/secret/secret_manager_impl_test.cc",
          "status": "modified",
          "additions": 37,
          "deletions": 0,
          "patch": "@@ -1128,6 +1128,43 @@ name: \"abc.com\"\n       EnvoyException, \"Failed to load private key provider: test\");\n }\n \n+// Verify that using the match_subject_alt_names will result in a typed matcher, one for each of\n+// DNS, URI, EMAIL and IP_ADDRESS.\n+// TODO(pradeepcrao): Delete this test once the deprecated field is removed.\n+TEST_F(SecretManagerImplTest, DeprecatedSanMatcher) {\n+  envoy::extensions::transport_sockets::tls::v3::Secret secret_config;\n+  const std::string yaml =\n+      R\"EOF(\n+      name: \"abc.com\"\n+      validation_context:\n+        trusted_ca: { filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\" }\n+        allow_expired_certificate: true\n+        match_subject_alt_names:\n+          exact: \"example.foo\"\n+      )EOF\";\n+  TestUtility::loadFromYaml(TestEnvironment::substitute(yaml), secret_config);\n+  std::unique_ptr<SecretManager> secret_manager(new SecretManagerImpl(config_tracker_));\n+  secret_manager->addStaticSecret(secret_config);\n+\n+  ASSERT_EQ(secret_manager->findStaticCertificateValidationContextProvider(\"undefined\"), nullptr);\n+  ASSERT_NE(secret_manager->findStaticCertificateValidationContextProvider(\"abc.com\"), nullptr);\n+  Ssl::CertificateValidationContextConfigImpl cvc_config(\n+      *secret_manager->findStaticCertificateValidationContextProvider(\"abc.com\")->secret(), *api_);\n+  EXPECT_EQ(cvc_config.subjectAltNameMatchers().size(), 4);\n+  EXPECT_EQ(\"example.foo\", cvc_config.subjectAltNameMatchers()[0].matcher().exact());\n+  EXPECT_EQ(envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS,\n+            cvc_config.subjectAltNameMatchers()[0].san_type());\n+  EXPECT_EQ(\"example.foo\", cvc_config.subjectAltNameMatchers()[1].matcher().exact());\n+  EXPECT_EQ(envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::URI,\n+            cvc_config.subjectAltNameMatchers()[1].san_type());\n+  EXPECT_EQ(\"example.foo\", cvc_config.subjectAltNameMatchers()[2].matcher().exact());\n+  EXPECT_EQ(envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::EMAIL,\n+            cvc_config.subjectAltNameMatchers()[2].san_type());\n+  EXPECT_EQ(\"example.foo\", cvc_config.subjectAltNameMatchers()[3].matcher().exact());\n+  EXPECT_EQ(envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::IP_ADDRESS,\n+            cvc_config.subjectAltNameMatchers()[3].san_type());\n+}\n+\n } // namespace\n } // namespace Secret\n } // namespace Envoy"
        },
        {
          "filename": "test/common/upstream/upstream_impl_test.cc",
          "status": "modified",
          "additions": 28,
          "deletions": 12,
          "patch": "@@ -3554,9 +3554,13 @@ TEST_F(ClusterInfoImplTest, Http3) {\n             validation_context:\n               trusted_ca:\n                 filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n-              match_subject_alt_names:\n-              - exact: localhost\n-              - exact: 127.0.0.1\n+              match_typed_subject_alt_names:\n+              - matcher:\n+                  exact: localhost\n+                san_type: URI\n+              - matcher:\n+                  exact: 127.0.0.1\n+                san_type: IP_ADDRESS\n   )EOF\",\n                                                        Network::Address::IpVersion::v4);\n   auto cluster1 = makeCluster(yaml);\n@@ -3627,9 +3631,13 @@ TEST_F(ClusterInfoImplTest, Http3BadConfig) {\n             validation_context:\n               trusted_ca:\n                 filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n-              match_subject_alt_names:\n-              - exact: localhost\n-              - exact: 127.0.0.1\n+              match_typed_subject_alt_names:\n+              - matcher:\n+                  exact: localhost\n+                san_type: URI\n+              - matcher:\n+                  exact: 127.0.0.1\n+                san_type: IP_ADDRESS\n     typed_extension_protocol_options:\n       envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n         \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions\n@@ -3672,9 +3680,13 @@ TEST_F(ClusterInfoImplTest, Http3Auto) {\n             validation_context:\n               trusted_ca:\n                 filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n-              match_subject_alt_names:\n-              - exact: localhost\n-              - exact: 127.0.0.1\n+              match_typed_subject_alt_names:\n+              - matcher:\n+                  exact: localhost\n+                san_type: URI\n+              - matcher:\n+                  exact: 127.0.0.1\n+                san_type: IP_ADDRESS\n   )EOF\",\n                                                        Network::Address::IpVersion::v4);\n \n@@ -3731,9 +3743,13 @@ TEST_F(ClusterInfoImplTest, UseDownstreamHttpProtocolWithoutDowngrade) {\n             validation_context:\n               trusted_ca:\n                 filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n-              match_subject_alt_names:\n-              - exact: localhost\n-              - exact: 127.0.0.1\n+              match_typed_subject_alt_names:\n+              - matcher:\n+                  exact: localhost\n+                san_type: URI\n+              - matcher:\n+                  exact: 127.0.0.1\n+                san_type: IP_ADDRESS\n     typed_extension_protocol_options:\n       envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n         \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions"
        },
        {
          "filename": "test/config/utility.cc",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1215,8 +1215,8 @@ void ConfigHelper::initializeTls(\n     }\n   }\n   if (!options.san_matchers_.empty()) {\n-    *validation_context->mutable_match_subject_alt_names() = {options.san_matchers_.begin(),\n-                                                              options.san_matchers_.end()};\n+    *validation_context->mutable_match_typed_subject_alt_names() = {options.san_matchers_.begin(),\n+                                                                    options.san_matchers_.end()};\n   }\n }\n "
        },
        {
          "filename": "test/config/utility.h",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -14,6 +14,7 @@\n #include \"envoy/config/route/v3/route_components.pb.h\"\n #include \"envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.pb.h\"\n #include \"envoy/extensions/transport_sockets/tls/v3/cert.pb.h\"\n+#include \"envoy/extensions/transport_sockets/tls/v3/common.pb.h\"\n #include \"envoy/extensions/upstreams/http/v3/http_protocol_options.pb.h\"\n #include \"envoy/http/codes.h\"\n \n@@ -80,7 +81,8 @@ class ConfigHelper {\n     }\n \n     ServerSslOptions&\n-    setSanMatchers(std::vector<envoy::type::matcher::v3::StringMatcher> san_matchers) {\n+    setSanMatchers(std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>\n+                       san_matchers) {\n       san_matchers_ = san_matchers;\n       return *this;\n     }\n@@ -94,7 +96,8 @@ class ConfigHelper {\n     bool ocsp_staple_required_{false};\n     bool tlsv1_3_{false};\n     bool expect_client_ecdsa_cert_{false};\n-    std::vector<envoy::type::matcher::v3::StringMatcher> san_matchers_{};\n+    std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>\n+        san_matchers_{};\n   };\n \n   // Set up basic config, using the specified IpVersion for all connections: listeners, upstream,"
        },
        {
          "filename": "test/extensions/transport_sockets/tls/cert_validator/BUILD",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -57,3 +57,16 @@ envoy_cc_test_library(\n         \"//test/test_common:utility_lib\",\n     ],\n )\n+\n+envoy_cc_test(\n+    name = \"san_matcher_test\",\n+    srcs = [\n+        \"san_matcher_test.cc\",\n+    ],\n+    deps = [\n+        \"//source/common/protobuf:utility_lib\",\n+        \"//source/extensions/transport_sockets/tls/cert_validator:cert_validator_lib\",\n+        \"//test/test_common:utility_lib\",\n+        \"@envoy_api//envoy/extensions/transport_sockets/tls/v3:pkg_cc_proto\",\n+    ],\n+)"
        },
        {
          "filename": "test/extensions/transport_sockets/tls/cert_validator/default_validator_test.cc",
          "status": "modified",
          "additions": 53,
          "deletions": 24,
          "patch": "@@ -2,6 +2,7 @@\n #include <vector>\n \n #include \"source/extensions/transport_sockets/tls/cert_validator/default_validator.h\"\n+#include \"source/extensions/transport_sockets/tls/cert_validator/san_matcher.h\"\n \n #include \"test/extensions/transport_sockets/tls/ssl_test_utility.h\"\n #include \"test/test_common/environment.h\"\n@@ -28,22 +29,33 @@ TEST(DefaultCertValidatorTest, TestMatchSubjectAltNameDNSMatched) {\n   bssl::UniquePtr<X509> cert = readCertFromFile(TestEnvironment::substitute(\n       \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_dns_cert.pem\"));\n   envoy::type::matcher::v3::StringMatcher matcher;\n-  matcher.MergeFrom(TestUtility::createRegexMatcher(\".*.example.com\"));\n-  std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>\n-      subject_alt_name_matchers;\n-  subject_alt_name_matchers.push_back(Matchers::StringMatcherImpl(matcher));\n+  matcher.MergeFrom(TestUtility::createRegexMatcher(R\"raw([^.]*\\.example.com)raw\"));\n+  std::vector<SanMatcherPtr> subject_alt_name_matchers;\n+  subject_alt_name_matchers.push_back(\n+      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_DNS, matcher)});\n   EXPECT_TRUE(DefaultCertValidator::matchSubjectAltName(cert.get(), subject_alt_name_matchers));\n }\n \n+TEST(DefaultCertValidatorTest, TestMatchSubjectAltNameIncorrectTypeMatched) {\n+  bssl::UniquePtr<X509> cert = readCertFromFile(TestEnvironment::substitute(\n+      \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_dns_cert.pem\"));\n+  envoy::type::matcher::v3::StringMatcher matcher;\n+  matcher.MergeFrom(TestUtility::createRegexMatcher(R\"raw([^.]*\\.example.com)raw\"));\n+  std::vector<SanMatcherPtr> subject_alt_name_matchers;\n+  subject_alt_name_matchers.push_back(\n+      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_URI, matcher)});\n+  EXPECT_FALSE(DefaultCertValidator::matchSubjectAltName(cert.get(), subject_alt_name_matchers));\n+}\n+\n TEST(DefaultCertValidatorTest, TestMatchSubjectAltNameWildcardDNSMatched) {\n   bssl::UniquePtr<X509> cert = readCertFromFile(TestEnvironment::substitute(\n       \"{{ test_rundir \"\n       \"}}/test/extensions/transport_sockets/tls/test_data/san_multiple_dns_cert.pem\"));\n   envoy::type::matcher::v3::StringMatcher matcher;\n   matcher.set_exact(\"api.example.com\");\n-  std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>\n-      subject_alt_name_matchers;\n-  subject_alt_name_matchers.push_back(Matchers::StringMatcherImpl(matcher));\n+  std::vector<SanMatcherPtr> subject_alt_name_matchers;\n+  subject_alt_name_matchers.push_back(\n+      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_DNS, matcher)});\n   EXPECT_TRUE(DefaultCertValidator::matchSubjectAltName(cert.get(), subject_alt_name_matchers));\n }\n \n@@ -54,9 +66,9 @@ TEST(DefaultCertValidatorTest, TestMultiLevelMatch) {\n       \"}}/test/extensions/transport_sockets/tls/test_data/san_multiple_dns_cert.pem\"));\n   envoy::type::matcher::v3::StringMatcher matcher;\n   matcher.set_exact(\"foo.api.example.com\");\n-  std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>\n-      subject_alt_name_matchers;\n-  subject_alt_name_matchers.push_back(Matchers::StringMatcherImpl(matcher));\n+  std::vector<SanMatcherPtr> subject_alt_name_matchers;\n+  subject_alt_name_matchers.push_back(\n+      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_DNS, matcher)});\n   EXPECT_FALSE(DefaultCertValidator::matchSubjectAltName(cert.get(), subject_alt_name_matchers));\n }\n \n@@ -81,10 +93,10 @@ TEST(DefaultCertValidatorTest, TestMatchSubjectAltNameURIMatched) {\n   bssl::UniquePtr<X509> cert = readCertFromFile(TestEnvironment::substitute(\n       \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem\"));\n   envoy::type::matcher::v3::StringMatcher matcher;\n-  matcher.MergeFrom(TestUtility::createRegexMatcher(\"spiffe://lyft.com/.*-team\"));\n-  std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>\n-      subject_alt_name_matchers;\n-  subject_alt_name_matchers.push_back(Matchers::StringMatcherImpl(matcher));\n+  matcher.MergeFrom(TestUtility::createRegexMatcher(R\"raw(spiffe://lyft.com/[^/]*-team)raw\"));\n+  std::vector<SanMatcherPtr> subject_alt_name_matchers;\n+  subject_alt_name_matchers.push_back(\n+      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_URI, matcher)});\n   EXPECT_TRUE(DefaultCertValidator::matchSubjectAltName(cert.get(), subject_alt_name_matchers));\n }\n \n@@ -100,10 +112,16 @@ TEST(DefaultCertValidatorTest, TestMatchSubjectAltNameNotMatched) {\n   bssl::UniquePtr<X509> cert = readCertFromFile(TestEnvironment::substitute(\n       \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_dns_cert.pem\"));\n   envoy::type::matcher::v3::StringMatcher matcher;\n-  matcher.MergeFrom(TestUtility::createRegexMatcher(\".*.foo.com\"));\n-  std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>\n-      subject_alt_name_matchers;\n-  subject_alt_name_matchers.push_back(Matchers::StringMatcherImpl(matcher));\n+  matcher.MergeFrom(TestUtility::createRegexMatcher(R\"raw([^.]*\\.example\\.net)raw\"));\n+  std::vector<SanMatcherPtr> subject_alt_name_matchers;\n+  subject_alt_name_matchers.push_back(\n+      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_DNS, matcher)});\n+  subject_alt_name_matchers.push_back(\n+      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_IPADD, matcher)});\n+  subject_alt_name_matchers.push_back(\n+      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_URI, matcher)});\n+  subject_alt_name_matchers.push_back(\n+      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_EMAIL, matcher)});\n   EXPECT_FALSE(DefaultCertValidator::matchSubjectAltName(cert.get(), subject_alt_name_matchers));\n }\n \n@@ -119,18 +137,18 @@ TEST(DefaultCertValidatorTest, TestCertificateVerificationWithSANMatcher) {\n   bssl::UniquePtr<X509> cert = readCertFromFile(TestEnvironment::substitute(\n       \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_dns_cert.pem\"));\n   envoy::type::matcher::v3::StringMatcher matcher;\n-  matcher.MergeFrom(TestUtility::createRegexMatcher(\".*.example.com\"));\n-  std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>> san_matchers;\n-  san_matchers.push_back(Matchers::StringMatcherImpl(matcher));\n+  matcher.MergeFrom(TestUtility::createRegexMatcher(R\"raw([^.]*\\.example.com)raw\"));\n+  std::vector<SanMatcherPtr> san_matchers;\n+  san_matchers.push_back(SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_DNS, matcher)});\n   // Verify the certificate with correct SAN regex matcher.\n   EXPECT_EQ(default_validator->verifyCertificate(cert.get(), /*verify_san_list=*/{}, san_matchers),\n             Envoy::Ssl::ClientValidationStatus::Validated);\n   EXPECT_EQ(stats.fail_verify_san_.value(), 0);\n \n   matcher.MergeFrom(TestUtility::createExactMatcher(\"hello.example.com\"));\n-  std::vector<Matchers::StringMatcherImpl<envoy::type::matcher::v3::StringMatcher>>\n-      invalid_san_matchers;\n-  invalid_san_matchers.push_back(Matchers::StringMatcherImpl(matcher));\n+  std::vector<SanMatcherPtr> invalid_san_matchers;\n+  invalid_san_matchers.push_back(\n+      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_DNS, matcher)});\n   // Verify the certificate with incorrect SAN exact matcher.\n   EXPECT_EQ(default_validator->verifyCertificate(cert.get(), /*verify_san_list=*/{},\n                                                  invalid_san_matchers),\n@@ -158,6 +176,17 @@ TEST(DefaultCertValidatorTest, TestCertificateVerificationWithNoValidationContex\n             0);\n }\n \n+TEST(DefaultCertValidatorTest, NoSanInCert) {\n+  bssl::UniquePtr<X509> cert = readCertFromFile(TestEnvironment::substitute(\n+      \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/fake_ca_cert.pem\"));\n+  envoy::type::matcher::v3::StringMatcher matcher;\n+  matcher.MergeFrom(TestUtility::createRegexMatcher(R\"raw([^.]*\\.example\\.net)raw\"));\n+  std::vector<SanMatcherPtr> subject_alt_name_matchers;\n+  subject_alt_name_matchers.push_back(\n+      SanMatcherPtr{std::make_unique<StringSanMatcher>(GEN_DNS, matcher)});\n+  EXPECT_FALSE(DefaultCertValidator::matchSubjectAltName(cert.get(), subject_alt_name_matchers));\n+}\n+\n } // namespace Tls\n } // namespace TransportSockets\n } // namespace Extensions"
        },
        {
          "filename": "test/extensions/transport_sockets/tls/cert_validator/san_matcher_test.cc",
          "status": "added",
          "additions": 57,
          "deletions": 0,
          "patch": "@@ -0,0 +1,57 @@\n+#include \"envoy/extensions/transport_sockets/tls/v3/common.pb.validate.h\"\n+\n+#include \"source/common/protobuf/message_validator_impl.h\"\n+#include \"source/common/protobuf/utility.h\"\n+#include \"source/extensions/transport_sockets/tls/cert_validator/san_matcher.h\"\n+\n+#include \"test/test_common/utility.h\"\n+\n+#include \"gmock/gmock.h\"\n+#include \"gtest/gtest.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace TransportSockets {\n+namespace Tls {\n+\n+// Verify that we get a valid string san matcher for all valid san types.\n+TEST(SanMatcherConfigTest, TestValidSanType) {\n+  // Iterate over all san type enums.\n+  for (envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::SanType san_type =\n+           envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::SanType_MIN;\n+       san_type <=\n+       envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::SanType_MAX;\n+       san_type = static_cast<\n+           envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::SanType>(\n+           static_cast<int>(san_type + 1))) {\n+    envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher san_matcher;\n+    san_matcher.mutable_matcher()->set_exact(\"foo.example\");\n+    san_matcher.set_san_type(san_type);\n+    if (san_type == envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::\n+                        SAN_TYPE_UNSPECIFIED) {\n+      continue;\n+    } else {\n+      const SanMatcherPtr matcher = createStringSanMatcher(san_matcher);\n+      EXPECT_NE(matcher.get(), nullptr);\n+      // Verify that the message is valid.\n+      TestUtility::validate(san_matcher);\n+    }\n+  }\n+}\n+\n+TEST(SanMatcherConfigTest, UnspecifiedSanType) {\n+  envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher san_matcher;\n+  san_matcher.mutable_matcher()->set_exact(\"foo.example\");\n+  // Do not set san_type\n+  EXPECT_THROW_WITH_REGEX(TestUtility::validate(san_matcher), EnvoyException,\n+                          \"Proto constraint validation failed\");\n+  san_matcher.set_san_type(\n+      envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::SAN_TYPE_UNSPECIFIED);\n+  EXPECT_THROW_WITH_REGEX(TestUtility::validate(san_matcher), EnvoyException,\n+                          \"Proto constraint validation failed\");\n+}\n+\n+} // namespace Tls\n+} // namespace TransportSockets\n+} // namespace Extensions\n+} // namespace Envoy"
        },
        {
          "filename": "test/extensions/transport_sockets/tls/cert_validator/spiffe/spiffe_validator_integration_test.cc",
          "status": "modified",
          "additions": 24,
          "deletions": 4,
          "patch": "@@ -53,6 +53,26 @@ void SslSPIFFECertValidatorIntegrationTest::checkVerifyErrorCouter(uint64_t valu\n   counter->reset();\n }\n \n+void SslSPIFFECertValidatorIntegrationTest::addStringMatcher(\n+    const envoy::type::matcher::v3::StringMatcher& matcher) {\n+  san_matchers_.emplace_back();\n+  *san_matchers_.back().mutable_matcher() = matcher;\n+  san_matchers_.back().set_san_type(\n+      envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS);\n+  san_matchers_.emplace_back();\n+  *san_matchers_.back().mutable_matcher() = matcher;\n+  san_matchers_.back().set_san_type(\n+      envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::URI);\n+  san_matchers_.emplace_back();\n+  *san_matchers_.back().mutable_matcher() = matcher;\n+  san_matchers_.back().set_san_type(\n+      envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::EMAIL);\n+  san_matchers_.emplace_back();\n+  *san_matchers_.back().mutable_matcher() = matcher;\n+  san_matchers_.back().set_san_type(\n+      envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::IP_ADDRESS);\n+}\n+\n INSTANTIATE_TEST_SUITE_P(\n     IpVersionsClientVersions, SslSPIFFECertValidatorIntegrationTest,\n     testing::Combine(\n@@ -124,7 +144,7 @@ name: envoy.tls.cert_validator.spiffe\n \n   envoy::type::matcher::v3::StringMatcher matcher;\n   matcher.set_prefix(\"spiffe://lyft.com/\");\n-  san_matchers_ = {matcher};\n+  addStringMatcher(matcher);\n \n   ConnectionCreationFunction creator = [&]() -> Network::ClientConnectionPtr {\n     return makeSslClientConnection({});\n@@ -152,7 +172,7 @@ name: envoy.tls.cert_validator.spiffe\n   matcher.set_prefix(\"spiffe://example.com/\");\n   // The cert has \"DNS.1 = lyft.com\" but SPIFFE validator must ignore SAN types other than URI.\n   matcher.set_prefix(\"www.lyft.com\");\n-  san_matchers_ = {matcher};\n+  addStringMatcher(matcher);\n   initialize();\n   auto conn = makeSslClientConnection({});\n   if (tls_version_ == envoy::extensions::transport_sockets::tls::v3::TlsParameters::TLSv1_2) {\n@@ -223,8 +243,8 @@ name: envoy.tls.cert_validator.spiffe\n   checkVerifyErrorCouter(1);\n }\n \n-// clientcert.pem's san is \"spiffe://lyft.com/frontend-team\" but the corresponding trust bundle does\n-// not match with the client cert. So this should also be rejected.\n+// clientcert.pem's san is \"spiffe://lyft.com/frontend-team\" but the corresponding trust bundle\n+// does not match with the client cert. So this should also be rejected.\n TEST_P(SslSPIFFECertValidatorIntegrationTest, ServerRsaSPIFFEValidatorRejected2) {\n   auto typed_conf = new envoy::config::core::v3::TypedExtensionConfig();\n   TestUtility::loadFromYaml(TestEnvironment::substitute(R\"EOF("
        },
        {
          "filename": "test/extensions/transport_sockets/tls/cert_validator/spiffe/spiffe_validator_integration_test.h",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -39,10 +39,11 @@ class SslSPIFFECertValidatorIntegrationTest\n   }\n \n protected:\n+  void addStringMatcher(envoy::type::matcher::v3::StringMatcher const& matcher);\n   bool allow_expired_cert_{};\n   envoy::config::core::v3::TypedExtensionConfig* custom_validator_config_{nullptr};\n   std::unique_ptr<ContextManager> context_manager_;\n-  std::vector<envoy::type::matcher::v3::StringMatcher> san_matchers_;\n+  std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher> san_matchers_;\n   const envoy::extensions::transport_sockets::tls::v3::TlsParameters::TlsProtocol tls_version_{\n       std::get<1>(GetParam())};\n };"
        },
        {
          "filename": "test/extensions/transport_sockets/tls/cert_validator/spiffe/spiffe_validator_test.cc",
          "status": "modified",
          "additions": 25,
          "deletions": 3,
          "patch": "@@ -64,13 +64,34 @@ class TestSPIFFEValidator : public testing::Test {\n   // Setter.\n   void setAllowExpiredCertificate(bool val) { allow_expired_certificate_ = val; }\n   void setSanMatchers(std::vector<envoy::type::matcher::v3::StringMatcher> san_matchers) {\n-    san_matchers_ = san_matchers;\n+    san_matchers_.clear();\n+    for (auto& matcher : san_matchers) {\n+      san_matchers_.emplace_back();\n+      san_matchers_.back().set_san_type(\n+          envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS);\n+      *san_matchers_.back().mutable_matcher() = matcher;\n+\n+      san_matchers_.emplace_back();\n+      san_matchers_.back().set_san_type(\n+          envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::URI);\n+      *san_matchers_.back().mutable_matcher() = matcher;\n+\n+      san_matchers_.emplace_back();\n+      san_matchers_.back().set_san_type(\n+          envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::EMAIL);\n+      *san_matchers_.back().mutable_matcher() = matcher;\n+\n+      san_matchers_.emplace_back();\n+      san_matchers_.back().set_san_type(\n+          envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::IP_ADDRESS);\n+      *san_matchers_.back().mutable_matcher() = matcher;\n+    }\n   };\n \n private:\n   bool allow_expired_certificate_{false};\n   TestCertificateValidationContextConfigPtr config_;\n-  std::vector<envoy::type::matcher::v3::StringMatcher> san_matchers_{};\n+  std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher> san_matchers_{};\n   Stats::TestUtil::TestStore store_;\n   SslStats stats_;\n   Event::TestRealTimeSystem time_system_;\n@@ -193,7 +214,8 @@ TEST_F(TestSPIFFEValidator, TestGetTrustBundleStore) {\n \n   // Non-SPIFFE SAN\n   cert = readCertFromFile(TestEnvironment::substitute(\n-      \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/non_spiffe_san_cert.pem\"));\n+      \"{{ test_rundir \"\n+      \"}}/test/extensions/transport_sockets/tls/test_data/non_spiffe_san_cert.pem\"));\n   EXPECT_FALSE(validator().getTrustBundleStore(cert.get()));\n \n   // SPIFFE SAN"
        },
        {
          "filename": "test/extensions/transport_sockets/tls/cert_validator/test_common.h",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -33,7 +33,8 @@ class TestCertificateValidationContextConfig\n public:\n   TestCertificateValidationContextConfig(\n       envoy::config::core::v3::TypedExtensionConfig config, bool allow_expired_certificate = false,\n-      std::vector<envoy::type::matcher::v3::StringMatcher> san_matchers = {})\n+      std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>\n+          san_matchers = {})\n       : allow_expired_certificate_(allow_expired_certificate), api_(Api::createApiForTest()),\n         custom_validator_config_(config), san_matchers_(san_matchers){};\n   TestCertificateValidationContextConfig()\n@@ -47,7 +48,7 @@ class TestCertificateValidationContextConfig\n   const std::string& certificateRevocationListPath() const final {\n     CONSTRUCT_ON_FIRST_USE(std::string, \"\");\n   }\n-  const std::vector<envoy::type::matcher::v3::StringMatcher>&\n+  const std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>&\n   subjectAltNameMatchers() const override {\n     return san_matchers_;\n   }\n@@ -78,7 +79,8 @@ class TestCertificateValidationContextConfig\n   bool allow_expired_certificate_{false};\n   Api::ApiPtr api_;\n   const absl::optional<envoy::config::core::v3::TypedExtensionConfig> custom_validator_config_;\n-  const std::vector<envoy::type::matcher::v3::StringMatcher> san_matchers_{};\n+  const std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>\n+      san_matchers_{};\n };\n \n } // namespace Tls"
        },
        {
          "filename": "test/extensions/transport_sockets/tls/context_impl_test.cc",
          "status": "modified",
          "additions": 33,
          "deletions": 2,
          "patch": "@@ -923,8 +923,10 @@ TEST_F(SslServerContextImplTicketTest, VerifySanWithNoCA) {\n             private_key:\n               filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_dns_key.pem\"\n           validation_context:\n-            match_subject_alt_names:\n-              exact : \"spiffe://lyft.com/testclient\"\n+            match_typed_subject_alt_names:\n+            - san_type: URI\n+              matcher:\n+                exact: \"spiffe://lyft.com/testclient\"\n )EOF\";\n   EXPECT_THROW_WITH_MESSAGE(loadConfigYaml(yaml), EnvoyException,\n                             \"SAN-based verification of peer certificates without trusted CA \"\n@@ -1907,6 +1909,35 @@ TEST_F(ServerContextConfigImplTest, PrivateKeyMethodLoadFailureBothKeyAndMethod)\n       \"Certificate configuration can't have both private_key and private_key_provider\");\n }\n \n+// Test that we don't allow specification of both typed and untyped matchers for\n+// sans.\n+TEST_F(ServerContextConfigImplTest, DeprecatedSanMatcher) {\n+  envoy::extensions::transport_sockets::tls::v3::DownstreamTlsContext tls_context;\n+  NiceMock<Ssl::MockContextManager> context_manager;\n+  NiceMock<Ssl::MockPrivateKeyMethodManager> private_key_method_manager;\n+  auto private_key_method_provider_ptr =\n+      std::make_shared<NiceMock<Ssl::MockPrivateKeyMethodProvider>>();\n+  const std::string yaml =\n+      R\"EOF(\n+      common_tls_context:\n+        validation_context:\n+          trusted_ca: { filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\" }\n+          allow_expired_certificate: true\n+          match_typed_subject_alt_names:\n+          - san_type: DNS\n+            matcher:\n+              exact: \"foo.example\"\n+          match_subject_alt_names:\n+            exact: \"foo.example\"\n+      )EOF\";\n+  TestUtility::loadFromYaml(TestEnvironment::substitute(yaml), tls_context);\n+\n+  EXPECT_THROW_WITH_MESSAGE(\n+      ServerContextConfigImpl server_context_config(tls_context, factory_context_), EnvoyException,\n+      \"SAN-based verification using both match_typed_subject_alt_names and \"\n+      \"the deprecated match_subject_alt_names is not allowed\");\n+}\n+\n TEST_F(ServerContextConfigImplTest, Pkcs12LoadFailureBothPkcs12AndMethod) {\n   envoy::extensions::transport_sockets::tls::v3::DownstreamTlsContext tls_context;\n   NiceMock<Ssl::MockContextManager> context_manager;"
        },
        {
          "filename": "test/extensions/transport_sockets/tls/ssl_socket_test.cc",
          "status": "modified",
          "additions": 20,
          "deletions": 10,
          "patch": "@@ -1089,8 +1089,10 @@ TEST_P(SslSocketTest, GetUriWithUriSan) {\n     validation_context:\n       trusted_ca:\n         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n-      match_subject_alt_names:\n-        exact: \"spiffe://lyft.com/test-team\"\n+      match_typed_subject_alt_names:\n+      - san_type: URI\n+        matcher:\n+          exact: \"spiffe://lyft.com/test-team\"\n )EOF\";\n \n   TestUtilOptions test_options(client_ctx_yaml, server_ctx_yaml, true, GetParam());\n@@ -1105,8 +1107,10 @@ TEST_P(SslSocketTest, Ipv4San) {\n     validation_context:\n       trusted_ca:\n         filename: \"{{ test_rundir }}/test/config/integration/certs/upstreamcacert.pem\"\n-      match_subject_alt_names:\n-        exact: \"127.0.0.1\"\n+      match_typed_subject_alt_names:\n+      - san_type: IP_ADDRESS\n+        matcher:\n+          exact: \"127.0.0.1\"\n )EOF\";\n \n   const std::string server_ctx_yaml = R\"EOF(\n@@ -1129,8 +1133,10 @@ TEST_P(SslSocketTest, Ipv6San) {\n     validation_context:\n       trusted_ca:\n         filename: \"{{ test_rundir }}/test/config/integration/certs/upstreamcacert.pem\"\n-      match_subject_alt_names:\n-        exact: \"::1\"\n+      match_typed_subject_alt_names:\n+      - san_type: IP_ADDRESS\n+        matcher:\n+          exact: \"::1\"\n )EOF\";\n \n   const std::string server_ctx_yaml = R\"EOF(\n@@ -1533,8 +1539,10 @@ TEST_P(SslSocketTest, FailedClientAuthSanVerificationNoClientCert) {\n     validation_context:\n       trusted_ca:\n         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n-      match_subject_alt_names:\n-        exact: \"example.com\"\n+      match_typed_subject_alt_names:\n+      - san_type: DNS\n+        matcher:\n+          exact: \"example.com\"\n )EOF\";\n \n   TestUtilOptions test_options(client_ctx_yaml, server_ctx_yaml, false, GetParam());\n@@ -1561,8 +1569,10 @@ TEST_P(SslSocketTest, FailedClientAuthSanVerification) {\n     validation_context:\n       trusted_ca:\n         filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n-      match_subject_alt_names:\n-        exact: \"example.com\"\n+      match_typed_subject_alt_names:\n+      - san_type: DNS\n+        matcher:\n+          exact: \"example.com\"\n )EOF\";\n \n   TestUtilOptions test_options(client_ctx_yaml, server_ctx_yaml, false, GetParam());"
        },
        {
          "filename": "test/integration/ads_integration.cc",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -145,7 +145,10 @@ void AdsIntegrationTest::initializeAds(const bool rate_limiting) {\n     auto* validation_context = context.mutable_common_tls_context()->mutable_validation_context();\n     validation_context->mutable_trusted_ca()->set_filename(\n         TestEnvironment::runfilesPath(\"test/config/integration/certs/upstreamcacert.pem\"));\n-    validation_context->add_match_subject_alt_names()->set_suffix(\"lyft.com\");\n+    auto* san_matcher = validation_context->add_match_typed_subject_alt_names();\n+    san_matcher->mutable_matcher()->set_suffix(\"lyft.com\");\n+    san_matcher->set_san_type(\n+        envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS);\n     if (clientType() == Grpc::ClientType::GoogleGrpc) {\n       auto* google_grpc = grpc_service->mutable_google_grpc();\n       auto* ssl_creds = google_grpc->mutable_channel_credentials()->mutable_ssl_credentials();"
        },
        {
          "filename": "test/integration/ssl_utility.cc",
          "status": "modified",
          "additions": 17,
          "deletions": 2,
          "patch": "@@ -66,8 +66,23 @@ void initializeUpstreamTlsContextConfig(\n     common_context->add_alpn_protocols(Http::Utility::AlpnNames::get().Http3);\n   }\n   if (!options.san_.empty()) {\n-    common_context->mutable_validation_context()->add_match_subject_alt_names()->set_exact(\n-        options.san_);\n+    envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher* matcher =\n+        common_context->mutable_validation_context()->add_match_typed_subject_alt_names();\n+    matcher->mutable_matcher()->set_exact(options.san_);\n+    matcher->set_san_type(\n+        envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS);\n+    matcher = common_context->mutable_validation_context()->add_match_typed_subject_alt_names();\n+    matcher->mutable_matcher()->set_exact(options.san_);\n+    matcher->set_san_type(\n+        envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::URI);\n+    matcher = common_context->mutable_validation_context()->add_match_typed_subject_alt_names();\n+    matcher->mutable_matcher()->set_exact(options.san_);\n+    matcher->set_san_type(\n+        envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::EMAIL);\n+    matcher = common_context->mutable_validation_context()->add_match_typed_subject_alt_names();\n+    matcher->mutable_matcher()->set_exact(options.san_);\n+    matcher->set_san_type(\n+        envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::IP_ADDRESS);\n   }\n   for (const std::string& cipher_suite : options.cipher_suites_) {\n     common_context->mutable_tls_params()->add_cipher_suites(cipher_suite);"
        },
        {
          "filename": "test/integration/xfcc_integration_test.cc",
          "status": "modified",
          "additions": 25,
          "deletions": 9,
          "patch": "@@ -6,6 +6,7 @@\n #include \"envoy/config/bootstrap/v3/bootstrap.pb.h\"\n #include \"envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.pb.h\"\n #include \"envoy/extensions/transport_sockets/tls/v3/cert.pb.h\"\n+#include \"envoy/extensions/transport_sockets/tls/v3/common.pb.h\"\n #include \"envoy/stats/scope.h\"\n \n #include \"source/common/event/dispatcher_impl.h\"\n@@ -45,21 +46,33 @@ Network::TransportSocketFactoryPtr XfccIntegrationTest::createClientSslContext(b\n   validation_context:\n     trusted_ca:\n       filename: {{ test_rundir }}/test/config/integration/certs/cacert.pem\n-    match_subject_alt_names:\n-      exact: \"spiffe://lyft.com/backend-team\"\n-      exact: \"lyft.com\"\n-      exact: \"www.lyft.com\"\n+    match_typed_subject_alt_names:\n+    - san_type: URI\n+      matcher:\n+        exact: \"spiffe://lyft.com/backend-team\"\n+    - san_type: DNS\n+      matcher:\n+        exact: \"lyft.com\"\n+    - san_type: DNS\n+      matcher:\n+        exact: \"www.lyft.com\"\n )EOF\";\n \n   const std::string yaml_mtls = R\"EOF(\n common_tls_context:\n   validation_context:\n     trusted_ca:\n       filename: {{ test_rundir }}/test/config/integration/certs/cacert.pem\n-    match_subject_alt_names:\n-      exact: \"spiffe://lyft.com/backend-team\"\n-      exact: \"lyft.com\"\n-      exact: \"www.lyft.com\"\n+    match_typed_subject_alt_names:\n+    - san_type: URI\n+      matcher:\n+        exact: \"spiffe://lyft.com/backend-team\"\n+    - san_type: DNS\n+      matcher:\n+        exact: \"lyft.com\"\n+    - san_type: DNS\n+      matcher:\n+       exact: \"www.lyft.com\"\n   tls_certificates:\n     certificate_chain:\n       filename: {{ test_rundir }}/test/config/integration/certs/clientcert.pem\n@@ -135,7 +148,10 @@ void XfccIntegrationTest::initialize() {\n     auto* validation_context = context.mutable_common_tls_context()->mutable_validation_context();\n     validation_context->mutable_trusted_ca()->set_filename(\n         TestEnvironment::runfilesPath(\"test/config/integration/certs/upstreamcacert.pem\"));\n-    validation_context->add_match_subject_alt_names()->set_suffix(\"lyft.com\");\n+    auto* san_matcher = validation_context->add_match_typed_subject_alt_names();\n+    san_matcher->mutable_matcher()->set_suffix(\"lyft.com\");\n+    san_matcher->set_san_type(\n+        envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher::DNS);\n     transport_socket->set_name(\"envoy.transport_sockets.tls\");\n     transport_socket->mutable_typed_config()->PackFrom(context);\n   });"
        },
        {
          "filename": "test/mocks/ssl/mocks.h",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -159,8 +159,9 @@ class MockCertificateValidationContextConfig : public CertificateValidationConte\n   MOCK_METHOD(const std::string&, caCertPath, (), (const));\n   MOCK_METHOD(const std::string&, certificateRevocationList, (), (const));\n   MOCK_METHOD(const std::string&, certificateRevocationListPath, (), (const));\n-  MOCK_METHOD(const std::vector<envoy::type::matcher::v3::StringMatcher>&, subjectAltNameMatchers,\n-              (), (const));\n+  MOCK_METHOD(\n+      const std::vector<envoy::extensions::transport_sockets::tls::v3::SubjectAltNameMatcher>&,\n+      subjectAltNameMatchers, (), (const));\n   MOCK_METHOD(const std::vector<std::string>&, verifyCertificateHashList, (), (const));\n   MOCK_METHOD(const std::vector<std::string>&, verifyCertificateSpkiList, (), (const));\n   MOCK_METHOD(bool, allowExpiredCertificate, (), (const));"
        },
        {
          "filename": "test/per_file_coverage.sh",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -71,7 +71,7 @@ declare -a KNOWN_LOW_COVERAGE=(\n \"source/extensions/tracers/zipkin:96.1\"\n \"source/extensions/transport_sockets:95.3\"\n \"source/extensions/transport_sockets/tls:94.5\"\n-\"source/extensions/transport_sockets/tls/cert_validator:95.8\"\n+\"source/extensions/transport_sockets/tls/cert_validator:95.7\"\n \"source/extensions/transport_sockets/tls/ocsp:96.5\"\n \"source/extensions/transport_sockets/tls/private_key:77.8\"\n \"source/extensions/wasm_runtime/wamr:0.0\" # Not enabled in coverage build"
        },
        {
          "filename": "test/server/listener_manager_impl_quic_only_test.cc",
          "status": "modified",
          "additions": 28,
          "deletions": 12,
          "patch": "@@ -60,9 +60,13 @@ TEST_F(ListenerManagerImplQuicOnlyTest, QuicListenerFactoryAndSslContext) {\n           validation_context:\n             trusted_ca:\n               filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n-            match_subject_alt_names:\n-            - exact: localhost\n-            - exact: 127.0.0.1\n+            match_typed_subject_alt_names:\n+            - matcher:\n+                exact: localhost\n+              san_type: URI\n+            - matcher:\n+                exact: 127.0.0.1\n+              san_type: IP_ADDRESS\n udp_listener_config:\n   quic_options: {}\n   )EOF\",\n@@ -161,9 +165,13 @@ TEST_F(ListenerManagerImplQuicOnlyTest, QuicListenerFactoryWithWrongTransportSoc\n         validation_context:\n           trusted_ca:\n             filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n-          match_subject_alt_names:\n-          - exact: localhost\n-          - exact: 127.0.0.1\n+          match_typed_subject_alt_names:\n+          - matcher:\n+              exact: localhost\n+            san_type: URI\n+          - matcher:\n+              exact: 127.0.0.1\n+            san_type: IP_ADDRESS\n udp_listener_config:\n   quic_options: {}\n   )EOF\",\n@@ -205,9 +213,13 @@ TEST_F(ListenerManagerImplQuicOnlyTest, QuicListenerFactoryWithWrongCodec) {\n           validation_context:\n             trusted_ca:\n               filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n-            match_subject_alt_names:\n-            - exact: localhost\n-            - exact: 127.0.0.1\n+            match_typed_subject_alt_names:\n+            - matcher:\n+                exact: localhost\n+              san_type: URI\n+            - matcher:\n+                exact: 127.0.0.1\n+              san_type: IP_ADDRESS\n udp_listener_config:\n   quic_options: {}\n   )EOF\",\n@@ -259,9 +271,13 @@ TEST_F(ListenerManagerImplQuicOnlyTest, QuicListenerFactoryWithConnectionBalence\n           validation_context:\n             trusted_ca:\n               filename: \"{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem\"\n-            match_subject_alt_names:\n-            - exact: localhost\n-            - exact: 127.0.0.1\n+            match_typed_subject_alt_names:\n+            - matcher:\n+                exact: localhost\n+              san_type: URI\n+            - matcher:\n+                exact: 127.0.0.1\n+              san_type: IP_ADDRESS\n udp_listener_config:\n   quic_options: {}\n connection_balance_config:"
        }
      ],
      "file_patterns": {
        "security_files": 5,
        "config_files": 8,
        "dependency_files": 0,
        "test_files": 22,
        "unique_directories": 23,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "078dae3549912e632c3776a5e9a4679226093276",
            "date": "2025-01-14T14:27:08Z",
            "author_login": "agrawroh"
          },
          {
            "sha": "7b20933ee263eb9aeaceee6bc309b80b997cbbb2",
            "date": "2025-01-14T14:13:49Z",
            "author_login": "phlax"
          },
          {
            "sha": "03cb8d59f80a2a75d9e1289c909e5979a79ace91",
            "date": "2025-01-13T06:31:54Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "3487b225f48717dd5a2babb5f921df4353633cee",
            "date": "2025-01-13T06:10:11Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "acdcfc6ac262ee4087a652532b93922550efb061",
            "date": "2025-01-10T07:01:57Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
    "cwe_id": "CWE-295",
    "description": "Envoy is an open source edge and service proxy, designed for cloud-native applications. The default_validator.cc implementation used to implement the default certificate validation routines has a \"type confusion\" bug when processing subjectAltNames. This processing allows, for example, an rfc822Name or uniformResourceIndicator to be authenticated as a domain name. This confusion allows for the bypassing of nameConstraints, as processed by the underlying OpenSSL/BoringSSL implementation, exposing the possibility of impersonation of arbitrary servers. As a result Envoy will trust upstream certificates that should not be trusted.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-02-22T23:15:11.223",
    "last_modified": "2024-11-21T06:45:10.103",
    "fix_date": "2021-11-24T14:28:02Z"
  },
  "references": [
    {
      "url": "https://github.com/envoyproxy/envoy/commit/bb95af848c939cfe5b5ee33c5b1770558077e64e",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-c9g7-xwcv-pjx2",
      "source": "security-advisories@github.com",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/commit/bb95af848c939cfe5b5ee33c5b1770558077e64e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/envoyproxy/envoy/security/advisories/GHSA-c9g7-xwcv-pjx2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Issue Tracking",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:59.740835",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "envoy",
    "owner": "envoyproxy",
    "created_at": "2016-08-08T15:07:24Z",
    "updated_at": "2025-01-14T12:22:22Z",
    "pushed_at": "2025-01-14T05:36:17Z",
    "size": 240648,
    "stars": 25321,
    "forks": 4848,
    "open_issues": 1639,
    "watchers": 25321,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "C++": 48293036,
      "Starlark": 3105942,
      "Java": 1320095,
      "Python": 605206,
      "Assembly": 327095,
      "Kotlin": 309606,
      "Swift": 250537,
      "Shell": 229801,
      "Go": 183281,
      "Rust": 107190,
      "JavaScript": 66339,
      "C": 61597,
      "Objective-C++": 55490,
      "Objective-C": 48840,
      "Jinja": 47798,
      "Smarty": 3528,
      "CSS": 2927,
      "HTML": 1522,
      "Emacs Lisp": 966,
      "Dockerfile": 960,
      "Thrift": 748,
      "PureBasic": 472,
      "Batchfile": 439,
      "Makefile": 303
    },
    "commit_activity": {
      "total_commits_last_year": 3286,
      "avg_commits_per_week": 63.19230769230769,
      "days_active_last_year": 303
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:55:59.245540"
  }
}