{
  "cve_id": "CVE-2022-21677",
  "github_data": {
    "repository": "discourse/discourse",
    "fix_commit": "fff8b98485561b12d070c0a8c39f4e503813ab44",
    "related_commits": [
      "fff8b98485561b12d070c0a8c39f4e503813ab44",
      "fff8b98485561b12d070c0a8c39f4e503813ab44"
    ],
    "patch_url": "https://github.com/discourse/discourse/commit/fff8b98485561b12d070c0a8c39f4e503813ab44.patch",
    "fix_commit_details": {
      "sha": "fff8b98485561b12d070c0a8c39f4e503813ab44",
      "commit_date": "2022-01-10T03:28:20Z",
      "author": {
        "login": "tgxworld",
        "type": "User",
        "stats": {
          "total_commits": 4679,
          "average_weekly_commits": 6.7518037518037515,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 404
        }
      },
      "commit_message": {
        "title": "SECURITY: Advanced group search did not respect visiblity of groups.",
        "length": 68,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 60,
        "additions": 52,
        "deletions": 8
      },
      "files": [
        {
          "filename": "lib/search.rb",
          "status": "modified",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -583,7 +583,11 @@ def post_action_type_filter(posts, post_action_type)\n   end\n \n   advanced_filter(/^group:(.+)$/i) do |posts, match|\n-    group_id = Group.where('name ilike ? OR (id = ? AND id > 0)', match, match.to_i).pluck_first(:id)\n+    group_id = Group\n+      .visible_groups(@guardian.user)\n+      .members_visible_groups(@guardian.user)\n+      .where('name ilike ? OR (id = ? AND id > 0)', match, match.to_i).pluck_first(:id)\n+\n     if group_id\n       posts.where(\"posts.user_id IN (select gu.user_id from group_users gu where gu.group_id = ?)\", group_id)\n     else"
        },
        {
          "filename": "spec/components/search_spec.rb",
          "status": "modified",
          "additions": 47,
          "deletions": 7,
          "patch": "@@ -1248,15 +1248,55 @@ def search\n       expect(Search.execute(\"@#{post_1.user.username}\").posts).to contain_exactly(post_1)\n     end\n \n-    it 'supports group' do\n-      topic = Fabricate(:topic, created_at: 3.months.ago)\n-      post = Fabricate(:post, raw: 'hi this is a test 123 123', topic: topic)\n+    context \"searching for posts made by users of a group\" do\n+      fab!(:topic) { Fabricate(:topic, created_at: 3.months.ago) }\n+      fab!(:user) { Fabricate(:user) }\n+      fab!(:user_2) { Fabricate(:user) }\n+      fab!(:user_3) { Fabricate(:user) }\n+      fab!(:group) { Fabricate(:group, name: \"Like_a_Boss\").tap { |g| g.add(user) } }\n+      fab!(:group_2) { Fabricate(:group).tap { |g| g.add(user_2) } }\n+      let!(:post) { Fabricate(:post, raw: 'hi this is a test 123 123', topic: topic, user: user) }\n+      let!(:post_2) { Fabricate(:post, user: user_2) }\n+\n+      it 'should not return any posts if group does not exist' do\n+        group.update!(\n+          visibility_level: Group.visibility_levels[:public],\n+          members_visibility_level: Group.visibility_levels[:public]\n+        )\n+\n+        expect(Search.execute('group:99999').posts).to eq([])\n+      end\n+\n+      it 'should return the right posts for a public group' do\n+        group.update!(\n+          visibility_level: Group.visibility_levels[:public],\n+          members_visibility_level: Group.visibility_levels[:public]\n+        )\n \n-      group = Group.create!(name: \"Like_a_Boss\")\n-      GroupUser.create!(user_id: post.user_id, group_id: group.id)\n+        expect(Search.execute('group:like_a_boss').posts).to contain_exactly(post)\n+        expect(Search.execute(\"group:#{group.id}\").posts).to contain_exactly(post)\n+      end\n \n-      expect(Search.execute('group:like_a_boss').posts.length).to eq(1)\n-      expect(Search.execute('group:\"like a brick\"').posts.length).to eq(0)\n+      it \"should return the right posts for a public group with members' visibility restricted to logged on users\" do\n+        group.update!(\n+          visibility_level: Group.visibility_levels[:public],\n+          members_visibility_level: Group.visibility_levels[:logged_on_users]\n+        )\n+\n+        expect(Search.execute(\"group:#{group.id}\").posts).to eq([])\n+        expect(Search.execute(\"group:#{group.id}\", guardian: Guardian.new(user_3)).posts).to contain_exactly(post)\n+      end\n+\n+      it \"should return the right posts for a group with visibility restricted to logged on users with members' visibility restricted to members\" do\n+        group.update!(\n+          visibility_level: Group.visibility_levels[:logged_on_users],\n+          members_visibility_level: Group.visibility_levels[:members]\n+        )\n+\n+        expect(Search.execute(\"group:#{group.id}\").posts).to eq([])\n+        expect(Search.execute(\"group:#{group.id}\", guardian: Guardian.new(user_3)).posts).to eq([])\n+        expect(Search.execute(\"group:#{group.id}\", guardian: Guardian.new(user)).posts).to contain_exactly(post)\n+      end\n     end\n \n     it 'supports badge' do"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "eb64db828e116edbacdf10266f8102ed7028a2f2",
            "date": "2025-01-14T13:28:46Z",
            "author_login": "renato"
          },
          {
            "sha": "7330cfa76a6e6ab7bf90702fb1db5e1a37a2eca1",
            "date": "2025-01-14T13:28:16Z",
            "author_login": "awesomerobot"
          },
          {
            "sha": "f8c493f3c4ee5e38dff460288996c780a6458e29",
            "date": "2025-01-14T12:47:05Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6cb8b576d0c7902b99cbb39bc7aaa473d454118a",
            "date": "2025-01-14T12:46:14Z",
            "author_login": "CvX"
          },
          {
            "sha": "12c412acc699ac47bd98c999a483ced96888f799",
            "date": "2025-01-14T12:35:58Z",
            "author_login": "dependabot[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Discourse is an open source discussion platform. Discourse groups can be configured with varying visibility levels for the group as well as the group members. By default, a newly created group has its visibility set to public and the group's members visibility set to public as well. However, a group's visibility and the group's members visibility can be configured such that it is restricted to logged on users, members of the group or staff users. A vulnerability has been discovered in versions prior to 2.7.13 and 2.8.0.beta11 where the group advanced search option does not respect the group's visibility and members visibility level. As such, a group with restricted visibility or members visibility can be revealed through search with the right search option. This issue is patched in `stable` version 2.7.13, `beta` version 2.8.0.beta11, and `tests-passed` version 2.8.0.beta11 versions of Discourse. There are no workarounds aside from upgrading.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-14T17:15:13.153",
    "last_modified": "2024-11-21T06:45:12.663",
    "fix_date": "2022-01-10T03:28:20Z"
  },
  "references": [
    {
      "url": "https://github.com/discourse/discourse/commit/fff8b98485561b12d070c0a8c39f4e503813ab44",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-768r-ppv4-5r27",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/commit/fff8b98485561b12d070c0a8c39f4e503813ab44",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/discourse/discourse/security/advisories/GHSA-768r-ppv4-5r27",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.027479",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "discourse",
    "owner": "discourse",
    "created_at": "2013-01-12T00:25:55Z",
    "updated_at": "2025-01-14T12:47:11Z",
    "pushed_at": "2025-01-14T12:47:07Z",
    "size": 692535,
    "stars": 42892,
    "forks": 8390,
    "open_issues": 67,
    "watchers": 42892,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Ruby": 20275963,
      "JavaScript": 9399743,
      "HTML": 1461704,
      "Handlebars": 1070089,
      "SCSS": 988476,
      "Mustache": 32177,
      "Shell": 12314,
      "CSS": 2558
    },
    "commit_activity": {
      "total_commits_last_year": 5032,
      "avg_commits_per_week": 96.76923076923077,
      "days_active_last_year": 300
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "gpl-2.0"
    },
    "collected_at": "2025-01-14T13:00:05.486140"
  }
}