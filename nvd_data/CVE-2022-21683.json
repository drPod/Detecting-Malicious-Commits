{
  "cve_id": "CVE-2022-21683",
  "github_data": {
    "repository": "wagtail/wagtail",
    "fix_commit": "5fe901e5d86ed02dbbb63039a897582951266afd",
    "related_commits": [
      "5fe901e5d86ed02dbbb63039a897582951266afd",
      "5fe901e5d86ed02dbbb63039a897582951266afd"
    ],
    "patch_url": null,
    "fix_commit_details": {
      "sha": "5fe901e5d86ed02dbbb63039a897582951266afd",
      "commit_date": "2021-12-09T14:20:53Z",
      "author": {
        "login": "emilytoppm",
        "type": "User",
        "stats": {
          "total_commits": 374,
          "average_weekly_commits": 0.6493055555555556,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 68
        }
      },
      "commit_message": {
        "title": "Fix commenting thread notifications being sent to non-thread users",
        "length": 66,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 28,
        "additions": 25,
        "deletions": 3
      },
      "files": [
        {
          "filename": "wagtail/admin/tests/pages/test_edit_page.py",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -2100,6 +2100,7 @@ def setUp(self):\n         self.subscriber = self.create_user('subscriber')\n         self.non_subscriber = self.create_user('non-subscriber')\n         self.non_subscriber_2 = self.create_user('non-subscriber-2')\n+        self.never_emailed_user = self.create_user('never-emailed')\n \n         PageSubscription.objects.create(\n             page=self.child_page,\n@@ -2113,6 +2114,23 @@ def setUp(self):\n             comment_notifications=True\n         )\n \n+        # Add comment and reply on a different page for the never_emailed_user\n+        # They should never be notified\n+        comment_on_other_page = Comment.objects.create(\n+            page=self.root_page,\n+            user=self.never_emailed_user,\n+            text='a comment'\n+        )\n+\n+        CommentReply.objects.create(\n+            user=self.never_emailed_user,\n+            comment=comment_on_other_page,\n+            text='a reply'\n+        )\n+\n+    def assertNeverEmailedWrongUser(self):\n+        self.assertNotIn(self.never_emailed_user.email, [to for email in mail.outbox for to in email.to])\n+\n     def test_new_comment(self):\n         post_data = {\n             'title': \"I've been edited!\",\n@@ -2144,6 +2162,7 @@ def test_new_comment(self):\n \n         # Check notification email\n         self.assertEqual(len(mail.outbox), 1)\n+        self.assertNeverEmailedWrongUser()\n         self.assertEqual(mail.outbox[0].to, [self.subscriber.email])\n         self.assertEqual(mail.outbox[0].subject, 'test@email.com has updated comments on \"I\\'ve been edited! (simple page)\"')\n         self.assertIn('New comments:\\n - \"A test comment\"\\n\\n', mail.outbox[0].body)\n@@ -2283,6 +2302,7 @@ def test_resolve_comment(self):\n \n         # Check notification email\n         self.assertEqual(len(mail.outbox), 2)\n+        self.assertNeverEmailedWrongUser()\n         # The non subscriber created the comment, so should also get an email\n         self.assertEqual(mail.outbox[0].to, [self.non_subscriber.email])\n         self.assertEqual(mail.outbox[0].subject, 'test@email.com has updated comments on \"I\\'ve been edited! (simple page)\"')\n@@ -2337,6 +2357,7 @@ def test_delete_comment(self):\n \n         # Check notification email\n         self.assertEqual(len(mail.outbox), 1)\n+        self.assertNeverEmailedWrongUser()\n         self.assertEqual(mail.outbox[0].to, [self.subscriber.email])\n         self.assertEqual(mail.outbox[0].subject, 'test@email.com has updated comments on \"I\\'ve been edited! (simple page)\"')\n         self.assertIn('Deleted comments:\\n - \"A test comment\"\\n\\n', mail.outbox[0].body)\n@@ -2398,6 +2419,7 @@ def test_new_reply(self):\n \n         # Check notification email\n         self.assertEqual(len(mail.outbox), 3)\n+        self.assertNeverEmailedWrongUser()\n \n         recipients = [mail.to for mail in mail.outbox]\n         # The other non subscriber replied in the thread, so should get an email"
        },
        {
          "filename": "wagtail/admin/views/pages/edit.py",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -141,11 +141,11 @@ def send_commenting_notifications(self, changes):\n         # Get subscribers to individual threads\n         replies = CommentReply.objects.filter(comment_id__in=relevant_comment_ids)\n         comments = Comment.objects.filter(id__in=relevant_comment_ids)\n-        thread_users = get_user_model().objects.exclude(pk=self.request.user.pk).exclude(pk__in=subscribers.values_list('user_id', flat=True)).prefetch_related(\n+        thread_users = get_user_model().objects.exclude(pk=self.request.user.pk).exclude(pk__in=subscribers.values_list('user_id', flat=True)).filter(\n+            Q(comment_replies__comment_id__in=relevant_comment_ids) | Q(**{('%s__pk__in' % COMMENTS_RELATION_NAME): relevant_comment_ids})\n+        ).prefetch_related(\n             Prefetch('comment_replies', queryset=replies),\n             Prefetch(COMMENTS_RELATION_NAME, queryset=comments)\n-        ).exclude(\n-            Q(comment_replies__isnull=True) & Q(**{('%s__isnull' % COMMENTS_RELATION_NAME): True})\n         )\n \n         # Skip if no recipients"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "77a55e3f60db7c27d1139d5455b7ff7ce6f037f1",
            "date": "2025-01-24T22:53:03Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "9d496be14c805d08101288a795198e270c822680",
            "date": "2025-01-23T17:07:48Z",
            "author_login": "thibaudcolas"
          },
          {
            "sha": "29e41ea6fc3e0928d3ba91369ac05ba5689377b8",
            "date": "2025-01-23T16:54:05Z",
            "author_login": "thibaudcolas"
          },
          {
            "sha": "484c71c539813f35d65d8fd30ac721d8a26da888",
            "date": "2025-01-23T16:40:19Z",
            "author_login": "thibaudcolas"
          },
          {
            "sha": "4b99a1755423f2db3216f7eca0d292f3f5f87d72",
            "date": "2025-01-23T12:54:44Z",
            "author_login": "gasman"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 3.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N",
    "cwe_id": "CWE-200",
    "description": "Wagtail is a Django based content management system focused on flexibility and user experience. When notifications for new replies in comment threads are sent, they are sent to all users who have replied or commented anywhere on the site, rather than only in the relevant threads. This means that a user could listen in to new comment replies on pages they have not have editing access to, as long as they have left a comment or reply somewhere on the site. A patched version has been released as Wagtail 2.15.2, which restores the intended behaviour - to send notifications for new replies to the participants in the active thread only (editing permissions are not considered). New comments can be disabled by setting `WAGTAILADMIN_COMMENTS_ENABLED = False` in the Django settings file.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-18T18:15:08.430",
    "last_modified": "2024-11-21T06:45:13.483",
    "fix_date": "2021-12-09T14:20:53Z"
  },
  "references": [
    {
      "url": "https://github.com/wagtail/wagtail/commit/5fe901e5d86ed02dbbb63039a897582951266afd",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/releases/tag/v2.15.2",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-xqxm-2rpm-3889",
      "source": "security-advisories@github.com",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/commit/5fe901e5d86ed02dbbb63039a897582951266afd",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/releases/tag/v2.15.2",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/wagtail/wagtail/security/advisories/GHSA-xqxm-2rpm-3889",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Mitigation",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.037985",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "wagtail",
    "owner": "wagtail",
    "created_at": "2014-02-03T12:41:59Z",
    "updated_at": "2025-01-26T03:30:16Z",
    "pushed_at": "2025-01-25T11:43:50Z",
    "size": 227639,
    "stars": 18657,
    "forks": 3967,
    "open_issues": 975,
    "watchers": 18657,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 8307657,
      "JavaScript": 1144779,
      "TypeScript": 559700,
      "HTML": 526327,
      "SCSS": 231062,
      "Shell": 6841,
      "CSS": 2719,
      "Dockerfile": 2038,
      "Makefile": 1389,
      "MDX": 271
    },
    "commit_activity": {
      "total_commits_last_year": 1475,
      "avg_commits_per_week": 28.365384615384617,
      "days_active_last_year": 269
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T07:34:58.418633"
  }
}