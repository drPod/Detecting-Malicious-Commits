{
  "cve_id": "CVE-2022-21685",
  "github_data": {
    "repository": "paritytech/frontier",
    "fix_commit": "8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664",
    "related_commits": [
      "8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664",
      "8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664"
    ],
    "patch_url": "https://github.com/paritytech/frontier/commit/8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664.patch",
    "fix_commit_details": {
      "sha": "8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664",
      "commit_date": "2022-01-13T16:23:07Z",
      "author": {
        "login": "notlesh",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Handle 0 exponent with fudged length correctly in ModExp (#549)",
        "length": 464,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 56,
        "additions": 51,
        "deletions": 5
      },
      "files": [
        {
          "filename": "frame/evm/precompile/modexp/src/lib.rs",
          "status": "modified",
          "additions": 51,
          "deletions": 5,
          "patch": "@@ -47,7 +47,10 @@ fn calculate_gas_cost(\n \t\t\twords += 1;\n \t\t}\n \n-\t\t// TODO: prevent/handle overflow\n+\t\t// Note: can't overflow because we take words to be some u64 value / 8, which is\n+\t\t// necessarily less than sqrt(u64::MAX).\n+\t\t// Additionally, both base_length and mod_length are bounded to 1024, so this has\n+\t\t// an upper bound of roughly (1024 / 8) squared\n \t\twords * words\n \t}\n \n@@ -63,8 +66,17 @@ fn calculate_gas_cost(\n \t\t\tlet bytes: [u8; 32] = [0xFF; 32];\n \t\t\tlet max_256_bit_uint = BigUint::from_bytes_be(&bytes);\n \n+\t\t\t// from the EIP spec:\n+\t\t\t// (8 * (exp_length - 32)) + ((exponent & (2**256 - 1)).bit_length() - 1)\n+\t\t\t//\n+\t\t\t// Notes:\n+\t\t\t// * exp_length is bounded to 1024 and is > 32\n+\t\t\t// * exponent can be zero, so we subtract 1 after adding the other terms (whose sum\n+\t\t\t//   must be > 0)\n+\t\t\t// * the addition can't overflow because the terms are both capped at roughly\n+\t\t\t//   8 * max size of exp_length (1024)\n \t\t\titeration_count =\n-\t\t\t\t(8 * (exp_length - 32)) + ((exponent.bitand(max_256_bit_uint)).bits() - 1);\n+\t\t\t\t(8 * (exp_length - 32)) + exponent.bitand(max_256_bit_uint).bits() - 1;\n \t\t}\n \n \t\tmax(iteration_count, 1)\n@@ -89,7 +101,7 @@ fn calculate_gas_cost(\n // 6) modulus, size as described above\n //\n //\n-// NOTE: input sizes are arbitrarily large (up to 256 bits), with the expectation\n+// NOTE: input sizes are bound to 1024 bytes, with the expectation\n //       that gas limits would be applied before actual computation.\n //\n //       maximum stack size will also prevent abuse.\n@@ -133,7 +145,7 @@ impl Precompile for Modexp {\n \t\tlet mod_len_big = BigUint::from_bytes_be(&buf);\n \t\tif mod_len_big > max_size_big {\n \t\t\treturn Err(PrecompileFailure::Error {\n-\t\t\t\texit_status: ExitError::Other(\"unreasonably large exponent length\".into()),\n+\t\t\t\texit_status: ExitError::Other(\"unreasonably large modulus length\".into()),\n \t\t\t});\n \t\t}\n \n@@ -162,7 +174,6 @@ impl Precompile for Modexp {\n \t\t\tlet exponent = BigUint::from_bytes_be(&input[exp_start..exp_start + exp_len]);\n \n \t\t\t// do our gas accounting\n-\t\t\t// TODO: we could technically avoid reading base first...\n \t\t\tlet gas_cost =\n \t\t\t\tcalculate_gas_cost(base_len as u64, exp_len as u64, mod_len as u64, &exponent);\n \t\t\tif let Some(gas_left) = target_gas {\n@@ -423,4 +434,39 @@ mod tests {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t#[test]\n+\tfn test_zero_exp_with_33_length() {\n+\t\t// This is a regression test which ensures that the 'iteration_count' calculation\n+\t\t// in 'calculate_iteration_count' cannot underflow.\n+\t\t//\n+\t\t// In debug mode, this underflow could cause a panic. Otherwise, it causes N**0 to\n+\t\t// be calculated at more-than-normal expense.\n+\t\t//\n+\t\t// TODO: cite security advisory\n+\n+\t\tlet input = vec![\n+\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n+\t\t];\n+\n+\t\tlet cost: u64 = 100000;\n+\n+\t\tlet context: Context = Context {\n+\t\t\taddress: Default::default(),\n+\t\t\tcaller: Default::default(),\n+\t\t\tapparent_value: From::from(0),\n+\t\t};\n+\n+\t\tlet precompile_result = Modexp::execute(&input, Some(cost), &context, false)\n+\t\t\t.expect(\"Modexp::execute() returned error\");\n+\n+\t\tassert_eq!(precompile_result.output.len(), 1); // should be same length as mod\n+\t\tlet result = BigUint::from_bytes_be(&precompile_result.output[..]);\n+\t\tlet expected = BigUint::parse_bytes(b\"0\", 10).unwrap();\n+\t\tassert_eq!(result, expected);\n+\t}\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "802b196808ddb6ef5565b0e9c3baa8b904c637f3",
            "date": "2025-01-13T05:57:49Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "30b0fad98b3da35f202f91bf98c8b1a0f467d656",
            "date": "2025-01-13T05:56:55Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "817a938a0b4e5a464163c189bcd6abaec8b0a6d6",
            "date": "2025-01-13T05:56:31Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "6c84eaae3d86c78a5c6baecafe68451251e96707",
            "date": "2025-01-13T05:56:03Z",
            "author_login": "dependabot[bot]"
          },
          {
            "sha": "04e2f665e5227109d2100ab2f59ad4f31ff91058",
            "date": "2025-01-13T05:54:29Z",
            "author_login": "pLabarta"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-191",
    "description": "Frontier is Substrate's Ethereum compatibility layer. Prior to commit number `8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664`, a bug in Frontier's MODEXP precompile implementation can cause an integer underflow in certain conditions. This will cause a node crash for debug builds. For release builds (and production WebAssembly binaries), the impact is limited as it can only cause a normal EVM out-of-gas. Users who do not use MODEXP precompile in their runtime are not impacted. A patch is available in pull request #549.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-14T17:15:13.333",
    "last_modified": "2024-11-21T06:45:13.753",
    "fix_date": "2022-01-13T16:23:07Z"
  },
  "references": [
    {
      "url": "https://github.com/paritytech/frontier/commit/8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/pull/549",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/security/advisories/GHSA-cjg2-2fjg-fph4",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/commit/8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/pull/549",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/paritytech/frontier/security/advisories/GHSA-cjg2-2fjg-fph4",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.027950",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "frontier",
    "owner": "paritytech",
    "created_at": "2018-11-08T13:10:57Z",
    "updated_at": "2025-01-13T05:57:53Z",
    "pushed_at": "2025-01-14T05:05:02Z",
    "size": 71567,
    "stars": 580,
    "forks": 511,
    "open_issues": 149,
    "watchers": 580,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Rust": 1552689,
      "TypeScript": 219803,
      "Solidity": 7119,
      "Handlebars": 5345,
      "JavaScript": 4300,
      "Makefile": 2075,
      "Shell": 1769,
      "Nix": 867
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:36:30.286455"
  }
}