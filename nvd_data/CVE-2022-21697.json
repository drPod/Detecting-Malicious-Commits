{
  "cve_id": "CVE-2022-21697",
  "github_data": {
    "repository": "jupyterhub/jupyter-server-proxy",
    "fix_commit": "fd31930bacd12188c448c886e0783529436b99eb",
    "related_commits": [
      "fd31930bacd12188c448c886e0783529436b99eb",
      "fd31930bacd12188c448c886e0783529436b99eb"
    ],
    "patch_url": "https://github.com/jupyterhub/jupyter-server-proxy/compare/v3.2.0...v3.2.1.patch",
    "fix_commit_details": {
      "sha": "fd31930bacd12188c448c886e0783529436b99eb",
      "commit_date": "2022-01-24T22:30:00Z",
      "author": {
        "login": "manics",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Merge pull request from GHSA-gcv9-6737-pjqw",
        "length": 83,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 145,
        "additions": 97,
        "deletions": 48
      },
      "files": [
        {
          "filename": "CHANGELOG.md",
          "status": "modified",
          "additions": 22,
          "deletions": 0,
          "patch": "@@ -1,5 +1,27 @@\n ## 3.2\n \n+### 3.2.1 - 2022-01-24\n+\n+3.2.1 is a security release, fixing a vulnerability [GHSA-gcv9-6737-pjqw](https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-gcv9-6737-pjqw) where `allowed_hosts` were not validated correctly.\n+\n+## Maintenance and upkeep improvements\n+\n+- Modernize docs without making changes to its content [#313](https://github.com/jupyterhub/jupyter-server-proxy/pull/313) ([@consideRatio](https://github.com/consideRatio))\n+- Remove no longer needed logic involving six [#312](https://github.com/jupyterhub/jupyter-server-proxy/pull/312) ([@consideRatio](https://github.com/consideRatio))\n+- Update language, from master to main [#311](https://github.com/jupyterhub/jupyter-server-proxy/pull/311) ([@consideRatio](https://github.com/consideRatio))\n+\n+## Other merged PRs\n+\n+- Remove empty JupyterLab style [#314](https://github.com/jupyterhub/jupyter-server-proxy/pull/314) ([@bollwyvl](https://github.com/bollwyvl))\n+- ci: avoid triggering ci twice on pre-commit.ci/dependabot prs [#310](https://github.com/jupyterhub/jupyter-server-proxy/pull/310) ([@consideRatio](https://github.com/consideRatio))\n+\n+## Contributors to this release\n+\n+([GitHub contributors page for this release](https://github.com/jupyterhub/jupyter-server-proxy/graphs/contributors?from=2021-11-29&to=2022-01-19&type=c))\n+\n+[@bollwyvl](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyter-server-proxy+involves%3Abollwyvl+updated%3A2021-11-29..2022-01-19&type=Issues) | [@consideRatio](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyter-server-proxy+involves%3AconsideRatio+updated%3A2021-11-29..2022-01-19&type=Issues) | [@welcome](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyter-server-proxy+involves%3Awelcome+updated%3A2021-11-29..2022-01-19&type=Issues) | [@yuvipanda](https://github.com/search?q=repo%3Ajupyterhub%2Fjupyter-server-proxy+involves%3Ayuvipanda+updated%3A2021-11-29..2022-01-19&type=Issues)\n+\n+\n ### 3.2.0 - 2021-11-29\n \n #### New features added"
        },
        {
          "filename": "jupyter_server_proxy/handlers.py",
          "status": "modified",
          "additions": 57,
          "deletions": 48,
          "patch": "@@ -209,12 +209,16 @@ def _get_context_path(self, host, port):\n             return url_path_join(self.base_url, 'proxy', host_and_port)\n \n     def get_client_uri(self, protocol, host, port, proxied_path):\n-        context_path = self._get_context_path(host, port)\n         if self.absolute_url:\n+            context_path = self._get_context_path(host, port)\n             client_path = url_path_join(context_path, proxied_path)\n         else:\n             client_path = proxied_path\n \n+        # ensure client_path always starts with '/'\n+        if not client_path.startswith(\"/\"):\n+            client_path = \"/\" + client_path\n+\n         # Quote spaces, \u00e5\u00e4\u00f6 and such, but only enough to send a valid web\n         # request onwards. To do this, we mark the RFC 3986 specs' \"reserved\"\n         # and \"un-reserved\" characters as safe that won't need quoting. The\n@@ -228,7 +232,7 @@ def get_client_uri(self, protocol, host, port, proxied_path):\n             protocol=protocol,\n             host=host,\n             port=port,\n-            path=client_path\n+            path=client_path,\n         )\n         if self.request.query:\n             client_uri += '?' + self.request.query\n@@ -297,13 +301,14 @@ async def proxy(self, host, port, proxied_path):\n         client = httpclient.AsyncHTTPClient()\n \n         req = self._build_proxy_request(host, port, proxied_path, body)\n+        self.log.debug(f\"Proxying request to {req.url}\")\n \n         try:\n             # Here, \"response\" is a tornado.httpclient.HTTPResponse object.\n             response = await client.fetch(req, raise_error=False)\n         except httpclient.HTTPError as err:\n             # We need to capture the timeout error even with raise_error=False,\n-            # because it only affects the HTTPError raised when a non-200 response \n+            # because it only affects the HTTPError raised when a non-200 response\n             # code is used, instead of suppressing all errors.\n             # Ref: https://www.tornadoweb.org/en/stable/httpclient.html#tornado.httpclient.AsyncHTTPClient.fetch\n             if err.code == 599:\n@@ -324,7 +329,7 @@ async def proxy(self, host, port, proxied_path):\n         else:\n             # Represent the original response as a RewritableResponse object.\n             original_response = RewritableResponse(orig_response=response)\n-            \n+\n             # The function (or list of functions) which should be applied to modify the\n             # response.\n             rewrite_response = self.rewrite_response\n@@ -688,53 +693,57 @@ def options(self, path):\n def setup_handlers(web_app, serverproxy_config):\n     host_allowlist = serverproxy_config.host_allowlist\n     rewrite_response = serverproxy_config.non_service_rewrite_response\n-    web_app.add_handlers('.*', [\n-        (\n-            url_path_join(\n-                web_app.settings['base_url'],\n-                r'/proxy/([^/]*):(\\d+)(.*)',\n+    web_app.add_handlers(\n+        \".*\",\n+        [\n+            (\n+                url_path_join(\n+                    web_app.settings[\"base_url\"],\n+                    r\"/proxy/([^/:@]+):(\\d+)(/.*|)\",\n+                ),\n+                RemoteProxyHandler,\n+                {\n+                    \"absolute_url\": False,\n+                    \"host_allowlist\": host_allowlist,\n+                    \"rewrite_response\": rewrite_response,\n+                },\n             ),\n-            RemoteProxyHandler,\n-            {\n-                'absolute_url': False,\n-                'host_allowlist': host_allowlist,\n-                'rewrite_response': rewrite_response,\n-            }\n-        ),\n-        (\n-            url_path_join(\n-                web_app.settings['base_url'],\n-                r'/proxy/absolute/([^/]*):(\\d+)(.*)',\n+            (\n+                url_path_join(\n+                    web_app.settings[\"base_url\"],\n+                    r\"/proxy/absolute/([^/:@]+):(\\d+)(/.*|)\",\n+                ),\n+                RemoteProxyHandler,\n+                {\n+                    \"absolute_url\": True,\n+                    \"host_allowlist\": host_allowlist,\n+                    \"rewrite_response\": rewrite_response,\n+                },\n             ),\n-            RemoteProxyHandler,\n-            {\n-                'absolute_url': True,\n-                'host_allowlist': host_allowlist,\n-                'rewrite_response': rewrite_response,\n-            }\n-        ),\n-        (\n-            url_path_join(\n-                web_app.settings['base_url'],\n-                r'/proxy/(\\d+)(.*)',\n+            (\n+                url_path_join(\n+                    web_app.settings[\"base_url\"],\n+                    r\"/proxy/(\\d+)(/.*|)\",\n+                ),\n+                LocalProxyHandler,\n+                {\n+                    \"absolute_url\": False,\n+                    \"rewrite_response\": rewrite_response,\n+                },\n             ),\n-            LocalProxyHandler,\n-            {\n-                'absolute_url': False,\n-                'rewrite_response': rewrite_response,\n-            },\n-        ),\n-        (\n-            url_path_join(\n-                web_app.settings['base_url'],\n-                r'/proxy/absolute/(\\d+)(.*)',\n+            (\n+                url_path_join(\n+                    web_app.settings[\"base_url\"],\n+                    r\"/proxy/absolute/(\\d+)(/.*|)\",\n+                ),\n+                LocalProxyHandler,\n+                {\n+                    \"absolute_url\": True,\n+                    \"rewrite_response\": rewrite_response,\n+                },\n             ),\n-            LocalProxyHandler,\n-            {\n-                'absolute_url': True,\n-                'rewrite_response': rewrite_response,\n-            },\n-        ),\n-    ])\n+        ],\n+    )\n+\n \n # vim: set et ts=4 sw=4:"
        },
        {
          "filename": "tests/test_proxies.py",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -291,3 +291,21 @@ async def _websocket_subprotocols():\n def test_server_proxy_websocket_subprotocols(event_loop):\n     event_loop.run_until_complete(_websocket_subprotocols())\n \n+@pytest.mark.parametrize(\n+    \"proxy_path, status\",\n+    [\n+        (\"127.0.0.1\", 404),\n+        (\"127.0.0.1/path\", 404),\n+        (\"127.0.0.1@192.168.1.1\", 404),\n+        (\"127.0.0.1@192.168.1.1/path\", 404),\n+        (\"user:pass@host:123/foo\", 403),\n+        (\"user:pass@host/foo\", 404),\n+        (\"absolute/127.0.0.1:123@192.168.1.1/path\", 404),\n+    ]\n+)\n+def test_bad_server_proxy_url(proxy_path, status):\n+    r = request_get(PORT, f\"/proxy/{proxy_path}\", TOKEN)\n+    assert r.code == status\n+    if status >= 400:\n+        # request should not have been proxied\n+        assert 'X-ProxyContextPath' not in r.headers"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 3,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "76a98c900605e31a9209e0897d3010d2c6057960",
            "date": "2024-12-04T18:47:43Z",
            "author_login": "ryanlovett"
          },
          {
            "sha": "c985e332b7d97b32e02295018f23b701547e2ebc",
            "date": "2024-11-06T08:31:58Z",
            "author_login": "minrk"
          },
          {
            "sha": "060624421e17bb74355ac7d29661f0ea90b69eb9",
            "date": "2024-11-04T23:16:10Z",
            "author_login": "pre-commit-ci[bot]"
          },
          {
            "sha": "7a491b657204a3e648e5acca96f981500fa03114",
            "date": "2024-11-04T23:15:38Z",
            "author_login": "pre-commit-ci[bot]"
          },
          {
            "sha": "fef3695e682c0b7604e00c87d290ea2a30ceaa53",
            "date": "2024-10-27T17:24:30Z",
            "author_login": "manics"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.3,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:L/A:N",
    "cwe_id": "CWE-918",
    "description": "Jupyter Server Proxy is a Jupyter notebook server extension to proxy web services. Versions of Jupyter Server Proxy prior to 3.2.1 are vulnerable to Server-Side Request Forgery (SSRF). Any user deploying Jupyter Server or Notebook with jupyter-proxy-server extension enabled is affected. A lack of input validation allows authenticated clients to proxy requests to other hosts, bypassing the `allowed_hosts` check. Because authentication is required, which already grants permissions to make the same requests via kernel or terminal execution, this is considered low to moderate severity. Users may upgrade to version 3.2.1 to receive a patch or, as a workaround, install the patch manually.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-25T14:15:08.907",
    "last_modified": "2024-11-21T06:45:15.290",
    "fix_date": "2022-01-24T22:30:00Z"
  },
  "references": [
    {
      "url": "https://github.com/jupyterhub/jupyter-server-proxy/commit/fd31930bacd12188c448c886e0783529436b99eb",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/jupyter-server-proxy/compare/v3.2.0...v3.2.1.patch",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-gcv9-6737-pjqw",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/jupyter-server-proxy/commit/fd31930bacd12188c448c886e0783529436b99eb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/jupyter-server-proxy/compare/v3.2.0...v3.2.1.patch",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/jupyterhub/jupyter-server-proxy/security/advisories/GHSA-gcv9-6737-pjqw",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.070767",
    "processing_status": "enhanced"
  },
  "repository_context": {
    "name": "jupyter-server-proxy",
    "owner": "jupyterhub",
    "created_at": "2016-10-18T22:02:06Z",
    "updated_at": "2025-01-24T18:18:23Z",
    "pushed_at": "2025-01-07T01:50:45Z",
    "size": 1487,
    "stars": 356,
    "forks": 149,
    "open_issues": 85,
    "watchers": 356,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [
      "main"
    ],
    "languages": {
      "Python": 109087,
      "TypeScript": 12359,
      "RobotFramework": 4992,
      "JavaScript": 1609,
      "HTML": 109
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "bsd-3-clause"
    },
    "collected_at": "2025-01-26T08:04:32.687825"
  }
}