{
  "cve_id": "CVE-2022-21702",
  "github_data": {
    "repository": "grafana/grafana",
    "fix_commit": "27726868b3d7c613844b55cd209ca93645c99b85",
    "related_commits": [
      "27726868b3d7c613844b55cd209ca93645c99b85",
      "27726868b3d7c613844b55cd209ca93645c99b85"
    ],
    "patch_url": "https://github.com/grafana/grafana/commit/27726868b3d7c613844b55cd209ca93645c99b85.patch",
    "fix_commit_details": {
      "sha": "27726868b3d7c613844b55cd209ca93645c99b85",
      "commit_date": "2022-01-21T15:43:04Z",
      "author": {
        "login": "marefr",
        "type": "User",
        "stats": {
          "total_commits": 1875,
          "average_weekly_commits": 3.2271944922547333,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 258
        }
      },
      "commit_message": {
        "title": "[v7.5.x] Fix for CVE-2022-21702 (#226)",
        "length": 62,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 81,
        "additions": 79,
        "deletions": 2
      },
      "files": [
        {
          "filename": "pkg/api/pluginproxy/ds_proxy.go",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -49,6 +49,7 @@ func (t *handleResponseTransport) RoundTrip(req *http.Request) (*http.Response,\n \t\treturn nil, err\n \t}\n \tres.Header.Del(\"Set-Cookie\")\n+\tproxyutil.SetProxyResponseHeaders(res.Header)\n \treturn res, nil\n }\n "
        },
        {
          "filename": "pkg/api/pluginproxy/ds_proxy_test.go",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -605,6 +605,18 @@ func TestDataSourceProxy_requestHandling(t *testing.T) {\n \t\tassert.Equal(t, \"important_cookie=important_value\", proxy.ctx.Resp.Header().Get(\"Set-Cookie\"))\n \t})\n \n+\tt.Run(\"When response should set Content-Security-Policy header\", func(t *testing.T) {\n+\t\tctx, ds := setUp(t)\n+\t\tdsPlugin := &plugins.DataSourcePlugin{}\n+\t\tproxy, err := NewDataSourceProxy(ds, dsPlugin, ctx, \"/render\", &setting.Cfg{})\n+\t\trequire.NoError(t, err)\n+\n+\t\tproxy.HandleRequest()\n+\n+\t\trequire.NoError(t, writeErr)\n+\t\tassert.Equal(t, \"sandbox\", proxy.ctx.Resp.Header().Get(\"Content-Security-Policy\"))\n+\t})\n+\n \tt.Run(\"Data source returns status code 401\", func(t *testing.T) {\n \t\tctx, ds := setUp(t, setUpCfg{\n \t\t\twriteCb: func(w http.ResponseWriter, r *http.Request) {"
        },
        {
          "filename": "pkg/api/pluginproxy/pluginproxy.go",
          "status": "modified",
          "additions": 7,
          "deletions": 1,
          "patch": "@@ -71,5 +71,11 @@ func NewApiPluginProxy(ctx *models.ReqContext, proxyPath string, route *plugins.\n \t\t}\n \t}\n \n-\treturn &httputil.ReverseProxy{Director: director}\n+\treturn &httputil.ReverseProxy{Director: director, ModifyResponse: modifyResponse}\n+}\n+\n+func modifyResponse(resp *http.Response) error {\n+\tproxyutil.SetProxyResponseHeaders(resp.Header)\n+\n+\treturn nil\n }"
        },
        {
          "filename": "pkg/api/pluginproxy/pluginproxy_test.go",
          "status": "modified",
          "additions": 44,
          "deletions": 0,
          "patch": "@@ -2,6 +2,7 @@ package pluginproxy\n \n import (\n \t\"net/http\"\n+\t\"net/http/httptest\"\n \t\"testing\"\n \n \t\"github.com/grafana/grafana/pkg/bus\"\n@@ -11,6 +12,7 @@ import (\n \t\"github.com/grafana/grafana/pkg/util\"\n \t\"github.com/stretchr/testify/assert\"\n \t\"github.com/stretchr/testify/require\"\n+\tmacaron \"gopkg.in/macaron.v1\"\n )\n \n func TestPluginProxy(t *testing.T) {\n@@ -148,6 +150,48 @@ func TestPluginProxy(t *testing.T) {\n \t\t)\n \t\tassert.Equal(t, \"https://example.com\", req.URL.String())\n \t})\n+\n+\tt.Run(\"When proxying a request should set expected response headers\", func(t *testing.T) {\n+\t\trequestHandled := false\n+\t\tbackendServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n+\t\t\tw.WriteHeader(200)\n+\t\t\t_, _ = w.Write([]byte(\"I am the backend\"))\n+\t\t\trequestHandled = true\n+\t\t}))\n+\n+\t\tresponseRecorder := &closeNotifierResponseRecorder{\n+\t\t\tResponseRecorder: httptest.NewRecorder(),\n+\t\t}\n+\t\tresponseWriter := macaron.NewResponseWriter(\"GET\", responseRecorder)\n+\n+\t\tt.Cleanup(responseRecorder.Close)\n+\t\tt.Cleanup(backendServer.Close)\n+\n+\t\troute := &plugins.AppPluginRoute{\n+\t\t\tPath: \"/\",\n+\t\t\tURL:  backendServer.URL,\n+\t\t}\n+\n+\t\tctx := &models.ReqContext{\n+\t\t\tSignedInUser: &models.SignedInUser{},\n+\t\t\tContext: &macaron.Context{\n+\t\t\t\tReq: macaron.Request{\n+\t\t\t\t\tRequest: httptest.NewRequest(\"GET\", \"/\", nil),\n+\t\t\t\t},\n+\t\t\t\tResp: responseWriter,\n+\t\t\t},\n+\t\t}\n+\t\tproxy := NewApiPluginProxy(ctx, \"\", route, \"\", &setting.Cfg{})\n+\t\tproxy.ServeHTTP(ctx.Resp, ctx.Req.Request)\n+\n+\t\tfor {\n+\t\t\tif requestHandled {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\n+\t\trequire.Equal(t, \"sandbox\", ctx.Resp.Header().Get(\"Content-Security-Policy\"))\n+\t})\n }\n \n // getPluginProxiedRequest is a helper for easier setup of tests based on global config and ReqContext."
        },
        {
          "filename": "pkg/plugins/backendplugin/manager.go",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -406,6 +406,7 @@ func flushStream(plugin Plugin, stream CallResourceClientResponseStream, w http.\n \t\t\t\t}\n \t\t\t}\n \n+\t\t\tproxyutil.SetProxyResponseHeaders(w.Header())\n \t\t\tw.WriteHeader(resp.Status)\n \t\t}\n "
        },
        {
          "filename": "pkg/plugins/backendplugin/manager_test.go",
          "status": "modified",
          "additions": 8,
          "deletions": 1,
          "patch": "@@ -177,7 +177,8 @@ func TestManager(t *testing.T) {\n \t\t\t\t\tt.Run(\"Call resource should return expected response\", func(t *testing.T) {\n \t\t\t\t\t\tctx.plugin.CallResourceHandlerFunc = backend.CallResourceHandlerFunc(func(ctx context.Context, req *backend.CallResourceRequest, sender backend.CallResourceResponseSender) error {\n \t\t\t\t\t\t\treturn sender.Send(&backend.CallResourceResponse{\n-\t\t\t\t\t\t\t\tStatus: http.StatusOK,\n+\t\t\t\t\t\t\t\tStatus:  http.StatusOK,\n+\t\t\t\t\t\t\t\tHeaders: map[string][]string{},\n \t\t\t\t\t\t\t})\n \t\t\t\t\t\t})\n \n@@ -186,7 +187,13 @@ func TestManager(t *testing.T) {\n \t\t\t\t\t\tw := httptest.NewRecorder()\n \t\t\t\t\t\terr = ctx.manager.callResourceInternal(w, req, backend.PluginContext{PluginID: testPluginID})\n \t\t\t\t\t\trequire.NoError(t, err)\n+\t\t\t\t\t\tfor {\n+\t\t\t\t\t\t\tif w.Flushed {\n+\t\t\t\t\t\t\t\tbreak\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n \t\t\t\t\t\trequire.Equal(t, http.StatusOK, w.Code)\n+\t\t\t\t\t\trequire.Equal(t, \"sandbox\", w.Header().Get(\"Content-Security-Policy\"))\n \t\t\t\t\t})\n \t\t\t\t})\n \t\t\t})"
        },
        {
          "filename": "pkg/util/proxyutil/proxyutil.go",
          "status": "modified",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -42,3 +42,9 @@ func ClearCookieHeader(req *http.Request, keepCookiesNames []string) {\n \t\treq.AddCookie(c)\n \t}\n }\n+\n+// SetProxyResponseHeaders sets proxy response headers.\n+// Sets Content-Security-Policy: sandbox\n+func SetProxyResponseHeaders(header http.Header) {\n+\theader.Set(\"Content-Security-Policy\", \"sandbox\")\n+}"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 3,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "3884c0e89631bafede8a2d7aeb58ed1069058c4f",
            "date": "2025-01-14T14:08:01Z",
            "author_login": "jdbaldry"
          },
          {
            "sha": "037570b9c8fc36f2e58949b99166bb887237f639",
            "date": "2025-01-14T14:01:10Z",
            "author_login": "alexanderzobnin"
          },
          {
            "sha": "7c87ff1b84de579e4373ecf59e7e00b9ad951f76",
            "date": "2025-01-14T13:58:36Z",
            "author_login": "leonorfmartins"
          },
          {
            "sha": "2594b4f7aff42712bd0e2b01bea3d3335a7d092f",
            "date": "2025-01-14T13:42:21Z",
            "author_login": "renovate[bot]"
          },
          {
            "sha": "0032e839ceac182e08b5a63c36f4c80365bcc90d",
            "date": "2025-01-14T13:17:49Z",
            "author_login": "renovate[bot]"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Grafana is an open-source platform for monitoring and observability. In affected versions an attacker could serve HTML content thru the Grafana datasource or plugin proxy and trick a user to visit this HTML page using a specially crafted link and execute a Cross-site Scripting (XSS) attack. The attacker could either compromise an existing datasource for a specific Grafana instance or either set up its own public service and instruct anyone to set it up in their Grafana instance. To be impacted, all of the following must be applicable. For the data source proxy: A Grafana HTTP-based datasource configured with Server as Access Mode and a URL set, the attacker has to be in control of the HTTP server serving the URL of above datasource, and a specially crafted link pointing at the attacker controlled data source must be clicked on by an authenticated user. For the plugin proxy: A Grafana HTTP-based app plugin configured and enabled with a URL set, the attacker has to be in control of the HTTP server serving the URL of above app, and a specially crafted link pointing at the attacker controlled plugin must be clocked on by an authenticated user. For the backend plugin resource: An attacker must be able to navigate an authenticated user to a compromised plugin through a crafted link. Users are advised to update to a patched version. There are no known workarounds for this vulnerability.",
    "attack_vector": "NETWORK",
    "attack_complexity": "HIGH"
  },
  "temporal_data": {
    "published_date": "2022-02-08T20:15:08.987",
    "last_modified": "2024-11-21T06:45:16.010",
    "fix_date": "2022-01-21T15:43:04Z"
  },
  "references": [
    {
      "url": "https://github.com/grafana/grafana/commit/27726868b3d7c613844b55cd209ca93645c99b85",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/grafana/grafana/security/advisories/GHSA-xc3p-28hw-q24g",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Mitigation",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://grafana.com/blog/2022/02/08/grafana-7.5.15-and-8.3.5-released-with-moderate-severity-security-fixes/",
      "source": "security-advisories@github.com",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/2PFW6Q2LXXWTFRTMTRN4ZGADFRQPKJ3D/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/36GUEPA5TPSC57DZTPYPBL6T7UPQ2FRH/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HLAQRRGNSO5MYCPAXGPH2OCSHOGHSQMQ/",
      "source": "security-advisories@github.com",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20220303-0005/",
      "source": "security-advisories@github.com",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/grafana/grafana/commit/27726868b3d7c613844b55cd209ca93645c99b85",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/grafana/grafana/security/advisories/GHSA-xc3p-28hw-q24g",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Mitigation",
        "Release Notes",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://grafana.com/blog/2022/02/08/grafana-7.5.15-and-8.3.5-released-with-moderate-severity-security-fixes/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Release Notes",
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/2PFW6Q2LXXWTFRTMTRN4ZGADFRQPKJ3D/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/36GUEPA5TPSC57DZTPYPBL6T7UPQ2FRH/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HLAQRRGNSO5MYCPAXGPH2OCSHOGHSQMQ/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20220303-0005/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.148648",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "grafana",
    "owner": "grafana",
    "created_at": "2013-12-11T15:59:56Z",
    "updated_at": "2025-01-14T13:04:53Z",
    "pushed_at": "2025-01-14T13:12:26Z",
    "size": 1292625,
    "stars": 65883,
    "forks": 12291,
    "open_issues": 4193,
    "watchers": 65883,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 29758164,
      "Go": 20683989,
      "Rich Text Format": 352348,
      "HTML": 334782,
      "CUE": 186863,
      "JavaScript": 170294,
      "Shell": 148477,
      "MDX": 147186,
      "Starlark": 132379,
      "SCSS": 112108,
      "Jsonnet": 39563,
      "Makefile": 24993,
      "Python": 23487,
      "Dockerfile": 21670,
      "Jinja": 11630,
      "HCL": 4097,
      "CSS": 3116,
      "Mustache": 2239,
      "Smarty": 2116,
      "PowerShell": 367,
      "Assembly": 168
    },
    "commit_activity": {
      "total_commits_last_year": 9810,
      "avg_commits_per_week": 188.65384615384616,
      "days_active_last_year": 302
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T13:16:15.724443"
  }
}