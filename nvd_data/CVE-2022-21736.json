{
  "cve_id": "CVE-2022-21736",
  "github_data": {
    "repository": "tensorflow/tensorflow",
    "fix_commit": "965b97e4a9650495cda5a8c210ef6684b4b9eceb",
    "related_commits": [
      "965b97e4a9650495cda5a8c210ef6684b4b9eceb",
      "965b97e4a9650495cda5a8c210ef6684b4b9eceb"
    ],
    "patch_url": "https://github.com/tensorflow/tensorflow/commit/965b97e4a9650495cda5a8c210ef6684b4b9eceb.patch",
    "fix_commit_details": {
      "sha": "965b97e4a9650495cda5a8c210ef6684b4b9eceb",
      "commit_date": "2021-12-09T23:49:11Z",
      "author": {
        "login": "mihaimaruseac",
        "type": "User",
        "stats": {
          "total_commits": 1590,
          "average_weekly_commits": 3.3125,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 214
        }
      },
      "commit_message": {
        "title": "Properly validate sparse tensor in `SparseTensorSliceDataset`",
        "length": 181,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 58,
        "additions": 39,
        "deletions": 19
      },
      "files": [
        {
          "filename": "tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc",
          "status": "modified",
          "additions": 20,
          "deletions": 19,
          "patch": "@@ -240,28 +240,29 @@ class SparseTensorSliceDatasetOp : public DatasetOpKernel {\n     OP_REQUIRES_OK(ctx, ctx->input(\"dense_shape\", &dense_shape));\n \n     OP_REQUIRES(ctx, TensorShapeUtils::IsMatrix(indices->shape()),\n-                errors::InvalidArgument(\n-                    \"Input indices should be a matrix but received shape \",\n-                    indices->shape().DebugString()));\n-\n-    const auto num_indices = indices->NumElements();\n-    const auto num_values = values->NumElements();\n-    if (num_indices == 0 || num_values == 0) {\n-      OP_REQUIRES(ctx, num_indices == num_values,\n-                  errors::InvalidArgument(\n-                      \"If indices or values are empty, the other one must also \"\n-                      \"be. Got indices of shape \",\n-                      indices->shape().DebugString(), \" and values of shape \",\n-                      values->shape().DebugString()));\n-    }\n+                errors::InvalidArgument(\"Input indices must be a matrix. Got: \",\n+                                        indices->shape().DebugString()));\n     OP_REQUIRES(ctx, TensorShapeUtils::IsVector(values->shape()),\n-                errors::InvalidArgument(\n-                    \"Input values should be a vector but received shape \",\n-                    indices->shape().DebugString()));\n+                errors::InvalidArgument(\"Input values must be a vector. Got: \",\n+                                        values->shape().DebugString()));\n     OP_REQUIRES(ctx, TensorShapeUtils::IsVector(dense_shape->shape()),\n+                errors::InvalidArgument(\"Input shape must be a vector. Got: \",\n+                                        dense_shape->shape().DebugString()));\n+    OP_REQUIRES(\n+        ctx, values->shape().dim_size(0) == indices->shape().dim_size(0),\n+        errors::InvalidArgument(\n+            \"Number of values must match first dimension of indices. \", \"Got \",\n+            values->shape().dim_size(0),\n+            \" values, indices shape: \", indices->shape().DebugString()));\n+    OP_REQUIRES(\n+        ctx, dense_shape->shape().dim_size(0) == indices->shape().dim_size(1),\n+        errors::InvalidArgument(\n+            \"Number of dimensions must match second dimension of indices. \",\n+            \"Got \", dense_shape->shape().dim_size(0),\n+            \" dimensions, indices shape: \", indices->shape().DebugString()));\n+    OP_REQUIRES(ctx, dense_shape->NumElements() > 0,\n                 errors::InvalidArgument(\n-                    \"Input shape should be a vector but received shape \",\n-                    dense_shape->shape().DebugString()));\n+                    \"The shape argument requires at least one element.\"));\n \n     // We currently ensure that `sparse_tensor` is ordered in the\n     // batch dimension."
        },
        {
          "filename": "tensorflow/python/data/kernel_tests/from_sparse_tensor_slices_test.py",
          "status": "modified",
          "additions": 19,
          "deletions": 0,
          "patch": "@@ -134,6 +134,25 @@ def testEmptySparseTensorSlicesInvalid(self):\n       with self.assertRaises(errors.InvalidArgumentError):\n         sess.run(init_op, feed_dict={st: sparse_feed})\n \n+  @combinations.generate(combinations.combine(tf_api_version=1, mode=[\"graph\"]))\n+  def testEmptySparseTensorSlicesInvalid2(self):\n+    \"\"\"Test a dataset based on invalid `tf.sparse.SparseTensor`.\"\"\"\n+    st = array_ops.sparse_placeholder(dtypes.float64)\n+    iterator = dataset_ops.make_initializable_iterator(\n+        dataset_ops.Dataset.from_sparse_tensor_slices(st))\n+    init_op = iterator.initializer\n+\n+    with self.cached_session() as sess:\n+      # Test with an empty sparse tensor but with non empty values.\n+      empty_indices = [[]]\n+      empty_values = []\n+      dense_shape = [1, 1]\n+      sparse_feed = sparse_tensor.SparseTensorValue(empty_indices, empty_values,\n+                                                    dense_shape)\n+      # Here, we expect the test to fail when running the feed.\n+      with self.assertRaises(errors.InvalidArgumentError):\n+        sess.run(init_op, feed_dict={st: sparse_feed})\n+\n   @combinations.generate(combinations.combine(tf_api_version=2, mode=[\"eager\"]))\n   def testFromSparseTensorSlicesError(self):\n     with self.assertRaises(AttributeError):"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 4
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "56e196bc47a70e2f41926613f4cd370ddd734f3a",
            "date": "2025-01-14T18:00:32Z",
            "author_login": "loislo"
          },
          {
            "sha": "b13ee8b852a232dc6dd339e0de4e22f735136b7a",
            "date": "2025-01-14T16:59:22Z",
            "author_login": "Moerafaat"
          },
          {
            "sha": "d65ab241c92b18a8e82a53b03575775279713930",
            "date": "2025-01-14T16:17:42Z",
            "author_login": "akuegel"
          },
          {
            "sha": "7f1cdb4f94bf497a8f81b47cb0b0f6f33dfcdf2f",
            "date": "2025-01-14T15:43:26Z",
            "author_login": "vwbaker"
          },
          {
            "sha": "8f888e57d9fab1d2e4127fdeaabc3f8976471065",
            "date": "2025-01-14T15:28:59Z",
            "author_login": "ddunl"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.6,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:H",
    "cwe_id": "CWE-476",
    "description": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `SparseTensorSliceDataset` has an undefined behavior: under certain condition it can be made to dereference a `nullptr` value. The 3 input arguments to `SparseTensorSliceDataset` represent a sparse tensor. However, there are some preconditions that these arguments must satisfy but these are not validated in the implementation. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-02-03T12:15:08.060",
    "last_modified": "2024-11-21T06:45:20.300",
    "fix_date": "2021-12-09T23:49:11Z"
  },
  "references": [
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L227-L292",
      "source": "security-advisories@github.com",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/965b97e4a9650495cda5a8c210ef6684b4b9eceb",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pfjj-m3jj-9jc9",
      "source": "security-advisories@github.com",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/data/sparse_tensor_slice_dataset_op.cc#L227-L292",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/commit/965b97e4a9650495cda5a8c210ef6684b4b9eceb",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-pfjj-m3jj-9jc9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:57.106185",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "tensorflow",
    "owner": "tensorflow",
    "created_at": "2015-11-07T01:19:20Z",
    "updated_at": "2025-01-14T12:53:26Z",
    "pushed_at": "2025-01-14T12:53:14Z",
    "size": 1120707,
    "stars": 187254,
    "forks": 74432,
    "open_issues": 6569,
    "watchers": 187254,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "C++": 101199988,
      "Python": 45779571,
      "MLIR": 10763008,
      "HTML": 7662661,
      "Starlark": 7430486,
      "Go": 2171370,
      "C": 1288066,
      "Java": 1178817,
      "Jupyter Notebook": 805736,
      "Shell": 701425,
      "Objective-C++": 279654,
      "Objective-C": 169202,
      "CMake": 148610,
      "Smarty": 121630,
      "Swift": 81659,
      "Dockerfile": 37903,
      "C#": 13585,
      "Batchfile": 12126,
      "Ruby": 8898,
      "Perl": 7536,
      "Roff": 5034,
      "Cython": 3899,
      "Makefile": 2845,
      "CSS": 2761,
      "Vim Snippet": 58
    },
    "commit_activity": {
      "total_commits_last_year": 15729,
      "avg_commits_per_week": 302.4807692307692,
      "days_active_last_year": 357
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T12:54:01.412891"
  }
}