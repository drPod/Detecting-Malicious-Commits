{
  "cve_id": "CVE-2022-22845",
  "github_data": {
    "repository": "sipcapture/homer-app",
    "fix_commit": "7f92f3afc8b0380c14af3d0fc1c365318a2d1591",
    "related_commits": [
      "7f92f3afc8b0380c14af3d0fc1c365318a2d1591",
      "7f92f3afc8b0380c14af3d0fc1c365318a2d1591"
    ],
    "patch_url": "https://github.com/sipcapture/homer-app/commit/7f92f3afc8b0380c14af3d0fc1c365318a2d1591.patch",
    "fix_commit_details": {
      "sha": "7f92f3afc8b0380c14af3d0fc1c365318a2d1591",
      "commit_date": "2022-01-07T15:09:17Z",
      "author": {
        "login": "adubovikov",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "added jwt generator.",
        "length": 95,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 39,
        "additions": 34,
        "deletions": 5
      },
      "files": [
        {
          "filename": "auth/claims.go",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -4,6 +4,7 @@ import (\n \t\"time\"\n \n \t\"github.com/golang-jwt/jwt\"\n+\t\"github.com/sipcapture/homer-app/config\"\n \t\"github.com/sipcapture/homer-app/model\"\n \t\"github.com/sipcapture/homer-app/utils/logger\"\n )\n@@ -49,7 +50,7 @@ func Token(user model.TableUser) (string, error) {\n \ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n \n \t// Generate encoded token and send it as response.\n-\tt, err := token.SignedString([]byte(JwtSecret))\n+\tt, err := token.SignedString([]byte(config.Setting.AUTH_SETTINGS.JwtSecret))\n \tif err != nil {\n \t\treturn \"\", err\n \t}"
        },
        {
          "filename": "auth/constants.go",
          "status": "modified",
          "additions": 0,
          "deletions": 2,
          "patch": "@@ -1,7 +1,5 @@\n package auth\n \n-const JwtSecret = \"167f0db2-f83e-4baa-9736-d56064a5b415\"\n-\n /* our expire time */\n var TokenExpiryTime = 1200\n "
        },
        {
          "filename": "config/config.go",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -44,6 +44,10 @@ type HomerSettingServer struct {\n \t\tExternalHomeDashboard string `default:\"\"`\n \t}\n \n+\tAUTH_SETTINGS struct {\n+\t\tJwtSecret string `default:\"\"`\n+\t}\n+\n \tOAUTH2_SETTINGS struct {\n \t\tEnable               bool     `default:\"false\"`\n \t\tClientID             string   `default:\"1234565\"`"
        },
        {
          "filename": "etc/webapp_config.json",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -103,6 +103,7 @@\n   \"auth_settings\": {\n     \"_comment\": \"The type param can be internal, ldap, http_auth\",\n     \"type\": \"internal\",\n+    \"jwt_secret\": \"167f0db2-f83e-4baa-9736-d56064a5b415\",\n     \"gravatar\": false,\n     \"gravatar_url\": \"https://www.gravatar.com/avatar/%s.jpg\",\n     \"token_expire\": 1200,"
        },
        {
          "filename": "main.go",
          "status": "modified",
          "additions": 26,
          "deletions": 1,
          "patch": "@@ -130,6 +130,7 @@ type CommandLineFlags struct {\n \tAPIPrefix                 *string    `json:\"api_prefix\"`\n \tWatchConfig               *bool      `json:\"watch_config\"`\n \tShowCurrentConfig         *bool      `json:\"show_current_config\"`\n+\tGenerateJwtSecret         *bool      `json:\"generate_jwt_secret\"`\n }\n \n //params for  Services\n@@ -195,6 +196,9 @@ func initFlags() {\n \tappFlags.WatchConfig = flag.Bool(\"watch-config\", false, \"Watch the configuration for changes\")\n \tappFlags.ShowCurrentConfig = flag.Bool(\"show-current-config\", false, \"print out the current config and exit\")\n \n+\t//Jwt\n+\tappFlags.GenerateJwtSecret = flag.Bool(\"generate-jwt-secret\", false, \"generate jwt secret\")\n+\n \tflag.Parse()\n }\n \n@@ -249,6 +253,19 @@ func main() {\n \t\tos.Exit(0)\n \t}\n \n+\tif *appFlags.GenerateJwtSecret {\n+\t\tlogger.Info(\"Generating jwt secret...\")\n+\t\tconfig.Setting.AUTH_SETTINGS.JwtSecret = uuid.NewV4().String()\n+\t\tviper.Set(\"auth_settings.jwt_secret\", config.Setting.AUTH_SETTINGS.JwtSecret)\n+\t\terr := viper.WriteConfig()\n+\t\tif err != nil {\n+\t\t\tfmt.Println(\"No configuration file loaded: \", err)\n+\t\t\tlogger.Error(\"No configuration file loaded - using defaults\")\n+\t\t}\n+\n+\t\tos.Exit(0)\n+\t}\n+\n \t//http client\n \tinitHttpClient()\n \n@@ -867,7 +884,7 @@ func performV1APIRouting(e *echo.Echo) {\n \t// Configure middleware with the custom claims type\n \tconfig := middleware.JWTConfig{\n \t\tClaims:     &auth.JwtUserClaim{},\n-\t\tSigningKey: []byte(auth.JwtSecret),\n+\t\tSigningKey: []byte(config.Setting.AUTH_SETTINGS.JwtSecret),\n \t}\n \n \tres.Use(middleware.JWTWithConfig(config))\n@@ -1165,6 +1182,14 @@ func updateVersionApplication(configDBSession *gorm.DB) bool {\n \t\tsaveConfig = true\n \t}\n \n+\t//generate JWT\n+\tconfig.Setting.AUTH_SETTINGS.JwtSecret = viper.GetString(\"auth_settings.jwt_secret\")\n+\tif config.Setting.AUTH_SETTINGS.JwtSecret == \"\" {\n+\t\tconfig.Setting.AUTH_SETTINGS.JwtSecret = uuid.NewV4().String()\n+\t\tviper.Set(\"auth_settings.jwt_secret\", config.Setting.AUTH_SETTINGS.JwtSecret)\n+\t\tsaveConfig = true\n+\t}\n+\n \tif saveConfig {\n \t\terr := viper.WriteConfig()\n \t\tif err != nil {"
        },
        {
          "filename": "version.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,7 +1,7 @@\n package main\n \n //VERSION\n-var VERSION_APPLICATION = \"1.4.27\"\n+var VERSION_APPLICATION = \"1.4.28\"\n \n //NAME\n var NAME_APPLICATION = \"homer-app\""
        }
      ],
      "file_patterns": {
        "security_files": 2,
        "config_files": 2,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 4,
        "max_directory_depth": 1
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "f023262782344fd476aedc87dbe6bd62c1e50308",
            "date": "2025-01-08T09:52:57Z",
            "author_login": "lmangani"
          },
          {
            "sha": "f63b2847b5ea393dd84798d18951847c69d9c2f3",
            "date": "2025-01-08T09:17:32Z",
            "author_login": "lmangani"
          },
          {
            "sha": "522f2342457a496c755e5343af3a000a89de222d",
            "date": "2025-01-07T11:58:59Z",
            "author_login": "adubovikov"
          },
          {
            "sha": "4769a82bbd2f0956ba3ee16cbef62a74f8c52b00",
            "date": "2025-01-07T11:56:16Z",
            "author_login": "adubovikov"
          },
          {
            "sha": "5d9073de904b86663f3f1148c61a62edbdc7c6dc",
            "date": "2025-01-07T11:46:30Z",
            "author_login": "adubovikov"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 9.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-798",
    "description": "QXIP SIPCAPTURE homer-app before 1.4.28 for HOMER 7.x has the same 167f0db2-f83e-4baa-9736-d56064a5b415 JWT secret key across different customers' installations.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-01-10T14:12:58.567",
    "last_modified": "2024-11-21T06:47:33.510",
    "fix_date": "2022-01-07T15:09:17Z"
  },
  "references": [
    {
      "url": "http://sipcapture.org",
      "source": "cve@mitre.org",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/sipcapture/homer",
      "source": "cve@mitre.org",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sipcapture/homer-app/commit/7f92f3afc8b0380c14af3d0fc1c365318a2d1591",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sipcapture/homer-app/compare/1.4.27...1.4.28",
      "source": "cve@mitre.org",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "http://sipcapture.org",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Vendor Advisory"
      ]
    },
    {
      "url": "https://github.com/sipcapture/homer",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sipcapture/homer-app/commit/7f92f3afc8b0380c14af3d0fc1c365318a2d1591",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/sipcapture/homer-app/compare/1.4.27...1.4.28",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:02:37.062465",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "homer-app",
    "owner": "sipcapture",
    "created_at": "2018-06-16T20:31:06Z",
    "updated_at": "2025-01-08T09:53:01Z",
    "pushed_at": "2025-01-08T09:52:57Z",
    "size": 364307,
    "stars": 209,
    "forks": 85,
    "open_issues": 12,
    "watchers": 209,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Go": 641514,
      "Shell": 14408,
      "Dockerfile": 1015,
      "Ragel": 624,
      "Makefile": 494
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T15:06:39.407564"
  }
}