{
  "cve_id": "CVE-2022-2290",
  "github_data": {
    "repository": "zadam/trilium",
    "fix_commit": "3faae63b849a1fabc31b823bb7af3a84d32256a7",
    "related_commits": [
      "3faae63b849a1fabc31b823bb7af3a84d32256a7",
      "3faae63b849a1fabc31b823bb7af3a84d32256a7"
    ],
    "patch_url": "https://github.com/zadam/trilium/commit/3faae63b849a1fabc31b823bb7af3a84d32256a7.patch",
    "fix_commit_details": {
      "sha": "3faae63b849a1fabc31b823bb7af3a84d32256a7",
      "commit_date": "2022-06-30T22:01:29Z",
      "author": {
        "login": "zadam",
        "type": "User",
        "stats": {
          "total_commits": 6056,
          "average_weekly_commits": 15.14,
          "total_additions": 1872623,
          "total_deletions": 1469750,
          "weeks_active": 329
        }
      },
      "commit_message": {
        "title": "set correct content type for error messages",
        "length": 43,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 98,
        "additions": 71,
        "deletions": 27
      },
      "files": [
        {
          "filename": "package-lock.json",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -1,12 +1,12 @@\n {\n   \"name\": \"trilium\",\n-  \"version\": \"0.52.1-beta\",\n+  \"version\": \"0.52.3\",\n   \"lockfileVersion\": 2,\n   \"requires\": true,\n   \"packages\": {\n     \"\": {\n       \"name\": \"trilium\",\n-      \"version\": \"0.52.1-beta\",\n+      \"version\": \"0.52.3\",\n       \"hasInstallScript\": true,\n       \"license\": \"AGPL-3.0-only\",\n       \"dependencies\": {"
        },
        {
          "filename": "src/routes/api/export.js",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -15,7 +15,9 @@ function exportBranch(req, res) {\n         const message = `Cannot export branch ${branchId} since it does not exist.`;\n         log.error(message);\n \n-        res.status(500).send(message);\n+        res.setHeader(\"Content-Type\", \"text/plain\")\n+            .status(500)\n+            .send(message);\n         return;\n     }\n \n@@ -41,7 +43,9 @@ function exportBranch(req, res) {\n \n         log.error(message + e.stack);\n \n-        res.status(500).send(message);\n+        res.setHeader(\"Content-Type\", \"text/plain\")\n+            .status(500)\n+            .send(message);\n     }\n }\n "
        },
        {
          "filename": "src/routes/api/files.js",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -48,7 +48,9 @@ function downloadNoteFile(noteId, res, contentDisposition = true) {\n     const note = becca.getNote(noteId);\n \n     if (!note) {\n-        return res.status(404).send(`Note ${noteId} doesn't exist.`);\n+        return res.setHeader(\"Content-Type\", \"text/plain\")\n+            .status(404)\n+            .send(`Note ${noteId} doesn't exist.`);\n     }\n \n     if (note.isProtected && !protectedSessionService.isProtectedSessionAvailable()) {"
        },
        {
          "filename": "src/routes/api/image.js",
          "status": "modified",
          "additions": 5,
          "deletions": 3,
          "patch": "@@ -20,20 +20,22 @@ function returnImage(req, res) {\n     }\n \n     /**\n-     * special \"image\" type. the canvas is actually type application/json \n+     * special \"image\" type. the canvas is actually type application/json\n      * to avoid bitrot and enable usage as referenced image the svg is included.\n      */\n     if (image.type === 'canvas') {\n         const content = image.getContent();\n         try {\n             const data = JSON.parse(content);\n-            \n+\n             const svg = data.svg || '<svg />'\n             res.set('Content-Type', \"image/svg+xml\");\n             res.set(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n             res.send(svg);\n         } catch(err) {\n-            res.status(500).send(\"there was an error parsing excalidraw to svg\");\n+            res.setHeader(\"Content-Type\", \"text/plain\")\n+                .status(500)\n+                .send(\"there was an error parsing excalidraw to svg\");\n         }\n     } else {\n         res.set('Content-Type', image.mime);"
        },
        {
          "filename": "src/routes/api/note_revisions.js",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -65,11 +65,15 @@ function downloadNoteRevision(req, res) {\n     const noteRevision = becca.getNoteRevision(req.params.noteRevisionId);\n \n     if (noteRevision.noteId !== req.params.noteId) {\n-        return res.status(400).send(`Note revision ${req.params.noteRevisionId} does not belong to note ${req.params.noteId}`);\n+        return res.setHeader(\"Content-Type\", \"text/plain\")\n+            .status(400)\n+            .send(`Note revision ${req.params.noteRevisionId} does not belong to note ${req.params.noteId}`);\n     }\n \n     if (noteRevision.isProtected && !protectedSessionService.isProtectedSessionAvailable()) {\n-        return res.status(401).send(\"Protected session not available\");\n+        return res.setHeader(\"Content-Type\", \"text/plain\")\n+            .status(401)\n+            .send(\"Protected session not available\");\n     }\n \n     const filename = getRevisionFilename(noteRevision);"
        },
        {
          "filename": "src/routes/custom.js",
          "status": "modified",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -49,7 +49,9 @@ function handleRequest(req, res) {\n             catch (e) {\n                 log.error(`Custom handler ${note.noteId} failed with ${e.message}`);\n \n-                res.status(500).send(e.message);\n+                res.setHeader(\"Content-Type\", \"text/plain\")\n+                    .status(500)\n+                    .send(e.message);\n             }\n         }\n         else if (attr.name === 'customResourceProvider') {\n@@ -65,7 +67,9 @@ function handleRequest(req, res) {\n     const message = `No handler matched for custom ${path} request.`;\n \n     log.info(message);\n-    res.status(404).send(message);\n+    res.setHeader(\"Content-Type\", \"text/plain\")\n+        .status(404)\n+        .send(message);\n }\n \n function register(router) {"
        },
        {
          "filename": "src/routes/routes.js",
          "status": "modified",
          "additions": 10,
          "deletions": 2,
          "patch": "@@ -120,6 +120,10 @@ function apiResultHandler(req, res, result) {\n \n function send(res, statusCode, response) {\n     if (typeof response === 'string') {\n+        if (statusCode >= 400) {\n+            res.setHeader(\"Content-Type\", \"text/plain\");\n+        }\n+\n         res.status(statusCode).send(response);\n \n         return response.length;\n@@ -167,7 +171,9 @@ function route(method, path, middleware, routeHandler, resultHandler, transactio\n                         .catch(e => {\n                             log.error(`${method} ${path} threw exception: ` + e.stack);\n \n-                            res.status(500).send(e.message);\n+                            res.setHeader(\"Content-Type\", \"text/plain\")\n+                                .status(500)\n+                                .send(e.message);\n                         });\n                 }\n                 else {\n@@ -180,7 +186,9 @@ function route(method, path, middleware, routeHandler, resultHandler, transactio\n         catch (e) {\n             log.error(`${method} ${path} threw exception: ` + e.stack);\n \n-            res.status(500).send(e.message);\n+            res.setHeader(\"Content-Type\", \"text/plain\")\n+                .status(500)\n+                .send(e.message);\n         }\n     });\n }"
        },
        {
          "filename": "src/services/auth.js",
          "status": "modified",
          "additions": 12,
          "deletions": 4,
          "patch": "@@ -88,17 +88,23 @@ function checkEtapiToken(req, res, next) {\n function reject(req, res, message) {\n     log.info(`${req.method} ${req.path} rejected with 401 ${message}`);\n \n-    res.status(401).send(message);\n+    res.setHeader(\"Content-Type\", \"text/plain\")\n+        .status(401)\n+        .send(message);\n }\n \n function checkCredentials(req, res, next) {\n     if (!sqlInit.isDbInitialized()) {\n-        res.status(400).send('Database is not initialized yet.');\n+        res.setHeader(\"Content-Type\", \"text/plain\")\n+            .status(400)\n+            .send('Database is not initialized yet.');\n         return;\n     }\n \n     if (!passwordService.isPasswordSet()) {\n-        res.status(400).send('Password has not been set yet. Please set a password and repeat the action');\n+        res.setHeader(\"Content-Type\", \"text/plain\")\n+            .status(400)\n+            .send('Password has not been set yet. Please set a password and repeat the action');\n         return;\n     }\n \n@@ -109,7 +115,9 @@ function checkCredentials(req, res, next) {\n     // username is ignored\n \n     if (!passwordEncryptionService.verifyPassword(password)) {\n-        res.status(401).send('Incorrect password');\n+        res.setHeader(\"Content-Type\", \"text/plain\")\n+            .status(401)\n+            .send('Incorrect password');\n     }\n     else {\n         next();"
        },
        {
          "filename": "src/share/routes.js",
          "status": "modified",
          "additions": 21,
          "deletions": 9,
          "patch": "@@ -39,9 +39,9 @@ function register(router) {\n         addNoIndexHeader(note, res);\n \n         if (note.hasLabel('shareRaw') || ['image', 'file'].includes(note.type)) {\n-            res.setHeader('Content-Type', note.mime);\n+            res.setHeader('Content-Type', note.mime)\n+                .send(note.getContent());\n \n-            res.send(note.getContent());\n             return;\n         }\n \n@@ -83,7 +83,9 @@ function register(router) {\n         const note = shaca.getNote(noteId);\n \n         if (!note) {\n-            return res.status(404).send(`Note '${noteId}' not found`);\n+            return res.setHeader(\"Content-Type\", \"text/plain\")\n+                .status(404)\n+                .send(`Note '${noteId}' not found`);\n         }\n \n         addNoIndexHeader(note, res);\n@@ -98,7 +100,9 @@ function register(router) {\n         const note = shaca.getNote(noteId);\n \n         if (!note) {\n-            return res.status(404).send(`Note '${noteId}' not found`);\n+            return res.setHeader(\"Content-Type\", \"text/plain\")\n+                .status(404)\n+                .send(`Note '${noteId}' not found`);\n         }\n \n         addNoIndexHeader(note, res);\n@@ -122,13 +126,17 @@ function register(router) {\n         const image = shaca.getNote(req.params.noteId);\n \n         if (!image) {\n-            return res.status(404).send(`Note '${req.params.noteId}' not found`);\n+            return res.setHeader('Content-Type', 'text/plain')\n+                .status(404)\n+                .send(`Note '${req.params.noteId}' not found`);\n         }\n         else if (![\"image\", \"canvas\"].includes(image.type)) {\n-            return res.status(400).send(\"Requested note is not a shareable image\");\n+            return res.setHeader('Content-Type', 'text/plain')\n+                .status(400)\n+                .send(\"Requested note is not a shareable image\");\n         } else if (image.type === \"canvas\") {\n             /**\n-             * special \"image\" type. the canvas is actually type application/json \n+             * special \"image\" type. the canvas is actually type application/json\n              * to avoid bitrot and enable usage as referenced image the svg is included.\n              */\n             const content = image.getContent();\n@@ -141,7 +149,9 @@ function register(router) {\n                 res.set(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n                 res.send(svg);\n             } catch(err) {\n-                res.status(500).send(\"there was an error parsing excalidraw to svg\");\n+                res.setHeader('Content-Type', 'text/plain')\n+                    .status(500)\n+                    .send(\"there was an error parsing excalidraw to svg\");\n             }\n         } else {\n             // normal image\n@@ -159,7 +169,9 @@ function register(router) {\n         const note = shaca.getNote(noteId);\n \n         if (!note) {\n-            return res.status(404).send(`Note '${noteId}' not found`);\n+            return res.setHeader('Content-Type', 'text/plain')\n+                .status(404)\n+                .send(`Note '${noteId}' not found`);\n         }\n \n         addNoIndexHeader(note, res);"
        }
      ],
      "file_patterns": {
        "security_files": 1,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 5,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "82a437f2a83fc10299f3205713f7dcb04e2d047c",
            "date": "2024-05-30T04:55:45Z",
            "author_login": "zadam"
          },
          {
            "sha": "a64a0e52ec12fdfcede22765e4c64a797f4cf206",
            "date": "2024-05-30T04:46:36Z",
            "author_login": "zadam"
          },
          {
            "sha": "88c41710315e470cd0dbd58570c56fcb866c7ad4",
            "date": "2024-05-30T04:46:22Z",
            "author_login": "zadam"
          },
          {
            "sha": "b6c7e2e48f28c424d7fdd82fb548aeed0c23a33c",
            "date": "2024-05-30T04:25:03Z",
            "author_login": "zadam"
          },
          {
            "sha": "305d28b5b3c6cef9e98bc4c61cb04658be97d690",
            "date": "2024-05-30T04:24:50Z",
            "author_login": "zadam"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 6.1,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "Cross-site Scripting (XSS) - Reflected in GitHub repository zadam/trilium prior to 0.52.4, 0.53.1-beta.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-03T06:15:07.123",
    "last_modified": "2024-11-21T07:00:42.000",
    "fix_date": "2022-06-30T22:01:29Z"
  },
  "references": [
    {
      "url": "https://github.com/zadam/trilium/commit/3faae63b849a1fabc31b823bb7af3a84d32256a7",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/367c5c8d-ad6f-46be-8503-06648ecf09cf",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/zadam/trilium/commit/3faae63b849a1fabc31b823bb7af3a84d32256a7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/367c5c8d-ad6f-46be-8503-06648ecf09cf",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.454032",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "trilium",
    "owner": "zadam",
    "created_at": "2017-05-23T00:30:20Z",
    "updated_at": "2025-01-14T14:24:57Z",
    "pushed_at": "2024-08-08T21:39:01Z",
    "size": 134395,
    "stars": 27839,
    "forks": 1902,
    "open_issues": 903,
    "watchers": 27839,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "JavaScript": 7446431,
      "CSS": 73324,
      "EJS": 24650,
      "Shell": 12404,
      "HTML": 3578,
      "Batchfile": 1988,
      "Dockerfile": 1410
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "agpl-3.0"
    },
    "collected_at": "2025-01-14T14:43:58.123930"
  }
}