{
  "cve_id": "CVE-2022-2301",
  "github_data": {
    "repository": "hpjansson/chafa",
    "fix_commit": "56fabfa18a6880b4cb66047fa6557920078048d9",
    "related_commits": [
      "56fabfa18a6880b4cb66047fa6557920078048d9",
      "56fabfa18a6880b4cb66047fa6557920078048d9"
    ],
    "patch_url": "https://github.com/hpjansson/chafa/commit/56fabfa18a6880b4cb66047fa6557920078048d9.patch",
    "fix_commit_details": {
      "sha": "56fabfa18a6880b4cb66047fa6557920078048d9",
      "commit_date": "2022-05-01T22:37:35Z",
      "author": {
        "login": "hpjansson",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "XwdLoader: Fix buffer over-read and improve general robustness",
        "length": 547,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 86,
        "additions": 55,
        "deletions": 31
      },
      "files": [
        {
          "filename": "tools/chafa/xwd-loader.c",
          "status": "modified",
          "additions": 55,
          "deletions": 31,
          "patch": "@@ -165,67 +165,91 @@ compute_pixel_type (XwdLoader *loader)\n }\n \n #define ASSERT_HEADER(x) if (!(x)) return FALSE\n+#define UNPACK_FIELD_U32(dest, src, field) ((dest)->field = GUINT32_FROM_BE ((src)->field))\n+#define UNPACK_FIELD_S32(dest, src, field) ((dest)->field = GINT32_FROM_BE ((src)->field))\n \n static gboolean\n-load_header (XwdLoader *loader) // gconstpointer in, gsize in_max_len, XwdHeader *header_out)\n+load_header (XwdLoader *loader)\n {\n     XwdHeader *h = &loader->header;\n     XwdHeader in;\n-    const guint32 *p = (const guint32 *) &in;\n+    const XwdHeader *inp;\n \n     if (!file_mapping_taste (loader->mapping, &in, 0, sizeof (in)))\n         return FALSE;\n \n-    h->header_size = g_ntohl (*(p++));\n-    h->file_version = g_ntohl (*(p++));\n-    h->pixmap_format = g_ntohl (*(p++));\n-    h->pixmap_depth = g_ntohl (*(p++));\n-    h->pixmap_width = g_ntohl (*(p++));\n-    h->pixmap_height = g_ntohl (*(p++));\n-    h->x_offset = g_ntohl (*(p++));\n-    h->byte_order = g_ntohl (*(p++));\n-    h->bitmap_unit = g_ntohl (*(p++));\n-    h->bitmap_bit_order = g_ntohl (*(p++));\n-    h->bitmap_pad = g_ntohl (*(p++));\n-    h->bits_per_pixel = g_ntohl (*(p++));\n-    h->bytes_per_line = g_ntohl (*(p++));\n-    h->visual_class = g_ntohl (*(p++));\n-    h->red_mask = g_ntohl (*(p++));\n-    h->green_mask = g_ntohl (*(p++));\n-    h->blue_mask = g_ntohl (*(p++));\n-    h->bits_per_rgb = g_ntohl (*(p++));\n-    h->color_map_entries = g_ntohl (*(p++));\n-    h->n_colors = g_ntohl (*(p++));\n-    h->window_width = g_ntohl (*(p++));\n-    h->window_height = g_ntohl (*(p++));\n-    h->window_x = g_ntohl (*(p++));\n-    h->window_y = g_ntohl (*(p++));\n-    h->window_border_width = g_ntohl (*(p++));\n+    inp = &in;\n+\n+    UNPACK_FIELD_U32 (h, inp, header_size);\n+    UNPACK_FIELD_U32 (h, inp, file_version);\n+    UNPACK_FIELD_U32 (h, inp, pixmap_format);\n+    UNPACK_FIELD_U32 (h, inp, pixmap_depth);\n+    UNPACK_FIELD_U32 (h, inp, pixmap_width);\n+    UNPACK_FIELD_U32 (h, inp, pixmap_height);\n+    UNPACK_FIELD_U32 (h, inp, x_offset);\n+    UNPACK_FIELD_U32 (h, inp, byte_order);\n+    UNPACK_FIELD_U32 (h, inp, bitmap_unit);\n+    UNPACK_FIELD_U32 (h, inp, bitmap_bit_order);\n+    UNPACK_FIELD_U32 (h, inp, bitmap_pad);\n+    UNPACK_FIELD_U32 (h, inp, bits_per_pixel);\n+    UNPACK_FIELD_U32 (h, inp, bytes_per_line);\n+    UNPACK_FIELD_U32 (h, inp, visual_class);\n+    UNPACK_FIELD_U32 (h, inp, red_mask);\n+    UNPACK_FIELD_U32 (h, inp, green_mask);\n+    UNPACK_FIELD_U32 (h, inp, blue_mask);\n+    UNPACK_FIELD_U32 (h, inp, bits_per_rgb);\n+    UNPACK_FIELD_U32 (h, inp, color_map_entries);\n+    UNPACK_FIELD_U32 (h, inp, n_colors);\n+    UNPACK_FIELD_U32 (h, inp, window_width);\n+    UNPACK_FIELD_U32 (h, inp, window_height);\n+    UNPACK_FIELD_S32 (h, inp, window_x);\n+    UNPACK_FIELD_S32 (h, inp, window_y);\n+    UNPACK_FIELD_U32 (h, inp, window_border_width);\n \n     /* Only support the most common/useful subset of XWD files out there;\n-     * namely, that corresponding to screen dumps from modern X.Org servers. */\n+     * namely, that corresponding to screen dumps from modern X.Org servers.\n+     * We could check visual_class == 5 too, but the other fields convey all\n+     * the info we need. */\n \n     ASSERT_HEADER (h->header_size >= sizeof (XwdHeader));\n+    ASSERT_HEADER (h->header_size <= 65535);\n     ASSERT_HEADER (h->file_version == 7);\n     ASSERT_HEADER (h->pixmap_depth == 24);\n \n+    /* Should be zero for truecolor/directcolor. Cap it to prevent overflows. */\n+    ASSERT_HEADER (h->color_map_entries <= 256);\n+\n     /* Xvfb sets bits_per_rgb to 8, but 'convert' uses 24 for the same image data. One\n      * of them is likely misunderstanding. Let's be lenient and accept either. */\n     ASSERT_HEADER (h->bits_per_rgb == 8 || h->bits_per_rgb == 24);\n \n+    /* These are the pixel formats we allow. */\n+    ASSERT_HEADER (h->bits_per_pixel == 24 || h->bits_per_pixel == 32);\n+\n+    /* Enforce sane dimensions. */\n+    ASSERT_HEADER (h->pixmap_width >= 1 && h->pixmap_width <= 65535);\n+    ASSERT_HEADER (h->pixmap_height >= 1 && h->pixmap_height <= 65535);\n+\n+    /* Make sure rowstride can actually hold a row's worth of data but is not padded to\n+     * something ridiculous. */\n     ASSERT_HEADER (h->bytes_per_line >= h->pixmap_width * (h->bits_per_pixel / 8));\n+    ASSERT_HEADER (h->bytes_per_line <= h->pixmap_width * (h->bits_per_pixel / 8) + 1024);\n+\n+    /* Make sure the total allocation/map is not too big. */\n+    ASSERT_HEADER (h->bytes_per_line * h->pixmap_height < (1UL << 31) - 65536 - 256 * 32);\n+\n     ASSERT_HEADER (compute_pixel_type (loader) < CHAFA_PIXEL_MAX);\n \n     loader->file_data = file_mapping_get_data (loader->mapping, &loader->file_data_len);\n     if (!loader->file_data)\n         return FALSE;\n \n     ASSERT_HEADER (loader->file_data_len >= h->header_size\n-                   + h->n_colors * sizeof (XwdColor)\n-                   + h->pixmap_height * h->bytes_per_line);\n+                   + h->color_map_entries * sizeof (XwdColor)\n+                   + h->pixmap_height * (gsize) h->bytes_per_line);\n \n     loader->image_data = (const guint8 *) loader->file_data\n-        + h->header_size + h->n_colors * sizeof (XwdColor);\n+        + h->header_size + h->color_map_entries * sizeof (XwdColor);\n \n     return TRUE;\n }"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 1,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "05e76092c459421131cca8d512df693d3fd98b99",
            "date": "2025-01-11T17:59:08Z",
            "author_login": "korei999"
          },
          {
            "sha": "8551bebf0f36dfc47215f79ce0b4fa879e6bed4e",
            "date": "2025-01-09T00:53:01Z",
            "author_login": "hpjansson"
          },
          {
            "sha": "59409a9f6a7b56b101ddde84d4af996389777398",
            "date": "2025-01-08T19:42:05Z",
            "author_login": "hpjansson"
          },
          {
            "sha": "965f248ccf00f293988998930057e8abc745f6d9",
            "date": "2025-01-08T19:30:24Z",
            "author_login": "hpjansson"
          },
          {
            "sha": "38c523410a7dcfa2967463f2b010002624038111",
            "date": "2025-01-06T00:10:11Z",
            "author_login": "hpjansson"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.5,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-126",
    "description": "Buffer Over-read in GitHub repository hpjansson/chafa prior to 1.10.3.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-04T11:15:13.357",
    "last_modified": "2024-11-21T07:00:43.440",
    "fix_date": "2022-05-01T22:37:35Z"
  },
  "references": [
    {
      "url": "https://github.com/hpjansson/chafa/commit/56fabfa18a6880b4cb66047fa6557920078048d9",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/f6b9114b-671d-4948-b946-ffe5c9aeb816",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/hpjansson/chafa/commit/56fabfa18a6880b4cb66047fa6557920078048d9",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/f6b9114b-671d-4948-b946-ffe5c9aeb816",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.454715",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "chafa",
    "owner": "hpjansson",
    "created_at": "2018-04-24T19:57:55Z",
    "updated_at": "2025-01-14T19:25:23Z",
    "pushed_at": "2025-01-11T21:47:28Z",
    "size": 3550,
    "stars": 3112,
    "forks": 65,
    "open_issues": 38,
    "watchers": 3112,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "C": 2125675,
      "C++": 97982,
      "Shell": 30183,
      "M4": 24437,
      "Python": 14136,
      "Makefile": 10725
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "lgpl-3.0"
    },
    "collected_at": "2025-01-14T19:33:51.084294"
  }
}