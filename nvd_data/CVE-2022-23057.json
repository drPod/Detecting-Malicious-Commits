{
  "cve_id": "CVE-2022-23057",
  "github_data": {
    "repository": "frappe/frappe",
    "fix_commit": "497ea861f481c6a3c52fe2aed9d0df1b6c99e9d7",
    "related_commits": [
      "497ea861f481c6a3c52fe2aed9d0df1b6c99e9d7",
      "497ea861f481c6a3c52fe2aed9d0df1b6c99e9d7"
    ],
    "patch_url": "https://github.com/frappe/frappe/commit/497ea861f481c6a3c52fe2aed9d0df1b6c99e9d7.patch",
    "fix_commit_details": {
      "sha": "497ea861f481c6a3c52fe2aed9d0df1b6c99e9d7",
      "commit_date": "2021-03-30T07:22:14Z",
      "author": {
        "login": "sagarvora",
        "type": "User",
        "stats": {
          "total_commits": 614,
          "average_weekly_commits": 0.8635724331926864,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 155
        }
      },
      "commit_message": {
        "title": "feat: frappe.whitelist for class methods",
        "length": 40,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 258,
        "additions": 123,
        "deletions": 135
      },
      "files": [
        {
          "filename": "frappe/__init__.py",
          "status": "modified",
          "additions": 20,
          "deletions": 1,
          "patch": "@@ -555,8 +555,13 @@ def myfunc(param1, param2):\n \n \tdef innerfn(fn):\n \t\tglobal whitelisted, guest_methods, xss_safe_methods, allowed_http_methods_for_whitelisted_func\n-\t\twhitelisted.append(fn)\n \n+\t\t# get function from the unbound / bound method\n+\t\t# this is needed because functions can be compared, but not methods\n+\t\tif hasattr(fn, '__func__'):\n+\t\t\tfn = fn.__func__\n+\n+\t\twhitelisted.append(fn)\n \t\tallowed_http_methods_for_whitelisted_func[fn] = methods\n \n \t\tif allow_guest:\n@@ -569,6 +574,20 @@ def innerfn(fn):\n \n \treturn innerfn\n \n+def is_whitelisted(method):\n+\tfrom frappe.utils import sanitize_html\n+\n+\tis_guest = session['user'] == 'Guest'\n+\tif method not in whitelisted or is_guest and method not in guest_methods:\n+\t\tthrow(_(\"Not permitted\"), PermissionError)\n+\n+\tif is_guest and method not in xss_safe_methods:\n+\t\t# strictly sanitize form_dict\n+\t\t# escapes html characters like <> except for predefined tags like a, b, ul etc.\n+\t\tfor key, value in form_dict.items():\n+\t\t\tif isinstance(value, string_types):\n+\t\t\t\tform_dict[key] = sanitize_html(value)\n+\n def read_only():\n \tdef innfn(fn):\n \t\tdef wrapper_fn(*args, **kwargs):"
        },
        {
          "filename": "frappe/automation/doctype/auto_repeat/auto_repeat.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -118,6 +118,7 @@ def update_status(self):\n \tdef is_completed(self):\n \t\treturn self.end_date and getdate(self.end_date) < getdate(today())\n \n+\t@frappe.whitelist()\n \tdef get_auto_repeat_schedule(self):\n \t\tschedule_details = []\n \t\tstart_date = getdate(self.start_date)\n@@ -328,6 +329,7 @@ def send_notification(self, new_doc):\n \t\tmake(doctype=new_doc.doctype, name=new_doc.name, recipients=recipients,\n \t\t\tsubject=subject, content=message, attachments=attachments, send_email=1)\n \n+\t@frappe.whitelist()\n \tdef fetch_linked_contacts(self):\n \t\tif self.reference_doctype and self.reference_document:\n \t\t\tres = get_contacts_linking_to(self.reference_doctype, self.reference_document, fields=['email_id'])"
        },
        {
          "filename": "frappe/core/doctype/report/report.py",
          "status": "modified",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -58,6 +58,7 @@ def on_trash(self):\n \tdef get_columns(self):\n \t\treturn [d.as_dict(no_default_fields = True) for d in self.columns]\n \n+\t@frappe.whitelist()\n \tdef set_doctype_roles(self):\n \t\tif not self.get('roles') and self.is_standard == 'No':\n \t\t\tmeta = frappe.get_meta(self.ref_doctype)\n@@ -304,7 +305,7 @@ def build_data_dict(self, result, columns):\n \n \t\treturn data\n \n-\t@Document.whitelist\n+\t@frappe.whitelist()\n \tdef toggle_disable(self, disable):\n \t\tself.db_set(\"disabled\", cint(disable))\n "
        },
        {
          "filename": "frappe/core/doctype/role_permission_for_page_and_report/role_permission_for_page_and_report.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -8,6 +8,7 @@\n from frappe.model.document import Document\n \n class RolePermissionforPageandReport(Document):\n+\t@frappe.whitelist()\n \tdef set_report_page_data(self):\n \t\tself.set_custom_roles()\n \t\tself.check_prepared_report_disabled()\n@@ -35,12 +36,14 @@ def get_standard_roles(self):\n \t\tdoc = frappe.get_doc(doctype, docname)\n \t\treturn doc.roles\n \n+\t@frappe.whitelist()\n \tdef reset_roles(self):\n \t\troles = self.get_standard_roles()\n \t\tself.set('roles', roles)\n \t\tself.update_custom_roles()\n \t\tself.update_disable_prepared_report()\n \n+\t@frappe.whitelist()\n \tdef update_report_page_data(self):\n \t\tself.update_custom_roles()\n \t\tself.update_disable_prepared_report()"
        },
        {
          "filename": "frappe/custom/doctype/customize_form/customize_form.py",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -24,6 +24,7 @@ def on_update(self):\n \t\tfrappe.db.sql(\"delete from tabSingles where doctype='Customize Form'\")\n \t\tfrappe.db.sql(\"delete from `tabCustomize Form Field`\")\n \n+\t@frappe.whitelist()\n \tdef fetch_to_customize(self):\n \t\tself.clear_existing_doc()\n \t\tif not self.doc_type:\n@@ -133,6 +134,7 @@ def clear_existing_doc(self):\n \t\tself.doc_type = doc_type\n \t\tself.name = \"Customize Form\"\n \n+\t@frappe.whitelist()\n \tdef save_customization(self):\n \t\tif not self.doc_type:\n \t\t\treturn\n@@ -448,6 +450,7 @@ def validate_fieldtype_length(self):\n \n \t\tself.flags.update_db = True\n \n+\t@frappe.whitelist()\n \tdef reset_to_defaults(self):\n \t\tif not self.doc_type:\n \t\t\treturn"
        },
        {
          "filename": "frappe/data_migration/doctype/data_migration_run/data_migration_run.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -10,6 +10,7 @@\n from frappe.data_migration.doctype.data_migration_mapping.data_migration_mapping import get_source_value\n \n class DataMigrationRun(Document):\n+\t@frappe.whitelist()\n \tdef run(self):\n \t\tself.begin()\n \t\tif self.total_pages > 0:"
        },
        {
          "filename": "frappe/desk/form/run_method.py",
          "status": "removed",
          "additions": 0,
          "deletions": 81,
          "patch": "@@ -1,81 +0,0 @@\n-# Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors\n-# MIT License. See license.txt\n-\n-from __future__ import unicode_literals\n-import json, inspect\n-import frappe\n-from frappe import _\n-from frappe.utils import cint\n-from six import text_type, string_types\n-\n-@frappe.whitelist()\n-def runserverobj(method, docs=None, dt=None, dn=None, arg=None, args=None):\n-\t\"\"\"run controller method - old style\"\"\"\n-\tif not args: args = arg or \"\"\n-\n-\tif dt: # not called from a doctype (from a page)\n-\t\tif not dn: dn = dt # single\n-\t\tdoc = frappe.get_doc(dt, dn)\n-\n-\telse:\n-\t\tdoc = frappe.get_doc(json.loads(docs))\n-\t\tdoc._original_modified = doc.modified\n-\t\tdoc.check_if_latest()\n-\n-\tif not doc.has_permission(\"read\"):\n-\t\tfrappe.msgprint(_(\"Not permitted\"), raise_exception = True)\n-\n-\tif doc:\n-\t\ttry:\n-\t\t\targs = json.loads(args)\n-\t\texcept ValueError:\n-\t\t\targs = args\n-\n-\t\ttry:\n-\t\t\tfnargs, varargs, varkw, defaults = inspect.getargspec(getattr(doc, method))\n-\t\texcept ValueError:\n-\t\t\tfnargs = inspect.getfullargspec(getattr(doc, method)).args\n-\t\t\tvarargs = inspect.getfullargspec(getattr(doc, method)).varargs\n-\t\t\tvarkw = inspect.getfullargspec(getattr(doc, method)).varkw\n-\t\t\tdefaults = inspect.getfullargspec(getattr(doc, method)).defaults\n-\n-\t\tif not fnargs or (len(fnargs)==1 and fnargs[0]==\"self\"):\n-\t\t\tr = doc.run_method(method)\n-\n-\t\telif \"args\" in fnargs or not isinstance(args, dict):\n-\t\t\tr = doc.run_method(method, args)\n-\n-\t\telse:\n-\t\t\tr = doc.run_method(method, **args)\n-\n-\t\tif r:\n-\t\t\t#build output as csv\n-\t\t\tif cint(frappe.form_dict.get('as_csv')):\n-\t\t\t\tmake_csv_output(r, doc.doctype)\n-\t\t\telse:\n-\t\t\t\tfrappe.response['message'] = r\n-\n-\t\tfrappe.response.docs.append(doc)\n-\n-def make_csv_output(res, dt):\n-\t\"\"\"send method response as downloadable CSV file\"\"\"\n-\timport frappe\n-\n-\tfrom six import StringIO\n-\timport csv\n-\n-\tf = StringIO()\n-\twriter = csv.writer(f)\n-\tfor r in res:\n-\t\trow = []\n-\t\tfor v in r:\n-\t\t\tif isinstance(v, string_types):\n-\t\t\t\tv = v.encode(\"utf-8\")\n-\t\t\trow.append(v)\n-\t\twriter.writerow(row)\n-\n-\tf.seek(0)\n-\n-\tfrappe.response['result'] = text_type(f.read(), 'utf-8')\n-\tfrappe.response['type'] = 'csv'\n-\tfrappe.response['doctype'] = dt.replace(' ','')"
        },
        {
          "filename": "frappe/desk/search.py",
          "status": "modified",
          "additions": 2,
          "deletions": 3,
          "patch": "@@ -6,8 +6,7 @@\n import frappe, json\n from frappe.utils import cstr, unique, cint\n from frappe.permissions import has_permission\n-from frappe.handler import is_whitelisted\n-from frappe import _\n+from frappe import _, is_whitelisted\n from six import string_types\n import re\n import wrapt\n@@ -221,4 +220,4 @@ def validate_and_sanitize_search_inputs(fn, instance, args, kwargs):\n \tif kwargs['doctype'] and not frappe.db.exists('DocType', kwargs['doctype']):\n \t\treturn []\n \n-\treturn fn(**kwargs)\n\\ No newline at end of file\n+\treturn fn(**kwargs)"
        },
        {
          "filename": "frappe/email/doctype/newsletter/newsletter.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -29,6 +29,7 @@ def test_send(self, doctype=\"Lead\"):\n \t\tself.queue_all(test_email=True)\n \t\tfrappe.msgprint(_(\"Test email sent to {0}\").format(self.test_email_id))\n \n+\t@frappe.whitelist()\n \tdef send_emails(self):\n \t\t\"\"\"send emails to leads and customers\"\"\"\n \t\tif self.email_sent:"
        },
        {
          "filename": "frappe/handler.py",
          "status": "modified",
          "additions": 73,
          "deletions": 38,
          "patch": "@@ -2,17 +2,22 @@\n # MIT License. See license.txt\n \n from __future__ import unicode_literals\n+\n+from werkzeug.wrappers import Response\n+from six import text_type, string_types, StringIO\n+\n import frappe\n-from frappe import _\n import frappe.utils\n import frappe.sessions\n import frappe.desk.form.run_method\n-from frappe.utils.response import build_response\n-from frappe.api import validate_auth\n+\n from frappe.utils import cint\n+from frappe.api import validate_auth\n+from frappe import _, is_whitelisted\n+from frappe.utils.response import build_response\n+from frappe.utils.csvutils import build_csv_response\n from frappe.core.doctype.server_script.server_script_utils import run_server_script_api\n-from werkzeug.wrappers import Response\n-from six import string_types\n+\n \n ALLOWED_MIMETYPES = ('image/png', 'image/jpeg', 'application/pdf', 'application/msword',\n \t\t\t'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n@@ -64,8 +69,9 @@ def execute_cmd(cmd, from_async=False):\n \tif from_async:\n \t\tmethod = method.queue\n \n-\tis_whitelisted(method)\n-\tis_valid_http_method(method)\n+\tif method != run_doc_method:\n+\t\tis_whitelisted(method)\n+\t\tis_valid_http_method(method)\n \n \treturn frappe.call(method, **frappe.form_dict)\n \n@@ -75,31 +81,10 @@ def is_valid_http_method(method):\n \tif http_method not in frappe.allowed_http_methods_for_whitelisted_func[method]:\n \t\tfrappe.throw(_(\"Not permitted\"), frappe.PermissionError)\n \n-def is_whitelisted(method):\n-\t# check if whitelisted\n-\tif frappe.session['user'] == 'Guest':\n-\t\tif (method not in frappe.guest_methods):\n-\t\t\tfrappe.throw(_(\"Not permitted\"), frappe.PermissionError)\n-\n-\t\tif method not in frappe.xss_safe_methods:\n-\t\t\t# strictly sanitize form_dict\n-\t\t\t# escapes html characters like <> except for predefined tags like a, b, ul etc.\n-\t\t\tfor key, value in frappe.form_dict.items():\n-\t\t\t\tif isinstance(value, string_types):\n-\t\t\t\t\tfrappe.form_dict[key] = frappe.utils.sanitize_html(value)\n-\n-\telse:\n-\t\tif not method in frappe.whitelisted:\n-\t\t\tfrappe.throw(_(\"Not permitted\"), frappe.PermissionError)\n-\n @frappe.whitelist(allow_guest=True)\n def version():\n \treturn frappe.__version__\n \n-@frappe.whitelist()\n-def runserverobj(method, docs=None, dt=None, dn=None, arg=None, args=None):\n-\tfrappe.desk.form.run_method.runserverobj(method, docs=docs, dt=dt, dn=dn, arg=arg, args=args)\n-\n @frappe.whitelist(allow_guest=True)\n def logout():\n \tfrappe.local.login_manager.logout()\n@@ -112,15 +97,6 @@ def web_logout():\n \tfrappe.respond_as_web_page(_(\"Logged Out\"), _(\"You have been successfully logged out\"),\n \t\tindicator_color='green')\n \n-@frappe.whitelist(allow_guest=True)\n-def run_custom_method(doctype, name, custom_method):\n-\t\"\"\"cmd=run_custom_method&doctype={doctype}&name={name}&custom_method={custom_method}\"\"\"\n-\tdoc = frappe.get_doc(doctype, name)\n-\tif getattr(doc, custom_method, frappe._dict()).is_whitelisted:\n-\t\tfrappe.call(getattr(doc, custom_method), **frappe.local.form_dict)\n-\telse:\n-\t\tfrappe.throw(_(\"Not permitted\"), frappe.PermissionError)\n-\n @frappe.whitelist()\n def uploadfile():\n \tret = None\n@@ -222,6 +198,65 @@ def get_attr(cmd):\n \tfrappe.log(\"method:\" + cmd)\n \treturn method\n \n-@frappe.whitelist(allow_guest = True)\n+@frappe.whitelist(allow_guest=True)\n def ping():\n \treturn \"pong\"\n+\n+@frappe.whitelist()\n+def run_doc_method(method, docs=None, dt=None, dn=None, arg=None, args=None):\n+\t\"\"\"run controller method - old style\"\"\"\n+\timport json, inspect\n+\n+\tif not args: args = arg or \"\"\n+\n+\tif dt: # not called from a doctype (from a page)\n+\t\tif not dn: dn = dt # single\n+\t\tdoc = frappe.get_doc(dt, dn)\n+\n+\telse:\n+\t\tdoc = frappe.get_doc(json.loads(docs))\n+\t\tdoc._original_modified = doc.modified\n+\t\tdoc.check_if_latest()\n+\n+\tif not doc.has_permission(\"read\"):\n+\t\tfrappe.msgprint(_(\"Not permitted\"), raise_exception = True)\n+\n+\tif not doc:\n+\t\treturn\n+\n+\ttry:\n+\t\targs = json.loads(args)\n+\texcept ValueError:\n+\t\targs = args\n+\n+\tmethod_obj = getattr(doc, method)\n+\tis_whitelisted(getattr(method_obj, '__func__', method_obj))\n+\n+\ttry:\n+\t\tfnargs = inspect.getargspec(method_obj)[0]\n+\texcept ValueError:\n+\t\tfnargs = inspect.getfullargspec(method_obj).args\n+\n+\tif not fnargs or (len(fnargs)==1 and fnargs[0]==\"self\"):\n+\t\tr = doc.run_method(method)\n+\n+\telif \"args\" in fnargs or not isinstance(args, dict):\n+\t\tr = doc.run_method(method, args)\n+\n+\telse:\n+\t\tr = doc.run_method(method, **args)\n+\n+\tfrappe.response.docs.append(doc)\n+\n+\tif not r:\n+\t\treturn\n+\n+\t# build output as csv\n+\tif cint(frappe.form_dict.get('as_csv')):\n+\t\tbuild_csv_response(r, doc.doctype.replace(' ', ''))\n+\t\treturn\n+\n+\tfrappe.response['message'] = r\n+\n+# for backwards compatibility\n+runserverobj = run_doc_method"
        },
        {
          "filename": "frappe/model/document.py",
          "status": "modified",
          "additions": 9,
          "deletions": 9,
          "patch": "@@ -4,7 +4,7 @@\n from __future__ import unicode_literals, print_function\n import frappe\n import time\n-from frappe import _, msgprint\n+from frappe import _, msgprint, is_whitelisted\n from frappe.utils import flt, cstr, now, get_datetime_str, file_lock, date_diff\n from frappe.model.base_document import BaseDocument, get_controller\n from frappe.model.naming import set_new_name\n@@ -126,10 +126,10 @@ def __init__(self, *args, **kwargs):\n \t\t\traise ValueError('Illegal arguments')\n \n \t@staticmethod\n-\tdef whitelist(f):\n+\tdef whitelist(fn):\n \t\t\"\"\"Decorator: Whitelist method to be called remotely via REST API.\"\"\"\n-\t\tf.whitelisted = True\n-\t\treturn f\n+\t\tfrappe.whitelist()(fn)\n+\t\treturn fn\n \n \tdef reload(self):\n \t\t\"\"\"Reload document from database\"\"\"\n@@ -1148,12 +1148,12 @@ def composer(self, *args, **kwargs):\n \n \t\treturn composer\n \n-\tdef is_whitelisted(self, method):\n-\t\tfn = getattr(self, method, None)\n+\tdef is_whitelisted(self, method_name):\n+\t\tmethod = getattr(self, method_name, None)\n \t\tif not fn:\n-\t\t\traise NotFound(\"Method {0} not found\".format(method))\n-\t\telif not getattr(fn, \"whitelisted\", False):\n-\t\t\traise Forbidden(\"Method {0} not whitelisted\".format(method))\n+\t\t\traise NotFound(\"Method {0} not found\".format(method_name))\n+\n+\t\tis_whitelisted(getattr(method, '__func__', method))\n \n \tdef validate_value(self, fieldname, condition, val2, doc=None, raise_exception=None):\n \t\t\"\"\"Check that value of fieldname should be 'condition' val2"
        },
        {
          "filename": "frappe/public/js/frappe/form/controls/button.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -34,7 +34,7 @@ frappe.ui.form.ControlButton = frappe.ui.form.ControlData.extend({\n \t\tvar me = this;\n \t\tif(this.frm && this.frm.docname) {\n \t\t\tfrappe.call({\n-\t\t\t\tmethod: \"runserverobj\",\n+\t\t\t\tmethod: \"run_doc_method\",\n \t\t\t\targs: {'docs': this.frm.doc, 'method': this.df.options },\n \t\t\t\tbtn: this.$input,\n \t\t\t\tcallback: function(r) {"
        },
        {
          "filename": "frappe/public/js/frappe/request.js",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -55,7 +55,7 @@ frappe.call = function(opts) {\n \t\targs.cmd = opts.module+'.page.'+opts.page+'.'+opts.page+'.'+opts.method;\n \t} else if(opts.doc) {\n \t\t$.extend(args, {\n-\t\t\tcmd: \"runserverobj\",\n+\t\t\tcmd: \"run_doc_method\",\n \t\t\tdocs: frappe.get_doc(opts.doc.doctype, opts.doc.name),\n \t\t\tmethod: opts.method,\n \t\t\targs: opts.args,"
        },
        {
          "filename": "frappe/social/doctype/energy_point_log/energy_point_log.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -52,6 +52,7 @@ def on_trash(self):\n \t\t\treference_log.reverted = 0\n \t\t\treference_log.save()\n \n+\t@frappe.whitelist()\n \tdef revert(self, reason, ignore_permissions=False):\n \t\tif not ignore_permissions:\n \t\t\tfrappe.only_for('System Manager')"
        },
        {
          "filename": "frappe/website/doctype/blog_post/blog_post.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -18,6 +18,7 @@ class BlogPost(WebsiteGenerator):\n \t\torder_by = \"published_on desc\"\n \t)\n \n+\t@frappe.whitelist()\n \tdef make_route(self):\n \t\tif not self.route:\n \t\t\treturn frappe.db.get_value('Blog Category', self.blog_category,"
        },
        {
          "filename": "frappe/website/doctype/portal_settings/portal_settings.py",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -19,6 +19,7 @@ def add_item(self, item):\n \t\t\tself.append('menu', item)\n \t\t\treturn True\n \n+\t@frappe.whitelist()\n \tdef reset(self):\n \t\t'''Restore defaults'''\n \t\tself.menu = []"
        },
        {
          "filename": "frappe/website/doctype/website_theme/website_theme.py",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -98,6 +98,7 @@ def generate_theme_if_not_exist(self):\n \t\telse:\n \t\t\tself.generate_bootstrap_theme()\n \n+\t@frappe.whitelist()\n \tdef set_as_default(self):\n \t\tself.generate_bootstrap_theme()\n \t\tself.save()\n@@ -106,6 +107,7 @@ def set_as_default(self):\n \t\twebsite_settings.ignore_validate = True\n \t\twebsite_settings.save()\n \n+\t@frappe.whitelist()\n \tdef get_apps(self):\n \t\tfrom frappe.utils.change_log import get_versions\n \t\tapps = get_versions()"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 16,
        "max_directory_depth": 6
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c72e91f4653d639300c4d8d8a7951c2aa8a95c2c",
            "date": "2025-01-14T11:05:55Z",
            "author_login": "ankush"
          },
          {
            "sha": "7f30905b109e7f7a51ab7c77962da20b6392e215",
            "date": "2025-01-14T10:17:58Z",
            "author_login": "ankush"
          },
          {
            "sha": "b32f74e6af1f9e689be1de790e328be273d5359b",
            "date": "2025-01-14T10:00:24Z",
            "author_login": "ankush"
          },
          {
            "sha": "7ae7e871781eeb2f7cb709adbd657b8ce0a5036c",
            "date": "2025-01-14T10:02:22Z",
            "author_login": "ankush"
          },
          {
            "sha": "9a0429ad1e7a4e1ca1f1a069035ff490fed8ca51",
            "date": "2025-01-14T09:52:20Z",
            "author_login": "ankush"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.4,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "In ERPNext, versions v12.0.9--v13.0.3 are vulnerable to Stored Cross-Site-Scripting (XSS), due to user input not being validated properly. A low privileged attacker could inject arbitrary code into input fields when editing his profile.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-22T08:15:07.557",
    "last_modified": "2024-11-21T06:47:54.110",
    "fix_date": "2021-03-30T07:22:14Z"
  },
  "references": [
    {
      "url": "https://github.com/frappe/frappe/commit/497ea861f481c6a3c52fe2aed9d0df1b6c99e9d7",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.mend.io/vulnerability-database/CVE-2022-23057",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/frappe/frappe/commit/497ea861f481c6a3c52fe2aed9d0df1b6c99e9d7",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.mend.io/vulnerability-database/CVE-2022-23057",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.467481",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "frappe",
    "owner": "frappe",
    "created_at": "2011-06-08T08:14:16Z",
    "updated_at": "2025-01-14T13:25:34Z",
    "pushed_at": "2025-01-14T12:31:11Z",
    "size": 464470,
    "stars": 7527,
    "forks": 3571,
    "open_issues": 1942,
    "watchers": 7527,
    "has_security_policy": false,
    "default_branch": "develop",
    "protected_branches": [
      "develop",
      "master"
    ],
    "languages": {
      "Python": 4621672,
      "JavaScript": 2663656,
      "Vue": 311920,
      "SCSS": 301077,
      "HTML": 266935,
      "CSS": 54096,
      "Less": 10921,
      "Jinja": 388
    },
    "commit_activity": {
      "total_commits_last_year": 3404,
      "avg_commits_per_week": 65.46153846153847,
      "days_active_last_year": 338
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "mit"
    },
    "collected_at": "2025-01-14T13:33:16.848558"
  }
}