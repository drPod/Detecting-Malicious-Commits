{
  "cve_id": "CVE-2022-2306",
  "github_data": {
    "repository": "heroiclabs/nakama",
    "fix_commit": "ce8d3921e2acd44ef8b5e6edfe595b6df067b166",
    "related_commits": [
      "ce8d3921e2acd44ef8b5e6edfe595b6df067b166",
      "ce8d3921e2acd44ef8b5e6edfe595b6df067b166"
    ],
    "patch_url": "https://github.com/heroiclabs/nakama/commit/ce8d3921e2acd44ef8b5e6edfe595b6df067b166.patch",
    "fix_commit_details": {
      "sha": "ce8d3921e2acd44ef8b5e6edfe595b6df067b166",
      "commit_date": "2022-07-02T17:35:56Z",
      "author": {
        "login": "ftkg",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Correctly console session token on all logouts. (#875)",
        "length": 54,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 2735,
        "additions": 1528,
        "deletions": 1207
      },
      "files": [
        {
          "filename": "console/console.pb.go",
          "status": "modified",
          "additions": 1247,
          "deletions": 1172,
          "patch": null
        },
        {
          "filename": "console/console.pb.gw.go",
          "status": "modified",
          "additions": 81,
          "deletions": 0,
          "patch": "@@ -67,6 +67,40 @@ func local_request_Console_Authenticate_0(ctx context.Context, marshaler runtime\n \n }\n \n+func request_Console_AuthenticateLogout_0(ctx context.Context, marshaler runtime.Marshaler, client ConsoleClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {\n+\tvar protoReq AuthenticateLogoutRequest\n+\tvar metadata runtime.ServerMetadata\n+\n+\tnewReader, berr := utilities.IOReaderFactory(req.Body)\n+\tif berr != nil {\n+\t\treturn nil, metadata, status.Errorf(codes.InvalidArgument, \"%v\", berr)\n+\t}\n+\tif err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {\n+\t\treturn nil, metadata, status.Errorf(codes.InvalidArgument, \"%v\", err)\n+\t}\n+\n+\tmsg, err := client.AuthenticateLogout(ctx, &protoReq, grpc.Header(&metadata.HeaderMD), grpc.Trailer(&metadata.TrailerMD))\n+\treturn msg, metadata, err\n+\n+}\n+\n+func local_request_Console_AuthenticateLogout_0(ctx context.Context, marshaler runtime.Marshaler, server ConsoleServer, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {\n+\tvar protoReq AuthenticateLogoutRequest\n+\tvar metadata runtime.ServerMetadata\n+\n+\tnewReader, berr := utilities.IOReaderFactory(req.Body)\n+\tif berr != nil {\n+\t\treturn nil, metadata, status.Errorf(codes.InvalidArgument, \"%v\", berr)\n+\t}\n+\tif err := marshaler.NewDecoder(newReader()).Decode(&protoReq); err != nil && err != io.EOF {\n+\t\treturn nil, metadata, status.Errorf(codes.InvalidArgument, \"%v\", err)\n+\t}\n+\n+\tmsg, err := server.AuthenticateLogout(ctx, &protoReq)\n+\treturn msg, metadata, err\n+\n+}\n+\n func request_Console_AddUser_0(ctx context.Context, marshaler runtime.Marshaler, client ConsoleClient, req *http.Request, pathParams map[string]string) (proto.Message, runtime.ServerMetadata, error) {\n \tvar protoReq AddUserRequest\n \tvar metadata runtime.ServerMetadata\n@@ -3058,6 +3092,29 @@ func RegisterConsoleHandlerServer(ctx context.Context, mux *runtime.ServeMux, se\n \n \t})\n \n+\tmux.Handle(\"POST\", pattern_Console_AuthenticateLogout_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {\n+\t\tctx, cancel := context.WithCancel(req.Context())\n+\t\tdefer cancel()\n+\t\tvar stream runtime.ServerTransportStream\n+\t\tctx = grpc.NewContextWithServerTransportStream(ctx, &stream)\n+\t\tinboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)\n+\t\trctx, err := runtime.AnnotateIncomingContext(ctx, mux, req, \"/nakama.console.Console/AuthenticateLogout\", runtime.WithHTTPPathPattern(\"/v2/console/authenticate/logout\"))\n+\t\tif err != nil {\n+\t\t\truntime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)\n+\t\t\treturn\n+\t\t}\n+\t\tresp, md, err := local_request_Console_AuthenticateLogout_0(rctx, inboundMarshaler, server, req, pathParams)\n+\t\tmd.HeaderMD, md.TrailerMD = metadata.Join(md.HeaderMD, stream.Header()), metadata.Join(md.TrailerMD, stream.Trailer())\n+\t\tctx = runtime.NewServerMetadataContext(ctx, md)\n+\t\tif err != nil {\n+\t\t\truntime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)\n+\t\t\treturn\n+\t\t}\n+\n+\t\tforward_Console_AuthenticateLogout_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)\n+\n+\t})\n+\n \tmux.Handle(\"POST\", pattern_Console_AddUser_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {\n \t\tctx, cancel := context.WithCancel(req.Context())\n \t\tdefer cancel()\n@@ -4430,6 +4487,26 @@ func RegisterConsoleHandlerClient(ctx context.Context, mux *runtime.ServeMux, cl\n \n \t})\n \n+\tmux.Handle(\"POST\", pattern_Console_AuthenticateLogout_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {\n+\t\tctx, cancel := context.WithCancel(req.Context())\n+\t\tdefer cancel()\n+\t\tinboundMarshaler, outboundMarshaler := runtime.MarshalerForRequest(mux, req)\n+\t\trctx, err := runtime.AnnotateContext(ctx, mux, req, \"/nakama.console.Console/AuthenticateLogout\", runtime.WithHTTPPathPattern(\"/v2/console/authenticate/logout\"))\n+\t\tif err != nil {\n+\t\t\truntime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)\n+\t\t\treturn\n+\t\t}\n+\t\tresp, md, err := request_Console_AuthenticateLogout_0(rctx, inboundMarshaler, client, req, pathParams)\n+\t\tctx = runtime.NewServerMetadataContext(ctx, md)\n+\t\tif err != nil {\n+\t\t\truntime.HTTPError(ctx, mux, outboundMarshaler, w, req, err)\n+\t\t\treturn\n+\t\t}\n+\n+\t\tforward_Console_AuthenticateLogout_0(ctx, mux, outboundMarshaler, w, req, resp, mux.GetForwardResponseOptions()...)\n+\n+\t})\n+\n \tmux.Handle(\"POST\", pattern_Console_AddUser_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {\n \t\tctx, cancel := context.WithCancel(req.Context())\n \t\tdefer cancel()\n@@ -5576,6 +5653,8 @@ func RegisterConsoleHandlerClient(ctx context.Context, mux *runtime.ServeMux, cl\n var (\n \tpattern_Console_Authenticate_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{\"v2\", \"console\", \"authenticate\"}, \"\"))\n \n+\tpattern_Console_AuthenticateLogout_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 2, 3}, []string{\"v2\", \"console\", \"authenticate\", \"logout\"}, \"\"))\n+\n \tpattern_Console_AddUser_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2}, []string{\"v2\", \"console\", \"user\"}, \"\"))\n \n \tpattern_Console_BanAccount_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 2, 1, 2, 2, 1, 0, 4, 1, 5, 3, 2, 4}, []string{\"v2\", \"console\", \"account\", \"id\", \"ban\"}, \"\"))\n@@ -5694,6 +5773,8 @@ var (\n var (\n \tforward_Console_Authenticate_0 = runtime.ForwardResponseMessage\n \n+\tforward_Console_AuthenticateLogout_0 = runtime.ForwardResponseMessage\n+\n \tforward_Console_AddUser_0 = runtime.ForwardResponseMessage\n \n \tforward_Console_BanAccount_0 = runtime.ForwardResponseMessage"
        },
        {
          "filename": "console/console.proto",
          "status": "modified",
          "additions": 14,
          "deletions": 0,
          "patch": "@@ -86,6 +86,14 @@ service Console {\n     };\n   }\n \n+  // Log out a session and invalidate the session token.\n+  rpc AuthenticateLogout (AuthenticateLogoutRequest) returns (google.protobuf.Empty) {\n+    option (google.api.http) = {\n+      post: \"/v2/console/authenticate/logout\",\n+      body: \"*\"\n+    };\n+  }\n+\n   // Add a new console user.\n   rpc AddUser (AddUserRequest) returns (google.protobuf.Empty) {\n     option (google.api.http) = {\n@@ -504,6 +512,12 @@ message AuthenticateRequest {\n   string password = 2;\n }\n \n+// Log out a session and invalidate a session token.\n+message AuthenticateLogoutRequest {\n+  // Session token to log out.\n+  string token = 1;\n+}\n+\n // API Explorer request definition for CallApiEndpoint\n message CallApiEndpointRequest {\n   string method = 1;"
        },
        {
          "filename": "console/console.swagger.json",
          "status": "modified",
          "additions": 43,
          "deletions": 0,
          "patch": "@@ -1060,6 +1060,39 @@\n         ]\n       }\n     },\n+    \"/v2/console/authenticate/logout\": {\n+      \"post\": {\n+        \"summary\": \"Log out a session and invalidate the session token.\",\n+        \"operationId\": \"Console_AuthenticateLogout\",\n+        \"responses\": {\n+          \"200\": {\n+            \"description\": \"A successful response.\",\n+            \"schema\": {\n+              \"properties\": {}\n+            }\n+          },\n+          \"default\": {\n+            \"description\": \"An unexpected error response.\",\n+            \"schema\": {\n+              \"$ref\": \"#/definitions/googlerpcStatus\"\n+            }\n+          }\n+        },\n+        \"parameters\": [\n+          {\n+            \"name\": \"body\",\n+            \"in\": \"body\",\n+            \"required\": true,\n+            \"schema\": {\n+              \"$ref\": \"#/definitions/consoleAuthenticateLogoutRequest\"\n+            }\n+          }\n+        ],\n+        \"tags\": [\n+          \"Console\"\n+        ]\n+      }\n+    },\n     \"/v2/console/config\": {\n       \"get\": {\n         \"summary\": \"Get server config and configuration warnings.\",\n@@ -2998,6 +3031,16 @@\n       },\n       \"title\": \"API Explorer List of Endpoints\"\n     },\n+    \"consoleAuthenticateLogoutRequest\": {\n+      \"type\": \"object\",\n+      \"properties\": {\n+        \"token\": {\n+          \"type\": \"string\",\n+          \"description\": \"Session token to log out.\"\n+        }\n+      },\n+      \"description\": \"Log out a session and invalidate a session token.\"\n+    },\n     \"consoleAuthenticateRequest\": {\n       \"type\": \"object\",\n       \"properties\": {"
        },
        {
          "filename": "console/console_grpc.pb.go",
          "status": "modified",
          "additions": 38,
          "deletions": 0,
          "patch": "@@ -22,6 +22,8 @@ const _ = grpc.SupportPackageIsVersion7\n type ConsoleClient interface {\n \t// Authenticate a console user with username and password.\n \tAuthenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*ConsoleSession, error)\n+\t// Log out a session and invalidate the session token.\n+\tAuthenticateLogout(ctx context.Context, in *AuthenticateLogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)\n \t// Add a new console user.\n \tAddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)\n \t// Ban a user.\n@@ -153,6 +155,15 @@ func (c *consoleClient) Authenticate(ctx context.Context, in *AuthenticateReques\n \treturn out, nil\n }\n \n+func (c *consoleClient) AuthenticateLogout(ctx context.Context, in *AuthenticateLogoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {\n+\tout := new(emptypb.Empty)\n+\terr := c.cc.Invoke(ctx, \"/nakama.console.Console/AuthenticateLogout\", in, out, opts...)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn out, nil\n+}\n+\n func (c *consoleClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {\n \tout := new(emptypb.Empty)\n \terr := c.cc.Invoke(ctx, \"/nakama.console.Console/AddUser\", in, out, opts...)\n@@ -663,6 +674,8 @@ func (c *consoleClient) WriteStorageObject(ctx context.Context, in *WriteStorage\n type ConsoleServer interface {\n \t// Authenticate a console user with username and password.\n \tAuthenticate(context.Context, *AuthenticateRequest) (*ConsoleSession, error)\n+\t// Log out a session and invalidate the session token.\n+\tAuthenticateLogout(context.Context, *AuthenticateLogoutRequest) (*emptypb.Empty, error)\n \t// Add a new console user.\n \tAddUser(context.Context, *AddUserRequest) (*emptypb.Empty, error)\n \t// Ban a user.\n@@ -785,6 +798,9 @@ type UnimplementedConsoleServer struct {\n func (UnimplementedConsoleServer) Authenticate(context.Context, *AuthenticateRequest) (*ConsoleSession, error) {\n \treturn nil, status.Errorf(codes.Unimplemented, \"method Authenticate not implemented\")\n }\n+func (UnimplementedConsoleServer) AuthenticateLogout(context.Context, *AuthenticateLogoutRequest) (*emptypb.Empty, error) {\n+\treturn nil, status.Errorf(codes.Unimplemented, \"method AuthenticateLogout not implemented\")\n+}\n func (UnimplementedConsoleServer) AddUser(context.Context, *AddUserRequest) (*emptypb.Empty, error) {\n \treturn nil, status.Errorf(codes.Unimplemented, \"method AddUser not implemented\")\n }\n@@ -984,6 +1000,24 @@ func _Console_Authenticate_Handler(srv interface{}, ctx context.Context, dec fun\n \treturn interceptor(ctx, in, info, handler)\n }\n \n+func _Console_AuthenticateLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n+\tin := new(AuthenticateLogoutRequest)\n+\tif err := dec(in); err != nil {\n+\t\treturn nil, err\n+\t}\n+\tif interceptor == nil {\n+\t\treturn srv.(ConsoleServer).AuthenticateLogout(ctx, in)\n+\t}\n+\tinfo := &grpc.UnaryServerInfo{\n+\t\tServer:     srv,\n+\t\tFullMethod: \"/nakama.console.Console/AuthenticateLogout\",\n+\t}\n+\thandler := func(ctx context.Context, req interface{}) (interface{}, error) {\n+\t\treturn srv.(ConsoleServer).AuthenticateLogout(ctx, req.(*AuthenticateLogoutRequest))\n+\t}\n+\treturn interceptor(ctx, in, info, handler)\n+}\n+\n func _Console_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n \tin := new(AddUserRequest)\n \tif err := dec(in); err != nil {\n@@ -2003,6 +2037,10 @@ var Console_ServiceDesc = grpc.ServiceDesc{\n \t\t\tMethodName: \"Authenticate\",\n \t\t\tHandler:    _Console_Authenticate_Handler,\n \t\t},\n+\t\t{\n+\t\t\tMethodName: \"AuthenticateLogout\",\n+\t\t\tHandler:    _Console_AuthenticateLogout_Handler,\n+\t\t},\n \t\t{\n \t\t\tMethodName: \"AddUser\",\n \t\t\tHandler:    _Console_AddUser_Handler,"
        },
        {
          "filename": "console/ui/dist/index.html",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -4,11 +4,11 @@\n   <meta charset=\"utf-8\">\n   <title>Nakama Console</title>\n   <base href=\"/\">\n-  <style type=\"text/css\">@font-face{font-family:'Montserrat';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/montserrat/v18/JTURjIg1_i6t8kCHKm45_ZpC3gTD_vx3rCubqg.woff2) format('woff2');unicode-range:U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;}@font-face{font-family:'Montserrat';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/montserrat/v18/JTURjIg1_i6t8kCHKm45_ZpC3g3D_vx3rCubqg.woff2) format('woff2');unicode-range:U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;}@font-face{font-family:'Montserrat';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/montserrat/v18/JTURjIg1_i6t8kCHKm45_ZpC3gbD_vx3rCubqg.woff2) format('woff2');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Montserrat';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/montserrat/v18/JTURjIg1_i6t8kCHKm45_ZpC3gfD_vx3rCubqg.woff2) format('woff2');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Montserrat';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/montserrat/v18/JTURjIg1_i6t8kCHKm45_ZpC3gnD_vx3rCs.woff2) format('woff2');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v27/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4taVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v27/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4kaVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v27/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4saVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+1F00-1FFF;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v27/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4jaVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0370-03FF;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v27/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4iaVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0590-05FF, U+20AA, U+25CC, U+FB1D-FB4F;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v27/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4vaVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v27/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4uaVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v27/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4gaVQUwaEQbjA.woff) format('woff');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}</style>\n+  <style type=\"text/css\">@font-face{font-family:'Montserrat';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/montserrat/v24/JTUHjIg1_i6t8kCHKm4532VJOt5-QNFgpCtZ6Hw0aXx-p7K4KLjztg.woff) format('woff');unicode-range:U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;}@font-face{font-family:'Montserrat';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/montserrat/v24/JTUHjIg1_i6t8kCHKm4532VJOt5-QNFgpCtZ6Hw9aXx-p7K4KLjztg.woff) format('woff');unicode-range:U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;}@font-face{font-family:'Montserrat';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/montserrat/v24/JTUHjIg1_i6t8kCHKm4532VJOt5-QNFgpCtZ6Hw2aXx-p7K4KLjztg.woff) format('woff');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Montserrat';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/montserrat/v24/JTUHjIg1_i6t8kCHKm4532VJOt5-QNFgpCtZ6Hw3aXx-p7K4KLjztg.woff) format('woff');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Montserrat';font-style:normal;font-weight:500;font-display:swap;src:url(https://fonts.gstatic.com/s/montserrat/v24/JTUHjIg1_i6t8kCHKm4532VJOt5-QNFgpCtZ6Hw5aXx-p7K4KLg.woff) format('woff');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v29/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4taVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v29/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4kaVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v29/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4saVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+1F00-1FFF;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v29/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4jaVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0370-03FF;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v29/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4iaVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0590-05FF, U+200C-2010, U+20AA, U+25CC, U+FB1D-FB4F;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v29/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4vaVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v29/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4uaVQUwaEQbjB_mQ.woff) format('woff');unicode-range:U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;}@font-face{font-family:'Open Sans';font-style:normal;font-weight:400;font-stretch:100%;font-display:swap;src:url(https://fonts.gstatic.com/s/opensans/v29/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4gaVQUwaEQbjA.woff) format('woff');unicode-range:U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;}</style>\n   <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n   <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n <link rel=\"stylesheet\" href=\"static/styles.14b882f135e080634619.css\"></head>\n <body class=\"h-100\">\n   <app-root></app-root>\n-<script src=\"static/runtime.4ced225923cd14368d64.js\" defer=\"\"></script><script src=\"static/polyfills.cb4331e883de4daa4c94.js\" defer=\"\"></script><script src=\"static/main.0b74ccf8d7e0caf7719b.js\" defer=\"\"></script></body>\n+<script src=\"static/runtime.4ced225923cd14368d64.js\" defer=\"\"></script><script src=\"static/polyfills.cb4331e883de4daa4c94.js\" defer=\"\"></script><script src=\"static/main.2778305943c5228ee227.js\" defer=\"\"></script></body>\n </html>"
        },
        {
          "filename": "console/ui/dist/static/main.2778305943c5228ee227.js",
          "status": "renamed",
          "additions": 1,
          "deletions": 1,
          "patch": null
        },
        {
          "filename": "console/ui/src/app/authentication-error.interceptor.ts",
          "status": "modified",
          "additions": 9,
          "deletions": 7,
          "patch": "@@ -29,13 +29,15 @@ export class AuthenticationErrorInterceptor implements HttpInterceptor {\n   intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n     return next.handle(req).pipe(catchError(err => {\n       if (err.status === 401) {\n-        this.authenticationService.logout();\n-\n-        if (!req.url.includes('/v3/auth')) {\n-          // only reload the page if we aren't on the auth pages, this is so that we can display the auth errors.\n-          const stateUrl = this.router.routerState.snapshot.url;\n-          const _ = this.router.navigate(['/login'], {queryParams: {next: stateUrl}});\n-        }\n+        this.authenticationService.logout().subscribe({\n+          next: () => {\n+            if (!req.url.includes('/v3/auth')) {\n+              // only reload the page if we aren't on the auth pages, this is so that we can display the auth errors.\n+              const stateUrl = this.router.routerState.snapshot.url;\n+              const _ = this.router.navigate(['/login'], {queryParams: {next: stateUrl}});\n+            }\n+          }\n+        });\n       } else if (err.status >= 500) {\n         console.log(`${err.status}: + ${err.error.message || err.statusText}`);\n       }"
        },
        {
          "filename": "console/ui/src/app/authentication.service.ts",
          "status": "modified",
          "additions": 11,
          "deletions": 5,
          "patch": "@@ -14,7 +14,7 @@\n \n import {Inject, Injectable} from '@angular/core';\n import {HttpClient} from '@angular/common/http';\n-import {BehaviorSubject, Observable} from 'rxjs';\n+import {BehaviorSubject, EMPTY, Observable} from 'rxjs';\n import {tap} from 'rxjs/operators';\n import {ConsoleService, ConsoleSession, UserRole} from './console.service';\n import {WINDOW} from './window.provider';\n@@ -79,10 +79,16 @@ export class AuthenticationService {\n     }));\n   }\n \n-  logout(): void {\n-    localStorage.removeItem(SESSION_LOCALSTORAGE_KEY);\n-    // @ts-ignore\n-    this.currentSessionSubject.next(null);\n+  logout(): Observable<any> {\n+    if (!this.currentSessionSubject.getValue()) {\n+      return EMPTY;\n+    }\n+    return this.consoleService.authenticateLogout('', {\n+      token: this.currentSessionSubject.getValue()?.token,\n+    }).pipe(tap(() => {\n+      localStorage.removeItem(SESSION_LOCALSTORAGE_KEY);\n+      this.currentSessionSubject.next(null);\n+    }));\n   }\n \n   segmentIdentify(session): void {"
        },
        {
          "filename": "console/ui/src/app/base/base.component.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -113,7 +113,9 @@ export class BaseComponent implements OnInit, OnDestroy {\n   }\n \n   logout(): void {\n-    this.authService.logout();\n+    this.authService.logout().subscribe(() => {\n+      this.router.navigate(['/login']);\n+    });\n   }\n \n   ngOnDestroy(): void {"
        },
        {
          "filename": "console/ui/src/app/console.service.ts",
          "status": "modified",
          "additions": 13,
          "deletions": 0,
          "patch": "@@ -66,6 +66,12 @@ export interface ApiEndpointList {\n \trpc_endpoints?:Array<ApiEndpointDescriptor>\n }\n \n+/** Log out a session and invalidate a session token. */\n+export interface AuthenticateLogoutRequest {\n+  // Session token to log out.\n+\ttoken?:string\n+}\n+\n /** Authenticate a console user with username and password. */\n export interface AuthenticateRequest {\n   // The password of the user.\n@@ -1013,6 +1019,13 @@ export class ConsoleService {\n     return this.httpClient.post<ConsoleSession>(this.config.host + urlPath, body, { params: params })\n   }\n \n+  /** Log out a session and invalidate the session token. */\n+  authenticateLogout(auth_token: string, body: AuthenticateLogoutRequest): Observable<any> {\n+\t\tconst urlPath = `/v2/console/authenticate/logout`;\n+    let params = new HttpParams();\n+    return this.httpClient.post(this.config.host + urlPath, body, { params: params, headers: this.getTokenAuthHeaders(auth_token) })\n+  }\n+\n   /** Get server config and configuration warnings. */\n   getConfig(auth_token: string): Observable<Config> {\n \t\tconst urlPath = `/v2/console/config`;"
        },
        {
          "filename": "main.go",
          "status": "modified",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -139,7 +139,8 @@ func main() {\n \tcookie := newOrLoadCookie(config)\n \tmetrics := server.NewLocalMetrics(logger, startupLogger, db, config)\n \tsessionRegistry := server.NewLocalSessionRegistry(metrics)\n-\tsessionCache := server.NewLocalSessionCache(config)\n+\tsessionCache := server.NewLocalSessionCache(config, config.GetSession().TokenExpirySec)\n+\tconsoleSessionCache := server.NewLocalSessionCache(config, config.GetConsole().TokenExpirySec)\n \tstatusRegistry := server.NewStatusRegistry(logger, config, sessionRegistry, jsonpbMarshaler)\n \ttracker := server.StartLocalTracker(logger, config, sessionRegistry, statusRegistry, metrics, jsonpbMarshaler)\n \trouter := server.NewLocalMessageRouter(sessionRegistry, tracker, jsonpbMarshaler)\n@@ -165,7 +166,7 @@ func main() {\n \tstatusHandler := server.NewLocalStatusHandler(logger, sessionRegistry, matchRegistry, tracker, metrics, config.GetName())\n \n \tapiServer := server.StartApiServer(logger, startupLogger, db, jsonpbMarshaler, jsonpbUnmarshaler, config, socialClient, leaderboardCache, leaderboardRankCache, sessionRegistry, sessionCache, statusRegistry, matchRegistry, matchmaker, tracker, router, streamManager, metrics, pipeline, runtime)\n-\tconsoleServer := server.StartConsoleServer(logger, startupLogger, db, config, tracker, router, streamManager, sessionCache, statusRegistry, statusHandler, runtimeInfo, matchRegistry, configWarnings, semver, leaderboardCache, leaderboardRankCache, apiServer, cookie)\n+\tconsoleServer := server.StartConsoleServer(logger, startupLogger, db, config, tracker, router, streamManager, sessionCache, consoleSessionCache, statusRegistry, statusHandler, runtimeInfo, matchRegistry, configWarnings, semver, leaderboardCache, leaderboardRankCache, apiServer, cookie)\n \n \tgaenabled := len(os.Getenv(\"NAKAMA_TELEMETRY\")) < 1\n \tconst gacode = \"UA-89792135-1\""
        },
        {
          "filename": "server/console.go",
          "status": "modified",
          "additions": 22,
          "deletions": 7,
          "patch": "@@ -19,6 +19,7 @@ import (\n \t\"crypto\"\n \t\"database/sql\"\n \t\"fmt\"\n+\t\"github.com/gofrs/uuid\"\n \t\"io/ioutil\"\n \t\"math\"\n \t\"net\"\n@@ -136,6 +137,7 @@ type ConsoleServer struct {\n \trouter               MessageRouter\n \tStreamManager        StreamManager\n \tsessionCache         SessionCache\n+\tconsoleSessionCache  SessionCache\n \tstatusRegistry       *StatusRegistry\n \tmatchRegistry        MatchRegistry\n \tstatusHandler        StatusHandler\n@@ -153,7 +155,7 @@ type ConsoleServer struct {\n \thttpClient           *http.Client\n }\n \n-func StartConsoleServer(logger *zap.Logger, startupLogger *zap.Logger, db *sql.DB, config Config, tracker Tracker, router MessageRouter, streamManager StreamManager, sessionCache SessionCache, statusRegistry *StatusRegistry, statusHandler StatusHandler, runtimeInfo *RuntimeInfo, matchRegistry MatchRegistry, configWarnings map[string]string, serverVersion string, leaderboardCache LeaderboardCache, leaderboardRankCache LeaderboardRankCache, api *ApiServer, cookie string) *ConsoleServer {\n+func StartConsoleServer(logger *zap.Logger, startupLogger *zap.Logger, db *sql.DB, config Config, tracker Tracker, router MessageRouter, streamManager StreamManager, sessionCache SessionCache, consoleSessionCache SessionCache, statusRegistry *StatusRegistry, statusHandler StatusHandler, runtimeInfo *RuntimeInfo, matchRegistry MatchRegistry, configWarnings map[string]string, serverVersion string, leaderboardCache LeaderboardCache, leaderboardRankCache LeaderboardRankCache, api *ApiServer, cookie string) *ConsoleServer {\n \tvar gatewayContextTimeoutMs string\n \tif config.GetConsole().IdleTimeoutMs > 500 {\n \t\t// Ensure the GRPC Gateway timeout is just under the idle timeout (if possible) to ensure it has priority.\n@@ -165,7 +167,7 @@ func StartConsoleServer(logger *zap.Logger, startupLogger *zap.Logger, db *sql.D\n \tserverOpts := []grpc.ServerOption{\n \t\t//grpc.StatsHandler(&ocgrpc.ServerHandler{IsPublicEndpoint: true}),\n \t\tgrpc.MaxRecvMsgSize(int(config.GetConsole().MaxMessageSizeBytes)),\n-\t\tgrpc.UnaryInterceptor(consoleInterceptorFunc(logger, config)),\n+\t\tgrpc.UnaryInterceptor(consoleInterceptorFunc(logger, config, consoleSessionCache)),\n \t}\n \tgrpcServer := grpc.NewServer(serverOpts...)\n \n@@ -179,6 +181,7 @@ func StartConsoleServer(logger *zap.Logger, startupLogger *zap.Logger, db *sql.D\n \t\trouter:               router,\n \t\tStreamManager:        streamManager,\n \t\tsessionCache:         sessionCache,\n+\t\tconsoleSessionCache:  consoleSessionCache,\n \t\tstatusRegistry:       statusRegistry,\n \t\tmatchRegistry:        matchRegistry,\n \t\tstatusHandler:        statusHandler,\n@@ -423,12 +426,15 @@ func (s *ConsoleServer) Stop() {\n \ts.grpcServer.GracefulStop()\n }\n \n-func consoleInterceptorFunc(logger *zap.Logger, config Config) func(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) (interface{}, error) {\n+func consoleInterceptorFunc(logger *zap.Logger, config Config, sessionCache SessionCache) func(context.Context, interface{}, *grpc.UnaryServerInfo, grpc.UnaryHandler) (interface{}, error) {\n \treturn func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n \t\tif info.FullMethod == \"/nakama.console.Console/Authenticate\" {\n \t\t\t// Skip authentication check for Login endpoint.\n \t\t\treturn handler(ctx, req)\n \t\t}\n+\t\tif info.FullMethod == \"/nakama.console.Console/AuthenticateLogout\" {\n+\t\t\treturn handler(ctx, req)\n+\t\t}\n \n \t\tmd, ok := metadata.FromIncomingContext(ctx)\n \t\tif !ok {\n@@ -446,7 +452,7 @@ func consoleInterceptorFunc(logger *zap.Logger, config Config) func(context.Cont\n \t\t\treturn nil, status.Error(codes.Unauthenticated, \"Console authentication required.\")\n \t\t}\n \n-\t\tif ctx, ok = checkAuth(ctx, config, auth[0]); !ok {\n+\t\tif ctx, ok = checkAuth(ctx, config, auth[0], sessionCache); !ok {\n \t\t\treturn nil, status.Error(codes.Unauthenticated, \"Console authentication invalid.\")\n \t\t}\n \t\trole := ctx.Value(ctxConsoleRoleKey{}).(console.UserRole)\n@@ -460,7 +466,7 @@ func consoleInterceptorFunc(logger *zap.Logger, config Config) func(context.Cont\n \t}\n }\n \n-func checkAuth(ctx context.Context, config Config, auth string) (context.Context, bool) {\n+func checkAuth(ctx context.Context, config Config, auth string, sessionCache SessionCache) (context.Context, bool) {\n \tconst basicPrefix = \"Basic \"\n \tconst bearerPrefix = \"Bearer \"\n \n@@ -481,7 +487,8 @@ func checkAuth(ctx context.Context, config Config, auth string) (context.Context\n \t\treturn ctx, true\n \t} else if strings.HasPrefix(auth, bearerPrefix) {\n \t\t// Bearer token authentication.\n-\t\ttoken, err := jwt.Parse(auth[len(bearerPrefix):], func(token *jwt.Token) (interface{}, error) {\n+\t\ttokenStr := auth[len(bearerPrefix):]\n+\t\ttoken, err := jwt.Parse(tokenStr, func(token *jwt.Token) (interface{}, error) {\n \t\t\tif s, ok := token.Method.(*jwt.SigningMethodHMAC); !ok || s.Hash != crypto.SHA256 {\n \t\t\t\treturn nil, fmt.Errorf(\"unexpected signing method: %v\", token.Header[\"alg\"])\n \t\t\t}\n@@ -491,7 +498,7 @@ func checkAuth(ctx context.Context, config Config, auth string) (context.Context\n \t\t\t// Token verification failed.\n \t\t\treturn ctx, false\n \t\t}\n-\t\tuname, email, role, exp, ok := parseConsoleToken([]byte(config.GetConsole().SigningKey), auth[len(bearerPrefix):])\n+\t\tid, uname, email, role, exp, ok := parseConsoleToken([]byte(config.GetConsole().SigningKey), tokenStr)\n \t\tif !ok || !token.Valid {\n \t\t\t// The token or its claims are invalid.\n \t\t\treturn ctx, false\n@@ -504,6 +511,14 @@ func checkAuth(ctx context.Context, config Config, auth string) (context.Context\n \t\t\t// Token expired.\n \t\t\treturn ctx, false\n \t\t}\n+\t\tuserId, err := uuid.FromString(id)\n+\t\tif err != nil {\n+\t\t\t// Malformed id\n+\t\t\treturn ctx, false\n+\t\t}\n+\t\tif !sessionCache.IsValidSession(userId, exp, tokenStr) {\n+\t\t\treturn ctx, false\n+\t\t}\n \n \t\tctx = context.WithValue(context.WithValue(context.WithValue(ctx, ctxConsoleRoleKey{}, role), ctxConsoleUsernameKey{}, uname), ctxConsoleEmailKey{}, email)\n "
        },
        {
          "filename": "server/console_authenticate.go",
          "status": "modified",
          "additions": 38,
          "deletions": 7,
          "patch": "@@ -20,6 +20,8 @@ import (\n \t\"database/sql\"\n \t\"errors\"\n \t\"fmt\"\n+\t\"github.com/gofrs/uuid\"\n+\t\"google.golang.org/protobuf/types/known/emptypb\"\n \t\"time\"\n \n \tjwt \"github.com/golang-jwt/jwt/v4\"\n@@ -32,6 +34,7 @@ import (\n )\n \n type ConsoleTokenClaims struct {\n+\tID        string           `json:\"id,omitempty\"`\n \tUsername  string           `json:\"usn,omitempty\"`\n \tEmail     string           `json:\"ema,omitempty\"`\n \tRole      console.UserRole `json:\"rol,omitempty\"`\n@@ -50,7 +53,7 @@ func (stc *ConsoleTokenClaims) Valid() error {\n \treturn nil\n }\n \n-func parseConsoleToken(hmacSecretByte []byte, tokenString string) (username, email string, role console.UserRole, exp int64, ok bool) {\n+func parseConsoleToken(hmacSecretByte []byte, tokenString string) (id, username, email string, role console.UserRole, exp int64, ok bool) {\n \ttoken, err := jwt.ParseWithClaims(tokenString, &ConsoleTokenClaims{}, func(token *jwt.Token) (interface{}, error) {\n \t\tif s, ok := token.Method.(*jwt.SigningMethodHMAC); !ok || s.Hash != crypto.SHA256 {\n \t\t\treturn nil, fmt.Errorf(\"unexpected signing method: %v\", token.Header[\"alg\"])\n@@ -64,22 +67,24 @@ func parseConsoleToken(hmacSecretByte []byte, tokenString string) (username, ema\n \tif !ok || !token.Valid {\n \t\treturn\n \t}\n-\treturn claims.Username, claims.Email, claims.Role, claims.ExpiresAt, true\n+\treturn claims.ID, claims.Username, claims.Email, claims.Role, claims.ExpiresAt, true\n }\n \n func (s *ConsoleServer) Authenticate(ctx context.Context, in *console.AuthenticateRequest) (*console.ConsoleSession, error) {\n \trole := console.UserRole_USER_ROLE_UNKNOWN\n \tvar uname string\n \tvar email string\n+\tvar id uuid.UUID\n \tswitch in.Username {\n \tcase s.config.GetConsole().Username:\n \t\tif in.Password == s.config.GetConsole().Password {\n \t\t\trole = console.UserRole_USER_ROLE_ADMIN\n \t\t\tuname = in.Username\n+\t\t\tid = uuid.Nil\n \t\t}\n \tdefault:\n \t\tvar err error\n-\t\tuname, email, role, err = s.lookupConsoleUser(ctx, in.Username, in.Password)\n+\t\tid, uname, email, role, err = s.lookupConsoleUser(ctx, in.Username, in.Password)\n \t\tif err != nil {\n \t\t\treturn nil, err\n \t\t}\n@@ -89,24 +94,50 @@ func (s *ConsoleServer) Authenticate(ctx context.Context, in *console.Authentica\n \t\treturn nil, status.Error(codes.Unauthenticated, \"Invalid credentials.\")\n \t}\n \n+\texp := time.Now().UTC().Add(time.Duration(s.config.GetConsole().TokenExpirySec) * time.Second).Unix()\n \ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, &ConsoleTokenClaims{\n-\t\tExpiresAt: time.Now().UTC().Add(time.Duration(s.config.GetConsole().TokenExpirySec) * time.Second).Unix(),\n+\t\tExpiresAt: exp,\n+\t\tID:        id.String(),\n \t\tUsername:  uname,\n \t\tEmail:     email,\n \t\tRole:      role,\n \t\tCookie:    s.cookie,\n \t})\n \tkey := []byte(s.config.GetConsole().SigningKey)\n \tsignedToken, _ := token.SignedString(key)\n+\n+\ts.consoleSessionCache.Add(id, exp, signedToken, 0, \"\")\n \treturn &console.ConsoleSession{Token: signedToken}, nil\n }\n \n-func (s *ConsoleServer) lookupConsoleUser(ctx context.Context, unameOrEmail, password string) (uname string, email string, role console.UserRole, err error) {\n+func (s *ConsoleServer) AuthenticateLogout(ctx context.Context, in *console.AuthenticateLogoutRequest) (*emptypb.Empty, error) {\n+\ttoken, err := jwt.Parse(in.Token, func(token *jwt.Token) (interface{}, error) {\n+\t\tif s, ok := token.Method.(*jwt.SigningMethodHMAC); !ok || s.Hash != crypto.SHA256 {\n+\t\t\treturn nil, fmt.Errorf(\"unexpected signing method: %v\", token.Header[\"alg\"])\n+\t\t}\n+\t\treturn []byte(s.config.GetConsole().SigningKey), nil\n+\t})\n+\tif err != nil {\n+\t\ts.logger.Error(\"Failed to parse the session token.\", zap.Error(err))\n+\t}\n+\tid, _, _, _, exp, ok := parseConsoleToken([]byte(s.config.GetConsole().SigningKey), in.Token)\n+\tif !ok || !token.Valid {\n+\t\ts.logger.Error(\"Invalid token.\", zap.Error(err))\n+\t}\n+\tidUuid, err := uuid.FromString(id)\n+\tif id != \"\" && err == nil {\n+\t\ts.consoleSessionCache.Remove(idUuid, exp, in.Token, 0, \"\")\n+\t}\n+\n+\treturn &emptypb.Empty{}, nil\n+}\n+\n+func (s *ConsoleServer) lookupConsoleUser(ctx context.Context, unameOrEmail, password string) (id uuid.UUID, uname string, email string, role console.UserRole, err error) {\n \trole = console.UserRole_USER_ROLE_UNKNOWN\n-\tquery := \"SELECT username, email, role, password, disable_time FROM console_user WHERE username = $1 OR email = $1\"\n+\tquery := \"SELECT id, username, email, role, password, disable_time FROM console_user WHERE username = $1 OR email = $1\"\n \tvar dbPassword []byte\n \tvar dbDisableTime pgtype.Timestamptz\n-\terr = s.db.QueryRowContext(ctx, query, unameOrEmail).Scan(&uname, &email, &role, &dbPassword, &dbDisableTime)\n+\terr = s.db.QueryRowContext(ctx, query, unameOrEmail).Scan(&id, &uname, &email, &role, &dbPassword, &dbDisableTime)\n \tif err != nil {\n \t\tif err == sql.ErrNoRows {\n \t\t\terr = nil"
        },
        {
          "filename": "server/console_storage_import.go",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -55,7 +55,7 @@ func (s *ConsoleServer) importStorage(w http.ResponseWriter, r *http.Request) {\n \t\t}\n \t\treturn\n \t}\n-\tctx, ok := checkAuth(r.Context(), s.config, auth)\n+\tctx, ok := checkAuth(r.Context(), s.config, auth, s.consoleSessionCache)\n \tif !ok {\n \t\tw.WriteHeader(401)\n \t\tif _, err := w.Write([]byte(\"Console authentication invalid.\")); err != nil {"
        },
        {
          "filename": "server/session_cache.go",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -56,7 +56,7 @@ type LocalSessionCache struct {\n \tcache map[uuid.UUID]*sessionCacheUser\n }\n \n-func NewLocalSessionCache(config Config) SessionCache {\n+func NewLocalSessionCache(config Config, tokenExpirySec int64) SessionCache {\n \tctx, ctxCancelFn := context.WithCancel(context.Background())\n \n \ts := &LocalSessionCache{\n@@ -69,7 +69,7 @@ func NewLocalSessionCache(config Config) SessionCache {\n \t}\n \n \tgo func() {\n-\t\tticker := time.NewTicker(2 * time.Duration(config.GetSession().TokenExpirySec) * time.Second)\n+\t\tticker := time.NewTicker(2 * time.Duration(tokenExpirySec) * time.Second)\n \t\tfor {\n \t\t\tselect {\n \t\t\tcase <-s.ctx.Done():"
        }
      ],
      "file_patterns": {
        "security_files": 3,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 7,
        "max_directory_depth": 5
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "b0eee4d43a379d8d69f3fe9eb388c3236da7e179",
            "date": "2025-01-14T12:33:49Z",
            "author_login": "sesposito"
          },
          {
            "sha": "723250ff23fba448a81bc3d1c7bbe28a510314ef",
            "date": "2025-01-06T15:49:12Z",
            "author_login": "zyro"
          },
          {
            "sha": "8a72e2c4b7a13425daf992c9b19e8a54488ef7be",
            "date": "2024-12-03T10:22:47Z",
            "author_login": "sesposito"
          },
          {
            "sha": "0457b785c79233db66cd084c2c22a347c2705fae",
            "date": "2024-11-30T15:15:45Z",
            "author_login": "mofirouz"
          },
          {
            "sha": "592b52c64d4837bae27b09f9a864fe860f629e80",
            "date": "2024-11-25T14:04:21Z",
            "author_login": "zyro"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cwe_id": "CWE-613",
    "description": "Old session tokens can be used to authenticate to the application and send authenticated requests.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-05T09:15:08.357",
    "last_modified": "2024-11-21T07:00:44.093",
    "fix_date": "2022-07-02T17:35:56Z"
  },
  "references": [
    {
      "url": "https://github.com/heroiclabs/nakama/commit/ce8d3921e2acd44ef8b5e6edfe595b6df067b166",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/35acf263-6db4-4310-ab27-4c3c3a53f796",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/heroiclabs/nakama/commit/ce8d3921e2acd44ef8b5e6edfe595b6df067b166",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/35acf263-6db4-4310-ab27-4c3c3a53f796",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.455041",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "nakama",
    "owner": "heroiclabs",
    "created_at": "2017-01-13T17:15:12Z",
    "updated_at": "2025-01-14T12:33:54Z",
    "pushed_at": "2025-01-14T12:33:54Z",
    "size": 98249,
    "stars": 9191,
    "forks": 1111,
    "open_issues": 101,
    "watchers": 9191,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Go": 4224507,
      "TypeScript": 241504,
      "Lua": 217247,
      "HTML": 126016,
      "Shell": 24743,
      "SCSS": 19484,
      "Yacc": 14251,
      "Dockerfile": 3620,
      "Python": 2707,
      "JavaScript": 1014,
      "Makefile": 372
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:39:19.885583"
  }
}