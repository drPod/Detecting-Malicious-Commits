{
  "cve_id": "CVE-2022-23060",
  "github_data": {
    "repository": "shopizer-ecommerce/shopizer",
    "fix_commit": "6b9f1ecd303b3b724d96bd08095c1a751dcc287e",
    "related_commits": [
      "6b9f1ecd303b3b724d96bd08095c1a751dcc287e",
      "6b9f1ecd303b3b724d96bd08095c1a751dcc287e"
    ],
    "patch_url": "https://github.com/shopizer-ecommerce/shopizer/commit/6b9f1ecd303b3b724d96bd08095c1a751dcc287e.patch",
    "fix_commit_details": {
      "sha": "6b9f1ecd303b3b724d96bd08095c1a751dcc287e",
      "commit_date": "2021-10-04T01:08:44Z",
      "author": {
        "login": "shopizer-ecommerce",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "working version 3.0.alpha",
        "length": 25,
        "has_description": false,
        "references_issue": false
      },
      "stats": {
        "total": 21996,
        "additions": 2801,
        "deletions": 19195
      },
      "files": [
        {
          "filename": "README.md",
          "status": "modified",
          "additions": 258,
          "deletions": 0,
          "patch": "@@ -1,3 +1,6 @@\n+------------------------------------------------------------------------\n+English\n+------------------------------------------------------------------------\n Shopizer (for java 1.8 +)\n -------------------\n \n@@ -119,4 +122,259 @@ If you have interest in giving feedback or for participating to Shopizer project\n Feel to use the contact form <http://www.shopizer.com/contact.html> and share your email address\n so we can send an invite to our Slack channel\n \n+### How to Contribute:\n+-------------------\n+Fork the repository to your GitHub account\n+\n+Clone from fork repository\n+-------------------\n+\n+       $ git clone https://github.com/yourusername/shopizer.git\n+\n+Build application according to steps provided above\n+\n+Synchronize lastest version with the upstream\n+-------------------\n+\n+       $ git remote add upstream https://github.com/yourusername/shopizer.git\n+\t   $ git pull upstream 2.17.0\n+\n+Create new branch in your repository\n+-------------------\n+\n+\t   $ git checkout -b branch-name\n+\n+\n+Check your branch status before commit to the branch\n+-------------------\n+\n+\t   $ git status \n+\t   $ git commit \n+\n+Push changes to GitHub\n+-------------------\n+\n+\t   $ git push -u origin HEAD\n+\n+\n+\n+------------------------------------------------------------------------\n+FRENCH\n+------------------------------------------------------------------------\n+\n+Shopizer (pour java 1.8 +)\n+-------------------\n+\n+[![last_version](https://img.shields.io/badge/last_version-v2.12.0-blue.svg?style=flat)](https://github.com/shopizer-ecommerce/shopizer/tree/2.12.0)\n+[![Official site](https://img.shields.io/website-up-down-green-red/https/shields.io.svg?label=official%20site)](http://www.shopizer.com/)\n+[![Docker Pulls](https://img.shields.io/docker/pulls/shopizerecomm/shopizer.svg)](https://hub.docker.com/r/shopizerecomm/shopizer)\n+[![stackoverflow](https://img.shields.io/badge/shopizer-stackoverflow-orange.svg?style=flat)](http://stackoverflow.com/questions/tagged/shopizer)\n+\n+\n+Logiciel de commerce \u00e9lectronique open source Java\n+\n+- Panier\n+- Catalogue\n+- Chercher\n+- Check-out\n+- Administration\n+- API REST\n+\n+Voir la d\u00e9mo (jsp):\n+-------------------\n+http://aws-demo.shopizer.com:8080/\n+\n+Voir la d\u00e9mo (angular):\n+-------------------\n+Bient\u00f4t disponible\n+\n+\n+Obtenez le code:\n+-------------------\n+Clonez le r\u00e9f\u00e9rentiel:\n+     \n+\t $ git clone git://github.com/shopizer-ecommerce/shopizer.git\n+\n+Si c'est la premi\u00e8re fois que vous utilisez Github, consultez  http://help.github.com to learn the basics.\n+\n+ Vous pouvez \u00e9galement t\u00e9l\u00e9charger le fichier zip contenant le code depuis https://github.com/shopizer-ecommerce/shopizer \n+\n+Pour cr\u00e9er l'application:\n+-------------------\t\n+Depuis la ligne de commande:\n+\n+\t$ cd shopizer\n+\t$ mvnw clean install\n+\t\n+\n+Ex\u00e9cutez l'application depuis Tomcat\n+-------------------\n+copier sm-shop / target / ROOT.war vers tomcat ou tout autre r\u00e9pertoire de d\u00e9ploiement du serveur d'applications\n+\n+Augmenter l'espace du tas \u00e0 1024 m \uff08Heap space)\n+\n+### Configuration de l'espace de tas dans Tomcat (Heap space):\n+\n+\n+Si vous utilisez Tomcat, modifiez catalina.bat pour les utilisateurs Windows ou catalina.sh pour les utilisateurs Linux / Mac\n+\n+\tsous Windows\n+\tset JAVA_OPTS=\"-Xms1024m -Xmx1024m -XX:MaxPermSize=256m\" \n+\t\n+\tsous Linux / Mac\n+\texport JAVA_OPTS=\"-Xms1024m -Xmx1024m -XX:MaxPermSize=256m\" \n+\n+Ex\u00e9cutez l'application \u00e0 partir de Spring Boot\n+-------------------\n+\n+       $ cd sm-shop\n+       $ mvnw spring-boot:run\n+\n+Ex\u00e9cutez l'application \u00e0 partir de Spring Boot dans eclipse\n+-------------------\n+\n+Faites un clic droit sur com.salesmanager.shop.application.ShopApplication\n+\n+ex\u00e9cuter en tant qu'application Java\n+\n+### Acc\u00e9dez \u00e0 l'application:\n+-------------------\n+\n+Acc\u00e9dez \u00e0 l'application Web d\u00e9ploy\u00e9e \u00e0 l'adresse: http: //localhost:8080/\n+\n+Acc\u00e9dez \u00e0 la section d'administration \u00e0 l'adresse: http://localhost: 8080/admin\n+\n+nom d'utilisateur: admin@shopizer.com\n+\n+mot de passe: password\n+\n+Les instructions ci-dessus vous permettront d'ex\u00e9cuter l'application avec les param\u00e8tres et configurations par d\u00e9faut.\n+Veuillez lire les instructions pour vous connecter \u00e0 MySQL, configurer un serveur de messagerie et configurer d'autres sous-syst\u00e8mes\n+\n+\n+### Documentation:\n+-------------------\n+\n+Documentation disponible sur le wiki <http://shopizer-ecommerce.github.io/shopizer/#>\n+\n+ChatOps <https://shopizer.slack.com> - Rejoignez notre cha\u00eene Slack https://shopizer-slackin.herokuapp.com/\n+\n+Plus d'informations sont disponibles sur le site Web de Shopizer ici <http://www.shopizer.com>\n+\n+### Participation:\n+-------------------\n+\n+Si vous souhaitez donner votre avis ou participer de quelque mani\u00e8re que ce soit au projet Shopizer\n+N'h\u00e9sitez pas \u00e0 utiliser le formulaire de contact <http://www.shopizer.com/contact.html> et \u00e0 partager votre adresse email\n+afin que nous puissions envoyer une invitation sur notre cha\u00eene Slack\n+\n+\n+\n+------------------------------------------------------------------------\n+\u4e2d\u6587\u7248\u672c\n+------------------------------------------------------------------------\n+Shopizer\uff08\u9002\u7528\u4e8e java 1.8 +\uff09\n+-------------------\n+\n+[![\u6700\u65b0\u7248\u672c](https://img.shields.io/badge/last_version-v2.12.0-blue.svg?style=flat)](https://github.com/shopizer-ecommerce/shopizer/tree/2.12.0)\n+[![\u5b98\u65b9\u7f51\u7ad9](https://img.shields.io/website-up-down-green-red/https/shields.io.svg?label=official%20site)](http://www.shopizer.com/)\n+[![Docker Pulls](https://img.shields.io/docker/pulls/shopizerecomm/shopizer.svg)](https://hub.docker.com/r/shopizerecomm/shopizer)\n+[![stackoverflow](https://img.shields.io/badge/shopizer-stackoverflow-orange.svg?style=flat)](http://stackoverflow.com/questions/tagged/shopizer)\n+\n+Java\u5f00\u6e90\u7535\u5b50\u5546\u52a1\u8f6f\u4ef6 \n+\n+- \u8d2d\u7269\u8f66\n+- \u76ee\u5f55\n+- \u641c\u7d22\n+- \u67e5\u770b\n+- \u884c\u653f\n+- REST API \n+\n+\u53c2\u9605\u6f14\u793a\uff08jsp\uff09\uff1a\n+-------------------\n+http://aws-demo.shopizer.com:8080/\n+\n+\u8bf7\u53c2\u9605\u6f14\u793a\uff08\u89d2\u5ea6\uff09\uff1a\n+-------------------\n+\u5373\u5c06\u63a8\u51fa\n+\n+\n+\u83b7\u53d6\u4ee3\u7801\uff1a\n+-------------------\n+\u514b\u9686\u5b58\u50a8\u5e93\uff1a\n+     \n+$ git clone git://github.com/shopizer-ecommerce/shopizer.git\n+\n+\u5982\u679c\u8fd9\u662f\u60a8\u7b2c\u4e00\u6b21\u4f7f\u7528 Github\uff0c\u8bf7\u67e5\u770b http://help.github.com \u4ee5\u4e86\u89e3\u57fa\u7840\u77e5\u8bc6\u3002\n+\n+\u60a8\u8fd8\u53ef\u4ee5\u4ece https://github.com/shopizer-ecommerce/shopizer \u4e0b\u8f7d\u5305\u542b\u4ee3\u7801\u7684 zip \u6587\u4ef6\n+\n+\u5c06\u8981\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\uff1a \n+\n+-------------------\n+\u4ece\u547d\u4ee4\u884c\uff1a \n+\n+\t$ cd shopizer\n+\t$ mvnw clean install\n+\n+\u4ece Tomcat \u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\n+-------------------\n+\u5c06 sm-shop/target/ROOT.war \u590d\u5236\u5230 tomcat \u6216\u4efb\u4f55\u5176\u4ed6\u5e94\u7528\u670d\u52a1\u5668\u90e8\u7f72\u76ee\u5f55\n+\n+\u5c06\u5806\u7a7a\u95f4\u589e\u52a0\u5230 1024 m \n+\n+###Tomcat\u4e2d\u7684\u5806\u7a7a\u95f4\u914d\u7f6e\uff1a\n+\n+\n+\u5982\u679c\u60a8\u4f7f\u7528 Tomcat\uff0c\u8bf7\u4e3a windows \u7528\u6237\u7f16\u8f91 catalina.bat \u6216\u4e3a linux / Mac \u7528\u6237\u7f16\u8f91 catalina.sh\n+\n+\u5728 Windows \u4e2d\n+\u8bbe\u7f6e JAVA_OPTS=\"-Xms1024m -Xmx1024m -XX:MaxPermSize=256m\"\n+\n+\u5728 Linux / Mac \u4e2d\n+\u5bfc\u51fa JAVA_OPTS=\"-Xms1024m -Xmx1024m -XX:MaxPermSize=256m\"\n+\n+\u4ece Spring Boot \u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\n+-------------------\n+\n+        $ cd sm-shop\n+        $ mvnw spring-boot:run\n+\n+\u5728 Eclipse \u4e2d\u4ece Spring Boot \u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\n+-------------------\n+\n+\u53f3\u952e\u5355\u51fb com.salesmanager.shop.application.ShopApplication\n+\n+\u4f5c\u4e3a Java \u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c \n+\n+### \u8bbf\u95ee\u5e94\u7528\u7a0b\u5e8f\uff1a\n+-------------------\n+\n+\u8bbf\u95ee\u5df2\u90e8\u7f72\u7684 Web \u5e94\u7528\u7a0b\u5e8f\uff1ahttp://localhost:8080/\n+\n+\u8bbf\u95ee\u7ba1\u7406\u90e8\u5206\uff1ahttp://localhost:8080/admin\n+\n+\u7528\u6237\u540d\uff1aadmin@shopizer.com\n+\n+\u5bc6\u7801\uff1apassword\n+\n+\u4e0a\u8ff0\u8bf4\u660e\u5c06\u8ba9\u60a8\u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u548c\u914d\u7f6e\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u3002\n+\u8bf7\u9605\u8bfb\u6709\u5173\u5982\u4f55\u8fde\u63a5\u5230 MySQL\u3001\u914d\u7f6e\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u5668\u548c\u914d\u7f6e\u5176\u4ed6\u5b50\u7cfb\u7edf\u7684\u8bf4\u660e\n+\n+\n+### \u6587\u6863\uff1a\n+-------------------\n+\n+\u53ef\u4ece wiki <http://shopizer-ecommerce.github.io/shopizer/#> \u83b7\u5f97\u7684\u6587\u6863\n+\n+ChatOps <https://shopizer.slack.com> - \u52a0\u5165\u6211\u4eec\u7684 Slack \u9891\u9053 https://shopizer-slackin.herokuapp.com/\n+\n+\u66f4\u591a\u4fe1\u606f\u53ef\u5728\u6b64\u5904\u7684\u8d2d\u7269\u8005\u7f51\u7ad9\u4e0a\u83b7\u5f97 <http://www.shopizer.com>\n+\n+### \u53c2\u4e0e\uff1a\n+-------------------\n+\n+\u5982\u679c\u60a8\u6709\u5174\u8da3\u63d0\u4f9b\u53cd\u9988\u6216\u4ee5\u4efb\u4f55\u65b9\u5f0f\u53c2\u4e0e Shopizer \u9879\u76ee\n+\u8bf7\u4f7f\u7528\u8054\u7cfb\u8868 <http://www.shopizer.com/contact.html> \u5e76\u5206\u4eab\u60a8\u7684\u7535\u5b50\u90ae\u4ef6\u5730\u5740\n+\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u9080\u8bf7\u60a8\u8fdb\u5165\u6211\u4eec\u7684 Slack \u9891\u9053\n "
        },
        {
          "filename": "pom.xml",
          "status": "modified",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -22,7 +22,7 @@\n \t<parent>\n \t\t<groupId>org.springframework.boot</groupId>\n \t\t<artifactId>spring-boot-starter-parent</artifactId>\n-\t\t<version>2.3.8.RELEASE</version>\n+\t\t<version>2.5.5</version>\n \t</parent>\n \n  \t<modules>\n@@ -611,4 +611,4 @@\n \t\t</plugins>\n \t</build>\n \t\n-</project>\n+</project>\n\\ No newline at end of file"
        },
        {
          "filename": "sm-core-model/src/main/java/com/salesmanager/core/constants/SchemaConstant.java",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -12,7 +12,9 @@ public class SchemaConstant {\n \t * \n \t */\n \t//public static final String[] LANGUAGE_ISO_CODE = {\"en\", \"fr\", \"ru\", \"es\", \"ar\"};\n-\tpublic static final String[] LANGUAGE_ISO_CODE = {\"en\", \"fr\", \"es\"};\n+\n+\t@Deprecated\n+\tpublic static final String[] LANGUAGE_ISO_CODE = {\"en\", \"fr\", \"es\"}; //which descriptions will ve used for reference data\n \t\n \tpublic final static int DESCRIPTION_ID_ALLOCATION_SIZE = 1;\n \tpublic final static int DESCRIPTION_ID_START_VALUE = 2000;"
        },
        {
          "filename": "sm-core-model/src/main/java/com/salesmanager/core/model/catalog/product/availability/ProductAvailability.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": "@@ -29,7 +29,6 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.salesmanager.core.constants.SchemaConstant;\n-import com.salesmanager.core.model.catalog.category.Category;\n import com.salesmanager.core.model.catalog.product.Product;\n import com.salesmanager.core.model.catalog.product.ProductDimensions;\n import com.salesmanager.core.model.catalog.product.price.ProductPrice;\n@@ -93,7 +92,7 @@ public class ProductAvailability extends SalesManagerEntity<Long, ProductAvailab\n \tprivate String owner;\n \n \t@Column(name = \"STATUS\")\n-\tprivate boolean productStatus = true;\n+\tprivate boolean productStatus = true; //can be used as flag for instance can be purchase or not\n \n \t@Column(name = \"FREE_SHIPPING\")\n \tprivate boolean productIsAlwaysFreeShipping;"
        },
        {
          "filename": "sm-core-model/src/main/java/com/salesmanager/core/model/catalog/product/image/ProductImage.java",
          "status": "modified",
          "additions": 12,
          "deletions": 0,
          "patch": "@@ -62,6 +62,10 @@ public class ProductImage extends SalesManagerEntity<Long, ProductImage> {\n \t@JoinColumn(name = \"PRODUCT_ID\", nullable = false)\n \tprivate Product product;\n \t\n+\t@Column(name = \"SORT_ORDER\")\n+\tprivate Integer sortOrder = new Integer(0);\n+\t\n+\n \t@Transient\n \tprivate InputStream image = null;\n \t\n@@ -85,6 +89,14 @@ public boolean isDefaultImage() {\n \tpublic void setDefaultImage(boolean defaultImage) {\n \t\tthis.defaultImage = defaultImage;\n \t}\n+\t\n+\tpublic Integer getSortOrder() {\n+\t\treturn sortOrder;\n+\t}\n+\n+\tpublic void setSortOrder(Integer sortOrder) {\n+\t\tthis.sortOrder = sortOrder;\n+\t}\n \n \tpublic int getImageType() {\n \t\treturn imageType;"
        },
        {
          "filename": "sm-core-model/src/main/java/com/salesmanager/core/model/catalog/product/price/FinalPrice.java",
          "status": "modified",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -22,6 +22,7 @@ public class FinalPrice implements Serializable {\n \tprivate BigDecimal finalPrice = null;//final price discount or not\n \tprivate boolean discounted = false;\n \tprivate int discountPercent = 0;\n+\tprivate String stringPrice;\n \t\n \tprivate Date discountEndDate = null;\n \t\n@@ -104,4 +105,12 @@ public ProductPrice getProductPrice() {\n \t\treturn productPrice;\n \t}\n \n+\tpublic String getStringPrice() {\n+\t\treturn stringPrice;\n+\t}\n+\n+\tpublic void setStringPrice(String stringPrice) {\n+\t\tthis.stringPrice = stringPrice;\n+\t}\n+\n }"
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/modules/cms/product/ProductFileManagerImpl.java",
          "status": "modified",
          "additions": 12,
          "deletions": 8,
          "patch": "@@ -108,8 +108,8 @@ public void addProductImage(ProductImage productImage, ImageContentFile contentI\n        * largeContentImage.setDefaultImage(productImage.isDefaultImage());\n        * largeContentImage.setImageName(new\n        * StringBuilder().append(\"L-\").append(productImage.getProductImage()).toString());\n-       * \n-       * \n+       *\n+       *\n        * uploadImage.uploadProductImage(configuration, productImage, largeContentImage);\n        */\n \n@@ -120,7 +120,7 @@ public void addProductImage(ProductImage productImage, ImageContentFile contentI\n        * smallContentImage.setDefaultImage(productImage.isDefaultImage());\n        * smallContentImage.setImageName(new\n        * StringBuilder().append(\"S-\").append(productImage.getProductImage()).toString());\n-       * \n+       *\n        * uploadImage.uploadProductImage(configuration, productImage, smallContentImage);\n        */\n \n@@ -179,8 +179,12 @@ public void addProductImage(ProductImage productImage, ImageContentFile contentI\n \n         // resize large\n         // ByteArrayOutputStream output = new ByteArrayOutputStream();\n-        BufferedImage largeResizedImage =\n-            ProductImageSizeUtils.resizeWithRatio(bufferedImage, largeImageWidth, largeImageHeight);\n+        BufferedImage largeResizedImage;\n+        if(bufferedImage.getWidth() > largeImageWidth ||bufferedImage.getHeight() > largeImageHeight) {\n+            largeResizedImage = ProductImageSizeUtils.resizeWithRatio(bufferedImage, largeImageWidth, largeImageHeight);\n+        } else {\n+            largeResizedImage = bufferedImage;\n+        }\n \n \n         File tempLarge =\n@@ -294,12 +298,12 @@ public void removeProductImage(ProductImage productImage) throws ServiceExceptio\n     /*\n      * ProductImage large = new ProductImage(); large.setProduct(productImage.getProduct());\n      * large.setProductImage(\"L\" + productImage.getProductImage());\n-     * \n+     *\n      * this.removeImage.removeProductImage(large);\n-     * \n+     *\n      * ProductImage small = new ProductImage(); small.setProduct(productImage.getProduct());\n      * small.setProductImage(\"S\" + productImage.getProductImage());\n-     * \n+     *\n      * this.removeImage.removeProductImage(small);\n      */\n "
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/repositories/catalog/product/attribute/ProductAttributeRepository.java",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -24,6 +24,9 @@ public interface ProductAttributeRepository extends JpaRepository<ProductAttribu\n \t@Query(\"select distinct p from ProductAttribute p join fetch p.product pr left join fetch p.productOption po left join fetch p.productOptionValue pov left join fetch po.descriptions pod left join fetch pov.descriptions povd left join fetch po.merchantStore pom where pom.id = ?1 and pr.id = ?2 and povd.language.id = ?3\")\n \tList<ProductAttribute> findByProductId(Integer storeId, Long productId, Integer languageId);\n \t\n+\t@Query(\"select distinct p from ProductAttribute p join fetch p.product pr left join fetch p.productOption po left join fetch p.productOptionValue pov left join fetch po.descriptions pod left join fetch pov.descriptions povd left join fetch po.merchantStore pom where pom.id = ?1\")\n+\tList<ProductAttribute> findByProductId(Integer storeId, Long productId);\n+\t\n \t@Query(value=\"select distinct p from ProductAttribute p join fetch p.product pr left join fetch pr.categories prc left join fetch p.productOption po left join fetch p.productOptionValue pov left join fetch po.descriptions pod left join fetch pov.descriptions povd left join fetch po.merchantStore pom where pom.id = ?1 and prc.id IN (select c.id from Category c where c.lineage like ?2% and povd.language.id = ?3)\")\n \tList<ProductAttribute> findOptionsByCategoryLineage(Integer storeId, String lineage, Integer languageId);\n }"
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/repositories/catalog/product/attribute/ProductOptionSetRepository.java",
          "status": "modified",
          "additions": 6,
          "deletions": 1,
          "patch": "@@ -15,7 +15,12 @@ public interface ProductOptionSetRepository extends JpaRepository<ProductOptionS\n \t@Query(\"select distinct p from ProductOptionSet p join fetch p.store pm left join fetch p.option po left join fetch po.descriptions pod left join fetch p.values pv left join fetch pv.descriptions pvd where pm.id = ?1 and pod.language.id = ?2\")\n \tList<ProductOptionSet> findByStore(Integer storeId, Integer language);\n \t\n-\t@Query(\"select distinct p from ProductOptionSet p join fetch p.store pm left join fetch p.productTypes pt left join fetch p.option po left join fetch po.descriptions pod left join fetch p.values pv left join fetch pv.descriptions pvd where pt.id= ?1 and pm.id = ?2 and pod.language.id = ?3\")\n+\t@Query(\"select distinct p from ProductOptionSet p \"\n+\t\t\t+ \"join fetch p.store pm left join fetch p.productTypes pt \"\n+\t\t\t+ \"left join fetch p.option po \"\n+\t\t\t+ \"left join fetch po.descriptions pod \"\n+\t\t\t+ \"left join fetch p.values pv \"\n+\t\t\t+ \"left join fetch pv.descriptions pvd where pt.id= ?1 and pm.id = ?2 and pod.language.id = ?3\")\n \tList<ProductOptionSet> findByProductType(Long typeId, Integer storeId, Integer language);\n \t\n \t@Query(\"select p from ProductOptionSet p join fetch p.store pm left join fetch p.option po left join fetch po.descriptions pod left join fetch p.values pv left join fetch pv.descriptions pvd where pm.id = ?1 and p.code = ?2\")"
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/services/catalog/product/ProductServiceImpl.java",
          "status": "modified",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -128,10 +128,6 @@ public List<Product> getProductsByIds(List<Long> productIds) throws ServiceExcep\n \t\treturn productRepository.getProductsListByIds(idSet);\n \t}\n \n-\tpublic Product getById(Long productId) {\n-\t\treturn productRepository.getById(productId);\n-\t}\n-\n \t@Override\n \tpublic Product getProductWithOnlyMerchantStoreById(Long productId) {\n \t\treturn productRepository.getProductWithOnlyMerchantStoreById(productId);"
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/services/catalog/product/attribute/ProductAttributeService.java",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -23,6 +23,9 @@ List<ProductAttribute> getByOptionValueId(MerchantStore store,\n \n \tList<ProductAttribute> getByProductId(MerchantStore store, Product product, Language language)\n \t\t\tthrows ServiceException;\n+\t\n+\tList<ProductAttribute> getByProductId(MerchantStore store, Product product)\n+\t\t\tthrows ServiceException;\n \n \tList<ProductAttribute> getByAttributeIds(MerchantStore store, Product product, List<Long> ids)\n \t\t\tthrows ServiceException;"
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/services/catalog/product/attribute/ProductAttributeServiceImpl.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -91,4 +91,9 @@ public List<ProductAttribute> getProductAttributesByCategoryLineage(MerchantStor\n \t  return productAttributeRepository.findOptionsByCategoryLineage(store.getId(), lineage, language.getId());\n   }\n \n+@Override\n+public List<ProductAttribute> getByProductId(MerchantStore store, Product product) throws ServiceException {\n+\treturn productAttributeRepository.findByProductId(store.getId(), product.getId());\n+}\n+\n }"
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/services/catalog/product/image/ProductImageServiceImpl.java",
          "status": "modified",
          "additions": 51,
          "deletions": 54,
          "patch": "@@ -27,75 +27,72 @@\n import com.salesmanager.core.model.merchant.MerchantStore;\n \n @Service(\"productImage\")\n-public class ProductImageServiceImpl extends SalesManagerEntityServiceImpl<Long, ProductImage> \n+public class ProductImageServiceImpl extends SalesManagerEntityServiceImpl<Long, ProductImage>\n \timplements ProductImageService {\n-\t\n+\n \tprivate ProductImageRepository productImageRepository;\n \n \t@Inject\n \tpublic ProductImageServiceImpl(ProductImageRepository productImageRepository) {\n \t\tsuper(productImageRepository);\n \t\tthis.productImageRepository = productImageRepository;\n \t}\n-\t\n+\n \t@Inject\n \tprivate ProductFileManager productFileManager;\n-\t\n \n-\t\n-\t\n+\n+\n+\n \tpublic ProductImage getById(Long id) {\n-\t\t\n+\n \t\treturn productImageRepository.findOne(id);\n \t}\n-\t\n-\t\n+\n+\n \t@Override\n \tpublic void addProductImages(Product product, List<ProductImage> productImages) throws ServiceException {\n-\t\t\n+\n \t\ttry {\n \t\t\tfor(ProductImage productImage : productImages) {\n-\t\t\t\t\n+\n \t\t\t\tAssert.notNull(productImage.getImage());\n-\t\t\t\t\n+\n \t\t        InputStream inputStream = productImage.getImage();\n \t\t        ImageContentFile cmsContentImage = new ImageContentFile();\n \t\t        cmsContentImage.setFileName( productImage.getProductImage() );\n \t\t        cmsContentImage.setFile( inputStream );\n \t\t        cmsContentImage.setFileContentType(FileContentType.PRODUCT);\n-\t\t        \n \n-\t\t        \n-\t\n-\t\t\t\taddProductImage(product,productImage,cmsContentImage);\t\t\t\n+\n+\n+\n+\t\t\t\taddProductImage(product,productImage,cmsContentImage);\n \t\t\t}\n-\t\t\n+\n \t\t} catch (Exception e) {\n \t\t\tthrow new ServiceException(e);\n \t\t}\n \n \t}\n-\t\n-\t\n+\n+\n \t@Override\n \tpublic void addProductImage(Product product, ProductImage productImage, ImageContentFile inputImage) throws ServiceException {\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n+\n \t\tproductImage.setProduct(product);\n \n \t\ttry {\n-\t\t\t\n-\t\t\tAssert.notNull(inputImage.getFile(),\"ImageContentFile.file cannot be null\");\n+\t\t\tif (productImage.getImageType() == 0 ) {\n+\t\t\t\tAssert.notNull(inputImage.getFile(), \"ImageContentFile.file cannot be null\");\n+\t\t\t\tproductFileManager.addProductImage(productImage, inputImage);\n+\t\t\t}\n \n-\t\t\tproductFileManager.addProductImage(productImage, inputImage);\n-\t\n \t\t\t//insert ProductImage\n \t\t\tthis.saveOrUpdate(productImage);\n-\t\t\t\n \n-\t\t\n+\n+\n \t\t} catch (Exception e) {\n \t\t\tthrow new ServiceException(e);\n \t\t} finally {\n@@ -106,71 +103,71 @@ public void addProductImage(Product product, ProductImage productImage, ImageCon\n \t\t\t\t}\n \n \t\t\t} catch(Exception ignore) {\n-\t\t\t\t\n+\n \t\t\t}\n \t\t}\n-\t\t\n-\t\t\n+\n+\n \t}\n-\t\n+\n \t@Override\n \tpublic void saveOrUpdate(ProductImage productImage) throws ServiceException {\n-\t\t\n-\t\t\t\t\n+\n+\n \t\tsuper.save(productImage);\n-\t\t\n+\n \t}\n-\t\n+\n \tpublic void addProductImageDescription(ProductImage productImage, ProductImageDescription description)\n \tthrows ServiceException {\n \n-\t\t\n+\n \t\t\tif(productImage.getDescriptions()==null) {\n \t\t\t\tproductImage.setDescriptions(new ArrayList<ProductImageDescription>());\n \t\t\t}\n-\t\t\t\n+\n \t\t\tproductImage.getDescriptions().add(description);\n \t\t\tdescription.setProductImage(productImage);\n \t\t\tupdate(productImage);\n \n \n \t}\n-\t\n+\n \t//TODO get default product image\n \n-\t\n+\n \t@Override\n \tpublic OutputContentFile getProductImage(ProductImage productImage, ProductImageSize size) throws ServiceException {\n \n-\t\t\n+\n \t\tProductImage pi = new ProductImage();\n \t\tString imageName = productImage.getProductImage();\n \t\tif(size == ProductImageSize.LARGE) {\n \t\t\timageName = \"L-\" + imageName;\n \t\t}\n-\t\t\n+\n \t\tif(size == ProductImageSize.SMALL) {\n \t\t\timageName = \"S-\" + imageName;\n \t\t}\n-\t\t\n+\n \t\tpi.setProductImage(imageName);\n \t\tpi.setProduct(productImage.getProduct());\n \n \t\treturn productFileManager.getProductImage(pi);\n-\t\t\n+\n \t}\n-\t\n+\n \t@Override\n \tpublic OutputContentFile getProductImage(final String storeCode, final String productCode, final String fileName, final ProductImageSize size) throws ServiceException {\n \t\treturn productFileManager.getProductImage(storeCode, productCode, fileName, size);\n-\t\t\n+\n \t}\n-\t\n+\n \t@Override\n \tpublic List<OutputContentFile> getProductImages(Product product) throws ServiceException {\n \t\treturn productFileManager.getImages(product);\n \t}\n-\t\n+\n \t@Override\n \tpublic void removeProductImage(ProductImage productImage) throws ServiceException {\n \n@@ -179,21 +176,21 @@ public void removeProductImage(ProductImage productImage) throws ServiceExceptio\n \t\t}\n \t\tProductImage p = this.getById(productImage.getId());\n \t\tthis.delete(p);\n-\t\t\n+\n \t}\n \n \n \t@Override\n \tpublic Optional<ProductImage> getProductImage(Long imageId, Long productId, MerchantStore store) {\n-\t\t\n-\t\t\n+\n+\n \t\tOptional<ProductImage> image = Optional.empty();\n-\t\t\n+\n \t\tProductImage img = productImageRepository.finById(imageId, productId, store.getCode());\n \t\tif(img!=null) {\n \t\t\timage = Optional.of(img);\n \t\t}\n-\t\t\n+\n \t\treturn image;\n \t}\n }"
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/services/common/generic/SalesManagerEntityService.java",
          "status": "modified",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -21,6 +21,11 @@ public interface SalesManagerEntityService<K extends Serializable & Comparable<K\n \t */\n \tvoid save(E entity) throws ServiceException;\n \t\n+\t/**\n+\t * Save all\n+\t */\n+\tvoid saveAll(Iterable<E> entities) throws ServiceException;\n+\t\n \t/**\n \t * Met \u00e0 jour l'entit\u00e9 dans la base de donn\u00e9es.\n \t * "
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/services/common/generic/SalesManagerEntityServiceImpl.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -44,6 +44,10 @@ public void save(E entity) throws ServiceException {\n \t\trepository.saveAndFlush(entity);\n \t}\n \t\n+\tpublic void saveAll(Iterable<E> entities) throws ServiceException {\n+\t\trepository.saveAll(entities);\n+\t}\n+\t\n \t\n \tpublic void create(E entity) throws ServiceException {\n \t\tsave(entity);"
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/services/merchant/MerchantStoreServiceImpl.java",
          "status": "modified",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -42,13 +42,16 @@ public MerchantStoreServiceImpl(MerchantRepository merchantRepository) {\n \t}\n \n \t@Override\n-\t@CacheEvict(value=\"store\", key=\"#store.code\")\n+\t//@CacheEvict(value=\"store\", key=\"#store.code\")\n \tpublic void saveOrUpdate(MerchantStore store) throws ServiceException {\n \t\tsuper.save(store);\n \t}\n \n \t@Override\n-\t@Cacheable(value = \"store\")\n+\t/**\n+\t * cache moved in facades\n+\t */\n+\t//@Cacheable(value = \"store\")\n \tpublic MerchantStore getByCode(String code) throws ServiceException {\n \t\treturn merchantRepository.findByCode(code);\n \t}"
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/services/order/OrderServiceImpl.java",
          "status": "modified",
          "additions": 59,
          "deletions": 59,
          "patch": "@@ -76,25 +76,25 @@ public class OrderServiceImpl  extends SalesManagerEntityServiceImpl<Long, Order\n \n     @Inject\n     private ShippingService shippingService;\n-    \n+\n     @Inject\n     private PaymentService paymentService;\n-    \n+\n     @Inject\n     private ProductService productService;\n \n     @Inject\n     private TaxService taxService;\n-    \n+\n     @Inject\n     private CustomerService customerService;\n-    \n+\n     @Inject\n     private ShoppingCartService shoppingCartService;\n-    \n+\n     @Inject\n     private TransactionService transactionService;\n-    \n+\n     @Inject\n     private OrderTotalService orderTotalService;\n \n@@ -112,29 +112,29 @@ public void addOrderStatusHistory(Order order, OrderStatusHistory history) throw\n         history.setOrder(order);\n         update(order);\n     }\n-    \n+\n     @Override\n     public Order processOrder(Order order, Customer customer, List<ShoppingCartItem> items, OrderTotalSummary summary, Payment payment, MerchantStore store) throws ServiceException {\n-    \t\n+\n     \treturn process(order, customer, items, summary, payment, null, store);\n     }\n-    \n+\n     @Override\n     public Order processOrder(Order order, Customer customer, List<ShoppingCartItem> items, OrderTotalSummary summary, Payment payment, Transaction transaction, MerchantStore store) throws ServiceException {\n-    \t\n+\n     \treturn process(order, customer, items, summary, payment, transaction, store);\n     }\n-    \n+\n \tprivate Order process(Order order, Customer customer, List<ShoppingCartItem> items, OrderTotalSummary summary, Payment payment, Transaction transaction, MerchantStore store) throws ServiceException {\n-    \t\n-    \t\n+\n+\n     \tValidate.notNull(order, \"Order cannot be null\");\n     \tValidate.notNull(customer, \"Customer cannot be null (even if anonymous order)\");\n     \tValidate.notEmpty(items, \"ShoppingCart items cannot be null\");\n     \tValidate.notNull(payment, \"Payment cannot be null\");\n     \tValidate.notNull(store, \"MerchantStore cannot be null\");\n     \tValidate.notNull(summary, \"Order total Summary cannot be null\");\n-    \t\n+\n     \tUserContext context = UserContext.getCurrentInstance();\n     \tif(context != null) {\n     \t\tString ipAddress = context.getIpAddress();\n@@ -143,10 +143,10 @@ private Order process(Order order, Customer customer, List<ShoppingCartItem> ite\n     \t\t}\n     \t}\n \n-    \t\n+\n     \t//first process payment\n     \tTransaction processTransaction = paymentService.processPayment(customer, store, payment, items, order);\n-    \t\n+\n     \tif(order.getOrderHistory()==null || order.getOrderHistory().size()==0 || order.getStatus()==null) {\n     \t\tOrderStatus status = order.getStatus();\n     \t\tif(status==null) {\n@@ -160,13 +160,13 @@ private Order process(Order order, Customer customer, List<ShoppingCartItem> ite\n     \t\tstatusHistory.setOrder(order);\n     \t\tstatusHistorySet.add(statusHistory);\n     \t\torder.setOrderHistory(statusHistorySet);\n-    \t\t\n+\n     \t}\n-    \t\n+\n         if(customer.getId()==null || customer.getId()==0) {\n           customerService.create(customer);\n         }\n-      \n+\n         order.setCustomerId(customer.getId());\n         this.create(order);\n \n@@ -178,7 +178,7 @@ private Order process(Order order, Customer customer, List<ShoppingCartItem> ite\n     \t\t\ttransactionService.update(transaction);\n     \t\t}\n     \t}\n-    \t\n+\n     \tif(processTransaction!=null) {\n     \t\tprocessTransaction.setOrder(order);\n     \t\tif(processTransaction.getId()==null || processTransaction.getId()==0) {\n@@ -195,8 +195,8 @@ private Order process(Order order, Customer customer, List<ShoppingCartItem> ite\n         Set<OrderProduct> products = order.getOrderProducts();\n         for(OrderProduct orderProduct : products) {\n             orderProduct.getProductQuantity();\n-            Product p = productService.getByCode(orderProduct.getSku(), store.getDefaultLanguage());\n-            if(p == null) \n+            Product p = productService.getById(orderProduct.getId());\n+            if(p == null)\n                 throw new ServiceException(ServiceException.EXCEPTION_INVENTORY_MISMATCH);\n             for(ProductAvailability availability : p.getAvailabilities()) {\n                 int qty = availability.getProductQuantity();\n@@ -211,7 +211,7 @@ private Order process(Order order, Customer customer, List<ShoppingCartItem> ite\n         }\n \n \n-        \n+\n     \treturn order;\n     }\n \n@@ -273,28 +273,28 @@ private OrderTotalSummary caculateOrder(OrderSummary summary, Customer customer,\n                 }\n             }\n         }\n-        \n+\n         //only in order page, otherwise invokes too many processing\n         if(\n         \t\tOrderSummaryType.ORDERTOTAL.name().equals(summary.getOrderSummaryType().name()) ||\n         \t\tOrderSummaryType.SHOPPINGCART.name().equals(summary.getOrderSummaryType().name())\n-        \t\t\n+\n         \t\t) {\n \n \t        //Post processing order total variation modules for sub total calculation - drools, custom modules\n \t        //may affect the sub total\n \t        OrderTotalVariation orderTotalVariation = orderTotalService.findOrderTotalVariation(summary, customer, store, language);\n-\t        \n+\n \t        int currentCount = 10;\n-\t        \n+\n \t        if(CollectionUtils.isNotEmpty(orderTotalVariation.getVariations())) {\n \t        \tfor(OrderTotal variation : orderTotalVariation.getVariations()) {\n \t        \t\tvariation.setSortOrder(currentCount++);\n \t        \t\torderTotals.add(variation);\n \t        \t\tsubTotal = subTotal.subtract(variation.getValue());\n \t        \t}\n \t        }\n-        \n+\n         }\n \n \n@@ -308,7 +308,7 @@ private OrderTotalSummary caculateOrder(OrderSummary summary, Customer customer,\n         orderTotalSubTotal.setTitle(Constants.OT_SUBTOTAL_MODULE_CODE);\n         orderTotalSubTotal.setSortOrder(5);\n         orderTotalSubTotal.setValue(subTotal);\n-        \n+\n         orderTotals.add(orderTotalSubTotal);\n \n \n@@ -322,7 +322,7 @@ private OrderTotalSummary caculateOrder(OrderSummary summary, Customer customer,\n \t            shippingSubTotal.setOrderTotalCode(\"order.total.shipping\");\n \t            shippingSubTotal.setTitle(Constants.OT_SHIPPING_MODULE_CODE);\n \t            shippingSubTotal.setSortOrder(100);\n-\t\n+\n \t            orderTotals.add(shippingSubTotal);\n \n             if(!summary.getShippingSummary().isFreeShipping()) {\n@@ -433,7 +433,7 @@ private OrderTotalSummary caculateShoppingCart( ShoppingCart shoppingCart, final\n \n     \tOrderSummary orderSummary = new OrderSummary();\n     \torderSummary.setOrderSummaryType(OrderSummaryType.SHOPPINGCART);\n-    \t\n+\n     \tif(!StringUtils.isBlank(shoppingCart.getPromoCode())) {\n     \t\tDate promoDateAdded = shoppingCart.getPromoAdded();//promo valid 1 day\n     \t\tif(promoDateAdded == null) {\n@@ -451,14 +451,14 @@ private OrderTotalSummary caculateShoppingCart( ShoppingCart shoppingCart, final\n     \t\t\tshoppingCart.setPromoCode(null);\n     \t\t\tshoppingCartService.saveOrUpdate(shoppingCart);\n     \t\t}\n-    \t}    \t\n-    \t\n+    \t}\n+\n     \tList<ShoppingCartItem> itemList = new ArrayList<ShoppingCartItem>(shoppingCart.getLineItems());\n     \t//filter out unavailable\n     \titemList = itemList.stream().filter(p -> p.getProduct().isAvailable()).collect(Collectors.toList());\n     \torderSummary.setProducts(itemList);\n-    \t\n-    \t\n+\n+\n     \treturn caculateOrder(orderSummary, customer, store, language);\n \n     }\n@@ -474,7 +474,7 @@ private OrderTotalSummary caculateShoppingCart( ShoppingCart shoppingCart, final\n      * @param language\n      * @return {@link OrderTotalSummary}\n      * @throws ServiceException\n-     * \n+     *\n      */\n     @Override\n     public OrderTotalSummary calculateShoppingCartTotal(\n@@ -504,7 +504,7 @@ public OrderTotalSummary calculateShoppingCartTotal(\n      * @param language\n      * @return {@link OrderTotalSummary}\n      * @throws ServiceException\n-     * \n+     *\n      */\n     @Override\n     public OrderTotalSummary calculateShoppingCartTotal(\n@@ -581,45 +581,45 @@ public void saveOrUpdate(final Order order) throws ServiceException {\n \n \t@Override\n \tpublic boolean hasDownloadFiles(Order order) throws ServiceException {\n-\t\t\n+\n \t\tValidate.notNull(order,\"Order cannot be null\");\n \t\tValidate.notNull(order.getOrderProducts(),\"Order products cannot be null\");\n \t\tValidate.notEmpty(order.getOrderProducts(),\"Order products cannot be empty\");\n-\t\t\n+\n \t\tboolean hasDownloads = false;\n \t\tfor(OrderProduct orderProduct : order.getOrderProducts()) {\n-\t\t\t\n+\n \t\t\tif(CollectionUtils.isNotEmpty(orderProduct.getDownloads())) {\n \t\t\t\thasDownloads = true;\n \t\t\t\tbreak;\n \t\t\t}\n \t\t}\n-\t\t\n+\n \t\treturn hasDownloads;\n \t}\n \n \t@Override\n \tpublic List<Order> getCapturableOrders(MerchantStore store, Date startDate, Date endDate) throws ServiceException {\n-\t\t\n+\n \t\tList<Transaction> transactions = transactionService.listTransactions(startDate, endDate);\n-\t\t\n+\n \t\tList<Order> returnOrders = null;\n \n \t\tif(!CollectionUtils.isEmpty(transactions)) {\n-\t\t\t\n+\n \t\t\treturnOrders = new ArrayList<Order>();\n-\t\t\t\n+\n \t\t\t//order id\n \t\t\tMap<Long,Order> preAuthOrders = new HashMap<Long,Order> ();\n \t\t\t//order id\n \t\t\tMap<Long,List<Transaction>> processingTransactions = new HashMap<Long,List<Transaction>> ();\n-\t\t\t\n+\n \t\t\tfor(Transaction trx : transactions) {\n \t\t\t\tOrder order = trx.getOrder();\n \t\t\t\tif(TransactionType.AUTHORIZE.name().equals(trx.getTransactionType().name())) {\n \t\t\t\t\tpreAuthOrders.put(order.getId(), order);\n \t\t\t\t}\n-\t\t\t\t\n+\n \t\t\t\t//put transaction\n \t\t\t\tList<Transaction> listTransactions = null;\n \t\t\t\tif(processingTransactions.containsKey(order.getId())) {\n@@ -630,46 +630,46 @@ public List<Order> getCapturableOrders(MerchantStore store, Date startDate, Date\n \t\t\t\t}\n \t\t\t\tlistTransactions.add(trx);\n \t\t\t}\n-\t\t\t\n+\n \t\t\t//should have when captured\n \t\t\t/**\n \t\t\t * Order id  Transaction type\n \t\t\t * 1          AUTHORIZE\n-\t\t\t * 1          CAPTURE \n+\t\t\t * 1          CAPTURE\n \t\t\t */\n-\t\t\t\n+\n \t\t\t//should have when not captured\n \t\t\t/**\n \t\t\t * Order id  Transaction type\n \t\t\t * 2          AUTHORIZE\n \t\t\t */\n-\t\t\t\n+\n \t\t\tfor(Long orderId : processingTransactions.keySet()) {\n-\t\t\t\t\n+\n \t\t\t\tList<Transaction> trx = processingTransactions.get(orderId);\n \t\t\t\tif(CollectionUtils.isNotEmpty(trx)) {\n-\t\t\t\t\t\n+\n \t\t\t\t\tboolean capturable = true;\n \t\t\t\t\tfor(Transaction t : trx) {\n-\t\t\t\t\t\t\n+\n \t\t\t\t\t\tif(TransactionType.CAPTURE.name().equals(t.getTransactionType().name())) {\n \t\t\t\t\t\t\tcapturable = false;\n \t\t\t\t\t\t} else if(TransactionType.AUTHORIZECAPTURE.name().equals(t.getTransactionType().name())) {\n \t\t\t\t\t\t\tcapturable = false;\n \t\t\t\t\t\t} else if(TransactionType.REFUND.name().equals(t.getTransactionType().name())) {\n \t\t\t\t\t\t\tcapturable = false;\n \t\t\t\t\t\t}\n-\t\t\t\t\t\t\n+\n \t\t\t\t\t}\n-\t\t\t\t\t\n+\n \t\t\t\t\tif(capturable) {\n \t\t\t\t\t\tOrder o = preAuthOrders.get(orderId);\n \t\t\t\t\t\treturnOrders.add(o);\n \t\t\t\t\t}\n-\t\t\t\t\t\n+\n \t\t\t\t}\n-\t\t\t\t\n-\t\t\t\t\n+\n+\n \t\t\t}\n \t\t}\n "
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/utils/ProductImageSizeUtils.java",
          "status": "modified",
          "additions": 19,
          "deletions": 19,
          "patch": "@@ -12,12 +12,12 @@\n  *\n  */\n public class ProductImageSizeUtils {\n-\t\n+\n \n \tprivate ProductImageSizeUtils() {\n \n \t}\n-\t\n+\n \n \t/**\n \t * Simple resize, does not maintain aspect ratio\n@@ -26,7 +26,7 @@ private ProductImageSizeUtils() {\n \t * @param height\n \t * @return\n \t */\n-\t\n+\n \tpublic static BufferedImage resize(BufferedImage image, int width, int height) {\n \t\tint type = image.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : image\n \t\t\t\t.getType();\n@@ -43,9 +43,9 @@ public static BufferedImage resize(BufferedImage image, int width, int height) {\n \t\tg.dispose();\n \t\treturn resizedImage;\n \t}\n-\t\n+\n \t/**\n-\t * \n+\t *\n \t * @param img\n \t * @param targetWidth\n \t * @param targetHeight\n@@ -102,8 +102,8 @@ public static BufferedImage resizeWithHint(BufferedImage img,\n \n \t\treturn ret;\n \t}\n-\t\n-\t\n+\n+\n \tpublic static BufferedImage resizeWithRatio(BufferedImage image, int destinationWidth, int destinationHeight) {\n \n             int type = image.getType() == 0? BufferedImage.TYPE_INT_ARGB : image.getType();\n@@ -121,17 +121,17 @@ public static BufferedImage resizeWithRatio(BufferedImage image, int destination\n \n             //Work out the resized width/height\n             if (image.getHeight() > destinationHeight || image.getWidth() > destinationWidth) {\n-                fHeight = destinationHeight;\n-                int wid = destinationWidth;\n-                float sum = (float)image.getWidth() / (float)image.getHeight();\n-                fWidth = Math.round(fHeight * sum);\n-\n-                if (fWidth > wid) {\n-                    //rezise again for the width this time\n-                    fHeight = Math.round(wid/sum);\n-                    fWidth = wid;\n-                }\n-            }\n+\t\t\t\tif (image.getHeight() > image.getWidth()) {\n+\t\t\t\t\tfHeight = destinationHeight;\n+\t\t\t\t\tfloat sum = (float) image.getWidth() / (float) image.getHeight();\n+\t\t\t\t\tfWidth = Math.round(destinationWidth * sum);\n+\t\t\t\t} else if (image.getWidth() > image.getHeight()) {\n+\t\t\t\t\tfWidth = destinationWidth;\n+\t\t\t\t\tfloat sum = (float) image.getHeight() / (float) image.getWidth();\n+\t\t\t\t\tfHeight = Math.round(destinationHeight * sum);\n+\t\t\t\t}\n+\t\t\t\t// else sides are equal and is set to destination size at initialization of\n+\t\t\t}\n \n             BufferedImage resizedImage = new BufferedImage(fWidth, fHeight, type);\n             Graphics2D g = resizedImage.createGraphics();\n@@ -146,6 +146,6 @@ public static BufferedImage resizeWithRatio(BufferedImage image, int destination\n \n             return resizedImage;\n \t}\n-\t\n+\n \n }"
        },
        {
          "filename": "sm-core/src/main/java/com/salesmanager/core/business/utils/ProductPriceUtils.java",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": "@@ -163,6 +163,8 @@ public FinalPrice getFinalPrice(Product product) {\n \t\t\t\tfinalPrice.setOriginalPrice(op);\n \t\t\t}\n \t\t}\n+\t\t\n+\t\tfinalPrice.setStringPrice(this.getStringAmount(finalPrice.getFinalPrice()));\n \n \t\treturn finalPrice;\n \n@@ -199,6 +201,22 @@ public String getAdminFormatedAmount(MerchantStore store, BigDecimal amount) thr\n \t\treturn nf.format(amount);\n \t}\n \t\n+\tpublic String getStringAmount(BigDecimal amount) {\n+\t\t\n+\t\tif(amount==null) {\n+\t\t\treturn \"\";\n+\t\t}\n+\n+\t\tNumberFormat nf = NumberFormat.getInstance(Constants.DEFAULT_LOCALE);\n+\n+\t\tnf.setMaximumFractionDigits(Integer.parseInt(Character\n+\t\t\t\t\t.toString(DECIMALCOUNT)));\n+\t\tnf.setMinimumFractionDigits(Integer.parseInt(Character\n+\t\t\t\t\t.toString(DECIMALCOUNT)));\n+\n+\t\treturn nf.format(amount);\n+\t}\n+\t\n \t\n \t/**\n \t * This method has to be used to format store front amounts"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/LightPersistableProduct.java",
          "status": "modified",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -10,11 +10,12 @@\n public class LightPersistableProduct implements Serializable {\n \n   /**\n-   * \n+   *\n    */\n   private static final long serialVersionUID = 1L;\n   private String price;\n   private boolean available;\n+  private boolean productShipeable;\n   private int quantity;\n   public String getPrice() {\n     return price;\n@@ -35,5 +36,7 @@ public boolean isAvailable() {\n   public void setAvailable(boolean available) {\n     this.available = available;\n   }\n+  public boolean isProductShipeable() { return productShipeable; }\n+  public void setProductShipeable(Boolean productShipeable) { this.productShipeable = productShipeable; }\n \n }"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/ReadableProduct.java",
          "status": "modified",
          "additions": 11,
          "deletions": 0,
          "patch": "@@ -8,6 +8,7 @@\n import com.salesmanager.shop.model.catalog.manufacturer.ReadableManufacturer;\n import com.salesmanager.shop.model.catalog.product.attribute.ReadableProductAttribute;\n import com.salesmanager.shop.model.catalog.product.attribute.ReadableProductOption;\n+import com.salesmanager.shop.model.catalog.product.attribute.ReadableProductProperty;\n import com.salesmanager.shop.model.catalog.product.type.ReadableProductType;\n \n public class ReadableProduct extends ProductEntity implements Serializable {\n@@ -26,6 +27,7 @@ public class ReadableProduct extends ProductEntity implements Serializable {\n \tprivate ReadableManufacturer manufacturer;\n \tprivate List<ReadableProductAttribute> attributes = new ArrayList<ReadableProductAttribute>();\n \tprivate List<ReadableProductOption> options = new ArrayList<ReadableProductOption>();\n+\tprivate List<ReadableProductProperty> properties = new ArrayList<ReadableProductProperty>();\n \tprivate List<ReadableCategory> categories = new ArrayList<ReadableCategory>();\n \tprivate ReadableProductType type;\n \tprivate boolean canBePurchased = false;\n@@ -145,4 +147,13 @@ public void setProductPrice(ReadableProductPrice productPrice) {\n \t\tthis.productPrice = productPrice;\n \t}\n \n+\tpublic List<ReadableProductProperty> getProperties() {\n+\t\treturn properties;\n+\t}\n+\n+\tpublic void setProperties(List<ReadableProductProperty> properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\n }"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/attribute/PersistableProductAttribute.java",
          "status": "modified",
          "additions": 12,
          "deletions": 10,
          "patch": "@@ -12,18 +12,14 @@ public class PersistableProductAttribute extends ProductAttributeEntity\n \tprivate BigDecimal productAttributePrice;\n \tprivate Long productId;\n \t\n-\tprivate ProductOption option;\n-\tprivate ProductOptionValue optionValue;\n-\tpublic void setOptionValue(ProductOptionValue optionValue) {\n-\t\tthis.optionValue = optionValue;\n-\t}\n-\tpublic ProductOptionValue getOptionValue() {\n-\t\treturn optionValue;\n-\t}\n-\tpublic void setOption(ProductOption option) {\n+\tprivate ProductPropertyOption option;\n+\tprivate PersistableProductOptionValue optionValue;\n+\n+\n+\tpublic void setOption(ProductPropertyOption option) {\n \t\tthis.option = option;\n \t}\n-\tpublic ProductOption getOption() {\n+\tpublic ProductPropertyOption getOption() {\n \t\treturn option;\n \t}\n \n@@ -49,5 +45,11 @@ public Long getProductId() {\n \tpublic void setProductId(Long productId) {\n \t\tthis.productId = productId;\n \t}\n+\tpublic PersistableProductOptionValue getOptionValue() {\n+\t\treturn optionValue;\n+\t}\n+\tpublic void setOptionValue(PersistableProductOptionValue optionValue) {\n+\t\tthis.optionValue = optionValue;\n+\t}\n \n }"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/attribute/ProductOptionEntity.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2,7 +2,7 @@\n \n import java.io.Serializable;\n \n-public class ProductOptionEntity extends ProductOption implements Serializable {\n+public class ProductOptionEntity extends ProductPropertyOption implements Serializable {\n \n \t/**\n \t * "
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/attribute/ProductPropertyOption.java",
          "status": "renamed",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@\n import com.salesmanager.shop.model.entity.Entity;\n \n \n-public class ProductOption extends Entity implements Serializable {\n+public class ProductPropertyOption extends Entity implements Serializable {\n \n   /**\n    * "
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/attribute/ReadableProductOption.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@\n \n import com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity;\n \n-public class ReadableProductOption extends ProductOption {\n+public class ReadableProductOption extends ProductPropertyOption {\n \n \t/**\n \t * "
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/attribute/ReadableProductOptionValue.java",
          "status": "modified",
          "additions": 9,
          "deletions": 9,
          "patch": "@@ -9,17 +9,9 @@ public class ReadableProductOptionValue extends ProductOptionValue {\n \t\n \tprivate String price;\n \tprivate String image;\n-\tprivate String name;\n+\tprivate String description;\n \n \n-\tpublic String getName() {\n-\t\treturn name;\n-\t}\n-\n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n-\t}\n-\n \tpublic String getPrice() {\n \t\treturn price;\n \t}\n@@ -36,4 +28,12 @@ public void setImage(String image) {\n \t\tthis.image = image;\n \t}\n \n+\tpublic String getDescription() {\n+\t\treturn description;\n+\t}\n+\n+\tpublic void setDescription(String description) {\n+\t\tthis.description = description;\n+\t}\n+\n }"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/attribute/ReadableProductProperty.java",
          "status": "added",
          "additions": 30,
          "deletions": 0,
          "patch": "@@ -0,0 +1,30 @@\n+package com.salesmanager.shop.model.catalog.product.attribute;\n+\n+public class ReadableProductProperty extends ProductPropertyOption {\n+\n+\t/**\n+\t * \n+\t */\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\t/** \n+\t * Property use option objects\n+\t */\n+\tprivate ReadableProductOption property = null;\n+\tprivate ReadableProductPropertyValue propertyValue = null;\n+\tpublic ReadableProductOption getProperty() {\n+\t\treturn property;\n+\t}\n+\tpublic void setProperty(ReadableProductOption property) {\n+\t\tthis.property = property;\n+\t}\n+\tpublic ReadableProductPropertyValue getPropertyValue() {\n+\t\treturn propertyValue;\n+\t}\n+\tpublic void setPropertyValue(ReadableProductPropertyValue propertyValue) {\n+\t\tthis.propertyValue = propertyValue;\n+\t}\n+\n+\n+\n+}"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/attribute/ReadableProductPropertyValue.java",
          "status": "added",
          "additions": 25,
          "deletions": 0,
          "patch": "@@ -0,0 +1,25 @@\n+package com.salesmanager.shop.model.catalog.product.attribute;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class ReadableProductPropertyValue extends ProductOptionValue{\n+\n+\t/**\n+\t * \n+\t */\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate List<ProductOptionValueDescription> values = new ArrayList<ProductOptionValueDescription>();\n+\n+\tpublic List<ProductOptionValueDescription> getValues() {\n+\t\treturn values;\n+\t}\n+\n+\tpublic void setValues(List<ProductOptionValueDescription> values) {\n+\t\tthis.values = values;\n+\t}\n+\n+\t\n+\n+}"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/attribute/api/ReadableProductAttributeEntity.java",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -9,6 +9,7 @@ public class ReadableProductAttributeEntity extends ProductAttributeEntity {\n \t\n \tprivate String productAttributeWeight;\n \tprivate String productAttributePrice;\n+\tprivate String productAttributeUnformattedPrice;\n \t\n \tprivate ReadableProductOptionEntity option;\n \tprivate ReadableProductOptionValueEntity optionValue;\n@@ -36,6 +37,12 @@ public ReadableProductOptionValueEntity getOptionValue() {\n \tpublic void setOptionValue(ReadableProductOptionValueEntity optionValue) {\n \t\tthis.optionValue = optionValue;\n \t}\n+\tpublic String getProductAttributeUnformattedPrice() {\n+\t\treturn productAttributeUnformattedPrice;\n+\t}\n+\tpublic void setProductAttributeUnformattedPrice(String productAttributeUnformattedPrice) {\n+\t\tthis.productAttributeUnformattedPrice = productAttributeUnformattedPrice;\n+\t}\n \n \n }"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/product/definition/PersistableProductDefinition.java",
          "status": "modified",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -1,5 +1,6 @@\n package com.salesmanager.shop.model.catalog.product.product.definition;\n \n+import java.math.BigDecimal;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -19,6 +20,7 @@ public class PersistableProductDefinition extends ProductDefinition {\n \tprivate List<Category> categories = new ArrayList<Category>();\n \tprivate String type;\n \tprivate String manufacturer;\n+\tprivate BigDecimal price;\n \tpublic List<ProductDescription> getDescriptions() {\n \t\treturn descriptions;\n \t}\n@@ -49,5 +51,11 @@ public String getManufacturer() {\n \tpublic void setManufacturer(String manufacturer) {\n \t\tthis.manufacturer = manufacturer;\n \t}\n+\tpublic BigDecimal getPrice() {\n+\t\treturn price;\n+\t}\n+\tpublic void setPrice(BigDecimal price) {\n+\t\tthis.price = price;\n+\t}\n \n }"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/product/definition/ProductDefinition.java",
          "status": "modified",
          "additions": 49,
          "deletions": 4,
          "patch": "@@ -1,5 +1,6 @@\n package com.salesmanager.shop.model.catalog.product.product.definition;\n \n+import com.salesmanager.shop.model.catalog.product.ProductSpecification;\n import com.salesmanager.shop.model.entity.Entity;\n \n /**\n@@ -14,17 +15,24 @@ public class ProductDefinition extends Entity {\n \t */\n \tprivate static final long serialVersionUID = 1L;\n \tprivate boolean visible = true;\n-\tprivate Double rating = 0D;\n-\tprivate int ratingCount;\n+\tprivate boolean shipeable = true;\n+\tprivate boolean virtual = true;\n+\tprivate boolean canBePurchased = true;\n+\t//private Double rating = 0D;\n+\t//private int ratingCount;\n \tprivate String dateAvailable;\n \tprivate String identifier;\n+\tprivate ProductSpecification productSpecifications;\n+\tprivate int sortOrder;\n+\tprivate int quantity;\n+\t\n \tpublic boolean isVisible() {\n \t\treturn visible;\n \t}\n \tpublic void setVisible(boolean visible) {\n \t\tthis.visible = visible;\n \t}\n-\tpublic Double getRating() {\n+/*\tpublic Double getRating() {\n \t\treturn rating;\n \t}\n \tpublic void setRating(Double rating) {\n@@ -35,7 +43,7 @@ public int getRatingCount() {\n \t}\n \tpublic void setRatingCount(int ratingCount) {\n \t\tthis.ratingCount = ratingCount;\n-\t}\n+\t}*/\n \tpublic String getDateAvailable() {\n \t\treturn dateAvailable;\n \t}\n@@ -48,5 +56,42 @@ public String getIdentifier() {\n \tpublic void setIdentifier(String identifier) {\n \t\tthis.identifier = identifier;\n \t}\n+\tpublic ProductSpecification getProductSpecifications() {\n+\t\treturn productSpecifications;\n+\t}\n+\tpublic void setProductSpecifications(ProductSpecification productSpecifications) {\n+\t\tthis.productSpecifications = productSpecifications;\n+\t}\n+\tpublic int getSortOrder() {\n+\t\treturn sortOrder;\n+\t}\n+\tpublic void setSortOrder(int sortOrder) {\n+\t\tthis.sortOrder = sortOrder;\n+\t}\n+\tpublic boolean isShipeable() {\n+\t\treturn shipeable;\n+\t}\n+\tpublic void setShipeable(boolean shipeable) {\n+\t\tthis.shipeable = shipeable;\n+\t}\n+\tpublic boolean isVirtual() {\n+\t\treturn virtual;\n+\t}\n+\tpublic void setVirtual(boolean virtual) {\n+\t\tthis.virtual = virtual;\n+\t}\n+\tpublic int getQuantity() {\n+\t\treturn quantity;\n+\t}\n+\tpublic void setQuantity(int quantity) {\n+\t\tthis.quantity = quantity;\n+\t}\n+\tpublic boolean isCanBePurchased() {\n+\t\treturn canBePurchased;\n+\t}\n+\tpublic void setCanBePurchased(boolean canBePurchased) {\n+\t\tthis.canBePurchased = canBePurchased;\n+\t}\n+\n \n }"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/catalog/product/product/definition/ReadableProductDefinition.java",
          "status": "modified",
          "additions": 7,
          "deletions": 0,
          "patch": "@@ -22,6 +22,7 @@ public class ReadableProductDefinition extends ProductDefinition {\n \tprivate ProductDescription description = null;\n \tprivate List<PersistableProductAttribute> properties = new ArrayList<PersistableProductAttribute>();\n \tprivate List<ReadableImage> images = new ArrayList<ReadableImage>();\n+\tprivate String price;\n \t\n \t\n \tpublic ReadableProductType getType() {\n@@ -60,6 +61,12 @@ public List<ReadableImage> getImages() {\n \tpublic void setImages(List<ReadableImage> images) {\n \t\tthis.images = images;\n \t}\n+\tpublic String getPrice() {\n+\t\treturn price;\n+\t}\n+\tpublic void setPrice(String price) {\n+\t\tthis.price = price;\n+\t}\n \n \n }"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/model/entity/CodeEntity.java",
          "status": "added",
          "additions": 17,
          "deletions": 0,
          "patch": "@@ -0,0 +1,17 @@\n+package com.salesmanager.shop.model.entity;\n+\n+public class CodeEntity extends Entity {\n+\n+\t/**\n+\t * \n+\t */\n+\tprivate static final long serialVersionUID = 1L;\n+\tprivate String code;\n+\tpublic String getCode() {\n+\t\treturn code;\n+\t}\n+\tpublic void setCode(String code) {\n+\t\tthis.code = code;\n+\t}\n+\n+}"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/store/controller/product/facade/ProductOptionFacade.java",
          "status": "modified",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -1,18 +1,21 @@\n package com.salesmanager.shop.store.controller.product.facade;\n \n+import java.util.List;\n+\n import org.springframework.web.multipart.MultipartFile;\n \n import com.salesmanager.core.model.merchant.MerchantStore;\n import com.salesmanager.core.model.reference.language.Language;\n import com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute;\n+import com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue;\n import com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionEntity;\n-import com.salesmanager.shop.model.catalog.product.attribute.api.PersistableProductOptionValueEntity;\n import com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeEntity;\n import com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductAttributeList;\n import com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionEntity;\n import com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionList;\n import com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueEntity;\n import com.salesmanager.shop.model.catalog.product.attribute.api.ReadableProductOptionValueList;\n+import com.salesmanager.shop.model.entity.CodeEntity;\n \n \n /*\n@@ -26,8 +29,11 @@ public interface ProductOptionFacade {\n \n   ReadableProductOptionEntity saveOption(PersistableProductOptionEntity option, MerchantStore store, Language language);\n   \n-  ReadableProductOptionValueEntity saveOptionValue(PersistableProductOptionValueEntity optionValue, MerchantStore store, Language language);\n+  ReadableProductOptionValueEntity saveOptionValue(PersistableProductOptionValue optionValue, MerchantStore store, Language language);\n \n+  List<CodeEntity> createAttributes(List<PersistableProductAttribute> attributes, Long productId, MerchantStore store);\n+  void updateAttributes(List<PersistableProductAttribute> attributes, Long productId, MerchantStore store);\n+  \n   void addOptionValueImage(MultipartFile image, Long optionValueId, MerchantStore store, Language language);\n   \n   void removeOptionValueImage(Long optionValueId, MerchantStore store, Language language);"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/store/controller/product/facade/ProductOptionSetFacade.java",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -13,6 +13,7 @@ public interface ProductOptionSetFacade {\n \tReadableProductOptionSet get(Long id, MerchantStore store, Language language);\n \tboolean exists(String code, MerchantStore store);\n \tList<ReadableProductOptionSet> list(MerchantStore store, Language language);\n+\tList<ReadableProductOptionSet> list(MerchantStore store, Language language, String type);\n \tvoid create(PersistableProductOptionSet optionSet, MerchantStore store, Language language);\n \tvoid update(Long id, PersistableProductOptionSet optionSet, MerchantStore store, Language language);\n \tvoid delete(Long id, MerchantStore store);"
        },
        {
          "filename": "sm-shop-model/src/main/java/com/salesmanager/shop/store/controller/product/facade/ProductTypeFacade.java",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -12,6 +12,8 @@ public interface ProductTypeFacade {\n   \n   ReadableProductType get(MerchantStore store, Long id, Language language);\n   \n+  ReadableProductType get(MerchantStore store, String code, Language language);\n+  \n   Long save(PersistableProductType type, MerchantStore store, Language language);\n   \n   void update(PersistableProductType type, Long id, MerchantStore store, Language language);"
        },
        {
          "filename": "sm-shop/SALESMANAGER.h2.db",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/SALESMANAGER.trace.db",
          "status": "removed",
          "additions": 0,
          "deletions": 193,
          "patch": "@@ -1,193 +0,0 @@\n-2020-03-13 11:47:54 jdbc[3]: exception\n-org.h2.jdbc.JdbcSQLException: Schema \"SALESMANAHER\" not found; SQL statement:\n-select * from SALESMANAHER.CETAGORIES [90079-191]\n-\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:345)\n-\tat org.h2.message.DbException.get(DbException.java:179)\n-\tat org.h2.message.DbException.get(DbException.java:155)\n-\tat org.h2.command.Parser.getSchema(Parser.java:666)\n-\tat org.h2.command.Parser.getSchema(Parser.java:673)\n-\tat org.h2.command.Parser.readTableFilter(Parser.java:1203)\n-\tat org.h2.command.Parser.parseSelectSimpleFromPart(Parser.java:1884)\n-\tat org.h2.command.Parser.parseSelectSimple(Parser.java:2032)\n-\tat org.h2.command.Parser.parseSelectSub(Parser.java:1878)\n-\tat org.h2.command.Parser.parseSelectUnion(Parser.java:1699)\n-\tat org.h2.command.Parser.parseSelect(Parser.java:1687)\n-\tat org.h2.command.Parser.parsePrepared(Parser.java:443)\n-\tat org.h2.command.Parser.parse(Parser.java:315)\n-\tat org.h2.command.Parser.parse(Parser.java:287)\n-\tat org.h2.command.Parser.prepareCommand(Parser.java:252)\n-\tat org.h2.engine.Session.prepareLocal(Session.java:560)\n-\tat org.h2.engine.Session.prepareCommand(Session.java:501)\n-\tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1188)\n-\tat org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:170)\n-\tat org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:158)\n-\tat net.sourceforge.squirrel_sql.client.session.StatementWrapper.execute(StatementWrapper.java:165)\n-\tat net.sourceforge.squirrel_sql.client.session.SQLExecuterTask.processQuery(SQLExecuterTask.java:369)\n-\tat net.sourceforge.squirrel_sql.client.session.SQLExecuterTask.run(SQLExecuterTask.java:212)\n-\tat net.sourceforge.squirrel_sql.fw.util.TaskExecuter.run(TaskExecuter.java:82)\n-\tat java.lang.Thread.run(Thread.java:745)\n-2020-03-13 11:48:06 jdbc[3]: exception\n-org.h2.jdbc.JdbcSQLException: Table \"CETAGORIES\" not found; SQL statement:\n-select * from SALESMANAGER.CETAGORIES [42102-191]\n-2020-03-13 11:48:15 jdbc[3]: exception\n-org.h2.jdbc.JdbcSQLException: Table \"CETEGORIES\" not found; SQL statement:\n-select * from SALESMANAGER.CETEGORIES [42102-191]\n-2020-03-13 11:48:24 jdbc[3]: exception\n-org.h2.jdbc.JdbcSQLException: Table \"CATEGORIES\" not found; SQL statement:\n-select * from SALESMANAGER.CATEGORIES [42102-191]\n-2020-03-13 11:48:25 jdbc[3]: exception\n-org.h2.jdbc.JdbcSQLException: Table \"CATEGORIES\" not found; SQL statement:\n-select * from SALESMANAGER.CATEGORIES [42102-191]\n-2020-03-13 11:49:49 jdbc[3]: exception\n-org.h2.jdbc.JdbcSQLException: Column \"/1\" not found; SQL statement:\n-update SALESMANAGER.CATEGORY set LINEAGE = \"/1\" where CATEGORY_ID = 1 [42122-191]\n-\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:345)\n-\tat org.h2.message.DbException.get(DbException.java:179)\n-\tat org.h2.message.DbException.get(DbException.java:155)\n-\tat org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:147)\n-\tat org.h2.command.dml.Update.prepare(Update.java:192)\n-\tat org.h2.command.Parser.prepareCommand(Parser.java:257)\n-\tat org.h2.engine.Session.prepareLocal(Session.java:560)\n-\tat org.h2.engine.Session.prepareCommand(Session.java:501)\n-\tat org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1188)\n-\tat org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:170)\n-\tat org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:158)\n-\tat net.sourceforge.squirrel_sql.client.session.StatementWrapper.execute(StatementWrapper.java:165)\n-\tat net.sourceforge.squirrel_sql.client.session.SQLExecuterTask.processQuery(SQLExecuterTask.java:369)\n-\tat net.sourceforge.squirrel_sql.client.session.SQLExecuterTask.run(SQLExecuterTask.java:212)\n-\tat net.sourceforge.squirrel_sql.fw.util.TaskExecuter.run(TaskExecuter.java:82)\n-\tat java.lang.Thread.run(Thread.java:745)\n-2020-10-30 11:55:15 jdbc[3]: exception\n-org.h2.jdbc.JdbcSQLFeatureNotSupportedException: Feature not supported: \"getFunctions\" [50100-200]\n-\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:507)\n-\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n-\tat org.h2.message.DbException.get(DbException.java:205)\n-\tat org.h2.message.DbException.get(DbException.java:181)\n-\tat org.h2.message.DbException.getUnsupportedException(DbException.java:269)\n-\tat org.h2.message.TraceObject.unsupported(TraceObject.java:398)\n-\tat org.h2.jdbc.JdbcDatabaseMetaData.getFunctions(JdbcDatabaseMetaData.java:3273)\n-\tat org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCDatabaseMetaDataImpl.getFunctions(JDBCDatabaseMetaDataImpl.java:229)\n-\tat org.jkiss.dbeaver.ext.generic.model.meta.GenericMetaModel.loadProcedures(GenericMetaModel.java:279)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.loadProcedures(GenericObjectContainer.java:413)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.getProcedures(GenericObjectContainer.java:287)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.getProceduresOnly(GenericObjectContainer.java:313)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.getProceduresOnly(GenericObjectContainer.java:1)\n-\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n-\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n-\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n-\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.extractPropertyValue(DBNDatabaseNode.java:824)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.access$1(DBNDatabaseNode.java:805)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode$PropertyValueReader.run(DBNDatabaseNode.java:885)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode$PropertyValueReader.run(DBNDatabaseNode.java:1)\n-\tat org.jkiss.dbeaver.model.DBUtils.tryExecuteRecover(DBUtils.java:1679)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.loadTreeItems(DBNDatabaseNode.java:498)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.loadChildren(DBNDatabaseNode.java:421)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:206)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:1)\n-\tat org.jkiss.dbeaver.ui.navigator.NavigatorUtils.getNodeChildrenFiltered(NavigatorUtils.java:593)\n-\tat org.jkiss.dbeaver.ui.controls.itemlist.ItemListControl$ItemLoadService.evaluate(ItemListControl.java:219)\n-\tat org.jkiss.dbeaver.ui.controls.itemlist.ItemListControl$ItemLoadService.evaluate(ItemListControl.java:1)\n-\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:86)\n-\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:71)\n-\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:102)\n-\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n-2020-10-30 11:55:15 jdbc[3]: exception\n-org.h2.jdbc.JdbcSQLFeatureNotSupportedException: Feature not supported: \"getFunctions\" [50100-200]\n-\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:507)\n-\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n-\tat org.h2.message.DbException.get(DbException.java:205)\n-\tat org.h2.message.DbException.get(DbException.java:181)\n-\tat org.h2.message.DbException.getUnsupportedException(DbException.java:269)\n-\tat org.h2.message.TraceObject.unsupported(TraceObject.java:398)\n-\tat org.h2.jdbc.JdbcDatabaseMetaData.getFunctions(JdbcDatabaseMetaData.java:3273)\n-\tat org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCDatabaseMetaDataImpl.getFunctions(JDBCDatabaseMetaDataImpl.java:229)\n-\tat org.jkiss.dbeaver.ext.generic.model.meta.GenericMetaModel.loadProcedures(GenericMetaModel.java:279)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.loadProcedures(GenericObjectContainer.java:413)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.getPackages(GenericObjectContainer.java:267)\n-\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n-\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n-\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n-\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.extractPropertyValue(DBNDatabaseNode.java:824)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.access$1(DBNDatabaseNode.java:805)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode$PropertyValueReader.run(DBNDatabaseNode.java:885)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode$PropertyValueReader.run(DBNDatabaseNode.java:1)\n-\tat org.jkiss.dbeaver.model.DBUtils.tryExecuteRecover(DBUtils.java:1679)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.loadTreeItems(DBNDatabaseNode.java:498)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.loadChildren(DBNDatabaseNode.java:421)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:206)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:1)\n-\tat org.jkiss.dbeaver.ui.navigator.NavigatorUtils.getNodeChildrenFiltered(NavigatorUtils.java:593)\n-\tat org.jkiss.dbeaver.ui.controls.itemlist.ItemListControl$ItemLoadService.evaluate(ItemListControl.java:219)\n-\tat org.jkiss.dbeaver.ui.controls.itemlist.ItemListControl$ItemLoadService.evaluate(ItemListControl.java:1)\n-\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:86)\n-\tat org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:71)\n-\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:102)\n-\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n-2020-10-30 12:25:27 jdbc[3]: exception\n-org.h2.jdbc.JdbcSQLFeatureNotSupportedException: Feature not supported: \"getFunctions\" [50100-200]\n-\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:507)\n-\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n-\tat org.h2.message.DbException.get(DbException.java:205)\n-\tat org.h2.message.DbException.get(DbException.java:181)\n-\tat org.h2.message.DbException.getUnsupportedException(DbException.java:269)\n-\tat org.h2.message.TraceObject.unsupported(TraceObject.java:398)\n-\tat org.h2.jdbc.JdbcDatabaseMetaData.getFunctions(JdbcDatabaseMetaData.java:3273)\n-\tat org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCDatabaseMetaDataImpl.getFunctions(JDBCDatabaseMetaDataImpl.java:229)\n-\tat org.jkiss.dbeaver.ext.generic.model.meta.GenericMetaModel.loadProcedures(GenericMetaModel.java:279)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.loadProcedures(GenericObjectContainer.java:413)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.getProcedures(GenericObjectContainer.java:287)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.getProceduresOnly(GenericObjectContainer.java:313)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.getProceduresOnly(GenericObjectContainer.java:1)\n-\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n-\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n-\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n-\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.extractPropertyValue(DBNDatabaseNode.java:824)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.access$1(DBNDatabaseNode.java:805)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode$PropertyValueReader.run(DBNDatabaseNode.java:885)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode$PropertyValueReader.run(DBNDatabaseNode.java:1)\n-\tat org.jkiss.dbeaver.model.DBUtils.tryExecuteRecover(DBUtils.java:1679)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.loadTreeItems(DBNDatabaseNode.java:498)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.loadChildren(DBNDatabaseNode.java:421)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.reloadChildren(DBNDatabaseNode.java:709)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.loadChildren(DBNDatabaseNode.java:435)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.reloadChildren(DBNDatabaseNode.java:709)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.refreshNodeContent(DBNDatabaseNode.java:367)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.refreshNode(DBNDatabaseNode.java:341)\n-\tat org.jkiss.dbeaver.ui.navigator.actions.NavigatorHandlerRefresh$1.run(NavigatorHandlerRefresh.java:154)\n-\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:102)\n-\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)\n-2020-10-30 12:25:27 jdbc[3]: exception\n-org.h2.jdbc.JdbcSQLFeatureNotSupportedException: Feature not supported: \"getFunctions\" [50100-200]\n-\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:507)\n-\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n-\tat org.h2.message.DbException.get(DbException.java:205)\n-\tat org.h2.message.DbException.get(DbException.java:181)\n-\tat org.h2.message.DbException.getUnsupportedException(DbException.java:269)\n-\tat org.h2.message.TraceObject.unsupported(TraceObject.java:398)\n-\tat org.h2.jdbc.JdbcDatabaseMetaData.getFunctions(JdbcDatabaseMetaData.java:3273)\n-\tat org.jkiss.dbeaver.model.impl.jdbc.exec.JDBCDatabaseMetaDataImpl.getFunctions(JDBCDatabaseMetaDataImpl.java:229)\n-\tat org.jkiss.dbeaver.ext.generic.model.meta.GenericMetaModel.loadProcedures(GenericMetaModel.java:279)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.loadProcedures(GenericObjectContainer.java:413)\n-\tat org.jkiss.dbeaver.ext.generic.model.GenericObjectContainer.getPackages(GenericObjectContainer.java:267)\n-\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n-\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n-\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n-\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.extractPropertyValue(DBNDatabaseNode.java:824)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.access$1(DBNDatabaseNode.java:805)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode$PropertyValueReader.run(DBNDatabaseNode.java:885)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode$PropertyValueReader.run(DBNDatabaseNode.java:1)\n-\tat org.jkiss.dbeaver.model.DBUtils.tryExecuteRecover(DBUtils.java:1679)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.loadTreeItems(DBNDatabaseNode.java:498)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.loadChildren(DBNDatabaseNode.java:421)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.reloadChildren(DBNDatabaseNode.java:709)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.loadChildren(DBNDatabaseNode.java:435)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.reloadChildren(DBNDatabaseNode.java:709)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.refreshNodeContent(DBNDatabaseNode.java:367)\n-\tat org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.refreshNode(DBNDatabaseNode.java:341)\n-\tat org.jkiss.dbeaver.ui.navigator.actions.NavigatorHandlerRefresh$1.run(NavigatorHandlerRefresh.java:154)\n-\tat org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:102)\n-\tat org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)"
        },
        {
          "filename": "sm-shop/files/store/DownlaodRepository.dat",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/pom.xml",
          "status": "modified",
          "additions": 0,
          "deletions": 11,
          "patch": "@@ -23,25 +23,21 @@\n \n \t<dependencies>\n \n-\t\t<!-- sm-core -->\n \t\t<dependency>\n \t\t\t<groupId>com.shopizer</groupId>\n \t\t\t<artifactId>sm-core</artifactId>\n \t\t</dependency>\n \n-\t\t<!-- sm-core-model -->\n \t\t<dependency>\n \t\t\t<groupId>com.shopizer</groupId>\n \t\t\t<artifactId>sm-core-model</artifactId>\n \t\t</dependency>\n \n-\t\t<!-- sm-shop-model -->\n \t\t<dependency>\n \t\t\t<groupId>com.shopizer</groupId>\n \t\t\t<artifactId>sm-shop-model</artifactId>\n \t\t</dependency>\n \n-\t\t<!-- sm-search -->\n \t\t<dependency>\n \t\t\t<groupId>com.shopizer</groupId>\n \t\t\t<artifactId>sm-search</artifactId>\n@@ -87,13 +83,6 @@\n \t\t\t<scope>provided</scope>\n \t\t</dependency>\n \n-\t\t<!--\n-\t\t<dependency>\n-\t\t\t<groupId>org.springframework.security</groupId>\n-\t\t\t<artifactId>spring-security-taglibs</artifactId>\n-\t\t</dependency>\n-\t\t-->\n-\n \t\t<!-- https://mvnrepository.com/artifact/commons-collections/commons-collections -->\n \t\t<!-- For Tiles -->\n \t\t<dependency>"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/AdminController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 77,
          "patch": "@@ -1,77 +0,0 @@\n-package com.salesmanager.shop.admin.controller;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.user.UserService;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.country.Country;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.user.User;\n-import com.salesmanager.shop.constants.Constants;\n-\n-\n-\n-@Controller\n-public class AdminController {\n-\t\n-\t@Inject\n-\tCountryService countryService;\n-\t\n-\t@Inject\n-\tUserService userService;\n-\t\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value={\"/admin/home.html\",\"/admin/\"}, method=RequestMethod.GET)\n-\tpublic String displayDashboard(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"home\", \"home\");\n-\t\t\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t\n-\t\t\n-\t\t//get store information\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tMap<String,Country> countries = countryService.getCountriesMap(language);\n-\t\t\n-\t\tCountry storeCountry = store.getCountry();\n-\t\tCountry country = countries.get(storeCountry.getIsoCode());\n-\t\t\n-\t\tString sCurrentUser = request.getRemoteUser();\n-\t\tUser currentUser = userService.getByUserName(sCurrentUser);\n-\t\t\n-\t\tmodel.addAttribute(\"store\", store);\n-\t\tmodel.addAttribute(\"country\", country);\n-\t\tmodel.addAttribute(\"user\", currentUser);\n-\t\t//get last 10 orders\n-\t\t//OrderCriteria orderCriteria = new OrderCriteria();\n-\t\t//orderCriteria.setMaxCount(10);\n-\t\t//orderCriteria.setOrderBy(CriteriaOrderBy.DESC);\n-\t\t\n-\t\treturn ControllerConstants.Tiles.adminDashboard;\n-\t}\n-\t\n-\t@RequestMapping( value=Constants.ADMIN_URI , method=RequestMethod.GET)\n-\tpublic String displayStoreLanding(HttpServletRequest request, HttpServletResponse response) {\n-\n-\t\treturn \"redirect:\" + Constants.ADMIN_URI + Constants.SLASH;\n-\t}\n-\n-\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/ControllerConstants.java",
          "status": "removed",
          "additions": 0,
          "deletions": 106,
          "patch": "@@ -1,106 +0,0 @@\n-package com.salesmanager.shop.admin.controller;\n-\n-/**\n- * Interface contain constant for Controller.These constant will be used throughout\n- * sm-shop to  providing constant values to various Controllers being used in the\n- * application.\n- * @author Umesh A\n- *\n- */\n-public interface ControllerConstants\n-{\n-\n-    interface Tiles{\n-    \t\n-    \tfinal String adminDashboard=\"admin-dashboard\";\n-        interface ContentImages{\n-            final String addContentImages=\"admin-contentImages-add\";\n-            final String contentImages=\"admin-content-images\";\n-            final String fileBrowser=\"admin-content-filebrowser\";\n- \n-        }\n-        \n-        interface ContentFiles{\n-            final String addContentFiles=\"admin-content-files-add\";\n-            final String contentFiles=\"admin-content-files\";\n-\n- \n-        }\n-        \n-        interface Content{\n-            final String contentPages=\"admin-content-pages\";\n-            final String contentPagesDetails=\"admin-content-pages-details\";\n-\n-        }\n-        \n-        interface Customer{\n-            final String optionsList=\"admin-customer-options-list\";\n-            final String optionDetails=\"admin-customer-options-details\";\n-            final String optionsValuesList=\"admin-customer-options-values-list\";\n-            final String optionsValueDetails=\"admin-customer-options-values-details\";\n-            final String optionsSet=\"admin-customer-options-set\";\n-\n-        }\n-        \n-        interface Product{\n-            final String productReviews=\"catalogue-product-reviews\";\n-            final String productPrices=\"admin-products-prices\";\n-            final String productPrice=\"admin-products-price\";\n-            final String relatedItems=\"admin-products-related\";\n-            final String digitalProduct=\"admin-products-digital\";\n-            final String productImages=\"admin-products-images\";\n-            final String productImagesUrl=\"admin-products-images-url\";\n-            final String productKeywords=\"admin-products-keywords\";\n-            final String customGroups=\"admin-products-groups\";\n-            final String customGroupsDetails=\"admin-products-groups-details\";\n-            final String manufacturerList=\"admin-products-manufacturer\";\n-            final String manufacturerDetails=\"admin-products-manufacturer-details\";\n-        }\n-        \n-        interface User{\n-            final String profile=\"admin-user-profile\";\n-            final String users=\"admin-users\";\n-            final String password=\"admin-user-password\";\n-        }\n-        \n-        interface Store{\n-            final String stores=\"admin-stores\";\n-        }\n-\n-\n-        interface Shipping{\n-            final String shippingMethod=\"shipping-method\";\n-            final String shippingMethods=\"shipping-methods\";\n-            final String shippingOptions=\"shipping-options\";\n-            final String shippingPackaging=\"shipping-packaging\";\n-            final String customShippingWeightBased=\"admin-shipping-custom\";\n-        }\n-        \n-        interface Payment{\n-        \tfinal String paymentMethods=\"payment-methods\";\n-        \tfinal String paymentMethod=\"payment-method\";\n-        }\n-        \n-        interface Order{\n-            final String orders=\"admin-orders\";\n-            final String ordersEdit=\"admin-orders-edit\";\n-            final String ordersTransactions=\"admin-orders-transactions\";\n-        }\n-        \n-        interface Configuration{\n-            final String accounts=\"config-accounts\";\n-            final String email=\"config-email\";\n-            final String cache=\"admin-cache\";\n-            final String system=\"config-system\";\n-        }\n-        \n-        interface Tax{\n-            final String taxClasses=\"tax-classes\";\n-            final String taxClass=\"tax-class\";\n-            final String taxConfiguration=\"tax-configuration\";\n-            final String taxRates=\"tax-rates\";\n-            final String taxRate=\"tax-rate\";\n-        }\n-        \n-    }\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/categories/CategoryController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 376,
          "patch": "@@ -1,376 +0,0 @@\n-package com.salesmanager.shop.admin.controller.categories;\n-\n-import java.util.*;\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-import com.salesmanager.core.business.services.catalog.category.CategoryService;\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.category.Category;\n-import com.salesmanager.core.model.catalog.category.CategoryDescription;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.CategoryUtils;\n-import com.salesmanager.shop.utils.LabelUtils;\n-\n-\n-\n-@Controller\n-public class CategoryController {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(CategoryController.class);\n-\n-    @Inject\n-    LanguageService languageService;\n-\n-    @Inject\n-    CategoryService categoryService;\n-\n-    @Inject\n-    CountryService countryService;\n-\n-    @Inject\n-    LabelUtils messages;\n-\n-    @PreAuthorize(\"hasRole('PRODUCTS')\")\n-    @RequestMapping(value=\"/admin/categories/editCategory.html\", method=RequestMethod.GET)\n-    public String displayCategoryEdit(@RequestParam(\"id\") long categoryId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-        return displayCategory(categoryId,model,request);\n-\n-    }\n-\n-    @PreAuthorize(\"hasRole('PRODUCTS')\")\n-    @RequestMapping(value=\"/admin/categories/createCategory.html\", method=RequestMethod.GET)\n-    public String displayCategoryCreate(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-        return displayCategory(null,model,request);\n-\n-    }\n-    private String displayCategory(Long categoryId, Model model, HttpServletRequest request) throws Exception {\n-        //display menu\n-        setMenu(model,request);\n-        MerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-        Language language = (Language)request.getAttribute(\"LANGUAGE\");\n-        //get parent categories\n-        List<Category> categories = categoryService.listByStore(store,language);\n-        List<Language> languages = store.getLanguages();\n-        Optional<Category> category;\n-        if(categoryId!=null && categoryId!=0) {//edit mode\n-            category =  Optional.ofNullable(categoryService.getById(categoryId, store.getId()));\n-            if(!category.isPresent() || category.get().getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-                return \"catalogue-categories\";\n-            }\n-        } else {\n-            category = Optional.of(new Category());\n-            category.get().setVisible(true);\n-        }\n-        com.salesmanager.shop.admin.model.catalog.Category adminCategory = new com.salesmanager.shop.admin.model.catalog.Category();\n-        List<CategoryDescription> descriptions = new LinkedList<>();\n-        List<com.salesmanager.shop.admin.model.catalog.Category> readableCategories = CategoryUtils.readableCategoryListConverter(categories, language);\n-\n-        for(Language l : languages) {\n-            CategoryDescription description = null;\n-            for(CategoryDescription desc : category.get().getDescriptions()) {\n-                if(desc.getLanguage().getCode().equals(l.getCode())) {\n-                    description = desc;\n-                }\n-            }\n-            if(description==null) {\n-                description = new CategoryDescription();\n-                description.setLanguage(l);\n-            }\n-            descriptions.add(description);\n-        }\n-\n-        adminCategory.setDescriptions(descriptions);\n-        adminCategory.setCategory(category.get());\n-\n-        model.addAttribute(\"category\", adminCategory);\n-        model.addAttribute(\"categories\", readableCategories);\n-\n-        return \"catalogue-categories-category\";\n-    }\n-\n-\n-    @PreAuthorize(\"hasRole('PRODUCTS')\")\n-    @RequestMapping(value=\"/admin/categories/save.html\", method=RequestMethod.POST)\n-    public String saveCategory(@Valid @ModelAttribute(\"category\") com.salesmanager.shop.admin.model.catalog.Category category, BindingResult result, Model model, HttpServletRequest request) throws Exception {\n-\n-        model.addAttribute(\"category\",category);\n-        Language language = (Language)request.getAttribute(\"LANGUAGE\");\n-        //display menu\n-        setMenu(model,request);\n-        MerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-        if(category.getCategory().getId() != null && category.getCategory().getId() >0) { //edit entry\n-            //get from DB\n-            Optional<Category> currentCategory = Optional.ofNullable(categoryService.getById(category.getCategory().getId(), store.getId()));\n-\n-            if(!currentCategory.isPresent() || currentCategory.get().getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-                return \"catalogue-categories\";\n-            }\n-        }\n-        Map<String,Language> langs = languageService.getLanguagesMap();\n-        List<CategoryDescription> descriptions = category.getDescriptions();\n-        if(descriptions!=null) {\n-            Set<CategoryDescription> categoryDescriptions = new HashSet<>();\n-            for(CategoryDescription description : descriptions) {\n-\n-                String code = description.getLanguage().getCode();\n-                Language l = langs.get(code);\n-                description.setLanguage(l);\n-                description.setCategory(category.getCategory());\n-                categoryDescriptions.add(description);\n-\n-            }\n-            category.getCategory().setDescriptions(categoryDescriptions);\n-        }\n-        //save to DB\n-        category.getCategory().setMerchantStore(store);\n-        //}\n-        if (result.hasErrors()) {\n-            return \"catalogue-categories-category\";\n-        }\n-        //check parent\n-        if(category.getCategory().getParent()!=null) {\n-            if(category.getCategory().getParent().getId()==-1) {//this is a root category\n-                category.getCategory().setParent(null);\n-                category.getCategory().setLineage(\"/\" + category.getCategory().getId() + \"/\");\n-                category.getCategory().setDepth(0);\n-            }\n-        }\n-        category.getCategory().getAuditSection().setModifiedBy(request.getRemoteUser());\n-        categoryService.saveOrUpdate(category.getCategory());\n-        //ajust lineage and depth\n-        if(category.getCategory().getParent()!=null && category.getCategory().getParent().getId()!=-1) {\n-            Category parent = new Category();\n-            parent.setId(category.getCategory().getParent().getId());\n-            parent.setMerchantStore(store);\n-            categoryService.addChild(parent, category.getCategory());\n-        }\n-        //get parent categories\n-        List<Category> categories = categoryService.listByStore(store,language);\n-        List<com.salesmanager.shop.admin.model.catalog.Category> readableCategories = CategoryUtils.readableCategoryListConverter(categories, language);\n-\n-        model.addAttribute(\"categories\", readableCategories);\n-        model.addAttribute(\"success\",\"success\");\n-        return \"catalogue-categories-category\";\n-    }\n-\n-\n-    //category list\n-    @PreAuthorize(\"hasRole('PRODUCTS')\")\n-    @RequestMapping(value=\"/admin/categories/categories.html\", method=RequestMethod.GET)\n-    public String displayCategories(Model model, HttpServletRequest request) throws Exception {\n-        setMenu(model,request);\n-        //does nothing, ajax subsequent request\n-        return \"catalogue-categories\";\n-    }\n-\n-    @SuppressWarnings({ \"unchecked\"})\n-    @PreAuthorize(\"hasRole('PRODUCTS')\")\n-    @RequestMapping(value=\"/admin/categories/paging.html\", method=RequestMethod.POST)\n-    public @ResponseBody ResponseEntity<String> pageCategories(HttpServletRequest request) {\n-        String categoryName = request.getParameter(\"name\");\n-        String categoryCode = request.getParameter(\"code\");\n-        AjaxResponse resp = new AjaxResponse();\n-        try {\n-            Language language = (Language)request.getAttribute(\"LANGUAGE\");\n-            MerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-            List<Category> categories = null;\n-            if(!StringUtils.isBlank(categoryName)) {\n-                categories = categoryService.getByName(store, categoryName, language);\n-            } else if(!StringUtils.isBlank(categoryCode)) {\n-                categoryService.listByCodes(store, new ArrayList<>(Collections.singletonList(categoryCode)), language);\n-            } else {\n-                categories = categoryService.listByStore(store, language);\n-            }\n-            for(Category category : categories) {\n-                @SuppressWarnings(\"rawtypes\")\n-                Map entry = new HashMap();\n-                entry.put(\"categoryId\", category.getId());\n-                CategoryDescription description = category.getDescriptions().iterator().next();\n-\n-                entry.put(\"name\", description.getName());\n-                entry.put(\"code\", category.getCode());\n-                entry.put(\"visible\", category.isVisible());\n-                resp.addDataEntry(entry);\n-            }\n-            resp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Error while paging categories\", e);\n-            resp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-        }\n-        String returnString = resp.toJSONString();\n-        final HttpHeaders httpHeaders= new HttpHeaders();\n-        httpHeaders.setContentType(MediaType.APPLICATION_JSON);\n-\n-        return new ResponseEntity<>(returnString, httpHeaders, HttpStatus.OK);\n-    }\n-\n-    @PreAuthorize(\"hasRole('PRODUCTS')\")\n-    @RequestMapping(value=\"/admin/categories/hierarchy.html\", method=RequestMethod.GET)\n-    public String displayCategoryHierarchy(Model model, HttpServletRequest request) throws Exception {\n-        setMenu(model,request);\n-        //get the list of categories\n-        Language language = (Language)request.getAttribute(\"LANGUAGE\");\n-        MerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-        List<Category> categories = categoryService.listByStore(store, language);\n-        List<com.salesmanager.shop.admin.model.catalog.Category> readableCategories = CategoryUtils.readableCategoryListConverter(categories, language);\n-\n-        model.addAttribute(\"categories\", readableCategories);\n-\n-        return \"catalogue-categories-hierarchy\";\n-    }\n-\n-    @PreAuthorize(\"hasRole('PRODUCTS')\")\n-    @RequestMapping(value=\"/admin/categories/remove.html\", method=RequestMethod.POST)\n-    public @ResponseBody ResponseEntity<String> deleteCategory(HttpServletRequest request, Locale locale) {\n-        String sid = request.getParameter(\"categoryId\");\n-        MerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-        AjaxResponse resp = new AjaxResponse();\n-        try {\n-            Long id = Long.parseLong(sid);\n-            Optional<Category> category = Optional.ofNullable(categoryService.getById(id, store.getId()));\n-            if(category.isPresent() || category.get().getMerchantStore().getId().intValue() !=store.getId().intValue() ) {\n-                resp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-                resp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-            } else {\n-                categoryService.delete(category.get());\n-                resp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-            }\n-        } catch (Exception e) {\n-            LOGGER.error(\"Error while deleting category\", e);\n-            resp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-            resp.setErrorMessage(e);\n-        }\n-        String returnString = resp.toJSONString();\n-        final HttpHeaders httpHeaders= new HttpHeaders();\n-        httpHeaders.setContentType(MediaType.APPLICATION_JSON);\n-        return new ResponseEntity<>(returnString, httpHeaders, HttpStatus.OK);\n-    }\n-\n-    @PreAuthorize(\"hasRole('PRODUCTS')\")\n-    @RequestMapping(value=\"/admin/categories/moveCategory.html\", method=RequestMethod.POST)\n-    public @ResponseBody ResponseEntity<String> moveCategory(HttpServletRequest request, Locale locale) {\n-        String parentid = request.getParameter(\"parentId\");\n-        String childid = request.getParameter(\"childId\");\n-        MerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-        AjaxResponse resp = new AjaxResponse();\n-        final HttpHeaders httpHeaders= new HttpHeaders();\n-        httpHeaders.setContentType(MediaType.APPLICATION_JSON);\n-        try {\n-            Long parentId = Long.parseLong(parentid);\n-            Long childId = Long.parseLong(childid);\n-            Optional<Category> child = Optional.ofNullable(categoryService.getById(childId, store.getId()));\n-            Optional<Category> parent = Optional.ofNullable(categoryService.getById(parentId, store.getId()));\n-            if(child.isPresent()&& child.get().getParent().getId().equals(parentId)) {\n-                resp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-                //String returnString = resp.toJSONString();\n-            }\n-            if(parentId!=1) {\n-                if(isValid(store, child, parent)) {\n-                    return getResponseAjax(locale, resp, httpHeaders);\n-                }\n-            }\n-            parent.get().getAuditSection().setModifiedBy(request.getRemoteUser());\n-            categoryService.addChild(parent.get(), child.get());\n-            resp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-        } catch (Exception e) {\n-            LOGGER.error(\"Error while moving category\", e);\n-            resp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-            resp.setErrorMessage(e);\n-        }\n-\n-        String returnString = resp.toJSONString();\n-        return new ResponseEntity<>(returnString, httpHeaders, HttpStatus.OK);\n-    }\n-\n-    private boolean isValid(MerchantStore store, Optional<Category> child, Optional<Category> parent) {\n-        return !child.isPresent()|| !parent.isPresent()|| !child.get().getMerchantStore().getId().equals(store.getId()) || !parent.get().getMerchantStore().getId().equals(store.getId());\n-    }\n-\n-    private ResponseEntity<String> getResponseAjax(Locale locale, AjaxResponse resp, HttpHeaders httpHeaders) {\n-        resp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-        return getResponseAjax(resp, httpHeaders, AjaxResponse.RESPONSE_STATUS_FAIURE);\n-    }\n-\n-    @PreAuthorize(\"hasRole('PRODUCTS')\")\n-    @RequestMapping(value=\"/admin/categories/checkCategoryCode.html\", method=RequestMethod.POST)\n-    public @ResponseBody ResponseEntity<String> checkCategoryCode(HttpServletRequest request) {\n-        String code = request.getParameter(\"code\");\n-        String id = request.getParameter(\"id\");\n-        MerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-        AjaxResponse resp = new AjaxResponse();\n-        final HttpHeaders httpHeaders= new HttpHeaders();\n-        httpHeaders.setContentType(MediaType.APPLICATION_JSON);\n-        if(StringUtils.isBlank(code)) {\n-            return getResponseAjax(resp, httpHeaders, AjaxResponse.CODE_ALREADY_EXIST);\n-        }\n-        try {\n-            Optional<Category> category =Optional.ofNullable(categoryService.getByCode(store, code));\n-            if(category.isPresent() && StringUtils.isBlank(id)) {\n-                return getResponseAjax(resp, httpHeaders, AjaxResponse.CODE_ALREADY_EXIST);\n-            }\n-            if(category.isPresent() && !StringUtils.isBlank(id)) {\n-                try {\n-                    long lid = Long.parseLong(id);\n-                    if(category.get().getCode().equals(code) && category.get().getId() ==lid) {\n-                        return getResponseAjax(resp, httpHeaders, AjaxResponse.CODE_ALREADY_EXIST);\n-                    }\n-                } catch (Exception e) {\n-                    return getResponseAjax(resp, httpHeaders, AjaxResponse.CODE_ALREADY_EXIST);\n-                }\n-            }\n-            resp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-        } catch (Exception e) {\n-            LOGGER.error(\"Error while getting category\", e);\n-            resp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-            resp.setErrorMessage(e);\n-        }\n-        String returnString = resp.toJSONString();\n-        return new ResponseEntity<>(returnString, httpHeaders, HttpStatus.OK);\n-    }\n-\n-    private ResponseEntity<String> getResponseAjax(AjaxResponse resp, HttpHeaders httpHeaders, int codeAlreadyExist) {\n-        resp.setStatus(codeAlreadyExist);\n-        String returnString = resp.toJSONString();\n-        return new ResponseEntity<>(returnString, httpHeaders, HttpStatus.OK);\n-    }\n-\n-    private void setMenu(Model model, HttpServletRequest request) {\n-        //display menu\n-        Map<String,String> activeMenus = new HashMap<>();\n-        activeMenus.put(\"catalogue\", \"catalogue\");\n-        activeMenus.put(\"catalogue-categories\", \"catalogue-categories\");\n-        @SuppressWarnings(\"unchecked\")\n-        Map<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-        Menu currentMenu = menus.get(\"catalogue\");\n-        model.addAttribute(\"currentMenu\",currentMenu);\n-        model.addAttribute(\"activeMenus\",activeMenus);\n-        //\n-    }\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/configurations/CacheController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 115,
          "patch": "@@ -1,115 +0,0 @@\n-package com.salesmanager.shop.admin.controller.configurations;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import com.salesmanager.core.business.utils.CacheUtils;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-\n-\n-\n-\n-@Controller\n-public class CacheController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CacheController.class);\n-\t\n-\t@Inject\n-\tprivate CacheUtils cache;\n-\n-\n-\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/cache/cacheManagement.html\", method=RequestMethod.GET)\n-\tpublic String displayAccounts(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t//get cache keys\n-\t\tList<String> cacheKeysList = cache.getCacheKeys(store);\n-\n-\t\tmodel.addAttribute(\"keys\", cacheKeysList);\n-\n-\t\treturn ControllerConstants.Tiles.Configuration.cache;\n-\t\t\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/cache/clear.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> clearCache(HttpServletRequest request, HttpServletResponse response) {\n-\t\tString cacheKey = request.getParameter(\"cacheKey\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\ttry {\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\t\tStringBuilder key = new StringBuilder();\n-\t\t\tkey.append(store.getId()).append(\"_\").append(cacheKey);\n-\t\t\t\n-\t\t\tif(cacheKey!=null) {\n-\t\t\t\tcache.removeFromCache(key.toString());\n-\t\t\t} else {\n-\t\t\t\tcache.removeAllFromCache(store);\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while updateing groups\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"cache\", \"cache\");\n-\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"cache\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/configurations/ConfigurationController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 234,
          "patch": "@@ -1,234 +0,0 @@\n-package com.salesmanager.shop.admin.controller.configurations;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.core.env.Environment;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-import com.salesmanager.core.business.modules.email.EmailConfig;\n-import com.salesmanager.core.business.services.system.EmailService;\n-import com.salesmanager.core.business.services.system.MerchantConfigurationService;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.system.MerchantConfiguration;\n-import com.salesmanager.core.model.system.MerchantConfigurationType;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.ConfigListWrapper;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-\n-\n-\n-\n-@Controller\n-public class ConfigurationController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ConfigurationController.class);\n-\t\n-\tprivate static final String P_MASK = \"*****\";\n-\t\n-\t@Inject\n-\tprivate MerchantConfigurationService merchantConfigurationService;\n-\t\n-\t@Inject\n-\tprivate EmailService emailService;\n-\n-\t@Inject\n-\tEnvironment env;\n-\t\n-\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/configuration/accounts.html\", method=RequestMethod.GET)\n-\tpublic String displayAccountsConfguration(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tsetConfigurationMenu(model, request);\n-\t\tList<MerchantConfiguration> configs = new ArrayList<MerchantConfiguration>();\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tMerchantConfiguration merchantFBConfiguration = merchantConfigurationService.getMerchantConfiguration(Constants.KEY_FACEBOOK_PAGE_URL,store);\n-\t\tif(null == merchantFBConfiguration)\n-\t\t{\n-\t\t\tmerchantFBConfiguration = new MerchantConfiguration();\n-\t\t\tmerchantFBConfiguration.setKey(Constants.KEY_FACEBOOK_PAGE_URL);\n-\t\t\tmerchantFBConfiguration.setMerchantConfigurationType(MerchantConfigurationType.SOCIAL);\n-\t\t}\n-\t\tconfigs.add(merchantFBConfiguration);\n-\t\t\n-\t\tMerchantConfiguration merchantGoogleAnalyticsConfiguration = merchantConfigurationService.getMerchantConfiguration(Constants.KEY_GOOGLE_ANALYTICS_URL,store);\n-\t\tif(null == merchantGoogleAnalyticsConfiguration)\n-\t\t{\n-\t\t\tmerchantGoogleAnalyticsConfiguration = new MerchantConfiguration();\n-\t\t\tmerchantGoogleAnalyticsConfiguration.setKey(Constants.KEY_GOOGLE_ANALYTICS_URL);\n-\t\t\tmerchantGoogleAnalyticsConfiguration.setMerchantConfigurationType(MerchantConfigurationType.SOCIAL);\n-\t\t}\n-\t\tconfigs.add(merchantGoogleAnalyticsConfiguration);\n-\t\t\n-\t\tMerchantConfiguration merchantInstagramConfiguration = merchantConfigurationService.getMerchantConfiguration(Constants.KEY_INSTAGRAM_URL,store);\n-\t\tif(null == merchantInstagramConfiguration)\n-\t\t{\n-\t\t\tmerchantInstagramConfiguration = new MerchantConfiguration();\n-\t\t\tmerchantInstagramConfiguration.setKey(Constants.KEY_INSTAGRAM_URL);\n-\t\t\tmerchantInstagramConfiguration.setMerchantConfigurationType(MerchantConfigurationType.SOCIAL);\n-\t\t}\n-\t\tconfigs.add(merchantInstagramConfiguration);\n-\t\t\n-\t\tMerchantConfiguration merchantPinterestConfiguration = merchantConfigurationService.getMerchantConfiguration(Constants.KEY_PINTEREST_PAGE_URL,store);\n-\t\tif(null == merchantPinterestConfiguration)\n-\t\t{\n-\t\t\tmerchantPinterestConfiguration = new MerchantConfiguration();\n-\t\t\tmerchantPinterestConfiguration.setKey(Constants.KEY_PINTEREST_PAGE_URL);\n-\t\t\tmerchantPinterestConfiguration.setMerchantConfigurationType(MerchantConfigurationType.SOCIAL);\n-\t\t}\n-\t\tconfigs.add(merchantPinterestConfiguration);\n-\t\t\n-\t\t/**\n-\t\tMerchantConfiguration merchantGoogleApiConfiguration = merchantConfigurationService.getMerchantConfiguration(Constants.KEY_GOOGLE_API_KEY,store);\n-\t\tif(null == merchantGoogleApiConfiguration)\n-\t\t{\n-\t\t\tmerchantGoogleApiConfiguration = new MerchantConfiguration();\n-\t\t\tmerchantGoogleApiConfiguration.setKey(Constants.KEY_GOOGLE_API_KEY);\n-\t\t\tmerchantGoogleApiConfiguration.setMerchantConfigurationType(MerchantConfigurationType.CONFIG);\n-\t\t}\n-\t\tconfigs.add(merchantGoogleApiConfiguration);\n-\t\t**/\n-\t\t\n-\t\tMerchantConfiguration twitterConfiguration = merchantConfigurationService.getMerchantConfiguration(Constants.KEY_TWITTER_HANDLE,store);\n-\t\tif(null == twitterConfiguration)\n-\t\t{\n-\t\t\ttwitterConfiguration = new MerchantConfiguration();\n-\t\t\ttwitterConfiguration.setKey(Constants.KEY_TWITTER_HANDLE);\n-\t\t\ttwitterConfiguration.setMerchantConfigurationType(MerchantConfigurationType.SOCIAL);\n-\t\t}\n-\t\tconfigs.add(twitterConfiguration);\n-\t\t\n-\t\tConfigListWrapper configWrapper = new ConfigListWrapper();\n-\t\tconfigWrapper.setMerchantConfigs(configs);\n-\t\tmodel.addAttribute(\"configuration\",configWrapper);\n-\t\t\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Configuration.accounts;\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/configuration/saveConfiguration.html\", method=RequestMethod.POST)\n-\tpublic String saveConfigurations(@ModelAttribute(\"configuration\") ConfigListWrapper configWrapper, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception\n-\t{\n-\t\tsetConfigurationMenu(model, request);\n-\t\tList<MerchantConfiguration> configs = configWrapper.getMerchantConfigs();\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tfor(MerchantConfiguration mConfigs : configs)\n-\t\t{\n-\t\t\tmConfigs.setMerchantStore(store);\n-\t\t\tif(!StringUtils.isBlank(mConfigs.getValue())) {\n-\t\t\t\tmConfigs.setMerchantConfigurationType(MerchantConfigurationType.SOCIAL);\n-\t\t\t\tmerchantConfigurationService.saveOrUpdate(mConfigs);\n-\t\t\t} else {//remove if submited blank and exists\n-\t\t\t\tMerchantConfiguration config = merchantConfigurationService.getMerchantConfiguration(mConfigs.getKey(), store);\n-\t\t\t\tif(config!=null) {\n-\t\t\t\t\tmerchantConfigurationService.delete(config);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\tmodel.addAttribute(\"configuration\",configWrapper);\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Configuration.accounts;\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/configuration/email.html\", method=RequestMethod.GET)\n-\tpublic String displayEmailSettings(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\tsetEmailConfigurationMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tEmailConfig emailConfig = emailService.getEmailConfiguration(store);\n-\t\tif(emailConfig == null){\n-\t\t\temailConfig = new EmailConfig();\n-\t\t\t//TODO: Need to check below properties. When there are no record available in MerchantConfguration table with EMAIL_CONFIG key, \n-\t\t\t// instead of showing blank fields in setup screen, show default configured values from email.properties\n-\t\t\temailConfig.setProtocol(env.getProperty(\"mailSender.protocol\"));\n-\t\t\temailConfig.setHost(env.getProperty(\"mailSender.host\"));\n-\t\t\temailConfig.setPort(env.getProperty(\"mailSender.port}\"));\n-\t\t\temailConfig.setUsername(env.getProperty(\"mailSender.username\"));\n-\t\t\t//emailConfig.setPassword(env.getProperty(\"mailSender.password\"));\n-\t\t\temailConfig.setPassword(P_MASK);\n-\t\t\temailConfig.setSmtpAuth(Boolean.parseBoolean(env.getProperty(\"mailSender.mail.smtp.auth\")));\n-\t\t\temailConfig.setStarttls(Boolean.parseBoolean(env.getProperty(\"mail.smtp.starttls.enable\")));\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"configuration\", emailConfig);\n-\t\treturn ControllerConstants.Tiles.Configuration.email;\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/configuration/saveEmailConfiguration.html\", method=RequestMethod.POST)\n-\tpublic String saveEmailSettings(@ModelAttribute(\"configuration\") EmailConfig config, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\tsetEmailConfigurationMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tEmailConfig emailConfig = emailService.getEmailConfiguration(store);\n-\t\tif(emailConfig == null){\n-\t\t\temailConfig = new EmailConfig();\n-\t\t}\n-\t\t\n-\t\t// populte EmailConfig model from UI values\n-\t\temailConfig.setProtocol(config.getProtocol());\n-\t\temailConfig.setHost(config.getHost());\n-\t\temailConfig.setPort(config.getPort());\n-\t\temailConfig.setUsername(config.getUsername());\n-\t\temailConfig.setPassword(emailConfig.getPassword());\n-\t\tif(!StringUtils.isBlank(config.getPassword())) {\n-\t\t\tif(!config.getPassword().equals(P_MASK)) {\n-\t\t\t\temailConfig.setPassword(config.getPassword());\n-\t\t\t}\n-\t\t}\n-\t\temailConfig.setSmtpAuth(config.isSmtpAuth());\n-\t\temailConfig.setStarttls(config.isStarttls());\n-\t\t\n-\t\temailService.saveEmailConfiguration(emailConfig, store);\n-\t\t\n-\t\tmodel.addAttribute(\"configuration\", emailConfig);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Configuration.email;\n-\t}\n-\t\n-\tprivate void setConfigurationMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"configuration\", \"configuration\");\n-\t\tactiveMenus.put(\"accounts-conf\", \"accounts-conf\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"configuration\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t}\n-\t\n-\tprivate void setEmailConfigurationMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"configuration\", \"configuration\");\n-\t\tactiveMenus.put(\"email-conf\", \"email-conf\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"configuration\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t}\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/configurations/SystemConfigurationController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 88,
          "patch": "@@ -1,88 +0,0 @@\n-package com.salesmanager.shop.admin.controller.configurations;\n-\n-import java.util.HashMap;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.core.env.Environment;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-import com.salesmanager.core.business.services.system.MerchantConfigurationService;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.system.MerchantConfig;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-\n-\n-\n-@Controller\n-public class SystemConfigurationController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(SystemConfigurationController.class);\n-\t\n-\t@Inject\n-\tprivate MerchantConfigurationService merchantConfigurationService;\n-\n-\t@Inject\n-\tEnvironment env;\n-\t\n-\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/configuration/system.html\", method=RequestMethod.GET)\n-\tpublic String displaySysyemConfgurations(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tsetMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tMerchantConfig merchantConfiguration = merchantConfigurationService.getMerchantConfig(store);\n-\n-\t\tif(merchantConfiguration==null) {\n-\t\t\tmerchantConfiguration = new MerchantConfig();\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"store\", store);\n-\t\tmodel.addAttribute(\"configuration\",merchantConfiguration);\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Configuration.system;\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/configuration/saveSystemConfiguration.html\", method=RequestMethod.POST)\n-\tpublic String saveSystemConfigurations(@ModelAttribute(\"configuration\") MerchantConfig merchantConfiguration, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception\n-\t{\n-\t\tsetMenu(model, request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tmerchantConfigurationService.saveMerchantConfig(merchantConfiguration, store);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\tmodel.addAttribute(\"store\", store);\n-\t\tmodel.addAttribute(\"configuration\",merchantConfiguration);\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Configuration.system;\n-\t\t\n-\t}\n-\n-\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"configuration\", \"configuration\");\n-\t\tactiveMenus.put(\"system-configurations\", \"system-configurations\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"configuration\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t}\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/content/ContentBoxesController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 215,
          "patch": "@@ -1,215 +0,0 @@\n-package com.salesmanager.shop.admin.controller.content;\n-\n-import com.salesmanager.core.business.services.content.ContentService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.model.content.Content;\n-import com.salesmanager.core.model.content.ContentDescription;\n-import com.salesmanager.core.model.content.ContentType;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.*;\n-\n-@Controller\n-public class ContentBoxesController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ContentBoxesController.class);\n-\t\n-\t@Inject\n-\tprivate ContentService contentService;\n-\t\n-\t@Inject\n-\tLanguageService languageService;\n-\t\n-\t@ModelAttribute(\"boxPositions\") \n-    public Set<Map.Entry<String, String>> boxPositions() { \n-        final Map<String, String> map = new HashMap<String, String>(); \n-\n-        map.put(\"LEFT\", \"LEFT\");\n-        map.put(\"RIGHT\", \"RIGHT\");\n-\n-\n-        return (map.entrySet()); \n-    } \n-\n-\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/boxes/list.html\", method=RequestMethod.GET)\n-\tpublic String listContentBoxes(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\n-\t\tmodel.addAttribute(\"boxes\", true);\n-\t\treturn ControllerConstants.Tiles.Content.contentPages;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/boxes/create.html\", method=RequestMethod.GET)\n-\tpublic String createBox(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\tmodel.addAttribute(\"boxes\", true);\n-\t\tsetMenu(model,request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tContent content = new Content();\n-\t\tcontent.setMerchantStore(store);\n-\t\tcontent.setContentType(ContentType.BOX);\n-\t\t\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\t\t\n-\t\t\n-\t\tfor(Language l : languages) {\n-\t\t\t\n-\t\t\tContentDescription description = new ContentDescription();\n-\t\t\tdescription.setLanguage(l);\n-\t\t\tcontent.getDescriptions().add(description);\n-\t\t}\n-\t\t\n-\t\t//add positions\n-\t\tList<String> positions = new ArrayList<String>();\n-\t\tpositions.add(\"LEFT\");\n-\t\tpositions.add(\"RIGHT\");\n-\t\t\n-\t\tmodel.addAttribute(\"positions\",positions);\n-\t\tmodel.addAttribute(\"content\",content);\n-\t\t\n-\n-\t\treturn ControllerConstants.Tiles.Content.contentPagesDetails;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/boxes/details.html\", method=RequestMethod.GET)\n-\tpublic String getContentDetails(@RequestParam(\"id\") Long id, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\tmodel.addAttribute(\"boxes\", true);\n-\t\tsetMenu(model,request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tContent content = contentService.getById(id);\n-\t\t\n-\n-\t\tList<String> positions = new ArrayList<String>();\n-\t\tpositions.add(\"LEFT\");\n-\t\tpositions.add(\"RIGHT\");\n-\t\t\n-\t\tmodel.addAttribute(\"positions\",positions);\n-\t\t\n-\t\tif(content==null) {\n-\t\t\tLOGGER.error(\"Content entity null for id \" + id);\n-\t\t\treturn \"redirect:/admin/content/boxes/listContent.html\";\n-\t\t}\n-\t\t\n-\t\tif(content.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\tLOGGER.error(\"Content id \" + id + \" does not belong to merchant \" + store.getId());\n-\t\t\treturn \"redirect:/admin/content/boxes/listContent.html\";\n-\t\t}\n-\t\t\n-\t\tif(!content.getContentType().name().equals(ContentType.BOX.name())) {\n-\t\t\tLOGGER.error(\"This controller does not handle content type \" + content.getContentType().name());\n-\t\t\treturn \"redirect:/admin/content/boxes/listContent.html\";\n-\t\t}\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\t\t\n-\t\tList<ContentDescription> descriptions = new ArrayList<ContentDescription>();\n-\t\tfor(Language l : languages) {\n-\t\t\tfor(ContentDescription description : content.getDescriptions()) {\n-\t\t\t\tif(description.getLanguage().getCode().equals(l.getCode())) {\n-\t\t\t\t\tdescriptions.add(description);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tcontent.setDescriptions(descriptions);\n-\t\t\n-\t\tmodel.addAttribute(\"content\",content);\n-\t\t\n-\n-\t\treturn ControllerConstants.Tiles.Content.contentPagesDetails;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\n-\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/boxes/save.html\", method=RequestMethod.POST)\n-\tpublic String saveContent(@Valid @ModelAttribute Content content, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\tmodel.addAttribute(\"boxes\", true);\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<String> positions = new ArrayList<String>();\n-\t\tpositions.add(\"LEFT\");\n-\t\tpositions.add(\"RIGHT\");\n-\t\t\n-\t\tmodel.addAttribute(\"positions\",positions);\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.Content.contentPagesDetails;\n-\t\t}\n-\t\t\n-\t\tMap<String,Language> langs = languageService.getLanguagesMap();\n-\t\t\n-\t\tList<ContentDescription> descriptions = content.getDescriptions();\n-\t\tfor(ContentDescription description : descriptions) {\n-\t\t\tLanguage l = langs.get(description.getLanguage().getCode());\n-\t\t\tdescription.setLanguage(l);\n-\t\t\tdescription.setContent(content);\n-\t\t}\n-\t\t\n-\t\tcontent.setContentType(ContentType.BOX);\n-\t\tcontent.setMerchantStore(store);\n-\t\tcontentService.saveOrUpdate(content);\n-\t\t\n-\t\t\n-\t\tmodel.addAttribute(\"content\",content);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Content.contentPagesDetails;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"content\", \"content\");\n-\t\tactiveMenus.put(\"content-boxes\", \"content-boxes\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"content\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/content/ContentImageController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 263,
          "patch": "@@ -1,263 +0,0 @@\n-package com.salesmanager.shop.admin.controller.content;\n-\n-import com.salesmanager.core.business.services.content.ContentService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.content.FileContentType;\n-import com.salesmanager.core.model.content.InputContentFile;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.content.ContentFiles;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.ImageFilePath;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-import org.springframework.web.multipart.MultipartFile;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.io.ByteArrayInputStream;\n-import java.util.*;\n-\n-/**\n- * Manage static content type image\n- * - Add images\n- * - Remove images\n- * @author Carl Samson\n- *\n- */\n-@Controller\n-public class ContentImageController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ContentImageController.class);\n-\t\n-\t@Inject\n-\tprivate ContentService contentService;\n-\t\n-\t@Inject\n-\t@Qualifier(\"img\")\n-\tprivate ImageFilePath imageUtils;\n-\t\n-\t/**\n-\t * Entry point for the file browser used from the javascript\n-\t * content editor\n-\t * @param model\n-\t * @param request\n-\t * @param response\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value={\"/admin/content/fileBrowser.html\"}, method=RequestMethod.GET)\n-\tpublic String displayFileBrowser(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\n-\t\treturn ControllerConstants.Tiles.ContentImages.fileBrowser;\n-\t\t\n-\t}\n-\t\n-\t\n-\t\n-\t/**\n-\t * Get images for a given merchant store\n-\t * @param model\n-\t * @param request\n-\t * @param response\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value={\"/admin/content/contentImages.html\",\"/admin/content/contentManagement.html\"}, method=RequestMethod.GET)\n-\tpublic String getContentImages(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\t\treturn ControllerConstants.Tiles.ContentImages.contentImages;\n-\t\t\n-\t}\n-\t\n-\t\n-\t@SuppressWarnings({ \"unchecked\"})\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/images/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageImages(HttpServletRequest request, HttpServletResponse response) {\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tList<String> imageNames = contentService.getContentFilesNames(store.getCode(),FileContentType.IMAGE);\n-\t\t\t\n-\t\t\tif(imageNames!=null) {\n-\n-\t\t\t\tfor(String name : imageNames) {\n-\n-\t\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\tentry.put(\"picture\", new StringBuilder().append(request.getContextPath()).append(imageUtils.buildStaticImageUtils(store, name)).toString());\n-\t\t\t\t\t\n-\t\t\t\t\tentry.put(\"name\", name);\n-\t\t\t\t\tentry.put(\"id\", name);\n-\t\t\t\t\tresp.addDataEntry(entry);\n-\n-\t\t\t\t}\n-\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging content images\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t/**\n-\t * Controller methods which allow Admin to add content images to underlying\n-\t * Infinispan cache.\n-\t * @param model model object\n-\t * @param request http request object\n-\t * @param response http response object\n-\t * @return view allowing user to add content images\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/createContentImages.html\", method=RequestMethod.GET)\n-    public String displayContentImagesCreate(final Model model, final HttpServletRequest request, final HttpServletResponse response) throws Exception {\n-      \n-\t    return ControllerConstants.Tiles.ContentImages.addContentImages;\n-\n-    }\n-\t\n-\t/**\n-\t * Method responsible for adding content images to underlying Infinispan cache.\n-\t * It will add given content image(s) for given merchant store in the cache.\n-\t * Following steps will be performed in order to add images\n-\t * <pre>\n-\t * 1. Validate form data\n-\t * 2. Get Merchant Store based on merchant Id.\n-\t * 3. Call {@link InputContentFile} to add image(s).\n-\t * </pre>\n-\t * \n-\t * @param contentImages\n-\t * @param bindingResult\n-\t * @param model\n-\t * @param request\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/saveContentImages.html\", method=RequestMethod.POST)\n-\tpublic String saveContentImages(@ModelAttribute(value=\"contentFiles\") @Valid final ContentFiles contentImages, final BindingResult bindingResult,final Model model, final HttpServletRequest request) throws Exception{\n-\t    \n-\t\tthis.setMenu(model, request);\n-\t    if (bindingResult.hasErrors()) {\n-\t        LOGGER.info( \"Found {} Validation errors\", bindingResult.getErrorCount());\n-\t       return ControllerConstants.Tiles.ContentImages.addContentImages;\n-\t       \n-        }\n-\t    final List<InputContentFile> contentImagesList=new ArrayList<InputContentFile>();\n-        final MerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-        if(CollectionUtils.isNotEmpty( contentImages.getFile() )){\n-            LOGGER.info(\"Saving {} content images for merchant {}\",contentImages.getFile().size(),store.getId());\n-            for(final MultipartFile multipartFile:contentImages.getFile()){\n-                if(!multipartFile.isEmpty()){\n-                    ByteArrayInputStream inputStream = new ByteArrayInputStream( multipartFile.getBytes() );\n-                    InputContentFile cmsContentImage = new InputContentFile();\n-                    cmsContentImage.setFileName(multipartFile.getOriginalFilename() );\n-                    cmsContentImage.setMimeType( multipartFile.getContentType() );\n-                    cmsContentImage.setFile( inputStream );\n-                    cmsContentImage.setFileContentType(FileContentType.IMAGE);\n-                    contentImagesList.add( cmsContentImage);\n-                }\n-            }\n-            \n-            if(CollectionUtils.isNotEmpty( contentImagesList )){\n-                contentService.addContentFiles( store.getCode(), contentImagesList );\n-            }\n-            else{\n-                // show error message on UI\n-            }\n-        }\n-       \n-        return ControllerConstants.Tiles.ContentImages.contentImages;\n-\t}\n-\t\n-\t\n-\t/**\n-\t * Removes a content image from the CMS\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t */\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/removeImage.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeImage(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString imageName = request.getParameter(\"name\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tcontentService.removeFile(store.getCode(), FileContentType.IMAGE, imageName);\n-\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"content\", \"content\");\n-\t\tactiveMenus.put(\"content-images\", \"content-images\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"content\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/content/ContentPagesController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 389,
          "patch": "@@ -1,389 +0,0 @@\n-package com.salesmanager.shop.admin.controller.content;\n-\n-import com.salesmanager.core.business.services.catalog.product.relationship.ProductRelationshipService;\n-import com.salesmanager.core.business.services.content.ContentService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.product.relationship.ProductRelationship;\n-import com.salesmanager.core.model.content.Content;\n-import com.salesmanager.core.model.content.ContentDescription;\n-import com.salesmanager.core.model.content.ContentType;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.*;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.*;\n-\n-@Controller\n-public class ContentPagesController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ContentPagesController.class);\n-\t\n-\t@Inject\n-\tprivate ContentService contentService;\n-\t\n-\t@Inject\n-\tLanguageService languageService;\n-\t\n-\t@Inject\n-\tProductRelationshipService productRelationshipService;\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/pages/list.html\", method=RequestMethod.GET)\n-\tpublic String listContentPages(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\n-\t\treturn ControllerConstants.Tiles.Content.contentPages;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/pages/create.html\", method=RequestMethod.GET)\n-\tpublic String createPage(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tContent content = new Content();\n-\t\tcontent.setMerchantStore(store);\n-\t\tcontent.setContentType(ContentType.PAGE);\n-\t\t\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\t\t\n-\t\t\n-\t\tfor(Language l : languages) {\n-\t\t\t\n-\t\t\tContentDescription description = new ContentDescription();\n-\t\t\tdescription.setLanguage(l);\n-\t\t\tcontent.getDescriptions().add(description);\n-\t\t}\n-\t\t\n-\t\tList<ProductRelationship> relationships = productRelationshipService.getGroups(store);\n-\t\tif(!CollectionUtils.isEmpty(relationships)) {\n-\t\t\tmodel.addAttribute(\"productGroups\", relationships);\n-\t\t}\n-\t\t\n-\t\t\n-\t\t\n-\t\tmodel.addAttribute(\"content\",content);\n-\t\t\n-\n-\t\treturn ControllerConstants.Tiles.Content.contentPagesDetails;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/pages/details.html\", method=RequestMethod.GET)\n-\tpublic String getContentDetails(@RequestParam(\"id\") Long id, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tContent content = contentService.getById(id);\n-\t\t\n-\n-\t\t\n-\t\tif(content==null) {\n-\t\t\tLOGGER.error(\"Content entity null for id \" + id);\n-\t\t\treturn \"redirect:/admin/content/pages/listContent.html\";\n-\t\t}\n-\t\t\n-\t\tif(content.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\tLOGGER.error(\"Content id \" + id + \" does not belong to merchant \" + store.getId());\n-\t\t\treturn \"redirect:/admin/content/pages/listContent.html\";\n-\t\t}\n-\t\t\n-\t\tif(!content.getContentType().name().equals(ContentType.PAGE.name())) {\n-\t\t\tLOGGER.error(\"This controller does not handle content type \" + content.getContentType().name());\n-\t\t\treturn \"redirect:/admin/content/pages/listContent.html\";\n-\t\t}\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\t\t\n-\t\tList<ContentDescription> descriptions = new ArrayList<ContentDescription>();\n-\t\tfor(Language l : languages) {\n-\t\t\tfor(ContentDescription description : content.getDescriptions()) {\n-\t\t\t\tif(description.getLanguage().getCode().equals(l.getCode())) {\n-\t\t\t\t\tdescriptions.add(description);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tcontent.setDescriptions(descriptions);\n-\t\tmodel.addAttribute(\"content\",content);\n-\t\t\n-\t\tList<ProductRelationship> relationships = productRelationshipService.getGroups(store);\n-\t\tif(!CollectionUtils.isEmpty(relationships)) {\n-\t\t\tmodel.addAttribute(\"productGroups\", relationships);\n-\t\t}\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Content.contentPagesDetails;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeContent(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString id = request.getParameter(\"id\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t//get the content first\n-\t\t\tLong lid = Long.parseLong(id);\n-\t\t\t\n-\t\t\tContent dbContent = contentService.getById(lid);\n-\t\t\t\n-\t\t\tif(dbContent==null) {\n-\t\t\t\tLOGGER.error(\"Invalid content id \", id);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(dbContent!=null && dbContent.getMerchantStore().getId().intValue()!= store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tcontentService.delete(dbContent);\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\t@SuppressWarnings({ \"unchecked\"})\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/page.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageStaticContent(@RequestParam(\"contentType\") String contentType, HttpServletRequest request, HttpServletResponse response) {\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\t\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tContentType cType = ContentType.PAGE;\n-\t\t\tif(ContentType.BOX.name().equals(contentType)) {\n-\t\t\t\tcType = ContentType.BOX;\n-\t\t\t} \n-\t\t\tList<Content> contentList = contentService.listByType(cType, store, language);\n-\t\t\t\n-\t\t\tif(contentList!=null) {\n-\n-\t\t\t\tfor(Content content : contentList) {\n-\t\t\t\t\t\n-\t\t\t\t\tList<ContentDescription> descriptions = content.getDescriptions();\n-\t\t\t\t\tContentDescription description = descriptions.get(0);\n-\t\t\t\t\tfor(ContentDescription desc : descriptions) {\n-\t\t\t\t\t\tif(desc.getLanguage().getCode().equals(language.getCode())) {\n-\t\t\t\t\t\t\tdescription = desc;\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\n-\t\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\tentry.put(\"id\", content.getId());\n-\t\t\t\t\tentry.put(\"code\", content.getCode());\n-\t\t\t\t\tentry.put(\"name\", description.getName());\n-\t\t\t\t\tresp.addDataEntry(entry);\n-\n-\t\t\t\t}\n-\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging content\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/pages/save.html\", method=RequestMethod.POST)\n-\tpublic String saveContent(@Valid @ModelAttribute Content content, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.Content.contentPagesDetails;\n-\t\t}\n-\t\t\n-\t\tMap<String,Language> langs = languageService.getLanguagesMap();\n-\t\t\n-\t\tList<ContentDescription> descriptions = content.getDescriptions();\n-\t\tfor(ContentDescription description : descriptions) {\n-\t\t\tLanguage l = langs.get(description.getLanguage().getCode());\n-\t\t\tdescription.setLanguage(l);\n-\t\t\tdescription.setContent(content);\n-\t\t}\n-\t\t\n-\t\tif(content.getSortOrder()==null) {\n-\t\t\tcontent.setSortOrder(0);\n-\t\t}\n-\n-\t\tcontent.setContentType(ContentType.PAGE);\n-\t\tcontent.setMerchantStore(store);\n-\n-\t\tcontentService.saveOrUpdate(content);\n-\t\t\n-\t\tList<ProductRelationship> relationships = productRelationshipService.getGroups(store);\n-\t\tif(!CollectionUtils.isEmpty(relationships)) {\n-\t\t\tmodel.addAttribute(\"productGroups\", relationships);\n-\t\t}\n-\t\t\n-\t\t\n-\t\tmodel.addAttribute(\"content\",content);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Content.contentPagesDetails;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t/**\n-\t * Check if the content code filled in by the\n-\t * user is unique\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t */\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/checkContentCode.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> checkContentCode(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\t\n-\t\tString code = request.getParameter(\"code\");\n-\t\tString id = request.getParameter(\"id\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\t   if(StringUtils.isBlank(code)) {\n-\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t   }\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\tContent content = contentService.getByCode(code, store);\n-\t\t\n-\t\t\n-\t\tif(!StringUtils.isBlank(id)) {\n-\t\t\ttry {\n-\t\t\t\tLong lid = Long.parseLong(id);\n-\t\t\t\t\n-\t\t\t\tif(content!=null && content.getCode().equals(code) && content.getId().longValue()==lid) {\n-\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\t\t} else {\n-\t\t\tif(content!=null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t}\n-\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while getting content\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"content\", \"content\");\n-\t\tactiveMenus.put(\"content-pages\", \"content-pages\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"content\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/content/StaticContentController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 255,
          "patch": "@@ -1,255 +0,0 @@\n-package com.salesmanager.shop.admin.controller.content;\n-\n-import java.io.ByteArrayInputStream;\n-import java.net.URLConnection;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import javax.inject.Inject;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-import org.springframework.web.multipart.MultipartFile;\n-\n-import com.salesmanager.core.model.content.FileContentType;\n-import com.salesmanager.core.model.content.InputContentFile;\n-import com.salesmanager.core.business.services.content.ContentService;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.content.ContentFiles;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.ImageFilePath;\n-\n-\n-@Controller\n-public class StaticContentController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(StaticContentController.class);\n-\t\n-\t@Inject\n-\tprivate ContentService contentService;\n-\t\n-\n-\t@Inject\n-\t@Qualifier(\"img\")\n-\tprivate ImageFilePath imageUtils;\n-\t\n-\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value={\"/admin/content/static/contentFiles.html\",\"/admin/content/static/contentManagement.html\"}, method=RequestMethod.GET)\n-\tpublic String getContentImages(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\t\treturn ControllerConstants.Tiles.ContentFiles.contentFiles;\n-\t\t\n-\t}\n-\n-\t\n-\t/**\n-\t * Display files in a List grid\n-\t * @param request\n-\t * @param response\n-\t * @return\n-\t */\n-\t@SuppressWarnings({ \"unchecked\"})\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/static/page.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageStaticContent(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tList<String> fileNames = contentService.getContentFilesNames(store.getCode(), FileContentType.STATIC_FILE);\n-\t\t\t\n-/*\t\t\tMap<String,String> configurations = (Map<String, String>)request.getSession().getAttribute(Constants.STORE_CONFIGURATION);\n-\t\t\tString scheme = Constants.HTTP_SCHEME;\n-\t\t\tif(configurations!=null) {\n-\t\t\t\tscheme = (String)configurations.get(\"scheme\");\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\tStringBuilder storePath = new StringBuilder();\n-\t\t\tstorePath.append(scheme).append(\"://\")\n-\t\t\t.append(store.getDomainName())\n-\t\t\t.append(request.getContextPath());\n-*/\t\t\t\n-\n-\t\t\tif(fileNames!=null) {\n-\n-\t\t\t\tfor(String name : fileNames) {\n-\t\t\t\t\t\n-\t\t\t\t\tString mimeType = URLConnection.getFileNameMap().getContentTypeFor(name);\n-\t\t\t\t\t\n-\t\t\t\t\t//StringBuilder filePath = new StringBuilder();\n-\n-\t\t\t\t\t//filePath.append(storePath.toString()).append(filePathUtils.buildStaticFilePath(store,name));\n-\t\t\t\t\t\n-\t\t\t\t\tString filePath = imageUtils.buildStaticContentFilePath(store,name);\n-\n-\t\t\t\t\t//String filePath = filePathUtils.buildStaticFileAbsolutePath(store, name);\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\tentry.put(\"name\", name);\n-\t\t\t\t\tentry.put(\"path\", filePath.toString());\n-\t\t\t\t\tentry.put(\"mimeType\", mimeType);\n-\t\t\t\t\tresp.addDataEntry(entry);\n-\n-\t\t\t\t}\n-\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging content images\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\n-\t\n-\t/**\n-\t * Method responsible for adding content files to underlying Infinispan cache.\n-\t * It will add given content file(s) for given merchant store in the cache.\n-\t * Following steps will be performed in order to add files\n-\t * <pre>\n-\t * 1. Validate form data\n-\t * 2. Get Merchant Store based on merchant Id.\n-\t * 3. Call {@link InputContentFile} to add file(s).\n-\t * </pre>\n-\t * \n-\t * @param contentImages\n-\t * @param bindingResult\n-\t * @param model\n-\t * @param request\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/static/saveFiles.html\", method=RequestMethod.POST)\n-\tpublic String saveFiles(@ModelAttribute(value=\"contentFiles\") @Valid final ContentFiles contentFiles, final BindingResult bindingResult,final Model model, final HttpServletRequest request) throws Exception{\n-\t    \n-\t\tthis.setMenu(model, request);\n-\t    if (bindingResult.hasErrors()) {\n-\t        LOGGER.info( \"Found {} Validation errors\", bindingResult.getErrorCount());\n-\t        return ControllerConstants.Tiles.ContentFiles.contentFiles;\n-\t       \n-        }\n-\t    final List<InputContentFile> contentFilesList=new ArrayList<InputContentFile>();\n-        final MerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-        if(CollectionUtils.isNotEmpty( contentFiles.getFile() )){\n-            LOGGER.info(\"Saving {} content files for merchant {}\",contentFiles.getFile().size(),store.getId());\n-            for(final MultipartFile multipartFile:contentFiles.getFile()){\n-                if(!multipartFile.isEmpty()){\n-                    ByteArrayInputStream inputStream = new ByteArrayInputStream( multipartFile.getBytes() );\n-                    InputContentFile cmsContentImage = new InputContentFile();\n-                    cmsContentImage.setFileName(multipartFile.getOriginalFilename() );\n-                    cmsContentImage.setFileContentType( FileContentType.STATIC_FILE );\n-                    cmsContentImage.setFile( inputStream );\n-                    contentFilesList.add( cmsContentImage);\n-                }\n-            }\n-            \n-            if(CollectionUtils.isNotEmpty( contentFilesList )){\n-            \tcontentService.addContentFiles( store.getCode(), contentFilesList );\n-            }\n-            else{\n-                // show error message on UI\n-            }\n-        }\n-        \n-        return ControllerConstants.Tiles.ContentFiles.contentFiles;\n-\t}\n-\t\n-\t\n-\t/**\n-\t * Removes a static file from the CMS\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t */\n-\t@PreAuthorize(\"hasRole('CONTENT')\")\n-\t@RequestMapping(value=\"/admin/content/static/removeFile.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeFile(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString fileName = request.getParameter(\"name\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tcontentService.removeFile(store.getCode(), FileContentType.STATIC_FILE, fileName);\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"content\", \"content\");\n-\t\tactiveMenus.put(\"content-files\", \"content-files\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"content\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/customers/CustomerController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 845,
          "patch": "@@ -1,845 +0,0 @@\n-package com.salesmanager.shop.admin.controller.customers;\n-\n-import com.salesmanager.core.business.services.customer.CustomerService;\n-import com.salesmanager.core.business.services.customer.attribute.CustomerAttributeService;\n-import com.salesmanager.core.business.services.customer.attribute.CustomerOptionService;\n-import com.salesmanager.core.business.services.customer.attribute.CustomerOptionSetService;\n-import com.salesmanager.core.business.services.customer.attribute.CustomerOptionValueService;\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.services.reference.zone.ZoneService;\n-import com.salesmanager.core.business.services.system.EmailService;\n-import com.salesmanager.core.business.services.user.GroupService;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.customer.Customer;\n-import com.salesmanager.core.model.customer.CustomerCriteria;\n-import com.salesmanager.core.model.customer.CustomerList;\n-import com.salesmanager.core.model.customer.attribute.CustomerAttribute;\n-import com.salesmanager.core.model.customer.attribute.CustomerOptionSet;\n-import com.salesmanager.core.model.customer.attribute.CustomerOptionType;\n-import com.salesmanager.core.model.customer.attribute.CustomerOptionValueDescription;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.country.Country;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.reference.zone.Zone;\n-import com.salesmanager.core.model.user.Group;\n-import com.salesmanager.core.model.user.GroupType;\n-import com.salesmanager.shop.admin.model.customer.attribute.CustomerOption;\n-import com.salesmanager.shop.admin.model.customer.attribute.CustomerOptionValue;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.populator.customer.ReadableCustomerOptionPopulator;\n-import com.salesmanager.shop.store.controller.customer.facade.CustomerFacade;\n-import com.salesmanager.shop.utils.EmailUtils;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import com.salesmanager.shop.utils.LocaleUtils;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.security.crypto.password.PasswordEncoder;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.*;\n-import java.util.regex.Pattern;\n-\n-\n-\n-@Controller\n-public class CustomerController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CustomerController.class);\n-\t\n-\tprivate static final String CUSTOMER_ID_PARAMETER = \"customer\";\n-\t\n-\t\n-\t\n-\t@Inject\n-\tprivate LabelUtils messages;\n-\t\n-\t@Inject\n-\tprivate GroupService groupService;\n-\t\n-\t@Inject\n-\tprivate CustomerService customerService;\n-\t\n-\t@Inject\n-\tprivate CustomerOptionService customerOptionService;\n-\t\n-\t@Inject\n-\tprivate CustomerOptionValueService customerOptionValueService;\n-\t\n-\t@Inject\n-\tprivate CustomerOptionSetService customerOptionSetService;\n-\t\n-\t@Inject\n-\tprivate CountryService countryService;\n-\t\n-\t@Inject\n-\tprivate ZoneService zoneService;\n-\t\n-\t@Inject\n-\tprivate LanguageService languageService;\n-\t\n-\t@Inject\n-\tprivate CustomerAttributeService customerAttributeService;\n-\t\n-\t@Inject\n-\t@Named(\"passwordEncoder\")\n-\tprivate PasswordEncoder passwordEncoder;\n-\t\n-\t@Inject\n-\tprivate EmailService emailService;\n-\t\n-\t@Inject\n-\tprivate EmailUtils emailUtils;\n-\t\n-\t@Inject\n-\tprivate CustomerFacade customerFacade;\n-\t\n-\t\n-\t/**\n-\t * Customer details\n-\t * @param model\n-\t * @param request\n-\t * @param response\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/customer.html\", method=RequestMethod.GET)\n-\tpublic String displayCustomer(Long id, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\t\n-\t\t//display menu\n-\t\tthis.setMenu(model, request);\n-\t\t\n-\t\t//get groups\n-\t\tList<Group> groups = new ArrayList<Group>();\n-\t\tList<Group> userGroups = groupService.listGroup(GroupType.CUSTOMER);\n-\t\tfor(Group group : userGroups) {\n-\t\t\tgroups.add(group);\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"groups\",groups);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<Language> languages = languageService.getLanguages();\n-\n-\t\tmodel.addAttribute(\"languages\",languages);\n-\t\t\n-\t\tCustomer customer = null;\n-\t\t\n-\t\t//if request.attribute contains id then get this customer from customerService\n-\t\tif(id!=null && id!=0) {//edit mode\n-\t\t\t\n-\t\t\t//get from DB\n-\t\t\tcustomer = customerService.getById(id);\n-\t\t\tif(customer==null) {\n-\t\t\t\treturn \"redirect:/admin/customers/list.html\";\n-\t\t\t}\n-\t\t\tif(customer.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\treturn \"redirect:/admin/customers/list.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t} else {\n-\t\t\t customer = new Customer();\n-\t\t}\n-\t\t//get list of countries (see merchant controller)\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\t\t\t\t\n-\t\t//get countries\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\t\t\n-\t\t//get list of zones\n-\t\tList<Zone> zones = zoneService.list();\n-\t\t\n-\t\tthis.getCustomerOptions(model, customer, store, language);\n-\n-\t\tmodel.addAttribute(\"zones\", zones);\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\tmodel.addAttribute(\"customer\", customer);\n-\t\treturn \"admin-customer\";\t\n-\t\t\n-\t}\n-\t\n-\tprivate void getCustomerOptions(Model model, Customer customer, MerchantStore store, Language language) throws Exception {\n-\n-\t\tMap<Long,CustomerOption> options = new HashMap<Long,CustomerOption>();\n-\t\t//get options\n-\t\tList<CustomerOptionSet> optionSet = customerOptionSetService.listByStore(store, language);\n-\t\tif(!CollectionUtils.isEmpty(optionSet)) {\n-\t\t\t\n-\t\t\t\n-\t\t\tReadableCustomerOptionPopulator optionPopulator = new ReadableCustomerOptionPopulator();\n-\t\t\t\n-\t\t\tSet<CustomerAttribute> customerAttributes = customer.getAttributes();\n-\t\t\t\n-\t\t\tfor(CustomerOptionSet optSet : optionSet) {\n-\t\t\t\t\n-\t\t\t\tcom.salesmanager.core.model.customer.attribute.CustomerOption custOption = optSet.getCustomerOption();\n-\t\t\t\tif(!custOption.isActive()) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tCustomerOption customerOption = options.get(custOption.getId());\n-\t\t\t\t\n-\t\t\t\toptionPopulator.setOptionSet(optSet);\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\tif(customerOption==null) {\n-\t\t\t\t\tcustomerOption = new CustomerOption();\n-\t\t\t\t\tcustomerOption.setId(custOption.getId());\n-\t\t\t\t\tcustomerOption.setType(custOption.getCustomerOptionType());\n-\t\t\t\t\tcustomerOption.setName(custOption.getDescriptionsSettoList().get(0).getName());\n-\t\t\t\t\t\n-\t\t\t\t} \n-\t\t\t\t\n-\t\t\t\toptionPopulator.populate(custOption, customerOption, store, language);\n-\t\t\t\toptions.put(customerOption.getId(), customerOption);\n-\n-\t\t\t\tif(!CollectionUtils.isEmpty(customerAttributes)) {\n-\t\t\t\t\tfor(CustomerAttribute customerAttribute : customerAttributes) {\n-\t\t\t\t\t\tif(customerAttribute.getCustomerOption().getId().longValue()==customerOption.getId()){\n-\t\t\t\t\t\t\tCustomerOptionValue selectedValue = new CustomerOptionValue();\n-\t\t\t\t\t\t\tcom.salesmanager.core.model.customer.attribute.CustomerOptionValue attributeValue = customerAttribute.getCustomerOptionValue();\n-\t\t\t\t\t\t\tselectedValue.setId(attributeValue.getId());\n-\t\t\t\t\t\t\tCustomerOptionValueDescription optValue = attributeValue.getDescriptionsSettoList().get(0);\n-\t\t\t\t\t\t\tselectedValue.setName(optValue.getName());\n-\t\t\t\t\t\t\tcustomerOption.setDefaultValue(selectedValue);\n-\t\t\t\t\t\t\tif(customerOption.getType().equalsIgnoreCase(CustomerOptionType.Text.name())) {\n-\t\t\t\t\t\t\t\tselectedValue.setName(customerAttribute.getTextValue());\n-\t\t\t\t\t\t\t} \n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t\n-\t\tmodel.addAttribute(\"options\", options.values());\n-\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/save.html\", method=RequestMethod.POST)\n-\tpublic String saveCustomer(@Valid @ModelAttribute(\"customer\") Customer customer, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception{\n-\t\n-\t\tthis.setMenu(model, request);\n-\t\t\n-\t\tString email_regEx = \"\\\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\\\\b\";\n-\t\tPattern pattern = Pattern.compile(email_regEx);\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tList<Language> languages = languageService.getLanguages();\n-\t\t\n-\t\tmodel.addAttribute(\"languages\",languages);\n-\t\t\n-\t\t//get groups\n-\t\tList<Group> groups = new ArrayList<Group>();\n-\t\tList<Group> userGroups = groupService.listGroup(GroupType.CUSTOMER);\n-\t\tfor(Group group : userGroups) {\n-\t\t\tgroups.add(group);\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"groups\",groups);\n-\t\t\n-\t\tthis.getCustomerOptions(model, customer, store, language);\n-\t\t\n-\t\t//get countries\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\n-\t\t\n-\t\tif(!StringUtils.isBlank(customer.getEmailAddress() ) ){\n-\t\t\t java.util.regex.Matcher matcher = pattern.matcher(customer.getEmailAddress());\n-\t\t\t \n-\t\t\t if(!matcher.find()) {\n-\t\t\t\tObjectError error = new ObjectError(\"customerEmailAddress\",messages.getMessage(\"Email.customer.EmailAddress\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t }\n-\t\t}else{\n-\t\t\tObjectError error = new ObjectError(\"customerEmailAddress\",messages.getMessage(\"NotEmpty.customer.EmailAddress\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\n-\t\t \n-\t\tif( StringUtils.isBlank(customer.getBilling().getFirstName() ) ){\n-\t\t\t ObjectError error = new ObjectError(\"billingFirstName\", messages.getMessage(\"NotEmpty.customer.billingFirstName\", locale));\n-\t\t\t result.addError(error);\n-\t\t}\n-\t\t\n-\t\tif( StringUtils.isBlank(customer.getBilling().getLastName() ) ){\n-\t\t\t ObjectError error = new ObjectError(\"billingLastName\", messages.getMessage(\"NotEmpty.customer.billingLastName\", locale));\n-\t\t\t result.addError(error);\n-\t\t}\n-\t\t\n-\t\tif( StringUtils.isBlank(customer.getBilling().getAddress() ) ){\n-\t\t\t ObjectError error = new ObjectError(\"billingAddress\", messages.getMessage(\"NotEmpty.customer.billingStreetAddress\", locale));\n-\t\t\t result.addError(error);\n-\t\t}\n-\t\t \n-\t\tif( StringUtils.isBlank(customer.getBilling().getCity() ) ){\n-\t\t\t ObjectError error = new ObjectError(\"billingCity\",messages.getMessage(\"NotEmpty.customer.billingCity\", locale));\n-\t\t\t result.addError(error);\n-\t\t}\n-\t\t \n-\t\tif( customer.getShowBillingStateList().equalsIgnoreCase(\"yes\" ) && customer.getBilling().getZone().getCode() == null ){\n-\t\t\t ObjectError error = new ObjectError(\"billingState\",messages.getMessage(\"NotEmpty.customer.billingState\", locale));\n-\t\t\t result.addError(error);\n-\t\t\t \n-\t\t}else if( customer.getShowBillingStateList().equalsIgnoreCase(\"no\" ) && customer.getBilling().getState() == null ){\n-\t\t\t\t ObjectError error = new ObjectError(\"billingState\",messages.getMessage(\"NotEmpty.customer.billingState\", locale));\n-\t\t\t\t result.addError(error);\n-\t\t\t\n-\t\t}\n-\t\t \n-\t\tif( StringUtils.isBlank(customer.getBilling().getPostalCode() ) ){\n-\t\t\t ObjectError error = new ObjectError(\"billingPostalCode\", messages.getMessage(\"NotEmpty.customer.billingPostCode\", locale));\n-\t\t\t result.addError(error);\n-\t\t}\n-\t\t\n-\t\t//check if error from the @valid\n-\t\tif (result.hasErrors()) {\n-\t\t\tmodel.addAttribute(\"countries\", countries);\n-\t\t\treturn \"admin-customer\";\n-\t\t}\n-\t\t\t\t\n-\t\tCustomer newCustomer = new Customer();\n-\n-\t\tif( customer.getId()!=null && customer.getId().longValue()>0 ) {\n-\t\t\tnewCustomer = customerService.getById( customer.getId() );\n-\t\t\t\n-\t\t\tif(newCustomer==null) {\n-\t\t\t\treturn \"redirect:/admin/customers/list.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(newCustomer.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\treturn \"redirect:/admin/customers/list.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\t\n-\t\t}else{\n-\t\t\t//  new customer set marchant_Id\n-\t\t\tMerchantStore merchantStore = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\tnewCustomer.setMerchantStore(merchantStore);\n-\t\t}\n-\t\t\n-\t\tList<Group> submitedGroups = customer.getGroups();\n-\t\tSet<Integer> ids = new HashSet<Integer>();\n-\t\tfor(Group group : submitedGroups) {\n-\t\t\tids.add(Integer.parseInt(group.getGroupName()));\n-\t\t}\n-\t\t\n-\t\tList<Group> newGroups = groupService.listGroupByIds(ids);\n-\t\tnewCustomer.setGroups(newGroups);\n-\t\t\n-\n-\t\tnewCustomer.setEmailAddress(customer.getEmailAddress() );\t\t\n-\t\t\n-\t\t//get Customer country/zone \t\t\n-\t\tCountry deliveryCountry = countryService.getByCode( customer.getDelivery().getCountry().getIsoCode()); \n-\t\tCountry billingCountry  = countryService.getByCode( customer.getBilling().getCountry().getIsoCode()) ;\n-\n-\t\tZone deliveryZone = customer.getDelivery().getZone();\n-\t\tZone billingZone  = customer.getBilling().getZone();\n-\t\t\n-\n-\t\t\n-\t\tif (\"yes\".equalsIgnoreCase(customer.getShowDeliveryStateList())) {\n-\t\t\tif(customer.getDelivery().getZone()!=null) {\n-\t\t\t\tdeliveryZone = zoneService.getByCode(customer.getDelivery().getZone().getCode());\n-\t\t\t\tcustomer.getDelivery().setState( null );\n-\t\t\t}\n-\t\t\t\n-\t\t}else if (\"no\".equalsIgnoreCase(customer.getShowDeliveryStateList())){\n-\t\t\tif(customer.getDelivery().getState()!=null) {\n-\t\t\t\tdeliveryZone = null ;\n-\t\t\t\tcustomer.getDelivery().setState( customer.getDelivery().getState() );\n-\t\t\t}\n-\t\t}\n-\t\n-\t\tif (\"yes\".equalsIgnoreCase(customer.getShowBillingStateList())) {\n-\t\t\tif(customer.getBilling().getZone()!=null) {\n-\t\t\t\tbillingZone = zoneService.getByCode(customer.getBilling().getZone().getCode());\n-\t\t\t\tcustomer.getBilling().setState( null );\n-\t\t\t}\n-\t\t\t\n-\t\t}else if (\"no\".equalsIgnoreCase(customer.getShowBillingStateList())){\n-\t\t\tif(customer.getBilling().getState()!=null) {\n-\t\t\t\tbillingZone = null ;\n-\t\t\t\tcustomer.getBilling().setState( customer.getBilling().getState() );\n-\t\t\t}\n-\t\t}\n-\t\t\t\t\n-\n-\t\t\n-\t\tnewCustomer.setDefaultLanguage(customer.getDefaultLanguage() );\n-\t\t\n-\t\tcustomer.getDelivery().setZone(  deliveryZone);\n-\t\tcustomer.getDelivery().setCountry(deliveryCountry );\n-\t\tnewCustomer.setDelivery( customer.getDelivery() );\n-\t\t\n-\t\tcustomer.getBilling().setZone(  billingZone);\n-\t\tcustomer.getBilling().setCountry(billingCountry );\n-\t\tnewCustomer.setBilling( customer.getBilling()  );\n-\t\t\n-\t\tcustomerService.saveOrUpdate(newCustomer);\n-\t\t\n-\t\tmodel.addAttribute(\"customer\", newCustomer);\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\n-\t\treturn \"admin-customer\";\n-\t\t\n-\t}\n-\t\n-\t/**\n-\t * Deserves shop and admin\n-\t * @param request\n-\t * @param locale\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value={\"/admin/customers/attributes/save.html\"}, method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> saveCustomerAttributes(HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t//1=1&2=on&3=eeee&4=on&customer=1\n-\n-\t\t@SuppressWarnings(\"rawtypes\")\n-\t\tEnumeration parameterNames = request.getParameterNames();\n-\t\t\n-\t\tCustomer customer = null;\n-\t\t\n-\t\twhile(parameterNames.hasMoreElements()) {\n-\n-\t\t\tString parameterName = (String)parameterNames.nextElement();\n-\t\t\tString parameterValue = request.getParameter(parameterName);\n-\t\t\tif(CUSTOMER_ID_PARAMETER.equals(parameterName)) {\n-\t\t\t\tcustomer = customerService.getById(new Long(parameterValue));\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tif(customer==null) {\n-\t\t\tLOGGER.error(\"Customer id [customer] is not defined in the parameters\");\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\t\t\n-\t\tif(customer.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\tLOGGER.error(\"Customer id does not belong to current store\");\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\t\t\n-\t\tList<CustomerAttribute> customerAttributes = customerAttributeService.getByCustomer(store, customer);\n-\t\tMap<Long,CustomerAttribute> customerAttributesMap = new HashMap<Long,CustomerAttribute>();\n-\t\t\n-\t\tfor(CustomerAttribute attr : customerAttributes) {\n-\t\t\tcustomerAttributesMap.put(attr.getCustomerOption().getId(), attr);\n-\t\t}\n-\n-\t\tparameterNames = request.getParameterNames();\n-\t\t\n-\t\twhile(parameterNames.hasMoreElements()) {\n-\t\t\t\n-\t\t\tString parameterName = (String)parameterNames.nextElement();\n-\t\t\tString parameterValue = request.getParameter(parameterName);\n-\t\t\ttry {\n-\t\t\t\t\n-\t\t\t\tString[] parameterKey = parameterName.split(\"-\");\n-\t\t\t\tcom.salesmanager.core.model.customer.attribute.CustomerOption customerOption = null;\n-\t\t\t\tcom.salesmanager.core.model.customer.attribute.CustomerOptionValue customerOptionValue = null;\n-\n-\t\t\t\t\n-\t\t\t\tif(CUSTOMER_ID_PARAMETER.equals(parameterName)) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\t\tif(parameterKey.length>1) {\n-\t\t\t\t\t\t//parse key - value\n-\t\t\t\t\t\tString key = parameterKey[0];\n-\t\t\t\t\t\tString value = parameterKey[1];\n-\t\t\t\t\t\t//should be on\n-\t\t\t\t\t\tcustomerOption = customerOptionService.getById(new Long(key));\n-\t\t\t\t\t\tcustomerOptionValue = customerOptionValueService.getById(new Long(value));\n-\t\t\t\t\t\t\n-\n-\t\t\t\t\t\t\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcustomerOption = customerOptionService.getById(new Long(parameterName));\n-\t\t\t\t\t\tcustomerOptionValue = customerOptionValueService.getById(new Long(parameterValue));\n-\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t//get the attribute\n-\t\t\t\t\t//CustomerAttribute attribute = customerAttributeService.getByCustomerOptionId(store, customer.getId(), customerOption.getId());\n-\t\t\t\t\tCustomerAttribute attribute = customerAttributesMap.get(customerOption.getId());\n-\t\t\t\t\tif(attribute==null) {\n-\t\t\t\t\t\tattribute = new CustomerAttribute();\n-\t\t\t\t\t\tattribute.setCustomer(customer);\n-\t\t\t\t\t\tattribute.setCustomerOption(customerOption);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcustomerAttributes.remove(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\tif(customerOption.getCustomerOptionType().equals(CustomerOptionType.Text.name())) {\n-\t\t\t\t\t\tif(!StringUtils.isBlank(parameterValue)) {\n-\t\t\t\t\t\t\tattribute.setCustomerOptionValue(customerOptionValue);\n-\t\t\t\t\t\t\tattribute.setTextValue(parameterValue);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tattribute.setTextValue(null);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tattribute.setCustomerOptionValue(customerOptionValue);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\tif(attribute.getId()!=null && attribute.getId().longValue()>0) {\n-\t\t\t\t\t\tif(attribute.getCustomerOptionValue()==null){\n-\t\t\t\t\t\t\tcustomerAttributeService.delete(attribute);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tcustomerAttributeService.update(attribute);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tcustomerAttributeService.save(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\n-\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"Cannot get parameter information \" + parameterName,e);\n-\t\t\t}\n-\t\t\t\n-\t\t}\n-\t\t\n-\t\t//and now the remaining to be removed\n-\t\tfor(CustomerAttribute attr : customerAttributes) {\n-\t\t\tcustomerAttributeService.delete(attr);\n-\t\t}\n-\t\t\n-\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\n-\t}\n-\n-\n-\t\n-\t/**\n-\t * List of customers\n-\t * @param model\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@RequestMapping(value=\"/admin/customers/list.html\", method=RequestMethod.GET)\n-\tpublic String displayCustomers(Model model,HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\n-\t\treturn \"admin-customers\";\n-\t\t\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@RequestMapping(value=\"/admin/customers/page.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tResponseEntity<String>  pageCustomers(HttpServletRequest request,HttpServletResponse response) {\n-\n-\n-\t\tAjaxPageableResponse resp = new AjaxPageableResponse();\n-\t\t\n-\t\t//Language language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\t\n-\t\t\t//Map<String,Country> countriesMap = countryService.getCountriesMap(language);\n-\t\t\t\n-\t\t\t\n-\t\t\tint startRow = Integer.parseInt(request.getParameter(\"_startRow\"));\n-\t\t\tint endRow = Integer.parseInt(request.getParameter(\"_endRow\"));\n-\t\t\tString\temail = request.getParameter(\"email\");\n-\t\t\tString name = request.getParameter(\"name\");\n-\t\t\tString firstName = request.getParameter(\"firstName\");\n-\t\t\tString lastName = request.getParameter(\"lastName\");\n-\t\t\tString\tcountry = request.getParameter(\"country\");\n-\t\t\t\n-\t\t\t\n-\t\t\tCustomerCriteria criteria = new CustomerCriteria();\n-\t\t\tcriteria.setStartIndex(startRow);\n-\t\t\tcriteria.setMaxCount(endRow);\n-\t\t\t\n-\t\t\tif(!StringUtils.isBlank(email)) {\n-\t\t\t\tcriteria.setEmail(email);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!StringUtils.isBlank(name)) {\n-\t\t\t\tcriteria.setName(name);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!StringUtils.isBlank(country)) {\n-\t\t\t\tcriteria.setCountry(country);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!StringUtils.isBlank(firstName)) {\n-\t\t\t\tcriteria.setFirstName(firstName);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!StringUtils.isBlank(lastName)) {\n-\t\t\t\tcriteria.setLastName(lastName);\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\tCustomerList customerList = customerService.getListByStore(store,criteria);\n-\t\t\t\n-\t\t\tif(customerList.getCustomers()!=null) {\n-\t\t\t\n-\t\t\t\tfor(Customer customer : customerList.getCustomers()) {\n-\t\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\tentry.put(\"id\", customer.getId());\n-\t\t\t\t\tentry.put(\"firstName\", customer.getBilling().getFirstName());\n-\t\t\t\t\tentry.put(\"lastName\", customer.getBilling().getLastName());\n-\t\t\t\t\tentry.put(\"email\", customer.getEmailAddress());\n-\t\t\t\t\tentry.put(\"country\", customer.getBilling().getCountry().getIsoCode());\n-\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging orders\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/resetPassword.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tResponseEntity<String> resetPassword(HttpServletRequest request,HttpServletResponse response) {\n-\t\t\n-\t\tString customerId = request.getParameter(\"customerId\");\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\t\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(customerId);\n-\t\t\t\n-\t\t\tCustomer customer = customerService.getById(id);\n-\t\t\t\n-\t\t\tif(customer==null) {\n-\t\t\t\tresp.setErrorString(\"Customer does not exist\");\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(customer.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setErrorString(\"Invalid customer id\");\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tLanguage userLanguage = customer.getDefaultLanguage();\n-\t\t\t\n-\t\t\tcustomerFacade.resetPassword(customer, store, userLanguage);\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"An exception occured while changing password\",e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/setCredentials.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tResponseEntity<String> setCredentials(HttpServletRequest request,HttpServletResponse response) {\n-\t\t\n-\t\tString customerId = request.getParameter(\"customerId\");\n-\t\tString userName = request.getParameter(\"userName\");\n-\t\tString password = request.getParameter(\"password\");\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\t\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(customerId);\n-\t\t\t\n-\t\t\tCustomer customer = customerService.getById(id);\n-\t\t\t\n-\t\t\tif(customer==null) {\n-\t\t\t\tresp.setErrorString(\"Customer does not exist\");\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(customer.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setErrorString(\"Invalid customer id\");\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(StringUtils.isBlank(userName) || StringUtils.isBlank(password)) {\n-\t\t\t\tresp.setErrorString(\"Invalid username or password\");\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tLanguage userLanguage = customer.getDefaultLanguage();\n-\t\t\t\n-\t\t\tLocale customerLocale = LocaleUtils.getLocale(userLanguage);\n-\n-\t\t\tString encodedPassword = passwordEncoder.encode(password);\n-\t\t\t\n-\t\t\tcustomer.setPassword(encodedPassword);\n-\t\t\tcustomer.setNick(userName);\n-\t\t\t\n-\t\t\tcustomerService.saveOrUpdate(customer);\n-\t\t\t\n-\t\t\t//send email\n-\t\t\t\n-/*\t\t\ttry {\n-\n-\t\t\t\t//creation of a user, send an email\n-\t\t\t\tString[] storeEmail = {store.getStoreEmailAddress()};\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\tMap<String, String> templateTokens = emailUtils.createEmailObjectsMap(request.getContextPath(), store, messages, customerLocale);\n-\t\t\t\ttemplateTokens.put(EmailConstants.LABEL_HI, messages.getMessage(\"label.generic.hi\", customerLocale));\n-\t\t        templateTokens.put(EmailConstants.EMAIL_CUSTOMER_FIRSTNAME, customer.getBilling().getFirstName());\n-\t\t        templateTokens.put(EmailConstants.EMAIL_CUSTOMER_LASTNAME, customer.getBilling().getLastName());\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_RESET_PASSWORD_TXT, messages.getMessage(\"email.customer.resetpassword.text\", customerLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_CONTACT_OWNER, messages.getMessage(\"email.contactowner\", storeEmail, customerLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_PASSWORD_LABEL, messages.getMessage(\"label.generic.password\",customerLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_CUSTOMER_PASSWORD, password);\n-\n-\n-\t\t\t\tEmail email = new Email();\n-\t\t\t\temail.setFrom(store.getStorename());\n-\t\t\t\temail.setFromEmail(store.getStoreEmailAddress());\n-\t\t\t\temail.setSubject(messages.getMessage(\"label.generic.changepassword\",customerLocale));\n-\t\t\t\temail.setTo(customer.getEmailAddress());\n-\t\t\t\temail.setTemplateName(RESET_PASSWORD_TPL);\n-\t\t\t\temail.setTemplateTokens(templateTokens);\n-\t\n-\t\n-\t\t\t\t\n-\t\t\t\temailService.sendHtmlEmail(store, email);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\t\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"Cannot send email to user\",e);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t}*/\n-\t\t\t\n-\t\t\t\n-\t\t\t\n-\t\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"An exception occured while changing password\",e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"customer\", \"customer\");\n-\t\tactiveMenus.put(\"customer-list\", \"customer-list\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"customer\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\n-\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\t\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/customers/CustomerOptionsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 337,
          "patch": "@@ -1,337 +0,0 @@\n-package com.salesmanager.shop.admin.controller.customers;\n-\n-import com.salesmanager.core.business.services.customer.attribute.CustomerOptionService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.customer.attribute.CustomerOption;\n-import com.salesmanager.core.model.customer.attribute.CustomerOptionDescription;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.*;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.*;\n-\n-@Controller\n-public class CustomerOptionsController {\n-\t\n-\t@Inject\n-\tprivate LanguageService languageService;\n-\t\n-\t@Inject\n-\tprivate CustomerOptionService customerOptionService;\n-\t\n-\t@Inject\n-\tprivate LabelUtils messages;\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CustomerOptionsController.class);\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/list.html\", method=RequestMethod.GET)\n-\tpublic String displayOptions(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\treturn ControllerConstants.Tiles.Customer.optionsList;\n-\t\t\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/edit.html\", method=RequestMethod.GET)\n-\tpublic String displayOptionEdit(@RequestParam(\"id\") long id, HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) throws Exception {\n-\t\treturn displayOption(id,request,response,model,locale);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/create.html\", method=RequestMethod.GET)\n-\tpublic String displayOptionCreate(HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) throws Exception {\n-\t\treturn displayOption(null,request,response,model,locale);\n-\t}\n-\t\n-\tprivate String displayOption(Long optionId, HttpServletRequest request, HttpServletResponse response,Model model,Locale locale) throws Exception {\n-\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\n-\t\tSet<CustomerOptionDescription> descriptions = new HashSet<CustomerOptionDescription>();\n-\t\t\n-\t\tCustomerOption option = new CustomerOption();\n-\t\t\n-\t\tif(optionId!=null && optionId!=0) {//edit mode\n-\t\t\t\n-\t\t\t\n-\t\t\toption = customerOptionService.getById(optionId);\n-\t\t\t\n-\t\t\t\n-\t\t\tif(option==null) {\n-\t\t\t\treturn \"redirect:/admin/customers/options/list.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(option.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\treturn \"redirect:/admin/customers/options/list.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\tSet<CustomerOptionDescription> optionDescriptions = option.getDescriptions();\n-\t\t\t\n-\t\t\t\n-\t\t\t\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\n-\t\t\t\tCustomerOptionDescription optionDescription = null;\n-\t\t\t\t\n-\t\t\t\tif(optionDescriptions!=null) {\n-\t\t\t\t\t\n-\t\t\t\t\tfor(CustomerOptionDescription description : optionDescriptions) {\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tString code = description.getLanguage().getCode();\n-\t\t\t\t\t\tif(code.equals(l.getCode())) {\n-\t\t\t\t\t\t\toptionDescription = description;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif(optionDescription==null) {\n-\t\t\t\t\toptionDescription = new CustomerOptionDescription();\n-\t\t\t\t\toptionDescription.setLanguage(l);\n-\t\t\t\t}\n-\t\t\t\tdescriptions.add(optionDescription);\n-\t\t\t}\n-\n-\t\t} else {\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\tCustomerOptionDescription desc = new CustomerOptionDescription();\n-\t\t\t\tdesc.setLanguage(l);\n-\t\t\t\tdescriptions.add(desc);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\n-\t\toption.setDescriptions(descriptions);\n-\t\tmodel.addAttribute(\"option\", option);\n-\t\treturn ControllerConstants.Tiles.Customer.optionDetails;\n-\t\t\n-\t\t\n-\t}\n-\t\t\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/save.html\", method=RequestMethod.POST)\n-\tpublic String saveOption(@Valid @ModelAttribute(\"option\") CustomerOption option, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tCustomerOption dbEntity =\tnull;\t\n-\n-\t\tif(option.getId() != null && option.getId() >0) { //edit entry\n-\t\t\t\n-\t\t\t//get from DB\n-\t\t\tdbEntity = customerOptionService.getById(option.getId());\n-\t\t\t\n-\t\t\tif(dbEntity==null) {\n-\t\t\t\treturn \"redirect:/admin/options/options.html\";\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t//validate if it contains an existing code\n-\t\tCustomerOption byCode = customerOptionService.getByCode(store, option.getCode());\n-\t\tif(byCode!=null && option.getId()==null) {\n-\t\t\tObjectError error = new ObjectError(\"code\",messages.getMessage(\"message.code.exist\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\n-\t\t\t\n-\t\tMap<String,Language> langs = languageService.getLanguagesMap();\n-\t\t\t\n-\n-\t\tList<CustomerOptionDescription> descriptions = option.getDescriptionsList();\n-\t\t\n-\t\tif(descriptions!=null) {\n-\t\t\t\t\n-\t\t\t\tfor(CustomerOptionDescription description : descriptions) {\n-\t\t\t\t\t\n-\t\t\t\t\tif(StringUtils.isBlank(description.getName())) {\n-\t\t\t\t\t\tObjectError error = new ObjectError(\"name\",messages.getMessage(\"message.name.required\", locale));\n-\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\n-\t\t\t\t\t\tString code = description.getLanguage().getCode();\n-\t\t\t\t\t\tLanguage l = langs.get(code);\n-\t\t\t\t\t\tdescription.setLanguage(l);\n-\t\t\t\t\t\tdescription.setCustomerOption(option);\n-\t\t\t\t\t\n-\t\t\t\t\t}\n-\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t}\n-\t\t\t\n-\t\toption.setDescriptions(new HashSet<CustomerOptionDescription>(descriptions));\n-\t\toption.setMerchantStore(store);\n-\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.Customer.optionDetails;\n-\t\t}\n-\t\t\n-\n-\t\t\n-\t\t\n-\t\tcustomerOptionService.saveOrUpdate(option);\n-\n-\n-\t\t\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Customer.optionDetails;\n-\t}\n-\n-\t\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageOptions(HttpServletRequest request, HttpServletResponse response) {\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\t\n-\t\t\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tList<CustomerOption> options = null;\n-\t\t\t\t\t\n-\n-\t\t\t\t\n-\t\t\toptions = customerOptionService.listByStore(store, language);\n-\t\t\t\t\n-\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\n-\t\t\tfor(CustomerOption option : options) {\n-\t\t\t\t\n-\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"id\", option.getId());\n-\t\t\t\t\n-\t\t\t\tCustomerOptionDescription description = option.getDescriptions().iterator().next();\n-\t\t\t\t\n-\t\t\t\tentry.put(\"name\", description.getName());\n-\t\t\t\tentry.put(\"type\", option.getCustomerOptionType());\n-\t\t\t\tentry.put(\"active\", option.isActive());\n-\t\t\t\tentry.put(\"public\", option.isPublicOption());\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\t\n-\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging options\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t\n-\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"customer\", \"customer\");\n-\t\tactiveMenus.put(\"customer-options\", \"customer-options\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"customer\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteOption(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString sid = request.getParameter(\"id\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(sid);\n-\t\t\t\n-\t\t\tCustomerOption entity = customerOptionService.getById(id);\n-\n-\t\t\tif(entity==null || entity.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\t\n-\t\t\t} else {\n-\t\t\t\t\n-\t\t\t\tcustomerOptionService.delete(entity);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting option\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/customers/CustomerOptionsSetController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 368,
          "patch": "@@ -1,368 +0,0 @@\n-package com.salesmanager.shop.admin.controller.customers;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.salesmanager.core.business.services.customer.attribute.CustomerOptionService;\n-import com.salesmanager.core.business.services.customer.attribute.CustomerOptionSetService;\n-import com.salesmanager.core.business.services.customer.attribute.CustomerOptionValueService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.customer.attribute.*;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-@Controller\n-public class CustomerOptionsSetController {\n-\t\n-\t@Inject\n-\tprivate LanguageService languageService;\n-\t\n-\t@Inject\n-\tprivate CustomerOptionSetService customerOptionSetService;\n-\t\n-\t@Inject\n-\tprivate CustomerOptionService customerOptionService;\n-\t\n-\t@Inject\n-\tprivate CustomerOptionValueService customerOptionValueService;\n-\t\n-\t@Inject\n-\tprivate LabelUtils messages;\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CustomerOptionsSetController.class);\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/optionsset/list.html\", method=RequestMethod.GET)\n-\tpublic String displayOptions(Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tLanguage language = languageService.toLanguage(locale);\n-\t\t\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\t\n-\t\t//get options \n-\t\tList<CustomerOption> options = customerOptionService.listByStore(store, language);\n-\t\t\n-\t\t\n-\t\t//get values\n-\t\tList<CustomerOptionValue> optionsValues = customerOptionValueService.listByStore(store, language);\n-\n-\t\t\n-\t\tCustomerOptionSet optionSet = new CustomerOptionSet();\n-\t\t\n-\t\tmodel.addAttribute(\"optionSet\", optionSet);\n-\t\tmodel.addAttribute(\"options\", options);\n-\t\tmodel.addAttribute(\"optionsValues\", optionsValues);\n-\t\treturn ControllerConstants.Tiles.Customer.optionsSet;\n-\t\t\n-\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/optionsset/save.html\", method=RequestMethod.POST)\n-\tpublic String saveOptionSet(@Valid @ModelAttribute(\"optionSet\") CustomerOptionSet optionSet, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tLanguage language = languageService.toLanguage(locale);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\t/** reference objects **/\n-\t\t\n-\t\t//get options \n-\t\tList<CustomerOption> options = customerOptionService.listByStore(store, language);\n-\t\t\n-\t\t\n-\t\t//get values\n-\t\tList<CustomerOptionValue> optionsValues = customerOptionValueService.listByStore(store, language);\n-\n-\n-\t\tmodel.addAttribute(\"options\", options);\n-\t\tmodel.addAttribute(\"optionsValues\", optionsValues);\n-\n-\t\tif(optionSet.getCustomerOption()==null || optionSet.getCustomerOptionValue()==null) {\n-\t\t\tmodel.addAttribute(\"errorMessageAssociation\",messages.getMessage(\"message.optionset.noassociation\", locale));\n-\t\t\tObjectError error = new ObjectError(\"customerOptionValue.id\",messages.getMessage(\"message.optionset.noassociation\", locale));\n-\t\t\tresult.addError(error);\n-\t\t\treturn ControllerConstants.Tiles.Customer.optionsSet;\n-\t\t}\n-\t\t\n-\t\t//see if association already exist\n-\t\tCustomerOption option =\tnull;\t\n-\n-\t\t//get from DB\n-\t\t//option = customerOptionService.getById(optionSet.getPk().getCustomerOption().getId());\n-\t\toption = customerOptionService.getById(optionSet.getCustomerOption().getId());\n-\t\t\t\n-\t\tif(option==null) {\n-\t\t\t\treturn \"redirect:/admin/customers/optionsset/list.html\";\n-\t\t}\n-\n-\t\t//CustomerOptionValue optionValue = customerOptionValueService.getById(optionSet.getPk().getCustomerOptionValue().getId());\n-\t\tCustomerOptionValue optionValue = customerOptionValueService.getById(optionSet.getCustomerOptionValue().getId());\n-\t\t\t\n-\t\tif(optionValue==null) {\n-\t\t\treturn \"redirect:/admin/customers/optionsset/list.html\";\n-\t\t}\n-\t\t\n-\t\t\n-\t\tList<CustomerOptionSet> optionsSet = customerOptionSetService.listByStore(store, language);\n-\t\t\n-\t\tif(optionsSet!=null && optionsSet.size()>0) {\n-\t\t\t\n-\t\t\tfor(CustomerOptionSet optSet : optionsSet) {\n-\t\t\t\t\n-\t\t\t\t//CustomerOption opt = optSet.getPk().getCustomerOption();\n-\t\t\t\tCustomerOption opt = optSet.getCustomerOption();\n-\t\t\t\t//CustomerOptionValue optValue = optSet.getPk().getCustomerOptionValue();\n-\t\t\t\tCustomerOptionValue optValue = optSet.getCustomerOptionValue();\n-\t\t\t\t\n-\t\t\t\t//if(opt.getId().longValue()==optionSet.getPk().getCustomerOption().getId().longValue() \n-\t\t\t\tif(opt.getId().longValue()==optionSet.getCustomerOption().getId().longValue()\n-\t\t\t\t\t\t//&& optValue.getId().longValue() == optionSet.getPk().getCustomerOptionValue().getId().longValue()) {\n-\t\t\t\t\t\t&& optValue.getId().longValue() == optionSet.getCustomerOptionValue().getId().longValue()) {\n-\t\t\t\t\t\tmodel.addAttribute(\"errorMessageAssociation\",messages.getMessage(\"message.optionset.optionassociationexists\", locale));\n-\t\t\t\t\t\tObjectError error = new ObjectError(\"customerOptionValue.id\",messages.getMessage(\"message.optionset.optionassociationexists\", locale));\n-\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.Customer.optionsSet;\n-\t\t}\n-\t\t\n-\t\t\n-\t\t//optionSet.getPk().setCustomerOption(option);\n-\t\toptionSet.setCustomerOption(option);\n-\t\t//optionSet.getPk().setCustomerOptionValue(optionValue);\n-\t\toptionSet.setCustomerOptionValue(optionValue);\n-\t\tcustomerOptionSetService.create(optionSet);\n-\n-\t\t\n-\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Customer.optionsSet;\n-\t}\n-\n-\t\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/optionsset/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String>  pageOptionsSet(HttpServletRequest request, HttpServletResponse response) {\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\t\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t//List<CustomerOption> options = null;\n-\t\t\t\t\n-\t\t\tList<CustomerOptionSet> optionSet = customerOptionSetService.listByStore(store, language);\n-\t\t\t//for(CustomerOption option : options) {\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\t//Set<CustomerOptionSet> optionSet = option.getCustomerOptions();\n-\t\t\t\t\n-\t\t\t\tif(optionSet!=null && optionSet.size()>0) {\n-\t\t\t\t\t\n-\t\t\t\t\tfor(CustomerOptionSet optSet : optionSet) {\n-\t\t\t\t\t\t\n-\t\t\t\t\t\t//CustomerOption customerOption = optSet.getPk().getCustomerOption();\n-\t\t\t\t\t\tCustomerOption customerOption = optSet.getCustomerOption();\n-\t\t\t\t\t\t//CustomerOptionValue customerOptionValue = optSet.getPk().getCustomerOptionValue();\n-\t\t\t\t\t\tCustomerOptionValue customerOptionValue = optSet.getCustomerOptionValue();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tentry.put(\"id\", optSet.getId());\n-\n-\t\t\t\t\t\tCustomerOptionDescription description = customerOption.getDescriptionsSettoList().get(0);\n-\t\t\t\t\t\tCustomerOptionValueDescription valueDescription = customerOptionValue.getDescriptionsSettoList().get(0);\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tentry.put(\"optionCode\", customerOption.getCode());\n-\t\t\t\t\t\tentry.put(\"optionName\", description.getName());\n-\t\t\t\t\t\tentry.put(\"optionValueCode\", customerOptionValue.getCode());\n-\t\t\t\t\t\tentry.put(\"optionValueName\", valueDescription.getName());\n-\t\t\t\t\t\tentry.put(\"order\", customerOptionValue.getSortOrder());\n-\t\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\t\n-\t\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t//}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\t\n-\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging options\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t\n-\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"customer\", \"customer\");\n-\t\tactiveMenus.put(\"customer-options\", \"customer-options\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"customer\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/optionsset/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteOptionSet(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString sid = request.getParameter(\"id\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tLong optionSetId = Long.parseLong(sid);\n-\n-\t\t\t\n-\t\t\tCustomerOptionSet entity = customerOptionSetService.getById(optionSetId);\n-\t\t\t//if(entity==null || entity.getPk().getCustomerOption().getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\tif(entity==null || entity.getCustomerOption().getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\t\n-\t\t\t} else {\n-\t\t\t\t\n-\t\t\t\tcustomerOptionSetService.delete(entity);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting option\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/optionsset/update.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> updateOrder(HttpServletRequest request, HttpServletResponse response) {\n-\t\tString values = request.getParameter(\"_oldValues\");\n-\t\tString order = request.getParameter(\"order\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\ttry {\n-\t\t\t\n-\t\t\t/**\n-\t\t\t * Values\n-\t\t\t */\n-\t\t\tObjectMapper mapper = new ObjectMapper();\n-\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\tMap conf = mapper.readValue(values, Map.class);\n-\t\t\t\n-\t\t\tString sid = (String)conf.get(\"id\");\n-\n-\t\t\tLong optionId = Long.parseLong(sid);\n-\n-\t\t\tCustomerOptionSet entity = customerOptionSetService.getById(optionId);\n-\t\t\t\n-\t\t\t\n-\t\t\tif(entity!=null) {\n-\t\t\t\t\n-\t\t\t\tentity.setSortOrder(Integer.parseInt(order));\n-\t\t\t\tcustomerOptionSetService.update(entity);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\t\n-\t\t\t}\n-\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging shipping countries\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/customers/CustomerOptionsValueController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 345,
          "patch": "@@ -1,345 +0,0 @@\n-package com.salesmanager.shop.admin.controller.customers;\n-\n-import com.salesmanager.core.business.services.customer.attribute.CustomerOptionValueService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.customer.attribute.CustomerOptionValue;\n-import com.salesmanager.core.model.customer.attribute.CustomerOptionValueDescription;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.*;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.*;\n-\n-@Controller\n-public class CustomerOptionsValueController {\n-\t\n-\t@Inject\n-\tLanguageService languageService;\n-\t\n-\n-\t@Inject\n-\tprivate CustomerOptionValueService customerOptionValueService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CustomerOptionsValueController.class);\n-\t\n-\t/**\n-\t * Displays the list of customer options values\n-\t * @param model\n-\t * @param request\n-\t * @param response\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/values/list.html\", method=RequestMethod.GET)\n-\tpublic String displayOptionValues(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\treturn ControllerConstants.Tiles.Customer.optionsValuesList;\n-\t\t\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t/**\n-\t * Display an option value in edit mode\n-\t * @param id\n-\t * @param request\n-\t * @param response\n-\t * @param model\n-\t * @param locale\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/values/edit.html\", method=RequestMethod.GET)\n-\tpublic String displayOptionValueEdit(@RequestParam(\"id\") long id, HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) throws Exception {\n-\t\treturn displayOption(id,request,response,model,locale);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/values/create.html\", method=RequestMethod.GET)\n-\tpublic String displayOptionValueCreate(HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) throws Exception {\n-\t\treturn displayOption(null,request,response,model,locale);\n-\t}\n-\t\n-\tprivate String displayOption(Long id, HttpServletRequest request, HttpServletResponse response,Model model,Locale locale) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\n-\t\tSet<CustomerOptionValueDescription> descriptions = new HashSet<CustomerOptionValueDescription>();\n-\t\tCustomerOptionValue option = new CustomerOptionValue();\n-\t\t\n-\t\tif(id!=null && id!=0) {//edit mode\n-\t\t\t\n-\t\t\t\n-\t\t\toption = customerOptionValueService.getById(id);\n-\t\t\t\n-\t\t\t\n-\t\t\tif(option==null) {\n-\t\t\t\treturn \"redirect:/admin/customers/options/values/list.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(option.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\treturn \"redirect:/admin/customers/options/values/list.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\tSet<CustomerOptionValueDescription> optionDescriptions = option.getDescriptions();\n-\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\n-\t\t\t\tCustomerOptionValueDescription optionDescription = null;\n-\t\t\t\t\n-\t\t\t\tif(optionDescriptions!=null) {\n-\t\t\t\t\tfor(CustomerOptionValueDescription description : optionDescriptions) {\n-\t\t\t\t\t\tString code = description.getLanguage().getCode();\n-\t\t\t\t\t\tif(code.equals(l.getCode())) {\n-\t\t\t\t\t\t\toptionDescription = description;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif(optionDescription==null) {\n-\t\t\t\t\toptionDescription = new CustomerOptionValueDescription();\n-\t\t\t\t\toptionDescription.setLanguage(l);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tdescriptions.add(optionDescription);\n-\t\t\t}\n-\n-\t\t} else {\n-\t\t\t\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\tCustomerOptionValueDescription desc = new CustomerOptionValueDescription();\n-\t\t\t\tdesc.setLanguage(l);\n-\t\t\t\tdescriptions.add(desc);\n-\t\t\t}\n-\t\t\t\n-\t\t\toption.setDescriptions(descriptions);\n-\t\t}\n-\t\t\n-\n-\t\t\n-\t\tmodel.addAttribute(\"optionValue\", option);\n-\t\treturn ControllerConstants.Tiles.Customer.optionsValueDetails;\n-\t\t\n-\t\t\n-\t}\n-\t\t\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/values/save.html\", method=RequestMethod.POST)\n-\tpublic String saveOption(@Valid @ModelAttribute(\"optionValue\") CustomerOptionValue optionValue, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tCustomerOptionValue dbEntity =\tnull;\t\n-\n-\t\tif(optionValue.getId() != null && optionValue.getId() >0) { //edit entry\n-\t\t\t\n-\t\t\t//get from DB\n-\t\t\tdbEntity = customerOptionValueService.getById(optionValue.getId());\n-\t\t\t\n-\t\t\tif(dbEntity==null) {\n-\t\t\t\treturn \"redirect:/admin/customers/options/values/list.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(dbEntity.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\treturn \"redirect:/admin/customers/options/values/list.html\";\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t//validate if it contains an existing code\n-\t\tCustomerOptionValue byCode = customerOptionValueService.getByCode(store, optionValue.getCode());\n-\t\tif(byCode!=null && optionValue.getId()==null) {\n-\t\t\tObjectError error = new ObjectError(\"code\",messages.getMessage(\"message.code.exist\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\n-\t\t\t\n-\t\tMap<String,Language> langs = languageService.getLanguagesMap();\n-\t\t\t\n-\n-\t\tList<CustomerOptionValueDescription> descriptions = optionValue.getDescriptionsList();\n-\t\tif(descriptions!=null && descriptions.size()>0) {\n-\t\t\t\n-\t\t\t\tSet<CustomerOptionValueDescription> descs = new HashSet<CustomerOptionValueDescription>();\n-\t\t\t\t\toptionValue.setDescriptions(descs);\n-\t\t\t\t\tfor(CustomerOptionValueDescription description : descriptions) {\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tif(StringUtils.isBlank(description.getName())) {\n-\t\t\t\t\t\t\tObjectError error = new ObjectError(\"name\",messages.getMessage(\"message.name.required\", locale));\n-\t\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tString code = description.getLanguage().getCode();\n-\t\t\t\t\t\t\tLanguage l = langs.get(code);\n-\t\t\t\t\t\t\tdescription.setLanguage(l);\n-\t\t\t\t\t\t\tdescription.setCustomerOptionValue(optionValue);\n-\t\t\t\t\t\t\tdescs.add(description);\n-\t\t\t\t\t\t}\t\n-\t\t\t\t\t}\n-\n-\t\t} else {\n-\t\t\t\n-\t\t\tObjectError error = new ObjectError(\"name\",messages.getMessage(\"message.name.required\", locale));\n-\t\t\tresult.addError(error);\n-\t\t\t\n-\t\t}\n-\t\t\t\n-\n-\t\toptionValue.setMerchantStore(store);\n-\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.Customer.optionsValueDetails;\n-\t\t}\n-\t\t\n-\n-\t\tcustomerOptionValueService.saveOrUpdate(optionValue);\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Customer.optionsValueDetails;\n-\t}\n-\n-\t\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/values/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageOptions(HttpServletRequest request, HttpServletResponse response) {\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\t\n-\t\t\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tList<CustomerOptionValue> options = null;\n-\t\t\t\t\t\n-\t\n-\t\t\toptions = customerOptionValueService.listByStore(store, language);\n-\n-\t\t\tfor(CustomerOptionValue option : options) {\n-\t\t\t\t\n-\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"id\", option.getId());\n-\t\t\t\tentry.put(\"code\", option.getCode());\n-\t\t\t\tCustomerOptionValueDescription description = option.getDescriptions().iterator().next();\n-\t\t\t\t\n-\t\t\t\tentry.put(\"name\", description.getName());\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\t\n-\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging options\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('CUSTOMER')\")\n-\t@RequestMapping(value=\"/admin/customers/options/values/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteOptionValue(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString sid = request.getParameter(\"id\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(sid);\n-\t\t\t\n-\t\t\tCustomerOptionValue entity = customerOptionValueService.getById(id);\n-\n-\t\t\tif(entity==null || entity.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t} else {\n-\t\t\t\tcustomerOptionValueService.delete(entity);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting option\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"customer\", \"customer\");\n-\t\tactiveMenus.put(\"customer-options\", \"customer-options\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"customer\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/merchant/MerchantStoreController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 487,
          "patch": "@@ -1,487 +0,0 @@\n-package com.salesmanager.shop.admin.controller.merchant;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import com.salesmanager.core.business.modules.email.Email;\n-import com.salesmanager.core.business.services.merchant.MerchantStoreService;\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.reference.currency.CurrencyService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.services.reference.zone.ZoneService;\n-import com.salesmanager.core.business.services.system.EmailService;\n-import com.salesmanager.core.business.services.user.UserService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.country.Country;\n-import com.salesmanager.core.model.reference.currency.Currency;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.reference.zone.Zone;\n-import com.salesmanager.core.model.user.User;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.reference.Size;\n-import com.salesmanager.shop.admin.model.reference.Weight;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.constants.EmailConstants;\n-import com.salesmanager.shop.utils.DateUtil;\n-import com.salesmanager.shop.utils.EmailUtils;\n-import com.salesmanager.shop.utils.FilePathUtils;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import com.salesmanager.shop.utils.LocaleUtils;\n-import com.salesmanager.shop.utils.UserUtils;\n-\n-@Controller\n-public class MerchantStoreController {\n-\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(MerchantStoreController.class);\n-\n-\t@Inject\n-\tprivate MerchantStoreService merchantStoreService;\n-\n-\t@Inject\n-\tprivate CountryService countryService;\n-\n-\t@Inject\n-\tprivate ZoneService zoneService;\n-\n-\t@Inject\n-\tprivate LanguageService languageService;\n-\n-\t@Inject\n-\tprivate CurrencyService currencyService;\n-\n-\t@Inject\n-\tprivate UserService userService;\n-\n-\t@Inject\n-\tprivate LabelUtils messages;\n-\n-\t@Inject\n-\tprivate EmailService emailService;\n-\n-\t@Inject\n-\tprivate EmailUtils emailUtils;\n-\n-\t@Inject\n-\tprivate FilePathUtils filePathUtils;\n-\n-\tprivate final static String NEW_STORE_TMPL = \"email_template_new_store.ftl\";\n-\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/store/list.html\", method = RequestMethod.GET)\n-\tpublic String displayStores(Model model, HttpServletRequest request, HttpServletResponse response, Locale locale)\n-\t\t\tthrows Exception {\n-\n-\t\tsetMenu(model, request);\n-\t\treturn ControllerConstants.Tiles.Store.stores;\n-\t}\n-\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/store/paging.html\", method = RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageStores(HttpServletRequest request, HttpServletResponse response) {\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\ttry {\n-\n-\t\t\tList<MerchantStore> stores = merchantStoreService.findAllStoreCodeNameEmail();\n-\n-\t\t\tfor (MerchantStore store : stores) {\n-\n-\t\t\t\tif (!store.getCode().equals(MerchantStore.DEFAULT_STORE)) {\n-\t\t\t\t\tMap<String, String> entry = new HashMap<String, String>();\n-\t\t\t\t\tentry.put(\"storeId\", String.valueOf(store.getId()));\n-\t\t\t\t\tentry.put(\"code\", store.getCode());\n-\t\t\t\t\tentry.put(\"name\", store.getStorename());\n-\t\t\t\t\tentry.put(\"email\", store.getStoreEmailAddress());\n-\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t}\n-\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\n-\t\tString returnString = resp.toJSONString();\n-\n-\t\tfinal HttpHeaders httpHeaders = new HttpHeaders();\n-\t\thttpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString, httpHeaders, HttpStatus.OK);\n-\t}\n-\n-\t@PreAuthorize(\"hasRole('STORE')\")\n-\t@RequestMapping(value = \"/admin/store/storeCreate.html\", method = RequestMethod.GET)\n-\tpublic String displayMerchantStoreCreate(Model model, HttpServletRequest request, HttpServletResponse response,\n-\t\t\tLocale locale) throws Exception {\n-\n-\t\tsetMenu(model, request);\n-\n-\t\tMerchantStore store = new MerchantStore();\n-\n-\t\tMerchantStore sessionStore = (MerchantStore) request.getAttribute(Constants.ADMIN_STORE);\n-\t\tstore.setCurrency(sessionStore.getCurrency());\n-\t\tstore.setCountry(sessionStore.getCountry());\n-\t\tstore.setZone(sessionStore.getZone());\n-\t\tstore.setStorestateprovince(sessionStore.getStorestateprovince());\n-\t\tstore.setLanguages(sessionStore.getLanguages());\n-\t\tstore.setDomainName(sessionStore.getDomainName());\n-\n-\t\treturn displayMerchantStore(store, model, request, response, locale);\n-\t}\n-\n-\t@PreAuthorize(\"hasRole('STORE')\")\n-\t@RequestMapping(value = \"/admin/store/store.html\", method = RequestMethod.GET)\n-\tpublic String displayMerchantStore(Model model, HttpServletRequest request, HttpServletResponse response,\n-\t\t\tLocale locale) throws Exception {\n-\n-\t\tsetMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore) request.getAttribute(Constants.ADMIN_STORE);\n-\t\treturn displayMerchantStore(store, model, request, response, locale);\n-\t}\n-\n-\t@PreAuthorize(\"hasRole('STORE')\")\n-\t@RequestMapping(value = \"/admin/store/editStore.html\", method = RequestMethod.GET)\n-\tpublic String displayMerchantStore(@ModelAttribute(\"id\") Integer id, Model model, HttpServletRequest request,\n-\t\t\tHttpServletResponse response, Locale locale) throws Exception {\n-\n-\t\tsetMenu(model, request);\n-\t\tMerchantStore store = merchantStoreService.getById(id);\n-\t\treturn displayMerchantStore(store, model, request, response, locale);\n-\t}\n-\n-\tprivate String displayMerchantStore(MerchantStore store, Model model, HttpServletRequest request,\n-\t\t\tHttpServletResponse response, Locale locale) throws Exception {\n-\n-\t\tsetMenu(model, request);\n-\t\tLanguage language = (Language) request.getAttribute(\"LANGUAGE\");\n-\t\tList<Language> languages = languageService.getLanguages();\n-\t\tList<Currency> currencies = currencyService.list();\n-\t\tif (CollectionUtils.isNotEmpty(currencies)) {\n-\t\t\t  Collections.sort(currencies, new Comparator<Currency>() {\n-\t\t\t      @Override\n-\t\t\t      public int compare(final Currency object1, final Currency object2) {\n-\t\t\t          return object1.getName().compareTo(object2.getName());\n-\t\t\t      }\n-\t\t\t  });\n-\t\t\t}\n-\t\tDate dt = store.getInBusinessSince();\n-\t\tif (dt != null) {\n-\t\t\tstore.setDateBusinessSince(DateUtil.formatDate(dt));\n-\t\t} else {\n-\t\t\tstore.setDateBusinessSince(DateUtil.formatDate(new Date()));\n-\t\t}\n-\n-\t\t// get countries\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\n-\t\tList<Weight> weights = new ArrayList<Weight>();\n-\t\tweights.add(new Weight(\"LB\", messages.getMessage(\"label.generic.weightunit.LB\", locale)));\n-\t\tweights.add(new Weight(\"KG\", messages.getMessage(\"label.generic.weightunit.KG\", locale)));\n-\n-\t\tList<Size> sizes = new ArrayList<Size>();\n-\t\tsizes.add(new Size(\"CM\", messages.getMessage(\"label.generic.sizeunit.CM\", locale)));\n-\t\tsizes.add(new Size(\"IN\", messages.getMessage(\"label.generic.sizeunit.IN\", locale)));\n-\n-\t\t// display menu\n-\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\tmodel.addAttribute(\"languages\", languages);\n-\t\tmodel.addAttribute(\"currencies\", currencies);\n-\n-\t\tmodel.addAttribute(\"weights\", weights);\n-\t\tmodel.addAttribute(\"sizes\", sizes);\n-\t\tmodel.addAttribute(\"store\", store);\n-\n-\t\treturn \"admin-store\";\n-\n-\t}\n-\n-\t@PreAuthorize(\"hasRole('STORE')\")\n-\t@RequestMapping(value = \"/admin/store/save.html\", method = RequestMethod.POST)\n-\tpublic String saveMerchantStore(@Valid @ModelAttribute(\"store\") MerchantStore store, BindingResult result,\n-\t\t\tModel model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\t\tsetMenu(model, request);\n-\t\tMerchantStore sessionStore = (MerchantStore) request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tif (store.getId() != null) {\n-\t\t\tif (store.getId().intValue() != sessionStore.getId().intValue()) {\n-\t\t\t\treturn \"redirect:/admin/store/store.html\";\n-\t\t\t}\n-\t\t}\n-\n-\t\tDate date = new Date();\n-\t\tif (!StringUtils.isBlank(store.getDateBusinessSince())) {\n-\t\t\ttry {\n-\t\t\t\tdate = DateUtil.getDate(store.getDateBusinessSince());\n-\t\t\t\tstore.setInBusinessSince(date);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tObjectError error = new ObjectError(\"dateBusinessSince\",\n-\t\t\t\t\t\tmessages.getMessage(\"message.invalid.date\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Currency> currencies = currencyService.list();\n-\n-\t\tLanguage language = (Language) request.getAttribute(\"LANGUAGE\");\n-\t\tList<Language> languages = languageService.getLanguages();\n-\n-\t\t// get countries\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\n-\t\tList<Weight> weights = new ArrayList<Weight>();\n-\t\tweights.add(new Weight(\"LB\", messages.getMessage(\"label.generic.weightunit.LB\", locale)));\n-\t\tweights.add(new Weight(\"KG\", messages.getMessage(\"label.generic.weightunit.KG\", locale)));\n-\n-\t\tList<Size> sizes = new ArrayList<Size>();\n-\t\tsizes.add(new Size(\"CM\", messages.getMessage(\"label.generic.sizeunit.CM\", locale)));\n-\t\tsizes.add(new Size(\"IN\", messages.getMessage(\"label.generic.sizeunit.IN\", locale)));\n-\n-\t\tmodel.addAttribute(\"weights\", weights);\n-\t\tmodel.addAttribute(\"sizes\", sizes);\n-\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\tmodel.addAttribute(\"languages\", languages);\n-\t\tmodel.addAttribute(\"currencies\", currencies);\n-\n-\t\tCountry c = store.getCountry();\n-\t\tList<Zone> zonesList = zoneService.getZones(c, language);\n-\n-\t\tif ((zonesList == null || zonesList.size() == 0) && StringUtils.isBlank(store.getStorestateprovince())) {\n-\n-\t\t\tObjectError error = new ObjectError(\"zone.code\", messages.getMessage(\"merchant.zone.invalid\", locale));\n-\t\t\tresult.addError(error);\n-\n-\t\t}\n-\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn \"admin-store\";\n-\t\t}\n-\n-\t\t// get country\n-\t\tCountry country = store.getCountry();\n-\t\tcountry = countryService.getByCode(country.getIsoCode());\n-\t\tZone zone = store.getZone();\n-\t\tif (zone != null) {\n-\t\t\tzone = zoneService.getByCode(zone.getCode());\n-\t\t}\n-\t\tCurrency currency = store.getCurrency();\n-\t\tcurrency = currencyService.getById(currency.getId());\n-\n-\t\tList<Language> supportedLanguages = store.getLanguages();\n-\t\tList<Language> supportedLanguagesList = new ArrayList<Language>();\n-\t\tMap<String, Language> languagesMap = languageService.getLanguagesMap();\n-\t\tfor (Language lang : supportedLanguages) {\n-\n-\t\t\tLanguage l = languagesMap.get(lang.getCode());\n-\t\t\tif (l != null) {\n-\t\t\t\tsupportedLanguagesList.add(l);\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\tLanguage defaultLanguage = store.getDefaultLanguage();\n-\t\tdefaultLanguage = languageService.getById(defaultLanguage.getId());\n-\t\tif (defaultLanguage != null) {\n-\t\t\tstore.setDefaultLanguage(defaultLanguage);\n-\t\t}\n-\n-\t\tLocale storeLocale = LocaleUtils.getLocale(defaultLanguage);\n-\n-\t\tstore.setStoreTemplate(sessionStore.getStoreTemplate());\n-\t\tstore.setCountry(country);\n-\t\tstore.setZone(zone);\n-\t\tstore.setCurrency(currency);\n-\t\tstore.setDefaultLanguage(defaultLanguage);\n-\t\tstore.setLanguages(supportedLanguagesList);\n-\t\tstore.setLanguages(supportedLanguagesList);\n-\n-\t\tmerchantStoreService.saveOrUpdate(store);\n-\n-\t\tif (!store.getCode().equals(sessionStore.getCode())) {// create store\n-\t\t\t// send email\n-\n-\t\t\ttry {\n-\n-\t\t\t\tMap<String, String> templateTokens = emailUtils.createEmailObjectsMap(request.getContextPath(), store,\n-\t\t\t\t\t\tmessages, storeLocale);\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_NEW_STORE_TEXT,\n-\t\t\t\t\t\tmessages.getMessage(\"email.newstore.text\", storeLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_STORE_NAME,\n-\t\t\t\t\t\tmessages.getMessage(\"email.newstore.name\", new String[] { store.getStorename() }, storeLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_ADMIN_STORE_INFO_LABEL,\n-\t\t\t\t\t\tmessages.getMessage(\"email.newstore.info\", storeLocale));\n-\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_ADMIN_URL_LABEL,\n-\t\t\t\t\t\tmessages.getMessage(\"label.adminurl\", storeLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_ADMIN_URL, filePathUtils.buildAdminUri(store, request));\n-\n-\t\t\t\tEmail email = new Email();\n-\t\t\t\temail.setFrom(store.getStorename());\n-\t\t\t\temail.setFromEmail(store.getStoreEmailAddress());\n-\t\t\t\temail.setSubject(messages.getMessage(\"email.newstore.title\", storeLocale));\n-\t\t\t\temail.setTo(store.getStoreEmailAddress());\n-\t\t\t\temail.setTemplateName(NEW_STORE_TMPL);\n-\t\t\t\temail.setTemplateTokens(templateTokens);\n-\n-\t\t\t\temailService.sendHtmlEmail(store, email);\n-\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"Cannot send email to user\", e);\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\tsessionStore = merchantStoreService.getByCode(sessionStore.getCode());\n-\n-\t\t// update session store\n-\t\trequest.getSession().setAttribute(Constants.ADMIN_STORE, sessionStore);\n-\n-\t\tmodel.addAttribute(\"success\", \"success\");\n-\t\tmodel.addAttribute(\"store\", store);\n-\n-\t\treturn \"admin-store\";\n-\t}\n-\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value = \"/admin/store/checkStoreCode.html\", method = RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> checkStoreCode(HttpServletRequest request, HttpServletResponse response,\n-\t\t\tLocale locale) {\n-\t\tString code = request.getParameter(\"code\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\tfinal HttpHeaders httpHeaders = new HttpHeaders();\n-\t\thttpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\ttry {\n-\n-\t\t\tif (StringUtils.isBlank(code)) {\n-\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\treturn new ResponseEntity<String>(resp.toJSONString(), httpHeaders, HttpStatus.OK);\n-\t\t\t}\n-\n-\t\t\tMerchantStore store = merchantStoreService.getByCode(code);\n-\n-\t\t\tif (store != null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\treturn new ResponseEntity<String>(resp.toJSONString(), httpHeaders, HttpStatus.OK);\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while getting user\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\n-\t\tString returnString = resp.toJSONString();\n-\n-\t\treturn new ResponseEntity<String>(returnString, httpHeaders, HttpStatus.OK);\n-\t}\n-\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/store/remove.html\", method = RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeMerchantStore(HttpServletRequest request, Locale locale)\n-\t\t\tthrows Exception {\n-\n-\t\tString sMerchantStoreId = request.getParameter(\"storeId\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders = new HttpHeaders();\n-\t\thttpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\ttry {\n-\n-\t\t\tInteger storeId = Integer.parseInt(sMerchantStoreId);\n-\t\t\tMerchantStore store = merchantStoreService.getById(storeId);\n-\n-\t\t\tUser user = userService.getByUserName(request.getRemoteUser());\n-\n-\t\t\t/**\n-\t\t\t * In order to remove a Store the logged in ser must be SUPERADMIN\n-\t\t\t */\n-\n-\t\t\t// check if the user removed has group SUPERADMIN\n-\t\t\tboolean isSuperAdmin = false;\n-\t\t\tif (UserUtils.userInGroup(user, Constants.GROUP_SUPERADMIN)) {\n-\t\t\t\tisSuperAdmin = true;\n-\t\t\t}\n-\n-\t\t\tif (!isSuperAdmin) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.security.caanotremovesuperadmin\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString, httpHeaders, HttpStatus.OK);\n-\t\t\t}\n-\n-\t\t\tmerchantStoreService.delete(store);\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product price\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\n-\t\tString returnString = resp.toJSONString();\n-\n-\t\treturn new ResponseEntity<String>(returnString, httpHeaders, HttpStatus.OK);\n-\n-\t}\n-\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\n-\t\t// display menu\n-\t\tMap<String, String> activeMenus = new HashMap<String, String>();\n-\t\tactiveMenus.put(\"store\", \"store\");\n-\t\tactiveMenus.put(\"storeDetails\", \"storeDetails\");\n-\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>) request.getAttribute(\"MENUMAP\");\n-\n-\t\tMenu currentMenu = (Menu) menus.get(\"store\");\n-\t\tmodel.addAttribute(\"currentMenu\", currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\", activeMenus);\n-\t\t//\n-\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/merchant/StoreBrandingController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 208,
          "patch": "@@ -1,208 +0,0 @@\n-package com.salesmanager.shop.admin.controller.merchant;\n-\n-\n-import java.io.InputStream;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import javax.annotation.Resource;\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-import org.springframework.web.multipart.MultipartFile;\n-import com.salesmanager.core.business.services.content.ContentService;\n-import com.salesmanager.core.business.services.merchant.MerchantStoreService;\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.reference.currency.CurrencyService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.services.reference.zone.ZoneService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.content.FileContentType;\n-import com.salesmanager.core.model.content.InputContentFile;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-\n-@Controller\n-public class StoreBrandingController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(StoreBrandingController.class);\n-\t\n-\t\n-\t@Inject\n-\tMerchantStoreService merchantStoreService;\n-\t\n-\t@Inject\n-\tCountryService countryService;\n-\t\n-\t@Inject\n-\tZoneService zoneService;\n-\t\n-\t@Inject\n-\tLanguageService languageService;\n-\t\n-\t@Inject\n-\tCurrencyService currencyService;\n-\t\n-\t@Inject\n-\tprivate ContentService contentService;\n-\t\n-\n-\t@Resource(name=\"templates\")\n-\tList<String> templates;\n-\t\n-\t@PreAuthorize(\"hasRole('STORE')\")\n-\t@RequestMapping(value=\"/admin/store/storeBranding.html\", method=RequestMethod.GET)\n-\tpublic String displayStoreBranding(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t//display templates\n-\t\tmodel.addAttribute(\"templates\", templates);\n-\t\t\n-\t\tmodel.addAttribute(\"store\", store);\n-\t\t\n-\n-\t\t\n-\t\treturn \"admin-store-branding\";\n-\t}\n-\t\n-\t/**\n-\t * https://spring.io/guides/gs/uploading-files/\n-\t * @param contentImages\n-\t * @param result\n-\t * @param model\n-\t * @param request\n-\t * @param response\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('STORE')\")\n-\t@RequestMapping(value=\"/admin/store/saveBranding.html\", method=RequestMethod.POST)\n-\tpublic String saveStoreBranding(@RequestParam(\"file\") MultipartFile file, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tmodel.addAttribute(\"templates\", templates);\n-\t\t\n-\t\t\n-\t\tmodel.addAttribute(\"store\", store);\n-\n-\t\tif(file!=null) {\n-\n-\t\t\tString imageName = file.getOriginalFilename();\n-\t\t\tInputStream inputStream = file.getInputStream();\n-\t\t\tString mimeType = file.getContentType();\n-\t\t\t\n-            InputContentFile cmsContentImage = new InputContentFile();\n-            cmsContentImage.setFileName(imageName);\n-            cmsContentImage.setMimeType(mimeType);\n-            cmsContentImage.setFile( inputStream );\n-            contentService.addLogo(store.getCode(), cmsContentImage);\n-\t\t\t\n-            //Update store\n-            store.setStoreLogo(imageName);\n-            merchantStoreService.update(store);\n-            request.getSession().setAttribute(Constants.ADMIN_STORE, store);\n-\n-\t\t} else {\n-\t\t\tmodel.addAttribute(\"error\",\"error\");\n-\t\t\treturn \"admin-store-branding\";\n-\t\t}\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn \"admin-store-branding\";\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('STORE')\")\n-\t@RequestMapping(value=\"/admin/store/saveTemplate.html\", method=RequestMethod.POST)\n-\tpublic String saveTemplate(@ModelAttribute(value=\"store\") final MerchantStore store, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\n-\t\tMerchantStore sessionstore = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tsessionstore.setStoreTemplate(store.getStoreTemplate());\n-\t\t\n-\t\tmerchantStoreService.saveOrUpdate(sessionstore);\n-\t\t\n-\t\trequest.setAttribute(Constants.ADMIN_STORE, sessionstore);\t\t\n-\t\t\n-\t\t//display templates\n-\t\tmodel.addAttribute(\"templates\", templates);\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\tmodel.addAttribute(\"store\", sessionstore);\n-\n-\t\treturn \"admin-store-branding\";\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('STORE')\")\n-\t@RequestMapping(value=\"/admin/store/removeImage.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeImage(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tcontentService.removeFile(store.getCode(), FileContentType.LOGO, store.getStoreLogo());\n-\t\t\t\n-\t\t\tstore.setStoreLogo(null);\n-\t\t\tmerchantStoreService.update(store);\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"store\", \"store\");\n-\t\tactiveMenus.put(\"storeBranding\", \"storeBranding\");\n-\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"store\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/merchant/StoreLandingController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 238,
          "patch": "@@ -1,238 +0,0 @@\n-package com.salesmanager.shop.admin.controller.merchant;\n-\n-\n-import com.salesmanager.core.business.services.content.ContentService;\n-import com.salesmanager.core.business.services.merchant.MerchantStoreService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.model.content.Content;\n-import com.salesmanager.core.model.content.ContentDescription;\n-import com.salesmanager.core.model.content.ContentType;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.model.merchant.StoreLanding;\n-import com.salesmanager.shop.admin.model.merchant.StoreLandingDescription;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-@Controller\n-public class StoreLandingController {\n-\t\n-\t@Inject\n-\tMerchantStoreService merchantStoreService;\n-\n-\t@Inject\n-\tLanguageService languageService;\n-\t\n-\t@Inject\n-\tContentService contentService;\n-\t\n-\t@PreAuthorize(\"hasRole('STORE')\")\n-\t@RequestMapping(value=\"/admin/store/storeLanding.html\", method=RequestMethod.GET)\n-\tpublic String displayStoreLanding(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\t\t\n-\t\tContent content = contentService.getByCode(\"LANDING_PAGE\", store);\n-\t\tStoreLanding landing = new StoreLanding();\n-\t\t\n-\t\tList<StoreLandingDescription> descriptions = new ArrayList<StoreLandingDescription>();\n-\t\t\n-\t\t\n-\t\tfor(Language l : languages) {\n-\t\t\t\n-\t\t\tStoreLandingDescription landingDescription = null;\n-\t\t\tif(content!=null) {\n-\t\t\t\tfor(ContentDescription desc : content.getDescriptions()) {\n-\t\t\t\t\tif(desc.getLanguage().getCode().equals(l.getCode())) {\n-\t\t\t\t\t\tlandingDescription = new StoreLandingDescription();\n-\t\t\t\t\t\tlandingDescription.setDescription(desc.getMetatagDescription());\n-\t\t\t\t\t\tlandingDescription.setHomePageContent(desc.getDescription());\n-\t\t\t\t\t\tlandingDescription.setKeywords(desc.getMetatagKeywords());\n-\t\t\t\t\t\tlandingDescription.setTitle(desc.getName());//name is a not empty\n-\t\t\t\t\t\tlandingDescription.setLanguage(desc.getLanguage());\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(landingDescription==null) {\n-\t\t\t\tlandingDescription = new StoreLandingDescription();\n-\t\t\t\tlandingDescription.setLanguage(l);\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tdescriptions.add(landingDescription);\n-\t\t}\n-\t\t\n-\t\tlanding.setDescriptions(descriptions);\n-\n-\t\t\n-\t\tmodel.addAttribute(\"store\", store);\n-\t\tmodel.addAttribute(\"storeLanding\", landing);\n-\n-\t\t\n-\t\treturn \"admin-store-landing\";\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('STORE')\")\n-\t@RequestMapping(value=\"/admin/store/saveLanding.html\", method=RequestMethod.POST)\n-\tpublic String saveStoreLanding(@Valid @ModelAttribute(\"storeLanding\") StoreLanding storeLanding, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn \"admin-store-landing\";\n-\t\t}\n-\t\t\n-\t\t//get original store\n-\t\tContent content = contentService.getByCode(\"LANDING_PAGE\", store);\n-\t\t\n-\t\tif(content==null) {\n-\t\t\tcontent = new Content();\n-\t\t\tcontent.setVisible(true);\n-\t\t\tcontent.setContentType(ContentType.SECTION);\n-\t\t\tcontent.setCode(\"LANDING_PAGE\");\n-\t\t\tcontent.setMerchantStore(store);\n-\t\t}\n-\t\t\n-\n-\t\t//List<Language> languages = store.getLanguages();\n-\t\t\t\n-\t\tMap<String,Language> langs = languageService.getLanguagesMap();\n-\t\t\n-\t\t\n-\t\t\n-/*\t\tfor(Language l : languages) {\n-\t\t\t\n-\t\t\tStoreLandingDescription landingDescription = null;\n-\t\t\tfor(ContentDescription desc : content.getDescriptions()) {\n-\t\t\t\t\tif(desc.getLanguage().getCode().equals(l.getCode())) {\n-\t\t\t\t\t\tlandingDescription = new StoreLandingDescription();\n-\t\t\t\t\t\tlandingDescription.setDescription(desc.getMetatagDescription());\n-\t\t\t\t\t\tlandingDescription.setHomePageContent(desc.getDescription());\n-\t\t\t\t\t\tlandingDescription.setKeywords(desc.getMetatagKeywords());\n-\t\t\t\t\t\tlandingDescription.setTitle(desc.getName());//name is a not empty\n-\t\t\t\t\t\tlandingDescription.setLanguage(desc.getLanguage());\n-\t\t\t\t\t}\n-\t\t\t}\n-\t\t\n-\t\t\t\n-\t\t\tif(landingDescription==null) {\n-\t\t\t\tlandingDescription = new StoreLandingDescription();\n-\t\t\t\tlandingDescription.setLanguage(l);\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tdescriptions.add(landingDescription);\n-\t\t}\n-\t\t\n-\t\tlanding.setDescriptions(descriptions);*/\n-\t\t\n-\t\t\n-\t\t\n-\t\t\t\n-\n-\t\tList<StoreLandingDescription> descriptions = storeLanding.getDescriptions();\n-\t\tList<ContentDescription> contentDescriptions = new ArrayList<ContentDescription>();\n-\t\tif(descriptions!=null) {\n-\t\t\t\t\n-\t\t\t\tfor(StoreLandingDescription description : descriptions) {\n-\t\t\t\t\t\n-\t\t\t\t\tString code = description.getLanguage().getCode();\n-\t\t\t\t\tLanguage l = langs.get(code);\n-\t\t\t\t\t\n-\t\t\t\t\tContentDescription contentDescription = null;\n-\t\t\t\t\tif(content.getDescriptions()!=null && content.getDescriptions().size()>0) {\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor(ContentDescription desc : content.getDescriptions()) {\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\tif(desc.getLanguage().getCode().equals(l.getCode())) {\n-\t\t\t\t\t\t\t\tcontentDescription = desc;\n-\t\t\t\t\t\t\t\tdesc.setMetatagDescription(description.getDescription());\n-\t\t\t\t\t\t\t\tdesc.setName(description.getTitle());\n-\t\t\t\t\t\t\t\tdesc.setTitle(description.getTitle());\n-\t\t\t\t\t\t\t\tdesc.setDescription(description.getHomePageContent());\n-\t\t\t\t\t\t\t\tdesc.setMetatagKeywords(description.getKeywords());\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\tif(contentDescription==null) {\n-\t\t\t\t\t\t\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcontentDescription = new ContentDescription();\n-\t\t\t\t\t\tcontentDescription.setContent(content);\n-\t\t\t\t\t\tcontentDescription.setLanguage(l);\n-\t\t\t\t\t\tcontentDescription.setMetatagDescription(description.getDescription());\n-\t\t\t\t\t\tcontentDescription.setName(description.getTitle());\n-\t\t\t\t\t\tcontentDescription.setDescription(description.getHomePageContent());\n-\t\t\t\t\t\tcontentDescription.setMetatagKeywords(description.getKeywords());\n-\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\tcontentDescriptions.add(contentDescription);\n-\n-\n-\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tcontent.setDescriptions(contentDescriptions);\n-\t\t\t\t\n-\t\t\t}\n-\n-\n-\t\t\n-\t\tcontentService.saveOrUpdate(content);\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\n-\t\treturn \"admin-store-landing\";\n-\t}\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"store\", \"store\");\n-\t\tactiveMenus.put(\"storeLanding\", \"storeLanding\");\n-\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"store\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/orders/OrderActionsControler.java",
          "status": "removed",
          "additions": 0,
          "deletions": 601,
          "patch": "@@ -1,601 +0,0 @@\n-package com.salesmanager.shop.admin.controller.orders;\n-\n-import com.salesmanager.core.business.services.catalog.product.PricingService;\n-import com.salesmanager.core.business.services.customer.CustomerService;\n-import com.salesmanager.core.business.services.order.OrderService;\n-import com.salesmanager.core.business.services.payments.PaymentService;\n-import com.salesmanager.core.business.services.payments.TransactionService;\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.reference.zone.ZoneService;\n-import com.salesmanager.core.business.services.system.EmailService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.customer.Customer;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.order.Order;\n-import com.salesmanager.core.model.order.orderstatus.OrderStatusHistory;\n-import com.salesmanager.core.model.payments.Transaction;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.modules.integration.IntegrationException;\n-import com.salesmanager.shop.admin.model.orders.Refund;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.DateUtil;\n-import com.salesmanager.shop.utils.EmailTemplatesUtils;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import com.salesmanager.shop.utils.LocaleUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.io.ByteArrayOutputStream;\n-import java.math.BigDecimal;\n-import java.util.*;\n-\n-/**\n- * Manage order details\n- * @author Carl Samson\n- */\n-@Controller\n-public class OrderActionsControler {\n-\t\n-private static final Logger LOGGER = LoggerFactory.getLogger(OrderActionsControler.class);\n-\t\n-\t@Inject\n-\tprivate LabelUtils messages;\n-\t\n-\t@Inject\n-\tprivate OrderService orderService;\n-\t\n-\t@Inject\n-\tCountryService countryService;\n-\t\n-\t@Inject\n-\tZoneService zoneService;\n-\t\n-\t@Inject\n-\tPaymentService paymentService;\n-\t\n-\t@Inject\n-\tCustomerService customerService;\n-\t\n-\t@Inject\n-\tPricingService pricingService;\n-\t\n-\t@Inject\n-\tTransactionService transactionService;\n-\t\n-\t@Inject\n-\tEmailService emailService;\n-\t\n-\t@Inject\n-\tEmailTemplatesUtils emailTemplatesUtils;\n-\t\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\t@RequestMapping(value=\"/admin/orders/captureOrder.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> captureOrder(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tString sId = request.getParameter(\"id\");\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\ttry {\n-\t\t\tLong id = Long.parseLong(sId);\n-\t\t\t\n-\t\t\tOrder order = orderService.getById(id);\n-\t\t\t\n-\t\t\tif(order==null) {\n-\t\t\t\t\n-\t\t\t\tLOGGER.error(\"Order {0} does not exists\", id);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(order.getMerchant().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\t\n-\t\t\t\tLOGGER.error(\"Merchant store does not have order {0}\",id);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tCustomer customer = customerService.getById(order.getCustomerId());\n-\t\t\t\n-\t\t\tif(customer==null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.notexist.customer\", locale));\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tpaymentService.processCapturePayment(order, customer, store);\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (IntegrationException e) {\n-\t\t\tLOGGER.error(\"Error while processing capture\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(messages.getMessage(e.getMessageCode(),locale));\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while getting order\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\t@RequestMapping(value=\"/admin/orders/refundOrder.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> refundOrder(@RequestBody Refund refund, HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\tBigDecimal submitedAmount = null;\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tOrder order = orderService.getById(refund.getOrderId());\n-\t\t\t\n-\t\t\tif(order==null) {\n-\t\t\t\t\n-\t\t\t\tLOGGER.error(\"Order {0} does not exists\", refund.getOrderId());\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(order.getMerchant().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\t\n-\t\t\t\tLOGGER.error(\"Merchant store does not have order {0}\",refund.getOrderId());\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\n-\t\t\t//parse amount\n-\t\t\ttry {\n-\t\t\t\tsubmitedAmount = new BigDecimal(refund.getAmount());\n-\t\t\t\tif(submitedAmount.doubleValue()==0) {\n-\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.invalid.amount\", locale));\n-\t\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.equals(\"invalid refundAmount \" + refund.getAmount());\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\tBigDecimal orderTotal = order.getTotal();\n-\t\t\t\tif(submitedAmount.doubleValue()>orderTotal.doubleValue()) {\n-\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.invalid.amount\", locale));\n-\t\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif(submitedAmount.doubleValue()<=0) {\n-\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.invalid.amount\", locale));\n-\t\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tCustomer customer = customerService.getById(order.getCustomerId());\n-\t\t\t\t\n-\t\t\t\tif(customer==null) {\n-\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.notexist.customer\", locale));\n-\t\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\n-\t\t\t\tpaymentService.processRefund(order, customer, store, submitedAmount);\n-\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t} catch (IntegrationException e) {\n-\t\t\tLOGGER.error(\"Error while processing refund\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(messages.getMessage(e.getMessageCode(),locale));\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while processing refund\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\t@RequestMapping(value=\"/admin/orders/printInvoice.html\", method=RequestMethod.GET)\n-\tpublic void printInvoice(HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tString sId = request.getParameter(\"id\");\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\tLong id = Long.parseLong(sId);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tOrder order = orderService.getOrder(id, store);\n-\t\t\n-\t\tif(order.getMerchant().getId().intValue()!=store.getId().intValue()) {\n-\t\t\tthrow new Exception(\"Invalid order\");\n-\t\t}\n-\t\t\n-\n-\t\tLanguage lang = store.getDefaultLanguage();\n-\t\t\n-\t\t\n-\n-\t\tByteArrayOutputStream stream  = orderService.generateInvoice(store, order, lang);\n-\t\tStringBuilder attachment = new StringBuilder();\n-\t\t//attachment.append(\"attachment; filename=\");\n-\t\tattachment.append(order.getId());\n-\t\tattachment.append(\".pdf\");\n-\t\t\n-        response.setHeader(\"Content-disposition\", \"attachment;filename=\" + attachment.toString());\n-\n-        //Set the mime type for the response\n-        response.setContentType(\"application/pdf\");\n-\n-\t\t\n-\t\tresponse.getOutputStream().write(stream.toByteArray());\n-\t\t\n-\t\tresponse.flushBuffer();\n-\t\t\t\n-\t\t\t\n-\t\t} catch(Exception e) {\n-\t\t\tLOGGER.error(\"Error while printing a report\",e);\n-\t\t}\n-\t\t\t\n-\t\t\n-\t}\n-\t\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\t@RequestMapping(value=\"/admin/orders/listTransactions.html\", method=RequestMethod.GET)\n-\tpublic @ResponseBody ResponseEntity<String> listTransactions(HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tString sId = request.getParameter(\"id\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tif(sId==null) {\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(sId);\n-\t\t\t\n-\n-\t\t\tOrder dbOrder = orderService.getOrder(id, store);\n-\n-\t\t\tif(dbOrder==null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tif(dbOrder.getMerchant().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tList<Transaction> transactions = transactionService.listTransactions(dbOrder);\n-\t\t\t\n-\t\t\tif(transactions!=null) {\n-\t\t\t\t\n-\t\t\t\tfor(Transaction transaction : transactions) {\n-\t\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\tentry.put(\"transactionId\", transaction.getId());\n-\t\t\t\t\tentry.put(\"transactionDate\", DateUtil.formatLongDate(transaction.getTransactionDate()));\n-\t\t\t\t\tentry.put(\"transactionType\", transaction.getTransactionType().name());\n-\t\t\t\t\tentry.put(\"paymentType\", transaction.getPaymentType().name());\n-\t\t\t\t\tentry.put(\"transactionAmount\", pricingService.getStringAmount(transaction.getAmount(), store));\n-\t\t\t\t\tentry.put(\"transactionDetails\", transaction.getTransactionDetails());\n-\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\n-\t\t} catch(Exception e) {\n-\t\t\tLOGGER.error(\"Cannot get transactions for order id \" + sId, e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\t@RequestMapping(value=\"/admin/orders/sendInvoice.html\", method=RequestMethod.GET)\n-\tpublic @ResponseBody ResponseEntity<String> sendInvoice(HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tString sId = request.getParameter(\"id\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tif(sId==null) {\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(sId);\n-\t\t\t\n-\n-\t\t\tOrder dbOrder = orderService.getOrder(id, store);\n-\n-\t\t\tif(dbOrder==null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tif(dbOrder.getMerchant().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t//get customer\n-\t\t\tCustomer customer = customerService.getById(dbOrder.getCustomerId());\n-\t\t\t\n-\t\t\tif(customer==null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Customer does not exist\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tLocale customerLocale = LocaleUtils.getLocale(customer.getDefaultLanguage());\n-\t\t\t\n-\t\t\temailTemplatesUtils.sendOrderEmail(customer.getEmailAddress(), customer, dbOrder, customerLocale, customer.getDefaultLanguage(), store, request.getContextPath());\n-\t\t\t\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\n-\t\t} catch(Exception e) {\n-\t\t\tLOGGER.error(\"Cannot get transactions for order id \" + sId, e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t\n-\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\t@RequestMapping(value=\"/admin/orders/updateStatus.html\", method=RequestMethod.GET)\n-\tpublic @ResponseBody ResponseEntity<String> updateStatus(HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tString sId = request.getParameter(\"id\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tif(sId==null) {\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(sId);\n-\t\t\t\n-\n-\t\t\tOrder dbOrder = orderService.getById(id);\n-\n-\t\t\tif(dbOrder==null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tif(dbOrder.getMerchant().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t//get customer\n-\t\t\tCustomer customer = customerService.getById(dbOrder.getCustomerId());\n-\t\t\t\n-\t\t\tif(customer==null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Customer does not exist\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tLocale customerLocale = LocaleUtils.getLocale(customer.getDefaultLanguage());\n-\t\t\t\n-\t\t\t\n-\t\t\tSet<OrderStatusHistory> orderStatus = dbOrder.getOrderHistory();\n-\t\t\tOrderStatusHistory lastHistory = null;\n-\t\t\tif(orderStatus!=null) {\n-\t\t\t\tint count = 1;\n-\t\t\t\tfor(OrderStatusHistory history : orderStatus) {\n-\t\t\t\t\tif(count==orderStatus.size()) {\n-\t\t\t\t\t\tlastHistory = history;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t\tcount++;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(lastHistory==null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"No history\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\temailTemplatesUtils.sendUpdateOrderStatusEmail(customer, dbOrder, lastHistory, store, customerLocale, request.getContextPath());\n-\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\n-\t\t} catch(Exception e) {\n-\t\t\tLOGGER.error(\"Cannot get transactions for order id \" + sId, e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(e.getMessage());\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\t@RequestMapping(value=\"/admin/orders/sendDownloadEmail.html\", method=RequestMethod.GET)\n-\tpublic @ResponseBody ResponseEntity<String> sendDownloadEmail(HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tString sId = request.getParameter(\"id\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tif(sId==null) {\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(sId);\n-\t\t\t\n-\n-\t\t\tOrder dbOrder = orderService.getById(id);\n-\n-\t\t\tif(dbOrder==null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tif(dbOrder.getMerchant().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t//get customer\n-\t\t\tCustomer customer = customerService.getById(dbOrder.getCustomerId());\n-\t\t\t\n-\t\t\tif(customer==null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Customer does not exist\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tLocale customerLocale = LocaleUtils.getLocale(customer.getDefaultLanguage());\n-\t\t\t\n-\t\t\t\n-\t\t\temailTemplatesUtils.sendOrderDownloadEmail(customer, dbOrder, store, customerLocale, request.getContextPath());\n-\t\t\t\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\n-\t\t} catch(Exception e) {\n-\t\t\tLOGGER.error(\"Cannot get transactions for order id \" + sId, e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(e.getMessage());\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\n-\t\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/orders/OrderControler.java",
          "status": "removed",
          "additions": 0,
          "deletions": 532,
          "patch": "@@ -1,532 +0,0 @@\n-package com.salesmanager.shop.admin.controller.orders;\n-\n-import com.salesmanager.core.business.modules.email.Email;\n-import com.salesmanager.core.business.services.catalog.product.PricingService;\n-import com.salesmanager.core.business.services.customer.CustomerService;\n-import com.salesmanager.core.business.services.order.OrderService;\n-import com.salesmanager.core.business.services.order.orderproduct.OrderProductDownloadService;\n-import com.salesmanager.core.business.services.order.orderstatushistory.OrderStatusHistoryService;\n-import com.salesmanager.core.business.services.payments.PaymentService;\n-import com.salesmanager.core.business.services.payments.TransactionService;\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.reference.zone.ZoneService;\n-import com.salesmanager.core.business.services.system.EmailService;\n-import com.salesmanager.core.business.utils.CoreConfiguration;\n-import com.salesmanager.core.model.customer.Customer;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.order.Order;\n-import com.salesmanager.core.model.order.OrderTotal;\n-import com.salesmanager.core.model.order.orderproduct.OrderProduct;\n-import com.salesmanager.core.model.order.orderproduct.OrderProductDownload;\n-import com.salesmanager.core.model.order.orderstatus.OrderStatusHistory;\n-import com.salesmanager.core.model.payments.PaymentType;\n-import com.salesmanager.core.model.payments.Transaction;\n-import com.salesmanager.core.model.reference.country.Country;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.reference.zone.Zone;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.constants.EmailConstants;\n-import com.salesmanager.shop.utils.DateUtil;\n-import com.salesmanager.shop.utils.EmailUtils;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import com.salesmanager.shop.utils.LocaleUtils;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.lang3.BooleanUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.*;\n-import java.util.regex.Pattern;\n-\n-/**\n- * Manage order details\n- * @author Carl Samson\n- *\n- */\n-@Controller\n-public class OrderControler {\n-\t\n-private static final Logger LOGGER = LoggerFactory.getLogger(OrderControler.class);\n-\t\n-\t@Inject\n-\tprivate LabelUtils messages;\n-\t\n-\t@Inject\n-\tprivate OrderService orderService;\n-\t\n-\t@Inject\n-\tCountryService countryService;\n-\t\n-\t@Inject\n-\tZoneService zoneService;\n-\t\n-\t@Inject\n-\tPaymentService paymentService;\n-\t\n-\t@Inject\n-\tCustomerService customerService;\n-\t\n-\t@Inject\n-\tPricingService pricingService;\n-\t\n-\t@Inject\n-\tTransactionService transactionService;\n-\t\n-\t@Inject\n-\tEmailService emailService;\n-\t\n-\t@Inject\n-\tprivate EmailUtils emailUtils;\n-\t\n-\t@Inject\n-\tOrderProductDownloadService orderProdctDownloadService;\n-\n-\t@Inject\n-\tprivate OrderStatusHistoryService orderStatusHistoryService;\n-\n-\t@Inject\n-\tprivate CoreConfiguration coreConfiguration;\n-\t\n-\tprivate final static String ORDER_STATUS_TMPL = \"email_template_order_status.ftl\";\n-\n-\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\t@RequestMapping(value=\"/admin/orders/editOrder.html\", method=RequestMethod.GET)\n-\tpublic String displayOrderEdit(@RequestParam(\"id\") long orderId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\treturn displayOrder(orderId,model,request,response);\n-\n-\t}\n-\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\tprivate String displayOrder(Long orderId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t   \n-\t\tcom.salesmanager.shop.admin.model.orders.Order order = new com.salesmanager.shop.admin.model.orders.Order();\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\t\tif(orderId!=null && orderId!=0) {\t\t//edit mode\t\t\n-\t\t\t\n-\t\t\t\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\t\n-\t\t\t\n-\t\t\tSet<OrderProduct> orderProducts = null;\n-\t\t\tSet<OrderTotal> orderTotal = null;\n-\t\t\tSet<OrderStatusHistory> orderHistory = null;\n-\t\t\n-\t\t\tOrder dbOrder = orderService.getById(orderId);\n-\n-\t\t\tif(dbOrder==null) {\n-\t\t\t\treturn \"redirect:/admin/orders/list.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tif(dbOrder.getMerchant().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\treturn \"redirect:/admin/orders/list.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\torder.setId( orderId );\n-\t\t\n-\t\t\tif( dbOrder.getDatePurchased() !=null ){\n-\t\t\t\torder.setDatePurchased(DateUtil.formatDate(dbOrder.getDatePurchased()));\n-\t\t\t}\n-\t\t\t\n-\t\t\tLong customerId = dbOrder.getCustomerId();\n-\t\t\t\n-\t\t\tif(customerId!=null && customerId>0) {\n-\t\t\t\n-\t\t\t\ttry {\n-\t\t\t\t\t\n-\t\t\t\t\tCustomer customer = customerService.getById(customerId);\n-\t\t\t\t\tif(customer!=null) {\n-\t\t\t\t\t\tmodel.addAttribute(\"customer\",customer);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t} catch(Exception e) {\n-\t\t\t\t\tLOGGER.error(\"Error while getting customer for customerId \" + customerId, e);\n-\t\t\t\t}\n-\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\torder.setOrder( dbOrder );\n-\t\t\torder.setBilling( dbOrder.getBilling() );\n-\t\t\torder.setDelivery(dbOrder.getDelivery() );\n-\t\t\t\n-\n-\t\t\torderProducts = dbOrder.getOrderProducts();\n-\t\t\torderTotal = dbOrder.getOrderTotal();\n-\t\t\torderHistory = dbOrder.getOrderHistory();\n-\t\t\t\n-\t\t\t//get capturable\n-\t\t\tif(dbOrder.getPaymentType().name() != PaymentType.MONEYORDER.name()) {\n-\t\t\t\tTransaction capturableTransaction = transactionService.getCapturableTransaction(dbOrder);\n-\t\t\t\tif(capturableTransaction!=null) {\n-\t\t\t\t\tmodel.addAttribute(\"capturableTransaction\",capturableTransaction);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\t//get refundable\n-\t\t\tif(dbOrder.getPaymentType().name() != PaymentType.MONEYORDER.name()) {\n-\t\t\t\tTransaction refundableTransaction = transactionService.getRefundableTransaction(dbOrder);\n-\t\t\t\tif(refundableTransaction!=null) {\n-\t\t\t\t\t\tmodel.addAttribute(\"capturableTransaction\",null);//remove capturable\n-\t\t\t\t\t\tmodel.addAttribute(\"refundableTransaction\",refundableTransaction);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t\n-\t\t\tList<OrderProductDownload> orderProductDownloads = orderProdctDownloadService.getByOrderId(order.getId());\n-\t\t\tif(CollectionUtils.isNotEmpty(orderProductDownloads)) {\n-\t\t\t\tmodel.addAttribute(\"downloads\",orderProductDownloads);\n-\t\t\t}\n-\t\t\t\n-\t\t}\t\n-\t\t\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\tmodel.addAttribute(\"order\",order);\n-\t\treturn  ControllerConstants.Tiles.Order.ordersEdit;\n-\t}\n-\t\n-\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\t@RequestMapping(value=\"/admin/orders/save.html\", method=RequestMethod.POST)\n-\tpublic String saveOrder(@Valid @ModelAttribute(\"order\") com.salesmanager.shop.admin.model.orders.Order entityOrder, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\tboolean statusOrCommentsChanged = false;\n-\t\tOrderStatusHistory orderStatusHistory = new OrderStatusHistory();\n-\t\tString email_regEx = \"\\\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,4}\\\\b\";\n-\t\tPattern pattern = Pattern.compile(email_regEx);\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t//set the id if fails\n-\t\tentityOrder.setId(entityOrder.getOrder().getId());\n-\t\t\n-\t\tmodel.addAttribute(\"order\", entityOrder);\n-\t\t\n-\t\tSet<OrderProduct> orderProducts = new HashSet<OrderProduct>();\n-\t\tSet<OrderTotal> orderTotal = new HashSet<OrderTotal>();\n-\t\tSet<OrderStatusHistory> orderHistory = new HashSet<OrderStatusHistory>();\n-\t\t\n-\t\tDate date = new Date();\n-\t\tif(!StringUtils.isBlank(entityOrder.getDatePurchased() ) ){\n-\t\t\ttry {\n-\t\t\t\tdate = DateUtil.getDate(entityOrder.getDatePurchased());\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tObjectError error = new ObjectError(\"datePurchased\",messages.getMessage(\"message.invalid.date\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t\t\n-\t\t} else{\n-\t\t\tdate = null;\n-\t\t}\n-\t\t \n-\n-\t\tif(!StringUtils.isBlank(entityOrder.getOrder().getCustomerEmailAddress() ) ){\n-\t\t\t java.util.regex.Matcher matcher = pattern.matcher(entityOrder.getOrder().getCustomerEmailAddress());\n-\t\t\t \n-\t\t\t if(!matcher.find()) {\n-\t\t\t\tObjectError error = new ObjectError(\"customerEmailAddress\",messages.getMessage(\"Email.order.customerEmailAddress\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t }\n-\t\t}else{\n-\t\t\tObjectError error = new ObjectError(\"customerEmailAddress\",messages.getMessage(\"NotEmpty.order.customerEmailAddress\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\n-\t\t \n-\t\tif( StringUtils.isBlank(entityOrder.getOrder().getBilling().getFirstName() ) ){\n-\t\t\t ObjectError error = new ObjectError(\"billingFirstName\", messages.getMessage(\"NotEmpty.order.billingFirstName\", locale));\n-\t\t\t result.addError(error);\n-\t\t}\n-\t\t\n-\t\tif( StringUtils.isBlank(entityOrder.getOrder().getBilling().getFirstName() ) ){\n-\t\t\t ObjectError error = new ObjectError(\"billingLastName\", messages.getMessage(\"NotEmpty.order.billingLastName\", locale));\n-\t\t\t result.addError(error);\n-\t\t}\n-\t\t \n-\t\tif( StringUtils.isBlank(entityOrder.getOrder().getBilling().getAddress() ) ){\n-\t\t\t ObjectError error = new ObjectError(\"billingAddress\", messages.getMessage(\"NotEmpty.order.billingStreetAddress\", locale));\n-\t\t\t result.addError(error);\n-\t\t}\n-\t\t \n-\t\tif( StringUtils.isBlank(entityOrder.getOrder().getBilling().getCity() ) ){\n-\t\t\t ObjectError error = new ObjectError(\"billingCity\",messages.getMessage(\"NotEmpty.order.billingCity\", locale));\n-\t\t\t result.addError(error);\n-\t\t}\n-\t\t \n-\t\tif( entityOrder.getOrder().getBilling().getZone()==null){\n-\t\t\tif( StringUtils.isBlank(entityOrder.getOrder().getBilling().getState())){\n-\t\t\t\t ObjectError error = new ObjectError(\"billingState\",messages.getMessage(\"NotEmpty.order.billingState\", locale));\n-\t\t\t\t result.addError(error);\n-\t\t\t}\n-\t\t}\n-\t\t \n-\t\tif( StringUtils.isBlank(entityOrder.getOrder().getBilling().getPostalCode() ) ){\n-\t\t\t ObjectError error = new ObjectError(\"billingPostalCode\", messages.getMessage(\"NotEmpty.order.billingPostCode\", locale));\n-\t\t\t result.addError(error);\n-\t\t}\n-\t\t\n-\t\tcom.salesmanager.core.model.order.Order newOrder = orderService.getById(entityOrder.getOrder().getId() );\n-\t\t\n-\t\t//If there was a status changed by Admin, we notify the customer\n-\t\tif(BooleanUtils.toBoolean(coreConfiguration.getProperty(\"MAIL_SEND_ORDER_UPDATES\"))\n-\t\t\t\t&&  (newOrder.getStatus() != null && !newOrder.getStatus().equals(entityOrder.getOrder().getStatus()))) {\n-\t\t\tstatusOrCommentsChanged = true;\n-\t\t\taddStatusChangedHistory(entityOrder, locale, orderStatusHistory, newOrder);\n-\t\t}\n-\t\t//get capturable\n-\t\tif(newOrder.getPaymentType().name() != PaymentType.MONEYORDER.name()) {\n-\t\t\tTransaction capturableTransaction = transactionService.getCapturableTransaction(newOrder);\n-\t\t\tif(capturableTransaction!=null) {\n-\t\t\t\tmodel.addAttribute(\"capturableTransaction\",capturableTransaction);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t\n-\t\t//get refundable\n-\t\tif(newOrder.getPaymentType().name() != PaymentType.MONEYORDER.name()) {\n-\t\t\tTransaction refundableTransaction = transactionService.getRefundableTransaction(newOrder);\n-\t\t\tif(refundableTransaction!=null) {\n-\t\t\t\t\tmodel.addAttribute(\"capturableTransaction\",null);//remove capturable\n-\t\t\t\t\tmodel.addAttribute(\"refundableTransaction\",refundableTransaction);\n-\t\t\t}\n-\t\t}\n-\t\n-\t\n-\t\tif (result.hasErrors()) {\n-\t\t\t//  somehow we lose data, so reset Order detail info.\n-\t\t\tentityOrder.getOrder().setOrderProducts( orderProducts);\n-\t\t\tentityOrder.getOrder().setOrderTotal(orderTotal);\n-\t\t\tentityOrder.getOrder().setOrderHistory(orderHistory);\n-\t\t\t\n-\t\t\treturn ControllerConstants.Tiles.Order.ordersEdit;\n-\t\t/*\t\"admin-orders-edit\";  */\n-\t\t}\n-\t\t\n-\n-\n-\n-\t\t\n-\t\tCountry deliveryCountry = countryService.getByCode( entityOrder.getOrder().getDelivery().getCountry().getIsoCode()); \n-\t\tCountry billingCountry  = countryService.getByCode( entityOrder.getOrder().getBilling().getCountry().getIsoCode()) ;\n-\t\tZone billingZone = null;\n-\t\tZone deliveryZone = null;\n-\t\tif(entityOrder.getOrder().getBilling().getZone()!=null) {\n-\t\t\tbillingZone = zoneService.getByCode(entityOrder.getOrder().getBilling().getZone().getCode());\n-\t\t}\n-\t\t\n-\t\tif(entityOrder.getOrder().getDelivery().getZone()!=null) {\n-\t\t\tdeliveryZone = zoneService.getByCode(entityOrder.getOrder().getDelivery().getZone().getCode());\n-\t\t}\n-\n-\t\tnewOrder.setCustomerEmailAddress(entityOrder.getOrder().getCustomerEmailAddress() );\n-\t\tnewOrder.setStatus(entityOrder.getOrder().getStatus() );\t\t\n-\t\t\n-\t\tnewOrder.setDatePurchased(date);\n-\t\tnewOrder.setLastModified( new Date() );\n-\t\t\n-\t\tif(!StringUtils.isBlank(entityOrder.getOrderHistoryComment() ) ) {\n-\t\t\torderStatusHistory.setComments( entityOrder.getOrderHistoryComment() );\n-\t\t\torderStatusHistory.setCustomerNotified(1);\n-\t\t\torderStatusHistory.setStatus(entityOrder.getOrder().getStatus());\n-\t\t\torderStatusHistory.setDateAdded(new Date() );\n-\t\t\torderStatusHistory.setOrder(newOrder);\n-\t\t\tnewOrder.getOrderHistory().add( orderStatusHistory );\n-\t\t\tentityOrder.setOrderHistoryComment( \"\" );\n-\t\t\tstatusOrCommentsChanged = true;\n-\t\t}\t\t\n-\t\t\n-\t\tnewOrder.setDelivery( entityOrder.getOrder().getDelivery() );\n-\t\tnewOrder.setBilling( entityOrder.getOrder().getBilling() );\n-\t\tnewOrder.setCustomerAgreement(entityOrder.getOrder().getCustomerAgreement());\n-\t\t\n-\t\tnewOrder.getDelivery().setCountry(deliveryCountry );\n-\t\tnewOrder.getBilling().setCountry(billingCountry );\t\n-\t\t\n-\t\tif(billingZone!=null) {\n-\t\t\tnewOrder.getBilling().setZone(billingZone);\n-\t\t}\n-\t\t\n-\t\tif(deliveryZone!=null) {\n-\t\t\tnewOrder.getDelivery().setZone(deliveryZone);\n-\t\t}\n-\t\t\n-\t\torderService.saveOrUpdate(newOrder);\n-\t\tentityOrder.setOrder(newOrder);\n-\t\tentityOrder.setBilling(newOrder.getBilling());\n-\t\tentityOrder.setDelivery(newOrder.getDelivery());\n-\t\tmodel.addAttribute(\"order\", entityOrder);\n-\t\t\n-\t\tLong customerId = newOrder.getCustomerId();\n-\t\t\n-\t\tif(customerId!=null && customerId>0) {\n-\t\t\n-\t\t\ttry {\n-\t\t\t\t\n-\t\t\t\tCustomer customer = customerService.getById(customerId);\n-\t\t\t\tif(customer!=null) {\n-\t\t\t\t\tmodel.addAttribute(\"customer\",customer);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t} catch(Exception e) {\n-\t\t\t\tLOGGER.error(\"Error while getting customer for customerId \" + customerId, e);\n-\t\t\t}\n-\t\t\n-\t\t}\n-\n-\t\tList<OrderProductDownload> orderProductDownloads = orderProdctDownloadService.getByOrderId(newOrder.getId());\n-\t\tif(CollectionUtils.isNotEmpty(orderProductDownloads)) {\n-\t\t\tmodel.addAttribute(\"downloads\",orderProductDownloads);\n-\t\t}\n-\t\t\n-\t\t\n-\t\t/** \n-\t\t * send email if admin posted orderHistoryComment\n-\t\t * \n-\t\t * **/\n-\t\t\n-\t\tif(statusOrCommentsChanged) {\n-\t\t\n-\t\t\ttry {\n-\t\t\t\t\n-\t\t\t\tCustomer customer = customerService.getById(newOrder.getCustomerId());\n-\t\t\t\tLanguage lang = store.getDefaultLanguage();\n-\t\t\t\tif(customer!=null) {\n-\t\t\t\t\tlang = customer.getDefaultLanguage();\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tLocale customerLocale = LocaleUtils.getLocale(lang);\n-\n-\t\t\t\tStringBuilder customerName = new StringBuilder();\n-\t\t\t\tcustomerName.append(newOrder.getBilling().getFirstName()).append(\" \").append(newOrder.getBilling().getLastName());\n-\t\t\t\t\n-\n-\t\t\t\tMap<String, String> templateTokens = emailUtils.createEmailObjectsMap(request.getContextPath(), store, messages, customerLocale);\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_CUSTOMER_NAME, customerName.toString());\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_TEXT_ORDER_NUMBER, messages.getMessage(\"email.order.confirmation\", new String[]{String.valueOf(newOrder.getId())}, customerLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_TEXT_DATE_ORDERED, messages.getMessage(\"email.order.ordered\", new String[]{entityOrder.getDatePurchased()}, customerLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_TEXT_STATUS_COMMENTS, messages.getMessage(\"email.order.comments\", new String[]{entityOrder.getOrderHistoryComment()}, customerLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_TEXT_DATE_UPDATED, messages.getMessage(\"email.order.updated\", new String[]{DateUtil.formatDate(new Date())}, customerLocale));\n-\n-\n-\t\t\t\tif(BooleanUtils.toBoolean(coreConfiguration.getProperty(\"MAIL_SEND_ORDER_UPDATES\"))) {\n-\t\t\t\t\t//This allows to send every order status update or comments from admin to the customer\n-\t\t\t\t\taddStatusUpdatedInfo(entityOrder, customer, customerLocale, templateTokens);\n-\t\t\t\t}\n-\n-\n-\t\t\t\tEmail email = new Email();\n-\t\t\t\temail.setFrom(store.getStorename());\n-\t\t\t\temail.setFromEmail(store.getStoreEmailAddress());\n-\t\t\t\temail.setSubject(messages.getMessage(\"email.order.status.title\",new String[]{String.valueOf(newOrder.getId())},customerLocale));\n-\t\t\t\temail.setTo(entityOrder.getOrder().getCustomerEmailAddress());\n-\t\t\t\temail.setTemplateName(ORDER_STATUS_TMPL);\n-\t\t\t\temail.setTemplateTokens(templateTokens);\n-\n-\n-\n-\t\t\t\temailService.sendHtmlEmail(store, email);\n-\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"Cannot send email to customer\",e);\n-\t\t\t}\n-\t\t\t\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\n-\t\t\n-\t\treturn  ControllerConstants.Tiles.Order.ordersEdit;\n-\t    /*\t\"admin-orders-edit\";  */\n-\t}\n-\n-\tprivate void addStatusUpdatedInfo(com.salesmanager.shop.admin.model.orders.Order entityOrder, Customer customer, Locale customerLocale, Map<String, String> templateTokens) {\n-\t\tOrderStatusHistory lastHistory = getOrderStatusHistory(entityOrder, customerLocale);\n-\t\tString hi = messages.getMessage(\"label.generic.hi\", customerLocale);\n-\t\tif (StringUtils.isNotEmpty(lastHistory.getComments())) {\n-\t\t\ttemplateTokens.put(EmailConstants.EMAIL_TEXT_STATUS_COMMENTS, messages.getMessage(\"email.order.comments\", new String[]{lastHistory.getComments()}, customerLocale));\n-\t\t}\n-\t\tString[] statusMessageText = {String.valueOf(entityOrder.getOrder().getId()), DateUtil.formatDate(entityOrder.getOrder().getDatePurchased())};\n-\t\tString status = messages.getMessage(\"label.order.\" + entityOrder.getOrder().getStatus().name(), customerLocale, entityOrder.getOrder().getStatus().name());\n-\t\tString[] statusMessage = {DateUtil.formatDate(lastHistory.getDateAdded()), status};\n-\t\tif (customer != null) {\n-\t\t\ttemplateTokens.put(EmailConstants.EMAIL_CUSTOMER_FIRSTNAME, customer.getBilling().getFirstName());\n-\t\t\ttemplateTokens.put(EmailConstants.EMAIL_CUSTOMER_LASTNAME, customer.getBilling().getLastName());\n-\t\t}\n-\t\ttemplateTokens.put(EmailConstants.LABEL_HI, hi);\n-\t\ttemplateTokens.put(EmailConstants.EMAIL_ORDER_STATUS_TEXT, messages.getMessage(\"email.order.statustext\", statusMessageText, customerLocale));\n-\t\ttemplateTokens.put(EmailConstants.EMAIL_ORDER_STATUS, messages.getMessage(\"email.order.status\", statusMessage, customerLocale));\n-\t}\n-\n-\tprivate OrderStatusHistory getOrderStatusHistory(com.salesmanager.shop.admin.model.orders.Order entityOrder, Locale customerLocale) {\n-\t\tOrderStatusHistory lastHistory = null;\n-\t\tList<OrderStatusHistory> lastHistories = orderStatusHistoryService.findByOrder(entityOrder.getOrder());\n-\t\tif(CollectionUtils.isEmpty(lastHistories)) {\n-\t\t\tlastHistory = new OrderStatusHistory();\n-\t\t\tlastHistory.setComments(messages.getMessage(\"label.order.PROCESSING\", customerLocale));\n-\t\t\tlastHistory.setDateAdded(new Date());\n-\t\t} else {\n-\t\t\tlastHistory = lastHistories.get(0);\n-\t\t}\n-\t\treturn lastHistory;\n-\t}\n-\n-\tprivate void addStatusChangedHistory(com.salesmanager.shop.admin.model.orders.Order entityOrder, Locale locale,\n-\t\t\t\t\t\t\t\t\t\t OrderStatusHistory orderStatusHistory, Order newOrder) {\n-\t\torderStatusHistory.setComments( messages.getMessage(\"email.order.status.changed\",\n-\t\t\t\tnew String[] {newOrder.getStatus().name(), entityOrder.getOrder().getStatus().name()}, locale));\n-\t\torderStatusHistory.setCustomerNotified(1);\n-\t\torderStatusHistory.setStatus(entityOrder.getOrder().getStatus());\n-\t\torderStatusHistory.setDateAdded(new Date() );\n-\t\torderStatusHistory.setOrder(newOrder);\n-\t\tnewOrder.getOrderHistory().add(orderStatusHistory);\n-\t}\n-\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"order\", \"order\");\n-\t\tactiveMenus.put(\"order-list\", \"order-list\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"order\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/orders/OrdersController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 183,
          "patch": "@@ -1,183 +0,0 @@\n-package com.salesmanager.shop.admin.controller.orders;\n-\n-import com.fasterxml.jackson.annotation.JsonAutoDetect;\n-import com.salesmanager.core.business.services.order.OrderService;\n-import com.salesmanager.core.business.services.system.ModuleConfigurationService;\n-import com.salesmanager.core.business.utils.ProductPriceUtils;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.common.CriteriaOrderBy;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.order.Order;\n-import com.salesmanager.core.model.order.OrderCriteria;\n-import com.salesmanager.core.model.order.OrderList;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.system.IntegrationModule;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.DateUtil;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-\n-/**\n- * Manage order list\n- * Manage search order\n- * @author csamson \n- *\n- */\n-@Controller\n-@JsonAutoDetect(getterVisibility=com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE)\n-public class OrdersController {\n-\t\n-\t@Inject\n-\tOrderService orderService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\t@Inject\n-\tprivate ProductPriceUtils priceUtil;\n-\t\n-\t@Inject\n-\tprotected ModuleConfigurationService moduleConfigurationService;\n-\t \n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(OrderControler.class);\n-\n-\t\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\t@RequestMapping(value=\"/admin/orders/list.html\", method=RequestMethod.GET)\n-\tpublic String displayOrders(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\n-\t\t//the list of orders is from page method\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Order.orders;\n-\t\t\n-\t\t\n-\t}\n-\n-\n-\t@PreAuthorize(\"hasRole('ORDER')\")\n-\t@SuppressWarnings({ \"unchecked\", \"unused\"})\n-\t@RequestMapping(value=\"/admin/orders/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageOrders(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\t\n-\n-\t\tAjaxPageableResponse resp = new AjaxPageableResponse();\n-\n-\t\ttry {\n-\t\t\t\n-\t\t\tint startRow = Integer.parseInt(request.getParameter(\"_startRow\"));\n-\t\t\tint endRow = Integer.parseInt(request.getParameter(\"_endRow\"));\n-\t\t\tString\tpaymentModule = request.getParameter(\"paymentModule\");\n-\t\t\tString customerName = request.getParameter(\"customer\");\n-\t\t\t\n-\t\t\tOrderCriteria criteria = new OrderCriteria();\n-\t\t\tcriteria.setOrderBy(CriteriaOrderBy.DESC);\n-\t\t\tcriteria.setStartIndex(startRow);\n-\t\t\tcriteria.setMaxCount(endRow);\n-\t\t\tif(!StringUtils.isBlank(paymentModule)) {\n-\t\t\t\tcriteria.setPaymentMethod(paymentModule);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!StringUtils.isBlank(customerName)) {\n-\t\t\t\tcriteria.setCustomerName(customerName);\n-\t\t\t}\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\tList<IntegrationModule> paymentModules = moduleConfigurationService.getIntegrationModules( \"PAYMENT\" );\n-\n-\n-\t\t\tOrderList orderList = orderService.listByStore(store, criteria);\n-\t\t\n-\t\t\tif(orderList.getOrders()!=null) {\t\n-\t\t\t\n-\t\t\t\tfor(Order order : orderList.getOrders()) {\n-\t\t\t\t\t\n-\t\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\tentry.put(\"orderId\", order.getId());\n-\t\t\t\t\tentry.put(\"customer\", order.getBilling().getFirstName() + \" \" + order.getBilling().getLastName());\n-\t\t\t\t\tentry.put(\"amount\", priceUtil.getAdminFormatedAmountWithCurrency(store,order.getTotal()));//todo format total\n-\t\t\t\t\tentry.put(\"date\", DateUtil.formatDate(order.getDatePurchased()));\n-\t\t\t\t\tentry.put(\"status\", order.getStatus().name());\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\tif ( paymentModules!= null && paymentModules.size() > 0 ) \n-\t\t\t\t\t{\t\n-\t\t\t\t\t\tfor ( int index = 0; index < paymentModules.size(); index++ )\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tif ( paymentModules.get(index).getCode().equalsIgnoreCase( order.getPaymentModuleCode() ) )\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t paymentModule = paymentModules.get(index).getCode();\n-\t\t\t\t\t\t\t\t break;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\n-\t\t\t\t\t}\n-\t\n-\t\t\t\t\tentry.put(\"paymentModule\", paymentModule );\n-\t\t\t\t\tresp.addDataEntry(entry);\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\t\n-\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging orders\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"order\", \"order\");\n-\t\tactiveMenus.put(\"order-list\", \"order-list\");\n-\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"order\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/payments/PaymentsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 169,
          "patch": "@@ -1,169 +0,0 @@\n-package com.salesmanager.shop.admin.controller.payments;\n-\n-import com.salesmanager.core.business.modules.integration.IntegrationException;\n-import com.salesmanager.core.business.services.payments.PaymentService;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.payments.TransactionType;\n-import com.salesmanager.core.model.system.IntegrationConfiguration;\n-import com.salesmanager.core.model.system.IntegrationModule;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.*;\n-\n-@Controller\n-public class PaymentsController {\n-\t\n-\t\n-\t@Inject\n-\tprivate PaymentService paymentService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\n-\t\n-\t@RequestMapping(value=\"/admin/payments/paymentMethods.html\", method=RequestMethod.GET)\n-\tpublic String getPaymentMethods(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\t\n-\t\t//set menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t//get payment methods\n-\t\tList<IntegrationModule> modules = paymentService.getPaymentMethods(store);\n-\n-\t\t//get configured payment modules\n-\t\tMap<String,IntegrationConfiguration> configuredModules = paymentService.getPaymentModulesConfigured(store);\n-\t\t\n-\n-\n-\t\tmodel.addAttribute(\"modules\", modules);\n-\t\tmodel.addAttribute(\"configuredModules\", configuredModules);\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Payment.paymentMethods;\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PAYMENT')\")\n-\t@RequestMapping(value=\"/admin/payments/paymentMethod.html\", method=RequestMethod.GET)\n-\tpublic String displayPaymentMethod(@RequestParam(\"code\") String code, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\n-\t\t//get configured shipping modules\n-\t\tIntegrationConfiguration configuration = paymentService.getPaymentConfiguration(code, store);\n-\t\tif(configuration==null) {\n-\t\t\tconfiguration = new IntegrationConfiguration();\n-\t\t\tconfiguration.setEnvironment(com.salesmanager.core.business.constants.Constants.PRODUCTION_ENVIRONMENT);\n-\t\t\t\n-\t\t\tMap<String,String> keys = new HashMap<String,String>();\n-\t\t\tkeys.put(\"transaction\", TransactionType.AUTHORIZECAPTURE.name());\n-\t\t\t\n-\t\t\tconfiguration.setIntegrationKeys(keys);\n-\t\t\t\n-\t\t}\n-\t\t\n-\t\tconfiguration.setModuleCode(code);\n-\t\t\n-\t\tList<String> environments = new ArrayList<String>();\n-\t\tenvironments.add(com.salesmanager.core.business.constants.Constants.TEST_ENVIRONMENT);\n-\t\tenvironments.add(com.salesmanager.core.business.constants.Constants.PRODUCTION_ENVIRONMENT);\n-\t\t\n-\t\tmodel.addAttribute(\"configuration\", configuration);\n-\t\tmodel.addAttribute(\"environments\", environments);\n-\t\treturn ControllerConstants.Tiles.Payment.paymentMethod;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PAYMENT')\")\n-\t@RequestMapping(value=\"/admin/payments/savePaymentMethod.html\", method=RequestMethod.POST)\n-\tpublic String savePaymentMethod(@ModelAttribute(\"configuration\") IntegrationConfiguration configuration, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\n-\t\t\n-\t\tList<String> environments = new ArrayList<String>();\n-\t\tenvironments.add(com.salesmanager.core.business.constants.Constants.TEST_ENVIRONMENT);\n-\t\tenvironments.add(com.salesmanager.core.business.constants.Constants.PRODUCTION_ENVIRONMENT);\n-\n-\t\tmodel.addAttribute(\"environments\", environments);\n-\t\tmodel.addAttribute(\"configuration\", configuration);\n-\n-\t\ttry {\n-\t\t\tpaymentService.savePaymentModuleConfiguration(configuration, store);\n-\t\t} catch (Exception e) {\n-\t\t\tif(e instanceof com.salesmanager.core.business.modules.integration.IntegrationException) {\n-\t\t\t\tif(((IntegrationException)e).getErrorCode()==IntegrationException.ERROR_VALIDATION_SAVE) {\n-\t\t\t\t\t\n-\t\t\t\t\tList<String> errorCodes = ((IntegrationException)e).getErrorFields();\n-\t\t\t\t\tfor(String errorCode : errorCodes) {\n-\t\t\t\t\t\tmodel.addAttribute(errorCode,messages.getMessage(\"message.fielderror\", locale));\n-\t\t\t\t\t}\n-\t\t\t\t\tmodel.addAttribute(\"validationError\",\"validationError\");\n-\t\t\t\t\treturn ControllerConstants.Tiles.Payment.paymentMethod;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new Exception(e);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t\n-\t\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Payment.paymentMethod;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@RequestMapping(value=\"/admin/payments/deletePaymentMethod.html\", method=RequestMethod.POST)\n-\tpublic String deletePaymentMethod(@RequestParam(\"code\") String code, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tpaymentService.removePaymentModuleConfiguration(code, store);\n-\t\t\n-\t\treturn \"redirect:/admin/payments/paymentMethods.html\";\n-\t\t\n-\t}\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"payment\", \"payment\");\n-\t\tactiveMenus.put(\"payment-methods\", \"payment-methods\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"payment\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\t\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/CustomProductGroupsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 466,
          "patch": "@@ -1,466 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.salesmanager.core.business.services.catalog.category.CategoryService;\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.services.catalog.product.relationship.ProductRelationshipService;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.category.Category;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.description.ProductDescription;\n-import com.salesmanager.core.model.catalog.product.relationship.ProductRelationship;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.CategoryUtils;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.FieldError;\n-import org.springframework.web.bind.annotation.*;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.*;\n-\n-\n-@Controller\n-public class CustomProductGroupsController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CustomProductGroupsController.class);\n-\t\n-\t@Inject\n-\tCategoryService categoryService;\n-\t\n-\t@Inject\n-\tProductService productService;\n-\t\n-\t@Inject\n-\tProductRelationshipService productRelationshipService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/groups/list.html\", method=RequestMethod.GET)\n-\tpublic String displayProductGroups(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tProductRelationship group = new ProductRelationship();\n-\t\t\n-\t\t\n-\t\tmodel.addAttribute(\"group\", group);\n-\n-\t\treturn ControllerConstants.Tiles.Product.customGroups;\n-\t\t\n-\t}\n-\t\n-\t\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/groups/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageCustomGroups(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\ttry {\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\n-\t\t\tList<ProductRelationship> relationships = productRelationshipService.getGroups(store);\n-\t\t\t\n-\t\t\tfor(ProductRelationship relationship : relationships) {\n-\t\t\t\t\n-\t\t\t\tif(!\"FEATURED_ITEM\".equals(relationship.getCode())) {//do not add featured items\n-\n-\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\tentry.put(\"code\", relationship.getCode());\n-\t\t\t\t\tentry.put(\"active\", relationship.isActive());\n-\t\n-\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/groups/save.html\", method=RequestMethod.POST)\n-\tpublic String saveCustomProductGroup(@ModelAttribute(\"group\") ProductRelationship group, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\t//check if group already exist\n-\t\t\n-\t\t\n-\t\tif(StringUtils.isBlank(group.getCode())) {\n-\t\t\tFieldError fieldError = new FieldError(\"group\",\"code\",group.getCode(),false,null,null,messages.getMessage(\"message.group.required\",locale));\n-\t\t\tresult.addError(fieldError);\n-\t\t\treturn ControllerConstants.Tiles.Product.customGroups;\n-\t\t}\n-\t\t\n-\t\t//String msg = messages.getMessage(\"message.group.alerady.exists\",locale);\n-\t\t//String[] messages = {msg};\n-\t\t\n-\t\tString[] messages = {\"message.group.alerady.exists\"};\n-\t\t\n-\t\tList<ProductRelationship> groups = productRelationshipService.getGroups(store);\n-\t\tfor(ProductRelationship grp : groups) {\n-\t\t\tif(grp.getCode().equalsIgnoreCase(group.getCode())) {\n-\t\t\t\tString[] args = {group.getCode()};\n-\t\t\t\tFieldError fieldError = new FieldError(\"group\",\"code\",group.getCode(),false,messages,args,null);\n-\t\t\t\tresult.addError(fieldError);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tif(result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.Product.customGroups;\n-\t\t}\n-\n-\t\tgroup.setActive(true);\n-\t\tgroup.setStore(store);\n-\t\t\n-\t\tproductRelationshipService.addGroup(store,group.getCode());\n-\n-\t\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Product.customGroups;\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/groups/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeCustomProductGroup(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString groupCode = request.getParameter(\"code\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\n-\t\ttry {\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\tproductRelationshipService.deleteGroup(store, groupCode);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting a group\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/groups/update.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> activateProductGroup(HttpServletRequest request, HttpServletResponse response) {\n-\t\tString values = request.getParameter(\"_oldValues\");\n-\t\tString active = request.getParameter(\"active\");\n-\t\t\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\ttry {\n-\t\t\t\n-\t\t\tObjectMapper mapper = new ObjectMapper();\n-\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\tMap conf = mapper.readValue(values, Map.class);\n-\t\t\tString groupCode = (String)conf.get(\"code\");\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\t//get groups\n-\t\t\tList<ProductRelationship> groups = productRelationshipService.getGroups(store);\n-\t\t\t\n-\t\t\tfor(ProductRelationship relation : groups) {\n-\t\t\t\tif(relation.getCode().equals(groupCode)) {\n-\t\t\t\t\tif(\"true\".equals(active)) {\n-\t\t\t\t\t\trelation.setActive(true);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\trelation.setActive(false);\n-\t\t\t\t\t}\n-\t\t\t\t\tproductRelationshipService.saveOrUpdate(relation);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while updateing groups\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/group/edit.html\", method=RequestMethod.GET)\n-\tpublic String displayCustomProductGroup(@RequestParam(\"id\") String groupCode, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<Category> categories = categoryService.listByStore(store,language);//for categories\n-\t\tList<com.salesmanager.shop.admin.model.catalog.Category> readableCategories = CategoryUtils.readableCategoryListConverter(categories, language);\n-\t\t\n-\t\tmodel.addAttribute(\"group\", groupCode);\n-\t\tmodel.addAttribute(\"categories\", readableCategories);\n-\t\treturn ControllerConstants.Tiles.Product.customGroupsDetails;\n-\t\t\n-\t}\n-\t\n-\t\n-\t\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/group/details/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageProducts(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString code = request.getParameter(\"code\");\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\n-\t\t\tList<ProductRelationship> relationships = productRelationshipService.getByGroup(store, code, language);\n-\t\t\t\n-\t\t\tfor(ProductRelationship relationship : relationships) {\n-\t\t\t\t\n-\t\t\t\tProduct product = relationship.getRelatedProduct();\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"relationshipId\", relationship.getId());\n-\t\t\t\tentry.put(\"productId\", product.getId());\n-\t\t\t\t\n-\t\t\t\tProductDescription description = product.getDescriptions().iterator().next();\n-\t\t\t\tSet<ProductDescription> descriptions = product.getDescriptions();\n-\t\t\t\tfor(ProductDescription desc : descriptions) {\n-\t\t\t\t\tif(desc.getLanguage().getId().intValue()==language.getId().intValue()) {\n-\t\t\t\t\t\tdescription = desc;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tentry.put(\"name\", description.getName());\n-\t\t\t\tentry.put(\"sku\", product.getSku());\n-\t\t\t\tentry.put(\"available\", product.isAvailable());\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\n-\t}\n-\t\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/group/details/addItem.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> addItem(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString code = request.getParameter(\"code\");\n-\t\tString productId = request.getParameter(\"productId\");\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\tLong lProductId = Long.parseLong(productId);\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tProduct product = productService.getById(lProductId);\n-\t\t\t\n-\t\t\tif(product==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\n-\t\t\tProductRelationship relationship = new ProductRelationship();\n-\t\t\trelationship.setActive(true);\n-\t\t\trelationship.setCode(code);\n-\t\t\trelationship.setStore(store);\n-\t\t\trelationship.setRelatedProduct(product);\n-\t\t\t\n-\t\t\tproductRelationshipService.saveOrUpdate(relationship);\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/group/details/removeItem.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeItem(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString code = request.getParameter(\"code\");\n-\t\tString productId = request.getParameter(\"productId\");\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\tLong lproductId = Long.parseLong(productId);\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tProduct product = productService.getById(lproductId);\n-\t\t\t\n-\t\t\tif(product==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tProductRelationship relationship = null;\n-\t\t\tList<ProductRelationship> relationships = productRelationshipService.getByGroup(store, code);\n-\t\t\t\n-\t\t\tfor(ProductRelationship r : relationships) {\n-\t\t\t\tif(r.getRelatedProduct().getId().longValue()==lproductId.longValue()) {\n-\t\t\t\t\trelationship = r;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(relationship==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(relationship.getStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\n-\t\t\t\n-\t\t\t\n-\t\t\tproductRelationshipService.delete(relationship);\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t}\n-\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-products-group\", \"catalogue-products-group\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/DigitalProductController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 184,
          "patch": "@@ -1,184 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.services.catalog.product.file.DigitalProductService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.file.DigitalProduct;\n-import com.salesmanager.core.model.content.FileContentType;\n-import com.salesmanager.core.model.content.InputContentFile;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.digital.ProductFiles;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.*;\n-import org.springframework.web.multipart.MultipartFile;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.io.ByteArrayInputStream;\n-import java.util.*;\n-\n-@Controller\n-public class DigitalProductController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(DigitalProductController.class);\n-\t\n-\t@Inject\n-\tprivate ProductService productService;\n-\t\n-\t@Inject\n-\tprivate DigitalProductService digitalProductService;\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value={\"/admin/products/digitalProduct.html\"}, method=RequestMethod.GET)\n-\tpublic String getDigitalProduct(@RequestParam(\"id\") long productId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tProduct product = productService.getById(productId);\n-\t\t\n-\t\tif(product==null || product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"product\", product);\n-\n-\t\tDigitalProduct digitalProduct = digitalProductService.getByProduct(store, product);\n-\n-\t\tmodel.addAttribute(\"digitalProduct\", digitalProduct);\n-\t\treturn ControllerConstants.Tiles.Product.digitalProduct;\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/product/saveDigitalProduct.html\", method=RequestMethod.POST)\n-\tpublic String saveFile(@ModelAttribute(value=\"productFiles\") @Valid final ProductFiles productFiles, final BindingResult bindingResult,final Model model, final HttpServletRequest request) throws Exception{\n-\t    \n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tProduct product = productService.getById(productFiles.getProduct().getId());\n-\t\tDigitalProduct digitalProduct = new DigitalProduct();\n-\t\tif(product==null || product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tdigitalProduct.setProduct(product);\n-\t\tmodel.addAttribute(\"product\", product);\n-\t\tmodel.addAttribute(\"digitalProduct\", digitalProduct);\n-\t    \n-\t\tif (bindingResult.hasErrors()) {\n-\t        LOGGER.info( \"Found {} Validation errors\", bindingResult.getErrorCount());\n-\t        return ControllerConstants.Tiles.Product.digitalProduct;\n-        }\n-\n-\t    \n-\t    final List<InputContentFile> contentFilesList=new ArrayList<InputContentFile>();\n-        if(CollectionUtils.isNotEmpty( productFiles.getFile() )){\n-            LOGGER.info(\"Saving {} product files for merchant {}\",productFiles.getFile().size(),store.getId());\n-            for(final MultipartFile multipartFile:productFiles.getFile()){\n-                if(!multipartFile.isEmpty()){\n-                    ByteArrayInputStream inputStream = new ByteArrayInputStream( multipartFile.getBytes() );\n-                    InputContentFile cmsContentImage = new InputContentFile();\n-                    cmsContentImage.setFileName(multipartFile.getOriginalFilename() );\n-                    cmsContentImage.setFileContentType( FileContentType.PRODUCT_DIGITAL );\n-                    cmsContentImage.setFile( inputStream );\n-                    contentFilesList.add( cmsContentImage);\n-                }\n-            }\n-            \n-            if(CollectionUtils.isNotEmpty( contentFilesList )){\n-\n-            \tdigitalProduct.setProductFileName(contentFilesList.get(0).getFileName());\n-            \tdigitalProductService.addProductFile(product, digitalProduct, contentFilesList.get(0));\n-            \t\n-            \t//refresh digital product\n-            \tdigitalProduct = digitalProductService.getByProduct(store, product);\n-   \n-            }\n-        }\n-        \n-        \n-        model.addAttribute(\"success\",\"success\");\n-        return ControllerConstants.Tiles.Product.digitalProduct;\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/product/removeDigitalProduct.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeFile(@RequestParam(\"fileId\") long fileId, HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tDigitalProduct digitalProduct = digitalProductService.getById(fileId);\n-\t\t\t\n-\t\t\t//validate store\n-\t\t\tif(digitalProduct==null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tProduct product = digitalProduct.getProduct();\n-\t\t\tif(product.getMerchantStore().getId().intValue()!= store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tdigitalProductService.delete(digitalProduct);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-products\", \"catalogue-products\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/FeaturedItemsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 275,
          "patch": "@@ -1,275 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.category.CategoryService;\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.services.catalog.product.relationship.ProductRelationshipService;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.category.Category;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.description.ProductDescription;\n-import com.salesmanager.core.model.catalog.product.relationship.ProductRelationship;\n-import com.salesmanager.core.model.catalog.product.relationship.ProductRelationshipType;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.CategoryUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n-\n-@Controller\n-public class FeaturedItemsController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(FeaturedItemsController.class);\n-\t\n-\t@Inject\n-\tCategoryService categoryService;\n-\t\n-\t@Inject\n-\tProductService productService;\n-\t\n-\t@Inject\n-\tProductRelationshipService productRelationshipService;\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/featured/list.html\", method=RequestMethod.GET)\n-\tpublic String displayFeaturedItems(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<Category> categories = categoryService.listByStore(store,language);\n-\t\tList<com.salesmanager.shop.admin.model.catalog.Category> readableCategories = CategoryUtils.readableCategoryListConverter(categories, language);\n-\t\t\n-\t\tmodel.addAttribute(\"categories\", readableCategories);\n-\t\treturn \"admin-catalogue-featured\";\n-\t\t\n-\t}\n-\t\n-\t\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/featured/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageProducts(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\n-\t\t\tList<ProductRelationship> relationships = productRelationshipService.getByType(store, ProductRelationshipType.FEATURED_ITEM, language);\n-\t\t\t\n-\t\t\tfor(ProductRelationship relationship : relationships) {\n-\t\t\t\t\n-\t\t\t\tProduct product = relationship.getRelatedProduct();\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"relationshipId\", relationship.getId());\n-\t\t\t\tentry.put(\"productId\", product.getId());\n-\t\t\t\t\n-\t\t\t\tProductDescription description = product.getDescriptions().iterator().next();\n-\t\t\t\tSet<ProductDescription> descriptions = product.getDescriptions();\n-\t\t\t\tfor(ProductDescription desc : descriptions) {\n-\t\t\t\t\tif(desc.getLanguage().getId().intValue()==language.getId().intValue()) {\n-\t\t\t\t\t\tdescription = desc;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tentry.put(\"name\", description.getName());\n-\t\t\t\tentry.put(\"sku\", product.getSku());\n-\t\t\t\tentry.put(\"available\", product.isAvailable());\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/featured/addItem.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> addItem(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString productId = request.getParameter(\"productId\");\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\tLong lProductId = Long.parseLong(productId);\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tProduct product = productService.getById(lProductId);\n-\t\t\t\n-\t\t\tif(product==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\n-\t\t\tProductRelationship relationship = new ProductRelationship();\n-\t\t\trelationship.setActive(true);\n-\t\t\trelationship.setCode(ProductRelationshipType.FEATURED_ITEM.name());\n-\t\t\trelationship.setStore(store);\n-\t\t\trelationship.setRelatedProduct(product);\n-\t\t\t\n-\t\t\tproductRelationshipService.saveOrUpdate(relationship);\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/featured/removeItem.html&removeEntity=FEATURED\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeItem(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString productId = request.getParameter(\"productId\");\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\tLong lproductId = Long.parseLong(productId);\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tProduct product = productService.getById(lproductId);\n-\t\t\t\n-\t\t\tif(product==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tProductRelationship relationship = null;\n-\t\t\tList<ProductRelationship> relationships = productRelationshipService.getByType(store, ProductRelationshipType.FEATURED_ITEM);\n-\t\t\t\n-\t\t\tfor(ProductRelationship r : relationships) {\n-\t\t\t\tif(r.getRelatedProduct().getId().longValue()==lproductId.longValue()) {\n-\t\t\t\t\trelationship = r;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(relationship==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(relationship.getStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\n-\t\t\t\n-\t\t\t\n-\t\t\tproductRelationshipService.delete(relationship);\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t}\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-products-group\", \"catalogue-products-group\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/ManufacturerController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 501,
          "patch": "@@ -1,501 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.product.manufacturer.ManufacturerService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.utils.CoreConfiguration;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer;\n-import com.salesmanager.core.model.catalog.product.manufacturer.ManufacturerDescription;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.controller.customers.CustomerController;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.*;\n-\n-import javax.imageio.ImageIO;\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.awt.image.BufferedImage;\n-import java.util.*;\n-\n-@Controller\n-public class ManufacturerController {\n-\t\n-\t@Inject\n-\tprivate LanguageService languageService;\n-\t\n-\t@Inject\n-\tprivate ManufacturerService manufacturerService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\t@Inject\n-\tprivate CoreConfiguration configuration;\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CustomerController.class);\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/manufacturer/list.html\", method=RequestMethod.GET)\n-\tpublic String getManufacturers(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\n-\t\tthis.setMenu(model, request);\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Product.manufacturerList;\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/manufacturer/create.html\", method=RequestMethod.GET)\n-\tpublic String createManufacturer(  Model model,  HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\treturn displayManufacturer(null,model,request,response);\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/manufacturer/edit.html\", method=RequestMethod.GET)\n-\tpublic String editManufacturer(@RequestParam(\"id\") long manufacturerId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\treturn displayManufacturer(manufacturerId,model,request,response);\n-\t}\n-\t\n-\tprivate String displayManufacturer(Long manufacturerId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\t//List<Language> languages = languageService.getLanguages();\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tList<Language> languages = store.getLanguages();\n-\t\t\n-\t\t\n-\t\tcom.salesmanager.shop.admin.model.catalog.Manufacturer manufacturer = new com.salesmanager.shop.admin.model.catalog.Manufacturer();\n-\t\tList<ManufacturerDescription> descriptions = new ArrayList<ManufacturerDescription>();\n-\n-\t\t\n-\t\tif( manufacturerId!=null && manufacturerId.longValue()!=0) {\t//edit mode\n-\n-\t\t\tManufacturer dbManufacturer = new Manufacturer();\n-\t\t\tdbManufacturer = manufacturerService.getById( manufacturerId );\n-\t\t\t\n-\t\t\tif(dbManufacturer==null) {\n-\t\t\t\treturn ControllerConstants.Tiles.Product.manufacturerList;\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(dbManufacturer.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\treturn ControllerConstants.Tiles.Product.manufacturerList;\n-\t\t\t}\n-\t\t\t\n-\t\t\tSet<ManufacturerDescription> manufacturerDescriptions = dbManufacturer.getDescriptions();\n-\n-\t\t\t\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\t\n-\t\t\t\tManufacturerDescription manufDescription = null;\n-\t\t\t\tif(manufacturerDescriptions!=null) {\n-\t\t\t\t\t\n-\t\t\t\t\tfor(ManufacturerDescription desc : manufacturerDescriptions) {\t\t\t\t\n-\t\t\t\t\t\tString code = desc.getLanguage().getCode();\n-\t\t\t\t\t\tif(code.equals(l.getCode())) {\n-\t\t\t\t\t\t\tmanufDescription = desc;\n-\t\t\t\t\t\t}\n-\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif(manufDescription==null) {\n-\t\t\t\t\tmanufDescription = new ManufacturerDescription();\n-\t\t\t\t\tmanufDescription.setLanguage(l);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tmanufacturer.getDescriptions().add(manufDescription);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tmanufacturer.setManufacturer( dbManufacturer );\n-\t\t\n-\t\t\tmanufacturer.setCode(dbManufacturer.getCode());\n-\t\t\tmanufacturer.setOrder( dbManufacturer.getOrder() );\n-\t\t\t\n-\t\t} else {\t// Create mode\n-\n-\t\t\tManufacturer manufacturerTmp = new Manufacturer();\n-\t\t\tmanufacturer.setManufacturer( manufacturerTmp );\n-\t\t\t\n-\t\t\tfor(Language l : languages) {// for each store language\n-\t\t\t\t\n-\t\t\t\tManufacturerDescription manufacturerDesc = new ManufacturerDescription();\n-\t\t\t\tmanufacturerDesc.setLanguage(l);\n-\t\t\t\tdescriptions.add(  manufacturerDesc );\n-\t\t\t\tmanufacturer.setDescriptions(descriptions);\n-\t\t\t\t\n-\t\t\t}\n-\t\t}\n-\n-\t\tmodel.addAttribute(\"languages\",languages);\n-\t\tmodel.addAttribute(\"manufacturer\", manufacturer);\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Product.manufacturerDetails;\n-\t}\n-\t\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")  \n-\t@RequestMapping(value=\"/admin/catalogue/manufacturer/save.html\", method=RequestMethod.POST)\n-\tpublic String saveManufacturer( @Valid @ModelAttribute(\"manufacturer\") com.salesmanager.shop.admin.model.catalog.Manufacturer manufacturer, BindingResult result, Model model,  HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\t\t//save or edit a manufacturer\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tList<Language> languages = languageService.getLanguages();\n-\n-\t\tif(manufacturer.getDescriptions()!=null && manufacturer.getDescriptions().size()>0) {\n-\n-\t\t\tfor(ManufacturerDescription description : manufacturer.getDescriptions()) {\n-\n-\t\t\t\t//validate Url Clicked\n-/*\t\t\t\tif ( description.getUrlClicked() != null && !description.getUrlClicked().toString().isEmpty()) {\n-\t\t\t\t\ttry{\n-\t\t\t\t\t\tInteger.parseInt( description.getUrlClicked().toString() );\n-\n-\t\t\t\t\t} catch (Exception e) {\n-\n-\t\t\t\t\t\tObjectError error = new ObjectError(\"descriptions[${counter.index}].urlClicked\",\"URL Clicked must be a number\");\n-\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t}\n-\t\t\t\t}*/\n-\t\t\t}\n-\t\t}\n-\n-\n-\t//validate image\n-\t\tif(manufacturer.getImage()!=null && !manufacturer.getImage().isEmpty()) {\n-\n-\t\t\ttry {\n-\n-\t\t\t\tString maxHeight = configuration.getProperty(\"PRODUCT_IMAGE_MAX_HEIGHT_SIZE\");\n-\t\t\t\tString maxWidth = configuration.getProperty(\"PRODUCT_IMAGE_MAX_WIDTH_SIZE\");\n-\t\t\t\tString maxSize = configuration.getProperty(\"PRODUCT_IMAGE_MAX_SIZE\");\n-\n-\t\t\t\tBufferedImage image = ImageIO.read(manufacturer.getImage().getInputStream());\n-\n-\t\t\t\tif(!StringUtils.isBlank(maxHeight)) {\n-\n-\t\t\t\t\tint maxImageHeight = Integer.parseInt(maxHeight);\n-\t\t\t\t\tif(image.getHeight()>maxImageHeight) {\n-\t\t\t\t\t\tObjectError error = new ObjectError(\"image\",messages.getMessage(\"message.image.height\", locale) + \" {\"+maxHeight+\"}\");\n-\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tif(!StringUtils.isBlank(maxWidth)) {\n-\n-\t\t\t\t\tint maxImageWidth = Integer.parseInt(maxWidth);\n-\t\t\t\t\tif(image.getWidth()>maxImageWidth) {\n-\t\t\t\t\t\tObjectError error = new ObjectError(\"image\",messages.getMessage(\"message.image.width\", locale) + \" {\"+maxWidth+\"}\");\n-\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tif(!StringUtils.isBlank(maxSize)) {\n-\n-\t\t\t\t\tint maxImageSize = Integer.parseInt(maxSize);\n-\t\t\t\t\tif(manufacturer.getImage().getSize()>maxImageSize) {\n-\t\t\t\t\t\tObjectError error = new ObjectError(\"image\",messages.getMessage(\"message.image.size\", locale) + \" {\"+maxSize+\"}\");\n-\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"Cannot validate manufacturer image\", e);\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\tif (result.hasErrors()) {\n-\t\t\tmodel.addAttribute(\"languages\",languages);\n-\t\t\treturn ControllerConstants.Tiles.Product.manufacturerDetails;\n-\t\t}\n-\n-\t\tManufacturer newManufacturer = manufacturer.getManufacturer();\n-\n-\t\tif ( manufacturer.getManufacturer().getId() !=null && manufacturer.getManufacturer().getId()  > 0 ){\n-\n-\t\t\tnewManufacturer = manufacturerService.getById( manufacturer.getManufacturer().getId() );\n-\n-\t\t\tif(newManufacturer.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\treturn ControllerConstants.Tiles.Product.manufacturerList;\n-\t\t\t}\n-\n-\t\t}\n-\n-//\t\tfor(ManufacturerImage image : manufacturer.getImages()) {\n-//\t\t\tif(image.isDefaultImage()) {\n-//\t\t\t\tmanufacturer.setProductImage(image);\n-//\t\t\t}\n-//\t\t}\n-\n-\t\tSet<ManufacturerDescription> descriptions = new HashSet<ManufacturerDescription>();\n-\t\tif(manufacturer.getDescriptions()!=null && manufacturer.getDescriptions().size()>0) {\n-\t\t\t\n-\t\t\tfor(ManufacturerDescription desc : manufacturer.getDescriptions()) {\n-\t\t\t\t\n-\t\t\t\tdesc.setManufacturer(newManufacturer);\n-\t\t\t\tdescriptions.add(desc);\n-\t\t\t}\n-\t\t}\n-\t\tnewManufacturer.setDescriptions(descriptions );\n-\t\tnewManufacturer.setOrder( manufacturer.getOrder() );\n-\t\tnewManufacturer.setMerchantStore(store);\n-\t\tnewManufacturer.setCode(manufacturer.getCode());\n-\n-\n-//\t\tif(manufacturer.getManufacturerImage()!=null && manufacturer.getManufacturerImage().getId() == null) {\n-//\t\t\tnewManufacturer.setProductImage(null);\n-//\t\t}\n-\n-\n-\n-\t\tif(manufacturer.getImage()!=null && !manufacturer.getImage().isEmpty()) {\n-//\n-//\t\t\tString imageName = manufacturer.getImage().getOriginalFilename();\n-//\n-//\t\t\tManufacturerImage manufacturerImage = new ManufacturerImage();\n-//\t\t\tmanufacturerImage.setDefaultImage(true);\n-//\t\t\tmanufacturerImage.setImage(manufacturer.getImage().getInputStream());\n-//\t\t\tmanufacturerImage.setManufacturerImage(imageName);\n-//\n-//\t\t\tList<ManufacturerImageDescription> imagesDescriptions = new ArrayList<ManufacturerImageDescription>();\n-//\n-//\t\t\tfor(Language l : languages) {\n-//\n-//\t\t\t\tManufacturerImageDescription imageDescription = new ManufacturerImageDescription();\n-//\t\t\t\timageDescription.setName(imageName);\n-//\t\t\t\timageDescription.setLanguage(l);\n-//\t\t\t\timageDescription.setManufacturerImage(productImage);\n-//\t\t\t\timagesDescriptions.add(imageDescription);\n-//\n-//\t\t\t}\n-//\n-//\t\t\tmanufacturerImage.setDescriptions(imagesDescriptions);\n-//\t\t\tmanufacturerImage.setProduct(newManufacturer);\n-//\n-//\t\t\tnewManufacturer.getImages().add(manufacturerImage);\n-//\n-//\t\t\tmanufacturerService.saveOrUpdate(newManufacturer);\n-//\n-//\t\t\t//manufacturer displayed\n-//\t\t\tmanufacturer.setProductImage(manufacturerImage);\n-\n-\n-\t\t} else {\n-\n-\t\t\tmanufacturerService.saveOrUpdate(newManufacturer);\n-\t\t}\n-\n-\t\tmodel.addAttribute(\"manufacturer\", manufacturer);\n-\t\tmodel.addAttribute(\"languages\",languages);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\n-\t\treturn ControllerConstants.Tiles.Product.manufacturerDetails;\n-\n-\t}\n-\t\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/manufacturer/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageManufacturers(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\ttry {\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\t\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tList<Manufacturer> manufacturers = null;\t\t\t\t\n-\t\t\tmanufacturers = manufacturerService.listByStore(store, language);\n-\t\t\t\n-\t\t\t\t\n-\t\t\tfor(Manufacturer manufacturer : manufacturers) {\n-\t\t\t\t\n-\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"id\", manufacturer.getId());\n-\t\t\t\t\n-\t\t\t\tManufacturerDescription description = manufacturer.getDescriptions().iterator().next();\n-\t\t\t\t\n-\t\t\t\tentry.put(\"name\", description.getName());\n-\t\t\t\tentry.put(\"code\", manufacturer.getCode());\n-\t\t\t\tentry.put(\"order\", manufacturer.getOrder());\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging Manufacturers\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/manufacturer/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteManufacturer(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tLong sid =  Long.valueOf(request.getParameter(\"id\") );\n-\t\n-\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\ttry{\n-\t\t\tManufacturer delManufacturer = manufacturerService.getById( sid  );\t\t\t\t\n-\t\t\tif(delManufacturer==null || delManufacturer.getMerchantStore().getId().intValue() != store.getId().intValue()) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t} \n-\t\t\t\n-\t\t\tint count = manufacturerService.getCountManufAttachedProducts( delManufacturer ).intValue();\n-\t\t\t//IF already attached to products it can't be deleted\n-\t\t\tif ( count > 0 ){\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.product.association\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\t\n-\n-\t\t\tmanufacturerService.delete( delManufacturer );\n-\t\t\t\n-\t\t\tresp.setStatusMessage(messages.getMessage(\"message.success\", locale));\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\n-\t\t} catch (Exception e) {\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\n-\t\t\tLOGGER.error(\"Cannot delete manufacturer.\", e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/manufacturer/checkCode.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> checkCode(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString code = request.getParameter(\"code\");\n-\t\tString id = request.getParameter(\"id\");\n-\n-\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\tif(StringUtils.isBlank(code)) {\n-\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\tManufacturer manufacturer = manufacturerService.getByCode(store, code);\n-\t\t\n-\t\tif(manufacturer!=null && StringUtils.isBlank(id)) {\n-\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\t\t\n-\t\t\n-\t\tif(manufacturer!=null && !StringUtils.isBlank(id)) {\n-\t\t\ttry {\n-\t\t\t\tLong lid = Long.parseLong(id);\n-\t\t\t\t\n-\t\t\t\tif(manufacturer.getCode().equals(code) && manufacturer.getId().longValue()==lid) {\n-\t\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\t\t}\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\n-\t\n-\t\t\n-\t\t\t\n-\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while getting manufacturer\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"manufacturer-list\", \"manufacturer-list\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/OptionsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 340,
          "patch": "@@ -1,340 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.product.attribute.ProductOption;\n-import com.salesmanager.core.model.catalog.product.attribute.ProductOptionDescription;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.*;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.*;\n-\n-@Controller\n-public class OptionsController {\n-\t\n-\t@Inject\n-\tLanguageService languageService;\n-\t\n-\t@Inject\n-\tProductOptionService productOptionService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(OptionsController.class);\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/options/options.html\", method=RequestMethod.GET)\n-\tpublic String displayOptions(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\n-\n-\n-\t\t\n-\t\treturn \"catalogue-options-list\";\n-\t\t\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/options/editOption.html\", method=RequestMethod.GET)\n-\tpublic String displayOptionEdit(@RequestParam(\"id\") long optionId, HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) throws Exception {\n-\t\treturn displayOption(optionId,request,response,model,locale);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/options/createOption.html\", method=RequestMethod.GET)\n-\tpublic String displayOption(HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) throws Exception {\n-\t\treturn displayOption(null,request,response,model,locale);\n-\t}\n-\t\n-\tprivate String displayOption(Long optionId, HttpServletRequest request, HttpServletResponse response,Model model,Locale locale) throws Exception {\n-\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\n-\t\tSet<ProductOptionDescription> descriptions = new HashSet<ProductOptionDescription>();\n-\t\t\n-\t\tProductOption option = new ProductOption();\n-\t\t\n-\t\tif(optionId!=null && optionId!=0) {//edit mode\n-\t\t\t\n-\t\t\t\n-\t\t\toption = productOptionService.getById(store, optionId);\n-\t\t\t\n-\t\t\t\n-\t\t\tif(option==null) {\n-\t\t\t\treturn \"redirect:/admin/options/options.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\tSet<ProductOptionDescription> optionDescriptions = option.getDescriptions();\n-\t\t\t\n-\t\t\t\n-\t\t\t\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\n-\t\t\t\tProductOptionDescription optionDescription = null;\n-\t\t\t\t\n-\t\t\t\tif(optionDescriptions!=null) {\n-\t\t\t\t\t\n-\t\t\t\t\tfor(ProductOptionDescription description : optionDescriptions) {\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tString code = description.getLanguage().getCode();\n-\t\t\t\t\t\tif(code.equals(l.getCode())) {\n-\t\t\t\t\t\t\toptionDescription = description;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif(optionDescription==null) {\n-\t\t\t\t\toptionDescription = new ProductOptionDescription();\n-\t\t\t\t\toptionDescription.setLanguage(l);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tdescriptions.add(optionDescription);\n-\t\t\t\n-\t\t\t}\n-\n-\t\t} else {\n-\t\t\t\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\t\n-\t\t\t\tProductOptionDescription desc = new ProductOptionDescription();\n-\t\t\t\tdesc.setLanguage(l);\n-\t\t\t\tdescriptions.add(desc);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t}\n-\t\t\n-\n-\t\toption.setDescriptions(descriptions);\n-\t\tmodel.addAttribute(\"option\", option);\n-\t\treturn \"catalogue-options-details\";\n-\t\t\n-\t\t\n-\t}\n-\t\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/options/save.html\", method=RequestMethod.POST)\n-\tpublic String saveOption(@Valid @ModelAttribute(\"option\") ProductOption option, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tProductOption dbEntity =\tnull;\t\n-\n-\t\tif(option.getId() != null && option.getId() >0) { //edit entry\n-\t\t\t//get from DB\n-\t\t\tdbEntity = productOptionService.getById(option.getId());\n-\t\t\t\n-\t\t\tif(dbEntity==null) {\n-\t\t\t\treturn \"redirect:/admin/options/options.html\";\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t//validate if it contains an existing code\n-\t\tProductOption byCode = productOptionService.getByCode(store, option.getCode());\n-\t\tif(byCode!=null) {\n-\t\t\tObjectError error = new ObjectError(\"code\",messages.getMessage(\"message.code.exist\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\n-\t\t\t\n-\t\tMap<String,Language> langs = languageService.getLanguagesMap();\n-\t\t\t\n-\n-\t\tList<ProductOptionDescription> descriptions = option.getDescriptionsList();\n-\t\t\n-\t\tif(descriptions!=null) {\n-\t\t\t\t\n-\t\t\t\tfor(ProductOptionDescription description : descriptions) {\n-\t\t\t\t\t\n-\t\t\t\t\tString code = description.getLanguage().getCode();\n-\t\t\t\t\tLanguage l = langs.get(code);\n-\t\t\t\t\tdescription.setLanguage(l);\n-\t\t\t\t\tdescription.setProductOption(option);\n-\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t}\n-\t\t\t\n-\t\toption.setDescriptions(new HashSet<ProductOptionDescription>(descriptions));\n-\t\toption.setMerchantStore(store);\n-\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn \"catalogue-options-details\";\n-\t\t}\n-\t\t\n-\n-\t\t\n-\t\t\n-\t\tproductOptionService.saveOrUpdate(option);\n-\n-\n-\t\t\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn \"catalogue-options-details\";\n-\t}\n-\n-\t\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/options/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageOptions(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString optionName = request.getParameter(\"name\");\n-\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\t\n-\t\t\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tList<ProductOption> options = null;\n-\t\t\t\t\t\n-\t\t\tif(!StringUtils.isBlank(optionName)) {\n-\t\t\t\t\n-\t\t\t\toptions = productOptionService.getByName(store, optionName, language);\n-\t\t\t\t\n-\t\t\t} else {\n-\t\t\t\t\n-\t\t\t\toptions = productOptionService.listByStore(store, language);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\n-\t\t\tfor(ProductOption option : options) {\n-\t\t\t\t\n-\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"optionId\", option.getId());\n-\t\t\t\tentry.put(\"display\", option.isReadOnly());\n-\t\t\t\tProductOptionDescription description = option.getDescriptions().iterator().next();\n-\t\t\t\t\n-\t\t\t\tentry.put(\"name\", description.getName());\n-\t\t\t\tentry.put(\"type\", option.getProductOptionType());//TODO resolve with option type label\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\t\n-\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging options\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t\n-\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-options\", \"catalogue-options\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\t@RequestMapping(value=\"/admin/options/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteOption(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString sid = request.getParameter(\"optionId\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(sid);\n-\t\t\t\n-\t\t\tProductOption entity = productOptionService.getById(id);\n-\n-\t\t\tif(entity==null || entity.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\t\n-\t\t\t} else {\n-\t\t\t\t\n-\t\t\t\tproductOptionService.delete(entity);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting option\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/OptionsValueController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 436,
          "patch": "@@ -1,436 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionValueService;\n-import com.salesmanager.core.business.services.content.ContentService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.product.attribute.ProductOptionValue;\n-import com.salesmanager.core.model.catalog.product.attribute.ProductOptionValueDescription;\n-import com.salesmanager.core.model.content.FileContentType;\n-import com.salesmanager.core.model.content.InputContentFile;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.ImageFilePath;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.*;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-\n-import java.io.InputStream;\n-import java.util.*;\n-\n-@Controller\n-public class OptionsValueController {\n-\t\n-\t@Inject\n-\tLanguageService languageService;\n-\t\n-\n-\t@Inject\n-\tProductOptionValueService productOptionValueService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\t@Inject\n-\tprivate ContentService contentService;\n-\t\n-\t@Inject\n-\t@Qualifier(\"img\")\n-\tprivate ImageFilePath imageUtils;\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(OptionsValueController.class);\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/options/optionvalues.html\", method=RequestMethod.GET)\n-\tpublic String displayOptions(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\n-\t\t//subsequent ajax call\n-\n-\t\t\n-\t\treturn \"catalogue-optionsvalues-list\";\n-\t\t\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/options/editOptionValue.html\", method=RequestMethod.GET)\n-\tpublic String displayOptionEdit(@RequestParam(\"id\") long optionId, HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) throws Exception {\n-\t\treturn displayOption(optionId,request,response,model,locale);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/options/createOptionValue.html\", method=RequestMethod.GET)\n-\tpublic String displayOption(HttpServletRequest request, HttpServletResponse response, Model model, Locale locale) throws Exception {\n-\t\treturn displayOption(null,request,response,model,locale);\n-\t}\n-\t\n-\tprivate String displayOption(Long optionId, HttpServletRequest request, HttpServletResponse response,Model model,Locale locale) throws Exception {\n-\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\n-\t\tSet<ProductOptionValueDescription> descriptions = new HashSet<ProductOptionValueDescription>();\n-\t\t\n-\t\tProductOptionValue option = new ProductOptionValue();\n-\t\t\n-\t\tif(optionId!=null && optionId!=0) {//edit mode\n-\t\t\t\n-\t\t\t\n-\t\t\toption = productOptionValueService.getById(store, optionId);\n-\n-\t\t\tif(option==null) {\n-\t\t\t\treturn \"redirect:/admin/options/optionvalues.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\tSet<ProductOptionValueDescription> optionDescriptions = option.getDescriptions();\n-\t\t\t\n-\t\t\t\n-\t\t\t\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\n-\t\t\t\tProductOptionValueDescription optionDescription = null;\n-\t\t\t\t\n-\t\t\t\tif(optionDescriptions!=null) {\n-\t\t\t\t\t\n-\t\t\t\t\tfor(ProductOptionValueDescription description : optionDescriptions) {\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tString code = description.getLanguage().getCode();\n-\t\t\t\t\t\tif(code.equals(l.getCode())) {\n-\t\t\t\t\t\t\toptionDescription = description;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif(optionDescription==null) {\n-\t\t\t\t\toptionDescription = new ProductOptionValueDescription();\n-\t\t\t\t\toptionDescription.setLanguage(l);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tdescriptions.add(optionDescription);\n-\t\t\t\n-\t\t\t}\n-\n-\t\t} else {\n-\t\t\t\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\t\n-\t\t\t\tProductOptionValueDescription desc = new ProductOptionValueDescription();\n-\t\t\t\tdesc.setLanguage(l);\n-\t\t\t\tdescriptions.add(desc);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\toption.setDescriptions(descriptions);\n-\t\t\t\n-\t\t}\n-\t\t\n-\n-\t\t\n-\t\tmodel.addAttribute(\"optionValue\", option);\n-\t\treturn \"catalogue-optionsvalues-details\";\n-\t\t\n-\t\t\n-\t}\n-\t\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/options/saveOptionValue.html\", method=RequestMethod.POST)\n-\tpublic String saveOption(@Valid @ModelAttribute(\"optionValue\") ProductOptionValue optionValue, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tProductOptionValue dbEntity =\tnull;\t\n-\n-\t\tif(optionValue.getId() != null && optionValue.getId() >0) { //edit entry\n-\t\t\t\n-\t\t\t//get from DB\n-\t\t\tdbEntity = productOptionValueService.getById(store,optionValue.getId());\n-\t\t\t\n-\t\t\tif(dbEntity==null) {\n-\t\t\t\treturn \"redirect:/admin/options/optionsvalues.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t} else {\n-\t\t\t\n-\t\t\t//validate if it contains an existing code\n-\t\t\tProductOptionValue byCode = productOptionValueService.getByCode(store, optionValue.getCode());\n-\t\t\tif(byCode!=null) {\n-\t\t\t\tObjectError error = new ObjectError(\"code\",messages.getMessage(\"message.code.exist\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t\t\n-\t\t}\n-\t\t\n-\n-\n-\t\t\t\n-\t\tMap<String,Language> langs = languageService.getLanguagesMap();\n-\t\t\t\n-\n-\t\tList<ProductOptionValueDescription> descriptions = optionValue.getDescriptionsList();\n-\t\tif(descriptions!=null && descriptions.size()>0) {\n-\t\t\t\n-\t\t\t\tSet<ProductOptionValueDescription> descs = new HashSet<ProductOptionValueDescription>();\n-\t\t\t\t\n-\t\t\t\t//if(descs==null || descs.size()==0) {\t\t\t\n-\n-\t\t\t\t//} else {\n-\t\t\t\t\n-\t\t\t\t\toptionValue.setDescriptions(descs);\n-\t\t\t\t\tfor(ProductOptionValueDescription description : descriptions) {\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tif(StringUtils.isBlank(description.getName())) {\n-\t\t\t\t\t\t\tObjectError error = new ObjectError(\"name\",messages.getMessage(\"message.name.required\", locale));\n-\t\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\n-\t\t\t\t\t\t\tString code = description.getLanguage().getCode();\n-\t\t\t\t\t\t\tLanguage l = langs.get(code);\n-\t\t\t\t\t\t\tdescription.setLanguage(l);\n-\t\t\t\t\t\t\tdescription.setProductOptionValue(optionValue);\n-\t\t\t\t\t\t\tdescs.add(description);\n-\t\t\t\t\t\t\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\t\n-\t\t\t\t\t}\n-\n-\t\t\t\t\n-\t\t} else {\n-\t\t\t\n-\t\t\tObjectError error = new ObjectError(\"name\",messages.getMessage(\"message.name.required\", locale));\n-\t\t\tresult.addError(error);\n-\t\t\t\n-\t\t}\n-\t\t\t\n-\n-\t\toptionValue.setMerchantStore(store);\n-\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn \"catalogue-optionsvalues-details\";\n-\t\t}\n-\t\t\n-\n-\t    if(optionValue.getImage()!=null && !optionValue.getImage().isEmpty()) {\n-\n-\t\t\tString imageName = optionValue.getImage().getOriginalFilename();\n-            InputStream inputStream = optionValue.getImage().getInputStream();\n-            InputContentFile cmsContentImage = new InputContentFile();\n-            cmsContentImage.setFileName(imageName);\n-            cmsContentImage.setMimeType( optionValue.getImage().getContentType() );\n-            cmsContentImage.setFile( inputStream );\n-            contentService.addOptionImage(store.getCode(), cmsContentImage);\n-            \n-            optionValue.setProductOptionValueImage(imageName);\n-\n-\t\t}\n-\t\t\n-\t\tproductOptionValueService.saveOrUpdate(optionValue);\n-\n-\n-\t\t\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn \"catalogue-optionsvalues-details\";\n-\t}\n-\n-\t\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/optionsvalues/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageOptions(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString optionName = request.getParameter(\"name\");\n-\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\t\n-\t\t\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tList<ProductOptionValue> options = null;\n-\t\t\t\t\t\n-\t\t\tif(!StringUtils.isBlank(optionName)) {\n-\t\t\t\t\n-\t\t\t\t//productOptionValueService.getByName(store, optionName, language);\n-\t\t\t\t\n-\t\t\t} else {\n-\t\t\t\t\n-\t\t\t\toptions = productOptionValueService.listByStore(store, language);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\n-\t\t\tfor(ProductOptionValue option : options) {\n-\t\t\t\t\n-\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"optionValueId\", option.getId());\n-\t\t\t\t\n-\t\t\t\tProductOptionValueDescription description = option.getDescriptions().iterator().next();\n-\t\t\t\t\n-\t\t\t\tentry.put(\"name\", description.getName());\n-\t\t\t\t//entry.put(\"image\", new StringBuilder().append(store.getCode()).append(\"/\").append(FileContentType.PROPERTY.name()).append(\"/\").append(option.getProductOptionValueImage()).toString());\n-\t\t\t\tentry.put(\"image\", imageUtils.buildProductPropertyImageUtils(store, option.getProductOptionValueImage()));\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\t\n-\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging options\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\t\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/optionsvalues/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteOptionValue(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString sid = request.getParameter(\"optionValueId\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(sid);\n-\t\t\t\n-\t\t\tProductOptionValue entity = productOptionValueService.getById(store, id);\n-\n-\t\t\tif(entity==null || entity.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\t\n-\t\t\t} else {\n-\t\t\t\t\n-\t\t\t\tproductOptionValueService.delete(entity);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting option\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/optionsvalues/removeImage.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeImage(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString optionValueId = request.getParameter(\"optionId\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(optionValueId);\n-\t\t\t\n-\t\t\tProductOptionValue optionValue = productOptionValueService.getById(store, id);\n-\n-\t\t\tcontentService.removeFile(store.getCode(), FileContentType.PROPERTY, optionValue.getProductOptionValueImage());\n-\t\t\t\n-\t\t\tstore.setStoreLogo(null);\n-\t\t\toptionValue.setProductOptionValueImage(null);\n-\t\t\tproductOptionValueService.update(optionValue);\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-options\", \"catalogue-options\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/ProductAttributeController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 530,
          "patch": "@@ -1,530 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.services.catalog.product.attribute.ProductAttributeService;\n-import com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionService;\n-import com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionValueService;\n-import com.salesmanager.core.business.utils.ProductPriceUtils;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.attribute.*;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.RandomStringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.*;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.math.BigDecimal;\n-import java.util.*;\n-\n-@Controller\n-public class ProductAttributeController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ProductAttributeController.class);\n-\t\n-\tprivate final static String TEXT_OPTION = \"text\";\n-\t\n-\t@Inject\n-\tprivate ProductAttributeService productAttributeService;\n-\t\n-\t@Inject\n-\tprivate ProductService productService;\n-\t\n-\t@Inject\n-\tprivate ProductPriceUtils priceUtil;\n-\t\n-\t@Inject\n-\tProductOptionService productOptionService;\n-\t\n-\t@Inject\n-\tProductOptionValueService productOptionValueService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/attributes/list.html\", method=RequestMethod.GET)\n-\tpublic String displayProductAttributes(@RequestParam(\"id\") long productId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tProduct product = productService.getById(productId);\n-\t\t\n-\t\tif(product==null) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"product\",product);\n-\t\treturn \"admin-products-attributes\";\n-\t\t\n-\t}\n-\t\n-\t\n-\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/attributes/page.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageAttributes(HttpServletRequest request, HttpServletResponse response) {\n-\n-\t\t//String attribute = request.getParameter(\"attribute\");\n-\t\tString sProductId = request.getParameter(\"productId\");\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tLong productId;\n-\t\tProduct product = null;\n-\t\t\n-\t\ttry {\n-\t\t\tproductId = Long.parseLong(sProductId);\n-\t\t} catch (Exception e) {\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t\n-\t\t\tproduct = productService.getById(productId);\n-\t\t\t\n-\n-\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\t//List<ProductAttribute> attributes = productAttributeService.getByProductId(store, product, language);\n-\t\t\t\n-\t\t\tfor(ProductAttribute attr : product.getAttributes()) {\n-\t\t\t\t\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"attributeId\", attr.getId());\n-\t\t\t\t\n-\t\t\t\tList<ProductOptionDescription> optionsDescriptions = attr.getProductOption().getDescriptionsSettoList();\n-\t\t\t    ProductOptionDescription optionDescription = attr.getProductOption().getDescriptionsSettoList().get(0);\n-\t\t\t\tfor(ProductOptionDescription desc : optionsDescriptions) {\n-\t\t\t\t\tif(desc.getLanguage().getId().intValue()==language.getId().intValue()) {\n-\t\t\t\t\t\toptionDescription = desc;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tList<ProductOptionValueDescription> optionValuesDescriptions = attr.getProductOptionValue().getDescriptionsSettoList();\n-\t\t\t    ProductOptionValueDescription optionValueDescription = attr.getProductOptionValue().getDescriptionsSettoList().get(0);\n-\t\t\t\tfor(ProductOptionValueDescription desc : optionValuesDescriptions) {\n-\t\t\t\t\tif(desc.getLanguage().getId().intValue()==language.getId().intValue()) {\n-\t\t\t\t\t\toptionValueDescription = desc;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tentry.put(\"attribute\", optionDescription.getName());\n-\t\t\t\tentry.put(\"display\", attr.getAttributeDisplayOnly());\n-\t\t\t\tentry.put(\"value\", optionValueDescription.getName());\n-\t\t\t\tentry.put(\"order\", attr.getProductOptionSortOrder());\n-\t\t\t\tentry.put(\"price\", priceUtil.getAdminFormatedAmountWithCurrency(store,attr.getProductAttributePrice()));\n-\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/attributes/editAttribute.html\", method=RequestMethod.GET)\n-\tpublic String displayAttributeEdit(@RequestParam(\"productId\") Long productId, @RequestParam(\"id\") Long id, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\treturn displayAttribute(productId, id,model,request,response);\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/attribute/createAttribute.html\", method=RequestMethod.GET)\n-\tpublic String displayAttributeCreate(@RequestParam(\"productId\") Long productId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\treturn displayAttribute(productId, null,model,request,response);\n-\n-\t}\n-\t\n-\tprivate String displayAttribute(Long productId, Long id, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\t//get product\n-\t\tProduct product =  productService.getById(productId);\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\t\t\n-\t\tProductAttribute attribute = null;\n-\t\t\n-\t\t//get Options\n-\t\tList<ProductOption> options = productOptionService.listByStore(store, language);\n-\t\t//get OptionsValues\n-\t\tList<ProductOptionValue> optionsValues = productOptionValueService.listByStoreNoReadOnly(store, language);\n-\t\t\n-\t\tif(id!=null && id.intValue()!=0) {//edit mode\n-\t\t\t\n-\t\t\tattribute = productAttributeService.getById(id);\n-\t\t\tattribute.setAttributePrice(priceUtil.getAdminFormatedAmount(store, attribute.getProductAttributePrice()));\n-\t\t\tattribute.setAttributeAdditionalWeight(String.valueOf(attribute.getProductAttributeWeight().intValue()));\n-\t\t\tattribute.setAttributeSortOrder(String.valueOf(attribute.getProductOptionSortOrder()));\n-\t\t\t\n-\t\t} else {\n-\t\t\t\n-\t\t\tattribute = new ProductAttribute();\n-\t\t\tattribute.setProduct(product);\n-\t\t\tProductOptionValue value = new ProductOptionValue();\n-\t\t\tSet<ProductOptionValueDescription> descriptions = new HashSet<ProductOptionValueDescription>();\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\t\n-\t\t\t\tProductOptionValueDescription desc = new ProductOptionValueDescription();\n-\t\t\t\tdesc.setLanguage(l);\n-\t\t\t\tdescriptions.add(desc);\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tvalue.setDescriptions(descriptions);\n-\t\t\tattribute.setProductOptionValue(value);\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"optionsValues\",optionsValues);\n-\t\tmodel.addAttribute(\"options\",options);\n-\t\tmodel.addAttribute(\"attribute\",attribute);\n-\t\tmodel.addAttribute(\"product\",product);\n-\t\treturn \"admin-products-attribute-details\";\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/attributes/attribute/save.html\", method=RequestMethod.POST)\n-\tpublic String saveAttribute(@Valid @ModelAttribute(\"attribute\") ProductAttribute attribute, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tProduct product = productService.getById(attribute.getProduct().getId());\n-\t\t\n-\t\tmodel.addAttribute(\"product\",product);\n-\t\t\n-\t\t\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\t\n-\t\t//get Options\n-\t\tList<ProductOption> options = productOptionService.listByStore(store, language);\n-\t\t//get OptionsValues\n-\t\tList<ProductOptionValue> optionsValues = productOptionValueService.listByStoreNoReadOnly(store, language);\n-\t\t\n-\t\tmodel.addAttribute(\"optionsValues\",optionsValues);\n-\t\tmodel.addAttribute(\"options\",options);\n-\t\t\n-\t\tProductAttribute dbEntity =\tnull;\t\n-\n-\t\tif(attribute.getId() != null && attribute.getId() >0) { //edit entry\n-\t\t\t\n-\t\t\t//get from DB\n-\t\t\tdbEntity = productAttributeService.getById(attribute.getId());\n-\t\t\t\n-\t\t\tif(dbEntity==null) {\n-\t\t\t\treturn \"redirect:/admin/products/attributes/list.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(dbEntity.getProductOption().getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\treturn \"redirect:/admin/products/attributes/list.html\";\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t//validate price\n-\t\tBigDecimal submitedPrice = null;\n-\t\ttry {\n-\t\t\tsubmitedPrice = priceUtil.getAmount(attribute.getAttributePrice());\n-\t\t\tattribute.setProductAttributePrice(submitedPrice);\n-\t\t} catch (Exception e) {\n-\t\t\tObjectError error = new ObjectError(\"attributePrice\",messages.getMessage(\"NotEmpty.product.productPrice\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\t//validate sort order\n-\t\ttry {\n-\t\t\tInteger sortOrder = Integer.parseInt(attribute.getAttributeSortOrder());\n-\t\t\tattribute.setProductOptionSortOrder(sortOrder);\n-\t\t} catch(Exception e) {\n-\t\t\tObjectError error = new ObjectError(\"attributeSortOrder\",messages.getMessage(\"message.number.invalid\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\t//validate weight\n-\t\ttry {\n-\t\t\tInteger weight = Integer.parseInt(attribute.getAttributeAdditionalWeight());\n-\t\t\tattribute.setProductAttributeWeight(new BigDecimal(weight));\n-\t\t} catch(Exception e) {\n-\t\t\tObjectError error = new ObjectError(\"attributeAdditionalWeight\",messages.getMessage(\"message.number.invalid\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\t\n-\t\t\n-\t\tif(attribute.getProductOption()==null) {\n-\t\t\tObjectError error = new ObjectError(\"productOption.id\",messages.getMessage(\"message.productoption.required\", locale));\n-\t\t\tresult.addError(error);\n-\t\t\treturn \"admin-products-attribute-details\";\n-\t\t}\n-\n-\t\t\n-\t\t//check type\n-\t\tProductOption option = attribute.getProductOption();\n-\t\toption = productOptionService.getById(option.getId());\n-\t\tattribute.setProductOption(option);\n-\t\t\n-\t\tif(option.getProductOptionType().equals(TEXT_OPTION)) {\n-\t\t\t\n-\t\t\tif(dbEntity!=null && dbEntity.getProductOption().getProductOptionType().equals(TEXT_OPTION)) {//bcz it is overwrited by hidden product option value list\n-\t\t\t\tif(dbEntity.getProductOptionValue()!=null) {\n-\t\t\t\t\tProductOptionValue optVal = dbEntity.getProductOptionValue();\n-\t\t\t\t\tList<ProductOptionValueDescription> descriptions = attribute.getProductOptionValue().getDescriptionsList();\n-\t\t\t\t\tSet<ProductOptionValueDescription> descriptionsSet = new HashSet<ProductOptionValueDescription>();\n-\t\t\t\t\tfor(ProductOptionValueDescription description : descriptions) {\n-\t\t\t\t\t\tdescription.setProductOptionValue(optVal);\n-\t\t\t\t\t\tdescription.setName(description.getDescription().length()<15 ? description.getDescription() : description.getDescription().substring(0,15));\n-\t\t\t\t\t\tdescriptionsSet.add(description);\n-\t\t\t\t\t}\n-\t\t\t\t\toptVal.setDescriptions(descriptionsSet);\n-\t\t\t\t\toptVal.setProductOptionDisplayOnly(true);\n-\t\t\t\t\tproductOptionValueService.saveOrUpdate(optVal);\n-\t\t\t\t\tattribute.setProductOptionValue(optVal);\n-\t\t\t\t}\n-\t\t\t} else {//create a new value\n-\t\t\t\n-\t\t\t\t//create new option value\n-\t\t\t\tList<ProductOptionValueDescription> descriptions = attribute.getProductOptionValue().getDescriptionsList();\n-\t\t\t\tSet<ProductOptionValueDescription> newDescriptions = new HashSet<ProductOptionValueDescription>();\n-\t\t\t\tProductOptionValue newValue = new ProductOptionValue();\n-\t\t\t\tfor(ProductOptionValueDescription description : descriptions) {\n-\t\t\t\t\tProductOptionValueDescription optionValueDescription = new ProductOptionValueDescription();\n-\t\t\t\t\toptionValueDescription.setAuditSection(description.getAuditSection());\n-\t\t\t\t\toptionValueDescription.setLanguage(description.getLanguage());\n-\t\t\t\t\toptionValueDescription.setName(description.getDescription().length()<15 ? description.getDescription() : description.getDescription().substring(0,15));\n-\t\t\t\t\toptionValueDescription.setLanguage(description.getLanguage());\n-\t\t\t\t\toptionValueDescription.setDescription(description.getDescription());\n-\t\t\t\t\toptionValueDescription.setProductOptionValue(newValue);\n-\t\t\t\t\tnewDescriptions.add(optionValueDescription);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\t//code generation\n-\t\t\t\tString code = RandomStringUtils.randomAlphanumeric(10).toUpperCase();\n-\t\t\t\tnewValue.setCode(code);\n-\t\t\t\tnewValue.setMerchantStore(store);\n-\t\t\t\tnewValue.setProductOptionValueSortOrder(attribute.getProductOptionValue().getProductOptionValueSortOrder());\n-\t\t\t\tnewValue.setDescriptions(newDescriptions);\n-\t\t\t\tnewValue.setProductOptionDisplayOnly(true);\n-\t\t\t\tproductOptionValueService.save(newValue);\n-\t\t\t\tattribute.setProductOptionValue(newValue);\n-\t\t\t\tattribute.setAttributeDisplayOnly(true);\n-\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t}\n-\t\t\n-\n-\t\t\n-\t\tif(attribute.getProductOptionValue().getId()==null) {\n-\t\t\tObjectError error = new ObjectError(\"productOptionValue.id\",messages.getMessage(\"message.productoptionvalue.required\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"attribute\",attribute);\n-\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn \"admin-products-attribute-details\";\n-\t\t}\n-\t\t\n-\t\tproductAttributeService.saveOrUpdate(attribute);\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn \"admin-products-attribute-details\";\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/attributes/attribute/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteProductPrice(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString sAttributeid = request.getParameter(\"attributeId\");\n-\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong attributeId = Long.parseLong(sAttributeid);\n-\t\t\tProductAttribute attribute = productAttributeService.getById(attributeId);\n-\t\t\t\n-\n-\t\t\tif(attribute==null || attribute.getProduct().getMerchantStore().getId().intValue()!=store.getId()) {\n-\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t} \n-\t\t\t\n-\n-\t\t\tproductAttributeService.delete(attribute);\n-\t\t\t\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product price\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/attributes/getAttributeType.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> checkAttributeType(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\n-\t\tString sOptionId = request.getParameter(\"optionId\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\t\n-\t\tLong prodoptionId;\n-\t\tProductOption productOption = null;\n-\t\t\n-\t\ttry {\n-\t\t\tprodoptionId = Long.parseLong(sOptionId);\n-\t\t} catch (Exception e) {\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(\"Product Option id is not valid\");\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t\n-\t\t\tproductOption = productOptionService.getById(prodoptionId);\n-\t\t\t\n-\t\t\tif(productOption==null) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(productOption.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\n-\n-\n-\t\t\tMap entry = new HashMap();\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tentry.put(\"type\", productOption.getProductOptionType());\n-\t\t\tresp.addDataEntry(entry);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\t}\n-\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-products\", \"catalogue-products\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/ProductController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 1055,
          "patch": "@@ -1,1055 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.category.CategoryService;\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.services.catalog.product.image.ProductImageService;\n-import com.salesmanager.core.business.services.catalog.product.manufacturer.ManufacturerService;\n-import com.salesmanager.core.business.services.catalog.product.type.ProductTypeService;\n-import com.salesmanager.core.business.services.tax.TaxClassService;\n-import com.salesmanager.core.business.utils.CoreConfiguration;\n-import com.salesmanager.core.business.utils.ProductPriceUtils;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.category.Category;\n-import com.salesmanager.core.model.catalog.category.CategoryDescription;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.attribute.ProductAttribute;\n-import com.salesmanager.core.model.catalog.product.availability.ProductAvailability;\n-import com.salesmanager.core.model.catalog.product.description.ProductDescription;\n-import com.salesmanager.core.model.catalog.product.image.ProductImage;\n-import com.salesmanager.core.model.catalog.product.image.ProductImageDescription;\n-import com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer;\n-import com.salesmanager.core.model.catalog.product.price.ProductPrice;\n-import com.salesmanager.core.model.catalog.product.price.ProductPriceDescription;\n-import com.salesmanager.core.model.catalog.product.relationship.ProductRelationship;\n-import com.salesmanager.core.model.catalog.product.type.ProductType;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.tax.taxclass.TaxClass;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.CategoryUtils;\n-import com.salesmanager.shop.utils.DateUtil;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.*;\n-\n-import javax.imageio.ImageIO;\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.awt.image.BufferedImage;\n-import java.math.BigDecimal;\n-import java.util.*;\n-\n-@Controller\n-public class ProductController {\n-\t\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ProductController.class);\n-\t\n-\n-\t\n-\t@Inject\n-\tprivate ProductService productService;\n-\t\n-\t@Inject\n-\tprivate ManufacturerService manufacturerService;\n-\t\n-\t@Inject\n-\tprivate ProductTypeService productTypeService;\n-\t\n-\t@Inject\n-\tprivate ProductImageService productImageService;\n-\t\n-\t@Inject\n-\tprivate TaxClassService taxClassService;\n-\t\n-\t@Inject\n-\tprivate ProductPriceUtils priceUtil;\n-\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\t@Inject\n-\tprivate CoreConfiguration configuration;\n-\t\n-\t@Inject\n-\tCategoryService categoryService;\n-\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/editProduct.html\", method=RequestMethod.GET)\n-\tpublic String displayProductEdit(@RequestParam(\"id\") long productId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\treturn displayProduct(productId,model,request,response);\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/viewEditProduct.html\", method=RequestMethod.GET)\n-\tpublic String displayProductEdit(@RequestParam(\"sku\") String sku, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\tProduct dbProduct = productService.getByCode(sku, language);\n-\t\t\n-\t\tlong productId = -1;//non existent\n-\t\tif(dbProduct!=null) {\n-\t\t\tproductId = dbProduct.getId();\n-\t\t}\n-\t\t\n-\t\treturn displayProduct(productId,model,request,response);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/createProduct.html\", method=RequestMethod.GET)\n-\tpublic String displayProductCreate(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\treturn displayProduct(null,model,request,response);\n-\n-\t}\n-\t\n-\t\n-\t\n-\tprivate String displayProduct(Long productId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\n-\t\tList<Manufacturer> manufacturers = manufacturerService.listByStore(store, language);\n-\t\t\n-\t\tList<ProductType> productTypes = productTypeService.list();\n-\t\t\n-\t\tList<TaxClass> taxClasses = taxClassService.listByStore(store);\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\t\t\n-\n-\t\t\n-\t\tcom.salesmanager.shop.admin.model.catalog.Product product = new com.salesmanager.shop.admin.model.catalog.Product();\n-\t\tList<ProductDescription> descriptions = new ArrayList<ProductDescription>();\n-\n-\t\tif(productId!=null && productId!=0) {//edit mode\n-\t\t\t\n-\n-\t\t\tProduct dbProduct = productService.getById(productId);\n-\t\t\t\n-\t\t\tif(dbProduct==null || dbProduct.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\tproduct.setProduct(dbProduct);\n-\t\t\tSet<ProductDescription> productDescriptions = dbProduct.getDescriptions();\n-\t\t\t\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\t\n-\t\t\t\tProductDescription productDesc = null;\n-\t\t\t\tfor(ProductDescription desc : productDescriptions) {\n-\t\t\t\t\t\n-\t\t\t\t\tLanguage lang = desc.getLanguage();\n-\t\t\t\t\tif(lang.getCode().equals(l.getCode())) {\n-\t\t\t\t\t\tproductDesc = desc;\n-\t\t\t\t\t}\n-\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif(productDesc==null) {\n-\t\t\t\t\tproductDesc = new ProductDescription();\n-\t\t\t\t\tproductDesc.setLanguage(l);\n-\t\t\t\t}\n-\n-\t\t\t\tdescriptions.add(productDesc);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tfor(ProductImage image : dbProduct.getImages()) {\n-\t\t\t\tif(image.isDefaultImage()) {\n-\t\t\t\t\tproduct.setProductImage(image);\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tProductAvailability productAvailability = null;\n-\t\t\tProductPrice productPrice = null;\n-\t\t\t\n-\t\t\tSet<ProductAvailability> availabilities = dbProduct.getAvailabilities();\n-\t\t\tif(availabilities!=null && availabilities.size()>0) {\n-\t\t\t\t\n-\t\t\t\tfor(ProductAvailability availability : availabilities) {\n-\t\t\t\t\tif(availability.getRegion().equals(com.salesmanager.core.business.constants.Constants.ALL_REGIONS)) {\n-\t\t\t\t\t\tproductAvailability = availability;\n-\t\t\t\t\t\tSet<ProductPrice> prices = availability.getPrices();\n-\t\t\t\t\t\tfor(ProductPrice price : prices) {\n-\t\t\t\t\t\t\tif(price.isDefaultPrice()) {\n-\t\t\t\t\t\t\t\tproductPrice = price;\n-\t\t\t\t\t\t\t\tproduct.setProductPrice(priceUtil.getAdminFormatedAmount(store, productPrice.getProductPriceAmount()));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(productAvailability==null) {\n-\t\t\t\tproductAvailability = new ProductAvailability();\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(productPrice==null) {\n-\t\t\t\tproductPrice = new ProductPrice();\n-\t\t\t}\n-\t\t\t\n-\t\t\tproduct.setAvailability(productAvailability);\n-\t\t\tproduct.setPrice(productPrice);\n-\t\t\tproduct.setDescriptions(descriptions);\n-\t\t\t\n-\t\t\t\n-\t\t\tproduct.setDateAvailable(DateUtil.formatDate(dbProduct.getDateAvailable()));\n-\n-\n-\t\t} else {\n-\n-\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\t\n-\t\t\t\tProductDescription desc = new ProductDescription();\n-\t\t\t\tdesc.setLanguage(l);\n-\t\t\t\tdescriptions.add(desc);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tProduct prod = new Product();\n-\t\t\t\n-\t\t\tprod.setAvailable(true);\n-\t\t\t\n-\t\t\tProductAvailability productAvailability = new ProductAvailability();\n-\t\t\tProductPrice price = new ProductPrice();\n-\t\t\tproduct.setPrice(price);\n-\t\t\tproduct.setAvailability(productAvailability);\n-\t\t\tproduct.setProduct(prod);\n-\t\t\tproduct.setDescriptions(descriptions);\n-\t\t\tproduct.setDateAvailable(DateUtil.formatDate(new Date()));\n-\n-\n-\t\t}\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\tmodel.addAttribute(\"product\",product);\n-\t\tmodel.addAttribute(\"manufacturers\", manufacturers);\n-\t\tmodel.addAttribute(\"productTypes\", productTypes);\n-\t\tmodel.addAttribute(\"taxClasses\", taxClasses);\n-\t\treturn \"admin-products-edit\";\n-\t}\n-\t\n-\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/save.html\", method=RequestMethod.POST)\n-\tpublic String saveProduct(@Valid @ModelAttribute(\"product\") com.salesmanager.shop.admin.model.catalog.Product  product, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<Manufacturer> manufacturers = manufacturerService.listByStore(store, language);\n-\t\t\n-\t\tList<ProductType> productTypes = productTypeService.list();\n-\t\t\n-\t\tList<TaxClass> taxClasses = taxClassService.listByStore(store);\n-\t\t\n-\t\tList<Language> languages = store.getLanguages();\n-\t\t\n-\t\tmodel.addAttribute(\"manufacturers\", manufacturers);\n-\t\tmodel.addAttribute(\"productTypes\", productTypes);\n-\t\tmodel.addAttribute(\"taxClasses\", taxClasses);\n-\t\t\n-\t\tboolean productAlreadyExists = false;\n-\t\tif (!StringUtils.isBlank(product.getProduct().getSku()) && (product.getProduct().getId() == null || product.getProduct().getId().longValue() == 0)) {\n-\t\t\ttry {\n-\t\t\t\tProduct productByCode = productService.getByCode(product.getProduct().getSku(),language);\n-\t\t\t\tproductAlreadyExists = productByCode != null;\n-\n-\t\t\t\tif(productAlreadyExists) throw new Exception();\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\tObjectError error = new ObjectError(\"product.sku\",messages.getMessage(\"message.sku.exists\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t//validate price\n-\t\tBigDecimal submitedPrice = null;\n-\t\ttry {\n-\t\t\tsubmitedPrice = priceUtil.getAmount(product.getProductPrice());\n-\t\t} catch (Exception e) {\n-\t\t\tObjectError error = new ObjectError(\"productPrice\",messages.getMessage(\"NotEmpty.product.productPrice\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\tDate date = new Date();\n-\t\tif(!StringUtils.isBlank(product.getDateAvailable())) {\n-\t\t\ttry {\n-\t\t\t\tdate = DateUtil.getDate(product.getDateAvailable());\n-\t\t\t\tproduct.getAvailability().setProductDateAvailable(date);\n-\t\t\t\tproduct.setDateAvailable(DateUtil.formatDate(date));\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tObjectError error = new ObjectError(\"dateAvailable\",messages.getMessage(\"message.invalid.date\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\n-\t\t\n-\t\t//validate image\n-\t\tif(product.getImage()!=null && !product.getImage().isEmpty()) {\n-\t\t\t\n-\t\t\ttry {\n-\t\t\t\t\n-\t\t\t\tString maxHeight = configuration.getProperty(\"PRODUCT_IMAGE_MAX_HEIGHT_SIZE\");\n-\t\t\t\tString maxWidth = configuration.getProperty(\"PRODUCT_IMAGE_MAX_WIDTH_SIZE\");\n-\t\t\t\tString maxSize = configuration.getProperty(\"PRODUCT_IMAGE_MAX_SIZE\");\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\tBufferedImage image = ImageIO.read(product.getImage().getInputStream());\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\tif(!StringUtils.isBlank(maxHeight)) {\n-\t\t\t\t\t\n-\t\t\t\t\tint maxImageHeight = Integer.parseInt(maxHeight);\n-\t\t\t\t\tif(image.getHeight()>maxImageHeight) {\n-\t\t\t\t\t\tObjectError error = new ObjectError(\"image\",messages.getMessage(\"message.image.height\", locale) + \" {\"+maxHeight+\"}\");\n-\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif(!StringUtils.isBlank(maxWidth)) {\n-\t\t\t\t\t\n-\t\t\t\t\tint maxImageWidth = Integer.parseInt(maxWidth);\n-\t\t\t\t\tif(image.getWidth()>maxImageWidth) {\n-\t\t\t\t\t\tObjectError error = new ObjectError(\"image\",messages.getMessage(\"message.image.width\", locale) + \" {\"+maxWidth+\"}\");\n-\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif(!StringUtils.isBlank(maxSize)) {\n-\t\t\t\t\t\n-\t\t\t\t\tint maxImageSize = Integer.parseInt(maxSize);\n-\t\t\t\t\tif(product.getImage().getSize()>maxImageSize) {\n-\t\t\t\t\t\tObjectError error = new ObjectError(\"image\",messages.getMessage(\"message.image.size\", locale) + \" {\"+maxSize+\"}\");\n-\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\n-\t\t\t\t\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"Cannot validate product image\", e);\n-\t\t\t}\n-\n-\t\t}\n-\t\t\n-\t\t\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn \"admin-products-edit\";\n-\t\t}\n-\t\t\n-\t\tProduct newProduct = product.getProduct();\n-\t\tProductAvailability newProductAvailability = null;\n-\t\tProductPrice newProductPrice = null;\n-\t\t\n-\t\tSet<ProductPriceDescription> productPriceDescriptions = null;\n-\t\t\n-\t\t//get tax class\n-\t\t//TaxClass taxClass = newProduct.getTaxClass();\n-\t\t//TaxClass dbTaxClass = taxClassService.getById(taxClass.getId());\n-\t\tSet<ProductPrice> prices = new HashSet<ProductPrice>();\n-\t\tSet<ProductAvailability> availabilities = new HashSet<ProductAvailability>();\t\n-\n-\t\tif(product.getProduct().getId()!=null && product.getProduct().getId().longValue()>0) {\n-\t\t\n-\t\t\n-\t\t\t//get actual product\n-\t\t\tnewProduct = productService.getById(product.getProduct().getId());\n-\t\t\tif(newProduct!=null && newProduct.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\t//copy properties\n-\t\t\tnewProduct.setSku(product.getProduct().getSku());\n-\t\t\tnewProduct.setRefSku(product.getProduct().getRefSku());\n-\t\t\tnewProduct.setAvailable(product.getProduct().isAvailable());\n-\t\t\tnewProduct.setDateAvailable(date);\n-\t\t\tnewProduct.setManufacturer(product.getProduct().getManufacturer());\n-\t\t\tnewProduct.setType(product.getProduct().getType());\n-\t\t\tnewProduct.setProductHeight(product.getProduct().getProductHeight());\n-\t\t\tnewProduct.setProductLength(product.getProduct().getProductLength());\n-\t\t\tnewProduct.setProductWeight(product.getProduct().getProductWeight());\n-\t\t\tnewProduct.setProductWidth(product.getProduct().getProductWidth());\n-\t\t\tnewProduct.setProductVirtual(product.getProduct().isProductVirtual());\n-\t\t\tnewProduct.setProductShipeable(product.getProduct().isProductShipeable());\n-\t\t\tnewProduct.setTaxClass(product.getProduct().getTaxClass());\n-\t\t\tnewProduct.setSortOrder(product.getProduct().getSortOrder());\n-\n-\t\t\tSet<ProductAvailability> avails = newProduct.getAvailabilities();\n-\t\t\tif(avails !=null && avails.size()>0) {\n-\t\t\t\t\n-\t\t\t\tfor(ProductAvailability availability : avails) {\n-\t\t\t\t\tif(availability.getRegion().equals(com.salesmanager.core.business.constants.Constants.ALL_REGIONS)) {\n-\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tnewProductAvailability = availability;\n-\t\t\t\t\t\tSet<ProductPrice> productPrices = availability.getPrices();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor(ProductPrice price : productPrices) {\n-\t\t\t\t\t\t\tif(price.isDefaultPrice()) {\n-\t\t\t\t\t\t\t\tnewProductPrice = price;\n-\t\t\t\t\t\t\t\tnewProductPrice.setProductPriceAmount(submitedPrice);\n-\t\t\t\t\t\t\t\tproductPriceDescriptions = price.getDescriptions();\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tprices.add(price);\n-\t\t\t\t\t\t\t}\t\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tavailabilities.add(availability);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tfor(ProductImage image : newProduct.getImages()) {\n-\t\t\t\tif(image.isDefaultImage()) {\n-\t\t\t\t\tproduct.setProductImage(image);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tif(newProductPrice==null) {\n-\t\t\tnewProductPrice = new ProductPrice();\n-\t\t\tnewProductPrice.setDefaultPrice(true);\n-\t\t\tnewProductPrice.setProductPriceAmount(submitedPrice);\n-\t\t}\n-\t\t\n-\t\tif(product.getProductImage()!=null && product.getProductImage().getId() == null) {\n-\t\t\tproduct.setProductImage(null);\n-\t\t}\n-\t\t\n-\t\tif(productPriceDescriptions==null) {\n-\t\t\tproductPriceDescriptions = new HashSet<ProductPriceDescription>();\n-\t\t\tfor(ProductDescription description : product.getDescriptions()) {\n-\t\t\t\tProductPriceDescription ppd = new ProductPriceDescription();\n-\t\t\t\tppd.setProductPrice(newProductPrice);\n-\t\t\t\tppd.setLanguage(description.getLanguage());\n-\t\t\t\tppd.setName(ProductPriceDescription.DEFAULT_PRICE_DESCRIPTION);\n-\t\t\t\tproductPriceDescriptions.add(ppd);\n-\t\t\t}\n-\t\t\tnewProductPrice.setDescriptions(productPriceDescriptions);\n-\t\t}\n-\t\t\n-\t\tnewProduct.setMerchantStore(store);\n-\t\t\n-\t\tif(newProductAvailability==null) {\n-\t\t\tnewProductAvailability = new ProductAvailability();\n-\t\t}\n-\t\t\n-\n-\t\tnewProductAvailability.setProductQuantity(product.getAvailability().getProductQuantity());\n-\t\tnewProductAvailability.setProductQuantityOrderMin(product.getAvailability().getProductQuantityOrderMin());\n-\t\tnewProductAvailability.setProductQuantityOrderMax(product.getAvailability().getProductQuantityOrderMax());\n-\t\tnewProductAvailability.setProduct(newProduct);\n-\t\tnewProductAvailability.setPrices(prices);\n-\t\tavailabilities.add(newProductAvailability);\n-\t\t\t\n-\t\tnewProductPrice.setProductAvailability(newProductAvailability);\n-\t\tprices.add(newProductPrice);\n-\t\t\t\n-\t\tnewProduct.setAvailabilities(availabilities);\n-\n-\t\tSet<ProductDescription> descriptions = new HashSet<ProductDescription>();\n-\t\tif(product.getDescriptions()!=null && product.getDescriptions().size()>0) {\n-\t\t\t\n-\t\t\tfor(ProductDescription description : product.getDescriptions()) {\n-\t\t\t\tdescription.setProduct(newProduct);\n-\t\t\t\tdescriptions.add(description);\n-\t\t\t\t\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tnewProduct.setDescriptions(descriptions);\n-\t\tproduct.setDateAvailable(DateUtil.formatDate(date));\n-\n-\t\t\n-\t\t\n-\t\tif(product.getImage()!=null && !product.getImage().isEmpty()) {\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tString imageName = product.getImage().getOriginalFilename();\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tProductImage productImage = new ProductImage();\n-\t\t\tproductImage.setDefaultImage(true);\n-\t\t\tproductImage.setImage(product.getImage().getInputStream());\n-\t\t\tproductImage.setProductImage(imageName);\n-\t\t\t\n-\t\t\t\n-\t\t\tList<ProductImageDescription> imagesDescriptions = new ArrayList<ProductImageDescription>();\n-\n-\t\t\tfor(Language l : languages) {\n-\t\t\t\t\n-\t\t\t\tProductImageDescription imageDescription = new ProductImageDescription();\n-\t\t\t\timageDescription.setName(imageName);\n-\t\t\t\timageDescription.setLanguage(l);\n-\t\t\t\timageDescription.setProductImage(productImage);\n-\t\t\t\timagesDescriptions.add(imageDescription);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tproductImage.setDescriptions(imagesDescriptions);\n-\t\t\tproductImage.setProduct(newProduct);\n-\t\t\t\n-\t\t\tnewProduct.getImages().add(productImage);\n-\t\t\t\n-\t\t\t//productService.saveOrUpdate(newProduct);\n-\t\t\t\n-\t\t\t//product displayed\n-\t\t\tproduct.setProductImage(productImage);\n-\t\t\t\n-\t\t\t\n-\t\t} //else {\n-\t\t\t\n-\t\t\t//productService.saveOrUpdate(newProduct);\n-\t\t\t\n-\t\t//}\n-\t\t\n-\t\tproductService.create(newProduct);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\n-\t\treturn \"admin-products-edit\";\n-\t}\n-\t\n-\t\n-\t/**\n-\t * Creates a duplicate product with the same inner object graph\n-\t * Will ignore SKU, reviews and images\n-\t * @param id\n-\t * @param result\n-\t * @param model\n-\t * @param request\n-\t * @param locale\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/product/duplicate.html\", method=RequestMethod.POST)\n-\tpublic String duplicateProduct(@ModelAttribute(\"productId\") Long  id, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<Manufacturer> manufacturers = manufacturerService.listByStore(store, language);\n-\t\tList<ProductType> productTypes = productTypeService.list();\n-\t\tList<TaxClass> taxClasses = taxClassService.listByStore(store);\n-\n-\t\tmodel.addAttribute(\"manufacturers\", manufacturers);\n-\t\tmodel.addAttribute(\"productTypes\", productTypes);\n-\t\tmodel.addAttribute(\"taxClasses\", taxClasses);\n-\t\t\n-\t\tProduct dbProduct = productService.getById(id);\n-\t\tProduct newProduct = new Product();\n-\t\t\n-\t\tif(dbProduct==null || dbProduct.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\t//Make a copy of the product\n-\t\tcom.salesmanager.shop.admin.model.catalog.Product product = new com.salesmanager.shop.admin.model.catalog.Product();\n-\t\t\n-\t\tSet<ProductAvailability> availabilities = new HashSet<ProductAvailability>();\n-\t\t//availability - price\n-\t\tfor(ProductAvailability pAvailability : dbProduct.getAvailabilities()) {\n-\t\t\t\n-\t\t\tProductAvailability availability = new ProductAvailability();\n-\t\t\tavailability.setProductDateAvailable(pAvailability.getProductDateAvailable());\n-\t\t\tavailability.setProductIsAlwaysFreeShipping(pAvailability.getProductIsAlwaysFreeShipping());\n-\t\t\tavailability.setProductQuantity(pAvailability.getProductQuantity());\n-\t\t\tavailability.setProductQuantityOrderMax(pAvailability.getProductQuantityOrderMax());\n-\t\t\tavailability.setProductQuantityOrderMin(pAvailability.getProductQuantityOrderMin());\n-\t\t\tavailability.setProductStatus(pAvailability.getProductStatus());\n-\t\t\tavailability.setRegion(pAvailability.getRegion());\n-\t\t\tavailability.setRegionVariant(pAvailability.getRegionVariant());\n-\t\t\tavailability.setProduct(newProduct);\n-\n-\n-\t\t\t\n-\t\t\tSet<ProductPrice> prices = pAvailability.getPrices();\n-\t\t\tfor(ProductPrice pPrice : prices) {\n-\t\t\t\t\n-\t\t\t\tProductPrice price = new ProductPrice();\n-\t\t\t\tprice.setDefaultPrice(pPrice.isDefaultPrice());\n-\t\t\t\tprice.setProductPriceAmount(pPrice.getProductPriceAmount());\n-\t\t\t\tprice.setProductAvailability(availability);\n-\t\t\t\tprice.setProductPriceSpecialAmount(pPrice.getProductPriceSpecialAmount());\n-\t\t\t\tprice.setProductPriceSpecialEndDate(pPrice.getProductPriceSpecialEndDate());\n-\t\t\t\tprice.setProductPriceSpecialStartDate(pPrice.getProductPriceSpecialStartDate());\n-\t\t\t\tprice.setProductPriceType(pPrice.getProductPriceType());\n-\t\t\t\t\n-\t\t\t\tSet<ProductPriceDescription> priceDescriptions = new HashSet<ProductPriceDescription>();\n-\t\t\t\t//price descriptions\n-\t\t\t\tfor(ProductPriceDescription pPriceDescription : pPrice.getDescriptions()) {\n-\t\t\t\t\t\n-\t\t\t\t\tProductPriceDescription productPriceDescription = new ProductPriceDescription();\n-\t\t\t\t\tproductPriceDescription.setAuditSection(pPriceDescription.getAuditSection());\n-\t\t\t\t\tproductPriceDescription.setDescription(pPriceDescription.getDescription());\n-\t\t\t\t\tproductPriceDescription.setName(pPriceDescription.getName());\n-\t\t\t\t\tproductPriceDescription.setLanguage(pPriceDescription.getLanguage());\n-\t\t\t\t\tproductPriceDescription.setProductPrice(price);\n-\t\t\t\t\tpriceDescriptions.add(productPriceDescription);\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\tprice.setDescriptions(priceDescriptions);\n-\t\t\t\tif(price.isDefaultPrice()) {\n-\t\t\t\t\tproduct.setPrice(price);\n-\t\t\t\t\tproduct.setProductPrice(priceUtil.getAdminFormatedAmount(store, price.getProductPriceAmount()));\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tavailability.getPrices().add(price);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\n-\t\t\tif(availability.getRegion().equals(com.salesmanager.core.business.constants.Constants.ALL_REGIONS)) {\n-\t\t\t\tproduct.setAvailability(availability);\n-\t\t\t}\n-\t\t\t\n-\t\t\tavailabilities.add(availability);\n-\t\t}\n-\t\t\n-\t\tnewProduct.setAvailabilities(availabilities);\n-\t\t\n-\t\t\n-\t\t\n-\t\t//attributes\n-\t\tSet<ProductAttribute> attributes = new HashSet<ProductAttribute>();\n-\t\tfor(ProductAttribute pAttribute : dbProduct.getAttributes()) {\n-\t\t\t\n-\t\t\tProductAttribute attribute = new ProductAttribute();\n-\t\t\tattribute.setAttributeDefault(pAttribute.getAttributeDefault());\n-\t\t\tattribute.setAttributeDiscounted(pAttribute.getAttributeDiscounted());\n-\t\t\tattribute.setAttributeDisplayOnly(pAttribute.getAttributeDisplayOnly());\n-\t\t\tattribute.setAttributeRequired(pAttribute.getAttributeRequired());\n-\t\t\tattribute.setProductAttributePrice(pAttribute.getProductAttributePrice());\n-\t\t\tattribute.setProductAttributeIsFree(pAttribute.getProductAttributeIsFree());\n-\t\t\tattribute.setProductAttributeWeight(pAttribute.getProductAttributeWeight());\n-\t\t\tattribute.setProductOption(pAttribute.getProductOption());\n-\t\t\tattribute.setProductOptionSortOrder(pAttribute.getProductOptionSortOrder());\n-\t\t\tattribute.setProductOptionValue(pAttribute.getProductOptionValue());\n-\t\t\tattribute.setProduct(newProduct);\n-\t\t\tattributes.add(attribute);\n-\t\t\t\t\t\t\n-\t\t}\n-\t\tnewProduct.setAttributes(attributes);\n-\t\t\n-\t\t//relationships\n-\t\tSet<ProductRelationship> relationships = new HashSet<ProductRelationship>();\n-\t\tfor(ProductRelationship pRelationship : dbProduct.getRelationships()) {\n-\t\t\t\n-\t\t\tProductRelationship relationship = new ProductRelationship();\n-\t\t\trelationship.setActive(pRelationship.isActive());\n-\t\t\trelationship.setCode(pRelationship.getCode());\n-\t\t\trelationship.setRelatedProduct(pRelationship.getRelatedProduct());\n-\t\t\trelationship.setStore(store);\n-\t\t\trelationship.setProduct(newProduct);\n-\t\t\trelationships.add(relationship);\n-\n-\t\t}\n-\t\t\n-\t\tnewProduct.setRelationships(relationships);\n-\t\t\n-\t\t//product description\n-\t\tSet<ProductDescription> descsset = new HashSet<ProductDescription>();\n-\t\tList<ProductDescription> desclist = new ArrayList<ProductDescription>();\n-\t\tSet<ProductDescription> descriptions = dbProduct.getDescriptions();\n-\t\tfor(ProductDescription pDescription : descriptions) {\n-\t\t\t\n-\t\t\tProductDescription description = new ProductDescription();\n-\t\t\tdescription.setAuditSection(pDescription.getAuditSection());\n-\t\t\tdescription.setName(pDescription.getName());\n-\t\t\tdescription.setDescription(pDescription.getDescription());\n-\t\t\tdescription.setLanguage(pDescription.getLanguage());\n-\t\t\tdescription.setMetatagDescription(pDescription.getMetatagDescription());\n-\t\t\tdescription.setMetatagKeywords(pDescription.getMetatagKeywords());\n-\t\t\tdescription.setMetatagTitle(pDescription.getMetatagTitle());\n-\t\t\tdescription.setProduct(newProduct);\n-\t\t\tdescsset.add(description);\n-\t\t\tdesclist.add(description);\n-\t\t}\n-\t\tnewProduct.setDescriptions(descsset);\n-\t\tproduct.setDescriptions(desclist);\n-\t\t\n-\t\t//product\n-\t\tnewProduct.setAuditSection(dbProduct.getAuditSection());\n-\t\tnewProduct.setAvailable(dbProduct.isAvailable());\n-\t\t\n-\t\t\n-\n-\t\t//copy\n-\t\t// newProduct.setCategories(dbProduct.getCategories());\n-\t\tnewProduct.setDateAvailable(dbProduct.getDateAvailable());\n-\t\tnewProduct.setManufacturer(dbProduct.getManufacturer());\n-\t\tnewProduct.setMerchantStore(store);\n-\t\tnewProduct.setProductHeight(dbProduct.getProductHeight());\n-\t\tnewProduct.setProductIsFree(dbProduct.getProductIsFree());\n-\t\tnewProduct.setProductLength(dbProduct.getProductLength());\n-\t\tnewProduct.setProductOrdered(dbProduct.getProductOrdered());\n-\t\tnewProduct.setProductWeight(dbProduct.getProductWeight());\n-\t\tnewProduct.setProductWidth(dbProduct.getProductWidth());\n-\t\tnewProduct.setSortOrder(dbProduct.getSortOrder());\n-\t\tnewProduct.setTaxClass(dbProduct.getTaxClass());\n-\t\tnewProduct.setType(dbProduct.getType());\n-\t\tnewProduct.setSku(UUID.randomUUID().toString().replace(\"-\",\"\"));\n-\t\tnewProduct.setProductVirtual(dbProduct.isProductVirtual());\n-\t\tnewProduct.setProductShipeable(dbProduct.isProductShipeable());\n-\t\t\n-\t\tproductService.update(newProduct);\n-\t\t\n-\t\tSet<Category> categories = dbProduct.getCategories();\n-\t\tfor(Category category : categories) {\n-\t\t\tCategory categoryCopy = categoryService.getById(category.getId(), store.getId());\n-\t\t\tnewProduct.getCategories().add(categoryCopy);\n-\t\t\tproductService.update(newProduct);\n-\t\t}\n-\t\t\n-\t\tproduct.setProduct(newProduct);\n-\t\tmodel.addAttribute(\"product\", product);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\n-\t\treturn \"redirect:/admin/products/editProduct.html?id=\" + newProduct.getId();\n-\t}\n-\n-\t\n-\t/**\n-\t * Removes a product image based on the productimage id\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t */\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/product/removeImage.html\")\n-\tpublic @ResponseBody ResponseEntity<String> removeImage(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString iid = request.getParameter(\"imageId\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(iid);\n-\t\t\tProductImage productImage = productImageService.getById(id);\n-\t\t\tif(productImage==null || productImage.getProduct().getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\t\n-\t\t\t} else {\n-\t\t\t\t\n-\t\t\t\tproductImageService.removeProductImage(productImage);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\t/**\n-\t * List all categories and let the merchant associate the product to a category\n-\t * @param productId\n-\t * @param model\n-\t * @param request\n-\t * @param response\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/displayProductToCategories.html\", method=RequestMethod.GET)\n-\tpublic String displayAddProductToCategories(@RequestParam(\"id\") long productId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\t\n-\t\t//get the product and validate it belongs to the current merchant\n-\t\tProduct product = productService.getById(productId);\n-\t\t\n-\t\tif(product==null) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\n-\t\t//get parent categories\n-\t\tList<Category> categories = categoryService.listByStore(store,language);\n-\t\tList<com.salesmanager.shop.admin.model.catalog.Category> readableCategories = CategoryUtils.readableCategoryListConverter(categories, language);\n-\t\t\n-\t\tmodel.addAttribute(\"product\", product);\n-\t\tmodel.addAttribute(\"categories\", readableCategories);\n-\t\treturn \"catalogue-product-categories\";\n-\t\t\n-\t}\n-\t\n-\t/**\n-\t * List all categories associated to a Product\n-\t * @param request\n-\t * @param response\n-\t * @return\n-\t */\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/product-categories/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageProductCategories(HttpServletRequest request, HttpServletResponse response) {\n-\n-\t\tString sProductId = request.getParameter(\"productId\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tLong productId;\n-\t\tProduct product = null;\n-\t\t\n-\t\ttry {\n-\t\t\tproductId = Long.parseLong(sProductId);\n-\t\t} catch (Exception e) {\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\t\t\n-\t\ttry {\n-\n-\t\t\tproduct = productService.getById(productId);\n-\n-\t\t\t\n-\t\t\tif(product==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\n-\t\t\t\n-\t\t\tSet<Category> categories = product.getCategories();\n-\t\t\t\n-\n-\t\t\tfor(Category category : categories) {\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"categoryId\", category.getId());\n-\t\t\t\t\n-\t\t\t\tSet<CategoryDescription> descriptions = category.getDescriptions();\n-\t\t\t\tString categoryName = category.getDescriptions().iterator().next().getName();\n-\t\t\t\tfor(CategoryDescription description : descriptions){\n-\t\t\t\t\tif(description.getLanguage().getCode().equals(language.getCode())) {\n-\t\t\t\t\t\tcategoryName = description.getName();\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tentry.put(\"name\", categoryName);\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/product-categories/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteProductFromCategory(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString sCategoryid = request.getParameter(\"categoryId\");\n-\t\tString sProductId = request.getParameter(\"productId\");\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong categoryId = Long.parseLong(sCategoryid);\n-\t\t\tLong productId = Long.parseLong(sProductId);\n-\t\t\t\n-\t\t\tCategory category = categoryService.getById(categoryId, store.getId());\n-\t\t\tProduct product = productService.getById(productId);\n-\t\t\t\n-\t\t\tif(category==null || category.getMerchantStore().getId()!=store.getId()) {\n-\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t} \n-\t\t\t\n-\t\t\tif(product==null || product.getMerchantStore().getId()!=store.getId()) {\n-\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t} \n-\t\t\t\n-\t\t\tproduct.getCategories().remove(category);\n-\t\t\tproductService.update(product);\t\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting category\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/addProductToCategories.html\", method=RequestMethod.POST)\n-\tpublic String addProductToCategory(@RequestParam(\"productId\") long productId, @RequestParam(\"id\") long categoryId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\t\n-\t\t//get the product and validate it belongs to the current merchant\n-\t\tProduct product = productService.getById(productId);\n-\t\t\n-\t\tif(product==null) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\n-\t\t//get parent categories\n-\t\tList<Category> categories = categoryService.listByStore(store,language);\n-\t\t\n-\t\tCategory category = categoryService.getById(categoryId, store.getId(), language.getId());\n-\t\t\n-\t\tif(category==null) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tif(category.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tproduct.getCategories().add(category);\n-\t\t\n-\t\tproductService.update(product);\n-\t\t\n-\t\tList<com.salesmanager.shop.admin.model.catalog.Category> readableCategories = CategoryUtils.readableCategoryListConverter(categories, language);\n-\t\t\n-\t\tmodel.addAttribute(\"product\", product);\n-\t\tmodel.addAttribute(\"categories\", readableCategories);\n-\t\t\n-\t\treturn \"catalogue-product-categories\";\n-\t\t\n-\t}\n-\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-products\", \"catalogue-products\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\t\n-\t}\n-}\n\\ No newline at end of file"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/ProductImagesController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 502,
          "patch": "@@ -1,502 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.services.catalog.product.image.ProductImageService;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.image.ProductImage;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.content.ProductImages;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.ImageFilePath;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.FieldError;\n-import org.springframework.web.bind.annotation.*;\n-import org.springframework.web.multipart.MultipartFile;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.*;\n-\n-@Controller\n-public class ProductImagesController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ProductImagesController.class);\n-\t\n-\t\n-\n-\t@Inject\n-\tprivate ProductService productService;\n-\t\n-\n-\t@Inject\n-\tprivate ProductImageService productImageService;\n-\t\n-\t@Inject\n-\tprivate LabelUtils messages;\n-\t\n-\t@Inject\n-\t@Qualifier(\"img\")\n-\tprivate ImageFilePath imageUtils;\n-\t\n-\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/images/list.html\", method=RequestMethod.GET)\n-\tpublic String displayProductImages(@RequestParam(\"id\") long productId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tProduct product = productService.getById(productId);\n-\t\t\n-\t\tif(product==null) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"product\",product);\n-\t\treturn ControllerConstants.Tiles.Product.productImages;\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/images/url/list.html\", method=RequestMethod.GET)\n-\tpublic String displayProductImagesUrl(@RequestParam(\"id\") long productId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tProduct product = productService.getById(productId);\n-\t\t\n-\t\tif(product==null) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-        Map< String, String > mediaTypes = new HashMap<String, String>();  \n-        mediaTypes.put(\"0\", \"IMAGE\");  \n-        mediaTypes.put(\"1\", \"VIDEO\");   \n-\t\t\n-\t\tProductImage productImage = new ProductImage();\n-\t\t\n-\t\tmodel.addAttribute(\"productImage\", productImage);\n-\t\tmodel.addAttribute(\"product\",product);\n-\t\tmodel.addAttribute(\"mediaTypes\",mediaTypes);\n-\t\treturn ControllerConstants.Tiles.Product.productImagesUrl;\n-\t\t\n-\t}\n-\t\n-\t\n-\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/images/page.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageProductImages(HttpServletRequest request, HttpServletResponse response) {\n-\n-\t\tString sProductId = request.getParameter(\"productId\");\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tLong productId;\n-\t\tProduct product = null;\n-\t\t\n-\t\ttry {\n-\t\t\tproductId = Long.parseLong(sProductId);\n-\t\t} catch (Exception e) {\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t\n-\t\t\tproduct = productService.getById(productId);\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Merchant id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\t\t\tSet<ProductImage> images = product.getImages();\n-\t\t\t\n-\t\t\tif(images!=null) {\n-\t\t\t\t\n-\t\t\t\tfor(ProductImage image : images) {\n-\t\t\t\t\t\n-\t\t\t\t\t\tString imagePath = imageUtils.buildProductImageUtils(store, product, image.getProductImage());\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\t\t//entry.put(\"picture\", new StringBuilder().append(request.getContextPath()).append(imagePath).toString());\n-\t\t\t\t\t\tentry.put(\"picture\", imagePath);\n-\t\t\t\t\t\tentry.put(\"name\", image.getProductImage());\n-\t\t\t\t\t\tentry.put(\"id\",image.getId());\n-\t\t\t\t\t\tentry.put(\"defaultImageCheckmark\", image.isDefaultImage() ? \"/resources/img/admin/checkmark_checked.png\" : \"/resources/img/admin/checkmark_unchecked.png\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\n-\t}\n-\t\n-\t\n-\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/images/url/page.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageProductImagesUrl(HttpServletRequest request, HttpServletResponse response) {\n-\n-\t\tString sProductId = request.getParameter(\"productId\");\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tLong productId;\n-\t\tProduct product = null;\n-\t\t\n-\t\ttry {\n-\t\t\tproductId = Long.parseLong(sProductId);\n-\t\t} catch (Exception e) {\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t\n-\t\t\tproduct = productService.getById(productId);\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Merchant id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tSet<ProductImage> images = product.getImages();\n-\t\t\t\n-\t\t\tif(images!=null) {\n-\t\t\t\t\n-\t\t\t\tfor(ProductImage image : images) {\n-\t\t\t\t\t\n-\t\t\t\t\tif(!StringUtils.isBlank(image.getProductImageUrl())) {\n-\n-\t\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\t\tentry.put(\"image\", image.getProductImageUrl());\n-\t\t\t\t\t\tentry.put(\"url\", image.getProductImageUrl());\n-\t\t\t\t\t\tentry.put(\"default\", image.isDefaultImage());\n-\t\t\t\t\t\tentry.put(\"id\",image.getId());\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\t\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t}\n-\n-\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\n-\t}\n-\n-\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/images/save.html\", method=RequestMethod.POST)\n-\tpublic String saveProductImages(@ModelAttribute(value=\"productImages\") @Valid final ProductImages productImages, final BindingResult bindingResult,final Model model, final HttpServletRequest request,Locale locale) throws Exception{\n-\t    \n-\t    \n-\t\tthis.setMenu(model, request);\n-\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tProduct product = productService.getById(productImages.getProductId());\n-\t\tmodel.addAttribute(\"product\",product);\n-\t\tif(product==null) {\n-\t\t\tFieldError error = new FieldError(\"productImages\",\"image\",messages.getMessage(\"message.error\", locale));\n-\t\t\tbindingResult.addError(error);\n-\t\t\treturn ControllerConstants.Tiles.Product.productImages;\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\tFieldError error = new FieldError(\"productImages\",\"image\",messages.getMessage(\"message.error\", locale));\n-\t\t\tbindingResult.addError(error);\n-\t\t}\n-\t\t\n-\t\tif (bindingResult.hasErrors()) {\n-\t        LOGGER.info( \"Found {} Validation errors\", bindingResult.getErrorCount());\n-\t       return ControllerConstants.Tiles.Product.productImages;\n-\t       \n-        }\n-\t\t\n-\t    final List<ProductImage> contentImagesList=new ArrayList<ProductImage>();\n-        if(CollectionUtils.isNotEmpty( productImages.getFile() )){\n-            LOGGER.info(\"Saving {} content images for merchant {}\",productImages.getFile().size(),store.getId());\n-            for(final MultipartFile multipartFile:productImages.getFile()){\n-                if(!multipartFile.isEmpty()){\n-                \tProductImage productImage = new ProductImage();\n-\n-                \tproductImage.setImage(multipartFile.getInputStream());\n-                    productImage.setProductImage(multipartFile.getOriginalFilename() );\n-                    productImage.setProduct(product);\n-                    productImage.setDefaultImage(false);//default image is uploaded in the product details\n-                    \n-                    contentImagesList.add( productImage);\n-                }\n-            }\n-            \n-            if(CollectionUtils.isNotEmpty( contentImagesList )){\n-            \tproductImageService.addProductImages(product, contentImagesList);\n-            }\n-            \n-        }\n-\t\t\n-        \n-        //reload\n-        product = productService.getById(productImages.getProductId());\n-        model.addAttribute(\"product\",product);\n-        model.addAttribute(\"success\",\"success\");\n-        \n-        return ControllerConstants.Tiles.Product.productImages;\n-\t}\n-\t\n-\n-\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/images/url/save.html\", method=RequestMethod.POST)\n-\tpublic String saveProductImagesUrl(@ModelAttribute(value=\"productImage\") @Valid final ProductImage productImage, final BindingResult bindingResult,final Model model, final HttpServletRequest request,Locale locale) throws Exception{\n-\t    \n-\t    \n-\t\tthis.setMenu(model, request);\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-        Map< String, String > mediaTypes = new HashMap<String, String>();  \n-        mediaTypes.put(\"0\", \"IMAGE\");  \n-        mediaTypes.put(\"1\", \"VIDEO\");   \n-\n-\t\tmodel.addAttribute(\"productImage\", productImage);\n-\t\tmodel.addAttribute(\"mediaTypes\",mediaTypes);\n-\n-\t\tProduct product = productService.getById(productImage.getId());\n-\t\tmodel.addAttribute(\"product\",product);\n-\t\tif(product==null) {\n-\t\t\tFieldError error = new FieldError(\"productImages\",\"image\",messages.getMessage(\"message.error\", locale));\n-\t\t\tbindingResult.addError(error);\n-\t\t\treturn ControllerConstants.Tiles.Product.productImagesUrl;\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\tFieldError error = new FieldError(\"productImages\",\"image\",messages.getMessage(\"message.error\", locale));\n-\t\t\tbindingResult.addError(error);\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"product\",product);\n-\t\t\n-\t\tif (bindingResult.hasErrors()) {\n-\t        LOGGER.info( \"Found {} Validation errors\", bindingResult.getErrorCount());\n-\t       return ControllerConstants.Tiles.Product.productImagesUrl;\n-        }\n-\t\t\n-\t\tproductImage.setProduct(product);\n-\t\tproductImage.setId(null);\n-\t\t\n-\t\tproductImageService.saveOrUpdate(productImage);\n-        model.addAttribute(\"product\",product);\n-        model.addAttribute(\"success\",\"success\");\n-        \n-        return ControllerConstants.Tiles.Product.productImagesUrl;\n-\t}\n-\n-\t\n-\t\n-\n-\t\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/images/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteImage(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString sImageId = request.getParameter(\"id\");\n-\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\t\n-\t\ttry {\n-\n-\t\t\t\t\n-\t\t\tLong imageId = Long.parseLong(sImageId);\n-\n-\t\t\t\n-\t\t\tProductImage productImage = productImageService.getById(imageId);\n-\t\t\tif(productImage==null) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(productImage.getProduct().getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tproductImageService.removeProductImage(productImage);\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product price\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/images/defaultImage.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> setDefaultImage(final HttpServletRequest request, \n-\t\t\t\t\t\t\t\t\t\t\t\tfinal HttpServletResponse response, \n-\t\t\t\t\t\t\t\t\t\t\t\tfinal Locale locale) {\n-\t\tfinal String sImageId = request.getParameter(\"id\");\n-\t\tfinal MerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tfinal AjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\ttry {\n-\t\t\tfinal Long imageId = Long.parseLong(sImageId);\n-\t\t\tfinal ProductImage productImage = productImageService.getById(imageId);\n-\t\t\t\n-\t\t\tif (productImage == null) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif (productImage.getProduct().getMerchantStore().getId().intValue() != store.getId().intValue()) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tproductImage.setDefaultImage(true);\n-\t\t\tproductImageService.saveOrUpdate(productImage);\n-\t\t\t\n-\t\t\tfinal Set<ProductImage> images = productService.getById(productImage.getProduct().getId()).getImages();\n-\t\t\tfor (final ProductImage image : images) {\n-\t\t\t\tif (image.getId() != productImage.getId()) {\n-\t\t\t\t\timage.setDefaultImage(false);\n-\t\t\t\t\tproductImageService.saveOrUpdate(image);\t\t\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t} catch (final Exception e) {\n-\t\t\tLOGGER.error(\"Error while set default image\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-products\", \"catalogue-products\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/ProductKeywordsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 343,
          "patch": "@@ -1,343 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.description.ProductDescription;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.catalog.Keyword;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.FieldError;\n-import org.springframework.web.bind.annotation.*;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.*;\n-\n-@Controller\n-public class ProductKeywordsController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ProductKeywordsController.class);\n-\t\n-\t@Inject\n-\tprivate ProductService productService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value={\"/admin/products/product/keywords.html\"}, method=RequestMethod.GET)\n-\tpublic String displayKeywords(@RequestParam(\"id\") long productId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tProduct product = productService.getById(productId);\n-\t\t\n-\t\tif(product==null || product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"store\", store);\n-\t\tmodel.addAttribute(\"product\", product);\n-\t\tmodel.addAttribute(\"productKeyword\", new Keyword());\n-\n-\t\treturn ControllerConstants.Tiles.Product.productKeywords;\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/product/addKeyword.html\", method=RequestMethod.POST)\n-\tpublic String addKeyword(@Valid @ModelAttribute(\"productKeyword\") Keyword keyword, final BindingResult bindingResult,final Model model, final HttpServletRequest request, Locale locale) throws Exception{\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\t\n-\t\tProduct product = productService.getById(keyword.getProductId());\n-\t\t\n-\t\tmodel.addAttribute(\"store\", store);\n-\t\tmodel.addAttribute(\"product\", product);\n-\t\tmodel.addAttribute(\"productKeyword\", new Keyword());\n-\t\t\n-\t\tif(product==null || product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tSet<ProductDescription> descriptions = product.getDescriptions();\n-\t\tProductDescription productDescription = null;\n-\t\tfor(ProductDescription description : descriptions) {\n-\t\t\t\n-\t\t\tif(description.getLanguage().getCode().equals(keyword.getLanguageCode())) {\n-\t\t\t\tproductDescription = description;\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\t\n-\t\t}\n-\t\t\n-\t\tif(productDescription==null) {\n-\t\t\tFieldError error = new FieldError(\"keyword\",\"keyword\",messages.getMessage(\"message.product.language\", locale));\n-\t\t\tbindingResult.addError(error);\n-\t\t\treturn ControllerConstants.Tiles.Product.productKeywords;\n-\t\t}\n-\t\t\n-\t\t\n-\t\tString keywords = productDescription.getMetatagKeywords();\n-\t\tList<String> keyWordsList = null;\n-\t\tif(!StringUtils.isBlank(keywords)) {\n-\t\t\tString[] splits = keywords.split(\",\");\n-\t\t\tkeyWordsList = new ArrayList(Arrays.asList(splits));\n-\t\t}\n-\t\t\n-\t\tif(keyWordsList==null) {\n-\t\t\tkeyWordsList = new ArrayList<String>();\n-\t\t}\n-\t\tkeyWordsList.add(keyword.getKeyword());\n-\t\t\n-\t\tStringBuilder kwString = new StringBuilder();\n-\t\tfor(String s : keyWordsList) {\n-\t\t\tkwString.append(s).append(\",\");\n-\t\t}\n-\t\t\n-\t\tproductDescription.setMetatagKeywords(kwString.toString());\n-\t\tSet<ProductDescription> updatedDescriptions = new HashSet<ProductDescription>();\n-\t\tfor(ProductDescription description : descriptions) {\n-\t\t\t\n-\t\t\tif(!description.getLanguage().getCode().equals(keyword.getLanguageCode())) {\n-\t\t\t\tupdatedDescriptions.add(description);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tupdatedDescriptions.add(productDescription);\n-\t\tproduct.setDescriptions(updatedDescriptions);\n-\t\t\n-\t\tproductService.update(product);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\n-\t\t\n-        return ControllerConstants.Tiles.Product.productKeywords;\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/product/removeKeyword.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeKeyword(@RequestParam(\"id\") long productId, HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\n-\t\t\n-\t\tString code = request.getParameter(\"code\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\t//parse code i,lang (0,en)\n-\t\t\tString ids[] = code.split(\",\");\n-\t\t\t\n-\t\t\tString languageCode = ids[1];\n-\t\t\t\n-\t\t\tint index = Integer.parseInt(ids[0]);\n-\t\t\t\n-\t\t\tProduct product = productService.getById(productId);\n-\n-\t\t\t\n-\t\t\tif(product==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tSet<ProductDescription> descriptions = product.getDescriptions();\n-\t\t\tSet<ProductDescription> editedDescriptions = new HashSet<ProductDescription>();\n-\t\t\tfor(ProductDescription description : descriptions) {\n-\n-\t\t\t\tLanguage lang = description.getLanguage();\n-\t\t\t\tif(!lang.getCode().equals(languageCode)){\n-\t\t\t\t\teditedDescriptions.add(description);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\n-\t\t\t\tList<String> keyWordsList = new ArrayList<String>();\n-\t\n-\t\t\t\t\n-\t\t\t\tString keywords = description.getMetatagKeywords();\n-\t\t\t\tif(!StringUtils.isBlank(keywords)) {\n-\t\t\t\t\tString splitKeywords[] = keywords.split(\",\");\n-\t\t\t\t\tfor(int i = 0; i < splitKeywords.length; i++) {\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tif(i!=index) {\n-\t\t\t\t\t\t\tkeyWordsList.add(splitKeywords[i]);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\t\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n-\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\tStringBuilder kwString = new StringBuilder();\n-\t\t\t\tfor(String s : keyWordsList) {\n-\t\t\t\t\tkwString.append(s).append(\",\");\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tdescription.setMetatagKeywords(kwString.toString());\n-\t\t\t\teditedDescriptions.add(description);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tproduct.setDescriptions(editedDescriptions);\n-\t\t\tproductService.update(product);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/product/keywords/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageKeywords(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString sProductId = request.getParameter(\"id\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tLong productId;\n-\t\tProduct product = null;\n-\t\t\n-\t\ttry {\n-\t\t\tproductId = Long.parseLong(sProductId);\n-\t\t} catch (Exception e) {\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\t\t\n-\t\ttry {\n-\n-\t\t\tproduct = productService.getById(productId);\n-\n-\t\t\t\n-\t\t\tif(product==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\n-\n-\t\t\tSet<ProductDescription> descriptions = product.getDescriptions();\n-\n-\t\t\tfor(ProductDescription description : descriptions) {\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\tLanguage lang = description.getLanguage();\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\tString keywords = description.getMetatagKeywords();\n-\t\t\t\tif(!StringUtils.isBlank(keywords)) {\n-\t\t\t\t\t\n-\t\t\t\t\tString splitKeywords[] = keywords.split(\",\");\n-\t\t\t\t\tfor(int i = 0; i < splitKeywords.length; i++) {\n-\t\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\t\tentry.put(\"language\", lang.getCode());\n-\t\t\t\t\t\tString keyword = splitKeywords[i];\n-\t\t\t\t\t\tStringBuilder code = new StringBuilder();\n-\t\t\t\t\t\tcode.append(i).append(\",\").append(lang.getCode());\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tentry.put(\"code\", code.toString());\n-\t\t\t\t\t\tentry.put(\"keyword\", keyword);\n-\t\t\t\t\t\tresp.addDataEntry(entry);\n-\t\n-\t\t\t\t\t\t\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t}\n-\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-products\", \"catalogue-products\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/ProductPriceController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 505,
          "patch": "@@ -1,505 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.services.catalog.product.price.ProductPriceService;\n-import com.salesmanager.core.business.utils.ProductPriceUtils;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.availability.ProductAvailability;\n-import com.salesmanager.core.model.catalog.product.price.ProductPrice;\n-import com.salesmanager.core.model.catalog.product.price.ProductPriceDescription;\n-import com.salesmanager.core.model.catalog.product.price.ProductPriceType;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.DateUtil;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.*;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.math.BigDecimal;\n-import java.util.*;\n-\n-@Controller\n-public class ProductPriceController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ProductPriceController.class);\n-\t\n-\t@Inject\n-\tprivate ProductService productService;\n-\t\n-\t@Inject\n-\tprivate ProductPriceService productPriceService;\n-\t\n-\t@Inject\n-\tprivate ProductPriceUtils priceUtil;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/prices.html\", method=RequestMethod.GET)\n-\tpublic String getProductPrices(@RequestParam(\"id\") long productId,Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\t//get the product and validate it belongs to the current merchant\n-\t\tProduct product = productService.getById(productId);\n-\t\t\n-\t\tif(product==null) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tProductAvailability productAvailability = null;\n-\t\tfor(ProductAvailability availability : product.getAvailabilities()) {\n-\t\t\tif(availability.getRegion().equals(com.salesmanager.core.business.constants.Constants.ALL_REGIONS)) {\n-\t\t\t\tproductAvailability = availability;\n-\t\t\t}\n-\t\t}\n-\n-\t\tmodel.addAttribute(\"product\",product);\n-\t\tmodel.addAttribute(\"availability\",productAvailability);\n-\n-\t\treturn ControllerConstants.Tiles.Product.productPrices;\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/prices/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pagePrices(HttpServletRequest request, HttpServletResponse response) {\n-\n-\t\tString sProductId = request.getParameter(\"productId\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tLong productId;\n-\t\tProduct product = null;\n-\t\t\n-\t\ttry {\n-\t\t\tproductId = Long.parseLong(sProductId);\n-\t\t} catch (Exception e) {\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\t\t\n-\t\ttry {\n-\n-\t\t\tproduct = productService.getById(productId);\n-\n-\t\t\t\n-\t\t\tif(product==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tProductAvailability defaultAvailability = null;\n-\t\t\t\n-\t\t\tSet<ProductAvailability> availabilities = product.getAvailabilities();\n-\n-\t\t\t//get default availability\n-\t\t\tfor(ProductAvailability availability : availabilities) {\n-\t\t\t\tif(availability.getRegion().equals(com.salesmanager.core.business.constants.Constants.ALL_REGIONS)) {\n-\t\t\t\t\tdefaultAvailability = availability;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(defaultAvailability==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tSet<ProductPrice> prices = defaultAvailability.getPrices();\n-\t\t\t\n-\t\t\t\n-\t\t\tfor(ProductPrice price : prices) {\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"priceId\", price.getId());\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\tString priceName = \"\";\n-\t\t\t\tSet<ProductPriceDescription> descriptions = price.getDescriptions();\n-\t\t\t\tif(descriptions!=null) {\n-\t\t\t\t\tfor(ProductPriceDescription description : descriptions) {\n-\t\t\t\t\t\tif(description.getLanguage().getCode().equals(language.getCode())) {\n-\t\t\t\t\t\t\tpriceName = description.getName(); \n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n-\n-\t\t\t\tentry.put(\"name\", priceName);\n-\t\t\t\tentry.put(\"price\", priceUtil.getAdminFormatedAmountWithCurrency(store,price.getProductPriceAmount()));\n-\t\t\t\tentry.put(\"specialPrice\", priceUtil.getAdminFormatedAmountWithCurrency(store,price.getProductPriceSpecialAmount()));\n-\t\t\t\t\n-\t\t\t\tString discount = \"\";\n-\t\t\t\tif(priceUtil.hasDiscount(price)) {\n-\t\t\t\t\tdiscount = priceUtil.getAdminFormatedAmountWithCurrency(store,price.getProductPriceAmount());\n-\t\t\t\t}\n-\t\t\t\tentry.put(\"special\", discount);\n-\t\t\t\t\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/price/edit.html\", method=RequestMethod.GET)\n-\tpublic String editProductPrice(@RequestParam(\"id\") long productPriceId, @RequestParam(\"productId\") long productId,Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tProduct product = productService.getById(productId);\n-\t\t\n-\t\tif(product==null) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\treturn displayProductPrice(product, productPriceId, model, request, response);\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/price/create.html\", method=RequestMethod.GET)\n-\tpublic String displayCreateProductPrice(@RequestParam(\"productId\") long productId,@RequestParam(\"availabilityId\") long avilabilityId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tProduct product = productService.getById(productId);\n-\t\tif(product==null) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\treturn displayProductPrice(product, null, model, request, response);\n-\n-\n-\t\t\n-\t}\n-\t\n-\tprivate String displayProductPrice(Product product, Long productPriceId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tcom.salesmanager.shop.admin.model.catalog.ProductPrice pprice = new com.salesmanager.shop.admin.model.catalog.ProductPrice();\n-\t\t\n-\t\tProductPrice productPrice = null;\n-\t\tProductAvailability productAvailability = null;\n-\t\t\n-\t\tif(productPriceId!=null) {\n-\t\t\n-\t\t\tSet<ProductAvailability> availabilities = product.getAvailabilities();\n-\t\n-\t\t\t//get default availability\n-\t\t\tfor(ProductAvailability availability : availabilities) {\n-\t\t\t\tif(availability.getRegion().equals(com.salesmanager.core.business.constants.Constants.ALL_REGIONS)) {//TODO to be updated when multiple regions is implemented\n-\t\t\t\t\tproductAvailability = availability;\n-\t\t\t\t\tSet<ProductPrice> prices = availability.getPrices();\n-\t\t\t\t\tfor(ProductPrice price : prices) {\n-\t\t\t\t\t\tif(price.getId().longValue()==productPriceId.longValue()) {\n-\t\t\t\t\t\t\tproductPrice = price;\n-\t\t\t\t\t\t\tif(price.getProductPriceSpecialStartDate()!=null) {\n-\t\t\t\t\t\t\t\tpprice.setProductPriceSpecialStartDate(DateUtil.formatDate(price.getProductPriceSpecialStartDate()));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tif(price.getProductPriceSpecialEndDate()!=null) {\n-\t\t\t\t\t\t\t\tpprice.setProductPriceSpecialEndDate(DateUtil.formatDate(price.getProductPriceSpecialEndDate()));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tpprice.setPriceText(priceUtil.getAdminFormatedAmount(store, price.getProductPriceAmount()));\n-\t\t\t\t\t\t\tif(price.getProductPriceSpecialAmount()!=null) {\n-\t\t\t\t\t\t\t\tpprice.setSpecialPriceText(priceUtil.getAdminFormatedAmount(store, price.getProductPriceSpecialAmount()));\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\n-\t\t}\t\n-\t\t\n-\t\tif(productPrice==null) {\n-\t\t\tproductPrice = new ProductPrice();\n-\t\t\tproductPrice.setProductPriceType(ProductPriceType.ONE_TIME);\n-\t\t}\n-\t\t\n-\t\t//descriptions\n-\t\tList<Language> languages = store.getLanguages();\n-\t\t\n-\t\tSet<ProductPriceDescription> productPriceDescriptions = productPrice.getDescriptions();\n-\t\tList<ProductPriceDescription> descriptions = new ArrayList<ProductPriceDescription>();\n-\t\tfor(Language l : languages) {\n-\t\t\tProductPriceDescription productPriceDesc = null;\n-\t\t\tfor(ProductPriceDescription desc : productPriceDescriptions) {\n-\t\t\t\tLanguage lang = desc.getLanguage();\n-\t\t\t\tif(lang.getCode().equals(l.getCode())) {\n-\t\t\t\t\tproductPriceDesc = desc;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(productPriceDesc==null) {\n-\t\t\t\tproductPriceDesc = new ProductPriceDescription();\n-\t\t\t\tproductPriceDesc.setLanguage(l);\n-\t\t\t\tproductPriceDescriptions.add(productPriceDesc);\n-\t\t\t}\t\n-\t\t\tdescriptions.add(productPriceDesc);\n-\t\t}\n-\t\t\n-\t\t\n-\t\tif(productAvailability==null) {\n-\t\t\tSet<ProductAvailability> availabilities = product.getAvailabilities();\n-\t\t\tfor(ProductAvailability availability : availabilities) {\n-\t\t\t\tif(availability.getRegion().equals(com.salesmanager.core.business.constants.Constants.ALL_REGIONS)) {//TODO to be updated when multiple regions is implemented\n-\t\t\t\t\tproductAvailability = availability;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tpprice.setDescriptions(descriptions);\n-\t\tpprice.setProductAvailability(productAvailability);\n-\t\tpprice.setPrice(productPrice);\n-\t\tpprice.setProduct(product);\n-\t\t\n-\n-\t\tmodel.addAttribute(\"product\",product);\n-\t\t//model.addAttribute(\"descriptions\",descriptions);\n-\t\tmodel.addAttribute(\"price\",pprice);\n-\t\t//model.addAttribute(\"availability\",productAvailability);\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Product.productPrice;\n-\t}\n-\t\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/price/save.html\", method=RequestMethod.POST)\n-\tpublic String saveProductPrice(@Valid @ModelAttribute(\"price\") com.salesmanager.shop.admin.model.catalog.ProductPrice price, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\t\t//dates after save\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tProduct product = price.getProduct();\n-\t\tProduct dbProduct = productService.getById(product.getId());\n-\t\tif(store.getId().intValue()!=dbProduct.getMerchantStore().getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"product\",dbProduct);\n-\t\t\n-\t\t//validate price\n-\t\tBigDecimal submitedPrice = null;\n-\t\ttry {\n-\t\t\tsubmitedPrice = priceUtil.getAmount(price.getPriceText());\n-\t\t} catch (Exception e) {\n-\t\t\tObjectError error = new ObjectError(\"productPrice\",messages.getMessage(\"NotEmpty.product.productPrice\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\t//validate discount price\n-\t\tBigDecimal submitedDiscountPrice = null;\n-\t\t\n-\t\tif(!StringUtils.isBlank(price.getSpecialPriceText())) {\n-\t\t\ttry {\n-\t\t\t\tsubmitedDiscountPrice = priceUtil.getAmount(price.getSpecialPriceText());\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tObjectError error = new ObjectError(\"productSpecialPrice\",messages.getMessage(\"NotEmpty.product.productPrice\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t//validate start date\n-\t\tif(!StringUtils.isBlank(price.getProductPriceSpecialStartDate())) {\n-\t\t\ttry {\n-\t\t\t\tDate startDate = DateUtil.getDate(price.getProductPriceSpecialStartDate());\n-\t\t\t\tprice.getPrice().setProductPriceSpecialStartDate(startDate);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tObjectError error = new ObjectError(\"productPriceSpecialStartDate\",messages.getMessage(\"message.invalid.date\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tif(!StringUtils.isBlank(price.getProductPriceSpecialEndDate())) {\n-\t\t\ttry {\n-\t\t\t\tDate endDate = DateUtil.getDate(price.getProductPriceSpecialEndDate());\n-\t\t\t\tprice.getPrice().setProductPriceSpecialEndDate(endDate);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tObjectError error = new ObjectError(\"productPriceSpecialEndDate\",messages.getMessage(\"message.invalid.date\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.Product.productPrice;\n-\t\t}\n-\t\t\n-\n-\t\tprice.getPrice().setProductPriceAmount(submitedPrice);\n-\t\tif(!StringUtils.isBlank(price.getSpecialPriceText())) {\n-\t\t\tprice.getPrice().setProductPriceSpecialAmount(submitedDiscountPrice);\n-\t\t}\n-\t\t\n-\t\tProductAvailability productAvailability = null;\n-\t\t\n-\t\tSet<ProductAvailability> availabilities = dbProduct.getAvailabilities();\n-\t\tfor(ProductAvailability availability : availabilities) {\n-\t\t\t\n-\t\t\tif(availability.getId().longValue()==price.getProductAvailability().getId().longValue()) {\n-\t\t\t\tproductAvailability = availability;\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t}\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\tSet<ProductPriceDescription> descriptions = new HashSet<ProductPriceDescription>();\n-\t\tif(price.getDescriptions()!=null && price.getDescriptions().size()>0) {\n-\t\t\t\n-\t\t\tfor(ProductPriceDescription description : price.getDescriptions()) {\n-\t\t\t\tdescription.setProductPrice(price.getPrice());\n-\t\t\t\tdescriptions.add(description);\n-\t\t\t\tdescription.setProductPrice(price.getPrice());\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tprice.getPrice().setDescriptions(descriptions);\n-\t\tprice.getPrice().setProductAvailability(productAvailability);\n-\t\t\n-\t\tproductPriceService.saveOrUpdate(price.getPrice());\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Product.productPrice;\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/price/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteProductPrice(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString sPriceid = request.getParameter(\"priceId\");\n-\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong priceId = Long.parseLong(sPriceid);\n-\t\t\tProductPrice price = productPriceService.getById(priceId);\n-\t\t\t\n-\n-\t\t\tif(price==null || price.getProductAvailability().getProduct().getMerchantStore().getId().intValue()!=store.getId()) {\n-\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t} \n-\t\t\t\n-\t\t\tproductPriceService.delete(price);\n-\t\t\t\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product price\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-products\", \"catalogue-products\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/ProductReviewController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 229,
          "patch": "@@ -1,229 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.services.catalog.product.review.ProductReviewService;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.review.ProductReview;\n-import com.salesmanager.core.model.catalog.product.review.ProductReviewDescription;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.*;\n-\n-@Controller\n-public class ProductReviewController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ProductReviewController.class);\n-\t\n-\t@Inject\n-\tprivate ProductService productService;\n-\t\n-\t@Inject\n-\tprivate ProductReviewService productReviewService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/reviews.html\", method=RequestMethod.GET)\n-\tpublic String displayProductReviews(@RequestParam(\"id\") long productId,Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tsetMenu(model, request);\n-\t\t\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tProduct product = productService.getProductWithOnlyMerchantStoreById(productId);\n-\t\t\n-\t\tif(product==null) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\t\n-\t\tmodel.addAttribute(\"product\", product);\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Product.productReviews;\n-\n-\t}\n-\t\n-\t\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/reviews/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageProductReviews(HttpServletRequest request, HttpServletResponse response) {\n-\n-\t\tString sProductId = request.getParameter(\"productId\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tLong productId;\n-\t\tProduct product = null;\n-\t\t\n-\t\ttry {\n-\t\t\tproductId = Long.parseLong(sProductId);\n-\t\t} catch (Exception e) {\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t}\n-\n-\t\t\n-\t\ttry {\n-\n-\t\t\tproduct = productService.getProductWithOnlyMerchantStoreById(productId);\n-\n-\t\t\t\n-\t\t\tif(product==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\n-\t\t\t\n-\t\t\tList<ProductReview> reviews = productReviewService.getByProduct(product);\n-\t\t\t\n-\n-\n-\t\t\tfor(ProductReview review : reviews) {\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"reviewId\", review.getId());\n-\t\t\t\tentry.put(\"rating\", review.getReviewRating().intValue());\n-\t\t\t\tSet<ProductReviewDescription> descriptions = review.getDescriptions();\n-\t\t\t\tString reviewDesc= \"\";\n-\t\t\t\tif(!CollectionUtils.isEmpty(descriptions)) {\n-\t\t\t\t\treviewDesc = descriptions.iterator().next().getDescription();\n-\t\t\t\t}\n-\t\t\t\t//for(ProductReviewDescription description : descriptions){\n-\t\t\t\t//\tif(description.getLanguage().getCode().equals(language.getCode())) {\n-\t\t\t\t//\t\treviewDesc = description.getDescription();\n-\t\t\t\t//\t}\n-\t\t\t\t//}\n-\t\t\t\tentry.put(\"description\", reviewDesc);\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/reviews/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteProductReview(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString sReviewid = request.getParameter(\"reviewId\");\n-\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong reviewId = Long.parseLong(sReviewid);\n-\n-\t\t\t\n-\t\t\tProductReview review = productReviewService.getById(reviewId);\n-\t\t\t\n-\n-\t\t\tif(review==null || review.getProduct().getMerchantStore().getId().intValue()!=store.getId()) {\n-\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t} \n-\t\t\t\n-\n-\t\t\tproductReviewService.delete(review);\n-\t\t\t\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting review\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-products\", \"catalogue-products\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\t\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/ProductsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 263,
          "patch": "@@ -1,263 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.category.CategoryService;\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.category.Category;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.ProductCriteria;\n-import com.salesmanager.core.model.catalog.product.ProductList;\n-import com.salesmanager.core.model.catalog.product.description.ProductDescription;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.CategoryUtils;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.*;\n-\n-@Controller\n-public class ProductsController {\n-\t\n-\t@Inject\n-\tCategoryService categoryService;\n-\t\n-\t@Inject\n-\tProductService productService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ProductsController.class);\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/products.html\", method=RequestMethod.GET)\n-\tpublic String displayProducts(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tList<Category> categories = categoryService.listByStore(store, language);\n-\t\t\n-\t\tList<com.salesmanager.shop.admin.model.catalog.Category> readableCategories = CategoryUtils.readableCategoryListConverter(categories, language);\n-\t\t\n-\t\tmodel.addAttribute(\"categories\", readableCategories);\n-\t\t\n-\t\treturn \"admin-products\";\n-\t\t\n-\t}\n-\n-\t\n-\t\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageProducts(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\t//TODO what if ROOT\n-\t\t\n-\t\tString categoryId = request.getParameter(\"categoryId\");\n-\t\tString sku = request.getParameter(\"sku\");\n-\t\tString available = request.getParameter(\"available\");\n-\t\tString searchTerm = request.getParameter(\"searchTerm\");\n-\t\tString name = request.getParameter(\"name\");\n-\t\t\n-\t\tAjaxPageableResponse resp = new AjaxPageableResponse();\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\n-\t\t\tint startRow = Integer.parseInt(request.getParameter(\"_startRow\"));\n-\t\t\tint endRow = Integer.parseInt(request.getParameter(\"_endRow\"));\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tProductCriteria criteria = new ProductCriteria();\n-\t\t\t\n-\t\t\tcriteria.setStartIndex(startRow);\n-\t\t\tcriteria.setMaxCount(endRow);\n-\t\t\t\n-\t\t\t\n-\t\t\tif(!StringUtils.isBlank(categoryId) && !categoryId.equals(\"-1\")) {\n-\t\t\t\t\n-\t\t\t\t//get other filters\n-\t\t\t\tLong lcategoryId = 0L;\n-\t\t\t\ttry {\n-\t\t\t\t\tlcategoryId = Long.parseLong(categoryId);\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tLOGGER.error(\"Product page cannot parse categoryId \" + categoryId );\n-\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\t\treturn new ResponseEntity<String>(returnString,HttpStatus.BAD_REQUEST);\n-\t\t\t\t} \n-\t\t\t\t\n-\t\t\t\t\n-\n-\t\t\t\tif(lcategoryId>0) {\n-\t\t\t\t\n-\t\t\t\t\tCategory category = categoryService.getById(lcategoryId, store.getId());\n-\t\n-\t\t\t\t\tif(category==null || category.getMerchantStore().getId()!=store.getId()) {\n-\t\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\t\t\treturn new ResponseEntity<String>(returnString,HttpStatus.BAD_REQUEST);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t//get all sub categories\n-\t\t\t\t\tStringBuilder lineage = new StringBuilder();\n-\t\t\t\t\tlineage.append(category.getLineage()).append(category.getId()).append(\"/\");\n-\t\t\t\t\t\n-\t\t\t\t\tList<Category> categories = categoryService.getListByLineage(store, lineage.toString());\n-\t\t\t\t\t\n-\t\t\t\t\tList<Long> categoryIds = new ArrayList<Long>();\n-\t\t\t\t\t\n-\t\t\t\t\tfor(Category cat : categories) {\n-\t\t\t\t\t\tcategoryIds.add(cat.getId());\n-\t\t\t\t\t}\n-\t\t\t\t\tcategoryIds.add(category.getId());\n-\t\t\t\t\tcriteria.setCategoryIds(categoryIds);\n-\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\n-\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!StringUtils.isBlank(sku)) {\n-\t\t\t\tcriteria.setCode(sku);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!StringUtils.isBlank(name)) {\n-\t\t\t\tcriteria.setProductName(name);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!StringUtils.isBlank(available)) {\n-\t\t\t\tif(available.equals(\"true\")) {\n-\t\t\t\t\tcriteria.setAvailable(new Boolean(true));\n-\t\t\t\t} else {\n-\t\t\t\t\tcriteria.setAvailable(new Boolean(false));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tProductList productList = productService.listByStore(store, language, criteria);\n-\t\t\tresp.setEndRow(Math.toIntExact(productList.getTotalCount()));\n-\t\t\tresp.setStartRow(startRow);\n-\t\t\tList<Product> plist = productList.getProducts();\n-\t\t\t\n-\t\t\tif(plist!=null) {\n-\t\t\t\n-\t\t\t\tfor(Product product : plist) {\n-\t\t\t\t\t\n-\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\tentry.put(\"productId\", product.getId());\n-\t\t\t\t\t\n-\t\t\t\t\tProductDescription description = product.getDescriptions().iterator().next();\n-\t\t\t\t\t\n-\t\t\t\t\tentry.put(\"name\", description.getName());\n-\t\t\t\t\tentry.put(\"sku\", product.getSku());\n-\t\t\t\t\tentry.put(\"available\", product.isAvailable());\n-\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,HttpStatus.OK);\n-\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/products/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteProduct(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString sid = request.getParameter(\"productId\");\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong id = Long.parseLong(sid);\n-\t\t\t\n-\t\t\tProduct product = productService.getById(id);\n-\n-\t\t\tif(product==null || product.getMerchantStore().getId()!=store.getId()) {\n-\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\t\n-\t\t\t} else {\n-\t\t\t\t\n-\t\t\t\tproductService.delete(product);\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting product\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-products\", \"catalogue-products\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/products/RelatedItemsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 334,
          "patch": "@@ -1,334 +0,0 @@\n-package com.salesmanager.shop.admin.controller.products;\n-\n-import com.salesmanager.core.business.services.catalog.category.CategoryService;\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.services.catalog.product.relationship.ProductRelationshipService;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.category.Category;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.description.ProductDescription;\n-import com.salesmanager.core.model.catalog.product.relationship.ProductRelationship;\n-import com.salesmanager.core.model.catalog.product.relationship.ProductRelationshipType;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.CategoryUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n-\n-@Controller\n-public class RelatedItemsController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(RelatedItemsController.class);\n-\t\n-\t@Inject\n-\tCategoryService categoryService;\n-\t\n-\t@Inject\n-\tProductService productService;\n-\t\n-\t@Inject\n-\tProductRelationshipService productRelationshipService;\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/related/list.html\", method=RequestMethod.GET)\n-\tpublic String displayRelatedItems(@RequestParam(\"id\") long productId, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t//get the product and validate it belongs to the current merchant\n-\t\tProduct product = productService.getById(productId);\n-\t\t\n-\t\tif(product==null) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\treturn \"redirect:/admin/products/products.html\";\n-\t\t}\n-\t\t\n-\t\t\n-\t\tList<Category> categories = categoryService.listByStore(store,language);\n-\t\tList<com.salesmanager.shop.admin.model.catalog.Category> readableCategories = CategoryUtils.readableCategoryListConverter(categories, language);\n-        \n-\t\t\n-\t\tmodel.addAttribute(\"categories\", readableCategories);\n-\t\tmodel.addAttribute(\"product\", product);\n-\t\treturn ControllerConstants.Tiles.Product.relatedItems;\n-\t\t\n-\t}\n-\t\n-\t\n-\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/related/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageRelatedItems(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString sProductId = request.getParameter(\"productId\");\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\t\n-\t\t\tLong productId = Long.parseLong(sProductId);\n-\t\t\tProduct product = productService.getById(productId);\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\t\n-\t\t\tif(product==null || product.getMerchantStore().getId().intValue()!= store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tresp.setErrorString(\"Product id is not valid\");\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\n-\t\t\tList<ProductRelationship> relationships = productRelationshipService.getByType(store, product, ProductRelationshipType.RELATED_ITEM, language);\n-\t\t\t\n-\t\t\tfor(ProductRelationship relationship : relationships) {\n-\t\t\t\t\n-\t\t\t\tProduct relatedProduct = relationship.getRelatedProduct();\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"relationshipId\", relationship.getId());\n-\t\t\t\tentry.put(\"productId\", relatedProduct.getId());\n-\t\t\t\t\n-\t\t\t\tProductDescription description = relatedProduct.getDescriptions().iterator().next();\n-\t\t\t\tSet<ProductDescription> descriptions = relatedProduct.getDescriptions();\n-\t\t\t\tfor(ProductDescription desc : descriptions) {\n-\t\t\t\t\tif(desc.getLanguage().getId().intValue()==language.getId().intValue()) {\n-\t\t\t\t\t\tdescription = desc;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t\n-\n-\t\t\t\tentry.put(\"name\", description.getName());\n-\t\t\t\tentry.put(\"sku\", relatedProduct.getSku());\n-\t\t\t\tentry.put(\"available\", relatedProduct.isAvailable());\n-\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/related/addItem.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> addItem(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString productId = request.getParameter(\"productId\");\n-\t\tString baseProductId = request.getParameter(\"baseProductId\");\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\tLong lProductId = Long.parseLong(productId);\n-\t\t\tLong lBaseProductId = Long.parseLong(baseProductId);\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tProduct product = productService.getById(lProductId);\n-\t\t\t\n-\t\t\tif(product==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tProduct baseProduct = productService.getById(lBaseProductId);\n-\t\t\t\n-\t\t\tif(baseProduct==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(baseProduct.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\n-\t\t\tProductRelationship relationship = new ProductRelationship();\n-\t\t\trelationship.setActive(true);\n-\t\t\trelationship.setProduct(baseProduct);\n-\t\t\trelationship.setCode(ProductRelationshipType.RELATED_ITEM.name());\n-\t\t\trelationship.setStore(store);\n-\t\t\trelationship.setRelatedProduct(product);\n-\t\t\t\n-\t\t\tproductRelationshipService.saveOrUpdate(relationship);\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('PRODUCTS')\")\n-\t@RequestMapping(value=\"/admin/catalogue/related/removeItem.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeItem(HttpServletRequest request, HttpServletResponse response) {\n-\t\t\n-\t\tString productId = request.getParameter(\"productId\");\n-\t\tString baseProductId = request.getParameter(\"baseProductId\");\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\tLong lproductId = Long.parseLong(productId);\n-\t\t\tLong lBaseProductId = Long.parseLong(baseProductId);\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\tProduct product = productService.getById(lproductId);\n-\t\t\t\n-\t\t\tif(product==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(product.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tProduct baseProduct = productService.getById(lBaseProductId);\n-\t\t\t\n-\t\t\tif(baseProduct==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(baseProduct.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tProductRelationship relationship = null;\n-\t\t\tList<ProductRelationship> relationships = productRelationshipService.getByType(store, baseProduct, ProductRelationshipType.RELATED_ITEM);\n-\t\t\t\n-\t\t\tfor(ProductRelationship r : relationships) {\n-\t\t\t\tif(r.getRelatedProduct().getId().longValue()==lproductId.longValue()) {\n-\t\t\t\t\trelationship = r;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(relationship==null) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(relationship.getStore().getId().intValue()!=store.getId().intValue()) {\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\n-\t\t\t\n-\t\t\t\n-\t\t\tproductRelationshipService.delete(relationship);\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t}\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"catalogue\", \"catalogue\");\n-\t\tactiveMenus.put(\"catalogue-products\", \"catalogue-products\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"catalogue\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/shipping/CustomShippingMethodsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 772,
          "patch": "@@ -1,772 +0,0 @@\n-package com.salesmanager.shop.admin.controller.shipping;\n-\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.shipping.ShippingService;\n-import com.salesmanager.core.business.utils.ProductPriceUtils;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.country.Country;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.shipping.ShippingConfiguration;\n-import com.salesmanager.core.model.shipping.ShippingType;\n-import com.salesmanager.core.model.system.IntegrationConfiguration;\n-import com.salesmanager.core.modules.integration.IntegrationException;\n-import com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuoteWeightItem;\n-import com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration;\n-import com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesRegion;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import com.salesmanager.shop.utils.MerchantUtils;\n-import org.apache.commons.beanutils.BeanComparator;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.math.BigDecimal;\n-import java.util.*;\n-\n-@Controller\n-public class CustomShippingMethodsController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CustomShippingMethodsController.class);\n-\t\n-\n-\tpublic final static String WEIGHT_BASED_SHIPPING_METHOD = \"weightBased\";\n-\t\n-\t@Inject\n-\tprivate ShippingService shippingService;\n-\t\n-\t@Inject\n-\tprivate CountryService countryService;\n-\t\n-\t@Inject\n-\tprivate ProductPriceUtils priceUtil;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/weightBased.html\", method=RequestMethod.GET)\n-\tpublic String getWeightBasedShippingMethod(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\n-\t\tthis.setMenu(model, request);\n-\n-\t\tpopulateModel(model, request, response);\n-\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/addCustomRegion.html\", method=RequestMethod.POST)\n-\tpublic String addCustomRegion(@ModelAttribute(\"region\") String region, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\t\tpopulateModel(model, request, response);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tCustomShippingQuotesConfiguration customConfiguration = (CustomShippingQuotesConfiguration)shippingService.getCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\n-\t\tList<CustomShippingQuotesRegion> regions = customConfiguration.getRegions();\n-\t\t\n-\t\tif(StringUtils.isBlank(region)) {\n-\t\t\tmodel.addAttribute(\"errorMessage\",messages.getMessage(\"message.region.null\", locale));\n-\t\t\tObjectError error = new ObjectError(\"region\",messages.getMessage(\"message.region.null\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\t\n-\t\tfor(CustomShippingQuotesRegion customRegion : regions) {\n-\t\t\tif(customRegion.getCustomRegionName().equals(region)) {\n-\t\t\t\tmodel.addAttribute(\"errorMessage\",messages.getMessage(\"message.region.null\", locale));\n-\t\t\t\tObjectError error = new ObjectError(\"region\",messages.getMessage(\"message.region.exists\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\t\t}\n-\t\t\n-\t\t\n-\t\tCustomShippingQuotesRegion quoteRegion = new CustomShippingQuotesRegion();\n-\t\tquoteRegion.setCustomRegionName(region);\n-\t\t\n-\t\tcustomConfiguration.getRegions().add(quoteRegion);\n-\t\tshippingService.saveCustomShippingConfiguration(this.WEIGHT_BASED_SHIPPING_METHOD, customConfiguration, store);\n-\t\t\n-\t\tmodel.addAttribute(\"customConfiguration\", customConfiguration);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/addCountryToRegion.html\", method=RequestMethod.POST)\n-\tpublic String addCountryToCustomRegion(@ModelAttribute(\"customRegion\") CustomShippingQuotesRegion customRegion, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\t\tpopulateModel(model, request, response);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tCustomShippingQuotesConfiguration customConfiguration = (CustomShippingQuotesConfiguration)shippingService.getCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\n-\t\tList<CustomShippingQuotesRegion> regions = customConfiguration.getRegions();\n-\t\t\n-\t\t\n-\t\tif(StringUtils.isBlank(customRegion.getCustomRegionName())) {\n-\t\t\tmodel.addAttribute(\"errorMessageAssociation\",messages.getMessage(\"message.region.null\", locale));\n-\t\t\tObjectError error = new ObjectError(\"region\",messages.getMessage(\"message.region.exists\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\t\n-\t\tfor(CustomShippingQuotesRegion region : regions) {\n-\t\t\tif(region.getCustomRegionName().equals(customRegion.getCustomRegionName())) {\n-\t\t\t\tList<String> countries = region.getCountries();\n-\t\t\t\tif(countries!=null) {\n-\t\t\t\t\tfor(String countryCode : countries) {\n-\t\t\t\t\t\tif(countryCode.equals(customRegion.getCountries().get(0))) {\n-\t\t\t\t\t\t\tmodel.addAttribute(\"errorMessageAssociation\",messages.getMessage(\"message.region.exists\", locale));\n-\t\t\t\t\t\t\tObjectError error = new ObjectError(\"region\",messages.getMessage(\"message.region.exists\", locale));\n-\t\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\tcountries.add(customRegion.getCountries().get(0));\n-\t\t\t\t\t\n-\t\t\t\t} else {\n-\t\t\t\t\tList<String> countriesList = new ArrayList<String>();\n-\t\t\t\t\tcountriesList.add(customRegion.getCountries().get(0));\n-\t\t\t\t\tregion.setCountries(countriesList);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\t\t}\n-\t\t\n-\n-\t\tshippingService.saveCustomShippingConfiguration(this.WEIGHT_BASED_SHIPPING_METHOD, customConfiguration, store);\n-\t\tmodel.addAttribute(\"customConfiguration\", customConfiguration);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/saveweightBasedShippingMethod.html\", method=RequestMethod.POST)\n-\tpublic String saveShippingMethod(@ModelAttribute(\"configuration\") CustomShippingQuotesConfiguration configuration, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tpopulateModel(model, request, response);\n-\t\t\n-\t\tString moduleCode = configuration.getModuleCode();\n-\t\tLOGGER.debug(\"Saving module code \" + moduleCode);\n-\t\t\n-\t\tList<String> environments = new ArrayList<String>();\n-\t\tenvironments.add(com.salesmanager.core.business.constants.Constants.TEST_ENVIRONMENT);\n-\t\tenvironments.add(com.salesmanager.core.business.constants.Constants.PRODUCTION_ENVIRONMENT);\n-\n-\t\tmodel.addAttribute(\"environments\", environments);\n-\t\tmodel.addAttribute(\"configuration\", configuration);\n-\n-\t\ttry {\n-\t\t\t\n-\t\t\t\n-\t\t\tCustomShippingQuotesConfiguration dbConfig = (CustomShippingQuotesConfiguration) shippingService.getCustomShippingConfiguration(this.WEIGHT_BASED_SHIPPING_METHOD, store);\n-\t\t\t\n-\t\t\t\n-\t\t\tshippingService.saveShippingQuoteModuleConfiguration(configuration, store);\n-\t\t\tif(dbConfig!=null) {\n-\t\t\t\tdbConfig.setActive(configuration.isActive());\n-\t\t\t\tshippingService.saveCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, dbConfig, store);\n-\t\t\t} else {\n-\t\t\t\tshippingService.saveCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, configuration, store);\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\t\n-\t\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tif(e instanceof IntegrationException) {\n-\t\t\t\tif(((IntegrationException)e).getErrorCode()==IntegrationException.ERROR_VALIDATION_SAVE) {\n-\t\t\t\t\t\n-\t\t\t\t\tList<String> errorCodes = ((IntegrationException)e).getErrorFields();\n-\t\t\t\t\tfor(String errorCode : errorCodes) {\n-\t\t\t\t\t\tmodel.addAttribute(errorCode,messages.getMessage(\"message.fielderror\", locale));\n-\t\t\t\t\t}\n-\t\t\t\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new Exception(e);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/weightBased/removeCountry.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deleteCountry(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString country = request.getParameter(\"regionCode\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\n-\t\ttry {\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\tCustomShippingQuotesConfiguration customConfiguration = (CustomShippingQuotesConfiguration)shippingService.getCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\n-\t\t\tif(customConfiguration!=null) {\n-\t\t\t\t\n-\t\t\t\tList<CustomShippingQuotesRegion> quotes = customConfiguration.getRegions();\n-\t\t\t\tfor (CustomShippingQuotesRegion quote : quotes) {\n-\t\t\t\t\t\tList<String> countries = quote.getCountries();\n-\t\t\t\t\t\tList<String> newCountries = new ArrayList<String>();\n-\t\t\t\t\t\tif(countries!=null) {\n-\t\t\t\t\t\t\tfor(String cntry : countries) {\n-\t\t\t\t\t\t\t\tif(!cntry.equals(country)) {\n-\t\t\t\t\t\t\t\t\tnewCountries.add(cntry);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tquote.setCountries(newCountries);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tshippingService.saveCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, customConfiguration, store);\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging custom weight based\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/weightBased/removePrice.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> deletePrice(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString weight = request.getParameter(\"weight\");\n-\t\tString region = request.getParameter(\"region\");\n-\t\tint maxWeight = 0;\n-\t\ttry {\n-\t\t\tmaxWeight = Integer.parseInt(weight);\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Weight (integer) malformed \" + weight);\n-\t\t}\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\n-\t\ttry {\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\tCustomShippingQuotesConfiguration customConfiguration = (CustomShippingQuotesConfiguration)shippingService.getCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\n-\t\t\tif(customConfiguration!=null) {\n-\t\t\t\t\n-\t\t\t\tList<CustomShippingQuotesRegion> quotes = customConfiguration.getRegions();\n-\t\t\t\t\n-\t\t\t\tfor (CustomShippingQuotesRegion quote : quotes) {\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\t\tif(quote.getCustomRegionName().equals(region)) {\n-\t\t\t\t\t\t\tList<CustomShippingQuoteWeightItem> quoteItems = quote.getQuoteItems();\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\tif(quoteItems!=null) {\n-\t\t\t\t\t\t\t\tList<CustomShippingQuoteWeightItem> newQuoteItems = new ArrayList<CustomShippingQuoteWeightItem>();\n-\t\t\t\t\t\t\t\tfor(CustomShippingQuoteWeightItem q : quoteItems) {\n-\t\t\t\t\t\t\t\t\tif(maxWeight!=q.getMaximumWeight()) {\n-\t\t\t\t\t\t\t\t\t\tnewQuoteItems.add(q);\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\tquote.setQuoteItems(newQuoteItems);\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t}\n-\t\t\t\n-\t\t\tshippingService.saveCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, customConfiguration, store);\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging custom weight based\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/deleteWeightBasedShippingMethod.html\", method=RequestMethod.POST)\n-\tpublic String deleteShippingMethod(BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tshippingService.removeCustomShippingQuoteModuleConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\t\t\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingMethods;\n-\t\t\n-\t}\n-\t\n-\t/**\n-\t * Check if a region code already exist with the same name\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t */\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/checkRegionCode.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> checkRegionCode(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString code = request.getParameter(\"code\");\n-\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tif(StringUtils.isBlank(code)) {\n-\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tCustomShippingQuotesConfiguration customConfiguration = (CustomShippingQuotesConfiguration)shippingService.getCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\n-\t\t\tif(customConfiguration!=null) {\n-\t\t\t\tList<CustomShippingQuotesRegion> regions =  customConfiguration.getRegions();\n-\t\t\t\tfor(CustomShippingQuotesRegion region : regions) {\n-\t\t\t\t\t\n-\t\t\t\t\tif(code.equals(region.getCustomRegionName())) {\n-\t\t\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while getting user\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value = \"/admin/shipping/weightBased/page.html\", method = RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tResponseEntity<String> pageCustomShipping(HttpServletRequest request,\n-\t\t\tHttpServletResponse response) {\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\ttry {\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\tCustomShippingQuotesConfiguration customConfiguration = (CustomShippingQuotesConfiguration)shippingService.getCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\t\t\t\n-\t\t\tMap<String,Country> countriesMap = countryService.getCountriesMap(language);\n-\n-\t\t\tif(customConfiguration!=null) {\n-\t\t\t\tList<CustomShippingQuotesRegion> quotes = customConfiguration.getRegions();\n-\t\t\t\tfor (CustomShippingQuotesRegion quote : quotes) {\n-\t\t\t\t\t\tList<String> countries = quote.getCountries();\n-\t\t\t\t\t\tif(countries!=null) {\n-\t\t\t\t\t\t\tfor(String country : countries) {\n-\t\t\t\t\t\t\t\tMap<String,String> entry = new HashMap<String,String> ();\n-\t\t\t\t\t\t\t\tentry.put(\"regionCode\", country);\n-\t\t\t\t\t\t\t\tentry.put(\"region\", quote.getCustomRegionName());\n-\t\t\t\t\t\t\t\tentry.put(\"country\", countriesMap.get(country).getName());\n-\t\t\t\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging custom weight based\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\n-\t\n-\t/**\n-\t * Edit custom region\n-\t * @param region\n-\t * @param model\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/weightBased/edit.html\", method=RequestMethod.GET)\n-\tpublic String editCustomShipping(@ModelAttribute(\"customRegionName\") String region, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tCustomShippingQuotesConfiguration customConfiguration = (CustomShippingQuotesConfiguration)shippingService.getCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\t\tCustomShippingQuotesRegion aRegion = null;\n-\n-\t\tList<CustomShippingQuotesRegion> regions = customConfiguration.getRegions();\n-\t\tfor(CustomShippingQuotesRegion customRegion : regions) {\n-\t\t\tif(customRegion.getCustomRegionName().equals(region)) {\n-\t\t\t\taRegion = customRegion;\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tif(aRegion==null) {\n-\t\t\treturn \"redirect:/admin/shipping/shippingMethods.html\";\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"customRegion\", aRegion);\n-\n-\n-\t\treturn ControllerConstants.Tiles.Shipping.customShippingWeightBased;\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value = \"/admin/shipping/weightBasedDetails/page.html\", method = RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tResponseEntity<String> pageCustomShippingDetails(HttpServletRequest request,\n-\t\t\tHttpServletResponse response) {\n-\t\t\n-\t\tString region = request.getParameter(\"region\");\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tif(StringUtils.isBlank(region)){\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorString(\"Region is not valid\");\n-\t\t\tString returnString = resp.toJSONString();\n-\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t\n-\t\t}\n-\n-\n-\t\ttry {\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\tCustomShippingQuotesConfiguration customConfiguration = (CustomShippingQuotesConfiguration)shippingService.getCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\n-\t\t\tList<CustomShippingQuotesRegion> quotes = customConfiguration.getRegions();\n-\t\t\tfor (CustomShippingQuotesRegion quote : quotes) {\n-\n-\t\t\t\t\tif(quote.getCustomRegionName().equals(region)) {\n-\n-\t\t\t\t\t\tList<CustomShippingQuoteWeightItem> quoteItems = quote.getQuoteItems();\n-\t\t\t\t\t\tif(quoteItems!=null) {\n-\t\t\t\t\t\t\tfor(CustomShippingQuoteWeightItem quoteItem : quoteItems) {\n-\t\t\t\t\t\t\t\tMap<String,String> entry = new HashMap<String,String> ();\n-\t\t\t\t\t\t\t\tentry.put(\"price\", priceUtil.getAdminFormatedAmountWithCurrency(store,quoteItem.getPrice()));\n-\t\t\t\t\t\t\t\tentry.put(\"weight\", String.valueOf(quoteItem.getMaximumWeight()));\n-\t\t\t\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t\n-\t\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/weightBased/addPrice.html\", method=RequestMethod.POST)\n-\tpublic String addPrice(@ModelAttribute(\"region\") String customRegion, @ModelAttribute(\"customQuote\") CustomShippingQuoteWeightItem customQuote, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tCustomShippingQuotesConfiguration customConfiguration = (CustomShippingQuotesConfiguration)shippingService.getCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\n-\t\tList<CustomShippingQuotesRegion> regions = customConfiguration.getRegions();\n-\t\t\n-\t\ttry {\n-\t\t\tBigDecimal price = MerchantUtils.getBigDecimal(customQuote.getPriceText());\n-\t\t\tcustomQuote.setPrice(price);\n-\t\t} catch(Exception e) {\n-\t\t\tObjectError error = new ObjectError(\"priceText\",messages.getMessage(\"message.invalid.price\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\n-\t\tint weight = customQuote.getMaximumWeight();\n-\t\tif(weight<=0) {\n-\t\t\tObjectError error = new ObjectError(\"maximumWeight\",messages.getMessage(\"message.maximumWeight.invalid\", locale));\n-\t\t\tresult.addError(error);\t\n-\t\t}\n-\n-\t\t\n-\n-\t\tfor(CustomShippingQuotesRegion customReg : regions) {\n-\t\t\tif(customReg.getCustomRegionName().equals(customRegion)) {\n-\t\t\t\tmodel.addAttribute(\"customRegion\", customReg);\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t\t\n-\n-\t\tif(StringUtils.isBlank(customQuote.getPriceText())) {\n-\t\t\tObjectError error = new ObjectError(\"priceText\",messages.getMessage(\"message.invalid.price\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\tCustomShippingQuotesRegion currentRegion = null;\n-\t\t\n-\t\t\n-\t\tfor(CustomShippingQuotesRegion region : regions) {\n-\t\t\tif(region.getCustomRegionName().equals(customRegion)) {\n-\t\t\t\tcurrentRegion = region;\n-\t\t\t\tList<CustomShippingQuoteWeightItem> quotes = region.getQuoteItems();\n-\t\t\t\tif(quotes!=null) {\n-\t\t\t\t\tfor(CustomShippingQuoteWeightItem quote : quotes) {\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tif(quote.getMaximumWeight()==customQuote.getMaximumWeight()){\n-\t\t\t\t\t\t\tObjectError error = new ObjectError(\"maximumWeight\",messages.getMessage(\"label.message.maximumWeight.exist\", locale));\n-\t\t\t\t\t\t\tresult.addError(error);\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t} \n-\t\t\t\t\t}\n-\t\t\t\t\tquotes.add(customQuote);\n-\t\t\t\t} else {\n-\t\t\t\t\tquotes = new ArrayList<CustomShippingQuoteWeightItem>();\n-\t\t\t\t\tquotes.add(customQuote);\n-\t\t\t\t\tregion.setQuoteItems(quotes);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"customConfiguration\", customConfiguration);\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.Shipping.customShippingWeightBased;\n-\t\t}\n-\t\t\n-\t\t//order weights\n-\t\tif(currentRegion!=null) {\n-\t\t\tList<CustomShippingQuoteWeightItem> quotes = currentRegion.getQuoteItems();\n-\t\t\tif(quotes!=null) {\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\tBeanComparator beanComparator = new BeanComparator(\"maximumWeight\");\n-\t\t\t\tCollections.sort(quotes, beanComparator);\n-\t\t\t\t\n-\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t\n-\t\tshippingService.saveCustomShippingConfiguration(this.WEIGHT_BASED_SHIPPING_METHOD, customConfiguration, store);\n-\t\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Shipping.customShippingWeightBased;\n-\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/weightBased/deleteRegion.html\", method=RequestMethod.POST)\n-\tpublic String deleteRegion(@ModelAttribute(\"customRegionName\") String region, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\t\n-\t\t\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\tCustomShippingQuotesConfiguration customConfiguration = (CustomShippingQuotesConfiguration)shippingService.getCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\n-\t\tList<CustomShippingQuotesRegion> regions = customConfiguration.getRegions();\n-\t\t\n-\t\tList<CustomShippingQuotesRegion> newRegions = new ArrayList<CustomShippingQuotesRegion>();\n-\t\tfor(CustomShippingQuotesRegion reg : regions) {\n-\n-\t\t\tif(!reg.getCustomRegionName().equals(region)) {\n-\t\t\t\tnewRegions.add(reg);\n-\t\t\t}\n-\t\t}\n-\n-\t\tcustomConfiguration.setRegions(newRegions);\n-\t\tshippingService.saveCustomShippingConfiguration(this.WEIGHT_BASED_SHIPPING_METHOD, customConfiguration, store);\n-\t\tpopulateModel(model, request, response);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\t}\n-\t\n-\t\n-\t\n-\t\n-\n-\tprivate void populateModel(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\tShippingConfiguration shippingConfiguration =  shippingService.getShippingConfiguration(store);\n-\t\t\n-\t\tif(shippingConfiguration==null) {\n-\t\t\tshippingConfiguration = new ShippingConfiguration();\n-\t\t\tshippingConfiguration.setShippingType(ShippingType.INTERNATIONAL);\n-\t\t}\n-\t\t\n-\n-\t\t//get configured shipping modules\n-\t\tMap<String,IntegrationConfiguration> configuredModules = shippingService.getShippingModulesConfigured(store);\n-\t\tIntegrationConfiguration configuration = new IntegrationConfiguration();\n-\t\tif(configuredModules!=null) {\n-\t\t\tfor(String key : configuredModules.keySet()) {\n-\t\t\t\tif(key.equals(WEIGHT_BASED_SHIPPING_METHOD)) {\n-\t\t\t\t\tconfiguration = configuredModules.get(key);\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tconfiguration.setModuleCode(WEIGHT_BASED_SHIPPING_METHOD);\n-\t\t\n-\t\t//get custom information\n-\t\tCustomShippingQuotesConfiguration customConfiguration = (CustomShippingQuotesConfiguration)shippingService.getCustomShippingConfiguration(WEIGHT_BASED_SHIPPING_METHOD, store);\n-\n-\t\tif(customConfiguration==null) {\n-\t\t\tcustomConfiguration = new CustomShippingQuotesConfiguration();\n-\t\t\tcustomConfiguration.setModuleCode(this.WEIGHT_BASED_SHIPPING_METHOD);\n-\t\t}\n-\t\t\n-\t\t\n-\t\t//get supported countries\n-\t\t//List<String> includedCountries = shippingService.getSupportedCountries(store);\n-\t\tList<Country> shipToCountries = shippingService.getShipToCountryList(store, language);\n-/*\t\tList<Country> shippingCountries = new ArrayList<Country>();\n-\t\tMap<String,Country> countries = countryService.getCountriesMap(language);\n-\t\tif(shippingConfiguration.getShippingType().name().equals(ShippingType.INTERNATIONAL.name())){\n-\t\t\t\n-\t\t\tfor(String key : countries.keySet()) {\n-\t\t\t\tCountry country = (Country)countries.get(key);\n-\t\t\t\tif(includedCountries.contains(key)) {\n-\t\t\t\t\tshippingCountries.add(country);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {//if national only store country\n-\t\t\tif(!includedCountries.contains(store.getCountry().getIsoCode())) {\n-\t\t\t\tshippingCountries.add((Country)countries.get(store.getCountry().getIsoCode()));\n-\t\t\t}\n-\t\t}*/\n-\t\t\n-\t\tCustomShippingQuotesRegion customRegion = new CustomShippingQuotesRegion();\n-\t\t\n-\t\t\n-\t\tList<String> environments = new ArrayList<String>();\n-\t\tenvironments.add(com.salesmanager.core.business.constants.Constants.PRODUCTION_ENVIRONMENT);//only production\n-\t\t\n-\t\tmodel.addAttribute(\"environments\", environments);\n-\t\tmodel.addAttribute(\"configuration\", configuration);\n-\t\tmodel.addAttribute(\"customConfiguration\", customConfiguration);\n-\t\tmodel.addAttribute(\"customRegion\", customRegion);\n-\t\tmodel.addAttribute(\"shippingCountries\", shipToCountries);\n-\n-\t\t\n-\t}\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"shipping\", \"shipping\");\n-\t\tactiveMenus.put(\"shipping-methods\", \"shipping-methods\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"shipping\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/shipping/ShippingConfigsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 234,
          "patch": "@@ -1,234 +0,0 @@\n-package com.salesmanager.shop.admin.controller.shipping;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.shipping.ShippingService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.country.Country;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.shipping.ShippingConfiguration;\n-import com.salesmanager.core.model.shipping.ShippingType;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-\n-\n-@Controller\n-public class ShippingConfigsController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ShippingConfigsController.class);\n-\n-\t\n-\t@Inject\n-\tprivate ShippingService shippingService;\n-\t\n-\t@Inject\n-\tprivate CountryService countryService;\n-\t\n-\t/**\n-\t * Configures the shipping mode, shows shipping countries\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/shippingConfigs.html\", method=RequestMethod.GET)\n-\tpublic String displayShippingConfigs(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\n-\t\t\n-\t\tShippingConfiguration shippingConfiguration =  shippingService.getShippingConfiguration(store);\n-\t\t\n-\t\tif(shippingConfiguration==null) {\n-\t\t\tshippingConfiguration = new ShippingConfiguration();\n-\t\t\tshippingConfiguration.setShippingType(ShippingType.INTERNATIONAL);\n-\t\t}\n-\t\t\n-\n-\t\tmodel.addAttribute(\"configuration\", shippingConfiguration);\n-\t\treturn \"shipping-configs\";\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/saveShippingConfiguration.html\", method=RequestMethod.POST)\n-\tpublic String saveShippingConfiguration(@ModelAttribute(\"configuration\") ShippingConfiguration configuration, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t//get original configuration\n-\t\tShippingConfiguration shippingConfiguration =  shippingService.getShippingConfiguration(store);\n-\t\t\n-\t\tif(shippingConfiguration==null) {\n-\t\t\tshippingConfiguration = new ShippingConfiguration();\n-\t\t}\n-\t\t\n-\t\tshippingConfiguration.setShippingType(configuration.getShippingType());\n-\t\t\n-\t\tshippingService.saveShippingConfiguration(shippingConfiguration, store);\n-\t\t\n-\t\tmodel.addAttribute(\"configuration\", shippingConfiguration);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn \"shipping-configs\";\n-\t\t\n-\t}\n-\t\n-\t@SuppressWarnings({ \"unchecked\"})\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/countries/paging.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> pageCountries(HttpServletRequest request, HttpServletResponse response) {\n-\t\tString countryName = request.getParameter(\"name\");\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\ttry {\n-\t\t\t\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\t//get list of countries\n-\t\t\tMap<String,Country> countries = countryService.getCountriesMap(language);\n-\t\t\t\n-\t\t\t//get inclusions\n-\t\t\tList<String> includedCountries = shippingService.getSupportedCountries(store);\n-\t\t\t\n-\n-\t\t\tfor(String key : countries.keySet()) {\n-\t\t\t\t\n-\t\t\t\tCountry country = (Country)countries.get(key);\n-\n-\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"code\", country.getIsoCode());\n-\t\t\t\tentry.put(\"name\", country.getName());\n-\t\t\t\t\n-\t\t\t\tif(includedCountries.contains(key)) {\n-\t\t\t\t\tentry.put(\"supported\", true);\n-\t\t\t\t} else {\n-\t\t\t\t\tentry.put(\"supported\", false);\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif(!StringUtils.isBlank(countryName)) {\n-\t\t\t\t\tif(country.getName().contains(countryName)){\n-\t\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging shipping countries\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/countries/update.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> updateCountry(HttpServletRequest request, HttpServletResponse response) {\n-\t\tString values = request.getParameter(\"_oldValues\");\n-\t\tString supported = request.getParameter(\"supported\");\n-\t\t\n-\t\t\n-\t\t\n-\n-\t\t\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\ttry {\n-\t\t\t\n-\t\t\tObjectMapper mapper = new ObjectMapper();\n-\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\tMap conf = mapper.readValue(values, Map.class);\n-\t\t\t\n-\t\t\tString countryCode = (String)conf.get(\"code\");\n-\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\t\n-\t\t\t//get list of countries\n-\t\t\tList<String> includedCountries = shippingService.getSupportedCountries(store);\n-\t\t\t\n-\t\t\tif(!StringUtils.isBlank(supported)) {\n-\t\t\t\tif(\"true\".equals(supported)) {\n-\t\t\t\t\tincludedCountries.add(countryCode);\n-\t\t\t\t} else {\n-\t\t\t\t\tincludedCountries.remove(countryCode);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\tshippingService.setSupportedCountries(store, includedCountries);\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\n-\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging shipping countries\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"shipping\", \"shipping\");\n-\t\tactiveMenus.put(\"shipping-configs\", \"shipping-configs\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"shipping\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/shipping/ShippingMethodsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 182,
          "patch": "@@ -1,182 +0,0 @@\n-package com.salesmanager.shop.admin.controller.shipping;\n-\n-import com.salesmanager.core.business.services.shipping.ShippingService;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.system.IntegrationConfiguration;\n-import com.salesmanager.core.model.system.IntegrationModule;\n-import com.salesmanager.core.modules.integration.IntegrationException;\n-import com.salesmanager.core.modules.integration.shipping.model.CustomShippingQuotesConfiguration;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.*;\n-\n-@Controller\n-public class ShippingMethodsController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ShippingMethodsController.class);\n-\t\n-\n-\t@Inject\n-\tprivate ShippingService shippingService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\t/**\n-\t * Configures the shipping shows shipping methods\n-\t * @param request\n-\t * @param response\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/shippingMethods.html\", method=RequestMethod.GET)\n-\tpublic String displayShippingMethods(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t//get shipping methods\n-\t\tList<IntegrationModule> modules = shippingService.getShippingMethods(store);\n-\n-\t\t//get configured shipping modules\n-\t\tMap<String,IntegrationConfiguration> configuredModules = shippingService.getShippingModulesConfigured(store);\n-\t\t\n-\n-\n-\t\tmodel.addAttribute(\"modules\", modules);\n-\t\tmodel.addAttribute(\"configuredModules\", configuredModules);\n-\t\n-\t\t\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingMethods;\n-\t\t\n-\t\t\n-\t}\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/shippingMethod.html\", method=RequestMethod.GET)\n-\tpublic String displayShippingMethod(@RequestParam(\"code\") String code, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\n-\t\t//get configured shipping modules\n-\t\tIntegrationConfiguration configuration = shippingService.getShippingConfiguration(code, store);\n-\t\tif(configuration==null) {\n-\t\t\tconfiguration = new IntegrationConfiguration();\n-\t\t}\n-\t\t\n-\t\tconfiguration.setModuleCode(code);\n-\t\t\n-\t\tList<String> environments = new ArrayList<String>();\n-\t\tenvironments.add(com.salesmanager.core.business.constants.Constants.TEST_ENVIRONMENT);\n-\t\tenvironments.add(com.salesmanager.core.business.constants.Constants.PRODUCTION_ENVIRONMENT);\n-\t\t\n-\t\tmodel.addAttribute(\"configuration\", configuration);\n-\t\tmodel.addAttribute(\"environments\", environments);\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\t\t\n-\t\t\n-\t}\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/saveShippingMethod.html\", method=RequestMethod.POST)\n-\tpublic String saveShippingMethod(@ModelAttribute(\"configuration\") IntegrationConfiguration configuration, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tString moduleCode = configuration.getModuleCode();\n-\t\tLOGGER.debug(\"Saving module code \" + moduleCode);\n-\t\t\n-\t\tList<String> environments = new ArrayList<String>();\n-\t\tenvironments.add(com.salesmanager.core.business.constants.Constants.TEST_ENVIRONMENT);\n-\t\tenvironments.add(com.salesmanager.core.business.constants.Constants.PRODUCTION_ENVIRONMENT);\n-\n-\t\tmodel.addAttribute(\"environments\", environments);\n-\t\tmodel.addAttribute(\"configuration\", configuration);\n-\n-\t\ttry {\n-\t\t\tshippingService.saveShippingQuoteModuleConfiguration(configuration, store);\n-\t\t} catch (Exception e) {\n-\t\t\tif(e instanceof IntegrationException) {\n-\t\t\t\tif(((IntegrationException)e).getErrorCode()==IntegrationException.ERROR_VALIDATION_SAVE) {\n-\t\t\t\t\t\n-\t\t\t\t\tList<String> errorCodes = ((IntegrationException)e).getErrorFields();\n-\t\t\t\t\tfor(String errorCode : errorCodes) {\n-\t\t\t\t\t\tmodel.addAttribute(errorCode,messages.getMessage(\"message.fielderror\", locale));\n-\t\t\t\t\t}\n-\t\t\t\t\tmodel.addAttribute(\"validationError\",\"validationError\");\n-\t\t\t\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new Exception(e);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t\n-\t\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/weightBased.html\", method=RequestMethod.POST)\n-\tpublic String saveCustomWeightBasedShippingMethod(@ModelAttribute(\"configuration\") CustomShippingQuotesConfiguration configuration, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingMethod;\n-\n-\t}\n-\t\n-\t@RequestMapping(value=\"/admin/shipping/deleteShippingMethod.html\", method=RequestMethod.POST)\n-\tpublic String deleteShippingMethod(@RequestParam(\"code\") String code, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tshippingService.removeShippingQuoteModuleConfiguration(code, store);\n-\t\t\n-\t\treturn \"redirect:/admin/shipping/shippingMethods.html\";\n-\t\t\n-\t}\n-\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"shipping\", \"shipping\");\n-\t\tactiveMenus.put(\"shipping-methods\", \"shipping-methods\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"shipping\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/shipping/ShippingOptionsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 176,
          "patch": "@@ -1,176 +0,0 @@\n-package com.salesmanager.shop.admin.controller.shipping;\n-\n-import java.math.BigDecimal;\n-import java.util.HashMap;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.inject.Inject;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.shipping.ShippingConfiguration;\n-import com.salesmanager.core.model.shipping.ShippingType;\n-import com.salesmanager.core.business.services.shipping.ShippingService;\n-import com.salesmanager.core.business.utils.ProductPriceUtils;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-\n-@Controller\n-public class ShippingOptionsController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ShippingOptionsController.class);\n-\t\n-\n-\t@Inject\n-\tprivate ShippingService shippingService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\t@Inject\n-\tprivate ProductPriceUtils priceUtil;\n-\t\n-\t/**\n-\t * Displays shipping options\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/shippingOptions.html\", method=RequestMethod.GET)\n-\tpublic String displayShippingOptions(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\n-\t\tthis.setMenu(model, request);\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\n-\t\t\n-\t\tShippingConfiguration shippingConfiguration =  shippingService.getShippingConfiguration(store);\n-\t\t\n-\t\tif(shippingConfiguration==null) {\n-\t\t\tshippingConfiguration = new ShippingConfiguration();\n-\t\t\tshippingConfiguration.setShippingType(ShippingType.INTERNATIONAL);\n-\t\t}\n-\t\t\n-\t\tif(shippingConfiguration!=null) {\n-\t\t\t\n-\t\t\tif(shippingConfiguration.getHandlingFees()!=null) {\n-\t\t\t\tshippingConfiguration.setHandlingFeesText(priceUtil.getAdminFormatedAmount(store,shippingConfiguration.getHandlingFees()));\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(shippingConfiguration.getOrderTotalFreeShipping()!=null) {\n-\t\t\t\tshippingConfiguration.setOrderTotalFreeShippingText(priceUtil.getAdminFormatedAmount(store,shippingConfiguration.getOrderTotalFreeShipping()));\n-\t\t\t}\n-\t\t\t\n-\t\t}\n-\t\t\n-\n-\t\tmodel.addAttribute(\"configuration\", shippingConfiguration);\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingOptions;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t/**\n-\t * Saves shipping options\n-\t * @param configuration\n-\t * @param result\n-\t * @param model\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/saveShippingOptions.html\", method=RequestMethod.POST)\n-\tpublic String saveShippingOptions(@ModelAttribute(\"configuration\") ShippingConfiguration configuration, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t//get original configuration\n-\t\tShippingConfiguration shippingConfiguration =  shippingService.getShippingConfiguration(store);\n-\t\t\n-\t\tif(shippingConfiguration==null) {\n-\t\t\tshippingConfiguration = new ShippingConfiguration();\n-\t\t}\n-\t\t\n-\t\tBigDecimal submitedOrderPrice = null;\n-\t\tif(!StringUtils.isBlank(configuration.getOrderTotalFreeShippingText())){\n-\t\t\ttry {\n-\t\t\t\tsubmitedOrderPrice = priceUtil.getAmount(configuration.getOrderTotalFreeShippingText());\n-\t\t\t\tshippingConfiguration.setOrderTotalFreeShipping(submitedOrderPrice);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tObjectError error = new ObjectError(\"orderTotalFreeShippingText\",messages.getMessage(\"message.invalid.price\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tBigDecimal submitedHandlingPrice = null;\n-\t\tif(!StringUtils.isBlank(configuration.getHandlingFeesText())){\n-\t\t\ttry {\n-\t\t\t\tsubmitedHandlingPrice = priceUtil.getAmount(configuration.getHandlingFeesText());\n-\t\t\t\tshippingConfiguration.setHandlingFees(submitedHandlingPrice);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tObjectError error = new ObjectError(\"handlingFeesText\",messages.getMessage(\"message.invalid.price\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\tshippingConfiguration.setFreeShippingEnabled(configuration.isFreeShippingEnabled());\n-\t\tshippingConfiguration.setTaxOnShipping(configuration.isTaxOnShipping());\n-\t\tif(configuration.getShipFreeType()!=null) {\n-\t\t\tshippingConfiguration.setShipFreeType(configuration.getShipFreeType());\n-\t\t}\n-\t\tshippingConfiguration.setShipOptionPriceType(configuration.getShipOptionPriceType());\n-\n-\t\tshippingService.saveShippingConfiguration(shippingConfiguration, store);\n-\t\t\n-\t\tmodel.addAttribute(\"configuration\", configuration);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingOptions;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"shipping\", \"shipping\");\n-\t\tactiveMenus.put(\"shipping-options\", \"shipping-options\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"shipping\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/shipping/ShippingOriginController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 168,
          "patch": "@@ -1,168 +0,0 @@\n-package com.salesmanager.shop.admin.controller.shipping;\n-\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.reference.zone.ZoneService;\n-import com.salesmanager.core.business.services.shipping.ShippingOriginService;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.country.Country;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.reference.zone.Zone;\n-import com.salesmanager.core.model.shipping.ShippingOrigin;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-\n-@Controller\n-public class ShippingOriginController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ShippingOriginController.class);\n-\n-\t\n-\t@Inject\n-\tprivate ShippingOriginService shippingOriginService;\n-\t\n-\t@Inject\n-\tprivate CountryService countryService;\n-\t\n-\t@Inject\n-\tprivate ZoneService zoneService;\n-\t\n-\t/**\n-\t * Configures the shipping mode, shows shipping countries\n-\t * @param request\n-\t * @param response\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/origin/get.html\", method=RequestMethod.GET)\n-\tpublic String displayShippingOrigin(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\tthis.setMenu(model, request);\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\t\t\n-\t\t\n-\t\tShippingOrigin shippingOrigin =  shippingOriginService.getByStore(store);\n-\t\t\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\t\t\n-\t\tif(shippingOrigin==null) {\n-\t\t\tshippingOrigin = new ShippingOrigin();\n-\t\t\tshippingOrigin.setCountry(store.getCountry());\n-\t\t\tshippingOrigin.setState(store.getStorestateprovince());\n-\t\t\tshippingOrigin.setZone(store.getZone());\n-\t\t}\n-\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\tmodel.addAttribute(\"origin\", shippingOrigin);\n-\t\treturn \"shipping-origin\";\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/origin/post.html\", method=RequestMethod.POST)\n-\tpublic String saveShippingOrigin(@Valid @ModelAttribute(\"origin\") ShippingOrigin origin, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\t\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\t\t\n-\t\tShippingOrigin shippingOrigin =  shippingOriginService.getByStore(store);\n-\t\tif(shippingOrigin!=null) {\n-\t\t\torigin.setId(shippingOrigin.getId());\n-\t\t}\n-\t\t\n-\t\torigin.setMerchantStore(store);\n-\t\t\n-\t\tCountry country = countryService.getByCode(origin.getCountry().getIsoCode());\n-\t\torigin.setCountry(country);\n-\t\t\n-\t\tif(origin.getZone() !=null) {\n-\t\t\tZone zone = zoneService.getByCode(origin.getZone().getCode());\n-\t\t\torigin.setZone(zone);\n-\t\t}\n-\t\t\n-\t\tif(shippingOrigin!=null) {\n-\t\t\tshippingOriginService.update(origin);\n-\t\t} else {\n-\t\t\tshippingOriginService.save(origin);\n-\t\t}\n-\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\tmodel.addAttribute(\"origin\", origin);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn \"shipping-origin\";\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/origin/delete.html\", method=RequestMethod.POST)\n-\tpublic String deleteShippingOrigin(@ModelAttribute(\"origin\") ShippingOrigin origin, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tShippingOrigin shippingOrigin =  shippingOriginService.getByStore(store);\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\t\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\t\t\n-\n-\t\tif(shippingOrigin!=null && origin !=null) {\n-\t\t\tif(shippingOrigin.getId().longValue() == origin.getId().longValue()) {\n-\t\t\t\tshippingOriginService.delete(shippingOrigin);\n-\t\t\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\t} else {\n-\t\t\t\treturn \"redirect:/admin/shipping/origin/get.html\";\n-\t\t\t}\n-\t\t} else {\n-\t\t\treturn \"redirect:/admin/shipping/origin/get.html\";\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\tmodel.addAttribute(\"origin\", null);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn \"shipping-origin\";\n-\t\t\n-\t}\n-\t\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"shipping\", \"shipping\");\n-\t\tactiveMenus.put(\"shipping-origin\", \"shipping-origin\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"shipping\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/shipping/ShippingPackagingController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 140,
          "patch": "@@ -1,140 +0,0 @@\n-package com.salesmanager.shop.admin.controller.shipping;\n-\n-import java.text.DecimalFormat;\n-import java.util.HashMap;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-import com.salesmanager.core.business.services.shipping.ShippingService;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.shipping.ShippingConfiguration;\n-import com.salesmanager.core.model.shipping.ShippingType;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-\n-@Controller\n-public class ShippingPackagingController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ShippingPackagingController.class);\n-\t\n-\n-\t@Inject\n-\tprivate ShippingService shippingService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\n-\t/**\n-\t * Displays shipping packaging\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/shippingPackaging.html\", method=RequestMethod.GET)\n-\tpublic String displayShippingPackaging(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\n-\t\tthis.setMenu(model, request);\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tShippingConfiguration shippingConfiguration =  shippingService.getShippingConfiguration(store);\n-\t\t\n-\t\tif(shippingConfiguration==null) {\n-\t\t\tshippingConfiguration = new ShippingConfiguration();\n-\t\t\tshippingConfiguration.setShippingType(ShippingType.INTERNATIONAL);\n-\t\t}\n-\n-\t\tmodel.addAttribute(\"configuration\", shippingConfiguration);\n-\t\tmodel.addAttribute(\"store\",store);\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingPackaging;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t/**\n-\t * Saves shipping packaging\n-\t * @param configuration\n-\t * @param result\n-\t * @param model\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('SHIPPING')\")\n-\t@RequestMapping(value=\"/admin/shipping/saveShippingPackaging.html\", method=RequestMethod.POST)\n-\tpublic String saveShippingPackaging(@ModelAttribute(\"configuration\") ShippingConfiguration configuration, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\n-\t\tthis.setMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t//get original configuration\n-\t\tShippingConfiguration shippingConfiguration =  shippingService.getShippingConfiguration(store);\n-\t\t\n-\t\tif(shippingConfiguration==null) {\n-\t\t\tshippingConfiguration = new ShippingConfiguration();\n-\t\t}\n-\t\t\n-\t\tDecimalFormat df = new DecimalFormat(\"#.##\");\n-\t\tString sweight = df.format(configuration.getBoxWeight());\n-\t\tdouble weight = Double.parseDouble(sweight);\n-\t\t\n-\t\tshippingConfiguration.setBoxHeight(configuration.getBoxHeight());\n-\t\tshippingConfiguration.setBoxLength(configuration.getBoxLength());\n-\t\tshippingConfiguration.setBoxWeight(weight);\n-\t\tshippingConfiguration.setBoxWidth(configuration.getBoxWidth());\n-\t\t\n-\t\tshippingConfiguration.setShipPackageType(configuration.getShipPackageType());\n-\t\t\n-\n-\t\tshippingService.saveShippingConfiguration(shippingConfiguration, store);\n-\t\t\n-\t\tmodel.addAttribute(\"configuration\", configuration);\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.Shipping.shippingPackaging;\n-\t\t\n-\t\t\n-\t}\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"shipping\", \"shipping\");\n-\t\tactiveMenus.put(\"shipping-packages\", \"shipping-packages\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"shipping\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/tax/TaxClassController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 312,
          "patch": "@@ -1,312 +0,0 @@\n-package com.salesmanager.shop.admin.controller.tax;\n-\n-import com.salesmanager.core.business.services.catalog.product.ProductService;\n-import com.salesmanager.core.business.services.tax.TaxClassService;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.tax.taxclass.TaxClass;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-@Controller\n-public class TaxClassController {\n-\t\n-\t@Inject\n-\tprivate TaxClassService taxClassService = null;\n-\t\n-\t@Inject\n-\tprivate ProductService productService=null;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(TaxClassController.class);\n-\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value={\"/admin/tax/taxclass/list.html\"}, method=RequestMethod.GET)\n-\tpublic String displayTaxClasses(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tTaxClass taxClass = new TaxClass();\n-\t\ttaxClass.setMerchantStore(store);\n-\t\t\n-\t\tmodel.addAttribute(\"taxClass\", taxClass);\n-\t\t\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxClasses;\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value = \"/admin/tax/taxclass/paging.html\", method = RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tResponseEntity<String> pageTaxClasses(HttpServletRequest request,\n-\t\t\tHttpServletResponse response, Locale locale) {\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\ttry {\n-\n-\t\t\t\tList<TaxClass> taxClasses = taxClassService.listByStore(store);\n-\t\t\t\tfor(TaxClass tax : taxClasses) {\n-\t\t\t\t\tif(!tax.getCode().equals(TaxClass.DEFAULT_TAX_CLASS)) {\n-\t\t\t\t\t\tMap<String,String> entry = new HashMap<String,String>();\n-\t\t\t\t\t\tentry.put(\"taxClassId\", String.valueOf(tax.getId()));\n-\t\t\t\t\t\tentry.put(\"code\", tax.getCode());\n-\t\t\t\t\t\tentry.put(\"name\", tax.getTitle());\n-\t\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging permissions\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value=\"/admin/tax/taxclass/save.html\", method=RequestMethod.POST)\n-\tpublic String saveTaxClass(@Valid @ModelAttribute(\"taxClass\") TaxClass taxClass, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model, request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\t\n-\t\t//requires code and name\n-\t\tif(taxClass.getCode().equals(TaxClass.DEFAULT_TAX_CLASS)) {\n-\t\t\tObjectError error = new ObjectError(\"code\",messages.getMessage(\"message.taxclass.alreadyexist\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\n-\t\t\n-\t\t//check if the code already exist\n-\t\tTaxClass taxClassDb = taxClassService.getByCode(taxClass.getCode(),store);\n-\t\t\n-\t\tif(taxClassDb!=null) {\n-\t\t\tObjectError error = new ObjectError(\"code\",messages.getMessage(\"message.taxclass.alreadyexist\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxClasses;\n-\t\t}\n-\t\t\n-\t\ttaxClassService.create(taxClass);\n-\t\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxClasses;\n-\t\t\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value=\"/admin/tax/taxclass/update.html\", method=RequestMethod.POST)\n-\tpublic String updateTaxClass(@Valid @ModelAttribute(\"taxClass\") TaxClass taxClass, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model, request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\t\n-\t\t//requires code and name\n-\t\tif(taxClass.getCode().equals(TaxClass.DEFAULT_TAX_CLASS)) {\n-\t\t\tObjectError error = new ObjectError(\"code\",messages.getMessage(\"message.taxclass.alreadyexist\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\n-\t\t\n-\t\t//check if the code already exist\n-\t\tTaxClass taxClassDb = taxClassService.getByCode(taxClass.getCode(),store);\n-\t\t\n-\t\tif(taxClassDb!=null && taxClassDb.getId().longValue()!=taxClass.getId().longValue()) {\n-\t\t\tObjectError error = new ObjectError(\"code\",messages.getMessage(\"message.taxclass.alreadyexist\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxClass;\n-\t\t}\n-\t\t\n-\t\ttaxClassService.update(taxClass);\n-\t\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxClass;\n-\t\t\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value=\"/admin/tax/taxclass/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeTaxClass(HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\t\t//do not remove super admin\n-\t\t\n-\t\tString taxClassId = request.getParameter(\"taxClassId\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\t/**\n-\t\t\t * In order to remove a User the logged in ser must be ADMIN\n-\t\t\t * or SUPER_USER\n-\t\t\t */\n-\t\t\t\n-\n-\t\t\tif(taxClassId==null){\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tlong lTaxClassId;\n-\t\t\ttry {\n-\t\t\t\tlTaxClassId = Long.parseLong(taxClassId);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"Invalid taxClassId \" + taxClassId);\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tTaxClass taxClass = taxClassService.getById(lTaxClassId);\n-\t\t\t\n-\t\t\tif(taxClass==null) {\n-\t\t\t\tLOGGER.error(\"Invalid taxClassId \" + taxClassId);\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t//look if the taxclass is used for products\n-\t\t\tList<Product> products = productService.listByTaxClass(taxClass);\n-\n-\t\t\tif(products!=null && products.size()>0) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.product.association\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\t\n-\t\t\ttaxClassService.delete(taxClass);\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting tax class\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value=\"/admin/tax/taxclass/edit.html\", method=RequestMethod.GET)\n-\tpublic String editTaxClass(@ModelAttribute(\"id\") String id, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tTaxClass taxClass = null;\n-\t\ttry {\n-\t\t\tLong taxClassId = Long.parseLong(id);\n-\t\t\ttaxClass = taxClassService.getById(taxClassId);\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Cannot parse taxclassid \" + id);\n-\t\t\treturn \"redirect:/admin/tax/taxclass/list.html\";\n-\t\t}\n-\t\t\n-\t\tif(taxClass==null || taxClass.getMerchantStore().getId()!=store.getId()) {\n-\t\t\treturn \"redirect:/admin/tax/taxclass/list.html\";\n-\t\t}\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\tmodel.addAttribute(\"taxClass\", taxClass);\n-\t\t\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxClass;\n-\t\t\n-\t\t\n-\t\t\n-\t}\n-\n-\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request)\n-\tthrows Exception {\n-\n-\t\t// display menu\n-\t\tMap<String, String> activeMenus = new HashMap<String, String>();\n-\t\tactiveMenus.put(\"tax\", \"tax\");\n-\t\tactiveMenus.put(\"taxclass\", \"taxclass\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>) request\n-\t\t\t\t.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu) menus.get(\"tax\");\n-\t\tmodel.addAttribute(\"currentMenu\", currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\", activeMenus);\n-\t\t//\n-\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/tax/TaxConfigurationController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 87,
          "patch": "@@ -1,87 +0,0 @@\n-package com.salesmanager.shop.admin.controller.tax;\n-\n-import com.salesmanager.core.business.services.tax.TaxService;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.tax.TaxConfiguration;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.util.HashMap;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-@Controller\n-public class TaxConfigurationController {\n-\t\n-\t@Inject\n-\tprivate TaxService taxService = null;\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value={\"/admin/tax/taxconfiguration/edit.html\"}, method=RequestMethod.GET)\n-\tpublic String displayTaxConfiguration(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\tTaxConfiguration taxConfiguration = taxService.getTaxConfiguration(store);\n-\t\tif(taxConfiguration == null) {\n-\t\t\t\n-\t\t\ttaxConfiguration = new TaxConfiguration();\n-\t\t\t\n-\t\t}\n-\t\t\n-\t\tmodel.addAttribute(\"taxConfiguration\", taxConfiguration);\n-\t\t\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxConfiguration;\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value=\"/admin/tax/taxconfiguration/save.html\", method=RequestMethod.POST)\n-\tpublic String saveTaxConfiguration(@Valid @ModelAttribute(\"taxConfiguration\") TaxConfiguration taxConfiguration, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\ttaxService.saveTaxConfiguration(taxConfiguration, store);\n-\t\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxConfiguration;\n-\t\t\n-\t}\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request)\n-\tthrows Exception {\n-\n-\t\t// display menu\n-\t\tMap<String, String> activeMenus = new HashMap<String, String>();\n-\t\tactiveMenus.put(\"tax\", \"tax\");\n-\t\tactiveMenus.put(\"taxconfiguration\", \"taxconfiguration\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>) request\n-\t\t\t\t.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu) menus.get(\"tax\");\n-\t\tmodel.addAttribute(\"currentMenu\", currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\", activeMenus);\n-\t\t//\n-\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/tax/TaxRatesController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 473,
          "patch": "@@ -1,473 +0,0 @@\n-package com.salesmanager.shop.admin.controller.tax;\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.reference.zone.ZoneService;\n-import com.salesmanager.core.business.services.tax.TaxClassService;\n-import com.salesmanager.core.business.services.tax.TaxRateService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.country.Country;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.reference.zone.Zone;\n-import com.salesmanager.core.model.tax.taxclass.TaxClass;\n-import com.salesmanager.core.model.tax.taxrate.TaxRate;\n-import com.salesmanager.core.model.tax.taxrate.TaxRateDescription;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.FieldError;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-import java.math.BigDecimal;\n-import java.text.NumberFormat;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-\n-@Controller\n-public class TaxRatesController {\n-\t\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(TaxRatesController.class);\n-\t\n-\tprivate final static char DECIMALCOUNT = '3';\n-\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\t@Inject\n-\tprivate CountryService countryService;\n-\t\n-\t@Inject\n-\tprivate TaxRateService taxRateService;\n-\t\n-\t@Inject\n-\tprivate TaxClassService taxClassService;\n-\t\n-\t@Inject\n-\tprivate ZoneService zoneService;\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value={\"/admin/tax/taxrates/list.html\"}, method=RequestMethod.GET)\n-\tpublic String displayTaxRates(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model, request);\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\t\tTaxRate taxRate = new TaxRate();\n-\t\tList<Language> languages = store.getLanguages();\n-\t\t\n-\t\tfor(Language l : languages) {\n-\t\t\tTaxRateDescription taxRateDescription = new TaxRateDescription();\n-\t\t\ttaxRateDescription.setLanguage(l);\n-\t\t\ttaxRate.getDescriptions().add(taxRateDescription);\n-\t\t}\n-\t\t\n-\t\ttaxRate.setMerchantStore(store);\n-\t\ttaxRate.setCountry(store.getCountry());\n-\t\t\n-\t\tList<TaxRate> taxRates = taxRateService.listByStore(store);\n-\t\tList<TaxClass> taxClasses = taxClassService.listByStore(store);\n-\t\t\n-\t\tmodel.addAttribute(\"taxRate\", taxRate);\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\tmodel.addAttribute(\"taxRates\", taxRates);\n-\t\tmodel.addAttribute(\"taxClasses\", taxClasses);\n-\t\t\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxRates;\n-\t}\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value = \"/admin/tax/taxrates/page.html\", method = RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tResponseEntity<String> pageTaxRates(HttpServletRequest request,\n-\t\t\tHttpServletResponse response) {\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\n-\t\ttry {\n-\t\t\t\n-\t\t\tNumberFormat nf = null;\n-\n-\t\t\t\n-\t\t\tnf = NumberFormat.getInstance(Locale.US);\n-\t\t\tnf.setMaximumFractionDigits(Integer.parseInt(Character\n-\t\t\t\t\t\t.toString(DECIMALCOUNT)));\n-\t\t\tnf.setMinimumFractionDigits(Integer.parseInt(Character\n-\t\t\t\t\t\t.toString(DECIMALCOUNT)));\n-\t\t\t\n-\t\t\t\n-\t\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\tList<TaxRate> taxRates = taxRateService.listByStore(store,language);\n-\n-\t\t\tif(taxRates!=null) {\n-\t\t\t\tfor (TaxRate rate : taxRates) {\n-\n-\t\t\t\t\tMap entry = new HashMap ();\n-\t\t\t\t\tentry.put(\"taxRateId\", String.valueOf(rate.getId()));\n-\t\t\t\t\tentry.put(\"code\", rate.getCode());\n-\t\t\t\t\tList<TaxRateDescription> descriptions = rate.getDescriptions();\n-\t\t\t\t\tString name = \"\";\n-\t\t\t\t\tif(descriptions!=null && descriptions.size()>0) {\n-\t\t\t\t\t\tTaxRateDescription desc = descriptions.get(0);\n-\t\t\t\t\t\tfor(TaxRateDescription description : descriptions) {\n-\t\t\t\t\t\t\tif(description.getLanguage().getCode().equals(language.getCode())) {\n-\t\t\t\t\t\t\t\tdesc = description;\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tname = desc.getName();\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\tentry.put(\"name\", name);\n-\t\t\t\t\tentry.put(\"priority\", rate.getTaxPriority());\n-\t\t\t\t\t\n-\t\t\t\t\tentry.put(\"piggyback\", rate.isPiggyback());\n-\t\t\t\t\tentry.put(\"country\", rate.getCountry().getIsoCode());\n-\t\t\t\t\tentry.put(\"taxClass\", rate.getTaxClass().getCode());\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\tString zoneCode = rate.getStateProvince();\n-\t\t\t\t\tif(rate.getZone()!=null) {\n-\t\t\t\t\t\tzoneCode = rate.getZone().getCode();\n-\t\t\t\t\t}\n-\t\t\t\t\tentry.put(\"zone\", zoneCode);\n-\t\t\t\t\tentry.put(\"rate\", nf.format(rate.getTaxRate()));\n-\n-\t\t\t\t\tresp.addDataEntry(entry);\n-\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging custom weight based\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value=\"/admin/tax/taxrates/save.html\", method=RequestMethod.POST)\n-\tpublic String saveTaxRate(@Valid @ModelAttribute(\"taxRate\") TaxRate taxRate, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\t\tsetMenu(model, request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\tthis.validateTaxRate(model, taxRate, result, store, language, locale);\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\n-\t\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxRates;\n-\n-\t\t}\n-\n-\t\t\n-\t\ttaxRateService.create(taxRate);\n-\t\t\n-\t\tList<TaxRate> taxRates = taxRateService.listByStore(store);\n-\t\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\tmodel.addAttribute(\"taxRates\", taxRates);\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxRates;\n-\t\t\n-\t}\n-\t\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value=\"/admin/tax/taxrates/update.html\", method=RequestMethod.POST)\n-\tpublic String updateTaxRate(@Valid @ModelAttribute(\"taxRate\") TaxRate taxRate, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\t\t\n-\t\tsetMenu(model, request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\t\t\n-\t\tthis.validateTaxRate(model, taxRate, result, store, language, locale);\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\n-\t\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxRate;\n-\n-\t\t}\n-\n-\t\t\n-\t\ttaxRateService.update(taxRate);\n-\t\t\n-\t\tList<TaxRate> taxRates = taxRateService.listByStore(store);\n-\t\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\tmodel.addAttribute(\"taxRates\", taxRates);\n-\t\t\n-\t\t\n-\t\t\n-\t\t\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxRate;\n-\n-\t\t\n-\t}\n-\t\n-\tprivate void validateTaxRate(Model model, TaxRate taxRate, BindingResult result, MerchantStore store, Language language, Locale locale) throws Exception {\n-\t\t\n-\n-\n-\t\tList<TaxClass> taxClasses = taxClassService.listByStore(store);\n-\t\t\n-\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\t\tList<TaxRate> taxRates = taxRateService.listByStore(store);\n-\t\t\n-\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\tmodel.addAttribute(\"taxRates\", taxRates);\n-\t\tmodel.addAttribute(\"taxClasses\", taxClasses);\n-\n-\t\tif(StringUtils.isBlank(taxRate.getRateText())) {\n-\t\t\tFieldError error = new FieldError(\"taxRate\",\"rateText\",messages.getMessage(\"NotEmpty.taxRate.rateText\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\t//if(taxRate.isPiggyback() && taxRate.getParent()==null) {\n-\t\t\t//FieldError error = new FieldError(\"taxRate\",\"piggyback\",messages.getMessage(\"NotNull.taxRate.parent\", locale));\n-\t\t\t//result.addError(error);\n-\t\t//}\n-\t\t\n-\t\ttry {\n-\t\t\tBigDecimal rate = new BigDecimal(taxRate.getRateText());\n-\t\t\ttaxRate.setTaxRate(rate);\n-\t\t} catch (Exception e) {\n-\t\t\tFieldError error = new FieldError(\"taxRate\",\"rateText\",messages.getMessage(\"message.invalid.rate\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\t//check if code exists\n-\t\tString taxRateCode = taxRate.getCode();\n-\t\tTaxRate tr = taxRateService.getByCode(taxRateCode, store);\n-\t\tif(tr!=null) {\n-\t\t\tif(tr.getId().longValue()!=taxRate.getId().longValue()){\n-\t\t\t\tFieldError error = new FieldError(\"taxRate\",\"code\",messages.getMessage(\"NotEmpty.taxRate.unique.code\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\n-\t\tif(taxRate.getTaxPriority()==null) {\n-\t\t\ttaxRate.setTaxPriority(0);\n-\t\t}\n-\n-\t\t\n-\t\tif(taxRate.getZone()!=null) {\n-\t\t\tZone z = zoneService.getById(taxRate.getZone().getId());\n-\t\t\ttaxRate.setZone(z);\n-\t\t}\n-\t\t\n-\n-\t\t\n-\t\tCountry  c = countryService.getByCode(taxRate.getCountry().getIsoCode());\n-\t\t\n-\t\ttaxRate.setCountry(c);\n-\t\t\n-\t\tList<TaxRateDescription> descriptions = taxRate.getDescriptions();\n-\t\tfor(TaxRateDescription description : descriptions) {\n-\t\t\tdescription.setTaxRate(taxRate);\n-\t\t}\n-\t\t\n-\t\tif(!taxRate.isPiggyback()) {\n-\t\t\ttaxRate.setParent(null);\n-\t\t}\n-\t\t\n-\t\treturn;\n-\t\t\n-\t}\n-\t\n-\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value=\"/admin/tax/taxrates/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeTaxRate(HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\t\t//do not remove super admin\n-\t\t\n-\t\tString taxRateId = request.getParameter(\"taxRateId\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\n-\t\ttry {\n-\t\t\t\n-\n-\t\t\t/**\n-\t\t\t * In order to remove a User the logged in must be ADMIN\n-\t\t\t * or SUPER_USER\n-\t\t\t */\n-\t\t\t\n-\n-\t\t\tif(taxRateId==null){\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tlong ltaxRateId;\n-\t\t\ttry {\n-\t\t\t\tltaxRateId = Long.parseLong(taxRateId);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"Invalid taxRateId \" + taxRateId);\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tTaxRate taxRate = taxRateService.getById(ltaxRateId);\n-\t\t\t\n-\t\t\tif(taxRate==null) {\n-\t\t\t\tLOGGER.error(\"Invalid taxRateId \" + taxRateId);\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\t\n-\t\t\t\n-\t\t\ttaxRateService.delete(taxRate);\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting tax rate\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('TAX')\")\n-\t@RequestMapping(value=\"/admin/tax/taxrates/edit.html\", method=RequestMethod.GET)\n-\tpublic String editTaxRate(@ModelAttribute(\"id\") String id, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tLanguage language = (Language)request.getAttribute(\"LANGUAGE\");\n-\n-\t\tTaxRate taxRate = null;\n-\t\ttry {\n-\t\t\tLong taxRateId = Long.parseLong(id);\n-\t\t\ttaxRate = taxRateService.getById(taxRateId);\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Cannot parse taxRateId \" + id);\n-\t\t\treturn \"redirect:/admin/tax/taxrates/list.html\";\n-\t\t}\n-\t\t\n-\t\tif(taxRate==null || taxRate.getMerchantStore().getId()!=store.getId()) {\n-\t\t\treturn \"redirect:/admin/tax/taxrates/list.html\";\n-\t\t}\n-\t\t\n-\t\t\n-\t\tNumberFormat nf = null;\n-\n-\t\t\n-\t\tnf = NumberFormat.getInstance(Locale.US);\n-\n-\t\tnf.setMaximumFractionDigits(Integer.parseInt(Character\n-\t\t\t\t\t.toString(DECIMALCOUNT)));\n-\t\tnf.setMinimumFractionDigits(Integer.parseInt(Character\n-\t\t\t\t\t.toString(DECIMALCOUNT)));\n-\t\t\n-\t\ttaxRate.setRateText(nf.format(taxRate.getTaxRate()));\n-\t\t\n-\t\t\n-\t\t\n-\t\tList<TaxClass> taxClasses = taxClassService.listByStore(store);\n-\t\t\n-\t\t\n-\n-\t\tList<Country> countries = countryService.getCountries(language);\n-\t\tList<TaxRate> taxRates = taxRateService.listByStore(store);\n-\t\t\n-\n-\t\tmodel.addAttribute(\"countries\", countries);\n-\t\tmodel.addAttribute(\"taxRates\", taxRates);\n-\t\tmodel.addAttribute(\"taxClasses\", taxClasses);\n-\t\t\n-\t\tmodel.addAttribute(\"taxRate\", taxRate);\n-\t\t\n-\t\treturn com.salesmanager.shop.admin.controller.ControllerConstants.Tiles.Tax.taxRate;\n-\t\t\n-\t\t\n-\t\t\n-\t}\n-\n-\t\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request)\n-\tthrows Exception {\n-\n-\t\t// display menu\n-\t\tMap<String, String> activeMenus = new HashMap<String, String>();\n-\t\tactiveMenus.put(\"tax\", \"tax\");\n-\t\tactiveMenus.put(\"taxrates\", \"taxrates\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>) request\n-\t\t\t\t.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu) menus.get(\"tax\");\n-\t\tmodel.addAttribute(\"currentMenu\", currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\", activeMenus);\n-\t\t//\n-\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/user/GroupsController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 315,
          "patch": "@@ -1,315 +0,0 @@\n-package com.salesmanager.shop.admin.controller.user;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.validation.Valid;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.services.user.GroupService;\n-import com.salesmanager.core.business.services.user.PermissionService;\n-import com.salesmanager.core.business.utils.ajax.AjaxPageableResponse;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.user.Group;\n-import com.salesmanager.core.model.user.GroupType;\n-import com.salesmanager.shop.admin.model.permission.GroupDetails;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LabelUtils;\n-\n-@Controller\n-public class GroupsController {\n-\n-\tprivate static final Logger LOGGER = LoggerFactory\n-\t\t\t.getLogger(GroupsController.class);\n-\n-\t@Inject\n-\tLanguageService languageService;\n-\n-\t@Inject\n-\tprotected GroupService groupService;\n-\t\n-\t@Inject\n-\tPermissionService permissionService;\n-\n-\t@Inject\n-\tCountryService countryService;\n-\n-\t@Inject\n-\tLabelUtils messages;\n-\n-\n-\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/groups/editGroup.html\", method = RequestMethod.GET)\n-\tpublic String displayGroup(@RequestParam(\"id\") Integer groupId, Model model,\n-\t\t\tLocale locale, HttpServletRequest request, HttpServletResponse response)\n-\t\t\tthrows Exception {\n-\t\t// display menu\n-\t\tsetMenu(model, request);\n-\t\t\n-\t\tGroupType[] groupTypes = GroupType.values();\n-\t\tList<String> groups = new ArrayList<String>();\n-\n-\t\tfor(GroupType t : groupTypes) {\n-\t\t\tif(GroupType.ADMIN.name() != t.name()) {\n-\t\t\t\tgroups.add(t.name());\n-\t\t\t}\n-\t\t}\n-\n-\t\tGroup group = groupService.getById(groupId);\n-\t\t\n-\t\tif(group == null) {\n-\t\t\treturn \"redirect://admin/groups/groups.html\";\n-\t\t\t \n-\t\t} \n-\n-\t\tGroupDetails groupDetails = new GroupDetails();\n-\t\tgroupDetails.setGroup(group);\n-\t\tgroupDetails.setTypes(groups);\n-\t\t\n-\n-\t\tmodel.addAttribute(\"group\", groupDetails);\n-\n-\t\treturn \"admin-user-group\";\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/groups/delete.html\", method = RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> delete(Model model,\n-\t\t\tLocale locale, HttpServletRequest request, HttpServletResponse response)\n-\t\t\tthrows Exception {\n-\t\t// display menu\n-\t\t\n-\t\tString sGroupId = request.getParameter(\"groupId\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\n-\t\ttry {\n-\t\t\t\n-\t\t\tInteger groupId = Integer.parseInt(sGroupId);\n-\t\t\tGroup group = groupService.getById(groupId);\n-\n-\n-\t\t\tif(group==null){\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!request.isUserInRole(Constants.GROUP_ADMIN)) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(GroupType.ADMIN.name().equals(group.getGroupType().name())) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\t\t\tgroupService.delete(group);\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting group\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/group/save.html\", method = RequestMethod.POST)\n-\tpublic String save(@Valid @ModelAttribute(\"group\") GroupDetails group, BindingResult result, Locale locale, Model model,\n-\t\t\tHttpServletRequest request, HttpServletResponse response)\n-\t\t\tthrows Exception {\n-\t\t// display menu\n-\t\tsetMenu(model, request);\n-\t\t\n-\t\tGroupType[] groupTypes = GroupType.values();\n-\t\tList<String> groups = new ArrayList<String>();\n-\n-\t\tfor(GroupType t : groupTypes) {\n-\t\t\tif(GroupType.ADMIN.name() != t.name()) {\n-\t\t\t\tgroups.add(t.name());\n-\t\t\t}\n-\t\t}\n-\n-\t\t//check if already exists\n-\t\tGroup g = null;\n-\t\tif(group.getGroup().getId()!=null) {\n-\t\t\tGroup gid = groupService.getById(group.getGroup().getId());\n-\t\t\tif(gid != null && !gid.getGroupName().equals(group.getGroup().getGroupName())) {\n-\t\t\t\tg = groupService.findByName(group.getGroup().getGroupName());\n-\t\t\t}\n-\t\t} else {\n-\t\t\t g = groupService.findByName(group.getGroup().getGroupName());\n-\t\t}\n-\t\t\n-\t\tif(g != null) {\n-\t\t\t ObjectError error = new ObjectError(\"group.groupName\", messages.getMessage(\"message.name.exist\", locale));\n-\t\t\t result.addError(error);\n-\t\t\t model.addAttribute(\"error\",\"error\");\n-\t\t} else {\n-\t\t\tgroupService.save(group.getGroup());\n-\t\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\t}\n-\t\t\n-\t\tGroupDetails groupDetails = new GroupDetails();\n-\t\tgroupDetails.setGroup(group.getGroup());\n-\t\tgroupDetails.setTypes(groups);\n-\t\t\n-\n-\t\tmodel.addAttribute(\"group\", groupDetails);\n-\t\t\n-\t\treturn \"admin-user-group\";\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/groups/new.html\", method = RequestMethod.GET)\n-\tpublic String displayGroup(Model model,\n-\t\t\tHttpServletRequest request, HttpServletResponse response)\n-\t\t\tthrows Exception {\n-\t\t// display menu\n-\t\tsetMenu(model, request);\n-\t\t\n-\t\tGroupType[] groupTypes = GroupType.values();\n-\t\tList<String> groups = new ArrayList<String>();\n-\n-\t\tfor(GroupType t : groupTypes) {\n-\t\t\tif(GroupType.ADMIN.name() != t.name()) {\n-\t\t\t\tgroups.add(t.name());\n-\t\t\t}\n-\t\t}\n-\t\tGroupDetails group = new GroupDetails();\n-\t\tGroup g = new Group();\n-\t\tgroup.setGroup(g);\n-\t\tgroup.setTypes(groups);\n-\t\tmodel.addAttribute(\"group\", group);\n-\t\t\n-\n-\t\treturn \"admin-user-group\";\n-\t}\n-\n-\n-\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/groups/groups.html\", method = RequestMethod.GET)\n-\tpublic String displayGroups(Model model, HttpServletRequest request,\n-\t\t\tHttpServletResponse response) throws Exception {\n-\n-\t\tsetMenu(model, request);\n-\t\tList<Group> groups = groupService.listGroup(GroupType.ADMIN);\n-\t\tmodel.addAttribute(\"groups\", groups);\n-\n-\t\treturn \"admin-user-groups\";\n-\t}\n-\n-\t\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/groups/paging.html\", method = RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tResponseEntity<String> pageGroups(HttpServletRequest request,\n-\t\t\tHttpServletResponse response, Locale locale) {\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\ttry {\n-\n-\t\t\t\tList<Group> groups = groupService.list();\n-\n-\t\t\t\tfor(Group group : groups) {\n-\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\tentry.put(\"groupId\", group.getId());\n-\t\t\t\t\tentry.put(\"name\", group.getGroupName());\n-\t\t\t\t\tentry.put(\"type\", group.getGroupType().name());\n-\n-\t\t\t\t\tStringBuilder key = new StringBuilder().append(\"security.group.description.\").append(group.getGroupName());\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\n-\t\t\t\t\t\tString message =  messages.getMessage(key.toString(), locale);\n-\t\t\t\t\t\tentry.put(\"description\",message);\n-\t\t\t\t\t\n-\t\t\t\t\t} catch(Exception noLabelException) {\n-\t\t\t\t\t\tLOGGER.error(\"No label found for key [\" + key.toString() + \"]\");\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\n-\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging permissions\", e);\n-\t\t\tresp.setStatus(AjaxPageableResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\n-\tprivate void setMenu(Model model, HttpServletRequest request)\n-\t\t\tthrows Exception {\n-\n-\t\t// display menu\n-\t\tMap<String, String> activeMenus = new HashMap<String, String>();\n-\t\tactiveMenus.put(\"profile\", \"profile\");\n-\t\tactiveMenus.put(\"security\", \"security\");\n-\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>) request\n-\t\t\t\t.getAttribute(\"MENUMAP\");\n-\n-\t\tMenu currentMenu = (Menu) menus.get(\"profile\");\n-\t\tmodel.addAttribute(\"currentMenu\", currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\", activeMenus);\n-\t\t//\n-\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/user/LoginController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 45,
          "patch": "@@ -1,45 +0,0 @@\n-package com.salesmanager.shop.admin.controller.user;\n-\n-import org.springframework.security.core.Authentication;\n-import org.springframework.security.core.context.SecurityContextHolder;\n-import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-\n-@Controller\n-public class LoginController {\n-\t\n-\n-\t@RequestMapping(value=\"/admin/logon.html\", method=RequestMethod.GET)\n-\tpublic String displayLogin(HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\treturn \"admin/logon\";\n-\n-\t}\n-\t\n-\n-\t@RequestMapping(value=\"/admin/denied.html\", method=RequestMethod.GET)\n-\tpublic String displayDenied(HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\n-\t\t//logoff the user\n-\t    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n-\t    if (auth != null){    \n-\t         new SecurityContextLogoutHandler().logout(request, response, auth);\n-\t         //new PersistentTokenBasedRememberMeServices().logout(request, response, auth);\n-\t    }\n-\t\t\n-\t\treturn \"admin/logon\";\n-\n-\t}\n-\t\n-\t@RequestMapping(value=\"/admin/unauthorized.html\", method=RequestMethod.GET)\n-\tpublic String unauthorized(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\treturn \"admin/unauthorized\";\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/user/PermissionController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 122,
          "patch": "@@ -1,122 +0,0 @@\n-package com.salesmanager.shop.admin.controller.user;\n-\n-import com.salesmanager.core.business.services.reference.country.CountryService;\n-import com.salesmanager.core.business.services.user.GroupService;\n-import com.salesmanager.core.business.services.user.PermissionService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.user.Permission;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-@Controller\n-public class PermissionController {\n-\n-\tprivate static final Logger LOGGER = LoggerFactory\n-\t\t\t.getLogger(PermissionController.class);\n-\n-\t@Inject\n-\tprotected PermissionService permissionService;\n-\n-\t@Inject\n-\tprotected GroupService groupService;\n-\n-\t@Inject\n-\tCountryService countryService;\n-\n-\t@Inject\n-\tLabelUtils messages;\n-\n-\n-\n-\n-\n-\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/permissions/permissions.html\", method = RequestMethod.GET)\n-\tpublic String displayPermissions(Model model, HttpServletRequest request,\n-\t\t\tHttpServletResponse response) throws Exception {\n-\n-\t\t//setMenu(model, request);\n-\t\t//return \"admin-user-permissions\";\n-\t\t\n-\t\tthrow new Exception(\"Not implemented\");\n-\t}\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/permissions/paging.html\", method = RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tResponseEntity<String> pagePermissions(HttpServletRequest request,\n-\t\t\tHttpServletResponse response) {\n-\t\t//String permissionName = request.getParameter(\"name\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\t\ttry {\n-\n-\t\t\tList<Permission> permissions = null;\n-\t\t\tpermissions = permissionService.listPermission();\n-\n-\t\t\tfor (Permission permission : permissions) {\n-\n-\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\tMap entry = new HashMap();\n-\t\t\t\tentry.put(\"permissionId\", permission.getId());\n-\t\t\t\tentry.put(\"name\", permission.getPermissionName());\n-\t\t\t\tresp.addDataEntry(entry);\n-\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging permissions\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\n-\t@SuppressWarnings(\"unused\")\n-\tprivate void setMenu(Model model, HttpServletRequest request)\n-\t\t\tthrows Exception {\n-\n-\t\t// display menu\n-\t\tMap<String, String> activeMenus = new HashMap<String, String>();\n-\t\tactiveMenus.put(\"profile\", \"profile\");\n-\t\tactiveMenus.put(\"security\", \"security\");\n-\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>) request\n-\t\t\t\t.getAttribute(\"MENUMAP\");\n-\n-\t\tMenu currentMenu = (Menu) menus.get(\"profile\");\n-\t\tmodel.addAttribute(\"currentMenu\", currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\", activeMenus);\n-\t\t//\n-\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/user/SecurityController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 65,
          "patch": "@@ -1,65 +0,0 @@\n-package com.salesmanager.shop.admin.controller.user;\n-\n-import com.salesmanager.core.business.services.user.GroupService;\n-import com.salesmanager.core.model.user.Group;\n-import com.salesmanager.core.model.user.GroupType;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-@Controller\n-public class SecurityController {\n-\t\n-\t@Inject\n-\tGroupService groupService;\n-\n-\t@RequestMapping(value=\"/admin/user/permissions.html\", method=RequestMethod.GET)\n-\tpublic String displayPermissions(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\treturn \"admin-user-permissions\";\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t\n-\t@RequestMapping(value=\"/admin/user/groups.html\", method=RequestMethod.GET)\n-\tpublic String displayGroups(Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {\n-\t\t\n-\t\tsetMenu(model,request);\n-\t\tList<Group> groups = groupService.listGroup(GroupType.ADMIN);\n-\t\t\n-\t\tmodel.addAttribute(\"groups\", groups);\n-\t\t\n-\t\treturn \"admin-user-groups\";\n-\t\t\n-\t\t\n-\t}\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"profile\", \"profile\");\n-\t\tactiveMenus.put(\"security\", \"security\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"profile\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/controller/user/UserController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 866,
          "patch": "@@ -1,866 +0,0 @@\n-package com.salesmanager.shop.admin.controller.user;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import javax.inject.Inject;\n-import javax.inject.Named;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.servlet.http.HttpSession;\n-import javax.validation.Valid;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.security.access.prepost.PreAuthorize;\n-import org.springframework.security.crypto.password.PasswordEncoder;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.ResponseBody;\n-\n-import com.salesmanager.core.business.exception.ServiceException;\n-import com.salesmanager.core.business.modules.email.Email;\n-import com.salesmanager.core.business.services.merchant.MerchantStoreService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.services.system.EmailService;\n-import com.salesmanager.core.business.services.user.GroupService;\n-import com.salesmanager.core.business.services.user.UserService;\n-import com.salesmanager.core.business.utils.ajax.AjaxResponse;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.user.Group;\n-import com.salesmanager.core.model.user.GroupType;\n-import com.salesmanager.core.model.user.User;\n-import com.salesmanager.shop.admin.controller.ControllerConstants;\n-import com.salesmanager.shop.admin.model.secutity.Password;\n-import com.salesmanager.shop.admin.model.userpassword.UserReset;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.admin.security.SecurityQuestion;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.constants.EmailConstants;\n-import com.salesmanager.shop.utils.EmailUtils;\n-import com.salesmanager.shop.utils.FilePathUtils;\n-import com.salesmanager.shop.utils.LabelUtils;\n-import com.salesmanager.shop.utils.LocaleUtils;\n-import com.salesmanager.shop.utils.UserUtils;\n-\n-@Controller\n-public class UserController {\n-\t\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(UserController.class);\n-\t\n-\t@Inject\n-\tprivate LanguageService languageService;\n-\t\n-\t@Inject\n-\tprivate UserService userService;\n-\n-\t@Inject\n-\tprivate GroupService groupService;\n-\n-\t@Inject\n-\tprivate EmailService emailService;\n-\t\n-\t@Inject\n-\tprivate MerchantStoreService merchantStoreService;\n-\t\n-\t@Inject\n-\tLabelUtils messages;\n-\t\n-\t@Inject\n-\tprivate FilePathUtils filePathUtils;\n-\t\n-\t@Inject\n-\tprivate EmailUtils emailUtils;\n-\t\n-\t@Inject\n-\t@Named(\"passwordEncoder\")\n-\tprivate PasswordEncoder passwordEncoder;\n-\t\n-\tprivate final static String QUESTION_1 = \"question1\";\n-\tprivate final static String QUESTION_2 = \"question2\";\n-\tprivate final static String QUESTION_3 = \"question3\";\n-\tprivate final static String RESET_PASSWORD_TPL = \"email_template_password_reset_user.ftl\";\t\n-\tprivate final static String NEW_USER_TMPL = \"email_template_new_user.ftl\";\n-\t\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value=\"/admin/users/list.html\", method=RequestMethod.GET)\n-\tpublic String displayUsers(Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\t\t//The users are retrieved from the paging method\n-\t\tsetMenu(model,request);\n-\t\treturn ControllerConstants.Tiles.User.users;\n-\t}\n-\t\n-\t/**\n-\t * Displays a list of users that can be managed by admins\n-\t * @param request\n-\t * @param response\n-\t * @return\n-\t */\n-\t@SuppressWarnings(\"unchecked\")\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value = \"/admin/users/paging.html\", method = RequestMethod.POST)\n-\tpublic @ResponseBody\n-\tResponseEntity<String> pageUsers(HttpServletRequest request,\n-\t\t\tHttpServletResponse response) {\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\tString sCurrentUser = request.getRemoteUser();\n-\t\t\n-\t\t\n-\t\ttry {\n-\n-\t\t\tUser currentUser = userService.getByUserName(sCurrentUser);\n-\t\t\tList<User> users = null;\n-\t\t\tif(UserUtils.userInGroup(currentUser, Constants.GROUP_SUPERADMIN) ) {\n-\t\t\t\tusers = userService.listUser();\n-\t\t\t} else {\n-\t\t\t\tusers = userService.listByStore(store);\n-\t\t\t}\n-\t\t\t \n-\n-\t\t\tfor (User user : users) {\n-\t\t\t\t\n-\t\t\t\tif(!UserUtils.userInGroup(user, Constants.GROUP_SUPERADMIN)) {\n-\t\t\t\t\t\n-\t\t\t\t\tif(!currentUser.equals(user.getAdminName())){\n-\n-\t\t\t\t\t\t@SuppressWarnings(\"rawtypes\")\n-\t\t\t\t\t\tMap entry = new HashMap();\n-\t\t\t\t\t\tentry.put(\"userId\", user.getId());\n-\t\t\t\t\t\tentry.put(\"name\", user.getFirstName() + \" \" + user.getLastName());\n-\t\t\t\t\t\tentry.put(\"email\", user.getAdminEmail());\n-\t\t\t\t\t\tentry.put(\"active\", user.isActive());\n-\t\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\t\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while paging products\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t}\n-\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,HttpStatus.OK);\n-\t}\n-\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/users/password.html\", method=RequestMethod.GET)\n-\tpublic String displayChangePassword(Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\tsetMenu(model,request);\n-\t\tString userName = request.getRemoteUser();\n-\t\tUser user = userService.getByUserName(userName);\n-\t\t\n-\t\tPassword password = new Password();\n-\t\tpassword.setUser(user);\n-\t\t\n-\t\tmodel.addAttribute(\"password\",password);\n-\t\tmodel.addAttribute(\"user\",user);\n-\t\treturn ControllerConstants.Tiles.User.password;\n-\t}\n-\t\n-\t\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/users/savePassword.html\", method=RequestMethod.POST)\n-\tpublic String changePassword(@ModelAttribute(\"password\") Password password, BindingResult result, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\tsetMenu(model,request);\n-\t\tString userName = request.getRemoteUser();\n-\t\tUser dbUser = userService.getByUserName(userName);\n-\t\t\n-\n-\t\tif(password.getUser().getId().longValue()!= dbUser.getId().longValue()) {\n-\t\t\t\treturn \"redirect:/admin/users/displayUser.html\";\n-\t\t}\n-\t\t\n-\t\t//validate password not empty\n-\t\tif(StringUtils.isBlank(password.getPassword())) {\n-\t\t\tObjectError error = new ObjectError(\"password\",new StringBuilder().append(messages.getMessage(\"label.generic.password\", locale)).append(\" \").append(messages.getMessage(\"message.cannot.empty\", locale)).toString());\n-\t\t\tresult.addError(error);\n-\t\t\treturn ControllerConstants.Tiles.User.password;\n-\t\t}\n-\n-\t\tif(!passwordEncoder.matches(password.getPassword(), dbUser.getAdminPassword())) {\n-\t\t\tObjectError error = new ObjectError(\"password\",messages.getMessage(\"message.password.invalid\", locale));\n-\t\t\tresult.addError(error);\n-\t\t\treturn ControllerConstants.Tiles.User.password;\n-\t\t}\n-\t\t\n-\n-\t\tif(StringUtils.isBlank(password.getNewPassword())) {\n-\t\t\tObjectError error = new ObjectError(\"newPassword\",new StringBuilder().append(messages.getMessage(\"label.generic.newpassword\", locale)).append(\" \").append(messages.getMessage(\"message.cannot.empty\", locale)).toString());\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\tif(StringUtils.isBlank(password.getRepeatPassword())) {\n-\t\t\tObjectError error = new ObjectError(\"newPasswordAgain\",new StringBuilder().append(messages.getMessage(\"label.generic.newpassword.repeat\", locale)).append(\" \").append(messages.getMessage(\"message.cannot.empty\", locale)).toString());\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\tif(!password.getRepeatPassword().equals(password.getNewPassword())) {\n-\t\t\tObjectError error = new ObjectError(\"newPasswordAgain\",messages.getMessage(\"message.password.different\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\tif(password.getNewPassword().length()<6) {\n-\t\t\tObjectError error = new ObjectError(\"newPassword\",messages.getMessage(\"message.password.length\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.User.password;\n-\t\t}\n-\t\t\n-\t\t\n-\t\t\n-\t\tString pass = passwordEncoder.encode(password.getNewPassword());\n-\t\tdbUser.setAdminPassword(pass);\n-\t\tuserService.update(dbUser);\n-\t\t\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.User.password;\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('ADMIN')\")\n-\t@RequestMapping(value=\"/admin/users/createUser.html\", method=RequestMethod.GET)\n-\tpublic String displayUserCreate(Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\treturn displayUser(null,model,request,response,locale);\n-\t}\n-\t\n-\n-\t/**\n-\t * From user list\n-\t * @param id\n-\t * @param model\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/users/displayStoreUser.html\", method=RequestMethod.GET)\n-\tpublic String displayUserEdit(@ModelAttribute(\"id\") Long id, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\n-\t\tUser dbUser = userService.getById(id);\n-\t\t\n-\t\tif(dbUser==null) {\n-\t\t\tLOGGER.info(\"User is null for id \" + id);\n-\t\t\treturn \"redirect://admin/users/list.html\";\n-\t\t}\n-\t\t\n-\t\t\n-\t\treturn displayUser(dbUser,model,request,response,locale);\n-\n-\t}\n-\t\n-\t/**\n-\t * From user profile\n-\t * @param model\n-\t * @param request\n-\t * @param response\n-\t * @param locale\n-\t * @return\n-\t * @throws Exception\n-\t */\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/users/displayUser.html\", method=RequestMethod.GET)\n-\tpublic String displayUserEdit(Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\t\t\n-\t\tString userName = request.getRemoteUser();\n-\t\tUser user = userService.getByUserName(userName);\n-\t\treturn displayUser(user,model,request,response,locale);\n-\n-\t}\n-\t\n-\tprivate void populateUserObjects(User user, MerchantStore store, Model model, Locale locale) throws Exception {\n-\t\t\n-\t\t//get groups\n-\t\tList<Group> groups = new ArrayList<Group>();\n-\t\tList<Group> userGroups = groupService.listGroup(GroupType.ADMIN);\n-\t\tfor(Group group : userGroups) {\n-\t\t\tif(!group.getGroupName().equals(Constants.GROUP_SUPERADMIN)) {\n-\t\t\t\tgroups.add(group);\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t\n-\t\tList<MerchantStore> stores = new ArrayList<MerchantStore>();\n-\t\t//stores.add(store);\n-\t\tstores = merchantStoreService.list();\n-\t\t\n-\t\t\n-\t\t//questions\n-\t\tList<SecurityQuestion> questions = new ArrayList<SecurityQuestion>();\n-\t\t\n-\t\tSecurityQuestion question = new SecurityQuestion();\n-\t\tquestion.setId(\"1\");\n-\t\tquestion.setLabel(messages.getMessage(\"security.question.1\", locale));\n-\t\tquestions.add(question);\n-\t\t\n-\t\tquestion = new SecurityQuestion();\n-\t\tquestion.setId(\"2\");\n-\t\tquestion.setLabel(messages.getMessage(\"security.question.2\", locale));\n-\t\tquestions.add(question);\n-\t\t\n-\t\tquestion = new SecurityQuestion();\n-\t\tquestion.setId(\"3\");\n-\t\tquestion.setLabel(messages.getMessage(\"security.question.3\", locale));\n-\t\tquestions.add(question);\n-\t\t\n-\t\tquestion = new SecurityQuestion();\n-\t\tquestion.setId(\"4\");\n-\t\tquestion.setLabel(messages.getMessage(\"security.question.4\", locale));\n-\t\tquestions.add(question);\n-\t\t\n-\t\tquestion = new SecurityQuestion();\n-\t\tquestion.setId(\"5\");\n-\t\tquestion.setLabel(messages.getMessage(\"security.question.5\", locale));\n-\t\tquestions.add(question);\n-\t\t\n-\t\tquestion = new SecurityQuestion();\n-\t\tquestion.setId(\"6\");\n-\t\tquestion.setLabel(messages.getMessage(\"security.question.6\", locale));\n-\t\tquestions.add(question);\n-\t\t\n-\t\tquestion = new SecurityQuestion();\n-\t\tquestion.setId(\"7\");\n-\t\tquestion.setLabel(messages.getMessage(\"security.question.7\", locale));\n-\t\tquestions.add(question);\n-\t\t\n-\t\tquestion = new SecurityQuestion();\n-\t\tquestion.setId(\"8\");\n-\t\tquestion.setLabel(messages.getMessage(\"security.question.8\", locale));\n-\t\tquestions.add(question);\n-\t\t\n-\t\tquestion = new SecurityQuestion();\n-\t\tquestion.setId(\"9\");\n-\t\tquestion.setLabel(messages.getMessage(\"security.question.9\", locale));\n-\t\tquestions.add(question);\n-\t\t\n-\t\tmodel.addAttribute(\"questions\", questions);\n-\t\tmodel.addAttribute(\"stores\", stores);\n-\t\tmodel.addAttribute(\"languages\", store.getLanguages());\n-\t\tmodel.addAttribute(\"groups\", groups);\n-\t\t\n-\t\t\n-\t}\n-\t\n-\t\n-\t\n-\tprivate String displayUser(User user, Model model, HttpServletRequest request, HttpServletResponse response, Locale locale) throws Exception {\n-\t\t\n-\n-\t\t//display menu\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\n-\n-\t\t\n-\t\tif(user==null) {\n-\t\t\tuser = new User();\n-\t\t} else {\n-\t\t\tuser.setAdminPassword(\"TRANSIENT\");\n-\t\t}\n-\t\t\n-\t\tthis.populateUserObjects(user, store, model, locale);\n-\t\t\n-\n-\t\tmodel.addAttribute(\"user\", user);\n-\t\t\n-\t\t\n-\n-\t\treturn ControllerConstants.Tiles.User.profile;\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/users/checkUserCode.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> checkUserCode(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\tString code = request.getParameter(\"code\");\n-\t\tString id = request.getParameter(\"id\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\t\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tif(StringUtils.isBlank(code)) {\n-\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\tString returnString =  resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tUser user = userService.getByUserName(code);\n-\t\t\n-\t\t\n-\t\t\tif(!StringUtils.isBlank(id)&& user!=null) {\n-\t\t\t\ttry {\n-\t\t\t\t\tLong lid = Long.parseLong(id);\n-\t\t\t\t\t\n-\t\t\t\t\tif(user.getAdminName().equals(code) && user.getId()==lid) {\n-\t\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_SUCCESS);\n-\t\t\t\t\t\tString returnString =  resp.toJSONString();\n-\t\t\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t\t\t}\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\t\tString returnString =  resp.toJSONString();\n-\t\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t\t}\n-\t\n-\t\t\t}\n-\n-\t\t\t\n-\t\t\tif(StringUtils.isBlank(code)) {\n-\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\tString returnString =  resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\t\t\tif(user!=null) {\n-\t\t\t\tresp.setStatus(AjaxResponse.CODE_ALREADY_EXIST);\n-\t\t\t\tString returnString =  resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while getting user\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/users/save.html\", method=RequestMethod.POST)\n-\tpublic String saveUser(@Valid @ModelAttribute(\"user\") User user, BindingResult result, Model model, HttpServletRequest request, Locale locale) throws Exception {\n-\n-\n-\t\tsetMenu(model,request);\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\n-\t\t\n-\t\tthis.populateUserObjects(user, store, model, locale);\n-\t\t\n-\t\tLanguage language = user.getDefaultLanguage();\n-\t\t\n-\t\tLanguage l = languageService.getById(language.getId());\n-\t\t\n-\t\tuser.setDefaultLanguage(l);\n-\t\t\n-\t\tLocale userLocale = LocaleUtils.getLocale(l);\n-\t\t\n-\t\t\n-\t\t\n-\t\tUser dbUser = null;\n-\t\t\n-\t\t//edit mode, need to get original user important information\n-\t\tif(user.getId()!=null) {\n-\t\t\tdbUser = userService.getByUserName(user.getAdminName());\n-\t\t\tif(dbUser==null) {\n-\t\t\t\treturn \"redirect:///admin/users/displayUser.html\";\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Group> submitedGroups = user.getGroups();\n-\t\tSet<Integer> ids = new HashSet<Integer>();\n-\t\tfor(Group group : submitedGroups) {\n-\t\t\tids.add(group.getId());\n-\t\t}\n-\t\t\n-\n-\t\t\n-\t\t//validate security questions not empty\n-\t\tif(StringUtils.isBlank(user.getAnswer1())) {\n-\t\t\tObjectError error = new ObjectError(\"answer1\",messages.getMessage(\"security.answer.question1.message\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\tif(StringUtils.isBlank(user.getAnswer2())) {\n-\t\t\tObjectError error = new ObjectError(\"answer2\",messages.getMessage(\"security.answer.question2.message\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\tif(StringUtils.isBlank(user.getAnswer3())) {\n-\t\t\tObjectError error = new ObjectError(\"answer3\",messages.getMessage(\"security.answer.question3.message\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\tif(user.getQuestion1().equals(user.getQuestion2()) || user.getQuestion1().equals(user.getQuestion3())\n-\t\t\t\t|| user.getQuestion2().equals(user.getQuestion1()) || user.getQuestion1().equals(user.getQuestion3())\n-\t\t\t\t|| user.getQuestion3().equals(user.getQuestion1()) || user.getQuestion1().equals(user.getQuestion2()))\n-\t\t\n-\t\t\n-\t\t{\n-\t\t\tObjectError error = new ObjectError(\"question1\",messages.getMessage(\"security.questions.differentmessages\", locale));\n-\t\t\tresult.addError(error);\n-\t\t}\n-\t\t\n-\t\t\n-\t\tGroup superAdmin = null;\n-\t\t\n-\t\tif(user.getId()!=null && user.getId()>0) {\n-\t\t\tif(user.getId().longValue()!=dbUser.getId().longValue()) {\n-\t\t\t\treturn \"redirect:///admin/users/displayUser.html\";\n-\t\t\t}\n-\t\t\t\n-\t\t\tList<Group> groups = dbUser.getGroups();\n-\t\t\t//boolean removeSuperAdmin = true;\n-\t\t\tfor(Group group : groups) {\n-\t\t\t\t//can't revoke super admin\n-\t\t\t\tif(group.getGroupName().equals(\"SUPERADMIN\")) {\n-\t\t\t\t\tsuperAdmin = group;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t} else {\n-\t\t\t\n-\t\t\tif(user.getAdminPassword().length()<6) {\n-\t\t\t\tObjectError error = new ObjectError(\"adminPassword\",messages.getMessage(\"message.password.length\", locale));\n-\t\t\t\tresult.addError(error);\n-\t\t\t}\n-\t\t\t\n-\t\t}\n-\t\t\n-\t\tif(superAdmin!=null) {\n-\t\t\tids.add(superAdmin.getId());\n-\t\t}\n-\n-\t\t\n-\t\tList<Group> newGroups = groupService.listGroupByIds(ids);\n-\n-\t\t//set actual user groups\n-\t\tuser.setGroups(newGroups);\n-\t\t\n-\t\tif (result.hasErrors()) {\n-\t\t\treturn ControllerConstants.Tiles.User.profile;\n-\t\t}\n-\t\t\n-\t\tString decodedPassword = user.getAdminPassword();\n-\t\tif(user.getId()!=null && user.getId()>0) {\n-\t\t\tuser.setAdminPassword(dbUser.getAdminPassword());\n-\t\t} else {\n-\t\t\tString encoded = passwordEncoder.encode(user.getAdminPassword());\n-\t\t\tuser.setAdminPassword(encoded);\n-\t\t}\n-\t\t\n-\t\t\n-\t\tif(user.getId()==null || user.getId().longValue()==0) {\n-\t\t\t\n-\t\t\t//save or update user\n-\t\t\tuserService.saveOrUpdate(user);\n-\t\t\t\n-\t\t\ttry {\n-\n-\t\t\t\t//creation of a user, send an email\n-\t\t\t\tString userName = user.getFirstName();\n-\t\t\t\tif(StringUtils.isBlank(userName)) {\n-\t\t\t\t\tuserName = user.getAdminName();\n-\t\t\t\t}\n-\t\t\t\tString[] userNameArg = {userName};\n-\t\t\t\t\n-\t\t\t\t\n-\t\t\t\tMap<String, String> templateTokens = emailUtils.createEmailObjectsMap(request.getContextPath(), store, messages, userLocale);\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_NEW_USER_TEXT, messages.getMessage(\"email.greeting\", userNameArg, userLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_USER_FIRSTNAME, user.getFirstName());\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_USER_LASTNAME, user.getLastName());\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_ADMIN_USERNAME_LABEL, messages.getMessage(\"label.generic.username\",userLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_ADMIN_NAME, user.getAdminName());\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_TEXT_NEW_USER_CREATED, messages.getMessage(\"email.newuser.text\",userLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_ADMIN_PASSWORD_LABEL, messages.getMessage(\"label.generic.password\",userLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_ADMIN_PASSWORD, decodedPassword);\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_ADMIN_URL_LABEL, messages.getMessage(\"label.adminurl\",userLocale));\n-\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_ADMIN_URL, filePathUtils.buildAdminUri(store, request));\n-\t\n-\t\t\t\t\n-\t\t\t\tEmail email = new Email();\n-\t\t\t\temail.setFrom(store.getStorename());\n-\t\t\t\temail.setFromEmail(store.getStoreEmailAddress());\n-\t\t\t\temail.setSubject(messages.getMessage(\"email.newuser.title\",userLocale));\n-\t\t\t\temail.setTo(user.getAdminEmail());\n-\t\t\t\temail.setTemplateName(NEW_USER_TMPL);\n-\t\t\t\temail.setTemplateTokens(templateTokens);\n-\t\n-\t\n-\t\t\t\t\n-\t\t\t\temailService.sendHtmlEmail(store, email);\n-\t\t\t\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tLOGGER.error(\"Cannot send email to user\",e);\n-\t\t\t}\n-\t\t\t\n-\t\t} else {\n-\t\t\t//save or update user\n-\t\t\tuserService.saveOrUpdate(user);\n-\t\t}\n-\n-\t\tmodel.addAttribute(\"success\",\"success\");\n-\t\treturn ControllerConstants.Tiles.User.profile;\n-\t}\n-\t\n-\t@PreAuthorize(\"hasRole('AUTH')\")\n-\t@RequestMapping(value=\"/admin/users/remove.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> removeUser(HttpServletRequest request, Locale locale) throws Exception {\n-\t\t\n-\t\t//do not remove super admin\n-\t\t\n-\t\tString sUserId = request.getParameter(\"userId\");\n-\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\t\n-\t\tString userName = request.getRemoteUser();\n-\t\tUser remoteUser = userService.getByUserName(userName);\n-\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tLong userId = Long.parseLong(sUserId);\n-\t\t\tUser user = userService.getById(userId);\n-\t\t\t\n-\t\t\t/**\n-\t\t\t * In order to remove a User the logged in ser must be ADMIN\n-\t\t\t * or SUPER_USER\n-\t\t\t */\n-\t\t\t\n-\n-\t\t\tif(user==null){\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!request.isUserInRole(Constants.GROUP_ADMIN)) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.unauthorized\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\n-\t\t\t\n-\t\t\t//check if the user removed has group ADMIN\n-\t\t\tboolean isAdmin = false;\n-\t\t\tif(UserUtils.userInGroup(remoteUser, Constants.GROUP_ADMIN) || UserUtils.userInGroup(remoteUser, Constants.GROUP_SUPERADMIN)) {\n-\t\t\t\tisAdmin = true;\n-\t\t\t}\n-\n-\t\t\t\n-\t\t\tif(!isAdmin) {\n-\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.security.caanotremovesuperadmin\", locale));\n-\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\t\t\t\n-\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\t\t\n-\t\t\tuserService.delete(user);\n-\t\t\t\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\n-\t\t\n-\t\t\n-\t\t} catch (Exception e) {\n-\t\t\tLOGGER.error(\"Error while deleting user\", e);\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setErrorMessage(e);\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\n-\t}\n-\t\n-\t\n-\tprivate void setMenu(Model model, HttpServletRequest request) throws Exception {\n-\t\t\n-\t\t//display menu\n-\t\tMap<String,String> activeMenus = new HashMap<String,String>();\n-\t\tactiveMenus.put(\"profile\", \"profile\");\n-\t\tactiveMenus.put(\"user\", \"create-user\");\n-\t\t\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String, Menu> menus = (Map<String, Menu>)request.getAttribute(\"MENUMAP\");\n-\t\t\n-\t\tMenu currentMenu = (Menu)menus.get(\"profile\");\n-\t\tmodel.addAttribute(\"currentMenu\",currentMenu);\n-\t\tmodel.addAttribute(\"activeMenus\",activeMenus);\n-\t\t//\n-\t\t\n-\t}\n-\t\n-\t//password reset functionality  ---  Sajid Shajahan  \n-\t@RequestMapping(value=\"/admin/users/resetPassword.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> resetPassword(HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\t\n-\t\tAjaxResponse resp = new AjaxResponse();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t    \n-\t\tString userName = request.getParameter(\"username\");\n-\t\t\n-\t\t\n-\t\t\n-\t\t/**\n-\t\t * Get User with userService.getByUserName\n-\t\t * Get 3 security questions from User.getQuestion1, user.getQuestion2, user.getQuestion3\n-\t\t */\n-\t\t\n-\t\tHttpSession session = request.getSession();\n-\t\tsession.setAttribute(\"username_reset\", userName);\n-\t\t\n-\t\ttry {\n-\t\t\t\tif(!StringUtils.isBlank(userName)){\n-\t\t\t\t\t\n-\t\t\t\t\t\tUser dbUser = userService.getByUserName(userName);\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tif(dbUser==null) {\n-\t\t\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\t\t\t\tresp.setStatusMessage(messages.getMessage(\"message.username.notfound\", locale));\n-\t\t\t\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t\tMap<String,String> entry = new HashMap<String,String>();\n-\t\t\t\t\t\tentry.put(QUESTION_1, dbUser.getQuestion1());\n-\t\t\t\t\t\tentry.put(QUESTION_2, dbUser.getQuestion2());\n-\t\t\t\t\t\tentry.put(QUESTION_3, dbUser.getQuestion3());\n-\t\t\t\t\t\tresp.addDataEntry(entry);\n-\t\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\t\n-\t\t\t\t}else\n-\t\t\t\t{\n-\t\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\t\t\tresp.setStatusMessage(messages.getMessage(\"User.resetPassword.Error\", locale));\n-\t\t\t\t\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\te.printStackTrace();\n-\t\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\t\t\tresp.setStatusMessage(messages.getMessage(\"User.resetPassword.Error\", locale));\n-\t\t\t\t\t\tString returnString = resp.toJSONString();\n-\t\t\t\t\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t\t\t}\n-\t\n-\t\t\n-\t\t\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t//password reset functionality  ---  Sajid Shajahan\n-\t@RequestMapping(value=\"/admin/users/resetPasswordSecurityQtn.html\", method=RequestMethod.POST)\n-\tpublic @ResponseBody ResponseEntity<String> resetPasswordSecurityQtn(@ModelAttribute(value=\"userReset\") UserReset userReset,HttpServletRequest request, HttpServletResponse response, Locale locale) {\n-\t\t\n-\t\tMerchantStore store = (MerchantStore)request.getAttribute(Constants.ADMIN_STORE);\n-\t\tLanguage userLanguage = null; \n-\t\tLocale userLocale =  null; \n-\t\tAjaxResponse resp = new AjaxResponse();\n-\n-\n-\t\tString answer1 = request.getParameter(\"answer1\");\n-\t\tString answer2 = request.getParameter(\"answer2\");\n-\t\tString answer3 = request.getParameter(\"answer3\");\n-\t\t\n-\t\ttry {\n-\t\t\t\n-\t\t\tHttpSession session = request.getSession();\n-\t\t\tUser dbUser = userService.getByUserName((String) session.getAttribute(\"username_reset\"));\n-\t\t\t\n-\t\t\tif(dbUser!= null){\n-\t\t\t\t\n-\t\t\t\tif(dbUser.getAnswer1().equals(answer1.trim()) && dbUser.getAnswer2().equals(answer2.trim()) && dbUser.getAnswer3().equals(answer3.trim())){\n-\t\t\t\t\tuserLanguage = dbUser.getDefaultLanguage();\t\n-\t\t\t\t\tuserLocale =  LocaleUtils.getLocale(userLanguage);\n-\t\t\t\t\t\n-\t\t\t\t\tString tempPass = userReset.generateRandomString();\n-\t\t\t\t\tString pass = passwordEncoder.encode(tempPass);\n-\t\t\t\t\t\n-\t\t\t\t\tdbUser.setAdminPassword(pass);\n-\t\t\t\t\tuserService.update(dbUser);\n-\t\t\t\t\t\n-\t\t\t\t\t//send email\n-\t\t\t\t\t\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tString[] storeEmail = {store.getStoreEmailAddress()};\t\t\t\t\t\t\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tMap<String, String> templateTokens = emailUtils.createEmailObjectsMap(request.getContextPath(), store, messages, userLocale);\n-\t\t\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_RESET_PASSWORD_TXT, messages.getMessage(\"email.user.resetpassword.text\", userLocale));\n-\t\t\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_CONTACT_OWNER, messages.getMessage(\"email.contactowner\", storeEmail, userLocale));\n-\t\t\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_PASSWORD_LABEL, messages.getMessage(\"label.generic.password\",userLocale));\n-\t\t\t\t\t\ttemplateTokens.put(EmailConstants.EMAIL_USER_PASSWORD, tempPass);\n-\n-\t\t\t\t\t\tEmail email = new Email();\n-\t\t\t\t\t\temail.setFrom(store.getStorename());\n-\t\t\t\t\t\temail.setFromEmail(store.getStoreEmailAddress());\n-\t\t\t\t\t\temail.setSubject(messages.getMessage(\"label.generic.changepassword\",userLocale));\n-\t\t\t\t\t\temail.setTo(dbUser.getAdminEmail() );\n-\t\t\t\t\t\temail.setTemplateName(RESET_PASSWORD_TPL);\n-\t\t\t\t\t\temail.setTemplateTokens(templateTokens);\n-\t\t\t\t\t\t\n-\t\t\t\t\t\temailService.sendHtmlEmail(store, email);\n-\t\t\t\t\t\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tLOGGER.error(\"Cannot send email to user\",e);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\tresp.setStatus(AjaxResponse.RESPONSE_OPERATION_COMPLETED);\n-\t\t\t\t\tresp.setStatusMessage(messages.getMessage(\"User.resetPassword.resetSuccess\", locale));\n-\t\t\t\t}\n-\t\t\t\telse{\n-\t\t\t\t\t  resp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\t\t  resp.setStatusMessage(messages.getMessage(\"User.resetPassword.wrongSecurityQtn\", locale));\n-\t\t\t\t\t  \n-\t\t\t\t  }\n-\t\t\t  }else{\n-\t\t\t\t  resp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\t\t  resp.setStatusMessage(messages.getMessage(\"User.resetPassword.userNotFound\", locale));\n-\t\t\t\t  \n-\t\t\t  }\n-\t\t\t\n-\t\t} catch (ServiceException e) {\n-\t\t\te.printStackTrace();\n-\t\t\tresp.setStatus(AjaxResponse.RESPONSE_STATUS_FAIURE);\n-\t\t\tresp.setStatusMessage(messages.getMessage(\"User.resetPassword.Error\", locale));\n-\t\t}\n-\t\t\n-\t\tString returnString = resp.toJSONString();\n-\t\tfinal HttpHeaders httpHeaders= new HttpHeaders();\n-\t    httpHeaders.setContentType(MediaType.APPLICATION_JSON_UTF8);\n-\t\treturn new ResponseEntity<String>(returnString,httpHeaders,HttpStatus.OK);\n-\t}\n-\t\n-\t}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/catalog/Category.java",
          "status": "removed",
          "additions": 0,
          "deletions": 42,
          "patch": "@@ -1,42 +0,0 @@\n-package com.salesmanager.shop.admin.model.catalog;\n-\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.validation.Valid;\n-import com.salesmanager.core.model.catalog.category.CategoryDescription;\n-\n-/**\n- * Wrapper to ease admin jstl\n- * @author carlsamson\n- *\n- */\n-public class Category implements Serializable {\n-\n-  /**\n-   * \n-   */\n-  private static final long serialVersionUID = 1L;\n-  \n-  private com.salesmanager.core.model.catalog.category.Category category;\n-  \n-  @Valid\n-  private List<CategoryDescription> descriptions = new ArrayList<CategoryDescription>();\n-\n-  public com.salesmanager.core.model.catalog.category.Category getCategory() {\n-    return category;\n-  }\n-\n-  public void setCategory(com.salesmanager.core.model.catalog.category.Category category) {\n-    this.category = category;\n-  }\n-\n-  public List<CategoryDescription> getDescriptions() {\n-    return descriptions;\n-  }\n-\n-  public void setDescriptions(List<CategoryDescription> descriptions) {\n-    this.descriptions = descriptions;\n-  }\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/catalog/Keyword.java",
          "status": "removed",
          "additions": 0,
          "deletions": 41,
          "patch": "@@ -1,41 +0,0 @@\n-package com.salesmanager.shop.admin.model.catalog;\n-\n-import javax.validation.constraints.NotEmpty;\n-\n-import java.io.Serializable;\n-\n-/**\n- * Post keyword from the admin\n- * @author Carl Samson\n- *\n- */\n-public class Keyword implements Serializable {\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = 1L;\n-\tprivate long productId;\n-\tprivate String languageCode;\n-\t@NotEmpty\n-\tprivate String keyword;\n-\tpublic void setProductId(long productId) {\n-\t\tthis.productId = productId;\n-\t}\n-\tpublic long getProductId() {\n-\t\treturn productId;\n-\t}\n-\tpublic void setLanguageCode(String languageCode) {\n-\t\tthis.languageCode = languageCode;\n-\t}\n-\tpublic String getLanguageCode() {\n-\t\treturn languageCode;\n-\t}\n-\tpublic void setKeyword(String keyword) {\n-\t\tthis.keyword = keyword;\n-\t}\n-\tpublic String getKeyword() {\n-\t\treturn keyword;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/catalog/Manufacturer.java",
          "status": "removed",
          "additions": 0,
          "deletions": 91,
          "patch": "@@ -1,91 +0,0 @@\n-package com.salesmanager.shop.admin.model.catalog;\n-\n-import com.salesmanager.core.model.catalog.product.image.ProductImage;\n-import com.salesmanager.core.model.catalog.product.manufacturer.ManufacturerDescription;\n-import org.springframework.web.multipart.MultipartFile;\n-\n-import javax.validation.Valid;\n-import javax.validation.constraints.NotNull;\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-\n-public class Manufacturer implements Serializable {\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = -4531526676134574984L;\n-\n-\t/**\n-\t * \n-\t */\n-\n-\t//provides wrapping to the main Manufacturer entity\n-\tprivate com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturer;\n-\t\n-\t@Valid\n-\tprivate List<ManufacturerDescription> descriptions = new ArrayList<ManufacturerDescription>();\n-\t\n-\tprivate Integer order = new Integer(0);\n-\tprivate MultipartFile image = null;\n-\t@NotNull\n-\tprivate String code;\n-\tpublic String getCode() {\n-\t\treturn code;\n-\t}\n-\n-\tpublic void setCode(String code) {\n-\t\tthis.code = code;\n-\t}\n-\n-\tprivate ProductImage productImage = null;\n-\t\n-\t\n-\t\n-\tpublic MultipartFile getImage() {\n-\t\treturn image;\n-\t}\n-\n-\tpublic void setImage(MultipartFile image) {\n-\t\tthis.image = image;\n-\t}\n-\n-\tpublic ProductImage getProductImage() {\n-\t\treturn productImage;\n-\t}\n-\n-\tpublic void setProductImage(ProductImage productImage) {\n-\t\tthis.productImage = productImage;\n-\t}\n-\n-\tpublic com.salesmanager.core.model.catalog.product.manufacturer.Manufacturer getManufacturer() {\n-\t\treturn manufacturer;\n-\t}\n-\n-\tpublic void setManufacturer(\n-\t\t\tcom.salesmanager.core.model.catalog.product.manufacturer.Manufacturer manufacturer) {\n-\t\tthis.manufacturer = manufacturer;\n-\t}\n-\n-\tpublic List<ManufacturerDescription> getDescriptions() {\n-\t\treturn descriptions;\n-\t}\n-\n-\tpublic void setDescriptions(List<ManufacturerDescription> descriptions) {\n-\t\tthis.descriptions = descriptions;\n-\t}\n-\n-\tpublic Integer getOrder() {\n-\t\treturn order;\n-\t}\n-\n-\tpublic void setOrder(Integer order) {\n-\t\tthis.order = order;\n-\t}\n-\t\n-\t\n-\t\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/catalog/Product.java",
          "status": "removed",
          "additions": 0,
          "deletions": 112,
          "patch": "@@ -1,112 +0,0 @@\n-package com.salesmanager.shop.admin.model.catalog;\n-\n-import com.salesmanager.core.model.catalog.product.availability.ProductAvailability;\n-import com.salesmanager.core.model.catalog.product.description.ProductDescription;\n-import com.salesmanager.core.model.catalog.product.image.ProductImage;\n-import com.salesmanager.core.model.catalog.product.price.ProductPrice;\n-import javax.validation.constraints.NotEmpty;\n-import org.springframework.web.multipart.MultipartFile;\n-\n-import javax.validation.Valid;\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class Product implements Serializable {\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = 1L;\n-\n-\t/**\n-\t * \n-\t */\n-\n-\t//provides wrapping to the main product entity\n-\t@Valid\n-\tprivate com.salesmanager.core.model.catalog.product.Product product;\n-\t\n-\t@Valid\n-\tprivate List<ProductDescription> descriptions = new ArrayList<ProductDescription>();\n-\t\n-\t@Valid\n-\tprivate ProductAvailability availability = null;\n-\t\n-\t@Valid\n-\tprivate ProductPrice price = null;\n-\t\n-\tprivate MultipartFile image = null;\n-\t\n-\tprivate ProductImage productImage = null;\n-\t\n-\t@NotEmpty\n-\tprivate String productPrice = \"0\";\n-\t\n-\tprivate String dateAvailable;\n-\n-\tprivate ProductDescription description = null;\n-\t\n-\tpublic String getDateAvailable() {\n-\t\treturn dateAvailable;\n-\t}\n-\tpublic void setDateAvailable(String dateAvailable) {\n-\t\tthis.dateAvailable = dateAvailable;\n-\t}\n-\tpublic com.salesmanager.core.model.catalog.product.Product getProduct() {\n-\t\treturn product;\n-\t}\n-\tpublic void setProduct(com.salesmanager.core.model.catalog.product.Product product) {\n-\t\tthis.product = product;\n-\t}\n-\t\n-\tpublic List<ProductDescription> getDescriptions() {\n-\t\treturn descriptions;\n-\t}\n-\tpublic void setDescriptions(List<ProductDescription> descriptions) {\n-\t\tthis.descriptions = descriptions;\n-\t}\n-\tpublic void setAvailability(ProductAvailability availability) {\n-\t\tthis.availability = availability;\n-\t}\n-\tpublic ProductAvailability getAvailability() {\n-\t\treturn availability;\n-\t}\n-\tpublic void setPrice(ProductPrice price) {\n-\t\tthis.price = price;\n-\t}\n-\tpublic ProductPrice getPrice() {\n-\t\treturn price;\n-\t}\n-\tpublic MultipartFile getImage() {\n-\t\treturn image;\n-\t}\n-\tpublic void setImage(MultipartFile image) {\n-\t\tthis.image = image;\n-\t}\n-\n-\tpublic void setProductPrice(String productPrice) {\n-\t\tthis.productPrice = productPrice;\n-\t}\n-\tpublic String getProductPrice() {\n-\t\treturn productPrice;\n-\t}\n-\tpublic void setProductImage(ProductImage productImage) {\n-\t\tthis.productImage = productImage;\n-\t}\n-\tpublic ProductImage getProductImage() {\n-\t\treturn productImage;\n-\t}\n-\tpublic void setDescription(ProductDescription description) {\n-\t\tthis.description = description;\n-\t}\n-\tpublic ProductDescription getDescription() {\n-\t\treturn description;\n-\t}\n-\t\n-\n-\n-\n-\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/catalog/ProductPrice.java",
          "status": "removed",
          "additions": 0,
          "deletions": 82,
          "patch": "@@ -1,82 +0,0 @@\n-package com.salesmanager.shop.admin.model.catalog;\n-\n-import com.salesmanager.core.model.catalog.product.availability.ProductAvailability;\n-import com.salesmanager.core.model.catalog.product.price.ProductPriceDescription;\n-\n-import javax.validation.Valid;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class ProductPrice {\n-\t\n-\t@Valid\n-\tprivate com.salesmanager.core.model.catalog.product.price.ProductPrice price = null;\n-\t@Valid\n-\tprivate List <ProductPriceDescription> descriptions = new ArrayList<ProductPriceDescription>();\n-\tprivate String priceText;\n-\tprivate String specialPriceText;\n-\tprivate ProductAvailability productAvailability;\n-\t\n-\t\n-\t//cannot convert in this object to date ??? needs to use a string, parse, bla bla\n-\tprivate String productPriceSpecialStartDate;\n-\tprivate String productPriceSpecialEndDate;\n-\t\n-\tprivate com.salesmanager.core.model.catalog.product.Product product;\n-\t\n-\t\n-\t\n-\t\n-\t\n-\tpublic List <ProductPriceDescription> getDescriptions() {\n-\t\treturn descriptions;\n-\t}\n-\tpublic void setDescriptions(List <ProductPriceDescription> descriptions) {\n-\t\tthis.descriptions = descriptions;\n-\t}\n-\tpublic ProductAvailability getProductAvailability() {\n-\t\treturn productAvailability;\n-\t}\n-\tpublic void setProductAvailability(ProductAvailability productAvailability) {\n-\t\tthis.productAvailability = productAvailability;\n-\t}\n-\tpublic String getPriceText() {\n-\t\treturn priceText;\n-\t}\n-\tpublic void setPriceText(String priceText) {\n-\t\tthis.priceText = priceText;\n-\t}\n-\tpublic com.salesmanager.core.model.catalog.product.price.ProductPrice getPrice() {\n-\t\treturn price;\n-\t}\n-\tpublic void setPrice(com.salesmanager.core.model.catalog.product.price.ProductPrice price) {\n-\t\tthis.price = price;\n-\t}\n-\tpublic String getSpecialPriceText() {\n-\t\treturn specialPriceText;\n-\t}\n-\tpublic void setSpecialPriceText(String specialPriceText) {\n-\t\tthis.specialPriceText = specialPriceText;\n-\t}\n-\n-\tpublic com.salesmanager.core.model.catalog.product.Product getProduct() {\n-\t\treturn product;\n-\t}\n-\tpublic void setProduct(com.salesmanager.core.model.catalog.product.Product product) {\n-\t\tthis.product = product;\n-\t}\n-\tpublic String getProductPriceSpecialStartDate() {\n-\t\treturn productPriceSpecialStartDate;\n-\t}\n-\tpublic void setProductPriceSpecialStartDate(\n-\t\t\tString productPriceSpecialStartDate) {\n-\t\tthis.productPriceSpecialStartDate = productPriceSpecialStartDate;\n-\t}\n-\tpublic String getProductPriceSpecialEndDate() {\n-\t\treturn productPriceSpecialEndDate;\n-\t}\n-\tpublic void setProductPriceSpecialEndDate(String productPriceSpecialEndDate) {\n-\t\tthis.productPriceSpecialEndDate = productPriceSpecialEndDate;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/content/ContentFiles.java",
          "status": "removed",
          "additions": 0,
          "deletions": 57,
          "patch": "@@ -1,57 +0,0 @@\n-/**\n- * \n- */\n-package com.salesmanager.shop.admin.model.content;\n-\n-import javax.validation.constraints.NotEmpty;\n-import org.springframework.web.multipart.MultipartFile;\n-\n-import javax.validation.Valid;\n-import java.io.Serializable;\n-import java.util.List;\n-\n-/**\n- * A bean class responsible for getting form data from shop Admin for uploading\n- * content files for a given merchant and validating the provided data.\n- * \n- * This will work as a wrapper for underlying cache where these content images will be stored\n- * and retrieved in future.\n- * \n- * @author Umesh Awasthi\n- * @since 1.2\n- *\n- */\n-public class ContentFiles implements Serializable\n-{\n-    \n-    private static final long serialVersionUID = 1L;\n-    \n-    \n-    private List<MultipartFile> file;\n-    \n-    public void setFile(List<MultipartFile> file) {\n-\t\tthis.file = file;\n-\t}\n-\n-\tprivate String fileName;\n-\n-    //@NotEmpty(message=\"{merchant.files.invalid}\")\n-    //@Valid\n-    public List<MultipartFile> getFile()\n-    {\n-        return file;\n-    }\n-\n-\tpublic void setFileName(String fileName) {\n-\t\tthis.fileName = fileName;\n-\t}\n-\n-\tpublic String getFileName() {\n-\t\treturn fileName;\n-\t}\n-\n-    \n-    \n-    \n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/content/ProductImages.java",
          "status": "removed",
          "additions": 0,
          "deletions": 19,
          "patch": "@@ -1,19 +0,0 @@\n-package com.salesmanager.shop.admin.model.content;\n-\n-public class ProductImages extends ContentFiles {\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = 7732719188032287938L;\n-\tprivate long productId;\n-\n-\tpublic long getProductId() {\n-\t\treturn productId;\n-\t}\n-\n-\tpublic void setProductId(long productId) {\n-\t\tthis.productId = productId;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/customer/attribute/CustomerAttributes.java",
          "status": "removed",
          "additions": 0,
          "deletions": 18,
          "patch": "@@ -1,18 +0,0 @@\n-package com.salesmanager.shop.admin.model.customer.attribute;\n-\n-import java.util.List;\n-\n-\n-public class CustomerAttributes {\n-\t\n-\tprivate List<CustomerOption> customerOptions;\n-\n-\tpublic List<CustomerOption> getCustomerOptions() {\n-\t\treturn customerOptions;\n-\t}\n-\n-\tpublic void setCustomerOptions(List<CustomerOption> customerOptions) {\n-\t\tthis.customerOptions = customerOptions;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/customer/attribute/CustomerOption.java",
          "status": "removed",
          "additions": 0,
          "deletions": 67,
          "patch": "@@ -1,67 +0,0 @@\n-package com.salesmanager.shop.admin.model.customer.attribute;\n-\n-import java.io.Serializable;\n-import java.util.List;\n-\n-import com.salesmanager.shop.model.entity.ShopEntity;\n-\n-\n-\n-public class CustomerOption extends ShopEntity implements Serializable {\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = 1L;\n-\tprivate String type;\n-\tprivate String name;\n-\n-\n-\tprivate CustomerOptionValue defaultValue;\n-\n-\t\n-\tprivate List<CustomerOptionValue> availableValues;\n-\n-\n-\tpublic String getType() {\n-\t\treturn type;\n-\t}\n-\n-\tpublic void setType(String type) {\n-\t\tthis.type = type;\n-\t}\n-\n-\tpublic String getName() {\n-\t\treturn name;\n-\t}\n-\n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n-\t}\n-\n-\tpublic CustomerOptionValue getDefaultValue() {\n-\t\treturn defaultValue;\n-\t}\n-\n-\tpublic void setDefaultValue(CustomerOptionValue defaultValue) {\n-\t\tthis.defaultValue = defaultValue;\n-\t}\n-\n-\tpublic List<CustomerOptionValue> getAvailableValues() {\n-\t\treturn availableValues;\n-\t}\n-\n-\tpublic void setAvailableValues(List<CustomerOptionValue> availableValues) {\n-\t\tthis.availableValues = availableValues;\n-\t}\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/customer/attribute/CustomerOptionValue.java",
          "status": "removed",
          "additions": 0,
          "deletions": 24,
          "patch": "@@ -1,24 +0,0 @@\n-package com.salesmanager.shop.admin.model.customer.attribute;\n-\n-import java.io.Serializable;\n-\n-import com.salesmanager.shop.model.entity.ShopEntity;\n-\n-\n-\n-public class CustomerOptionValue extends ShopEntity implements Serializable {\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = 1L;\n-\tprivate String name;\n-\n-\tpublic String getName() {\n-\t\treturn name;\n-\t}\n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/digital/ProductFiles.java",
          "status": "removed",
          "additions": 0,
          "deletions": 69,
          "patch": "@@ -1,69 +0,0 @@\n-/**\n- * \n- */\n-package com.salesmanager.shop.admin.model.digital;\n-\n-import com.salesmanager.core.model.catalog.product.Product;\n-import com.salesmanager.core.model.catalog.product.file.DigitalProduct;\n-import javax.validation.constraints.NotEmpty;\n-import org.springframework.web.multipart.MultipartFile;\n-\n-import javax.validation.Valid;\n-import java.io.Serializable;\n-import java.util.List;\n-\n-/**\n- * A bean class responsible for getting form data from shop Admin for uploading\n- * product files for a given product and validating the provided data.\n- * \n- * This will work as a wrapper for underlying cache where these content images will be stored\n- * and retrieved in future.\n- * \n- * @author Carl Samson\n- * @since 1.2\n- *\n- */\n-public class ProductFiles implements Serializable\n-{\n-    \n-    private static final long serialVersionUID = 1L;\n-    \n-    \n-    private List<MultipartFile> file;\n-    private DigitalProduct digitalProduct;\n-    private Product product;\n-\n-    @NotEmpty(message=\"{product.files.invalid}\")\n-    @Valid\n-    public List<MultipartFile> getFile()\n-    {\n-        return file;\n-    }\n-\n-    public void setFile( final List<MultipartFile> file )\n-    {\n-        this.file = file;\n-    }\n-\n-\n-\n-\tpublic Product getProduct() {\n-\t\treturn product;\n-\t}\n-\n-\tpublic void setProduct(Product product) {\n-\t\tthis.product = product;\n-\t}\n-\n-\tpublic void setDigitalProduct(DigitalProduct digitalProduct) {\n-\t\tthis.digitalProduct = digitalProduct;\n-\t}\n-\n-\tpublic DigitalProduct getDigitalProduct() {\n-\t\treturn digitalProduct;\n-\t}\n-\n-\n-    \n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/merchant/StoreLanding.java",
          "status": "removed",
          "additions": 0,
          "deletions": 20,
          "patch": "@@ -1,20 +0,0 @@\n-package com.salesmanager.shop.admin.model.merchant;\n-\n-import javax.validation.Valid;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-public class StoreLanding {\n-\t\n-\t@Valid\n-\tprivate List<StoreLandingDescription> descriptions = new ArrayList<StoreLandingDescription>();\n-\n-\tpublic void setDescriptions(List<StoreLandingDescription> descriptions) {\n-\t\tthis.descriptions = descriptions;\n-\t}\n-\n-\tpublic List<StoreLandingDescription> getDescriptions() {\n-\t\treturn descriptions;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/merchant/StoreLandingDescription.java",
          "status": "removed",
          "additions": 0,
          "deletions": 68,
          "patch": "@@ -1,68 +0,0 @@\n-package com.salesmanager.shop.admin.model.merchant;\n-\n-import com.salesmanager.core.model.reference.language.Language;\n-\n-import java.io.Serializable;\n-\n-import javax.validation.constraints.NotEmpty;\n-\n-public class StoreLandingDescription implements Serializable {\n-\t\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = 1L;\n-\t@NotEmpty\n-\tprivate String title;\n-\tprivate String description;\n-\tprivate String keywords;\n-\tprivate String homePageContent;\n-\t\n-\t\n-\tprivate Language language;\n-\n-\t\n-\t\n-\t\n-\tpublic void setDescription(String description) {\n-\t\tthis.description = description;\n-\t}\n-\n-\tpublic String getDescription() {\n-\t\treturn description;\n-\t}\n-\n-\tpublic void setHomePageContent(String homePageContent) {\n-\t\tthis.homePageContent = homePageContent;\n-\t}\n-\n-\tpublic String getHomePageContent() {\n-\t\treturn homePageContent;\n-\t}\n-\n-\tpublic void setKeywords(String keywords) {\n-\t\tthis.keywords = keywords;\n-\t}\n-\n-\tpublic String getKeywords() {\n-\t\treturn keywords;\n-\t}\n-\n-\tpublic void setTitle(String title) {\n-\t\tthis.title = title;\n-\t}\n-\n-\tpublic String getTitle() {\n-\t\treturn title;\n-\t}\n-\n-\tpublic void setLanguage(Language language) {\n-\t\tthis.language = language;\n-\t}\n-\n-\tpublic Language getLanguage() {\n-\t\treturn language;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/orders/Order.java",
          "status": "removed",
          "additions": 0,
          "deletions": 96,
          "patch": "@@ -1,96 +0,0 @@\n-package com.salesmanager.shop.admin.model.orders;\n-\n-import com.salesmanager.core.model.common.Billing;\n-import com.salesmanager.core.model.common.Delivery;\n-import com.salesmanager.core.model.order.orderstatus.OrderStatus;\n-\n-import javax.persistence.Embedded;\n-import java.io.Serializable;\n-import java.util.Arrays;\n-import java.util.List;\n-\n-\n-public class Order implements Serializable {\n-\t\n-\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = 1L;\n-\tprivate Long Id;\n-\tprivate String orderHistoryComment = \"\";\n-\t\n-\tList<OrderStatus> orderStatusList = Arrays.asList(OrderStatus.values());     \n-\tprivate String datePurchased = \"\";\n-\tprivate  com.salesmanager.core.model.order.Order order;\n-\t\n-\t@Embedded\n-\tprivate com.salesmanager.core.model.common.Delivery delivery = null;\n-\t\n-\t@Embedded\n-\tprivate com.salesmanager.core.model.common.Billing billing = null;\n-\t\n-\t\n-\t\n-\t\n-\tpublic String getDatePurchased() {\n-\t\treturn datePurchased;\n-\t}\n-\n-\tpublic void setDatePurchased(String datePurchased) {\n-\t\tthis.datePurchased = datePurchased;\n-\t}\n-\n-\tpublic Long getId() {\n-\t\treturn Id;\n-\t}\n-\n-\tpublic void setId(Long id) {\n-\t\tId = id;\n-\t}\n-\n-\tpublic String getOrderHistoryComment() {\n-\t\treturn orderHistoryComment;\n-\t}\n-\n-\tpublic void setOrderHistoryComment(String orderHistoryComment) {\n-\t\tthis.orderHistoryComment = orderHistoryComment;\n-\t}\n-\n-\tpublic List<OrderStatus> getOrderStatusList() {\n-\t\treturn orderStatusList;\n-\t}\n-\n-\tpublic void setOrderStatusList(List<OrderStatus> orderStatusList) {\n-\t\tthis.orderStatusList = orderStatusList;\n-\t}\n-\n-\tpublic com.salesmanager.core.model.order.Order getOrder() {\n-\t\treturn order;\n-\t}\n-\n-\tpublic void setOrder(com.salesmanager.core.model.order.Order order) {\n-\t\tthis.order = order;\n-\t}\n-\n-\tpublic Delivery getDelivery() {\n-\t\treturn delivery;\n-\t}\n-\n-\tpublic void setDelivery(Delivery delivery) {\n-\t\tthis.delivery = delivery;\n-\t}\n-\n-\tpublic Billing getBilling() {\n-\t\treturn billing;\n-\t}\n-\n-\tpublic void setBilling(Billing billing) {\n-\t\tthis.billing = billing;\n-\t}\n-\n-\n-\n-\n-\t\n-}\n\\ No newline at end of file"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/orders/Refund.java",
          "status": "removed",
          "additions": 0,
          "deletions": 26,
          "patch": "@@ -1,26 +0,0 @@\n-package com.salesmanager.shop.admin.model.orders;\n-\n-import java.io.Serializable;\n-\n-public class Refund implements Serializable {\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = 2392736671094915447L;\n-\tprivate Long orderId;\n-\tprivate String amount;\n-\tpublic Long getOrderId() {\n-\t\treturn orderId;\n-\t}\n-\tpublic void setOrderId(Long orderId) {\n-\t\tthis.orderId = orderId;\n-\t}\n-\tpublic String getAmount() {\n-\t\treturn amount;\n-\t}\n-\tpublic void setAmount(String amount) {\n-\t\tthis.amount = amount;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/permission/GroupDetails.java",
          "status": "removed",
          "additions": 0,
          "deletions": 32,
          "patch": "@@ -1,32 +0,0 @@\n-package com.salesmanager.shop.admin.model.permission;\n-\n-import java.io.Serializable;\n-import java.util.List;\n-\n-import javax.validation.Valid;\n-\n-import com.salesmanager.core.model.user.Group;\n-\n-public class GroupDetails implements Serializable {\n-\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = 1L;\n-\t@Valid\n-\tprivate Group group;\n-\tprivate List<String> types;\n-\tpublic Group getGroup() {\n-\t\treturn group;\n-\t}\n-\tpublic void setGroup(Group group) {\n-\t\tthis.group = group;\n-\t}\n-\tpublic List<String> getTypes() {\n-\t\treturn types;\n-\t}\n-\tpublic void setTypes(List<String> types) {\n-\t\tthis.types = types;\n-\t}\n-\t\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/permission/Permissions.java",
          "status": "removed",
          "additions": 0,
          "deletions": 49,
          "patch": "@@ -1,49 +0,0 @@\n-\n-package com.salesmanager.shop.admin.model.permission;\n-\n-import com.fasterxml.jackson.annotation.JsonAnyGetter;\n-import com.fasterxml.jackson.annotation.JsonAnySetter;\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n-\n-import java.io.Serializable;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-@JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonPropertyOrder({\n-    \"permission\"\n-})\n-public class Permissions implements Serializable\n-{\n-\n-    @JsonProperty(\"permission\")\n-    private List<ShopPermission> shopPermission = null;\n-    @JsonIgnore\n-    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n-    private final static long serialVersionUID = 1L;\n-\n-    @JsonProperty(\"permission\")\n-    public List<ShopPermission> getShopPermission() {\n-        return shopPermission;\n-    }\n-\n-    @JsonProperty(\"permission\")\n-    public void setShopPermission(List<ShopPermission> shopPermission) {\n-        this.shopPermission = shopPermission;\n-    }\n-\n-    @JsonAnyGetter\n-    public Map<String, Object> getAdditionalProperties() {\n-        return this.additionalProperties;\n-    }\n-\n-    @JsonAnySetter\n-    public void setAdditionalProperty(String name, Object value) {\n-        this.additionalProperties.put(name, value);\n-    }\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/permission/ShopGroup.java",
          "status": "removed",
          "additions": 0,
          "deletions": 49,
          "patch": "@@ -1,49 +0,0 @@\n-\n-package com.salesmanager.shop.admin.model.permission;\n-\n-import com.fasterxml.jackson.annotation.JsonAnyGetter;\n-import com.fasterxml.jackson.annotation.JsonAnySetter;\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n-\n-import java.io.Serializable;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-@JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonPropertyOrder({\n-    \"name\"\n-})\n-public class ShopGroup implements Serializable\n-{\n-\n-    @JsonProperty(\"name\")\n-    private List<String> name = null;\n-    @JsonIgnore\n-    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n-    private final static long serialVersionUID = 8390421982207090115L;\n-\n-    @JsonProperty(\"name\")\n-    public List<String> getName() {\n-        return name;\n-    }\n-\n-    @JsonProperty(\"name\")\n-    public void setName(List<String> name) {\n-        this.name = name;\n-    }\n-\n-    @JsonAnyGetter\n-    public Map<String, Object> getAdditionalProperties() {\n-        return this.additionalProperties;\n-    }\n-\n-    @JsonAnySetter\n-    public void setAdditionalProperty(String name, Object value) {\n-        this.additionalProperties.put(name, value);\n-    }\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/permission/ShopPermission.java",
          "status": "removed",
          "additions": 0,
          "deletions": 61,
          "patch": "@@ -1,61 +0,0 @@\n-\n-package com.salesmanager.shop.admin.model.permission;\n-\n-import com.fasterxml.jackson.annotation.JsonAnyGetter;\n-import com.fasterxml.jackson.annotation.JsonAnySetter;\n-import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.annotation.JsonInclude;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n-\n-import java.io.Serializable;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-@JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonPropertyOrder({\n-    \"type\",\n-    \"group\"\n-})\n-public class ShopPermission implements Serializable\n-{\n-\n-    @JsonProperty(\"type\")\n-    private String type;\n-    @JsonProperty(\"group\")\n-    private ShopGroup shopGroup;\n-    @JsonIgnore\n-    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n-    private final static long serialVersionUID = -7938476709520334066L;\n-\n-    @JsonProperty(\"type\")\n-    public String getType() {\n-        return type;\n-    }\n-\n-    @JsonProperty(\"type\")\n-    public void setType(String type) {\n-        this.type = type;\n-    }\n-\n-    @JsonProperty(\"group\")\n-    public ShopGroup getShopGroup() {\n-        return shopGroup;\n-    }\n-\n-    @JsonProperty(\"group\")\n-    public void setShopGroup(ShopGroup shopGroup) {\n-        this.shopGroup = shopGroup;\n-    }\n-\n-    @JsonAnyGetter\n-    public Map<String, Object> getAdditionalProperties() {\n-        return this.additionalProperties;\n-    }\n-\n-    @JsonAnySetter\n-    public void setAdditionalProperty(String name, Object value) {\n-        this.additionalProperties.put(name, value);\n-    }\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/reference/Size.java",
          "status": "removed",
          "additions": 0,
          "deletions": 32,
          "patch": "@@ -1,32 +0,0 @@\n-package com.salesmanager.shop.admin.model.reference;\n-\n-import java.io.Serializable;\n-\n-public class Size implements Serializable {\n-\t\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = -4737272153685816396L;\n-\tprivate String code;\n-\tprivate String name;\n-\tpublic String getCode() {\n-\t\treturn code;\n-\t}\n-\tpublic void setCode(String code) {\n-\t\tthis.code = code;\n-\t}\n-\tpublic String getName() {\n-\t\treturn name;\n-\t}\n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n-\t}\n-\t\n-\tpublic Size(String code, String name) {\n-\t\tthis.code = code;\n-\t\tthis.name = name;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/reference/Weight.java",
          "status": "removed",
          "additions": 0,
          "deletions": 31,
          "patch": "@@ -1,31 +0,0 @@\n-package com.salesmanager.shop.admin.model.reference;\n-\n-import java.io.Serializable;\n-\n-public class Weight implements Serializable {\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = -1006772612089740285L;\n-\tprivate String code;\n-\tprivate String name;\n-\tpublic String getName() {\n-\t\treturn name;\n-\t}\n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n-\t}\n-\tpublic String getCode() {\n-\t\treturn code;\n-\t}\n-\tpublic void setCode(String code) {\n-\t\tthis.code = code;\n-\t}\n-\t\n-\tpublic Weight(String code, String name) {\n-\t\tthis.code = code;\n-\t\tthis.name = name;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/secutity/Password.java",
          "status": "removed",
          "additions": 0,
          "deletions": 59,
          "patch": "@@ -1,59 +0,0 @@\n-package com.salesmanager.shop.admin.model.secutity;\n-\n-import com.salesmanager.core.model.user.User;\n-\n-import java.io.Serializable;\n-\n-/**\n- * Entity used in the cahange passord page\n- * @author csamson777\n- *\n- */\n-public class Password implements Serializable {\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = 1L;\n-\tprivate String password;\n-\tprivate String newPassword;\n-\tprivate String repeatPassword;\n-\t\n-\tprivate User user;\n-\n-\t\n-\t\n-\tpublic String getPassword() {\n-\t\treturn password;\n-\t}\n-\n-\tpublic void setPassword(String password) {\n-\t\tthis.password = password;\n-\t}\n-\n-\tpublic String getNewPassword() {\n-\t\treturn newPassword;\n-\t}\n-\n-\tpublic void setNewPassword(String newPassword) {\n-\t\tthis.newPassword = newPassword;\n-\t}\n-\n-\tpublic String getRepeatPassword() {\n-\t\treturn repeatPassword;\n-\t}\n-\n-\tpublic void setRepeatPassword(String repeatPassword) {\n-\t\tthis.repeatPassword = repeatPassword;\n-\t}\n-\n-\tpublic User getUser() {\n-\t\treturn user;\n-\t}\n-\n-\tpublic void setUser(User user) {\n-\t\tthis.user = user;\n-\t}\n-\t\n-\t\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/userpassword/UserReset.java",
          "status": "removed",
          "additions": 0,
          "deletions": 51,
          "patch": "@@ -1,51 +0,0 @@\n-package com.salesmanager.shop.admin.model.userpassword;\n-\n-import org.apache.commons.rng.UniformRandomProvider;\n-import org.apache.commons.rng.simple.RandomSource;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-public class UserReset\n-{\n-  final static String CHAR_LIST_WITHNUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";\n-  final static String CHAR_LIST = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-\";\n-\n-  final static int RANDOM_STRING_LENGTH = 10;\n-  \n-  private static final Logger LOGGER = LoggerFactory.getLogger(UserReset.class);\n-\n-  public static String generateRandomString()\n-  {\n-    StringBuilder randStr = new StringBuilder();\n-    for (int i = 0; i < RANDOM_STRING_LENGTH; i++) {\n-      int number = getRandomNumber();\n-      char ch = CHAR_LIST_WITHNUM.charAt(number);\n-      randStr.append(ch);\n-    }\n-    return randStr.toString();\n-  }\n-  \n-  public static String generateRandomString(int length)\n-  {\n-    StringBuilder randStr = new StringBuilder();\n-    for (int i = 0; i < length; i++) {\n-      int number = getRandomNumber();\n-      char ch = CHAR_LIST.charAt(number);\n-      randStr.append(ch);\n-    }\n-    return randStr.toString();\n-  }\n-\n-  private static int getRandomNumber()\n-  {\n-    int randomInt = 0;\n-\n-      UniformRandomProvider randomGenerator = RandomSource.create(RandomSource.MT);\n-      randomInt = randomGenerator.nextInt(CHAR_LIST.length());\n-\n-    return randomInt;\n-  }\n-\n-  \n-}\n\\ No newline at end of file"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/web/ConfigListWrapper.java",
          "status": "removed",
          "additions": 0,
          "deletions": 23,
          "patch": "@@ -1,23 +0,0 @@\n-package com.salesmanager.shop.admin.model.web;\n-\n-import java.util.List;\n-\n-import com.salesmanager.core.model.system.MerchantConfiguration;\n-\n-\n-\n-public class ConfigListWrapper\n-{\n-\tprivate List<MerchantConfiguration> merchantConfigs;\n-\n-\tpublic List<MerchantConfiguration> getMerchantConfigs()\n-\t{\n-\t\treturn merchantConfigs;\n-\t}\n-\n-\tpublic void setMerchantConfigs(List<MerchantConfiguration> merchantConfigs)\n-\t{\n-\t\tthis.merchantConfigs = merchantConfigs;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/admin/model/web/Menu.java",
          "status": "removed",
          "additions": 0,
          "deletions": 68,
          "patch": "@@ -1,68 +0,0 @@\n-package com.salesmanager.shop.admin.model.web;\n-\n-\n-\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-\n-public class Menu implements Serializable {\n-\t\n-\t/**\n-\t * \n-\t */\n-\tprivate static final long serialVersionUID = 1L;\n-\tprivate String code;\n-\tprivate String url;\n-\tprivate String icon;\n-\tprivate String role;\n-\tprivate int order;\n-\tprivate List<Menu> menus = new ArrayList<Menu>();\n-\tpublic String getCode() {\n-\t\treturn code;\n-\t}\n-\t@JsonProperty(\"code\")  \n-\tpublic void setCode(String code) {\n-\t\tthis.code = code;\n-\t}\n-\tpublic String getUrl() {\n-\t\treturn url;\n-\t}\n-\t@JsonProperty(\"url\")  \n-\tpublic void setUrl(String url) {\n-\t\tthis.url = url;\n-\t}\n-\n-\t \n-\n-\tpublic int getOrder() {\n-\t\treturn order;\n-\t}\n-\t@JsonProperty(\"order\")  \n-\tpublic void setOrder(int order) {\n-\t\tthis.order = order;\n-\t}\n-\tpublic List<Menu> getMenus() {\n-\t\treturn menus;\n-\t}\n-\t@JsonProperty(\"menus\")  \n-\tpublic void setMenus(List<Menu> menus) {\n-\t\tthis.menus = menus;\n-\t}\n-\tpublic void setIcon(String icon) {\n-\t\tthis.icon = icon;\n-\t}\n-\tpublic String getIcon() {\n-\t\treturn icon;\n-\t}\n-\tpublic String getRole() {\n-\t\treturn role;\n-\t}\n-\t@JsonProperty(\"role\") \n-\tpublic void setRole(String role) {\n-\t\tthis.role = role;\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/application/config/ShopApplicationConfiguration.java",
          "status": "modified",
          "additions": 0,
          "deletions": 7,
          "patch": "@@ -32,7 +32,6 @@\n import org.springframework.web.servlet.i18n.SessionLocaleResolver;\n \n import com.salesmanager.core.business.configuration.CoreApplicationConfiguration;\n-import com.salesmanager.shop.filter.AdminFilter;\n import com.salesmanager.shop.filter.CorsFilter;\n import com.salesmanager.shop.filter.StoreFilter;\n import com.salesmanager.shop.filter.XssFilter;\n@@ -95,8 +94,6 @@ public void addInterceptors(InterceptorRegistry registry) {\n         // REST api\n         .addPathPatterns(\"/api/**\");\n \n-    // admin panel filter\n-    registry.addInterceptor(adminFilter()).addPathPatterns(\"/admin/**\");\n   }\n \n   @Bean\n@@ -124,10 +121,6 @@ public CorsFilter corsFilter() {\n     return new CorsFilter();\n   }\n \n-  @Bean\n-  public AdminFilter adminFilter() {\n-    return new AdminFilter();\n-  }\n \n   @Bean\n   public SessionLocaleResolver localeResolver() {"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/filter/AdminFilter.java",
          "status": "removed",
          "additions": 0,
          "deletions": 205,
          "patch": "@@ -1,205 +0,0 @@\n-package com.salesmanager.shop.filter;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.ArrayList;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import javax.inject.Inject;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n-import com.fasterxml.jackson.core.JsonParseException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.salesmanager.core.business.services.merchant.MerchantStoreService;\n-import com.salesmanager.core.business.services.reference.language.LanguageService;\n-import com.salesmanager.core.business.services.user.UserService;\n-import com.salesmanager.core.business.utils.CacheUtils;\n-import com.salesmanager.core.model.merchant.MerchantStore;\n-import com.salesmanager.core.model.reference.language.Language;\n-import com.salesmanager.core.model.user.User;\n-import com.salesmanager.shop.admin.model.web.Menu;\n-import com.salesmanager.shop.constants.Constants;\n-import com.salesmanager.shop.utils.LanguageUtils;\n-\n-\n-public class AdminFilter extends HandlerInterceptorAdapter {\n-\t\n-\n-\tprivate static final Logger LOGGER = LoggerFactory.getLogger(AdminFilter.class);\n-\t\n-\t@Inject\n-\tprivate MerchantStoreService merchantService;\n-\t\n-\t@Inject\n-\tprivate UserService userService;\n-\n-\t@Inject\n-\tprivate CacheUtils cache;\n-\t\n-\t@Inject\n-\tprivate LanguageUtils languageUtils;\n-\t\n-\tpublic boolean preHandle(\n-            HttpServletRequest request,\n-            HttpServletResponse response,\n-            Object handler) throws Exception {\n-\t\t\n-\t\trequest.setCharacterEncoding(\"UTF-8\");\n-\t\t@SuppressWarnings(\"unchecked\")\n-\t\tMap<String,Menu> menus = (Map<String,Menu>) cache.getFromCache(\"MENUMAP\");\n-\t\t\n-\t\tUser user = (User)request.getSession().getAttribute(Constants.ADMIN_USER);\n-\t\t\n-\n-\t\tString storeCode = MerchantStore.DEFAULT_STORE;\n-\t\tMerchantStore store = (MerchantStore)request.getSession().getAttribute(Constants.ADMIN_STORE);\n-\t\t\n-\t\t\n-\t\tString userName = request.getRemoteUser();\n-\t\t\n-\t\tif(userName==null) {//** IMPORTANT FOR SPRING SECURITY **//\n-\t\t\t//response.sendRedirect(new StringBuilder().append(request.getContextPath()).append(\"/\").append(\"/admin\").toString());\n-\t\t} else {\n-\t\t\n-\t\t\tif(user==null) {\n-\t\t\t\tuser = userService.getByUserName(userName);\n-\t\t\t\trequest.getSession().setAttribute(Constants.ADMIN_USER, user);\n-\t\t\t\tif(user!=null) {\n-\t\t\t\t\tstoreCode = user.getMerchantStore().getCode();\n-\t\t\t\t} else {\n-\t\t\t\t\tLOGGER.warn(\"User name not found \" + userName);\n-\t\t\t\t}\n-\t\t\t\tstore=null;\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(user==null) {\n-\t\t\t\tresponse.sendRedirect(request.getContextPath() + \"/admin/unauthorized.html\");\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t\t\n-\t\t\tif(!user.getAdminName().equals(userName)) {\n-\t\t\t\tuser = userService.getByUserName(userName);\n-\t\t\t\tif(user!=null) {\n-\t\t\t\t\tstoreCode = user.getMerchantStore().getCode();\n-\t\t\t\t} else {\n-\t\t\t\t\tLOGGER.warn(\"User name not found \" + userName);\n-\t\t\t\t}\n-\t\t\t\tstore=null;\n-\t\t\t}\n-\t\t\n-\t\t}\n-\t\t\n-\t\tif(store==null) {\n-\t\t\t\tstore = merchantService.getByCode(storeCode);\n-\t\t\t\trequest.getSession().setAttribute(Constants.ADMIN_STORE, store);\n-\t\t}\n-\t\trequest.setAttribute(Constants.ADMIN_STORE, store);\n-\t\t\n-\t\t\n-\t\tLanguage language = languageUtils.getRequestLanguage(request, response);\n-\n-\t\tif(language==null) {\n-\t\t\t\n-\t\t\t//TODO get the Locale from Spring API, is it simply request.getLocale() ???\n-\t\t\t//if so then based on the Locale language locale.getLanguage() get the appropriate Language\n-\t\t\t//object as represented below\n-\t\t\tif(user!=null) {\n-\t\t\t\tlanguage = user.getDefaultLanguage();\n-\t\t\t\tif(language==null) {\n-\t\t\t\t\tlanguage = store.getDefaultLanguage();\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tlanguage = store.getDefaultLanguage();\n-\t\t\t}\n-\n-\t\t\trequest.getSession().setAttribute(\"LANGUAGE\", language);\n-\n-\t\t}\n-\t\t\n-\n-\t\trequest.setAttribute(Constants.LANGUAGE, language);\n-\t\t\n-\n-\t\tif(menus==null) {\n-\t\t\tInputStream in = null;\n-\t\t\tObjectMapper mapper = new ObjectMapper(); // can reuse, share globally\n-\t\t\ttry {\n-\t\t\t\tin =\n-\t\t\t\t\t(InputStream) this.getClass().getClassLoader().getResourceAsStream(\"admin/menu.json\");\n-\n-\t\t\t\tMap<String,Object> data = mapper.readValue(in, Map.class);\n-\n-\t\t\t\tMenu currentMenu = null;\n-\t\t\t\t\n-\t\t\t\tmenus = new LinkedHashMap<String,Menu>();\n-\t\t\t\tList objects = (List)data.get(\"menus\");\n-\t\t\t\tfor(Object object : objects) {\n-\t\t\t\t\tMenu m = getMenu(object);\n-\t\t\t\t\tmenus.put(m.getCode(),m);\n-\t\t\t\t}\n-\n-\t\t\t\tcache.putInCache(menus,\"MENUMAP\");\n-\n-\t\t\t} catch (JsonParseException e) {\n-\t\t\t\tLOGGER.error(\"Error while creating menu\", e);\n-\t\t\t} catch (JsonMappingException e) {\n-\t\t\t\tLOGGER.error(\"Error while creating menu\", e);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tLOGGER.error(\"Error while creating menu\", e);\n-\t\t\t} finally {\n-\t\t\t\tif(in !=null) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tin.close();\n-\t\t\t\t\t} catch (Exception ignore) {\n-\t\t\t\t\t\t// TODO: handle exception\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\n-\t\t} \n-\t\t\n-\t\t\n-\t\tList<Menu> list = new ArrayList<Menu>(menus.values());\n-\n-\t\trequest.setAttribute(\"MENULIST\", list);\n-\n-\t\trequest.setAttribute(\"MENUMAP\", menus);\n-\t\tresponse.setCharacterEncoding(\"UTF-8\");\n-\t\t\n-\t\treturn true;\n-\t}\n-\t\n-\t\n-\tprivate Menu getMenu(Object object) {\n-\t\t\n-\t\tMap o = (Map)object;\n-\t\tMap menu = (Map)o.get(\"menu\");\n-\t\t\n-\t\tMenu m = new Menu();\n-\t\tm.setCode((String)menu.get(\"code\"));\n-\t\t\n-\t\t\n-\t\tm.setUrl((String)menu.get(\"url\"));\n-\t\tm.setIcon((String)menu.get(\"icon\"));\n-\t\tm.setRole((String)menu.get(\"role\"));\n-\t\t\n-\t\tList menus = (List)menu.get(\"menus\");\n-\t\tif(menus!=null) {\n-\t\t\tfor(Object oo : menus) {\n-\t\t\t\t\n-\t\t\t\tMenu mm = getMenu(oo);\n-\t\t\t\tm.getMenus().add(mm);\n-\t\t\t}\n-\t\t\t\n-\t\t}\n-\t\t\n-\t\treturn m;\n-\t\t\n-\t}\n-\n-}"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/mapper/catalog/PersistableProductAttributeMapper.java",
          "status": "modified",
          "additions": 38,
          "deletions": 3,
          "patch": "@@ -1,11 +1,17 @@\n package com.salesmanager.shop.mapper.catalog;\n \n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n import javax.inject.Inject;\n \n+import org.apache.commons.collections.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.Validate;\n import org.springframework.stereotype.Component;\n \n+import com.salesmanager.core.business.exception.ServiceException;\n import com.salesmanager.core.business.services.catalog.product.ProductService;\n import com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionService;\n import com.salesmanager.core.business.services.catalog.product.attribute.ProductOptionValueService;\n@@ -17,6 +23,8 @@\n import com.salesmanager.core.model.reference.language.Language;\n import com.salesmanager.shop.mapper.Mapper;\n import com.salesmanager.shop.model.catalog.product.attribute.PersistableProductAttribute;\n+import com.salesmanager.shop.model.catalog.product.attribute.PersistableProductOptionValue;\n+import com.salesmanager.shop.model.catalog.product.attribute.ProductOptionValueDescription;\n import com.salesmanager.shop.store.api.exception.ConversionRuntimeException;\n \n @Component\n@@ -28,6 +36,8 @@ public class PersistableProductAttributeMapper implements Mapper<PersistableProd\n \tprivate ProductOptionValueService productOptionValueService;\n \t@Inject\n \tprivate ProductService productService;\n+\t@Inject\n+\tprivate PersistableProductOptionValueMapper persistableProductOptionValueMapper;\n \t\n \t@Override\n \tpublic ProductAttribute convert(PersistableProductAttribute source, MerchantStore store, Language language) {\n@@ -57,19 +67,43 @@ public ProductAttribute merge(PersistableProductAttribute source, ProductAttribu\n \t\t\n \t\tif(!StringUtils.isBlank(source.getOptionValue().getCode())) {\n \t\t\tproductOptionValue = productOptionValueService.getByCode(store, source.getOptionValue().getCode());\n-\t\t} else {\n+\t\t} else if(source.getProductId() != null && source.getOptionValue().getId().longValue()>0) {\n \t\t\tproductOptionValue = productOptionValueService.getById(source.getOptionValue().getId());\n+\t\t} else {\n+\t\t\t//ProductOption value is text\n+\t\t\tproductOptionValue = new ProductOptionValue();\n+\t\t\tproductOptionValue.setProductOptionDisplayOnly(true);\n+\t\t\tproductOptionValue.setCode(UUID.randomUUID().toString());\n+\t\t\tproductOptionValue.setMerchantStore(store);\n+\t\t}\n+\t\t\n+\t\tif(!CollectionUtils.isEmpty((source.getOptionValue().getDescriptions()))) {\n+\t\t\tproductOptionValue =  persistableProductOptionValueMapper.merge(source.getOptionValue(),productOptionValue, store, language);\n+\t\t\ttry {\n+\t\t\t\tproductOptionValueService.saveOrUpdate(productOptionValue);\n+\t\t\t} catch (ServiceException e) {\n+\t\t\t\tthrow new ConversionRuntimeException(\"Error converting ProductOptionValue\",e); \n+\t\t\t}\n \t\t}\n \t\t\n-\t\tif(productOptionValue==null) {\n+\t\tif(productOptionValue==null && ! source.isAttributeDisplayOnly()) {\n \t\t\tthrow new ConversionRuntimeException(\"Product option value id \" + source.getOptionValue().getId() + \" does not exist\");\n \t\t}\n \t\t\n+\n+\t\t\t\n+\t\t/**\n+\t\t\tproductOptionValue\n+\t\t\t.getDescriptions().stream()\n+\t\t\t.map(val -> this.persistableProductOptionValueMapper.convert(val, store, language)).collect(Collectors.toList());\n+\t\t\t\n+\t\t}**/\n+\t\t\n \t\tif(productOption.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n \t\t\tthrow new ConversionRuntimeException(\"Invalid product option id \");\n \t\t}\n \t\t\n-\t\tif(productOptionValue.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n+\t\tif(productOptionValue!=null && productOptionValue.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n \t\t\tthrow new ConversionRuntimeException(\"Invalid product option value id \");\n \t\t}\n \t\t\n@@ -87,6 +121,7 @@ public ProductAttribute merge(PersistableProductAttribute source, ProductAttribu\n \t\t} else {\n \t\t\tdestination.setId(null);\n \t\t}\n+\n \t\tdestination.setProductOption(productOption);\n \t\tdestination.setProductOptionValue(productOptionValue);\n \t\tdestination.setProductAttributePrice(source.getProductAttributePrice());"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/mapper/catalog/PersistableProductDefinitionMapper.java",
          "status": "modified",
          "additions": 40,
          "deletions": 8,
          "patch": "@@ -10,7 +10,6 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.Validate;\n-import org.drools.core.util.DateUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n@@ -149,10 +148,10 @@ public Product merge(PersistableProductDefinition source, Product destination, M\n \t\t\t\tdestination.setDescriptions(descriptions);\n \t\t\t}\n \n-\t\t\tif(source.getRating() != null) {\n-\t\t\t\tdestination.setProductReviewAvg(new BigDecimal(source.getRating()));\n-\t\t\t}\n-\t\t\tdestination.setProductReviewCount(source.getRatingCount());\n+\t\t\t//if(source.getRating() != null) {\n+\t\t\t//\tdestination.setProductReviewAvg(new BigDecimal(source.getRating()));\n+\t\t\t//}\n+\t\t\t//destination.setProductReviewCount(source.getRatingCount());\n \t\t\t\n \t\t\t/**\n \t\t\t * Product definition\n@@ -167,9 +166,11 @@ public Product merge(PersistableProductDefinition source, Product destination, M\n \t\t\t            if(productAvailability == null) {\n \t\t\t              productAvailability = avail;\n \t\t\t              defaultPrice = p;\n+\t\t\t              productAvailability.setProductQuantity(source.getQuantity());\n+\t\t\t              productAvailability.setProductStatus(source.isCanBePurchased());\n+\t\t\t              p.setProductPriceAmount(source.getPrice());\n \t\t\t              break;\n \t\t\t            }\n-\t\t\t            p.setDefaultPrice(false);\n \t\t\t          }\n \t\t\t        }\n \t\t      }\n@@ -179,11 +180,12 @@ public Product merge(PersistableProductDefinition source, Product destination, M\n \t\t      productAvailability = new ProductAvailability(destination, store);\n \t\t      destination.getAvailabilities().add(productAvailability);\n \t\t      \n-\t\t      productAvailability.setProductQuantity(1);\n+\t\t      productAvailability.setProductQuantity(source.getQuantity());\n \t\t\t  productAvailability.setProductQuantityOrderMin(1);\n \t\t\t  productAvailability.setProductQuantityOrderMax(1);\n \t\t\t  productAvailability.setRegion(Constants.ALL_REGIONS);\n \t\t\t  productAvailability.setAvailable(Boolean.valueOf(destination.isAvailable()));\n+\t\t\t  productAvailability.setProductStatus(source.isCanBePurchased());\n \t\t    }\n \n \n@@ -193,7 +195,7 @@ public Product merge(PersistableProductDefinition source, Product destination, M\n \n \t\t\t    defaultPrice = new ProductPrice();\n \t\t\t    defaultPrice.setDefaultPrice(true);\n-\t\t\t    defaultPrice.setProductPriceAmount(new BigDecimal(0));\n+\t\t\t    defaultPrice.setProductPriceAmount(source.getPrice());\n \t\t\t    defaultPrice.setCode(ProductPriceEntity.DEFAULT_PRICE_CODE);\n \t\t\t    defaultPrice.setProductAvailability(productAvailability);\n                 productAvailability.getPrices().add(defaultPrice);\n@@ -207,6 +209,36 @@ public Product merge(PersistableProductDefinition source, Product destination, M\n                 }\n \t\t\t}\n \t\t\t\n+\t\t\tif(source.getProductSpecifications()!=null) {\n+\t\t\t\tdestination.setProductHeight(source.getProductSpecifications().getHeight());\n+\t\t\t\tdestination.setProductLength(source.getProductSpecifications().getLength());\n+\t\t\t\tdestination.setProductWeight(source.getProductSpecifications().getWeight());\n+\t\t\t\tdestination.setProductWidth(source.getProductSpecifications().getWidth());\n+    \t\t\t\n+    \t\t\t\n+    \t         if(source.getProductSpecifications().getManufacturer()!=null) {\n+                   \n+                   Manufacturer manuf = null;\n+                   if(!StringUtils.isBlank(source.getProductSpecifications().getManufacturer())) {\n+                       manuf = manufacturerService.getByCode(store, source.getProductSpecifications().getManufacturer());\n+                   } \n+                   \n+                   if(manuf==null) {\n+                       throw new ConversionException(\"Invalid manufacturer id\");\n+                   }\n+                   if(manuf!=null) {\n+                       if(manuf.getMerchantStore().getId().intValue()!=store.getId().intValue()) {\n+                           throw new ConversionException(\"Invalid manufacturer id\");\n+                       }\n+                       destination.setManufacturer(manuf);\n+                   }\n+               }\n+    \t\t\t\n+\t\t\t}\n+\t\t\tdestination.setSortOrder(source.getSortOrder());\n+\t\t\tdestination.setProductVirtual(source.isVirtual());\n+\t\t\tdestination.setProductShipeable(source.isShipeable());\n+\t\t\t\n \t\t\t\n \t\t\t//attributes\n \t\t\tif(source.getProperties()!=null) {"
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/mapper/catalog/PersistableProductOptionValueMapper.java",
          "status": "modified",
          "additions": 0,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/mapper/catalog/ReadableProductAttributeMapper.java",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/mapper/catalog/ReadableProductDefinitionMapper.java",
          "status": "modified",
          "additions": 52,
          "deletions": 2,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/populator/catalog/PersistableProductPopulator.java",
          "status": "modified",
          "additions": 47,
          "deletions": 39,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/populator/catalog/ReadableProductPopulator.java",
          "status": "modified",
          "additions": 204,
          "deletions": 94,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/populator/customer/CustomerOptionPopulator.java",
          "status": "modified",
          "additions": 13,
          "deletions": 16,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/populator/customer/ReadableCustomerOptionPopulator.java",
          "status": "modified",
          "additions": 14,
          "deletions": 3,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/api/v0/customer/CustomerRESTController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 385,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/api/v0/search/SearchRESTController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 71,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/api/v1/category/CategoryApi.java",
          "status": "modified",
          "additions": 3,
          "deletions": 1,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/api/v1/order/OrderApi.java",
          "status": "modified",
          "additions": 54,
          "deletions": 23,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/api/v1/product/ProductApi.java",
          "status": "modified",
          "additions": 3,
          "deletions": 3,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/api/v1/product/ProductAttributeOptionApi.java",
          "status": "renamed",
          "additions": 51,
          "deletions": 11,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/api/v1/product/ProductPropertySetApi.java",
          "status": "renamed",
          "additions": 27,
          "deletions": 12,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/api/v1/store/MerchantStoreApi.java",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/api/v1/system/ModulesApi.java",
          "status": "modified",
          "additions": 1,
          "deletions": 3,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/api/v1/system/SearchToolsApi.java",
          "status": "added",
          "additions": 86,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/controller/customer/CustomerDashboardController.java",
          "status": "removed",
          "additions": 0,
          "deletions": 133,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/controller/customer/facade/CustomerFacadeImpl.java",
          "status": "modified",
          "additions": 6,
          "deletions": 6,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/controller/order/ShoppingOrderController.java",
          "status": "modified",
          "additions": 1,
          "deletions": 2,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/controller/order/facade/OrderFacade.java",
          "status": "modified",
          "additions": 27,
          "deletions": 21,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/controller/order/facade/OrderFacadeImpl.java",
          "status": "modified",
          "additions": 24,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/controller/store/facade/StoreFacadeImpl.java",
          "status": "modified",
          "additions": 2,
          "deletions": 10,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/facade/product/ProductFacadeImpl.java",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/facade/product/ProductOptionFacadeImpl.java",
          "status": "modified",
          "additions": 64,
          "deletions": 13,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/facade/product/ProductOptionSetFacadeImpl.java",
          "status": "modified",
          "additions": 52,
          "deletions": 26,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/facade/product/ProductTypeFacadeImpl.java",
          "status": "modified",
          "additions": 18,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/store/facade/user/UserFacadeImpl.java",
          "status": "modified",
          "additions": 4,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/java/com/salesmanager/shop/utils/CategoryUtils.java",
          "status": "removed",
          "additions": 0,
          "deletions": 39,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/resources/bundles/messages_cn.properties",
          "status": "added",
          "additions": 219,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/resources/bundles/messages_pt_BR.properties",
          "status": "added",
          "additions": 188,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/resources/bundles/payment_pt_BR.properties",
          "status": "added",
          "additions": 50,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/resources/bundles/shipping_pt_BR.properties",
          "status": "added",
          "additions": 107,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/resources/bundles/shopizer.properties",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/resources/bundles/shopizer_es.properties",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/resources/bundles/shopizer_fr.properties",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/resources/bundles/shopizer_pt_BR.properties",
          "status": "added",
          "additions": 697,
          "deletions": 0,
          "patch": null
        },
        {
          "filename": "sm-shop/src/main/resources/shopizer-properties.properties",
          "status": "modified",
          "additions": 1,
          "deletions": 1,
          "patch": null
        },
        {
          "filename": "sm-shop/src/test/java/com/salesmanager/test/shop/integration/cart/ShoppingCartAPIIntegrationTest.java",
          "status": "modified",
          "additions": 15,
          "deletions": 16,
          "patch": null
        },
        {
          "filename": "sm-shop/src/test/java/com/salesmanager/test/shop/util/GeneratePasswordTest.java",
          "status": "modified",
          "additions": 3,
          "deletions": 14,
          "patch": null
        }
      ],
      "file_patterns": {
        "security_files": 6,
        "config_files": 7,
        "dependency_files": 0,
        "test_files": 2,
        "unique_directories": 69,
        "max_directory_depth": 12
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "42e5937f6b39d0227de5b4e65b610cdc53b2ade2",
            "date": "2024-08-10T14:38:29Z",
            "author_login": "shopizer-ecommerce"
          },
          {
            "sha": "e4d85b191b359742edae5d5d23c4d704b0731d9a",
            "date": "2024-08-10T14:38:14Z",
            "author_login": "shopizer-ecommerce"
          },
          {
            "sha": "8227a6b64996f232bcf2153da146f7b72a255a4e",
            "date": "2024-08-10T14:37:13Z",
            "author_login": "shopizer-ecommerce"
          },
          {
            "sha": "054a3bde1ea8894d13b0a8fb4e28f9db17262224",
            "date": "2023-04-26T02:47:50Z",
            "author_login": "shopizer-ecommerce"
          },
          {
            "sha": "1e495f7893a5b3b270de23358787c9635bf4ad41",
            "date": "2023-04-26T02:37:12Z",
            "author_login": "shopizer-ecommerce"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 4.8,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N",
    "cwe_id": "CWE-79",
    "description": "A Stored Cross Site Scripting (XSS) vulnerability exists in Shopizer versions 2.0 through 2.17.0, where a privileged user (attacker) can inject malicious JavaScript in the filename under the \u201cManage files\u201d tab",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-05-01T13:15:07.677",
    "last_modified": "2024-11-21T06:47:54.470",
    "fix_date": "2021-10-04T01:08:44Z"
  },
  "references": [
    {
      "url": "https://github.com/shopizer-ecommerce/shopizer/commit/6b9f1ecd303b3b724d96bd08095c1a751dcc287e",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2022-23060",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/shopizer-ecommerce/shopizer/commit/6b9f1ecd303b3b724d96bd08095c1a751dcc287e",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2022-23060",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:04.428565",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "shopizer",
    "owner": "shopizer-ecommerce",
    "created_at": "2012-11-21T03:42:39Z",
    "updated_at": "2025-01-14T02:06:42Z",
    "pushed_at": "2024-12-19T17:37:24Z",
    "size": 566471,
    "stars": 3612,
    "forks": 3018,
    "open_issues": 555,
    "watchers": 3612,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "Java": 3638347,
      "FreeMarker": 111592,
      "Dockerfile": 203
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "apache-2.0"
    },
    "collected_at": "2025-01-14T14:04:13.648803"
  }
}