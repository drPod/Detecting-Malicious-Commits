{
  "cve_id": "CVE-2022-23080",
  "github_data": {
    "repository": "directus/directus",
    "fix_commit": "6da3f1ed5034115b1da00440008351bf0d808d83",
    "related_commits": [
      "6da3f1ed5034115b1da00440008351bf0d808d83",
      "6da3f1ed5034115b1da00440008351bf0d808d83"
    ],
    "patch_url": "https://github.com/directus/directus/commit/6da3f1ed5034115b1da00440008351bf0d808d83.patch",
    "fix_commit_details": {
      "sha": "6da3f1ed5034115b1da00440008351bf0d808d83",
      "commit_date": "2022-03-07T23:09:08Z",
      "author": {
        "login": "rijkvanzanten",
        "type": "User",
        "stats": {
          "total_commits": 6880,
          "average_weekly_commits": 26.563706563706564,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 246
        }
      },
      "commit_message": {
        "title": "Add support for import ip deny list (#12025)",
        "length": 97,
        "has_description": true,
        "references_issue": true
      },
      "stats": {
        "total": 63,
        "additions": 60,
        "deletions": 3
      },
      "files": [
        {
          "filename": "api/src/env.ts",
          "status": "modified",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -77,6 +77,8 @@ const defaults: Record<string, any> = {\n \tIP_TRUST_PROXY: true,\n \tIP_CUSTOM_HEADER: false,\n \n+\tIMPORT_IP_DENY_LIST: '0.0.0.0',\n+\n \tSERVE_APP: true,\n \n \tRELATIONAL_BATCH_SIZE: 25000,\n@@ -95,6 +97,7 @@ const typeMap: Record<string, string> = {\n \tDB_PORT: 'number',\n \n \tDB_EXCLUDE_TABLES: 'array',\n+\tIMPORT_IP_DENY_LIST: 'array',\n };\n \n let env: Record<string, any> = {"
        },
        {
          "filename": "api/src/services/files.ts",
          "status": "modified",
          "additions": 56,
          "deletions": 3,
          "patch": "@@ -5,7 +5,9 @@ import { clone } from 'lodash';\n import { extension } from 'mime-types';\n import path from 'path';\n import sharp from 'sharp';\n-import url from 'url';\n+import url, { URL } from 'url';\n+import { promisify } from 'util';\n+import { lookup } from 'dns';\n import emitter from '../emitter';\n import env from '../env';\n import { ForbiddenException, ServiceUnavailableException } from '../exceptions';\n@@ -14,6 +16,10 @@ import storage from '../storage';\n import { AbstractServiceOptions, File, PrimaryKey, MutationOptions } from '../types';\n import { toArray } from '@directus/shared/utils';\n import { ItemsService } from './items';\n+import net from 'net';\n+import os from 'os';\n+\n+const lookupDNS = promisify(lookup);\n \n export class FilesService extends ItemsService {\n \tconstructor(options: AbstractServiceOptions) {\n@@ -161,15 +167,62 @@ export class FilesService extends ItemsService {\n \t\t\tthrow new ForbiddenException();\n \t\t}\n \n+\t\tlet resolvedUrl;\n+\n+\t\ttry {\n+\t\t\tresolvedUrl = new URL(importURL);\n+\t\t} catch (err: any) {\n+\t\t\tlogger.warn(err, `Requested URL ${importURL} isn't a valid URL`);\n+\t\t\tthrow new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n+\t\t\t\tservice: 'external-file',\n+\t\t\t});\n+\t\t}\n+\n+\t\tlet ip = resolvedUrl.hostname;\n+\n+\t\tif (net.isIP(ip) === 0) {\n+\t\t\ttry {\n+\t\t\t\tip = (await lookupDNS(ip)).address;\n+\t\t\t} catch (err: any) {\n+\t\t\t\tlogger.warn(err, `Couldn't lookup the DNS for url ${importURL}`);\n+\t\t\t\tthrow new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n+\t\t\t\t\tservice: 'external-file',\n+\t\t\t\t});\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (env.IMPORT_IP_DENY_LIST.includes('0.0.0.0')) {\n+\t\t\tconst networkInterfaces = os.networkInterfaces();\n+\n+\t\t\tfor (const networkInfo of Object.values(networkInterfaces)) {\n+\t\t\t\tif (!networkInfo) continue;\n+\n+\t\t\t\tfor (const info of networkInfo) {\n+\t\t\t\t\tif (info.address === ip) {\n+\t\t\t\t\t\tlogger.warn(`Requested URL ${importURL} resolves to localhost.`);\n+\t\t\t\t\t\tthrow new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n+\t\t\t\t\t\t\tservice: 'external-file',\n+\t\t\t\t\t\t});\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (env.IMPORT_IP_DENY_LIST.includes(ip)) {\n+\t\t\tlogger.warn(`Requested URL ${importURL} resolves to a denied IP address.`);\n+\t\t\tthrow new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n+\t\t\t\tservice: 'external-file',\n+\t\t\t});\n+\t\t}\n+\n \t\tlet fileResponse: AxiosResponse<NodeJS.ReadableStream>;\n \n \t\ttry {\n \t\t\tfileResponse = await axios.get<NodeJS.ReadableStream>(importURL, {\n \t\t\t\tresponseType: 'stream',\n \t\t\t});\n \t\t} catch (err: any) {\n-\t\t\tlogger.warn(`Couldn't fetch file from url \"${importURL}\"`);\n-\t\t\tlogger.warn(err);\n+\t\t\tlogger.warn(err, `Couldn't fetch file from url \"${importURL}\"`);\n \t\t\tthrow new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n \t\t\t\tservice: 'external-file',\n \t\t\t});"
        },
        {
          "filename": "docs/configuration/config-options.md",
          "status": "modified",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -280,6 +280,7 @@ All the `DB_POOL_` prefixed options are passed to [`tarn.js`](https://github.com\n | `IP_CUSTOM_HEADER`               | What custom request header to use for the IP address                                                                                                             | false                    |\n | `CONTENT_SECURITY_POLICY`        | Custom overrides for the Content-Security-Policy header. See [helmet's documentation](https://helmetjs.github.io) for more information.                          | --                       |\n | `ASSETS_CONTENT_SECURITY_POLICY` | Custom overrides for the Content-Security-Policy header for the /assets endpoint. See [helmet's documentation](https://helmetjs.github.io) for more information. | --                       |\n+| `IMPORT_IP_DENY_LIST`            | Deny importing files from these IP addresses. Use `0.0.0.0` for any local IP address                                                                             | `0.0.0.0`                |\n \n ::: tip Cookie Strictness\n "
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 1,
        "dependency_files": 0,
        "test_files": 0,
        "unique_directories": 3,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "28f7dc1c87793e5404c11a7d771760d772171108",
            "date": "2025-01-14T16:53:02Z",
            "author_login": "SP12893678"
          },
          {
            "sha": "3d6f6b5a84cddcfff8bc77fd17b66622732f6847",
            "date": "2025-01-14T14:24:03Z",
            "author_login": "ComfortablyCoding"
          },
          {
            "sha": "95687907fe6abdc2102fece5c9a0c4f637a48cda",
            "date": "2025-01-13T18:35:02Z",
            "author_login": "Dominic-Marcelino"
          },
          {
            "sha": "f6e54ecfc937f519d8cdf44cf10d110c5bbb14d1",
            "date": "2025-01-13T15:24:41Z",
            "author_login": "joselcvarela"
          },
          {
            "sha": "c2b35c42341ec304a83d7175360141e654a50912",
            "date": "2025-01-13T14:33:43Z",
            "author_login": "connorwinston"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 5.0,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:N/A:N",
    "cwe_id": "CWE-918",
    "description": "In directus versions v9.0.0-beta.2 through 9.6.0 are vulnerable to server-side request forgery (SSRF) in the media upload functionality which allows a low privileged user to perform internal network port scans.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-06-22T16:15:07.930",
    "last_modified": "2024-11-21T06:47:56.363",
    "fix_date": "2022-03-07T23:09:08Z"
  },
  "references": [
    {
      "url": "https://github.com/directus/directus/commit/6da3f1ed5034115b1da00440008351bf0d808d83",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.mend.io/vulnerability-database/CVE-2022-23080",
      "source": "vulnerabilitylab@mend.io",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/directus/directus/commit/6da3f1ed5034115b1da00440008351bf0d808d83",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://www.mend.io/vulnerability-database/CVE-2022-23080",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:09.468486",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "directus",
    "owner": "directus",
    "created_at": "2012-12-12T01:35:36Z",
    "updated_at": "2025-01-14T12:22:36Z",
    "pushed_at": "2025-01-14T01:57:44Z",
    "size": 402534,
    "stars": 28706,
    "forks": 4004,
    "open_issues": 560,
    "watchers": 28706,
    "has_security_policy": false,
    "default_branch": "main",
    "protected_branches": [],
    "languages": {
      "TypeScript": 5077921,
      "Vue": 1872125,
      "SCSS": 55791,
      "Liquid": 28677,
      "CSS": 28575,
      "JavaScript": 26426,
      "Dockerfile": 1905,
      "HTML": 1189
    },
    "commit_activity": {
      "total_commits_last_year": 1775,
      "avg_commits_per_week": 34.13461538461539,
      "days_active_last_year": 258
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": false,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T14:01:10.212039"
  }
}