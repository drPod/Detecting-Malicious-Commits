{
  "cve_id": "CVE-2022-2309",
  "github_data": {
    "repository": "lxml/lxml",
    "fix_commit": "86368e9cf70a0ad23cccd5ee32de847149af0c6f",
    "related_commits": [
      "86368e9cf70a0ad23cccd5ee32de847149af0c6f",
      "86368e9cf70a0ad23cccd5ee32de847149af0c6f"
    ],
    "patch_url": "https://github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f.patch",
    "fix_commit_details": {
      "sha": "86368e9cf70a0ad23cccd5ee32de847149af0c6f",
      "commit_date": "2022-07-01T19:06:10Z",
      "author": {
        "login": "scoder",
        "type": "User",
        "stats": null
      },
      "commit_message": {
        "title": "Fix a crash when incorrect parser input occurs together with usages of iterwalk() on trees generated by the same parser.",
        "length": 120,
        "has_description": false,
        "references_issue": true
      },
      "stats": {
        "total": 38,
        "additions": 30,
        "deletions": 8
      },
      "files": [
        {
          "filename": "src/lxml/apihelpers.pxi",
          "status": "modified",
          "additions": 4,
          "deletions": 3,
          "patch": "@@ -246,9 +246,10 @@ cdef dict _build_nsmap(xmlNode* c_node):\n     while c_node is not NULL and c_node.type == tree.XML_ELEMENT_NODE:\n         c_ns = c_node.nsDef\n         while c_ns is not NULL:\n-            prefix = funicodeOrNone(c_ns.prefix)\n-            if prefix not in nsmap:\n-                nsmap[prefix] = funicodeOrNone(c_ns.href)\n+            if c_ns.prefix or c_ns.href:\n+                prefix = funicodeOrNone(c_ns.prefix)\n+                if prefix not in nsmap:\n+                    nsmap[prefix] = funicodeOrNone(c_ns.href)\n             c_ns = c_ns.next\n         c_node = c_node.parent\n     return nsmap"
        },
        {
          "filename": "src/lxml/iterparse.pxi",
          "status": "modified",
          "additions": 6,
          "deletions": 5,
          "patch": "@@ -420,7 +420,7 @@ cdef int _countNsDefs(xmlNode* c_node):\n     count = 0\n     c_ns = c_node.nsDef\n     while c_ns is not NULL:\n-        count += 1\n+        count += (c_ns.href is not NULL)\n         c_ns = c_ns.next\n     return count\n \n@@ -431,9 +431,10 @@ cdef int _appendStartNsEvents(xmlNode* c_node, list event_list) except -1:\n     count = 0\n     c_ns = c_node.nsDef\n     while c_ns is not NULL:\n-        ns_tuple = (funicode(c_ns.prefix) if c_ns.prefix is not NULL else '',\n-                    funicode(c_ns.href))\n-        event_list.append( (u\"start-ns\", ns_tuple) )\n-        count += 1\n+        if c_ns.href:\n+            ns_tuple = (funicodeOrEmpty(c_ns.prefix),\n+                        funicode(c_ns.href))\n+            event_list.append( (u\"start-ns\", ns_tuple) )\n+            count += 1\n         c_ns = c_ns.next\n     return count"
        },
        {
          "filename": "src/lxml/tests/test_etree.py",
          "status": "modified",
          "additions": 20,
          "deletions": 0,
          "patch": "@@ -1460,6 +1460,26 @@ def test_iterwalk_getiterator(self):\n             [1,2,1,4],\n             counts)\n \n+    def test_walk_after_parse_failure(self):\n+        # This used to be an issue because libxml2 can leak empty namespaces\n+        # between failed parser runs.  iterwalk() failed to handle such a tree.\n+        try:\n+            etree.XML('''<anot xmlns=\"1\">''')\n+        except etree.XMLSyntaxError:\n+            pass\n+        else:\n+            assert False, \"invalid input did not fail to parse\"\n+\n+        et = etree.XML('''<root>  </root>''')\n+        try:\n+            ns = next(etree.iterwalk(et, events=('start-ns',)))\n+        except StopIteration:\n+            # This would be the expected result, because there was no namespace\n+            pass\n+        else:\n+            # This is a bug in libxml2\n+            assert not ns, repr(ns)\n+\n     def test_itertext_comment_pi(self):\n         # https://bugs.launchpad.net/lxml/+bug/1844674\n         XML = self.etree.XML"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 3
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "c58e3de71d2a0c74a1c401698ab956d3ca787741",
            "date": "2025-01-13T15:14:43Z",
            "author_login": "scoder"
          },
          {
            "sha": "8bdbbd9c1c04a3b34eee819a4332870c59fe4ed8",
            "date": "2025-01-13T14:13:11Z",
            "author_login": "scoder"
          },
          {
            "sha": "7be20eb3931010b42dfa81427c45fa716f52954c",
            "date": "2024-11-05T09:59:08Z",
            "author_login": "scoder"
          },
          {
            "sha": "9bdf66b1e33b19ac2796d3f210bc861aebe476e3",
            "date": "2024-11-05T09:40:10Z",
            "author_login": "scoder"
          },
          {
            "sha": "224dc56d325d057db14ecf672ead3f1fed5e1b29",
            "date": "2024-11-05T09:16:03Z",
            "author_login": "scoder"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.5,
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
    "cwe_id": "CWE-476",
    "description": "NULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn't be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered.",
    "attack_vector": "NETWORK",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-05T10:15:08.763",
    "last_modified": "2024-11-21T07:00:44.473",
    "fix_date": "2022-07-01T19:06:10Z"
  },
  "references": [
    {
      "url": "https://github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8264e74f-edda-4c40-9956-49de635105ba",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HGYC6L7ENH5VEGN3YWFBYMGKX6WNS7HZ/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/URHHSIBTPTALXMECRLAC2EVDNAFSR5NO/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202208-06",
      "source": "security@huntr.dev",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20220915-0006/",
      "source": "security@huntr.dev",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://github.com/lxml/lxml/commit/86368e9cf70a0ad23cccd5ee32de847149af0c6f",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/8264e74f-edda-4c40-9956-49de635105ba",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Issue Tracking",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HGYC6L7ENH5VEGN3YWFBYMGKX6WNS7HZ/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/URHHSIBTPTALXMECRLAC2EVDNAFSR5NO/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202208-06",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.netapp.com/advisory/ntap-20220915-0006/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.455165",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "lxml",
    "owner": "lxml",
    "created_at": "2011-02-11T05:43:11Z",
    "updated_at": "2025-01-14T14:28:27Z",
    "pushed_at": "2025-01-13T15:14:45Z",
    "size": 20407,
    "stars": 2745,
    "forks": 569,
    "open_issues": 20,
    "watchers": 2745,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [
      "master"
    ],
    "languages": {
      "Python": 1261561,
      "Cython": 913329,
      "XSLT": 154294,
      "HTML": 15198,
      "C": 14544,
      "Shell": 6262,
      "Makefile": 5719
    },
    "commit_activity": {
      "total_commits_last_year": 0,
      "avg_commits_per_week": 0,
      "days_active_last_year": 0
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": true,
      "has_wiki": false,
      "has_issues": false,
      "allow_forking": true,
      "is_template": false,
      "license": "other"
    },
    "collected_at": "2025-01-14T15:48:07.726628"
  }
}