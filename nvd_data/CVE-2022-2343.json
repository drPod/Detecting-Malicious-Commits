{
  "cve_id": "CVE-2022-2343",
  "github_data": {
    "repository": "vim/vim",
    "fix_commit": "caea66442d86e7bbba3bf3dc202c3c0d549b9853",
    "related_commits": [
      "caea66442d86e7bbba3bf3dc202c3c0d549b9853",
      "caea66442d86e7bbba3bf3dc202c3c0d549b9853"
    ],
    "patch_url": "https://github.com/vim/vim/commit/caea66442d86e7bbba3bf3dc202c3c0d549b9853.patch",
    "fix_commit_details": {
      "sha": "caea66442d86e7bbba3bf3dc202c3c0d549b9853",
      "commit_date": "2022-07-07T18:42:04Z",
      "author": {
        "login": "brammool",
        "type": "User",
        "stats": {
          "total_commits": 16567,
          "average_weekly_commits": 15.411162790697674,
          "total_additions": 0,
          "total_deletions": 0,
          "weeks_active": 874
        }
      },
      "commit_message": {
        "title": "patch 9.0.0045: reading past end of completion with a long line",
        "length": 200,
        "has_description": true,
        "references_issue": false
      },
      "stats": {
        "total": 112,
        "additions": 84,
        "deletions": 28
      },
      "files": [
        {
          "filename": "src/insexpand.c",
          "status": "modified",
          "additions": 66,
          "deletions": 28,
          "patch": "@@ -524,29 +524,32 @@ ins_compl_accept_char(int c)\n \n /*\n  * Get the completed text by inferring the case of the originally typed text.\n+ * If the result is in allocated memory \"tofree\" is set to it.\n  */\n     static char_u *\n ins_compl_infercase_gettext(\n \tchar_u\t*str,\n-\tint\tactual_len,\n-\tint\tactual_compl_length,\n-\tint\tmin_len)\n+\tint\tchar_len,\n+\tint\tcompl_char_len,\n+\tint\tmin_len,\n+\tchar_u  **tofree)\n {\n     int\t\t*wca;\t\t\t// Wide character array.\n     char_u\t*p;\n     int\t\ti, c;\n     int\t\thas_lower = FALSE;\n     int\t\twas_letter = FALSE;\n+    garray_T\tgap;\n \n     IObuff[0] = NUL;\n \n     // Allocate wide character array for the completion and fill it.\n-    wca = ALLOC_MULT(int, actual_len);\n+    wca = ALLOC_MULT(int, char_len);\n     if (wca == NULL)\n \treturn IObuff;\n \n     p = str;\n-    for (i = 0; i < actual_len; ++i)\n+    for (i = 0; i < char_len; ++i)\n \tif (has_mbyte)\n \t    wca[i] = mb_ptr2char_adv(&p);\n \telse\n@@ -566,7 +569,7 @@ ins_compl_infercase_gettext(\n \t    if (MB_ISUPPER(wca[i]))\n \t    {\n \t\t// Rule 1 is satisfied.\n-\t\tfor (i = actual_compl_length; i < actual_len; ++i)\n+\t\tfor (i = compl_char_len; i < char_len; ++i)\n \t\t    wca[i] = MB_TOLOWER(wca[i]);\n \t\tbreak;\n \t    }\n@@ -587,7 +590,7 @@ ins_compl_infercase_gettext(\n \t    if (was_letter && MB_ISUPPER(c) && MB_ISLOWER(wca[i]))\n \t    {\n \t\t// Rule 2 is satisfied.\n-\t\tfor (i = actual_compl_length; i < actual_len; ++i)\n+\t\tfor (i = compl_char_len; i < char_len; ++i)\n \t\t    wca[i] = MB_TOUPPER(wca[i]);\n \t\tbreak;\n \t    }\n@@ -610,20 +613,52 @@ ins_compl_infercase_gettext(\n     }\n \n     // Generate encoding specific output from wide character array.\n-    // Multi-byte characters can occupy up to five bytes more than\n-    // ASCII characters, and we also need one byte for NUL, so stay\n-    // six bytes away from the edge of IObuff.\n     p = IObuff;\n     i = 0;\n-    while (i < actual_len && (p - IObuff + 6) < IOSIZE)\n-\tif (has_mbyte)\n+    ga_init2(&gap, 1, 500);\n+    while (i < char_len)\n+    {\n+\tif (gap.ga_data != NULL)\n+\t{\n+\t    if (ga_grow(&gap, 10) == FAIL)\n+\t    {\n+\t\tga_clear(&gap);\n+\t\treturn (char_u *)\"[failed]\";\n+\t    }\n+\t    p = (char_u *)gap.ga_data + gap.ga_len;\n+\t    if (has_mbyte)\n+\t\tgap.ga_len += (*mb_char2bytes)(wca[i++], p);\n+\t    else\n+\t    {\n+\t\t*p = wca[i++];\n+\t\t++gap.ga_len;\n+\t    }\n+\t}\n+\telse if ((p - IObuff) + 6 >= IOSIZE)\n+\t{\n+\t    // Multi-byte characters can occupy up to five bytes more than\n+\t    // ASCII characters, and we also need one byte for NUL, so when\n+\t    // getting to six bytes from the edge of IObuff switch to using a\n+\t    // growarray.  Add the character in the next round.\n+\t    if (ga_grow(&gap, IOSIZE) == FAIL)\n+\t\treturn (char_u *)\"[failed]\";\n+\t    STRCPY(gap.ga_data, IObuff);\n+\t    gap.ga_len = STRLEN(IObuff);\n+\t}\n+\telse if (has_mbyte)\n \t    p += (*mb_char2bytes)(wca[i++], p);\n \telse\n \t    *(p++) = wca[i++];\n-    *p = NUL;\n-\n+    }\n     vim_free(wca);\n \n+    if (gap.ga_data != NULL)\n+    {\n+\t*tofree = gap.ga_data;\n+\treturn gap.ga_data;\n+    }\n+\n+    *p = NUL;\n     return IObuff;\n }\n \n@@ -644,10 +679,12 @@ ins_compl_add_infercase(\n {\n     char_u\t*str = str_arg;\n     char_u\t*p;\n-    int\t\tactual_len;\t\t// Take multi-byte characters\n-    int\t\tactual_compl_length;\t// into account.\n+    int\t\tchar_len;\t\t// count multi-byte characters\n+    int\t\tcompl_char_len;\n     int\t\tmin_len;\n     int\t\tflags = 0;\n+    int\t\tres;\n+    char_u\t*tofree = NULL;\n \n     if (p_ic && curbuf->b_p_inf && len > 0)\n     {\n@@ -657,44 +694,45 @@ ins_compl_add_infercase(\n \tif (has_mbyte)\n \t{\n \t    p = str;\n-\t    actual_len = 0;\n+\t    char_len = 0;\n \t    while (*p != NUL)\n \t    {\n \t\tMB_PTR_ADV(p);\n-\t\t++actual_len;\n+\t\t++char_len;\n \t    }\n \t}\n \telse\n-\t    actual_len = len;\n+\t    char_len = len;\n \n \t// Find actual length of original text.\n \tif (has_mbyte)\n \t{\n \t    p = compl_orig_text;\n-\t    actual_compl_length = 0;\n+\t    compl_char_len = 0;\n \t    while (*p != NUL)\n \t    {\n \t\tMB_PTR_ADV(p);\n-\t\t++actual_compl_length;\n+\t\t++compl_char_len;\n \t    }\n \t}\n \telse\n-\t    actual_compl_length = compl_length;\n+\t    compl_char_len = compl_length;\n \n-\t// \"actual_len\" may be smaller than \"actual_compl_length\" when using\n+\t// \"char_len\" may be smaller than \"compl_char_len\" when using\n \t// thesaurus, only use the minimum when comparing.\n-\tmin_len = actual_len < actual_compl_length\n-\t\t\t\t\t   ? actual_len : actual_compl_length;\n+\tmin_len = char_len < compl_char_len ? char_len : compl_char_len;\n \n-\tstr = ins_compl_infercase_gettext(str, actual_len, actual_compl_length,\n-\t\t\t\t\t\t\t\tmin_len);\n+\tstr = ins_compl_infercase_gettext(str, char_len,\n+\t\t\t\t\t  compl_char_len, min_len, &tofree);\n     }\n     if (cont_s_ipos)\n \tflags |= CP_CONT_S_IPOS;\n     if (icase)\n \tflags |= CP_ICASE;\n \n-    return ins_compl_add(str, len, fname, NULL, NULL, dir, flags, FALSE);\n+    res = ins_compl_add(str, len, fname, NULL, NULL, dir, flags, FALSE);\n+    vim_free(tofree);\n+    return res;\n }\n \n /*"
        },
        {
          "filename": "src/testdir/test_ins_complete.vim",
          "status": "modified",
          "additions": 16,
          "deletions": 0,
          "patch": "@@ -2097,4 +2097,20 @@ func Test_complete_overrun()\n   bwipe!\n endfunc\n \n+func Test_infercase_very_long_line()\n+  \" this was truncating the line when inferring case\n+  new\n+  let longLine = \"blah \"->repeat(300)\n+  let verylongLine = \"blah \"->repeat(400)\n+  call setline(1, verylongLine)\n+  call setline(2, longLine)\n+  set ic infercase\n+  exe \"normal 2Go\\<C-X>\\<C-L>\\<Esc>\"\n+  call assert_equal(longLine, getline(3))\n+\n+  bwipe!\n+  set noic noinfercase\n+endfunc\n+\n+\n \" vim: shiftwidth=2 sts=2 expandtab"
        },
        {
          "filename": "src/version.c",
          "status": "modified",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -735,6 +735,8 @@ static char *(features[]) =\n \n static int included_patches[] =\n {   /* Add new patch number below this line */\n+/**/\n+    45,\n /**/\n     44,\n /**/"
        }
      ],
      "file_patterns": {
        "security_files": 0,
        "config_files": 0,
        "dependency_files": 0,
        "test_files": 1,
        "unique_directories": 2,
        "max_directory_depth": 2
      },
      "context": {
        "surrounding_commits": [
          {
            "sha": "1aefe1de0b20fe4966863e07efa14b6aa87323ee",
            "date": "2025-01-14T16:29:42Z",
            "author_login": "yegappan"
          },
          {
            "sha": "1ac53b84ada3a992f320566737e66fa00d48611f",
            "date": "2025-01-14T16:25:02Z",
            "author_login": "chrisbra"
          },
          {
            "sha": "57f0119358ed7f060d5020309b9043463121435f",
            "date": "2025-01-14T16:21:42Z",
            "author_login": "h-east"
          },
          {
            "sha": "045564d0a73218594691953c0c8bf2035e1e176e",
            "date": "2025-01-14T16:15:59Z",
            "author_login": "habamax"
          },
          {
            "sha": "6289f9159102e0855bedc566636b5e7ca6ced72c",
            "date": "2025-01-14T16:13:36Z",
            "author_login": "yegappan"
          }
        ]
      }
    }
  },
  "vulnerability_details": {
    "cvss_score": 7.8,
    "cvss_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H",
    "cwe_id": "CWE-122",
    "description": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 9.0.0044.",
    "attack_vector": "LOCAL",
    "attack_complexity": "LOW"
  },
  "temporal_data": {
    "published_date": "2022-07-08T18:15:09.820",
    "last_modified": "2024-11-21T07:00:48.510",
    "fix_date": "2022-07-07T18:42:04Z"
  },
  "references": [
    {
      "url": "https://github.com/vim/vim/commit/caea66442d86e7bbba3bf3dc202c3c0d549b9853",
      "source": "security@huntr.dev",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/2ecb4345-2fc7-4e7f-adb0-83a20bb458f5",
      "source": "security@huntr.dev",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/43Y3VJPOTTY3NTREDIFUPITM2POG4ZLP/",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202208-32",
      "source": "security@huntr.dev",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202305-16",
      "source": "security@huntr.dev",
      "tags": []
    },
    {
      "url": "https://github.com/vim/vim/commit/caea66442d86e7bbba3bf3dc202c3c0d549b9853",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://huntr.dev/bounties/2ecb4345-2fc7-4e7f-adb0-83a20bb458f5",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Exploit",
        "Patch",
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/43Y3VJPOTTY3NTREDIFUPITM2POG4ZLP/",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    },
    {
      "url": "https://security.gentoo.org/glsa/202208-32",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": [
        "Third Party Advisory"
      ]
    },
    {
      "url": "https://security.gentoo.org/glsa/202305-16",
      "source": "af854a3a-2127-422b-91ae-364da2661108",
      "tags": []
    }
  ],
  "collection_metadata": {
    "collected_at": "2025-01-11T23:03:11.466091",
    "processing_status": "raw"
  },
  "repository_context": {
    "name": "vim",
    "owner": "vim",
    "created_at": "2015-08-18T21:03:56Z",
    "updated_at": "2025-01-14T08:58:33Z",
    "pushed_at": "2025-01-13T07:25:13Z",
    "size": 153925,
    "stars": 37215,
    "forks": 5529,
    "open_issues": 1516,
    "watchers": 37215,
    "has_security_policy": false,
    "default_branch": "master",
    "protected_branches": [],
    "languages": {
      "Vim Script": 20025864,
      "C": 14374546,
      "Roff": 576344,
      "Makefile": 490522,
      "C++": 246793,
      "NSIS": 180936,
      "M4": 159971,
      "Java": 85446,
      "Shell": 71333,
      "PostScript": 64070,
      "Module Management System": 56375,
      "Python": 51761,
      "XS": 51261,
      "Ruby": 40309,
      "JavaScript": 37774,
      "NewLisp": 37431,
      "Raku": 34258,
      "Emacs Lisp": 30304,
      "Perl": 29735,
      "SystemVerilog": 27883,
      "Smalltalk": 25762,
      "Awk": 19481,
      "Batchfile": 18475,
      "Objective-C": 13147,
      "DIGITAL Command Language": 10835,
      "HTML": 6885,
      "Prolog": 4336,
      "KRL": 4206,
      "MATLAB": 1970,
      "Thrift": 1670,
      "OpenEdge ABL": 1490,
      "sed": 826,
      "Tcl": 745,
      "Lua": 738,
      "BitBake": 388
    },
    "commit_activity": {
      "total_commits_last_year": 1872,
      "avg_commits_per_week": 36.0,
      "days_active_last_year": 324
    },
    "security_features": {
      "has_security_policy": false,
      "has_protected_branches": false,
      "has_wiki": true,
      "has_issues": true,
      "allow_forking": true,
      "is_template": false,
      "license": "vim"
    },
    "collected_at": "2025-01-14T12:54:52.772009"
  }
}